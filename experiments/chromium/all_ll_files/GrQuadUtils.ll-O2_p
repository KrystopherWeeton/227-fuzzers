; ModuleID = '../../third_party/skia/src/gpu/geometry/GrQuadUtils.cpp'
source_filename = "../../third_party/skia/src/gpu/geometry/GrQuadUtils.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.GrQuadUtils::TessellationHelper::Vertices" = type { %"struct.skvx::Vec", %"struct.skvx::Vec", %"struct.skvx::Vec", %"struct.skvx::Vec", %"struct.skvx::Vec", %"struct.skvx::Vec", i32, [12 x i8] }
%"struct.skvx::Vec" = type { %"struct.skvx::Vec.0", %"struct.skvx::Vec.0" }
%"struct.skvx::Vec.0" = type { %"struct.skvx::Vec.1", %"struct.skvx::Vec.1" }
%"struct.skvx::Vec.1" = type { float }
%class.GrQuad = type { [4 x float], [4 x float], [4 x float], i32 }
%struct.DrawQuad = type { %class.GrQuad, %class.GrQuad, i32 }
%struct.SkRect = type { float, float, float, float }
%"struct.GrQuadUtils::TessellationHelper::EdgeVectors" = type { %"struct.skvx::Vec", %"struct.skvx::Vec", %"struct.skvx::Vec", %"struct.skvx::Vec", %"struct.skvx::Vec", %"struct.skvx::Vec", %"struct.skvx::Vec" }
%"struct.GrQuadUtils::TessellationHelper::EdgeEquations" = type { %"struct.skvx::Vec", %"struct.skvx::Vec", %"struct.skvx::Vec" }
%"struct.skvx::Vec.2" = type { %"struct.skvx::Vec.3", %"struct.skvx::Vec.3" }
%"struct.skvx::Vec.3" = type { %"struct.skvx::Vec.4", %"struct.skvx::Vec.4" }
%"struct.skvx::Vec.4" = type { i32 }
%"struct.GrQuadUtils::TessellationHelper::OutsetRequest" = type <{ %"struct.skvx::Vec", i8, i8, [14 x i8] }>
%"class.GrQuadUtils::TessellationHelper" = type <{ %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", i32, i32, [8 x i8], %"struct.GrQuadUtils::TessellationHelper::OutsetRequest", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", i8, i8, i8, [13 x i8] }>

@__const._ZN11GrQuadUtils18TessellationHelper14adjustVerticesERKN4skvx3VecILi4EfEEPNS0_8VerticesE.projected = private unnamed_addr constant %"struct.GrQuadUtils::TessellationHelper::Vertices" { %"struct.skvx::Vec" { %"struct.skvx::Vec.0" { %"struct.skvx::Vec.1" { float 0xFFFFFFFFE0000000 }, %"struct.skvx::Vec.1" { float 0xFFFFFFFFE0000000 } }, %"struct.skvx::Vec.0" { %"struct.skvx::Vec.1" { float 0xFFFFFFFFE0000000 }, %"struct.skvx::Vec.1" { float 0xFFFFFFFFE0000000 } } }, %"struct.skvx::Vec" { %"struct.skvx::Vec.0" { %"struct.skvx::Vec.1" { float 0xFFFFFFFFE0000000 }, %"struct.skvx::Vec.1" { float 0xFFFFFFFFE0000000 } }, %"struct.skvx::Vec.0" { %"struct.skvx::Vec.1" { float 0xFFFFFFFFE0000000 }, %"struct.skvx::Vec.1" { float 0xFFFFFFFFE0000000 } } }, %"struct.skvx::Vec" { %"struct.skvx::Vec.0" { %"struct.skvx::Vec.1" { float 0xFFFFFFFFE0000000 }, %"struct.skvx::Vec.1" { float 0xFFFFFFFFE0000000 } }, %"struct.skvx::Vec.0" { %"struct.skvx::Vec.1" { float 0xFFFFFFFFE0000000 }, %"struct.skvx::Vec.1" { float 0xFFFFFFFFE0000000 } } }, %"struct.skvx::Vec" { %"struct.skvx::Vec.0" { %"struct.skvx::Vec.1" { float 0xFFFFFFFFE0000000 }, %"struct.skvx::Vec.1" { float 0xFFFFFFFFE0000000 } }, %"struct.skvx::Vec.0" { %"struct.skvx::Vec.1" { float 0xFFFFFFFFE0000000 }, %"struct.skvx::Vec.1" { float 0xFFFFFFFFE0000000 } } }, %"struct.skvx::Vec" { %"struct.skvx::Vec.0" { %"struct.skvx::Vec.1" { float 0xFFFFFFFFE0000000 }, %"struct.skvx::Vec.1" { float 0xFFFFFFFFE0000000 } }, %"struct.skvx::Vec.0" { %"struct.skvx::Vec.1" { float 0xFFFFFFFFE0000000 }, %"struct.skvx::Vec.1" { float 0xFFFFFFFFE0000000 } } }, %"struct.skvx::Vec" { %"struct.skvx::Vec.0" { %"struct.skvx::Vec.1" { float 0xFFFFFFFFE0000000 }, %"struct.skvx::Vec.1" { float 0xFFFFFFFFE0000000 } }, %"struct.skvx::Vec.0" { %"struct.skvx::Vec.1" { float 0xFFFFFFFFE0000000 }, %"struct.skvx::Vec.1" { float 0xFFFFFFFFE0000000 } } }, i32 -1431655766, [12 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA" }, align 16

; Function Attrs: nounwind readonly ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZNK6GrQuad15projectedBoundsEv(%class.GrQuad* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = bitcast %class.GrQuad* %0 to <2 x float>*
  %3 = load <2 x float>, <2 x float>* %2, align 1
  %4 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 0, i64 2
  %5 = bitcast float* %4 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = shufflevector <2 x float> %3, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %8 = shufflevector <2 x float> %6, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %9 = shufflevector <4 x float> %7, <4 x float> %8, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %10 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 1, i64 0
  %11 = bitcast float* %10 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 1
  %13 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 1, i64 2
  %14 = bitcast float* %13 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 1
  %16 = shufflevector <2 x float> %12, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %17 = shufflevector <2 x float> %15, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %18 = shufflevector <4 x float> %16, <4 x float> %17, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %19 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 2, i64 0
  %20 = bitcast float* %19 to <2 x float>*
  %21 = load <2 x float>, <2 x float>* %20, align 1
  %22 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 2, i64 2
  %23 = bitcast float* %22 to <2 x float>*
  %24 = load <2 x float>, <2 x float>* %23, align 1
  %25 = shufflevector <2 x float> %21, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %26 = shufflevector <2 x float> %24, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %27 = shufflevector <4 x float> %25, <4 x float> %26, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %28 = fcmp olt <4 x float> %27, <float 0x3F50000000000000, float 0x3F50000000000000, float 0x3F50000000000000, float 0x3F50000000000000>
  %29 = sext <4 x i1> %28 to <4 x i32>
  %30 = bitcast <4 x i32> %29 to <2 x i64>
  %31 = extractelement <2 x i64> %30, i32 0
  %32 = extractelement <2 x i64> %30, i32 1
  %33 = bitcast i64 %31 to <2 x i32>
  %34 = shufflevector <2 x i32> %33, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = bitcast i64 %32 to <2 x i32>
  %36 = shufflevector <2 x i32> %35, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %37 = shufflevector <4 x i32> %34, <4 x i32> %36, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %38 = extractelement <2 x i32> %33, i32 0
  %39 = extractelement <2 x i32> %33, i32 1
  %40 = or i32 %39, %38
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %47

42:                                               ; preds = %1
  %43 = extractelement <2 x i32> %35, i32 0
  %44 = extractelement <2 x i32> %35, i32 1
  %45 = or i32 %44, %43
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %361, label %47

47:                                               ; preds = %42, %1
  %48 = fdiv <4 x float> %9, %27
  %49 = shufflevector <4 x float> %48, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %50 = shufflevector <4 x float> %48, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %51 = bitcast <2 x float> %49 to <2 x i32>
  %52 = bitcast <2 x float> %50 to <2 x i32>
  %53 = fdiv <4 x float> %18, %27
  %54 = shufflevector <4 x float> %53, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %55 = shufflevector <4 x float> %53, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %56 = bitcast <2 x float> %54 to <2 x i32>
  %57 = bitcast <2 x float> %55 to <2 x i32>
  %58 = bitcast <4 x i32> %37 to <2 x i64>
  %59 = and <2 x i64> %58, <i64 9187343241974906880, i64 9187343241974906880>
  %60 = extractelement <2 x i64> %59, i32 0
  %61 = extractelement <2 x i64> %59, i32 1
  %62 = bitcast i64 %60 to <2 x i32>
  %63 = shufflevector <2 x i32> %62, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %64 = bitcast i64 %61 to <2 x i32>
  %65 = shufflevector <2 x i32> %64, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %66 = shufflevector <4 x i32> %63, <4 x i32> %65, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %67 = xor <2 x i64> %58, <i64 -1, i64 -1>
  %68 = extractelement <2 x i64> %67, i32 0
  %69 = extractelement <2 x i64> %67, i32 1
  %70 = bitcast i64 %68 to <2 x i32>
  %71 = shufflevector <2 x i32> %70, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %72 = bitcast i64 %69 to <2 x i32>
  %73 = shufflevector <2 x i32> %72, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %74 = shufflevector <4 x i32> %71, <4 x i32> %73, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %75 = shufflevector <2 x i32> %51, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %76 = shufflevector <2 x i32> %52, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %77 = shufflevector <4 x i32> %75, <4 x i32> %76, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %78 = and <4 x i32> %74, %77
  %79 = bitcast <4 x i32> %78 to <2 x i64>
  %80 = extractelement <2 x i64> %79, i32 0
  %81 = extractelement <2 x i64> %79, i32 1
  %82 = bitcast i64 %80 to <2 x i32>
  %83 = shufflevector <2 x i32> %82, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %84 = bitcast i64 %81 to <2 x i32>
  %85 = shufflevector <2 x i32> %84, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %86 = shufflevector <4 x i32> %83, <4 x i32> %85, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %87 = or <4 x i32> %86, %66
  %88 = bitcast <4 x i32> %87 to <2 x i64>
  %89 = extractelement <2 x i64> %88, i32 0
  %90 = extractelement <2 x i64> %88, i32 1
  %91 = bitcast i64 %89 to <2 x float>
  %92 = bitcast i64 %90 to <2 x float>
  %93 = extractelement <2 x float> %91, i32 0
  %94 = extractelement <2 x float> %91, i32 1
  %95 = fcmp olt float %94, %93
  %96 = select i1 %95, float %94, float %93
  %97 = extractelement <2 x float> %92, i32 0
  %98 = extractelement <2 x float> %92, i32 1
  %99 = fcmp olt float %98, %97
  %100 = select i1 %99, float %98, float %97
  %101 = fcmp olt float %100, %96
  %102 = select i1 %101, float %100, float %96
  %103 = shufflevector <2 x i32> %56, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %104 = shufflevector <2 x i32> %57, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %105 = shufflevector <4 x i32> %103, <4 x i32> %104, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %106 = and <4 x i32> %74, %105
  %107 = bitcast <4 x i32> %106 to <2 x i64>
  %108 = extractelement <2 x i64> %107, i32 0
  %109 = extractelement <2 x i64> %107, i32 1
  %110 = bitcast i64 %108 to <2 x i32>
  %111 = shufflevector <2 x i32> %110, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %112 = bitcast i64 %109 to <2 x i32>
  %113 = shufflevector <2 x i32> %112, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %114 = shufflevector <4 x i32> %111, <4 x i32> %113, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %115 = or <4 x i32> %114, %66
  %116 = bitcast <4 x i32> %115 to <2 x i64>
  %117 = extractelement <2 x i64> %116, i32 0
  %118 = extractelement <2 x i64> %116, i32 1
  %119 = bitcast i64 %117 to <2 x float>
  %120 = bitcast i64 %118 to <2 x float>
  %121 = extractelement <2 x float> %119, i32 0
  %122 = extractelement <2 x float> %119, i32 1
  %123 = fcmp olt float %122, %121
  %124 = select i1 %123, float %122, float %121
  %125 = extractelement <2 x float> %120, i32 0
  %126 = extractelement <2 x float> %120, i32 1
  %127 = fcmp olt float %126, %125
  %128 = select i1 %127, float %126, float %125
  %129 = fcmp olt float %128, %124
  %130 = select i1 %129, float %128, float %124
  %131 = and <2 x i64> %58, <i64 -36028792732385280, i64 -36028792732385280>
  %132 = extractelement <2 x i64> %131, i32 0
  %133 = extractelement <2 x i64> %131, i32 1
  %134 = bitcast i64 %132 to <2 x i32>
  %135 = shufflevector <2 x i32> %134, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %136 = bitcast i64 %133 to <2 x i32>
  %137 = shufflevector <2 x i32> %136, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %138 = shufflevector <4 x i32> %135, <4 x i32> %137, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %139 = or <4 x i32> %86, %138
  %140 = bitcast <4 x i32> %139 to <2 x i64>
  %141 = extractelement <2 x i64> %140, i32 0
  %142 = extractelement <2 x i64> %140, i32 1
  %143 = bitcast i64 %141 to <2 x float>
  %144 = bitcast i64 %142 to <2 x float>
  %145 = extractelement <2 x float> %143, i32 0
  %146 = extractelement <2 x float> %143, i32 1
  %147 = fcmp olt float %145, %146
  %148 = select i1 %147, float %146, float %145
  %149 = extractelement <2 x float> %144, i32 0
  %150 = extractelement <2 x float> %144, i32 1
  %151 = fcmp olt float %149, %150
  %152 = select i1 %151, float %150, float %149
  %153 = fcmp olt float %148, %152
  %154 = select i1 %153, float %152, float %148
  %155 = or <4 x i32> %114, %138
  %156 = bitcast <4 x i32> %155 to <2 x i64>
  %157 = extractelement <2 x i64> %156, i32 0
  %158 = extractelement <2 x i64> %156, i32 1
  %159 = bitcast i64 %157 to <2 x float>
  %160 = bitcast i64 %158 to <2 x float>
  %161 = extractelement <2 x float> %159, i32 0
  %162 = extractelement <2 x float> %159, i32 1
  %163 = fcmp olt float %161, %162
  %164 = select i1 %163, float %162, float %161
  %165 = extractelement <2 x float> %160, i32 0
  %166 = extractelement <2 x float> %160, i32 1
  %167 = fcmp olt float %165, %166
  %168 = select i1 %167, float %166, float %165
  %169 = fcmp olt float %164, %168
  %170 = select i1 %169, float %168, float %164
  %171 = fsub <4 x float> <float 0x3F50000000000000, float 0x3F50000000000000, float 0x3F50000000000000, float 0x3F50000000000000>, %27
  %172 = shufflevector <4 x float> %27, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %173 = fsub <4 x float> %172, %27
  %174 = fdiv <4 x float> %171, %173
  %175 = shufflevector <4 x float> %9, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %176 = fmul <4 x float> %175, %174
  %177 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %174
  %178 = fmul <4 x float> %9, %177
  %179 = fadd <4 x float> %176, %178
  %180 = fmul <4 x float> %179, <float 1.024000e+03, float 1.024000e+03, float 1.024000e+03, float 1.024000e+03>
  %181 = shufflevector <4 x float> %180, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %182 = shufflevector <4 x float> %180, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %183 = bitcast <2 x float> %181 to <2 x i32>
  %184 = bitcast <2 x float> %182 to <2 x i32>
  %185 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %186 = fmul <4 x float> %185, %174
  %187 = fmul <4 x float> %18, %177
  %188 = fadd <4 x float> %186, %187
  %189 = fmul <4 x float> %188, <float 1.024000e+03, float 1.024000e+03, float 1.024000e+03, float 1.024000e+03>
  %190 = shufflevector <4 x float> %189, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %191 = shufflevector <4 x float> %189, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %192 = bitcast <2 x float> %190 to <2 x i32>
  %193 = bitcast <2 x float> %191 to <2 x i32>
  %194 = fcmp olt <4 x float> %172, <float 0x3F50000000000000, float 0x3F50000000000000, float 0x3F50000000000000, float 0x3F50000000000000>
  %195 = sext <4 x i1> %194 to <4 x i32>
  %196 = bitcast <4 x i32> %195 to <2 x i64>
  %197 = extractelement <2 x i64> %196, i32 0
  %198 = extractelement <2 x i64> %196, i32 1
  %199 = bitcast i64 %197 to <2 x i32>
  %200 = shufflevector <2 x i32> %199, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %201 = bitcast i64 %198 to <2 x i32>
  %202 = shufflevector <2 x i32> %201, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %203 = shufflevector <4 x i32> %200, <4 x i32> %202, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %204 = xor <4 x i32> %203, %37
  %205 = bitcast <4 x i32> %204 to <2 x i64>
  %206 = extractelement <2 x i64> %205, i32 0
  %207 = extractelement <2 x i64> %205, i32 1
  %208 = bitcast i64 %206 to <2 x i32>
  %209 = shufflevector <2 x i32> %208, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %210 = bitcast i64 %207 to <2 x i32>
  %211 = shufflevector <2 x i32> %210, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %212 = shufflevector <4 x i32> %209, <4 x i32> %211, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %213 = bitcast float %102 to i32
  %214 = insertelement <2 x i32> undef, i32 %213, i32 0
  %215 = shufflevector <2 x i32> %183, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %216 = shufflevector <2 x i32> %184, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %217 = shufflevector <4 x i32> %215, <4 x i32> %216, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %218 = and <4 x i32> %212, %217
  %219 = bitcast <4 x i32> %218 to <2 x i64>
  %220 = extractelement <2 x i64> %219, i32 0
  %221 = extractelement <2 x i64> %219, i32 1
  %222 = bitcast i64 %220 to <2 x i32>
  %223 = shufflevector <2 x i32> %222, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %224 = bitcast i64 %221 to <2 x i32>
  %225 = shufflevector <2 x i32> %224, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %226 = shufflevector <4 x i32> %223, <4 x i32> %225, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %227 = bitcast <4 x i32> %212 to <2 x i64>
  %228 = xor <2 x i64> %227, <i64 -1, i64 -1>
  %229 = extractelement <2 x i64> %228, i32 0
  %230 = extractelement <2 x i64> %228, i32 1
  %231 = bitcast i64 %229 to <2 x i32>
  %232 = shufflevector <2 x i32> %231, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %233 = bitcast i64 %230 to <2 x i32>
  %234 = shufflevector <2 x i32> %233, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %235 = shufflevector <4 x i32> %232, <4 x i32> %234, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %236 = shufflevector <2 x i32> %214, <2 x i32> undef, <4 x i32> zeroinitializer
  %237 = and <4 x i32> %236, %235
  %238 = bitcast <4 x i32> %237 to <2 x i64>
  %239 = extractelement <2 x i64> %238, i32 0
  %240 = extractelement <2 x i64> %238, i32 1
  %241 = bitcast i64 %239 to <2 x i32>
  %242 = shufflevector <2 x i32> %241, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %243 = bitcast i64 %240 to <2 x i32>
  %244 = shufflevector <2 x i32> %243, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %245 = shufflevector <4 x i32> %242, <4 x i32> %244, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %246 = or <4 x i32> %245, %226
  %247 = bitcast <4 x i32> %246 to <2 x i64>
  %248 = extractelement <2 x i64> %247, i32 0
  %249 = extractelement <2 x i64> %247, i32 1
  %250 = bitcast i64 %248 to <2 x float>
  %251 = bitcast i64 %249 to <2 x float>
  %252 = extractelement <2 x float> %250, i32 0
  %253 = extractelement <2 x float> %250, i32 1
  %254 = fcmp olt float %253, %252
  %255 = select i1 %254, float %253, float %252
  %256 = extractelement <2 x float> %251, i32 0
  %257 = extractelement <2 x float> %251, i32 1
  %258 = fcmp olt float %257, %256
  %259 = select i1 %258, float %257, float %256
  %260 = fcmp olt float %259, %255
  %261 = select i1 %260, float %259, float %255
  %262 = insertelement <2 x float> undef, float %261, i32 0
  %263 = bitcast float %130 to i32
  %264 = insertelement <2 x i32> undef, i32 %263, i32 0
  %265 = shufflevector <2 x i32> %192, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %266 = shufflevector <2 x i32> %193, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %267 = shufflevector <4 x i32> %265, <4 x i32> %266, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %268 = and <4 x i32> %212, %267
  %269 = bitcast <4 x i32> %268 to <2 x i64>
  %270 = extractelement <2 x i64> %269, i32 0
  %271 = extractelement <2 x i64> %269, i32 1
  %272 = bitcast i64 %270 to <2 x i32>
  %273 = shufflevector <2 x i32> %272, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %274 = bitcast i64 %271 to <2 x i32>
  %275 = shufflevector <2 x i32> %274, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %276 = shufflevector <4 x i32> %273, <4 x i32> %275, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %277 = shufflevector <2 x i32> %264, <2 x i32> undef, <4 x i32> zeroinitializer
  %278 = and <4 x i32> %277, %235
  %279 = bitcast <4 x i32> %278 to <2 x i64>
  %280 = extractelement <2 x i64> %279, i32 0
  %281 = extractelement <2 x i64> %279, i32 1
  %282 = bitcast i64 %280 to <2 x i32>
  %283 = shufflevector <2 x i32> %282, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %284 = bitcast i64 %281 to <2 x i32>
  %285 = shufflevector <2 x i32> %284, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %286 = shufflevector <4 x i32> %283, <4 x i32> %285, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %287 = or <4 x i32> %286, %276
  %288 = bitcast <4 x i32> %287 to <2 x i64>
  %289 = extractelement <2 x i64> %288, i32 0
  %290 = extractelement <2 x i64> %288, i32 1
  %291 = bitcast i64 %289 to <2 x float>
  %292 = bitcast i64 %290 to <2 x float>
  %293 = extractelement <2 x float> %291, i32 0
  %294 = extractelement <2 x float> %291, i32 1
  %295 = fcmp olt float %294, %293
  %296 = select i1 %295, float %294, float %293
  %297 = extractelement <2 x float> %292, i32 0
  %298 = extractelement <2 x float> %292, i32 1
  %299 = fcmp olt float %298, %297
  %300 = select i1 %299, float %298, float %297
  %301 = fcmp olt float %300, %296
  %302 = select i1 %301, float %300, float %296
  %303 = insertelement <2 x float> %262, float %302, i32 1
  %304 = bitcast float %154 to i32
  %305 = insertelement <2 x i32> undef, i32 %304, i32 0
  %306 = shufflevector <2 x i32> %305, <2 x i32> undef, <4 x i32> zeroinitializer
  %307 = and <4 x i32> %306, %235
  %308 = bitcast <4 x i32> %307 to <2 x i64>
  %309 = extractelement <2 x i64> %308, i32 0
  %310 = extractelement <2 x i64> %308, i32 1
  %311 = bitcast i64 %309 to <2 x i32>
  %312 = shufflevector <2 x i32> %311, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %313 = bitcast i64 %310 to <2 x i32>
  %314 = shufflevector <2 x i32> %313, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %315 = shufflevector <4 x i32> %312, <4 x i32> %314, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %316 = or <4 x i32> %315, %226
  %317 = bitcast <4 x i32> %316 to <2 x i64>
  %318 = extractelement <2 x i64> %317, i32 0
  %319 = extractelement <2 x i64> %317, i32 1
  %320 = bitcast i64 %318 to <2 x float>
  %321 = bitcast i64 %319 to <2 x float>
  %322 = extractelement <2 x float> %320, i32 0
  %323 = extractelement <2 x float> %320, i32 1
  %324 = fcmp olt float %322, %323
  %325 = select i1 %324, float %323, float %322
  %326 = extractelement <2 x float> %321, i32 0
  %327 = extractelement <2 x float> %321, i32 1
  %328 = fcmp olt float %326, %327
  %329 = select i1 %328, float %327, float %326
  %330 = fcmp olt float %325, %329
  %331 = select i1 %330, float %329, float %325
  %332 = insertelement <2 x float> undef, float %331, i32 0
  %333 = bitcast float %170 to i32
  %334 = insertelement <2 x i32> undef, i32 %333, i32 0
  %335 = shufflevector <2 x i32> %334, <2 x i32> undef, <4 x i32> zeroinitializer
  %336 = and <4 x i32> %335, %235
  %337 = bitcast <4 x i32> %336 to <2 x i64>
  %338 = extractelement <2 x i64> %337, i32 0
  %339 = extractelement <2 x i64> %337, i32 1
  %340 = bitcast i64 %338 to <2 x i32>
  %341 = shufflevector <2 x i32> %340, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %342 = bitcast i64 %339 to <2 x i32>
  %343 = shufflevector <2 x i32> %342, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %344 = shufflevector <4 x i32> %341, <4 x i32> %343, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %345 = or <4 x i32> %344, %276
  %346 = bitcast <4 x i32> %345 to <2 x i64>
  %347 = extractelement <2 x i64> %346, i32 0
  %348 = extractelement <2 x i64> %346, i32 1
  %349 = bitcast i64 %347 to <2 x float>
  %350 = bitcast i64 %348 to <2 x float>
  %351 = extractelement <2 x float> %349, i32 0
  %352 = extractelement <2 x float> %349, i32 1
  %353 = fcmp olt float %351, %352
  %354 = select i1 %353, float %352, float %351
  %355 = extractelement <2 x float> %350, i32 0
  %356 = extractelement <2 x float> %350, i32 1
  %357 = fcmp olt float %355, %356
  %358 = select i1 %357, float %356, float %355
  %359 = fcmp olt float %354, %358
  %360 = select i1 %359, float %358, float %354
  br label %400

361:                                              ; preds = %42
  %362 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %27
  %363 = fmul <4 x float> %9, %362
  %364 = fmul <4 x float> %18, %362
  %365 = extractelement <4 x float> %363, i32 0
  %366 = extractelement <4 x float> %363, i32 1
  %367 = fcmp olt float %366, %365
  %368 = select i1 %367, float %366, float %365
  %369 = extractelement <4 x float> %363, i32 2
  %370 = extractelement <4 x float> %363, i32 3
  %371 = fcmp olt float %370, %369
  %372 = select i1 %371, float %370, float %369
  %373 = fcmp olt float %372, %368
  %374 = select i1 %373, float %372, float %368
  %375 = insertelement <2 x float> undef, float %374, i32 0
  %376 = extractelement <4 x float> %364, i32 0
  %377 = extractelement <4 x float> %364, i32 1
  %378 = fcmp olt float %377, %376
  %379 = select i1 %378, float %377, float %376
  %380 = extractelement <4 x float> %364, i32 2
  %381 = extractelement <4 x float> %364, i32 3
  %382 = fcmp olt float %381, %380
  %383 = select i1 %382, float %381, float %380
  %384 = fcmp olt float %383, %379
  %385 = select i1 %384, float %383, float %379
  %386 = insertelement <2 x float> %375, float %385, i32 1
  %387 = fcmp olt float %365, %366
  %388 = select i1 %387, float %366, float %365
  %389 = fcmp olt float %369, %370
  %390 = select i1 %389, float %370, float %369
  %391 = fcmp olt float %388, %390
  %392 = select i1 %391, float %390, float %388
  %393 = insertelement <2 x float> undef, float %392, i32 0
  %394 = fcmp olt float %376, %377
  %395 = select i1 %394, float %377, float %376
  %396 = fcmp olt float %380, %381
  %397 = select i1 %396, float %381, float %380
  %398 = fcmp olt float %395, %397
  %399 = select i1 %398, float %397, float %395
  br label %400

400:                                              ; preds = %361, %47
  %401 = phi float [ %399, %361 ], [ %360, %47 ]
  %402 = phi <2 x float> [ %393, %361 ], [ %332, %47 ]
  %403 = phi <2 x float> [ %386, %361 ], [ %303, %47 ]
  %404 = insertelement <2 x float> %402, float %401, i32 1
  %405 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %403, 0
  %406 = insertvalue { <2 x float>, <2 x float> } %405, <2 x float> %404, 1
  ret { <2 x float>, <2 x float> } %406
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11GrQuadUtils13ResolveAATypeE8GrAAType13GrQuadAAFlagsRK6GrQuadPS0_PS1_(i32, i32, %class.GrQuad* dereferenceable(52), i32* nocapture, i32* nocapture) local_unnamed_addr #2 {
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  switch i32 %0, label %18 [
    i32 1, label %6
    i32 0, label %16
    i32 2, label %17
  ]

6:                                                ; preds = %5
  %7 = icmp eq i32 %1, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %6
  store i32 0, i32* %3, align 4
  br label %18

9:                                                ; preds = %6
  %10 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %2, i64 0, i32 3
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %18

13:                                               ; preds = %9
  %14 = tail call zeroext i1 @_ZNK6GrQuad17aaHasEffectOnRectEv(%class.GrQuad* %2) #10
  br i1 %14, label %18, label %15

15:                                               ; preds = %13
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  br label %18

16:                                               ; preds = %5
  store i32 0, i32* %4, align 4
  br label %18

17:                                               ; preds = %5
  store i32 15, i32* %4, align 4
  br label %18

18:                                               ; preds = %8, %15, %13, %9, %5, %17, %16
  ret void
}

declare zeroext i1 @_ZNK6GrQuad17aaHasEffectOnRectEv(%class.GrQuad*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN11GrQuadUtils8ClipToW0EP8DrawQuadS1_(%struct.DrawQuad*, %struct.DrawQuad* nocapture) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %0, i64 0, i32 0, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = icmp slt i32 %4, 3
  br i1 %5, label %1774, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %0, i64 0, i32 0, i32 2, i64 0
  %8 = bitcast float* %7 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %0, i64 0, i32 0, i32 2, i64 2
  %11 = bitcast float* %10 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 1
  %13 = shufflevector <2 x float> %9, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %14 = shufflevector <2 x float> %12, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %15 = shufflevector <4 x float> %13, <4 x float> %14, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %16 = fcmp oge <4 x float> %15, <float 0x3F50000000000000, float 0x3F50000000000000, float 0x3F50000000000000, float 0x3F50000000000000>
  %17 = sext <4 x i1> %16 to <4 x i32>
  %18 = bitcast <4 x i32> %17 to <2 x i64>
  %19 = extractelement <2 x i64> %18, i32 0
  %20 = extractelement <2 x i64> %18, i32 1
  %21 = bitcast i64 %19 to <2 x i32>
  %22 = shufflevector <2 x i32> %21, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %23 = bitcast i64 %20 to <2 x i32>
  %24 = shufflevector <2 x i32> %23, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %25 = shufflevector <4 x i32> %22, <4 x i32> %24, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %26 = extractelement <2 x i32> %21, i32 0
  %27 = icmp ne i32 %26, 0
  %28 = extractelement <2 x i32> %21, i32 1
  %29 = icmp ne i32 %28, 0
  %30 = and i1 %27, %29
  br i1 %30, label %31, label %37

31:                                               ; preds = %6
  %32 = extractelement <2 x i32> %23, i32 0
  %33 = icmp ne i32 %32, 0
  %34 = extractelement <2 x i32> %23, i32 1
  %35 = icmp ne i32 %34, 0
  %36 = and i1 %33, %35
  br i1 %36, label %1774, label %37

37:                                               ; preds = %6, %31
  %38 = or i32 %28, %26
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %45

40:                                               ; preds = %37
  %41 = extractelement <2 x i32> %23, i32 0
  %42 = extractelement <2 x i32> %23, i32 1
  %43 = or i32 %42, %41
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %1774, label %45

45:                                               ; preds = %40, %37
  %46 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %0, i64 0, i32 1
  %47 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %0, i64 0, i32 1, i32 3
  %48 = load i32, i32* %47, align 4
  %49 = icmp sgt i32 %48, 2
  %50 = select i1 %49, i32 %48, i32 2
  %51 = bitcast %struct.DrawQuad* %0 to <2 x float>*
  %52 = load <2 x float>, <2 x float>* %51, align 1
  %53 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %0, i64 0, i32 0, i32 0, i64 2
  %54 = bitcast float* %53 to <2 x float>*
  %55 = load <2 x float>, <2 x float>* %54, align 1
  %56 = shufflevector <2 x float> %52, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <2 x float> %55, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %58 = shufflevector <4 x float> %56, <4 x float> %57, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %59 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %0, i64 0, i32 0, i32 1, i64 0
  %60 = bitcast float* %59 to <2 x float>*
  %61 = load <2 x float>, <2 x float>* %60, align 1
  %62 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %0, i64 0, i32 0, i32 1, i64 2
  %63 = bitcast float* %62 to <2 x float>*
  %64 = load <2 x float>, <2 x float>* %63, align 1
  %65 = shufflevector <2 x float> %61, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %66 = shufflevector <2 x float> %64, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %67 = shufflevector <4 x float> %65, <4 x float> %66, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %68 = icmp eq %class.GrQuad* %46, null
  br i1 %68, label %98, label %69

69:                                               ; preds = %45
  %70 = bitcast %class.GrQuad* %46 to <2 x float>*
  %71 = load <2 x float>, <2 x float>* %70, align 1
  %72 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %0, i64 0, i32 1, i32 0, i64 2
  %73 = bitcast float* %72 to <2 x float>*
  %74 = load <2 x float>, <2 x float>* %73, align 1
  %75 = shufflevector <2 x float> %71, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %76 = shufflevector <2 x float> %74, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %77 = shufflevector <4 x float> %75, <4 x float> %76, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %78 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %0, i64 0, i32 1, i32 1, i64 0
  %79 = bitcast float* %78 to <2 x float>*
  %80 = load <2 x float>, <2 x float>* %79, align 1
  %81 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %0, i64 0, i32 1, i32 1, i64 2
  %82 = bitcast float* %81 to <2 x float>*
  %83 = load <2 x float>, <2 x float>* %82, align 1
  %84 = shufflevector <2 x float> %80, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %85 = shufflevector <2 x float> %83, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %86 = shufflevector <4 x float> %84, <4 x float> %85, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %87 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %0, i64 0, i32 1, i32 2, i64 0
  %88 = bitcast float* %87 to <2 x float>*
  %89 = load <2 x float>, <2 x float>* %88, align 1
  %90 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %0, i64 0, i32 1, i32 2, i64 2
  %91 = bitcast float* %90 to <2 x float>*
  %92 = load <2 x float>, <2 x float>* %91, align 1
  %93 = shufflevector <2 x float> %89, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %94 = shufflevector <2 x float> %92, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %95 = shufflevector <4 x float> %93, <4 x float> %94, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %96 = icmp eq i32 %48, 3
  %97 = select i1 %96, i32 3, i32 2
  br label %98

98:                                               ; preds = %45, %69
  %99 = phi <4 x float> [ <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, %45 ], [ %86, %69 ]
  %100 = phi <4 x float> [ <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, %45 ], [ %77, %69 ]
  %101 = phi <4 x float> [ <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, %45 ], [ %95, %69 ]
  %102 = phi i32 [ 0, %45 ], [ %97, %69 ]
  %103 = icmp eq i32 %26, 0
  %104 = zext i1 %103 to i32
  %105 = icmp eq i32 %28, 0
  %106 = zext i1 %105 to i32
  %107 = add nuw nsw i32 %104, %106
  %108 = extractelement <2 x i32> %23, i32 0
  %109 = icmp eq i32 %108, 0
  %110 = zext i1 %109 to i32
  %111 = add nuw nsw i32 %107, %110
  %112 = extractelement <2 x i32> %23, i32 1
  %113 = icmp eq i32 %112, 0
  %114 = zext i1 %113 to i32
  %115 = add nuw nsw i32 %111, %114
  %116 = fsub <4 x float> <float 0x3F50000000000000, float 0x3F50000000000000, float 0x3F50000000000000, float 0x3F50000000000000>, %15
  %117 = shufflevector <4 x float> %15, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %118 = fsub <4 x float> %117, %15
  %119 = fdiv <4 x float> %116, %118
  %120 = shufflevector <4 x float> %58, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %121 = fmul <4 x float> %120, %119
  %122 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %119
  %123 = fmul <4 x float> %58, %122
  %124 = fadd <4 x float> %121, %123
  %125 = shufflevector <4 x float> %67, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %126 = fmul <4 x float> %125, %119
  %127 = fmul <4 x float> %67, %122
  %128 = fadd <4 x float> %126, %127
  %129 = shufflevector <4 x float> %100, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %130 = fmul <4 x float> %119, %129
  %131 = fmul <4 x float> %122, %100
  %132 = fadd <4 x float> %131, %130
  %133 = shufflevector <4 x float> %99, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %134 = fmul <4 x float> %119, %133
  %135 = fmul <4 x float> %122, %99
  %136 = fadd <4 x float> %135, %134
  %137 = shufflevector <4 x float> %101, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %138 = fmul <4 x float> %119, %137
  %139 = fmul <4 x float> %122, %101
  %140 = fadd <4 x float> %139, %138
  %141 = fcmp oge <4 x float> %117, <float 0x3F50000000000000, float 0x3F50000000000000, float 0x3F50000000000000, float 0x3F50000000000000>
  %142 = sext <4 x i1> %141 to <4 x i32>
  %143 = bitcast <4 x i32> %142 to <2 x i64>
  %144 = extractelement <2 x i64> %143, i32 0
  %145 = extractelement <2 x i64> %143, i32 1
  %146 = bitcast i64 %144 to <2 x i32>
  %147 = shufflevector <2 x i32> %146, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %148 = bitcast i64 %145 to <2 x i32>
  %149 = shufflevector <2 x i32> %148, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %150 = shufflevector <4 x i32> %147, <4 x i32> %149, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %151 = shufflevector <4 x float> %15, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %152 = fcmp oge <4 x float> %151, <float 0x3F50000000000000, float 0x3F50000000000000, float 0x3F50000000000000, float 0x3F50000000000000>
  %153 = sext <4 x i1> %152 to <4 x i32>
  %154 = bitcast <4 x i32> %153 to <2 x i64>
  %155 = extractelement <2 x i64> %154, i32 0
  %156 = extractelement <2 x i64> %154, i32 1
  %157 = bitcast i64 %155 to <2 x i32>
  %158 = shufflevector <2 x i32> %157, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %159 = bitcast i64 %156 to <2 x i32>
  %160 = shufflevector <2 x i32> %159, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %161 = shufflevector <4 x i32> %158, <4 x i32> %160, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %162 = icmp eq i32 %115, 1
  br i1 %162, label %825, label %163

163:                                              ; preds = %98
  %164 = icmp eq <4 x i32> %150, zeroinitializer
  %165 = sext <4 x i1> %164 to <4 x i32>
  %166 = bitcast <4 x i32> %165 to <2 x i64>
  %167 = extractelement <2 x i64> %166, i32 0
  %168 = extractelement <2 x i64> %166, i32 1
  %169 = bitcast i64 %167 to <2 x i32>
  %170 = shufflevector <2 x i32> %169, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %171 = bitcast i64 %168 to <2 x i32>
  %172 = shufflevector <2 x i32> %171, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %173 = shufflevector <4 x i32> %170, <4 x i32> %172, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %174 = icmp eq <4 x i32> %161, zeroinitializer
  %175 = sext <4 x i1> %174 to <4 x i32>
  %176 = bitcast <4 x i32> %175 to <2 x i64>
  %177 = extractelement <2 x i64> %176, i32 0
  %178 = extractelement <2 x i64> %176, i32 1
  %179 = bitcast i64 %177 to <2 x i32>
  %180 = shufflevector <2 x i32> %179, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %181 = bitcast i64 %178 to <2 x i32>
  %182 = shufflevector <2 x i32> %181, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %183 = shufflevector <4 x i32> %180, <4 x i32> %182, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %184 = and <4 x i32> %183, %173
  %185 = bitcast <4 x i32> %184 to <2 x i64>
  %186 = extractelement <2 x i64> %185, i32 0
  %187 = extractelement <2 x i64> %185, i32 1
  %188 = bitcast i64 %186 to <2 x i32>
  %189 = shufflevector <2 x i32> %188, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %190 = bitcast i64 %187 to <2 x i32>
  %191 = shufflevector <2 x i32> %190, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %192 = shufflevector <4 x i32> %189, <4 x i32> %191, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %193 = shufflevector <4 x float> %124, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %194 = shufflevector <4 x float> %193, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %195 = shufflevector <4 x float> %193, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %196 = bitcast <2 x float> %194 to <2 x i32>
  %197 = bitcast <2 x float> %195 to <2 x i32>
  %198 = shufflevector <4 x float> %124, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %199 = shufflevector <4 x float> %198, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %200 = shufflevector <4 x float> %198, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %201 = bitcast <2 x float> %199 to <2 x i32>
  %202 = bitcast <2 x float> %200 to <2 x i32>
  %203 = shufflevector <4 x float> %124, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %204 = bitcast <2 x float> %203 to <2 x i32>
  %205 = shufflevector <4 x float> %124, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %206 = bitcast <2 x float> %205 to <2 x i32>
  %207 = shufflevector <2 x i32> %204, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %208 = shufflevector <2 x i32> %206, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %209 = shufflevector <4 x i32> %207, <4 x i32> %208, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %210 = and <4 x i32> %209, %150
  %211 = bitcast <4 x i32> %210 to <2 x i64>
  %212 = extractelement <2 x i64> %211, i32 0
  %213 = extractelement <2 x i64> %211, i32 1
  %214 = bitcast i64 %212 to <2 x i32>
  %215 = shufflevector <2 x i32> %214, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %216 = bitcast i64 %213 to <2 x i32>
  %217 = shufflevector <2 x i32> %216, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %218 = shufflevector <4 x i32> %215, <4 x i32> %217, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %219 = bitcast <4 x i32> %150 to <2 x i64>
  %220 = xor <2 x i64> %219, <i64 -1, i64 -1>
  %221 = extractelement <2 x i64> %220, i32 0
  %222 = extractelement <2 x i64> %220, i32 1
  %223 = bitcast i64 %221 to <2 x i32>
  %224 = shufflevector <2 x i32> %223, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %225 = bitcast i64 %222 to <2 x i32>
  %226 = shufflevector <2 x i32> %225, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %227 = shufflevector <4 x i32> %224, <4 x i32> %226, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %228 = shufflevector <2 x i32> %201, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %229 = shufflevector <2 x i32> %202, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %230 = shufflevector <4 x i32> %228, <4 x i32> %229, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %231 = and <4 x i32> %227, %230
  %232 = bitcast <4 x i32> %231 to <2 x i64>
  %233 = extractelement <2 x i64> %232, i32 0
  %234 = extractelement <2 x i64> %232, i32 1
  %235 = bitcast i64 %233 to <2 x i32>
  %236 = shufflevector <2 x i32> %235, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %237 = bitcast i64 %234 to <2 x i32>
  %238 = shufflevector <2 x i32> %237, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %239 = shufflevector <4 x i32> %236, <4 x i32> %238, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %240 = or <4 x i32> %239, %218
  %241 = bitcast <4 x i32> %240 to <2 x i64>
  %242 = extractelement <2 x i64> %241, i32 0
  %243 = extractelement <2 x i64> %241, i32 1
  %244 = bitcast i64 %242 to <2 x i32>
  %245 = bitcast i64 %243 to <2 x i32>
  %246 = shufflevector <2 x i32> %196, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %247 = shufflevector <2 x i32> %197, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %248 = shufflevector <4 x i32> %246, <4 x i32> %247, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %249 = and <4 x i32> %192, %248
  %250 = bitcast <4 x i32> %249 to <2 x i64>
  %251 = extractelement <2 x i64> %250, i32 0
  %252 = extractelement <2 x i64> %250, i32 1
  %253 = bitcast i64 %251 to <2 x i32>
  %254 = shufflevector <2 x i32> %253, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %255 = bitcast i64 %252 to <2 x i32>
  %256 = shufflevector <2 x i32> %255, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %257 = shufflevector <4 x i32> %254, <4 x i32> %256, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %258 = bitcast <4 x i32> %192 to <2 x i64>
  %259 = xor <2 x i64> %258, <i64 -1, i64 -1>
  %260 = extractelement <2 x i64> %259, i32 0
  %261 = extractelement <2 x i64> %259, i32 1
  %262 = bitcast i64 %260 to <2 x i32>
  %263 = shufflevector <2 x i32> %262, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %264 = bitcast i64 %261 to <2 x i32>
  %265 = shufflevector <2 x i32> %264, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %266 = shufflevector <4 x i32> %263, <4 x i32> %265, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %267 = shufflevector <2 x i32> %244, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %268 = shufflevector <2 x i32> %245, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %269 = shufflevector <4 x i32> %267, <4 x i32> %268, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %270 = and <4 x i32> %266, %269
  %271 = bitcast <4 x i32> %270 to <2 x i64>
  %272 = extractelement <2 x i64> %271, i32 0
  %273 = extractelement <2 x i64> %271, i32 1
  %274 = bitcast i64 %272 to <2 x i32>
  %275 = shufflevector <2 x i32> %274, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %276 = bitcast i64 %273 to <2 x i32>
  %277 = shufflevector <2 x i32> %276, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %278 = shufflevector <4 x i32> %275, <4 x i32> %277, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %279 = or <4 x i32> %278, %257
  %280 = bitcast <4 x i32> %279 to <2 x i64>
  %281 = extractelement <2 x i64> %280, i32 0
  %282 = extractelement <2 x i64> %280, i32 1
  %283 = bitcast i64 %281 to <2 x i32>
  %284 = bitcast i64 %282 to <2 x i32>
  %285 = bitcast <2 x float> %52 to <2 x i32>
  %286 = bitcast <2 x float> %55 to <2 x i32>
  %287 = shufflevector <2 x i32> %285, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %288 = shufflevector <2 x i32> %286, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %289 = shufflevector <4 x i32> %287, <4 x i32> %288, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %290 = and <4 x i32> %289, %25
  %291 = bitcast <4 x i32> %290 to <2 x i64>
  %292 = extractelement <2 x i64> %291, i32 0
  %293 = extractelement <2 x i64> %291, i32 1
  %294 = bitcast i64 %292 to <2 x i32>
  %295 = shufflevector <2 x i32> %294, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %296 = bitcast i64 %293 to <2 x i32>
  %297 = shufflevector <2 x i32> %296, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %298 = shufflevector <4 x i32> %295, <4 x i32> %297, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %299 = bitcast <4 x i32> %25 to <2 x i64>
  %300 = xor <2 x i64> %299, <i64 -1, i64 -1>
  %301 = extractelement <2 x i64> %300, i32 0
  %302 = extractelement <2 x i64> %300, i32 1
  %303 = bitcast i64 %301 to <2 x i32>
  %304 = shufflevector <2 x i32> %303, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %305 = bitcast i64 %302 to <2 x i32>
  %306 = shufflevector <2 x i32> %305, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %307 = shufflevector <4 x i32> %304, <4 x i32> %306, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %308 = shufflevector <2 x i32> %283, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %309 = shufflevector <2 x i32> %284, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %310 = shufflevector <4 x i32> %308, <4 x i32> %309, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %311 = and <4 x i32> %310, %307
  %312 = bitcast <4 x i32> %311 to <2 x i64>
  %313 = extractelement <2 x i64> %312, i32 0
  %314 = extractelement <2 x i64> %312, i32 1
  %315 = bitcast i64 %313 to <2 x i32>
  %316 = shufflevector <2 x i32> %315, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %317 = bitcast i64 %314 to <2 x i32>
  %318 = shufflevector <2 x i32> %317, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %319 = shufflevector <4 x i32> %316, <4 x i32> %318, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %320 = or <4 x i32> %319, %298
  %321 = bitcast <4 x i32> %320 to <2 x i64>
  %322 = extractelement <2 x i64> %321, i32 0
  %323 = extractelement <2 x i64> %321, i32 1
  %324 = bitcast i64 %322 to <2 x float>
  %325 = bitcast i64 %323 to <2 x float>
  %326 = shufflevector <2 x float> %324, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %327 = shufflevector <2 x float> %325, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %328 = shufflevector <4 x float> %326, <4 x float> %327, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %329 = shufflevector <4 x float> %128, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %330 = shufflevector <4 x float> %329, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %331 = shufflevector <4 x float> %329, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %332 = bitcast <2 x float> %330 to <2 x i32>
  %333 = bitcast <2 x float> %331 to <2 x i32>
  %334 = shufflevector <4 x float> %128, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %335 = shufflevector <4 x float> %334, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %336 = shufflevector <4 x float> %334, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %337 = bitcast <2 x float> %335 to <2 x i32>
  %338 = bitcast <2 x float> %336 to <2 x i32>
  %339 = shufflevector <4 x float> %128, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %340 = bitcast <2 x float> %339 to <2 x i32>
  %341 = shufflevector <4 x float> %128, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %342 = bitcast <2 x float> %341 to <2 x i32>
  %343 = shufflevector <2 x i32> %340, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %344 = shufflevector <2 x i32> %342, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %345 = shufflevector <4 x i32> %343, <4 x i32> %344, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %346 = and <4 x i32> %345, %150
  %347 = bitcast <4 x i32> %346 to <2 x i64>
  %348 = extractelement <2 x i64> %347, i32 0
  %349 = extractelement <2 x i64> %347, i32 1
  %350 = bitcast i64 %348 to <2 x i32>
  %351 = shufflevector <2 x i32> %350, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %352 = bitcast i64 %349 to <2 x i32>
  %353 = shufflevector <2 x i32> %352, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %354 = shufflevector <4 x i32> %351, <4 x i32> %353, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %355 = shufflevector <2 x i32> %337, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %356 = shufflevector <2 x i32> %338, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %357 = shufflevector <4 x i32> %355, <4 x i32> %356, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %358 = and <4 x i32> %227, %357
  %359 = bitcast <4 x i32> %358 to <2 x i64>
  %360 = extractelement <2 x i64> %359, i32 0
  %361 = extractelement <2 x i64> %359, i32 1
  %362 = bitcast i64 %360 to <2 x i32>
  %363 = shufflevector <2 x i32> %362, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %364 = bitcast i64 %361 to <2 x i32>
  %365 = shufflevector <2 x i32> %364, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %366 = shufflevector <4 x i32> %363, <4 x i32> %365, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %367 = or <4 x i32> %366, %354
  %368 = bitcast <4 x i32> %367 to <2 x i64>
  %369 = extractelement <2 x i64> %368, i32 0
  %370 = extractelement <2 x i64> %368, i32 1
  %371 = bitcast i64 %369 to <2 x i32>
  %372 = bitcast i64 %370 to <2 x i32>
  %373 = shufflevector <2 x i32> %332, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %374 = shufflevector <2 x i32> %333, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %375 = shufflevector <4 x i32> %373, <4 x i32> %374, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %376 = and <4 x i32> %192, %375
  %377 = bitcast <4 x i32> %376 to <2 x i64>
  %378 = extractelement <2 x i64> %377, i32 0
  %379 = extractelement <2 x i64> %377, i32 1
  %380 = bitcast i64 %378 to <2 x i32>
  %381 = shufflevector <2 x i32> %380, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %382 = bitcast i64 %379 to <2 x i32>
  %383 = shufflevector <2 x i32> %382, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %384 = shufflevector <4 x i32> %381, <4 x i32> %383, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %385 = shufflevector <2 x i32> %371, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %386 = shufflevector <2 x i32> %372, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %387 = shufflevector <4 x i32> %385, <4 x i32> %386, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %388 = and <4 x i32> %266, %387
  %389 = bitcast <4 x i32> %388 to <2 x i64>
  %390 = extractelement <2 x i64> %389, i32 0
  %391 = extractelement <2 x i64> %389, i32 1
  %392 = bitcast i64 %390 to <2 x i32>
  %393 = shufflevector <2 x i32> %392, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %394 = bitcast i64 %391 to <2 x i32>
  %395 = shufflevector <2 x i32> %394, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %396 = shufflevector <4 x i32> %393, <4 x i32> %395, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %397 = or <4 x i32> %396, %384
  %398 = bitcast <4 x i32> %397 to <2 x i64>
  %399 = extractelement <2 x i64> %398, i32 0
  %400 = extractelement <2 x i64> %398, i32 1
  %401 = bitcast i64 %399 to <2 x i32>
  %402 = bitcast i64 %400 to <2 x i32>
  %403 = bitcast <2 x float> %61 to <2 x i32>
  %404 = bitcast <2 x float> %64 to <2 x i32>
  %405 = shufflevector <2 x i32> %403, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %406 = shufflevector <2 x i32> %404, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %407 = shufflevector <4 x i32> %405, <4 x i32> %406, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %408 = and <4 x i32> %407, %25
  %409 = bitcast <4 x i32> %408 to <2 x i64>
  %410 = extractelement <2 x i64> %409, i32 0
  %411 = extractelement <2 x i64> %409, i32 1
  %412 = bitcast i64 %410 to <2 x i32>
  %413 = shufflevector <2 x i32> %412, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %414 = bitcast i64 %411 to <2 x i32>
  %415 = shufflevector <2 x i32> %414, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %416 = shufflevector <4 x i32> %413, <4 x i32> %415, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %417 = shufflevector <2 x i32> %401, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %418 = shufflevector <2 x i32> %402, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %419 = shufflevector <4 x i32> %417, <4 x i32> %418, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %420 = and <4 x i32> %419, %307
  %421 = bitcast <4 x i32> %420 to <2 x i64>
  %422 = extractelement <2 x i64> %421, i32 0
  %423 = extractelement <2 x i64> %421, i32 1
  %424 = bitcast i64 %422 to <2 x i32>
  %425 = shufflevector <2 x i32> %424, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %426 = bitcast i64 %423 to <2 x i32>
  %427 = shufflevector <2 x i32> %426, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %428 = shufflevector <4 x i32> %425, <4 x i32> %427, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %429 = or <4 x i32> %428, %416
  %430 = bitcast <4 x i32> %429 to <2 x i64>
  %431 = extractelement <2 x i64> %430, i32 0
  %432 = extractelement <2 x i64> %430, i32 1
  %433 = bitcast i64 %431 to <2 x float>
  %434 = bitcast i64 %432 to <2 x float>
  %435 = shufflevector <2 x float> %433, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %436 = shufflevector <2 x float> %434, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %437 = shufflevector <4 x float> %435, <4 x float> %436, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %438 = bitcast <2 x float> %9 to <2 x i32>
  %439 = bitcast <2 x float> %12 to <2 x i32>
  %440 = shufflevector <2 x i32> %438, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %441 = shufflevector <2 x i32> %439, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %442 = shufflevector <4 x i32> %440, <4 x i32> %441, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %443 = and <4 x i32> %442, %25
  %444 = bitcast <4 x i32> %443 to <2 x i64>
  %445 = extractelement <2 x i64> %444, i32 0
  %446 = extractelement <2 x i64> %444, i32 1
  %447 = bitcast i64 %445 to <2 x i32>
  %448 = shufflevector <2 x i32> %447, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %449 = bitcast i64 %446 to <2 x i32>
  %450 = shufflevector <2 x i32> %449, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %451 = shufflevector <4 x i32> %448, <4 x i32> %450, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %452 = bitcast <4 x i32> %307 to <2 x i64>
  %453 = and <2 x i64> %452, <i64 4215369252200251392, i64 4215369252200251392>
  %454 = extractelement <2 x i64> %453, i32 0
  %455 = extractelement <2 x i64> %453, i32 1
  %456 = bitcast i64 %454 to <2 x i32>
  %457 = shufflevector <2 x i32> %456, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %458 = bitcast i64 %455 to <2 x i32>
  %459 = shufflevector <2 x i32> %458, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %460 = shufflevector <4 x i32> %457, <4 x i32> %459, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %461 = or <4 x i32> %451, %460
  %462 = bitcast <4 x i32> %461 to <2 x i64>
  %463 = extractelement <2 x i64> %462, i32 0
  %464 = extractelement <2 x i64> %462, i32 1
  %465 = bitcast i64 %463 to <2 x float>
  %466 = bitcast i64 %464 to <2 x float>
  %467 = shufflevector <2 x float> %465, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %468 = shufflevector <2 x float> %466, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %469 = shufflevector <4 x float> %467, <4 x float> %468, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %470 = shufflevector <4 x float> %132, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %471 = shufflevector <4 x float> %470, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %472 = shufflevector <4 x float> %470, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %473 = bitcast <2 x float> %471 to <2 x i32>
  %474 = bitcast <2 x float> %472 to <2 x i32>
  %475 = shufflevector <4 x float> %132, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %476 = shufflevector <4 x float> %475, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %477 = shufflevector <4 x float> %475, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %478 = bitcast <2 x float> %476 to <2 x i32>
  %479 = bitcast <2 x float> %477 to <2 x i32>
  %480 = shufflevector <4 x float> %132, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %481 = bitcast <2 x float> %480 to <2 x i32>
  %482 = shufflevector <4 x float> %132, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %483 = bitcast <2 x float> %482 to <2 x i32>
  %484 = shufflevector <2 x i32> %481, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %485 = shufflevector <2 x i32> %483, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %486 = shufflevector <4 x i32> %484, <4 x i32> %485, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %487 = and <4 x i32> %486, %150
  %488 = bitcast <4 x i32> %487 to <2 x i64>
  %489 = extractelement <2 x i64> %488, i32 0
  %490 = extractelement <2 x i64> %488, i32 1
  %491 = bitcast i64 %489 to <2 x i32>
  %492 = shufflevector <2 x i32> %491, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %493 = bitcast i64 %490 to <2 x i32>
  %494 = shufflevector <2 x i32> %493, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %495 = shufflevector <4 x i32> %492, <4 x i32> %494, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %496 = shufflevector <2 x i32> %478, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %497 = shufflevector <2 x i32> %479, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %498 = shufflevector <4 x i32> %496, <4 x i32> %497, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %499 = and <4 x i32> %498, %227
  %500 = bitcast <4 x i32> %499 to <2 x i64>
  %501 = extractelement <2 x i64> %500, i32 0
  %502 = extractelement <2 x i64> %500, i32 1
  %503 = bitcast i64 %501 to <2 x i32>
  %504 = shufflevector <2 x i32> %503, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %505 = bitcast i64 %502 to <2 x i32>
  %506 = shufflevector <2 x i32> %505, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %507 = shufflevector <4 x i32> %504, <4 x i32> %506, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %508 = or <4 x i32> %507, %495
  %509 = bitcast <4 x i32> %508 to <2 x i64>
  %510 = extractelement <2 x i64> %509, i32 0
  %511 = extractelement <2 x i64> %509, i32 1
  %512 = bitcast i64 %510 to <2 x i32>
  %513 = bitcast i64 %511 to <2 x i32>
  %514 = shufflevector <2 x i32> %473, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %515 = shufflevector <2 x i32> %474, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %516 = shufflevector <4 x i32> %514, <4 x i32> %515, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %517 = and <4 x i32> %516, %192
  %518 = bitcast <4 x i32> %517 to <2 x i64>
  %519 = extractelement <2 x i64> %518, i32 0
  %520 = extractelement <2 x i64> %518, i32 1
  %521 = bitcast i64 %519 to <2 x i32>
  %522 = shufflevector <2 x i32> %521, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %523 = bitcast i64 %520 to <2 x i32>
  %524 = shufflevector <2 x i32> %523, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %525 = shufflevector <4 x i32> %522, <4 x i32> %524, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %526 = shufflevector <2 x i32> %512, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %527 = shufflevector <2 x i32> %513, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %528 = shufflevector <4 x i32> %526, <4 x i32> %527, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %529 = and <4 x i32> %528, %266
  %530 = bitcast <4 x i32> %529 to <2 x i64>
  %531 = extractelement <2 x i64> %530, i32 0
  %532 = extractelement <2 x i64> %530, i32 1
  %533 = bitcast i64 %531 to <2 x i32>
  %534 = shufflevector <2 x i32> %533, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %535 = bitcast i64 %532 to <2 x i32>
  %536 = shufflevector <2 x i32> %535, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %537 = shufflevector <4 x i32> %534, <4 x i32> %536, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %538 = or <4 x i32> %537, %525
  %539 = bitcast <4 x i32> %538 to <2 x i64>
  %540 = extractelement <2 x i64> %539, i32 0
  %541 = extractelement <2 x i64> %539, i32 1
  %542 = bitcast i64 %540 to <2 x i32>
  %543 = bitcast i64 %541 to <2 x i32>
  %544 = shufflevector <4 x float> %100, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %545 = bitcast <2 x float> %544 to <2 x i32>
  %546 = shufflevector <4 x float> %100, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %547 = bitcast <2 x float> %546 to <2 x i32>
  %548 = shufflevector <2 x i32> %545, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %549 = shufflevector <2 x i32> %547, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %550 = shufflevector <4 x i32> %548, <4 x i32> %549, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %551 = and <4 x i32> %550, %25
  %552 = bitcast <4 x i32> %551 to <2 x i64>
  %553 = extractelement <2 x i64> %552, i32 0
  %554 = extractelement <2 x i64> %552, i32 1
  %555 = bitcast i64 %553 to <2 x i32>
  %556 = shufflevector <2 x i32> %555, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %557 = bitcast i64 %554 to <2 x i32>
  %558 = shufflevector <2 x i32> %557, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %559 = shufflevector <4 x i32> %556, <4 x i32> %558, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %560 = shufflevector <2 x i32> %542, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %561 = shufflevector <2 x i32> %543, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %562 = shufflevector <4 x i32> %560, <4 x i32> %561, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %563 = and <4 x i32> %562, %307
  %564 = bitcast <4 x i32> %563 to <2 x i64>
  %565 = extractelement <2 x i64> %564, i32 0
  %566 = extractelement <2 x i64> %564, i32 1
  %567 = bitcast i64 %565 to <2 x i32>
  %568 = shufflevector <2 x i32> %567, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %569 = bitcast i64 %566 to <2 x i32>
  %570 = shufflevector <2 x i32> %569, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %571 = shufflevector <4 x i32> %568, <4 x i32> %570, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %572 = or <4 x i32> %571, %559
  %573 = bitcast <4 x i32> %572 to <2 x i64>
  %574 = shufflevector <4 x float> %136, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %575 = shufflevector <4 x float> %574, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %576 = shufflevector <4 x float> %574, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %577 = bitcast <2 x float> %575 to <2 x i32>
  %578 = bitcast <2 x float> %576 to <2 x i32>
  %579 = shufflevector <4 x float> %136, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %580 = shufflevector <4 x float> %579, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %581 = shufflevector <4 x float> %579, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %582 = bitcast <2 x float> %580 to <2 x i32>
  %583 = bitcast <2 x float> %581 to <2 x i32>
  %584 = shufflevector <4 x float> %136, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %585 = bitcast <2 x float> %584 to <2 x i32>
  %586 = shufflevector <4 x float> %136, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %587 = bitcast <2 x float> %586 to <2 x i32>
  %588 = shufflevector <2 x i32> %585, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %589 = shufflevector <2 x i32> %587, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %590 = shufflevector <4 x i32> %588, <4 x i32> %589, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %591 = and <4 x i32> %590, %150
  %592 = bitcast <4 x i32> %591 to <2 x i64>
  %593 = extractelement <2 x i64> %592, i32 0
  %594 = extractelement <2 x i64> %592, i32 1
  %595 = bitcast i64 %593 to <2 x i32>
  %596 = shufflevector <2 x i32> %595, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %597 = bitcast i64 %594 to <2 x i32>
  %598 = shufflevector <2 x i32> %597, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %599 = shufflevector <4 x i32> %596, <4 x i32> %598, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %600 = shufflevector <2 x i32> %582, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %601 = shufflevector <2 x i32> %583, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %602 = shufflevector <4 x i32> %600, <4 x i32> %601, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %603 = and <4 x i32> %602, %227
  %604 = bitcast <4 x i32> %603 to <2 x i64>
  %605 = extractelement <2 x i64> %604, i32 0
  %606 = extractelement <2 x i64> %604, i32 1
  %607 = bitcast i64 %605 to <2 x i32>
  %608 = shufflevector <2 x i32> %607, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %609 = bitcast i64 %606 to <2 x i32>
  %610 = shufflevector <2 x i32> %609, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %611 = shufflevector <4 x i32> %608, <4 x i32> %610, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %612 = or <4 x i32> %611, %599
  %613 = bitcast <4 x i32> %612 to <2 x i64>
  %614 = extractelement <2 x i64> %613, i32 0
  %615 = extractelement <2 x i64> %613, i32 1
  %616 = bitcast i64 %614 to <2 x i32>
  %617 = bitcast i64 %615 to <2 x i32>
  %618 = shufflevector <2 x i32> %577, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %619 = shufflevector <2 x i32> %578, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %620 = shufflevector <4 x i32> %618, <4 x i32> %619, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %621 = and <4 x i32> %620, %192
  %622 = bitcast <4 x i32> %621 to <2 x i64>
  %623 = extractelement <2 x i64> %622, i32 0
  %624 = extractelement <2 x i64> %622, i32 1
  %625 = bitcast i64 %623 to <2 x i32>
  %626 = shufflevector <2 x i32> %625, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %627 = bitcast i64 %624 to <2 x i32>
  %628 = shufflevector <2 x i32> %627, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %629 = shufflevector <4 x i32> %626, <4 x i32> %628, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %630 = shufflevector <2 x i32> %616, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %631 = shufflevector <2 x i32> %617, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %632 = shufflevector <4 x i32> %630, <4 x i32> %631, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %633 = and <4 x i32> %632, %266
  %634 = bitcast <4 x i32> %633 to <2 x i64>
  %635 = extractelement <2 x i64> %634, i32 0
  %636 = extractelement <2 x i64> %634, i32 1
  %637 = bitcast i64 %635 to <2 x i32>
  %638 = shufflevector <2 x i32> %637, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %639 = bitcast i64 %636 to <2 x i32>
  %640 = shufflevector <2 x i32> %639, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %641 = shufflevector <4 x i32> %638, <4 x i32> %640, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %642 = or <4 x i32> %641, %629
  %643 = bitcast <4 x i32> %642 to <2 x i64>
  %644 = extractelement <2 x i64> %643, i32 0
  %645 = extractelement <2 x i64> %643, i32 1
  %646 = bitcast i64 %644 to <2 x i32>
  %647 = bitcast i64 %645 to <2 x i32>
  %648 = shufflevector <4 x float> %99, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %649 = bitcast <2 x float> %648 to <2 x i32>
  %650 = shufflevector <4 x float> %99, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %651 = bitcast <2 x float> %650 to <2 x i32>
  %652 = shufflevector <2 x i32> %649, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %653 = shufflevector <2 x i32> %651, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %654 = shufflevector <4 x i32> %652, <4 x i32> %653, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %655 = and <4 x i32> %654, %25
  %656 = bitcast <4 x i32> %655 to <2 x i64>
  %657 = extractelement <2 x i64> %656, i32 0
  %658 = extractelement <2 x i64> %656, i32 1
  %659 = bitcast i64 %657 to <2 x i32>
  %660 = shufflevector <2 x i32> %659, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %661 = bitcast i64 %658 to <2 x i32>
  %662 = shufflevector <2 x i32> %661, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %663 = shufflevector <4 x i32> %660, <4 x i32> %662, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %664 = shufflevector <2 x i32> %646, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %665 = shufflevector <2 x i32> %647, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %666 = shufflevector <4 x i32> %664, <4 x i32> %665, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %667 = and <4 x i32> %666, %307
  %668 = bitcast <4 x i32> %667 to <2 x i64>
  %669 = extractelement <2 x i64> %668, i32 0
  %670 = extractelement <2 x i64> %668, i32 1
  %671 = bitcast i64 %669 to <2 x i32>
  %672 = shufflevector <2 x i32> %671, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %673 = bitcast i64 %670 to <2 x i32>
  %674 = shufflevector <2 x i32> %673, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %675 = shufflevector <4 x i32> %672, <4 x i32> %674, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %676 = or <4 x i32> %675, %663
  %677 = bitcast <4 x i32> %676 to <2 x i64>
  %678 = shufflevector <4 x float> %140, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %679 = shufflevector <4 x float> %678, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %680 = shufflevector <4 x float> %678, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %681 = bitcast <2 x float> %679 to <2 x i32>
  %682 = bitcast <2 x float> %680 to <2 x i32>
  %683 = shufflevector <4 x float> %140, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %684 = shufflevector <4 x float> %683, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %685 = shufflevector <4 x float> %683, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %686 = bitcast <2 x float> %684 to <2 x i32>
  %687 = bitcast <2 x float> %685 to <2 x i32>
  %688 = shufflevector <4 x float> %140, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %689 = bitcast <2 x float> %688 to <2 x i32>
  %690 = shufflevector <4 x float> %140, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %691 = bitcast <2 x float> %690 to <2 x i32>
  %692 = shufflevector <2 x i32> %689, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %693 = shufflevector <2 x i32> %691, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %694 = shufflevector <4 x i32> %692, <4 x i32> %693, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %695 = and <4 x i32> %694, %150
  %696 = bitcast <4 x i32> %695 to <2 x i64>
  %697 = extractelement <2 x i64> %696, i32 0
  %698 = extractelement <2 x i64> %696, i32 1
  %699 = bitcast i64 %697 to <2 x i32>
  %700 = shufflevector <2 x i32> %699, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %701 = bitcast i64 %698 to <2 x i32>
  %702 = shufflevector <2 x i32> %701, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %703 = shufflevector <4 x i32> %700, <4 x i32> %702, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %704 = shufflevector <2 x i32> %686, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %705 = shufflevector <2 x i32> %687, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %706 = shufflevector <4 x i32> %704, <4 x i32> %705, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %707 = and <4 x i32> %706, %227
  %708 = bitcast <4 x i32> %707 to <2 x i64>
  %709 = extractelement <2 x i64> %708, i32 0
  %710 = extractelement <2 x i64> %708, i32 1
  %711 = bitcast i64 %709 to <2 x i32>
  %712 = shufflevector <2 x i32> %711, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %713 = bitcast i64 %710 to <2 x i32>
  %714 = shufflevector <2 x i32> %713, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %715 = shufflevector <4 x i32> %712, <4 x i32> %714, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %716 = or <4 x i32> %715, %703
  %717 = bitcast <4 x i32> %716 to <2 x i64>
  %718 = extractelement <2 x i64> %717, i32 0
  %719 = extractelement <2 x i64> %717, i32 1
  %720 = bitcast i64 %718 to <2 x i32>
  %721 = bitcast i64 %719 to <2 x i32>
  %722 = shufflevector <2 x i32> %681, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %723 = shufflevector <2 x i32> %682, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %724 = shufflevector <4 x i32> %722, <4 x i32> %723, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %725 = and <4 x i32> %724, %192
  %726 = bitcast <4 x i32> %725 to <2 x i64>
  %727 = extractelement <2 x i64> %726, i32 0
  %728 = extractelement <2 x i64> %726, i32 1
  %729 = bitcast i64 %727 to <2 x i32>
  %730 = shufflevector <2 x i32> %729, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %731 = bitcast i64 %728 to <2 x i32>
  %732 = shufflevector <2 x i32> %731, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %733 = shufflevector <4 x i32> %730, <4 x i32> %732, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %734 = shufflevector <2 x i32> %720, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %735 = shufflevector <2 x i32> %721, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %736 = shufflevector <4 x i32> %734, <4 x i32> %735, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %737 = and <4 x i32> %736, %266
  %738 = bitcast <4 x i32> %737 to <2 x i64>
  %739 = extractelement <2 x i64> %738, i32 0
  %740 = extractelement <2 x i64> %738, i32 1
  %741 = bitcast i64 %739 to <2 x i32>
  %742 = shufflevector <2 x i32> %741, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %743 = bitcast i64 %740 to <2 x i32>
  %744 = shufflevector <2 x i32> %743, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %745 = shufflevector <4 x i32> %742, <4 x i32> %744, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %746 = or <4 x i32> %745, %733
  %747 = bitcast <4 x i32> %746 to <2 x i64>
  %748 = extractelement <2 x i64> %747, i32 0
  %749 = extractelement <2 x i64> %747, i32 1
  %750 = bitcast i64 %748 to <2 x i32>
  %751 = bitcast i64 %749 to <2 x i32>
  %752 = shufflevector <4 x float> %101, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %753 = bitcast <2 x float> %752 to <2 x i32>
  %754 = shufflevector <4 x float> %101, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %755 = bitcast <2 x float> %754 to <2 x i32>
  %756 = shufflevector <2 x i32> %753, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %757 = shufflevector <2 x i32> %755, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %758 = shufflevector <4 x i32> %756, <4 x i32> %757, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %759 = and <4 x i32> %758, %25
  %760 = bitcast <4 x i32> %759 to <2 x i64>
  %761 = extractelement <2 x i64> %760, i32 0
  %762 = extractelement <2 x i64> %760, i32 1
  %763 = bitcast i64 %761 to <2 x i32>
  %764 = shufflevector <2 x i32> %763, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %765 = bitcast i64 %762 to <2 x i32>
  %766 = shufflevector <2 x i32> %765, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %767 = shufflevector <4 x i32> %764, <4 x i32> %766, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %768 = shufflevector <2 x i32> %750, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %769 = shufflevector <2 x i32> %751, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %770 = shufflevector <4 x i32> %768, <4 x i32> %769, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %771 = and <4 x i32> %770, %307
  %772 = bitcast <4 x i32> %771 to <2 x i64>
  %773 = extractelement <2 x i64> %772, i32 0
  %774 = extractelement <2 x i64> %772, i32 1
  %775 = bitcast i64 %773 to <2 x i32>
  %776 = shufflevector <2 x i32> %775, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %777 = bitcast i64 %774 to <2 x i32>
  %778 = shufflevector <2 x i32> %777, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %779 = shufflevector <4 x i32> %776, <4 x i32> %778, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %780 = or <4 x i32> %779, %767
  %781 = bitcast <4 x i32> %780 to <2 x i64>
  %782 = extractelement <2 x i64> %781, i32 0
  %783 = extractelement <2 x i64> %781, i32 1
  %784 = bitcast i64 %782 to <2 x float>
  %785 = bitcast i64 %783 to <2 x float>
  %786 = shufflevector <2 x float> %784, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %787 = shufflevector <2 x float> %785, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %788 = shufflevector <4 x float> %786, <4 x float> %787, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %789 = bitcast %struct.DrawQuad* %0 to <4 x float>*
  store <4 x float> %328, <4 x float>* %789, align 1
  %790 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %0, i64 0, i32 0, i32 1
  %791 = bitcast [4 x float]* %790 to <4 x float>*
  store <4 x float> %437, <4 x float>* %791, align 1
  %792 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %0, i64 0, i32 0, i32 2
  %793 = bitcast [4 x float]* %792 to <4 x float>*
  store <4 x float> %469, <4 x float>* %793, align 1
  store i32 3, i32* %3, align 4
  %794 = icmp eq i32 %102, 0
  br i1 %794, label %1774, label %795

795:                                              ; preds = %163
  %796 = extractelement <2 x i64> %677, i32 1
  %797 = bitcast i64 %796 to <2 x float>
  %798 = shufflevector <2 x float> %797, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %799 = extractelement <2 x i64> %677, i32 0
  %800 = bitcast i64 %799 to <2 x float>
  %801 = shufflevector <2 x float> %800, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %802 = shufflevector <4 x float> %801, <4 x float> %798, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %803 = extractelement <2 x i64> %573, i32 1
  %804 = bitcast i64 %803 to <2 x float>
  %805 = shufflevector <2 x float> %804, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %806 = extractelement <2 x i64> %573, i32 0
  %807 = bitcast i64 %806 to <2 x float>
  %808 = shufflevector <2 x float> %807, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %809 = shufflevector <4 x float> %808, <4 x float> %805, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %810 = bitcast %class.GrQuad* %46 to <4 x float>*
  store <4 x float> %809, <4 x float>* %810, align 1
  %811 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %0, i64 0, i32 1, i32 1
  %812 = bitcast [4 x float]* %811 to <4 x float>*
  store <4 x float> %802, <4 x float>* %812, align 1
  %813 = icmp eq i32 %102, 3
  br i1 %813, label %814, label %817

814:                                              ; preds = %795
  %815 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %0, i64 0, i32 1, i32 2
  %816 = bitcast [4 x float]* %815 to <4 x float>*
  store <4 x float> %788, <4 x float>* %816, align 1
  br label %817

817:                                              ; preds = %814, %795
  %818 = icmp ne i32 %50, 3
  %819 = icmp eq i32 %48, 3
  %820 = and i1 %819, %818
  br i1 %820, label %821, label %824

821:                                              ; preds = %817
  %822 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %0, i64 0, i32 1, i32 2, i64 0
  %823 = bitcast float* %822 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %823, align 4
  br label %824

824:                                              ; preds = %817, %821
  store i32 %50, i32* %47, align 4
  br label %1774

825:                                              ; preds = %98
  %826 = fadd <4 x float> %58, %120
  %827 = fmul <4 x float> %826, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %828 = fadd <4 x float> %67, %125
  %829 = fmul <4 x float> %828, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %830 = fadd <4 x float> %15, %117
  %831 = fmul <4 x float> %830, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %832 = fadd <4 x float> %100, %129
  %833 = fmul <4 x float> %832, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %834 = fadd <4 x float> %99, %133
  %835 = fmul <4 x float> %834, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %836 = fadd <4 x float> %101, %137
  %837 = fmul <4 x float> %836, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %838 = icmp eq <4 x i32> %25, zeroinitializer
  %839 = sext <4 x i1> %838 to <4 x i32>
  %840 = bitcast <4 x i32> %839 to <2 x i64>
  %841 = extractelement <2 x i64> %840, i32 0
  %842 = extractelement <2 x i64> %840, i32 1
  %843 = bitcast i64 %841 to <2 x i32>
  %844 = shufflevector <2 x i32> %843, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %845 = bitcast i64 %842 to <2 x i32>
  %846 = shufflevector <2 x i32> %845, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %847 = shufflevector <4 x i32> %844, <4 x i32> %846, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %848 = icmp eq <4 x i32> %150, zeroinitializer
  %849 = sext <4 x i1> %848 to <4 x i32>
  %850 = bitcast <4 x i32> %849 to <2 x i64>
  %851 = extractelement <2 x i64> %850, i32 0
  %852 = extractelement <2 x i64> %850, i32 1
  %853 = bitcast i64 %851 to <2 x i32>
  %854 = shufflevector <2 x i32> %853, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %855 = bitcast i64 %852 to <2 x i32>
  %856 = shufflevector <2 x i32> %855, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %857 = shufflevector <4 x i32> %854, <4 x i32> %856, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %858 = or <4 x i32> %857, %847
  %859 = bitcast <4 x i32> %858 to <2 x i64>
  %860 = extractelement <2 x i64> %859, i32 0
  %861 = extractelement <2 x i64> %859, i32 1
  %862 = bitcast i64 %860 to <2 x i32>
  %863 = shufflevector <2 x i32> %862, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %864 = bitcast i64 %861 to <2 x i32>
  %865 = shufflevector <2 x i32> %864, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %866 = shufflevector <4 x i32> %863, <4 x i32> %865, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %867 = shufflevector <4 x float> %827, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %868 = shufflevector <4 x float> %867, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %869 = shufflevector <4 x float> %867, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %870 = bitcast <2 x float> %868 to <2 x i32>
  %871 = bitcast <2 x float> %869 to <2 x i32>
  %872 = shufflevector <2 x i32> %870, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %873 = shufflevector <2 x i32> %871, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %874 = shufflevector <4 x i32> %872, <4 x i32> %873, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %875 = and <4 x i32> %161, %874
  %876 = bitcast <4 x i32> %875 to <2 x i64>
  %877 = extractelement <2 x i64> %876, i32 0
  %878 = extractelement <2 x i64> %876, i32 1
  %879 = bitcast i64 %877 to <2 x i32>
  %880 = shufflevector <2 x i32> %879, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %881 = bitcast i64 %878 to <2 x i32>
  %882 = shufflevector <2 x i32> %881, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %883 = shufflevector <4 x i32> %880, <4 x i32> %882, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %884 = bitcast <4 x i32> %161 to <2 x i64>
  %885 = xor <2 x i64> %884, <i64 -1, i64 -1>
  %886 = extractelement <2 x i64> %885, i32 0
  %887 = extractelement <2 x i64> %885, i32 1
  %888 = bitcast i64 %886 to <2 x i32>
  %889 = shufflevector <2 x i32> %888, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %890 = bitcast i64 %887 to <2 x i32>
  %891 = shufflevector <2 x i32> %890, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %892 = shufflevector <4 x i32> %889, <4 x i32> %891, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %893 = bitcast <2 x float> %52 to <2 x i32>
  %894 = bitcast <2 x float> %55 to <2 x i32>
  %895 = shufflevector <2 x i32> %893, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %896 = shufflevector <2 x i32> %894, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %897 = shufflevector <4 x i32> %895, <4 x i32> %896, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %898 = and <4 x i32> %892, %897
  %899 = bitcast <4 x i32> %898 to <2 x i64>
  %900 = extractelement <2 x i64> %899, i32 0
  %901 = extractelement <2 x i64> %899, i32 1
  %902 = bitcast i64 %900 to <2 x i32>
  %903 = shufflevector <2 x i32> %902, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %904 = bitcast i64 %901 to <2 x i32>
  %905 = shufflevector <2 x i32> %904, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %906 = shufflevector <4 x i32> %903, <4 x i32> %905, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %907 = or <4 x i32> %906, %883
  %908 = bitcast <4 x i32> %907 to <2 x i64>
  %909 = extractelement <2 x i64> %908, i32 0
  %910 = extractelement <2 x i64> %908, i32 1
  %911 = bitcast i64 %909 to <2 x i32>
  %912 = bitcast i64 %910 to <2 x i32>
  %913 = shufflevector <4 x float> %124, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %914 = bitcast <2 x float> %913 to <2 x i32>
  %915 = shufflevector <4 x float> %124, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %916 = bitcast <2 x float> %915 to <2 x i32>
  %917 = shufflevector <2 x i32> %914, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %918 = shufflevector <2 x i32> %916, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %919 = shufflevector <4 x i32> %917, <4 x i32> %918, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %920 = and <4 x i32> %866, %919
  %921 = bitcast <4 x i32> %920 to <2 x i64>
  %922 = extractelement <2 x i64> %921, i32 0
  %923 = extractelement <2 x i64> %921, i32 1
  %924 = bitcast i64 %922 to <2 x i32>
  %925 = shufflevector <2 x i32> %924, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %926 = bitcast i64 %923 to <2 x i32>
  %927 = shufflevector <2 x i32> %926, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %928 = shufflevector <4 x i32> %925, <4 x i32> %927, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %929 = bitcast <4 x i32> %866 to <2 x i64>
  %930 = xor <2 x i64> %929, <i64 -1, i64 -1>
  %931 = extractelement <2 x i64> %930, i32 0
  %932 = extractelement <2 x i64> %930, i32 1
  %933 = bitcast i64 %931 to <2 x i32>
  %934 = shufflevector <2 x i32> %933, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %935 = bitcast i64 %932 to <2 x i32>
  %936 = shufflevector <2 x i32> %935, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %937 = shufflevector <4 x i32> %934, <4 x i32> %936, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %938 = shufflevector <2 x i32> %911, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %939 = shufflevector <2 x i32> %912, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %940 = shufflevector <4 x i32> %938, <4 x i32> %939, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %941 = and <4 x i32> %937, %940
  %942 = bitcast <4 x i32> %941 to <2 x i64>
  %943 = extractelement <2 x i64> %942, i32 0
  %944 = extractelement <2 x i64> %942, i32 1
  %945 = bitcast i64 %943 to <2 x i32>
  %946 = shufflevector <2 x i32> %945, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %947 = bitcast i64 %944 to <2 x i32>
  %948 = shufflevector <2 x i32> %947, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %949 = shufflevector <4 x i32> %946, <4 x i32> %948, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %950 = or <4 x i32> %949, %928
  %951 = shufflevector <4 x float> %829, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %952 = shufflevector <4 x float> %951, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %953 = shufflevector <4 x float> %951, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %954 = bitcast <2 x float> %952 to <2 x i32>
  %955 = bitcast <2 x float> %953 to <2 x i32>
  %956 = shufflevector <2 x i32> %954, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %957 = shufflevector <2 x i32> %955, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %958 = shufflevector <4 x i32> %956, <4 x i32> %957, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %959 = and <4 x i32> %161, %958
  %960 = bitcast <4 x i32> %959 to <2 x i64>
  %961 = extractelement <2 x i64> %960, i32 0
  %962 = extractelement <2 x i64> %960, i32 1
  %963 = bitcast i64 %961 to <2 x i32>
  %964 = shufflevector <2 x i32> %963, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %965 = bitcast i64 %962 to <2 x i32>
  %966 = shufflevector <2 x i32> %965, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %967 = shufflevector <4 x i32> %964, <4 x i32> %966, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %968 = bitcast <2 x float> %61 to <2 x i32>
  %969 = bitcast <2 x float> %64 to <2 x i32>
  %970 = shufflevector <2 x i32> %968, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %971 = shufflevector <2 x i32> %969, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %972 = shufflevector <4 x i32> %970, <4 x i32> %971, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %973 = and <4 x i32> %892, %972
  %974 = bitcast <4 x i32> %973 to <2 x i64>
  %975 = extractelement <2 x i64> %974, i32 0
  %976 = extractelement <2 x i64> %974, i32 1
  %977 = bitcast i64 %975 to <2 x i32>
  %978 = shufflevector <2 x i32> %977, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %979 = bitcast i64 %976 to <2 x i32>
  %980 = shufflevector <2 x i32> %979, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %981 = shufflevector <4 x i32> %978, <4 x i32> %980, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %982 = or <4 x i32> %981, %967
  %983 = bitcast <4 x i32> %982 to <2 x i64>
  %984 = extractelement <2 x i64> %983, i32 0
  %985 = extractelement <2 x i64> %983, i32 1
  %986 = bitcast i64 %984 to <2 x i32>
  %987 = bitcast i64 %985 to <2 x i32>
  %988 = shufflevector <4 x float> %128, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %989 = bitcast <2 x float> %988 to <2 x i32>
  %990 = shufflevector <4 x float> %128, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %991 = bitcast <2 x float> %990 to <2 x i32>
  %992 = shufflevector <2 x i32> %989, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %993 = shufflevector <2 x i32> %991, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %994 = shufflevector <4 x i32> %992, <4 x i32> %993, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %995 = and <4 x i32> %866, %994
  %996 = bitcast <4 x i32> %995 to <2 x i64>
  %997 = extractelement <2 x i64> %996, i32 0
  %998 = extractelement <2 x i64> %996, i32 1
  %999 = bitcast i64 %997 to <2 x i32>
  %1000 = shufflevector <2 x i32> %999, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1001 = bitcast i64 %998 to <2 x i32>
  %1002 = shufflevector <2 x i32> %1001, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1003 = shufflevector <4 x i32> %1000, <4 x i32> %1002, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1004 = shufflevector <2 x i32> %986, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1005 = shufflevector <2 x i32> %987, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1006 = shufflevector <4 x i32> %1004, <4 x i32> %1005, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1007 = and <4 x i32> %937, %1006
  %1008 = bitcast <4 x i32> %1007 to <2 x i64>
  %1009 = extractelement <2 x i64> %1008, i32 0
  %1010 = extractelement <2 x i64> %1008, i32 1
  %1011 = bitcast i64 %1009 to <2 x i32>
  %1012 = shufflevector <2 x i32> %1011, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1013 = bitcast i64 %1010 to <2 x i32>
  %1014 = shufflevector <2 x i32> %1013, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1015 = shufflevector <4 x i32> %1012, <4 x i32> %1014, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1016 = or <4 x i32> %1015, %1003
  %1017 = shufflevector <4 x float> %831, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %1018 = shufflevector <4 x float> %1017, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1019 = shufflevector <4 x float> %1017, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1020 = bitcast <2 x float> %1018 to <2 x i32>
  %1021 = bitcast <2 x float> %1019 to <2 x i32>
  %1022 = shufflevector <2 x i32> %1020, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1023 = shufflevector <2 x i32> %1021, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1024 = shufflevector <4 x i32> %1022, <4 x i32> %1023, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1025 = and <4 x i32> %1024, %161
  %1026 = bitcast <4 x i32> %1025 to <2 x i64>
  %1027 = extractelement <2 x i64> %1026, i32 0
  %1028 = extractelement <2 x i64> %1026, i32 1
  %1029 = bitcast i64 %1027 to <2 x i32>
  %1030 = shufflevector <2 x i32> %1029, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1031 = bitcast i64 %1028 to <2 x i32>
  %1032 = shufflevector <2 x i32> %1031, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1033 = shufflevector <4 x i32> %1030, <4 x i32> %1032, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1034 = bitcast <2 x float> %9 to <2 x i32>
  %1035 = bitcast <2 x float> %12 to <2 x i32>
  %1036 = shufflevector <2 x i32> %1034, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1037 = shufflevector <2 x i32> %1035, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1038 = shufflevector <4 x i32> %1036, <4 x i32> %1037, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1039 = and <4 x i32> %892, %1038
  %1040 = bitcast <4 x i32> %1039 to <2 x i64>
  %1041 = extractelement <2 x i64> %1040, i32 0
  %1042 = extractelement <2 x i64> %1040, i32 1
  %1043 = bitcast i64 %1041 to <2 x i32>
  %1044 = shufflevector <2 x i32> %1043, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1045 = bitcast i64 %1042 to <2 x i32>
  %1046 = shufflevector <2 x i32> %1045, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1047 = shufflevector <4 x i32> %1044, <4 x i32> %1046, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1048 = or <4 x i32> %1047, %1033
  %1049 = bitcast <4 x i32> %1048 to <2 x i64>
  %1050 = extractelement <2 x i64> %1049, i32 0
  %1051 = extractelement <2 x i64> %1049, i32 1
  %1052 = bitcast i64 %1050 to <2 x i32>
  %1053 = bitcast i64 %1051 to <2 x i32>
  %1054 = and <2 x i64> %929, <i64 4215369252200251392, i64 4215369252200251392>
  %1055 = extractelement <2 x i64> %1054, i32 0
  %1056 = extractelement <2 x i64> %1054, i32 1
  %1057 = bitcast i64 %1055 to <2 x i32>
  %1058 = shufflevector <2 x i32> %1057, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1059 = bitcast i64 %1056 to <2 x i32>
  %1060 = shufflevector <2 x i32> %1059, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1061 = shufflevector <4 x i32> %1058, <4 x i32> %1060, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1062 = shufflevector <2 x i32> %1052, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1063 = shufflevector <2 x i32> %1053, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1064 = shufflevector <4 x i32> %1062, <4 x i32> %1063, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1065 = and <4 x i32> %937, %1064
  %1066 = bitcast <4 x i32> %1065 to <2 x i64>
  %1067 = extractelement <2 x i64> %1066, i32 0
  %1068 = extractelement <2 x i64> %1066, i32 1
  %1069 = bitcast i64 %1067 to <2 x i32>
  %1070 = shufflevector <2 x i32> %1069, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1071 = bitcast i64 %1068 to <2 x i32>
  %1072 = shufflevector <2 x i32> %1071, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1073 = shufflevector <4 x i32> %1070, <4 x i32> %1072, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1074 = or <4 x i32> %1073, %1061
  %1075 = shufflevector <4 x float> %833, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %1076 = shufflevector <4 x float> %1075, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1077 = shufflevector <4 x float> %1075, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1078 = bitcast <2 x float> %1076 to <2 x i32>
  %1079 = bitcast <2 x float> %1077 to <2 x i32>
  %1080 = shufflevector <2 x i32> %1078, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1081 = shufflevector <2 x i32> %1079, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1082 = shufflevector <4 x i32> %1080, <4 x i32> %1081, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1083 = and <4 x i32> %1082, %161
  %1084 = bitcast <4 x i32> %1083 to <2 x i64>
  %1085 = extractelement <2 x i64> %1084, i32 0
  %1086 = extractelement <2 x i64> %1084, i32 1
  %1087 = bitcast i64 %1085 to <2 x i32>
  %1088 = shufflevector <2 x i32> %1087, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1089 = bitcast i64 %1086 to <2 x i32>
  %1090 = shufflevector <2 x i32> %1089, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1091 = shufflevector <4 x i32> %1088, <4 x i32> %1090, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1092 = shufflevector <4 x float> %100, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1093 = bitcast <2 x float> %1092 to <2 x i32>
  %1094 = shufflevector <4 x float> %100, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1095 = bitcast <2 x float> %1094 to <2 x i32>
  %1096 = shufflevector <2 x i32> %1093, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1097 = shufflevector <2 x i32> %1095, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1098 = shufflevector <4 x i32> %1096, <4 x i32> %1097, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1099 = and <4 x i32> %1098, %892
  %1100 = bitcast <4 x i32> %1099 to <2 x i64>
  %1101 = extractelement <2 x i64> %1100, i32 0
  %1102 = extractelement <2 x i64> %1100, i32 1
  %1103 = bitcast i64 %1101 to <2 x i32>
  %1104 = shufflevector <2 x i32> %1103, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1105 = bitcast i64 %1102 to <2 x i32>
  %1106 = shufflevector <2 x i32> %1105, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1107 = shufflevector <4 x i32> %1104, <4 x i32> %1106, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1108 = or <4 x i32> %1091, %1107
  %1109 = bitcast <4 x i32> %1108 to <2 x i64>
  %1110 = extractelement <2 x i64> %1109, i32 0
  %1111 = extractelement <2 x i64> %1109, i32 1
  %1112 = bitcast i64 %1110 to <2 x i32>
  %1113 = bitcast i64 %1111 to <2 x i32>
  %1114 = shufflevector <4 x float> %132, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1115 = bitcast <2 x float> %1114 to <2 x i32>
  %1116 = shufflevector <4 x float> %132, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1117 = bitcast <2 x float> %1116 to <2 x i32>
  %1118 = shufflevector <2 x i32> %1115, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1119 = shufflevector <2 x i32> %1117, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1120 = shufflevector <4 x i32> %1118, <4 x i32> %1119, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1121 = and <4 x i32> %1120, %866
  %1122 = bitcast <4 x i32> %1121 to <2 x i64>
  %1123 = extractelement <2 x i64> %1122, i32 0
  %1124 = extractelement <2 x i64> %1122, i32 1
  %1125 = bitcast i64 %1123 to <2 x i32>
  %1126 = shufflevector <2 x i32> %1125, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1127 = bitcast i64 %1124 to <2 x i32>
  %1128 = shufflevector <2 x i32> %1127, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1129 = shufflevector <4 x i32> %1126, <4 x i32> %1128, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1130 = shufflevector <2 x i32> %1112, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1131 = shufflevector <2 x i32> %1113, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1132 = shufflevector <4 x i32> %1130, <4 x i32> %1131, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1133 = and <4 x i32> %1132, %937
  %1134 = bitcast <4 x i32> %1133 to <2 x i64>
  %1135 = extractelement <2 x i64> %1134, i32 0
  %1136 = extractelement <2 x i64> %1134, i32 1
  %1137 = bitcast i64 %1135 to <2 x i32>
  %1138 = shufflevector <2 x i32> %1137, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1139 = bitcast i64 %1136 to <2 x i32>
  %1140 = shufflevector <2 x i32> %1139, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1141 = shufflevector <4 x i32> %1138, <4 x i32> %1140, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1142 = or <4 x i32> %1141, %1129
  %1143 = shufflevector <4 x float> %835, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %1144 = shufflevector <4 x float> %1143, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1145 = shufflevector <4 x float> %1143, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1146 = bitcast <2 x float> %1144 to <2 x i32>
  %1147 = bitcast <2 x float> %1145 to <2 x i32>
  %1148 = shufflevector <2 x i32> %1146, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1149 = shufflevector <2 x i32> %1147, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1150 = shufflevector <4 x i32> %1148, <4 x i32> %1149, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1151 = and <4 x i32> %1150, %161
  %1152 = bitcast <4 x i32> %1151 to <2 x i64>
  %1153 = extractelement <2 x i64> %1152, i32 0
  %1154 = extractelement <2 x i64> %1152, i32 1
  %1155 = bitcast i64 %1153 to <2 x i32>
  %1156 = shufflevector <2 x i32> %1155, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1157 = bitcast i64 %1154 to <2 x i32>
  %1158 = shufflevector <2 x i32> %1157, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1159 = shufflevector <4 x i32> %1156, <4 x i32> %1158, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1160 = shufflevector <4 x float> %99, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1161 = bitcast <2 x float> %1160 to <2 x i32>
  %1162 = shufflevector <4 x float> %99, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1163 = bitcast <2 x float> %1162 to <2 x i32>
  %1164 = shufflevector <2 x i32> %1161, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1165 = shufflevector <2 x i32> %1163, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1166 = shufflevector <4 x i32> %1164, <4 x i32> %1165, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1167 = and <4 x i32> %1166, %892
  %1168 = bitcast <4 x i32> %1167 to <2 x i64>
  %1169 = extractelement <2 x i64> %1168, i32 0
  %1170 = extractelement <2 x i64> %1168, i32 1
  %1171 = bitcast i64 %1169 to <2 x i32>
  %1172 = shufflevector <2 x i32> %1171, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1173 = bitcast i64 %1170 to <2 x i32>
  %1174 = shufflevector <2 x i32> %1173, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1175 = shufflevector <4 x i32> %1172, <4 x i32> %1174, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1176 = or <4 x i32> %1159, %1175
  %1177 = bitcast <4 x i32> %1176 to <2 x i64>
  %1178 = extractelement <2 x i64> %1177, i32 0
  %1179 = extractelement <2 x i64> %1177, i32 1
  %1180 = bitcast i64 %1178 to <2 x i32>
  %1181 = bitcast i64 %1179 to <2 x i32>
  %1182 = shufflevector <4 x float> %136, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1183 = bitcast <2 x float> %1182 to <2 x i32>
  %1184 = shufflevector <4 x float> %136, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1185 = bitcast <2 x float> %1184 to <2 x i32>
  %1186 = shufflevector <2 x i32> %1183, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1187 = shufflevector <2 x i32> %1185, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1188 = shufflevector <4 x i32> %1186, <4 x i32> %1187, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1189 = and <4 x i32> %1188, %866
  %1190 = bitcast <4 x i32> %1189 to <2 x i64>
  %1191 = extractelement <2 x i64> %1190, i32 0
  %1192 = extractelement <2 x i64> %1190, i32 1
  %1193 = bitcast i64 %1191 to <2 x i32>
  %1194 = shufflevector <2 x i32> %1193, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1195 = bitcast i64 %1192 to <2 x i32>
  %1196 = shufflevector <2 x i32> %1195, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1197 = shufflevector <4 x i32> %1194, <4 x i32> %1196, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1198 = shufflevector <2 x i32> %1180, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1199 = shufflevector <2 x i32> %1181, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1200 = shufflevector <4 x i32> %1198, <4 x i32> %1199, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1201 = and <4 x i32> %1200, %937
  %1202 = bitcast <4 x i32> %1201 to <2 x i64>
  %1203 = extractelement <2 x i64> %1202, i32 0
  %1204 = extractelement <2 x i64> %1202, i32 1
  %1205 = bitcast i64 %1203 to <2 x i32>
  %1206 = shufflevector <2 x i32> %1205, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1207 = bitcast i64 %1204 to <2 x i32>
  %1208 = shufflevector <2 x i32> %1207, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1209 = shufflevector <4 x i32> %1206, <4 x i32> %1208, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1210 = or <4 x i32> %1209, %1197
  %1211 = shufflevector <4 x float> %837, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %1212 = shufflevector <4 x float> %1211, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1213 = shufflevector <4 x float> %1211, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1214 = bitcast <2 x float> %1212 to <2 x i32>
  %1215 = bitcast <2 x float> %1213 to <2 x i32>
  %1216 = shufflevector <2 x i32> %1214, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1217 = shufflevector <2 x i32> %1215, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1218 = shufflevector <4 x i32> %1216, <4 x i32> %1217, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1219 = and <4 x i32> %1218, %161
  %1220 = bitcast <4 x i32> %1219 to <2 x i64>
  %1221 = extractelement <2 x i64> %1220, i32 0
  %1222 = extractelement <2 x i64> %1220, i32 1
  %1223 = bitcast i64 %1221 to <2 x i32>
  %1224 = shufflevector <2 x i32> %1223, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1225 = bitcast i64 %1222 to <2 x i32>
  %1226 = shufflevector <2 x i32> %1225, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1227 = shufflevector <4 x i32> %1224, <4 x i32> %1226, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1228 = shufflevector <4 x float> %101, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1229 = bitcast <2 x float> %1228 to <2 x i32>
  %1230 = shufflevector <4 x float> %101, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1231 = bitcast <2 x float> %1230 to <2 x i32>
  %1232 = shufflevector <2 x i32> %1229, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1233 = shufflevector <2 x i32> %1231, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1234 = shufflevector <4 x i32> %1232, <4 x i32> %1233, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1235 = and <4 x i32> %1234, %892
  %1236 = bitcast <4 x i32> %1235 to <2 x i64>
  %1237 = extractelement <2 x i64> %1236, i32 0
  %1238 = extractelement <2 x i64> %1236, i32 1
  %1239 = bitcast i64 %1237 to <2 x i32>
  %1240 = shufflevector <2 x i32> %1239, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1241 = bitcast i64 %1238 to <2 x i32>
  %1242 = shufflevector <2 x i32> %1241, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1243 = shufflevector <4 x i32> %1240, <4 x i32> %1242, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1244 = or <4 x i32> %1227, %1243
  %1245 = bitcast <4 x i32> %1244 to <2 x i64>
  %1246 = extractelement <2 x i64> %1245, i32 0
  %1247 = extractelement <2 x i64> %1245, i32 1
  %1248 = bitcast i64 %1246 to <2 x i32>
  %1249 = bitcast i64 %1247 to <2 x i32>
  %1250 = shufflevector <4 x float> %140, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1251 = bitcast <2 x float> %1250 to <2 x i32>
  %1252 = shufflevector <4 x float> %140, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1253 = bitcast <2 x float> %1252 to <2 x i32>
  %1254 = shufflevector <2 x i32> %1251, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1255 = shufflevector <2 x i32> %1253, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1256 = shufflevector <4 x i32> %1254, <4 x i32> %1255, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1257 = and <4 x i32> %1256, %866
  %1258 = bitcast <4 x i32> %1257 to <2 x i64>
  %1259 = extractelement <2 x i64> %1258, i32 0
  %1260 = extractelement <2 x i64> %1258, i32 1
  %1261 = bitcast i64 %1259 to <2 x i32>
  %1262 = shufflevector <2 x i32> %1261, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1263 = bitcast i64 %1260 to <2 x i32>
  %1264 = shufflevector <2 x i32> %1263, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1265 = shufflevector <4 x i32> %1262, <4 x i32> %1264, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1266 = shufflevector <2 x i32> %1248, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1267 = shufflevector <2 x i32> %1249, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1268 = shufflevector <4 x i32> %1266, <4 x i32> %1267, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1269 = and <4 x i32> %1268, %937
  %1270 = bitcast <4 x i32> %1269 to <2 x i64>
  %1271 = extractelement <2 x i64> %1270, i32 0
  %1272 = extractelement <2 x i64> %1270, i32 1
  %1273 = bitcast i64 %1271 to <2 x i32>
  %1274 = shufflevector <2 x i32> %1273, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1275 = bitcast i64 %1272 to <2 x i32>
  %1276 = shufflevector <2 x i32> %1275, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1277 = shufflevector <4 x i32> %1274, <4 x i32> %1276, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1278 = or <4 x i32> %1277, %1265
  %1279 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %0, i64 0, i32 2
  %1280 = load i32, i32* %1279, align 4
  %1281 = select i1 %109, i32 -9, i32 -2
  %1282 = select i1 %105, i32 -3, i32 %1281
  %1283 = select i1 %103, i32 -5, i32 %1282
  %1284 = and i32 %1280, %1283
  %1285 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %1, i64 0, i32 2
  store i32 %1284, i32* %1285, align 4
  %1286 = shufflevector <4 x float> %124, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %1287 = shufflevector <4 x float> %1286, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1288 = shufflevector <4 x float> %1286, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1289 = bitcast <2 x float> %1287 to <2 x i32>
  %1290 = bitcast <2 x float> %1288 to <2 x i32>
  %1291 = icmp eq <4 x i32> %161, zeroinitializer
  %1292 = sext <4 x i1> %1291 to <4 x i32>
  %1293 = bitcast <4 x i32> %1292 to <2 x i64>
  %1294 = extractelement <2 x i64> %1293, i32 0
  %1295 = extractelement <2 x i64> %1293, i32 1
  %1296 = bitcast i64 %1294 to <2 x i32>
  %1297 = shufflevector <2 x i32> %1296, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1298 = bitcast i64 %1295 to <2 x i32>
  %1299 = shufflevector <2 x i32> %1298, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1300 = shufflevector <4 x i32> %1297, <4 x i32> %1299, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1301 = shufflevector <4 x float> %827, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1302 = bitcast <2 x float> %1301 to <2 x i32>
  %1303 = shufflevector <4 x float> %827, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1304 = bitcast <2 x float> %1303 to <2 x i32>
  %1305 = shufflevector <2 x i32> %1302, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1306 = shufflevector <2 x i32> %1304, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1307 = shufflevector <4 x i32> %1305, <4 x i32> %1306, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1308 = and <4 x i32> %1300, %1307
  %1309 = bitcast <4 x i32> %1308 to <2 x i64>
  %1310 = extractelement <2 x i64> %1309, i32 0
  %1311 = extractelement <2 x i64> %1309, i32 1
  %1312 = bitcast i64 %1310 to <2 x i32>
  %1313 = shufflevector <2 x i32> %1312, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1314 = bitcast i64 %1311 to <2 x i32>
  %1315 = shufflevector <2 x i32> %1314, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1316 = shufflevector <4 x i32> %1313, <4 x i32> %1315, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1317 = bitcast <4 x i32> %1300 to <2 x i64>
  %1318 = xor <2 x i64> %1317, <i64 -1, i64 -1>
  %1319 = extractelement <2 x i64> %1318, i32 0
  %1320 = extractelement <2 x i64> %1318, i32 1
  %1321 = bitcast i64 %1319 to <2 x i32>
  %1322 = shufflevector <2 x i32> %1321, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1323 = bitcast i64 %1320 to <2 x i32>
  %1324 = shufflevector <2 x i32> %1323, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1325 = shufflevector <4 x i32> %1322, <4 x i32> %1324, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1326 = and <4 x i32> %1325, %897
  %1327 = bitcast <4 x i32> %1326 to <2 x i64>
  %1328 = extractelement <2 x i64> %1327, i32 0
  %1329 = extractelement <2 x i64> %1327, i32 1
  %1330 = bitcast i64 %1328 to <2 x i32>
  %1331 = shufflevector <2 x i32> %1330, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1332 = bitcast i64 %1329 to <2 x i32>
  %1333 = shufflevector <2 x i32> %1332, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1334 = shufflevector <4 x i32> %1331, <4 x i32> %1333, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1335 = or <4 x i32> %1334, %1316
  %1336 = bitcast <4 x i32> %1335 to <2 x i64>
  %1337 = extractelement <2 x i64> %1336, i32 0
  %1338 = extractelement <2 x i64> %1336, i32 1
  %1339 = bitcast i64 %1337 to <2 x i32>
  %1340 = bitcast i64 %1338 to <2 x i32>
  %1341 = shufflevector <2 x i32> %1289, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1342 = shufflevector <2 x i32> %1290, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1343 = shufflevector <4 x i32> %1341, <4 x i32> %1342, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1344 = and <4 x i32> %1343, %847
  %1345 = bitcast <4 x i32> %1344 to <2 x i64>
  %1346 = extractelement <2 x i64> %1345, i32 0
  %1347 = extractelement <2 x i64> %1345, i32 1
  %1348 = bitcast i64 %1346 to <2 x i32>
  %1349 = shufflevector <2 x i32> %1348, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1350 = bitcast i64 %1347 to <2 x i32>
  %1351 = shufflevector <2 x i32> %1350, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1352 = shufflevector <4 x i32> %1349, <4 x i32> %1351, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1353 = bitcast <4 x i32> %847 to <2 x i64>
  %1354 = xor <2 x i64> %1353, <i64 -1, i64 -1>
  %1355 = extractelement <2 x i64> %1354, i32 0
  %1356 = extractelement <2 x i64> %1354, i32 1
  %1357 = bitcast i64 %1355 to <2 x i32>
  %1358 = shufflevector <2 x i32> %1357, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1359 = bitcast i64 %1356 to <2 x i32>
  %1360 = shufflevector <2 x i32> %1359, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1361 = shufflevector <4 x i32> %1358, <4 x i32> %1360, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1362 = shufflevector <2 x i32> %1339, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1363 = shufflevector <2 x i32> %1340, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1364 = shufflevector <4 x i32> %1362, <4 x i32> %1363, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1365 = and <4 x i32> %1364, %1361
  %1366 = bitcast <4 x i32> %1365 to <2 x i64>
  %1367 = extractelement <2 x i64> %1366, i32 0
  %1368 = extractelement <2 x i64> %1366, i32 1
  %1369 = bitcast i64 %1367 to <2 x i32>
  %1370 = shufflevector <2 x i32> %1369, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1371 = bitcast i64 %1368 to <2 x i32>
  %1372 = shufflevector <2 x i32> %1371, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1373 = shufflevector <4 x i32> %1370, <4 x i32> %1372, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1374 = or <4 x i32> %1373, %1352
  %1375 = bitcast <4 x i32> %1374 to <2 x i64>
  %1376 = extractelement <2 x i64> %1375, i32 0
  %1377 = extractelement <2 x i64> %1375, i32 1
  %1378 = bitcast i64 %1376 to <2 x float>
  %1379 = bitcast i64 %1377 to <2 x float>
  %1380 = shufflevector <2 x float> %1378, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1381 = shufflevector <2 x float> %1379, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1382 = shufflevector <4 x float> %1380, <4 x float> %1381, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1383 = shufflevector <4 x float> %128, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %1384 = shufflevector <4 x float> %1383, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1385 = shufflevector <4 x float> %1383, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1386 = bitcast <2 x float> %1384 to <2 x i32>
  %1387 = bitcast <2 x float> %1385 to <2 x i32>
  %1388 = shufflevector <4 x float> %829, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1389 = bitcast <2 x float> %1388 to <2 x i32>
  %1390 = shufflevector <4 x float> %829, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1391 = bitcast <2 x float> %1390 to <2 x i32>
  %1392 = shufflevector <2 x i32> %1389, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1393 = shufflevector <2 x i32> %1391, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1394 = shufflevector <4 x i32> %1392, <4 x i32> %1393, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1395 = and <4 x i32> %1300, %1394
  %1396 = bitcast <4 x i32> %1395 to <2 x i64>
  %1397 = extractelement <2 x i64> %1396, i32 0
  %1398 = extractelement <2 x i64> %1396, i32 1
  %1399 = bitcast i64 %1397 to <2 x i32>
  %1400 = shufflevector <2 x i32> %1399, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1401 = bitcast i64 %1398 to <2 x i32>
  %1402 = shufflevector <2 x i32> %1401, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1403 = shufflevector <4 x i32> %1400, <4 x i32> %1402, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1404 = and <4 x i32> %1325, %972
  %1405 = bitcast <4 x i32> %1404 to <2 x i64>
  %1406 = extractelement <2 x i64> %1405, i32 0
  %1407 = extractelement <2 x i64> %1405, i32 1
  %1408 = bitcast i64 %1406 to <2 x i32>
  %1409 = shufflevector <2 x i32> %1408, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1410 = bitcast i64 %1407 to <2 x i32>
  %1411 = shufflevector <2 x i32> %1410, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1412 = shufflevector <4 x i32> %1409, <4 x i32> %1411, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1413 = or <4 x i32> %1412, %1403
  %1414 = bitcast <4 x i32> %1413 to <2 x i64>
  %1415 = extractelement <2 x i64> %1414, i32 0
  %1416 = extractelement <2 x i64> %1414, i32 1
  %1417 = bitcast i64 %1415 to <2 x i32>
  %1418 = bitcast i64 %1416 to <2 x i32>
  %1419 = shufflevector <2 x i32> %1386, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1420 = shufflevector <2 x i32> %1387, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1421 = shufflevector <4 x i32> %1419, <4 x i32> %1420, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1422 = and <4 x i32> %1421, %847
  %1423 = bitcast <4 x i32> %1422 to <2 x i64>
  %1424 = extractelement <2 x i64> %1423, i32 0
  %1425 = extractelement <2 x i64> %1423, i32 1
  %1426 = bitcast i64 %1424 to <2 x i32>
  %1427 = shufflevector <2 x i32> %1426, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1428 = bitcast i64 %1425 to <2 x i32>
  %1429 = shufflevector <2 x i32> %1428, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1430 = shufflevector <4 x i32> %1427, <4 x i32> %1429, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1431 = shufflevector <2 x i32> %1417, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1432 = shufflevector <2 x i32> %1418, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1433 = shufflevector <4 x i32> %1431, <4 x i32> %1432, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1434 = and <4 x i32> %1433, %1361
  %1435 = bitcast <4 x i32> %1434 to <2 x i64>
  %1436 = extractelement <2 x i64> %1435, i32 0
  %1437 = extractelement <2 x i64> %1435, i32 1
  %1438 = bitcast i64 %1436 to <2 x i32>
  %1439 = shufflevector <2 x i32> %1438, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1440 = bitcast i64 %1437 to <2 x i32>
  %1441 = shufflevector <2 x i32> %1440, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1442 = shufflevector <4 x i32> %1439, <4 x i32> %1441, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1443 = or <4 x i32> %1442, %1430
  %1444 = bitcast <4 x i32> %1443 to <2 x i64>
  %1445 = extractelement <2 x i64> %1444, i32 0
  %1446 = extractelement <2 x i64> %1444, i32 1
  %1447 = bitcast i64 %1445 to <2 x float>
  %1448 = bitcast i64 %1446 to <2 x float>
  %1449 = shufflevector <2 x float> %1447, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1450 = shufflevector <2 x float> %1448, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1451 = shufflevector <4 x float> %1449, <4 x float> %1450, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1452 = shufflevector <4 x float> %831, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1453 = bitcast <2 x float> %1452 to <2 x i32>
  %1454 = shufflevector <4 x float> %831, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1455 = bitcast <2 x float> %1454 to <2 x i32>
  %1456 = shufflevector <2 x i32> %1453, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1457 = shufflevector <2 x i32> %1455, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1458 = shufflevector <4 x i32> %1456, <4 x i32> %1457, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1459 = and <4 x i32> %1300, %1458
  %1460 = bitcast <4 x i32> %1459 to <2 x i64>
  %1461 = extractelement <2 x i64> %1460, i32 0
  %1462 = extractelement <2 x i64> %1460, i32 1
  %1463 = bitcast i64 %1461 to <2 x i32>
  %1464 = shufflevector <2 x i32> %1463, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1465 = bitcast i64 %1462 to <2 x i32>
  %1466 = shufflevector <2 x i32> %1465, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1467 = shufflevector <4 x i32> %1464, <4 x i32> %1466, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1468 = and <4 x i32> %1325, %1038
  %1469 = bitcast <4 x i32> %1468 to <2 x i64>
  %1470 = extractelement <2 x i64> %1469, i32 0
  %1471 = extractelement <2 x i64> %1469, i32 1
  %1472 = bitcast i64 %1470 to <2 x i32>
  %1473 = shufflevector <2 x i32> %1472, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1474 = bitcast i64 %1471 to <2 x i32>
  %1475 = shufflevector <2 x i32> %1474, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1476 = shufflevector <4 x i32> %1473, <4 x i32> %1475, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1477 = or <4 x i32> %1476, %1467
  %1478 = bitcast <4 x i32> %1477 to <2 x i64>
  %1479 = extractelement <2 x i64> %1478, i32 0
  %1480 = extractelement <2 x i64> %1478, i32 1
  %1481 = bitcast i64 %1479 to <2 x i32>
  %1482 = bitcast i64 %1480 to <2 x i32>
  %1483 = and <2 x i64> %1353, <i64 4215369252200251392, i64 4215369252200251392>
  %1484 = extractelement <2 x i64> %1483, i32 0
  %1485 = extractelement <2 x i64> %1483, i32 1
  %1486 = bitcast i64 %1484 to <2 x i32>
  %1487 = shufflevector <2 x i32> %1486, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1488 = bitcast i64 %1485 to <2 x i32>
  %1489 = shufflevector <2 x i32> %1488, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1490 = shufflevector <4 x i32> %1487, <4 x i32> %1489, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1491 = shufflevector <2 x i32> %1481, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1492 = shufflevector <2 x i32> %1482, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1493 = shufflevector <4 x i32> %1491, <4 x i32> %1492, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1494 = and <4 x i32> %1493, %1361
  %1495 = bitcast <4 x i32> %1494 to <2 x i64>
  %1496 = extractelement <2 x i64> %1495, i32 0
  %1497 = extractelement <2 x i64> %1495, i32 1
  %1498 = bitcast i64 %1496 to <2 x i32>
  %1499 = shufflevector <2 x i32> %1498, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1500 = bitcast i64 %1497 to <2 x i32>
  %1501 = shufflevector <2 x i32> %1500, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1502 = shufflevector <4 x i32> %1499, <4 x i32> %1501, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1503 = or <4 x i32> %1502, %1490
  %1504 = bitcast <4 x i32> %1503 to <2 x i64>
  %1505 = extractelement <2 x i64> %1504, i32 0
  %1506 = extractelement <2 x i64> %1504, i32 1
  %1507 = bitcast i64 %1505 to <2 x float>
  %1508 = bitcast i64 %1506 to <2 x float>
  %1509 = shufflevector <2 x float> %1507, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1510 = shufflevector <2 x float> %1508, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1511 = shufflevector <4 x float> %1509, <4 x float> %1510, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1512 = shufflevector <4 x float> %132, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %1513 = shufflevector <4 x float> %1512, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1514 = shufflevector <4 x float> %1512, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1515 = bitcast <2 x float> %1513 to <2 x i32>
  %1516 = bitcast <2 x float> %1514 to <2 x i32>
  %1517 = shufflevector <4 x float> %833, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1518 = bitcast <2 x float> %1517 to <2 x i32>
  %1519 = shufflevector <4 x float> %833, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1520 = bitcast <2 x float> %1519 to <2 x i32>
  %1521 = shufflevector <2 x i32> %1518, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1522 = shufflevector <2 x i32> %1520, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1523 = shufflevector <4 x i32> %1521, <4 x i32> %1522, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1524 = and <4 x i32> %1523, %1300
  %1525 = bitcast <4 x i32> %1524 to <2 x i64>
  %1526 = extractelement <2 x i64> %1525, i32 0
  %1527 = extractelement <2 x i64> %1525, i32 1
  %1528 = bitcast i64 %1526 to <2 x i32>
  %1529 = shufflevector <2 x i32> %1528, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1530 = bitcast i64 %1527 to <2 x i32>
  %1531 = shufflevector <2 x i32> %1530, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1532 = shufflevector <4 x i32> %1529, <4 x i32> %1531, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1533 = and <4 x i32> %1098, %1325
  %1534 = bitcast <4 x i32> %1533 to <2 x i64>
  %1535 = extractelement <2 x i64> %1534, i32 0
  %1536 = extractelement <2 x i64> %1534, i32 1
  %1537 = bitcast i64 %1535 to <2 x i32>
  %1538 = shufflevector <2 x i32> %1537, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1539 = bitcast i64 %1536 to <2 x i32>
  %1540 = shufflevector <2 x i32> %1539, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1541 = shufflevector <4 x i32> %1538, <4 x i32> %1540, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1542 = or <4 x i32> %1532, %1541
  %1543 = bitcast <4 x i32> %1542 to <2 x i64>
  %1544 = extractelement <2 x i64> %1543, i32 0
  %1545 = extractelement <2 x i64> %1543, i32 1
  %1546 = bitcast i64 %1544 to <2 x i32>
  %1547 = bitcast i64 %1545 to <2 x i32>
  %1548 = shufflevector <2 x i32> %1515, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1549 = shufflevector <2 x i32> %1516, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1550 = shufflevector <4 x i32> %1548, <4 x i32> %1549, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1551 = and <4 x i32> %1550, %847
  %1552 = bitcast <4 x i32> %1551 to <2 x i64>
  %1553 = extractelement <2 x i64> %1552, i32 0
  %1554 = extractelement <2 x i64> %1552, i32 1
  %1555 = bitcast i64 %1553 to <2 x i32>
  %1556 = shufflevector <2 x i32> %1555, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1557 = bitcast i64 %1554 to <2 x i32>
  %1558 = shufflevector <2 x i32> %1557, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1559 = shufflevector <4 x i32> %1556, <4 x i32> %1558, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1560 = shufflevector <2 x i32> %1546, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1561 = shufflevector <2 x i32> %1547, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1562 = shufflevector <4 x i32> %1560, <4 x i32> %1561, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1563 = and <4 x i32> %1562, %1361
  %1564 = bitcast <4 x i32> %1563 to <2 x i64>
  %1565 = extractelement <2 x i64> %1564, i32 0
  %1566 = extractelement <2 x i64> %1564, i32 1
  %1567 = bitcast i64 %1565 to <2 x i32>
  %1568 = shufflevector <2 x i32> %1567, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1569 = bitcast i64 %1566 to <2 x i32>
  %1570 = shufflevector <2 x i32> %1569, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1571 = shufflevector <4 x i32> %1568, <4 x i32> %1570, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1572 = or <4 x i32> %1571, %1559
  %1573 = bitcast <4 x i32> %1572 to <2 x i64>
  %1574 = shufflevector <4 x float> %136, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %1575 = shufflevector <4 x float> %1574, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1576 = shufflevector <4 x float> %1574, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1577 = bitcast <2 x float> %1575 to <2 x i32>
  %1578 = bitcast <2 x float> %1576 to <2 x i32>
  %1579 = shufflevector <4 x float> %835, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1580 = bitcast <2 x float> %1579 to <2 x i32>
  %1581 = shufflevector <4 x float> %835, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1582 = bitcast <2 x float> %1581 to <2 x i32>
  %1583 = shufflevector <2 x i32> %1580, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1584 = shufflevector <2 x i32> %1582, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1585 = shufflevector <4 x i32> %1583, <4 x i32> %1584, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1586 = and <4 x i32> %1585, %1300
  %1587 = bitcast <4 x i32> %1586 to <2 x i64>
  %1588 = extractelement <2 x i64> %1587, i32 0
  %1589 = extractelement <2 x i64> %1587, i32 1
  %1590 = bitcast i64 %1588 to <2 x i32>
  %1591 = shufflevector <2 x i32> %1590, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1592 = bitcast i64 %1589 to <2 x i32>
  %1593 = shufflevector <2 x i32> %1592, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1594 = shufflevector <4 x i32> %1591, <4 x i32> %1593, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1595 = and <4 x i32> %1166, %1325
  %1596 = bitcast <4 x i32> %1595 to <2 x i64>
  %1597 = extractelement <2 x i64> %1596, i32 0
  %1598 = extractelement <2 x i64> %1596, i32 1
  %1599 = bitcast i64 %1597 to <2 x i32>
  %1600 = shufflevector <2 x i32> %1599, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1601 = bitcast i64 %1598 to <2 x i32>
  %1602 = shufflevector <2 x i32> %1601, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1603 = shufflevector <4 x i32> %1600, <4 x i32> %1602, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1604 = or <4 x i32> %1594, %1603
  %1605 = bitcast <4 x i32> %1604 to <2 x i64>
  %1606 = extractelement <2 x i64> %1605, i32 0
  %1607 = extractelement <2 x i64> %1605, i32 1
  %1608 = bitcast i64 %1606 to <2 x i32>
  %1609 = bitcast i64 %1607 to <2 x i32>
  %1610 = shufflevector <2 x i32> %1577, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1611 = shufflevector <2 x i32> %1578, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1612 = shufflevector <4 x i32> %1610, <4 x i32> %1611, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1613 = and <4 x i32> %1612, %847
  %1614 = bitcast <4 x i32> %1613 to <2 x i64>
  %1615 = extractelement <2 x i64> %1614, i32 0
  %1616 = extractelement <2 x i64> %1614, i32 1
  %1617 = bitcast i64 %1615 to <2 x i32>
  %1618 = shufflevector <2 x i32> %1617, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1619 = bitcast i64 %1616 to <2 x i32>
  %1620 = shufflevector <2 x i32> %1619, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1621 = shufflevector <4 x i32> %1618, <4 x i32> %1620, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1622 = shufflevector <2 x i32> %1608, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1623 = shufflevector <2 x i32> %1609, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1624 = shufflevector <4 x i32> %1622, <4 x i32> %1623, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1625 = and <4 x i32> %1624, %1361
  %1626 = bitcast <4 x i32> %1625 to <2 x i64>
  %1627 = extractelement <2 x i64> %1626, i32 0
  %1628 = extractelement <2 x i64> %1626, i32 1
  %1629 = bitcast i64 %1627 to <2 x i32>
  %1630 = shufflevector <2 x i32> %1629, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1631 = bitcast i64 %1628 to <2 x i32>
  %1632 = shufflevector <2 x i32> %1631, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1633 = shufflevector <4 x i32> %1630, <4 x i32> %1632, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1634 = or <4 x i32> %1633, %1621
  %1635 = bitcast <4 x i32> %1634 to <2 x i64>
  %1636 = shufflevector <4 x float> %140, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %1637 = shufflevector <4 x float> %1636, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1638 = shufflevector <4 x float> %1636, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1639 = bitcast <2 x float> %1637 to <2 x i32>
  %1640 = bitcast <2 x float> %1638 to <2 x i32>
  %1641 = shufflevector <4 x float> %837, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1642 = bitcast <2 x float> %1641 to <2 x i32>
  %1643 = shufflevector <4 x float> %837, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1644 = bitcast <2 x float> %1643 to <2 x i32>
  %1645 = shufflevector <2 x i32> %1642, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1646 = shufflevector <2 x i32> %1644, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1647 = shufflevector <4 x i32> %1645, <4 x i32> %1646, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1648 = and <4 x i32> %1647, %1300
  %1649 = bitcast <4 x i32> %1648 to <2 x i64>
  %1650 = extractelement <2 x i64> %1649, i32 0
  %1651 = extractelement <2 x i64> %1649, i32 1
  %1652 = bitcast i64 %1650 to <2 x i32>
  %1653 = shufflevector <2 x i32> %1652, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1654 = bitcast i64 %1651 to <2 x i32>
  %1655 = shufflevector <2 x i32> %1654, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1656 = shufflevector <4 x i32> %1653, <4 x i32> %1655, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1657 = and <4 x i32> %1234, %1325
  %1658 = bitcast <4 x i32> %1657 to <2 x i64>
  %1659 = extractelement <2 x i64> %1658, i32 0
  %1660 = extractelement <2 x i64> %1658, i32 1
  %1661 = bitcast i64 %1659 to <2 x i32>
  %1662 = shufflevector <2 x i32> %1661, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1663 = bitcast i64 %1660 to <2 x i32>
  %1664 = shufflevector <2 x i32> %1663, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1665 = shufflevector <4 x i32> %1662, <4 x i32> %1664, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1666 = or <4 x i32> %1656, %1665
  %1667 = bitcast <4 x i32> %1666 to <2 x i64>
  %1668 = extractelement <2 x i64> %1667, i32 0
  %1669 = extractelement <2 x i64> %1667, i32 1
  %1670 = bitcast i64 %1668 to <2 x i32>
  %1671 = bitcast i64 %1669 to <2 x i32>
  %1672 = shufflevector <2 x i32> %1639, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1673 = shufflevector <2 x i32> %1640, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1674 = shufflevector <4 x i32> %1672, <4 x i32> %1673, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1675 = and <4 x i32> %1674, %847
  %1676 = bitcast <4 x i32> %1675 to <2 x i64>
  %1677 = extractelement <2 x i64> %1676, i32 0
  %1678 = extractelement <2 x i64> %1676, i32 1
  %1679 = bitcast i64 %1677 to <2 x i32>
  %1680 = shufflevector <2 x i32> %1679, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1681 = bitcast i64 %1678 to <2 x i32>
  %1682 = shufflevector <2 x i32> %1681, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1683 = shufflevector <4 x i32> %1680, <4 x i32> %1682, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1684 = shufflevector <2 x i32> %1670, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1685 = shufflevector <2 x i32> %1671, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1686 = shufflevector <4 x i32> %1684, <4 x i32> %1685, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1687 = and <4 x i32> %1686, %1361
  %1688 = bitcast <4 x i32> %1687 to <2 x i64>
  %1689 = extractelement <2 x i64> %1688, i32 0
  %1690 = extractelement <2 x i64> %1688, i32 1
  %1691 = bitcast i64 %1689 to <2 x i32>
  %1692 = shufflevector <2 x i32> %1691, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1693 = bitcast i64 %1690 to <2 x i32>
  %1694 = shufflevector <2 x i32> %1693, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1695 = shufflevector <4 x i32> %1692, <4 x i32> %1694, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1696 = or <4 x i32> %1695, %1683
  %1697 = bitcast <4 x i32> %1696 to <2 x i64>
  %1698 = extractelement <2 x i64> %1697, i32 0
  %1699 = extractelement <2 x i64> %1697, i32 1
  %1700 = bitcast i64 %1698 to <2 x float>
  %1701 = bitcast i64 %1699 to <2 x float>
  %1702 = shufflevector <2 x float> %1700, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1703 = shufflevector <2 x float> %1701, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1704 = shufflevector <4 x float> %1702, <4 x float> %1703, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1705 = bitcast %struct.DrawQuad* %0 to <4 x float>*
  store <4 x float> %1382, <4 x float>* %1705, align 1
  %1706 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %0, i64 0, i32 0, i32 1
  %1707 = bitcast [4 x float]* %1706 to <4 x float>*
  store <4 x float> %1451, <4 x float>* %1707, align 1
  %1708 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %0, i64 0, i32 0, i32 2
  %1709 = bitcast [4 x float]* %1708 to <4 x float>*
  store <4 x float> %1511, <4 x float>* %1709, align 1
  store i32 3, i32* %3, align 4
  %1710 = icmp ne i32 %102, 0
  br i1 %1710, label %1711, label %1742

1711:                                             ; preds = %825
  %1712 = extractelement <2 x i64> %1635, i32 1
  %1713 = bitcast i64 %1712 to <2 x float>
  %1714 = shufflevector <2 x float> %1713, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1715 = extractelement <2 x i64> %1635, i32 0
  %1716 = bitcast i64 %1715 to <2 x float>
  %1717 = shufflevector <2 x float> %1716, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1718 = shufflevector <4 x float> %1717, <4 x float> %1714, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1719 = extractelement <2 x i64> %1573, i32 1
  %1720 = bitcast i64 %1719 to <2 x float>
  %1721 = shufflevector <2 x float> %1720, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1722 = extractelement <2 x i64> %1573, i32 0
  %1723 = bitcast i64 %1722 to <2 x float>
  %1724 = shufflevector <2 x float> %1723, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1725 = shufflevector <4 x float> %1724, <4 x float> %1721, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1726 = bitcast %class.GrQuad* %46 to <4 x float>*
  store <4 x float> %1725, <4 x float>* %1726, align 1
  %1727 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %0, i64 0, i32 1, i32 1
  %1728 = bitcast [4 x float]* %1727 to <4 x float>*
  store <4 x float> %1718, <4 x float>* %1728, align 1
  %1729 = icmp eq i32 %102, 3
  br i1 %1729, label %1730, label %1733

1730:                                             ; preds = %1711
  %1731 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %0, i64 0, i32 1, i32 2
  %1732 = bitcast [4 x float]* %1731 to <4 x float>*
  store <4 x float> %1704, <4 x float>* %1732, align 1
  br label %1733

1733:                                             ; preds = %1730, %1711
  %1734 = icmp eq i32 %50, 3
  br i1 %1734, label %1741, label %1735

1735:                                             ; preds = %1733
  %1736 = load i32, i32* %47, align 4
  %1737 = icmp eq i32 %1736, 3
  br i1 %1737, label %1738, label %1741

1738:                                             ; preds = %1735
  %1739 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %0, i64 0, i32 1, i32 2, i64 0
  %1740 = bitcast float* %1739 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %1740, align 4
  br label %1741

1741:                                             ; preds = %1738, %1735, %1733
  store i32 %50, i32* %47, align 4
  br label %1742

1742:                                             ; preds = %825, %1741
  %1743 = select i1 %109, i32 -3, i32 -5
  %1744 = select i1 %105, i32 -9, i32 %1743
  %1745 = select i1 %103, i32 -2, i32 %1744
  %1746 = load i32, i32* %1279, align 4
  %1747 = and i32 %1746, %1745
  store i32 %1747, i32* %1279, align 4
  %1748 = bitcast %struct.DrawQuad* %1 to <4 x i32>*
  store <4 x i32> %950, <4 x i32>* %1748, align 1
  %1749 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %1, i64 0, i32 0, i32 1
  %1750 = bitcast [4 x float]* %1749 to <4 x i32>*
  store <4 x i32> %1016, <4 x i32>* %1750, align 1
  %1751 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %1, i64 0, i32 0, i32 2
  %1752 = bitcast [4 x float]* %1751 to <4 x i32>*
  store <4 x i32> %1074, <4 x i32>* %1752, align 1
  %1753 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %1, i64 0, i32 0, i32 3
  store i32 3, i32* %1753, align 4
  br i1 %1710, label %1754, label %1774

1754:                                             ; preds = %1742
  %1755 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %1, i64 0, i32 1
  %1756 = bitcast %class.GrQuad* %1755 to <4 x i32>*
  store <4 x i32> %1142, <4 x i32>* %1756, align 1
  %1757 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %1, i64 0, i32 1, i32 1
  %1758 = bitcast [4 x float]* %1757 to <4 x i32>*
  store <4 x i32> %1210, <4 x i32>* %1758, align 1
  %1759 = icmp eq i32 %102, 3
  br i1 %1759, label %1760, label %1763

1760:                                             ; preds = %1754
  %1761 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %1, i64 0, i32 1, i32 2
  %1762 = bitcast [4 x float]* %1761 to <4 x i32>*
  store <4 x i32> %1278, <4 x i32>* %1762, align 1
  br label %1763

1763:                                             ; preds = %1760, %1754
  %1764 = icmp eq i32 %50, 3
  br i1 %1764, label %1772, label %1765

1765:                                             ; preds = %1763
  %1766 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %1, i64 0, i32 1, i32 3
  %1767 = load i32, i32* %1766, align 4
  %1768 = icmp eq i32 %1767, 3
  br i1 %1768, label %1769, label %1772

1769:                                             ; preds = %1765
  %1770 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %1, i64 0, i32 1, i32 2, i64 0
  %1771 = bitcast float* %1770 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %1771, align 4
  br label %1772

1772:                                             ; preds = %1769, %1765, %1763
  %1773 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %1, i64 0, i32 1, i32 3
  store i32 %50, i32* %1773, align 4
  br label %1774

1774:                                             ; preds = %824, %163, %1742, %1772, %40, %31, %2
  %1775 = phi i32 [ 1, %2 ], [ 1, %31 ], [ 0, %40 ], [ 1, %163 ], [ 1, %824 ], [ 2, %1742 ], [ 2, %1772 ]
  ret i32 %1775
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN11GrQuadUtils18TessellationHelper8Vertices5resetERK6GrQuadPS3_(%"struct.GrQuadUtils::TessellationHelper::Vertices"* nocapture, %class.GrQuad* nocapture readonly dereferenceable(52), %class.GrQuad* readonly) local_unnamed_addr #5 align 2 {
  %4 = bitcast %class.GrQuad* %1 to <2 x i64>*
  %5 = load <2 x i64>, <2 x i64>* %4, align 1
  %6 = bitcast %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0 to <2 x i64>*
  store <2 x i64> %5, <2 x i64>* %6, align 16
  %7 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %1, i64 0, i32 1, i64 0
  %8 = bitcast float* %7 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 1
  %10 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 1
  %11 = bitcast %"struct.skvx::Vec"* %10 to <2 x i64>*
  store <2 x i64> %9, <2 x i64>* %11, align 16
  %12 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %1, i64 0, i32 2, i64 0
  %13 = bitcast float* %12 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 1
  %15 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 2
  %16 = bitcast %"struct.skvx::Vec"* %15 to <2 x i64>*
  store <2 x i64> %14, <2 x i64>* %16, align 16
  %17 = icmp eq %class.GrQuad* %2, null
  br i1 %17, label %37, label %18

18:                                               ; preds = %3
  %19 = bitcast %class.GrQuad* %2 to <2 x i64>*
  %20 = load <2 x i64>, <2 x i64>* %19, align 1
  %21 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 3
  %22 = bitcast %"struct.skvx::Vec"* %21 to <2 x i64>*
  store <2 x i64> %20, <2 x i64>* %22, align 16
  %23 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %2, i64 0, i32 1, i64 0
  %24 = bitcast float* %23 to <2 x i64>*
  %25 = load <2 x i64>, <2 x i64>* %24, align 1
  %26 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 4
  %27 = bitcast %"struct.skvx::Vec"* %26 to <2 x i64>*
  store <2 x i64> %25, <2 x i64>* %27, align 16
  %28 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %2, i64 0, i32 2, i64 0
  %29 = bitcast float* %28 to <2 x i64>*
  %30 = load <2 x i64>, <2 x i64>* %29, align 1
  %31 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 5
  %32 = bitcast %"struct.skvx::Vec"* %31 to <2 x i64>*
  store <2 x i64> %30, <2 x i64>* %32, align 16
  %33 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %2, i64 0, i32 3
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 3
  %36 = select i1 %35, i32 3, i32 2
  br label %37

37:                                               ; preds = %3, %18
  %38 = phi i32 [ %36, %18 ], [ 0, %3 ]
  %39 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 6
  store i32 %38, i32* %39, align 16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK11GrQuadUtils18TessellationHelper8Vertices9asGrQuadsEP6GrQuadNS2_4TypeES3_S4_(%"struct.GrQuadUtils::TessellationHelper::Vertices"* nocapture readonly, %class.GrQuad* nocapture, i32, %class.GrQuad* nocapture, i32) local_unnamed_addr #2 align 2 {
  %6 = bitcast %class.GrQuad* %1 to i8*
  %7 = bitcast %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 16 %7, i64 16, i1 false) #10
  %8 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 1
  %9 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %1, i64 0, i32 1, i64 0
  %10 = bitcast float* %9 to i8*
  %11 = bitcast %"struct.skvx::Vec"* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 16 %11, i64 16, i1 false) #10
  %12 = icmp eq i32 %2, 3
  br i1 %12, label %13, label %18

13:                                               ; preds = %5
  %14 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 2
  %15 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %1, i64 0, i32 2, i64 0
  %16 = bitcast float* %15 to i8*
  %17 = bitcast %"struct.skvx::Vec"* %14 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 16 %17, i64 16, i1 false) #10
  br label %25

18:                                               ; preds = %5
  %19 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %1, i64 0, i32 3
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 3
  br i1 %21, label %22, label %25

22:                                               ; preds = %18
  %23 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %1, i64 0, i32 2, i64 0
  %24 = bitcast float* %23 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %24, align 4
  br label %25

25:                                               ; preds = %13, %18, %22
  %26 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %1, i64 0, i32 3
  store i32 %2, i32* %26, align 4
  %27 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 6
  %28 = load i32, i32* %27, align 16
  %29 = icmp sgt i32 %28, 0
  br i1 %29, label %30, label %56

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 3
  %32 = bitcast %class.GrQuad* %3 to i8*
  %33 = bitcast %"struct.skvx::Vec"* %31 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %32, i8* align 16 %33, i64 16, i1 false) #10
  %34 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 4
  %35 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %3, i64 0, i32 1, i64 0
  %36 = bitcast float* %35 to i8*
  %37 = bitcast %"struct.skvx::Vec"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 16 %37, i64 16, i1 false) #10
  %38 = load i32, i32* %27, align 16
  %39 = icmp eq i32 %38, 3
  br i1 %39, label %40, label %45

40:                                               ; preds = %30
  %41 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 5
  %42 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %3, i64 0, i32 2, i64 0
  %43 = bitcast float* %42 to i8*
  %44 = bitcast %"struct.skvx::Vec"* %41 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %43, i8* align 16 %44, i64 16, i1 false) #10
  br label %45

45:                                               ; preds = %40, %30
  %46 = icmp eq i32 %4, 3
  br i1 %46, label %54, label %47

47:                                               ; preds = %45
  %48 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %3, i64 0, i32 3
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %49, 3
  br i1 %50, label %51, label %54

51:                                               ; preds = %47
  %52 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %3, i64 0, i32 2, i64 0
  %53 = bitcast float* %52 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %53, align 4
  br label %54

54:                                               ; preds = %45, %47, %51
  %55 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %3, i64 0, i32 3
  store i32 %4, i32* %55, align 4
  br label %56

56:                                               ; preds = %54, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11GrQuadUtils10CropToRectERK6SkRect4GrAAP8DrawQuadb(%struct.SkRect* readonly dereferenceable(16), i1 zeroext, %struct.DrawQuad*, i1 zeroext) local_unnamed_addr #4 {
  %5 = alloca %"struct.skvx::Vec", align 16
  %6 = alloca %"struct.skvx::Vec", align 16
  %7 = alloca <4 x float>, align 16
  %8 = bitcast <4 x float>* %7 to %"struct.skvx::Vec"*
  %9 = alloca <4 x float>, align 16
  %10 = bitcast <4 x float>* %9 to %"struct.skvx::Vec"*
  %11 = alloca <4 x float>, align 16
  %12 = bitcast <4 x float>* %11 to %"struct.skvx::Vec"*
  %13 = alloca <4 x float>, align 16
  %14 = bitcast <4 x float>* %13 to %"struct.skvx::Vec"*
  %15 = alloca <4 x float>, align 16
  %16 = bitcast <4 x float>* %15 to %"struct.skvx::Vec"*
  %17 = alloca <4 x float>, align 16
  %18 = bitcast <4 x float>* %17 to %"struct.skvx::Vec"*
  %19 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 3
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %472

22:                                               ; preds = %4
  %23 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 0, i64 0
  %24 = load float, float* %23, align 4
  %25 = fadd float %24, 0x3F30000000000000
  %26 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 0, i64 2
  %27 = load float, float* %26, align 4
  %28 = fcmp olt float %25, %27
  br i1 %28, label %29, label %36

29:                                               ; preds = %22
  %30 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 0
  %31 = load float, float* %30, align 4
  %32 = fadd float %31, 0x3F30000000000000
  %33 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 1
  %34 = load float, float* %33, align 4
  %35 = fcmp olt float %32, %34
  br label %36

36:                                               ; preds = %22, %29
  %37 = phi i1 [ false, %22 ], [ %35, %29 ]
  br i1 %3, label %38, label %189

38:                                               ; preds = %36
  br i1 %37, label %39, label %173

39:                                               ; preds = %38
  %40 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 1
  %41 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 1, i32 3
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %173

44:                                               ; preds = %39
  %45 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %40, i64 0, i32 0, i64 0
  %46 = load float, float* %45, align 4
  %47 = fadd float %46, 0x3F30000000000000
  %48 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 1, i32 0, i64 2
  %49 = load float, float* %48, align 4
  %50 = fcmp olt float %47, %49
  br i1 %50, label %51, label %173

51:                                               ; preds = %44
  %52 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 1, i32 1, i64 0
  %53 = load float, float* %52, align 4
  %54 = fadd float %53, 0x3F30000000000000
  %55 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 1, i32 1, i64 1
  %56 = load float, float* %55, align 4
  %57 = fcmp olt float %54, %56
  br i1 %57, label %58, label %173

58:                                               ; preds = %51
  %59 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 0
  %60 = icmp ne %class.GrQuad* %40, null
  br i1 %60, label %61, label %65

61:                                               ; preds = %58
  %62 = fsub float %49, %46
  %63 = fsub float %27, %24
  %64 = fdiv float %62, %63
  br label %65

65:                                               ; preds = %61, %58
  %66 = phi float [ %64, %61 ], [ 0.000000e+00, %58 ]
  %67 = icmp ne float* %52, null
  br i1 %67, label %68, label %75

68:                                               ; preds = %65
  %69 = fsub float %56, %53
  %70 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 1
  %71 = load float, float* %70, align 4
  %72 = load float, float* %59, align 4
  %73 = fsub float %71, %72
  %74 = fdiv float %69, %73
  br label %75

75:                                               ; preds = %68, %65
  %76 = phi float [ %74, %68 ], [ 0.000000e+00, %65 ]
  %77 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 0
  %78 = load float, float* %77, align 4
  %79 = fcmp ogt float %78, %24
  %80 = bitcast float %78 to i32
  br i1 %79, label %81, label %98

81:                                               ; preds = %75
  br i1 %60, label %84, label %82

82:                                               ; preds = %81
  %83 = bitcast %struct.SkRect* %0 to i32*
  br label %91

84:                                               ; preds = %81
  %85 = fsub float %78, %24
  %86 = fmul float %66, %85
  %87 = fadd float %86, %46
  store float %87, float* %45, align 4
  %88 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 1, i32 0, i64 1
  store float %87, float* %88, align 4
  %89 = bitcast %struct.SkRect* %0 to i32*
  %90 = load i32, i32* %89, align 4
  br label %91

91:                                               ; preds = %84, %82
  %92 = phi i32* [ %83, %82 ], [ %89, %84 ]
  %93 = phi i32 [ %80, %82 ], [ %90, %84 ]
  %94 = bitcast %struct.DrawQuad* %2 to i32*
  store i32 %93, i32* %94, align 4
  %95 = load i32, i32* %92, align 4
  %96 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 0, i64 1
  %97 = bitcast float* %96 to i32*
  store i32 %95, i32* %97, align 4
  br label %98

98:                                               ; preds = %91, %75
  %99 = phi i32 [ 1, %91 ], [ 0, %75 ]
  %100 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 1
  %101 = load float, float* %100, align 4
  %102 = load float, float* %59, align 4
  %103 = fcmp ogt float %101, %102
  %104 = bitcast float %101 to i32
  br i1 %103, label %105, label %123

105:                                              ; preds = %98
  br i1 %67, label %108, label %106

106:                                              ; preds = %105
  %107 = bitcast float* %100 to i32*
  br label %115

108:                                              ; preds = %105
  %109 = fsub float %101, %102
  %110 = fmul float %76, %109
  %111 = fadd float %110, %53
  store float %111, float* %52, align 4
  %112 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 1, i32 1, i64 2
  store float %111, float* %112, align 4
  %113 = bitcast float* %100 to i32*
  %114 = load i32, i32* %113, align 4
  br label %115

115:                                              ; preds = %108, %106
  %116 = phi i32* [ %107, %106 ], [ %113, %108 ]
  %117 = phi i32 [ %104, %106 ], [ %114, %108 ]
  %118 = bitcast float* %59 to i32*
  store i32 %117, i32* %118, align 4
  %119 = load i32, i32* %116, align 4
  %120 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 2
  %121 = bitcast float* %120 to i32*
  store i32 %119, i32* %121, align 4
  %122 = or i32 %99, 2
  br label %123

123:                                              ; preds = %115, %98
  %124 = phi i32 [ %122, %115 ], [ %99, %98 ]
  %125 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 2
  %126 = load float, float* %125, align 4
  %127 = fcmp olt float %126, %27
  %128 = bitcast float %126 to i32
  br i1 %127, label %129, label %147

129:                                              ; preds = %123
  br i1 %60, label %132, label %130

130:                                              ; preds = %129
  %131 = bitcast float* %125 to i32*
  br label %139

132:                                              ; preds = %129
  %133 = fsub float %27, %126
  %134 = fmul float %66, %133
  %135 = fsub float %49, %134
  store float %135, float* %48, align 4
  %136 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 1, i32 0, i64 3
  store float %135, float* %136, align 4
  %137 = bitcast float* %125 to i32*
  %138 = load i32, i32* %137, align 4
  br label %139

139:                                              ; preds = %132, %130
  %140 = phi i32* [ %131, %130 ], [ %137, %132 ]
  %141 = phi i32 [ %128, %130 ], [ %138, %132 ]
  %142 = bitcast float* %26 to i32*
  store i32 %141, i32* %142, align 4
  %143 = load i32, i32* %140, align 4
  %144 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 0, i64 3
  %145 = bitcast float* %144 to i32*
  store i32 %143, i32* %145, align 4
  %146 = or i32 %124, 4
  br label %147

147:                                              ; preds = %139, %123
  %148 = phi i32 [ %146, %139 ], [ %124, %123 ]
  %149 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 3
  %150 = load float, float* %149, align 4
  %151 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 1
  %152 = load float, float* %151, align 4
  %153 = fcmp olt float %150, %152
  %154 = bitcast float %150 to i32
  br i1 %153, label %155, label %461

155:                                              ; preds = %147
  br i1 %67, label %158, label %156

156:                                              ; preds = %155
  %157 = bitcast float* %149 to i32*
  br label %165

158:                                              ; preds = %155
  %159 = fsub float %152, %150
  %160 = fmul float %76, %159
  %161 = fsub float %56, %160
  store float %161, float* %55, align 4
  %162 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 1, i32 1, i64 3
  store float %161, float* %162, align 4
  %163 = bitcast float* %149 to i32*
  %164 = load i32, i32* %163, align 4
  br label %165

165:                                              ; preds = %158, %156
  %166 = phi i32* [ %157, %156 ], [ %163, %158 ]
  %167 = phi i32 [ %154, %156 ], [ %164, %158 ]
  %168 = bitcast float* %151 to i32*
  store i32 %167, i32* %168, align 4
  %169 = load i32, i32* %166, align 4
  %170 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 3
  %171 = bitcast float* %170 to i32*
  store i32 %169, i32* %171, align 4
  %172 = or i32 %148, 8
  br label %461

173:                                              ; preds = %44, %39, %51, %38
  %174 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 0
  %175 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 1, i32 0, i64 0
  %176 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 1, i32 1, i64 0
  %177 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 1, i32 2, i64 0
  %178 = tail call fastcc zeroext i1 @_ZL14crop_rect_edgeRK6SkRectiiiiPfS2_S2_S2_S2_(%struct.SkRect* dereferenceable(16) %0, i32 0, i32 1, i32 2, i32 3, float* %23, float* %174, float* %175, float* %176, float* %177) #10
  %179 = zext i1 %178 to i32
  %180 = tail call fastcc zeroext i1 @_ZL14crop_rect_edgeRK6SkRectiiiiPfS2_S2_S2_S2_(%struct.SkRect* dereferenceable(16) %0, i32 0, i32 2, i32 1, i32 3, float* %23, float* %174, float* %175, float* %176, float* %177) #10
  %181 = or i32 %179, 2
  %182 = select i1 %180, i32 %181, i32 %179
  %183 = tail call fastcc zeroext i1 @_ZL14crop_rect_edgeRK6SkRectiiiiPfS2_S2_S2_S2_(%struct.SkRect* dereferenceable(16) %0, i32 2, i32 3, i32 0, i32 1, float* %23, float* %174, float* %175, float* %176, float* %177) #10
  %184 = or i32 %182, 4
  %185 = select i1 %183, i32 %184, i32 %182
  %186 = tail call fastcc zeroext i1 @_ZL14crop_rect_edgeRK6SkRectiiiiPfS2_S2_S2_S2_(%struct.SkRect* dereferenceable(16) %0, i32 1, i32 3, i32 0, i32 2, float* %23, float* %174, float* %175, float* %176, float* %177) #10
  %187 = or i32 %185, 8
  %188 = select i1 %186, i32 %187, i32 %185
  br label %461

189:                                              ; preds = %36
  %190 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 0
  br i1 %37, label %191, label %236

191:                                              ; preds = %189
  %192 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 0
  %193 = load float, float* %192, align 4
  %194 = fcmp ogt float %193, %24
  br i1 %194, label %195, label %200

195:                                              ; preds = %191
  %196 = bitcast %struct.SkRect* %0 to i32*
  store float %193, float* %23, align 4
  %197 = load i32, i32* %196, align 4
  %198 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 0, i64 1
  %199 = bitcast float* %198 to i32*
  store i32 %197, i32* %199, align 4
  br label %200

200:                                              ; preds = %195, %191
  %201 = phi i32 [ 1, %195 ], [ 0, %191 ]
  %202 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 1
  %203 = load float, float* %202, align 4
  %204 = load float, float* %190, align 4
  %205 = fcmp ogt float %203, %204
  br i1 %205, label %206, label %212

206:                                              ; preds = %200
  %207 = bitcast float* %202 to i32*
  store float %203, float* %190, align 4
  %208 = load i32, i32* %207, align 4
  %209 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 2
  %210 = bitcast float* %209 to i32*
  store i32 %208, i32* %210, align 4
  %211 = or i32 %201, 2
  br label %212

212:                                              ; preds = %206, %200
  %213 = phi i32 [ %211, %206 ], [ %201, %200 ]
  %214 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 2
  %215 = load float, float* %214, align 4
  %216 = fcmp olt float %215, %27
  br i1 %216, label %217, label %223

217:                                              ; preds = %212
  %218 = bitcast float* %214 to i32*
  store float %215, float* %26, align 4
  %219 = load i32, i32* %218, align 4
  %220 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 0, i64 3
  %221 = bitcast float* %220 to i32*
  store i32 %219, i32* %221, align 4
  %222 = or i32 %213, 4
  br label %223

223:                                              ; preds = %217, %212
  %224 = phi i32 [ %222, %217 ], [ %213, %212 ]
  %225 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 3
  %226 = load float, float* %225, align 4
  %227 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 1
  %228 = load float, float* %227, align 4
  %229 = fcmp olt float %226, %228
  br i1 %229, label %230, label %461

230:                                              ; preds = %223
  %231 = bitcast float* %225 to i32*
  store float %226, float* %227, align 4
  %232 = load i32, i32* %231, align 4
  %233 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 3
  %234 = bitcast float* %233 to i32*
  store i32 %232, i32* %234, align 4
  %235 = or i32 %224, 8
  br label %461

236:                                              ; preds = %189
  %237 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 0, i64 1
  %238 = load float, float* %237, align 4
  %239 = fsub float %24, %238
  %240 = tail call float @llvm.fabs.f32(float %239) #10
  %241 = fcmp ugt float %240, 0x3F30000000000000
  br i1 %241, label %264, label %242

242:                                              ; preds = %236
  %243 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 0
  %244 = load float, float* %243, align 4
  %245 = fcmp uge float %24, %244
  %246 = fcmp ult float %27, %244
  %247 = or i1 %245, %246
  br i1 %247, label %253, label %248

248:                                              ; preds = %242
  %249 = bitcast %struct.SkRect* %0 to i32*
  store float %244, float* %23, align 4
  %250 = load i32, i32* %249, align 4
  %251 = bitcast float* %237 to i32*
  store i32 %250, i32* %251, align 4
  %252 = bitcast i32 %250 to float
  br label %291

253:                                              ; preds = %242
  %254 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 2
  %255 = load float, float* %254, align 4
  %256 = fcmp ule float %24, %255
  %257 = fcmp ugt float %27, %255
  %258 = or i1 %256, %257
  br i1 %258, label %291, label %259

259:                                              ; preds = %253
  %260 = bitcast float* %254 to i32*
  store float %255, float* %23, align 4
  %261 = load i32, i32* %260, align 4
  %262 = bitcast float* %237 to i32*
  store i32 %261, i32* %262, align 4
  %263 = bitcast i32 %261 to float
  br label %291

264:                                              ; preds = %236
  %265 = load float, float* %190, align 4
  %266 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 1
  %267 = load float, float* %266, align 4
  %268 = fcmp olt float %265, %267
  br i1 %268, label %269, label %278

269:                                              ; preds = %264
  %270 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 2
  %271 = load float, float* %270, align 4
  %272 = fcmp ult float %271, %267
  br i1 %272, label %278, label %273

273:                                              ; preds = %269
  %274 = bitcast float* %266 to i32*
  store float %267, float* %190, align 4
  %275 = load i32, i32* %274, align 4
  %276 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 1
  %277 = bitcast float* %276 to i32*
  store i32 %275, i32* %277, align 4
  br label %291

278:                                              ; preds = %269, %264
  %279 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 3
  %280 = load float, float* %279, align 4
  %281 = fcmp ogt float %265, %280
  br i1 %281, label %282, label %291

282:                                              ; preds = %278
  %283 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 2
  %284 = load float, float* %283, align 4
  %285 = fcmp ugt float %284, %280
  br i1 %285, label %291, label %286

286:                                              ; preds = %282
  %287 = bitcast float* %279 to i32*
  store float %280, float* %190, align 4
  %288 = load i32, i32* %287, align 4
  %289 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 1
  %290 = bitcast float* %289 to i32*
  store i32 %288, i32* %290, align 4
  br label %291

291:                                              ; preds = %253, %248, %259, %273, %278, %282, %286
  %292 = phi float [ %252, %248 ], [ %263, %259 ], [ %238, %273 ], [ %238, %286 ], [ %238, %282 ], [ %238, %278 ], [ %238, %253 ]
  %293 = phi float [ %244, %248 ], [ %255, %259 ], [ %24, %273 ], [ %24, %286 ], [ %24, %282 ], [ %24, %278 ], [ %24, %253 ]
  %294 = phi i32 [ 1, %248 ], [ 1, %259 ], [ 1, %273 ], [ 1, %286 ], [ 0, %282 ], [ 0, %278 ], [ 0, %253 ]
  %295 = fsub float %293, %27
  %296 = tail call float @llvm.fabs.f32(float %295) #10
  %297 = fcmp ugt float %296, 0x3F30000000000000
  br i1 %297, label %320, label %298

298:                                              ; preds = %291
  %299 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 0
  %300 = load float, float* %299, align 4
  %301 = fcmp uge float %293, %300
  %302 = fcmp ult float %292, %300
  %303 = or i1 %301, %302
  br i1 %303, label %309, label %304

304:                                              ; preds = %298
  %305 = bitcast %struct.SkRect* %0 to i32*
  store float %300, float* %23, align 4
  %306 = load i32, i32* %305, align 4
  %307 = bitcast float* %26 to i32*
  store i32 %306, i32* %307, align 4
  %308 = bitcast i32 %306 to float
  br label %347

309:                                              ; preds = %298
  %310 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 2
  %311 = load float, float* %310, align 4
  %312 = fcmp ule float %293, %311
  %313 = fcmp ugt float %292, %311
  %314 = or i1 %312, %313
  br i1 %314, label %351, label %315

315:                                              ; preds = %309
  %316 = bitcast float* %310 to i32*
  store float %311, float* %23, align 4
  %317 = load i32, i32* %316, align 4
  %318 = bitcast float* %26 to i32*
  store i32 %317, i32* %318, align 4
  %319 = bitcast i32 %317 to float
  br label %347

320:                                              ; preds = %291
  %321 = load float, float* %190, align 4
  %322 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 1
  %323 = load float, float* %322, align 4
  %324 = fcmp olt float %321, %323
  br i1 %324, label %325, label %334

325:                                              ; preds = %320
  %326 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 1
  %327 = load float, float* %326, align 4
  %328 = fcmp ult float %327, %323
  br i1 %328, label %334, label %329

329:                                              ; preds = %325
  %330 = bitcast float* %322 to i32*
  store float %323, float* %190, align 4
  %331 = load i32, i32* %330, align 4
  %332 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 2
  %333 = bitcast float* %332 to i32*
  store i32 %331, i32* %333, align 4
  br label %347

334:                                              ; preds = %325, %320
  %335 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 3
  %336 = load float, float* %335, align 4
  %337 = fcmp ogt float %321, %336
  br i1 %337, label %338, label %351

338:                                              ; preds = %334
  %339 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 1
  %340 = load float, float* %339, align 4
  %341 = fcmp ugt float %340, %336
  br i1 %341, label %351, label %342

342:                                              ; preds = %338
  %343 = bitcast float* %335 to i32*
  store float %336, float* %190, align 4
  %344 = load i32, i32* %343, align 4
  %345 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 2
  %346 = bitcast float* %345 to i32*
  store i32 %344, i32* %346, align 4
  br label %347

347:                                              ; preds = %304, %315, %329, %342
  %348 = phi float [ %300, %304 ], [ %311, %315 ], [ %293, %329 ], [ %293, %342 ]
  %349 = phi float [ %308, %304 ], [ %319, %315 ], [ %27, %329 ], [ %27, %342 ]
  %350 = or i32 %294, 2
  br label %351

351:                                              ; preds = %309, %338, %334, %347
  %352 = phi float [ %348, %347 ], [ %293, %309 ], [ %293, %334 ], [ %293, %338 ]
  %353 = phi float [ %349, %347 ], [ %27, %309 ], [ %27, %334 ], [ %27, %338 ]
  %354 = phi i32 [ %350, %347 ], [ %294, %309 ], [ %294, %334 ], [ %294, %338 ]
  %355 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 0, i64 3
  %356 = load float, float* %355, align 4
  %357 = fsub float %353, %356
  %358 = tail call float @llvm.fabs.f32(float %357) #10
  %359 = fcmp ugt float %358, 0x3F30000000000000
  br i1 %359, label %382, label %360

360:                                              ; preds = %351
  %361 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 0
  %362 = load float, float* %361, align 4
  %363 = fcmp uge float %353, %362
  %364 = fcmp ult float %352, %362
  %365 = or i1 %363, %364
  br i1 %365, label %371, label %366

366:                                              ; preds = %360
  %367 = bitcast %struct.SkRect* %0 to i32*
  store float %362, float* %26, align 4
  %368 = load i32, i32* %367, align 4
  %369 = bitcast float* %355 to i32*
  store i32 %368, i32* %369, align 4
  %370 = bitcast i32 %368 to float
  br label %408

371:                                              ; preds = %360
  %372 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 2
  %373 = load float, float* %372, align 4
  %374 = fcmp ule float %353, %373
  %375 = fcmp ugt float %352, %373
  %376 = or i1 %374, %375
  br i1 %376, label %411, label %377

377:                                              ; preds = %371
  %378 = bitcast float* %372 to i32*
  store float %373, float* %26, align 4
  %379 = load i32, i32* %378, align 4
  %380 = bitcast float* %355 to i32*
  store i32 %379, i32* %380, align 4
  %381 = bitcast i32 %379 to float
  br label %408

382:                                              ; preds = %351
  %383 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 2
  %384 = load float, float* %383, align 4
  %385 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 1
  %386 = load float, float* %385, align 4
  %387 = fcmp olt float %384, %386
  br i1 %387, label %388, label %396

388:                                              ; preds = %382
  %389 = load float, float* %190, align 4
  %390 = fcmp ult float %389, %386
  br i1 %390, label %396, label %391

391:                                              ; preds = %388
  %392 = bitcast float* %385 to i32*
  store float %386, float* %383, align 4
  %393 = load i32, i32* %392, align 4
  %394 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 3
  %395 = bitcast float* %394 to i32*
  store i32 %393, i32* %395, align 4
  br label %408

396:                                              ; preds = %388, %382
  %397 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 3
  %398 = load float, float* %397, align 4
  %399 = fcmp ogt float %384, %398
  br i1 %399, label %400, label %411

400:                                              ; preds = %396
  %401 = load float, float* %190, align 4
  %402 = fcmp ugt float %401, %398
  br i1 %402, label %411, label %403

403:                                              ; preds = %400
  %404 = bitcast float* %397 to i32*
  store float %398, float* %383, align 4
  %405 = load i32, i32* %404, align 4
  %406 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 3
  %407 = bitcast float* %406 to i32*
  store i32 %405, i32* %407, align 4
  br label %408

408:                                              ; preds = %366, %377, %391, %403
  %409 = phi float [ %370, %366 ], [ %381, %377 ], [ %356, %391 ], [ %356, %403 ]
  %410 = or i32 %354, 4
  br label %411

411:                                              ; preds = %371, %400, %396, %408
  %412 = phi float [ %409, %408 ], [ %356, %371 ], [ %356, %396 ], [ %356, %400 ]
  %413 = phi i32 [ %410, %408 ], [ %354, %371 ], [ %354, %396 ], [ %354, %400 ]
  %414 = fsub float %292, %412
  %415 = tail call float @llvm.fabs.f32(float %414) #10
  %416 = fcmp ugt float %415, 0x3F30000000000000
  br i1 %416, label %433, label %417

417:                                              ; preds = %411
  %418 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 0
  %419 = load float, float* %418, align 4
  %420 = fcmp uge float %292, %419
  %421 = fcmp ult float %352, %419
  %422 = or i1 %420, %421
  br i1 %422, label %425, label %423

423:                                              ; preds = %417
  %424 = bitcast %struct.SkRect* %0 to i32*
  store float %419, float* %237, align 4
  br label %455

425:                                              ; preds = %417
  %426 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 2
  %427 = load float, float* %426, align 4
  %428 = fcmp ule float %292, %427
  %429 = fcmp ugt float %352, %427
  %430 = or i1 %428, %429
  br i1 %430, label %461, label %431

431:                                              ; preds = %425
  %432 = bitcast float* %426 to i32*
  store float %427, float* %237, align 4
  br label %455

433:                                              ; preds = %411
  %434 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 1
  %435 = load float, float* %434, align 4
  %436 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 1
  %437 = load float, float* %436, align 4
  %438 = fcmp olt float %435, %437
  br i1 %438, label %439, label %445

439:                                              ; preds = %433
  %440 = load float, float* %190, align 4
  %441 = fcmp ult float %440, %437
  br i1 %441, label %445, label %442

442:                                              ; preds = %439
  %443 = bitcast float* %436 to i32*
  store float %437, float* %434, align 4
  %444 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 3
  br label %455

445:                                              ; preds = %439, %433
  %446 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 3
  %447 = load float, float* %446, align 4
  %448 = fcmp ogt float %435, %447
  br i1 %448, label %449, label %461

449:                                              ; preds = %445
  %450 = load float, float* %190, align 4
  %451 = fcmp ugt float %450, %447
  br i1 %451, label %461, label %452

452:                                              ; preds = %449
  %453 = bitcast float* %446 to i32*
  store float %447, float* %434, align 4
  %454 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 3
  br label %455

455:                                              ; preds = %423, %431, %442, %452
  %456 = phi float* [ %355, %423 ], [ %355, %431 ], [ %444, %442 ], [ %454, %452 ]
  %457 = phi i32* [ %424, %423 ], [ %432, %431 ], [ %443, %442 ], [ %453, %452 ]
  %458 = load i32, i32* %457, align 4
  %459 = bitcast float* %456 to i32*
  store i32 %458, i32* %459, align 4
  %460 = or i32 %413, 8
  br label %461

461:                                              ; preds = %425, %449, %445, %455, %230, %223, %165, %147, %173
  %462 = phi i32 [ %188, %173 ], [ %172, %165 ], [ %148, %147 ], [ %235, %230 ], [ %224, %223 ], [ %460, %455 ], [ %413, %425 ], [ %413, %445 ], [ %413, %449 ]
  br i1 %1, label %463, label %467

463:                                              ; preds = %461
  %464 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 2
  %465 = load i32, i32* %464, align 4
  %466 = or i32 %465, %462
  store i32 %466, i32* %464, align 4
  br label %782

467:                                              ; preds = %461
  %468 = xor i32 %462, -1
  %469 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 2
  %470 = load i32, i32* %469, align 4
  %471 = and i32 %470, %468
  store i32 %471, i32* %469, align 4
  br label %782

472:                                              ; preds = %4
  %473 = icmp eq i32 %20, 3
  %474 = or i1 %473, %3
  br i1 %474, label %782, label %475

475:                                              ; preds = %472
  %476 = bitcast %struct.DrawQuad* %2 to <2 x float>*
  %477 = load <2 x float>, <2 x float>* %476, align 1
  %478 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 0, i64 2
  %479 = bitcast float* %478 to <2 x float>*
  %480 = load <2 x float>, <2 x float>* %479, align 1
  %481 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 0
  %482 = bitcast float* %481 to <2 x float>*
  %483 = load <2 x float>, <2 x float>* %482, align 1
  %484 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 1, i64 2
  %485 = bitcast float* %484 to <2 x float>*
  %486 = load <2 x float>, <2 x float>* %485, align 1
  %487 = bitcast %"struct.skvx::Vec"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %487) #10
  %488 = bitcast %struct.SkRect* %0 to i32*
  %489 = load i32, i32* %488, align 4
  %490 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 2
  %491 = bitcast float* %490 to i32*
  %492 = load i32, i32* %491, align 4
  %493 = zext i32 %492 to i64
  %494 = shl nuw i64 %493, 32
  %495 = or i64 %494, %493
  %496 = zext i32 %489 to i64
  %497 = shl nuw i64 %496, 32
  %498 = or i64 %497, %496
  %499 = bitcast %"struct.skvx::Vec"* %5 to i64*
  store i64 %498, i64* %499, align 16
  %500 = getelementptr inbounds %"struct.skvx::Vec", %"struct.skvx::Vec"* %5, i64 0, i32 1
  %501 = bitcast %"struct.skvx::Vec.0"* %500 to i64*
  store i64 %495, i64* %501, align 8
  %502 = bitcast %"struct.skvx::Vec"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %502) #10
  %503 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 1
  %504 = bitcast float* %503 to i32*
  %505 = load i32, i32* %504, align 4
  %506 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 3
  %507 = bitcast float* %506 to i32*
  %508 = load i32, i32* %507, align 4
  %509 = zext i32 %505 to i64
  %510 = zext i32 %508 to i64
  %511 = shl nuw i64 %510, 32
  %512 = or i64 %511, %509
  %513 = bitcast %"struct.skvx::Vec"* %6 to i64*
  store i64 %512, i64* %513, align 16
  %514 = getelementptr inbounds %"struct.skvx::Vec", %"struct.skvx::Vec"* %6, i64 0, i32 1
  %515 = bitcast %"struct.skvx::Vec.0"* %514 to i64*
  store i64 %512, i64* %515, align 8
  %516 = bitcast <4 x float>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %516) #10
  %517 = bitcast <4 x float>* %9 to i8*
  %518 = bitcast <4 x float>* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %518, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %517) #10
  %519 = bitcast <4 x float>* %11 to i8*
  %520 = bitcast <4 x float>* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %520, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %519) #10
  %521 = bitcast <4 x float>* %13 to i8*
  %522 = bitcast <4 x float>* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %522, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %521) #10
  %523 = bitcast <4 x float>* %15 to i8*
  %524 = bitcast <4 x float>* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %524, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %523) #10
  %525 = bitcast <4 x float>* %17 to i8*
  %526 = bitcast <4 x float>* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %526, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %525) #10
  %527 = extractelement <2 x float> %477, i32 0
  %528 = extractelement <2 x float> %483, i32 0
  %529 = extractelement <2 x float> %477, i32 1
  %530 = extractelement <2 x float> %483, i32 1
  %531 = extractelement <2 x float> %480, i32 0
  %532 = extractelement <2 x float> %486, i32 0
  %533 = bitcast <4 x float>* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %533, i8 -1, i64 16, i1 false)
  %534 = call fastcc zeroext i1 @_ZL18barycentric_coordsffffffRKN4skvx3VecILi4EfEES3_PS1_S4_S4_(float %527, float %528, float %529, float %530, float %531, float %532, %"struct.skvx::Vec"* nonnull dereferenceable(16) %5, %"struct.skvx::Vec"* nonnull dereferenceable(16) %6, %"struct.skvx::Vec"* nonnull %8, %"struct.skvx::Vec"* nonnull %10, %"struct.skvx::Vec"* nonnull %12)
  br i1 %534, label %535, label %780

535:                                              ; preds = %475
  %536 = extractelement <2 x float> %480, i32 1
  %537 = extractelement <2 x float> %486, i32 1
  %538 = call fastcc zeroext i1 @_ZL18barycentric_coordsffffffRKN4skvx3VecILi4EfEES3_PS1_S4_S4_(float %529, float %530, float %536, float %537, float %531, float %532, %"struct.skvx::Vec"* nonnull dereferenceable(16) %5, %"struct.skvx::Vec"* nonnull dereferenceable(16) %6, %"struct.skvx::Vec"* nonnull %14, %"struct.skvx::Vec"* nonnull %16, %"struct.skvx::Vec"* nonnull %18)
  br i1 %538, label %539, label %780

539:                                              ; preds = %535
  %540 = load <4 x float>, <4 x float>* %7, align 16
  %541 = fcmp oge <4 x float> %540, zeroinitializer
  %542 = sext <4 x i1> %541 to <4 x i32>
  %543 = bitcast <4 x i32> %542 to <2 x i64>
  %544 = extractelement <2 x i64> %543, i32 0
  %545 = extractelement <2 x i64> %543, i32 1
  %546 = bitcast i64 %544 to <2 x i32>
  %547 = shufflevector <2 x i32> %546, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %548 = bitcast i64 %545 to <2 x i32>
  %549 = shufflevector <2 x i32> %548, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %550 = shufflevector <4 x i32> %547, <4 x i32> %549, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %551 = fcmp ole <4 x float> %540, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %552 = sext <4 x i1> %551 to <4 x i32>
  %553 = bitcast <4 x i32> %552 to <2 x i64>
  %554 = extractelement <2 x i64> %553, i32 0
  %555 = extractelement <2 x i64> %553, i32 1
  %556 = bitcast i64 %554 to <2 x i32>
  %557 = shufflevector <2 x i32> %556, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %558 = bitcast i64 %555 to <2 x i32>
  %559 = shufflevector <2 x i32> %558, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %560 = shufflevector <4 x i32> %557, <4 x i32> %559, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %561 = and <4 x i32> %560, %550
  %562 = bitcast <4 x i32> %561 to <2 x i64>
  %563 = extractelement <2 x i64> %562, i32 0
  %564 = extractelement <2 x i64> %562, i32 1
  %565 = bitcast i64 %563 to <2 x i32>
  %566 = shufflevector <2 x i32> %565, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %567 = bitcast i64 %564 to <2 x i32>
  %568 = shufflevector <2 x i32> %567, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %569 = shufflevector <4 x i32> %566, <4 x i32> %568, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %570 = load <4 x float>, <4 x float>* %9, align 16
  %571 = fcmp oge <4 x float> %570, zeroinitializer
  %572 = sext <4 x i1> %571 to <4 x i32>
  %573 = bitcast <4 x i32> %572 to <2 x i64>
  %574 = extractelement <2 x i64> %573, i32 0
  %575 = extractelement <2 x i64> %573, i32 1
  %576 = bitcast i64 %574 to <2 x i32>
  %577 = shufflevector <2 x i32> %576, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %578 = bitcast i64 %575 to <2 x i32>
  %579 = shufflevector <2 x i32> %578, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %580 = shufflevector <4 x i32> %577, <4 x i32> %579, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %581 = fcmp ole <4 x float> %570, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %582 = sext <4 x i1> %581 to <4 x i32>
  %583 = bitcast <4 x i32> %582 to <2 x i64>
  %584 = extractelement <2 x i64> %583, i32 0
  %585 = extractelement <2 x i64> %583, i32 1
  %586 = bitcast i64 %584 to <2 x i32>
  %587 = shufflevector <2 x i32> %586, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %588 = bitcast i64 %585 to <2 x i32>
  %589 = shufflevector <2 x i32> %588, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %590 = shufflevector <4 x i32> %587, <4 x i32> %589, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %591 = and <4 x i32> %590, %580
  %592 = bitcast <4 x i32> %591 to <2 x i64>
  %593 = extractelement <2 x i64> %592, i32 0
  %594 = extractelement <2 x i64> %592, i32 1
  %595 = bitcast i64 %593 to <2 x i32>
  %596 = shufflevector <2 x i32> %595, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %597 = bitcast i64 %594 to <2 x i32>
  %598 = shufflevector <2 x i32> %597, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %599 = shufflevector <4 x i32> %596, <4 x i32> %598, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %600 = and <4 x i32> %599, %569
  %601 = bitcast <4 x i32> %600 to <2 x i64>
  %602 = extractelement <2 x i64> %601, i32 0
  %603 = extractelement <2 x i64> %601, i32 1
  %604 = bitcast i64 %602 to <2 x i32>
  %605 = shufflevector <2 x i32> %604, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %606 = bitcast i64 %603 to <2 x i32>
  %607 = shufflevector <2 x i32> %606, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %608 = shufflevector <4 x i32> %605, <4 x i32> %607, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %609 = load <4 x float>, <4 x float>* %11, align 16
  %610 = fcmp oge <4 x float> %609, zeroinitializer
  %611 = sext <4 x i1> %610 to <4 x i32>
  %612 = bitcast <4 x i32> %611 to <2 x i64>
  %613 = extractelement <2 x i64> %612, i32 0
  %614 = extractelement <2 x i64> %612, i32 1
  %615 = bitcast i64 %613 to <2 x i32>
  %616 = shufflevector <2 x i32> %615, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %617 = bitcast i64 %614 to <2 x i32>
  %618 = shufflevector <2 x i32> %617, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %619 = shufflevector <4 x i32> %616, <4 x i32> %618, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %620 = fcmp ole <4 x float> %609, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %621 = sext <4 x i1> %620 to <4 x i32>
  %622 = bitcast <4 x i32> %621 to <2 x i64>
  %623 = extractelement <2 x i64> %622, i32 0
  %624 = extractelement <2 x i64> %622, i32 1
  %625 = bitcast i64 %623 to <2 x i32>
  %626 = shufflevector <2 x i32> %625, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %627 = bitcast i64 %624 to <2 x i32>
  %628 = shufflevector <2 x i32> %627, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %629 = shufflevector <4 x i32> %626, <4 x i32> %628, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %630 = and <4 x i32> %629, %619
  %631 = bitcast <4 x i32> %630 to <2 x i64>
  %632 = extractelement <2 x i64> %631, i32 0
  %633 = extractelement <2 x i64> %631, i32 1
  %634 = bitcast i64 %632 to <2 x i32>
  %635 = shufflevector <2 x i32> %634, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %636 = bitcast i64 %633 to <2 x i32>
  %637 = shufflevector <2 x i32> %636, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %638 = shufflevector <4 x i32> %635, <4 x i32> %637, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %639 = and <4 x i32> %608, %638
  %640 = bitcast <4 x i32> %639 to <2 x i64>
  %641 = extractelement <2 x i64> %640, i32 0
  %642 = extractelement <2 x i64> %640, i32 1
  %643 = bitcast i64 %641 to <2 x i32>
  %644 = shufflevector <2 x i32> %643, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %645 = bitcast i64 %642 to <2 x i32>
  %646 = shufflevector <2 x i32> %645, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %647 = shufflevector <4 x i32> %644, <4 x i32> %646, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %648 = load <4 x float>, <4 x float>* %13, align 16
  %649 = fcmp oge <4 x float> %648, zeroinitializer
  %650 = sext <4 x i1> %649 to <4 x i32>
  %651 = bitcast <4 x i32> %650 to <2 x i64>
  %652 = extractelement <2 x i64> %651, i32 0
  %653 = extractelement <2 x i64> %651, i32 1
  %654 = bitcast i64 %652 to <2 x i32>
  %655 = shufflevector <2 x i32> %654, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %656 = bitcast i64 %653 to <2 x i32>
  %657 = shufflevector <2 x i32> %656, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %658 = shufflevector <4 x i32> %655, <4 x i32> %657, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %659 = fcmp ole <4 x float> %648, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %660 = sext <4 x i1> %659 to <4 x i32>
  %661 = bitcast <4 x i32> %660 to <2 x i64>
  %662 = extractelement <2 x i64> %661, i32 0
  %663 = extractelement <2 x i64> %661, i32 1
  %664 = bitcast i64 %662 to <2 x i32>
  %665 = shufflevector <2 x i32> %664, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %666 = bitcast i64 %663 to <2 x i32>
  %667 = shufflevector <2 x i32> %666, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %668 = shufflevector <4 x i32> %665, <4 x i32> %667, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %669 = and <4 x i32> %668, %658
  %670 = bitcast <4 x i32> %669 to <2 x i64>
  %671 = extractelement <2 x i64> %670, i32 0
  %672 = extractelement <2 x i64> %670, i32 1
  %673 = bitcast i64 %671 to <2 x i32>
  %674 = shufflevector <2 x i32> %673, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %675 = bitcast i64 %672 to <2 x i32>
  %676 = shufflevector <2 x i32> %675, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %677 = shufflevector <4 x i32> %674, <4 x i32> %676, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %678 = load <4 x float>, <4 x float>* %15, align 16
  %679 = fcmp oge <4 x float> %678, zeroinitializer
  %680 = sext <4 x i1> %679 to <4 x i32>
  %681 = bitcast <4 x i32> %680 to <2 x i64>
  %682 = extractelement <2 x i64> %681, i32 0
  %683 = extractelement <2 x i64> %681, i32 1
  %684 = bitcast i64 %682 to <2 x i32>
  %685 = shufflevector <2 x i32> %684, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %686 = bitcast i64 %683 to <2 x i32>
  %687 = shufflevector <2 x i32> %686, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %688 = shufflevector <4 x i32> %685, <4 x i32> %687, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %689 = fcmp ole <4 x float> %678, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %690 = sext <4 x i1> %689 to <4 x i32>
  %691 = bitcast <4 x i32> %690 to <2 x i64>
  %692 = extractelement <2 x i64> %691, i32 0
  %693 = extractelement <2 x i64> %691, i32 1
  %694 = bitcast i64 %692 to <2 x i32>
  %695 = shufflevector <2 x i32> %694, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %696 = bitcast i64 %693 to <2 x i32>
  %697 = shufflevector <2 x i32> %696, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %698 = shufflevector <4 x i32> %695, <4 x i32> %697, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %699 = and <4 x i32> %698, %688
  %700 = bitcast <4 x i32> %699 to <2 x i64>
  %701 = extractelement <2 x i64> %700, i32 0
  %702 = extractelement <2 x i64> %700, i32 1
  %703 = bitcast i64 %701 to <2 x i32>
  %704 = shufflevector <2 x i32> %703, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %705 = bitcast i64 %702 to <2 x i32>
  %706 = shufflevector <2 x i32> %705, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %707 = shufflevector <4 x i32> %704, <4 x i32> %706, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %708 = and <4 x i32> %707, %677
  %709 = bitcast <4 x i32> %708 to <2 x i64>
  %710 = extractelement <2 x i64> %709, i32 0
  %711 = extractelement <2 x i64> %709, i32 1
  %712 = bitcast i64 %710 to <2 x i32>
  %713 = shufflevector <2 x i32> %712, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %714 = bitcast i64 %711 to <2 x i32>
  %715 = shufflevector <2 x i32> %714, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %716 = shufflevector <4 x i32> %713, <4 x i32> %715, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %717 = load <4 x float>, <4 x float>* %17, align 16
  %718 = fcmp oge <4 x float> %717, zeroinitializer
  %719 = sext <4 x i1> %718 to <4 x i32>
  %720 = bitcast <4 x i32> %719 to <2 x i64>
  %721 = extractelement <2 x i64> %720, i32 0
  %722 = extractelement <2 x i64> %720, i32 1
  %723 = bitcast i64 %721 to <2 x i32>
  %724 = shufflevector <2 x i32> %723, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %725 = bitcast i64 %722 to <2 x i32>
  %726 = shufflevector <2 x i32> %725, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %727 = shufflevector <4 x i32> %724, <4 x i32> %726, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %728 = fcmp ole <4 x float> %717, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %729 = sext <4 x i1> %728 to <4 x i32>
  %730 = bitcast <4 x i32> %729 to <2 x i64>
  %731 = extractelement <2 x i64> %730, i32 0
  %732 = extractelement <2 x i64> %730, i32 1
  %733 = bitcast i64 %731 to <2 x i32>
  %734 = shufflevector <2 x i32> %733, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %735 = bitcast i64 %732 to <2 x i32>
  %736 = shufflevector <2 x i32> %735, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %737 = shufflevector <4 x i32> %734, <4 x i32> %736, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %738 = and <4 x i32> %737, %727
  %739 = bitcast <4 x i32> %738 to <2 x i64>
  %740 = extractelement <2 x i64> %739, i32 0
  %741 = extractelement <2 x i64> %739, i32 1
  %742 = bitcast i64 %740 to <2 x i32>
  %743 = shufflevector <2 x i32> %742, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %744 = bitcast i64 %741 to <2 x i32>
  %745 = shufflevector <2 x i32> %744, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %746 = shufflevector <4 x i32> %743, <4 x i32> %745, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %747 = and <4 x i32> %716, %746
  %748 = bitcast <4 x i32> %747 to <2 x i64>
  %749 = extractelement <2 x i64> %748, i32 0
  %750 = extractelement <2 x i64> %748, i32 1
  %751 = bitcast i64 %749 to <2 x i32>
  %752 = shufflevector <2 x i32> %751, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %753 = bitcast i64 %750 to <2 x i32>
  %754 = shufflevector <2 x i32> %753, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %755 = shufflevector <4 x i32> %752, <4 x i32> %754, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %756 = or <4 x i32> %755, %647
  %757 = bitcast <4 x i32> %756 to <2 x i64>
  %758 = extractelement <2 x i64> %757, i32 0
  %759 = extractelement <2 x i64> %757, i32 1
  %760 = trunc i64 %758 to i32
  %761 = icmp ne i32 %760, 0
  %762 = icmp ugt i64 %758, 4294967295
  %763 = and i1 %762, %761
  br i1 %763, label %764, label %780

764:                                              ; preds = %539
  %765 = trunc i64 %759 to i32
  %766 = icmp ne i32 %765, 0
  %767 = icmp ugt i64 %759, 4294967295
  %768 = and i1 %767, %766
  br i1 %768, label %769, label %780

769:                                              ; preds = %764
  %770 = bitcast %struct.DrawQuad* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %770, i8* nonnull align 16 %487, i64 16, i1 false) #10
  %771 = bitcast float* %481 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %771, i8* nonnull align 16 %502, i64 16, i1 false) #10
  %772 = load i32, i32* %19, align 4
  %773 = icmp eq i32 %772, 3
  br i1 %773, label %774, label %777

774:                                              ; preds = %769
  %775 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 0, i32 2, i64 0
  %776 = bitcast float* %775 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %776, align 4
  br label %777

777:                                              ; preds = %769, %774
  store i32 0, i32* %19, align 4
  %778 = select i1 %1, i32 15, i32 0
  %779 = getelementptr inbounds %struct.DrawQuad, %struct.DrawQuad* %2, i64 0, i32 2
  store i32 %778, i32* %779, align 4
  br label %780

780:                                              ; preds = %539, %777, %764, %475, %535
  %781 = phi i1 [ false, %535 ], [ false, %475 ], [ true, %777 ], [ false, %764 ], [ false, %539 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %525) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %523) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %521) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %519) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %517) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %516) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %502) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %487) #10
  br label %782

782:                                              ; preds = %472, %463, %467, %780
  %783 = phi i1 [ %781, %780 ], [ true, %467 ], [ true, %463 ], [ false, %472 ]
  ret i1 %783
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZL18barycentric_coordsffffffRKN4skvx3VecILi4EfEES3_PS1_S4_S4_(float, float, float, float, float, float, %"struct.skvx::Vec"* nocapture readonly dereferenceable(16), %"struct.skvx::Vec"* nocapture readonly dereferenceable(16), %"struct.skvx::Vec"* nocapture, %"struct.skvx::Vec"* nocapture, %"struct.skvx::Vec"* nocapture) unnamed_addr #4 {
  %12 = fcmp olt float %0, %2
  %13 = select i1 %12, float %2, float %0
  %14 = fcmp olt float %13, %4
  %15 = select i1 %14, float %4, float %13
  %16 = fcmp olt float %2, %0
  %17 = select i1 %16, float %2, float %0
  %18 = fcmp ogt float %17, %4
  %19 = select i1 %18, float %4, float %17
  %20 = fsub float %15, %19
  %21 = fcmp olt float %1, %3
  %22 = select i1 %21, float %3, float %1
  %23 = fcmp olt float %22, %5
  %24 = select i1 %23, float %5, float %22
  %25 = fcmp olt float %3, %1
  %26 = select i1 %25, float %3, float %1
  %27 = fcmp ogt float %26, %5
  %28 = select i1 %27, float %5, float %26
  %29 = fsub float %24, %28
  %30 = fcmp ogt float %20, 1.000000e+07
  %31 = insertelement <2 x float> undef, float %2, i32 0
  %32 = insertelement <2 x float> %31, float %4, i32 1
  br i1 %30, label %33, label %39

33:                                               ; preds = %11
  %34 = fdiv float 1.000000e+07, %20
  %35 = fmul float %34, %0
  %36 = insertelement <2 x float> undef, float %34, i32 0
  %37 = shufflevector <2 x float> %36, <2 x float> undef, <2 x i32> zeroinitializer
  %38 = fmul <2 x float> %37, %32
  br label %39

39:                                               ; preds = %11, %33
  %40 = phi float [ %35, %33 ], [ %0, %11 ]
  %41 = phi float [ %34, %33 ], [ 1.000000e+00, %11 ]
  %42 = phi <2 x float> [ %38, %33 ], [ %32, %11 ]
  %43 = fcmp ogt float %29, 1.000000e+07
  %44 = insertelement <2 x float> undef, float %3, i32 0
  %45 = insertelement <2 x float> %44, float %5, i32 1
  br i1 %43, label %46, label %52

46:                                               ; preds = %39
  %47 = fdiv float 1.000000e+07, %29
  %48 = fmul float %47, %1
  %49 = insertelement <2 x float> undef, float %47, i32 0
  %50 = shufflevector <2 x float> %49, <2 x float> undef, <2 x i32> zeroinitializer
  %51 = fmul <2 x float> %50, %45
  br label %52

52:                                               ; preds = %39, %46
  %53 = phi float [ %48, %46 ], [ %1, %39 ]
  %54 = phi float [ %47, %46 ], [ 1.000000e+00, %39 ]
  %55 = phi <2 x float> [ %51, %46 ], [ %45, %39 ]
  %56 = insertelement <2 x float> undef, float %40, i32 0
  %57 = shufflevector <2 x float> %56, <2 x float> undef, <2 x i32> zeroinitializer
  %58 = fsub <2 x float> %42, %57
  %59 = insertelement <2 x float> undef, float %53, i32 0
  %60 = shufflevector <2 x float> %59, <2 x float> undef, <2 x i32> zeroinitializer
  %61 = fsub <2 x float> %55, %60
  %62 = extractelement <2 x float> %58, i32 1
  %63 = fmul float %62, %62
  %64 = extractelement <2 x float> %61, i32 1
  %65 = fmul float %64, %64
  %66 = fadd float %63, %65
  %67 = shufflevector <2 x float> %58, <2 x float> undef, <2 x i32> zeroinitializer
  %68 = fmul <2 x float> %67, %58
  %69 = shufflevector <2 x float> %61, <2 x float> undef, <2 x i32> zeroinitializer
  %70 = fmul <2 x float> %69, %61
  %71 = fadd <2 x float> %68, %70
  %72 = insertelement <2 x float> %71, float %66, i32 0
  %73 = fmul <2 x float> %71, %72
  %74 = extractelement <2 x float> %73, i32 0
  %75 = extractelement <2 x float> %73, i32 1
  %76 = fsub float %74, %75
  %77 = tail call float @llvm.fabs.f32(float %76) #10
  %78 = fcmp ugt float %77, 3.125000e-02
  br i1 %78, label %79, label %142

79:                                               ; preds = %52
  %80 = fdiv float 1.000000e+00, %76
  %81 = insertelement <4 x float> undef, float %41, i32 0
  %82 = shufflevector <4 x float> %81, <4 x float> undef, <4 x i32> zeroinitializer
  %83 = bitcast %"struct.skvx::Vec"* %6 to <4 x float>*
  %84 = load <4 x float>, <4 x float>* %83, align 16
  %85 = fmul <4 x float> %82, %84
  %86 = insertelement <4 x float> undef, float %40, i32 0
  %87 = shufflevector <4 x float> %86, <4 x float> undef, <4 x i32> zeroinitializer
  %88 = fsub <4 x float> %85, %87
  %89 = insertelement <4 x float> undef, float %54, i32 0
  %90 = shufflevector <4 x float> %89, <4 x float> undef, <4 x i32> zeroinitializer
  %91 = bitcast %"struct.skvx::Vec"* %7 to <4 x float>*
  %92 = load <4 x float>, <4 x float>* %91, align 16
  %93 = fmul <4 x float> %90, %92
  %94 = insertelement <4 x float> undef, float %53, i32 0
  %95 = shufflevector <4 x float> %94, <4 x float> undef, <4 x i32> zeroinitializer
  %96 = fsub <4 x float> %93, %95
  %97 = shufflevector <2 x float> %58, <2 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %98 = fmul <4 x float> %97, %88
  %99 = shufflevector <2 x float> %61, <2 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %100 = fmul <4 x float> %99, %96
  %101 = fadd <4 x float> %98, %100
  %102 = shufflevector <2 x float> %58, <2 x float> undef, <4 x i32> zeroinitializer
  %103 = fmul <4 x float> %102, %88
  %104 = shufflevector <2 x float> %61, <2 x float> undef, <4 x i32> zeroinitializer
  %105 = fmul <4 x float> %104, %96
  %106 = fadd <4 x float> %103, %105
  %107 = shufflevector <2 x float> %71, <2 x float> undef, <4 x i32> zeroinitializer
  %108 = fmul <4 x float> %107, %101
  %109 = shufflevector <2 x float> %71, <2 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %110 = fmul <4 x float> %109, %106
  %111 = fsub <4 x float> %108, %110
  %112 = insertelement <4 x float> undef, float %80, i32 0
  %113 = shufflevector <4 x float> %112, <4 x float> undef, <4 x i32> zeroinitializer
  %114 = fmul <4 x float> %113, %111
  %115 = shufflevector <4 x float> %114, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %116 = shufflevector <4 x float> %114, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %117 = bitcast %"struct.skvx::Vec"* %8 to <2 x float>*
  store <2 x float> %115, <2 x float>* %117, align 16
  %118 = getelementptr inbounds %"struct.skvx::Vec", %"struct.skvx::Vec"* %8, i64 0, i32 1
  %119 = bitcast %"struct.skvx::Vec.0"* %118 to <2 x float>*
  store <2 x float> %116, <2 x float>* %119, align 8
  %120 = insertelement <4 x float> undef, float %66, i32 0
  %121 = shufflevector <4 x float> %120, <4 x float> undef, <4 x i32> zeroinitializer
  %122 = fmul <4 x float> %121, %106
  %123 = fmul <4 x float> %109, %101
  %124 = fsub <4 x float> %122, %123
  %125 = fmul <4 x float> %113, %124
  %126 = shufflevector <4 x float> %125, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %127 = shufflevector <4 x float> %125, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %128 = bitcast %"struct.skvx::Vec"* %9 to <2 x float>*
  store <2 x float> %126, <2 x float>* %128, align 16
  %129 = getelementptr inbounds %"struct.skvx::Vec", %"struct.skvx::Vec"* %9, i64 0, i32 1
  %130 = bitcast %"struct.skvx::Vec.0"* %129 to <2 x float>*
  store <2 x float> %127, <2 x float>* %130, align 8
  %131 = bitcast %"struct.skvx::Vec"* %8 to <4 x float>*
  %132 = load <4 x float>, <4 x float>* %131, align 16
  %133 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %132
  %134 = bitcast %"struct.skvx::Vec"* %9 to <4 x float>*
  %135 = load <4 x float>, <4 x float>* %134, align 16
  %136 = fsub <4 x float> %133, %135
  %137 = shufflevector <4 x float> %136, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %138 = shufflevector <4 x float> %136, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %139 = bitcast %"struct.skvx::Vec"* %10 to <2 x float>*
  store <2 x float> %137, <2 x float>* %139, align 16
  %140 = getelementptr inbounds %"struct.skvx::Vec", %"struct.skvx::Vec"* %10, i64 0, i32 1
  %141 = bitcast %"struct.skvx::Vec.0"* %140 to <2 x float>*
  store <2 x float> %138, <2 x float>* %141, align 8
  br label %142

142:                                              ; preds = %52, %79
  %143 = phi i1 [ true, %79 ], [ false, %52 ]
  ret i1 %143
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11GrQuadUtils18TessellationHelper11EdgeVectors5resetERKN4skvx3VecILi4EfEES6_S6_N6GrQuad4TypeE(%"struct.GrQuadUtils::TessellationHelper::EdgeVectors"*, %"struct.skvx::Vec"* nocapture readonly dereferenceable(16), %"struct.skvx::Vec"* nocapture readonly dereferenceable(16), %"struct.skvx::Vec"* nocapture readonly dereferenceable(16), i32) local_unnamed_addr #4 align 2 {
  %6 = icmp eq i32 %4, 3
  br i1 %6, label %7, label %28

7:                                                ; preds = %5
  %8 = bitcast %"struct.skvx::Vec"* %3 to <4 x float>*
  %9 = load <4 x float>, <4 x float>* %8, align 16
  %10 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %9
  %11 = bitcast %"struct.skvx::Vec"* %1 to <4 x float>*
  %12 = load <4 x float>, <4 x float>* %11, align 16
  %13 = fmul <4 x float> %12, %10
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %15 = shufflevector <4 x float> %13, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %16 = bitcast %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %0 to <2 x float>*
  store <2 x float> %14, <2 x float>* %16, align 16
  %17 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %0, i64 0, i32 0, i32 1
  %18 = bitcast %"struct.skvx::Vec.0"* %17 to <2 x float>*
  store <2 x float> %15, <2 x float>* %18, align 8
  %19 = bitcast %"struct.skvx::Vec"* %2 to <4 x float>*
  %20 = load <4 x float>, <4 x float>* %19, align 16
  %21 = fmul <4 x float> %10, %20
  %22 = shufflevector <4 x float> %21, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %23 = shufflevector <4 x float> %21, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %24 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %0, i64 0, i32 1
  %25 = bitcast %"struct.skvx::Vec"* %24 to <2 x float>*
  store <2 x float> %22, <2 x float>* %25, align 16
  %26 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %0, i64 0, i32 1, i32 1
  %27 = bitcast %"struct.skvx::Vec.0"* %26 to <2 x float>*
  store <2 x float> %23, <2 x float>* %27, align 8
  br label %34

28:                                               ; preds = %5
  %29 = bitcast %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %0 to i8*
  %30 = bitcast %"struct.skvx::Vec"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %29, i8* align 16 %30, i64 16, i1 false)
  %31 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %0, i64 0, i32 1
  %32 = bitcast %"struct.skvx::Vec"* %31 to i8*
  %33 = bitcast %"struct.skvx::Vec"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %32, i8* align 16 %33, i64 16, i1 false)
  br label %34

34:                                               ; preds = %28, %7
  %35 = bitcast %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %0 to <4 x float>*
  %36 = load <4 x float>, <4 x float>* %35, align 16
  %37 = shufflevector <4 x float> %36, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %38 = fsub <4 x float> %37, %36
  %39 = shufflevector <4 x float> %38, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %40 = shufflevector <4 x float> %38, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %41 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %0, i64 0, i32 2
  %42 = bitcast %"struct.skvx::Vec"* %41 to <2 x float>*
  store <2 x float> %39, <2 x float>* %42, align 16
  %43 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %0, i64 0, i32 2, i32 1
  %44 = bitcast %"struct.skvx::Vec.0"* %43 to <2 x float>*
  store <2 x float> %40, <2 x float>* %44, align 8
  %45 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %0, i64 0, i32 1
  %46 = bitcast %"struct.skvx::Vec"* %45 to <4 x float>*
  %47 = load <4 x float>, <4 x float>* %46, align 16
  %48 = shufflevector <4 x float> %47, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %49 = fsub <4 x float> %48, %47
  %50 = shufflevector <4 x float> %49, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %51 = shufflevector <4 x float> %49, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %52 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %0, i64 0, i32 3
  %53 = bitcast %"struct.skvx::Vec"* %52 to <2 x float>*
  store <2 x float> %50, <2 x float>* %53, align 16
  %54 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %0, i64 0, i32 3, i32 1
  %55 = bitcast %"struct.skvx::Vec.0"* %54 to <2 x float>*
  store <2 x float> %51, <2 x float>* %55, align 8
  %56 = bitcast %"struct.skvx::Vec"* %41 to <4 x float>*
  %57 = load <4 x float>, <4 x float>* %56, align 16
  %58 = fmul <4 x float> %57, %57
  %59 = bitcast %"struct.skvx::Vec"* %52 to <4 x float>*
  %60 = load <4 x float>, <4 x float>* %59, align 16
  %61 = fmul <4 x float> %60, %60
  %62 = fadd <4 x float> %58, %61
  %63 = extractelement <4 x float> %62, i32 0
  %64 = tail call float @sqrtf(float %63) #10
  %65 = extractelement <4 x float> %62, i32 1
  %66 = tail call float @sqrtf(float %65) #10
  %67 = extractelement <4 x float> %62, i32 2
  %68 = tail call float @sqrtf(float %67) #10
  %69 = extractelement <4 x float> %62, i32 3
  %70 = tail call float @sqrtf(float %69) #10
  %71 = insertelement <4 x float> undef, float %64, i32 0
  %72 = insertelement <4 x float> %71, float %66, i32 1
  %73 = insertelement <4 x float> undef, float %68, i32 2
  %74 = insertelement <4 x float> %73, float %70, i32 3
  %75 = shufflevector <4 x float> %72, <4 x float> %74, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %76 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %75
  %77 = shufflevector <4 x float> %76, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %78 = shufflevector <4 x float> %76, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %79 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %0, i64 0, i32 4
  %80 = bitcast %"struct.skvx::Vec"* %79 to <2 x float>*
  store <2 x float> %77, <2 x float>* %80, align 16
  %81 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %0, i64 0, i32 4, i32 1
  %82 = bitcast %"struct.skvx::Vec.0"* %81 to <2 x float>*
  store <2 x float> %78, <2 x float>* %82, align 8
  %83 = load <4 x float>, <4 x float>* %56, align 16
  %84 = bitcast %"struct.skvx::Vec"* %79 to <4 x float>*
  %85 = load <4 x float>, <4 x float>* %84, align 16
  %86 = fmul <4 x float> %83, %85
  %87 = shufflevector <4 x float> %86, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %88 = shufflevector <4 x float> %86, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %87, <2 x float>* %42, align 16
  store <2 x float> %88, <2 x float>* %44, align 8
  %89 = load <4 x float>, <4 x float>* %59, align 16
  %90 = fmul <4 x float> %85, %89
  %91 = shufflevector <4 x float> %90, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %92 = shufflevector <4 x float> %90, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %91, <2 x float>* %53, align 16
  store <2 x float> %92, <2 x float>* %55, align 8
  %93 = icmp slt i32 %4, 2
  br i1 %93, label %94, label %99

94:                                               ; preds = %34
  %95 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %96 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %97 = bitcast float* %95 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %97, i8 0, i64 16, i1 false)
  %98 = bitcast float* %96 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %98, align 16
  br label %137

99:                                               ; preds = %34
  %100 = load <4 x float>, <4 x float>* %56, align 16
  %101 = shufflevector <4 x float> %100, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %102 = fmul <4 x float> %100, %101
  %103 = load <4 x float>, <4 x float>* %59, align 16
  %104 = shufflevector <4 x float> %103, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %105 = fmul <4 x float> %103, %104
  %106 = fadd <4 x float> %102, %105
  %107 = shufflevector <4 x float> %106, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %108 = shufflevector <4 x float> %106, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %109 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %0, i64 0, i32 5
  %110 = bitcast %"struct.skvx::Vec"* %109 to <2 x float>*
  store <2 x float> %107, <2 x float>* %110, align 16
  %111 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %0, i64 0, i32 5, i32 1
  %112 = bitcast %"struct.skvx::Vec.0"* %111 to <2 x float>*
  store <2 x float> %108, <2 x float>* %112, align 8
  %113 = bitcast %"struct.skvx::Vec"* %109 to <4 x float>*
  %114 = load <4 x float>, <4 x float>* %113, align 16
  %115 = fmul <4 x float> %114, %114
  %116 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %115
  %117 = extractelement <4 x float> %116, i32 0
  %118 = tail call float @sqrtf(float %117) #10
  %119 = extractelement <4 x float> %116, i32 1
  %120 = tail call float @sqrtf(float %119) #10
  %121 = extractelement <4 x float> %116, i32 2
  %122 = tail call float @sqrtf(float %121) #10
  %123 = extractelement <4 x float> %116, i32 3
  %124 = tail call float @sqrtf(float %123) #10
  %125 = insertelement <4 x float> undef, float %118, i32 0
  %126 = insertelement <4 x float> %125, float %120, i32 1
  %127 = insertelement <4 x float> undef, float %122, i32 2
  %128 = insertelement <4 x float> %127, float %124, i32 3
  %129 = shufflevector <4 x float> %126, <4 x float> %128, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %130 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %129
  %131 = shufflevector <4 x float> %130, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %132 = shufflevector <4 x float> %130, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %133 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %0, i64 0, i32 6
  %134 = bitcast %"struct.skvx::Vec"* %133 to <2 x float>*
  store <2 x float> %131, <2 x float>* %134, align 16
  %135 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %0, i64 0, i32 6, i32 1
  %136 = bitcast %"struct.skvx::Vec.0"* %135 to <2 x float>*
  store <2 x float> %132, <2 x float>* %136, align 8
  br label %137

137:                                              ; preds = %99, %94
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11GrQuadUtils18TessellationHelper13EdgeEquations5resetERKNS0_11EdgeVectorsE(%"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* nocapture, %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* nocapture readonly dereferenceable(112)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %1, i64 0, i32 2
  %4 = bitcast %"struct.skvx::Vec"* %3 to <4 x float>*
  %5 = load <4 x float>, <4 x float>* %4, align 16
  %6 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %1, i64 0, i32 3
  %7 = bitcast %"struct.skvx::Vec"* %6 to <4 x float>*
  %8 = load <4 x float>, <4 x float>* %7, align 16
  %9 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %1, i64 0, i32 4
  %10 = bitcast %"struct.skvx::Vec"* %9 to <4 x float>*
  %11 = load <4 x float>, <4 x float>* %10, align 16
  %12 = fcmp oge <4 x float> %11, <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>
  %13 = sext <4 x i1> %12 to <4 x i32>
  %14 = bitcast <4 x i32> %13 to <2 x i64>
  %15 = extractelement <2 x i64> %14, i32 0
  %16 = extractelement <2 x i64> %14, i32 1
  %17 = bitcast i64 %15 to <2 x i32>
  %18 = shufflevector <2 x i32> %17, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %19 = bitcast i64 %16 to <2 x i32>
  %20 = shufflevector <2 x i32> %19, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %21 = shufflevector <4 x i32> %18, <4 x i32> %20, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %22 = extractelement <2 x i32> %17, i32 0
  %23 = extractelement <2 x i32> %17, i32 1
  %24 = or i32 %23, %22
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %31

26:                                               ; preds = %2
  %27 = extractelement <2 x i32> %19, i32 0
  %28 = extractelement <2 x i32> %19, i32 1
  %29 = or i32 %28, %27
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %129, label %31

31:                                               ; preds = %26, %2
  %32 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %5
  %33 = shufflevector <4 x float> %32, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %34 = shufflevector <4 x float> %33, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %35 = shufflevector <4 x float> %33, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %36 = bitcast <2 x float> %34 to <2 x i32>
  %37 = bitcast <2 x float> %35 to <2 x i32>
  %38 = shufflevector <2 x i32> %36, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %39 = shufflevector <2 x i32> %37, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %40 = shufflevector <4 x i32> %38, <4 x i32> %39, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %41 = and <4 x i32> %21, %40
  %42 = bitcast <4 x i32> %41 to <2 x i64>
  %43 = extractelement <2 x i64> %42, i32 0
  %44 = extractelement <2 x i64> %42, i32 1
  %45 = bitcast i64 %43 to <2 x i32>
  %46 = shufflevector <2 x i32> %45, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %47 = bitcast i64 %44 to <2 x i32>
  %48 = shufflevector <2 x i32> %47, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %49 = shufflevector <4 x i32> %46, <4 x i32> %48, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %50 = bitcast <4 x i32> %21 to <2 x i64>
  %51 = xor <2 x i64> %50, <i64 -1, i64 -1>
  %52 = extractelement <2 x i64> %51, i32 0
  %53 = extractelement <2 x i64> %51, i32 1
  %54 = bitcast i64 %52 to <2 x i32>
  %55 = shufflevector <2 x i32> %54, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = bitcast i64 %53 to <2 x i32>
  %57 = shufflevector <2 x i32> %56, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %58 = shufflevector <4 x i32> %55, <4 x i32> %57, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %59 = bitcast <4 x float> %5 to <2 x i64>
  %60 = extractelement <2 x i64> %59, i32 0
  %61 = bitcast i64 %60 to <2 x i32>
  %62 = shufflevector <4 x float> %5, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %63 = bitcast <2 x float> %62 to <2 x i32>
  %64 = shufflevector <2 x i32> %61, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %65 = shufflevector <2 x i32> %63, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %66 = shufflevector <4 x i32> %64, <4 x i32> %65, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %67 = and <4 x i32> %58, %66
  %68 = bitcast <4 x i32> %67 to <2 x i64>
  %69 = extractelement <2 x i64> %68, i32 0
  %70 = extractelement <2 x i64> %68, i32 1
  %71 = bitcast i64 %69 to <2 x i32>
  %72 = shufflevector <2 x i32> %71, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %73 = bitcast i64 %70 to <2 x i32>
  %74 = shufflevector <2 x i32> %73, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %75 = shufflevector <4 x i32> %72, <4 x i32> %74, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %76 = or <4 x i32> %75, %49
  %77 = bitcast <4 x i32> %76 to <2 x i64>
  %78 = extractelement <2 x i64> %77, i32 0
  %79 = extractelement <2 x i64> %77, i32 1
  %80 = bitcast i64 %78 to <2 x float>
  %81 = shufflevector <2 x float> %80, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %82 = bitcast i64 %79 to <2 x float>
  %83 = shufflevector <2 x float> %82, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %84 = shufflevector <4 x float> %81, <4 x float> %83, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %85 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %8
  %86 = shufflevector <4 x float> %85, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %87 = shufflevector <4 x float> %86, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %88 = shufflevector <4 x float> %86, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %89 = bitcast <2 x float> %87 to <2 x i32>
  %90 = bitcast <2 x float> %88 to <2 x i32>
  %91 = shufflevector <2 x i32> %89, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %92 = shufflevector <2 x i32> %90, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %93 = shufflevector <4 x i32> %91, <4 x i32> %92, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %94 = and <4 x i32> %21, %93
  %95 = bitcast <4 x i32> %94 to <2 x i64>
  %96 = extractelement <2 x i64> %95, i32 0
  %97 = extractelement <2 x i64> %95, i32 1
  %98 = bitcast i64 %96 to <2 x i32>
  %99 = shufflevector <2 x i32> %98, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %100 = bitcast i64 %97 to <2 x i32>
  %101 = shufflevector <2 x i32> %100, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %102 = shufflevector <4 x i32> %99, <4 x i32> %101, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %103 = bitcast <4 x float> %8 to <2 x i64>
  %104 = extractelement <2 x i64> %103, i32 0
  %105 = bitcast i64 %104 to <2 x i32>
  %106 = shufflevector <4 x float> %8, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %107 = bitcast <2 x float> %106 to <2 x i32>
  %108 = shufflevector <2 x i32> %105, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %109 = shufflevector <2 x i32> %107, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %110 = shufflevector <4 x i32> %108, <4 x i32> %109, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %111 = and <4 x i32> %58, %110
  %112 = bitcast <4 x i32> %111 to <2 x i64>
  %113 = extractelement <2 x i64> %112, i32 0
  %114 = extractelement <2 x i64> %112, i32 1
  %115 = bitcast i64 %113 to <2 x i32>
  %116 = shufflevector <2 x i32> %115, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %117 = bitcast i64 %114 to <2 x i32>
  %118 = shufflevector <2 x i32> %117, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %119 = shufflevector <4 x i32> %116, <4 x i32> %118, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %120 = or <4 x i32> %119, %102
  %121 = bitcast <4 x i32> %120 to <2 x i64>
  %122 = extractelement <2 x i64> %121, i32 0
  %123 = extractelement <2 x i64> %121, i32 1
  %124 = bitcast i64 %122 to <2 x float>
  %125 = shufflevector <2 x float> %124, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %126 = bitcast i64 %123 to <2 x float>
  %127 = shufflevector <2 x float> %126, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %128 = shufflevector <4 x float> %125, <4 x float> %127, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %129

129:                                              ; preds = %26, %31
  %130 = phi <4 x float> [ %8, %26 ], [ %128, %31 ]
  %131 = phi <4 x float> [ %5, %26 ], [ %84, %31 ]
  %132 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %1, i64 0, i32 1
  %133 = bitcast %"struct.skvx::Vec"* %132 to <4 x float>*
  %134 = load <4 x float>, <4 x float>* %133, align 16
  %135 = fmul <4 x float> %131, %134
  %136 = bitcast %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %1 to <4 x float>*
  %137 = load <4 x float>, <4 x float>* %136, align 16
  %138 = fmul <4 x float> %130, %137
  %139 = fsub <4 x float> %135, %138
  %140 = shufflevector <4 x float> %137, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %141 = fmul <4 x float> %130, %140
  %142 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %131
  %143 = shufflevector <4 x float> %142, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %144 = shufflevector <4 x float> %142, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %145 = shufflevector <4 x float> %134, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %146 = fmul <4 x float> %145, %142
  %147 = fadd <4 x float> %146, %139
  %148 = fadd <4 x float> %141, %147
  %149 = fcmp olt <4 x float> %148, <float 0xBF847AE140000000, float 0xBF847AE140000000, float 0xBF847AE140000000, float 0xBF847AE140000000>
  %150 = sext <4 x i1> %149 to <4 x i32>
  %151 = bitcast <4 x i32> %150 to <2 x i64>
  %152 = extractelement <2 x i64> %151, i32 0
  %153 = extractelement <2 x i64> %151, i32 1
  %154 = lshr i64 %152, 32
  %155 = or i64 %154, %152
  %156 = trunc i64 %155 to i32
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %158, label %163

158:                                              ; preds = %129
  %159 = lshr i64 %153, 32
  %160 = or i64 %159, %153
  %161 = trunc i64 %160 to i32
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %179, label %163

163:                                              ; preds = %158, %129
  %164 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %130
  %165 = shufflevector <4 x float> %164, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %166 = shufflevector <4 x float> %164, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %167 = bitcast %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0 to <2 x float>*
  store <2 x float> %165, <2 x float>* %167, align 16
  %168 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 0, i32 1
  %169 = bitcast %"struct.skvx::Vec.0"* %168 to <2 x float>*
  store <2 x float> %166, <2 x float>* %169, align 8
  %170 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 1
  %171 = bitcast %"struct.skvx::Vec"* %170 to <4 x float>*
  store <4 x float> %131, <4 x float>* %171, align 16
  %172 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %139
  %173 = shufflevector <4 x float> %172, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %174 = shufflevector <4 x float> %172, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %175 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 2
  %176 = bitcast %"struct.skvx::Vec"* %175 to <2 x float>*
  store <2 x float> %173, <2 x float>* %176, align 16
  %177 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 2, i32 1
  %178 = bitcast %"struct.skvx::Vec.0"* %177 to <2 x float>*
  store <2 x float> %174, <2 x float>* %178, align 8
  br label %187

179:                                              ; preds = %158
  %180 = bitcast %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0 to <4 x float>*
  store <4 x float> %130, <4 x float>* %180, align 16
  %181 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 1
  %182 = bitcast %"struct.skvx::Vec"* %181 to <2 x float>*
  store <2 x float> %143, <2 x float>* %182, align 16
  %183 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 1, i32 1
  %184 = bitcast %"struct.skvx::Vec.0"* %183 to <2 x float>*
  store <2 x float> %144, <2 x float>* %184, align 8
  %185 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 2
  %186 = bitcast %"struct.skvx::Vec"* %185 to <4 x float>*
  store <4 x float> %139, <4 x float>* %186, align 16
  br label %187

187:                                              ; preds = %179, %163
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZNK11GrQuadUtils18TessellationHelper13EdgeEquations16estimateCoverageERKN4skvx3VecILi4EfEES6_(%"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* nocapture readonly, %"struct.skvx::Vec"* nocapture readonly dereferenceable(16), %"struct.skvx::Vec"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = insertelement <4 x float> undef, float %5, i32 0
  %7 = shufflevector <4 x float> %6, <4 x float> undef, <4 x i32> zeroinitializer
  %8 = bitcast %"struct.skvx::Vec"* %1 to <4 x float>*
  %9 = load <4 x float>, <4 x float>* %8, align 16
  %10 = fmul <4 x float> %9, %7
  %11 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %12 = load float, float* %11, align 4
  %13 = insertelement <4 x float> undef, float %12, i32 0
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <4 x i32> zeroinitializer
  %15 = bitcast %"struct.skvx::Vec"* %2 to <4 x float>*
  %16 = load <4 x float>, <4 x float>* %15, align 16
  %17 = fmul <4 x float> %16, %14
  %18 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %19 = load float, float* %18, align 4
  %20 = insertelement <4 x float> undef, float %19, i32 0
  %21 = shufflevector <4 x float> %20, <4 x float> undef, <4 x i32> zeroinitializer
  %22 = fadd <4 x float> %17, %21
  %23 = fadd <4 x float> %10, %22
  %24 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %25 = load float, float* %24, align 4
  %26 = insertelement <4 x float> undef, float %25, i32 0
  %27 = shufflevector <4 x float> %26, <4 x float> undef, <4 x i32> zeroinitializer
  %28 = fmul <4 x float> %9, %27
  %29 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 1, i32 0, i32 1, i32 0
  %30 = load float, float* %29, align 4
  %31 = insertelement <4 x float> undef, float %30, i32 0
  %32 = shufflevector <4 x float> %31, <4 x float> undef, <4 x i32> zeroinitializer
  %33 = fmul <4 x float> %16, %32
  %34 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 2, i32 0, i32 1, i32 0
  %35 = load float, float* %34, align 4
  %36 = insertelement <4 x float> undef, float %35, i32 0
  %37 = shufflevector <4 x float> %36, <4 x float> undef, <4 x i32> zeroinitializer
  %38 = fadd <4 x float> %37, %33
  %39 = fadd <4 x float> %28, %38
  %40 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %41 = load float, float* %40, align 4
  %42 = insertelement <4 x float> undef, float %41, i32 0
  %43 = shufflevector <4 x float> %42, <4 x float> undef, <4 x i32> zeroinitializer
  %44 = fmul <4 x float> %9, %43
  %45 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 1, i32 1, i32 0, i32 0
  %46 = load float, float* %45, align 4
  %47 = insertelement <4 x float> undef, float %46, i32 0
  %48 = shufflevector <4 x float> %47, <4 x float> undef, <4 x i32> zeroinitializer
  %49 = fmul <4 x float> %16, %48
  %50 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 2, i32 1, i32 0, i32 0
  %51 = load float, float* %50, align 4
  %52 = insertelement <4 x float> undef, float %51, i32 0
  %53 = shufflevector <4 x float> %52, <4 x float> undef, <4 x i32> zeroinitializer
  %54 = fadd <4 x float> %53, %49
  %55 = fadd <4 x float> %44, %54
  %56 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 0, i32 1, i32 1, i32 0
  %57 = load float, float* %56, align 4
  %58 = insertelement <4 x float> undef, float %57, i32 0
  %59 = shufflevector <4 x float> %58, <4 x float> undef, <4 x i32> zeroinitializer
  %60 = fmul <4 x float> %9, %59
  %61 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 1, i32 1, i32 1, i32 0
  %62 = load float, float* %61, align 4
  %63 = insertelement <4 x float> undef, float %62, i32 0
  %64 = shufflevector <4 x float> %63, <4 x float> undef, <4 x i32> zeroinitializer
  %65 = fmul <4 x float> %16, %64
  %66 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 2, i32 1, i32 1, i32 0
  %67 = load float, float* %66, align 4
  %68 = insertelement <4 x float> undef, float %67, i32 0
  %69 = shufflevector <4 x float> %68, <4 x float> undef, <4 x i32> zeroinitializer
  %70 = fadd <4 x float> %69, %65
  %71 = fadd <4 x float> %60, %70
  %72 = fadd <4 x float> %23, %71
  %73 = fcmp olt <4 x float> %72, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %74 = sext <4 x i1> %73 to <4 x i32>
  %75 = bitcast <4 x i32> %74 to <2 x i64>
  %76 = extractelement <2 x i64> %75, i32 0
  %77 = extractelement <2 x i64> %75, i32 1
  %78 = bitcast i64 %76 to <2 x i32>
  %79 = shufflevector <2 x i32> %78, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %80 = bitcast i64 %77 to <2 x i32>
  %81 = shufflevector <2 x i32> %80, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %82 = shufflevector <4 x i32> %79, <4 x i32> %81, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %83 = bitcast <4 x float> %72 to <2 x i64>
  %84 = extractelement <2 x i64> %83, i32 0
  %85 = bitcast i64 %84 to <2 x i32>
  %86 = shufflevector <4 x float> %72, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %87 = bitcast <2 x float> %86 to <2 x i32>
  %88 = shufflevector <2 x i32> %85, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %89 = shufflevector <2 x i32> %87, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %90 = shufflevector <4 x i32> %88, <4 x i32> %89, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %91 = and <4 x i32> %82, %90
  %92 = bitcast <4 x i32> %91 to <2 x i64>
  %93 = extractelement <2 x i64> %92, i32 0
  %94 = extractelement <2 x i64> %92, i32 1
  %95 = bitcast i64 %93 to <2 x i32>
  %96 = shufflevector <2 x i32> %95, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %97 = bitcast i64 %94 to <2 x i32>
  %98 = shufflevector <2 x i32> %97, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %99 = shufflevector <4 x i32> %96, <4 x i32> %98, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %100 = bitcast <4 x i32> %82 to <2 x i64>
  %101 = xor <2 x i64> %100, <i64 -1, i64 -1>
  %102 = extractelement <2 x i64> %101, i32 0
  %103 = extractelement <2 x i64> %101, i32 1
  %104 = bitcast i64 %102 to <2 x i32>
  %105 = shufflevector <2 x i32> %104, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %106 = bitcast i64 %103 to <2 x i32>
  %107 = shufflevector <2 x i32> %106, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %108 = shufflevector <4 x i32> %105, <4 x i32> %107, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %109 = bitcast <4 x i32> %108 to <2 x i64>
  %110 = and <2 x i64> %109, <i64 4575657222473777152, i64 4575657222473777152>
  %111 = extractelement <2 x i64> %110, i32 0
  %112 = extractelement <2 x i64> %110, i32 1
  %113 = bitcast i64 %111 to <2 x i32>
  %114 = shufflevector <2 x i32> %113, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %115 = bitcast i64 %112 to <2 x i32>
  %116 = shufflevector <2 x i32> %115, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %117 = shufflevector <4 x i32> %114, <4 x i32> %116, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %118 = or <4 x i32> %117, %99
  %119 = bitcast <4 x i32> %118 to <2 x i64>
  %120 = extractelement <2 x i64> %119, i32 0
  %121 = extractelement <2 x i64> %119, i32 1
  %122 = bitcast i64 %120 to <2 x float>
  %123 = bitcast i64 %121 to <2 x float>
  %124 = shufflevector <2 x float> %122, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %125 = shufflevector <2 x float> %123, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %126 = shufflevector <4 x float> %124, <4 x float> %125, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %127 = fcmp ogt <4 x float> %126, zeroinitializer
  %128 = sext <4 x i1> %127 to <4 x i32>
  %129 = bitcast <4 x i32> %128 to <2 x i64>
  %130 = extractelement <2 x i64> %129, i32 0
  %131 = extractelement <2 x i64> %129, i32 1
  %132 = bitcast i64 %130 to <2 x i32>
  %133 = shufflevector <2 x i32> %132, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %134 = bitcast i64 %131 to <2 x i32>
  %135 = shufflevector <2 x i32> %134, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %136 = shufflevector <4 x i32> %133, <4 x i32> %135, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %137 = bitcast <4 x float> %126 to <2 x i64>
  %138 = extractelement <2 x i64> %137, i32 0
  %139 = bitcast i64 %138 to <2 x i32>
  %140 = bitcast i64 %121 to <2 x i32>
  %141 = shufflevector <2 x i32> %139, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %142 = shufflevector <2 x i32> %140, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %143 = shufflevector <4 x i32> %141, <4 x i32> %142, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %144 = and <4 x i32> %136, %143
  %145 = bitcast <4 x i32> %144 to <2 x i64>
  %146 = extractelement <2 x i64> %145, i32 0
  %147 = extractelement <2 x i64> %145, i32 1
  %148 = bitcast i64 %146 to <2 x i32>
  %149 = shufflevector <2 x i32> %148, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %150 = bitcast i64 %147 to <2 x i32>
  %151 = shufflevector <2 x i32> %150, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %152 = shufflevector <4 x i32> %149, <4 x i32> %151, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %153 = bitcast <4 x i32> %152 to <2 x i64>
  %154 = extractelement <2 x i64> %153, i32 0
  %155 = extractelement <2 x i64> %153, i32 1
  %156 = bitcast i64 %154 to <2 x float>
  %157 = bitcast i64 %155 to <2 x float>
  %158 = shufflevector <2 x float> %156, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %159 = shufflevector <2 x float> %157, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %160 = shufflevector <4 x float> %158, <4 x float> %159, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %161 = fadd <4 x float> %39, %55
  %162 = fcmp olt <4 x float> %161, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %163 = sext <4 x i1> %162 to <4 x i32>
  %164 = bitcast <4 x i32> %163 to <2 x i64>
  %165 = extractelement <2 x i64> %164, i32 0
  %166 = extractelement <2 x i64> %164, i32 1
  %167 = bitcast i64 %165 to <2 x i32>
  %168 = shufflevector <2 x i32> %167, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %169 = bitcast i64 %166 to <2 x i32>
  %170 = shufflevector <2 x i32> %169, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %171 = shufflevector <4 x i32> %168, <4 x i32> %170, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %172 = bitcast <4 x float> %161 to <2 x i64>
  %173 = extractelement <2 x i64> %172, i32 0
  %174 = bitcast i64 %173 to <2 x i32>
  %175 = shufflevector <4 x float> %161, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %176 = bitcast <2 x float> %175 to <2 x i32>
  %177 = shufflevector <2 x i32> %174, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %178 = shufflevector <2 x i32> %176, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %179 = shufflevector <4 x i32> %177, <4 x i32> %178, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %180 = and <4 x i32> %171, %179
  %181 = bitcast <4 x i32> %180 to <2 x i64>
  %182 = extractelement <2 x i64> %181, i32 0
  %183 = extractelement <2 x i64> %181, i32 1
  %184 = bitcast i64 %182 to <2 x i32>
  %185 = shufflevector <2 x i32> %184, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %186 = bitcast i64 %183 to <2 x i32>
  %187 = shufflevector <2 x i32> %186, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %188 = shufflevector <4 x i32> %185, <4 x i32> %187, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %189 = bitcast <4 x i32> %171 to <2 x i64>
  %190 = xor <2 x i64> %189, <i64 -1, i64 -1>
  %191 = extractelement <2 x i64> %190, i32 0
  %192 = extractelement <2 x i64> %190, i32 1
  %193 = bitcast i64 %191 to <2 x i32>
  %194 = shufflevector <2 x i32> %193, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %195 = bitcast i64 %192 to <2 x i32>
  %196 = shufflevector <2 x i32> %195, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %197 = shufflevector <4 x i32> %194, <4 x i32> %196, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %198 = bitcast <4 x i32> %197 to <2 x i64>
  %199 = and <2 x i64> %198, <i64 4575657222473777152, i64 4575657222473777152>
  %200 = extractelement <2 x i64> %199, i32 0
  %201 = extractelement <2 x i64> %199, i32 1
  %202 = bitcast i64 %200 to <2 x i32>
  %203 = shufflevector <2 x i32> %202, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %204 = bitcast i64 %201 to <2 x i32>
  %205 = shufflevector <2 x i32> %204, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %206 = shufflevector <4 x i32> %203, <4 x i32> %205, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %207 = or <4 x i32> %206, %188
  %208 = bitcast <4 x i32> %207 to <2 x i64>
  %209 = extractelement <2 x i64> %208, i32 0
  %210 = extractelement <2 x i64> %208, i32 1
  %211 = bitcast i64 %209 to <2 x float>
  %212 = bitcast i64 %210 to <2 x float>
  %213 = shufflevector <2 x float> %211, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %214 = shufflevector <2 x float> %212, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %215 = shufflevector <4 x float> %213, <4 x float> %214, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %216 = fcmp ogt <4 x float> %215, zeroinitializer
  %217 = sext <4 x i1> %216 to <4 x i32>
  %218 = bitcast <4 x i32> %217 to <2 x i64>
  %219 = extractelement <2 x i64> %218, i32 0
  %220 = extractelement <2 x i64> %218, i32 1
  %221 = bitcast i64 %219 to <2 x i32>
  %222 = shufflevector <2 x i32> %221, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %223 = bitcast i64 %220 to <2 x i32>
  %224 = shufflevector <2 x i32> %223, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %225 = shufflevector <4 x i32> %222, <4 x i32> %224, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %226 = bitcast <4 x float> %215 to <2 x i64>
  %227 = extractelement <2 x i64> %226, i32 0
  %228 = bitcast i64 %227 to <2 x i32>
  %229 = bitcast i64 %210 to <2 x i32>
  %230 = shufflevector <2 x i32> %228, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %231 = shufflevector <2 x i32> %229, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %232 = shufflevector <4 x i32> %230, <4 x i32> %231, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %233 = and <4 x i32> %225, %232
  %234 = bitcast <4 x i32> %233 to <2 x i64>
  %235 = extractelement <2 x i64> %234, i32 0
  %236 = extractelement <2 x i64> %234, i32 1
  %237 = bitcast i64 %235 to <2 x i32>
  %238 = shufflevector <2 x i32> %237, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %239 = bitcast i64 %236 to <2 x i32>
  %240 = shufflevector <2 x i32> %239, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %241 = shufflevector <4 x i32> %238, <4 x i32> %240, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %242 = bitcast <4 x i32> %241 to <2 x i64>
  %243 = extractelement <2 x i64> %242, i32 0
  %244 = extractelement <2 x i64> %242, i32 1
  %245 = bitcast i64 %243 to <2 x float>
  %246 = bitcast i64 %244 to <2 x float>
  %247 = shufflevector <2 x float> %245, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %248 = shufflevector <2 x float> %246, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %249 = shufflevector <4 x float> %247, <4 x float> %248, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %250 = fmul <4 x float> %249, %160
  %251 = shufflevector <4 x float> %250, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %252 = shufflevector <4 x float> %250, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %253 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %251, 0
  %254 = insertvalue { <2 x float>, <2 x float> } %253, <2 x float> %252, 1
  ret { <2 x float>, <2 x float> } %254
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK11GrQuadUtils18TessellationHelper13EdgeEquations21computeDegenerateQuadERKN4skvx3VecILi4EfEEPS4_S7_PNS3_ILi4EiEE(%"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* nocapture readonly, %"struct.skvx::Vec"* nocapture readonly dereferenceable(16), %"struct.skvx::Vec"*, %"struct.skvx::Vec"*, %"struct.skvx::Vec.2"* nocapture) local_unnamed_addr #4 align 2 {
  %6 = alloca <4 x float>, align 16
  %7 = alloca <4 x float>, align 16
  %8 = alloca <4 x float>, align 16
  %9 = alloca <4 x float>, align 16
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <2 x float>, align 16
  %13 = alloca <2 x float>, align 8
  %14 = alloca <2 x float>, align 16
  %15 = alloca <2 x float>, align 8
  %16 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %17 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %18 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %19 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 0, i32 1, i32 1, i32 0
  %20 = bitcast %"struct.skvx::Vec"* %2 to <4 x float>*
  %21 = load <4 x float>, <4 x float>* %20, align 16
  %22 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %23 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 1, i32 0, i32 1, i32 0
  %24 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 1, i32 1, i32 0, i32 0
  %25 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 1, i32 1, i32 1, i32 0
  %26 = bitcast %"struct.skvx::Vec"* %3 to <4 x float>*
  %27 = load <4 x float>, <4 x float>* %26, align 16
  %28 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %29 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 2, i32 0, i32 1, i32 0
  %30 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 2, i32 1, i32 0, i32 0
  %31 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 2, i32 1, i32 1, i32 0
  br label %32

32:                                               ; preds = %86, %5
  %33 = phi i32 [ 0, %5 ], [ %87, %86 ]
  %34 = icmp ult i32 %33, 2
  %35 = icmp eq i32 %33, 1
  %36 = select i1 %35, float* %17, float* %16
  %37 = icmp eq i32 %33, 2
  %38 = select i1 %37, float* %18, float* %19
  %39 = select i1 %34, float* %36, float* %38
  %40 = load float, float* %39, align 4
  %41 = insertelement <4 x float> undef, float %40, i32 0
  %42 = shufflevector <4 x float> %41, <4 x float> undef, <4 x i32> zeroinitializer
  %43 = fmul <4 x float> %21, %42
  %44 = select i1 %35, float* %23, float* %22
  %45 = select i1 %37, float* %24, float* %25
  %46 = select i1 %34, float* %44, float* %45
  %47 = load float, float* %46, align 4
  %48 = insertelement <4 x float> undef, float %47, i32 0
  %49 = shufflevector <4 x float> %48, <4 x float> undef, <4 x i32> zeroinitializer
  %50 = fmul <4 x float> %27, %49
  %51 = fadd <4 x float> %43, %50
  %52 = select i1 %35, float* %29, float* %28
  %53 = select i1 %37, float* %30, float* %31
  %54 = select i1 %34, float* %52, float* %53
  %55 = load float, float* %54, align 4
  %56 = insertelement <4 x float> undef, float %55, i32 0
  %57 = shufflevector <4 x float> %56, <4 x float> undef, <4 x i32> zeroinitializer
  %58 = fadd <4 x float> %57, %51
  %59 = extractelement <4 x float> %58, i32 0
  %60 = tail call float @llvm.fabs.f32(float %59) #10
  %61 = extractelement <4 x float> %58, i32 1
  %62 = tail call float @llvm.fabs.f32(float %61) #10
  %63 = extractelement <4 x float> %58, i32 2
  %64 = tail call float @llvm.fabs.f32(float %63) #10
  %65 = extractelement <4 x float> %58, i32 3
  %66 = tail call float @llvm.fabs.f32(float %65) #10
  %67 = insertelement <4 x float> undef, float %60, i32 0
  %68 = insertelement <4 x float> %67, float %62, i32 1
  %69 = insertelement <4 x float> undef, float %64, i32 2
  %70 = insertelement <4 x float> %69, float %66, i32 3
  %71 = shufflevector <4 x float> %68, <4 x float> %70, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %72 = fcmp olt <4 x float> %71, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %73 = sext <4 x i1> %72 to <4 x i32>
  %74 = bitcast <4 x i32> %73 to <2 x i64>
  %75 = extractelement <2 x i64> %74, i32 0
  %76 = extractelement <2 x i64> %74, i32 1
  %77 = trunc i64 %75 to i32
  %78 = icmp ne i32 %77, 0
  %79 = icmp ugt i64 %75, 4294967295
  %80 = and i1 %79, %78
  br i1 %80, label %81, label %86

81:                                               ; preds = %32
  %82 = trunc i64 %76 to i32
  %83 = icmp ne i32 %82, 0
  %84 = icmp ugt i64 %76, 4294967295
  %85 = and i1 %84, %83
  br i1 %85, label %89, label %86

86:                                               ; preds = %32, %81
  %87 = add nuw nsw i32 %33, 1
  %88 = icmp eq i32 %87, 4
  br i1 %88, label %91, label %32

89:                                               ; preds = %81
  %90 = bitcast %"struct.skvx::Vec.2"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %90, i8 0, i64 16, i1 false)
  br label %673

91:                                               ; preds = %86
  %92 = bitcast %"struct.skvx::Vec"* %1 to <4 x float>*
  %93 = load <4 x float>, <4 x float>* %92, align 16
  %94 = fcmp une <4 x float> %93, zeroinitializer
  %95 = sext <4 x i1> %94 to <4 x i32>
  %96 = bitcast %"struct.skvx::Vec.2"* %4 to <4 x i32>*
  store <4 x i32> %95, <4 x i32>* %96, align 16
  %97 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 2
  %98 = bitcast %"struct.skvx::Vec"* %97 to <4 x float>*
  %99 = load <4 x float>, <4 x float>* %98, align 16
  %100 = load <4 x float>, <4 x float>* %92, align 16
  %101 = fadd <4 x float> %99, %100
  %102 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeEquations", %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0, i64 0, i32 1
  %103 = bitcast %"struct.skvx::Vec"* %102 to <4 x float>*
  %104 = load <4 x float>, <4 x float>* %103, align 16
  %105 = shufflevector <4 x float> %104, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %106 = bitcast %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %0 to <4 x float>*
  %107 = load <4 x float>, <4 x float>* %106, align 16
  %108 = fmul <4 x float> %107, %105
  %109 = shufflevector <4 x float> %107, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %110 = fmul <4 x float> %104, %109
  %111 = fsub <4 x float> %108, %110
  %112 = bitcast <4 x float>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %112)
  %113 = getelementptr inbounds <4 x float>, <4 x float>* %6, i64 0, i64 0
  %114 = getelementptr inbounds <4 x float>, <4 x float>* %6, i64 0, i64 1
  %115 = getelementptr inbounds <4 x float>, <4 x float>* %6, i64 0, i64 2
  %116 = getelementptr inbounds <4 x float>, <4 x float>* %6, i64 0, i64 3
  %117 = shufflevector <4 x float> %101, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %118 = fmul <4 x float> %104, %117
  %119 = fmul <4 x float> %101, %105
  %120 = fsub <4 x float> %118, %119
  %121 = fdiv <4 x float> %120, %111
  %122 = shufflevector <4 x float> %121, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %123 = bitcast <4 x float> %121 to <2 x i64>
  %124 = extractelement <2 x i64> %123, i32 1
  %125 = shufflevector <4 x float> %121, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %126 = bitcast <4 x float>* %6 to <2 x float>*
  store <2 x float> %122, <2 x float>* %126, align 16
  %127 = bitcast float* %115 to <2 x float>*
  store <2 x float> %125, <2 x float>* %127, align 8
  %128 = bitcast <4 x float>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %128)
  %129 = getelementptr inbounds <4 x float>, <4 x float>* %7, i64 0, i64 0
  %130 = getelementptr inbounds <4 x float>, <4 x float>* %7, i64 0, i64 1
  %131 = getelementptr inbounds <4 x float>, <4 x float>* %7, i64 0, i64 2
  %132 = getelementptr inbounds <4 x float>, <4 x float>* %7, i64 0, i64 3
  %133 = fmul <4 x float> %101, %109
  %134 = fmul <4 x float> %107, %117
  %135 = fsub <4 x float> %133, %134
  %136 = fdiv <4 x float> %135, %111
  %137 = shufflevector <4 x float> %136, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %138 = bitcast <4 x float> %136 to <2 x i64>
  %139 = extractelement <2 x i64> %138, i32 1
  %140 = shufflevector <4 x float> %136, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %141 = bitcast <4 x float>* %7 to <2 x float>*
  store <2 x float> %137, <2 x float>* %141, align 16
  %142 = bitcast float* %131 to <2 x float>*
  store <2 x float> %140, <2 x float>* %142, align 8
  %143 = extractelement <4 x float> %111, i32 0
  %144 = tail call float @llvm.fabs.f32(float %143) #10
  %145 = extractelement <4 x float> %111, i32 1
  %146 = tail call float @llvm.fabs.f32(float %145) #10
  %147 = extractelement <4 x float> %111, i32 2
  %148 = tail call float @llvm.fabs.f32(float %147) #10
  %149 = extractelement <4 x float> %111, i32 3
  %150 = tail call float @llvm.fabs.f32(float %149) #10
  %151 = insertelement <4 x float> undef, float %144, i32 0
  %152 = insertelement <4 x float> %151, float %146, i32 1
  %153 = insertelement <4 x float> undef, float %148, i32 2
  %154 = insertelement <4 x float> %153, float %150, i32 3
  %155 = shufflevector <4 x float> %152, <4 x float> %154, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %156 = fcmp olt <4 x float> %155, <float 0x3E112E0BE0000000, float 0x3E112E0BE0000000, float 0x3E112E0BE0000000, float 0x3E112E0BE0000000>
  %157 = sext <4 x i1> %156 to <4 x i32>
  %158 = bitcast <4 x i32> %157 to <2 x i64>
  %159 = extractelement <2 x i64> %158, i32 0
  %160 = extractelement <2 x i64> %158, i32 1
  %161 = bitcast i64 %159 to <2 x i32>
  %162 = shufflevector <2 x i32> %161, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %163 = bitcast i64 %160 to <2 x i32>
  %164 = shufflevector <2 x i32> %163, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %165 = shufflevector <4 x i32> %162, <4 x i32> %164, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %166 = extractelement <2 x i32> %161, i32 0
  %167 = extractelement <2 x i32> %161, i32 1
  %168 = or i32 %167, %166
  %169 = icmp eq i32 %168, 0
  %170 = bitcast i64 %124 to <2 x i32>
  %171 = bitcast i64 %139 to <2 x i32>
  br i1 %169, label %172, label %177

172:                                              ; preds = %91
  %173 = extractelement <2 x i32> %163, i32 0
  %174 = extractelement <2 x i32> %163, i32 1
  %175 = or i32 %174, %173
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %257, label %177

177:                                              ; preds = %172, %91
  %178 = load <4 x float>, <4 x float>* %6, align 16
  %179 = shufflevector <4 x float> %178, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %180 = shufflevector <4 x float> %179, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %181 = shufflevector <4 x float> %179, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %182 = bitcast <2 x float> %180 to <2 x i32>
  %183 = bitcast <2 x float> %181 to <2 x i32>
  %184 = shufflevector <2 x i32> %182, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %185 = shufflevector <2 x i32> %183, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %186 = shufflevector <4 x i32> %184, <4 x i32> %185, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %187 = and <4 x i32> %186, %165
  %188 = bitcast <4 x i32> %187 to <2 x i64>
  %189 = extractelement <2 x i64> %188, i32 0
  %190 = extractelement <2 x i64> %188, i32 1
  %191 = bitcast i64 %189 to <2 x i32>
  %192 = shufflevector <2 x i32> %191, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %193 = bitcast i64 %190 to <2 x i32>
  %194 = shufflevector <2 x i32> %193, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %195 = shufflevector <4 x i32> %192, <4 x i32> %194, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %196 = bitcast <4 x i32> %165 to <2 x i64>
  %197 = xor <2 x i64> %196, <i64 -1, i64 -1>
  %198 = extractelement <2 x i64> %197, i32 0
  %199 = extractelement <2 x i64> %197, i32 1
  %200 = bitcast i64 %198 to <2 x i32>
  %201 = shufflevector <2 x i32> %200, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %202 = bitcast i64 %199 to <2 x i32>
  %203 = shufflevector <2 x i32> %202, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %204 = shufflevector <4 x i32> %201, <4 x i32> %203, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %205 = bitcast <4 x float> %178 to <2 x i64>
  %206 = extractelement <2 x i64> %205, i32 0
  %207 = bitcast i64 %206 to <2 x i32>
  %208 = shufflevector <2 x i32> %207, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %209 = shufflevector <2 x i32> %170, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %210 = shufflevector <4 x i32> %208, <4 x i32> %209, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %211 = and <4 x i32> %210, %204
  %212 = bitcast <4 x i32> %211 to <2 x i64>
  %213 = extractelement <2 x i64> %212, i32 0
  %214 = extractelement <2 x i64> %212, i32 1
  %215 = bitcast i64 %213 to <2 x i32>
  %216 = shufflevector <2 x i32> %215, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %217 = bitcast i64 %214 to <2 x i32>
  %218 = shufflevector <2 x i32> %217, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %219 = shufflevector <4 x i32> %216, <4 x i32> %218, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %220 = or <4 x i32> %219, %195
  %221 = bitcast <4 x float>* %6 to <4 x i32>*
  store <4 x i32> %220, <4 x i32>* %221, align 16
  %222 = load <4 x float>, <4 x float>* %7, align 16
  %223 = shufflevector <4 x float> %222, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %224 = shufflevector <4 x float> %223, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %225 = shufflevector <4 x float> %223, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %226 = bitcast <2 x float> %224 to <2 x i32>
  %227 = bitcast <2 x float> %225 to <2 x i32>
  %228 = shufflevector <2 x i32> %226, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %229 = shufflevector <2 x i32> %227, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %230 = shufflevector <4 x i32> %228, <4 x i32> %229, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %231 = and <4 x i32> %230, %165
  %232 = bitcast <4 x i32> %231 to <2 x i64>
  %233 = extractelement <2 x i64> %232, i32 0
  %234 = extractelement <2 x i64> %232, i32 1
  %235 = bitcast i64 %233 to <2 x i32>
  %236 = shufflevector <2 x i32> %235, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %237 = bitcast i64 %234 to <2 x i32>
  %238 = shufflevector <2 x i32> %237, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %239 = shufflevector <4 x i32> %236, <4 x i32> %238, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %240 = bitcast <4 x float> %222 to <2 x i64>
  %241 = extractelement <2 x i64> %240, i32 0
  %242 = bitcast i64 %241 to <2 x i32>
  %243 = shufflevector <2 x i32> %242, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %244 = shufflevector <2 x i32> %171, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %245 = shufflevector <4 x i32> %243, <4 x i32> %244, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %246 = and <4 x i32> %245, %204
  %247 = bitcast <4 x i32> %246 to <2 x i64>
  %248 = extractelement <2 x i64> %247, i32 0
  %249 = extractelement <2 x i64> %247, i32 1
  %250 = bitcast i64 %248 to <2 x i32>
  %251 = shufflevector <2 x i32> %250, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %252 = bitcast i64 %249 to <2 x i32>
  %253 = shufflevector <2 x i32> %252, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %254 = shufflevector <4 x i32> %251, <4 x i32> %253, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %255 = or <4 x i32> %254, %239
  %256 = bitcast <4 x float>* %7 to <4 x i32>*
  store <4 x i32> %255, <4 x i32>* %256, align 16
  br label %257

257:                                              ; preds = %172, %177
  %258 = bitcast <4 x float>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %258)
  %259 = getelementptr inbounds <4 x float>, <4 x float>* %8, i64 0, i64 0
  %260 = getelementptr inbounds <4 x float>, <4 x float>* %8, i64 0, i64 1
  %261 = getelementptr inbounds <4 x float>, <4 x float>* %8, i64 0, i64 2
  %262 = getelementptr inbounds <4 x float>, <4 x float>* %8, i64 0, i64 3
  %263 = shufflevector <4 x float> %107, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %264 = shufflevector <4 x float> %107, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>
  %265 = shufflevector <4 x float> %263, <4 x float> %264, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %266 = load <4 x float>, <4 x float>* %6, align 16
  %267 = fmul <4 x float> %265, %266
  %268 = shufflevector <4 x float> %104, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %269 = shufflevector <4 x float> %104, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>
  %270 = shufflevector <4 x float> %268, <4 x float> %269, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %271 = load <4 x float>, <4 x float>* %7, align 16
  %272 = fmul <4 x float> %270, %271
  %273 = fadd <4 x float> %267, %272
  %274 = shufflevector <4 x float> %101, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %275 = shufflevector <4 x float> %101, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>
  %276 = shufflevector <4 x float> %274, <4 x float> %275, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %277 = fadd <4 x float> %276, %273
  %278 = shufflevector <4 x float> %277, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %279 = bitcast <4 x float> %277 to <2 x i64>
  %280 = extractelement <2 x i64> %279, i32 1
  %281 = shufflevector <4 x float> %277, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %282 = bitcast <4 x float>* %8 to <2 x float>*
  store <2 x float> %278, <2 x float>* %282, align 16
  %283 = bitcast float* %261 to <2 x float>*
  store <2 x float> %281, <2 x float>* %283, align 8
  %284 = bitcast <4 x float>* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %284)
  %285 = getelementptr inbounds <4 x float>, <4 x float>* %9, i64 0, i64 0
  %286 = getelementptr inbounds <4 x float>, <4 x float>* %9, i64 0, i64 1
  %287 = getelementptr inbounds <4 x float>, <4 x float>* %9, i64 0, i64 2
  %288 = getelementptr inbounds <4 x float>, <4 x float>* %9, i64 0, i64 3
  %289 = shufflevector <4 x float> %107, <4 x float> undef, <4 x i32> <i32 1, i32 2, i32 1, i32 2>
  %290 = fmul <4 x float> %289, %266
  %291 = shufflevector <4 x float> %104, <4 x float> undef, <4 x i32> <i32 1, i32 2, i32 1, i32 2>
  %292 = fmul <4 x float> %291, %271
  %293 = fadd <4 x float> %290, %292
  %294 = shufflevector <4 x float> %101, <4 x float> undef, <4 x i32> <i32 1, i32 2, i32 1, i32 2>
  %295 = fadd <4 x float> %294, %293
  %296 = shufflevector <4 x float> %295, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %297 = shufflevector <4 x float> %295, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %298 = bitcast <4 x float>* %9 to <2 x float>*
  store <2 x float> %296, <2 x float>* %298, align 16
  %299 = bitcast float* %287 to <2 x float>*
  store <2 x float> %297, <2 x float>* %299, align 8
  %300 = bitcast <4 x i32>* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %300)
  %301 = getelementptr inbounds <4 x i32>, <4 x i32>* %10, i64 0, i64 0
  %302 = getelementptr inbounds <4 x i32>, <4 x i32>* %10, i64 0, i64 1
  %303 = getelementptr inbounds <4 x i32>, <4 x i32>* %10, i64 0, i64 2
  %304 = getelementptr inbounds <4 x i32>, <4 x i32>* %10, i64 0, i64 3
  %305 = load <4 x float>, <4 x float>* %8, align 16
  %306 = fcmp olt <4 x float> %305, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %307 = sext <4 x i1> %306 to <4 x i32>
  store <4 x i32> %307, <4 x i32>* %10, align 16
  %308 = bitcast <4 x i32>* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %308)
  %309 = getelementptr inbounds <4 x i32>, <4 x i32>* %11, i64 0, i64 0
  %310 = getelementptr inbounds <4 x i32>, <4 x i32>* %11, i64 0, i64 1
  %311 = getelementptr inbounds <4 x i32>, <4 x i32>* %11, i64 0, i64 2
  %312 = getelementptr inbounds <4 x i32>, <4 x i32>* %11, i64 0, i64 3
  %313 = load <4 x float>, <4 x float>* %9, align 16
  %314 = fcmp olt <4 x float> %313, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %315 = sext <4 x i1> %314 to <4 x i32>
  store <4 x i32> %315, <4 x i32>* %11, align 16
  %316 = load <4 x i32>, <4 x i32>* %10, align 16
  %317 = and <4 x i32> %316, %315
  %318 = bitcast <4 x i32> %317 to <2 x i64>
  %319 = extractelement <2 x i64> %318, i32 0
  %320 = extractelement <2 x i64> %318, i32 1
  %321 = lshr i64 %319, 32
  %322 = or <4 x i32> %316, %315
  %323 = bitcast <4 x i32> %322 to <2 x i64>
  %324 = extractelement <2 x i64> %323, i32 0
  %325 = extractelement <2 x i64> %323, i32 1
  %326 = bitcast i64 %324 to <2 x i32>
  %327 = shufflevector <2 x i32> %326, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %328 = bitcast i64 %325 to <2 x i32>
  %329 = shufflevector <2 x i32> %328, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %330 = shufflevector <4 x i32> %327, <4 x i32> %329, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %331 = extractelement <2 x i32> %326, i32 0
  %332 = extractelement <2 x i32> %326, i32 1
  %333 = or i32 %332, %331
  %334 = icmp eq i32 %333, 0
  %335 = trunc i64 %280 to i32
  %336 = bitcast i32 %335 to float
  %337 = lshr i64 %280, 32
  %338 = trunc i64 %337 to i32
  %339 = bitcast i32 %338 to float
  br i1 %334, label %340, label %346

340:                                              ; preds = %257
  %341 = extractelement <2 x i32> %328, i32 0
  %342 = extractelement <2 x i32> %328, i32 1
  %343 = or i32 %342, %341
  %344 = icmp eq i32 %343, 0
  br i1 %344, label %345, label %346

345:                                              ; preds = %340
  store <4 x float> %266, <4 x float>* %20, align 16
  store <4 x float> %271, <4 x float>* %26, align 16
  br label %671

346:                                              ; preds = %340, %257
  %347 = or i64 %321, %319
  %348 = trunc i64 %347 to i32
  %349 = icmp eq i32 %348, 0
  br i1 %349, label %350, label %355

350:                                              ; preds = %346
  %351 = lshr i64 %320, 32
  %352 = or i64 %351, %320
  %353 = trunc i64 %352 to i32
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %405, label %355

355:                                              ; preds = %350, %346
  %356 = getelementptr inbounds %"struct.skvx::Vec", %"struct.skvx::Vec"* %2, i64 0, i32 0, i32 0, i32 0
  %357 = load float, float* %356, align 4
  %358 = getelementptr inbounds %"struct.skvx::Vec", %"struct.skvx::Vec"* %2, i64 0, i32 0, i32 1, i32 0
  %359 = load float, float* %358, align 4
  %360 = fadd float %357, %359
  %361 = getelementptr inbounds %"struct.skvx::Vec", %"struct.skvx::Vec"* %2, i64 0, i32 1, i32 0, i32 0
  %362 = load float, float* %361, align 4
  %363 = fadd float %360, %362
  %364 = getelementptr inbounds %"struct.skvx::Vec", %"struct.skvx::Vec"* %2, i64 0, i32 1, i32 1, i32 0
  %365 = load float, float* %364, align 4
  %366 = fadd float %363, %365
  %367 = fmul float %366, 2.500000e-01
  %368 = getelementptr inbounds %"struct.skvx::Vec", %"struct.skvx::Vec"* %3, i64 0, i32 0, i32 0, i32 0
  %369 = load float, float* %368, align 4
  %370 = getelementptr inbounds %"struct.skvx::Vec", %"struct.skvx::Vec"* %3, i64 0, i32 0, i32 1, i32 0
  %371 = load float, float* %370, align 4
  %372 = fadd float %369, %371
  %373 = getelementptr inbounds %"struct.skvx::Vec", %"struct.skvx::Vec"* %3, i64 0, i32 1, i32 0, i32 0
  %374 = load float, float* %373, align 4
  %375 = fadd float %372, %374
  %376 = getelementptr inbounds %"struct.skvx::Vec", %"struct.skvx::Vec"* %3, i64 0, i32 1, i32 1, i32 0
  %377 = load float, float* %376, align 4
  %378 = fadd float %375, %377
  %379 = fmul float %378, 2.500000e-01
  %380 = insertelement <4 x float> undef, float %367, i32 0
  %381 = shufflevector <4 x float> %380, <4 x float> undef, <4 x i32> zeroinitializer
  %382 = bitcast %"struct.skvx::Vec"* %2 to <4 x float>*
  store <4 x float> %381, <4 x float>* %382, align 16
  %383 = insertelement <4 x float> undef, float %379, i32 0
  %384 = shufflevector <4 x float> %383, <4 x float> undef, <4 x i32> zeroinitializer
  %385 = bitcast %"struct.skvx::Vec"* %3 to <4 x float>*
  store <4 x float> %384, <4 x float>* %385, align 16
  %386 = getelementptr inbounds %"struct.skvx::Vec.2", %"struct.skvx::Vec.2"* %4, i64 0, i32 0, i32 0, i32 0
  %387 = load i32, i32* %386, align 4
  %388 = getelementptr inbounds %"struct.skvx::Vec.2", %"struct.skvx::Vec.2"* %4, i64 0, i32 0, i32 1, i32 0
  %389 = load i32, i32* %388, align 4
  %390 = or i32 %389, %387
  %391 = icmp eq i32 %390, 0
  br i1 %391, label %392, label %400

392:                                              ; preds = %355
  %393 = getelementptr inbounds %"struct.skvx::Vec.2", %"struct.skvx::Vec.2"* %4, i64 0, i32 1, i32 0, i32 0
  %394 = load i32, i32* %393, align 4
  %395 = getelementptr inbounds %"struct.skvx::Vec.2", %"struct.skvx::Vec.2"* %4, i64 0, i32 1, i32 1, i32 0
  %396 = load i32, i32* %395, align 4
  %397 = or i32 %396, %394
  %398 = icmp ne i32 %397, 0
  %399 = zext i1 %398 to i32
  br label %400

400:                                              ; preds = %355, %392
  %401 = phi i32 [ 1, %355 ], [ %399, %392 ]
  %402 = insertelement <4 x i32> undef, i32 %401, i32 0
  %403 = shufflevector <4 x i32> %402, <4 x i32> undef, <4 x i32> zeroinitializer
  %404 = bitcast %"struct.skvx::Vec.2"* %4 to <4 x i32>*
  store <4 x i32> %403, <4 x i32>* %404, align 16
  br label %671

405:                                              ; preds = %350
  %406 = icmp ne i32 %331, 0
  %407 = icmp ne i32 %332, 0
  %408 = and i1 %406, %407
  br i1 %408, label %409, label %479

409:                                              ; preds = %405
  %410 = extractelement <2 x i32> %328, i32 0
  %411 = icmp ne i32 %410, 0
  %412 = extractelement <2 x i32> %328, i32 1
  %413 = icmp ne i32 %412, 0
  %414 = and i1 %411, %413
  br i1 %414, label %415, label %479

415:                                              ; preds = %409
  %416 = fcmp olt float %336, 0x3F847AE140000000
  %417 = fcmp olt float %339, 0x3F847AE140000000
  %418 = and i1 %416, %417
  br i1 %418, label %419, label %448

419:                                              ; preds = %415
  %420 = shufflevector <4 x float> %266, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %421 = shufflevector <4 x float> %266, <4 x float> %420, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %422 = shufflevector <4 x float> %266, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %423 = shufflevector <2 x float> %422, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %424 = shufflevector <4 x float> %423, <4 x float> %266, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %425 = fadd <4 x float> %421, %424
  %426 = fmul <4 x float> %425, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %427 = shufflevector <4 x float> %426, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %428 = shufflevector <4 x float> %426, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %429 = bitcast %"struct.skvx::Vec"* %2 to <2 x float>*
  store <2 x float> %427, <2 x float>* %429, align 16
  %430 = getelementptr inbounds %"struct.skvx::Vec", %"struct.skvx::Vec"* %2, i64 0, i32 1
  %431 = bitcast %"struct.skvx::Vec.0"* %430 to <2 x float>*
  store <2 x float> %428, <2 x float>* %431, align 8
  %432 = shufflevector <4 x float> %271, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %433 = shufflevector <4 x float> %271, <4 x float> %432, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %434 = shufflevector <4 x float> %271, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %435 = shufflevector <2 x float> %434, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %436 = shufflevector <4 x float> %435, <4 x float> %271, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %437 = fadd <4 x float> %433, %436
  %438 = fmul <4 x float> %437, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %439 = shufflevector <4 x float> %438, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %440 = shufflevector <4 x float> %438, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %441 = bitcast %"struct.skvx::Vec"* %3 to <2 x float>*
  store <2 x float> %439, <2 x float>* %441, align 16
  %442 = getelementptr inbounds %"struct.skvx::Vec", %"struct.skvx::Vec"* %3, i64 0, i32 1
  %443 = bitcast %"struct.skvx::Vec.0"* %442 to <2 x float>*
  store <2 x float> %440, <2 x float>* %443, align 8
  %444 = bitcast %"struct.skvx::Vec.2"* %4 to <2 x i64>*
  %445 = load <2 x i64>, <2 x i64>* %444, align 16
  %446 = or <2 x i64> %445, <i64 1, i64 4294967296>
  %447 = bitcast %"struct.skvx::Vec.2"* %4 to <2 x i64>*
  store <2 x i64> %446, <2 x i64>* %447, align 16
  br label %671

448:                                              ; preds = %415
  %449 = shufflevector <4 x float> %266, <4 x float> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %450 = shufflevector <4 x float> %266, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 2, i32 2>
  %451 = shufflevector <4 x float> %449, <4 x float> %450, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %452 = shufflevector <4 x float> %266, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 undef, i32 undef>
  %453 = shufflevector <4 x float> %266, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 3, i32 3>
  %454 = shufflevector <4 x float> %452, <4 x float> %453, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %455 = fadd <4 x float> %451, %454
  %456 = fmul <4 x float> %455, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %457 = shufflevector <4 x float> %456, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %458 = shufflevector <4 x float> %456, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %459 = bitcast %"struct.skvx::Vec"* %2 to <2 x float>*
  store <2 x float> %457, <2 x float>* %459, align 16
  %460 = getelementptr inbounds %"struct.skvx::Vec", %"struct.skvx::Vec"* %2, i64 0, i32 1
  %461 = bitcast %"struct.skvx::Vec.0"* %460 to <2 x float>*
  store <2 x float> %458, <2 x float>* %461, align 8
  %462 = shufflevector <4 x float> %271, <4 x float> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %463 = shufflevector <4 x float> %271, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 2, i32 2>
  %464 = shufflevector <4 x float> %462, <4 x float> %463, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %465 = shufflevector <4 x float> %271, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 undef, i32 undef>
  %466 = shufflevector <4 x float> %271, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 3, i32 3>
  %467 = shufflevector <4 x float> %465, <4 x float> %466, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %468 = fadd <4 x float> %464, %467
  %469 = fmul <4 x float> %468, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %470 = shufflevector <4 x float> %469, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %471 = shufflevector <4 x float> %469, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %472 = bitcast %"struct.skvx::Vec"* %3 to <2 x float>*
  store <2 x float> %470, <2 x float>* %472, align 16
  %473 = getelementptr inbounds %"struct.skvx::Vec", %"struct.skvx::Vec"* %3, i64 0, i32 1
  %474 = bitcast %"struct.skvx::Vec.0"* %473 to <2 x float>*
  store <2 x float> %471, <2 x float>* %474, align 8
  %475 = bitcast %"struct.skvx::Vec.2"* %4 to <2 x i64>*
  %476 = load <2 x i64>, <2 x i64>* %475, align 16
  %477 = or <2 x i64> %476, <i64 4294967296, i64 1>
  %478 = bitcast %"struct.skvx::Vec.2"* %4 to <2 x i64>*
  store <2 x i64> %477, <2 x i64>* %478, align 16
  br label %671

479:                                              ; preds = %405, %409
  %480 = shufflevector <4 x float> %107, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %481 = shufflevector <4 x float> %104, <4 x float> undef, <2 x i32> <i32 3, i32 2>
  %482 = fmul <2 x float> %481, %480
  %483 = shufflevector <4 x float> %104, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %484 = shufflevector <4 x float> %107, <4 x float> undef, <2 x i32> <i32 3, i32 2>
  %485 = fmul <2 x float> %483, %484
  %486 = fsub <2 x float> %482, %485
  %487 = shufflevector <4 x float> %101, <4 x float> undef, <2 x i32> <i32 3, i32 2>
  %488 = fmul <2 x float> %483, %487
  %489 = shufflevector <4 x float> %101, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %490 = fmul <2 x float> %489, %481
  %491 = fsub <2 x float> %488, %490
  %492 = fdiv <2 x float> %491, %486
  %493 = fmul <2 x float> %489, %484
  %494 = fmul <2 x float> %487, %480
  %495 = fsub <2 x float> %493, %494
  %496 = fdiv <2 x float> %495, %486
  %497 = bitcast <2 x float>* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %497)
  %498 = bitcast <2 x float>* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %498)
  %499 = getelementptr inbounds <2 x float>, <2 x float>* %12, i64 0, i64 0
  %500 = getelementptr inbounds <2 x float>, <2 x float>* %12, i64 0, i64 1
  %501 = getelementptr inbounds <2 x float>, <2 x float>* %13, i64 0, i64 0
  %502 = getelementptr inbounds <2 x float>, <2 x float>* %13, i64 0, i64 1
  %503 = shufflevector <4 x float> %266, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 2>
  %504 = shufflevector <4 x float> %266, <4 x float> %503, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %505 = shufflevector <4 x float> %266, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 1, i32 3>
  %506 = fadd <4 x float> %505, %504
  %507 = fmul <4 x float> %506, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %508 = shufflevector <4 x float> %507, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %509 = shufflevector <4 x float> %507, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %508, <2 x float>* %12, align 16
  store <2 x float> %509, <2 x float>* %13, align 8
  %510 = bitcast <2 x float>* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %510)
  %511 = bitcast <2 x float>* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %511)
  %512 = getelementptr inbounds <2 x float>, <2 x float>* %14, i64 0, i64 0
  %513 = getelementptr inbounds <2 x float>, <2 x float>* %14, i64 0, i64 1
  %514 = getelementptr inbounds <2 x float>, <2 x float>* %15, i64 0, i64 0
  %515 = getelementptr inbounds <2 x float>, <2 x float>* %15, i64 0, i64 1
  %516 = shufflevector <4 x float> %271, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 2>
  %517 = shufflevector <4 x float> %271, <4 x float> %516, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %518 = shufflevector <4 x float> %271, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 1, i32 3>
  %519 = fadd <4 x float> %518, %517
  %520 = fmul <4 x float> %519, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %521 = shufflevector <4 x float> %520, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %522 = shufflevector <4 x float> %520, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %521, <2 x float>* %14, align 16
  store <2 x float> %522, <2 x float>* %15, align 8
  %523 = extractelement <2 x float> %486, i32 0
  %524 = tail call float @llvm.fabs.f32(float %523) #10
  %525 = fcmp ule float %524, 0x3E112E0BE0000000
  %526 = extractelement <2 x float> %486, i32 1
  %527 = tail call float @llvm.fabs.f32(float %526) #10
  %528 = fcmp ule float %527, 0x3E112E0BE0000000
  %529 = bitcast <2 x float> %492 to <2 x i32>
  %530 = extractelement <2 x i32> %529, i32 1
  %531 = bitcast <2 x float> %496 to <2 x i32>
  %532 = extractelement <2 x i32> %531, i32 1
  %533 = extractelement <2 x i32> %529, i32 0
  %534 = extractelement <2 x i32> %531, i32 0
  br label %596

535:                                              ; preds = %668
  %536 = bitcast %"struct.skvx::Vec.2"* %4 to <4 x i32>*
  %537 = load <4 x i32>, <4 x i32>* %536, align 16
  %538 = shufflevector <4 x i32> %537, <4 x i32> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %539 = bitcast <4 x i32> %538 to <2 x i64>
  %540 = extractelement <2 x i64> %539, i32 0
  %541 = extractelement <2 x i64> %539, i32 1
  %542 = bitcast i64 %540 to <2 x i32>
  %543 = shufflevector <2 x i32> %542, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %544 = bitcast i64 %541 to <2 x i32>
  %545 = shufflevector <2 x i32> %544, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %546 = shufflevector <4 x i32> %543, <4 x i32> %545, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %547 = and <4 x i32> %546, %330
  %548 = bitcast <4 x i32> %547 to <2 x i64>
  %549 = extractelement <2 x i64> %548, i32 0
  %550 = extractelement <2 x i64> %548, i32 1
  %551 = bitcast i64 %549 to <2 x i32>
  %552 = shufflevector <2 x i32> %551, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %553 = bitcast i64 %550 to <2 x i32>
  %554 = shufflevector <2 x i32> %553, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %555 = shufflevector <4 x i32> %552, <4 x i32> %554, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %556 = or <4 x i32> %555, %537
  %557 = bitcast <4 x i32> %556 to <2 x i64>
  %558 = extractelement <2 x i64> %557, i32 0
  %559 = extractelement <2 x i64> %557, i32 1
  %560 = bitcast i64 %558 to <2 x i32>
  %561 = shufflevector <2 x i32> %560, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %562 = bitcast i64 %559 to <2 x i32>
  %563 = shufflevector <2 x i32> %562, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %564 = shufflevector <4 x i32> %561, <4 x i32> %563, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %565 = shufflevector <4 x i32> %330, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %566 = bitcast <4 x i32> %565 to <2 x i64>
  %567 = extractelement <2 x i64> %566, i32 0
  %568 = extractelement <2 x i64> %566, i32 1
  %569 = bitcast i64 %567 to <2 x i32>
  %570 = shufflevector <2 x i32> %569, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %571 = bitcast i64 %568 to <2 x i32>
  %572 = shufflevector <2 x i32> %571, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %573 = shufflevector <4 x i32> %570, <4 x i32> %572, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %574 = shufflevector <4 x i32> %537, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %575 = bitcast <4 x i32> %574 to <2 x i64>
  %576 = extractelement <2 x i64> %575, i32 0
  %577 = extractelement <2 x i64> %575, i32 1
  %578 = bitcast i64 %576 to <2 x i32>
  %579 = shufflevector <2 x i32> %578, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %580 = bitcast i64 %577 to <2 x i32>
  %581 = shufflevector <2 x i32> %580, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %582 = shufflevector <4 x i32> %579, <4 x i32> %581, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %583 = and <4 x i32> %582, %573
  %584 = bitcast <4 x i32> %583 to <2 x i64>
  %585 = extractelement <2 x i64> %584, i32 0
  %586 = extractelement <2 x i64> %584, i32 1
  %587 = bitcast i64 %585 to <2 x i32>
  %588 = shufflevector <2 x i32> %587, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %589 = bitcast i64 %586 to <2 x i32>
  %590 = shufflevector <2 x i32> %589, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %591 = shufflevector <4 x i32> %588, <4 x i32> %590, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %592 = or <4 x i32> %564, %591
  %593 = bitcast %"struct.skvx::Vec.2"* %4 to <4 x i32>*
  store <4 x i32> %592, <4 x i32>* %593, align 16
  %594 = load <4 x float>, <4 x float>* %6, align 16
  store <4 x float> %594, <4 x float>* %20, align 16
  %595 = load <4 x float>, <4 x float>* %7, align 16
  store <4 x float> %595, <4 x float>* %26, align 16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %510)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %511)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %497)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %498)
  br label %671

596:                                              ; preds = %668, %479
  %597 = phi i32 [ 0, %479 ], [ %669, %668 ]
  %598 = icmp ult i32 %597, 2
  %599 = icmp eq i32 %597, 1
  %600 = select i1 %599, float* %260, float* %259
  %601 = icmp eq i32 %597, 2
  %602 = select i1 %601, float* %261, float* %262
  %603 = select i1 %598, float* %600, float* %602
  %604 = load float, float* %603, align 4
  %605 = fcmp uge float %604, 0xBF847AE140000000
  %606 = or i1 %605, %525
  br i1 %606, label %612, label %607

607:                                              ; preds = %596
  %608 = select i1 %599, float* %114, float* %113
  %609 = select i1 %601, float* %115, float* %116
  %610 = select i1 %598, float* %608, float* %609
  %611 = bitcast float* %610 to i32*
  store i32 %533, i32* %611, align 4
  br label %662

612:                                              ; preds = %596
  %613 = select i1 %599, i32* %302, i32* %301
  %614 = select i1 %601, i32* %303, i32* %304
  %615 = select i1 %598, i32* %613, i32* %614
  %616 = load i32, i32* %615, align 4
  %617 = icmp eq i32 %616, 0
  br i1 %617, label %631, label %618

618:                                              ; preds = %612
  %619 = and i32 %597, 1
  %620 = icmp ne i32 %619, 0
  %621 = select i1 %620, float* %500, float* %499
  %622 = bitcast float* %621 to i32*
  %623 = load i32, i32* %622, align 4
  %624 = select i1 %599, float* %114, float* %113
  %625 = select i1 %601, float* %115, float* %116
  %626 = select i1 %598, float* %624, float* %625
  %627 = bitcast float* %626 to i32*
  store i32 %623, i32* %627, align 4
  %628 = select i1 %620, float* %513, float* %512
  %629 = bitcast float* %628 to i32*
  %630 = load i32, i32* %629, align 4
  br label %662

631:                                              ; preds = %612
  %632 = select i1 %599, float* %286, float* %285
  %633 = select i1 %601, float* %287, float* %288
  %634 = select i1 %598, float* %632, float* %633
  %635 = load float, float* %634, align 4
  %636 = fcmp uge float %635, 0xBF847AE140000000
  %637 = or i1 %636, %528
  br i1 %637, label %643, label %638

638:                                              ; preds = %631
  %639 = select i1 %599, float* %114, float* %113
  %640 = select i1 %601, float* %115, float* %116
  %641 = select i1 %598, float* %639, float* %640
  %642 = bitcast float* %641 to i32*
  store i32 %530, i32* %642, align 4
  br label %662

643:                                              ; preds = %631
  %644 = select i1 %599, i32* %310, i32* %309
  %645 = select i1 %601, i32* %311, i32* %312
  %646 = select i1 %598, i32* %644, i32* %645
  %647 = load i32, i32* %646, align 4
  %648 = icmp eq i32 %647, 0
  br i1 %648, label %668, label %649

649:                                              ; preds = %643
  %650 = and i32 %597, 2147483646
  %651 = icmp eq i32 %650, 0
  %652 = select i1 %651, float* %501, float* %502
  %653 = bitcast float* %652 to i32*
  %654 = load i32, i32* %653, align 4
  %655 = select i1 %599, float* %114, float* %113
  %656 = select i1 %601, float* %115, float* %116
  %657 = select i1 %598, float* %655, float* %656
  %658 = bitcast float* %657 to i32*
  store i32 %654, i32* %658, align 4
  %659 = select i1 %651, float* %514, float* %515
  %660 = bitcast float* %659 to i32*
  %661 = load i32, i32* %660, align 4
  br label %662

662:                                              ; preds = %618, %649, %638, %607
  %663 = phi i32 [ %534, %607 ], [ %532, %638 ], [ %661, %649 ], [ %630, %618 ]
  %664 = select i1 %599, float* %130, float* %129
  %665 = select i1 %601, float* %131, float* %132
  %666 = select i1 %598, float* %664, float* %665
  %667 = bitcast float* %666 to i32*
  store i32 %663, i32* %667, align 4
  br label %668

668:                                              ; preds = %662, %643
  %669 = add nuw nsw i32 %597, 1
  %670 = icmp eq i32 %669, 4
  br i1 %670, label %535, label %596

671:                                              ; preds = %419, %448, %535, %400, %345
  %672 = phi i32 [ 1, %400 ], [ 3, %535 ], [ 4, %345 ], [ 2, %448 ], [ 2, %419 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %308)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %300)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %284)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %258)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %128)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %112)
  br label %673

673:                                              ; preds = %89, %671
  %674 = phi i32 [ %672, %671 ], [ 4, %89 ]
  ret i32 %674
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11GrQuadUtils18TessellationHelper13OutsetRequest5resetERKNS0_11EdgeVectorsEN6GrQuad4TypeERKN4skvx3VecILi4EfEE(%"struct.GrQuadUtils::TessellationHelper::OutsetRequest"* nocapture, %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* nocapture readonly dereferenceable(112), i32, %"struct.skvx::Vec"* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 align 2 {
  %5 = bitcast %"struct.GrQuadUtils::TessellationHelper::OutsetRequest"* %0 to i8*
  %6 = bitcast %"struct.skvx::Vec"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %5, i8* align 16 %6, i64 16, i1 false)
  %7 = icmp slt i32 %2, 2
  br i1 %7, label %8, label %33

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::OutsetRequest", %"struct.GrQuadUtils::TessellationHelper::OutsetRequest"* %0, i64 0, i32 2
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %"struct.skvx::Vec", %"struct.skvx::Vec"* %3, i64 0, i32 0, i32 0, i32 0
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds %"struct.skvx::Vec", %"struct.skvx::Vec"* %3, i64 0, i32 1, i32 1, i32 0
  %13 = load float, float* %12, align 4
  %14 = fadd float %11, %13
  %15 = getelementptr inbounds %"struct.skvx::Vec", %"struct.skvx::Vec"* %3, i64 0, i32 0, i32 1, i32 0
  %16 = load float, float* %15, align 4
  %17 = getelementptr inbounds %"struct.skvx::Vec", %"struct.skvx::Vec"* %3, i64 0, i32 1, i32 0, i32 0
  %18 = load float, float* %17, align 4
  %19 = fadd float %16, %18
  %20 = fcmp ogt float %14, 0.000000e+00
  br i1 %20, label %21, label %26

21:                                               ; preds = %8
  %22 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %1, i64 0, i32 4, i32 0, i32 1, i32 0
  %23 = load float, float* %22, align 4
  %24 = fdiv float 1.000000e+00, %14
  %25 = fcmp ogt float %23, %24
  br i1 %25, label %135, label %26

26:                                               ; preds = %21, %8
  %27 = fcmp ogt float %19, 0.000000e+00
  br i1 %27, label %28, label %135

28:                                               ; preds = %26
  %29 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %1, i64 0, i32 4, i32 0, i32 0, i32 0
  %30 = load float, float* %29, align 4
  %31 = fdiv float 1.000000e+00, %19
  %32 = fcmp ogt float %30, %31
  br label %135

33:                                               ; preds = %4
  %34 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %1, i64 0, i32 4
  %35 = bitcast %"struct.skvx::Vec"* %34 to <4 x float>*
  %36 = load <4 x float>, <4 x float>* %35, align 16
  %37 = fcmp oge <4 x float> %36, <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>
  %38 = sext <4 x i1> %37 to <4 x i32>
  %39 = bitcast <4 x i32> %38 to <2 x i64>
  %40 = extractelement <2 x i64> %39, i32 0
  %41 = extractelement <2 x i64> %39, i32 1
  %42 = lshr i64 %40, 32
  %43 = or i64 %42, %40
  %44 = trunc i64 %43 to i32
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %51

46:                                               ; preds = %33
  %47 = lshr i64 %41, 32
  %48 = or i64 %47, %41
  %49 = trunc i64 %48 to i32
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %53, label %51

51:                                               ; preds = %46, %33
  %52 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::OutsetRequest", %"struct.GrQuadUtils::TessellationHelper::OutsetRequest"* %0, i64 0, i32 2
  store i8 1, i8* %52, align 1
  br label %135

53:                                               ; preds = %46
  %54 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %1, i64 0, i32 5
  %55 = bitcast %"struct.skvx::Vec"* %54 to <2 x float>*
  %56 = load <2 x float>, <2 x float>* %55, align 4
  %57 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %56)
  %58 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %1, i64 0, i32 5, i32 1, i32 0, i32 0
  %59 = bitcast float* %58 to <2 x float>*
  %60 = load <2 x float>, <2 x float>* %59, align 4
  %61 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %60)
  %62 = shufflevector <2 x float> %57, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %63 = shufflevector <2 x float> %61, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %64 = shufflevector <4 x float> %62, <4 x float> %63, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %65 = fcmp oge <4 x float> %64, <float 0x3FECCCCCC0000000, float 0x3FECCCCCC0000000, float 0x3FECCCCCC0000000, float 0x3FECCCCCC0000000>
  %66 = sext <4 x i1> %65 to <4 x i32>
  %67 = bitcast <4 x i32> %66 to <2 x i64>
  %68 = extractelement <2 x i64> %67, i32 0
  %69 = extractelement <2 x i64> %67, i32 1
  %70 = lshr i64 %68, 32
  %71 = or i64 %70, %68
  %72 = trunc i64 %71 to i32
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %79

74:                                               ; preds = %53
  %75 = lshr i64 %69, 32
  %76 = or i64 %75, %69
  %77 = trunc i64 %76 to i32
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %81, label %79

79:                                               ; preds = %74, %53
  %80 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::OutsetRequest", %"struct.GrQuadUtils::TessellationHelper::OutsetRequest"* %0, i64 0, i32 2
  store i8 1, i8* %80, align 1
  br label %135

81:                                               ; preds = %74
  %82 = bitcast %"struct.skvx::Vec"* %54 to <4 x float>*
  %83 = load <4 x float>, <4 x float>* %82, align 16
  %84 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %1, i64 0, i32 6
  %85 = bitcast %"struct.skvx::Vec"* %84 to <4 x float>*
  %86 = load <4 x float>, <4 x float>* %85, align 16
  %87 = fmul <4 x float> %83, %86
  %88 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %87
  %89 = shufflevector <4 x float> %88, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %90 = fsub <4 x float> %89, %87
  %91 = bitcast %"struct.skvx::Vec"* %3 to <4 x float>*
  %92 = load <4 x float>, <4 x float>* %91, align 16
  %93 = fmul <4 x float> %92, %90
  %94 = fmul <4 x float> %86, %92
  %95 = shufflevector <4 x float> %94, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %96 = fadd <4 x float> %95, %93
  %97 = shufflevector <4 x float> %92, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %98 = fmul <4 x float> %86, %97
  %99 = fadd <4 x float> %98, %96
  %100 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %36
  %101 = fsub <4 x float> <float 0x3FB99999A0000000, float 0x3FB99999A0000000, float 0x3FB99999A0000000, float 0x3FB99999A0000000>, %100
  %102 = fcmp olt <4 x float> %99, %101
  %103 = sext <4 x i1> %102 to <4 x i32>
  %104 = bitcast <4 x i32> %103 to <2 x i64>
  %105 = extractelement <2 x i64> %104, i32 0
  %106 = extractelement <2 x i64> %104, i32 1
  %107 = lshr i64 %105, 32
  %108 = or i64 %107, %105
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %117

111:                                              ; preds = %81
  %112 = lshr i64 %106, 32
  %113 = or i64 %112, %106
  %114 = trunc i64 %113 to i32
  %115 = icmp ne i32 %114, 0
  %116 = zext i1 %115 to i8
  br label %117

117:                                              ; preds = %81, %111
  %118 = phi i8 [ 1, %81 ], [ %116, %111 ]
  %119 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::OutsetRequest", %"struct.GrQuadUtils::TessellationHelper::OutsetRequest"* %0, i64 0, i32 2
  store i8 %118, i8* %119, align 1
  %120 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %101
  %121 = fcmp ogt <4 x float> %99, %120
  %122 = sext <4 x i1> %121 to <4 x i32>
  %123 = bitcast <4 x i32> %122 to <2 x i64>
  %124 = extractelement <2 x i64> %123, i32 0
  %125 = extractelement <2 x i64> %123, i32 1
  %126 = lshr i64 %124, 32
  %127 = or i64 %126, %124
  %128 = trunc i64 %127 to i32
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %135

130:                                              ; preds = %117
  %131 = lshr i64 %125, 32
  %132 = or i64 %131, %125
  %133 = trunc i64 %132 to i32
  %134 = icmp ne i32 %133, 0
  br label %135

135:                                              ; preds = %130, %117, %21, %28, %26, %51, %79
  %136 = phi i1 [ true, %51 ], [ true, %79 ], [ true, %21 ], [ false, %26 ], [ %32, %28 ], [ true, %117 ], [ %134, %130 ]
  %137 = zext i1 %136 to i8
  %138 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::OutsetRequest", %"struct.GrQuadUtils::TessellationHelper::OutsetRequest"* %0, i64 0, i32 1
  store i8 %137, i8* %138, align 16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11GrQuadUtils18TessellationHelper8Vertices9moveAlongERKNS0_11EdgeVectorsERKN4skvx3VecILi4EfEE(%"struct.GrQuadUtils::TessellationHelper::Vertices"* nocapture, %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* nocapture readonly dereferenceable(112), %"struct.skvx::Vec"* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %1, i64 0, i32 6
  %5 = bitcast %"struct.skvx::Vec"* %4 to <4 x float>*
  %6 = load <4 x float>, <4 x float>* %5, align 16
  %7 = bitcast %"struct.skvx::Vec"* %2 to <4 x float>*
  %8 = load <4 x float>, <4 x float>* %7, align 16
  %9 = shufflevector <4 x float> %8, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %10 = fmul <4 x float> %6, %9
  %11 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %10
  %12 = fmul <4 x float> %6, %8
  %13 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %1, i64 0, i32 2
  %14 = bitcast %"struct.skvx::Vec"* %13 to <4 x float>*
  %15 = load <4 x float>, <4 x float>* %14, align 16
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %17 = fmul <4 x float> %12, %16
  %18 = fmul <4 x float> %15, %11
  %19 = fadd <4 x float> %17, %18
  %20 = bitcast %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0 to <4 x float>*
  %21 = load <4 x float>, <4 x float>* %20, align 16
  %22 = fadd <4 x float> %21, %19
  %23 = shufflevector <4 x float> %22, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %24 = shufflevector <4 x float> %22, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %25 = bitcast %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0 to <2 x float>*
  store <2 x float> %23, <2 x float>* %25, align 16
  %26 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 0, i32 1
  %27 = bitcast %"struct.skvx::Vec.0"* %26 to <2 x float>*
  store <2 x float> %24, <2 x float>* %27, align 8
  %28 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %1, i64 0, i32 3
  %29 = bitcast %"struct.skvx::Vec"* %28 to <4 x float>*
  %30 = load <4 x float>, <4 x float>* %29, align 16
  %31 = shufflevector <4 x float> %30, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %32 = fmul <4 x float> %12, %31
  %33 = fmul <4 x float> %30, %11
  %34 = fadd <4 x float> %33, %32
  %35 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 1
  %36 = bitcast %"struct.skvx::Vec"* %35 to <4 x float>*
  %37 = load <4 x float>, <4 x float>* %36, align 16
  %38 = fadd <4 x float> %37, %34
  %39 = shufflevector <4 x float> %38, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %40 = shufflevector <4 x float> %38, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %41 = bitcast %"struct.skvx::Vec"* %35 to <2 x float>*
  store <2 x float> %39, <2 x float>* %41, align 16
  %42 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 1, i32 1
  %43 = bitcast %"struct.skvx::Vec.0"* %42 to <2 x float>*
  store <2 x float> %40, <2 x float>* %43, align 8
  %44 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 6
  %45 = load i32, i32* %44, align 16
  %46 = icmp sgt i32 %45, 0
  br i1 %46, label %47, label %101

47:                                               ; preds = %3
  %48 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::EdgeVectors", %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %1, i64 0, i32 4
  %49 = bitcast %"struct.skvx::Vec"* %48 to <4 x float>*
  %50 = load <4 x float>, <4 x float>* %49, align 16
  %51 = fmul <4 x float> %50, %11
  %52 = shufflevector <4 x float> %50, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %53 = fmul <4 x float> %12, %52
  %54 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 3
  %55 = bitcast %"struct.skvx::Vec"* %54 to <4 x float>*
  %56 = load <4 x float>, <4 x float>* %55, align 16
  %57 = shufflevector <4 x float> %56, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %58 = fsub <4 x float> %57, %56
  %59 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 4
  %60 = bitcast %"struct.skvx::Vec"* %59 to <4 x float>*
  %61 = load <4 x float>, <4 x float>* %60, align 16
  %62 = shufflevector <4 x float> %61, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %63 = fsub <4 x float> %62, %61
  %64 = shufflevector <4 x float> %58, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %65 = fmul <4 x float> %53, %64
  %66 = fmul <4 x float> %51, %58
  %67 = fadd <4 x float> %66, %65
  %68 = fadd <4 x float> %56, %67
  %69 = shufflevector <4 x float> %68, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %70 = shufflevector <4 x float> %68, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %71 = bitcast %"struct.skvx::Vec"* %54 to <2 x float>*
  store <2 x float> %69, <2 x float>* %71, align 16
  %72 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 3, i32 1
  %73 = bitcast %"struct.skvx::Vec.0"* %72 to <2 x float>*
  store <2 x float> %70, <2 x float>* %73, align 8
  %74 = shufflevector <4 x float> %63, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %75 = fmul <4 x float> %53, %74
  %76 = fmul <4 x float> %51, %63
  %77 = fadd <4 x float> %76, %75
  %78 = fadd <4 x float> %61, %77
  %79 = shufflevector <4 x float> %78, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %80 = shufflevector <4 x float> %78, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %81 = bitcast %"struct.skvx::Vec"* %59 to <2 x float>*
  store <2 x float> %79, <2 x float>* %81, align 16
  %82 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 4, i32 1
  %83 = bitcast %"struct.skvx::Vec.0"* %82 to <2 x float>*
  store <2 x float> %80, <2 x float>* %83, align 8
  %84 = icmp eq i32 %45, 3
  br i1 %84, label %85, label %101

85:                                               ; preds = %47
  %86 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 5
  %87 = bitcast %"struct.skvx::Vec"* %86 to <4 x float>*
  %88 = load <4 x float>, <4 x float>* %87, align 16
  %89 = shufflevector <4 x float> %88, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %90 = fsub <4 x float> %89, %88
  %91 = shufflevector <4 x float> %90, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %92 = fmul <4 x float> %53, %91
  %93 = fmul <4 x float> %51, %90
  %94 = fadd <4 x float> %93, %92
  %95 = fadd <4 x float> %88, %94
  %96 = shufflevector <4 x float> %95, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %97 = shufflevector <4 x float> %95, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %98 = bitcast %"struct.skvx::Vec"* %86 to <2 x float>*
  store <2 x float> %96, <2 x float>* %98, align 16
  %99 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 5, i32 1
  %100 = bitcast %"struct.skvx::Vec.0"* %99 to <2 x float>*
  store <2 x float> %97, <2 x float>* %100, align 8
  br label %101

101:                                              ; preds = %47, %85, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11GrQuadUtils18TessellationHelper8Vertices6moveToERKN4skvx3VecILi4EfEES6_RKNS3_ILi4EiEE(%"struct.GrQuadUtils::TessellationHelper::Vertices"*, %"struct.skvx::Vec"* nocapture readonly dereferenceable(16), %"struct.skvx::Vec"* nocapture readonly dereferenceable(16), %"struct.skvx::Vec.2"* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 align 2 {
  %5 = bitcast %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0 to <4 x float>*
  %6 = load <4 x float>, <4 x float>* %5, align 16
  %7 = shufflevector <4 x float> %6, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %8 = shufflevector <2 x float> %7, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %9 = shufflevector <4 x float> %8, <4 x float> %6, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %10 = shufflevector <4 x float> %6, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %11 = shufflevector <4 x float> %6, <4 x float> %10, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %12 = fsub <4 x float> %9, %11
  %13 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 1
  %14 = bitcast %"struct.skvx::Vec"* %13 to <4 x float>*
  %15 = load <4 x float>, <4 x float>* %14, align 16
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %17 = shufflevector <2 x float> %16, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %18 = shufflevector <4 x float> %17, <4 x float> %15, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %19 = shufflevector <4 x float> %15, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %20 = shufflevector <4 x float> %15, <4 x float> %19, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %21 = fsub <4 x float> %18, %20
  %22 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 2
  %23 = bitcast %"struct.skvx::Vec"* %22 to <4 x float>*
  %24 = load <4 x float>, <4 x float>* %23, align 16
  %25 = shufflevector <4 x float> %24, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %26 = shufflevector <2 x float> %25, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %27 = shufflevector <4 x float> %26, <4 x float> %24, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %28 = shufflevector <4 x float> %24, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %29 = shufflevector <4 x float> %24, <4 x float> %28, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %30 = fsub <4 x float> %27, %29
  %31 = fmul <4 x float> %12, %12
  %32 = fmul <4 x float> %21, %21
  %33 = fadd <4 x float> %31, %32
  %34 = fcmp olt <4 x float> %33, <float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000>
  %35 = sext <4 x i1> %34 to <4 x i32>
  %36 = bitcast <4 x i32> %35 to <2 x i64>
  %37 = extractelement <2 x i64> %36, i32 0
  %38 = extractelement <2 x i64> %36, i32 1
  %39 = bitcast i64 %37 to <2 x i32>
  %40 = shufflevector <2 x i32> %39, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %41 = bitcast i64 %38 to <2 x i32>
  %42 = shufflevector <2 x i32> %41, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %43 = shufflevector <4 x i32> %40, <4 x i32> %42, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %44 = extractelement <2 x i32> %39, i32 0
  %45 = extractelement <2 x i32> %39, i32 1
  %46 = or i32 %45, %44
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %53

48:                                               ; preds = %4
  %49 = extractelement <2 x i32> %41, i32 0
  %50 = extractelement <2 x i32> %41, i32 1
  %51 = or i32 %50, %49
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %195, label %53

53:                                               ; preds = %48, %4
  %54 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %12
  %55 = shufflevector <4 x float> %54, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %56 = shufflevector <4 x float> %55, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %57 = shufflevector <4 x float> %55, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %58 = bitcast <2 x float> %56 to <2 x i32>
  %59 = bitcast <2 x float> %57 to <2 x i32>
  %60 = shufflevector <2 x i32> %58, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %61 = shufflevector <2 x i32> %59, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %62 = shufflevector <4 x i32> %60, <4 x i32> %61, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %63 = and <4 x i32> %43, %62
  %64 = bitcast <4 x i32> %63 to <2 x i64>
  %65 = extractelement <2 x i64> %64, i32 0
  %66 = extractelement <2 x i64> %64, i32 1
  %67 = bitcast i64 %65 to <2 x i32>
  %68 = shufflevector <2 x i32> %67, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %69 = bitcast i64 %66 to <2 x i32>
  %70 = shufflevector <2 x i32> %69, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %71 = shufflevector <4 x i32> %68, <4 x i32> %70, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %72 = bitcast <4 x i32> %43 to <2 x i64>
  %73 = xor <2 x i64> %72, <i64 -1, i64 -1>
  %74 = extractelement <2 x i64> %73, i32 0
  %75 = extractelement <2 x i64> %73, i32 1
  %76 = bitcast i64 %74 to <2 x i32>
  %77 = shufflevector <2 x i32> %76, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %78 = bitcast i64 %75 to <2 x i32>
  %79 = shufflevector <2 x i32> %78, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %80 = shufflevector <4 x i32> %77, <4 x i32> %79, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %81 = bitcast <4 x float> %12 to <2 x i64>
  %82 = extractelement <2 x i64> %81, i32 0
  %83 = bitcast i64 %82 to <2 x i32>
  %84 = shufflevector <4 x float> %12, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %85 = bitcast <2 x float> %84 to <2 x i32>
  %86 = shufflevector <2 x i32> %83, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %87 = shufflevector <2 x i32> %85, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %88 = shufflevector <4 x i32> %86, <4 x i32> %87, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %89 = and <4 x i32> %80, %88
  %90 = bitcast <4 x i32> %89 to <2 x i64>
  %91 = extractelement <2 x i64> %90, i32 0
  %92 = extractelement <2 x i64> %90, i32 1
  %93 = bitcast i64 %91 to <2 x i32>
  %94 = shufflevector <2 x i32> %93, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %95 = bitcast i64 %92 to <2 x i32>
  %96 = shufflevector <2 x i32> %95, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %97 = shufflevector <4 x i32> %94, <4 x i32> %96, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %98 = or <4 x i32> %97, %71
  %99 = bitcast <4 x i32> %98 to <2 x i64>
  %100 = extractelement <2 x i64> %99, i32 0
  %101 = extractelement <2 x i64> %99, i32 1
  %102 = bitcast i64 %100 to <2 x float>
  %103 = shufflevector <2 x float> %102, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %104 = bitcast i64 %101 to <2 x float>
  %105 = shufflevector <2 x float> %104, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %106 = shufflevector <4 x float> %103, <4 x float> %105, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %107 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %21
  %108 = shufflevector <4 x float> %107, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %109 = shufflevector <4 x float> %108, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %110 = shufflevector <4 x float> %108, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %111 = bitcast <2 x float> %109 to <2 x i32>
  %112 = bitcast <2 x float> %110 to <2 x i32>
  %113 = shufflevector <2 x i32> %111, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %114 = shufflevector <2 x i32> %112, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %115 = shufflevector <4 x i32> %113, <4 x i32> %114, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %116 = and <4 x i32> %43, %115
  %117 = bitcast <4 x i32> %116 to <2 x i64>
  %118 = extractelement <2 x i64> %117, i32 0
  %119 = extractelement <2 x i64> %117, i32 1
  %120 = bitcast i64 %118 to <2 x i32>
  %121 = shufflevector <2 x i32> %120, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %122 = bitcast i64 %119 to <2 x i32>
  %123 = shufflevector <2 x i32> %122, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %124 = shufflevector <4 x i32> %121, <4 x i32> %123, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %125 = bitcast <4 x float> %21 to <2 x i64>
  %126 = extractelement <2 x i64> %125, i32 0
  %127 = bitcast i64 %126 to <2 x i32>
  %128 = shufflevector <4 x float> %21, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %129 = bitcast <2 x float> %128 to <2 x i32>
  %130 = shufflevector <2 x i32> %127, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %131 = shufflevector <2 x i32> %129, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %132 = shufflevector <4 x i32> %130, <4 x i32> %131, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %133 = and <4 x i32> %80, %132
  %134 = bitcast <4 x i32> %133 to <2 x i64>
  %135 = extractelement <2 x i64> %134, i32 0
  %136 = extractelement <2 x i64> %134, i32 1
  %137 = bitcast i64 %135 to <2 x i32>
  %138 = shufflevector <2 x i32> %137, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %139 = bitcast i64 %136 to <2 x i32>
  %140 = shufflevector <2 x i32> %139, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %141 = shufflevector <4 x i32> %138, <4 x i32> %140, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %142 = or <4 x i32> %141, %124
  %143 = bitcast <4 x i32> %142 to <2 x i64>
  %144 = extractelement <2 x i64> %143, i32 0
  %145 = extractelement <2 x i64> %143, i32 1
  %146 = bitcast i64 %144 to <2 x float>
  %147 = shufflevector <2 x float> %146, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %148 = bitcast i64 %145 to <2 x float>
  %149 = shufflevector <2 x float> %148, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %150 = shufflevector <4 x float> %147, <4 x float> %149, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %151 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %30
  %152 = shufflevector <4 x float> %151, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %153 = shufflevector <4 x float> %152, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %154 = shufflevector <4 x float> %152, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %155 = bitcast <2 x float> %153 to <2 x i32>
  %156 = bitcast <2 x float> %154 to <2 x i32>
  %157 = shufflevector <2 x i32> %155, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %158 = shufflevector <2 x i32> %156, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %159 = shufflevector <4 x i32> %157, <4 x i32> %158, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %160 = and <4 x i32> %43, %159
  %161 = bitcast <4 x i32> %160 to <2 x i64>
  %162 = extractelement <2 x i64> %161, i32 0
  %163 = extractelement <2 x i64> %161, i32 1
  %164 = bitcast i64 %162 to <2 x i32>
  %165 = shufflevector <2 x i32> %164, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %166 = bitcast i64 %163 to <2 x i32>
  %167 = shufflevector <2 x i32> %166, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %168 = shufflevector <4 x i32> %165, <4 x i32> %167, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %169 = bitcast <4 x float> %30 to <2 x i64>
  %170 = extractelement <2 x i64> %169, i32 0
  %171 = bitcast i64 %170 to <2 x i32>
  %172 = shufflevector <4 x float> %30, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %173 = bitcast <2 x float> %172 to <2 x i32>
  %174 = shufflevector <2 x i32> %171, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %175 = shufflevector <2 x i32> %173, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %176 = shufflevector <4 x i32> %174, <4 x i32> %175, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %177 = and <4 x i32> %80, %176
  %178 = bitcast <4 x i32> %177 to <2 x i64>
  %179 = extractelement <2 x i64> %178, i32 0
  %180 = extractelement <2 x i64> %178, i32 1
  %181 = bitcast i64 %179 to <2 x i32>
  %182 = shufflevector <2 x i32> %181, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %183 = bitcast i64 %180 to <2 x i32>
  %184 = shufflevector <2 x i32> %183, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %185 = shufflevector <4 x i32> %182, <4 x i32> %184, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %186 = or <4 x i32> %185, %168
  %187 = bitcast <4 x i32> %186 to <2 x i64>
  %188 = extractelement <2 x i64> %187, i32 0
  %189 = extractelement <2 x i64> %187, i32 1
  %190 = bitcast i64 %188 to <2 x float>
  %191 = shufflevector <2 x float> %190, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %192 = bitcast i64 %189 to <2 x float>
  %193 = shufflevector <2 x float> %192, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %194 = shufflevector <4 x float> %191, <4 x float> %193, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %195

195:                                              ; preds = %48, %53
  %196 = phi <4 x float> [ %21, %48 ], [ %150, %53 ]
  %197 = phi <4 x float> [ %30, %48 ], [ %194, %53 ]
  %198 = phi <4 x float> [ %12, %48 ], [ %106, %53 ]
  %199 = shufflevector <4 x float> %6, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 undef, i32 undef>
  %200 = shufflevector <4 x float> %6, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 3, i32 3>
  %201 = shufflevector <4 x float> %199, <4 x float> %200, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %202 = shufflevector <4 x float> %6, <4 x float> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %203 = shufflevector <4 x float> %6, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 2, i32 2>
  %204 = shufflevector <4 x float> %202, <4 x float> %203, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %205 = fsub <4 x float> %201, %204
  %206 = shufflevector <4 x float> %15, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 undef, i32 undef>
  %207 = shufflevector <4 x float> %15, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 3, i32 3>
  %208 = shufflevector <4 x float> %206, <4 x float> %207, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %209 = shufflevector <4 x float> %15, <4 x float> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %210 = shufflevector <4 x float> %15, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 2, i32 2>
  %211 = shufflevector <4 x float> %209, <4 x float> %210, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %212 = fsub <4 x float> %208, %211
  %213 = shufflevector <4 x float> %24, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 undef, i32 undef>
  %214 = shufflevector <4 x float> %24, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 3, i32 3>
  %215 = shufflevector <4 x float> %213, <4 x float> %214, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %216 = shufflevector <4 x float> %24, <4 x float> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %217 = shufflevector <4 x float> %24, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 2, i32 2>
  %218 = shufflevector <4 x float> %216, <4 x float> %217, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %219 = fsub <4 x float> %215, %218
  %220 = fmul <4 x float> %205, %205
  %221 = fmul <4 x float> %212, %212
  %222 = fadd <4 x float> %220, %221
  %223 = fcmp olt <4 x float> %222, <float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000>
  %224 = sext <4 x i1> %223 to <4 x i32>
  %225 = bitcast <4 x i32> %224 to <2 x i64>
  %226 = extractelement <2 x i64> %225, i32 0
  %227 = extractelement <2 x i64> %225, i32 1
  %228 = bitcast i64 %226 to <2 x i32>
  %229 = shufflevector <2 x i32> %228, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %230 = bitcast i64 %227 to <2 x i32>
  %231 = shufflevector <2 x i32> %230, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %232 = shufflevector <4 x i32> %229, <4 x i32> %231, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %233 = extractelement <2 x i32> %228, i32 0
  %234 = extractelement <2 x i32> %228, i32 1
  %235 = or i32 %234, %233
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %237, label %242

237:                                              ; preds = %195
  %238 = extractelement <2 x i32> %230, i32 0
  %239 = extractelement <2 x i32> %230, i32 1
  %240 = or i32 %239, %238
  %241 = icmp eq i32 %240, 0
  br i1 %241, label %384, label %242

242:                                              ; preds = %237, %195
  %243 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %205
  %244 = shufflevector <4 x float> %243, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %245 = shufflevector <4 x float> %244, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %246 = shufflevector <4 x float> %244, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %247 = bitcast <2 x float> %245 to <2 x i32>
  %248 = bitcast <2 x float> %246 to <2 x i32>
  %249 = shufflevector <2 x i32> %247, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %250 = shufflevector <2 x i32> %248, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %251 = shufflevector <4 x i32> %249, <4 x i32> %250, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %252 = and <4 x i32> %232, %251
  %253 = bitcast <4 x i32> %252 to <2 x i64>
  %254 = extractelement <2 x i64> %253, i32 0
  %255 = extractelement <2 x i64> %253, i32 1
  %256 = bitcast i64 %254 to <2 x i32>
  %257 = shufflevector <2 x i32> %256, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %258 = bitcast i64 %255 to <2 x i32>
  %259 = shufflevector <2 x i32> %258, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %260 = shufflevector <4 x i32> %257, <4 x i32> %259, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %261 = bitcast <4 x i32> %232 to <2 x i64>
  %262 = xor <2 x i64> %261, <i64 -1, i64 -1>
  %263 = extractelement <2 x i64> %262, i32 0
  %264 = extractelement <2 x i64> %262, i32 1
  %265 = bitcast i64 %263 to <2 x i32>
  %266 = shufflevector <2 x i32> %265, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %267 = bitcast i64 %264 to <2 x i32>
  %268 = shufflevector <2 x i32> %267, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %269 = shufflevector <4 x i32> %266, <4 x i32> %268, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %270 = bitcast <4 x float> %205 to <2 x i64>
  %271 = extractelement <2 x i64> %270, i32 0
  %272 = bitcast i64 %271 to <2 x i32>
  %273 = shufflevector <4 x float> %205, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %274 = bitcast <2 x float> %273 to <2 x i32>
  %275 = shufflevector <2 x i32> %272, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %276 = shufflevector <2 x i32> %274, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %277 = shufflevector <4 x i32> %275, <4 x i32> %276, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %278 = and <4 x i32> %269, %277
  %279 = bitcast <4 x i32> %278 to <2 x i64>
  %280 = extractelement <2 x i64> %279, i32 0
  %281 = extractelement <2 x i64> %279, i32 1
  %282 = bitcast i64 %280 to <2 x i32>
  %283 = shufflevector <2 x i32> %282, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %284 = bitcast i64 %281 to <2 x i32>
  %285 = shufflevector <2 x i32> %284, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %286 = shufflevector <4 x i32> %283, <4 x i32> %285, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %287 = or <4 x i32> %286, %260
  %288 = bitcast <4 x i32> %287 to <2 x i64>
  %289 = extractelement <2 x i64> %288, i32 0
  %290 = extractelement <2 x i64> %288, i32 1
  %291 = bitcast i64 %289 to <2 x float>
  %292 = shufflevector <2 x float> %291, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %293 = bitcast i64 %290 to <2 x float>
  %294 = shufflevector <2 x float> %293, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %295 = shufflevector <4 x float> %292, <4 x float> %294, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %296 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %212
  %297 = shufflevector <4 x float> %296, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %298 = shufflevector <4 x float> %297, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %299 = shufflevector <4 x float> %297, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %300 = bitcast <2 x float> %298 to <2 x i32>
  %301 = bitcast <2 x float> %299 to <2 x i32>
  %302 = shufflevector <2 x i32> %300, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %303 = shufflevector <2 x i32> %301, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %304 = shufflevector <4 x i32> %302, <4 x i32> %303, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %305 = and <4 x i32> %232, %304
  %306 = bitcast <4 x i32> %305 to <2 x i64>
  %307 = extractelement <2 x i64> %306, i32 0
  %308 = extractelement <2 x i64> %306, i32 1
  %309 = bitcast i64 %307 to <2 x i32>
  %310 = shufflevector <2 x i32> %309, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %311 = bitcast i64 %308 to <2 x i32>
  %312 = shufflevector <2 x i32> %311, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %313 = shufflevector <4 x i32> %310, <4 x i32> %312, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %314 = bitcast <4 x float> %212 to <2 x i64>
  %315 = extractelement <2 x i64> %314, i32 0
  %316 = bitcast i64 %315 to <2 x i32>
  %317 = shufflevector <4 x float> %212, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %318 = bitcast <2 x float> %317 to <2 x i32>
  %319 = shufflevector <2 x i32> %316, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %320 = shufflevector <2 x i32> %318, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %321 = shufflevector <4 x i32> %319, <4 x i32> %320, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %322 = and <4 x i32> %269, %321
  %323 = bitcast <4 x i32> %322 to <2 x i64>
  %324 = extractelement <2 x i64> %323, i32 0
  %325 = extractelement <2 x i64> %323, i32 1
  %326 = bitcast i64 %324 to <2 x i32>
  %327 = shufflevector <2 x i32> %326, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %328 = bitcast i64 %325 to <2 x i32>
  %329 = shufflevector <2 x i32> %328, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %330 = shufflevector <4 x i32> %327, <4 x i32> %329, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %331 = or <4 x i32> %330, %313
  %332 = bitcast <4 x i32> %331 to <2 x i64>
  %333 = extractelement <2 x i64> %332, i32 0
  %334 = extractelement <2 x i64> %332, i32 1
  %335 = bitcast i64 %333 to <2 x float>
  %336 = shufflevector <2 x float> %335, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %337 = bitcast i64 %334 to <2 x float>
  %338 = shufflevector <2 x float> %337, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %339 = shufflevector <4 x float> %336, <4 x float> %338, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %340 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %219
  %341 = shufflevector <4 x float> %340, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %342 = shufflevector <4 x float> %341, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %343 = shufflevector <4 x float> %341, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %344 = bitcast <2 x float> %342 to <2 x i32>
  %345 = bitcast <2 x float> %343 to <2 x i32>
  %346 = shufflevector <2 x i32> %344, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %347 = shufflevector <2 x i32> %345, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %348 = shufflevector <4 x i32> %346, <4 x i32> %347, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %349 = and <4 x i32> %232, %348
  %350 = bitcast <4 x i32> %349 to <2 x i64>
  %351 = extractelement <2 x i64> %350, i32 0
  %352 = extractelement <2 x i64> %350, i32 1
  %353 = bitcast i64 %351 to <2 x i32>
  %354 = shufflevector <2 x i32> %353, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %355 = bitcast i64 %352 to <2 x i32>
  %356 = shufflevector <2 x i32> %355, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %357 = shufflevector <4 x i32> %354, <4 x i32> %356, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %358 = bitcast <4 x float> %219 to <2 x i64>
  %359 = extractelement <2 x i64> %358, i32 0
  %360 = bitcast i64 %359 to <2 x i32>
  %361 = shufflevector <4 x float> %219, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %362 = bitcast <2 x float> %361 to <2 x i32>
  %363 = shufflevector <2 x i32> %360, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %364 = shufflevector <2 x i32> %362, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %365 = shufflevector <4 x i32> %363, <4 x i32> %364, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %366 = and <4 x i32> %269, %365
  %367 = bitcast <4 x i32> %366 to <2 x i64>
  %368 = extractelement <2 x i64> %367, i32 0
  %369 = extractelement <2 x i64> %367, i32 1
  %370 = bitcast i64 %368 to <2 x i32>
  %371 = shufflevector <2 x i32> %370, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %372 = bitcast i64 %369 to <2 x i32>
  %373 = shufflevector <2 x i32> %372, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %374 = shufflevector <4 x i32> %371, <4 x i32> %373, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %375 = or <4 x i32> %374, %357
  %376 = bitcast <4 x i32> %375 to <2 x i64>
  %377 = extractelement <2 x i64> %376, i32 0
  %378 = extractelement <2 x i64> %376, i32 1
  %379 = bitcast i64 %377 to <2 x float>
  %380 = shufflevector <2 x float> %379, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %381 = bitcast i64 %378 to <2 x float>
  %382 = shufflevector <2 x float> %381, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %383 = shufflevector <4 x float> %380, <4 x float> %382, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %384

384:                                              ; preds = %237, %242
  %385 = phi <4 x float> [ %205, %237 ], [ %295, %242 ]
  %386 = phi <4 x float> [ %212, %237 ], [ %339, %242 ]
  %387 = phi <4 x float> [ %219, %237 ], [ %383, %242 ]
  %388 = bitcast %"struct.skvx::Vec"* %1 to <4 x float>*
  %389 = load <4 x float>, <4 x float>* %388, align 16
  %390 = fmul <4 x float> %197, %389
  %391 = fsub <4 x float> %390, %198
  %392 = bitcast %"struct.skvx::Vec"* %2 to <4 x float>*
  %393 = load <4 x float>, <4 x float>* %392, align 16
  %394 = fmul <4 x float> %197, %393
  %395 = fsub <4 x float> %394, %196
  %396 = fmul <4 x float> %387, %389
  %397 = fsub <4 x float> %396, %385
  %398 = fmul <4 x float> %387, %393
  %399 = fsub <4 x float> %398, %386
  %400 = fmul <4 x float> %24, %389
  %401 = fsub <4 x float> %400, %6
  %402 = fmul <4 x float> %24, %393
  %403 = fsub <4 x float> %402, %15
  %404 = getelementptr inbounds %"struct.skvx::Vec.2", %"struct.skvx::Vec.2"* %3, i64 0, i32 0, i32 0, i32 0
  %405 = load i32, i32* %404, align 4
  %406 = icmp ne i32 %405, 0
  %407 = getelementptr inbounds %"struct.skvx::Vec.2", %"struct.skvx::Vec.2"* %3, i64 0, i32 0, i32 1, i32 0
  %408 = load i32, i32* %407, align 4
  %409 = icmp ne i32 %408, 0
  %410 = and i1 %406, %409
  br i1 %410, label %411, label %431

411:                                              ; preds = %384
  %412 = getelementptr inbounds %"struct.skvx::Vec.2", %"struct.skvx::Vec.2"* %3, i64 0, i32 1, i32 0, i32 0
  %413 = load i32, i32* %412, align 4
  %414 = icmp ne i32 %413, 0
  %415 = getelementptr inbounds %"struct.skvx::Vec.2", %"struct.skvx::Vec.2"* %3, i64 0, i32 1, i32 1, i32 0
  %416 = load i32, i32* %415, align 4
  %417 = icmp ne i32 %416, 0
  %418 = and i1 %414, %417
  br i1 %418, label %419, label %431

419:                                              ; preds = %411
  %420 = fmul <4 x float> %391, %399
  %421 = fmul <4 x float> %397, %395
  %422 = fsub <4 x float> %420, %421
  %423 = fmul <4 x float> %397, %403
  %424 = fmul <4 x float> %401, %399
  %425 = fsub <4 x float> %423, %424
  %426 = fdiv <4 x float> %425, %422
  %427 = fmul <4 x float> %401, %395
  %428 = fmul <4 x float> %391, %403
  %429 = fsub <4 x float> %427, %428
  %430 = fdiv <4 x float> %429, %422
  br label %913

431:                                              ; preds = %384, %411
  %432 = bitcast %"struct.skvx::Vec.2"* %3 to <4 x i32>*
  %433 = load <4 x i32>, <4 x i32>* %432, align 16
  %434 = shufflevector <4 x i32> %433, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 3, i32 3>
  %435 = bitcast <4 x i32> %434 to <2 x i64>
  %436 = extractelement <2 x i64> %435, i32 0
  %437 = extractelement <2 x i64> %435, i32 1
  %438 = bitcast i64 %436 to <2 x i32>
  %439 = shufflevector <2 x i32> %438, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %440 = bitcast i64 %437 to <2 x i32>
  %441 = shufflevector <2 x i32> %440, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %442 = shufflevector <4 x i32> %439, <4 x i32> %441, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %443 = shufflevector <4 x i32> %433, <4 x i32> undef, <4 x i32> <i32 2, i32 1, i32 2, i32 1>
  %444 = bitcast <4 x i32> %443 to <2 x i64>
  %445 = extractelement <2 x i64> %444, i32 0
  %446 = extractelement <2 x i64> %444, i32 1
  %447 = bitcast i64 %445 to <2 x i32>
  %448 = shufflevector <2 x i32> %447, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %449 = bitcast i64 %446 to <2 x i32>
  %450 = shufflevector <2 x i32> %449, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %451 = shufflevector <4 x i32> %448, <4 x i32> %450, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %452 = extractelement <4 x float> %391, i32 0
  %453 = tail call float @llvm.fabs.f32(float %452) #10
  %454 = extractelement <4 x float> %391, i32 1
  %455 = tail call float @llvm.fabs.f32(float %454) #10
  %456 = extractelement <4 x float> %391, i32 2
  %457 = tail call float @llvm.fabs.f32(float %456) #10
  %458 = extractelement <4 x float> %391, i32 3
  %459 = tail call float @llvm.fabs.f32(float %458) #10
  %460 = insertelement <4 x float> undef, float %453, i32 0
  %461 = insertelement <4 x float> %460, float %455, i32 1
  %462 = insertelement <4 x float> undef, float %457, i32 2
  %463 = insertelement <4 x float> %462, float %459, i32 3
  %464 = shufflevector <4 x float> %461, <4 x float> %463, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %465 = extractelement <4 x float> %395, i32 0
  %466 = tail call float @llvm.fabs.f32(float %465) #10
  %467 = extractelement <4 x float> %395, i32 1
  %468 = tail call float @llvm.fabs.f32(float %467) #10
  %469 = extractelement <4 x float> %395, i32 2
  %470 = tail call float @llvm.fabs.f32(float %469) #10
  %471 = extractelement <4 x float> %395, i32 3
  %472 = tail call float @llvm.fabs.f32(float %471) #10
  %473 = insertelement <4 x float> undef, float %466, i32 0
  %474 = insertelement <4 x float> %473, float %468, i32 1
  %475 = insertelement <4 x float> undef, float %470, i32 2
  %476 = insertelement <4 x float> %475, float %472, i32 3
  %477 = shufflevector <4 x float> %474, <4 x float> %476, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %478 = fcmp ogt <4 x float> %464, %477
  %479 = sext <4 x i1> %478 to <4 x i32>
  %480 = bitcast <4 x i32> %479 to <2 x i64>
  %481 = extractelement <2 x i64> %480, i32 0
  %482 = extractelement <2 x i64> %480, i32 1
  %483 = bitcast i64 %481 to <2 x i32>
  %484 = shufflevector <2 x i32> %483, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %485 = bitcast i64 %482 to <2 x i32>
  %486 = shufflevector <2 x i32> %485, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %487 = shufflevector <4 x i32> %484, <4 x i32> %486, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %488 = extractelement <4 x float> %397, i32 0
  %489 = tail call float @llvm.fabs.f32(float %488) #10
  %490 = extractelement <4 x float> %397, i32 1
  %491 = tail call float @llvm.fabs.f32(float %490) #10
  %492 = extractelement <4 x float> %397, i32 2
  %493 = tail call float @llvm.fabs.f32(float %492) #10
  %494 = extractelement <4 x float> %397, i32 3
  %495 = tail call float @llvm.fabs.f32(float %494) #10
  %496 = insertelement <4 x float> undef, float %489, i32 0
  %497 = insertelement <4 x float> %496, float %491, i32 1
  %498 = insertelement <4 x float> undef, float %493, i32 2
  %499 = insertelement <4 x float> %498, float %495, i32 3
  %500 = shufflevector <4 x float> %497, <4 x float> %499, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %501 = extractelement <4 x float> %399, i32 0
  %502 = tail call float @llvm.fabs.f32(float %501) #10
  %503 = extractelement <4 x float> %399, i32 1
  %504 = tail call float @llvm.fabs.f32(float %503) #10
  %505 = extractelement <4 x float> %399, i32 2
  %506 = tail call float @llvm.fabs.f32(float %505) #10
  %507 = extractelement <4 x float> %399, i32 3
  %508 = tail call float @llvm.fabs.f32(float %507) #10
  %509 = insertelement <4 x float> undef, float %502, i32 0
  %510 = insertelement <4 x float> %509, float %504, i32 1
  %511 = insertelement <4 x float> undef, float %506, i32 2
  %512 = insertelement <4 x float> %511, float %508, i32 3
  %513 = shufflevector <4 x float> %510, <4 x float> %512, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %514 = fcmp ogt <4 x float> %500, %513
  %515 = sext <4 x i1> %514 to <4 x i32>
  %516 = bitcast <4 x i32> %515 to <2 x i64>
  %517 = extractelement <2 x i64> %516, i32 0
  %518 = extractelement <2 x i64> %516, i32 1
  %519 = bitcast i64 %517 to <2 x i32>
  %520 = shufflevector <2 x i32> %519, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %521 = bitcast i64 %518 to <2 x i32>
  %522 = shufflevector <2 x i32> %521, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %523 = shufflevector <4 x i32> %520, <4 x i32> %522, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %524 = fmul <4 x float> %391, %399
  %525 = fmul <4 x float> %397, %395
  %526 = fsub <4 x float> %524, %525
  %527 = shufflevector <4 x float> %526, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %528 = shufflevector <4 x float> %526, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %529 = bitcast <2 x float> %527 to <2 x i32>
  %530 = bitcast <2 x float> %528 to <2 x i32>
  %531 = shufflevector <4 x float> %391, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %532 = bitcast <2 x float> %531 to <2 x i32>
  %533 = shufflevector <4 x float> %391, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %534 = bitcast <2 x float> %533 to <2 x i32>
  %535 = shufflevector <2 x i32> %532, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %536 = shufflevector <2 x i32> %534, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %537 = shufflevector <4 x i32> %535, <4 x i32> %536, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %538 = and <4 x i32> %487, %537
  %539 = bitcast <4 x i32> %538 to <2 x i64>
  %540 = extractelement <2 x i64> %539, i32 0
  %541 = extractelement <2 x i64> %539, i32 1
  %542 = bitcast i64 %540 to <2 x i32>
  %543 = shufflevector <2 x i32> %542, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %544 = bitcast i64 %541 to <2 x i32>
  %545 = shufflevector <2 x i32> %544, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %546 = shufflevector <4 x i32> %543, <4 x i32> %545, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %547 = bitcast <4 x i32> %487 to <2 x i64>
  %548 = xor <2 x i64> %547, <i64 -1, i64 -1>
  %549 = extractelement <2 x i64> %548, i32 0
  %550 = extractelement <2 x i64> %548, i32 1
  %551 = bitcast i64 %549 to <2 x i32>
  %552 = shufflevector <2 x i32> %551, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %553 = bitcast i64 %550 to <2 x i32>
  %554 = shufflevector <2 x i32> %553, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %555 = shufflevector <4 x i32> %552, <4 x i32> %554, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %556 = shufflevector <4 x float> %395, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %557 = bitcast <2 x float> %556 to <2 x i32>
  %558 = shufflevector <4 x float> %395, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %559 = bitcast <2 x float> %558 to <2 x i32>
  %560 = shufflevector <2 x i32> %557, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %561 = shufflevector <2 x i32> %559, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %562 = shufflevector <4 x i32> %560, <4 x i32> %561, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %563 = and <4 x i32> %555, %562
  %564 = bitcast <4 x i32> %563 to <2 x i64>
  %565 = extractelement <2 x i64> %564, i32 0
  %566 = extractelement <2 x i64> %564, i32 1
  %567 = bitcast i64 %565 to <2 x i32>
  %568 = shufflevector <2 x i32> %567, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %569 = bitcast i64 %566 to <2 x i32>
  %570 = shufflevector <2 x i32> %569, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %571 = shufflevector <4 x i32> %568, <4 x i32> %570, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %572 = or <4 x i32> %571, %546
  %573 = bitcast <4 x i32> %572 to <2 x i64>
  %574 = extractelement <2 x i64> %573, i32 0
  %575 = extractelement <2 x i64> %573, i32 1
  %576 = bitcast i64 %574 to <2 x i32>
  %577 = bitcast i64 %575 to <2 x i32>
  %578 = shufflevector <2 x i32> %529, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %579 = shufflevector <2 x i32> %530, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %580 = shufflevector <4 x i32> %578, <4 x i32> %579, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %581 = and <4 x i32> %451, %580
  %582 = bitcast <4 x i32> %581 to <2 x i64>
  %583 = extractelement <2 x i64> %582, i32 0
  %584 = extractelement <2 x i64> %582, i32 1
  %585 = bitcast i64 %583 to <2 x i32>
  %586 = shufflevector <2 x i32> %585, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %587 = bitcast i64 %584 to <2 x i32>
  %588 = shufflevector <2 x i32> %587, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %589 = shufflevector <4 x i32> %586, <4 x i32> %588, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %590 = bitcast <4 x i32> %451 to <2 x i64>
  %591 = xor <2 x i64> %590, <i64 -1, i64 -1>
  %592 = extractelement <2 x i64> %591, i32 0
  %593 = extractelement <2 x i64> %591, i32 1
  %594 = bitcast i64 %592 to <2 x i32>
  %595 = shufflevector <2 x i32> %594, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %596 = bitcast i64 %593 to <2 x i32>
  %597 = shufflevector <2 x i32> %596, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %598 = shufflevector <4 x i32> %595, <4 x i32> %597, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %599 = shufflevector <2 x i32> %576, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %600 = shufflevector <2 x i32> %577, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %601 = shufflevector <4 x i32> %599, <4 x i32> %600, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %602 = and <4 x i32> %598, %601
  %603 = bitcast <4 x i32> %602 to <2 x i64>
  %604 = extractelement <2 x i64> %603, i32 0
  %605 = extractelement <2 x i64> %603, i32 1
  %606 = bitcast i64 %604 to <2 x i32>
  %607 = shufflevector <2 x i32> %606, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %608 = bitcast i64 %605 to <2 x i32>
  %609 = shufflevector <2 x i32> %608, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %610 = shufflevector <4 x i32> %607, <4 x i32> %609, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %611 = or <4 x i32> %610, %589
  %612 = bitcast <4 x i32> %611 to <2 x i64>
  %613 = extractelement <2 x i64> %612, i32 0
  %614 = extractelement <2 x i64> %612, i32 1
  %615 = bitcast i64 %613 to <2 x i32>
  %616 = bitcast i64 %614 to <2 x i32>
  %617 = shufflevector <4 x float> %397, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %618 = bitcast <2 x float> %617 to <2 x i32>
  %619 = shufflevector <4 x float> %397, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %620 = bitcast <2 x float> %619 to <2 x i32>
  %621 = shufflevector <2 x i32> %618, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %622 = shufflevector <2 x i32> %620, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %623 = shufflevector <4 x i32> %621, <4 x i32> %622, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %624 = and <4 x i32> %523, %623
  %625 = bitcast <4 x i32> %624 to <2 x i64>
  %626 = extractelement <2 x i64> %625, i32 0
  %627 = extractelement <2 x i64> %625, i32 1
  %628 = bitcast i64 %626 to <2 x i32>
  %629 = shufflevector <2 x i32> %628, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %630 = bitcast i64 %627 to <2 x i32>
  %631 = shufflevector <2 x i32> %630, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %632 = shufflevector <4 x i32> %629, <4 x i32> %631, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %633 = bitcast <4 x i32> %523 to <2 x i64>
  %634 = xor <2 x i64> %633, <i64 -1, i64 -1>
  %635 = extractelement <2 x i64> %634, i32 0
  %636 = extractelement <2 x i64> %634, i32 1
  %637 = bitcast i64 %635 to <2 x i32>
  %638 = shufflevector <2 x i32> %637, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %639 = bitcast i64 %636 to <2 x i32>
  %640 = shufflevector <2 x i32> %639, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %641 = shufflevector <4 x i32> %638, <4 x i32> %640, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %642 = shufflevector <4 x float> %399, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %643 = bitcast <2 x float> %642 to <2 x i32>
  %644 = shufflevector <4 x float> %399, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %645 = bitcast <2 x float> %644 to <2 x i32>
  %646 = shufflevector <2 x i32> %643, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %647 = shufflevector <2 x i32> %645, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %648 = shufflevector <4 x i32> %646, <4 x i32> %647, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %649 = and <4 x i32> %641, %648
  %650 = bitcast <4 x i32> %649 to <2 x i64>
  %651 = extractelement <2 x i64> %650, i32 0
  %652 = extractelement <2 x i64> %650, i32 1
  %653 = bitcast i64 %651 to <2 x i32>
  %654 = shufflevector <2 x i32> %653, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %655 = bitcast i64 %652 to <2 x i32>
  %656 = shufflevector <2 x i32> %655, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %657 = shufflevector <4 x i32> %654, <4 x i32> %656, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %658 = or <4 x i32> %657, %632
  %659 = bitcast <4 x i32> %658 to <2 x i64>
  %660 = extractelement <2 x i64> %659, i32 0
  %661 = extractelement <2 x i64> %659, i32 1
  %662 = bitcast i64 %660 to <2 x i32>
  %663 = bitcast i64 %661 to <2 x i32>
  %664 = shufflevector <2 x i32> %662, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %665 = shufflevector <2 x i32> %663, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %666 = shufflevector <4 x i32> %664, <4 x i32> %665, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %667 = and <4 x i32> %451, %666
  %668 = bitcast <4 x i32> %667 to <2 x i64>
  %669 = extractelement <2 x i64> %668, i32 0
  %670 = extractelement <2 x i64> %668, i32 1
  %671 = bitcast i64 %669 to <2 x i32>
  %672 = shufflevector <2 x i32> %671, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %673 = bitcast i64 %670 to <2 x i32>
  %674 = shufflevector <2 x i32> %673, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %675 = shufflevector <4 x i32> %672, <4 x i32> %674, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %676 = bitcast <4 x i32> %598 to <2 x i64>
  %677 = and <2 x i64> %676, <i64 4575657222473777152, i64 4575657222473777152>
  %678 = extractelement <2 x i64> %677, i32 0
  %679 = extractelement <2 x i64> %677, i32 1
  %680 = bitcast i64 %678 to <2 x i32>
  %681 = shufflevector <2 x i32> %680, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %682 = bitcast i64 %679 to <2 x i32>
  %683 = shufflevector <2 x i32> %682, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %684 = shufflevector <4 x i32> %681, <4 x i32> %683, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %685 = or <4 x i32> %684, %675
  %686 = bitcast <4 x i32> %685 to <2 x i64>
  %687 = extractelement <2 x i64> %686, i32 0
  %688 = extractelement <2 x i64> %686, i32 1
  %689 = bitcast i64 %687 to <2 x i32>
  %690 = bitcast i64 %688 to <2 x i32>
  %691 = shufflevector <2 x i32> %615, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %692 = shufflevector <2 x i32> %616, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %693 = shufflevector <4 x i32> %691, <4 x i32> %692, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %694 = and <4 x i32> %693, %442
  %695 = bitcast <4 x i32> %694 to <2 x i64>
  %696 = extractelement <2 x i64> %695, i32 0
  %697 = extractelement <2 x i64> %695, i32 1
  %698 = bitcast i64 %696 to <2 x i32>
  %699 = shufflevector <2 x i32> %698, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %700 = bitcast i64 %697 to <2 x i32>
  %701 = shufflevector <2 x i32> %700, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %702 = shufflevector <4 x i32> %699, <4 x i32> %701, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %703 = bitcast <4 x i32> %442 to <2 x i64>
  %704 = xor <2 x i64> %703, <i64 -1, i64 -1>
  %705 = extractelement <2 x i64> %704, i32 0
  %706 = extractelement <2 x i64> %704, i32 1
  %707 = bitcast i64 %705 to <2 x i32>
  %708 = shufflevector <2 x i32> %707, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %709 = bitcast i64 %706 to <2 x i32>
  %710 = shufflevector <2 x i32> %709, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %711 = shufflevector <4 x i32> %708, <4 x i32> %710, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %712 = shufflevector <2 x i32> %689, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %713 = shufflevector <2 x i32> %690, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %714 = shufflevector <4 x i32> %712, <4 x i32> %713, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %715 = and <4 x i32> %714, %711
  %716 = bitcast <4 x i32> %715 to <2 x i64>
  %717 = extractelement <2 x i64> %716, i32 0
  %718 = extractelement <2 x i64> %716, i32 1
  %719 = bitcast i64 %717 to <2 x i32>
  %720 = shufflevector <2 x i32> %719, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %721 = bitcast i64 %718 to <2 x i32>
  %722 = shufflevector <2 x i32> %721, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %723 = shufflevector <4 x i32> %720, <4 x i32> %722, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %724 = or <4 x i32> %723, %702
  %725 = bitcast <4 x i32> %724 to <2 x i64>
  %726 = extractelement <2 x i64> %725, i32 0
  %727 = extractelement <2 x i64> %725, i32 1
  %728 = bitcast i64 %726 to <2 x float>
  %729 = bitcast i64 %727 to <2 x float>
  %730 = shufflevector <2 x float> %728, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %731 = shufflevector <2 x float> %729, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %732 = shufflevector <4 x float> %730, <4 x float> %731, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %733 = fmul <4 x float> %397, %403
  %734 = fmul <4 x float> %401, %399
  %735 = fsub <4 x float> %733, %734
  %736 = shufflevector <4 x float> %735, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %737 = shufflevector <4 x float> %735, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %738 = bitcast <2 x float> %736 to <2 x i32>
  %739 = bitcast <2 x float> %737 to <2 x i32>
  %740 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %401
  %741 = shufflevector <4 x float> %740, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %742 = shufflevector <4 x float> %740, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %743 = bitcast <2 x float> %741 to <2 x i32>
  %744 = bitcast <2 x float> %742 to <2 x i32>
  %745 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %403
  %746 = shufflevector <4 x float> %745, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %747 = shufflevector <4 x float> %745, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %748 = bitcast <2 x float> %746 to <2 x i32>
  %749 = bitcast <2 x float> %747 to <2 x i32>
  %750 = shufflevector <2 x i32> %743, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %751 = shufflevector <2 x i32> %744, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %752 = shufflevector <4 x i32> %750, <4 x i32> %751, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %753 = and <4 x i32> %487, %752
  %754 = bitcast <4 x i32> %753 to <2 x i64>
  %755 = extractelement <2 x i64> %754, i32 0
  %756 = extractelement <2 x i64> %754, i32 1
  %757 = bitcast i64 %755 to <2 x i32>
  %758 = shufflevector <2 x i32> %757, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %759 = bitcast i64 %756 to <2 x i32>
  %760 = shufflevector <2 x i32> %759, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %761 = shufflevector <4 x i32> %758, <4 x i32> %760, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %762 = shufflevector <2 x i32> %748, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %763 = shufflevector <2 x i32> %749, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %764 = shufflevector <4 x i32> %762, <4 x i32> %763, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %765 = and <4 x i32> %555, %764
  %766 = bitcast <4 x i32> %765 to <2 x i64>
  %767 = extractelement <2 x i64> %766, i32 0
  %768 = extractelement <2 x i64> %766, i32 1
  %769 = bitcast i64 %767 to <2 x i32>
  %770 = shufflevector <2 x i32> %769, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %771 = bitcast i64 %768 to <2 x i32>
  %772 = shufflevector <2 x i32> %771, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %773 = shufflevector <4 x i32> %770, <4 x i32> %772, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %774 = or <4 x i32> %773, %761
  %775 = bitcast <4 x i32> %774 to <2 x i64>
  %776 = extractelement <2 x i64> %775, i32 0
  %777 = extractelement <2 x i64> %775, i32 1
  %778 = bitcast i64 %776 to <2 x i32>
  %779 = bitcast i64 %777 to <2 x i32>
  %780 = shufflevector <2 x i32> %738, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %781 = shufflevector <2 x i32> %739, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %782 = shufflevector <4 x i32> %780, <4 x i32> %781, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %783 = and <4 x i32> %451, %782
  %784 = bitcast <4 x i32> %783 to <2 x i64>
  %785 = extractelement <2 x i64> %784, i32 0
  %786 = extractelement <2 x i64> %784, i32 1
  %787 = bitcast i64 %785 to <2 x i32>
  %788 = shufflevector <2 x i32> %787, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %789 = bitcast i64 %786 to <2 x i32>
  %790 = shufflevector <2 x i32> %789, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %791 = shufflevector <4 x i32> %788, <4 x i32> %790, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %792 = shufflevector <2 x i32> %778, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %793 = shufflevector <2 x i32> %779, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %794 = shufflevector <4 x i32> %792, <4 x i32> %793, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %795 = and <4 x i32> %598, %794
  %796 = bitcast <4 x i32> %795 to <2 x i64>
  %797 = extractelement <2 x i64> %796, i32 0
  %798 = extractelement <2 x i64> %796, i32 1
  %799 = bitcast i64 %797 to <2 x i32>
  %800 = shufflevector <2 x i32> %799, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %801 = bitcast i64 %798 to <2 x i32>
  %802 = shufflevector <2 x i32> %801, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %803 = shufflevector <4 x i32> %800, <4 x i32> %802, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %804 = or <4 x i32> %803, %791
  %805 = bitcast <4 x i32> %804 to <2 x i64>
  %806 = extractelement <2 x i64> %805, i32 0
  %807 = extractelement <2 x i64> %805, i32 1
  %808 = bitcast i64 %806 to <2 x i32>
  %809 = bitcast i64 %807 to <2 x i32>
  %810 = shufflevector <2 x i32> %808, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %811 = shufflevector <2 x i32> %809, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %812 = shufflevector <4 x i32> %810, <4 x i32> %811, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %813 = and <4 x i32> %812, %442
  %814 = bitcast <4 x i32> %813 to <2 x i64>
  %815 = extractelement <2 x i64> %814, i32 0
  %816 = extractelement <2 x i64> %814, i32 1
  %817 = bitcast i64 %815 to <2 x i32>
  %818 = shufflevector <2 x i32> %817, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %819 = bitcast i64 %816 to <2 x i32>
  %820 = shufflevector <2 x i32> %819, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %821 = shufflevector <4 x i32> %818, <4 x i32> %820, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %822 = bitcast <4 x i32> %821 to <2 x i64>
  %823 = extractelement <2 x i64> %822, i32 0
  %824 = extractelement <2 x i64> %822, i32 1
  %825 = bitcast i64 %823 to <2 x float>
  %826 = bitcast i64 %824 to <2 x float>
  %827 = shufflevector <2 x float> %825, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %828 = shufflevector <2 x float> %826, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %829 = shufflevector <4 x float> %827, <4 x float> %828, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %830 = fdiv <4 x float> %829, %732
  %831 = fmul <4 x float> %401, %395
  %832 = fmul <4 x float> %391, %403
  %833 = fsub <4 x float> %831, %832
  %834 = shufflevector <4 x float> %833, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %835 = shufflevector <4 x float> %833, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %836 = bitcast <2 x float> %834 to <2 x i32>
  %837 = bitcast <2 x float> %835 to <2 x i32>
  %838 = and <4 x i32> %523, %752
  %839 = bitcast <4 x i32> %838 to <2 x i64>
  %840 = extractelement <2 x i64> %839, i32 0
  %841 = extractelement <2 x i64> %839, i32 1
  %842 = bitcast i64 %840 to <2 x i32>
  %843 = shufflevector <2 x i32> %842, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %844 = bitcast i64 %841 to <2 x i32>
  %845 = shufflevector <2 x i32> %844, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %846 = shufflevector <4 x i32> %843, <4 x i32> %845, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %847 = and <4 x i32> %641, %764
  %848 = bitcast <4 x i32> %847 to <2 x i64>
  %849 = extractelement <2 x i64> %848, i32 0
  %850 = extractelement <2 x i64> %848, i32 1
  %851 = bitcast i64 %849 to <2 x i32>
  %852 = shufflevector <2 x i32> %851, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %853 = bitcast i64 %850 to <2 x i32>
  %854 = shufflevector <2 x i32> %853, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %855 = shufflevector <4 x i32> %852, <4 x i32> %854, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %856 = or <4 x i32> %855, %846
  %857 = bitcast <4 x i32> %856 to <2 x i64>
  %858 = extractelement <2 x i64> %857, i32 0
  %859 = extractelement <2 x i64> %857, i32 1
  %860 = bitcast i64 %858 to <2 x i32>
  %861 = bitcast i64 %859 to <2 x i32>
  %862 = shufflevector <2 x i32> %836, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %863 = shufflevector <2 x i32> %837, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %864 = shufflevector <4 x i32> %862, <4 x i32> %863, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %865 = and <4 x i32> %442, %864
  %866 = bitcast <4 x i32> %865 to <2 x i64>
  %867 = extractelement <2 x i64> %866, i32 0
  %868 = extractelement <2 x i64> %866, i32 1
  %869 = bitcast i64 %867 to <2 x i32>
  %870 = shufflevector <2 x i32> %869, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %871 = bitcast i64 %868 to <2 x i32>
  %872 = shufflevector <2 x i32> %871, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %873 = shufflevector <4 x i32> %870, <4 x i32> %872, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %874 = shufflevector <2 x i32> %860, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %875 = shufflevector <2 x i32> %861, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %876 = shufflevector <4 x i32> %874, <4 x i32> %875, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %877 = and <4 x i32> %711, %876
  %878 = bitcast <4 x i32> %877 to <2 x i64>
  %879 = extractelement <2 x i64> %878, i32 0
  %880 = extractelement <2 x i64> %878, i32 1
  %881 = bitcast i64 %879 to <2 x i32>
  %882 = shufflevector <2 x i32> %881, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %883 = bitcast i64 %880 to <2 x i32>
  %884 = shufflevector <2 x i32> %883, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %885 = shufflevector <4 x i32> %882, <4 x i32> %884, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %886 = or <4 x i32> %885, %873
  %887 = bitcast <4 x i32> %886 to <2 x i64>
  %888 = extractelement <2 x i64> %887, i32 0
  %889 = extractelement <2 x i64> %887, i32 1
  %890 = bitcast i64 %888 to <2 x i32>
  %891 = bitcast i64 %889 to <2 x i32>
  %892 = shufflevector <2 x i32> %890, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %893 = shufflevector <2 x i32> %891, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %894 = shufflevector <4 x i32> %892, <4 x i32> %893, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %895 = and <4 x i32> %894, %451
  %896 = bitcast <4 x i32> %895 to <2 x i64>
  %897 = extractelement <2 x i64> %896, i32 0
  %898 = extractelement <2 x i64> %896, i32 1
  %899 = bitcast i64 %897 to <2 x i32>
  %900 = shufflevector <2 x i32> %899, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %901 = bitcast i64 %898 to <2 x i32>
  %902 = shufflevector <2 x i32> %901, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %903 = shufflevector <4 x i32> %900, <4 x i32> %902, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %904 = bitcast <4 x i32> %903 to <2 x i64>
  %905 = extractelement <2 x i64> %904, i32 0
  %906 = extractelement <2 x i64> %904, i32 1
  %907 = bitcast i64 %905 to <2 x float>
  %908 = bitcast i64 %906 to <2 x float>
  %909 = shufflevector <2 x float> %907, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %910 = shufflevector <2 x float> %908, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %911 = shufflevector <4 x float> %909, <4 x float> %910, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %912 = fdiv <4 x float> %911, %732
  br label %913

913:                                              ; preds = %431, %419
  %914 = phi <4 x float> [ %426, %419 ], [ %830, %431 ]
  %915 = phi <4 x float> [ %430, %419 ], [ %912, %431 ]
  %916 = phi <4 x float> [ %422, %419 ], [ %732, %431 ]
  %917 = fmul <4 x float> %198, %914
  %918 = fmul <4 x float> %385, %915
  %919 = fadd <4 x float> %917, %918
  %920 = fadd <4 x float> %6, %919
  %921 = shufflevector <4 x float> %920, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %922 = shufflevector <4 x float> %920, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %923 = bitcast %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0 to <2 x float>*
  store <2 x float> %921, <2 x float>* %923, align 16
  %924 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 0, i32 1
  %925 = bitcast %"struct.skvx::Vec.0"* %924 to <2 x float>*
  store <2 x float> %922, <2 x float>* %925, align 8
  %926 = fmul <4 x float> %196, %914
  %927 = fmul <4 x float> %386, %915
  %928 = fadd <4 x float> %926, %927
  %929 = fadd <4 x float> %15, %928
  %930 = shufflevector <4 x float> %929, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %931 = shufflevector <4 x float> %929, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %932 = bitcast %"struct.skvx::Vec"* %13 to <2 x float>*
  store <2 x float> %930, <2 x float>* %932, align 16
  %933 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 1, i32 1
  %934 = bitcast %"struct.skvx::Vec.0"* %933 to <2 x float>*
  store <2 x float> %931, <2 x float>* %934, align 8
  %935 = fmul <4 x float> %197, %914
  %936 = fmul <4 x float> %387, %915
  %937 = fadd <4 x float> %935, %936
  %938 = fadd <4 x float> %24, %937
  %939 = shufflevector <4 x float> %938, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %940 = shufflevector <4 x float> %938, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %941 = bitcast %"struct.skvx::Vec"* %22 to <2 x float>*
  store <2 x float> %939, <2 x float>* %941, align 16
  %942 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 2, i32 1
  %943 = bitcast %"struct.skvx::Vec.0"* %942 to <2 x float>*
  store <2 x float> %940, <2 x float>* %943, align 8
  %944 = load <4 x float>, <4 x float>* %23, align 16
  %945 = fcmp olt <4 x float> %944, zeroinitializer
  %946 = sext <4 x i1> %945 to <4 x i32>
  %947 = bitcast <4 x i32> %946 to <2 x i64>
  %948 = extractelement <2 x i64> %947, i32 0
  %949 = extractelement <2 x i64> %947, i32 1
  %950 = lshr i64 %948, 32
  %951 = or i64 %950, %948
  %952 = trunc i64 %951 to i32
  %953 = icmp eq i32 %952, 0
  br i1 %953, label %954, label %965

954:                                              ; preds = %913
  %955 = bitcast <4 x float> %938 to <2 x i64>
  %956 = extractelement <2 x i64> %955, i32 1
  %957 = bitcast <4 x float> %929 to <2 x i64>
  %958 = extractelement <2 x i64> %957, i32 1
  %959 = bitcast <4 x float> %920 to <2 x i64>
  %960 = extractelement <2 x i64> %959, i32 1
  %961 = lshr i64 %949, 32
  %962 = or i64 %961, %949
  %963 = trunc i64 %962 to i32
  %964 = icmp eq i32 %963, 0
  br i1 %964, label %1023, label %965

965:                                              ; preds = %954, %913
  %966 = bitcast i64 %948 to <2 x i32>
  %967 = shufflevector <2 x i32> %966, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %968 = bitcast i64 %949 to <2 x i32>
  %969 = shufflevector <2 x i32> %968, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %970 = shufflevector <4 x i32> %967, <4 x i32> %969, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %971 = bitcast <4 x i32> %970 to <2 x i64>
  %972 = and <2 x i64> %971, <i64 -4647714812233515008, i64 -4647714812233515008>
  %973 = extractelement <2 x i64> %972, i32 0
  %974 = extractelement <2 x i64> %972, i32 1
  %975 = bitcast i64 %973 to <2 x i32>
  %976 = shufflevector <2 x i32> %975, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %977 = bitcast i64 %974 to <2 x i32>
  %978 = shufflevector <2 x i32> %977, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %979 = shufflevector <4 x i32> %976, <4 x i32> %978, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %980 = xor <2 x i64> %971, <i64 -1, i64 -1>
  %981 = extractelement <2 x i64> %980, i32 0
  %982 = extractelement <2 x i64> %980, i32 1
  %983 = bitcast i64 %981 to <2 x i32>
  %984 = shufflevector <2 x i32> %983, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %985 = bitcast i64 %982 to <2 x i32>
  %986 = shufflevector <2 x i32> %985, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %987 = shufflevector <4 x i32> %984, <4 x i32> %986, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %988 = bitcast <4 x i32> %987 to <2 x i64>
  %989 = and <2 x i64> %988, <i64 4575657222473777152, i64 4575657222473777152>
  %990 = extractelement <2 x i64> %989, i32 0
  %991 = extractelement <2 x i64> %989, i32 1
  %992 = bitcast i64 %990 to <2 x i32>
  %993 = shufflevector <2 x i32> %992, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %994 = bitcast i64 %991 to <2 x i32>
  %995 = shufflevector <2 x i32> %994, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %996 = shufflevector <4 x i32> %993, <4 x i32> %995, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %997 = or <4 x i32> %996, %979
  %998 = bitcast <4 x i32> %997 to <2 x i64>
  %999 = extractelement <2 x i64> %998, i32 0
  %1000 = extractelement <2 x i64> %998, i32 1
  %1001 = bitcast i64 %999 to <2 x float>
  %1002 = bitcast i64 %1000 to <2 x float>
  %1003 = shufflevector <2 x float> %1001, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1004 = shufflevector <2 x float> %1002, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1005 = shufflevector <4 x float> %1003, <4 x float> %1004, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1006 = load <4 x float>, <4 x float>* %5, align 16
  %1007 = fmul <4 x float> %1005, %1006
  %1008 = shufflevector <4 x float> %1007, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1009 = bitcast <4 x float> %1007 to <2 x i64>
  %1010 = extractelement <2 x i64> %1009, i32 1
  %1011 = shufflevector <4 x float> %1007, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %1008, <2 x float>* %923, align 16
  store <2 x float> %1011, <2 x float>* %925, align 8
  %1012 = load <4 x float>, <4 x float>* %14, align 16
  %1013 = fmul <4 x float> %1005, %1012
  %1014 = shufflevector <4 x float> %1013, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1015 = bitcast <4 x float> %1013 to <2 x i64>
  %1016 = extractelement <2 x i64> %1015, i32 1
  %1017 = shufflevector <4 x float> %1013, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %1014, <2 x float>* %932, align 16
  store <2 x float> %1017, <2 x float>* %934, align 8
  %1018 = fmul <4 x float> %944, %1005
  %1019 = shufflevector <4 x float> %1018, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1020 = bitcast <4 x float> %1018 to <2 x i64>
  %1021 = extractelement <2 x i64> %1020, i32 1
  %1022 = shufflevector <4 x float> %1018, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %1019, <2 x float>* %941, align 16
  store <2 x float> %1022, <2 x float>* %943, align 8
  br label %1023

1023:                                             ; preds = %954, %965
  %1024 = phi i64 [ %956, %954 ], [ %1021, %965 ]
  %1025 = phi i64 [ %958, %954 ], [ %1016, %965 ]
  %1026 = phi i64 [ %960, %954 ], [ %1010, %965 ]
  %1027 = bitcast i64 %1026 to <2 x i32>
  %1028 = bitcast i64 %1025 to <2 x i32>
  %1029 = bitcast i64 %1024 to <2 x i32>
  %1030 = extractelement <4 x float> %916, i32 0
  %1031 = tail call float @llvm.fabs.f32(float %1030) #10
  %1032 = extractelement <4 x float> %916, i32 1
  %1033 = tail call float @llvm.fabs.f32(float %1032) #10
  %1034 = extractelement <4 x float> %916, i32 2
  %1035 = tail call float @llvm.fabs.f32(float %1034) #10
  %1036 = extractelement <4 x float> %916, i32 3
  %1037 = tail call float @llvm.fabs.f32(float %1036) #10
  %1038 = insertelement <4 x float> undef, float %1031, i32 0
  %1039 = insertelement <4 x float> %1038, float %1033, i32 1
  %1040 = insertelement <4 x float> undef, float %1035, i32 2
  %1041 = insertelement <4 x float> %1040, float %1037, i32 3
  %1042 = shufflevector <4 x float> %1039, <4 x float> %1041, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1043 = fcmp olt <4 x float> %1042, <float 0x3E112E0BE0000000, float 0x3E112E0BE0000000, float 0x3E112E0BE0000000, float 0x3E112E0BE0000000>
  %1044 = sext <4 x i1> %1043 to <4 x i32>
  %1045 = bitcast <4 x i32> %1044 to <2 x i64>
  %1046 = extractelement <2 x i64> %1045, i32 0
  %1047 = extractelement <2 x i64> %1045, i32 1
  %1048 = bitcast i64 %1046 to <2 x i32>
  %1049 = shufflevector <2 x i32> %1048, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1050 = bitcast i64 %1047 to <2 x i32>
  %1051 = shufflevector <2 x i32> %1050, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1052 = shufflevector <4 x i32> %1049, <4 x i32> %1051, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1053 = extractelement <2 x i32> %1048, i32 0
  %1054 = extractelement <2 x i32> %1048, i32 1
  %1055 = or i32 %1054, %1053
  %1056 = icmp eq i32 %1055, 0
  br i1 %1056, label %1057, label %1062

1057:                                             ; preds = %1023
  %1058 = extractelement <2 x i32> %1050, i32 0
  %1059 = extractelement <2 x i32> %1050, i32 1
  %1060 = or i32 %1059, %1058
  %1061 = icmp eq i32 %1060, 0
  br i1 %1061, label %1179, label %1062

1062:                                             ; preds = %1057, %1023
  %1063 = load <4 x float>, <4 x float>* %5, align 16
  %1064 = shufflevector <4 x float> %1063, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %1065 = shufflevector <4 x float> %1064, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1066 = shufflevector <4 x float> %1064, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1067 = bitcast <2 x float> %1065 to <2 x i32>
  %1068 = bitcast <2 x float> %1066 to <2 x i32>
  %1069 = shufflevector <2 x i32> %1067, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1070 = shufflevector <2 x i32> %1068, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1071 = shufflevector <4 x i32> %1069, <4 x i32> %1070, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1072 = and <4 x i32> %1071, %1052
  %1073 = bitcast <4 x i32> %1072 to <2 x i64>
  %1074 = extractelement <2 x i64> %1073, i32 0
  %1075 = extractelement <2 x i64> %1073, i32 1
  %1076 = bitcast i64 %1074 to <2 x i32>
  %1077 = shufflevector <2 x i32> %1076, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1078 = bitcast i64 %1075 to <2 x i32>
  %1079 = shufflevector <2 x i32> %1078, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1080 = shufflevector <4 x i32> %1077, <4 x i32> %1079, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1081 = bitcast <4 x i32> %1052 to <2 x i64>
  %1082 = xor <2 x i64> %1081, <i64 -1, i64 -1>
  %1083 = extractelement <2 x i64> %1082, i32 0
  %1084 = extractelement <2 x i64> %1082, i32 1
  %1085 = bitcast i64 %1083 to <2 x i32>
  %1086 = shufflevector <2 x i32> %1085, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1087 = bitcast i64 %1084 to <2 x i32>
  %1088 = shufflevector <2 x i32> %1087, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1089 = shufflevector <4 x i32> %1086, <4 x i32> %1088, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1090 = bitcast <4 x float> %1063 to <2 x i64>
  %1091 = extractelement <2 x i64> %1090, i32 0
  %1092 = bitcast i64 %1091 to <2 x i32>
  %1093 = shufflevector <2 x i32> %1092, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1094 = shufflevector <2 x i32> %1027, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1095 = shufflevector <4 x i32> %1093, <4 x i32> %1094, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1096 = and <4 x i32> %1095, %1089
  %1097 = bitcast <4 x i32> %1096 to <2 x i64>
  %1098 = extractelement <2 x i64> %1097, i32 0
  %1099 = extractelement <2 x i64> %1097, i32 1
  %1100 = bitcast i64 %1098 to <2 x i32>
  %1101 = shufflevector <2 x i32> %1100, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1102 = bitcast i64 %1099 to <2 x i32>
  %1103 = shufflevector <2 x i32> %1102, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1104 = shufflevector <4 x i32> %1101, <4 x i32> %1103, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1105 = or <4 x i32> %1104, %1080
  %1106 = bitcast %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0 to <4 x i32>*
  store <4 x i32> %1105, <4 x i32>* %1106, align 16
  %1107 = load <4 x float>, <4 x float>* %14, align 16
  %1108 = shufflevector <4 x float> %1107, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %1109 = shufflevector <4 x float> %1108, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1110 = shufflevector <4 x float> %1108, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1111 = bitcast <2 x float> %1109 to <2 x i32>
  %1112 = bitcast <2 x float> %1110 to <2 x i32>
  %1113 = shufflevector <2 x i32> %1111, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1114 = shufflevector <2 x i32> %1112, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1115 = shufflevector <4 x i32> %1113, <4 x i32> %1114, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1116 = and <4 x i32> %1115, %1052
  %1117 = bitcast <4 x i32> %1116 to <2 x i64>
  %1118 = extractelement <2 x i64> %1117, i32 0
  %1119 = extractelement <2 x i64> %1117, i32 1
  %1120 = bitcast i64 %1118 to <2 x i32>
  %1121 = shufflevector <2 x i32> %1120, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1122 = bitcast i64 %1119 to <2 x i32>
  %1123 = shufflevector <2 x i32> %1122, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1124 = shufflevector <4 x i32> %1121, <4 x i32> %1123, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1125 = bitcast <4 x float> %1107 to <2 x i64>
  %1126 = extractelement <2 x i64> %1125, i32 0
  %1127 = bitcast i64 %1126 to <2 x i32>
  %1128 = shufflevector <2 x i32> %1127, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1129 = shufflevector <2 x i32> %1028, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1130 = shufflevector <4 x i32> %1128, <4 x i32> %1129, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1131 = and <4 x i32> %1130, %1089
  %1132 = bitcast <4 x i32> %1131 to <2 x i64>
  %1133 = extractelement <2 x i64> %1132, i32 0
  %1134 = extractelement <2 x i64> %1132, i32 1
  %1135 = bitcast i64 %1133 to <2 x i32>
  %1136 = shufflevector <2 x i32> %1135, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1137 = bitcast i64 %1134 to <2 x i32>
  %1138 = shufflevector <2 x i32> %1137, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1139 = shufflevector <4 x i32> %1136, <4 x i32> %1138, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1140 = or <4 x i32> %1139, %1124
  %1141 = bitcast %"struct.skvx::Vec"* %13 to <4 x i32>*
  store <4 x i32> %1140, <4 x i32>* %1141, align 16
  %1142 = icmp eq %"struct.skvx::Vec"* %22, null
  br i1 %1142, label %1179, label %1143

1143:                                             ; preds = %1062
  %1144 = load <4 x float>, <4 x float>* %23, align 16
  %1145 = shufflevector <4 x float> %1144, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %1146 = shufflevector <4 x float> %1145, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1147 = shufflevector <4 x float> %1145, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1148 = bitcast <2 x float> %1146 to <2 x i32>
  %1149 = bitcast <2 x float> %1147 to <2 x i32>
  %1150 = shufflevector <2 x i32> %1148, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1151 = shufflevector <2 x i32> %1149, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1152 = shufflevector <4 x i32> %1150, <4 x i32> %1151, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1153 = and <4 x i32> %1152, %1052
  %1154 = bitcast <4 x i32> %1153 to <2 x i64>
  %1155 = extractelement <2 x i64> %1154, i32 0
  %1156 = extractelement <2 x i64> %1154, i32 1
  %1157 = bitcast i64 %1155 to <2 x i32>
  %1158 = shufflevector <2 x i32> %1157, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1159 = bitcast i64 %1156 to <2 x i32>
  %1160 = shufflevector <2 x i32> %1159, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1161 = shufflevector <4 x i32> %1158, <4 x i32> %1160, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1162 = bitcast <4 x float> %1144 to <2 x i64>
  %1163 = extractelement <2 x i64> %1162, i32 0
  %1164 = bitcast i64 %1163 to <2 x i32>
  %1165 = shufflevector <2 x i32> %1164, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1166 = shufflevector <2 x i32> %1029, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1167 = shufflevector <4 x i32> %1165, <4 x i32> %1166, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1168 = and <4 x i32> %1167, %1089
  %1169 = bitcast <4 x i32> %1168 to <2 x i64>
  %1170 = extractelement <2 x i64> %1169, i32 0
  %1171 = extractelement <2 x i64> %1169, i32 1
  %1172 = bitcast i64 %1170 to <2 x i32>
  %1173 = shufflevector <2 x i32> %1172, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1174 = bitcast i64 %1171 to <2 x i32>
  %1175 = shufflevector <2 x i32> %1174, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1176 = shufflevector <4 x i32> %1173, <4 x i32> %1175, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1177 = or <4 x i32> %1176, %1161
  %1178 = bitcast %"struct.skvx::Vec"* %22 to <4 x i32>*
  store <4 x i32> %1177, <4 x i32>* %1178, align 16
  br label %1179

1179:                                             ; preds = %1057, %1062, %1143
  %1180 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 6
  %1181 = load i32, i32* %1180, align 16
  %1182 = icmp sgt i32 %1181, 0
  br i1 %1182, label %1183, label %1780

1183:                                             ; preds = %1179
  %1184 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 3
  %1185 = bitcast %"struct.skvx::Vec"* %1184 to <4 x float>*
  %1186 = load <4 x float>, <4 x float>* %1185, align 16
  %1187 = shufflevector <4 x float> %1186, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1188 = shufflevector <2 x float> %1187, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1189 = shufflevector <4 x float> %1188, <4 x float> %1186, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1190 = shufflevector <4 x float> %1186, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1191 = shufflevector <4 x float> %1186, <4 x float> %1190, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1192 = fsub <4 x float> %1189, %1191
  %1193 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 4
  %1194 = bitcast %"struct.skvx::Vec"* %1193 to <4 x float>*
  %1195 = load <4 x float>, <4 x float>* %1194, align 16
  %1196 = shufflevector <4 x float> %1195, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1197 = shufflevector <2 x float> %1196, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1198 = shufflevector <4 x float> %1197, <4 x float> %1195, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1199 = shufflevector <4 x float> %1195, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1200 = shufflevector <4 x float> %1195, <4 x float> %1199, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1201 = fsub <4 x float> %1198, %1200
  %1202 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 5
  %1203 = bitcast %"struct.skvx::Vec"* %1202 to <4 x float>*
  %1204 = load <4 x float>, <4 x float>* %1203, align 16
  %1205 = shufflevector <4 x float> %1204, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1206 = shufflevector <2 x float> %1205, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1207 = shufflevector <4 x float> %1206, <4 x float> %1204, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1208 = shufflevector <4 x float> %1204, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1209 = shufflevector <4 x float> %1204, <4 x float> %1208, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1210 = fsub <4 x float> %1207, %1209
  br i1 %47, label %1211, label %1216

1211:                                             ; preds = %1183
  %1212 = extractelement <2 x i32> %41, i32 0
  %1213 = extractelement <2 x i32> %41, i32 1
  %1214 = or i32 %1213, %1212
  %1215 = icmp eq i32 %1214, 0
  br i1 %1215, label %1358, label %1216

1216:                                             ; preds = %1211, %1183
  %1217 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %1192
  %1218 = shufflevector <4 x float> %1217, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1219 = shufflevector <4 x float> %1218, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1220 = shufflevector <4 x float> %1218, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1221 = bitcast <2 x float> %1219 to <2 x i32>
  %1222 = bitcast <2 x float> %1220 to <2 x i32>
  %1223 = shufflevector <2 x i32> %1221, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1224 = shufflevector <2 x i32> %1222, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1225 = shufflevector <4 x i32> %1223, <4 x i32> %1224, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1226 = and <4 x i32> %1225, %43
  %1227 = bitcast <4 x i32> %1226 to <2 x i64>
  %1228 = extractelement <2 x i64> %1227, i32 0
  %1229 = extractelement <2 x i64> %1227, i32 1
  %1230 = bitcast i64 %1228 to <2 x i32>
  %1231 = shufflevector <2 x i32> %1230, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1232 = bitcast i64 %1229 to <2 x i32>
  %1233 = shufflevector <2 x i32> %1232, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1234 = shufflevector <4 x i32> %1231, <4 x i32> %1233, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1235 = bitcast <4 x i32> %43 to <2 x i64>
  %1236 = xor <2 x i64> %1235, <i64 -1, i64 -1>
  %1237 = extractelement <2 x i64> %1236, i32 0
  %1238 = extractelement <2 x i64> %1236, i32 1
  %1239 = bitcast i64 %1237 to <2 x i32>
  %1240 = shufflevector <2 x i32> %1239, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1241 = bitcast i64 %1238 to <2 x i32>
  %1242 = shufflevector <2 x i32> %1241, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1243 = shufflevector <4 x i32> %1240, <4 x i32> %1242, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1244 = bitcast <4 x float> %1192 to <2 x i64>
  %1245 = extractelement <2 x i64> %1244, i32 0
  %1246 = bitcast i64 %1245 to <2 x i32>
  %1247 = shufflevector <4 x float> %1192, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1248 = bitcast <2 x float> %1247 to <2 x i32>
  %1249 = shufflevector <2 x i32> %1246, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1250 = shufflevector <2 x i32> %1248, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1251 = shufflevector <4 x i32> %1249, <4 x i32> %1250, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1252 = and <4 x i32> %1251, %1243
  %1253 = bitcast <4 x i32> %1252 to <2 x i64>
  %1254 = extractelement <2 x i64> %1253, i32 0
  %1255 = extractelement <2 x i64> %1253, i32 1
  %1256 = bitcast i64 %1254 to <2 x i32>
  %1257 = shufflevector <2 x i32> %1256, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1258 = bitcast i64 %1255 to <2 x i32>
  %1259 = shufflevector <2 x i32> %1258, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1260 = shufflevector <4 x i32> %1257, <4 x i32> %1259, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1261 = or <4 x i32> %1260, %1234
  %1262 = bitcast <4 x i32> %1261 to <2 x i64>
  %1263 = extractelement <2 x i64> %1262, i32 0
  %1264 = extractelement <2 x i64> %1262, i32 1
  %1265 = bitcast i64 %1263 to <2 x float>
  %1266 = shufflevector <2 x float> %1265, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1267 = bitcast i64 %1264 to <2 x float>
  %1268 = shufflevector <2 x float> %1267, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1269 = shufflevector <4 x float> %1266, <4 x float> %1268, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1270 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %1201
  %1271 = shufflevector <4 x float> %1270, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1272 = shufflevector <4 x float> %1271, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1273 = shufflevector <4 x float> %1271, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1274 = bitcast <2 x float> %1272 to <2 x i32>
  %1275 = bitcast <2 x float> %1273 to <2 x i32>
  %1276 = shufflevector <2 x i32> %1274, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1277 = shufflevector <2 x i32> %1275, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1278 = shufflevector <4 x i32> %1276, <4 x i32> %1277, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1279 = and <4 x i32> %1278, %43
  %1280 = bitcast <4 x i32> %1279 to <2 x i64>
  %1281 = extractelement <2 x i64> %1280, i32 0
  %1282 = extractelement <2 x i64> %1280, i32 1
  %1283 = bitcast i64 %1281 to <2 x i32>
  %1284 = shufflevector <2 x i32> %1283, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1285 = bitcast i64 %1282 to <2 x i32>
  %1286 = shufflevector <2 x i32> %1285, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1287 = shufflevector <4 x i32> %1284, <4 x i32> %1286, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1288 = bitcast <4 x float> %1201 to <2 x i64>
  %1289 = extractelement <2 x i64> %1288, i32 0
  %1290 = bitcast i64 %1289 to <2 x i32>
  %1291 = shufflevector <4 x float> %1201, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1292 = bitcast <2 x float> %1291 to <2 x i32>
  %1293 = shufflevector <2 x i32> %1290, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1294 = shufflevector <2 x i32> %1292, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1295 = shufflevector <4 x i32> %1293, <4 x i32> %1294, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1296 = and <4 x i32> %1295, %1243
  %1297 = bitcast <4 x i32> %1296 to <2 x i64>
  %1298 = extractelement <2 x i64> %1297, i32 0
  %1299 = extractelement <2 x i64> %1297, i32 1
  %1300 = bitcast i64 %1298 to <2 x i32>
  %1301 = shufflevector <2 x i32> %1300, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1302 = bitcast i64 %1299 to <2 x i32>
  %1303 = shufflevector <2 x i32> %1302, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1304 = shufflevector <4 x i32> %1301, <4 x i32> %1303, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1305 = or <4 x i32> %1304, %1287
  %1306 = bitcast <4 x i32> %1305 to <2 x i64>
  %1307 = extractelement <2 x i64> %1306, i32 0
  %1308 = extractelement <2 x i64> %1306, i32 1
  %1309 = bitcast i64 %1307 to <2 x float>
  %1310 = shufflevector <2 x float> %1309, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1311 = bitcast i64 %1308 to <2 x float>
  %1312 = shufflevector <2 x float> %1311, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1313 = shufflevector <4 x float> %1310, <4 x float> %1312, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1314 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %1210
  %1315 = shufflevector <4 x float> %1314, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1316 = shufflevector <4 x float> %1315, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1317 = shufflevector <4 x float> %1315, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1318 = bitcast <2 x float> %1316 to <2 x i32>
  %1319 = bitcast <2 x float> %1317 to <2 x i32>
  %1320 = shufflevector <2 x i32> %1318, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1321 = shufflevector <2 x i32> %1319, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1322 = shufflevector <4 x i32> %1320, <4 x i32> %1321, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1323 = and <4 x i32> %1322, %43
  %1324 = bitcast <4 x i32> %1323 to <2 x i64>
  %1325 = extractelement <2 x i64> %1324, i32 0
  %1326 = extractelement <2 x i64> %1324, i32 1
  %1327 = bitcast i64 %1325 to <2 x i32>
  %1328 = shufflevector <2 x i32> %1327, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1329 = bitcast i64 %1326 to <2 x i32>
  %1330 = shufflevector <2 x i32> %1329, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1331 = shufflevector <4 x i32> %1328, <4 x i32> %1330, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1332 = bitcast <4 x float> %1210 to <2 x i64>
  %1333 = extractelement <2 x i64> %1332, i32 0
  %1334 = bitcast i64 %1333 to <2 x i32>
  %1335 = shufflevector <4 x float> %1210, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1336 = bitcast <2 x float> %1335 to <2 x i32>
  %1337 = shufflevector <2 x i32> %1334, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1338 = shufflevector <2 x i32> %1336, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1339 = shufflevector <4 x i32> %1337, <4 x i32> %1338, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1340 = and <4 x i32> %1339, %1243
  %1341 = bitcast <4 x i32> %1340 to <2 x i64>
  %1342 = extractelement <2 x i64> %1341, i32 0
  %1343 = extractelement <2 x i64> %1341, i32 1
  %1344 = bitcast i64 %1342 to <2 x i32>
  %1345 = shufflevector <2 x i32> %1344, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1346 = bitcast i64 %1343 to <2 x i32>
  %1347 = shufflevector <2 x i32> %1346, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1348 = shufflevector <4 x i32> %1345, <4 x i32> %1347, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1349 = or <4 x i32> %1348, %1331
  %1350 = bitcast <4 x i32> %1349 to <2 x i64>
  %1351 = extractelement <2 x i64> %1350, i32 0
  %1352 = extractelement <2 x i64> %1350, i32 1
  %1353 = bitcast i64 %1351 to <2 x float>
  %1354 = shufflevector <2 x float> %1353, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1355 = bitcast i64 %1352 to <2 x float>
  %1356 = shufflevector <2 x float> %1355, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1357 = shufflevector <4 x float> %1354, <4 x float> %1356, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %1358

1358:                                             ; preds = %1211, %1216
  %1359 = phi <4 x float> [ %1192, %1211 ], [ %1269, %1216 ]
  %1360 = phi <4 x float> [ %1201, %1211 ], [ %1313, %1216 ]
  %1361 = phi <4 x float> [ %1210, %1211 ], [ %1357, %1216 ]
  %1362 = shufflevector <4 x float> %1186, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 undef, i32 undef>
  %1363 = shufflevector <4 x float> %1186, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 3, i32 3>
  %1364 = shufflevector <4 x float> %1362, <4 x float> %1363, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1365 = shufflevector <4 x float> %1186, <4 x float> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %1366 = shufflevector <4 x float> %1186, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 2, i32 2>
  %1367 = shufflevector <4 x float> %1365, <4 x float> %1366, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1368 = fsub <4 x float> %1364, %1367
  %1369 = shufflevector <4 x float> %1195, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 undef, i32 undef>
  %1370 = shufflevector <4 x float> %1195, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 3, i32 3>
  %1371 = shufflevector <4 x float> %1369, <4 x float> %1370, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1372 = shufflevector <4 x float> %1195, <4 x float> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %1373 = shufflevector <4 x float> %1195, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 2, i32 2>
  %1374 = shufflevector <4 x float> %1372, <4 x float> %1373, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1375 = fsub <4 x float> %1371, %1374
  %1376 = shufflevector <4 x float> %1204, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 undef, i32 undef>
  %1377 = shufflevector <4 x float> %1204, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 3, i32 3>
  %1378 = shufflevector <4 x float> %1376, <4 x float> %1377, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1379 = shufflevector <4 x float> %1204, <4 x float> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %1380 = shufflevector <4 x float> %1204, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 2, i32 2>
  %1381 = shufflevector <4 x float> %1379, <4 x float> %1380, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1382 = fsub <4 x float> %1378, %1381
  br i1 %236, label %1383, label %1388

1383:                                             ; preds = %1358
  %1384 = extractelement <2 x i32> %230, i32 0
  %1385 = extractelement <2 x i32> %230, i32 1
  %1386 = or i32 %1385, %1384
  %1387 = icmp eq i32 %1386, 0
  br i1 %1387, label %1530, label %1388

1388:                                             ; preds = %1383, %1358
  %1389 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %1368
  %1390 = shufflevector <4 x float> %1389, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1391 = shufflevector <4 x float> %1390, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1392 = shufflevector <4 x float> %1390, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1393 = bitcast <2 x float> %1391 to <2 x i32>
  %1394 = bitcast <2 x float> %1392 to <2 x i32>
  %1395 = shufflevector <2 x i32> %1393, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1396 = shufflevector <2 x i32> %1394, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1397 = shufflevector <4 x i32> %1395, <4 x i32> %1396, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1398 = and <4 x i32> %1397, %232
  %1399 = bitcast <4 x i32> %1398 to <2 x i64>
  %1400 = extractelement <2 x i64> %1399, i32 0
  %1401 = extractelement <2 x i64> %1399, i32 1
  %1402 = bitcast i64 %1400 to <2 x i32>
  %1403 = shufflevector <2 x i32> %1402, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1404 = bitcast i64 %1401 to <2 x i32>
  %1405 = shufflevector <2 x i32> %1404, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1406 = shufflevector <4 x i32> %1403, <4 x i32> %1405, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1407 = bitcast <4 x i32> %232 to <2 x i64>
  %1408 = xor <2 x i64> %1407, <i64 -1, i64 -1>
  %1409 = extractelement <2 x i64> %1408, i32 0
  %1410 = extractelement <2 x i64> %1408, i32 1
  %1411 = bitcast i64 %1409 to <2 x i32>
  %1412 = shufflevector <2 x i32> %1411, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1413 = bitcast i64 %1410 to <2 x i32>
  %1414 = shufflevector <2 x i32> %1413, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1415 = shufflevector <4 x i32> %1412, <4 x i32> %1414, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1416 = bitcast <4 x float> %1368 to <2 x i64>
  %1417 = extractelement <2 x i64> %1416, i32 0
  %1418 = bitcast i64 %1417 to <2 x i32>
  %1419 = shufflevector <4 x float> %1368, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1420 = bitcast <2 x float> %1419 to <2 x i32>
  %1421 = shufflevector <2 x i32> %1418, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1422 = shufflevector <2 x i32> %1420, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1423 = shufflevector <4 x i32> %1421, <4 x i32> %1422, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1424 = and <4 x i32> %1423, %1415
  %1425 = bitcast <4 x i32> %1424 to <2 x i64>
  %1426 = extractelement <2 x i64> %1425, i32 0
  %1427 = extractelement <2 x i64> %1425, i32 1
  %1428 = bitcast i64 %1426 to <2 x i32>
  %1429 = shufflevector <2 x i32> %1428, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1430 = bitcast i64 %1427 to <2 x i32>
  %1431 = shufflevector <2 x i32> %1430, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1432 = shufflevector <4 x i32> %1429, <4 x i32> %1431, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1433 = or <4 x i32> %1432, %1406
  %1434 = bitcast <4 x i32> %1433 to <2 x i64>
  %1435 = extractelement <2 x i64> %1434, i32 0
  %1436 = extractelement <2 x i64> %1434, i32 1
  %1437 = bitcast i64 %1435 to <2 x float>
  %1438 = shufflevector <2 x float> %1437, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1439 = bitcast i64 %1436 to <2 x float>
  %1440 = shufflevector <2 x float> %1439, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1441 = shufflevector <4 x float> %1438, <4 x float> %1440, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1442 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %1375
  %1443 = shufflevector <4 x float> %1442, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1444 = shufflevector <4 x float> %1443, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1445 = shufflevector <4 x float> %1443, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1446 = bitcast <2 x float> %1444 to <2 x i32>
  %1447 = bitcast <2 x float> %1445 to <2 x i32>
  %1448 = shufflevector <2 x i32> %1446, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1449 = shufflevector <2 x i32> %1447, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1450 = shufflevector <4 x i32> %1448, <4 x i32> %1449, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1451 = and <4 x i32> %1450, %232
  %1452 = bitcast <4 x i32> %1451 to <2 x i64>
  %1453 = extractelement <2 x i64> %1452, i32 0
  %1454 = extractelement <2 x i64> %1452, i32 1
  %1455 = bitcast i64 %1453 to <2 x i32>
  %1456 = shufflevector <2 x i32> %1455, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1457 = bitcast i64 %1454 to <2 x i32>
  %1458 = shufflevector <2 x i32> %1457, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1459 = shufflevector <4 x i32> %1456, <4 x i32> %1458, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1460 = bitcast <4 x float> %1375 to <2 x i64>
  %1461 = extractelement <2 x i64> %1460, i32 0
  %1462 = bitcast i64 %1461 to <2 x i32>
  %1463 = shufflevector <4 x float> %1375, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1464 = bitcast <2 x float> %1463 to <2 x i32>
  %1465 = shufflevector <2 x i32> %1462, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1466 = shufflevector <2 x i32> %1464, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1467 = shufflevector <4 x i32> %1465, <4 x i32> %1466, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1468 = and <4 x i32> %1467, %1415
  %1469 = bitcast <4 x i32> %1468 to <2 x i64>
  %1470 = extractelement <2 x i64> %1469, i32 0
  %1471 = extractelement <2 x i64> %1469, i32 1
  %1472 = bitcast i64 %1470 to <2 x i32>
  %1473 = shufflevector <2 x i32> %1472, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1474 = bitcast i64 %1471 to <2 x i32>
  %1475 = shufflevector <2 x i32> %1474, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1476 = shufflevector <4 x i32> %1473, <4 x i32> %1475, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1477 = or <4 x i32> %1476, %1459
  %1478 = bitcast <4 x i32> %1477 to <2 x i64>
  %1479 = extractelement <2 x i64> %1478, i32 0
  %1480 = extractelement <2 x i64> %1478, i32 1
  %1481 = bitcast i64 %1479 to <2 x float>
  %1482 = shufflevector <2 x float> %1481, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1483 = bitcast i64 %1480 to <2 x float>
  %1484 = shufflevector <2 x float> %1483, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1485 = shufflevector <4 x float> %1482, <4 x float> %1484, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1486 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %1382
  %1487 = shufflevector <4 x float> %1486, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1488 = shufflevector <4 x float> %1487, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1489 = shufflevector <4 x float> %1487, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1490 = bitcast <2 x float> %1488 to <2 x i32>
  %1491 = bitcast <2 x float> %1489 to <2 x i32>
  %1492 = shufflevector <2 x i32> %1490, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1493 = shufflevector <2 x i32> %1491, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1494 = shufflevector <4 x i32> %1492, <4 x i32> %1493, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1495 = and <4 x i32> %1494, %232
  %1496 = bitcast <4 x i32> %1495 to <2 x i64>
  %1497 = extractelement <2 x i64> %1496, i32 0
  %1498 = extractelement <2 x i64> %1496, i32 1
  %1499 = bitcast i64 %1497 to <2 x i32>
  %1500 = shufflevector <2 x i32> %1499, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1501 = bitcast i64 %1498 to <2 x i32>
  %1502 = shufflevector <2 x i32> %1501, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1503 = shufflevector <4 x i32> %1500, <4 x i32> %1502, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1504 = bitcast <4 x float> %1382 to <2 x i64>
  %1505 = extractelement <2 x i64> %1504, i32 0
  %1506 = bitcast i64 %1505 to <2 x i32>
  %1507 = shufflevector <4 x float> %1382, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1508 = bitcast <2 x float> %1507 to <2 x i32>
  %1509 = shufflevector <2 x i32> %1506, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1510 = shufflevector <2 x i32> %1508, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1511 = shufflevector <4 x i32> %1509, <4 x i32> %1510, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1512 = and <4 x i32> %1511, %1415
  %1513 = bitcast <4 x i32> %1512 to <2 x i64>
  %1514 = extractelement <2 x i64> %1513, i32 0
  %1515 = extractelement <2 x i64> %1513, i32 1
  %1516 = bitcast i64 %1514 to <2 x i32>
  %1517 = shufflevector <2 x i32> %1516, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1518 = bitcast i64 %1515 to <2 x i32>
  %1519 = shufflevector <2 x i32> %1518, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1520 = shufflevector <4 x i32> %1517, <4 x i32> %1519, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1521 = or <4 x i32> %1520, %1503
  %1522 = bitcast <4 x i32> %1521 to <2 x i64>
  %1523 = extractelement <2 x i64> %1522, i32 0
  %1524 = extractelement <2 x i64> %1522, i32 1
  %1525 = bitcast i64 %1523 to <2 x float>
  %1526 = shufflevector <2 x float> %1525, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1527 = bitcast i64 %1524 to <2 x float>
  %1528 = shufflevector <2 x float> %1527, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1529 = shufflevector <4 x float> %1526, <4 x float> %1528, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %1530

1530:                                             ; preds = %1383, %1388
  %1531 = phi <4 x float> [ %1368, %1383 ], [ %1441, %1388 ]
  %1532 = phi <4 x float> [ %1375, %1383 ], [ %1485, %1388 ]
  %1533 = phi <4 x float> [ %1382, %1383 ], [ %1529, %1388 ]
  %1534 = fmul <4 x float> %914, %1359
  %1535 = fmul <4 x float> %915, %1531
  %1536 = fadd <4 x float> %1534, %1535
  %1537 = fadd <4 x float> %1186, %1536
  %1538 = shufflevector <4 x float> %1537, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1539 = bitcast <4 x float> %1537 to <2 x i64>
  %1540 = extractelement <2 x i64> %1539, i32 1
  %1541 = shufflevector <4 x float> %1537, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1542 = bitcast %"struct.skvx::Vec"* %1184 to <2 x float>*
  store <2 x float> %1538, <2 x float>* %1542, align 16
  %1543 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 3, i32 1
  %1544 = bitcast %"struct.skvx::Vec.0"* %1543 to <2 x float>*
  store <2 x float> %1541, <2 x float>* %1544, align 8
  %1545 = fmul <4 x float> %914, %1360
  %1546 = fmul <4 x float> %915, %1532
  %1547 = fadd <4 x float> %1545, %1546
  %1548 = fadd <4 x float> %1195, %1547
  %1549 = shufflevector <4 x float> %1548, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1550 = bitcast <4 x float> %1548 to <2 x i64>
  %1551 = extractelement <2 x i64> %1550, i32 1
  %1552 = shufflevector <4 x float> %1548, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1553 = bitcast %"struct.skvx::Vec"* %1193 to <2 x float>*
  store <2 x float> %1549, <2 x float>* %1553, align 16
  %1554 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 4, i32 1
  %1555 = bitcast %"struct.skvx::Vec.0"* %1554 to <2 x float>*
  store <2 x float> %1552, <2 x float>* %1555, align 8
  %1556 = icmp eq i32 %1181, 3
  %1557 = bitcast i64 %1540 to <2 x i32>
  %1558 = bitcast i64 %1551 to <2 x i32>
  br i1 %1556, label %1559, label %1694

1559:                                             ; preds = %1530
  %1560 = fmul <4 x float> %914, %1361
  %1561 = fmul <4 x float> %915, %1533
  %1562 = fadd <4 x float> %1560, %1561
  %1563 = fadd <4 x float> %1204, %1562
  %1564 = shufflevector <4 x float> %1563, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1565 = bitcast <4 x float> %1563 to <2 x i64>
  %1566 = extractelement <2 x i64> %1565, i32 1
  %1567 = shufflevector <4 x float> %1563, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1568 = bitcast %"struct.skvx::Vec"* %1202 to <2 x float>*
  store <2 x float> %1564, <2 x float>* %1568, align 16
  %1569 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %0, i64 0, i32 5, i32 1
  %1570 = bitcast %"struct.skvx::Vec.0"* %1569 to <2 x float>*
  store <2 x float> %1567, <2 x float>* %1570, align 8
  %1571 = bitcast i64 %1566 to <2 x i32>
  br i1 %1056, label %1572, label %1577

1572:                                             ; preds = %1559
  %1573 = extractelement <2 x i32> %1050, i32 0
  %1574 = extractelement <2 x i32> %1050, i32 1
  %1575 = or i32 %1574, %1573
  %1576 = icmp eq i32 %1575, 0
  br i1 %1576, label %1780, label %1577

1577:                                             ; preds = %1572, %1559
  %1578 = load <4 x float>, <4 x float>* %1185, align 16
  %1579 = shufflevector <4 x float> %1578, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %1580 = shufflevector <4 x float> %1579, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1581 = shufflevector <4 x float> %1579, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1582 = bitcast <2 x float> %1580 to <2 x i32>
  %1583 = bitcast <2 x float> %1581 to <2 x i32>
  %1584 = shufflevector <2 x i32> %1582, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1585 = shufflevector <2 x i32> %1583, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1586 = shufflevector <4 x i32> %1584, <4 x i32> %1585, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1587 = and <4 x i32> %1586, %1052
  %1588 = bitcast <4 x i32> %1587 to <2 x i64>
  %1589 = extractelement <2 x i64> %1588, i32 0
  %1590 = extractelement <2 x i64> %1588, i32 1
  %1591 = bitcast i64 %1589 to <2 x i32>
  %1592 = shufflevector <2 x i32> %1591, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1593 = bitcast i64 %1590 to <2 x i32>
  %1594 = shufflevector <2 x i32> %1593, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1595 = shufflevector <4 x i32> %1592, <4 x i32> %1594, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1596 = bitcast <4 x i32> %1052 to <2 x i64>
  %1597 = xor <2 x i64> %1596, <i64 -1, i64 -1>
  %1598 = extractelement <2 x i64> %1597, i32 0
  %1599 = extractelement <2 x i64> %1597, i32 1
  %1600 = bitcast i64 %1598 to <2 x i32>
  %1601 = shufflevector <2 x i32> %1600, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1602 = bitcast i64 %1599 to <2 x i32>
  %1603 = shufflevector <2 x i32> %1602, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1604 = shufflevector <4 x i32> %1601, <4 x i32> %1603, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1605 = bitcast <4 x float> %1578 to <2 x i64>
  %1606 = extractelement <2 x i64> %1605, i32 0
  %1607 = bitcast i64 %1606 to <2 x i32>
  %1608 = shufflevector <2 x i32> %1607, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1609 = shufflevector <2 x i32> %1557, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1610 = shufflevector <4 x i32> %1608, <4 x i32> %1609, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1611 = and <4 x i32> %1610, %1604
  %1612 = bitcast <4 x i32> %1611 to <2 x i64>
  %1613 = extractelement <2 x i64> %1612, i32 0
  %1614 = extractelement <2 x i64> %1612, i32 1
  %1615 = bitcast i64 %1613 to <2 x i32>
  %1616 = shufflevector <2 x i32> %1615, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1617 = bitcast i64 %1614 to <2 x i32>
  %1618 = shufflevector <2 x i32> %1617, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1619 = shufflevector <4 x i32> %1616, <4 x i32> %1618, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1620 = or <4 x i32> %1619, %1595
  %1621 = bitcast %"struct.skvx::Vec"* %1184 to <4 x i32>*
  store <4 x i32> %1620, <4 x i32>* %1621, align 16
  %1622 = load <4 x float>, <4 x float>* %1194, align 16
  %1623 = shufflevector <4 x float> %1622, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %1624 = shufflevector <4 x float> %1623, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1625 = shufflevector <4 x float> %1623, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1626 = bitcast <2 x float> %1624 to <2 x i32>
  %1627 = bitcast <2 x float> %1625 to <2 x i32>
  %1628 = shufflevector <2 x i32> %1626, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1629 = shufflevector <2 x i32> %1627, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1630 = shufflevector <4 x i32> %1628, <4 x i32> %1629, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1631 = and <4 x i32> %1630, %1052
  %1632 = bitcast <4 x i32> %1631 to <2 x i64>
  %1633 = extractelement <2 x i64> %1632, i32 0
  %1634 = extractelement <2 x i64> %1632, i32 1
  %1635 = bitcast i64 %1633 to <2 x i32>
  %1636 = shufflevector <2 x i32> %1635, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1637 = bitcast i64 %1634 to <2 x i32>
  %1638 = shufflevector <2 x i32> %1637, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1639 = shufflevector <4 x i32> %1636, <4 x i32> %1638, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1640 = bitcast <4 x float> %1622 to <2 x i64>
  %1641 = extractelement <2 x i64> %1640, i32 0
  %1642 = bitcast i64 %1641 to <2 x i32>
  %1643 = shufflevector <2 x i32> %1642, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1644 = shufflevector <2 x i32> %1558, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1645 = shufflevector <4 x i32> %1643, <4 x i32> %1644, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1646 = and <4 x i32> %1645, %1604
  %1647 = bitcast <4 x i32> %1646 to <2 x i64>
  %1648 = extractelement <2 x i64> %1647, i32 0
  %1649 = extractelement <2 x i64> %1647, i32 1
  %1650 = bitcast i64 %1648 to <2 x i32>
  %1651 = shufflevector <2 x i32> %1650, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1652 = bitcast i64 %1649 to <2 x i32>
  %1653 = shufflevector <2 x i32> %1652, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1654 = shufflevector <4 x i32> %1651, <4 x i32> %1653, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1655 = or <4 x i32> %1654, %1639
  %1656 = bitcast %"struct.skvx::Vec"* %1193 to <4 x i32>*
  store <4 x i32> %1655, <4 x i32>* %1656, align 16
  %1657 = icmp eq %"struct.skvx::Vec"* %1202, null
  br i1 %1657, label %1780, label %1658

1658:                                             ; preds = %1577
  %1659 = load <4 x float>, <4 x float>* %1203, align 16
  %1660 = shufflevector <4 x float> %1659, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %1661 = shufflevector <4 x float> %1660, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1662 = shufflevector <4 x float> %1660, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1663 = bitcast <2 x float> %1661 to <2 x i32>
  %1664 = bitcast <2 x float> %1662 to <2 x i32>
  %1665 = shufflevector <2 x i32> %1663, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1666 = shufflevector <2 x i32> %1664, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1667 = shufflevector <4 x i32> %1665, <4 x i32> %1666, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1668 = and <4 x i32> %1667, %1052
  %1669 = bitcast <4 x i32> %1668 to <2 x i64>
  %1670 = extractelement <2 x i64> %1669, i32 0
  %1671 = extractelement <2 x i64> %1669, i32 1
  %1672 = bitcast i64 %1670 to <2 x i32>
  %1673 = shufflevector <2 x i32> %1672, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1674 = bitcast i64 %1671 to <2 x i32>
  %1675 = shufflevector <2 x i32> %1674, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1676 = shufflevector <4 x i32> %1673, <4 x i32> %1675, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1677 = bitcast <4 x float> %1659 to <2 x i64>
  %1678 = extractelement <2 x i64> %1677, i32 0
  %1679 = bitcast i64 %1678 to <2 x i32>
  %1680 = shufflevector <2 x i32> %1679, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1681 = shufflevector <2 x i32> %1571, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1682 = shufflevector <4 x i32> %1680, <4 x i32> %1681, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1683 = and <4 x i32> %1682, %1604
  %1684 = bitcast <4 x i32> %1683 to <2 x i64>
  %1685 = extractelement <2 x i64> %1684, i32 0
  %1686 = extractelement <2 x i64> %1684, i32 1
  %1687 = bitcast i64 %1685 to <2 x i32>
  %1688 = shufflevector <2 x i32> %1687, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1689 = bitcast i64 %1686 to <2 x i32>
  %1690 = shufflevector <2 x i32> %1689, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1691 = shufflevector <4 x i32> %1688, <4 x i32> %1690, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1692 = or <4 x i32> %1691, %1676
  %1693 = bitcast %"struct.skvx::Vec"* %1202 to <4 x i32>*
  store <4 x i32> %1692, <4 x i32>* %1693, align 16
  br label %1780

1694:                                             ; preds = %1530
  br i1 %1056, label %1695, label %1700

1695:                                             ; preds = %1694
  %1696 = extractelement <2 x i32> %1050, i32 0
  %1697 = extractelement <2 x i32> %1050, i32 1
  %1698 = or i32 %1697, %1696
  %1699 = icmp eq i32 %1698, 0
  br i1 %1699, label %1780, label %1700

1700:                                             ; preds = %1695, %1694
  %1701 = load <4 x float>, <4 x float>* %1185, align 16
  %1702 = shufflevector <4 x float> %1701, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %1703 = shufflevector <4 x float> %1702, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1704 = shufflevector <4 x float> %1702, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1705 = bitcast <2 x float> %1703 to <2 x i32>
  %1706 = bitcast <2 x float> %1704 to <2 x i32>
  %1707 = shufflevector <2 x i32> %1705, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1708 = shufflevector <2 x i32> %1706, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1709 = shufflevector <4 x i32> %1707, <4 x i32> %1708, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1710 = and <4 x i32> %1709, %1052
  %1711 = bitcast <4 x i32> %1710 to <2 x i64>
  %1712 = extractelement <2 x i64> %1711, i32 0
  %1713 = extractelement <2 x i64> %1711, i32 1
  %1714 = bitcast i64 %1712 to <2 x i32>
  %1715 = shufflevector <2 x i32> %1714, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1716 = bitcast i64 %1713 to <2 x i32>
  %1717 = shufflevector <2 x i32> %1716, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1718 = shufflevector <4 x i32> %1715, <4 x i32> %1717, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1719 = bitcast <4 x i32> %1052 to <2 x i64>
  %1720 = xor <2 x i64> %1719, <i64 -1, i64 -1>
  %1721 = extractelement <2 x i64> %1720, i32 0
  %1722 = extractelement <2 x i64> %1720, i32 1
  %1723 = bitcast i64 %1721 to <2 x i32>
  %1724 = shufflevector <2 x i32> %1723, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1725 = bitcast i64 %1722 to <2 x i32>
  %1726 = shufflevector <2 x i32> %1725, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1727 = shufflevector <4 x i32> %1724, <4 x i32> %1726, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1728 = bitcast <4 x float> %1701 to <2 x i64>
  %1729 = extractelement <2 x i64> %1728, i32 0
  %1730 = bitcast i64 %1729 to <2 x i32>
  %1731 = shufflevector <2 x i32> %1730, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1732 = shufflevector <2 x i32> %1557, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1733 = shufflevector <4 x i32> %1731, <4 x i32> %1732, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1734 = and <4 x i32> %1733, %1727
  %1735 = bitcast <4 x i32> %1734 to <2 x i64>
  %1736 = extractelement <2 x i64> %1735, i32 0
  %1737 = extractelement <2 x i64> %1735, i32 1
  %1738 = bitcast i64 %1736 to <2 x i32>
  %1739 = shufflevector <2 x i32> %1738, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1740 = bitcast i64 %1737 to <2 x i32>
  %1741 = shufflevector <2 x i32> %1740, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1742 = shufflevector <4 x i32> %1739, <4 x i32> %1741, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1743 = or <4 x i32> %1742, %1718
  %1744 = bitcast %"struct.skvx::Vec"* %1184 to <4 x i32>*
  store <4 x i32> %1743, <4 x i32>* %1744, align 16
  %1745 = load <4 x float>, <4 x float>* %1194, align 16
  %1746 = shufflevector <4 x float> %1745, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %1747 = shufflevector <4 x float> %1746, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1748 = shufflevector <4 x float> %1746, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1749 = bitcast <2 x float> %1747 to <2 x i32>
  %1750 = bitcast <2 x float> %1748 to <2 x i32>
  %1751 = shufflevector <2 x i32> %1749, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1752 = shufflevector <2 x i32> %1750, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1753 = shufflevector <4 x i32> %1751, <4 x i32> %1752, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1754 = and <4 x i32> %1753, %1052
  %1755 = bitcast <4 x i32> %1754 to <2 x i64>
  %1756 = extractelement <2 x i64> %1755, i32 0
  %1757 = extractelement <2 x i64> %1755, i32 1
  %1758 = bitcast i64 %1756 to <2 x i32>
  %1759 = shufflevector <2 x i32> %1758, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1760 = bitcast i64 %1757 to <2 x i32>
  %1761 = shufflevector <2 x i32> %1760, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1762 = shufflevector <4 x i32> %1759, <4 x i32> %1761, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1763 = bitcast <4 x float> %1745 to <2 x i64>
  %1764 = extractelement <2 x i64> %1763, i32 0
  %1765 = bitcast i64 %1764 to <2 x i32>
  %1766 = shufflevector <2 x i32> %1765, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1767 = shufflevector <2 x i32> %1558, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1768 = shufflevector <4 x i32> %1766, <4 x i32> %1767, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1769 = and <4 x i32> %1768, %1727
  %1770 = bitcast <4 x i32> %1769 to <2 x i64>
  %1771 = extractelement <2 x i64> %1770, i32 0
  %1772 = extractelement <2 x i64> %1770, i32 1
  %1773 = bitcast i64 %1771 to <2 x i32>
  %1774 = shufflevector <2 x i32> %1773, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1775 = bitcast i64 %1772 to <2 x i32>
  %1776 = shufflevector <2 x i32> %1775, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1777 = shufflevector <4 x i32> %1774, <4 x i32> %1776, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1778 = or <4 x i32> %1777, %1762
  %1779 = bitcast %"struct.skvx::Vec"* %1193 to <4 x i32>*
  store <4 x i32> %1778, <4 x i32>* %1779, align 16
  br label %1780

1780:                                             ; preds = %1572, %1577, %1658, %1695, %1700, %1179
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11GrQuadUtils18TessellationHelper5resetERK6GrQuadPS2_(%"class.GrQuadUtils::TessellationHelper"*, %class.GrQuad* nocapture readonly dereferenceable(52), %class.GrQuad* readonly) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %1, i64 0, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 2
  store i32 %5, i32* %6, align 16
  %7 = icmp eq %class.GrQuad* %2, null
  br i1 %7, label %11, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %2, i64 0, i32 3
  %10 = load i32, i32* %9, align 4
  br label %11

11:                                               ; preds = %3, %8
  %12 = phi i32 [ %10, %8 ], [ 0, %3 ]
  %13 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 3
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 8
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 9
  store i8 0, i8* %15, align 2
  %16 = bitcast %class.GrQuad* %1 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 1
  %18 = bitcast %"class.GrQuadUtils::TessellationHelper"* %0 to <2 x i64>*
  store <2 x i64> %17, <2 x i64>* %18, align 16
  %19 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %1, i64 0, i32 1, i64 0
  %20 = bitcast float* %19 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 1
  %22 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 0, i32 1
  %23 = bitcast %"struct.skvx::Vec"* %22 to <2 x i64>*
  store <2 x i64> %21, <2 x i64>* %23, align 16
  %24 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %1, i64 0, i32 2, i64 0
  %25 = bitcast float* %24 to <2 x i64>*
  %26 = load <2 x i64>, <2 x i64>* %25, align 1
  %27 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 0, i32 2
  %28 = bitcast %"struct.skvx::Vec"* %27 to <2 x i64>*
  store <2 x i64> %26, <2 x i64>* %28, align 16
  br i1 %7, label %48, label %29

29:                                               ; preds = %11
  %30 = bitcast %class.GrQuad* %2 to <2 x i64>*
  %31 = load <2 x i64>, <2 x i64>* %30, align 1
  %32 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 0, i32 3
  %33 = bitcast %"struct.skvx::Vec"* %32 to <2 x i64>*
  store <2 x i64> %31, <2 x i64>* %33, align 16
  %34 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %2, i64 0, i32 1, i64 0
  %35 = bitcast float* %34 to <2 x i64>*
  %36 = load <2 x i64>, <2 x i64>* %35, align 1
  %37 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 0, i32 4
  %38 = bitcast %"struct.skvx::Vec"* %37 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %38, align 16
  %39 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %2, i64 0, i32 2, i64 0
  %40 = bitcast float* %39 to <2 x i64>*
  %41 = load <2 x i64>, <2 x i64>* %40, align 1
  %42 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 0, i32 5
  %43 = bitcast %"struct.skvx::Vec"* %42 to <2 x i64>*
  store <2 x i64> %41, <2 x i64>* %43, align 16
  %44 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %2, i64 0, i32 3
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %45, 3
  %47 = select i1 %46, i32 3, i32 2
  br label %48

48:                                               ; preds = %11, %29
  %49 = phi i32 [ %47, %29 ], [ 0, %11 ]
  %50 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 0, i32 6
  store i32 %49, i32* %50, align 16
  %51 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 1
  %52 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN11GrQuadUtils18TessellationHelper11EdgeVectors5resetERKN4skvx3VecILi4EfEES6_S6_N6GrQuad4TypeE(%"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %51, %"struct.skvx::Vec"* dereferenceable(16) %52, %"struct.skvx::Vec"* dereferenceable(16) %22, %"struct.skvx::Vec"* dereferenceable(16) %27, i32 %5)
  %53 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 7
  store i8 1, i8* %53, align 16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN11GrQuadUtils18TessellationHelper5insetERKN4skvx3VecILi4EfEEP6GrQuadS7_(%"class.GrQuadUtils::TessellationHelper"* nocapture, %"struct.skvx::Vec"* nocapture readonly dereferenceable(16), %class.GrQuad* nocapture, %class.GrQuad* nocapture) local_unnamed_addr #4 align 2 {
  %5 = alloca %"struct.GrQuadUtils::TessellationHelper::Vertices", align 16
  %6 = alloca { <2 x float>, <2 x float> }, align 16
  %7 = alloca { <2 x float>, <2 x float> }, align 16
  %8 = alloca { <2 x float>, <2 x float> }, align 16
  %9 = bitcast { <2 x float>, <2 x float> }* %8 to %"struct.skvx::Vec"*
  %10 = alloca { <2 x float>, <2 x float> }, align 16
  %11 = bitcast { <2 x float>, <2 x float> }* %10 to %"struct.skvx::Vec"*
  %12 = bitcast %"struct.GrQuadUtils::TessellationHelper::Vertices"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %12) #10
  %13 = bitcast %"class.GrQuadUtils::TessellationHelper"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %12, i8* align 16 %13, i64 112, i1 false)
  %14 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 8
  %15 = load i8, i8* %14, align 1, !range !2
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %37, label %17

17:                                               ; preds = %4
  %18 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 5, i32 0
  %19 = bitcast %"struct.skvx::Vec"* %1 to <4 x float>*
  %20 = load <4 x float>, <4 x float>* %19, align 16
  %21 = bitcast %"struct.skvx::Vec"* %18 to <4 x float>*
  %22 = load <4 x float>, <4 x float>* %21, align 16
  %23 = fcmp une <4 x float> %20, %22
  %24 = sext <4 x i1> %23 to <4 x i32>
  %25 = bitcast <4 x i32> %24 to <2 x i64>
  %26 = extractelement <2 x i64> %25, i32 0
  %27 = extractelement <2 x i64> %25, i32 1
  %28 = lshr i64 %26, 32
  %29 = or i64 %28, %26
  %30 = trunc i64 %29 to i32
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %37

32:                                               ; preds = %17
  %33 = lshr i64 %27, 32
  %34 = or i64 %33, %27
  %35 = trunc i64 %34 to i32
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %42, label %37

37:                                               ; preds = %32, %17, %4
  %38 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 5
  %39 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 1
  %40 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 2
  %41 = load i32, i32* %40, align 16
  tail call void @_ZN11GrQuadUtils18TessellationHelper13OutsetRequest5resetERKNS0_11EdgeVectorsEN6GrQuad4TypeERKN4skvx3VecILi4EfEE(%"struct.GrQuadUtils::TessellationHelper::OutsetRequest"* %38, %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* dereferenceable(112) %39, i32 %41, %"struct.skvx::Vec"* dereferenceable(16) %1) #10
  store i8 1, i8* %14, align 1
  br label %42

42:                                               ; preds = %32, %37
  %43 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 5
  %44 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 5, i32 1
  %45 = load i8, i8* %44, align 16, !range !2
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %112, label %47

47:                                               ; preds = %42
  %48 = bitcast { <2 x float>, <2 x float> }* %6 to %"struct.skvx::Vec"*
  %49 = bitcast { <2 x float>, <2 x float> }* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %49) #10
  %50 = bitcast %"struct.GrQuadUtils::TessellationHelper::OutsetRequest"* %43 to <4 x float>*
  %51 = load <4 x float>, <4 x float>* %50, align 16
  %52 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %51
  %53 = shufflevector <4 x float> %52, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %54 = shufflevector <4 x float> %52, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %55 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 0
  store <2 x float> %53, <2 x float>* %55, align 16
  %56 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1
  store <2 x float> %54, <2 x float>* %56, align 8
  %57 = call i32 @_ZN11GrQuadUtils18TessellationHelper24adjustDegenerateVerticesERKN4skvx3VecILi4EfEEPNS0_8VerticesE(%"class.GrQuadUtils::TessellationHelper"* %0, %"struct.skvx::Vec"* nonnull dereferenceable(16) %48, %"struct.GrQuadUtils::TessellationHelper::Vertices"* nonnull %5)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %49) #10
  %58 = icmp slt i32 %57, 3
  %59 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 2
  %60 = load i32, i32* %59, align 16
  %61 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 3
  %62 = load i32, i32* %61, align 4
  %63 = bitcast %class.GrQuad* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %63, i8* nonnull align 16 %12, i64 16, i1 false) #10
  %64 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %5, i64 0, i32 1
  %65 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %2, i64 0, i32 1, i64 0
  %66 = bitcast float* %65 to i8*
  %67 = bitcast %"struct.skvx::Vec"* %64 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %66, i8* align 16 %67, i64 16, i1 false) #10
  %68 = icmp eq i32 %60, 3
  br i1 %68, label %69, label %74

69:                                               ; preds = %47
  %70 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %5, i64 0, i32 2
  %71 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %2, i64 0, i32 2, i64 0
  %72 = bitcast float* %71 to i8*
  %73 = bitcast %"struct.skvx::Vec"* %70 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %72, i8* align 16 %73, i64 16, i1 false) #10
  br label %81

74:                                               ; preds = %47
  %75 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %2, i64 0, i32 3
  %76 = load i32, i32* %75, align 4
  %77 = icmp eq i32 %76, 3
  br i1 %77, label %78, label %81

78:                                               ; preds = %74
  %79 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %2, i64 0, i32 2, i64 0
  %80 = bitcast float* %79 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %80, align 4
  br label %81

81:                                               ; preds = %78, %74, %69
  %82 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %2, i64 0, i32 3
  store i32 %60, i32* %82, align 4
  %83 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %5, i64 0, i32 6
  %84 = load i32, i32* %83, align 16
  %85 = icmp sgt i32 %84, 0
  br i1 %85, label %86, label %111

86:                                               ; preds = %81
  %87 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %5, i64 0, i32 3
  %88 = bitcast %class.GrQuad* %3 to i8*
  %89 = bitcast %"struct.skvx::Vec"* %87 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %88, i8* align 16 %89, i64 16, i1 false) #10
  %90 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %5, i64 0, i32 4
  %91 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %3, i64 0, i32 1, i64 0
  %92 = bitcast float* %91 to i8*
  %93 = bitcast %"struct.skvx::Vec"* %90 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %92, i8* align 16 %93, i64 16, i1 false) #10
  %94 = icmp eq i32 %84, 3
  br i1 %94, label %95, label %100

95:                                               ; preds = %86
  %96 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %5, i64 0, i32 5
  %97 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %3, i64 0, i32 2, i64 0
  %98 = bitcast float* %97 to i8*
  %99 = bitcast %"struct.skvx::Vec"* %96 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %98, i8* align 16 %99, i64 16, i1 false) #10
  br label %100

100:                                              ; preds = %95, %86
  %101 = icmp eq i32 %62, 3
  br i1 %101, label %109, label %102

102:                                              ; preds = %100
  %103 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %3, i64 0, i32 3
  %104 = load i32, i32* %103, align 4
  %105 = icmp eq i32 %104, 3
  br i1 %105, label %106, label %109

106:                                              ; preds = %102
  %107 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %3, i64 0, i32 2, i64 0
  %108 = bitcast float* %107 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %108, align 4
  br label %109

109:                                              ; preds = %106, %102, %100
  %110 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %3, i64 0, i32 3
  store i32 %62, i32* %110, align 4
  br label %111

111:                                              ; preds = %81, %109
  br i1 %58, label %174, label %205

112:                                              ; preds = %42
  %113 = bitcast { <2 x float>, <2 x float> }* %7 to %"struct.skvx::Vec"*
  %114 = bitcast { <2 x float>, <2 x float> }* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %114) #10
  %115 = bitcast %"struct.GrQuadUtils::TessellationHelper::OutsetRequest"* %43 to <4 x float>*
  %116 = load <4 x float>, <4 x float>* %115, align 16
  %117 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %116
  %118 = shufflevector <4 x float> %117, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %119 = shufflevector <4 x float> %117, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %120 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %7, i64 0, i32 0
  store <2 x float> %118, <2 x float>* %120, align 16
  %121 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %7, i64 0, i32 1
  store <2 x float> %119, <2 x float>* %121, align 8
  call void @_ZN11GrQuadUtils18TessellationHelper14adjustVerticesERKN4skvx3VecILi4EfEEPNS0_8VerticesE(%"class.GrQuadUtils::TessellationHelper"* %0, %"struct.skvx::Vec"* nonnull dereferenceable(16) %113, %"struct.GrQuadUtils::TessellationHelper::Vertices"* nonnull %5)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %114) #10
  %122 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 2
  %123 = load i32, i32* %122, align 16
  %124 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 3
  %125 = load i32, i32* %124, align 4
  %126 = bitcast %class.GrQuad* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %126, i8* nonnull align 16 %12, i64 16, i1 false) #10
  %127 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %5, i64 0, i32 1
  %128 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %2, i64 0, i32 1, i64 0
  %129 = bitcast float* %128 to i8*
  %130 = bitcast %"struct.skvx::Vec"* %127 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %129, i8* align 16 %130, i64 16, i1 false) #10
  %131 = icmp eq i32 %123, 3
  br i1 %131, label %132, label %137

132:                                              ; preds = %112
  %133 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %5, i64 0, i32 2
  %134 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %2, i64 0, i32 2, i64 0
  %135 = bitcast float* %134 to i8*
  %136 = bitcast %"struct.skvx::Vec"* %133 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %135, i8* align 16 %136, i64 16, i1 false) #10
  br label %144

137:                                              ; preds = %112
  %138 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %2, i64 0, i32 3
  %139 = load i32, i32* %138, align 4
  %140 = icmp eq i32 %139, 3
  br i1 %140, label %141, label %144

141:                                              ; preds = %137
  %142 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %2, i64 0, i32 2, i64 0
  %143 = bitcast float* %142 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %143, align 4
  br label %144

144:                                              ; preds = %141, %137, %132
  %145 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %2, i64 0, i32 3
  store i32 %123, i32* %145, align 4
  %146 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %5, i64 0, i32 6
  %147 = load i32, i32* %146, align 16
  %148 = icmp sgt i32 %147, 0
  br i1 %148, label %149, label %205

149:                                              ; preds = %144
  %150 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %5, i64 0, i32 3
  %151 = bitcast %class.GrQuad* %3 to i8*
  %152 = bitcast %"struct.skvx::Vec"* %150 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %151, i8* align 16 %152, i64 16, i1 false) #10
  %153 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %5, i64 0, i32 4
  %154 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %3, i64 0, i32 1, i64 0
  %155 = bitcast float* %154 to i8*
  %156 = bitcast %"struct.skvx::Vec"* %153 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %155, i8* align 16 %156, i64 16, i1 false) #10
  %157 = icmp eq i32 %147, 3
  br i1 %157, label %158, label %163

158:                                              ; preds = %149
  %159 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %5, i64 0, i32 5
  %160 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %3, i64 0, i32 2, i64 0
  %161 = bitcast float* %160 to i8*
  %162 = bitcast %"struct.skvx::Vec"* %159 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %161, i8* align 16 %162, i64 16, i1 false) #10
  br label %163

163:                                              ; preds = %158, %149
  %164 = icmp eq i32 %125, 3
  br i1 %164, label %172, label %165

165:                                              ; preds = %163
  %166 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %3, i64 0, i32 3
  %167 = load i32, i32* %166, align 4
  %168 = icmp eq i32 %167, 3
  br i1 %168, label %169, label %172

169:                                              ; preds = %165
  %170 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %3, i64 0, i32 2, i64 0
  %171 = bitcast float* %170 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %171, align 4
  br label %172

172:                                              ; preds = %169, %165, %163
  %173 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %3, i64 0, i32 3
  store i32 %125, i32* %173, align 4
  br label %205

174:                                              ; preds = %111
  %175 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 9
  %176 = load i8, i8* %175, align 2, !range !2
  %177 = icmp eq i8 %176, 0
  br i1 %177, label %178, label %181

178:                                              ; preds = %174
  %179 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 6
  %180 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 1
  call void @_ZN11GrQuadUtils18TessellationHelper13EdgeEquations5resetERKNS0_11EdgeVectorsE(%"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %179, %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* dereferenceable(112) %180) #10
  store i8 1, i8* %175, align 2
  br label %181

181:                                              ; preds = %174, %178
  %182 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 6
  %183 = bitcast { <2 x float>, <2 x float> }* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %183) #10
  %184 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %5, i64 0, i32 2
  %185 = bitcast %"struct.GrQuadUtils::TessellationHelper::Vertices"* %5 to <4 x float>*
  %186 = load <4 x float>, <4 x float>* %185, align 16
  %187 = bitcast %"struct.skvx::Vec"* %184 to <4 x float>*
  %188 = load <4 x float>, <4 x float>* %187, align 16
  %189 = fdiv <4 x float> %186, %188
  %190 = shufflevector <4 x float> %189, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %191 = shufflevector <4 x float> %189, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %192 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %8, i64 0, i32 0
  store <2 x float> %190, <2 x float>* %192, align 16
  %193 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %8, i64 0, i32 1
  store <2 x float> %191, <2 x float>* %193, align 8
  %194 = bitcast { <2 x float>, <2 x float> }* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %194) #10
  %195 = bitcast %"struct.skvx::Vec"* %64 to <4 x float>*
  %196 = load <4 x float>, <4 x float>* %195, align 16
  %197 = fdiv <4 x float> %196, %188
  %198 = shufflevector <4 x float> %197, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %199 = shufflevector <4 x float> %197, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %200 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %10, i64 0, i32 0
  store <2 x float> %198, <2 x float>* %200, align 16
  %201 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %10, i64 0, i32 1
  store <2 x float> %199, <2 x float>* %201, align 8
  %202 = call { <2 x float>, <2 x float> } @_ZNK11GrQuadUtils18TessellationHelper13EdgeEquations16estimateCoverageERKN4skvx3VecILi4EfEES6_(%"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %182, %"struct.skvx::Vec"* nonnull dereferenceable(16) %9, %"struct.skvx::Vec"* nonnull dereferenceable(16) %11)
  %203 = extractvalue { <2 x float>, <2 x float> } %202, 0
  %204 = extractvalue { <2 x float>, <2 x float> } %202, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %194) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %183) #10
  br label %205

205:                                              ; preds = %111, %144, %172, %181
  %206 = phi <2 x float> [ %204, %181 ], [ <float 1.000000e+00, float 1.000000e+00>, %172 ], [ <float 1.000000e+00, float 1.000000e+00>, %144 ], [ <float 1.000000e+00, float 1.000000e+00>, %111 ]
  %207 = phi <2 x float> [ %203, %181 ], [ <float 1.000000e+00, float 1.000000e+00>, %172 ], [ <float 1.000000e+00, float 1.000000e+00>, %144 ], [ <float 1.000000e+00, float 1.000000e+00>, %111 ]
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %12) #10
  %208 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %207, 0
  %209 = insertvalue { <2 x float>, <2 x float> } %208, <2 x float> %206, 1
  ret { <2 x float>, <2 x float> } %209
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(32) %"struct.GrQuadUtils::TessellationHelper::OutsetRequest"* @_ZN11GrQuadUtils18TessellationHelper16getOutsetRequestERKN4skvx3VecILi4EfEE(%"class.GrQuadUtils::TessellationHelper"*, %"struct.skvx::Vec"* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 8
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %26, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 5, i32 0
  %8 = bitcast %"struct.skvx::Vec"* %1 to <4 x float>*
  %9 = load <4 x float>, <4 x float>* %8, align 16
  %10 = bitcast %"struct.skvx::Vec"* %7 to <4 x float>*
  %11 = load <4 x float>, <4 x float>* %10, align 16
  %12 = fcmp une <4 x float> %9, %11
  %13 = sext <4 x i1> %12 to <4 x i32>
  %14 = bitcast <4 x i32> %13 to <2 x i64>
  %15 = extractelement <2 x i64> %14, i32 0
  %16 = extractelement <2 x i64> %14, i32 1
  %17 = lshr i64 %15, 32
  %18 = or i64 %17, %15
  %19 = trunc i64 %18 to i32
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %26

21:                                               ; preds = %6
  %22 = lshr i64 %16, 32
  %23 = or i64 %22, %16
  %24 = trunc i64 %23 to i32
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %21, %6, %2
  %27 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 5
  %28 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 1
  %29 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 2
  %30 = load i32, i32* %29, align 16
  tail call void @_ZN11GrQuadUtils18TessellationHelper13OutsetRequest5resetERKNS0_11EdgeVectorsEN6GrQuad4TypeERKN4skvx3VecILi4EfEE(%"struct.GrQuadUtils::TessellationHelper::OutsetRequest"* %27, %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* dereferenceable(112) %28, i32 %30, %"struct.skvx::Vec"* dereferenceable(16) %1)
  store i8 1, i8* %3, align 1
  br label %31

31:                                               ; preds = %21, %26
  %32 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 5
  ret %"struct.GrQuadUtils::TessellationHelper::OutsetRequest"* %32
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN11GrQuadUtils18TessellationHelper24adjustDegenerateVerticesERKN4skvx3VecILi4EfEEPNS0_8VerticesE(%"class.GrQuadUtils::TessellationHelper"* nocapture, %"struct.skvx::Vec"* nocapture readonly dereferenceable(16), %"struct.GrQuadUtils::TessellationHelper::Vertices"*) local_unnamed_addr #4 align 2 {
  %4 = alloca %"struct.skvx::Vec", align 16
  %5 = alloca %"struct.skvx::Vec", align 16
  %6 = alloca %"struct.skvx::Vec.2", align 16
  %7 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 16
  %9 = icmp slt i32 %8, 2
  br i1 %9, label %10, label %186

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 1, i32 4
  %12 = bitcast %"struct.skvx::Vec"* %11 to <4 x float>*
  %13 = load <4 x float>, <4 x float>* %12, align 16
  %14 = fdiv <4 x float> <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>, %13
  %15 = shufflevector <4 x float> %14, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %16 = bitcast %"struct.skvx::Vec"* %1 to <4 x float>*
  %17 = load <4 x float>, <4 x float>* %16, align 16
  %18 = fcmp ogt <4 x float> %15, %17
  %19 = sext <4 x i1> %18 to <4 x i32>
  %20 = bitcast <4 x i32> %19 to <2 x i64>
  %21 = extractelement <2 x i64> %20, i32 0
  %22 = extractelement <2 x i64> %20, i32 1
  %23 = bitcast i64 %21 to <2 x i32>
  %24 = shufflevector <2 x i32> %23, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %25 = bitcast i64 %22 to <2 x i32>
  %26 = shufflevector <2 x i32> %25, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %27 = shufflevector <4 x i32> %24, <4 x i32> %26, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %28 = shufflevector <4 x float> %15, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %29 = bitcast <2 x float> %28 to <2 x i32>
  %30 = shufflevector <4 x float> %15, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %31 = bitcast <2 x float> %30 to <2 x i32>
  %32 = shufflevector <2 x i32> %29, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <2 x i32> %31, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %34 = shufflevector <4 x i32> %32, <4 x i32> %33, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %35 = and <4 x i32> %27, %34
  %36 = bitcast <4 x i32> %35 to <2 x i64>
  %37 = extractelement <2 x i64> %36, i32 0
  %38 = extractelement <2 x i64> %36, i32 1
  %39 = bitcast i64 %37 to <2 x i32>
  %40 = shufflevector <2 x i32> %39, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %41 = bitcast i64 %38 to <2 x i32>
  %42 = shufflevector <2 x i32> %41, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %43 = shufflevector <4 x i32> %40, <4 x i32> %42, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %44 = bitcast <4 x i32> %27 to <2 x i64>
  %45 = xor <2 x i64> %44, <i64 -1, i64 -1>
  %46 = extractelement <2 x i64> %45, i32 0
  %47 = extractelement <2 x i64> %45, i32 1
  %48 = bitcast i64 %46 to <2 x i32>
  %49 = shufflevector <2 x i32> %48, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %50 = bitcast i64 %47 to <2 x i32>
  %51 = shufflevector <2 x i32> %50, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %52 = shufflevector <4 x i32> %49, <4 x i32> %51, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %53 = bitcast <4 x float> %17 to <2 x i64>
  %54 = extractelement <2 x i64> %53, i32 0
  %55 = bitcast i64 %54 to <2 x i32>
  %56 = getelementptr inbounds %"struct.skvx::Vec", %"struct.skvx::Vec"* %1, i64 0, i32 1
  %57 = bitcast %"struct.skvx::Vec.0"* %56 to <2 x i32>*
  %58 = load <2 x i32>, <2 x i32>* %57, align 8
  %59 = shufflevector <2 x i32> %55, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %60 = shufflevector <2 x i32> %58, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %61 = shufflevector <4 x i32> %59, <4 x i32> %60, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %62 = and <4 x i32> %52, %61
  %63 = bitcast <4 x i32> %62 to <2 x i64>
  %64 = extractelement <2 x i64> %63, i32 0
  %65 = extractelement <2 x i64> %63, i32 1
  %66 = bitcast i64 %64 to <2 x i32>
  %67 = shufflevector <2 x i32> %66, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %68 = bitcast i64 %65 to <2 x i32>
  %69 = shufflevector <2 x i32> %68, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %70 = shufflevector <4 x i32> %67, <4 x i32> %69, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %71 = or <4 x i32> %70, %43
  %72 = bitcast <4 x i32> %71 to <2 x i64>
  %73 = extractelement <2 x i64> %72, i32 0
  %74 = extractelement <2 x i64> %72, i32 1
  %75 = bitcast i64 %73 to <2 x float>
  %76 = bitcast i64 %74 to <2 x float>
  %77 = shufflevector <2 x float> %75, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %78 = shufflevector <2 x float> %76, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %79 = shufflevector <4 x float> %77, <4 x float> %78, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %80 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 1, i32 6
  %81 = bitcast %"struct.skvx::Vec"* %80 to <4 x float>*
  %82 = load <4 x float>, <4 x float>* %81, align 16
  %83 = shufflevector <4 x float> %79, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %84 = fmul <4 x float> %82, %83
  %85 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %84
  %86 = fmul <4 x float> %82, %79
  %87 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 1, i32 2
  %88 = bitcast %"struct.skvx::Vec"* %87 to <4 x float>*
  %89 = load <4 x float>, <4 x float>* %88, align 16
  %90 = shufflevector <4 x float> %89, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %91 = fmul <4 x float> %90, %86
  %92 = fmul <4 x float> %89, %85
  %93 = fadd <4 x float> %91, %92
  %94 = bitcast %"struct.GrQuadUtils::TessellationHelper::Vertices"* %2 to <4 x float>*
  %95 = load <4 x float>, <4 x float>* %94, align 16
  %96 = fadd <4 x float> %95, %93
  %97 = shufflevector <4 x float> %96, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %98 = shufflevector <4 x float> %96, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %99 = bitcast %"struct.GrQuadUtils::TessellationHelper::Vertices"* %2 to <2 x float>*
  store <2 x float> %97, <2 x float>* %99, align 16
  %100 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %2, i64 0, i32 0, i32 1
  %101 = bitcast %"struct.skvx::Vec.0"* %100 to <2 x float>*
  store <2 x float> %98, <2 x float>* %101, align 8
  %102 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 1, i32 3
  %103 = bitcast %"struct.skvx::Vec"* %102 to <4 x float>*
  %104 = load <4 x float>, <4 x float>* %103, align 16
  %105 = shufflevector <4 x float> %104, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %106 = fmul <4 x float> %105, %86
  %107 = fmul <4 x float> %104, %85
  %108 = fadd <4 x float> %106, %107
  %109 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %2, i64 0, i32 1
  %110 = bitcast %"struct.skvx::Vec"* %109 to <4 x float>*
  %111 = load <4 x float>, <4 x float>* %110, align 16
  %112 = fadd <4 x float> %111, %108
  %113 = shufflevector <4 x float> %112, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %114 = shufflevector <4 x float> %112, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %115 = bitcast %"struct.skvx::Vec"* %109 to <2 x float>*
  store <2 x float> %113, <2 x float>* %115, align 16
  %116 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %2, i64 0, i32 1, i32 1
  %117 = bitcast %"struct.skvx::Vec.0"* %116 to <2 x float>*
  store <2 x float> %114, <2 x float>* %117, align 8
  %118 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %2, i64 0, i32 6
  %119 = load i32, i32* %118, align 16
  %120 = icmp sgt i32 %119, 0
  br i1 %120, label %121, label %173

121:                                              ; preds = %10
  %122 = load <4 x float>, <4 x float>* %12, align 16
  %123 = fmul <4 x float> %122, %85
  %124 = shufflevector <4 x float> %122, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %125 = fmul <4 x float> %86, %124
  %126 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %2, i64 0, i32 3
  %127 = bitcast %"struct.skvx::Vec"* %126 to <4 x float>*
  %128 = load <4 x float>, <4 x float>* %127, align 16
  %129 = shufflevector <4 x float> %128, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %130 = fsub <4 x float> %129, %128
  %131 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %2, i64 0, i32 4
  %132 = bitcast %"struct.skvx::Vec"* %131 to <4 x float>*
  %133 = load <4 x float>, <4 x float>* %132, align 16
  %134 = shufflevector <4 x float> %133, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %135 = fsub <4 x float> %134, %133
  %136 = shufflevector <4 x float> %130, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %137 = fmul <4 x float> %125, %136
  %138 = fmul <4 x float> %123, %130
  %139 = fadd <4 x float> %138, %137
  %140 = fadd <4 x float> %128, %139
  %141 = shufflevector <4 x float> %140, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %142 = shufflevector <4 x float> %140, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %143 = bitcast %"struct.skvx::Vec"* %126 to <2 x float>*
  store <2 x float> %141, <2 x float>* %143, align 16
  %144 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %2, i64 0, i32 3, i32 1
  %145 = bitcast %"struct.skvx::Vec.0"* %144 to <2 x float>*
  store <2 x float> %142, <2 x float>* %145, align 8
  %146 = shufflevector <4 x float> %135, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %147 = fmul <4 x float> %125, %146
  %148 = fmul <4 x float> %123, %135
  %149 = fadd <4 x float> %148, %147
  %150 = fadd <4 x float> %133, %149
  %151 = shufflevector <4 x float> %150, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %152 = shufflevector <4 x float> %150, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %153 = bitcast %"struct.skvx::Vec"* %131 to <2 x float>*
  store <2 x float> %151, <2 x float>* %153, align 16
  %154 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %2, i64 0, i32 4, i32 1
  %155 = bitcast %"struct.skvx::Vec.0"* %154 to <2 x float>*
  store <2 x float> %152, <2 x float>* %155, align 8
  %156 = icmp eq i32 %119, 3
  br i1 %156, label %157, label %173

157:                                              ; preds = %121
  %158 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %2, i64 0, i32 5
  %159 = bitcast %"struct.skvx::Vec"* %158 to <4 x float>*
  %160 = load <4 x float>, <4 x float>* %159, align 16
  %161 = shufflevector <4 x float> %160, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %162 = fsub <4 x float> %161, %160
  %163 = shufflevector <4 x float> %162, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %164 = fmul <4 x float> %125, %163
  %165 = fmul <4 x float> %123, %162
  %166 = fadd <4 x float> %165, %164
  %167 = fadd <4 x float> %160, %166
  %168 = shufflevector <4 x float> %167, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %169 = shufflevector <4 x float> %167, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %170 = bitcast %"struct.skvx::Vec"* %158 to <2 x float>*
  store <2 x float> %168, <2 x float>* %170, align 16
  %171 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %2, i64 0, i32 5, i32 1
  %172 = bitcast %"struct.skvx::Vec.0"* %171 to <2 x float>*
  store <2 x float> %169, <2 x float>* %172, align 8
  br label %173

173:                                              ; preds = %10, %121, %157
  %174 = extractelement <2 x i32> %23, i32 0
  %175 = icmp ne i32 %174, 0
  %176 = extractelement <2 x i32> %23, i32 1
  %177 = icmp ne i32 %176, 0
  %178 = and i1 %175, %177
  br i1 %178, label %179, label %203

179:                                              ; preds = %173
  %180 = extractelement <2 x i32> %25, i32 0
  %181 = icmp ne i32 %180, 0
  %182 = extractelement <2 x i32> %25, i32 1
  %183 = icmp ne i32 %182, 0
  %184 = and i1 %181, %183
  %185 = select i1 %184, i32 1, i32 2
  ret i32 %185

186:                                              ; preds = %3
  %187 = bitcast %"struct.skvx::Vec"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %187) #10
  %188 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 1
  %189 = bitcast %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %188 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %187, i8* align 16 %189, i64 16, i1 false)
  %190 = bitcast %"struct.skvx::Vec"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %190) #10
  %191 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 1, i32 1
  %192 = bitcast %"struct.skvx::Vec"* %191 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %190, i8* align 16 %192, i64 16, i1 false)
  %193 = bitcast %"struct.skvx::Vec.2"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %193) #10
  %194 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 9
  %195 = bitcast %"struct.skvx::Vec.2"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %195, i8 -86, i64 16, i1 false)
  %196 = load i8, i8* %194, align 2, !range !2
  %197 = icmp eq i8 %196, 0
  br i1 %197, label %198, label %200

198:                                              ; preds = %186
  %199 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 6
  tail call void @_ZN11GrQuadUtils18TessellationHelper13EdgeEquations5resetERKNS0_11EdgeVectorsE(%"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %199, %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* dereferenceable(112) %188) #10
  store i8 1, i8* %194, align 2
  br label %200

200:                                              ; preds = %186, %198
  %201 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 6
  %202 = call i32 @_ZNK11GrQuadUtils18TessellationHelper13EdgeEquations21computeDegenerateQuadERKN4skvx3VecILi4EfEEPS4_S7_PNS3_ILi4EiEE(%"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %201, %"struct.skvx::Vec"* dereferenceable(16) %1, %"struct.skvx::Vec"* nonnull %4, %"struct.skvx::Vec"* nonnull %5, %"struct.skvx::Vec.2"* nonnull %6)
  call void @_ZN11GrQuadUtils18TessellationHelper8Vertices6moveToERKN4skvx3VecILi4EfEES6_RKNS3_ILi4EiEE(%"struct.GrQuadUtils::TessellationHelper::Vertices"* %2, %"struct.skvx::Vec"* nonnull dereferenceable(16) %4, %"struct.skvx::Vec"* nonnull dereferenceable(16) %5, %"struct.skvx::Vec.2"* nonnull dereferenceable(16) %6)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %193) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %190) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %187) #10
  br label %203

203:                                              ; preds = %173, %200
  %204 = phi i32 [ %202, %200 ], [ 2, %173 ]
  ret i32 %204
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11GrQuadUtils18TessellationHelper14adjustVerticesERKN4skvx3VecILi4EfEEPNS0_8VerticesE(%"class.GrQuadUtils::TessellationHelper"* nocapture readonly, %"struct.skvx::Vec"* nocapture readonly dereferenceable(16), %"struct.GrQuadUtils::TessellationHelper::Vertices"*) local_unnamed_addr #4 align 2 {
  %4 = alloca %"struct.GrQuadUtils::TessellationHelper::Vertices", align 16
  %5 = alloca <2 x i64>, align 16
  %6 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 2
  %7 = load i32, i32* %6, align 16
  %8 = icmp slt i32 %7, 3
  br i1 %8, label %9, label %107

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 1, i32 6
  %11 = bitcast %"struct.skvx::Vec"* %10 to <4 x float>*
  %12 = load <4 x float>, <4 x float>* %11, align 16
  %13 = bitcast %"struct.skvx::Vec"* %1 to <4 x float>*
  %14 = load <4 x float>, <4 x float>* %13, align 16
  %15 = shufflevector <4 x float> %14, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %16 = fmul <4 x float> %12, %15
  %17 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %16
  %18 = fmul <4 x float> %12, %14
  %19 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 1, i32 2
  %20 = bitcast %"struct.skvx::Vec"* %19 to <4 x float>*
  %21 = load <4 x float>, <4 x float>* %20, align 16
  %22 = shufflevector <4 x float> %21, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %23 = fmul <4 x float> %18, %22
  %24 = fmul <4 x float> %21, %17
  %25 = fadd <4 x float> %23, %24
  %26 = bitcast %"struct.GrQuadUtils::TessellationHelper::Vertices"* %2 to <4 x float>*
  %27 = load <4 x float>, <4 x float>* %26, align 16
  %28 = fadd <4 x float> %27, %25
  %29 = shufflevector <4 x float> %28, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %30 = shufflevector <4 x float> %28, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %31 = bitcast %"struct.GrQuadUtils::TessellationHelper::Vertices"* %2 to <2 x float>*
  store <2 x float> %29, <2 x float>* %31, align 16
  %32 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %2, i64 0, i32 0, i32 1
  %33 = bitcast %"struct.skvx::Vec.0"* %32 to <2 x float>*
  store <2 x float> %30, <2 x float>* %33, align 8
  %34 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 1, i32 3
  %35 = bitcast %"struct.skvx::Vec"* %34 to <4 x float>*
  %36 = load <4 x float>, <4 x float>* %35, align 16
  %37 = shufflevector <4 x float> %36, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %38 = fmul <4 x float> %18, %37
  %39 = fmul <4 x float> %36, %17
  %40 = fadd <4 x float> %39, %38
  %41 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %2, i64 0, i32 1
  %42 = bitcast %"struct.skvx::Vec"* %41 to <4 x float>*
  %43 = load <4 x float>, <4 x float>* %42, align 16
  %44 = fadd <4 x float> %43, %40
  %45 = shufflevector <4 x float> %44, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %46 = shufflevector <4 x float> %44, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %47 = bitcast %"struct.skvx::Vec"* %41 to <2 x float>*
  store <2 x float> %45, <2 x float>* %47, align 16
  %48 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %2, i64 0, i32 1, i32 1
  %49 = bitcast %"struct.skvx::Vec.0"* %48 to <2 x float>*
  store <2 x float> %46, <2 x float>* %49, align 8
  %50 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %2, i64 0, i32 6
  %51 = load i32, i32* %50, align 16
  %52 = icmp sgt i32 %51, 0
  br i1 %52, label %53, label %164

53:                                               ; preds = %9
  %54 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 1, i32 4
  %55 = bitcast %"struct.skvx::Vec"* %54 to <4 x float>*
  %56 = load <4 x float>, <4 x float>* %55, align 16
  %57 = fmul <4 x float> %56, %17
  %58 = shufflevector <4 x float> %56, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %59 = fmul <4 x float> %18, %58
  %60 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %2, i64 0, i32 3
  %61 = bitcast %"struct.skvx::Vec"* %60 to <4 x float>*
  %62 = load <4 x float>, <4 x float>* %61, align 16
  %63 = shufflevector <4 x float> %62, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %64 = fsub <4 x float> %63, %62
  %65 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %2, i64 0, i32 4
  %66 = bitcast %"struct.skvx::Vec"* %65 to <4 x float>*
  %67 = load <4 x float>, <4 x float>* %66, align 16
  %68 = shufflevector <4 x float> %67, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %69 = fsub <4 x float> %68, %67
  %70 = shufflevector <4 x float> %64, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %71 = fmul <4 x float> %59, %70
  %72 = fmul <4 x float> %57, %64
  %73 = fadd <4 x float> %72, %71
  %74 = fadd <4 x float> %62, %73
  %75 = shufflevector <4 x float> %74, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %76 = shufflevector <4 x float> %74, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %77 = bitcast %"struct.skvx::Vec"* %60 to <2 x float>*
  store <2 x float> %75, <2 x float>* %77, align 16
  %78 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %2, i64 0, i32 3, i32 1
  %79 = bitcast %"struct.skvx::Vec.0"* %78 to <2 x float>*
  store <2 x float> %76, <2 x float>* %79, align 8
  %80 = shufflevector <4 x float> %69, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %81 = fmul <4 x float> %59, %80
  %82 = fmul <4 x float> %57, %69
  %83 = fadd <4 x float> %82, %81
  %84 = fadd <4 x float> %67, %83
  %85 = shufflevector <4 x float> %84, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %86 = shufflevector <4 x float> %84, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %87 = bitcast %"struct.skvx::Vec"* %65 to <2 x float>*
  store <2 x float> %85, <2 x float>* %87, align 16
  %88 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %2, i64 0, i32 4, i32 1
  %89 = bitcast %"struct.skvx::Vec.0"* %88 to <2 x float>*
  store <2 x float> %86, <2 x float>* %89, align 8
  %90 = icmp eq i32 %51, 3
  br i1 %90, label %91, label %164

91:                                               ; preds = %53
  %92 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %2, i64 0, i32 5
  %93 = bitcast %"struct.skvx::Vec"* %92 to <4 x float>*
  %94 = load <4 x float>, <4 x float>* %93, align 16
  %95 = shufflevector <4 x float> %94, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %96 = fsub <4 x float> %95, %94
  %97 = shufflevector <4 x float> %96, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %98 = fmul <4 x float> %59, %97
  %99 = fmul <4 x float> %57, %96
  %100 = fadd <4 x float> %99, %98
  %101 = fadd <4 x float> %94, %100
  %102 = shufflevector <4 x float> %101, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %103 = shufflevector <4 x float> %101, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %104 = bitcast %"struct.skvx::Vec"* %92 to <2 x float>*
  store <2 x float> %102, <2 x float>* %104, align 16
  %105 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %2, i64 0, i32 5, i32 1
  %106 = bitcast %"struct.skvx::Vec.0"* %105 to <2 x float>*
  store <2 x float> %103, <2 x float>* %106, align 8
  br label %164

107:                                              ; preds = %3
  %108 = bitcast <2 x i64>* %5 to %"struct.skvx::Vec.2"*
  %109 = bitcast %"struct.GrQuadUtils::TessellationHelper::Vertices"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %109) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %109, i8* align 16 bitcast (%"struct.GrQuadUtils::TessellationHelper::Vertices"* @__const._ZN11GrQuadUtils18TessellationHelper14adjustVerticesERKN4skvx3VecILi4EfEEPNS0_8VerticesE.projected to i8*), i64 112, i1 false)
  %110 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %4, i64 0, i32 0
  %111 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 1
  %112 = bitcast %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* %111 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %109, i8* align 16 %112, i64 16, i1 false)
  %113 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %4, i64 0, i32 1
  %114 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 1, i32 1
  %115 = bitcast %"struct.skvx::Vec"* %113 to i8*
  %116 = bitcast %"struct.skvx::Vec"* %114 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %115, i8* align 16 %116, i64 16, i1 false)
  %117 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %4, i64 0, i32 2, i32 0, i32 0, i32 0
  %118 = bitcast float* %117 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %118, align 16
  %119 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %4, i64 0, i32 3, i32 0, i32 0, i32 0
  %120 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 1, i32 6
  %121 = bitcast %"struct.skvx::Vec"* %120 to <4 x float>*
  %122 = bitcast float* %119 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %122, i8 0, i64 52, i1 false)
  %123 = load <4 x float>, <4 x float>* %121, align 16
  %124 = bitcast %"struct.skvx::Vec"* %1 to <4 x float>*
  %125 = load <4 x float>, <4 x float>* %124, align 16
  %126 = shufflevector <4 x float> %125, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %127 = fmul <4 x float> %123, %126
  %128 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %127
  %129 = fmul <4 x float> %123, %125
  %130 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 1, i32 2
  %131 = bitcast %"struct.skvx::Vec"* %130 to <4 x float>*
  %132 = load <4 x float>, <4 x float>* %131, align 16
  %133 = shufflevector <4 x float> %132, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %134 = fmul <4 x float> %129, %133
  %135 = fmul <4 x float> %132, %128
  %136 = fadd <4 x float> %134, %135
  %137 = bitcast %"struct.GrQuadUtils::TessellationHelper::Vertices"* %4 to <4 x float>*
  %138 = load <4 x float>, <4 x float>* %137, align 16
  %139 = fadd <4 x float> %138, %136
  %140 = shufflevector <4 x float> %139, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %141 = shufflevector <4 x float> %139, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %142 = bitcast %"struct.GrQuadUtils::TessellationHelper::Vertices"* %4 to <2 x float>*
  store <2 x float> %140, <2 x float>* %142, align 16
  %143 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %4, i64 0, i32 0, i32 1
  %144 = bitcast %"struct.skvx::Vec.0"* %143 to <2 x float>*
  store <2 x float> %141, <2 x float>* %144, align 8
  %145 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 1, i32 3
  %146 = bitcast %"struct.skvx::Vec"* %145 to <4 x float>*
  %147 = load <4 x float>, <4 x float>* %146, align 16
  %148 = shufflevector <4 x float> %147, <4 x float> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  %149 = fmul <4 x float> %129, %148
  %150 = fmul <4 x float> %147, %128
  %151 = fadd <4 x float> %150, %149
  %152 = bitcast %"struct.skvx::Vec"* %113 to <4 x float>*
  %153 = load <4 x float>, <4 x float>* %152, align 16
  %154 = fadd <4 x float> %153, %151
  %155 = shufflevector <4 x float> %154, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %156 = shufflevector <4 x float> %154, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %157 = bitcast %"struct.skvx::Vec"* %113 to <2 x float>*
  store <2 x float> %155, <2 x float>* %157, align 16
  %158 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %4, i64 0, i32 1, i32 1
  %159 = bitcast %"struct.skvx::Vec.0"* %158 to <2 x float>*
  store <2 x float> %156, <2 x float>* %159, align 8
  %160 = bitcast <2 x i64>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %160) #10
  %161 = fcmp une <4 x float> %125, zeroinitializer
  %162 = sext <4 x i1> %161 to <4 x i32>
  %163 = bitcast <2 x i64>* %5 to <4 x i32>*
  store <4 x i32> %162, <4 x i32>* %163, align 16
  call void @_ZN11GrQuadUtils18TessellationHelper8Vertices6moveToERKN4skvx3VecILi4EfEES6_RKNS3_ILi4EiEE(%"struct.GrQuadUtils::TessellationHelper::Vertices"* %2, %"struct.skvx::Vec"* nonnull dereferenceable(16) %110, %"struct.skvx::Vec"* dereferenceable(16) %113, %"struct.skvx::Vec.2"* nonnull dereferenceable(16) %108)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %160) #10
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %109) #10
  br label %164

164:                                              ; preds = %91, %53, %9, %107
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(48) %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* @_ZN11GrQuadUtils18TessellationHelper16getEdgeEquationsEv(%"class.GrQuadUtils::TessellationHelper"*) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 9
  %3 = load i8, i8* %2, align 2, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 6
  %7 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 1
  tail call void @_ZN11GrQuadUtils18TessellationHelper13EdgeEquations5resetERKNS0_11EdgeVectorsE(%"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %6, %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* dereferenceable(112) %7)
  store i8 1, i8* %2, align 2
  br label %8

8:                                                ; preds = %1, %5
  %9 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 6
  ret %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %9
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11GrQuadUtils18TessellationHelper6outsetERKN4skvx3VecILi4EfEEP6GrQuadS7_(%"class.GrQuadUtils::TessellationHelper"* nocapture, %"struct.skvx::Vec"* nocapture readonly dereferenceable(16), %class.GrQuad* nocapture, %class.GrQuad* nocapture) local_unnamed_addr #4 align 2 {
  %5 = alloca %"struct.GrQuadUtils::TessellationHelper::Vertices", align 16
  %6 = bitcast %"struct.GrQuadUtils::TessellationHelper::Vertices"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %6) #10
  %7 = bitcast %"class.GrQuadUtils::TessellationHelper"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %6, i8* align 16 %7, i64 112, i1 false)
  %8 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 8
  %9 = load i8, i8* %8, align 1, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %31, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 5, i32 0
  %13 = bitcast %"struct.skvx::Vec"* %1 to <4 x float>*
  %14 = load <4 x float>, <4 x float>* %13, align 16
  %15 = bitcast %"struct.skvx::Vec"* %12 to <4 x float>*
  %16 = load <4 x float>, <4 x float>* %15, align 16
  %17 = fcmp une <4 x float> %14, %16
  %18 = sext <4 x i1> %17 to <4 x i32>
  %19 = bitcast <4 x i32> %18 to <2 x i64>
  %20 = extractelement <2 x i64> %19, i32 0
  %21 = extractelement <2 x i64> %19, i32 1
  %22 = lshr i64 %20, 32
  %23 = or i64 %22, %20
  %24 = trunc i64 %23 to i32
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %31

26:                                               ; preds = %11
  %27 = lshr i64 %21, 32
  %28 = or i64 %27, %21
  %29 = trunc i64 %28 to i32
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %36, label %31

31:                                               ; preds = %26, %11, %4
  %32 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 5
  %33 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 1
  %34 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 2
  %35 = load i32, i32* %34, align 16
  tail call void @_ZN11GrQuadUtils18TessellationHelper13OutsetRequest5resetERKNS0_11EdgeVectorsEN6GrQuad4TypeERKN4skvx3VecILi4EfEE(%"struct.GrQuadUtils::TessellationHelper::OutsetRequest"* %32, %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* dereferenceable(112) %33, i32 %35, %"struct.skvx::Vec"* dereferenceable(16) %1) #10
  store i8 1, i8* %8, align 1
  br label %36

36:                                               ; preds = %26, %31
  %37 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 5, i32 2
  %38 = load i8, i8* %37, align 1, !range !2
  %39 = icmp eq i8 %38, 0
  %40 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 5, i32 0
  br i1 %39, label %43, label %41

41:                                               ; preds = %36
  %42 = call i32 @_ZN11GrQuadUtils18TessellationHelper24adjustDegenerateVerticesERKN4skvx3VecILi4EfEEPNS0_8VerticesE(%"class.GrQuadUtils::TessellationHelper"* %0, %"struct.skvx::Vec"* dereferenceable(16) %40, %"struct.GrQuadUtils::TessellationHelper::Vertices"* nonnull %5)
  br label %44

43:                                               ; preds = %36
  call void @_ZN11GrQuadUtils18TessellationHelper14adjustVerticesERKN4skvx3VecILi4EfEEPNS0_8VerticesE(%"class.GrQuadUtils::TessellationHelper"* %0, %"struct.skvx::Vec"* dereferenceable(16) %40, %"struct.GrQuadUtils::TessellationHelper::Vertices"* nonnull %5)
  br label %44

44:                                               ; preds = %43, %41
  %45 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 2
  %46 = load i32, i32* %45, align 16
  %47 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 3
  %48 = load i32, i32* %47, align 4
  %49 = bitcast %class.GrQuad* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %49, i8* nonnull align 16 %6, i64 16, i1 false) #10
  %50 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %5, i64 0, i32 1
  %51 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %2, i64 0, i32 1, i64 0
  %52 = bitcast float* %51 to i8*
  %53 = bitcast %"struct.skvx::Vec"* %50 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %52, i8* align 16 %53, i64 16, i1 false) #10
  %54 = icmp eq i32 %46, 3
  br i1 %54, label %55, label %60

55:                                               ; preds = %44
  %56 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %5, i64 0, i32 2
  %57 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %2, i64 0, i32 2, i64 0
  %58 = bitcast float* %57 to i8*
  %59 = bitcast %"struct.skvx::Vec"* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 16 %59, i64 16, i1 false) #10
  br label %67

60:                                               ; preds = %44
  %61 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %2, i64 0, i32 3
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %62, 3
  br i1 %63, label %64, label %67

64:                                               ; preds = %60
  %65 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %2, i64 0, i32 2, i64 0
  %66 = bitcast float* %65 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %66, align 4
  br label %67

67:                                               ; preds = %64, %60, %55
  %68 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %2, i64 0, i32 3
  store i32 %46, i32* %68, align 4
  %69 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %5, i64 0, i32 6
  %70 = load i32, i32* %69, align 16
  %71 = icmp sgt i32 %70, 0
  br i1 %71, label %72, label %97

72:                                               ; preds = %67
  %73 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %5, i64 0, i32 3
  %74 = bitcast %class.GrQuad* %3 to i8*
  %75 = bitcast %"struct.skvx::Vec"* %73 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %74, i8* align 16 %75, i64 16, i1 false) #10
  %76 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %5, i64 0, i32 4
  %77 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %3, i64 0, i32 1, i64 0
  %78 = bitcast float* %77 to i8*
  %79 = bitcast %"struct.skvx::Vec"* %76 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 16 %79, i64 16, i1 false) #10
  %80 = icmp eq i32 %70, 3
  br i1 %80, label %81, label %86

81:                                               ; preds = %72
  %82 = getelementptr inbounds %"struct.GrQuadUtils::TessellationHelper::Vertices", %"struct.GrQuadUtils::TessellationHelper::Vertices"* %5, i64 0, i32 5
  %83 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %3, i64 0, i32 2, i64 0
  %84 = bitcast float* %83 to i8*
  %85 = bitcast %"struct.skvx::Vec"* %82 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %84, i8* align 16 %85, i64 16, i1 false) #10
  br label %86

86:                                               ; preds = %81, %72
  %87 = icmp eq i32 %48, 3
  br i1 %87, label %95, label %88

88:                                               ; preds = %86
  %89 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %3, i64 0, i32 3
  %90 = load i32, i32* %89, align 4
  %91 = icmp eq i32 %90, 3
  br i1 %91, label %92, label %95

92:                                               ; preds = %88
  %93 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %3, i64 0, i32 2, i64 0
  %94 = bitcast float* %93 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %94, align 4
  br label %95

95:                                               ; preds = %92, %88, %86
  %96 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %3, i64 0, i32 3
  store i32 %48, i32* %96, align 4
  br label %97

97:                                               ; preds = %67, %95
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %6) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11GrQuadUtils18TessellationHelper16getEdgeEquationsEPN4skvx3VecILi4EfEES4_S4_(%"class.GrQuadUtils::TessellationHelper"* nocapture, %"struct.skvx::Vec"* nocapture, %"struct.skvx::Vec"* nocapture, %"struct.skvx::Vec"* nocapture) local_unnamed_addr #2 align 2 {
  %5 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 9
  %6 = load i8, i8* %5, align 2, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 6
  %10 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 1
  tail call void @_ZN11GrQuadUtils18TessellationHelper13EdgeEquations5resetERKNS0_11EdgeVectorsE(%"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %9, %"struct.GrQuadUtils::TessellationHelper::EdgeVectors"* dereferenceable(112) %10) #10
  store i8 1, i8* %5, align 2
  br label %11

11:                                               ; preds = %4, %8
  %12 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 6
  %13 = bitcast %"struct.skvx::Vec"* %1 to i8*
  %14 = bitcast %"struct.GrQuadUtils::TessellationHelper::EdgeEquations"* %12 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 %14, i64 16, i1 false)
  %15 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 6, i32 1
  %16 = bitcast %"struct.skvx::Vec"* %2 to i8*
  %17 = bitcast %"struct.skvx::Vec"* %15 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %16, i8* align 16 %17, i64 16, i1 false)
  %18 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 6, i32 2
  %19 = bitcast %"struct.skvx::Vec"* %3 to i8*
  %20 = bitcast %"struct.skvx::Vec"* %18 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %19, i8* align 16 %20, i64 16, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN11GrQuadUtils18TessellationHelper14getEdgeLengthsEv(%"class.GrQuadUtils::TessellationHelper"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.GrQuadUtils::TessellationHelper", %"class.GrQuadUtils::TessellationHelper"* %0, i64 0, i32 1, i32 4
  %3 = bitcast %"struct.skvx::Vec"* %2 to <4 x float>*
  %4 = load <4 x float>, <4 x float>* %3, align 16
  %5 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %6 = shufflevector <4 x float> %5, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %7 = shufflevector <4 x float> %5, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %8 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %6, 0
  %9 = insertvalue { <2 x float>, <2 x float> } %8, <2 x float> %7, 1
  ret { <2 x float>, <2 x float> } %9
}

; Function Attrs: nofree nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZL14crop_rect_edgeRK6SkRectiiiiPfS2_S2_S2_S2_(%struct.SkRect* nocapture readonly dereferenceable(16), i32, i32, i32, i32, float* nocapture, float* nocapture, float*, float* nocapture, float* nocapture) unnamed_addr #7 {
  %11 = sext i32 %1 to i64
  %12 = getelementptr inbounds float, float* %5, i64 %11
  %13 = load float, float* %12, align 4
  %14 = sext i32 %2 to i64
  %15 = getelementptr inbounds float, float* %5, i64 %14
  %16 = load float, float* %15, align 4
  %17 = fsub float %13, %16
  %18 = tail call float @llvm.fabs.f32(float %17) #10
  %19 = fcmp ugt float %18, 0x3F30000000000000
  br i1 %19, label %160, label %20

20:                                               ; preds = %10
  %21 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 0
  %22 = load float, float* %21, align 4
  %23 = fcmp olt float %13, %22
  %24 = bitcast float %22 to i32
  br i1 %23, label %25, label %90

25:                                               ; preds = %20
  %26 = sext i32 %3 to i64
  %27 = getelementptr inbounds float, float* %5, i64 %26
  %28 = load float, float* %27, align 4
  %29 = fcmp ult float %28, %22
  br i1 %29, label %90, label %30

30:                                               ; preds = %25
  %31 = icmp eq float* %7, null
  br i1 %31, label %32, label %34

32:                                               ; preds = %30
  %33 = bitcast %struct.SkRect* %0 to i32*
  br label %84

34:                                               ; preds = %30
  %35 = fsub float %28, %22
  %36 = fsub float %28, %13
  %37 = fdiv float %35, %36
  %38 = fsub float 1.000000e+00, %37
  %39 = getelementptr inbounds float, float* %7, i64 %11
  %40 = load float, float* %39, align 4
  %41 = fmul float %37, %40
  %42 = getelementptr inbounds float, float* %7, i64 %26
  %43 = load float, float* %42, align 4
  %44 = fmul float %38, %43
  %45 = fadd float %41, %44
  store float %45, float* %39, align 4
  %46 = getelementptr inbounds float, float* %8, i64 %11
  %47 = load float, float* %46, align 4
  %48 = fmul float %37, %47
  %49 = getelementptr inbounds float, float* %8, i64 %26
  %50 = load float, float* %49, align 4
  %51 = fmul float %38, %50
  %52 = fadd float %48, %51
  store float %52, float* %46, align 4
  %53 = getelementptr inbounds float, float* %9, i64 %11
  %54 = load float, float* %53, align 4
  %55 = fmul float %37, %54
  %56 = getelementptr inbounds float, float* %9, i64 %26
  %57 = load float, float* %56, align 4
  %58 = fmul float %38, %57
  %59 = fadd float %55, %58
  store float %59, float* %53, align 4
  %60 = getelementptr inbounds float, float* %7, i64 %14
  %61 = load float, float* %60, align 4
  %62 = fmul float %37, %61
  %63 = sext i32 %4 to i64
  %64 = getelementptr inbounds float, float* %7, i64 %63
  %65 = load float, float* %64, align 4
  %66 = fmul float %38, %65
  %67 = fadd float %62, %66
  store float %67, float* %60, align 4
  %68 = getelementptr inbounds float, float* %8, i64 %14
  %69 = load float, float* %68, align 4
  %70 = fmul float %37, %69
  %71 = getelementptr inbounds float, float* %8, i64 %63
  %72 = load float, float* %71, align 4
  %73 = fmul float %38, %72
  %74 = fadd float %70, %73
  store float %74, float* %68, align 4
  %75 = getelementptr inbounds float, float* %9, i64 %14
  %76 = load float, float* %75, align 4
  %77 = fmul float %37, %76
  %78 = getelementptr inbounds float, float* %9, i64 %63
  %79 = load float, float* %78, align 4
  %80 = fmul float %38, %79
  %81 = fadd float %77, %80
  store float %81, float* %75, align 4
  %82 = bitcast %struct.SkRect* %0 to i32*
  %83 = load i32, i32* %82, align 4
  br label %84

84:                                               ; preds = %32, %34
  %85 = phi i32* [ %33, %32 ], [ %82, %34 ]
  %86 = phi i32 [ %24, %32 ], [ %83, %34 ]
  %87 = bitcast float* %12 to i32*
  store i32 %86, i32* %87, align 4
  %88 = load i32, i32* %85, align 4
  %89 = bitcast float* %15 to i32*
  store i32 %88, i32* %89, align 4
  br label %304

90:                                               ; preds = %25, %20
  %91 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 2
  %92 = load float, float* %91, align 4
  %93 = fcmp ogt float %13, %92
  %94 = bitcast float %92 to i32
  br i1 %93, label %95, label %304

95:                                               ; preds = %90
  %96 = sext i32 %3 to i64
  %97 = getelementptr inbounds float, float* %5, i64 %96
  %98 = load float, float* %97, align 4
  %99 = fcmp ugt float %98, %92
  br i1 %99, label %304, label %100

100:                                              ; preds = %95
  %101 = icmp eq float* %7, null
  br i1 %101, label %102, label %104

102:                                              ; preds = %100
  %103 = bitcast float* %91 to i32*
  br label %154

104:                                              ; preds = %100
  %105 = fsub float %92, %98
  %106 = fsub float %13, %98
  %107 = fdiv float %105, %106
  %108 = fsub float 1.000000e+00, %107
  %109 = getelementptr inbounds float, float* %7, i64 %11
  %110 = load float, float* %109, align 4
  %111 = fmul float %107, %110
  %112 = getelementptr inbounds float, float* %7, i64 %96
  %113 = load float, float* %112, align 4
  %114 = fmul float %108, %113
  %115 = fadd float %111, %114
  store float %115, float* %109, align 4
  %116 = getelementptr inbounds float, float* %8, i64 %11
  %117 = load float, float* %116, align 4
  %118 = fmul float %107, %117
  %119 = getelementptr inbounds float, float* %8, i64 %96
  %120 = load float, float* %119, align 4
  %121 = fmul float %108, %120
  %122 = fadd float %118, %121
  store float %122, float* %116, align 4
  %123 = getelementptr inbounds float, float* %9, i64 %11
  %124 = load float, float* %123, align 4
  %125 = fmul float %107, %124
  %126 = getelementptr inbounds float, float* %9, i64 %96
  %127 = load float, float* %126, align 4
  %128 = fmul float %108, %127
  %129 = fadd float %125, %128
  store float %129, float* %123, align 4
  %130 = getelementptr inbounds float, float* %7, i64 %14
  %131 = load float, float* %130, align 4
  %132 = fmul float %107, %131
  %133 = sext i32 %4 to i64
  %134 = getelementptr inbounds float, float* %7, i64 %133
  %135 = load float, float* %134, align 4
  %136 = fmul float %108, %135
  %137 = fadd float %132, %136
  store float %137, float* %130, align 4
  %138 = getelementptr inbounds float, float* %8, i64 %14
  %139 = load float, float* %138, align 4
  %140 = fmul float %107, %139
  %141 = getelementptr inbounds float, float* %8, i64 %133
  %142 = load float, float* %141, align 4
  %143 = fmul float %108, %142
  %144 = fadd float %140, %143
  store float %144, float* %138, align 4
  %145 = getelementptr inbounds float, float* %9, i64 %14
  %146 = load float, float* %145, align 4
  %147 = fmul float %107, %146
  %148 = getelementptr inbounds float, float* %9, i64 %133
  %149 = load float, float* %148, align 4
  %150 = fmul float %108, %149
  %151 = fadd float %147, %150
  store float %151, float* %145, align 4
  %152 = bitcast float* %91 to i32*
  %153 = load i32, i32* %152, align 4
  br label %154

154:                                              ; preds = %102, %104
  %155 = phi i32* [ %103, %102 ], [ %152, %104 ]
  %156 = phi i32 [ %94, %102 ], [ %153, %104 ]
  %157 = bitcast float* %12 to i32*
  store i32 %156, i32* %157, align 4
  %158 = load i32, i32* %155, align 4
  %159 = bitcast float* %15 to i32*
  store i32 %158, i32* %159, align 4
  br label %304

160:                                              ; preds = %10
  %161 = getelementptr inbounds float, float* %6, i64 %11
  %162 = load float, float* %161, align 4
  %163 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 1
  %164 = load float, float* %163, align 4
  %165 = fcmp olt float %162, %164
  %166 = bitcast float %164 to i32
  br i1 %165, label %167, label %233

167:                                              ; preds = %160
  %168 = sext i32 %3 to i64
  %169 = getelementptr inbounds float, float* %6, i64 %168
  %170 = load float, float* %169, align 4
  %171 = fcmp ult float %170, %164
  br i1 %171, label %233, label %172

172:                                              ; preds = %167
  %173 = icmp eq float* %7, null
  br i1 %173, label %174, label %176

174:                                              ; preds = %172
  %175 = bitcast float* %163 to i32*
  br label %226

176:                                              ; preds = %172
  %177 = fsub float %170, %164
  %178 = fsub float %170, %162
  %179 = fdiv float %177, %178
  %180 = fsub float 1.000000e+00, %179
  %181 = getelementptr inbounds float, float* %7, i64 %11
  %182 = load float, float* %181, align 4
  %183 = fmul float %179, %182
  %184 = getelementptr inbounds float, float* %7, i64 %168
  %185 = load float, float* %184, align 4
  %186 = fmul float %180, %185
  %187 = fadd float %183, %186
  store float %187, float* %181, align 4
  %188 = getelementptr inbounds float, float* %8, i64 %11
  %189 = load float, float* %188, align 4
  %190 = fmul float %179, %189
  %191 = getelementptr inbounds float, float* %8, i64 %168
  %192 = load float, float* %191, align 4
  %193 = fmul float %180, %192
  %194 = fadd float %190, %193
  store float %194, float* %188, align 4
  %195 = getelementptr inbounds float, float* %9, i64 %11
  %196 = load float, float* %195, align 4
  %197 = fmul float %179, %196
  %198 = getelementptr inbounds float, float* %9, i64 %168
  %199 = load float, float* %198, align 4
  %200 = fmul float %180, %199
  %201 = fadd float %197, %200
  store float %201, float* %195, align 4
  %202 = getelementptr inbounds float, float* %7, i64 %14
  %203 = load float, float* %202, align 4
  %204 = fmul float %179, %203
  %205 = sext i32 %4 to i64
  %206 = getelementptr inbounds float, float* %7, i64 %205
  %207 = load float, float* %206, align 4
  %208 = fmul float %180, %207
  %209 = fadd float %204, %208
  store float %209, float* %202, align 4
  %210 = getelementptr inbounds float, float* %8, i64 %14
  %211 = load float, float* %210, align 4
  %212 = fmul float %179, %211
  %213 = getelementptr inbounds float, float* %8, i64 %205
  %214 = load float, float* %213, align 4
  %215 = fmul float %180, %214
  %216 = fadd float %212, %215
  store float %216, float* %210, align 4
  %217 = getelementptr inbounds float, float* %9, i64 %14
  %218 = load float, float* %217, align 4
  %219 = fmul float %179, %218
  %220 = getelementptr inbounds float, float* %9, i64 %205
  %221 = load float, float* %220, align 4
  %222 = fmul float %180, %221
  %223 = fadd float %219, %222
  store float %223, float* %217, align 4
  %224 = bitcast float* %163 to i32*
  %225 = load i32, i32* %224, align 4
  br label %226

226:                                              ; preds = %174, %176
  %227 = phi i32* [ %175, %174 ], [ %224, %176 ]
  %228 = phi i32 [ %166, %174 ], [ %225, %176 ]
  %229 = bitcast float* %161 to i32*
  store i32 %228, i32* %229, align 4
  %230 = load i32, i32* %227, align 4
  %231 = getelementptr inbounds float, float* %6, i64 %14
  %232 = bitcast float* %231 to i32*
  store i32 %230, i32* %232, align 4
  br label %304

233:                                              ; preds = %167, %160
  %234 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 3
  %235 = load float, float* %234, align 4
  %236 = fcmp ogt float %162, %235
  %237 = bitcast float %235 to i32
  br i1 %236, label %238, label %304

238:                                              ; preds = %233
  %239 = sext i32 %3 to i64
  %240 = getelementptr inbounds float, float* %6, i64 %239
  %241 = load float, float* %240, align 4
  %242 = fcmp ugt float %241, %235
  br i1 %242, label %304, label %243

243:                                              ; preds = %238
  %244 = icmp eq float* %7, null
  br i1 %244, label %245, label %247

245:                                              ; preds = %243
  %246 = bitcast float* %234 to i32*
  br label %297

247:                                              ; preds = %243
  %248 = fsub float %235, %241
  %249 = fsub float %162, %241
  %250 = fdiv float %248, %249
  %251 = fsub float 1.000000e+00, %250
  %252 = getelementptr inbounds float, float* %7, i64 %11
  %253 = load float, float* %252, align 4
  %254 = fmul float %250, %253
  %255 = getelementptr inbounds float, float* %7, i64 %239
  %256 = load float, float* %255, align 4
  %257 = fmul float %251, %256
  %258 = fadd float %254, %257
  store float %258, float* %252, align 4
  %259 = getelementptr inbounds float, float* %8, i64 %11
  %260 = load float, float* %259, align 4
  %261 = fmul float %250, %260
  %262 = getelementptr inbounds float, float* %8, i64 %239
  %263 = load float, float* %262, align 4
  %264 = fmul float %251, %263
  %265 = fadd float %261, %264
  store float %265, float* %259, align 4
  %266 = getelementptr inbounds float, float* %9, i64 %11
  %267 = load float, float* %266, align 4
  %268 = fmul float %250, %267
  %269 = getelementptr inbounds float, float* %9, i64 %239
  %270 = load float, float* %269, align 4
  %271 = fmul float %251, %270
  %272 = fadd float %268, %271
  store float %272, float* %266, align 4
  %273 = getelementptr inbounds float, float* %7, i64 %14
  %274 = load float, float* %273, align 4
  %275 = fmul float %250, %274
  %276 = sext i32 %4 to i64
  %277 = getelementptr inbounds float, float* %7, i64 %276
  %278 = load float, float* %277, align 4
  %279 = fmul float %251, %278
  %280 = fadd float %275, %279
  store float %280, float* %273, align 4
  %281 = getelementptr inbounds float, float* %8, i64 %14
  %282 = load float, float* %281, align 4
  %283 = fmul float %250, %282
  %284 = getelementptr inbounds float, float* %8, i64 %276
  %285 = load float, float* %284, align 4
  %286 = fmul float %251, %285
  %287 = fadd float %283, %286
  store float %287, float* %281, align 4
  %288 = getelementptr inbounds float, float* %9, i64 %14
  %289 = load float, float* %288, align 4
  %290 = fmul float %250, %289
  %291 = getelementptr inbounds float, float* %9, i64 %276
  %292 = load float, float* %291, align 4
  %293 = fmul float %251, %292
  %294 = fadd float %290, %293
  store float %294, float* %288, align 4
  %295 = bitcast float* %234 to i32*
  %296 = load i32, i32* %295, align 4
  br label %297

297:                                              ; preds = %245, %247
  %298 = phi i32* [ %246, %245 ], [ %295, %247 ]
  %299 = phi i32 [ %237, %245 ], [ %296, %247 ]
  %300 = bitcast float* %161 to i32*
  store i32 %299, i32* %300, align 4
  %301 = load i32, i32* %298, align 4
  %302 = getelementptr inbounds float, float* %6, i64 %14
  %303 = bitcast float* %302 to i32*
  store i32 %301, i32* %303, align 4
  br label %304

304:                                              ; preds = %90, %233, %238, %95, %297, %226, %154, %84
  %305 = phi i1 [ true, %84 ], [ true, %154 ], [ true, %226 ], [ true, %297 ], [ false, %95 ], [ false, %238 ], [ false, %233 ], [ false, %90 ]
  ret i1 %305
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #9

; Function Attrs: nounwind readnone speculatable
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #8

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
