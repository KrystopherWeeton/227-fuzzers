; ModuleID = '../../third_party/skia/src/core/SkGlyphBuffer.cpp'
source_filename = "../../third_party/skia/src/core/SkGlyphBuffer.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkSourceGlyphBuffer = type { %class.SkZip, i64, i32, i32, %class.SkZip.1, %class.SkSTArray, %class.SkSTArray.6 }
%class.SkZip = type { %"class.std::__1::tuple", i64 }
%"class.std::__1::tuple" = type { %"struct.std::__1::__tuple_impl" }
%"struct.std::__1::__tuple_impl" = type { %"class.std::__1::__tuple_leaf", %"class.std::__1::__tuple_leaf.0" }
%"class.std::__1::__tuple_leaf" = type { i16* }
%"class.std::__1::__tuple_leaf.0" = type { %struct.SkPoint* }
%struct.SkPoint = type { float, float }
%class.SkZip.1 = type { %"class.std::__1::tuple.2", i64 }
%"class.std::__1::tuple.2" = type { %"struct.std::__1::__tuple_impl.3" }
%"struct.std::__1::__tuple_impl.3" = type { %"class.std::__1::__tuple_leaf.4", %"class.std::__1::__tuple_leaf.5" }
%"class.std::__1::__tuple_leaf.4" = type { i16* }
%"class.std::__1::__tuple_leaf.5" = type { %struct.SkPoint* }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [8 x i8] }
%class.SkTArray = type { i16*, i64 }
%class.SkSTArray.6 = type { %class.SkAlignedSTStorage.7, %class.SkTArray.8 }
%class.SkAlignedSTStorage.7 = type { [32 x i8] }
%class.SkTArray.8 = type { %struct.SkPoint*, i64 }
%class.SkDrawableGlyphBuffer = type { i64, i64, i64, %class.SkAutoTArray, %class.SkAutoTMalloc }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.SkGlyphVariant* }
%class.SkGlyphVariant = type { %union.anon }
%union.anon = type { %class.SkGlyph* }
%class.SkGlyph = type { i16, i16, i16, i16, i8*, %"struct.SkGlyph::PathData"*, float, float, i8, i8, %struct.SkPackedGlyphID }
%"struct.SkGlyph::PathData" = type <{ %"struct.SkGlyph::Intercept"*, %class.SkPath, i8, [7 x i8] }>
%"struct.SkGlyph::Intercept" = type { %"struct.SkGlyph::Intercept"*, [2 x float], [2 x float] }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.12", %"struct.std::__1::atomic.12", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.10, %class.SkTDArray.11, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.9" }
%"struct.std::__1::__atomic_base.9" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%class.SkTDArray.10 = type { i8*, i32, i32 }
%class.SkTDArray.11 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.17 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.12" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.17 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.18", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.18" = type { %"struct.std::__1::__atomic_base.19" }
%"struct.std::__1::__atomic_base.19" = type { %"struct.std::__1::__cxx_atomic_impl.20" }
%"struct.std::__1::__cxx_atomic_impl.20" = type { %"struct.std::__1::__cxx_atomic_base_impl.21" }
%"struct.std::__1::__cxx_atomic_base_impl.21" = type { i8 }
%"struct.std::__1::atomic.12" = type { %"struct.std::__1::__atomic_base.13" }
%"struct.std::__1::__atomic_base.13" = type { %"struct.std::__1::__atomic_base.14" }
%"struct.std::__1::__atomic_base.14" = type { %"struct.std::__1::__cxx_atomic_impl.15" }
%"struct.std::__1::__cxx_atomic_impl.15" = type { %"struct.std::__1::__cxx_atomic_base_impl.16" }
%"struct.std::__1::__cxx_atomic_base_impl.16" = type { i8 }
%struct.SkPackedGlyphID = type { i32 }
%class.SkAutoTMalloc = type { %"class.std::__1::unique_ptr.23" }
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %struct.SkPoint* }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkGlyphPositionRoundingSpec = type { %struct.SkPoint, %struct.SkIPoint, %struct.SkIPoint }
%struct.SkIPoint = type { i32, i32 }
%class.SkString = type { %class.sk_sp.46 }
%class.sk_sp.46 = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>

$_ZN8SkTArrayItLb0EE12checkReallocEiNS0_11ReallocTypeE = comdat any

$_ZN8SkTArrayI7SkPointLb0EE12checkReallocEiNS1_11ReallocTypeE = comdat any

@.str = private unnamed_addr constant [15 x i8] c"0x%x:(%a,%a), \00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19SkSourceGlyphBuffer5resetEv(%class.SkSourceGlyphBuffer*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkSourceGlyphBuffer, %class.SkSourceGlyphBuffer* %0, i64 0, i32 5, i32 0, i32 0, i64 8
  %3 = bitcast i8* %2 to %class.SkTArray*
  %4 = getelementptr inbounds %class.SkSourceGlyphBuffer, %class.SkSourceGlyphBuffer* %0, i64 0, i32 5, i32 0, i32 0, i64 16
  %5 = bitcast i8* %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, -4294967295
  store i64 %7, i64* %5, align 8
  tail call void @_ZN8SkTArrayItLb0EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* %3, i32 0, i32 2) #7
  %8 = load i64, i64* %5, align 8
  %9 = and i64 %8, -4294967297
  store i64 %9, i64* %5, align 8
  %10 = getelementptr inbounds %class.SkSourceGlyphBuffer, %class.SkSourceGlyphBuffer* %0, i64 0, i32 6, i32 0, i32 0, i64 32
  %11 = bitcast i8* %10 to %class.SkTArray.8*
  %12 = getelementptr inbounds %class.SkSourceGlyphBuffer, %class.SkSourceGlyphBuffer* %0, i64 0, i32 6, i32 0, i32 0, i64 40
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = and i64 %14, -4294967295
  store i64 %15, i64* %13, align 8
  tail call void @_ZN8SkTArrayI7SkPointLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray.8* %11, i32 0, i32 2) #7
  %16 = load i64, i64* %13, align 8
  %17 = and i64 %16, -4294967297
  store i64 %17, i64* %13, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN21SkDrawableGlyphBuffer10ensureSizeEm(%class.SkDrawableGlyphBuffer* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkDrawableGlyphBuffer, %class.SkDrawableGlyphBuffer* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ult i64 %4, %1
  br i1 %5, label %6, label %38

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.SkDrawableGlyphBuffer, %class.SkDrawableGlyphBuffer* %0, i64 0, i32 3
  %8 = trunc i64 %1 to i32
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %20, label %10

10:                                               ; preds = %6
  %11 = shl i64 %1, 32
  %12 = ashr exact i64 %11, 32
  %13 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %12, i64 8) #7
  %14 = extractvalue { i64, i1 } %13, 1
  %15 = extractvalue { i64, i1 } %13, 0
  %16 = select i1 %14, i64 -1, i64 %15
  %17 = tail call i8* @_Znam(i64 %16) #8
  %18 = ashr exact i64 %11, 29
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 0, i64 %18, i1 false) #7
  %19 = ptrtoint i8* %17 to i64
  br label %20

20:                                               ; preds = %10, %6
  %21 = phi i64 [ %19, %10 ], [ 0, %6 ]
  %22 = getelementptr inbounds %class.SkAutoTArray, %class.SkAutoTArray* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  %23 = load %class.SkGlyphVariant*, %class.SkGlyphVariant** %22, align 8
  %24 = bitcast %class.SkAutoTArray* %7 to i64*
  store i64 %21, i64* %24, align 8
  %25 = icmp eq %class.SkGlyphVariant* %23, null
  br i1 %25, label %28, label %26

26:                                               ; preds = %20
  %27 = bitcast %class.SkGlyphVariant* %23 to i8*
  tail call void @_ZdaPv(i8* %27) #8
  br label %28

28:                                               ; preds = %20, %26
  %29 = getelementptr inbounds %class.SkDrawableGlyphBuffer, %class.SkDrawableGlyphBuffer* %0, i64 0, i32 4
  %30 = tail call i8* @_Z15sk_malloc_throwmm(i64 %1, i64 8) #7
  %31 = bitcast %class.SkAutoTMalloc* %29 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast %class.SkAutoTMalloc* %29 to i8**
  store i8* %30, i8** %33, align 8
  %34 = icmp eq i64 %32, 0
  br i1 %34, label %37, label %35

35:                                               ; preds = %28
  %36 = inttoptr i64 %32 to i8*
  tail call void @_Z7sk_freePv(i8* %36) #7
  br label %37

37:                                               ; preds = %28, %35
  store i64 %1, i64* %3, align 8
  br label %38

38:                                               ; preds = %37, %2
  %39 = getelementptr inbounds %class.SkDrawableGlyphBuffer, %class.SkDrawableGlyphBuffer* %0, i64 0, i32 1
  %40 = bitcast i64* %39 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN21SkDrawableGlyphBuffer11startSourceERK5SkZipIJKtK7SkPointEE(%class.SkDrawableGlyphBuffer* nocapture, %class.SkZip* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkZip, %class.SkZip* %1, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %class.SkDrawableGlyphBuffer, %class.SkDrawableGlyphBuffer* %0, i64 0, i32 1
  store i64 %4, i64* %5, align 8
  %6 = getelementptr inbounds %class.SkDrawableGlyphBuffer, %class.SkDrawableGlyphBuffer* %0, i64 0, i32 2
  store i64 0, i64* %6, align 8
  %7 = getelementptr inbounds %class.SkZip, %class.SkZip* %1, i64 0, i32 0, i32 0, i32 1, i32 0
  %8 = bitcast %struct.SkPoint** %7 to i8**
  %9 = load i8*, i8** %8, align 8
  %10 = load i64, i64* %3, align 8
  %11 = getelementptr inbounds %class.SkDrawableGlyphBuffer, %class.SkDrawableGlyphBuffer* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %12 = bitcast %struct.SkPoint** %11 to i8**
  %13 = load i8*, i8** %12, align 8
  %14 = shl i64 %10, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %13, i8* align 4 %9, i64 %14, i1 false)
  %15 = load i64, i64* %3, align 8, !noalias !2
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %44, label %17

17:                                               ; preds = %2
  %18 = getelementptr inbounds %class.SkDrawableGlyphBuffer, %class.SkDrawableGlyphBuffer* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %19 = load %class.SkGlyphVariant*, %class.SkGlyphVariant** %18, align 8
  %20 = getelementptr inbounds %class.SkZip, %class.SkZip* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %21 = add i64 %15, -1
  %22 = and i64 %15, 3
  %23 = icmp ult i64 %21, 3
  br i1 %23, label %26, label %24

24:                                               ; preds = %17
  %25 = sub i64 %15, %22
  br label %45

26:                                               ; preds = %45, %17
  %27 = phi %class.SkGlyphVariant* [ %19, %17 ], [ %78, %45 ]
  %28 = phi i64 [ 0, %17 ], [ %80, %45 ]
  %29 = icmp eq i64 %22, 0
  br i1 %29, label %44, label %30

30:                                               ; preds = %26, %30
  %31 = phi %class.SkGlyphVariant* [ %39, %30 ], [ %27, %26 ]
  %32 = phi i64 [ %41, %30 ], [ %28, %26 ]
  %33 = phi i64 [ %42, %30 ], [ %22, %26 ]
  %34 = load i16*, i16** %20, align 8
  %35 = getelementptr inbounds i16, i16* %34, i64 %32
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = shl nuw nsw i32 %37, 2
  %39 = getelementptr inbounds %class.SkGlyphVariant, %class.SkGlyphVariant* %31, i64 1
  %40 = bitcast %class.SkGlyphVariant* %31 to i32*
  store i32 %38, i32* %40, align 8
  %41 = add nuw i64 %32, 1
  %42 = add i64 %33, -1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %30, !llvm.loop !5

44:                                               ; preds = %26, %30, %2
  ret void

45:                                               ; preds = %45, %24
  %46 = phi %class.SkGlyphVariant* [ %19, %24 ], [ %78, %45 ]
  %47 = phi i64 [ 0, %24 ], [ %80, %45 ]
  %48 = phi i64 [ %25, %24 ], [ %81, %45 ]
  %49 = load i16*, i16** %20, align 8
  %50 = getelementptr inbounds i16, i16* %49, i64 %47
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = shl nuw nsw i32 %52, 2
  %54 = getelementptr inbounds %class.SkGlyphVariant, %class.SkGlyphVariant* %46, i64 1
  %55 = bitcast %class.SkGlyphVariant* %46 to i32*
  store i32 %53, i32* %55, align 8
  %56 = or i64 %47, 1
  %57 = load i16*, i16** %20, align 8
  %58 = getelementptr inbounds i16, i16* %57, i64 %56
  %59 = load i16, i16* %58, align 2
  %60 = zext i16 %59 to i32
  %61 = shl nuw nsw i32 %60, 2
  %62 = getelementptr inbounds %class.SkGlyphVariant, %class.SkGlyphVariant* %46, i64 2
  %63 = bitcast %class.SkGlyphVariant* %54 to i32*
  store i32 %61, i32* %63, align 8
  %64 = or i64 %47, 2
  %65 = load i16*, i16** %20, align 8
  %66 = getelementptr inbounds i16, i16* %65, i64 %64
  %67 = load i16, i16* %66, align 2
  %68 = zext i16 %67 to i32
  %69 = shl nuw nsw i32 %68, 2
  %70 = getelementptr inbounds %class.SkGlyphVariant, %class.SkGlyphVariant* %46, i64 3
  %71 = bitcast %class.SkGlyphVariant* %62 to i32*
  store i32 %69, i32* %71, align 8
  %72 = or i64 %47, 3
  %73 = load i16*, i16** %20, align 8
  %74 = getelementptr inbounds i16, i16* %73, i64 %72
  %75 = load i16, i16* %74, align 2
  %76 = zext i16 %75 to i32
  %77 = shl nuw nsw i32 %76, 2
  %78 = getelementptr inbounds %class.SkGlyphVariant, %class.SkGlyphVariant* %46, i64 4
  %79 = bitcast %class.SkGlyphVariant* %70 to i32*
  store i32 %77, i32* %79, align 8
  %80 = add nuw i64 %47, 4
  %81 = add i64 %48, -4
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %26, label %45
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN21SkDrawableGlyphBuffer17startBitmapDeviceERK5SkZipIJKtK7SkPointEES2_RK8SkMatrixRK27SkGlyphPositionRoundingSpec(%class.SkDrawableGlyphBuffer* nocapture, %class.SkZip* nocapture readonly dereferenceable(24), <2 x float>, %class.SkMatrix* nocapture readonly dereferenceable(40), %struct.SkGlyphPositionRoundingSpec* nocapture readonly dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %6 = alloca %class.SkMatrix, align 4
  %7 = getelementptr inbounds %class.SkZip, %class.SkZip* %1, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %class.SkDrawableGlyphBuffer, %class.SkDrawableGlyphBuffer* %0, i64 0, i32 1
  store i64 %8, i64* %9, align 8
  %10 = getelementptr inbounds %class.SkDrawableGlyphBuffer, %class.SkDrawableGlyphBuffer* %0, i64 0, i32 2
  store i64 0, i64* %10, align 8
  %11 = getelementptr inbounds %class.SkZip, %class.SkZip* %1, i64 0, i32 0, i32 0, i32 1, i32 0
  %12 = load %struct.SkPoint*, %struct.SkPoint** %11, align 8
  %13 = load i64, i64* %7, align 8
  %14 = bitcast %class.SkMatrix* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %14) #7
  %15 = bitcast %class.SkMatrix* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %14, i8* align 4 %15, i64 40, i1 false)
  %16 = extractelement <2 x float> %2, i32 0
  %17 = extractelement <2 x float> %2, i32 1
  %18 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix12preTranslateEff(%class.SkMatrix* nonnull %6, float %16, float %17) #7
  %19 = getelementptr inbounds %struct.SkGlyphPositionRoundingSpec, %struct.SkGlyphPositionRoundingSpec* %4, i64 0, i32 0, i32 0
  %20 = load float, float* %19, align 4
  %21 = getelementptr inbounds %struct.SkGlyphPositionRoundingSpec, %struct.SkGlyphPositionRoundingSpec* %4, i64 0, i32 0, i32 1
  %22 = load float, float* %21, align 4
  %23 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix13postTranslateEff(%class.SkMatrix* nonnull %6, float %20, float %22) #7
  %24 = getelementptr inbounds %class.SkDrawableGlyphBuffer, %class.SkDrawableGlyphBuffer* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %25 = load %struct.SkPoint*, %struct.SkPoint** %24, align 8
  %26 = trunc i64 %13 to i32
  call void @_ZNK8SkMatrix9mapPointsEP7SkPointPKS0_i(%class.SkMatrix* nonnull %6, %struct.SkPoint* %25, %struct.SkPoint* %12, i32 %26) #7
  %27 = getelementptr inbounds %struct.SkGlyphPositionRoundingSpec, %struct.SkGlyphPositionRoundingSpec* %4, i64 0, i32 2, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %struct.SkGlyphPositionRoundingSpec, %struct.SkGlyphPositionRoundingSpec* %4, i64 0, i32 2, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %class.SkZip, %class.SkZip* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %32 = load i16*, i16** %31, align 8
  %33 = load i64, i64* %7, align 8
  %34 = load %struct.SkPoint*, %struct.SkPoint** %24, align 8
  %35 = icmp eq i64 %33, 0
  br i1 %35, label %39, label %36

36:                                               ; preds = %5
  %37 = getelementptr inbounds %class.SkDrawableGlyphBuffer, %class.SkDrawableGlyphBuffer* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %38 = load %class.SkGlyphVariant*, %class.SkGlyphVariant** %37, align 8
  br label %40

39:                                               ; preds = %40, %5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %14) #7
  ret void

40:                                               ; preds = %36, %40
  %41 = phi %class.SkGlyphVariant* [ %66, %40 ], [ %38, %36 ]
  %42 = phi i64 [ %68, %40 ], [ 0, %36 ]
  %43 = getelementptr inbounds i16, i16* %32, i64 %42
  %44 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %34, i64 %42
  %45 = load i16, i16* %43, align 2
  %46 = bitcast %struct.SkPoint* %44 to <2 x float>*
  %47 = load <2 x float>, <2 x float>* %46, align 4
  %48 = extractelement <2 x float> %47, i32 0
  %49 = extractelement <2 x float> %47, i32 1
  %50 = call float @llvm.floor.f32(float %48) #7
  %51 = fsub float %48, %50
  %52 = fadd float %51, 1.000000e+00
  %53 = call float @llvm.floor.f32(float %49) #7
  %54 = fsub float %49, %53
  %55 = fadd float %54, 1.000000e+00
  %56 = fmul float %52, 4.000000e+00
  %57 = fptosi float %56 to i32
  %58 = and i32 %28, %57
  %59 = fmul float %55, 0x4130000000000000
  %60 = fptosi float %59 to i32
  %61 = and i32 %30, %60
  %62 = zext i16 %45 to i32
  %63 = shl nuw nsw i32 %62, 2
  %64 = or i32 %58, %63
  %65 = or i32 %64, %61
  %66 = getelementptr inbounds %class.SkGlyphVariant, %class.SkGlyphVariant* %41, i64 1
  %67 = bitcast %class.SkGlyphVariant* %41 to i32*
  store i32 %65, i32* %67, align 8
  %68 = add nuw i64 %42, 1
  %69 = icmp eq i64 %68, %33
  br i1 %69, label %39, label %40
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix12preTranslateEff(%class.SkMatrix*, float, float) local_unnamed_addr #3

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix13postTranslateEff(%class.SkMatrix*, float, float) local_unnamed_addr #3

declare void @_ZNK8SkMatrix9mapPointsEP7SkPointPKS0_i(%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN21SkDrawableGlyphBuffer14startGPUDeviceERK5SkZipIJKtK7SkPointEERK8SkMatrixRK27SkGlyphPositionRoundingSpec(%class.SkDrawableGlyphBuffer* nocapture, %class.SkZip* nocapture readonly dereferenceable(24), %class.SkMatrix* nocapture readonly dereferenceable(40), %struct.SkGlyphPositionRoundingSpec* nocapture readonly dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %5 = alloca %class.SkMatrix, align 4
  %6 = getelementptr inbounds %class.SkZip, %class.SkZip* %1, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %class.SkDrawableGlyphBuffer, %class.SkDrawableGlyphBuffer* %0, i64 0, i32 1
  store i64 %7, i64* %8, align 8
  %9 = getelementptr inbounds %class.SkDrawableGlyphBuffer, %class.SkDrawableGlyphBuffer* %0, i64 0, i32 2
  store i64 0, i64* %9, align 8
  %10 = bitcast %class.SkMatrix* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %10) #7
  %11 = bitcast %class.SkMatrix* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %10, i8* align 4 %11, i64 40, i1 false)
  %12 = getelementptr inbounds %struct.SkGlyphPositionRoundingSpec, %struct.SkGlyphPositionRoundingSpec* %3, i64 0, i32 0, i32 0
  %13 = load float, float* %12, align 4
  %14 = getelementptr inbounds %struct.SkGlyphPositionRoundingSpec, %struct.SkGlyphPositionRoundingSpec* %3, i64 0, i32 0, i32 1
  %15 = load float, float* %14, align 4
  %16 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix13postTranslateEff(%class.SkMatrix* nonnull %5, float %13, float %15) #7
  %17 = getelementptr inbounds %class.SkZip, %class.SkZip* %1, i64 0, i32 0, i32 0, i32 1, i32 0
  %18 = load %struct.SkPoint*, %struct.SkPoint** %17, align 8
  %19 = load i64, i64* %6, align 8
  %20 = getelementptr inbounds %class.SkDrawableGlyphBuffer, %class.SkDrawableGlyphBuffer* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %21 = load %struct.SkPoint*, %struct.SkPoint** %20, align 8
  %22 = trunc i64 %19 to i32
  call void @_ZNK8SkMatrix9mapPointsEP7SkPointPKS0_i(%class.SkMatrix* nonnull %5, %struct.SkPoint* %21, %struct.SkPoint* %18, i32 %22) #7
  %23 = getelementptr inbounds %class.SkDrawableGlyphBuffer, %class.SkDrawableGlyphBuffer* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %24 = load %class.SkGlyphVariant*, %class.SkGlyphVariant** %23, align 8
  %25 = getelementptr inbounds %class.SkZip, %class.SkZip* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %26 = load i16*, i16** %25, align 8
  %27 = load i64, i64* %6, align 8
  %28 = load %struct.SkPoint*, %struct.SkPoint** %20, align 8
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %4
  %31 = getelementptr inbounds %struct.SkGlyphPositionRoundingSpec, %struct.SkGlyphPositionRoundingSpec* %3, i64 0, i32 2
  %32 = bitcast %struct.SkIPoint* %31 to i64*
  br label %34

33:                                               ; preds = %34, %4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %10) #7
  ret void

34:                                               ; preds = %30, %34
  %35 = phi i64 [ 0, %30 ], [ %72, %34 ]
  %36 = getelementptr inbounds %class.SkGlyphVariant, %class.SkGlyphVariant* %24, i64 %35
  %37 = getelementptr inbounds i16, i16* %26, i64 %35
  %38 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %28, i64 %35
  %39 = load i16, i16* %37, align 2
  %40 = bitcast %struct.SkPoint* %38 to <2 x float>*
  %41 = load <2 x float>, <2 x float>* %40, align 4
  %42 = load i64, i64* %32, align 4
  %43 = trunc i64 %42 to i32
  %44 = lshr i64 %42, 32
  %45 = trunc i64 %44 to i32
  %46 = extractelement <2 x float> %41, i32 0
  %47 = extractelement <2 x float> %41, i32 1
  %48 = call float @llvm.floor.f32(float %46) #7
  %49 = fsub float %46, %48
  %50 = fadd float %49, 1.000000e+00
  %51 = call float @llvm.floor.f32(float %47) #7
  %52 = fsub float %47, %51
  %53 = fadd float %52, 1.000000e+00
  %54 = fmul float %50, 4.000000e+00
  %55 = fptosi float %54 to i32
  %56 = and i32 %55, %43
  %57 = fmul float %53, 0x4130000000000000
  %58 = fptosi float %57 to i32
  %59 = and i32 %58, %45
  %60 = zext i16 %39 to i32
  %61 = shl nuw nsw i32 %60, 2
  %62 = or i32 %56, %61
  %63 = or i32 %62, %59
  %64 = bitcast %class.SkGlyphVariant* %36 to i32*
  store i32 %63, i32* %64, align 8
  %65 = load <2 x float>, <2 x float>* %40, align 4
  %66 = extractelement <2 x float> %65, i32 0
  %67 = call float @llvm.floor.f32(float %66) #7
  %68 = insertelement <2 x float> undef, float %67, i32 0
  %69 = extractelement <2 x float> %65, i32 1
  %70 = call float @llvm.floor.f32(float %69) #7
  %71 = insertelement <2 x float> %68, float %70, i32 1
  store <2 x float> %71, <2 x float>* %40, align 4
  %72 = add nuw i64 %35, 1
  %73 = icmp eq i64 %72, %27
  br i1 %73, label %33, label %34
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK21SkDrawableGlyphBuffer9dumpInputEv(%class.SkString* noalias sret, %class.SkDrawableGlyphBuffer* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkString, %class.SkString* %0, i64 0, i32 0, i32 0
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %3, align 8
  tail call void @_ZN8SkStringC1Ev(%class.SkString* %0) #7
  %4 = getelementptr inbounds %class.SkDrawableGlyphBuffer, %class.SkDrawableGlyphBuffer* %1, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %class.SkDrawableGlyphBuffer, %class.SkDrawableGlyphBuffer* %1, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %7 = load %class.SkGlyphVariant*, %class.SkGlyphVariant** %6, align 8
  %8 = getelementptr inbounds %class.SkDrawableGlyphBuffer, %class.SkDrawableGlyphBuffer* %1, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %9 = load %struct.SkPoint*, %struct.SkPoint** %8, align 8
  %10 = icmp eq i64 %5, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %12, %2
  ret void

12:                                               ; preds = %2, %12
  %13 = phi i64 [ %23, %12 ], [ 0, %2 ]
  %14 = getelementptr inbounds %class.SkGlyphVariant, %class.SkGlyphVariant* %7, i64 %13
  %15 = bitcast %class.SkGlyphVariant* %14 to i32*
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %9, i64 %13, i32 0
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %9, i64 %13, i32 1
  %21 = load float, float* %20, align 4
  %22 = fpext float %21 to double
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 %16, double %19, double %22) #7
  %23 = add nuw i64 %13, 1
  %24 = icmp eq i64 %23, %5
  br i1 %24, label %11, label %12
}

declare void @_ZN8SkStringC1Ev(%class.SkString*) unnamed_addr #3

declare void @_ZN8SkString7appendfEPKcz(%class.SkString*, i8*, ...) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN21SkDrawableGlyphBuffer5resetEv(%class.SkDrawableGlyphBuffer* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkDrawableGlyphBuffer, %class.SkDrawableGlyphBuffer* %0, i64 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = icmp ugt i64 %3, 200
  br i1 %4, label %5, label %22

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.SkDrawableGlyphBuffer, %class.SkDrawableGlyphBuffer* %0, i64 0, i32 3
  %7 = getelementptr inbounds %class.SkAutoTArray, %class.SkAutoTArray* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %class.SkGlyphVariant*, %class.SkGlyphVariant** %7, align 8
  %9 = bitcast %class.SkAutoTArray* %6 to i64*
  store i64 0, i64* %9, align 8
  %10 = icmp eq %class.SkGlyphVariant* %8, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %5
  %12 = bitcast %class.SkGlyphVariant* %8 to i8*
  tail call void @_ZdaPv(i8* %12) #8
  br label %13

13:                                               ; preds = %5, %11
  %14 = getelementptr inbounds %class.SkDrawableGlyphBuffer, %class.SkDrawableGlyphBuffer* %0, i64 0, i32 4
  %15 = getelementptr inbounds %class.SkAutoTMalloc, %class.SkAutoTMalloc* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = bitcast %class.SkAutoTMalloc* %14 to i64*
  %17 = load i64, i64* %16, align 8
  store %struct.SkPoint* null, %struct.SkPoint** %15, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = inttoptr i64 %17 to i8*
  tail call void @_Z7sk_freePv(i8* %20) #7
  br label %21

21:                                               ; preds = %13, %19
  store i64 0, i64* %2, align 8
  br label %22

22:                                               ; preds = %21, %1
  %23 = getelementptr inbounds %class.SkDrawableGlyphBuffer, %class.SkDrawableGlyphBuffer* %0, i64 0, i32 1
  %24 = bitcast i64* %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayItLb0EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %75

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %75, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 2) #7
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %63, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %58, %50 ]
  %52 = shl nuw i64 %51, 1
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = bitcast i8* %53 to i16*
  %55 = load i16*, i16** %49, align 8
  %56 = getelementptr inbounds i16, i16* %55, i64 %51
  %57 = load i16, i16* %56, align 2
  store i16 %57, i16* %54, align 2
  %58 = add nuw nsw i64 %51, 1
  %59 = load i64, i64* %4, align 8
  %60 = lshr i64 %59, 1
  %61 = and i64 %60, 2147483647
  %62 = icmp ult i64 %58, %61
  br i1 %62, label %50, label %63

63:                                               ; preds = %50, %35
  %64 = phi i64 [ %45, %35 ], [ %59, %50 ]
  %65 = and i64 %64, 1
  %66 = icmp eq i64 %65, 0
  %67 = bitcast %class.SkTArray* %0 to i8**
  br i1 %66, label %71, label %68

68:                                               ; preds = %63
  %69 = load i8*, i8** %67, align 8
  tail call void @_Z7sk_freePv(i8* %69) #7
  %70 = load i64, i64* %4, align 8
  br label %71

71:                                               ; preds = %63, %68
  %72 = phi i64 [ %70, %68 ], [ %64, %63 ]
  store i8* %44, i8** %67, align 8
  %73 = and i64 %72, -4294967298
  %74 = or i64 %73, 1
  store i64 %74, i64* %4, align 8
  br label %75

75:                                               ; preds = %71, %32, %21
  ret void
}

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #3

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayI7SkPointLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray.8*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray.8, %class.SkTArray.8* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %76

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %76, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 8) #7
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %64, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray.8, %class.SkTArray.8* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %59, %50 ]
  %52 = shl nuw nsw i64 %51, 3
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = load %struct.SkPoint*, %struct.SkPoint** %49, align 8
  %55 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %54, i64 %51
  %56 = bitcast %struct.SkPoint* %55 to i64*
  %57 = bitcast i8* %53 to i64*
  %58 = load i64, i64* %56, align 4
  store i64 %58, i64* %57, align 4
  %59 = add nuw nsw i64 %51, 1
  %60 = load i64, i64* %4, align 8
  %61 = lshr i64 %60, 1
  %62 = and i64 %61, 2147483647
  %63 = icmp ult i64 %59, %62
  br i1 %63, label %50, label %64

64:                                               ; preds = %50, %35
  %65 = phi i64 [ %45, %35 ], [ %60, %50 ]
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  %68 = bitcast %class.SkTArray.8* %0 to i8**
  br i1 %67, label %72, label %69

69:                                               ; preds = %64
  %70 = load i8*, i8** %68, align 8
  tail call void @_Z7sk_freePv(i8* %70) #7
  %71 = load i64, i64* %4, align 8
  br label %72

72:                                               ; preds = %64, %69
  %73 = phi i64 [ %71, %69 ], [ %65, %64 ]
  store i8* %44, i8** %68, align 8
  %74 = and i64 %73, -4294967298
  %75 = or i64 %74, 1
  store i64 %75, i64* %4, align 8
  br label %76

76:                                               ; preds = %72, %32, %21
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK5SkZipIJKtK7SkPointEE3endEv: argument 0"}
!4 = distinct !{!4, !"_ZNK5SkZipIJKtK7SkPointEE3endEv"}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.unroll.disable"}
