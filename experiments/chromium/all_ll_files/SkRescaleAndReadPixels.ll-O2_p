; ModuleID = '../../third_party/skia/src/image/SkRescaleAndReadPixels.cpp'
source_filename = "../../third_party/skia/src/image/SkRescaleAndReadPixels.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkPaint = type <{ %class.sk_sp.9, %class.sk_sp.10, %class.sk_sp.11, %class.sk_sp.12, %class.sk_sp.13, %struct.SkRGBA4f, float, float, %union.anon, [4 x i8] }>
%class.sk_sp.9 = type { %class.SkPathEffect* }
%class.SkPathEffect = type opaque
%class.sk_sp.10 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.11 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type opaque
%class.sk_sp.12 = type { %class.SkColorFilter* }
%class.SkColorFilter = type opaque
%class.sk_sp.13 = type { %class.SkImageFilter* }
%class.SkImageFilter = type opaque
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon = type { %struct.anon }
%struct.anon = type { i32 }
%class.SkBitmap = type { %class.sk_sp.7, %class.SkPixmap, %class.sk_sp.8 }
%class.sk_sp.7 = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp, i32, i32 }
%class.sk_sp = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.8 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%"class.SkImage::AsyncReadResult" = type { i32 (...)** }
%struct.SkSamplingOptions = type { i8, %struct.SkCubicResampler, i32, i32 }
%struct.SkCubicResampler = type { float, float }
%class.sk_sp.14 = type { %class.SkSurface* }
%class.SkSurface = type { %class.SkRefCnt.base, %class.SkSurfaceProps, i32, i32, i32 }
%class.SkSurfaceProps = type { i32, i32 }
%class.sk_sp.15 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkRect = type { float, float, float, float }
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.16, [384 x i64], %class.sk_sp.17, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr.18", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.24" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp.16 = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.17 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.GrDirectContext = type opaque
%class.Result = type { %"class.SkImage::AsyncReadResult", %"class.std::__1::unique_ptr.39", i64 }
%"class.std::__1::unique_ptr.39" = type { %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { i8* }

@__const._Z22SkRescaleAndReadPixels8SkBitmapRK11SkImageInfoRK7SkIRectN7SkImage12RescaleGammaENS6_11RescaleModeEPFvPvNSt3__110unique_ptrIKNS6_15AsyncReadResultENSA_14default_deleteISD_EEEEES9_.paint = private unnamed_addr constant %class.SkPaint <{ %class.sk_sp.9 { %class.SkPathEffect* inttoptr (i64 -6148914691236517206 to %class.SkPathEffect*) }, %class.sk_sp.10 { %class.SkShader* inttoptr (i64 -6148914691236517206 to %class.SkShader*) }, %class.sk_sp.11 { %class.SkMaskFilter* inttoptr (i64 -6148914691236517206 to %class.SkMaskFilter*) }, %class.sk_sp.12 { %class.SkColorFilter* inttoptr (i64 -6148914691236517206 to %class.SkColorFilter*) }, %class.sk_sp.13 { %class.SkImageFilter* inttoptr (i64 -6148914691236517206 to %class.SkImageFilter*) }, %struct.SkRGBA4f { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, %union.anon { %struct.anon { i32 -1431655766 } }, [4 x i8] c"\AA\AA\AA\AA" }>, align 8
@_ZTVZ22SkRescaleAndReadPixels8SkBitmapRK11SkImageInfoRK7SkIRectN7SkImage12RescaleGammaENS6_11RescaleModeEPFvPvNSt3__110unique_ptrIKNS6_15AsyncReadResultENSA_14default_deleteISD_EEEEES9_E6Result = internal unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.Result*)* @_ZZ22SkRescaleAndReadPixels8SkBitmapRK11SkImageInfoRK7SkIRectN7SkImage12RescaleGammaENS6_11RescaleModeEPFvPvNSt3__110unique_ptrIKNS6_15AsyncReadResultENSA_14default_deleteISD_EEEEES9_EN6ResultD2Ev to i8*), i8* bitcast (void (%class.Result*)* @_ZZ22SkRescaleAndReadPixels8SkBitmapRK11SkImageInfoRK7SkIRectN7SkImage12RescaleGammaENS6_11RescaleModeEPFvPvNSt3__110unique_ptrIKNS6_15AsyncReadResultENSA_14default_deleteISD_EEEEES9_EN6ResultD0Ev to i8*), i8* bitcast (i32 (%class.Result*)* @_ZZ22SkRescaleAndReadPixels8SkBitmapRK11SkImageInfoRK7SkIRectN7SkImage12RescaleGammaENS6_11RescaleModeEPFvPvNSt3__110unique_ptrIKNS6_15AsyncReadResultENSA_14default_deleteISD_EEEEES9_ENK6Result5countEv to i8*), i8* bitcast (i8* (%class.Result*, i32)* @_ZZ22SkRescaleAndReadPixels8SkBitmapRK11SkImageInfoRK7SkIRectN7SkImage12RescaleGammaENS6_11RescaleModeEPFvPvNSt3__110unique_ptrIKNS6_15AsyncReadResultENSA_14default_deleteISD_EEEEES9_ENK6Result4dataEi to i8*), i8* bitcast (i64 (%class.Result*, i32)* @_ZZ22SkRescaleAndReadPixels8SkBitmapRK11SkImageInfoRK7SkIRectN7SkImage12RescaleGammaENS6_11RescaleModeEPFvPvNSt3__110unique_ptrIKNS6_15AsyncReadResultENSA_14default_deleteISD_EEEEES9_ENK6Result8rowBytesEi to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z22SkRescaleAndReadPixels8SkBitmapRK11SkImageInfoRK7SkIRectN7SkImage12RescaleGammaENS6_11RescaleModeEPFvPvNSt3__110unique_ptrIKNS6_15AsyncReadResultENSA_14default_deleteISD_EEEEES9_(%class.SkBitmap*, %struct.SkImageInfo* dereferenceable(24), %struct.SkIRect* nocapture readonly dereferenceable(16), i1 zeroext, i32, void (i8*, %"class.SkImage::AsyncReadResult"*)* nocapture, i8*) local_unnamed_addr #0 {
  %8 = alloca %class.SkPaint, align 8
  %9 = alloca %struct.SkSamplingOptions, align 4
  %10 = alloca %class.sk_sp, align 8
  %11 = alloca %struct.SkImageInfo, align 8
  %12 = alloca %class.sk_sp.14, align 8
  %13 = alloca %class.sk_sp.15, align 8
  %14 = alloca %class.sk_sp.15, align 8
  %15 = alloca %class.sk_sp.15, align 8
  %16 = alloca %struct.SkImageInfo, align 8
  %17 = alloca %class.sk_sp.14, align 8
  %18 = alloca { <2 x float>, <2 x float> }, align 8
  %19 = bitcast { <2 x float>, <2 x float> }* %18 to %struct.SkRect*
  %20 = alloca { <2 x float>, <2 x float> }, align 8
  %21 = bitcast { <2 x float>, <2 x float> }* %20 to %struct.SkRect*
  %22 = alloca %class.sk_sp.15, align 8
  %23 = alloca %class.SkPixmap, align 8
  %24 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 2
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = sub i32 %25, %27
  %29 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 3
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = sub i32 %30, %32
  %34 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 1, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = sitofp i32 %35 to float
  %37 = sitofp i32 %28 to float
  %38 = fdiv float %36, %37
  %39 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 1, i32 1
  %40 = load i32, i32* %39, align 4
  %41 = sitofp i32 %40 to float
  %42 = sitofp i32 %33 to float
  %43 = fdiv float %41, %42
  %44 = icmp ne i32 %4, 0
  br i1 %44, label %45, label %58

45:                                               ; preds = %7
  %46 = fcmp ogt float %38, 1.000000e+00
  %47 = tail call float @log2f(float %38) #11
  %48 = tail call float @llvm.ceil.f32(float %47) #11
  %49 = tail call float @llvm.floor.f32(float %47) #11
  %50 = select i1 %46, float %48, float %49
  %51 = fptosi float %50 to i32
  %52 = fcmp ogt float %43, 1.000000e+00
  %53 = tail call float @log2f(float %43) #11
  %54 = tail call float @llvm.ceil.f32(float %53) #11
  %55 = tail call float @llvm.floor.f32(float %53) #11
  %56 = select i1 %52, float %54, float %55
  %57 = fptosi float %56 to i32
  br label %63

58:                                               ; preds = %7
  %59 = fcmp une float %38, 1.000000e+00
  %60 = zext i1 %59 to i32
  %61 = fcmp une float %43, 1.000000e+00
  %62 = zext i1 %61 to i32
  br label %63

63:                                               ; preds = %58, %45
  %64 = phi i32 [ %51, %45 ], [ %60, %58 ]
  %65 = phi i32 [ %57, %45 ], [ %62, %58 ]
  %66 = bitcast %class.SkPaint* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %66) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %66, i8* align 8 bitcast (%class.SkPaint* @__const._Z22SkRescaleAndReadPixels8SkBitmapRK11SkImageInfoRK7SkIRectN7SkImage12RescaleGammaENS6_11RescaleModeEPFvPvNSt3__110unique_ptrIKNS6_15AsyncReadResultENSA_14default_deleteISD_EEEEES9_.paint to i8*), i64 72, i1 false)
  call void @_ZN7SkPaintC1Ev(%class.SkPaint* nonnull %8) #11
  %67 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %8, i64 0, i32 8, i32 0, i32 0
  %68 = load i32, i32* %67, align 8
  %69 = and i32 %68, -261121
  %70 = or i32 %69, 1024
  store i32 %70, i32* %67, align 8
  %71 = or i32 %65, %64
  %72 = icmp slt i32 %71, 0
  %73 = and i1 %44, %72
  %74 = select i1 %73, i32 1, i32 %4
  %75 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %75) #11
  %76 = bitcast %struct.SkSamplingOptions* %9 to i32*
  store i32 -1431655936, i32* %76, align 4, !alias.scope !2
  %77 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %9, i64 0, i32 1, i32 0
  %78 = bitcast float* %77 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %78, i8 0, i64 16, i1 false) #11, !alias.scope !2
  switch i32 %74, label %88 [
    i32 1, label %79
    i32 2, label %81
  ]

79:                                               ; preds = %63
  store i8 0, i8* %75, align 4, !alias.scope !2
  store float 0.000000e+00, float* %77, align 4, !alias.scope !2
  %80 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %9, i64 0, i32 1, i32 1
  store float 0.000000e+00, float* %80, align 4, !alias.scope !2
  br label %84

81:                                               ; preds = %63
  store i8 1, i8* %75, align 4, !alias.scope !2
  %82 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %9, i64 0, i32 1
  %83 = bitcast %struct.SkCubicResampler* %82 to i64*
  store i64 4515609228859845291, i64* %83, align 4, !alias.scope !2
  br label %84

84:                                               ; preds = %81, %79
  %85 = phi i32 [ 1, %79 ], [ 0, %81 ]
  %86 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %9, i64 0, i32 2
  store i32 %85, i32* %86, align 4, !alias.scope !2
  %87 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %9, i64 0, i32 3
  store i32 0, i32* %87, align 4, !alias.scope !2
  br label %88

88:                                               ; preds = %84, %63
  %89 = load i32, i32* %26, align 4
  %90 = load i32, i32* %31, align 4
  br i1 %3, label %91, label %190

91:                                               ; preds = %88
  %92 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %0, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %93 = load %class.SkColorSpace*, %class.SkColorSpace** %92, align 8
  %94 = icmp eq %class.SkColorSpace* %93, null
  br i1 %94, label %190, label %95

95:                                               ; preds = %91
  %96 = call zeroext i1 @_ZNK12SkColorSpace13gammaIsLinearEv(%class.SkColorSpace* nonnull %93) #11
  br i1 %96, label %190, label %97

97:                                               ; preds = %95
  %98 = bitcast %class.sk_sp* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %98) #11
  %99 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %10, i64 0, i32 0
  store %class.SkColorSpace* inttoptr (i64 -6148914691236517206 to %class.SkColorSpace*), %class.SkColorSpace** %99, align 8
  %100 = load %class.SkColorSpace*, %class.SkColorSpace** %92, align 8
  call void @_ZNK12SkColorSpace15makeLinearGammaEv(%class.sk_sp* nonnull sret %10, %class.SkColorSpace* %100) #11
  %101 = bitcast %struct.SkImageInfo* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %101) #11
  %102 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %11, i64 0, i32 0, i32 0, i32 0
  %103 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %11, i64 0, i32 0, i32 1
  %104 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %0, i64 0, i32 1, i32 2, i32 0, i32 2
  %105 = load i32, i32* %104, align 4
  %106 = bitcast %class.sk_sp* %10 to i64*
  %107 = load i64, i64* %106, align 8
  store %class.SkColorSpace* null, %class.SkColorSpace** %99, align 8
  %108 = zext i32 %105 to i64
  %109 = shl nuw i64 %108, 32
  %110 = or i64 %109, 13
  %111 = zext i32 %33 to i64
  %112 = shl nuw i64 %111, 32
  %113 = zext i32 %28 to i64
  %114 = or i64 %112, %113
  %115 = bitcast %struct.SkImageInfo* %11 to i64*
  store i64 %107, i64* %115, align 8, !alias.scope !5
  %116 = bitcast i32* %103 to i64*
  store i64 %110, i64* %116, align 8, !alias.scope !5
  %117 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %11, i64 0, i32 1
  %118 = bitcast %struct.SkISize* %117 to i64*
  store i64 %114, i64* %118, align 8, !alias.scope !5
  %119 = bitcast %class.sk_sp.14* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %119) #11
  %120 = getelementptr inbounds %class.sk_sp.14, %class.sk_sp.14* %12, i64 0, i32 0
  store %class.SkSurface* inttoptr (i64 -6148914691236517206 to %class.SkSurface*), %class.SkSurface** %120, align 8
  call void @_ZN9SkSurface10MakeRasterERK11SkImageInfomPK14SkSurfaceProps(%class.sk_sp.14* nonnull sret %12, %struct.SkImageInfo* nonnull dereferenceable(24) %11, i64 0, %class.SkSurfaceProps* null) #11
  %121 = load %class.SkSurface*, %class.SkSurface** %120, align 8
  %122 = icmp eq %class.SkSurface* %121, null
  br i1 %122, label %123, label %124

123:                                              ; preds = %97
  call void %5(i8* %6, %"class.SkImage::AsyncReadResult"* null) #11
  br label %152

124:                                              ; preds = %97
  %125 = call %class.SkCanvas* @_ZN9SkSurface9getCanvasEv(%class.SkSurface* nonnull %121) #11
  %126 = bitcast %class.sk_sp.15* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %126) #11
  call void @_ZNK8SkBitmap7asImageEv(%class.sk_sp.15* nonnull sret %13, %class.SkBitmap* %0) #11
  %127 = getelementptr inbounds %class.sk_sp.15, %class.sk_sp.15* %13, i64 0, i32 0
  %128 = load %class.SkImage*, %class.SkImage** %127, align 8
  %129 = sub nsw i32 0, %89
  %130 = sitofp i32 %129 to float
  %131 = sub nsw i32 0, %90
  %132 = sitofp i32 %131 to float
  call void @_ZN8SkCanvas9drawImageEPK7SkImageffRK17SkSamplingOptionsPK7SkPaint(%class.SkCanvas* %125, %class.SkImage* %128, float %130, float %132, %struct.SkSamplingOptions* nonnull dereferenceable(20) %9, %class.SkPaint* nonnull %8) #11
  %133 = load %class.SkImage*, %class.SkImage** %127, align 8
  %134 = icmp eq %class.SkImage* %133, null
  br i1 %134, label %145, label %135

135:                                              ; preds = %124
  %136 = getelementptr inbounds %class.SkImage, %class.SkImage* %133, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %137 = atomicrmw add i32* %136, i32 -1 acq_rel
  %138 = icmp eq i32 %137, 1
  br i1 %138, label %139, label %145

139:                                              ; preds = %135
  %140 = bitcast %class.SkImage* %133 to %class.SkRefCntBase*
  %141 = bitcast %class.SkImage* %133 to void (%class.SkRefCntBase*)***
  %142 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %141, align 8
  %143 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %142, i64 2
  %144 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %143, align 8
  call void %144(%class.SkRefCntBase* nonnull %140) #11
  br label %145

145:                                              ; preds = %124, %135, %139
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %126) #11
  %146 = bitcast %class.sk_sp.14* %12 to i64*
  %147 = load i64, i64* %146, align 8
  store %class.SkSurface* null, %class.SkSurface** %120, align 8
  %148 = bitcast %class.sk_sp.15* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %148) #11
  %149 = inttoptr i64 %147 to %class.SkSurface*
  call void @_ZN9SkSurface17makeImageSnapshotEv(%class.sk_sp.15* nonnull sret %14, %class.SkSurface* %149) #11
  %150 = bitcast %class.sk_sp.15* %14 to i64*
  %151 = load i64, i64* %150, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %148) #11
  br label %152

152:                                              ; preds = %145, %123
  %153 = phi i64 [ %151, %145 ], [ 0, %123 ]
  %154 = phi i64 [ %147, %145 ], [ 0, %123 ]
  %155 = phi i32 [ 0, %145 ], [ %89, %123 ]
  %156 = phi i32 [ 0, %145 ], [ %90, %123 ]
  %157 = phi i32 [ 1, %145 ], [ 0, %123 ]
  %158 = phi i1 [ true, %145 ], [ false, %123 ]
  %159 = load %class.SkSurface*, %class.SkSurface** %120, align 8
  %160 = icmp eq %class.SkSurface* %159, null
  br i1 %160, label %171, label %161

161:                                              ; preds = %152
  %162 = getelementptr inbounds %class.SkSurface, %class.SkSurface* %159, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %163 = atomicrmw add i32* %162, i32 -1 acq_rel
  %164 = icmp eq i32 %163, 1
  br i1 %164, label %165, label %171

165:                                              ; preds = %161
  %166 = bitcast %class.SkSurface* %159 to %class.SkRefCntBase*
  %167 = bitcast %class.SkSurface* %159 to void (%class.SkRefCntBase*)***
  %168 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %167, align 8
  %169 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %168, i64 2
  %170 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %169, align 8
  call void %170(%class.SkRefCntBase* nonnull %166) #11
  br label %171

171:                                              ; preds = %152, %161, %165
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %119) #11
  %172 = load %class.SkColorSpace*, %class.SkColorSpace** %102, align 8
  %173 = icmp eq %class.SkColorSpace* %172, null
  br i1 %173, label %180, label %174

174:                                              ; preds = %171
  %175 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %172, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %176 = atomicrmw add i32* %175, i32 -1 acq_rel
  %177 = icmp eq i32 %176, 1
  br i1 %177, label %178, label %180

178:                                              ; preds = %174
  %179 = bitcast %class.SkColorSpace* %172 to i8*
  call void @_ZdlPv(i8* %179) #12
  br label %180

180:                                              ; preds = %171, %174, %178
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %101) #11
  %181 = load %class.SkColorSpace*, %class.SkColorSpace** %99, align 8
  %182 = icmp eq %class.SkColorSpace* %181, null
  br i1 %182, label %189, label %183

183:                                              ; preds = %180
  %184 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %181, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %185 = atomicrmw add i32* %184, i32 -1 acq_rel
  %186 = icmp eq i32 %185, 1
  br i1 %186, label %187, label %189

187:                                              ; preds = %183
  %188 = bitcast %class.SkColorSpace* %181 to i8*
  call void @_ZdlPv(i8* %188) #12
  br label %189

189:                                              ; preds = %180, %183, %187
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %98) #11
  br i1 %158, label %195, label %465

190:                                              ; preds = %88, %95, %91
  %191 = bitcast %class.sk_sp.15* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %191) #11
  %192 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %0, i64 0, i32 1
  call void @_ZN7SkImage14MakeFromRasterERK8SkPixmapPFvPKvPvES5_(%class.sk_sp.15* nonnull sret %15, %class.SkPixmap* dereferenceable(40) %192, void (i8*, i8*)* null, i8* null) #11
  %193 = bitcast %class.sk_sp.15* %15 to i64*
  %194 = load i64, i64* %193, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %191) #11
  br label %195

195:                                              ; preds = %189, %190
  %196 = phi i64 [ %194, %190 ], [ %153, %189 ]
  %197 = phi i64 [ 0, %190 ], [ %154, %189 ]
  %198 = phi i32 [ %89, %190 ], [ %155, %189 ]
  %199 = phi i32 [ %90, %190 ], [ %156, %189 ]
  %200 = phi i32 [ 0, %190 ], [ %157, %189 ]
  %201 = bitcast %struct.SkImageInfo* %16 to i8*
  %202 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %16, i64 0, i32 0, i32 0, i32 0
  %203 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %16, i64 0, i32 0, i32 1
  %204 = bitcast i32* %203 to i64*
  %205 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %16, i64 0, i32 1
  %206 = bitcast %struct.SkISize* %205 to i64*
  %207 = icmp eq %struct.SkImageInfo* %16, %1
  %208 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 0, i32 0, i32 0
  %209 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 0, i32 1
  %210 = bitcast %class.sk_sp.14* %17 to i8*
  %211 = getelementptr inbounds %class.sk_sp.14, %class.sk_sp.14* %17, i64 0, i32 0
  %212 = bitcast { <2 x float>, <2 x float> }* %18 to i8*
  %213 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %18, i64 0, i32 0
  %214 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %18, i64 0, i32 1
  %215 = bitcast { <2 x float>, <2 x float> }* %20 to i8*
  %216 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %20, i64 0, i32 0
  %217 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %20, i64 0, i32 1
  %218 = bitcast %class.sk_sp.14* %17 to i64*
  %219 = bitcast %class.sk_sp.15* %22 to i8*
  %220 = getelementptr inbounds %class.sk_sp.15, %class.sk_sp.15* %22, i64 0, i32 0
  %221 = bitcast %class.sk_sp.15* %22 to i64*
  %222 = bitcast %struct.SkImageInfo* %16 to i8*
  %223 = bitcast i32* %209 to <2 x i64>*
  %224 = bitcast i32* %203 to <2 x i64>*
  br label %225

225:                                              ; preds = %411, %195
  %226 = phi i64 [ %196, %195 ], [ %382, %411 ]
  %227 = phi i64 [ %197, %195 ], [ %383, %411 ]
  %228 = phi i32 [ %28, %195 ], [ %384, %411 ]
  %229 = phi i32 [ %33, %195 ], [ %385, %411 ]
  %230 = phi i32 [ %64, %195 ], [ %254, %411 ]
  %231 = phi i32 [ %65, %195 ], [ %268, %411 ]
  %232 = phi i32 [ %198, %195 ], [ %386, %411 ]
  %233 = phi i32 [ %199, %195 ], [ %387, %411 ]
  %234 = phi i32 [ %200, %195 ], [ %388, %411 ]
  %235 = icmp eq i32 %230, 0
  %236 = icmp eq i32 %231, 0
  %237 = or i32 %231, %230
  %238 = icmp eq i32 %237, 0
  %239 = load i32, i32* %34, align 4
  br i1 %238, label %412, label %240

240:                                              ; preds = %225
  %241 = load i32, i32* %39, align 4
  %242 = icmp slt i32 %230, 0
  br i1 %242, label %243, label %247

243:                                              ; preds = %240
  %244 = xor i32 %230, -1
  %245 = shl i32 %239, %244
  %246 = add nsw i32 %230, 1
  br label %253

247:                                              ; preds = %240
  br i1 %235, label %253, label %248

248:                                              ; preds = %247
  %249 = icmp sgt i32 %230, 1
  %250 = shl nsw i32 %228, 1
  %251 = select i1 %249, i32 %250, i32 %239
  %252 = add nsw i32 %230, -1
  br label %253

253:                                              ; preds = %247, %248, %243
  %254 = phi i32 [ %246, %243 ], [ %252, %248 ], [ 0, %247 ]
  %255 = phi i32 [ %245, %243 ], [ %251, %248 ], [ %239, %247 ]
  %256 = icmp slt i32 %231, 0
  br i1 %256, label %257, label %261

257:                                              ; preds = %253
  %258 = xor i32 %231, -1
  %259 = shl i32 %241, %258
  %260 = add nsw i32 %231, 1
  br label %267

261:                                              ; preds = %253
  br i1 %236, label %267, label %262

262:                                              ; preds = %261
  %263 = icmp sgt i32 %231, 1
  %264 = shl nsw i32 %229, 1
  %265 = select i1 %263, i32 %264, i32 %241
  %266 = add nsw i32 %231, -1
  br label %267

267:                                              ; preds = %261, %262, %257
  %268 = phi i32 [ %260, %257 ], [ %266, %262 ], [ 0, %261 ]
  %269 = phi i32 [ %259, %257 ], [ %265, %262 ], [ %241, %261 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %201) #11
  %270 = inttoptr i64 %226 to %class.SkImage*
  %271 = zext i32 %269 to i64
  %272 = shl nuw i64 %271, 32
  %273 = zext i32 %255 to i64
  %274 = or i64 %272, %273
  %275 = getelementptr inbounds %class.SkImage, %class.SkImage* %270, i64 0, i32 2, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %222, i8 -86, i64 24, i1 false)
  %276 = load %class.SkColorSpace*, %class.SkColorSpace** %275, align 8, !noalias !8
  %277 = icmp eq %class.SkColorSpace* %276, null
  br i1 %277, label %281, label %278

278:                                              ; preds = %267
  %279 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %276, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %280 = atomicrmw add i32* %279, i32 1 monotonic, !noalias !8
  br label %281

281:                                              ; preds = %267, %278
  store %class.SkColorSpace* %276, %class.SkColorSpace** %202, align 8, !alias.scope !8
  %282 = getelementptr inbounds %class.SkImage, %class.SkImage* %270, i64 0, i32 2, i32 0, i32 1
  %283 = bitcast i32* %282 to i64*
  %284 = load i64, i64* %283, align 8, !noalias !8
  store i64 %284, i64* %204, align 8, !alias.scope !8
  store i64 %274, i64* %206, align 8, !alias.scope !8
  %285 = or i32 %268, %254
  %286 = icmp eq i32 %285, 0
  br i1 %286, label %287, label %306

287:                                              ; preds = %281
  br i1 %207, label %304, label %288

288:                                              ; preds = %287
  %289 = load %class.SkColorSpace*, %class.SkColorSpace** %208, align 8
  %290 = icmp eq %class.SkColorSpace* %289, null
  br i1 %290, label %295, label %291

291:                                              ; preds = %288
  %292 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %289, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %293 = atomicrmw add i32* %292, i32 1 monotonic
  %294 = load %class.SkColorSpace*, %class.SkColorSpace** %202, align 8
  br label %295

295:                                              ; preds = %291, %288
  %296 = phi %class.SkColorSpace* [ %294, %291 ], [ %276, %288 ]
  store %class.SkColorSpace* %289, %class.SkColorSpace** %202, align 8
  %297 = icmp eq %class.SkColorSpace* %296, null
  br i1 %297, label %304, label %298

298:                                              ; preds = %295
  %299 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %296, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %300 = atomicrmw add i32* %299, i32 -1 acq_rel
  %301 = icmp eq i32 %300, 1
  br i1 %301, label %302, label %304

302:                                              ; preds = %298
  %303 = bitcast %class.SkColorSpace* %296 to i8*
  call void @_ZdlPv(i8* %303) #12
  br label %304

304:                                              ; preds = %287, %295, %298, %302
  %305 = load <2 x i64>, <2 x i64>* %223, align 8
  store <2 x i64> %305, <2 x i64>* %224, align 8
  br label %306

306:                                              ; preds = %281, %304
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %210) #11
  store %class.SkSurface* inttoptr (i64 -6148914691236517206 to %class.SkSurface*), %class.SkSurface** %211, align 8
  call void @_ZN9SkSurface10MakeRasterERK11SkImageInfomPK14SkSurfaceProps(%class.sk_sp.14* nonnull sret %17, %struct.SkImageInfo* nonnull dereferenceable(24) %16, i64 0, %class.SkSurfaceProps* null) #11
  %307 = load %class.SkSurface*, %class.SkSurface** %211, align 8
  %308 = icmp eq %class.SkSurface* %307, null
  br i1 %308, label %309, label %310

309:                                              ; preds = %306
  call void %5(i8* %6, %"class.SkImage::AsyncReadResult"* null) #11
  br label %381

310:                                              ; preds = %306
  %311 = call %class.SkCanvas* @_ZN9SkSurface9getCanvasEv(%class.SkSurface* nonnull %307) #11
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %212) #11
  %312 = sext i32 %232 to i64
  %313 = sext i32 %228 to i64
  %314 = add nsw i64 %312, %313
  %315 = icmp slt i64 %314, 2147483647
  %316 = select i1 %315, i64 %314, i64 2147483647
  %317 = icmp sgt i64 %316, -2147483647
  %318 = select i1 %317, i64 %316, i64 -2147483647
  %319 = sext i32 %233 to i64
  %320 = sext i32 %229 to i64
  %321 = add nsw i64 %319, %320
  %322 = icmp slt i64 %321, 2147483647
  %323 = select i1 %322, i64 %321, i64 2147483647
  %324 = icmp sgt i64 %323, -2147483647
  %325 = select i1 %324, i64 %323, i64 -2147483647
  %326 = sitofp i32 %232 to float
  %327 = insertelement <2 x float> undef, float %326, i32 0
  %328 = sitofp i32 %233 to float
  %329 = insertelement <2 x float> %327, float %328, i32 1
  %330 = trunc i64 %318 to i32
  %331 = sitofp i32 %330 to float
  %332 = insertelement <2 x float> undef, float %331, i32 0
  %333 = trunc i64 %325 to i32
  %334 = sitofp i32 %333 to float
  %335 = insertelement <2 x float> %332, float %334, i32 1
  store <2 x float> %329, <2 x float>* %213, align 8
  store <2 x float> %335, <2 x float>* %214, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %215) #11
  %336 = sitofp i32 %255 to float
  %337 = insertelement <2 x float> undef, float %336, i32 0
  %338 = sitofp i32 %269 to float
  %339 = insertelement <2 x float> %337, float %338, i32 1
  store <2 x float> zeroinitializer, <2 x float>* %216, align 8
  store <2 x float> %339, <2 x float>* %217, align 8
  call void @_ZN8SkCanvas13drawImageRectEPK7SkImageRK6SkRectS5_RK17SkSamplingOptionsPK7SkPaintNS_17SrcRectConstraintE(%class.SkCanvas* %311, %class.SkImage* %270, %struct.SkRect* nonnull dereferenceable(16) %19, %struct.SkRect* nonnull dereferenceable(16) %21, %struct.SkSamplingOptions* nonnull dereferenceable(20) %9, %class.SkPaint* nonnull %8, i32 %234) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %215) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %212) #11
  %340 = load i64, i64* %218, align 8
  store %class.SkSurface* null, %class.SkSurface** %211, align 8
  %341 = icmp eq i64 %227, 0
  br i1 %341, label %353, label %342

342:                                              ; preds = %310
  %343 = inttoptr i64 %227 to %class.SkSurface*
  %344 = getelementptr inbounds %class.SkSurface, %class.SkSurface* %343, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %345 = atomicrmw add i32* %344, i32 -1 acq_rel
  %346 = icmp eq i32 %345, 1
  br i1 %346, label %347, label %353

347:                                              ; preds = %342
  %348 = inttoptr i64 %227 to %class.SkRefCntBase*
  %349 = inttoptr i64 %227 to void (%class.SkRefCntBase*)***
  %350 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %349, align 8
  %351 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %350, i64 2
  %352 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %351, align 8
  call void %352(%class.SkRefCntBase* nonnull %348) #11
  br label %353

353:                                              ; preds = %310, %342, %347
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %219) #11
  %354 = inttoptr i64 %340 to %class.SkSurface*
  call void @_ZN9SkSurface17makeImageSnapshotEv(%class.sk_sp.15* nonnull sret %22, %class.SkSurface* %354) #11
  %355 = load i64, i64* %221, align 8
  store %class.SkImage* null, %class.SkImage** %220, align 8
  %356 = icmp eq i64 %226, 0
  br i1 %356, label %380, label %357

357:                                              ; preds = %353
  %358 = getelementptr inbounds %class.SkImage, %class.SkImage* %270, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %359 = atomicrmw add i32* %358, i32 -1 acq_rel
  %360 = icmp eq i32 %359, 1
  br i1 %360, label %361, label %367

361:                                              ; preds = %357
  %362 = inttoptr i64 %226 to %class.SkRefCntBase*
  %363 = inttoptr i64 %226 to void (%class.SkRefCntBase*)***
  %364 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %363, align 8
  %365 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %364, i64 2
  %366 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %365, align 8
  call void %366(%class.SkRefCntBase* nonnull %362) #11
  br label %367

367:                                              ; preds = %357, %361
  %368 = load %class.SkImage*, %class.SkImage** %220, align 8
  %369 = icmp eq %class.SkImage* %368, null
  br i1 %369, label %380, label %370

370:                                              ; preds = %367
  %371 = getelementptr inbounds %class.SkImage, %class.SkImage* %368, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %372 = atomicrmw add i32* %371, i32 -1 acq_rel
  %373 = icmp eq i32 %372, 1
  br i1 %373, label %374, label %380

374:                                              ; preds = %370
  %375 = bitcast %class.SkImage* %368 to %class.SkRefCntBase*
  %376 = bitcast %class.SkImage* %368 to void (%class.SkRefCntBase*)***
  %377 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %376, align 8
  %378 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %377, i64 2
  %379 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %378, align 8
  call void %379(%class.SkRefCntBase* nonnull %375) #11
  br label %380

380:                                              ; preds = %353, %367, %370, %374
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %219) #11
  br label %381

381:                                              ; preds = %380, %309
  %382 = phi i64 [ %355, %380 ], [ %226, %309 ]
  %383 = phi i64 [ %340, %380 ], [ %227, %309 ]
  %384 = phi i32 [ %255, %380 ], [ %228, %309 ]
  %385 = phi i32 [ %269, %380 ], [ %229, %309 ]
  %386 = phi i32 [ 0, %380 ], [ %232, %309 ]
  %387 = phi i32 [ 0, %380 ], [ %233, %309 ]
  %388 = phi i32 [ 1, %380 ], [ %234, %309 ]
  %389 = phi i1 [ true, %380 ], [ false, %309 ]
  %390 = load %class.SkSurface*, %class.SkSurface** %211, align 8
  %391 = icmp eq %class.SkSurface* %390, null
  br i1 %391, label %402, label %392

392:                                              ; preds = %381
  %393 = getelementptr inbounds %class.SkSurface, %class.SkSurface* %390, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %394 = atomicrmw add i32* %393, i32 -1 acq_rel
  %395 = icmp eq i32 %394, 1
  br i1 %395, label %396, label %402

396:                                              ; preds = %392
  %397 = bitcast %class.SkSurface* %390 to %class.SkRefCntBase*
  %398 = bitcast %class.SkSurface* %390 to void (%class.SkRefCntBase*)***
  %399 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %398, align 8
  %400 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %399, i64 2
  %401 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %400, align 8
  call void %401(%class.SkRefCntBase* nonnull %397) #11
  br label %402

402:                                              ; preds = %381, %392, %396
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %210) #11
  %403 = load %class.SkColorSpace*, %class.SkColorSpace** %202, align 8
  %404 = icmp eq %class.SkColorSpace* %403, null
  br i1 %404, label %411, label %405

405:                                              ; preds = %402
  %406 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %403, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %407 = atomicrmw add i32* %406, i32 -1 acq_rel
  %408 = icmp eq i32 %407, 1
  br i1 %408, label %409, label %411

409:                                              ; preds = %405
  %410 = bitcast %class.SkColorSpace* %403 to i8*
  call void @_ZdlPv(i8* %410) #12
  br label %411

411:                                              ; preds = %402, %405, %409
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %201) #11
  br i1 %389, label %225, label %465

412:                                              ; preds = %225
  %413 = sext i32 %239 to i64
  %414 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 0
  %415 = call i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo* %414) #11
  %416 = sext i32 %415 to i64
  %417 = mul nsw i64 %416, %413
  %418 = icmp ult i64 %417, 2147483648
  %419 = select i1 %418, i64 %417, i64 0
  %420 = load i32, i32* %39, align 4
  %421 = sext i32 %420 to i64
  %422 = mul i64 %419, %421
  %423 = call i8* @_Znam(i64 %422) #12
  %424 = ptrtoint i8* %423 to i64
  %425 = bitcast %class.SkPixmap* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %425) #11
  %426 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %23, i64 0, i32 2
  %427 = bitcast %struct.SkImageInfo* %426 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %427, i8 -86, i64 24, i1 false)
  %428 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %23, i64 0, i32 0
  store i8* %423, i8** %428, align 8
  %429 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %23, i64 0, i32 1
  store i64 %419, i64* %429, align 8
  %430 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %23, i64 0, i32 2, i32 0, i32 0, i32 0
  %431 = load %class.SkColorSpace*, %class.SkColorSpace** %208, align 8
  %432 = icmp eq %class.SkColorSpace* %431, null
  br i1 %432, label %436, label %433

433:                                              ; preds = %412
  %434 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %431, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %435 = atomicrmw add i32* %434, i32 1 monotonic
  br label %436

436:                                              ; preds = %412, %433
  store %class.SkColorSpace* %431, %class.SkColorSpace** %430, align 8
  %437 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %23, i64 0, i32 2, i32 0, i32 1
  %438 = bitcast i32* %209 to <2 x i64>*
  %439 = load <2 x i64>, <2 x i64>* %438, align 8
  %440 = bitcast i32* %437 to <2 x i64>*
  store <2 x i64> %439, <2 x i64>* %440, align 8
  %441 = inttoptr i64 %226 to %class.SkImage*
  %442 = call zeroext i1 @_ZNK7SkImage10readPixelsEP15GrDirectContextRK8SkPixmapiiNS_11CachingHintE(%class.SkImage* %441, %class.GrDirectContext* null, %class.SkPixmap* nonnull dereferenceable(40) %23, i32 %232, i32 %233, i32 0) #11
  br i1 %442, label %443, label %451

443:                                              ; preds = %436
  %444 = call i8* @_Znwm(i64 24) #12
  %445 = bitcast i8* %444 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVZ22SkRescaleAndReadPixels8SkBitmapRK11SkImageInfoRK7SkIRectN7SkImage12RescaleGammaENS6_11RescaleModeEPFvPvNSt3__110unique_ptrIKNS6_15AsyncReadResultENSA_14default_deleteISD_EEEEES9_E6Result, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %445, align 8
  %446 = getelementptr inbounds i8, i8* %444, i64 8
  %447 = bitcast i8* %446 to i64*
  store i64 %424, i64* %447, align 8
  %448 = getelementptr inbounds i8, i8* %444, i64 16
  %449 = bitcast i8* %448 to i64*
  store i64 %419, i64* %449, align 8
  %450 = bitcast i8* %444 to %"class.SkImage::AsyncReadResult"*
  call void %5(i8* %6, %"class.SkImage::AsyncReadResult"* nonnull %450) #11
  br label %452

451:                                              ; preds = %436
  call void %5(i8* %6, %"class.SkImage::AsyncReadResult"* null) #11
  br label %452

452:                                              ; preds = %451, %443
  %453 = phi i8* [ null, %443 ], [ %423, %451 ]
  %454 = load %class.SkColorSpace*, %class.SkColorSpace** %430, align 8
  %455 = icmp eq %class.SkColorSpace* %454, null
  br i1 %455, label %462, label %456

456:                                              ; preds = %452
  %457 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %454, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %458 = atomicrmw add i32* %457, i32 -1 acq_rel
  %459 = icmp eq i32 %458, 1
  br i1 %459, label %460, label %462

460:                                              ; preds = %456
  %461 = bitcast %class.SkColorSpace* %454 to i8*
  call void @_ZdlPv(i8* %461) #12
  br label %462

462:                                              ; preds = %452, %456, %460
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %425) #11
  %463 = icmp eq i8* %453, null
  br i1 %463, label %465, label %464

464:                                              ; preds = %462
  call void @_ZdaPv(i8* nonnull %453) #12
  br label %465

465:                                              ; preds = %411, %464, %462, %189
  %466 = phi i64 [ %153, %189 ], [ %226, %462 ], [ %226, %464 ], [ %382, %411 ]
  %467 = phi i64 [ %154, %189 ], [ %227, %462 ], [ %227, %464 ], [ %383, %411 ]
  %468 = icmp eq i64 %466, 0
  br i1 %468, label %480, label %469

469:                                              ; preds = %465
  %470 = inttoptr i64 %466 to %class.SkImage*
  %471 = getelementptr inbounds %class.SkImage, %class.SkImage* %470, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %472 = atomicrmw add i32* %471, i32 -1 acq_rel
  %473 = icmp eq i32 %472, 1
  br i1 %473, label %474, label %480

474:                                              ; preds = %469
  %475 = inttoptr i64 %466 to %class.SkRefCntBase*
  %476 = inttoptr i64 %466 to void (%class.SkRefCntBase*)***
  %477 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %476, align 8
  %478 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %477, i64 2
  %479 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %478, align 8
  call void %479(%class.SkRefCntBase* nonnull %475) #11
  br label %480

480:                                              ; preds = %465, %469, %474
  %481 = icmp eq i64 %467, 0
  br i1 %481, label %493, label %482

482:                                              ; preds = %480
  %483 = inttoptr i64 %467 to %class.SkSurface*
  %484 = getelementptr inbounds %class.SkSurface, %class.SkSurface* %483, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %485 = atomicrmw add i32* %484, i32 -1 acq_rel
  %486 = icmp eq i32 %485, 1
  br i1 %486, label %487, label %493

487:                                              ; preds = %482
  %488 = inttoptr i64 %467 to %class.SkRefCntBase*
  %489 = inttoptr i64 %467 to void (%class.SkRefCntBase*)***
  %490 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %489, align 8
  %491 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %490, i64 2
  %492 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %491, align 8
  call void %492(%class.SkRefCntBase* nonnull %488) #11
  br label %493

493:                                              ; preds = %480, %482, %487
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %75) #11
  call void @_ZN7SkPaintD1Ev(%class.SkPaint* nonnull %8) #11
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %66) #11
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare float @log2f(float) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN7SkPaintC1Ev(%class.SkPaint*) unnamed_addr #3

declare zeroext i1 @_ZNK12SkColorSpace13gammaIsLinearEv(%class.SkColorSpace*) local_unnamed_addr #3

declare void @_ZNK12SkColorSpace15makeLinearGammaEv(%class.sk_sp* sret, %class.SkColorSpace*) local_unnamed_addr #3

declare %class.SkCanvas* @_ZN9SkSurface9getCanvasEv(%class.SkSurface*) local_unnamed_addr #3

declare void @_ZN8SkCanvas9drawImageEPK7SkImageffRK17SkSamplingOptionsPK7SkPaint(%class.SkCanvas*, %class.SkImage*, float, float, %struct.SkSamplingOptions* dereferenceable(20), %class.SkPaint*) local_unnamed_addr #3

declare void @_ZNK8SkBitmap7asImageEv(%class.sk_sp.15* sret, %class.SkBitmap*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN9SkSurface17makeImageSnapshotEv(%class.sk_sp.15* sret, %class.SkSurface*) local_unnamed_addr #3

declare void @_ZN7SkImage14MakeFromRasterERK8SkPixmapPFvPKvPvES5_(%class.sk_sp.15* sret, %class.SkPixmap* dereferenceable(40), void (i8*, i8*)*, i8*) local_unnamed_addr #3

declare void @_ZN8SkCanvas13drawImageRectEPK7SkImageRK6SkRectS5_RK17SkSamplingOptionsPK7SkPaintNS_17SrcRectConstraintE(%class.SkCanvas*, %class.SkImage*, %struct.SkRect* dereferenceable(16), %struct.SkRect* dereferenceable(16), %struct.SkSamplingOptions* dereferenceable(20), %class.SkPaint*, i32) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZNK7SkImage10readPixelsEP15GrDirectContextRK8SkPixmapiiNS_11CachingHintE(%class.SkImage*, %class.GrDirectContext*, %class.SkPixmap* dereferenceable(40), i32, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7SkPaintD1Ev(%class.SkPaint*) unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #6

declare void @_ZN9SkSurface10MakeRasterERK11SkImageInfomPK14SkSurfaceProps(%class.sk_sp.14* sret, %struct.SkImageInfo* dereferenceable(24), i64, %class.SkSurfaceProps*) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

declare i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo*) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZZ22SkRescaleAndReadPixels8SkBitmapRK11SkImageInfoRK7SkIRectN7SkImage12RescaleGammaENS6_11RescaleModeEPFvPvNSt3__110unique_ptrIKNS6_15AsyncReadResultENSA_14default_deleteISD_EEEEES9_EN6ResultD2Ev(%class.Result* nocapture) unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %class.Result, %class.Result* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVZ22SkRescaleAndReadPixels8SkBitmapRK11SkImageInfoRK7SkIRectN7SkImage12RescaleGammaENS6_11RescaleModeEPFvPvNSt3__110unique_ptrIKNS6_15AsyncReadResultENSA_14default_deleteISD_EEEEES9_E6Result, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.Result, %class.Result* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZdaPv(i8* nonnull %4) #12
  br label %7

7:                                                ; preds = %1, %6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZZ22SkRescaleAndReadPixels8SkBitmapRK11SkImageInfoRK7SkIRectN7SkImage12RescaleGammaENS6_11RescaleModeEPFvPvNSt3__110unique_ptrIKNS6_15AsyncReadResultENSA_14default_deleteISD_EEEEES9_EN6ResultD0Ev(%class.Result*) unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %class.Result, %class.Result* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVZ22SkRescaleAndReadPixels8SkBitmapRK11SkImageInfoRK7SkIRectN7SkImage12RescaleGammaENS6_11RescaleModeEPFvPvNSt3__110unique_ptrIKNS6_15AsyncReadResultENSA_14default_deleteISD_EEEEES9_E6Result, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.Result, %class.Result* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZdaPv(i8* nonnull %4) #12
  br label %7

7:                                                ; preds = %1, %6
  %8 = bitcast %class.Result* %0 to i8*
  tail call void @_ZdlPv(i8* %8) #12
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @_ZZ22SkRescaleAndReadPixels8SkBitmapRK11SkImageInfoRK7SkIRectN7SkImage12RescaleGammaENS6_11RescaleModeEPFvPvNSt3__110unique_ptrIKNS6_15AsyncReadResultENSA_14default_deleteISD_EEEEES9_ENK6Result5countEv(%class.Result* nocapture readnone) unnamed_addr #9 align 2 {
  ret i32 1
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i8* @_ZZ22SkRescaleAndReadPixels8SkBitmapRK11SkImageInfoRK7SkIRectN7SkImage12RescaleGammaENS6_11RescaleModeEPFvPvNSt3__110unique_ptrIKNS6_15AsyncReadResultENSA_14default_deleteISD_EEEEES9_ENK6Result4dataEi(%class.Result* nocapture readonly, i32) unnamed_addr #10 align 2 {
  %3 = getelementptr inbounds %class.Result, %class.Result* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  ret i8* %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i64 @_ZZ22SkRescaleAndReadPixels8SkBitmapRK11SkImageInfoRK7SkIRectN7SkImage12RescaleGammaENS6_11RescaleModeEPFvPvNSt3__110unique_ptrIKNS6_15AsyncReadResultENSA_14default_deleteISD_EEEEES9_ENK6Result8rowBytesEi(%class.Result* nocapture readonly, i32) unnamed_addr #10 align 2 {
  %3 = getelementptr inbounds %class.Result, %class.Result* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  ret i64 %4
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZZ22SkRescaleAndReadPixels8SkBitmapRK11SkImageInfoRK7SkIRectN7SkImage12RescaleGammaENS6_11RescaleModeEPFvPvNSt3__110unique_ptrIKNS6_15AsyncReadResultENSA_14default_deleteISD_EEEEES9_ENK3$_0clES8_: argument 0"}
!4 = distinct !{!4, !"_ZZ22SkRescaleAndReadPixels8SkBitmapRK11SkImageInfoRK7SkIRectN7SkImage12RescaleGammaENS6_11RescaleModeEPFvPvNSt3__110unique_ptrIKNS6_15AsyncReadResultENSA_14default_deleteISD_EEEEES9_ENK3$_0clES8_"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!7 = distinct !{!7, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!8 = !{!9, !11}
!9 = distinct !{!9, !10, !"_ZN11SkImageInfo4MakeE7SkISizeRK11SkColorInfo: argument 0"}
!10 = distinct !{!10, !"_ZN11SkImageInfo4MakeE7SkISizeRK11SkColorInfo"}
!11 = distinct !{!11, !12, !"_ZNK11SkImageInfo6makeWHEii: argument 0"}
!12 = distinct !{!12, !"_ZNK11SkImageInfo6makeWHEii"}
