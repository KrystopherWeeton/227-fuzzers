; ModuleID = '../../third_party/abseil-cpp/absl/strings/internal/cordz_handle.cc'
source_filename = "../../third_party/abseil-cpp/absl/strings/internal/cordz_handle.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.absl::cord_internal::CordzHandle" = type { i32 (...)**, %"struct.absl::cord_internal::CordzHandle::Queue"*, i8, %"class.absl::cord_internal::CordzHandle"*, %"class.absl::cord_internal::CordzHandle"* }
%"struct.absl::cord_internal::CordzHandle::Queue" = type { %"class.absl::base_internal::SpinLock", %"struct.std::__1::atomic.1" }
%"class.absl::base_internal::SpinLock" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl.3" }
%"struct.std::__1::__cxx_atomic_impl.3" = type { %"struct.std::__1::__cxx_atomic_base_impl.4" }
%"struct.std::__1::__cxx_atomic_base_impl.4" = type { %"class.absl::cord_internal::CordzHandle"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.absl::cord_internal::CordzHandle"**, %"class.absl::cord_internal::CordzHandle"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.absl::cord_internal::CordzHandle"** }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"class.absl::cord_internal::CordzHandle"**, %"class.absl::cord_internal::CordzHandle"**, %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.absl::cord_internal::CordzHandle"** }

@_ZN4absl13cord_internal11CordzHandle13global_queue_E = hidden global { { { { i32 } } }, { { %"class.absl::cord_internal::CordzHandle"* } } } { { { { i32 } } } { { { i32 } } { { i32 } { i32 2 } } }, { { %"class.absl::cord_internal::CordzHandle"* } } zeroinitializer }, align 8
@_ZTVN4absl13cord_internal11CordzHandleE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.absl::cord_internal::CordzHandle"*)* @_ZN4absl13cord_internal11CordzHandleD2Ev to i8*), i8* bitcast (void (%"class.absl::cord_internal::CordzHandle"*)* @_ZN4absl13cord_internal11CordzHandleD0Ev to i8*)] }, align 8

@_ZN4absl13cord_internal11CordzHandleC1Eb = hidden unnamed_addr alias void (%"class.absl::cord_internal::CordzHandle"*, i1), void (%"class.absl::cord_internal::CordzHandle"*, i1)* @_ZN4absl13cord_internal11CordzHandleC2Eb
@_ZN4absl13cord_internal11CordzHandleD1Ev = hidden unnamed_addr alias void (%"class.absl::cord_internal::CordzHandle"*), void (%"class.absl::cord_internal::CordzHandle"*)* @_ZN4absl13cord_internal11CordzHandleD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl13cord_internal11CordzHandleC2Eb(%"class.absl::cord_internal::CordzHandle"*, i1 zeroext) unnamed_addr #0 align 2 {
  %3 = zext i1 %1 to i8
  %4 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN4absl13cord_internal11CordzHandleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %0, i64 0, i32 1
  store %"struct.absl::cord_internal::CordzHandle::Queue"* bitcast ({ { { { i32 } } }, { { %"class.absl::cord_internal::CordzHandle"* } } }* @_ZN4absl13cord_internal11CordzHandle13global_queue_E to %"struct.absl::cord_internal::CordzHandle::Queue"*), %"struct.absl::cord_internal::CordzHandle::Queue"** %5, align 8
  %6 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %0, i64 0, i32 2
  store i8 %3, i8* %6, align 8
  %7 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %0, i64 0, i32 3
  %8 = bitcast %"class.absl::cord_internal::CordzHandle"** %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 16, i1 false)
  br i1 %1, label %9, label %39

9:                                                ; preds = %2
  %10 = load atomic i32, i32* getelementptr inbounds ({ { { { i32 } } }, { { %"class.absl::cord_internal::CordzHandle"* } } }, { { { { i32 } } }, { { %"class.absl::cord_internal::CordzHandle"* } } }* @_ZN4absl13cord_internal11CordzHandle13global_queue_E, i64 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 8
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %19

13:                                               ; preds = %9
  %14 = or i32 %10, 1
  %15 = cmpxchg i32* getelementptr inbounds ({ { { { i32 } } }, { { %"class.absl::cord_internal::CordzHandle"* } } }, { { { { i32 } } }, { { %"class.absl::cord_internal::CordzHandle"* } } }* @_ZN4absl13cord_internal11CordzHandle13global_queue_E, i64 0, i32 0, i32 0, i32 0, i32 0), i32 %10, i32 %14 acquire monotonic
  %16 = extractvalue { i32, i1 } %15, 0
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %20, label %19

19:                                               ; preds = %13, %9
  tail call void @_ZN4absl13base_internal8SpinLock8SlowLockEv(%"class.absl::base_internal::SpinLock"* bitcast ({ { { { i32 } } }, { { %"class.absl::cord_internal::CordzHandle"* } } }* @_ZN4absl13cord_internal11CordzHandle13global_queue_E to %"class.absl::base_internal::SpinLock"*)) #8
  br label %20

20:                                               ; preds = %13, %19
  %21 = load %"struct.absl::cord_internal::CordzHandle::Queue"*, %"struct.absl::cord_internal::CordzHandle::Queue"** %5, align 8
  %22 = getelementptr inbounds %"struct.absl::cord_internal::CordzHandle::Queue", %"struct.absl::cord_internal::CordzHandle::Queue"* %21, i64 0, i32 1, i32 0
  %23 = bitcast %"struct.std::__1::__atomic_base.2"* %22 to i64*
  %24 = load atomic i64, i64* %23 acquire, align 8
  %25 = inttoptr i64 %24 to %"class.absl::cord_internal::CordzHandle"*
  %26 = icmp eq i64 %24, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %20
  store %"class.absl::cord_internal::CordzHandle"* %25, %"class.absl::cord_internal::CordzHandle"** %7, align 8
  %28 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %25, i64 0, i32 4
  store %"class.absl::cord_internal::CordzHandle"* %0, %"class.absl::cord_internal::CordzHandle"** %28, align 8
  br label %29

29:                                               ; preds = %20, %27
  %30 = load %"struct.absl::cord_internal::CordzHandle::Queue"*, %"struct.absl::cord_internal::CordzHandle::Queue"** %5, align 8
  %31 = getelementptr inbounds %"struct.absl::cord_internal::CordzHandle::Queue", %"struct.absl::cord_internal::CordzHandle::Queue"* %30, i64 0, i32 1, i32 0
  %32 = ptrtoint %"class.absl::cord_internal::CordzHandle"* %0 to i64
  %33 = bitcast %"struct.std::__1::__atomic_base.2"* %31 to i64*
  store atomic i64 %32, i64* %33 release, align 8
  %34 = load atomic i32, i32* getelementptr inbounds ({ { { { i32 } } }, { { %"class.absl::cord_internal::CordzHandle"* } } }, { { { { i32 } } }, { { %"class.absl::cord_internal::CordzHandle"* } } }* @_ZN4absl13cord_internal11CordzHandle13global_queue_E, i64 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 8
  %35 = and i32 %34, 2
  %36 = atomicrmw xchg i32* getelementptr inbounds ({ { { { i32 } } }, { { %"class.absl::cord_internal::CordzHandle"* } } }, { { { { i32 } } }, { { %"class.absl::cord_internal::CordzHandle"* } } }* @_ZN4absl13cord_internal11CordzHandle13global_queue_E, i64 0, i32 0, i32 0, i32 0, i32 0), i32 %35 release
  %37 = icmp ugt i32 %36, 7
  br i1 %37, label %38, label %39

38:                                               ; preds = %29
  tail call void @_ZN4absl13base_internal8SpinLock10SlowUnlockEj(%"class.absl::base_internal::SpinLock"* bitcast ({ { { { i32 } } }, { { %"class.absl::cord_internal::CordzHandle"* } } }* @_ZN4absl13cord_internal11CordzHandle13global_queue_E to %"class.absl::base_internal::SpinLock"*), i32 %36) #8
  br label %39

39:                                               ; preds = %38, %29, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl13cord_internal11CordzHandleD2Ev(%"class.absl::cord_internal::CordzHandle"* nocapture) unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::vector", align 8
  %3 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN4absl13cord_internal11CordzHandleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %0, i64 0, i32 2
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %149, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.std::__1::vector"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #9
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 24, i1 false) #9
  %12 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %0, i64 0, i32 1
  %13 = load %"struct.absl::cord_internal::CordzHandle::Queue"*, %"struct.absl::cord_internal::CordzHandle::Queue"** %12, align 8
  %14 = getelementptr inbounds %"struct.absl::cord_internal::CordzHandle::Queue", %"struct.absl::cord_internal::CordzHandle::Queue"* %13, i64 0, i32 0
  %15 = getelementptr inbounds %"struct.absl::cord_internal::CordzHandle::Queue", %"struct.absl::cord_internal::CordzHandle::Queue"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %25

19:                                               ; preds = %7
  %20 = or i32 %16, 1
  %21 = cmpxchg i32* %15, i32 %16, i32 %20 acquire monotonic
  %22 = extractvalue { i32, i1 } %21, 0
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %26, label %25

25:                                               ; preds = %19, %7
  tail call void @_ZN4absl13base_internal8SpinLock8SlowLockEv(%"class.absl::base_internal::SpinLock"* %14) #8
  br label %26

26:                                               ; preds = %19, %25
  %27 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %0, i64 0, i32 4
  %28 = bitcast %"class.absl::cord_internal::CordzHandle"** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %0, i64 0, i32 3
  %31 = load %"class.absl::cord_internal::CordzHandle"*, %"class.absl::cord_internal::CordzHandle"** %30, align 8
  %32 = icmp eq %"class.absl::cord_internal::CordzHandle"* %31, null
  br i1 %32, label %33, label %103

33:                                               ; preds = %26
  %34 = icmp eq i64 %29, 0
  br i1 %34, label %114, label %35

35:                                               ; preds = %33
  %36 = bitcast %"class.absl::cord_internal::CordzHandle"*** %10 to i64*
  %37 = bitcast %"class.std::__1::vector"* %2 to i64*
  %38 = bitcast %"class.absl::cord_internal::CordzHandle"*** %11 to i64*
  br label %39

39:                                               ; preds = %35, %98
  %40 = phi i64 [ %29, %35 ], [ %101, %98 ]
  %41 = inttoptr i64 %40 to %"class.absl::cord_internal::CordzHandle"*
  %42 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %41, i64 0, i32 2
  %43 = load i8, i8* %42, align 8, !range !2
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %45, label %107

45:                                               ; preds = %39
  %46 = load %"class.absl::cord_internal::CordzHandle"**, %"class.absl::cord_internal::CordzHandle"*** %10, align 8
  %47 = load %"class.absl::cord_internal::CordzHandle"**, %"class.absl::cord_internal::CordzHandle"*** %11, align 8
  %48 = icmp eq %"class.absl::cord_internal::CordzHandle"** %46, %47
  %49 = ptrtoint %"class.absl::cord_internal::CordzHandle"** %47 to i64
  br i1 %48, label %54, label %50

50:                                               ; preds = %45
  %51 = bitcast %"class.absl::cord_internal::CordzHandle"** %46 to i64*
  store i64 %40, i64* %51, align 8
  %52 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle"*, %"class.absl::cord_internal::CordzHandle"** %46, i64 1
  %53 = ptrtoint %"class.absl::cord_internal::CordzHandle"** %52 to i64
  store i64 %53, i64* %36, align 8
  br label %98

54:                                               ; preds = %45
  %55 = ptrtoint %"class.absl::cord_internal::CordzHandle"** %46 to i64
  %56 = load i64, i64* %37, align 8
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = add nsw i64 %58, 1
  %60 = icmp ugt i64 %59, 2305843009213693951
  br i1 %60, label %61, label %63

61:                                               ; preds = %54
  %62 = bitcast %"class.std::__1::vector"* %2 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %62) #10
  unreachable

63:                                               ; preds = %54
  %64 = sub i64 %49, %56
  %65 = ashr exact i64 %64, 3
  %66 = icmp ult i64 %65, 1152921504606846975
  br i1 %66, label %67, label %75

67:                                               ; preds = %63
  %68 = ashr exact i64 %64, 2
  %69 = icmp ult i64 %68, %59
  %70 = select i1 %69, i64 %59, i64 %68
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %80, label %72

72:                                               ; preds = %67
  %73 = icmp ugt i64 %70, 2305843009213693951
  br i1 %73, label %74, label %75

74:                                               ; preds = %72
  tail call void @abort() #10
  unreachable

75:                                               ; preds = %72, %63
  %76 = phi i64 [ %70, %72 ], [ 2305843009213693951, %63 ]
  %77 = shl i64 %76, 3
  %78 = tail call i8* @_Znwm(i64 %77) #11
  %79 = bitcast i8* %78 to %"class.absl::cord_internal::CordzHandle"**
  br label %80

80:                                               ; preds = %75, %67
  %81 = phi i64 [ %76, %75 ], [ 0, %67 ]
  %82 = phi i8* [ %78, %75 ], [ null, %67 ]
  %83 = phi %"class.absl::cord_internal::CordzHandle"** [ %79, %75 ], [ null, %67 ]
  %84 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle"*, %"class.absl::cord_internal::CordzHandle"** %83, i64 %58
  %85 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle"*, %"class.absl::cord_internal::CordzHandle"** %83, i64 %81
  %86 = ptrtoint %"class.absl::cord_internal::CordzHandle"** %85 to i64
  %87 = bitcast %"class.absl::cord_internal::CordzHandle"** %84 to i64*
  store i64 %40, i64* %87, align 8
  %88 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle"*, %"class.absl::cord_internal::CordzHandle"** %84, i64 1
  %89 = ptrtoint %"class.absl::cord_internal::CordzHandle"** %88 to i64
  %90 = ptrtoint %"class.absl::cord_internal::CordzHandle"** %83 to i64
  %91 = icmp sgt i64 %57, 0
  br i1 %91, label %92, label %94

92:                                               ; preds = %80
  %93 = inttoptr i64 %56 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* align 8 %93, i64 %57, i1 false) #9
  br label %94

94:                                               ; preds = %92, %80
  store i64 %90, i64* %37, align 8
  store i64 %89, i64* %36, align 8
  store i64 %86, i64* %38, align 8
  %95 = icmp eq i64 %56, 0
  br i1 %95, label %98, label %96

96:                                               ; preds = %94
  %97 = inttoptr i64 %56 to i8*
  tail call void @_ZdlPv(i8* %97) #11
  br label %98

98:                                               ; preds = %50, %94, %96
  %99 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %41, i64 0, i32 4
  %100 = bitcast %"class.absl::cord_internal::CordzHandle"** %99 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %114, label %39

103:                                              ; preds = %26
  %104 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %31, i64 0, i32 4
  %105 = bitcast %"class.absl::cord_internal::CordzHandle"** %104 to i64*
  store i64 %29, i64* %105, align 8
  %106 = icmp eq i64 %29, 0
  br i1 %106, label %114, label %107

107:                                              ; preds = %39, %103
  %108 = phi i64 [ %29, %103 ], [ %40, %39 ]
  %109 = inttoptr i64 %108 to %"class.absl::cord_internal::CordzHandle"*
  %110 = bitcast %"class.absl::cord_internal::CordzHandle"** %30 to i64*
  %111 = load i64, i64* %110, align 8
  %112 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %109, i64 0, i32 3
  %113 = bitcast %"class.absl::cord_internal::CordzHandle"** %112 to i64*
  store i64 %111, i64* %113, align 8
  br label %120

114:                                              ; preds = %98, %33, %103
  %115 = load %"struct.absl::cord_internal::CordzHandle::Queue"*, %"struct.absl::cord_internal::CordzHandle::Queue"** %12, align 8
  %116 = getelementptr inbounds %"struct.absl::cord_internal::CordzHandle::Queue", %"struct.absl::cord_internal::CordzHandle::Queue"* %115, i64 0, i32 1, i32 0
  %117 = bitcast %"class.absl::cord_internal::CordzHandle"** %30 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"struct.std::__1::__atomic_base.2"* %116 to i64*
  store atomic i64 %118, i64* %119 release, align 8
  br label %120

120:                                              ; preds = %114, %107
  %121 = load atomic i32, i32* %15 monotonic, align 4
  %122 = and i32 %121, 2
  %123 = atomicrmw xchg i32* %15, i32 %122 release
  %124 = icmp ugt i32 %123, 7
  br i1 %124, label %125, label %126

125:                                              ; preds = %120
  tail call void @_ZN4absl13base_internal8SpinLock10SlowUnlockEj(%"class.absl::base_internal::SpinLock"* %14, i32 %123) #8
  br label %126

126:                                              ; preds = %120, %125
  %127 = load %"class.absl::cord_internal::CordzHandle"**, %"class.absl::cord_internal::CordzHandle"*** %9, align 8
  %128 = load %"class.absl::cord_internal::CordzHandle"**, %"class.absl::cord_internal::CordzHandle"*** %10, align 8
  %129 = icmp eq %"class.absl::cord_internal::CordzHandle"** %127, %128
  br i1 %129, label %130, label %137

130:                                              ; preds = %146, %126
  %131 = icmp eq %"class.absl::cord_internal::CordzHandle"** %127, null
  br i1 %131, label %136, label %132

132:                                              ; preds = %130
  %133 = ptrtoint %"class.absl::cord_internal::CordzHandle"** %127 to i64
  %134 = bitcast %"class.absl::cord_internal::CordzHandle"*** %10 to i64*
  store i64 %133, i64* %134, align 8
  %135 = bitcast %"class.absl::cord_internal::CordzHandle"** %127 to i8*
  tail call void @_ZdlPv(i8* %135) #11
  br label %136

136:                                              ; preds = %130, %132
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #9
  br label %149

137:                                              ; preds = %126, %146
  %138 = phi %"class.absl::cord_internal::CordzHandle"** [ %147, %146 ], [ %127, %126 ]
  %139 = load %"class.absl::cord_internal::CordzHandle"*, %"class.absl::cord_internal::CordzHandle"** %138, align 8
  %140 = icmp eq %"class.absl::cord_internal::CordzHandle"* %139, null
  br i1 %140, label %146, label %141

141:                                              ; preds = %137
  %142 = bitcast %"class.absl::cord_internal::CordzHandle"* %139 to void (%"class.absl::cord_internal::CordzHandle"*)***
  %143 = load void (%"class.absl::cord_internal::CordzHandle"*)**, void (%"class.absl::cord_internal::CordzHandle"*)*** %142, align 8
  %144 = getelementptr inbounds void (%"class.absl::cord_internal::CordzHandle"*)*, void (%"class.absl::cord_internal::CordzHandle"*)** %143, i64 1
  %145 = load void (%"class.absl::cord_internal::CordzHandle"*)*, void (%"class.absl::cord_internal::CordzHandle"*)** %144, align 8
  tail call void %145(%"class.absl::cord_internal::CordzHandle"* nonnull %139) #9
  br label %146

146:                                              ; preds = %141, %137
  %147 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle"*, %"class.absl::cord_internal::CordzHandle"** %138, i64 1
  %148 = icmp eq %"class.absl::cord_internal::CordzHandle"** %147, %128
  br i1 %148, label %130, label %137

149:                                              ; preds = %1, %136
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl13cord_internal11CordzHandleD0Ev(%"class.absl::cord_internal::CordzHandle"*) unnamed_addr #0 align 2 {
  tail call void @_ZN4absl13cord_internal11CordzHandleD2Ev(%"class.absl::cord_internal::CordzHandle"* %0) #9
  %2 = bitcast %"class.absl::cord_internal::CordzHandle"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #11
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4absl13cord_internal11CordzHandle12SafeToDeleteEv(%"class.absl::cord_internal::CordzHandle"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %0, i64 0, i32 2
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %12

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %0, i64 0, i32 1
  %7 = load %"struct.absl::cord_internal::CordzHandle::Queue"*, %"struct.absl::cord_internal::CordzHandle::Queue"** %6, align 8
  %8 = getelementptr inbounds %"struct.absl::cord_internal::CordzHandle::Queue", %"struct.absl::cord_internal::CordzHandle::Queue"* %7, i64 0, i32 1, i32 0
  %9 = bitcast %"struct.std::__1::__atomic_base.2"* %8 to i64*
  %10 = load atomic i64, i64* %9 acquire, align 8
  %11 = icmp eq i64 %10, 0
  br label %12

12:                                               ; preds = %1, %5
  %13 = phi i1 [ true, %1 ], [ %11, %5 ]
  ret i1 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl13cord_internal11CordzHandle6DeleteEPS1_(%"class.absl::cord_internal::CordzHandle"*) local_unnamed_addr #0 align 2 {
  %2 = icmp eq %"class.absl::cord_internal::CordzHandle"* %0, null
  br i1 %2, label %51, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %0, i64 0, i32 1
  %5 = load %"struct.absl::cord_internal::CordzHandle::Queue"*, %"struct.absl::cord_internal::CordzHandle::Queue"** %4, align 8
  %6 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %0, i64 0, i32 2
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %46

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"struct.absl::cord_internal::CordzHandle::Queue", %"struct.absl::cord_internal::CordzHandle::Queue"* %5, i64 0, i32 1, i32 0
  %11 = bitcast %"struct.std::__1::__atomic_base.2"* %10 to i64*
  %12 = load atomic i64, i64* %11 acquire, align 8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %46, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"struct.absl::cord_internal::CordzHandle::Queue", %"struct.absl::cord_internal::CordzHandle::Queue"* %5, i64 0, i32 0
  %16 = getelementptr inbounds %"struct.absl::cord_internal::CordzHandle::Queue", %"struct.absl::cord_internal::CordzHandle::Queue"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %26

20:                                               ; preds = %14
  %21 = or i32 %17, 1
  %22 = cmpxchg i32* %16, i32 %17, i32 %21 acquire monotonic
  %23 = extractvalue { i32, i1 } %22, 0
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %27, label %26

26:                                               ; preds = %20, %14
  tail call void @_ZN4absl13base_internal8SpinLock8SlowLockEv(%"class.absl::base_internal::SpinLock"* %15) #8
  br label %27

27:                                               ; preds = %20, %26
  %28 = load atomic i64, i64* %11 acquire, align 8
  %29 = inttoptr i64 %28 to %"class.absl::cord_internal::CordzHandle"*
  %30 = icmp eq i64 %28, 0
  br i1 %30, label %40, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %0, i64 0, i32 3
  store %"class.absl::cord_internal::CordzHandle"* %29, %"class.absl::cord_internal::CordzHandle"** %32, align 8
  %33 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %29, i64 0, i32 4
  store %"class.absl::cord_internal::CordzHandle"* %0, %"class.absl::cord_internal::CordzHandle"** %33, align 8
  %34 = ptrtoint %"class.absl::cord_internal::CordzHandle"* %0 to i64
  store atomic i64 %34, i64* %11 release, align 8
  %35 = load atomic i32, i32* %16 monotonic, align 4
  %36 = and i32 %35, 2
  %37 = atomicrmw xchg i32* %16, i32 %36 release
  %38 = icmp ugt i32 %37, 7
  br i1 %38, label %39, label %51

39:                                               ; preds = %31
  tail call void @_ZN4absl13base_internal8SpinLock10SlowUnlockEj(%"class.absl::base_internal::SpinLock"* %15, i32 %37) #8
  br label %51

40:                                               ; preds = %27
  %41 = load atomic i32, i32* %16 monotonic, align 4
  %42 = and i32 %41, 2
  %43 = atomicrmw xchg i32* %16, i32 %42 release
  %44 = icmp ugt i32 %43, 7
  br i1 %44, label %45, label %46

45:                                               ; preds = %40
  tail call void @_ZN4absl13base_internal8SpinLock10SlowUnlockEj(%"class.absl::base_internal::SpinLock"* %15, i32 %43) #8
  br label %46

46:                                               ; preds = %3, %45, %40, %9
  %47 = bitcast %"class.absl::cord_internal::CordzHandle"* %0 to void (%"class.absl::cord_internal::CordzHandle"*)***
  %48 = load void (%"class.absl::cord_internal::CordzHandle"*)**, void (%"class.absl::cord_internal::CordzHandle"*)*** %47, align 8
  %49 = getelementptr inbounds void (%"class.absl::cord_internal::CordzHandle"*)*, void (%"class.absl::cord_internal::CordzHandle"*)** %48, i64 1
  %50 = load void (%"class.absl::cord_internal::CordzHandle"*)*, void (%"class.absl::cord_internal::CordzHandle"*)** %49, align 8
  tail call void %50(%"class.absl::cord_internal::CordzHandle"* nonnull %0) #9
  br label %51

51:                                               ; preds = %39, %31, %1, %46
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl13cord_internal11CordzHandle25DiagnosticsGetDeleteQueueEv(%"class.std::__1::vector.6"* noalias sret) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 1
  %3 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::vector.6"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false) #9
  %5 = load atomic i32, i32* getelementptr inbounds ({ { { { i32 } } }, { { %"class.absl::cord_internal::CordzHandle"* } } }, { { { { i32 } } }, { { %"class.absl::cord_internal::CordzHandle"* } } }* @_ZN4absl13cord_internal11CordzHandle13global_queue_E, i64 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 8
  %6 = and i32 %5, 1
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %14

8:                                                ; preds = %1
  %9 = or i32 %5, 1
  %10 = cmpxchg i32* getelementptr inbounds ({ { { { i32 } } }, { { %"class.absl::cord_internal::CordzHandle"* } } }, { { { { i32 } } }, { { %"class.absl::cord_internal::CordzHandle"* } } }* @_ZN4absl13cord_internal11CordzHandle13global_queue_E, i64 0, i32 0, i32 0, i32 0, i32 0), i32 %5, i32 %9 acquire monotonic
  %11 = extractvalue { i32, i1 } %10, 0
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %15, label %14

14:                                               ; preds = %8, %1
  tail call void @_ZN4absl13base_internal8SpinLock8SlowLockEv(%"class.absl::base_internal::SpinLock"* bitcast ({ { { { i32 } } }, { { %"class.absl::cord_internal::CordzHandle"* } } }* @_ZN4absl13cord_internal11CordzHandle13global_queue_E to %"class.absl::base_internal::SpinLock"*)) #8
  br label %15

15:                                               ; preds = %8, %14
  %16 = load atomic i64, i64* bitcast (%"class.absl::cord_internal::CordzHandle"** getelementptr inbounds ({ { { { i32 } } }, { { %"class.absl::cord_internal::CordzHandle"* } } }, { { { { i32 } } }, { { %"class.absl::cord_internal::CordzHandle"* } } }* @_ZN4absl13cord_internal11CordzHandle13global_queue_E, i64 0, i32 1, i32 0, i32 0) to i64*) acquire, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %15
  %19 = inttoptr i64 %16 to %"class.absl::cord_internal::CordzHandle"*
  %20 = bitcast %"class.absl::cord_internal::CordzHandle"*** %2 to i64*
  %21 = bitcast %"class.std::__1::vector.6"* %0 to i64*
  %22 = bitcast %"class.absl::cord_internal::CordzHandle"*** %3 to i64*
  br label %30

23:                                               ; preds = %85, %15
  %24 = load atomic i32, i32* getelementptr inbounds ({ { { { i32 } } }, { { %"class.absl::cord_internal::CordzHandle"* } } }, { { { { i32 } } }, { { %"class.absl::cord_internal::CordzHandle"* } } }* @_ZN4absl13cord_internal11CordzHandle13global_queue_E, i64 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 8
  %25 = and i32 %24, 2
  %26 = atomicrmw xchg i32* getelementptr inbounds ({ { { { i32 } } }, { { %"class.absl::cord_internal::CordzHandle"* } } }, { { { { i32 } } }, { { %"class.absl::cord_internal::CordzHandle"* } } }* @_ZN4absl13cord_internal11CordzHandle13global_queue_E, i64 0, i32 0, i32 0, i32 0, i32 0), i32 %25 release
  %27 = icmp ugt i32 %26, 7
  br i1 %27, label %28, label %29

28:                                               ; preds = %23
  tail call void @_ZN4absl13base_internal8SpinLock10SlowUnlockEj(%"class.absl::base_internal::SpinLock"* bitcast ({ { { { i32 } } }, { { %"class.absl::cord_internal::CordzHandle"* } } }* @_ZN4absl13cord_internal11CordzHandle13global_queue_E to %"class.absl::base_internal::SpinLock"*), i32 %26) #8
  br label %29

29:                                               ; preds = %23, %28
  ret void

30:                                               ; preds = %18, %85
  %31 = phi i64 [ %16, %18 ], [ %88, %85 ]
  %32 = phi %"class.absl::cord_internal::CordzHandle"* [ %19, %18 ], [ %87, %85 ]
  %33 = load %"class.absl::cord_internal::CordzHandle"**, %"class.absl::cord_internal::CordzHandle"*** %2, align 8
  %34 = load %"class.absl::cord_internal::CordzHandle"**, %"class.absl::cord_internal::CordzHandle"*** %3, align 8
  %35 = icmp eq %"class.absl::cord_internal::CordzHandle"** %33, %34
  %36 = ptrtoint %"class.absl::cord_internal::CordzHandle"** %34 to i64
  br i1 %35, label %41, label %37

37:                                               ; preds = %30
  %38 = bitcast %"class.absl::cord_internal::CordzHandle"** %33 to i64*
  store i64 %31, i64* %38, align 8
  %39 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle"*, %"class.absl::cord_internal::CordzHandle"** %33, i64 1
  %40 = ptrtoint %"class.absl::cord_internal::CordzHandle"** %39 to i64
  store i64 %40, i64* %20, align 8
  br label %85

41:                                               ; preds = %30
  %42 = ptrtoint %"class.absl::cord_internal::CordzHandle"** %33 to i64
  %43 = load i64, i64* %21, align 8
  %44 = sub i64 %42, %43
  %45 = ashr exact i64 %44, 3
  %46 = add nsw i64 %45, 1
  %47 = icmp ugt i64 %46, 2305843009213693951
  br i1 %47, label %48, label %50

48:                                               ; preds = %41
  %49 = bitcast %"class.std::__1::vector.6"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %49) #10
  unreachable

50:                                               ; preds = %41
  %51 = sub i64 %36, %43
  %52 = ashr exact i64 %51, 3
  %53 = icmp ult i64 %52, 1152921504606846975
  br i1 %53, label %54, label %62

54:                                               ; preds = %50
  %55 = ashr exact i64 %51, 2
  %56 = icmp ult i64 %55, %46
  %57 = select i1 %56, i64 %46, i64 %55
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %67, label %59

59:                                               ; preds = %54
  %60 = icmp ugt i64 %57, 2305843009213693951
  br i1 %60, label %61, label %62

61:                                               ; preds = %59
  tail call void @abort() #10
  unreachable

62:                                               ; preds = %59, %50
  %63 = phi i64 [ %57, %59 ], [ 2305843009213693951, %50 ]
  %64 = shl i64 %63, 3
  %65 = tail call i8* @_Znwm(i64 %64) #11
  %66 = bitcast i8* %65 to %"class.absl::cord_internal::CordzHandle"**
  br label %67

67:                                               ; preds = %62, %54
  %68 = phi i64 [ %63, %62 ], [ 0, %54 ]
  %69 = phi i8* [ %65, %62 ], [ null, %54 ]
  %70 = phi %"class.absl::cord_internal::CordzHandle"** [ %66, %62 ], [ null, %54 ]
  %71 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle"*, %"class.absl::cord_internal::CordzHandle"** %70, i64 %45
  %72 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle"*, %"class.absl::cord_internal::CordzHandle"** %70, i64 %68
  %73 = ptrtoint %"class.absl::cord_internal::CordzHandle"** %72 to i64
  %74 = bitcast %"class.absl::cord_internal::CordzHandle"** %71 to i64*
  store i64 %31, i64* %74, align 8
  %75 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle"*, %"class.absl::cord_internal::CordzHandle"** %71, i64 1
  %76 = ptrtoint %"class.absl::cord_internal::CordzHandle"** %75 to i64
  %77 = ptrtoint %"class.absl::cord_internal::CordzHandle"** %70 to i64
  %78 = icmp sgt i64 %44, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %67
  %80 = inttoptr i64 %43 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %69, i8* align 8 %80, i64 %44, i1 false) #9
  br label %81

81:                                               ; preds = %79, %67
  store i64 %77, i64* %21, align 8
  store i64 %76, i64* %20, align 8
  store i64 %73, i64* %22, align 8
  %82 = icmp eq i64 %43, 0
  br i1 %82, label %85, label %83

83:                                               ; preds = %81
  %84 = inttoptr i64 %43 to i8*
  tail call void @_ZdlPv(i8* %84) #11
  br label %85

85:                                               ; preds = %37, %81, %83
  %86 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %32, i64 0, i32 3
  %87 = load %"class.absl::cord_internal::CordzHandle"*, %"class.absl::cord_internal::CordzHandle"** %86, align 8
  %88 = ptrtoint %"class.absl::cord_internal::CordzHandle"* %87 to i64
  %89 = icmp eq %"class.absl::cord_internal::CordzHandle"* %87, null
  br i1 %89, label %23, label %30
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4absl13cord_internal11CordzHandle32DiagnosticsHandleIsSafeToInspectEPKS1_(%"class.absl::cord_internal::CordzHandle"* readonly, %"class.absl::cord_internal::CordzHandle"* readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %0, i64 0, i32 2
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %55, label %6

6:                                                ; preds = %2
  %7 = icmp eq %"class.absl::cord_internal::CordzHandle"* %1, null
  br i1 %7, label %55, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %1, i64 0, i32 2
  %10 = load i8, i8* %9, align 8, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %55

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %0, i64 0, i32 1
  %14 = load %"struct.absl::cord_internal::CordzHandle::Queue"*, %"struct.absl::cord_internal::CordzHandle::Queue"** %13, align 8
  %15 = getelementptr inbounds %"struct.absl::cord_internal::CordzHandle::Queue", %"struct.absl::cord_internal::CordzHandle::Queue"* %14, i64 0, i32 0
  %16 = getelementptr inbounds %"struct.absl::cord_internal::CordzHandle::Queue", %"struct.absl::cord_internal::CordzHandle::Queue"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %26

20:                                               ; preds = %12
  %21 = or i32 %17, 1
  %22 = cmpxchg i32* %16, i32 %17, i32 %21 acquire monotonic
  %23 = extractvalue { i32, i1 } %22, 0
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %27, label %26

26:                                               ; preds = %20, %12
  tail call void @_ZN4absl13base_internal8SpinLock8SlowLockEv(%"class.absl::base_internal::SpinLock"* %15) #8
  br label %27

27:                                               ; preds = %20, %26
  %28 = load %"struct.absl::cord_internal::CordzHandle::Queue"*, %"struct.absl::cord_internal::CordzHandle::Queue"** %13, align 8
  %29 = getelementptr inbounds %"struct.absl::cord_internal::CordzHandle::Queue", %"struct.absl::cord_internal::CordzHandle::Queue"* %28, i64 0, i32 1, i32 0
  %30 = bitcast %"struct.std::__1::__atomic_base.2"* %29 to i64*
  %31 = load atomic i64, i64* %30 seq_cst, align 8
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %48, label %33

33:                                               ; preds = %27
  %34 = inttoptr i64 %31 to %"class.absl::cord_internal::CordzHandle"*
  br label %35

35:                                               ; preds = %33, %39
  %36 = phi %"class.absl::cord_internal::CordzHandle"* [ %43, %39 ], [ %34, %33 ]
  %37 = phi i8 [ %41, %39 ], [ 0, %33 ]
  %38 = icmp eq %"class.absl::cord_internal::CordzHandle"* %36, %1
  br i1 %38, label %45, label %39

39:                                               ; preds = %35
  %40 = icmp eq %"class.absl::cord_internal::CordzHandle"* %36, %0
  %41 = select i1 %40, i8 1, i8 %37
  %42 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %36, i64 0, i32 3
  %43 = load %"class.absl::cord_internal::CordzHandle"*, %"class.absl::cord_internal::CordzHandle"** %42, align 8
  %44 = icmp eq %"class.absl::cord_internal::CordzHandle"* %43, null
  br i1 %44, label %48, label %35

45:                                               ; preds = %35
  %46 = and i8 %37, 1
  %47 = icmp eq i8 %46, 0
  br label %48

48:                                               ; preds = %39, %27, %45
  %49 = phi i1 [ %47, %45 ], [ true, %27 ], [ true, %39 ]
  %50 = load atomic i32, i32* %16 monotonic, align 4
  %51 = and i32 %50, 2
  %52 = atomicrmw xchg i32* %16, i32 %51 release
  %53 = icmp ugt i32 %52, 7
  br i1 %53, label %54, label %55

54:                                               ; preds = %48
  tail call void @_ZN4absl13base_internal8SpinLock10SlowUnlockEj(%"class.absl::base_internal::SpinLock"* %15, i32 %52) #8
  br label %55

55:                                               ; preds = %54, %48, %8, %6, %2
  %56 = phi i1 [ false, %2 ], [ true, %6 ], [ false, %8 ], [ %49, %48 ], [ %49, %54 ]
  ret i1 %56
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl13cord_internal11CordzHandle41DiagnosticsGetSafeToInspectDeletedHandlesEv(%"class.std::__1::vector.6"* noalias sret, %"class.absl::cord_internal::CordzHandle"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.std::__1::vector.6"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #9
  %6 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %1, i64 0, i32 2
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %103, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %1, i64 0, i32 1
  %11 = load %"struct.absl::cord_internal::CordzHandle::Queue"*, %"struct.absl::cord_internal::CordzHandle::Queue"** %10, align 8
  %12 = getelementptr inbounds %"struct.absl::cord_internal::CordzHandle::Queue", %"struct.absl::cord_internal::CordzHandle::Queue"* %11, i64 0, i32 0
  %13 = getelementptr inbounds %"struct.absl::cord_internal::CordzHandle::Queue", %"struct.absl::cord_internal::CordzHandle::Queue"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %23

17:                                               ; preds = %9
  %18 = or i32 %14, 1
  %19 = cmpxchg i32* %13, i32 %14, i32 %18 acquire monotonic
  %20 = extractvalue { i32, i1 } %19, 0
  %21 = and i32 %20, 1
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %24, label %23

23:                                               ; preds = %17, %9
  tail call void @_ZN4absl13base_internal8SpinLock8SlowLockEv(%"class.absl::base_internal::SpinLock"* %12) #8
  br label %24

24:                                               ; preds = %17, %23
  %25 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %1, i64 0, i32 4
  %26 = bitcast %"class.absl::cord_internal::CordzHandle"** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %33, label %29

29:                                               ; preds = %24
  %30 = bitcast %"class.absl::cord_internal::CordzHandle"*** %3 to i64*
  %31 = bitcast %"class.std::__1::vector.6"* %0 to i64*
  %32 = bitcast %"class.absl::cord_internal::CordzHandle"*** %4 to i64*
  br label %39

33:                                               ; preds = %98, %24
  %34 = load atomic i32, i32* %13 monotonic, align 4
  %35 = and i32 %34, 2
  %36 = atomicrmw xchg i32* %13, i32 %35 release
  %37 = icmp ugt i32 %36, 7
  br i1 %37, label %38, label %103

38:                                               ; preds = %33
  tail call void @_ZN4absl13base_internal8SpinLock10SlowUnlockEj(%"class.absl::base_internal::SpinLock"* %12, i32 %36) #8
  br label %103

39:                                               ; preds = %29, %98
  %40 = phi i64 [ %27, %29 ], [ %101, %98 ]
  %41 = inttoptr i64 %40 to %"class.absl::cord_internal::CordzHandle"*
  %42 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %41, i64 0, i32 2
  %43 = load i8, i8* %42, align 8, !range !2
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %45, label %98

45:                                               ; preds = %39
  %46 = load %"class.absl::cord_internal::CordzHandle"**, %"class.absl::cord_internal::CordzHandle"*** %3, align 8
  %47 = load %"class.absl::cord_internal::CordzHandle"**, %"class.absl::cord_internal::CordzHandle"*** %4, align 8
  %48 = icmp eq %"class.absl::cord_internal::CordzHandle"** %46, %47
  %49 = ptrtoint %"class.absl::cord_internal::CordzHandle"** %47 to i64
  br i1 %48, label %54, label %50

50:                                               ; preds = %45
  %51 = bitcast %"class.absl::cord_internal::CordzHandle"** %46 to i64*
  store i64 %40, i64* %51, align 8
  %52 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle"*, %"class.absl::cord_internal::CordzHandle"** %46, i64 1
  %53 = ptrtoint %"class.absl::cord_internal::CordzHandle"** %52 to i64
  store i64 %53, i64* %30, align 8
  br label %98

54:                                               ; preds = %45
  %55 = ptrtoint %"class.absl::cord_internal::CordzHandle"** %46 to i64
  %56 = load i64, i64* %31, align 8
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = add nsw i64 %58, 1
  %60 = icmp ugt i64 %59, 2305843009213693951
  br i1 %60, label %61, label %63

61:                                               ; preds = %54
  %62 = bitcast %"class.std::__1::vector.6"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %62) #10
  unreachable

63:                                               ; preds = %54
  %64 = sub i64 %49, %56
  %65 = ashr exact i64 %64, 3
  %66 = icmp ult i64 %65, 1152921504606846975
  br i1 %66, label %67, label %75

67:                                               ; preds = %63
  %68 = ashr exact i64 %64, 2
  %69 = icmp ult i64 %68, %59
  %70 = select i1 %69, i64 %59, i64 %68
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %80, label %72

72:                                               ; preds = %67
  %73 = icmp ugt i64 %70, 2305843009213693951
  br i1 %73, label %74, label %75

74:                                               ; preds = %72
  tail call void @abort() #10
  unreachable

75:                                               ; preds = %72, %63
  %76 = phi i64 [ %70, %72 ], [ 2305843009213693951, %63 ]
  %77 = shl i64 %76, 3
  %78 = tail call i8* @_Znwm(i64 %77) #11
  %79 = bitcast i8* %78 to %"class.absl::cord_internal::CordzHandle"**
  br label %80

80:                                               ; preds = %75, %67
  %81 = phi i64 [ %76, %75 ], [ 0, %67 ]
  %82 = phi i8* [ %78, %75 ], [ null, %67 ]
  %83 = phi %"class.absl::cord_internal::CordzHandle"** [ %79, %75 ], [ null, %67 ]
  %84 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle"*, %"class.absl::cord_internal::CordzHandle"** %83, i64 %58
  %85 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle"*, %"class.absl::cord_internal::CordzHandle"** %83, i64 %81
  %86 = ptrtoint %"class.absl::cord_internal::CordzHandle"** %85 to i64
  %87 = bitcast %"class.absl::cord_internal::CordzHandle"** %84 to i64*
  store i64 %40, i64* %87, align 8
  %88 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle"*, %"class.absl::cord_internal::CordzHandle"** %84, i64 1
  %89 = ptrtoint %"class.absl::cord_internal::CordzHandle"** %88 to i64
  %90 = ptrtoint %"class.absl::cord_internal::CordzHandle"** %83 to i64
  %91 = icmp sgt i64 %57, 0
  br i1 %91, label %92, label %94

92:                                               ; preds = %80
  %93 = inttoptr i64 %56 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* align 8 %93, i64 %57, i1 false) #9
  br label %94

94:                                               ; preds = %92, %80
  store i64 %90, i64* %31, align 8
  store i64 %89, i64* %30, align 8
  store i64 %86, i64* %32, align 8
  %95 = icmp eq i64 %56, 0
  br i1 %95, label %98, label %96

96:                                               ; preds = %94
  %97 = inttoptr i64 %56 to i8*
  tail call void @_ZdlPv(i8* %97) #11
  br label %98

98:                                               ; preds = %39, %96, %94, %50
  %99 = getelementptr inbounds %"class.absl::cord_internal::CordzHandle", %"class.absl::cord_internal::CordzHandle"* %41, i64 0, i32 4
  %100 = bitcast %"class.absl::cord_internal::CordzHandle"** %99 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %33, label %39

103:                                              ; preds = %2, %38, %33
  ret void
}

; Function Attrs: cold
declare void @_ZN4absl13base_internal8SpinLock8SlowLockEv(%"class.absl::base_internal::SpinLock"*) local_unnamed_addr #4

; Function Attrs: cold
declare void @_ZN4absl13base_internal8SpinLock10SlowUnlockEj(%"class.absl::base_internal::SpinLock"*, i32) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { cold nounwind }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
