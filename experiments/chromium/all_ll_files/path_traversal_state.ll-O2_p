; ModuleID = '../../third_party/blink/renderer/platform/graphics/path_traversal_state.cc'
source_filename = "../../third_party/blink/renderer/platform/graphics/path_traversal_state.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::PathTraversalState" = type { i32, i8, %"class.blink::FloatPoint", %"class.blink::FloatPoint", float, float, %"class.blink::FloatPoint", float }
%"class.blink::FloatPoint" = type { float, float }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"struct.blink::CubicBezier"*, i32, i32 }
%"struct.blink::CubicBezier" = type <{ %"class.blink::FloatPoint", %"class.blink::FloatPoint", %"class.blink::FloatPoint", %"class.blink::FloatPoint", i16, [2 x i8] }>
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN3WTF6VectorIN5blink11CubicBezierELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS2_EEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink11CubicBezierEEEmm = comdat any

$_ZN3WTF6VectorIN5blink11CubicBezierELj0ENS_18PartitionAllocatorEE2atEj = comdat any

@.str = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.2 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.3 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink11CubicBezierEEEPKcv = private unnamed_addr constant [66 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::CubicBezier]\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1

@_ZN5blink18PathTraversalStateC1ENS0_19PathTraversalActionE = hidden unnamed_addr alias void (%"class.blink::PathTraversalState"*, i32), void (%"class.blink::PathTraversalState"*, i32)* @_ZN5blink18PathTraversalStateC2ENS0_19PathTraversalActionE

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink18PathTraversalStateC2ENS0_19PathTraversalActionE(%"class.blink::PathTraversalState"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::PathTraversalState", %"class.blink::PathTraversalState"* %0, i64 0, i32 0
  store i32 %1, i32* %3, align 4
  %4 = getelementptr inbounds %"class.blink::PathTraversalState", %"class.blink::PathTraversalState"* %0, i64 0, i32 1
  store i8 0, i8* %4, align 4
  %5 = getelementptr inbounds %"class.blink::PathTraversalState", %"class.blink::PathTraversalState"* %0, i64 0, i32 2, i32 0
  %6 = bitcast float* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %6, i8 0, i64 36, i1 false)
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden float @_ZN5blink18PathTraversalState12CloseSubpathEv(%"class.blink::PathTraversalState"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::PathTraversalState", %"class.blink::PathTraversalState"* %0, i64 0, i32 2
  %3 = getelementptr inbounds %"class.blink::PathTraversalState", %"class.blink::PathTraversalState"* %0, i64 0, i32 3
  %4 = bitcast %"class.blink::FloatPoint"* %3 to <2 x float>*
  %5 = load <2 x float>, <2 x float>* %4, align 4
  %6 = bitcast %"class.blink::FloatPoint"* %2 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fsub <2 x float> %5, %7
  %9 = fmul <2 x float> %8, %8
  %10 = extractelement <2 x float> %9, i32 0
  %11 = extractelement <2 x float> %9, i32 1
  %12 = fadd float %10, %11
  %13 = tail call float @sqrtf(float %12) #10
  %14 = bitcast %"class.blink::FloatPoint"* %3 to i64*
  %15 = bitcast %"class.blink::FloatPoint"* %2 to i64*
  %16 = load i64, i64* %14, align 4
  store i64 %16, i64* %15, align 4
  ret float %13
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden float @_ZN5blink18PathTraversalState6MoveToERKNS_10FloatPointE(%"class.blink::PathTraversalState"* nocapture, %"class.blink::FloatPoint"* nocapture readonly dereferenceable(8)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.blink::PathTraversalState", %"class.blink::PathTraversalState"* %0, i64 0, i32 3
  %4 = bitcast %"class.blink::FloatPoint"* %1 to i64*
  %5 = bitcast %"class.blink::FloatPoint"* %3 to i64*
  %6 = load i64, i64* %4, align 4
  store i64 %6, i64* %5, align 4
  %7 = getelementptr inbounds %"class.blink::PathTraversalState", %"class.blink::PathTraversalState"* %0, i64 0, i32 2
  %8 = bitcast %"class.blink::FloatPoint"* %7 to i64*
  store i64 %6, i64* %8, align 4
  ret float 0.000000e+00
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden float @_ZN5blink18PathTraversalState6LineToERKNS_10FloatPointE(%"class.blink::PathTraversalState"* nocapture, %"class.blink::FloatPoint"* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::PathTraversalState", %"class.blink::PathTraversalState"* %0, i64 0, i32 2
  %4 = bitcast %"class.blink::FloatPoint"* %1 to <2 x float>*
  %5 = load <2 x float>, <2 x float>* %4, align 4
  %6 = bitcast %"class.blink::FloatPoint"* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fsub <2 x float> %5, %7
  %9 = fmul <2 x float> %8, %8
  %10 = extractelement <2 x float> %9, i32 0
  %11 = extractelement <2 x float> %9, i32 1
  %12 = fadd float %10, %11
  %13 = tail call float @sqrtf(float %12) #10
  %14 = bitcast %"class.blink::FloatPoint"* %1 to i64*
  %15 = bitcast %"class.blink::FloatPoint"* %3 to i64*
  %16 = load i64, i64* %14, align 4
  store i64 %16, i64* %15, align 4
  ret float %13
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN5blink18PathTraversalState13CubicBezierToERKNS_10FloatPointES3_S3_(%"class.blink::PathTraversalState"* nocapture, %"class.blink::FloatPoint"* nocapture readonly dereferenceable(8), %"class.blink::FloatPoint"* nocapture readonly dereferenceable(8), %"class.blink::FloatPoint"* nocapture readonly dereferenceable(8)) local_unnamed_addr #4 align 2 {
  %5 = alloca %"class.WTF::Vector", align 8
  %6 = alloca %"struct.blink::CubicBezier", align 8
  %7 = alloca %"struct.blink::CubicBezier", align 8
  %8 = getelementptr inbounds %"class.blink::PathTraversalState", %"class.blink::PathTraversalState"* %0, i64 0, i32 2
  %9 = bitcast %"class.blink::FloatPoint"* %8 to i64*
  %10 = load i64, i64* %9, align 4
  %11 = bitcast %"class.blink::FloatPoint"* %1 to i64*
  %12 = load i64, i64* %11, align 4
  %13 = bitcast %"class.blink::FloatPoint"* %2 to i64*
  %14 = load i64, i64* %13, align 4
  %15 = bitcast %"class.blink::FloatPoint"* %3 to i64*
  %16 = load i64, i64* %15, align 4
  %17 = bitcast %"struct.blink::CubicBezier"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %17)
  %18 = bitcast %"struct.blink::CubicBezier"* %7 to i64*
  store i64 %10, i64* %18, align 8
  %19 = getelementptr inbounds %"struct.blink::CubicBezier", %"struct.blink::CubicBezier"* %7, i64 0, i32 1
  %20 = bitcast %"class.blink::FloatPoint"* %19 to i64*
  store i64 %12, i64* %20, align 8
  %21 = getelementptr inbounds %"struct.blink::CubicBezier", %"struct.blink::CubicBezier"* %7, i64 0, i32 2
  %22 = bitcast %"class.blink::FloatPoint"* %21 to i64*
  store i64 %14, i64* %22, align 8
  %23 = getelementptr inbounds %"struct.blink::CubicBezier", %"struct.blink::CubicBezier"* %7, i64 0, i32 3
  %24 = bitcast %"class.blink::FloatPoint"* %23 to i64*
  store i64 %16, i64* %24, align 8
  %25 = getelementptr inbounds %"struct.blink::CubicBezier", %"struct.blink::CubicBezier"* %7, i64 0, i32 4
  store i16 0, i16* %25, align 8
  %26 = getelementptr inbounds %"struct.blink::CubicBezier", %"struct.blink::CubicBezier"* %7, i64 0, i32 1, i32 0
  %27 = insertelement <2 x i64> undef, i64 %10, i32 0
  %28 = insertelement <2 x i64> %27, i64 %12, i32 1
  %29 = trunc <2 x i64> %28 to <2 x i32>
  %30 = bitcast <2 x i32> %29 to <2 x float>
  %31 = fmul <2 x float> %30, %30
  %32 = lshr <2 x i64> %28, <i64 32, i64 32>
  %33 = trunc <2 x i64> %32 to <2 x i32>
  %34 = bitcast <2 x i32> %33 to <2 x float>
  %35 = fmul <2 x float> %34, %34
  %36 = fadd <2 x float> %31, %35
  %37 = fpext <2 x float> %36 to <2 x double>
  %38 = extractelement <2 x double> %37, i32 0
  %39 = extractelement <2 x double> %37, i32 1
  %40 = fadd double %38, %39
  %41 = getelementptr inbounds %"struct.blink::CubicBezier", %"struct.blink::CubicBezier"* %7, i64 0, i32 2, i32 0
  %42 = trunc i64 %14 to i32
  %43 = bitcast i32 %42 to float
  %44 = fmul float %43, %43
  %45 = lshr i64 %14, 32
  %46 = trunc i64 %45 to i32
  %47 = bitcast i32 %46 to float
  %48 = fmul float %47, %47
  %49 = fadd float %44, %48
  %50 = fpext float %49 to double
  %51 = fadd double %40, %50
  %52 = getelementptr inbounds %"struct.blink::CubicBezier", %"struct.blink::CubicBezier"* %7, i64 0, i32 3, i32 0
  %53 = trunc i64 %16 to i32
  %54 = bitcast i32 %53 to float
  %55 = fmul float %54, %54
  %56 = lshr i64 %16, 32
  %57 = trunc i64 %56 to i32
  %58 = bitcast i32 %57 to float
  %59 = fmul float %58, %58
  %60 = fadd float %55, %59
  %61 = fpext float %60 to double
  %62 = fadd double %51, %61
  %63 = fmul double %62, 6.250000e-02
  %64 = fcmp olt double %63, 0x3C9CD2B297D889BC
  br i1 %64, label %211, label %65

65:                                               ; preds = %4
  %66 = bitcast %"class.WTF::Vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %66) #10
  %67 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 0
  %68 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 1
  %69 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %66, i8 0, i64 16, i1 false) #10
  call void @_ZN3WTF6VectorIN5blink11CubicBezierELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS2_EEvOT_(%"class.WTF::Vector"* nonnull %5, %"struct.blink::CubicBezier"* nonnull dereferenceable(36) %7) #10
  %70 = getelementptr inbounds %"class.blink::PathTraversalState", %"class.blink::PathTraversalState"* %0, i64 0, i32 6
  %71 = bitcast %"class.blink::FloatPoint"* %70 to i64*
  %72 = getelementptr inbounds %"class.blink::PathTraversalState", %"class.blink::PathTraversalState"* %0, i64 0, i32 0
  %73 = getelementptr inbounds %"class.blink::PathTraversalState", %"class.blink::PathTraversalState"* %0, i64 0, i32 4
  %74 = getelementptr inbounds %"class.blink::PathTraversalState", %"class.blink::PathTraversalState"* %0, i64 0, i32 5
  %75 = bitcast %"struct.blink::CubicBezier"* %6 to i8*
  %76 = getelementptr inbounds %"struct.blink::CubicBezier", %"struct.blink::CubicBezier"* %6, i64 0, i32 4
  %77 = getelementptr inbounds %"struct.blink::CubicBezier", %"struct.blink::CubicBezier"* %6, i64 0, i32 5, i64 0
  %78 = getelementptr inbounds %"struct.blink::CubicBezier", %"struct.blink::CubicBezier"* %6, i64 0, i32 5, i64 1
  %79 = getelementptr inbounds %"struct.blink::CubicBezier", %"struct.blink::CubicBezier"* %6, i64 0, i32 2
  %80 = bitcast %"class.blink::FloatPoint"* %79 to <2 x float>*
  %81 = getelementptr inbounds %"struct.blink::CubicBezier", %"struct.blink::CubicBezier"* %6, i64 0, i32 1
  %82 = bitcast %"class.blink::FloatPoint"* %81 to <2 x float>*
  %83 = getelementptr inbounds %"struct.blink::CubicBezier", %"struct.blink::CubicBezier"* %6, i64 0, i32 3
  %84 = bitcast %"class.blink::FloatPoint"* %83 to i64*
  %85 = bitcast %"struct.blink::CubicBezier"* %6 to <2 x float>*
  %86 = bitcast %"class.blink::FloatPoint"* %19 to <2 x float>*
  %87 = bitcast %"class.blink::FloatPoint"* %21 to <2 x float>*
  %88 = bitcast %"class.blink::FloatPoint"* %23 to <2 x float>*
  %89 = bitcast float* %26 to <2 x float>*
  %90 = bitcast %"struct.blink::CubicBezier"* %7 to <2 x float>*
  %91 = bitcast float* %41 to <2 x float>*
  %92 = bitcast float* %26 to <2 x float>*
  %93 = bitcast float* %52 to <2 x float>*
  %94 = bitcast float* %41 to <2 x float>*
  %95 = bitcast %"class.blink::FloatPoint"* %23 to <2 x float>*
  %96 = bitcast %"struct.blink::CubicBezier"* %7 to <2 x float>*
  %97 = bitcast float* %41 to <2 x float>*
  %98 = bitcast float* %26 to <2 x float>*
  %99 = bitcast %"struct.blink::CubicBezier"* %7 to <2 x float>*
  %100 = bitcast %"class.blink::FloatPoint"* %23 to <2 x float>*
  br label %101

101:                                              ; preds = %196, %65
  %102 = phi float [ 0.000000e+00, %65 ], [ %198, %196 ]
  %103 = load <2 x float>, <2 x float>* %89, align 8
  %104 = load <2 x float>, <2 x float>* %90, align 8
  %105 = fsub <2 x float> %103, %104
  %106 = fmul <2 x float> %105, %105
  %107 = extractelement <2 x float> %106, i32 0
  %108 = extractelement <2 x float> %106, i32 1
  %109 = fadd float %107, %108
  %110 = call float @sqrtf(float %109) #10
  %111 = load <2 x float>, <2 x float>* %91, align 8
  %112 = load <2 x float>, <2 x float>* %92, align 8
  %113 = fsub <2 x float> %111, %112
  %114 = fmul <2 x float> %113, %113
  %115 = extractelement <2 x float> %114, i32 0
  %116 = extractelement <2 x float> %114, i32 1
  %117 = fadd float %115, %116
  %118 = call float @sqrtf(float %117) #10
  %119 = fadd float %110, %118
  %120 = load <2 x float>, <2 x float>* %93, align 8
  %121 = load <2 x float>, <2 x float>* %94, align 8
  %122 = fsub <2 x float> %120, %121
  %123 = fmul <2 x float> %122, %122
  %124 = extractelement <2 x float> %123, i32 0
  %125 = extractelement <2 x float> %123, i32 1
  %126 = fadd float %124, %125
  %127 = call float @sqrtf(float %126) #10
  %128 = fadd float %119, %127
  %129 = load <2 x float>, <2 x float>* %95, align 8
  %130 = load <2 x float>, <2 x float>* %96, align 8
  %131 = fsub <2 x float> %129, %130
  %132 = fmul <2 x float> %131, %131
  %133 = extractelement <2 x float> %132, i32 0
  %134 = extractelement <2 x float> %132, i32 1
  %135 = fadd float %133, %134
  %136 = call float @sqrtf(float %135) #10
  %137 = fsub float %128, %136
  %138 = fpext float %137 to double
  %139 = fmul double %138, %138
  %140 = fdiv double %139, %63
  %141 = fcmp ogt double %140, 0x3C9CD2B297D889BC
  br i1 %141, label %142, label %177

142:                                              ; preds = %101
  %143 = load i16, i16* %25, align 8
  %144 = icmp ult i16 %143, 20
  br i1 %144, label %145, label %177

145:                                              ; preds = %142
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %75) #10
  store i8 -86, i8* %77, align 2
  store i8 -86, i8* %78, align 1
  %146 = load <2 x float>, <2 x float>* %97, align 8
  %147 = load <2 x float>, <2 x float>* %98, align 8
  %148 = fadd <2 x float> %147, %146
  %149 = fmul <2 x float> %148, <float 5.000000e-01, float 5.000000e-01>
  %150 = load <2 x float>, <2 x float>* %99, align 8
  %151 = fadd <2 x float> %147, %150
  %152 = fmul <2 x float> %151, <float 5.000000e-01, float 5.000000e-01>
  %153 = fadd <2 x float> %149, %152
  %154 = fmul <2 x float> %153, <float 5.000000e-01, float 5.000000e-01>
  %155 = load <2 x float>, <2 x float>* %100, align 8
  %156 = fadd <2 x float> %146, %155
  %157 = fmul <2 x float> %156, <float 5.000000e-01, float 5.000000e-01>
  store <2 x float> %157, <2 x float>* %80, align 8
  %158 = fadd <2 x float> %149, %157
  %159 = fmul <2 x float> %158, <float 5.000000e-01, float 5.000000e-01>
  store <2 x float> %159, <2 x float>* %82, align 8
  %160 = load i64, i64* %24, align 8
  store i64 %160, i64* %84, align 8
  %161 = fadd <2 x float> %154, %159
  %162 = fmul <2 x float> %161, <float 5.000000e-01, float 5.000000e-01>
  store <2 x float> %162, <2 x float>* %85, align 8
  %163 = add nuw nsw i16 %143, 1
  store i16 %163, i16* %76, align 8
  store <2 x float> %152, <2 x float>* %86, align 8
  store <2 x float> %154, <2 x float>* %87, align 8
  store <2 x float> %162, <2 x float>* %88, align 8
  store i16 %163, i16* %25, align 8
  %164 = load i32, i32* %69, align 4
  %165 = load i32, i32* %68, align 8
  %166 = icmp eq i32 %164, %165
  br i1 %166, label %173, label %167, !prof !2

167:                                              ; preds = %145
  %168 = load %"struct.blink::CubicBezier"*, %"struct.blink::CubicBezier"** %67, align 8
  %169 = zext i32 %164 to i64
  %170 = getelementptr inbounds %"struct.blink::CubicBezier", %"struct.blink::CubicBezier"* %168, i64 %169
  %171 = bitcast %"struct.blink::CubicBezier"* %170 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %171, i8* nonnull align 8 %75, i64 36, i1 false) #10
  %172 = add i32 %164, 1
  store i32 %172, i32* %69, align 4
  br label %175

173:                                              ; preds = %145
  call void @_ZN3WTF6VectorIN5blink11CubicBezierELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS2_EEvOT_(%"class.WTF::Vector"* nonnull %5, %"struct.blink::CubicBezier"* nonnull dereferenceable(36) %6) #10
  %174 = load i32, i32* %69, align 4
  br label %175

175:                                              ; preds = %173, %167
  %176 = phi i32 [ %172, %167 ], [ %174, %173 ]
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %75) #10
  br label %196

177:                                              ; preds = %142, %101
  %178 = fadd float %102, %128
  %179 = load i32, i32* %72, align 4
  %180 = add i32 %179, -1
  %181 = icmp ult i32 %180, 2
  br i1 %181, label %182, label %189

182:                                              ; preds = %177
  %183 = load i64, i64* %18, align 8
  store i64 %183, i64* %71, align 4
  %184 = load i64, i64* %24, align 8
  store i64 %184, i64* %9, align 4
  %185 = load float, float* %73, align 4
  %186 = fadd float %178, %185
  %187 = load float, float* %74, align 4
  %188 = fcmp ogt float %186, %187
  br i1 %188, label %200, label %189

189:                                              ; preds = %182, %177
  %190 = load i32, i32* %69, align 4
  %191 = add i32 %190, -1
  %192 = call dereferenceable(36) %"struct.blink::CubicBezier"* @_ZN3WTF6VectorIN5blink11CubicBezierELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* nonnull %5, i32 %191) #10
  %193 = bitcast %"struct.blink::CubicBezier"* %192 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %17, i8* align 4 %193, i64 34, i1 false) #10
  %194 = load i32, i32* %69, align 4
  %195 = add i32 %194, -1
  store i32 %195, i32* %69, align 4
  br label %196

196:                                              ; preds = %189, %175
  %197 = phi i32 [ %195, %189 ], [ %176, %175 ]
  %198 = phi float [ %178, %189 ], [ %102, %175 ]
  %199 = icmp eq i32 %197, 0
  br i1 %199, label %200, label %101

200:                                              ; preds = %196, %182
  %201 = phi float [ %198, %196 ], [ %178, %182 ]
  %202 = load %"struct.blink::CubicBezier"*, %"struct.blink::CubicBezier"** %67, align 8
  %203 = icmp eq %"struct.blink::CubicBezier"* %202, null
  %204 = bitcast %"struct.blink::CubicBezier"* %202 to i8*
  br i1 %203, label %210, label %205, !prof !3

205:                                              ; preds = %200
  %206 = load i32, i32* %69, align 4
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %209, label %208, !prof !2

208:                                              ; preds = %205
  store i32 0, i32* %69, align 4
  br label %209

209:                                              ; preds = %208, %205
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %204) #10
  store %"struct.blink::CubicBezier"* null, %"struct.blink::CubicBezier"** %67, align 8
  br label %210

210:                                              ; preds = %209, %200
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %66) #10
  br label %211

211:                                              ; preds = %4, %210
  %212 = phi float [ %201, %210 ], [ 0.000000e+00, %4 ]
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %17)
  %213 = getelementptr inbounds %"class.blink::PathTraversalState", %"class.blink::PathTraversalState"* %0, i64 0, i32 0
  %214 = load i32, i32* %213, align 4
  %215 = add i32 %214, -1
  %216 = icmp ult i32 %215, 2
  br i1 %216, label %219, label %217

217:                                              ; preds = %211
  %218 = load i64, i64* %15, align 4
  store i64 %218, i64* %9, align 4
  br label %219

219:                                              ; preds = %211, %217
  ret float %212
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink18PathTraversalState14ProcessSegmentEv(%"class.blink::PathTraversalState"* nocapture) local_unnamed_addr #4 align 2 {
  %2 = alloca %"class.blink::FloatPoint", align 4
  %3 = getelementptr inbounds %"class.blink::PathTraversalState", %"class.blink::PathTraversalState"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, -1
  %6 = icmp ult i32 %5, 2
  br i1 %6, label %7, label %47

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::PathTraversalState", %"class.blink::PathTraversalState"* %0, i64 0, i32 4
  %9 = load float, float* %8, align 4
  %10 = getelementptr inbounds %"class.blink::PathTraversalState", %"class.blink::PathTraversalState"* %0, i64 0, i32 5
  %11 = load float, float* %10, align 4
  %12 = fcmp ult float %9, %11
  br i1 %12, label %47, label %13

13:                                               ; preds = %7
  %14 = bitcast %"class.blink::FloatPoint"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #10
  %15 = getelementptr inbounds %"class.blink::PathTraversalState", %"class.blink::PathTraversalState"* %0, i64 0, i32 2, i32 0
  %16 = load float, float* %15, align 4
  %17 = getelementptr inbounds %"class.blink::PathTraversalState", %"class.blink::PathTraversalState"* %0, i64 0, i32 6, i32 0
  %18 = load float, float* %17, align 4
  %19 = fsub float %16, %18
  %20 = getelementptr inbounds %"class.blink::PathTraversalState", %"class.blink::PathTraversalState"* %0, i64 0, i32 2, i32 1
  %21 = load float, float* %20, align 4
  %22 = getelementptr inbounds %"class.blink::PathTraversalState", %"class.blink::PathTraversalState"* %0, i64 0, i32 6, i32 1
  %23 = load float, float* %22, align 4
  %24 = fsub float %21, %23
  %25 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %2, i64 0, i32 0
  store float %19, float* %25, align 4
  %26 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %2, i64 0, i32 1
  store float %24, float* %26, align 4
  %27 = call float @_ZNK5blink10FloatPoint17SlopeAngleRadiansEv(%"class.blink::FloatPoint"* nonnull %2) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #10
  %28 = load i32, i32* %3, align 4
  %29 = icmp eq i32 %28, 1
  br i1 %29, label %30, label %42

30:                                               ; preds = %13
  %31 = load float, float* %10, align 4
  %32 = load float, float* %8, align 4
  %33 = fsub float %31, %32
  %34 = call float @cosf(float %27) #10
  %35 = fmul float %33, %34
  %36 = call float @sinf(float %27) #10
  %37 = fmul float %33, %36
  %38 = load float, float* %15, align 4
  %39 = fadd float %35, %38
  store float %39, float* %15, align 4
  %40 = load float, float* %20, align 4
  %41 = fadd float %37, %40
  store float %41, float* %20, align 4
  br label %45

42:                                               ; preds = %13
  %43 = fmul float %27, 0x404CA5DC00000000
  %44 = getelementptr inbounds %"class.blink::PathTraversalState", %"class.blink::PathTraversalState"* %0, i64 0, i32 7
  store float %43, float* %44, align 4
  br label %45

45:                                               ; preds = %42, %30
  %46 = getelementptr inbounds %"class.blink::PathTraversalState", %"class.blink::PathTraversalState"* %0, i64 0, i32 1
  store i8 1, i8* %46, align 4
  br label %47

47:                                               ; preds = %1, %7, %45
  %48 = getelementptr inbounds %"class.blink::PathTraversalState", %"class.blink::PathTraversalState"* %0, i64 0, i32 2
  %49 = getelementptr inbounds %"class.blink::PathTraversalState", %"class.blink::PathTraversalState"* %0, i64 0, i32 6
  %50 = bitcast %"class.blink::FloatPoint"* %48 to i64*
  %51 = bitcast %"class.blink::FloatPoint"* %49 to i64*
  %52 = load i64, i64* %50, align 4
  store i64 %52, i64* %51, align 4
  ret void
}

declare float @_ZNK5blink10FloatPoint17SlopeAngleRadiansEv(%"class.blink::FloatPoint"*) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare float @cosf(float) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare float @sinf(float) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #6

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink11CubicBezierELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS2_EEvOT_(%"class.WTF::Vector"*, %"struct.blink::CubicBezier"* dereferenceable(36)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"struct.blink::CubicBezier"*, %"struct.blink::CubicBezier"** %6, align 8
  %8 = icmp ugt %"struct.blink::CubicBezier"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"struct.blink::CubicBezier", %"struct.blink::CubicBezier"* %7, i64 %10
  %12 = icmp ugt %"struct.blink::CubicBezier"* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !3

24:                                               ; preds = %13
  %25 = icmp eq %"struct.blink::CubicBezier"* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink11CubicBezierEEEmm(i64 %26) #10
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink11CubicBezierEEEPKcv, i64 0, i64 0)) #10
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = udiv i64 %27, 36
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %"struct.blink::CubicBezier"*
  br label %99

35:                                               ; preds = %24
  %36 = udiv i64 %27, 36
  %37 = ptrtoint i8* %28 to i64
  %38 = load %"struct.blink::CubicBezier"*, %"struct.blink::CubicBezier"** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %"struct.blink::CubicBezier"* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast %"struct.blink::CubicBezier"* %38 to i8*
  br i1 %41, label %43, label %49, !prof !3

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = mul nuw nsw i64 %45, 36
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %28, i8* nonnull align 4 %42, i64 %46, i1 false) #10
  %47 = bitcast %"class.WTF::Vector"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #10
  %51 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %"struct.blink::CubicBezier"*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %"struct.blink::CubicBezier"* %1 to i64
  %56 = ptrtoint %"struct.blink::CubicBezier"* %7 to i64
  %57 = sub i64 %55, %56
  %58 = sdiv exact i64 %57, 36
  %59 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !3

69:                                               ; preds = %54
  %70 = icmp eq %"struct.blink::CubicBezier"* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink11CubicBezierEEEmm(i64 %71) #10
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink11CubicBezierEEEPKcv, i64 0, i64 0)) #10
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %"struct.blink::CubicBezier"*, %"struct.blink::CubicBezier"** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %"struct.blink::CubicBezier"* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast %"struct.blink::CubicBezier"* %78 to i8*
  br i1 %81, label %83, label %89, !prof !3

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = mul nuw nsw i64 %85, 36
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %73, i8* nonnull align 4 %82, i64 %86, i1 false) #10
  %87 = bitcast %"class.WTF::Vector"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #10
  %91 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = udiv i64 %72, 36
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %"struct.blink::CubicBezier"*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %"struct.blink::CubicBezier"* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %"struct.blink::CubicBezier", %"struct.blink::CubicBezier"* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi %"struct.blink::CubicBezier"* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi %"struct.blink::CubicBezier"* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %"struct.blink::CubicBezier", %"struct.blink::CubicBezier"* %100, i64 %103
  %105 = bitcast %"struct.blink::CubicBezier"* %104 to i8*
  %106 = bitcast %"struct.blink::CubicBezier"* %101 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %105, i8* align 4 %106, i64 36, i1 false) #10
  %107 = load i32, i32* %3, align 4
  %108 = add i32 %107, 1
  store i32 %108, i32* %3, align 4
  ret void
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink11CubicBezierEEEmm(i64) local_unnamed_addr #9 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 59594069
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 59594069) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = mul i64 %0, 36
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #10
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #5

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #5

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #5

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #5

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #5

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(36) %"struct.blink::CubicBezier"* @_ZN3WTF6VectorIN5blink11CubicBezierELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #9 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #10
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i8* %14, i8* %15) #10
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #10
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #10
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"struct.blink::CubicBezier"*, %"struct.blink::CubicBezier"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"struct.blink::CubicBezier", %"struct.blink::CubicBezier"* %24, i64 %25
  ret %"struct.blink::CubicBezier"* %26
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
