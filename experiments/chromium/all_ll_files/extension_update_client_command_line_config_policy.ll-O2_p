; ModuleID = '../../chrome/browser/extensions/updater/extension_update_client_command_line_config_policy.cc'
source_filename = "../../chrome/browser/extensions/updater/extension_update_client_command_line_config_policy.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.extensions::ExtensionUpdateClientCommandLineConfigPolicy" = type <{ %"class.update_client::CommandLineConfigPolicy", i8, [7 x i8] }>
%"class.update_client::CommandLineConfigPolicy" = type { i32 (...)** }
%"class.base::CommandLine" = type { %"class.std::__1::vector", %"class.std::__1::map", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.6", %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { i64 }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %class.GURL* }

$_ZN13update_client23CommandLineConfigPolicyD2Ev = comdat any

$_ZN10extensions44ExtensionUpdateClientCommandLineConfigPolicyD0Ev = comdat any

@_ZTVN10extensions44ExtensionUpdateClientCommandLineConfigPolicyE = hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"class.update_client::CommandLineConfigPolicy"*)* @_ZNK13update_client23CommandLineConfigPolicy26BackgroundDownloadsEnabledEv to i8*), i8* bitcast (i1 (%"class.update_client::CommandLineConfigPolicy"*)* @_ZNK13update_client23CommandLineConfigPolicy19DeltaUpdatesEnabledEv to i8*), i8* bitcast (i1 (%"class.update_client::CommandLineConfigPolicy"*)* @_ZNK13update_client23CommandLineConfigPolicy10FastUpdateEv to i8*), i8* bitcast (i1 (%"class.update_client::CommandLineConfigPolicy"*)* @_ZNK13update_client23CommandLineConfigPolicy12PingsEnabledEv to i8*), i8* bitcast (i1 (%"class.extensions::ExtensionUpdateClientCommandLineConfigPolicy"*)* @_ZNK10extensions44ExtensionUpdateClientCommandLineConfigPolicy11TestRequestEv to i8*), i8* bitcast (void (%class.GURL*, %"class.update_client::CommandLineConfigPolicy"*)* @_ZNK13update_client23CommandLineConfigPolicy17UrlSourceOverrideEv to i8*), i8* bitcast (double (%"class.update_client::CommandLineConfigPolicy"*)* @_ZNK13update_client23CommandLineConfigPolicy12InitialDelayEv to i8*), i8* bitcast (void (%"class.update_client::CommandLineConfigPolicy"*)* @_ZN13update_client23CommandLineConfigPolicyD2Ev to i8*), i8* bitcast (void (%"class.extensions::ExtensionUpdateClientCommandLineConfigPolicy"*)* @_ZN10extensions44ExtensionUpdateClientCommandLineConfigPolicyD0Ev to i8*)] }, align 8
@_ZN10extensions23kSwitchTestRequestParamE = external constant [0 x i8], align 1

@_ZN10extensions44ExtensionUpdateClientCommandLineConfigPolicyC1EPKN4base11CommandLineE = hidden unnamed_addr alias void (%"class.extensions::ExtensionUpdateClientCommandLineConfigPolicy"*, %"class.base::CommandLine"*), void (%"class.extensions::ExtensionUpdateClientCommandLineConfigPolicy"*, %"class.base::CommandLine"*)* @_ZN10extensions44ExtensionUpdateClientCommandLineConfigPolicyC2EPKN4base11CommandLineE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions44ExtensionUpdateClientCommandLineConfigPolicyC2EPKN4base11CommandLineE(%"class.extensions::ExtensionUpdateClientCommandLineConfigPolicy"* nocapture, %"class.base::CommandLine"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.extensions::ExtensionUpdateClientCommandLineConfigPolicy", %"class.extensions::ExtensionUpdateClientCommandLineConfigPolicy"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN10extensions44ExtensionUpdateClientCommandLineConfigPolicyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.extensions::ExtensionUpdateClientCommandLineConfigPolicy", %"class.extensions::ExtensionUpdateClientCommandLineConfigPolicy"* %0, i64 0, i32 1
  store i8 0, i8* %4, align 8
  %5 = tail call zeroext i1 @_ZNK4base11CommandLine9HasSwitchEPKc(%"class.base::CommandLine"* %1, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN10extensions23kSwitchTestRequestParamE, i64 0, i64 0)) #5
  %6 = zext i1 %5 to i8
  store i8 %6, i8* %4, align 8
  ret void
}

declare zeroext i1 @_ZNK4base11CommandLine9HasSwitchEPKc(%"class.base::CommandLine"*, i8*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK10extensions44ExtensionUpdateClientCommandLineConfigPolicy11TestRequestEv(%"class.extensions::ExtensionUpdateClientCommandLineConfigPolicy"* nocapture readonly) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.extensions::ExtensionUpdateClientCommandLineConfigPolicy", %"class.extensions::ExtensionUpdateClientCommandLineConfigPolicy"* %0, i64 0, i32 1
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

declare zeroext i1 @_ZNK13update_client23CommandLineConfigPolicy26BackgroundDownloadsEnabledEv(%"class.update_client::CommandLineConfigPolicy"*) unnamed_addr #1

declare zeroext i1 @_ZNK13update_client23CommandLineConfigPolicy19DeltaUpdatesEnabledEv(%"class.update_client::CommandLineConfigPolicy"*) unnamed_addr #1

declare zeroext i1 @_ZNK13update_client23CommandLineConfigPolicy10FastUpdateEv(%"class.update_client::CommandLineConfigPolicy"*) unnamed_addr #1

declare zeroext i1 @_ZNK13update_client23CommandLineConfigPolicy12PingsEnabledEv(%"class.update_client::CommandLineConfigPolicy"*) unnamed_addr #1

declare void @_ZNK13update_client23CommandLineConfigPolicy17UrlSourceOverrideEv(%class.GURL* sret, %"class.update_client::CommandLineConfigPolicy"*) unnamed_addr #1

declare double @_ZNK13update_client23CommandLineConfigPolicy12InitialDelayEv(%"class.update_client::CommandLineConfigPolicy"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN13update_client23CommandLineConfigPolicyD2Ev(%"class.update_client::CommandLineConfigPolicy"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN10extensions44ExtensionUpdateClientCommandLineConfigPolicyD0Ev(%"class.extensions::ExtensionUpdateClientCommandLineConfigPolicy"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"class.extensions::ExtensionUpdateClientCommandLineConfigPolicy"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
