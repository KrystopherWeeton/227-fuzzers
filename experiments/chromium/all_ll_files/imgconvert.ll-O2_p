; ModuleID = '../../third_party/ffmpeg/libavcodec/imgconvert.c'
source_filename = "../../third_party/ffmpeg/libavcodec/imgconvert.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVPixFmtDescriptor = type { i8*, i8, i8, i8, i64, [4 x %struct.AVComponentDescriptor], i8* }
%struct.AVComponentDescriptor = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }

@.str = private unnamed_addr constant [30 x i8] c"Assertion %s failed at %s:%d\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"desc\00", align 1
@.str.2 = private unnamed_addr constant [49 x i8] c"../../third_party/ffmpeg/libavcodec/imgconvert.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @avcodec_get_chroma_sub_sample(i32, i32* nocapture, i32* nocapture) local_unnamed_addr #0 {
  %4 = tail call %struct.AVPixFmtDescriptor* @av_pix_fmt_desc_get(i32 %0) #4
  %5 = icmp eq %struct.AVPixFmtDescriptor* %4, null
  br i1 %5, label %6, label %7

6:                                                ; preds = %3
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.2, i64 0, i64 0), i32 41) #4
  tail call void @abort() #5
  unreachable

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %4, i64 0, i32 2
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  store i32 %10, i32* %1, align 4
  %11 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %4, i64 0, i32 3
  %12 = load i8, i8* %11, align 2
  %13 = zext i8 %12 to i32
  store i32 %13, i32* %2, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %struct.AVPixFmtDescriptor* @av_pix_fmt_desc_get(i32) local_unnamed_addr #2

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @avcodec_get_pix_fmt_loss(i32, i32, i32) local_unnamed_addr #0 {
  %4 = tail call i32 @av_get_pix_fmt_loss(i32 %0, i32 %1, i32 %2) #4
  ret i32 %4
}

declare i32 @av_get_pix_fmt_loss(i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @avcodec_find_best_pix_fmt_of_2(i32, i32, i32, i32, i32*) local_unnamed_addr #0 {
  %6 = tail call i32 @av_find_best_pix_fmt_of_2(i32 %0, i32 %1, i32 %2, i32 %3, i32* %4) #4
  ret i32 %6
}

declare i32 @av_find_best_pix_fmt_of_2(i32, i32, i32, i32, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @avcodec_find_best_pix_fmt2(i32, i32, i32, i32, i32*) local_unnamed_addr #0 {
  %6 = tail call i32 @av_find_best_pix_fmt_of_2(i32 %0, i32 %1, i32 %2, i32 %3, i32* %4) #4
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @avcodec_find_best_pix_fmt_of_list(i32* nocapture readonly, i32, i32, i32*) local_unnamed_addr #0 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #4
  store i32 -1431655766, i32* %5, align 4
  %7 = load i32, i32* %0, align 4
  %8 = icmp eq i32 %7, -1
  %9 = icmp ne i32* %3, null
  br i1 %8, label %23, label %10

10:                                               ; preds = %4, %16
  %11 = phi i64 [ %19, %16 ], [ 0, %4 ]
  %12 = phi i32 [ %21, %16 ], [ %7, %4 ]
  %13 = phi i32 [ %18, %16 ], [ -1, %4 ]
  br i1 %9, label %14, label %16

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  br label %16

16:                                               ; preds = %10, %14
  %17 = phi i32 [ %15, %14 ], [ 0, %10 ]
  store i32 %17, i32* %5, align 4
  %18 = call i32 @av_find_best_pix_fmt_of_2(i32 %13, i32 %12, i32 %1, i32 %2, i32* nonnull %5) #4
  %19 = add nuw i64 %11, 1
  %20 = getelementptr inbounds i32, i32* %0, i64 %19
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, -1
  br i1 %22, label %23, label %10

23:                                               ; preds = %16, %4
  %24 = phi i32 [ -1, %4 ], [ %18, %16 ]
  br i1 %9, label %25, label %27

25:                                               ; preds = %23
  %26 = load i32, i32* %5, align 4
  store i32 %26, i32* %3, align 4
  br label %27

27:                                               ; preds = %25, %23
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #4
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_picture_crop(%struct.AVPicture* nocapture, %struct.AVPicture* nocapture readonly, i32, i32, i32) local_unnamed_addr #0 {
  %6 = alloca [4 x i32], align 16
  %7 = alloca [4 x i32], align 16
  %8 = tail call %struct.AVPixFmtDescriptor* @av_pix_fmt_desc_get(i32 %2) #4
  %9 = bitcast [4 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #4
  %10 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 0
  %11 = icmp ugt i32 %2, 197
  %12 = bitcast [4 x i32]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 16, i1 false)
  br i1 %11, label %146, label %13

13:                                               ; preds = %5
  %14 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %8, i64 0, i32 3
  %15 = load i8, i8* %14, align 2
  %16 = zext i8 %15 to i32
  %17 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %8, i64 0, i32 2
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  call void @av_image_fill_max_pixsteps(i32* nonnull %10, i32* null, %struct.AVPixFmtDescriptor* %8) #4
  %20 = bitcast [4 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %20) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 0, i64 16, i1 false) #4
  %21 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %8, i64 0, i32 4
  %22 = load i64, i64* %21, align 8
  %23 = and i64 %22, 48
  %24 = icmp eq i64 %23, 16
  br i1 %24, label %25, label %115

25:                                               ; preds = %13
  %26 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %8, i64 0, i32 1
  %27 = load i8, i8* %26, align 8
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %83, label %29

29:                                               ; preds = %25
  %30 = zext i8 %27 to i64
  %31 = add nsw i64 %30, -1
  %32 = and i64 %30, 3
  %33 = icmp ult i64 %31, 3
  br i1 %33, label %61, label %34

34:                                               ; preds = %29
  %35 = sub nsw i64 %30, %32
  br label %36

36:                                               ; preds = %36, %34
  %37 = phi i64 [ 0, %34 ], [ %58, %36 ]
  %38 = phi i64 [ %35, %34 ], [ %59, %36 ]
  %39 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %8, i64 0, i32 5, i64 %37, i32 0
  %40 = load i32, i32* %39, align 8
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %41
  store i32 1, i32* %42, align 4
  %43 = or i64 %37, 1
  %44 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %8, i64 0, i32 5, i64 %43, i32 0
  %45 = load i32, i32* %44, align 8
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %46
  store i32 1, i32* %47, align 4
  %48 = or i64 %37, 2
  %49 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %8, i64 0, i32 5, i64 %48, i32 0
  %50 = load i32, i32* %49, align 8
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %51
  store i32 1, i32* %52, align 4
  %53 = or i64 %37, 3
  %54 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %8, i64 0, i32 5, i64 %53, i32 0
  %55 = load i32, i32* %54, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %56
  store i32 1, i32* %57, align 4
  %58 = add nuw nsw i64 %37, 4
  %59 = add i64 %38, -4
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %36

61:                                               ; preds = %36, %29
  %62 = phi i64 [ 0, %29 ], [ %58, %36 ]
  %63 = icmp eq i64 %32, 0
  br i1 %63, label %74, label %64

64:                                               ; preds = %61, %64
  %65 = phi i64 [ %71, %64 ], [ %62, %61 ]
  %66 = phi i64 [ %72, %64 ], [ %32, %61 ]
  %67 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %8, i64 0, i32 5, i64 %65, i32 0
  %68 = load i32, i32* %67, align 8
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %69
  store i32 1, i32* %70, align 4
  %71 = add nuw nsw i64 %65, 1
  %72 = add i64 %66, -1
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %64, !llvm.loop !2

74:                                               ; preds = %64, %61
  br label %77

75:                                               ; preds = %77
  %76 = icmp eq i64 %82, %30
  br i1 %76, label %83, label %77

77:                                               ; preds = %74, %75
  %78 = phi i64 [ %82, %75 ], [ 0, %74 ]
  %79 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %78
  %80 = load i32, i32* %79, align 4
  %81 = icmp eq i32 %80, 0
  %82 = add nuw nsw i64 %78, 1
  br i1 %81, label %115, label %75

83:                                               ; preds = %75, %25
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %20) #4
  %84 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %1, i64 0, i32 0, i64 0
  %85 = load i8*, i8** %84, align 8
  %86 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %1, i64 0, i32 1, i64 0
  %87 = load i32, i32* %86, align 8
  %88 = mul nsw i32 %87, %3
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %85, i64 %89
  %91 = sext i32 %4 to i64
  %92 = getelementptr inbounds i8, i8* %90, i64 %91
  %93 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %0, i64 0, i32 0, i64 0
  store i8* %92, i8** %93, align 8
  %94 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %1, i64 0, i32 0, i64 1
  %95 = load i8*, i8** %94, align 8
  %96 = ashr i32 %3, %16
  %97 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %1, i64 0, i32 1, i64 1
  %98 = load i32, i32* %97, align 4
  %99 = mul nsw i32 %98, %96
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds i8, i8* %95, i64 %100
  %102 = ashr i32 %4, %19
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds i8, i8* %101, i64 %103
  %105 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %0, i64 0, i32 0, i64 1
  store i8* %104, i8** %105, align 8
  %106 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %1, i64 0, i32 0, i64 2
  %107 = load i8*, i8** %106, align 8
  %108 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %1, i64 0, i32 1, i64 2
  %109 = load i32, i32* %108, align 8
  %110 = mul nsw i32 %109, %96
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i8, i8* %107, i64 %111
  %113 = getelementptr inbounds i8, i8* %112, i64 %103
  %114 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %0, i64 0, i32 0, i64 2
  store i8* %113, i8** %114, align 8
  br label %136

115:                                              ; preds = %77, %13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %20) #4
  %116 = shl nuw i32 1, %16
  %117 = srem i32 %3, %116
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %146

119:                                              ; preds = %115
  %120 = shl nuw i32 1, %19
  %121 = srem i32 %4, %120
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %146

123:                                              ; preds = %119
  %124 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %1, i64 0, i32 0, i64 0
  %125 = load i8*, i8** %124, align 8
  %126 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %1, i64 0, i32 1, i64 0
  %127 = load i32, i32* %126, align 8
  %128 = mul nsw i32 %127, %3
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds i8, i8* %125, i64 %129
  %131 = load i32, i32* %10, align 16
  %132 = mul nsw i32 %131, %4
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds i8, i8* %130, i64 %133
  %135 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %0, i64 0, i32 0, i64 0
  store i8* %134, i8** %135, align 8
  br label %136

136:                                              ; preds = %123, %83
  %137 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %1, i64 0, i32 1, i64 0
  %138 = load i32, i32* %137, align 8
  %139 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %0, i64 0, i32 1, i64 0
  store i32 %138, i32* %139, align 8
  %140 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %1, i64 0, i32 1, i64 1
  %141 = load i32, i32* %140, align 4
  %142 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %0, i64 0, i32 1, i64 1
  store i32 %141, i32* %142, align 4
  %143 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %1, i64 0, i32 1, i64 2
  %144 = load i32, i32* %143, align 8
  %145 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %0, i64 0, i32 1, i64 2
  store i32 %144, i32* %145, align 8
  br label %146

146:                                              ; preds = %115, %119, %5, %136
  %147 = phi i32 [ 0, %136 ], [ -1, %5 ], [ -1, %119 ], [ -1, %115 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #4
  ret i32 %147
}

declare void @av_image_fill_max_pixsteps(i32*, i32*, %struct.AVPixFmtDescriptor*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_picture_pad(%struct.AVPicture* nocapture readonly, %struct.AVPicture* readonly, i32, i32, i32, i32, i32, i32, i32, i32* nocapture readonly) local_unnamed_addr #0 {
  %11 = alloca [4 x i32], align 16
  %12 = alloca [4 x i32], align 16
  %13 = tail call %struct.AVPixFmtDescriptor* @av_pix_fmt_desc_get(i32 %4) #4
  %14 = bitcast [4 x i32]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #4
  %15 = getelementptr inbounds [4 x i32], [4 x i32]* %12, i64 0, i64 0
  %16 = icmp ugt i32 %4, 197
  %17 = bitcast [4 x i32]* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -86, i64 16, i1 false)
  br i1 %16, label %391, label %18

18:                                               ; preds = %10
  %19 = bitcast [4 x i32]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 0, i64 16, i1 false) #4
  %20 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %13, i64 0, i32 4
  %21 = load i64, i64* %20, align 8
  %22 = and i64 %21, 48
  %23 = icmp eq i64 %22, 16
  br i1 %23, label %24, label %99

24:                                               ; preds = %18
  %25 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %13, i64 0, i32 1
  %26 = load i8, i8* %25, align 8
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %82, label %28

28:                                               ; preds = %24
  %29 = zext i8 %26 to i64
  %30 = add nsw i64 %29, -1
  %31 = and i64 %29, 3
  %32 = icmp ult i64 %30, 3
  br i1 %32, label %60, label %33

33:                                               ; preds = %28
  %34 = sub nsw i64 %29, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %57, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %58, %35 ]
  %38 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %13, i64 0, i32 5, i64 %36, i32 0
  %39 = load i32, i32* %38, align 8
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %40
  store i32 1, i32* %41, align 4
  %42 = or i64 %36, 1
  %43 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %13, i64 0, i32 5, i64 %42, i32 0
  %44 = load i32, i32* %43, align 8
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %45
  store i32 1, i32* %46, align 4
  %47 = or i64 %36, 2
  %48 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %13, i64 0, i32 5, i64 %47, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %50
  store i32 1, i32* %51, align 4
  %52 = or i64 %36, 3
  %53 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %13, i64 0, i32 5, i64 %52, i32 0
  %54 = load i32, i32* %53, align 8
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %55
  store i32 1, i32* %56, align 4
  %57 = add nuw nsw i64 %36, 4
  %58 = add i64 %37, -4
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %35

60:                                               ; preds = %35, %28
  %61 = phi i64 [ 0, %28 ], [ %57, %35 ]
  %62 = icmp eq i64 %31, 0
  br i1 %62, label %73, label %63

63:                                               ; preds = %60, %63
  %64 = phi i64 [ %70, %63 ], [ %61, %60 ]
  %65 = phi i64 [ %71, %63 ], [ %31, %60 ]
  %66 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %13, i64 0, i32 5, i64 %64, i32 0
  %67 = load i32, i32* %66, align 8
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %68
  store i32 1, i32* %69, align 4
  %70 = add nuw nsw i64 %64, 1
  %71 = add i64 %65, -1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %63, !llvm.loop !4

73:                                               ; preds = %63, %60
  br label %76

74:                                               ; preds = %76
  %75 = icmp eq i64 %81, %29
  br i1 %75, label %82, label %76

76:                                               ; preds = %73, %74
  %77 = phi i64 [ %81, %74 ], [ 0, %73 ]
  %78 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %77
  %79 = load i32, i32* %78, align 4
  %80 = icmp eq i32 %79, 0
  %81 = add nuw nsw i64 %77, 1
  br i1 %80, label %99, label %74

82:                                               ; preds = %74, %24
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #4
  %83 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %13, i64 0, i32 2
  %84 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %13, i64 0, i32 3
  %85 = or i32 %7, %5
  %86 = icmp eq i32 %85, 0
  %87 = or i32 %8, %7
  %88 = icmp eq i32 %87, 0
  %89 = add nsw i32 %6, %5
  %90 = xor i32 %89, -1
  %91 = add i32 %90, %2
  %92 = add nsw i32 %8, %7
  %93 = icmp eq %struct.AVPicture* %1, null
  %94 = sub i32 %3, %7
  %95 = sub i32 %94, %8
  %96 = or i32 %8, %6
  %97 = icmp eq i32 %96, 0
  %98 = sub nsw i32 %2, %6
  br label %208

99:                                               ; preds = %76, %18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #4
  %100 = icmp eq %struct.AVPicture* %1, null
  br i1 %100, label %101, label %391

101:                                              ; preds = %99
  call void @av_image_fill_max_pixsteps(i32* nonnull %15, i32* null, %struct.AVPixFmtDescriptor* %13) #4
  %102 = or i32 %7, %5
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %116, label %104

104:                                              ; preds = %101
  %105 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %0, i64 0, i32 0, i64 0
  %106 = load i8*, i8** %105, align 8
  %107 = load i32, i32* %9, align 4
  %108 = trunc i32 %107 to i8
  %109 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %0, i64 0, i32 1, i64 0
  %110 = load i32, i32* %109, align 8
  %111 = mul nsw i32 %110, %5
  %112 = load i32, i32* %15, align 16
  %113 = mul nsw i32 %112, %7
  %114 = add nsw i32 %113, %111
  %115 = sext i32 %114 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %106, i8 %108, i64 %115, i1 false)
  br label %116

116:                                              ; preds = %101, %104
  %117 = or i32 %8, %7
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %186, label %119

119:                                              ; preds = %116
  %120 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %0, i64 0, i32 1, i64 0
  %121 = load i32, i32* %120, align 8
  %122 = add nsw i32 %6, %5
  %123 = xor i32 %122, -1
  %124 = add i32 %123, %2
  %125 = icmp sgt i32 %124, 0
  br i1 %125, label %126, label %186

126:                                              ; preds = %119
  %127 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %0, i64 0, i32 0, i64 0
  %128 = load i8*, i8** %127, align 8
  %129 = mul nsw i32 %121, %5
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds i8, i8* %128, i64 %130
  %132 = load i32, i32* %15, align 16
  %133 = mul nsw i32 %132, %8
  %134 = sub nsw i32 %121, %133
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds i8, i8* %131, i64 %135
  %137 = add nsw i32 %8, %7
  %138 = load i32, i32* %9, align 4
  %139 = trunc i32 %138 to i8
  %140 = mul nsw i32 %132, %137
  %141 = sext i32 %140 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %136, i8 %139, i64 %141, i1 false)
  %142 = icmp eq i32 %124, 1
  br i1 %142, label %186, label %143

143:                                              ; preds = %126
  %144 = add i32 %2, -2
  %145 = sub i32 %144, %6
  %146 = sub i32 %145, %5
  %147 = add i32 %2, -3
  %148 = sub i32 %147, %6
  %149 = and i32 %146, 1
  %150 = icmp eq i32 %148, %5
  br i1 %150, label %174, label %151

151:                                              ; preds = %143
  %152 = sub i32 %146, %149
  br label %153

153:                                              ; preds = %153, %151
  %154 = phi i8* [ %136, %151 ], [ %166, %153 ]
  %155 = phi i32 [ %152, %151 ], [ %172, %153 ]
  %156 = load i32, i32* %120, align 8
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds i8, i8* %154, i64 %157
  %159 = load i32, i32* %15, align 16
  %160 = load i32, i32* %9, align 4
  %161 = trunc i32 %160 to i8
  %162 = mul nsw i32 %159, %137
  %163 = sext i32 %162 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %158, i8 %161, i64 %163, i1 false)
  %164 = load i32, i32* %120, align 8
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds i8, i8* %158, i64 %165
  %167 = load i32, i32* %15, align 16
  %168 = load i32, i32* %9, align 4
  %169 = trunc i32 %168 to i8
  %170 = mul nsw i32 %167, %137
  %171 = sext i32 %170 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %166, i8 %169, i64 %171, i1 false)
  %172 = add i32 %155, -2
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %174, label %153

174:                                              ; preds = %153, %143
  %175 = phi i8* [ %136, %143 ], [ %166, %153 ]
  %176 = icmp eq i32 %149, 0
  br i1 %176, label %186, label %177

177:                                              ; preds = %174
  %178 = load i32, i32* %120, align 8
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds i8, i8* %175, i64 %179
  %181 = load i32, i32* %15, align 16
  %182 = load i32, i32* %9, align 4
  %183 = trunc i32 %182 to i8
  %184 = mul nsw i32 %181, %137
  %185 = sext i32 %184 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %180, i8 %183, i64 %185, i1 false)
  br label %186

186:                                              ; preds = %177, %174, %126, %119, %116
  %187 = or i32 %8, %6
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %391, label %189

189:                                              ; preds = %186
  %190 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %0, i64 0, i32 0, i64 0
  %191 = load i8*, i8** %190, align 8
  %192 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %0, i64 0, i32 1, i64 0
  %193 = load i32, i32* %192, align 8
  %194 = sub nsw i32 %2, %6
  %195 = mul nsw i32 %193, %194
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds i8, i8* %191, i64 %196
  %198 = load i32, i32* %15, align 16
  %199 = mul nsw i32 %198, %8
  %200 = sext i32 %199 to i64
  %201 = sub nsw i64 0, %200
  %202 = getelementptr inbounds i8, i8* %197, i64 %201
  %203 = load i32, i32* %9, align 4
  %204 = trunc i32 %203 to i8
  %205 = mul nsw i32 %193, %6
  %206 = add nsw i32 %199, %205
  %207 = sext i32 %206 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %202, i8 %204, i64 %207, i1 false)
  br label %391

208:                                              ; preds = %388, %82
  %209 = phi i64 [ 0, %82 ], [ %389, %388 ]
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %216, label %211

211:                                              ; preds = %208
  %212 = load i8, i8* %83, align 1
  %213 = zext i8 %212 to i32
  %214 = load i8, i8* %84, align 2
  %215 = zext i8 %214 to i32
  br label %216

216:                                              ; preds = %208, %211
  %217 = phi i32 [ %213, %211 ], [ 0, %208 ]
  %218 = phi i32 [ %215, %211 ], [ 0, %208 ]
  br i1 %86, label %232, label %219

219:                                              ; preds = %216
  %220 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %0, i64 0, i32 0, i64 %209
  %221 = load i8*, i8** %220, align 8
  %222 = getelementptr inbounds i32, i32* %9, i64 %209
  %223 = load i32, i32* %222, align 4
  %224 = trunc i32 %223 to i8
  %225 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %0, i64 0, i32 1, i64 %209
  %226 = load i32, i32* %225, align 4
  %227 = ashr i32 %5, %218
  %228 = mul nsw i32 %226, %227
  %229 = ashr i32 %7, %217
  %230 = add nsw i32 %228, %229
  %231 = sext i32 %230 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %221, i8 %224, i64 %231, i1 false)
  br label %232

232:                                              ; preds = %216, %219
  br i1 %88, label %295, label %233

233:                                              ; preds = %232
  %234 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %0, i64 0, i32 1, i64 %209
  %235 = load i32, i32* %234, align 4
  %236 = ashr i32 %91, %218
  %237 = icmp sgt i32 %236, 0
  br i1 %237, label %238, label %295

238:                                              ; preds = %233
  %239 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %0, i64 0, i32 0, i64 %209
  %240 = load i8*, i8** %239, align 8
  %241 = ashr i32 %5, %218
  %242 = mul nsw i32 %235, %241
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds i8, i8* %240, i64 %243
  %245 = ashr i32 %8, %217
  %246 = sub nsw i32 %235, %245
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds i8, i8* %244, i64 %247
  %249 = getelementptr inbounds i32, i32* %9, i64 %209
  %250 = ashr i32 %92, %217
  %251 = sext i32 %250 to i64
  %252 = add i32 %236, -1
  %253 = and i32 %236, 3
  %254 = icmp ult i32 %252, 3
  br i1 %254, label %282, label %255

255:                                              ; preds = %238
  %256 = sub i32 %236, %253
  br label %257

257:                                              ; preds = %257, %255
  %258 = phi i8* [ %248, %255 ], [ %279, %257 ]
  %259 = phi i32 [ %256, %255 ], [ %280, %257 ]
  %260 = load i32, i32* %249, align 4
  %261 = trunc i32 %260 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %258, i8 %261, i64 %251, i1 false)
  %262 = load i32, i32* %234, align 4
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds i8, i8* %258, i64 %263
  %265 = load i32, i32* %249, align 4
  %266 = trunc i32 %265 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %264, i8 %266, i64 %251, i1 false)
  %267 = load i32, i32* %234, align 4
  %268 = sext i32 %267 to i64
  %269 = getelementptr inbounds i8, i8* %264, i64 %268
  %270 = load i32, i32* %249, align 4
  %271 = trunc i32 %270 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %269, i8 %271, i64 %251, i1 false)
  %272 = load i32, i32* %234, align 4
  %273 = sext i32 %272 to i64
  %274 = getelementptr inbounds i8, i8* %269, i64 %273
  %275 = load i32, i32* %249, align 4
  %276 = trunc i32 %275 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %274, i8 %276, i64 %251, i1 false)
  %277 = load i32, i32* %234, align 4
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds i8, i8* %274, i64 %278
  %280 = add i32 %259, -4
  %281 = icmp eq i32 %280, 0
  br i1 %281, label %282, label %257

282:                                              ; preds = %257, %238
  %283 = phi i8* [ %248, %238 ], [ %279, %257 ]
  %284 = icmp eq i32 %253, 0
  br i1 %284, label %295, label %285

285:                                              ; preds = %282, %285
  %286 = phi i8* [ %292, %285 ], [ %283, %282 ]
  %287 = phi i32 [ %293, %285 ], [ %253, %282 ]
  %288 = load i32, i32* %249, align 4
  %289 = trunc i32 %288 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %286, i8 %289, i64 %251, i1 false)
  %290 = load i32, i32* %234, align 4
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds i8, i8* %286, i64 %291
  %293 = add i32 %287, -1
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %295, label %285, !llvm.loop !5

295:                                              ; preds = %282, %285, %233, %232
  br i1 %93, label %367, label %296

296:                                              ; preds = %295
  %297 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %1, i64 0, i32 0, i64 %209
  %298 = load i8*, i8** %297, align 8
  %299 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %0, i64 0, i32 0, i64 %209
  %300 = load i8*, i8** %299, align 8
  %301 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %0, i64 0, i32 1, i64 %209
  %302 = load i32, i32* %301, align 4
  %303 = ashr i32 %5, %218
  %304 = mul nsw i32 %302, %303
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds i8, i8* %300, i64 %305
  %307 = ashr i32 %7, %217
  %308 = sext i32 %307 to i64
  %309 = getelementptr inbounds i8, i8* %306, i64 %308
  %310 = ashr i32 %95, %217
  %311 = sext i32 %310 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %309, i8* align 1 %298, i64 %311, i1 false)
  %312 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %1, i64 0, i32 1, i64 %209
  %313 = load i32, i32* %301, align 4
  %314 = ashr i32 %91, %218
  %315 = icmp sgt i32 %314, 0
  br i1 %315, label %316, label %367

316:                                              ; preds = %296
  %317 = load i8*, i8** %299, align 8
  %318 = mul nsw i32 %313, %303
  %319 = sext i32 %318 to i64
  %320 = getelementptr inbounds i8, i8* %317, i64 %319
  %321 = ashr i32 %8, %217
  %322 = sub nsw i32 %313, %321
  %323 = sext i32 %322 to i64
  %324 = getelementptr inbounds i8, i8* %320, i64 %323
  %325 = load i32, i32* %312, align 4
  %326 = sext i32 %325 to i64
  %327 = getelementptr inbounds i8, i8* %298, i64 %326
  %328 = getelementptr inbounds i32, i32* %9, i64 %209
  %329 = ashr i32 %92, %217
  %330 = sext i32 %329 to i64
  %331 = and i32 %314, 1
  %332 = icmp eq i32 %314, 1
  br i1 %332, label %359, label %333

333:                                              ; preds = %316
  %334 = sub i32 %314, %331
  br label %335

335:                                              ; preds = %335, %333
  %336 = phi i8* [ %327, %333 ], [ %353, %335 ]
  %337 = phi i8* [ %324, %333 ], [ %356, %335 ]
  %338 = phi i32 [ %334, %333 ], [ %357, %335 ]
  %339 = load i32, i32* %328, align 4
  %340 = trunc i32 %339 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %337, i8 %340, i64 %330, i1 false)
  %341 = getelementptr inbounds i8, i8* %337, i64 %330
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %341, i8* align 1 %336, i64 %311, i1 false)
  %342 = load i32, i32* %312, align 4
  %343 = sext i32 %342 to i64
  %344 = getelementptr inbounds i8, i8* %336, i64 %343
  %345 = load i32, i32* %301, align 4
  %346 = sext i32 %345 to i64
  %347 = getelementptr inbounds i8, i8* %337, i64 %346
  %348 = load i32, i32* %328, align 4
  %349 = trunc i32 %348 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %347, i8 %349, i64 %330, i1 false)
  %350 = getelementptr inbounds i8, i8* %347, i64 %330
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %350, i8* align 1 %344, i64 %311, i1 false)
  %351 = load i32, i32* %312, align 4
  %352 = sext i32 %351 to i64
  %353 = getelementptr inbounds i8, i8* %344, i64 %352
  %354 = load i32, i32* %301, align 4
  %355 = sext i32 %354 to i64
  %356 = getelementptr inbounds i8, i8* %347, i64 %355
  %357 = add i32 %338, -2
  %358 = icmp eq i32 %357, 0
  br i1 %358, label %359, label %335

359:                                              ; preds = %335, %316
  %360 = phi i8* [ %327, %316 ], [ %353, %335 ]
  %361 = phi i8* [ %324, %316 ], [ %356, %335 ]
  %362 = icmp eq i32 %331, 0
  br i1 %362, label %367, label %363

363:                                              ; preds = %359
  %364 = load i32, i32* %328, align 4
  %365 = trunc i32 %364 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %361, i8 %365, i64 %330, i1 false)
  %366 = getelementptr inbounds i8, i8* %361, i64 %330
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %366, i8* align 1 %360, i64 %311, i1 false)
  br label %367

367:                                              ; preds = %363, %359, %296, %295
  br i1 %97, label %388, label %368

368:                                              ; preds = %367
  %369 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %0, i64 0, i32 0, i64 %209
  %370 = load i8*, i8** %369, align 8
  %371 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %0, i64 0, i32 1, i64 %209
  %372 = load i32, i32* %371, align 4
  %373 = ashr i32 %98, %218
  %374 = mul nsw i32 %372, %373
  %375 = sext i32 %374 to i64
  %376 = getelementptr inbounds i8, i8* %370, i64 %375
  %377 = ashr i32 %8, %217
  %378 = sext i32 %377 to i64
  %379 = sub nsw i64 0, %378
  %380 = getelementptr inbounds i8, i8* %376, i64 %379
  %381 = getelementptr inbounds i32, i32* %9, i64 %209
  %382 = load i32, i32* %381, align 4
  %383 = trunc i32 %382 to i8
  %384 = ashr i32 %6, %218
  %385 = mul nsw i32 %372, %384
  %386 = add nsw i32 %385, %377
  %387 = sext i32 %386 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %380, i8 %383, i64 %387, i1 false)
  br label %388

388:                                              ; preds = %367, %368
  %389 = add nuw nsw i64 %209, 1
  %390 = icmp eq i64 %389, 3
  br i1 %390, label %391, label %208

391:                                              ; preds = %388, %189, %186, %99, %10
  %392 = phi i32 [ -1, %10 ], [ -1, %99 ], [ 0, %186 ], [ 0, %189 ], [ 0, %388 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #4
  ret i32 %392
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
