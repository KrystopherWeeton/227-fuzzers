; ModuleID = '../../chrome/browser/task_manager/task_manager_observer.cc'
source_filename = "../../chrome/browser/task_manager/task_manager_observer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.task_manager::TaskManagerObserver" = type { i32 (...)**, %"class.task_manager::TaskManagerInterface"*, %"class.base::TimeDelta", i64 }
%"class.task_manager::TaskManagerInterface" = type { i32 (...)**, %"class.base::ObserverList", %"class.std::__1::unique_ptr", i64 }
%"class.base::ObserverList" = type <{ %"class.std::__1::vector", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.base::RepeatingTimer"* }
%"class.base::RepeatingTimer" = type { %"class.base::internal::TimerBase", %"class.base::RepeatingCallback" }
%"class.base::internal::TimerBase" = type { i32 (...)**, %class.scoped_refptr, %"class.base::SequenceCheckerDoNothing", %"class.base::internal::TaskDestructionDetector"*, %"class.base::Location", %"class.base::TimeDelta", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TickClock"*, i8, %"class.base::WeakPtrFactory" }
%class.scoped_refptr = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.base::internal::TaskDestructionDetector" = type opaque
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::TickClock" = type opaque
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.4 }
%class.scoped_refptr.4 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.5", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.5" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.6" }
%"struct.std::__1::atomic.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__atomic_base.8" }
%"struct.std::__1::__atomic_base.8" = type { %"struct.std::__1::__cxx_atomic_impl.9" }
%"struct.std::__1::__cxx_atomic_impl.9" = type { %"struct.std::__1::__cxx_atomic_base_impl.10" }
%"struct.std::__1::__cxx_atomic_base_impl.10" = type { i8 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.11 }
%class.scoped_refptr.11 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.12", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.12" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::vector.14" = type opaque

$_ZN12task_manager19TaskManagerObserver11OnTaskAddedEl = comdat any

$_ZN12task_manager19TaskManagerObserver17OnTaskToBeRemovedEl = comdat any

$_ZN12task_manager19TaskManagerObserver16OnTasksRefreshedERKNSt3__16vectorIlNS1_9allocatorIlEEEE = comdat any

$_ZN12task_manager19TaskManagerObserver42OnTasksRefreshedWithBackgroundCalculationsERKNSt3__16vectorIlNS1_9allocatorIlEEEE = comdat any

$_ZN12task_manager19TaskManagerObserver18OnTaskUnresponsiveEl = comdat any

@_ZTVN12task_manager19TaskManagerObserverE = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.task_manager::TaskManagerObserver"*)* @_ZN12task_manager19TaskManagerObserverD2Ev to i8*), i8* bitcast (void (%"class.task_manager::TaskManagerObserver"*)* @_ZN12task_manager19TaskManagerObserverD0Ev to i8*), i8* bitcast (void (%"class.task_manager::TaskManagerObserver"*, i64)* @_ZN12task_manager19TaskManagerObserver11OnTaskAddedEl to i8*), i8* bitcast (void (%"class.task_manager::TaskManagerObserver"*, i64)* @_ZN12task_manager19TaskManagerObserver17OnTaskToBeRemovedEl to i8*), i8* bitcast (void (%"class.task_manager::TaskManagerObserver"*, %"class.std::__1::vector.14"*)* @_ZN12task_manager19TaskManagerObserver16OnTasksRefreshedERKNSt3__16vectorIlNS1_9allocatorIlEEEE to i8*), i8* bitcast (void (%"class.task_manager::TaskManagerObserver"*, %"class.std::__1::vector.14"*)* @_ZN12task_manager19TaskManagerObserver42OnTasksRefreshedWithBackgroundCalculationsERKNSt3__16vectorIlNS1_9allocatorIlEEEE to i8*), i8* bitcast (void (%"class.task_manager::TaskManagerObserver"*, i64)* @_ZN12task_manager19TaskManagerObserver18OnTaskUnresponsiveEl to i8*)] }, align 8

@_ZN12task_manager19TaskManagerObserverC1EN4base9TimeDeltaEl = hidden unnamed_addr alias void (%"class.task_manager::TaskManagerObserver"*, i64, i64), void (%"class.task_manager::TaskManagerObserver"*, i64, i64)* @_ZN12task_manager19TaskManagerObserverC2EN4base9TimeDeltaEl
@_ZN12task_manager19TaskManagerObserverD1Ev = hidden unnamed_addr alias void (%"class.task_manager::TaskManagerObserver"*), void (%"class.task_manager::TaskManagerObserver"*)* @_ZN12task_manager19TaskManagerObserverD2Ev

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN12task_manager19TaskManagerObserver24IsResourceRefreshEnabledENS_11RefreshTypeEi(i32, i32) local_unnamed_addr #0 align 2 {
  %3 = and i32 %1, %0
  %4 = icmp ne i32 %3, 0
  ret i1 %4
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN12task_manager19TaskManagerObserverC2EN4base9TimeDeltaEl(%"class.task_manager::TaskManagerObserver"* nocapture, i64, i64) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.task_manager::TaskManagerObserver", %"class.task_manager::TaskManagerObserver"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN12task_manager19TaskManagerObserverE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.task_manager::TaskManagerObserver", %"class.task_manager::TaskManagerObserver"* %0, i64 0, i32 1
  store %"class.task_manager::TaskManagerInterface"* null, %"class.task_manager::TaskManagerInterface"** %5, align 8
  %6 = getelementptr inbounds %"class.task_manager::TaskManagerObserver", %"class.task_manager::TaskManagerObserver"* %0, i64 0, i32 2, i32 0
  %7 = icmp sgt i64 %1, 1000000
  %8 = select i1 %7, i64 %1, i64 1000000
  store i64 %8, i64* %6, align 8
  %9 = getelementptr inbounds %"class.task_manager::TaskManagerObserver", %"class.task_manager::TaskManagerObserver"* %0, i64 0, i32 3
  store i64 %2, i64* %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12task_manager19TaskManagerObserverD2Ev(%"class.task_manager::TaskManagerObserver"*) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.task_manager::TaskManagerObserver", %"class.task_manager::TaskManagerObserver"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN12task_manager19TaskManagerObserverE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.task_manager::TaskManagerObserver", %"class.task_manager::TaskManagerObserver"* %0, i64 0, i32 1
  %4 = load %"class.task_manager::TaskManagerInterface"*, %"class.task_manager::TaskManagerInterface"** %3, align 8
  %5 = icmp eq %"class.task_manager::TaskManagerInterface"* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZN12task_manager20TaskManagerInterface14RemoveObserverEPNS_19TaskManagerObserverE(%"class.task_manager::TaskManagerInterface"* nonnull %4, %"class.task_manager::TaskManagerObserver"* %0) #5
  br label %7

7:                                                ; preds = %1, %6
  ret void
}

declare void @_ZN12task_manager20TaskManagerInterface14RemoveObserverEPNS_19TaskManagerObserverE(%"class.task_manager::TaskManagerInterface"*, %"class.task_manager::TaskManagerObserver"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12task_manager19TaskManagerObserverD0Ev(%"class.task_manager::TaskManagerObserver"*) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.task_manager::TaskManagerObserver", %"class.task_manager::TaskManagerObserver"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN12task_manager19TaskManagerObserverE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.task_manager::TaskManagerObserver", %"class.task_manager::TaskManagerObserver"* %0, i64 0, i32 1
  %4 = load %"class.task_manager::TaskManagerInterface"*, %"class.task_manager::TaskManagerInterface"** %3, align 8
  %5 = icmp eq %"class.task_manager::TaskManagerInterface"* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZN12task_manager20TaskManagerInterface14RemoveObserverEPNS_19TaskManagerObserverE(%"class.task_manager::TaskManagerInterface"* nonnull %4, %"class.task_manager::TaskManagerObserver"* %0) #5
  br label %7

7:                                                ; preds = %1, %6
  %8 = bitcast %"class.task_manager::TaskManagerObserver"* %0 to i8*
  tail call void @_ZdlPv(i8* %8) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12task_manager19TaskManagerObserver14AddRefreshTypeENS_11RefreshTypeE(%"class.task_manager::TaskManagerObserver"* nocapture, i32) local_unnamed_addr #2 align 2 {
  %3 = zext i32 %1 to i64
  %4 = getelementptr inbounds %"class.task_manager::TaskManagerObserver", %"class.task_manager::TaskManagerObserver"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = or i64 %5, %3
  store i64 %6, i64* %4, align 8
  %7 = getelementptr inbounds %"class.task_manager::TaskManagerObserver", %"class.task_manager::TaskManagerObserver"* %0, i64 0, i32 1
  %8 = load %"class.task_manager::TaskManagerInterface"*, %"class.task_manager::TaskManagerInterface"** %7, align 8
  %9 = icmp eq %"class.task_manager::TaskManagerInterface"* %8, null
  br i1 %9, label %11, label %10

10:                                               ; preds = %2
  tail call void @_ZN12task_manager20TaskManagerInterface23RecalculateRefreshFlagsEv(%"class.task_manager::TaskManagerInterface"* nonnull %8) #5
  br label %11

11:                                               ; preds = %2, %10
  ret void
}

declare void @_ZN12task_manager20TaskManagerInterface23RecalculateRefreshFlagsEv(%"class.task_manager::TaskManagerInterface"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12task_manager19TaskManagerObserver17RemoveRefreshTypeENS_11RefreshTypeE(%"class.task_manager::TaskManagerObserver"* nocapture, i32) local_unnamed_addr #2 align 2 {
  %3 = xor i32 %1, -1
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds %"class.task_manager::TaskManagerObserver", %"class.task_manager::TaskManagerObserver"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, %4
  store i64 %7, i64* %5, align 8
  %8 = getelementptr inbounds %"class.task_manager::TaskManagerObserver", %"class.task_manager::TaskManagerObserver"* %0, i64 0, i32 1
  %9 = load %"class.task_manager::TaskManagerInterface"*, %"class.task_manager::TaskManagerInterface"** %8, align 8
  %10 = icmp eq %"class.task_manager::TaskManagerInterface"* %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %2
  tail call void @_ZN12task_manager20TaskManagerInterface23RecalculateRefreshFlagsEv(%"class.task_manager::TaskManagerInterface"* nonnull %9) #5
  br label %12

12:                                               ; preds = %2, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12task_manager19TaskManagerObserver20SetRefreshTypesFlagsEl(%"class.task_manager::TaskManagerObserver"* nocapture, i64) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.task_manager::TaskManagerObserver", %"class.task_manager::TaskManagerObserver"* %0, i64 0, i32 3
  store i64 %1, i64* %3, align 8
  %4 = getelementptr inbounds %"class.task_manager::TaskManagerObserver", %"class.task_manager::TaskManagerObserver"* %0, i64 0, i32 1
  %5 = load %"class.task_manager::TaskManagerInterface"*, %"class.task_manager::TaskManagerInterface"** %4, align 8
  %6 = icmp eq %"class.task_manager::TaskManagerInterface"* %5, null
  br i1 %6, label %8, label %7

7:                                                ; preds = %2
  tail call void @_ZN12task_manager20TaskManagerInterface23RecalculateRefreshFlagsEv(%"class.task_manager::TaskManagerInterface"* nonnull %5) #5
  br label %8

8:                                                ; preds = %2, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12task_manager19TaskManagerObserver11OnTaskAddedEl(%"class.task_manager::TaskManagerObserver"*, i64) unnamed_addr #2 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12task_manager19TaskManagerObserver17OnTaskToBeRemovedEl(%"class.task_manager::TaskManagerObserver"*, i64) unnamed_addr #2 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12task_manager19TaskManagerObserver16OnTasksRefreshedERKNSt3__16vectorIlNS1_9allocatorIlEEEE(%"class.task_manager::TaskManagerObserver"*, %"class.std::__1::vector.14"*) unnamed_addr #2 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12task_manager19TaskManagerObserver42OnTasksRefreshedWithBackgroundCalculationsERKNSt3__16vectorIlNS1_9allocatorIlEEEE(%"class.task_manager::TaskManagerObserver"*, %"class.std::__1::vector.14"*) unnamed_addr #2 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12task_manager19TaskManagerObserver18OnTaskUnresponsiveEl(%"class.task_manager::TaskManagerObserver"*, i64) unnamed_addr #2 comdat align 2 {
  ret void
}

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
