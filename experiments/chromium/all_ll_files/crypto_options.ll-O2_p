; ModuleID = '../../third_party/webrtc/api/crypto/crypto_options.cc'
source_filename = "../../third_party/webrtc/api/crypto/crypto_options.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.webrtc::CryptoOptions" = type { %"struct.webrtc::CryptoOptions::Srtp", %"struct.webrtc::CryptoOptions::SFrame" }
%"struct.webrtc::CryptoOptions::Srtp" = type { i8, i8, i8, i8 }
%"struct.webrtc::CryptoOptions::SFrame" = type { i8 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t = comdat any

@.str = private unnamed_addr constant [54 x i8] c"../../third_party/webrtc/api/crypto/crypto_options.cc\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"!crypto_suites.empty()\00", align 1
@_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t = linkonce_odr hidden constant [1 x i8] zeroinitializer, comdat, align 1

@_ZN6webrtc13CryptoOptionsC1Ev = hidden unnamed_addr alias void (%"struct.webrtc::CryptoOptions"*), void (%"struct.webrtc::CryptoOptions"*)* @_ZN6webrtc13CryptoOptionsC2Ev
@_ZN6webrtc13CryptoOptionsC1ERKS0_ = hidden unnamed_addr alias void (%"struct.webrtc::CryptoOptions"*, %"struct.webrtc::CryptoOptions"*), void (%"struct.webrtc::CryptoOptions"*, %"struct.webrtc::CryptoOptions"*)* @_ZN6webrtc13CryptoOptionsC2ERKS0_
@_ZN6webrtc13CryptoOptionsD1Ev = hidden unnamed_addr alias void (%"struct.webrtc::CryptoOptions"*), void (%"struct.webrtc::CryptoOptions"*)* @_ZN6webrtc13CryptoOptionsD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc13CryptoOptionsC2Ev(%"struct.webrtc::CryptoOptions"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %0, i64 0, i32 0, i32 0
  store i8 0, i8* %2, align 1
  %3 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %0, i64 0, i32 0, i32 1
  store i8 0, i8* %3, align 1
  %4 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %0, i64 0, i32 0, i32 2
  store i8 1, i8* %4, align 1
  %5 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %0, i64 0, i32 0, i32 3
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %0, i64 0, i32 1, i32 0
  store i8 0, i8* %6, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6webrtc13CryptoOptionsC2ERKS0_(%"struct.webrtc::CryptoOptions"* nocapture, %"struct.webrtc::CryptoOptions"* nocapture readonly dereferenceable(5)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %0, i64 0, i32 0, i32 0
  store i8 0, i8* %3, align 1
  %4 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %0, i64 0, i32 0, i32 1
  store i8 0, i8* %4, align 1
  %5 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %0, i64 0, i32 0, i32 2
  store i8 1, i8* %5, align 1
  %6 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %0, i64 0, i32 0, i32 3
  store i8 0, i8* %6, align 1
  %7 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %0, i64 0, i32 1, i32 0
  store i8 0, i8* %7, align 1
  %8 = bitcast %"struct.webrtc::CryptoOptions"* %1 to i32*
  %9 = bitcast %"struct.webrtc::CryptoOptions"* %0 to i32*
  %10 = load i32, i32* %8, align 1
  store i32 %10, i32* %9, align 1
  %11 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %1, i64 0, i32 1, i32 0
  %12 = load i8, i8* %11, align 1
  store i8 %12, i8* %7, align 1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN6webrtc13CryptoOptionsD2Ev(%"struct.webrtc::CryptoOptions"* nocapture) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc13CryptoOptions5NoGcmEv(%"struct.webrtc::CryptoOptions"* noalias nocapture sret) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %0, i64 0, i32 0, i32 0
  %3 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %0, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %0, i64 0, i32 0, i32 2
  %5 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %0, i64 0, i32 0, i32 3
  %6 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %0, i64 0, i32 1, i32 0
  store i8 0, i8* %3, align 1
  store i8 1, i8* %4, align 1
  store i8 0, i8* %5, align 1
  store i8 0, i8* %6, align 1
  store i8 0, i8* %2, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6webrtc13CryptoOptions32GetSupportedDtlsSrtpCryptoSuitesEv(%"class.std::__1::vector"* noalias sret, %"struct.webrtc::CryptoOptions"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %6 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #10
  %7 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %1, i64 0, i32 0, i32 1
  %8 = load i8, i8* %7, align 1, !range !2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %20, label %10

10:                                               ; preds = %2
  %11 = bitcast i32** %4 to i64*
  %12 = bitcast %"class.std::__1::vector"* %0 to i64*
  %13 = bitcast i32** %5 to i64*
  %14 = tail call i8* @_Znwm(i64 4) #11
  %15 = bitcast i8* %14 to i32*
  %16 = getelementptr inbounds i8, i8* %14, i64 4
  %17 = bitcast i8* %16 to i32*
  %18 = ptrtoint i8* %16 to i64
  store i32 2, i32* %15, align 4
  %19 = ptrtoint i8* %14 to i64
  store i64 %19, i64* %12, align 8
  store i64 %18, i64* %11, align 8
  store i64 %18, i64* %13, align 8
  br label %20

20:                                               ; preds = %10, %2
  %21 = phi i64 [ %18, %10 ], [ 0, %2 ]
  %22 = phi i8* [ %14, %10 ], [ null, %2 ]
  %23 = phi i32* [ %15, %10 ], [ null, %2 ]
  %24 = phi i64 [ %19, %10 ], [ 0, %2 ]
  %25 = phi i32* [ %17, %10 ], [ null, %2 ]
  %26 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %1, i64 0, i32 0, i32 2
  %27 = load i8, i8* %26, align 1, !range !2
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %75, label %29

29:                                               ; preds = %20
  %30 = ptrtoint i32* %25 to i64
  %31 = bitcast i32** %4 to i64*
  %32 = bitcast %"class.std::__1::vector"* %0 to i64*
  %33 = sub i64 %30, %24
  %34 = ashr exact i64 %33, 2
  %35 = add nsw i64 %34, 1
  %36 = icmp ugt i64 %35, 4611686018427387903
  br i1 %36, label %37, label %39

37:                                               ; preds = %29
  %38 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #12
  unreachable

39:                                               ; preds = %29
  %40 = bitcast i32** %5 to i64*
  %41 = icmp ult i64 %34, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %39
  %43 = ashr exact i64 %33, 1
  %44 = icmp ult i64 %43, %35
  %45 = select i1 %44, i64 %35, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #12
  unreachable

50:                                               ; preds = %47, %39
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %39 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #11
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %34
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = ptrtoint i32* %59 to i64
  store i32 1, i32* %58, align 4
  %61 = getelementptr inbounds i32, i32* %58, i64 1
  %62 = ptrtoint i32* %61 to i64
  %63 = ptrtoint i32* %23 to i64
  %64 = sub i64 %21, %63
  %65 = ashr exact i64 %64, 2
  %66 = sub nsw i64 0, %65
  %67 = getelementptr inbounds i32, i32* %58, i64 %66
  %68 = ptrtoint i32* %67 to i64
  %69 = icmp sgt i64 %64, 0
  br i1 %69, label %70, label %72

70:                                               ; preds = %55
  %71 = bitcast i32* %67 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %71, i8* align 4 %22, i64 %64, i1 false) #10
  br label %72

72:                                               ; preds = %70, %55
  store i64 %68, i64* %32, align 8
  store i64 %62, i64* %31, align 8
  store i64 %60, i64* %40, align 8
  %73 = icmp eq i32* %23, null
  br i1 %73, label %75, label %74

74:                                               ; preds = %72
  tail call void @_ZdlPv(i8* %22) #11
  br label %75

75:                                               ; preds = %74, %72, %20
  %76 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %1, i64 0, i32 0, i32 0
  %77 = load i8, i8* %76, align 1, !range !2
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %193, label %79

79:                                               ; preds = %75
  %80 = load i32*, i32** %4, align 8
  %81 = load i32*, i32** %5, align 8
  %82 = icmp eq i32* %80, %81
  %83 = ptrtoint i32* %81 to i64
  br i1 %82, label %88, label %84

84:                                               ; preds = %79
  store i32 8, i32* %80, align 4
  %85 = getelementptr inbounds i32, i32* %80, i64 1
  %86 = ptrtoint i32* %85 to i64
  %87 = bitcast i32** %4 to i64*
  store i64 %86, i64* %87, align 8
  br label %136

88:                                               ; preds = %79
  %89 = ptrtoint i32* %80 to i64
  %90 = bitcast i32** %4 to i64*
  %91 = bitcast %"class.std::__1::vector"* %0 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = sub i64 %89, %92
  %94 = ashr exact i64 %93, 2
  %95 = add nsw i64 %94, 1
  %96 = icmp ugt i64 %95, 4611686018427387903
  br i1 %96, label %97, label %99

97:                                               ; preds = %88
  %98 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %98) #12
  unreachable

99:                                               ; preds = %88
  %100 = bitcast i32** %5 to i64*
  %101 = sub i64 %83, %92
  %102 = ashr exact i64 %101, 2
  %103 = icmp ult i64 %102, 2305843009213693951
  br i1 %103, label %104, label %112

104:                                              ; preds = %99
  %105 = ashr exact i64 %101, 1
  %106 = icmp ult i64 %105, %95
  %107 = select i1 %106, i64 %95, i64 %105
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %117, label %109

109:                                              ; preds = %104
  %110 = icmp ugt i64 %107, 4611686018427387903
  br i1 %110, label %111, label %112

111:                                              ; preds = %109
  tail call void @abort() #12
  unreachable

112:                                              ; preds = %109, %99
  %113 = phi i64 [ %107, %109 ], [ 4611686018427387903, %99 ]
  %114 = shl i64 %113, 2
  %115 = tail call i8* @_Znwm(i64 %114) #11
  %116 = bitcast i8* %115 to i32*
  br label %117

117:                                              ; preds = %112, %104
  %118 = phi i64 [ %113, %112 ], [ 0, %104 ]
  %119 = phi i8* [ %115, %112 ], [ null, %104 ]
  %120 = phi i32* [ %116, %112 ], [ null, %104 ]
  %121 = getelementptr inbounds i32, i32* %120, i64 %94
  %122 = getelementptr inbounds i32, i32* %120, i64 %118
  %123 = ptrtoint i32* %122 to i64
  store i32 8, i32* %121, align 4
  %124 = getelementptr inbounds i32, i32* %121, i64 1
  %125 = ptrtoint i32* %124 to i64
  %126 = ptrtoint i32* %120 to i64
  %127 = icmp sgt i64 %93, 0
  br i1 %127, label %128, label %130

128:                                              ; preds = %117
  %129 = inttoptr i64 %92 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %119, i8* align 4 %129, i64 %93, i1 false) #10
  br label %130

130:                                              ; preds = %128, %117
  store i64 %126, i64* %91, align 8
  store i64 %125, i64* %90, align 8
  store i64 %123, i64* %100, align 8
  %131 = icmp eq i64 %92, 0
  br i1 %131, label %136, label %132

132:                                              ; preds = %130
  %133 = inttoptr i64 %92 to i8*
  tail call void @_ZdlPv(i8* %133) #11
  %134 = load i32*, i32** %4, align 8
  %135 = ptrtoint i32* %134 to i64
  br label %136

136:                                              ; preds = %84, %130, %132
  %137 = phi i64 [ %86, %84 ], [ %125, %130 ], [ %135, %132 ]
  %138 = phi i32* [ %85, %84 ], [ %124, %130 ], [ %134, %132 ]
  %139 = load i32*, i32** %5, align 8
  %140 = icmp eq i32* %138, %139
  br i1 %140, label %145, label %141

141:                                              ; preds = %136
  store i32 7, i32* %138, align 4
  %142 = getelementptr inbounds i32, i32* %138, i64 1
  %143 = ptrtoint i32* %142 to i64
  %144 = bitcast i32** %4 to i64*
  store i64 %143, i64* %144, align 8
  br label %193

145:                                              ; preds = %136
  %146 = ptrtoint i32* %139 to i64
  %147 = bitcast i32** %4 to i64*
  %148 = bitcast %"class.std::__1::vector"* %0 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = sub i64 %146, %149
  %151 = ashr exact i64 %150, 2
  %152 = add nsw i64 %151, 1
  %153 = icmp ugt i64 %152, 4611686018427387903
  br i1 %153, label %154, label %156

154:                                              ; preds = %145
  %155 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %155) #12
  unreachable

156:                                              ; preds = %145
  %157 = bitcast i32** %5 to i64*
  %158 = icmp ult i64 %151, 2305843009213693951
  br i1 %158, label %159, label %167

159:                                              ; preds = %156
  %160 = ashr exact i64 %150, 1
  %161 = icmp ult i64 %160, %152
  %162 = select i1 %161, i64 %152, i64 %160
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %172, label %164

164:                                              ; preds = %159
  %165 = icmp ugt i64 %162, 4611686018427387903
  br i1 %165, label %166, label %167

166:                                              ; preds = %164
  tail call void @abort() #12
  unreachable

167:                                              ; preds = %164, %156
  %168 = phi i64 [ %162, %164 ], [ 4611686018427387903, %156 ]
  %169 = shl i64 %168, 2
  %170 = tail call i8* @_Znwm(i64 %169) #11
  %171 = bitcast i8* %170 to i32*
  br label %172

172:                                              ; preds = %167, %159
  %173 = phi i64 [ %168, %167 ], [ 0, %159 ]
  %174 = phi i32* [ %171, %167 ], [ null, %159 ]
  %175 = getelementptr inbounds i32, i32* %174, i64 %151
  %176 = getelementptr inbounds i32, i32* %174, i64 %173
  %177 = ptrtoint i32* %176 to i64
  store i32 7, i32* %175, align 4
  %178 = getelementptr inbounds i32, i32* %175, i64 1
  %179 = ptrtoint i32* %178 to i64
  %180 = sub i64 %137, %149
  %181 = ashr exact i64 %180, 2
  %182 = sub nsw i64 0, %181
  %183 = getelementptr inbounds i32, i32* %175, i64 %182
  %184 = ptrtoint i32* %183 to i64
  %185 = icmp sgt i64 %180, 0
  br i1 %185, label %186, label %189

186:                                              ; preds = %172
  %187 = bitcast i32* %183 to i8*
  %188 = inttoptr i64 %149 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %187, i8* align 4 %188, i64 %180, i1 false) #10
  br label %189

189:                                              ; preds = %186, %172
  store i64 %184, i64* %148, align 8
  store i64 %179, i64* %147, align 8
  store i64 %177, i64* %157, align 8
  %190 = icmp eq i64 %149, 0
  br i1 %190, label %193, label %191

191:                                              ; preds = %189
  %192 = inttoptr i64 %149 to i8*
  tail call void @_ZdlPv(i8* %192) #11
  br label %193

193:                                              ; preds = %191, %189, %141, %75
  %194 = load i32*, i32** %3, align 8
  %195 = load i32*, i32** %4, align 8
  %196 = icmp eq i32* %194, %195
  br i1 %196, label %197, label %198

197:                                              ; preds = %193
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i64 0, i64 0), i32 54, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, i64 0, i64 0)) #12
  unreachable

198:                                              ; preds = %193
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK6webrtc13CryptoOptionseqERKS0_(%"struct.webrtc::CryptoOptions"* nocapture readonly, %"struct.webrtc::CryptoOptions"* nocapture readonly dereferenceable(5)) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %0, i64 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %1, i64 0, i32 0, i32 0
  %6 = load i8, i8* %5, align 1, !range !2
  %7 = icmp eq i8 %4, %6
  br i1 %7, label %8, label %32

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %0, i64 0, i32 0, i32 1
  %10 = load i8, i8* %9, align 1, !range !2
  %11 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %1, i64 0, i32 0, i32 1
  %12 = load i8, i8* %11, align 1, !range !2
  %13 = icmp eq i8 %10, %12
  br i1 %13, label %14, label %32

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %0, i64 0, i32 0, i32 2
  %16 = load i8, i8* %15, align 1, !range !2
  %17 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %1, i64 0, i32 0, i32 2
  %18 = load i8, i8* %17, align 1, !range !2
  %19 = icmp eq i8 %16, %18
  br i1 %19, label %20, label %32

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %0, i64 0, i32 0, i32 3
  %22 = load i8, i8* %21, align 1, !range !2
  %23 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %1, i64 0, i32 0, i32 3
  %24 = load i8, i8* %23, align 1, !range !2
  %25 = icmp eq i8 %22, %24
  br i1 %25, label %26, label %32

26:                                               ; preds = %20
  %27 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %0, i64 0, i32 1, i32 0
  %28 = load i8, i8* %27, align 1, !range !2
  %29 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %1, i64 0, i32 1, i32 0
  %30 = load i8, i8* %29, align 1, !range !2
  %31 = icmp eq i8 %28, %30
  br label %32

32:                                               ; preds = %26, %20, %14, %8, %2
  %33 = phi i1 [ false, %20 ], [ false, %14 ], [ false, %8 ], [ false, %2 ], [ %31, %26 ]
  ret i1 %33
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK6webrtc13CryptoOptionsneERKS0_(%"struct.webrtc::CryptoOptions"* nocapture readonly, %"struct.webrtc::CryptoOptions"* nocapture readonly dereferenceable(5)) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %0, i64 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %1, i64 0, i32 0, i32 0
  %6 = load i8, i8* %5, align 1, !range !2
  %7 = icmp eq i8 %4, %6
  br i1 %7, label %8, label %32

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %0, i64 0, i32 0, i32 1
  %10 = load i8, i8* %9, align 1, !range !2
  %11 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %1, i64 0, i32 0, i32 1
  %12 = load i8, i8* %11, align 1, !range !2
  %13 = icmp eq i8 %10, %12
  br i1 %13, label %14, label %32

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %0, i64 0, i32 0, i32 2
  %16 = load i8, i8* %15, align 1, !range !2
  %17 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %1, i64 0, i32 0, i32 2
  %18 = load i8, i8* %17, align 1, !range !2
  %19 = icmp eq i8 %16, %18
  br i1 %19, label %20, label %32

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %0, i64 0, i32 0, i32 3
  %22 = load i8, i8* %21, align 1, !range !2
  %23 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %1, i64 0, i32 0, i32 3
  %24 = load i8, i8* %23, align 1, !range !2
  %25 = icmp eq i8 %22, %24
  br i1 %25, label %26, label %32

26:                                               ; preds = %20
  %27 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %0, i64 0, i32 1, i32 0
  %28 = load i8, i8* %27, align 1, !range !2
  %29 = getelementptr inbounds %"struct.webrtc::CryptoOptions", %"struct.webrtc::CryptoOptions"* %1, i64 0, i32 1, i32 0
  %30 = load i8, i8* %29, align 1, !range !2
  %31 = icmp ne i8 %28, %30
  br label %32

32:                                               ; preds = %2, %8, %14, %20, %26
  %33 = phi i1 [ true, %20 ], [ true, %14 ], [ true, %8 ], [ true, %2 ], [ %31, %26 ]
  ret i1 %33
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: noreturn
declare void @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8*, i32, i8*, i8*, ...) local_unnamed_addr #7

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
