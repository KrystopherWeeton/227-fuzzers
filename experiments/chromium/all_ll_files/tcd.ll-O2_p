; ModuleID = '../../third_party/pdfium/third_party/libopenjpeg20/tcd.c'
source_filename = "../../third_party/pdfium/third_party/libopenjpeg20/tcd.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.opj_tcd = type { i32, i32, i32, i32, i32, %struct.opj_tcd_image*, %struct.opj_image*, %struct.opj_cp*, %struct.opj_tcp*, i32, i8, %struct.opj_thread_pool_t*, i32, i32, i32, i32, i32, i32* }
%struct.opj_tcd_image = type { %struct.opj_tcd_tile* }
%struct.opj_tcd_tile = type { i32, i32, i32, i32, i32, %struct.opj_tcd_tilecomp*, i32, double, [100 x double], i32 }
%struct.opj_tcd_tilecomp = type { i32, i32, i32, i32, i32, i32, i32, %struct.opj_tcd_resolution*, i32, i32*, i32, i64, i64, i32*, i32, i32, i32, i32, i32 }
%struct.opj_tcd_resolution = type { i32, i32, i32, i32, i32, i32, i32, [3 x %struct.opj_tcd_band], i32, i32, i32, i32 }
%struct.opj_tcd_band = type { i32, i32, i32, i32, i32, %struct.opj_tcd_precinct*, i32, i32, float }
%struct.opj_tcd_precinct = type { i32, i32, i32, i32, i32, i32, %union.anon, i32, %struct.opj_tgt_tree*, %struct.opj_tgt_tree* }
%union.anon = type { %struct.opj_tcd_cblk_enc* }
%struct.opj_tcd_cblk_enc = type { i8*, %struct.opj_tcd_layer*, %struct.opj_tcd_pass*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.opj_tcd_layer = type { i32, i32, double, i8* }
%struct.opj_tcd_pass = type { i32, double, i32, i8 }
%struct.opj_tgt_tree = type { i32, i32, i32, %struct.opj_tgt_node*, i32 }
%struct.opj_tgt_node = type { %struct.opj_tgt_node*, i32, i32, i32 }
%struct.opj_image = type { i32, i32, i32, i32, i32, i32, %struct.opj_image_comp*, i8*, i32 }
%struct.opj_image_comp = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32*, i16 }
%struct.opj_cp = type { i16, i32, i32, i32, i32, i8*, i32, i32, i32, %struct.opj_ppx_struct*, i8*, i32, i32, i8*, i8*, i8*, i32, i32, i32, %struct.opj_tcp*, %union.anon.0, i8 }
%struct.opj_ppx_struct = type { i8*, i32 }
%union.anon.0 = type { %struct.opj_encoding_param }
%struct.opj_encoding_param = type { i32, i32, i32*, i8, i8 }
%struct.opj_tcp = type { i32, i32, i32, i32, i32, [100 x float], i32, [32 x %struct.opj_poc], i32, %struct.opj_ppx_struct*, i8*, i8*, i32, i32, [100 x float], %struct.opj_tccp*, i32, i32, i8*, i32, double*, float*, float*, %struct.opj_mct_data*, i32, i32, %struct.opj_simple_mcc_decorrelation_data*, i32, i32, i8 }
%struct.opj_poc = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [5 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.opj_tccp = type { i32, i32, i32, i32, i32, i32, i32, [97 x %struct.opj_stepsize], i32, i32, [33 x i32], [33 x i32], i32 }
%struct.opj_stepsize = type { i32, i32 }
%struct.opj_mct_data = type { i32, i32, i32, i8*, i32 }
%struct.opj_simple_mcc_decorrelation_data = type { i32, i32, %struct.opj_mct_data*, %struct.opj_mct_data*, i8 }
%struct.opj_thread_pool_t = type opaque
%struct.opj_codestream_info = type { double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32*, i32, %struct.opj_marker_info*, i32, i32, i32, i32, %struct.opj_tile_info* }
%struct.opj_marker_info = type { i16, i64, i32 }
%struct.opj_tile_info = type { double*, i32, i32, i32, i32, [33 x i32], [33 x i32], [33 x i32], [33 x i32], %struct.opj_packet_info*, i32, double, i32, %struct.opj_marker_info*, i32, i32, %struct.opj_tp_info* }
%struct.opj_packet_info = type { i64, i64, i64, double }
%struct.opj_tp_info = type { i32, i32, i32, i32, i32 }
%struct.opj_event_mgr = type { i8*, i8*, i8*, void (i8*, i8*)*, void (i8*, i8*)*, void (i8*, i8*)* }
%struct.opj_t2 = type { %struct.opj_image*, %struct.opj_cp* }
%struct.opj_tcd_marker_info = type { i32, i32, i32* }
%struct.opj_tcd_cblk_dec = type { %struct.opj_tcd_seg*, %struct.opj_tcd_seg_data_chunk*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32* }
%struct.opj_tcd_seg = type { i32, i32, i32, i32, i32, i32 }
%struct.opj_tcd_seg_data_chunk = type { i8*, i32 }
%struct.opj_codestream_index = type { i64, i64, i64, i32, %struct.opj_marker_info*, i32, i32, %struct.opj_tile_index* }
%struct.opj_tile_index = type { i32, i32, i32, i32, %struct.opj_tp_index*, i32, %struct.opj_marker_info*, i32, i32, %struct.opj_packet_info* }
%struct.opj_tp_index = type { i64, i64, i64 }
%struct.opj_mutex_t = type opaque

@.str = private unnamed_addr constant [41 x i8] c"Size of tile data exceeds system limits\0A\00", align 1
@.str.1 = private unnamed_addr constant [31 x i8] c"Invalid tilec->win_xxx values\0A\00", align 1
@.str.2 = private unnamed_addr constant [38 x i8] c"Tile X coordinates are not supported\0A\00", align 1
@.str.3 = private unnamed_addr constant [38 x i8] c"Tile Y coordinates are not supported\0A\00", align 1
@.str.4 = private unnamed_addr constant [39 x i8] c"tiles require at least one resolution\0A\00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"Invalid tile data\0A\00", align 1
@.str.6 = private unnamed_addr constant [40 x i8] c"Not enough memory for tile resolutions\0A\00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"Integer overflow\0A\00", align 1
@.str.8 = private unnamed_addr constant [43 x i8] c"Not enough memory to handle band precints\0A\00", align 1
@.str.9 = private unnamed_addr constant [47 x i8] c"Size of code block data exceeds system limits\0A\00", align 1
@.str.10 = private unnamed_addr constant [58 x i8] c"Not enough memory for current precinct codeblock element\0A\00", align 1
@.str.11 = private unnamed_addr constant [61 x i8] c"Tiles don't all have the same dimension. Skip the MCT step.\0A\00", align 1
@.str.12 = private unnamed_addr constant [74 x i8] c"Number of components (%d) is inconsistent with a MCT. Skip the MCT step.\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.opj_tcd* @opj_tcd_create(i32) local_unnamed_addr #0 {
  %2 = tail call i8* @opj_calloc(i64 1, i64 104) #9
  %3 = icmp eq i8* %2, null
  br i1 %3, label %17, label %4

4:                                                ; preds = %1
  %5 = bitcast i8* %2 to %struct.opj_tcd*
  %6 = icmp ne i32 %0, 0
  %7 = getelementptr inbounds i8, i8* %2, i64 60
  %8 = zext i1 %6 to i8
  %9 = load i8, i8* %7, align 4
  %10 = and i8 %9, -2
  %11 = or i8 %10, %8
  store i8 %11, i8* %7, align 4
  %12 = tail call i8* @opj_calloc(i64 1, i64 8) #9
  %13 = getelementptr inbounds i8, i8* %2, i64 24
  %14 = bitcast i8* %13 to i8**
  store i8* %12, i8** %14, align 8
  %15 = icmp eq i8* %12, null
  br i1 %15, label %16, label %17

16:                                               ; preds = %4
  tail call void @opj_free(i8* nonnull %2) #9
  br label %17

17:                                               ; preds = %4, %1, %16
  %18 = phi %struct.opj_tcd* [ null, %16 ], [ null, %1 ], [ %5, %4 ]
  ret %struct.opj_tcd* %18
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @opj_calloc(i64, i64) local_unnamed_addr #2

declare void @opj_free(i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @opj_tcd_rateallocate_fixed(%struct.opj_tcd* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 8
  %3 = load %struct.opj_tcp*, %struct.opj_tcp** %2, align 8
  %4 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %3, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %14, label %7

7:                                                ; preds = %1, %7
  %8 = phi i32 [ %9, %7 ], [ 0, %1 ]
  tail call void @opj_tcd_makelayer_fixed(%struct.opj_tcd* %0, i32 %8, i32 1)
  %9 = add nuw i32 %8, 1
  %10 = load %struct.opj_tcp*, %struct.opj_tcp** %2, align 8
  %11 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %10, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = icmp ult i32 %9, %12
  br i1 %13, label %7, label %14

14:                                               ; preds = %7, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @opj_tcd_makelayer_fixed(%struct.opj_tcd* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %4 = alloca [10 x [10 x [3 x i32]]], align 16
  %5 = bitcast [10 x [10 x [3 x i32]]]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1200, i8* nonnull %5) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 1200, i1 false)
  %6 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 5
  %7 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %6, align 8
  %8 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %7, i64 0, i32 0
  %9 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %8, align 8
  %10 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %9, i64 0, i32 4
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %257, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 8
  %15 = load %struct.opj_tcp*, %struct.opj_tcp** %14, align 8
  %16 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 7
  %17 = load %struct.opj_cp*, %struct.opj_cp** %16, align 8
  %18 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %9, i64 0, i32 5
  %19 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %15, i64 0, i32 2
  %20 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %17, i64 0, i32 20, i32 0, i32 2
  %21 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  %22 = zext i32 %1 to i64
  %23 = icmp eq i32 %1, 0
  %24 = add i32 %1, -1
  %25 = zext i32 %24 to i64
  %26 = icmp eq i32 %2, 0
  br label %27

27:                                               ; preds = %13, %252
  %28 = phi i32 [ %11, %13 ], [ %253, %252 ]
  %29 = phi i64 [ 0, %13 ], [ %254, %252 ]
  %30 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %18, align 8
  %31 = load i32, i32* %19, align 8
  %32 = icmp eq i32 %31, 0
  %33 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %30, i64 %29, i32 5
  %34 = load i32, i32* %33, align 4
  br i1 %32, label %39, label %35

35:                                               ; preds = %27
  %36 = icmp eq i32 %34, 0
  %37 = zext i32 %31 to i64
  %38 = zext i32 %34 to i64
  br label %44

39:                                               ; preds = %88, %27
  %40 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %30, i64 %29, i32 5
  %41 = icmp eq i32 %34, 0
  br i1 %41, label %252, label %42

42:                                               ; preds = %39
  %43 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %30, i64 %29, i32 7
  br label %91

44:                                               ; preds = %35, %88
  %45 = phi i64 [ 0, %35 ], [ %89, %88 ]
  br i1 %36, label %88, label %46

46:                                               ; preds = %44
  %47 = load i32*, i32** %20, align 8
  %48 = load %struct.opj_image*, %struct.opj_image** %21, align 8
  %49 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %48, i64 0, i32 6
  %50 = load %struct.opj_image_comp*, %struct.opj_image_comp** %49, align 8
  %51 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %50, i64 %29, i32 6
  %52 = load i32, i32* %51, align 8
  %53 = uitofp i32 %52 to double
  %54 = fmul double %53, 6.250000e-02
  %55 = fptrunc double %54 to float
  %56 = trunc i64 %45 to i32
  %57 = mul i32 %34, %56
  br label %58

58:                                               ; preds = %46, %58
  %59 = phi i64 [ 0, %46 ], [ %86, %58 ]
  %60 = trunc i64 %59 to i32
  %61 = add i32 %57, %60
  %62 = mul i32 %61, 3
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i32, i32* %47, i64 %63
  %65 = load i32, i32* %64, align 4
  %66 = sitofp i32 %65 to float
  %67 = fmul float %66, %55
  %68 = fptosi float %67 to i32
  %69 = getelementptr inbounds [10 x [10 x [3 x i32]]], [10 x [10 x [3 x i32]]]* %4, i64 0, i64 %45, i64 %59, i64 0
  store i32 %68, i32* %69, align 4
  %70 = add i32 %62, 1
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds i32, i32* %47, i64 %71
  %73 = load i32, i32* %72, align 4
  %74 = sitofp i32 %73 to float
  %75 = fmul float %74, %55
  %76 = fptosi float %75 to i32
  %77 = getelementptr inbounds [10 x [10 x [3 x i32]]], [10 x [10 x [3 x i32]]]* %4, i64 0, i64 %45, i64 %59, i64 1
  store i32 %76, i32* %77, align 4
  %78 = add i32 %62, 2
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds i32, i32* %47, i64 %79
  %81 = load i32, i32* %80, align 4
  %82 = sitofp i32 %81 to float
  %83 = fmul float %82, %55
  %84 = fptosi float %83 to i32
  %85 = getelementptr inbounds [10 x [10 x [3 x i32]]], [10 x [10 x [3 x i32]]]* %4, i64 0, i64 %45, i64 %59, i64 2
  store i32 %84, i32* %85, align 4
  %86 = add nuw nsw i64 %59, 1
  %87 = icmp ult i64 %86, %38
  br i1 %87, label %58, label %88

88:                                               ; preds = %58, %44
  %89 = add nuw nsw i64 %45, 1
  %90 = icmp ult i64 %89, %37
  br i1 %90, label %44, label %39

91:                                               ; preds = %42, %245
  %92 = phi i32 [ %34, %42 ], [ %246, %245 ]
  %93 = phi i64 [ 0, %42 ], [ %247, %245 ]
  %94 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %43, align 8
  %95 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %94, i64 %93, i32 6
  %96 = load i32, i32* %95, align 8
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %245, label %98

98:                                               ; preds = %91
  %99 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %94, i64 %93, i32 4
  %100 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %94, i64 %93, i32 5
  br label %101

101:                                              ; preds = %98, %238
  %102 = phi i32 [ %96, %98 ], [ %239, %238 ]
  %103 = phi i64 [ 0, %98 ], [ %240, %238 ]
  %104 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %94, i64 %93, i32 7, i64 %103, i32 2
  %105 = load i32, i32* %104, align 8
  %106 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %94, i64 %93, i32 7, i64 %103, i32 0
  %107 = load i32, i32* %106, align 8
  %108 = icmp eq i32 %105, %107
  br i1 %108, label %238, label %109

109:                                              ; preds = %101
  %110 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %94, i64 %93, i32 7, i64 %103, i32 3
  %111 = load i32, i32* %110, align 4
  %112 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %94, i64 %93, i32 7, i64 %103, i32 1
  %113 = load i32, i32* %112, align 4
  %114 = icmp eq i32 %111, %113
  br i1 %114, label %238, label %115

115:                                              ; preds = %109
  %116 = load i32, i32* %99, align 8
  %117 = load i32, i32* %100, align 4
  %118 = mul i32 %117, %116
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %238, label %120

120:                                              ; preds = %115
  %121 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %94, i64 %93, i32 7, i64 %103, i32 5
  %122 = getelementptr inbounds [10 x [10 x [3 x i32]]], [10 x [10 x [3 x i32]]]* %4, i64 0, i64 %22, i64 %93, i64 %103
  %123 = getelementptr inbounds [10 x [10 x [3 x i32]]], [10 x [10 x [3 x i32]]]* %4, i64 0, i64 %25, i64 %93, i64 %103
  br label %124

124:                                              ; preds = %120, %229
  %125 = phi i32 [ %117, %120 ], [ %230, %229 ]
  %126 = phi i32 [ %116, %120 ], [ %231, %229 ]
  %127 = phi i64 [ 0, %120 ], [ %232, %229 ]
  %128 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %121, align 8
  %129 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %128, i64 %127, i32 4
  %130 = load i32, i32* %129, align 8
  %131 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %128, i64 %127, i32 5
  %132 = load i32, i32* %131, align 4
  %133 = mul i32 %132, %130
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %229, label %135

135:                                              ; preds = %124
  %136 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %128, i64 %127, i32 6, i32 0
  %137 = load i32, i32* %122, align 4
  br label %138

138:                                              ; preds = %135, %219
  %139 = phi i64 [ 0, %135 ], [ %220, %219 ]
  %140 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %136, align 8
  %141 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %140, i64 %139
  %142 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %140, i64 %139, i32 1
  %143 = load %struct.opj_tcd_layer*, %struct.opj_tcd_layer** %142, align 8
  %144 = load %struct.opj_image*, %struct.opj_image** %21, align 8
  %145 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %144, i64 0, i32 6
  %146 = load %struct.opj_image_comp*, %struct.opj_image_comp** %145, align 8
  %147 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %146, i64 %29, i32 6
  %148 = load i32, i32* %147, align 8
  %149 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %140, i64 %139, i32 7
  %150 = load i32, i32* %149, align 8
  %151 = sub i32 %148, %150
  br i1 %23, label %161, label %152

152:                                              ; preds = %138
  %153 = load i32, i32* %123, align 4
  %154 = sub nsw i32 %137, %153
  %155 = icmp sgt i32 %153, %151
  br i1 %155, label %166, label %156

156:                                              ; preds = %152
  %157 = sub i32 %153, %151
  %158 = add i32 %154, %157
  %159 = icmp sgt i32 %158, 0
  %160 = select i1 %159, i32 %158, i32 0
  br label %166

161:                                              ; preds = %138
  %162 = icmp sgt i32 %137, %151
  %163 = sub nsw i32 %137, %151
  %164 = select i1 %162, i32 %163, i32 0
  %165 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %140, i64 %139, i32 11
  store i32 0, i32* %165, align 8
  br label %166

166:                                              ; preds = %156, %152, %161
  %167 = phi i32 [ %164, %161 ], [ %154, %152 ], [ %160, %156 ]
  %168 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %140, i64 %139, i32 11
  %169 = load i32, i32* %168, align 8
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %171, label %176

171:                                              ; preds = %166
  %172 = icmp eq i32 %167, 0
  br i1 %172, label %179, label %173

173:                                              ; preds = %171
  %174 = mul i32 %167, 3
  %175 = add i32 %174, -2
  br label %179

176:                                              ; preds = %166
  %177 = mul i32 %167, 3
  %178 = add i32 %177, %169
  br label %179

179:                                              ; preds = %171, %173, %176
  %180 = phi i32 [ %175, %173 ], [ %178, %176 ], [ 0, %171 ]
  %181 = sub i32 %180, %169
  %182 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %143, i64 %22, i32 0
  store i32 %181, i32* %182, align 8
  %183 = icmp eq i32 %181, 0
  br i1 %183, label %219, label %184

184:                                              ; preds = %179
  %185 = load i32, i32* %168, align 8
  %186 = icmp eq i32 %185, 0
  %187 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %140, i64 %139, i32 2
  %188 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %187, align 8
  %189 = add i32 %180, -1
  %190 = zext i32 %189 to i64
  %191 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %188, i64 %190, i32 0
  %192 = load i32, i32* %191, align 8
  br i1 %186, label %193, label %199

193:                                              ; preds = %184
  %194 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %143, i64 %22, i32 1
  store i32 %192, i32* %194, align 4
  %195 = bitcast %struct.opj_tcd_cblk_enc* %141 to i64*
  %196 = load i64, i64* %195, align 8
  %197 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %143, i64 %22, i32 3
  %198 = bitcast i8** %197 to i64*
  store i64 %196, i64* %198, align 8
  br label %217

199:                                              ; preds = %184
  %200 = add i32 %185, -1
  %201 = zext i32 %200 to i64
  %202 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %188, i64 %201, i32 0
  %203 = load i32, i32* %202, align 8
  %204 = sub i32 %192, %203
  %205 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %143, i64 %22, i32 1
  store i32 %204, i32* %205, align 4
  %206 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %141, i64 0, i32 0
  %207 = load i8*, i8** %206, align 8
  %208 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %187, align 8
  %209 = load i32, i32* %168, align 8
  %210 = add i32 %209, -1
  %211 = zext i32 %210 to i64
  %212 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %208, i64 %211, i32 0
  %213 = load i32, i32* %212, align 8
  %214 = zext i32 %213 to i64
  %215 = getelementptr inbounds i8, i8* %207, i64 %214
  %216 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %143, i64 %22, i32 3
  store i8* %215, i8** %216, align 8
  br label %217

217:                                              ; preds = %199, %193
  br i1 %26, label %219, label %218

218:                                              ; preds = %217
  store i32 %180, i32* %168, align 8
  br label %219

219:                                              ; preds = %218, %217, %179
  %220 = add nuw nsw i64 %139, 1
  %221 = load i32, i32* %129, align 8
  %222 = load i32, i32* %131, align 4
  %223 = mul i32 %222, %221
  %224 = zext i32 %223 to i64
  %225 = icmp ult i64 %220, %224
  br i1 %225, label %138, label %226

226:                                              ; preds = %219
  %227 = load i32, i32* %99, align 8
  %228 = load i32, i32* %100, align 4
  br label %229

229:                                              ; preds = %226, %124
  %230 = phi i32 [ %228, %226 ], [ %125, %124 ]
  %231 = phi i32 [ %227, %226 ], [ %126, %124 ]
  %232 = add nuw nsw i64 %127, 1
  %233 = mul i32 %230, %231
  %234 = zext i32 %233 to i64
  %235 = icmp ult i64 %232, %234
  br i1 %235, label %124, label %236

236:                                              ; preds = %229
  %237 = load i32, i32* %95, align 8
  br label %238

238:                                              ; preds = %236, %115, %109, %101
  %239 = phi i32 [ %237, %236 ], [ %102, %115 ], [ %102, %109 ], [ %102, %101 ]
  %240 = add nuw nsw i64 %103, 1
  %241 = zext i32 %239 to i64
  %242 = icmp ult i64 %240, %241
  br i1 %242, label %101, label %243

243:                                              ; preds = %238
  %244 = load i32, i32* %40, align 4
  br label %245

245:                                              ; preds = %243, %91
  %246 = phi i32 [ %244, %243 ], [ %92, %91 ]
  %247 = add nuw nsw i64 %93, 1
  %248 = zext i32 %246 to i64
  %249 = icmp ult i64 %247, %248
  br i1 %249, label %91, label %250

250:                                              ; preds = %245
  %251 = load i32, i32* %10, align 8
  br label %252

252:                                              ; preds = %250, %39
  %253 = phi i32 [ %251, %250 ], [ %28, %39 ]
  %254 = add nuw nsw i64 %29, 1
  %255 = zext i32 %253 to i64
  %256 = icmp ult i64 %254, %255
  br i1 %256, label %27, label %257

257:                                              ; preds = %252, %3
  call void @llvm.lifetime.end.p0i8(i64 1200, i8* nonnull %5) #9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @opj_tcd_makelayer(%struct.opj_tcd* nocapture readonly, i32, double, i32) local_unnamed_addr #3 {
  %5 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 5
  %6 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %5, align 8
  %7 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %6, i64 0, i32 0
  %8 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %7, align 8
  %9 = zext i32 %1 to i64
  %10 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %8, i64 0, i32 8, i64 %9
  store double 0.000000e+00, double* %10, align 8
  %11 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %8, i64 0, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %231, label %14

14:                                               ; preds = %4
  %15 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %8, i64 0, i32 5
  %16 = icmp eq i32 %1, 0
  %17 = fcmp olt double %2, 0.000000e+00
  %18 = icmp eq i32 %3, 0
  br label %19

19:                                               ; preds = %14, %226
  %20 = phi i32 [ %12, %14 ], [ %227, %226 ]
  %21 = phi i64 [ 0, %14 ], [ %228, %226 ]
  %22 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %15, align 8
  %23 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %22, i64 %21, i32 5
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %226, label %26

26:                                               ; preds = %19
  %27 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %22, i64 %21, i32 7
  br label %28

28:                                               ; preds = %26, %219
  %29 = phi i32 [ %24, %26 ], [ %220, %219 ]
  %30 = phi i64 [ 0, %26 ], [ %221, %219 ]
  %31 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %27, align 8
  %32 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %31, i64 %30, i32 6
  %33 = load i32, i32* %32, align 8
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %219, label %35

35:                                               ; preds = %28
  %36 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %31, i64 %30, i32 4
  %37 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %31, i64 %30, i32 5
  br label %38

38:                                               ; preds = %35, %212
  %39 = phi i32 [ %33, %35 ], [ %213, %212 ]
  %40 = phi i64 [ 0, %35 ], [ %214, %212 ]
  %41 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %31, i64 %30, i32 7, i64 %40, i32 2
  %42 = load i32, i32* %41, align 8
  %43 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %31, i64 %30, i32 7, i64 %40, i32 0
  %44 = load i32, i32* %43, align 8
  %45 = icmp eq i32 %42, %44
  br i1 %45, label %212, label %46

46:                                               ; preds = %38
  %47 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %31, i64 %30, i32 7, i64 %40, i32 3
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %31, i64 %30, i32 7, i64 %40, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %48, %50
  br i1 %51, label %212, label %52

52:                                               ; preds = %46
  %53 = load i32, i32* %36, align 8
  %54 = load i32, i32* %37, align 4
  %55 = mul i32 %54, %53
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %212, label %57

57:                                               ; preds = %52
  %58 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %31, i64 %30, i32 7, i64 %40, i32 5
  br label %59

59:                                               ; preds = %57, %203
  %60 = phi i32 [ %54, %57 ], [ %204, %203 ]
  %61 = phi i32 [ %53, %57 ], [ %205, %203 ]
  %62 = phi i64 [ 0, %57 ], [ %206, %203 ]
  %63 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %58, align 8
  %64 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %63, i64 %62, i32 4
  %65 = load i32, i32* %64, align 8
  %66 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %63, i64 %62, i32 5
  %67 = load i32, i32* %66, align 4
  %68 = mul i32 %67, %65
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %203, label %70

70:                                               ; preds = %59
  %71 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %63, i64 %62, i32 6, i32 0
  br label %72

72:                                               ; preds = %70, %193
  %73 = phi i64 [ 0, %70 ], [ %194, %193 ]
  %74 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %71, align 8
  %75 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %74, i64 %73
  %76 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %74, i64 %73, i32 1
  %77 = load %struct.opj_tcd_layer*, %struct.opj_tcd_layer** %76, align 8
  %78 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %74, i64 %73, i32 11
  br i1 %16, label %81, label %79

79:                                               ; preds = %72
  %80 = load i32, i32* %78, align 8
  br label %82

81:                                               ; preds = %72
  store i32 0, i32* %78, align 8
  br label %82

82:                                               ; preds = %79, %81
  %83 = phi i32 [ %80, %79 ], [ 0, %81 ]
  %84 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %74, i64 %73, i32 11
  %85 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %74, i64 %73, i32 12
  %86 = load i32, i32* %85, align 4
  br i1 %17, label %131, label %87

87:                                               ; preds = %82
  %88 = icmp ult i32 %83, %86
  br i1 %88, label %89, label %131

89:                                               ; preds = %87
  %90 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %74, i64 %73, i32 2
  %91 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %90, align 8
  %92 = zext i32 %83 to i64
  %93 = zext i32 %86 to i64
  br label %94

94:                                               ; preds = %89, %125
  %95 = phi i64 [ %92, %89 ], [ %127, %125 ]
  %96 = phi i32 [ %83, %89 ], [ %129, %125 ]
  %97 = icmp eq i32 %96, 0
  %98 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %91, i64 %95, i32 0
  %99 = load i32, i32* %98, align 8
  br i1 %97, label %100, label %103

100:                                              ; preds = %94
  %101 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %91, i64 %95, i32 1
  %102 = load double, double* %101, align 8
  br label %114

103:                                              ; preds = %94
  %104 = add i32 %96, -1
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %91, i64 %105, i32 0
  %107 = load i32, i32* %106, align 8
  %108 = sub i32 %99, %107
  %109 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %91, i64 %95, i32 1
  %110 = load double, double* %109, align 8
  %111 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %91, i64 %105, i32 1
  %112 = load double, double* %111, align 8
  %113 = fsub double %110, %112
  br label %114

114:                                              ; preds = %103, %100
  %115 = phi i32 [ %99, %100 ], [ %108, %103 ]
  %116 = phi double [ %102, %100 ], [ %113, %103 ]
  %117 = icmp eq i32 %115, 0
  br i1 %117, label %118, label %120

118:                                              ; preds = %114
  %119 = fcmp une double %116, 0.000000e+00
  br label %125

120:                                              ; preds = %114
  %121 = uitofp i32 %115 to double
  %122 = fdiv double %116, %121
  %123 = fsub double %2, %122
  %124 = fcmp olt double %123, 0x3CB0000000000000
  br label %125

125:                                              ; preds = %120, %118
  %126 = phi i1 [ %124, %120 ], [ %119, %118 ]
  %127 = add nuw nsw i64 %95, 1
  %128 = trunc i64 %127 to i32
  %129 = select i1 %126, i32 %128, i32 %96
  %130 = icmp ult i64 %127, %93
  br i1 %130, label %94, label %131

131:                                              ; preds = %125, %87, %82
  %132 = phi i32 [ %86, %82 ], [ %83, %87 ], [ %129, %125 ]
  %133 = sub i32 %132, %83
  %134 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %77, i64 %9, i32 0
  store i32 %133, i32* %134, align 8
  %135 = icmp eq i32 %133, 0
  br i1 %135, label %136, label %138

136:                                              ; preds = %131
  %137 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %77, i64 %9, i32 2
  store double 0.000000e+00, double* %137, align 8
  br label %193

138:                                              ; preds = %131
  %139 = load i32, i32* %84, align 8
  %140 = icmp eq i32 %139, 0
  %141 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %74, i64 %73, i32 2
  %142 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %141, align 8
  %143 = add i32 %132, -1
  %144 = zext i32 %143 to i64
  %145 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %142, i64 %144, i32 0
  %146 = load i32, i32* %145, align 8
  br i1 %140, label %147, label %160

147:                                              ; preds = %138
  %148 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %77, i64 %9, i32 1
  store i32 %146, i32* %148, align 4
  %149 = bitcast %struct.opj_tcd_cblk_enc* %75 to i64*
  %150 = load i64, i64* %149, align 8
  %151 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %77, i64 %9, i32 3
  %152 = bitcast i8** %151 to i64*
  store i64 %150, i64* %152, align 8
  %153 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %141, align 8
  %154 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %153, i64 %144, i32 1
  %155 = bitcast double* %154 to i64*
  %156 = load i64, i64* %155, align 8
  %157 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %77, i64 %9, i32 2
  %158 = bitcast double* %157 to i64*
  store i64 %156, i64* %158, align 8
  %159 = bitcast i64 %156 to double
  br label %188

160:                                              ; preds = %138
  %161 = add i32 %139, -1
  %162 = zext i32 %161 to i64
  %163 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %142, i64 %162, i32 0
  %164 = load i32, i32* %163, align 8
  %165 = sub i32 %146, %164
  %166 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %77, i64 %9, i32 1
  store i32 %165, i32* %166, align 4
  %167 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %75, i64 0, i32 0
  %168 = load i8*, i8** %167, align 8
  %169 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %141, align 8
  %170 = load i32, i32* %84, align 8
  %171 = add i32 %170, -1
  %172 = zext i32 %171 to i64
  %173 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %169, i64 %172, i32 0
  %174 = load i32, i32* %173, align 8
  %175 = zext i32 %174 to i64
  %176 = getelementptr inbounds i8, i8* %168, i64 %175
  %177 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %77, i64 %9, i32 3
  store i8* %176, i8** %177, align 8
  %178 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %141, align 8
  %179 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %178, i64 %144, i32 1
  %180 = load double, double* %179, align 8
  %181 = load i32, i32* %84, align 8
  %182 = add i32 %181, -1
  %183 = zext i32 %182 to i64
  %184 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %178, i64 %183, i32 1
  %185 = load double, double* %184, align 8
  %186 = fsub double %180, %185
  %187 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %77, i64 %9, i32 2
  store double %186, double* %187, align 8
  br label %188

188:                                              ; preds = %160, %147
  %189 = phi double [ %186, %160 ], [ %159, %147 ]
  %190 = load double, double* %10, align 8
  %191 = fadd double %189, %190
  store double %191, double* %10, align 8
  br i1 %18, label %193, label %192

192:                                              ; preds = %188
  store i32 %132, i32* %84, align 8
  br label %193

193:                                              ; preds = %192, %188, %136
  %194 = add nuw nsw i64 %73, 1
  %195 = load i32, i32* %64, align 8
  %196 = load i32, i32* %66, align 4
  %197 = mul i32 %196, %195
  %198 = zext i32 %197 to i64
  %199 = icmp ult i64 %194, %198
  br i1 %199, label %72, label %200

200:                                              ; preds = %193
  %201 = load i32, i32* %36, align 8
  %202 = load i32, i32* %37, align 4
  br label %203

203:                                              ; preds = %200, %59
  %204 = phi i32 [ %202, %200 ], [ %60, %59 ]
  %205 = phi i32 [ %201, %200 ], [ %61, %59 ]
  %206 = add nuw nsw i64 %62, 1
  %207 = mul i32 %204, %205
  %208 = zext i32 %207 to i64
  %209 = icmp ult i64 %206, %208
  br i1 %209, label %59, label %210

210:                                              ; preds = %203
  %211 = load i32, i32* %32, align 8
  br label %212

212:                                              ; preds = %210, %52, %46, %38
  %213 = phi i32 [ %211, %210 ], [ %39, %52 ], [ %39, %46 ], [ %39, %38 ]
  %214 = add nuw nsw i64 %40, 1
  %215 = zext i32 %213 to i64
  %216 = icmp ult i64 %214, %215
  br i1 %216, label %38, label %217

217:                                              ; preds = %212
  %218 = load i32, i32* %23, align 4
  br label %219

219:                                              ; preds = %217, %28
  %220 = phi i32 [ %218, %217 ], [ %29, %28 ]
  %221 = add nuw nsw i64 %30, 1
  %222 = zext i32 %220 to i64
  %223 = icmp ult i64 %221, %222
  br i1 %223, label %28, label %224

224:                                              ; preds = %219
  %225 = load i32, i32* %11, align 8
  br label %226

226:                                              ; preds = %224, %19
  %227 = phi i32 [ %225, %224 ], [ %20, %19 ]
  %228 = add nuw nsw i64 %21, 1
  %229 = zext i32 %227 to i64
  %230 = icmp ult i64 %228, %229
  br i1 %230, label %19, label %231

231:                                              ; preds = %226, %4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @opj_tcd_is_band_empty(%struct.opj_tcd_band* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %3, %5
  br i1 %6, label %14, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %0, i64 0, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %9, %11
  %13 = zext i1 %12 to i32
  br label %14

14:                                               ; preds = %7, %1
  %15 = phi i32 [ 1, %1 ], [ %13, %7 ]
  ret i32 %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_tcd_rateallocate(%struct.opj_tcd* nocapture readonly, i8*, i32*, i32, %struct.opj_codestream_info*, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %7 = alloca [100 x double], align 16
  %8 = bitcast [100 x double]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %8) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -1, i64 800, i1 false)
  %9 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 7
  %10 = load %struct.opj_cp*, %struct.opj_cp** %9, align 8
  %11 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 5
  %12 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %11, align 8
  %13 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %12, i64 0, i32 0
  %14 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %13, align 8
  %15 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 8
  %16 = load %struct.opj_tcp*, %struct.opj_tcp** %15, align 8
  %17 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %14, i64 0, i32 6
  store i32 0, i32* %17, align 8
  %18 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %14, i64 0, i32 4
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %222, label %21

21:                                               ; preds = %6
  %22 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %14, i64 0, i32 5
  %23 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  br label %24

24:                                               ; preds = %21, %202
  %25 = phi i64 [ 0, %21 ], [ %218, %202 ]
  %26 = phi double [ 0.000000e+00, %21 ], [ %217, %202 ]
  %27 = phi double [ 0.000000e+00, %21 ], [ %205, %202 ]
  %28 = phi double [ 0x7FEFFFFFFFFFFFFF, %21 ], [ %204, %202 ]
  %29 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %22, align 8
  %30 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %29, i64 %25, i32 18
  store i32 0, i32* %30, align 8
  %31 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %29, i64 %25, i32 5
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %202, label %34

34:                                               ; preds = %24
  %35 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %29, i64 %25, i32 7
  br label %36

36:                                               ; preds = %34, %194
  %37 = phi i32 [ 0, %34 ], [ %195, %194 ]
  %38 = phi i32 [ %32, %34 ], [ %196, %194 ]
  %39 = phi i64 [ 0, %34 ], [ %199, %194 ]
  %40 = phi double [ %27, %34 ], [ %198, %194 ]
  %41 = phi double [ %28, %34 ], [ %197, %194 ]
  %42 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %35, align 8
  %43 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %42, i64 %39, i32 6
  %44 = load i32, i32* %43, align 8
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %194, label %46

46:                                               ; preds = %36
  %47 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %42, i64 %39, i32 4
  %48 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %42, i64 %39, i32 5
  br label %49

49:                                               ; preds = %46, %184
  %50 = phi i32 [ %37, %46 ], [ %185, %184 ]
  %51 = phi i32 [ %44, %46 ], [ %186, %184 ]
  %52 = phi i64 [ 0, %46 ], [ %189, %184 ]
  %53 = phi double [ %40, %46 ], [ %188, %184 ]
  %54 = phi double [ %41, %46 ], [ %187, %184 ]
  %55 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %42, i64 %39, i32 7, i64 %52, i32 2
  %56 = load i32, i32* %55, align 8
  %57 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %42, i64 %39, i32 7, i64 %52, i32 0
  %58 = load i32, i32* %57, align 8
  %59 = icmp eq i32 %56, %58
  br i1 %59, label %184, label %60

60:                                               ; preds = %49
  %61 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %42, i64 %39, i32 7, i64 %52, i32 3
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %42, i64 %39, i32 7, i64 %52, i32 1
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %62, %64
  br i1 %65, label %184, label %66

66:                                               ; preds = %60
  %67 = load i32, i32* %47, align 8
  %68 = load i32, i32* %48, align 4
  %69 = mul i32 %68, %67
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %184, label %71

71:                                               ; preds = %66
  %72 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %42, i64 %39, i32 7, i64 %52, i32 5
  br label %73

73:                                               ; preds = %71, %172
  %74 = phi i32 [ %50, %71 ], [ %173, %172 ]
  %75 = phi i32 [ %68, %71 ], [ %174, %172 ]
  %76 = phi i32 [ %67, %71 ], [ %175, %172 ]
  %77 = phi i64 [ 0, %71 ], [ %178, %172 ]
  %78 = phi double [ %53, %71 ], [ %177, %172 ]
  %79 = phi double [ %54, %71 ], [ %176, %172 ]
  %80 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %72, align 8
  %81 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %80, i64 %77, i32 4
  %82 = load i32, i32* %81, align 8
  %83 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %80, i64 %77, i32 5
  %84 = load i32, i32* %83, align 4
  %85 = mul i32 %84, %82
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %172, label %87

87:                                               ; preds = %73
  %88 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %80, i64 %77, i32 6, i32 0
  br label %89

89:                                               ; preds = %87, %138
  %90 = phi i64 [ 0, %87 ], [ %163, %138 ]
  %91 = phi double [ %78, %87 ], [ %140, %138 ]
  %92 = phi double [ %79, %87 ], [ %139, %138 ]
  %93 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %88, align 8
  %94 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %93, i64 %90, i32 12
  %95 = load i32, i32* %94, align 4
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %138, label %97

97:                                               ; preds = %89
  %98 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %93, i64 %90, i32 2
  %99 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %98, align 8
  %100 = zext i32 %95 to i64
  %101 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %99, i64 0, i32 1
  br label %102

102:                                              ; preds = %97, %133
  %103 = phi i64 [ 0, %97 ], [ %136, %133 ]
  %104 = phi double [ %91, %97 ], [ %135, %133 ]
  %105 = phi double [ %92, %97 ], [ %134, %133 ]
  %106 = icmp eq i64 %103, 0
  %107 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %99, i64 %103, i32 0
  %108 = load i32, i32* %107, align 8
  br i1 %106, label %109, label %111

109:                                              ; preds = %102
  %110 = load double, double* %101, align 8
  br label %122

111:                                              ; preds = %102
  %112 = add nuw i64 %103, 4294967295
  %113 = and i64 %112, 4294967295
  %114 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %99, i64 %113, i32 0
  %115 = load i32, i32* %114, align 8
  %116 = sub i32 %108, %115
  %117 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %99, i64 %103, i32 1
  %118 = load double, double* %117, align 8
  %119 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %99, i64 %113, i32 1
  %120 = load double, double* %119, align 8
  %121 = fsub double %118, %120
  br label %122

122:                                              ; preds = %111, %109
  %123 = phi i32 [ %108, %109 ], [ %116, %111 ]
  %124 = phi double [ %110, %109 ], [ %121, %111 ]
  %125 = icmp eq i32 %123, 0
  br i1 %125, label %133, label %126

126:                                              ; preds = %122
  %127 = sitofp i32 %123 to double
  %128 = fdiv double %124, %127
  %129 = fcmp olt double %128, %105
  %130 = select i1 %129, double %128, double %105
  %131 = fcmp ogt double %128, %104
  %132 = select i1 %131, double %128, double %104
  br label %133

133:                                              ; preds = %126, %122
  %134 = phi double [ %105, %122 ], [ %130, %126 ]
  %135 = phi double [ %104, %122 ], [ %132, %126 ]
  %136 = add nuw nsw i64 %103, 1
  %137 = icmp ult i64 %136, %100
  br i1 %137, label %102, label %138

138:                                              ; preds = %133, %89
  %139 = phi double [ %92, %89 ], [ %134, %133 ]
  %140 = phi double [ %91, %89 ], [ %135, %133 ]
  %141 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %93, i64 %90, i32 5
  %142 = load i32, i32* %141, align 8
  %143 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %93, i64 %90, i32 3
  %144 = load i32, i32* %143, align 8
  %145 = sub nsw i32 %142, %144
  %146 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %93, i64 %90, i32 6
  %147 = load i32, i32* %146, align 4
  %148 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %93, i64 %90, i32 4
  %149 = load i32, i32* %148, align 4
  %150 = sub nsw i32 %147, %149
  %151 = mul nsw i32 %150, %145
  %152 = load i32, i32* %17, align 8
  %153 = add nsw i32 %151, %152
  store i32 %153, i32* %17, align 8
  %154 = load i32, i32* %141, align 8
  %155 = load i32, i32* %143, align 8
  %156 = sub nsw i32 %154, %155
  %157 = load i32, i32* %146, align 4
  %158 = load i32, i32* %148, align 4
  %159 = sub nsw i32 %157, %158
  %160 = mul nsw i32 %159, %156
  %161 = load i32, i32* %30, align 8
  %162 = add nsw i32 %160, %161
  store i32 %162, i32* %30, align 8
  %163 = add nuw nsw i64 %90, 1
  %164 = load i32, i32* %81, align 8
  %165 = load i32, i32* %83, align 4
  %166 = mul i32 %165, %164
  %167 = zext i32 %166 to i64
  %168 = icmp ult i64 %163, %167
  br i1 %168, label %89, label %169

169:                                              ; preds = %138
  %170 = load i32, i32* %47, align 8
  %171 = load i32, i32* %48, align 4
  br label %172

172:                                              ; preds = %169, %73
  %173 = phi i32 [ %74, %73 ], [ %162, %169 ]
  %174 = phi i32 [ %75, %73 ], [ %171, %169 ]
  %175 = phi i32 [ %76, %73 ], [ %170, %169 ]
  %176 = phi double [ %79, %73 ], [ %139, %169 ]
  %177 = phi double [ %78, %73 ], [ %140, %169 ]
  %178 = add nuw nsw i64 %77, 1
  %179 = mul i32 %174, %175
  %180 = zext i32 %179 to i64
  %181 = icmp ult i64 %178, %180
  br i1 %181, label %73, label %182

182:                                              ; preds = %172
  %183 = load i32, i32* %43, align 8
  br label %184

184:                                              ; preds = %182, %66, %60, %49
  %185 = phi i32 [ %50, %60 ], [ %50, %49 ], [ %50, %66 ], [ %173, %182 ]
  %186 = phi i32 [ %51, %60 ], [ %51, %49 ], [ %51, %66 ], [ %183, %182 ]
  %187 = phi double [ %54, %60 ], [ %54, %49 ], [ %54, %66 ], [ %176, %182 ]
  %188 = phi double [ %53, %60 ], [ %53, %49 ], [ %53, %66 ], [ %177, %182 ]
  %189 = add nuw nsw i64 %52, 1
  %190 = zext i32 %186 to i64
  %191 = icmp ult i64 %189, %190
  br i1 %191, label %49, label %192

192:                                              ; preds = %184
  %193 = load i32, i32* %31, align 4
  br label %194

194:                                              ; preds = %192, %36
  %195 = phi i32 [ %37, %36 ], [ %185, %192 ]
  %196 = phi i32 [ %38, %36 ], [ %193, %192 ]
  %197 = phi double [ %41, %36 ], [ %187, %192 ]
  %198 = phi double [ %40, %36 ], [ %188, %192 ]
  %199 = add nuw nsw i64 %39, 1
  %200 = zext i32 %196 to i64
  %201 = icmp ult i64 %199, %200
  br i1 %201, label %36, label %202

202:                                              ; preds = %194, %24
  %203 = phi i32 [ 0, %24 ], [ %195, %194 ]
  %204 = phi double [ %28, %24 ], [ %197, %194 ]
  %205 = phi double [ %27, %24 ], [ %198, %194 ]
  %206 = load %struct.opj_image*, %struct.opj_image** %23, align 8
  %207 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %206, i64 0, i32 6
  %208 = load %struct.opj_image_comp*, %struct.opj_image_comp** %207, align 8
  %209 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %208, i64 %25, i32 6
  %210 = load i32, i32* %209, align 8
  %211 = shl i32 1, %210
  %212 = sitofp i32 %211 to double
  %213 = fadd double %212, -1.000000e+00
  %214 = fmul double %213, %213
  %215 = sitofp i32 %203 to double
  %216 = fmul double %214, %215
  %217 = fadd double %26, %216
  %218 = add nuw nsw i64 %25, 1
  %219 = load i32, i32* %18, align 8
  %220 = zext i32 %219 to i64
  %221 = icmp ult i64 %218, %220
  br i1 %221, label %24, label %222

222:                                              ; preds = %202, %6
  %223 = phi double [ 0x7FEFFFFFFFFFFFFF, %6 ], [ %204, %202 ]
  %224 = phi double [ 0.000000e+00, %6 ], [ %205, %202 ]
  %225 = phi double [ 0.000000e+00, %6 ], [ %217, %202 ]
  %226 = icmp ne %struct.opj_codestream_info* %4, null
  br i1 %226, label %227, label %248

227:                                              ; preds = %222
  %228 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %4, i64 0, i32 21
  %229 = load %struct.opj_tile_info*, %struct.opj_tile_info** %228, align 8
  %230 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 9
  %231 = load i32, i32* %230, align 8
  %232 = zext i32 %231 to i64
  %233 = load i32, i32* %17, align 8
  %234 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %229, i64 %232, i32 10
  store i32 %233, i32* %234, align 8
  %235 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %14, i64 0, i32 7
  %236 = bitcast double* %235 to i64*
  %237 = load i64, i64* %236, align 8
  %238 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %229, i64 %232, i32 11
  %239 = bitcast double* %238 to i64*
  store i64 %237, i64* %239, align 8
  %240 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %16, i64 0, i32 2
  %241 = load i32, i32* %240, align 8
  %242 = zext i32 %241 to i64
  %243 = shl nuw nsw i64 %242, 3
  %244 = tail call i8* @opj_malloc(i64 %243) #9
  %245 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %229, i64 %232, i32 0
  %246 = bitcast double** %245 to i8**
  store i8* %244, i8** %246, align 8
  %247 = icmp eq i8* %244, null
  br i1 %247, label %402, label %248

248:                                              ; preds = %227, %222
  %249 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %16, i64 0, i32 2
  %250 = load i32, i32* %249, align 8
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %402, label %252

252:                                              ; preds = %248
  %253 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %14, i64 0, i32 7
  %254 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %10, i64 0, i32 20, i32 0, i32 4
  %255 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  %256 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %10, i64 0, i32 0
  %257 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %14, i64 0, i32 8, i64 0
  %258 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 9
  %259 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 2
  %260 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 0
  %261 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 4
  %262 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %4, i64 0, i32 21
  br label %263

263:                                              ; preds = %252, %395
  %264 = phi i64 [ 0, %252 ], [ %398, %395 ]
  %265 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %16, i64 0, i32 5, i64 %264
  %266 = load float, float* %265, align 4
  %267 = fcmp ogt float %266, 0.000000e+00
  br i1 %267, label %268, label %273

268:                                              ; preds = %263
  %269 = tail call float @llvm.ceil.f32(float %266)
  %270 = fptoui float %269 to i32
  %271 = icmp ult i32 %270, %3
  %272 = select i1 %271, i32 %270, i32 %3
  br label %273

273:                                              ; preds = %263, %268
  %274 = phi i32 [ %272, %268 ], [ %3, %263 ]
  %275 = load double, double* %253, align 8
  %276 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %16, i64 0, i32 14, i64 %264
  %277 = load float, float* %276, align 4
  %278 = fdiv float %277, 1.000000e+01
  %279 = fpext float %278 to double
  %280 = tail call double @pow(double 1.000000e+01, double %279) #9
  %281 = fdiv double %225, %280
  %282 = fsub double %275, %281
  %283 = load i8, i8* %254, align 1
  %284 = and i8 %283, 1
  %285 = icmp eq i8 %284, 0
  br i1 %285, label %289, label %286

286:                                              ; preds = %273
  %287 = load float, float* %265, align 4
  %288 = fcmp ogt float %287, 0.000000e+00
  br i1 %288, label %295, label %289

289:                                              ; preds = %273, %286
  %290 = and i8 %283, 4
  %291 = icmp eq i8 %290, 0
  br i1 %291, label %373, label %292

292:                                              ; preds = %289
  %293 = load float, float* %276, align 4
  %294 = fcmp ogt float %293, 0.000000e+00
  br i1 %294, label %295, label %373

295:                                              ; preds = %292, %286
  %296 = load %struct.opj_image*, %struct.opj_image** %255, align 8
  %297 = tail call %struct.opj_t2* @opj_t2_create(%struct.opj_image* %296, %struct.opj_cp* %10) #9
  %298 = icmp eq %struct.opj_t2* %297, null
  br i1 %298, label %402, label %299

299:                                              ; preds = %295
  %300 = icmp eq i64 %264, 0
  %301 = trunc i64 %264 to i32
  %302 = add nuw i64 %264, 4294967295
  %303 = and i64 %302, 4294967295
  %304 = getelementptr inbounds [100 x double], [100 x double]* %7, i64 0, i64 %303
  %305 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %14, i64 0, i32 8, i64 %264
  %306 = add nuw nsw i64 %264, 1
  %307 = trunc i64 %306 to i32
  %308 = trunc i64 %306 to i32
  br label %309

309:                                              ; preds = %364, %299
  %310 = phi i32 [ 0, %299 ], [ %368, %364 ]
  %311 = phi double [ 0.000000e+00, %299 ], [ %367, %364 ]
  %312 = phi double [ %224, %299 ], [ %366, %364 ]
  %313 = phi double [ %223, %299 ], [ %365, %364 ]
  %314 = fadd double %313, %312
  %315 = fmul double %314, 5.000000e-01
  tail call void @opj_tcd_makelayer(%struct.opj_tcd* %0, i32 %301, double %315, i32 0)
  %316 = load i8, i8* %254, align 1
  %317 = and i8 %316, 4
  %318 = icmp eq i8 %317, 0
  br i1 %318, label %353, label %319

319:                                              ; preds = %309
  %320 = load i16, i16* %256, align 8
  %321 = add i16 %320, -3
  %322 = icmp ult i16 %321, 4
  %323 = add i16 %320, -1024
  %324 = icmp ult i16 %323, 1436
  %325 = or i1 %322, %324
  br i1 %325, label %326, label %343

326:                                              ; preds = %319
  %327 = load i32, i32* %258, align 8
  %328 = load i32, i32* %259, align 8
  %329 = load i32, i32* %260, align 8
  %330 = load i32, i32* %261, align 8
  %331 = tail call i32 @opj_t2_encode_packets(%struct.opj_t2* nonnull %297, i32 %327, %struct.opj_tcd_tile* %14, i32 %307, i8* %1, i32* %2, i32 %274, %struct.opj_codestream_info* %4, %struct.opj_tcd_marker_info* null, i32 %328, i32 %329, i32 %330, i32 0, %struct.opj_event_mgr* %5) #9
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %364, label %333

333:                                              ; preds = %326
  br i1 %300, label %334, label %336

334:                                              ; preds = %333
  %335 = load double, double* %257, align 8
  br label %340

336:                                              ; preds = %333
  %337 = load double, double* %304, align 8
  %338 = load double, double* %305, align 8
  %339 = fadd double %337, %338
  br label %340

340:                                              ; preds = %336, %334
  %341 = phi double [ %335, %334 ], [ %339, %336 ]
  %342 = fcmp olt double %341, %282
  br i1 %342, label %364, label %360

343:                                              ; preds = %319
  br i1 %300, label %344, label %346

344:                                              ; preds = %343
  %345 = load double, double* %257, align 8
  br label %350

346:                                              ; preds = %343
  %347 = load double, double* %304, align 8
  %348 = load double, double* %305, align 8
  %349 = fadd double %347, %348
  br label %350

350:                                              ; preds = %346, %344
  %351 = phi double [ %345, %344 ], [ %349, %346 ]
  %352 = fcmp olt double %351, %282
  br i1 %352, label %364, label %360

353:                                              ; preds = %309
  %354 = load i32, i32* %258, align 8
  %355 = load i32, i32* %259, align 8
  %356 = load i32, i32* %260, align 8
  %357 = load i32, i32* %261, align 8
  %358 = tail call i32 @opj_t2_encode_packets(%struct.opj_t2* nonnull %297, i32 %354, %struct.opj_tcd_tile* %14, i32 %308, i8* %1, i32* %2, i32 %274, %struct.opj_codestream_info* %4, %struct.opj_tcd_marker_info* null, i32 %355, i32 %356, i32 %357, i32 0, %struct.opj_event_mgr* %5) #9
  %359 = icmp eq i32 %358, 0
  br i1 %359, label %364, label %360

360:                                              ; preds = %353, %350, %340
  %361 = phi double [ %315, %340 ], [ %315, %350 ], [ %313, %353 ]
  %362 = phi double [ %312, %340 ], [ %312, %350 ], [ %315, %353 ]
  %363 = phi double [ %311, %340 ], [ %311, %350 ], [ %315, %353 ]
  br label %364

364:                                              ; preds = %353, %350, %340, %326, %360
  %365 = phi double [ %361, %360 ], [ %315, %326 ], [ %313, %340 ], [ %313, %350 ], [ %315, %353 ]
  %366 = phi double [ %362, %360 ], [ %312, %326 ], [ %315, %340 ], [ %315, %350 ], [ %312, %353 ]
  %367 = phi double [ %363, %360 ], [ %311, %326 ], [ %315, %340 ], [ %315, %350 ], [ %311, %353 ]
  %368 = add nuw nsw i32 %310, 1
  %369 = icmp eq i32 %368, 128
  br i1 %369, label %370, label %309

370:                                              ; preds = %364
  %371 = fcmp oeq double %367, 0.000000e+00
  %372 = select i1 %371, double %315, double %367
  tail call void @opj_t2_destroy(%struct.opj_t2* nonnull %297) #9
  br label %373

373:                                              ; preds = %370, %292, %289
  %374 = phi double [ -1.000000e+00, %289 ], [ -1.000000e+00, %292 ], [ %372, %370 ]
  br i1 %226, label %375, label %382

375:                                              ; preds = %373
  %376 = load %struct.opj_tile_info*, %struct.opj_tile_info** %262, align 8
  %377 = load i32, i32* %258, align 8
  %378 = zext i32 %377 to i64
  %379 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %376, i64 %378, i32 0
  %380 = load double*, double** %379, align 8
  %381 = getelementptr inbounds double, double* %380, i64 %264
  store double %374, double* %381, align 8
  br label %382

382:                                              ; preds = %375, %373
  %383 = trunc i64 %264 to i32
  tail call void @opj_tcd_makelayer(%struct.opj_tcd* %0, i32 %383, double %374, i32 1)
  %384 = icmp eq i64 %264, 0
  br i1 %384, label %385, label %387

385:                                              ; preds = %382
  %386 = load double, double* %257, align 8
  br label %395

387:                                              ; preds = %382
  %388 = add nuw i64 %264, 4294967295
  %389 = and i64 %388, 4294967295
  %390 = getelementptr inbounds [100 x double], [100 x double]* %7, i64 0, i64 %389
  %391 = load double, double* %390, align 8
  %392 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %14, i64 0, i32 8, i64 %264
  %393 = load double, double* %392, align 8
  %394 = fadd double %391, %393
  br label %395

395:                                              ; preds = %385, %387
  %396 = phi double [ %386, %385 ], [ %394, %387 ]
  %397 = getelementptr inbounds [100 x double], [100 x double]* %7, i64 0, i64 %264
  store double %396, double* %397, align 8
  %398 = add nuw nsw i64 %264, 1
  %399 = load i32, i32* %249, align 8
  %400 = zext i32 %399 to i64
  %401 = icmp ult i64 %398, %400
  br i1 %401, label %263, label %402

402:                                              ; preds = %395, %295, %248, %227
  %403 = phi i32 [ 0, %227 ], [ 1, %248 ], [ 1, %395 ], [ 0, %295 ]
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %8) #9
  ret i32 %403
}

declare i8* @opj_malloc(i64) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #5

declare %struct.opj_t2* @opj_t2_create(%struct.opj_image*, %struct.opj_cp*) local_unnamed_addr #2

declare i32 @opj_t2_encode_packets(%struct.opj_t2*, i32, %struct.opj_tcd_tile*, i32, i8*, i32*, i32, %struct.opj_codestream_info*, %struct.opj_tcd_marker_info*, i32, i32, i32, i32, %struct.opj_event_mgr*) local_unnamed_addr #2

declare void @opj_t2_destroy(%struct.opj_t2*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_tcd_init(%struct.opj_tcd* nocapture, %struct.opj_image*, %struct.opj_cp*, %struct.opj_thread_pool_t*) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  store %struct.opj_image* %1, %struct.opj_image** %5, align 8
  %6 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 7
  store %struct.opj_cp* %2, %struct.opj_cp** %6, align 8
  %7 = tail call i8* @opj_calloc(i64 1, i64 856) #9
  %8 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 5
  %9 = bitcast %struct.opj_tcd_image** %8 to i8***
  %10 = load i8**, i8*** %9, align 8
  store i8* %7, i8** %10, align 8
  %11 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %8, align 8
  %12 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %11, i64 0, i32 0
  %13 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %12, align 8
  %14 = icmp eq %struct.opj_tcd_tile* %13, null
  br i1 %14, label %38, label %15

15:                                               ; preds = %4
  %16 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 4
  %17 = load i32, i32* %16, align 8
  %18 = zext i32 %17 to i64
  %19 = tail call i8* @opj_calloc(i64 %18, i64 112) #9
  %20 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %8, align 8
  %21 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %20, i64 0, i32 0
  %22 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %21, align 8
  %23 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %22, i64 0, i32 5
  %24 = bitcast %struct.opj_tcd_tilecomp** %23 to i8**
  store i8* %19, i8** %24, align 8
  %25 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %8, align 8
  %26 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %25, i64 0, i32 0
  %27 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %26, align 8
  %28 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %27, i64 0, i32 5
  %29 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %28, align 8
  %30 = icmp eq %struct.opj_tcd_tilecomp* %29, null
  br i1 %30, label %38, label %31

31:                                               ; preds = %15
  %32 = load i32, i32* %16, align 8
  %33 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %27, i64 0, i32 4
  store i32 %32, i32* %33, align 8
  %34 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 20, i32 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 0
  store i32 %35, i32* %36, align 8
  %37 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 11
  store %struct.opj_thread_pool_t* %3, %struct.opj_thread_pool_t** %37, align 8
  br label %38

38:                                               ; preds = %15, %4, %31
  %39 = phi i32 [ 1, %31 ], [ 0, %4 ], [ 0, %15 ]
  ret i32 %39
}

; Function Attrs: nounwind ssp uwtable
define hidden void @opj_tcd_destroy(%struct.opj_tcd*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.opj_tcd* %0, null
  br i1 %2, label %162, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 5
  %5 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %4, align 8
  %6 = icmp eq %struct.opj_tcd_image* %5, null
  br i1 %6, label %157, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 10
  %9 = load i8, i8* %8, align 4
  %10 = and i8 %9, 1
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, void (%struct.opj_tcd_precinct*)* @opj_tcd_code_block_enc_deallocate, void (%struct.opj_tcd_precinct*)* @opj_tcd_code_block_dec_deallocate
  %13 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %5, i64 0, i32 0
  %14 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %13, align 8
  %15 = icmp eq %struct.opj_tcd_tile* %14, null
  br i1 %15, label %154, label %16

16:                                               ; preds = %7
  %17 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %14, i64 0, i32 5
  %18 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %17, align 8
  %19 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %14, i64 0, i32 4
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %16
  %23 = bitcast %struct.opj_tcd_tilecomp* %18 to i8*
  br label %145

24:                                               ; preds = %16, %84
  %25 = phi %struct.opj_tcd_tilecomp* [ %88, %84 ], [ %18, %16 ]
  %26 = phi i32 [ %89, %84 ], [ 0, %16 ]
  %27 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %25, i64 0, i32 7
  %28 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %27, align 8
  %29 = icmp eq %struct.opj_tcd_resolution* %28, null
  br i1 %29, label %72, label %30

30:                                               ; preds = %24
  %31 = bitcast %struct.opj_tcd_resolution* %28 to i8*
  %32 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %25, i64 0, i32 8
  %33 = load i32, i32* %32, align 8
  %34 = udiv i32 %33, 192
  %35 = icmp ugt i32 %33, 191
  br i1 %35, label %36, label %70

36:                                               ; preds = %30, %141
  %37 = phi %struct.opj_tcd_resolution* [ %142, %141 ], [ %28, %30 ]
  %38 = phi i32 [ %143, %141 ], [ 0, %30 ]
  %39 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %37, i64 0, i32 7, i64 0, i32 5
  %40 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %39, align 8
  %41 = icmp eq %struct.opj_tcd_precinct* %40, null
  br i1 %41, label %63, label %42

42:                                               ; preds = %36
  %43 = bitcast %struct.opj_tcd_precinct* %40 to i8*
  %44 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %37, i64 0, i32 7, i64 0, i32 6
  %45 = load i32, i32* %44, align 8
  %46 = udiv i32 %45, 56
  %47 = icmp ugt i32 %45, 55
  br i1 %47, label %48, label %61

48:                                               ; preds = %42, %48
  %49 = phi %struct.opj_tcd_precinct* [ %55, %48 ], [ %40, %42 ]
  %50 = phi i32 [ %56, %48 ], [ 0, %42 ]
  %51 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %49, i64 0, i32 8
  %52 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %51, align 8
  tail call void @opj_tgt_destroy(%struct.opj_tgt_tree* %52) #9
  store %struct.opj_tgt_tree* null, %struct.opj_tgt_tree** %51, align 8
  %53 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %49, i64 0, i32 9
  %54 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %53, align 8
  tail call void @opj_tgt_destroy(%struct.opj_tgt_tree* %54) #9
  store %struct.opj_tgt_tree* null, %struct.opj_tgt_tree** %53, align 8
  tail call void %12(%struct.opj_tcd_precinct* %49) #9, !callees !2
  %55 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %49, i64 1
  %56 = add nuw nsw i32 %50, 1
  %57 = icmp ult i32 %56, %46
  br i1 %57, label %48, label %58

58:                                               ; preds = %48
  %59 = bitcast %struct.opj_tcd_precinct** %39 to i8**
  %60 = load i8*, i8** %59, align 8
  br label %61

61:                                               ; preds = %58, %42
  %62 = phi i8* [ %60, %58 ], [ %43, %42 ]
  tail call void @opj_free(i8* %62) #9
  store %struct.opj_tcd_precinct* null, %struct.opj_tcd_precinct** %39, align 8
  br label %63

63:                                               ; preds = %61, %36
  %64 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %37, i64 0, i32 7, i64 1, i32 5
  %65 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %64, align 8
  %66 = icmp eq %struct.opj_tcd_precinct* %65, null
  br i1 %66, label %116, label %95

67:                                               ; preds = %141
  %68 = bitcast %struct.opj_tcd_resolution** %27 to i8**
  %69 = load i8*, i8** %68, align 8
  br label %70

70:                                               ; preds = %67, %30
  %71 = phi i8* [ %69, %67 ], [ %31, %30 ]
  tail call void @opj_free(i8* %71) #9
  store %struct.opj_tcd_resolution* null, %struct.opj_tcd_resolution** %27, align 8
  br label %72

72:                                               ; preds = %70, %24
  %73 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %25, i64 0, i32 10
  %74 = load i32, i32* %73, align 8
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %84, label %76

76:                                               ; preds = %72
  %77 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %25, i64 0, i32 9
  %78 = load i32*, i32** %77, align 8
  %79 = icmp eq i32* %78, null
  br i1 %79, label %84, label %80

80:                                               ; preds = %76
  %81 = bitcast i32* %78 to i8*
  tail call void @opj_image_data_free(i8* nonnull %81) #9
  store i32* null, i32** %77, align 8
  store i32 0, i32* %73, align 8
  %82 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %25, i64 0, i32 11
  %83 = bitcast i64* %82 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %83, i8 0, i64 16, i1 false) #9
  br label %84

84:                                               ; preds = %80, %76, %72
  %85 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %25, i64 0, i32 13
  %86 = bitcast i32** %85 to i8**
  %87 = load i8*, i8** %86, align 8
  tail call void @opj_image_data_free(i8* %87) #9
  %88 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %25, i64 1
  %89 = add nuw i32 %26, 1
  %90 = load i32, i32* %19, align 8
  %91 = icmp ult i32 %89, %90
  br i1 %91, label %24, label %92

92:                                               ; preds = %84
  %93 = bitcast %struct.opj_tcd_tilecomp** %17 to i8**
  %94 = load i8*, i8** %93, align 8
  br label %145

95:                                               ; preds = %63
  %96 = bitcast %struct.opj_tcd_precinct* %65 to i8*
  %97 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %37, i64 0, i32 7, i64 1, i32 6
  %98 = load i32, i32* %97, align 8
  %99 = udiv i32 %98, 56
  %100 = icmp ugt i32 %98, 55
  br i1 %100, label %101, label %114

101:                                              ; preds = %95, %101
  %102 = phi %struct.opj_tcd_precinct* [ %108, %101 ], [ %65, %95 ]
  %103 = phi i32 [ %109, %101 ], [ 0, %95 ]
  %104 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %102, i64 0, i32 8
  %105 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %104, align 8
  tail call void @opj_tgt_destroy(%struct.opj_tgt_tree* %105) #9
  store %struct.opj_tgt_tree* null, %struct.opj_tgt_tree** %104, align 8
  %106 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %102, i64 0, i32 9
  %107 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %106, align 8
  tail call void @opj_tgt_destroy(%struct.opj_tgt_tree* %107) #9
  store %struct.opj_tgt_tree* null, %struct.opj_tgt_tree** %106, align 8
  tail call void %12(%struct.opj_tcd_precinct* %102) #9, !callees !2
  %108 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %102, i64 1
  %109 = add nuw nsw i32 %103, 1
  %110 = icmp ult i32 %109, %99
  br i1 %110, label %101, label %111

111:                                              ; preds = %101
  %112 = bitcast %struct.opj_tcd_precinct** %64 to i8**
  %113 = load i8*, i8** %112, align 8
  br label %114

114:                                              ; preds = %111, %95
  %115 = phi i8* [ %113, %111 ], [ %96, %95 ]
  tail call void @opj_free(i8* %115) #9
  store %struct.opj_tcd_precinct* null, %struct.opj_tcd_precinct** %64, align 8
  br label %116

116:                                              ; preds = %114, %63
  %117 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %37, i64 0, i32 7, i64 2, i32 5
  %118 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %117, align 8
  %119 = icmp eq %struct.opj_tcd_precinct* %118, null
  br i1 %119, label %141, label %120

120:                                              ; preds = %116
  %121 = bitcast %struct.opj_tcd_precinct* %118 to i8*
  %122 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %37, i64 0, i32 7, i64 2, i32 6
  %123 = load i32, i32* %122, align 8
  %124 = udiv i32 %123, 56
  %125 = icmp ugt i32 %123, 55
  br i1 %125, label %126, label %139

126:                                              ; preds = %120, %126
  %127 = phi %struct.opj_tcd_precinct* [ %133, %126 ], [ %118, %120 ]
  %128 = phi i32 [ %134, %126 ], [ 0, %120 ]
  %129 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %127, i64 0, i32 8
  %130 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %129, align 8
  tail call void @opj_tgt_destroy(%struct.opj_tgt_tree* %130) #9
  store %struct.opj_tgt_tree* null, %struct.opj_tgt_tree** %129, align 8
  %131 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %127, i64 0, i32 9
  %132 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %131, align 8
  tail call void @opj_tgt_destroy(%struct.opj_tgt_tree* %132) #9
  store %struct.opj_tgt_tree* null, %struct.opj_tgt_tree** %131, align 8
  tail call void %12(%struct.opj_tcd_precinct* %127) #9, !callees !2
  %133 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %127, i64 1
  %134 = add nuw nsw i32 %128, 1
  %135 = icmp ult i32 %134, %124
  br i1 %135, label %126, label %136

136:                                              ; preds = %126
  %137 = bitcast %struct.opj_tcd_precinct** %117 to i8**
  %138 = load i8*, i8** %137, align 8
  br label %139

139:                                              ; preds = %136, %120
  %140 = phi i8* [ %138, %136 ], [ %121, %120 ]
  tail call void @opj_free(i8* %140) #9
  store %struct.opj_tcd_precinct* null, %struct.opj_tcd_precinct** %117, align 8
  br label %141

141:                                              ; preds = %139, %116
  %142 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %37, i64 1
  %143 = add nuw nsw i32 %38, 1
  %144 = icmp ult i32 %143, %34
  br i1 %144, label %36, label %67

145:                                              ; preds = %22, %92
  %146 = phi i8* [ %94, %92 ], [ %23, %22 ]
  tail call void @opj_free(i8* %146) #9
  store %struct.opj_tcd_tilecomp* null, %struct.opj_tcd_tilecomp** %17, align 8
  %147 = bitcast %struct.opj_tcd_image** %4 to i8***
  %148 = load i8**, i8*** %147, align 8
  %149 = load i8*, i8** %148, align 8
  tail call void @opj_free(i8* %149) #9
  %150 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %4, align 8
  %151 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %150, i64 0, i32 0
  store %struct.opj_tcd_tile* null, %struct.opj_tcd_tile** %151, align 8
  %152 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %4, align 8
  %153 = icmp eq %struct.opj_tcd_image* %152, null
  br i1 %153, label %157, label %154

154:                                              ; preds = %7, %145
  %155 = phi %struct.opj_tcd_image* [ %152, %145 ], [ %5, %7 ]
  %156 = bitcast %struct.opj_tcd_image* %155 to i8*
  tail call void @opj_free(i8* nonnull %156) #9
  store %struct.opj_tcd_image* null, %struct.opj_tcd_image** %4, align 8
  br label %157

157:                                              ; preds = %3, %145, %154
  %158 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 17
  %159 = bitcast i32** %158 to i8**
  %160 = load i8*, i8** %159, align 8
  tail call void @opj_free(i8* %160) #9
  %161 = bitcast %struct.opj_tcd* %0 to i8*
  tail call void @opj_free(i8* nonnull %161) #9
  br label %162

162:                                              ; preds = %1, %157
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_alloc_tile_component_data(%struct.opj_tcd_tilecomp* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 9
  %3 = load i32*, i32** %2, align 8
  %4 = icmp eq i32* %3, null
  %5 = bitcast i32* %3 to i8*
  %6 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 11
  %7 = load i64, i64* %6, align 8
  br i1 %4, label %16, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 12
  %10 = load i64, i64* %9, align 8
  %11 = icmp ugt i64 %7, %10
  br i1 %11, label %12, label %37

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 10
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %28

16:                                               ; preds = %1, %12
  %17 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 11
  %18 = tail call i8* @opj_image_data_alloc(i64 %7) #9
  %19 = bitcast i32** %2 to i8**
  store i8* %18, i8** %19, align 8
  %20 = icmp eq i8* %18, null
  %21 = load i64, i64* %17, align 8
  br i1 %20, label %22, label %24

22:                                               ; preds = %16
  %23 = icmp eq i64 %21, 0
  br i1 %23, label %24, label %37

24:                                               ; preds = %16, %22
  %25 = phi i64 [ 0, %22 ], [ %21, %16 ]
  %26 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 12
  store i64 %25, i64* %26, align 8
  %27 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 10
  store i32 1, i32* %27, align 8
  br label %37

28:                                               ; preds = %12
  %29 = bitcast i32** %2 to i8**
  tail call void @opj_image_data_free(i8* nonnull %5) #9
  %30 = load i64, i64* %6, align 8
  %31 = tail call i8* @opj_image_data_alloc(i64 %30) #9
  store i8* %31, i8** %29, align 8
  %32 = icmp eq i8* %31, null
  br i1 %32, label %33, label %35

33:                                               ; preds = %28
  store i32 0, i32* %13, align 8
  %34 = bitcast i64* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %34, i8 0, i64 16, i1 false)
  br label %37

35:                                               ; preds = %28
  %36 = load i64, i64* %6, align 8
  store i64 %36, i64* %9, align 8
  store i32 1, i32* %13, align 8
  br label %37

37:                                               ; preds = %8, %24, %35, %22, %33
  %38 = phi i32 [ 0, %33 ], [ 0, %22 ], [ 1, %35 ], [ 1, %24 ], [ 1, %8 ]
  ret i32 %38
}

declare hidden i8* @opj_image_data_alloc(i64) local_unnamed_addr #2

declare hidden void @opj_image_data_free(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_tcd_init_encode_tile(%struct.opj_tcd* nocapture readonly, i32, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %4 = tail call fastcc i32 @opj_tcd_init_tile(%struct.opj_tcd* %0, i32 %1, i32 1, i64 64, %struct.opj_event_mgr* %2)
  ret i32 %4
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc i32 @opj_tcd_init_tile(%struct.opj_tcd* nocapture readonly, i32, i32, i64, %struct.opj_event_mgr*) unnamed_addr #6 {
  %6 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 7
  %7 = load %struct.opj_cp*, %struct.opj_cp** %6, align 8
  %8 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %7, i64 0, i32 19
  %9 = load %struct.opj_tcp*, %struct.opj_tcp** %8, align 8
  %10 = zext i32 %1 to i64
  %11 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 5
  %12 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %11, align 8
  %13 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %12, i64 0, i32 0
  %14 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %13, align 8
  %15 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 15
  %16 = load %struct.opj_tccp*, %struct.opj_tccp** %15, align 8
  %17 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %14, i64 0, i32 5
  %18 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %17, align 8
  %19 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  %20 = load %struct.opj_image*, %struct.opj_image** %19, align 8
  %21 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %20, i64 0, i32 6
  %22 = load %struct.opj_image_comp*, %struct.opj_image_comp** %21, align 8
  %23 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %7, i64 0, i32 6
  %24 = load i32, i32* %23, align 8
  %25 = urem i32 %1, %24
  %26 = udiv i32 %1, %24
  %27 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %7, i64 0, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %7, i64 0, i32 3
  %30 = load i32, i32* %29, align 4
  %31 = mul i32 %30, %25
  %32 = add i32 %31, %28
  %33 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %20, i64 0, i32 0
  %34 = load i32, i32* %33, align 8
  %35 = icmp ugt i32 %32, %34
  %36 = select i1 %35, i32 %32, i32 %34
  %37 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %14, i64 0, i32 0
  store i32 %36, i32* %37, align 8
  %38 = load i32, i32* %29, align 4
  %39 = zext i32 %32 to i64
  %40 = zext i32 %38 to i64
  %41 = add nuw nsw i64 %40, %39
  %42 = lshr i64 %41, 32
  %43 = trunc i64 %42 to i32
  %44 = sub nsw i32 0, %43
  %45 = trunc i64 %41 to i32
  %46 = or i32 %44, %45
  %47 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %20, i64 0, i32 2
  %48 = load i32, i32* %47, align 8
  %49 = icmp ult i32 %46, %48
  %50 = select i1 %49, i32 %46, i32 %48
  %51 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %14, i64 0, i32 2
  store i32 %50, i32* %51, align 8
  %52 = icmp sgt i32 %36, -1
  %53 = icmp sgt i32 %50, %36
  %54 = and i1 %52, %53
  br i1 %54, label %57, label %55

55:                                               ; preds = %5
  %56 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i64 0, i64 0)) #9
  br label %755

57:                                               ; preds = %5
  %58 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %7, i64 0, i32 2
  %59 = load i32, i32* %58, align 8
  %60 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %7, i64 0, i32 4
  %61 = load i32, i32* %60, align 8
  %62 = mul i32 %61, %26
  %63 = add i32 %62, %59
  %64 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %20, i64 0, i32 1
  %65 = load i32, i32* %64, align 4
  %66 = icmp ugt i32 %63, %65
  %67 = select i1 %66, i32 %63, i32 %65
  %68 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %14, i64 0, i32 1
  store i32 %67, i32* %68, align 4
  %69 = load i32, i32* %60, align 8
  %70 = zext i32 %63 to i64
  %71 = zext i32 %69 to i64
  %72 = add nuw nsw i64 %71, %70
  %73 = lshr i64 %72, 32
  %74 = trunc i64 %73 to i32
  %75 = sub nsw i32 0, %74
  %76 = trunc i64 %72 to i32
  %77 = or i32 %75, %76
  %78 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %20, i64 0, i32 3
  %79 = load i32, i32* %78, align 4
  %80 = icmp ult i32 %77, %79
  %81 = select i1 %80, i32 %77, i32 %79
  %82 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %14, i64 0, i32 3
  store i32 %81, i32* %82, align 4
  %83 = icmp sgt i32 %67, -1
  %84 = icmp sgt i32 %81, %67
  %85 = and i1 %83, %84
  br i1 %85, label %88, label %86

86:                                               ; preds = %57
  %87 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i64 0, i64 0)) #9
  br label %755

88:                                               ; preds = %57
  %89 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %16, i64 0, i32 1
  %90 = load i32, i32* %89, align 4
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %100, label %92

92:                                               ; preds = %88
  %93 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %14, i64 0, i32 4
  %94 = load i32, i32* %93, align 8
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %755, label %96

96:                                               ; preds = %92
  %97 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %7, i64 0, i32 20, i32 0, i32 0
  %98 = icmp ne i32 %2, 0
  %99 = trunc i64 %3 to i32
  br label %102

100:                                              ; preds = %88
  %101 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.4, i64 0, i64 0)) #9
  br label %755

102:                                              ; preds = %96, %748
  %103 = phi i32 [ 0, %96 ], [ %752, %748 ]
  %104 = phi %struct.opj_tccp* [ %16, %96 ], [ %749, %748 ]
  %105 = phi %struct.opj_image_comp* [ %22, %96 ], [ %751, %748 ]
  %106 = phi %struct.opj_tcd_tilecomp* [ %18, %96 ], [ %750, %748 ]
  %107 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %105, i64 0, i32 9
  store i32 0, i32* %107, align 4
  %108 = load i32, i32* %37, align 8
  %109 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %105, i64 0, i32 0
  %110 = load i32, i32* %109, align 8
  %111 = sext i32 %108 to i64
  %112 = sext i32 %110 to i64
  %113 = add nsw i64 %111, -1
  %114 = add nsw i64 %113, %112
  %115 = sdiv i64 %114, %112
  %116 = trunc i64 %115 to i32
  %117 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %106, i64 0, i32 0
  store i32 %116, i32* %117, align 8
  %118 = load i32, i32* %68, align 4
  %119 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %105, i64 0, i32 1
  %120 = load i32, i32* %119, align 4
  %121 = sext i32 %118 to i64
  %122 = sext i32 %120 to i64
  %123 = add nsw i64 %121, -1
  %124 = add nsw i64 %123, %122
  %125 = sdiv i64 %124, %122
  %126 = trunc i64 %125 to i32
  %127 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %106, i64 0, i32 1
  store i32 %126, i32* %127, align 4
  %128 = load i32, i32* %51, align 8
  %129 = load i32, i32* %109, align 8
  %130 = sext i32 %128 to i64
  %131 = sext i32 %129 to i64
  %132 = add nsw i64 %130, -1
  %133 = add nsw i64 %132, %131
  %134 = sdiv i64 %133, %131
  %135 = trunc i64 %134 to i32
  %136 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %106, i64 0, i32 2
  store i32 %135, i32* %136, align 8
  %137 = load i32, i32* %82, align 4
  %138 = load i32, i32* %119, align 4
  %139 = sext i32 %137 to i64
  %140 = sext i32 %138 to i64
  %141 = add nsw i64 %139, -1
  %142 = add nsw i64 %141, %140
  %143 = sdiv i64 %142, %140
  %144 = trunc i64 %143 to i32
  %145 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %106, i64 0, i32 3
  store i32 %144, i32* %145, align 4
  %146 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %106, i64 0, i32 4
  store i32 %103, i32* %146, align 8
  %147 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %104, i64 0, i32 1
  %148 = load i32, i32* %147, align 4
  %149 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %106, i64 0, i32 5
  store i32 %148, i32* %149, align 4
  %150 = load i32, i32* %147, align 4
  %151 = load i32, i32* %97, align 8
  %152 = icmp ult i32 %150, %151
  %153 = sub i32 %150, %151
  %154 = select i1 %152, i32 1, i32 %153
  %155 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %106, i64 0, i32 6
  store i32 %154, i32* %155, align 8
  br i1 %98, label %156, label %182

156:                                              ; preds = %102
  %157 = icmp sgt i32 %135, %116
  %158 = icmp sgt i32 %144, %126
  %159 = and i1 %157, %158
  br i1 %159, label %162, label %160

160:                                              ; preds = %156
  %161 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0)) #9
  br label %755

162:                                              ; preds = %156
  %163 = sub nsw i64 %134, %115
  %164 = shl i64 %163, 32
  %165 = ashr exact i64 %164, 32
  %166 = sub nsw i32 %144, %126
  %167 = sext i32 %166 to i64
  %168 = icmp eq i32 %166, 0
  br i1 %168, label %174, label %169

169:                                              ; preds = %162
  %170 = udiv i64 -1, %167
  %171 = icmp ult i64 %170, %165
  br i1 %171, label %172, label %174

172:                                              ; preds = %169
  %173 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0)) #9
  br label %755

174:                                              ; preds = %162, %169
  %175 = mul nsw i64 %165, %167
  %176 = icmp ugt i64 %175, 4611686018427387903
  br i1 %176, label %177, label %179

177:                                              ; preds = %174
  %178 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0)) #9
  br label %755

179:                                              ; preds = %174
  %180 = shl i64 %175, 2
  %181 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %106, i64 0, i32 11
  store i64 %180, i64* %181, align 8
  br label %182

182:                                              ; preds = %179, %102
  %183 = mul i32 %148, 192
  %184 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %106, i64 0, i32 13
  %185 = bitcast i32** %184 to i8**
  %186 = load i8*, i8** %185, align 8
  tail call void @opj_image_data_free(i8* %186) #9
  %187 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %106, i64 0, i32 7
  %188 = bitcast i32** %184 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %188, i8 0, i64 24, i1 false)
  %189 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %187, align 8
  %190 = icmp eq %struct.opj_tcd_resolution* %189, null
  br i1 %190, label %191, label %198

191:                                              ; preds = %182
  %192 = zext i32 %183 to i64
  %193 = tail call i8* @opj_malloc(i64 %192) #9
  %194 = bitcast %struct.opj_tcd_resolution** %187 to i8**
  store i8* %193, i8** %194, align 8
  %195 = icmp eq i8* %193, null
  br i1 %195, label %755, label %196

196:                                              ; preds = %191
  %197 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %106, i64 0, i32 8
  store i32 %183, i32* %197, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %193, i8 0, i64 %192, i1 false)
  br label %218

198:                                              ; preds = %182
  %199 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %106, i64 0, i32 8
  %200 = load i32, i32* %199, align 8
  %201 = icmp ugt i32 %183, %200
  br i1 %201, label %202, label %218

202:                                              ; preds = %198
  %203 = bitcast %struct.opj_tcd_resolution* %189 to i8*
  %204 = zext i32 %183 to i64
  %205 = tail call i8* @opj_realloc(i8* nonnull %203, i64 %204) #9
  %206 = icmp eq i8* %205, null
  br i1 %206, label %214, label %207

207:                                              ; preds = %202
  %208 = bitcast %struct.opj_tcd_resolution** %187 to i8**
  store i8* %205, i8** %208, align 8
  %209 = load i32, i32* %199, align 8
  %210 = zext i32 %209 to i64
  %211 = getelementptr inbounds i8, i8* %205, i64 %210
  %212 = sub i32 %183, %209
  %213 = zext i32 %212 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %211, i8 0, i64 %213, i1 false)
  store i32 %183, i32* %199, align 8
  br label %218

214:                                              ; preds = %202
  %215 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.6, i64 0, i64 0)) #9
  %216 = bitcast %struct.opj_tcd_resolution** %187 to i8**
  %217 = load i8*, i8** %216, align 8
  tail call void @opj_free(i8* %217) #9
  store %struct.opj_tcd_resolution* null, %struct.opj_tcd_resolution** %187, align 8
  store i32 0, i32* %199, align 8
  br label %755

218:                                              ; preds = %207, %198, %196
  %219 = load i32, i32* %149, align 4
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %748, label %221

221:                                              ; preds = %218
  %222 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %104, i64 0, i32 7, i64 0
  %223 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %187, align 8
  %224 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %104, i64 0, i32 2
  %225 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %104, i64 0, i32 3
  %226 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %104, i64 0, i32 5
  %227 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %105, i64 0, i32 6
  %228 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %104, i64 0, i32 8
  br label %229

229:                                              ; preds = %221, %743
  %230 = phi i32 [ 0, %221 ], [ %745, %743 ]
  %231 = phi i32 [ %219, %221 ], [ %234, %743 ]
  %232 = phi %struct.opj_stepsize* [ %222, %221 ], [ %740, %743 ]
  %233 = phi %struct.opj_tcd_resolution* [ %223, %221 ], [ %744, %743 ]
  %234 = add i32 %231, -1
  %235 = load i32, i32* %117, align 8
  %236 = sext i32 %235 to i64
  %237 = zext i32 %234 to i64
  %238 = shl nsw i64 -1, %237
  %239 = xor i64 %238, -1
  %240 = add i64 %239, %236
  %241 = ashr i64 %240, %237
  %242 = trunc i64 %241 to i32
  %243 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %233, i64 0, i32 0
  store i32 %242, i32* %243, align 8
  %244 = load i32, i32* %127, align 4
  %245 = sext i32 %244 to i64
  %246 = add i64 %239, %245
  %247 = ashr i64 %246, %237
  %248 = trunc i64 %247 to i32
  %249 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %233, i64 0, i32 1
  store i32 %248, i32* %249, align 4
  %250 = load i32, i32* %136, align 8
  %251 = sext i32 %250 to i64
  %252 = add i64 %239, %251
  %253 = ashr i64 %252, %237
  %254 = trunc i64 %253 to i32
  %255 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %233, i64 0, i32 2
  store i32 %254, i32* %255, align 8
  %256 = load i32, i32* %145, align 4
  %257 = sext i32 %256 to i64
  %258 = add i64 %239, %257
  %259 = ashr i64 %258, %237
  %260 = trunc i64 %259 to i32
  %261 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %233, i64 0, i32 3
  store i32 %260, i32* %261, align 4
  %262 = zext i32 %230 to i64
  %263 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %104, i64 0, i32 10, i64 %262
  %264 = load i32, i32* %263, align 4
  %265 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %104, i64 0, i32 11, i64 %262
  %266 = load i32, i32* %265, align 4
  %267 = shl i32 -1, %264
  %268 = and i32 %267, %242
  %269 = shl i32 -1, %266
  %270 = and i32 %269, %248
  %271 = shl i64 %253, 32
  %272 = ashr exact i64 %271, 32
  %273 = zext i32 %264 to i64
  %274 = shl i64 1, %273
  %275 = add nsw i64 %272, -1
  %276 = add i64 %275, %274
  %277 = ashr i64 %276, %273
  %278 = trunc i64 %277 to i32
  %279 = shl i32 %278, %264
  %280 = icmp slt i32 %279, 0
  br i1 %280, label %281, label %283

281:                                              ; preds = %229
  %282 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0)) #9
  br label %755

283:                                              ; preds = %229
  %284 = shl i64 %259, 32
  %285 = ashr exact i64 %284, 32
  %286 = zext i32 %266 to i64
  %287 = shl nsw i64 -1, %286
  %288 = xor i64 %287, -1
  %289 = add i64 %285, %288
  %290 = ashr i64 %289, %286
  %291 = trunc i64 %290 to i32
  %292 = shl i32 %291, %266
  %293 = icmp slt i32 %292, 0
  br i1 %293, label %294, label %296

294:                                              ; preds = %283
  %295 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0)) #9
  br label %755

296:                                              ; preds = %283
  %297 = icmp eq i32 %242, %254
  %298 = sub nsw i32 %279, %268
  %299 = ashr i32 %298, %264
  %300 = select i1 %297, i32 0, i32 %299
  %301 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %233, i64 0, i32 4
  store i32 %300, i32* %301, align 8
  %302 = icmp eq i32 %248, %260
  %303 = sub nsw i32 %292, %270
  %304 = ashr i32 %303, %266
  %305 = select i1 %302, i32 0, i32 %304
  %306 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %233, i64 0, i32 5
  store i32 %305, i32* %306, align 4
  %307 = icmp eq i32 %300, 0
  br i1 %307, label %313, label %308

308:                                              ; preds = %296
  %309 = udiv i32 -1, %299
  %310 = icmp ult i32 %309, %305
  br i1 %310, label %311, label %313

311:                                              ; preds = %308
  %312 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0)) #9
  br label %755

313:                                              ; preds = %296, %308
  %314 = mul i32 %305, %300
  %315 = icmp ugt i32 %314, 76695844
  br i1 %315, label %316, label %318

316:                                              ; preds = %313
  %317 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0)) #9
  br label %755

318:                                              ; preds = %313
  %319 = mul i32 %314, 56
  %320 = icmp eq i32 %230, 0
  br i1 %320, label %332, label %321

321:                                              ; preds = %318
  %322 = sext i32 %268 to i64
  %323 = add nsw i64 %322, 1
  %324 = lshr i64 %323, 1
  %325 = trunc i64 %324 to i32
  %326 = sext i32 %270 to i64
  %327 = add nsw i64 %326, 1
  %328 = lshr i64 %327, 1
  %329 = trunc i64 %328 to i32
  %330 = add i32 %264, -1
  %331 = add i32 %266, -1
  br label %332

332:                                              ; preds = %321, %318
  %333 = phi i32 [ 3, %321 ], [ 1, %318 ]
  %334 = phi i32 [ %325, %321 ], [ %268, %318 ]
  %335 = phi i32 [ %329, %321 ], [ %270, %318 ]
  %336 = phi i32 [ %330, %321 ], [ %264, %318 ]
  %337 = phi i32 [ %331, %321 ], [ %266, %318 ]
  %338 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %233, i64 0, i32 6
  store i32 %333, i32* %338, align 8
  %339 = load i32, i32* %224, align 4
  %340 = icmp ult i32 %339, %336
  %341 = select i1 %340, i32 %339, i32 %336
  %342 = load i32, i32* %225, align 4
  %343 = icmp ult i32 %342, %337
  %344 = select i1 %343, i32 %342, i32 %337
  %345 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %233, i64 0, i32 7, i64 0
  %346 = zext i32 %231 to i64
  %347 = shl i64 1, %346
  %348 = icmp ne i32 %314, 0
  %349 = zext i32 %319 to i64
  %350 = icmp eq i32 %314, 0
  %351 = shl i32 1, %336
  %352 = shl i32 1, %337
  %353 = shl i32 -1, %341
  %354 = shl i32 -1, %344
  %355 = zext i32 %341 to i64
  %356 = shl nsw i64 -1, %355
  %357 = xor i64 %356, -1
  %358 = zext i32 %344 to i64
  %359 = shl nsw i64 -1, %358
  %360 = xor i64 %359, -1
  %361 = shl i32 1, %341
  %362 = shl i32 1, %344
  br label %363

363:                                              ; preds = %332, %737
  %364 = phi i32 [ 0, %332 ], [ %738, %737 ]
  %365 = phi %struct.opj_stepsize* [ %232, %332 ], [ %740, %737 ]
  %366 = phi %struct.opj_tcd_band* [ %345, %332 ], [ %739, %737 ]
  br i1 %320, label %367, label %378

367:                                              ; preds = %363
  %368 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %366, i64 0, i32 4
  store i32 0, i32* %368, align 8
  %369 = load i32, i32* %117, align 8
  %370 = sext i32 %369 to i64
  %371 = add i64 %239, %370
  %372 = ashr i64 %371, %237
  %373 = trunc i64 %372 to i32
  %374 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %366, i64 0, i32 0
  store i32 %373, i32* %374, align 8
  %375 = load i32, i32* %127, align 4
  %376 = sext i32 %375 to i64
  %377 = add i64 %239, %376
  br label %400

378:                                              ; preds = %363
  %379 = add nuw i32 %364, 1
  %380 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %366, i64 0, i32 4
  store i32 %379, i32* %380, align 8
  %381 = and i32 %379, 1
  %382 = lshr i32 %379, 1
  %383 = load i32, i32* %117, align 8
  %384 = sext i32 %383 to i64
  %385 = zext i32 %381 to i64
  %386 = shl i64 %385, %237
  %387 = xor i64 %386, -1
  %388 = add i64 %347, %387
  %389 = add i64 %388, %384
  %390 = ashr i64 %389, %346
  %391 = trunc i64 %390 to i32
  %392 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %366, i64 0, i32 0
  store i32 %391, i32* %392, align 8
  %393 = load i32, i32* %127, align 4
  %394 = sext i32 %393 to i64
  %395 = zext i32 %382 to i64
  %396 = shl i64 %395, %237
  %397 = xor i64 %396, -1
  %398 = add i64 %347, %397
  %399 = add i64 %398, %394
  br label %400

400:                                              ; preds = %378, %367
  %401 = phi i64 [ %346, %378 ], [ %237, %367 ]
  %402 = phi i64 [ %399, %378 ], [ %377, %367 ]
  %403 = phi i64 [ %388, %378 ], [ %239, %367 ]
  %404 = phi i64 [ %398, %378 ], [ %239, %367 ]
  %405 = phi i32 [ %379, %378 ], [ 0, %367 ]
  %406 = phi i32 [ %391, %378 ], [ %373, %367 ]
  %407 = ashr i64 %402, %401
  %408 = trunc i64 %407 to i32
  %409 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %366, i64 0, i32 1
  store i32 %408, i32* %409, align 4
  %410 = load i32, i32* %136, align 8
  %411 = sext i32 %410 to i64
  %412 = add i64 %403, %411
  %413 = ashr i64 %412, %401
  %414 = trunc i64 %413 to i32
  %415 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %366, i64 0, i32 2
  store i32 %414, i32* %415, align 8
  %416 = load i32, i32* %145, align 4
  %417 = sext i32 %416 to i64
  %418 = add i64 %404, %417
  %419 = ashr i64 %418, %401
  %420 = trunc i64 %419 to i32
  %421 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %366, i64 0, i32 3
  store i32 %420, i32* %421, align 4
  br i1 %98, label %422, label %426

422:                                              ; preds = %400
  %423 = icmp eq i32 %406, %414
  %424 = icmp eq i32 %408, %420
  %425 = or i1 %423, %424
  br i1 %425, label %737, label %431

426:                                              ; preds = %400
  %427 = load i32, i32* %226, align 4
  %428 = icmp eq i32 %427, 0
  %429 = icmp eq i32 %405, 0
  %430 = or i1 %428, %429
  br i1 %430, label %436, label %433

431:                                              ; preds = %422
  %432 = icmp eq i32 %405, 0
  br i1 %432, label %436, label %433

433:                                              ; preds = %426, %431
  %434 = icmp eq i32 %405, 3
  %435 = select i1 %434, i32 2, i32 1
  br label %436

436:                                              ; preds = %433, %431, %426
  %437 = phi i32 [ 0, %426 ], [ %435, %433 ], [ 0, %431 ]
  %438 = load i32, i32* %227, align 8
  %439 = add nsw i32 %438, %437
  %440 = getelementptr inbounds %struct.opj_stepsize, %struct.opj_stepsize* %365, i64 0, i32 1
  %441 = load i32, i32* %440, align 4
  %442 = sitofp i32 %441 to double
  %443 = fmul double %442, 0x3F40000000000000
  %444 = fadd double %443, 1.000000e+00
  %445 = getelementptr inbounds %struct.opj_stepsize, %struct.opj_stepsize* %365, i64 0, i32 0
  %446 = load i32, i32* %445, align 4
  %447 = sub i32 %439, %446
  %448 = tail call double @ldexp(double 1.000000e+00, i32 %447) #9
  %449 = fmul double %448, %444
  %450 = fptrunc double %449 to float
  %451 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %366, i64 0, i32 8
  store float %450, float* %451, align 8
  %452 = load i32, i32* %445, align 4
  %453 = load i32, i32* %228, align 4
  %454 = add i32 %452, -1
  %455 = add i32 %454, %453
  %456 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %366, i64 0, i32 7
  store i32 %455, i32* %456, align 4
  %457 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %366, i64 0, i32 5
  %458 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %457, align 8
  %459 = icmp eq %struct.opj_tcd_precinct* %458, null
  %460 = and i1 %348, %459
  br i1 %460, label %461, label %469

461:                                              ; preds = %436
  %462 = tail call i8* @opj_malloc(i64 %349) #9
  %463 = bitcast %struct.opj_tcd_precinct** %457 to i8**
  store i8* %462, i8** %463, align 8
  %464 = icmp eq i8* %462, null
  br i1 %464, label %465, label %467

465:                                              ; preds = %461
  %466 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.8, i64 0, i64 0)) #9
  br label %755

467:                                              ; preds = %461
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %462, i8 0, i64 %349, i1 false)
  %468 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %366, i64 0, i32 6
  br label %488

469:                                              ; preds = %436
  %470 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %366, i64 0, i32 6
  %471 = load i32, i32* %470, align 8
  %472 = icmp ult i32 %471, %319
  br i1 %472, label %473, label %490

473:                                              ; preds = %469
  %474 = bitcast %struct.opj_tcd_precinct* %458 to i8*
  %475 = tail call i8* @opj_realloc(i8* %474, i64 %349) #9
  %476 = icmp eq i8* %475, null
  br i1 %476, label %484, label %477

477:                                              ; preds = %473
  %478 = bitcast %struct.opj_tcd_precinct** %457 to i8**
  store i8* %475, i8** %478, align 8
  %479 = load i32, i32* %470, align 8
  %480 = zext i32 %479 to i64
  %481 = getelementptr inbounds i8, i8* %475, i64 %480
  %482 = sub i32 %319, %479
  %483 = zext i32 %482 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %481, i8 0, i64 %483, i1 false)
  br label %488

484:                                              ; preds = %473
  %485 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.8, i64 0, i64 0)) #9
  %486 = bitcast %struct.opj_tcd_precinct** %457 to i8**
  %487 = load i8*, i8** %486, align 8
  tail call void @opj_free(i8* %487) #9
  store %struct.opj_tcd_precinct* null, %struct.opj_tcd_precinct** %457, align 8
  store i32 0, i32* %470, align 8
  br label %755

488:                                              ; preds = %467, %477
  %489 = phi i32* [ %470, %477 ], [ %468, %467 ]
  store i32 %319, i32* %489, align 8
  br label %490

490:                                              ; preds = %488, %469
  br i1 %350, label %737, label %491

491:                                              ; preds = %490
  %492 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %457, align 8
  %493 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %366, i64 0, i32 0
  %494 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %366, i64 0, i32 1
  %495 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %366, i64 0, i32 2
  br label %496

496:                                              ; preds = %733, %491
  %497 = phi i32 [ 0, %491 ], [ %735, %733 ]
  %498 = phi %struct.opj_tcd_precinct* [ %492, %491 ], [ %734, %733 ]
  %499 = load i32, i32* %301, align 8
  %500 = urem i32 %497, %499
  %501 = shl i32 %500, %336
  %502 = add nsw i32 %501, %334
  %503 = udiv i32 %497, %499
  %504 = shl i32 %503, %337
  %505 = add nsw i32 %504, %335
  %506 = add nsw i32 %502, %351
  %507 = add nsw i32 %505, %352
  %508 = load i32, i32* %493, align 8
  %509 = icmp sgt i32 %502, %508
  %510 = select i1 %509, i32 %502, i32 %508
  %511 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %498, i64 0, i32 0
  store i32 %510, i32* %511, align 8
  %512 = load i32, i32* %494, align 4
  %513 = icmp sgt i32 %505, %512
  %514 = select i1 %513, i32 %505, i32 %512
  %515 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %498, i64 0, i32 1
  store i32 %514, i32* %515, align 4
  %516 = load i32, i32* %495, align 8
  %517 = icmp slt i32 %506, %516
  %518 = select i1 %517, i32 %506, i32 %516
  %519 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %498, i64 0, i32 2
  store i32 %518, i32* %519, align 8
  %520 = load i32, i32* %421, align 4
  %521 = icmp slt i32 %507, %520
  %522 = select i1 %521, i32 %507, i32 %520
  %523 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %498, i64 0, i32 3
  store i32 %522, i32* %523, align 4
  %524 = and i32 %510, %353
  %525 = and i32 %514, %354
  %526 = sext i32 %518 to i64
  %527 = add i64 %357, %526
  %528 = ashr i64 %527, %355
  %529 = trunc i64 %528 to i32
  %530 = shl i32 %529, %341
  %531 = sext i32 %522 to i64
  %532 = add i64 %360, %531
  %533 = ashr i64 %532, %358
  %534 = trunc i64 %533 to i32
  %535 = shl i32 %534, %344
  %536 = sub nsw i32 %530, %524
  %537 = ashr i32 %536, %341
  %538 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %498, i64 0, i32 4
  store i32 %537, i32* %538, align 8
  %539 = sub nsw i32 %535, %525
  %540 = ashr i32 %539, %344
  %541 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %498, i64 0, i32 5
  store i32 %540, i32* %541, align 4
  %542 = icmp eq i32 %537, 0
  br i1 %542, label %546, label %543

543:                                              ; preds = %496
  %544 = udiv i32 -1, %537
  %545 = icmp ult i32 %544, %540
  br i1 %545, label %755, label %546

546:                                              ; preds = %496, %543
  %547 = mul i32 %540, %537
  %548 = udiv i32 -1, %99
  %549 = icmp ult i32 %548, %547
  br i1 %549, label %550, label %552

550:                                              ; preds = %546
  %551 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.9, i64 0, i64 0)) #9
  br label %755

552:                                              ; preds = %546
  %553 = mul i32 %547, %99
  %554 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %498, i64 0, i32 6
  %555 = bitcast %union.anon* %554 to i8**
  %556 = load i8*, i8** %555, align 8
  %557 = icmp eq i8* %556, null
  %558 = icmp ne i32 %547, 0
  %559 = and i1 %558, %557
  br i1 %559, label %560, label %566

560:                                              ; preds = %552
  %561 = zext i32 %553 to i64
  %562 = tail call i8* @opj_malloc(i64 %561) #9
  store i8* %562, i8** %555, align 8
  %563 = icmp eq i8* %562, null
  br i1 %563, label %755, label %564

564:                                              ; preds = %560
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %562, i8 0, i64 %561, i1 false)
  %565 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %498, i64 0, i32 7
  br label %584

566:                                              ; preds = %552
  %567 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %498, i64 0, i32 7
  %568 = load i32, i32* %567, align 8
  %569 = icmp ugt i32 %553, %568
  br i1 %569, label %570, label %586

570:                                              ; preds = %566
  %571 = zext i32 %553 to i64
  %572 = tail call i8* @opj_realloc(i8* %556, i64 %571) #9
  %573 = icmp eq i8* %572, null
  br i1 %573, label %580, label %574

574:                                              ; preds = %570
  store i8* %572, i8** %555, align 8
  %575 = load i32, i32* %567, align 8
  %576 = zext i32 %575 to i64
  %577 = getelementptr inbounds i8, i8* %572, i64 %576
  %578 = sub i32 %553, %575
  %579 = zext i32 %578 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %577, i8 0, i64 %579, i1 false)
  br label %584

580:                                              ; preds = %570
  %581 = bitcast %union.anon* %554 to i8**
  %582 = load i8*, i8** %581, align 8
  tail call void @opj_free(i8* %582) #9
  store i8* null, i8** %581, align 8
  store i32 0, i32* %567, align 8
  %583 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.10, i64 0, i64 0)) #9
  br label %755

584:                                              ; preds = %564, %574
  %585 = phi i32* [ %567, %574 ], [ %565, %564 ]
  store i32 %553, i32* %585, align 8
  br label %586

586:                                              ; preds = %584, %566
  %587 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %498, i64 0, i32 8
  %588 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %587, align 8
  %589 = icmp eq %struct.opj_tgt_tree* %588, null
  %590 = load i32, i32* %538, align 8
  %591 = load i32, i32* %541, align 4
  br i1 %589, label %592, label %594

592:                                              ; preds = %586
  %593 = tail call %struct.opj_tgt_tree* @opj_tgt_create(i32 %590, i32 %591, %struct.opj_event_mgr* %4) #9
  br label %596

594:                                              ; preds = %586
  %595 = tail call %struct.opj_tgt_tree* @opj_tgt_init(%struct.opj_tgt_tree* nonnull %588, i32 %590, i32 %591, %struct.opj_event_mgr* %4) #9
  br label %596

596:                                              ; preds = %594, %592
  %597 = phi %struct.opj_tgt_tree* [ %593, %592 ], [ %595, %594 ]
  store %struct.opj_tgt_tree* %597, %struct.opj_tgt_tree** %587, align 8
  %598 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %498, i64 0, i32 9
  %599 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %598, align 8
  %600 = icmp eq %struct.opj_tgt_tree* %599, null
  %601 = load i32, i32* %538, align 8
  %602 = load i32, i32* %541, align 4
  br i1 %600, label %603, label %605

603:                                              ; preds = %596
  %604 = tail call %struct.opj_tgt_tree* @opj_tgt_create(i32 %601, i32 %602, %struct.opj_event_mgr* %4) #9
  br label %607

605:                                              ; preds = %596
  %606 = tail call %struct.opj_tgt_tree* @opj_tgt_init(%struct.opj_tgt_tree* nonnull %599, i32 %601, i32 %602, %struct.opj_event_mgr* %4) #9
  br label %607

607:                                              ; preds = %605, %603
  %608 = phi %struct.opj_tgt_tree* [ %604, %603 ], [ %606, %605 ]
  store %struct.opj_tgt_tree* %608, %struct.opj_tgt_tree** %598, align 8
  %609 = icmp eq i32 %547, 0
  br i1 %609, label %733, label %610

610:                                              ; preds = %607
  %611 = bitcast %union.anon* %554 to %struct.opj_tcd_cblk_dec**
  %612 = getelementptr inbounds %union.anon, %union.anon* %554, i64 0, i32 0
  %613 = zext i32 %547 to i64
  br label %614

614:                                              ; preds = %730, %610
  %615 = phi i64 [ 0, %610 ], [ %731, %730 ]
  %616 = load i32, i32* %538, align 8
  %617 = trunc i64 %615 to i32
  %618 = urem i32 %617, %616
  %619 = shl i32 %618, %341
  %620 = add nsw i32 %619, %524
  %621 = udiv i32 %617, %616
  %622 = shl i32 %621, %344
  %623 = add nsw i32 %622, %525
  %624 = add nsw i32 %620, %361
  %625 = add nsw i32 %623, %362
  br i1 %98, label %626, label %683

626:                                              ; preds = %614
  %627 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %612, align 8
  %628 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %627, i64 %615, i32 1
  %629 = load %struct.opj_tcd_layer*, %struct.opj_tcd_layer** %628, align 8
  %630 = icmp eq %struct.opj_tcd_layer* %629, null
  br i1 %630, label %631, label %635

631:                                              ; preds = %626
  %632 = tail call i8* @opj_calloc(i64 100, i64 24) #9
  %633 = bitcast %struct.opj_tcd_layer** %628 to i8**
  store i8* %632, i8** %633, align 8
  %634 = icmp eq i8* %632, null
  br i1 %634, label %755, label %635

635:                                              ; preds = %631, %626
  %636 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %627, i64 %615, i32 2
  %637 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %636, align 8
  %638 = icmp eq %struct.opj_tcd_pass* %637, null
  br i1 %638, label %639, label %643

639:                                              ; preds = %635
  %640 = tail call i8* @opj_calloc(i64 100, i64 24) #9
  %641 = bitcast %struct.opj_tcd_pass** %636 to i8**
  store i8* %640, i8** %641, align 8
  %642 = icmp eq i8* %640, null
  br i1 %642, label %755, label %643

643:                                              ; preds = %639, %635
  %644 = load i32, i32* %511, align 8
  %645 = icmp sgt i32 %620, %644
  %646 = select i1 %645, i32 %620, i32 %644
  %647 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %627, i64 %615, i32 3
  store i32 %646, i32* %647, align 8
  %648 = load i32, i32* %515, align 4
  %649 = icmp sgt i32 %623, %648
  %650 = select i1 %649, i32 %623, i32 %648
  %651 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %627, i64 %615, i32 4
  store i32 %650, i32* %651, align 4
  %652 = load i32, i32* %519, align 8
  %653 = icmp slt i32 %624, %652
  %654 = select i1 %653, i32 %624, i32 %652
  %655 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %627, i64 %615, i32 5
  store i32 %654, i32* %655, align 8
  %656 = load i32, i32* %523, align 4
  %657 = icmp slt i32 %625, %656
  %658 = select i1 %657, i32 %625, i32 %656
  %659 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %627, i64 %615, i32 6
  store i32 %658, i32* %659, align 4
  %660 = sub nsw i32 %654, %646
  %661 = sub nsw i32 %658, %650
  %662 = shl i32 %660, 2
  %663 = mul i32 %661, %662
  %664 = add i32 %663, 74
  %665 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %627, i64 %615, i32 9
  %666 = load i32, i32* %665, align 8
  %667 = icmp ugt i32 %664, %666
  br i1 %667, label %668, label %730

668:                                              ; preds = %643
  %669 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %627, i64 %615, i32 0
  %670 = load i8*, i8** %669, align 8
  %671 = icmp eq i8* %670, null
  br i1 %671, label %674, label %672

672:                                              ; preds = %668
  %673 = getelementptr inbounds i8, i8* %670, i64 -1
  tail call void @opj_free(i8* %673) #9
  br label %674

674:                                              ; preds = %672, %668
  %675 = add i32 %663, 75
  %676 = zext i32 %675 to i64
  %677 = tail call i8* @opj_malloc(i64 %676) #9
  store i8* %677, i8** %669, align 8
  %678 = icmp eq i8* %677, null
  br i1 %678, label %682, label %679

679:                                              ; preds = %674
  store i32 %664, i32* %665, align 8
  store i8 0, i8* %677, align 1
  %680 = load i8*, i8** %669, align 8
  %681 = getelementptr inbounds i8, i8* %680, i64 1
  store i8* %681, i8** %669, align 8
  br label %730

682:                                              ; preds = %674
  store i32 0, i32* %665, align 8
  br label %755

683:                                              ; preds = %614
  %684 = load %struct.opj_tcd_cblk_dec*, %struct.opj_tcd_cblk_dec** %611, align 8
  %685 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %684, i64 %615
  %686 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %685, i64 0, i32 0
  %687 = load %struct.opj_tcd_seg*, %struct.opj_tcd_seg** %686, align 8
  %688 = bitcast %struct.opj_tcd_seg* %687 to i8*
  %689 = icmp eq %struct.opj_tcd_seg* %687, null
  br i1 %689, label %690, label %696

690:                                              ; preds = %683
  %691 = tail call i8* @opj_calloc(i64 10, i64 24) #9
  %692 = bitcast %struct.opj_tcd_cblk_dec* %685 to i8**
  store i8* %691, i8** %692, align 8
  %693 = icmp eq i8* %691, null
  br i1 %693, label %755, label %694

694:                                              ; preds = %690
  %695 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %684, i64 %615, i32 11
  store i32 10, i32* %695, align 4
  br label %713

696:                                              ; preds = %683
  %697 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %684, i64 %615, i32 11
  %698 = load i32, i32* %697, align 4
  %699 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %684, i64 %615, i32 1
  %700 = bitcast %struct.opj_tcd_seg_data_chunk** %699 to i64*
  %701 = load i64, i64* %700, align 8
  %702 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %684, i64 %615, i32 13
  %703 = load i32, i32* %702, align 4
  %704 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %684, i64 %615, i32 14
  %705 = bitcast i32** %704 to i8**
  %706 = load i8*, i8** %705, align 8
  tail call void @opj_aligned_free(i8* %706) #9
  %707 = bitcast %struct.opj_tcd_seg_data_chunk** %699 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %707, i8 0, i64 64, i1 false) #9
  store %struct.opj_tcd_seg* %687, %struct.opj_tcd_seg** %686, align 8
  store i32 %698, i32* %697, align 4
  %708 = icmp eq i32 %698, 0
  br i1 %708, label %712, label %709

709:                                              ; preds = %696
  %710 = zext i32 %698 to i64
  %711 = mul nuw nsw i64 %710, 24
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %688, i8 0, i64 %711, i1 false) #9
  br label %712

712:                                              ; preds = %709, %696
  store i64 %701, i64* %700, align 8
  store i32 %703, i32* %702, align 4
  br label %713

713:                                              ; preds = %694, %712
  %714 = load i32, i32* %511, align 8
  %715 = icmp sgt i32 %620, %714
  %716 = select i1 %715, i32 %620, i32 %714
  %717 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %684, i64 %615, i32 2
  store i32 %716, i32* %717, align 8
  %718 = load i32, i32* %515, align 4
  %719 = icmp sgt i32 %623, %718
  %720 = select i1 %719, i32 %623, i32 %718
  %721 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %684, i64 %615, i32 3
  store i32 %720, i32* %721, align 4
  %722 = load i32, i32* %519, align 8
  %723 = icmp slt i32 %624, %722
  %724 = select i1 %723, i32 %624, i32 %722
  %725 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %684, i64 %615, i32 4
  store i32 %724, i32* %725, align 8
  %726 = load i32, i32* %523, align 4
  %727 = icmp slt i32 %625, %726
  %728 = select i1 %727, i32 %625, i32 %726
  %729 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %684, i64 %615, i32 5
  store i32 %728, i32* %729, align 4
  br label %730

730:                                              ; preds = %643, %679, %713
  %731 = add nuw nsw i64 %615, 1
  %732 = icmp eq i64 %731, %613
  br i1 %732, label %733, label %614

733:                                              ; preds = %730, %607
  %734 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %498, i64 1
  %735 = add nuw i32 %497, 1
  %736 = icmp eq i32 %735, %314
  br i1 %736, label %737, label %496

737:                                              ; preds = %733, %490, %422
  %738 = add nuw i32 %364, 1
  %739 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %366, i64 1
  %740 = getelementptr inbounds %struct.opj_stepsize, %struct.opj_stepsize* %365, i64 1
  %741 = load i32, i32* %338, align 8
  %742 = icmp ult i32 %738, %741
  br i1 %742, label %363, label %743

743:                                              ; preds = %737
  %744 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %233, i64 1
  %745 = add i32 %230, 1
  %746 = load i32, i32* %149, align 4
  %747 = icmp ult i32 %745, %746
  br i1 %747, label %229, label %748

748:                                              ; preds = %743, %218
  %749 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %104, i64 1
  %750 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %106, i64 1
  %751 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %105, i64 1
  %752 = add nuw i32 %103, 1
  %753 = load i32, i32* %93, align 8
  %754 = icmp ult i32 %752, %753
  br i1 %754, label %102, label %755

755:                                              ; preds = %191, %748, %560, %543, %639, %631, %690, %92, %682, %580, %550, %281, %294, %484, %465, %316, %311, %177, %172, %160, %214, %100, %86, %55
  %756 = phi i32 [ 0, %55 ], [ 0, %86 ], [ 0, %100 ], [ 0, %214 ], [ 0, %160 ], [ 0, %172 ], [ 0, %177 ], [ 0, %281 ], [ 0, %294 ], [ 0, %484 ], [ 0, %465 ], [ 0, %316 ], [ 0, %311 ], [ 0, %580 ], [ 0, %550 ], [ 0, %682 ], [ 1, %92 ], [ 0, %690 ], [ 0, %631 ], [ 0, %639 ], [ 0, %543 ], [ 0, %560 ], [ 0, %191 ], [ 1, %748 ]
  ret i32 %756
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_tcd_init_decode_tile(%struct.opj_tcd* nocapture readonly, i32, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %4 = tail call fastcc i32 @opj_tcd_init_tile(%struct.opj_tcd* %0, i32 %1, i32 0, i64 72, %struct.opj_event_mgr* %2)
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @opj_tcd_reinit_segment(%struct.opj_tcd_seg* nocapture) local_unnamed_addr #0 {
  %2 = bitcast %struct.opj_tcd_seg* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @opj_tcd_get_decoded_tile_size(%struct.opj_tcd* nocapture readonly, i32) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  %4 = load %struct.opj_image*, %struct.opj_image** %3, align 8
  %5 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %4, i64 0, i32 4
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %86, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %4, i64 0, i32 6
  %10 = load %struct.opj_image_comp*, %struct.opj_image_comp** %9, align 8
  %11 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 5
  %12 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %11, align 8
  %13 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %12, i64 0, i32 0
  %14 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %13, align 8
  %15 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %14, i64 0, i32 5
  %16 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %15, align 8
  %17 = icmp eq i32 %1, 0
  %18 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 16
  br label %19

19:                                               ; preds = %8, %80
  %20 = phi %struct.opj_tcd_tilecomp* [ %16, %8 ], [ %83, %80 ]
  %21 = phi %struct.opj_image_comp* [ %10, %8 ], [ %82, %80 ]
  %22 = phi i32 [ 0, %8 ], [ %81, %80 ]
  %23 = phi i32 [ 0, %8 ], [ %84, %80 ]
  %24 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %21, i64 0, i32 6
  %25 = load i32, i32* %24, align 8
  %26 = lshr i32 %25, 3
  %27 = and i32 %25, 7
  %28 = icmp ne i32 %27, 0
  %29 = zext i1 %28 to i32
  %30 = add nuw nsw i32 %26, %29
  %31 = icmp eq i32 %30, 3
  %32 = select i1 %31, i32 4, i32 %30
  %33 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %20, i64 0, i32 7
  %34 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %33, align 8
  %35 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %20, i64 0, i32 6
  %36 = load i32, i32* %35, align 8
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 -1
  %39 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %38, i64 %37
  br i1 %17, label %51, label %40

40:                                               ; preds = %19
  %41 = load i32, i32* %18, align 8
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %51

43:                                               ; preds = %40
  %44 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %39, i64 0, i32 10
  %45 = load i32, i32* %44, align 8
  %46 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %39, i64 0, i32 8
  %47 = load i32, i32* %46, align 8
  %48 = sub i32 %45, %47
  %49 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %39, i64 0, i32 11
  %50 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %39, i64 0, i32 9
  br label %59

51:                                               ; preds = %40, %19
  %52 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %39, i64 0, i32 2
  %53 = load i32, i32* %52, align 8
  %54 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %39, i64 0, i32 0
  %55 = load i32, i32* %54, align 8
  %56 = sub nsw i32 %53, %55
  %57 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %39, i64 0, i32 3
  %58 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %39, i64 0, i32 1
  br label %59

59:                                               ; preds = %51, %43
  %60 = phi i32* [ %58, %51 ], [ %50, %43 ]
  %61 = phi i32* [ %57, %51 ], [ %49, %43 ]
  %62 = phi i32 [ %56, %51 ], [ %48, %43 ]
  %63 = load i32, i32* %61, align 4
  %64 = load i32, i32* %60, align 4
  %65 = sub i32 %63, %64
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %70, label %67

67:                                               ; preds = %59
  %68 = udiv i32 -1, %62
  %69 = icmp ult i32 %68, %65
  br i1 %69, label %86, label %70

70:                                               ; preds = %59, %67
  %71 = mul i32 %65, %62
  %72 = icmp eq i32 %32, 0
  br i1 %72, label %76, label %73

73:                                               ; preds = %70
  %74 = udiv i32 -1, %32
  %75 = icmp ult i32 %74, %71
  br i1 %75, label %86, label %76

76:                                               ; preds = %70, %73
  %77 = mul i32 %71, %32
  %78 = xor i32 %22, -1
  %79 = icmp ugt i32 %77, %78
  br i1 %79, label %86, label %80

80:                                               ; preds = %76
  %81 = add i32 %77, %22
  %82 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %21, i64 1
  %83 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %20, i64 1
  %84 = add nuw i32 %23, 1
  %85 = icmp ult i32 %84, %6
  br i1 %85, label %19, label %86

86:                                               ; preds = %80, %67, %73, %76, %2
  %87 = phi i32 [ 0, %2 ], [ -1, %76 ], [ -1, %73 ], [ -1, %67 ], [ %81, %80 ]
  ret i32 %87
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_tcd_encode_tile(%struct.opj_tcd*, i32, i8*, i32*, i32, %struct.opj_codestream_info*, %struct.opj_tcd_marker_info*, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %9 = alloca i32, align 4
  %10 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %482

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 9
  store i32 %1, i32* %14, align 8
  %15 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 7
  %16 = load %struct.opj_cp*, %struct.opj_cp** %15, align 8
  %17 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %16, i64 0, i32 19
  %18 = load %struct.opj_tcp*, %struct.opj_tcp** %17, align 8
  %19 = zext i32 %1 to i64
  %20 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %18, i64 %19
  %21 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 8
  store %struct.opj_tcp* %20, %struct.opj_tcp** %21, align 8
  %22 = icmp eq %struct.opj_codestream_info* %5, null
  br i1 %22, label %86, label %23

23:                                               ; preds = %13
  %24 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 5
  %25 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %24, align 8
  %26 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %25, i64 0, i32 0
  %27 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %26, align 8
  %28 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %27, i64 0, i32 5
  %29 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %28, align 8
  %30 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %18, i64 %19, i32 15
  %31 = load %struct.opj_tccp*, %struct.opj_tccp** %30, align 8
  %32 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %29, i64 0, i32 5
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %66, label %35

35:                                               ; preds = %23
  %36 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %29, i64 0, i32 7
  %37 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %5, i64 0, i32 21
  br label %38

38:                                               ; preds = %35, %38
  %39 = phi i64 [ 0, %35 ], [ %62, %38 ]
  %40 = phi i32 [ 0, %35 ], [ %53, %38 ]
  %41 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %36, align 8
  %42 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %41, i64 %39, i32 4
  %43 = load i32, i32* %42, align 8
  %44 = load %struct.opj_tile_info*, %struct.opj_tile_info** %37, align 8
  %45 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %44, i64 %19, i32 5, i64 %39
  store i32 %43, i32* %45, align 4
  %46 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %41, i64 %39, i32 5
  %47 = load i32, i32* %46, align 4
  %48 = load %struct.opj_tile_info*, %struct.opj_tile_info** %37, align 8
  %49 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %48, i64 %19, i32 6, i64 %39
  store i32 %47, i32* %49, align 4
  %50 = load i32, i32* %42, align 8
  %51 = load i32, i32* %46, align 4
  %52 = mul i32 %51, %50
  %53 = add i32 %52, %40
  %54 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %31, i64 0, i32 10, i64 %39
  %55 = load i32, i32* %54, align 4
  %56 = load %struct.opj_tile_info*, %struct.opj_tile_info** %37, align 8
  %57 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %56, i64 %19, i32 7, i64 %39
  store i32 %55, i32* %57, align 4
  %58 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %31, i64 0, i32 11, i64 %39
  %59 = load i32, i32* %58, align 4
  %60 = load %struct.opj_tile_info*, %struct.opj_tile_info** %37, align 8
  %61 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %60, i64 %19, i32 8, i64 %39
  store i32 %59, i32* %61, align 4
  %62 = add nuw nsw i64 %39, 1
  %63 = load i32, i32* %32, align 4
  %64 = zext i32 %63 to i64
  %65 = icmp ult i64 %62, %64
  br i1 %65, label %38, label %66

66:                                               ; preds = %38, %23
  %67 = phi i32 [ 0, %23 ], [ %53, %38 ]
  %68 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %5, i64 0, i32 12
  %69 = load i32, i32* %68, align 4
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %5, i64 0, i32 13
  %72 = load i32, i32* %71, align 8
  %73 = sext i32 %72 to i64
  %74 = zext i32 %67 to i64
  %75 = mul nsw i64 %70, %74
  %76 = mul i64 %75, %73
  %77 = tail call i8* @opj_calloc(i64 %76, i64 32) #9
  %78 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %5, i64 0, i32 21
  %79 = load %struct.opj_tile_info*, %struct.opj_tile_info** %78, align 8
  %80 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %79, i64 %19, i32 9
  %81 = bitcast %struct.opj_packet_info** %80 to i8**
  store i8* %77, i8** %81, align 8
  %82 = load %struct.opj_tile_info*, %struct.opj_tile_info** %78, align 8
  %83 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %82, i64 %19, i32 9
  %84 = load %struct.opj_packet_info*, %struct.opj_packet_info** %83, align 8
  %85 = icmp eq %struct.opj_packet_info* %84, null
  br i1 %85, label %513, label %86

86:                                               ; preds = %66, %13
  %87 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 5
  %88 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %87, align 8
  %89 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %88, i64 0, i32 0
  %90 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %89, align 8
  %91 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %90, i64 0, i32 4
  %92 = load i32, i32* %91, align 8
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %311, label %94

94:                                               ; preds = %86
  %95 = load %struct.opj_tcp*, %struct.opj_tcp** %21, align 8
  %96 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %95, i64 0, i32 15
  %97 = load %struct.opj_tccp*, %struct.opj_tccp** %96, align 8
  %98 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %90, i64 0, i32 5
  %99 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %98, align 8
  br label %100

100:                                              ; preds = %300, %94
  %101 = phi i64 [ %306, %300 ], [ 0, %94 ]
  %102 = phi %struct.opj_tccp* [ %301, %300 ], [ %97, %94 ]
  %103 = phi %struct.opj_tcd_tilecomp* [ %302, %300 ], [ %99, %94 ]
  %104 = phi i32 [ %303, %300 ], [ 0, %94 ]
  %105 = getelementptr %struct.opj_tccp, %struct.opj_tccp* %97, i64 %101, i32 12
  %106 = bitcast i32* %105 to i8*
  %107 = getelementptr i8, i8* %106, i64 1
  %108 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %103, i64 0, i32 9
  %109 = load i32*, i32** %108, align 8
  %110 = bitcast i32* %109 to i8*
  %111 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %103, i64 0, i32 2
  %112 = bitcast i32* %111 to <2 x i32>*
  %113 = load <2 x i32>, <2 x i32>* %112, align 8
  %114 = bitcast %struct.opj_tcd_tilecomp* %103 to <2 x i32>*
  %115 = load <2 x i32>, <2 x i32>* %114, align 8
  %116 = sub nsw <2 x i32> %113, %115
  %117 = sext <2 x i32> %116 to <2 x i64>
  %118 = extractelement <2 x i64> %117, i32 0
  %119 = extractelement <2 x i64> %117, i32 1
  %120 = mul nsw i64 %119, %118
  %121 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %102, i64 0, i32 5
  %122 = load i32, i32* %121, align 4
  %123 = icmp eq i32 %122, 1
  %124 = icmp ne i64 %120, 0
  br i1 %123, label %134, label %125

125:                                              ; preds = %100
  br i1 %124, label %126, label %300

126:                                              ; preds = %125
  %127 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %102, i64 0, i32 12
  %128 = mul nsw i64 %119, %118
  %129 = add nsw i64 %128, -1
  %130 = and i64 %128, 3
  %131 = icmp ult i64 %129, 3
  br i1 %131, label %286, label %132

132:                                              ; preds = %126
  %133 = sub i64 %128, %130
  br label %257

134:                                              ; preds = %100
  br i1 %124, label %135, label %300

135:                                              ; preds = %134
  %136 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %102, i64 0, i32 12
  %137 = mul nsw i64 %119, %118
  %138 = icmp ult i64 %137, 8
  br i1 %138, label %213, label %139

139:                                              ; preds = %135
  %140 = mul nsw i64 %119, %118
  %141 = getelementptr i32, i32* %109, i64 %140
  %142 = icmp ugt i8* %107, %110
  %143 = icmp ult i32* %136, %141
  %144 = and i1 %142, %143
  br i1 %144, label %213, label %145

145:                                              ; preds = %139
  %146 = and i64 %137, -8
  %147 = getelementptr i32, i32* %109, i64 %146
  %148 = add i64 %146, -8
  %149 = lshr exact i64 %148, 3
  %150 = add nuw nsw i64 %149, 1
  %151 = and i64 %150, 1
  %152 = icmp eq i64 %148, 0
  br i1 %152, label %192, label %153

153:                                              ; preds = %145
  %154 = sub nuw nsw i64 %150, %151
  %155 = load i32, i32* %136, align 4, !alias.scope !3
  %156 = insertelement <4 x i32> undef, i32 %155, i32 0
  %157 = shufflevector <4 x i32> %156, <4 x i32> undef, <4 x i32> zeroinitializer
  %158 = insertelement <4 x i32> undef, i32 %155, i32 0
  %159 = shufflevector <4 x i32> %158, <4 x i32> undef, <4 x i32> zeroinitializer
  %160 = load i32, i32* %136, align 4, !alias.scope !3
  %161 = insertelement <4 x i32> undef, i32 %160, i32 0
  %162 = shufflevector <4 x i32> %161, <4 x i32> undef, <4 x i32> zeroinitializer
  %163 = insertelement <4 x i32> undef, i32 %160, i32 0
  %164 = shufflevector <4 x i32> %163, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %165

165:                                              ; preds = %165, %153
  %166 = phi i64 [ 0, %153 ], [ %189, %165 ]
  %167 = phi i64 [ %154, %153 ], [ %190, %165 ]
  %168 = getelementptr i32, i32* %109, i64 %166
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 4, !alias.scope !6, !noalias !3
  %171 = getelementptr i32, i32* %168, i64 4
  %172 = bitcast i32* %171 to <4 x i32>*
  %173 = load <4 x i32>, <4 x i32>* %172, align 4, !alias.scope !6, !noalias !3
  %174 = sub nsw <4 x i32> %170, %157
  %175 = sub nsw <4 x i32> %173, %159
  %176 = bitcast i32* %168 to <4 x i32>*
  store <4 x i32> %174, <4 x i32>* %176, align 4, !alias.scope !6, !noalias !3
  %177 = bitcast i32* %171 to <4 x i32>*
  store <4 x i32> %175, <4 x i32>* %177, align 4, !alias.scope !6, !noalias !3
  %178 = or i64 %166, 8
  %179 = getelementptr i32, i32* %109, i64 %178
  %180 = bitcast i32* %179 to <4 x i32>*
  %181 = load <4 x i32>, <4 x i32>* %180, align 4, !alias.scope !6, !noalias !3
  %182 = getelementptr i32, i32* %179, i64 4
  %183 = bitcast i32* %182 to <4 x i32>*
  %184 = load <4 x i32>, <4 x i32>* %183, align 4, !alias.scope !6, !noalias !3
  %185 = sub nsw <4 x i32> %181, %162
  %186 = sub nsw <4 x i32> %184, %164
  %187 = bitcast i32* %179 to <4 x i32>*
  store <4 x i32> %185, <4 x i32>* %187, align 4, !alias.scope !6, !noalias !3
  %188 = bitcast i32* %182 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %188, align 4, !alias.scope !6, !noalias !3
  %189 = add i64 %166, 16
  %190 = add i64 %167, -2
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %192, label %165, !llvm.loop !8

192:                                              ; preds = %165, %145
  %193 = phi i64 [ 0, %145 ], [ %189, %165 ]
  %194 = icmp eq i64 %151, 0
  br i1 %194, label %211, label %195

195:                                              ; preds = %192
  %196 = getelementptr i32, i32* %109, i64 %193
  %197 = load i32, i32* %136, align 4, !alias.scope !3
  %198 = insertelement <4 x i32> undef, i32 %197, i32 0
  %199 = shufflevector <4 x i32> %198, <4 x i32> undef, <4 x i32> zeroinitializer
  %200 = insertelement <4 x i32> undef, i32 %197, i32 0
  %201 = shufflevector <4 x i32> %200, <4 x i32> undef, <4 x i32> zeroinitializer
  %202 = bitcast i32* %196 to <4 x i32>*
  %203 = load <4 x i32>, <4 x i32>* %202, align 4, !alias.scope !6, !noalias !3
  %204 = getelementptr i32, i32* %196, i64 4
  %205 = bitcast i32* %204 to <4 x i32>*
  %206 = load <4 x i32>, <4 x i32>* %205, align 4, !alias.scope !6, !noalias !3
  %207 = sub nsw <4 x i32> %203, %199
  %208 = sub nsw <4 x i32> %206, %201
  %209 = bitcast i32* %196 to <4 x i32>*
  store <4 x i32> %207, <4 x i32>* %209, align 4, !alias.scope !6, !noalias !3
  %210 = bitcast i32* %204 to <4 x i32>*
  store <4 x i32> %208, <4 x i32>* %210, align 4, !alias.scope !6, !noalias !3
  br label %211

211:                                              ; preds = %192, %195
  %212 = icmp eq i64 %137, %146
  br i1 %212, label %300, label %213

213:                                              ; preds = %211, %139, %135
  %214 = phi i32* [ %109, %139 ], [ %109, %135 ], [ %147, %211 ]
  %215 = phi i64 [ 0, %139 ], [ 0, %135 ], [ %146, %211 ]
  %216 = mul nsw i64 %119, %118
  %217 = xor i64 %215, -1
  %218 = add i64 %216, %217
  %219 = and i64 %216, 3
  %220 = icmp eq i64 %219, 0
  br i1 %220, label %232, label %221

221:                                              ; preds = %213, %221
  %222 = phi i32* [ %228, %221 ], [ %214, %213 ]
  %223 = phi i64 [ %229, %221 ], [ %215, %213 ]
  %224 = phi i64 [ %230, %221 ], [ %219, %213 ]
  %225 = load i32, i32* %136, align 4
  %226 = load i32, i32* %222, align 4
  %227 = sub nsw i32 %226, %225
  store i32 %227, i32* %222, align 4
  %228 = getelementptr inbounds i32, i32* %222, i64 1
  %229 = add nuw i64 %223, 1
  %230 = add i64 %224, -1
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %232, label %221, !llvm.loop !10

232:                                              ; preds = %221, %213
  %233 = phi i32* [ %214, %213 ], [ %228, %221 ]
  %234 = phi i64 [ %215, %213 ], [ %229, %221 ]
  %235 = icmp ult i64 %218, 3
  br i1 %235, label %300, label %236

236:                                              ; preds = %232, %236
  %237 = phi i32* [ %254, %236 ], [ %233, %232 ]
  %238 = phi i64 [ %255, %236 ], [ %234, %232 ]
  %239 = load i32, i32* %136, align 4
  %240 = load i32, i32* %237, align 4
  %241 = sub nsw i32 %240, %239
  store i32 %241, i32* %237, align 4
  %242 = getelementptr inbounds i32, i32* %237, i64 1
  %243 = load i32, i32* %136, align 4
  %244 = load i32, i32* %242, align 4
  %245 = sub nsw i32 %244, %243
  store i32 %245, i32* %242, align 4
  %246 = getelementptr inbounds i32, i32* %237, i64 2
  %247 = load i32, i32* %136, align 4
  %248 = load i32, i32* %246, align 4
  %249 = sub nsw i32 %248, %247
  store i32 %249, i32* %246, align 4
  %250 = getelementptr inbounds i32, i32* %237, i64 3
  %251 = load i32, i32* %136, align 4
  %252 = load i32, i32* %250, align 4
  %253 = sub nsw i32 %252, %251
  store i32 %253, i32* %250, align 4
  %254 = getelementptr inbounds i32, i32* %237, i64 4
  %255 = add nuw i64 %238, 4
  %256 = icmp eq i64 %255, %120
  br i1 %256, label %300, label %236, !llvm.loop !12

257:                                              ; preds = %257, %132
  %258 = phi i32* [ %109, %132 ], [ %283, %257 ]
  %259 = phi i64 [ %133, %132 ], [ %284, %257 ]
  %260 = load i32, i32* %258, align 4
  %261 = load i32, i32* %127, align 4
  %262 = sub nsw i32 %260, %261
  %263 = sitofp i32 %262 to float
  %264 = bitcast i32* %258 to float*
  store float %263, float* %264, align 4
  %265 = getelementptr inbounds i32, i32* %258, i64 1
  %266 = load i32, i32* %265, align 4
  %267 = load i32, i32* %127, align 4
  %268 = sub nsw i32 %266, %267
  %269 = sitofp i32 %268 to float
  %270 = bitcast i32* %265 to float*
  store float %269, float* %270, align 4
  %271 = getelementptr inbounds i32, i32* %258, i64 2
  %272 = load i32, i32* %271, align 4
  %273 = load i32, i32* %127, align 4
  %274 = sub nsw i32 %272, %273
  %275 = sitofp i32 %274 to float
  %276 = bitcast i32* %271 to float*
  store float %275, float* %276, align 4
  %277 = getelementptr inbounds i32, i32* %258, i64 3
  %278 = load i32, i32* %277, align 4
  %279 = load i32, i32* %127, align 4
  %280 = sub nsw i32 %278, %279
  %281 = sitofp i32 %280 to float
  %282 = bitcast i32* %277 to float*
  store float %281, float* %282, align 4
  %283 = getelementptr inbounds i32, i32* %258, i64 4
  %284 = add i64 %259, -4
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %286, label %257

286:                                              ; preds = %257, %126
  %287 = phi i32* [ %109, %126 ], [ %283, %257 ]
  %288 = icmp eq i64 %130, 0
  br i1 %288, label %300, label %289

289:                                              ; preds = %286, %289
  %290 = phi i32* [ %297, %289 ], [ %287, %286 ]
  %291 = phi i64 [ %298, %289 ], [ %130, %286 ]
  %292 = load i32, i32* %290, align 4
  %293 = load i32, i32* %127, align 4
  %294 = sub nsw i32 %292, %293
  %295 = sitofp i32 %294 to float
  %296 = bitcast i32* %290 to float*
  store float %295, float* %296, align 4
  %297 = getelementptr inbounds i32, i32* %290, i64 1
  %298 = add i64 %291, -1
  %299 = icmp eq i64 %298, 0
  br i1 %299, label %300, label %289, !llvm.loop !13

300:                                              ; preds = %286, %289, %232, %236, %211, %134, %125
  %301 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %102, i64 1
  %302 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %103, i64 1
  %303 = add nuw i32 %104, 1
  %304 = load i32, i32* %91, align 8
  %305 = icmp ult i32 %303, %304
  %306 = add i64 %101, 1
  br i1 %305, label %100, label %307

307:                                              ; preds = %300
  %308 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %87, align 8
  %309 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %308, i64 0, i32 0
  %310 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %309, align 8
  br label %311

311:                                              ; preds = %307, %86
  %312 = phi %struct.opj_tcd_tile* [ %310, %307 ], [ %90, %86 ]
  %313 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %312, i64 0, i32 5
  %314 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %313, align 8
  %315 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %314, i64 0, i32 2
  %316 = load i32, i32* %315, align 8
  %317 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %314, i64 0, i32 0
  %318 = load i32, i32* %317, align 8
  %319 = sub nsw i32 %316, %318
  %320 = sext i32 %319 to i64
  %321 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %314, i64 0, i32 3
  %322 = load i32, i32* %321, align 4
  %323 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %314, i64 0, i32 1
  %324 = load i32, i32* %323, align 4
  %325 = sub nsw i32 %322, %324
  %326 = sext i32 %325 to i64
  %327 = mul nsw i64 %326, %320
  %328 = load %struct.opj_tcp*, %struct.opj_tcp** %21, align 8
  %329 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %328, i64 0, i32 4
  %330 = load i32, i32* %329, align 8
  switch i32 %330, label %373 [
    i32 0, label %394
    i32 2, label %331
  ]

331:                                              ; preds = %311
  %332 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %328, i64 0, i32 22
  %333 = load float*, float** %332, align 8
  %334 = icmp eq float* %333, null
  br i1 %334, label %394, label %335

335:                                              ; preds = %331
  %336 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %312, i64 0, i32 4
  %337 = load i32, i32* %336, align 8
  %338 = zext i32 %337 to i64
  %339 = shl nuw nsw i64 %338, 3
  %340 = tail call i8* @opj_malloc(i64 %339) #9
  %341 = bitcast i8* %340 to i8**
  %342 = icmp eq i8* %340, null
  br i1 %342, label %513, label %343

343:                                              ; preds = %335
  %344 = load i32, i32* %336, align 8
  %345 = icmp eq i32 %344, 0
  br i1 %345, label %359, label %346

346:                                              ; preds = %343, %346
  %347 = phi i64 [ %355, %346 ], [ 0, %343 ]
  %348 = phi %struct.opj_tcd_tilecomp* [ %354, %346 ], [ %314, %343 ]
  %349 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %348, i64 0, i32 9
  %350 = bitcast i32** %349 to i64*
  %351 = load i64, i64* %350, align 8
  %352 = getelementptr inbounds i8*, i8** %341, i64 %347
  %353 = bitcast i8** %352 to i64*
  store i64 %351, i64* %353, align 8
  %354 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %348, i64 1
  %355 = add nuw nsw i64 %347, 1
  %356 = load i32, i32* %336, align 8
  %357 = zext i32 %356 to i64
  %358 = icmp ult i64 %355, %357
  br i1 %358, label %346, label %359

359:                                              ; preds = %346, %343
  %360 = phi i32 [ 0, %343 ], [ %356, %346 ]
  %361 = load %struct.opj_tcp*, %struct.opj_tcp** %21, align 8
  %362 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %361, i64 0, i32 22
  %363 = bitcast float** %362 to i8**
  %364 = load i8*, i8** %363, align 8
  %365 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  %366 = load %struct.opj_image*, %struct.opj_image** %365, align 8
  %367 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %366, i64 0, i32 6
  %368 = load %struct.opj_image_comp*, %struct.opj_image_comp** %367, align 8
  %369 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %368, i64 0, i32 8
  %370 = load i32, i32* %369, align 8
  %371 = tail call i32 @opj_mct_encode_custom(i8* %364, i64 %327, i8** nonnull %341, i32 %360, i32 %370) #9
  %372 = icmp eq i32 %371, 0
  tail call void @opj_free(i8* nonnull %340) #9
  br i1 %372, label %513, label %394

373:                                              ; preds = %311
  %374 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %328, i64 0, i32 15
  %375 = load %struct.opj_tccp*, %struct.opj_tccp** %374, align 8
  %376 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %375, i64 0, i32 5
  %377 = load i32, i32* %376, align 4
  %378 = icmp eq i32 %377, 0
  %379 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %314, i64 0, i32 9
  %380 = load i32*, i32** %379, align 8
  br i1 %378, label %381, label %389

381:                                              ; preds = %373
  %382 = bitcast i32* %380 to float*
  %383 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %314, i64 1, i32 9
  %384 = bitcast i32** %383 to float**
  %385 = load float*, float** %384, align 8
  %386 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %314, i64 2, i32 9
  %387 = bitcast i32** %386 to float**
  %388 = load float*, float** %387, align 8
  tail call void @opj_mct_encode_real(float* %382, float* %385, float* %388, i64 %327) #9
  br label %394

389:                                              ; preds = %373
  %390 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %314, i64 1, i32 9
  %391 = load i32*, i32** %390, align 8
  %392 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %314, i64 2, i32 9
  %393 = load i32*, i32** %392, align 8
  tail call void @opj_mct_encode(i32* %380, i32* %391, i32* %393, i64 %327) #9
  br label %394

394:                                              ; preds = %359, %381, %389, %311, %331
  %395 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %87, align 8
  %396 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %395, i64 0, i32 0
  %397 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %396, align 8
  %398 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %397, i64 0, i32 4
  %399 = load i32, i32* %398, align 8
  %400 = icmp eq i32 %399, 0
  br i1 %400, label %425, label %401

401:                                              ; preds = %394
  %402 = load %struct.opj_tcp*, %struct.opj_tcp** %21, align 8
  %403 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %402, i64 0, i32 15
  %404 = load %struct.opj_tccp*, %struct.opj_tccp** %403, align 8
  %405 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %397, i64 0, i32 5
  %406 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %405, align 8
  br label %407

407:                                              ; preds = %419, %401
  %408 = phi i32 [ %422, %419 ], [ 0, %401 ]
  %409 = phi %struct.opj_tccp* [ %421, %419 ], [ %404, %401 ]
  %410 = phi %struct.opj_tcd_tilecomp* [ %420, %419 ], [ %406, %401 ]
  %411 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %409, i64 0, i32 5
  %412 = load i32, i32* %411, align 4
  switch i32 %412, label %419 [
    i32 1, label %413
    i32 0, label %416
  ]

413:                                              ; preds = %407
  %414 = tail call i32 @opj_dwt_encode(%struct.opj_tcd* %0, %struct.opj_tcd_tilecomp* %410) #9
  %415 = icmp eq i32 %414, 0
  br i1 %415, label %513, label %419

416:                                              ; preds = %407
  %417 = tail call i32 @opj_dwt_encode_real(%struct.opj_tcd* %0, %struct.opj_tcd_tilecomp* %410) #9
  %418 = icmp eq i32 %417, 0
  br i1 %418, label %513, label %419

419:                                              ; preds = %416, %413, %407
  %420 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %410, i64 1
  %421 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %409, i64 1
  %422 = add nuw i32 %408, 1
  %423 = load i32, i32* %398, align 8
  %424 = icmp ult i32 %422, %423
  br i1 %424, label %407, label %425

425:                                              ; preds = %419, %394
  %426 = load %struct.opj_tcp*, %struct.opj_tcp** %21, align 8
  %427 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %426, i64 0, i32 4
  %428 = load i32, i32* %427, align 8
  %429 = icmp eq i32 %428, 1
  br i1 %429, label %430, label %440

430:                                              ; preds = %425
  %431 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %426, i64 0, i32 15
  %432 = load %struct.opj_tccp*, %struct.opj_tccp** %431, align 8
  %433 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %432, i64 0, i32 5
  %434 = load i32, i32* %433, align 4
  %435 = icmp eq i32 %434, 0
  br i1 %435, label %436, label %438

436:                                              ; preds = %430
  %437 = tail call double* @opj_mct_get_mct_norms_real() #9
  br label %447

438:                                              ; preds = %430
  %439 = tail call double* @opj_mct_get_mct_norms() #9
  br label %447

440:                                              ; preds = %425
  %441 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  %442 = load %struct.opj_image*, %struct.opj_image** %441, align 8
  %443 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %442, i64 0, i32 4
  %444 = load i32, i32* %443, align 8
  %445 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %426, i64 0, i32 20
  %446 = load double*, double** %445, align 8
  br label %447

447:                                              ; preds = %436, %438, %440
  %448 = phi double* [ %437, %436 ], [ %439, %438 ], [ %446, %440 ]
  %449 = phi i32 [ 3, %436 ], [ 3, %438 ], [ %444, %440 ]
  %450 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %87, align 8
  %451 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %450, i64 0, i32 0
  %452 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %451, align 8
  %453 = tail call i32 @opj_t1_encode_cblks(%struct.opj_tcd* %0, %struct.opj_tcd_tile* %452, %struct.opj_tcp* %426, double* %448, i32 %449) #9
  %454 = icmp eq i32 %453, 0
  br i1 %454, label %513, label %455

455:                                              ; preds = %447
  %456 = load %struct.opj_cp*, %struct.opj_cp** %15, align 8
  %457 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %457) #9
  store i32 0, i32* %9, align 4
  br i1 %22, label %460, label %458

458:                                              ; preds = %455
  %459 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %5, i64 0, i32 2
  store i32 0, i32* %459, align 4
  br label %460

460:                                              ; preds = %458, %455
  %461 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %456, i64 0, i32 20, i32 0, i32 4
  %462 = load i8, i8* %461, align 1
  %463 = and i8 %462, 5
  %464 = icmp eq i8 %463, 0
  br i1 %464, label %469, label %465

465:                                              ; preds = %460
  %466 = call i32 @opj_tcd_rateallocate(%struct.opj_tcd* %0, i8* %2, i32* nonnull %9, i32 %4, %struct.opj_codestream_info* %5, %struct.opj_event_mgr* %7) #9
  %467 = icmp eq i32 %466, 0
  br i1 %467, label %468, label %481

468:                                              ; preds = %465
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %457) #9
  br label %513

469:                                              ; preds = %460
  %470 = load %struct.opj_tcp*, %struct.opj_tcp** %21, align 8
  %471 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %470, i64 0, i32 2
  %472 = load i32, i32* %471, align 8
  %473 = icmp eq i32 %472, 0
  br i1 %473, label %481, label %474

474:                                              ; preds = %469, %474
  %475 = phi i32 [ %476, %474 ], [ 0, %469 ]
  tail call void @opj_tcd_makelayer_fixed(%struct.opj_tcd* %0, i32 %475, i32 1) #9
  %476 = add nuw i32 %475, 1
  %477 = load %struct.opj_tcp*, %struct.opj_tcp** %21, align 8
  %478 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %477, i64 0, i32 2
  %479 = load i32, i32* %478, align 8
  %480 = icmp ult i32 %476, %479
  br i1 %480, label %474, label %481

481:                                              ; preds = %474, %465, %469
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %457) #9
  br label %482

482:                                              ; preds = %481, %8
  %483 = icmp eq %struct.opj_codestream_info* %5, null
  br i1 %483, label %486, label %484

484:                                              ; preds = %482
  %485 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %5, i64 0, i32 2
  store i32 1, i32* %485, align 4
  br label %486

486:                                              ; preds = %482, %484
  %487 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  %488 = load %struct.opj_image*, %struct.opj_image** %487, align 8
  %489 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 7
  %490 = load %struct.opj_cp*, %struct.opj_cp** %489, align 8
  %491 = call %struct.opj_t2* @opj_t2_create(%struct.opj_image* %488, %struct.opj_cp* %490) #9
  %492 = icmp eq %struct.opj_t2* %491, null
  br i1 %492, label %512, label %493

493:                                              ; preds = %486
  %494 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 9
  %495 = load i32, i32* %494, align 8
  %496 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 5
  %497 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %496, align 8
  %498 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %497, i64 0, i32 0
  %499 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %498, align 8
  %500 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 8
  %501 = load %struct.opj_tcp*, %struct.opj_tcp** %500, align 8
  %502 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %501, i64 0, i32 2
  %503 = load i32, i32* %502, align 8
  %504 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 1
  %505 = load i32, i32* %504, align 4
  %506 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 0
  %507 = load i32, i32* %506, align 8
  %508 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 4
  %509 = load i32, i32* %508, align 8
  %510 = call i32 @opj_t2_encode_packets(%struct.opj_t2* nonnull %491, i32 %495, %struct.opj_tcd_tile* %499, i32 %503, i8* %2, i32* %3, i32 %4, %struct.opj_codestream_info* %5, %struct.opj_tcd_marker_info* %6, i32 %505, i32 %507, i32 %509, i32 1, %struct.opj_event_mgr* %7) #9
  %511 = icmp eq i32 %510, 0
  call void @opj_t2_destroy(%struct.opj_t2* nonnull %491) #9
  br i1 %511, label %512, label %513

512:                                              ; preds = %486, %493
  br label %513

513:                                              ; preds = %413, %416, %66, %512, %493, %468, %359, %335, %447
  %514 = phi i32 [ 0, %66 ], [ 0, %447 ], [ 0, %335 ], [ 0, %359 ], [ 0, %468 ], [ 0, %512 ], [ 1, %493 ], [ 0, %416 ], [ 0, %413 ]
  ret i32 %514
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_tcd_decode_tile(%struct.opj_tcd*, i32, i32, i32, i32, i32, i32* nocapture readonly, i8*, i32, i32, %struct.opj_codestream_index*, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #9
  store i32 -1431655766, i32* %14, align 4
  %16 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 9
  store i32 %9, i32* %16, align 8
  %17 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 7
  %18 = load %struct.opj_cp*, %struct.opj_cp** %17, align 8
  %19 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %18, i64 0, i32 19
  %20 = load %struct.opj_tcp*, %struct.opj_tcp** %19, align 8
  %21 = zext i32 %9 to i64
  %22 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %20, i64 %21
  %23 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 8
  store %struct.opj_tcp* %22, %struct.opj_tcp** %23, align 8
  %24 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 12
  store i32 %1, i32* %24, align 8
  %25 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 13
  store i32 %2, i32* %25, align 4
  %26 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 14
  store i32 %3, i32* %26, align 8
  %27 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 15
  store i32 %4, i32* %27, align 4
  %28 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 16
  store i32 1, i32* %28, align 8
  %29 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 17
  %30 = bitcast i32** %29 to i8**
  %31 = load i8*, i8** %30, align 8
  tail call void @opj_free(i8* %31) #9
  store i32* null, i32** %29, align 8
  %32 = icmp eq i32 %5, 0
  br i1 %32, label %88, label %33

33:                                               ; preds = %12
  %34 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  %35 = load %struct.opj_image*, %struct.opj_image** %34, align 8
  %36 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %35, i64 0, i32 4
  %37 = load i32, i32* %36, align 8
  %38 = zext i32 %37 to i64
  %39 = tail call i8* @opj_calloc(i64 4, i64 %38) #9
  %40 = bitcast i8* %39 to i32*
  %41 = icmp eq i8* %39, null
  br i1 %41, label %1134, label %42

42:                                               ; preds = %33
  %43 = zext i32 %5 to i64
  %44 = add nsw i64 %43, -1
  %45 = and i64 %43, 3
  %46 = icmp ult i64 %44, 3
  br i1 %46, label %74, label %47

47:                                               ; preds = %42
  %48 = sub nsw i64 %43, %45
  br label %49

49:                                               ; preds = %49, %47
  %50 = phi i64 [ 0, %47 ], [ %71, %49 ]
  %51 = phi i64 [ %48, %47 ], [ %72, %49 ]
  %52 = getelementptr inbounds i32, i32* %6, i64 %50
  %53 = load i32, i32* %52, align 4
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds i32, i32* %40, i64 %54
  store i32 1, i32* %55, align 4
  %56 = or i64 %50, 1
  %57 = getelementptr inbounds i32, i32* %6, i64 %56
  %58 = load i32, i32* %57, align 4
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds i32, i32* %40, i64 %59
  store i32 1, i32* %60, align 4
  %61 = or i64 %50, 2
  %62 = getelementptr inbounds i32, i32* %6, i64 %61
  %63 = load i32, i32* %62, align 4
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds i32, i32* %40, i64 %64
  store i32 1, i32* %65, align 4
  %66 = or i64 %50, 3
  %67 = getelementptr inbounds i32, i32* %6, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds i32, i32* %40, i64 %69
  store i32 1, i32* %70, align 4
  %71 = add nuw nsw i64 %50, 4
  %72 = add i64 %51, -4
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %49

74:                                               ; preds = %49, %42
  %75 = phi i64 [ 0, %42 ], [ %71, %49 ]
  %76 = icmp eq i64 %45, 0
  br i1 %76, label %87, label %77

77:                                               ; preds = %74, %77
  %78 = phi i64 [ %84, %77 ], [ %75, %74 ]
  %79 = phi i64 [ %85, %77 ], [ %45, %74 ]
  %80 = getelementptr inbounds i32, i32* %6, i64 %78
  %81 = load i32, i32* %80, align 4
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds i32, i32* %40, i64 %82
  store i32 1, i32* %83, align 4
  %84 = add nuw nsw i64 %78, 1
  %85 = add i64 %79, -1
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %87, label %77, !llvm.loop !14

87:                                               ; preds = %77, %74
  store i8* %39, i8** %30, align 8
  br label %88

88:                                               ; preds = %87, %12
  %89 = phi i32* [ %40, %87 ], [ null, %12 ]
  %90 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  %91 = load %struct.opj_image*, %struct.opj_image** %90, align 8
  %92 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %91, i64 0, i32 4
  %93 = load i32, i32* %92, align 8
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %185, label %95

95:                                               ; preds = %88
  %96 = icmp eq i32* %89, null
  %97 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 5
  %98 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %91, i64 0, i32 6
  %99 = zext i32 %93 to i64
  br label %100

100:                                              ; preds = %95, %182
  %101 = phi i64 [ 0, %95 ], [ %183, %182 ]
  br i1 %96, label %106, label %102

102:                                              ; preds = %100
  %103 = getelementptr inbounds i32, i32* %89, i64 %101
  %104 = load i32, i32* %103, align 4
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %182, label %106

106:                                              ; preds = %102, %100
  %107 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %97, align 8
  %108 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %107, i64 0, i32 0
  %109 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %108, align 8
  %110 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %109, i64 0, i32 5
  %111 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %110, align 8
  %112 = load %struct.opj_image_comp*, %struct.opj_image_comp** %98, align 8
  %113 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %111, i64 %101, i32 0
  %114 = load i32, i32* %113, align 8
  %115 = load i32, i32* %24, align 8
  %116 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %112, i64 %101, i32 0
  %117 = load i32, i32* %116, align 8
  %118 = zext i32 %115 to i64
  %119 = zext i32 %117 to i64
  %120 = add nsw i64 %119, -1
  %121 = add nsw i64 %120, %118
  %122 = udiv i64 %121, %119
  %123 = trunc i64 %122 to i32
  %124 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %111, i64 %101, i32 1
  %125 = load i32, i32* %124, align 4
  %126 = load i32, i32* %25, align 4
  %127 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %112, i64 %101, i32 1
  %128 = load i32, i32* %127, align 4
  %129 = zext i32 %126 to i64
  %130 = zext i32 %128 to i64
  %131 = add nsw i64 %130, -1
  %132 = add nsw i64 %131, %129
  %133 = udiv i64 %132, %130
  %134 = trunc i64 %133 to i32
  %135 = icmp ugt i32 %125, %134
  %136 = select i1 %135, i32 %125, i32 %134
  %137 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %111, i64 %101, i32 2
  %138 = load i32, i32* %137, align 8
  %139 = load i32, i32* %26, align 8
  %140 = zext i32 %139 to i64
  %141 = add nsw i64 %120, %140
  %142 = udiv i64 %141, %119
  %143 = trunc i64 %142 to i32
  %144 = icmp ult i32 %138, %143
  %145 = select i1 %144, i32 %138, i32 %143
  %146 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %111, i64 %101, i32 3
  %147 = load i32, i32* %146, align 4
  %148 = load i32, i32* %27, align 4
  %149 = zext i32 %148 to i64
  %150 = add nsw i64 %131, %149
  %151 = udiv i64 %150, %130
  %152 = trunc i64 %151 to i32
  %153 = icmp ult i32 %147, %152
  %154 = select i1 %153, i32 %147, i32 %152
  %155 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %111, i64 %101, i32 5
  %156 = load i32, i32* %155, align 4
  %157 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %111, i64 %101, i32 6
  %158 = load i32, i32* %157, align 8
  %159 = sub i32 %156, %158
  %160 = icmp ugt i32 %159, 31
  br i1 %160, label %182, label %161

161:                                              ; preds = %106
  %162 = icmp ugt i32 %114, %123
  %163 = select i1 %162, i32 %114, i32 %123
  %164 = sub i32 %163, %114
  %165 = lshr i32 %164, %159
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %167, label %179

167:                                              ; preds = %161
  %168 = sub i32 %136, %125
  %169 = lshr i32 %168, %159
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %171, label %179

171:                                              ; preds = %167
  %172 = sub i32 %138, %145
  %173 = lshr i32 %172, %159
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %179

175:                                              ; preds = %171
  %176 = sub i32 %147, %154
  %177 = lshr i32 %176, %159
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %182, label %179

179:                                              ; preds = %171, %167, %161, %175
  store i32 0, i32* %28, align 8
  %180 = load i32, i32* %92, align 8
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %430, label %193

182:                                              ; preds = %175, %106, %102
  %183 = add nuw nsw i64 %101, 1
  %184 = icmp ult i64 %183, %99
  br i1 %184, label %100, label %185

185:                                              ; preds = %182, %88
  %186 = load i32, i32* %28, align 8
  %187 = icmp eq i32 %186, 0
  %188 = icmp ne i32 %93, 0
  br i1 %187, label %192, label %189

189:                                              ; preds = %185
  br i1 %188, label %190, label %430

190:                                              ; preds = %189
  %191 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 5
  br label %195

192:                                              ; preds = %185
  br i1 %188, label %193, label %430

193:                                              ; preds = %179, %192
  %194 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 5
  br label %283

195:                                              ; preds = %281, %190
  %196 = phi i32* [ %89, %190 ], [ %282, %281 ]
  %197 = phi i64 [ 0, %190 ], [ %275, %281 ]
  %198 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %191, align 8
  %199 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %198, i64 0, i32 0
  %200 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %199, align 8
  %201 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %200, i64 0, i32 5
  %202 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %201, align 8
  %203 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %202, i64 %197, i32 7
  %204 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %203, align 8
  %205 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %202, i64 %197, i32 6
  %206 = load i32, i32* %205, align 8
  %207 = add i32 %206, -1
  %208 = zext i32 %207 to i64
  %209 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %204, i64 %208, i32 2
  %210 = load i32, i32* %209, align 8
  %211 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %204, i64 %208, i32 0
  %212 = load i32, i32* %211, align 8
  %213 = sub nsw i32 %210, %212
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %204, i64 %208, i32 3
  %216 = load i32, i32* %215, align 4
  %217 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %204, i64 %208, i32 1
  %218 = load i32, i32* %217, align 4
  %219 = sub nsw i32 %216, %218
  %220 = sext i32 %219 to i64
  %221 = icmp eq i32* %196, null
  br i1 %221, label %226, label %222

222:                                              ; preds = %195
  %223 = getelementptr inbounds i32, i32* %196, i64 %197
  %224 = load i32, i32* %223, align 4
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %274, label %226

226:                                              ; preds = %222, %195
  %227 = icmp eq i32 %219, 0
  br i1 %227, label %233, label %228

228:                                              ; preds = %226
  %229 = udiv i64 -1, %220
  %230 = icmp ult i64 %229, %214
  br i1 %230, label %231, label %233

231:                                              ; preds = %228
  %232 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %11, i32 1, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0)) #9
  br label %1134

233:                                              ; preds = %226, %228
  %234 = mul nsw i64 %220, %214
  %235 = icmp ugt i64 %234, 4611686018427387903
  br i1 %235, label %236, label %238

236:                                              ; preds = %233
  %237 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %11, i32 1, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0)) #9
  br label %1134

238:                                              ; preds = %233
  %239 = shl i64 %234, 2
  %240 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %202, i64 %197, i32 11
  store i64 %239, i64* %240, align 8
  %241 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %202, i64 %197, i32 9
  %242 = load i32*, i32** %241, align 8
  %243 = icmp eq i32* %242, null
  %244 = bitcast i32* %242 to i8*
  br i1 %243, label %253, label %245

245:                                              ; preds = %238
  %246 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %202, i64 %197, i32 12
  %247 = load i64, i64* %246, align 8
  %248 = icmp ugt i64 %239, %247
  br i1 %248, label %249, label %274

249:                                              ; preds = %245
  %250 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %202, i64 %197, i32 10
  %251 = load i32, i32* %250, align 8
  %252 = icmp eq i32 %251, 0
  br i1 %252, label %253, label %263

253:                                              ; preds = %249, %238
  %254 = tail call i8* @opj_image_data_alloc(i64 %239) #9
  %255 = bitcast i32** %241 to i8**
  store i8* %254, i8** %255, align 8
  %256 = icmp ne i8* %254, null
  %257 = load i64, i64* %240, align 8
  %258 = icmp eq i64 %257, 0
  %259 = or i1 %256, %258
  br i1 %259, label %260, label %272

260:                                              ; preds = %253
  %261 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %202, i64 %197, i32 12
  store i64 %257, i64* %261, align 8
  %262 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %202, i64 %197, i32 10
  store i32 1, i32* %262, align 8
  br label %274

263:                                              ; preds = %249
  %264 = bitcast i32** %241 to i8**
  tail call void @opj_image_data_free(i8* nonnull %244) #9
  %265 = load i64, i64* %240, align 8
  %266 = tail call i8* @opj_image_data_alloc(i64 %265) #9
  store i8* %266, i8** %264, align 8
  %267 = icmp eq i8* %266, null
  br i1 %267, label %268, label %270

268:                                              ; preds = %263
  store i32 0, i32* %250, align 8
  %269 = bitcast i64* %240 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %269, i8 0, i64 16, i1 false) #9
  br label %272

270:                                              ; preds = %263
  %271 = load i64, i64* %240, align 8
  store i64 %271, i64* %246, align 8
  store i32 1, i32* %250, align 8
  br label %274

272:                                              ; preds = %253, %268
  %273 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %11, i32 1, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0)) #9
  br label %1134

274:                                              ; preds = %245, %260, %270, %222
  %275 = add nuw nsw i64 %197, 1
  %276 = load %struct.opj_image*, %struct.opj_image** %90, align 8
  %277 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %276, i64 0, i32 4
  %278 = load i32, i32* %277, align 8
  %279 = zext i32 %278 to i64
  %280 = icmp ult i64 %275, %279
  br i1 %280, label %281, label %430

281:                                              ; preds = %274
  %282 = load i32*, i32** %29, align 8
  br label %195

283:                                              ; preds = %428, %193
  %284 = phi i32* [ %89, %193 ], [ %429, %428 ]
  %285 = phi i64 [ 0, %193 ], [ %422, %428 ]
  %286 = phi %struct.opj_image* [ %91, %193 ], [ %423, %428 ]
  %287 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %194, align 8
  %288 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %287, i64 0, i32 0
  %289 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %288, align 8
  %290 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %289, i64 0, i32 5
  %291 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %290, align 8
  %292 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %286, i64 0, i32 6
  %293 = load %struct.opj_image_comp*, %struct.opj_image_comp** %292, align 8
  %294 = icmp eq i32* %284, null
  br i1 %294, label %299, label %295

295:                                              ; preds = %283
  %296 = getelementptr inbounds i32, i32* %284, i64 %285
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 0
  br i1 %298, label %421, label %299

299:                                              ; preds = %295, %283
  %300 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %291, i64 %285, i32 0
  %301 = load i32, i32* %300, align 8
  %302 = load i32, i32* %24, align 8
  %303 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %293, i64 %285, i32 0
  %304 = load i32, i32* %303, align 8
  %305 = zext i32 %302 to i64
  %306 = zext i32 %304 to i64
  %307 = add nsw i64 %305, -1
  %308 = add nsw i64 %307, %306
  %309 = udiv i64 %308, %306
  %310 = trunc i64 %309 to i32
  %311 = icmp ugt i32 %301, %310
  %312 = select i1 %311, i32 %301, i32 %310
  %313 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %291, i64 %285, i32 14
  store i32 %312, i32* %313, align 8
  %314 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %291, i64 %285, i32 1
  %315 = load i32, i32* %314, align 4
  %316 = load i32, i32* %25, align 4
  %317 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %293, i64 %285, i32 1
  %318 = load i32, i32* %317, align 4
  %319 = zext i32 %316 to i64
  %320 = zext i32 %318 to i64
  %321 = add nsw i64 %319, -1
  %322 = add nsw i64 %321, %320
  %323 = udiv i64 %322, %320
  %324 = trunc i64 %323 to i32
  %325 = icmp ugt i32 %315, %324
  %326 = select i1 %325, i32 %315, i32 %324
  %327 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %291, i64 %285, i32 15
  store i32 %326, i32* %327, align 4
  %328 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %291, i64 %285, i32 2
  %329 = load i32, i32* %328, align 8
  %330 = load i32, i32* %26, align 8
  %331 = load i32, i32* %303, align 8
  %332 = zext i32 %330 to i64
  %333 = zext i32 %331 to i64
  %334 = add nsw i64 %332, -1
  %335 = add nsw i64 %334, %333
  %336 = udiv i64 %335, %333
  %337 = trunc i64 %336 to i32
  %338 = icmp ult i32 %329, %337
  %339 = select i1 %338, i32 %329, i32 %337
  %340 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %291, i64 %285, i32 16
  store i32 %339, i32* %340, align 8
  %341 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %291, i64 %285, i32 3
  %342 = load i32, i32* %341, align 4
  %343 = load i32, i32* %27, align 4
  %344 = load i32, i32* %317, align 4
  %345 = zext i32 %343 to i64
  %346 = zext i32 %344 to i64
  %347 = add nsw i64 %345, -1
  %348 = add nsw i64 %347, %346
  %349 = udiv i64 %348, %346
  %350 = trunc i64 %349 to i32
  %351 = icmp ult i32 %342, %350
  %352 = select i1 %351, i32 %342, i32 %350
  %353 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %291, i64 %285, i32 17
  store i32 %352, i32* %353, align 4
  %354 = icmp ult i32 %339, %312
  %355 = icmp ult i32 %352, %326
  %356 = or i1 %354, %355
  br i1 %356, label %419, label %357

357:                                              ; preds = %299
  %358 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %291, i64 %285, i32 5
  %359 = load i32, i32* %358, align 4
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %421, label %361

361:                                              ; preds = %357
  %362 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %291, i64 %285, i32 7
  br label %363

363:                                              ; preds = %416, %361
  %364 = phi i32 [ %312, %361 ], [ %418, %416 ]
  %365 = phi i64 [ 0, %361 ], [ %412, %416 ]
  %366 = phi i32 [ %359, %361 ], [ %413, %416 ]
  %367 = phi i32 [ 0, %361 ], [ %417, %416 ]
  %368 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %362, align 8
  %369 = xor i32 %367, -1
  %370 = add i32 %366, %369
  %371 = zext i32 %364 to i64
  %372 = zext i32 %370 to i64
  %373 = shl nsw i64 -1, %372
  %374 = xor i64 %373, -1
  %375 = add i64 %374, %371
  %376 = lshr i64 %375, %372
  %377 = trunc i64 %376 to i32
  %378 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %368, i64 %365, i32 8
  store i32 %377, i32* %378, align 8
  %379 = load i32, i32* %327, align 4
  %380 = load i32, i32* %358, align 4
  %381 = add i32 %380, %369
  %382 = zext i32 %379 to i64
  %383 = zext i32 %381 to i64
  %384 = shl i64 1, %383
  %385 = add nsw i64 %382, -1
  %386 = add i64 %385, %384
  %387 = lshr i64 %386, %383
  %388 = trunc i64 %387 to i32
  %389 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %368, i64 %365, i32 9
  store i32 %388, i32* %389, align 4
  %390 = load i32, i32* %340, align 8
  %391 = load i32, i32* %358, align 4
  %392 = add i32 %391, %369
  %393 = zext i32 %390 to i64
  %394 = zext i32 %392 to i64
  %395 = shl i64 1, %394
  %396 = add nsw i64 %393, -1
  %397 = add i64 %396, %395
  %398 = lshr i64 %397, %394
  %399 = trunc i64 %398 to i32
  %400 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %368, i64 %365, i32 10
  store i32 %399, i32* %400, align 8
  %401 = load i32, i32* %353, align 4
  %402 = load i32, i32* %358, align 4
  %403 = add i32 %402, %369
  %404 = zext i32 %401 to i64
  %405 = zext i32 %403 to i64
  %406 = shl i64 1, %405
  %407 = add nsw i64 %404, -1
  %408 = add i64 %407, %406
  %409 = lshr i64 %408, %405
  %410 = trunc i64 %409 to i32
  %411 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %368, i64 %365, i32 11
  store i32 %410, i32* %411, align 4
  %412 = add nuw nsw i64 %365, 1
  %413 = load i32, i32* %358, align 4
  %414 = zext i32 %413 to i64
  %415 = icmp ult i64 %412, %414
  br i1 %415, label %416, label %421

416:                                              ; preds = %363
  %417 = add nuw i32 %367, 1
  %418 = load i32, i32* %313, align 8
  br label %363

419:                                              ; preds = %299
  %420 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %11, i32 1, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0)) #9
  br label %1134

421:                                              ; preds = %363, %357, %295
  %422 = add nuw nsw i64 %285, 1
  %423 = load %struct.opj_image*, %struct.opj_image** %90, align 8
  %424 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %423, i64 0, i32 4
  %425 = load i32, i32* %424, align 8
  %426 = zext i32 %425 to i64
  %427 = icmp ult i64 %422, %426
  br i1 %427, label %428, label %430

428:                                              ; preds = %421
  %429 = load i32*, i32** %29, align 8
  br label %283

430:                                              ; preds = %274, %421, %179, %189, %192
  %431 = phi %struct.opj_image* [ %91, %189 ], [ %91, %192 ], [ %91, %179 ], [ %423, %421 ], [ %276, %274 ]
  store i32 0, i32* %14, align 4
  %432 = load %struct.opj_cp*, %struct.opj_cp** %17, align 8
  %433 = tail call %struct.opj_t2* @opj_t2_create(%struct.opj_image* %431, %struct.opj_cp* %432) #9
  %434 = icmp eq %struct.opj_t2* %433, null
  br i1 %434, label %1134, label %435

435:                                              ; preds = %430
  %436 = load i32, i32* %16, align 8
  %437 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 5
  %438 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %437, align 8
  %439 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %438, i64 0, i32 0
  %440 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %439, align 8
  %441 = call i32 @opj_t2_decode_packets(%struct.opj_tcd* %0, %struct.opj_t2* nonnull %433, i32 %436, %struct.opj_tcd_tile* %440, i8* %7, i32* nonnull %14, i32 %8, %struct.opj_codestream_index* %10, %struct.opj_event_mgr* %11) #9
  %442 = icmp eq i32 %441, 0
  call void @opj_t2_destroy(%struct.opj_t2* nonnull %433) #9
  br i1 %442, label %1134, label %443

443:                                              ; preds = %435
  %444 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %437, align 8
  %445 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %444, i64 0, i32 0
  %446 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %445, align 8
  %447 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %446, i64 0, i32 5
  %448 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %447, align 8
  %449 = load %struct.opj_tcp*, %struct.opj_tcp** %23, align 8
  %450 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %449, i64 0, i32 15
  %451 = load %struct.opj_tccp*, %struct.opj_tccp** %450, align 8
  %452 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %452) #9
  store volatile i32 -1431655766, i32* %13, align 4
  store volatile i32 1, i32* %13, align 4
  %453 = call %struct.opj_mutex_t* @opj_mutex_create() #9
  %454 = load %struct.opj_tcp*, %struct.opj_tcp** %23, align 8
  %455 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %454, i64 0, i32 3
  %456 = load i32, i32* %455, align 4
  %457 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %454, i64 0, i32 2
  %458 = load i32, i32* %457, align 8
  %459 = icmp eq i32 %456, %458
  br i1 %459, label %460, label %465

460:                                              ; preds = %443
  %461 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %451, i64 0, i32 4
  %462 = load i32, i32* %461, align 4
  %463 = lshr i32 %462, 4
  %464 = and i32 %463, 1
  br label %465

465:                                              ; preds = %460, %443
  %466 = phi i32 [ 0, %443 ], [ %464, %460 ]
  %467 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %446, i64 0, i32 4
  %468 = load i32, i32* %467, align 8
  %469 = icmp eq i32 %468, 0
  br i1 %469, label %493, label %470

470:                                              ; preds = %465, %486
  %471 = phi i32 [ %487, %486 ], [ %468, %465 ]
  %472 = phi i64 [ %488, %486 ], [ 0, %465 ]
  %473 = phi %struct.opj_tccp* [ %490, %486 ], [ %451, %465 ]
  %474 = phi %struct.opj_tcd_tilecomp* [ %489, %486 ], [ %448, %465 ]
  %475 = load i32*, i32** %29, align 8
  %476 = icmp eq i32* %475, null
  br i1 %476, label %481, label %477

477:                                              ; preds = %470
  %478 = getelementptr inbounds i32, i32* %475, i64 %472
  %479 = load i32, i32* %478, align 4
  %480 = icmp eq i32 %479, 0
  br i1 %480, label %486, label %481

481:                                              ; preds = %477, %470
  call void @opj_t1_decode_cblks(%struct.opj_tcd* %0, i32* nonnull %13, %struct.opj_tcd_tilecomp* %474, %struct.opj_tccp* %473, %struct.opj_event_mgr* %11, %struct.opj_mutex_t* %453, i32 %466) #9
  %482 = load volatile i32, i32* %13, align 4
  %483 = icmp eq i32 %482, 0
  br i1 %483, label %493, label %484

484:                                              ; preds = %481
  %485 = load i32, i32* %467, align 8
  br label %486

486:                                              ; preds = %484, %477
  %487 = phi i32 [ %485, %484 ], [ %471, %477 ]
  %488 = add nuw nsw i64 %472, 1
  %489 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %474, i64 1
  %490 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %473, i64 1
  %491 = zext i32 %487 to i64
  %492 = icmp ult i64 %488, %491
  br i1 %492, label %470, label %493

493:                                              ; preds = %486, %481, %465
  %494 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 11
  %495 = load %struct.opj_thread_pool_t*, %struct.opj_thread_pool_t** %494, align 8
  call void @opj_thread_pool_wait_completion(%struct.opj_thread_pool_t* %495, i32 0) #9
  %496 = icmp eq %struct.opj_mutex_t* %453, null
  br i1 %496, label %498, label %497

497:                                              ; preds = %493
  call void @opj_mutex_destroy(%struct.opj_mutex_t* nonnull %453) #9
  br label %498

498:                                              ; preds = %493, %497
  %499 = load volatile i32, i32* %13, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %452) #9
  %500 = icmp eq i32 %499, 0
  br i1 %500, label %1134, label %501

501:                                              ; preds = %498
  %502 = load i32, i32* %28, align 8
  %503 = icmp eq i32 %502, 0
  br i1 %503, label %504, label %572

504:                                              ; preds = %501
  %505 = load %struct.opj_image*, %struct.opj_image** %90, align 8
  %506 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %505, i64 0, i32 4
  %507 = load i32, i32* %506, align 8
  %508 = icmp eq i32 %507, 0
  br i1 %508, label %572, label %509

509:                                              ; preds = %504, %565
  %510 = phi i64 [ %566, %565 ], [ 0, %504 ]
  %511 = phi %struct.opj_image* [ %567, %565 ], [ %505, %504 ]
  %512 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %437, align 8
  %513 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %512, i64 0, i32 0
  %514 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %513, align 8
  %515 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %514, i64 0, i32 5
  %516 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %515, align 8
  %517 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %511, i64 0, i32 6
  %518 = load %struct.opj_image_comp*, %struct.opj_image_comp** %517, align 8
  %519 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %516, i64 %510, i32 7
  %520 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %519, align 8
  %521 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %518, i64 %510, i32 9
  %522 = load i32, i32* %521, align 4
  %523 = zext i32 %522 to i64
  %524 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %520, i64 %523, i32 10
  %525 = load i32, i32* %524, align 8
  %526 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %520, i64 %523, i32 8
  %527 = load i32, i32* %526, align 8
  %528 = sub i32 %525, %527
  %529 = zext i32 %528 to i64
  %530 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %520, i64 %523, i32 11
  %531 = load i32, i32* %530, align 4
  %532 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %520, i64 %523, i32 9
  %533 = load i32, i32* %532, align 4
  %534 = sub i32 %531, %533
  %535 = zext i32 %534 to i64
  %536 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %516, i64 %510, i32 13
  %537 = bitcast i32** %536 to i8**
  %538 = load i8*, i8** %537, align 8
  call void @opj_image_data_free(i8* %538) #9
  store i32* null, i32** %536, align 8
  %539 = load i32*, i32** %29, align 8
  %540 = icmp eq i32* %539, null
  br i1 %540, label %545, label %541

541:                                              ; preds = %509
  %542 = getelementptr inbounds i32, i32* %539, i64 %510
  %543 = load i32, i32* %542, align 4
  %544 = icmp eq i32 %543, 0
  br i1 %544, label %565, label %545

545:                                              ; preds = %541, %509
  %546 = icmp ne i32 %528, 0
  %547 = icmp ne i32 %534, 0
  %548 = and i1 %546, %547
  br i1 %548, label %549, label %565

549:                                              ; preds = %545
  %550 = udiv i64 -1, %535
  %551 = icmp ult i64 %550, %529
  br i1 %551, label %552, label %554

552:                                              ; preds = %549
  %553 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %11, i32 1, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0)) #9
  br label %1134

554:                                              ; preds = %549
  %555 = mul nuw i64 %535, %529
  %556 = icmp ugt i64 %555, 4611686018427387903
  br i1 %556, label %557, label %559

557:                                              ; preds = %554
  %558 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %11, i32 1, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0)) #9
  br label %1134

559:                                              ; preds = %554
  %560 = shl i64 %555, 2
  %561 = call i8* @opj_image_data_alloc(i64 %560) #9
  store i8* %561, i8** %537, align 8
  %562 = icmp eq i8* %561, null
  br i1 %562, label %563, label %565

563:                                              ; preds = %559
  %564 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %11, i32 1, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0)) #9
  br label %1134

565:                                              ; preds = %541, %559, %545
  %566 = add nuw nsw i64 %510, 1
  %567 = load %struct.opj_image*, %struct.opj_image** %90, align 8
  %568 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %567, i64 0, i32 4
  %569 = load i32, i32* %568, align 8
  %570 = zext i32 %569 to i64
  %571 = icmp ult i64 %566, %570
  br i1 %571, label %509, label %572

572:                                              ; preds = %565, %504, %501
  %573 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %437, align 8
  %574 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %573, i64 0, i32 0
  %575 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %574, align 8
  %576 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %575, i64 0, i32 4
  %577 = load i32, i32* %576, align 8
  %578 = icmp eq i32 %577, 0
  br i1 %578, label %624, label %579

579:                                              ; preds = %572
  %580 = load %struct.opj_image*, %struct.opj_image** %90, align 8
  %581 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %580, i64 0, i32 6
  %582 = load %struct.opj_image_comp*, %struct.opj_image_comp** %581, align 8
  %583 = load %struct.opj_tcp*, %struct.opj_tcp** %23, align 8
  %584 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %583, i64 0, i32 15
  %585 = load %struct.opj_tccp*, %struct.opj_tccp** %584, align 8
  %586 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %575, i64 0, i32 5
  %587 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %586, align 8
  br label %588

588:                                              ; preds = %612, %579
  %589 = phi i64 [ 0, %579 ], [ %613, %612 ]
  %590 = phi %struct.opj_image_comp* [ %582, %579 ], [ %615, %612 ]
  %591 = phi %struct.opj_tccp* [ %585, %579 ], [ %616, %612 ]
  %592 = phi %struct.opj_tcd_tilecomp* [ %587, %579 ], [ %614, %612 ]
  %593 = load i32*, i32** %29, align 8
  %594 = icmp eq i32* %593, null
  br i1 %594, label %599, label %595

595:                                              ; preds = %588
  %596 = getelementptr inbounds i32, i32* %593, i64 %589
  %597 = load i32, i32* %596, align 4
  %598 = icmp eq i32 %597, 0
  br i1 %598, label %612, label %599

599:                                              ; preds = %595, %588
  %600 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %591, i64 0, i32 5
  %601 = load i32, i32* %600, align 4
  %602 = icmp eq i32 %601, 1
  %603 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %590, i64 0, i32 9
  %604 = load i32, i32* %603, align 4
  %605 = add i32 %604, 1
  br i1 %602, label %606, label %609

606:                                              ; preds = %599
  %607 = call i32 @opj_dwt_decode(%struct.opj_tcd* %0, %struct.opj_tcd_tilecomp* %592, i32 %605) #9
  %608 = icmp eq i32 %607, 0
  br i1 %608, label %1134, label %612

609:                                              ; preds = %599
  %610 = call i32 @opj_dwt_decode_real(%struct.opj_tcd* %0, %struct.opj_tcd_tilecomp* %592, i32 %605) #9
  %611 = icmp eq i32 %610, 0
  br i1 %611, label %1134, label %612

612:                                              ; preds = %609, %606, %595
  %613 = add nuw nsw i64 %589, 1
  %614 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %592, i64 1
  %615 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %590, i64 1
  %616 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %591, i64 1
  %617 = load i32, i32* %576, align 8
  %618 = zext i32 %617 to i64
  %619 = icmp ult i64 %613, %618
  br i1 %619, label %588, label %620

620:                                              ; preds = %612
  %621 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %437, align 8
  %622 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %621, i64 0, i32 0
  %623 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %622, align 8
  br label %624

624:                                              ; preds = %620, %572
  %625 = phi %struct.opj_tcd_tile* [ %623, %620 ], [ %575, %572 ]
  %626 = load %struct.opj_tcp*, %struct.opj_tcp** %23, align 8
  %627 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %625, i64 0, i32 5
  %628 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %627, align 8
  %629 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %626, i64 0, i32 4
  %630 = load i32, i32* %629, align 8
  %631 = icmp eq i32 %630, 0
  br i1 %631, label %880, label %632

632:                                              ; preds = %624
  %633 = load i32*, i32** %29, align 8
  %634 = icmp eq i32* %633, null
  br i1 %634, label %635, label %880

635:                                              ; preds = %632
  %636 = load i32, i32* %28, align 8
  %637 = icmp eq i32 %636, 0
  %638 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %628, i64 0, i32 7
  %639 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %638, align 8
  br i1 %637, label %719, label %640

640:                                              ; preds = %635
  %641 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %628, i64 0, i32 6
  %642 = load i32, i32* %641, align 8
  %643 = zext i32 %642 to i64
  %644 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %639, i64 %643
  %645 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %644, i64 -1
  %646 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %645, i64 0, i32 2
  %647 = load i32, i32* %646, align 8
  %648 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %645, i64 0, i32 0
  %649 = load i32, i32* %648, align 8
  %650 = sub nsw i32 %647, %649
  %651 = sext i32 %650 to i64
  %652 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %645, i64 0, i32 3
  %653 = load i32, i32* %652, align 4
  %654 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %645, i64 0, i32 1
  %655 = load i32, i32* %654, align 4
  %656 = sub nsw i32 %653, %655
  %657 = sext i32 %656 to i64
  %658 = mul nsw i64 %657, %651
  %659 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %625, i64 0, i32 4
  %660 = load i32, i32* %659, align 8
  %661 = icmp ugt i32 %660, 2
  br i1 %661, label %662, label %877

662:                                              ; preds = %640
  %663 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %628, i64 1, i32 6
  %664 = load i32, i32* %663, align 8
  %665 = icmp eq i32 %642, %664
  br i1 %665, label %666, label %670

666:                                              ; preds = %662
  %667 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %628, i64 2, i32 6
  %668 = load i32, i32* %667, align 8
  %669 = icmp eq i32 %642, %668
  br i1 %669, label %672, label %670

670:                                              ; preds = %666, %662
  %671 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %11, i32 1, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.11, i64 0, i64 0)) #9
  br label %1134

672:                                              ; preds = %666
  %673 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %628, i64 1, i32 7
  %674 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %673, align 8
  %675 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %674, i64 %643
  %676 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %675, i64 -1
  %677 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %628, i64 2, i32 7
  %678 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %677, align 8
  %679 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %678, i64 %643
  %680 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %679, i64 -1
  %681 = load %struct.opj_image*, %struct.opj_image** %90, align 8
  %682 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %681, i64 0, i32 6
  %683 = load %struct.opj_image_comp*, %struct.opj_image_comp** %682, align 8
  %684 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %683, i64 0, i32 9
  %685 = load i32, i32* %684, align 4
  %686 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %683, i64 1, i32 9
  %687 = load i32, i32* %686, align 4
  %688 = icmp eq i32 %685, %687
  br i1 %688, label %689, label %717

689:                                              ; preds = %672
  %690 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %683, i64 2, i32 9
  %691 = load i32, i32* %690, align 4
  %692 = icmp eq i32 %685, %691
  br i1 %692, label %693, label %717

693:                                              ; preds = %689
  %694 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %676, i64 0, i32 2
  %695 = bitcast i32* %694 to <2 x i32>*
  %696 = load <2 x i32>, <2 x i32>* %695, align 8
  %697 = bitcast %struct.opj_tcd_resolution* %676 to <2 x i32>*
  %698 = load <2 x i32>, <2 x i32>* %697, align 8
  %699 = sub nsw <2 x i32> %696, %698
  %700 = sext <2 x i32> %699 to <2 x i64>
  %701 = extractelement <2 x i64> %700, i32 0
  %702 = extractelement <2 x i64> %700, i32 1
  %703 = mul nsw i64 %702, %701
  %704 = icmp eq i64 %703, %658
  br i1 %704, label %705, label %717

705:                                              ; preds = %693
  %706 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %680, i64 0, i32 2
  %707 = bitcast i32* %706 to <2 x i32>*
  %708 = load <2 x i32>, <2 x i32>* %707, align 8
  %709 = bitcast %struct.opj_tcd_resolution* %680 to <2 x i32>*
  %710 = load <2 x i32>, <2 x i32>* %709, align 8
  %711 = sub nsw <2 x i32> %708, %710
  %712 = sext <2 x i32> %711 to <2 x i64>
  %713 = extractelement <2 x i64> %712, i32 0
  %714 = extractelement <2 x i64> %712, i32 1
  %715 = mul nsw i64 %714, %713
  %716 = icmp eq i64 %715, %658
  br i1 %716, label %788, label %717

717:                                              ; preds = %705, %693, %689, %672
  %718 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %11, i32 1, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.11, i64 0, i64 0)) #9
  br label %1134

719:                                              ; preds = %635
  %720 = load %struct.opj_image*, %struct.opj_image** %90, align 8
  %721 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %720, i64 0, i32 6
  %722 = load %struct.opj_image_comp*, %struct.opj_image_comp** %721, align 8
  %723 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %722, i64 0, i32 9
  %724 = load i32, i32* %723, align 4
  %725 = zext i32 %724 to i64
  %726 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %639, i64 %725, i32 10
  %727 = load i32, i32* %726, align 8
  %728 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %639, i64 %725, i32 8
  %729 = load i32, i32* %728, align 8
  %730 = sub i32 %727, %729
  %731 = zext i32 %730 to i64
  %732 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %639, i64 %725, i32 11
  %733 = load i32, i32* %732, align 4
  %734 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %639, i64 %725, i32 9
  %735 = load i32, i32* %734, align 4
  %736 = sub i32 %733, %735
  %737 = zext i32 %736 to i64
  %738 = mul nuw i64 %737, %731
  %739 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %625, i64 0, i32 4
  %740 = load i32, i32* %739, align 8
  %741 = icmp ugt i32 %740, 2
  br i1 %741, label %742, label %877

742:                                              ; preds = %719
  %743 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %628, i64 1, i32 7
  %744 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %743, align 8
  %745 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %722, i64 1, i32 9
  %746 = load i32, i32* %745, align 4
  %747 = zext i32 %746 to i64
  %748 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %628, i64 2, i32 7
  %749 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %748, align 8
  %750 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %722, i64 2, i32 9
  %751 = load i32, i32* %750, align 4
  %752 = zext i32 %751 to i64
  %753 = icmp eq i32 %724, %746
  %754 = icmp eq i32 %724, %751
  %755 = and i1 %753, %754
  br i1 %755, label %756, label %786

756:                                              ; preds = %742
  %757 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %744, i64 %747, i32 10
  %758 = load i32, i32* %757, align 8
  %759 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %744, i64 %747, i32 8
  %760 = load i32, i32* %759, align 8
  %761 = sub i32 %758, %760
  %762 = zext i32 %761 to i64
  %763 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %744, i64 %747, i32 11
  %764 = load i32, i32* %763, align 4
  %765 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %744, i64 %747, i32 9
  %766 = load i32, i32* %765, align 4
  %767 = sub i32 %764, %766
  %768 = zext i32 %767 to i64
  %769 = mul nuw i64 %768, %762
  %770 = icmp eq i64 %769, %738
  br i1 %770, label %771, label %786

771:                                              ; preds = %756
  %772 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %749, i64 %752, i32 10
  %773 = load i32, i32* %772, align 8
  %774 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %749, i64 %752, i32 8
  %775 = load i32, i32* %774, align 8
  %776 = sub i32 %773, %775
  %777 = zext i32 %776 to i64
  %778 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %749, i64 %752, i32 11
  %779 = load i32, i32* %778, align 4
  %780 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %749, i64 %752, i32 9
  %781 = load i32, i32* %780, align 4
  %782 = sub i32 %779, %781
  %783 = zext i32 %782 to i64
  %784 = mul nuw i64 %783, %777
  %785 = icmp eq i64 %784, %738
  br i1 %785, label %788, label %786

786:                                              ; preds = %771, %756, %742
  %787 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %11, i32 1, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.11, i64 0, i64 0)) #9
  br label %1134

788:                                              ; preds = %771, %705
  %789 = phi i32 [ %740, %771 ], [ %660, %705 ]
  %790 = phi i64 [ %738, %771 ], [ %658, %705 ]
  %791 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %625, i64 0, i32 4
  %792 = icmp eq i32 %630, 2
  br i1 %792, label %793, label %834

793:                                              ; preds = %788
  %794 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %626, i64 0, i32 21
  %795 = load float*, float** %794, align 8
  %796 = icmp eq float* %795, null
  br i1 %796, label %880, label %797

797:                                              ; preds = %793
  %798 = zext i32 %789 to i64
  %799 = shl nuw nsw i64 %798, 3
  %800 = call i8* @opj_malloc(i64 %799) #9
  %801 = bitcast i8* %800 to i8**
  %802 = icmp eq i8* %800, null
  br i1 %802, label %1134, label %803

803:                                              ; preds = %797
  %804 = load i32, i32* %791, align 8
  %805 = icmp eq i32 %804, 0
  br i1 %805, label %823, label %806

806:                                              ; preds = %803, %806
  %807 = phi i64 [ %819, %806 ], [ 0, %803 ]
  %808 = phi %struct.opj_tcd_tilecomp* [ %818, %806 ], [ %628, %803 ]
  %809 = load i32, i32* %28, align 8
  %810 = icmp eq i32 %809, 0
  %811 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %808, i64 0, i32 13
  %812 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %808, i64 0, i32 9
  %813 = select i1 %810, i32** %811, i32** %812
  %814 = bitcast i32** %813 to i64*
  %815 = load i64, i64* %814, align 8
  %816 = getelementptr inbounds i8*, i8** %801, i64 %807
  %817 = bitcast i8** %816 to i64*
  store i64 %815, i64* %817, align 8
  %818 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %808, i64 1
  %819 = add nuw nsw i64 %807, 1
  %820 = load i32, i32* %791, align 8
  %821 = zext i32 %820 to i64
  %822 = icmp ult i64 %819, %821
  br i1 %822, label %806, label %823

823:                                              ; preds = %806, %803
  %824 = phi i32 [ 0, %803 ], [ %820, %806 ]
  %825 = bitcast float** %794 to i8**
  %826 = load i8*, i8** %825, align 8
  %827 = load %struct.opj_image*, %struct.opj_image** %90, align 8
  %828 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %827, i64 0, i32 6
  %829 = load %struct.opj_image_comp*, %struct.opj_image_comp** %828, align 8
  %830 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %829, i64 0, i32 8
  %831 = load i32, i32* %830, align 8
  %832 = call i32 @opj_mct_decode_custom(i8* %826, i64 %790, i8** nonnull %801, i32 %824, i32 %831) #9
  %833 = icmp eq i32 %832, 0
  call void @opj_free(i8* nonnull %800) #9
  br i1 %833, label %1134, label %880

834:                                              ; preds = %788
  %835 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %626, i64 0, i32 15
  %836 = load %struct.opj_tccp*, %struct.opj_tccp** %835, align 8
  %837 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %836, i64 0, i32 5
  %838 = load i32, i32* %837, align 4
  %839 = icmp eq i32 %838, 1
  %840 = icmp ne i32 %636, 0
  br i1 %839, label %841, label %856

841:                                              ; preds = %834
  br i1 %840, label %842, label %849

842:                                              ; preds = %841
  %843 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %628, i64 0, i32 9
  %844 = load i32*, i32** %843, align 8
  %845 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %628, i64 1, i32 9
  %846 = load i32*, i32** %845, align 8
  %847 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %628, i64 2, i32 9
  %848 = load i32*, i32** %847, align 8
  call void @opj_mct_decode(i32* %844, i32* %846, i32* %848, i64 %790) #9
  br label %880

849:                                              ; preds = %841
  %850 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %628, i64 0, i32 13
  %851 = load i32*, i32** %850, align 8
  %852 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %628, i64 1, i32 13
  %853 = load i32*, i32** %852, align 8
  %854 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %628, i64 2, i32 13
  %855 = load i32*, i32** %854, align 8
  call void @opj_mct_decode(i32* %851, i32* %853, i32* %855, i64 %790) #9
  br label %880

856:                                              ; preds = %834
  br i1 %840, label %857, label %867

857:                                              ; preds = %856
  %858 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %628, i64 0, i32 9
  %859 = bitcast i32** %858 to float**
  %860 = load float*, float** %859, align 8
  %861 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %628, i64 1, i32 9
  %862 = bitcast i32** %861 to float**
  %863 = load float*, float** %862, align 8
  %864 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %628, i64 2, i32 9
  %865 = bitcast i32** %864 to float**
  %866 = load float*, float** %865, align 8
  call void @opj_mct_decode_real(float* %860, float* %863, float* %866, i64 %790) #9
  br label %880

867:                                              ; preds = %856
  %868 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %628, i64 0, i32 13
  %869 = bitcast i32** %868 to float**
  %870 = load float*, float** %869, align 8
  %871 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %628, i64 1, i32 13
  %872 = bitcast i32** %871 to float**
  %873 = load float*, float** %872, align 8
  %874 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %628, i64 2, i32 13
  %875 = bitcast i32** %874 to float**
  %876 = load float*, float** %875, align 8
  call void @opj_mct_decode_real(float* %870, float* %873, float* %876, i64 %790) #9
  br label %880

877:                                              ; preds = %719, %640
  %878 = phi i32 [ %660, %640 ], [ %740, %719 ]
  %879 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %11, i32 1, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.12, i64 0, i64 0), i32 %878) #9
  br label %880

880:                                              ; preds = %823, %842, %849, %857, %867, %877, %793, %632, %624
  %881 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %437, align 8
  %882 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %881, i64 0, i32 0
  %883 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %882, align 8
  %884 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %883, i64 0, i32 4
  %885 = load i32, i32* %884, align 8
  %886 = icmp eq i32 %885, 0
  br i1 %886, label %1134, label %887

887:                                              ; preds = %880
  %888 = load %struct.opj_image*, %struct.opj_image** %90, align 8
  %889 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %888, i64 0, i32 6
  %890 = load %struct.opj_image_comp*, %struct.opj_image_comp** %889, align 8
  %891 = load %struct.opj_tcp*, %struct.opj_tcp** %23, align 8
  %892 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %891, i64 0, i32 15
  %893 = load %struct.opj_tccp*, %struct.opj_tccp** %892, align 8
  %894 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %883, i64 0, i32 5
  %895 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %894, align 8
  br label %896

896:                                              ; preds = %1126, %887
  %897 = phi i64 [ 0, %887 ], [ %1127, %1126 ]
  %898 = phi %struct.opj_image_comp* [ %890, %887 ], [ %1128, %1126 ]
  %899 = phi %struct.opj_tccp* [ %893, %887 ], [ %1129, %1126 ]
  %900 = phi %struct.opj_tcd_tilecomp* [ %895, %887 ], [ %1130, %1126 ]
  %901 = getelementptr %struct.opj_tccp, %struct.opj_tccp* %893, i64 %897, i32 12
  %902 = bitcast i32* %901 to i8*
  %903 = getelementptr i8, i8* %902, i64 1
  %904 = load i32*, i32** %29, align 8
  %905 = icmp eq i32* %904, null
  br i1 %905, label %910, label %906

906:                                              ; preds = %896
  %907 = getelementptr inbounds i32, i32* %904, i64 %897
  %908 = load i32, i32* %907, align 4
  %909 = icmp eq i32 %908, 0
  br i1 %909, label %1126, label %910

910:                                              ; preds = %906, %896
  %911 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %900, i64 0, i32 7
  %912 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %911, align 8
  %913 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %898, i64 0, i32 9
  %914 = load i32, i32* %913, align 4
  %915 = zext i32 %914 to i64
  %916 = load i32, i32* %28, align 8
  %917 = icmp eq i32 %916, 0
  br i1 %917, label %918, label %930

918:                                              ; preds = %910
  %919 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %912, i64 %915, i32 10
  %920 = load i32, i32* %919, align 8
  %921 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %912, i64 %915, i32 8
  %922 = load i32, i32* %921, align 8
  %923 = sub i32 %920, %922
  %924 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %912, i64 %915, i32 11
  %925 = load i32, i32* %924, align 4
  %926 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %912, i64 %915, i32 9
  %927 = load i32, i32* %926, align 4
  %928 = sub i32 %925, %927
  %929 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %900, i64 0, i32 13
  br label %952

930:                                              ; preds = %910
  %931 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %912, i64 %915, i32 2
  %932 = load i32, i32* %931, align 8
  %933 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %912, i64 %915, i32 0
  %934 = load i32, i32* %933, align 8
  %935 = sub nsw i32 %932, %934
  %936 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %912, i64 %915, i32 3
  %937 = load i32, i32* %936, align 4
  %938 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %912, i64 %915, i32 1
  %939 = load i32, i32* %938, align 4
  %940 = sub nsw i32 %937, %939
  %941 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %900, i64 0, i32 6
  %942 = load i32, i32* %941, align 8
  %943 = add i32 %942, -1
  %944 = zext i32 %943 to i64
  %945 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %912, i64 %944, i32 2
  %946 = load i32, i32* %945, align 8
  %947 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %912, i64 %944, i32 0
  %948 = load i32, i32* %947, align 8
  %949 = sub i32 %946, %935
  %950 = sub i32 %949, %948
  %951 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %900, i64 0, i32 9
  br label %952

952:                                              ; preds = %930, %918
  %953 = phi i32 [ %935, %930 ], [ %923, %918 ]
  %954 = phi i32 [ %940, %930 ], [ %928, %918 ]
  %955 = phi i32** [ %951, %930 ], [ %929, %918 ]
  %956 = phi i32 [ %950, %930 ], [ 0, %918 ]
  %957 = load i32*, i32** %955, align 8
  %958 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %898, i64 0, i32 8
  %959 = load i32, i32* %958, align 8
  %960 = icmp eq i32 %959, 0
  %961 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %898, i64 0, i32 6
  %962 = load i32, i32* %961, align 8
  br i1 %960, label %968, label %963

963:                                              ; preds = %952
  %964 = add i32 %962, -1
  %965 = shl i32 1, %964
  %966 = sub nsw i32 0, %965
  %967 = add nsw i32 %965, -1
  br label %971

968:                                              ; preds = %952
  %969 = shl nsw i32 -1, %962
  %970 = xor i32 %969, -1
  br label %971

971:                                              ; preds = %968, %963
  %972 = phi i32 [ %966, %963 ], [ 0, %968 ]
  %973 = phi i32 [ %967, %963 ], [ %970, %968 ]
  %974 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %899, i64 0, i32 5
  %975 = load i32, i32* %974, align 4
  %976 = icmp eq i32 %975, 1
  %977 = icmp ne i32 %954, 0
  br i1 %976, label %985, label %978

978:                                              ; preds = %971
  br i1 %977, label %979, label %1126

979:                                              ; preds = %978
  %980 = icmp eq i32 %953, 0
  %981 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %899, i64 0, i32 12
  %982 = sext i32 %972 to i64
  %983 = sext i32 %973 to i64
  %984 = zext i32 %956 to i64
  br label %1095

985:                                              ; preds = %971
  br i1 %977, label %986, label %1126

986:                                              ; preds = %985
  %987 = icmp eq i32 %953, 0
  %988 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %899, i64 0, i32 12
  %989 = zext i32 %956 to i64
  %990 = add i32 %953, -1
  %991 = zext i32 %990 to i64
  %992 = add nuw nsw i64 %991, 1
  %993 = zext i32 %990 to i64
  %994 = icmp ult i64 %992, 8
  %995 = and i64 %992, 8589934584
  %996 = trunc i64 %995 to i32
  %997 = insertelement <4 x i32> undef, i32 %972, i32 0
  %998 = shufflevector <4 x i32> %997, <4 x i32> undef, <4 x i32> zeroinitializer
  %999 = insertelement <4 x i32> undef, i32 %972, i32 0
  %1000 = shufflevector <4 x i32> %999, <4 x i32> undef, <4 x i32> zeroinitializer
  %1001 = insertelement <4 x i32> undef, i32 %973, i32 0
  %1002 = shufflevector <4 x i32> %1001, <4 x i32> undef, <4 x i32> zeroinitializer
  %1003 = insertelement <4 x i32> undef, i32 %973, i32 0
  %1004 = shufflevector <4 x i32> %1003, <4 x i32> undef, <4 x i32> zeroinitializer
  %1005 = icmp eq i64 %992, %995
  br label %1006

1006:                                             ; preds = %1090, %986
  %1007 = phi i32* [ %957, %986 ], [ %1092, %1090 ]
  %1008 = phi i32 [ 0, %986 ], [ %1093, %1090 ]
  %1009 = bitcast i32* %1007 to i8*
  br i1 %987, label %1090, label %1010

1010:                                             ; preds = %1006
  br i1 %994, label %1047, label %1011

1011:                                             ; preds = %1010
  %1012 = getelementptr i32, i32* %1007, i64 1
  %1013 = getelementptr i32, i32* %1012, i64 %993
  %1014 = icmp ugt i8* %903, %1009
  %1015 = icmp ult i32* %988, %1013
  %1016 = and i1 %1014, %1015
  br i1 %1016, label %1047, label %1017

1017:                                             ; preds = %1011
  %1018 = getelementptr i32, i32* %1007, i64 %995
  %1019 = load i32, i32* %988, align 4, !alias.scope !15
  %1020 = insertelement <4 x i32> undef, i32 %1019, i32 0
  %1021 = shufflevector <4 x i32> %1020, <4 x i32> undef, <4 x i32> zeroinitializer
  %1022 = insertelement <4 x i32> undef, i32 %1019, i32 0
  %1023 = shufflevector <4 x i32> %1022, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %1024

1024:                                             ; preds = %1024, %1017
  %1025 = phi i64 [ 0, %1017 ], [ %1044, %1024 ]
  %1026 = getelementptr i32, i32* %1007, i64 %1025
  %1027 = bitcast i32* %1026 to <4 x i32>*
  %1028 = load <4 x i32>, <4 x i32>* %1027, align 4, !alias.scope !18, !noalias !15
  %1029 = getelementptr i32, i32* %1026, i64 4
  %1030 = bitcast i32* %1029 to <4 x i32>*
  %1031 = load <4 x i32>, <4 x i32>* %1030, align 4, !alias.scope !18, !noalias !15
  %1032 = add nsw <4 x i32> %1021, %1028
  %1033 = add nsw <4 x i32> %1023, %1031
  %1034 = icmp slt <4 x i32> %1032, %998
  %1035 = icmp slt <4 x i32> %1033, %1000
  %1036 = icmp sgt <4 x i32> %1032, %1002
  %1037 = icmp sgt <4 x i32> %1033, %1004
  %1038 = select <4 x i1> %1036, <4 x i32> %1002, <4 x i32> %1032
  %1039 = select <4 x i1> %1037, <4 x i32> %1004, <4 x i32> %1033
  %1040 = select <4 x i1> %1034, <4 x i32> %998, <4 x i32> %1038
  %1041 = select <4 x i1> %1035, <4 x i32> %1000, <4 x i32> %1039
  %1042 = bitcast i32* %1026 to <4 x i32>*
  store <4 x i32> %1040, <4 x i32>* %1042, align 4, !alias.scope !18, !noalias !15
  %1043 = bitcast i32* %1029 to <4 x i32>*
  store <4 x i32> %1041, <4 x i32>* %1043, align 4, !alias.scope !18, !noalias !15
  %1044 = add i64 %1025, 8
  %1045 = icmp eq i64 %1044, %995
  br i1 %1045, label %1046, label %1024, !llvm.loop !20

1046:                                             ; preds = %1024
  br i1 %1005, label %1090, label %1047

1047:                                             ; preds = %1046, %1011, %1010
  %1048 = phi i32* [ %1007, %1011 ], [ %1007, %1010 ], [ %1018, %1046 ]
  %1049 = phi i32 [ 0, %1011 ], [ 0, %1010 ], [ %996, %1046 ]
  %1050 = sub i32 %953, %1049
  %1051 = and i32 %1050, 1
  %1052 = icmp eq i32 %1051, 0
  br i1 %1052, label %1063, label %1053

1053:                                             ; preds = %1047
  %1054 = load i32, i32* %1048, align 4
  %1055 = load i32, i32* %988, align 4
  %1056 = add nsw i32 %1055, %1054
  %1057 = icmp slt i32 %1056, %972
  %1058 = icmp sgt i32 %1056, %973
  %1059 = select i1 %1058, i32 %973, i32 %1056
  %1060 = select i1 %1057, i32 %972, i32 %1059
  store i32 %1060, i32* %1048, align 4
  %1061 = getelementptr inbounds i32, i32* %1048, i64 1
  %1062 = add nuw i32 %1049, 1
  br label %1063

1063:                                             ; preds = %1053, %1047
  %1064 = phi i32* [ %1061, %1053 ], [ undef, %1047 ]
  %1065 = phi i32* [ %1061, %1053 ], [ %1048, %1047 ]
  %1066 = phi i32 [ %1062, %1053 ], [ %1049, %1047 ]
  %1067 = add i32 %1049, 1
  %1068 = icmp eq i32 %953, %1067
  br i1 %1068, label %1090, label %1069

1069:                                             ; preds = %1063, %1069
  %1070 = phi i32* [ %1087, %1069 ], [ %1065, %1063 ]
  %1071 = phi i32 [ %1088, %1069 ], [ %1066, %1063 ]
  %1072 = load i32, i32* %1070, align 4
  %1073 = load i32, i32* %988, align 4
  %1074 = add nsw i32 %1073, %1072
  %1075 = icmp slt i32 %1074, %972
  %1076 = icmp sgt i32 %1074, %973
  %1077 = select i1 %1076, i32 %973, i32 %1074
  %1078 = select i1 %1075, i32 %972, i32 %1077
  store i32 %1078, i32* %1070, align 4
  %1079 = getelementptr inbounds i32, i32* %1070, i64 1
  %1080 = load i32, i32* %1079, align 4
  %1081 = load i32, i32* %988, align 4
  %1082 = add nsw i32 %1081, %1080
  %1083 = icmp slt i32 %1082, %972
  %1084 = icmp sgt i32 %1082, %973
  %1085 = select i1 %1084, i32 %973, i32 %1082
  %1086 = select i1 %1083, i32 %972, i32 %1085
  store i32 %1086, i32* %1079, align 4
  %1087 = getelementptr inbounds i32, i32* %1070, i64 2
  %1088 = add nuw i32 %1071, 2
  %1089 = icmp eq i32 %1088, %953
  br i1 %1089, label %1090, label %1069, !llvm.loop !21

1090:                                             ; preds = %1063, %1069, %1046, %1006
  %1091 = phi i32* [ %1007, %1006 ], [ %1018, %1046 ], [ %1064, %1063 ], [ %1087, %1069 ]
  %1092 = getelementptr inbounds i32, i32* %1091, i64 %989
  %1093 = add nuw i32 %1008, 1
  %1094 = icmp eq i32 %1093, %954
  br i1 %1094, label %1126, label %1006

1095:                                             ; preds = %1121, %979
  %1096 = phi i32* [ %957, %979 ], [ %1123, %1121 ]
  %1097 = phi i32 [ 0, %979 ], [ %1124, %1121 ]
  br i1 %980, label %1121, label %1098

1098:                                             ; preds = %1095, %1116
  %1099 = phi i32* [ %1118, %1116 ], [ %1096, %1095 ]
  %1100 = phi i32 [ %1119, %1116 ], [ 0, %1095 ]
  %1101 = bitcast i32* %1099 to float*
  %1102 = load float, float* %1101, align 4
  %1103 = fcmp ogt float %1102, 0x41E0000000000000
  br i1 %1103, label %1116, label %1104

1104:                                             ; preds = %1098
  %1105 = fcmp olt float %1102, 0xC1E0000000000000
  br i1 %1105, label %1116, label %1106

1106:                                             ; preds = %1104
  %1107 = call i64 @lrintf(float %1102) #9
  %1108 = load i32, i32* %981, align 4
  %1109 = sext i32 %1108 to i64
  %1110 = add nsw i64 %1107, %1109
  %1111 = icmp slt i64 %1110, %982
  %1112 = icmp sgt i64 %1110, %983
  %1113 = select i1 %1112, i64 %983, i64 %1110
  %1114 = select i1 %1111, i64 %982, i64 %1113
  %1115 = trunc i64 %1114 to i32
  br label %1116

1116:                                             ; preds = %1104, %1098, %1106
  %1117 = phi i32 [ %1115, %1106 ], [ %973, %1098 ], [ %972, %1104 ]
  store i32 %1117, i32* %1099, align 4
  %1118 = getelementptr inbounds i32, i32* %1099, i64 1
  %1119 = add nuw i32 %1100, 1
  %1120 = icmp eq i32 %1119, %953
  br i1 %1120, label %1121, label %1098

1121:                                             ; preds = %1116, %1095
  %1122 = phi i32* [ %1096, %1095 ], [ %1118, %1116 ]
  %1123 = getelementptr inbounds i32, i32* %1122, i64 %984
  %1124 = add nuw i32 %1097, 1
  %1125 = icmp eq i32 %1124, %954
  br i1 %1125, label %1126, label %1095

1126:                                             ; preds = %1121, %1090, %985, %978, %906
  %1127 = add nuw nsw i64 %897, 1
  %1128 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %898, i64 1
  %1129 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %899, i64 1
  %1130 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %900, i64 1
  %1131 = load i32, i32* %884, align 8
  %1132 = zext i32 %1131 to i64
  %1133 = icmp ult i64 %1127, %1132
  br i1 %1133, label %896, label %1134

1134:                                             ; preds = %606, %609, %1126, %797, %670, %717, %786, %823, %563, %557, %552, %430, %272, %236, %231, %880, %419, %498, %435, %33
  %1135 = phi i32 [ 0, %419 ], [ 0, %33 ], [ 0, %435 ], [ 0, %498 ], [ 1, %880 ], [ 0, %231 ], [ 0, %236 ], [ 0, %272 ], [ 0, %430 ], [ 0, %552 ], [ 0, %557 ], [ 0, %563 ], [ 0, %823 ], [ 0, %786 ], [ 0, %717 ], [ 0, %670 ], [ 0, %797 ], [ 1, %1126 ], [ 0, %609 ], [ 0, %606 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #9
  ret i32 %1135
}

declare i32 @opj_event_msg(%struct.opj_event_mgr*, i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_tcd_update_tile_data(%struct.opj_tcd* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = tail call i32 @opj_tcd_get_decoded_tile_size(%struct.opj_tcd* %0, i32 1)
  %5 = icmp eq i32 %4, -1
  %6 = icmp ugt i32 %4, %2
  %7 = or i1 %5, %6
  br i1 %7, label %792, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  %10 = load %struct.opj_image*, %struct.opj_image** %9, align 8
  %11 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %10, i64 0, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %792, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %10, i64 0, i32 6
  %16 = load %struct.opj_image_comp*, %struct.opj_image_comp** %15, align 8
  %17 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 5
  %18 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %17, align 8
  %19 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %18, i64 0, i32 0
  %20 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %19, align 8
  %21 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %20, i64 0, i32 5
  %22 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %21, align 8
  %23 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 16
  br label %24

24:                                               ; preds = %14, %783
  %25 = phi i8* [ %1, %14 ], [ %784, %783 ]
  %26 = phi %struct.opj_tcd_tilecomp* [ %22, %14 ], [ %786, %783 ]
  %27 = phi %struct.opj_image_comp* [ %16, %14 ], [ %785, %783 ]
  %28 = phi i32 [ 0, %14 ], [ %787, %783 ]
  %29 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %27, i64 0, i32 6
  %30 = load i32, i32* %29, align 8
  %31 = lshr i32 %30, 3
  %32 = and i32 %30, 7
  %33 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %26, i64 0, i32 7
  %34 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %33, align 8
  %35 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %27, i64 0, i32 9
  %36 = load i32, i32* %35, align 4
  %37 = zext i32 %36 to i64
  %38 = load i32, i32* %23, align 8
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %62, label %40

40:                                               ; preds = %24
  %41 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 %37, i32 2
  %42 = load i32, i32* %41, align 8
  %43 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 %37, i32 0
  %44 = load i32, i32* %43, align 8
  %45 = sub nsw i32 %42, %44
  %46 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 %37, i32 3
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 %37, i32 1
  %49 = load i32, i32* %48, align 4
  %50 = sub nsw i32 %47, %49
  %51 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %26, i64 0, i32 6
  %52 = load i32, i32* %51, align 8
  %53 = add i32 %52, -1
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 %54, i32 2
  %56 = load i32, i32* %55, align 8
  %57 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 %54, i32 0
  %58 = load i32, i32* %57, align 8
  %59 = sub i32 %56, %45
  %60 = sub i32 %59, %58
  %61 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %26, i64 0, i32 9
  br label %74

62:                                               ; preds = %24
  %63 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 %37, i32 10
  %64 = load i32, i32* %63, align 8
  %65 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 %37, i32 8
  %66 = load i32, i32* %65, align 8
  %67 = sub i32 %64, %66
  %68 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 %37, i32 11
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 %37, i32 9
  %71 = load i32, i32* %70, align 4
  %72 = sub i32 %69, %71
  %73 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %26, i64 0, i32 13
  br label %74

74:                                               ; preds = %62, %40
  %75 = phi i32 [ %60, %40 ], [ 0, %62 ]
  %76 = phi i32 [ %45, %40 ], [ %67, %62 ]
  %77 = phi i32 [ %50, %40 ], [ %72, %62 ]
  %78 = phi i32** [ %61, %40 ], [ %73, %62 ]
  %79 = load i32*, i32** %78, align 8
  %80 = icmp ne i32 %32, 0
  %81 = zext i1 %80 to i32
  %82 = add nuw nsw i32 %31, %81
  %83 = icmp eq i32 %82, 3
  %84 = select i1 %83, i32 4, i32 %82
  switch i32 %84, label %783 [
    i32 1, label %85
    i32 2, label %404
    i32 4, label %727
  ]

85:                                               ; preds = %74
  %86 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %27, i64 0, i32 8
  %87 = load i32, i32* %86, align 8
  %88 = icmp eq i32 %87, 0
  %89 = icmp ne i32 %77, 0
  br i1 %88, label %110, label %90

90:                                               ; preds = %85
  br i1 %89, label %91, label %783

91:                                               ; preds = %90
  %92 = icmp eq i32 %76, 0
  %93 = zext i32 %75 to i64
  %94 = add i32 %76, -1
  %95 = zext i32 %94 to i64
  %96 = add nuw nsw i64 %95, 1
  %97 = zext i32 %94 to i64
  %98 = and i64 %96, 8589934584
  %99 = add nsw i64 %98, -8
  %100 = lshr exact i64 %99, 3
  %101 = add nuw nsw i64 %100, 1
  %102 = icmp ult i64 %96, 8
  %103 = and i64 %96, 8589934584
  %104 = trunc i64 %103 to i32
  %105 = and i64 %101, 1
  %106 = icmp eq i64 %99, 0
  %107 = sub nuw nsw i64 %101, %105
  %108 = icmp eq i64 %105, 0
  %109 = icmp eq i64 %96, %103
  br label %130

110:                                              ; preds = %85
  br i1 %89, label %111, label %783

111:                                              ; preds = %110
  %112 = icmp eq i32 %76, 0
  %113 = zext i32 %75 to i64
  %114 = add i32 %76, -1
  %115 = zext i32 %114 to i64
  %116 = add nuw nsw i64 %115, 1
  %117 = zext i32 %114 to i64
  %118 = and i64 %116, 8589934584
  %119 = add nsw i64 %118, -8
  %120 = lshr exact i64 %119, 3
  %121 = add nuw nsw i64 %120, 1
  %122 = icmp ult i64 %116, 8
  %123 = and i64 %116, 8589934584
  %124 = trunc i64 %123 to i32
  %125 = and i64 %121, 1
  %126 = icmp eq i64 %119, 0
  %127 = sub nuw nsw i64 %121, %125
  %128 = icmp eq i64 %125, 0
  %129 = icmp eq i64 %116, %123
  br label %267

130:                                              ; preds = %261, %91
  %131 = phi i32* [ %79, %91 ], [ %264, %261 ]
  %132 = phi i8* [ %25, %91 ], [ %262, %261 ]
  %133 = phi i32 [ 0, %91 ], [ %265, %261 ]
  %134 = bitcast i32* %131 to i8*
  br i1 %92, label %261, label %135

135:                                              ; preds = %130
  br i1 %102, label %195, label %136

136:                                              ; preds = %135
  %137 = getelementptr i8, i8* %132, i64 1
  %138 = getelementptr i8, i8* %137, i64 %97
  %139 = getelementptr i32, i32* %131, i64 1
  %140 = getelementptr i32, i32* %139, i64 %97
  %141 = bitcast i32* %140 to i8*
  %142 = icmp ult i8* %132, %141
  %143 = icmp ugt i8* %138, %134
  %144 = and i1 %142, %143
  br i1 %144, label %195, label %145

145:                                              ; preds = %136
  %146 = getelementptr i32, i32* %131, i64 %103
  %147 = getelementptr i8, i8* %132, i64 %103
  br i1 %106, label %179, label %148

148:                                              ; preds = %145, %148
  %149 = phi i64 [ %176, %148 ], [ 0, %145 ]
  %150 = phi i64 [ %177, %148 ], [ %107, %145 ]
  %151 = getelementptr i32, i32* %131, i64 %149
  %152 = getelementptr i8, i8* %132, i64 %149
  %153 = bitcast i32* %151 to <4 x i32>*
  %154 = load <4 x i32>, <4 x i32>* %153, align 4, !alias.scope !22
  %155 = getelementptr i32, i32* %151, i64 4
  %156 = bitcast i32* %155 to <4 x i32>*
  %157 = load <4 x i32>, <4 x i32>* %156, align 4, !alias.scope !22
  %158 = trunc <4 x i32> %154 to <4 x i8>
  %159 = trunc <4 x i32> %157 to <4 x i8>
  %160 = bitcast i8* %152 to <4 x i8>*
  store <4 x i8> %158, <4 x i8>* %160, align 1, !alias.scope !25, !noalias !22
  %161 = getelementptr i8, i8* %152, i64 4
  %162 = bitcast i8* %161 to <4 x i8>*
  store <4 x i8> %159, <4 x i8>* %162, align 1, !alias.scope !25, !noalias !22
  %163 = or i64 %149, 8
  %164 = getelementptr i32, i32* %131, i64 %163
  %165 = getelementptr i8, i8* %132, i64 %163
  %166 = bitcast i32* %164 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 4, !alias.scope !22
  %168 = getelementptr i32, i32* %164, i64 4
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 4, !alias.scope !22
  %171 = trunc <4 x i32> %167 to <4 x i8>
  %172 = trunc <4 x i32> %170 to <4 x i8>
  %173 = bitcast i8* %165 to <4 x i8>*
  store <4 x i8> %171, <4 x i8>* %173, align 1, !alias.scope !25, !noalias !22
  %174 = getelementptr i8, i8* %165, i64 4
  %175 = bitcast i8* %174 to <4 x i8>*
  store <4 x i8> %172, <4 x i8>* %175, align 1, !alias.scope !25, !noalias !22
  %176 = add i64 %149, 16
  %177 = add i64 %150, -2
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %179, label %148, !llvm.loop !27

179:                                              ; preds = %148, %145
  %180 = phi i64 [ 0, %145 ], [ %176, %148 ]
  br i1 %108, label %194, label %181

181:                                              ; preds = %179
  %182 = getelementptr i32, i32* %131, i64 %180
  %183 = getelementptr i8, i8* %132, i64 %180
  %184 = bitcast i32* %182 to <4 x i32>*
  %185 = load <4 x i32>, <4 x i32>* %184, align 4, !alias.scope !22
  %186 = getelementptr i32, i32* %182, i64 4
  %187 = bitcast i32* %186 to <4 x i32>*
  %188 = load <4 x i32>, <4 x i32>* %187, align 4, !alias.scope !22
  %189 = trunc <4 x i32> %185 to <4 x i8>
  %190 = trunc <4 x i32> %188 to <4 x i8>
  %191 = bitcast i8* %183 to <4 x i8>*
  store <4 x i8> %189, <4 x i8>* %191, align 1, !alias.scope !25, !noalias !22
  %192 = getelementptr i8, i8* %183, i64 4
  %193 = bitcast i8* %192 to <4 x i8>*
  store <4 x i8> %190, <4 x i8>* %193, align 1, !alias.scope !25, !noalias !22
  br label %194

194:                                              ; preds = %179, %181
  br i1 %109, label %261, label %195

195:                                              ; preds = %194, %136, %135
  %196 = phi i32* [ %131, %136 ], [ %131, %135 ], [ %146, %194 ]
  %197 = phi i8* [ %132, %136 ], [ %132, %135 ], [ %147, %194 ]
  %198 = phi i32 [ 0, %136 ], [ 0, %135 ], [ %104, %194 ]
  %199 = sub i32 %76, %198
  %200 = xor i32 %198, -1
  %201 = add i32 %76, %200
  %202 = and i32 %199, 7
  %203 = icmp eq i32 %202, 0
  br i1 %203, label %216, label %204

204:                                              ; preds = %195, %204
  %205 = phi i32* [ %209, %204 ], [ %196, %195 ]
  %206 = phi i8* [ %212, %204 ], [ %197, %195 ]
  %207 = phi i32 [ %213, %204 ], [ %198, %195 ]
  %208 = phi i32 [ %214, %204 ], [ %202, %195 ]
  %209 = getelementptr inbounds i32, i32* %205, i64 1
  %210 = load i32, i32* %205, align 4
  %211 = trunc i32 %210 to i8
  %212 = getelementptr inbounds i8, i8* %206, i64 1
  store i8 %211, i8* %206, align 1
  %213 = add nuw i32 %207, 1
  %214 = add i32 %208, -1
  %215 = icmp eq i32 %214, 0
  br i1 %215, label %216, label %204, !llvm.loop !28

216:                                              ; preds = %204, %195
  %217 = phi i32* [ undef, %195 ], [ %209, %204 ]
  %218 = phi i8* [ undef, %195 ], [ %212, %204 ]
  %219 = phi i32* [ %196, %195 ], [ %209, %204 ]
  %220 = phi i8* [ %197, %195 ], [ %212, %204 ]
  %221 = phi i32 [ %198, %195 ], [ %213, %204 ]
  %222 = icmp ult i32 %201, 7
  br i1 %222, label %261, label %223

223:                                              ; preds = %216, %223
  %224 = phi i32* [ %255, %223 ], [ %219, %216 ]
  %225 = phi i8* [ %258, %223 ], [ %220, %216 ]
  %226 = phi i32 [ %259, %223 ], [ %221, %216 ]
  %227 = getelementptr inbounds i32, i32* %224, i64 1
  %228 = load i32, i32* %224, align 4
  %229 = trunc i32 %228 to i8
  %230 = getelementptr inbounds i8, i8* %225, i64 1
  store i8 %229, i8* %225, align 1
  %231 = getelementptr inbounds i32, i32* %224, i64 2
  %232 = load i32, i32* %227, align 4
  %233 = trunc i32 %232 to i8
  %234 = getelementptr inbounds i8, i8* %225, i64 2
  store i8 %233, i8* %230, align 1
  %235 = getelementptr inbounds i32, i32* %224, i64 3
  %236 = load i32, i32* %231, align 4
  %237 = trunc i32 %236 to i8
  %238 = getelementptr inbounds i8, i8* %225, i64 3
  store i8 %237, i8* %234, align 1
  %239 = getelementptr inbounds i32, i32* %224, i64 4
  %240 = load i32, i32* %235, align 4
  %241 = trunc i32 %240 to i8
  %242 = getelementptr inbounds i8, i8* %225, i64 4
  store i8 %241, i8* %238, align 1
  %243 = getelementptr inbounds i32, i32* %224, i64 5
  %244 = load i32, i32* %239, align 4
  %245 = trunc i32 %244 to i8
  %246 = getelementptr inbounds i8, i8* %225, i64 5
  store i8 %245, i8* %242, align 1
  %247 = getelementptr inbounds i32, i32* %224, i64 6
  %248 = load i32, i32* %243, align 4
  %249 = trunc i32 %248 to i8
  %250 = getelementptr inbounds i8, i8* %225, i64 6
  store i8 %249, i8* %246, align 1
  %251 = getelementptr inbounds i32, i32* %224, i64 7
  %252 = load i32, i32* %247, align 4
  %253 = trunc i32 %252 to i8
  %254 = getelementptr inbounds i8, i8* %225, i64 7
  store i8 %253, i8* %250, align 1
  %255 = getelementptr inbounds i32, i32* %224, i64 8
  %256 = load i32, i32* %251, align 4
  %257 = trunc i32 %256 to i8
  %258 = getelementptr inbounds i8, i8* %225, i64 8
  store i8 %257, i8* %254, align 1
  %259 = add nuw i32 %226, 8
  %260 = icmp eq i32 %259, %76
  br i1 %260, label %261, label %223, !llvm.loop !29

261:                                              ; preds = %216, %223, %194, %130
  %262 = phi i8* [ %132, %130 ], [ %147, %194 ], [ %218, %216 ], [ %258, %223 ]
  %263 = phi i32* [ %131, %130 ], [ %146, %194 ], [ %217, %216 ], [ %255, %223 ]
  %264 = getelementptr inbounds i32, i32* %263, i64 %93
  %265 = add nuw i32 %133, 1
  %266 = icmp eq i32 %265, %77
  br i1 %266, label %783, label %130

267:                                              ; preds = %398, %111
  %268 = phi i32* [ %79, %111 ], [ %401, %398 ]
  %269 = phi i8* [ %25, %111 ], [ %399, %398 ]
  %270 = phi i32 [ 0, %111 ], [ %402, %398 ]
  %271 = bitcast i32* %268 to i8*
  br i1 %112, label %398, label %272

272:                                              ; preds = %267
  br i1 %122, label %332, label %273

273:                                              ; preds = %272
  %274 = getelementptr i8, i8* %269, i64 1
  %275 = getelementptr i8, i8* %274, i64 %117
  %276 = getelementptr i32, i32* %268, i64 1
  %277 = getelementptr i32, i32* %276, i64 %117
  %278 = bitcast i32* %277 to i8*
  %279 = icmp ult i8* %269, %278
  %280 = icmp ugt i8* %275, %271
  %281 = and i1 %279, %280
  br i1 %281, label %332, label %282

282:                                              ; preds = %273
  %283 = getelementptr i32, i32* %268, i64 %123
  %284 = getelementptr i8, i8* %269, i64 %123
  br i1 %126, label %316, label %285

285:                                              ; preds = %282, %285
  %286 = phi i64 [ %313, %285 ], [ 0, %282 ]
  %287 = phi i64 [ %314, %285 ], [ %127, %282 ]
  %288 = getelementptr i32, i32* %268, i64 %286
  %289 = getelementptr i8, i8* %269, i64 %286
  %290 = bitcast i32* %288 to <4 x i32>*
  %291 = load <4 x i32>, <4 x i32>* %290, align 4, !alias.scope !30
  %292 = getelementptr i32, i32* %288, i64 4
  %293 = bitcast i32* %292 to <4 x i32>*
  %294 = load <4 x i32>, <4 x i32>* %293, align 4, !alias.scope !30
  %295 = trunc <4 x i32> %291 to <4 x i8>
  %296 = trunc <4 x i32> %294 to <4 x i8>
  %297 = bitcast i8* %289 to <4 x i8>*
  store <4 x i8> %295, <4 x i8>* %297, align 1, !alias.scope !33, !noalias !30
  %298 = getelementptr i8, i8* %289, i64 4
  %299 = bitcast i8* %298 to <4 x i8>*
  store <4 x i8> %296, <4 x i8>* %299, align 1, !alias.scope !33, !noalias !30
  %300 = or i64 %286, 8
  %301 = getelementptr i32, i32* %268, i64 %300
  %302 = getelementptr i8, i8* %269, i64 %300
  %303 = bitcast i32* %301 to <4 x i32>*
  %304 = load <4 x i32>, <4 x i32>* %303, align 4, !alias.scope !30
  %305 = getelementptr i32, i32* %301, i64 4
  %306 = bitcast i32* %305 to <4 x i32>*
  %307 = load <4 x i32>, <4 x i32>* %306, align 4, !alias.scope !30
  %308 = trunc <4 x i32> %304 to <4 x i8>
  %309 = trunc <4 x i32> %307 to <4 x i8>
  %310 = bitcast i8* %302 to <4 x i8>*
  store <4 x i8> %308, <4 x i8>* %310, align 1, !alias.scope !33, !noalias !30
  %311 = getelementptr i8, i8* %302, i64 4
  %312 = bitcast i8* %311 to <4 x i8>*
  store <4 x i8> %309, <4 x i8>* %312, align 1, !alias.scope !33, !noalias !30
  %313 = add i64 %286, 16
  %314 = add i64 %287, -2
  %315 = icmp eq i64 %314, 0
  br i1 %315, label %316, label %285, !llvm.loop !35

316:                                              ; preds = %285, %282
  %317 = phi i64 [ 0, %282 ], [ %313, %285 ]
  br i1 %128, label %331, label %318

318:                                              ; preds = %316
  %319 = getelementptr i32, i32* %268, i64 %317
  %320 = getelementptr i8, i8* %269, i64 %317
  %321 = bitcast i32* %319 to <4 x i32>*
  %322 = load <4 x i32>, <4 x i32>* %321, align 4, !alias.scope !30
  %323 = getelementptr i32, i32* %319, i64 4
  %324 = bitcast i32* %323 to <4 x i32>*
  %325 = load <4 x i32>, <4 x i32>* %324, align 4, !alias.scope !30
  %326 = trunc <4 x i32> %322 to <4 x i8>
  %327 = trunc <4 x i32> %325 to <4 x i8>
  %328 = bitcast i8* %320 to <4 x i8>*
  store <4 x i8> %326, <4 x i8>* %328, align 1, !alias.scope !33, !noalias !30
  %329 = getelementptr i8, i8* %320, i64 4
  %330 = bitcast i8* %329 to <4 x i8>*
  store <4 x i8> %327, <4 x i8>* %330, align 1, !alias.scope !33, !noalias !30
  br label %331

331:                                              ; preds = %316, %318
  br i1 %129, label %398, label %332

332:                                              ; preds = %331, %273, %272
  %333 = phi i32* [ %268, %273 ], [ %268, %272 ], [ %283, %331 ]
  %334 = phi i8* [ %269, %273 ], [ %269, %272 ], [ %284, %331 ]
  %335 = phi i32 [ 0, %273 ], [ 0, %272 ], [ %124, %331 ]
  %336 = sub i32 %76, %335
  %337 = xor i32 %335, -1
  %338 = add i32 %76, %337
  %339 = and i32 %336, 7
  %340 = icmp eq i32 %339, 0
  br i1 %340, label %353, label %341

341:                                              ; preds = %332, %341
  %342 = phi i32* [ %346, %341 ], [ %333, %332 ]
  %343 = phi i8* [ %349, %341 ], [ %334, %332 ]
  %344 = phi i32 [ %350, %341 ], [ %335, %332 ]
  %345 = phi i32 [ %351, %341 ], [ %339, %332 ]
  %346 = getelementptr inbounds i32, i32* %342, i64 1
  %347 = load i32, i32* %342, align 4
  %348 = trunc i32 %347 to i8
  %349 = getelementptr inbounds i8, i8* %343, i64 1
  store i8 %348, i8* %343, align 1
  %350 = add nuw i32 %344, 1
  %351 = add i32 %345, -1
  %352 = icmp eq i32 %351, 0
  br i1 %352, label %353, label %341, !llvm.loop !36

353:                                              ; preds = %341, %332
  %354 = phi i32* [ undef, %332 ], [ %346, %341 ]
  %355 = phi i8* [ undef, %332 ], [ %349, %341 ]
  %356 = phi i32* [ %333, %332 ], [ %346, %341 ]
  %357 = phi i8* [ %334, %332 ], [ %349, %341 ]
  %358 = phi i32 [ %335, %332 ], [ %350, %341 ]
  %359 = icmp ult i32 %338, 7
  br i1 %359, label %398, label %360

360:                                              ; preds = %353, %360
  %361 = phi i32* [ %392, %360 ], [ %356, %353 ]
  %362 = phi i8* [ %395, %360 ], [ %357, %353 ]
  %363 = phi i32 [ %396, %360 ], [ %358, %353 ]
  %364 = getelementptr inbounds i32, i32* %361, i64 1
  %365 = load i32, i32* %361, align 4
  %366 = trunc i32 %365 to i8
  %367 = getelementptr inbounds i8, i8* %362, i64 1
  store i8 %366, i8* %362, align 1
  %368 = getelementptr inbounds i32, i32* %361, i64 2
  %369 = load i32, i32* %364, align 4
  %370 = trunc i32 %369 to i8
  %371 = getelementptr inbounds i8, i8* %362, i64 2
  store i8 %370, i8* %367, align 1
  %372 = getelementptr inbounds i32, i32* %361, i64 3
  %373 = load i32, i32* %368, align 4
  %374 = trunc i32 %373 to i8
  %375 = getelementptr inbounds i8, i8* %362, i64 3
  store i8 %374, i8* %371, align 1
  %376 = getelementptr inbounds i32, i32* %361, i64 4
  %377 = load i32, i32* %372, align 4
  %378 = trunc i32 %377 to i8
  %379 = getelementptr inbounds i8, i8* %362, i64 4
  store i8 %378, i8* %375, align 1
  %380 = getelementptr inbounds i32, i32* %361, i64 5
  %381 = load i32, i32* %376, align 4
  %382 = trunc i32 %381 to i8
  %383 = getelementptr inbounds i8, i8* %362, i64 5
  store i8 %382, i8* %379, align 1
  %384 = getelementptr inbounds i32, i32* %361, i64 6
  %385 = load i32, i32* %380, align 4
  %386 = trunc i32 %385 to i8
  %387 = getelementptr inbounds i8, i8* %362, i64 6
  store i8 %386, i8* %383, align 1
  %388 = getelementptr inbounds i32, i32* %361, i64 7
  %389 = load i32, i32* %384, align 4
  %390 = trunc i32 %389 to i8
  %391 = getelementptr inbounds i8, i8* %362, i64 7
  store i8 %390, i8* %387, align 1
  %392 = getelementptr inbounds i32, i32* %361, i64 8
  %393 = load i32, i32* %388, align 4
  %394 = trunc i32 %393 to i8
  %395 = getelementptr inbounds i8, i8* %362, i64 8
  store i8 %394, i8* %391, align 1
  %396 = add nuw i32 %363, 8
  %397 = icmp eq i32 %396, %76
  br i1 %397, label %398, label %360, !llvm.loop !37

398:                                              ; preds = %353, %360, %331, %267
  %399 = phi i8* [ %269, %267 ], [ %284, %331 ], [ %355, %353 ], [ %395, %360 ]
  %400 = phi i32* [ %268, %267 ], [ %283, %331 ], [ %354, %353 ], [ %392, %360 ]
  %401 = getelementptr inbounds i32, i32* %400, i64 %113
  %402 = add nuw i32 %270, 1
  %403 = icmp eq i32 %402, %77
  br i1 %403, label %783, label %267

404:                                              ; preds = %74
  %405 = bitcast i8* %25 to i16*
  %406 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %27, i64 0, i32 8
  %407 = load i32, i32* %406, align 8
  %408 = icmp eq i32 %407, 0
  %409 = icmp ne i32 %77, 0
  br i1 %408, label %430, label %410

410:                                              ; preds = %404
  br i1 %409, label %411, label %724

411:                                              ; preds = %410
  %412 = icmp eq i32 %76, 0
  %413 = zext i32 %75 to i64
  %414 = add i32 %76, -1
  %415 = zext i32 %414 to i64
  %416 = add nuw nsw i64 %415, 1
  %417 = zext i32 %414 to i64
  %418 = and i64 %416, 8589934584
  %419 = add nsw i64 %418, -8
  %420 = lshr exact i64 %419, 3
  %421 = add nuw nsw i64 %420, 1
  %422 = icmp ult i64 %416, 8
  %423 = and i64 %416, 8589934584
  %424 = trunc i64 %423 to i32
  %425 = and i64 %421, 1
  %426 = icmp eq i64 %419, 0
  %427 = sub nuw nsw i64 %421, %425
  %428 = icmp eq i64 %425, 0
  %429 = icmp eq i64 %416, %423
  br label %450

430:                                              ; preds = %404
  br i1 %409, label %431, label %724

431:                                              ; preds = %430
  %432 = icmp eq i32 %76, 0
  %433 = zext i32 %75 to i64
  %434 = add i32 %76, -1
  %435 = zext i32 %434 to i64
  %436 = add nuw nsw i64 %435, 1
  %437 = zext i32 %434 to i64
  %438 = and i64 %436, 8589934584
  %439 = add nsw i64 %438, -8
  %440 = lshr exact i64 %439, 3
  %441 = add nuw nsw i64 %440, 1
  %442 = icmp ult i64 %436, 8
  %443 = and i64 %436, 8589934584
  %444 = trunc i64 %443 to i32
  %445 = and i64 %441, 1
  %446 = icmp eq i64 %439, 0
  %447 = sub nuw nsw i64 %441, %445
  %448 = icmp eq i64 %445, 0
  %449 = icmp eq i64 %436, %443
  br label %587

450:                                              ; preds = %581, %411
  %451 = phi i16* [ %405, %411 ], [ %583, %581 ]
  %452 = phi i32* [ %79, %411 ], [ %584, %581 ]
  %453 = phi i32 [ 0, %411 ], [ %585, %581 ]
  br i1 %412, label %581, label %454

454:                                              ; preds = %450
  br i1 %422, label %515, label %455

455:                                              ; preds = %454
  %456 = getelementptr i16, i16* %451, i64 1
  %457 = getelementptr i16, i16* %456, i64 %417
  %458 = getelementptr i32, i32* %452, i64 1
  %459 = getelementptr i32, i32* %458, i64 %417
  %460 = bitcast i32* %459 to i16*
  %461 = icmp ult i16* %451, %460
  %462 = bitcast i16* %457 to i32*
  %463 = icmp ult i32* %452, %462
  %464 = and i1 %461, %463
  br i1 %464, label %515, label %465

465:                                              ; preds = %455
  %466 = getelementptr i16, i16* %451, i64 %423
  %467 = getelementptr i32, i32* %452, i64 %423
  br i1 %426, label %499, label %468

468:                                              ; preds = %465, %468
  %469 = phi i64 [ %496, %468 ], [ 0, %465 ]
  %470 = phi i64 [ %497, %468 ], [ %427, %465 ]
  %471 = getelementptr i16, i16* %451, i64 %469
  %472 = getelementptr i32, i32* %452, i64 %469
  %473 = bitcast i32* %472 to <4 x i32>*
  %474 = load <4 x i32>, <4 x i32>* %473, align 4, !alias.scope !38
  %475 = getelementptr i32, i32* %472, i64 4
  %476 = bitcast i32* %475 to <4 x i32>*
  %477 = load <4 x i32>, <4 x i32>* %476, align 4, !alias.scope !38
  %478 = trunc <4 x i32> %474 to <4 x i16>
  %479 = trunc <4 x i32> %477 to <4 x i16>
  %480 = bitcast i16* %471 to <4 x i16>*
  store <4 x i16> %478, <4 x i16>* %480, align 2, !alias.scope !41, !noalias !38
  %481 = getelementptr i16, i16* %471, i64 4
  %482 = bitcast i16* %481 to <4 x i16>*
  store <4 x i16> %479, <4 x i16>* %482, align 2, !alias.scope !41, !noalias !38
  %483 = or i64 %469, 8
  %484 = getelementptr i16, i16* %451, i64 %483
  %485 = getelementptr i32, i32* %452, i64 %483
  %486 = bitcast i32* %485 to <4 x i32>*
  %487 = load <4 x i32>, <4 x i32>* %486, align 4, !alias.scope !38
  %488 = getelementptr i32, i32* %485, i64 4
  %489 = bitcast i32* %488 to <4 x i32>*
  %490 = load <4 x i32>, <4 x i32>* %489, align 4, !alias.scope !38
  %491 = trunc <4 x i32> %487 to <4 x i16>
  %492 = trunc <4 x i32> %490 to <4 x i16>
  %493 = bitcast i16* %484 to <4 x i16>*
  store <4 x i16> %491, <4 x i16>* %493, align 2, !alias.scope !41, !noalias !38
  %494 = getelementptr i16, i16* %484, i64 4
  %495 = bitcast i16* %494 to <4 x i16>*
  store <4 x i16> %492, <4 x i16>* %495, align 2, !alias.scope !41, !noalias !38
  %496 = add i64 %469, 16
  %497 = add i64 %470, -2
  %498 = icmp eq i64 %497, 0
  br i1 %498, label %499, label %468, !llvm.loop !43

499:                                              ; preds = %468, %465
  %500 = phi i64 [ 0, %465 ], [ %496, %468 ]
  br i1 %428, label %514, label %501

501:                                              ; preds = %499
  %502 = getelementptr i16, i16* %451, i64 %500
  %503 = getelementptr i32, i32* %452, i64 %500
  %504 = bitcast i32* %503 to <4 x i32>*
  %505 = load <4 x i32>, <4 x i32>* %504, align 4, !alias.scope !38
  %506 = getelementptr i32, i32* %503, i64 4
  %507 = bitcast i32* %506 to <4 x i32>*
  %508 = load <4 x i32>, <4 x i32>* %507, align 4, !alias.scope !38
  %509 = trunc <4 x i32> %505 to <4 x i16>
  %510 = trunc <4 x i32> %508 to <4 x i16>
  %511 = bitcast i16* %502 to <4 x i16>*
  store <4 x i16> %509, <4 x i16>* %511, align 2, !alias.scope !41, !noalias !38
  %512 = getelementptr i16, i16* %502, i64 4
  %513 = bitcast i16* %512 to <4 x i16>*
  store <4 x i16> %510, <4 x i16>* %513, align 2, !alias.scope !41, !noalias !38
  br label %514

514:                                              ; preds = %499, %501
  br i1 %429, label %581, label %515

515:                                              ; preds = %514, %455, %454
  %516 = phi i16* [ %451, %455 ], [ %451, %454 ], [ %466, %514 ]
  %517 = phi i32* [ %452, %455 ], [ %452, %454 ], [ %467, %514 ]
  %518 = phi i32 [ 0, %455 ], [ 0, %454 ], [ %424, %514 ]
  %519 = sub i32 %76, %518
  %520 = xor i32 %518, -1
  %521 = add i32 %76, %520
  %522 = and i32 %519, 7
  %523 = icmp eq i32 %522, 0
  br i1 %523, label %536, label %524

524:                                              ; preds = %515, %524
  %525 = phi i16* [ %532, %524 ], [ %516, %515 ]
  %526 = phi i32* [ %529, %524 ], [ %517, %515 ]
  %527 = phi i32 [ %533, %524 ], [ %518, %515 ]
  %528 = phi i32 [ %534, %524 ], [ %522, %515 ]
  %529 = getelementptr inbounds i32, i32* %526, i64 1
  %530 = load i32, i32* %526, align 4
  %531 = trunc i32 %530 to i16
  store i16 %531, i16* %525, align 2
  %532 = getelementptr inbounds i16, i16* %525, i64 1
  %533 = add nuw i32 %527, 1
  %534 = add i32 %528, -1
  %535 = icmp eq i32 %534, 0
  br i1 %535, label %536, label %524, !llvm.loop !44

536:                                              ; preds = %524, %515
  %537 = phi i32* [ undef, %515 ], [ %529, %524 ]
  %538 = phi i16* [ undef, %515 ], [ %532, %524 ]
  %539 = phi i16* [ %516, %515 ], [ %532, %524 ]
  %540 = phi i32* [ %517, %515 ], [ %529, %524 ]
  %541 = phi i32 [ %518, %515 ], [ %533, %524 ]
  %542 = icmp ult i32 %521, 7
  br i1 %542, label %581, label %543

543:                                              ; preds = %536, %543
  %544 = phi i16* [ %578, %543 ], [ %539, %536 ]
  %545 = phi i32* [ %575, %543 ], [ %540, %536 ]
  %546 = phi i32 [ %579, %543 ], [ %541, %536 ]
  %547 = getelementptr inbounds i32, i32* %545, i64 1
  %548 = load i32, i32* %545, align 4
  %549 = trunc i32 %548 to i16
  store i16 %549, i16* %544, align 2
  %550 = getelementptr inbounds i16, i16* %544, i64 1
  %551 = getelementptr inbounds i32, i32* %545, i64 2
  %552 = load i32, i32* %547, align 4
  %553 = trunc i32 %552 to i16
  store i16 %553, i16* %550, align 2
  %554 = getelementptr inbounds i16, i16* %544, i64 2
  %555 = getelementptr inbounds i32, i32* %545, i64 3
  %556 = load i32, i32* %551, align 4
  %557 = trunc i32 %556 to i16
  store i16 %557, i16* %554, align 2
  %558 = getelementptr inbounds i16, i16* %544, i64 3
  %559 = getelementptr inbounds i32, i32* %545, i64 4
  %560 = load i32, i32* %555, align 4
  %561 = trunc i32 %560 to i16
  store i16 %561, i16* %558, align 2
  %562 = getelementptr inbounds i16, i16* %544, i64 4
  %563 = getelementptr inbounds i32, i32* %545, i64 5
  %564 = load i32, i32* %559, align 4
  %565 = trunc i32 %564 to i16
  store i16 %565, i16* %562, align 2
  %566 = getelementptr inbounds i16, i16* %544, i64 5
  %567 = getelementptr inbounds i32, i32* %545, i64 6
  %568 = load i32, i32* %563, align 4
  %569 = trunc i32 %568 to i16
  store i16 %569, i16* %566, align 2
  %570 = getelementptr inbounds i16, i16* %544, i64 6
  %571 = getelementptr inbounds i32, i32* %545, i64 7
  %572 = load i32, i32* %567, align 4
  %573 = trunc i32 %572 to i16
  store i16 %573, i16* %570, align 2
  %574 = getelementptr inbounds i16, i16* %544, i64 7
  %575 = getelementptr inbounds i32, i32* %545, i64 8
  %576 = load i32, i32* %571, align 4
  %577 = trunc i32 %576 to i16
  store i16 %577, i16* %574, align 2
  %578 = getelementptr inbounds i16, i16* %544, i64 8
  %579 = add nuw i32 %546, 8
  %580 = icmp eq i32 %579, %76
  br i1 %580, label %581, label %543, !llvm.loop !45

581:                                              ; preds = %536, %543, %514, %450
  %582 = phi i32* [ %452, %450 ], [ %467, %514 ], [ %537, %536 ], [ %575, %543 ]
  %583 = phi i16* [ %451, %450 ], [ %466, %514 ], [ %538, %536 ], [ %578, %543 ]
  %584 = getelementptr inbounds i32, i32* %582, i64 %413
  %585 = add nuw i32 %453, 1
  %586 = icmp eq i32 %585, %77
  br i1 %586, label %724, label %450

587:                                              ; preds = %718, %431
  %588 = phi i16* [ %405, %431 ], [ %720, %718 ]
  %589 = phi i32* [ %79, %431 ], [ %721, %718 ]
  %590 = phi i32 [ 0, %431 ], [ %722, %718 ]
  br i1 %432, label %718, label %591

591:                                              ; preds = %587
  br i1 %442, label %652, label %592

592:                                              ; preds = %591
  %593 = getelementptr i16, i16* %588, i64 1
  %594 = getelementptr i16, i16* %593, i64 %437
  %595 = getelementptr i32, i32* %589, i64 1
  %596 = getelementptr i32, i32* %595, i64 %437
  %597 = bitcast i32* %596 to i16*
  %598 = icmp ult i16* %588, %597
  %599 = bitcast i16* %594 to i32*
  %600 = icmp ult i32* %589, %599
  %601 = and i1 %598, %600
  br i1 %601, label %652, label %602

602:                                              ; preds = %592
  %603 = getelementptr i16, i16* %588, i64 %443
  %604 = getelementptr i32, i32* %589, i64 %443
  br i1 %446, label %636, label %605

605:                                              ; preds = %602, %605
  %606 = phi i64 [ %633, %605 ], [ 0, %602 ]
  %607 = phi i64 [ %634, %605 ], [ %447, %602 ]
  %608 = getelementptr i16, i16* %588, i64 %606
  %609 = getelementptr i32, i32* %589, i64 %606
  %610 = bitcast i32* %609 to <4 x i32>*
  %611 = load <4 x i32>, <4 x i32>* %610, align 4, !alias.scope !46
  %612 = getelementptr i32, i32* %609, i64 4
  %613 = bitcast i32* %612 to <4 x i32>*
  %614 = load <4 x i32>, <4 x i32>* %613, align 4, !alias.scope !46
  %615 = trunc <4 x i32> %611 to <4 x i16>
  %616 = trunc <4 x i32> %614 to <4 x i16>
  %617 = bitcast i16* %608 to <4 x i16>*
  store <4 x i16> %615, <4 x i16>* %617, align 2, !alias.scope !49, !noalias !46
  %618 = getelementptr i16, i16* %608, i64 4
  %619 = bitcast i16* %618 to <4 x i16>*
  store <4 x i16> %616, <4 x i16>* %619, align 2, !alias.scope !49, !noalias !46
  %620 = or i64 %606, 8
  %621 = getelementptr i16, i16* %588, i64 %620
  %622 = getelementptr i32, i32* %589, i64 %620
  %623 = bitcast i32* %622 to <4 x i32>*
  %624 = load <4 x i32>, <4 x i32>* %623, align 4, !alias.scope !46
  %625 = getelementptr i32, i32* %622, i64 4
  %626 = bitcast i32* %625 to <4 x i32>*
  %627 = load <4 x i32>, <4 x i32>* %626, align 4, !alias.scope !46
  %628 = trunc <4 x i32> %624 to <4 x i16>
  %629 = trunc <4 x i32> %627 to <4 x i16>
  %630 = bitcast i16* %621 to <4 x i16>*
  store <4 x i16> %628, <4 x i16>* %630, align 2, !alias.scope !49, !noalias !46
  %631 = getelementptr i16, i16* %621, i64 4
  %632 = bitcast i16* %631 to <4 x i16>*
  store <4 x i16> %629, <4 x i16>* %632, align 2, !alias.scope !49, !noalias !46
  %633 = add i64 %606, 16
  %634 = add i64 %607, -2
  %635 = icmp eq i64 %634, 0
  br i1 %635, label %636, label %605, !llvm.loop !51

636:                                              ; preds = %605, %602
  %637 = phi i64 [ 0, %602 ], [ %633, %605 ]
  br i1 %448, label %651, label %638

638:                                              ; preds = %636
  %639 = getelementptr i16, i16* %588, i64 %637
  %640 = getelementptr i32, i32* %589, i64 %637
  %641 = bitcast i32* %640 to <4 x i32>*
  %642 = load <4 x i32>, <4 x i32>* %641, align 4, !alias.scope !46
  %643 = getelementptr i32, i32* %640, i64 4
  %644 = bitcast i32* %643 to <4 x i32>*
  %645 = load <4 x i32>, <4 x i32>* %644, align 4, !alias.scope !46
  %646 = trunc <4 x i32> %642 to <4 x i16>
  %647 = trunc <4 x i32> %645 to <4 x i16>
  %648 = bitcast i16* %639 to <4 x i16>*
  store <4 x i16> %646, <4 x i16>* %648, align 2, !alias.scope !49, !noalias !46
  %649 = getelementptr i16, i16* %639, i64 4
  %650 = bitcast i16* %649 to <4 x i16>*
  store <4 x i16> %647, <4 x i16>* %650, align 2, !alias.scope !49, !noalias !46
  br label %651

651:                                              ; preds = %636, %638
  br i1 %449, label %718, label %652

652:                                              ; preds = %651, %592, %591
  %653 = phi i16* [ %588, %592 ], [ %588, %591 ], [ %603, %651 ]
  %654 = phi i32* [ %589, %592 ], [ %589, %591 ], [ %604, %651 ]
  %655 = phi i32 [ 0, %592 ], [ 0, %591 ], [ %444, %651 ]
  %656 = sub i32 %76, %655
  %657 = xor i32 %655, -1
  %658 = add i32 %76, %657
  %659 = and i32 %656, 7
  %660 = icmp eq i32 %659, 0
  br i1 %660, label %673, label %661

661:                                              ; preds = %652, %661
  %662 = phi i16* [ %669, %661 ], [ %653, %652 ]
  %663 = phi i32* [ %666, %661 ], [ %654, %652 ]
  %664 = phi i32 [ %670, %661 ], [ %655, %652 ]
  %665 = phi i32 [ %671, %661 ], [ %659, %652 ]
  %666 = getelementptr inbounds i32, i32* %663, i64 1
  %667 = load i32, i32* %663, align 4
  %668 = trunc i32 %667 to i16
  store i16 %668, i16* %662, align 2
  %669 = getelementptr inbounds i16, i16* %662, i64 1
  %670 = add nuw i32 %664, 1
  %671 = add i32 %665, -1
  %672 = icmp eq i32 %671, 0
  br i1 %672, label %673, label %661, !llvm.loop !52

673:                                              ; preds = %661, %652
  %674 = phi i32* [ undef, %652 ], [ %666, %661 ]
  %675 = phi i16* [ undef, %652 ], [ %669, %661 ]
  %676 = phi i16* [ %653, %652 ], [ %669, %661 ]
  %677 = phi i32* [ %654, %652 ], [ %666, %661 ]
  %678 = phi i32 [ %655, %652 ], [ %670, %661 ]
  %679 = icmp ult i32 %658, 7
  br i1 %679, label %718, label %680

680:                                              ; preds = %673, %680
  %681 = phi i16* [ %715, %680 ], [ %676, %673 ]
  %682 = phi i32* [ %712, %680 ], [ %677, %673 ]
  %683 = phi i32 [ %716, %680 ], [ %678, %673 ]
  %684 = getelementptr inbounds i32, i32* %682, i64 1
  %685 = load i32, i32* %682, align 4
  %686 = trunc i32 %685 to i16
  store i16 %686, i16* %681, align 2
  %687 = getelementptr inbounds i16, i16* %681, i64 1
  %688 = getelementptr inbounds i32, i32* %682, i64 2
  %689 = load i32, i32* %684, align 4
  %690 = trunc i32 %689 to i16
  store i16 %690, i16* %687, align 2
  %691 = getelementptr inbounds i16, i16* %681, i64 2
  %692 = getelementptr inbounds i32, i32* %682, i64 3
  %693 = load i32, i32* %688, align 4
  %694 = trunc i32 %693 to i16
  store i16 %694, i16* %691, align 2
  %695 = getelementptr inbounds i16, i16* %681, i64 3
  %696 = getelementptr inbounds i32, i32* %682, i64 4
  %697 = load i32, i32* %692, align 4
  %698 = trunc i32 %697 to i16
  store i16 %698, i16* %695, align 2
  %699 = getelementptr inbounds i16, i16* %681, i64 4
  %700 = getelementptr inbounds i32, i32* %682, i64 5
  %701 = load i32, i32* %696, align 4
  %702 = trunc i32 %701 to i16
  store i16 %702, i16* %699, align 2
  %703 = getelementptr inbounds i16, i16* %681, i64 5
  %704 = getelementptr inbounds i32, i32* %682, i64 6
  %705 = load i32, i32* %700, align 4
  %706 = trunc i32 %705 to i16
  store i16 %706, i16* %703, align 2
  %707 = getelementptr inbounds i16, i16* %681, i64 6
  %708 = getelementptr inbounds i32, i32* %682, i64 7
  %709 = load i32, i32* %704, align 4
  %710 = trunc i32 %709 to i16
  store i16 %710, i16* %707, align 2
  %711 = getelementptr inbounds i16, i16* %681, i64 7
  %712 = getelementptr inbounds i32, i32* %682, i64 8
  %713 = load i32, i32* %708, align 4
  %714 = trunc i32 %713 to i16
  store i16 %714, i16* %711, align 2
  %715 = getelementptr inbounds i16, i16* %681, i64 8
  %716 = add nuw i32 %683, 8
  %717 = icmp eq i32 %716, %76
  br i1 %717, label %718, label %680, !llvm.loop !53

718:                                              ; preds = %673, %680, %651, %587
  %719 = phi i32* [ %589, %587 ], [ %604, %651 ], [ %674, %673 ], [ %712, %680 ]
  %720 = phi i16* [ %588, %587 ], [ %603, %651 ], [ %675, %673 ], [ %715, %680 ]
  %721 = getelementptr inbounds i32, i32* %719, i64 %433
  %722 = add nuw i32 %590, 1
  %723 = icmp eq i32 %722, %77
  br i1 %723, label %724, label %587

724:                                              ; preds = %581, %718, %410, %430
  %725 = phi i16* [ %405, %430 ], [ %405, %410 ], [ %720, %718 ], [ %583, %581 ]
  %726 = bitcast i16* %725 to i8*
  br label %783

727:                                              ; preds = %74
  %728 = icmp eq i32 %77, 0
  br i1 %728, label %783, label %729

729:                                              ; preds = %727
  %730 = zext i32 %76 to i64
  %731 = shl nuw nsw i64 %730, 2
  %732 = add i32 %76, %75
  %733 = zext i32 %732 to i64
  %734 = add i32 %77, -1
  %735 = and i32 %77, 3
  %736 = icmp ult i32 %734, 3
  br i1 %736, label %764, label %737

737:                                              ; preds = %729
  %738 = sub i32 %77, %735
  br label %739

739:                                              ; preds = %739, %737
  %740 = phi i8* [ %25, %737 ], [ %759, %739 ]
  %741 = phi i32* [ %79, %737 ], [ %758, %739 ]
  %742 = phi i32 [ %738, %737 ], [ %760, %739 ]
  %743 = bitcast i8* %740 to i32*
  %744 = bitcast i32* %741 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %740, i8* align 4 %744, i64 %731, i1 false)
  %745 = getelementptr inbounds i32, i32* %743, i64 %730
  %746 = getelementptr inbounds i32, i32* %741, i64 %733
  %747 = bitcast i32* %745 to i8*
  %748 = bitcast i32* %746 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %747, i8* align 4 %748, i64 %731, i1 false)
  %749 = getelementptr inbounds i32, i32* %745, i64 %730
  %750 = getelementptr inbounds i32, i32* %746, i64 %733
  %751 = bitcast i32* %749 to i8*
  %752 = bitcast i32* %750 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %751, i8* align 4 %752, i64 %731, i1 false)
  %753 = getelementptr inbounds i32, i32* %749, i64 %730
  %754 = getelementptr inbounds i32, i32* %750, i64 %733
  %755 = bitcast i32* %753 to i8*
  %756 = bitcast i32* %754 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %755, i8* align 4 %756, i64 %731, i1 false)
  %757 = getelementptr inbounds i32, i32* %753, i64 %730
  %758 = getelementptr inbounds i32, i32* %754, i64 %733
  %759 = bitcast i32* %757 to i8*
  %760 = add i32 %742, -4
  %761 = icmp eq i32 %760, 0
  br i1 %761, label %762, label %739

762:                                              ; preds = %739
  %763 = bitcast i32* %757 to i8*
  br label %764

764:                                              ; preds = %762, %729
  %765 = phi i32* [ undef, %729 ], [ %757, %762 ]
  %766 = phi i8* [ %25, %729 ], [ %763, %762 ]
  %767 = phi i32* [ %79, %729 ], [ %758, %762 ]
  %768 = icmp eq i32 %735, 0
  br i1 %768, label %780, label %769

769:                                              ; preds = %764, %769
  %770 = phi i8* [ %777, %769 ], [ %766, %764 ]
  %771 = phi i32* [ %776, %769 ], [ %767, %764 ]
  %772 = phi i32 [ %778, %769 ], [ %735, %764 ]
  %773 = bitcast i8* %770 to i32*
  %774 = bitcast i32* %771 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %770, i8* align 4 %774, i64 %731, i1 false)
  %775 = getelementptr inbounds i32, i32* %773, i64 %730
  %776 = getelementptr inbounds i32, i32* %771, i64 %733
  %777 = bitcast i32* %775 to i8*
  %778 = add i32 %772, -1
  %779 = icmp eq i32 %778, 0
  br i1 %779, label %780, label %769, !llvm.loop !54

780:                                              ; preds = %769, %764
  %781 = phi i32* [ %765, %764 ], [ %775, %769 ]
  %782 = bitcast i32* %781 to i8*
  br label %783

783:                                              ; preds = %261, %398, %780, %727, %90, %110, %74, %724
  %784 = phi i8* [ %25, %74 ], [ %726, %724 ], [ %25, %110 ], [ %25, %90 ], [ %25, %727 ], [ %782, %780 ], [ %399, %398 ], [ %262, %261 ]
  %785 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %27, i64 1
  %786 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %26, i64 1
  %787 = add nuw i32 %28, 1
  %788 = load %struct.opj_image*, %struct.opj_image** %9, align 8
  %789 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %788, i64 0, i32 4
  %790 = load i32, i32* %789, align 8
  %791 = icmp ult i32 %787, %790
  br i1 %791, label %24, label %792

792:                                              ; preds = %783, %8, %3
  %793 = phi i32 [ 0, %3 ], [ 1, %8 ], [ 1, %783 ]
  ret i32 %793
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @opj_tcd_get_encoder_input_buffer_size(%struct.opj_tcd* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  %3 = load %struct.opj_image*, %struct.opj_image** %2, align 8
  %4 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %3, i64 0, i32 4
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %47, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %3, i64 0, i32 6
  %9 = load %struct.opj_image_comp*, %struct.opj_image_comp** %8, align 8
  %10 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 5
  %11 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %10, align 8
  %12 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %11, i64 0, i32 0
  %13 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %12, align 8
  %14 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %13, i64 0, i32 5
  %15 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %14, align 8
  br label %16

16:                                               ; preds = %7, %16
  %17 = phi %struct.opj_tcd_tilecomp* [ %15, %7 ], [ %44, %16 ]
  %18 = phi %struct.opj_image_comp* [ %9, %7 ], [ %43, %16 ]
  %19 = phi i64 [ 0, %7 ], [ %42, %16 ]
  %20 = phi i32 [ 0, %7 ], [ %45, %16 ]
  %21 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %18, i64 0, i32 6
  %22 = load i32, i32* %21, align 8
  %23 = lshr i32 %22, 3
  %24 = and i32 %22, 7
  %25 = icmp ne i32 %24, 0
  %26 = zext i1 %25 to i32
  %27 = add nuw nsw i32 %23, %26
  %28 = icmp eq i32 %27, 3
  %29 = select i1 %28, i32 4, i32 %27
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %17, i64 0, i32 2
  %32 = bitcast i32* %31 to <2 x i32>*
  %33 = load <2 x i32>, <2 x i32>* %32, align 8
  %34 = bitcast %struct.opj_tcd_tilecomp* %17 to <2 x i32>*
  %35 = load <2 x i32>, <2 x i32>* %34, align 8
  %36 = sub nsw <2 x i32> %33, %35
  %37 = sext <2 x i32> %36 to <2 x i64>
  %38 = extractelement <2 x i64> %37, i32 0
  %39 = extractelement <2 x i64> %37, i32 1
  %40 = mul nsw i64 %39, %38
  %41 = mul i64 %40, %30
  %42 = add i64 %41, %19
  %43 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %18, i64 1
  %44 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %17, i64 1
  %45 = add nuw i32 %20, 1
  %46 = icmp ult i32 %45, %5
  br i1 %46, label %16, label %47

47:                                               ; preds = %16, %1
  %48 = phi i64 [ 0, %1 ], [ %42, %16 ]
  ret i64 %48
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @opj_tcd_copy_tile_data(%struct.opj_tcd* nocapture readonly, i8* nocapture readonly, i64) local_unnamed_addr #3 {
  %4 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  %5 = load %struct.opj_image*, %struct.opj_image** %4, align 8
  %6 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 4
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %49, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 6
  %11 = load %struct.opj_image_comp*, %struct.opj_image_comp** %10, align 8
  %12 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 5
  %13 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %12, align 8
  %14 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %13, i64 0, i32 0
  %15 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %14, align 8
  %16 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %15, i64 0, i32 5
  %17 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %16, align 8
  br label %18

18:                                               ; preds = %18, %9
  %19 = phi %struct.opj_tcd_tilecomp* [ %17, %9 ], [ %46, %18 ]
  %20 = phi %struct.opj_image_comp* [ %11, %9 ], [ %45, %18 ]
  %21 = phi i64 [ 0, %9 ], [ %44, %18 ]
  %22 = phi i32 [ 0, %9 ], [ %47, %18 ]
  %23 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %20, i64 0, i32 6
  %24 = load i32, i32* %23, align 8
  %25 = lshr i32 %24, 3
  %26 = and i32 %24, 7
  %27 = icmp ne i32 %26, 0
  %28 = zext i1 %27 to i32
  %29 = add nuw nsw i32 %25, %28
  %30 = icmp eq i32 %29, 3
  %31 = select i1 %30, i32 4, i32 %29
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %19, i64 0, i32 2
  %34 = bitcast i32* %33 to <2 x i32>*
  %35 = load <2 x i32>, <2 x i32>* %34, align 8
  %36 = bitcast %struct.opj_tcd_tilecomp* %19 to <2 x i32>*
  %37 = load <2 x i32>, <2 x i32>* %36, align 8
  %38 = sub nsw <2 x i32> %35, %37
  %39 = sext <2 x i32> %38 to <2 x i64>
  %40 = extractelement <2 x i64> %39, i32 0
  %41 = extractelement <2 x i64> %39, i32 1
  %42 = mul nsw i64 %41, %40
  %43 = mul i64 %42, %32
  %44 = add i64 %43, %21
  %45 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %20, i64 1
  %46 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %19, i64 1
  %47 = add nuw i32 %22, 1
  %48 = icmp eq i32 %47, %7
  br i1 %48, label %49, label %18

49:                                               ; preds = %18, %3
  %50 = phi i64 [ 0, %3 ], [ %44, %18 ]
  %51 = icmp ne i64 %50, %2
  %52 = or i1 %51, %8
  %53 = xor i1 %51, true
  %54 = zext i1 %53 to i32
  br i1 %52, label %831, label %55

55:                                               ; preds = %49
  %56 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 6
  %57 = load %struct.opj_image_comp*, %struct.opj_image_comp** %56, align 8
  %58 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 5
  %59 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %58, align 8
  %60 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %59, i64 0, i32 0
  %61 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %60, align 8
  %62 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %61, i64 0, i32 5
  %63 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %62, align 8
  br label %64

64:                                               ; preds = %55, %822
  %65 = phi %struct.opj_tcd_tilecomp* [ %825, %822 ], [ %63, %55 ]
  %66 = phi %struct.opj_image_comp* [ %824, %822 ], [ %57, %55 ]
  %67 = phi i32 [ %826, %822 ], [ 0, %55 ]
  %68 = phi i8* [ %823, %822 ], [ %1, %55 ]
  %69 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %66, i64 0, i32 6
  %70 = load i32, i32* %69, align 8
  %71 = lshr i32 %70, 3
  %72 = and i32 %70, 7
  %73 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %65, i64 0, i32 2
  %74 = load i32, i32* %73, align 8
  %75 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %65, i64 0, i32 0
  %76 = load i32, i32* %75, align 8
  %77 = sub nsw i32 %74, %76
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %65, i64 0, i32 3
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %65, i64 0, i32 1
  %82 = load i32, i32* %81, align 4
  %83 = sub nsw i32 %80, %82
  %84 = sext i32 %83 to i64
  %85 = mul nsw i64 %84, %78
  %86 = icmp ne i32 %72, 0
  %87 = zext i1 %86 to i32
  %88 = add nuw nsw i32 %71, %87
  %89 = icmp eq i32 %88, 3
  %90 = select i1 %89, i32 4, i32 %88
  switch i32 %90, label %822 [
    i32 1, label %91
    i32 2, label %373
    i32 4, label %663
  ]

91:                                               ; preds = %64
  %92 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %65, i64 0, i32 9
  %93 = load i32*, i32** %92, align 8
  %94 = bitcast i32* %93 to i8*
  %95 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %66, i64 0, i32 8
  %96 = load i32, i32* %95, align 8
  %97 = icmp eq i32 %96, 0
  %98 = icmp ne i64 %85, 0
  br i1 %97, label %198, label %99

99:                                               ; preds = %91
  br i1 %98, label %100, label %822

100:                                              ; preds = %99
  %101 = mul nsw i64 %84, %78
  %102 = icmp ult i64 %101, 8
  br i1 %102, label %103, label %130

103:                                              ; preds = %196, %130, %100
  %104 = phi i32* [ %93, %130 ], [ %93, %100 ], [ %140, %196 ]
  %105 = phi i8* [ %68, %130 ], [ %68, %100 ], [ %141, %196 ]
  %106 = phi i64 [ 0, %130 ], [ 0, %100 ], [ %139, %196 ]
  %107 = mul nsw i64 %84, %78
  %108 = xor i64 %106, -1
  %109 = add i64 %107, %108
  %110 = and i64 %107, 7
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %124, label %112

112:                                              ; preds = %103, %112
  %113 = phi i32* [ %120, %112 ], [ %104, %103 ]
  %114 = phi i8* [ %117, %112 ], [ %105, %103 ]
  %115 = phi i64 [ %121, %112 ], [ %106, %103 ]
  %116 = phi i64 [ %122, %112 ], [ %110, %103 ]
  %117 = getelementptr inbounds i8, i8* %114, i64 1
  %118 = load i8, i8* %114, align 1
  %119 = sext i8 %118 to i32
  %120 = getelementptr inbounds i32, i32* %113, i64 1
  store i32 %119, i32* %113, align 4
  %121 = add nuw i64 %115, 1
  %122 = add i64 %116, -1
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %112, !llvm.loop !55

124:                                              ; preds = %112, %103
  %125 = phi i8* [ undef, %103 ], [ %117, %112 ]
  %126 = phi i32* [ %104, %103 ], [ %120, %112 ]
  %127 = phi i8* [ %105, %103 ], [ %117, %112 ]
  %128 = phi i64 [ %106, %103 ], [ %121, %112 ]
  %129 = icmp ult i64 %109, 7
  br i1 %129, label %822, label %297

130:                                              ; preds = %100
  %131 = mul nsw i64 %84, %78
  %132 = getelementptr i32, i32* %93, i64 %131
  %133 = bitcast i32* %132 to i8*
  %134 = getelementptr i8, i8* %68, i64 %131
  %135 = icmp ugt i8* %134, %94
  %136 = icmp ult i8* %68, %133
  %137 = and i1 %135, %136
  br i1 %137, label %103, label %138

138:                                              ; preds = %130
  %139 = and i64 %101, -8
  %140 = getelementptr i32, i32* %93, i64 %139
  %141 = getelementptr i8, i8* %68, i64 %139
  %142 = add i64 %139, -8
  %143 = lshr exact i64 %142, 3
  %144 = add nuw nsw i64 %143, 1
  %145 = and i64 %144, 1
  %146 = icmp eq i64 %142, 0
  br i1 %146, label %180, label %147

147:                                              ; preds = %138
  %148 = sub nuw nsw i64 %144, %145
  br label %149

149:                                              ; preds = %149, %147
  %150 = phi i64 [ 0, %147 ], [ %177, %149 ]
  %151 = phi i64 [ %148, %147 ], [ %178, %149 ]
  %152 = getelementptr i32, i32* %93, i64 %150
  %153 = getelementptr i8, i8* %68, i64 %150
  %154 = bitcast i8* %153 to <4 x i8>*
  %155 = load <4 x i8>, <4 x i8>* %154, align 1, !alias.scope !56
  %156 = getelementptr i8, i8* %153, i64 4
  %157 = bitcast i8* %156 to <4 x i8>*
  %158 = load <4 x i8>, <4 x i8>* %157, align 1, !alias.scope !56
  %159 = sext <4 x i8> %155 to <4 x i32>
  %160 = sext <4 x i8> %158 to <4 x i32>
  %161 = bitcast i32* %152 to <4 x i32>*
  store <4 x i32> %159, <4 x i32>* %161, align 4, !alias.scope !59, !noalias !56
  %162 = getelementptr i32, i32* %152, i64 4
  %163 = bitcast i32* %162 to <4 x i32>*
  store <4 x i32> %160, <4 x i32>* %163, align 4, !alias.scope !59, !noalias !56
  %164 = or i64 %150, 8
  %165 = getelementptr i32, i32* %93, i64 %164
  %166 = getelementptr i8, i8* %68, i64 %164
  %167 = bitcast i8* %166 to <4 x i8>*
  %168 = load <4 x i8>, <4 x i8>* %167, align 1, !alias.scope !56
  %169 = getelementptr i8, i8* %166, i64 4
  %170 = bitcast i8* %169 to <4 x i8>*
  %171 = load <4 x i8>, <4 x i8>* %170, align 1, !alias.scope !56
  %172 = sext <4 x i8> %168 to <4 x i32>
  %173 = sext <4 x i8> %171 to <4 x i32>
  %174 = bitcast i32* %165 to <4 x i32>*
  store <4 x i32> %172, <4 x i32>* %174, align 4, !alias.scope !59, !noalias !56
  %175 = getelementptr i32, i32* %165, i64 4
  %176 = bitcast i32* %175 to <4 x i32>*
  store <4 x i32> %173, <4 x i32>* %176, align 4, !alias.scope !59, !noalias !56
  %177 = add i64 %150, 16
  %178 = add i64 %151, -2
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %180, label %149, !llvm.loop !61

180:                                              ; preds = %149, %138
  %181 = phi i64 [ 0, %138 ], [ %177, %149 ]
  %182 = icmp eq i64 %145, 0
  br i1 %182, label %196, label %183

183:                                              ; preds = %180
  %184 = getelementptr i32, i32* %93, i64 %181
  %185 = getelementptr i8, i8* %68, i64 %181
  %186 = bitcast i8* %185 to <4 x i8>*
  %187 = load <4 x i8>, <4 x i8>* %186, align 1, !alias.scope !56
  %188 = getelementptr i8, i8* %185, i64 4
  %189 = bitcast i8* %188 to <4 x i8>*
  %190 = load <4 x i8>, <4 x i8>* %189, align 1, !alias.scope !56
  %191 = sext <4 x i8> %187 to <4 x i32>
  %192 = sext <4 x i8> %190 to <4 x i32>
  %193 = bitcast i32* %184 to <4 x i32>*
  store <4 x i32> %191, <4 x i32>* %193, align 4, !alias.scope !59, !noalias !56
  %194 = getelementptr i32, i32* %184, i64 4
  %195 = bitcast i32* %194 to <4 x i32>*
  store <4 x i32> %192, <4 x i32>* %195, align 4, !alias.scope !59, !noalias !56
  br label %196

196:                                              ; preds = %180, %183
  %197 = icmp eq i64 %101, %139
  br i1 %197, label %822, label %103

198:                                              ; preds = %91
  br i1 %98, label %199, label %822

199:                                              ; preds = %198
  %200 = mul nsw i64 %84, %78
  %201 = icmp ult i64 %200, 8
  br i1 %201, label %202, label %229

202:                                              ; preds = %295, %229, %199
  %203 = phi i32* [ %93, %229 ], [ %93, %199 ], [ %239, %295 ]
  %204 = phi i8* [ %68, %229 ], [ %68, %199 ], [ %240, %295 ]
  %205 = phi i64 [ 0, %229 ], [ 0, %199 ], [ %238, %295 ]
  %206 = mul nsw i64 %84, %78
  %207 = xor i64 %205, -1
  %208 = add i64 %206, %207
  %209 = and i64 %206, 7
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %223, label %211

211:                                              ; preds = %202, %211
  %212 = phi i32* [ %219, %211 ], [ %203, %202 ]
  %213 = phi i8* [ %216, %211 ], [ %204, %202 ]
  %214 = phi i64 [ %220, %211 ], [ %205, %202 ]
  %215 = phi i64 [ %221, %211 ], [ %209, %202 ]
  %216 = getelementptr inbounds i8, i8* %213, i64 1
  %217 = load i8, i8* %213, align 1
  %218 = zext i8 %217 to i32
  %219 = getelementptr inbounds i32, i32* %212, i64 1
  store i32 %218, i32* %212, align 4
  %220 = add nuw i64 %214, 1
  %221 = add i64 %215, -1
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %223, label %211, !llvm.loop !62

223:                                              ; preds = %211, %202
  %224 = phi i8* [ undef, %202 ], [ %216, %211 ]
  %225 = phi i32* [ %203, %202 ], [ %219, %211 ]
  %226 = phi i8* [ %204, %202 ], [ %216, %211 ]
  %227 = phi i64 [ %205, %202 ], [ %220, %211 ]
  %228 = icmp ult i64 %208, 7
  br i1 %228, label %822, label %335

229:                                              ; preds = %199
  %230 = mul nsw i64 %84, %78
  %231 = getelementptr i32, i32* %93, i64 %230
  %232 = bitcast i32* %231 to i8*
  %233 = getelementptr i8, i8* %68, i64 %230
  %234 = icmp ugt i8* %233, %94
  %235 = icmp ult i8* %68, %232
  %236 = and i1 %234, %235
  br i1 %236, label %202, label %237

237:                                              ; preds = %229
  %238 = and i64 %200, -8
  %239 = getelementptr i32, i32* %93, i64 %238
  %240 = getelementptr i8, i8* %68, i64 %238
  %241 = add i64 %238, -8
  %242 = lshr exact i64 %241, 3
  %243 = add nuw nsw i64 %242, 1
  %244 = and i64 %243, 1
  %245 = icmp eq i64 %241, 0
  br i1 %245, label %279, label %246

246:                                              ; preds = %237
  %247 = sub nuw nsw i64 %243, %244
  br label %248

248:                                              ; preds = %248, %246
  %249 = phi i64 [ 0, %246 ], [ %276, %248 ]
  %250 = phi i64 [ %247, %246 ], [ %277, %248 ]
  %251 = getelementptr i32, i32* %93, i64 %249
  %252 = getelementptr i8, i8* %68, i64 %249
  %253 = bitcast i8* %252 to <4 x i8>*
  %254 = load <4 x i8>, <4 x i8>* %253, align 1, !alias.scope !63
  %255 = getelementptr i8, i8* %252, i64 4
  %256 = bitcast i8* %255 to <4 x i8>*
  %257 = load <4 x i8>, <4 x i8>* %256, align 1, !alias.scope !63
  %258 = zext <4 x i8> %254 to <4 x i32>
  %259 = zext <4 x i8> %257 to <4 x i32>
  %260 = bitcast i32* %251 to <4 x i32>*
  store <4 x i32> %258, <4 x i32>* %260, align 4, !alias.scope !66, !noalias !63
  %261 = getelementptr i32, i32* %251, i64 4
  %262 = bitcast i32* %261 to <4 x i32>*
  store <4 x i32> %259, <4 x i32>* %262, align 4, !alias.scope !66, !noalias !63
  %263 = or i64 %249, 8
  %264 = getelementptr i32, i32* %93, i64 %263
  %265 = getelementptr i8, i8* %68, i64 %263
  %266 = bitcast i8* %265 to <4 x i8>*
  %267 = load <4 x i8>, <4 x i8>* %266, align 1, !alias.scope !63
  %268 = getelementptr i8, i8* %265, i64 4
  %269 = bitcast i8* %268 to <4 x i8>*
  %270 = load <4 x i8>, <4 x i8>* %269, align 1, !alias.scope !63
  %271 = zext <4 x i8> %267 to <4 x i32>
  %272 = zext <4 x i8> %270 to <4 x i32>
  %273 = bitcast i32* %264 to <4 x i32>*
  store <4 x i32> %271, <4 x i32>* %273, align 4, !alias.scope !66, !noalias !63
  %274 = getelementptr i32, i32* %264, i64 4
  %275 = bitcast i32* %274 to <4 x i32>*
  store <4 x i32> %272, <4 x i32>* %275, align 4, !alias.scope !66, !noalias !63
  %276 = add i64 %249, 16
  %277 = add i64 %250, -2
  %278 = icmp eq i64 %277, 0
  br i1 %278, label %279, label %248, !llvm.loop !68

279:                                              ; preds = %248, %237
  %280 = phi i64 [ 0, %237 ], [ %276, %248 ]
  %281 = icmp eq i64 %244, 0
  br i1 %281, label %295, label %282

282:                                              ; preds = %279
  %283 = getelementptr i32, i32* %93, i64 %280
  %284 = getelementptr i8, i8* %68, i64 %280
  %285 = bitcast i8* %284 to <4 x i8>*
  %286 = load <4 x i8>, <4 x i8>* %285, align 1, !alias.scope !63
  %287 = getelementptr i8, i8* %284, i64 4
  %288 = bitcast i8* %287 to <4 x i8>*
  %289 = load <4 x i8>, <4 x i8>* %288, align 1, !alias.scope !63
  %290 = zext <4 x i8> %286 to <4 x i32>
  %291 = zext <4 x i8> %289 to <4 x i32>
  %292 = bitcast i32* %283 to <4 x i32>*
  store <4 x i32> %290, <4 x i32>* %292, align 4, !alias.scope !66, !noalias !63
  %293 = getelementptr i32, i32* %283, i64 4
  %294 = bitcast i32* %293 to <4 x i32>*
  store <4 x i32> %291, <4 x i32>* %294, align 4, !alias.scope !66, !noalias !63
  br label %295

295:                                              ; preds = %279, %282
  %296 = icmp eq i64 %200, %238
  br i1 %296, label %822, label %202

297:                                              ; preds = %124, %297
  %298 = phi i32* [ %332, %297 ], [ %126, %124 ]
  %299 = phi i8* [ %329, %297 ], [ %127, %124 ]
  %300 = phi i64 [ %333, %297 ], [ %128, %124 ]
  %301 = getelementptr inbounds i8, i8* %299, i64 1
  %302 = load i8, i8* %299, align 1
  %303 = sext i8 %302 to i32
  %304 = getelementptr inbounds i32, i32* %298, i64 1
  store i32 %303, i32* %298, align 4
  %305 = getelementptr inbounds i8, i8* %299, i64 2
  %306 = load i8, i8* %301, align 1
  %307 = sext i8 %306 to i32
  %308 = getelementptr inbounds i32, i32* %298, i64 2
  store i32 %307, i32* %304, align 4
  %309 = getelementptr inbounds i8, i8* %299, i64 3
  %310 = load i8, i8* %305, align 1
  %311 = sext i8 %310 to i32
  %312 = getelementptr inbounds i32, i32* %298, i64 3
  store i32 %311, i32* %308, align 4
  %313 = getelementptr inbounds i8, i8* %299, i64 4
  %314 = load i8, i8* %309, align 1
  %315 = sext i8 %314 to i32
  %316 = getelementptr inbounds i32, i32* %298, i64 4
  store i32 %315, i32* %312, align 4
  %317 = getelementptr inbounds i8, i8* %299, i64 5
  %318 = load i8, i8* %313, align 1
  %319 = sext i8 %318 to i32
  %320 = getelementptr inbounds i32, i32* %298, i64 5
  store i32 %319, i32* %316, align 4
  %321 = getelementptr inbounds i8, i8* %299, i64 6
  %322 = load i8, i8* %317, align 1
  %323 = sext i8 %322 to i32
  %324 = getelementptr inbounds i32, i32* %298, i64 6
  store i32 %323, i32* %320, align 4
  %325 = getelementptr inbounds i8, i8* %299, i64 7
  %326 = load i8, i8* %321, align 1
  %327 = sext i8 %326 to i32
  %328 = getelementptr inbounds i32, i32* %298, i64 7
  store i32 %327, i32* %324, align 4
  %329 = getelementptr inbounds i8, i8* %299, i64 8
  %330 = load i8, i8* %325, align 1
  %331 = sext i8 %330 to i32
  %332 = getelementptr inbounds i32, i32* %298, i64 8
  store i32 %331, i32* %328, align 4
  %333 = add nuw i64 %300, 8
  %334 = icmp eq i64 %333, %85
  br i1 %334, label %822, label %297, !llvm.loop !69

335:                                              ; preds = %223, %335
  %336 = phi i32* [ %370, %335 ], [ %225, %223 ]
  %337 = phi i8* [ %367, %335 ], [ %226, %223 ]
  %338 = phi i64 [ %371, %335 ], [ %227, %223 ]
  %339 = getelementptr inbounds i8, i8* %337, i64 1
  %340 = load i8, i8* %337, align 1
  %341 = zext i8 %340 to i32
  %342 = getelementptr inbounds i32, i32* %336, i64 1
  store i32 %341, i32* %336, align 4
  %343 = getelementptr inbounds i8, i8* %337, i64 2
  %344 = load i8, i8* %339, align 1
  %345 = zext i8 %344 to i32
  %346 = getelementptr inbounds i32, i32* %336, i64 2
  store i32 %345, i32* %342, align 4
  %347 = getelementptr inbounds i8, i8* %337, i64 3
  %348 = load i8, i8* %343, align 1
  %349 = zext i8 %348 to i32
  %350 = getelementptr inbounds i32, i32* %336, i64 3
  store i32 %349, i32* %346, align 4
  %351 = getelementptr inbounds i8, i8* %337, i64 4
  %352 = load i8, i8* %347, align 1
  %353 = zext i8 %352 to i32
  %354 = getelementptr inbounds i32, i32* %336, i64 4
  store i32 %353, i32* %350, align 4
  %355 = getelementptr inbounds i8, i8* %337, i64 5
  %356 = load i8, i8* %351, align 1
  %357 = zext i8 %356 to i32
  %358 = getelementptr inbounds i32, i32* %336, i64 5
  store i32 %357, i32* %354, align 4
  %359 = getelementptr inbounds i8, i8* %337, i64 6
  %360 = load i8, i8* %355, align 1
  %361 = zext i8 %360 to i32
  %362 = getelementptr inbounds i32, i32* %336, i64 6
  store i32 %361, i32* %358, align 4
  %363 = getelementptr inbounds i8, i8* %337, i64 7
  %364 = load i8, i8* %359, align 1
  %365 = zext i8 %364 to i32
  %366 = getelementptr inbounds i32, i32* %336, i64 7
  store i32 %365, i32* %362, align 4
  %367 = getelementptr inbounds i8, i8* %337, i64 8
  %368 = load i8, i8* %363, align 1
  %369 = zext i8 %368 to i32
  %370 = getelementptr inbounds i32, i32* %336, i64 8
  store i32 %369, i32* %366, align 4
  %371 = add nuw i64 %338, 8
  %372 = icmp eq i64 %371, %85
  br i1 %372, label %822, label %335, !llvm.loop !70

373:                                              ; preds = %64
  %374 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %65, i64 0, i32 9
  %375 = load i32*, i32** %374, align 8
  %376 = bitcast i32* %375 to i8*
  %377 = bitcast i8* %68 to i16*
  %378 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %66, i64 0, i32 8
  %379 = load i32, i32* %378, align 8
  %380 = icmp eq i32 %379, 0
  %381 = icmp ne i64 %85, 0
  br i1 %380, label %483, label %382

382:                                              ; preds = %373
  br i1 %381, label %383, label %660

383:                                              ; preds = %382
  %384 = mul nsw i64 %84, %78
  %385 = icmp ult i64 %384, 8
  br i1 %385, label %386, label %413

386:                                              ; preds = %481, %413, %383
  %387 = phi i16* [ %377, %413 ], [ %377, %383 ], [ %425, %481 ]
  %388 = phi i32* [ %375, %413 ], [ %375, %383 ], [ %426, %481 ]
  %389 = phi i64 [ 0, %413 ], [ 0, %383 ], [ %424, %481 ]
  %390 = mul nsw i64 %84, %78
  %391 = xor i64 %389, -1
  %392 = add i64 %390, %391
  %393 = and i64 %390, 7
  %394 = icmp eq i64 %393, 0
  br i1 %394, label %407, label %395

395:                                              ; preds = %386, %395
  %396 = phi i16* [ %400, %395 ], [ %387, %386 ]
  %397 = phi i32* [ %403, %395 ], [ %388, %386 ]
  %398 = phi i64 [ %404, %395 ], [ %389, %386 ]
  %399 = phi i64 [ %405, %395 ], [ %393, %386 ]
  %400 = getelementptr inbounds i16, i16* %396, i64 1
  %401 = load i16, i16* %396, align 2
  %402 = sext i16 %401 to i32
  %403 = getelementptr inbounds i32, i32* %397, i64 1
  store i32 %402, i32* %397, align 4
  %404 = add nuw i64 %398, 1
  %405 = add i64 %399, -1
  %406 = icmp eq i64 %405, 0
  br i1 %406, label %407, label %395, !llvm.loop !71

407:                                              ; preds = %395, %386
  %408 = phi i16* [ undef, %386 ], [ %400, %395 ]
  %409 = phi i16* [ %387, %386 ], [ %400, %395 ]
  %410 = phi i32* [ %388, %386 ], [ %403, %395 ]
  %411 = phi i64 [ %389, %386 ], [ %404, %395 ]
  %412 = icmp ult i64 %392, 7
  br i1 %412, label %660, label %584

413:                                              ; preds = %383
  %414 = mul nsw i64 %84, %78
  %415 = getelementptr i32, i32* %375, i64 %414
  %416 = bitcast i32* %415 to i8*
  %417 = shl nsw i64 %84, 1
  %418 = mul i64 %417, %78
  %419 = getelementptr i8, i8* %68, i64 %418
  %420 = icmp ugt i8* %419, %376
  %421 = icmp ult i8* %68, %416
  %422 = and i1 %420, %421
  br i1 %422, label %386, label %423

423:                                              ; preds = %413
  %424 = and i64 %384, -8
  %425 = getelementptr i16, i16* %377, i64 %424
  %426 = getelementptr i32, i32* %375, i64 %424
  %427 = add i64 %424, -8
  %428 = lshr exact i64 %427, 3
  %429 = add nuw nsw i64 %428, 1
  %430 = and i64 %429, 1
  %431 = icmp eq i64 %427, 0
  br i1 %431, label %465, label %432

432:                                              ; preds = %423
  %433 = sub nuw nsw i64 %429, %430
  br label %434

434:                                              ; preds = %434, %432
  %435 = phi i64 [ 0, %432 ], [ %462, %434 ]
  %436 = phi i64 [ %433, %432 ], [ %463, %434 ]
  %437 = getelementptr i16, i16* %377, i64 %435
  %438 = getelementptr i32, i32* %375, i64 %435
  %439 = bitcast i16* %437 to <4 x i16>*
  %440 = load <4 x i16>, <4 x i16>* %439, align 2, !alias.scope !72
  %441 = getelementptr i16, i16* %437, i64 4
  %442 = bitcast i16* %441 to <4 x i16>*
  %443 = load <4 x i16>, <4 x i16>* %442, align 2, !alias.scope !72
  %444 = sext <4 x i16> %440 to <4 x i32>
  %445 = sext <4 x i16> %443 to <4 x i32>
  %446 = bitcast i32* %438 to <4 x i32>*
  store <4 x i32> %444, <4 x i32>* %446, align 4, !alias.scope !75, !noalias !72
  %447 = getelementptr i32, i32* %438, i64 4
  %448 = bitcast i32* %447 to <4 x i32>*
  store <4 x i32> %445, <4 x i32>* %448, align 4, !alias.scope !75, !noalias !72
  %449 = or i64 %435, 8
  %450 = getelementptr i16, i16* %377, i64 %449
  %451 = getelementptr i32, i32* %375, i64 %449
  %452 = bitcast i16* %450 to <4 x i16>*
  %453 = load <4 x i16>, <4 x i16>* %452, align 2, !alias.scope !72
  %454 = getelementptr i16, i16* %450, i64 4
  %455 = bitcast i16* %454 to <4 x i16>*
  %456 = load <4 x i16>, <4 x i16>* %455, align 2, !alias.scope !72
  %457 = sext <4 x i16> %453 to <4 x i32>
  %458 = sext <4 x i16> %456 to <4 x i32>
  %459 = bitcast i32* %451 to <4 x i32>*
  store <4 x i32> %457, <4 x i32>* %459, align 4, !alias.scope !75, !noalias !72
  %460 = getelementptr i32, i32* %451, i64 4
  %461 = bitcast i32* %460 to <4 x i32>*
  store <4 x i32> %458, <4 x i32>* %461, align 4, !alias.scope !75, !noalias !72
  %462 = add i64 %435, 16
  %463 = add i64 %436, -2
  %464 = icmp eq i64 %463, 0
  br i1 %464, label %465, label %434, !llvm.loop !77

465:                                              ; preds = %434, %423
  %466 = phi i64 [ 0, %423 ], [ %462, %434 ]
  %467 = icmp eq i64 %430, 0
  br i1 %467, label %481, label %468

468:                                              ; preds = %465
  %469 = getelementptr i16, i16* %377, i64 %466
  %470 = getelementptr i32, i32* %375, i64 %466
  %471 = bitcast i16* %469 to <4 x i16>*
  %472 = load <4 x i16>, <4 x i16>* %471, align 2, !alias.scope !72
  %473 = getelementptr i16, i16* %469, i64 4
  %474 = bitcast i16* %473 to <4 x i16>*
  %475 = load <4 x i16>, <4 x i16>* %474, align 2, !alias.scope !72
  %476 = sext <4 x i16> %472 to <4 x i32>
  %477 = sext <4 x i16> %475 to <4 x i32>
  %478 = bitcast i32* %470 to <4 x i32>*
  store <4 x i32> %476, <4 x i32>* %478, align 4, !alias.scope !75, !noalias !72
  %479 = getelementptr i32, i32* %470, i64 4
  %480 = bitcast i32* %479 to <4 x i32>*
  store <4 x i32> %477, <4 x i32>* %480, align 4, !alias.scope !75, !noalias !72
  br label %481

481:                                              ; preds = %465, %468
  %482 = icmp eq i64 %384, %424
  br i1 %482, label %660, label %386

483:                                              ; preds = %373
  br i1 %381, label %484, label %660

484:                                              ; preds = %483
  %485 = mul nsw i64 %84, %78
  %486 = icmp ult i64 %485, 8
  br i1 %486, label %487, label %514

487:                                              ; preds = %582, %514, %484
  %488 = phi i16* [ %377, %514 ], [ %377, %484 ], [ %526, %582 ]
  %489 = phi i32* [ %375, %514 ], [ %375, %484 ], [ %527, %582 ]
  %490 = phi i64 [ 0, %514 ], [ 0, %484 ], [ %525, %582 ]
  %491 = mul nsw i64 %84, %78
  %492 = xor i64 %490, -1
  %493 = add i64 %491, %492
  %494 = and i64 %491, 7
  %495 = icmp eq i64 %494, 0
  br i1 %495, label %508, label %496

496:                                              ; preds = %487, %496
  %497 = phi i16* [ %501, %496 ], [ %488, %487 ]
  %498 = phi i32* [ %504, %496 ], [ %489, %487 ]
  %499 = phi i64 [ %505, %496 ], [ %490, %487 ]
  %500 = phi i64 [ %506, %496 ], [ %494, %487 ]
  %501 = getelementptr inbounds i16, i16* %497, i64 1
  %502 = load i16, i16* %497, align 2
  %503 = zext i16 %502 to i32
  %504 = getelementptr inbounds i32, i32* %498, i64 1
  store i32 %503, i32* %498, align 4
  %505 = add nuw i64 %499, 1
  %506 = add i64 %500, -1
  %507 = icmp eq i64 %506, 0
  br i1 %507, label %508, label %496, !llvm.loop !78

508:                                              ; preds = %496, %487
  %509 = phi i16* [ undef, %487 ], [ %501, %496 ]
  %510 = phi i16* [ %488, %487 ], [ %501, %496 ]
  %511 = phi i32* [ %489, %487 ], [ %504, %496 ]
  %512 = phi i64 [ %490, %487 ], [ %505, %496 ]
  %513 = icmp ult i64 %493, 7
  br i1 %513, label %660, label %622

514:                                              ; preds = %484
  %515 = mul nsw i64 %84, %78
  %516 = getelementptr i32, i32* %375, i64 %515
  %517 = bitcast i32* %516 to i8*
  %518 = shl nsw i64 %84, 1
  %519 = mul i64 %518, %78
  %520 = getelementptr i8, i8* %68, i64 %519
  %521 = icmp ugt i8* %520, %376
  %522 = icmp ult i8* %68, %517
  %523 = and i1 %521, %522
  br i1 %523, label %487, label %524

524:                                              ; preds = %514
  %525 = and i64 %485, -8
  %526 = getelementptr i16, i16* %377, i64 %525
  %527 = getelementptr i32, i32* %375, i64 %525
  %528 = add i64 %525, -8
  %529 = lshr exact i64 %528, 3
  %530 = add nuw nsw i64 %529, 1
  %531 = and i64 %530, 1
  %532 = icmp eq i64 %528, 0
  br i1 %532, label %566, label %533

533:                                              ; preds = %524
  %534 = sub nuw nsw i64 %530, %531
  br label %535

535:                                              ; preds = %535, %533
  %536 = phi i64 [ 0, %533 ], [ %563, %535 ]
  %537 = phi i64 [ %534, %533 ], [ %564, %535 ]
  %538 = getelementptr i16, i16* %377, i64 %536
  %539 = getelementptr i32, i32* %375, i64 %536
  %540 = bitcast i16* %538 to <4 x i16>*
  %541 = load <4 x i16>, <4 x i16>* %540, align 2, !alias.scope !79
  %542 = getelementptr i16, i16* %538, i64 4
  %543 = bitcast i16* %542 to <4 x i16>*
  %544 = load <4 x i16>, <4 x i16>* %543, align 2, !alias.scope !79
  %545 = zext <4 x i16> %541 to <4 x i32>
  %546 = zext <4 x i16> %544 to <4 x i32>
  %547 = bitcast i32* %539 to <4 x i32>*
  store <4 x i32> %545, <4 x i32>* %547, align 4, !alias.scope !82, !noalias !79
  %548 = getelementptr i32, i32* %539, i64 4
  %549 = bitcast i32* %548 to <4 x i32>*
  store <4 x i32> %546, <4 x i32>* %549, align 4, !alias.scope !82, !noalias !79
  %550 = or i64 %536, 8
  %551 = getelementptr i16, i16* %377, i64 %550
  %552 = getelementptr i32, i32* %375, i64 %550
  %553 = bitcast i16* %551 to <4 x i16>*
  %554 = load <4 x i16>, <4 x i16>* %553, align 2, !alias.scope !79
  %555 = getelementptr i16, i16* %551, i64 4
  %556 = bitcast i16* %555 to <4 x i16>*
  %557 = load <4 x i16>, <4 x i16>* %556, align 2, !alias.scope !79
  %558 = zext <4 x i16> %554 to <4 x i32>
  %559 = zext <4 x i16> %557 to <4 x i32>
  %560 = bitcast i32* %552 to <4 x i32>*
  store <4 x i32> %558, <4 x i32>* %560, align 4, !alias.scope !82, !noalias !79
  %561 = getelementptr i32, i32* %552, i64 4
  %562 = bitcast i32* %561 to <4 x i32>*
  store <4 x i32> %559, <4 x i32>* %562, align 4, !alias.scope !82, !noalias !79
  %563 = add i64 %536, 16
  %564 = add i64 %537, -2
  %565 = icmp eq i64 %564, 0
  br i1 %565, label %566, label %535, !llvm.loop !84

566:                                              ; preds = %535, %524
  %567 = phi i64 [ 0, %524 ], [ %563, %535 ]
  %568 = icmp eq i64 %531, 0
  br i1 %568, label %582, label %569

569:                                              ; preds = %566
  %570 = getelementptr i16, i16* %377, i64 %567
  %571 = getelementptr i32, i32* %375, i64 %567
  %572 = bitcast i16* %570 to <4 x i16>*
  %573 = load <4 x i16>, <4 x i16>* %572, align 2, !alias.scope !79
  %574 = getelementptr i16, i16* %570, i64 4
  %575 = bitcast i16* %574 to <4 x i16>*
  %576 = load <4 x i16>, <4 x i16>* %575, align 2, !alias.scope !79
  %577 = zext <4 x i16> %573 to <4 x i32>
  %578 = zext <4 x i16> %576 to <4 x i32>
  %579 = bitcast i32* %571 to <4 x i32>*
  store <4 x i32> %577, <4 x i32>* %579, align 4, !alias.scope !82, !noalias !79
  %580 = getelementptr i32, i32* %571, i64 4
  %581 = bitcast i32* %580 to <4 x i32>*
  store <4 x i32> %578, <4 x i32>* %581, align 4, !alias.scope !82, !noalias !79
  br label %582

582:                                              ; preds = %566, %569
  %583 = icmp eq i64 %485, %525
  br i1 %583, label %660, label %487

584:                                              ; preds = %407, %584
  %585 = phi i16* [ %616, %584 ], [ %409, %407 ]
  %586 = phi i32* [ %619, %584 ], [ %410, %407 ]
  %587 = phi i64 [ %620, %584 ], [ %411, %407 ]
  %588 = getelementptr inbounds i16, i16* %585, i64 1
  %589 = load i16, i16* %585, align 2
  %590 = sext i16 %589 to i32
  %591 = getelementptr inbounds i32, i32* %586, i64 1
  store i32 %590, i32* %586, align 4
  %592 = getelementptr inbounds i16, i16* %585, i64 2
  %593 = load i16, i16* %588, align 2
  %594 = sext i16 %593 to i32
  %595 = getelementptr inbounds i32, i32* %586, i64 2
  store i32 %594, i32* %591, align 4
  %596 = getelementptr inbounds i16, i16* %585, i64 3
  %597 = load i16, i16* %592, align 2
  %598 = sext i16 %597 to i32
  %599 = getelementptr inbounds i32, i32* %586, i64 3
  store i32 %598, i32* %595, align 4
  %600 = getelementptr inbounds i16, i16* %585, i64 4
  %601 = load i16, i16* %596, align 2
  %602 = sext i16 %601 to i32
  %603 = getelementptr inbounds i32, i32* %586, i64 4
  store i32 %602, i32* %599, align 4
  %604 = getelementptr inbounds i16, i16* %585, i64 5
  %605 = load i16, i16* %600, align 2
  %606 = sext i16 %605 to i32
  %607 = getelementptr inbounds i32, i32* %586, i64 5
  store i32 %606, i32* %603, align 4
  %608 = getelementptr inbounds i16, i16* %585, i64 6
  %609 = load i16, i16* %604, align 2
  %610 = sext i16 %609 to i32
  %611 = getelementptr inbounds i32, i32* %586, i64 6
  store i32 %610, i32* %607, align 4
  %612 = getelementptr inbounds i16, i16* %585, i64 7
  %613 = load i16, i16* %608, align 2
  %614 = sext i16 %613 to i32
  %615 = getelementptr inbounds i32, i32* %586, i64 7
  store i32 %614, i32* %611, align 4
  %616 = getelementptr inbounds i16, i16* %585, i64 8
  %617 = load i16, i16* %612, align 2
  %618 = sext i16 %617 to i32
  %619 = getelementptr inbounds i32, i32* %586, i64 8
  store i32 %618, i32* %615, align 4
  %620 = add nuw i64 %587, 8
  %621 = icmp eq i64 %620, %85
  br i1 %621, label %660, label %584, !llvm.loop !85

622:                                              ; preds = %508, %622
  %623 = phi i16* [ %654, %622 ], [ %510, %508 ]
  %624 = phi i32* [ %657, %622 ], [ %511, %508 ]
  %625 = phi i64 [ %658, %622 ], [ %512, %508 ]
  %626 = getelementptr inbounds i16, i16* %623, i64 1
  %627 = load i16, i16* %623, align 2
  %628 = zext i16 %627 to i32
  %629 = getelementptr inbounds i32, i32* %624, i64 1
  store i32 %628, i32* %624, align 4
  %630 = getelementptr inbounds i16, i16* %623, i64 2
  %631 = load i16, i16* %626, align 2
  %632 = zext i16 %631 to i32
  %633 = getelementptr inbounds i32, i32* %624, i64 2
  store i32 %632, i32* %629, align 4
  %634 = getelementptr inbounds i16, i16* %623, i64 3
  %635 = load i16, i16* %630, align 2
  %636 = zext i16 %635 to i32
  %637 = getelementptr inbounds i32, i32* %624, i64 3
  store i32 %636, i32* %633, align 4
  %638 = getelementptr inbounds i16, i16* %623, i64 4
  %639 = load i16, i16* %634, align 2
  %640 = zext i16 %639 to i32
  %641 = getelementptr inbounds i32, i32* %624, i64 4
  store i32 %640, i32* %637, align 4
  %642 = getelementptr inbounds i16, i16* %623, i64 5
  %643 = load i16, i16* %638, align 2
  %644 = zext i16 %643 to i32
  %645 = getelementptr inbounds i32, i32* %624, i64 5
  store i32 %644, i32* %641, align 4
  %646 = getelementptr inbounds i16, i16* %623, i64 6
  %647 = load i16, i16* %642, align 2
  %648 = zext i16 %647 to i32
  %649 = getelementptr inbounds i32, i32* %624, i64 6
  store i32 %648, i32* %645, align 4
  %650 = getelementptr inbounds i16, i16* %623, i64 7
  %651 = load i16, i16* %646, align 2
  %652 = zext i16 %651 to i32
  %653 = getelementptr inbounds i32, i32* %624, i64 7
  store i32 %652, i32* %649, align 4
  %654 = getelementptr inbounds i16, i16* %623, i64 8
  %655 = load i16, i16* %650, align 2
  %656 = zext i16 %655 to i32
  %657 = getelementptr inbounds i32, i32* %624, i64 8
  store i32 %656, i32* %653, align 4
  %658 = add nuw i64 %625, 8
  %659 = icmp eq i64 %658, %85
  br i1 %659, label %660, label %622, !llvm.loop !86

660:                                              ; preds = %407, %584, %508, %622, %481, %582, %382, %483
  %661 = phi i16* [ %377, %483 ], [ %377, %382 ], [ %526, %582 ], [ %425, %481 ], [ %509, %508 ], [ %654, %622 ], [ %408, %407 ], [ %616, %584 ]
  %662 = bitcast i16* %661 to i8*
  br label %822

663:                                              ; preds = %64
  %664 = bitcast i8* %68 to i32*
  %665 = icmp eq i64 %85, 0
  br i1 %665, label %819, label %666

666:                                              ; preds = %663
  %667 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %65, i64 0, i32 9
  %668 = load i32*, i32** %667, align 8
  %669 = mul nsw i64 %84, %78
  %670 = icmp ult i64 %669, 8
  br i1 %670, label %763, label %671

671:                                              ; preds = %666
  %672 = bitcast i32* %668 to i8*
  %673 = mul nsw i64 %84, %78
  %674 = getelementptr i32, i32* %668, i64 %673
  %675 = bitcast i32* %674 to i8*
  %676 = shl nsw i64 %84, 2
  %677 = mul i64 %676, %78
  %678 = getelementptr i8, i8* %68, i64 %677
  %679 = icmp ugt i8* %678, %672
  %680 = icmp ult i8* %68, %675
  %681 = and i1 %679, %680
  br i1 %681, label %763, label %682

682:                                              ; preds = %671
  %683 = and i64 %669, -8
  %684 = getelementptr i32, i32* %668, i64 %683
  %685 = getelementptr i32, i32* %664, i64 %683
  %686 = add i64 %683, -8
  %687 = lshr exact i64 %686, 3
  %688 = add nuw nsw i64 %687, 1
  %689 = and i64 %688, 3
  %690 = icmp ult i64 %686, 24
  br i1 %690, label %742, label %691

691:                                              ; preds = %682
  %692 = sub nsw i64 %688, %689
  br label %693

693:                                              ; preds = %693, %691
  %694 = phi i64 [ 0, %691 ], [ %739, %693 ]
  %695 = phi i64 [ %692, %691 ], [ %740, %693 ]
  %696 = getelementptr i32, i32* %668, i64 %694
  %697 = getelementptr i32, i32* %664, i64 %694
  %698 = bitcast i32* %697 to <4 x i32>*
  %699 = load <4 x i32>, <4 x i32>* %698, align 4, !alias.scope !87
  %700 = getelementptr i32, i32* %697, i64 4
  %701 = bitcast i32* %700 to <4 x i32>*
  %702 = load <4 x i32>, <4 x i32>* %701, align 4, !alias.scope !87
  %703 = bitcast i32* %696 to <4 x i32>*
  store <4 x i32> %699, <4 x i32>* %703, align 4, !alias.scope !90, !noalias !87
  %704 = getelementptr i32, i32* %696, i64 4
  %705 = bitcast i32* %704 to <4 x i32>*
  store <4 x i32> %702, <4 x i32>* %705, align 4, !alias.scope !90, !noalias !87
  %706 = or i64 %694, 8
  %707 = getelementptr i32, i32* %668, i64 %706
  %708 = getelementptr i32, i32* %664, i64 %706
  %709 = bitcast i32* %708 to <4 x i32>*
  %710 = load <4 x i32>, <4 x i32>* %709, align 4, !alias.scope !87
  %711 = getelementptr i32, i32* %708, i64 4
  %712 = bitcast i32* %711 to <4 x i32>*
  %713 = load <4 x i32>, <4 x i32>* %712, align 4, !alias.scope !87
  %714 = bitcast i32* %707 to <4 x i32>*
  store <4 x i32> %710, <4 x i32>* %714, align 4, !alias.scope !90, !noalias !87
  %715 = getelementptr i32, i32* %707, i64 4
  %716 = bitcast i32* %715 to <4 x i32>*
  store <4 x i32> %713, <4 x i32>* %716, align 4, !alias.scope !90, !noalias !87
  %717 = or i64 %694, 16
  %718 = getelementptr i32, i32* %668, i64 %717
  %719 = getelementptr i32, i32* %664, i64 %717
  %720 = bitcast i32* %719 to <4 x i32>*
  %721 = load <4 x i32>, <4 x i32>* %720, align 4, !alias.scope !87
  %722 = getelementptr i32, i32* %719, i64 4
  %723 = bitcast i32* %722 to <4 x i32>*
  %724 = load <4 x i32>, <4 x i32>* %723, align 4, !alias.scope !87
  %725 = bitcast i32* %718 to <4 x i32>*
  store <4 x i32> %721, <4 x i32>* %725, align 4, !alias.scope !90, !noalias !87
  %726 = getelementptr i32, i32* %718, i64 4
  %727 = bitcast i32* %726 to <4 x i32>*
  store <4 x i32> %724, <4 x i32>* %727, align 4, !alias.scope !90, !noalias !87
  %728 = or i64 %694, 24
  %729 = getelementptr i32, i32* %668, i64 %728
  %730 = getelementptr i32, i32* %664, i64 %728
  %731 = bitcast i32* %730 to <4 x i32>*
  %732 = load <4 x i32>, <4 x i32>* %731, align 4, !alias.scope !87
  %733 = getelementptr i32, i32* %730, i64 4
  %734 = bitcast i32* %733 to <4 x i32>*
  %735 = load <4 x i32>, <4 x i32>* %734, align 4, !alias.scope !87
  %736 = bitcast i32* %729 to <4 x i32>*
  store <4 x i32> %732, <4 x i32>* %736, align 4, !alias.scope !90, !noalias !87
  %737 = getelementptr i32, i32* %729, i64 4
  %738 = bitcast i32* %737 to <4 x i32>*
  store <4 x i32> %735, <4 x i32>* %738, align 4, !alias.scope !90, !noalias !87
  %739 = add i64 %694, 32
  %740 = add i64 %695, -4
  %741 = icmp eq i64 %740, 0
  br i1 %741, label %742, label %693, !llvm.loop !92

742:                                              ; preds = %693, %682
  %743 = phi i64 [ 0, %682 ], [ %739, %693 ]
  %744 = icmp eq i64 %689, 0
  br i1 %744, label %761, label %745

745:                                              ; preds = %742, %745
  %746 = phi i64 [ %758, %745 ], [ %743, %742 ]
  %747 = phi i64 [ %759, %745 ], [ %689, %742 ]
  %748 = getelementptr i32, i32* %668, i64 %746
  %749 = getelementptr i32, i32* %664, i64 %746
  %750 = bitcast i32* %749 to <4 x i32>*
  %751 = load <4 x i32>, <4 x i32>* %750, align 4, !alias.scope !87
  %752 = getelementptr i32, i32* %749, i64 4
  %753 = bitcast i32* %752 to <4 x i32>*
  %754 = load <4 x i32>, <4 x i32>* %753, align 4, !alias.scope !87
  %755 = bitcast i32* %748 to <4 x i32>*
  store <4 x i32> %751, <4 x i32>* %755, align 4, !alias.scope !90, !noalias !87
  %756 = getelementptr i32, i32* %748, i64 4
  %757 = bitcast i32* %756 to <4 x i32>*
  store <4 x i32> %754, <4 x i32>* %757, align 4, !alias.scope !90, !noalias !87
  %758 = add i64 %746, 8
  %759 = add i64 %747, -1
  %760 = icmp eq i64 %759, 0
  br i1 %760, label %761, label %745, !llvm.loop !93

761:                                              ; preds = %745, %742
  %762 = icmp eq i64 %669, %683
  br i1 %762, label %819, label %763

763:                                              ; preds = %761, %671, %666
  %764 = phi i32* [ %668, %671 ], [ %668, %666 ], [ %684, %761 ]
  %765 = phi i32* [ %664, %671 ], [ %664, %666 ], [ %685, %761 ]
  %766 = phi i64 [ 0, %671 ], [ 0, %666 ], [ %683, %761 ]
  %767 = mul nsw i64 %84, %78
  %768 = xor i64 %766, -1
  %769 = add i64 %767, %768
  %770 = and i64 %767, 7
  %771 = icmp eq i64 %770, 0
  br i1 %771, label %783, label %772

772:                                              ; preds = %763, %772
  %773 = phi i32* [ %779, %772 ], [ %764, %763 ]
  %774 = phi i32* [ %777, %772 ], [ %765, %763 ]
  %775 = phi i64 [ %780, %772 ], [ %766, %763 ]
  %776 = phi i64 [ %781, %772 ], [ %770, %763 ]
  %777 = getelementptr inbounds i32, i32* %774, i64 1
  %778 = load i32, i32* %774, align 4
  %779 = getelementptr inbounds i32, i32* %773, i64 1
  store i32 %778, i32* %773, align 4
  %780 = add nuw i64 %775, 1
  %781 = add i64 %776, -1
  %782 = icmp eq i64 %781, 0
  br i1 %782, label %783, label %772, !llvm.loop !94

783:                                              ; preds = %772, %763
  %784 = phi i32* [ undef, %763 ], [ %777, %772 ]
  %785 = phi i32* [ %764, %763 ], [ %779, %772 ]
  %786 = phi i32* [ %765, %763 ], [ %777, %772 ]
  %787 = phi i64 [ %766, %763 ], [ %780, %772 ]
  %788 = icmp ult i64 %769, 7
  br i1 %788, label %819, label %789

789:                                              ; preds = %783, %789
  %790 = phi i32* [ %816, %789 ], [ %785, %783 ]
  %791 = phi i32* [ %814, %789 ], [ %786, %783 ]
  %792 = phi i64 [ %817, %789 ], [ %787, %783 ]
  %793 = getelementptr inbounds i32, i32* %791, i64 1
  %794 = load i32, i32* %791, align 4
  %795 = getelementptr inbounds i32, i32* %790, i64 1
  store i32 %794, i32* %790, align 4
  %796 = getelementptr inbounds i32, i32* %791, i64 2
  %797 = load i32, i32* %793, align 4
  %798 = getelementptr inbounds i32, i32* %790, i64 2
  store i32 %797, i32* %795, align 4
  %799 = getelementptr inbounds i32, i32* %791, i64 3
  %800 = load i32, i32* %796, align 4
  %801 = getelementptr inbounds i32, i32* %790, i64 3
  store i32 %800, i32* %798, align 4
  %802 = getelementptr inbounds i32, i32* %791, i64 4
  %803 = load i32, i32* %799, align 4
  %804 = getelementptr inbounds i32, i32* %790, i64 4
  store i32 %803, i32* %801, align 4
  %805 = getelementptr inbounds i32, i32* %791, i64 5
  %806 = load i32, i32* %802, align 4
  %807 = getelementptr inbounds i32, i32* %790, i64 5
  store i32 %806, i32* %804, align 4
  %808 = getelementptr inbounds i32, i32* %791, i64 6
  %809 = load i32, i32* %805, align 4
  %810 = getelementptr inbounds i32, i32* %790, i64 6
  store i32 %809, i32* %807, align 4
  %811 = getelementptr inbounds i32, i32* %791, i64 7
  %812 = load i32, i32* %808, align 4
  %813 = getelementptr inbounds i32, i32* %790, i64 7
  store i32 %812, i32* %810, align 4
  %814 = getelementptr inbounds i32, i32* %791, i64 8
  %815 = load i32, i32* %811, align 4
  %816 = getelementptr inbounds i32, i32* %790, i64 8
  store i32 %815, i32* %813, align 4
  %817 = add nuw i64 %792, 8
  %818 = icmp eq i64 %817, %85
  br i1 %818, label %819, label %789, !llvm.loop !95

819:                                              ; preds = %783, %789, %761, %663
  %820 = phi i32* [ %664, %663 ], [ %685, %761 ], [ %784, %783 ], [ %814, %789 ]
  %821 = bitcast i32* %820 to i8*
  br label %822

822:                                              ; preds = %124, %297, %223, %335, %196, %295, %99, %198, %64, %819, %660
  %823 = phi i8* [ %68, %64 ], [ %821, %819 ], [ %662, %660 ], [ %68, %198 ], [ %68, %99 ], [ %240, %295 ], [ %141, %196 ], [ %224, %223 ], [ %367, %335 ], [ %125, %124 ], [ %329, %297 ]
  %824 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %66, i64 1
  %825 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %65, i64 1
  %826 = add nuw i32 %67, 1
  %827 = load %struct.opj_image*, %struct.opj_image** %4, align 8
  %828 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %827, i64 0, i32 4
  %829 = load i32, i32* %828, align 8
  %830 = icmp ult i32 %826, %829
  br i1 %830, label %64, label %831

831:                                              ; preds = %822, %49
  %832 = phi i32 [ %54, %49 ], [ 1, %822 ]
  ret i32 %832
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @opj_tcd_is_subband_area_of_interest(%struct.opj_tcd* nocapture readonly, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #4 {
  %9 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 8
  %10 = load %struct.opj_tcp*, %struct.opj_tcp** %9, align 8
  %11 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %10, i64 0, i32 15
  %12 = load %struct.opj_tccp*, %struct.opj_tccp** %11, align 8
  %13 = zext i32 %1 to i64
  %14 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %12, i64 %13, i32 5
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 1
  %17 = select i1 %16, i32 2, i32 3
  %18 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 5
  %19 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %18, align 8
  %20 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %19, i64 0, i32 0
  %21 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %20, align 8
  %22 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %21, i64 0, i32 5
  %23 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %22, align 8
  %24 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  %25 = load %struct.opj_image*, %struct.opj_image** %24, align 8
  %26 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %25, i64 0, i32 6
  %27 = load %struct.opj_image_comp*, %struct.opj_image_comp** %26, align 8
  %28 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %23, i64 %13, i32 0
  %29 = load i32, i32* %28, align 8
  %30 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 12
  %31 = load i32, i32* %30, align 8
  %32 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %27, i64 %13, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = zext i32 %31 to i64
  %35 = zext i32 %33 to i64
  %36 = add nsw i64 %35, -1
  %37 = add nsw i64 %36, %34
  %38 = udiv i64 %37, %35
  %39 = trunc i64 %38 to i32
  %40 = icmp ugt i32 %29, %39
  %41 = select i1 %40, i32 %29, i32 %39
  %42 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %23, i64 %13, i32 1
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 13
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %27, i64 %13, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = zext i32 %45 to i64
  %49 = zext i32 %47 to i64
  %50 = add nsw i64 %49, -1
  %51 = add nsw i64 %50, %48
  %52 = udiv i64 %51, %49
  %53 = trunc i64 %52 to i32
  %54 = icmp ugt i32 %43, %53
  %55 = select i1 %54, i32 %43, i32 %53
  %56 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %23, i64 %13, i32 2
  %57 = load i32, i32* %56, align 8
  %58 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 14
  %59 = load i32, i32* %58, align 8
  %60 = zext i32 %59 to i64
  %61 = add nsw i64 %36, %60
  %62 = udiv i64 %61, %35
  %63 = trunc i64 %62 to i32
  %64 = icmp ult i32 %57, %63
  %65 = select i1 %64, i32 %57, i32 %63
  %66 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %23, i64 %13, i32 3
  %67 = load i32, i32* %66, align 4
  %68 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 15
  %69 = load i32, i32* %68, align 4
  %70 = zext i32 %69 to i64
  %71 = add nsw i64 %50, %70
  %72 = udiv i64 %71, %49
  %73 = trunc i64 %72 to i32
  %74 = icmp ult i32 %67, %73
  %75 = select i1 %74, i32 %67, i32 %73
  %76 = icmp eq i32 %2, 0
  %77 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %23, i64 %13, i32 5
  %78 = load i32, i32* %77, align 4
  %79 = sub i32 0, %2
  %80 = select i1 %76, i32 -1, i32 %79
  %81 = add i32 %78, %80
  %82 = lshr i32 %3, 1
  %83 = icmp eq i32 %81, 0
  br i1 %83, label %135, label %84

84:                                               ; preds = %8
  %85 = and i32 %3, 1
  %86 = add i32 %81, -1
  %87 = shl i32 %85, %86
  %88 = icmp ugt i32 %41, %87
  br i1 %88, label %89, label %98

89:                                               ; preds = %84
  %90 = sub i32 %41, %87
  %91 = zext i32 %90 to i64
  %92 = zext i32 %81 to i64
  %93 = shl nsw i64 -1, %92
  %94 = xor i64 %93, -1
  %95 = add i64 %94, %91
  %96 = lshr i64 %95, %92
  %97 = trunc i64 %96 to i32
  br label %98

98:                                               ; preds = %84, %89
  %99 = phi i32 [ 0, %84 ], [ %97, %89 ]
  %100 = shl i32 %82, %86
  %101 = icmp ugt i32 %55, %100
  br i1 %101, label %102, label %111

102:                                              ; preds = %98
  %103 = sub i32 %55, %100
  %104 = zext i32 %103 to i64
  %105 = zext i32 %81 to i64
  %106 = shl nsw i64 -1, %105
  %107 = xor i64 %106, -1
  %108 = add i64 %107, %104
  %109 = lshr i64 %108, %105
  %110 = trunc i64 %109 to i32
  br label %111

111:                                              ; preds = %98, %102
  %112 = phi i32 [ 0, %98 ], [ %110, %102 ]
  %113 = icmp ugt i32 %65, %87
  br i1 %113, label %114, label %123

114:                                              ; preds = %111
  %115 = sub i32 %65, %87
  %116 = zext i32 %115 to i64
  %117 = zext i32 %81 to i64
  %118 = shl nsw i64 -1, %117
  %119 = xor i64 %118, -1
  %120 = add i64 %119, %116
  %121 = lshr i64 %120, %117
  %122 = trunc i64 %121 to i32
  br label %123

123:                                              ; preds = %111, %114
  %124 = phi i32 [ 0, %111 ], [ %122, %114 ]
  %125 = icmp ugt i32 %75, %100
  br i1 %125, label %126, label %135

126:                                              ; preds = %123
  %127 = sub i32 %75, %100
  %128 = zext i32 %127 to i64
  %129 = zext i32 %81 to i64
  %130 = shl nsw i64 -1, %129
  %131 = xor i64 %130, -1
  %132 = add i64 %131, %128
  %133 = lshr i64 %132, %129
  %134 = trunc i64 %133 to i32
  br label %135

135:                                              ; preds = %8, %123, %126
  %136 = phi i32 [ %124, %126 ], [ %124, %123 ], [ %65, %8 ]
  %137 = phi i32 [ %99, %126 ], [ %99, %123 ], [ %41, %8 ]
  %138 = phi i32 [ %112, %126 ], [ %112, %123 ], [ %55, %8 ]
  %139 = phi i32 [ %134, %126 ], [ 0, %123 ], [ %75, %8 ]
  %140 = tail call i32 @llvm.usub.sat.i32(i32 %137, i32 %17)
  %141 = tail call i32 @llvm.usub.sat.i32(i32 %138, i32 %17)
  %142 = zext i32 %136 to i64
  %143 = zext i32 %17 to i64
  %144 = add nuw nsw i64 %142, %143
  %145 = lshr i64 %144, 32
  %146 = trunc i64 %145 to i32
  %147 = sub nsw i32 0, %146
  %148 = trunc i64 %144 to i32
  %149 = or i32 %147, %148
  %150 = zext i32 %139 to i64
  %151 = add nuw nsw i64 %150, %143
  %152 = lshr i64 %151, 32
  %153 = trunc i64 %152 to i32
  %154 = sub nsw i32 0, %153
  %155 = trunc i64 %151 to i32
  %156 = or i32 %154, %155
  %157 = icmp ugt i32 %149, %4
  %158 = icmp ugt i32 %156, %5
  %159 = and i1 %157, %158
  %160 = icmp ult i32 %140, %6
  %161 = and i1 %160, %159
  %162 = icmp ult i32 %141, %7
  %163 = and i1 %162, %161
  %164 = zext i1 %163 to i32
  ret i32 %164
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.opj_tcd_marker_info* @opj_tcd_marker_info_create(i32) local_unnamed_addr #0 {
  %2 = tail call i8* @opj_calloc(i64 1, i64 16) #9
  %3 = icmp eq i8* %2, null
  br i1 %3, label %7, label %4

4:                                                ; preds = %1
  %5 = bitcast i8* %2 to %struct.opj_tcd_marker_info*
  %6 = bitcast i8* %2 to i32*
  store i32 %0, i32* %6, align 8
  br label %7

7:                                                ; preds = %1, %4
  %8 = phi %struct.opj_tcd_marker_info* [ %5, %4 ], [ null, %1 ]
  ret %struct.opj_tcd_marker_info* %8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @opj_tcd_marker_info_destroy(%struct.opj_tcd_marker_info*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.opj_tcd_marker_info* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.opj_tcd_marker_info, %struct.opj_tcd_marker_info* %0, i64 0, i32 2
  %5 = bitcast i32** %4 to i8**
  %6 = load i8*, i8** %5, align 8
  tail call void @opj_free(i8* %6) #9
  %7 = bitcast %struct.opj_tcd_marker_info* %0 to i8*
  tail call void @opj_free(i8* nonnull %7) #9
  br label %8

8:                                                ; preds = %1, %3
  ret void
}

declare i8* @opj_realloc(i8*, i64) local_unnamed_addr #2

declare %struct.opj_tgt_tree* @opj_tgt_create(i32, i32, %struct.opj_event_mgr*) local_unnamed_addr #2

declare %struct.opj_tgt_tree* @opj_tgt_init(%struct.opj_tgt_tree*, i32, i32, %struct.opj_event_mgr*) local_unnamed_addr #2

declare void @opj_aligned_free(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @opj_tcd_code_block_dec_deallocate(%struct.opj_tcd_precinct* nocapture) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %0, i64 0, i32 6
  %3 = bitcast %union.anon* %2 to %struct.opj_tcd_cblk_dec**
  %4 = load %struct.opj_tcd_cblk_dec*, %struct.opj_tcd_cblk_dec** %3, align 8
  %5 = icmp eq %struct.opj_tcd_cblk_dec* %4, null
  br i1 %5, label %38, label %6

6:                                                ; preds = %1
  %7 = bitcast %struct.opj_tcd_cblk_dec* %4 to i8*
  %8 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %0, i64 0, i32 7
  %9 = load i32, i32* %8, align 8
  %10 = udiv i32 %9, 72
  %11 = icmp ugt i32 %9, 71
  br i1 %11, label %12, label %36

12:                                               ; preds = %6, %26
  %13 = phi %struct.opj_tcd_cblk_dec* [ %30, %26 ], [ %4, %6 ]
  %14 = phi i32 [ %31, %26 ], [ 0, %6 ]
  %15 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %13, i64 0, i32 0
  %16 = load %struct.opj_tcd_seg*, %struct.opj_tcd_seg** %15, align 8
  %17 = icmp eq %struct.opj_tcd_seg* %16, null
  br i1 %17, label %20, label %18

18:                                               ; preds = %12
  %19 = bitcast %struct.opj_tcd_seg* %16 to i8*
  tail call void @opj_free(i8* nonnull %19) #9
  store %struct.opj_tcd_seg* null, %struct.opj_tcd_seg** %15, align 8
  br label %20

20:                                               ; preds = %12, %18
  %21 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %13, i64 0, i32 1
  %22 = load %struct.opj_tcd_seg_data_chunk*, %struct.opj_tcd_seg_data_chunk** %21, align 8
  %23 = icmp eq %struct.opj_tcd_seg_data_chunk* %22, null
  br i1 %23, label %26, label %24

24:                                               ; preds = %20
  %25 = bitcast %struct.opj_tcd_seg_data_chunk* %22 to i8*
  tail call void @opj_free(i8* nonnull %25) #9
  store %struct.opj_tcd_seg_data_chunk* null, %struct.opj_tcd_seg_data_chunk** %21, align 8
  br label %26

26:                                               ; preds = %20, %24
  %27 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %13, i64 0, i32 14
  %28 = bitcast i32** %27 to i8**
  %29 = load i8*, i8** %28, align 8
  tail call void @opj_aligned_free(i8* %29) #9
  store i32* null, i32** %27, align 8
  %30 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %13, i64 1
  %31 = add nuw nsw i32 %14, 1
  %32 = icmp ult i32 %31, %10
  br i1 %32, label %12, label %33

33:                                               ; preds = %26
  %34 = bitcast %union.anon* %2 to i8**
  %35 = load i8*, i8** %34, align 8
  br label %36

36:                                               ; preds = %6, %33
  %37 = phi i8* [ %35, %33 ], [ %7, %6 ]
  tail call void @opj_free(i8* %37) #9
  store %struct.opj_tcd_cblk_dec* null, %struct.opj_tcd_cblk_dec** %3, align 8
  br label %38

38:                                               ; preds = %1, %36
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @opj_tcd_code_block_enc_deallocate(%struct.opj_tcd_precinct* nocapture) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %0, i64 0, i32 6, i32 0
  %3 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %2, align 8
  %4 = icmp eq %struct.opj_tcd_cblk_enc* %3, null
  br i1 %4, label %40, label %5

5:                                                ; preds = %1
  %6 = bitcast %struct.opj_tcd_cblk_enc* %3 to i8*
  %7 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %0, i64 0, i32 7
  %8 = load i32, i32* %7, align 8
  %9 = lshr i32 %8, 6
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %38, label %11

11:                                               ; preds = %5, %31
  %12 = phi %struct.opj_tcd_cblk_enc* [ %32, %31 ], [ %3, %5 ]
  %13 = phi i32 [ %33, %31 ], [ 0, %5 ]
  %14 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %12, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %19, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds i8, i8* %15, i64 -1
  tail call void @opj_free(i8* %18) #9
  store i8* null, i8** %14, align 8
  br label %19

19:                                               ; preds = %11, %17
  %20 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %12, i64 0, i32 1
  %21 = load %struct.opj_tcd_layer*, %struct.opj_tcd_layer** %20, align 8
  %22 = icmp eq %struct.opj_tcd_layer* %21, null
  br i1 %22, label %25, label %23

23:                                               ; preds = %19
  %24 = bitcast %struct.opj_tcd_layer* %21 to i8*
  tail call void @opj_free(i8* nonnull %24) #9
  store %struct.opj_tcd_layer* null, %struct.opj_tcd_layer** %20, align 8
  br label %25

25:                                               ; preds = %19, %23
  %26 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %12, i64 0, i32 2
  %27 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %26, align 8
  %28 = icmp eq %struct.opj_tcd_pass* %27, null
  br i1 %28, label %31, label %29

29:                                               ; preds = %25
  %30 = bitcast %struct.opj_tcd_pass* %27 to i8*
  tail call void @opj_free(i8* nonnull %30) #9
  store %struct.opj_tcd_pass* null, %struct.opj_tcd_pass** %26, align 8
  br label %31

31:                                               ; preds = %25, %29
  %32 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %12, i64 1
  %33 = add nuw nsw i32 %13, 1
  %34 = icmp eq i32 %33, %9
  br i1 %34, label %35, label %11

35:                                               ; preds = %31
  %36 = bitcast %struct.opj_tcd_cblk_enc** %2 to i8**
  %37 = load i8*, i8** %36, align 8
  br label %38

38:                                               ; preds = %5, %35
  %39 = phi i8* [ %37, %35 ], [ %6, %5 ]
  tail call void @opj_free(i8* %39) #9
  store %struct.opj_tcd_cblk_enc* null, %struct.opj_tcd_cblk_enc** %2, align 8
  br label %40

40:                                               ; preds = %1, %38
  ret void
}

declare void @opj_tgt_destroy(%struct.opj_tgt_tree*) local_unnamed_addr #2

declare i32 @opj_t2_decode_packets(%struct.opj_tcd*, %struct.opj_t2*, i32, %struct.opj_tcd_tile*, i8*, i32*, i32, %struct.opj_codestream_index*, %struct.opj_event_mgr*) local_unnamed_addr #2

declare %struct.opj_mutex_t* @opj_mutex_create() local_unnamed_addr #2

declare void @opj_t1_decode_cblks(%struct.opj_tcd*, i32*, %struct.opj_tcd_tilecomp*, %struct.opj_tccp*, %struct.opj_event_mgr*, %struct.opj_mutex_t*, i32) local_unnamed_addr #2

declare void @opj_thread_pool_wait_completion(%struct.opj_thread_pool_t*, i32) local_unnamed_addr #2

declare void @opj_mutex_destroy(%struct.opj_mutex_t*) local_unnamed_addr #2

declare i32 @opj_dwt_decode(%struct.opj_tcd*, %struct.opj_tcd_tilecomp*, i32) local_unnamed_addr #2

declare i32 @opj_dwt_decode_real(%struct.opj_tcd*, %struct.opj_tcd_tilecomp*, i32) local_unnamed_addr #2

declare i32 @opj_mct_decode_custom(i8*, i64, i8**, i32, i32) local_unnamed_addr #2

declare void @opj_mct_decode(i32*, i32*, i32*, i64) local_unnamed_addr #2

declare void @opj_mct_decode_real(float*, float*, float*, i64) local_unnamed_addr #2

; Function Attrs: nounwind
declare i64 @lrintf(float) local_unnamed_addr #7

declare i32 @opj_mct_encode_custom(i8*, i64, i8**, i32, i32) local_unnamed_addr #2

declare void @opj_mct_encode_real(float*, float*, float*, i64) local_unnamed_addr #2

declare void @opj_mct_encode(i32*, i32*, i32*, i64) local_unnamed_addr #2

declare i32 @opj_dwt_encode(%struct.opj_tcd*, %struct.opj_tcd_tilecomp*) local_unnamed_addr #2

declare i32 @opj_dwt_encode_real(%struct.opj_tcd*, %struct.opj_tcd_tilecomp*) local_unnamed_addr #2

declare double* @opj_mct_get_mct_norms_real() local_unnamed_addr #2

declare double* @opj_mct_get_mct_norms() local_unnamed_addr #2

declare i32 @opj_t1_encode_cblks(%struct.opj_tcd*, %struct.opj_tcd_tile*, %struct.opj_tcp*, double*, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #8

declare double @ldexp(double, i32) local_unnamed_addr

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.usub.sat.i32(i32, i32) #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{void (%struct.opj_tcd_precinct*)* @opj_tcd_code_block_dec_deallocate, void (%struct.opj_tcd_precinct*)* @opj_tcd_code_block_enc_deallocate}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !9}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !11}
!15 = !{!16}
!16 = distinct !{!16, !17}
!17 = distinct !{!17, !"LVerDomain"}
!18 = !{!19}
!19 = distinct !{!19, !17}
!20 = distinct !{!20, !9}
!21 = distinct !{!21, !9}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !9}
!28 = distinct !{!28, !11}
!29 = distinct !{!29, !9}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = distinct !{!35, !9}
!36 = distinct !{!36, !11}
!37 = distinct !{!37, !9}
!38 = !{!39}
!39 = distinct !{!39, !40}
!40 = distinct !{!40, !"LVerDomain"}
!41 = !{!42}
!42 = distinct !{!42, !40}
!43 = distinct !{!43, !9}
!44 = distinct !{!44, !11}
!45 = distinct !{!45, !9}
!46 = !{!47}
!47 = distinct !{!47, !48}
!48 = distinct !{!48, !"LVerDomain"}
!49 = !{!50}
!50 = distinct !{!50, !48}
!51 = distinct !{!51, !9}
!52 = distinct !{!52, !11}
!53 = distinct !{!53, !9}
!54 = distinct !{!54, !11}
!55 = distinct !{!55, !11}
!56 = !{!57}
!57 = distinct !{!57, !58}
!58 = distinct !{!58, !"LVerDomain"}
!59 = !{!60}
!60 = distinct !{!60, !58}
!61 = distinct !{!61, !9}
!62 = distinct !{!62, !11}
!63 = !{!64}
!64 = distinct !{!64, !65}
!65 = distinct !{!65, !"LVerDomain"}
!66 = !{!67}
!67 = distinct !{!67, !65}
!68 = distinct !{!68, !9}
!69 = distinct !{!69, !9}
!70 = distinct !{!70, !9}
!71 = distinct !{!71, !11}
!72 = !{!73}
!73 = distinct !{!73, !74}
!74 = distinct !{!74, !"LVerDomain"}
!75 = !{!76}
!76 = distinct !{!76, !74}
!77 = distinct !{!77, !9}
!78 = distinct !{!78, !11}
!79 = !{!80}
!80 = distinct !{!80, !81}
!81 = distinct !{!81, !"LVerDomain"}
!82 = !{!83}
!83 = distinct !{!83, !81}
!84 = distinct !{!84, !9}
!85 = distinct !{!85, !9}
!86 = distinct !{!86, !9}
!87 = !{!88}
!88 = distinct !{!88, !89}
!89 = distinct !{!89, !"LVerDomain"}
!90 = !{!91}
!91 = distinct !{!91, !89}
!92 = distinct !{!92, !9}
!93 = distinct !{!93, !11}
!94 = distinct !{!94, !11}
!95 = distinct !{!95, !9}
