; ModuleID = '../../third_party/libjxl/src/lib/jxl/ans_common.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/ans_common.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"struct.jxl::AliasTable::Entry" = type { i8, i8, i16, i16, i16 }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { i32*, i32*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }

@.str = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [51 x i8] c"../../third_party/libjxl/src/lib/jxl/ans_common.cc\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"length > 0\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"length <= total_count\00", align 1
@.str.4 = private unnamed_addr constant [36 x i8] c"static_cast<uint32_t>(sum) == range\00", align 1
@.str.5 = private unnamed_addr constant [27 x i8] c"(range & (range - 1)) == 0\00", align 1
@.str.6 = private unnamed_addr constant [34 x i8] c"distribution.size() <= table_size\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"table_size <= range\00", align 1
@.str.8 = private unnamed_addr constant [24 x i8] c"!underfull_posn.empty()\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl19CreateFlatHistogramEii(%"class.std::__1::vector"* noalias sret, i32, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %1, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %3
  %6 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.1, i64 0, i64 0), i32 25, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0)) #8
  %7 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

8:                                                ; preds = %3
  %9 = icmp sgt i32 %1, %2
  br i1 %9, label %10, label %13

10:                                               ; preds = %8
  %11 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.1, i64 0, i64 0), i32 26, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0)) #8
  %12 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

13:                                               ; preds = %8
  %14 = sdiv i32 %2, %1
  %15 = srem i32 %2, %1
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %18 = sext i32 %1 to i64
  %19 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %20 = shl nsw i64 %18, 2
  %21 = tail call i8* @_Znwm(i64 %20) #10
  %22 = bitcast i8* %21 to i32*
  %23 = bitcast i32** %17 to i8**
  store i8* %21, i8** %23, align 8
  %24 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %21, i8** %24, align 8
  %25 = getelementptr inbounds i32, i32* %22, i64 %18
  store i32* %25, i32** %19, align 8
  %26 = shl nsw i64 %18, 2
  %27 = add nsw i64 %26, -4
  %28 = lshr exact i64 %27, 2
  %29 = add nuw nsw i64 %28, 1
  %30 = icmp ult i64 %29, 8
  br i1 %30, label %105, label %31

31:                                               ; preds = %13
  %32 = and i64 %29, 9223372036854775800
  %33 = getelementptr i32, i32* %22, i64 %32
  %34 = insertelement <4 x i32> undef, i32 %14, i32 0
  %35 = shufflevector <4 x i32> %34, <4 x i32> undef, <4 x i32> zeroinitializer
  %36 = insertelement <4 x i32> undef, i32 %14, i32 0
  %37 = shufflevector <4 x i32> %36, <4 x i32> undef, <4 x i32> zeroinitializer
  %38 = add nsw i64 %32, -8
  %39 = lshr exact i64 %38, 3
  %40 = add nuw nsw i64 %39, 1
  %41 = and i64 %40, 7
  %42 = icmp ult i64 %38, 56
  br i1 %42, label %90, label %43

43:                                               ; preds = %31
  %44 = sub nsw i64 %40, %41
  br label %45

45:                                               ; preds = %45, %43
  %46 = phi i64 [ 0, %43 ], [ %87, %45 ]
  %47 = phi i64 [ %44, %43 ], [ %88, %45 ]
  %48 = getelementptr i32, i32* %22, i64 %46
  %49 = bitcast i32* %48 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %49, align 4
  %50 = getelementptr i32, i32* %48, i64 4
  %51 = bitcast i32* %50 to <4 x i32>*
  store <4 x i32> %37, <4 x i32>* %51, align 4
  %52 = or i64 %46, 8
  %53 = getelementptr i32, i32* %22, i64 %52
  %54 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %54, align 4
  %55 = getelementptr i32, i32* %53, i64 4
  %56 = bitcast i32* %55 to <4 x i32>*
  store <4 x i32> %37, <4 x i32>* %56, align 4
  %57 = or i64 %46, 16
  %58 = getelementptr i32, i32* %22, i64 %57
  %59 = bitcast i32* %58 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %59, align 4
  %60 = getelementptr i32, i32* %58, i64 4
  %61 = bitcast i32* %60 to <4 x i32>*
  store <4 x i32> %37, <4 x i32>* %61, align 4
  %62 = or i64 %46, 24
  %63 = getelementptr i32, i32* %22, i64 %62
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %64, align 4
  %65 = getelementptr i32, i32* %63, i64 4
  %66 = bitcast i32* %65 to <4 x i32>*
  store <4 x i32> %37, <4 x i32>* %66, align 4
  %67 = or i64 %46, 32
  %68 = getelementptr i32, i32* %22, i64 %67
  %69 = bitcast i32* %68 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %69, align 4
  %70 = getelementptr i32, i32* %68, i64 4
  %71 = bitcast i32* %70 to <4 x i32>*
  store <4 x i32> %37, <4 x i32>* %71, align 4
  %72 = or i64 %46, 40
  %73 = getelementptr i32, i32* %22, i64 %72
  %74 = bitcast i32* %73 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %74, align 4
  %75 = getelementptr i32, i32* %73, i64 4
  %76 = bitcast i32* %75 to <4 x i32>*
  store <4 x i32> %37, <4 x i32>* %76, align 4
  %77 = or i64 %46, 48
  %78 = getelementptr i32, i32* %22, i64 %77
  %79 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %79, align 4
  %80 = getelementptr i32, i32* %78, i64 4
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> %37, <4 x i32>* %81, align 4
  %82 = or i64 %46, 56
  %83 = getelementptr i32, i32* %22, i64 %82
  %84 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %84, align 4
  %85 = getelementptr i32, i32* %83, i64 4
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %37, <4 x i32>* %86, align 4
  %87 = add i64 %46, 64
  %88 = add i64 %47, -8
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %45, !llvm.loop !2

90:                                               ; preds = %45, %31
  %91 = phi i64 [ 0, %31 ], [ %87, %45 ]
  %92 = icmp eq i64 %41, 0
  br i1 %92, label %103, label %93

93:                                               ; preds = %90, %93
  %94 = phi i64 [ %100, %93 ], [ %91, %90 ]
  %95 = phi i64 [ %101, %93 ], [ %41, %90 ]
  %96 = getelementptr i32, i32* %22, i64 %94
  %97 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %97, align 4
  %98 = getelementptr i32, i32* %96, i64 4
  %99 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %37, <4 x i32>* %99, align 4
  %100 = add i64 %94, 8
  %101 = add i64 %95, -1
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %103, label %93, !llvm.loop !4

103:                                              ; preds = %93, %90
  %104 = icmp eq i64 %29, %32
  br i1 %104, label %111, label %105

105:                                              ; preds = %103, %13
  %106 = phi i32* [ %22, %13 ], [ %33, %103 ]
  br label %107

107:                                              ; preds = %105, %107
  %108 = phi i32* [ %109, %107 ], [ %106, %105 ]
  store i32 %14, i32* %108, align 4
  %109 = getelementptr inbounds i32, i32* %108, i64 1
  %110 = icmp eq i32* %109, %25
  br i1 %110, label %111, label %107, !llvm.loop !6

111:                                              ; preds = %107, %103
  %112 = bitcast i32** %17 to i64*
  %113 = ptrtoint i32* %25 to i64
  store i64 %113, i64* %112, align 8
  %114 = icmp sgt i32 %15, 0
  br i1 %114, label %115, label %180

115:                                              ; preds = %111
  %116 = load i32*, i32** %16, align 8
  %117 = zext i32 %15 to i64
  %118 = icmp ult i32 %15, 8
  br i1 %118, label %171, label %119

119:                                              ; preds = %115
  %120 = and i64 %117, 4294967288
  %121 = add nsw i64 %120, -8
  %122 = lshr exact i64 %121, 3
  %123 = add nuw nsw i64 %122, 1
  %124 = and i64 %123, 1
  %125 = icmp eq i64 %121, 0
  br i1 %125, label %155, label %126

126:                                              ; preds = %119
  %127 = sub nuw nsw i64 %123, %124
  br label %128

128:                                              ; preds = %128, %126
  %129 = phi i64 [ 0, %126 ], [ %152, %128 ]
  %130 = phi i64 [ %127, %126 ], [ %153, %128 ]
  %131 = getelementptr inbounds i32, i32* %116, i64 %129
  %132 = bitcast i32* %131 to <4 x i32>*
  %133 = load <4 x i32>, <4 x i32>* %132, align 4
  %134 = getelementptr inbounds i32, i32* %131, i64 4
  %135 = bitcast i32* %134 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 4
  %137 = add nsw <4 x i32> %133, <i32 1, i32 1, i32 1, i32 1>
  %138 = add nsw <4 x i32> %136, <i32 1, i32 1, i32 1, i32 1>
  %139 = bitcast i32* %131 to <4 x i32>*
  store <4 x i32> %137, <4 x i32>* %139, align 4
  %140 = bitcast i32* %134 to <4 x i32>*
  store <4 x i32> %138, <4 x i32>* %140, align 4
  %141 = or i64 %129, 8
  %142 = getelementptr inbounds i32, i32* %116, i64 %141
  %143 = bitcast i32* %142 to <4 x i32>*
  %144 = load <4 x i32>, <4 x i32>* %143, align 4
  %145 = getelementptr inbounds i32, i32* %142, i64 4
  %146 = bitcast i32* %145 to <4 x i32>*
  %147 = load <4 x i32>, <4 x i32>* %146, align 4
  %148 = add nsw <4 x i32> %144, <i32 1, i32 1, i32 1, i32 1>
  %149 = add nsw <4 x i32> %147, <i32 1, i32 1, i32 1, i32 1>
  %150 = bitcast i32* %142 to <4 x i32>*
  store <4 x i32> %148, <4 x i32>* %150, align 4
  %151 = bitcast i32* %145 to <4 x i32>*
  store <4 x i32> %149, <4 x i32>* %151, align 4
  %152 = add i64 %129, 16
  %153 = add i64 %130, -2
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %128, !llvm.loop !8

155:                                              ; preds = %128, %119
  %156 = phi i64 [ 0, %119 ], [ %152, %128 ]
  %157 = icmp eq i64 %124, 0
  br i1 %157, label %169, label %158

158:                                              ; preds = %155
  %159 = getelementptr inbounds i32, i32* %116, i64 %156
  %160 = bitcast i32* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 4
  %162 = getelementptr inbounds i32, i32* %159, i64 4
  %163 = bitcast i32* %162 to <4 x i32>*
  %164 = load <4 x i32>, <4 x i32>* %163, align 4
  %165 = add nsw <4 x i32> %161, <i32 1, i32 1, i32 1, i32 1>
  %166 = add nsw <4 x i32> %164, <i32 1, i32 1, i32 1, i32 1>
  %167 = bitcast i32* %159 to <4 x i32>*
  store <4 x i32> %165, <4 x i32>* %167, align 4
  %168 = bitcast i32* %162 to <4 x i32>*
  store <4 x i32> %166, <4 x i32>* %168, align 4
  br label %169

169:                                              ; preds = %155, %158
  %170 = icmp eq i64 %120, %117
  br i1 %170, label %180, label %171

171:                                              ; preds = %169, %115
  %172 = phi i64 [ 0, %115 ], [ %120, %169 ]
  br label %173

173:                                              ; preds = %171, %173
  %174 = phi i64 [ %178, %173 ], [ %172, %171 ]
  %175 = getelementptr inbounds i32, i32* %116, i64 %174
  %176 = load i32, i32* %175, align 4
  %177 = add nsw i32 %176, 1
  store i32 %177, i32* %175, align 4
  %178 = add nuw nsw i64 %174, 1
  %179 = icmp eq i64 %178, %117
  br i1 %179, label %180, label %173, !llvm.loop !9

180:                                              ; preds = %173, %169, %111
  ret void
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #1

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl14InitAliasTableENSt3__16vectorIiNS0_9allocatorIiEEEEjmPNS_10AliasTable5EntryE(%"class.std::__1::vector"*, i32, i64, %"struct.jxl::AliasTable::Entry"* noalias nocapture) local_unnamed_addr #0 {
  %5 = alloca %"class.std::__1::vector.1", align 8
  %6 = alloca %"class.std::__1::vector.1", align 8
  %7 = alloca %"class.std::__1::vector.1", align 8
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %9 = load i32*, i32** %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %11 = load i32*, i32** %10, align 8
  %12 = icmp eq i32* %9, %11
  %13 = ptrtoint i32* %9 to i64
  %14 = ptrtoint i32* %11 to i64
  br i1 %12, label %28, label %15

15:                                               ; preds = %4
  %16 = getelementptr inbounds i32, i32* %11, i64 -1
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %23, label %78

19:                                               ; preds = %23
  %20 = getelementptr inbounds i32, i32* %24, i64 -1
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %76

23:                                               ; preds = %15, %19
  %24 = phi i32* [ %20, %19 ], [ %16, %15 ]
  store i32* %24, i32** %10, align 8
  %25 = icmp eq i32* %9, %24
  br i1 %25, label %26, label %19

26:                                               ; preds = %23
  %27 = ptrtoint i32* %24 to i64
  br label %28

28:                                               ; preds = %26, %4
  %29 = phi i64 [ %14, %4 ], [ %27, %26 ]
  %30 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %31 = load i32*, i32** %30, align 8
  %32 = icmp ult i32* %9, %31
  br i1 %32, label %33, label %37

33:                                               ; preds = %28
  store i32 %1, i32* %9, align 4
  %34 = getelementptr inbounds i32, i32* %9, i64 1
  %35 = ptrtoint i32* %34 to i64
  %36 = bitcast i32** %10 to i64*
  store i64 %35, i64* %36, align 8
  br label %78

37:                                               ; preds = %28
  %38 = ptrtoint i32* %31 to i64
  %39 = bitcast i32** %10 to i64*
  %40 = bitcast %"class.std::__1::vector"* %0 to i64*
  %41 = bitcast i32** %30 to i64*
  %42 = sub i64 %38, %13
  %43 = ashr exact i64 %42, 2
  %44 = icmp ult i64 %43, 2305843009213693951
  br i1 %44, label %45, label %51

45:                                               ; preds = %37
  %46 = ashr exact i64 %42, 1
  %47 = icmp eq i64 %42, 0
  %48 = select i1 %47, i64 1, i64 %46
  %49 = icmp ugt i64 %48, 4611686018427387903
  br i1 %49, label %50, label %51

50:                                               ; preds = %45
  tail call void @abort() #9
  unreachable

51:                                               ; preds = %37, %45
  %52 = phi i64 [ %48, %45 ], [ 4611686018427387903, %37 ]
  %53 = shl i64 %52, 2
  %54 = tail call i8* @_Znwm(i64 %53) #10
  %55 = bitcast i8* %54 to i32*
  %56 = getelementptr inbounds i32, i32* %55, i64 %52
  %57 = ptrtoint i32* %56 to i64
  store i32 %1, i32* %55, align 4
  %58 = getelementptr inbounds i8, i8* %54, i64 4
  %59 = bitcast i8* %58 to i32*
  %60 = ptrtoint i8* %58 to i64
  %61 = sub i64 %29, %13
  %62 = ashr exact i64 %61, 2
  %63 = sub nsw i64 0, %62
  %64 = getelementptr inbounds i32, i32* %55, i64 %63
  %65 = ptrtoint i32* %64 to i64
  %66 = icmp sgt i64 %61, 0
  br i1 %66, label %67, label %70

67:                                               ; preds = %51
  %68 = bitcast i32* %64 to i8*
  %69 = bitcast i32* %9 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %68, i8* align 4 %69, i64 %61, i1 false) #8
  br label %70

70:                                               ; preds = %67, %51
  store i64 %65, i64* %40, align 8
  store i64 %60, i64* %39, align 8
  store i64 %57, i64* %41, align 8
  %71 = icmp eq i32* %9, null
  br i1 %71, label %78, label %72

72:                                               ; preds = %70
  %73 = bitcast i32* %9 to i8*
  tail call void @_ZdlPv(i8* %73) #10
  %74 = load i32*, i32** %10, align 8
  %75 = ptrtoint i32* %74 to i64
  br label %78

76:                                               ; preds = %19
  %77 = ptrtoint i32* %24 to i64
  br label %78

78:                                               ; preds = %15, %76, %72, %70, %33
  %79 = phi i64 [ %75, %72 ], [ %60, %70 ], [ %35, %33 ], [ %77, %76 ], [ %14, %15 ]
  %80 = phi i32* [ %74, %72 ], [ %59, %70 ], [ %34, %33 ], [ %24, %76 ], [ %11, %15 ]
  %81 = trunc i64 %2 to i32
  %82 = shl i32 1, %81
  %83 = sext i32 %82 to i64
  %84 = load i32*, i32** %8, align 8
  %85 = ptrtoint i32* %84 to i64
  %86 = icmp eq i32* %84, %80
  br i1 %86, label %190, label %87

87:                                               ; preds = %78
  %88 = getelementptr i32, i32* %80, i64 -1
  %89 = ptrtoint i32* %88 to i64
  %90 = sub i64 %89, %85
  %91 = lshr i64 %90, 2
  %92 = add nuw nsw i64 %91, 1
  %93 = icmp ult i64 %92, 8
  br i1 %93, label %180, label %94

94:                                               ; preds = %87
  %95 = and i64 %92, 9223372036854775800
  %96 = getelementptr i32, i32* %84, i64 %95
  %97 = add nsw i64 %95, -8
  %98 = lshr exact i64 %97, 3
  %99 = add nuw nsw i64 %98, 1
  %100 = and i64 %99, 3
  %101 = icmp ult i64 %97, 24
  br i1 %101, label %147, label %102

102:                                              ; preds = %94
  %103 = sub nsw i64 %99, %100
  br label %104

104:                                              ; preds = %104, %102
  %105 = phi i64 [ 0, %102 ], [ %144, %104 ]
  %106 = phi <4 x i32> [ zeroinitializer, %102 ], [ %142, %104 ]
  %107 = phi <4 x i32> [ zeroinitializer, %102 ], [ %143, %104 ]
  %108 = phi i64 [ %103, %102 ], [ %145, %104 ]
  %109 = getelementptr i32, i32* %84, i64 %105
  %110 = bitcast i32* %109 to <4 x i32>*
  %111 = load <4 x i32>, <4 x i32>* %110, align 4
  %112 = getelementptr i32, i32* %109, i64 4
  %113 = bitcast i32* %112 to <4 x i32>*
  %114 = load <4 x i32>, <4 x i32>* %113, align 4
  %115 = add nsw <4 x i32> %111, %106
  %116 = add nsw <4 x i32> %114, %107
  %117 = or i64 %105, 8
  %118 = getelementptr i32, i32* %84, i64 %117
  %119 = bitcast i32* %118 to <4 x i32>*
  %120 = load <4 x i32>, <4 x i32>* %119, align 4
  %121 = getelementptr i32, i32* %118, i64 4
  %122 = bitcast i32* %121 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 4
  %124 = add nsw <4 x i32> %120, %115
  %125 = add nsw <4 x i32> %123, %116
  %126 = or i64 %105, 16
  %127 = getelementptr i32, i32* %84, i64 %126
  %128 = bitcast i32* %127 to <4 x i32>*
  %129 = load <4 x i32>, <4 x i32>* %128, align 4
  %130 = getelementptr i32, i32* %127, i64 4
  %131 = bitcast i32* %130 to <4 x i32>*
  %132 = load <4 x i32>, <4 x i32>* %131, align 4
  %133 = add nsw <4 x i32> %129, %124
  %134 = add nsw <4 x i32> %132, %125
  %135 = or i64 %105, 24
  %136 = getelementptr i32, i32* %84, i64 %135
  %137 = bitcast i32* %136 to <4 x i32>*
  %138 = load <4 x i32>, <4 x i32>* %137, align 4
  %139 = getelementptr i32, i32* %136, i64 4
  %140 = bitcast i32* %139 to <4 x i32>*
  %141 = load <4 x i32>, <4 x i32>* %140, align 4
  %142 = add nsw <4 x i32> %138, %133
  %143 = add nsw <4 x i32> %141, %134
  %144 = add i64 %105, 32
  %145 = add i64 %108, -4
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %147, label %104, !llvm.loop !10

147:                                              ; preds = %104, %94
  %148 = phi <4 x i32> [ undef, %94 ], [ %142, %104 ]
  %149 = phi <4 x i32> [ undef, %94 ], [ %143, %104 ]
  %150 = phi i64 [ 0, %94 ], [ %144, %104 ]
  %151 = phi <4 x i32> [ zeroinitializer, %94 ], [ %142, %104 ]
  %152 = phi <4 x i32> [ zeroinitializer, %94 ], [ %143, %104 ]
  %153 = icmp eq i64 %100, 0
  br i1 %153, label %170, label %154

154:                                              ; preds = %147, %154
  %155 = phi i64 [ %167, %154 ], [ %150, %147 ]
  %156 = phi <4 x i32> [ %165, %154 ], [ %151, %147 ]
  %157 = phi <4 x i32> [ %166, %154 ], [ %152, %147 ]
  %158 = phi i64 [ %168, %154 ], [ %100, %147 ]
  %159 = getelementptr i32, i32* %84, i64 %155
  %160 = bitcast i32* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 4
  %162 = getelementptr i32, i32* %159, i64 4
  %163 = bitcast i32* %162 to <4 x i32>*
  %164 = load <4 x i32>, <4 x i32>* %163, align 4
  %165 = add nsw <4 x i32> %161, %156
  %166 = add nsw <4 x i32> %164, %157
  %167 = add i64 %155, 8
  %168 = add i64 %158, -1
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %170, label %154, !llvm.loop !11

170:                                              ; preds = %154, %147
  %171 = phi <4 x i32> [ %148, %147 ], [ %165, %154 ]
  %172 = phi <4 x i32> [ %149, %147 ], [ %166, %154 ]
  %173 = add <4 x i32> %172, %171
  %174 = shufflevector <4 x i32> %173, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %175 = add <4 x i32> %173, %174
  %176 = shufflevector <4 x i32> %175, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %177 = add <4 x i32> %175, %176
  %178 = extractelement <4 x i32> %177, i32 0
  %179 = icmp eq i64 %92, %95
  br i1 %179, label %190, label %180

180:                                              ; preds = %170, %87
  %181 = phi i32 [ 0, %87 ], [ %178, %170 ]
  %182 = phi i32* [ %84, %87 ], [ %96, %170 ]
  br label %183

183:                                              ; preds = %180, %183
  %184 = phi i32 [ %187, %183 ], [ %181, %180 ]
  %185 = phi i32* [ %188, %183 ], [ %182, %180 ]
  %186 = load i32, i32* %185, align 4
  %187 = add nsw i32 %186, %184
  %188 = getelementptr inbounds i32, i32* %185, i64 1
  %189 = icmp eq i32* %188, %80
  br i1 %189, label %190, label %183, !llvm.loop !12

190:                                              ; preds = %183, %170, %78
  %191 = phi i32 [ 0, %78 ], [ %178, %170 ], [ %187, %183 ]
  %192 = icmp eq i32 %191, %1
  br i1 %192, label %196, label %193

193:                                              ; preds = %190
  %194 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.1, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.4, i64 0, i64 0)) #8
  %195 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

196:                                              ; preds = %190
  %197 = tail call i32 @llvm.ctpop.i32(i32 %1), !range !13
  %198 = icmp ult i32 %197, 2
  br i1 %198, label %202, label %199

199:                                              ; preds = %196
  %200 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.1, i64 0, i64 0), i32 77, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.5, i64 0, i64 0)) #8
  %201 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

202:                                              ; preds = %196
  %203 = bitcast i32** %10 to i64*
  %204 = bitcast %"class.std::__1::vector"* %0 to i64*
  %205 = sub i64 %79, %85
  %206 = ashr exact i64 %205, 2
  %207 = icmp ugt i64 %206, %83
  br i1 %207, label %208, label %211

208:                                              ; preds = %202
  %209 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.1, i64 0, i64 0), i32 78, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0)) #8
  %210 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

211:                                              ; preds = %202
  %212 = zext i32 %1 to i64
  %213 = icmp ugt i64 %83, %212
  br i1 %213, label %214, label %217

214:                                              ; preds = %211
  %215 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.1, i64 0, i64 0), i32 79, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i64 0, i64 0)) #8
  %216 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

217:                                              ; preds = %211
  %218 = lshr i32 %1, %81
  %219 = icmp eq i64 %205, 0
  br i1 %219, label %242, label %220

220:                                              ; preds = %217, %239
  %221 = phi i64 [ %240, %239 ], [ 0, %217 ]
  %222 = getelementptr inbounds i32, i32* %84, i64 %221
  %223 = load i32, i32* %222, align 4
  %224 = icmp eq i32 %223, 4096
  br i1 %224, label %225, label %239

225:                                              ; preds = %220
  %226 = trunc i64 %221 to i8
  %227 = zext i32 %218 to i64
  br label %228

228:                                              ; preds = %225, %228
  %229 = phi i64 [ 0, %225 ], [ %237, %228 ]
  %230 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %3, i64 %229, i32 1
  store i8 %226, i8* %230, align 1
  %231 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %3, i64 %229, i32 0
  store i8 0, i8* %231, align 1
  %232 = mul i64 %229, %227
  %233 = trunc i64 %232 to i16
  %234 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %3, i64 %229, i32 3
  store i16 %233, i16* %234, align 1
  %235 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %3, i64 %229, i32 2
  store i16 0, i16* %235, align 1
  %236 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %3, i64 %229, i32 4
  store i16 4096, i16* %236, align 1
  %237 = add nuw i64 %229, 1
  %238 = icmp ult i64 %237, %83
  br i1 %238, label %228, label %694

239:                                              ; preds = %220
  %240 = add nuw i64 %221, 1
  %241 = icmp ult i64 %240, %206
  br i1 %241, label %220, label %242

242:                                              ; preds = %239, %217
  %243 = bitcast %"class.std::__1::vector.1"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %243) #8
  %244 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %5, i64 0, i32 0, i32 0
  %245 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %5, i64 0, i32 0, i32 1
  %246 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %243, i8 0, i64 24, i1 false) #8
  %247 = bitcast %"class.std::__1::vector.1"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %247) #8
  %248 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %6, i64 0, i32 0, i32 0
  %249 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %6, i64 0, i32 0, i32 1
  %250 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %247, i8 0, i64 24, i1 false) #8
  %251 = bitcast %"class.std::__1::vector.1"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %251) #8
  %252 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %7, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %251, i8 0, i64 24, i1 false) #8
  %253 = icmp eq i32 %81, 31
  br i1 %253, label %254, label %256

254:                                              ; preds = %242
  %255 = bitcast %"class.std::__1::vector.1"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %255) #9
  unreachable

256:                                              ; preds = %242
  %257 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  %258 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %7, i64 0, i32 0, i32 1
  %259 = shl nsw i64 %83, 2
  %260 = tail call i8* @_Znwm(i64 %259) #10
  %261 = bitcast i8* %260 to i32*
  %262 = bitcast %"class.std::__1::vector.1"* %7 to i8**
  store i8* %260, i8** %262, align 8
  %263 = getelementptr inbounds i32, i32* %261, i64 %83
  store i32* %263, i32** %257, align 8
  %264 = bitcast i32** %258 to i64*
  %265 = ptrtoint i8* %260 to i64
  %266 = add nsw i64 %83, -1
  %267 = getelementptr i32, i32* %261, i64 %266
  %268 = ptrtoint i32* %267 to i64
  %269 = sub i64 4, %265
  %270 = add i64 %269, %268
  %271 = and i64 %270, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %260, i8 0, i64 %271, i1 false) #8
  %272 = ptrtoint i32* %263 to i64
  store i64 %272, i64* %264, align 8
  %273 = icmp eq i64 %79, %85
  br i1 %273, label %281, label %274

274:                                              ; preds = %256
  %275 = bitcast i32** %245 to i64*
  %276 = bitcast %"class.std::__1::vector.1"* %5 to i64*
  %277 = bitcast i32** %246 to i64*
  %278 = bitcast i32** %249 to i64*
  %279 = bitcast %"class.std::__1::vector.1"* %6 to i64*
  %280 = bitcast i32** %250 to i64*
  br label %290

281:                                              ; preds = %407, %256
  %282 = phi i64 [ 0, %256 ], [ %412, %407 ]
  %283 = and i64 %282, 4294967295
  %284 = icmp ult i64 %283, %83
  br i1 %284, label %285, label %417

285:                                              ; preds = %281
  %286 = trunc i64 %282 to i32
  %287 = bitcast i32** %245 to i64*
  %288 = bitcast %"class.std::__1::vector.1"* %5 to i64*
  %289 = bitcast i32** %246 to i64*
  br label %428

290:                                              ; preds = %414, %274
  %291 = phi i32* [ %261, %274 ], [ %416, %414 ]
  %292 = phi i32* [ %84, %274 ], [ %415, %414 ]
  %293 = phi i64 [ 0, %274 ], [ %408, %414 ]
  %294 = getelementptr inbounds i32, i32* %292, i64 %293
  %295 = load i32, i32* %294, align 4
  %296 = getelementptr inbounds i32, i32* %291, i64 %293
  store i32 %295, i32* %296, align 4
  %297 = load i32*, i32** %252, align 8
  %298 = getelementptr inbounds i32, i32* %297, i64 %293
  %299 = load i32, i32* %298, align 4
  %300 = icmp ugt i32 %299, %218
  br i1 %300, label %301, label %353

301:                                              ; preds = %290
  %302 = trunc i64 %293 to i32
  %303 = load i32*, i32** %249, align 8
  %304 = load i32*, i32** %250, align 8
  %305 = icmp ult i32* %303, %304
  %306 = ptrtoint i32* %304 to i64
  br i1 %305, label %307, label %310

307:                                              ; preds = %301
  store i32 %302, i32* %303, align 4
  %308 = getelementptr inbounds i32, i32* %303, i64 1
  %309 = ptrtoint i32* %308 to i64
  store i64 %309, i64* %278, align 8
  br label %407

310:                                              ; preds = %301
  %311 = ptrtoint i32* %303 to i64
  %312 = load i64, i64* %279, align 8
  %313 = sub i64 %311, %312
  %314 = ashr exact i64 %313, 2
  %315 = add nsw i64 %314, 1
  %316 = icmp ugt i64 %315, 4611686018427387903
  br i1 %316, label %317, label %319

317:                                              ; preds = %310
  %318 = bitcast %"class.std::__1::vector.1"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %318) #9
  unreachable

319:                                              ; preds = %310
  %320 = sub i64 %306, %312
  %321 = ashr exact i64 %320, 2
  %322 = icmp ult i64 %321, 2305843009213693951
  br i1 %322, label %323, label %331

323:                                              ; preds = %319
  %324 = ashr exact i64 %320, 1
  %325 = icmp ult i64 %324, %315
  %326 = select i1 %325, i64 %315, i64 %324
  %327 = icmp eq i64 %326, 0
  br i1 %327, label %336, label %328

328:                                              ; preds = %323
  %329 = icmp ugt i64 %326, 4611686018427387903
  br i1 %329, label %330, label %331

330:                                              ; preds = %328
  tail call void @abort() #9
  unreachable

331:                                              ; preds = %328, %319
  %332 = phi i64 [ %326, %328 ], [ 4611686018427387903, %319 ]
  %333 = shl i64 %332, 2
  %334 = tail call i8* @_Znwm(i64 %333) #10
  %335 = bitcast i8* %334 to i32*
  br label %336

336:                                              ; preds = %331, %323
  %337 = phi i64 [ %332, %331 ], [ 0, %323 ]
  %338 = phi i8* [ %334, %331 ], [ null, %323 ]
  %339 = phi i32* [ %335, %331 ], [ null, %323 ]
  %340 = getelementptr inbounds i32, i32* %339, i64 %314
  %341 = getelementptr inbounds i32, i32* %339, i64 %337
  %342 = ptrtoint i32* %341 to i64
  store i32 %302, i32* %340, align 4
  %343 = getelementptr inbounds i32, i32* %340, i64 1
  %344 = ptrtoint i32* %343 to i64
  %345 = ptrtoint i32* %339 to i64
  %346 = icmp sgt i64 %313, 0
  br i1 %346, label %347, label %349

347:                                              ; preds = %336
  %348 = inttoptr i64 %312 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %338, i8* align 4 %348, i64 %313, i1 false) #8
  br label %349

349:                                              ; preds = %347, %336
  store i64 %345, i64* %279, align 8
  store i64 %344, i64* %278, align 8
  store i64 %342, i64* %280, align 8
  %350 = icmp eq i64 %312, 0
  br i1 %350, label %407, label %351

351:                                              ; preds = %349
  %352 = inttoptr i64 %312 to i8*
  tail call void @_ZdlPv(i8* %352) #10
  br label %407

353:                                              ; preds = %290
  %354 = icmp ult i32 %299, %218
  br i1 %354, label %355, label %407

355:                                              ; preds = %353
  %356 = trunc i64 %293 to i32
  %357 = load i32*, i32** %245, align 8
  %358 = load i32*, i32** %246, align 8
  %359 = icmp ult i32* %357, %358
  %360 = ptrtoint i32* %358 to i64
  br i1 %359, label %361, label %364

361:                                              ; preds = %355
  store i32 %356, i32* %357, align 4
  %362 = getelementptr inbounds i32, i32* %357, i64 1
  %363 = ptrtoint i32* %362 to i64
  store i64 %363, i64* %275, align 8
  br label %407

364:                                              ; preds = %355
  %365 = ptrtoint i32* %357 to i64
  %366 = load i64, i64* %276, align 8
  %367 = sub i64 %365, %366
  %368 = ashr exact i64 %367, 2
  %369 = add nsw i64 %368, 1
  %370 = icmp ugt i64 %369, 4611686018427387903
  br i1 %370, label %371, label %373

371:                                              ; preds = %364
  %372 = bitcast %"class.std::__1::vector.1"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %372) #9
  unreachable

373:                                              ; preds = %364
  %374 = sub i64 %360, %366
  %375 = ashr exact i64 %374, 2
  %376 = icmp ult i64 %375, 2305843009213693951
  br i1 %376, label %377, label %385

377:                                              ; preds = %373
  %378 = ashr exact i64 %374, 1
  %379 = icmp ult i64 %378, %369
  %380 = select i1 %379, i64 %369, i64 %378
  %381 = icmp eq i64 %380, 0
  br i1 %381, label %390, label %382

382:                                              ; preds = %377
  %383 = icmp ugt i64 %380, 4611686018427387903
  br i1 %383, label %384, label %385

384:                                              ; preds = %382
  tail call void @abort() #9
  unreachable

385:                                              ; preds = %382, %373
  %386 = phi i64 [ %380, %382 ], [ 4611686018427387903, %373 ]
  %387 = shl i64 %386, 2
  %388 = tail call i8* @_Znwm(i64 %387) #10
  %389 = bitcast i8* %388 to i32*
  br label %390

390:                                              ; preds = %385, %377
  %391 = phi i64 [ %386, %385 ], [ 0, %377 ]
  %392 = phi i8* [ %388, %385 ], [ null, %377 ]
  %393 = phi i32* [ %389, %385 ], [ null, %377 ]
  %394 = getelementptr inbounds i32, i32* %393, i64 %368
  %395 = getelementptr inbounds i32, i32* %393, i64 %391
  %396 = ptrtoint i32* %395 to i64
  store i32 %356, i32* %394, align 4
  %397 = getelementptr inbounds i32, i32* %394, i64 1
  %398 = ptrtoint i32* %397 to i64
  %399 = ptrtoint i32* %393 to i64
  %400 = icmp sgt i64 %367, 0
  br i1 %400, label %401, label %403

401:                                              ; preds = %390
  %402 = inttoptr i64 %366 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %392, i8* align 4 %402, i64 %367, i1 false) #8
  br label %403

403:                                              ; preds = %401, %390
  store i64 %399, i64* %276, align 8
  store i64 %398, i64* %275, align 8
  store i64 %396, i64* %277, align 8
  %404 = icmp eq i64 %366, 0
  br i1 %404, label %407, label %405

405:                                              ; preds = %403
  %406 = inttoptr i64 %366 to i8*
  tail call void @_ZdlPv(i8* %406) #10
  br label %407

407:                                              ; preds = %405, %403, %361, %351, %349, %307, %353
  %408 = add nuw i64 %293, 1
  %409 = load i64, i64* %203, align 8
  %410 = load i64, i64* %204, align 8
  %411 = sub i64 %409, %410
  %412 = ashr exact i64 %411, 2
  %413 = icmp ult i64 %408, %412
  br i1 %413, label %414, label %281

414:                                              ; preds = %407
  %415 = inttoptr i64 %410 to i32*
  %416 = load i32*, i32** %252, align 8
  br label %290

417:                                              ; preds = %483, %281
  %418 = load i32*, i32** %248, align 8
  %419 = load i32*, i32** %249, align 8
  %420 = icmp eq i32* %418, %419
  br i1 %420, label %487, label %421

421:                                              ; preds = %417
  %422 = bitcast i32** %249 to i64*
  %423 = bitcast %"class.std::__1::vector.1"* %6 to i64*
  %424 = bitcast i32** %250 to i64*
  %425 = bitcast i32** %245 to i64*
  %426 = bitcast %"class.std::__1::vector.1"* %5 to i64*
  %427 = bitcast i32** %246 to i64*
  br label %490

428:                                              ; preds = %285, %483
  %429 = phi i64 [ %283, %285 ], [ %485, %483 ]
  %430 = phi i32 [ %286, %285 ], [ %484, %483 ]
  %431 = load i32*, i32** %252, align 8
  %432 = getelementptr inbounds i32, i32* %431, i64 %429
  store i32 0, i32* %432, align 4
  %433 = load i32*, i32** %245, align 8
  %434 = load i32*, i32** %246, align 8
  %435 = icmp eq i32* %433, %434
  %436 = ptrtoint i32* %434 to i64
  br i1 %435, label %440, label %437

437:                                              ; preds = %428
  store i32 %430, i32* %433, align 4
  %438 = getelementptr inbounds i32, i32* %433, i64 1
  %439 = ptrtoint i32* %438 to i64
  store i64 %439, i64* %287, align 8
  br label %483

440:                                              ; preds = %428
  %441 = ptrtoint i32* %433 to i64
  %442 = load i64, i64* %288, align 8
  %443 = sub i64 %441, %442
  %444 = ashr exact i64 %443, 2
  %445 = add nsw i64 %444, 1
  %446 = icmp ugt i64 %445, 4611686018427387903
  br i1 %446, label %447, label %449

447:                                              ; preds = %440
  %448 = bitcast %"class.std::__1::vector.1"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %448) #9
  unreachable

449:                                              ; preds = %440
  %450 = sub i64 %436, %442
  %451 = ashr exact i64 %450, 2
  %452 = icmp ult i64 %451, 2305843009213693951
  br i1 %452, label %453, label %461

453:                                              ; preds = %449
  %454 = ashr exact i64 %450, 1
  %455 = icmp ult i64 %454, %445
  %456 = select i1 %455, i64 %445, i64 %454
  %457 = icmp eq i64 %456, 0
  br i1 %457, label %466, label %458

458:                                              ; preds = %453
  %459 = icmp ugt i64 %456, 4611686018427387903
  br i1 %459, label %460, label %461

460:                                              ; preds = %458
  tail call void @abort() #9
  unreachable

461:                                              ; preds = %458, %449
  %462 = phi i64 [ %456, %458 ], [ 4611686018427387903, %449 ]
  %463 = shl i64 %462, 2
  %464 = tail call i8* @_Znwm(i64 %463) #10
  %465 = bitcast i8* %464 to i32*
  br label %466

466:                                              ; preds = %461, %453
  %467 = phi i64 [ %462, %461 ], [ 0, %453 ]
  %468 = phi i8* [ %464, %461 ], [ null, %453 ]
  %469 = phi i32* [ %465, %461 ], [ null, %453 ]
  %470 = getelementptr inbounds i32, i32* %469, i64 %444
  %471 = getelementptr inbounds i32, i32* %469, i64 %467
  %472 = ptrtoint i32* %471 to i64
  store i32 %430, i32* %470, align 4
  %473 = getelementptr inbounds i32, i32* %470, i64 1
  %474 = ptrtoint i32* %473 to i64
  %475 = ptrtoint i32* %469 to i64
  %476 = icmp sgt i64 %443, 0
  br i1 %476, label %477, label %479

477:                                              ; preds = %466
  %478 = inttoptr i64 %442 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %468, i8* align 4 %478, i64 %443, i1 false) #8
  br label %479

479:                                              ; preds = %477, %466
  store i64 %475, i64* %288, align 8
  store i64 %474, i64* %287, align 8
  store i64 %472, i64* %289, align 8
  %480 = icmp eq i64 %442, 0
  br i1 %480, label %483, label %481

481:                                              ; preds = %479
  %482 = inttoptr i64 %442 to i8*
  tail call void @_ZdlPv(i8* %482) #10
  br label %483

483:                                              ; preds = %437, %479, %481
  %484 = add i32 %430, 1
  %485 = zext i32 %484 to i64
  %486 = icmp ult i64 %485, %83
  br i1 %486, label %428, label %417

487:                                              ; preds = %624, %417
  %488 = phi i32* [ %418, %417 ], [ %625, %624 ]
  %489 = load i32*, i32** %252, align 8
  br label %647

490:                                              ; preds = %421, %624
  %491 = phi i32* [ %419, %421 ], [ %626, %624 ]
  %492 = getelementptr inbounds i32, i32* %491, i64 -1
  %493 = load i32, i32* %492, align 4
  store i32* %492, i32** %249, align 8
  %494 = load i32*, i32** %244, align 8
  %495 = load i32*, i32** %245, align 8
  %496 = icmp eq i32* %494, %495
  br i1 %496, label %497, label %500

497:                                              ; preds = %490
  %498 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.1, i64 0, i64 0), i32 117, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0)) #8
  %499 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

500:                                              ; preds = %490
  %501 = getelementptr inbounds i32, i32* %495, i64 -1
  %502 = load i32, i32* %501, align 4
  store i32* %501, i32** %245, align 8
  %503 = zext i32 %502 to i64
  %504 = load i32*, i32** %252, align 8
  %505 = getelementptr inbounds i32, i32* %504, i64 %503
  %506 = load i32, i32* %505, align 4
  %507 = zext i32 %493 to i64
  %508 = getelementptr inbounds i32, i32* %504, i64 %507
  %509 = load i32, i32* %508, align 4
  %510 = sub i32 %506, %218
  %511 = add i32 %510, %509
  store i32 %511, i32* %508, align 4
  %512 = trunc i32 %493 to i8
  %513 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %3, i64 %503, i32 1
  store i8 %512, i8* %513, align 1
  %514 = load i32*, i32** %252, align 8
  %515 = getelementptr inbounds i32, i32* %514, i64 %507
  %516 = load i32, i32* %515, align 4
  %517 = trunc i32 %516 to i16
  %518 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %3, i64 %503, i32 3
  store i16 %517, i16* %518, align 1
  %519 = icmp ult i32 %516, %218
  br i1 %519, label %520, label %571

520:                                              ; preds = %500
  %521 = load i32*, i32** %245, align 8
  %522 = load i32*, i32** %246, align 8
  %523 = icmp eq i32* %521, %522
  %524 = ptrtoint i32* %522 to i64
  br i1 %523, label %528, label %525

525:                                              ; preds = %520
  store i32 %493, i32* %521, align 4
  %526 = getelementptr inbounds i32, i32* %521, i64 1
  %527 = ptrtoint i32* %526 to i64
  store i64 %527, i64* %425, align 8
  br label %624

528:                                              ; preds = %520
  %529 = ptrtoint i32* %521 to i64
  %530 = load i64, i64* %426, align 8
  %531 = sub i64 %529, %530
  %532 = ashr exact i64 %531, 2
  %533 = add nsw i64 %532, 1
  %534 = icmp ugt i64 %533, 4611686018427387903
  br i1 %534, label %535, label %537

535:                                              ; preds = %528
  %536 = bitcast %"class.std::__1::vector.1"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %536) #9
  unreachable

537:                                              ; preds = %528
  %538 = sub i64 %524, %530
  %539 = ashr exact i64 %538, 2
  %540 = icmp ult i64 %539, 2305843009213693951
  br i1 %540, label %541, label %549

541:                                              ; preds = %537
  %542 = ashr exact i64 %538, 1
  %543 = icmp ult i64 %542, %533
  %544 = select i1 %543, i64 %533, i64 %542
  %545 = icmp eq i64 %544, 0
  br i1 %545, label %554, label %546

546:                                              ; preds = %541
  %547 = icmp ugt i64 %544, 4611686018427387903
  br i1 %547, label %548, label %549

548:                                              ; preds = %546
  tail call void @abort() #9
  unreachable

549:                                              ; preds = %546, %537
  %550 = phi i64 [ %544, %546 ], [ 4611686018427387903, %537 ]
  %551 = shl i64 %550, 2
  %552 = tail call i8* @_Znwm(i64 %551) #10
  %553 = bitcast i8* %552 to i32*
  br label %554

554:                                              ; preds = %549, %541
  %555 = phi i64 [ %550, %549 ], [ 0, %541 ]
  %556 = phi i8* [ %552, %549 ], [ null, %541 ]
  %557 = phi i32* [ %553, %549 ], [ null, %541 ]
  %558 = getelementptr inbounds i32, i32* %557, i64 %532
  %559 = getelementptr inbounds i32, i32* %557, i64 %555
  %560 = ptrtoint i32* %559 to i64
  store i32 %493, i32* %558, align 4
  %561 = getelementptr inbounds i32, i32* %558, i64 1
  %562 = ptrtoint i32* %561 to i64
  %563 = ptrtoint i32* %557 to i64
  %564 = icmp sgt i64 %531, 0
  br i1 %564, label %565, label %567

565:                                              ; preds = %554
  %566 = inttoptr i64 %530 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %556, i8* align 4 %566, i64 %531, i1 false) #8
  br label %567

567:                                              ; preds = %565, %554
  store i64 %563, i64* %426, align 8
  store i64 %562, i64* %425, align 8
  store i64 %560, i64* %427, align 8
  %568 = icmp eq i64 %530, 0
  br i1 %568, label %624, label %569

569:                                              ; preds = %567
  %570 = inttoptr i64 %530 to i8*
  tail call void @_ZdlPv(i8* %570) #10
  br label %624

571:                                              ; preds = %500
  %572 = icmp ugt i32 %516, %218
  br i1 %572, label %573, label %624

573:                                              ; preds = %571
  %574 = load i32*, i32** %249, align 8
  %575 = load i32*, i32** %250, align 8
  %576 = icmp eq i32* %574, %575
  %577 = ptrtoint i32* %575 to i64
  br i1 %576, label %581, label %578

578:                                              ; preds = %573
  store i32 %493, i32* %574, align 4
  %579 = getelementptr inbounds i32, i32* %574, i64 1
  %580 = ptrtoint i32* %579 to i64
  store i64 %580, i64* %422, align 8
  br label %624

581:                                              ; preds = %573
  %582 = ptrtoint i32* %574 to i64
  %583 = load i64, i64* %423, align 8
  %584 = sub i64 %582, %583
  %585 = ashr exact i64 %584, 2
  %586 = add nsw i64 %585, 1
  %587 = icmp ugt i64 %586, 4611686018427387903
  br i1 %587, label %588, label %590

588:                                              ; preds = %581
  %589 = bitcast %"class.std::__1::vector.1"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %589) #9
  unreachable

590:                                              ; preds = %581
  %591 = sub i64 %577, %583
  %592 = ashr exact i64 %591, 2
  %593 = icmp ult i64 %592, 2305843009213693951
  br i1 %593, label %594, label %602

594:                                              ; preds = %590
  %595 = ashr exact i64 %591, 1
  %596 = icmp ult i64 %595, %586
  %597 = select i1 %596, i64 %586, i64 %595
  %598 = icmp eq i64 %597, 0
  br i1 %598, label %607, label %599

599:                                              ; preds = %594
  %600 = icmp ugt i64 %597, 4611686018427387903
  br i1 %600, label %601, label %602

601:                                              ; preds = %599
  tail call void @abort() #9
  unreachable

602:                                              ; preds = %599, %590
  %603 = phi i64 [ %597, %599 ], [ 4611686018427387903, %590 ]
  %604 = shl i64 %603, 2
  %605 = tail call i8* @_Znwm(i64 %604) #10
  %606 = bitcast i8* %605 to i32*
  br label %607

607:                                              ; preds = %602, %594
  %608 = phi i64 [ %603, %602 ], [ 0, %594 ]
  %609 = phi i8* [ %605, %602 ], [ null, %594 ]
  %610 = phi i32* [ %606, %602 ], [ null, %594 ]
  %611 = getelementptr inbounds i32, i32* %610, i64 %585
  %612 = getelementptr inbounds i32, i32* %610, i64 %608
  %613 = ptrtoint i32* %612 to i64
  store i32 %493, i32* %611, align 4
  %614 = getelementptr inbounds i32, i32* %611, i64 1
  %615 = ptrtoint i32* %614 to i64
  %616 = ptrtoint i32* %610 to i64
  %617 = icmp sgt i64 %584, 0
  br i1 %617, label %618, label %620

618:                                              ; preds = %607
  %619 = inttoptr i64 %583 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %609, i8* align 4 %619, i64 %584, i1 false) #8
  br label %620

620:                                              ; preds = %618, %607
  store i64 %616, i64* %423, align 8
  store i64 %615, i64* %422, align 8
  store i64 %613, i64* %424, align 8
  %621 = icmp eq i64 %583, 0
  br i1 %621, label %624, label %622

622:                                              ; preds = %620
  %623 = inttoptr i64 %583 to i8*
  tail call void @_ZdlPv(i8* %623) #10
  br label %624

624:                                              ; preds = %622, %620, %578, %569, %567, %525, %571
  %625 = load i32*, i32** %248, align 8
  %626 = load i32*, i32** %249, align 8
  %627 = icmp eq i32* %625, %626
  br i1 %627, label %487, label %490

628:                                              ; preds = %684
  %629 = icmp eq i32* %489, null
  br i1 %629, label %633, label %630

630:                                              ; preds = %628
  %631 = ptrtoint i32* %489 to i64
  store i64 %631, i64* %264, align 8
  %632 = bitcast i32* %489 to i8*
  tail call void @_ZdlPv(i8* %632) #10
  br label %633

633:                                              ; preds = %628, %630
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %251) #8
  %634 = icmp eq i32* %488, null
  br i1 %634, label %639, label %635

635:                                              ; preds = %633
  %636 = ptrtoint i32* %488 to i64
  %637 = bitcast i32** %249 to i64*
  store i64 %636, i64* %637, align 8
  %638 = bitcast i32* %488 to i8*
  tail call void @_ZdlPv(i8* %638) #10
  br label %639

639:                                              ; preds = %633, %635
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %247) #8
  %640 = load i32*, i32** %244, align 8
  %641 = icmp eq i32* %640, null
  br i1 %641, label %646, label %642

642:                                              ; preds = %639
  %643 = ptrtoint i32* %640 to i64
  %644 = bitcast i32** %245 to i64*
  store i64 %643, i64* %644, align 8
  %645 = bitcast i32* %640 to i8*
  tail call void @_ZdlPv(i8* %645) #10
  br label %646

646:                                              ; preds = %639, %642
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %243) #8
  br label %694

647:                                              ; preds = %487, %684
  %648 = phi i64 [ 0, %487 ], [ %692, %684 ]
  %649 = phi i32 [ 0, %487 ], [ %691, %684 ]
  %650 = getelementptr inbounds i32, i32* %489, i64 %648
  %651 = load i32, i32* %650, align 4
  %652 = icmp eq i32 %651, %218
  br i1 %652, label %653, label %657

653:                                              ; preds = %647
  %654 = trunc i32 %649 to i8
  %655 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %3, i64 %648, i32 1
  store i8 %654, i8* %655, align 1
  %656 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %3, i64 %648, i32 3
  store i16 0, i16* %656, align 1
  br label %663

657:                                              ; preds = %647
  %658 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %3, i64 %648, i32 3
  %659 = load i16, i16* %658, align 1
  %660 = trunc i32 %651 to i16
  %661 = sub i16 %659, %660
  store i16 %661, i16* %658, align 1
  %662 = trunc i32 %651 to i8
  br label %663

663:                                              ; preds = %657, %653
  %664 = phi i8 [ %662, %657 ], [ 0, %653 ]
  %665 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %3, i64 %648, i32 0
  store i8 %664, i8* %665, align 1
  %666 = load i64, i64* %203, align 8
  %667 = load i64, i64* %204, align 8
  %668 = sub i64 %666, %667
  %669 = ashr exact i64 %668, 2
  %670 = icmp ugt i64 %669, %648
  %671 = inttoptr i64 %667 to i32*
  br i1 %670, label %672, label %675

672:                                              ; preds = %663
  %673 = getelementptr inbounds i32, i32* %671, i64 %648
  %674 = load i32, i32* %673, align 4
  br label %675

675:                                              ; preds = %663, %672
  %676 = phi i32 [ %674, %672 ], [ 0, %663 ]
  %677 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %3, i64 %648, i32 1
  %678 = load i8, i8* %677, align 1
  %679 = zext i8 %678 to i64
  %680 = icmp ugt i64 %669, %679
  br i1 %680, label %681, label %684

681:                                              ; preds = %675
  %682 = getelementptr inbounds i32, i32* %671, i64 %679
  %683 = load i32, i32* %682, align 4
  br label %684

684:                                              ; preds = %675, %681
  %685 = phi i32 [ %683, %681 ], [ 0, %675 ]
  %686 = trunc i32 %676 to i16
  %687 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %3, i64 %648, i32 2
  store i16 %686, i16* %687, align 1
  %688 = xor i32 %685, %676
  %689 = trunc i32 %688 to i16
  %690 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %3, i64 %648, i32 4
  store i16 %689, i16* %690, align 1
  %691 = add i32 %649, 1
  %692 = zext i32 %691 to i64
  %693 = icmp ult i64 %692, %83
  br i1 %693, label %647, label %628

694:                                              ; preds = %228, %646
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !7, !3}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !5}
!12 = distinct !{!12, !7, !3}
!13 = !{i32 0, i32 33}
