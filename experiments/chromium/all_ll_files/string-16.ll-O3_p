; ModuleID = '../../v8/src/inspector/string-16.cc'
source_filename = "../../v8/src/inspector/string-16.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.v8_inspector::String16" = type { %"class.std::__1::basic_string", i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__rep" }
%"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__long" }
%"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__long" = type { i16*, i64, i64 }
%"class.v8_inspector::String16Builder" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i16*, i16*, %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { i16* }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short" = type { [11 x i16], %struct.anon }
%struct.anon = type { %"struct.std::__1::__padding", i8 }
%"struct.std::__1::__padding" = type { [1 x i8] }
%"class.std::__1::vector.23" = type { %"class.std::__1::__vector_base.24" }
%"class.std::__1::__vector_base.24" = type { i8*, i8*, %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i8* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::basic_string.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.10 }
%union.anon.10 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { i8*, i8*, %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { i8* }

$_ZNSt3__16vectorItNS_9allocatorItEEE6insertIPKtEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleItNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPtEEE4typeENSC_IS6_EES8_S8_ = comdat any

$_ZNSt3__16vectorItNS_9allocatorItEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleItNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPtEEE4typeENSC_IPKtEES8_S8_ = comdat any

$_ZNSt3__16vectorItNS_9allocatorItEEE6insertIPcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleItNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIPtEEE4typeENSB_IPKtEES7_S7_ = comdat any

$_ZNSt3__112basic_stringItNS_11char_traitsItEENS_9allocatorItEEE9__grow_byEmmmmmm = comdat any

@.str = private unnamed_addr constant [4 x i8] c"%zu\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"%016lx\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"%08x\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"%02x\00", align 1

@_ZN12v8_inspector8String16C1EPKtm = hidden unnamed_addr alias void (%"class.v8_inspector::String16"*, i16*, i64), void (%"class.v8_inspector::String16"*, i16*, i64)* @_ZN12v8_inspector8String16C2EPKtm
@_ZN12v8_inspector8String16C1EPKt = hidden unnamed_addr alias void (%"class.v8_inspector::String16"*, i16*), void (%"class.v8_inspector::String16"*, i16*)* @_ZN12v8_inspector8String16C2EPKt
@_ZN12v8_inspector8String16C1EPKc = hidden unnamed_addr alias void (%"class.v8_inspector::String16"*, i8*), void (%"class.v8_inspector::String16"*, i8*)* @_ZN12v8_inspector8String16C2EPKc
@_ZN12v8_inspector8String16C1EPKcm = hidden unnamed_addr alias void (%"class.v8_inspector::String16"*, i8*, i64), void (%"class.v8_inspector::String16"*, i8*, i64)* @_ZN12v8_inspector8String16C2EPKcm
@_ZN12v8_inspector8String16C1ERKNSt3__112basic_stringItNS1_11char_traitsItEENS1_9allocatorItEEEE = hidden unnamed_addr alias void (%"class.v8_inspector::String16"*, %"class.std::__1::basic_string"*), void (%"class.v8_inspector::String16"*, %"class.std::__1::basic_string"*)* @_ZN12v8_inspector8String16C2ERKNSt3__112basic_stringItNS1_11char_traitsItEENS1_9allocatorItEEEE
@_ZN12v8_inspector8String16C1EONSt3__112basic_stringItNS1_11char_traitsItEENS1_9allocatorItEEEE = hidden unnamed_addr alias void (%"class.v8_inspector::String16"*, %"class.std::__1::basic_string"*), void (%"class.v8_inspector::String16"*, %"class.std::__1::basic_string"*)* @_ZN12v8_inspector8String16C2EONSt3__112basic_stringItNS1_11char_traitsItEENS1_9allocatorItEEEE
@_ZN12v8_inspector15String16BuilderC1Ev = hidden unnamed_addr alias void (%"class.v8_inspector::String16Builder"*), void (%"class.v8_inspector::String16Builder"*)* @_ZN12v8_inspector15String16BuilderC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector8String16C2EPKtm(%"class.v8_inspector::String16"*, i16* nocapture readonly, i64) unnamed_addr #0 align 2 {
  %4 = icmp ugt i64 %2, 9223372036854775791
  br i1 %4, label %5, label %7

5:                                                ; preds = %3
  %6 = bitcast %"class.v8_inspector::String16"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %6) #9
  unreachable

7:                                                ; preds = %3
  %8 = icmp ult i64 %2, 11
  br i1 %8, label %22, label %9

9:                                                ; preds = %7
  %10 = add nuw nsw i64 %2, 8
  %11 = and i64 %10, -8
  %12 = icmp slt i64 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %9
  tail call void @abort() #9
  unreachable

14:                                               ; preds = %9
  %15 = shl i64 %11, 1
  %16 = tail call i8* @_Znwm(i64 %15) #10
  %17 = bitcast i8* %16 to i16*
  %18 = bitcast %"class.v8_inspector::String16"* %0 to i8**
  store i8* %16, i8** %18, align 8
  %19 = or i64 %11, -9223372036854775808
  %20 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %19, i64* %20, align 8
  %21 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %2, i64* %21, align 8
  br label %28

22:                                               ; preds = %7
  %23 = trunc i64 %2 to i8
  %24 = bitcast %"class.v8_inspector::String16"* %0 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %25 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %24, i64 0, i32 1, i32 1
  store i8 %23, i8* %25, align 1
  %26 = bitcast %"class.v8_inspector::String16"* %0 to i16*
  %27 = icmp eq i64 %2, 0
  br i1 %27, label %172, label %28

28:                                               ; preds = %22, %14
  %29 = phi i16* [ %17, %14 ], [ %26, %22 ]
  %30 = icmp ult i64 %2, 16
  br i1 %30, label %119, label %31

31:                                               ; preds = %28
  %32 = getelementptr i16, i16* %29, i64 %2
  %33 = getelementptr i16, i16* %1, i64 %2
  %34 = icmp ult i16* %29, %33
  %35 = icmp ugt i16* %32, %1
  %36 = and i1 %34, %35
  br i1 %36, label %119, label %37

37:                                               ; preds = %31
  %38 = and i64 %2, -16
  %39 = getelementptr i16, i16* %29, i64 %38
  %40 = sub i64 %2, %38
  %41 = getelementptr i16, i16* %1, i64 %38
  %42 = add i64 %38, -16
  %43 = lshr exact i64 %42, 4
  %44 = add nuw nsw i64 %43, 1
  %45 = and i64 %44, 3
  %46 = icmp ult i64 %42, 48
  br i1 %46, label %98, label %47

47:                                               ; preds = %37
  %48 = sub nsw i64 %44, %45
  br label %49

49:                                               ; preds = %49, %47
  %50 = phi i64 [ 0, %47 ], [ %95, %49 ]
  %51 = phi i64 [ %48, %47 ], [ %96, %49 ]
  %52 = getelementptr i16, i16* %29, i64 %50
  %53 = getelementptr i16, i16* %1, i64 %50
  %54 = bitcast i16* %53 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 2, !alias.scope !2
  %56 = getelementptr i16, i16* %53, i64 8
  %57 = bitcast i16* %56 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 2, !alias.scope !2
  %59 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %59, align 2, !alias.scope !5, !noalias !2
  %60 = getelementptr i16, i16* %52, i64 8
  %61 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %58, <8 x i16>* %61, align 2, !alias.scope !5, !noalias !2
  %62 = or i64 %50, 16
  %63 = getelementptr i16, i16* %29, i64 %62
  %64 = getelementptr i16, i16* %1, i64 %62
  %65 = bitcast i16* %64 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 2, !alias.scope !2
  %67 = getelementptr i16, i16* %64, i64 8
  %68 = bitcast i16* %67 to <8 x i16>*
  %69 = load <8 x i16>, <8 x i16>* %68, align 2, !alias.scope !2
  %70 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %70, align 2, !alias.scope !5, !noalias !2
  %71 = getelementptr i16, i16* %63, i64 8
  %72 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %69, <8 x i16>* %72, align 2, !alias.scope !5, !noalias !2
  %73 = or i64 %50, 32
  %74 = getelementptr i16, i16* %29, i64 %73
  %75 = getelementptr i16, i16* %1, i64 %73
  %76 = bitcast i16* %75 to <8 x i16>*
  %77 = load <8 x i16>, <8 x i16>* %76, align 2, !alias.scope !2
  %78 = getelementptr i16, i16* %75, i64 8
  %79 = bitcast i16* %78 to <8 x i16>*
  %80 = load <8 x i16>, <8 x i16>* %79, align 2, !alias.scope !2
  %81 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %77, <8 x i16>* %81, align 2, !alias.scope !5, !noalias !2
  %82 = getelementptr i16, i16* %74, i64 8
  %83 = bitcast i16* %82 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %83, align 2, !alias.scope !5, !noalias !2
  %84 = or i64 %50, 48
  %85 = getelementptr i16, i16* %29, i64 %84
  %86 = getelementptr i16, i16* %1, i64 %84
  %87 = bitcast i16* %86 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 2, !alias.scope !2
  %89 = getelementptr i16, i16* %86, i64 8
  %90 = bitcast i16* %89 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 2, !alias.scope !2
  %92 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %92, align 2, !alias.scope !5, !noalias !2
  %93 = getelementptr i16, i16* %85, i64 8
  %94 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %94, align 2, !alias.scope !5, !noalias !2
  %95 = add i64 %50, 64
  %96 = add i64 %51, -4
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %98, label %49, !llvm.loop !7

98:                                               ; preds = %49, %37
  %99 = phi i64 [ 0, %37 ], [ %95, %49 ]
  %100 = icmp eq i64 %45, 0
  br i1 %100, label %117, label %101

101:                                              ; preds = %98, %101
  %102 = phi i64 [ %114, %101 ], [ %99, %98 ]
  %103 = phi i64 [ %115, %101 ], [ %45, %98 ]
  %104 = getelementptr i16, i16* %29, i64 %102
  %105 = getelementptr i16, i16* %1, i64 %102
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 2, !alias.scope !2
  %108 = getelementptr i16, i16* %105, i64 8
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2, !alias.scope !2
  %111 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %111, align 2, !alias.scope !5, !noalias !2
  %112 = getelementptr i16, i16* %104, i64 8
  %113 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %113, align 2, !alias.scope !5, !noalias !2
  %114 = add i64 %102, 16
  %115 = add i64 %103, -1
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %117, label %101, !llvm.loop !9

117:                                              ; preds = %101, %98
  %118 = icmp eq i64 %38, %2
  br i1 %118, label %172, label %119

119:                                              ; preds = %117, %31, %28
  %120 = phi i16* [ %29, %31 ], [ %29, %28 ], [ %39, %117 ]
  %121 = phi i64 [ %2, %31 ], [ %2, %28 ], [ %40, %117 ]
  %122 = phi i16* [ %1, %31 ], [ %1, %28 ], [ %41, %117 ]
  %123 = add i64 %121, -1
  %124 = and i64 %121, 7
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %137, label %126

126:                                              ; preds = %119, %126
  %127 = phi i16* [ %133, %126 ], [ %120, %119 ]
  %128 = phi i64 [ %132, %126 ], [ %121, %119 ]
  %129 = phi i16* [ %134, %126 ], [ %122, %119 ]
  %130 = phi i64 [ %135, %126 ], [ %124, %119 ]
  %131 = load i16, i16* %129, align 2
  store i16 %131, i16* %127, align 2
  %132 = add i64 %128, -1
  %133 = getelementptr inbounds i16, i16* %127, i64 1
  %134 = getelementptr inbounds i16, i16* %129, i64 1
  %135 = add i64 %130, -1
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %126, !llvm.loop !11

137:                                              ; preds = %126, %119
  %138 = phi i16* [ %120, %119 ], [ %133, %126 ]
  %139 = phi i64 [ %121, %119 ], [ %132, %126 ]
  %140 = phi i16* [ %122, %119 ], [ %134, %126 ]
  %141 = icmp ult i64 %123, 7
  br i1 %141, label %172, label %142

142:                                              ; preds = %137, %142
  %143 = phi i16* [ %169, %142 ], [ %138, %137 ]
  %144 = phi i64 [ %168, %142 ], [ %139, %137 ]
  %145 = phi i16* [ %170, %142 ], [ %140, %137 ]
  %146 = load i16, i16* %145, align 2
  store i16 %146, i16* %143, align 2
  %147 = getelementptr inbounds i16, i16* %143, i64 1
  %148 = getelementptr inbounds i16, i16* %145, i64 1
  %149 = load i16, i16* %148, align 2
  store i16 %149, i16* %147, align 2
  %150 = getelementptr inbounds i16, i16* %143, i64 2
  %151 = getelementptr inbounds i16, i16* %145, i64 2
  %152 = load i16, i16* %151, align 2
  store i16 %152, i16* %150, align 2
  %153 = getelementptr inbounds i16, i16* %143, i64 3
  %154 = getelementptr inbounds i16, i16* %145, i64 3
  %155 = load i16, i16* %154, align 2
  store i16 %155, i16* %153, align 2
  %156 = getelementptr inbounds i16, i16* %143, i64 4
  %157 = getelementptr inbounds i16, i16* %145, i64 4
  %158 = load i16, i16* %157, align 2
  store i16 %158, i16* %156, align 2
  %159 = getelementptr inbounds i16, i16* %143, i64 5
  %160 = getelementptr inbounds i16, i16* %145, i64 5
  %161 = load i16, i16* %160, align 2
  store i16 %161, i16* %159, align 2
  %162 = getelementptr inbounds i16, i16* %143, i64 6
  %163 = getelementptr inbounds i16, i16* %145, i64 6
  %164 = load i16, i16* %163, align 2
  store i16 %164, i16* %162, align 2
  %165 = getelementptr inbounds i16, i16* %143, i64 7
  %166 = getelementptr inbounds i16, i16* %145, i64 7
  %167 = load i16, i16* %166, align 2
  store i16 %167, i16* %165, align 2
  %168 = add i64 %144, -8
  %169 = getelementptr inbounds i16, i16* %143, i64 8
  %170 = getelementptr inbounds i16, i16* %145, i64 8
  %171 = icmp eq i64 %168, 0
  br i1 %171, label %172, label %142, !llvm.loop !12

172:                                              ; preds = %137, %142, %117, %22
  %173 = phi i16* [ %26, %22 ], [ %29, %117 ], [ %29, %142 ], [ %29, %137 ]
  %174 = getelementptr inbounds i16, i16* %173, i64 %2
  store i16 0, i16* %174, align 2
  %175 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 1
  store i64 0, i64* %175, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector8String16C2EPKt(%"class.v8_inspector::String16"*, i16* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = load i16, i16* %1, align 2
  %4 = icmp eq i16 %3, 0
  br i1 %4, label %5, label %9

5:                                                ; preds = %2
  %6 = bitcast %"class.v8_inspector::String16"* %0 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %6, i64 0, i32 1, i32 1
  store i8 0, i8* %7, align 1
  %8 = bitcast %"class.v8_inspector::String16"* %0 to i16*
  br label %185

9:                                                ; preds = %2, %9
  %10 = phi i64 [ %12, %9 ], [ 0, %2 ]
  %11 = phi i16* [ %13, %9 ], [ %1, %2 ]
  %12 = add i64 %10, 1
  %13 = getelementptr inbounds i16, i16* %11, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = icmp eq i16 %14, 0
  br i1 %15, label %16, label %9

16:                                               ; preds = %9
  %17 = icmp ugt i64 %12, 9223372036854775791
  br i1 %17, label %18, label %20

18:                                               ; preds = %16
  %19 = bitcast %"class.v8_inspector::String16"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %19) #9
  unreachable

20:                                               ; preds = %16
  %21 = icmp ult i64 %12, 11
  br i1 %21, label %35, label %22

22:                                               ; preds = %20
  %23 = add nuw nsw i64 %10, 9
  %24 = and i64 %23, -8
  %25 = icmp slt i64 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  tail call void @abort() #9
  unreachable

27:                                               ; preds = %22
  %28 = shl i64 %24, 1
  %29 = tail call i8* @_Znwm(i64 %28) #10
  %30 = bitcast i8* %29 to i16*
  %31 = bitcast %"class.v8_inspector::String16"* %0 to i8**
  store i8* %29, i8** %31, align 8
  %32 = or i64 %24, -9223372036854775808
  %33 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %32, i64* %33, align 8
  %34 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %12, i64* %34, align 8
  br label %41

35:                                               ; preds = %20
  %36 = trunc i64 %12 to i8
  %37 = bitcast %"class.v8_inspector::String16"* %0 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %37, i64 0, i32 1, i32 1
  store i8 %36, i8* %38, align 1
  %39 = bitcast %"class.v8_inspector::String16"* %0 to i16*
  %40 = icmp eq i64 %12, 0
  br i1 %40, label %185, label %41

41:                                               ; preds = %35, %27
  %42 = phi i16* [ %30, %27 ], [ %39, %35 ]
  %43 = icmp ult i64 %12, 16
  br i1 %43, label %132, label %44

44:                                               ; preds = %41
  %45 = getelementptr i16, i16* %42, i64 %12
  %46 = getelementptr i16, i16* %1, i64 %12
  %47 = icmp ult i16* %42, %46
  %48 = icmp ugt i16* %45, %1
  %49 = and i1 %47, %48
  br i1 %49, label %132, label %50

50:                                               ; preds = %44
  %51 = and i64 %12, -16
  %52 = getelementptr i16, i16* %42, i64 %51
  %53 = sub i64 %12, %51
  %54 = getelementptr i16, i16* %1, i64 %51
  %55 = add i64 %51, -16
  %56 = lshr exact i64 %55, 4
  %57 = add nuw nsw i64 %56, 1
  %58 = and i64 %57, 3
  %59 = icmp ult i64 %55, 48
  br i1 %59, label %111, label %60

60:                                               ; preds = %50
  %61 = sub nsw i64 %57, %58
  br label %62

62:                                               ; preds = %62, %60
  %63 = phi i64 [ 0, %60 ], [ %108, %62 ]
  %64 = phi i64 [ %61, %60 ], [ %109, %62 ]
  %65 = getelementptr i16, i16* %42, i64 %63
  %66 = getelementptr i16, i16* %1, i64 %63
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !13
  %69 = getelementptr i16, i16* %66, i64 8
  %70 = bitcast i16* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2, !alias.scope !13
  %72 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %72, align 2, !alias.scope !16, !noalias !13
  %73 = getelementptr i16, i16* %65, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %74, align 2, !alias.scope !16, !noalias !13
  %75 = or i64 %63, 16
  %76 = getelementptr i16, i16* %42, i64 %75
  %77 = getelementptr i16, i16* %1, i64 %75
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !13
  %80 = getelementptr i16, i16* %77, i64 8
  %81 = bitcast i16* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !13
  %83 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %79, <8 x i16>* %83, align 2, !alias.scope !16, !noalias !13
  %84 = getelementptr i16, i16* %76, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %85, align 2, !alias.scope !16, !noalias !13
  %86 = or i64 %63, 32
  %87 = getelementptr i16, i16* %42, i64 %86
  %88 = getelementptr i16, i16* %1, i64 %86
  %89 = bitcast i16* %88 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2, !alias.scope !13
  %91 = getelementptr i16, i16* %88, i64 8
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !13
  %94 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %94, align 2, !alias.scope !16, !noalias !13
  %95 = getelementptr i16, i16* %87, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %96, align 2, !alias.scope !16, !noalias !13
  %97 = or i64 %63, 48
  %98 = getelementptr i16, i16* %42, i64 %97
  %99 = getelementptr i16, i16* %1, i64 %97
  %100 = bitcast i16* %99 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2, !alias.scope !13
  %102 = getelementptr i16, i16* %99, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !13
  %105 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %105, align 2, !alias.scope !16, !noalias !13
  %106 = getelementptr i16, i16* %98, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %107, align 2, !alias.scope !16, !noalias !13
  %108 = add i64 %63, 64
  %109 = add i64 %64, -4
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %62, !llvm.loop !18

111:                                              ; preds = %62, %50
  %112 = phi i64 [ 0, %50 ], [ %108, %62 ]
  %113 = icmp eq i64 %58, 0
  br i1 %113, label %130, label %114

114:                                              ; preds = %111, %114
  %115 = phi i64 [ %127, %114 ], [ %112, %111 ]
  %116 = phi i64 [ %128, %114 ], [ %58, %111 ]
  %117 = getelementptr i16, i16* %42, i64 %115
  %118 = getelementptr i16, i16* %1, i64 %115
  %119 = bitcast i16* %118 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 2, !alias.scope !13
  %121 = getelementptr i16, i16* %118, i64 8
  %122 = bitcast i16* %121 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2, !alias.scope !13
  %124 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %120, <8 x i16>* %124, align 2, !alias.scope !16, !noalias !13
  %125 = getelementptr i16, i16* %117, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %126, align 2, !alias.scope !16, !noalias !13
  %127 = add i64 %115, 16
  %128 = add i64 %116, -1
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %130, label %114, !llvm.loop !19

130:                                              ; preds = %114, %111
  %131 = icmp eq i64 %12, %51
  br i1 %131, label %185, label %132

132:                                              ; preds = %130, %44, %41
  %133 = phi i16* [ %42, %44 ], [ %42, %41 ], [ %52, %130 ]
  %134 = phi i64 [ %12, %44 ], [ %12, %41 ], [ %53, %130 ]
  %135 = phi i16* [ %1, %44 ], [ %1, %41 ], [ %54, %130 ]
  %136 = add i64 %134, -1
  %137 = and i64 %134, 7
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %150, label %139

139:                                              ; preds = %132, %139
  %140 = phi i16* [ %146, %139 ], [ %133, %132 ]
  %141 = phi i64 [ %145, %139 ], [ %134, %132 ]
  %142 = phi i16* [ %147, %139 ], [ %135, %132 ]
  %143 = phi i64 [ %148, %139 ], [ %137, %132 ]
  %144 = load i16, i16* %142, align 2
  store i16 %144, i16* %140, align 2
  %145 = add i64 %141, -1
  %146 = getelementptr inbounds i16, i16* %140, i64 1
  %147 = getelementptr inbounds i16, i16* %142, i64 1
  %148 = add i64 %143, -1
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %150, label %139, !llvm.loop !20

150:                                              ; preds = %139, %132
  %151 = phi i16* [ %133, %132 ], [ %146, %139 ]
  %152 = phi i64 [ %134, %132 ], [ %145, %139 ]
  %153 = phi i16* [ %135, %132 ], [ %147, %139 ]
  %154 = icmp ult i64 %136, 7
  br i1 %154, label %185, label %155

155:                                              ; preds = %150, %155
  %156 = phi i16* [ %182, %155 ], [ %151, %150 ]
  %157 = phi i64 [ %181, %155 ], [ %152, %150 ]
  %158 = phi i16* [ %183, %155 ], [ %153, %150 ]
  %159 = load i16, i16* %158, align 2
  store i16 %159, i16* %156, align 2
  %160 = getelementptr inbounds i16, i16* %156, i64 1
  %161 = getelementptr inbounds i16, i16* %158, i64 1
  %162 = load i16, i16* %161, align 2
  store i16 %162, i16* %160, align 2
  %163 = getelementptr inbounds i16, i16* %156, i64 2
  %164 = getelementptr inbounds i16, i16* %158, i64 2
  %165 = load i16, i16* %164, align 2
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds i16, i16* %156, i64 3
  %167 = getelementptr inbounds i16, i16* %158, i64 3
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %166, align 2
  %169 = getelementptr inbounds i16, i16* %156, i64 4
  %170 = getelementptr inbounds i16, i16* %158, i64 4
  %171 = load i16, i16* %170, align 2
  store i16 %171, i16* %169, align 2
  %172 = getelementptr inbounds i16, i16* %156, i64 5
  %173 = getelementptr inbounds i16, i16* %158, i64 5
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %172, align 2
  %175 = getelementptr inbounds i16, i16* %156, i64 6
  %176 = getelementptr inbounds i16, i16* %158, i64 6
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %156, i64 7
  %179 = getelementptr inbounds i16, i16* %158, i64 7
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = add i64 %157, -8
  %182 = getelementptr inbounds i16, i16* %156, i64 8
  %183 = getelementptr inbounds i16, i16* %158, i64 8
  %184 = icmp eq i64 %181, 0
  br i1 %184, label %185, label %155, !llvm.loop !21

185:                                              ; preds = %150, %155, %130, %5, %35
  %186 = phi i64 [ 0, %35 ], [ 0, %5 ], [ %12, %130 ], [ %12, %155 ], [ %12, %150 ]
  %187 = phi i16* [ %39, %35 ], [ %8, %5 ], [ %42, %130 ], [ %42, %155 ], [ %42, %150 ]
  %188 = getelementptr inbounds i16, i16* %187, i64 %186
  store i16 0, i16* %188, align 2
  %189 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 1
  store i64 0, i64* %189, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector8String16C2EPKc(%"class.v8_inspector::String16"*, i8* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = tail call i64 @strlen(i8* %1) #11
  %4 = bitcast %"class.v8_inspector::String16"* %0 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %4, i64 0, i32 1, i32 1
  %6 = bitcast %"class.v8_inspector::String16"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 32, i1 false) #12
  %7 = icmp eq i64 %3, 0
  br i1 %7, label %41, label %8

8:                                                ; preds = %2
  %9 = icmp ugt i64 %3, 10
  br i1 %9, label %10, label %29

10:                                               ; preds = %8
  %11 = add i64 %3, -10
  %12 = icmp ugt i64 %11, 9223372036854775781
  br i1 %12, label %13, label %15

13:                                               ; preds = %10
  %14 = bitcast %"class.v8_inspector::String16"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %14) #9
  unreachable

15:                                               ; preds = %10
  %16 = icmp ugt i64 %3, 20
  %17 = select i1 %16, i64 %3, i64 20
  %18 = add nuw nsw i64 %17, 8
  %19 = and i64 %18, -8
  %20 = icmp slt i64 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %15
  tail call void @abort() #9
  unreachable

22:                                               ; preds = %15
  %23 = shl i64 %19, 1
  %24 = tail call i8* @_Znwm(i64 %23) #10
  %25 = bitcast %"class.v8_inspector::String16"* %0 to i8**
  store i8* %24, i8** %25, align 8
  %26 = or i64 %19, -9223372036854775808
  %27 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %26, i64* %27, align 8
  %28 = bitcast i8* %24 to i16*
  br label %31

29:                                               ; preds = %8
  %30 = bitcast %"class.v8_inspector::String16"* %0 to i16*
  br label %31

31:                                               ; preds = %29, %22
  %32 = phi i16* [ %28, %22 ], [ %30, %29 ]
  %33 = bitcast i16* %32 to i8*
  %34 = shl i64 %3, 1
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %33, i8 0, i64 %34, i1 false) #12
  %35 = load i8, i8* %5, align 1
  %36 = icmp slt i8 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %3, i64* %38, align 8
  br label %43

39:                                               ; preds = %31
  %40 = trunc i64 %3 to i8
  store i8 %40, i8* %5, align 1
  br label %43

41:                                               ; preds = %2
  %42 = bitcast %"class.v8_inspector::String16"* %0 to i16*
  store i16 0, i16* %42, align 2
  store i8 0, i8* %5, align 1
  br label %84

43:                                               ; preds = %39, %37
  %44 = getelementptr inbounds i16, i16* %32, i64 %3
  store i16 0, i16* %44, align 2
  %45 = bitcast %"class.v8_inspector::String16"* %0 to i16*
  %46 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = and i64 %3, 1
  %48 = icmp eq i64 %3, 1
  br i1 %48, label %70, label %49

49:                                               ; preds = %43
  %50 = sub i64 %3, %47
  br label %51

51:                                               ; preds = %87, %49
  %52 = phi i64 [ 0, %49 ], [ %90, %87 ]
  %53 = phi i64 [ %50, %49 ], [ %91, %87 ]
  %54 = getelementptr inbounds i8, i8* %1, i64 %52
  %55 = load i8, i8* %54, align 1
  %56 = sext i8 %55 to i16
  %57 = load i8, i8* %5, align 1
  %58 = icmp slt i8 %57, 0
  br i1 %58, label %59, label %61

59:                                               ; preds = %51
  %60 = load i16*, i16** %46, align 8
  br label %61

61:                                               ; preds = %59, %51
  %62 = phi i16* [ %60, %59 ], [ %45, %51 ]
  %63 = getelementptr inbounds i16, i16* %62, i64 %52
  store i16 %56, i16* %63, align 2
  %64 = or i64 %52, 1
  %65 = getelementptr inbounds i8, i8* %1, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = sext i8 %66 to i16
  %68 = load i8, i8* %5, align 1
  %69 = icmp slt i8 %68, 0
  br i1 %69, label %85, label %87

70:                                               ; preds = %87, %43
  %71 = phi i64 [ 0, %43 ], [ %90, %87 ]
  %72 = icmp eq i64 %47, 0
  br i1 %72, label %84, label %73

73:                                               ; preds = %70
  %74 = getelementptr inbounds i8, i8* %1, i64 %71
  %75 = load i8, i8* %74, align 1
  %76 = sext i8 %75 to i16
  %77 = load i8, i8* %5, align 1
  %78 = icmp slt i8 %77, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %73
  %80 = load i16*, i16** %46, align 8
  br label %81

81:                                               ; preds = %79, %73
  %82 = phi i16* [ %80, %79 ], [ %45, %73 ]
  %83 = getelementptr inbounds i16, i16* %82, i64 %71
  store i16 %76, i16* %83, align 2
  br label %84

84:                                               ; preds = %81, %70, %41
  ret void

85:                                               ; preds = %61
  %86 = load i16*, i16** %46, align 8
  br label %87

87:                                               ; preds = %85, %61
  %88 = phi i16* [ %86, %85 ], [ %45, %61 ]
  %89 = getelementptr inbounds i16, i16* %88, i64 %64
  store i16 %67, i16* %89, align 2
  %90 = add nuw i64 %52, 2
  %91 = add i64 %53, -2
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %70, label %51
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector8String16C2EPKcm(%"class.v8_inspector::String16"*, i8* nocapture readonly, i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0
  %5 = bitcast %"class.v8_inspector::String16"* %0 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %6 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %5, i64 0, i32 1, i32 1
  %7 = bitcast %"class.v8_inspector::String16"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 32, i1 false)
  %8 = icmp eq i64 %2, 0
  br i1 %8, label %30, label %9

9:                                                ; preds = %3
  %10 = icmp ugt i64 %2, 10
  br i1 %10, label %11, label %18

11:                                               ; preds = %9
  %12 = add i64 %2, -10
  tail call void @_ZNSt3__112basic_stringItNS_11char_traitsItEENS_9allocatorItEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string"* %4, i64 10, i64 %12, i64 0, i64 0, i64 0, i64 0) #12
  %13 = load i8, i8* %6, align 1
  %14 = icmp slt i8 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i16*, i16** %16, align 8
  br label %20

18:                                               ; preds = %9, %11
  %19 = bitcast %"class.v8_inspector::String16"* %0 to i16*
  br label %20

20:                                               ; preds = %18, %15
  %21 = phi i16* [ %17, %15 ], [ %19, %18 ]
  %22 = bitcast i16* %21 to i8*
  %23 = shl i64 %2, 1
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %22, i8 0, i64 %23, i1 false) #12
  %24 = load i8, i8* %6, align 1
  %25 = icmp slt i8 %24, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %20
  %27 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %2, i64* %27, align 8
  br label %34

28:                                               ; preds = %20
  %29 = trunc i64 %2 to i8
  store i8 %29, i8* %6, align 1
  br label %34

30:                                               ; preds = %3
  %31 = bitcast %"class.v8_inspector::String16"* %0 to i16*
  %32 = getelementptr inbounds i16, i16* %31, i64 %2
  store i16 0, i16* %32, align 2
  %33 = trunc i64 %2 to i8
  store i8 %33, i8* %6, align 1
  br label %56

34:                                               ; preds = %28, %26
  %35 = getelementptr inbounds i16, i16* %21, i64 %2
  store i16 0, i16* %35, align 2
  %36 = bitcast %"class.v8_inspector::String16"* %0 to i16*
  %37 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = and i64 %2, 1
  %39 = icmp eq i64 %2, 1
  br i1 %39, label %42, label %40

40:                                               ; preds = %34
  %41 = sub i64 %2, %38
  br label %57

42:                                               ; preds = %78, %34
  %43 = phi i64 [ 0, %34 ], [ %81, %78 ]
  %44 = icmp eq i64 %38, 0
  br i1 %44, label %56, label %45

45:                                               ; preds = %42
  %46 = getelementptr inbounds i8, i8* %1, i64 %43
  %47 = load i8, i8* %46, align 1
  %48 = sext i8 %47 to i16
  %49 = load i8, i8* %6, align 1
  %50 = icmp slt i8 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %45
  %52 = load i16*, i16** %37, align 8
  br label %53

53:                                               ; preds = %51, %45
  %54 = phi i16* [ %52, %51 ], [ %36, %45 ]
  %55 = getelementptr inbounds i16, i16* %54, i64 %43
  store i16 %48, i16* %55, align 2
  br label %56

56:                                               ; preds = %53, %42, %30
  ret void

57:                                               ; preds = %78, %40
  %58 = phi i64 [ 0, %40 ], [ %81, %78 ]
  %59 = phi i64 [ %41, %40 ], [ %82, %78 ]
  %60 = getelementptr inbounds i8, i8* %1, i64 %58
  %61 = load i8, i8* %60, align 1
  %62 = sext i8 %61 to i16
  %63 = load i8, i8* %6, align 1
  %64 = icmp slt i8 %63, 0
  br i1 %64, label %65, label %67

65:                                               ; preds = %57
  %66 = load i16*, i16** %37, align 8
  br label %67

67:                                               ; preds = %57, %65
  %68 = phi i16* [ %66, %65 ], [ %36, %57 ]
  %69 = getelementptr inbounds i16, i16* %68, i64 %58
  store i16 %62, i16* %69, align 2
  %70 = or i64 %58, 1
  %71 = getelementptr inbounds i8, i8* %1, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = sext i8 %72 to i16
  %74 = load i8, i8* %6, align 1
  %75 = icmp slt i8 %74, 0
  br i1 %75, label %76, label %78

76:                                               ; preds = %67
  %77 = load i16*, i16** %37, align 8
  br label %78

78:                                               ; preds = %76, %67
  %79 = phi i16* [ %77, %76 ], [ %36, %67 ]
  %80 = getelementptr inbounds i16, i16* %79, i64 %70
  store i16 %73, i16* %80, align 2
  %81 = add nuw i64 %58, 2
  %82 = add i64 %59, -2
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %42, label %57
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector8String16C2ERKNSt3__112basic_stringItNS1_11char_traitsItEENS1_9allocatorItEEEE(%"class.v8_inspector::String16"*, %"class.std::__1::basic_string"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %3, i64 0, i32 1, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = bitcast %"class.v8_inspector::String16"* %0 to i8*
  %9 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 24, i1 false) #12
  br label %185

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i16*, i16** %11, align 8
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp ult i64 %14, 11
  br i1 %15, label %16, label %21

16:                                               ; preds = %10
  %17 = bitcast %"class.v8_inspector::String16"* %0 to i16*
  %18 = trunc i64 %14 to i8
  %19 = bitcast %"class.v8_inspector::String16"* %0 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %19, i64 0, i32 1, i32 1
  store i8 %18, i8* %20, align 1
  br label %38

21:                                               ; preds = %10
  %22 = icmp ugt i64 %14, 9223372036854775791
  br i1 %22, label %23, label %25

23:                                               ; preds = %21
  %24 = bitcast %"class.v8_inspector::String16"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %24) #9
  unreachable

25:                                               ; preds = %21
  %26 = add nuw nsw i64 %14, 8
  %27 = and i64 %26, -8
  %28 = icmp slt i64 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %25
  tail call void @abort() #9
  unreachable

30:                                               ; preds = %25
  %31 = shl i64 %27, 1
  %32 = tail call i8* @_Znwm(i64 %31) #10
  %33 = bitcast i8* %32 to i16*
  %34 = bitcast %"class.v8_inspector::String16"* %0 to i8**
  store i8* %32, i8** %34, align 8
  %35 = or i64 %27, -9223372036854775808
  %36 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %35, i64* %36, align 8
  %37 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %14, i64* %37, align 8
  br label %38

38:                                               ; preds = %30, %16
  %39 = phi i16* [ %17, %16 ], [ %33, %30 ]
  %40 = add nuw nsw i64 %14, 1
  %41 = add i64 %14, 1
  %42 = icmp ult i64 %41, 16
  br i1 %42, label %132, label %43

43:                                               ; preds = %38
  %44 = add i64 %14, 1
  %45 = getelementptr i16, i16* %39, i64 %44
  %46 = getelementptr i16, i16* %12, i64 %44
  %47 = icmp ult i16* %39, %46
  %48 = icmp ult i16* %12, %45
  %49 = and i1 %47, %48
  br i1 %49, label %132, label %50

50:                                               ; preds = %43
  %51 = and i64 %41, -16
  %52 = getelementptr i16, i16* %39, i64 %51
  %53 = sub i64 %40, %51
  %54 = getelementptr i16, i16* %12, i64 %51
  %55 = add i64 %51, -16
  %56 = lshr exact i64 %55, 4
  %57 = add nuw nsw i64 %56, 1
  %58 = and i64 %57, 3
  %59 = icmp ult i64 %55, 48
  br i1 %59, label %111, label %60

60:                                               ; preds = %50
  %61 = sub nsw i64 %57, %58
  br label %62

62:                                               ; preds = %62, %60
  %63 = phi i64 [ 0, %60 ], [ %108, %62 ]
  %64 = phi i64 [ %61, %60 ], [ %109, %62 ]
  %65 = getelementptr i16, i16* %39, i64 %63
  %66 = getelementptr i16, i16* %12, i64 %63
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !22
  %69 = getelementptr i16, i16* %66, i64 8
  %70 = bitcast i16* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2, !alias.scope !22
  %72 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %72, align 2, !alias.scope !25, !noalias !22
  %73 = getelementptr i16, i16* %65, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %74, align 2, !alias.scope !25, !noalias !22
  %75 = or i64 %63, 16
  %76 = getelementptr i16, i16* %39, i64 %75
  %77 = getelementptr i16, i16* %12, i64 %75
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !22
  %80 = getelementptr i16, i16* %77, i64 8
  %81 = bitcast i16* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !22
  %83 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %79, <8 x i16>* %83, align 2, !alias.scope !25, !noalias !22
  %84 = getelementptr i16, i16* %76, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %85, align 2, !alias.scope !25, !noalias !22
  %86 = or i64 %63, 32
  %87 = getelementptr i16, i16* %39, i64 %86
  %88 = getelementptr i16, i16* %12, i64 %86
  %89 = bitcast i16* %88 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2, !alias.scope !22
  %91 = getelementptr i16, i16* %88, i64 8
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !22
  %94 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %94, align 2, !alias.scope !25, !noalias !22
  %95 = getelementptr i16, i16* %87, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %96, align 2, !alias.scope !25, !noalias !22
  %97 = or i64 %63, 48
  %98 = getelementptr i16, i16* %39, i64 %97
  %99 = getelementptr i16, i16* %12, i64 %97
  %100 = bitcast i16* %99 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2, !alias.scope !22
  %102 = getelementptr i16, i16* %99, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !22
  %105 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %105, align 2, !alias.scope !25, !noalias !22
  %106 = getelementptr i16, i16* %98, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %107, align 2, !alias.scope !25, !noalias !22
  %108 = add i64 %63, 64
  %109 = add i64 %64, -4
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %62, !llvm.loop !27

111:                                              ; preds = %62, %50
  %112 = phi i64 [ 0, %50 ], [ %108, %62 ]
  %113 = icmp eq i64 %58, 0
  br i1 %113, label %130, label %114

114:                                              ; preds = %111, %114
  %115 = phi i64 [ %127, %114 ], [ %112, %111 ]
  %116 = phi i64 [ %128, %114 ], [ %58, %111 ]
  %117 = getelementptr i16, i16* %39, i64 %115
  %118 = getelementptr i16, i16* %12, i64 %115
  %119 = bitcast i16* %118 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 2, !alias.scope !22
  %121 = getelementptr i16, i16* %118, i64 8
  %122 = bitcast i16* %121 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2, !alias.scope !22
  %124 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %120, <8 x i16>* %124, align 2, !alias.scope !25, !noalias !22
  %125 = getelementptr i16, i16* %117, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %126, align 2, !alias.scope !25, !noalias !22
  %127 = add i64 %115, 16
  %128 = add i64 %116, -1
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %130, label %114, !llvm.loop !28

130:                                              ; preds = %114, %111
  %131 = icmp eq i64 %41, %51
  br i1 %131, label %185, label %132

132:                                              ; preds = %130, %43, %38
  %133 = phi i16* [ %39, %43 ], [ %39, %38 ], [ %52, %130 ]
  %134 = phi i64 [ %40, %43 ], [ %40, %38 ], [ %53, %130 ]
  %135 = phi i16* [ %12, %43 ], [ %12, %38 ], [ %54, %130 ]
  %136 = add i64 %134, -1
  %137 = and i64 %134, 7
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %150, label %139

139:                                              ; preds = %132, %139
  %140 = phi i16* [ %146, %139 ], [ %133, %132 ]
  %141 = phi i64 [ %145, %139 ], [ %134, %132 ]
  %142 = phi i16* [ %147, %139 ], [ %135, %132 ]
  %143 = phi i64 [ %148, %139 ], [ %137, %132 ]
  %144 = load i16, i16* %142, align 2
  store i16 %144, i16* %140, align 2
  %145 = add i64 %141, -1
  %146 = getelementptr inbounds i16, i16* %140, i64 1
  %147 = getelementptr inbounds i16, i16* %142, i64 1
  %148 = add i64 %143, -1
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %150, label %139, !llvm.loop !29

150:                                              ; preds = %139, %132
  %151 = phi i16* [ %133, %132 ], [ %146, %139 ]
  %152 = phi i64 [ %134, %132 ], [ %145, %139 ]
  %153 = phi i16* [ %135, %132 ], [ %147, %139 ]
  %154 = icmp ult i64 %136, 7
  br i1 %154, label %185, label %155

155:                                              ; preds = %150, %155
  %156 = phi i16* [ %182, %155 ], [ %151, %150 ]
  %157 = phi i64 [ %181, %155 ], [ %152, %150 ]
  %158 = phi i16* [ %183, %155 ], [ %153, %150 ]
  %159 = load i16, i16* %158, align 2
  store i16 %159, i16* %156, align 2
  %160 = getelementptr inbounds i16, i16* %156, i64 1
  %161 = getelementptr inbounds i16, i16* %158, i64 1
  %162 = load i16, i16* %161, align 2
  store i16 %162, i16* %160, align 2
  %163 = getelementptr inbounds i16, i16* %156, i64 2
  %164 = getelementptr inbounds i16, i16* %158, i64 2
  %165 = load i16, i16* %164, align 2
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds i16, i16* %156, i64 3
  %167 = getelementptr inbounds i16, i16* %158, i64 3
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %166, align 2
  %169 = getelementptr inbounds i16, i16* %156, i64 4
  %170 = getelementptr inbounds i16, i16* %158, i64 4
  %171 = load i16, i16* %170, align 2
  store i16 %171, i16* %169, align 2
  %172 = getelementptr inbounds i16, i16* %156, i64 5
  %173 = getelementptr inbounds i16, i16* %158, i64 5
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %172, align 2
  %175 = getelementptr inbounds i16, i16* %156, i64 6
  %176 = getelementptr inbounds i16, i16* %158, i64 6
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %156, i64 7
  %179 = getelementptr inbounds i16, i16* %158, i64 7
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = add i64 %157, -8
  %182 = getelementptr inbounds i16, i16* %156, i64 8
  %183 = getelementptr inbounds i16, i16* %158, i64 8
  %184 = icmp eq i64 %181, 0
  br i1 %184, label %185, label %155, !llvm.loop !30

185:                                              ; preds = %150, %155, %130, %7
  %186 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 1
  store i64 0, i64* %186, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector8String16C2EONSt3__112basic_stringItNS1_11char_traitsItEENS1_9allocatorItEEEE(%"class.v8_inspector::String16"*, %"class.std::__1::basic_string"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %3, i64 0, i32 1, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = bitcast %"class.v8_inspector::String16"* %0 to i8*
  %9 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 24, i1 false) #12
  br label %185

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i16*, i16** %11, align 8
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp ult i64 %14, 11
  br i1 %15, label %16, label %21

16:                                               ; preds = %10
  %17 = bitcast %"class.v8_inspector::String16"* %0 to i16*
  %18 = trunc i64 %14 to i8
  %19 = bitcast %"class.v8_inspector::String16"* %0 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %19, i64 0, i32 1, i32 1
  store i8 %18, i8* %20, align 1
  br label %38

21:                                               ; preds = %10
  %22 = icmp ugt i64 %14, 9223372036854775791
  br i1 %22, label %23, label %25

23:                                               ; preds = %21
  %24 = bitcast %"class.v8_inspector::String16"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %24) #9
  unreachable

25:                                               ; preds = %21
  %26 = add nuw nsw i64 %14, 8
  %27 = and i64 %26, -8
  %28 = icmp slt i64 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %25
  tail call void @abort() #9
  unreachable

30:                                               ; preds = %25
  %31 = shl i64 %27, 1
  %32 = tail call i8* @_Znwm(i64 %31) #10
  %33 = bitcast i8* %32 to i16*
  %34 = bitcast %"class.v8_inspector::String16"* %0 to i8**
  store i8* %32, i8** %34, align 8
  %35 = or i64 %27, -9223372036854775808
  %36 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %35, i64* %36, align 8
  %37 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %14, i64* %37, align 8
  br label %38

38:                                               ; preds = %30, %16
  %39 = phi i16* [ %17, %16 ], [ %33, %30 ]
  %40 = add nuw nsw i64 %14, 1
  %41 = add i64 %14, 1
  %42 = icmp ult i64 %41, 16
  br i1 %42, label %132, label %43

43:                                               ; preds = %38
  %44 = add i64 %14, 1
  %45 = getelementptr i16, i16* %39, i64 %44
  %46 = getelementptr i16, i16* %12, i64 %44
  %47 = icmp ult i16* %39, %46
  %48 = icmp ult i16* %12, %45
  %49 = and i1 %47, %48
  br i1 %49, label %132, label %50

50:                                               ; preds = %43
  %51 = and i64 %41, -16
  %52 = getelementptr i16, i16* %39, i64 %51
  %53 = sub i64 %40, %51
  %54 = getelementptr i16, i16* %12, i64 %51
  %55 = add i64 %51, -16
  %56 = lshr exact i64 %55, 4
  %57 = add nuw nsw i64 %56, 1
  %58 = and i64 %57, 3
  %59 = icmp ult i64 %55, 48
  br i1 %59, label %111, label %60

60:                                               ; preds = %50
  %61 = sub nsw i64 %57, %58
  br label %62

62:                                               ; preds = %62, %60
  %63 = phi i64 [ 0, %60 ], [ %108, %62 ]
  %64 = phi i64 [ %61, %60 ], [ %109, %62 ]
  %65 = getelementptr i16, i16* %39, i64 %63
  %66 = getelementptr i16, i16* %12, i64 %63
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !31
  %69 = getelementptr i16, i16* %66, i64 8
  %70 = bitcast i16* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2, !alias.scope !31
  %72 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %72, align 2, !alias.scope !34, !noalias !31
  %73 = getelementptr i16, i16* %65, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %74, align 2, !alias.scope !34, !noalias !31
  %75 = or i64 %63, 16
  %76 = getelementptr i16, i16* %39, i64 %75
  %77 = getelementptr i16, i16* %12, i64 %75
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !31
  %80 = getelementptr i16, i16* %77, i64 8
  %81 = bitcast i16* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !31
  %83 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %79, <8 x i16>* %83, align 2, !alias.scope !34, !noalias !31
  %84 = getelementptr i16, i16* %76, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %85, align 2, !alias.scope !34, !noalias !31
  %86 = or i64 %63, 32
  %87 = getelementptr i16, i16* %39, i64 %86
  %88 = getelementptr i16, i16* %12, i64 %86
  %89 = bitcast i16* %88 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2, !alias.scope !31
  %91 = getelementptr i16, i16* %88, i64 8
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !31
  %94 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %94, align 2, !alias.scope !34, !noalias !31
  %95 = getelementptr i16, i16* %87, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %96, align 2, !alias.scope !34, !noalias !31
  %97 = or i64 %63, 48
  %98 = getelementptr i16, i16* %39, i64 %97
  %99 = getelementptr i16, i16* %12, i64 %97
  %100 = bitcast i16* %99 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2, !alias.scope !31
  %102 = getelementptr i16, i16* %99, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !31
  %105 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %105, align 2, !alias.scope !34, !noalias !31
  %106 = getelementptr i16, i16* %98, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %107, align 2, !alias.scope !34, !noalias !31
  %108 = add i64 %63, 64
  %109 = add i64 %64, -4
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %62, !llvm.loop !36

111:                                              ; preds = %62, %50
  %112 = phi i64 [ 0, %50 ], [ %108, %62 ]
  %113 = icmp eq i64 %58, 0
  br i1 %113, label %130, label %114

114:                                              ; preds = %111, %114
  %115 = phi i64 [ %127, %114 ], [ %112, %111 ]
  %116 = phi i64 [ %128, %114 ], [ %58, %111 ]
  %117 = getelementptr i16, i16* %39, i64 %115
  %118 = getelementptr i16, i16* %12, i64 %115
  %119 = bitcast i16* %118 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 2, !alias.scope !31
  %121 = getelementptr i16, i16* %118, i64 8
  %122 = bitcast i16* %121 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2, !alias.scope !31
  %124 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %120, <8 x i16>* %124, align 2, !alias.scope !34, !noalias !31
  %125 = getelementptr i16, i16* %117, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %126, align 2, !alias.scope !34, !noalias !31
  %127 = add i64 %115, 16
  %128 = add i64 %116, -1
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %130, label %114, !llvm.loop !37

130:                                              ; preds = %114, %111
  %131 = icmp eq i64 %41, %51
  br i1 %131, label %185, label %132

132:                                              ; preds = %130, %43, %38
  %133 = phi i16* [ %39, %43 ], [ %39, %38 ], [ %52, %130 ]
  %134 = phi i64 [ %40, %43 ], [ %40, %38 ], [ %53, %130 ]
  %135 = phi i16* [ %12, %43 ], [ %12, %38 ], [ %54, %130 ]
  %136 = add i64 %134, -1
  %137 = and i64 %134, 7
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %150, label %139

139:                                              ; preds = %132, %139
  %140 = phi i16* [ %146, %139 ], [ %133, %132 ]
  %141 = phi i64 [ %145, %139 ], [ %134, %132 ]
  %142 = phi i16* [ %147, %139 ], [ %135, %132 ]
  %143 = phi i64 [ %148, %139 ], [ %137, %132 ]
  %144 = load i16, i16* %142, align 2
  store i16 %144, i16* %140, align 2
  %145 = add i64 %141, -1
  %146 = getelementptr inbounds i16, i16* %140, i64 1
  %147 = getelementptr inbounds i16, i16* %142, i64 1
  %148 = add i64 %143, -1
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %150, label %139, !llvm.loop !38

150:                                              ; preds = %139, %132
  %151 = phi i16* [ %133, %132 ], [ %146, %139 ]
  %152 = phi i64 [ %134, %132 ], [ %145, %139 ]
  %153 = phi i16* [ %135, %132 ], [ %147, %139 ]
  %154 = icmp ult i64 %136, 7
  br i1 %154, label %185, label %155

155:                                              ; preds = %150, %155
  %156 = phi i16* [ %182, %155 ], [ %151, %150 ]
  %157 = phi i64 [ %181, %155 ], [ %152, %150 ]
  %158 = phi i16* [ %183, %155 ], [ %153, %150 ]
  %159 = load i16, i16* %158, align 2
  store i16 %159, i16* %156, align 2
  %160 = getelementptr inbounds i16, i16* %156, i64 1
  %161 = getelementptr inbounds i16, i16* %158, i64 1
  %162 = load i16, i16* %161, align 2
  store i16 %162, i16* %160, align 2
  %163 = getelementptr inbounds i16, i16* %156, i64 2
  %164 = getelementptr inbounds i16, i16* %158, i64 2
  %165 = load i16, i16* %164, align 2
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds i16, i16* %156, i64 3
  %167 = getelementptr inbounds i16, i16* %158, i64 3
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %166, align 2
  %169 = getelementptr inbounds i16, i16* %156, i64 4
  %170 = getelementptr inbounds i16, i16* %158, i64 4
  %171 = load i16, i16* %170, align 2
  store i16 %171, i16* %169, align 2
  %172 = getelementptr inbounds i16, i16* %156, i64 5
  %173 = getelementptr inbounds i16, i16* %158, i64 5
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %172, align 2
  %175 = getelementptr inbounds i16, i16* %156, i64 6
  %176 = getelementptr inbounds i16, i16* %158, i64 6
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %156, i64 7
  %179 = getelementptr inbounds i16, i16* %158, i64 7
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = add i64 %157, -8
  %182 = getelementptr inbounds i16, i16* %156, i64 8
  %183 = getelementptr inbounds i16, i16* %158, i64 8
  %184 = icmp eq i64 %181, 0
  br i1 %184, label %185, label %155, !llvm.loop !39

185:                                              ; preds = %150, %155, %130, %7
  %186 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 1
  store i64 0, i64* %186, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector8String1611fromIntegerEi(%"class.v8_inspector::String16"* noalias sret, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca [50 x i8], align 16
  %4 = getelementptr inbounds [50 x i8], [50 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 50, i8* nonnull %4) #12
  %5 = call i8* @_ZN2v88internal12IntToCStringEiNS0_6VectorIcEE(i32 %1, i8* nonnull %4, i64 50) #12
  call void @_ZN12v8_inspector8String16C2EPKc(%"class.v8_inspector::String16"* %0, i8* %5)
  call void @llvm.lifetime.end.p0i8(i64 50, i8* nonnull %4) #12
  ret void
}

declare i8* @_ZN2v88internal12IntToCStringEiNS0_6VectorIcEE(i32, i8*, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector8String1611fromIntegerEm(%"class.v8_inspector::String16"* noalias sret, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca [50 x i8], align 16
  %4 = getelementptr inbounds [50 x i8], [50 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 50, i8* nonnull %4) #12
  %5 = call i32 (i8*, i32, i8*, ...) @_ZN2v84base2OS8SNPrintFEPciPKcz(i8* nonnull %4, i32 50, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 %1) #12
  call void @_ZN12v8_inspector8String16C2EPKc(%"class.v8_inspector::String16"* %0, i8* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 50, i8* nonnull %4) #12
  ret void
}

declare i32 @_ZN2v84base2OS8SNPrintFEPciPKcz(i8*, i32, i8*, ...) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector8String1613fromInteger64El(%"class.v8_inspector::String16"* noalias sret, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca [50 x i8], align 16
  %4 = getelementptr inbounds [50 x i8], [50 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 50, i8* nonnull %4) #12
  %5 = call i32 (i8*, i32, i8*, ...) @_ZN2v84base2OS8SNPrintFEPciPKcz(i8* nonnull %4, i32 50, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i64 %1) #12
  call void @_ZN12v8_inspector8String16C2EPKc(%"class.v8_inspector::String16"* %0, i8* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 50, i8* nonnull %4) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector8String1610fromDoubleEd(%"class.v8_inspector::String16"* noalias sret, double) local_unnamed_addr #0 align 2 {
  %3 = alloca [50 x i8], align 16
  %4 = getelementptr inbounds [50 x i8], [50 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 50, i8* nonnull %4) #12
  %5 = call i8* @_ZN2v88internal15DoubleToCStringEdNS0_6VectorIcEE(double %1, i8* nonnull %4, i64 50) #12
  call void @_ZN12v8_inspector8String16C2EPKc(%"class.v8_inspector::String16"* %0, i8* %5)
  call void @llvm.lifetime.end.p0i8(i64 50, i8* nonnull %4) #12
  ret void
}

declare i8* @_ZN2v88internal15DoubleToCStringEdNS0_6VectorIcEE(double, i8*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector8String1610fromDoubleEdi(%"class.v8_inspector::String16"* noalias sret, double, i32) local_unnamed_addr #0 align 2 {
  %4 = tail call i8* @_ZN2v88internal24DoubleToPrecisionCStringEdi(double %1, i32 %2) #12
  tail call void @_ZN12v8_inspector8String16C2EPKc(%"class.v8_inspector::String16"* %0, i8* %4)
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %3
  tail call void @_ZdaPv(i8* nonnull %4) #10
  br label %7

7:                                                ; preds = %3, %6
  ret void
}

declare i8* @_ZN2v88internal24DoubleToPrecisionCStringEdi(double, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK12v8_inspector8String1611toInteger64EPb(%"class.v8_inspector::String16"* nocapture readonly, i8*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::vector.23", align 8
  %4 = alloca i8*, align 8
  %5 = bitcast %"class.v8_inspector::String16"* %0 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %6 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %5, i64 0, i32 1, i32 1
  %7 = load i8, i8* %6, align 1
  %8 = icmp slt i8 %7, 0
  br i1 %8, label %9, label %14

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i16*, i16** %10, align 8
  %12 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  br label %17

14:                                               ; preds = %2
  %15 = bitcast %"class.v8_inspector::String16"* %0 to i16*
  %16 = zext i8 %7 to i64
  br label %17

17:                                               ; preds = %9, %14
  %18 = phi i16* [ %11, %9 ], [ %15, %14 ]
  %19 = phi i64 [ %13, %9 ], [ %16, %14 ]
  %20 = bitcast %"class.std::__1::vector.23"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 24, i1 false) #12
  %21 = add i64 %19, 1
  %22 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %23 = bitcast i8** %22 to i64*
  %24 = bitcast %"class.std::__1::vector.23"* %3 to i64*
  %25 = icmp eq i64 %21, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %17
  %27 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %3, i64 0, i32 0, i32 1
  %28 = bitcast i8** %27 to i64*
  %29 = tail call i8* @_Znwm(i64 %21) #10
  %30 = ptrtoint i8* %29 to i64
  %31 = getelementptr inbounds i8, i8* %29, i64 %21
  %32 = ptrtoint i8* %31 to i64
  store i64 %30, i64* %24, align 8
  store i64 %30, i64* %28, align 8
  store i64 %32, i64* %23, align 8
  %33 = icmp eq i64 %19, 0
  br i1 %33, label %102, label %34

34:                                               ; preds = %17, %26
  %35 = phi i8* [ %29, %26 ], [ null, %17 ]
  %36 = phi i64 [ %30, %26 ], [ 0, %17 ]
  %37 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %3, i64 0, i32 0, i32 1
  %38 = bitcast i8** %37 to i64*
  br label %39

39:                                               ; preds = %94, %34
  %40 = phi i64 [ %36, %34 ], [ %96, %94 ]
  %41 = phi i8* [ %35, %34 ], [ %95, %94 ]
  %42 = phi i64 [ 0, %34 ], [ %97, %94 ]
  %43 = getelementptr inbounds i16, i16* %18, i64 %42
  %44 = load i16, i16* %43, align 2
  %45 = icmp ult i16 %44, 128
  br i1 %45, label %49, label %46

46:                                               ; preds = %39
  %47 = icmp eq i8* %1, null
  br i1 %47, label %164, label %48

48:                                               ; preds = %46
  store i8 0, i8* %1, align 1
  br label %164

49:                                               ; preds = %39
  %50 = trunc i16 %44 to i8
  %51 = load i8*, i8** %22, align 8
  %52 = icmp ult i8* %41, %51
  %53 = ptrtoint i8* %51 to i64
  br i1 %52, label %54, label %57

54:                                               ; preds = %49
  store i8 %50, i8* %41, align 1
  %55 = getelementptr inbounds i8, i8* %41, i64 1
  %56 = ptrtoint i8* %55 to i64
  store i64 %56, i64* %38, align 8
  br label %94

57:                                               ; preds = %49
  %58 = ptrtoint i8* %41 to i64
  %59 = load i64, i64* %24, align 8
  %60 = sub i64 %58, %59
  %61 = add i64 %60, 1
  %62 = icmp slt i64 %61, 0
  %63 = inttoptr i64 %59 to i8*
  br i1 %62, label %64, label %66

64:                                               ; preds = %57
  %65 = bitcast %"class.std::__1::vector.23"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %65) #9
  unreachable

66:                                               ; preds = %57
  %67 = sub i64 %53, %59
  %68 = icmp ult i64 %67, 4611686018427387903
  br i1 %68, label %69, label %74

69:                                               ; preds = %66
  %70 = shl i64 %67, 1
  %71 = icmp ult i64 %70, %61
  %72 = select i1 %71, i64 %61, i64 %70
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %77, label %74

74:                                               ; preds = %69, %66
  %75 = phi i64 [ %72, %69 ], [ 9223372036854775807, %66 ]
  %76 = tail call i8* @_Znwm(i64 %75) #10
  br label %77

77:                                               ; preds = %74, %69
  %78 = phi i64 [ %75, %74 ], [ 0, %69 ]
  %79 = phi i8* [ %76, %74 ], [ null, %69 ]
  %80 = getelementptr inbounds i8, i8* %79, i64 %60
  %81 = getelementptr inbounds i8, i8* %79, i64 %78
  %82 = ptrtoint i8* %81 to i64
  store i8 %50, i8* %80, align 1
  %83 = getelementptr inbounds i8, i8* %80, i64 1
  %84 = ptrtoint i8* %83 to i64
  %85 = sub i64 %40, %59
  %86 = sub i64 0, %85
  %87 = getelementptr inbounds i8, i8* %80, i64 %86
  %88 = ptrtoint i8* %87 to i64
  %89 = icmp sgt i64 %85, 0
  br i1 %89, label %90, label %91

90:                                               ; preds = %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %87, i8* align 1 %63, i64 %85, i1 false) #12
  br label %91

91:                                               ; preds = %90, %77
  store i64 %88, i64* %24, align 8
  store i64 %84, i64* %38, align 8
  store i64 %82, i64* %23, align 8
  %92 = icmp eq i64 %59, 0
  br i1 %92, label %94, label %93

93:                                               ; preds = %91
  tail call void @_ZdlPv(i8* nonnull %63) #10
  br label %94

94:                                               ; preds = %93, %91, %54
  %95 = phi i8* [ %55, %54 ], [ %83, %91 ], [ %83, %93 ]
  %96 = phi i64 [ %56, %54 ], [ %84, %91 ], [ %84, %93 ]
  %97 = add nuw i64 %42, 1
  %98 = icmp eq i64 %97, %19
  br i1 %98, label %99, label %39

99:                                               ; preds = %94
  %100 = load i8*, i8** %22, align 8
  %101 = ptrtoint i8* %100 to i64
  br label %102

102:                                              ; preds = %99, %26
  %103 = phi i64 [ %101, %99 ], [ %32, %26 ]
  %104 = phi i64 [ %96, %99 ], [ %30, %26 ]
  %105 = phi i8* [ %100, %99 ], [ %31, %26 ]
  %106 = phi i8* [ %95, %99 ], [ %29, %26 ]
  %107 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %3, i64 0, i32 0, i32 1
  %108 = icmp ult i8* %106, %105
  br i1 %108, label %109, label %115

109:                                              ; preds = %102
  store i8 0, i8* %106, align 1
  %110 = getelementptr inbounds i8, i8* %106, i64 1
  %111 = ptrtoint i8* %110 to i64
  %112 = bitcast i8** %107 to i64*
  store i64 %111, i64* %112, align 8
  %113 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %3, i64 0, i32 0, i32 0
  %114 = load i8*, i8** %113, align 8
  br label %153

115:                                              ; preds = %102
  %116 = ptrtoint i8* %106 to i64
  %117 = bitcast i8** %107 to i64*
  %118 = load i64, i64* %24, align 8
  %119 = sub i64 %116, %118
  %120 = add i64 %119, 1
  %121 = icmp slt i64 %120, 0
  %122 = inttoptr i64 %118 to i8*
  br i1 %121, label %123, label %125

123:                                              ; preds = %115
  %124 = bitcast %"class.std::__1::vector.23"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %124) #9
  unreachable

125:                                              ; preds = %115
  %126 = sub i64 %103, %118
  %127 = icmp ult i64 %126, 4611686018427387903
  br i1 %127, label %128, label %133

128:                                              ; preds = %125
  %129 = shl i64 %126, 1
  %130 = icmp ult i64 %129, %120
  %131 = select i1 %130, i64 %120, i64 %129
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %136, label %133

133:                                              ; preds = %128, %125
  %134 = phi i64 [ %131, %128 ], [ 9223372036854775807, %125 ]
  %135 = tail call i8* @_Znwm(i64 %134) #10
  br label %136

136:                                              ; preds = %133, %128
  %137 = phi i64 [ %134, %133 ], [ 0, %128 ]
  %138 = phi i8* [ %135, %133 ], [ null, %128 ]
  %139 = getelementptr inbounds i8, i8* %138, i64 %119
  %140 = getelementptr inbounds i8, i8* %138, i64 %137
  %141 = ptrtoint i8* %140 to i64
  store i8 0, i8* %139, align 1
  %142 = getelementptr inbounds i8, i8* %139, i64 1
  %143 = ptrtoint i8* %142 to i64
  %144 = sub i64 %104, %118
  %145 = sub i64 0, %144
  %146 = getelementptr inbounds i8, i8* %139, i64 %145
  %147 = ptrtoint i8* %146 to i64
  %148 = icmp sgt i64 %144, 0
  br i1 %148, label %149, label %150

149:                                              ; preds = %136
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %146, i8* align 1 %122, i64 %144, i1 false) #12
  br label %150

150:                                              ; preds = %149, %136
  store i64 %147, i64* %24, align 8
  store i64 %143, i64* %117, align 8
  store i64 %141, i64* %23, align 8
  %151 = icmp eq i64 %118, 0
  br i1 %151, label %153, label %152

152:                                              ; preds = %150
  tail call void @_ZdlPv(i8* nonnull %122) #10
  br label %153

153:                                              ; preds = %152, %150, %109
  %154 = phi i8* [ %114, %109 ], [ %146, %150 ], [ %146, %152 ]
  %155 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %155) #12
  %156 = call i64 @strtoll(i8* %154, i8** nonnull %4, i32 10) #12
  %157 = icmp eq i8* %1, null
  br i1 %157, label %163, label %158

158:                                              ; preds = %153
  %159 = load i8*, i8** %4, align 8
  %160 = load i8, i8* %159, align 1
  %161 = icmp eq i8 %160, 0
  %162 = zext i1 %161 to i8
  store i8 %162, i8* %1, align 1
  br label %163

163:                                              ; preds = %158, %153
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %155) #12
  br label %164

164:                                              ; preds = %163, %48, %46
  %165 = phi i64 [ %156, %163 ], [ 0, %48 ], [ 0, %46 ]
  %166 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %3, i64 0, i32 0, i32 0
  %167 = load i8*, i8** %166, align 8
  %168 = icmp eq i8* %167, null
  br i1 %168, label %173, label %169

169:                                              ; preds = %164
  %170 = ptrtoint i8* %167 to i64
  %171 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %3, i64 0, i32 0, i32 1
  %172 = bitcast i8** %171 to i64*
  store i64 %170, i64* %172, align 8
  tail call void @_ZdlPv(i8* nonnull %167) #10
  br label %173

173:                                              ; preds = %164, %169
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #12
  ret i64 %165
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK12v8_inspector8String169toIntegerEPb(%"class.v8_inspector::String16"* nocapture readonly, i8*) local_unnamed_addr #0 align 2 {
  %3 = tail call i64 @_ZNK12v8_inspector8String1611toInteger64EPb(%"class.v8_inspector::String16"* %0, i8* %1)
  %4 = icmp eq i8* %1, null
  br i1 %4, label %12, label %5

5:                                                ; preds = %2
  %6 = load i8, i8* %1, align 1, !range !40
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %12, label %8

8:                                                ; preds = %5
  %9 = add i64 %3, 2147483648
  %10 = icmp ult i64 %9, 4294967296
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %1, align 1
  br label %12

12:                                               ; preds = %5, %2, %8
  %13 = trunc i64 %3 to i32
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK12v8_inspector8String1615stripWhiteSpaceEv(%"class.v8_inspector::String16"* noalias sret, %"class.v8_inspector::String16"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.v8_inspector::String16"* %1 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %3, i64 0, i32 1, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  br label %12

10:                                               ; preds = %2
  %11 = zext i8 %5 to i64
  br label %12

12:                                               ; preds = %7, %10
  %13 = phi i64 [ %9, %7 ], [ %11, %10 ]
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %12
  %16 = bitcast %"class.v8_inspector::String16"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 32, i1 false)
  br label %453

17:                                               ; preds = %12
  br i1 %6, label %23, label %18

18:                                               ; preds = %17
  %19 = zext i8 %5 to i64
  %20 = add nsw i64 %19, -1
  %21 = bitcast %"class.v8_inspector::String16"* %1 to i16*
  %22 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %39

23:                                               ; preds = %17
  %24 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = add i64 %25, -1
  %27 = bitcast %"class.v8_inspector::String16"* %1 to i16*
  %28 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load i16*, i16** %28, align 8
  br label %30

30:                                               ; preds = %23, %36
  %31 = phi i64 [ %37, %36 ], [ 0, %23 ]
  %32 = getelementptr inbounds i16, i16* %29, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = icmp ult i16 %33, 33
  br i1 %34, label %35, label %48

35:                                               ; preds = %30
  switch i16 %33, label %48 [
    i16 32, label %36
    i16 13, label %36
    i16 12, label %36
    i16 11, label %36
    i16 10, label %36
    i16 9, label %36
  ]

36:                                               ; preds = %35, %35, %35, %35, %35, %35
  %37 = add i64 %31, 1
  %38 = icmp ugt i64 %37, %26
  br i1 %38, label %66, label %30

39:                                               ; preds = %18, %45
  %40 = phi i64 [ %46, %45 ], [ 0, %18 ]
  %41 = getelementptr inbounds i16, i16* %21, i64 %40
  %42 = load i16, i16* %41, align 2
  %43 = icmp ult i16 %42, 33
  br i1 %43, label %44, label %48

44:                                               ; preds = %39
  switch i16 %42, label %48 [
    i16 32, label %45
    i16 13, label %45
    i16 12, label %45
    i16 11, label %45
    i16 10, label %45
    i16 9, label %45
  ]

45:                                               ; preds = %44, %44, %44, %44, %44, %44
  %46 = add i64 %40, 1
  %47 = icmp ugt i64 %46, %20
  br i1 %47, label %66, label %39

48:                                               ; preds = %44, %39, %30, %35
  %49 = phi i16** [ %28, %35 ], [ %28, %30 ], [ %22, %39 ], [ %22, %44 ]
  %50 = phi i16* [ %27, %35 ], [ %27, %30 ], [ %21, %39 ], [ %21, %44 ]
  %51 = phi i64 [ %26, %35 ], [ %26, %30 ], [ %20, %39 ], [ %20, %44 ]
  %52 = phi i64 [ %31, %35 ], [ %31, %30 ], [ %40, %39 ], [ %40, %44 ]
  %53 = icmp eq i64 %51, 0
  br i1 %53, label %77, label %54

54:                                               ; preds = %48
  br i1 %6, label %55, label %68

55:                                               ; preds = %54
  %56 = load i16*, i16** %49, align 8
  br label %57

57:                                               ; preds = %55, %63
  %58 = phi i64 [ %64, %63 ], [ %51, %55 ]
  %59 = getelementptr inbounds i16, i16* %56, i64 %58
  %60 = load i16, i16* %59, align 2
  %61 = icmp ult i16 %60, 33
  br i1 %61, label %62, label %77

62:                                               ; preds = %57
  switch i16 %60, label %77 [
    i16 32, label %63
    i16 13, label %63
    i16 12, label %63
    i16 11, label %63
    i16 10, label %63
    i16 9, label %63
  ]

63:                                               ; preds = %62, %62, %62, %62, %62, %62
  %64 = add i64 %58, -1
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %77, label %57

66:                                               ; preds = %45, %36
  %67 = bitcast %"class.v8_inspector::String16"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %67, i8 0, i64 32, i1 false)
  br label %453

68:                                               ; preds = %54, %74
  %69 = phi i64 [ %75, %74 ], [ %51, %54 ]
  %70 = getelementptr inbounds i16, i16* %50, i64 %69
  %71 = load i16, i16* %70, align 2
  %72 = icmp ult i16 %71, 33
  br i1 %72, label %73, label %77

73:                                               ; preds = %68
  switch i16 %71, label %77 [
    i16 32, label %74
    i16 13, label %74
    i16 12, label %74
    i16 11, label %74
    i16 10, label %74
    i16 9, label %74
  ]

74:                                               ; preds = %73, %73, %73, %73, %73, %73
  %75 = add i64 %69, -1
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %68

77:                                               ; preds = %74, %68, %73, %63, %57, %62, %48
  %78 = phi i64 [ 0, %48 ], [ %58, %62 ], [ %58, %57 ], [ 0, %63 ], [ %69, %73 ], [ %69, %68 ], [ 0, %74 ]
  %79 = icmp eq i64 %52, 0
  br i1 %79, label %80, label %272

80:                                               ; preds = %77
  br i1 %6, label %81, label %84

81:                                               ; preds = %80
  %82 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %83 = load i64, i64* %82, align 8
  br label %86

84:                                               ; preds = %80
  %85 = zext i8 %5 to i64
  br label %86

86:                                               ; preds = %81, %84
  %87 = phi i64 [ %83, %81 ], [ %85, %84 ]
  %88 = add i64 %87, -1
  %89 = icmp eq i64 %78, %88
  br i1 %89, label %90, label %272

90:                                               ; preds = %86
  br i1 %6, label %94, label %91

91:                                               ; preds = %90
  %92 = bitcast %"class.v8_inspector::String16"* %0 to i8*
  %93 = bitcast %"class.v8_inspector::String16"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %92, i8* align 8 %93, i64 24, i1 false) #12
  br label %268

94:                                               ; preds = %90
  %95 = load i16*, i16** %49, align 8
  %96 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %97 = load i64, i64* %96, align 8
  %98 = icmp ult i64 %97, 11
  br i1 %98, label %99, label %104

99:                                               ; preds = %94
  %100 = bitcast %"class.v8_inspector::String16"* %0 to i16*
  %101 = trunc i64 %97 to i8
  %102 = bitcast %"class.v8_inspector::String16"* %0 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %103 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %102, i64 0, i32 1, i32 1
  store i8 %101, i8* %103, align 1
  br label %121

104:                                              ; preds = %94
  %105 = icmp ugt i64 %97, 9223372036854775791
  br i1 %105, label %106, label %108

106:                                              ; preds = %104
  %107 = bitcast %"class.v8_inspector::String16"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %107) #9
  unreachable

108:                                              ; preds = %104
  %109 = add nuw nsw i64 %97, 8
  %110 = and i64 %109, -8
  %111 = icmp slt i64 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %108
  tail call void @abort() #9
  unreachable

113:                                              ; preds = %108
  %114 = shl i64 %110, 1
  %115 = tail call i8* @_Znwm(i64 %114) #10
  %116 = bitcast i8* %115 to i16*
  %117 = bitcast %"class.v8_inspector::String16"* %0 to i8**
  store i8* %115, i8** %117, align 8
  %118 = or i64 %110, -9223372036854775808
  %119 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %97, i64* %120, align 8
  br label %121

121:                                              ; preds = %113, %99
  %122 = phi i16* [ %100, %99 ], [ %116, %113 ]
  %123 = add nuw nsw i64 %97, 1
  %124 = add i64 %97, 1
  %125 = icmp ult i64 %124, 16
  br i1 %125, label %215, label %126

126:                                              ; preds = %121
  %127 = add i64 %97, 1
  %128 = getelementptr i16, i16* %122, i64 %127
  %129 = getelementptr i16, i16* %95, i64 %127
  %130 = icmp ult i16* %122, %129
  %131 = icmp ult i16* %95, %128
  %132 = and i1 %130, %131
  br i1 %132, label %215, label %133

133:                                              ; preds = %126
  %134 = and i64 %124, -16
  %135 = getelementptr i16, i16* %122, i64 %134
  %136 = sub i64 %123, %134
  %137 = getelementptr i16, i16* %95, i64 %134
  %138 = add i64 %134, -16
  %139 = lshr exact i64 %138, 4
  %140 = add nuw nsw i64 %139, 1
  %141 = and i64 %140, 3
  %142 = icmp ult i64 %138, 48
  br i1 %142, label %194, label %143

143:                                              ; preds = %133
  %144 = sub nsw i64 %140, %141
  br label %145

145:                                              ; preds = %145, %143
  %146 = phi i64 [ 0, %143 ], [ %191, %145 ]
  %147 = phi i64 [ %144, %143 ], [ %192, %145 ]
  %148 = getelementptr i16, i16* %122, i64 %146
  %149 = getelementptr i16, i16* %95, i64 %146
  %150 = bitcast i16* %149 to <8 x i16>*
  %151 = load <8 x i16>, <8 x i16>* %150, align 2, !alias.scope !41
  %152 = getelementptr i16, i16* %149, i64 8
  %153 = bitcast i16* %152 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 2, !alias.scope !41
  %155 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %155, align 2, !alias.scope !44, !noalias !41
  %156 = getelementptr i16, i16* %148, i64 8
  %157 = bitcast i16* %156 to <8 x i16>*
  store <8 x i16> %154, <8 x i16>* %157, align 2, !alias.scope !44, !noalias !41
  %158 = or i64 %146, 16
  %159 = getelementptr i16, i16* %122, i64 %158
  %160 = getelementptr i16, i16* %95, i64 %158
  %161 = bitcast i16* %160 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 2, !alias.scope !41
  %163 = getelementptr i16, i16* %160, i64 8
  %164 = bitcast i16* %163 to <8 x i16>*
  %165 = load <8 x i16>, <8 x i16>* %164, align 2, !alias.scope !41
  %166 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %162, <8 x i16>* %166, align 2, !alias.scope !44, !noalias !41
  %167 = getelementptr i16, i16* %159, i64 8
  %168 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> %165, <8 x i16>* %168, align 2, !alias.scope !44, !noalias !41
  %169 = or i64 %146, 32
  %170 = getelementptr i16, i16* %122, i64 %169
  %171 = getelementptr i16, i16* %95, i64 %169
  %172 = bitcast i16* %171 to <8 x i16>*
  %173 = load <8 x i16>, <8 x i16>* %172, align 2, !alias.scope !41
  %174 = getelementptr i16, i16* %171, i64 8
  %175 = bitcast i16* %174 to <8 x i16>*
  %176 = load <8 x i16>, <8 x i16>* %175, align 2, !alias.scope !41
  %177 = bitcast i16* %170 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %177, align 2, !alias.scope !44, !noalias !41
  %178 = getelementptr i16, i16* %170, i64 8
  %179 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %179, align 2, !alias.scope !44, !noalias !41
  %180 = or i64 %146, 48
  %181 = getelementptr i16, i16* %122, i64 %180
  %182 = getelementptr i16, i16* %95, i64 %180
  %183 = bitcast i16* %182 to <8 x i16>*
  %184 = load <8 x i16>, <8 x i16>* %183, align 2, !alias.scope !41
  %185 = getelementptr i16, i16* %182, i64 8
  %186 = bitcast i16* %185 to <8 x i16>*
  %187 = load <8 x i16>, <8 x i16>* %186, align 2, !alias.scope !41
  %188 = bitcast i16* %181 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %188, align 2, !alias.scope !44, !noalias !41
  %189 = getelementptr i16, i16* %181, i64 8
  %190 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %187, <8 x i16>* %190, align 2, !alias.scope !44, !noalias !41
  %191 = add i64 %146, 64
  %192 = add i64 %147, -4
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %194, label %145, !llvm.loop !46

194:                                              ; preds = %145, %133
  %195 = phi i64 [ 0, %133 ], [ %191, %145 ]
  %196 = icmp eq i64 %141, 0
  br i1 %196, label %213, label %197

197:                                              ; preds = %194, %197
  %198 = phi i64 [ %210, %197 ], [ %195, %194 ]
  %199 = phi i64 [ %211, %197 ], [ %141, %194 ]
  %200 = getelementptr i16, i16* %122, i64 %198
  %201 = getelementptr i16, i16* %95, i64 %198
  %202 = bitcast i16* %201 to <8 x i16>*
  %203 = load <8 x i16>, <8 x i16>* %202, align 2, !alias.scope !41
  %204 = getelementptr i16, i16* %201, i64 8
  %205 = bitcast i16* %204 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 2, !alias.scope !41
  %207 = bitcast i16* %200 to <8 x i16>*
  store <8 x i16> %203, <8 x i16>* %207, align 2, !alias.scope !44, !noalias !41
  %208 = getelementptr i16, i16* %200, i64 8
  %209 = bitcast i16* %208 to <8 x i16>*
  store <8 x i16> %206, <8 x i16>* %209, align 2, !alias.scope !44, !noalias !41
  %210 = add i64 %198, 16
  %211 = add i64 %199, -1
  %212 = icmp eq i64 %211, 0
  br i1 %212, label %213, label %197, !llvm.loop !47

213:                                              ; preds = %197, %194
  %214 = icmp eq i64 %124, %134
  br i1 %214, label %268, label %215

215:                                              ; preds = %213, %126, %121
  %216 = phi i16* [ %122, %126 ], [ %122, %121 ], [ %135, %213 ]
  %217 = phi i64 [ %123, %126 ], [ %123, %121 ], [ %136, %213 ]
  %218 = phi i16* [ %95, %126 ], [ %95, %121 ], [ %137, %213 ]
  %219 = add i64 %217, -1
  %220 = and i64 %217, 7
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %233, label %222

222:                                              ; preds = %215, %222
  %223 = phi i16* [ %229, %222 ], [ %216, %215 ]
  %224 = phi i64 [ %228, %222 ], [ %217, %215 ]
  %225 = phi i16* [ %230, %222 ], [ %218, %215 ]
  %226 = phi i64 [ %231, %222 ], [ %220, %215 ]
  %227 = load i16, i16* %225, align 2
  store i16 %227, i16* %223, align 2
  %228 = add i64 %224, -1
  %229 = getelementptr inbounds i16, i16* %223, i64 1
  %230 = getelementptr inbounds i16, i16* %225, i64 1
  %231 = add i64 %226, -1
  %232 = icmp eq i64 %231, 0
  br i1 %232, label %233, label %222, !llvm.loop !48

233:                                              ; preds = %222, %215
  %234 = phi i16* [ %216, %215 ], [ %229, %222 ]
  %235 = phi i64 [ %217, %215 ], [ %228, %222 ]
  %236 = phi i16* [ %218, %215 ], [ %230, %222 ]
  %237 = icmp ult i64 %219, 7
  br i1 %237, label %268, label %238

238:                                              ; preds = %233, %238
  %239 = phi i16* [ %265, %238 ], [ %234, %233 ]
  %240 = phi i64 [ %264, %238 ], [ %235, %233 ]
  %241 = phi i16* [ %266, %238 ], [ %236, %233 ]
  %242 = load i16, i16* %241, align 2
  store i16 %242, i16* %239, align 2
  %243 = getelementptr inbounds i16, i16* %239, i64 1
  %244 = getelementptr inbounds i16, i16* %241, i64 1
  %245 = load i16, i16* %244, align 2
  store i16 %245, i16* %243, align 2
  %246 = getelementptr inbounds i16, i16* %239, i64 2
  %247 = getelementptr inbounds i16, i16* %241, i64 2
  %248 = load i16, i16* %247, align 2
  store i16 %248, i16* %246, align 2
  %249 = getelementptr inbounds i16, i16* %239, i64 3
  %250 = getelementptr inbounds i16, i16* %241, i64 3
  %251 = load i16, i16* %250, align 2
  store i16 %251, i16* %249, align 2
  %252 = getelementptr inbounds i16, i16* %239, i64 4
  %253 = getelementptr inbounds i16, i16* %241, i64 4
  %254 = load i16, i16* %253, align 2
  store i16 %254, i16* %252, align 2
  %255 = getelementptr inbounds i16, i16* %239, i64 5
  %256 = getelementptr inbounds i16, i16* %241, i64 5
  %257 = load i16, i16* %256, align 2
  store i16 %257, i16* %255, align 2
  %258 = getelementptr inbounds i16, i16* %239, i64 6
  %259 = getelementptr inbounds i16, i16* %241, i64 6
  %260 = load i16, i16* %259, align 2
  store i16 %260, i16* %258, align 2
  %261 = getelementptr inbounds i16, i16* %239, i64 7
  %262 = getelementptr inbounds i16, i16* %241, i64 7
  %263 = load i16, i16* %262, align 2
  store i16 %263, i16* %261, align 2
  %264 = add i64 %240, -8
  %265 = getelementptr inbounds i16, i16* %239, i64 8
  %266 = getelementptr inbounds i16, i16* %241, i64 8
  %267 = icmp eq i64 %264, 0
  br i1 %267, label %268, label %238, !llvm.loop !49

268:                                              ; preds = %233, %238, %213, %91
  %269 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 1
  %270 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %1, i64 0, i32 1
  %271 = load i64, i64* %270, align 8
  store i64 %271, i64* %269, align 8
  br label %453

272:                                              ; preds = %77, %86
  br i1 %6, label %273, label %275

273:                                              ; preds = %272
  %274 = load i16*, i16** %49, align 8
  br label %275

275:                                              ; preds = %272, %273
  %276 = phi i16* [ %274, %273 ], [ %50, %272 ]
  %277 = getelementptr inbounds i16, i16* %276, i64 %52
  %278 = sub i64 1, %52
  %279 = add i64 %278, %78
  %280 = icmp ugt i64 %279, 9223372036854775791
  br i1 %280, label %281, label %283

281:                                              ; preds = %275
  %282 = bitcast %"class.v8_inspector::String16"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %282) #9
  unreachable

283:                                              ; preds = %275
  %284 = icmp ult i64 %279, 11
  br i1 %284, label %298, label %285

285:                                              ; preds = %283
  %286 = add nuw nsw i64 %279, 8
  %287 = and i64 %286, -8
  %288 = icmp slt i64 %287, 0
  br i1 %288, label %289, label %290

289:                                              ; preds = %285
  tail call void @abort() #9
  unreachable

290:                                              ; preds = %285
  %291 = shl i64 %287, 1
  %292 = tail call i8* @_Znwm(i64 %291) #10
  %293 = bitcast i8* %292 to i16*
  %294 = bitcast %"class.v8_inspector::String16"* %0 to i8**
  store i8* %292, i8** %294, align 8
  %295 = or i64 %287, -9223372036854775808
  %296 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %295, i64* %296, align 8
  %297 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %279, i64* %297, align 8
  br label %304

298:                                              ; preds = %283
  %299 = trunc i64 %279 to i8
  %300 = bitcast %"class.v8_inspector::String16"* %0 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %301 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %300, i64 0, i32 1, i32 1
  store i8 %299, i8* %301, align 1
  %302 = bitcast %"class.v8_inspector::String16"* %0 to i16*
  %303 = icmp eq i64 %279, 0
  br i1 %303, label %449, label %304

304:                                              ; preds = %298, %290
  %305 = phi i16* [ %293, %290 ], [ %302, %298 ]
  %306 = icmp ult i64 %279, 16
  br i1 %306, label %396, label %307

307:                                              ; preds = %304
  %308 = getelementptr i16, i16* %305, i64 %279
  %309 = add i64 %78, 1
  %310 = getelementptr i16, i16* %276, i64 %309
  %311 = icmp ult i16* %305, %310
  %312 = icmp ult i16* %277, %308
  %313 = and i1 %311, %312
  br i1 %313, label %396, label %314

314:                                              ; preds = %307
  %315 = and i64 %279, -16
  %316 = getelementptr i16, i16* %305, i64 %315
  %317 = sub i64 %279, %315
  %318 = getelementptr i16, i16* %277, i64 %315
  %319 = add i64 %315, -16
  %320 = lshr exact i64 %319, 4
  %321 = add nuw nsw i64 %320, 1
  %322 = and i64 %321, 3
  %323 = icmp ult i64 %319, 48
  br i1 %323, label %375, label %324

324:                                              ; preds = %314
  %325 = sub nsw i64 %321, %322
  br label %326

326:                                              ; preds = %326, %324
  %327 = phi i64 [ 0, %324 ], [ %372, %326 ]
  %328 = phi i64 [ %325, %324 ], [ %373, %326 ]
  %329 = getelementptr i16, i16* %305, i64 %327
  %330 = getelementptr i16, i16* %277, i64 %327
  %331 = bitcast i16* %330 to <8 x i16>*
  %332 = load <8 x i16>, <8 x i16>* %331, align 2, !alias.scope !50
  %333 = getelementptr i16, i16* %330, i64 8
  %334 = bitcast i16* %333 to <8 x i16>*
  %335 = load <8 x i16>, <8 x i16>* %334, align 2, !alias.scope !50
  %336 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %332, <8 x i16>* %336, align 2, !alias.scope !53, !noalias !50
  %337 = getelementptr i16, i16* %329, i64 8
  %338 = bitcast i16* %337 to <8 x i16>*
  store <8 x i16> %335, <8 x i16>* %338, align 2, !alias.scope !53, !noalias !50
  %339 = or i64 %327, 16
  %340 = getelementptr i16, i16* %305, i64 %339
  %341 = getelementptr i16, i16* %277, i64 %339
  %342 = bitcast i16* %341 to <8 x i16>*
  %343 = load <8 x i16>, <8 x i16>* %342, align 2, !alias.scope !50
  %344 = getelementptr i16, i16* %341, i64 8
  %345 = bitcast i16* %344 to <8 x i16>*
  %346 = load <8 x i16>, <8 x i16>* %345, align 2, !alias.scope !50
  %347 = bitcast i16* %340 to <8 x i16>*
  store <8 x i16> %343, <8 x i16>* %347, align 2, !alias.scope !53, !noalias !50
  %348 = getelementptr i16, i16* %340, i64 8
  %349 = bitcast i16* %348 to <8 x i16>*
  store <8 x i16> %346, <8 x i16>* %349, align 2, !alias.scope !53, !noalias !50
  %350 = or i64 %327, 32
  %351 = getelementptr i16, i16* %305, i64 %350
  %352 = getelementptr i16, i16* %277, i64 %350
  %353 = bitcast i16* %352 to <8 x i16>*
  %354 = load <8 x i16>, <8 x i16>* %353, align 2, !alias.scope !50
  %355 = getelementptr i16, i16* %352, i64 8
  %356 = bitcast i16* %355 to <8 x i16>*
  %357 = load <8 x i16>, <8 x i16>* %356, align 2, !alias.scope !50
  %358 = bitcast i16* %351 to <8 x i16>*
  store <8 x i16> %354, <8 x i16>* %358, align 2, !alias.scope !53, !noalias !50
  %359 = getelementptr i16, i16* %351, i64 8
  %360 = bitcast i16* %359 to <8 x i16>*
  store <8 x i16> %357, <8 x i16>* %360, align 2, !alias.scope !53, !noalias !50
  %361 = or i64 %327, 48
  %362 = getelementptr i16, i16* %305, i64 %361
  %363 = getelementptr i16, i16* %277, i64 %361
  %364 = bitcast i16* %363 to <8 x i16>*
  %365 = load <8 x i16>, <8 x i16>* %364, align 2, !alias.scope !50
  %366 = getelementptr i16, i16* %363, i64 8
  %367 = bitcast i16* %366 to <8 x i16>*
  %368 = load <8 x i16>, <8 x i16>* %367, align 2, !alias.scope !50
  %369 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %365, <8 x i16>* %369, align 2, !alias.scope !53, !noalias !50
  %370 = getelementptr i16, i16* %362, i64 8
  %371 = bitcast i16* %370 to <8 x i16>*
  store <8 x i16> %368, <8 x i16>* %371, align 2, !alias.scope !53, !noalias !50
  %372 = add i64 %327, 64
  %373 = add i64 %328, -4
  %374 = icmp eq i64 %373, 0
  br i1 %374, label %375, label %326, !llvm.loop !55

375:                                              ; preds = %326, %314
  %376 = phi i64 [ 0, %314 ], [ %372, %326 ]
  %377 = icmp eq i64 %322, 0
  br i1 %377, label %394, label %378

378:                                              ; preds = %375, %378
  %379 = phi i64 [ %391, %378 ], [ %376, %375 ]
  %380 = phi i64 [ %392, %378 ], [ %322, %375 ]
  %381 = getelementptr i16, i16* %305, i64 %379
  %382 = getelementptr i16, i16* %277, i64 %379
  %383 = bitcast i16* %382 to <8 x i16>*
  %384 = load <8 x i16>, <8 x i16>* %383, align 2, !alias.scope !50
  %385 = getelementptr i16, i16* %382, i64 8
  %386 = bitcast i16* %385 to <8 x i16>*
  %387 = load <8 x i16>, <8 x i16>* %386, align 2, !alias.scope !50
  %388 = bitcast i16* %381 to <8 x i16>*
  store <8 x i16> %384, <8 x i16>* %388, align 2, !alias.scope !53, !noalias !50
  %389 = getelementptr i16, i16* %381, i64 8
  %390 = bitcast i16* %389 to <8 x i16>*
  store <8 x i16> %387, <8 x i16>* %390, align 2, !alias.scope !53, !noalias !50
  %391 = add i64 %379, 16
  %392 = add i64 %380, -1
  %393 = icmp eq i64 %392, 0
  br i1 %393, label %394, label %378, !llvm.loop !56

394:                                              ; preds = %378, %375
  %395 = icmp eq i64 %279, %315
  br i1 %395, label %449, label %396

396:                                              ; preds = %394, %307, %304
  %397 = phi i16* [ %305, %307 ], [ %305, %304 ], [ %316, %394 ]
  %398 = phi i64 [ %279, %307 ], [ %279, %304 ], [ %317, %394 ]
  %399 = phi i16* [ %277, %307 ], [ %277, %304 ], [ %318, %394 ]
  %400 = add i64 %398, -1
  %401 = and i64 %398, 7
  %402 = icmp eq i64 %401, 0
  br i1 %402, label %414, label %403

403:                                              ; preds = %396, %403
  %404 = phi i16* [ %410, %403 ], [ %397, %396 ]
  %405 = phi i64 [ %409, %403 ], [ %398, %396 ]
  %406 = phi i16* [ %411, %403 ], [ %399, %396 ]
  %407 = phi i64 [ %412, %403 ], [ %401, %396 ]
  %408 = load i16, i16* %406, align 2
  store i16 %408, i16* %404, align 2
  %409 = add i64 %405, -1
  %410 = getelementptr inbounds i16, i16* %404, i64 1
  %411 = getelementptr inbounds i16, i16* %406, i64 1
  %412 = add i64 %407, -1
  %413 = icmp eq i64 %412, 0
  br i1 %413, label %414, label %403, !llvm.loop !57

414:                                              ; preds = %403, %396
  %415 = phi i16* [ %397, %396 ], [ %410, %403 ]
  %416 = phi i64 [ %398, %396 ], [ %409, %403 ]
  %417 = phi i16* [ %399, %396 ], [ %411, %403 ]
  %418 = icmp ult i64 %400, 7
  br i1 %418, label %449, label %419

419:                                              ; preds = %414, %419
  %420 = phi i16* [ %446, %419 ], [ %415, %414 ]
  %421 = phi i64 [ %445, %419 ], [ %416, %414 ]
  %422 = phi i16* [ %447, %419 ], [ %417, %414 ]
  %423 = load i16, i16* %422, align 2
  store i16 %423, i16* %420, align 2
  %424 = getelementptr inbounds i16, i16* %420, i64 1
  %425 = getelementptr inbounds i16, i16* %422, i64 1
  %426 = load i16, i16* %425, align 2
  store i16 %426, i16* %424, align 2
  %427 = getelementptr inbounds i16, i16* %420, i64 2
  %428 = getelementptr inbounds i16, i16* %422, i64 2
  %429 = load i16, i16* %428, align 2
  store i16 %429, i16* %427, align 2
  %430 = getelementptr inbounds i16, i16* %420, i64 3
  %431 = getelementptr inbounds i16, i16* %422, i64 3
  %432 = load i16, i16* %431, align 2
  store i16 %432, i16* %430, align 2
  %433 = getelementptr inbounds i16, i16* %420, i64 4
  %434 = getelementptr inbounds i16, i16* %422, i64 4
  %435 = load i16, i16* %434, align 2
  store i16 %435, i16* %433, align 2
  %436 = getelementptr inbounds i16, i16* %420, i64 5
  %437 = getelementptr inbounds i16, i16* %422, i64 5
  %438 = load i16, i16* %437, align 2
  store i16 %438, i16* %436, align 2
  %439 = getelementptr inbounds i16, i16* %420, i64 6
  %440 = getelementptr inbounds i16, i16* %422, i64 6
  %441 = load i16, i16* %440, align 2
  store i16 %441, i16* %439, align 2
  %442 = getelementptr inbounds i16, i16* %420, i64 7
  %443 = getelementptr inbounds i16, i16* %422, i64 7
  %444 = load i16, i16* %443, align 2
  store i16 %444, i16* %442, align 2
  %445 = add i64 %421, -8
  %446 = getelementptr inbounds i16, i16* %420, i64 8
  %447 = getelementptr inbounds i16, i16* %422, i64 8
  %448 = icmp eq i64 %445, 0
  br i1 %448, label %449, label %419, !llvm.loop !58

449:                                              ; preds = %414, %419, %394, %298
  %450 = phi i16* [ %302, %298 ], [ %305, %394 ], [ %305, %419 ], [ %305, %414 ]
  %451 = getelementptr inbounds i16, i16* %450, i64 %279
  store i16 0, i16* %451, align 2
  %452 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 1
  store i64 0, i64* %452, align 8
  br label %453

453:                                              ; preds = %66, %268, %449, %15
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector15String16BuilderC2Ev(%"class.v8_inspector::String16Builder"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.v8_inspector::String16Builder"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 24, i1 false) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector15String16Builder6appendERKNS_8String16E(%"class.v8_inspector::String16Builder"*, %"class.v8_inspector::String16"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load i16*, i16** %4, align 8
  %6 = bitcast %"class.v8_inspector::String16"* %1 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  %10 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i16*, i16** %10, align 8
  %12 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.v8_inspector::String16"* %1 to i16*
  %15 = zext i8 %8 to i64
  %16 = select i1 %9, i16* %11, i16* %14
  %17 = select i1 %9, i64 %13, i64 %15
  %18 = getelementptr inbounds i16, i16* %16, i64 %17
  %19 = tail call i16* @_ZNSt3__16vectorItNS_9allocatorItEEE6insertIPKtEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleItNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPtEEE4typeENSC_IS6_EES8_S8_(%"class.std::__1::vector"* %3, i16* %5, i16* %16, i16* %18)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16* @_ZNSt3__16vectorItNS_9allocatorItEEE6insertIPKtEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleItNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPtEEE4typeENSC_IS6_EES8_S8_(%"class.std::__1::vector"*, i16*, i16*, i16*) local_unnamed_addr #0 comdat align 2 {
  %5 = bitcast i16* %2 to i8*
  %6 = bitcast i16* %1 to i8*
  %7 = ptrtoint i16* %1 to i64
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %9 = ptrtoint i16* %3 to i64
  %10 = ptrtoint i16* %2 to i64
  %11 = sub i64 %9, %10
  %12 = ashr exact i64 %11, 1
  %13 = icmp sgt i64 %11, 0
  br i1 %13, label %14, label %547

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast i16** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = load i16*, i16** %18, align 8
  %20 = ptrtoint i16* %19 to i64
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 1
  %23 = icmp sgt i64 %12, %22
  %24 = bitcast i16** %18 to i64*
  br i1 %23, label %188, label %25

25:                                               ; preds = %14
  %26 = sub i64 %20, %7
  %27 = ashr exact i64 %26, 1
  %28 = icmp sgt i64 %12, %27
  br i1 %28, label %29, label %45

29:                                               ; preds = %25
  %30 = getelementptr inbounds i16, i16* %2, i64 %27
  %31 = ptrtoint i16* %30 to i64
  %32 = sub i64 %9, %31
  %33 = icmp sgt i64 %32, 0
  br i1 %33, label %34, label %40

34:                                               ; preds = %29
  %35 = lshr exact i64 %32, 1
  %36 = bitcast i16* %19 to i8*
  %37 = bitcast i16* %30 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %36, i8* align 2 %37, i64 %32, i1 false) #12
  %38 = getelementptr inbounds i16, i16* %19, i64 %35
  %39 = ptrtoint i16* %38 to i64
  br label %40

40:                                               ; preds = %34, %29
  %41 = phi i64 [ %39, %34 ], [ %20, %29 ]
  store i64 %41, i64* %24, align 8
  %42 = icmp sgt i64 %26, 0
  br i1 %42, label %43, label %547

43:                                               ; preds = %40
  %44 = inttoptr i64 %41 to i16*
  br label %45

45:                                               ; preds = %43, %25
  %46 = phi i64 [ %41, %43 ], [ %20, %25 ]
  %47 = phi i16* [ %44, %43 ], [ %19, %25 ]
  %48 = phi i16* [ %30, %43 ], [ %3, %25 ]
  %49 = getelementptr inbounds i16, i16* %1, i64 %12
  %50 = ptrtoint i16* %49 to i64
  %51 = sub i64 %46, %50
  %52 = ashr exact i64 %51, 1
  %53 = getelementptr inbounds i16, i16* %1, i64 %52
  %54 = icmp ult i16* %53, %19
  br i1 %54, label %55, label %168

55:                                               ; preds = %45
  %56 = sub nsw i64 0, %52
  %57 = getelementptr i16, i16* %19, i64 %56
  %58 = bitcast i16* %57 to i8*
  %59 = xor i64 %7, -1
  %60 = getelementptr i8, i8* %58, i64 %59
  %61 = ptrtoint i8* %60 to i64
  %62 = lshr i64 %61, 1
  %63 = add nuw i64 %62, 1
  %64 = icmp ult i64 %63, 16
  br i1 %64, label %65, label %68

65:                                               ; preds = %163, %68, %55
  %66 = phi i16* [ %47, %68 ], [ %47, %55 ], [ %86, %163 ]
  %67 = phi i16* [ %53, %68 ], [ %53, %55 ], [ %87, %163 ]
  br label %176

68:                                               ; preds = %55
  %69 = sub nsw i64 0, %52
  %70 = getelementptr i16, i16* %19, i64 %69
  %71 = bitcast i16* %70 to i8*
  %72 = xor i64 %7, -1
  %73 = getelementptr i8, i8* %71, i64 %72
  %74 = ptrtoint i8* %73 to i64
  %75 = lshr i64 %74, 1
  %76 = add nuw i64 %75, 1
  %77 = getelementptr i16, i16* %47, i64 %76
  %78 = add i64 %52, %75
  %79 = add i64 %78, 1
  %80 = getelementptr i16, i16* %1, i64 %79
  %81 = icmp ult i16* %47, %80
  %82 = icmp ult i16* %53, %77
  %83 = and i1 %81, %82
  br i1 %83, label %65, label %84

84:                                               ; preds = %68
  %85 = and i64 %63, -16
  %86 = getelementptr i16, i16* %47, i64 %85
  %87 = getelementptr i16, i16* %53, i64 %85
  %88 = add i64 %85, -16
  %89 = lshr exact i64 %88, 4
  %90 = add nuw nsw i64 %89, 1
  %91 = and i64 %90, 3
  %92 = icmp ult i64 %88, 48
  br i1 %92, label %144, label %93

93:                                               ; preds = %84
  %94 = sub nsw i64 %90, %91
  br label %95

95:                                               ; preds = %95, %93
  %96 = phi i64 [ 0, %93 ], [ %141, %95 ]
  %97 = phi i64 [ %94, %93 ], [ %142, %95 ]
  %98 = getelementptr i16, i16* %47, i64 %96
  %99 = getelementptr i16, i16* %53, i64 %96
  %100 = bitcast i16* %99 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2, !alias.scope !59
  %102 = getelementptr i16, i16* %99, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !59
  %105 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %105, align 2, !alias.scope !62, !noalias !59
  %106 = getelementptr i16, i16* %98, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %107, align 2, !alias.scope !62, !noalias !59
  %108 = or i64 %96, 16
  %109 = getelementptr i16, i16* %47, i64 %108
  %110 = getelementptr i16, i16* %53, i64 %108
  %111 = bitcast i16* %110 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 2, !alias.scope !59
  %113 = getelementptr i16, i16* %110, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  %115 = load <8 x i16>, <8 x i16>* %114, align 2, !alias.scope !59
  %116 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %112, <8 x i16>* %116, align 2, !alias.scope !62, !noalias !59
  %117 = getelementptr i16, i16* %109, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %118, align 2, !alias.scope !62, !noalias !59
  %119 = or i64 %96, 32
  %120 = getelementptr i16, i16* %47, i64 %119
  %121 = getelementptr i16, i16* %53, i64 %119
  %122 = bitcast i16* %121 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2, !alias.scope !59
  %124 = getelementptr i16, i16* %121, i64 8
  %125 = bitcast i16* %124 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 2, !alias.scope !59
  %127 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %127, align 2, !alias.scope !62, !noalias !59
  %128 = getelementptr i16, i16* %120, i64 8
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %126, <8 x i16>* %129, align 2, !alias.scope !62, !noalias !59
  %130 = or i64 %96, 48
  %131 = getelementptr i16, i16* %47, i64 %130
  %132 = getelementptr i16, i16* %53, i64 %130
  %133 = bitcast i16* %132 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 2, !alias.scope !59
  %135 = getelementptr i16, i16* %132, i64 8
  %136 = bitcast i16* %135 to <8 x i16>*
  %137 = load <8 x i16>, <8 x i16>* %136, align 2, !alias.scope !59
  %138 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %138, align 2, !alias.scope !62, !noalias !59
  %139 = getelementptr i16, i16* %131, i64 8
  %140 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %137, <8 x i16>* %140, align 2, !alias.scope !62, !noalias !59
  %141 = add i64 %96, 64
  %142 = add i64 %97, -4
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %144, label %95, !llvm.loop !64

144:                                              ; preds = %95, %84
  %145 = phi i64 [ 0, %84 ], [ %141, %95 ]
  %146 = icmp eq i64 %91, 0
  br i1 %146, label %163, label %147

147:                                              ; preds = %144, %147
  %148 = phi i64 [ %160, %147 ], [ %145, %144 ]
  %149 = phi i64 [ %161, %147 ], [ %91, %144 ]
  %150 = getelementptr i16, i16* %47, i64 %148
  %151 = getelementptr i16, i16* %53, i64 %148
  %152 = bitcast i16* %151 to <8 x i16>*
  %153 = load <8 x i16>, <8 x i16>* %152, align 2, !alias.scope !59
  %154 = getelementptr i16, i16* %151, i64 8
  %155 = bitcast i16* %154 to <8 x i16>*
  %156 = load <8 x i16>, <8 x i16>* %155, align 2, !alias.scope !59
  %157 = bitcast i16* %150 to <8 x i16>*
  store <8 x i16> %153, <8 x i16>* %157, align 2, !alias.scope !62, !noalias !59
  %158 = getelementptr i16, i16* %150, i64 8
  %159 = bitcast i16* %158 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %159, align 2, !alias.scope !62, !noalias !59
  %160 = add i64 %148, 16
  %161 = add i64 %149, -1
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %163, label %147, !llvm.loop !65

163:                                              ; preds = %147, %144
  %164 = icmp eq i64 %63, %85
  br i1 %164, label %165, label %65

165:                                              ; preds = %176, %163
  %166 = phi i16* [ %86, %163 ], [ %181, %176 ]
  %167 = ptrtoint i16* %166 to i64
  br label %168

168:                                              ; preds = %165, %45
  %169 = phi i64 [ %167, %165 ], [ %46, %45 ]
  store i64 %169, i64* %24, align 8
  %170 = icmp eq i64 %51, 0
  br i1 %170, label %183, label %171

171:                                              ; preds = %168
  %172 = sub nsw i64 0, %52
  %173 = getelementptr inbounds i16, i16* %47, i64 %172
  %174 = bitcast i16* %173 to i8*
  %175 = bitcast i16* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %174, i8* align 2 %175, i64 %51, i1 false) #12
  br label %183

176:                                              ; preds = %65, %176
  %177 = phi i16* [ %181, %176 ], [ %66, %65 ]
  %178 = phi i16* [ %180, %176 ], [ %67, %65 ]
  %179 = load i16, i16* %178, align 2
  store i16 %179, i16* %177, align 2
  %180 = getelementptr inbounds i16, i16* %178, i64 1
  %181 = getelementptr inbounds i16, i16* %177, i64 1
  %182 = icmp ult i16* %180, %19
  br i1 %182, label %176, label %165, !llvm.loop !66

183:                                              ; preds = %168, %171
  %184 = ptrtoint i16* %48 to i64
  %185 = sub i64 %184, %10
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %547, label %187

187:                                              ; preds = %183
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %6, i8* align 2 %5, i64 %185, i1 false) #12
  br label %547

188:                                              ; preds = %14
  %189 = bitcast %"class.std::__1::vector"* %0 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = sub i64 %20, %190
  %192 = ashr exact i64 %191, 1
  %193 = add nsw i64 %192, %12
  %194 = icmp slt i64 %193, 0
  br i1 %194, label %195, label %197

195:                                              ; preds = %188
  %196 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %196) #9
  unreachable

197:                                              ; preds = %188
  %198 = sub i64 %17, %190
  %199 = ashr exact i64 %198, 1
  %200 = icmp ult i64 %199, 4611686018427387903
  %201 = icmp ult i64 %198, %193
  %202 = select i1 %201, i64 %193, i64 %198
  %203 = select i1 %200, i64 %202, i64 9223372036854775807
  %204 = sub i64 %7, %190
  %205 = ashr exact i64 %204, 1
  %206 = icmp eq i64 %203, 0
  br i1 %206, label %214, label %207

207:                                              ; preds = %197
  %208 = icmp slt i64 %203, 0
  br i1 %208, label %209, label %210

209:                                              ; preds = %207
  tail call void @abort() #9
  unreachable

210:                                              ; preds = %207
  %211 = shl i64 %203, 1
  %212 = tail call i8* @_Znwm(i64 %211) #10
  %213 = bitcast i8* %212 to i16*
  br label %214

214:                                              ; preds = %210, %197
  %215 = phi i16* [ %213, %210 ], [ null, %197 ]
  %216 = getelementptr inbounds i16, i16* %215, i64 %205
  %217 = getelementptr inbounds i16, i16* %215, i64 %203
  %218 = ptrtoint i16* %217 to i64
  %219 = getelementptr inbounds i16, i16* %216, i64 %12
  %220 = add i64 %11, -2
  %221 = lshr i64 %220, 1
  %222 = add nuw i64 %221, 1
  %223 = icmp ult i64 %222, 16
  br i1 %223, label %316, label %224

224:                                              ; preds = %214
  %225 = add i64 %11, -2
  %226 = lshr i64 %225, 1
  %227 = add i64 %205, %226
  %228 = add i64 %227, 1
  %229 = getelementptr i16, i16* %215, i64 %228
  %230 = add nuw i64 %226, 1
  %231 = getelementptr i16, i16* %2, i64 %230
  %232 = icmp ult i16* %216, %231
  %233 = icmp ugt i16* %229, %2
  %234 = and i1 %232, %233
  br i1 %234, label %316, label %235

235:                                              ; preds = %224
  %236 = and i64 %222, -16
  %237 = getelementptr i16, i16* %216, i64 %236
  %238 = getelementptr i16, i16* %2, i64 %236
  %239 = add i64 %236, -16
  %240 = lshr exact i64 %239, 4
  %241 = add nuw nsw i64 %240, 1
  %242 = and i64 %241, 3
  %243 = icmp ult i64 %239, 48
  br i1 %243, label %295, label %244

244:                                              ; preds = %235
  %245 = sub nsw i64 %241, %242
  br label %246

246:                                              ; preds = %246, %244
  %247 = phi i64 [ 0, %244 ], [ %292, %246 ]
  %248 = phi i64 [ %245, %244 ], [ %293, %246 ]
  %249 = getelementptr i16, i16* %216, i64 %247
  %250 = getelementptr i16, i16* %2, i64 %247
  %251 = bitcast i16* %250 to <8 x i16>*
  %252 = load <8 x i16>, <8 x i16>* %251, align 2, !alias.scope !67
  %253 = getelementptr i16, i16* %250, i64 8
  %254 = bitcast i16* %253 to <8 x i16>*
  %255 = load <8 x i16>, <8 x i16>* %254, align 2, !alias.scope !67
  %256 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %256, align 2, !alias.scope !70, !noalias !67
  %257 = getelementptr i16, i16* %249, i64 8
  %258 = bitcast i16* %257 to <8 x i16>*
  store <8 x i16> %255, <8 x i16>* %258, align 2, !alias.scope !70, !noalias !67
  %259 = or i64 %247, 16
  %260 = getelementptr i16, i16* %216, i64 %259
  %261 = getelementptr i16, i16* %2, i64 %259
  %262 = bitcast i16* %261 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 2, !alias.scope !67
  %264 = getelementptr i16, i16* %261, i64 8
  %265 = bitcast i16* %264 to <8 x i16>*
  %266 = load <8 x i16>, <8 x i16>* %265, align 2, !alias.scope !67
  %267 = bitcast i16* %260 to <8 x i16>*
  store <8 x i16> %263, <8 x i16>* %267, align 2, !alias.scope !70, !noalias !67
  %268 = getelementptr i16, i16* %260, i64 8
  %269 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %266, <8 x i16>* %269, align 2, !alias.scope !70, !noalias !67
  %270 = or i64 %247, 32
  %271 = getelementptr i16, i16* %216, i64 %270
  %272 = getelementptr i16, i16* %2, i64 %270
  %273 = bitcast i16* %272 to <8 x i16>*
  %274 = load <8 x i16>, <8 x i16>* %273, align 2, !alias.scope !67
  %275 = getelementptr i16, i16* %272, i64 8
  %276 = bitcast i16* %275 to <8 x i16>*
  %277 = load <8 x i16>, <8 x i16>* %276, align 2, !alias.scope !67
  %278 = bitcast i16* %271 to <8 x i16>*
  store <8 x i16> %274, <8 x i16>* %278, align 2, !alias.scope !70, !noalias !67
  %279 = getelementptr i16, i16* %271, i64 8
  %280 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %277, <8 x i16>* %280, align 2, !alias.scope !70, !noalias !67
  %281 = or i64 %247, 48
  %282 = getelementptr i16, i16* %216, i64 %281
  %283 = getelementptr i16, i16* %2, i64 %281
  %284 = bitcast i16* %283 to <8 x i16>*
  %285 = load <8 x i16>, <8 x i16>* %284, align 2, !alias.scope !67
  %286 = getelementptr i16, i16* %283, i64 8
  %287 = bitcast i16* %286 to <8 x i16>*
  %288 = load <8 x i16>, <8 x i16>* %287, align 2, !alias.scope !67
  %289 = bitcast i16* %282 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %289, align 2, !alias.scope !70, !noalias !67
  %290 = getelementptr i16, i16* %282, i64 8
  %291 = bitcast i16* %290 to <8 x i16>*
  store <8 x i16> %288, <8 x i16>* %291, align 2, !alias.scope !70, !noalias !67
  %292 = add i64 %247, 64
  %293 = add i64 %248, -4
  %294 = icmp eq i64 %293, 0
  br i1 %294, label %295, label %246, !llvm.loop !72

295:                                              ; preds = %246, %235
  %296 = phi i64 [ 0, %235 ], [ %292, %246 ]
  %297 = icmp eq i64 %242, 0
  br i1 %297, label %314, label %298

298:                                              ; preds = %295, %298
  %299 = phi i64 [ %311, %298 ], [ %296, %295 ]
  %300 = phi i64 [ %312, %298 ], [ %242, %295 ]
  %301 = getelementptr i16, i16* %216, i64 %299
  %302 = getelementptr i16, i16* %2, i64 %299
  %303 = bitcast i16* %302 to <8 x i16>*
  %304 = load <8 x i16>, <8 x i16>* %303, align 2, !alias.scope !67
  %305 = getelementptr i16, i16* %302, i64 8
  %306 = bitcast i16* %305 to <8 x i16>*
  %307 = load <8 x i16>, <8 x i16>* %306, align 2, !alias.scope !67
  %308 = bitcast i16* %301 to <8 x i16>*
  store <8 x i16> %304, <8 x i16>* %308, align 2, !alias.scope !70, !noalias !67
  %309 = getelementptr i16, i16* %301, i64 8
  %310 = bitcast i16* %309 to <8 x i16>*
  store <8 x i16> %307, <8 x i16>* %310, align 2, !alias.scope !70, !noalias !67
  %311 = add i64 %299, 16
  %312 = add i64 %300, -1
  %313 = icmp eq i64 %312, 0
  br i1 %313, label %314, label %298, !llvm.loop !73

314:                                              ; preds = %298, %295
  %315 = icmp eq i64 %222, %236
  br i1 %315, label %370, label %316

316:                                              ; preds = %314, %224, %214
  %317 = phi i16* [ %216, %224 ], [ %216, %214 ], [ %237, %314 ]
  %318 = phi i16* [ %2, %224 ], [ %2, %214 ], [ %238, %314 ]
  %319 = ptrtoint i16* %317 to i64
  %320 = add nsw i64 %12, %205
  %321 = add i64 %320, -1
  %322 = getelementptr i16, i16* %215, i64 %321
  %323 = ptrtoint i16* %322 to i64
  %324 = sub i64 %323, %319
  %325 = lshr i64 %324, 1
  %326 = add nuw i64 %325, 1
  %327 = and i64 %326, 7
  %328 = icmp eq i64 %327, 0
  br i1 %328, label %338, label %329

329:                                              ; preds = %316, %329
  %330 = phi i16* [ %334, %329 ], [ %317, %316 ]
  %331 = phi i16* [ %335, %329 ], [ %318, %316 ]
  %332 = phi i64 [ %336, %329 ], [ %327, %316 ]
  %333 = load i16, i16* %331, align 2
  store i16 %333, i16* %330, align 2
  %334 = getelementptr inbounds i16, i16* %330, i64 1
  %335 = getelementptr inbounds i16, i16* %331, i64 1
  %336 = add i64 %332, -1
  %337 = icmp eq i64 %336, 0
  br i1 %337, label %338, label %329, !llvm.loop !74

338:                                              ; preds = %329, %316
  %339 = phi i16* [ %317, %316 ], [ %334, %329 ]
  %340 = phi i16* [ %318, %316 ], [ %335, %329 ]
  %341 = icmp ult i64 %324, 14
  br i1 %341, label %370, label %342

342:                                              ; preds = %338, %342
  %343 = phi i16* [ %367, %342 ], [ %339, %338 ]
  %344 = phi i16* [ %368, %342 ], [ %340, %338 ]
  %345 = load i16, i16* %344, align 2
  store i16 %345, i16* %343, align 2
  %346 = getelementptr inbounds i16, i16* %343, i64 1
  %347 = getelementptr inbounds i16, i16* %344, i64 1
  %348 = load i16, i16* %347, align 2
  store i16 %348, i16* %346, align 2
  %349 = getelementptr inbounds i16, i16* %343, i64 2
  %350 = getelementptr inbounds i16, i16* %344, i64 2
  %351 = load i16, i16* %350, align 2
  store i16 %351, i16* %349, align 2
  %352 = getelementptr inbounds i16, i16* %343, i64 3
  %353 = getelementptr inbounds i16, i16* %344, i64 3
  %354 = load i16, i16* %353, align 2
  store i16 %354, i16* %352, align 2
  %355 = getelementptr inbounds i16, i16* %343, i64 4
  %356 = getelementptr inbounds i16, i16* %344, i64 4
  %357 = load i16, i16* %356, align 2
  store i16 %357, i16* %355, align 2
  %358 = getelementptr inbounds i16, i16* %343, i64 5
  %359 = getelementptr inbounds i16, i16* %344, i64 5
  %360 = load i16, i16* %359, align 2
  store i16 %360, i16* %358, align 2
  %361 = getelementptr inbounds i16, i16* %343, i64 6
  %362 = getelementptr inbounds i16, i16* %344, i64 6
  %363 = load i16, i16* %362, align 2
  store i16 %363, i16* %361, align 2
  %364 = getelementptr inbounds i16, i16* %343, i64 7
  %365 = getelementptr inbounds i16, i16* %344, i64 7
  %366 = load i16, i16* %365, align 2
  store i16 %366, i16* %364, align 2
  %367 = getelementptr inbounds i16, i16* %343, i64 8
  %368 = getelementptr inbounds i16, i16* %344, i64 8
  %369 = icmp eq i16* %219, %367
  br i1 %369, label %370, label %342, !llvm.loop !75

370:                                              ; preds = %338, %342, %314
  %371 = load i16*, i16** %8, align 8
  %372 = ptrtoint i16* %371 to i64
  %373 = sub i64 %7, %372
  %374 = ashr exact i64 %373, 1
  %375 = sub nsw i64 0, %374
  %376 = getelementptr inbounds i16, i16* %216, i64 %375
  %377 = ptrtoint i16* %376 to i64
  %378 = icmp sgt i64 %373, 0
  br i1 %378, label %379, label %382

379:                                              ; preds = %370
  %380 = bitcast i16* %376 to i8*
  %381 = bitcast i16* %371 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %380, i8* align 2 %381, i64 %373, i1 false) #12
  br label %382

382:                                              ; preds = %379, %370
  %383 = load i16*, i16** %18, align 8
  %384 = icmp eq i16* %383, %1
  br i1 %384, label %540, label %385

385:                                              ; preds = %382
  %386 = getelementptr i16, i16* %383, i64 -1
  %387 = ptrtoint i16* %386 to i64
  %388 = sub i64 %387, %7
  %389 = lshr i64 %388, 1
  %390 = add nuw i64 %389, 1
  %391 = icmp ult i64 %390, 16
  br i1 %391, label %487, label %392

392:                                              ; preds = %385
  %393 = add nsw i64 %12, %205
  %394 = getelementptr i16, i16* %383, i64 -1
  %395 = ptrtoint i16* %394 to i64
  %396 = sub i64 %395, %7
  %397 = lshr i64 %396, 1
  %398 = add i64 %393, %397
  %399 = add i64 %398, 1
  %400 = getelementptr i16, i16* %215, i64 %399
  %401 = add nuw i64 %397, 1
  %402 = getelementptr i16, i16* %1, i64 %401
  %403 = icmp ult i16* %219, %402
  %404 = icmp ugt i16* %400, %1
  %405 = and i1 %403, %404
  br i1 %405, label %487, label %406

406:                                              ; preds = %392
  %407 = and i64 %390, -16
  %408 = getelementptr i16, i16* %219, i64 %407
  %409 = getelementptr i16, i16* %1, i64 %407
  %410 = add i64 %407, -16
  %411 = lshr exact i64 %410, 4
  %412 = add nuw nsw i64 %411, 1
  %413 = and i64 %412, 3
  %414 = icmp ult i64 %410, 48
  br i1 %414, label %466, label %415

415:                                              ; preds = %406
  %416 = sub nsw i64 %412, %413
  br label %417

417:                                              ; preds = %417, %415
  %418 = phi i64 [ 0, %415 ], [ %463, %417 ]
  %419 = phi i64 [ %416, %415 ], [ %464, %417 ]
  %420 = getelementptr i16, i16* %219, i64 %418
  %421 = getelementptr i16, i16* %1, i64 %418
  %422 = bitcast i16* %421 to <8 x i16>*
  %423 = load <8 x i16>, <8 x i16>* %422, align 2, !alias.scope !76
  %424 = getelementptr i16, i16* %421, i64 8
  %425 = bitcast i16* %424 to <8 x i16>*
  %426 = load <8 x i16>, <8 x i16>* %425, align 2, !alias.scope !76
  %427 = bitcast i16* %420 to <8 x i16>*
  store <8 x i16> %423, <8 x i16>* %427, align 2, !alias.scope !79, !noalias !76
  %428 = getelementptr i16, i16* %420, i64 8
  %429 = bitcast i16* %428 to <8 x i16>*
  store <8 x i16> %426, <8 x i16>* %429, align 2, !alias.scope !79, !noalias !76
  %430 = or i64 %418, 16
  %431 = getelementptr i16, i16* %219, i64 %430
  %432 = getelementptr i16, i16* %1, i64 %430
  %433 = bitcast i16* %432 to <8 x i16>*
  %434 = load <8 x i16>, <8 x i16>* %433, align 2, !alias.scope !76
  %435 = getelementptr i16, i16* %432, i64 8
  %436 = bitcast i16* %435 to <8 x i16>*
  %437 = load <8 x i16>, <8 x i16>* %436, align 2, !alias.scope !76
  %438 = bitcast i16* %431 to <8 x i16>*
  store <8 x i16> %434, <8 x i16>* %438, align 2, !alias.scope !79, !noalias !76
  %439 = getelementptr i16, i16* %431, i64 8
  %440 = bitcast i16* %439 to <8 x i16>*
  store <8 x i16> %437, <8 x i16>* %440, align 2, !alias.scope !79, !noalias !76
  %441 = or i64 %418, 32
  %442 = getelementptr i16, i16* %219, i64 %441
  %443 = getelementptr i16, i16* %1, i64 %441
  %444 = bitcast i16* %443 to <8 x i16>*
  %445 = load <8 x i16>, <8 x i16>* %444, align 2, !alias.scope !76
  %446 = getelementptr i16, i16* %443, i64 8
  %447 = bitcast i16* %446 to <8 x i16>*
  %448 = load <8 x i16>, <8 x i16>* %447, align 2, !alias.scope !76
  %449 = bitcast i16* %442 to <8 x i16>*
  store <8 x i16> %445, <8 x i16>* %449, align 2, !alias.scope !79, !noalias !76
  %450 = getelementptr i16, i16* %442, i64 8
  %451 = bitcast i16* %450 to <8 x i16>*
  store <8 x i16> %448, <8 x i16>* %451, align 2, !alias.scope !79, !noalias !76
  %452 = or i64 %418, 48
  %453 = getelementptr i16, i16* %219, i64 %452
  %454 = getelementptr i16, i16* %1, i64 %452
  %455 = bitcast i16* %454 to <8 x i16>*
  %456 = load <8 x i16>, <8 x i16>* %455, align 2, !alias.scope !76
  %457 = getelementptr i16, i16* %454, i64 8
  %458 = bitcast i16* %457 to <8 x i16>*
  %459 = load <8 x i16>, <8 x i16>* %458, align 2, !alias.scope !76
  %460 = bitcast i16* %453 to <8 x i16>*
  store <8 x i16> %456, <8 x i16>* %460, align 2, !alias.scope !79, !noalias !76
  %461 = getelementptr i16, i16* %453, i64 8
  %462 = bitcast i16* %461 to <8 x i16>*
  store <8 x i16> %459, <8 x i16>* %462, align 2, !alias.scope !79, !noalias !76
  %463 = add i64 %418, 64
  %464 = add i64 %419, -4
  %465 = icmp eq i64 %464, 0
  br i1 %465, label %466, label %417, !llvm.loop !81

466:                                              ; preds = %417, %406
  %467 = phi i64 [ 0, %406 ], [ %463, %417 ]
  %468 = icmp eq i64 %413, 0
  br i1 %468, label %485, label %469

469:                                              ; preds = %466, %469
  %470 = phi i64 [ %482, %469 ], [ %467, %466 ]
  %471 = phi i64 [ %483, %469 ], [ %413, %466 ]
  %472 = getelementptr i16, i16* %219, i64 %470
  %473 = getelementptr i16, i16* %1, i64 %470
  %474 = bitcast i16* %473 to <8 x i16>*
  %475 = load <8 x i16>, <8 x i16>* %474, align 2, !alias.scope !76
  %476 = getelementptr i16, i16* %473, i64 8
  %477 = bitcast i16* %476 to <8 x i16>*
  %478 = load <8 x i16>, <8 x i16>* %477, align 2, !alias.scope !76
  %479 = bitcast i16* %472 to <8 x i16>*
  store <8 x i16> %475, <8 x i16>* %479, align 2, !alias.scope !79, !noalias !76
  %480 = getelementptr i16, i16* %472, i64 8
  %481 = bitcast i16* %480 to <8 x i16>*
  store <8 x i16> %478, <8 x i16>* %481, align 2, !alias.scope !79, !noalias !76
  %482 = add i64 %470, 16
  %483 = add i64 %471, -1
  %484 = icmp eq i64 %483, 0
  br i1 %484, label %485, label %469, !llvm.loop !82

485:                                              ; preds = %469, %466
  %486 = icmp eq i64 %390, %407
  br i1 %486, label %540, label %487

487:                                              ; preds = %485, %392, %385
  %488 = phi i16* [ %219, %392 ], [ %219, %385 ], [ %408, %485 ]
  %489 = phi i16* [ %1, %392 ], [ %1, %385 ], [ %409, %485 ]
  %490 = ptrtoint i16* %489 to i64
  %491 = getelementptr i16, i16* %383, i64 -1
  %492 = ptrtoint i16* %491 to i64
  %493 = sub i64 %492, %490
  %494 = lshr i64 %493, 1
  %495 = add nuw i64 %494, 1
  %496 = and i64 %495, 7
  %497 = icmp eq i64 %496, 0
  br i1 %497, label %507, label %498

498:                                              ; preds = %487, %498
  %499 = phi i16* [ %504, %498 ], [ %488, %487 ]
  %500 = phi i16* [ %503, %498 ], [ %489, %487 ]
  %501 = phi i64 [ %505, %498 ], [ %496, %487 ]
  %502 = load i16, i16* %500, align 2
  store i16 %502, i16* %499, align 2
  %503 = getelementptr inbounds i16, i16* %500, i64 1
  %504 = getelementptr inbounds i16, i16* %499, i64 1
  %505 = add i64 %501, -1
  %506 = icmp eq i64 %505, 0
  br i1 %506, label %507, label %498, !llvm.loop !83

507:                                              ; preds = %498, %487
  %508 = phi i16* [ undef, %487 ], [ %504, %498 ]
  %509 = phi i16* [ %488, %487 ], [ %504, %498 ]
  %510 = phi i16* [ %489, %487 ], [ %503, %498 ]
  %511 = icmp ult i64 %493, 14
  br i1 %511, label %540, label %512

512:                                              ; preds = %507, %512
  %513 = phi i16* [ %538, %512 ], [ %509, %507 ]
  %514 = phi i16* [ %537, %512 ], [ %510, %507 ]
  %515 = load i16, i16* %514, align 2
  store i16 %515, i16* %513, align 2
  %516 = getelementptr inbounds i16, i16* %514, i64 1
  %517 = getelementptr inbounds i16, i16* %513, i64 1
  %518 = load i16, i16* %516, align 2
  store i16 %518, i16* %517, align 2
  %519 = getelementptr inbounds i16, i16* %514, i64 2
  %520 = getelementptr inbounds i16, i16* %513, i64 2
  %521 = load i16, i16* %519, align 2
  store i16 %521, i16* %520, align 2
  %522 = getelementptr inbounds i16, i16* %514, i64 3
  %523 = getelementptr inbounds i16, i16* %513, i64 3
  %524 = load i16, i16* %522, align 2
  store i16 %524, i16* %523, align 2
  %525 = getelementptr inbounds i16, i16* %514, i64 4
  %526 = getelementptr inbounds i16, i16* %513, i64 4
  %527 = load i16, i16* %525, align 2
  store i16 %527, i16* %526, align 2
  %528 = getelementptr inbounds i16, i16* %514, i64 5
  %529 = getelementptr inbounds i16, i16* %513, i64 5
  %530 = load i16, i16* %528, align 2
  store i16 %530, i16* %529, align 2
  %531 = getelementptr inbounds i16, i16* %514, i64 6
  %532 = getelementptr inbounds i16, i16* %513, i64 6
  %533 = load i16, i16* %531, align 2
  store i16 %533, i16* %532, align 2
  %534 = getelementptr inbounds i16, i16* %514, i64 7
  %535 = getelementptr inbounds i16, i16* %513, i64 7
  %536 = load i16, i16* %534, align 2
  store i16 %536, i16* %535, align 2
  %537 = getelementptr inbounds i16, i16* %514, i64 8
  %538 = getelementptr inbounds i16, i16* %513, i64 8
  %539 = icmp eq i16* %537, %383
  br i1 %539, label %540, label %512, !llvm.loop !84

540:                                              ; preds = %507, %512, %485, %382
  %541 = phi i16* [ %219, %382 ], [ %408, %485 ], [ %508, %507 ], [ %538, %512 ]
  %542 = ptrtoint i16* %541 to i64
  %543 = load i16*, i16** %8, align 8
  store i64 %377, i64* %189, align 8
  store i64 %542, i64* %24, align 8
  store i64 %218, i64* %16, align 8
  %544 = icmp eq i16* %543, null
  br i1 %544, label %547, label %545

545:                                              ; preds = %540
  %546 = bitcast i16* %543 to i8*
  tail call void @_ZdlPv(i8* %546) #10
  br label %547

547:                                              ; preds = %545, %540, %40, %183, %187, %4
  %548 = phi i16* [ %1, %4 ], [ %1, %187 ], [ %1, %183 ], [ %1, %40 ], [ %216, %540 ], [ %216, %545 ]
  ret i16* %548
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector15String16Builder6appendEt(%"class.v8_inspector::String16Builder"*, i16 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load i16*, i16** %3, align 8
  %5 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %6 = load i16*, i16** %5, align 8
  %7 = icmp eq i16* %4, %6
  %8 = ptrtoint i16* %6 to i64
  br i1 %7, label %13, label %9

9:                                                ; preds = %2
  store i16 %1, i16* %4, align 2
  %10 = getelementptr inbounds i16, i16* %4, i64 1
  %11 = ptrtoint i16* %10 to i64
  %12 = bitcast i16** %3 to i64*
  store i64 %11, i64* %12, align 8
  br label %66

13:                                               ; preds = %2
  %14 = ptrtoint i16* %4 to i64
  %15 = bitcast i16** %3 to i64*
  %16 = bitcast %"class.v8_inspector::String16Builder"* %0 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %14, %17
  %19 = ashr exact i64 %18, 1
  %20 = add nsw i64 %19, 1
  %21 = icmp slt i64 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %13
  %23 = bitcast %"class.v8_inspector::String16Builder"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %23) #9
  unreachable

24:                                               ; preds = %13
  %25 = bitcast i16** %5 to i64*
  %26 = sub i64 %8, %17
  %27 = ashr exact i64 %26, 1
  %28 = icmp ult i64 %27, 4611686018427387903
  %29 = icmp ult i64 %26, %20
  %30 = select i1 %29, i64 %20, i64 %26
  %31 = select i1 %28, i64 %30, i64 9223372036854775807
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %40, label %33

33:                                               ; preds = %24
  %34 = icmp slt i64 %31, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %33
  tail call void @abort() #9
  unreachable

36:                                               ; preds = %33
  %37 = shl i64 %31, 1
  %38 = tail call i8* @_Znwm(i64 %37) #10
  %39 = bitcast i8* %38 to i16*
  br label %40

40:                                               ; preds = %36, %24
  %41 = phi i16* [ %39, %36 ], [ null, %24 ]
  %42 = getelementptr inbounds i16, i16* %41, i64 %19
  %43 = getelementptr inbounds i16, i16* %41, i64 %31
  %44 = ptrtoint i16* %43 to i64
  store i16 %1, i16* %42, align 2
  %45 = getelementptr inbounds i16, i16* %42, i64 1
  %46 = ptrtoint i16* %45 to i64
  %47 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %0, i64 0, i32 0, i32 0, i32 0
  %48 = load i16*, i16** %47, align 8
  %49 = load i64, i64* %15, align 8
  %50 = ptrtoint i16* %48 to i64
  %51 = sub i64 %49, %50
  %52 = ashr exact i64 %51, 1
  %53 = sub nsw i64 0, %52
  %54 = getelementptr inbounds i16, i16* %42, i64 %53
  %55 = ptrtoint i16* %54 to i64
  %56 = icmp sgt i64 %51, 0
  br i1 %56, label %57, label %61

57:                                               ; preds = %40
  %58 = bitcast i16* %54 to i8*
  %59 = bitcast i16* %48 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %58, i8* align 2 %59, i64 %51, i1 false) #12
  %60 = load i16*, i16** %47, align 8
  br label %61

61:                                               ; preds = %57, %40
  %62 = phi i16* [ %48, %40 ], [ %60, %57 ]
  store i64 %55, i64* %16, align 8
  store i64 %46, i64* %15, align 8
  store i64 %44, i64* %25, align 8
  %63 = icmp eq i16* %62, null
  br i1 %63, label %66, label %64

64:                                               ; preds = %61
  %65 = bitcast i16* %62 to i8*
  tail call void @_ZdlPv(i8* %65) #10
  br label %66

66:                                               ; preds = %9, %61, %64
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector15String16Builder6appendEc(%"class.v8_inspector::String16Builder"*, i8 signext) local_unnamed_addr #0 align 2 {
  %3 = sext i8 %1 to i16
  %4 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load i16*, i16** %4, align 8
  %6 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %7 = load i16*, i16** %6, align 8
  %8 = icmp eq i16* %5, %7
  %9 = ptrtoint i16* %7 to i64
  br i1 %8, label %14, label %10

10:                                               ; preds = %2
  store i16 %3, i16* %5, align 2
  %11 = getelementptr inbounds i16, i16* %5, i64 1
  %12 = ptrtoint i16* %11 to i64
  %13 = bitcast i16** %4 to i64*
  store i64 %12, i64* %13, align 8
  br label %67

14:                                               ; preds = %2
  %15 = ptrtoint i16* %5 to i64
  %16 = bitcast i16** %4 to i64*
  %17 = bitcast %"class.v8_inspector::String16Builder"* %0 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %15, %18
  %20 = ashr exact i64 %19, 1
  %21 = add nsw i64 %20, 1
  %22 = icmp slt i64 %21, 0
  br i1 %22, label %23, label %25

23:                                               ; preds = %14
  %24 = bitcast %"class.v8_inspector::String16Builder"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %24) #9
  unreachable

25:                                               ; preds = %14
  %26 = bitcast i16** %6 to i64*
  %27 = sub i64 %9, %18
  %28 = ashr exact i64 %27, 1
  %29 = icmp ult i64 %28, 4611686018427387903
  %30 = icmp ult i64 %27, %21
  %31 = select i1 %30, i64 %21, i64 %27
  %32 = select i1 %29, i64 %31, i64 9223372036854775807
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %41, label %34

34:                                               ; preds = %25
  %35 = icmp slt i64 %32, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %34
  tail call void @abort() #9
  unreachable

37:                                               ; preds = %34
  %38 = shl i64 %32, 1
  %39 = tail call i8* @_Znwm(i64 %38) #10
  %40 = bitcast i8* %39 to i16*
  br label %41

41:                                               ; preds = %37, %25
  %42 = phi i16* [ %40, %37 ], [ null, %25 ]
  %43 = getelementptr inbounds i16, i16* %42, i64 %20
  %44 = getelementptr inbounds i16, i16* %42, i64 %32
  %45 = ptrtoint i16* %44 to i64
  store i16 %3, i16* %43, align 2
  %46 = getelementptr inbounds i16, i16* %43, i64 1
  %47 = ptrtoint i16* %46 to i64
  %48 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %0, i64 0, i32 0, i32 0, i32 0
  %49 = load i16*, i16** %48, align 8
  %50 = load i64, i64* %16, align 8
  %51 = ptrtoint i16* %49 to i64
  %52 = sub i64 %50, %51
  %53 = ashr exact i64 %52, 1
  %54 = sub nsw i64 0, %53
  %55 = getelementptr inbounds i16, i16* %43, i64 %54
  %56 = ptrtoint i16* %55 to i64
  %57 = icmp sgt i64 %52, 0
  br i1 %57, label %58, label %62

58:                                               ; preds = %41
  %59 = bitcast i16* %55 to i8*
  %60 = bitcast i16* %49 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %59, i8* align 2 %60, i64 %52, i1 false) #12
  %61 = load i16*, i16** %48, align 8
  br label %62

62:                                               ; preds = %58, %41
  %63 = phi i16* [ %49, %41 ], [ %61, %58 ]
  store i64 %56, i64* %17, align 8
  store i64 %47, i64* %16, align 8
  store i64 %45, i64* %26, align 8
  %64 = icmp eq i16* %63, null
  br i1 %64, label %67, label %65

65:                                               ; preds = %62
  %66 = bitcast i16* %63 to i8*
  tail call void @_ZdlPv(i8* %66) #10
  br label %67

67:                                               ; preds = %10, %62, %65
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector15String16Builder6appendEPKtm(%"class.v8_inspector::String16Builder"*, i16*, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = load i16*, i16** %5, align 8
  %7 = getelementptr inbounds i16, i16* %1, i64 %2
  %8 = tail call i16* @_ZNSt3__16vectorItNS_9allocatorItEEE6insertIPKtEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleItNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPtEEE4typeENSC_IS6_EES8_S8_(%"class.std::__1::vector"* %4, i16* %6, i16* %1, i16* %7)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector15String16Builder6appendEPKcm(%"class.v8_inspector::String16Builder"*, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = load i16*, i16** %5, align 8
  %7 = getelementptr inbounds i8, i8* %1, i64 %2
  %8 = tail call i16* @_ZNSt3__16vectorItNS_9allocatorItEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleItNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPtEEE4typeENSC_IPKtEES8_S8_(%"class.std::__1::vector"* %4, i16* %6, i8* %1, i8* %7)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16* @_ZNSt3__16vectorItNS_9allocatorItEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleItNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPtEEE4typeENSC_IPKtEES8_S8_(%"class.std::__1::vector"*, i16*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = bitcast i16* %1 to i8*
  %6 = ptrtoint i16* %1 to i64
  %7 = ptrtoint i8* %2 to i64
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %9 = ptrtoint i8* %3 to i64
  %10 = sub i64 %9, %7
  %11 = icmp sgt i64 %10, 0
  br i1 %11, label %12, label %706

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %14 = bitcast i16** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %17 = load i16*, i16** %16, align 8
  %18 = bitcast i16* %17 to i8*
  %19 = ptrtoint i16* %17 to i64
  %20 = sub i64 %15, %19
  %21 = ashr exact i64 %20, 1
  %22 = icmp sgt i64 %10, %21
  %23 = bitcast i16** %16 to i64*
  br i1 %22, label %349, label %24

24:                                               ; preds = %12
  %25 = sub i64 %19, %6
  %26 = ashr exact i64 %25, 1
  %27 = icmp sgt i64 %10, %26
  br i1 %27, label %28, label %125

28:                                               ; preds = %24
  %29 = getelementptr inbounds i8, i8* %2, i64 %26
  %30 = ptrtoint i8* %29 to i64
  %31 = icmp eq i8* %29, %3
  br i1 %31, label %120, label %32

32:                                               ; preds = %28
  %33 = sub i64 0, %7
  %34 = sub i64 %33, %26
  %35 = getelementptr i8, i8* %3, i64 %34
  %36 = ptrtoint i8* %35 to i64
  %37 = icmp ult i8* %35, inttoptr (i64 16 to i8*)
  br i1 %37, label %106, label %38

38:                                               ; preds = %32
  %39 = ptrtoint i8* %3 to i64
  %40 = sub i64 %39, %30
  %41 = getelementptr i16, i16* %17, i64 %40
  %42 = bitcast i16* %41 to i8*
  %43 = icmp ult i8* %18, %3
  %44 = icmp ult i8* %29, %42
  %45 = and i1 %43, %44
  br i1 %45, label %106, label %46

46:                                               ; preds = %38
  %47 = and i64 %36, -16
  %48 = getelementptr i16, i16* %17, i64 %47
  %49 = getelementptr i8, i8* %29, i64 %47
  %50 = add i64 %47, -16
  %51 = lshr exact i64 %50, 4
  %52 = add nuw nsw i64 %51, 1
  %53 = and i64 %52, 1
  %54 = icmp eq i64 %50, 0
  br i1 %54, label %88, label %55

55:                                               ; preds = %46
  %56 = sub nuw nsw i64 %52, %53
  br label %57

57:                                               ; preds = %57, %55
  %58 = phi i64 [ 0, %55 ], [ %85, %57 ]
  %59 = phi i64 [ %56, %55 ], [ %86, %57 ]
  %60 = getelementptr i16, i16* %17, i64 %58
  %61 = getelementptr i8, i8* %29, i64 %58
  %62 = bitcast i8* %61 to <8 x i8>*
  %63 = load <8 x i8>, <8 x i8>* %62, align 1, !alias.scope !85
  %64 = getelementptr i8, i8* %61, i64 8
  %65 = bitcast i8* %64 to <8 x i8>*
  %66 = load <8 x i8>, <8 x i8>* %65, align 1, !alias.scope !85
  %67 = sext <8 x i8> %63 to <8 x i16>
  %68 = sext <8 x i8> %66 to <8 x i16>
  %69 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %69, align 2, !alias.scope !88, !noalias !85
  %70 = getelementptr i16, i16* %60, i64 8
  %71 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %71, align 2, !alias.scope !88, !noalias !85
  %72 = or i64 %58, 16
  %73 = getelementptr i16, i16* %17, i64 %72
  %74 = getelementptr i8, i8* %29, i64 %72
  %75 = bitcast i8* %74 to <8 x i8>*
  %76 = load <8 x i8>, <8 x i8>* %75, align 1, !alias.scope !85
  %77 = getelementptr i8, i8* %74, i64 8
  %78 = bitcast i8* %77 to <8 x i8>*
  %79 = load <8 x i8>, <8 x i8>* %78, align 1, !alias.scope !85
  %80 = sext <8 x i8> %76 to <8 x i16>
  %81 = sext <8 x i8> %79 to <8 x i16>
  %82 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %82, align 2, !alias.scope !88, !noalias !85
  %83 = getelementptr i16, i16* %73, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %84, align 2, !alias.scope !88, !noalias !85
  %85 = add i64 %58, 32
  %86 = add i64 %59, -2
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %57, !llvm.loop !90

88:                                               ; preds = %57, %46
  %89 = phi i64 [ 0, %46 ], [ %85, %57 ]
  %90 = icmp eq i64 %53, 0
  br i1 %90, label %104, label %91

91:                                               ; preds = %88
  %92 = getelementptr i16, i16* %17, i64 %89
  %93 = getelementptr i8, i8* %29, i64 %89
  %94 = bitcast i8* %93 to <8 x i8>*
  %95 = load <8 x i8>, <8 x i8>* %94, align 1, !alias.scope !85
  %96 = getelementptr i8, i8* %93, i64 8
  %97 = bitcast i8* %96 to <8 x i8>*
  %98 = load <8 x i8>, <8 x i8>* %97, align 1, !alias.scope !85
  %99 = sext <8 x i8> %95 to <8 x i16>
  %100 = sext <8 x i8> %98 to <8 x i16>
  %101 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %101, align 2, !alias.scope !88, !noalias !85
  %102 = getelementptr i16, i16* %92, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %103, align 2, !alias.scope !88, !noalias !85
  br label %104

104:                                              ; preds = %88, %91
  %105 = icmp eq i64 %47, %36
  br i1 %105, label %117, label %106

106:                                              ; preds = %104, %38, %32
  %107 = phi i16* [ %17, %38 ], [ %17, %32 ], [ %48, %104 ]
  %108 = phi i8* [ %29, %38 ], [ %29, %32 ], [ %49, %104 ]
  br label %109

109:                                              ; preds = %106, %109
  %110 = phi i16* [ %115, %109 ], [ %107, %106 ]
  %111 = phi i8* [ %114, %109 ], [ %108, %106 ]
  %112 = load i8, i8* %111, align 1
  %113 = sext i8 %112 to i16
  store i16 %113, i16* %110, align 2
  %114 = getelementptr inbounds i8, i8* %111, i64 1
  %115 = getelementptr inbounds i16, i16* %110, i64 1
  %116 = icmp eq i8* %114, %3
  br i1 %116, label %117, label %109, !llvm.loop !91

117:                                              ; preds = %109, %104
  %118 = phi i16* [ %48, %104 ], [ %115, %109 ]
  %119 = ptrtoint i16* %118 to i64
  br label %120

120:                                              ; preds = %117, %28
  %121 = phi i64 [ %19, %28 ], [ %119, %117 ]
  store i64 %121, i64* %23, align 8
  %122 = icmp sgt i64 %25, 0
  br i1 %122, label %123, label %706

123:                                              ; preds = %120
  %124 = inttoptr i64 %121 to i16*
  br label %125

125:                                              ; preds = %123, %24
  %126 = phi i64 [ %121, %123 ], [ %19, %24 ]
  %127 = phi i16* [ %124, %123 ], [ %17, %24 ]
  %128 = phi i8* [ %29, %123 ], [ %3, %24 ]
  %129 = getelementptr inbounds i16, i16* %1, i64 %10
  %130 = ptrtoint i16* %129 to i64
  %131 = sub i64 %126, %130
  %132 = ashr exact i64 %131, 1
  %133 = getelementptr inbounds i16, i16* %1, i64 %132
  %134 = icmp ult i16* %133, %17
  br i1 %134, label %135, label %248

135:                                              ; preds = %125
  %136 = sub nsw i64 0, %132
  %137 = getelementptr i16, i16* %17, i64 %136
  %138 = bitcast i16* %137 to i8*
  %139 = xor i64 %6, -1
  %140 = getelementptr i8, i8* %138, i64 %139
  %141 = ptrtoint i8* %140 to i64
  %142 = lshr i64 %141, 1
  %143 = add nuw i64 %142, 1
  %144 = icmp ult i64 %143, 16
  br i1 %144, label %145, label %148

145:                                              ; preds = %243, %148, %135
  %146 = phi i16* [ %127, %148 ], [ %127, %135 ], [ %166, %243 ]
  %147 = phi i16* [ %133, %148 ], [ %133, %135 ], [ %167, %243 ]
  br label %255

148:                                              ; preds = %135
  %149 = sub nsw i64 0, %132
  %150 = getelementptr i16, i16* %17, i64 %149
  %151 = bitcast i16* %150 to i8*
  %152 = xor i64 %6, -1
  %153 = getelementptr i8, i8* %151, i64 %152
  %154 = ptrtoint i8* %153 to i64
  %155 = lshr i64 %154, 1
  %156 = add nuw i64 %155, 1
  %157 = getelementptr i16, i16* %127, i64 %156
  %158 = add i64 %132, %155
  %159 = add i64 %158, 1
  %160 = getelementptr i16, i16* %1, i64 %159
  %161 = icmp ult i16* %127, %160
  %162 = icmp ult i16* %133, %157
  %163 = and i1 %161, %162
  br i1 %163, label %145, label %164

164:                                              ; preds = %148
  %165 = and i64 %143, -16
  %166 = getelementptr i16, i16* %127, i64 %165
  %167 = getelementptr i16, i16* %133, i64 %165
  %168 = add i64 %165, -16
  %169 = lshr exact i64 %168, 4
  %170 = add nuw nsw i64 %169, 1
  %171 = and i64 %170, 3
  %172 = icmp ult i64 %168, 48
  br i1 %172, label %224, label %173

173:                                              ; preds = %164
  %174 = sub nsw i64 %170, %171
  br label %175

175:                                              ; preds = %175, %173
  %176 = phi i64 [ 0, %173 ], [ %221, %175 ]
  %177 = phi i64 [ %174, %173 ], [ %222, %175 ]
  %178 = getelementptr i16, i16* %127, i64 %176
  %179 = getelementptr i16, i16* %133, i64 %176
  %180 = bitcast i16* %179 to <8 x i16>*
  %181 = load <8 x i16>, <8 x i16>* %180, align 2, !alias.scope !92
  %182 = getelementptr i16, i16* %179, i64 8
  %183 = bitcast i16* %182 to <8 x i16>*
  %184 = load <8 x i16>, <8 x i16>* %183, align 2, !alias.scope !92
  %185 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %181, <8 x i16>* %185, align 2, !alias.scope !95, !noalias !92
  %186 = getelementptr i16, i16* %178, i64 8
  %187 = bitcast i16* %186 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %187, align 2, !alias.scope !95, !noalias !92
  %188 = or i64 %176, 16
  %189 = getelementptr i16, i16* %127, i64 %188
  %190 = getelementptr i16, i16* %133, i64 %188
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 2, !alias.scope !92
  %193 = getelementptr i16, i16* %190, i64 8
  %194 = bitcast i16* %193 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 2, !alias.scope !92
  %196 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %192, <8 x i16>* %196, align 2, !alias.scope !95, !noalias !92
  %197 = getelementptr i16, i16* %189, i64 8
  %198 = bitcast i16* %197 to <8 x i16>*
  store <8 x i16> %195, <8 x i16>* %198, align 2, !alias.scope !95, !noalias !92
  %199 = or i64 %176, 32
  %200 = getelementptr i16, i16* %127, i64 %199
  %201 = getelementptr i16, i16* %133, i64 %199
  %202 = bitcast i16* %201 to <8 x i16>*
  %203 = load <8 x i16>, <8 x i16>* %202, align 2, !alias.scope !92
  %204 = getelementptr i16, i16* %201, i64 8
  %205 = bitcast i16* %204 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 2, !alias.scope !92
  %207 = bitcast i16* %200 to <8 x i16>*
  store <8 x i16> %203, <8 x i16>* %207, align 2, !alias.scope !95, !noalias !92
  %208 = getelementptr i16, i16* %200, i64 8
  %209 = bitcast i16* %208 to <8 x i16>*
  store <8 x i16> %206, <8 x i16>* %209, align 2, !alias.scope !95, !noalias !92
  %210 = or i64 %176, 48
  %211 = getelementptr i16, i16* %127, i64 %210
  %212 = getelementptr i16, i16* %133, i64 %210
  %213 = bitcast i16* %212 to <8 x i16>*
  %214 = load <8 x i16>, <8 x i16>* %213, align 2, !alias.scope !92
  %215 = getelementptr i16, i16* %212, i64 8
  %216 = bitcast i16* %215 to <8 x i16>*
  %217 = load <8 x i16>, <8 x i16>* %216, align 2, !alias.scope !92
  %218 = bitcast i16* %211 to <8 x i16>*
  store <8 x i16> %214, <8 x i16>* %218, align 2, !alias.scope !95, !noalias !92
  %219 = getelementptr i16, i16* %211, i64 8
  %220 = bitcast i16* %219 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %220, align 2, !alias.scope !95, !noalias !92
  %221 = add i64 %176, 64
  %222 = add i64 %177, -4
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %224, label %175, !llvm.loop !97

224:                                              ; preds = %175, %164
  %225 = phi i64 [ 0, %164 ], [ %221, %175 ]
  %226 = icmp eq i64 %171, 0
  br i1 %226, label %243, label %227

227:                                              ; preds = %224, %227
  %228 = phi i64 [ %240, %227 ], [ %225, %224 ]
  %229 = phi i64 [ %241, %227 ], [ %171, %224 ]
  %230 = getelementptr i16, i16* %127, i64 %228
  %231 = getelementptr i16, i16* %133, i64 %228
  %232 = bitcast i16* %231 to <8 x i16>*
  %233 = load <8 x i16>, <8 x i16>* %232, align 2, !alias.scope !92
  %234 = getelementptr i16, i16* %231, i64 8
  %235 = bitcast i16* %234 to <8 x i16>*
  %236 = load <8 x i16>, <8 x i16>* %235, align 2, !alias.scope !92
  %237 = bitcast i16* %230 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %237, align 2, !alias.scope !95, !noalias !92
  %238 = getelementptr i16, i16* %230, i64 8
  %239 = bitcast i16* %238 to <8 x i16>*
  store <8 x i16> %236, <8 x i16>* %239, align 2, !alias.scope !95, !noalias !92
  %240 = add i64 %228, 16
  %241 = add i64 %229, -1
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %243, label %227, !llvm.loop !98

243:                                              ; preds = %227, %224
  %244 = icmp eq i64 %143, %165
  br i1 %244, label %245, label %145

245:                                              ; preds = %255, %243
  %246 = phi i16* [ %166, %243 ], [ %260, %255 ]
  %247 = ptrtoint i16* %246 to i64
  br label %248

248:                                              ; preds = %245, %125
  %249 = phi i64 [ %247, %245 ], [ %126, %125 ]
  store i64 %249, i64* %23, align 8
  %250 = icmp eq i64 %131, 0
  br i1 %250, label %262, label %251

251:                                              ; preds = %248
  %252 = sub nsw i64 0, %132
  %253 = getelementptr inbounds i16, i16* %127, i64 %252
  %254 = bitcast i16* %253 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %254, i8* align 2 %5, i64 %131, i1 false) #12
  br label %262

255:                                              ; preds = %145, %255
  %256 = phi i16* [ %260, %255 ], [ %146, %145 ]
  %257 = phi i16* [ %259, %255 ], [ %147, %145 ]
  %258 = load i16, i16* %257, align 2
  store i16 %258, i16* %256, align 2
  %259 = getelementptr inbounds i16, i16* %257, i64 1
  %260 = getelementptr inbounds i16, i16* %256, i64 1
  %261 = icmp ult i16* %259, %17
  br i1 %261, label %255, label %245, !llvm.loop !99

262:                                              ; preds = %248, %251
  %263 = icmp eq i8* %128, %2
  br i1 %263, label %706, label %264

264:                                              ; preds = %262
  %265 = sub i64 0, %7
  %266 = getelementptr i8, i8* %128, i64 %265
  %267 = ptrtoint i8* %266 to i64
  %268 = icmp ult i8* %266, inttoptr (i64 16 to i8*)
  br i1 %268, label %338, label %269

269:                                              ; preds = %264
  %270 = sub i64 0, %7
  %271 = getelementptr i8, i8* %128, i64 %270
  %272 = ptrtoint i8* %271 to i64
  %273 = getelementptr i16, i16* %1, i64 %272
  %274 = bitcast i16* %273 to i8*
  %275 = icmp ugt i8* %128, %5
  %276 = icmp ugt i8* %274, %2
  %277 = and i1 %275, %276
  br i1 %277, label %338, label %278

278:                                              ; preds = %269
  %279 = and i64 %267, -16
  %280 = getelementptr i16, i16* %1, i64 %279
  %281 = getelementptr i8, i8* %2, i64 %279
  %282 = add i64 %279, -16
  %283 = lshr exact i64 %282, 4
  %284 = add nuw nsw i64 %283, 1
  %285 = and i64 %284, 1
  %286 = icmp eq i64 %282, 0
  br i1 %286, label %320, label %287

287:                                              ; preds = %278
  %288 = sub nuw nsw i64 %284, %285
  br label %289

289:                                              ; preds = %289, %287
  %290 = phi i64 [ 0, %287 ], [ %317, %289 ]
  %291 = phi i64 [ %288, %287 ], [ %318, %289 ]
  %292 = getelementptr i16, i16* %1, i64 %290
  %293 = getelementptr i8, i8* %2, i64 %290
  %294 = bitcast i8* %293 to <8 x i8>*
  %295 = load <8 x i8>, <8 x i8>* %294, align 1, !alias.scope !100
  %296 = getelementptr i8, i8* %293, i64 8
  %297 = bitcast i8* %296 to <8 x i8>*
  %298 = load <8 x i8>, <8 x i8>* %297, align 1, !alias.scope !100
  %299 = sext <8 x i8> %295 to <8 x i16>
  %300 = sext <8 x i8> %298 to <8 x i16>
  %301 = bitcast i16* %292 to <8 x i16>*
  store <8 x i16> %299, <8 x i16>* %301, align 2, !alias.scope !103, !noalias !100
  %302 = getelementptr i16, i16* %292, i64 8
  %303 = bitcast i16* %302 to <8 x i16>*
  store <8 x i16> %300, <8 x i16>* %303, align 2, !alias.scope !103, !noalias !100
  %304 = or i64 %290, 16
  %305 = getelementptr i16, i16* %1, i64 %304
  %306 = getelementptr i8, i8* %2, i64 %304
  %307 = bitcast i8* %306 to <8 x i8>*
  %308 = load <8 x i8>, <8 x i8>* %307, align 1, !alias.scope !100
  %309 = getelementptr i8, i8* %306, i64 8
  %310 = bitcast i8* %309 to <8 x i8>*
  %311 = load <8 x i8>, <8 x i8>* %310, align 1, !alias.scope !100
  %312 = sext <8 x i8> %308 to <8 x i16>
  %313 = sext <8 x i8> %311 to <8 x i16>
  %314 = bitcast i16* %305 to <8 x i16>*
  store <8 x i16> %312, <8 x i16>* %314, align 2, !alias.scope !103, !noalias !100
  %315 = getelementptr i16, i16* %305, i64 8
  %316 = bitcast i16* %315 to <8 x i16>*
  store <8 x i16> %313, <8 x i16>* %316, align 2, !alias.scope !103, !noalias !100
  %317 = add i64 %290, 32
  %318 = add i64 %291, -2
  %319 = icmp eq i64 %318, 0
  br i1 %319, label %320, label %289, !llvm.loop !105

320:                                              ; preds = %289, %278
  %321 = phi i64 [ 0, %278 ], [ %317, %289 ]
  %322 = icmp eq i64 %285, 0
  br i1 %322, label %336, label %323

323:                                              ; preds = %320
  %324 = getelementptr i16, i16* %1, i64 %321
  %325 = getelementptr i8, i8* %2, i64 %321
  %326 = bitcast i8* %325 to <8 x i8>*
  %327 = load <8 x i8>, <8 x i8>* %326, align 1, !alias.scope !100
  %328 = getelementptr i8, i8* %325, i64 8
  %329 = bitcast i8* %328 to <8 x i8>*
  %330 = load <8 x i8>, <8 x i8>* %329, align 1, !alias.scope !100
  %331 = sext <8 x i8> %327 to <8 x i16>
  %332 = sext <8 x i8> %330 to <8 x i16>
  %333 = bitcast i16* %324 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %333, align 2, !alias.scope !103, !noalias !100
  %334 = getelementptr i16, i16* %324, i64 8
  %335 = bitcast i16* %334 to <8 x i16>*
  store <8 x i16> %332, <8 x i16>* %335, align 2, !alias.scope !103, !noalias !100
  br label %336

336:                                              ; preds = %320, %323
  %337 = icmp eq i64 %279, %267
  br i1 %337, label %706, label %338

338:                                              ; preds = %336, %269, %264
  %339 = phi i16* [ %1, %269 ], [ %1, %264 ], [ %280, %336 ]
  %340 = phi i8* [ %2, %269 ], [ %2, %264 ], [ %281, %336 ]
  br label %341

341:                                              ; preds = %338, %341
  %342 = phi i16* [ %347, %341 ], [ %339, %338 ]
  %343 = phi i8* [ %346, %341 ], [ %340, %338 ]
  %344 = load i8, i8* %343, align 1
  %345 = sext i8 %344 to i16
  store i16 %345, i16* %342, align 2
  %346 = getelementptr inbounds i8, i8* %343, i64 1
  %347 = getelementptr inbounds i16, i16* %342, i64 1
  %348 = icmp eq i8* %346, %128
  br i1 %348, label %706, label %341, !llvm.loop !106

349:                                              ; preds = %12
  %350 = bitcast %"class.std::__1::vector"* %0 to i64*
  %351 = load i64, i64* %350, align 8
  %352 = sub i64 %19, %351
  %353 = ashr exact i64 %352, 1
  %354 = add i64 %353, %10
  %355 = icmp slt i64 %354, 0
  br i1 %355, label %356, label %358

356:                                              ; preds = %349
  %357 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %357) #9
  unreachable

358:                                              ; preds = %349
  %359 = sub i64 %15, %351
  %360 = ashr exact i64 %359, 1
  %361 = icmp ult i64 %360, 4611686018427387903
  %362 = icmp ult i64 %359, %354
  %363 = select i1 %362, i64 %354, i64 %359
  %364 = select i1 %361, i64 %363, i64 9223372036854775807
  %365 = sub i64 %6, %351
  %366 = ashr exact i64 %365, 1
  %367 = icmp eq i64 %364, 0
  br i1 %367, label %375, label %368

368:                                              ; preds = %358
  %369 = icmp slt i64 %364, 0
  br i1 %369, label %370, label %371

370:                                              ; preds = %368
  tail call void @abort() #9
  unreachable

371:                                              ; preds = %368
  %372 = shl i64 %364, 1
  %373 = tail call i8* @_Znwm(i64 %372) #10
  %374 = bitcast i8* %373 to i16*
  br label %375

375:                                              ; preds = %358, %371
  %376 = phi i16* [ %374, %371 ], [ null, %358 ]
  %377 = getelementptr inbounds i16, i16* %376, i64 %366
  %378 = getelementptr inbounds i16, i16* %376, i64 %364
  %379 = getelementptr inbounds i16, i16* %377, i64 %10
  %380 = shl i64 %9, 1
  %381 = add i64 %380, -2
  %382 = shl i64 %7, 1
  %383 = sub i64 %381, %382
  %384 = lshr exact i64 %383, 1
  %385 = add nuw i64 %384, 1
  %386 = icmp ult i64 %385, 16
  br i1 %386, label %463, label %387

387:                                              ; preds = %375
  %388 = bitcast i16* %377 to i8*
  %389 = shl i64 %9, 1
  %390 = add i64 %389, -2
  %391 = shl i64 %7, 1
  %392 = sub i64 %390, %391
  %393 = lshr exact i64 %392, 1
  %394 = add i64 %366, %393
  %395 = add i64 %394, 1
  %396 = getelementptr i16, i16* %376, i64 %395
  %397 = bitcast i16* %396 to i8*
  %398 = add nuw i64 %393, 1
  %399 = getelementptr i8, i8* %2, i64 %398
  %400 = icmp ugt i8* %399, %388
  %401 = icmp ugt i8* %397, %2
  %402 = and i1 %400, %401
  br i1 %402, label %463, label %403

403:                                              ; preds = %387
  %404 = and i64 %385, -16
  %405 = getelementptr i16, i16* %377, i64 %404
  %406 = getelementptr i8, i8* %2, i64 %404
  %407 = add i64 %404, -16
  %408 = lshr exact i64 %407, 4
  %409 = add nuw nsw i64 %408, 1
  %410 = and i64 %409, 1
  %411 = icmp eq i64 %407, 0
  br i1 %411, label %445, label %412

412:                                              ; preds = %403
  %413 = sub nuw nsw i64 %409, %410
  br label %414

414:                                              ; preds = %414, %412
  %415 = phi i64 [ 0, %412 ], [ %442, %414 ]
  %416 = phi i64 [ %413, %412 ], [ %443, %414 ]
  %417 = getelementptr i16, i16* %377, i64 %415
  %418 = getelementptr i8, i8* %2, i64 %415
  %419 = bitcast i8* %418 to <8 x i8>*
  %420 = load <8 x i8>, <8 x i8>* %419, align 1, !alias.scope !107
  %421 = getelementptr i8, i8* %418, i64 8
  %422 = bitcast i8* %421 to <8 x i8>*
  %423 = load <8 x i8>, <8 x i8>* %422, align 1, !alias.scope !107
  %424 = sext <8 x i8> %420 to <8 x i16>
  %425 = sext <8 x i8> %423 to <8 x i16>
  %426 = bitcast i16* %417 to <8 x i16>*
  store <8 x i16> %424, <8 x i16>* %426, align 2, !alias.scope !110, !noalias !107
  %427 = getelementptr i16, i16* %417, i64 8
  %428 = bitcast i16* %427 to <8 x i16>*
  store <8 x i16> %425, <8 x i16>* %428, align 2, !alias.scope !110, !noalias !107
  %429 = or i64 %415, 16
  %430 = getelementptr i16, i16* %377, i64 %429
  %431 = getelementptr i8, i8* %2, i64 %429
  %432 = bitcast i8* %431 to <8 x i8>*
  %433 = load <8 x i8>, <8 x i8>* %432, align 1, !alias.scope !107
  %434 = getelementptr i8, i8* %431, i64 8
  %435 = bitcast i8* %434 to <8 x i8>*
  %436 = load <8 x i8>, <8 x i8>* %435, align 1, !alias.scope !107
  %437 = sext <8 x i8> %433 to <8 x i16>
  %438 = sext <8 x i8> %436 to <8 x i16>
  %439 = bitcast i16* %430 to <8 x i16>*
  store <8 x i16> %437, <8 x i16>* %439, align 2, !alias.scope !110, !noalias !107
  %440 = getelementptr i16, i16* %430, i64 8
  %441 = bitcast i16* %440 to <8 x i16>*
  store <8 x i16> %438, <8 x i16>* %441, align 2, !alias.scope !110, !noalias !107
  %442 = add i64 %415, 32
  %443 = add i64 %416, -2
  %444 = icmp eq i64 %443, 0
  br i1 %444, label %445, label %414, !llvm.loop !112

445:                                              ; preds = %414, %403
  %446 = phi i64 [ 0, %403 ], [ %442, %414 ]
  %447 = icmp eq i64 %410, 0
  br i1 %447, label %461, label %448

448:                                              ; preds = %445
  %449 = getelementptr i16, i16* %377, i64 %446
  %450 = getelementptr i8, i8* %2, i64 %446
  %451 = bitcast i8* %450 to <8 x i8>*
  %452 = load <8 x i8>, <8 x i8>* %451, align 1, !alias.scope !107
  %453 = getelementptr i8, i8* %450, i64 8
  %454 = bitcast i8* %453 to <8 x i8>*
  %455 = load <8 x i8>, <8 x i8>* %454, align 1, !alias.scope !107
  %456 = sext <8 x i8> %452 to <8 x i16>
  %457 = sext <8 x i8> %455 to <8 x i16>
  %458 = bitcast i16* %449 to <8 x i16>*
  store <8 x i16> %456, <8 x i16>* %458, align 2, !alias.scope !110, !noalias !107
  %459 = getelementptr i16, i16* %449, i64 8
  %460 = bitcast i16* %459 to <8 x i16>*
  store <8 x i16> %457, <8 x i16>* %460, align 2, !alias.scope !110, !noalias !107
  br label %461

461:                                              ; preds = %445, %448
  %462 = icmp eq i64 %385, %404
  br i1 %462, label %527, label %463

463:                                              ; preds = %461, %387, %375
  %464 = phi i16* [ %377, %387 ], [ %377, %375 ], [ %405, %461 ]
  %465 = phi i8* [ %2, %387 ], [ %2, %375 ], [ %406, %461 ]
  %466 = ptrtoint i16* %464 to i64
  %467 = add i64 %366, %9
  %468 = xor i64 %7, -1
  %469 = add i64 %467, %468
  %470 = getelementptr i16, i16* %376, i64 %469
  %471 = ptrtoint i16* %470 to i64
  %472 = sub i64 %471, %466
  %473 = lshr i64 %472, 1
  %474 = add nuw i64 %473, 1
  %475 = and i64 %474, 7
  %476 = icmp eq i64 %475, 0
  br i1 %476, label %487, label %477

477:                                              ; preds = %463, %477
  %478 = phi i16* [ %483, %477 ], [ %464, %463 ]
  %479 = phi i8* [ %484, %477 ], [ %465, %463 ]
  %480 = phi i64 [ %485, %477 ], [ %475, %463 ]
  %481 = load i8, i8* %479, align 1
  %482 = sext i8 %481 to i16
  store i16 %482, i16* %478, align 2
  %483 = getelementptr inbounds i16, i16* %478, i64 1
  %484 = getelementptr inbounds i8, i8* %479, i64 1
  %485 = add i64 %480, -1
  %486 = icmp eq i64 %485, 0
  br i1 %486, label %487, label %477, !llvm.loop !113

487:                                              ; preds = %477, %463
  %488 = phi i16* [ %464, %463 ], [ %483, %477 ]
  %489 = phi i8* [ %465, %463 ], [ %484, %477 ]
  %490 = icmp ult i64 %472, 14
  br i1 %490, label %527, label %491

491:                                              ; preds = %487, %491
  %492 = phi i16* [ %524, %491 ], [ %488, %487 ]
  %493 = phi i8* [ %525, %491 ], [ %489, %487 ]
  %494 = load i8, i8* %493, align 1
  %495 = sext i8 %494 to i16
  store i16 %495, i16* %492, align 2
  %496 = getelementptr inbounds i16, i16* %492, i64 1
  %497 = getelementptr inbounds i8, i8* %493, i64 1
  %498 = load i8, i8* %497, align 1
  %499 = sext i8 %498 to i16
  store i16 %499, i16* %496, align 2
  %500 = getelementptr inbounds i16, i16* %492, i64 2
  %501 = getelementptr inbounds i8, i8* %493, i64 2
  %502 = load i8, i8* %501, align 1
  %503 = sext i8 %502 to i16
  store i16 %503, i16* %500, align 2
  %504 = getelementptr inbounds i16, i16* %492, i64 3
  %505 = getelementptr inbounds i8, i8* %493, i64 3
  %506 = load i8, i8* %505, align 1
  %507 = sext i8 %506 to i16
  store i16 %507, i16* %504, align 2
  %508 = getelementptr inbounds i16, i16* %492, i64 4
  %509 = getelementptr inbounds i8, i8* %493, i64 4
  %510 = load i8, i8* %509, align 1
  %511 = sext i8 %510 to i16
  store i16 %511, i16* %508, align 2
  %512 = getelementptr inbounds i16, i16* %492, i64 5
  %513 = getelementptr inbounds i8, i8* %493, i64 5
  %514 = load i8, i8* %513, align 1
  %515 = sext i8 %514 to i16
  store i16 %515, i16* %512, align 2
  %516 = getelementptr inbounds i16, i16* %492, i64 6
  %517 = getelementptr inbounds i8, i8* %493, i64 6
  %518 = load i8, i8* %517, align 1
  %519 = sext i8 %518 to i16
  store i16 %519, i16* %516, align 2
  %520 = getelementptr inbounds i16, i16* %492, i64 7
  %521 = getelementptr inbounds i8, i8* %493, i64 7
  %522 = load i8, i8* %521, align 1
  %523 = sext i8 %522 to i16
  store i16 %523, i16* %520, align 2
  %524 = getelementptr inbounds i16, i16* %492, i64 8
  %525 = getelementptr inbounds i8, i8* %493, i64 8
  %526 = icmp eq i16* %379, %524
  br i1 %526, label %527, label %491, !llvm.loop !114

527:                                              ; preds = %487, %491, %461
  %528 = ptrtoint i16* %378 to i64
  %529 = load i16*, i16** %8, align 8
  %530 = ptrtoint i16* %529 to i64
  %531 = sub i64 %6, %530
  %532 = ashr exact i64 %531, 1
  %533 = sub nsw i64 0, %532
  %534 = getelementptr inbounds i16, i16* %377, i64 %533
  %535 = ptrtoint i16* %534 to i64
  %536 = icmp sgt i64 %531, 0
  br i1 %536, label %537, label %540

537:                                              ; preds = %527
  %538 = bitcast i16* %534 to i8*
  %539 = bitcast i16* %529 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %538, i8* align 2 %539, i64 %531, i1 false) #12
  br label %540

540:                                              ; preds = %537, %527
  %541 = load i16*, i16** %16, align 8
  %542 = icmp eq i16* %541, %1
  br i1 %542, label %699, label %543

543:                                              ; preds = %540
  %544 = getelementptr i16, i16* %541, i64 -1
  %545 = ptrtoint i16* %544 to i64
  %546 = sub i64 %545, %6
  %547 = lshr i64 %546, 1
  %548 = add nuw i64 %547, 1
  %549 = icmp ult i64 %548, 16
  br i1 %549, label %646, label %550

550:                                              ; preds = %543
  %551 = add i64 %366, %9
  %552 = getelementptr i16, i16* %541, i64 -1
  %553 = ptrtoint i16* %552 to i64
  %554 = sub i64 %553, %6
  %555 = lshr i64 %554, 1
  %556 = add i64 %551, %555
  %557 = add i64 %556, 1
  %558 = sub i64 %557, %7
  %559 = getelementptr i16, i16* %376, i64 %558
  %560 = add nuw i64 %555, 1
  %561 = getelementptr i16, i16* %1, i64 %560
  %562 = icmp ult i16* %379, %561
  %563 = icmp ugt i16* %559, %1
  %564 = and i1 %562, %563
  br i1 %564, label %646, label %565

565:                                              ; preds = %550
  %566 = and i64 %548, -16
  %567 = getelementptr i16, i16* %379, i64 %566
  %568 = getelementptr i16, i16* %1, i64 %566
  %569 = add i64 %566, -16
  %570 = lshr exact i64 %569, 4
  %571 = add nuw nsw i64 %570, 1
  %572 = and i64 %571, 3
  %573 = icmp ult i64 %569, 48
  br i1 %573, label %625, label %574

574:                                              ; preds = %565
  %575 = sub nsw i64 %571, %572
  br label %576

576:                                              ; preds = %576, %574
  %577 = phi i64 [ 0, %574 ], [ %622, %576 ]
  %578 = phi i64 [ %575, %574 ], [ %623, %576 ]
  %579 = getelementptr i16, i16* %379, i64 %577
  %580 = getelementptr i16, i16* %1, i64 %577
  %581 = bitcast i16* %580 to <8 x i16>*
  %582 = load <8 x i16>, <8 x i16>* %581, align 2, !alias.scope !115
  %583 = getelementptr i16, i16* %580, i64 8
  %584 = bitcast i16* %583 to <8 x i16>*
  %585 = load <8 x i16>, <8 x i16>* %584, align 2, !alias.scope !115
  %586 = bitcast i16* %579 to <8 x i16>*
  store <8 x i16> %582, <8 x i16>* %586, align 2, !alias.scope !118, !noalias !115
  %587 = getelementptr i16, i16* %579, i64 8
  %588 = bitcast i16* %587 to <8 x i16>*
  store <8 x i16> %585, <8 x i16>* %588, align 2, !alias.scope !118, !noalias !115
  %589 = or i64 %577, 16
  %590 = getelementptr i16, i16* %379, i64 %589
  %591 = getelementptr i16, i16* %1, i64 %589
  %592 = bitcast i16* %591 to <8 x i16>*
  %593 = load <8 x i16>, <8 x i16>* %592, align 2, !alias.scope !115
  %594 = getelementptr i16, i16* %591, i64 8
  %595 = bitcast i16* %594 to <8 x i16>*
  %596 = load <8 x i16>, <8 x i16>* %595, align 2, !alias.scope !115
  %597 = bitcast i16* %590 to <8 x i16>*
  store <8 x i16> %593, <8 x i16>* %597, align 2, !alias.scope !118, !noalias !115
  %598 = getelementptr i16, i16* %590, i64 8
  %599 = bitcast i16* %598 to <8 x i16>*
  store <8 x i16> %596, <8 x i16>* %599, align 2, !alias.scope !118, !noalias !115
  %600 = or i64 %577, 32
  %601 = getelementptr i16, i16* %379, i64 %600
  %602 = getelementptr i16, i16* %1, i64 %600
  %603 = bitcast i16* %602 to <8 x i16>*
  %604 = load <8 x i16>, <8 x i16>* %603, align 2, !alias.scope !115
  %605 = getelementptr i16, i16* %602, i64 8
  %606 = bitcast i16* %605 to <8 x i16>*
  %607 = load <8 x i16>, <8 x i16>* %606, align 2, !alias.scope !115
  %608 = bitcast i16* %601 to <8 x i16>*
  store <8 x i16> %604, <8 x i16>* %608, align 2, !alias.scope !118, !noalias !115
  %609 = getelementptr i16, i16* %601, i64 8
  %610 = bitcast i16* %609 to <8 x i16>*
  store <8 x i16> %607, <8 x i16>* %610, align 2, !alias.scope !118, !noalias !115
  %611 = or i64 %577, 48
  %612 = getelementptr i16, i16* %379, i64 %611
  %613 = getelementptr i16, i16* %1, i64 %611
  %614 = bitcast i16* %613 to <8 x i16>*
  %615 = load <8 x i16>, <8 x i16>* %614, align 2, !alias.scope !115
  %616 = getelementptr i16, i16* %613, i64 8
  %617 = bitcast i16* %616 to <8 x i16>*
  %618 = load <8 x i16>, <8 x i16>* %617, align 2, !alias.scope !115
  %619 = bitcast i16* %612 to <8 x i16>*
  store <8 x i16> %615, <8 x i16>* %619, align 2, !alias.scope !118, !noalias !115
  %620 = getelementptr i16, i16* %612, i64 8
  %621 = bitcast i16* %620 to <8 x i16>*
  store <8 x i16> %618, <8 x i16>* %621, align 2, !alias.scope !118, !noalias !115
  %622 = add i64 %577, 64
  %623 = add i64 %578, -4
  %624 = icmp eq i64 %623, 0
  br i1 %624, label %625, label %576, !llvm.loop !120

625:                                              ; preds = %576, %565
  %626 = phi i64 [ 0, %565 ], [ %622, %576 ]
  %627 = icmp eq i64 %572, 0
  br i1 %627, label %644, label %628

628:                                              ; preds = %625, %628
  %629 = phi i64 [ %641, %628 ], [ %626, %625 ]
  %630 = phi i64 [ %642, %628 ], [ %572, %625 ]
  %631 = getelementptr i16, i16* %379, i64 %629
  %632 = getelementptr i16, i16* %1, i64 %629
  %633 = bitcast i16* %632 to <8 x i16>*
  %634 = load <8 x i16>, <8 x i16>* %633, align 2, !alias.scope !115
  %635 = getelementptr i16, i16* %632, i64 8
  %636 = bitcast i16* %635 to <8 x i16>*
  %637 = load <8 x i16>, <8 x i16>* %636, align 2, !alias.scope !115
  %638 = bitcast i16* %631 to <8 x i16>*
  store <8 x i16> %634, <8 x i16>* %638, align 2, !alias.scope !118, !noalias !115
  %639 = getelementptr i16, i16* %631, i64 8
  %640 = bitcast i16* %639 to <8 x i16>*
  store <8 x i16> %637, <8 x i16>* %640, align 2, !alias.scope !118, !noalias !115
  %641 = add i64 %629, 16
  %642 = add i64 %630, -1
  %643 = icmp eq i64 %642, 0
  br i1 %643, label %644, label %628, !llvm.loop !121

644:                                              ; preds = %628, %625
  %645 = icmp eq i64 %548, %566
  br i1 %645, label %699, label %646

646:                                              ; preds = %644, %550, %543
  %647 = phi i16* [ %379, %550 ], [ %379, %543 ], [ %567, %644 ]
  %648 = phi i16* [ %1, %550 ], [ %1, %543 ], [ %568, %644 ]
  %649 = ptrtoint i16* %648 to i64
  %650 = getelementptr i16, i16* %541, i64 -1
  %651 = ptrtoint i16* %650 to i64
  %652 = sub i64 %651, %649
  %653 = lshr i64 %652, 1
  %654 = add nuw i64 %653, 1
  %655 = and i64 %654, 7
  %656 = icmp eq i64 %655, 0
  br i1 %656, label %666, label %657

657:                                              ; preds = %646, %657
  %658 = phi i16* [ %663, %657 ], [ %647, %646 ]
  %659 = phi i16* [ %662, %657 ], [ %648, %646 ]
  %660 = phi i64 [ %664, %657 ], [ %655, %646 ]
  %661 = load i16, i16* %659, align 2
  store i16 %661, i16* %658, align 2
  %662 = getelementptr inbounds i16, i16* %659, i64 1
  %663 = getelementptr inbounds i16, i16* %658, i64 1
  %664 = add i64 %660, -1
  %665 = icmp eq i64 %664, 0
  br i1 %665, label %666, label %657, !llvm.loop !122

666:                                              ; preds = %657, %646
  %667 = phi i16* [ undef, %646 ], [ %663, %657 ]
  %668 = phi i16* [ %647, %646 ], [ %663, %657 ]
  %669 = phi i16* [ %648, %646 ], [ %662, %657 ]
  %670 = icmp ult i64 %652, 14
  br i1 %670, label %699, label %671

671:                                              ; preds = %666, %671
  %672 = phi i16* [ %697, %671 ], [ %668, %666 ]
  %673 = phi i16* [ %696, %671 ], [ %669, %666 ]
  %674 = load i16, i16* %673, align 2
  store i16 %674, i16* %672, align 2
  %675 = getelementptr inbounds i16, i16* %673, i64 1
  %676 = getelementptr inbounds i16, i16* %672, i64 1
  %677 = load i16, i16* %675, align 2
  store i16 %677, i16* %676, align 2
  %678 = getelementptr inbounds i16, i16* %673, i64 2
  %679 = getelementptr inbounds i16, i16* %672, i64 2
  %680 = load i16, i16* %678, align 2
  store i16 %680, i16* %679, align 2
  %681 = getelementptr inbounds i16, i16* %673, i64 3
  %682 = getelementptr inbounds i16, i16* %672, i64 3
  %683 = load i16, i16* %681, align 2
  store i16 %683, i16* %682, align 2
  %684 = getelementptr inbounds i16, i16* %673, i64 4
  %685 = getelementptr inbounds i16, i16* %672, i64 4
  %686 = load i16, i16* %684, align 2
  store i16 %686, i16* %685, align 2
  %687 = getelementptr inbounds i16, i16* %673, i64 5
  %688 = getelementptr inbounds i16, i16* %672, i64 5
  %689 = load i16, i16* %687, align 2
  store i16 %689, i16* %688, align 2
  %690 = getelementptr inbounds i16, i16* %673, i64 6
  %691 = getelementptr inbounds i16, i16* %672, i64 6
  %692 = load i16, i16* %690, align 2
  store i16 %692, i16* %691, align 2
  %693 = getelementptr inbounds i16, i16* %673, i64 7
  %694 = getelementptr inbounds i16, i16* %672, i64 7
  %695 = load i16, i16* %693, align 2
  store i16 %695, i16* %694, align 2
  %696 = getelementptr inbounds i16, i16* %673, i64 8
  %697 = getelementptr inbounds i16, i16* %672, i64 8
  %698 = icmp eq i16* %696, %541
  br i1 %698, label %699, label %671, !llvm.loop !123

699:                                              ; preds = %666, %671, %644, %540
  %700 = phi i16* [ %379, %540 ], [ %567, %644 ], [ %667, %666 ], [ %697, %671 ]
  %701 = ptrtoint i16* %700 to i64
  %702 = load i16*, i16** %8, align 8
  store i64 %535, i64* %350, align 8
  store i64 %701, i64* %23, align 8
  store i64 %528, i64* %14, align 8
  %703 = icmp eq i16* %702, null
  br i1 %703, label %706, label %704

704:                                              ; preds = %699
  %705 = bitcast i16* %702 to i8*
  tail call void @_ZdlPv(i8* %705) #10
  br label %706

706:                                              ; preds = %341, %336, %704, %699, %120, %262, %4
  %707 = phi i16* [ %1, %4 ], [ %1, %262 ], [ %1, %120 ], [ %377, %699 ], [ %377, %704 ], [ %1, %336 ], [ %1, %341 ]
  ret i16* %707
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector15String16Builder12appendNumberEi(%"class.v8_inspector::String16Builder"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca [11 x i8], align 1
  %4 = getelementptr inbounds [11 x i8], [11 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 11, i8* nonnull %4) #12
  %5 = call i32 (i8*, i32, i8*, ...) @_ZN2v84base2OS8SNPrintFEPciPKcz(i8* nonnull %4, i32 11, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %1) #12
  %6 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %0, i64 0, i32 0
  %7 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = load i16*, i16** %7, align 8
  %9 = sext i32 %5 to i64
  %10 = getelementptr inbounds [11 x i8], [11 x i8]* %3, i64 0, i64 %9
  %11 = call i16* @_ZNSt3__16vectorItNS_9allocatorItEEE6insertIPcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleItNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIPtEEE4typeENSB_IPKtEES7_S7_(%"class.std::__1::vector"* %6, i16* %8, i8* nonnull %4, i8* %10)
  call void @llvm.lifetime.end.p0i8(i64 11, i8* nonnull %4) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16* @_ZNSt3__16vectorItNS_9allocatorItEEE6insertIPcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleItNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIPtEEE4typeENSB_IPKtEES7_S7_(%"class.std::__1::vector"*, i16*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = bitcast i16* %1 to i8*
  %6 = ptrtoint i16* %1 to i64
  %7 = ptrtoint i8* %2 to i64
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %9 = ptrtoint i8* %3 to i64
  %10 = sub i64 %9, %7
  %11 = icmp sgt i64 %10, 0
  br i1 %11, label %12, label %706

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %14 = bitcast i16** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %17 = load i16*, i16** %16, align 8
  %18 = bitcast i16* %17 to i8*
  %19 = ptrtoint i16* %17 to i64
  %20 = sub i64 %15, %19
  %21 = ashr exact i64 %20, 1
  %22 = icmp sgt i64 %10, %21
  %23 = bitcast i16** %16 to i64*
  br i1 %22, label %349, label %24

24:                                               ; preds = %12
  %25 = sub i64 %19, %6
  %26 = ashr exact i64 %25, 1
  %27 = icmp sgt i64 %10, %26
  br i1 %27, label %28, label %125

28:                                               ; preds = %24
  %29 = getelementptr inbounds i8, i8* %2, i64 %26
  %30 = ptrtoint i8* %29 to i64
  %31 = icmp eq i8* %29, %3
  br i1 %31, label %120, label %32

32:                                               ; preds = %28
  %33 = sub i64 0, %7
  %34 = sub i64 %33, %26
  %35 = getelementptr i8, i8* %3, i64 %34
  %36 = ptrtoint i8* %35 to i64
  %37 = icmp ult i8* %35, inttoptr (i64 16 to i8*)
  br i1 %37, label %106, label %38

38:                                               ; preds = %32
  %39 = ptrtoint i8* %3 to i64
  %40 = sub i64 %39, %30
  %41 = getelementptr i16, i16* %17, i64 %40
  %42 = bitcast i16* %41 to i8*
  %43 = icmp ult i8* %18, %3
  %44 = icmp ult i8* %29, %42
  %45 = and i1 %43, %44
  br i1 %45, label %106, label %46

46:                                               ; preds = %38
  %47 = and i64 %36, -16
  %48 = getelementptr i16, i16* %17, i64 %47
  %49 = getelementptr i8, i8* %29, i64 %47
  %50 = add i64 %47, -16
  %51 = lshr exact i64 %50, 4
  %52 = add nuw nsw i64 %51, 1
  %53 = and i64 %52, 1
  %54 = icmp eq i64 %50, 0
  br i1 %54, label %88, label %55

55:                                               ; preds = %46
  %56 = sub nuw nsw i64 %52, %53
  br label %57

57:                                               ; preds = %57, %55
  %58 = phi i64 [ 0, %55 ], [ %85, %57 ]
  %59 = phi i64 [ %56, %55 ], [ %86, %57 ]
  %60 = getelementptr i16, i16* %17, i64 %58
  %61 = getelementptr i8, i8* %29, i64 %58
  %62 = bitcast i8* %61 to <8 x i8>*
  %63 = load <8 x i8>, <8 x i8>* %62, align 1, !alias.scope !124
  %64 = getelementptr i8, i8* %61, i64 8
  %65 = bitcast i8* %64 to <8 x i8>*
  %66 = load <8 x i8>, <8 x i8>* %65, align 1, !alias.scope !124
  %67 = sext <8 x i8> %63 to <8 x i16>
  %68 = sext <8 x i8> %66 to <8 x i16>
  %69 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %69, align 2, !alias.scope !127, !noalias !124
  %70 = getelementptr i16, i16* %60, i64 8
  %71 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %71, align 2, !alias.scope !127, !noalias !124
  %72 = or i64 %58, 16
  %73 = getelementptr i16, i16* %17, i64 %72
  %74 = getelementptr i8, i8* %29, i64 %72
  %75 = bitcast i8* %74 to <8 x i8>*
  %76 = load <8 x i8>, <8 x i8>* %75, align 1, !alias.scope !124
  %77 = getelementptr i8, i8* %74, i64 8
  %78 = bitcast i8* %77 to <8 x i8>*
  %79 = load <8 x i8>, <8 x i8>* %78, align 1, !alias.scope !124
  %80 = sext <8 x i8> %76 to <8 x i16>
  %81 = sext <8 x i8> %79 to <8 x i16>
  %82 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %82, align 2, !alias.scope !127, !noalias !124
  %83 = getelementptr i16, i16* %73, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %84, align 2, !alias.scope !127, !noalias !124
  %85 = add i64 %58, 32
  %86 = add i64 %59, -2
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %57, !llvm.loop !129

88:                                               ; preds = %57, %46
  %89 = phi i64 [ 0, %46 ], [ %85, %57 ]
  %90 = icmp eq i64 %53, 0
  br i1 %90, label %104, label %91

91:                                               ; preds = %88
  %92 = getelementptr i16, i16* %17, i64 %89
  %93 = getelementptr i8, i8* %29, i64 %89
  %94 = bitcast i8* %93 to <8 x i8>*
  %95 = load <8 x i8>, <8 x i8>* %94, align 1, !alias.scope !124
  %96 = getelementptr i8, i8* %93, i64 8
  %97 = bitcast i8* %96 to <8 x i8>*
  %98 = load <8 x i8>, <8 x i8>* %97, align 1, !alias.scope !124
  %99 = sext <8 x i8> %95 to <8 x i16>
  %100 = sext <8 x i8> %98 to <8 x i16>
  %101 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %101, align 2, !alias.scope !127, !noalias !124
  %102 = getelementptr i16, i16* %92, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %103, align 2, !alias.scope !127, !noalias !124
  br label %104

104:                                              ; preds = %88, %91
  %105 = icmp eq i64 %47, %36
  br i1 %105, label %117, label %106

106:                                              ; preds = %104, %38, %32
  %107 = phi i16* [ %17, %38 ], [ %17, %32 ], [ %48, %104 ]
  %108 = phi i8* [ %29, %38 ], [ %29, %32 ], [ %49, %104 ]
  br label %109

109:                                              ; preds = %106, %109
  %110 = phi i16* [ %115, %109 ], [ %107, %106 ]
  %111 = phi i8* [ %114, %109 ], [ %108, %106 ]
  %112 = load i8, i8* %111, align 1
  %113 = sext i8 %112 to i16
  store i16 %113, i16* %110, align 2
  %114 = getelementptr inbounds i8, i8* %111, i64 1
  %115 = getelementptr inbounds i16, i16* %110, i64 1
  %116 = icmp eq i8* %114, %3
  br i1 %116, label %117, label %109, !llvm.loop !130

117:                                              ; preds = %109, %104
  %118 = phi i16* [ %48, %104 ], [ %115, %109 ]
  %119 = ptrtoint i16* %118 to i64
  br label %120

120:                                              ; preds = %117, %28
  %121 = phi i64 [ %19, %28 ], [ %119, %117 ]
  store i64 %121, i64* %23, align 8
  %122 = icmp sgt i64 %25, 0
  br i1 %122, label %123, label %706

123:                                              ; preds = %120
  %124 = inttoptr i64 %121 to i16*
  br label %125

125:                                              ; preds = %123, %24
  %126 = phi i64 [ %121, %123 ], [ %19, %24 ]
  %127 = phi i16* [ %124, %123 ], [ %17, %24 ]
  %128 = phi i8* [ %29, %123 ], [ %3, %24 ]
  %129 = getelementptr inbounds i16, i16* %1, i64 %10
  %130 = ptrtoint i16* %129 to i64
  %131 = sub i64 %126, %130
  %132 = ashr exact i64 %131, 1
  %133 = getelementptr inbounds i16, i16* %1, i64 %132
  %134 = icmp ult i16* %133, %17
  br i1 %134, label %135, label %248

135:                                              ; preds = %125
  %136 = sub nsw i64 0, %132
  %137 = getelementptr i16, i16* %17, i64 %136
  %138 = bitcast i16* %137 to i8*
  %139 = xor i64 %6, -1
  %140 = getelementptr i8, i8* %138, i64 %139
  %141 = ptrtoint i8* %140 to i64
  %142 = lshr i64 %141, 1
  %143 = add nuw i64 %142, 1
  %144 = icmp ult i64 %143, 16
  br i1 %144, label %145, label %148

145:                                              ; preds = %243, %148, %135
  %146 = phi i16* [ %127, %148 ], [ %127, %135 ], [ %166, %243 ]
  %147 = phi i16* [ %133, %148 ], [ %133, %135 ], [ %167, %243 ]
  br label %255

148:                                              ; preds = %135
  %149 = sub nsw i64 0, %132
  %150 = getelementptr i16, i16* %17, i64 %149
  %151 = bitcast i16* %150 to i8*
  %152 = xor i64 %6, -1
  %153 = getelementptr i8, i8* %151, i64 %152
  %154 = ptrtoint i8* %153 to i64
  %155 = lshr i64 %154, 1
  %156 = add nuw i64 %155, 1
  %157 = getelementptr i16, i16* %127, i64 %156
  %158 = add i64 %132, %155
  %159 = add i64 %158, 1
  %160 = getelementptr i16, i16* %1, i64 %159
  %161 = icmp ult i16* %127, %160
  %162 = icmp ult i16* %133, %157
  %163 = and i1 %161, %162
  br i1 %163, label %145, label %164

164:                                              ; preds = %148
  %165 = and i64 %143, -16
  %166 = getelementptr i16, i16* %127, i64 %165
  %167 = getelementptr i16, i16* %133, i64 %165
  %168 = add i64 %165, -16
  %169 = lshr exact i64 %168, 4
  %170 = add nuw nsw i64 %169, 1
  %171 = and i64 %170, 3
  %172 = icmp ult i64 %168, 48
  br i1 %172, label %224, label %173

173:                                              ; preds = %164
  %174 = sub nsw i64 %170, %171
  br label %175

175:                                              ; preds = %175, %173
  %176 = phi i64 [ 0, %173 ], [ %221, %175 ]
  %177 = phi i64 [ %174, %173 ], [ %222, %175 ]
  %178 = getelementptr i16, i16* %127, i64 %176
  %179 = getelementptr i16, i16* %133, i64 %176
  %180 = bitcast i16* %179 to <8 x i16>*
  %181 = load <8 x i16>, <8 x i16>* %180, align 2, !alias.scope !131
  %182 = getelementptr i16, i16* %179, i64 8
  %183 = bitcast i16* %182 to <8 x i16>*
  %184 = load <8 x i16>, <8 x i16>* %183, align 2, !alias.scope !131
  %185 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %181, <8 x i16>* %185, align 2, !alias.scope !134, !noalias !131
  %186 = getelementptr i16, i16* %178, i64 8
  %187 = bitcast i16* %186 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %187, align 2, !alias.scope !134, !noalias !131
  %188 = or i64 %176, 16
  %189 = getelementptr i16, i16* %127, i64 %188
  %190 = getelementptr i16, i16* %133, i64 %188
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 2, !alias.scope !131
  %193 = getelementptr i16, i16* %190, i64 8
  %194 = bitcast i16* %193 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 2, !alias.scope !131
  %196 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %192, <8 x i16>* %196, align 2, !alias.scope !134, !noalias !131
  %197 = getelementptr i16, i16* %189, i64 8
  %198 = bitcast i16* %197 to <8 x i16>*
  store <8 x i16> %195, <8 x i16>* %198, align 2, !alias.scope !134, !noalias !131
  %199 = or i64 %176, 32
  %200 = getelementptr i16, i16* %127, i64 %199
  %201 = getelementptr i16, i16* %133, i64 %199
  %202 = bitcast i16* %201 to <8 x i16>*
  %203 = load <8 x i16>, <8 x i16>* %202, align 2, !alias.scope !131
  %204 = getelementptr i16, i16* %201, i64 8
  %205 = bitcast i16* %204 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 2, !alias.scope !131
  %207 = bitcast i16* %200 to <8 x i16>*
  store <8 x i16> %203, <8 x i16>* %207, align 2, !alias.scope !134, !noalias !131
  %208 = getelementptr i16, i16* %200, i64 8
  %209 = bitcast i16* %208 to <8 x i16>*
  store <8 x i16> %206, <8 x i16>* %209, align 2, !alias.scope !134, !noalias !131
  %210 = or i64 %176, 48
  %211 = getelementptr i16, i16* %127, i64 %210
  %212 = getelementptr i16, i16* %133, i64 %210
  %213 = bitcast i16* %212 to <8 x i16>*
  %214 = load <8 x i16>, <8 x i16>* %213, align 2, !alias.scope !131
  %215 = getelementptr i16, i16* %212, i64 8
  %216 = bitcast i16* %215 to <8 x i16>*
  %217 = load <8 x i16>, <8 x i16>* %216, align 2, !alias.scope !131
  %218 = bitcast i16* %211 to <8 x i16>*
  store <8 x i16> %214, <8 x i16>* %218, align 2, !alias.scope !134, !noalias !131
  %219 = getelementptr i16, i16* %211, i64 8
  %220 = bitcast i16* %219 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %220, align 2, !alias.scope !134, !noalias !131
  %221 = add i64 %176, 64
  %222 = add i64 %177, -4
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %224, label %175, !llvm.loop !136

224:                                              ; preds = %175, %164
  %225 = phi i64 [ 0, %164 ], [ %221, %175 ]
  %226 = icmp eq i64 %171, 0
  br i1 %226, label %243, label %227

227:                                              ; preds = %224, %227
  %228 = phi i64 [ %240, %227 ], [ %225, %224 ]
  %229 = phi i64 [ %241, %227 ], [ %171, %224 ]
  %230 = getelementptr i16, i16* %127, i64 %228
  %231 = getelementptr i16, i16* %133, i64 %228
  %232 = bitcast i16* %231 to <8 x i16>*
  %233 = load <8 x i16>, <8 x i16>* %232, align 2, !alias.scope !131
  %234 = getelementptr i16, i16* %231, i64 8
  %235 = bitcast i16* %234 to <8 x i16>*
  %236 = load <8 x i16>, <8 x i16>* %235, align 2, !alias.scope !131
  %237 = bitcast i16* %230 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %237, align 2, !alias.scope !134, !noalias !131
  %238 = getelementptr i16, i16* %230, i64 8
  %239 = bitcast i16* %238 to <8 x i16>*
  store <8 x i16> %236, <8 x i16>* %239, align 2, !alias.scope !134, !noalias !131
  %240 = add i64 %228, 16
  %241 = add i64 %229, -1
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %243, label %227, !llvm.loop !137

243:                                              ; preds = %227, %224
  %244 = icmp eq i64 %143, %165
  br i1 %244, label %245, label %145

245:                                              ; preds = %255, %243
  %246 = phi i16* [ %166, %243 ], [ %260, %255 ]
  %247 = ptrtoint i16* %246 to i64
  br label %248

248:                                              ; preds = %245, %125
  %249 = phi i64 [ %247, %245 ], [ %126, %125 ]
  store i64 %249, i64* %23, align 8
  %250 = icmp eq i64 %131, 0
  br i1 %250, label %262, label %251

251:                                              ; preds = %248
  %252 = sub nsw i64 0, %132
  %253 = getelementptr inbounds i16, i16* %127, i64 %252
  %254 = bitcast i16* %253 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %254, i8* align 2 %5, i64 %131, i1 false) #12
  br label %262

255:                                              ; preds = %145, %255
  %256 = phi i16* [ %260, %255 ], [ %146, %145 ]
  %257 = phi i16* [ %259, %255 ], [ %147, %145 ]
  %258 = load i16, i16* %257, align 2
  store i16 %258, i16* %256, align 2
  %259 = getelementptr inbounds i16, i16* %257, i64 1
  %260 = getelementptr inbounds i16, i16* %256, i64 1
  %261 = icmp ult i16* %259, %17
  br i1 %261, label %255, label %245, !llvm.loop !138

262:                                              ; preds = %248, %251
  %263 = icmp eq i8* %128, %2
  br i1 %263, label %706, label %264

264:                                              ; preds = %262
  %265 = sub i64 0, %7
  %266 = getelementptr i8, i8* %128, i64 %265
  %267 = ptrtoint i8* %266 to i64
  %268 = icmp ult i8* %266, inttoptr (i64 16 to i8*)
  br i1 %268, label %338, label %269

269:                                              ; preds = %264
  %270 = sub i64 0, %7
  %271 = getelementptr i8, i8* %128, i64 %270
  %272 = ptrtoint i8* %271 to i64
  %273 = getelementptr i16, i16* %1, i64 %272
  %274 = bitcast i16* %273 to i8*
  %275 = icmp ugt i8* %128, %5
  %276 = icmp ugt i8* %274, %2
  %277 = and i1 %275, %276
  br i1 %277, label %338, label %278

278:                                              ; preds = %269
  %279 = and i64 %267, -16
  %280 = getelementptr i16, i16* %1, i64 %279
  %281 = getelementptr i8, i8* %2, i64 %279
  %282 = add i64 %279, -16
  %283 = lshr exact i64 %282, 4
  %284 = add nuw nsw i64 %283, 1
  %285 = and i64 %284, 1
  %286 = icmp eq i64 %282, 0
  br i1 %286, label %320, label %287

287:                                              ; preds = %278
  %288 = sub nuw nsw i64 %284, %285
  br label %289

289:                                              ; preds = %289, %287
  %290 = phi i64 [ 0, %287 ], [ %317, %289 ]
  %291 = phi i64 [ %288, %287 ], [ %318, %289 ]
  %292 = getelementptr i16, i16* %1, i64 %290
  %293 = getelementptr i8, i8* %2, i64 %290
  %294 = bitcast i8* %293 to <8 x i8>*
  %295 = load <8 x i8>, <8 x i8>* %294, align 1, !alias.scope !139
  %296 = getelementptr i8, i8* %293, i64 8
  %297 = bitcast i8* %296 to <8 x i8>*
  %298 = load <8 x i8>, <8 x i8>* %297, align 1, !alias.scope !139
  %299 = sext <8 x i8> %295 to <8 x i16>
  %300 = sext <8 x i8> %298 to <8 x i16>
  %301 = bitcast i16* %292 to <8 x i16>*
  store <8 x i16> %299, <8 x i16>* %301, align 2, !alias.scope !142, !noalias !139
  %302 = getelementptr i16, i16* %292, i64 8
  %303 = bitcast i16* %302 to <8 x i16>*
  store <8 x i16> %300, <8 x i16>* %303, align 2, !alias.scope !142, !noalias !139
  %304 = or i64 %290, 16
  %305 = getelementptr i16, i16* %1, i64 %304
  %306 = getelementptr i8, i8* %2, i64 %304
  %307 = bitcast i8* %306 to <8 x i8>*
  %308 = load <8 x i8>, <8 x i8>* %307, align 1, !alias.scope !139
  %309 = getelementptr i8, i8* %306, i64 8
  %310 = bitcast i8* %309 to <8 x i8>*
  %311 = load <8 x i8>, <8 x i8>* %310, align 1, !alias.scope !139
  %312 = sext <8 x i8> %308 to <8 x i16>
  %313 = sext <8 x i8> %311 to <8 x i16>
  %314 = bitcast i16* %305 to <8 x i16>*
  store <8 x i16> %312, <8 x i16>* %314, align 2, !alias.scope !142, !noalias !139
  %315 = getelementptr i16, i16* %305, i64 8
  %316 = bitcast i16* %315 to <8 x i16>*
  store <8 x i16> %313, <8 x i16>* %316, align 2, !alias.scope !142, !noalias !139
  %317 = add i64 %290, 32
  %318 = add i64 %291, -2
  %319 = icmp eq i64 %318, 0
  br i1 %319, label %320, label %289, !llvm.loop !144

320:                                              ; preds = %289, %278
  %321 = phi i64 [ 0, %278 ], [ %317, %289 ]
  %322 = icmp eq i64 %285, 0
  br i1 %322, label %336, label %323

323:                                              ; preds = %320
  %324 = getelementptr i16, i16* %1, i64 %321
  %325 = getelementptr i8, i8* %2, i64 %321
  %326 = bitcast i8* %325 to <8 x i8>*
  %327 = load <8 x i8>, <8 x i8>* %326, align 1, !alias.scope !139
  %328 = getelementptr i8, i8* %325, i64 8
  %329 = bitcast i8* %328 to <8 x i8>*
  %330 = load <8 x i8>, <8 x i8>* %329, align 1, !alias.scope !139
  %331 = sext <8 x i8> %327 to <8 x i16>
  %332 = sext <8 x i8> %330 to <8 x i16>
  %333 = bitcast i16* %324 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %333, align 2, !alias.scope !142, !noalias !139
  %334 = getelementptr i16, i16* %324, i64 8
  %335 = bitcast i16* %334 to <8 x i16>*
  store <8 x i16> %332, <8 x i16>* %335, align 2, !alias.scope !142, !noalias !139
  br label %336

336:                                              ; preds = %320, %323
  %337 = icmp eq i64 %279, %267
  br i1 %337, label %706, label %338

338:                                              ; preds = %336, %269, %264
  %339 = phi i16* [ %1, %269 ], [ %1, %264 ], [ %280, %336 ]
  %340 = phi i8* [ %2, %269 ], [ %2, %264 ], [ %281, %336 ]
  br label %341

341:                                              ; preds = %338, %341
  %342 = phi i16* [ %347, %341 ], [ %339, %338 ]
  %343 = phi i8* [ %346, %341 ], [ %340, %338 ]
  %344 = load i8, i8* %343, align 1
  %345 = sext i8 %344 to i16
  store i16 %345, i16* %342, align 2
  %346 = getelementptr inbounds i8, i8* %343, i64 1
  %347 = getelementptr inbounds i16, i16* %342, i64 1
  %348 = icmp eq i8* %346, %128
  br i1 %348, label %706, label %341, !llvm.loop !145

349:                                              ; preds = %12
  %350 = bitcast %"class.std::__1::vector"* %0 to i64*
  %351 = load i64, i64* %350, align 8
  %352 = sub i64 %19, %351
  %353 = ashr exact i64 %352, 1
  %354 = add i64 %353, %10
  %355 = icmp slt i64 %354, 0
  br i1 %355, label %356, label %358

356:                                              ; preds = %349
  %357 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %357) #9
  unreachable

358:                                              ; preds = %349
  %359 = sub i64 %15, %351
  %360 = ashr exact i64 %359, 1
  %361 = icmp ult i64 %360, 4611686018427387903
  %362 = icmp ult i64 %359, %354
  %363 = select i1 %362, i64 %354, i64 %359
  %364 = select i1 %361, i64 %363, i64 9223372036854775807
  %365 = sub i64 %6, %351
  %366 = ashr exact i64 %365, 1
  %367 = icmp eq i64 %364, 0
  br i1 %367, label %375, label %368

368:                                              ; preds = %358
  %369 = icmp slt i64 %364, 0
  br i1 %369, label %370, label %371

370:                                              ; preds = %368
  tail call void @abort() #9
  unreachable

371:                                              ; preds = %368
  %372 = shl i64 %364, 1
  %373 = tail call i8* @_Znwm(i64 %372) #10
  %374 = bitcast i8* %373 to i16*
  br label %375

375:                                              ; preds = %358, %371
  %376 = phi i16* [ %374, %371 ], [ null, %358 ]
  %377 = getelementptr inbounds i16, i16* %376, i64 %366
  %378 = getelementptr inbounds i16, i16* %376, i64 %364
  %379 = getelementptr inbounds i16, i16* %377, i64 %10
  %380 = shl i64 %9, 1
  %381 = add i64 %380, -2
  %382 = shl i64 %7, 1
  %383 = sub i64 %381, %382
  %384 = lshr exact i64 %383, 1
  %385 = add nuw i64 %384, 1
  %386 = icmp ult i64 %385, 16
  br i1 %386, label %463, label %387

387:                                              ; preds = %375
  %388 = bitcast i16* %377 to i8*
  %389 = shl i64 %9, 1
  %390 = add i64 %389, -2
  %391 = shl i64 %7, 1
  %392 = sub i64 %390, %391
  %393 = lshr exact i64 %392, 1
  %394 = add i64 %366, %393
  %395 = add i64 %394, 1
  %396 = getelementptr i16, i16* %376, i64 %395
  %397 = bitcast i16* %396 to i8*
  %398 = add nuw i64 %393, 1
  %399 = getelementptr i8, i8* %2, i64 %398
  %400 = icmp ugt i8* %399, %388
  %401 = icmp ugt i8* %397, %2
  %402 = and i1 %400, %401
  br i1 %402, label %463, label %403

403:                                              ; preds = %387
  %404 = and i64 %385, -16
  %405 = getelementptr i16, i16* %377, i64 %404
  %406 = getelementptr i8, i8* %2, i64 %404
  %407 = add i64 %404, -16
  %408 = lshr exact i64 %407, 4
  %409 = add nuw nsw i64 %408, 1
  %410 = and i64 %409, 1
  %411 = icmp eq i64 %407, 0
  br i1 %411, label %445, label %412

412:                                              ; preds = %403
  %413 = sub nuw nsw i64 %409, %410
  br label %414

414:                                              ; preds = %414, %412
  %415 = phi i64 [ 0, %412 ], [ %442, %414 ]
  %416 = phi i64 [ %413, %412 ], [ %443, %414 ]
  %417 = getelementptr i16, i16* %377, i64 %415
  %418 = getelementptr i8, i8* %2, i64 %415
  %419 = bitcast i8* %418 to <8 x i8>*
  %420 = load <8 x i8>, <8 x i8>* %419, align 1, !alias.scope !146
  %421 = getelementptr i8, i8* %418, i64 8
  %422 = bitcast i8* %421 to <8 x i8>*
  %423 = load <8 x i8>, <8 x i8>* %422, align 1, !alias.scope !146
  %424 = sext <8 x i8> %420 to <8 x i16>
  %425 = sext <8 x i8> %423 to <8 x i16>
  %426 = bitcast i16* %417 to <8 x i16>*
  store <8 x i16> %424, <8 x i16>* %426, align 2, !alias.scope !149, !noalias !146
  %427 = getelementptr i16, i16* %417, i64 8
  %428 = bitcast i16* %427 to <8 x i16>*
  store <8 x i16> %425, <8 x i16>* %428, align 2, !alias.scope !149, !noalias !146
  %429 = or i64 %415, 16
  %430 = getelementptr i16, i16* %377, i64 %429
  %431 = getelementptr i8, i8* %2, i64 %429
  %432 = bitcast i8* %431 to <8 x i8>*
  %433 = load <8 x i8>, <8 x i8>* %432, align 1, !alias.scope !146
  %434 = getelementptr i8, i8* %431, i64 8
  %435 = bitcast i8* %434 to <8 x i8>*
  %436 = load <8 x i8>, <8 x i8>* %435, align 1, !alias.scope !146
  %437 = sext <8 x i8> %433 to <8 x i16>
  %438 = sext <8 x i8> %436 to <8 x i16>
  %439 = bitcast i16* %430 to <8 x i16>*
  store <8 x i16> %437, <8 x i16>* %439, align 2, !alias.scope !149, !noalias !146
  %440 = getelementptr i16, i16* %430, i64 8
  %441 = bitcast i16* %440 to <8 x i16>*
  store <8 x i16> %438, <8 x i16>* %441, align 2, !alias.scope !149, !noalias !146
  %442 = add i64 %415, 32
  %443 = add i64 %416, -2
  %444 = icmp eq i64 %443, 0
  br i1 %444, label %445, label %414, !llvm.loop !151

445:                                              ; preds = %414, %403
  %446 = phi i64 [ 0, %403 ], [ %442, %414 ]
  %447 = icmp eq i64 %410, 0
  br i1 %447, label %461, label %448

448:                                              ; preds = %445
  %449 = getelementptr i16, i16* %377, i64 %446
  %450 = getelementptr i8, i8* %2, i64 %446
  %451 = bitcast i8* %450 to <8 x i8>*
  %452 = load <8 x i8>, <8 x i8>* %451, align 1, !alias.scope !146
  %453 = getelementptr i8, i8* %450, i64 8
  %454 = bitcast i8* %453 to <8 x i8>*
  %455 = load <8 x i8>, <8 x i8>* %454, align 1, !alias.scope !146
  %456 = sext <8 x i8> %452 to <8 x i16>
  %457 = sext <8 x i8> %455 to <8 x i16>
  %458 = bitcast i16* %449 to <8 x i16>*
  store <8 x i16> %456, <8 x i16>* %458, align 2, !alias.scope !149, !noalias !146
  %459 = getelementptr i16, i16* %449, i64 8
  %460 = bitcast i16* %459 to <8 x i16>*
  store <8 x i16> %457, <8 x i16>* %460, align 2, !alias.scope !149, !noalias !146
  br label %461

461:                                              ; preds = %445, %448
  %462 = icmp eq i64 %385, %404
  br i1 %462, label %527, label %463

463:                                              ; preds = %461, %387, %375
  %464 = phi i16* [ %377, %387 ], [ %377, %375 ], [ %405, %461 ]
  %465 = phi i8* [ %2, %387 ], [ %2, %375 ], [ %406, %461 ]
  %466 = ptrtoint i16* %464 to i64
  %467 = add i64 %366, %9
  %468 = xor i64 %7, -1
  %469 = add i64 %467, %468
  %470 = getelementptr i16, i16* %376, i64 %469
  %471 = ptrtoint i16* %470 to i64
  %472 = sub i64 %471, %466
  %473 = lshr i64 %472, 1
  %474 = add nuw i64 %473, 1
  %475 = and i64 %474, 7
  %476 = icmp eq i64 %475, 0
  br i1 %476, label %487, label %477

477:                                              ; preds = %463, %477
  %478 = phi i16* [ %483, %477 ], [ %464, %463 ]
  %479 = phi i8* [ %484, %477 ], [ %465, %463 ]
  %480 = phi i64 [ %485, %477 ], [ %475, %463 ]
  %481 = load i8, i8* %479, align 1
  %482 = sext i8 %481 to i16
  store i16 %482, i16* %478, align 2
  %483 = getelementptr inbounds i16, i16* %478, i64 1
  %484 = getelementptr inbounds i8, i8* %479, i64 1
  %485 = add i64 %480, -1
  %486 = icmp eq i64 %485, 0
  br i1 %486, label %487, label %477, !llvm.loop !152

487:                                              ; preds = %477, %463
  %488 = phi i16* [ %464, %463 ], [ %483, %477 ]
  %489 = phi i8* [ %465, %463 ], [ %484, %477 ]
  %490 = icmp ult i64 %472, 14
  br i1 %490, label %527, label %491

491:                                              ; preds = %487, %491
  %492 = phi i16* [ %524, %491 ], [ %488, %487 ]
  %493 = phi i8* [ %525, %491 ], [ %489, %487 ]
  %494 = load i8, i8* %493, align 1
  %495 = sext i8 %494 to i16
  store i16 %495, i16* %492, align 2
  %496 = getelementptr inbounds i16, i16* %492, i64 1
  %497 = getelementptr inbounds i8, i8* %493, i64 1
  %498 = load i8, i8* %497, align 1
  %499 = sext i8 %498 to i16
  store i16 %499, i16* %496, align 2
  %500 = getelementptr inbounds i16, i16* %492, i64 2
  %501 = getelementptr inbounds i8, i8* %493, i64 2
  %502 = load i8, i8* %501, align 1
  %503 = sext i8 %502 to i16
  store i16 %503, i16* %500, align 2
  %504 = getelementptr inbounds i16, i16* %492, i64 3
  %505 = getelementptr inbounds i8, i8* %493, i64 3
  %506 = load i8, i8* %505, align 1
  %507 = sext i8 %506 to i16
  store i16 %507, i16* %504, align 2
  %508 = getelementptr inbounds i16, i16* %492, i64 4
  %509 = getelementptr inbounds i8, i8* %493, i64 4
  %510 = load i8, i8* %509, align 1
  %511 = sext i8 %510 to i16
  store i16 %511, i16* %508, align 2
  %512 = getelementptr inbounds i16, i16* %492, i64 5
  %513 = getelementptr inbounds i8, i8* %493, i64 5
  %514 = load i8, i8* %513, align 1
  %515 = sext i8 %514 to i16
  store i16 %515, i16* %512, align 2
  %516 = getelementptr inbounds i16, i16* %492, i64 6
  %517 = getelementptr inbounds i8, i8* %493, i64 6
  %518 = load i8, i8* %517, align 1
  %519 = sext i8 %518 to i16
  store i16 %519, i16* %516, align 2
  %520 = getelementptr inbounds i16, i16* %492, i64 7
  %521 = getelementptr inbounds i8, i8* %493, i64 7
  %522 = load i8, i8* %521, align 1
  %523 = sext i8 %522 to i16
  store i16 %523, i16* %520, align 2
  %524 = getelementptr inbounds i16, i16* %492, i64 8
  %525 = getelementptr inbounds i8, i8* %493, i64 8
  %526 = icmp eq i16* %379, %524
  br i1 %526, label %527, label %491, !llvm.loop !153

527:                                              ; preds = %487, %491, %461
  %528 = ptrtoint i16* %378 to i64
  %529 = load i16*, i16** %8, align 8
  %530 = ptrtoint i16* %529 to i64
  %531 = sub i64 %6, %530
  %532 = ashr exact i64 %531, 1
  %533 = sub nsw i64 0, %532
  %534 = getelementptr inbounds i16, i16* %377, i64 %533
  %535 = ptrtoint i16* %534 to i64
  %536 = icmp sgt i64 %531, 0
  br i1 %536, label %537, label %540

537:                                              ; preds = %527
  %538 = bitcast i16* %534 to i8*
  %539 = bitcast i16* %529 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %538, i8* align 2 %539, i64 %531, i1 false) #12
  br label %540

540:                                              ; preds = %537, %527
  %541 = load i16*, i16** %16, align 8
  %542 = icmp eq i16* %541, %1
  br i1 %542, label %699, label %543

543:                                              ; preds = %540
  %544 = getelementptr i16, i16* %541, i64 -1
  %545 = ptrtoint i16* %544 to i64
  %546 = sub i64 %545, %6
  %547 = lshr i64 %546, 1
  %548 = add nuw i64 %547, 1
  %549 = icmp ult i64 %548, 16
  br i1 %549, label %646, label %550

550:                                              ; preds = %543
  %551 = add i64 %366, %9
  %552 = getelementptr i16, i16* %541, i64 -1
  %553 = ptrtoint i16* %552 to i64
  %554 = sub i64 %553, %6
  %555 = lshr i64 %554, 1
  %556 = add i64 %551, %555
  %557 = add i64 %556, 1
  %558 = sub i64 %557, %7
  %559 = getelementptr i16, i16* %376, i64 %558
  %560 = add nuw i64 %555, 1
  %561 = getelementptr i16, i16* %1, i64 %560
  %562 = icmp ult i16* %379, %561
  %563 = icmp ugt i16* %559, %1
  %564 = and i1 %562, %563
  br i1 %564, label %646, label %565

565:                                              ; preds = %550
  %566 = and i64 %548, -16
  %567 = getelementptr i16, i16* %379, i64 %566
  %568 = getelementptr i16, i16* %1, i64 %566
  %569 = add i64 %566, -16
  %570 = lshr exact i64 %569, 4
  %571 = add nuw nsw i64 %570, 1
  %572 = and i64 %571, 3
  %573 = icmp ult i64 %569, 48
  br i1 %573, label %625, label %574

574:                                              ; preds = %565
  %575 = sub nsw i64 %571, %572
  br label %576

576:                                              ; preds = %576, %574
  %577 = phi i64 [ 0, %574 ], [ %622, %576 ]
  %578 = phi i64 [ %575, %574 ], [ %623, %576 ]
  %579 = getelementptr i16, i16* %379, i64 %577
  %580 = getelementptr i16, i16* %1, i64 %577
  %581 = bitcast i16* %580 to <8 x i16>*
  %582 = load <8 x i16>, <8 x i16>* %581, align 2, !alias.scope !154
  %583 = getelementptr i16, i16* %580, i64 8
  %584 = bitcast i16* %583 to <8 x i16>*
  %585 = load <8 x i16>, <8 x i16>* %584, align 2, !alias.scope !154
  %586 = bitcast i16* %579 to <8 x i16>*
  store <8 x i16> %582, <8 x i16>* %586, align 2, !alias.scope !157, !noalias !154
  %587 = getelementptr i16, i16* %579, i64 8
  %588 = bitcast i16* %587 to <8 x i16>*
  store <8 x i16> %585, <8 x i16>* %588, align 2, !alias.scope !157, !noalias !154
  %589 = or i64 %577, 16
  %590 = getelementptr i16, i16* %379, i64 %589
  %591 = getelementptr i16, i16* %1, i64 %589
  %592 = bitcast i16* %591 to <8 x i16>*
  %593 = load <8 x i16>, <8 x i16>* %592, align 2, !alias.scope !154
  %594 = getelementptr i16, i16* %591, i64 8
  %595 = bitcast i16* %594 to <8 x i16>*
  %596 = load <8 x i16>, <8 x i16>* %595, align 2, !alias.scope !154
  %597 = bitcast i16* %590 to <8 x i16>*
  store <8 x i16> %593, <8 x i16>* %597, align 2, !alias.scope !157, !noalias !154
  %598 = getelementptr i16, i16* %590, i64 8
  %599 = bitcast i16* %598 to <8 x i16>*
  store <8 x i16> %596, <8 x i16>* %599, align 2, !alias.scope !157, !noalias !154
  %600 = or i64 %577, 32
  %601 = getelementptr i16, i16* %379, i64 %600
  %602 = getelementptr i16, i16* %1, i64 %600
  %603 = bitcast i16* %602 to <8 x i16>*
  %604 = load <8 x i16>, <8 x i16>* %603, align 2, !alias.scope !154
  %605 = getelementptr i16, i16* %602, i64 8
  %606 = bitcast i16* %605 to <8 x i16>*
  %607 = load <8 x i16>, <8 x i16>* %606, align 2, !alias.scope !154
  %608 = bitcast i16* %601 to <8 x i16>*
  store <8 x i16> %604, <8 x i16>* %608, align 2, !alias.scope !157, !noalias !154
  %609 = getelementptr i16, i16* %601, i64 8
  %610 = bitcast i16* %609 to <8 x i16>*
  store <8 x i16> %607, <8 x i16>* %610, align 2, !alias.scope !157, !noalias !154
  %611 = or i64 %577, 48
  %612 = getelementptr i16, i16* %379, i64 %611
  %613 = getelementptr i16, i16* %1, i64 %611
  %614 = bitcast i16* %613 to <8 x i16>*
  %615 = load <8 x i16>, <8 x i16>* %614, align 2, !alias.scope !154
  %616 = getelementptr i16, i16* %613, i64 8
  %617 = bitcast i16* %616 to <8 x i16>*
  %618 = load <8 x i16>, <8 x i16>* %617, align 2, !alias.scope !154
  %619 = bitcast i16* %612 to <8 x i16>*
  store <8 x i16> %615, <8 x i16>* %619, align 2, !alias.scope !157, !noalias !154
  %620 = getelementptr i16, i16* %612, i64 8
  %621 = bitcast i16* %620 to <8 x i16>*
  store <8 x i16> %618, <8 x i16>* %621, align 2, !alias.scope !157, !noalias !154
  %622 = add i64 %577, 64
  %623 = add i64 %578, -4
  %624 = icmp eq i64 %623, 0
  br i1 %624, label %625, label %576, !llvm.loop !159

625:                                              ; preds = %576, %565
  %626 = phi i64 [ 0, %565 ], [ %622, %576 ]
  %627 = icmp eq i64 %572, 0
  br i1 %627, label %644, label %628

628:                                              ; preds = %625, %628
  %629 = phi i64 [ %641, %628 ], [ %626, %625 ]
  %630 = phi i64 [ %642, %628 ], [ %572, %625 ]
  %631 = getelementptr i16, i16* %379, i64 %629
  %632 = getelementptr i16, i16* %1, i64 %629
  %633 = bitcast i16* %632 to <8 x i16>*
  %634 = load <8 x i16>, <8 x i16>* %633, align 2, !alias.scope !154
  %635 = getelementptr i16, i16* %632, i64 8
  %636 = bitcast i16* %635 to <8 x i16>*
  %637 = load <8 x i16>, <8 x i16>* %636, align 2, !alias.scope !154
  %638 = bitcast i16* %631 to <8 x i16>*
  store <8 x i16> %634, <8 x i16>* %638, align 2, !alias.scope !157, !noalias !154
  %639 = getelementptr i16, i16* %631, i64 8
  %640 = bitcast i16* %639 to <8 x i16>*
  store <8 x i16> %637, <8 x i16>* %640, align 2, !alias.scope !157, !noalias !154
  %641 = add i64 %629, 16
  %642 = add i64 %630, -1
  %643 = icmp eq i64 %642, 0
  br i1 %643, label %644, label %628, !llvm.loop !160

644:                                              ; preds = %628, %625
  %645 = icmp eq i64 %548, %566
  br i1 %645, label %699, label %646

646:                                              ; preds = %644, %550, %543
  %647 = phi i16* [ %379, %550 ], [ %379, %543 ], [ %567, %644 ]
  %648 = phi i16* [ %1, %550 ], [ %1, %543 ], [ %568, %644 ]
  %649 = ptrtoint i16* %648 to i64
  %650 = getelementptr i16, i16* %541, i64 -1
  %651 = ptrtoint i16* %650 to i64
  %652 = sub i64 %651, %649
  %653 = lshr i64 %652, 1
  %654 = add nuw i64 %653, 1
  %655 = and i64 %654, 7
  %656 = icmp eq i64 %655, 0
  br i1 %656, label %666, label %657

657:                                              ; preds = %646, %657
  %658 = phi i16* [ %663, %657 ], [ %647, %646 ]
  %659 = phi i16* [ %662, %657 ], [ %648, %646 ]
  %660 = phi i64 [ %664, %657 ], [ %655, %646 ]
  %661 = load i16, i16* %659, align 2
  store i16 %661, i16* %658, align 2
  %662 = getelementptr inbounds i16, i16* %659, i64 1
  %663 = getelementptr inbounds i16, i16* %658, i64 1
  %664 = add i64 %660, -1
  %665 = icmp eq i64 %664, 0
  br i1 %665, label %666, label %657, !llvm.loop !161

666:                                              ; preds = %657, %646
  %667 = phi i16* [ undef, %646 ], [ %663, %657 ]
  %668 = phi i16* [ %647, %646 ], [ %663, %657 ]
  %669 = phi i16* [ %648, %646 ], [ %662, %657 ]
  %670 = icmp ult i64 %652, 14
  br i1 %670, label %699, label %671

671:                                              ; preds = %666, %671
  %672 = phi i16* [ %697, %671 ], [ %668, %666 ]
  %673 = phi i16* [ %696, %671 ], [ %669, %666 ]
  %674 = load i16, i16* %673, align 2
  store i16 %674, i16* %672, align 2
  %675 = getelementptr inbounds i16, i16* %673, i64 1
  %676 = getelementptr inbounds i16, i16* %672, i64 1
  %677 = load i16, i16* %675, align 2
  store i16 %677, i16* %676, align 2
  %678 = getelementptr inbounds i16, i16* %673, i64 2
  %679 = getelementptr inbounds i16, i16* %672, i64 2
  %680 = load i16, i16* %678, align 2
  store i16 %680, i16* %679, align 2
  %681 = getelementptr inbounds i16, i16* %673, i64 3
  %682 = getelementptr inbounds i16, i16* %672, i64 3
  %683 = load i16, i16* %681, align 2
  store i16 %683, i16* %682, align 2
  %684 = getelementptr inbounds i16, i16* %673, i64 4
  %685 = getelementptr inbounds i16, i16* %672, i64 4
  %686 = load i16, i16* %684, align 2
  store i16 %686, i16* %685, align 2
  %687 = getelementptr inbounds i16, i16* %673, i64 5
  %688 = getelementptr inbounds i16, i16* %672, i64 5
  %689 = load i16, i16* %687, align 2
  store i16 %689, i16* %688, align 2
  %690 = getelementptr inbounds i16, i16* %673, i64 6
  %691 = getelementptr inbounds i16, i16* %672, i64 6
  %692 = load i16, i16* %690, align 2
  store i16 %692, i16* %691, align 2
  %693 = getelementptr inbounds i16, i16* %673, i64 7
  %694 = getelementptr inbounds i16, i16* %672, i64 7
  %695 = load i16, i16* %693, align 2
  store i16 %695, i16* %694, align 2
  %696 = getelementptr inbounds i16, i16* %673, i64 8
  %697 = getelementptr inbounds i16, i16* %672, i64 8
  %698 = icmp eq i16* %696, %541
  br i1 %698, label %699, label %671, !llvm.loop !162

699:                                              ; preds = %666, %671, %644, %540
  %700 = phi i16* [ %379, %540 ], [ %567, %644 ], [ %667, %666 ], [ %697, %671 ]
  %701 = ptrtoint i16* %700 to i64
  %702 = load i16*, i16** %8, align 8
  store i64 %535, i64* %350, align 8
  store i64 %701, i64* %23, align 8
  store i64 %528, i64* %14, align 8
  %703 = icmp eq i16* %702, null
  br i1 %703, label %706, label %704

704:                                              ; preds = %699
  %705 = bitcast i16* %702 to i8*
  tail call void @_ZdlPv(i8* %705) #10
  br label %706

706:                                              ; preds = %341, %336, %704, %699, %120, %262, %4
  %707 = phi i16* [ %1, %4 ], [ %1, %262 ], [ %1, %120 ], [ %377, %699 ], [ %377, %704 ], [ %1, %336 ], [ %1, %341 ]
  ret i16* %707
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector15String16Builder12appendNumberEm(%"class.v8_inspector::String16Builder"*, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca [20 x i8], align 16
  %4 = getelementptr inbounds [20 x i8], [20 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %4) #12
  %5 = call i32 (i8*, i32, i8*, ...) @_ZN2v84base2OS8SNPrintFEPciPKcz(i8* nonnull %4, i32 20, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 %1) #12
  %6 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %0, i64 0, i32 0
  %7 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = load i16*, i16** %7, align 8
  %9 = sext i32 %5 to i64
  %10 = getelementptr inbounds [20 x i8], [20 x i8]* %3, i64 0, i64 %9
  %11 = call i16* @_ZNSt3__16vectorItNS_9allocatorItEEE6insertIPcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleItNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIPtEEE4typeENSB_IPKtEES7_S7_(%"class.std::__1::vector"* %6, i16* %8, i8* nonnull %4, i8* %10)
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %4) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector15String16Builder19appendUnsignedAsHexEm(%"class.v8_inspector::String16Builder"*, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca [17 x i8], align 16
  %4 = getelementptr inbounds [17 x i8], [17 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %4) #12
  %5 = call i32 (i8*, i32, i8*, ...) @_ZN2v84base2OS8SNPrintFEPciPKcz(i8* nonnull %4, i32 17, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0), i64 %1) #12
  %6 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %0, i64 0, i32 0
  %7 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = load i16*, i16** %7, align 8
  %9 = sext i32 %5 to i64
  %10 = getelementptr inbounds [17 x i8], [17 x i8]* %3, i64 0, i64 %9
  %11 = call i16* @_ZNSt3__16vectorItNS_9allocatorItEEE6insertIPcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleItNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIPtEEE4typeENSB_IPKtEES7_S7_(%"class.std::__1::vector"* %6, i16* %8, i8* nonnull %4, i8* %10)
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %4) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector15String16Builder19appendUnsignedAsHexEj(%"class.v8_inspector::String16Builder"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca [9 x i8], align 1
  %4 = getelementptr inbounds [9 x i8], [9 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 9, i8* nonnull %4) #12
  %5 = call i32 (i8*, i32, i8*, ...) @_ZN2v84base2OS8SNPrintFEPciPKcz(i8* nonnull %4, i32 9, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i32 %1) #12
  %6 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %0, i64 0, i32 0
  %7 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = load i16*, i16** %7, align 8
  %9 = sext i32 %5 to i64
  %10 = getelementptr inbounds [9 x i8], [9 x i8]* %3, i64 0, i64 %9
  %11 = call i16* @_ZNSt3__16vectorItNS_9allocatorItEEE6insertIPcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleItNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIPtEEE4typeENSB_IPKtEES7_S7_(%"class.std::__1::vector"* %6, i16* %8, i8* nonnull %4, i8* %10)
  call void @llvm.lifetime.end.p0i8(i64 9, i8* nonnull %4) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector15String16Builder19appendUnsignedAsHexEh(%"class.v8_inspector::String16Builder"*, i8 zeroext) local_unnamed_addr #0 align 2 {
  %3 = alloca [3 x i8], align 1
  %4 = getelementptr inbounds [3 x i8], [3 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %4) #12
  %5 = zext i8 %1 to i32
  %6 = call i32 (i8*, i32, i8*, ...) @_ZN2v84base2OS8SNPrintFEPciPKcz(i8* nonnull %4, i32 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i32 %5) #12
  %7 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %0, i64 0, i32 0
  %8 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = load i16*, i16** %8, align 8
  %10 = sext i32 %6 to i64
  %11 = getelementptr inbounds [3 x i8], [3 x i8]* %3, i64 0, i64 %10
  %12 = call i16* @_ZNSt3__16vectorItNS_9allocatorItEEE6insertIPcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleItNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIPtEEE4typeENSB_IPKtEES7_S7_(%"class.std::__1::vector"* %7, i16* %9, i8* nonnull %4, i8* %11)
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %4) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector15String16Builder8toStringEv(%"class.v8_inspector::String16"* noalias sret, %"class.v8_inspector::String16Builder"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %1, i64 0, i32 0, i32 0, i32 0
  %4 = load i16*, i16** %3, align 8
  %5 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %1, i64 0, i32 0, i32 0, i32 1
  %6 = bitcast i16** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = ptrtoint i16* %4 to i64
  %9 = sub i64 %7, %8
  %10 = ashr exact i64 %9, 1
  %11 = icmp ugt i64 %10, 9223372036854775791
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.v8_inspector::String16"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %13) #9
  unreachable

14:                                               ; preds = %2
  %15 = icmp ult i64 %10, 11
  br i1 %15, label %29, label %16

16:                                               ; preds = %14
  %17 = add nuw nsw i64 %10, 8
  %18 = and i64 %17, -8
  %19 = icmp slt i64 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %16
  tail call void @abort() #9
  unreachable

21:                                               ; preds = %16
  %22 = shl i64 %18, 1
  %23 = tail call i8* @_Znwm(i64 %22) #10
  %24 = bitcast i8* %23 to i16*
  %25 = bitcast %"class.v8_inspector::String16"* %0 to i8**
  store i8* %23, i8** %25, align 8
  %26 = or i64 %18, -9223372036854775808
  %27 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %26, i64* %27, align 8
  %28 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %10, i64* %28, align 8
  br label %35

29:                                               ; preds = %14
  %30 = trunc i64 %10 to i8
  %31 = bitcast %"class.v8_inspector::String16"* %0 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %32 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %31, i64 0, i32 1, i32 1
  store i8 %30, i8* %32, align 1
  %33 = bitcast %"class.v8_inspector::String16"* %0 to i16*
  %34 = icmp eq i64 %9, 0
  br i1 %34, label %179, label %35

35:                                               ; preds = %29, %21
  %36 = phi i16* [ %24, %21 ], [ %33, %29 ]
  %37 = icmp ult i64 %10, 16
  br i1 %37, label %126, label %38

38:                                               ; preds = %35
  %39 = getelementptr i16, i16* %36, i64 %10
  %40 = getelementptr i16, i16* %4, i64 %10
  %41 = icmp ult i16* %36, %40
  %42 = icmp ult i16* %4, %39
  %43 = and i1 %41, %42
  br i1 %43, label %126, label %44

44:                                               ; preds = %38
  %45 = and i64 %10, -16
  %46 = getelementptr i16, i16* %36, i64 %45
  %47 = sub nsw i64 %10, %45
  %48 = getelementptr i16, i16* %4, i64 %45
  %49 = add nsw i64 %45, -16
  %50 = lshr exact i64 %49, 4
  %51 = add nuw nsw i64 %50, 1
  %52 = and i64 %51, 3
  %53 = icmp ult i64 %49, 48
  br i1 %53, label %105, label %54

54:                                               ; preds = %44
  %55 = sub nsw i64 %51, %52
  br label %56

56:                                               ; preds = %56, %54
  %57 = phi i64 [ 0, %54 ], [ %102, %56 ]
  %58 = phi i64 [ %55, %54 ], [ %103, %56 ]
  %59 = getelementptr i16, i16* %36, i64 %57
  %60 = getelementptr i16, i16* %4, i64 %57
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 2, !alias.scope !163
  %63 = getelementptr i16, i16* %60, i64 8
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !163
  %66 = bitcast i16* %59 to <8 x i16>*
  store <8 x i16> %62, <8 x i16>* %66, align 2, !alias.scope !166, !noalias !163
  %67 = getelementptr i16, i16* %59, i64 8
  %68 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> %65, <8 x i16>* %68, align 2, !alias.scope !166, !noalias !163
  %69 = or i64 %57, 16
  %70 = getelementptr i16, i16* %36, i64 %69
  %71 = getelementptr i16, i16* %4, i64 %69
  %72 = bitcast i16* %71 to <8 x i16>*
  %73 = load <8 x i16>, <8 x i16>* %72, align 2, !alias.scope !163
  %74 = getelementptr i16, i16* %71, i64 8
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2, !alias.scope !163
  %77 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %77, align 2, !alias.scope !166, !noalias !163
  %78 = getelementptr i16, i16* %70, i64 8
  %79 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> %76, <8 x i16>* %79, align 2, !alias.scope !166, !noalias !163
  %80 = or i64 %57, 32
  %81 = getelementptr i16, i16* %36, i64 %80
  %82 = getelementptr i16, i16* %4, i64 %80
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !163
  %85 = getelementptr i16, i16* %82, i64 8
  %86 = bitcast i16* %85 to <8 x i16>*
  %87 = load <8 x i16>, <8 x i16>* %86, align 2, !alias.scope !163
  %88 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %88, align 2, !alias.scope !166, !noalias !163
  %89 = getelementptr i16, i16* %81, i64 8
  %90 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %90, align 2, !alias.scope !166, !noalias !163
  %91 = or i64 %57, 48
  %92 = getelementptr i16, i16* %36, i64 %91
  %93 = getelementptr i16, i16* %4, i64 %91
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2, !alias.scope !163
  %96 = getelementptr i16, i16* %93, i64 8
  %97 = bitcast i16* %96 to <8 x i16>*
  %98 = load <8 x i16>, <8 x i16>* %97, align 2, !alias.scope !163
  %99 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %95, <8 x i16>* %99, align 2, !alias.scope !166, !noalias !163
  %100 = getelementptr i16, i16* %92, i64 8
  %101 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %98, <8 x i16>* %101, align 2, !alias.scope !166, !noalias !163
  %102 = add i64 %57, 64
  %103 = add i64 %58, -4
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %105, label %56, !llvm.loop !168

105:                                              ; preds = %56, %44
  %106 = phi i64 [ 0, %44 ], [ %102, %56 ]
  %107 = icmp eq i64 %52, 0
  br i1 %107, label %124, label %108

108:                                              ; preds = %105, %108
  %109 = phi i64 [ %121, %108 ], [ %106, %105 ]
  %110 = phi i64 [ %122, %108 ], [ %52, %105 ]
  %111 = getelementptr i16, i16* %36, i64 %109
  %112 = getelementptr i16, i16* %4, i64 %109
  %113 = bitcast i16* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 2, !alias.scope !163
  %115 = getelementptr i16, i16* %112, i64 8
  %116 = bitcast i16* %115 to <8 x i16>*
  %117 = load <8 x i16>, <8 x i16>* %116, align 2, !alias.scope !163
  %118 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %114, <8 x i16>* %118, align 2, !alias.scope !166, !noalias !163
  %119 = getelementptr i16, i16* %111, i64 8
  %120 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> %117, <8 x i16>* %120, align 2, !alias.scope !166, !noalias !163
  %121 = add i64 %109, 16
  %122 = add i64 %110, -1
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %108, !llvm.loop !169

124:                                              ; preds = %108, %105
  %125 = icmp eq i64 %10, %45
  br i1 %125, label %179, label %126

126:                                              ; preds = %124, %38, %35
  %127 = phi i16* [ %36, %38 ], [ %36, %35 ], [ %46, %124 ]
  %128 = phi i64 [ %10, %38 ], [ %10, %35 ], [ %47, %124 ]
  %129 = phi i16* [ %4, %38 ], [ %4, %35 ], [ %48, %124 ]
  %130 = add i64 %128, -1
  %131 = and i64 %128, 7
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %144, label %133

133:                                              ; preds = %126, %133
  %134 = phi i16* [ %140, %133 ], [ %127, %126 ]
  %135 = phi i64 [ %139, %133 ], [ %128, %126 ]
  %136 = phi i16* [ %141, %133 ], [ %129, %126 ]
  %137 = phi i64 [ %142, %133 ], [ %131, %126 ]
  %138 = load i16, i16* %136, align 2
  store i16 %138, i16* %134, align 2
  %139 = add i64 %135, -1
  %140 = getelementptr inbounds i16, i16* %134, i64 1
  %141 = getelementptr inbounds i16, i16* %136, i64 1
  %142 = add i64 %137, -1
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %144, label %133, !llvm.loop !170

144:                                              ; preds = %133, %126
  %145 = phi i16* [ %127, %126 ], [ %140, %133 ]
  %146 = phi i64 [ %128, %126 ], [ %139, %133 ]
  %147 = phi i16* [ %129, %126 ], [ %141, %133 ]
  %148 = icmp ult i64 %130, 7
  br i1 %148, label %179, label %149

149:                                              ; preds = %144, %149
  %150 = phi i16* [ %176, %149 ], [ %145, %144 ]
  %151 = phi i64 [ %175, %149 ], [ %146, %144 ]
  %152 = phi i16* [ %177, %149 ], [ %147, %144 ]
  %153 = load i16, i16* %152, align 2
  store i16 %153, i16* %150, align 2
  %154 = getelementptr inbounds i16, i16* %150, i64 1
  %155 = getelementptr inbounds i16, i16* %152, i64 1
  %156 = load i16, i16* %155, align 2
  store i16 %156, i16* %154, align 2
  %157 = getelementptr inbounds i16, i16* %150, i64 2
  %158 = getelementptr inbounds i16, i16* %152, i64 2
  %159 = load i16, i16* %158, align 2
  store i16 %159, i16* %157, align 2
  %160 = getelementptr inbounds i16, i16* %150, i64 3
  %161 = getelementptr inbounds i16, i16* %152, i64 3
  %162 = load i16, i16* %161, align 2
  store i16 %162, i16* %160, align 2
  %163 = getelementptr inbounds i16, i16* %150, i64 4
  %164 = getelementptr inbounds i16, i16* %152, i64 4
  %165 = load i16, i16* %164, align 2
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds i16, i16* %150, i64 5
  %167 = getelementptr inbounds i16, i16* %152, i64 5
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %166, align 2
  %169 = getelementptr inbounds i16, i16* %150, i64 6
  %170 = getelementptr inbounds i16, i16* %152, i64 6
  %171 = load i16, i16* %170, align 2
  store i16 %171, i16* %169, align 2
  %172 = getelementptr inbounds i16, i16* %150, i64 7
  %173 = getelementptr inbounds i16, i16* %152, i64 7
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %172, align 2
  %175 = add i64 %151, -8
  %176 = getelementptr inbounds i16, i16* %150, i64 8
  %177 = getelementptr inbounds i16, i16* %152, i64 8
  %178 = icmp eq i64 %175, 0
  br i1 %178, label %179, label %149, !llvm.loop !171

179:                                              ; preds = %144, %149, %124, %29
  %180 = phi i16* [ %33, %29 ], [ %36, %124 ], [ %36, %149 ], [ %36, %144 ]
  %181 = getelementptr inbounds i16, i16* %180, i64 %10
  store i16 0, i16* %181, align 2
  %182 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 1
  store i64 0, i64* %182, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector15String16Builder15reserveCapacityEm(%"class.v8_inspector::String16Builder"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i16** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.v8_inspector::String16Builder"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 1
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %11, label %35

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %0, i64 0, i32 0, i32 0, i32 1
  %13 = bitcast i16** %12 to i64*
  %14 = icmp slt i64 %1, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %11
  tail call void @abort() #9
  unreachable

16:                                               ; preds = %11
  %17 = load i64, i64* %13, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 1
  %20 = shl i64 %1, 1
  %21 = tail call i8* @_Znwm(i64 %20) #10
  %22 = bitcast i8* %21 to i16*
  %23 = getelementptr inbounds i16, i16* %22, i64 %19
  %24 = ptrtoint i16* %23 to i64
  %25 = getelementptr inbounds i16, i16* %22, i64 %1
  %26 = ptrtoint i16* %25 to i64
  %27 = ptrtoint i8* %21 to i64
  %28 = icmp sgt i64 %18, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %16
  %30 = inttoptr i64 %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %21, i8* align 2 %30, i64 %18, i1 false) #12
  br label %31

31:                                               ; preds = %29, %16
  store i64 %27, i64* %6, align 8
  store i64 %24, i64* %13, align 8
  store i64 %26, i64* %4, align 8
  %32 = icmp eq i64 %7, 0
  br i1 %32, label %35, label %33

33:                                               ; preds = %31
  %34 = inttoptr i64 %7 to i8*
  tail call void @_ZdlPv(i8* %34) #10
  br label %35

35:                                               ; preds = %2, %31, %33
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector8String168fromUTF8EPKcm(%"class.v8_inspector::String16"* noalias sret, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #12
  call void @_ZN12v8_inspector11UTF8ToUTF16EPKcm(%"class.std::__1::basic_string"* nonnull sret %4, i8* %1, i64 %2) #12
  %6 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %3
  %11 = bitcast %"class.v8_inspector::String16"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* nonnull align 8 %5, i64 24, i1 false) #12
  %12 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 1
  store i64 0, i64* %12, align 8
  br label %195

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load i16*, i16** %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = icmp ult i64 %17, 11
  br i1 %18, label %19, label %24

19:                                               ; preds = %13
  %20 = bitcast %"class.v8_inspector::String16"* %0 to i16*
  %21 = trunc i64 %17 to i8
  %22 = bitcast %"class.v8_inspector::String16"* %0 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %22, i64 0, i32 1, i32 1
  store i8 %21, i8* %23, align 1
  br label %41

24:                                               ; preds = %13
  %25 = icmp ugt i64 %17, 9223372036854775791
  br i1 %25, label %26, label %28

26:                                               ; preds = %24
  %27 = bitcast %"class.v8_inspector::String16"* %0 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %27) #9
  unreachable

28:                                               ; preds = %24
  %29 = add nuw nsw i64 %17, 8
  %30 = and i64 %29, -8
  %31 = icmp slt i64 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %28
  call void @abort() #9
  unreachable

33:                                               ; preds = %28
  %34 = shl i64 %30, 1
  %35 = call i8* @_Znwm(i64 %34) #10
  %36 = bitcast i8* %35 to i16*
  %37 = bitcast %"class.v8_inspector::String16"* %0 to i8**
  store i8* %35, i8** %37, align 8
  %38 = or i64 %30, -9223372036854775808
  %39 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %38, i64* %39, align 8
  %40 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %17, i64* %40, align 8
  br label %41

41:                                               ; preds = %33, %19
  %42 = phi i16* [ %20, %19 ], [ %36, %33 ]
  %43 = add nuw nsw i64 %17, 1
  %44 = add i64 %17, 1
  %45 = icmp ult i64 %44, 16
  br i1 %45, label %135, label %46

46:                                               ; preds = %41
  %47 = add i64 %17, 1
  %48 = getelementptr i16, i16* %42, i64 %47
  %49 = getelementptr i16, i16* %15, i64 %47
  %50 = icmp ult i16* %42, %49
  %51 = icmp ult i16* %15, %48
  %52 = and i1 %50, %51
  br i1 %52, label %135, label %53

53:                                               ; preds = %46
  %54 = and i64 %44, -16
  %55 = getelementptr i16, i16* %42, i64 %54
  %56 = sub i64 %43, %54
  %57 = getelementptr i16, i16* %15, i64 %54
  %58 = add i64 %54, -16
  %59 = lshr exact i64 %58, 4
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 3
  %62 = icmp ult i64 %58, 48
  br i1 %62, label %114, label %63

63:                                               ; preds = %53
  %64 = sub nsw i64 %60, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 0, %63 ], [ %111, %65 ]
  %67 = phi i64 [ %64, %63 ], [ %112, %65 ]
  %68 = getelementptr i16, i16* %42, i64 %66
  %69 = getelementptr i16, i16* %15, i64 %66
  %70 = bitcast i16* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2, !alias.scope !172
  %72 = getelementptr i16, i16* %69, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2, !alias.scope !172
  %75 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %75, align 2, !alias.scope !175, !noalias !172
  %76 = getelementptr i16, i16* %68, i64 8
  %77 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %77, align 2, !alias.scope !175, !noalias !172
  %78 = or i64 %66, 16
  %79 = getelementptr i16, i16* %42, i64 %78
  %80 = getelementptr i16, i16* %15, i64 %78
  %81 = bitcast i16* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !172
  %83 = getelementptr i16, i16* %80, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2, !alias.scope !172
  %86 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %86, align 2, !alias.scope !175, !noalias !172
  %87 = getelementptr i16, i16* %79, i64 8
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %85, <8 x i16>* %88, align 2, !alias.scope !175, !noalias !172
  %89 = or i64 %66, 32
  %90 = getelementptr i16, i16* %42, i64 %89
  %91 = getelementptr i16, i16* %15, i64 %89
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !172
  %94 = getelementptr i16, i16* %91, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2, !alias.scope !172
  %97 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %97, align 2, !alias.scope !175, !noalias !172
  %98 = getelementptr i16, i16* %90, i64 8
  %99 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %99, align 2, !alias.scope !175, !noalias !172
  %100 = or i64 %66, 48
  %101 = getelementptr i16, i16* %42, i64 %100
  %102 = getelementptr i16, i16* %15, i64 %100
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !172
  %105 = getelementptr i16, i16* %102, i64 8
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 2, !alias.scope !172
  %108 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %108, align 2, !alias.scope !175, !noalias !172
  %109 = getelementptr i16, i16* %101, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %110, align 2, !alias.scope !175, !noalias !172
  %111 = add i64 %66, 64
  %112 = add i64 %67, -4
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %65, !llvm.loop !177

114:                                              ; preds = %65, %53
  %115 = phi i64 [ 0, %53 ], [ %111, %65 ]
  %116 = icmp eq i64 %61, 0
  br i1 %116, label %133, label %117

117:                                              ; preds = %114, %117
  %118 = phi i64 [ %130, %117 ], [ %115, %114 ]
  %119 = phi i64 [ %131, %117 ], [ %61, %114 ]
  %120 = getelementptr i16, i16* %42, i64 %118
  %121 = getelementptr i16, i16* %15, i64 %118
  %122 = bitcast i16* %121 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2, !alias.scope !172
  %124 = getelementptr i16, i16* %121, i64 8
  %125 = bitcast i16* %124 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 2, !alias.scope !172
  %127 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %127, align 2, !alias.scope !175, !noalias !172
  %128 = getelementptr i16, i16* %120, i64 8
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %126, <8 x i16>* %129, align 2, !alias.scope !175, !noalias !172
  %130 = add i64 %118, 16
  %131 = add i64 %119, -1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %117, !llvm.loop !178

133:                                              ; preds = %117, %114
  %134 = icmp eq i64 %44, %54
  br i1 %134, label %188, label %135

135:                                              ; preds = %133, %46, %41
  %136 = phi i16* [ %42, %46 ], [ %42, %41 ], [ %55, %133 ]
  %137 = phi i64 [ %43, %46 ], [ %43, %41 ], [ %56, %133 ]
  %138 = phi i16* [ %15, %46 ], [ %15, %41 ], [ %57, %133 ]
  %139 = add i64 %137, -1
  %140 = and i64 %137, 7
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %153, label %142

142:                                              ; preds = %135, %142
  %143 = phi i16* [ %149, %142 ], [ %136, %135 ]
  %144 = phi i64 [ %148, %142 ], [ %137, %135 ]
  %145 = phi i16* [ %150, %142 ], [ %138, %135 ]
  %146 = phi i64 [ %151, %142 ], [ %140, %135 ]
  %147 = load i16, i16* %145, align 2
  store i16 %147, i16* %143, align 2
  %148 = add i64 %144, -1
  %149 = getelementptr inbounds i16, i16* %143, i64 1
  %150 = getelementptr inbounds i16, i16* %145, i64 1
  %151 = add i64 %146, -1
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %153, label %142, !llvm.loop !179

153:                                              ; preds = %142, %135
  %154 = phi i16* [ %136, %135 ], [ %149, %142 ]
  %155 = phi i64 [ %137, %135 ], [ %148, %142 ]
  %156 = phi i16* [ %138, %135 ], [ %150, %142 ]
  %157 = icmp ult i64 %139, 7
  br i1 %157, label %188, label %158

158:                                              ; preds = %153, %158
  %159 = phi i16* [ %185, %158 ], [ %154, %153 ]
  %160 = phi i64 [ %184, %158 ], [ %155, %153 ]
  %161 = phi i16* [ %186, %158 ], [ %156, %153 ]
  %162 = load i16, i16* %161, align 2
  store i16 %162, i16* %159, align 2
  %163 = getelementptr inbounds i16, i16* %159, i64 1
  %164 = getelementptr inbounds i16, i16* %161, i64 1
  %165 = load i16, i16* %164, align 2
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds i16, i16* %159, i64 2
  %167 = getelementptr inbounds i16, i16* %161, i64 2
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %166, align 2
  %169 = getelementptr inbounds i16, i16* %159, i64 3
  %170 = getelementptr inbounds i16, i16* %161, i64 3
  %171 = load i16, i16* %170, align 2
  store i16 %171, i16* %169, align 2
  %172 = getelementptr inbounds i16, i16* %159, i64 4
  %173 = getelementptr inbounds i16, i16* %161, i64 4
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %172, align 2
  %175 = getelementptr inbounds i16, i16* %159, i64 5
  %176 = getelementptr inbounds i16, i16* %161, i64 5
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %159, i64 6
  %179 = getelementptr inbounds i16, i16* %161, i64 6
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = getelementptr inbounds i16, i16* %159, i64 7
  %182 = getelementptr inbounds i16, i16* %161, i64 7
  %183 = load i16, i16* %182, align 2
  store i16 %183, i16* %181, align 2
  %184 = add i64 %160, -8
  %185 = getelementptr inbounds i16, i16* %159, i64 8
  %186 = getelementptr inbounds i16, i16* %161, i64 8
  %187 = icmp eq i64 %184, 0
  br i1 %187, label %188, label %158, !llvm.loop !180

188:                                              ; preds = %153, %158, %133
  %189 = load i8, i8* %7, align 1
  %190 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 1
  store i64 0, i64* %190, align 8
  %191 = icmp slt i8 %189, 0
  br i1 %191, label %192, label %195

192:                                              ; preds = %188
  %193 = bitcast %"class.std::__1::basic_string"* %4 to i8**
  %194 = load i8*, i8** %193, align 8
  call void @_ZdlPv(i8* %194) #10
  br label %195

195:                                              ; preds = %10, %188, %192
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #12
  ret void
}

declare void @_ZN12v8_inspector11UTF8ToUTF16EPKcm(%"class.std::__1::basic_string"* sret, i8*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector8String1611fromUTF16LEEPKtm(%"class.v8_inspector::String16"* noalias sret, i16* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %4 = icmp ugt i64 %2, 9223372036854775791
  br i1 %4, label %5, label %7

5:                                                ; preds = %3
  %6 = bitcast %"class.v8_inspector::String16"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %6) #9
  unreachable

7:                                                ; preds = %3
  %8 = icmp ult i64 %2, 11
  br i1 %8, label %22, label %9

9:                                                ; preds = %7
  %10 = add nuw nsw i64 %2, 8
  %11 = and i64 %10, -8
  %12 = icmp slt i64 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %9
  tail call void @abort() #9
  unreachable

14:                                               ; preds = %9
  %15 = shl i64 %11, 1
  %16 = tail call i8* @_Znwm(i64 %15) #10
  %17 = bitcast i8* %16 to i16*
  %18 = bitcast %"class.v8_inspector::String16"* %0 to i8**
  store i8* %16, i8** %18, align 8
  %19 = or i64 %11, -9223372036854775808
  %20 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %19, i64* %20, align 8
  %21 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %2, i64* %21, align 8
  br label %28

22:                                               ; preds = %7
  %23 = trunc i64 %2 to i8
  %24 = bitcast %"class.v8_inspector::String16"* %0 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %25 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %24, i64 0, i32 1, i32 1
  store i8 %23, i8* %25, align 1
  %26 = bitcast %"class.v8_inspector::String16"* %0 to i16*
  %27 = icmp eq i64 %2, 0
  br i1 %27, label %126, label %28

28:                                               ; preds = %22, %14
  %29 = phi i16* [ %17, %14 ], [ %26, %22 ]
  %30 = icmp ult i64 %2, 16
  br i1 %30, label %113, label %31

31:                                               ; preds = %28
  %32 = and i64 %2, -16
  %33 = getelementptr i16, i16* %29, i64 %32
  %34 = sub i64 %2, %32
  %35 = getelementptr i16, i16* %1, i64 %32
  %36 = add i64 %32, -16
  %37 = lshr exact i64 %36, 4
  %38 = add nuw nsw i64 %37, 1
  %39 = and i64 %38, 3
  %40 = icmp ult i64 %36, 48
  br i1 %40, label %92, label %41

41:                                               ; preds = %31
  %42 = sub nsw i64 %38, %39
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi i64 [ 0, %41 ], [ %89, %43 ]
  %45 = phi i64 [ %42, %41 ], [ %90, %43 ]
  %46 = getelementptr i16, i16* %29, i64 %44
  %47 = getelementptr i16, i16* %1, i64 %44
  %48 = bitcast i16* %47 to <8 x i16>*
  %49 = load <8 x i16>, <8 x i16>* %48, align 2
  %50 = getelementptr i16, i16* %47, i64 8
  %51 = bitcast i16* %50 to <8 x i16>*
  %52 = load <8 x i16>, <8 x i16>* %51, align 2
  %53 = bitcast i16* %46 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %53, align 2
  %54 = getelementptr i16, i16* %46, i64 8
  %55 = bitcast i16* %54 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %55, align 2
  %56 = or i64 %44, 16
  %57 = getelementptr i16, i16* %29, i64 %56
  %58 = getelementptr i16, i16* %1, i64 %56
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2
  %61 = getelementptr i16, i16* %58, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2
  %64 = bitcast i16* %57 to <8 x i16>*
  store <8 x i16> %60, <8 x i16>* %64, align 2
  %65 = getelementptr i16, i16* %57, i64 8
  %66 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %66, align 2
  %67 = or i64 %44, 32
  %68 = getelementptr i16, i16* %29, i64 %67
  %69 = getelementptr i16, i16* %1, i64 %67
  %70 = bitcast i16* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2
  %72 = getelementptr i16, i16* %69, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2
  %75 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %75, align 2
  %76 = getelementptr i16, i16* %68, i64 8
  %77 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %77, align 2
  %78 = or i64 %44, 48
  %79 = getelementptr i16, i16* %29, i64 %78
  %80 = getelementptr i16, i16* %1, i64 %78
  %81 = bitcast i16* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2
  %83 = getelementptr i16, i16* %80, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2
  %86 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %86, align 2
  %87 = getelementptr i16, i16* %79, i64 8
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %85, <8 x i16>* %88, align 2
  %89 = add i64 %44, 64
  %90 = add i64 %45, -4
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %43, !llvm.loop !181

92:                                               ; preds = %43, %31
  %93 = phi i64 [ 0, %31 ], [ %89, %43 ]
  %94 = icmp eq i64 %39, 0
  br i1 %94, label %111, label %95

95:                                               ; preds = %92, %95
  %96 = phi i64 [ %108, %95 ], [ %93, %92 ]
  %97 = phi i64 [ %109, %95 ], [ %39, %92 ]
  %98 = getelementptr i16, i16* %29, i64 %96
  %99 = getelementptr i16, i16* %1, i64 %96
  %100 = bitcast i16* %99 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2
  %102 = getelementptr i16, i16* %99, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2
  %105 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %105, align 2
  %106 = getelementptr i16, i16* %98, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %107, align 2
  %108 = add i64 %96, 16
  %109 = add i64 %97, -1
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %95, !llvm.loop !182

111:                                              ; preds = %95, %92
  %112 = icmp eq i64 %32, %2
  br i1 %112, label %126, label %113

113:                                              ; preds = %111, %28
  %114 = phi i16* [ %29, %28 ], [ %33, %111 ]
  %115 = phi i64 [ %2, %28 ], [ %34, %111 ]
  %116 = phi i16* [ %1, %28 ], [ %35, %111 ]
  br label %117

117:                                              ; preds = %113, %117
  %118 = phi i16* [ %123, %117 ], [ %114, %113 ]
  %119 = phi i64 [ %122, %117 ], [ %115, %113 ]
  %120 = phi i16* [ %124, %117 ], [ %116, %113 ]
  %121 = load i16, i16* %120, align 2
  store i16 %121, i16* %118, align 2
  %122 = add i64 %119, -1
  %123 = getelementptr inbounds i16, i16* %118, i64 1
  %124 = getelementptr inbounds i16, i16* %120, i64 1
  %125 = icmp eq i64 %122, 0
  br i1 %125, label %126, label %117, !llvm.loop !183

126:                                              ; preds = %117, %111, %22
  %127 = phi i16* [ %26, %22 ], [ %29, %111 ], [ %29, %117 ]
  %128 = getelementptr inbounds i16, i16* %127, i64 %2
  store i16 0, i16* %128, align 2
  %129 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 1
  store i64 0, i64* %129, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK12v8_inspector8String164utf8Ev(%"class.std::__1::basic_string.7"* noalias sret, %"class.v8_inspector::String16"*) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.v8_inspector::String16"* %1 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %3, i64 0, i32 1, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %7, label %12

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i16*, i16** %8, align 8
  %10 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  br label %15

12:                                               ; preds = %2
  %13 = bitcast %"class.v8_inspector::String16"* %1 to i16*
  %14 = zext i8 %5 to i64
  br label %15

15:                                               ; preds = %7, %12
  %16 = phi i16* [ %9, %7 ], [ %13, %12 ]
  %17 = phi i64 [ %11, %7 ], [ %14, %12 ]
  tail call void @_ZN12v8_inspector11UTF16ToUTF8EPKtm(%"class.std::__1::basic_string.7"* sret %0, i16* %16, i64 %17) #12
  ret void
}

declare void @_ZN12v8_inspector11UTF16ToUTF8EPKtm(%"class.std::__1::basic_string.7"* sret, i16*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8v8_crdtp16SerializerTraitsIN12v8_inspector8String16EE9SerializeERKS2_PNSt3__16vectorIhNS6_9allocatorIhEEEE(%"class.v8_inspector::String16"* dereferenceable(32), %"class.std::__1::vector.16"*) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.v8_inspector::String16"* %0 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %3, i64 0, i32 1, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  %7 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load i16*, i16** %7, align 8
  %9 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.v8_inspector::String16"* %0 to i16*
  %12 = zext i8 %5 to i64
  %13 = select i1 %6, i16* %8, i16* %11
  %14 = select i1 %6, i64 %10, i64 %12
  tail call void @_ZN8v8_crdtp4cbor15EncodeFromUTF16ENS_4spanItEEPNSt3__16vectorIhNS3_9allocatorIhEEEE(i16* %13, i64 %14, %"class.std::__1::vector.16"* %1) #12
  ret void
}

declare void @_ZN8v8_crdtp4cbor15EncodeFromUTF16ENS_4spanItEEPNSt3__16vectorIhNS3_9allocatorIhEEEE(i16*, i64, %"class.std::__1::vector.16"*) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare i64 @strtoll(i8* readonly, i8** nocapture, i32) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringItNS_11char_traitsItEENS_9allocatorItEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string"*, i64, i64, i64, i64, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %8 = sub i64 9223372036854775791, %1
  %9 = icmp ult i64 %8, %2
  br i1 %9, label %10, label %12

10:                                               ; preds = %7
  %11 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %11) #9
  unreachable

12:                                               ; preds = %7
  %13 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %14 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %13, i64 0, i32 1, i32 1
  %15 = load i8, i8* %14, align 1
  %16 = icmp slt i8 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i16*, i16** %18, align 8
  br label %22

20:                                               ; preds = %12
  %21 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  br label %22

22:                                               ; preds = %17, %20
  %23 = phi i16* [ %19, %17 ], [ %21, %20 ]
  %24 = bitcast i16* %23 to i8*
  %25 = icmp ult i64 %1, 4611686018427387879
  br i1 %25, label %26, label %37

26:                                               ; preds = %22
  %27 = add i64 %2, %1
  %28 = shl i64 %1, 1
  %29 = icmp ult i64 %27, %28
  %30 = select i1 %29, i64 %28, i64 %27
  %31 = icmp ult i64 %30, 11
  br i1 %31, label %37, label %32

32:                                               ; preds = %26
  %33 = add i64 %30, 8
  %34 = and i64 %33, -8
  %35 = icmp slt i64 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %32
  tail call void @abort() #9
  unreachable

37:                                               ; preds = %22, %26, %32
  %38 = phi i64 [ %34, %32 ], [ 9223372036854775791, %22 ], [ 11, %26 ]
  %39 = shl i64 %38, 1
  %40 = tail call i8* @_Znwm(i64 %39) #10
  %41 = bitcast i8* %40 to i16*
  %42 = icmp eq i64 %4, 0
  br i1 %42, label %188, label %43

43:                                               ; preds = %37
  %44 = icmp ult i64 %4, 16
  br i1 %44, label %135, label %45

45:                                               ; preds = %43
  %46 = shl i64 %4, 1
  %47 = getelementptr i8, i8* %40, i64 %46
  %48 = getelementptr i16, i16* %23, i64 %4
  %49 = bitcast i16* %48 to i8*
  %50 = icmp ult i8* %40, %49
  %51 = icmp ugt i8* %47, %24
  %52 = and i1 %50, %51
  br i1 %52, label %135, label %53

53:                                               ; preds = %45
  %54 = and i64 %4, -16
  %55 = getelementptr i16, i16* %41, i64 %54
  %56 = sub i64 %4, %54
  %57 = getelementptr i16, i16* %23, i64 %54
  %58 = add i64 %54, -16
  %59 = lshr exact i64 %58, 4
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 3
  %62 = icmp ult i64 %58, 48
  br i1 %62, label %114, label %63

63:                                               ; preds = %53
  %64 = sub nsw i64 %60, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 0, %63 ], [ %111, %65 ]
  %67 = phi i64 [ %64, %63 ], [ %112, %65 ]
  %68 = getelementptr i16, i16* %41, i64 %66
  %69 = getelementptr i16, i16* %23, i64 %66
  %70 = bitcast i16* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2, !alias.scope !185
  %72 = getelementptr i16, i16* %69, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2, !alias.scope !185
  %75 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %75, align 2, !alias.scope !188, !noalias !185
  %76 = getelementptr i16, i16* %68, i64 8
  %77 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %77, align 2, !alias.scope !188, !noalias !185
  %78 = or i64 %66, 16
  %79 = getelementptr i16, i16* %41, i64 %78
  %80 = getelementptr i16, i16* %23, i64 %78
  %81 = bitcast i16* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !185
  %83 = getelementptr i16, i16* %80, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2, !alias.scope !185
  %86 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %86, align 2, !alias.scope !188, !noalias !185
  %87 = getelementptr i16, i16* %79, i64 8
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %85, <8 x i16>* %88, align 2, !alias.scope !188, !noalias !185
  %89 = or i64 %66, 32
  %90 = getelementptr i16, i16* %41, i64 %89
  %91 = getelementptr i16, i16* %23, i64 %89
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !185
  %94 = getelementptr i16, i16* %91, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2, !alias.scope !185
  %97 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %97, align 2, !alias.scope !188, !noalias !185
  %98 = getelementptr i16, i16* %90, i64 8
  %99 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %99, align 2, !alias.scope !188, !noalias !185
  %100 = or i64 %66, 48
  %101 = getelementptr i16, i16* %41, i64 %100
  %102 = getelementptr i16, i16* %23, i64 %100
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !185
  %105 = getelementptr i16, i16* %102, i64 8
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 2, !alias.scope !185
  %108 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %108, align 2, !alias.scope !188, !noalias !185
  %109 = getelementptr i16, i16* %101, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %110, align 2, !alias.scope !188, !noalias !185
  %111 = add i64 %66, 64
  %112 = add i64 %67, -4
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %65, !llvm.loop !190

114:                                              ; preds = %65, %53
  %115 = phi i64 [ 0, %53 ], [ %111, %65 ]
  %116 = icmp eq i64 %61, 0
  br i1 %116, label %133, label %117

117:                                              ; preds = %114, %117
  %118 = phi i64 [ %130, %117 ], [ %115, %114 ]
  %119 = phi i64 [ %131, %117 ], [ %61, %114 ]
  %120 = getelementptr i16, i16* %41, i64 %118
  %121 = getelementptr i16, i16* %23, i64 %118
  %122 = bitcast i16* %121 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2, !alias.scope !185
  %124 = getelementptr i16, i16* %121, i64 8
  %125 = bitcast i16* %124 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 2, !alias.scope !185
  %127 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %127, align 2, !alias.scope !188, !noalias !185
  %128 = getelementptr i16, i16* %120, i64 8
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %126, <8 x i16>* %129, align 2, !alias.scope !188, !noalias !185
  %130 = add i64 %118, 16
  %131 = add i64 %119, -1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %117, !llvm.loop !191

133:                                              ; preds = %117, %114
  %134 = icmp eq i64 %54, %4
  br i1 %134, label %188, label %135

135:                                              ; preds = %133, %45, %43
  %136 = phi i16* [ %41, %45 ], [ %41, %43 ], [ %55, %133 ]
  %137 = phi i64 [ %4, %45 ], [ %4, %43 ], [ %56, %133 ]
  %138 = phi i16* [ %23, %45 ], [ %23, %43 ], [ %57, %133 ]
  %139 = add i64 %137, -1
  %140 = and i64 %137, 7
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %153, label %142

142:                                              ; preds = %135, %142
  %143 = phi i16* [ %149, %142 ], [ %136, %135 ]
  %144 = phi i64 [ %148, %142 ], [ %137, %135 ]
  %145 = phi i16* [ %150, %142 ], [ %138, %135 ]
  %146 = phi i64 [ %151, %142 ], [ %140, %135 ]
  %147 = load i16, i16* %145, align 2
  store i16 %147, i16* %143, align 2
  %148 = add i64 %144, -1
  %149 = getelementptr inbounds i16, i16* %143, i64 1
  %150 = getelementptr inbounds i16, i16* %145, i64 1
  %151 = add i64 %146, -1
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %153, label %142, !llvm.loop !192

153:                                              ; preds = %142, %135
  %154 = phi i16* [ %136, %135 ], [ %149, %142 ]
  %155 = phi i64 [ %137, %135 ], [ %148, %142 ]
  %156 = phi i16* [ %138, %135 ], [ %150, %142 ]
  %157 = icmp ult i64 %139, 7
  br i1 %157, label %188, label %158

158:                                              ; preds = %153, %158
  %159 = phi i16* [ %185, %158 ], [ %154, %153 ]
  %160 = phi i64 [ %184, %158 ], [ %155, %153 ]
  %161 = phi i16* [ %186, %158 ], [ %156, %153 ]
  %162 = load i16, i16* %161, align 2
  store i16 %162, i16* %159, align 2
  %163 = getelementptr inbounds i16, i16* %159, i64 1
  %164 = getelementptr inbounds i16, i16* %161, i64 1
  %165 = load i16, i16* %164, align 2
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds i16, i16* %159, i64 2
  %167 = getelementptr inbounds i16, i16* %161, i64 2
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %166, align 2
  %169 = getelementptr inbounds i16, i16* %159, i64 3
  %170 = getelementptr inbounds i16, i16* %161, i64 3
  %171 = load i16, i16* %170, align 2
  store i16 %171, i16* %169, align 2
  %172 = getelementptr inbounds i16, i16* %159, i64 4
  %173 = getelementptr inbounds i16, i16* %161, i64 4
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %172, align 2
  %175 = getelementptr inbounds i16, i16* %159, i64 5
  %176 = getelementptr inbounds i16, i16* %161, i64 5
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %159, i64 6
  %179 = getelementptr inbounds i16, i16* %161, i64 6
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = getelementptr inbounds i16, i16* %159, i64 7
  %182 = getelementptr inbounds i16, i16* %161, i64 7
  %183 = load i16, i16* %182, align 2
  store i16 %183, i16* %181, align 2
  %184 = add i64 %160, -8
  %185 = getelementptr inbounds i16, i16* %159, i64 8
  %186 = getelementptr inbounds i16, i16* %161, i64 8
  %187 = icmp eq i64 %184, 0
  br i1 %187, label %188, label %158, !llvm.loop !193

188:                                              ; preds = %153, %158, %133, %37
  %189 = sub i64 %3, %5
  %190 = sub i64 %189, %4
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %347, label %192

192:                                              ; preds = %188
  %193 = getelementptr inbounds i16, i16* %41, i64 %4
  %194 = getelementptr inbounds i16, i16* %193, i64 %6
  %195 = getelementptr inbounds i16, i16* %23, i64 %4
  %196 = getelementptr inbounds i16, i16* %195, i64 %5
  %197 = icmp ult i64 %190, 16
  br i1 %197, label %294, label %198

198:                                              ; preds = %192
  %199 = bitcast i16* %196 to i8*
  %200 = add i64 %6, %4
  %201 = shl i64 %200, 1
  %202 = getelementptr i8, i8* %40, i64 %201
  %203 = add i64 %6, %3
  %204 = sub i64 %203, %5
  %205 = shl i64 %204, 1
  %206 = getelementptr i8, i8* %40, i64 %205
  %207 = getelementptr i16, i16* %23, i64 %3
  %208 = bitcast i16* %207 to i8*
  %209 = icmp ult i8* %202, %208
  %210 = icmp ugt i8* %206, %199
  %211 = and i1 %209, %210
  br i1 %211, label %294, label %212

212:                                              ; preds = %198
  %213 = and i64 %190, -16
  %214 = getelementptr i16, i16* %194, i64 %213
  %215 = sub i64 %190, %213
  %216 = getelementptr i16, i16* %196, i64 %213
  %217 = add i64 %213, -16
  %218 = lshr exact i64 %217, 4
  %219 = add nuw nsw i64 %218, 1
  %220 = and i64 %219, 3
  %221 = icmp ult i64 %217, 48
  br i1 %221, label %273, label %222

222:                                              ; preds = %212
  %223 = sub nsw i64 %219, %220
  br label %224

224:                                              ; preds = %224, %222
  %225 = phi i64 [ 0, %222 ], [ %270, %224 ]
  %226 = phi i64 [ %223, %222 ], [ %271, %224 ]
  %227 = getelementptr i16, i16* %194, i64 %225
  %228 = getelementptr i16, i16* %196, i64 %225
  %229 = bitcast i16* %228 to <8 x i16>*
  %230 = load <8 x i16>, <8 x i16>* %229, align 2, !alias.scope !194
  %231 = getelementptr i16, i16* %228, i64 8
  %232 = bitcast i16* %231 to <8 x i16>*
  %233 = load <8 x i16>, <8 x i16>* %232, align 2, !alias.scope !194
  %234 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %230, <8 x i16>* %234, align 2, !alias.scope !197, !noalias !194
  %235 = getelementptr i16, i16* %227, i64 8
  %236 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %236, align 2, !alias.scope !197, !noalias !194
  %237 = or i64 %225, 16
  %238 = getelementptr i16, i16* %194, i64 %237
  %239 = getelementptr i16, i16* %196, i64 %237
  %240 = bitcast i16* %239 to <8 x i16>*
  %241 = load <8 x i16>, <8 x i16>* %240, align 2, !alias.scope !194
  %242 = getelementptr i16, i16* %239, i64 8
  %243 = bitcast i16* %242 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 2, !alias.scope !194
  %245 = bitcast i16* %238 to <8 x i16>*
  store <8 x i16> %241, <8 x i16>* %245, align 2, !alias.scope !197, !noalias !194
  %246 = getelementptr i16, i16* %238, i64 8
  %247 = bitcast i16* %246 to <8 x i16>*
  store <8 x i16> %244, <8 x i16>* %247, align 2, !alias.scope !197, !noalias !194
  %248 = or i64 %225, 32
  %249 = getelementptr i16, i16* %194, i64 %248
  %250 = getelementptr i16, i16* %196, i64 %248
  %251 = bitcast i16* %250 to <8 x i16>*
  %252 = load <8 x i16>, <8 x i16>* %251, align 2, !alias.scope !194
  %253 = getelementptr i16, i16* %250, i64 8
  %254 = bitcast i16* %253 to <8 x i16>*
  %255 = load <8 x i16>, <8 x i16>* %254, align 2, !alias.scope !194
  %256 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %256, align 2, !alias.scope !197, !noalias !194
  %257 = getelementptr i16, i16* %249, i64 8
  %258 = bitcast i16* %257 to <8 x i16>*
  store <8 x i16> %255, <8 x i16>* %258, align 2, !alias.scope !197, !noalias !194
  %259 = or i64 %225, 48
  %260 = getelementptr i16, i16* %194, i64 %259
  %261 = getelementptr i16, i16* %196, i64 %259
  %262 = bitcast i16* %261 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 2, !alias.scope !194
  %264 = getelementptr i16, i16* %261, i64 8
  %265 = bitcast i16* %264 to <8 x i16>*
  %266 = load <8 x i16>, <8 x i16>* %265, align 2, !alias.scope !194
  %267 = bitcast i16* %260 to <8 x i16>*
  store <8 x i16> %263, <8 x i16>* %267, align 2, !alias.scope !197, !noalias !194
  %268 = getelementptr i16, i16* %260, i64 8
  %269 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %266, <8 x i16>* %269, align 2, !alias.scope !197, !noalias !194
  %270 = add i64 %225, 64
  %271 = add i64 %226, -4
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %273, label %224, !llvm.loop !199

273:                                              ; preds = %224, %212
  %274 = phi i64 [ 0, %212 ], [ %270, %224 ]
  %275 = icmp eq i64 %220, 0
  br i1 %275, label %292, label %276

276:                                              ; preds = %273, %276
  %277 = phi i64 [ %289, %276 ], [ %274, %273 ]
  %278 = phi i64 [ %290, %276 ], [ %220, %273 ]
  %279 = getelementptr i16, i16* %194, i64 %277
  %280 = getelementptr i16, i16* %196, i64 %277
  %281 = bitcast i16* %280 to <8 x i16>*
  %282 = load <8 x i16>, <8 x i16>* %281, align 2, !alias.scope !194
  %283 = getelementptr i16, i16* %280, i64 8
  %284 = bitcast i16* %283 to <8 x i16>*
  %285 = load <8 x i16>, <8 x i16>* %284, align 2, !alias.scope !194
  %286 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %286, align 2, !alias.scope !197, !noalias !194
  %287 = getelementptr i16, i16* %279, i64 8
  %288 = bitcast i16* %287 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %288, align 2, !alias.scope !197, !noalias !194
  %289 = add i64 %277, 16
  %290 = add i64 %278, -1
  %291 = icmp eq i64 %290, 0
  br i1 %291, label %292, label %276, !llvm.loop !200

292:                                              ; preds = %276, %273
  %293 = icmp eq i64 %190, %213
  br i1 %293, label %347, label %294

294:                                              ; preds = %292, %198, %192
  %295 = phi i16* [ %194, %198 ], [ %194, %192 ], [ %214, %292 ]
  %296 = phi i64 [ %190, %198 ], [ %190, %192 ], [ %215, %292 ]
  %297 = phi i16* [ %196, %198 ], [ %196, %192 ], [ %216, %292 ]
  %298 = add i64 %296, -1
  %299 = and i64 %296, 7
  %300 = icmp eq i64 %299, 0
  br i1 %300, label %312, label %301

301:                                              ; preds = %294, %301
  %302 = phi i16* [ %308, %301 ], [ %295, %294 ]
  %303 = phi i64 [ %307, %301 ], [ %296, %294 ]
  %304 = phi i16* [ %309, %301 ], [ %297, %294 ]
  %305 = phi i64 [ %310, %301 ], [ %299, %294 ]
  %306 = load i16, i16* %304, align 2
  store i16 %306, i16* %302, align 2
  %307 = add i64 %303, -1
  %308 = getelementptr inbounds i16, i16* %302, i64 1
  %309 = getelementptr inbounds i16, i16* %304, i64 1
  %310 = add i64 %305, -1
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %312, label %301, !llvm.loop !201

312:                                              ; preds = %301, %294
  %313 = phi i16* [ %295, %294 ], [ %308, %301 ]
  %314 = phi i64 [ %296, %294 ], [ %307, %301 ]
  %315 = phi i16* [ %297, %294 ], [ %309, %301 ]
  %316 = icmp ult i64 %298, 7
  br i1 %316, label %347, label %317

317:                                              ; preds = %312, %317
  %318 = phi i16* [ %344, %317 ], [ %313, %312 ]
  %319 = phi i64 [ %343, %317 ], [ %314, %312 ]
  %320 = phi i16* [ %345, %317 ], [ %315, %312 ]
  %321 = load i16, i16* %320, align 2
  store i16 %321, i16* %318, align 2
  %322 = getelementptr inbounds i16, i16* %318, i64 1
  %323 = getelementptr inbounds i16, i16* %320, i64 1
  %324 = load i16, i16* %323, align 2
  store i16 %324, i16* %322, align 2
  %325 = getelementptr inbounds i16, i16* %318, i64 2
  %326 = getelementptr inbounds i16, i16* %320, i64 2
  %327 = load i16, i16* %326, align 2
  store i16 %327, i16* %325, align 2
  %328 = getelementptr inbounds i16, i16* %318, i64 3
  %329 = getelementptr inbounds i16, i16* %320, i64 3
  %330 = load i16, i16* %329, align 2
  store i16 %330, i16* %328, align 2
  %331 = getelementptr inbounds i16, i16* %318, i64 4
  %332 = getelementptr inbounds i16, i16* %320, i64 4
  %333 = load i16, i16* %332, align 2
  store i16 %333, i16* %331, align 2
  %334 = getelementptr inbounds i16, i16* %318, i64 5
  %335 = getelementptr inbounds i16, i16* %320, i64 5
  %336 = load i16, i16* %335, align 2
  store i16 %336, i16* %334, align 2
  %337 = getelementptr inbounds i16, i16* %318, i64 6
  %338 = getelementptr inbounds i16, i16* %320, i64 6
  %339 = load i16, i16* %338, align 2
  store i16 %339, i16* %337, align 2
  %340 = getelementptr inbounds i16, i16* %318, i64 7
  %341 = getelementptr inbounds i16, i16* %320, i64 7
  %342 = load i16, i16* %341, align 2
  store i16 %342, i16* %340, align 2
  %343 = add i64 %319, -8
  %344 = getelementptr inbounds i16, i16* %318, i64 8
  %345 = getelementptr inbounds i16, i16* %320, i64 8
  %346 = icmp eq i64 %343, 0
  br i1 %346, label %347, label %317, !llvm.loop !202

347:                                              ; preds = %312, %317, %292, %188
  %348 = icmp eq i64 %1, 10
  br i1 %348, label %350, label %349

349:                                              ; preds = %347
  tail call void @_ZdlPv(i8* %24) #10
  br label %350

350:                                              ; preds = %347, %349
  %351 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %40, i8** %351, align 8
  %352 = or i64 %38, -9223372036854775808
  %353 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %352, i64* %353, align 8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { nounwind readonly }
attributes #12 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !8}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !10}
!21 = distinct !{!21, !8}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !8}
!28 = distinct !{!28, !10}
!29 = distinct !{!29, !10}
!30 = distinct !{!30, !8}
!31 = !{!32}
!32 = distinct !{!32, !33}
!33 = distinct !{!33, !"LVerDomain"}
!34 = !{!35}
!35 = distinct !{!35, !33}
!36 = distinct !{!36, !8}
!37 = distinct !{!37, !10}
!38 = distinct !{!38, !10}
!39 = distinct !{!39, !8}
!40 = !{i8 0, i8 2}
!41 = !{!42}
!42 = distinct !{!42, !43}
!43 = distinct !{!43, !"LVerDomain"}
!44 = !{!45}
!45 = distinct !{!45, !43}
!46 = distinct !{!46, !8}
!47 = distinct !{!47, !10}
!48 = distinct !{!48, !10}
!49 = distinct !{!49, !8}
!50 = !{!51}
!51 = distinct !{!51, !52}
!52 = distinct !{!52, !"LVerDomain"}
!53 = !{!54}
!54 = distinct !{!54, !52}
!55 = distinct !{!55, !8}
!56 = distinct !{!56, !10}
!57 = distinct !{!57, !10}
!58 = distinct !{!58, !8}
!59 = !{!60}
!60 = distinct !{!60, !61}
!61 = distinct !{!61, !"LVerDomain"}
!62 = !{!63}
!63 = distinct !{!63, !61}
!64 = distinct !{!64, !8}
!65 = distinct !{!65, !10}
!66 = distinct !{!66, !8}
!67 = !{!68}
!68 = distinct !{!68, !69}
!69 = distinct !{!69, !"LVerDomain"}
!70 = !{!71}
!71 = distinct !{!71, !69}
!72 = distinct !{!72, !8}
!73 = distinct !{!73, !10}
!74 = distinct !{!74, !10}
!75 = distinct !{!75, !8}
!76 = !{!77}
!77 = distinct !{!77, !78}
!78 = distinct !{!78, !"LVerDomain"}
!79 = !{!80}
!80 = distinct !{!80, !78}
!81 = distinct !{!81, !8}
!82 = distinct !{!82, !10}
!83 = distinct !{!83, !10}
!84 = distinct !{!84, !8}
!85 = !{!86}
!86 = distinct !{!86, !87}
!87 = distinct !{!87, !"LVerDomain"}
!88 = !{!89}
!89 = distinct !{!89, !87}
!90 = distinct !{!90, !8}
!91 = distinct !{!91, !8}
!92 = !{!93}
!93 = distinct !{!93, !94}
!94 = distinct !{!94, !"LVerDomain"}
!95 = !{!96}
!96 = distinct !{!96, !94}
!97 = distinct !{!97, !8}
!98 = distinct !{!98, !10}
!99 = distinct !{!99, !8}
!100 = !{!101}
!101 = distinct !{!101, !102}
!102 = distinct !{!102, !"LVerDomain"}
!103 = !{!104}
!104 = distinct !{!104, !102}
!105 = distinct !{!105, !8}
!106 = distinct !{!106, !8}
!107 = !{!108}
!108 = distinct !{!108, !109}
!109 = distinct !{!109, !"LVerDomain"}
!110 = !{!111}
!111 = distinct !{!111, !109}
!112 = distinct !{!112, !8}
!113 = distinct !{!113, !10}
!114 = distinct !{!114, !8}
!115 = !{!116}
!116 = distinct !{!116, !117}
!117 = distinct !{!117, !"LVerDomain"}
!118 = !{!119}
!119 = distinct !{!119, !117}
!120 = distinct !{!120, !8}
!121 = distinct !{!121, !10}
!122 = distinct !{!122, !10}
!123 = distinct !{!123, !8}
!124 = !{!125}
!125 = distinct !{!125, !126}
!126 = distinct !{!126, !"LVerDomain"}
!127 = !{!128}
!128 = distinct !{!128, !126}
!129 = distinct !{!129, !8}
!130 = distinct !{!130, !8}
!131 = !{!132}
!132 = distinct !{!132, !133}
!133 = distinct !{!133, !"LVerDomain"}
!134 = !{!135}
!135 = distinct !{!135, !133}
!136 = distinct !{!136, !8}
!137 = distinct !{!137, !10}
!138 = distinct !{!138, !8}
!139 = !{!140}
!140 = distinct !{!140, !141}
!141 = distinct !{!141, !"LVerDomain"}
!142 = !{!143}
!143 = distinct !{!143, !141}
!144 = distinct !{!144, !8}
!145 = distinct !{!145, !8}
!146 = !{!147}
!147 = distinct !{!147, !148}
!148 = distinct !{!148, !"LVerDomain"}
!149 = !{!150}
!150 = distinct !{!150, !148}
!151 = distinct !{!151, !8}
!152 = distinct !{!152, !10}
!153 = distinct !{!153, !8}
!154 = !{!155}
!155 = distinct !{!155, !156}
!156 = distinct !{!156, !"LVerDomain"}
!157 = !{!158}
!158 = distinct !{!158, !156}
!159 = distinct !{!159, !8}
!160 = distinct !{!160, !10}
!161 = distinct !{!161, !10}
!162 = distinct !{!162, !8}
!163 = !{!164}
!164 = distinct !{!164, !165}
!165 = distinct !{!165, !"LVerDomain"}
!166 = !{!167}
!167 = distinct !{!167, !165}
!168 = distinct !{!168, !8}
!169 = distinct !{!169, !10}
!170 = distinct !{!170, !10}
!171 = distinct !{!171, !8}
!172 = !{!173}
!173 = distinct !{!173, !174}
!174 = distinct !{!174, !"LVerDomain"}
!175 = !{!176}
!176 = distinct !{!176, !174}
!177 = distinct !{!177, !8}
!178 = distinct !{!178, !10}
!179 = distinct !{!179, !10}
!180 = distinct !{!180, !8}
!181 = distinct !{!181, !8}
!182 = distinct !{!182, !10}
!183 = distinct !{!183, !184, !8}
!184 = !{!"llvm.loop.unroll.runtime.disable"}
!185 = !{!186}
!186 = distinct !{!186, !187}
!187 = distinct !{!187, !"LVerDomain"}
!188 = !{!189}
!189 = distinct !{!189, !187}
!190 = distinct !{!190, !8}
!191 = distinct !{!191, !10}
!192 = distinct !{!192, !10}
!193 = distinct !{!193, !8}
!194 = !{!195}
!195 = distinct !{!195, !196}
!196 = distinct !{!196, !"LVerDomain"}
!197 = !{!198}
!198 = distinct !{!198, !196}
!199 = distinct !{!199, !8}
!200 = distinct !{!200, !10}
!201 = distinct !{!201, !10}
!202 = distinct !{!202, !8}
