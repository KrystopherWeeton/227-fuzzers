; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/noise_model.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/noise_model.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.aom_noise_strength_lut_t = type { [2 x double]*, i32 }
%struct.aom_noise_strength_solver_t = type { %struct.aom_equation_system_t, double, double, i32, i32, double }
%struct.aom_equation_system_t = type { double*, double*, double*, i32 }
%struct.aom_flat_block_finder_t = type { double*, double*, i32, i32, double, i32 }
%struct.index_and_score_t = type { i32, float }
%struct.aom_noise_model_t = type { %struct.aom_noise_model_params_t, [3 x %struct.aom_noise_state_t], [3 x %struct.aom_noise_state_t], [2 x i32]*, i32, i32 }
%struct.aom_noise_model_params_t = type { i8, i32, i32, i32 }
%struct.aom_noise_state_t = type { %struct.aom_equation_system_t, %struct.aom_noise_strength_solver_t, i32, double }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.aom_noise_tx_t = type opaque
%struct.aom_denoise_and_model_t = type { i32, i32, float, i32, i32, i32, i32, i32, i32, [3 x float*], [3 x i8*], i8*, %struct.aom_flat_block_finder_t, %struct.aom_noise_model_t }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }

@stderr = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [30 x i8] c"Unable to allocate copy of A\0A\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"Failed to init lut\0A\00", align 1
@.str.2 = private unnamed_addr constant [50 x i8] c"Failed to init equation system for block_size=%d\0A\00", align 1
@.str.3 = private unnamed_addr constant [48 x i8] c"Failed to alloc A or AtA_inv for block_size=%d\0A\00", align 1
@.str.4 = private unnamed_addr constant [48 x i8] c"Failed to allocate memory for block of size %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [44 x i8] c"Invalid noise param: lag = %d must be >= 1\0A\00", align 1
@.str.6 = private unnamed_addr constant [45 x i8] c"Invalid noise param: lag = %d must be <= %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [47 x i8] c"Failed to allocate noise state for channel %d\0A\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"Invalid shape\0A\00", align 1
@.str.9 = private unnamed_addr constant [29 x i8] c"block_size = %d must be > 1\0A\00", align 1
@.str.10 = private unnamed_addr constant [31 x i8] c"block_size = %d must be >= %d\0A\00", align 1
@.str.11 = private unnamed_addr constant [49 x i8] c"Not enough flat blocks to update noise estimate\0A\00", align 1
@.str.12 = private unnamed_addr constant [33 x i8] c"Adding block observation failed\0A\00", align 1
@.str.13 = private unnamed_addr constant [49 x i8] c"Solving latest noise equation system failed %d!\0A\00", align 1
@.str.14 = private unnamed_addr constant [39 x i8] c"Solving latest noise strength failed!\0A\00", align 1
@.str.15 = private unnamed_addr constant [51 x i8] c"Solving combined noise equation system failed %d!\0A\00", align 1
@.str.16 = private unnamed_addr constant [41 x i8] c"Solving combined noise strength failed!\0A\00", align 1
@.str.17 = private unnamed_addr constant [21 x i8] c"params.lag = %d > 3\0A\00", align 1
@__const.aom_wiener_denoise_2d.block_finder_chroma = private unnamed_addr constant { double*, double*, i32, i32, double, i32, [4 x i8] } { double* inttoptr (i64 -6148914691236517206 to double*), double* inttoptr (i64 -6148914691236517206 to double*), i32 -1431655766, i32 -1431655766, double 0xFFFFFFFFFFFFFFFF, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }, align 8
@.str.18 = private unnamed_addr constant [67 x i8] c"aom_wiener_denoise_2d doesn't handle different chroma subsampling\0A\00", align 1
@.str.19 = private unnamed_addr constant [45 x i8] c"Unable to allocate denoise_and_model struct\0A\00", align 1
@.str.20 = private unnamed_addr constant [38 x i8] c"Unable to allocate noise PSD buffers\0A\00", align 1
@.str.21 = private unnamed_addr constant [27 x i8] c"Unable to realloc buffers\0A\00", align 1
@.str.22 = private unnamed_addr constant [25 x i8] c"Unable to denoise image\0A\00", align 1
@.str.23 = private unnamed_addr constant [33 x i8] c"Unable to get grain parameters.\0A\00", align 1
@.str.24 = private unnamed_addr constant [46 x i8] c"Unable to allocate temp values of size %dx%d\0A\00", align 1
@.str.25 = private unnamed_addr constant [51 x i8] c"Failed to allocate system of equations of size %d\0A\00", align 1
@.str.26 = private unnamed_addr constant [48 x i8] c"Failed initialization noise state with size %d\0A\00", align 1
@.str.27 = private unnamed_addr constant [38 x i8] c"Unable to allocate buffer of size %d\0A\00", align 1
@.str.28 = private unnamed_addr constant [36 x i8] c"Unable to allocate denoise buffers\0A\00", align 1
@.str.29 = private unnamed_addr constant [34 x i8] c"Unable to init flat block finder\0A\00", align 1
@.str.30 = private unnamed_addr constant [28 x i8] c"Unable to init noise model\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_noise_strength_lut_init(%struct.aom_noise_strength_lut_t*, i32) local_unnamed_addr #0 {
  %3 = icmp eq %struct.aom_noise_strength_lut_t* %0, null
  %4 = icmp slt i32 %1, 1
  %5 = or i1 %3, %4
  br i1 %5, label %14, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.aom_noise_strength_lut_t, %struct.aom_noise_strength_lut_t* %0, i64 0, i32 1
  store i32 0, i32* %7, align 8
  %8 = sext i32 %1 to i64
  %9 = shl nsw i64 %8, 4
  %10 = tail call i8* @aom_malloc(i64 %9) #9
  %11 = bitcast %struct.aom_noise_strength_lut_t* %0 to i8**
  store i8* %10, i8** %11, align 8
  %12 = icmp eq i8* %10, null
  br i1 %12, label %14, label %13

13:                                               ; preds = %6
  store i32 %1, i32* %7, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 %9, i1 false)
  br label %14

14:                                               ; preds = %6, %2, %13
  %15 = phi i32 [ 1, %13 ], [ 0, %2 ], [ 0, %6 ]
  ret i32 %15
}

declare i8* @aom_malloc(i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_noise_strength_lut_free(%struct.aom_noise_strength_lut_t*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.aom_noise_strength_lut_t* %0, null
  br i1 %2, label %7, label %3

3:                                                ; preds = %1
  %4 = bitcast %struct.aom_noise_strength_lut_t* %0 to i8**
  %5 = load i8*, i8** %4, align 8
  tail call void @aom_free(i8* %5) #9
  %6 = bitcast %struct.aom_noise_strength_lut_t* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 16, i1 false)
  br label %7

7:                                                ; preds = %1, %3
  ret void
}

declare void @aom_free(i8*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @aom_noise_strength_lut_eval(%struct.aom_noise_strength_lut_t* nocapture readonly, double) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.aom_noise_strength_lut_t, %struct.aom_noise_strength_lut_t* %0, i64 0, i32 0
  %4 = load [2 x double]*, [2 x double]** %3, align 8
  %5 = getelementptr inbounds [2 x double], [2 x double]* %4, i64 0, i64 0
  %6 = load double, double* %5, align 8
  %7 = fcmp ogt double %6, %1
  br i1 %7, label %14, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.aom_noise_strength_lut_t, %struct.aom_noise_strength_lut_t* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = add nsw i32 %10, -1
  %12 = icmp sgt i32 %11, 0
  %13 = sext i32 %11 to i64
  br i1 %12, label %17, label %45

14:                                               ; preds = %2
  %15 = getelementptr inbounds [2 x double], [2 x double]* %4, i64 0, i64 1
  %16 = load double, double* %15, align 8
  br label %48

17:                                               ; preds = %8, %42
  %18 = phi double [ %44, %42 ], [ %6, %8 ]
  %19 = phi i64 [ %21, %42 ], [ 0, %8 ]
  %20 = fcmp ugt double %18, %1
  %21 = add nuw nsw i64 %19, 1
  br i1 %20, label %40, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds [2 x double], [2 x double]* %4, i64 %21, i64 0
  %24 = load double, double* %23, align 8
  %25 = fcmp ult double %24, %1
  br i1 %25, label %40, label %26

26:                                               ; preds = %22
  %27 = and i64 %19, 4294967295
  %28 = and i64 %21, 4294967295
  %29 = fsub double %1, %18
  %30 = fsub double %24, %18
  %31 = fdiv double %29, %30
  %32 = getelementptr inbounds [2 x double], [2 x double]* %4, i64 %28, i64 1
  %33 = load double, double* %32, align 8
  %34 = fmul double %31, %33
  %35 = getelementptr inbounds [2 x double], [2 x double]* %4, i64 %27, i64 1
  %36 = load double, double* %35, align 8
  %37 = fsub double 1.000000e+00, %31
  %38 = fmul double %37, %36
  %39 = fadd double %34, %38
  br label %48

40:                                               ; preds = %17, %22
  %41 = icmp slt i64 %21, %13
  br i1 %41, label %42, label %45

42:                                               ; preds = %40
  %43 = getelementptr inbounds [2 x double], [2 x double]* %4, i64 %21, i64 0
  %44 = load double, double* %43, align 8
  br label %17

45:                                               ; preds = %40, %8
  %46 = getelementptr inbounds [2 x double], [2 x double]* %4, i64 %13, i64 1
  %47 = load double, double* %46, align 8
  br label %48

48:                                               ; preds = %45, %26, %14
  %49 = phi double [ %16, %14 ], [ %39, %26 ], [ %47, %45 ]
  ret double %49
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_noise_strength_solver_add_measurement(%struct.aom_noise_strength_solver_t* nocapture, double, double) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 1
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 2
  %7 = load double, double* %6, align 8
  %8 = fcmp ogt double %5, %1
  %9 = fcmp olt double %7, %1
  %10 = select i1 %9, double %7, double %1
  %11 = select i1 %8, double %5, double %10
  %12 = fsub double %7, %5
  %13 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 3
  %14 = load i32, i32* %13, align 8
  %15 = add nsw i32 %14, -1
  %16 = sitofp i32 %15 to double
  %17 = fsub double %11, %5
  %18 = fmul double %17, %16
  %19 = fdiv double %18, %12
  %20 = tail call double @llvm.floor.f64(double %19)
  %21 = fptosi double %20 to i32
  %22 = add nsw i32 %21, 1
  %23 = icmp sgt i32 %14, %22
  %24 = select i1 %23, i32 %22, i32 %15
  %25 = sitofp i32 %21 to double
  %26 = fsub double %19, %25
  %27 = fsub double 1.000000e+00, %26
  %28 = fmul double %27, %27
  %29 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 0, i32 0
  %30 = load double*, double** %29, align 8
  %31 = mul nsw i32 %14, %21
  %32 = add nsw i32 %31, %21
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds double, double* %30, i64 %33
  %35 = load double, double* %34, align 8
  %36 = fadd double %35, %28
  store double %36, double* %34, align 8
  %37 = fmul double %26, %27
  %38 = load double*, double** %29, align 8
  %39 = mul nsw i32 %24, %14
  %40 = add nsw i32 %39, %21
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds double, double* %38, i64 %41
  %43 = load double, double* %42, align 8
  %44 = fadd double %43, %37
  store double %44, double* %42, align 8
  %45 = fmul double %26, %26
  %46 = load double*, double** %29, align 8
  %47 = add nsw i32 %39, %24
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds double, double* %46, i64 %48
  %50 = load double, double* %49, align 8
  %51 = fadd double %50, %45
  store double %51, double* %49, align 8
  %52 = load double*, double** %29, align 8
  %53 = add nsw i32 %24, %31
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds double, double* %52, i64 %54
  %56 = load double, double* %55, align 8
  %57 = fadd double %56, %37
  store double %57, double* %55, align 8
  %58 = fmul double %27, %2
  %59 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 0, i32 1
  %60 = load double*, double** %59, align 8
  %61 = sext i32 %21 to i64
  %62 = getelementptr inbounds double, double* %60, i64 %61
  %63 = load double, double* %62, align 8
  %64 = fadd double %58, %63
  store double %64, double* %62, align 8
  %65 = fmul double %26, %2
  %66 = load double*, double** %59, align 8
  %67 = sext i32 %24 to i64
  %68 = getelementptr inbounds double, double* %66, i64 %67
  %69 = load double, double* %68, align 8
  %70 = fadd double %65, %69
  store double %70, double* %68, align 8
  %71 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 5
  %72 = load double, double* %71, align 8
  %73 = fadd double %72, %2
  store double %73, double* %71, align 8
  %74 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 4
  %75 = load i32, i32* %74, align 4
  %76 = add nsw i32 %75, 1
  store i32 %76, i32* %74, align 4
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_noise_strength_solver_solve(%struct.aom_noise_strength_solver_t* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 4
  %5 = load i32, i32* %4, align 4
  %6 = sitofp i32 %5 to double
  %7 = fmul double %6, 2.000000e+00
  %8 = sitofp i32 %3 to double
  %9 = fdiv double %7, %8
  %10 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 0
  %11 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 0, i32 0
  %12 = load double*, double** %11, align 8
  %13 = sext i32 %3 to i64
  %14 = shl nsw i64 %13, 3
  %15 = mul i64 %14, %13
  %16 = tail call i8* @aom_malloc(i64 %15) #9
  %17 = bitcast i8* %16 to double*
  %18 = icmp eq i8* %16, null
  br i1 %18, label %19, label %22

19:                                               ; preds = %1
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %21 = tail call i64 @fwrite(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i64 29, i64 1, %struct._IO_FILE* %20) #10
  br label %112

22:                                               ; preds = %1
  %23 = bitcast double* %12 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %16, i8* align 8 %23, i64 %15, i1 false)
  %24 = icmp sgt i32 %3, 0
  br i1 %24, label %25, label %84

25:                                               ; preds = %22
  %26 = add nsw i32 %3, -1
  %27 = fmul double %9, 2.000000e+00
  %28 = sext i32 %26 to i64
  %29 = zext i32 %3 to i64
  br label %44

30:                                               ; preds = %44
  br i1 %24, label %31, label %84

31:                                               ; preds = %30
  %32 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 5
  %33 = load double, double* %32, align 8
  %34 = load i32, i32* %4, align 4
  %35 = sitofp i32 %34 to double
  %36 = fdiv double %33, %35
  %37 = fmul double %36, 0x3F20000000000000
  %38 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 0, i32 1
  %39 = zext i32 %3 to i64
  %40 = and i64 %39, 1
  %41 = icmp eq i32 %3, 1
  br i1 %41, label %71, label %42

42:                                               ; preds = %31
  %43 = sub nsw i64 %39, %40
  br label %87

44:                                               ; preds = %44, %25
  %45 = phi i64 [ 0, %25 ], [ %48, %44 ]
  %46 = icmp ugt i64 %45, 1
  %47 = select i1 %46, i64 %45, i64 1
  %48 = add nuw nsw i64 %45, 1
  %49 = icmp slt i64 %45, %28
  %50 = trunc i64 %48 to i32
  %51 = select i1 %49, i32 %50, i32 %26
  %52 = mul nsw i64 %45, %13
  %53 = trunc i64 %52 to i32
  %54 = add i64 %52, 4294967295
  %55 = add i64 %54, %47
  %56 = shl i64 %55, 32
  %57 = ashr exact i64 %56, 32
  %58 = getelementptr inbounds double, double* %17, i64 %57
  %59 = load double, double* %58, align 8
  %60 = fsub double %59, %9
  store double %60, double* %58, align 8
  %61 = add nsw i64 %52, %45
  %62 = getelementptr inbounds double, double* %17, i64 %61
  %63 = load double, double* %62, align 8
  %64 = fadd double %27, %63
  store double %64, double* %62, align 8
  %65 = add nsw i32 %51, %53
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds double, double* %17, i64 %66
  %68 = load double, double* %67, align 8
  %69 = fsub double %68, %9
  store double %69, double* %67, align 8
  %70 = icmp eq i64 %48, %29
  br i1 %70, label %30, label %44

71:                                               ; preds = %87, %31
  %72 = phi i64 [ 0, %31 ], [ %109, %87 ]
  %73 = icmp eq i64 %40, 0
  br i1 %73, label %84, label %74

74:                                               ; preds = %71
  %75 = mul nsw i64 %72, %13
  %76 = add nsw i64 %75, %72
  %77 = getelementptr inbounds double, double* %17, i64 %76
  %78 = load double, double* %77, align 8
  %79 = fadd double %78, 0x3F20000000000000
  store double %79, double* %77, align 8
  %80 = load double*, double** %38, align 8
  %81 = getelementptr inbounds double, double* %80, i64 %72
  %82 = load double, double* %81, align 8
  %83 = fadd double %37, %82
  store double %83, double* %81, align 8
  br label %84

84:                                               ; preds = %74, %71, %22, %30
  %85 = bitcast %struct.aom_noise_strength_solver_t* %0 to i8**
  store i8* %16, i8** %85, align 8
  %86 = tail call fastcc i32 @equation_system_solve(%struct.aom_equation_system_t* %10)
  store double* %12, double** %11, align 8
  tail call void @aom_free(i8* nonnull %16) #9
  br label %112

87:                                               ; preds = %87, %42
  %88 = phi i64 [ 0, %42 ], [ %109, %87 ]
  %89 = phi i64 [ %43, %42 ], [ %110, %87 ]
  %90 = mul nsw i64 %88, %13
  %91 = add nsw i64 %90, %88
  %92 = getelementptr inbounds double, double* %17, i64 %91
  %93 = load double, double* %92, align 8
  %94 = fadd double %93, 0x3F20000000000000
  store double %94, double* %92, align 8
  %95 = load double*, double** %38, align 8
  %96 = getelementptr inbounds double, double* %95, i64 %88
  %97 = load double, double* %96, align 8
  %98 = fadd double %37, %97
  store double %98, double* %96, align 8
  %99 = or i64 %88, 1
  %100 = mul nsw i64 %99, %13
  %101 = add nsw i64 %100, %99
  %102 = getelementptr inbounds double, double* %17, i64 %101
  %103 = load double, double* %102, align 8
  %104 = fadd double %103, 0x3F20000000000000
  store double %104, double* %102, align 8
  %105 = load double*, double** %38, align 8
  %106 = getelementptr inbounds double, double* %105, i64 %99
  %107 = load double, double* %106, align 8
  %108 = fadd double %37, %107
  store double %108, double* %106, align 8
  %109 = add nuw nsw i64 %88, 2
  %110 = add i64 %89, -2
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %71, label %87

112:                                              ; preds = %84, %19
  %113 = phi i32 [ %86, %84 ], [ 0, %19 ]
  ret i32 %113
}

; Function Attrs: nofree nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @equation_system_solve(%struct.aom_equation_system_t* nocapture readonly) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.aom_equation_system_t, %struct.aom_equation_system_t* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 3
  %6 = tail call i8* @aom_malloc(i64 %5) #9
  %7 = mul i64 %5, %4
  %8 = tail call i8* @aom_malloc(i64 %7) #9
  %9 = icmp eq i8* %8, null
  %10 = icmp eq i8* %6, null
  %11 = or i1 %10, %9
  br i1 %11, label %12, label %15

12:                                               ; preds = %1
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %14 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.24, i64 0, i64 0), i32 %3, i32 %3) #10
  tail call void @aom_free(i8* %6) #9
  tail call void @aom_free(i8* %8) #9
  ret i32 0

15:                                               ; preds = %1
  %16 = bitcast i8* %6 to double*
  %17 = bitcast i8* %8 to double*
  %18 = bitcast %struct.aom_equation_system_t* %0 to i8**
  %19 = load i8*, i8** %18, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %8, i8* align 8 %19, i64 %7, i1 false)
  %20 = getelementptr inbounds %struct.aom_equation_system_t, %struct.aom_equation_system_t* %0, i64 0, i32 1
  %21 = bitcast double** %20 to i8**
  %22 = load i8*, i8** %21, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %6, i8* align 8 %22, i64 %5, i1 false)
  %23 = load i32, i32* %2, align 8
  %24 = getelementptr inbounds %struct.aom_equation_system_t, %struct.aom_equation_system_t* %0, i64 0, i32 2
  %25 = load double*, double** %24, align 8
  %26 = add i32 %3, -1
  %27 = icmp sgt i32 %26, 0
  br i1 %27, label %28, label %81

28:                                               ; preds = %15
  %29 = icmp sgt i32 %3, 0
  %30 = sext i32 %26 to i64
  %31 = sext i32 %23 to i64
  %32 = zext i32 %26 to i64
  %33 = zext i32 %3 to i64
  %34 = shl nuw nsw i64 %33, 3
  %35 = getelementptr i8, i8* %8, i64 %34
  %36 = shl nsw i64 %31, 3
  %37 = mul nsw i64 %31, %30
  %38 = shl i64 %37, 3
  %39 = mul nsw i64 %31, -8
  %40 = shl nuw nsw i64 %33, 3
  %41 = add i64 %38, %40
  %42 = add nsw i64 %30, -1
  %43 = mul i64 %42, %31
  %44 = shl i64 %43, 3
  %45 = add i64 %44, %40
  %46 = and i64 %33, 4294967292
  %47 = add nsw i64 %46, -4
  %48 = lshr exact i64 %47, 2
  %49 = add nuw nsw i64 %48, 1
  %50 = icmp ult i32 %3, 4
  %51 = and i64 %33, 4294967292
  %52 = and i64 %49, 1
  %53 = icmp eq i64 %47, 0
  %54 = sub nuw nsw i64 %49, %52
  %55 = icmp eq i64 %52, 0
  %56 = icmp eq i64 %51, %33
  %57 = and i64 %33, 1
  %58 = icmp eq i64 %57, 0
  %59 = sub nsw i64 0, %33
  %60 = icmp ult i32 %3, 4
  %61 = and i64 %33, 4294967292
  %62 = and i64 %49, 1
  %63 = icmp eq i64 %47, 0
  %64 = sub nuw nsw i64 %49, %62
  %65 = icmp eq i64 %62, 0
  %66 = icmp eq i64 %61, %33
  %67 = and i64 %33, 1
  %68 = icmp eq i64 %67, 0
  %69 = sub nsw i64 0, %33
  br label %70

70:                                               ; preds = %387, %28
  %71 = phi i64 [ 0, %28 ], [ %388, %387 ]
  %72 = phi i32 [ %26, %28 ], [ %389, %387 ]
  %73 = trunc i64 %71 to i32
  %74 = mul i32 %23, %73
  %75 = add i32 %23, %74
  %76 = mul i64 %36, %71
  %77 = getelementptr i8, i8* %8, i64 %76
  %78 = add i64 %34, %76
  %79 = getelementptr i8, i8* %8, i64 %78
  %80 = zext i32 %72 to i64
  br label %97

81:                                               ; preds = %387, %15
  %82 = icmp sgt i32 %3, 0
  br i1 %82, label %83, label %472

83:                                               ; preds = %81
  %84 = sext i32 %26 to i64
  %85 = sext i32 %23 to i64
  %86 = add nsw i64 %84, 1
  %87 = sub nsw i64 %86, %4
  %88 = sub nsw i64 %84, %4
  br label %391

89:                                               ; preds = %236
  %90 = mul nsw i64 %71, %31
  %91 = trunc i64 %71 to i32
  %92 = shl i64 %71, 32
  %93 = ashr exact i64 %92, 32
  %94 = add nsw i64 %90, %93
  %95 = getelementptr inbounds double, double* %17, i64 %94
  %96 = getelementptr inbounds double, double* %16, i64 %71
  br label %239

97:                                               ; preds = %236, %70
  %98 = phi i64 [ %30, %70 ], [ %109, %236 ]
  %99 = phi i64 [ 0, %70 ], [ %237, %236 ]
  %100 = mul i64 %39, %99
  %101 = add i64 %38, %100
  %102 = getelementptr i8, i8* %8, i64 %101
  %103 = add i64 %41, %100
  %104 = getelementptr i8, i8* %8, i64 %103
  %105 = add i64 %44, %100
  %106 = getelementptr i8, i8* %8, i64 %105
  %107 = add i64 %45, %100
  %108 = getelementptr i8, i8* %8, i64 %107
  %109 = add nsw i64 %98, -1
  %110 = mul nsw i64 %109, %31
  %111 = add nsw i64 %110, %71
  %112 = getelementptr inbounds double, double* %17, i64 %111
  %113 = load double, double* %112, align 8
  %114 = tail call double @llvm.fabs.f64(double %113) #9
  %115 = mul nsw i64 %98, %31
  %116 = add nsw i64 %115, %71
  %117 = getelementptr inbounds double, double* %17, i64 %116
  %118 = load double, double* %117, align 8
  %119 = tail call double @llvm.fabs.f64(double %118) #9
  %120 = fcmp olt double %114, %119
  br i1 %120, label %121, label %236

121:                                              ; preds = %97
  br i1 %29, label %122, label %230

122:                                              ; preds = %121
  br i1 %50, label %193, label %123

123:                                              ; preds = %122
  %124 = icmp ult i8* %102, %108
  %125 = icmp ult i8* %106, %104
  %126 = and i1 %124, %125
  br i1 %126, label %193, label %127

127:                                              ; preds = %123
  br i1 %53, label %171, label %128

128:                                              ; preds = %127, %128
  %129 = phi i64 [ %168, %128 ], [ 0, %127 ]
  %130 = phi i64 [ %169, %128 ], [ %54, %127 ]
  %131 = add nsw i64 %129, %115
  %132 = getelementptr inbounds double, double* %17, i64 %131
  %133 = bitcast double* %132 to <2 x i64>*
  %134 = load <2 x i64>, <2 x i64>* %133, align 8, !alias.scope !2, !noalias !5
  %135 = getelementptr inbounds double, double* %132, i64 2
  %136 = bitcast double* %135 to <2 x i64>*
  %137 = load <2 x i64>, <2 x i64>* %136, align 8, !alias.scope !2, !noalias !5
  %138 = add nsw i64 %129, %110
  %139 = getelementptr inbounds double, double* %17, i64 %138
  %140 = bitcast double* %139 to <2 x i64>*
  %141 = load <2 x i64>, <2 x i64>* %140, align 8, !alias.scope !5
  %142 = getelementptr inbounds double, double* %139, i64 2
  %143 = bitcast double* %142 to <2 x i64>*
  %144 = load <2 x i64>, <2 x i64>* %143, align 8, !alias.scope !5
  %145 = bitcast double* %132 to <2 x i64>*
  store <2 x i64> %141, <2 x i64>* %145, align 8, !alias.scope !2, !noalias !5
  %146 = bitcast double* %135 to <2 x i64>*
  store <2 x i64> %144, <2 x i64>* %146, align 8, !alias.scope !2, !noalias !5
  %147 = bitcast double* %139 to <2 x i64>*
  store <2 x i64> %134, <2 x i64>* %147, align 8, !alias.scope !5
  %148 = bitcast double* %142 to <2 x i64>*
  store <2 x i64> %137, <2 x i64>* %148, align 8, !alias.scope !5
  %149 = or i64 %129, 4
  %150 = add nsw i64 %149, %115
  %151 = getelementptr inbounds double, double* %17, i64 %150
  %152 = bitcast double* %151 to <2 x i64>*
  %153 = load <2 x i64>, <2 x i64>* %152, align 8, !alias.scope !2, !noalias !5
  %154 = getelementptr inbounds double, double* %151, i64 2
  %155 = bitcast double* %154 to <2 x i64>*
  %156 = load <2 x i64>, <2 x i64>* %155, align 8, !alias.scope !2, !noalias !5
  %157 = add nsw i64 %149, %110
  %158 = getelementptr inbounds double, double* %17, i64 %157
  %159 = bitcast double* %158 to <2 x i64>*
  %160 = load <2 x i64>, <2 x i64>* %159, align 8, !alias.scope !5
  %161 = getelementptr inbounds double, double* %158, i64 2
  %162 = bitcast double* %161 to <2 x i64>*
  %163 = load <2 x i64>, <2 x i64>* %162, align 8, !alias.scope !5
  %164 = bitcast double* %151 to <2 x i64>*
  store <2 x i64> %160, <2 x i64>* %164, align 8, !alias.scope !2, !noalias !5
  %165 = bitcast double* %154 to <2 x i64>*
  store <2 x i64> %163, <2 x i64>* %165, align 8, !alias.scope !2, !noalias !5
  %166 = bitcast double* %158 to <2 x i64>*
  store <2 x i64> %153, <2 x i64>* %166, align 8, !alias.scope !5
  %167 = bitcast double* %161 to <2 x i64>*
  store <2 x i64> %156, <2 x i64>* %167, align 8, !alias.scope !5
  %168 = add i64 %129, 8
  %169 = add i64 %130, -2
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %171, label %128, !llvm.loop !7

171:                                              ; preds = %128, %127
  %172 = phi i64 [ 0, %127 ], [ %168, %128 ]
  br i1 %55, label %192, label %173

173:                                              ; preds = %171
  %174 = add nsw i64 %172, %115
  %175 = getelementptr inbounds double, double* %17, i64 %174
  %176 = bitcast double* %175 to <2 x i64>*
  %177 = load <2 x i64>, <2 x i64>* %176, align 8, !alias.scope !2, !noalias !5
  %178 = getelementptr inbounds double, double* %175, i64 2
  %179 = bitcast double* %178 to <2 x i64>*
  %180 = load <2 x i64>, <2 x i64>* %179, align 8, !alias.scope !2, !noalias !5
  %181 = add nsw i64 %172, %110
  %182 = getelementptr inbounds double, double* %17, i64 %181
  %183 = bitcast double* %182 to <2 x i64>*
  %184 = load <2 x i64>, <2 x i64>* %183, align 8, !alias.scope !5
  %185 = getelementptr inbounds double, double* %182, i64 2
  %186 = bitcast double* %185 to <2 x i64>*
  %187 = load <2 x i64>, <2 x i64>* %186, align 8, !alias.scope !5
  %188 = bitcast double* %175 to <2 x i64>*
  store <2 x i64> %184, <2 x i64>* %188, align 8, !alias.scope !2, !noalias !5
  %189 = bitcast double* %178 to <2 x i64>*
  store <2 x i64> %187, <2 x i64>* %189, align 8, !alias.scope !2, !noalias !5
  %190 = bitcast double* %182 to <2 x i64>*
  store <2 x i64> %177, <2 x i64>* %190, align 8, !alias.scope !5
  %191 = bitcast double* %185 to <2 x i64>*
  store <2 x i64> %180, <2 x i64>* %191, align 8, !alias.scope !5
  br label %192

192:                                              ; preds = %171, %173
  br i1 %56, label %230, label %193

193:                                              ; preds = %192, %123, %122
  %194 = phi i64 [ 0, %123 ], [ 0, %122 ], [ %51, %192 ]
  %195 = xor i64 %194, -1
  br i1 %58, label %206, label %196

196:                                              ; preds = %193
  %197 = add nsw i64 %194, %115
  %198 = getelementptr inbounds double, double* %17, i64 %197
  %199 = bitcast double* %198 to i64*
  %200 = load i64, i64* %199, align 8
  %201 = add nsw i64 %194, %110
  %202 = getelementptr inbounds double, double* %17, i64 %201
  %203 = bitcast double* %202 to i64*
  %204 = load i64, i64* %203, align 8
  store i64 %204, i64* %199, align 8
  store i64 %200, i64* %203, align 8
  %205 = or i64 %194, 1
  br label %206

206:                                              ; preds = %196, %193
  %207 = phi i64 [ %205, %196 ], [ %194, %193 ]
  %208 = icmp eq i64 %195, %59
  br i1 %208, label %230, label %209

209:                                              ; preds = %206, %209
  %210 = phi i64 [ %228, %209 ], [ %207, %206 ]
  %211 = add nsw i64 %210, %115
  %212 = getelementptr inbounds double, double* %17, i64 %211
  %213 = bitcast double* %212 to i64*
  %214 = load i64, i64* %213, align 8
  %215 = add nsw i64 %210, %110
  %216 = getelementptr inbounds double, double* %17, i64 %215
  %217 = bitcast double* %216 to i64*
  %218 = load i64, i64* %217, align 8
  store i64 %218, i64* %213, align 8
  store i64 %214, i64* %217, align 8
  %219 = add nuw nsw i64 %210, 1
  %220 = add nsw i64 %219, %115
  %221 = getelementptr inbounds double, double* %17, i64 %220
  %222 = bitcast double* %221 to i64*
  %223 = load i64, i64* %222, align 8
  %224 = add nsw i64 %219, %110
  %225 = getelementptr inbounds double, double* %17, i64 %224
  %226 = bitcast double* %225 to i64*
  %227 = load i64, i64* %226, align 8
  store i64 %227, i64* %222, align 8
  store i64 %223, i64* %226, align 8
  %228 = add nuw nsw i64 %210, 2
  %229 = icmp eq i64 %228, %33
  br i1 %229, label %230, label %209, !llvm.loop !9

230:                                              ; preds = %206, %209, %192, %121
  %231 = getelementptr inbounds double, double* %16, i64 %109
  %232 = bitcast double* %231 to <2 x i64>*
  %233 = load <2 x i64>, <2 x i64>* %232, align 8
  %234 = shufflevector <2 x i64> %233, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %235 = bitcast double* %231 to <2 x i64>*
  store <2 x i64> %234, <2 x i64>* %235, align 8
  br label %236

236:                                              ; preds = %230, %97
  %237 = add nuw nsw i64 %99, 1
  %238 = icmp eq i64 %237, %80
  br i1 %238, label %89, label %97

239:                                              ; preds = %379, %89
  %240 = phi i32 [ %386, %379 ], [ 0, %89 ]
  %241 = phi i64 [ %252, %379 ], [ %71, %89 ]
  %242 = mul i32 %23, %240
  %243 = add i32 %75, %242
  %244 = sext i32 %243 to i64
  %245 = shl nsw i64 %244, 3
  %246 = getelementptr i8, i8* %8, i64 %245
  %247 = getelementptr i8, i8* %35, i64 %245
  %248 = load double, double* %95, align 8
  %249 = tail call double @llvm.fabs.f64(double %248) #9
  %250 = fcmp olt double %249, 0x3C9CD2B297D889BC
  br i1 %250, label %472, label %251

251:                                              ; preds = %239
  %252 = add nuw nsw i64 %241, 1
  %253 = trunc i64 %252 to i32
  %254 = mul nsw i32 %23, %253
  %255 = add nsw i32 %254, %91
  %256 = sext i32 %255 to i64
  %257 = getelementptr inbounds double, double* %17, i64 %256
  %258 = load double, double* %257, align 8
  %259 = fdiv double %258, %248
  br i1 %29, label %260, label %379

260:                                              ; preds = %251
  %261 = sext i32 %254 to i64
  br i1 %60, label %342, label %262

262:                                              ; preds = %260
  %263 = icmp ult i8* %246, %79
  %264 = icmp ult i8* %77, %247
  %265 = and i1 %263, %264
  br i1 %265, label %342, label %266

266:                                              ; preds = %262
  %267 = insertelement <2 x double> undef, double %259, i32 0
  %268 = shufflevector <2 x double> %267, <2 x double> undef, <2 x i32> zeroinitializer
  %269 = insertelement <2 x double> undef, double %259, i32 0
  %270 = shufflevector <2 x double> %269, <2 x double> undef, <2 x i32> zeroinitializer
  br i1 %63, label %318, label %271

271:                                              ; preds = %266, %271
  %272 = phi i64 [ %315, %271 ], [ 0, %266 ]
  %273 = phi i64 [ %316, %271 ], [ %64, %266 ]
  %274 = add nsw i64 %272, %90
  %275 = getelementptr inbounds double, double* %17, i64 %274
  %276 = bitcast double* %275 to <2 x double>*
  %277 = load <2 x double>, <2 x double>* %276, align 8, !alias.scope !10
  %278 = getelementptr inbounds double, double* %275, i64 2
  %279 = bitcast double* %278 to <2 x double>*
  %280 = load <2 x double>, <2 x double>* %279, align 8, !alias.scope !10
  %281 = fmul <2 x double> %268, %277
  %282 = fmul <2 x double> %270, %280
  %283 = add nsw i64 %272, %261
  %284 = getelementptr inbounds double, double* %17, i64 %283
  %285 = bitcast double* %284 to <2 x double>*
  %286 = load <2 x double>, <2 x double>* %285, align 8, !alias.scope !13, !noalias !10
  %287 = getelementptr inbounds double, double* %284, i64 2
  %288 = bitcast double* %287 to <2 x double>*
  %289 = load <2 x double>, <2 x double>* %288, align 8, !alias.scope !13, !noalias !10
  %290 = fsub <2 x double> %286, %281
  %291 = fsub <2 x double> %289, %282
  %292 = bitcast double* %284 to <2 x double>*
  store <2 x double> %290, <2 x double>* %292, align 8, !alias.scope !13, !noalias !10
  %293 = bitcast double* %287 to <2 x double>*
  store <2 x double> %291, <2 x double>* %293, align 8, !alias.scope !13, !noalias !10
  %294 = or i64 %272, 4
  %295 = add nsw i64 %294, %90
  %296 = getelementptr inbounds double, double* %17, i64 %295
  %297 = bitcast double* %296 to <2 x double>*
  %298 = load <2 x double>, <2 x double>* %297, align 8, !alias.scope !10
  %299 = getelementptr inbounds double, double* %296, i64 2
  %300 = bitcast double* %299 to <2 x double>*
  %301 = load <2 x double>, <2 x double>* %300, align 8, !alias.scope !10
  %302 = fmul <2 x double> %268, %298
  %303 = fmul <2 x double> %270, %301
  %304 = add nsw i64 %294, %261
  %305 = getelementptr inbounds double, double* %17, i64 %304
  %306 = bitcast double* %305 to <2 x double>*
  %307 = load <2 x double>, <2 x double>* %306, align 8, !alias.scope !13, !noalias !10
  %308 = getelementptr inbounds double, double* %305, i64 2
  %309 = bitcast double* %308 to <2 x double>*
  %310 = load <2 x double>, <2 x double>* %309, align 8, !alias.scope !13, !noalias !10
  %311 = fsub <2 x double> %307, %302
  %312 = fsub <2 x double> %310, %303
  %313 = bitcast double* %305 to <2 x double>*
  store <2 x double> %311, <2 x double>* %313, align 8, !alias.scope !13, !noalias !10
  %314 = bitcast double* %308 to <2 x double>*
  store <2 x double> %312, <2 x double>* %314, align 8, !alias.scope !13, !noalias !10
  %315 = add i64 %272, 8
  %316 = add i64 %273, -2
  %317 = icmp eq i64 %316, 0
  br i1 %317, label %318, label %271, !llvm.loop !15

318:                                              ; preds = %271, %266
  %319 = phi i64 [ 0, %266 ], [ %315, %271 ]
  br i1 %65, label %341, label %320

320:                                              ; preds = %318
  %321 = add nsw i64 %319, %90
  %322 = getelementptr inbounds double, double* %17, i64 %321
  %323 = bitcast double* %322 to <2 x double>*
  %324 = load <2 x double>, <2 x double>* %323, align 8, !alias.scope !10
  %325 = getelementptr inbounds double, double* %322, i64 2
  %326 = bitcast double* %325 to <2 x double>*
  %327 = load <2 x double>, <2 x double>* %326, align 8, !alias.scope !10
  %328 = fmul <2 x double> %268, %324
  %329 = fmul <2 x double> %270, %327
  %330 = add nsw i64 %319, %261
  %331 = getelementptr inbounds double, double* %17, i64 %330
  %332 = bitcast double* %331 to <2 x double>*
  %333 = load <2 x double>, <2 x double>* %332, align 8, !alias.scope !13, !noalias !10
  %334 = getelementptr inbounds double, double* %331, i64 2
  %335 = bitcast double* %334 to <2 x double>*
  %336 = load <2 x double>, <2 x double>* %335, align 8, !alias.scope !13, !noalias !10
  %337 = fsub <2 x double> %333, %328
  %338 = fsub <2 x double> %336, %329
  %339 = bitcast double* %331 to <2 x double>*
  store <2 x double> %337, <2 x double>* %339, align 8, !alias.scope !13, !noalias !10
  %340 = bitcast double* %334 to <2 x double>*
  store <2 x double> %338, <2 x double>* %340, align 8, !alias.scope !13, !noalias !10
  br label %341

341:                                              ; preds = %318, %320
  br i1 %66, label %379, label %342

342:                                              ; preds = %341, %262, %260
  %343 = phi i64 [ 0, %262 ], [ 0, %260 ], [ %61, %341 ]
  %344 = xor i64 %343, -1
  br i1 %68, label %355, label %345

345:                                              ; preds = %342
  %346 = add nsw i64 %343, %90
  %347 = getelementptr inbounds double, double* %17, i64 %346
  %348 = load double, double* %347, align 8
  %349 = fmul double %259, %348
  %350 = add nsw i64 %343, %261
  %351 = getelementptr inbounds double, double* %17, i64 %350
  %352 = load double, double* %351, align 8
  %353 = fsub double %352, %349
  store double %353, double* %351, align 8
  %354 = or i64 %343, 1
  br label %355

355:                                              ; preds = %345, %342
  %356 = phi i64 [ %354, %345 ], [ %343, %342 ]
  %357 = icmp eq i64 %344, %69
  br i1 %357, label %379, label %358

358:                                              ; preds = %355, %358
  %359 = phi i64 [ %377, %358 ], [ %356, %355 ]
  %360 = add nsw i64 %359, %90
  %361 = getelementptr inbounds double, double* %17, i64 %360
  %362 = load double, double* %361, align 8
  %363 = fmul double %259, %362
  %364 = add nsw i64 %359, %261
  %365 = getelementptr inbounds double, double* %17, i64 %364
  %366 = load double, double* %365, align 8
  %367 = fsub double %366, %363
  store double %367, double* %365, align 8
  %368 = add nuw nsw i64 %359, 1
  %369 = add nsw i64 %368, %90
  %370 = getelementptr inbounds double, double* %17, i64 %369
  %371 = load double, double* %370, align 8
  %372 = fmul double %259, %371
  %373 = add nsw i64 %368, %261
  %374 = getelementptr inbounds double, double* %17, i64 %373
  %375 = load double, double* %374, align 8
  %376 = fsub double %375, %372
  store double %376, double* %374, align 8
  %377 = add nuw nsw i64 %359, 2
  %378 = icmp eq i64 %377, %33
  br i1 %378, label %379, label %358, !llvm.loop !16

379:                                              ; preds = %355, %358, %341, %251
  %380 = load double, double* %96, align 8
  %381 = fmul double %259, %380
  %382 = getelementptr inbounds double, double* %16, i64 %252
  %383 = load double, double* %382, align 8
  %384 = fsub double %383, %381
  store double %384, double* %382, align 8
  %385 = icmp eq i64 %252, %32
  %386 = add i32 %240, 1
  br i1 %385, label %387, label %239

387:                                              ; preds = %379
  %388 = add nuw nsw i64 %71, 1
  %389 = add i32 %72, -1
  %390 = icmp eq i64 %388, %32
  br i1 %390, label %81, label %70

391:                                              ; preds = %463, %83
  %392 = phi i64 [ %471, %463 ], [ 0, %83 ]
  %393 = phi i64 [ %396, %463 ], [ %4, %83 ]
  %394 = add i64 %87, %392
  %395 = add i64 %88, %392
  %396 = add nsw i64 %393, -1
  %397 = mul nsw i64 %396, %85
  %398 = add nsw i64 %397, %396
  %399 = getelementptr inbounds double, double* %17, i64 %398
  %400 = load double, double* %399, align 8
  %401 = tail call double @llvm.fabs.f64(double %400) #9
  %402 = fcmp olt double %401, 0x3C9CD2B297D889BC
  br i1 %402, label %472, label %403

403:                                              ; preds = %391
  %404 = icmp sgt i64 %393, %84
  br i1 %404, label %463, label %405

405:                                              ; preds = %403
  %406 = and i64 %394, 3
  %407 = icmp eq i64 %406, 0
  br i1 %407, label %422, label %408

408:                                              ; preds = %405, %408
  %409 = phi i64 [ %412, %408 ], [ %396, %405 ]
  %410 = phi double [ %419, %408 ], [ 0.000000e+00, %405 ]
  %411 = phi i64 [ %420, %408 ], [ %406, %405 ]
  %412 = add nsw i64 %409, 1
  %413 = add nsw i64 %412, %397
  %414 = getelementptr inbounds double, double* %17, i64 %413
  %415 = load double, double* %414, align 8
  %416 = getelementptr inbounds double, double* %25, i64 %412
  %417 = load double, double* %416, align 8
  %418 = fmul double %415, %417
  %419 = fadd double %410, %418
  %420 = add i64 %411, -1
  %421 = icmp eq i64 %420, 0
  br i1 %421, label %422, label %408, !llvm.loop !17

422:                                              ; preds = %408, %405
  %423 = phi double [ undef, %405 ], [ %419, %408 ]
  %424 = phi i64 [ %396, %405 ], [ %412, %408 ]
  %425 = phi double [ 0.000000e+00, %405 ], [ %419, %408 ]
  %426 = icmp ult i64 %395, 3
  br i1 %426, label %463, label %427

427:                                              ; preds = %422, %427
  %428 = phi i64 [ %454, %427 ], [ %424, %422 ]
  %429 = phi double [ %461, %427 ], [ %425, %422 ]
  %430 = add nsw i64 %428, 1
  %431 = add nsw i64 %430, %397
  %432 = getelementptr inbounds double, double* %17, i64 %431
  %433 = load double, double* %432, align 8
  %434 = getelementptr inbounds double, double* %25, i64 %430
  %435 = load double, double* %434, align 8
  %436 = fmul double %433, %435
  %437 = fadd double %429, %436
  %438 = add nsw i64 %428, 2
  %439 = add nsw i64 %438, %397
  %440 = getelementptr inbounds double, double* %17, i64 %439
  %441 = load double, double* %440, align 8
  %442 = getelementptr inbounds double, double* %25, i64 %438
  %443 = load double, double* %442, align 8
  %444 = fmul double %441, %443
  %445 = fadd double %437, %444
  %446 = add nsw i64 %428, 3
  %447 = add nsw i64 %446, %397
  %448 = getelementptr inbounds double, double* %17, i64 %447
  %449 = load double, double* %448, align 8
  %450 = getelementptr inbounds double, double* %25, i64 %446
  %451 = load double, double* %450, align 8
  %452 = fmul double %449, %451
  %453 = fadd double %445, %452
  %454 = add nsw i64 %428, 4
  %455 = add nsw i64 %454, %397
  %456 = getelementptr inbounds double, double* %17, i64 %455
  %457 = load double, double* %456, align 8
  %458 = getelementptr inbounds double, double* %25, i64 %454
  %459 = load double, double* %458, align 8
  %460 = fmul double %457, %459
  %461 = fadd double %453, %460
  %462 = icmp eq i64 %454, %84
  br i1 %462, label %463, label %427

463:                                              ; preds = %422, %427, %403
  %464 = phi double [ 0.000000e+00, %403 ], [ %423, %422 ], [ %461, %427 ]
  %465 = getelementptr inbounds double, double* %16, i64 %396
  %466 = load double, double* %465, align 8
  %467 = fsub double %466, %464
  %468 = fdiv double %467, %400
  %469 = getelementptr inbounds double, double* %25, i64 %396
  store double %468, double* %469, align 8
  %470 = icmp sgt i64 %396, 0
  %471 = add i64 %392, 1
  br i1 %470, label %391, label %472

472:                                              ; preds = %239, %391, %463, %81
  %473 = phi i32 [ 1, %81 ], [ 1, %463 ], [ 0, %391 ], [ 0, %239 ]
  tail call void @aom_free(i8* %6) #9
  tail call void @aom_free(i8* %8) #9
  ret i32 %473
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_noise_strength_solver_init(%struct.aom_noise_strength_solver_t*, i32, i32) local_unnamed_addr #0 {
  %4 = icmp eq %struct.aom_noise_strength_solver_t* %0, null
  br i1 %4, label %17, label %5

5:                                                ; preds = %3
  %6 = bitcast %struct.aom_noise_strength_solver_t* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 32, i1 false)
  %7 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 3
  store i32 %1, i32* %7, align 8
  %8 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 1
  store double 0.000000e+00, double* %8, align 8
  %9 = shl nsw i32 -1, %2
  %10 = xor i32 %9, -1
  %11 = sitofp i32 %10 to double
  %12 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 2
  store double %11, double* %12, align 8
  %13 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 5
  store double 0.000000e+00, double* %13, align 8
  %14 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 4
  store i32 0, i32* %14, align 4
  %15 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 0
  %16 = tail call fastcc i32 @equation_system_init(%struct.aom_equation_system_t* %15, i32 %1)
  br label %17

17:                                               ; preds = %3, %5
  %18 = phi i32 [ %16, %5 ], [ 0, %3 ]
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @equation_system_init(%struct.aom_equation_system_t* nocapture, i32) unnamed_addr #0 {
  %3 = sext i32 %1 to i64
  %4 = shl nsw i64 %3, 3
  %5 = mul i64 %4, %3
  %6 = tail call i8* @aom_malloc(i64 %5) #9
  %7 = getelementptr inbounds %struct.aom_equation_system_t, %struct.aom_equation_system_t* %0, i64 0, i32 0
  %8 = bitcast %struct.aom_equation_system_t* %0 to i8**
  store i8* %6, i8** %8, align 8
  %9 = tail call i8* @aom_malloc(i64 %4) #9
  %10 = getelementptr inbounds %struct.aom_equation_system_t, %struct.aom_equation_system_t* %0, i64 0, i32 1
  %11 = bitcast double** %10 to i8**
  store i8* %9, i8** %11, align 8
  %12 = tail call i8* @aom_malloc(i64 %4) #9
  %13 = getelementptr inbounds %struct.aom_equation_system_t, %struct.aom_equation_system_t* %0, i64 0, i32 2
  %14 = bitcast double** %13 to i8**
  store i8* %12, i8** %14, align 8
  %15 = getelementptr inbounds %struct.aom_equation_system_t, %struct.aom_equation_system_t* %0, i64 0, i32 3
  store i32 %1, i32* %15, align 8
  %16 = load double*, double** %7, align 8
  %17 = icmp eq double* %16, null
  %18 = bitcast double* %16 to i8*
  br i1 %17, label %24, label %19

19:                                               ; preds = %2
  %20 = load double*, double** %10, align 8
  %21 = icmp eq double* %20, null
  %22 = icmp eq i8* %12, null
  %23 = or i1 %21, %22
  br i1 %23, label %24, label %31

24:                                               ; preds = %19, %2
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %26 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.25, i64 0, i64 0), i32 %1) #10
  %27 = load i8*, i8** %8, align 8
  tail call void @aom_free(i8* %27) #9
  %28 = load i8*, i8** %11, align 8
  tail call void @aom_free(i8* %28) #9
  %29 = load i8*, i8** %14, align 8
  tail call void @aom_free(i8* %29) #9
  %30 = bitcast %struct.aom_equation_system_t* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 32, i1 false)
  br label %34

31:                                               ; preds = %19
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 %5, i1 false) #9
  %32 = load i8*, i8** %14, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 %4, i1 false) #9
  %33 = load i8*, i8** %11, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 %4, i1 false) #9
  br label %34

34:                                               ; preds = %31, %24
  %35 = phi i32 [ 1, %31 ], [ 0, %24 ]
  ret i32 %35
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_noise_strength_solver_free(%struct.aom_noise_strength_solver_t*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.aom_noise_strength_solver_t* %0, null
  br i1 %2, label %13, label %3

3:                                                ; preds = %1
  %4 = bitcast %struct.aom_noise_strength_solver_t* %0 to i8**
  %5 = load i8*, i8** %4, align 8
  tail call void @aom_free(i8* %5) #9
  %6 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 0, i32 1
  %7 = bitcast double** %6 to i8**
  %8 = load i8*, i8** %7, align 8
  tail call void @aom_free(i8* %8) #9
  %9 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 0, i32 2
  %10 = bitcast double** %9 to i8**
  %11 = load i8*, i8** %10, align 8
  tail call void @aom_free(i8* %11) #9
  %12 = bitcast %struct.aom_noise_strength_solver_t* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 0, i64 32, i1 false) #9
  br label %13

13:                                               ; preds = %3, %1
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @aom_noise_strength_solver_get_center(%struct.aom_noise_strength_solver_t* nocapture readonly, i32) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 2
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 1
  %6 = load double, double* %5, align 8
  %7 = fsub double %4, %6
  %8 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = sitofp i32 %1 to double
  %11 = add nsw i32 %9, -1
  %12 = sitofp i32 %11 to double
  %13 = fdiv double %10, %12
  %14 = fmul double %7, %13
  %15 = fadd double %6, %14
  ret double %15
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_noise_strength_solver_fit_piecewise(%struct.aom_noise_strength_solver_t* nocapture readonly, i32, %struct.aom_noise_strength_lut_t*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 2
  %5 = load double, double* %4, align 8
  %6 = fmul double %5, 6.250000e-03
  %7 = fdiv double %6, 2.550000e+02
  %8 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq %struct.aom_noise_strength_lut_t* %2, null
  %11 = icmp slt i32 %9, 1
  %12 = or i1 %10, %11
  br i1 %12, label %27, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %struct.aom_noise_strength_lut_t, %struct.aom_noise_strength_lut_t* %2, i64 0, i32 1
  store i32 0, i32* %14, align 8
  %15 = sext i32 %9 to i64
  %16 = shl nsw i64 %15, 4
  %17 = tail call i8* @aom_malloc(i64 %16) #9
  %18 = bitcast %struct.aom_noise_strength_lut_t* %2 to i8**
  store i8* %17, i8** %18, align 8
  %19 = icmp eq i8* %17, null
  br i1 %19, label %27, label %20

20:                                               ; preds = %13
  store i32 %9, i32* %14, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 0, i64 %16, i1 false) #9
  %21 = load i32, i32* %8, align 8
  %22 = icmp sgt i32 %21, 0
  br i1 %22, label %23, label %30

23:                                               ; preds = %20
  %24 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 1
  %25 = getelementptr inbounds %struct.aom_noise_strength_lut_t, %struct.aom_noise_strength_lut_t* %2, i64 0, i32 0
  %26 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 0, i32 2
  br label %46

27:                                               ; preds = %3, %13
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %29 = tail call i64 @fwrite(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i64 19, i64 1, %struct._IO_FILE* %28) #10
  br label %179

30:                                               ; preds = %46, %20
  %31 = phi i32 [ %21, %20 ], [ %69, %46 ]
  %32 = sext i32 %31 to i64
  %33 = icmp slt i32 %1, 0
  %34 = select i1 %33, i32 %31, i32 %1
  %35 = shl nsw i64 %32, 3
  %36 = tail call i8* @aom_malloc(i64 %35) #9
  %37 = bitcast i8* %36 to double*
  %38 = load i32, i32* %8, align 8
  %39 = sext i32 %38 to i64
  %40 = shl nsw i64 %39, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 %40, i1 false)
  %41 = load i32, i32* %8, align 8
  tail call fastcc void @update_piecewise_linear_residual(%struct.aom_noise_strength_solver_t* %0, %struct.aom_noise_strength_lut_t* %2, double* %37, i32 0, i32 %41)
  %42 = load i32, i32* %14, align 8
  %43 = icmp sgt i32 %42, 2
  br i1 %43, label %44, label %178

44:                                               ; preds = %30
  %45 = getelementptr inbounds %struct.aom_noise_strength_lut_t, %struct.aom_noise_strength_lut_t* %2, i64 0, i32 0
  br label %72

46:                                               ; preds = %23, %46
  %47 = phi i64 [ 0, %23 ], [ %68, %46 ]
  %48 = phi i32 [ %21, %23 ], [ %69, %46 ]
  %49 = load double, double* %4, align 8
  %50 = load double, double* %24, align 8
  %51 = fsub double %49, %50
  %52 = trunc i64 %47 to i32
  %53 = sitofp i32 %52 to double
  %54 = add nsw i32 %48, -1
  %55 = sitofp i32 %54 to double
  %56 = fdiv double %53, %55
  %57 = fmul double %56, %51
  %58 = fadd double %50, %57
  %59 = load [2 x double]*, [2 x double]** %25, align 8
  %60 = getelementptr inbounds [2 x double], [2 x double]* %59, i64 %47, i64 0
  store double %58, double* %60, align 8
  %61 = load double*, double** %26, align 8
  %62 = getelementptr inbounds double, double* %61, i64 %47
  %63 = bitcast double* %62 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = load [2 x double]*, [2 x double]** %25, align 8
  %66 = getelementptr inbounds [2 x double], [2 x double]* %65, i64 %47, i64 1
  %67 = bitcast double* %66 to i64*
  store i64 %64, i64* %67, align 8
  %68 = add nuw nsw i64 %47, 1
  %69 = load i32, i32* %8, align 8
  %70 = sext i32 %69 to i64
  %71 = icmp slt i64 %68, %70
  br i1 %71, label %46, label %30

72:                                               ; preds = %44, %165
  %73 = phi i32 [ %42, %44 ], [ %176, %165 ]
  %74 = add nsw i32 %73, -1
  %75 = icmp sgt i32 %74, 1
  br i1 %75, label %76, label %104

76:                                               ; preds = %72
  %77 = zext i32 %74 to i64
  %78 = add nsw i64 %77, -1
  %79 = add nsw i64 %77, -2
  %80 = and i64 %78, 3
  %81 = icmp ult i64 %79, 3
  br i1 %81, label %84, label %82

82:                                               ; preds = %76
  %83 = sub nsw i64 %78, %80
  br label %111

84:                                               ; preds = %111, %76
  %85 = phi i32 [ undef, %76 ], [ %149, %111 ]
  %86 = phi i64 [ 1, %76 ], [ %150, %111 ]
  %87 = phi i32 [ 1, %76 ], [ %149, %111 ]
  %88 = icmp eq i64 %80, 0
  br i1 %88, label %104, label %89

89:                                               ; preds = %84, %89
  %90 = phi i64 [ %101, %89 ], [ %86, %84 ]
  %91 = phi i32 [ %100, %89 ], [ %87, %84 ]
  %92 = phi i64 [ %102, %89 ], [ %80, %84 ]
  %93 = getelementptr inbounds double, double* %37, i64 %90
  %94 = load double, double* %93, align 8
  %95 = sext i32 %91 to i64
  %96 = getelementptr inbounds double, double* %37, i64 %95
  %97 = load double, double* %96, align 8
  %98 = fcmp olt double %94, %97
  %99 = trunc i64 %90 to i32
  %100 = select i1 %98, i32 %99, i32 %91
  %101 = add nuw nsw i64 %90, 1
  %102 = add i64 %92, -1
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %89, !llvm.loop !19

104:                                              ; preds = %84, %89, %72
  %105 = phi i32 [ 1, %72 ], [ %85, %84 ], [ %100, %89 ]
  %106 = load [2 x double]*, [2 x double]** %45, align 8
  %107 = add nsw i32 %105, 1
  %108 = add nsw i32 %105, -1
  %109 = sext i32 %105 to i64
  %110 = icmp sgt i32 %73, %34
  br i1 %110, label %165, label %153

111:                                              ; preds = %111, %82
  %112 = phi i64 [ 1, %82 ], [ %150, %111 ]
  %113 = phi i32 [ 1, %82 ], [ %149, %111 ]
  %114 = phi i64 [ %83, %82 ], [ %151, %111 ]
  %115 = getelementptr inbounds double, double* %37, i64 %112
  %116 = load double, double* %115, align 8
  %117 = sext i32 %113 to i64
  %118 = getelementptr inbounds double, double* %37, i64 %117
  %119 = load double, double* %118, align 8
  %120 = fcmp olt double %116, %119
  %121 = trunc i64 %112 to i32
  %122 = select i1 %120, i32 %121, i32 %113
  %123 = add nuw nsw i64 %112, 1
  %124 = getelementptr inbounds double, double* %37, i64 %123
  %125 = load double, double* %124, align 8
  %126 = sext i32 %122 to i64
  %127 = getelementptr inbounds double, double* %37, i64 %126
  %128 = load double, double* %127, align 8
  %129 = fcmp olt double %125, %128
  %130 = trunc i64 %123 to i32
  %131 = select i1 %129, i32 %130, i32 %122
  %132 = add nuw nsw i64 %112, 2
  %133 = getelementptr inbounds double, double* %37, i64 %132
  %134 = load double, double* %133, align 8
  %135 = sext i32 %131 to i64
  %136 = getelementptr inbounds double, double* %37, i64 %135
  %137 = load double, double* %136, align 8
  %138 = fcmp olt double %134, %137
  %139 = trunc i64 %132 to i32
  %140 = select i1 %138, i32 %139, i32 %131
  %141 = add nuw nsw i64 %112, 3
  %142 = getelementptr inbounds double, double* %37, i64 %141
  %143 = load double, double* %142, align 8
  %144 = sext i32 %140 to i64
  %145 = getelementptr inbounds double, double* %37, i64 %144
  %146 = load double, double* %145, align 8
  %147 = fcmp olt double %143, %146
  %148 = trunc i64 %141 to i32
  %149 = select i1 %147, i32 %148, i32 %140
  %150 = add nuw nsw i64 %112, 4
  %151 = add i64 %114, -4
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %84, label %111

153:                                              ; preds = %104
  %154 = sext i32 %108 to i64
  %155 = sext i32 %107 to i64
  %156 = getelementptr inbounds double, double* %37, i64 %109
  %157 = load double, double* %156, align 8
  %158 = getelementptr inbounds [2 x double], [2 x double]* %106, i64 %155, i64 0
  %159 = load double, double* %158, align 8
  %160 = getelementptr inbounds [2 x double], [2 x double]* %106, i64 %154, i64 0
  %161 = load double, double* %160, align 8
  %162 = fsub double %159, %161
  %163 = fdiv double %157, %162
  %164 = fcmp ogt double %163, %7
  br i1 %164, label %178, label %165

165:                                              ; preds = %104, %153
  %166 = xor i32 %105, -1
  %167 = add i32 %73, %166
  %168 = getelementptr inbounds [2 x double], [2 x double]* %106, i64 %109
  %169 = bitcast [2 x double]* %168 to i8*
  %170 = getelementptr inbounds [2 x double], [2 x double]* %168, i64 1
  %171 = bitcast [2 x double]* %170 to i8*
  %172 = sext i32 %167 to i64
  %173 = shl nsw i64 %172, 4
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %169, i8* align 8 %171, i64 %173, i1 false)
  %174 = load i32, i32* %14, align 8
  %175 = add nsw i32 %174, -1
  store i32 %175, i32* %14, align 8
  tail call fastcc void @update_piecewise_linear_residual(%struct.aom_noise_strength_solver_t* %0, %struct.aom_noise_strength_lut_t* %2, double* %37, i32 %108, i32 %107)
  %176 = load i32, i32* %14, align 8
  %177 = icmp sgt i32 %176, 2
  br i1 %177, label %72, label %178

178:                                              ; preds = %165, %153, %30
  tail call void @aom_free(i8* %36) #9
  br label %179

179:                                              ; preds = %178, %27
  %180 = phi i32 [ 1, %178 ], [ 0, %27 ]
  ret i32 %180
}

; Function Attrs: nofree nounwind ssp uwtable
define internal fastcc void @update_piecewise_linear_residual(%struct.aom_noise_strength_solver_t* nocapture readonly, %struct.aom_noise_strength_lut_t* nocapture readonly, double* nocapture, i32, i32) unnamed_addr #4 {
  %6 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = sitofp i32 %7 to double
  %9 = fdiv double 2.550000e+02, %8
  %10 = icmp sgt i32 %3, 1
  %11 = select i1 %10, i32 %3, i32 1
  %12 = getelementptr inbounds %struct.aom_noise_strength_lut_t, %struct.aom_noise_strength_lut_t* %1, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add nsw i32 %13, -1
  %15 = icmp sgt i32 %14, %4
  %16 = select i1 %15, i32 %4, i32 %14
  %17 = icmp slt i32 %11, %16
  br i1 %17, label %18, label %24

18:                                               ; preds = %5
  %19 = getelementptr inbounds %struct.aom_noise_strength_lut_t, %struct.aom_noise_strength_lut_t* %1, i64 0, i32 0
  %20 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 1
  %21 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 2
  %22 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %0, i64 0, i32 0, i32 2
  %23 = zext i32 %11 to i64
  br label %25

24:                                               ; preds = %69, %5
  ret void

25:                                               ; preds = %79, %18
  %26 = phi i32 [ %7, %18 ], [ %80, %79 ]
  %27 = phi i64 [ %23, %18 ], [ %48, %79 ]
  %28 = load [2 x double]*, [2 x double]** %19, align 8
  %29 = add nsw i64 %27, -1
  %30 = getelementptr inbounds [2 x double], [2 x double]* %28, i64 %29, i64 0
  %31 = load double, double* %30, align 8
  %32 = load double, double* %20, align 8
  %33 = load double, double* %21, align 8
  %34 = fcmp ogt double %32, %31
  %35 = fcmp olt double %33, %31
  %36 = select i1 %35, double %33, double %31
  %37 = select i1 %34, double %32, double %36
  %38 = fsub double %33, %32
  %39 = add nsw i32 %26, -1
  %40 = sitofp i32 %39 to double
  %41 = fsub double %37, %32
  %42 = fmul double %41, %40
  %43 = fdiv double %42, %38
  %44 = tail call double @llvm.floor.f64(double %43)
  %45 = fptosi double %44 to i32
  %46 = icmp sgt i32 %45, 0
  %47 = select i1 %46, i32 %45, i32 0
  %48 = add nuw nsw i64 %27, 1
  %49 = getelementptr inbounds [2 x double], [2 x double]* %28, i64 %48, i64 0
  %50 = load double, double* %49, align 8
  %51 = fcmp ogt double %32, %50
  %52 = fcmp olt double %33, %50
  %53 = select i1 %52, double %33, double %50
  %54 = select i1 %51, double %32, double %53
  %55 = fsub double %54, %32
  %56 = fmul double %55, %40
  %57 = fdiv double %56, %38
  %58 = tail call double @llvm.ceil.f64(double %57)
  %59 = fptosi double %58 to i32
  %60 = icmp sgt i32 %26, %59
  %61 = select i1 %60, i32 %59, i32 %39
  %62 = icmp sgt i32 %47, %61
  br i1 %62, label %69, label %63

63:                                               ; preds = %25
  %64 = fsub double %50, %31
  %65 = getelementptr inbounds [2 x double], [2 x double]* %28, i64 %29, i64 1
  %66 = getelementptr inbounds [2 x double], [2 x double]* %28, i64 %48, i64 1
  %67 = zext i32 %47 to i64
  %68 = sext i32 %61 to i64
  br label %81

69:                                               ; preds = %107, %25
  %70 = phi double [ 0.000000e+00, %25 ], [ %108, %107 ]
  %71 = fmul double %9, %70
  %72 = getelementptr inbounds double, double* %2, i64 %27
  store double %71, double* %72, align 8
  %73 = load i32, i32* %12, align 8
  %74 = add nsw i32 %73, -1
  %75 = icmp sgt i32 %74, %4
  %76 = select i1 %75, i32 %4, i32 %74
  %77 = trunc i64 %48 to i32
  %78 = icmp sgt i32 %76, %77
  br i1 %78, label %79, label %24

79:                                               ; preds = %69
  %80 = load i32, i32* %6, align 8
  br label %25

81:                                               ; preds = %107, %63
  %82 = phi i64 [ %109, %107 ], [ %67, %63 ]
  %83 = phi double [ %108, %107 ], [ 0.000000e+00, %63 ]
  %84 = trunc i64 %82 to i32
  %85 = sitofp i32 %84 to double
  %86 = fdiv double %85, %40
  %87 = fmul double %38, %86
  %88 = fadd double %32, %87
  %89 = fcmp uge double %88, %31
  %90 = fcmp ult double %88, %50
  %91 = and i1 %89, %90
  br i1 %91, label %92, label %107

92:                                               ; preds = %81
  %93 = load double*, double** %22, align 8
  %94 = getelementptr inbounds double, double* %93, i64 %82
  %95 = load double, double* %94, align 8
  %96 = fsub double %88, %31
  %97 = fdiv double %96, %64
  %98 = load double, double* %65, align 8
  %99 = fsub double 1.000000e+00, %97
  %100 = fmul double %99, %98
  %101 = load double, double* %66, align 8
  %102 = fmul double %97, %101
  %103 = fadd double %100, %102
  %104 = fsub double %95, %103
  %105 = tail call double @llvm.fabs.f64(double %104)
  %106 = fadd double %83, %105
  br label %107

107:                                              ; preds = %81, %92
  %108 = phi double [ %106, %92 ], [ %83, %81 ]
  %109 = add nuw nsw i64 %82, 1
  %110 = icmp slt i64 %82, %68
  br i1 %110, label %81, label %69
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_flat_block_finder_init(%struct.aom_flat_block_finder_t* nocapture, i32, i32, i32) local_unnamed_addr #0 {
  %5 = alloca %struct.aom_equation_system_t, align 8
  %6 = bitcast %struct.aom_equation_system_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 32, i1 false)
  %7 = getelementptr inbounds %struct.aom_flat_block_finder_t, %struct.aom_flat_block_finder_t* %0, i64 0, i32 1
  %8 = bitcast %struct.aom_flat_block_finder_t* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 16, i1 false)
  %9 = call fastcc i32 @equation_system_init(%struct.aom_equation_system_t* nonnull %5, i32 3)
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %4
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %13 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.2, i64 0, i64 0), i32 %1) #10
  br label %163

14:                                               ; preds = %4
  %15 = tail call i8* @aom_malloc(i64 72) #9
  %16 = mul i32 %1, 3
  %17 = mul i32 %16, %1
  %18 = zext i32 %17 to i64
  %19 = shl nuw nsw i64 %18, 3
  %20 = tail call i8* @aom_malloc(i64 %19) #9
  %21 = bitcast i8* %20 to double*
  %22 = icmp eq i8* %15, null
  %23 = icmp eq i8* %20, null
  %24 = or i1 %22, %23
  br i1 %24, label %25, label %36

25:                                               ; preds = %14
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %27 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.3, i64 0, i64 0), i32 %1) #10
  tail call void @aom_free(i8* %15) #9
  tail call void @aom_free(i8* %20) #9
  %28 = bitcast %struct.aom_equation_system_t* %5 to i8**
  %29 = load i8*, i8** %28, align 8
  tail call void @aom_free(i8* %29) #9
  %30 = getelementptr inbounds %struct.aom_equation_system_t, %struct.aom_equation_system_t* %5, i64 0, i32 1
  %31 = bitcast double** %30 to i8**
  %32 = load i8*, i8** %31, align 8
  tail call void @aom_free(i8* %32) #9
  %33 = getelementptr inbounds %struct.aom_equation_system_t, %struct.aom_equation_system_t* %5, i64 0, i32 2
  %34 = bitcast double** %33 to i8**
  %35 = load i8*, i8** %34, align 8
  tail call void @aom_free(i8* %35) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 32, i1 false) #9
  br label %163

36:                                               ; preds = %14
  %37 = bitcast double** %7 to i8**
  store i8* %20, i8** %37, align 8
  %38 = bitcast %struct.aom_flat_block_finder_t* %0 to i8**
  store i8* %15, i8** %38, align 8
  %39 = getelementptr inbounds %struct.aom_flat_block_finder_t, %struct.aom_flat_block_finder_t* %0, i64 0, i32 3
  store i32 %1, i32* %39, align 4
  %40 = shl nsw i32 -1, %2
  %41 = xor i32 %40, -1
  %42 = sitofp i32 %41 to double
  %43 = getelementptr inbounds %struct.aom_flat_block_finder_t, %struct.aom_flat_block_finder_t* %0, i64 0, i32 4
  store double %42, double* %43, align 8
  %44 = getelementptr inbounds %struct.aom_flat_block_finder_t, %struct.aom_flat_block_finder_t* %0, i64 0, i32 5
  store i32 %3, i32* %44, align 8
  %45 = icmp sgt i32 %1, 0
  br i1 %45, label %49, label %46

46:                                               ; preds = %36
  %47 = bitcast %struct.aom_equation_system_t* %5 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %69

49:                                               ; preds = %36
  %50 = sitofp i32 %1 to double
  %51 = fmul double %50, 5.000000e-01
  %52 = getelementptr inbounds %struct.aom_equation_system_t, %struct.aom_equation_system_t* %5, i64 0, i32 0
  %53 = load double*, double** %52, align 8
  %54 = sext i32 %1 to i64
  %55 = zext i32 %1 to i64
  %56 = bitcast double* %53 to i8*
  %57 = getelementptr inbounds double, double* %53, i64 2
  %58 = getelementptr inbounds double, double* %53, i64 4
  %59 = getelementptr inbounds double, double* %53, i64 6
  %60 = getelementptr inbounds double, double* %53, i64 8
  %61 = bitcast double* %53 to <2 x double>*
  %62 = bitcast double* %53 to <2 x double>*
  %63 = bitcast double* %57 to <2 x double>*
  %64 = bitcast double* %57 to <2 x double>*
  %65 = bitcast double* %58 to <2 x double>*
  %66 = bitcast double* %58 to <2 x double>*
  %67 = bitcast double* %59 to <2 x double>*
  %68 = bitcast double* %59 to <2 x double>*
  br label %117

69:                                               ; preds = %160, %46
  %70 = phi i8* [ %48, %46 ], [ %56, %160 ]
  %71 = getelementptr inbounds %struct.aom_equation_system_t, %struct.aom_equation_system_t* %5, i64 0, i32 1
  %72 = bitcast double** %71 to i8**
  %73 = getelementptr inbounds %struct.aom_equation_system_t, %struct.aom_equation_system_t* %5, i64 0, i32 2
  %74 = load i8*, i8** %72, align 8
  %75 = getelementptr inbounds i8, i8* %74, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %75, i8 0, i64 16, i1 false)
  %76 = bitcast i8* %74 to double*
  store double 1.000000e+00, double* %76, align 8
  %77 = call fastcc i32 @equation_system_solve(%struct.aom_equation_system_t* nonnull %5)
  %78 = load double*, double** %73, align 8
  %79 = bitcast double* %78 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = bitcast i8* %15 to i64*
  store i64 %80, i64* %81, align 8
  %82 = getelementptr inbounds double, double* %78, i64 1
  %83 = bitcast double* %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds i8, i8* %15, i64 24
  %86 = bitcast i8* %85 to i64*
  store i64 %84, i64* %86, align 8
  %87 = getelementptr inbounds double, double* %78, i64 2
  %88 = bitcast double* %87 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = getelementptr inbounds i8, i8* %15, i64 48
  %91 = bitcast i8* %90 to i64*
  store i64 %89, i64* %91, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %74, i8 0, i64 24, i1 false)
  %92 = getelementptr inbounds i8, i8* %74, i64 8
  %93 = bitcast i8* %92 to double*
  store double 1.000000e+00, double* %93, align 8
  %94 = call fastcc i32 @equation_system_solve(%struct.aom_equation_system_t* nonnull %5)
  %95 = load i64, i64* %79, align 8
  %96 = getelementptr inbounds i8, i8* %15, i64 8
  %97 = bitcast i8* %96 to i64*
  store i64 %95, i64* %97, align 8
  %98 = load i64, i64* %83, align 8
  %99 = getelementptr inbounds i8, i8* %15, i64 32
  %100 = bitcast i8* %99 to i64*
  store i64 %98, i64* %100, align 8
  %101 = load i64, i64* %88, align 8
  %102 = getelementptr inbounds i8, i8* %15, i64 56
  %103 = bitcast i8* %102 to i64*
  store i64 %101, i64* %103, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %74, i8 0, i64 16, i1 false)
  %104 = getelementptr inbounds i8, i8* %74, i64 16
  %105 = bitcast i8* %104 to double*
  store double 1.000000e+00, double* %105, align 8
  %106 = call fastcc i32 @equation_system_solve(%struct.aom_equation_system_t* nonnull %5)
  %107 = load i64, i64* %79, align 8
  %108 = getelementptr inbounds i8, i8* %15, i64 16
  %109 = bitcast i8* %108 to i64*
  store i64 %107, i64* %109, align 8
  %110 = load i64, i64* %83, align 8
  %111 = getelementptr inbounds i8, i8* %15, i64 40
  %112 = bitcast i8* %111 to i64*
  store i64 %110, i64* %112, align 8
  %113 = load i64, i64* %88, align 8
  %114 = getelementptr inbounds i8, i8* %15, i64 64
  %115 = bitcast i8* %114 to i64*
  store i64 %113, i64* %115, align 8
  tail call void @aom_free(i8* %70) #9
  tail call void @aom_free(i8* %74) #9
  %116 = bitcast double* %78 to i8*
  tail call void @aom_free(i8* %116) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 32, i1 false) #9
  br label %163

117:                                              ; preds = %49, %160
  %118 = phi i64 [ 0, %49 ], [ %161, %160 ]
  %119 = trunc i64 %118 to i32
  %120 = sitofp i32 %119 to double
  %121 = fsub double %120, %51
  %122 = fdiv double %121, %51
  %123 = mul nsw i64 %118, %54
  %124 = fmul double %122, %122
  %125 = insertelement <2 x double> undef, double %124, i32 0
  %126 = insertelement <2 x double> undef, double %122, i32 0
  %127 = insertelement <2 x double> undef, double %122, i32 0
  br label %128

128:                                              ; preds = %128, %117
  %129 = phi i64 [ 0, %117 ], [ %158, %128 ]
  %130 = trunc i64 %129 to i32
  %131 = sitofp i32 %130 to double
  %132 = fsub double %131, %51
  %133 = fdiv double %132, %51
  %134 = add nsw i64 %129, %123
  %135 = mul nsw i64 %134, 3
  %136 = getelementptr inbounds double, double* %21, i64 %135
  store double %122, double* %136, align 8
  %137 = add nsw i64 %135, 1
  %138 = getelementptr inbounds double, double* %21, i64 %137
  store double %133, double* %138, align 8
  %139 = add nsw i64 %135, 2
  %140 = getelementptr inbounds double, double* %21, i64 %139
  store double 1.000000e+00, double* %140, align 8
  %141 = fmul double %122, %133
  %142 = load <2 x double>, <2 x double>* %61, align 8
  %143 = insertelement <2 x double> %125, double %141, i32 1
  %144 = fadd <2 x double> %143, %142
  store <2 x double> %144, <2 x double>* %62, align 8
  %145 = load <2 x double>, <2 x double>* %63, align 8
  %146 = insertelement <2 x double> %126, double %141, i32 1
  %147 = fadd <2 x double> %146, %145
  store <2 x double> %147, <2 x double>* %64, align 8
  %148 = fmul double %133, %133
  %149 = load <2 x double>, <2 x double>* %65, align 8
  %150 = insertelement <2 x double> undef, double %148, i32 0
  %151 = insertelement <2 x double> %150, double %133, i32 1
  %152 = fadd <2 x double> %151, %149
  store <2 x double> %152, <2 x double>* %66, align 8
  %153 = load <2 x double>, <2 x double>* %67, align 8
  %154 = insertelement <2 x double> %127, double %133, i32 1
  %155 = fadd <2 x double> %154, %153
  store <2 x double> %155, <2 x double>* %68, align 8
  %156 = load double, double* %60, align 8
  %157 = fadd double %156, 1.000000e+00
  store double %157, double* %60, align 8
  %158 = add nuw nsw i64 %129, 1
  %159 = icmp eq i64 %158, %55
  br i1 %159, label %160, label %128

160:                                              ; preds = %128
  %161 = add nuw nsw i64 %118, 1
  %162 = icmp eq i64 %161, %55
  br i1 %162, label %69, label %117

163:                                              ; preds = %69, %25, %11
  %164 = phi i32 [ 0, %25 ], [ 1, %69 ], [ 0, %11 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #9
  ret i32 %164
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_flat_block_finder_free(%struct.aom_flat_block_finder_t*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.aom_flat_block_finder_t* %0, null
  br i1 %2, label %10, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.aom_flat_block_finder_t, %struct.aom_flat_block_finder_t* %0, i64 0, i32 1
  %5 = bitcast double** %4 to i8**
  %6 = load i8*, i8** %5, align 8
  tail call void @aom_free(i8* %6) #9
  %7 = bitcast %struct.aom_flat_block_finder_t* %0 to i8**
  %8 = load i8*, i8** %7, align 8
  tail call void @aom_free(i8* %8) #9
  %9 = bitcast %struct.aom_flat_block_finder_t* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 40, i1 false)
  br label %10

10:                                               ; preds = %1, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_flat_block_finder_extract_block(%struct.aom_flat_block_finder_t* nocapture readonly, i8* nocapture readonly, i32, i32, i32, i32, i32, double* nocapture, double* nocapture) local_unnamed_addr #0 {
  %10 = alloca [3 x double], align 16
  %11 = getelementptr inbounds %struct.aom_flat_block_finder_t, %struct.aom_flat_block_finder_t* %0, i64 0, i32 3
  %12 = load i32, i32* %11, align 4
  %13 = mul i32 %12, %12
  %14 = getelementptr inbounds %struct.aom_flat_block_finder_t, %struct.aom_flat_block_finder_t* %0, i64 0, i32 1
  %15 = load double*, double** %14, align 8
  %16 = getelementptr inbounds %struct.aom_flat_block_finder_t, %struct.aom_flat_block_finder_t* %0, i64 0, i32 0
  %17 = load double*, double** %16, align 8
  %18 = bitcast [3 x double]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #9
  %19 = getelementptr inbounds [3 x double], [3 x double]* %10, i64 0, i64 2
  %20 = bitcast [3 x double]* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -1, i64 24, i1 false)
  %21 = getelementptr inbounds %struct.aom_flat_block_finder_t, %struct.aom_flat_block_finder_t* %0, i64 0, i32 5
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %36

24:                                               ; preds = %9
  %25 = icmp sgt i32 %12, 0
  br i1 %25, label %26, label %113

26:                                               ; preds = %24
  %27 = add nsw i32 %3, -1
  %28 = add nsw i32 %2, -1
  %29 = getelementptr inbounds %struct.aom_flat_block_finder_t, %struct.aom_flat_block_finder_t* %0, i64 0, i32 4
  %30 = sext i32 %5 to i64
  %31 = sext i32 %28 to i64
  %32 = sext i32 %12 to i64
  %33 = sext i32 %6 to i64
  %34 = sext i32 %27 to i64
  %35 = zext i32 %12 to i64
  br label %81

36:                                               ; preds = %9
  %37 = bitcast i8* %1 to i16*
  %38 = icmp sgt i32 %12, 0
  br i1 %38, label %39, label %113

39:                                               ; preds = %36
  %40 = add nsw i32 %3, -1
  %41 = add nsw i32 %2, -1
  %42 = getelementptr inbounds %struct.aom_flat_block_finder_t, %struct.aom_flat_block_finder_t* %0, i64 0, i32 4
  %43 = sext i32 %5 to i64
  %44 = sext i32 %41 to i64
  %45 = sext i32 %12 to i64
  %46 = sext i32 %6 to i64
  %47 = sext i32 %40 to i64
  %48 = zext i32 %12 to i64
  br label %49

49:                                               ; preds = %39, %78
  %50 = phi i64 [ 0, %39 ], [ %79, %78 ]
  %51 = add nsw i64 %50, %46
  %52 = icmp slt i64 %51, 0
  %53 = icmp sgt i64 %51, %47
  %54 = trunc i64 %51 to i32
  %55 = select i1 %53, i32 %40, i32 %54
  %56 = select i1 %52, i32 0, i32 %55
  %57 = mul nsw i32 %56, %4
  %58 = mul nsw i64 %50, %45
  br label %59

59:                                               ; preds = %59, %49
  %60 = phi i64 [ 0, %49 ], [ %76, %59 ]
  %61 = add nsw i64 %60, %43
  %62 = icmp slt i64 %61, 0
  %63 = icmp sgt i64 %61, %44
  %64 = trunc i64 %61 to i32
  %65 = select i1 %63, i32 %41, i32 %64
  %66 = select i1 %62, i32 0, i32 %65
  %67 = add nsw i32 %66, %57
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i16, i16* %37, i64 %68
  %70 = load i16, i16* %69, align 2
  %71 = uitofp i16 %70 to double
  %72 = load double, double* %42, align 8
  %73 = fdiv double %71, %72
  %74 = add nsw i64 %60, %58
  %75 = getelementptr inbounds double, double* %8, i64 %74
  store double %73, double* %75, align 8
  %76 = add nuw nsw i64 %60, 1
  %77 = icmp eq i64 %76, %48
  br i1 %77, label %78, label %59

78:                                               ; preds = %59
  %79 = add nuw nsw i64 %50, 1
  %80 = icmp eq i64 %79, %48
  br i1 %80, label %113, label %49

81:                                               ; preds = %26, %110
  %82 = phi i64 [ 0, %26 ], [ %111, %110 ]
  %83 = add nsw i64 %82, %33
  %84 = icmp slt i64 %83, 0
  %85 = icmp sgt i64 %83, %34
  %86 = trunc i64 %83 to i32
  %87 = select i1 %85, i32 %27, i32 %86
  %88 = select i1 %84, i32 0, i32 %87
  %89 = mul nsw i32 %88, %4
  %90 = mul nsw i64 %82, %32
  br label %91

91:                                               ; preds = %91, %81
  %92 = phi i64 [ 0, %81 ], [ %108, %91 ]
  %93 = add nsw i64 %92, %30
  %94 = icmp slt i64 %93, 0
  %95 = icmp sgt i64 %93, %31
  %96 = trunc i64 %93 to i32
  %97 = select i1 %95, i32 %28, i32 %96
  %98 = select i1 %94, i32 0, i32 %97
  %99 = add nsw i32 %98, %89
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds i8, i8* %1, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = uitofp i8 %102 to double
  %104 = load double, double* %29, align 8
  %105 = fdiv double %103, %104
  %106 = add nsw i64 %92, %90
  %107 = getelementptr inbounds double, double* %8, i64 %106
  store double %105, double* %107, align 8
  %108 = add nuw nsw i64 %92, 1
  %109 = icmp eq i64 %108, %35
  br i1 %109, label %110, label %91

110:                                              ; preds = %91
  %111 = add nuw nsw i64 %82, 1
  %112 = icmp eq i64 %111, %35
  br i1 %112, label %113, label %81

113:                                              ; preds = %78, %110, %36, %24
  %114 = icmp ne i32 %13, 0
  %115 = zext i32 %13 to i64
  br i1 %114, label %116, label %419

116:                                              ; preds = %113
  %117 = add nsw i64 %115, -1
  %118 = and i64 %115, 3
  %119 = icmp ult i64 %117, 3
  br i1 %119, label %160, label %120

120:                                              ; preds = %116
  %121 = sub nsw i64 %115, %118
  br label %122

122:                                              ; preds = %122, %120
  %123 = phi i64 [ 0, %120 ], [ %157, %122 ]
  %124 = phi double [ 0.000000e+00, %120 ], [ %156, %122 ]
  %125 = phi i64 [ %121, %120 ], [ %158, %122 ]
  %126 = getelementptr inbounds double, double* %8, i64 %123
  %127 = load double, double* %126, align 8
  %128 = mul nuw nsw i64 %123, 3
  %129 = getelementptr inbounds double, double* %15, i64 %128
  %130 = load double, double* %129, align 8
  %131 = fmul double %127, %130
  %132 = fadd double %124, %131
  %133 = or i64 %123, 1
  %134 = getelementptr inbounds double, double* %8, i64 %133
  %135 = load double, double* %134, align 8
  %136 = mul nuw nsw i64 %133, 3
  %137 = getelementptr inbounds double, double* %15, i64 %136
  %138 = load double, double* %137, align 8
  %139 = fmul double %135, %138
  %140 = fadd double %132, %139
  %141 = or i64 %123, 2
  %142 = getelementptr inbounds double, double* %8, i64 %141
  %143 = load double, double* %142, align 8
  %144 = mul nuw nsw i64 %141, 3
  %145 = getelementptr inbounds double, double* %15, i64 %144
  %146 = load double, double* %145, align 8
  %147 = fmul double %143, %146
  %148 = fadd double %140, %147
  %149 = or i64 %123, 3
  %150 = getelementptr inbounds double, double* %8, i64 %149
  %151 = load double, double* %150, align 8
  %152 = mul nuw nsw i64 %149, 3
  %153 = getelementptr inbounds double, double* %15, i64 %152
  %154 = load double, double* %153, align 8
  %155 = fmul double %151, %154
  %156 = fadd double %148, %155
  %157 = add nuw nsw i64 %123, 4
  %158 = add i64 %125, -4
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %160, label %122

160:                                              ; preds = %122, %116
  %161 = phi double [ undef, %116 ], [ %156, %122 ]
  %162 = phi i64 [ 0, %116 ], [ %157, %122 ]
  %163 = phi double [ 0.000000e+00, %116 ], [ %156, %122 ]
  %164 = icmp eq i64 %118, 0
  br i1 %164, label %179, label %165

165:                                              ; preds = %160, %165
  %166 = phi i64 [ %176, %165 ], [ %162, %160 ]
  %167 = phi double [ %175, %165 ], [ %163, %160 ]
  %168 = phi i64 [ %177, %165 ], [ %118, %160 ]
  %169 = getelementptr inbounds double, double* %8, i64 %166
  %170 = load double, double* %169, align 8
  %171 = mul nuw nsw i64 %166, 3
  %172 = getelementptr inbounds double, double* %15, i64 %171
  %173 = load double, double* %172, align 8
  %174 = fmul double %170, %173
  %175 = fadd double %167, %174
  %176 = add nuw nsw i64 %166, 1
  %177 = add i64 %168, -1
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %179, label %165, !llvm.loop !20

179:                                              ; preds = %165, %160
  %180 = phi double [ %161, %160 ], [ %175, %165 ]
  br i1 %114, label %181, label %419

181:                                              ; preds = %179
  %182 = and i64 %115, 1
  %183 = icmp eq i32 %13, 1
  br i1 %183, label %360, label %184

184:                                              ; preds = %181
  %185 = sub nsw i64 %115, %182
  br label %336

186:                                              ; preds = %484, %186
  %187 = phi i64 [ %206, %186 ], [ %485, %484 ]
  %188 = phi double* [ %189, %186 ], [ %486, %484 ]
  %189 = getelementptr inbounds double, double* %188, i64 1
  %190 = load double, double* %19, align 16
  %191 = mul nuw nsw i64 %187, 3
  %192 = getelementptr inbounds double, double* %15, i64 %191
  %193 = load double, double* %192, align 8
  %194 = fmul double %193, %468
  %195 = fadd double %194, 0.000000e+00
  %196 = add nuw nsw i64 %191, 1
  %197 = getelementptr inbounds double, double* %15, i64 %196
  %198 = load double, double* %197, align 8
  %199 = fmul double %198, %473
  %200 = fadd double %195, %199
  %201 = add nuw nsw i64 %191, 2
  %202 = getelementptr inbounds double, double* %15, i64 %201
  %203 = load double, double* %202, align 8
  %204 = fmul double %203, %190
  %205 = fadd double %200, %204
  store double %205, double* %189, align 8
  %206 = add nuw nsw i64 %187, 1
  %207 = icmp eq i64 %206, %115
  br i1 %207, label %208, label %186, !llvm.loop !21

208:                                              ; preds = %186, %534
  %209 = icmp eq i32 %13, 0
  br i1 %209, label %335, label %210

210:                                              ; preds = %466, %208
  %211 = icmp ult i32 %13, 4
  br i1 %211, label %288, label %212

212:                                              ; preds = %210
  %213 = getelementptr double, double* %8, i64 %115
  %214 = getelementptr double, double* %7, i64 %115
  %215 = icmp ugt double* %214, %8
  %216 = icmp ugt double* %213, %7
  %217 = and i1 %215, %216
  br i1 %217, label %288, label %218

218:                                              ; preds = %212
  %219 = and i64 %115, 4294967292
  %220 = add nsw i64 %219, -4
  %221 = lshr exact i64 %220, 2
  %222 = add nuw nsw i64 %221, 1
  %223 = and i64 %222, 1
  %224 = icmp eq i64 %220, 0
  br i1 %224, label %266, label %225

225:                                              ; preds = %218
  %226 = sub nuw nsw i64 %222, %223
  br label %227

227:                                              ; preds = %227, %225
  %228 = phi i64 [ 0, %225 ], [ %263, %227 ]
  %229 = phi i64 [ %226, %225 ], [ %264, %227 ]
  %230 = getelementptr inbounds double, double* %7, i64 %228
  %231 = bitcast double* %230 to <2 x double>*
  %232 = load <2 x double>, <2 x double>* %231, align 8, !alias.scope !22
  %233 = getelementptr inbounds double, double* %230, i64 2
  %234 = bitcast double* %233 to <2 x double>*
  %235 = load <2 x double>, <2 x double>* %234, align 8, !alias.scope !22
  %236 = getelementptr inbounds double, double* %8, i64 %228
  %237 = bitcast double* %236 to <2 x double>*
  %238 = load <2 x double>, <2 x double>* %237, align 8, !alias.scope !25, !noalias !22
  %239 = getelementptr inbounds double, double* %236, i64 2
  %240 = bitcast double* %239 to <2 x double>*
  %241 = load <2 x double>, <2 x double>* %240, align 8, !alias.scope !25, !noalias !22
  %242 = fsub <2 x double> %238, %232
  %243 = fsub <2 x double> %241, %235
  %244 = bitcast double* %236 to <2 x double>*
  store <2 x double> %242, <2 x double>* %244, align 8, !alias.scope !25, !noalias !22
  %245 = bitcast double* %239 to <2 x double>*
  store <2 x double> %243, <2 x double>* %245, align 8, !alias.scope !25, !noalias !22
  %246 = or i64 %228, 4
  %247 = getelementptr inbounds double, double* %7, i64 %246
  %248 = bitcast double* %247 to <2 x double>*
  %249 = load <2 x double>, <2 x double>* %248, align 8, !alias.scope !22
  %250 = getelementptr inbounds double, double* %247, i64 2
  %251 = bitcast double* %250 to <2 x double>*
  %252 = load <2 x double>, <2 x double>* %251, align 8, !alias.scope !22
  %253 = getelementptr inbounds double, double* %8, i64 %246
  %254 = bitcast double* %253 to <2 x double>*
  %255 = load <2 x double>, <2 x double>* %254, align 8, !alias.scope !25, !noalias !22
  %256 = getelementptr inbounds double, double* %253, i64 2
  %257 = bitcast double* %256 to <2 x double>*
  %258 = load <2 x double>, <2 x double>* %257, align 8, !alias.scope !25, !noalias !22
  %259 = fsub <2 x double> %255, %249
  %260 = fsub <2 x double> %258, %252
  %261 = bitcast double* %253 to <2 x double>*
  store <2 x double> %259, <2 x double>* %261, align 8, !alias.scope !25, !noalias !22
  %262 = bitcast double* %256 to <2 x double>*
  store <2 x double> %260, <2 x double>* %262, align 8, !alias.scope !25, !noalias !22
  %263 = add i64 %228, 8
  %264 = add i64 %229, -2
  %265 = icmp eq i64 %264, 0
  br i1 %265, label %266, label %227, !llvm.loop !27

266:                                              ; preds = %227, %218
  %267 = phi i64 [ 0, %218 ], [ %263, %227 ]
  %268 = icmp eq i64 %223, 0
  br i1 %268, label %286, label %269

269:                                              ; preds = %266
  %270 = getelementptr inbounds double, double* %7, i64 %267
  %271 = bitcast double* %270 to <2 x double>*
  %272 = load <2 x double>, <2 x double>* %271, align 8, !alias.scope !22
  %273 = getelementptr inbounds double, double* %270, i64 2
  %274 = bitcast double* %273 to <2 x double>*
  %275 = load <2 x double>, <2 x double>* %274, align 8, !alias.scope !22
  %276 = getelementptr inbounds double, double* %8, i64 %267
  %277 = bitcast double* %276 to <2 x double>*
  %278 = load <2 x double>, <2 x double>* %277, align 8, !alias.scope !25, !noalias !22
  %279 = getelementptr inbounds double, double* %276, i64 2
  %280 = bitcast double* %279 to <2 x double>*
  %281 = load <2 x double>, <2 x double>* %280, align 8, !alias.scope !25, !noalias !22
  %282 = fsub <2 x double> %278, %272
  %283 = fsub <2 x double> %281, %275
  %284 = bitcast double* %276 to <2 x double>*
  store <2 x double> %282, <2 x double>* %284, align 8, !alias.scope !25, !noalias !22
  %285 = bitcast double* %279 to <2 x double>*
  store <2 x double> %283, <2 x double>* %285, align 8, !alias.scope !25, !noalias !22
  br label %286

286:                                              ; preds = %266, %269
  %287 = icmp eq i64 %219, %115
  br i1 %287, label %335, label %288

288:                                              ; preds = %286, %212, %210
  %289 = phi i64 [ 0, %212 ], [ 0, %210 ], [ %219, %286 ]
  %290 = xor i64 %289, -1
  %291 = add nsw i64 %290, %115
  %292 = and i64 %115, 3
  %293 = icmp eq i64 %292, 0
  br i1 %293, label %305, label %294

294:                                              ; preds = %288, %294
  %295 = phi i64 [ %302, %294 ], [ %289, %288 ]
  %296 = phi i64 [ %303, %294 ], [ %292, %288 ]
  %297 = getelementptr inbounds double, double* %7, i64 %295
  %298 = load double, double* %297, align 8
  %299 = getelementptr inbounds double, double* %8, i64 %295
  %300 = load double, double* %299, align 8
  %301 = fsub double %300, %298
  store double %301, double* %299, align 8
  %302 = add nuw nsw i64 %295, 1
  %303 = add i64 %296, -1
  %304 = icmp eq i64 %303, 0
  br i1 %304, label %305, label %294, !llvm.loop !28

305:                                              ; preds = %294, %288
  %306 = phi i64 [ %289, %288 ], [ %302, %294 ]
  %307 = icmp ult i64 %291, 3
  br i1 %307, label %335, label %308

308:                                              ; preds = %305, %308
  %309 = phi i64 [ %333, %308 ], [ %306, %305 ]
  %310 = getelementptr inbounds double, double* %7, i64 %309
  %311 = load double, double* %310, align 8
  %312 = getelementptr inbounds double, double* %8, i64 %309
  %313 = load double, double* %312, align 8
  %314 = fsub double %313, %311
  store double %314, double* %312, align 8
  %315 = add nuw nsw i64 %309, 1
  %316 = getelementptr inbounds double, double* %7, i64 %315
  %317 = load double, double* %316, align 8
  %318 = getelementptr inbounds double, double* %8, i64 %315
  %319 = load double, double* %318, align 8
  %320 = fsub double %319, %317
  store double %320, double* %318, align 8
  %321 = add nuw nsw i64 %309, 2
  %322 = getelementptr inbounds double, double* %7, i64 %321
  %323 = load double, double* %322, align 8
  %324 = getelementptr inbounds double, double* %8, i64 %321
  %325 = load double, double* %324, align 8
  %326 = fsub double %325, %323
  store double %326, double* %324, align 8
  %327 = add nuw nsw i64 %309, 3
  %328 = getelementptr inbounds double, double* %7, i64 %327
  %329 = load double, double* %328, align 8
  %330 = getelementptr inbounds double, double* %8, i64 %327
  %331 = load double, double* %330, align 8
  %332 = fsub double %331, %329
  store double %332, double* %330, align 8
  %333 = add nuw nsw i64 %309, 4
  %334 = icmp eq i64 %333, %115
  br i1 %334, label %335, label %308, !llvm.loop !29

335:                                              ; preds = %305, %308, %286, %419, %208
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #9
  ret void

336:                                              ; preds = %336, %184
  %337 = phi i64 [ 0, %184 ], [ %357, %336 ]
  %338 = phi double [ 0.000000e+00, %184 ], [ %356, %336 ]
  %339 = phi i64 [ %185, %184 ], [ %358, %336 ]
  %340 = getelementptr inbounds double, double* %8, i64 %337
  %341 = load double, double* %340, align 8
  %342 = mul nuw nsw i64 %337, 3
  %343 = or i64 %342, 1
  %344 = getelementptr inbounds double, double* %15, i64 %343
  %345 = load double, double* %344, align 8
  %346 = fmul double %341, %345
  %347 = fadd double %338, %346
  %348 = or i64 %337, 1
  %349 = getelementptr inbounds double, double* %8, i64 %348
  %350 = load double, double* %349, align 8
  %351 = mul nuw nsw i64 %348, 3
  %352 = add nuw nsw i64 %351, 1
  %353 = getelementptr inbounds double, double* %15, i64 %352
  %354 = load double, double* %353, align 8
  %355 = fmul double %350, %354
  %356 = fadd double %347, %355
  %357 = add nuw nsw i64 %337, 2
  %358 = add i64 %339, -2
  %359 = icmp eq i64 %358, 0
  br i1 %359, label %360, label %336

360:                                              ; preds = %336, %181
  %361 = phi double [ undef, %181 ], [ %356, %336 ]
  %362 = phi i64 [ 0, %181 ], [ %357, %336 ]
  %363 = phi double [ 0.000000e+00, %181 ], [ %356, %336 ]
  %364 = icmp eq i64 %182, 0
  br i1 %364, label %374, label %365

365:                                              ; preds = %360
  %366 = getelementptr inbounds double, double* %8, i64 %362
  %367 = load double, double* %366, align 8
  %368 = mul nuw nsw i64 %362, 3
  %369 = add nuw nsw i64 %368, 1
  %370 = getelementptr inbounds double, double* %15, i64 %369
  %371 = load double, double* %370, align 8
  %372 = fmul double %367, %371
  %373 = fadd double %363, %372
  br label %374

374:                                              ; preds = %360, %365
  %375 = phi double [ %361, %360 ], [ %373, %365 ]
  br i1 %114, label %376, label %419

376:                                              ; preds = %374
  %377 = and i64 %115, 1
  %378 = icmp eq i32 %13, 1
  br i1 %378, label %405, label %379

379:                                              ; preds = %376
  %380 = sub nsw i64 %115, %377
  br label %381

381:                                              ; preds = %381, %379
  %382 = phi i64 [ 0, %379 ], [ %402, %381 ]
  %383 = phi double [ 0.000000e+00, %379 ], [ %401, %381 ]
  %384 = phi i64 [ %380, %379 ], [ %403, %381 ]
  %385 = getelementptr inbounds double, double* %8, i64 %382
  %386 = load double, double* %385, align 8
  %387 = mul nuw nsw i64 %382, 3
  %388 = add nuw nsw i64 %387, 2
  %389 = getelementptr inbounds double, double* %15, i64 %388
  %390 = load double, double* %389, align 8
  %391 = fmul double %386, %390
  %392 = fadd double %383, %391
  %393 = or i64 %382, 1
  %394 = getelementptr inbounds double, double* %8, i64 %393
  %395 = load double, double* %394, align 8
  %396 = mul nuw nsw i64 %393, 3
  %397 = add nuw nsw i64 %396, 2
  %398 = getelementptr inbounds double, double* %15, i64 %397
  %399 = load double, double* %398, align 8
  %400 = fmul double %395, %399
  %401 = fadd double %392, %400
  %402 = add nuw nsw i64 %382, 2
  %403 = add i64 %384, -2
  %404 = icmp eq i64 %403, 0
  br i1 %404, label %405, label %381

405:                                              ; preds = %381, %376
  %406 = phi double [ undef, %376 ], [ %401, %381 ]
  %407 = phi i64 [ 0, %376 ], [ %402, %381 ]
  %408 = phi double [ 0.000000e+00, %376 ], [ %401, %381 ]
  %409 = icmp eq i64 %377, 0
  br i1 %409, label %419, label %410

410:                                              ; preds = %405
  %411 = getelementptr inbounds double, double* %8, i64 %407
  %412 = load double, double* %411, align 8
  %413 = mul nuw nsw i64 %407, 3
  %414 = add nuw nsw i64 %413, 2
  %415 = getelementptr inbounds double, double* %15, i64 %414
  %416 = load double, double* %415, align 8
  %417 = fmul double %412, %416
  %418 = fadd double %408, %417
  br label %419

419:                                              ; preds = %410, %405, %113, %179, %374
  %420 = phi double [ %375, %374 ], [ 0.000000e+00, %179 ], [ 0.000000e+00, %113 ], [ %375, %405 ], [ %375, %410 ]
  %421 = phi double [ %180, %374 ], [ %180, %179 ], [ 0.000000e+00, %113 ], [ %180, %405 ], [ %180, %410 ]
  %422 = phi double [ 0.000000e+00, %374 ], [ 0.000000e+00, %179 ], [ 0.000000e+00, %113 ], [ %406, %405 ], [ %418, %410 ]
  %423 = load double, double* %17, align 8
  %424 = getelementptr inbounds double, double* %17, i64 1
  %425 = load double, double* %424, align 8
  %426 = getelementptr inbounds double, double* %17, i64 2
  %427 = load double, double* %426, align 8
  %428 = getelementptr inbounds double, double* %17, i64 3
  %429 = load double, double* %428, align 8
  %430 = insertelement <2 x double> undef, double %423, i32 0
  %431 = insertelement <2 x double> %430, double %429, i32 1
  %432 = insertelement <2 x double> undef, double %421, i32 0
  %433 = shufflevector <2 x double> %432, <2 x double> undef, <2 x i32> zeroinitializer
  %434 = fmul <2 x double> %431, %433
  %435 = fadd <2 x double> %434, zeroinitializer
  %436 = getelementptr inbounds double, double* %17, i64 4
  %437 = load double, double* %436, align 8
  %438 = insertelement <2 x double> undef, double %425, i32 0
  %439 = insertelement <2 x double> %438, double %437, i32 1
  %440 = insertelement <2 x double> undef, double %420, i32 0
  %441 = shufflevector <2 x double> %440, <2 x double> undef, <2 x i32> zeroinitializer
  %442 = fmul <2 x double> %439, %441
  %443 = fadd <2 x double> %435, %442
  %444 = getelementptr inbounds double, double* %17, i64 5
  %445 = load double, double* %444, align 8
  %446 = insertelement <2 x double> undef, double %427, i32 0
  %447 = insertelement <2 x double> %446, double %445, i32 1
  %448 = insertelement <2 x double> undef, double %422, i32 0
  %449 = shufflevector <2 x double> %448, <2 x double> undef, <2 x i32> zeroinitializer
  %450 = fmul <2 x double> %447, %449
  %451 = fadd <2 x double> %443, %450
  %452 = getelementptr inbounds [3 x double], [3 x double]* %10, i64 0, i64 2
  %453 = bitcast [3 x double]* %10 to <2 x double>*
  store <2 x double> %451, <2 x double>* %453, align 16
  %454 = getelementptr inbounds double, double* %17, i64 6
  %455 = load double, double* %454, align 8
  %456 = fmul double %455, %421
  %457 = fadd double %456, 0.000000e+00
  %458 = getelementptr inbounds double, double* %17, i64 7
  %459 = load double, double* %458, align 8
  %460 = fmul double %459, %420
  %461 = fadd double %457, %460
  %462 = getelementptr inbounds double, double* %17, i64 8
  %463 = load double, double* %462, align 8
  %464 = fmul double %463, %422
  %465 = fadd double %461, %464
  store double %465, double* %452, align 16
  br i1 %114, label %466, label %335

466:                                              ; preds = %419
  %467 = load double, double* %15, align 8
  %468 = extractelement <2 x double> %451, i32 0
  %469 = fmul double %467, %468
  %470 = fadd double %469, 0.000000e+00
  %471 = getelementptr inbounds double, double* %15, i64 1
  %472 = load double, double* %471, align 8
  %473 = extractelement <2 x double> %451, i32 1
  %474 = fmul double %472, %473
  %475 = fadd double %470, %474
  %476 = getelementptr inbounds double, double* %15, i64 2
  %477 = load double, double* %476, align 8
  %478 = fmul double %477, %465
  %479 = fadd double %475, %478
  store double %479, double* %7, align 8
  %480 = icmp eq i32 %13, 1
  br i1 %480, label %210, label %481

481:                                              ; preds = %466
  %482 = add nsw i64 %115, -1
  %483 = icmp ult i64 %482, 2
  br i1 %483, label %484, label %487

484:                                              ; preds = %534, %487, %481
  %485 = phi i64 [ 1, %487 ], [ 1, %481 ], [ %506, %534 ]
  %486 = phi double* [ %7, %487 ], [ %7, %481 ], [ %507, %534 ]
  br label %186

487:                                              ; preds = %481
  %488 = getelementptr double, double* %7, i64 1
  %489 = bitcast double* %488 to i8*
  %490 = getelementptr double, double* %7, i64 %115
  %491 = getelementptr inbounds [3 x double], [3 x double]* %10, i64 0, i64 2
  %492 = bitcast double* %491 to i8*
  %493 = getelementptr inbounds i8, i8* %492, i64 1
  %494 = getelementptr double, double* %15, i64 3
  %495 = mul nuw nsw i64 %115, 3
  %496 = getelementptr double, double* %15, i64 %495
  %497 = icmp ugt i8* %493, %489
  %498 = icmp ult double* %19, %490
  %499 = and i1 %497, %498
  %500 = icmp ult double* %488, %496
  %501 = icmp ult double* %494, %490
  %502 = and i1 %500, %501
  %503 = or i1 %499, %502
  br i1 %503, label %484, label %504

504:                                              ; preds = %487
  %505 = and i64 %482, -2
  %506 = or i64 %482, 1
  %507 = getelementptr double, double* %7, i64 %505
  %508 = shufflevector <2 x double> %451, <2 x double> undef, <2 x i32> zeroinitializer
  %509 = shufflevector <2 x double> %451, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %510 = getelementptr double, double* %7, i64 1
  %511 = load double, double* %19, align 16, !alias.scope !30
  %512 = insertelement <2 x double> undef, double %511, i32 0
  %513 = shufflevector <2 x double> %512, <2 x double> undef, <2 x i32> zeroinitializer
  br label %514

514:                                              ; preds = %514, %504
  %515 = phi i64 [ 0, %504 ], [ %532, %514 ]
  %516 = or i64 %515, 1
  %517 = getelementptr inbounds double, double* %510, i64 %515
  %518 = mul nuw nsw i64 %516, 3
  %519 = getelementptr inbounds double, double* %15, i64 %518
  %520 = bitcast double* %519 to <6 x double>*
  %521 = load <6 x double>, <6 x double>* %520, align 8
  %522 = shufflevector <6 x double> %521, <6 x double> undef, <2 x i32> <i32 0, i32 3>
  %523 = shufflevector <6 x double> %521, <6 x double> undef, <2 x i32> <i32 1, i32 4>
  %524 = shufflevector <6 x double> %521, <6 x double> undef, <2 x i32> <i32 2, i32 5>
  %525 = fmul <2 x double> %522, %508
  %526 = fadd <2 x double> %525, zeroinitializer
  %527 = fmul <2 x double> %523, %509
  %528 = fadd <2 x double> %526, %527
  %529 = fmul <2 x double> %524, %513
  %530 = fadd <2 x double> %528, %529
  %531 = bitcast double* %517 to <2 x double>*
  store <2 x double> %530, <2 x double>* %531, align 8, !alias.scope !33, !noalias !35
  %532 = add i64 %515, 2
  %533 = icmp eq i64 %532, %505
  br i1 %533, label %534, label %514, !llvm.loop !37

534:                                              ; preds = %514
  %535 = icmp eq i64 %482, %505
  br i1 %535, label %208, label %484
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_flat_block_finder_run(%struct.aom_flat_block_finder_t* nocapture readonly, i8* nocapture readonly, i32, i32, i32, i8* nocapture) local_unnamed_addr #0 {
  %7 = getelementptr inbounds %struct.aom_flat_block_finder_t, %struct.aom_flat_block_finder_t* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 4
  %9 = mul nsw i32 %8, %8
  %10 = sitofp i32 %9 to double
  %11 = fdiv double 5.000000e-03, %10
  %12 = add i32 %8, -1
  %13 = add i32 %12, %2
  %14 = sdiv i32 %13, %8
  %15 = add i32 %12, %3
  %16 = sdiv i32 %15, %8
  %17 = zext i32 %9 to i64
  %18 = shl nuw nsw i64 %17, 3
  %19 = tail call i8* @aom_malloc(i64 %18) #9
  %20 = bitcast i8* %19 to double*
  %21 = tail call i8* @aom_malloc(i64 %18) #9
  %22 = bitcast i8* %21 to double*
  %23 = mul i32 %16, %14
  %24 = sext i32 %23 to i64
  %25 = shl nsw i64 %24, 3
  %26 = tail call i8* @aom_malloc(i64 %25) #9
  %27 = bitcast i8* %26 to %struct.index_and_score_t*
  %28 = icmp eq i8* %19, null
  %29 = icmp eq i8* %21, null
  %30 = or i1 %28, %29
  %31 = icmp eq i8* %26, null
  %32 = or i1 %30, %31
  br i1 %32, label %50, label %33

33:                                               ; preds = %6
  %34 = icmp sgt i32 %16, 0
  br i1 %34, label %35, label %184

35:                                               ; preds = %33
  %36 = icmp sgt i32 %14, 0
  %37 = icmp sgt i32 %12, 1
  %38 = add nsw i32 %8, -2
  %39 = mul nsw i32 %38, %38
  %40 = sitofp i32 %39 to double
  %41 = sext i32 %8 to i64
  %42 = sext i32 %14 to i64
  %43 = zext i32 %16 to i64
  %44 = zext i32 %14 to i64
  %45 = zext i32 %12 to i64
  %46 = insertelement <2 x double> undef, double %40, i32 0
  %47 = shufflevector <2 x double> %46, <2 x double> undef, <2 x i32> zeroinitializer
  %48 = insertelement <2 x double> undef, double %40, i32 0
  %49 = shufflevector <2 x double> %48, <2 x double> undef, <2 x i32> zeroinitializer
  br label %53

50:                                               ; preds = %6
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %52 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %51, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.4, i64 0, i64 0), i32 %9) #10
  br label %240

53:                                               ; preds = %180, %35
  %54 = phi i64 [ 0, %35 ], [ %182, %180 ]
  %55 = phi i32 [ 0, %35 ], [ %181, %180 ]
  br i1 %36, label %56, label %180

56:                                               ; preds = %53
  %57 = mul nsw i64 %54, %42
  %58 = trunc i64 %54 to i32
  %59 = mul i32 %8, %58
  br label %60

60:                                               ; preds = %111, %56
  %61 = phi i64 [ 0, %56 ], [ %178, %111 ]
  %62 = phi i32 [ %55, %56 ], [ %177, %111 ]
  %63 = trunc i64 %61 to i32
  %64 = mul i32 %8, %63
  tail call void @aom_flat_block_finder_extract_block(%struct.aom_flat_block_finder_t* %0, i8* %1, i32 %2, i32 %3, i32 %4, i32 %64, i32 %59, double* %20, double* %22)
  br i1 %37, label %65, label %111

65:                                               ; preds = %60, %108
  %66 = phi i64 [ %109, %108 ], [ 1, %60 ]
  %67 = phi double [ %101, %108 ], [ 0.000000e+00, %60 ]
  %68 = phi <2 x double> [ %98, %108 ], [ zeroinitializer, %60 ]
  %69 = phi <2 x double> [ %105, %108 ], [ zeroinitializer, %60 ]
  %70 = mul nsw i64 %66, %41
  br label %71

71:                                               ; preds = %71, %65
  %72 = phi i64 [ 1, %65 ], [ %106, %71 ]
  %73 = phi double [ %67, %65 ], [ %101, %71 ]
  %74 = phi <2 x double> [ %68, %65 ], [ %98, %71 ]
  %75 = phi <2 x double> [ %69, %65 ], [ %105, %71 ]
  %76 = add nsw i64 %72, %70
  %77 = add nsw i64 %76, 1
  %78 = getelementptr inbounds double, double* %22, i64 %77
  %79 = load double, double* %78, align 8
  %80 = add nsw i64 %76, -1
  %81 = getelementptr inbounds double, double* %22, i64 %80
  %82 = load double, double* %81, align 8
  %83 = add nsw i64 %76, %41
  %84 = getelementptr inbounds double, double* %22, i64 %83
  %85 = load double, double* %84, align 8
  %86 = sub nsw i64 %76, %41
  %87 = getelementptr inbounds double, double* %22, i64 %86
  %88 = load double, double* %87, align 8
  %89 = insertelement <2 x double> undef, double %79, i32 0
  %90 = insertelement <2 x double> %89, double %85, i32 1
  %91 = insertelement <2 x double> undef, double %82, i32 0
  %92 = insertelement <2 x double> %91, double %88, i32 1
  %93 = fsub <2 x double> %90, %92
  %94 = fmul <2 x double> %93, <double 5.000000e-01, double 5.000000e-01>
  %95 = shufflevector <2 x double> %94, <2 x double> undef, <2 x i32> zeroinitializer
  %96 = extractelement <2 x double> %94, i32 1
  %97 = fmul <2 x double> %95, %94
  %98 = fadd <2 x double> %74, %97
  %99 = getelementptr inbounds double, double* %22, i64 %76
  %100 = load double, double* %99, align 8
  %101 = fadd double %73, %100
  %102 = insertelement <2 x double> undef, double %96, i32 0
  %103 = insertelement <2 x double> %102, double %100, i32 1
  %104 = fmul <2 x double> %103, %103
  %105 = fadd <2 x double> %75, %104
  %106 = add nuw nsw i64 %72, 1
  %107 = icmp eq i64 %106, %45
  br i1 %107, label %108, label %71

108:                                              ; preds = %71
  %109 = add nuw nsw i64 %66, 1
  %110 = icmp eq i64 %109, %45
  br i1 %110, label %111, label %65

111:                                              ; preds = %108, %60
  %112 = phi double [ 0.000000e+00, %60 ], [ %101, %108 ]
  %113 = phi <2 x double> [ zeroinitializer, %60 ], [ %98, %108 ]
  %114 = phi <2 x double> [ zeroinitializer, %60 ], [ %105, %108 ]
  %115 = fdiv double %112, %40
  %116 = fdiv <2 x double> %113, %47
  %117 = fdiv <2 x double> %114, %49
  %118 = fmul double %115, %115
  %119 = extractelement <2 x double> %116, i32 0
  %120 = insertelement <2 x double> undef, double %119, i32 0
  %121 = insertelement <2 x double> %120, double %118, i32 1
  %122 = fadd <2 x double> %117, %121
  %123 = fsub <2 x double> %117, %121
  %124 = shufflevector <2 x double> %122, <2 x double> %123, <2 x i32> <i32 0, i32 3>
  %125 = shufflevector <2 x double> %117, <2 x double> %116, <2 x i32> <i32 0, i32 3>
  %126 = fmul <2 x double> %116, %125
  %127 = extractelement <2 x double> %126, i32 0
  %128 = extractelement <2 x double> %126, i32 1
  %129 = fsub double %127, %128
  %130 = extractelement <2 x double> %122, i32 0
  %131 = fmul double %130, %130
  %132 = fmul double %129, 4.000000e+00
  %133 = fsub double %131, %132
  %134 = tail call double @sqrt(double %133) #9
  %135 = fadd double %130, %134
  %136 = fmul double %135, 5.000000e-01
  %137 = tail call double @sqrt(double %133) #9
  %138 = fsub double %130, %137
  %139 = fmul double %138, 5.000000e-01
  %140 = fcmp ogt double %139, 0x3EB0C6F7A0B5ED8D
  %141 = select i1 %140, double %139, double 0x3EB0C6F7A0B5ED8D
  %142 = fdiv double %136, %141
  %143 = fcmp olt double %130, 0x3F23333333333333
  %144 = fcmp olt double %142, 1.250000e+00
  %145 = and i1 %143, %144
  %146 = fcmp olt double %136, 7.812500e-05
  %147 = and i1 %146, %145
  %148 = extractelement <2 x double> %123, i32 1
  %149 = fcmp ogt double %148, %11
  %150 = and i1 %149, %147
  %151 = zext i1 %150 to i32
  %152 = fmul double %142, -2.056000e-01
  %153 = fmul <2 x double> %124, <double 1.308700e+04, double 6.682000e+03>
  %154 = extractelement <2 x double> %153, i32 1
  %155 = fsub double %152, %154
  %156 = extractelement <2 x double> %153, i32 0
  %157 = fadd double %156, %155
  %158 = fmul double %136, 1.243400e+04
  %159 = fsub double %157, %158
  %160 = fadd double %159, 2.569400e+00
  %161 = fcmp olt double %160, -2.500000e+01
  %162 = fcmp ogt double %160, 1.000000e+02
  %163 = select i1 %162, double 1.000000e+02, double %160
  %164 = fsub double -0.000000e+00, %163
  %165 = select i1 %161, double 2.500000e+01, double %164
  %166 = tail call double @exp(double %165) #9
  %167 = fadd double %166, 1.000000e+00
  %168 = fdiv double 1.000000e+00, %167
  %169 = fptrunc double %168 to float
  %170 = sext i1 %150 to i8
  %171 = add nsw i64 %61, %57
  %172 = getelementptr inbounds i8, i8* %5, i64 %171
  store i8 %170, i8* %172, align 1
  %173 = select i1 %149, float %169, float 0.000000e+00
  %174 = getelementptr inbounds %struct.index_and_score_t, %struct.index_and_score_t* %27, i64 %171, i32 1
  store float %173, float* %174, align 4
  %175 = getelementptr inbounds %struct.index_and_score_t, %struct.index_and_score_t* %27, i64 %171, i32 0
  %176 = trunc i64 %171 to i32
  store i32 %176, i32* %175, align 4
  %177 = add nsw i32 %62, %151
  %178 = add nuw nsw i64 %61, 1
  %179 = icmp eq i64 %178, %44
  br i1 %179, label %180, label %60

180:                                              ; preds = %111, %53
  %181 = phi i32 [ %55, %53 ], [ %177, %111 ]
  %182 = add nuw nsw i64 %54, 1
  %183 = icmp eq i64 %182, %43
  br i1 %183, label %184, label %53

184:                                              ; preds = %180, %33
  %185 = phi i32 [ 0, %33 ], [ %181, %180 ]
  tail call void @qsort(i8* %26, i64 %24, i64 8, i32 (i8*, i8*)* nonnull @compare_scores) #9
  %186 = mul nsw i32 %23, 90
  %187 = sdiv i32 %186, 100
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds %struct.index_and_score_t, %struct.index_and_score_t* %27, i64 %188, i32 1
  %190 = load float, float* %189, align 4
  %191 = icmp sgt i32 %23, 0
  br i1 %191, label %192, label %240

192:                                              ; preds = %184
  %193 = zext i32 %23 to i64
  %194 = and i64 %193, 1
  %195 = icmp eq i32 %23, 1
  br i1 %195, label %221, label %196

196:                                              ; preds = %192
  %197 = sub nsw i64 %193, %194
  br label %198

198:                                              ; preds = %254, %196
  %199 = phi i64 [ 0, %196 ], [ %256, %254 ]
  %200 = phi i32 [ %185, %196 ], [ %255, %254 ]
  %201 = phi i64 [ %197, %196 ], [ %257, %254 ]
  %202 = getelementptr inbounds %struct.index_and_score_t, %struct.index_and_score_t* %27, i64 %199, i32 1
  %203 = load float, float* %202, align 4
  %204 = fcmp ult float %203, %190
  br i1 %204, label %215, label %205

205:                                              ; preds = %198
  %206 = getelementptr inbounds %struct.index_and_score_t, %struct.index_and_score_t* %27, i64 %199, i32 0
  %207 = load i32, i32* %206, align 4
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds i8, i8* %5, i64 %208
  %210 = load i8, i8* %209, align 1
  %211 = icmp eq i8 %210, 0
  %212 = zext i1 %211 to i32
  %213 = add nsw i32 %200, %212
  %214 = or i8 %210, 1
  store i8 %214, i8* %209, align 1
  br label %215

215:                                              ; preds = %198, %205
  %216 = phi i32 [ %213, %205 ], [ %200, %198 ]
  %217 = or i64 %199, 1
  %218 = getelementptr inbounds %struct.index_and_score_t, %struct.index_and_score_t* %27, i64 %217, i32 1
  %219 = load float, float* %218, align 4
  %220 = fcmp ult float %219, %190
  br i1 %220, label %254, label %244

221:                                              ; preds = %254, %192
  %222 = phi i32 [ undef, %192 ], [ %255, %254 ]
  %223 = phi i64 [ 0, %192 ], [ %256, %254 ]
  %224 = phi i32 [ %185, %192 ], [ %255, %254 ]
  %225 = icmp eq i64 %194, 0
  br i1 %225, label %240, label %226

226:                                              ; preds = %221
  %227 = getelementptr inbounds %struct.index_and_score_t, %struct.index_and_score_t* %27, i64 %223, i32 1
  %228 = load float, float* %227, align 4
  %229 = fcmp ult float %228, %190
  br i1 %229, label %240, label %230

230:                                              ; preds = %226
  %231 = getelementptr inbounds %struct.index_and_score_t, %struct.index_and_score_t* %27, i64 %223, i32 0
  %232 = load i32, i32* %231, align 4
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds i8, i8* %5, i64 %233
  %235 = load i8, i8* %234, align 1
  %236 = icmp eq i8 %235, 0
  %237 = zext i1 %236 to i32
  %238 = add nsw i32 %224, %237
  %239 = or i8 %235, 1
  store i8 %239, i8* %234, align 1
  br label %240

240:                                              ; preds = %221, %226, %230, %184, %50
  %241 = phi i8* [ %19, %50 ], [ %21, %184 ], [ %21, %230 ], [ %21, %226 ], [ %21, %221 ]
  %242 = phi i8* [ %21, %50 ], [ %19, %184 ], [ %19, %230 ], [ %19, %226 ], [ %19, %221 ]
  %243 = phi i32 [ -1, %50 ], [ %185, %184 ], [ %222, %221 ], [ %238, %230 ], [ %224, %226 ]
  tail call void @aom_free(i8* %241) #9
  tail call void @aom_free(i8* %242) #9
  tail call void @aom_free(i8* %26) #9
  ret i32 %243

244:                                              ; preds = %215
  %245 = getelementptr inbounds %struct.index_and_score_t, %struct.index_and_score_t* %27, i64 %217, i32 0
  %246 = load i32, i32* %245, align 4
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds i8, i8* %5, i64 %247
  %249 = load i8, i8* %248, align 1
  %250 = icmp eq i8 %249, 0
  %251 = zext i1 %250 to i32
  %252 = add nsw i32 %216, %251
  %253 = or i8 %249, 1
  store i8 %253, i8* %248, align 1
  br label %254

254:                                              ; preds = %244, %215
  %255 = phi i32 [ %252, %244 ], [ %216, %215 ]
  %256 = add nuw nsw i64 %199, 2
  %257 = add i64 %201, -2
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %221, label %198
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #6

; Function Attrs: nofree
declare void @qsort(i8*, i64, i64, i32 (i8*, i8*)* nocapture) local_unnamed_addr #7

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @compare_scores(i8* nocapture readonly, i8* nocapture readonly) #3 {
  %3 = getelementptr inbounds i8, i8* %0, i64 4
  %4 = bitcast i8* %3 to float*
  %5 = load float, float* %4, align 4
  %6 = getelementptr inbounds i8, i8* %1, i64 4
  %7 = bitcast i8* %6 to float*
  %8 = load float, float* %7, align 4
  %9 = fsub float %5, %8
  %10 = fcmp olt float %9, 0.000000e+00
  %11 = fcmp ogt float %9, 0.000000e+00
  %12 = zext i1 %11 to i32
  %13 = select i1 %10, i32 -1, i32 %12
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_noise_model_init(%struct.aom_noise_model_t*, i64, i64) local_unnamed_addr #0 {
  %4 = trunc i64 %1 to i8
  %5 = lshr i64 %1, 32
  %6 = trunc i64 %5 to i32
  %7 = shl nuw nsw i64 %5, 1
  %8 = trunc i64 %7 to i32
  %9 = or i32 %8, 1
  switch i8 %4, label %16 [
    i8 0, label %10
    i8 1, label %13
  ]

10:                                               ; preds = %3
  %11 = add nsw i32 %6, 1
  %12 = mul nsw i32 %11, %6
  br label %16

13:                                               ; preds = %3
  %14 = mul nsw i32 %9, %9
  %15 = lshr i32 %14, 1
  br label %16

16:                                               ; preds = %3, %10, %13
  %17 = phi i32 [ %15, %13 ], [ %12, %10 ], [ 0, %3 ]
  %18 = trunc i64 %2 to i32
  %19 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 704, i1 false)
  %20 = icmp slt i32 %6, 1
  br i1 %20, label %21, label %24

21:                                               ; preds = %16
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %23 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.5, i64 0, i64 0), i32 %6) #10
  br label %141

24:                                               ; preds = %16
  %25 = icmp sgt i32 %6, 4
  br i1 %25, label %26, label %29

26:                                               ; preds = %24
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %28 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.6, i64 0, i64 0), i32 %6, i32 4) #10
  br label %141

29:                                               ; preds = %24
  %30 = bitcast %struct.aom_noise_model_t* %0 to i64*
  store i64 %1, i64* %30, align 8
  %31 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 0, i32 2
  %32 = bitcast i32* %31 to i64*
  store i64 %2, i64* %32, align 8
  %33 = shl nsw i32 -1, %18
  %34 = xor i32 %33, -1
  %35 = sitofp i32 %34 to double
  br label %36

36:                                               ; preds = %88, %29
  %37 = phi i64 [ 0, %29 ], [ %89, %88 ]
  %38 = icmp ne i64 %37, 0
  %39 = zext i1 %38 to i32
  %40 = add nsw i32 %17, %39
  %41 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %37, i32 0
  %42 = tail call fastcc i32 @equation_system_init(%struct.aom_equation_system_t* %41, i32 %40) #9
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %47

44:                                               ; preds = %36
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %46 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.26, i64 0, i64 0), i32 %40) #11
  br label %60

47:                                               ; preds = %36
  %48 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %37, i32 3
  store double 1.000000e+00, double* %48, align 8
  %49 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %37, i32 2
  store i32 0, i32* %49, align 8
  %50 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %37, i32 1
  %51 = bitcast %struct.aom_noise_strength_solver_t* %50 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %51, i8 0, i64 32, i1 false) #9
  %52 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %37, i32 1, i32 3
  store i32 20, i32* %52, align 8
  %53 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %37, i32 1, i32 1
  store double 0.000000e+00, double* %53, align 8
  %54 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %37, i32 1, i32 2
  store double %35, double* %54, align 8
  %55 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %37, i32 1, i32 5
  store double 0.000000e+00, double* %55, align 8
  %56 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %37, i32 1, i32 4
  store i32 0, i32* %56, align 4
  %57 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %50, i64 0, i32 0
  %58 = tail call fastcc i32 @equation_system_init(%struct.aom_equation_system_t* %57, i32 20) #9
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %64

60:                                               ; preds = %47, %44
  %61 = trunc i64 %37 to i32
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %63 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %62, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.7, i64 0, i64 0), i32 %61) #10
  tail call void @aom_noise_model_free(%struct.aom_noise_model_t* %0)
  br label %141

64:                                               ; preds = %47
  %65 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %37, i32 0
  %66 = tail call fastcc i32 @equation_system_init(%struct.aom_equation_system_t* %65, i32 %40) #9
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %71

68:                                               ; preds = %64
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %70 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %69, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.26, i64 0, i64 0), i32 %40) #11
  br label %84

71:                                               ; preds = %64
  %72 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %37, i32 3
  store double 1.000000e+00, double* %72, align 8
  %73 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %37, i32 2
  store i32 0, i32* %73, align 8
  %74 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %37, i32 1
  %75 = bitcast %struct.aom_noise_strength_solver_t* %74 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %75, i8 0, i64 32, i1 false) #9
  %76 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %37, i32 1, i32 3
  store i32 20, i32* %76, align 8
  %77 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %37, i32 1, i32 1
  store double 0.000000e+00, double* %77, align 8
  %78 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %37, i32 1, i32 2
  store double %35, double* %78, align 8
  %79 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %37, i32 1, i32 5
  store double 0.000000e+00, double* %79, align 8
  %80 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %37, i32 1, i32 4
  store i32 0, i32* %80, align 4
  %81 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %74, i64 0, i32 0
  %82 = tail call fastcc i32 @equation_system_init(%struct.aom_equation_system_t* %81, i32 20) #9
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %88

84:                                               ; preds = %71, %68
  %85 = trunc i64 %37 to i32
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %87 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %86, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.7, i64 0, i64 0), i32 %85) #10
  tail call void @aom_noise_model_free(%struct.aom_noise_model_t* %0)
  br label %141

88:                                               ; preds = %71
  %89 = add nuw nsw i64 %37, 1
  %90 = icmp eq i64 %89, 3
  br i1 %90, label %91, label %36

91:                                               ; preds = %88
  %92 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 4
  store i32 %17, i32* %92, align 8
  %93 = sext i32 %17 to i64
  %94 = shl nsw i64 %93, 3
  %95 = tail call i8* @aom_malloc(i64 %94) #9
  %96 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 3
  %97 = bitcast [2 x i32]** %96 to i8**
  store i8* %95, i8** %97, align 8
  %98 = sub nsw i32 0, %6
  %99 = icmp sgt i32 %6, -1
  br i1 %99, label %100, label %141

100:                                              ; preds = %91, %137
  %101 = phi i32 [ %138, %137 ], [ 0, %91 ]
  %102 = phi i32 [ %139, %137 ], [ %98, %91 ]
  %103 = icmp eq i32 %102, 0
  %104 = select i1 %103, i32 -1, i32 %6
  %105 = icmp slt i32 %104, %98
  br i1 %105, label %137, label %106

106:                                              ; preds = %100
  %107 = add nsw i32 %102, %6
  br label %108

108:                                              ; preds = %133, %106
  %109 = phi i32 [ %101, %106 ], [ %134, %133 ]
  %110 = phi i32 [ %98, %106 ], [ %135, %133 ]
  switch i8 %4, label %124 [
    i8 0, label %111
    i8 1, label %120
  ]

111:                                              ; preds = %108
  %112 = icmp slt i32 %110, 0
  %113 = sub nsw i32 0, %110
  %114 = select i1 %112, i32 %113, i32 %110
  %115 = icmp sgt i32 %114, %107
  br i1 %115, label %133, label %116

116:                                              ; preds = %111
  %117 = load [2 x i32]*, [2 x i32]** %96, align 8
  %118 = sext i32 %109 to i64
  %119 = getelementptr inbounds [2 x i32], [2 x i32]* %117, i64 %118, i64 0
  br label %127

120:                                              ; preds = %108
  %121 = load [2 x i32]*, [2 x i32]** %96, align 8
  %122 = sext i32 %109 to i64
  %123 = getelementptr inbounds [2 x i32], [2 x i32]* %121, i64 %122, i64 0
  br label %127

124:                                              ; preds = %108
  %125 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %126 = tail call i64 @fwrite(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i64 14, i64 1, %struct._IO_FILE* %125) #10
  tail call void @aom_noise_model_free(%struct.aom_noise_model_t* %0)
  br label %141

127:                                              ; preds = %116, %120
  %128 = phi i32* [ %123, %120 ], [ %119, %116 ]
  %129 = phi i64 [ %122, %120 ], [ %118, %116 ]
  store i32 %110, i32* %128, align 4
  %130 = load [2 x i32]*, [2 x i32]** %96, align 8
  %131 = getelementptr inbounds [2 x i32], [2 x i32]* %130, i64 %129, i64 1
  store i32 %102, i32* %131, align 4
  %132 = add nsw i32 %109, 1
  br label %133

133:                                              ; preds = %127, %111
  %134 = phi i32 [ %109, %111 ], [ %132, %127 ]
  %135 = add nsw i32 %110, 1
  %136 = icmp slt i32 %110, %104
  br i1 %136, label %108, label %137

137:                                              ; preds = %133, %100
  %138 = phi i32 [ %101, %100 ], [ %134, %133 ]
  %139 = add i32 %102, 1
  %140 = icmp eq i32 %102, 0
  br i1 %140, label %141, label %100

141:                                              ; preds = %137, %91, %124, %84, %60, %26, %21
  %142 = phi i32 [ 0, %21 ], [ 0, %26 ], [ 0, %84 ], [ 0, %60 ], [ 0, %124 ], [ 1, %91 ], [ 1, %137 ]
  ret i32 %142
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_noise_model_free(%struct.aom_noise_model_t*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.aom_noise_model_t* %0, null
  br i1 %2, label %65, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 3
  %5 = bitcast [2 x i32]** %4 to i8**
  %6 = load i8*, i8** %5, align 8
  tail call void @aom_free(i8* %6) #9
  br label %7

7:                                                ; preds = %60, %3
  %8 = phi i64 [ 0, %3 ], [ %61, %60 ]
  %9 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %8, i32 0
  %10 = icmp eq %struct.aom_equation_system_t* %9, null
  br i1 %10, label %21, label %11

11:                                               ; preds = %7
  %12 = bitcast %struct.aom_equation_system_t* %9 to i8**
  %13 = load i8*, i8** %12, align 8
  tail call void @aom_free(i8* %13) #9
  %14 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %8, i32 0, i32 1
  %15 = bitcast double** %14 to i8**
  %16 = load i8*, i8** %15, align 8
  tail call void @aom_free(i8* %16) #9
  %17 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %8, i32 0, i32 2
  %18 = bitcast double** %17 to i8**
  %19 = load i8*, i8** %18, align 8
  tail call void @aom_free(i8* %19) #9
  %20 = bitcast %struct.aom_equation_system_t* %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 32, i1 false) #9
  br label %21

21:                                               ; preds = %7, %11
  %22 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %8, i32 0
  %23 = icmp eq %struct.aom_equation_system_t* %22, null
  br i1 %23, label %34, label %24

24:                                               ; preds = %21
  %25 = bitcast %struct.aom_equation_system_t* %22 to i8**
  %26 = load i8*, i8** %25, align 8
  tail call void @aom_free(i8* %26) #9
  %27 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %8, i32 0, i32 1
  %28 = bitcast double** %27 to i8**
  %29 = load i8*, i8** %28, align 8
  tail call void @aom_free(i8* %29) #9
  %30 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %8, i32 0, i32 2
  %31 = bitcast double** %30 to i8**
  %32 = load i8*, i8** %31, align 8
  tail call void @aom_free(i8* %32) #9
  %33 = bitcast %struct.aom_equation_system_t* %22 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 0, i64 32, i1 false) #9
  br label %34

34:                                               ; preds = %21, %24
  %35 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %8, i32 1, i32 0
  %36 = icmp eq %struct.aom_equation_system_t* %35, null
  br i1 %36, label %47, label %37

37:                                               ; preds = %34
  %38 = bitcast %struct.aom_equation_system_t* %35 to i8**
  %39 = load i8*, i8** %38, align 8
  tail call void @aom_free(i8* %39) #9
  %40 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %8, i32 1, i32 0, i32 1
  %41 = bitcast double** %40 to i8**
  %42 = load i8*, i8** %41, align 8
  tail call void @aom_free(i8* %42) #9
  %43 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %8, i32 1, i32 0, i32 2
  %44 = bitcast double** %43 to i8**
  %45 = load i8*, i8** %44, align 8
  tail call void @aom_free(i8* %45) #9
  %46 = bitcast %struct.aom_equation_system_t* %35 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %46, i8 0, i64 32, i1 false) #9
  br label %47

47:                                               ; preds = %34, %37
  %48 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %8, i32 1, i32 0
  %49 = icmp eq %struct.aom_equation_system_t* %48, null
  br i1 %49, label %60, label %50

50:                                               ; preds = %47
  %51 = bitcast %struct.aom_equation_system_t* %48 to i8**
  %52 = load i8*, i8** %51, align 8
  tail call void @aom_free(i8* %52) #9
  %53 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %8, i32 1, i32 0, i32 1
  %54 = bitcast double** %53 to i8**
  %55 = load i8*, i8** %54, align 8
  tail call void @aom_free(i8* %55) #9
  %56 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %8, i32 1, i32 0, i32 2
  %57 = bitcast double** %56 to i8**
  %58 = load i8*, i8** %57, align 8
  tail call void @aom_free(i8* %58) #9
  %59 = bitcast %struct.aom_equation_system_t* %48 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %59, i8 0, i64 32, i1 false) #9
  br label %60

60:                                               ; preds = %47, %50
  %61 = add nuw nsw i64 %8, 1
  %62 = icmp eq i64 %61, 3
  br i1 %62, label %63, label %7

63:                                               ; preds = %60
  %64 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %64, i8 0, i64 704, i1 false)
  br label %65

65:                                               ; preds = %1, %63
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @aom_noise_model_update(%struct.aom_noise_model_t*, i8** nocapture readonly, i8** nocapture readonly, i32, i32, i32* nocapture readonly, i32* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %10 = alloca i64, align 8
  %11 = add i32 %8, -1
  %12 = add i32 %11, %3
  %13 = sdiv i32 %12, %8
  %14 = add i32 %11, %4
  %15 = sdiv i32 %14, %8
  %16 = icmp slt i32 %8, 2
  br i1 %16, label %17, label %20

17:                                               ; preds = %9
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %19 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0), i32 %8) #10
  br label %1493

20:                                               ; preds = %9
  %21 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = shl nsw i32 %22, 1
  %24 = or i32 %23, 1
  %25 = icmp sgt i32 %24, %8
  br i1 %25, label %122, label %26

26:                                               ; preds = %20
  %27 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 0, i32 0
  %28 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 0, i32 0, i32 3
  %29 = load i32, i32* %28, align 8
  %30 = bitcast %struct.aom_equation_system_t* %27 to i8**
  %31 = load i8*, i8** %30, align 8
  %32 = sext i32 %29 to i64
  %33 = shl nsw i64 %32, 3
  %34 = mul i64 %33, %32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 %34, i1 false) #9
  %35 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 0, i32 0, i32 2
  %36 = bitcast double** %35 to i8**
  %37 = load i8*, i8** %36, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 %33, i1 false) #9
  %38 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 0, i32 0, i32 1
  %39 = bitcast double** %38 to i8**
  %40 = load i8*, i8** %39, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 %33, i1 false) #9
  %41 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 0, i32 2
  store i32 0, i32* %41, align 8
  %42 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 0, i32 1
  %43 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 0, i32 1, i32 0, i32 3
  %44 = load i32, i32* %43, align 8
  %45 = bitcast %struct.aom_noise_strength_solver_t* %42 to i8**
  %46 = load i8*, i8** %45, align 8
  %47 = sext i32 %44 to i64
  %48 = shl nsw i64 %47, 3
  %49 = mul i64 %48, %47
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 %49, i1 false) #9
  %50 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 0, i32 1, i32 0, i32 2
  %51 = bitcast double** %50 to i8**
  %52 = load i8*, i8** %51, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %52, i8 0, i64 %48, i1 false) #9
  %53 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 0, i32 1, i32 0, i32 1
  %54 = bitcast double** %53 to i8**
  %55 = load i8*, i8** %54, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 %48, i1 false) #9
  %56 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 0, i32 1, i32 4
  store i32 0, i32* %56, align 4
  %57 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 0, i32 1, i32 5
  store double 0.000000e+00, double* %57, align 8
  %58 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 1, i32 0
  %59 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 1, i32 0, i32 3
  %60 = load i32, i32* %59, align 8
  %61 = bitcast %struct.aom_equation_system_t* %58 to i8**
  %62 = load i8*, i8** %61, align 8
  %63 = sext i32 %60 to i64
  %64 = shl nsw i64 %63, 3
  %65 = mul i64 %64, %63
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %62, i8 0, i64 %65, i1 false) #9
  %66 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 1, i32 0, i32 2
  %67 = bitcast double** %66 to i8**
  %68 = load i8*, i8** %67, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %68, i8 0, i64 %64, i1 false) #9
  %69 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 1, i32 0, i32 1
  %70 = bitcast double** %69 to i8**
  %71 = load i8*, i8** %70, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %71, i8 0, i64 %64, i1 false) #9
  %72 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 1, i32 2
  store i32 0, i32* %72, align 8
  %73 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 1, i32 1
  %74 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 1, i32 1, i32 0, i32 3
  %75 = load i32, i32* %74, align 8
  %76 = bitcast %struct.aom_noise_strength_solver_t* %73 to i8**
  %77 = load i8*, i8** %76, align 8
  %78 = sext i32 %75 to i64
  %79 = shl nsw i64 %78, 3
  %80 = mul i64 %79, %78
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %77, i8 0, i64 %80, i1 false) #9
  %81 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 1, i32 1, i32 0, i32 2
  %82 = bitcast double** %81 to i8**
  %83 = load i8*, i8** %82, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %83, i8 0, i64 %79, i1 false) #9
  %84 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 1, i32 1, i32 0, i32 1
  %85 = bitcast double** %84 to i8**
  %86 = load i8*, i8** %85, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %86, i8 0, i64 %79, i1 false) #9
  %87 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 1, i32 1, i32 4
  store i32 0, i32* %87, align 4
  %88 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 1, i32 1, i32 5
  store double 0.000000e+00, double* %88, align 8
  %89 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 2, i32 0
  %90 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 2, i32 0, i32 3
  %91 = load i32, i32* %90, align 8
  %92 = bitcast %struct.aom_equation_system_t* %89 to i8**
  %93 = load i8*, i8** %92, align 8
  %94 = sext i32 %91 to i64
  %95 = shl nsw i64 %94, 3
  %96 = mul i64 %95, %94
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %93, i8 0, i64 %96, i1 false) #9
  %97 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 2, i32 0, i32 2
  %98 = bitcast double** %97 to i8**
  %99 = load i8*, i8** %98, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %99, i8 0, i64 %95, i1 false) #9
  %100 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 2, i32 0, i32 1
  %101 = bitcast double** %100 to i8**
  %102 = load i8*, i8** %101, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %102, i8 0, i64 %95, i1 false) #9
  %103 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 2, i32 2
  store i32 0, i32* %103, align 8
  %104 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 2, i32 1
  %105 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 2, i32 1, i32 0, i32 3
  %106 = load i32, i32* %105, align 8
  %107 = bitcast %struct.aom_noise_strength_solver_t* %104 to i8**
  %108 = load i8*, i8** %107, align 8
  %109 = sext i32 %106 to i64
  %110 = shl nsw i64 %109, 3
  %111 = mul i64 %110, %109
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %108, i8 0, i64 %111, i1 false) #9
  %112 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 2, i32 1, i32 0, i32 2
  %113 = bitcast double** %112 to i8**
  %114 = load i8*, i8** %113, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %114, i8 0, i64 %110, i1 false) #9
  %115 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 2, i32 1, i32 0, i32 1
  %116 = bitcast double** %115 to i8**
  %117 = load i8*, i8** %116, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %117, i8 0, i64 %110, i1 false) #9
  %118 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 2, i32 1, i32 4
  store i32 0, i32* %118, align 4
  %119 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 2, i32 1, i32 5
  store double 0.000000e+00, double* %119, align 8
  %120 = mul i32 %15, %13
  %121 = icmp sgt i32 %120, 0
  br i1 %121, label %125, label %237

122:                                              ; preds = %20
  %123 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %124 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %123, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.10, i64 0, i64 0), i32 %8, i32 %24) #10
  br label %1493

125:                                              ; preds = %26
  %126 = zext i32 %120 to i64
  %127 = icmp ult i32 %120, 8
  br i1 %127, label %200, label %128

128:                                              ; preds = %125
  %129 = and i64 %126, 4294967288
  %130 = add nsw i64 %129, -8
  %131 = lshr exact i64 %130, 3
  %132 = add nuw nsw i64 %131, 1
  %133 = and i64 %132, 1
  %134 = icmp eq i64 %130, 0
  br i1 %134, label %170, label %135

135:                                              ; preds = %128
  %136 = sub nuw nsw i64 %132, %133
  br label %137

137:                                              ; preds = %137, %135
  %138 = phi i64 [ 0, %135 ], [ %167, %137 ]
  %139 = phi <4 x i32> [ zeroinitializer, %135 ], [ %165, %137 ]
  %140 = phi <4 x i32> [ zeroinitializer, %135 ], [ %166, %137 ]
  %141 = phi i64 [ %136, %135 ], [ %168, %137 ]
  %142 = getelementptr inbounds i8, i8* %7, i64 %138
  %143 = bitcast i8* %142 to <4 x i8>*
  %144 = load <4 x i8>, <4 x i8>* %143, align 1
  %145 = getelementptr inbounds i8, i8* %142, i64 4
  %146 = bitcast i8* %145 to <4 x i8>*
  %147 = load <4 x i8>, <4 x i8>* %146, align 1
  %148 = icmp ne <4 x i8> %144, zeroinitializer
  %149 = icmp ne <4 x i8> %147, zeroinitializer
  %150 = zext <4 x i1> %148 to <4 x i32>
  %151 = zext <4 x i1> %149 to <4 x i32>
  %152 = add nuw nsw <4 x i32> %139, %150
  %153 = add nuw nsw <4 x i32> %140, %151
  %154 = or i64 %138, 8
  %155 = getelementptr inbounds i8, i8* %7, i64 %154
  %156 = bitcast i8* %155 to <4 x i8>*
  %157 = load <4 x i8>, <4 x i8>* %156, align 1
  %158 = getelementptr inbounds i8, i8* %155, i64 4
  %159 = bitcast i8* %158 to <4 x i8>*
  %160 = load <4 x i8>, <4 x i8>* %159, align 1
  %161 = icmp ne <4 x i8> %157, zeroinitializer
  %162 = icmp ne <4 x i8> %160, zeroinitializer
  %163 = zext <4 x i1> %161 to <4 x i32>
  %164 = zext <4 x i1> %162 to <4 x i32>
  %165 = add nuw nsw <4 x i32> %152, %163
  %166 = add nuw nsw <4 x i32> %153, %164
  %167 = add i64 %138, 16
  %168 = add i64 %141, -2
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %170, label %137, !llvm.loop !38

170:                                              ; preds = %137, %128
  %171 = phi <4 x i32> [ undef, %128 ], [ %165, %137 ]
  %172 = phi <4 x i32> [ undef, %128 ], [ %166, %137 ]
  %173 = phi i64 [ 0, %128 ], [ %167, %137 ]
  %174 = phi <4 x i32> [ zeroinitializer, %128 ], [ %165, %137 ]
  %175 = phi <4 x i32> [ zeroinitializer, %128 ], [ %166, %137 ]
  %176 = icmp eq i64 %133, 0
  br i1 %176, label %190, label %177

177:                                              ; preds = %170
  %178 = getelementptr inbounds i8, i8* %7, i64 %173
  %179 = getelementptr inbounds i8, i8* %178, i64 4
  %180 = bitcast i8* %179 to <4 x i8>*
  %181 = load <4 x i8>, <4 x i8>* %180, align 1
  %182 = icmp ne <4 x i8> %181, zeroinitializer
  %183 = zext <4 x i1> %182 to <4 x i32>
  %184 = add nuw nsw <4 x i32> %175, %183
  %185 = bitcast i8* %178 to <4 x i8>*
  %186 = load <4 x i8>, <4 x i8>* %185, align 1
  %187 = icmp ne <4 x i8> %186, zeroinitializer
  %188 = zext <4 x i1> %187 to <4 x i32>
  %189 = add nuw nsw <4 x i32> %174, %188
  br label %190

190:                                              ; preds = %170, %177
  %191 = phi <4 x i32> [ %171, %170 ], [ %189, %177 ]
  %192 = phi <4 x i32> [ %172, %170 ], [ %184, %177 ]
  %193 = add nuw <4 x i32> %192, %191
  %194 = shufflevector <4 x i32> %193, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %195 = add <4 x i32> %193, %194
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %197 = add <4 x i32> %195, %196
  %198 = extractelement <4 x i32> %197, i32 0
  %199 = icmp eq i64 %129, %126
  br i1 %199, label %213, label %200

200:                                              ; preds = %190, %125
  %201 = phi i64 [ 0, %125 ], [ %129, %190 ]
  %202 = phi i32 [ 0, %125 ], [ %198, %190 ]
  br label %203

203:                                              ; preds = %200, %203
  %204 = phi i64 [ %211, %203 ], [ %201, %200 ]
  %205 = phi i32 [ %210, %203 ], [ %202, %200 ]
  %206 = getelementptr inbounds i8, i8* %7, i64 %204
  %207 = load i8, i8* %206, align 1
  %208 = icmp ne i8 %207, 0
  %209 = zext i1 %208 to i32
  %210 = add nuw nsw i32 %205, %209
  %211 = add nuw nsw i64 %204, 1
  %212 = icmp eq i64 %211, %126
  br i1 %212, label %213, label %203, !llvm.loop !39

213:                                              ; preds = %203, %190
  %214 = phi i32 [ %198, %190 ], [ %210, %203 ]
  %215 = icmp ult i32 %214, 2
  br i1 %215, label %237, label %216

216:                                              ; preds = %213
  %217 = bitcast i64* %10 to i8*
  %218 = bitcast i64* %10 to i32*
  %219 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 4
  %220 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 0, i32 2
  %221 = icmp sgt i32 %15, 0
  %222 = icmp sgt i32 %13, 0
  %223 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 0, i32 3
  %224 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 3
  %225 = sext i32 %13 to i64
  %226 = zext i32 %15 to i64
  %227 = zext i32 %13 to i64
  %228 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 0, i32 3
  %229 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 0, i32 1, i32 1
  %230 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 0, i32 1, i32 2
  %231 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 0, i32 1, i32 3
  %232 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 0, i32 0, i32 2
  %233 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 0, i32 0, i32 3
  %234 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 0, i32 1, i32 0, i32 0
  %235 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 0, i32 1, i32 0, i32 2
  %236 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 0, i32 1, i32 4
  br label %240

237:                                              ; preds = %26, %213
  %238 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %239 = tail call i64 @fwrite(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.11, i64 0, i64 0), i64 48, i64 1, %struct._IO_FILE* %238) #10
  br label %1493

240:                                              ; preds = %1485, %216
  %241 = phi i64 [ 0, %216 ], [ %1487, %1485 ]
  %242 = phi i32 [ 0, %216 ], [ %1486, %1485 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %217) #9
  store i64 0, i64* %10, align 8
  %243 = icmp ne i64 %241, 0
  br i1 %243, label %244, label %249

244:                                              ; preds = %240
  %245 = load i8*, i8** %1, align 8
  %246 = bitcast i8* %245 to i16*
  %247 = load i8*, i8** %2, align 8
  %248 = bitcast i8* %247 to i16*
  br label %249

249:                                              ; preds = %240, %244
  %250 = phi i16* [ %246, %244 ], [ null, %240 ]
  %251 = phi i8* [ %245, %244 ], [ null, %240 ]
  %252 = phi i16* [ %248, %244 ], [ null, %240 ]
  %253 = phi i8* [ %247, %244 ], [ null, %240 ]
  %254 = select i1 %243, i32* %6, i32* %218
  %255 = zext i1 %243 to i32
  %256 = getelementptr inbounds i8*, i8** %1, i64 %241
  %257 = load i8*, i8** %256, align 8
  %258 = icmp eq i8* %257, null
  br i1 %258, label %1484, label %259

259:                                              ; preds = %249
  %260 = getelementptr inbounds i8*, i8** %2, i64 %241
  %261 = load i8*, i8** %260, align 8
  %262 = icmp eq i8* %261, null
  br i1 %262, label %1484, label %263

263:                                              ; preds = %259
  %264 = getelementptr inbounds i32, i32* %5, i64 %241
  %265 = load i32, i32* %264, align 4
  %266 = load i32, i32* %5, align 4
  %267 = load i32, i32* %21, align 4
  %268 = load i32, i32* %219, align 8
  %269 = load i32, i32* %220, align 8
  %270 = shl nsw i32 -1, %269
  %271 = xor i32 %270, -1
  %272 = sitofp i32 %271 to double
  %273 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %241, i32 0, i32 0
  %274 = load double*, double** %273, align 8
  %275 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %241, i32 0, i32 1
  %276 = load double*, double** %275, align 8
  %277 = add nsw i32 %268, 1
  %278 = sext i32 %277 to i64
  %279 = shl nsw i64 %278, 3
  %280 = tail call i8* @aom_malloc(i64 %279) #9
  %281 = bitcast i8* %280 to double*
  %282 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %241, i32 0, i32 3
  %283 = load i32, i32* %282, align 8
  %284 = icmp eq i8* %280, null
  br i1 %284, label %643, label %285

285:                                              ; preds = %263
  br i1 %221, label %286, label %648

286:                                              ; preds = %285
  %287 = getelementptr inbounds i32, i32* %254, i64 1
  %288 = bitcast i8* %257 to i16*
  %289 = bitcast i8* %261 to i16*
  %290 = icmp sgt i32 %268, 0
  %291 = zext i32 %268 to i64
  %292 = icmp ne i8* %251, null
  %293 = icmp ne i8* %253, null
  %294 = and i1 %292, %293
  %295 = sext i32 %268 to i64
  %296 = getelementptr inbounds double, double* %281, i64 %295
  %297 = icmp sgt i32 %283, 0
  %298 = fmul double %272, %272
  %299 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %241, i32 2
  %300 = sext i32 %283 to i64
  %301 = sext i32 %265 to i64
  %302 = zext i32 %283 to i64
  %303 = and i64 %302, 1
  %304 = icmp eq i32 %283, 1
  %305 = sub nsw i64 %302, %303
  %306 = icmp eq i64 %303, 0
  br label %307

307:                                              ; preds = %319, %286
  %308 = phi i64 [ 0, %286 ], [ %320, %319 ]
  %309 = trunc i64 %308 to i32
  br i1 %222, label %310, label %319

310:                                              ; preds = %307
  %311 = load i32, i32* %287, align 4
  %312 = ashr i32 %8, %311
  %313 = mul nsw i32 %312, %309
  %314 = mul nsw i64 %308, %225
  %315 = icmp eq i64 %308, 0
  %316 = add nsw i64 %308, -1
  %317 = mul nsw i64 %316, %225
  %318 = sext i32 %313 to i64
  br label %322

319:                                              ; preds = %640, %307
  %320 = add nuw nsw i64 %308, 1
  %321 = icmp eq i64 %320, %226
  br i1 %321, label %648, label %307

322:                                              ; preds = %640, %310
  %323 = phi i64 [ 0, %310 ], [ %641, %640 ]
  %324 = load i32, i32* %254, align 4
  %325 = ashr i32 %8, %324
  %326 = trunc i64 %323 to i32
  %327 = mul nsw i32 %325, %326
  %328 = add nsw i64 %323, %314
  %329 = getelementptr inbounds i8, i8* %7, i64 %328
  %330 = load i8, i8* %329, align 1
  %331 = icmp eq i8 %330, 0
  br i1 %331, label %332, label %334

332:                                              ; preds = %322
  %333 = add nuw nsw i64 %323, 1
  br label %640

334:                                              ; preds = %322
  br i1 %315, label %340, label %335

335:                                              ; preds = %334
  %336 = add nsw i64 %323, %317
  %337 = getelementptr inbounds i8, i8* %7, i64 %336
  %338 = load i8, i8* %337, align 1
  %339 = icmp eq i8 %338, 0
  br i1 %339, label %340, label %341

340:                                              ; preds = %335, %334
  br label %341

341:                                              ; preds = %340, %335
  %342 = phi i32 [ %267, %340 ], [ 0, %335 ]
  %343 = icmp eq i64 %323, 0
  br i1 %343, label %349, label %344

344:                                              ; preds = %341
  %345 = add nsw i64 %328, -1
  %346 = getelementptr inbounds i8, i8* %7, i64 %345
  %347 = load i8, i8* %346, align 1
  %348 = icmp eq i8 %347, 0
  br i1 %348, label %349, label %350

349:                                              ; preds = %344, %341
  br label %350

350:                                              ; preds = %349, %344
  %351 = phi i32 [ %267, %349 ], [ 0, %344 ]
  %352 = load i32, i32* %287, align 4
  %353 = ashr i32 %4, %352
  %354 = ashr i32 %8, %352
  %355 = mul nsw i32 %354, %309
  %356 = sub nsw i32 %353, %355
  %357 = icmp slt i32 %356, %354
  %358 = select i1 %357, i32 %356, i32 %354
  %359 = ashr i32 %3, %324
  %360 = sub nsw i32 %359, %327
  %361 = sub i32 %360, %267
  %362 = add nuw nsw i64 %323, 1
  %363 = icmp slt i64 %362, %225
  br i1 %363, label %364, label %369

364:                                              ; preds = %350
  %365 = add nsw i64 %328, 1
  %366 = getelementptr inbounds i8, i8* %7, i64 %365
  %367 = load i8, i8* %366, align 1
  %368 = icmp eq i8 %367, 0
  br i1 %368, label %369, label %371

369:                                              ; preds = %364, %350
  %370 = sub nsw i32 %325, %267
  br label %371

371:                                              ; preds = %369, %364
  %372 = phi i32 [ %370, %369 ], [ %325, %364 ]
  %373 = icmp slt i32 %361, %372
  br i1 %373, label %382, label %374

374:                                              ; preds = %371
  br i1 %363, label %375, label %380

375:                                              ; preds = %374
  %376 = add nsw i64 %328, 1
  %377 = getelementptr inbounds i8, i8* %7, i64 %376
  %378 = load i8, i8* %377, align 1
  %379 = icmp eq i8 %378, 0
  br i1 %379, label %380, label %382

380:                                              ; preds = %375, %374
  %381 = sub nsw i32 %325, %267
  br label %382

382:                                              ; preds = %380, %375, %371
  %383 = phi i32 [ %381, %380 ], [ %361, %371 ], [ %325, %375 ]
  %384 = icmp slt i32 %342, %358
  br i1 %384, label %385, label %640

385:                                              ; preds = %382
  %386 = icmp slt i32 %351, %383
  %387 = sext i32 %351 to i64
  %388 = sext i32 %327 to i64
  %389 = sext i32 %342 to i64
  %390 = sext i32 %358 to i64
  %391 = sext i32 %383 to i64
  br label %392

392:                                              ; preds = %398, %385
  %393 = phi i64 [ %389, %385 ], [ %399, %398 ]
  br i1 %386, label %394, label %398

394:                                              ; preds = %392
  %395 = add nsw i64 %393, %318
  %396 = mul nsw i64 %395, %301
  %397 = trunc i64 %395 to i32
  br label %401

398:                                              ; preds = %586, %392
  %399 = add nsw i64 %393, 1
  %400 = icmp slt i64 %399, %390
  br i1 %400, label %392, label %640

401:                                              ; preds = %586, %394
  %402 = phi i64 [ %387, %394 ], [ %589, %586 ]
  %403 = load i32, i32* %223, align 4
  %404 = icmp eq i32 %403, 0
  %405 = load [2 x i32]*, [2 x i32]** %224, align 8
  %406 = add nsw i64 %402, %388
  br i1 %404, label %493, label %407

407:                                              ; preds = %401
  br i1 %290, label %408, label %410

408:                                              ; preds = %407
  %409 = trunc i64 %406 to i32
  br label %431

410:                                              ; preds = %431, %407
  %411 = add nsw i64 %406, %396
  %412 = getelementptr inbounds i16, i16* %288, i64 %411
  %413 = load i16, i16* %412, align 2
  %414 = uitofp i16 %413 to double
  %415 = getelementptr inbounds i16, i16* %289, i64 %411
  %416 = load i16, i16* %415, align 2
  %417 = uitofp i16 %416 to double
  %418 = fsub double %414, %417
  br i1 %294, label %419, label %579

419:                                              ; preds = %410
  %420 = load i32, i32* %287, align 4
  %421 = icmp eq i32 %420, 31
  br i1 %421, label %452, label %422

422:                                              ; preds = %419
  %423 = load i32, i32* %254, align 4
  %424 = icmp eq i32 %423, 31
  %425 = shl i32 1, %420
  %426 = shl i32 %397, %420
  %427 = shl i32 1, %423
  %428 = trunc i64 %406 to i32
  %429 = shl i32 %428, %423
  %430 = sext i32 %427 to i64
  br label %459

431:                                              ; preds = %431, %408
  %432 = phi i64 [ %450, %431 ], [ 0, %408 ]
  %433 = getelementptr inbounds [2 x i32], [2 x i32]* %405, i64 %432, i64 0
  %434 = load i32, i32* %433, align 4
  %435 = add nsw i32 %434, %409
  %436 = getelementptr inbounds [2 x i32], [2 x i32]* %405, i64 %432, i64 1
  %437 = load i32, i32* %436, align 4
  %438 = add nsw i32 %437, %397
  %439 = mul nsw i32 %438, %265
  %440 = add nsw i32 %435, %439
  %441 = sext i32 %440 to i64
  %442 = getelementptr inbounds i16, i16* %288, i64 %441
  %443 = load i16, i16* %442, align 2
  %444 = uitofp i16 %443 to double
  %445 = getelementptr inbounds i16, i16* %289, i64 %441
  %446 = load i16, i16* %445, align 2
  %447 = uitofp i16 %446 to double
  %448 = fsub double %444, %447
  %449 = getelementptr inbounds double, double* %281, i64 %432
  store double %448, double* %449, align 8
  %450 = add nuw nsw i64 %432, 1
  %451 = icmp eq i64 %450, %291
  br i1 %451, label %410, label %431

452:                                              ; preds = %468, %419
  %453 = phi double [ 0.000000e+00, %419 ], [ %469, %468 ]
  %454 = phi double [ 0.000000e+00, %419 ], [ %470, %468 ]
  %455 = phi i32 [ 0, %419 ], [ %471, %468 ]
  %456 = fsub double %453, %454
  %457 = sitofp i32 %455 to double
  %458 = fdiv double %456, %457
  store double %458, double* %296, align 8
  br label %579

459:                                              ; preds = %468, %422
  %460 = phi i32 [ 0, %422 ], [ %472, %468 ]
  %461 = phi i32 [ 0, %422 ], [ %471, %468 ]
  %462 = phi double [ 0.000000e+00, %422 ], [ %470, %468 ]
  %463 = phi double [ 0.000000e+00, %422 ], [ %469, %468 ]
  br i1 %424, label %468, label %464

464:                                              ; preds = %459
  %465 = add nsw i32 %460, %426
  %466 = mul nsw i32 %465, %266
  %467 = add i32 %466, %429
  br label %474

468:                                              ; preds = %474, %459
  %469 = phi double [ %463, %459 ], [ %485, %474 ]
  %470 = phi double [ %462, %459 ], [ %489, %474 ]
  %471 = phi i32 [ %461, %459 ], [ %490, %474 ]
  %472 = add nuw nsw i32 %460, 1
  %473 = icmp slt i32 %472, %425
  br i1 %473, label %459, label %452

474:                                              ; preds = %474, %464
  %475 = phi i64 [ %491, %474 ], [ 0, %464 ]
  %476 = phi i32 [ %490, %474 ], [ %461, %464 ]
  %477 = phi double [ %489, %474 ], [ %462, %464 ]
  %478 = phi double [ %485, %474 ], [ %463, %464 ]
  %479 = trunc i64 %475 to i32
  %480 = add i32 %467, %479
  %481 = sext i32 %480 to i64
  %482 = getelementptr inbounds i16, i16* %250, i64 %481
  %483 = load i16, i16* %482, align 2
  %484 = uitofp i16 %483 to double
  %485 = fadd double %478, %484
  %486 = getelementptr inbounds i16, i16* %252, i64 %481
  %487 = load i16, i16* %486, align 2
  %488 = uitofp i16 %487 to double
  %489 = fadd double %477, %488
  %490 = add nsw i32 %476, 1
  %491 = add nuw nsw i64 %475, 1
  %492 = icmp slt i64 %491, %430
  br i1 %492, label %474, label %468

493:                                              ; preds = %401
  br i1 %290, label %494, label %496

494:                                              ; preds = %493
  %495 = trunc i64 %406 to i32
  br label %517

496:                                              ; preds = %517, %493
  %497 = add nsw i64 %406, %396
  %498 = getelementptr inbounds i8, i8* %257, i64 %497
  %499 = load i8, i8* %498, align 1
  %500 = uitofp i8 %499 to double
  %501 = getelementptr inbounds i8, i8* %261, i64 %497
  %502 = load i8, i8* %501, align 1
  %503 = uitofp i8 %502 to double
  %504 = fsub double %500, %503
  br i1 %294, label %505, label %579

505:                                              ; preds = %496
  %506 = load i32, i32* %287, align 4
  %507 = icmp eq i32 %506, 31
  br i1 %507, label %538, label %508

508:                                              ; preds = %505
  %509 = load i32, i32* %254, align 4
  %510 = icmp eq i32 %509, 31
  %511 = shl i32 1, %506
  %512 = shl i32 %397, %506
  %513 = shl i32 1, %509
  %514 = trunc i64 %406 to i32
  %515 = shl i32 %514, %509
  %516 = sext i32 %513 to i64
  br label %545

517:                                              ; preds = %517, %494
  %518 = phi i64 [ %536, %517 ], [ 0, %494 ]
  %519 = getelementptr inbounds [2 x i32], [2 x i32]* %405, i64 %518, i64 0
  %520 = load i32, i32* %519, align 4
  %521 = add nsw i32 %520, %495
  %522 = getelementptr inbounds [2 x i32], [2 x i32]* %405, i64 %518, i64 1
  %523 = load i32, i32* %522, align 4
  %524 = add nsw i32 %523, %397
  %525 = mul nsw i32 %524, %265
  %526 = add nsw i32 %521, %525
  %527 = sext i32 %526 to i64
  %528 = getelementptr inbounds i8, i8* %257, i64 %527
  %529 = load i8, i8* %528, align 1
  %530 = uitofp i8 %529 to double
  %531 = getelementptr inbounds i8, i8* %261, i64 %527
  %532 = load i8, i8* %531, align 1
  %533 = uitofp i8 %532 to double
  %534 = fsub double %530, %533
  %535 = getelementptr inbounds double, double* %281, i64 %518
  store double %534, double* %535, align 8
  %536 = add nuw nsw i64 %518, 1
  %537 = icmp eq i64 %536, %291
  br i1 %537, label %496, label %517

538:                                              ; preds = %554, %505
  %539 = phi double [ 0.000000e+00, %505 ], [ %555, %554 ]
  %540 = phi double [ 0.000000e+00, %505 ], [ %556, %554 ]
  %541 = phi i32 [ 0, %505 ], [ %557, %554 ]
  %542 = fsub double %539, %540
  %543 = sitofp i32 %541 to double
  %544 = fdiv double %542, %543
  store double %544, double* %296, align 8
  br label %579

545:                                              ; preds = %554, %508
  %546 = phi i32 [ 0, %508 ], [ %558, %554 ]
  %547 = phi i32 [ 0, %508 ], [ %557, %554 ]
  %548 = phi double [ 0.000000e+00, %508 ], [ %556, %554 ]
  %549 = phi double [ 0.000000e+00, %508 ], [ %555, %554 ]
  br i1 %510, label %554, label %550

550:                                              ; preds = %545
  %551 = add nsw i32 %546, %512
  %552 = mul nsw i32 %551, %266
  %553 = add i32 %552, %515
  br label %560

554:                                              ; preds = %560, %545
  %555 = phi double [ %549, %545 ], [ %571, %560 ]
  %556 = phi double [ %548, %545 ], [ %575, %560 ]
  %557 = phi i32 [ %547, %545 ], [ %576, %560 ]
  %558 = add nuw nsw i32 %546, 1
  %559 = icmp slt i32 %558, %511
  br i1 %559, label %545, label %538

560:                                              ; preds = %560, %550
  %561 = phi i64 [ %577, %560 ], [ 0, %550 ]
  %562 = phi i32 [ %576, %560 ], [ %547, %550 ]
  %563 = phi double [ %575, %560 ], [ %548, %550 ]
  %564 = phi double [ %571, %560 ], [ %549, %550 ]
  %565 = trunc i64 %561 to i32
  %566 = add i32 %553, %565
  %567 = sext i32 %566 to i64
  %568 = getelementptr inbounds i8, i8* %251, i64 %567
  %569 = load i8, i8* %568, align 1
  %570 = uitofp i8 %569 to double
  %571 = fadd double %564, %570
  %572 = getelementptr inbounds i8, i8* %253, i64 %567
  %573 = load i8, i8* %572, align 1
  %574 = uitofp i8 %573 to double
  %575 = fadd double %563, %574
  %576 = add nsw i32 %562, 1
  %577 = add nuw nsw i64 %561, 1
  %578 = icmp slt i64 %577, %516
  br i1 %578, label %560, label %554

579:                                              ; preds = %538, %496, %452, %410
  %580 = phi double [ %418, %410 ], [ %418, %452 ], [ %504, %496 ], [ %504, %538 ]
  br i1 %297, label %581, label %586

581:                                              ; preds = %579, %605
  %582 = phi i64 [ %612, %605 ], [ 0, %579 ]
  %583 = getelementptr inbounds double, double* %281, i64 %582
  %584 = load double, double* %583, align 8
  %585 = mul nsw i64 %582, %300
  br i1 %304, label %591, label %614

586:                                              ; preds = %605, %579
  %587 = load i32, i32* %299, align 8
  %588 = add nsw i32 %587, 1
  store i32 %588, i32* %299, align 8
  %589 = add nsw i64 %402, 1
  %590 = icmp eq i64 %589, %391
  br i1 %590, label %398, label %401

591:                                              ; preds = %614, %581
  %592 = phi double [ undef, %581 ], [ %637, %614 ]
  %593 = phi i64 [ 0, %581 ], [ %636, %614 ]
  %594 = phi double [ %584, %581 ], [ %637, %614 ]
  br i1 %306, label %605, label %595

595:                                              ; preds = %591
  %596 = getelementptr inbounds double, double* %281, i64 %593
  %597 = load double, double* %596, align 8
  %598 = fmul double %594, %597
  %599 = fdiv double %598, %298
  %600 = add nsw i64 %593, %585
  %601 = getelementptr inbounds double, double* %274, i64 %600
  %602 = load double, double* %601, align 8
  %603 = fadd double %602, %599
  store double %603, double* %601, align 8
  %604 = load double, double* %583, align 8
  br label %605

605:                                              ; preds = %591, %595
  %606 = phi double [ %592, %591 ], [ %604, %595 ]
  %607 = fmul double %580, %606
  %608 = fdiv double %607, %298
  %609 = getelementptr inbounds double, double* %276, i64 %582
  %610 = load double, double* %609, align 8
  %611 = fadd double %608, %610
  store double %611, double* %609, align 8
  %612 = add nuw nsw i64 %582, 1
  %613 = icmp eq i64 %612, %302
  br i1 %613, label %586, label %581

614:                                              ; preds = %581, %614
  %615 = phi i64 [ %636, %614 ], [ 0, %581 ]
  %616 = phi double [ %637, %614 ], [ %584, %581 ]
  %617 = phi i64 [ %638, %614 ], [ %305, %581 ]
  %618 = getelementptr inbounds double, double* %281, i64 %615
  %619 = load double, double* %618, align 8
  %620 = fmul double %616, %619
  %621 = fdiv double %620, %298
  %622 = add nsw i64 %615, %585
  %623 = getelementptr inbounds double, double* %274, i64 %622
  %624 = load double, double* %623, align 8
  %625 = fadd double %624, %621
  store double %625, double* %623, align 8
  %626 = or i64 %615, 1
  %627 = load double, double* %583, align 8
  %628 = getelementptr inbounds double, double* %281, i64 %626
  %629 = load double, double* %628, align 8
  %630 = fmul double %627, %629
  %631 = fdiv double %630, %298
  %632 = add nsw i64 %626, %585
  %633 = getelementptr inbounds double, double* %274, i64 %632
  %634 = load double, double* %633, align 8
  %635 = fadd double %634, %631
  store double %635, double* %633, align 8
  %636 = add nuw nsw i64 %615, 2
  %637 = load double, double* %583, align 8
  %638 = add i64 %617, -2
  %639 = icmp eq i64 %638, 0
  br i1 %639, label %591, label %614

640:                                              ; preds = %398, %382, %332
  %641 = phi i64 [ %333, %332 ], [ %362, %382 ], [ %362, %398 ]
  %642 = icmp eq i64 %641, %227
  br i1 %642, label %319, label %322

643:                                              ; preds = %263
  %644 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %645 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %644, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.27, i64 0, i64 0), i32 %277) #11
  %646 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %647 = tail call i64 @fwrite(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.12, i64 0, i64 0), i64 32, i64 1, %struct._IO_FILE* %646) #10
  br label %1483

648:                                              ; preds = %319, %285
  tail call void @aom_free(i8* nonnull %280) #9
  %649 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %241
  %650 = tail call fastcc i32 @ar_equation_system_solve(%struct.aom_noise_state_t* %649, i32 %255)
  %651 = icmp eq i32 %650, 0
  br i1 %651, label %652, label %682

652:                                              ; preds = %648
  br i1 %243, label %653, label %679

653:                                              ; preds = %652
  %654 = load i32, i32* %282, align 8
  %655 = add nsw i32 %654, -1
  %656 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %241, i32 0, i32 2
  %657 = bitcast double** %656 to i8**
  %658 = load i8*, i8** %657, align 8
  %659 = sext i32 %654 to i64
  %660 = shl nsw i64 %659, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %658, i8 0, i64 %660, i1 false) #9
  %661 = getelementptr inbounds %struct.aom_noise_state_t, %struct.aom_noise_state_t* %649, i64 0, i32 0, i32 0
  %662 = load double*, double** %661, align 8
  %663 = load i32, i32* %282, align 8
  %664 = mul nsw i32 %663, %655
  %665 = add nsw i32 %664, %655
  %666 = sext i32 %665 to i64
  %667 = getelementptr inbounds double, double* %662, i64 %666
  %668 = load double, double* %667, align 8
  %669 = tail call double @llvm.fabs.f64(double %668) #9
  %670 = fcmp ogt double %669, 0x3EB0C6F7A0B5ED8D
  br i1 %670, label %671, label %682

671:                                              ; preds = %653
  %672 = load double*, double** %275, align 8
  %673 = sext i32 %655 to i64
  %674 = getelementptr inbounds double, double* %672, i64 %673
  %675 = load double, double* %674, align 8
  %676 = fdiv double %675, %668
  %677 = load double*, double** %656, align 8
  %678 = getelementptr inbounds double, double* %677, i64 %673
  store double %676, double* %678, align 8
  br label %682

679:                                              ; preds = %652
  %680 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %681 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %680, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.13, i64 0, i64 0), i32 0) #10
  br label %1483

682:                                              ; preds = %671, %653, %648
  %683 = load i8*, i8** %256, align 8
  %684 = load i8*, i8** %260, align 8
  %685 = load i32, i32* %264, align 4
  %686 = load double, double* %228, align 8
  %687 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %241, i32 3
  %688 = load double, double* %687, align 8
  br i1 %221, label %689, label %1186

689:                                              ; preds = %682
  %690 = load i32, i32* %5, align 4
  %691 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %241, i32 0, i32 2
  %692 = load double*, double** %691, align 8
  %693 = load i32, i32* %219, align 8
  %694 = getelementptr inbounds i32, i32* %254, i64 1
  %695 = icmp ne i8* %251, null
  %696 = select i1 %695, i8* %251, i8* %683
  %697 = select i1 %695, i32 %690, i32 %685
  %698 = bitcast i8* %696 to i16*
  %699 = sext i32 %697 to i64
  %700 = bitcast i8* %683 to i16*
  %701 = bitcast i8* %684 to i16*
  %702 = sext i32 %685 to i64
  %703 = icmp eq i64 %241, 0
  %704 = sext i32 %693 to i64
  %705 = getelementptr inbounds double, double* %692, i64 %704
  %706 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %241, i32 1, i32 1
  %707 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %241, i32 1, i32 2
  %708 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %241, i32 1, i32 3
  %709 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %241, i32 1, i32 0, i32 0
  %710 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %241, i32 1, i32 0, i32 1
  %711 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %241, i32 1, i32 5
  %712 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %241, i32 1, i32 4
  br label %713

713:                                              ; preds = %722, %689
  %714 = phi i64 [ 0, %689 ], [ %723, %722 ]
  %715 = load i32, i32* %694, align 4
  %716 = ashr i32 %8, %715
  %717 = trunc i64 %714 to i32
  %718 = mul nsw i32 %716, %717
  br i1 %222, label %719, label %722

719:                                              ; preds = %713
  %720 = mul nsw i64 %714, %225
  %721 = sext i32 %718 to i64
  br label %725

722:                                              ; preds = %1183, %713
  %723 = add nuw nsw i64 %714, 1
  %724 = icmp eq i64 %723, %226
  br i1 %724, label %1186, label %713

725:                                              ; preds = %1183, %719
  %726 = phi i64 [ 0, %719 ], [ %1184, %1183 ]
  %727 = load i32, i32* %254, align 4
  %728 = ashr i32 %8, %727
  %729 = trunc i64 %726 to i32
  %730 = mul nsw i32 %728, %729
  %731 = add nsw i64 %726, %720
  %732 = getelementptr inbounds i8, i8* %7, i64 %731
  %733 = load i8, i8* %732, align 1
  %734 = icmp eq i8 %733, 0
  br i1 %734, label %1183, label %735

735:                                              ; preds = %725
  %736 = load i32, i32* %694, align 4
  %737 = ashr i32 %4, %736
  %738 = ashr i32 %8, %736
  %739 = mul nsw i32 %738, %717
  %740 = sub nsw i32 %737, %739
  %741 = icmp slt i32 %740, %738
  %742 = select i1 %741, i32 %740, i32 %738
  %743 = ashr i32 %3, %727
  %744 = sub nsw i32 %743, %730
  %745 = icmp slt i32 %744, %728
  %746 = select i1 %745, i32 %744, i32 %728
  %747 = mul nsw i32 %742, %746
  %748 = icmp sgt i32 %747, %8
  br i1 %748, label %749, label %1183

749:                                              ; preds = %735
  %750 = shl i32 %730, %727
  %751 = shl i32 %718, %736
  %752 = load i32, i32* %223, align 4
  %753 = icmp eq i32 %752, 0
  %754 = sub nsw i32 %4, %751
  %755 = icmp slt i32 %754, %8
  %756 = select i1 %755, i32 %754, i32 %8
  %757 = sub nsw i32 %3, %750
  %758 = icmp slt i32 %757, %8
  %759 = select i1 %758, i32 %757, i32 %8
  %760 = icmp sgt i32 %756, 0
  br i1 %753, label %830, label %761

761:                                              ; preds = %749
  br i1 %760, label %762, label %899

762:                                              ; preds = %761
  %763 = icmp sgt i32 %759, 0
  %764 = sext i32 %759 to i64
  %765 = sext i32 %751 to i64
  %766 = sext i32 %750 to i64
  %767 = sext i32 %756 to i64
  %768 = add nsw i64 %764, -1
  %769 = and i64 %764, 3
  %770 = icmp ult i64 %768, 3
  %771 = sub nsw i64 %764, %769
  %772 = icmp eq i64 %769, 0
  br label %773

773:                                              ; preds = %796, %762
  %774 = phi i64 [ 0, %762 ], [ %798, %796 ]
  %775 = phi double [ 0.000000e+00, %762 ], [ %797, %796 ]
  br i1 %763, label %776, label %796

776:                                              ; preds = %773
  %777 = add nsw i64 %774, %765
  %778 = mul nsw i64 %777, %699
  %779 = add nsw i64 %778, %766
  br i1 %770, label %780, label %800

780:                                              ; preds = %800, %776
  %781 = phi double [ undef, %776 ], [ %826, %800 ]
  %782 = phi i64 [ 0, %776 ], [ %827, %800 ]
  %783 = phi double [ %775, %776 ], [ %826, %800 ]
  br i1 %772, label %796, label %784

784:                                              ; preds = %780, %784
  %785 = phi i64 [ %793, %784 ], [ %782, %780 ]
  %786 = phi double [ %792, %784 ], [ %783, %780 ]
  %787 = phi i64 [ %794, %784 ], [ %769, %780 ]
  %788 = add nsw i64 %779, %785
  %789 = getelementptr inbounds i16, i16* %698, i64 %788
  %790 = load i16, i16* %789, align 2
  %791 = uitofp i16 %790 to double
  %792 = fadd double %786, %791
  %793 = add nuw nsw i64 %785, 1
  %794 = add i64 %787, -1
  %795 = icmp eq i64 %794, 0
  br i1 %795, label %796, label %784, !llvm.loop !41

796:                                              ; preds = %780, %784, %773
  %797 = phi double [ %775, %773 ], [ %781, %780 ], [ %792, %784 ]
  %798 = add nuw nsw i64 %774, 1
  %799 = icmp slt i64 %798, %767
  br i1 %799, label %773, label %899

800:                                              ; preds = %776, %800
  %801 = phi i64 [ %827, %800 ], [ 0, %776 ]
  %802 = phi double [ %826, %800 ], [ %775, %776 ]
  %803 = phi i64 [ %828, %800 ], [ %771, %776 ]
  %804 = add nsw i64 %779, %801
  %805 = getelementptr inbounds i16, i16* %698, i64 %804
  %806 = load i16, i16* %805, align 2
  %807 = uitofp i16 %806 to double
  %808 = fadd double %802, %807
  %809 = or i64 %801, 1
  %810 = add nsw i64 %779, %809
  %811 = getelementptr inbounds i16, i16* %698, i64 %810
  %812 = load i16, i16* %811, align 2
  %813 = uitofp i16 %812 to double
  %814 = fadd double %808, %813
  %815 = or i64 %801, 2
  %816 = add nsw i64 %779, %815
  %817 = getelementptr inbounds i16, i16* %698, i64 %816
  %818 = load i16, i16* %817, align 2
  %819 = uitofp i16 %818 to double
  %820 = fadd double %814, %819
  %821 = or i64 %801, 3
  %822 = add nsw i64 %779, %821
  %823 = getelementptr inbounds i16, i16* %698, i64 %822
  %824 = load i16, i16* %823, align 2
  %825 = uitofp i16 %824 to double
  %826 = fadd double %820, %825
  %827 = add nuw nsw i64 %801, 4
  %828 = add i64 %803, -4
  %829 = icmp eq i64 %828, 0
  br i1 %829, label %780, label %800

830:                                              ; preds = %749
  br i1 %760, label %831, label %899

831:                                              ; preds = %830
  %832 = icmp sgt i32 %759, 0
  %833 = sext i32 %759 to i64
  %834 = sext i32 %751 to i64
  %835 = sext i32 %750 to i64
  %836 = sext i32 %756 to i64
  %837 = add nsw i64 %833, -1
  %838 = and i64 %833, 3
  %839 = icmp ult i64 %837, 3
  %840 = sub nsw i64 %833, %838
  %841 = icmp eq i64 %838, 0
  br label %842

842:                                              ; preds = %865, %831
  %843 = phi i64 [ 0, %831 ], [ %867, %865 ]
  %844 = phi double [ 0.000000e+00, %831 ], [ %866, %865 ]
  br i1 %832, label %845, label %865

845:                                              ; preds = %842
  %846 = add nsw i64 %843, %834
  %847 = mul nsw i64 %846, %699
  %848 = add nsw i64 %847, %835
  br i1 %839, label %849, label %869

849:                                              ; preds = %869, %845
  %850 = phi double [ undef, %845 ], [ %895, %869 ]
  %851 = phi i64 [ 0, %845 ], [ %896, %869 ]
  %852 = phi double [ %844, %845 ], [ %895, %869 ]
  br i1 %841, label %865, label %853

853:                                              ; preds = %849, %853
  %854 = phi i64 [ %862, %853 ], [ %851, %849 ]
  %855 = phi double [ %861, %853 ], [ %852, %849 ]
  %856 = phi i64 [ %863, %853 ], [ %838, %849 ]
  %857 = add nsw i64 %848, %854
  %858 = getelementptr inbounds i8, i8* %696, i64 %857
  %859 = load i8, i8* %858, align 1
  %860 = uitofp i8 %859 to double
  %861 = fadd double %855, %860
  %862 = add nuw nsw i64 %854, 1
  %863 = add i64 %856, -1
  %864 = icmp eq i64 %863, 0
  br i1 %864, label %865, label %853, !llvm.loop !42

865:                                              ; preds = %849, %853, %842
  %866 = phi double [ %844, %842 ], [ %850, %849 ], [ %861, %853 ]
  %867 = add nuw nsw i64 %843, 1
  %868 = icmp slt i64 %867, %836
  br i1 %868, label %842, label %899

869:                                              ; preds = %845, %869
  %870 = phi i64 [ %896, %869 ], [ 0, %845 ]
  %871 = phi double [ %895, %869 ], [ %844, %845 ]
  %872 = phi i64 [ %897, %869 ], [ %840, %845 ]
  %873 = add nsw i64 %848, %870
  %874 = getelementptr inbounds i8, i8* %696, i64 %873
  %875 = load i8, i8* %874, align 1
  %876 = uitofp i8 %875 to double
  %877 = fadd double %871, %876
  %878 = or i64 %870, 1
  %879 = add nsw i64 %848, %878
  %880 = getelementptr inbounds i8, i8* %696, i64 %879
  %881 = load i8, i8* %880, align 1
  %882 = uitofp i8 %881 to double
  %883 = fadd double %877, %882
  %884 = or i64 %870, 2
  %885 = add nsw i64 %848, %884
  %886 = getelementptr inbounds i8, i8* %696, i64 %885
  %887 = load i8, i8* %886, align 1
  %888 = uitofp i8 %887 to double
  %889 = fadd double %883, %888
  %890 = or i64 %870, 3
  %891 = add nsw i64 %848, %890
  %892 = getelementptr inbounds i8, i8* %696, i64 %891
  %893 = load i8, i8* %892, align 1
  %894 = uitofp i8 %893 to double
  %895 = fadd double %889, %894
  %896 = add nuw nsw i64 %870, 4
  %897 = add i64 %872, -4
  %898 = icmp eq i64 %897, 0
  br i1 %898, label %849, label %869

899:                                              ; preds = %796, %865, %830, %761
  %900 = phi double [ 0.000000e+00, %761 ], [ 0.000000e+00, %830 ], [ %866, %865 ], [ %797, %796 ]
  %901 = mul nsw i32 %756, %759
  %902 = sitofp i32 %901 to double
  %903 = fdiv double %900, %902
  %904 = sub nsw i32 %737, %718
  %905 = icmp slt i32 %904, %738
  %906 = select i1 %905, i32 %904, i32 %738
  %907 = icmp sgt i32 %906, 0
  br i1 %753, label %988, label %908

908:                                              ; preds = %899
  br i1 %907, label %909, label %980

909:                                              ; preds = %908
  %910 = icmp sgt i32 %746, 0
  %911 = sext i32 %746 to i64
  %912 = sext i32 %730 to i64
  %913 = sext i32 %906 to i64
  %914 = and i64 %911, 1
  %915 = icmp eq i32 %746, 1
  %916 = sub nsw i64 %911, %914
  %917 = icmp eq i64 %914, 0
  br label %918

918:                                              ; preds = %944, %909
  %919 = phi i64 [ 0, %909 ], [ %947, %944 ]
  %920 = phi double [ 0.000000e+00, %909 ], [ %946, %944 ]
  %921 = phi double [ 0.000000e+00, %909 ], [ %945, %944 ]
  br i1 %910, label %922, label %944

922:                                              ; preds = %918
  %923 = add nsw i64 %919, %721
  %924 = mul nsw i64 %923, %702
  %925 = add nsw i64 %924, %912
  br i1 %915, label %926, label %949

926:                                              ; preds = %949, %922
  %927 = phi double [ undef, %922 ], [ %974, %949 ]
  %928 = phi double [ undef, %922 ], [ %976, %949 ]
  %929 = phi i64 [ 0, %922 ], [ %977, %949 ]
  %930 = phi double [ %920, %922 ], [ %974, %949 ]
  %931 = phi double [ %921, %922 ], [ %976, %949 ]
  br i1 %917, label %944, label %932

932:                                              ; preds = %926
  %933 = add nsw i64 %925, %929
  %934 = getelementptr inbounds i16, i16* %700, i64 %933
  %935 = load i16, i16* %934, align 2
  %936 = uitofp i16 %935 to double
  %937 = getelementptr inbounds i16, i16* %701, i64 %933
  %938 = load i16, i16* %937, align 2
  %939 = uitofp i16 %938 to double
  %940 = fsub double %936, %939
  %941 = fmul double %940, %940
  %942 = fadd double %931, %941
  %943 = fadd double %930, %940
  br label %944

944:                                              ; preds = %932, %926, %918
  %945 = phi double [ %921, %918 ], [ %928, %926 ], [ %942, %932 ]
  %946 = phi double [ %920, %918 ], [ %927, %926 ], [ %943, %932 ]
  %947 = add nuw nsw i64 %919, 1
  %948 = icmp slt i64 %947, %913
  br i1 %948, label %918, label %980

949:                                              ; preds = %922, %949
  %950 = phi i64 [ %977, %949 ], [ 0, %922 ]
  %951 = phi double [ %974, %949 ], [ %920, %922 ]
  %952 = phi double [ %976, %949 ], [ %921, %922 ]
  %953 = phi i64 [ %978, %949 ], [ %916, %922 ]
  %954 = add nsw i64 %925, %950
  %955 = getelementptr inbounds i16, i16* %700, i64 %954
  %956 = load i16, i16* %955, align 2
  %957 = uitofp i16 %956 to double
  %958 = getelementptr inbounds i16, i16* %701, i64 %954
  %959 = load i16, i16* %958, align 2
  %960 = uitofp i16 %959 to double
  %961 = fsub double %957, %960
  %962 = fadd double %951, %961
  %963 = fmul double %961, %961
  %964 = fadd double %952, %963
  %965 = or i64 %950, 1
  %966 = add nsw i64 %925, %965
  %967 = getelementptr inbounds i16, i16* %700, i64 %966
  %968 = load i16, i16* %967, align 2
  %969 = uitofp i16 %968 to double
  %970 = getelementptr inbounds i16, i16* %701, i64 %966
  %971 = load i16, i16* %970, align 2
  %972 = uitofp i16 %971 to double
  %973 = fsub double %969, %972
  %974 = fadd double %962, %973
  %975 = fmul double %973, %973
  %976 = fadd double %964, %975
  %977 = add nuw nsw i64 %950, 2
  %978 = add i64 %953, -2
  %979 = icmp eq i64 %978, 0
  br i1 %979, label %926, label %949

980:                                              ; preds = %944, %908
  %981 = phi double [ 0.000000e+00, %908 ], [ %945, %944 ]
  %982 = phi double [ 0.000000e+00, %908 ], [ %946, %944 ]
  %983 = mul nsw i32 %906, %746
  %984 = sitofp i32 %983 to double
  %985 = fdiv double %982, %984
  %986 = fdiv double %981, %984
  %987 = fmul double %985, %985
  br label %1068

988:                                              ; preds = %899
  br i1 %907, label %989, label %1060

989:                                              ; preds = %988
  %990 = icmp sgt i32 %746, 0
  %991 = sext i32 %746 to i64
  %992 = sext i32 %730 to i64
  %993 = sext i32 %906 to i64
  %994 = and i64 %991, 1
  %995 = icmp eq i32 %746, 1
  %996 = sub nsw i64 %991, %994
  %997 = icmp eq i64 %994, 0
  br label %998

998:                                              ; preds = %1024, %989
  %999 = phi i64 [ 0, %989 ], [ %1027, %1024 ]
  %1000 = phi double [ 0.000000e+00, %989 ], [ %1026, %1024 ]
  %1001 = phi double [ 0.000000e+00, %989 ], [ %1025, %1024 ]
  br i1 %990, label %1002, label %1024

1002:                                             ; preds = %998
  %1003 = add nsw i64 %999, %721
  %1004 = mul nsw i64 %1003, %702
  %1005 = add nsw i64 %1004, %992
  br i1 %995, label %1006, label %1029

1006:                                             ; preds = %1029, %1002
  %1007 = phi double [ undef, %1002 ], [ %1054, %1029 ]
  %1008 = phi double [ undef, %1002 ], [ %1056, %1029 ]
  %1009 = phi i64 [ 0, %1002 ], [ %1057, %1029 ]
  %1010 = phi double [ %1000, %1002 ], [ %1054, %1029 ]
  %1011 = phi double [ %1001, %1002 ], [ %1056, %1029 ]
  br i1 %997, label %1024, label %1012

1012:                                             ; preds = %1006
  %1013 = add nsw i64 %1005, %1009
  %1014 = getelementptr inbounds i8, i8* %683, i64 %1013
  %1015 = load i8, i8* %1014, align 1
  %1016 = uitofp i8 %1015 to double
  %1017 = getelementptr inbounds i8, i8* %684, i64 %1013
  %1018 = load i8, i8* %1017, align 1
  %1019 = uitofp i8 %1018 to double
  %1020 = fsub double %1016, %1019
  %1021 = fmul double %1020, %1020
  %1022 = fadd double %1011, %1021
  %1023 = fadd double %1010, %1020
  br label %1024

1024:                                             ; preds = %1012, %1006, %998
  %1025 = phi double [ %1001, %998 ], [ %1008, %1006 ], [ %1022, %1012 ]
  %1026 = phi double [ %1000, %998 ], [ %1007, %1006 ], [ %1023, %1012 ]
  %1027 = add nuw nsw i64 %999, 1
  %1028 = icmp slt i64 %1027, %993
  br i1 %1028, label %998, label %1060

1029:                                             ; preds = %1002, %1029
  %1030 = phi i64 [ %1057, %1029 ], [ 0, %1002 ]
  %1031 = phi double [ %1054, %1029 ], [ %1000, %1002 ]
  %1032 = phi double [ %1056, %1029 ], [ %1001, %1002 ]
  %1033 = phi i64 [ %1058, %1029 ], [ %996, %1002 ]
  %1034 = add nsw i64 %1005, %1030
  %1035 = getelementptr inbounds i8, i8* %683, i64 %1034
  %1036 = load i8, i8* %1035, align 1
  %1037 = uitofp i8 %1036 to double
  %1038 = getelementptr inbounds i8, i8* %684, i64 %1034
  %1039 = load i8, i8* %1038, align 1
  %1040 = uitofp i8 %1039 to double
  %1041 = fsub double %1037, %1040
  %1042 = fadd double %1031, %1041
  %1043 = fmul double %1041, %1041
  %1044 = fadd double %1032, %1043
  %1045 = or i64 %1030, 1
  %1046 = add nsw i64 %1005, %1045
  %1047 = getelementptr inbounds i8, i8* %683, i64 %1046
  %1048 = load i8, i8* %1047, align 1
  %1049 = uitofp i8 %1048 to double
  %1050 = getelementptr inbounds i8, i8* %684, i64 %1046
  %1051 = load i8, i8* %1050, align 1
  %1052 = uitofp i8 %1051 to double
  %1053 = fsub double %1049, %1052
  %1054 = fadd double %1042, %1053
  %1055 = fmul double %1053, %1053
  %1056 = fadd double %1044, %1055
  %1057 = add nuw nsw i64 %1030, 2
  %1058 = add i64 %1033, -2
  %1059 = icmp eq i64 %1058, 0
  br i1 %1059, label %1006, label %1029

1060:                                             ; preds = %1024, %988
  %1061 = phi double [ 0.000000e+00, %988 ], [ %1025, %1024 ]
  %1062 = phi double [ 0.000000e+00, %988 ], [ %1026, %1024 ]
  %1063 = mul nsw i32 %906, %746
  %1064 = sitofp i32 %1063 to double
  %1065 = fdiv double %1062, %1064
  %1066 = fdiv double %1061, %1064
  %1067 = fmul double %1065, %1065
  br label %1068

1068:                                             ; preds = %1060, %980
  %1069 = phi double [ %1067, %1060 ], [ %987, %980 ]
  %1070 = phi double [ %1066, %1060 ], [ %986, %980 ]
  %1071 = fsub double %1070, %1069
  br i1 %703, label %1106, label %1072

1072:                                             ; preds = %1068
  %1073 = load double, double* %229, align 8
  %1074 = load double, double* %230, align 8
  %1075 = fcmp ogt double %1073, %903
  %1076 = fcmp olt double %1074, %903
  %1077 = select i1 %1076, double %1074, double %903
  %1078 = select i1 %1075, double %1073, double %1077
  %1079 = fsub double %1074, %1073
  %1080 = load i32, i32* %231, align 8
  %1081 = add nsw i32 %1080, -1
  %1082 = sitofp i32 %1081 to double
  %1083 = fsub double %1078, %1073
  %1084 = fmul double %1083, %1082
  %1085 = fdiv double %1084, %1079
  %1086 = tail call double @llvm.floor.f64(double %1085) #9
  %1087 = fptosi double %1086 to i32
  %1088 = add nsw i32 %1087, 1
  %1089 = icmp sgt i32 %1080, %1088
  %1090 = select i1 %1089, i32 %1088, i32 %1081
  %1091 = sitofp i32 %1087 to double
  %1092 = fsub double %1085, %1091
  %1093 = fsub double 1.000000e+00, %1092
  %1094 = load double*, double** %50, align 8
  %1095 = sext i32 %1087 to i64
  %1096 = getelementptr inbounds double, double* %1094, i64 %1095
  %1097 = load double, double* %1096, align 8
  %1098 = fmul double %1097, %1093
  %1099 = sext i32 %1090 to i64
  %1100 = getelementptr inbounds double, double* %1094, i64 %1099
  %1101 = load double, double* %1100, align 8
  %1102 = fmul double %1101, %1092
  %1103 = fadd double %1102, %1098
  %1104 = fmul double %686, %1103
  %1105 = load double, double* %705, align 8
  br label %1106

1106:                                             ; preds = %1068, %1072
  %1107 = phi double [ %1104, %1072 ], [ 0.000000e+00, %1068 ]
  %1108 = phi double [ %1105, %1072 ], [ 0.000000e+00, %1068 ]
  %1109 = fmul double %1071, 6.250000e-02
  %1110 = fmul double %1107, %1108
  %1111 = fmul double %1110, %1110
  %1112 = fsub double %1071, %1111
  %1113 = fcmp ogt double %1109, %1112
  %1114 = select i1 %1113, double %1109, double %1112
  %1115 = tail call double @sqrt(double %1114) #9
  %1116 = fdiv double %1115, %688
  %1117 = load double, double* %706, align 8
  %1118 = load double, double* %707, align 8
  %1119 = fcmp ogt double %1117, %903
  %1120 = fcmp olt double %1118, %903
  %1121 = select i1 %1120, double %1118, double %903
  %1122 = select i1 %1119, double %1117, double %1121
  %1123 = fsub double %1118, %1117
  %1124 = load i32, i32* %708, align 8
  %1125 = add nsw i32 %1124, -1
  %1126 = sitofp i32 %1125 to double
  %1127 = fsub double %1122, %1117
  %1128 = fmul double %1127, %1126
  %1129 = fdiv double %1128, %1123
  %1130 = tail call double @llvm.floor.f64(double %1129) #9
  %1131 = fptosi double %1130 to i32
  %1132 = add nsw i32 %1131, 1
  %1133 = icmp sgt i32 %1124, %1132
  %1134 = select i1 %1133, i32 %1132, i32 %1125
  %1135 = sitofp i32 %1131 to double
  %1136 = fsub double %1129, %1135
  %1137 = fsub double 1.000000e+00, %1136
  %1138 = fmul double %1137, %1137
  %1139 = load double*, double** %709, align 8
  %1140 = mul nsw i32 %1124, %1131
  %1141 = add nsw i32 %1140, %1131
  %1142 = sext i32 %1141 to i64
  %1143 = getelementptr inbounds double, double* %1139, i64 %1142
  %1144 = load double, double* %1143, align 8
  %1145 = fadd double %1144, %1138
  store double %1145, double* %1143, align 8
  %1146 = fmul double %1136, %1137
  %1147 = load double*, double** %709, align 8
  %1148 = mul nsw i32 %1134, %1124
  %1149 = add nsw i32 %1148, %1131
  %1150 = sext i32 %1149 to i64
  %1151 = getelementptr inbounds double, double* %1147, i64 %1150
  %1152 = load double, double* %1151, align 8
  %1153 = fadd double %1152, %1146
  store double %1153, double* %1151, align 8
  %1154 = fmul double %1136, %1136
  %1155 = load double*, double** %709, align 8
  %1156 = add nsw i32 %1148, %1134
  %1157 = sext i32 %1156 to i64
  %1158 = getelementptr inbounds double, double* %1155, i64 %1157
  %1159 = load double, double* %1158, align 8
  %1160 = fadd double %1159, %1154
  store double %1160, double* %1158, align 8
  %1161 = load double*, double** %709, align 8
  %1162 = add nsw i32 %1134, %1140
  %1163 = sext i32 %1162 to i64
  %1164 = getelementptr inbounds double, double* %1161, i64 %1163
  %1165 = load double, double* %1164, align 8
  %1166 = fadd double %1165, %1146
  store double %1166, double* %1164, align 8
  %1167 = fmul double %1116, %1137
  %1168 = load double*, double** %710, align 8
  %1169 = sext i32 %1131 to i64
  %1170 = getelementptr inbounds double, double* %1168, i64 %1169
  %1171 = load double, double* %1170, align 8
  %1172 = fadd double %1167, %1171
  store double %1172, double* %1170, align 8
  %1173 = fmul double %1116, %1136
  %1174 = load double*, double** %710, align 8
  %1175 = sext i32 %1134 to i64
  %1176 = getelementptr inbounds double, double* %1174, i64 %1175
  %1177 = load double, double* %1176, align 8
  %1178 = fadd double %1173, %1177
  store double %1178, double* %1176, align 8
  %1179 = load double, double* %711, align 8
  %1180 = fadd double %1116, %1179
  store double %1180, double* %711, align 8
  %1181 = load i32, i32* %712, align 4
  %1182 = add nsw i32 %1181, 1
  store i32 %1182, i32* %712, align 4
  br label %1183

1183:                                             ; preds = %1106, %735, %725
  %1184 = add nuw nsw i64 %726, 1
  %1185 = icmp eq i64 %1184, %227
  br i1 %1185, label %722, label %725

1186:                                             ; preds = %722, %682
  %1187 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %241, i32 1
  %1188 = tail call i32 @aom_noise_strength_solver_solve(%struct.aom_noise_strength_solver_t* %1187)
  %1189 = icmp eq i32 %1188, 0
  br i1 %1189, label %1190, label %1193

1190:                                             ; preds = %1186
  %1191 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %1192 = tail call i64 @fwrite(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.14, i64 0, i64 0), i64 38, i64 1, %struct._IO_FILE* %1191) #10
  br label %1483

1193:                                             ; preds = %1186
  %1194 = icmp eq i64 %241, 0
  br i1 %1194, label %1195, label %1301

1195:                                             ; preds = %1193
  %1196 = load i32, i32* %236, align 4
  %1197 = icmp sgt i32 %1196, 0
  br i1 %1197, label %1198, label %1301

1198:                                             ; preds = %1195
  %1199 = load i32, i32* %220, align 8
  %1200 = add nsw i32 %1199, -8
  %1201 = shl i32 1, %1200
  %1202 = sitofp i32 %1201 to double
  %1203 = fmul double %1202, 5.000000e-03
  %1204 = load double*, double** %35, align 8
  %1205 = load double*, double** %232, align 8
  %1206 = load i32, i32* %233, align 8
  %1207 = tail call double @aom_normalized_cross_correlation(double* %1204, double* %1205, i32 %1206) #9
  %1208 = fcmp olt double %1207, 9.000000e-01
  br i1 %1208, label %1485, label %1209

1209:                                             ; preds = %1198
  %1210 = load i32, i32* %231, align 8
  %1211 = sitofp i32 %1210 to double
  %1212 = fdiv double 1.000000e+00, %1211
  %1213 = load i32, i32* %43, align 8
  %1214 = icmp sgt i32 %1213, 0
  br i1 %1214, label %1215, label %1230

1215:                                             ; preds = %1209, %1253
  %1216 = phi i64 [ %1267, %1253 ], [ 0, %1209 ]
  %1217 = phi i32 [ %1268, %1253 ], [ %1213, %1209 ]
  %1218 = phi double [ %1266, %1253 ], [ 0.000000e+00, %1209 ]
  %1219 = phi double [ %1265, %1253 ], [ 0.000000e+00, %1209 ]
  %1220 = icmp sgt i32 %1217, 0
  br i1 %1220, label %1221, label %1253

1221:                                             ; preds = %1215
  %1222 = load double*, double** %234, align 8
  %1223 = sext i32 %1217 to i64
  %1224 = zext i32 %1217 to i64
  %1225 = add nsw i64 %1224, -1
  %1226 = and i64 %1224, 3
  %1227 = icmp ult i64 %1225, 3
  br i1 %1227, label %1236, label %1228

1228:                                             ; preds = %1221
  %1229 = sub nsw i64 %1224, %1226
  br label %1271

1230:                                             ; preds = %1253, %1209
  %1231 = phi double [ 0.000000e+00, %1209 ], [ %1265, %1253 ]
  %1232 = phi double [ 0.000000e+00, %1209 ], [ %1266, %1253 ]
  %1233 = fmul double %1212, %1231
  %1234 = fdiv double %1233, %1232
  %1235 = fcmp ogt double %1234, %1203
  br i1 %1235, label %1485, label %1301

1236:                                             ; preds = %1271, %1221
  %1237 = phi double [ undef, %1221 ], [ %1297, %1271 ]
  %1238 = phi i64 [ 0, %1221 ], [ %1298, %1271 ]
  %1239 = phi double [ 0.000000e+00, %1221 ], [ %1297, %1271 ]
  %1240 = icmp eq i64 %1226, 0
  br i1 %1240, label %1253, label %1241

1241:                                             ; preds = %1236, %1241
  %1242 = phi i64 [ %1250, %1241 ], [ %1238, %1236 ]
  %1243 = phi double [ %1249, %1241 ], [ %1239, %1236 ]
  %1244 = phi i64 [ %1251, %1241 ], [ %1226, %1236 ]
  %1245 = mul nsw i64 %1242, %1223
  %1246 = add nsw i64 %1245, %1216
  %1247 = getelementptr inbounds double, double* %1222, i64 %1246
  %1248 = load double, double* %1247, align 8
  %1249 = fadd double %1243, %1248
  %1250 = add nuw nsw i64 %1242, 1
  %1251 = add i64 %1244, -1
  %1252 = icmp eq i64 %1251, 0
  br i1 %1252, label %1253, label %1241, !llvm.loop !43

1253:                                             ; preds = %1236, %1241, %1215
  %1254 = phi double [ 0.000000e+00, %1215 ], [ %1237, %1236 ], [ %1249, %1241 ]
  %1255 = tail call double @sqrt(double %1254) #9
  %1256 = load double*, double** %50, align 8
  %1257 = getelementptr inbounds double, double* %1256, i64 %1216
  %1258 = load double, double* %1257, align 8
  %1259 = load double*, double** %235, align 8
  %1260 = getelementptr inbounds double, double* %1259, i64 %1216
  %1261 = load double, double* %1260, align 8
  %1262 = fsub double %1258, %1261
  %1263 = tail call double @llvm.fabs.f64(double %1262) #9
  %1264 = fmul double %1255, %1263
  %1265 = fadd double %1219, %1264
  %1266 = fadd double %1218, %1255
  %1267 = add nuw nsw i64 %1216, 1
  %1268 = load i32, i32* %43, align 8
  %1269 = sext i32 %1268 to i64
  %1270 = icmp slt i64 %1267, %1269
  br i1 %1270, label %1215, label %1230

1271:                                             ; preds = %1271, %1228
  %1272 = phi i64 [ 0, %1228 ], [ %1298, %1271 ]
  %1273 = phi double [ 0.000000e+00, %1228 ], [ %1297, %1271 ]
  %1274 = phi i64 [ %1229, %1228 ], [ %1299, %1271 ]
  %1275 = mul nsw i64 %1272, %1223
  %1276 = add nsw i64 %1275, %1216
  %1277 = getelementptr inbounds double, double* %1222, i64 %1276
  %1278 = load double, double* %1277, align 8
  %1279 = fadd double %1273, %1278
  %1280 = or i64 %1272, 1
  %1281 = mul nsw i64 %1280, %1223
  %1282 = add nsw i64 %1281, %1216
  %1283 = getelementptr inbounds double, double* %1222, i64 %1282
  %1284 = load double, double* %1283, align 8
  %1285 = fadd double %1279, %1284
  %1286 = or i64 %1272, 2
  %1287 = mul nsw i64 %1286, %1223
  %1288 = add nsw i64 %1287, %1216
  %1289 = getelementptr inbounds double, double* %1222, i64 %1288
  %1290 = load double, double* %1289, align 8
  %1291 = fadd double %1285, %1290
  %1292 = or i64 %1272, 3
  %1293 = mul nsw i64 %1292, %1223
  %1294 = add nsw i64 %1293, %1216
  %1295 = getelementptr inbounds double, double* %1222, i64 %1294
  %1296 = load double, double* %1295, align 8
  %1297 = fadd double %1291, %1296
  %1298 = add nuw nsw i64 %1272, 4
  %1299 = add i64 %1274, -4
  %1300 = icmp eq i64 %1299, 0
  br i1 %1300, label %1236, label %1271

1301:                                             ; preds = %1230, %1195, %1193
  %1302 = icmp eq i32 %242, 0
  br i1 %1302, label %1303, label %1485

1303:                                             ; preds = %1301
  %1304 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %241, i32 2
  %1305 = load i32, i32* %1304, align 8
  %1306 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %241
  %1307 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %241, i32 2
  %1308 = load i32, i32* %1307, align 8
  %1309 = add nsw i32 %1308, %1305
  store i32 %1309, i32* %1307, align 8
  %1310 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %241, i32 0, i32 3
  %1311 = load i32, i32* %1310, align 8
  %1312 = icmp sgt i32 %1311, 0
  br i1 %1312, label %1313, label %1370

1313:                                             ; preds = %1303
  %1314 = getelementptr inbounds %struct.aom_noise_state_t, %struct.aom_noise_state_t* %649, i64 0, i32 0, i32 0
  %1315 = getelementptr inbounds %struct.aom_noise_state_t, %struct.aom_noise_state_t* %1306, i64 0, i32 0, i32 0
  %1316 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %241, i32 0, i32 1
  %1317 = sext i32 %1311 to i64
  %1318 = zext i32 %1311 to i64
  %1319 = and i64 %1318, 1
  %1320 = icmp eq i32 %1311, 1
  %1321 = sub nsw i64 %1318, %1319
  %1322 = icmp eq i64 %1319, 0
  br label %1323

1323:                                             ; preds = %1360, %1313
  %1324 = phi i64 [ 0, %1313 ], [ %1368, %1360 ]
  %1325 = mul nsw i64 %1324, %1317
  br i1 %1320, label %1349, label %1326

1326:                                             ; preds = %1323, %1326
  %1327 = phi i64 [ %1346, %1326 ], [ 0, %1323 ]
  %1328 = phi i64 [ %1347, %1326 ], [ %1321, %1323 ]
  %1329 = load double*, double** %1314, align 8
  %1330 = add nsw i64 %1327, %1325
  %1331 = getelementptr inbounds double, double* %1329, i64 %1330
  %1332 = load double, double* %1331, align 8
  %1333 = load double*, double** %1315, align 8
  %1334 = getelementptr inbounds double, double* %1333, i64 %1330
  %1335 = load double, double* %1334, align 8
  %1336 = fadd double %1332, %1335
  store double %1336, double* %1334, align 8
  %1337 = or i64 %1327, 1
  %1338 = load double*, double** %1314, align 8
  %1339 = add nsw i64 %1337, %1325
  %1340 = getelementptr inbounds double, double* %1338, i64 %1339
  %1341 = load double, double* %1340, align 8
  %1342 = load double*, double** %1315, align 8
  %1343 = getelementptr inbounds double, double* %1342, i64 %1339
  %1344 = load double, double* %1343, align 8
  %1345 = fadd double %1341, %1344
  store double %1345, double* %1343, align 8
  %1346 = add nuw nsw i64 %1327, 2
  %1347 = add i64 %1328, -2
  %1348 = icmp eq i64 %1347, 0
  br i1 %1348, label %1349, label %1326

1349:                                             ; preds = %1326, %1323
  %1350 = phi i64 [ 0, %1323 ], [ %1346, %1326 ]
  br i1 %1322, label %1360, label %1351

1351:                                             ; preds = %1349
  %1352 = load double*, double** %1314, align 8
  %1353 = add nsw i64 %1350, %1325
  %1354 = getelementptr inbounds double, double* %1352, i64 %1353
  %1355 = load double, double* %1354, align 8
  %1356 = load double*, double** %1315, align 8
  %1357 = getelementptr inbounds double, double* %1356, i64 %1353
  %1358 = load double, double* %1357, align 8
  %1359 = fadd double %1355, %1358
  store double %1359, double* %1357, align 8
  br label %1360

1360:                                             ; preds = %1349, %1351
  %1361 = load double*, double** %275, align 8
  %1362 = getelementptr inbounds double, double* %1361, i64 %1324
  %1363 = load double, double* %1362, align 8
  %1364 = load double*, double** %1316, align 8
  %1365 = getelementptr inbounds double, double* %1364, i64 %1324
  %1366 = load double, double* %1365, align 8
  %1367 = fadd double %1363, %1366
  store double %1367, double* %1365, align 8
  %1368 = add nuw nsw i64 %1324, 1
  %1369 = icmp eq i64 %1368, %1318
  br i1 %1369, label %1370, label %1323

1370:                                             ; preds = %1360, %1303
  %1371 = tail call fastcc i32 @ar_equation_system_solve(%struct.aom_noise_state_t* %1306, i32 %255)
  %1372 = icmp eq i32 %1371, 0
  br i1 %1372, label %1373, label %1404

1373:                                             ; preds = %1370
  br i1 %243, label %1374, label %1401

1374:                                             ; preds = %1373
  %1375 = load i32, i32* %1310, align 8
  %1376 = add nsw i32 %1375, -1
  %1377 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %241, i32 0, i32 2
  %1378 = bitcast double** %1377 to i8**
  %1379 = load i8*, i8** %1378, align 8
  %1380 = sext i32 %1375 to i64
  %1381 = shl nsw i64 %1380, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %1379, i8 0, i64 %1381, i1 false) #9
  %1382 = getelementptr inbounds %struct.aom_noise_state_t, %struct.aom_noise_state_t* %1306, i64 0, i32 0, i32 0
  %1383 = load double*, double** %1382, align 8
  %1384 = load i32, i32* %1310, align 8
  %1385 = mul nsw i32 %1384, %1376
  %1386 = add nsw i32 %1385, %1376
  %1387 = sext i32 %1386 to i64
  %1388 = getelementptr inbounds double, double* %1383, i64 %1387
  %1389 = load double, double* %1388, align 8
  %1390 = tail call double @llvm.fabs.f64(double %1389) #9
  %1391 = fcmp ogt double %1390, 0x3EB0C6F7A0B5ED8D
  br i1 %1391, label %1392, label %1404

1392:                                             ; preds = %1374
  %1393 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %241, i32 0, i32 1
  %1394 = load double*, double** %1393, align 8
  %1395 = sext i32 %1376 to i64
  %1396 = getelementptr inbounds double, double* %1394, i64 %1395
  %1397 = load double, double* %1396, align 8
  %1398 = fdiv double %1397, %1389
  %1399 = load double*, double** %1377, align 8
  %1400 = getelementptr inbounds double, double* %1399, i64 %1395
  store double %1398, double* %1400, align 8
  br label %1404

1401:                                             ; preds = %1373
  %1402 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %1403 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1402, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.15, i64 0, i64 0), i32 0) #10
  br label %1483

1404:                                             ; preds = %1392, %1374, %1370
  %1405 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %241, i32 1
  %1406 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %241, i32 1, i32 0, i32 3
  %1407 = load i32, i32* %1406, align 8
  %1408 = icmp sgt i32 %1407, 0
  br i1 %1408, label %1409, label %1467

1409:                                             ; preds = %1404
  %1410 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %1187, i64 0, i32 0, i32 0
  %1411 = getelementptr inbounds %struct.aom_noise_strength_solver_t, %struct.aom_noise_strength_solver_t* %1405, i64 0, i32 0, i32 0
  %1412 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %241, i32 1, i32 0, i32 1
  %1413 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %241, i32 1, i32 0, i32 1
  %1414 = sext i32 %1407 to i64
  %1415 = zext i32 %1407 to i64
  %1416 = and i64 %1415, 1
  %1417 = icmp eq i32 %1407, 1
  %1418 = sub nsw i64 %1415, %1416
  %1419 = icmp eq i64 %1416, 0
  br label %1420

1420:                                             ; preds = %1457, %1409
  %1421 = phi i64 [ 0, %1409 ], [ %1465, %1457 ]
  %1422 = mul nsw i64 %1421, %1414
  br i1 %1417, label %1446, label %1423

1423:                                             ; preds = %1420, %1423
  %1424 = phi i64 [ %1443, %1423 ], [ 0, %1420 ]
  %1425 = phi i64 [ %1444, %1423 ], [ %1418, %1420 ]
  %1426 = load double*, double** %1410, align 8
  %1427 = add nsw i64 %1424, %1422
  %1428 = getelementptr inbounds double, double* %1426, i64 %1427
  %1429 = load double, double* %1428, align 8
  %1430 = load double*, double** %1411, align 8
  %1431 = getelementptr inbounds double, double* %1430, i64 %1427
  %1432 = load double, double* %1431, align 8
  %1433 = fadd double %1429, %1432
  store double %1433, double* %1431, align 8
  %1434 = or i64 %1424, 1
  %1435 = load double*, double** %1410, align 8
  %1436 = add nsw i64 %1434, %1422
  %1437 = getelementptr inbounds double, double* %1435, i64 %1436
  %1438 = load double, double* %1437, align 8
  %1439 = load double*, double** %1411, align 8
  %1440 = getelementptr inbounds double, double* %1439, i64 %1436
  %1441 = load double, double* %1440, align 8
  %1442 = fadd double %1438, %1441
  store double %1442, double* %1440, align 8
  %1443 = add nuw nsw i64 %1424, 2
  %1444 = add i64 %1425, -2
  %1445 = icmp eq i64 %1444, 0
  br i1 %1445, label %1446, label %1423

1446:                                             ; preds = %1423, %1420
  %1447 = phi i64 [ 0, %1420 ], [ %1443, %1423 ]
  br i1 %1419, label %1457, label %1448

1448:                                             ; preds = %1446
  %1449 = load double*, double** %1410, align 8
  %1450 = add nsw i64 %1447, %1422
  %1451 = getelementptr inbounds double, double* %1449, i64 %1450
  %1452 = load double, double* %1451, align 8
  %1453 = load double*, double** %1411, align 8
  %1454 = getelementptr inbounds double, double* %1453, i64 %1450
  %1455 = load double, double* %1454, align 8
  %1456 = fadd double %1452, %1455
  store double %1456, double* %1454, align 8
  br label %1457

1457:                                             ; preds = %1446, %1448
  %1458 = load double*, double** %1412, align 8
  %1459 = getelementptr inbounds double, double* %1458, i64 %1421
  %1460 = load double, double* %1459, align 8
  %1461 = load double*, double** %1413, align 8
  %1462 = getelementptr inbounds double, double* %1461, i64 %1421
  %1463 = load double, double* %1462, align 8
  %1464 = fadd double %1460, %1463
  store double %1464, double* %1462, align 8
  %1465 = add nuw nsw i64 %1421, 1
  %1466 = icmp eq i64 %1465, %1415
  br i1 %1466, label %1467, label %1420

1467:                                             ; preds = %1457, %1404
  %1468 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %241, i32 1, i32 4
  %1469 = load i32, i32* %1468, align 4
  %1470 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %241, i32 1, i32 4
  %1471 = load i32, i32* %1470, align 4
  %1472 = add nsw i32 %1471, %1469
  store i32 %1472, i32* %1470, align 4
  %1473 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %241, i32 1, i32 5
  %1474 = load double, double* %1473, align 8
  %1475 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %241, i32 1, i32 5
  %1476 = load double, double* %1475, align 8
  %1477 = fadd double %1474, %1476
  store double %1477, double* %1475, align 8
  %1478 = tail call i32 @aom_noise_strength_solver_solve(%struct.aom_noise_strength_solver_t* %1405)
  %1479 = icmp eq i32 %1478, 0
  br i1 %1479, label %1480, label %1485

1480:                                             ; preds = %1467
  %1481 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %1482 = tail call i64 @fwrite(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.16, i64 0, i64 0), i64 40, i64 1, %struct._IO_FILE* %1481) #10
  br label %1483

1483:                                             ; preds = %1480, %1401, %1190, %679, %643
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %217) #9
  br label %1493

1484:                                             ; preds = %249, %259
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %217) #9
  br label %1489

1485:                                             ; preds = %1198, %1230, %1301, %1467
  %1486 = phi i32 [ 0, %1467 ], [ %242, %1301 ], [ 1, %1230 ], [ 1, %1198 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %217) #9
  %1487 = add nuw nsw i64 %241, 1
  %1488 = icmp eq i64 %1487, 3
  br i1 %1488, label %1489, label %240

1489:                                             ; preds = %1485, %1484
  %1490 = phi i32 [ %242, %1484 ], [ %1486, %1485 ]
  %1491 = icmp eq i32 %1490, 0
  %1492 = select i1 %1491, i8 0, i8 3
  br label %1493

1493:                                             ; preds = %1483, %1489, %237, %122, %17
  %1494 = phi i8 [ 1, %17 ], [ 1, %122 ], [ 2, %237 ], [ %1492, %1489 ], [ 4, %1483 ]
  ret i8 %1494
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @ar_equation_system_solve(%struct.aom_noise_state_t* nocapture, i32) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.aom_noise_state_t, %struct.aom_noise_state_t* %0, i64 0, i32 0
  %4 = tail call fastcc i32 @equation_system_solve(%struct.aom_equation_system_t* %3)
  %5 = getelementptr inbounds %struct.aom_noise_state_t, %struct.aom_noise_state_t* %0, i64 0, i32 3
  store double 1.000000e+00, double* %5, align 8
  %6 = icmp eq i32 %4, 0
  br i1 %6, label %116, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.aom_noise_state_t, %struct.aom_noise_state_t* %0, i64 0, i32 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = sub i32 %9, %1
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %15, label %12

12:                                               ; preds = %7
  %13 = sitofp i32 %10 to double
  %14 = fdiv double 0.000000e+00, %13
  br label %78

15:                                               ; preds = %7
  %16 = getelementptr inbounds %struct.aom_noise_state_t, %struct.aom_noise_state_t* %0, i64 0, i32 0, i32 0
  %17 = load double*, double** %16, align 8
  %18 = getelementptr inbounds %struct.aom_noise_state_t, %struct.aom_noise_state_t* %0, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = sitofp i32 %19 to double
  %21 = sext i32 %9 to i64
  %22 = zext i32 %10 to i64
  %23 = and i64 %22, 1
  %24 = icmp eq i32 %10, 1
  br i1 %24, label %27, label %25

25:                                               ; preds = %15
  %26 = sub nsw i64 %22, %23
  br label %58

27:                                               ; preds = %58, %15
  %28 = phi double [ undef, %15 ], [ %74, %58 ]
  %29 = phi i64 [ 0, %15 ], [ %75, %58 ]
  %30 = phi double [ 0.000000e+00, %15 ], [ %74, %58 ]
  %31 = icmp eq i64 %23, 0
  br i1 %31, label %39, label %32

32:                                               ; preds = %27
  %33 = mul nsw i64 %29, %21
  %34 = add nsw i64 %33, %29
  %35 = getelementptr inbounds double, double* %17, i64 %34
  %36 = load double, double* %35, align 8
  %37 = fdiv double %36, %20
  %38 = fadd double %30, %37
  br label %39

39:                                               ; preds = %27, %32
  %40 = phi double [ %28, %27 ], [ %38, %32 ]
  %41 = sitofp i32 %10 to double
  %42 = fdiv double %40, %41
  br i1 %11, label %43, label %78

43:                                               ; preds = %39
  %44 = getelementptr inbounds %struct.aom_noise_state_t, %struct.aom_noise_state_t* %0, i64 0, i32 0, i32 1
  %45 = load double*, double** %44, align 8
  %46 = icmp eq i32 %1, 0
  %47 = getelementptr inbounds %struct.aom_noise_state_t, %struct.aom_noise_state_t* %0, i64 0, i32 0, i32 0
  %48 = add nsw i32 %9, -1
  %49 = getelementptr inbounds %struct.aom_noise_state_t, %struct.aom_noise_state_t* %0, i64 0, i32 0, i32 2
  %50 = sext i32 %48 to i64
  %51 = load double*, double** %49, align 8
  %52 = getelementptr inbounds %struct.aom_noise_state_t, %struct.aom_noise_state_t* %0, i64 0, i32 2
  %53 = load i32, i32* %52, align 8
  %54 = sitofp i32 %53 to double
  %55 = sext i32 %9 to i64
  %56 = zext i32 %10 to i64
  %57 = getelementptr inbounds double, double* %51, i64 %50
  br label %89

58:                                               ; preds = %58, %25
  %59 = phi i64 [ 0, %25 ], [ %75, %58 ]
  %60 = phi double [ 0.000000e+00, %25 ], [ %74, %58 ]
  %61 = phi i64 [ %26, %25 ], [ %76, %58 ]
  %62 = mul nsw i64 %59, %21
  %63 = add nsw i64 %62, %59
  %64 = getelementptr inbounds double, double* %17, i64 %63
  %65 = load double, double* %64, align 8
  %66 = fdiv double %65, %20
  %67 = fadd double %60, %66
  %68 = or i64 %59, 1
  %69 = mul nsw i64 %68, %21
  %70 = add nsw i64 %69, %68
  %71 = getelementptr inbounds double, double* %17, i64 %70
  %72 = load double, double* %71, align 8
  %73 = fdiv double %72, %20
  %74 = fadd double %67, %73
  %75 = add nuw nsw i64 %59, 2
  %76 = add i64 %61, -2
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %27, label %58

78:                                               ; preds = %103, %12, %39
  %79 = phi double [ %42, %39 ], [ %14, %12 ], [ %42, %103 ]
  %80 = phi double [ 0.000000e+00, %39 ], [ 0.000000e+00, %12 ], [ %109, %103 ]
  %81 = fsub double %79, %80
  %82 = fcmp ogt double %81, 0x3EB0C6F7A0B5ED8D
  %83 = select i1 %82, double %81, double 0x3EB0C6F7A0B5ED8D
  %84 = fdiv double %79, %83
  %85 = fcmp ogt double %84, 0x3EB0C6F7A0B5ED8D
  %86 = select i1 %85, double %84, double 0x3EB0C6F7A0B5ED8D
  %87 = tail call double @sqrt(double %86) #9
  %88 = fcmp olt double %87, 1.000000e+00
  br i1 %88, label %114, label %112

89:                                               ; preds = %103, %43
  %90 = phi i64 [ 0, %43 ], [ %110, %103 ]
  %91 = phi double [ 0.000000e+00, %43 ], [ %109, %103 ]
  %92 = getelementptr inbounds double, double* %45, i64 %90
  %93 = load double, double* %92, align 8
  br i1 %46, label %103, label %94

94:                                               ; preds = %89
  %95 = load double*, double** %47, align 8
  %96 = mul nsw i64 %90, %55
  %97 = add nsw i64 %96, %50
  %98 = getelementptr inbounds double, double* %95, i64 %97
  %99 = load double, double* %98, align 8
  %100 = load double, double* %57, align 8
  %101 = fmul double %99, %100
  %102 = fsub double %93, %101
  br label %103

103:                                              ; preds = %89, %94
  %104 = phi double [ %102, %94 ], [ %93, %89 ]
  %105 = getelementptr inbounds double, double* %51, i64 %90
  %106 = load double, double* %105, align 8
  %107 = fmul double %104, %106
  %108 = fdiv double %107, %54
  %109 = fadd double %91, %108
  %110 = add nuw nsw i64 %90, 1
  %111 = icmp eq i64 %110, %56
  br i1 %111, label %78, label %89

112:                                              ; preds = %78
  %113 = tail call double @sqrt(double %86) #9
  br label %114

114:                                              ; preds = %78, %112
  %115 = phi double [ %113, %112 ], [ 1.000000e+00, %78 ]
  store double %115, double* %5, align 8
  br label %116

116:                                              ; preds = %2, %114
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_noise_model_save_latest(%struct.aom_noise_model_t* nocapture) local_unnamed_addr #0 {
  br label %3

2:                                                ; preds = %3
  ret void

3:                                                ; preds = %3, %1
  %4 = phi i64 [ 0, %1 ], [ %62, %3 ]
  %5 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %4, i32 0
  %6 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %4, i32 0
  %7 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %4, i32 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = bitcast %struct.aom_equation_system_t* %5 to i8**
  %10 = load i8*, i8** %9, align 8
  %11 = bitcast %struct.aom_equation_system_t* %6 to i8**
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = shl nsw i64 %13, 3
  %15 = mul i64 %14, %13
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %12, i64 %15, i1 false) #9
  %16 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %4, i32 0, i32 2
  %17 = bitcast double** %16 to i8**
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %4, i32 0, i32 2
  %20 = bitcast double** %19 to i8**
  %21 = load i8*, i8** %20, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %21, i64 %14, i1 false) #9
  %22 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %4, i32 0, i32 1
  %23 = bitcast double** %22 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %4, i32 0, i32 1
  %26 = bitcast double** %25 to i8**
  %27 = load i8*, i8** %26, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %27, i64 %14, i1 false) #9
  %28 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %4, i32 1, i32 0
  %29 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %4, i32 1, i32 0
  %30 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %4, i32 1, i32 0, i32 3
  %31 = load i32, i32* %30, align 8
  %32 = bitcast %struct.aom_equation_system_t* %28 to i8**
  %33 = load i8*, i8** %32, align 8
  %34 = bitcast %struct.aom_equation_system_t* %29 to i8**
  %35 = load i8*, i8** %34, align 8
  %36 = sext i32 %31 to i64
  %37 = shl nsw i64 %36, 3
  %38 = mul i64 %37, %36
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %35, i64 %38, i1 false) #9
  %39 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %4, i32 1, i32 0, i32 2
  %40 = bitcast double** %39 to i8**
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %4, i32 1, i32 0, i32 2
  %43 = bitcast double** %42 to i8**
  %44 = load i8*, i8** %43, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %44, i64 %37, i1 false) #9
  %45 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %4, i32 1, i32 0, i32 1
  %46 = bitcast double** %45 to i8**
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %4, i32 1, i32 0, i32 1
  %49 = bitcast double** %48 to i8**
  %50 = load i8*, i8** %49, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* align 8 %50, i64 %37, i1 false) #9
  %51 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %4, i32 1, i32 4
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %4, i32 1, i32 4
  store i32 %52, i32* %53, align 4
  %54 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %4, i32 2
  %55 = load i32, i32* %54, align 8
  %56 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %4, i32 2
  store i32 %55, i32* %56, align 8
  %57 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 2, i64 %4, i32 3
  %58 = bitcast double* %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %4, i32 3
  %61 = bitcast double* %60 to i64*
  store i64 %59, i64* %61, align 8
  %62 = add nuw nsw i64 %4, 1
  %63 = icmp eq i64 %62, 3
  br i1 %63, label %2, label %3
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_noise_model_get_grain_parameters(%struct.aom_noise_model_t* nocapture readonly, %struct.aom_film_grain_t*) local_unnamed_addr #0 {
  %3 = alloca [3 x %struct.aom_noise_strength_lut_t], align 16
  %4 = alloca [2 x double], align 16
  %5 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = icmp sgt i32 %6, 3
  br i1 %7, label %8, label %11

8:                                                ; preds = %2
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %10 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17, i64 0, i64 0), i32 %6) #10
  br label %384

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 25
  %13 = load i16, i16* %12, align 4
  %14 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 2
  %15 = bitcast [14 x [2 x i32]]* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %15, i8 0, i64 640, i1 false)
  store i16 %13, i16* %12, align 4
  %16 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 0
  store i32 1, i32* %16, align 4
  %17 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 1
  store i32 1, i32* %17, align 4
  %18 = load i32, i32* %5, align 4
  %19 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 9
  store i32 %18, i32* %19, align 4
  %20 = bitcast [3 x %struct.aom_noise_strength_lut_t]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %20) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 48, i1 false)
  %21 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 0, i32 1
  %22 = getelementptr inbounds [3 x %struct.aom_noise_strength_lut_t], [3 x %struct.aom_noise_strength_lut_t]* %3, i64 0, i64 0
  %23 = call i32 @aom_noise_strength_solver_fit_piecewise(%struct.aom_noise_strength_solver_t* %21, i32 14, %struct.aom_noise_strength_lut_t* nonnull %22)
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %382, label %25

25:                                               ; preds = %11
  %26 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 1, i32 1
  %27 = getelementptr inbounds [3 x %struct.aom_noise_strength_lut_t], [3 x %struct.aom_noise_strength_lut_t]* %3, i64 0, i64 1
  %28 = call i32 @aom_noise_strength_solver_fit_piecewise(%struct.aom_noise_strength_solver_t* %26, i32 10, %struct.aom_noise_strength_lut_t* %27)
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %33

30:                                               ; preds = %25
  %31 = bitcast [3 x %struct.aom_noise_strength_lut_t]* %3 to i8**
  %32 = load i8*, i8** %31, align 16
  call void @aom_free(i8* %32) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 0, i64 16, i1 false) #9
  br label %382

33:                                               ; preds = %25
  %34 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 2, i32 1
  %35 = getelementptr inbounds [3 x %struct.aom_noise_strength_lut_t], [3 x %struct.aom_noise_strength_lut_t]* %3, i64 0, i64 2
  %36 = call i32 @aom_noise_strength_solver_fit_piecewise(%struct.aom_noise_strength_solver_t* %34, i32 10, %struct.aom_noise_strength_lut_t* %35)
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %46

38:                                               ; preds = %33
  %39 = bitcast [3 x %struct.aom_noise_strength_lut_t]* %3 to i8**
  %40 = load i8*, i8** %39, align 16
  call void @aom_free(i8* %40) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 0, i64 16, i1 false) #9
  %41 = icmp eq %struct.aom_noise_strength_lut_t* %27, null
  br i1 %41, label %382, label %42

42:                                               ; preds = %38
  %43 = bitcast %struct.aom_noise_strength_lut_t* %27 to i8**
  %44 = load i8*, i8** %43, align 16
  call void @aom_free(i8* %44) #9
  %45 = bitcast %struct.aom_noise_strength_lut_t* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %45, i8 0, i64 16, i1 false) #9
  br label %382

46:                                               ; preds = %33
  %47 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 0, i32 2
  %48 = load i32, i32* %47, align 8
  %49 = add nsw i32 %48, -8
  %50 = shl i32 1, %49
  %51 = sitofp i32 %50 to double
  %52 = getelementptr inbounds [3 x %struct.aom_noise_strength_lut_t], [3 x %struct.aom_noise_strength_lut_t]* %3, i64 0, i64 0, i32 1
  %53 = load i32, i32* %52, align 8
  %54 = icmp sgt i32 %53, 0
  br i1 %54, label %55, label %58

55:                                               ; preds = %46
  %56 = getelementptr inbounds [3 x %struct.aom_noise_strength_lut_t], [3 x %struct.aom_noise_strength_lut_t]* %3, i64 0, i64 0, i32 0
  %57 = load [2 x double]*, [2 x double]** %56, align 16
  br label %63

58:                                               ; preds = %63, %46
  %59 = phi double [ 1.000000e-04, %46 ], [ %82, %63 ]
  %60 = getelementptr inbounds [3 x %struct.aom_noise_strength_lut_t], [3 x %struct.aom_noise_strength_lut_t]* %3, i64 0, i64 1, i32 1
  %61 = load i32, i32* %60, align 8
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %569, label %596

63:                                               ; preds = %55, %63
  %64 = phi [2 x double]* [ %57, %55 ], [ %78, %63 ]
  %65 = phi i64 [ 0, %55 ], [ %83, %63 ]
  %66 = phi double [ 1.000000e-04, %55 ], [ %82, %63 ]
  %67 = getelementptr inbounds [2 x double], [2 x double]* %64, i64 %65, i64 0
  %68 = load double, double* %67, align 8
  %69 = fdiv double %68, %51
  %70 = fcmp ogt double %69, 2.550000e+02
  %71 = select i1 %70, double 2.550000e+02, double %69
  store double %71, double* %67, align 8
  %72 = load [2 x double]*, [2 x double]** %56, align 16
  %73 = getelementptr inbounds [2 x double], [2 x double]* %72, i64 %65, i64 1
  %74 = load double, double* %73, align 8
  %75 = fdiv double %74, %51
  %76 = fcmp ogt double %75, 2.550000e+02
  %77 = select i1 %76, double 2.550000e+02, double %75
  store double %77, double* %73, align 8
  %78 = load [2 x double]*, [2 x double]** %56, align 16
  %79 = getelementptr inbounds [2 x double], [2 x double]* %78, i64 %65, i64 1
  %80 = load double, double* %79, align 8
  %81 = fcmp ogt double %80, %66
  %82 = select i1 %81, double %80, double %66
  %83 = add nuw nsw i64 %65, 1
  %84 = load i32, i32* %52, align 8
  %85 = sext i32 %84 to i64
  %86 = icmp slt i64 %83, %85
  br i1 %86, label %63, label %58

87:                                               ; preds = %628
  %88 = getelementptr inbounds [3 x %struct.aom_noise_strength_lut_t], [3 x %struct.aom_noise_strength_lut_t]* %3, i64 0, i64 0, i32 0
  %89 = load [2 x double]*, [2 x double]** %88, align 16
  %90 = sext i32 %643 to i64
  br label %115

91:                                               ; preds = %565
  %92 = bitcast %struct.aom_noise_strength_lut_t* %27 to i8**
  %93 = load i8*, i8** %92, align 16
  call void @aom_free(i8* %93) #9
  %94 = bitcast %struct.aom_noise_strength_lut_t* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %94, i8 0, i64 16, i1 false) #9
  br label %95

95:                                               ; preds = %565, %91
  %96 = icmp eq %struct.aom_noise_strength_lut_t* %35, null
  br i1 %96, label %101, label %97

97:                                               ; preds = %95
  %98 = bitcast %struct.aom_noise_strength_lut_t* %35 to i8**
  %99 = load i8*, i8** %98, align 16
  call void @aom_free(i8* %99) #9
  %100 = bitcast %struct.aom_noise_strength_lut_t* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %100, i8 0, i64 16, i1 false) #9
  br label %101

101:                                              ; preds = %95, %97
  %102 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 0, i32 0, i32 3
  %103 = load i32, i32* %102, align 8
  %104 = bitcast [2 x double]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %104) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %104, i8 0, i64 16, i1 false)
  %105 = icmp sgt i32 %103, 0
  %106 = sext i32 %103 to i64
  %107 = zext i32 %103 to i64
  %108 = add nsw i64 %107, -1
  %109 = and i64 %107, 3
  %110 = icmp ult i64 %108, 3
  %111 = sub nsw i64 %107, %109
  %112 = icmp eq i64 %109, 0
  br label %142

113:                                              ; preds = %115, %628
  %114 = icmp sgt i32 %645, 0
  br i1 %114, label %517, label %540

115:                                              ; preds = %87, %115
  %116 = phi i64 [ 0, %87 ], [ %132, %115 ]
  %117 = getelementptr inbounds [2 x double], [2 x double]* %89, i64 %116, i64 0
  %118 = load double, double* %117, align 8
  %119 = fadd double %118, 5.000000e-01
  %120 = fptosi double %119 to i32
  %121 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 2, i64 %116, i64 0
  store i32 %120, i32* %121, align 4
  %122 = getelementptr inbounds [2 x double], [2 x double]* %89, i64 %116, i64 1
  %123 = load double, double* %122, align 8
  %124 = fmul double %123, %642
  %125 = fadd double %124, 5.000000e-01
  %126 = fptosi double %125 to i32
  %127 = icmp slt i32 %126, 255
  %128 = select i1 %127, i32 %126, i32 255
  %129 = icmp sgt i32 %128, 0
  %130 = select i1 %129, i32 %128, i32 0
  %131 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 2, i64 %116, i64 1
  store i32 %130, i32* %131, align 4
  %132 = add nuw nsw i64 %116, 1
  %133 = icmp slt i64 %132, %90
  br i1 %133, label %115, label %113

134:                                              ; preds = %306
  %135 = call double @log2(double %307) #9
  %136 = call double @llvm.floor.f64(double %135)
  %137 = fadd double %136, 1.000000e+00
  %138 = fsub double -0.000000e+00, %308
  %139 = call double @log2(double %138) #9
  %140 = call double @llvm.ceil.f64(double %139)
  %141 = fcmp ogt double %137, %140
  br i1 %141, label %312, label %316

142:                                              ; preds = %306, %101
  %143 = phi i64 [ 0, %101 ], [ %310, %306 ]
  %144 = phi double [ 0.000000e+00, %101 ], [ %309, %306 ]
  %145 = phi double [ -1.000000e-04, %101 ], [ %308, %306 ]
  %146 = phi double [ 1.000000e-04, %101 ], [ %307, %306 ]
  br i1 %105, label %147, label %170

147:                                              ; preds = %142
  %148 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %143, i32 0, i32 2
  %149 = load double*, double** %148, align 8
  br i1 %110, label %150, label %179

150:                                              ; preds = %179, %147
  %151 = phi double [ undef, %147 ], [ %208, %179 ]
  %152 = phi double [ undef, %147 ], [ %210, %179 ]
  %153 = phi i64 [ 0, %147 ], [ %211, %179 ]
  %154 = phi double [ %145, %147 ], [ %210, %179 ]
  %155 = phi double [ %146, %147 ], [ %208, %179 ]
  br i1 %112, label %170, label %156

156:                                              ; preds = %150, %156
  %157 = phi i64 [ %167, %156 ], [ %153, %150 ]
  %158 = phi double [ %166, %156 ], [ %154, %150 ]
  %159 = phi double [ %164, %156 ], [ %155, %150 ]
  %160 = phi i64 [ %168, %156 ], [ %109, %150 ]
  %161 = getelementptr inbounds double, double* %149, i64 %157
  %162 = load double, double* %161, align 8
  %163 = fcmp ogt double %159, %162
  %164 = select i1 %163, double %159, double %162
  %165 = fcmp olt double %158, %162
  %166 = select i1 %165, double %158, double %162
  %167 = add nuw nsw i64 %157, 1
  %168 = add i64 %160, -1
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %170, label %156, !llvm.loop !44

170:                                              ; preds = %150, %156, %142
  %171 = phi double [ %146, %142 ], [ %151, %150 ], [ %164, %156 ]
  %172 = phi double [ %145, %142 ], [ %152, %150 ], [ %166, %156 ]
  %173 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %143, i32 1, i32 0, i32 3
  %174 = load i32, i32* %173, align 8
  %175 = icmp sgt i32 %174, 0
  br i1 %175, label %176, label %231

176:                                              ; preds = %170
  %177 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %143, i32 1, i32 0, i32 0
  %178 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %143, i32 1, i32 0, i32 2
  br label %214

179:                                              ; preds = %147, %179
  %180 = phi i64 [ %211, %179 ], [ 0, %147 ]
  %181 = phi double [ %210, %179 ], [ %145, %147 ]
  %182 = phi double [ %208, %179 ], [ %146, %147 ]
  %183 = phi i64 [ %212, %179 ], [ %111, %147 ]
  %184 = getelementptr inbounds double, double* %149, i64 %180
  %185 = load double, double* %184, align 8
  %186 = fcmp ogt double %182, %185
  %187 = select i1 %186, double %182, double %185
  %188 = fcmp olt double %181, %185
  %189 = select i1 %188, double %181, double %185
  %190 = or i64 %180, 1
  %191 = getelementptr inbounds double, double* %149, i64 %190
  %192 = load double, double* %191, align 8
  %193 = fcmp ogt double %187, %192
  %194 = select i1 %193, double %187, double %192
  %195 = fcmp olt double %189, %192
  %196 = select i1 %195, double %189, double %192
  %197 = or i64 %180, 2
  %198 = getelementptr inbounds double, double* %149, i64 %197
  %199 = load double, double* %198, align 8
  %200 = fcmp ogt double %194, %199
  %201 = select i1 %200, double %194, double %199
  %202 = fcmp olt double %196, %199
  %203 = select i1 %202, double %196, double %199
  %204 = or i64 %180, 3
  %205 = getelementptr inbounds double, double* %149, i64 %204
  %206 = load double, double* %205, align 8
  %207 = fcmp ogt double %201, %206
  %208 = select i1 %207, double %201, double %206
  %209 = fcmp olt double %203, %206
  %210 = select i1 %209, double %203, double %206
  %211 = add nuw nsw i64 %180, 4
  %212 = add i64 %183, -4
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %150, label %179

214:                                              ; preds = %176, %254
  %215 = phi i64 [ 0, %176 ], [ %263, %254 ]
  %216 = phi i32 [ %174, %176 ], [ %264, %254 ]
  %217 = phi double [ 0.000000e+00, %176 ], [ %262, %254 ]
  %218 = phi double [ 0.000000e+00, %176 ], [ %261, %254 ]
  %219 = icmp sgt i32 %216, 0
  br i1 %219, label %220, label %254

220:                                              ; preds = %214
  %221 = load double*, double** %177, align 8
  %222 = trunc i64 %215 to i32
  %223 = mul nsw i32 %216, %222
  %224 = sext i32 %223 to i64
  %225 = zext i32 %216 to i64
  %226 = add nsw i64 %225, -1
  %227 = and i64 %225, 3
  %228 = icmp ult i64 %226, 3
  br i1 %228, label %238, label %229

229:                                              ; preds = %220
  %230 = sub nsw i64 %225, %227
  br label %267

231:                                              ; preds = %254, %170
  %232 = phi double [ 0.000000e+00, %170 ], [ %261, %254 ]
  %233 = phi double [ 0.000000e+00, %170 ], [ %262, %254 ]
  %234 = fcmp oeq double %233, 0.000000e+00
  %235 = fdiv double %232, %233
  %236 = select i1 %234, double 1.000000e+00, double %235
  %237 = icmp eq i64 %143, 0
  br i1 %237, label %306, label %293

238:                                              ; preds = %267, %220
  %239 = phi double [ undef, %220 ], [ %289, %267 ]
  %240 = phi i64 [ 0, %220 ], [ %290, %267 ]
  %241 = phi double [ 0.000000e+00, %220 ], [ %289, %267 ]
  %242 = icmp eq i64 %227, 0
  br i1 %242, label %254, label %243

243:                                              ; preds = %238, %243
  %244 = phi i64 [ %251, %243 ], [ %240, %238 ]
  %245 = phi double [ %250, %243 ], [ %241, %238 ]
  %246 = phi i64 [ %252, %243 ], [ %227, %238 ]
  %247 = add nsw i64 %244, %224
  %248 = getelementptr inbounds double, double* %221, i64 %247
  %249 = load double, double* %248, align 8
  %250 = fadd double %245, %249
  %251 = add nuw nsw i64 %244, 1
  %252 = add i64 %246, -1
  %253 = icmp eq i64 %252, 0
  br i1 %253, label %254, label %243, !llvm.loop !45

254:                                              ; preds = %238, %243, %214
  %255 = phi double [ 0.000000e+00, %214 ], [ %239, %238 ], [ %250, %243 ]
  %256 = call double @sqrt(double %255) #9
  %257 = load double*, double** %178, align 8
  %258 = getelementptr inbounds double, double* %257, i64 %215
  %259 = load double, double* %258, align 8
  %260 = fmul double %256, %259
  %261 = fadd double %218, %260
  %262 = fadd double %217, %256
  %263 = add nuw nsw i64 %215, 1
  %264 = load i32, i32* %173, align 8
  %265 = sext i32 %264 to i64
  %266 = icmp slt i64 %263, %265
  br i1 %266, label %214, label %231

267:                                              ; preds = %267, %229
  %268 = phi i64 [ 0, %229 ], [ %290, %267 ]
  %269 = phi double [ 0.000000e+00, %229 ], [ %289, %267 ]
  %270 = phi i64 [ %230, %229 ], [ %291, %267 ]
  %271 = add nsw i64 %268, %224
  %272 = getelementptr inbounds double, double* %221, i64 %271
  %273 = load double, double* %272, align 8
  %274 = fadd double %269, %273
  %275 = or i64 %268, 1
  %276 = add nsw i64 %275, %224
  %277 = getelementptr inbounds double, double* %221, i64 %276
  %278 = load double, double* %277, align 8
  %279 = fadd double %274, %278
  %280 = or i64 %268, 2
  %281 = add nsw i64 %280, %224
  %282 = getelementptr inbounds double, double* %221, i64 %281
  %283 = load double, double* %282, align 8
  %284 = fadd double %279, %283
  %285 = or i64 %268, 3
  %286 = add nsw i64 %285, %224
  %287 = getelementptr inbounds double, double* %221, i64 %286
  %288 = load double, double* %287, align 8
  %289 = fadd double %284, %288
  %290 = add nuw nsw i64 %268, 4
  %291 = add i64 %270, -4
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %238, label %267

293:                                              ; preds = %231
  %294 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 %143, i32 0, i32 2
  %295 = load double*, double** %294, align 8
  %296 = getelementptr inbounds double, double* %295, i64 %106
  %297 = load double, double* %296, align 8
  %298 = fmul double %144, %297
  %299 = fdiv double %298, %236
  %300 = add nsw i64 %143, -1
  %301 = getelementptr inbounds [2 x double], [2 x double]* %4, i64 0, i64 %300
  store double %299, double* %301, align 8
  %302 = fcmp ogt double %171, %299
  %303 = select i1 %302, double %171, double %299
  %304 = fcmp olt double %172, %299
  %305 = select i1 %304, double %172, double %299
  br label %306

306:                                              ; preds = %293, %231
  %307 = phi double [ %171, %231 ], [ %303, %293 ]
  %308 = phi double [ %172, %231 ], [ %305, %293 ]
  %309 = phi double [ %236, %231 ], [ %144, %293 ]
  %310 = add nuw nsw i64 %143, 1
  %311 = icmp eq i64 %310, 3
  br i1 %311, label %134, label %142

312:                                              ; preds = %134
  %313 = call double @log2(double %307) #9
  %314 = call double @llvm.floor.f64(double %313)
  %315 = fadd double %314, 1.000000e+00
  br label %319

316:                                              ; preds = %134
  %317 = call double @log2(double %138) #9
  %318 = call double @llvm.ceil.f64(double %317)
  br label %319

319:                                              ; preds = %316, %312
  %320 = phi double [ %315, %312 ], [ %318, %316 ]
  %321 = fptosi double %320 to i32
  %322 = sub nsw i32 7, %321
  %323 = icmp slt i32 %322, 9
  %324 = select i1 %323, i32 %322, i32 9
  %325 = icmp sgt i32 %324, 6
  %326 = select i1 %325, i32 %324, i32 6
  %327 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 13
  store i32 %326, i32* %327, align 4
  %328 = shl i32 1, %326
  %329 = sitofp i32 %328 to double
  br i1 %105, label %330, label %437

330:                                              ; preds = %319
  %331 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 0, i32 0, i32 2
  %332 = zext i32 %103 to i64
  %333 = and i64 %332, 1
  %334 = icmp eq i32 %103, 1
  br i1 %334, label %366, label %335

335:                                              ; preds = %330
  %336 = sub nsw i64 %332, %333
  br label %337

337:                                              ; preds = %337, %335
  %338 = phi i64 [ 0, %335 ], [ %363, %337 ]
  %339 = phi i64 [ %336, %335 ], [ %364, %337 ]
  %340 = load double*, double** %331, align 8
  %341 = getelementptr inbounds double, double* %340, i64 %338
  %342 = load double, double* %341, align 8
  %343 = fmul double %342, %329
  %344 = call double @llvm.round.f64(double %343)
  %345 = fptosi double %344 to i32
  %346 = icmp slt i32 %345, 127
  %347 = select i1 %346, i32 %345, i32 127
  %348 = icmp sgt i32 %347, -128
  %349 = select i1 %348, i32 %347, i32 -128
  %350 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 10, i64 %338
  store i32 %349, i32* %350, align 4
  %351 = or i64 %338, 1
  %352 = load double*, double** %331, align 8
  %353 = getelementptr inbounds double, double* %352, i64 %351
  %354 = load double, double* %353, align 8
  %355 = fmul double %354, %329
  %356 = call double @llvm.round.f64(double %355)
  %357 = fptosi double %356 to i32
  %358 = icmp slt i32 %357, 127
  %359 = select i1 %358, i32 %357, i32 127
  %360 = icmp sgt i32 %359, -128
  %361 = select i1 %360, i32 %359, i32 -128
  %362 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 10, i64 %351
  store i32 %361, i32* %362, align 4
  %363 = add nuw nsw i64 %338, 2
  %364 = add i64 %339, -2
  %365 = icmp eq i64 %364, 0
  br i1 %365, label %366, label %337

366:                                              ; preds = %337, %330
  %367 = phi i64 [ 0, %330 ], [ %363, %337 ]
  %368 = icmp eq i64 %333, 0
  br i1 %368, label %381, label %369

369:                                              ; preds = %366
  %370 = load double*, double** %331, align 8
  %371 = getelementptr inbounds double, double* %370, i64 %367
  %372 = load double, double* %371, align 8
  %373 = fmul double %372, %329
  %374 = call double @llvm.round.f64(double %373)
  %375 = fptosi double %374 to i32
  %376 = icmp slt i32 %375, 127
  %377 = select i1 %376, i32 %375, i32 127
  %378 = icmp sgt i32 %377, -128
  %379 = select i1 %378, i32 %377, i32 -128
  %380 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 10, i64 %367
  store i32 %379, i32* %380, align 4
  br label %381

381:                                              ; preds = %366, %369
  br i1 %105, label %386, label %437

382:                                              ; preds = %42, %38, %11, %499, %30
  %383 = phi i32 [ 1, %499 ], [ 0, %30 ], [ 0, %11 ], [ 0, %38 ], [ 0, %42 ]
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %20) #9
  br label %384

384:                                              ; preds = %382, %8
  %385 = phi i32 [ 0, %8 ], [ %383, %382 ]
  ret i32 %385

386:                                              ; preds = %381
  %387 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 1, i32 0, i32 2
  %388 = zext i32 %103 to i64
  %389 = and i64 %388, 1
  %390 = icmp eq i32 %103, 1
  br i1 %390, label %422, label %391

391:                                              ; preds = %386
  %392 = sub nsw i64 %388, %389
  br label %393

393:                                              ; preds = %393, %391
  %394 = phi i64 [ 0, %391 ], [ %419, %393 ]
  %395 = phi i64 [ %392, %391 ], [ %420, %393 ]
  %396 = load double*, double** %387, align 8
  %397 = getelementptr inbounds double, double* %396, i64 %394
  %398 = load double, double* %397, align 8
  %399 = fmul double %398, %329
  %400 = call double @llvm.round.f64(double %399)
  %401 = fptosi double %400 to i32
  %402 = icmp slt i32 %401, 127
  %403 = select i1 %402, i32 %401, i32 127
  %404 = icmp sgt i32 %403, -128
  %405 = select i1 %404, i32 %403, i32 -128
  %406 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 11, i64 %394
  store i32 %405, i32* %406, align 4
  %407 = or i64 %394, 1
  %408 = load double*, double** %387, align 8
  %409 = getelementptr inbounds double, double* %408, i64 %407
  %410 = load double, double* %409, align 8
  %411 = fmul double %410, %329
  %412 = call double @llvm.round.f64(double %411)
  %413 = fptosi double %412 to i32
  %414 = icmp slt i32 %413, 127
  %415 = select i1 %414, i32 %413, i32 127
  %416 = icmp sgt i32 %415, -128
  %417 = select i1 %416, i32 %415, i32 -128
  %418 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 11, i64 %407
  store i32 %417, i32* %418, align 4
  %419 = add nuw nsw i64 %394, 2
  %420 = add i64 %395, -2
  %421 = icmp eq i64 %420, 0
  br i1 %421, label %422, label %393

422:                                              ; preds = %393, %386
  %423 = phi i64 [ 0, %386 ], [ %419, %393 ]
  %424 = icmp eq i64 %389, 0
  br i1 %424, label %437, label %425

425:                                              ; preds = %422
  %426 = load double*, double** %387, align 8
  %427 = getelementptr inbounds double, double* %426, i64 %423
  %428 = load double, double* %427, align 8
  %429 = fmul double %428, %329
  %430 = call double @llvm.round.f64(double %429)
  %431 = fptosi double %430 to i32
  %432 = icmp slt i32 %431, 127
  %433 = select i1 %432, i32 %431, i32 127
  %434 = icmp sgt i32 %433, -128
  %435 = select i1 %434, i32 %433, i32 -128
  %436 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 11, i64 %423
  store i32 %435, i32* %436, align 4
  br label %437

437:                                              ; preds = %425, %422, %319, %381
  %438 = getelementptr inbounds [2 x double], [2 x double]* %4, i64 0, i64 0
  %439 = load double, double* %438, align 16
  %440 = fmul double %439, %329
  %441 = call double @llvm.round.f64(double %440)
  %442 = fptosi double %441 to i32
  %443 = icmp slt i32 %442, 127
  %444 = select i1 %443, i32 %442, i32 127
  %445 = icmp sgt i32 %444, -128
  %446 = select i1 %445, i32 %444, i32 -128
  %447 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 11, i64 %106
  store i32 %446, i32* %447, align 4
  br i1 %105, label %448, label %499

448:                                              ; preds = %437
  %449 = getelementptr inbounds %struct.aom_noise_model_t, %struct.aom_noise_model_t* %0, i64 0, i32 1, i64 2, i32 0, i32 2
  %450 = zext i32 %103 to i64
  %451 = and i64 %450, 1
  %452 = icmp eq i32 %103, 1
  br i1 %452, label %484, label %453

453:                                              ; preds = %448
  %454 = sub nsw i64 %450, %451
  br label %455

455:                                              ; preds = %455, %453
  %456 = phi i64 [ 0, %453 ], [ %481, %455 ]
  %457 = phi i64 [ %454, %453 ], [ %482, %455 ]
  %458 = load double*, double** %449, align 8
  %459 = getelementptr inbounds double, double* %458, i64 %456
  %460 = load double, double* %459, align 8
  %461 = fmul double %460, %329
  %462 = call double @llvm.round.f64(double %461)
  %463 = fptosi double %462 to i32
  %464 = icmp slt i32 %463, 127
  %465 = select i1 %464, i32 %463, i32 127
  %466 = icmp sgt i32 %465, -128
  %467 = select i1 %466, i32 %465, i32 -128
  %468 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 12, i64 %456
  store i32 %467, i32* %468, align 4
  %469 = or i64 %456, 1
  %470 = load double*, double** %449, align 8
  %471 = getelementptr inbounds double, double* %470, i64 %469
  %472 = load double, double* %471, align 8
  %473 = fmul double %472, %329
  %474 = call double @llvm.round.f64(double %473)
  %475 = fptosi double %474 to i32
  %476 = icmp slt i32 %475, 127
  %477 = select i1 %476, i32 %475, i32 127
  %478 = icmp sgt i32 %477, -128
  %479 = select i1 %478, i32 %477, i32 -128
  %480 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 12, i64 %469
  store i32 %479, i32* %480, align 4
  %481 = add nuw nsw i64 %456, 2
  %482 = add i64 %457, -2
  %483 = icmp eq i64 %482, 0
  br i1 %483, label %484, label %455

484:                                              ; preds = %455, %448
  %485 = phi i64 [ 0, %448 ], [ %481, %455 ]
  %486 = icmp eq i64 %451, 0
  br i1 %486, label %499, label %487

487:                                              ; preds = %484
  %488 = load double*, double** %449, align 8
  %489 = getelementptr inbounds double, double* %488, i64 %485
  %490 = load double, double* %489, align 8
  %491 = fmul double %490, %329
  %492 = call double @llvm.round.f64(double %491)
  %493 = fptosi double %492 to i32
  %494 = icmp slt i32 %493, 127
  %495 = select i1 %494, i32 %493, i32 127
  %496 = icmp sgt i32 %495, -128
  %497 = select i1 %496, i32 %495, i32 -128
  %498 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 12, i64 %485
  store i32 %497, i32* %498, align 4
  br label %499

499:                                              ; preds = %487, %484, %437
  %500 = getelementptr inbounds [2 x double], [2 x double]* %4, i64 0, i64 1
  %501 = load double, double* %500, align 8
  %502 = fmul double %501, %329
  %503 = call double @llvm.round.f64(double %502)
  %504 = fptosi double %503 to i32
  %505 = icmp slt i32 %504, 127
  %506 = select i1 %505, i32 %504, i32 127
  %507 = icmp sgt i32 %506, -128
  %508 = select i1 %507, i32 %506, i32 -128
  %509 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 12, i64 %106
  store i32 %508, i32* %509, align 4
  %510 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 14
  %511 = bitcast i32* %510 to <4 x i32>*
  store <4 x i32> <i32 128, i32 192, i32 256, i32 128>, <4 x i32>* %511, align 4
  %512 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 18
  store i32 192, i32* %512, align 4
  %513 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 19
  store i32 256, i32* %513, align 4
  %514 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 23
  store i32 0, i32* %514, align 4
  %515 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 24
  store i32 0, i32* %515, align 4
  %516 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 20
  store i32 1, i32* %516, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %104) #9
  br label %382

517:                                              ; preds = %113
  %518 = getelementptr inbounds [3 x %struct.aom_noise_strength_lut_t], [3 x %struct.aom_noise_strength_lut_t]* %3, i64 0, i64 1, i32 0
  %519 = load [2 x double]*, [2 x double]** %518, align 16
  %520 = sext i32 %645 to i64
  br label %521

521:                                              ; preds = %521, %517
  %522 = phi i64 [ 0, %517 ], [ %538, %521 ]
  %523 = getelementptr inbounds [2 x double], [2 x double]* %519, i64 %522, i64 0
  %524 = load double, double* %523, align 8
  %525 = fadd double %524, 5.000000e-01
  %526 = fptosi double %525 to i32
  %527 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 4, i64 %522, i64 0
  store i32 %526, i32* %527, align 4
  %528 = getelementptr inbounds [2 x double], [2 x double]* %519, i64 %522, i64 1
  %529 = load double, double* %528, align 8
  %530 = fmul double %529, %642
  %531 = fadd double %530, 5.000000e-01
  %532 = fptosi double %531 to i32
  %533 = icmp slt i32 %532, 255
  %534 = select i1 %533, i32 %532, i32 255
  %535 = icmp sgt i32 %534, 0
  %536 = select i1 %535, i32 %534, i32 0
  %537 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 4, i64 %522, i64 1
  store i32 %536, i32* %537, align 4
  %538 = add nuw nsw i64 %522, 1
  %539 = icmp slt i64 %538, %520
  br i1 %539, label %521, label %540

540:                                              ; preds = %521, %113
  %541 = icmp sgt i32 %647, 0
  br i1 %541, label %542, label %565

542:                                              ; preds = %540
  %543 = getelementptr inbounds [3 x %struct.aom_noise_strength_lut_t], [3 x %struct.aom_noise_strength_lut_t]* %3, i64 0, i64 2, i32 0
  %544 = load [2 x double]*, [2 x double]** %543, align 16
  %545 = sext i32 %647 to i64
  br label %546

546:                                              ; preds = %546, %542
  %547 = phi i64 [ 0, %542 ], [ %563, %546 ]
  %548 = getelementptr inbounds [2 x double], [2 x double]* %544, i64 %547, i64 0
  %549 = load double, double* %548, align 8
  %550 = fadd double %549, 5.000000e-01
  %551 = fptosi double %550 to i32
  %552 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 6, i64 %547, i64 0
  store i32 %551, i32* %552, align 4
  %553 = getelementptr inbounds [2 x double], [2 x double]* %544, i64 %547, i64 1
  %554 = load double, double* %553, align 8
  %555 = fmul double %554, %642
  %556 = fadd double %555, 5.000000e-01
  %557 = fptosi double %556 to i32
  %558 = icmp slt i32 %557, 255
  %559 = select i1 %558, i32 %557, i32 255
  %560 = icmp sgt i32 %559, 0
  %561 = select i1 %560, i32 %559, i32 0
  %562 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 6, i64 %547, i64 1
  store i32 %561, i32* %562, align 4
  %563 = add nuw nsw i64 %547, 1
  %564 = icmp slt i64 %563, %545
  br i1 %564, label %546, label %565

565:                                              ; preds = %546, %540
  %566 = bitcast [3 x %struct.aom_noise_strength_lut_t]* %3 to i8**
  %567 = load i8*, i8** %566, align 16
  call void @aom_free(i8* %567) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 0, i64 16, i1 false) #9
  %568 = icmp eq %struct.aom_noise_strength_lut_t* %27, null
  br i1 %568, label %95, label %91

569:                                              ; preds = %58
  %570 = getelementptr inbounds [3 x %struct.aom_noise_strength_lut_t], [3 x %struct.aom_noise_strength_lut_t]* %3, i64 0, i64 1, i32 0
  %571 = load [2 x double]*, [2 x double]** %570, align 16
  br label %572

572:                                              ; preds = %572, %569
  %573 = phi [2 x double]* [ %571, %569 ], [ %587, %572 ]
  %574 = phi i64 [ 0, %569 ], [ %592, %572 ]
  %575 = phi double [ %59, %569 ], [ %591, %572 ]
  %576 = getelementptr inbounds [2 x double], [2 x double]* %573, i64 %574, i64 0
  %577 = load double, double* %576, align 8
  %578 = fdiv double %577, %51
  %579 = fcmp ogt double %578, 2.550000e+02
  %580 = select i1 %579, double 2.550000e+02, double %578
  store double %580, double* %576, align 8
  %581 = load [2 x double]*, [2 x double]** %570, align 16
  %582 = getelementptr inbounds [2 x double], [2 x double]* %581, i64 %574, i64 1
  %583 = load double, double* %582, align 8
  %584 = fdiv double %583, %51
  %585 = fcmp ogt double %584, 2.550000e+02
  %586 = select i1 %585, double 2.550000e+02, double %584
  store double %586, double* %582, align 8
  %587 = load [2 x double]*, [2 x double]** %570, align 16
  %588 = getelementptr inbounds [2 x double], [2 x double]* %587, i64 %574, i64 1
  %589 = load double, double* %588, align 8
  %590 = fcmp ogt double %589, %575
  %591 = select i1 %590, double %589, double %575
  %592 = add nuw nsw i64 %574, 1
  %593 = load i32, i32* %60, align 8
  %594 = sext i32 %593 to i64
  %595 = icmp slt i64 %592, %594
  br i1 %595, label %572, label %596

596:                                              ; preds = %572, %58
  %597 = phi double [ %59, %58 ], [ %591, %572 ]
  %598 = getelementptr inbounds [3 x %struct.aom_noise_strength_lut_t], [3 x %struct.aom_noise_strength_lut_t]* %3, i64 0, i64 2, i32 1
  %599 = load i32, i32* %598, align 8
  %600 = icmp sgt i32 %599, 0
  br i1 %600, label %601, label %628

601:                                              ; preds = %596
  %602 = getelementptr inbounds [3 x %struct.aom_noise_strength_lut_t], [3 x %struct.aom_noise_strength_lut_t]* %3, i64 0, i64 2, i32 0
  %603 = load [2 x double]*, [2 x double]** %602, align 16
  br label %604

604:                                              ; preds = %604, %601
  %605 = phi [2 x double]* [ %603, %601 ], [ %619, %604 ]
  %606 = phi i64 [ 0, %601 ], [ %624, %604 ]
  %607 = phi double [ %597, %601 ], [ %623, %604 ]
  %608 = getelementptr inbounds [2 x double], [2 x double]* %605, i64 %606, i64 0
  %609 = load double, double* %608, align 8
  %610 = fdiv double %609, %51
  %611 = fcmp ogt double %610, 2.550000e+02
  %612 = select i1 %611, double 2.550000e+02, double %610
  store double %612, double* %608, align 8
  %613 = load [2 x double]*, [2 x double]** %602, align 16
  %614 = getelementptr inbounds [2 x double], [2 x double]* %613, i64 %606, i64 1
  %615 = load double, double* %614, align 8
  %616 = fdiv double %615, %51
  %617 = fcmp ogt double %616, 2.550000e+02
  %618 = select i1 %617, double 2.550000e+02, double %616
  store double %618, double* %614, align 8
  %619 = load [2 x double]*, [2 x double]** %602, align 16
  %620 = getelementptr inbounds [2 x double], [2 x double]* %619, i64 %606, i64 1
  %621 = load double, double* %620, align 8
  %622 = fcmp ogt double %621, %607
  %623 = select i1 %622, double %621, double %607
  %624 = add nuw nsw i64 %606, 1
  %625 = load i32, i32* %598, align 8
  %626 = sext i32 %625 to i64
  %627 = icmp slt i64 %624, %626
  br i1 %627, label %604, label %628

628:                                              ; preds = %604, %596
  %629 = phi double [ %597, %596 ], [ %623, %604 ]
  %630 = call double @log2(double %629) #9
  %631 = fadd double %630, 1.000000e+00
  %632 = call double @llvm.floor.f64(double %631)
  %633 = fptosi double %632 to i32
  %634 = icmp slt i32 %633, 5
  %635 = select i1 %634, i32 %633, i32 5
  %636 = icmp sgt i32 %635, 2
  %637 = select i1 %636, i32 %635, i32 2
  %638 = sub nsw i32 8, %637
  %639 = sub nsw i32 13, %637
  %640 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 8
  store i32 %639, i32* %640, align 4
  %641 = shl i32 1, %638
  %642 = sitofp i32 %641 to double
  %643 = load i32, i32* %52, align 8
  %644 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 3
  store i32 %643, i32* %644, align 4
  %645 = load i32, i32* %60, align 8
  %646 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 5
  store i32 %645, i32* %646, align 4
  %647 = load i32, i32* %598, align 8
  %648 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %1, i64 0, i32 7
  store i32 %647, i32* %648, align 4
  %649 = icmp sgt i32 %643, 0
  br i1 %649, label %87, label %113
}

; Function Attrs: nofree nounwind
declare double @log2(double) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.ceil.f64(double) #5

; Function Attrs: nounwind readnone speculatable
declare double @llvm.round.f64(double) #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_wiener_denoise_2d(i8** nocapture readonly, i8** nocapture readonly, i32, i32, i32* nocapture readonly, i32* nocapture readonly, float** nocapture readonly, i32, i32, i32) local_unnamed_addr #0 {
  %11 = alloca %struct.aom_flat_block_finder_t, align 8
  %12 = alloca %struct.aom_flat_block_finder_t, align 8
  %13 = add i32 %7, -1
  %14 = add i32 %13, %2
  %15 = sdiv i32 %14, %7
  %16 = add i32 %13, %3
  %17 = sdiv i32 %16, %7
  %18 = add nsw i32 %15, 2
  %19 = mul nsw i32 %18, %7
  %20 = add nsw i32 %17, 2
  %21 = mul nsw i32 %20, %7
  %22 = bitcast %struct.aom_flat_block_finder_t* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %22) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %22, i8* align 8 bitcast ({ double*, double*, i32, i32, double, i32, [4 x i8] }* @__const.aom_wiener_denoise_2d.block_finder_chroma to i8*), i64 40, i1 false)
  %23 = bitcast %struct.aom_flat_block_finder_t* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %23) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %23, i8* align 8 bitcast ({ double*, double*, i32, i32, double, i32, [4 x i8] }* @__const.aom_wiener_denoise_2d.block_finder_chroma to i8*), i64 40, i1 false)
  %24 = shl nsw i32 -1, %8
  %25 = xor i32 %24, -1
  %26 = sitofp i32 %25 to float
  %27 = load i32, i32* %5, align 4
  %28 = getelementptr inbounds i32, i32* %5, i64 1
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %27, %29
  br i1 %30, label %34, label %31

31:                                               ; preds = %10
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %33 = tail call i64 @fwrite(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.18, i64 0, i64 0), i64 66, i64 1, %struct._IO_FILE* %32) #10
  br label %1068

34:                                               ; preds = %10
  %35 = call i32 @aom_flat_block_finder_init(%struct.aom_flat_block_finder_t* nonnull %11, i32 %7, i32 %8, i32 %9)
  %36 = and i32 %35, 1
  %37 = mul nsw i32 %21, %19
  %38 = sext i32 %37 to i64
  %39 = shl nsw i64 %38, 2
  %40 = tail call i8* @aom_malloc(i64 %39) #9
  %41 = bitcast i8* %40 to float*
  %42 = mul nsw i32 %7, %7
  %43 = zext i32 %42 to i64
  %44 = shl nuw nsw i64 %43, 2
  %45 = tail call i8* @aom_malloc(i64 %44) #9
  %46 = bitcast i8* %45 to float*
  %47 = shl i32 %7, 1
  %48 = mul nsw i32 %47, %7
  %49 = sext i32 %48 to i64
  %50 = shl nsw i64 %49, 2
  %51 = tail call i8* @aom_memalign(i64 32, i64 %50) #9
  %52 = bitcast i8* %51 to float*
  %53 = shl nuw nsw i64 %43, 3
  %54 = tail call i8* @aom_malloc(i64 %53) #9
  %55 = bitcast i8* %54 to double*
  %56 = tail call i8* @aom_malloc(i64 %53) #9
  %57 = bitcast i8* %56 to double*
  %58 = tail call i8* @aom_malloc(i64 %44) #9
  %59 = bitcast i8* %58 to float*
  %60 = icmp sgt i32 %7, 0
  br i1 %60, label %61, label %93

61:                                               ; preds = %34
  %62 = sitofp i32 %7 to double
  %63 = sext i32 %7 to i64
  %64 = zext i32 %7 to i64
  br label %65

65:                                               ; preds = %75, %61
  %66 = phi i64 [ 0, %61 ], [ %76, %75 ]
  %67 = trunc i64 %66 to i32
  %68 = sitofp i32 %67 to double
  %69 = fadd double %68, 5.000000e-01
  %70 = fmul double %69, 0x400921FB54442D18
  %71 = fdiv double %70, %62
  %72 = fadd double %71, 0xBFF921FB54442D18
  %73 = tail call double @cos(double %72) #9
  %74 = mul nsw i64 %66, %63
  br label %78

75:                                               ; preds = %78
  %76 = add nuw nsw i64 %66, 1
  %77 = icmp eq i64 %76, %64
  br i1 %77, label %93, label %65

78:                                               ; preds = %78, %65
  %79 = phi i64 [ 0, %65 ], [ %91, %78 ]
  %80 = trunc i64 %79 to i32
  %81 = sitofp i32 %80 to double
  %82 = fadd double %81, 5.000000e-01
  %83 = fmul double %82, 0x400921FB54442D18
  %84 = fdiv double %83, %62
  %85 = fadd double %84, 0xBFF921FB54442D18
  %86 = tail call double @cos(double %85) #9
  %87 = fmul double %73, %86
  %88 = fptrunc double %87 to float
  %89 = add nsw i64 %79, %74
  %90 = getelementptr inbounds float, float* %59, i64 %89
  store float %88, float* %90, align 4
  %91 = add nuw nsw i64 %79, 1
  %92 = icmp eq i64 %91, %64
  br i1 %92, label %75, label %78

93:                                               ; preds = %75, %34
  %94 = tail call %struct.aom_noise_tx_t* @aom_noise_tx_malloc(i32 %7) #9
  %95 = load i32, i32* %5, align 4
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %145, label %97

97:                                               ; preds = %93
  %98 = ashr i32 %7, %95
  %99 = call i32 @aom_flat_block_finder_init(%struct.aom_flat_block_finder_t* nonnull %12, i32 %98, i32 %8, i32 %9)
  %100 = and i32 %99, %36
  %101 = load i32, i32* %5, align 4
  %102 = ashr i32 %7, %101
  %103 = mul nsw i32 %102, %102
  %104 = zext i32 %103 to i64
  %105 = shl nuw nsw i64 %104, 2
  %106 = tail call i8* @aom_malloc(i64 %105) #9
  %107 = bitcast i8* %106 to float*
  %108 = icmp sgt i32 %102, 0
  br i1 %108, label %109, label %141

109:                                              ; preds = %97
  %110 = sitofp i32 %102 to double
  %111 = sext i32 %102 to i64
  %112 = zext i32 %102 to i64
  br label %113

113:                                              ; preds = %123, %109
  %114 = phi i64 [ 0, %109 ], [ %124, %123 ]
  %115 = trunc i64 %114 to i32
  %116 = sitofp i32 %115 to double
  %117 = fadd double %116, 5.000000e-01
  %118 = fmul double %117, 0x400921FB54442D18
  %119 = fdiv double %118, %110
  %120 = fadd double %119, 0xBFF921FB54442D18
  %121 = tail call double @cos(double %120) #9
  %122 = mul nsw i64 %114, %111
  br label %126

123:                                              ; preds = %126
  %124 = add nuw nsw i64 %114, 1
  %125 = icmp eq i64 %124, %112
  br i1 %125, label %141, label %113

126:                                              ; preds = %126, %113
  %127 = phi i64 [ 0, %113 ], [ %139, %126 ]
  %128 = trunc i64 %127 to i32
  %129 = sitofp i32 %128 to double
  %130 = fadd double %129, 5.000000e-01
  %131 = fmul double %130, 0x400921FB54442D18
  %132 = fdiv double %131, %110
  %133 = fadd double %132, 0xBFF921FB54442D18
  %134 = tail call double @cos(double %133) #9
  %135 = fmul double %121, %134
  %136 = fptrunc double %135 to float
  %137 = add nsw i64 %127, %122
  %138 = getelementptr inbounds float, float* %107, i64 %137
  store float %136, float* %138, align 4
  %139 = add nuw nsw i64 %127, 1
  %140 = icmp eq i64 %139, %112
  br i1 %140, label %123, label %126

141:                                              ; preds = %123, %97
  %142 = load i32, i32* %5, align 4
  %143 = ashr i32 %7, %142
  %144 = tail call %struct.aom_noise_tx_t* @aom_noise_tx_malloc(i32 %143) #9
  br label %145

145:                                              ; preds = %93, %141
  %146 = phi i8* [ %106, %141 ], [ %58, %93 ]
  %147 = phi float* [ %107, %141 ], [ %59, %93 ]
  %148 = phi %struct.aom_noise_tx_t* [ %144, %141 ], [ %94, %93 ]
  %149 = phi i32 [ %100, %141 ], [ %36, %93 ]
  %150 = icmp ne %struct.aom_noise_tx_t* %94, null
  %151 = icmp ne %struct.aom_noise_tx_t* %148, null
  %152 = and i1 %150, %151
  %153 = icmp ne i8* %45, null
  %154 = and i1 %153, %152
  %155 = icmp ne i8* %56, null
  %156 = and i1 %155, %154
  %157 = icmp ne i8* %51, null
  %158 = and i1 %157, %156
  %159 = icmp ne i8* %54, null
  %160 = and i1 %159, %158
  %161 = icmp ne i8* %58, null
  %162 = and i1 %161, %160
  %163 = icmp ne float* %147, null
  %164 = and i1 %163, %162
  %165 = icmp ne i8* %40, null
  %166 = and i1 %165, %164
  %167 = zext i1 %166 to i32
  %168 = and i32 %149, %167
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %183, label %170

170:                                              ; preds = %145
  %171 = sext i32 %19 to i64
  %172 = shl nsw i64 %171, 2
  %173 = sext i32 %21 to i64
  %174 = mul i64 %172, %173
  %175 = icmp sgt i32 %17, -1
  %176 = icmp sgt i32 %15, -1
  %177 = icmp eq i32 %9, 0
  %178 = add i32 %15, 2
  %179 = mul i32 %178, %7
  %180 = zext i32 %179 to i64
  %181 = mul i32 %178, %7
  %182 = zext i32 %181 to i64
  br label %191

183:                                              ; preds = %1059, %145
  tail call void @aom_free(i8* %40) #9
  tail call void @aom_free(i8* %45) #9
  tail call void @aom_free(i8* %51) #9
  tail call void @aom_free(i8* %56) #9
  tail call void @aom_free(i8* %54) #9
  tail call void @aom_free(i8* %58) #9
  tail call void @aom_noise_tx_free(%struct.aom_noise_tx_t* %94) #9
  %184 = getelementptr inbounds %struct.aom_flat_block_finder_t, %struct.aom_flat_block_finder_t* %11, i64 0, i32 1
  %185 = bitcast double** %184 to i8**
  %186 = load i8*, i8** %185, align 8
  tail call void @aom_free(i8* %186) #9
  %187 = bitcast %struct.aom_flat_block_finder_t* %11 to i8**
  %188 = load i8*, i8** %187, align 8
  tail call void @aom_free(i8* %188) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 0, i64 40, i1 false) #9
  %189 = load i32, i32* %5, align 4
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %1068, label %1062

191:                                              ; preds = %1059, %170
  %192 = phi i64 [ 0, %170 ], [ %1060, %1059 ]
  %193 = icmp eq i64 %192, 0
  %194 = select i1 %193, float* %59, float* %147
  %195 = bitcast float* %194 to i8*
  %196 = icmp ne i64 %192, 0
  br i1 %196, label %197, label %201

197:                                              ; preds = %191
  %198 = load i32, i32* %28, align 4
  %199 = load i32, i32* %5, align 4
  %200 = icmp sgt i32 %199, 0
  br i1 %200, label %204, label %201

201:                                              ; preds = %191, %197
  %202 = phi i32 [ %199, %197 ], [ 0, %191 ]
  %203 = phi i32 [ %198, %197 ], [ 0, %191 ]
  br label %204

204:                                              ; preds = %197, %201
  %205 = phi i32 [ %202, %201 ], [ %199, %197 ]
  %206 = phi i32 [ %203, %201 ], [ %198, %197 ]
  %207 = phi %struct.aom_noise_tx_t* [ %94, %201 ], [ %148, %197 ]
  %208 = getelementptr inbounds i8*, i8** %0, i64 %192
  %209 = load i8*, i8** %208, align 8
  %210 = icmp eq i8* %209, null
  br i1 %210, label %1059, label %211

211:                                              ; preds = %204
  %212 = getelementptr inbounds i8*, i8** %1, i64 %192
  %213 = load i8*, i8** %212, align 8
  %214 = icmp eq i8* %213, null
  br i1 %214, label %1059, label %215

215:                                              ; preds = %211
  br i1 %196, label %216, label %220

216:                                              ; preds = %215
  %217 = load i32, i32* %5, align 4
  %218 = icmp eq i32 %217, 0
  %219 = select i1 %218, %struct.aom_flat_block_finder_t* %11, %struct.aom_flat_block_finder_t* %12
  br label %220

220:                                              ; preds = %216, %215
  %221 = phi %struct.aom_flat_block_finder_t* [ %11, %215 ], [ %219, %216 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %40, i8 0, i64 %174, i1 false)
  %222 = ashr i32 %7, %206
  %223 = icmp sgt i32 %222, 0
  br i1 %223, label %224, label %331

224:                                              ; preds = %220
  %225 = ashr i32 %7, %205
  %226 = icmp sgt i32 %225, 0
  %227 = mul i32 %222, %225
  %228 = ashr i32 %2, %205
  %229 = ashr i32 %3, %206
  %230 = getelementptr inbounds i32, i32* %4, i64 %192
  %231 = icmp sgt i32 %227, 0
  %232 = getelementptr inbounds float*, float** %6, i64 %192
  %233 = zext i32 %227 to i64
  %234 = sdiv i32 %225, 2
  %235 = lshr i32 %222, 1
  %236 = sext i32 %225 to i64
  %237 = zext i32 %222 to i64
  %238 = zext i32 %225 to i64
  %239 = add nsw i64 %238, -1
  %240 = shl nsw i64 %236, 2
  %241 = shl nuw nsw i64 %238, 2
  %242 = getelementptr i8, i8* %40, i64 %241
  %243 = shl nuw nsw i64 %233, 2
  %244 = getelementptr i8, i8* %45, i64 %243
  %245 = getelementptr float, float* %194, i64 %233
  %246 = bitcast float* %245 to i8*
  %247 = shl nuw nsw i64 %233, 2
  %248 = getelementptr i8, i8* %51, i64 %247
  %249 = getelementptr float, float* %194, i64 %233
  %250 = bitcast float* %249 to i8*
  %251 = shl nuw nsw i64 %233, 2
  %252 = getelementptr i8, i8* %51, i64 %251
  %253 = getelementptr i8, i8* %45, i64 %251
  %254 = shl nuw nsw i64 %233, 3
  %255 = getelementptr i8, i8* %54, i64 %254
  %256 = getelementptr i8, i8* %56, i64 %254
  %257 = and i64 %233, 4294967292
  %258 = add nsw i64 %257, -4
  %259 = lshr exact i64 %258, 2
  %260 = add nuw nsw i64 %259, 1
  %261 = and i64 %233, 4294967288
  %262 = add nsw i64 %261, -8
  %263 = lshr exact i64 %262, 3
  %264 = add nuw nsw i64 %263, 1
  %265 = icmp ult i32 %227, 4
  %266 = icmp ult i8* %51, %253
  %267 = icmp ult i8* %45, %252
  %268 = and i1 %266, %267
  %269 = icmp ult i8* %51, %255
  %270 = icmp ult i8* %54, %252
  %271 = and i1 %269, %270
  %272 = or i1 %268, %271
  %273 = icmp ult i8* %51, %256
  %274 = icmp ult i8* %56, %252
  %275 = and i1 %273, %274
  %276 = or i1 %272, %275
  %277 = icmp ult i8* %45, %255
  %278 = icmp ult i8* %54, %253
  %279 = and i1 %277, %278
  %280 = or i1 %276, %279
  %281 = icmp ult i8* %45, %256
  %282 = icmp ult i8* %56, %253
  %283 = and i1 %281, %282
  %284 = or i1 %280, %283
  %285 = and i64 %233, 4294967292
  %286 = and i64 %260, 1
  %287 = icmp eq i64 %258, 0
  %288 = sub nuw nsw i64 %260, %286
  %289 = icmp eq i64 %286, 0
  %290 = icmp eq i64 %285, %233
  %291 = and i64 %233, 1
  %292 = icmp eq i64 %291, 0
  %293 = sub nsw i64 0, %233
  %294 = icmp ult i32 %227, 8
  %295 = icmp ult i8* %51, %250
  %296 = icmp ugt i8* %248, %195
  %297 = and i1 %295, %296
  %298 = and i64 %233, 4294967288
  %299 = and i64 %264, 1
  %300 = icmp eq i64 %262, 0
  %301 = sub nuw nsw i64 %264, %299
  %302 = icmp eq i64 %299, 0
  %303 = icmp eq i64 %298, %233
  %304 = and i64 %233, 3
  %305 = icmp eq i64 %304, 0
  %306 = icmp ult i32 %227, 8
  %307 = icmp ult i8* %45, %246
  %308 = icmp ugt i8* %244, %195
  %309 = and i1 %307, %308
  %310 = and i64 %233, 4294967288
  %311 = and i64 %264, 1
  %312 = icmp eq i64 %262, 0
  %313 = sub nuw nsw i64 %264, %311
  %314 = icmp eq i64 %311, 0
  %315 = icmp eq i64 %310, %233
  %316 = and i64 %233, 3
  %317 = icmp eq i64 %316, 0
  %318 = icmp ult i32 %225, 8
  %319 = trunc i64 %239 to i32
  %320 = icmp ugt i64 %239, 4294967295
  %321 = and i64 %238, 4294967288
  %322 = icmp eq i64 %321, %238
  %323 = and i64 %238, 1
  %324 = icmp eq i64 %323, 0
  %325 = sub nsw i64 0, %238
  br label %326

326:                                              ; preds = %224, %338
  %327 = phi i32 [ 0, %224 ], [ %341, %338 ]
  %328 = phi i32 [ 0, %224 ], [ %339, %338 ]
  %329 = mul i32 %235, %327
  %330 = mul i32 %235, %327
  br i1 %226, label %333, label %338

331:                                              ; preds = %338, %220
  %332 = load i8*, i8** %212, align 8
  br i1 %177, label %967, label %874

333:                                              ; preds = %326, %362
  %334 = phi i32 [ %365, %362 ], [ 0, %326 ]
  %335 = phi i32 [ %363, %362 ], [ 0, %326 ]
  %336 = mul i32 %234, %334
  %337 = mul i32 %234, %334
  br i1 %175, label %342, label %362

338:                                              ; preds = %362, %326
  %339 = add nuw nsw i32 %328, %235
  %340 = icmp slt i32 %339, %222
  %341 = add i32 %327, 1
  br i1 %340, label %326, label %331

342:                                              ; preds = %333, %366
  %343 = phi i32 [ %367, %366 ], [ -1, %333 ]
  br i1 %176, label %346, label %344

344:                                              ; preds = %342
  %345 = add nsw i32 %343, 1
  br label %366

346:                                              ; preds = %342
  %347 = mul nsw i32 %343, %222
  %348 = add nsw i32 %347, %328
  %349 = add nsw i32 %343, 1
  %350 = mul nsw i32 %349, %222
  %351 = add i32 %350, %328
  %352 = add i32 %343, 1
  %353 = mul i32 %222, %352
  %354 = add i32 %330, %353
  %355 = mul i32 %179, %354
  %356 = add i32 %337, %355
  %357 = zext i32 %356 to i64
  %358 = add i32 %329, %353
  %359 = mul i32 %181, %358
  %360 = add i32 %336, %359
  %361 = zext i32 %360 to i64
  br label %369

362:                                              ; preds = %366, %333
  %363 = add nsw i32 %335, %234
  %364 = icmp slt i32 %363, %225
  %365 = add i32 %334, 1
  br i1 %364, label %333, label %338

366:                                              ; preds = %725, %344
  %367 = phi i32 [ %345, %344 ], [ %349, %725 ]
  %368 = icmp eq i32 %367, %17
  br i1 %368, label %362, label %342

369:                                              ; preds = %725, %346
  %370 = phi i64 [ %727, %725 ], [ 0, %346 ]
  %371 = phi i32 [ %701, %725 ], [ -1, %346 ]
  %372 = mul i64 %370, %238
  %373 = add i64 %372, %361
  %374 = mul i64 %370, %238
  %375 = add i64 %374, %357
  %376 = load i8*, i8** %208, align 8
  %377 = load i32, i32* %230, align 4
  %378 = mul nsw i32 %371, %225
  %379 = add nsw i32 %378, %335
  call void @aom_flat_block_finder_extract_block(%struct.aom_flat_block_finder_t* %221, i8* %376, i32 %228, i32 %229, i32 %377, i32 %379, i32 %348, double* %57, double* %55)
  br i1 %231, label %380, label %698

380:                                              ; preds = %369
  %381 = or i1 %265, %284
  br i1 %381, label %382, label %398

382:                                              ; preds = %380, %481
  %383 = phi i64 [ 0, %380 ], [ %285, %481 ]
  %384 = xor i64 %383, -1
  br i1 %292, label %395, label %385

385:                                              ; preds = %382
  %386 = getelementptr inbounds double, double* %55, i64 %383
  %387 = load double, double* %386, align 8
  %388 = fptrunc double %387 to float
  %389 = getelementptr inbounds float, float* %52, i64 %383
  store float %388, float* %389, align 4
  %390 = getelementptr inbounds double, double* %57, i64 %383
  %391 = load double, double* %390, align 8
  %392 = fptrunc double %391 to float
  %393 = getelementptr inbounds float, float* %46, i64 %383
  store float %392, float* %393, align 4
  %394 = or i64 %383, 1
  br label %395

395:                                              ; preds = %385, %382
  %396 = phi i64 [ %394, %385 ], [ %383, %382 ]
  %397 = icmp eq i64 %384, %293
  br i1 %397, label %482, label %704

398:                                              ; preds = %380
  br i1 %287, label %454, label %399

399:                                              ; preds = %398, %399
  %400 = phi i64 [ %451, %399 ], [ 0, %398 ]
  %401 = phi i64 [ %452, %399 ], [ %288, %398 ]
  %402 = getelementptr inbounds double, double* %55, i64 %400
  %403 = bitcast double* %402 to <2 x double>*
  %404 = load <2 x double>, <2 x double>* %403, align 8, !alias.scope !46
  %405 = getelementptr inbounds double, double* %402, i64 2
  %406 = bitcast double* %405 to <2 x double>*
  %407 = load <2 x double>, <2 x double>* %406, align 8, !alias.scope !46
  %408 = fptrunc <2 x double> %404 to <2 x float>
  %409 = fptrunc <2 x double> %407 to <2 x float>
  %410 = getelementptr inbounds float, float* %52, i64 %400
  %411 = bitcast float* %410 to <2 x float>*
  store <2 x float> %408, <2 x float>* %411, align 4, !alias.scope !49, !noalias !51
  %412 = getelementptr inbounds float, float* %410, i64 2
  %413 = bitcast float* %412 to <2 x float>*
  store <2 x float> %409, <2 x float>* %413, align 4, !alias.scope !49, !noalias !51
  %414 = getelementptr inbounds double, double* %57, i64 %400
  %415 = bitcast double* %414 to <2 x double>*
  %416 = load <2 x double>, <2 x double>* %415, align 8, !alias.scope !54
  %417 = getelementptr inbounds double, double* %414, i64 2
  %418 = bitcast double* %417 to <2 x double>*
  %419 = load <2 x double>, <2 x double>* %418, align 8, !alias.scope !54
  %420 = fptrunc <2 x double> %416 to <2 x float>
  %421 = fptrunc <2 x double> %419 to <2 x float>
  %422 = getelementptr inbounds float, float* %46, i64 %400
  %423 = bitcast float* %422 to <2 x float>*
  store <2 x float> %420, <2 x float>* %423, align 4, !alias.scope !55, !noalias !56
  %424 = getelementptr inbounds float, float* %422, i64 2
  %425 = bitcast float* %424 to <2 x float>*
  store <2 x float> %421, <2 x float>* %425, align 4, !alias.scope !55, !noalias !56
  %426 = or i64 %400, 4
  %427 = getelementptr inbounds double, double* %55, i64 %426
  %428 = bitcast double* %427 to <2 x double>*
  %429 = load <2 x double>, <2 x double>* %428, align 8, !alias.scope !46
  %430 = getelementptr inbounds double, double* %427, i64 2
  %431 = bitcast double* %430 to <2 x double>*
  %432 = load <2 x double>, <2 x double>* %431, align 8, !alias.scope !46
  %433 = fptrunc <2 x double> %429 to <2 x float>
  %434 = fptrunc <2 x double> %432 to <2 x float>
  %435 = getelementptr inbounds float, float* %52, i64 %426
  %436 = bitcast float* %435 to <2 x float>*
  store <2 x float> %433, <2 x float>* %436, align 4, !alias.scope !49, !noalias !51
  %437 = getelementptr inbounds float, float* %435, i64 2
  %438 = bitcast float* %437 to <2 x float>*
  store <2 x float> %434, <2 x float>* %438, align 4, !alias.scope !49, !noalias !51
  %439 = getelementptr inbounds double, double* %57, i64 %426
  %440 = bitcast double* %439 to <2 x double>*
  %441 = load <2 x double>, <2 x double>* %440, align 8, !alias.scope !54
  %442 = getelementptr inbounds double, double* %439, i64 2
  %443 = bitcast double* %442 to <2 x double>*
  %444 = load <2 x double>, <2 x double>* %443, align 8, !alias.scope !54
  %445 = fptrunc <2 x double> %441 to <2 x float>
  %446 = fptrunc <2 x double> %444 to <2 x float>
  %447 = getelementptr inbounds float, float* %46, i64 %426
  %448 = bitcast float* %447 to <2 x float>*
  store <2 x float> %445, <2 x float>* %448, align 4, !alias.scope !55, !noalias !56
  %449 = getelementptr inbounds float, float* %447, i64 2
  %450 = bitcast float* %449 to <2 x float>*
  store <2 x float> %446, <2 x float>* %450, align 4, !alias.scope !55, !noalias !56
  %451 = add i64 %400, 8
  %452 = add i64 %401, -2
  %453 = icmp eq i64 %452, 0
  br i1 %453, label %454, label %399, !llvm.loop !57

454:                                              ; preds = %399, %398
  %455 = phi i64 [ 0, %398 ], [ %451, %399 ]
  br i1 %289, label %481, label %456

456:                                              ; preds = %454
  %457 = getelementptr inbounds double, double* %55, i64 %455
  %458 = bitcast double* %457 to <2 x double>*
  %459 = load <2 x double>, <2 x double>* %458, align 8, !alias.scope !46
  %460 = getelementptr inbounds double, double* %457, i64 2
  %461 = bitcast double* %460 to <2 x double>*
  %462 = load <2 x double>, <2 x double>* %461, align 8, !alias.scope !46
  %463 = fptrunc <2 x double> %459 to <2 x float>
  %464 = fptrunc <2 x double> %462 to <2 x float>
  %465 = getelementptr inbounds float, float* %52, i64 %455
  %466 = bitcast float* %465 to <2 x float>*
  store <2 x float> %463, <2 x float>* %466, align 4, !alias.scope !49, !noalias !51
  %467 = getelementptr inbounds float, float* %465, i64 2
  %468 = bitcast float* %467 to <2 x float>*
  store <2 x float> %464, <2 x float>* %468, align 4, !alias.scope !49, !noalias !51
  %469 = getelementptr inbounds double, double* %57, i64 %455
  %470 = bitcast double* %469 to <2 x double>*
  %471 = load <2 x double>, <2 x double>* %470, align 8, !alias.scope !54
  %472 = getelementptr inbounds double, double* %469, i64 2
  %473 = bitcast double* %472 to <2 x double>*
  %474 = load <2 x double>, <2 x double>* %473, align 8, !alias.scope !54
  %475 = fptrunc <2 x double> %471 to <2 x float>
  %476 = fptrunc <2 x double> %474 to <2 x float>
  %477 = getelementptr inbounds float, float* %46, i64 %455
  %478 = bitcast float* %477 to <2 x float>*
  store <2 x float> %475, <2 x float>* %478, align 4, !alias.scope !55, !noalias !56
  %479 = getelementptr inbounds float, float* %477, i64 2
  %480 = bitcast float* %479 to <2 x float>*
  store <2 x float> %476, <2 x float>* %480, align 4, !alias.scope !55, !noalias !56
  br label %481

481:                                              ; preds = %454, %456
  br i1 %290, label %482, label %382

482:                                              ; preds = %395, %704, %481
  br i1 %231, label %483, label %698

483:                                              ; preds = %482
  %484 = or i1 %294, %297
  br i1 %484, label %545, label %485

485:                                              ; preds = %483
  br i1 %300, label %525, label %486

486:                                              ; preds = %485, %486
  %487 = phi i64 [ %522, %486 ], [ 0, %485 ]
  %488 = phi i64 [ %523, %486 ], [ %301, %485 ]
  %489 = getelementptr inbounds float, float* %194, i64 %487
  %490 = bitcast float* %489 to <4 x float>*
  %491 = load <4 x float>, <4 x float>* %490, align 4, !alias.scope !58
  %492 = getelementptr inbounds float, float* %489, i64 4
  %493 = bitcast float* %492 to <4 x float>*
  %494 = load <4 x float>, <4 x float>* %493, align 4, !alias.scope !58
  %495 = getelementptr inbounds float, float* %52, i64 %487
  %496 = bitcast float* %495 to <4 x float>*
  %497 = load <4 x float>, <4 x float>* %496, align 4, !alias.scope !61, !noalias !58
  %498 = getelementptr inbounds float, float* %495, i64 4
  %499 = bitcast float* %498 to <4 x float>*
  %500 = load <4 x float>, <4 x float>* %499, align 4, !alias.scope !61, !noalias !58
  %501 = fmul <4 x float> %491, %497
  %502 = fmul <4 x float> %494, %500
  %503 = bitcast float* %495 to <4 x float>*
  store <4 x float> %501, <4 x float>* %503, align 4, !alias.scope !61, !noalias !58
  %504 = bitcast float* %498 to <4 x float>*
  store <4 x float> %502, <4 x float>* %504, align 4, !alias.scope !61, !noalias !58
  %505 = or i64 %487, 8
  %506 = getelementptr inbounds float, float* %194, i64 %505
  %507 = bitcast float* %506 to <4 x float>*
  %508 = load <4 x float>, <4 x float>* %507, align 4, !alias.scope !58
  %509 = getelementptr inbounds float, float* %506, i64 4
  %510 = bitcast float* %509 to <4 x float>*
  %511 = load <4 x float>, <4 x float>* %510, align 4, !alias.scope !58
  %512 = getelementptr inbounds float, float* %52, i64 %505
  %513 = bitcast float* %512 to <4 x float>*
  %514 = load <4 x float>, <4 x float>* %513, align 4, !alias.scope !61, !noalias !58
  %515 = getelementptr inbounds float, float* %512, i64 4
  %516 = bitcast float* %515 to <4 x float>*
  %517 = load <4 x float>, <4 x float>* %516, align 4, !alias.scope !61, !noalias !58
  %518 = fmul <4 x float> %508, %514
  %519 = fmul <4 x float> %511, %517
  %520 = bitcast float* %512 to <4 x float>*
  store <4 x float> %518, <4 x float>* %520, align 4, !alias.scope !61, !noalias !58
  %521 = bitcast float* %515 to <4 x float>*
  store <4 x float> %519, <4 x float>* %521, align 4, !alias.scope !61, !noalias !58
  %522 = add i64 %487, 16
  %523 = add i64 %488, -2
  %524 = icmp eq i64 %523, 0
  br i1 %524, label %525, label %486, !llvm.loop !63

525:                                              ; preds = %486, %485
  %526 = phi i64 [ 0, %485 ], [ %522, %486 ]
  br i1 %302, label %544, label %527

527:                                              ; preds = %525
  %528 = getelementptr inbounds float, float* %194, i64 %526
  %529 = bitcast float* %528 to <4 x float>*
  %530 = load <4 x float>, <4 x float>* %529, align 4, !alias.scope !58
  %531 = getelementptr inbounds float, float* %528, i64 4
  %532 = bitcast float* %531 to <4 x float>*
  %533 = load <4 x float>, <4 x float>* %532, align 4, !alias.scope !58
  %534 = getelementptr inbounds float, float* %52, i64 %526
  %535 = bitcast float* %534 to <4 x float>*
  %536 = load <4 x float>, <4 x float>* %535, align 4, !alias.scope !61, !noalias !58
  %537 = getelementptr inbounds float, float* %534, i64 4
  %538 = bitcast float* %537 to <4 x float>*
  %539 = load <4 x float>, <4 x float>* %538, align 4, !alias.scope !61, !noalias !58
  %540 = fmul <4 x float> %530, %536
  %541 = fmul <4 x float> %533, %539
  %542 = bitcast float* %534 to <4 x float>*
  store <4 x float> %540, <4 x float>* %542, align 4, !alias.scope !61, !noalias !58
  %543 = bitcast float* %537 to <4 x float>*
  store <4 x float> %541, <4 x float>* %543, align 4, !alias.scope !61, !noalias !58
  br label %544

544:                                              ; preds = %525, %527
  br i1 %303, label %590, label %545

545:                                              ; preds = %483, %544
  %546 = phi i64 [ 0, %483 ], [ %298, %544 ]
  %547 = xor i64 %546, -1
  %548 = add nsw i64 %547, %233
  br i1 %305, label %560, label %549

549:                                              ; preds = %545, %549
  %550 = phi i64 [ %557, %549 ], [ %546, %545 ]
  %551 = phi i64 [ %558, %549 ], [ %304, %545 ]
  %552 = getelementptr inbounds float, float* %194, i64 %550
  %553 = load float, float* %552, align 4
  %554 = getelementptr inbounds float, float* %52, i64 %550
  %555 = load float, float* %554, align 4
  %556 = fmul float %553, %555
  store float %556, float* %554, align 4
  %557 = add nuw nsw i64 %550, 1
  %558 = add i64 %551, -1
  %559 = icmp eq i64 %558, 0
  br i1 %559, label %560, label %549, !llvm.loop !64

560:                                              ; preds = %549, %545
  %561 = phi i64 [ %546, %545 ], [ %557, %549 ]
  %562 = icmp ult i64 %548, 3
  br i1 %562, label %590, label %563

563:                                              ; preds = %560, %563
  %564 = phi i64 [ %588, %563 ], [ %561, %560 ]
  %565 = getelementptr inbounds float, float* %194, i64 %564
  %566 = load float, float* %565, align 4
  %567 = getelementptr inbounds float, float* %52, i64 %564
  %568 = load float, float* %567, align 4
  %569 = fmul float %566, %568
  store float %569, float* %567, align 4
  %570 = add nuw nsw i64 %564, 1
  %571 = getelementptr inbounds float, float* %194, i64 %570
  %572 = load float, float* %571, align 4
  %573 = getelementptr inbounds float, float* %52, i64 %570
  %574 = load float, float* %573, align 4
  %575 = fmul float %572, %574
  store float %575, float* %573, align 4
  %576 = add nuw nsw i64 %564, 2
  %577 = getelementptr inbounds float, float* %194, i64 %576
  %578 = load float, float* %577, align 4
  %579 = getelementptr inbounds float, float* %52, i64 %576
  %580 = load float, float* %579, align 4
  %581 = fmul float %578, %580
  store float %581, float* %579, align 4
  %582 = add nuw nsw i64 %564, 3
  %583 = getelementptr inbounds float, float* %194, i64 %582
  %584 = load float, float* %583, align 4
  %585 = getelementptr inbounds float, float* %52, i64 %582
  %586 = load float, float* %585, align 4
  %587 = fmul float %584, %586
  store float %587, float* %585, align 4
  %588 = add nuw nsw i64 %564, 4
  %589 = icmp eq i64 %588, %233
  br i1 %589, label %590, label %563, !llvm.loop !65

590:                                              ; preds = %560, %563, %544
  tail call void @aom_noise_tx_forward(%struct.aom_noise_tx_t* %207, float* %52) #9
  %591 = load float*, float** %232, align 8
  tail call void @aom_noise_tx_filter(%struct.aom_noise_tx_t* %207, float* %591) #9
  tail call void @aom_noise_tx_inverse(%struct.aom_noise_tx_t* %207, float* %52) #9
  %592 = or i1 %306, %309
  br i1 %592, label %653, label %593

593:                                              ; preds = %590
  br i1 %312, label %633, label %594

594:                                              ; preds = %593, %594
  %595 = phi i64 [ %630, %594 ], [ 0, %593 ]
  %596 = phi i64 [ %631, %594 ], [ %313, %593 ]
  %597 = getelementptr inbounds float, float* %194, i64 %595
  %598 = bitcast float* %597 to <4 x float>*
  %599 = load <4 x float>, <4 x float>* %598, align 4, !alias.scope !66
  %600 = getelementptr inbounds float, float* %597, i64 4
  %601 = bitcast float* %600 to <4 x float>*
  %602 = load <4 x float>, <4 x float>* %601, align 4, !alias.scope !66
  %603 = getelementptr inbounds float, float* %46, i64 %595
  %604 = bitcast float* %603 to <4 x float>*
  %605 = load <4 x float>, <4 x float>* %604, align 4, !alias.scope !69, !noalias !66
  %606 = getelementptr inbounds float, float* %603, i64 4
  %607 = bitcast float* %606 to <4 x float>*
  %608 = load <4 x float>, <4 x float>* %607, align 4, !alias.scope !69, !noalias !66
  %609 = fmul <4 x float> %599, %605
  %610 = fmul <4 x float> %602, %608
  %611 = bitcast float* %603 to <4 x float>*
  store <4 x float> %609, <4 x float>* %611, align 4, !alias.scope !69, !noalias !66
  %612 = bitcast float* %606 to <4 x float>*
  store <4 x float> %610, <4 x float>* %612, align 4, !alias.scope !69, !noalias !66
  %613 = or i64 %595, 8
  %614 = getelementptr inbounds float, float* %194, i64 %613
  %615 = bitcast float* %614 to <4 x float>*
  %616 = load <4 x float>, <4 x float>* %615, align 4, !alias.scope !66
  %617 = getelementptr inbounds float, float* %614, i64 4
  %618 = bitcast float* %617 to <4 x float>*
  %619 = load <4 x float>, <4 x float>* %618, align 4, !alias.scope !66
  %620 = getelementptr inbounds float, float* %46, i64 %613
  %621 = bitcast float* %620 to <4 x float>*
  %622 = load <4 x float>, <4 x float>* %621, align 4, !alias.scope !69, !noalias !66
  %623 = getelementptr inbounds float, float* %620, i64 4
  %624 = bitcast float* %623 to <4 x float>*
  %625 = load <4 x float>, <4 x float>* %624, align 4, !alias.scope !69, !noalias !66
  %626 = fmul <4 x float> %616, %622
  %627 = fmul <4 x float> %619, %625
  %628 = bitcast float* %620 to <4 x float>*
  store <4 x float> %626, <4 x float>* %628, align 4, !alias.scope !69, !noalias !66
  %629 = bitcast float* %623 to <4 x float>*
  store <4 x float> %627, <4 x float>* %629, align 4, !alias.scope !69, !noalias !66
  %630 = add i64 %595, 16
  %631 = add i64 %596, -2
  %632 = icmp eq i64 %631, 0
  br i1 %632, label %633, label %594, !llvm.loop !71

633:                                              ; preds = %594, %593
  %634 = phi i64 [ 0, %593 ], [ %630, %594 ]
  br i1 %314, label %652, label %635

635:                                              ; preds = %633
  %636 = getelementptr inbounds float, float* %194, i64 %634
  %637 = bitcast float* %636 to <4 x float>*
  %638 = load <4 x float>, <4 x float>* %637, align 4, !alias.scope !66
  %639 = getelementptr inbounds float, float* %636, i64 4
  %640 = bitcast float* %639 to <4 x float>*
  %641 = load <4 x float>, <4 x float>* %640, align 4, !alias.scope !66
  %642 = getelementptr inbounds float, float* %46, i64 %634
  %643 = bitcast float* %642 to <4 x float>*
  %644 = load <4 x float>, <4 x float>* %643, align 4, !alias.scope !69, !noalias !66
  %645 = getelementptr inbounds float, float* %642, i64 4
  %646 = bitcast float* %645 to <4 x float>*
  %647 = load <4 x float>, <4 x float>* %646, align 4, !alias.scope !69, !noalias !66
  %648 = fmul <4 x float> %638, %644
  %649 = fmul <4 x float> %641, %647
  %650 = bitcast float* %642 to <4 x float>*
  store <4 x float> %648, <4 x float>* %650, align 4, !alias.scope !69, !noalias !66
  %651 = bitcast float* %645 to <4 x float>*
  store <4 x float> %649, <4 x float>* %651, align 4, !alias.scope !69, !noalias !66
  br label %652

652:                                              ; preds = %633, %635
  br i1 %315, label %700, label %653

653:                                              ; preds = %590, %652
  %654 = phi i64 [ 0, %590 ], [ %310, %652 ]
  %655 = xor i64 %654, -1
  %656 = add nsw i64 %655, %233
  br i1 %317, label %668, label %657

657:                                              ; preds = %653, %657
  %658 = phi i64 [ %665, %657 ], [ %654, %653 ]
  %659 = phi i64 [ %666, %657 ], [ %316, %653 ]
  %660 = getelementptr inbounds float, float* %194, i64 %658
  %661 = load float, float* %660, align 4
  %662 = getelementptr inbounds float, float* %46, i64 %658
  %663 = load float, float* %662, align 4
  %664 = fmul float %661, %663
  store float %664, float* %662, align 4
  %665 = add nuw nsw i64 %658, 1
  %666 = add i64 %659, -1
  %667 = icmp eq i64 %666, 0
  br i1 %667, label %668, label %657, !llvm.loop !72

668:                                              ; preds = %657, %653
  %669 = phi i64 [ %654, %653 ], [ %665, %657 ]
  %670 = icmp ult i64 %656, 3
  br i1 %670, label %700, label %671

671:                                              ; preds = %668, %671
  %672 = phi i64 [ %696, %671 ], [ %669, %668 ]
  %673 = getelementptr inbounds float, float* %194, i64 %672
  %674 = load float, float* %673, align 4
  %675 = getelementptr inbounds float, float* %46, i64 %672
  %676 = load float, float* %675, align 4
  %677 = fmul float %674, %676
  store float %677, float* %675, align 4
  %678 = add nuw nsw i64 %672, 1
  %679 = getelementptr inbounds float, float* %194, i64 %678
  %680 = load float, float* %679, align 4
  %681 = getelementptr inbounds float, float* %46, i64 %678
  %682 = load float, float* %681, align 4
  %683 = fmul float %680, %682
  store float %683, float* %681, align 4
  %684 = add nuw nsw i64 %672, 2
  %685 = getelementptr inbounds float, float* %194, i64 %684
  %686 = load float, float* %685, align 4
  %687 = getelementptr inbounds float, float* %46, i64 %684
  %688 = load float, float* %687, align 4
  %689 = fmul float %686, %688
  store float %689, float* %687, align 4
  %690 = add nuw nsw i64 %672, 3
  %691 = getelementptr inbounds float, float* %194, i64 %690
  %692 = load float, float* %691, align 4
  %693 = getelementptr inbounds float, float* %46, i64 %690
  %694 = load float, float* %693, align 4
  %695 = fmul float %692, %694
  store float %695, float* %693, align 4
  %696 = add nuw nsw i64 %672, 4
  %697 = icmp eq i64 %696, %233
  br i1 %697, label %700, label %671, !llvm.loop !73

698:                                              ; preds = %369, %482
  tail call void @aom_noise_tx_forward(%struct.aom_noise_tx_t* %207, float* %52) #9
  %699 = load float*, float** %232, align 8
  tail call void @aom_noise_tx_filter(%struct.aom_noise_tx_t* %207, float* %699) #9
  tail call void @aom_noise_tx_inverse(%struct.aom_noise_tx_t* %207, float* %52) #9
  br label %700

700:                                              ; preds = %668, %671, %652, %698
  %701 = add nsw i32 %371, 1
  %702 = mul nsw i32 %701, %225
  %703 = add i32 %702, %335
  br label %728

704:                                              ; preds = %395, %704
  %705 = phi i64 [ %723, %704 ], [ %396, %395 ]
  %706 = getelementptr inbounds double, double* %55, i64 %705
  %707 = load double, double* %706, align 8
  %708 = fptrunc double %707 to float
  %709 = getelementptr inbounds float, float* %52, i64 %705
  store float %708, float* %709, align 4
  %710 = getelementptr inbounds double, double* %57, i64 %705
  %711 = load double, double* %710, align 8
  %712 = fptrunc double %711 to float
  %713 = getelementptr inbounds float, float* %46, i64 %705
  store float %712, float* %713, align 4
  %714 = add nuw nsw i64 %705, 1
  %715 = getelementptr inbounds double, double* %55, i64 %714
  %716 = load double, double* %715, align 8
  %717 = fptrunc double %716 to float
  %718 = getelementptr inbounds float, float* %52, i64 %714
  store float %717, float* %718, align 4
  %719 = getelementptr inbounds double, double* %57, i64 %714
  %720 = load double, double* %719, align 8
  %721 = fptrunc double %720 to float
  %722 = getelementptr inbounds float, float* %46, i64 %714
  store float %721, float* %722, align 4
  %723 = add nuw nsw i64 %705, 2
  %724 = icmp eq i64 %723, %233
  br i1 %724, label %482, label %704, !llvm.loop !74

725:                                              ; preds = %836
  %726 = icmp eq i32 %701, %15
  %727 = add i64 %370, 1
  br i1 %726, label %366, label %369

728:                                              ; preds = %700, %836
  %729 = phi i64 [ 0, %700 ], [ %837, %836 ]
  %730 = mul i64 %240, %729
  %731 = getelementptr i8, i8* %51, i64 %730
  %732 = add i64 %241, %730
  %733 = getelementptr i8, i8* %51, i64 %732
  %734 = mul i64 %729, %182
  %735 = add i64 %373, %734
  %736 = shl i64 %735, 32
  %737 = ashr exact i64 %736, 30
  %738 = getelementptr i8, i8* %40, i64 %737
  %739 = getelementptr i8, i8* %242, i64 %737
  %740 = getelementptr i8, i8* %45, i64 %730
  %741 = getelementptr i8, i8* %45, i64 %732
  %742 = mul i64 %729, %236
  %743 = getelementptr float, float* %194, i64 %742
  %744 = bitcast float* %743 to i8*
  %745 = add i64 %742, %238
  %746 = getelementptr float, float* %194, i64 %745
  %747 = bitcast float* %746 to i8*
  %748 = mul i64 %729, %180
  %749 = add i64 %375, %748
  %750 = trunc i64 %749 to i32
  %751 = trunc i64 %729 to i32
  %752 = add i32 %351, %751
  %753 = mul nsw i64 %729, %236
  %754 = mul nsw i32 %752, %19
  %755 = add i32 %703, %754
  br i1 %318, label %756, label %779

756:                                              ; preds = %835, %783, %779, %728
  %757 = phi i64 [ 0, %783 ], [ 0, %779 ], [ 0, %728 ], [ %321, %835 ]
  %758 = xor i64 %757, -1
  br i1 %324, label %776, label %759

759:                                              ; preds = %756
  %760 = add nsw i64 %757, %753
  %761 = getelementptr inbounds float, float* %52, i64 %760
  %762 = load float, float* %761, align 4
  %763 = getelementptr inbounds float, float* %46, i64 %760
  %764 = load float, float* %763, align 4
  %765 = fadd float %762, %764
  %766 = getelementptr inbounds float, float* %194, i64 %760
  %767 = load float, float* %766, align 4
  %768 = fmul float %765, %767
  %769 = trunc i64 %757 to i32
  %770 = add i32 %755, %769
  %771 = sext i32 %770 to i64
  %772 = getelementptr inbounds float, float* %41, i64 %771
  %773 = load float, float* %772, align 4
  %774 = fadd float %773, %768
  store float %774, float* %772, align 4
  %775 = or i64 %757, 1
  br label %776

776:                                              ; preds = %759, %756
  %777 = phi i64 [ %775, %759 ], [ %757, %756 ]
  %778 = icmp eq i64 %758, %325
  br i1 %778, label %836, label %839

779:                                              ; preds = %728
  %780 = add i32 %750, %319
  %781 = icmp slt i32 %780, %750
  %782 = or i1 %781, %320
  br i1 %782, label %756, label %783

783:                                              ; preds = %779
  %784 = icmp ult i8* %731, %739
  %785 = icmp ult i8* %738, %733
  %786 = and i1 %784, %785
  %787 = icmp ult i8* %740, %739
  %788 = icmp ult i8* %738, %741
  %789 = and i1 %787, %788
  %790 = or i1 %786, %789
  %791 = icmp ugt i8* %739, %744
  %792 = icmp ult i8* %738, %747
  %793 = and i1 %791, %792
  %794 = or i1 %790, %793
  br i1 %794, label %756, label %795

795:                                              ; preds = %783, %795
  %796 = phi i64 [ %833, %795 ], [ 0, %783 ]
  %797 = add nsw i64 %796, %753
  %798 = getelementptr inbounds float, float* %52, i64 %797
  %799 = bitcast float* %798 to <4 x float>*
  %800 = load <4 x float>, <4 x float>* %799, align 4, !alias.scope !75, !noalias !78
  %801 = getelementptr inbounds float, float* %798, i64 4
  %802 = bitcast float* %801 to <4 x float>*
  %803 = load <4 x float>, <4 x float>* %802, align 4, !alias.scope !75, !noalias !78
  %804 = getelementptr inbounds float, float* %46, i64 %797
  %805 = bitcast float* %804 to <4 x float>*
  %806 = load <4 x float>, <4 x float>* %805, align 4, !alias.scope !80, !noalias !78
  %807 = getelementptr inbounds float, float* %804, i64 4
  %808 = bitcast float* %807 to <4 x float>*
  %809 = load <4 x float>, <4 x float>* %808, align 4, !alias.scope !80, !noalias !78
  %810 = fadd <4 x float> %800, %806
  %811 = fadd <4 x float> %803, %809
  %812 = getelementptr inbounds float, float* %194, i64 %797
  %813 = bitcast float* %812 to <4 x float>*
  %814 = load <4 x float>, <4 x float>* %813, align 4, !alias.scope !82, !noalias !78
  %815 = getelementptr inbounds float, float* %812, i64 4
  %816 = bitcast float* %815 to <4 x float>*
  %817 = load <4 x float>, <4 x float>* %816, align 4, !alias.scope !82, !noalias !78
  %818 = fmul <4 x float> %810, %814
  %819 = fmul <4 x float> %811, %817
  %820 = trunc i64 %796 to i32
  %821 = add i32 %755, %820
  %822 = sext i32 %821 to i64
  %823 = getelementptr inbounds float, float* %41, i64 %822
  %824 = bitcast float* %823 to <4 x float>*
  %825 = load <4 x float>, <4 x float>* %824, align 4, !alias.scope !78
  %826 = getelementptr inbounds float, float* %823, i64 4
  %827 = bitcast float* %826 to <4 x float>*
  %828 = load <4 x float>, <4 x float>* %827, align 4, !alias.scope !78
  %829 = fadd <4 x float> %825, %818
  %830 = fadd <4 x float> %828, %819
  %831 = bitcast float* %823 to <4 x float>*
  store <4 x float> %829, <4 x float>* %831, align 4, !alias.scope !78
  %832 = bitcast float* %826 to <4 x float>*
  store <4 x float> %830, <4 x float>* %832, align 4, !alias.scope !78
  %833 = add i64 %796, 8
  %834 = icmp eq i64 %833, %321
  br i1 %834, label %835, label %795, !llvm.loop !84

835:                                              ; preds = %795
  br i1 %322, label %836, label %756

836:                                              ; preds = %776, %839, %835
  %837 = add nuw nsw i64 %729, 1
  %838 = icmp eq i64 %837, %237
  br i1 %838, label %725, label %728

839:                                              ; preds = %776, %839
  %840 = phi i64 [ %872, %839 ], [ %777, %776 ]
  %841 = add nsw i64 %840, %753
  %842 = getelementptr inbounds float, float* %52, i64 %841
  %843 = load float, float* %842, align 4
  %844 = getelementptr inbounds float, float* %46, i64 %841
  %845 = load float, float* %844, align 4
  %846 = fadd float %843, %845
  %847 = getelementptr inbounds float, float* %194, i64 %841
  %848 = load float, float* %847, align 4
  %849 = fmul float %846, %848
  %850 = trunc i64 %840 to i32
  %851 = add i32 %755, %850
  %852 = sext i32 %851 to i64
  %853 = getelementptr inbounds float, float* %41, i64 %852
  %854 = load float, float* %853, align 4
  %855 = fadd float %854, %849
  store float %855, float* %853, align 4
  %856 = add nuw nsw i64 %840, 1
  %857 = add nsw i64 %856, %753
  %858 = getelementptr inbounds float, float* %52, i64 %857
  %859 = load float, float* %858, align 4
  %860 = getelementptr inbounds float, float* %46, i64 %857
  %861 = load float, float* %860, align 4
  %862 = fadd float %859, %861
  %863 = getelementptr inbounds float, float* %194, i64 %857
  %864 = load float, float* %863, align 4
  %865 = fmul float %862, %864
  %866 = trunc i64 %856 to i32
  %867 = add i32 %755, %866
  %868 = sext i32 %867 to i64
  %869 = getelementptr inbounds float, float* %41, i64 %868
  %870 = load float, float* %869, align 4
  %871 = fadd float %870, %865
  store float %871, float* %869, align 4
  %872 = add nuw nsw i64 %840, 2
  %873 = icmp eq i64 %872, %238
  br i1 %873, label %836, label %839, !llvm.loop !85

874:                                              ; preds = %331
  %875 = bitcast i8* %332 to i16*
  %876 = ashr i32 %3, %206
  %877 = icmp sgt i32 %876, 0
  br i1 %877, label %878, label %1059

878:                                              ; preds = %874
  %879 = getelementptr inbounds i32, i32* %4, i64 %192
  %880 = load i32, i32* %879, align 4
  %881 = ashr i32 %2, %205
  %882 = icmp sgt i32 %881, 0
  %883 = ashr i32 %7, %205
  %884 = sext i32 %881 to i64
  %885 = sext i32 %880 to i64
  %886 = sext i32 %876 to i64
  %887 = zext i32 %876 to i64
  %888 = zext i32 %881 to i64
  br label %889

889:                                              ; preds = %901, %878
  %890 = phi i64 [ 0, %878 ], [ %902, %901 ]
  br i1 %882, label %893, label %891

891:                                              ; preds = %889
  %892 = add nuw nsw i64 %890, 1
  br label %901

893:                                              ; preds = %889
  %894 = trunc i64 %890 to i32
  %895 = add i32 %222, %894
  %896 = mul i32 %895, %19
  %897 = add i32 %896, %883
  %898 = mul nsw i64 %890, %885
  %899 = add nuw nsw i64 %890, 1
  %900 = icmp slt i64 %899, %886
  br label %904

901:                                              ; preds = %965, %891
  %902 = phi i64 [ %892, %891 ], [ %899, %965 ]
  %903 = icmp eq i64 %902, %887
  br i1 %903, label %1059, label %889

904:                                              ; preds = %965, %893
  %905 = phi i64 [ 0, %893 ], [ %926, %965 ]
  %906 = trunc i64 %905 to i32
  %907 = add i32 %897, %906
  %908 = sext i32 %907 to i64
  %909 = getelementptr inbounds float, float* %41, i64 %908
  %910 = load float, float* %909, align 4
  %911 = fmul float %910, %26
  %912 = fadd float %911, 5.000000e-01
  %913 = fcmp ogt float %912, 0.000000e+00
  %914 = select i1 %913, float %912, float 0.000000e+00
  %915 = fcmp uge float %914, %26
  %916 = xor i1 %913, true
  %917 = or i1 %915, %916
  %918 = select i1 %915, float %26, float 0.000000e+00
  %919 = select i1 %917, float %918, float %912
  %920 = fptoui float %919 to i16
  %921 = uitofp i16 %920 to float
  %922 = fdiv float %921, %26
  %923 = fsub float %922, %910
  %924 = add nsw i64 %905, %898
  %925 = getelementptr inbounds i16, i16* %875, i64 %924
  store i16 %920, i16* %925, align 2
  %926 = add nuw nsw i64 %905, 1
  %927 = icmp slt i64 %926, %884
  br i1 %927, label %928, label %936

928:                                              ; preds = %904
  %929 = fmul float %923, -7.000000e+00
  %930 = fmul float %929, 6.250000e-02
  %931 = add nsw i32 %907, 1
  %932 = sext i32 %931 to i64
  %933 = getelementptr inbounds float, float* %41, i64 %932
  %934 = load float, float* %933, align 4
  %935 = fadd float %930, %934
  store float %935, float* %933, align 4
  br label %936

936:                                              ; preds = %928, %904
  br i1 %900, label %937, label %965

937:                                              ; preds = %936
  %938 = icmp eq i64 %905, 0
  br i1 %938, label %939, label %941

939:                                              ; preds = %937
  %940 = add nsw i32 %907, %19
  br label %950

941:                                              ; preds = %937
  %942 = fmul float %923, -3.000000e+00
  %943 = fmul float %942, 6.250000e-02
  %944 = add nsw i32 %907, %19
  %945 = add nsw i32 %944, -1
  %946 = sext i32 %945 to i64
  %947 = getelementptr inbounds float, float* %41, i64 %946
  %948 = load float, float* %947, align 4
  %949 = fadd float %943, %948
  store float %949, float* %947, align 4
  br label %950

950:                                              ; preds = %941, %939
  %951 = phi i32 [ %940, %939 ], [ %944, %941 ]
  %952 = fmul float %923, -5.000000e+00
  %953 = fmul float %952, 6.250000e-02
  %954 = sext i32 %951 to i64
  %955 = getelementptr inbounds float, float* %41, i64 %954
  %956 = load float, float* %955, align 4
  %957 = fadd float %953, %956
  store float %957, float* %955, align 4
  br i1 %927, label %958, label %965

958:                                              ; preds = %950
  %959 = fmul float %923, 6.250000e-02
  %960 = add nsw i32 %951, 1
  %961 = sext i32 %960 to i64
  %962 = getelementptr inbounds float, float* %41, i64 %961
  %963 = load float, float* %962, align 4
  %964 = fsub float %963, %959
  store float %964, float* %962, align 4
  br label %965

965:                                              ; preds = %958, %950, %936
  %966 = icmp eq i64 %926, %888
  br i1 %966, label %901, label %904

967:                                              ; preds = %331
  %968 = ashr i32 %3, %206
  %969 = icmp sgt i32 %968, 0
  br i1 %969, label %970, label %1059

970:                                              ; preds = %967
  %971 = getelementptr inbounds i32, i32* %4, i64 %192
  %972 = load i32, i32* %971, align 4
  %973 = ashr i32 %2, %205
  %974 = icmp sgt i32 %973, 0
  %975 = ashr i32 %7, %205
  %976 = sext i32 %973 to i64
  %977 = sext i32 %972 to i64
  %978 = sext i32 %968 to i64
  %979 = zext i32 %968 to i64
  %980 = zext i32 %973 to i64
  br label %981

981:                                              ; preds = %993, %970
  %982 = phi i64 [ 0, %970 ], [ %994, %993 ]
  br i1 %974, label %985, label %983

983:                                              ; preds = %981
  %984 = add nuw nsw i64 %982, 1
  br label %993

985:                                              ; preds = %981
  %986 = trunc i64 %982 to i32
  %987 = add i32 %222, %986
  %988 = mul i32 %987, %19
  %989 = add i32 %988, %975
  %990 = mul nsw i64 %982, %977
  %991 = add nuw nsw i64 %982, 1
  %992 = icmp slt i64 %991, %978
  br label %996

993:                                              ; preds = %1057, %983
  %994 = phi i64 [ %984, %983 ], [ %991, %1057 ]
  %995 = icmp eq i64 %994, %979
  br i1 %995, label %1059, label %981

996:                                              ; preds = %1057, %985
  %997 = phi i64 [ 0, %985 ], [ %1018, %1057 ]
  %998 = trunc i64 %997 to i32
  %999 = add i32 %989, %998
  %1000 = sext i32 %999 to i64
  %1001 = getelementptr inbounds float, float* %41, i64 %1000
  %1002 = load float, float* %1001, align 4
  %1003 = fmul float %1002, %26
  %1004 = fadd float %1003, 5.000000e-01
  %1005 = fcmp ogt float %1004, 0.000000e+00
  %1006 = select i1 %1005, float %1004, float 0.000000e+00
  %1007 = fcmp uge float %1006, %26
  %1008 = xor i1 %1005, true
  %1009 = or i1 %1007, %1008
  %1010 = select i1 %1007, float %26, float 0.000000e+00
  %1011 = select i1 %1009, float %1010, float %1004
  %1012 = fptoui float %1011 to i8
  %1013 = uitofp i8 %1012 to float
  %1014 = fdiv float %1013, %26
  %1015 = fsub float %1014, %1002
  %1016 = add nsw i64 %997, %990
  %1017 = getelementptr inbounds i8, i8* %332, i64 %1016
  store i8 %1012, i8* %1017, align 1
  %1018 = add nuw nsw i64 %997, 1
  %1019 = icmp slt i64 %1018, %976
  br i1 %1019, label %1020, label %1028

1020:                                             ; preds = %996
  %1021 = fmul float %1015, -7.000000e+00
  %1022 = fmul float %1021, 6.250000e-02
  %1023 = add nsw i32 %999, 1
  %1024 = sext i32 %1023 to i64
  %1025 = getelementptr inbounds float, float* %41, i64 %1024
  %1026 = load float, float* %1025, align 4
  %1027 = fadd float %1022, %1026
  store float %1027, float* %1025, align 4
  br label %1028

1028:                                             ; preds = %1020, %996
  br i1 %992, label %1029, label %1057

1029:                                             ; preds = %1028
  %1030 = icmp eq i64 %997, 0
  br i1 %1030, label %1031, label %1033

1031:                                             ; preds = %1029
  %1032 = add nsw i32 %999, %19
  br label %1042

1033:                                             ; preds = %1029
  %1034 = fmul float %1015, -3.000000e+00
  %1035 = fmul float %1034, 6.250000e-02
  %1036 = add nsw i32 %999, %19
  %1037 = add nsw i32 %1036, -1
  %1038 = sext i32 %1037 to i64
  %1039 = getelementptr inbounds float, float* %41, i64 %1038
  %1040 = load float, float* %1039, align 4
  %1041 = fadd float %1035, %1040
  store float %1041, float* %1039, align 4
  br label %1042

1042:                                             ; preds = %1033, %1031
  %1043 = phi i32 [ %1032, %1031 ], [ %1036, %1033 ]
  %1044 = fmul float %1015, -5.000000e+00
  %1045 = fmul float %1044, 6.250000e-02
  %1046 = sext i32 %1043 to i64
  %1047 = getelementptr inbounds float, float* %41, i64 %1046
  %1048 = load float, float* %1047, align 4
  %1049 = fadd float %1045, %1048
  store float %1049, float* %1047, align 4
  br i1 %1019, label %1050, label %1057

1050:                                             ; preds = %1042
  %1051 = fmul float %1015, 6.250000e-02
  %1052 = add nsw i32 %1043, 1
  %1053 = sext i32 %1052 to i64
  %1054 = getelementptr inbounds float, float* %41, i64 %1053
  %1055 = load float, float* %1054, align 4
  %1056 = fsub float %1055, %1051
  store float %1056, float* %1054, align 4
  br label %1057

1057:                                             ; preds = %1050, %1042, %1028
  %1058 = icmp eq i64 %1018, %980
  br i1 %1058, label %993, label %996

1059:                                             ; preds = %901, %993, %967, %874, %204, %211
  %1060 = add nuw nsw i64 %192, 1
  %1061 = icmp eq i64 %1060, 3
  br i1 %1061, label %183, label %191

1062:                                             ; preds = %183
  %1063 = getelementptr inbounds %struct.aom_flat_block_finder_t, %struct.aom_flat_block_finder_t* %12, i64 0, i32 1
  %1064 = bitcast double** %1063 to i8**
  %1065 = load i8*, i8** %1064, align 8
  tail call void @aom_free(i8* %1065) #9
  %1066 = bitcast %struct.aom_flat_block_finder_t* %12 to i8**
  %1067 = load i8*, i8** %1066, align 8
  tail call void @aom_free(i8* %1067) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 0, i64 40, i1 false) #9
  tail call void @aom_free(i8* %146) #9
  tail call void @aom_noise_tx_free(%struct.aom_noise_tx_t* %148) #9
  br label %1068

1068:                                             ; preds = %1062, %183, %31
  %1069 = phi i32 [ 0, %31 ], [ %168, %183 ], [ %168, %1062 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %23) #9
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %22) #9
  ret i32 %1069
}

declare i8* @aom_memalign(i64, i64) local_unnamed_addr #1

declare %struct.aom_noise_tx_t* @aom_noise_tx_malloc(i32) local_unnamed_addr #1

declare void @aom_noise_tx_forward(%struct.aom_noise_tx_t*, float*) local_unnamed_addr #1

declare void @aom_noise_tx_filter(%struct.aom_noise_tx_t*, float*) local_unnamed_addr #1

declare void @aom_noise_tx_inverse(%struct.aom_noise_tx_t*, float*) local_unnamed_addr #1

declare void @aom_noise_tx_free(%struct.aom_noise_tx_t*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.aom_denoise_and_model_t* @aom_denoise_and_model_alloc(i32, i32, float) local_unnamed_addr #0 {
  %4 = tail call i8* @aom_malloc(i64 840) #9
  %5 = bitcast i8* %4 to %struct.aom_denoise_and_model_t*
  %6 = icmp eq i8* %4, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %9 = tail call i64 @fwrite(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.19, i64 0, i64 0), i64 44, i64 1, %struct._IO_FILE* %8) #10
  br label %40

10:                                               ; preds = %3
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 840, i1 false)
  %11 = bitcast i8* %4 to i32*
  store i32 %1, i32* %11, align 8
  %12 = getelementptr inbounds i8, i8* %4, i64 8
  %13 = bitcast i8* %12 to float*
  store float %2, float* %13, align 8
  %14 = getelementptr inbounds i8, i8* %4, i64 4
  %15 = bitcast i8* %14 to i32*
  store i32 %0, i32* %15, align 4
  %16 = sext i32 %1 to i64
  %17 = shl nsw i64 %16, 2
  %18 = mul i64 %17, %16
  %19 = tail call i8* @aom_malloc(i64 %18) #9
  %20 = getelementptr inbounds i8, i8* %4, i64 40
  %21 = bitcast i8* %20 to float**
  %22 = bitcast i8* %20 to i8**
  store i8* %19, i8** %22, align 8
  %23 = tail call i8* @aom_malloc(i64 %18) #9
  %24 = getelementptr inbounds i8, i8* %4, i64 48
  %25 = bitcast i8* %24 to i8**
  store i8* %23, i8** %25, align 8
  %26 = tail call i8* @aom_malloc(i64 %18) #9
  %27 = getelementptr inbounds i8, i8* %4, i64 56
  %28 = bitcast i8* %27 to i8**
  store i8* %26, i8** %28, align 8
  %29 = load float*, float** %21, align 8
  %30 = icmp eq float* %29, null
  br i1 %30, label %37, label %31

31:                                               ; preds = %10
  %32 = bitcast i8* %24 to float**
  %33 = load float*, float** %32, align 8
  %34 = icmp eq float* %33, null
  %35 = icmp eq i8* %26, null
  %36 = or i1 %35, %34
  br i1 %36, label %37, label %40

37:                                               ; preds = %31, %10
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %39 = tail call i64 @fwrite(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.20, i64 0, i64 0), i64 37, i64 1, %struct._IO_FILE* %38) #10
  tail call void @aom_denoise_and_model_free(%struct.aom_denoise_and_model_t* nonnull %5)
  br label %40

40:                                               ; preds = %31, %37, %7
  %41 = phi %struct.aom_denoise_and_model_t* [ null, %37 ], [ null, %7 ], [ %5, %31 ]
  ret %struct.aom_denoise_and_model_t* %41
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_denoise_and_model_free(%struct.aom_denoise_and_model_t*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 11
  %3 = load i8*, i8** %2, align 8
  tail call void @aom_free(i8* %3) #9
  %4 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 10, i64 0
  %5 = load i8*, i8** %4, align 8
  tail call void @aom_free(i8* %5) #9
  %6 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 9, i64 0
  %7 = bitcast float** %6 to i8**
  %8 = load i8*, i8** %7, align 8
  tail call void @aom_free(i8* %8) #9
  %9 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 10, i64 1
  %10 = load i8*, i8** %9, align 8
  tail call void @aom_free(i8* %10) #9
  %11 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 9, i64 1
  %12 = bitcast float** %11 to i8**
  %13 = load i8*, i8** %12, align 8
  tail call void @aom_free(i8* %13) #9
  %14 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 10, i64 2
  %15 = load i8*, i8** %14, align 8
  tail call void @aom_free(i8* %15) #9
  %16 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 9, i64 2
  %17 = bitcast float** %16 to i8**
  %18 = load i8*, i8** %17, align 8
  tail call void @aom_free(i8* %18) #9
  %19 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 13
  tail call void @aom_noise_model_free(%struct.aom_noise_model_t* %19)
  %20 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 12
  %21 = icmp eq %struct.aom_flat_block_finder_t* %20, null
  br i1 %21, label %29, label %22

22:                                               ; preds = %1
  %23 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 12, i32 1
  %24 = bitcast double** %23 to i8**
  %25 = load i8*, i8** %24, align 8
  tail call void @aom_free(i8* %25) #9
  %26 = bitcast %struct.aom_flat_block_finder_t* %20 to i8**
  %27 = load i8*, i8** %26, align 8
  tail call void @aom_free(i8* %27) #9
  %28 = bitcast %struct.aom_flat_block_finder_t* %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 0, i64 40, i1 false) #9
  br label %29

29:                                               ; preds = %1, %22
  %30 = bitcast %struct.aom_denoise_and_model_t* %0 to i8*
  tail call void @aom_free(i8* %30) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_denoise_and_model_run(%struct.aom_denoise_and_model_t*, %struct.yv12_buffer_config* readonly, %struct.aom_film_grain_t*, i32) local_unnamed_addr #0 {
  %5 = alloca [3 x i8*], align 16
  %6 = alloca [3 x i32], align 4
  %7 = alloca [2 x i32], align 4
  %8 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 26
  %11 = load i32, i32* %10, align 8
  %12 = and i32 %11, 8
  %13 = icmp ne i32 %12, 0
  %14 = lshr exact i32 %12, 3
  %15 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i8*
  %20 = select i1 %13, i8* %19, i8* %16
  %21 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5, i32 0, i32 1
  %22 = load i8*, i8** %21, align 8
  %23 = ptrtoint i8* %22 to i64
  %24 = shl i64 %23, 1
  %25 = inttoptr i64 %24 to i8*
  %26 = select i1 %13, i8* %25, i8* %22
  %27 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5, i32 0, i32 2
  %28 = load i8*, i8** %27, align 8
  %29 = ptrtoint i8* %28 to i64
  %30 = shl i64 %29, 1
  %31 = inttoptr i64 %30 to i8*
  %32 = select i1 %13, i8* %31, i8* %28
  %33 = bitcast [3 x i8*]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %33) #9
  %34 = getelementptr inbounds [3 x i8*], [3 x i8*]* %5, i64 0, i64 0
  %35 = getelementptr inbounds [3 x i8*], [3 x i8*]* %5, i64 0, i64 1
  %36 = getelementptr inbounds [3 x i8*], [3 x i8*]* %5, i64 0, i64 2
  store i8* %20, i8** %34, align 16
  store i8* %26, i8** %35, align 8
  store i8* %32, i8** %36, align 16
  %37 = bitcast [3 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %37) #9
  %38 = getelementptr inbounds [3 x i32], [3 x i32]* %6, i64 0, i64 0
  %39 = getelementptr inbounds [3 x i32], [3 x i32]* %6, i64 0, i64 1
  %40 = getelementptr inbounds [3 x i32], [3 x i32]* %6, i64 0, i64 2
  %41 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4, i32 0, i32 0
  %42 = load i32, i32* %41, align 8
  store i32 %42, i32* %38, align 4
  %43 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4, i32 0, i32 1
  %44 = load i32, i32* %43, align 4
  store i32 %44, i32* %39, align 4
  store i32 %44, i32* %40, align 4
  %45 = bitcast [2 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45) #9
  %46 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 0
  %47 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 1
  %48 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 14
  %49 = load i32, i32* %48, align 8
  store i32 %49, i32* %46, align 4
  %50 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 15
  %51 = load i32, i32* %50, align 4
  store i32 %51, i32* %47, align 4
  %52 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 3
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 0, i32 0, i32 0
  %55 = load i32, i32* %54, align 8
  %56 = icmp eq i32 %53, %55
  br i1 %56, label %57, label %71

57:                                               ; preds = %4
  %58 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 4
  %59 = load i32, i32* %58, align 8
  %60 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 1, i32 0, i32 0
  %61 = load i32, i32* %60, align 8
  %62 = icmp eq i32 %59, %61
  br i1 %62, label %63, label %71

63:                                               ; preds = %57
  %64 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 5
  %65 = load i32, i32* %64, align 4
  %66 = icmp eq i32 %65, %42
  br i1 %66, label %67, label %71

67:                                               ; preds = %63
  %68 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 6
  %69 = load i32, i32* %68, align 8
  %70 = icmp eq i32 %69, %44
  br i1 %70, label %212, label %71

71:                                               ; preds = %67, %63, %57, %4
  %72 = lshr i32 %11, 3
  store i32 %55, i32* %52, align 4
  %73 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 1, i32 0, i32 0
  %74 = load i32, i32* %73, align 8
  %75 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 4
  store i32 %74, i32* %75, align 8
  %76 = load i32, i32* %41, align 8
  %77 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 5
  store i32 %76, i32* %77, align 4
  %78 = load i32, i32* %43, align 4
  %79 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 6
  store i32 %78, i32* %79, align 8
  %80 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 10, i64 0
  %81 = load i8*, i8** %80, align 8
  tail call void @aom_free(i8* %81) #9
  store i8* null, i8** %80, align 8
  %82 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 10, i64 1
  %83 = load i8*, i8** %82, align 8
  tail call void @aom_free(i8* %83) #9
  store i8* null, i8** %82, align 8
  %84 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 10, i64 2
  %85 = load i8*, i8** %84, align 8
  tail call void @aom_free(i8* %85) #9
  store i8* null, i8** %84, align 8
  %86 = and i32 %72, 1
  %87 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 11
  %88 = load i8*, i8** %87, align 8
  tail call void @aom_free(i8* %88) #9
  store i8* null, i8** %87, align 8
  %89 = load i32, i32* %41, align 8
  %90 = load i32, i32* %73, align 8
  %91 = mul nsw i32 %90, %89
  %92 = shl i32 %91, %86
  %93 = sext i32 %92 to i64
  %94 = tail call i8* @aom_malloc(i64 %93) #9
  store i8* %94, i8** %80, align 8
  %95 = load i32, i32* %43, align 4
  %96 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 1, i32 0, i32 1
  %97 = load i32, i32* %96, align 4
  %98 = mul nsw i32 %97, %95
  %99 = shl i32 %98, %86
  %100 = sext i32 %99 to i64
  %101 = tail call i8* @aom_malloc(i64 %100) #9
  store i8* %101, i8** %82, align 8
  %102 = load i32, i32* %43, align 4
  %103 = load i32, i32* %96, align 4
  %104 = mul nsw i32 %103, %102
  %105 = shl i32 %104, %86
  %106 = sext i32 %105 to i64
  %107 = tail call i8* @aom_malloc(i64 %106) #9
  store i8* %107, i8** %84, align 8
  %108 = load i8*, i8** %80, align 8
  %109 = icmp eq i8* %108, null
  br i1 %109, label %115, label %110

110:                                              ; preds = %71
  %111 = load i8*, i8** %82, align 8
  %112 = icmp eq i8* %111, null
  %113 = icmp eq i8* %107, null
  %114 = or i1 %113, %112
  br i1 %114, label %115, label %118

115:                                              ; preds = %110, %71
  %116 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %117 = tail call i64 @fwrite(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.28, i64 0, i64 0), i64 35, i64 1, %struct._IO_FILE* %116) #11
  br label %199

118:                                              ; preds = %110
  %119 = load i32, i32* %54, align 8
  %120 = load i32, i32* %8, align 8
  %121 = add i32 %120, -1
  %122 = add i32 %121, %119
  %123 = sdiv i32 %122, %120
  %124 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 7
  store i32 %123, i32* %124, align 4
  %125 = load i32, i32* %73, align 8
  %126 = add i32 %125, %121
  %127 = sdiv i32 %126, %120
  %128 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 8
  store i32 %127, i32* %128, align 8
  %129 = mul nsw i32 %127, %123
  %130 = sext i32 %129 to i64
  %131 = tail call i8* @aom_malloc(i64 %130) #9
  store i8* %131, i8** %87, align 8
  %132 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 12
  %133 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 12, i32 1
  %134 = bitcast double** %133 to i8**
  %135 = load i8*, i8** %134, align 8
  tail call void @aom_free(i8* %135) #9
  %136 = bitcast %struct.aom_flat_block_finder_t* %132 to i8**
  %137 = load i8*, i8** %136, align 8
  tail call void @aom_free(i8* %137) #9
  %138 = bitcast %struct.aom_flat_block_finder_t* %132 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %138, i8 0, i64 40, i1 false) #9
  %139 = load i32, i32* %8, align 8
  %140 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 1
  %141 = load i32, i32* %140, align 4
  %142 = tail call i32 @aom_flat_block_finder_init(%struct.aom_flat_block_finder_t* %132, i32 %139, i32 %141, i32 %86) #9
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %147

144:                                              ; preds = %118
  %145 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %146 = tail call i64 @fwrite(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.29, i64 0, i64 0), i64 33, i64 1, %struct._IO_FILE* %145) #11
  br label %199

147:                                              ; preds = %118
  %148 = load i32, i32* %140, align 4
  %149 = zext i32 %148 to i64
  %150 = zext i32 %86 to i64
  %151 = shl nuw nsw i64 %150, 32
  %152 = or i64 %151, %149
  %153 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 13
  tail call void @aom_noise_model_free(%struct.aom_noise_model_t* %153) #9
  %154 = tail call i32 @aom_noise_model_init(%struct.aom_noise_model_t* %153, i64 15748213249, i64 %152) #9
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %156, label %159

156:                                              ; preds = %147
  %157 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %158 = tail call i64 @fwrite(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.30, i64 0, i64 0), i64 27, i64 1, %struct._IO_FILE* %157) #11
  br label %199

159:                                              ; preds = %147
  %160 = load i32, i32* %8, align 8
  %161 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 2
  %162 = load float, float* %161, align 8
  %163 = tail call float @aom_noise_psd_get_default_value(i32 %160, float %162) #9
  %164 = load i32, i32* %8, align 8
  %165 = load i32, i32* %48, align 8
  %166 = ashr i32 %164, %165
  %167 = load float, float* %161, align 8
  %168 = tail call float @aom_noise_psd_get_default_value(i32 %166, float %167) #9
  %169 = mul i32 %9, %9
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %212, label %171

171:                                              ; preds = %159
  %172 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 9, i64 0
  %173 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 9, i64 2
  %174 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 9, i64 1
  %175 = zext i32 %169 to i64
  %176 = and i64 %175, 1
  %177 = icmp eq i32 %169, 1
  br i1 %177, label %202, label %178

178:                                              ; preds = %171
  %179 = sub nsw i64 %175, %176
  br label %180

180:                                              ; preds = %180, %178
  %181 = phi i64 [ 0, %178 ], [ %196, %180 ]
  %182 = phi i64 [ %179, %178 ], [ %197, %180 ]
  %183 = load float*, float** %172, align 8
  %184 = getelementptr inbounds float, float* %183, i64 %181
  store float %163, float* %184, align 4
  %185 = load float*, float** %173, align 8
  %186 = getelementptr inbounds float, float* %185, i64 %181
  store float %168, float* %186, align 4
  %187 = load float*, float** %174, align 8
  %188 = getelementptr inbounds float, float* %187, i64 %181
  store float %168, float* %188, align 4
  %189 = or i64 %181, 1
  %190 = load float*, float** %172, align 8
  %191 = getelementptr inbounds float, float* %190, i64 %189
  store float %163, float* %191, align 4
  %192 = load float*, float** %173, align 8
  %193 = getelementptr inbounds float, float* %192, i64 %189
  store float %168, float* %193, align 4
  %194 = load float*, float** %174, align 8
  %195 = getelementptr inbounds float, float* %194, i64 %189
  store float %168, float* %195, align 4
  %196 = add nuw nsw i64 %181, 2
  %197 = add i64 %182, -2
  %198 = icmp eq i64 %197, 0
  br i1 %198, label %202, label %180

199:                                              ; preds = %144, %115, %156
  %200 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %201 = tail call i64 @fwrite(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.21, i64 0, i64 0), i64 26, i64 1, %struct._IO_FILE* %200) #10
  br label %277

202:                                              ; preds = %180, %171
  %203 = phi i64 [ 0, %171 ], [ %196, %180 ]
  %204 = icmp eq i64 %176, 0
  br i1 %204, label %212, label %205

205:                                              ; preds = %202
  %206 = load float*, float** %172, align 8
  %207 = getelementptr inbounds float, float* %206, i64 %203
  store float %163, float* %207, align 4
  %208 = load float*, float** %173, align 8
  %209 = getelementptr inbounds float, float* %208, i64 %203
  store float %168, float* %209, align 4
  %210 = load float*, float** %174, align 8
  %211 = getelementptr inbounds float, float* %210, i64 %203
  store float %168, float* %211, align 4
  br label %212

212:                                              ; preds = %205, %202, %159, %67
  %213 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 12
  %214 = load i32, i32* %54, align 8
  %215 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 1, i32 0, i32 0
  %216 = load i32, i32* %215, align 8
  %217 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 11
  %218 = load i8*, i8** %217, align 8
  %219 = tail call i32 @aom_flat_block_finder_run(%struct.aom_flat_block_finder_t* %213, i8* %20, i32 %214, i32 %216, i32 %42, i8* %218)
  %220 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 10, i64 0
  %221 = load i32, i32* %54, align 8
  %222 = load i32, i32* %215, align 8
  %223 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 9, i64 0
  %224 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 1
  %225 = load i32, i32* %224, align 4
  %226 = call i32 @aom_wiener_denoise_2d(i8** nonnull %34, i8** %220, i32 %221, i32 %222, i32* nonnull %38, i32* nonnull %46, float** %223, i32 %9, i32 %225, i32 %14)
  %227 = icmp eq i32 %226, 0
  br i1 %227, label %228, label %231

228:                                              ; preds = %212
  %229 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %230 = tail call i64 @fwrite(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.22, i64 0, i64 0), i64 24, i64 1, %struct._IO_FILE* %229) #10
  br label %277

231:                                              ; preds = %212
  %232 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 13
  %233 = load i32, i32* %54, align 8
  %234 = load i32, i32* %215, align 8
  %235 = load i8*, i8** %217, align 8
  %236 = call zeroext i8 @aom_noise_model_update(%struct.aom_noise_model_t* %232, i8** nonnull %34, i8** %220, i32 %233, i32 %234, i32* nonnull %38, i32* nonnull %46, i8* %235, i32 %9)
  switch i8 %236, label %238 [
    i8 0, label %243
    i8 3, label %237
  ]

237:                                              ; preds = %231
  tail call void @aom_noise_model_save_latest(%struct.aom_noise_model_t* %232)
  br label %243

238:                                              ; preds = %231
  %239 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 13, i32 1, i64 0, i32 1, i32 4
  %240 = load i32, i32* %239, align 4
  %241 = icmp sgt i32 %240, 0
  %242 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %2, i64 0, i32 0
  store i32 0, i32* %242, align 4
  br i1 %241, label %245, label %277

243:                                              ; preds = %231, %237
  %244 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %2, i64 0, i32 0
  store i32 0, i32* %244, align 4
  br label %245

245:                                              ; preds = %243, %238
  %246 = tail call i32 @aom_noise_model_get_grain_parameters(%struct.aom_noise_model_t* %232, %struct.aom_film_grain_t* %2)
  %247 = icmp eq i32 %246, 0
  br i1 %247, label %248, label %251

248:                                              ; preds = %245
  %249 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %250 = tail call i64 @fwrite(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.23, i64 0, i64 0), i64 32, i64 1, %struct._IO_FILE* %249) #10
  br label %277

251:                                              ; preds = %245
  %252 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %2, i64 0, i32 25
  %253 = load i16, i16* %252, align 4
  %254 = icmp eq i16 %253, 0
  br i1 %254, label %255, label %256

255:                                              ; preds = %251
  store i16 7391, i16* %252, align 4
  br label %256

256:                                              ; preds = %251, %255
  %257 = icmp eq i32 %3, 0
  br i1 %257, label %277, label %258

258:                                              ; preds = %256
  %259 = load i8*, i8** %220, align 8
  %260 = load i32, i32* %215, align 8
  %261 = mul nsw i32 %260, %42
  %262 = shl i32 %261, %14
  %263 = sext i32 %262 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 %259, i64 %263, i1 false)
  %264 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 10, i64 1
  %265 = load i8*, i8** %264, align 8
  %266 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 1, i32 0, i32 1
  %267 = load i32, i32* %266, align 4
  %268 = mul nsw i32 %267, %44
  %269 = shl i32 %268, %14
  %270 = sext i32 %269 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* align 1 %265, i64 %270, i1 false)
  %271 = getelementptr inbounds %struct.aom_denoise_and_model_t, %struct.aom_denoise_and_model_t* %0, i64 0, i32 10, i64 2
  %272 = load i8*, i8** %271, align 8
  %273 = load i32, i32* %266, align 4
  %274 = mul nsw i32 %273, %44
  %275 = shl i32 %274, %14
  %276 = sext i32 %275 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %32, i8* align 1 %272, i64 %276, i1 false)
  br label %277

277:                                              ; preds = %248, %256, %258, %238, %228, %199
  %278 = phi i32 [ 0, %228 ], [ 0, %199 ], [ 0, %248 ], [ 1, %256 ], [ 1, %258 ], [ 1, %238 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45) #9
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %37) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %33) #9
  ret i32 %278
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #5

declare double @aom_normalized_cross_correlation(double*, double*, i32) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare double @cos(double) local_unnamed_addr #6

declare float @aom_noise_psd_get_default_value(i32, float) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind }
attributes #9 = { nounwind }
attributes #10 = { cold }
attributes #11 = { cold nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !8}
!16 = distinct !{!16, !8}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.unroll.disable"}
!19 = distinct !{!19, !18}
!20 = distinct !{!20, !18}
!21 = distinct !{!21, !8}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !8}
!28 = distinct !{!28, !18}
!29 = distinct !{!29, !8}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = !{!31, !36}
!36 = distinct !{!36, !32}
!37 = distinct !{!37, !8}
!38 = distinct !{!38, !8}
!39 = distinct !{!39, !40, !8}
!40 = !{!"llvm.loop.unroll.runtime.disable"}
!41 = distinct !{!41, !18}
!42 = distinct !{!42, !18}
!43 = distinct !{!43, !18}
!44 = distinct !{!44, !18}
!45 = distinct !{!45, !18}
!46 = !{!47}
!47 = distinct !{!47, !48}
!48 = distinct !{!48, !"LVerDomain"}
!49 = !{!50}
!50 = distinct !{!50, !48}
!51 = !{!52, !47, !53}
!52 = distinct !{!52, !48}
!53 = distinct !{!53, !48}
!54 = !{!53}
!55 = !{!52}
!56 = !{!47, !53}
!57 = distinct !{!57, !8}
!58 = !{!59}
!59 = distinct !{!59, !60}
!60 = distinct !{!60, !"LVerDomain"}
!61 = !{!62}
!62 = distinct !{!62, !60}
!63 = distinct !{!63, !8}
!64 = distinct !{!64, !18}
!65 = distinct !{!65, !8}
!66 = !{!67}
!67 = distinct !{!67, !68}
!68 = distinct !{!68, !"LVerDomain"}
!69 = !{!70}
!70 = distinct !{!70, !68}
!71 = distinct !{!71, !8}
!72 = distinct !{!72, !18}
!73 = distinct !{!73, !8}
!74 = distinct !{!74, !8}
!75 = !{!76}
!76 = distinct !{!76, !77}
!77 = distinct !{!77, !"LVerDomain"}
!78 = !{!79}
!79 = distinct !{!79, !77}
!80 = !{!81}
!81 = distinct !{!81, !77}
!82 = !{!83}
!83 = distinct !{!83, !77}
!84 = distinct !{!84, !8}
!85 = distinct !{!85, !8}
