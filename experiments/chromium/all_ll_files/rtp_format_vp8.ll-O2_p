; ModuleID = '../../third_party/webrtc/modules/rtp_rtcp/source/rtp_format_vp8.cc'
source_filename = "../../third_party/webrtc/modules/rtp_rtcp/source/rtp_format_vp8.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::RtpPacketizerVp8" = type { %"class.webrtc::RtpPacketizer", %"class.absl::InlinedVector", %"class.rtc::ArrayView", %"class.std::__1::vector", %"class.std::__1::__wrap_iter" }
%"class.webrtc::RtpPacketizer" = type { i32 (...)** }
%"class.absl::InlinedVector" = type { %"class.absl::inlined_vector_internal::Storage" }
%"class.absl::inlined_vector_internal::Storage" = type { %"class.absl::container_internal::CompressedTuple", %"union.absl::inlined_vector_internal::Storage<unsigned char, 6, std::__1::allocator<unsigned char> >::Data" }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.0" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage.0" = type { i64 }
%"union.absl::inlined_vector_internal::Storage<unsigned char, 6, std::__1::allocator<unsigned char> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<unsigned char, 6, std::__1::allocator<unsigned char> >::Allocated" }
%"struct.absl::inlined_vector_internal::Storage<unsigned char, 6, std::__1::allocator<unsigned char> >::Allocated" = type { i8*, i64 }
%"class.rtc::ArrayView" = type { %"class.rtc::impl::ArrayViewBase" }
%"class.rtc::impl::ArrayViewBase" = type { i8*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.std::__1::__wrap_iter" = type { i32* }
%"struct.webrtc::RTPVideoHeaderVP8" = type { i8, i16, i16, i8, i8, i32, i32, i8 }
%"struct.webrtc::RtpPacketizer::PayloadSizeLimits" = type { i32, i32, i32, i32 }
%"class.webrtc::RtpPacketToSend" = type <{ %"class.webrtc::RtpPacket", i64, %"class.absl::optional", i8, i8, %"class.absl::optional.16", [2 x i8], %"class.rtc::scoped_refptr.21", i8, i8, i8, i8, [4 x i8] }>
%"class.webrtc::RtpPacket" = type { i8, i8, i8, i16, i32, i32, i64, i64, %"class.webrtc::RtpHeaderExtensionMap", %"class.std::__1::vector.5", i64, %"class.rtc::CopyOnWriteBuffer" }
%"class.webrtc::RtpHeaderExtensionMap" = type { [21 x i8], i8 }
%"class.std::__1::vector.5" = type { %"class.std::__1::__vector_base.6" }
%"class.std::__1::__vector_base.6" = type { %"struct.webrtc::RtpPacket::ExtensionInfo"*, %"struct.webrtc::RtpPacket::ExtensionInfo"*, %"class.std::__1::__compressed_pair.7" }
%"struct.webrtc::RtpPacket::ExtensionInfo" = type { i8, i8, i16 }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.webrtc::RtpPacket::ExtensionInfo"* }
%"class.rtc::CopyOnWriteBuffer" = type { %"class.rtc::scoped_refptr", i64, i64 }
%"class.rtc::scoped_refptr" = type { %"class.rtc::FinalRefCountedObject"* }
%"class.rtc::FinalRefCountedObject" = type <{ %"class.rtc::BufferT", %"class.webrtc::webrtc_impl::RefCounter", [4 x i8] }>
%"class.rtc::BufferT" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { i8* }
%"class.webrtc::webrtc_impl::RefCounter" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.15" }
%"struct.std::__1::__atomic_base.15" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i64 }
%"class.absl::optional.16" = type { %"class.absl::optional_internal::optional_data.17" }
%"class.absl::optional_internal::optional_data.17" = type { %"class.absl::optional_internal::optional_data_base.18" }
%"class.absl::optional_internal::optional_data_base.18" = type { %"class.absl::optional_internal::optional_data_dtor_base.19" }
%"class.absl::optional_internal::optional_data_dtor_base.19" = type { i8, %union.anon.20 }
%union.anon.20 = type { i16 }
%"class.rtc::scoped_refptr.21" = type { %"class.rtc::RefCountedBase"* }
%"class.rtc::RefCountedBase" = type <{ i32 (...)**, %"class.webrtc::webrtc_impl::RefCounter", [4 x i8] }>

$_ZN4absl23inlined_vector_internal7StorageIhLm6ENSt3__19allocatorIhEEE15EmplaceBackSlowIJRKhEEERhDpOT_ = comdat any

$_ZN4absl23inlined_vector_internal7StorageIhLm6ENSt3__19allocatorIhEEE15EmplaceBackSlowIJhEEERhDpOT_ = comdat any

$_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t = comdat any

@_ZTVN6webrtc16RtpPacketizerVp8E = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::RtpPacketizerVp8"*)* @_ZN6webrtc16RtpPacketizerVp8D2Ev to i8*), i8* bitcast (void (%"class.webrtc::RtpPacketizerVp8"*)* @_ZN6webrtc16RtpPacketizerVp8D0Ev to i8*), i8* bitcast (i64 (%"class.webrtc::RtpPacketizerVp8"*)* @_ZNK6webrtc16RtpPacketizerVp810NumPacketsEv to i8*), i8* bitcast (i1 (%"class.webrtc::RtpPacketizerVp8"*, %"class.webrtc::RtpPacketToSend"*)* @_ZN6webrtc16RtpPacketizerVp810NextPacketEPNS_15RtpPacketToSendE to i8*)] }, align 8
@.str = private unnamed_addr constant [67 x i8] c"../../third_party/webrtc/modules/rtp_rtcp/source/rtp_format_vp8.cc\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"buffer\00", align 1
@_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t = linkonce_odr hidden constant [1 x i8] zeroinitializer, comdat, align 1

@_ZN6webrtc16RtpPacketizerVp8C1EN3rtc9ArrayViewIKhLln4711EEENS_13RtpPacketizer17PayloadSizeLimitsERKNS_17RTPVideoHeaderVP8E = hidden unnamed_addr alias void (%"class.webrtc::RtpPacketizerVp8"*, i8*, i64, i64, i64, %"struct.webrtc::RTPVideoHeaderVP8"*), void (%"class.webrtc::RtpPacketizerVp8"*, i8*, i64, i64, i64, %"struct.webrtc::RTPVideoHeaderVP8"*)* @_ZN6webrtc16RtpPacketizerVp8C2EN3rtc9ArrayViewIKhLln4711EEENS_13RtpPacketizer17PayloadSizeLimitsERKNS_17RTPVideoHeaderVP8E
@_ZN6webrtc16RtpPacketizerVp8D1Ev = hidden unnamed_addr alias void (%"class.webrtc::RtpPacketizerVp8"*), void (%"class.webrtc::RtpPacketizerVp8"*)* @_ZN6webrtc16RtpPacketizerVp8D2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16RtpPacketizerVp8C2EN3rtc9ArrayViewIKhLln4711EEENS_13RtpPacketizer17PayloadSizeLimitsERKNS_17RTPVideoHeaderVP8E(%"class.webrtc::RtpPacketizerVp8"*, i8*, i64, i64, i64, %"struct.webrtc::RTPVideoHeaderVP8"* nocapture readonly dereferenceable(20)) unnamed_addr #0 align 2 {
  %7 = alloca { i64, i64 }, align 8
  %8 = bitcast { i64, i64 }* %7 to %"struct.webrtc::RtpPacketizer::PayloadSizeLimits"*
  %9 = alloca %"class.std::__1::vector", align 16
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 0
  store i64 %3, i64* %10, align 8
  %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  store i64 %4, i64* %11, align 8
  %12 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6webrtc16RtpPacketizerVp8E, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  %13 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 1
  tail call void @_ZN6webrtc16RtpPacketizerVp811BuildHeaderERKNS_17RTPVideoHeaderVP8E(%"class.absl::InlinedVector"* sret %13, %"struct.webrtc::RTPVideoHeaderVP8"* dereferenceable(20) %5)
  %14 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 2, i32 0, i32 0
  %15 = icmp eq i64 %2, 0
  %16 = select i1 %15, i8* null, i8* %1
  store i8* %16, i8** %14, align 8
  %17 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 2, i32 0, i32 1
  store i64 %2, i64* %17, align 8
  %18 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 3
  %19 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 4
  %20 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = bitcast %"class.std::__1::vector"* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 32, i1 false)
  %22 = load i64, i64* %20, align 8
  %23 = lshr i64 %22, 1
  %24 = bitcast { i64, i64 }* %7 to i32*
  %25 = trunc i64 %3 to i32
  %26 = trunc i64 %23 to i32
  %27 = sub i32 %25, %26
  store i32 %27, i32* %24, align 8
  %28 = bitcast %"class.std::__1::vector"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %28) #9
  %29 = trunc i64 %2 to i32
  call void @_ZN6webrtc13RtpPacketizer17SplitAboutEquallyEiRKNS0_17PayloadSizeLimitsE(%"class.std::__1::vector"* nonnull sret %9, i32 %29, %"struct.webrtc::RtpPacketizer::PayloadSizeLimits"* nonnull dereferenceable(16) %8) #9
  %30 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %18, i64 0, i32 0, i32 0
  %31 = load i32*, i32** %30, align 8
  %32 = icmp eq i32* %31, null
  br i1 %32, label %39, label %33

33:                                               ; preds = %6
  %34 = bitcast %"class.std::__1::vector"* %18 to i8*
  %35 = ptrtoint i32* %31 to i64
  %36 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 3, i32 0, i32 1
  %37 = bitcast i32** %36 to i64*
  store i64 %35, i64* %37, align 8
  %38 = bitcast i32* %31 to i8*
  call void @_ZdlPv(i8* %38) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %34, i8 0, i64 24, i1 false) #9
  br label %39

39:                                               ; preds = %33, %6
  %40 = bitcast %"class.std::__1::vector"* %9 to <2 x i64>*
  %41 = load <2 x i64>, <2 x i64>* %40, align 16
  %42 = bitcast %"class.std::__1::vector"* %18 to <2 x i64>*
  store <2 x i64> %41, <2 x i64>* %42, align 8
  %43 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  %44 = bitcast i32** %43 to i64*
  %45 = load i64, i64* %44, align 16
  %46 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %47 = bitcast i32** %46 to i64*
  store i64 %45, i64* %47, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #9
  %48 = bitcast %"class.std::__1::__wrap_iter"* %19 to i64*
  %49 = extractelement <2 x i64> %41, i32 0
  store i64 %49, i64* %48, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16RtpPacketizerVp811BuildHeaderERKNS_17RTPVideoHeaderVP8E(%"class.absl::InlinedVector"* noalias sret, %"struct.webrtc::RTPVideoHeaderVP8"* nocapture readonly dereferenceable(20)) local_unnamed_addr #0 align 2 {
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  %7 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %9 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %0, i64 0, i32 0, i32 1, i32 0, i32 1
  %10 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %0, i64 0, i32 0, i32 1
  %11 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned char, 6, std::__1::allocator<unsigned char> >::Data"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 -86, i64 16, i1 false)
  store i64 0, i64* %7, align 8
  %12 = getelementptr inbounds %"struct.webrtc::RTPVideoHeaderVP8", %"struct.webrtc::RTPVideoHeaderVP8"* %1, i64 0, i32 3
  %13 = load i8, i8* %12, align 2
  %14 = icmp ne i8 %13, -1
  %15 = getelementptr inbounds %"struct.webrtc::RTPVideoHeaderVP8", %"struct.webrtc::RTPVideoHeaderVP8"* %1, i64 0, i32 5
  %16 = load i32, i32* %15, align 4
  %17 = icmp ne i32 %16, -1
  %18 = getelementptr inbounds %"struct.webrtc::RTPVideoHeaderVP8", %"struct.webrtc::RTPVideoHeaderVP8"* %1, i64 0, i32 2
  %19 = load i16, i16* %18, align 4
  %20 = icmp ne i16 %19, -1
  %21 = getelementptr inbounds %"struct.webrtc::RTPVideoHeaderVP8", %"struct.webrtc::RTPVideoHeaderVP8"* %1, i64 0, i32 1
  %22 = load i16, i16* %21, align 2
  %23 = icmp ne i16 %22, -1
  %24 = select i1 %23, i8 -128, i8 0
  %25 = or i8 %24, 64
  %26 = select i1 %20, i8 %25, i8 %24
  %27 = or i8 %26, 32
  %28 = select i1 %14, i8 %27, i8 %26
  %29 = or i8 %28, 16
  %30 = select i1 %17, i8 %29, i8 %28
  %31 = icmp eq i8 %30, 0
  %32 = select i1 %31, i8 0, i8 -128
  %33 = getelementptr inbounds %"struct.webrtc::RTPVideoHeaderVP8", %"struct.webrtc::RTPVideoHeaderVP8"* %1, i64 0, i32 0
  %34 = load i8, i8* %33, align 4, !range !2
  %35 = icmp eq i8 %34, 0
  %36 = or i8 %32, 32
  %37 = select i1 %35, i8 %32, i8 %36
  %38 = or i8 %37, 16
  %39 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %0, i64 0, i32 0
  %40 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %0, i64 0, i32 0, i32 1
  %41 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned char, 6, std::__1::allocator<unsigned char> >::Data"* %40 to i8*
  store i8 %38, i8* %41, align 8
  store i64 2, i64* %7, align 8
  br i1 %31, label %153, label %42

42:                                               ; preds = %2
  %43 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned char, 6, std::__1::allocator<unsigned char> >::Data"* %40 to i8*
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  store i8 %30, i8* %44, align 1
  %45 = load i64, i64* %7, align 8
  %46 = add i64 %45, 2
  store i64 %46, i64* %7, align 8
  br i1 %23, label %47, label %91

47:                                               ; preds = %42
  %48 = load i16, i16* %21, align 2
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #9
  %49 = lshr i16 %48, 8
  %50 = trunc i16 %49 to i8
  %51 = or i8 %50, -128
  store i8 %51, i8* %3, align 1
  %52 = and i64 %46, 1
  %53 = icmp eq i64 %52, 0
  %54 = load i64, i64* %9, align 8
  %55 = select i1 %53, i64 6, i64 %54
  %56 = lshr i64 %46, 1
  %57 = icmp eq i64 %56, %55
  br i1 %57, label %67, label %58, !prof !3

58:                                               ; preds = %47
  %59 = ptrtoint %"union.absl::inlined_vector_internal::Storage<unsigned char, 6, std::__1::allocator<unsigned char> >::Data"* %40 to i64
  %60 = bitcast i8** %8 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = select i1 %53, i64 %59, i64 %61
  %63 = inttoptr i64 %62 to i8*
  %64 = getelementptr inbounds i8, i8* %63, i64 %56
  store i8 %51, i8* %64, align 1
  %65 = load i64, i64* %7, align 8
  %66 = add i64 %65, 2
  store i64 %66, i64* %7, align 8
  br label %70

67:                                               ; preds = %47
  %68 = call dereferenceable(1) i8* @_ZN4absl23inlined_vector_internal7StorageIhLm6ENSt3__19allocatorIhEEE15EmplaceBackSlowIJhEEERhDpOT_(%"class.absl::inlined_vector_internal::Storage"* %39, i8* nonnull dereferenceable(1) %3) #9
  %69 = load i64, i64* %7, align 8, !noalias !4
  br label %70

70:                                               ; preds = %58, %67
  %71 = phi i64 [ %66, %58 ], [ %69, %67 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #9
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #9
  %72 = trunc i16 %48 to i8
  store i8 %72, i8* %4, align 1
  %73 = and i64 %71, 1
  %74 = icmp eq i64 %73, 0
  %75 = load i64, i64* %9, align 8
  %76 = select i1 %74, i64 6, i64 %75
  %77 = lshr i64 %71, 1
  %78 = icmp eq i64 %77, %76
  br i1 %78, label %88, label %79, !prof !3

79:                                               ; preds = %70
  %80 = ptrtoint %"union.absl::inlined_vector_internal::Storage<unsigned char, 6, std::__1::allocator<unsigned char> >::Data"* %40 to i64
  %81 = bitcast i8** %8 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = select i1 %74, i64 %80, i64 %82
  %84 = inttoptr i64 %83 to i8*
  %85 = getelementptr inbounds i8, i8* %84, i64 %77
  store i8 %72, i8* %85, align 1
  %86 = load i64, i64* %7, align 8
  %87 = add i64 %86, 2
  store i64 %87, i64* %7, align 8
  br label %90

88:                                               ; preds = %70
  %89 = call dereferenceable(1) i8* @_ZN4absl23inlined_vector_internal7StorageIhLm6ENSt3__19allocatorIhEEE15EmplaceBackSlowIJhEEERhDpOT_(%"class.absl::inlined_vector_internal::Storage"* %39, i8* nonnull dereferenceable(1) %4) #9
  br label %90

90:                                               ; preds = %79, %88
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #9
  br label %91

91:                                               ; preds = %90, %42
  br i1 %20, label %92, label %114

92:                                               ; preds = %91
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5) #9
  %93 = load i16, i16* %18, align 4
  %94 = trunc i16 %93 to i8
  store i8 %94, i8* %5, align 1
  %95 = load i64, i64* %7, align 8, !noalias !7
  %96 = and i64 %95, 1
  %97 = icmp eq i64 %96, 0
  %98 = load i64, i64* %9, align 8
  %99 = select i1 %97, i64 6, i64 %98
  %100 = lshr i64 %95, 1
  %101 = icmp eq i64 %100, %99
  br i1 %101, label %111, label %102, !prof !3

102:                                              ; preds = %92
  %103 = ptrtoint %"union.absl::inlined_vector_internal::Storage<unsigned char, 6, std::__1::allocator<unsigned char> >::Data"* %40 to i64
  %104 = bitcast i8** %8 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = select i1 %97, i64 %103, i64 %105
  %107 = inttoptr i64 %106 to i8*
  %108 = getelementptr inbounds i8, i8* %107, i64 %100
  store i8 %94, i8* %108, align 1
  %109 = load i64, i64* %7, align 8
  %110 = add i64 %109, 2
  store i64 %110, i64* %7, align 8
  br label %113

111:                                              ; preds = %92
  %112 = call dereferenceable(1) i8* @_ZN4absl23inlined_vector_internal7StorageIhLm6ENSt3__19allocatorIhEEE15EmplaceBackSlowIJhEEERhDpOT_(%"class.absl::inlined_vector_internal::Storage"* %39, i8* nonnull dereferenceable(1) %5) #9
  br label %113

113:                                              ; preds = %102, %111
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #9
  br label %114

114:                                              ; preds = %113, %91
  %115 = or i1 %14, %17
  br i1 %115, label %116, label %153

116:                                              ; preds = %114
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #9
  store i8 0, i8* %6, align 1
  br i1 %14, label %117, label %125

117:                                              ; preds = %116
  %118 = load i8, i8* %12, align 2
  %119 = shl i8 %118, 6
  store i8 %119, i8* %6, align 1
  %120 = getelementptr inbounds %"struct.webrtc::RTPVideoHeaderVP8", %"struct.webrtc::RTPVideoHeaderVP8"* %1, i64 0, i32 4
  %121 = load i8, i8* %120, align 1, !range !2
  %122 = icmp eq i8 %121, 0
  br i1 %122, label %125, label %123

123:                                              ; preds = %117
  %124 = or i8 %119, 32
  store i8 %124, i8* %6, align 1
  br label %125

125:                                              ; preds = %117, %123, %116
  %126 = phi i8 [ %119, %117 ], [ %124, %123 ], [ 0, %116 ]
  br i1 %17, label %127, label %132

127:                                              ; preds = %125
  %128 = load i32, i32* %15, align 4
  %129 = trunc i32 %128 to i8
  %130 = and i8 %129, 31
  %131 = or i8 %130, %126
  store i8 %131, i8* %6, align 1
  br label %132

132:                                              ; preds = %127, %125
  %133 = phi i8 [ %131, %127 ], [ %126, %125 ]
  %134 = load i64, i64* %7, align 8, !noalias !10
  %135 = and i64 %134, 1
  %136 = icmp eq i64 %135, 0
  %137 = load i64, i64* %9, align 8
  %138 = select i1 %136, i64 6, i64 %137
  %139 = lshr i64 %134, 1
  %140 = icmp eq i64 %139, %138
  br i1 %140, label %150, label %141, !prof !3

141:                                              ; preds = %132
  %142 = ptrtoint %"union.absl::inlined_vector_internal::Storage<unsigned char, 6, std::__1::allocator<unsigned char> >::Data"* %40 to i64
  %143 = bitcast i8** %8 to i64*
  %144 = load i64, i64* %143, align 8
  %145 = select i1 %136, i64 %142, i64 %144
  %146 = inttoptr i64 %145 to i8*
  %147 = getelementptr inbounds i8, i8* %146, i64 %139
  store i8 %133, i8* %147, align 1
  %148 = load i64, i64* %7, align 8
  %149 = add i64 %148, 2
  store i64 %149, i64* %7, align 8
  br label %152

150:                                              ; preds = %132
  %151 = call dereferenceable(1) i8* @_ZN4absl23inlined_vector_internal7StorageIhLm6ENSt3__19allocatorIhEEE15EmplaceBackSlowIJRKhEEERhDpOT_(%"class.absl::inlined_vector_internal::Storage"* %39, i8* nonnull dereferenceable(1) %6) #9
  br label %152

152:                                              ; preds = %141, %150
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #9
  br label %153

153:                                              ; preds = %152, %114, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN6webrtc13RtpPacketizer17SplitAboutEquallyEiRKNS0_17PayloadSizeLimitsE(%"class.std::__1::vector"* sret, i32, %"struct.webrtc::RtpPacketizer::PayloadSizeLimits"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16RtpPacketizerVp8D2Ev(%"class.webrtc::RtpPacketizerVp8"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6webrtc16RtpPacketizerVp8E, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 3, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 3, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = and i64 %13, 1
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %19, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  tail call void @_ZdlPv(i8* %18) #10
  br label %19

19:                                               ; preds = %11, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16RtpPacketizerVp8D0Ev(%"class.webrtc::RtpPacketizerVp8"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6webrtc16RtpPacketizerVp8E, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 3, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 3, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %6, %1
  %12 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = and i64 %13, 1
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %19, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  tail call void @_ZdlPv(i8* %18) #10
  br label %19

19:                                               ; preds = %11, %16
  %20 = bitcast %"class.webrtc::RtpPacketizerVp8"* %0 to i8*
  tail call void @_ZdlPv(i8* %20) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZNK6webrtc16RtpPacketizerVp810NumPacketsEv(%"class.webrtc::RtpPacketizerVp8"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 3, i32 0, i32 1
  %3 = bitcast i32** %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 4
  %6 = bitcast %"class.std::__1::__wrap_iter"* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %4, %7
  %9 = ashr exact i64 %8, 2
  ret i64 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6webrtc16RtpPacketizerVp810NextPacketEPNS_15RtpPacketToSendE(%"class.webrtc::RtpPacketizerVp8"* nocapture, %"class.webrtc::RtpPacketToSend"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 3, i32 0, i32 1
  %4 = load i32*, i32** %3, align 8
  %5 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 4, i32 0
  %6 = load i32*, i32** %5, align 8
  %7 = icmp eq i32* %6, %4
  br i1 %7, label %72, label %8

8:                                                ; preds = %2
  %9 = load i32, i32* %6, align 4
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i32, i32* %6, i64 1
  store i32* %11, i32** %5, align 8
  %12 = getelementptr inbounds %"class.webrtc::RtpPacketToSend", %"class.webrtc::RtpPacketToSend"* %1, i64 0, i32 0
  %13 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = lshr i64 %14, 1
  %16 = add i64 %15, %10
  %17 = tail call i8* @_ZN6webrtc9RtpPacket15AllocatePayloadEm(%"class.webrtc::RtpPacket"* %12, i64 %16) #9
  %18 = icmp eq i8* %17, null
  br i1 %18, label %19, label %20

19:                                               ; preds = %8
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0), i32 86, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, i64 0, i64 0)) #11
  unreachable

20:                                               ; preds = %8
  %21 = load i64, i64* %13, align 8
  %22 = and i64 %21, 1
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %27, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  br label %30

27:                                               ; preds = %20
  %28 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 1, i32 0, i32 1
  %29 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned char, 6, std::__1::allocator<unsigned char> >::Data"* %28 to i8*
  br label %30

30:                                               ; preds = %24, %27
  %31 = phi i8* [ %26, %24 ], [ %29, %27 ]
  %32 = lshr i64 %21, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %17, i8* align 1 %31, i64 %32, i1 false)
  %33 = load i64, i64* %13, align 8
  %34 = lshr i64 %33, 1
  %35 = getelementptr inbounds i8, i8* %17, i64 %34
  %36 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 2, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %35, i8* align 1 %37, i64 %10, i1 false)
  %38 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 2, i32 0, i32 1
  %39 = load i64, i64* %38, align 8
  %40 = icmp ugt i64 %39, %10
  br i1 %40, label %41, label %49

41:                                               ; preds = %30
  %42 = load i8*, i8** %36, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 %10
  %44 = sub i64 %39, %10
  %45 = icmp ult i64 %44, %39
  %46 = select i1 %45, i64 %44, i64 %39
  %47 = icmp eq i64 %46, 0
  %48 = select i1 %47, i8* null, i8* %43
  br label %49

49:                                               ; preds = %30, %41
  %50 = phi i64 [ %46, %41 ], [ 0, %30 ]
  %51 = phi i8* [ %48, %41 ], [ null, %30 ]
  %52 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 2, i32 0, i32 0
  store i8* %51, i8** %52, align 8
  store i64 %50, i64* %38, align 8
  %53 = load i64, i64* %13, align 8
  %54 = icmp ugt i64 %53, 1
  br i1 %54, label %56, label %55, !prof !13

55:                                               ; preds = %49
  tail call void @llvm.trap() #9
  unreachable

56:                                               ; preds = %49
  %57 = and i64 %53, 1
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %62, label %59

59:                                               ; preds = %56
  %60 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  br label %65

62:                                               ; preds = %56
  %63 = getelementptr inbounds %"class.webrtc::RtpPacketizerVp8", %"class.webrtc::RtpPacketizerVp8"* %0, i64 0, i32 1, i32 0, i32 1
  %64 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned char, 6, std::__1::allocator<unsigned char> >::Data"* %63 to i8*
  br label %65

65:                                               ; preds = %59, %62
  %66 = phi i8* [ %61, %59 ], [ %64, %62 ]
  %67 = load i8, i8* %66, align 1
  %68 = and i8 %67, -17
  store i8 %68, i8* %66, align 1
  %69 = load i32*, i32** %3, align 8
  %70 = load i32*, i32** %5, align 8
  %71 = icmp eq i32* %70, %69
  tail call void @_ZN6webrtc9RtpPacket9SetMarkerEb(%"class.webrtc::RtpPacket"* %12, i1 zeroext %71) #9
  br label %72

72:                                               ; preds = %2, %65
  %73 = phi i1 [ true, %65 ], [ false, %2 ]
  ret i1 %73
}

declare i8* @_ZN6webrtc9RtpPacket15AllocatePayloadEm(%"class.webrtc::RtpPacket"*, i64) local_unnamed_addr #2

declare void @_ZN6webrtc9RtpPacket9SetMarkerEb(%"class.webrtc::RtpPacket"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: noreturn
declare void @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8*, i32, i8*, i8*, ...) local_unnamed_addr #6

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) i8* @_ZN4absl23inlined_vector_internal7StorageIhLm6ENSt3__19allocatorIhEEE15EmplaceBackSlowIJRKhEEERhDpOT_(%"class.absl::inlined_vector_internal::Storage"*, i8* dereferenceable(1)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !noalias !14
  %5 = and i64 %4, 1
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %14, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %9 = bitcast i8** %8 to i64*
  %10 = load i64, i64* %9, align 8, !noalias !14
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 1
  %12 = load i64, i64* %11, align 8, !noalias !14
  %13 = shl i64 %12, 1
  br label %17

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1
  %16 = ptrtoint %"union.absl::inlined_vector_internal::Storage<unsigned char, 6, std::__1::allocator<unsigned char> >::Data"* %15 to i64
  br label %17

17:                                               ; preds = %7, %14
  %18 = phi i64 [ %16, %14 ], [ %10, %7 ]
  %19 = phi i64 [ 12, %14 ], [ %13, %7 ]
  %20 = lshr i64 %4, 1
  %21 = tail call i8* @_Znwm(i64 %19) #10
  %22 = ptrtoint i8* %21 to i64
  %23 = getelementptr inbounds i8, i8* %21, i64 %20
  %24 = load i8, i8* %1, align 1
  store i8 %24, i8* %23, align 1
  %25 = icmp eq i64 %20, 0
  br i1 %25, label %156, label %26

26:                                               ; preds = %17
  %27 = inttoptr i64 %18 to i8*
  %28 = icmp ult i64 %4, 64
  br i1 %28, label %115, label %29

29:                                               ; preds = %26
  %30 = getelementptr i8, i8* %21, i64 %20
  %31 = getelementptr i8, i8* %27, i64 %20
  %32 = icmp ult i8* %21, %31
  %33 = icmp ugt i8* %30, %27
  %34 = and i1 %32, %33
  br i1 %34, label %115, label %35

35:                                               ; preds = %29
  %36 = and i64 %20, 9223372036854775776
  %37 = getelementptr i8, i8* %27, i64 %36
  %38 = add nsw i64 %36, -32
  %39 = lshr exact i64 %38, 5
  %40 = add nuw nsw i64 %39, 1
  %41 = and i64 %40, 3
  %42 = icmp ult i64 %38, 96
  br i1 %42, label %94, label %43

43:                                               ; preds = %35
  %44 = sub nsw i64 %40, %41
  br label %45

45:                                               ; preds = %45, %43
  %46 = phi i64 [ 0, %43 ], [ %91, %45 ]
  %47 = phi i64 [ %44, %43 ], [ %92, %45 ]
  %48 = getelementptr i8, i8* %27, i64 %46
  %49 = getelementptr inbounds i8, i8* %21, i64 %46
  %50 = bitcast i8* %48 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1, !alias.scope !17
  %52 = getelementptr i8, i8* %48, i64 16
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1, !alias.scope !17
  %55 = bitcast i8* %49 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %55, align 1, !alias.scope !20, !noalias !17
  %56 = getelementptr inbounds i8, i8* %49, i64 16
  %57 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> %54, <16 x i8>* %57, align 1, !alias.scope !20, !noalias !17
  %58 = or i64 %46, 32
  %59 = getelementptr i8, i8* %27, i64 %58
  %60 = getelementptr inbounds i8, i8* %21, i64 %58
  %61 = bitcast i8* %59 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1, !alias.scope !17
  %63 = getelementptr i8, i8* %59, i64 16
  %64 = bitcast i8* %63 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 1, !alias.scope !17
  %66 = bitcast i8* %60 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %66, align 1, !alias.scope !20, !noalias !17
  %67 = getelementptr inbounds i8, i8* %60, i64 16
  %68 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %65, <16 x i8>* %68, align 1, !alias.scope !20, !noalias !17
  %69 = or i64 %46, 64
  %70 = getelementptr i8, i8* %27, i64 %69
  %71 = getelementptr inbounds i8, i8* %21, i64 %69
  %72 = bitcast i8* %70 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !17
  %74 = getelementptr i8, i8* %70, i64 16
  %75 = bitcast i8* %74 to <16 x i8>*
  %76 = load <16 x i8>, <16 x i8>* %75, align 1, !alias.scope !17
  %77 = bitcast i8* %71 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %77, align 1, !alias.scope !20, !noalias !17
  %78 = getelementptr inbounds i8, i8* %71, i64 16
  %79 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %76, <16 x i8>* %79, align 1, !alias.scope !20, !noalias !17
  %80 = or i64 %46, 96
  %81 = getelementptr i8, i8* %27, i64 %80
  %82 = getelementptr inbounds i8, i8* %21, i64 %80
  %83 = bitcast i8* %81 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !17
  %85 = getelementptr i8, i8* %81, i64 16
  %86 = bitcast i8* %85 to <16 x i8>*
  %87 = load <16 x i8>, <16 x i8>* %86, align 1, !alias.scope !17
  %88 = bitcast i8* %82 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %88, align 1, !alias.scope !20, !noalias !17
  %89 = getelementptr inbounds i8, i8* %82, i64 16
  %90 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %87, <16 x i8>* %90, align 1, !alias.scope !20, !noalias !17
  %91 = add i64 %46, 128
  %92 = add i64 %47, -4
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %94, label %45, !llvm.loop !22

94:                                               ; preds = %45, %35
  %95 = phi i64 [ 0, %35 ], [ %91, %45 ]
  %96 = icmp eq i64 %41, 0
  br i1 %96, label %113, label %97

97:                                               ; preds = %94, %97
  %98 = phi i64 [ %110, %97 ], [ %95, %94 ]
  %99 = phi i64 [ %111, %97 ], [ %41, %94 ]
  %100 = getelementptr i8, i8* %27, i64 %98
  %101 = getelementptr inbounds i8, i8* %21, i64 %98
  %102 = bitcast i8* %100 to <16 x i8>*
  %103 = load <16 x i8>, <16 x i8>* %102, align 1, !alias.scope !17
  %104 = getelementptr i8, i8* %100, i64 16
  %105 = bitcast i8* %104 to <16 x i8>*
  %106 = load <16 x i8>, <16 x i8>* %105, align 1, !alias.scope !17
  %107 = bitcast i8* %101 to <16 x i8>*
  store <16 x i8> %103, <16 x i8>* %107, align 1, !alias.scope !20, !noalias !17
  %108 = getelementptr inbounds i8, i8* %101, i64 16
  %109 = bitcast i8* %108 to <16 x i8>*
  store <16 x i8> %106, <16 x i8>* %109, align 1, !alias.scope !20, !noalias !17
  %110 = add i64 %98, 32
  %111 = add i64 %99, -1
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %97, !llvm.loop !24

113:                                              ; preds = %97, %94
  %114 = icmp eq i64 %20, %36
  br i1 %114, label %156, label %115

115:                                              ; preds = %113, %29, %26
  %116 = phi i8* [ %27, %29 ], [ %27, %26 ], [ %37, %113 ]
  %117 = phi i64 [ 0, %29 ], [ 0, %26 ], [ %36, %113 ]
  %118 = xor i64 %117, -1
  %119 = add nsw i64 %20, %118
  %120 = and i64 %20, 3
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %132, label %122

122:                                              ; preds = %115, %122
  %123 = phi i8* [ %128, %122 ], [ %116, %115 ]
  %124 = phi i64 [ %129, %122 ], [ %117, %115 ]
  %125 = phi i64 [ %130, %122 ], [ %120, %115 ]
  %126 = getelementptr inbounds i8, i8* %21, i64 %124
  %127 = load i8, i8* %123, align 1
  store i8 %127, i8* %126, align 1
  %128 = getelementptr inbounds i8, i8* %123, i64 1
  %129 = add nuw nsw i64 %124, 1
  %130 = add i64 %125, -1
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %122, !llvm.loop !26

132:                                              ; preds = %122, %115
  %133 = phi i8* [ %116, %115 ], [ %128, %122 ]
  %134 = phi i64 [ %117, %115 ], [ %129, %122 ]
  %135 = icmp ult i64 %119, 3
  br i1 %135, label %156, label %136

136:                                              ; preds = %132, %136
  %137 = phi i8* [ %153, %136 ], [ %133, %132 ]
  %138 = phi i64 [ %154, %136 ], [ %134, %132 ]
  %139 = getelementptr inbounds i8, i8* %21, i64 %138
  %140 = load i8, i8* %137, align 1
  store i8 %140, i8* %139, align 1
  %141 = getelementptr inbounds i8, i8* %137, i64 1
  %142 = add nuw nsw i64 %138, 1
  %143 = getelementptr inbounds i8, i8* %21, i64 %142
  %144 = load i8, i8* %141, align 1
  store i8 %144, i8* %143, align 1
  %145 = getelementptr inbounds i8, i8* %137, i64 2
  %146 = add nuw nsw i64 %138, 2
  %147 = getelementptr inbounds i8, i8* %21, i64 %146
  %148 = load i8, i8* %145, align 1
  store i8 %148, i8* %147, align 1
  %149 = getelementptr inbounds i8, i8* %137, i64 3
  %150 = add nuw nsw i64 %138, 3
  %151 = getelementptr inbounds i8, i8* %21, i64 %150
  %152 = load i8, i8* %149, align 1
  store i8 %152, i8* %151, align 1
  %153 = getelementptr inbounds i8, i8* %137, i64 4
  %154 = add nuw nsw i64 %138, 4
  %155 = icmp eq i64 %154, %20
  br i1 %155, label %156, label %136, !llvm.loop !27

156:                                              ; preds = %132, %136, %113, %17
  br i1 %6, label %161, label %157

157:                                              ; preds = %156
  %158 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %159 = load i8*, i8** %158, align 8
  tail call void @_ZdlPv(i8* %159) #10
  %160 = load i64, i64* %3, align 8
  br label %161

161:                                              ; preds = %157, %156
  %162 = phi i64 [ %160, %157 ], [ %4, %156 ]
  %163 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %164 = bitcast i8** %163 to i64*
  store i64 %22, i64* %164, align 8
  %165 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %19, i64* %165, align 8
  %166 = or i64 %162, 1
  %167 = add i64 %166, 2
  store i64 %167, i64* %3, align 8
  ret i8* %23
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) i8* @_ZN4absl23inlined_vector_internal7StorageIhLm6ENSt3__19allocatorIhEEE15EmplaceBackSlowIJhEEERhDpOT_(%"class.absl::inlined_vector_internal::Storage"*, i8* dereferenceable(1)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !noalias !28
  %5 = and i64 %4, 1
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %14, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %9 = bitcast i8** %8 to i64*
  %10 = load i64, i64* %9, align 8, !noalias !28
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 1
  %12 = load i64, i64* %11, align 8, !noalias !28
  %13 = shl i64 %12, 1
  br label %17

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1
  %16 = ptrtoint %"union.absl::inlined_vector_internal::Storage<unsigned char, 6, std::__1::allocator<unsigned char> >::Data"* %15 to i64
  br label %17

17:                                               ; preds = %7, %14
  %18 = phi i64 [ %16, %14 ], [ %10, %7 ]
  %19 = phi i64 [ 12, %14 ], [ %13, %7 ]
  %20 = lshr i64 %4, 1
  %21 = tail call i8* @_Znwm(i64 %19) #10
  %22 = ptrtoint i8* %21 to i64
  %23 = getelementptr inbounds i8, i8* %21, i64 %20
  %24 = load i8, i8* %1, align 1
  store i8 %24, i8* %23, align 1
  %25 = icmp eq i64 %20, 0
  br i1 %25, label %156, label %26

26:                                               ; preds = %17
  %27 = inttoptr i64 %18 to i8*
  %28 = icmp ult i64 %4, 64
  br i1 %28, label %115, label %29

29:                                               ; preds = %26
  %30 = getelementptr i8, i8* %21, i64 %20
  %31 = getelementptr i8, i8* %27, i64 %20
  %32 = icmp ult i8* %21, %31
  %33 = icmp ugt i8* %30, %27
  %34 = and i1 %32, %33
  br i1 %34, label %115, label %35

35:                                               ; preds = %29
  %36 = and i64 %20, 9223372036854775776
  %37 = getelementptr i8, i8* %27, i64 %36
  %38 = add nsw i64 %36, -32
  %39 = lshr exact i64 %38, 5
  %40 = add nuw nsw i64 %39, 1
  %41 = and i64 %40, 3
  %42 = icmp ult i64 %38, 96
  br i1 %42, label %94, label %43

43:                                               ; preds = %35
  %44 = sub nsw i64 %40, %41
  br label %45

45:                                               ; preds = %45, %43
  %46 = phi i64 [ 0, %43 ], [ %91, %45 ]
  %47 = phi i64 [ %44, %43 ], [ %92, %45 ]
  %48 = getelementptr i8, i8* %27, i64 %46
  %49 = getelementptr inbounds i8, i8* %21, i64 %46
  %50 = bitcast i8* %48 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1, !alias.scope !31
  %52 = getelementptr i8, i8* %48, i64 16
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1, !alias.scope !31
  %55 = bitcast i8* %49 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %55, align 1, !alias.scope !34, !noalias !31
  %56 = getelementptr inbounds i8, i8* %49, i64 16
  %57 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> %54, <16 x i8>* %57, align 1, !alias.scope !34, !noalias !31
  %58 = or i64 %46, 32
  %59 = getelementptr i8, i8* %27, i64 %58
  %60 = getelementptr inbounds i8, i8* %21, i64 %58
  %61 = bitcast i8* %59 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1, !alias.scope !31
  %63 = getelementptr i8, i8* %59, i64 16
  %64 = bitcast i8* %63 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 1, !alias.scope !31
  %66 = bitcast i8* %60 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %66, align 1, !alias.scope !34, !noalias !31
  %67 = getelementptr inbounds i8, i8* %60, i64 16
  %68 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %65, <16 x i8>* %68, align 1, !alias.scope !34, !noalias !31
  %69 = or i64 %46, 64
  %70 = getelementptr i8, i8* %27, i64 %69
  %71 = getelementptr inbounds i8, i8* %21, i64 %69
  %72 = bitcast i8* %70 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !31
  %74 = getelementptr i8, i8* %70, i64 16
  %75 = bitcast i8* %74 to <16 x i8>*
  %76 = load <16 x i8>, <16 x i8>* %75, align 1, !alias.scope !31
  %77 = bitcast i8* %71 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %77, align 1, !alias.scope !34, !noalias !31
  %78 = getelementptr inbounds i8, i8* %71, i64 16
  %79 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %76, <16 x i8>* %79, align 1, !alias.scope !34, !noalias !31
  %80 = or i64 %46, 96
  %81 = getelementptr i8, i8* %27, i64 %80
  %82 = getelementptr inbounds i8, i8* %21, i64 %80
  %83 = bitcast i8* %81 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !31
  %85 = getelementptr i8, i8* %81, i64 16
  %86 = bitcast i8* %85 to <16 x i8>*
  %87 = load <16 x i8>, <16 x i8>* %86, align 1, !alias.scope !31
  %88 = bitcast i8* %82 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %88, align 1, !alias.scope !34, !noalias !31
  %89 = getelementptr inbounds i8, i8* %82, i64 16
  %90 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %87, <16 x i8>* %90, align 1, !alias.scope !34, !noalias !31
  %91 = add i64 %46, 128
  %92 = add i64 %47, -4
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %94, label %45, !llvm.loop !36

94:                                               ; preds = %45, %35
  %95 = phi i64 [ 0, %35 ], [ %91, %45 ]
  %96 = icmp eq i64 %41, 0
  br i1 %96, label %113, label %97

97:                                               ; preds = %94, %97
  %98 = phi i64 [ %110, %97 ], [ %95, %94 ]
  %99 = phi i64 [ %111, %97 ], [ %41, %94 ]
  %100 = getelementptr i8, i8* %27, i64 %98
  %101 = getelementptr inbounds i8, i8* %21, i64 %98
  %102 = bitcast i8* %100 to <16 x i8>*
  %103 = load <16 x i8>, <16 x i8>* %102, align 1, !alias.scope !31
  %104 = getelementptr i8, i8* %100, i64 16
  %105 = bitcast i8* %104 to <16 x i8>*
  %106 = load <16 x i8>, <16 x i8>* %105, align 1, !alias.scope !31
  %107 = bitcast i8* %101 to <16 x i8>*
  store <16 x i8> %103, <16 x i8>* %107, align 1, !alias.scope !34, !noalias !31
  %108 = getelementptr inbounds i8, i8* %101, i64 16
  %109 = bitcast i8* %108 to <16 x i8>*
  store <16 x i8> %106, <16 x i8>* %109, align 1, !alias.scope !34, !noalias !31
  %110 = add i64 %98, 32
  %111 = add i64 %99, -1
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %97, !llvm.loop !37

113:                                              ; preds = %97, %94
  %114 = icmp eq i64 %20, %36
  br i1 %114, label %156, label %115

115:                                              ; preds = %113, %29, %26
  %116 = phi i8* [ %27, %29 ], [ %27, %26 ], [ %37, %113 ]
  %117 = phi i64 [ 0, %29 ], [ 0, %26 ], [ %36, %113 ]
  %118 = xor i64 %117, -1
  %119 = add nsw i64 %20, %118
  %120 = and i64 %20, 3
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %132, label %122

122:                                              ; preds = %115, %122
  %123 = phi i8* [ %128, %122 ], [ %116, %115 ]
  %124 = phi i64 [ %129, %122 ], [ %117, %115 ]
  %125 = phi i64 [ %130, %122 ], [ %120, %115 ]
  %126 = getelementptr inbounds i8, i8* %21, i64 %124
  %127 = load i8, i8* %123, align 1
  store i8 %127, i8* %126, align 1
  %128 = getelementptr inbounds i8, i8* %123, i64 1
  %129 = add nuw nsw i64 %124, 1
  %130 = add i64 %125, -1
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %122, !llvm.loop !38

132:                                              ; preds = %122, %115
  %133 = phi i8* [ %116, %115 ], [ %128, %122 ]
  %134 = phi i64 [ %117, %115 ], [ %129, %122 ]
  %135 = icmp ult i64 %119, 3
  br i1 %135, label %156, label %136

136:                                              ; preds = %132, %136
  %137 = phi i8* [ %153, %136 ], [ %133, %132 ]
  %138 = phi i64 [ %154, %136 ], [ %134, %132 ]
  %139 = getelementptr inbounds i8, i8* %21, i64 %138
  %140 = load i8, i8* %137, align 1
  store i8 %140, i8* %139, align 1
  %141 = getelementptr inbounds i8, i8* %137, i64 1
  %142 = add nuw nsw i64 %138, 1
  %143 = getelementptr inbounds i8, i8* %21, i64 %142
  %144 = load i8, i8* %141, align 1
  store i8 %144, i8* %143, align 1
  %145 = getelementptr inbounds i8, i8* %137, i64 2
  %146 = add nuw nsw i64 %138, 2
  %147 = getelementptr inbounds i8, i8* %21, i64 %146
  %148 = load i8, i8* %145, align 1
  store i8 %148, i8* %147, align 1
  %149 = getelementptr inbounds i8, i8* %137, i64 3
  %150 = add nuw nsw i64 %138, 3
  %151 = getelementptr inbounds i8, i8* %21, i64 %150
  %152 = load i8, i8* %149, align 1
  store i8 %152, i8* %151, align 1
  %153 = getelementptr inbounds i8, i8* %137, i64 4
  %154 = add nuw nsw i64 %138, 4
  %155 = icmp eq i64 %154, %20
  br i1 %155, label %156, label %136, !llvm.loop !39

156:                                              ; preds = %132, %136, %113, %17
  br i1 %6, label %161, label %157

157:                                              ; preds = %156
  %158 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %159 = load i8*, i8** %158, align 8
  tail call void @_ZdlPv(i8* %159) #10
  %160 = load i64, i64* %3, align 8
  br label %161

161:                                              ; preds = %157, %156
  %162 = phi i64 [ %160, %157 ], [ %4, %156 ]
  %163 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %164 = bitcast i8** %163 to i64*
  store i64 %22, i64* %164, align 8
  %165 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %19, i64* %165, align 8
  %166 = or i64 %162, 1
  %167 = add i64 %166, 2
  store i64 %167, i64* %3, align 8
  ret i8* %23
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZN4absl23inlined_vector_internal7StorageIhLm6ENSt3__19allocatorIhEEE15MakeStorageViewEv: argument 0"}
!6 = distinct !{!6, !"_ZN4absl23inlined_vector_internal7StorageIhLm6ENSt3__19allocatorIhEEE15MakeStorageViewEv"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZN4absl23inlined_vector_internal7StorageIhLm6ENSt3__19allocatorIhEEE15MakeStorageViewEv: argument 0"}
!9 = distinct !{!9, !"_ZN4absl23inlined_vector_internal7StorageIhLm6ENSt3__19allocatorIhEEE15MakeStorageViewEv"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZN4absl23inlined_vector_internal7StorageIhLm6ENSt3__19allocatorIhEEE15MakeStorageViewEv: argument 0"}
!12 = distinct !{!12, !"_ZN4absl23inlined_vector_internal7StorageIhLm6ENSt3__19allocatorIhEEE15MakeStorageViewEv"}
!13 = !{!"branch_weights", i32 2000, i32 1}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN4absl23inlined_vector_internal7StorageIhLm6ENSt3__19allocatorIhEEE15MakeStorageViewEv: argument 0"}
!16 = distinct !{!16, !"_ZN4absl23inlined_vector_internal7StorageIhLm6ENSt3__19allocatorIhEEE15MakeStorageViewEv"}
!17 = !{!18}
!18 = distinct !{!18, !19}
!19 = distinct !{!19, !"LVerDomain"}
!20 = !{!21}
!21 = distinct !{!21, !19}
!22 = distinct !{!22, !23}
!23 = !{!"llvm.loop.isvectorized", i32 1}
!24 = distinct !{!24, !25}
!25 = !{!"llvm.loop.unroll.disable"}
!26 = distinct !{!26, !25}
!27 = distinct !{!27, !23}
!28 = !{!29}
!29 = distinct !{!29, !30, !"_ZN4absl23inlined_vector_internal7StorageIhLm6ENSt3__19allocatorIhEEE15MakeStorageViewEv: argument 0"}
!30 = distinct !{!30, !"_ZN4absl23inlined_vector_internal7StorageIhLm6ENSt3__19allocatorIhEEE15MakeStorageViewEv"}
!31 = !{!32}
!32 = distinct !{!32, !33}
!33 = distinct !{!33, !"LVerDomain"}
!34 = !{!35}
!35 = distinct !{!35, !33}
!36 = distinct !{!36, !23}
!37 = distinct !{!37, !25}
!38 = distinct !{!38, !25}
!39 = distinct !{!39, !23}
