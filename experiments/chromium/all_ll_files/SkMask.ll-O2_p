; ModuleID = '../../third_party/skia/src/core/SkMask.cpp'
source_filename = "../../third_party/skia/src/core/SkMask.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkMask = type <{ i8*, %struct.SkIRect, i32, i8, [3 x i8] }>
%struct.SkIRect = type { i32, i32, i32, i32 }

@_ZL18gMaskFormatToShift = internal unnamed_addr constant [6 x i32] [i32 -1, i32 0, i32 0, i32 2, i32 1, i32 0], align 16

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK6SkMask16computeImageSizeEv(%struct.SkMask* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1, i32 3
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = sub i32 %3, %5
  %7 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %6 to i64
  %10 = sext i32 %8 to i64
  %11 = mul nsw i64 %10, %9
  %12 = icmp sgt i64 %11, 0
  %13 = icmp ult i64 %11, 2147483648
  %14 = and i1 %12, %13
  %15 = shl i64 %11, 32
  %16 = ashr exact i64 %15, 32
  %17 = select i1 %14, i64 %16, i64 0
  ret i64 %17
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK6SkMask21computeTotalImageSizeEv(%struct.SkMask* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1, i32 3
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = sub i32 %3, %5
  %7 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %6 to i64
  %10 = sext i32 %8 to i64
  %11 = mul nsw i64 %10, %9
  %12 = icmp sgt i64 %11, 0
  %13 = icmp ult i64 %11, 2147483648
  %14 = and i1 %12, %13
  %15 = shl i64 %11, 32
  %16 = ashr exact i64 %15, 32
  %17 = select i1 %14, i64 %16, i64 0
  %18 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 3
  %19 = load i8, i8* %18, align 4
  %20 = icmp eq i8 %19, 2
  br i1 %20, label %21, label %29

21:                                               ; preds = %1
  %22 = mul nsw i64 %17, 3
  %23 = icmp sgt i64 %17, 0
  %24 = icmp ult i64 %22, 2147483648
  %25 = and i1 %23, %24
  %26 = mul i64 %17, 12884901888
  %27 = ashr exact i64 %26, 32
  %28 = select i1 %25, i64 %27, i64 0
  br label %29

29:                                               ; preds = %21, %1
  %30 = phi i64 [ %28, %21 ], [ %17, %1 ]
  ret i64 %30
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN6SkMask10AllocImageEmNS_9AllocTypeE(i64, i32) local_unnamed_addr #1 align 2 {
  %3 = add i64 %0, 3
  %4 = and i64 %3, -4
  %5 = icmp eq i32 %1, 1
  %6 = select i1 %5, i32 3, i32 2
  %7 = tail call i8* @_Z15sk_malloc_flagsmj(i64 %4, i32 %6) #4
  ret i8* %7
}

declare i8* @_Z15sk_malloc_flagsmj(i64, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6SkMask9FreeImageEPv(i8*) local_unnamed_addr #1 align 2 {
  tail call void @_Z7sk_freePv(i8* %0) #4
  ret void
}

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6SkMask18PrepareDestinationEiiRKS_(%struct.SkMask* noalias nocapture sret, i32, i32, %struct.SkMask* nocapture readonly dereferenceable(32)) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 0
  %6 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 2
  %8 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 3
  %9 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1
  %10 = bitcast %struct.SkIRect* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 -86, i64 24, i1 false)
  store i8* null, i8** %5, align 8
  %11 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %3, i64 0, i32 1, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %3, i64 0, i32 1, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = sub i32 %12, %14
  %16 = sext i32 %15 to i64
  %17 = sext i32 %1 to i64
  %18 = shl nsw i64 %17, 1
  %19 = icmp uge i64 %18, %17
  %20 = add nsw i64 %18, %16
  %21 = icmp uge i64 %20, %16
  %22 = and i1 %19, %21
  %23 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %3, i64 0, i32 1, i32 3
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %3, i64 0, i32 1, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = sub i32 %24, %26
  %28 = sext i32 %27 to i64
  %29 = sext i32 %2 to i64
  %30 = shl nsw i64 %29, 1
  %31 = icmp uge i64 %30, %29
  %32 = and i1 %31, %22
  %33 = add nsw i64 %30, %28
  %34 = icmp uge i64 %33, %28
  %35 = and i1 %32, %34
  %36 = or i64 %33, %20
  %37 = icmp ult i64 %36, 2147483648
  br i1 %37, label %38, label %96

38:                                               ; preds = %4
  %39 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1, i32 3
  %40 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1, i32 2
  %41 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1, i32 1
  %42 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %6, i64 0, i32 0
  %43 = trunc i64 %20 to i32
  %44 = sext i32 %14 to i64
  %45 = icmp slt i64 %44, 2147483647
  %46 = select i1 %45, i64 %44, i64 2147483647
  %47 = icmp sgt i64 %46, -2147483647
  %48 = select i1 %47, i64 %46, i64 -2147483647
  %49 = sext i32 %26 to i64
  %50 = icmp slt i64 %49, 2147483647
  %51 = select i1 %50, i64 %49, i64 2147483647
  %52 = icmp sgt i64 %51, -2147483647
  %53 = select i1 %52, i64 %51, i64 -2147483647
  %54 = shl i64 %20, 32
  %55 = ashr exact i64 %54, 32
  %56 = add nsw i64 %55, %44
  %57 = icmp slt i64 %56, 2147483647
  %58 = select i1 %57, i64 %56, i64 2147483647
  %59 = icmp sgt i64 %58, -2147483647
  %60 = select i1 %59, i64 %58, i64 -2147483647
  %61 = shl i64 %33, 32
  %62 = ashr exact i64 %61, 32
  %63 = add nsw i64 %62, %49
  %64 = icmp slt i64 %63, 2147483647
  %65 = select i1 %64, i64 %63, i64 2147483647
  %66 = icmp sgt i64 %65, -2147483647
  %67 = select i1 %66, i64 %65, i64 -2147483647
  %68 = sub nsw i32 0, %1
  %69 = sub nsw i32 0, %2
  %70 = sext i32 %68 to i64
  %71 = add nsw i64 %48, %70
  %72 = icmp slt i64 %71, 2147483647
  %73 = select i1 %72, i64 %71, i64 2147483647
  %74 = icmp sgt i64 %73, -2147483647
  %75 = select i1 %74, i64 %73, i64 -2147483647
  %76 = trunc i64 %75 to i32
  store i32 %76, i32* %42, align 4
  %77 = sext i32 %69 to i64
  %78 = add nsw i64 %53, %77
  %79 = icmp slt i64 %78, 2147483647
  %80 = select i1 %79, i64 %78, i64 2147483647
  %81 = icmp sgt i64 %80, -2147483647
  %82 = select i1 %81, i64 %80, i64 -2147483647
  %83 = trunc i64 %82 to i32
  store i32 %83, i32* %41, align 4
  %84 = add nsw i64 %60, %70
  %85 = icmp slt i64 %84, 2147483647
  %86 = select i1 %85, i64 %84, i64 2147483647
  %87 = icmp sgt i64 %86, -2147483647
  %88 = select i1 %87, i64 %86, i64 -2147483647
  %89 = trunc i64 %88 to i32
  store i32 %89, i32* %40, align 4
  %90 = add nsw i64 %67, %77
  %91 = icmp slt i64 %90, 2147483647
  %92 = select i1 %91, i64 %90, i64 2147483647
  %93 = icmp sgt i64 %92, -2147483647
  %94 = select i1 %93, i64 %92, i64 -2147483647
  %95 = trunc i64 %94 to i32
  store i32 %95, i32* %39, align 4
  store i32 %43, i32* %7, align 8
  store i8* null, i8** %5, align 8
  store i8 1, i8* %8, align 4
  br label %122

96:                                               ; preds = %4
  %97 = bitcast %struct.SkIRect* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %97, i8 0, i64 16, i1 false) #4
  store i32 0, i32* %7, align 8
  store i8* null, i8** %5, align 8
  store i8 1, i8* %8, align 4
  %98 = icmp ugt i64 %36, 4294967295
  br i1 %98, label %99, label %122

99:                                               ; preds = %96
  %100 = and i64 %20, 4294967295
  %101 = and i64 %33, 4294967295
  %102 = mul nuw i64 %101, %100
  %103 = lshr i64 %20, 32
  %104 = mul nuw i64 %101, %103
  %105 = lshr i64 %33, 32
  %106 = mul nuw i64 %105, %100
  %107 = mul nuw i64 %105, %103
  %108 = shl i64 %104, 32
  %109 = add i64 %108, %102
  %110 = icmp uge i64 %109, %102
  %111 = shl i64 %106, 32
  %112 = add i64 %109, %111
  %113 = icmp uge i64 %112, %109
  %114 = lshr i64 %104, 32
  %115 = add nuw i64 %114, %107
  %116 = lshr i64 %106, 32
  %117 = sub nsw i64 0, %116
  %118 = icmp eq i64 %115, %117
  %119 = and i1 %118, %110
  %120 = and i1 %119, %113
  %121 = and i1 %35, %120
  br i1 %121, label %124, label %133

122:                                              ; preds = %96, %38
  %123 = mul i64 %33, %20
  br i1 %35, label %124, label %133

124:                                              ; preds = %99, %122
  %125 = phi i64 [ %112, %99 ], [ %123, %122 ]
  %126 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %3, i64 0, i32 0
  %127 = load i8*, i8** %126, align 8
  %128 = icmp eq i8* %127, null
  br i1 %128, label %133, label %129

129:                                              ; preds = %124
  %130 = add i64 %125, 3
  %131 = and i64 %130, -4
  %132 = tail call i8* @_Z15sk_malloc_flagsmj(i64 %131, i32 2) #4
  store i8* %132, i8** %5, align 8
  br label %133

133:                                              ; preds = %99, %122, %124, %129
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @_ZNK6SkMask7getAddrEii(%struct.SkMask* nocapture readonly, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = sub nsw i32 %2, %7
  %9 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = mul i32 %8, %10
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds i8, i8* %5, i64 %12
  %14 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = sub nsw i32 %1, %15
  %17 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 3
  %18 = load i8, i8* %17, align 4
  %19 = zext i8 %18 to i64
  %20 = getelementptr inbounds [6 x i32], [6 x i32]* @_ZL18gMaskFormatToShift, i64 0, i64 %19
  %21 = load i32, i32* %20, align 4
  %22 = shl i32 %16, %21
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %13, i64 %23
  ret i8* %24
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
