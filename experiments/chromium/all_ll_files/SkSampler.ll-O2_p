; ModuleID = '../../third_party/skia/src/codec/SkSampler.cpp'
source_filename = "../../third_party/skia/src/codec/SkSampler.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp, i32, i32 }
%class.sk_sp = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%struct.SkISize = type { i32, i32 }

@_ZN6SkOpts8memset32E = external local_unnamed_addr global void (i32*, i32, i32)*, align 8
@_ZN6SkOpts8memset16E = external local_unnamed_addr global void (i16*, i16, i32)*, align 8
@_ZN6SkOpts8memset64E = external local_unnamed_addr global void (i64*, i64, i32)*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9SkSampler4FillERK11SkImageInfoPvmN7SkCodec15ZeroInitializedE(%struct.SkImageInfo* nocapture readonly dereferenceable(24), i8*, i64, i32) local_unnamed_addr #0 align 2 {
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %74, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %0, i64 0, i32 1, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %0, i64 0, i32 1, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %0, i64 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 8
  switch i32 %12, label %74 [
    i32 4, label %26
    i32 6, label %26
    i32 2, label %24
    i32 11, label %15
    i32 13, label %13
  ]

13:                                               ; preds = %6
  %14 = icmp sgt i32 %10, 0
  br i1 %14, label %57, label %74

15:                                               ; preds = %6
  %16 = icmp sgt i32 %10, 0
  br i1 %16, label %17, label %74

17:                                               ; preds = %15
  %18 = sext i32 %8 to i64
  %19 = add i32 %10, -1
  %20 = and i32 %10, 7
  %21 = icmp ult i32 %19, 7
  br i1 %21, label %65, label %22

22:                                               ; preds = %17
  %23 = sub i32 %10, %20
  br label %44

24:                                               ; preds = %6
  %25 = icmp sgt i32 %10, 0
  br i1 %25, label %36, label %74

26:                                               ; preds = %6, %6
  %27 = icmp sgt i32 %10, 0
  br i1 %27, label %28, label %74

28:                                               ; preds = %26, %28
  %29 = phi i32 [ %34, %28 ], [ 0, %26 ]
  %30 = phi i8* [ %33, %28 ], [ %1, %26 ]
  %31 = bitcast i8* %30 to i32*
  %32 = load void (i32*, i32, i32)*, void (i32*, i32, i32)** @_ZN6SkOpts8memset32E, align 8
  tail call void %32(i32* %31, i32 0, i32 %8) #2
  %33 = getelementptr inbounds i8, i8* %30, i64 %2
  %34 = add nuw nsw i32 %29, 1
  %35 = icmp eq i32 %34, %10
  br i1 %35, label %74, label %28

36:                                               ; preds = %24, %36
  %37 = phi i32 [ %42, %36 ], [ 0, %24 ]
  %38 = phi i8* [ %41, %36 ], [ %1, %24 ]
  %39 = bitcast i8* %38 to i16*
  %40 = load void (i16*, i16, i32)*, void (i16*, i16, i32)** @_ZN6SkOpts8memset16E, align 8
  tail call void %40(i16* %39, i16 zeroext 0, i32 %8) #2
  %41 = getelementptr inbounds i8, i8* %38, i64 %2
  %42 = add nuw nsw i32 %37, 1
  %43 = icmp eq i32 %42, %10
  br i1 %43, label %74, label %36

44:                                               ; preds = %44, %22
  %45 = phi i8* [ %1, %22 ], [ %54, %44 ]
  %46 = phi i32 [ %23, %22 ], [ %55, %44 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 0, i64 %18, i1 false)
  %47 = getelementptr inbounds i8, i8* %45, i64 %2
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %47, i8 0, i64 %18, i1 false)
  %48 = getelementptr inbounds i8, i8* %47, i64 %2
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 0, i64 %18, i1 false)
  %49 = getelementptr inbounds i8, i8* %48, i64 %2
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %49, i8 0, i64 %18, i1 false)
  %50 = getelementptr inbounds i8, i8* %49, i64 %2
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %50, i8 0, i64 %18, i1 false)
  %51 = getelementptr inbounds i8, i8* %50, i64 %2
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %51, i8 0, i64 %18, i1 false)
  %52 = getelementptr inbounds i8, i8* %51, i64 %2
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %52, i8 0, i64 %18, i1 false)
  %53 = getelementptr inbounds i8, i8* %52, i64 %2
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %53, i8 0, i64 %18, i1 false)
  %54 = getelementptr inbounds i8, i8* %53, i64 %2
  %55 = add i32 %46, -8
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %65, label %44

57:                                               ; preds = %13, %57
  %58 = phi i32 [ %63, %57 ], [ 0, %13 ]
  %59 = phi i8* [ %62, %57 ], [ %1, %13 ]
  %60 = bitcast i8* %59 to i64*
  %61 = load void (i64*, i64, i32)*, void (i64*, i64, i32)** @_ZN6SkOpts8memset64E, align 8
  tail call void %61(i64* %60, i64 0, i32 %8) #2
  %62 = getelementptr inbounds i8, i8* %59, i64 %2
  %63 = add nuw nsw i32 %58, 1
  %64 = icmp eq i32 %63, %10
  br i1 %64, label %74, label %57

65:                                               ; preds = %44, %17
  %66 = phi i8* [ %1, %17 ], [ %54, %44 ]
  %67 = icmp eq i32 %20, 0
  br i1 %67, label %74, label %68

68:                                               ; preds = %65, %68
  %69 = phi i8* [ %71, %68 ], [ %66, %65 ]
  %70 = phi i32 [ %72, %68 ], [ %20, %65 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %69, i8 0, i64 %18, i1 false)
  %71 = getelementptr inbounds i8, i8* %69, i64 %2
  %72 = add i32 %70, -1
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %68, !llvm.loop !2

74:                                               ; preds = %57, %65, %68, %36, %28, %13, %15, %24, %26, %6, %4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
