; ModuleID = '../../third_party/blink/renderer/platform/wtf/text/text_codec_replacement.cc'
source_filename = "../../third_party/blink/renderer/platform/wtf/text/text_codec_replacement.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::TextCodecReplacement" = type <{ %"class.WTF::TextCodecUTF8", i8, [7 x i8] }>
%"class.WTF::TextCodecUTF8" = type { %"class.WTF::TextCodec", i32, [4 x i8] }
%"class.WTF::TextCodec" = type { i32 (...)** }
%"class.WTF::TextEncoding" = type opaque
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }

$_ZN3WTF20TextCodecReplacementD0Ev = comdat any

@_ZTVN3WTF20TextCodecReplacementE = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.WTF::TextCodec"*)* @_ZN3WTF9TextCodecD2Ev to i8*), i8* bitcast (void (%"class.WTF::TextCodecReplacement"*)* @_ZN3WTF20TextCodecReplacementD0Ev to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.WTF::TextCodecReplacement"*, i8*, i32, i32, i1, i8*)* @_ZN3WTF20TextCodecReplacement6DecodeEPKcjNS_13FlushBehaviorEbRb to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.WTF::TextCodecUTF8"*, i16*, i32, i32)* @_ZN3WTF13TextCodecUTF86EncodeEPKDsjNS_19UnencodableHandlingE to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.WTF::TextCodecUTF8"*, i8*, i32, i32)* @_ZN3WTF13TextCodecUTF86EncodeEPKhjNS_19UnencodableHandlingE to i8*), i8* bitcast ({ i32, i64 } (%"class.WTF::TextCodecUTF8"*, i8*, i32, i8*, i64)* @_ZN3WTF13TextCodecUTF810EncodeIntoEPKhjPhm to i8*), i8* bitcast ({ i32, i64 } (%"class.WTF::TextCodecUTF8"*, i16*, i32, i8*, i64)* @_ZN3WTF13TextCodecUTF810EncodeIntoEPKDsjPhm to i8*)] }, align 8
@.str = private unnamed_addr constant [12 x i8] c"replacement\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"csiso2022kr\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"hz-gb-2312\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"iso-2022-cn\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"iso-2022-cn-ext\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"iso-2022-kr\00", align 1
@_ZN3WTF7unicodeL21kReplacementCharacterE = internal constant i16 -3, align 2

@_ZN3WTF20TextCodecReplacementC1Ev = hidden unnamed_addr alias void (%"class.WTF::TextCodecReplacement"*), void (%"class.WTF::TextCodecReplacement"*)* @_ZN3WTF20TextCodecReplacementC2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3WTF20TextCodecReplacementC2Ev(%"class.WTF::TextCodecReplacement"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.WTF::TextCodecReplacement", %"class.WTF::TextCodecReplacement"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = getelementptr inbounds %"class.WTF::TextCodecReplacement", %"class.WTF::TextCodecReplacement"* %0, i64 0, i32 0, i32 1
  store i32 0, i32* %3, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN3WTF20TextCodecReplacementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %4 = getelementptr inbounds %"class.WTF::TextCodecReplacement", %"class.WTF::TextCodecReplacement"* %0, i64 0, i32 1
  store i8 0, i8* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF20TextCodecReplacement21RegisterEncodingNamesEPFvPKcS2_E(void (i8*, i8*)* nocapture) local_unnamed_addr #1 align 2 {
  tail call void %0(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0)) #6
  tail call void %0(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0)) #6
  tail call void %0(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0)) #6
  tail call void %0(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0)) #6
  tail call void %0(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0)) #6
  tail call void %0(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0)) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF20TextCodecReplacement14RegisterCodecsEPFvPKcPFNSt3__110unique_ptrINS_9TextCodecENS3_14default_deleteIS5_EEEERKNS_12TextEncodingEPKvESD_E(void (i8*, %"class.WTF::TextCodec"* (%"class.WTF::TextEncoding"*, i8*)*, i8*)* nocapture) local_unnamed_addr #1 align 2 {
  tail call void %0(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), %"class.WTF::TextCodec"* (%"class.WTF::TextEncoding"*, i8*)* nonnull @_ZN3WTFL34NewStreamingTextDecoderReplacementERKNS_12TextEncodingEPKv, i8* null) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal %"class.WTF::TextCodec"* @_ZN3WTFL34NewStreamingTextDecoderReplacementERKNS_12TextEncodingEPKv(%"class.WTF::TextEncoding"* nocapture readnone, i8* nocapture readnone) #1 {
  %3 = tail call noalias i8* @malloc(i64 24) #6
  %4 = bitcast i8* %3 to i32 (...)***
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  %6 = bitcast i8* %5 to i32*
  store i32 0, i32* %6, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN3WTF20TextCodecReplacementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %7 = getelementptr inbounds i8, i8* %3, i64 16
  store i8 0, i8* %7, align 8
  %8 = bitcast i8* %3 to %"class.WTF::TextCodec"*
  ret %"class.WTF::TextCodec"* %8
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF20TextCodecReplacement6DecodeEPKcjNS_13FlushBehaviorEbRb(%"class.WTF::TextCodecReplacement"* nocapture, i8* nocapture readnone, i32, i32, i1 zeroext, i8* nocapture dereferenceable(1)) unnamed_addr #1 align 2 {
  %7 = alloca %"class.WTF::String", align 8
  %8 = icmp eq i32 %2, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %6
  %10 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %10, align 8
  br label %20

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.WTF::TextCodecReplacement", %"class.WTF::TextCodecReplacement"* %0, i64 0, i32 1
  %13 = load i8, i8* %12, align 8, !range !2
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %11
  store i8 1, i8* %12, align 8
  store i8 1, i8* %5, align 1
  call void @_ZN3WTF6StringC1EPKDsj(%"class.WTF::String"* nonnull %7, i16* nonnull @_ZN3WTF7unicodeL21kReplacementCharacterE, i32 1) #6
  %16 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  br label %20

18:                                               ; preds = %11
  %19 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %19, align 8
  br label %20

20:                                               ; preds = %18, %15, %9
  %21 = phi %"class.WTF::StringImpl"* [ null, %18 ], [ %17, %15 ], [ null, %9 ]
  ret %"class.WTF::StringImpl"* %21
}

declare void @_ZN3WTF6StringC1EPKDsj(%"class.WTF::String"*, i16*, i32) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3WTF9TextCodecD2Ev(%"class.WTF::TextCodec"*) unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF20TextCodecReplacementD0Ev(%"class.WTF::TextCodecReplacement"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.WTF::TextCodecReplacement", %"class.WTF::TextCodecReplacement"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN3WTF9TextCodecD2Ev(%"class.WTF::TextCodec"* %2) #6
  %3 = bitcast %"class.WTF::TextCodecReplacement"* %0 to i8*
  tail call void @free(i8* %3) #6
  ret void
}

declare void @_ZN3WTF13TextCodecUTF86EncodeEPKDsjNS_19UnencodableHandlingE(%"class.std::__1::basic_string"* sret, %"class.WTF::TextCodecUTF8"*, i16*, i32, i32) unnamed_addr #2

declare void @_ZN3WTF13TextCodecUTF86EncodeEPKhjNS_19UnencodableHandlingE(%"class.std::__1::basic_string"* sret, %"class.WTF::TextCodecUTF8"*, i8*, i32, i32) unnamed_addr #2

declare { i32, i64 } @_ZN3WTF13TextCodecUTF810EncodeIntoEPKhjPhm(%"class.WTF::TextCodecUTF8"*, i8*, i32, i8*, i64) unnamed_addr #2

declare { i32, i64 } @_ZN3WTF13TextCodecUTF810EncodeIntoEPKDsjPhm(%"class.WTF::TextCodecUTF8"*, i16*, i32, i8*, i64) unnamed_addr #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
