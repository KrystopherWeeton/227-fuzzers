; ModuleID = '../../third_party/opus/src/silk/x86/VAD_sse4_1.c'
source_filename = "../../third_party/opus/src/silk/x86/VAD_sse4_1.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.silk_encoder_state = type { [2 x i32], i32, i32, %struct.silk_LP_state, %struct.silk_VAD_state, %struct.silk_nsq_state, [16 x i16], i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.silk_NLSF_CB_struct*, [4 x i32], i32, i32, [3 x i8], i8, [3 x i32], %struct.SideInfoIndices, [320 x i8], i32, [322 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16, %struct._silk_resampler_state_struct, i32, i32, i32, i32, i32, i32, [3 x %struct.SideInfoIndices], [3 x [320 x i8]] }
%struct.silk_LP_state = type { [2 x i32], i32, i32, i32 }
%struct.silk_VAD_state = type { [2 x i32], [2 x i32], [2 x i32], [4 x i32], [4 x i32], i16, [4 x i32], [4 x i32], [4 x i32], i32 }
%struct.silk_nsq_state = type { [640 x i16], [640 x i32], [96 x i32], [24 x i32], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.silk_NLSF_CB_struct = type { i16, i16, i16, i16, i8*, i16*, i8*, i8*, i8*, i8*, i8*, i16* }
%struct.SideInfoIndices = type { [4 x i8], [4 x i8], [17 x i8], i16, i8, i8, i8, i8, i8, i8, i8 }
%struct._silk_resampler_state_struct = type { [6 x i32], %union.anon, [48 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16* }
%union.anon = type { [36 x i32] }

@.str = private unnamed_addr constant [59 x i8] c"assertion failed: MAX_FRAME_LENGTH >= psEncC->frame_length\00", align 1
@.str.1 = private unnamed_addr constant [49 x i8] c"../../third_party/opus/src/silk/x86/VAD_sse4_1.c\00", align 1
@.str.3 = private unnamed_addr constant [85 x i8] c"assertion failed: psEncC->frame_length == 8 * silk_RSHIFT( psEncC->frame_length, 3 )\00", align 1
@tiltWeights = internal unnamed_addr constant [4 x i32] [i32 30000, i32 6000, i32 -12000, i32 -12000], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @silk_VAD_GetSA_Q8_sse4_1(%struct.silk_encoder_state*, i16*) local_unnamed_addr #0 {
  %3 = alloca [4 x i32], align 16
  %4 = bitcast [4 x i32]* %3 to i8*
  %5 = alloca [4 x i32], align 16
  %6 = alloca [4 x i32], align 16
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #6
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 0
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %9 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 2
  %10 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %11 = bitcast [4 x i32]* %5 to i8*
  %12 = bitcast [4 x i32]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #6
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 0
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 1
  %15 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 2
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 3
  %17 = bitcast [4 x i32]* %6 to i8*
  %18 = bitcast [4 x i32]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #6
  %19 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 0
  %20 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %21 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 2
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %23 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4
  %24 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 21
  %25 = bitcast [4 x i32]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 16, i1 false)
  %26 = load i32, i32* %24, align 8
  %27 = icmp slt i32 %26, 321
  br i1 %27, label %29, label %28

28:                                               ; preds = %2
  tail call void @celt_fatal(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.1, i64 0, i64 0), i32 68) #7
  unreachable

29:                                               ; preds = %2
  %30 = ashr i32 %26, 3
  %31 = and i32 %26, -8
  %32 = icmp eq i32 %26, %31
  br i1 %32, label %34, label %33

33:                                               ; preds = %29
  tail call void @celt_fatal(i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.1, i64 0, i64 0), i32 70) #7
  unreachable

34:                                               ; preds = %29
  %35 = ashr i32 %26, 1
  %36 = ashr i32 %26, 2
  store i32 0, i32* %19, align 16
  %37 = add nsw i32 %30, %36
  store i32 %37, i32* %20, align 4
  %38 = add nsw i32 %37, %30
  store i32 %38, i32* %21, align 8
  %39 = add nsw i32 %38, %36
  store i32 %39, i32* %22, align 4
  %40 = add nsw i32 %39, %35
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 1
  %43 = alloca i16, i64 %41, align 16
  %44 = bitcast i16* %43 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %44, i8 -86, i64 %42, i1 false)
  %45 = getelementptr inbounds %struct.silk_VAD_state, %struct.silk_VAD_state* %23, i64 0, i32 0, i64 0
  %46 = sext i32 %39 to i64
  %47 = getelementptr inbounds i16, i16* %43, i64 %46
  call void @silk_ana_filt_bank_1(i16* %1, i32* %45, i16* nonnull %43, i16* %47, i32 %26) #6
  %48 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 1, i64 0
  %49 = sext i32 %38 to i64
  %50 = getelementptr inbounds i16, i16* %43, i64 %49
  call void @silk_ana_filt_bank_1(i16* nonnull %43, i32* %48, i16* nonnull %43, i16* %50, i32 %35) #6
  %51 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 2, i64 0
  %52 = sext i32 %37 to i64
  %53 = getelementptr inbounds i16, i16* %43, i64 %52
  call void @silk_ana_filt_bank_1(i16* nonnull %43, i32* %51, i16* nonnull %43, i16* %53, i32 %36) #6
  %54 = add nsw i32 %30, -1
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i16, i16* %43, i64 %55
  %57 = load i16, i16* %56, align 2
  %58 = ashr i16 %57, 1
  store i16 %58, i16* %56, align 2
  %59 = icmp sgt i32 %54, 0
  br i1 %59, label %60, label %92

60:                                               ; preds = %34
  %61 = add nsw i32 %30, -1
  %62 = sext i32 %61 to i64
  %63 = and i64 %62, 1
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %72, label %65

65:                                               ; preds = %60
  %66 = add nsw i64 %62, -1
  %67 = getelementptr inbounds i16, i16* %43, i64 %66
  %68 = load i16, i16* %67, align 2
  %69 = ashr i16 %68, 1
  store i16 %69, i16* %67, align 2
  %70 = getelementptr inbounds i16, i16* %43, i64 %62
  %71 = sub nsw i16 %58, %69
  store i16 %71, i16* %70, align 2
  br label %72

72:                                               ; preds = %60, %65
  %73 = phi i16 [ %58, %60 ], [ %69, %65 ]
  %74 = phi i64 [ %62, %60 ], [ %66, %65 ]
  %75 = icmp eq i32 %61, 1
  br i1 %75, label %92, label %76

76:                                               ; preds = %72, %76
  %77 = phi i16 [ %88, %76 ], [ %73, %72 ]
  %78 = phi i64 [ %85, %76 ], [ %74, %72 ]
  %79 = add nsw i64 %78, -1
  %80 = getelementptr inbounds i16, i16* %43, i64 %79
  %81 = load i16, i16* %80, align 2
  %82 = ashr i16 %81, 1
  store i16 %82, i16* %80, align 2
  %83 = getelementptr inbounds i16, i16* %43, i64 %78
  %84 = sub nsw i16 %77, %82
  store i16 %84, i16* %83, align 2
  %85 = add nsw i64 %78, -2
  %86 = getelementptr inbounds i16, i16* %43, i64 %85
  %87 = load i16, i16* %86, align 2
  %88 = ashr i16 %87, 1
  store i16 %88, i16* %86, align 2
  %89 = getelementptr inbounds i16, i16* %43, i64 %79
  %90 = sub nsw i16 %82, %88
  store i16 %90, i16* %89, align 2
  %91 = icmp sgt i64 %85, 0
  br i1 %91, label %76, label %92

92:                                               ; preds = %72, %76, %34
  %93 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 5
  %94 = load i16, i16* %93, align 4
  %95 = load i16, i16* %43, align 16
  %96 = sub i16 %95, %94
  store i16 %96, i16* %43, align 16
  store i16 %58, i16* %93, align 4
  br label %97

97:                                               ; preds = %306, %92
  %98 = phi i64 [ 0, %92 ], [ %307, %306 ]
  %99 = load i32, i32* %24, align 8
  %100 = icmp ugt i64 %98, 1
  %101 = trunc i64 %98 to i32
  %102 = sub i32 4, %101
  %103 = select i1 %100, i32 %102, i32 3
  %104 = ashr i32 %99, %103
  %105 = ashr i32 %104, 2
  %106 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 3, i64 %98
  %107 = load i32, i32* %106, align 4
  %108 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 %98
  store i32 %107, i32* %108, align 4
  %109 = add nsw i32 %105, -7
  %110 = icmp sgt i32 %109, 0
  %111 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %98
  %112 = sext i32 %109 to i64
  %113 = and i32 %105, -8
  %114 = add nsw i64 %112, 7
  %115 = sext i32 %105 to i64
  %116 = add nsw i64 %112, -1
  %117 = lshr i64 %116, 3
  %118 = add nuw nsw i64 %117, 1
  %119 = add nsw i64 %112, 1
  %120 = add nsw i64 %112, 6
  %121 = and i64 %118, 1
  %122 = icmp eq i64 %117, 0
  %123 = sub nuw nsw i64 %118, %121
  %124 = icmp eq i64 %121, 0
  br label %125

125:                                              ; preds = %293, %97
  %126 = phi i64 [ 0, %97 ], [ %303, %293 ]
  %127 = phi i32 [ %107, %97 ], [ %302, %293 ]
  %128 = phi i32 [ 0, %97 ], [ %304, %293 ]
  %129 = mul i32 %105, %128
  br i1 %110, label %130, label %178

130:                                              ; preds = %125
  %131 = load i32, i32* %111, align 4
  br i1 %122, label %160, label %132

132:                                              ; preds = %130, %132
  %133 = phi i64 [ %157, %132 ], [ 0, %130 ]
  %134 = phi <4 x i32> [ %156, %132 ], [ zeroinitializer, %130 ]
  %135 = phi i64 [ %158, %132 ], [ %123, %130 ]
  %136 = add nsw i64 %133, %126
  %137 = trunc i64 %136 to i32
  %138 = add i32 %131, %137
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i16, i16* %43, i64 %139
  %141 = bitcast i16* %140 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 2
  %143 = ashr <8 x i16> %142, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %144 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %143, <8 x i16> %143) #6
  %145 = add <4 x i32> %144, %134
  %146 = or i64 %133, 8
  %147 = add nsw i64 %146, %126
  %148 = trunc i64 %147 to i32
  %149 = add i32 %131, %148
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds i16, i16* %43, i64 %150
  %152 = bitcast i16* %151 to <8 x i16>*
  %153 = load <8 x i16>, <8 x i16>* %152, align 2
  %154 = ashr <8 x i16> %153, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %155 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %154, <8 x i16> %154) #6
  %156 = add <4 x i32> %155, %145
  %157 = add nuw nsw i64 %133, 16
  %158 = add i64 %135, -2
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %160, label %132

160:                                              ; preds = %132, %130
  %161 = phi <4 x i32> [ undef, %130 ], [ %156, %132 ]
  %162 = phi i64 [ 0, %130 ], [ %157, %132 ]
  %163 = phi <4 x i32> [ zeroinitializer, %130 ], [ %156, %132 ]
  br i1 %124, label %175, label %164

164:                                              ; preds = %160
  %165 = add nsw i64 %162, %126
  %166 = trunc i64 %165 to i32
  %167 = add i32 %131, %166
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds i16, i16* %43, i64 %168
  %170 = bitcast i16* %169 to <8 x i16>*
  %171 = load <8 x i16>, <8 x i16>* %170, align 2
  %172 = ashr <8 x i16> %171, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %173 = call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %172, <8 x i16> %172) #6
  %174 = add <4 x i32> %173, %163
  br label %175

175:                                              ; preds = %160, %164
  %176 = phi <4 x i32> [ %161, %160 ], [ %174, %164 ]
  %177 = bitcast <4 x i32> %176 to <2 x i64>
  br label %178

178:                                              ; preds = %175, %125
  %179 = phi i32 [ %113, %175 ], [ 0, %125 ]
  %180 = phi <4 x i32> [ %176, %175 ], [ zeroinitializer, %125 ]
  %181 = phi <2 x i64> [ %177, %175 ], [ zeroinitializer, %125 ]
  %182 = shufflevector <2 x i64> %181, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %183 = bitcast <2 x i64> %182 to <4 x i32>
  %184 = add <4 x i32> %180, %183
  %185 = bitcast <4 x i32> %184 to <8 x i16>
  %186 = shufflevector <8 x i16> %185, <8 x i16> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %187 = bitcast <8 x i16> %186 to <4 x i32>
  %188 = add <4 x i32> %184, %187
  %189 = extractelement <4 x i32> %188, i32 0
  %190 = icmp slt i32 %179, %105
  br i1 %190, label %191, label %293

191:                                              ; preds = %178
  %192 = load i32, i32* %111, align 4
  %193 = sext i32 %179 to i64
  %194 = trunc i64 %126 to i32
  %195 = sub nsw i64 %115, %193
  %196 = icmp ult i64 %195, 8
  br i1 %196, label %244, label %197

197:                                              ; preds = %191
  %198 = xor i64 %193, -1
  %199 = add nsw i64 %198, %115
  %200 = add i32 %179, %192
  %201 = add i32 %200, %129
  %202 = trunc i64 %199 to i32
  %203 = add i32 %201, %202
  %204 = icmp slt i32 %203, %201
  %205 = icmp ugt i64 %199, 4294967295
  %206 = or i1 %204, %205
  br i1 %206, label %244, label %207

207:                                              ; preds = %197
  %208 = and i64 %195, -8
  %209 = add nsw i64 %208, %193
  %210 = shufflevector <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>, <4 x i32> %188, <4 x i32> <i32 4, i32 0, i32 0, i32 0>
  br label %211

211:                                              ; preds = %211, %207
  %212 = phi i64 [ 0, %207 ], [ %234, %211 ]
  %213 = phi <4 x i32> [ %210, %207 ], [ %232, %211 ]
  %214 = phi <4 x i32> [ zeroinitializer, %207 ], [ %233, %211 ]
  %215 = trunc i64 %212 to i32
  %216 = add i32 %179, %215
  %217 = add i32 %216, %194
  %218 = add i32 %217, %192
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds i16, i16* %43, i64 %219
  %221 = bitcast i16* %220 to <4 x i16>*
  %222 = load <4 x i16>, <4 x i16>* %221, align 2
  %223 = getelementptr inbounds i16, i16* %220, i64 4
  %224 = bitcast i16* %223 to <4 x i16>*
  %225 = load <4 x i16>, <4 x i16>* %224, align 2
  %226 = ashr <4 x i16> %222, <i16 3, i16 3, i16 3, i16 3>
  %227 = ashr <4 x i16> %225, <i16 3, i16 3, i16 3, i16 3>
  %228 = sext <4 x i16> %226 to <4 x i32>
  %229 = sext <4 x i16> %227 to <4 x i32>
  %230 = mul nsw <4 x i32> %228, %228
  %231 = mul nsw <4 x i32> %229, %229
  %232 = add nsw <4 x i32> %230, %213
  %233 = add nuw nsw <4 x i32> %231, %214
  %234 = add i64 %212, 8
  %235 = icmp eq i64 %234, %208
  br i1 %235, label %236, label %211, !llvm.loop !2

236:                                              ; preds = %211
  %237 = add <4 x i32> %233, %232
  %238 = shufflevector <4 x i32> %237, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %239 = add <4 x i32> %237, %238
  %240 = shufflevector <4 x i32> %239, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %241 = add <4 x i32> %239, %240
  %242 = extractelement <4 x i32> %241, i32 0
  %243 = icmp eq i64 %195, %208
  br i1 %243, label %293, label %244

244:                                              ; preds = %236, %197, %191
  %245 = phi i64 [ %193, %197 ], [ %193, %191 ], [ %209, %236 ]
  %246 = phi i32 [ %189, %197 ], [ %189, %191 ], [ %242, %236 ]
  %247 = sub nsw i64 %119, %245
  %248 = and i64 %247, 1
  %249 = icmp eq i64 %248, 0
  br i1 %249, label %262, label %250

250:                                              ; preds = %244
  %251 = trunc i64 %245 to i32
  %252 = add i32 %251, %194
  %253 = add i32 %252, %192
  %254 = sext i32 %253 to i64
  %255 = getelementptr inbounds i16, i16* %43, i64 %254
  %256 = load i16, i16* %255, align 2
  %257 = ashr i16 %256, 3
  %258 = sext i16 %257 to i32
  %259 = mul nsw i32 %258, %258
  %260 = add nsw i32 %259, %246
  %261 = add nsw i64 %245, 1
  br label %262

262:                                              ; preds = %250, %244
  %263 = phi i32 [ %260, %250 ], [ undef, %244 ]
  %264 = phi i64 [ %261, %250 ], [ %245, %244 ]
  %265 = phi i32 [ %260, %250 ], [ %246, %244 ]
  %266 = icmp eq i64 %120, %245
  br i1 %266, label %293, label %267

267:                                              ; preds = %262, %267
  %268 = phi i64 [ %291, %267 ], [ %264, %262 ]
  %269 = phi i32 [ %290, %267 ], [ %265, %262 ]
  %270 = trunc i64 %268 to i32
  %271 = add i32 %270, %194
  %272 = add i32 %271, %192
  %273 = sext i32 %272 to i64
  %274 = getelementptr inbounds i16, i16* %43, i64 %273
  %275 = load i16, i16* %274, align 2
  %276 = ashr i16 %275, 3
  %277 = sext i16 %276 to i32
  %278 = mul nsw i32 %277, %277
  %279 = add nsw i32 %278, %269
  %280 = trunc i64 %268 to i32
  %281 = add i32 %280, 1
  %282 = add i32 %281, %194
  %283 = add i32 %282, %192
  %284 = sext i32 %283 to i64
  %285 = getelementptr inbounds i16, i16* %43, i64 %284
  %286 = load i16, i16* %285, align 2
  %287 = ashr i16 %286, 3
  %288 = sext i16 %287 to i32
  %289 = mul nsw i32 %288, %288
  %290 = add nsw i32 %289, %279
  %291 = add nsw i64 %268, 2
  %292 = icmp eq i64 %291, %115
  br i1 %292, label %293, label %267, !llvm.loop !4

293:                                              ; preds = %262, %267, %236, %178
  %294 = phi i32 [ %189, %178 ], [ %242, %236 ], [ %263, %262 ], [ %290, %267 ]
  %295 = icmp ult i32 %128, 3
  %296 = ashr i32 %294, 1
  %297 = add i32 %127, %296
  %298 = add i32 %127, %294
  %299 = select i1 %295, i32 %298, i32 %297
  %300 = select i1 %295, i32 %298, i32 %297
  %301 = icmp ult i32 %299, 2147483647
  %302 = select i1 %301, i32 %300, i32 2147483647
  %303 = add nsw i64 %126, %114
  %304 = add nuw nsw i32 %128, 1
  %305 = icmp eq i32 %304, 4
  br i1 %305, label %306, label %125

306:                                              ; preds = %293
  store i32 %302, i32* %108, align 4
  store i32 %294, i32* %106, align 4
  %307 = add nuw nsw i64 %98, 1
  %308 = icmp eq i64 %307, 4
  br i1 %308, label %309, label %97

309:                                              ; preds = %306
  call void @silk_VAD_GetNoiseLevels(i32* nonnull %7, %struct.silk_VAD_state* %23) #6
  br label %310

310:                                              ; preds = %391, %309
  %311 = phi i64 [ 0, %309 ], [ %394, %391 ]
  %312 = phi i32 [ 0, %309 ], [ %393, %391 ]
  %313 = phi i32 [ 0, %309 ], [ %392, %391 ]
  %314 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 %311
  %315 = load i32, i32* %314, align 4
  %316 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 6, i64 %311
  %317 = load i32, i32* %316, align 4
  %318 = sub nsw i32 %315, %317
  %319 = icmp sgt i32 %318, 0
  br i1 %319, label %320, label %389

320:                                              ; preds = %310
  %321 = icmp ult i32 %315, 8388608
  %322 = ashr i32 %317, 8
  %323 = shl i32 %315, 8
  %324 = select i1 %321, i32 %317, i32 %322
  %325 = select i1 %321, i32 %323, i32 %315
  %326 = add nsw i32 %324, 1
  %327 = sdiv i32 %325, %326
  %328 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %311
  store i32 %327, i32* %328, align 4
  %329 = call i32 @silk_lin2log(i32 %327) #6
  %330 = add nsw i32 %329, -1024
  %331 = shl i32 %330, 16
  %332 = ashr exact i32 %331, 16
  %333 = mul nsw i32 %332, %332
  %334 = add nsw i32 %333, %312
  %335 = icmp slt i32 %318, 1048576
  br i1 %335, label %336, label %377

336:                                              ; preds = %320
  %337 = zext i32 %330 to i64
  %338 = call i32 @llvm.ctlz.i32(i32 %318, i1 false) #6, !range !5
  %339 = sub nsw i32 24, %338
  %340 = add nsw i32 %338, -24
  %341 = icmp eq i32 %339, 0
  br i1 %341, label %354, label %342

342:                                              ; preds = %336
  %343 = icmp ult i32 %318, 128
  br i1 %343, label %344, label %349

344:                                              ; preds = %342
  %345 = shl i32 %318, %340
  %346 = sub nuw nsw i32 56, %338
  %347 = lshr i32 %318, %346
  %348 = or i32 %347, %345
  br label %354

349:                                              ; preds = %342
  %350 = add nuw nsw i32 %338, 8
  %351 = shl i32 %318, %350
  %352 = lshr i32 %318, %339
  %353 = or i32 %351, %352
  br label %354

354:                                              ; preds = %336, %344, %349
  %355 = phi i32 [ %348, %344 ], [ %353, %349 ], [ %318, %336 ]
  %356 = and i32 %355, 127
  %357 = and i32 %338, 1
  %358 = icmp eq i32 %357, 0
  %359 = select i1 %358, i32 46214, i32 32768
  %360 = lshr i32 %338, 1
  %361 = lshr i32 %359, %360
  %362 = sext i32 %361 to i64
  %363 = zext i32 %356 to i64
  %364 = mul nuw nsw i64 %363, 59954170039369728
  %365 = lshr exact i64 %364, 48
  %366 = mul nsw i64 %365, %362
  %367 = lshr i64 %366, 16
  %368 = trunc i64 %367 to i32
  %369 = add i32 %361, %368
  %370 = shl i32 %369, 6
  %371 = sext i32 %370 to i64
  %372 = shl i64 %337, 48
  %373 = ashr exact i64 %372, 48
  %374 = mul nsw i64 %373, %371
  %375 = lshr i64 %374, 16
  %376 = trunc i64 %375 to i32
  br label %377

377:                                              ; preds = %354, %320
  %378 = phi i32 [ %376, %354 ], [ %330, %320 ]
  %379 = getelementptr inbounds [4 x i32], [4 x i32]* @tiltWeights, i64 0, i64 %311
  %380 = load i32, i32* %379, align 4
  %381 = sext i32 %380 to i64
  %382 = zext i32 %378 to i64
  %383 = shl i64 %382, 48
  %384 = ashr exact i64 %383, 48
  %385 = mul nsw i64 %384, %381
  %386 = lshr i64 %385, 16
  %387 = trunc i64 %386 to i32
  %388 = add i32 %313, %387
  br label %391

389:                                              ; preds = %310
  %390 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %311
  store i32 256, i32* %390, align 4
  br label %391

391:                                              ; preds = %377, %389
  %392 = phi i32 [ %388, %377 ], [ %313, %389 ]
  %393 = phi i32 [ %334, %377 ], [ %312, %389 ]
  %394 = add nuw nsw i64 %311, 1
  %395 = icmp eq i64 %394, 4
  br i1 %395, label %396, label %310

396:                                              ; preds = %391
  %397 = sdiv i32 %393, 4
  %398 = icmp slt i32 %393, 4
  br i1 %398, label %439, label %399

399:                                              ; preds = %396
  %400 = call i32 @llvm.ctlz.i32(i32 %397, i1 false) #6, !range !5
  %401 = sub nsw i32 24, %400
  %402 = add nsw i32 %400, -24
  %403 = icmp eq i32 %401, 0
  br i1 %403, label %416, label %404

404:                                              ; preds = %399
  %405 = icmp ult i32 %397, 128
  br i1 %405, label %406, label %411

406:                                              ; preds = %404
  %407 = shl i32 %397, %402
  %408 = sub nuw nsw i32 56, %400
  %409 = lshr i32 %397, %408
  %410 = or i32 %409, %407
  br label %416

411:                                              ; preds = %404
  %412 = add nuw nsw i32 %400, 8
  %413 = shl i32 %397, %412
  %414 = lshr i32 %397, %401
  %415 = or i32 %413, %414
  br label %416

416:                                              ; preds = %411, %406, %399
  %417 = phi i32 [ %410, %406 ], [ %415, %411 ], [ %397, %399 ]
  %418 = and i32 %417, 127
  %419 = and i32 %400, 1
  %420 = icmp eq i32 %419, 0
  %421 = select i1 %420, i32 46214, i32 32768
  %422 = lshr i32 %400, 1
  %423 = lshr i32 %421, %422
  %424 = sext i32 %423 to i64
  %425 = zext i32 %418 to i64
  %426 = mul nuw nsw i64 %425, 59954170039369728
  %427 = lshr exact i64 %426, 48
  %428 = mul nsw i64 %427, %424
  %429 = lshr i64 %428, 16
  %430 = trunc i64 %429 to i32
  %431 = add i32 %423, %430
  %432 = zext i32 %431 to i64
  %433 = mul i64 %432, 844424930131968
  %434 = ashr exact i64 %433, 48
  %435 = mul nsw i64 %434, 45000
  %436 = ashr i64 %435, 16
  %437 = trunc i64 %436 to i32
  %438 = add nsw i32 %437, -128
  br label %439

439:                                              ; preds = %396, %416
  %440 = phi i32 [ %438, %416 ], [ -128, %396 ]
  %441 = call i32 @silk_sigm_Q15(i32 %440) #6
  %442 = call i32 @silk_sigm_Q15(i32 %392) #6
  %443 = shl i32 %442, 1
  %444 = add i32 %443, -32768
  %445 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 50
  store i32 %444, i32* %445, align 8
  %446 = load i32, i32* %7, align 16
  %447 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 6, i64 0
  %448 = load i32, i32* %447, align 4
  %449 = sub nsw i32 %446, %448
  %450 = ashr i32 %449, 4
  %451 = load i32, i32* %8, align 4
  %452 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 6, i64 1
  %453 = load i32, i32* %452, align 4
  %454 = sub nsw i32 %451, %453
  %455 = ashr i32 %454, 4
  %456 = shl nsw i32 %455, 1
  %457 = add nsw i32 %456, %450
  %458 = load i32, i32* %9, align 8
  %459 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 6, i64 2
  %460 = load i32, i32* %459, align 4
  %461 = sub nsw i32 %458, %460
  %462 = ashr i32 %461, 4
  %463 = mul nsw i32 %462, 3
  %464 = add nsw i32 %463, %457
  %465 = load i32, i32* %10, align 4
  %466 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 6, i64 3
  %467 = load i32, i32* %466, align 4
  %468 = sub nsw i32 %465, %467
  %469 = ashr i32 %468, 4
  %470 = shl nsw i32 %469, 2
  %471 = add nsw i32 %470, %464
  %472 = icmp slt i32 %471, 1
  br i1 %472, label %473, label %475

473:                                              ; preds = %439
  %474 = ashr i32 %441, 1
  br label %517

475:                                              ; preds = %439
  %476 = icmp slt i32 %471, 32768
  br i1 %476, label %477, label %517

477:                                              ; preds = %475
  %478 = load i32, i32* %24, align 8
  %479 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 19
  %480 = load i32, i32* %479, align 8
  %481 = mul nsw i32 %480, 10
  %482 = icmp eq i32 %478, %481
  %483 = select i1 %482, i32 16, i32 15
  %484 = shl i32 %471, %483
  %485 = call i32 @llvm.ctlz.i32(i32 %484, i1 false) #6, !range !5
  %486 = sub nsw i32 24, %485
  %487 = icmp eq i32 %486, 0
  br i1 %487, label %493, label %488

488:                                              ; preds = %477
  %489 = add nuw nsw i32 %485, 8
  %490 = shl i32 %484, %489
  %491 = lshr i32 %484, %486
  %492 = or i32 %490, %491
  br label %493

493:                                              ; preds = %477, %488
  %494 = phi i32 [ %492, %488 ], [ %484, %477 ]
  %495 = and i32 %494, 127
  %496 = and i32 %485, 1
  %497 = icmp eq i32 %496, 0
  %498 = select i1 %497, i32 46214, i32 32768
  %499 = lshr i32 %485, 1
  %500 = lshr i32 %498, %499
  %501 = sext i32 %500 to i64
  %502 = zext i32 %495 to i64
  %503 = mul nuw nsw i64 %502, 59954170039369728
  %504 = lshr exact i64 %503, 48
  %505 = mul nsw i64 %504, %501
  %506 = lshr i64 %505, 16
  %507 = trunc i64 %506 to i32
  %508 = add nuw nsw i32 %500, 32768
  %509 = add nuw nsw i32 %508, %507
  %510 = sext i32 %509 to i64
  %511 = zext i32 %441 to i64
  %512 = shl i64 %511, 48
  %513 = ashr exact i64 %512, 48
  %514 = mul nsw i64 %513, %510
  %515 = lshr i64 %514, 16
  %516 = trunc i64 %515 to i32
  br label %517

517:                                              ; preds = %475, %493, %473
  %518 = phi i32 [ %474, %473 ], [ %516, %493 ], [ %441, %475 ]
  %519 = ashr i32 %518, 7
  %520 = icmp slt i32 %519, 255
  %521 = select i1 %520, i32 %519, i32 255
  %522 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 7
  store i32 %521, i32* %522, align 4
  %523 = zext i32 %518 to i64
  %524 = shl i64 %523, 48
  %525 = ashr exact i64 %524, 48
  %526 = shl nuw i64 %523, 32
  %527 = mul i64 %526, %525
  %528 = ashr i64 %527, 52
  %529 = trunc i64 %528 to i32
  %530 = load i32, i32* %24, align 8
  %531 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 19
  %532 = load i32, i32* %531, align 8
  %533 = mul nsw i32 %532, 10
  %534 = icmp eq i32 %530, %533
  %535 = zext i1 %534 to i32
  %536 = ashr i32 %529, %535
  %537 = zext i32 %536 to i64
  %538 = shl i64 %537, 48
  %539 = ashr exact i64 %538, 48
  %540 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 4, i64 0
  %541 = load i32, i32* %540, align 4
  %542 = load i32, i32* %13, align 16
  %543 = sub nsw i32 %542, %541
  %544 = sext i32 %543 to i64
  %545 = mul nsw i64 %539, %544
  %546 = lshr i64 %545, 16
  %547 = trunc i64 %546 to i32
  %548 = add i32 %541, %547
  store i32 %548, i32* %540, align 4
  %549 = call i32 @silk_lin2log(i32 %548) #6
  %550 = mul i32 %549, 3
  %551 = add i32 %550, -5120
  %552 = ashr i32 %551, 4
  %553 = call i32 @silk_sigm_Q15(i32 %552) #6
  %554 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 49, i64 0
  store i32 %553, i32* %554, align 4
  %555 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 4, i64 1
  %556 = load i32, i32* %555, align 4
  %557 = load i32, i32* %14, align 4
  %558 = sub nsw i32 %557, %556
  %559 = sext i32 %558 to i64
  %560 = mul nsw i64 %539, %559
  %561 = lshr i64 %560, 16
  %562 = trunc i64 %561 to i32
  %563 = add i32 %556, %562
  store i32 %563, i32* %555, align 4
  %564 = call i32 @silk_lin2log(i32 %563) #6
  %565 = mul i32 %564, 3
  %566 = add i32 %565, -5120
  %567 = ashr i32 %566, 4
  %568 = call i32 @silk_sigm_Q15(i32 %567) #6
  %569 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 49, i64 1
  store i32 %568, i32* %569, align 4
  %570 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 4, i64 2
  %571 = load i32, i32* %570, align 4
  %572 = load i32, i32* %15, align 8
  %573 = sub nsw i32 %572, %571
  %574 = sext i32 %573 to i64
  %575 = mul nsw i64 %539, %574
  %576 = lshr i64 %575, 16
  %577 = trunc i64 %576 to i32
  %578 = add i32 %571, %577
  store i32 %578, i32* %570, align 4
  %579 = call i32 @silk_lin2log(i32 %578) #6
  %580 = mul i32 %579, 3
  %581 = add i32 %580, -5120
  %582 = ashr i32 %581, 4
  %583 = call i32 @silk_sigm_Q15(i32 %582) #6
  %584 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 49, i64 2
  store i32 %583, i32* %584, align 4
  %585 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 4, i64 3
  %586 = load i32, i32* %585, align 4
  %587 = load i32, i32* %16, align 4
  %588 = sub nsw i32 %587, %586
  %589 = sext i32 %588 to i64
  %590 = mul nsw i64 %539, %589
  %591 = lshr i64 %590, 16
  %592 = trunc i64 %591 to i32
  %593 = add i32 %586, %592
  store i32 %593, i32* %585, align 4
  %594 = call i32 @silk_lin2log(i32 %593) #6
  %595 = mul i32 %594, 3
  %596 = add i32 %595, -5120
  %597 = ashr i32 %596, 4
  %598 = call i32 @silk_sigm_Q15(i32 %597) #6
  %599 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 49, i64 3
  store i32 %598, i32* %599, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #6
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @silk_ana_filt_bank_1(i16*, i32*, i16*, i16*, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @silk_VAD_GetNoiseLevels(i32*, %struct.silk_VAD_state*) local_unnamed_addr #3

declare i32 @silk_lin2log(i32) local_unnamed_addr #3

declare i32 @silk_sigm_Q15(i32) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #4

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
!5 = !{i32 0, i32 33}
