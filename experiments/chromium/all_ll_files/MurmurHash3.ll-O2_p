; ModuleID = '../../third_party/smhasher/src/MurmurHash3.cpp'
source_filename = "../../third_party/smhasher/src/MurmurHash3.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_Z18MurmurHash3_x86_32PKvijPv(i8* nocapture readonly, i32, i32, i8* nocapture) local_unnamed_addr #0 {
  %5 = sdiv i32 %1, 4
  %6 = shl nsw i32 %5, 2
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds i8, i8* %0, i64 %7
  %9 = bitcast i8* %8 to i32*
  %10 = add i32 %1, 3
  %11 = icmp ult i32 %10, 7
  br i1 %11, label %38, label %12

12:                                               ; preds = %4
  %13 = sub nsw i32 0, %5
  %14 = sext i32 %13 to i64
  %15 = and i32 %5, 1
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %32, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds i32, i32* %9, i64 %14
  %19 = load i32, i32* %18, align 4
  %20 = mul i32 %19, -862048943
  %21 = mul i32 %19, 380141568
  %22 = lshr i32 %20, 17
  %23 = or i32 %22, %21
  %24 = mul i32 %23, 461845907
  %25 = xor i32 %24, %2
  %26 = shl i32 %25, 13
  %27 = lshr i32 %25, 19
  %28 = or i32 %27, %26
  %29 = mul i32 %28, 5
  %30 = add i32 %29, -430675100
  %31 = add nsw i64 %14, 1
  br label %32

32:                                               ; preds = %12, %17
  %33 = phi i32 [ undef, %12 ], [ %30, %17 ]
  %34 = phi i64 [ %14, %12 ], [ %31, %17 ]
  %35 = phi i32 [ %2, %12 ], [ %30, %17 ]
  %36 = and i32 %1, -4
  %37 = icmp eq i32 %36, 4
  br i1 %37, label %38, label %41

38:                                               ; preds = %32, %41, %4
  %39 = phi i32 [ %2, %4 ], [ %33, %32 ], [ %70, %41 ]
  %40 = and i32 %1, 3
  switch i32 %40, label %97 [
    i32 3, label %74
    i32 2, label %79
    i32 1, label %86
  ]

41:                                               ; preds = %32, %41
  %42 = phi i64 [ %71, %41 ], [ %34, %32 ]
  %43 = phi i32 [ %70, %41 ], [ %35, %32 ]
  %44 = getelementptr inbounds i32, i32* %9, i64 %42
  %45 = load i32, i32* %44, align 4
  %46 = mul i32 %45, -862048943
  %47 = mul i32 %45, 380141568
  %48 = lshr i32 %46, 17
  %49 = or i32 %48, %47
  %50 = mul i32 %49, 461845907
  %51 = xor i32 %50, %43
  %52 = shl i32 %51, 13
  %53 = lshr i32 %51, 19
  %54 = or i32 %53, %52
  %55 = mul i32 %54, 5
  %56 = add i32 %55, -430675100
  %57 = add nsw i64 %42, 1
  %58 = getelementptr inbounds i32, i32* %9, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = mul i32 %59, -862048943
  %61 = mul i32 %59, 380141568
  %62 = lshr i32 %60, 17
  %63 = or i32 %62, %61
  %64 = mul i32 %63, 461845907
  %65 = xor i32 %64, %56
  %66 = shl i32 %65, 13
  %67 = lshr i32 %65, 19
  %68 = or i32 %67, %66
  %69 = mul i32 %68, 5
  %70 = add i32 %69, -430675100
  %71 = add nsw i64 %42, 2
  %72 = trunc i64 %71 to i32
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %38, label %41

74:                                               ; preds = %38
  %75 = getelementptr inbounds i8, i8* %8, i64 2
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = shl nuw nsw i32 %77, 16
  br label %79

79:                                               ; preds = %38, %74
  %80 = phi i32 [ 0, %38 ], [ %78, %74 ]
  %81 = getelementptr inbounds i8, i8* %8, i64 1
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = shl nuw nsw i32 %83, 8
  %85 = or i32 %84, %80
  br label %86

86:                                               ; preds = %38, %79
  %87 = phi i32 [ 0, %38 ], [ %85, %79 ]
  %88 = load i8, i8* %8, align 1
  %89 = zext i8 %88 to i32
  %90 = xor i32 %87, %89
  %91 = mul i32 %90, -862048943
  %92 = mul i32 %90, 380141568
  %93 = lshr i32 %91, 17
  %94 = or i32 %93, %92
  %95 = mul i32 %94, 461845907
  %96 = xor i32 %95, %39
  br label %97

97:                                               ; preds = %86, %38
  %98 = phi i32 [ %39, %38 ], [ %96, %86 ]
  %99 = xor i32 %98, %1
  %100 = lshr i32 %99, 16
  %101 = xor i32 %100, %99
  %102 = mul i32 %101, -2048144789
  %103 = lshr i32 %102, 13
  %104 = xor i32 %103, %102
  %105 = mul i32 %104, -1028477387
  %106 = lshr i32 %105, 16
  %107 = xor i32 %106, %105
  %108 = bitcast i8* %3 to i32*
  store i32 %107, i32* %108, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_Z19MurmurHash3_x86_128PKvijPv(i8* nocapture readonly, i32, i32, i8* nocapture) local_unnamed_addr #0 {
  %5 = sdiv i32 %1, 16
  %6 = shl nsw i32 %5, 4
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds i8, i8* %0, i64 %7
  %9 = bitcast i8* %8 to i32*
  %10 = sub nsw i32 0, %5
  %11 = add i32 %1, 15
  %12 = icmp ult i32 %11, 31
  br i1 %12, label %15, label %13

13:                                               ; preds = %4
  %14 = sext i32 %10 to i64
  br label %21

15:                                               ; preds = %21, %4
  %16 = phi i32 [ %2, %4 ], [ %91, %21 ]
  %17 = phi i32 [ %2, %4 ], [ %79, %21 ]
  %18 = phi i32 [ %2, %4 ], [ %67, %21 ]
  %19 = phi i32 [ %2, %4 ], [ %55, %21 ]
  %20 = and i32 %1, 15
  switch i32 %20, label %236 [
    i32 15, label %96
    i32 14, label %101
    i32 13, label %108
    i32 12, label %120
    i32 11, label %126
    i32 10, label %134
    i32 9, label %142
    i32 8, label %155
    i32 7, label %162
    i32 6, label %171
    i32 5, label %180
    i32 4, label %194
    i32 3, label %202
    i32 2, label %212
    i32 1, label %222
  ]

21:                                               ; preds = %13, %21
  %22 = phi i64 [ %14, %13 ], [ %92, %21 ]
  %23 = phi i32 [ %2, %13 ], [ %55, %21 ]
  %24 = phi i32 [ %2, %13 ], [ %67, %21 ]
  %25 = phi i32 [ %10, %13 ], [ %93, %21 ]
  %26 = phi i32 [ %2, %13 ], [ %79, %21 ]
  %27 = phi i32 [ %2, %13 ], [ %91, %21 ]
  %28 = shl nsw i32 %25, 2
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i32, i32* %9, i64 %29
  %31 = load i32, i32* %30, align 4
  %32 = or i32 %28, 1
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i32, i32* %9, i64 %33
  %35 = load i32, i32* %34, align 4
  %36 = or i32 %28, 2
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i32, i32* %9, i64 %37
  %39 = load i32, i32* %38, align 4
  %40 = or i32 %28, 3
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %9, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = mul i32 %31, 597399067
  %45 = mul i32 %31, -888307712
  %46 = lshr i32 %44, 17
  %47 = or i32 %46, %45
  %48 = mul i32 %47, -1425107063
  %49 = xor i32 %48, %23
  %50 = shl i32 %49, 19
  %51 = lshr i32 %49, 13
  %52 = or i32 %51, %50
  %53 = add i32 %52, %24
  %54 = mul i32 %53, 5
  %55 = add i32 %54, 1444728091
  %56 = mul i32 %35, -1425107063
  %57 = mul i32 %35, -1752629248
  %58 = lshr i32 %56, 16
  %59 = or i32 %58, %57
  %60 = mul i32 %59, 951274213
  %61 = xor i32 %60, %24
  %62 = shl i32 %61, 17
  %63 = lshr i32 %61, 15
  %64 = or i32 %63, %62
  %65 = add i32 %64, %26
  %66 = mul i32 %65, 5
  %67 = add i32 %66, 197830471
  %68 = mul i32 %39, 951274213
  %69 = mul i32 %39, -1781923840
  %70 = lshr i32 %68, 15
  %71 = or i32 %70, %69
  %72 = mul i32 %71, -1578923117
  %73 = xor i32 %72, %26
  %74 = shl i32 %73, 15
  %75 = lshr i32 %73, 17
  %76 = or i32 %75, %74
  %77 = add i32 %76, %27
  %78 = mul i32 %77, 5
  %79 = add i32 %78, -1764942795
  %80 = mul i32 %43, -1578923117
  %81 = mul i32 %43, 776732672
  %82 = lshr i32 %80, 14
  %83 = or i32 %82, %81
  %84 = mul i32 %83, 597399067
  %85 = xor i32 %84, %27
  %86 = shl i32 %85, 13
  %87 = lshr i32 %85, 19
  %88 = or i32 %87, %86
  %89 = add i32 %88, %55
  %90 = mul i32 %89, 5
  %91 = add i32 %90, 850148119
  %92 = add nsw i64 %22, 1
  %93 = add nsw i32 %25, 1
  %94 = trunc i64 %92 to i32
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %15, label %21

96:                                               ; preds = %15
  %97 = getelementptr inbounds i8, i8* %8, i64 14
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = shl nuw nsw i32 %99, 16
  br label %101

101:                                              ; preds = %15, %96
  %102 = phi i32 [ 0, %15 ], [ %100, %96 ]
  %103 = getelementptr inbounds i8, i8* %8, i64 13
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i32
  %106 = shl nuw nsw i32 %105, 8
  %107 = or i32 %106, %102
  br label %108

108:                                              ; preds = %15, %101
  %109 = phi i32 [ 0, %15 ], [ %107, %101 ]
  %110 = getelementptr inbounds i8, i8* %8, i64 12
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = xor i32 %109, %112
  %114 = mul i32 %113, -1578923117
  %115 = mul i32 %113, 776732672
  %116 = lshr i32 %114, 14
  %117 = or i32 %116, %115
  %118 = mul i32 %117, 597399067
  %119 = xor i32 %118, %16
  br label %120

120:                                              ; preds = %15, %108
  %121 = phi i32 [ %16, %15 ], [ %119, %108 ]
  %122 = getelementptr inbounds i8, i8* %8, i64 11
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = shl nuw i32 %124, 24
  br label %126

126:                                              ; preds = %15, %120
  %127 = phi i32 [ %16, %15 ], [ %121, %120 ]
  %128 = phi i32 [ 0, %15 ], [ %125, %120 ]
  %129 = getelementptr inbounds i8, i8* %8, i64 10
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  %132 = shl nuw nsw i32 %131, 16
  %133 = or i32 %132, %128
  br label %134

134:                                              ; preds = %15, %126
  %135 = phi i32 [ %16, %15 ], [ %127, %126 ]
  %136 = phi i32 [ 0, %15 ], [ %133, %126 ]
  %137 = getelementptr inbounds i8, i8* %8, i64 9
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i32
  %140 = shl nuw nsw i32 %139, 8
  %141 = xor i32 %140, %136
  br label %142

142:                                              ; preds = %15, %134
  %143 = phi i32 [ %16, %15 ], [ %135, %134 ]
  %144 = phi i32 [ 0, %15 ], [ %141, %134 ]
  %145 = getelementptr inbounds i8, i8* %8, i64 8
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = xor i32 %144, %147
  %149 = mul i32 %148, 951274213
  %150 = mul i32 %148, -1781923840
  %151 = lshr i32 %149, 15
  %152 = or i32 %151, %150
  %153 = mul i32 %152, -1578923117
  %154 = xor i32 %153, %17
  br label %155

155:                                              ; preds = %15, %142
  %156 = phi i32 [ %16, %15 ], [ %143, %142 ]
  %157 = phi i32 [ %17, %15 ], [ %154, %142 ]
  %158 = getelementptr inbounds i8, i8* %8, i64 7
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i32
  %161 = shl nuw i32 %160, 24
  br label %162

162:                                              ; preds = %15, %155
  %163 = phi i32 [ %16, %15 ], [ %156, %155 ]
  %164 = phi i32 [ %17, %15 ], [ %157, %155 ]
  %165 = phi i32 [ 0, %15 ], [ %161, %155 ]
  %166 = getelementptr inbounds i8, i8* %8, i64 6
  %167 = load i8, i8* %166, align 1
  %168 = zext i8 %167 to i32
  %169 = shl nuw nsw i32 %168, 16
  %170 = or i32 %169, %165
  br label %171

171:                                              ; preds = %15, %162
  %172 = phi i32 [ %16, %15 ], [ %163, %162 ]
  %173 = phi i32 [ %17, %15 ], [ %164, %162 ]
  %174 = phi i32 [ 0, %15 ], [ %170, %162 ]
  %175 = getelementptr inbounds i8, i8* %8, i64 5
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i32
  %178 = shl nuw nsw i32 %177, 8
  %179 = xor i32 %178, %174
  br label %180

180:                                              ; preds = %15, %171
  %181 = phi i32 [ %16, %15 ], [ %172, %171 ]
  %182 = phi i32 [ %17, %15 ], [ %173, %171 ]
  %183 = phi i32 [ 0, %15 ], [ %179, %171 ]
  %184 = getelementptr inbounds i8, i8* %8, i64 4
  %185 = load i8, i8* %184, align 1
  %186 = zext i8 %185 to i32
  %187 = xor i32 %183, %186
  %188 = mul i32 %187, -1425107063
  %189 = mul i32 %187, -1752629248
  %190 = lshr i32 %188, 16
  %191 = or i32 %190, %189
  %192 = mul i32 %191, 951274213
  %193 = xor i32 %192, %18
  br label %194

194:                                              ; preds = %15, %180
  %195 = phi i32 [ %16, %15 ], [ %181, %180 ]
  %196 = phi i32 [ %17, %15 ], [ %182, %180 ]
  %197 = phi i32 [ %18, %15 ], [ %193, %180 ]
  %198 = getelementptr inbounds i8, i8* %8, i64 3
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i32
  %201 = shl nuw i32 %200, 24
  br label %202

202:                                              ; preds = %15, %194
  %203 = phi i32 [ %16, %15 ], [ %195, %194 ]
  %204 = phi i32 [ %17, %15 ], [ %196, %194 ]
  %205 = phi i32 [ %18, %15 ], [ %197, %194 ]
  %206 = phi i32 [ 0, %15 ], [ %201, %194 ]
  %207 = getelementptr inbounds i8, i8* %8, i64 2
  %208 = load i8, i8* %207, align 1
  %209 = zext i8 %208 to i32
  %210 = shl nuw nsw i32 %209, 16
  %211 = or i32 %210, %206
  br label %212

212:                                              ; preds = %15, %202
  %213 = phi i32 [ %16, %15 ], [ %203, %202 ]
  %214 = phi i32 [ %17, %15 ], [ %204, %202 ]
  %215 = phi i32 [ %18, %15 ], [ %205, %202 ]
  %216 = phi i32 [ 0, %15 ], [ %211, %202 ]
  %217 = getelementptr inbounds i8, i8* %8, i64 1
  %218 = load i8, i8* %217, align 1
  %219 = zext i8 %218 to i32
  %220 = shl nuw nsw i32 %219, 8
  %221 = xor i32 %220, %216
  br label %222

222:                                              ; preds = %15, %212
  %223 = phi i32 [ %16, %15 ], [ %213, %212 ]
  %224 = phi i32 [ %17, %15 ], [ %214, %212 ]
  %225 = phi i32 [ %18, %15 ], [ %215, %212 ]
  %226 = phi i32 [ 0, %15 ], [ %221, %212 ]
  %227 = load i8, i8* %8, align 1
  %228 = zext i8 %227 to i32
  %229 = xor i32 %226, %228
  %230 = mul i32 %229, 597399067
  %231 = mul i32 %229, -888307712
  %232 = lshr i32 %230, 17
  %233 = or i32 %232, %231
  %234 = mul i32 %233, -1425107063
  %235 = xor i32 %234, %19
  br label %236

236:                                              ; preds = %222, %15
  %237 = phi i32 [ %16, %15 ], [ %223, %222 ]
  %238 = phi i32 [ %17, %15 ], [ %224, %222 ]
  %239 = phi i32 [ %18, %15 ], [ %225, %222 ]
  %240 = phi i32 [ %19, %15 ], [ %235, %222 ]
  %241 = xor i32 %240, %1
  %242 = xor i32 %239, %1
  %243 = xor i32 %238, %1
  %244 = xor i32 %237, %1
  %245 = add i32 %243, %244
  %246 = add i32 %245, %242
  %247 = add i32 %246, %241
  %248 = add i32 %247, %242
  %249 = add i32 %247, %243
  %250 = add i32 %247, %244
  %251 = lshr i32 %247, 16
  %252 = xor i32 %251, %247
  %253 = mul i32 %252, -2048144789
  %254 = lshr i32 %253, 13
  %255 = xor i32 %254, %253
  %256 = mul i32 %255, -1028477387
  %257 = lshr i32 %256, 16
  %258 = xor i32 %257, %256
  %259 = lshr i32 %248, 16
  %260 = xor i32 %259, %248
  %261 = mul i32 %260, -2048144789
  %262 = lshr i32 %261, 13
  %263 = xor i32 %262, %261
  %264 = mul i32 %263, -1028477387
  %265 = lshr i32 %264, 16
  %266 = xor i32 %265, %264
  %267 = lshr i32 %249, 16
  %268 = xor i32 %267, %249
  %269 = mul i32 %268, -2048144789
  %270 = lshr i32 %269, 13
  %271 = xor i32 %270, %269
  %272 = mul i32 %271, -1028477387
  %273 = lshr i32 %272, 16
  %274 = xor i32 %273, %272
  %275 = lshr i32 %250, 16
  %276 = xor i32 %275, %250
  %277 = mul i32 %276, -2048144789
  %278 = lshr i32 %277, 13
  %279 = xor i32 %278, %277
  %280 = mul i32 %279, -1028477387
  %281 = lshr i32 %280, 16
  %282 = xor i32 %281, %280
  %283 = add i32 %266, %258
  %284 = add i32 %283, %274
  %285 = add i32 %284, %282
  %286 = add i32 %285, %266
  %287 = add i32 %285, %274
  %288 = add i32 %285, %282
  %289 = bitcast i8* %3 to i32*
  store i32 %285, i32* %289, align 4
  %290 = getelementptr inbounds i8, i8* %3, i64 4
  %291 = bitcast i8* %290 to i32*
  store i32 %286, i32* %291, align 4
  %292 = getelementptr inbounds i8, i8* %3, i64 8
  %293 = bitcast i8* %292 to i32*
  store i32 %287, i32* %293, align 4
  %294 = getelementptr inbounds i8, i8* %3, i64 12
  %295 = bitcast i8* %294 to i32*
  store i32 %288, i32* %295, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_Z19MurmurHash3_x64_128PKvijPv(i8* nocapture readonly, i32, i32, i8* nocapture) local_unnamed_addr #0 {
  %5 = sdiv i32 %1, 16
  %6 = zext i32 %2 to i64
  %7 = bitcast i8* %0 to i64*
  %8 = icmp sgt i32 %1, 15
  br i1 %8, label %9, label %11

9:                                                ; preds = %4
  %10 = zext i32 %5 to i64
  br label %18

11:                                               ; preds = %18, %4
  %12 = phi i64 [ %6, %4 ], [ %51, %18 ]
  %13 = phi i64 [ %6, %4 ], [ %39, %18 ]
  %14 = shl nsw i32 %5, 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i8, i8* %0, i64 %15
  %17 = and i32 %1, 15
  switch i32 %17, label %172 [
    i32 15, label %54
    i32 14, label %59
    i32 13, label %66
    i32 12, label %73
    i32 11, label %80
    i32 10, label %87
    i32 9, label %94
    i32 8, label %106
    i32 7, label %112
    i32 6, label %120
    i32 5, label %128
    i32 4, label %136
    i32 3, label %144
    i32 2, label %152
    i32 1, label %160
  ]

18:                                               ; preds = %18, %9
  %19 = phi i64 [ 0, %9 ], [ %52, %18 ]
  %20 = phi i64 [ %6, %9 ], [ %39, %18 ]
  %21 = phi i64 [ %6, %9 ], [ %51, %18 ]
  %22 = shl nuw nsw i64 %19, 1
  %23 = getelementptr inbounds i64, i64* %7, i64 %22
  %24 = load i64, i64* %23, align 8
  %25 = or i64 %22, 1
  %26 = getelementptr inbounds i64, i64* %7, i64 %25
  %27 = load i64, i64* %26, align 8
  %28 = mul i64 %24, -8663945395140668459
  %29 = mul i64 %24, -8601547726154366976
  %30 = lshr i64 %28, 33
  %31 = or i64 %30, %29
  %32 = mul i64 %31, 5545529020109919103
  %33 = xor i64 %32, %20
  %34 = shl i64 %33, 27
  %35 = lshr i64 %33, 37
  %36 = or i64 %35, %34
  %37 = add i64 %36, %21
  %38 = mul i64 %37, 5
  %39 = add i64 %38, 1390208809
  %40 = mul i64 %27, 5545529020109919103
  %41 = mul i64 %27, 5659660229084708864
  %42 = lshr i64 %40, 31
  %43 = or i64 %42, %41
  %44 = mul i64 %43, -8663945395140668459
  %45 = xor i64 %44, %21
  %46 = shl i64 %45, 31
  %47 = lshr i64 %45, 33
  %48 = or i64 %47, %46
  %49 = add i64 %39, %48
  %50 = mul i64 %49, 5
  %51 = add i64 %50, 944331445
  %52 = add nuw nsw i64 %19, 1
  %53 = icmp eq i64 %52, %10
  br i1 %53, label %11, label %18

54:                                               ; preds = %11
  %55 = getelementptr inbounds i8, i8* %16, i64 14
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i64
  %58 = shl nuw nsw i64 %57, 48
  br label %59

59:                                               ; preds = %11, %54
  %60 = phi i64 [ 0, %11 ], [ %58, %54 ]
  %61 = getelementptr inbounds i8, i8* %16, i64 13
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i64
  %64 = shl nuw nsw i64 %63, 40
  %65 = or i64 %64, %60
  br label %66

66:                                               ; preds = %11, %59
  %67 = phi i64 [ 0, %11 ], [ %65, %59 ]
  %68 = getelementptr inbounds i8, i8* %16, i64 12
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = shl nuw nsw i64 %70, 32
  %72 = xor i64 %71, %67
  br label %73

73:                                               ; preds = %11, %66
  %74 = phi i64 [ 0, %11 ], [ %72, %66 ]
  %75 = getelementptr inbounds i8, i8* %16, i64 11
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i64
  %78 = shl nuw nsw i64 %77, 24
  %79 = xor i64 %78, %74
  br label %80

80:                                               ; preds = %11, %73
  %81 = phi i64 [ 0, %11 ], [ %79, %73 ]
  %82 = getelementptr inbounds i8, i8* %16, i64 10
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i64
  %85 = shl nuw nsw i64 %84, 16
  %86 = xor i64 %85, %81
  br label %87

87:                                               ; preds = %11, %80
  %88 = phi i64 [ 0, %11 ], [ %86, %80 ]
  %89 = getelementptr inbounds i8, i8* %16, i64 9
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i64
  %92 = shl nuw nsw i64 %91, 8
  %93 = xor i64 %92, %88
  br label %94

94:                                               ; preds = %11, %87
  %95 = phi i64 [ 0, %11 ], [ %93, %87 ]
  %96 = getelementptr inbounds i8, i8* %16, i64 8
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i64
  %99 = xor i64 %95, %98
  %100 = mul i64 %99, 5545529020109919103
  %101 = mul i64 %99, 5659660229084708864
  %102 = lshr i64 %100, 31
  %103 = or i64 %102, %101
  %104 = mul i64 %103, -8663945395140668459
  %105 = xor i64 %104, %12
  br label %106

106:                                              ; preds = %11, %94
  %107 = phi i64 [ %12, %11 ], [ %105, %94 ]
  %108 = getelementptr inbounds i8, i8* %16, i64 7
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i64
  %111 = shl nuw i64 %110, 56
  br label %112

112:                                              ; preds = %11, %106
  %113 = phi i64 [ %12, %11 ], [ %107, %106 ]
  %114 = phi i64 [ 0, %11 ], [ %111, %106 ]
  %115 = getelementptr inbounds i8, i8* %16, i64 6
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i64
  %118 = shl nuw nsw i64 %117, 48
  %119 = or i64 %118, %114
  br label %120

120:                                              ; preds = %11, %112
  %121 = phi i64 [ %12, %11 ], [ %113, %112 ]
  %122 = phi i64 [ 0, %11 ], [ %119, %112 ]
  %123 = getelementptr inbounds i8, i8* %16, i64 5
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i64
  %126 = shl nuw nsw i64 %125, 40
  %127 = xor i64 %126, %122
  br label %128

128:                                              ; preds = %11, %120
  %129 = phi i64 [ %12, %11 ], [ %121, %120 ]
  %130 = phi i64 [ 0, %11 ], [ %127, %120 ]
  %131 = getelementptr inbounds i8, i8* %16, i64 4
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i64
  %134 = shl nuw nsw i64 %133, 32
  %135 = xor i64 %134, %130
  br label %136

136:                                              ; preds = %11, %128
  %137 = phi i64 [ %12, %11 ], [ %129, %128 ]
  %138 = phi i64 [ 0, %11 ], [ %135, %128 ]
  %139 = getelementptr inbounds i8, i8* %16, i64 3
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i64
  %142 = shl nuw nsw i64 %141, 24
  %143 = xor i64 %142, %138
  br label %144

144:                                              ; preds = %11, %136
  %145 = phi i64 [ %12, %11 ], [ %137, %136 ]
  %146 = phi i64 [ 0, %11 ], [ %143, %136 ]
  %147 = getelementptr inbounds i8, i8* %16, i64 2
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i64
  %150 = shl nuw nsw i64 %149, 16
  %151 = xor i64 %150, %146
  br label %152

152:                                              ; preds = %11, %144
  %153 = phi i64 [ %12, %11 ], [ %145, %144 ]
  %154 = phi i64 [ 0, %11 ], [ %151, %144 ]
  %155 = getelementptr inbounds i8, i8* %16, i64 1
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i64
  %158 = shl nuw nsw i64 %157, 8
  %159 = xor i64 %158, %154
  br label %160

160:                                              ; preds = %11, %152
  %161 = phi i64 [ %12, %11 ], [ %153, %152 ]
  %162 = phi i64 [ 0, %11 ], [ %159, %152 ]
  %163 = load i8, i8* %16, align 1
  %164 = zext i8 %163 to i64
  %165 = xor i64 %162, %164
  %166 = mul i64 %165, -8663945395140668459
  %167 = mul i64 %165, -8601547726154366976
  %168 = lshr i64 %166, 33
  %169 = or i64 %168, %167
  %170 = mul i64 %169, 5545529020109919103
  %171 = xor i64 %170, %13
  br label %172

172:                                              ; preds = %160, %11
  %173 = phi i64 [ %12, %11 ], [ %161, %160 ]
  %174 = phi i64 [ %13, %11 ], [ %171, %160 ]
  %175 = sext i32 %1 to i64
  %176 = xor i64 %174, %175
  %177 = xor i64 %173, %175
  %178 = add i64 %176, %177
  %179 = add i64 %178, %177
  %180 = lshr i64 %178, 33
  %181 = xor i64 %180, %178
  %182 = mul i64 %181, -49064778989728563
  %183 = lshr i64 %182, 33
  %184 = xor i64 %183, %182
  %185 = mul i64 %184, -4265267296055464877
  %186 = lshr i64 %185, 33
  %187 = xor i64 %186, %185
  %188 = lshr i64 %179, 33
  %189 = xor i64 %188, %179
  %190 = mul i64 %189, -49064778989728563
  %191 = lshr i64 %190, 33
  %192 = xor i64 %191, %190
  %193 = mul i64 %192, -4265267296055464877
  %194 = lshr i64 %193, 33
  %195 = xor i64 %194, %193
  %196 = add i64 %195, %187
  %197 = add i64 %196, %195
  %198 = bitcast i8* %3 to i64*
  store i64 %196, i64* %198, align 8
  %199 = getelementptr inbounds i8, i8* %3, i64 8
  %200 = bitcast i8* %199 to i64*
  store i64 %197, i64* %200, align 8
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
