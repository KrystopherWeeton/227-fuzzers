; ModuleID = '../../third_party/blink/renderer/modules/webdatabase/sql_transaction_backend.cc'
source_filename = "../../third_party/blink/renderer/modules/webdatabase/sql_transaction_backend.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.15", i32, [4 x i8], %"class.std::__1::unique_ptr.148", %"class.std::__1::unique_ptr.148", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.158", %"class.std::__1::unique_ptr.164", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.176", %"class.std::__1::unique_ptr.182", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.189", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.24", %"class.std::__1::unique_ptr.30", %"class.std::__1::unique_ptr.36", %"class.std::__1::unique_ptr.42", %"class.std::__1::unique_ptr.48", %"class.std::__1::unique_ptr.59", %"class.std::__1::unique_ptr.66", %"class.std::__1::unique_ptr.66", %"class.std::__1::unique_ptr.73", %"class.std::__1::unique_ptr.80", %"class.std::__1::unique_ptr.87", %"class.std::__1::unique_ptr.87", %"class.std::__1::unique_ptr.94", %"class.std::__1::unique_ptr.101", %"class.std::__1::unique_ptr.108", %"class.std::__1::unique_ptr.131", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.30" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.36" = type { %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.42" = type { %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.48" = type { %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.51" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.51" = type { %"struct.std::__1::__atomic_base.52" }
%"struct.std::__1::__atomic_base.52" = type { %"struct.std::__1::__atomic_base.53" }
%"struct.std::__1::__atomic_base.53" = type { %"struct.std::__1::__cxx_atomic_impl.54" }
%"struct.std::__1::__cxx_atomic_impl.54" = type { %"struct.std::__1::__cxx_atomic_base_impl.55" }
%"struct.std::__1::__cxx_atomic_base_impl.55" = type { i64 }
%"class.std::__1::unique_ptr.59" = type { %"class.std::__1::__compressed_pair.60" }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"class.blink::Worklist.62"* }
%"class.blink::Worklist.62" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.51" }
%"class.std::__1::unique_ptr.66" = type { %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { %"class.blink::Worklist.69"* }
%"class.blink::Worklist.69" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.51" }
%"class.std::__1::unique_ptr.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"class.blink::Worklist.76"* }
%"class.blink::Worklist.76" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.51" }
%"class.std::__1::unique_ptr.80" = type { %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"class.blink::Worklist.83"* }
%"class.blink::Worklist.83" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.51" }
%"class.std::__1::unique_ptr.87" = type { %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89" }
%"struct.std::__1::__compressed_pair_elem.89" = type { %"class.blink::Worklist.90"* }
%"class.blink::Worklist.90" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.51" }
%"class.std::__1::unique_ptr.94" = type { %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"class.blink::Worklist.97"* }
%"class.blink::Worklist.97" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.51" }
%"class.std::__1::unique_ptr.101" = type { %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"class.blink::Worklist.104"* }
%"class.blink::Worklist.104" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.51" }
%"class.std::__1::unique_ptr.108" = type { %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.111", %"class.std::__1::__compressed_pair.118", %"class.std::__1::__compressed_pair.123", %"class.std::__1::__compressed_pair.125", [4 x i8] }>
%"class.std::__1::unique_ptr.111" = type { %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113", %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.113" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.115" }
%"class.std::__1::__compressed_pair.115" = type { %"struct.std::__1::__compressed_pair_elem.116" }
%"struct.std::__1::__compressed_pair_elem.116" = type { i64 }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.119" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.116" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { float }
%"class.std::__1::unique_ptr.131" = type { %"class.std::__1::__compressed_pair.132" }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.134", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.134" = type { %"class.std::__1::__compressed_pair.135" }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.136" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.148" = type { %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.156" }
%"class.WTF::VectorBuffer.156" = type { %"class.WTF::VectorBufferBase.157" }
%"class.WTF::VectorBufferBase.157" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.158" = type { %"class.std::__1::__compressed_pair.159" }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.164" = type { %"class.std::__1::__compressed_pair.165" }
%"class.std::__1::__compressed_pair.165" = type { %"struct.std::__1::__compressed_pair_elem.166" }
%"struct.std::__1::__compressed_pair_elem.166" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.170" }
%"class.std::__1::unique_ptr.170" = type { %"class.std::__1::__compressed_pair.171" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.62"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.69"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.76"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.83"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.90"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.311" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.311" = type { %"struct.std::__1::__compressed_pair_elem.312" }
%"struct.std::__1::__compressed_pair_elem.312" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.176" = type { %"class.std::__1::__compressed_pair.177" }
%"class.std::__1::__compressed_pair.177" = type { %"struct.std::__1::__compressed_pair_elem.178" }
%"struct.std::__1::__compressed_pair_elem.178" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.182" = type { %"class.std::__1::__compressed_pair.183" }
%"class.std::__1::__compressed_pair.183" = type { %"struct.std::__1::__compressed_pair_elem.184" }
%"struct.std::__1::__compressed_pair_elem.184" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.188 }
%class.scoped_refptr.188 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.189" = type { %"struct.std::__1::__atomic_base.190" }
%"struct.std::__1::__atomic_base.190" = type { %"struct.std::__1::__cxx_atomic_impl.191" }
%"struct.std::__1::__cxx_atomic_impl.191" = type { %"struct.std::__1::__cxx_atomic_base_impl.192" }
%"struct.std::__1::__cxx_atomic_base_impl.192" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.blink::SQLTransactionBackend" = type { %"class.blink::SQLTransactionStateMachine", %"class.blink::CrossThreadPersistent", %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.13", %"class.blink::Member.296", %"class.std::__1::unique_ptr.257", i8, i8, i8, i8, i8, i8, i8, i8, %"class.WTF::Mutex", %"class.WTF::Deque.300", %"class.std::__1::unique_ptr.305" }
%"class.blink::SQLTransactionStateMachine" = type { i32 (...)**, i32, i32 }
%"class.blink::CrossThreadPersistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::SQLTransaction"*, %"class.blink::CrossThreadPersistentNodePtr" }
%"class.blink::CrossThreadPersistentNodePtr" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { %"class.blink::PersistentNode"* }
%"class.blink::CrossThreadPersistent.264" = type { %"class.blink::PersistentBase.265" }
%"class.blink::PersistentBase.265" = type { %"class.blink::SQLStatementBackend"*, %"class.blink::CrossThreadPersistentNodePtr" }
%"class.blink::SQLStatementBackend" = type <{ %"class.blink::Member.268", %"class.WTF::String", %"class.WTF::Vector.282", i8, i8, [6 x i8], %"class.std::__1::unique_ptr.257", %"class.blink::Member.287", i32, [4 x i8] }>
%"class.blink::Member.268" = type { %"class.blink::MemberBase.269" }
%"class.blink::MemberBase.269" = type { %"class.blink::SQLStatement"* }
%"class.blink::SQLStatement" = type { %"class.blink::Member.272", %"class.blink::Member.274", %"class.blink::Member.278", %"class.blink::probe::AsyncTaskId" }
%"class.blink::Member.272" = type { %"class.blink::MemberBase.273" }
%"class.blink::MemberBase.273" = type { %"class.blink::SQLStatementBackend"* }
%"class.blink::Member.274" = type { %"class.blink::MemberBase.275" }
%"class.blink::MemberBase.275" = type { %"class.blink::SQLStatement::OnSuccessCallback"* }
%"class.blink::SQLStatement::OnSuccessCallback" = type { i32 (...)** }
%"class.blink::Member.278" = type { %"class.blink::MemberBase.279" }
%"class.blink::MemberBase.279" = type { %"class.blink::SQLStatement::OnErrorCallback"* }
%"class.blink::SQLStatement::OnErrorCallback" = type { i32 (...)** }
%"class.blink::probe::AsyncTaskId" = type { i8, %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.263 }
%union.anon.263 = type { i64 }
%"class.WTF::String" = type { %class.scoped_refptr.218 }
%class.scoped_refptr.218 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic.219" }
%"struct.std::__1::atomic.219" = type { %"struct.std::__1::__atomic_base.220" }
%"struct.std::__1::__atomic_base.220" = type { %"struct.std::__1::__atomic_base.221" }
%"struct.std::__1::__atomic_base.221" = type { %"struct.std::__1::__cxx_atomic_impl.222" }
%"struct.std::__1::__cxx_atomic_impl.222" = type { %"struct.std::__1::__cxx_atomic_base_impl.223" }
%"struct.std::__1::__cxx_atomic_base_impl.223" = type { i32 }
%"class.WTF::Vector.282" = type { %"class.WTF::VectorBuffer.283" }
%"class.WTF::VectorBuffer.283" = type { %"class.WTF::VectorBufferBase.284" }
%"class.WTF::VectorBufferBase.284" = type { %"class.blink::SQLValue"*, i32, i32 }
%"class.blink::SQLValue" = type { i32, double, %"class.WTF::String" }
%"class.blink::Member.287" = type { %"class.blink::MemberBase.288" }
%"class.blink::MemberBase.288" = type { %"class.blink::SQLResultSet"* }
%"class.blink::SQLResultSet" = type <{ %"class.blink::ScriptWrappable", %"class.blink::Member.289", i64, i32, i8, i8, [2 x i8] }>
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::Member.289" = type { %"class.blink::MemberBase.290" }
%"class.blink::MemberBase.290" = type { %"class.blink::SQLResultSetRowList"* }
%"class.blink::SQLResultSetRowList" = type { %"class.blink::ScriptWrappable", %"class.WTF::Vector.291", %"class.WTF::Vector.282" }
%"class.WTF::Vector.291" = type { %"class.WTF::VectorBuffer.292" }
%"class.WTF::VectorBuffer.292" = type { %"class.WTF::VectorBufferBase.293" }
%"class.WTF::VectorBufferBase.293" = type { %"class.WTF::String"*, i32, i32 }
%"class.blink::CrossThreadPersistent.13" = type { %"class.blink::PersistentBase.14" }
%"class.blink::PersistentBase.14" = type { %"class.blink::Database"*, %"class.blink::CrossThreadPersistentNodePtr" }
%"class.blink::Member.296" = type { %"class.blink::MemberBase.297" }
%"class.blink::MemberBase.297" = type { %"class.blink::SQLTransactionWrapper"* }
%"class.std::__1::unique_ptr.257" = type { %"class.std::__1::__compressed_pair.258" }
%"class.std::__1::__compressed_pair.258" = type { %"struct.std::__1::__compressed_pair_elem.259" }
%"struct.std::__1::__compressed_pair_elem.259" = type { %"class.blink::SQLErrorData"* }
%"class.blink::SQLErrorData" = type { i32, %"class.WTF::String" }
%"class.WTF::Deque.300" = type { %"class.WTF::Deque<blink::CrossThreadPersistent<blink::SQLStatementBackend>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<blink::CrossThreadPersistent<blink::SQLStatementBackend>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.303" }
%"class.WTF::VectorBuffer.303" = type { %"class.WTF::VectorBufferBase.304" }
%"class.WTF::VectorBufferBase.304" = type { %"class.blink::CrossThreadPersistent.264"*, i32, i32 }
%"class.std::__1::unique_ptr.305" = type { %"class.std::__1::__compressed_pair.306" }
%"class.std::__1::__compressed_pair.306" = type { %"struct.std::__1::__compressed_pair_elem.307" }
%"struct.std::__1::__compressed_pair_elem.307" = type { %"class.blink::SQLiteTransaction"* }
%"class.blink::SQLiteTransaction" = type <{ %"class.blink::SQLiteDatabase"*, i8, i8, [6 x i8] }>
%"class.blink::SQLiteDatabase" = type <{ %struct.sqlite3*, i32, i8, [3 x i8], %"class.WTF::Mutex", %"class.blink::DatabaseAuthorizer"*, i32, [4 x i8], %"class.WTF::Mutex", i32, [4 x i8], %"class.std::__1::basic_string", i32, [4 x i8] }>
%struct.sqlite3 = type opaque
%"class.blink::DatabaseAuthorizer" = type { i32, i8, %"class.WTF::String" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.224" }
%"class.std::__1::__compressed_pair.224" = type { %"struct.std::__1::__compressed_pair_elem.225" }
%"struct.std::__1::__compressed_pair_elem.225" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.blink::Database" = type { %"class.blink::ScriptWrappable", %class.scoped_refptr, %class.scoped_refptr, %"class.blink::Member.3", %class.scoped_refptr.216, %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i32, %"struct.std::__1::atomic.189", i8, %"class.blink::DatabaseAuthorizer", %"class.blink::SQLiteDatabase", %"class.WTF::Deque.229", %"class.WTF::Mutex", i8, i8, %"class.blink::FrameOrWorkerScheduler::SchedulingAffectingFeatureHandle" }
%class.scoped_refptr = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type { %"class.WTF::RefCounted", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i16, %"class.absl::optional.316", i8, i8, i8, i8, i8, i8, %"class.base::UnguessableToken", %class.scoped_refptr }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.absl::optional.316" = type { %"class.absl::optional_internal::optional_data.317" }
%"class.absl::optional_internal::optional_data.317" = type { %"class.absl::optional_internal::optional_data_base.318" }
%"class.absl::optional_internal::optional_data_base.318" = type { %"class.absl::optional_internal::optional_data_dtor_base.319" }
%"class.absl::optional_internal::optional_data_dtor_base.319" = type { i8, %union.anon.320 }
%union.anon.320 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::Member.3" = type { %"class.blink::MemberBase.4" }
%"class.blink::MemberBase.4" = type { %"class.blink::DatabaseContext"* }
%"class.blink::DatabaseContext" = type <{ %"class.blink::ExecutionContextLifecycleObserver.base", [4 x i8], %"class.blink::Member.8", i8, i8, [6 x i8] }>
%"class.blink::ExecutionContextLifecycleObserver.base" = type <{ %"class.blink::ContextLifecycleObserver", i32 }>
%"class.blink::ContextLifecycleObserver" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::WeakMember" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.7" }
%"class.blink::MemberBase.7" = type { %"class.blink::ContextLifecycleNotifier"* }
%"class.blink::ContextLifecycleNotifier" = type opaque
%"class.blink::Member.8" = type { %"class.blink::MemberBase.9" }
%"class.blink::MemberBase.9" = type { %"class.blink::DatabaseThread"* }
%"class.blink::DatabaseThread" = type <{ %"class.std::__1::unique_ptr", %"class.WTF::HashSet", %"class.std::__1::unique_ptr.193", %"class.blink::CrossThreadPersistent.199", %"class.base::WaitableEvent"*, %"class.WTF::Mutex", i8, [7 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::Thread"* }
%"class.blink::Thread" = type { i32 (...)** }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"class.blink::CrossThreadPersistent.13"*, i32, i32, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.193" = type { %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"class.blink::SQLTransactionClient"* }
%"class.blink::SQLTransactionClient" = type { i8 }
%"class.blink::CrossThreadPersistent.199" = type { %"class.blink::PersistentBase.200" }
%"class.blink::PersistentBase.200" = type { %"class.blink::SQLTransactionCoordinator"*, %"class.blink::CrossThreadPersistentNodePtr" }
%"class.blink::SQLTransactionCoordinator" = type { %"class.WTF::HashMap", i8, [7 x i8] }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable.203" }
%"class.WTF::HashTable.203" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type opaque
%"class.base::WaitableEvent" = type <{ %class.scoped_refptr.206, i8, [7 x i8] }>
%class.scoped_refptr.206 = type { %"struct.base::WaitableEvent::WaitableEventKernel"* }
%"struct.base::WaitableEvent::WaitableEventKernel" = type { %"class.base::RefCountedThreadSafe", %"class.base::Lock", i8, i8, %"class.std::__1::list" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.207" }
%"struct.std::__1::atomic.207" = type { %"struct.std::__1::__atomic_base.208" }
%"struct.std::__1::__atomic_base.208" = type { %"struct.std::__1::__atomic_base.209" }
%"struct.std::__1::__atomic_base.209" = type { %"struct.std::__1::__cxx_atomic_impl.210" }
%"struct.std::__1::__cxx_atomic_impl.210" = type { %"struct.std::__1::__cxx_atomic_base_impl.211" }
%"struct.std::__1::__cxx_atomic_base_impl.211" = type { i32 }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.212" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.212" = type { %"struct.std::__1::__compressed_pair_elem.116" }
%class.scoped_refptr.216 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.217" }>
%"class.base::RefCountedThreadSafe.217" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::Deque.229" = type { %"class.WTF::Deque<blink::CrossThreadPersistent<blink::SQLTransactionBackend>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<blink::CrossThreadPersistent<blink::SQLTransactionBackend>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.232" }
%"class.WTF::VectorBuffer.232" = type { %"class.WTF::VectorBufferBase.233" }
%"class.WTF::VectorBufferBase.233" = type { %"class.blink::CrossThreadPersistent.234"*, i32, i32 }
%"class.blink::CrossThreadPersistent.234" = type { %"class.blink::PersistentBase.235" }
%"class.blink::PersistentBase.235" = type { %"class.blink::SQLTransactionBackend"*, %"class.blink::CrossThreadPersistentNodePtr" }
%"class.blink::FrameOrWorkerScheduler::SchedulingAffectingFeatureHandle" = type { i32, %"struct.blink::SchedulingPolicy", %"class.base::WeakPtr" }
%"struct.blink::SchedulingPolicy" = type { i8, i8 }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.236 }
%class.scoped_refptr.236 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.237", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.237" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.238" }
%"struct.std::__1::atomic.238" = type { %"struct.std::__1::__atomic_base.239" }
%"struct.std::__1::__atomic_base.239" = type { %"struct.std::__1::__atomic_base.240" }
%"struct.std::__1::__atomic_base.240" = type { %"struct.std::__1::__cxx_atomic_impl.241" }
%"struct.std::__1::__cxx_atomic_impl.241" = type { %"struct.std::__1::__cxx_atomic_base_impl.242" }
%"struct.std::__1::__cxx_atomic_base_impl.242" = type { i8 }
%"class.blink::SQLTransaction" = type <{ %"class.blink::ScriptWrappable", %"class.blink::SQLTransactionStateMachine.2", %"class.blink::Member", %"class.blink::Member.243", %"class.blink::Member.245", %"class.blink::Member.249", %"class.blink::Member.253", i8, [7 x i8], %"class.std::__1::unique_ptr.257", %"class.blink::probe::AsyncTaskId", i8, [7 x i8] }>
%"class.blink::SQLTransactionStateMachine.2" = type { i32 (...)**, i32, i32 }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::Database"* }
%"class.blink::Member.243" = type { %"class.blink::MemberBase.244" }
%"class.blink::MemberBase.244" = type { %"class.blink::SQLTransactionBackend"* }
%"class.blink::Member.245" = type { %"class.blink::MemberBase.246" }
%"class.blink::MemberBase.246" = type { %"class.blink::SQLTransaction::OnProcessCallback"* }
%"class.blink::SQLTransaction::OnProcessCallback" = type { i32 (...)** }
%"class.blink::Member.249" = type { %"class.blink::MemberBase.250" }
%"class.blink::MemberBase.250" = type { %"class.blink::SQLTransaction::OnSuccessCallback"* }
%"class.blink::SQLTransaction::OnSuccessCallback" = type { i32 (...)** }
%"class.blink::Member.253" = type { %"class.blink::MemberBase.254" }
%"class.blink::MemberBase.254" = type { %"class.blink::SQLTransaction::OnErrorCallback"* }
%"class.blink::SQLTransaction::OnErrorCallback" = type { i32 (...)** }
%"class.blink::SQLTransactionWrapper" = type { i32 (...)** }
%"class.blink::CrossThreadPersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }

$_ZN3WTF5DequeIN5blink21CrossThreadPersistentINS1_19SQLStatementBackendEEELj0ENS_18PartitionAllocatorEE9push_backIRPS3_EEvOT_ = comdat any

$_ZN3WTF5DequeIN5blink21CrossThreadPersistentINS1_19SQLStatementBackendEEELj0ENS_18PartitionAllocatorEE9TakeFirstEv = comdat any

$_ZN3WTF5DequeIN5blink21CrossThreadPersistentINS1_19SQLStatementBackendEEELj0ENS_18PartitionAllocatorEE10DestroyAllEv = comdat any

$_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_14SQLTransactionELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE1EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv = comdat any

$_ZN5blink10TraceTraitINS_14SQLTransactionEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_8DatabaseELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE1EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv = comdat any

$_ZN5blink10TraceTraitINS_8DatabaseEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink10TraceTraitINS_21SQLTransactionWrapperEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN3WTF5DequeIN5blink21CrossThreadPersistentINS1_19SQLStatementBackendEEELj0ENS_18PartitionAllocatorEE14ExpandCapacityEv = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink21CrossThreadPersistentINS2_19SQLStatementBackendEEEEEmm = comdat any

$_ZN3WTF11VectorMoverILb0EN5blink21CrossThreadPersistentINS1_19SQLStatementBackendEEENS_18PartitionAllocatorEE4MoveEPS4_S7_S7_b = comdat any

$_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_19SQLStatementBackendELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE1EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv = comdat any

$_ZN5blink10TraceTraitINS_19SQLStatementBackendEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_19SQLStatementBackendEEEPhm = comdat any

$_ZN5blink8internal14FinalizerTraitINS_19SQLStatementBackendEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_19SQLStatementBackendEE7GetNameEPKv = comdat any

$_ZN5blink19SQLStatementBackendD2Ev = comdat any

$_ZN5blink14PersistentBaseINS_19SQLStatementBackendELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE1EE12AssignUnsafeEPS1_ = comdat any

$_ZZN5blink11GCInfoTraitINS_19SQLStatementBackendEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_19SQLStatementBackendEE5IndexEvE13gc_info_index = comdat any

@_ZTVN5blink21SQLTransactionBackendE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::SQLTransactionBackend"*)* @_ZN5blink21SQLTransactionBackendD2Ev to i8*), i8* bitcast (void (%"class.blink::SQLTransactionBackend"*)* @_ZN5blink21SQLTransactionBackendD0Ev to i8*), i8* bitcast ({ i64, i64 } (%"class.blink::SQLTransactionBackend"*, i32)* @_ZN5blink21SQLTransactionBackend16StateFunctionForENS_19SQLTransactionStateE to i8*)] }, align 8
@_ZZN5blink21SQLTransactionBackend16StateFunctionForENS_19SQLTransactionStateEE15kStateFunctions = internal unnamed_addr constant [13 x { i64, i64 }] [{ i64, i64 } { i64 ptrtoint (i32 (%"class.blink::SQLTransactionBackend"*)* @_ZN5blink21SQLTransactionBackend16UnreachableStateEv to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (i32 (%"class.blink::SQLTransactionBackend"*)* @_ZN5blink21SQLTransactionBackend16UnreachableStateEv to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (i32 (%"class.blink::SQLTransactionBackend"*)* @_ZN5blink21SQLTransactionBackend11AcquireLockEv to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (i32 (%"class.blink::SQLTransactionBackend"*)* @_ZN5blink21SQLTransactionBackend27OpenTransactionAndPreflightEv to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (i32 (%"class.blink::SQLTransactionBackend"*)* @_ZN5blink21SQLTransactionBackend13RunStatementsEv to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (i32 (%"class.blink::SQLTransactionBackend"*)* @_ZN5blink21SQLTransactionBackend19PostflightAndCommitEv to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (i32 (%"class.blink::SQLTransactionBackend"*)* @_ZN5blink21SQLTransactionBackend19CleanupAndTerminateEv to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (i32 (%"class.blink::SQLTransactionBackend"*)* @_ZN5blink21SQLTransactionBackend36CleanupAfterTransactionErrorCallbackEv to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (i32 (%"class.blink::SQLTransactionBackend"*)* @_ZN5blink21SQLTransactionBackend19SendToFrontendStateEv to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (i32 (%"class.blink::SQLTransactionBackend"*)* @_ZN5blink21SQLTransactionBackend19SendToFrontendStateEv to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (i32 (%"class.blink::SQLTransactionBackend"*)* @_ZN5blink21SQLTransactionBackend19SendToFrontendStateEv to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (i32 (%"class.blink::SQLTransactionBackend"*)* @_ZN5blink21SQLTransactionBackend19SendToFrontendStateEv to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (i32 (%"class.blink::SQLTransactionBackend"*)* @_ZN5blink21SQLTransactionBackend19SendToFrontendStateEv to i64), i64 0 }], align 16
@.str = private unnamed_addr constant [28 x i8] c"unable to begin transaction\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"unable to read version\00", align 1
@.str.2 = private unnamed_addr constant [52 x i8] c"unknown error occurred during transaction preflight\00", align 1
@.str.3 = private unnamed_addr constant [32 x i8] c"the statement failed to execute\00", align 1
@.str.4 = private unnamed_addr constant [53 x i8] c"unknown error occurred during transaction postflight\00", align 1
@.str.5 = private unnamed_addr constant [29 x i8] c"unable to commit transaction\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"%s (%d %s)\00", align 1
@.str.7 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.8 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink21CrossThreadPersistentINS1_19SQLStatementBackendEEEEEPKcv = private unnamed_addr constant [104 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::CrossThreadPersistent<blink::SQLStatementBackend>]\00", align 1
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.10 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_19SQLStatementBackendEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_19SQLStatementBackendEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_19SQLStatementBackendEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_19SQLStatementBackendEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_19SQLStatementBackendEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.11 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8

@_ZN5blink21SQLTransactionBackendC1EPNS_8DatabaseEPNS_14SQLTransactionEPNS_21SQLTransactionWrapperEb = hidden unnamed_addr alias void (%"class.blink::SQLTransactionBackend"*, %"class.blink::Database"*, %"class.blink::SQLTransaction"*, %"class.blink::SQLTransactionWrapper"*, i1), void (%"class.blink::SQLTransactionBackend"*, %"class.blink::Database"*, %"class.blink::SQLTransaction"*, %"class.blink::SQLTransactionWrapper"*, i1)* @_ZN5blink21SQLTransactionBackendC2EPNS_8DatabaseEPNS_14SQLTransactionEPNS_21SQLTransactionWrapperEb
@_ZN5blink21SQLTransactionBackendD1Ev = hidden unnamed_addr alias void (%"class.blink::SQLTransactionBackend"*), void (%"class.blink::SQLTransactionBackend"*)* @_ZN5blink21SQLTransactionBackendD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink21SQLTransactionBackendC2EPNS_8DatabaseEPNS_14SQLTransactionEPNS_21SQLTransactionWrapperEb(%"class.blink::SQLTransactionBackend"*, %"class.blink::Database"*, %"class.blink::SQLTransaction"*, %"class.blink::SQLTransactionWrapper"*, i1 zeroext) unnamed_addr #0 align 2 {
  %6 = zext i1 %4 to i8
  %7 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 0, i32 1
  store i32 1, i32* %8, align 8
  %9 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 0, i32 2
  store i32 1, i32* %9, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink21SQLTransactionBackendE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %10 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 1
  %11 = getelementptr inbounds %"class.blink::CrossThreadPersistent", %"class.blink::CrossThreadPersistent"* %10, i64 0, i32 0
  %12 = getelementptr inbounds %"class.blink::CrossThreadPersistent", %"class.blink::CrossThreadPersistent"* %10, i64 0, i32 0, i32 0
  store %"class.blink::SQLTransaction"* %2, %"class.blink::SQLTransaction"** %12, align 8
  %13 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 1, i32 0, i32 1
  %14 = getelementptr inbounds %"class.blink::CrossThreadPersistentNodePtr", %"class.blink::CrossThreadPersistentNodePtr"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.blink::PersistentNode"* null, %"class.blink::PersistentNode"** %14, align 8
  %15 = ptrtoint %"class.blink::SQLTransaction"* %2 to i64
  switch i64 %15, label %16 [
    i64 0, label %35
    i64 -1, label %35
  ]

16:                                               ; preds = %5
  %17 = tail call dereferenceable(40) %"class.WTF::Mutex"* @_ZN5blink11ProcessHeap26CrossThreadPersistentMutexEv() #9
  %18 = getelementptr inbounds %"class.WTF::Mutex", %"class.WTF::Mutex"* %17, i64 0, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %18) #9
  %19 = tail call dereferenceable(16) %"class.blink::CrossThreadPersistentRegion"* @_ZN5blink11ProcessHeap30GetCrossThreadPersistentRegionEv() #9
  %20 = getelementptr inbounds %"class.blink::CrossThreadPersistentRegion", %"class.blink::CrossThreadPersistentRegion"* %19, i64 0, i32 0, i32 0
  %21 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %20, align 8
  %22 = icmp eq %"class.blink::PersistentNode"* %21, null
  br i1 %22, label %23, label %26, !prof !2

23:                                               ; preds = %16
  %24 = getelementptr inbounds %"class.blink::CrossThreadPersistentRegion", %"class.blink::CrossThreadPersistentRegion"* %19, i64 0, i32 0
  tail call void @_ZN5blink20PersistentRegionBase15EnsureNodeSlotsEv(%"class.blink::PersistentRegionBase"* %24) #9
  %25 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %20, align 8
  br label %26

26:                                               ; preds = %23, %16
  %27 = phi %"class.blink::PersistentNode"* [ %25, %23 ], [ %21, %16 ]
  %28 = bitcast %"class.blink::PersistentNode"* %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast %"class.blink::CrossThreadPersistentRegion"* %19 to i64*
  store i64 %29, i64* %30, align 8
  %31 = bitcast %"class.blink::PersistentNode"* %27 to %"class.blink::PersistentBase"**
  store %"class.blink::PersistentBase"* %11, %"class.blink::PersistentBase"** %31, align 8
  %32 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %27, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* @_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_14SQLTransactionELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE1EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv, void (%"class.blink::Visitor"*, i8*)** %32, align 8
  %33 = ptrtoint %"class.blink::PersistentNode"* %27 to i64
  %34 = bitcast %"class.blink::CrossThreadPersistentNodePtr"* %13 to i64*
  store atomic i64 %33, i64* %34 release, align 8
  tail call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %18) #9
  br label %35

35:                                               ; preds = %5, %5, %26
  %36 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 2
  %37 = bitcast %"class.blink::CrossThreadPersistent.264"* %36 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 16, i1 false) #9
  %38 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 3
  %39 = getelementptr inbounds %"class.blink::CrossThreadPersistent.13", %"class.blink::CrossThreadPersistent.13"* %38, i64 0, i32 0
  %40 = getelementptr inbounds %"class.blink::CrossThreadPersistent.13", %"class.blink::CrossThreadPersistent.13"* %38, i64 0, i32 0, i32 0
  store %"class.blink::Database"* %1, %"class.blink::Database"** %40, align 8
  %41 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 3, i32 0, i32 1
  %42 = getelementptr inbounds %"class.blink::CrossThreadPersistentNodePtr", %"class.blink::CrossThreadPersistentNodePtr"* %41, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.blink::PersistentNode"* null, %"class.blink::PersistentNode"** %42, align 8
  %43 = ptrtoint %"class.blink::Database"* %1 to i64
  switch i64 %43, label %44 [
    i64 0, label %63
    i64 -1, label %63
  ]

44:                                               ; preds = %35
  %45 = tail call dereferenceable(40) %"class.WTF::Mutex"* @_ZN5blink11ProcessHeap26CrossThreadPersistentMutexEv() #9
  %46 = getelementptr inbounds %"class.WTF::Mutex", %"class.WTF::Mutex"* %45, i64 0, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %46) #9
  %47 = tail call dereferenceable(16) %"class.blink::CrossThreadPersistentRegion"* @_ZN5blink11ProcessHeap30GetCrossThreadPersistentRegionEv() #9
  %48 = getelementptr inbounds %"class.blink::CrossThreadPersistentRegion", %"class.blink::CrossThreadPersistentRegion"* %47, i64 0, i32 0, i32 0
  %49 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %48, align 8
  %50 = icmp eq %"class.blink::PersistentNode"* %49, null
  br i1 %50, label %51, label %54, !prof !2

51:                                               ; preds = %44
  %52 = getelementptr inbounds %"class.blink::CrossThreadPersistentRegion", %"class.blink::CrossThreadPersistentRegion"* %47, i64 0, i32 0
  tail call void @_ZN5blink20PersistentRegionBase15EnsureNodeSlotsEv(%"class.blink::PersistentRegionBase"* %52) #9
  %53 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %48, align 8
  br label %54

54:                                               ; preds = %51, %44
  %55 = phi %"class.blink::PersistentNode"* [ %53, %51 ], [ %49, %44 ]
  %56 = bitcast %"class.blink::PersistentNode"* %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = bitcast %"class.blink::CrossThreadPersistentRegion"* %47 to i64*
  store i64 %57, i64* %58, align 8
  %59 = bitcast %"class.blink::PersistentNode"* %55 to %"class.blink::PersistentBase.14"**
  store %"class.blink::PersistentBase.14"* %39, %"class.blink::PersistentBase.14"** %59, align 8
  %60 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %55, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* @_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_8DatabaseELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE1EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv, void (%"class.blink::Visitor"*, i8*)** %60, align 8
  %61 = ptrtoint %"class.blink::PersistentNode"* %55 to i64
  %62 = bitcast %"class.blink::CrossThreadPersistentNodePtr"* %41 to i64*
  store atomic i64 %61, i64* %62 release, align 8
  tail call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %46) #9
  br label %63

63:                                               ; preds = %35, %35, %54
  %64 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 4, i32 0, i32 0
  store %"class.blink::SQLTransactionWrapper"* %3, %"class.blink::SQLTransactionWrapper"** %64, align 8
  %65 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 5
  %66 = bitcast %"class.std::__1::unique_ptr.257"* %65 to i64*
  store i64 0, i64* %66, align 8
  %67 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 6
  %68 = load %"class.blink::SQLTransaction"*, %"class.blink::SQLTransaction"** %12, align 8
  %69 = tail call zeroext i1 @_ZNK5blink14SQLTransaction11HasCallbackEv(%"class.blink::SQLTransaction"* %68) #9
  %70 = zext i1 %69 to i8
  store i8 %70, i8* %67, align 8
  %71 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 7
  %72 = load %"class.blink::SQLTransaction"*, %"class.blink::SQLTransaction"** %12, align 8
  %73 = tail call zeroext i1 @_ZNK5blink14SQLTransaction18HasSuccessCallbackEv(%"class.blink::SQLTransaction"* %72) #9
  %74 = zext i1 %73 to i8
  store i8 %74, i8* %71, align 1
  %75 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 8
  %76 = load %"class.blink::SQLTransaction"*, %"class.blink::SQLTransaction"** %12, align 8
  %77 = tail call zeroext i1 @_ZNK5blink14SQLTransaction16HasErrorCallbackEv(%"class.blink::SQLTransaction"* %76) #9
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %75, align 2
  %79 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 9
  store i8 0, i8* %79, align 1
  %80 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 10
  store i8 0, i8* %80, align 4
  %81 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 11
  store i8 0, i8* %81, align 1
  %82 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 12
  store i8 %6, i8* %82, align 2
  %83 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 13
  store i8 0, i8* %83, align 1
  %84 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 14, i32 0
  tail call void @_ZN3WTF9MutexBaseC2Eb(%"class.WTF::MutexBase"* %84, i1 zeroext false) #9
  %85 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 15
  %86 = bitcast %"class.WTF::Deque.300"* %85 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %86, i8 0, i64 32, i1 false)
  %87 = load %"class.blink::SQLTransaction"*, %"class.blink::SQLTransaction"** %12, align 8
  tail call void @_ZN5blink14SQLTransaction10SetBackendEPNS_21SQLTransactionBackendE(%"class.blink::SQLTransaction"* %87, %"class.blink::SQLTransactionBackend"* %0) #9
  store i32 2, i32* %9, align 4
  ret void
}

declare zeroext i1 @_ZNK5blink14SQLTransaction11HasCallbackEv(%"class.blink::SQLTransaction"*) local_unnamed_addr #1

declare zeroext i1 @_ZNK5blink14SQLTransaction18HasSuccessCallbackEv(%"class.blink::SQLTransaction"*) local_unnamed_addr #1

declare zeroext i1 @_ZNK5blink14SQLTransaction16HasErrorCallbackEv(%"class.blink::SQLTransaction"*) local_unnamed_addr #1

declare void @_ZN5blink14SQLTransaction10SetBackendEPNS_21SQLTransactionBackendE(%"class.blink::SQLTransaction"*, %"class.blink::SQLTransactionBackend"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink21SQLTransactionBackendD2Ev(%"class.blink::SQLTransactionBackend"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink21SQLTransactionBackendE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %4 = load %"class.blink::SQLiteTransaction"*, %"class.blink::SQLiteTransaction"** %3, align 8
  store %"class.blink::SQLiteTransaction"* null, %"class.blink::SQLiteTransaction"** %3, align 8
  %5 = icmp eq %"class.blink::SQLiteTransaction"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  tail call void @_ZN5blink17SQLiteTransactionD1Ev(%"class.blink::SQLiteTransaction"* nonnull %4) #9
  %7 = bitcast %"class.blink::SQLiteTransaction"* %4 to i8*
  tail call void @free(i8* %7) #9
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 15
  %10 = getelementptr inbounds %"class.WTF::Deque.300", %"class.WTF::Deque.300"* %9, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = load %"class.blink::CrossThreadPersistent.264"*, %"class.blink::CrossThreadPersistent.264"** %10, align 8
  %12 = icmp eq %"class.blink::CrossThreadPersistent.264"* %11, null
  br i1 %12, label %25, label %13

13:                                               ; preds = %8
  %14 = bitcast %"class.blink::CrossThreadPersistent.264"* %11 to i8*
  %15 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 15, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 15, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %16, %18
  br i1 %19, label %23, label %20

20:                                               ; preds = %13
  tail call void @_ZN3WTF5DequeIN5blink21CrossThreadPersistentINS1_19SQLStatementBackendEEELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque.300"* %9) #9
  %21 = bitcast %"class.WTF::Deque.300"* %9 to i8**
  %22 = load i8*, i8** %21, align 8
  br label %23

23:                                               ; preds = %20, %13
  %24 = phi i8* [ %22, %20 ], [ %14, %13 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %24) #9
  store %"class.blink::CrossThreadPersistent.264"* null, %"class.blink::CrossThreadPersistent.264"** %10, align 8
  br label %25

25:                                               ; preds = %8, %23
  %26 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 14, i32 0
  tail call void @_ZN3WTF9MutexBaseD2Ev(%"class.WTF::MutexBase"* %26) #9
  %27 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %28 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %27, align 8
  store %"class.blink::SQLErrorData"* null, %"class.blink::SQLErrorData"** %27, align 8
  %29 = icmp eq %"class.blink::SQLErrorData"* %28, null
  br i1 %29, label %49, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %28, i64 0, i32 1, i32 0, i32 0
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %33 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %33, label %47, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load atomic i32, i32* %35 monotonic, align 4
  %37 = and i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %40 = load i32, i32* %39, align 4
  br i1 %38, label %41, label %43

41:                                               ; preds = %34
  %42 = add i32 %40, -1
  store i32 %42, i32* %39, align 4
  br label %43

43:                                               ; preds = %41, %34
  %44 = phi i32 [ %42, %41 ], [ %40, %34 ]
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %47

46:                                               ; preds = %43
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %32) #9
  br label %47

47:                                               ; preds = %46, %43, %30
  %48 = bitcast %"class.blink::SQLErrorData"* %28 to i8*
  tail call void @free(i8* %48) #9
  br label %49

49:                                               ; preds = %25, %47
  %50 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 3, i32 0, i32 1
  %51 = bitcast %"class.blink::CrossThreadPersistentNodePtr"* %50 to i64*
  %52 = load atomic i64, i64* %51 acquire, align 8
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %68, label %54

54:                                               ; preds = %49
  %55 = tail call dereferenceable(40) %"class.WTF::Mutex"* @_ZN5blink11ProcessHeap26CrossThreadPersistentMutexEv() #9
  %56 = getelementptr inbounds %"class.WTF::Mutex", %"class.WTF::Mutex"* %55, i64 0, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %56) #9
  %57 = tail call dereferenceable(16) %"class.blink::CrossThreadPersistentRegion"* @_ZN5blink11ProcessHeap30GetCrossThreadPersistentRegionEv() #9
  %58 = load atomic i64, i64* %51 monotonic, align 8
  %59 = inttoptr i64 %58 to %"class.blink::PersistentNode"*
  %60 = icmp eq i64 %58, 0
  br i1 %60, label %67, label %61

61:                                               ; preds = %54
  %62 = getelementptr inbounds %"class.blink::CrossThreadPersistentRegion", %"class.blink::CrossThreadPersistentRegion"* %57, i64 0, i32 0, i32 0
  %63 = bitcast %"class.blink::CrossThreadPersistentRegion"* %57 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = inttoptr i64 %58 to i64*
  store i64 %64, i64* %65, align 8
  %66 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %59, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* null, void (%"class.blink::Visitor"*, i8*)** %66, align 8
  store %"class.blink::PersistentNode"* %59, %"class.blink::PersistentNode"** %62, align 8
  br label %67

67:                                               ; preds = %61, %54
  store atomic i64 0, i64* %51 release, align 8
  tail call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %56) #9
  br label %68

68:                                               ; preds = %49, %67
  %69 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 2, i32 0, i32 1
  %70 = bitcast %"class.blink::CrossThreadPersistentNodePtr"* %69 to i64*
  %71 = load atomic i64, i64* %70 acquire, align 8
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %87, label %73

73:                                               ; preds = %68
  %74 = tail call dereferenceable(40) %"class.WTF::Mutex"* @_ZN5blink11ProcessHeap26CrossThreadPersistentMutexEv() #9
  %75 = getelementptr inbounds %"class.WTF::Mutex", %"class.WTF::Mutex"* %74, i64 0, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %75) #9
  %76 = tail call dereferenceable(16) %"class.blink::CrossThreadPersistentRegion"* @_ZN5blink11ProcessHeap30GetCrossThreadPersistentRegionEv() #9
  %77 = load atomic i64, i64* %70 monotonic, align 8
  %78 = inttoptr i64 %77 to %"class.blink::PersistentNode"*
  %79 = icmp eq i64 %77, 0
  br i1 %79, label %86, label %80

80:                                               ; preds = %73
  %81 = getelementptr inbounds %"class.blink::CrossThreadPersistentRegion", %"class.blink::CrossThreadPersistentRegion"* %76, i64 0, i32 0, i32 0
  %82 = bitcast %"class.blink::CrossThreadPersistentRegion"* %76 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = inttoptr i64 %77 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %78, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* null, void (%"class.blink::Visitor"*, i8*)** %85, align 8
  store %"class.blink::PersistentNode"* %78, %"class.blink::PersistentNode"** %81, align 8
  br label %86

86:                                               ; preds = %80, %73
  store atomic i64 0, i64* %70 release, align 8
  tail call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %75) #9
  br label %87

87:                                               ; preds = %68, %86
  %88 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 1, i32 0, i32 1
  %89 = bitcast %"class.blink::CrossThreadPersistentNodePtr"* %88 to i64*
  %90 = load atomic i64, i64* %89 acquire, align 8
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %106, label %92

92:                                               ; preds = %87
  %93 = tail call dereferenceable(40) %"class.WTF::Mutex"* @_ZN5blink11ProcessHeap26CrossThreadPersistentMutexEv() #9
  %94 = getelementptr inbounds %"class.WTF::Mutex", %"class.WTF::Mutex"* %93, i64 0, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %94) #9
  %95 = tail call dereferenceable(16) %"class.blink::CrossThreadPersistentRegion"* @_ZN5blink11ProcessHeap30GetCrossThreadPersistentRegionEv() #9
  %96 = load atomic i64, i64* %89 monotonic, align 8
  %97 = inttoptr i64 %96 to %"class.blink::PersistentNode"*
  %98 = icmp eq i64 %96, 0
  br i1 %98, label %105, label %99

99:                                               ; preds = %92
  %100 = getelementptr inbounds %"class.blink::CrossThreadPersistentRegion", %"class.blink::CrossThreadPersistentRegion"* %95, i64 0, i32 0, i32 0
  %101 = bitcast %"class.blink::CrossThreadPersistentRegion"* %95 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = inttoptr i64 %96 to i64*
  store i64 %102, i64* %103, align 8
  %104 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %97, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* null, void (%"class.blink::Visitor"*, i8*)** %104, align 8
  store %"class.blink::PersistentNode"* %97, %"class.blink::PersistentNode"** %100, align 8
  br label %105

105:                                              ; preds = %99, %92
  store atomic i64 0, i64* %89 release, align 8
  tail call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %94) #9
  br label %106

106:                                              ; preds = %87, %105
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3WTF9MutexBaseD2Ev(%"class.WTF::MutexBase"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink21SQLTransactionBackendD0Ev(%"class.blink::SQLTransactionBackend"*) unnamed_addr #0 align 2 {
  tail call void @_ZN5blink21SQLTransactionBackendD2Ev(%"class.blink::SQLTransactionBackend"* %0) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink21SQLTransactionBackend5TraceEPNS_7VisitorE(%"class.blink::SQLTransactionBackend"* nocapture readonly, %"class.blink::Visitor"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 4
  %4 = bitcast %"class.blink::Member.296"* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = inttoptr i64 %5 to i8*
  %9 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %10 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, i64 5
  %12 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, align 8
  tail call void %12(%"class.blink::Visitor"* %1, i8* nonnull %8, i8* nonnull %8, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_21SQLTransactionWrapperEE5TraceEPNS_7VisitorEPKv) #9
  br label %13

13:                                               ; preds = %2, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink21SQLTransactionBackend9DoCleanupEv(%"class.blink::SQLTransactionBackend"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load %"class.blink::SQLTransaction"*, %"class.blink::SQLTransaction"** %2, align 8
  %4 = icmp eq %"class.blink::SQLTransaction"* %3, null
  br i1 %4, label %49, label %5

5:                                                ; preds = %1
  %6 = tail call dereferenceable(40) %"class.WTF::Mutex"* @_ZN5blink11ProcessHeap26CrossThreadPersistentMutexEv() #9
  %7 = getelementptr inbounds %"class.WTF::Mutex", %"class.WTF::Mutex"* %6, i64 0, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %7) #9
  store %"class.blink::SQLTransaction"* null, %"class.blink::SQLTransaction"** %2, align 8
  %8 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 1, i32 0, i32 1
  %9 = bitcast %"class.blink::CrossThreadPersistentNodePtr"* %8 to i64*
  %10 = load atomic i64, i64* %9 acquire, align 8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %24, label %12

12:                                               ; preds = %5
  %13 = tail call dereferenceable(16) %"class.blink::CrossThreadPersistentRegion"* @_ZN5blink11ProcessHeap30GetCrossThreadPersistentRegionEv() #9
  %14 = load atomic i64, i64* %9 monotonic, align 8
  %15 = inttoptr i64 %14 to %"class.blink::PersistentNode"*
  %16 = icmp eq i64 %14, 0
  br i1 %16, label %23, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.blink::CrossThreadPersistentRegion", %"class.blink::CrossThreadPersistentRegion"* %13, i64 0, i32 0, i32 0
  %19 = bitcast %"class.blink::CrossThreadPersistentRegion"* %13 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = inttoptr i64 %14 to i64*
  store i64 %20, i64* %21, align 8
  %22 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %15, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* null, void (%"class.blink::Visitor"*, i8*)** %22, align 8
  store %"class.blink::PersistentNode"* %15, %"class.blink::PersistentNode"** %18, align 8
  br label %23

23:                                               ; preds = %17, %12
  store atomic i64 0, i64* %9 release, align 8
  br label %24

24:                                               ; preds = %5, %23
  tail call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %7) #9
  %25 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 14, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %25) #9
  %26 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 15
  tail call void @_ZN3WTF5DequeIN5blink21CrossThreadPersistentINS1_19SQLStatementBackendEEELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque.300"* %26) #9
  %27 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 15, i32 1
  store i32 0, i32* %27, align 8
  %28 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 15, i32 2
  store i32 0, i32* %28, align 4
  %29 = bitcast %"class.WTF::Deque.300"* %26 to i8**
  %30 = load i8*, i8** %29, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %30) #9
  %31 = bitcast %"class.WTF::Deque.300"* %26 to i64*
  store atomic i64 0, i64* %31 monotonic, align 8
  %32 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 1
  store i32 0, i32* %32, align 8
  %33 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %34 = load %"class.blink::SQLiteTransaction"*, %"class.blink::SQLiteTransaction"** %33, align 8
  %35 = icmp eq %"class.blink::SQLiteTransaction"* %34, null
  br i1 %35, label %38, label %36

36:                                               ; preds = %24
  store %"class.blink::SQLiteTransaction"* null, %"class.blink::SQLiteTransaction"** %33, align 8
  tail call void @_ZN5blink17SQLiteTransactionD1Ev(%"class.blink::SQLiteTransaction"* nonnull %34) #9
  %37 = bitcast %"class.blink::SQLiteTransaction"* %34 to i8*
  tail call void @free(i8* %37) #9
  br label %38

38:                                               ; preds = %24, %36
  %39 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 11
  %40 = load i8, i8* %39, align 1, !range !3
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 3, i32 0, i32 0
  %44 = load %"class.blink::Database"*, %"class.blink::Database"** %43, align 8
  %45 = tail call %"class.blink::SQLTransactionCoordinator"* @_ZNK5blink8Database22TransactionCoordinatorEv(%"class.blink::Database"* %44) #9
  tail call void @_ZN5blink25SQLTransactionCoordinator11ReleaseLockEPNS_21SQLTransactionBackendE(%"class.blink::SQLTransactionCoordinator"* %45, %"class.blink::SQLTransactionBackend"* %0) #9
  br label %46

46:                                               ; preds = %38, %42
  %47 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 4
  %48 = bitcast %"class.blink::Member.296"* %47 to i64*
  store atomic i64 0, i64* %48 monotonic, align 8
  tail call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %25) #9
  br label %49

49:                                               ; preds = %1, %46
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare %"class.blink::SQLTransactionCoordinator"* @_ZNK5blink8Database22TransactionCoordinatorEv(%"class.blink::Database"*) local_unnamed_addr #1

declare void @_ZN5blink25SQLTransactionCoordinator11ReleaseLockEPNS_21SQLTransactionBackendE(%"class.blink::SQLTransactionCoordinator"*, %"class.blink::SQLTransactionBackend"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::SQLStatement"* @_ZN5blink21SQLTransactionBackend16CurrentStatementEv(%"class.blink::SQLTransactionBackend"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 2, i32 0, i32 0
  %3 = load %"class.blink::SQLStatementBackend"*, %"class.blink::SQLStatementBackend"** %2, align 8
  %4 = tail call %"class.blink::SQLStatement"* @_ZN5blink19SQLStatementBackend11GetFrontendEv(%"class.blink::SQLStatementBackend"* %3) #9
  ret %"class.blink::SQLStatement"* %4
}

declare %"class.blink::SQLStatement"* @_ZN5blink19SQLStatementBackend11GetFrontendEv(%"class.blink::SQLStatementBackend"*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.blink::SQLErrorData"* @_ZN5blink21SQLTransactionBackend16TransactionErrorEv(%"class.blink::SQLTransactionBackend"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %3 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %2, align 8
  ret %"class.blink::SQLErrorData"* %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink21SQLTransactionBackend30SetShouldRetryCurrentStatementEb(%"class.blink::SQLTransactionBackend"* nocapture, i1 zeroext) local_unnamed_addr #5 align 2 {
  %3 = zext i1 %1 to i8
  %4 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 9
  store i8 %3, i8* %4, align 1
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden { i64, i64 } @_ZN5blink21SQLTransactionBackend16StateFunctionForENS_19SQLTransactionStateE(%"class.blink::SQLTransactionBackend"* nocapture readnone, i32) unnamed_addr #6 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds [13 x { i64, i64 }], [13 x { i64, i64 }]* @_ZZN5blink21SQLTransactionBackend16StateFunctionForENS_19SQLTransactionStateEE15kStateFunctions, i64 0, i64 %3, i32 0
  %5 = load i64, i64* %4, align 16
  %6 = insertvalue { i64, i64 } undef, i64 %5, 0
  %7 = getelementptr inbounds [13 x { i64, i64 }], [13 x { i64, i64 }]* @_ZZN5blink21SQLTransactionBackend16StateFunctionForENS_19SQLTransactionStateEE15kStateFunctions, i64 0, i64 %3, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = insertvalue { i64, i64 } %6, i64 %8, 1
  ret { i64, i64 } %9
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN5blink21SQLTransactionBackend16UnreachableStateEv(%"class.blink::SQLTransactionBackend"* nocapture readnone) #6 align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink21SQLTransactionBackend11AcquireLockEv(%"class.blink::SQLTransactionBackend"*) #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 3, i32 0, i32 0
  %3 = load %"class.blink::Database"*, %"class.blink::Database"** %2, align 8
  %4 = tail call %"class.blink::SQLTransactionCoordinator"* @_ZNK5blink8Database22TransactionCoordinatorEv(%"class.blink::Database"* %3) #9
  tail call void @_ZN5blink25SQLTransactionCoordinator11AcquireLockEPNS_21SQLTransactionBackendE(%"class.blink::SQLTransactionCoordinator"* %4, %"class.blink::SQLTransactionBackend"* %0) #9
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink21SQLTransactionBackend27OpenTransactionAndPreflightEv(%"class.blink::SQLTransactionBackend"*) #0 align 2 {
  %2 = alloca %"class.WTF::String", align 8
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca %"class.WTF::String", align 8
  %5 = alloca %"class.WTF::String", align 8
  %6 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 12
  %7 = load i8, i8* %6, align 2, !range !3
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %14

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 3, i32 0, i32 0
  %11 = load %"class.blink::Database"*, %"class.blink::Database"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::Database", %"class.blink::Database"* %11, i64 0, i32 13
  %13 = tail call i64 @_ZNK5blink8Database11MaximumSizeEv(%"class.blink::Database"* %11) #9
  tail call void @_ZN5blink14SQLiteDatabase14SetMaximumSizeEl(%"class.blink::SQLiteDatabase"* %12, i64 %13) #9
  br label %14

14:                                               ; preds = %1, %9
  %15 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 3, i32 0, i32 0
  %16 = load %"class.blink::Database"*, %"class.blink::Database"** %15, align 8
  %17 = getelementptr inbounds %"class.blink::Database", %"class.blink::Database"* %16, i64 0, i32 13
  %18 = tail call noalias i8* @malloc(i64 16) #9
  %19 = bitcast i8* %18 to %"class.blink::SQLiteTransaction"*
  %20 = load i8, i8* %6, align 1, !range !3
  %21 = icmp ne i8 %20, 0
  tail call void @_ZN5blink17SQLiteTransactionC1ERNS_14SQLiteDatabaseEb(%"class.blink::SQLiteTransaction"* %19, %"class.blink::SQLiteDatabase"* dereferenceable(152) %17, i1 zeroext %21) #9
  %22 = ptrtoint i8* %18 to i64
  %23 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 16
  %24 = getelementptr inbounds %"class.std::__1::unique_ptr.305", %"class.std::__1::unique_ptr.305"* %23, i64 0, i32 0, i32 0, i32 0
  %25 = load %"class.blink::SQLiteTransaction"*, %"class.blink::SQLiteTransaction"** %24, align 8
  %26 = bitcast %"class.std::__1::unique_ptr.305"* %23 to i64*
  store i64 %22, i64* %26, align 8
  %27 = icmp eq %"class.blink::SQLiteTransaction"* %25, null
  br i1 %27, label %30, label %28

28:                                               ; preds = %14
  tail call void @_ZN5blink17SQLiteTransactionD1Ev(%"class.blink::SQLiteTransaction"* nonnull %25) #9
  %29 = bitcast %"class.blink::SQLiteTransaction"* %25 to i8*
  tail call void @free(i8* %29) #9
  br label %30

30:                                               ; preds = %28, %14
  %31 = load %"class.blink::Database"*, %"class.blink::Database"** %15, align 8
  tail call void @_ZN5blink8Database12ResetDeletesEv(%"class.blink::Database"* %31) #9
  %32 = load %"class.blink::Database"*, %"class.blink::Database"** %15, align 8
  tail call void @_ZN5blink8Database17DisableAuthorizerEv(%"class.blink::Database"* %32) #9
  %33 = load %"class.blink::SQLiteTransaction"*, %"class.blink::SQLiteTransaction"** %24, align 8
  tail call void @_ZN5blink17SQLiteTransaction5beginEv(%"class.blink::SQLiteTransaction"* %33) #9
  %34 = load %"class.blink::Database"*, %"class.blink::Database"** %15, align 8
  tail call void @_ZN5blink8Database16EnableAuthorizerEv(%"class.blink::Database"* %34) #9
  %35 = load %"class.blink::SQLiteTransaction"*, %"class.blink::SQLiteTransaction"** %24, align 8
  %36 = getelementptr inbounds %"class.blink::SQLiteTransaction", %"class.blink::SQLiteTransaction"* %35, i64 0, i32 1
  %37 = load i8, i8* %36, align 8, !range !3
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %39, label %108

39:                                               ; preds = %30
  %40 = load %"class.blink::Database"*, %"class.blink::Database"** %15, align 8
  %41 = getelementptr inbounds %"class.blink::Database", %"class.blink::Database"* %40, i64 0, i32 13
  %42 = tail call i32 @_ZN5blink14SQLiteDatabase9LastErrorEv(%"class.blink::SQLiteDatabase"* %41) #9
  tail call void @_ZN5blink8Database17ReportSqliteErrorEi(%"class.blink::Database"* %40, i32 %42) #9
  %43 = load %"class.blink::Database"*, %"class.blink::Database"** %15, align 8
  %44 = getelementptr inbounds %"class.blink::Database", %"class.blink::Database"* %43, i64 0, i32 13
  %45 = tail call i32 @_ZN5blink14SQLiteDatabase9LastErrorEv(%"class.blink::SQLiteDatabase"* %44) #9
  %46 = load %"class.blink::Database"*, %"class.blink::Database"** %15, align 8
  %47 = getelementptr inbounds %"class.blink::Database", %"class.blink::Database"* %46, i64 0, i32 13
  %48 = tail call i8* @_ZN5blink14SQLiteDatabase12LastErrorMsgEv(%"class.blink::SQLiteDatabase"* %47) #9
  %49 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49) #9
  %50 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0), i32 %45, i8* %48) #9
  %51 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %50, %"class.WTF::StringImpl"** %51, align 8
  %52 = tail call noalias i8* @malloc(i64 16) #9
  %53 = bitcast i8* %52 to i32*
  store i32 1, i32* %53, align 8
  %54 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"* nonnull %3) #9
  %55 = getelementptr inbounds i8, i8* %52, i64 8
  %56 = bitcast i8* %55 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %54, %"class.WTF::StringImpl"** %56, align 8
  %57 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %51, align 8
  %58 = icmp eq %"class.WTF::StringImpl"* %57, null
  br i1 %58, label %72, label %59

59:                                               ; preds = %39
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %57, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = load atomic i32, i32* %60 monotonic, align 4
  %62 = and i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %57, i64 0, i32 0
  %65 = load i32, i32* %64, align 4
  br i1 %63, label %66, label %68

66:                                               ; preds = %59
  %67 = add i32 %65, -1
  store i32 %67, i32* %64, align 4
  br label %68

68:                                               ; preds = %66, %59
  %69 = phi i32 [ %67, %66 ], [ %65, %59 ]
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %72

71:                                               ; preds = %68
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %57) #9
  br label %72

72:                                               ; preds = %39, %68, %71
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #9
  %73 = ptrtoint i8* %52 to i64
  %74 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 5
  %75 = getelementptr inbounds %"class.std::__1::unique_ptr.257", %"class.std::__1::unique_ptr.257"* %74, i64 0, i32 0, i32 0, i32 0
  %76 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %75, align 8
  %77 = bitcast %"class.std::__1::unique_ptr.257"* %74 to i64*
  store i64 %73, i64* %77, align 8
  %78 = icmp eq %"class.blink::SQLErrorData"* %76, null
  br i1 %78, label %98, label %79

79:                                               ; preds = %72
  %80 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %76, i64 0, i32 1, i32 0, i32 0
  %81 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %80, align 8
  %82 = icmp eq %"class.WTF::StringImpl"* %81, null
  br i1 %82, label %96, label %83

83:                                               ; preds = %79
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %81, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %85 = load atomic i32, i32* %84 monotonic, align 4
  %86 = and i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %81, i64 0, i32 0
  %89 = load i32, i32* %88, align 4
  br i1 %87, label %90, label %92

90:                                               ; preds = %83
  %91 = add i32 %89, -1
  store i32 %91, i32* %88, align 4
  br label %92

92:                                               ; preds = %90, %83
  %93 = phi i32 [ %91, %90 ], [ %89, %83 ]
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %96

95:                                               ; preds = %92
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %81) #9
  br label %96

96:                                               ; preds = %95, %92, %79
  %97 = bitcast %"class.blink::SQLErrorData"* %76 to i8*
  call void @free(i8* %97) #9
  br label %98

98:                                               ; preds = %96, %72
  %99 = load %"class.blink::SQLiteTransaction"*, %"class.blink::SQLiteTransaction"** %24, align 8
  store %"class.blink::SQLiteTransaction"* null, %"class.blink::SQLiteTransaction"** %24, align 8
  %100 = icmp eq %"class.blink::SQLiteTransaction"* %99, null
  br i1 %100, label %103, label %101

101:                                              ; preds = %98
  call void @_ZN5blink17SQLiteTransactionD1Ev(%"class.blink::SQLiteTransaction"* nonnull %99) #9
  %102 = bitcast %"class.blink::SQLiteTransaction"* %99 to i8*
  call void @free(i8* %102) #9
  br label %103

103:                                              ; preds = %98, %101
  %104 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 8
  %105 = load i8, i8* %104, align 2, !range !3
  %106 = icmp eq i8 %105, 0
  %107 = select i1 %106, i32 7, i32 9
  br label %341

108:                                              ; preds = %30
  %109 = bitcast %"class.WTF::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %109) #9
  %110 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %110, align 8
  %111 = load %"class.blink::Database"*, %"class.blink::Database"** %15, align 8
  %112 = call zeroext i1 @_ZN5blink8Database30GetActualVersionForTransactionERN3WTF6StringE(%"class.blink::Database"* %111, %"class.WTF::String"* nonnull dereferenceable(8) %5) #9
  %113 = load %"class.blink::Database"*, %"class.blink::Database"** %15, align 8
  br i1 %112, label %184, label %114

114:                                              ; preds = %108
  %115 = getelementptr inbounds %"class.blink::Database", %"class.blink::Database"* %113, i64 0, i32 13
  %116 = call i32 @_ZN5blink14SQLiteDatabase9LastErrorEv(%"class.blink::SQLiteDatabase"* %115) #9
  call void @_ZN5blink8Database17ReportSqliteErrorEi(%"class.blink::Database"* %113, i32 %116) #9
  %117 = load %"class.blink::Database"*, %"class.blink::Database"** %15, align 8
  %118 = getelementptr inbounds %"class.blink::Database", %"class.blink::Database"* %117, i64 0, i32 13
  %119 = call i32 @_ZN5blink14SQLiteDatabase9LastErrorEv(%"class.blink::SQLiteDatabase"* %118) #9
  %120 = load %"class.blink::Database"*, %"class.blink::Database"** %15, align 8
  %121 = getelementptr inbounds %"class.blink::Database", %"class.blink::Database"* %120, i64 0, i32 13
  %122 = call i8* @_ZN5blink14SQLiteDatabase12LastErrorMsgEv(%"class.blink::SQLiteDatabase"* %121) #9
  %123 = bitcast %"class.WTF::String"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %123) #9
  %124 = call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %119, i8* %122) #9
  %125 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %124, %"class.WTF::StringImpl"** %125, align 8
  %126 = call noalias i8* @malloc(i64 16) #9
  %127 = bitcast i8* %126 to i32*
  store i32 1, i32* %127, align 8
  %128 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"* nonnull %2) #9
  %129 = getelementptr inbounds i8, i8* %126, i64 8
  %130 = bitcast i8* %129 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %128, %"class.WTF::StringImpl"** %130, align 8
  %131 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %125, align 8
  %132 = icmp eq %"class.WTF::StringImpl"* %131, null
  br i1 %132, label %146, label %133

133:                                              ; preds = %114
  %134 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %131, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %135 = load atomic i32, i32* %134 monotonic, align 4
  %136 = and i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %131, i64 0, i32 0
  %139 = load i32, i32* %138, align 4
  br i1 %137, label %140, label %142

140:                                              ; preds = %133
  %141 = add i32 %139, -1
  store i32 %141, i32* %138, align 4
  br label %142

142:                                              ; preds = %140, %133
  %143 = phi i32 [ %141, %140 ], [ %139, %133 ]
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %146

145:                                              ; preds = %142
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %131) #9
  br label %146

146:                                              ; preds = %114, %142, %145
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %123) #9
  %147 = ptrtoint i8* %126 to i64
  %148 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 5
  %149 = getelementptr inbounds %"class.std::__1::unique_ptr.257", %"class.std::__1::unique_ptr.257"* %148, i64 0, i32 0, i32 0, i32 0
  %150 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %149, align 8
  %151 = bitcast %"class.std::__1::unique_ptr.257"* %148 to i64*
  store i64 %147, i64* %151, align 8
  %152 = icmp eq %"class.blink::SQLErrorData"* %150, null
  br i1 %152, label %172, label %153

153:                                              ; preds = %146
  %154 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %150, i64 0, i32 1, i32 0, i32 0
  %155 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %154, align 8
  %156 = icmp eq %"class.WTF::StringImpl"* %155, null
  br i1 %156, label %170, label %157

157:                                              ; preds = %153
  %158 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %155, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %159 = load atomic i32, i32* %158 monotonic, align 4
  %160 = and i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %155, i64 0, i32 0
  %163 = load i32, i32* %162, align 4
  br i1 %161, label %164, label %166

164:                                              ; preds = %157
  %165 = add i32 %163, -1
  store i32 %165, i32* %162, align 4
  br label %166

166:                                              ; preds = %164, %157
  %167 = phi i32 [ %165, %164 ], [ %163, %157 ]
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %169, label %170

169:                                              ; preds = %166
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %155) #9
  br label %170

170:                                              ; preds = %169, %166, %153
  %171 = bitcast %"class.blink::SQLErrorData"* %150 to i8*
  call void @free(i8* %171) #9
  br label %172

172:                                              ; preds = %170, %146
  %173 = load %"class.blink::Database"*, %"class.blink::Database"** %15, align 8
  call void @_ZN5blink8Database17DisableAuthorizerEv(%"class.blink::Database"* %173) #9
  %174 = load %"class.blink::SQLiteTransaction"*, %"class.blink::SQLiteTransaction"** %24, align 8
  store %"class.blink::SQLiteTransaction"* null, %"class.blink::SQLiteTransaction"** %24, align 8
  %175 = icmp eq %"class.blink::SQLiteTransaction"* %174, null
  br i1 %175, label %178, label %176

176:                                              ; preds = %172
  call void @_ZN5blink17SQLiteTransactionD1Ev(%"class.blink::SQLiteTransaction"* nonnull %174) #9
  %177 = bitcast %"class.blink::SQLiteTransaction"* %174 to i8*
  call void @free(i8* %177) #9
  br label %178

178:                                              ; preds = %172, %176
  %179 = load %"class.blink::Database"*, %"class.blink::Database"** %15, align 8
  call void @_ZN5blink8Database16EnableAuthorizerEv(%"class.blink::Database"* %179) #9
  %180 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 8
  %181 = load i8, i8* %180, align 2, !range !3
  %182 = icmp eq i8 %181, 0
  %183 = select i1 %182, i32 7, i32 9
  br label %323

184:                                              ; preds = %108
  %185 = getelementptr inbounds %"class.blink::Database", %"class.blink::Database"* %113, i64 0, i32 6, i32 0, i32 0
  %186 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %185, align 8
  %187 = icmp eq %"class.WTF::StringImpl"* %186, null
  br i1 %187, label %197, label %188

188:                                              ; preds = %184
  %189 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %186, i64 0, i32 1
  %190 = load i32, i32* %189, align 4
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %197, label %192

192:                                              ; preds = %188
  %193 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %110, align 8
  %194 = call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* nonnull %186, %"class.WTF::StringImpl"* %193) #9
  %195 = xor i1 %194, true
  %196 = zext i1 %195 to i8
  br label %197

197:                                              ; preds = %184, %192, %188
  %198 = phi i8 [ 0, %188 ], [ %196, %192 ], [ 0, %184 ]
  %199 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 13
  store i8 %198, i8* %199, align 1
  %200 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 4, i32 0, i32 0
  %201 = load %"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionWrapper"** %200, align 8
  %202 = icmp eq %"class.blink::SQLTransactionWrapper"* %201, null
  br i1 %202, label %318, label %203

203:                                              ; preds = %197
  %204 = bitcast %"class.blink::SQLTransactionWrapper"* %201 to i1 (%"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionBackend"*)***
  %205 = load i1 (%"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionBackend"*)**, i1 (%"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionBackend"*)*** %204, align 8
  %206 = getelementptr inbounds i1 (%"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionBackend"*)*, i1 (%"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionBackend"*)** %205, i64 3
  %207 = load i1 (%"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionBackend"*)*, i1 (%"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionBackend"*)** %206, align 8
  %208 = call zeroext i1 %207(%"class.blink::SQLTransactionWrapper"* nonnull %201, %"class.blink::SQLTransactionBackend"* %0) #9
  br i1 %208, label %318, label %209

209:                                              ; preds = %203
  %210 = load %"class.blink::Database"*, %"class.blink::Database"** %15, align 8
  call void @_ZN5blink8Database17DisableAuthorizerEv(%"class.blink::Database"* %210) #9
  %211 = load %"class.blink::SQLiteTransaction"*, %"class.blink::SQLiteTransaction"** %24, align 8
  store %"class.blink::SQLiteTransaction"* null, %"class.blink::SQLiteTransaction"** %24, align 8
  %212 = icmp eq %"class.blink::SQLiteTransaction"* %211, null
  br i1 %212, label %215, label %213

213:                                              ; preds = %209
  call void @_ZN5blink17SQLiteTransactionD1Ev(%"class.blink::SQLiteTransaction"* nonnull %211) #9
  %214 = bitcast %"class.blink::SQLiteTransaction"* %211 to i8*
  call void @free(i8* %214) #9
  br label %215

215:                                              ; preds = %209, %213
  %216 = load %"class.blink::Database"*, %"class.blink::Database"** %15, align 8
  call void @_ZN5blink8Database16EnableAuthorizerEv(%"class.blink::Database"* %216) #9
  %217 = load %"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionWrapper"** %200, align 8
  %218 = bitcast %"class.blink::SQLTransactionWrapper"* %217 to %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)***
  %219 = load %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)**, %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)*** %218, align 8
  %220 = getelementptr inbounds %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)*, %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)** %219, i64 5
  %221 = load %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)*, %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)** %220, align 8
  %222 = call %"class.blink::SQLErrorData"* %221(%"class.blink::SQLTransactionWrapper"* %217) #9
  %223 = icmp eq %"class.blink::SQLErrorData"* %222, null
  br i1 %223, label %264, label %224

224:                                              ; preds = %215
  %225 = load %"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionWrapper"** %200, align 8
  %226 = bitcast %"class.blink::SQLTransactionWrapper"* %225 to %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)***
  %227 = load %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)**, %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)*** %226, align 8
  %228 = getelementptr inbounds %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)*, %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)** %227, i64 5
  %229 = load %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)*, %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)** %228, align 8
  %230 = call %"class.blink::SQLErrorData"* %229(%"class.blink::SQLTransactionWrapper"* %225) #9
  %231 = call noalias i8* @malloc(i64 16) #9
  %232 = bitcast i8* %231 to i32*
  %233 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %230, i64 0, i32 0
  %234 = load i32, i32* %233, align 8
  store i32 %234, i32* %232, align 8
  %235 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %230, i64 0, i32 1
  %236 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"* %235) #9
  %237 = getelementptr inbounds i8, i8* %231, i64 8
  %238 = bitcast i8* %237 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %236, %"class.WTF::StringImpl"** %238, align 8
  %239 = ptrtoint i8* %231 to i64
  %240 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 5
  %241 = getelementptr inbounds %"class.std::__1::unique_ptr.257", %"class.std::__1::unique_ptr.257"* %240, i64 0, i32 0, i32 0, i32 0
  %242 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %241, align 8
  %243 = bitcast %"class.std::__1::unique_ptr.257"* %240 to i64*
  store i64 %239, i64* %243, align 8
  %244 = icmp eq %"class.blink::SQLErrorData"* %242, null
  br i1 %244, label %313, label %245

245:                                              ; preds = %224
  %246 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %242, i64 0, i32 1, i32 0, i32 0
  %247 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %246, align 8
  %248 = icmp eq %"class.WTF::StringImpl"* %247, null
  br i1 %248, label %262, label %249

249:                                              ; preds = %245
  %250 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %247, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %251 = load atomic i32, i32* %250 monotonic, align 4
  %252 = and i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %247, i64 0, i32 0
  %255 = load i32, i32* %254, align 4
  br i1 %253, label %256, label %258

256:                                              ; preds = %249
  %257 = add i32 %255, -1
  store i32 %257, i32* %254, align 4
  br label %258

258:                                              ; preds = %256, %249
  %259 = phi i32 [ %257, %256 ], [ %255, %249 ]
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %261, label %262

261:                                              ; preds = %258
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %247) #9
  br label %262

262:                                              ; preds = %261, %258, %245
  %263 = bitcast %"class.blink::SQLErrorData"* %242 to i8*
  call void @free(i8* %263) #9
  br label %313

264:                                              ; preds = %215
  %265 = call noalias i8* @malloc(i64 16) #9
  %266 = bitcast %"class.WTF::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %266) #9
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %4, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i64 51) #9
  %267 = bitcast i8* %265 to i32*
  store i32 0, i32* %267, align 8
  %268 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"* nonnull %4) #9
  %269 = getelementptr inbounds i8, i8* %265, i64 8
  %270 = bitcast i8* %269 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %268, %"class.WTF::StringImpl"** %270, align 8
  %271 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  %272 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %271, align 8
  %273 = icmp eq %"class.WTF::StringImpl"* %272, null
  br i1 %273, label %287, label %274

274:                                              ; preds = %264
  %275 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %272, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %276 = load atomic i32, i32* %275 monotonic, align 4
  %277 = and i32 %276, 2
  %278 = icmp eq i32 %277, 0
  %279 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %272, i64 0, i32 0
  %280 = load i32, i32* %279, align 4
  br i1 %278, label %281, label %283

281:                                              ; preds = %274
  %282 = add i32 %280, -1
  store i32 %282, i32* %279, align 4
  br label %283

283:                                              ; preds = %281, %274
  %284 = phi i32 [ %282, %281 ], [ %280, %274 ]
  %285 = icmp eq i32 %284, 0
  br i1 %285, label %286, label %287

286:                                              ; preds = %283
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %272) #9
  br label %287

287:                                              ; preds = %264, %283, %286
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %266) #9
  %288 = ptrtoint i8* %265 to i64
  %289 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 5
  %290 = getelementptr inbounds %"class.std::__1::unique_ptr.257", %"class.std::__1::unique_ptr.257"* %289, i64 0, i32 0, i32 0, i32 0
  %291 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %290, align 8
  %292 = bitcast %"class.std::__1::unique_ptr.257"* %289 to i64*
  store i64 %288, i64* %292, align 8
  %293 = icmp eq %"class.blink::SQLErrorData"* %291, null
  br i1 %293, label %313, label %294

294:                                              ; preds = %287
  %295 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %291, i64 0, i32 1, i32 0, i32 0
  %296 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %295, align 8
  %297 = icmp eq %"class.WTF::StringImpl"* %296, null
  br i1 %297, label %311, label %298

298:                                              ; preds = %294
  %299 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %296, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %300 = load atomic i32, i32* %299 monotonic, align 4
  %301 = and i32 %300, 2
  %302 = icmp eq i32 %301, 0
  %303 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %296, i64 0, i32 0
  %304 = load i32, i32* %303, align 4
  br i1 %302, label %305, label %307

305:                                              ; preds = %298
  %306 = add i32 %304, -1
  store i32 %306, i32* %303, align 4
  br label %307

307:                                              ; preds = %305, %298
  %308 = phi i32 [ %306, %305 ], [ %304, %298 ]
  %309 = icmp eq i32 %308, 0
  br i1 %309, label %310, label %311

310:                                              ; preds = %307
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %296) #9
  br label %311

311:                                              ; preds = %310, %307, %294
  %312 = bitcast %"class.blink::SQLErrorData"* %291 to i8*
  call void @free(i8* %312) #9
  br label %313

313:                                              ; preds = %287, %311, %224, %262
  %314 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 8
  %315 = load i8, i8* %314, align 2, !range !3
  %316 = icmp eq i8 %315, 0
  %317 = select i1 %316, i32 7, i32 9
  br label %323

318:                                              ; preds = %197, %203
  %319 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 6
  %320 = load i8, i8* %319, align 8, !range !3
  %321 = icmp eq i8 %320, 0
  %322 = select i1 %321, i32 4, i32 8
  br label %323

323:                                              ; preds = %318, %313, %178
  %324 = phi i32 [ %317, %313 ], [ %183, %178 ], [ %322, %318 ]
  %325 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %110, align 8
  %326 = icmp eq %"class.WTF::StringImpl"* %325, null
  br i1 %326, label %340, label %327

327:                                              ; preds = %323
  %328 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %325, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %329 = load atomic i32, i32* %328 monotonic, align 4
  %330 = and i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %325, i64 0, i32 0
  %333 = load i32, i32* %332, align 4
  br i1 %331, label %334, label %336

334:                                              ; preds = %327
  %335 = add i32 %333, -1
  store i32 %335, i32* %332, align 4
  br label %336

336:                                              ; preds = %334, %327
  %337 = phi i32 [ %335, %334 ], [ %333, %327 ]
  %338 = icmp eq i32 %337, 0
  br i1 %338, label %339, label %340

339:                                              ; preds = %336
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %325) #9
  br label %340

340:                                              ; preds = %323, %336, %339
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %109) #9
  br label %341

341:                                              ; preds = %340, %103
  %342 = phi i32 [ %324, %340 ], [ %107, %103 ]
  ret i32 %342
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink21SQLTransactionBackend13RunStatementsEv(%"class.blink::SQLTransactionBackend"*) #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 9
  %3 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 3, i32 0, i32 0
  %5 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 2, i32 0, i32 0
  br label %6

6:                                                ; preds = %24, %1
  %7 = load i8, i8* %2, align 1, !range !3
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %16, label %9

9:                                                ; preds = %6
  %10 = load %"class.blink::SQLiteTransaction"*, %"class.blink::SQLiteTransaction"** %3, align 8
  %11 = tail call zeroext i1 @_ZNK5blink17SQLiteTransaction21WasRolledBackBySqliteEv(%"class.blink::SQLiteTransaction"* %10) #9
  br i1 %11, label %16, label %12

12:                                               ; preds = %9
  store i8 0, i8* %2, align 1
  %13 = load %"class.blink::Database"*, %"class.blink::Database"** %4, align 8
  %14 = getelementptr inbounds %"class.blink::Database", %"class.blink::Database"* %13, i64 0, i32 13
  %15 = tail call i64 @_ZNK5blink8Database11MaximumSizeEv(%"class.blink::Database"* %13) #9
  tail call void @_ZN5blink14SQLiteDatabase14SetMaximumSizeEl(%"class.blink::SQLiteDatabase"* %14, i64 %15) #9
  br label %24

16:                                               ; preds = %6, %9
  %17 = load %"class.blink::SQLStatementBackend"*, %"class.blink::SQLStatementBackend"** %5, align 8
  %18 = icmp eq %"class.blink::SQLStatementBackend"* %17, null
  br i1 %18, label %23, label %19

19:                                               ; preds = %16
  %20 = tail call zeroext i1 @_ZNK5blink19SQLStatementBackend29LastExecutionFailedDueToQuotaEv(%"class.blink::SQLStatementBackend"* nonnull %17) #9
  br i1 %20, label %21, label %23

21:                                               ; preds = %19
  %22 = tail call i32 @_ZN5blink21SQLTransactionBackend33NextStateForCurrentStatementErrorEv(%"class.blink::SQLTransactionBackend"* %0)
  br label %27

23:                                               ; preds = %16, %19
  tail call void @_ZN5blink21SQLTransactionBackend16GetNextStatementEv(%"class.blink::SQLTransactionBackend"* %0)
  br label %24

24:                                               ; preds = %23, %12
  %25 = tail call i32 @_ZN5blink21SQLTransactionBackend34RunCurrentStatementAndGetNextStateEv(%"class.blink::SQLTransactionBackend"* %0)
  %26 = icmp eq i32 %25, 4
  br i1 %26, label %6, label %27

27:                                               ; preds = %24, %21
  %28 = phi i32 [ %22, %21 ], [ %25, %24 ]
  ret i32 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink21SQLTransactionBackend19PostflightAndCommitEv(%"class.blink::SQLTransactionBackend"*) #0 align 2 {
  %2 = alloca %"class.WTF::String", align 8
  %3 = alloca %"class.WTF::String", align 8
  %4 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 4, i32 0, i32 0
  %5 = load %"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionWrapper"** %4, align 8
  %6 = icmp eq %"class.blink::SQLTransactionWrapper"* %5, null
  br i1 %6, label %115, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.blink::SQLTransactionWrapper"* %5 to i1 (%"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionBackend"*)***
  %9 = load i1 (%"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionBackend"*)**, i1 (%"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionBackend"*)*** %8, align 8
  %10 = getelementptr inbounds i1 (%"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionBackend"*)*, i1 (%"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionBackend"*)** %9, i64 4
  %11 = load i1 (%"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionBackend"*)*, i1 (%"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionBackend"*)** %10, align 8
  %12 = tail call zeroext i1 %11(%"class.blink::SQLTransactionWrapper"* nonnull %5, %"class.blink::SQLTransactionBackend"* %0) #9
  br i1 %12, label %115, label %13

13:                                               ; preds = %7
  %14 = load %"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionWrapper"** %4, align 8
  %15 = bitcast %"class.blink::SQLTransactionWrapper"* %14 to %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)***
  %16 = load %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)**, %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)*** %15, align 8
  %17 = getelementptr inbounds %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)*, %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)** %16, i64 5
  %18 = load %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)*, %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)** %17, align 8
  %19 = tail call %"class.blink::SQLErrorData"* %18(%"class.blink::SQLTransactionWrapper"* %14) #9
  %20 = icmp eq %"class.blink::SQLErrorData"* %19, null
  br i1 %20, label %61, label %21

21:                                               ; preds = %13
  %22 = load %"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionWrapper"** %4, align 8
  %23 = bitcast %"class.blink::SQLTransactionWrapper"* %22 to %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)***
  %24 = load %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)**, %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)*** %23, align 8
  %25 = getelementptr inbounds %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)*, %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)** %24, i64 5
  %26 = load %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)*, %"class.blink::SQLErrorData"* (%"class.blink::SQLTransactionWrapper"*)** %25, align 8
  %27 = tail call %"class.blink::SQLErrorData"* %26(%"class.blink::SQLTransactionWrapper"* %22) #9
  %28 = tail call noalias i8* @malloc(i64 16) #9
  %29 = bitcast i8* %28 to i32*
  %30 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %27, i64 0, i32 0
  %31 = load i32, i32* %30, align 8
  store i32 %31, i32* %29, align 8
  %32 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %27, i64 0, i32 1
  %33 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"* %32) #9
  %34 = getelementptr inbounds i8, i8* %28, i64 8
  %35 = bitcast i8* %34 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %33, %"class.WTF::StringImpl"** %35, align 8
  %36 = ptrtoint i8* %28 to i64
  %37 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 5
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr.257", %"class.std::__1::unique_ptr.257"* %37, i64 0, i32 0, i32 0, i32 0
  %39 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %38, align 8
  %40 = bitcast %"class.std::__1::unique_ptr.257"* %37 to i64*
  store i64 %36, i64* %40, align 8
  %41 = icmp eq %"class.blink::SQLErrorData"* %39, null
  br i1 %41, label %110, label %42

42:                                               ; preds = %21
  %43 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %39, i64 0, i32 1, i32 0, i32 0
  %44 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %43, align 8
  %45 = icmp eq %"class.WTF::StringImpl"* %44, null
  br i1 %45, label %59, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = load atomic i32, i32* %47 monotonic, align 4
  %49 = and i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 0
  %52 = load i32, i32* %51, align 4
  br i1 %50, label %53, label %55

53:                                               ; preds = %46
  %54 = add i32 %52, -1
  store i32 %54, i32* %51, align 4
  br label %55

55:                                               ; preds = %53, %46
  %56 = phi i32 [ %54, %53 ], [ %52, %46 ]
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %55
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %44) #9
  br label %59

59:                                               ; preds = %58, %55, %42
  %60 = bitcast %"class.blink::SQLErrorData"* %39 to i8*
  tail call void @free(i8* %60) #9
  br label %110

61:                                               ; preds = %13
  %62 = tail call noalias i8* @malloc(i64 16) #9
  %63 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %63) #9
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %3, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i64 0, i64 0), i64 52) #9
  %64 = bitcast i8* %62 to i32*
  store i32 0, i32* %64, align 8
  %65 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"* nonnull %3) #9
  %66 = getelementptr inbounds i8, i8* %62, i64 8
  %67 = bitcast i8* %66 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %65, %"class.WTF::StringImpl"** %67, align 8
  %68 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %69 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %68, align 8
  %70 = icmp eq %"class.WTF::StringImpl"* %69, null
  br i1 %70, label %84, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %69, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %73 = load atomic i32, i32* %72 monotonic, align 4
  %74 = and i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %69, i64 0, i32 0
  %77 = load i32, i32* %76, align 4
  br i1 %75, label %78, label %80

78:                                               ; preds = %71
  %79 = add i32 %77, -1
  store i32 %79, i32* %76, align 4
  br label %80

80:                                               ; preds = %78, %71
  %81 = phi i32 [ %79, %78 ], [ %77, %71 ]
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %80
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %69) #9
  br label %84

84:                                               ; preds = %61, %80, %83
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %63) #9
  %85 = ptrtoint i8* %62 to i64
  %86 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 5
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr.257", %"class.std::__1::unique_ptr.257"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %87, align 8
  %89 = bitcast %"class.std::__1::unique_ptr.257"* %86 to i64*
  store i64 %85, i64* %89, align 8
  %90 = icmp eq %"class.blink::SQLErrorData"* %88, null
  br i1 %90, label %110, label %91

91:                                               ; preds = %84
  %92 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %88, i64 0, i32 1, i32 0, i32 0
  %93 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %92, align 8
  %94 = icmp eq %"class.WTF::StringImpl"* %93, null
  br i1 %94, label %108, label %95

95:                                               ; preds = %91
  %96 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %93, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %97 = load atomic i32, i32* %96 monotonic, align 4
  %98 = and i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %93, i64 0, i32 0
  %101 = load i32, i32* %100, align 4
  br i1 %99, label %102, label %104

102:                                              ; preds = %95
  %103 = add i32 %101, -1
  store i32 %103, i32* %100, align 4
  br label %104

104:                                              ; preds = %102, %95
  %105 = phi i32 [ %103, %102 ], [ %101, %95 ]
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %108

107:                                              ; preds = %104
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %93) #9
  br label %108

108:                                              ; preds = %107, %104, %91
  %109 = bitcast %"class.blink::SQLErrorData"* %88 to i8*
  call void @free(i8* %109) #9
  br label %110

110:                                              ; preds = %84, %108, %21, %59
  %111 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 8
  %112 = load i8, i8* %111, align 2, !range !3
  %113 = icmp eq i8 %112, 0
  %114 = select i1 %113, i32 7, i32 9
  br label %210

115:                                              ; preds = %1, %7
  %116 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 3, i32 0, i32 0
  %117 = load %"class.blink::Database"*, %"class.blink::Database"** %116, align 8
  tail call void @_ZN5blink8Database17DisableAuthorizerEv(%"class.blink::Database"* %117) #9
  %118 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %119 = load %"class.blink::SQLiteTransaction"*, %"class.blink::SQLiteTransaction"** %118, align 8
  tail call void @_ZN5blink17SQLiteTransaction6CommitEv(%"class.blink::SQLiteTransaction"* %119) #9
  %120 = load %"class.blink::Database"*, %"class.blink::Database"** %116, align 8
  tail call void @_ZN5blink8Database16EnableAuthorizerEv(%"class.blink::Database"* %120) #9
  %121 = load %"class.blink::SQLiteTransaction"*, %"class.blink::SQLiteTransaction"** %118, align 8
  %122 = getelementptr inbounds %"class.blink::SQLiteTransaction", %"class.blink::SQLiteTransaction"* %121, i64 0, i32 1
  %123 = load i8, i8* %122, align 8, !range !3
  %124 = icmp eq i8 %123, 0
  br i1 %124, label %197, label %125

125:                                              ; preds = %115
  %126 = load %"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionWrapper"** %4, align 8
  %127 = icmp eq %"class.blink::SQLTransactionWrapper"* %126, null
  br i1 %127, label %133, label %128

128:                                              ; preds = %125
  %129 = bitcast %"class.blink::SQLTransactionWrapper"* %126 to void (%"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionBackend"*)***
  %130 = load void (%"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionBackend"*)**, void (%"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionBackend"*)*** %129, align 8
  %131 = getelementptr inbounds void (%"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionBackend"*)*, void (%"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionBackend"*)** %130, i64 6
  %132 = load void (%"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionBackend"*)*, void (%"class.blink::SQLTransactionWrapper"*, %"class.blink::SQLTransactionBackend"*)** %131, align 8
  tail call void %132(%"class.blink::SQLTransactionWrapper"* nonnull %126, %"class.blink::SQLTransactionBackend"* %0) #9
  br label %133

133:                                              ; preds = %125, %128
  %134 = load %"class.blink::Database"*, %"class.blink::Database"** %116, align 8
  %135 = getelementptr inbounds %"class.blink::Database", %"class.blink::Database"* %134, i64 0, i32 13
  %136 = tail call i32 @_ZN5blink14SQLiteDatabase9LastErrorEv(%"class.blink::SQLiteDatabase"* %135) #9
  tail call void @_ZN5blink8Database17ReportSqliteErrorEi(%"class.blink::Database"* %134, i32 %136) #9
  %137 = load %"class.blink::Database"*, %"class.blink::Database"** %116, align 8
  %138 = getelementptr inbounds %"class.blink::Database", %"class.blink::Database"* %137, i64 0, i32 13
  %139 = tail call i32 @_ZN5blink14SQLiteDatabase9LastErrorEv(%"class.blink::SQLiteDatabase"* %138) #9
  %140 = load %"class.blink::Database"*, %"class.blink::Database"** %116, align 8
  %141 = getelementptr inbounds %"class.blink::Database", %"class.blink::Database"* %140, i64 0, i32 13
  %142 = tail call i8* @_ZN5blink14SQLiteDatabase12LastErrorMsgEv(%"class.blink::SQLiteDatabase"* %141) #9
  %143 = bitcast %"class.WTF::String"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %143) #9
  %144 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5, i64 0, i64 0), i32 %139, i8* %142) #9
  %145 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %144, %"class.WTF::StringImpl"** %145, align 8
  %146 = tail call noalias i8* @malloc(i64 16) #9
  %147 = bitcast i8* %146 to i32*
  store i32 1, i32* %147, align 8
  %148 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"* nonnull %2) #9
  %149 = getelementptr inbounds i8, i8* %146, i64 8
  %150 = bitcast i8* %149 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %148, %"class.WTF::StringImpl"** %150, align 8
  %151 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %145, align 8
  %152 = icmp eq %"class.WTF::StringImpl"* %151, null
  br i1 %152, label %166, label %153

153:                                              ; preds = %133
  %154 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %151, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %155 = load atomic i32, i32* %154 monotonic, align 4
  %156 = and i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %151, i64 0, i32 0
  %159 = load i32, i32* %158, align 4
  br i1 %157, label %160, label %162

160:                                              ; preds = %153
  %161 = add i32 %159, -1
  store i32 %161, i32* %158, align 4
  br label %162

162:                                              ; preds = %160, %153
  %163 = phi i32 [ %161, %160 ], [ %159, %153 ]
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %165, label %166

165:                                              ; preds = %162
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %151) #9
  br label %166

166:                                              ; preds = %133, %162, %165
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %143) #9
  %167 = ptrtoint i8* %146 to i64
  %168 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 5
  %169 = getelementptr inbounds %"class.std::__1::unique_ptr.257", %"class.std::__1::unique_ptr.257"* %168, i64 0, i32 0, i32 0, i32 0
  %170 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %169, align 8
  %171 = bitcast %"class.std::__1::unique_ptr.257"* %168 to i64*
  store i64 %167, i64* %171, align 8
  %172 = icmp eq %"class.blink::SQLErrorData"* %170, null
  br i1 %172, label %192, label %173

173:                                              ; preds = %166
  %174 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %170, i64 0, i32 1, i32 0, i32 0
  %175 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %174, align 8
  %176 = icmp eq %"class.WTF::StringImpl"* %175, null
  br i1 %176, label %190, label %177

177:                                              ; preds = %173
  %178 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %175, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %179 = load atomic i32, i32* %178 monotonic, align 4
  %180 = and i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %175, i64 0, i32 0
  %183 = load i32, i32* %182, align 4
  br i1 %181, label %184, label %186

184:                                              ; preds = %177
  %185 = add i32 %183, -1
  store i32 %185, i32* %182, align 4
  br label %186

186:                                              ; preds = %184, %177
  %187 = phi i32 [ %185, %184 ], [ %183, %177 ]
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %189, label %190

189:                                              ; preds = %186
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %175) #9
  br label %190

190:                                              ; preds = %189, %186, %173
  %191 = bitcast %"class.blink::SQLErrorData"* %170 to i8*
  call void @free(i8* %191) #9
  br label %192

192:                                              ; preds = %190, %166
  %193 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 8
  %194 = load i8, i8* %193, align 2, !range !3
  %195 = icmp eq i8 %194, 0
  %196 = select i1 %195, i32 7, i32 9
  br label %210

197:                                              ; preds = %115
  %198 = load %"class.blink::Database"*, %"class.blink::Database"** %116, align 8
  %199 = tail call zeroext i1 @_ZN5blink8Database10HadDeletesEv(%"class.blink::Database"* %198) #9
  br i1 %199, label %200, label %202

200:                                              ; preds = %197
  %201 = load %"class.blink::Database"*, %"class.blink::Database"** %116, align 8
  tail call void @_ZN5blink8Database25IncrementalVacuumIfNeededEv(%"class.blink::Database"* %201) #9
  br label %202

202:                                              ; preds = %200, %197
  %203 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 10
  %204 = load i8, i8* %203, align 4, !range !3
  %205 = icmp eq i8 %204, 0
  br i1 %205, label %210, label %206

206:                                              ; preds = %202
  %207 = load %"class.blink::Database"*, %"class.blink::Database"** %116, align 8
  %208 = tail call %"class.blink::SQLTransactionClient"* @_ZNK5blink8Database17TransactionClientEv(%"class.blink::Database"* %207) #9
  %209 = load %"class.blink::Database"*, %"class.blink::Database"** %116, align 8
  tail call void @_ZN5blink20SQLTransactionClient25DidCommitWriteTransactionEPNS_8DatabaseE(%"class.blink::SQLTransactionClient"* %208, %"class.blink::Database"* %209) #9
  br label %210

210:                                              ; preds = %206, %202, %192, %110
  %211 = phi i32 [ %196, %192 ], [ %114, %110 ], [ 12, %202 ], [ 12, %206 ]
  ret i32 %211
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink21SQLTransactionBackend19CleanupAndTerminateEv(%"class.blink::SQLTransactionBackend"*) #0 align 2 {
  tail call void @_ZN5blink21SQLTransactionBackend9DoCleanupEv(%"class.blink::SQLTransactionBackend"* %0)
  %2 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 3, i32 0, i32 0
  %3 = load %"class.blink::Database"*, %"class.blink::Database"** %2, align 8
  tail call void @_ZN5blink8Database30InProgressTransactionCompletedEv(%"class.blink::Database"* %3) #9
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink21SQLTransactionBackend36CleanupAfterTransactionErrorCallbackEv(%"class.blink::SQLTransactionBackend"* nocapture) #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 3, i32 0, i32 0
  %3 = load %"class.blink::Database"*, %"class.blink::Database"** %2, align 8
  tail call void @_ZN5blink8Database17DisableAuthorizerEv(%"class.blink::Database"* %3) #9
  %4 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %5 = load %"class.blink::SQLiteTransaction"*, %"class.blink::SQLiteTransaction"** %4, align 8
  %6 = icmp eq %"class.blink::SQLiteTransaction"* %5, null
  br i1 %6, label %12, label %7

7:                                                ; preds = %1
  tail call void @_ZN5blink17SQLiteTransaction8RollbackEv(%"class.blink::SQLiteTransaction"* nonnull %5) #9
  %8 = load %"class.blink::SQLiteTransaction"*, %"class.blink::SQLiteTransaction"** %4, align 8
  store %"class.blink::SQLiteTransaction"* null, %"class.blink::SQLiteTransaction"** %4, align 8
  %9 = icmp eq %"class.blink::SQLiteTransaction"* %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %7
  tail call void @_ZN5blink17SQLiteTransactionD1Ev(%"class.blink::SQLiteTransaction"* nonnull %8) #9
  %11 = bitcast %"class.blink::SQLiteTransaction"* %8 to i8*
  tail call void @free(i8* %11) #9
  br label %12

12:                                               ; preds = %1, %10, %7
  %13 = load %"class.blink::Database"*, %"class.blink::Database"** %2, align 8
  tail call void @_ZN5blink8Database16EnableAuthorizerEv(%"class.blink::Database"* %13) #9
  ret i32 6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink21SQLTransactionBackend19SendToFrontendStateEv(%"class.blink::SQLTransactionBackend"* nocapture readonly) #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load %"class.blink::SQLTransaction"*, %"class.blink::SQLTransaction"** %2, align 8
  %4 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 8
  tail call void @_ZN5blink14SQLTransaction21RequestTransitToStateENS_19SQLTransactionStateE(%"class.blink::SQLTransaction"* %3, i32 %5) #9
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink21SQLTransactionBackend23EnqueueStatementBackendEPNS_19SQLStatementBackendE(%"class.blink::SQLTransactionBackend"*, %"class.blink::SQLStatementBackend"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::SQLStatementBackend"*, align 8
  store %"class.blink::SQLStatementBackend"* %1, %"class.blink::SQLStatementBackend"** %3, align 8
  %4 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 14, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %4) #9
  %5 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 15
  call void @_ZN3WTF5DequeIN5blink21CrossThreadPersistentINS1_19SQLStatementBackendEEELj0ENS_18PartitionAllocatorEE9push_backIRPS3_EEvOT_(%"class.WTF::Deque.300"* %5, %"class.blink::SQLStatementBackend"** nonnull dereferenceable(8) %3)
  call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %4) #9
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF5DequeIN5blink21CrossThreadPersistentINS1_19SQLStatementBackendEEELj0ENS_18PartitionAllocatorEE9push_backIRPS3_EEvOT_(%"class.WTF::Deque.300"*, %"class.blink::SQLStatementBackend"** dereferenceable(8)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Deque.300", %"class.WTF::Deque.300"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  %6 = getelementptr inbounds %"class.WTF::Deque.300", %"class.WTF::Deque.300"* %0, i64 0, i32 2
  %7 = load i32, i32* %6, align 4
  br i1 %5, label %11, label %8

8:                                                ; preds = %2
  %9 = add i32 %7, 1
  %10 = icmp eq i32 %9, %4
  br i1 %10, label %20, label %22

11:                                               ; preds = %2
  %12 = icmp eq i32 %7, 0
  %13 = getelementptr inbounds %"class.WTF::Deque.300", %"class.WTF::Deque.300"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  br i1 %12, label %18, label %15

15:                                               ; preds = %11
  %16 = add i32 %14, -1
  %17 = icmp eq i32 %7, %16
  br i1 %17, label %20, label %22

18:                                               ; preds = %11
  %19 = icmp eq i32 %14, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %18, %15, %8
  tail call void @_ZN3WTF5DequeIN5blink21CrossThreadPersistentINS1_19SQLStatementBackendEEELj0ENS_18PartitionAllocatorEE14ExpandCapacityEv(%"class.WTF::Deque.300"* %0) #9
  %21 = load i32, i32* %6, align 4
  br label %22

22:                                               ; preds = %8, %15, %18, %20
  %23 = phi i32 [ %7, %8 ], [ %7, %15 ], [ 0, %18 ], [ %21, %20 ]
  %24 = getelementptr inbounds %"class.WTF::Deque.300", %"class.WTF::Deque.300"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %25 = load %"class.blink::CrossThreadPersistent.264"*, %"class.blink::CrossThreadPersistent.264"** %24, align 8
  %26 = zext i32 %23 to i64
  %27 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %25, i64 %26
  %28 = getelementptr inbounds %"class.WTF::Deque.300", %"class.WTF::Deque.300"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %29 = load i32, i32* %28, align 8
  %30 = add i32 %29, -1
  %31 = icmp eq i32 %23, %30
  %32 = add i32 %23, 1
  %33 = select i1 %31, i32 0, i32 %32
  store i32 %33, i32* %6, align 4
  %34 = load %"class.blink::SQLStatementBackend"*, %"class.blink::SQLStatementBackend"** %1, align 8
  %35 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %27, i64 0, i32 0, i32 0
  store %"class.blink::SQLStatementBackend"* %34, %"class.blink::SQLStatementBackend"** %35, align 8
  %36 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %25, i64 %26, i32 0, i32 1
  %37 = getelementptr inbounds %"class.blink::CrossThreadPersistentNodePtr", %"class.blink::CrossThreadPersistentNodePtr"* %36, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.blink::PersistentNode"* null, %"class.blink::PersistentNode"** %37, align 8
  %38 = ptrtoint %"class.blink::SQLStatementBackend"* %34 to i64
  switch i64 %38, label %39 [
    i64 0, label %58
    i64 -1, label %58
  ]

39:                                               ; preds = %22
  %40 = tail call dereferenceable(40) %"class.WTF::Mutex"* @_ZN5blink11ProcessHeap26CrossThreadPersistentMutexEv() #9
  %41 = getelementptr inbounds %"class.WTF::Mutex", %"class.WTF::Mutex"* %40, i64 0, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %41) #9
  %42 = tail call dereferenceable(16) %"class.blink::CrossThreadPersistentRegion"* @_ZN5blink11ProcessHeap30GetCrossThreadPersistentRegionEv() #9
  %43 = getelementptr inbounds %"class.blink::CrossThreadPersistentRegion", %"class.blink::CrossThreadPersistentRegion"* %42, i64 0, i32 0, i32 0
  %44 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %43, align 8
  %45 = icmp eq %"class.blink::PersistentNode"* %44, null
  br i1 %45, label %46, label %49, !prof !2

46:                                               ; preds = %39
  %47 = getelementptr inbounds %"class.blink::CrossThreadPersistentRegion", %"class.blink::CrossThreadPersistentRegion"* %42, i64 0, i32 0
  tail call void @_ZN5blink20PersistentRegionBase15EnsureNodeSlotsEv(%"class.blink::PersistentRegionBase"* %47) #9
  %48 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %43, align 8
  br label %49

49:                                               ; preds = %46, %39
  %50 = phi %"class.blink::PersistentNode"* [ %48, %46 ], [ %44, %39 ]
  %51 = bitcast %"class.blink::PersistentNode"* %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = bitcast %"class.blink::CrossThreadPersistentRegion"* %42 to i64*
  store i64 %52, i64* %53, align 8
  %54 = bitcast %"class.blink::PersistentNode"* %50 to %"class.blink::CrossThreadPersistent.264"**
  store %"class.blink::CrossThreadPersistent.264"* %27, %"class.blink::CrossThreadPersistent.264"** %54, align 8
  %55 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %50, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* @_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_19SQLStatementBackendELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE1EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv, void (%"class.blink::Visitor"*, i8*)** %55, align 8
  %56 = ptrtoint %"class.blink::PersistentNode"* %50 to i64
  %57 = bitcast %"class.blink::CrossThreadPersistentNodePtr"* %36 to i64*
  store atomic i64 %56, i64* %57 release, align 8
  tail call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %41) #9
  br label %58

58:                                               ; preds = %22, %22, %49
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink21SQLTransactionBackend34ComputeNextStateAndCleanupIfNeededEv(%"class.blink::SQLTransactionBackend"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 3, i32 0, i32 0
  %3 = load %"class.blink::Database"*, %"class.blink::Database"** %2, align 8
  %4 = getelementptr inbounds %"class.blink::Database", %"class.blink::Database"* %3, i64 0, i32 10, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i8, i8* %4 acquire, align 1
  %6 = and i8 %5, 1
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %12, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 0, i32 1
  store i32 %10, i32* %11, align 8
  store i32 1, i32* %9, align 4
  br label %28

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %28, label %16

16:                                               ; preds = %12
  store i32 0, i32* %13, align 8
  %17 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %18 = load %"class.blink::SQLiteTransaction"*, %"class.blink::SQLiteTransaction"** %17, align 8
  %19 = icmp eq %"class.blink::SQLiteTransaction"* %18, null
  br i1 %19, label %25, label %20

20:                                               ; preds = %16
  tail call void @_ZN5blink17SQLiteTransaction4StopEv(%"class.blink::SQLiteTransaction"* nonnull %18) #9
  %21 = load %"class.blink::SQLiteTransaction"*, %"class.blink::SQLiteTransaction"** %17, align 8
  store %"class.blink::SQLiteTransaction"* null, %"class.blink::SQLiteTransaction"** %17, align 8
  %22 = icmp eq %"class.blink::SQLiteTransaction"* %21, null
  br i1 %22, label %25, label %23

23:                                               ; preds = %20
  tail call void @_ZN5blink17SQLiteTransactionD1Ev(%"class.blink::SQLiteTransaction"* nonnull %21) #9
  %24 = bitcast %"class.blink::SQLiteTransaction"* %21 to i8*
  tail call void @free(i8* %24) #9
  br label %25

25:                                               ; preds = %16, %23, %20
  %26 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 1, i32 0, i32 0
  %27 = load %"class.blink::SQLTransaction"*, %"class.blink::SQLTransaction"** %26, align 8
  tail call void @_ZN5blink14SQLTransaction21RequestTransitToStateENS_19SQLTransactionStateE(%"class.blink::SQLTransaction"* %27, i32 0) #9
  tail call void @_ZN5blink21SQLTransactionBackend9DoCleanupEv(%"class.blink::SQLTransactionBackend"* %0)
  br label %28

28:                                               ; preds = %12, %25, %8
  ret void
}

declare void @_ZN5blink17SQLiteTransaction4StopEv(%"class.blink::SQLiteTransaction"*) local_unnamed_addr #1

declare void @_ZN5blink14SQLTransaction21RequestTransitToStateENS_19SQLTransactionStateE(%"class.blink::SQLTransaction"*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink21SQLTransactionBackend15PerformNextStepEv(%"class.blink::SQLTransactionBackend"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN5blink21SQLTransactionBackend34ComputeNextStateAndCleanupIfNeededEv(%"class.blink::SQLTransactionBackend"* %0)
  %2 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 0
  %3 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp sgt i32 %4, 1
  br i1 %5, label %6, label %34

6:                                                ; preds = %1
  %7 = bitcast %"class.blink::SQLTransactionBackend"* %0 to { i64, i64 } (%"class.blink::SQLTransactionStateMachine"*, i32)***
  %8 = bitcast %"class.blink::SQLTransactionBackend"* %0 to i8*
  br label %9

9:                                                ; preds = %30, %6
  %10 = phi i32 [ %4, %6 ], [ %32, %30 ]
  %11 = load { i64, i64 } (%"class.blink::SQLTransactionStateMachine"*, i32)**, { i64, i64 } (%"class.blink::SQLTransactionStateMachine"*, i32)*** %7, align 8
  %12 = getelementptr inbounds { i64, i64 } (%"class.blink::SQLTransactionStateMachine"*, i32)*, { i64, i64 } (%"class.blink::SQLTransactionStateMachine"*, i32)** %11, i64 2
  %13 = load { i64, i64 } (%"class.blink::SQLTransactionStateMachine"*, i32)*, { i64, i64 } (%"class.blink::SQLTransactionStateMachine"*, i32)** %12, align 8
  %14 = tail call { i64, i64 } %13(%"class.blink::SQLTransactionStateMachine"* %2, i32 %10) #9
  %15 = extractvalue { i64, i64 } %14, 0
  %16 = extractvalue { i64, i64 } %14, 1
  %17 = getelementptr inbounds i8, i8* %8, i64 %16
  %18 = bitcast i8* %17 to %"class.blink::SQLTransactionBackend"*
  %19 = and i64 %15, 1
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %28, label %21

21:                                               ; preds = %9
  %22 = bitcast i8* %17 to i8**
  %23 = load i8*, i8** %22, align 8
  %24 = add i64 %15, -1
  %25 = getelementptr i8, i8* %23, i64 %24
  %26 = bitcast i8* %25 to i32 (%"class.blink::SQLTransactionBackend"*)**
  %27 = load i32 (%"class.blink::SQLTransactionBackend"*)*, i32 (%"class.blink::SQLTransactionBackend"*)** %26, align 8
  br label %30

28:                                               ; preds = %9
  %29 = inttoptr i64 %15 to i32 (%"class.blink::SQLTransactionBackend"*)*
  br label %30

30:                                               ; preds = %28, %21
  %31 = phi i32 (%"class.blink::SQLTransactionBackend"*)* [ %27, %21 ], [ %29, %28 ]
  %32 = tail call i32 %31(%"class.blink::SQLTransactionBackend"* %18) #9
  store i32 %32, i32* %3, align 8
  %33 = icmp sgt i32 %32, 1
  br i1 %33, label %9, label %34

34:                                               ; preds = %30, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink21SQLTransactionBackend10ExecuteSQLEPNS_12SQLStatementERKN3WTF6StringERKNS3_6VectorINS_8SQLValueELj0ENS3_18PartitionAllocatorEEEi(%"class.blink::SQLTransactionBackend"*, %"class.blink::SQLStatement"*, %"class.WTF::String"* dereferenceable(8), %"class.WTF::Vector.282"* dereferenceable(16), i32) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.blink::SQLStatementBackend"*, align 8
  %7 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_19SQLStatementBackendEEEPhm(i64 64) #9
  %8 = bitcast i8* %7 to %"class.blink::SQLStatementBackend"*
  tail call void @_ZN5blink19SQLStatementBackendC1EPNS_12SQLStatementERKN3WTF6StringERKNS3_6VectorINS_8SQLValueELj0ENS3_18PartitionAllocatorEEEi(%"class.blink::SQLStatementBackend"* %8, %"class.blink::SQLStatement"* %1, %"class.WTF::String"* dereferenceable(8) %2, %"class.WTF::Vector.282"* dereferenceable(16) %3, i32 %4) #9
  %9 = getelementptr inbounds i8, i8* %7, i64 -4
  %10 = bitcast i8* %9 to i16*
  %11 = load atomic i16, i16* %10 monotonic, align 2
  %12 = or i16 %11, 1
  store atomic i16 %12, i16* %10 release, align 2
  %13 = bitcast %"class.blink::SQLStatementBackend"** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13)
  %14 = bitcast %"class.blink::SQLStatementBackend"** %6 to i8**
  store i8* %7, i8** %14, align 8
  %15 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 14, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %15) #9
  %16 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 15
  call void @_ZN3WTF5DequeIN5blink21CrossThreadPersistentINS1_19SQLStatementBackendEEELj0ENS_18PartitionAllocatorEE9push_backIRPS3_EEvOT_(%"class.WTF::Deque.300"* %16, %"class.blink::SQLStatementBackend"** nonnull dereferenceable(8) %6) #9
  call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %15) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink21SQLTransactionBackend34NotifyDatabaseThreadIsShuttingDownEv(%"class.blink::SQLTransactionBackend"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN5blink21SQLTransactionBackend9DoCleanupEv(%"class.blink::SQLTransactionBackend"* %0)
  ret void
}

declare void @_ZN5blink25SQLTransactionCoordinator11AcquireLockEPNS_21SQLTransactionBackendE(%"class.blink::SQLTransactionCoordinator"*, %"class.blink::SQLTransactionBackend"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink21SQLTransactionBackend12LockAcquiredEv(%"class.blink::SQLTransactionBackend"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 11
  store i8 1, i8* %2, align 1
  %3 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 0, i32 2
  store i32 3, i32* %3, align 4
  %4 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 3, i32 0, i32 0
  %5 = load %"class.blink::Database"*, %"class.blink::Database"** %4, align 8
  tail call void @_ZN5blink8Database23ScheduleTransactionStepEPNS_21SQLTransactionBackendE(%"class.blink::Database"* %5, %"class.blink::SQLTransactionBackend"* %0) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink21SQLTransactionBackend21RequestTransitToStateENS_19SQLTransactionStateE(%"class.blink::SQLTransactionBackend"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 0, i32 2
  store i32 %1, i32* %3, align 4
  %4 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 3, i32 0, i32 0
  %5 = load %"class.blink::Database"*, %"class.blink::Database"** %4, align 8
  tail call void @_ZN5blink8Database23ScheduleTransactionStepEPNS_21SQLTransactionBackendE(%"class.blink::Database"* %5, %"class.blink::SQLTransactionBackend"* %0) #9
  ret void
}

declare void @_ZN5blink14SQLiteDatabase14SetMaximumSizeEl(%"class.blink::SQLiteDatabase"*, i64) local_unnamed_addr #1

declare i64 @_ZNK5blink8Database11MaximumSizeEv(%"class.blink::Database"*) local_unnamed_addr #1

declare void @_ZN5blink8Database12ResetDeletesEv(%"class.blink::Database"*) local_unnamed_addr #1

declare void @_ZN5blink8Database17DisableAuthorizerEv(%"class.blink::Database"*) local_unnamed_addr #1

declare void @_ZN5blink17SQLiteTransaction5beginEv(%"class.blink::SQLiteTransaction"*) local_unnamed_addr #1

declare void @_ZN5blink8Database16EnableAuthorizerEv(%"class.blink::Database"*) local_unnamed_addr #1

declare void @_ZN5blink8Database17ReportSqliteErrorEi(%"class.blink::Database"*, i32) local_unnamed_addr #1

declare i32 @_ZN5blink14SQLiteDatabase9LastErrorEv(%"class.blink::SQLiteDatabase"*) local_unnamed_addr #1

declare i8* @_ZN5blink14SQLiteDatabase12LastErrorMsgEv(%"class.blink::SQLiteDatabase"*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN5blink21SQLTransactionBackend28NextStateForTransactionErrorEv(%"class.blink::SQLTransactionBackend"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 8
  %3 = load i8, i8* %2, align 2, !range !3
  %4 = icmp eq i8 %3, 0
  %5 = select i1 %4, i32 7, i32 9
  ret i32 %5
}

declare zeroext i1 @_ZN5blink8Database30GetActualVersionForTransactionERN3WTF6StringE(%"class.blink::Database"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #1

declare zeroext i1 @_ZNK5blink17SQLiteTransaction21WasRolledBackBySqliteEv(%"class.blink::SQLiteTransaction"*) local_unnamed_addr #1

declare zeroext i1 @_ZNK5blink19SQLStatementBackend29LastExecutionFailedDueToQuotaEv(%"class.blink::SQLStatementBackend"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink21SQLTransactionBackend33NextStateForCurrentStatementErrorEv(%"class.blink::SQLTransactionBackend"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::String", align 8
  %3 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load %"class.blink::SQLStatementBackend"*, %"class.blink::SQLStatementBackend"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %4, i64 0, i32 4
  %6 = load i8, i8* %5, align 1, !range !3
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %10 = load %"class.blink::SQLiteTransaction"*, %"class.blink::SQLiteTransaction"** %9, align 8
  %11 = tail call zeroext i1 @_ZNK5blink17SQLiteTransaction21WasRolledBackBySqliteEv(%"class.blink::SQLiteTransaction"* %10) #9
  br i1 %11, label %12, label %108

12:                                               ; preds = %8
  %13 = load %"class.blink::SQLStatementBackend"*, %"class.blink::SQLStatementBackend"** %3, align 8
  br label %14

14:                                               ; preds = %12, %1
  %15 = phi %"class.blink::SQLStatementBackend"* [ %13, %12 ], [ %4, %1 ]
  %16 = tail call %"class.blink::SQLErrorData"* @_ZNK5blink19SQLStatementBackend8SqlErrorEv(%"class.blink::SQLStatementBackend"* %15) #9
  %17 = icmp eq %"class.blink::SQLErrorData"* %16, null
  br i1 %17, label %54, label %18

18:                                               ; preds = %14
  %19 = load %"class.blink::SQLStatementBackend"*, %"class.blink::SQLStatementBackend"** %3, align 8
  %20 = tail call %"class.blink::SQLErrorData"* @_ZNK5blink19SQLStatementBackend8SqlErrorEv(%"class.blink::SQLStatementBackend"* %19) #9
  %21 = tail call noalias i8* @malloc(i64 16) #9
  %22 = bitcast i8* %21 to i32*
  %23 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %20, i64 0, i32 0
  %24 = load i32, i32* %23, align 8
  store i32 %24, i32* %22, align 8
  %25 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %20, i64 0, i32 1
  %26 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"* %25) #9
  %27 = getelementptr inbounds i8, i8* %21, i64 8
  %28 = bitcast i8* %27 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %26, %"class.WTF::StringImpl"** %28, align 8
  %29 = ptrtoint i8* %21 to i64
  %30 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 5
  %31 = getelementptr inbounds %"class.std::__1::unique_ptr.257", %"class.std::__1::unique_ptr.257"* %30, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %31, align 8
  %33 = bitcast %"class.std::__1::unique_ptr.257"* %30 to i64*
  store i64 %29, i64* %33, align 8
  %34 = icmp eq %"class.blink::SQLErrorData"* %32, null
  br i1 %34, label %103, label %35

35:                                               ; preds = %18
  %36 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %32, i64 0, i32 1, i32 0, i32 0
  %37 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %36, align 8
  %38 = icmp eq %"class.WTF::StringImpl"* %37, null
  br i1 %38, label %52, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  br i1 %43, label %46, label %48

46:                                               ; preds = %39
  %47 = add i32 %45, -1
  store i32 %47, i32* %44, align 4
  br label %48

48:                                               ; preds = %46, %39
  %49 = phi i32 [ %47, %46 ], [ %45, %39 ]
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %52

51:                                               ; preds = %48
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %37) #9
  br label %52

52:                                               ; preds = %51, %48, %35
  %53 = bitcast %"class.blink::SQLErrorData"* %32 to i8*
  tail call void @free(i8* %53) #9
  br label %103

54:                                               ; preds = %14
  %55 = tail call noalias i8* @malloc(i64 16) #9
  %56 = bitcast %"class.WTF::String"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #9
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0), i64 31) #9
  %57 = bitcast i8* %55 to i32*
  store i32 1, i32* %57, align 8
  %58 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"* nonnull %2) #9
  %59 = getelementptr inbounds i8, i8* %55, i64 8
  %60 = bitcast i8* %59 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %58, %"class.WTF::StringImpl"** %60, align 8
  %61 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %62 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %61, align 8
  %63 = icmp eq %"class.WTF::StringImpl"* %62, null
  br i1 %63, label %77, label %64

64:                                               ; preds = %54
  %65 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = load atomic i32, i32* %65 monotonic, align 4
  %67 = and i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 0, i32 0
  %70 = load i32, i32* %69, align 4
  br i1 %68, label %71, label %73

71:                                               ; preds = %64
  %72 = add i32 %70, -1
  store i32 %72, i32* %69, align 4
  br label %73

73:                                               ; preds = %71, %64
  %74 = phi i32 [ %72, %71 ], [ %70, %64 ]
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %77

76:                                               ; preds = %73
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %62) #9
  br label %77

77:                                               ; preds = %54, %73, %76
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #9
  %78 = ptrtoint i8* %55 to i64
  %79 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 5
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr.257", %"class.std::__1::unique_ptr.257"* %79, i64 0, i32 0, i32 0, i32 0
  %81 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %80, align 8
  %82 = bitcast %"class.std::__1::unique_ptr.257"* %79 to i64*
  store i64 %78, i64* %82, align 8
  %83 = icmp eq %"class.blink::SQLErrorData"* %81, null
  br i1 %83, label %103, label %84

84:                                               ; preds = %77
  %85 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %81, i64 0, i32 1, i32 0, i32 0
  %86 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %85, align 8
  %87 = icmp eq %"class.WTF::StringImpl"* %86, null
  br i1 %87, label %101, label %88

88:                                               ; preds = %84
  %89 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %90 = load atomic i32, i32* %89 monotonic, align 4
  %91 = and i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 0
  %94 = load i32, i32* %93, align 4
  br i1 %92, label %95, label %97

95:                                               ; preds = %88
  %96 = add i32 %94, -1
  store i32 %96, i32* %93, align 4
  br label %97

97:                                               ; preds = %95, %88
  %98 = phi i32 [ %96, %95 ], [ %94, %88 ]
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %101

100:                                              ; preds = %97
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %86) #9
  br label %101

101:                                              ; preds = %100, %97, %84
  %102 = bitcast %"class.blink::SQLErrorData"* %81 to i8*
  call void @free(i8* %102) #9
  br label %103

103:                                              ; preds = %77, %101, %18, %52
  %104 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 8
  %105 = load i8, i8* %104, align 2, !range !3
  %106 = icmp eq i8 %105, 0
  %107 = select i1 %106, i32 7, i32 9
  br label %108

108:                                              ; preds = %8, %103
  %109 = phi i32 [ %107, %103 ], [ 10, %8 ]
  ret i32 %109
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink21SQLTransactionBackend16GetNextStatementEv(%"class.blink::SQLTransactionBackend"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.blink::CrossThreadPersistent.264", align 8
  %3 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 2
  %4 = tail call dereferenceable(40) %"class.WTF::Mutex"* @_ZN5blink11ProcessHeap26CrossThreadPersistentMutexEv() #9
  %5 = getelementptr inbounds %"class.WTF::Mutex", %"class.WTF::Mutex"* %4, i64 0, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %5) #9
  %6 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %3, i64 0, i32 0, i32 0
  store %"class.blink::SQLStatementBackend"* null, %"class.blink::SQLStatementBackend"** %6, align 8
  %7 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 2, i32 0, i32 1
  %8 = bitcast %"class.blink::CrossThreadPersistentNodePtr"* %7 to i64*
  %9 = load atomic i64, i64* %8 acquire, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %23, label %11

11:                                               ; preds = %1
  %12 = tail call dereferenceable(16) %"class.blink::CrossThreadPersistentRegion"* @_ZN5blink11ProcessHeap30GetCrossThreadPersistentRegionEv() #9
  %13 = load atomic i64, i64* %8 monotonic, align 8
  %14 = inttoptr i64 %13 to %"class.blink::PersistentNode"*
  %15 = icmp eq i64 %13, 0
  br i1 %15, label %22, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.blink::CrossThreadPersistentRegion", %"class.blink::CrossThreadPersistentRegion"* %12, i64 0, i32 0, i32 0
  %18 = bitcast %"class.blink::CrossThreadPersistentRegion"* %12 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = inttoptr i64 %13 to i64*
  store i64 %19, i64* %20, align 8
  %21 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %14, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* null, void (%"class.blink::Visitor"*, i8*)** %21, align 8
  store %"class.blink::PersistentNode"* %14, %"class.blink::PersistentNode"** %17, align 8
  br label %22

22:                                               ; preds = %16, %11
  store atomic i64 0, i64* %8 release, align 8
  br label %23

23:                                               ; preds = %1, %22
  tail call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %5) #9
  %24 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 14, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %24) #9
  %25 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 15, i32 1
  %26 = load i32, i32* %25, align 8
  %27 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 15, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %26, %28
  br i1 %29, label %57, label %30

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 15
  %32 = bitcast %"class.blink::CrossThreadPersistent.264"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32) #9
  call void @_ZN3WTF5DequeIN5blink21CrossThreadPersistentINS1_19SQLStatementBackendEEELj0ENS_18PartitionAllocatorEE9TakeFirstEv(%"class.blink::CrossThreadPersistent.264"* nonnull sret %2, %"class.WTF::Deque.300"* %31)
  %33 = call dereferenceable(40) %"class.WTF::Mutex"* @_ZN5blink11ProcessHeap26CrossThreadPersistentMutexEv() #9
  %34 = getelementptr inbounds %"class.WTF::Mutex", %"class.WTF::Mutex"* %33, i64 0, i32 0
  call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %34) #9
  %35 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %3, i64 0, i32 0
  %36 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %2, i64 0, i32 0, i32 0
  %37 = load %"class.blink::SQLStatementBackend"*, %"class.blink::SQLStatementBackend"** %36, align 8
  call void @_ZN5blink14PersistentBaseINS_19SQLStatementBackendELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE1EE12AssignUnsafeEPS1_(%"class.blink::PersistentBase.265"* %35, %"class.blink::SQLStatementBackend"* %37) #9
  call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %34) #9
  %38 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %2, i64 0, i32 0, i32 1
  %39 = bitcast %"class.blink::CrossThreadPersistentNodePtr"* %38 to i64*
  %40 = load atomic i64, i64* %39 acquire, align 8
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %56, label %42

42:                                               ; preds = %30
  %43 = call dereferenceable(40) %"class.WTF::Mutex"* @_ZN5blink11ProcessHeap26CrossThreadPersistentMutexEv() #9
  %44 = getelementptr inbounds %"class.WTF::Mutex", %"class.WTF::Mutex"* %43, i64 0, i32 0
  call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %44) #9
  %45 = call dereferenceable(16) %"class.blink::CrossThreadPersistentRegion"* @_ZN5blink11ProcessHeap30GetCrossThreadPersistentRegionEv() #9
  %46 = load atomic i64, i64* %39 monotonic, align 8
  %47 = inttoptr i64 %46 to %"class.blink::PersistentNode"*
  %48 = icmp eq i64 %46, 0
  br i1 %48, label %55, label %49

49:                                               ; preds = %42
  %50 = getelementptr inbounds %"class.blink::CrossThreadPersistentRegion", %"class.blink::CrossThreadPersistentRegion"* %45, i64 0, i32 0, i32 0
  %51 = bitcast %"class.blink::CrossThreadPersistentRegion"* %45 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = inttoptr i64 %46 to i64*
  store i64 %52, i64* %53, align 8
  %54 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %47, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* null, void (%"class.blink::Visitor"*, i8*)** %54, align 8
  store %"class.blink::PersistentNode"* %47, %"class.blink::PersistentNode"** %50, align 8
  br label %55

55:                                               ; preds = %49, %42
  store atomic i64 0, i64* %39 release, align 8
  call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %44) #9
  br label %56

56:                                               ; preds = %30, %55
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32) #9
  br label %57

57:                                               ; preds = %56, %23
  call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %24) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink21SQLTransactionBackend34RunCurrentStatementAndGetNextStateEv(%"class.blink::SQLTransactionBackend"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 2, i32 0, i32 0
  %3 = load %"class.blink::SQLStatementBackend"*, %"class.blink::SQLStatementBackend"** %2, align 8
  %4 = icmp eq %"class.blink::SQLStatementBackend"* %3, null
  br i1 %4, label %34, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 3, i32 0, i32 0
  %7 = load %"class.blink::Database"*, %"class.blink::Database"** %6, align 8
  tail call void @_ZN5blink8Database15ResetAuthorizerEv(%"class.blink::Database"* %7) #9
  %8 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 13
  %9 = load i8, i8* %8, align 1, !range !3
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %5
  %12 = load %"class.blink::SQLStatementBackend"*, %"class.blink::SQLStatementBackend"** %2, align 8
  %13 = load %"class.blink::Database"*, %"class.blink::Database"** %6, align 8
  tail call void @_ZN5blink19SQLStatementBackend25SetVersionMismatchedErrorEPNS_8DatabaseE(%"class.blink::SQLStatementBackend"* %12, %"class.blink::Database"* %13) #9
  br label %14

14:                                               ; preds = %5, %11
  %15 = load %"class.blink::SQLStatementBackend"*, %"class.blink::SQLStatementBackend"** %2, align 8
  %16 = load %"class.blink::Database"*, %"class.blink::Database"** %6, align 8
  %17 = tail call zeroext i1 @_ZN5blink19SQLStatementBackend7ExecuteEPNS_8DatabaseE(%"class.blink::SQLStatementBackend"* %15, %"class.blink::Database"* %16) #9
  br i1 %17, label %18, label %29

18:                                               ; preds = %14
  %19 = load %"class.blink::Database"*, %"class.blink::Database"** %6, align 8
  %20 = tail call zeroext i1 @_ZN5blink8Database25LastActionChangedDatabaseEv(%"class.blink::Database"* %19) #9
  br i1 %20, label %21, label %23

21:                                               ; preds = %18
  %22 = getelementptr inbounds %"class.blink::SQLTransactionBackend", %"class.blink::SQLTransactionBackend"* %0, i64 0, i32 10
  store i8 1, i8* %22, align 4
  br label %23

23:                                               ; preds = %21, %18
  %24 = load %"class.blink::SQLStatementBackend"*, %"class.blink::SQLStatementBackend"** %2, align 8
  %25 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %24, i64 0, i32 3
  %26 = load i8, i8* %25, align 8, !range !3
  %27 = icmp eq i8 %26, 0
  %28 = select i1 %27, i32 4, i32 10
  br label %34

29:                                               ; preds = %14
  %30 = load %"class.blink::SQLStatementBackend"*, %"class.blink::SQLStatementBackend"** %2, align 8
  %31 = tail call zeroext i1 @_ZNK5blink19SQLStatementBackend29LastExecutionFailedDueToQuotaEv(%"class.blink::SQLStatementBackend"* %30) #9
  br i1 %31, label %34, label %32

32:                                               ; preds = %29
  %33 = tail call i32 @_ZN5blink21SQLTransactionBackend33NextStateForCurrentStatementErrorEv(%"class.blink::SQLTransactionBackend"* %0)
  br label %34

34:                                               ; preds = %1, %29, %23, %32
  %35 = phi i32 [ %33, %32 ], [ 5, %1 ], [ %28, %23 ], [ 11, %29 ]
  ret i32 %35
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF5DequeIN5blink21CrossThreadPersistentINS1_19SQLStatementBackendEEELj0ENS_18PartitionAllocatorEE9TakeFirstEv(%"class.blink::CrossThreadPersistent.264"* noalias sret, %"class.WTF::Deque.300"*) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Deque.300", %"class.WTF::Deque.300"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load %"class.blink::CrossThreadPersistent.264"*, %"class.blink::CrossThreadPersistent.264"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::Deque.300", %"class.WTF::Deque.300"* %1, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %0, i64 0, i32 0
  %9 = bitcast %"class.blink::CrossThreadPersistent.264"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 16, i1 false) #9
  %10 = tail call dereferenceable(40) %"class.WTF::Mutex"* @_ZN5blink11ProcessHeap26CrossThreadPersistentMutexEv() #9
  %11 = getelementptr inbounds %"class.WTF::Mutex", %"class.WTF::Mutex"* %10, i64 0, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %11) #9
  %12 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %4, i64 %7, i32 0, i32 0
  %13 = load %"class.blink::SQLStatementBackend"*, %"class.blink::SQLStatementBackend"** %12, align 8
  tail call void @_ZN5blink14PersistentBaseINS_19SQLStatementBackendELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE1EE12AssignUnsafeEPS1_(%"class.blink::PersistentBase.265"* %8, %"class.blink::SQLStatementBackend"* %13) #9
  tail call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %11) #9
  %14 = load %"class.blink::CrossThreadPersistent.264"*, %"class.blink::CrossThreadPersistent.264"** %3, align 8
  %15 = load i32, i32* %5, align 8
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %14, i64 %16
  %18 = add i32 %15, 1
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %14, i64 %19
  br label %21

21:                                               ; preds = %41, %2
  %22 = phi %"class.blink::CrossThreadPersistent.264"* [ %42, %41 ], [ %17, %2 ]
  %23 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %22, i64 0, i32 0, i32 1
  %24 = bitcast %"class.blink::CrossThreadPersistentNodePtr"* %23 to i64*
  %25 = load atomic i64, i64* %24 acquire, align 8
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %41, label %27

27:                                               ; preds = %21
  %28 = tail call dereferenceable(40) %"class.WTF::Mutex"* @_ZN5blink11ProcessHeap26CrossThreadPersistentMutexEv() #9
  %29 = getelementptr inbounds %"class.WTF::Mutex", %"class.WTF::Mutex"* %28, i64 0, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %29) #9
  %30 = tail call dereferenceable(16) %"class.blink::CrossThreadPersistentRegion"* @_ZN5blink11ProcessHeap30GetCrossThreadPersistentRegionEv() #9
  %31 = load atomic i64, i64* %24 monotonic, align 8
  %32 = inttoptr i64 %31 to %"class.blink::PersistentNode"*
  %33 = icmp eq i64 %31, 0
  br i1 %33, label %40, label %34

34:                                               ; preds = %27
  %35 = getelementptr inbounds %"class.blink::CrossThreadPersistentRegion", %"class.blink::CrossThreadPersistentRegion"* %30, i64 0, i32 0, i32 0
  %36 = bitcast %"class.blink::CrossThreadPersistentRegion"* %30 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = inttoptr i64 %31 to i64*
  store i64 %37, i64* %38, align 8
  %39 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %32, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* null, void (%"class.blink::Visitor"*, i8*)** %39, align 8
  store %"class.blink::PersistentNode"* %32, %"class.blink::PersistentNode"** %35, align 8
  br label %40

40:                                               ; preds = %34, %27
  store atomic i64 0, i64* %24 release, align 8
  tail call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %29) #9
  br label %41

41:                                               ; preds = %40, %21
  %42 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %22, i64 1
  %43 = icmp eq %"class.blink::CrossThreadPersistent.264"* %42, %20
  br i1 %43, label %44, label %21

44:                                               ; preds = %41
  %45 = load i32, i32* %5, align 8
  %46 = add i32 %45, 1
  %47 = getelementptr inbounds %"class.WTF::Deque.300", %"class.WTF::Deque.300"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %48 = load i32, i32* %47, align 8
  %49 = add i32 %48, -1
  %50 = icmp eq i32 %45, %49
  %51 = select i1 %50, i32 0, i32 %46
  store i32 %51, i32* %5, align 8
  ret void
}

declare void @_ZN5blink8Database15ResetAuthorizerEv(%"class.blink::Database"*) local_unnamed_addr #1

declare void @_ZN5blink19SQLStatementBackend25SetVersionMismatchedErrorEPNS_8DatabaseE(%"class.blink::SQLStatementBackend"*, %"class.blink::Database"*) local_unnamed_addr #1

declare zeroext i1 @_ZN5blink19SQLStatementBackend7ExecuteEPNS_8DatabaseE(%"class.blink::SQLStatementBackend"*, %"class.blink::Database"*) local_unnamed_addr #1

declare zeroext i1 @_ZN5blink8Database25LastActionChangedDatabaseEv(%"class.blink::Database"*) local_unnamed_addr #1

declare %"class.blink::SQLErrorData"* @_ZNK5blink19SQLStatementBackend8SqlErrorEv(%"class.blink::SQLStatementBackend"*) local_unnamed_addr #1

declare void @_ZN5blink17SQLiteTransaction6CommitEv(%"class.blink::SQLiteTransaction"*) local_unnamed_addr #1

declare zeroext i1 @_ZN5blink8Database10HadDeletesEv(%"class.blink::Database"*) local_unnamed_addr #1

declare void @_ZN5blink8Database25IncrementalVacuumIfNeededEv(%"class.blink::Database"*) local_unnamed_addr #1

declare %"class.blink::SQLTransactionClient"* @_ZNK5blink8Database17TransactionClientEv(%"class.blink::Database"*) local_unnamed_addr #1

declare void @_ZN5blink20SQLTransactionClient25DidCommitWriteTransactionEPNS_8DatabaseE(%"class.blink::SQLTransactionClient"*, %"class.blink::Database"*) local_unnamed_addr #1

declare void @_ZN5blink8Database30InProgressTransactionCompletedEv(%"class.blink::Database"*) local_unnamed_addr #1

declare void @_ZN5blink17SQLiteTransaction8RollbackEv(%"class.blink::SQLiteTransaction"*) local_unnamed_addr #1

declare void @_ZN5blink8Database23ScheduleTransactionStepEPNS_21SQLTransactionBackendE(%"class.blink::Database"*, %"class.blink::SQLTransactionBackend"*) local_unnamed_addr #1

declare void @_ZN3WTF9MutexBaseC2Eb(%"class.WTF::MutexBase"*, i1 zeroext) unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF5DequeIN5blink21CrossThreadPersistentINS1_19SQLStatementBackendEEELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque.300"*) local_unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.WTF::Deque.300", %"class.WTF::Deque.300"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.WTF::Deque.300", %"class.WTF::Deque.300"* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp ugt i32 %3, %5
  %7 = getelementptr inbounds %"class.WTF::Deque.300", %"class.WTF::Deque.300"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %"class.blink::CrossThreadPersistent.264"*, %"class.blink::CrossThreadPersistent.264"** %7, align 8
  %9 = zext i32 %5 to i64
  %10 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %8, i64 %9
  br i1 %6, label %39, label %11

11:                                               ; preds = %1
  %12 = icmp eq i32 %3, %5
  br i1 %12, label %101, label %13

13:                                               ; preds = %11
  %14 = zext i32 %3 to i64
  %15 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %8, i64 %14
  br label %16

16:                                               ; preds = %13, %36
  %17 = phi %"class.blink::CrossThreadPersistent.264"* [ %37, %36 ], [ %15, %13 ]
  %18 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %17, i64 0, i32 0, i32 1
  %19 = bitcast %"class.blink::CrossThreadPersistentNodePtr"* %18 to i64*
  %20 = load atomic i64, i64* %19 acquire, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %36, label %22

22:                                               ; preds = %16
  %23 = tail call dereferenceable(40) %"class.WTF::Mutex"* @_ZN5blink11ProcessHeap26CrossThreadPersistentMutexEv() #9
  %24 = getelementptr inbounds %"class.WTF::Mutex", %"class.WTF::Mutex"* %23, i64 0, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %24) #9
  %25 = tail call dereferenceable(16) %"class.blink::CrossThreadPersistentRegion"* @_ZN5blink11ProcessHeap30GetCrossThreadPersistentRegionEv() #9
  %26 = load atomic i64, i64* %19 monotonic, align 8
  %27 = inttoptr i64 %26 to %"class.blink::PersistentNode"*
  %28 = icmp eq i64 %26, 0
  br i1 %28, label %35, label %29

29:                                               ; preds = %22
  %30 = getelementptr inbounds %"class.blink::CrossThreadPersistentRegion", %"class.blink::CrossThreadPersistentRegion"* %25, i64 0, i32 0, i32 0
  %31 = bitcast %"class.blink::CrossThreadPersistentRegion"* %25 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = inttoptr i64 %26 to i64*
  store i64 %32, i64* %33, align 8
  %34 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %27, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* null, void (%"class.blink::Visitor"*, i8*)** %34, align 8
  store %"class.blink::PersistentNode"* %27, %"class.blink::PersistentNode"** %30, align 8
  br label %35

35:                                               ; preds = %29, %22
  store atomic i64 0, i64* %19 release, align 8
  tail call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %24) #9
  br label %36

36:                                               ; preds = %35, %16
  %37 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %17, i64 1
  %38 = icmp eq %"class.blink::CrossThreadPersistent.264"* %37, %10
  br i1 %38, label %101, label %16

39:                                               ; preds = %1
  %40 = icmp eq i32 %5, 0
  br i1 %40, label %67, label %41

41:                                               ; preds = %39, %61
  %42 = phi %"class.blink::CrossThreadPersistent.264"* [ %62, %61 ], [ %8, %39 ]
  %43 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %42, i64 0, i32 0, i32 1
  %44 = bitcast %"class.blink::CrossThreadPersistentNodePtr"* %43 to i64*
  %45 = load atomic i64, i64* %44 acquire, align 8
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %61, label %47

47:                                               ; preds = %41
  %48 = tail call dereferenceable(40) %"class.WTF::Mutex"* @_ZN5blink11ProcessHeap26CrossThreadPersistentMutexEv() #9
  %49 = getelementptr inbounds %"class.WTF::Mutex", %"class.WTF::Mutex"* %48, i64 0, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %49) #9
  %50 = tail call dereferenceable(16) %"class.blink::CrossThreadPersistentRegion"* @_ZN5blink11ProcessHeap30GetCrossThreadPersistentRegionEv() #9
  %51 = load atomic i64, i64* %44 monotonic, align 8
  %52 = inttoptr i64 %51 to %"class.blink::PersistentNode"*
  %53 = icmp eq i64 %51, 0
  br i1 %53, label %60, label %54

54:                                               ; preds = %47
  %55 = getelementptr inbounds %"class.blink::CrossThreadPersistentRegion", %"class.blink::CrossThreadPersistentRegion"* %50, i64 0, i32 0, i32 0
  %56 = bitcast %"class.blink::CrossThreadPersistentRegion"* %50 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = inttoptr i64 %51 to i64*
  store i64 %57, i64* %58, align 8
  %59 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %52, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* null, void (%"class.blink::Visitor"*, i8*)** %59, align 8
  store %"class.blink::PersistentNode"* %52, %"class.blink::PersistentNode"** %55, align 8
  br label %60

60:                                               ; preds = %54, %47
  store atomic i64 0, i64* %44 release, align 8
  tail call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %49) #9
  br label %61

61:                                               ; preds = %60, %41
  %62 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %42, i64 1
  %63 = icmp eq %"class.blink::CrossThreadPersistent.264"* %62, %10
  br i1 %63, label %64, label %41

64:                                               ; preds = %61
  %65 = load %"class.blink::CrossThreadPersistent.264"*, %"class.blink::CrossThreadPersistent.264"** %7, align 8
  %66 = load i32, i32* %2, align 8
  br label %67

67:                                               ; preds = %64, %39
  %68 = phi i32 [ %66, %64 ], [ %3, %39 ]
  %69 = phi %"class.blink::CrossThreadPersistent.264"* [ %65, %64 ], [ %8, %39 ]
  %70 = getelementptr inbounds %"class.WTF::Deque.300", %"class.WTF::Deque.300"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %71 = load i32, i32* %70, align 8
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %69, i64 %72
  %74 = icmp eq i32 %68, %71
  br i1 %74, label %101, label %75

75:                                               ; preds = %67
  %76 = zext i32 %68 to i64
  %77 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %69, i64 %76
  br label %78

78:                                               ; preds = %75, %98
  %79 = phi %"class.blink::CrossThreadPersistent.264"* [ %99, %98 ], [ %77, %75 ]
  %80 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %79, i64 0, i32 0, i32 1
  %81 = bitcast %"class.blink::CrossThreadPersistentNodePtr"* %80 to i64*
  %82 = load atomic i64, i64* %81 acquire, align 8
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %98, label %84

84:                                               ; preds = %78
  %85 = tail call dereferenceable(40) %"class.WTF::Mutex"* @_ZN5blink11ProcessHeap26CrossThreadPersistentMutexEv() #9
  %86 = getelementptr inbounds %"class.WTF::Mutex", %"class.WTF::Mutex"* %85, i64 0, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %86) #9
  %87 = tail call dereferenceable(16) %"class.blink::CrossThreadPersistentRegion"* @_ZN5blink11ProcessHeap30GetCrossThreadPersistentRegionEv() #9
  %88 = load atomic i64, i64* %81 monotonic, align 8
  %89 = inttoptr i64 %88 to %"class.blink::PersistentNode"*
  %90 = icmp eq i64 %88, 0
  br i1 %90, label %97, label %91

91:                                               ; preds = %84
  %92 = getelementptr inbounds %"class.blink::CrossThreadPersistentRegion", %"class.blink::CrossThreadPersistentRegion"* %87, i64 0, i32 0, i32 0
  %93 = bitcast %"class.blink::CrossThreadPersistentRegion"* %87 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %88 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %89, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* null, void (%"class.blink::Visitor"*, i8*)** %96, align 8
  store %"class.blink::PersistentNode"* %89, %"class.blink::PersistentNode"** %92, align 8
  br label %97

97:                                               ; preds = %91, %84
  store atomic i64 0, i64* %81 release, align 8
  tail call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %86) #9
  br label %98

98:                                               ; preds = %97, %78
  %99 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %79, i64 1
  %100 = icmp eq %"class.blink::CrossThreadPersistent.264"* %99, %73
  br i1 %100, label %101, label %78

101:                                              ; preds = %36, %98, %67, %11
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #1

declare dereferenceable(40) %"class.WTF::Mutex"* @_ZN5blink11ProcessHeap26CrossThreadPersistentMutexEv() local_unnamed_addr #1

declare dereferenceable(16) %"class.blink::CrossThreadPersistentRegion"* @_ZN5blink11ProcessHeap30GetCrossThreadPersistentRegionEv() local_unnamed_addr #1

declare void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"*) local_unnamed_addr #1

declare void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN3WTF6String6FormatEPKcz(i8*, ...) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #8

declare %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"*) local_unnamed_addr #1

declare zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) local_unnamed_addr #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_14SQLTransactionELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE1EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = alloca %"class.base::Location", align 8
  %4 = bitcast i8* %1 to %"class.blink::SQLTransaction"**
  %5 = load %"class.blink::SQLTransaction"*, %"class.blink::SQLTransaction"** %4, align 8
  %6 = bitcast %"class.base::Location"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #9
  call void @_ZN4base8LocationC1Ev(%"class.base::Location"* nonnull %3) #9
  %7 = icmp eq %"class.blink::SQLTransaction"* %5, null
  br i1 %7, label %14, label %8

8:                                                ; preds = %2
  %9 = bitcast %"class.blink::SQLTransaction"* %5 to i8*
  %10 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)***
  %11 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)** %11, i64 8
  %13 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)** %12, align 8
  call void %13(%"class.blink::Visitor"* %0, i8* nonnull %9, i8* nonnull %9, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_14SQLTransactionEE5TraceEPNS_7VisitorEPKv, %"class.base::Location"* nonnull dereferenceable(32) %3) #9
  br label %14

14:                                               ; preds = %2, %8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #9
  ret void
}

declare void @_ZN4base8LocationC1Ev(%"class.base::Location"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_14SQLTransactionEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::SQLTransaction"*
  tail call void @_ZNK5blink14SQLTransaction5TraceEPNS_7VisitorE(%"class.blink::SQLTransaction"* %3, %"class.blink::Visitor"* %0) #9
  ret void
}

declare void @_ZNK5blink14SQLTransaction5TraceEPNS_7VisitorE(%"class.blink::SQLTransaction"*, %"class.blink::Visitor"*) unnamed_addr #1

declare void @_ZN5blink20PersistentRegionBase15EnsureNodeSlotsEv(%"class.blink::PersistentRegionBase"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_8DatabaseELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE1EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = alloca %"class.base::Location", align 8
  %4 = bitcast i8* %1 to %"class.blink::Database"**
  %5 = load %"class.blink::Database"*, %"class.blink::Database"** %4, align 8
  %6 = bitcast %"class.base::Location"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #9
  call void @_ZN4base8LocationC1Ev(%"class.base::Location"* nonnull %3) #9
  %7 = icmp eq %"class.blink::Database"* %5, null
  br i1 %7, label %14, label %8

8:                                                ; preds = %2
  %9 = bitcast %"class.blink::Database"* %5 to i8*
  %10 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)***
  %11 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)** %11, i64 8
  %13 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)** %12, align 8
  call void %13(%"class.blink::Visitor"* %0, i8* nonnull %9, i8* nonnull %9, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_8DatabaseEE5TraceEPNS_7VisitorEPKv, %"class.base::Location"* nonnull dereferenceable(32) %3) #9
  br label %14

14:                                               ; preds = %2, %8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_8DatabaseEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::Database"*
  tail call void @_ZNK5blink8Database5TraceEPNS_7VisitorE(%"class.blink::Database"* %3, %"class.blink::Visitor"* %0) #9
  ret void
}

declare void @_ZNK5blink8Database5TraceEPNS_7VisitorE(%"class.blink::Database"*, %"class.blink::Visitor"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_21SQLTransactionWrapperEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::SQLTransactionWrapper"*
  %4 = bitcast i8* %1 to void (%"class.blink::SQLTransactionWrapper"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::SQLTransactionWrapper"*, %"class.blink::Visitor"*)**, void (%"class.blink::SQLTransactionWrapper"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::SQLTransactionWrapper"*, %"class.blink::Visitor"*)*, void (%"class.blink::SQLTransactionWrapper"*, %"class.blink::Visitor"*)** %5, i64 2
  %7 = load void (%"class.blink::SQLTransactionWrapper"*, %"class.blink::Visitor"*)*, void (%"class.blink::SQLTransactionWrapper"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::SQLTransactionWrapper"* %3, %"class.blink::Visitor"* %0) #9
  ret void
}

; Function Attrs: nounwind
declare void @_ZN5blink17SQLiteTransactionD1Ev(%"class.blink::SQLiteTransaction"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF5DequeIN5blink21CrossThreadPersistentINS1_19SQLStatementBackendEEELj0ENS_18PartitionAllocatorEE14ExpandCapacityEv(%"class.WTF::Deque.300"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.WTF::Deque.300", %"class.WTF::Deque.300"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.WTF::Deque.300", %"class.WTF::Deque.300"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load %"class.blink::CrossThreadPersistent.264"*, %"class.blink::CrossThreadPersistent.264"** %4, align 8
  %6 = lshr i32 %3, 2
  %7 = add i32 %3, 1
  %8 = add i32 %7, %6
  %9 = icmp ugt i32 %8, 16
  %10 = select i1 %9, i32 %8, i32 16
  %11 = zext i32 %10 to i64
  %12 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink21CrossThreadPersistentINS2_19SQLStatementBackendEEEEEmm(i64 %11) #9
  %13 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink21CrossThreadPersistentINS2_19SQLStatementBackendEEEEEmm(i64 %11) #9
  %14 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %13, i8* getelementptr inbounds ([104 x i8], [104 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink21CrossThreadPersistentINS1_19SQLStatementBackendEEEEEPKcv, i64 0, i64 0)) #9
  %15 = ptrtoint i8* %14 to i64
  %16 = bitcast %"class.WTF::Deque.300"* %0 to i64*
  store atomic i64 %15, i64* %16 monotonic, align 8
  %17 = lshr i64 %13, 4
  %18 = trunc i64 %17 to i32
  store i32 %18, i32* %2, align 8
  %19 = getelementptr inbounds %"class.WTF::Deque.300", %"class.WTF::Deque.300"* %0, i64 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = getelementptr inbounds %"class.WTF::Deque.300", %"class.WTF::Deque.300"* %0, i64 0, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = icmp ugt i32 %20, %22
  %24 = bitcast i8* %14 to %"class.blink::CrossThreadPersistent.264"*
  br i1 %23, label %31, label %25

25:                                               ; preds = %1
  %26 = zext i32 %20 to i64
  %27 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %5, i64 %26
  %28 = zext i32 %22 to i64
  %29 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %5, i64 %28
  %30 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %24, i64 %26
  tail call void @_ZN3WTF11VectorMoverILb0EN5blink21CrossThreadPersistentINS1_19SQLStatementBackendEEENS_18PartitionAllocatorEE4MoveEPS4_S7_S7_b(%"class.blink::CrossThreadPersistent.264"* %27, %"class.blink::CrossThreadPersistent.264"* %29, %"class.blink::CrossThreadPersistent.264"* %30, i1 zeroext true) #9
  br label %45

31:                                               ; preds = %1
  %32 = zext i32 %22 to i64
  %33 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %5, i64 %32
  tail call void @_ZN3WTF11VectorMoverILb0EN5blink21CrossThreadPersistentINS1_19SQLStatementBackendEEENS_18PartitionAllocatorEE4MoveEPS4_S7_S7_b(%"class.blink::CrossThreadPersistent.264"* %5, %"class.blink::CrossThreadPersistent.264"* %33, %"class.blink::CrossThreadPersistent.264"* %24, i1 zeroext true) #9
  %34 = load i32, i32* %2, align 8
  %35 = load i32, i32* %19, align 8
  %36 = sub i32 %35, %3
  %37 = add i32 %36, %34
  %38 = zext i32 %35 to i64
  %39 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %5, i64 %38
  %40 = zext i32 %3 to i64
  %41 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %5, i64 %40
  %42 = load %"class.blink::CrossThreadPersistent.264"*, %"class.blink::CrossThreadPersistent.264"** %4, align 8
  %43 = zext i32 %37 to i64
  %44 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %42, i64 %43
  tail call void @_ZN3WTF11VectorMoverILb0EN5blink21CrossThreadPersistentINS1_19SQLStatementBackendEEENS_18PartitionAllocatorEE4MoveEPS4_S7_S7_b(%"class.blink::CrossThreadPersistent.264"* %39, %"class.blink::CrossThreadPersistent.264"* %41, %"class.blink::CrossThreadPersistent.264"* %44, i1 zeroext true) #9
  store i32 %37, i32* %19, align 8
  br label %45

45:                                               ; preds = %25, %31
  %46 = bitcast %"class.blink::CrossThreadPersistent.264"* %5 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %46) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink21CrossThreadPersistentINS2_19SQLStatementBackendEEEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 134086656
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 134086656) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.7, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.8, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 4
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #2

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF11VectorMoverILb0EN5blink21CrossThreadPersistentINS1_19SQLStatementBackendEEENS_18PartitionAllocatorEE4MoveEPS4_S7_S7_b(%"class.blink::CrossThreadPersistent.264"*, %"class.blink::CrossThreadPersistent.264"*, %"class.blink::CrossThreadPersistent.264"*, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %5 = icmp eq %"class.blink::CrossThreadPersistent.264"* %0, %1
  br i1 %5, label %37, label %6

6:                                                ; preds = %4, %33
  %7 = phi %"class.blink::CrossThreadPersistent.264"* [ %35, %33 ], [ %0, %4 ]
  %8 = phi %"class.blink::CrossThreadPersistent.264"* [ %34, %33 ], [ %2, %4 ]
  %9 = bitcast %"class.blink::CrossThreadPersistent.264"* %8 to i8*
  %10 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %8, i64 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 16, i1 false) #9
  %11 = tail call dereferenceable(40) %"class.WTF::Mutex"* @_ZN5blink11ProcessHeap26CrossThreadPersistentMutexEv() #9
  %12 = getelementptr inbounds %"class.WTF::Mutex", %"class.WTF::Mutex"* %11, i64 0, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %12) #9
  %13 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %7, i64 0, i32 0, i32 0
  %14 = load %"class.blink::SQLStatementBackend"*, %"class.blink::SQLStatementBackend"** %13, align 8
  tail call void @_ZN5blink14PersistentBaseINS_19SQLStatementBackendELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE1EE12AssignUnsafeEPS1_(%"class.blink::PersistentBase.265"* %10, %"class.blink::SQLStatementBackend"* %14) #9
  tail call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %12) #9
  %15 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %7, i64 0, i32 0, i32 1
  %16 = bitcast %"class.blink::CrossThreadPersistentNodePtr"* %15 to i64*
  %17 = load atomic i64, i64* %16 acquire, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %33, label %19

19:                                               ; preds = %6
  %20 = tail call dereferenceable(40) %"class.WTF::Mutex"* @_ZN5blink11ProcessHeap26CrossThreadPersistentMutexEv() #9
  %21 = getelementptr inbounds %"class.WTF::Mutex", %"class.WTF::Mutex"* %20, i64 0, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %21) #9
  %22 = tail call dereferenceable(16) %"class.blink::CrossThreadPersistentRegion"* @_ZN5blink11ProcessHeap30GetCrossThreadPersistentRegionEv() #9
  %23 = load atomic i64, i64* %16 monotonic, align 8
  %24 = inttoptr i64 %23 to %"class.blink::PersistentNode"*
  %25 = icmp eq i64 %23, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %19
  %27 = getelementptr inbounds %"class.blink::CrossThreadPersistentRegion", %"class.blink::CrossThreadPersistentRegion"* %22, i64 0, i32 0, i32 0
  %28 = bitcast %"class.blink::CrossThreadPersistentRegion"* %22 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = inttoptr i64 %23 to i64*
  store i64 %29, i64* %30, align 8
  %31 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %24, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* null, void (%"class.blink::Visitor"*, i8*)** %31, align 8
  store %"class.blink::PersistentNode"* %24, %"class.blink::PersistentNode"** %27, align 8
  br label %32

32:                                               ; preds = %26, %19
  store atomic i64 0, i64* %16 release, align 8
  tail call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %21) #9
  br label %33

33:                                               ; preds = %6, %32
  %34 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %8, i64 1
  %35 = getelementptr inbounds %"class.blink::CrossThreadPersistent.264", %"class.blink::CrossThreadPersistent.264"* %7, i64 1
  %36 = icmp eq %"class.blink::CrossThreadPersistent.264"* %35, %1
  br i1 %36, label %37, label %6

37:                                               ; preds = %33, %4
  ret void
}

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_19SQLStatementBackendELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE1EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = alloca %"class.base::Location", align 8
  %4 = bitcast i8* %1 to %"class.blink::SQLStatementBackend"**
  %5 = load %"class.blink::SQLStatementBackend"*, %"class.blink::SQLStatementBackend"** %4, align 8
  %6 = bitcast %"class.base::Location"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #9
  call void @_ZN4base8LocationC1Ev(%"class.base::Location"* nonnull %3) #9
  %7 = icmp eq %"class.blink::SQLStatementBackend"* %5, null
  br i1 %7, label %14, label %8

8:                                                ; preds = %2
  %9 = bitcast %"class.blink::SQLStatementBackend"* %5 to i8*
  %10 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)***
  %11 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)** %11, i64 8
  %13 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)** %12, align 8
  call void %13(%"class.blink::Visitor"* %0, i8* nonnull %9, i8* nonnull %9, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_19SQLStatementBackendEE5TraceEPNS_7VisitorEPKv, %"class.base::Location"* nonnull dereferenceable(32) %3) #9
  br label %14

14:                                               ; preds = %2, %8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_19SQLStatementBackendEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::SQLStatementBackend"*
  tail call void @_ZNK5blink19SQLStatementBackend5TraceEPNS_7VisitorE(%"class.blink::SQLStatementBackend"* %3, %"class.blink::Visitor"* %0) #9
  ret void
}

declare void @_ZNK5blink19SQLStatementBackend5TraceEPNS_7VisitorE(%"class.blink::SQLStatementBackend"*, %"class.blink::Visitor"*) local_unnamed_addr #1

declare void @_ZN5blink19SQLStatementBackendC1EPNS_12SQLStatementERKN3WTF6StringERKNS3_6VectorINS_8SQLValueELj0ENS3_18PartitionAllocatorEEEi(%"class.blink::SQLStatementBackend"*, %"class.blink::SQLStatement"*, %"class.WTF::String"* dereferenceable(8), %"class.WTF::Vector.282"* dereferenceable(16), i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_19SQLStatementBackendEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #9
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !2

9:                                                ; preds = %1
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #9
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #9
  br label %11

11:                                               ; preds = %1, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %1 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = icmp ult i64 %0, 64
  %18 = icmp ugt i64 %0, 31
  %19 = zext i1 %18 to i64
  %20 = icmp ult i64 %0, 128
  %21 = select i1 %20, i64 2, i64 3
  %22 = select i1 %17, i64 %19, i64 %21
  %23 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_19SQLStatementBackendEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %11
  %26 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %27 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %26, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_19SQLStatementBackendEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic.219"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_19SQLStatementBackendEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic.219"*)) #9
  br label %28

28:                                               ; preds = %11, %25
  %29 = phi i32 [ %23, %11 ], [ %27, %25 ]
  %30 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %16, i64 0, i32 19, i64 %22
  %31 = bitcast %"class.blink::BaseArena"** %30 to %"class.blink::NormalPageArena"**
  %32 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %31, align 8
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #9
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %35 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #9
  %36 = icmp ult i64 %0, -8
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #9
  store i8* null, i8** %34, align 8
  br label %48

38:                                               ; preds = %28
  %39 = add nsw i64 %0, 8
  %40 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %39) #9
  %41 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0), i8* %40, i8* %41) #9
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #9
  store i8* %43, i8** %34, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.10, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #9
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #9
  br label %48

48:                                               ; preds = %37, %38, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #9
  %49 = add i64 %0, 15
  %50 = and i64 %49, -8
  %51 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %50
  br i1 %53, label %86, label %54, !prof !2

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %50
  store i8* %57, i8** %55, align 8
  %58 = sub i64 %52, %50
  store i64 %58, i64* %51, align 8
  %59 = bitcast i8* %56 to i32*
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds i8, i8* %56, i64 4
  %61 = bitcast i8* %60 to i16*
  %62 = trunc i32 %29 to i16
  %63 = shl i16 %62, 2
  store atomic i16 %63, i16* %61 monotonic, align 2
  %64 = lshr exact i64 %50, 1
  %65 = trunc i64 %64 to i16
  %66 = getelementptr inbounds i8, i8* %56, i64 6
  %67 = bitcast i8* %66 to i16*
  store i16 %65, i16* %67, align 2
  %68 = ptrtoint i8* %56 to i64
  %69 = and i64 %68, -131072
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 4400
  %72 = bitcast i8* %71 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 16
  %75 = sub i64 %68, %74
  %76 = lshr i64 %75, 3
  %77 = lshr i64 %75, 6
  %78 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %72, i64 0, i32 0, i32 1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = trunc i64 %76 to i32
  %81 = and i32 %80, 7
  %82 = shl i32 1, %81
  %83 = trunc i32 %82 to i8
  %84 = or i8 %79, %83
  store atomic i8 %84, i8* %78 release, align 1
  %85 = getelementptr inbounds i8, i8* %56, i64 8
  br label %89

86:                                               ; preds = %48
  %87 = zext i32 %29 to i64
  %88 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %32, i64 %50, i64 %87) #9
  br label %89

89:                                               ; preds = %54, %86
  %90 = phi i8* [ %85, %54 ], [ %88, %86 ]
  ret i8* %90
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #1

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #1

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #1

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_19SQLStatementBackendEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::SQLStatementBackend"*
  tail call void @_ZN5blink19SQLStatementBackendD2Ev(%"class.blink::SQLStatementBackend"* %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_19SQLStatementBackendEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic.219"*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink19SQLStatementBackendD2Ev(%"class.blink::SQLStatementBackend"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %3 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %2, align 8
  store %"class.blink::SQLErrorData"* null, %"class.blink::SQLErrorData"** %2, align 8
  %4 = icmp eq %"class.blink::SQLErrorData"* %3, null
  br i1 %4, label %24, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %3, i64 0, i32 1, i32 0, i32 0
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %7, null
  br i1 %8, label %22, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  br i1 %13, label %16, label %18

16:                                               ; preds = %9
  %17 = add i32 %15, -1
  store i32 %17, i32* %14, align 4
  br label %18

18:                                               ; preds = %16, %9
  %19 = phi i32 [ %17, %16 ], [ %15, %9 ]
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %18
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %7) #9
  br label %22

22:                                               ; preds = %21, %18, %5
  %23 = bitcast %"class.blink::SQLErrorData"* %3 to i8*
  tail call void @free(i8* %23) #9
  br label %24

24:                                               ; preds = %1, %22
  %25 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 2
  %26 = getelementptr inbounds %"class.WTF::Vector.282", %"class.WTF::Vector.282"* %25, i64 0, i32 0, i32 0, i32 0
  %27 = load %"class.blink::SQLValue"*, %"class.blink::SQLValue"** %26, align 8
  %28 = icmp eq %"class.blink::SQLValue"* %27, null
  br i1 %28, label %63, label %29, !prof !4

29:                                               ; preds = %24
  %30 = bitcast %"class.blink::SQLValue"* %27 to i8*
  %31 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %61, label %34, !prof !2

34:                                               ; preds = %29
  %35 = zext i32 %32 to i64
  %36 = getelementptr inbounds %"class.blink::SQLValue", %"class.blink::SQLValue"* %27, i64 %35
  br label %37

37:                                               ; preds = %55, %34
  %38 = phi %"class.blink::SQLValue"* [ %56, %55 ], [ %27, %34 ]
  %39 = getelementptr inbounds %"class.blink::SQLValue", %"class.blink::SQLValue"* %38, i64 0, i32 2, i32 0, i32 0
  %40 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %39, align 8
  %41 = icmp eq %"class.WTF::StringImpl"* %40, null
  br i1 %41, label %55, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = and i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  br i1 %46, label %49, label %51

49:                                               ; preds = %42
  %50 = add i32 %48, -1
  store i32 %50, i32* %47, align 4
  br label %51

51:                                               ; preds = %49, %42
  %52 = phi i32 [ %50, %49 ], [ %48, %42 ]
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %51
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %40) #9
  br label %55

55:                                               ; preds = %54, %51, %37
  %56 = getelementptr inbounds %"class.blink::SQLValue", %"class.blink::SQLValue"* %38, i64 1
  %57 = icmp eq %"class.blink::SQLValue"* %56, %36
  br i1 %57, label %58, label %37

58:                                               ; preds = %55
  store i32 0, i32* %31, align 4
  %59 = bitcast %"class.WTF::Vector.282"* %25 to i8**
  %60 = load i8*, i8** %59, align 8
  br label %61

61:                                               ; preds = %58, %29
  %62 = phi i8* [ %60, %58 ], [ %30, %29 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %62) #9
  store %"class.blink::SQLValue"* null, %"class.blink::SQLValue"** %26, align 8
  br label %63

63:                                               ; preds = %24, %61
  %64 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 1, i32 0, i32 0
  %65 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %64, align 8
  %66 = icmp eq %"class.WTF::StringImpl"* %65, null
  br i1 %66, label %80, label %67

67:                                               ; preds = %63
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  br i1 %71, label %74, label %76

74:                                               ; preds = %67
  %75 = add i32 %73, -1
  store i32 %75, i32* %72, align 4
  br label %76

76:                                               ; preds = %74, %67
  %77 = phi i32 [ %75, %74 ], [ %73, %67 ]
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %80

79:                                               ; preds = %76
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %65) #9
  br label %80

80:                                               ; preds = %63, %76, %79
  ret void
}

declare void @_ZN5blink17SQLiteTransactionC1ERNS_14SQLiteDatabaseEb(%"class.blink::SQLiteTransaction"*, %"class.blink::SQLiteDatabase"* dereferenceable(152), i1 zeroext) unnamed_addr #1

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink14PersistentBaseINS_19SQLStatementBackendELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE1EE12AssignUnsafeEPS1_(%"class.blink::PersistentBase.265"*, %"class.blink::SQLStatementBackend"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::PersistentBase.265", %"class.blink::PersistentBase.265"* %0, i64 0, i32 0
  store %"class.blink::SQLStatementBackend"* %1, %"class.blink::SQLStatementBackend"** %3, align 8
  %4 = ptrtoint %"class.blink::SQLStatementBackend"* %1 to i64
  switch i64 %4, label %5 [
    i64 0, label %29
    i64 -1, label %29
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.blink::PersistentBase.265", %"class.blink::PersistentBase.265"* %0, i64 0, i32 1
  %7 = bitcast %"class.blink::CrossThreadPersistentNodePtr"* %6 to i64*
  %8 = load atomic i64, i64* %7 acquire, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %46

10:                                               ; preds = %5
  %11 = bitcast %"class.blink::PersistentBase.265"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  switch i64 %12, label %13 [
    i64 0, label %46
    i64 -1, label %46
  ]

13:                                               ; preds = %10
  %14 = tail call dereferenceable(16) %"class.blink::CrossThreadPersistentRegion"* @_ZN5blink11ProcessHeap30GetCrossThreadPersistentRegionEv() #9
  %15 = getelementptr inbounds %"class.blink::CrossThreadPersistentRegion", %"class.blink::CrossThreadPersistentRegion"* %14, i64 0, i32 0, i32 0
  %16 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %15, align 8
  %17 = icmp eq %"class.blink::PersistentNode"* %16, null
  br i1 %17, label %18, label %21, !prof !2

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.blink::CrossThreadPersistentRegion", %"class.blink::CrossThreadPersistentRegion"* %14, i64 0, i32 0
  tail call void @_ZN5blink20PersistentRegionBase15EnsureNodeSlotsEv(%"class.blink::PersistentRegionBase"* %19) #9
  %20 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %15, align 8
  br label %21

21:                                               ; preds = %18, %13
  %22 = phi %"class.blink::PersistentNode"* [ %20, %18 ], [ %16, %13 ]
  %23 = bitcast %"class.blink::PersistentNode"* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = bitcast %"class.blink::CrossThreadPersistentRegion"* %14 to i64*
  store i64 %24, i64* %25, align 8
  %26 = bitcast %"class.blink::PersistentNode"* %22 to %"class.blink::PersistentBase.265"**
  store %"class.blink::PersistentBase.265"* %0, %"class.blink::PersistentBase.265"** %26, align 8
  %27 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %22, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* @_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_19SQLStatementBackendELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE1EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv, void (%"class.blink::Visitor"*, i8*)** %27, align 8
  %28 = ptrtoint %"class.blink::PersistentNode"* %22 to i64
  store atomic i64 %28, i64* %7 release, align 8
  br label %46

29:                                               ; preds = %2, %2
  %30 = getelementptr inbounds %"class.blink::PersistentBase.265", %"class.blink::PersistentBase.265"* %0, i64 0, i32 1
  %31 = bitcast %"class.blink::CrossThreadPersistentNodePtr"* %30 to i64*
  %32 = load atomic i64, i64* %31 acquire, align 8
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %46, label %34

34:                                               ; preds = %29
  %35 = tail call dereferenceable(16) %"class.blink::CrossThreadPersistentRegion"* @_ZN5blink11ProcessHeap30GetCrossThreadPersistentRegionEv() #9
  %36 = load atomic i64, i64* %31 monotonic, align 8
  %37 = inttoptr i64 %36 to %"class.blink::PersistentNode"*
  %38 = icmp eq i64 %36, 0
  br i1 %38, label %45, label %39

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"class.blink::CrossThreadPersistentRegion", %"class.blink::CrossThreadPersistentRegion"* %35, i64 0, i32 0, i32 0
  %41 = bitcast %"class.blink::CrossThreadPersistentRegion"* %35 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = inttoptr i64 %36 to i64*
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %37, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* null, void (%"class.blink::Visitor"*, i8*)** %44, align 8
  store %"class.blink::PersistentNode"* %37, %"class.blink::PersistentNode"** %40, align 8
  br label %45

45:                                               ; preds = %39, %34
  store atomic i64 0, i64* %31 release, align 8
  br label %46

46:                                               ; preds = %5, %45, %29, %21, %10, %10
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
!4 = !{!"branch_weights", i32 2000, i32 1}
