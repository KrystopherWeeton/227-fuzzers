; ModuleID = '../../third_party/ffmpeg/libavutil/tea.c'
source_filename = "../../third_party/ffmpeg/libavutil/tea.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVTEA = type { [16 x i32], i32 }

@av_tea_size = hidden local_unnamed_addr constant i32 68, align 4

; Function Attrs: nounwind ssp uwtable
define hidden noalias %struct.AVTEA* @av_tea_alloc() local_unnamed_addr #0 {
  %1 = tail call noalias i8* @av_mallocz(i64 68) #2
  %2 = bitcast i8* %1 to %struct.AVTEA*
  ret %struct.AVTEA* %2
}

declare noalias i8* @av_mallocz(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av_tea_init(%struct.AVTEA* nocapture, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = bitcast i8* %1 to i32*
  %5 = load i32, i32* %4, align 1
  %6 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %5) #3, !srcloc !2
  %7 = getelementptr inbounds %struct.AVTEA, %struct.AVTEA* %0, i64 0, i32 0, i64 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i8, i8* %1, i64 4
  %9 = bitcast i8* %8 to i32*
  %10 = load i32, i32* %9, align 1
  %11 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %10) #3, !srcloc !2
  %12 = getelementptr inbounds %struct.AVTEA, %struct.AVTEA* %0, i64 0, i32 0, i64 1
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i8, i8* %1, i64 8
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %15) #3, !srcloc !2
  %17 = getelementptr inbounds %struct.AVTEA, %struct.AVTEA* %0, i64 0, i32 0, i64 2
  store i32 %16, i32* %17, align 4
  %18 = getelementptr inbounds i8, i8* %1, i64 12
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 1
  %21 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %20) #3, !srcloc !2
  %22 = getelementptr inbounds %struct.AVTEA, %struct.AVTEA* %0, i64 0, i32 0, i64 3
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds %struct.AVTEA, %struct.AVTEA* %0, i64 0, i32 1
  store i32 %2, i32* %23, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av_tea_crypt(%struct.AVTEA* nocapture readonly, i8* nocapture, i8* nocapture readonly, i32, i8*, i32) local_unnamed_addr #0 {
  %7 = icmp eq i32 %5, 0
  %8 = icmp eq i32 %3, 0
  br i1 %7, label %10, label %9

9:                                                ; preds = %6
  br i1 %8, label %80, label %21

10:                                               ; preds = %6
  br i1 %8, label %80, label %11

11:                                               ; preds = %10
  %12 = icmp eq i8* %4, null
  %13 = bitcast i8* %4 to i64*
  %14 = getelementptr inbounds i8, i8* %4, i64 1
  %15 = getelementptr inbounds i8, i8* %4, i64 2
  %16 = getelementptr inbounds i8, i8* %4, i64 3
  %17 = getelementptr inbounds i8, i8* %4, i64 4
  %18 = getelementptr inbounds i8, i8* %4, i64 5
  %19 = getelementptr inbounds i8, i8* %4, i64 6
  %20 = getelementptr inbounds i8, i8* %4, i64 7
  br label %29

21:                                               ; preds = %9, %21
  %22 = phi i8* [ %27, %21 ], [ %1, %9 ]
  %23 = phi i8* [ %26, %21 ], [ %2, %9 ]
  %24 = phi i32 [ %25, %21 ], [ %3, %9 ]
  %25 = add nsw i32 %24, -1
  tail call fastcc void @tea_crypt_ecb(%struct.AVTEA* %0, i8* %22, i8* %23, i32 %5, i8* %4)
  %26 = getelementptr inbounds i8, i8* %23, i64 8
  %27 = getelementptr inbounds i8, i8* %22, i64 8
  %28 = icmp eq i32 %25, 0
  br i1 %28, label %80, label %21

29:                                               ; preds = %11, %76
  %30 = phi i32 [ %3, %11 ], [ %33, %76 ]
  %31 = phi i8* [ %1, %11 ], [ %78, %76 ]
  %32 = phi i8* [ %2, %11 ], [ %77, %76 ]
  %33 = add nsw i32 %30, -1
  br i1 %12, label %75, label %34

34:                                               ; preds = %29
  %35 = load i8, i8* %32, align 1
  %36 = load i8, i8* %4, align 1
  %37 = xor i8 %36, %35
  store i8 %37, i8* %31, align 1
  %38 = getelementptr inbounds i8, i8* %32, i64 1
  %39 = load i8, i8* %38, align 1
  %40 = load i8, i8* %14, align 1
  %41 = xor i8 %40, %39
  %42 = getelementptr inbounds i8, i8* %31, i64 1
  store i8 %41, i8* %42, align 1
  %43 = getelementptr inbounds i8, i8* %32, i64 2
  %44 = load i8, i8* %43, align 1
  %45 = load i8, i8* %15, align 1
  %46 = xor i8 %45, %44
  %47 = getelementptr inbounds i8, i8* %31, i64 2
  store i8 %46, i8* %47, align 1
  %48 = getelementptr inbounds i8, i8* %32, i64 3
  %49 = load i8, i8* %48, align 1
  %50 = load i8, i8* %16, align 1
  %51 = xor i8 %50, %49
  %52 = getelementptr inbounds i8, i8* %31, i64 3
  store i8 %51, i8* %52, align 1
  %53 = getelementptr inbounds i8, i8* %32, i64 4
  %54 = load i8, i8* %53, align 1
  %55 = load i8, i8* %17, align 1
  %56 = xor i8 %55, %54
  %57 = getelementptr inbounds i8, i8* %31, i64 4
  store i8 %56, i8* %57, align 1
  %58 = getelementptr inbounds i8, i8* %32, i64 5
  %59 = load i8, i8* %58, align 1
  %60 = load i8, i8* %18, align 1
  %61 = xor i8 %60, %59
  %62 = getelementptr inbounds i8, i8* %31, i64 5
  store i8 %61, i8* %62, align 1
  %63 = getelementptr inbounds i8, i8* %32, i64 6
  %64 = load i8, i8* %63, align 1
  %65 = load i8, i8* %19, align 1
  %66 = xor i8 %65, %64
  %67 = getelementptr inbounds i8, i8* %31, i64 6
  store i8 %66, i8* %67, align 1
  %68 = getelementptr inbounds i8, i8* %32, i64 7
  %69 = load i8, i8* %68, align 1
  %70 = load i8, i8* %20, align 1
  %71 = xor i8 %70, %69
  %72 = getelementptr inbounds i8, i8* %31, i64 7
  store i8 %71, i8* %72, align 1
  tail call fastcc void @tea_crypt_ecb(%struct.AVTEA* %0, i8* %31, i8* %31, i32 0, i8* null)
  %73 = bitcast i8* %31 to i64*
  %74 = load i64, i64* %73, align 1
  store i64 %74, i64* %13, align 1
  br label %76

75:                                               ; preds = %29
  tail call fastcc void @tea_crypt_ecb(%struct.AVTEA* %0, i8* %31, i8* %32, i32 0, i8* null)
  br label %76

76:                                               ; preds = %75, %34
  %77 = getelementptr inbounds i8, i8* %32, i64 8
  %78 = getelementptr inbounds i8, i8* %31, i64 8
  %79 = icmp eq i32 %33, 0
  br i1 %79, label %80, label %29

80:                                               ; preds = %21, %76, %9, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @tea_crypt_ecb(%struct.AVTEA* nocapture readonly, i8* nocapture, i8* nocapture readonly, i32, i8*) unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.AVTEA, %struct.AVTEA* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.AVTEA, %struct.AVTEA* %0, i64 0, i32 0, i64 0
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.AVTEA, %struct.AVTEA* %0, i64 0, i32 0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.AVTEA, %struct.AVTEA* %0, i64 0, i32 0, i64 2
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.AVTEA, %struct.AVTEA* %0, i64 0, i32 0, i64 3
  %15 = load i32, i32* %14, align 4
  %16 = bitcast i8* %2 to i32*
  %17 = load i32, i32* %16, align 1
  %18 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %17) #3, !srcloc !2
  %19 = getelementptr inbounds i8, i8* %2, i64 4
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 1
  %22 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %21) #3, !srcloc !2
  %23 = icmp eq i32 %3, 0
  %24 = sdiv i32 %7, 2
  %25 = icmp sgt i32 %7, 1
  br i1 %23, label %26, label %27

26:                                               ; preds = %5
  br i1 %25, label %71, label %95

27:                                               ; preds = %5
  br i1 %25, label %28, label %54

28:                                               ; preds = %27
  %29 = mul i32 %24, -1640531527
  br label %30

30:                                               ; preds = %30, %28
  %31 = phi i32 [ %51, %30 ], [ %29, %28 ]
  %32 = phi i32 [ %52, %30 ], [ 0, %28 ]
  %33 = phi i32 [ %42, %30 ], [ %22, %28 ]
  %34 = phi i32 [ %50, %30 ], [ %18, %28 ]
  %35 = shl i32 %34, 4
  %36 = add i32 %35, %13
  %37 = add i32 %31, %34
  %38 = lshr i32 %34, 5
  %39 = add i32 %38, %15
  %40 = xor i32 %39, %36
  %41 = xor i32 %40, %37
  %42 = sub i32 %33, %41
  %43 = shl i32 %42, 4
  %44 = add i32 %43, %9
  %45 = add i32 %42, %31
  %46 = xor i32 %44, %45
  %47 = lshr i32 %42, 5
  %48 = add i32 %47, %11
  %49 = xor i32 %46, %48
  %50 = sub i32 %34, %49
  %51 = add i32 %31, 1640531527
  %52 = add nuw nsw i32 %32, 1
  %53 = icmp eq i32 %52, %24
  br i1 %53, label %54, label %30

54:                                               ; preds = %30, %27
  %55 = phi i32 [ %18, %27 ], [ %50, %30 ]
  %56 = phi i32 [ %22, %27 ], [ %42, %30 ]
  %57 = icmp eq i8* %4, null
  br i1 %57, label %95, label %58

58:                                               ; preds = %54
  %59 = bitcast i8* %4 to i32*
  %60 = load i32, i32* %59, align 1
  %61 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %60) #3, !srcloc !2
  %62 = xor i32 %61, %55
  %63 = getelementptr inbounds i8, i8* %4, i64 4
  %64 = bitcast i8* %63 to i32*
  %65 = load i32, i32* %64, align 1
  %66 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %65) #3, !srcloc !2
  %67 = xor i32 %66, %56
  %68 = bitcast i8* %2 to i64*
  %69 = bitcast i8* %4 to i64*
  %70 = load i64, i64* %68, align 1
  store i64 %70, i64* %69, align 1
  br label %95

71:                                               ; preds = %26, %71
  %72 = phi i32 [ %76, %71 ], [ 0, %26 ]
  %73 = phi i32 [ %93, %71 ], [ 0, %26 ]
  %74 = phi i32 [ %92, %71 ], [ %22, %26 ]
  %75 = phi i32 [ %84, %71 ], [ %18, %26 ]
  %76 = add i32 %72, -1640531527
  %77 = shl i32 %74, 4
  %78 = add i32 %77, %9
  %79 = add i32 %76, %74
  %80 = lshr i32 %74, 5
  %81 = add i32 %80, %11
  %82 = xor i32 %81, %78
  %83 = xor i32 %82, %79
  %84 = add i32 %83, %75
  %85 = shl i32 %84, 4
  %86 = add i32 %85, %13
  %87 = add i32 %84, %76
  %88 = xor i32 %86, %87
  %89 = lshr i32 %84, 5
  %90 = add i32 %89, %15
  %91 = xor i32 %88, %90
  %92 = add i32 %91, %74
  %93 = add nuw nsw i32 %73, 1
  %94 = icmp eq i32 %93, %24
  br i1 %94, label %95, label %71

95:                                               ; preds = %71, %26, %58, %54
  %96 = phi i32 [ %62, %58 ], [ %55, %54 ], [ %18, %26 ], [ %84, %71 ]
  %97 = phi i32 [ %67, %58 ], [ %56, %54 ], [ %22, %26 ], [ %92, %71 ]
  %98 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %96) #3, !srcloc !2
  %99 = bitcast i8* %1 to i32*
  store i32 %98, i32* %99, align 1
  %100 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %97) #3, !srcloc !2
  %101 = getelementptr inbounds i8, i8* %1, i64 4
  %102 = bitcast i8* %101 to i32*
  store i32 %100, i32* %102, align 1
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 1407370}
