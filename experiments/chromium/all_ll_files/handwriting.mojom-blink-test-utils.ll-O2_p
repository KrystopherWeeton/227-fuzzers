; ModuleID = 'gen/third_party/blink/public/mojom/handwriting/handwriting.mojom-blink-test-utils.cc'
source_filename = "gen/third_party/blink/public/mojom/handwriting/handwriting.mojom-blink-test-utils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.handwriting::mojom::blink::HandwritingRecognizerAsyncWaiter" = type { %"class.handwriting::mojom::blink::HandwritingRecognizer"* }
%"class.handwriting::mojom::blink::HandwritingRecognizer" = type { i32 (...)** }
%"class.handwriting::mojom::blink::HandwritingRecognitionServiceAsyncWaiter" = type { %"class.handwriting::mojom::blink::HandwritingRecognitionService"* }
%"class.handwriting::mojom::blink::HandwritingRecognitionService" = type { i32 (...)** }
%"class.handwriting::mojom::blink::HandwritingRecognizerInterceptorForTesting" = type { %"class.handwriting::mojom::blink::HandwritingRecognizer" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.mojo::StructPtr"*, i32, i32 }
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.handwriting::mojom::blink::HandwritingStroke"* }
%"class.handwriting::mojom::blink::HandwritingStroke" = type { %"class.WTF::Vector.0" }
%"class.WTF::Vector.0" = type { %"class.WTF::VectorBuffer.1" }
%"class.WTF::VectorBuffer.1" = type { %"class.WTF::VectorBufferBase.2" }
%"class.WTF::VectorBufferBase.2" = type { %"class.mojo::StructPtr.3"*, i32, i32 }
%"class.mojo::StructPtr.3" = type { %"class.std::__1::unique_ptr.4" }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.handwriting::mojom::blink::HandwritingPoint"* }
%"class.handwriting::mojom::blink::HandwritingPoint" = type { %"class.gfx::PointF", %"class.absl::optional" }
%"class.gfx::PointF" = type { float, float }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.base::TimeDelta" }
%"class.base::TimeDelta" = type { i64 }
%"class.mojo::InlinedStructPtr" = type { %"class.handwriting::mojom::blink::HandwritingHints", i32, [4 x i8] }
%"class.handwriting::mojom::blink::HandwritingHints" = type <{ %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i32, [4 x i8] }>
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.13" }
%"struct.std::__1::__atomic_base.13" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.14 }
%class.scoped_refptr.14 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.15" }
%"struct.std::__1::atomic.15" = type { %"struct.std::__1::__atomic_base.16" }
%"struct.std::__1::__atomic_base.16" = type { %"struct.std::__1::__atomic_base.17" }
%"struct.std::__1::__atomic_base.17" = type { %"struct.std::__1::__cxx_atomic_impl.18" }
%"struct.std::__1::__cxx_atomic_impl.18" = type { %"struct.std::__1::__cxx_atomic_base_impl.19" }
%"struct.std::__1::__cxx_atomic_base_impl.19" = type { i32 }
%"class.absl::optional.20" = type { %"class.absl::optional_internal::optional_data.21" }
%"class.absl::optional_internal::optional_data.21" = type { %"class.absl::optional_internal::optional_data_base.22" }
%"class.absl::optional_internal::optional_data_base.22" = type { %"class.absl::optional_internal::optional_data_dtor_base.23" }
%"class.absl::optional_internal::optional_data_dtor_base.23" = type { i8, %union.anon.24 }
%union.anon.24 = type { %"class.WTF::Vector.25" }
%"class.WTF::Vector.25" = type { %"class.WTF::VectorBuffer.26" }
%"class.WTF::VectorBuffer.26" = type { %"class.WTF::VectorBufferBase.27" }
%"class.WTF::VectorBufferBase.27" = type { %"class.mojo::StructPtr.28"*, i32, i32 }
%"class.mojo::StructPtr.28" = type { %"class.std::__1::unique_ptr.29" }
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.handwriting::mojom::blink::HandwritingPrediction"* }
%"class.handwriting::mojom::blink::HandwritingPrediction" = type { %"class.WTF::String", %"class.WTF::Vector.32" }
%"class.WTF::Vector.32" = type { %"class.WTF::VectorBuffer.33" }
%"class.WTF::VectorBuffer.33" = type { %"class.WTF::VectorBufferBase.34" }
%"class.WTF::VectorBufferBase.34" = type { %"class.mojo::StructPtr.35"*, i32, i32 }
%"class.mojo::StructPtr.35" = type { %"class.std::__1::unique_ptr.36" }
%"class.std::__1::unique_ptr.36" = type { %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.handwriting::mojom::blink::HandwritingSegment"* }
%"class.handwriting::mojom::blink::HandwritingSegment" = type { %"class.WTF::String", i32, i32, %"class.WTF::Vector.39" }
%"class.WTF::Vector.39" = type { %"class.WTF::VectorBuffer.40" }
%"class.WTF::VectorBuffer.40" = type { %"class.WTF::VectorBufferBase.41" }
%"class.WTF::VectorBufferBase.41" = type { %"class.mojo::InlinedStructPtr.42"*, i32, i32 }
%"class.mojo::InlinedStructPtr.42" = type { %"class.handwriting::mojom::blink::HandwritingDrawingSegment", i32 }
%"class.handwriting::mojom::blink::HandwritingDrawingSegment" = type { i32, i32, i32 }
%"class.base::RunLoop" = type { %"class.base::RunLoop::Delegate"*, i32, i8, i8, i8, i8, i8, %class.scoped_refptr.65, %"class.base::WeakPtrFactory" }
%"class.base::RunLoop::Delegate" = type <{ i32 (...)**, %"class.std::__1::stack", %"class.base::ObserverList", i8, [7 x i8] }>
%"class.std::__1::stack" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::RunLoop"**, %"class.base::RunLoop"**, %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"class.base::RunLoop"** }
%"class.base::ObserverList" = type <{ %"class.std::__1::vector.58", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector.58" = type { %"class.std::__1::__vector_base.59" }
%"class.std::__1::__vector_base.59" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.60" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%class.scoped_refptr.65 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.66" }>
%"class.base::RefCountedThreadSafe.66" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.67 }
%class.scoped_refptr.67 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.68", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.68" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.69" }
%"struct.std::__1::atomic.69" = type { %"struct.std::__1::__atomic_base.70" }
%"struct.std::__1::__atomic_base.70" = type { %"struct.std::__1::__atomic_base.71" }
%"struct.std::__1::__atomic_base.71" = type { %"struct.std::__1::__cxx_atomic_impl.72" }
%"struct.std::__1::__cxx_atomic_impl.72" = type { %"struct.std::__1::__cxx_atomic_base_impl.73" }
%"struct.std::__1::__cxx_atomic_base_impl.73" = type { i8 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.handwriting::mojom::blink::HandwritingRecognitionServiceInterceptorForTesting" = type { %"class.handwriting::mojom::blink::HandwritingRecognitionService" }
%"class.mojo::StructPtr.74" = type { %"class.std::__1::unique_ptr.75" }
%"class.std::__1::unique_ptr.75" = type { %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"class.handwriting::mojom::blink::HandwritingModelConstraint"* }
%"class.handwriting::mojom::blink::HandwritingModelConstraint" = type { %"class.WTF::Vector.78" }
%"class.WTF::Vector.78" = type { %"class.WTF::VectorBuffer.79" }
%"class.WTF::VectorBuffer.79" = type { %"class.WTF::VectorBufferBase.80" }
%"class.WTF::VectorBufferBase.80" = type { %"class.WTF::String"*, i32, i32 }
%"class.base::OnceCallback.86" = type { %"class.base::internal::CallbackBase" }
%"class.mojo::StructPtr.87" = type { %"class.std::__1::unique_ptr.88" }
%"class.std::__1::unique_ptr.88" = type { %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"class.handwriting::mojom::blink::HandwritingFeatureQuery"* }
%"class.handwriting::mojom::blink::HandwritingFeatureQuery" = type <{ %"class.WTF::Vector.78", i8, i8, [6 x i8] }>
%"class.base::OnceCallback.94" = type { %"class.base::internal::CallbackBase" }
%"class.mojo::PendingRemote" = type { %"struct.mojo::internal::PendingRemoteState" }
%"struct.mojo::internal::PendingRemoteState" = type { %"class.mojo::ScopedHandleBase", i32 }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessagePipeHandle" }
%"class.mojo::MessagePipeHandle" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%"class.mojo::InlinedStructPtr.97" = type { %"class.handwriting::mojom::blink::HandwritingFeatureQueryResult", i32 }
%"class.handwriting::mojom::blink::HandwritingFeatureQueryResult" = type { i32, i32, i32 }

$_ZN11handwriting5mojom5blink21HandwritingRecognizerD2Ev = comdat any

$_ZN11handwriting5mojom5blink42HandwritingRecognizerInterceptorForTestingD0Ev = comdat any

$_ZN11handwriting5mojom5blink29HandwritingRecognitionServiceD2Ev = comdat any

$_ZN11handwriting5mojom5blink50HandwritingRecognitionServiceInterceptorForTestingD0Ev = comdat any

$_ZNSt3__14swapIN11handwriting5mojom5blink16HandwritingHintsEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_ = comdat any

$_ZN11handwriting5mojom5blink16HandwritingHintsaSERKS2_ = comdat any

$_ZN4absl17optional_internal13optional_dataIN3WTF6VectorIN4mojo9StructPtrIN11handwriting5mojom5blink21HandwritingPredictionEEELj0ENS2_18PartitionAllocatorEEELb0EEaSEOSD_ = comdat any

@.str = private unnamed_addr constant [14 x i8] c"GetPrediction\00", align 1
@.str.1 = private unnamed_addr constant [85 x i8] c"gen/third_party/blink/public/mojom/handwriting/handwriting.mojom-blink-test-utils.cc\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"CreateHandwritingRecognizer\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"QueryHandwritingRecognizerSupport\00", align 1
@_ZTVN11handwriting5mojom5blink42HandwritingRecognizerInterceptorForTestingE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.handwriting::mojom::blink::HandwritingRecognizer"*)* @_ZN11handwriting5mojom5blink21HandwritingRecognizerD2Ev to i8*), i8* bitcast (void (%"class.handwriting::mojom::blink::HandwritingRecognizerInterceptorForTesting"*)* @_ZN11handwriting5mojom5blink42HandwritingRecognizerInterceptorForTestingD0Ev to i8*), i8* bitcast (void (%"class.handwriting::mojom::blink::HandwritingRecognizerInterceptorForTesting"*, %"class.WTF::Vector"*, %"class.mojo::InlinedStructPtr"*, %"class.base::OnceCallback"*)* @_ZN11handwriting5mojom5blink42HandwritingRecognizerInterceptorForTesting13GetPredictionEN3WTF6VectorIN4mojo9StructPtrINS1_17HandwritingStrokeEEELj0ENS3_18PartitionAllocatorEEENS5_16InlinedStructPtrINS1_16HandwritingHintsEEEN4base12OnceCallbackIFvN4absl8optionalINS4_INS6_INS1_21HandwritingPredictionEEELj0ES9_EEEEEEE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@_ZTVN11handwriting5mojom5blink50HandwritingRecognitionServiceInterceptorForTestingE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*)* @_ZN11handwriting5mojom5blink29HandwritingRecognitionServiceD2Ev to i8*), i8* bitcast (void (%"class.handwriting::mojom::blink::HandwritingRecognitionServiceInterceptorForTesting"*)* @_ZN11handwriting5mojom5blink50HandwritingRecognitionServiceInterceptorForTestingD0Ev to i8*), i8* bitcast (void (%"class.handwriting::mojom::blink::HandwritingRecognitionServiceInterceptorForTesting"*, %"class.mojo::StructPtr.74"*, %"class.base::OnceCallback.86"*)* @_ZN11handwriting5mojom5blink50HandwritingRecognitionServiceInterceptorForTesting27CreateHandwritingRecognizerEN4mojo9StructPtrINS1_26HandwritingModelConstraintEEEN4base12OnceCallbackIFvNS0_33CreateHandwritingRecognizerResultENS3_13PendingRemoteINS1_21HandwritingRecognizerEEEEEE to i8*), i8* bitcast (void (%"class.handwriting::mojom::blink::HandwritingRecognitionServiceInterceptorForTesting"*, %"class.mojo::StructPtr.87"*, %"class.base::OnceCallback.94"*)* @_ZN11handwriting5mojom5blink50HandwritingRecognitionServiceInterceptorForTesting33QueryHandwritingRecognizerSupportEN4mojo9StructPtrINS1_23HandwritingFeatureQueryEEEN4base12OnceCallbackIFvNS3_16InlinedStructPtrINS1_29HandwritingFeatureQueryResultEEEEEE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8

@_ZN11handwriting5mojom5blink32HandwritingRecognizerAsyncWaiterC1EPNS1_21HandwritingRecognizerE = hidden unnamed_addr alias void (%"class.handwriting::mojom::blink::HandwritingRecognizerAsyncWaiter"*, %"class.handwriting::mojom::blink::HandwritingRecognizer"*), void (%"class.handwriting::mojom::blink::HandwritingRecognizerAsyncWaiter"*, %"class.handwriting::mojom::blink::HandwritingRecognizer"*)* @_ZN11handwriting5mojom5blink32HandwritingRecognizerAsyncWaiterC2EPNS1_21HandwritingRecognizerE
@_ZN11handwriting5mojom5blink32HandwritingRecognizerAsyncWaiterD1Ev = hidden unnamed_addr alias void (%"class.handwriting::mojom::blink::HandwritingRecognizerAsyncWaiter"*), void (%"class.handwriting::mojom::blink::HandwritingRecognizerAsyncWaiter"*)* @_ZN11handwriting5mojom5blink32HandwritingRecognizerAsyncWaiterD2Ev
@_ZN11handwriting5mojom5blink40HandwritingRecognitionServiceAsyncWaiterC1EPNS1_29HandwritingRecognitionServiceE = hidden unnamed_addr alias void (%"class.handwriting::mojom::blink::HandwritingRecognitionServiceAsyncWaiter"*, %"class.handwriting::mojom::blink::HandwritingRecognitionService"*), void (%"class.handwriting::mojom::blink::HandwritingRecognitionServiceAsyncWaiter"*, %"class.handwriting::mojom::blink::HandwritingRecognitionService"*)* @_ZN11handwriting5mojom5blink40HandwritingRecognitionServiceAsyncWaiterC2EPNS1_29HandwritingRecognitionServiceE
@_ZN11handwriting5mojom5blink40HandwritingRecognitionServiceAsyncWaiterD1Ev = hidden unnamed_addr alias void (%"class.handwriting::mojom::blink::HandwritingRecognitionServiceAsyncWaiter"*), void (%"class.handwriting::mojom::blink::HandwritingRecognitionServiceAsyncWaiter"*)* @_ZN11handwriting5mojom5blink40HandwritingRecognitionServiceAsyncWaiterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11handwriting5mojom5blink42HandwritingRecognizerInterceptorForTesting13GetPredictionEN3WTF6VectorIN4mojo9StructPtrINS1_17HandwritingStrokeEEELj0ENS3_18PartitionAllocatorEEENS5_16InlinedStructPtrINS1_16HandwritingHintsEEEN4base12OnceCallbackIFvN4absl8optionalINS4_INS6_INS1_21HandwritingPredictionEEELj0ES9_EEEEEEE(%"class.handwriting::mojom::blink::HandwritingRecognizerInterceptorForTesting"*, %"class.WTF::Vector"* nocapture, %"class.mojo::InlinedStructPtr"*, %"class.base::OnceCallback"* nocapture) unnamed_addr #0 align 2 {
  %5 = alloca %"class.WTF::Vector", align 8
  %6 = alloca %"class.mojo::InlinedStructPtr", align 8
  %7 = alloca %"class.base::OnceCallback", align 8
  %8 = bitcast %"class.handwriting::mojom::blink::HandwritingRecognizerInterceptorForTesting"* %0 to %"class.handwriting::mojom::blink::HandwritingRecognizer"* (%"class.handwriting::mojom::blink::HandwritingRecognizerInterceptorForTesting"*)***
  %9 = load %"class.handwriting::mojom::blink::HandwritingRecognizer"* (%"class.handwriting::mojom::blink::HandwritingRecognizerInterceptorForTesting"*)**, %"class.handwriting::mojom::blink::HandwritingRecognizer"* (%"class.handwriting::mojom::blink::HandwritingRecognizerInterceptorForTesting"*)*** %8, align 8
  %10 = getelementptr inbounds %"class.handwriting::mojom::blink::HandwritingRecognizer"* (%"class.handwriting::mojom::blink::HandwritingRecognizerInterceptorForTesting"*)*, %"class.handwriting::mojom::blink::HandwritingRecognizer"* (%"class.handwriting::mojom::blink::HandwritingRecognizerInterceptorForTesting"*)** %9, i64 3
  %11 = load %"class.handwriting::mojom::blink::HandwritingRecognizer"* (%"class.handwriting::mojom::blink::HandwritingRecognizerInterceptorForTesting"*)*, %"class.handwriting::mojom::blink::HandwritingRecognizer"* (%"class.handwriting::mojom::blink::HandwritingRecognizerInterceptorForTesting"*)** %10, align 8
  %12 = tail call %"class.handwriting::mojom::blink::HandwritingRecognizer"* %11(%"class.handwriting::mojom::blink::HandwritingRecognizerInterceptorForTesting"* %0) #11
  %13 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 1
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 2
  %15 = bitcast %"class.WTF::Vector"* %1 to i64*
  %16 = bitcast %"class.WTF::Vector"* %5 to i64*
  store i64 0, i64* %16, align 8
  %17 = load i64, i64* %15, align 8
  %18 = bitcast %"class.WTF::Vector"* %5 to i64*
  store atomic i64 0, i64* %15 monotonic, align 8
  store atomic i64 %17, i64* %18 monotonic, align 8
  %19 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  store i32 %20, i32* %13, align 8
  store i32 0, i32* %19, align 4
  %21 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 2
  %22 = load i32, i32* %21, align 4
  store i32 %22, i32* %14, align 4
  store i32 0, i32* %21, align 4
  %23 = getelementptr inbounds %"class.mojo::InlinedStructPtr", %"class.mojo::InlinedStructPtr"* %6, i64 0, i32 0
  call void @_ZN11handwriting5mojom5blink16HandwritingHintsC1Ev(%"class.handwriting::mojom::blink::HandwritingHints"* nonnull %23) #11
  %24 = getelementptr inbounds %"class.mojo::InlinedStructPtr", %"class.mojo::InlinedStructPtr"* %6, i64 0, i32 1
  store i32 0, i32* %24, align 8
  call void @_ZN11handwriting5mojom5blink16HandwritingHintsD1Ev(%"class.handwriting::mojom::blink::HandwritingHints"* nonnull %23) #11
  call void @_ZN11handwriting5mojom5blink16HandwritingHintsC1Ev(%"class.handwriting::mojom::blink::HandwritingHints"* nonnull %23) #11
  %25 = getelementptr inbounds %"class.mojo::InlinedStructPtr", %"class.mojo::InlinedStructPtr"* %2, i64 0, i32 0
  call void @_ZNSt3__14swapIN11handwriting5mojom5blink16HandwritingHintsEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_(%"class.handwriting::mojom::blink::HandwritingHints"* nonnull dereferenceable(32) %23, %"class.handwriting::mojom::blink::HandwritingHints"* dereferenceable(32) %25) #11
  %26 = getelementptr inbounds %"class.mojo::InlinedStructPtr", %"class.mojo::InlinedStructPtr"* %2, i64 0, i32 1
  %27 = load i32, i32* %24, align 8
  %28 = load i32, i32* %26, align 4
  store i32 %28, i32* %24, align 8
  store i32 %27, i32* %26, align 4
  %29 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0, i32 0, i32 0
  %30 = bitcast %"class.base::OnceCallback"* %3 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = bitcast %"class.base::OnceCallback"* %7 to i64*
  store i64 %31, i64* %32, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %29, align 8
  %33 = bitcast %"class.handwriting::mojom::blink::HandwritingRecognizer"* %12 to void (%"class.handwriting::mojom::blink::HandwritingRecognizer"*, %"class.WTF::Vector"*, %"class.mojo::InlinedStructPtr"*, %"class.base::OnceCallback"*)***
  %34 = load void (%"class.handwriting::mojom::blink::HandwritingRecognizer"*, %"class.WTF::Vector"*, %"class.mojo::InlinedStructPtr"*, %"class.base::OnceCallback"*)**, void (%"class.handwriting::mojom::blink::HandwritingRecognizer"*, %"class.WTF::Vector"*, %"class.mojo::InlinedStructPtr"*, %"class.base::OnceCallback"*)*** %33, align 8
  %35 = getelementptr inbounds void (%"class.handwriting::mojom::blink::HandwritingRecognizer"*, %"class.WTF::Vector"*, %"class.mojo::InlinedStructPtr"*, %"class.base::OnceCallback"*)*, void (%"class.handwriting::mojom::blink::HandwritingRecognizer"*, %"class.WTF::Vector"*, %"class.mojo::InlinedStructPtr"*, %"class.base::OnceCallback"*)** %34, i64 2
  %36 = load void (%"class.handwriting::mojom::blink::HandwritingRecognizer"*, %"class.WTF::Vector"*, %"class.mojo::InlinedStructPtr"*, %"class.base::OnceCallback"*)*, void (%"class.handwriting::mojom::blink::HandwritingRecognizer"*, %"class.WTF::Vector"*, %"class.mojo::InlinedStructPtr"*, %"class.base::OnceCallback"*)** %35, align 8
  call void %36(%"class.handwriting::mojom::blink::HandwritingRecognizer"* %12, %"class.WTF::Vector"* nonnull %5, %"class.mojo::InlinedStructPtr"* nonnull %6, %"class.base::OnceCallback"* nonnull %7) #11
  %37 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %7, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %37) #11
  call void @_ZN11handwriting5mojom5blink16HandwritingHintsD1Ev(%"class.handwriting::mojom::blink::HandwritingHints"* nonnull %23) #11
  %38 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 0
  %39 = load %"class.mojo::StructPtr"*, %"class.mojo::StructPtr"** %38, align 8
  %40 = icmp eq %"class.mojo::StructPtr"* %39, null
  br i1 %40, label %63, label %41, !prof !2

41:                                               ; preds = %4
  %42 = bitcast %"class.mojo::StructPtr"* %39 to i8*
  %43 = load i32, i32* %14, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %61, label %45, !prof !3

45:                                               ; preds = %41
  %46 = zext i32 %43 to i64
  %47 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %39, i64 %46
  br label %48

48:                                               ; preds = %55, %45
  %49 = phi %"class.mojo::StructPtr"* [ %56, %55 ], [ %39, %45 ]
  %50 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %49, i64 0, i32 0, i32 0, i32 0, i32 0
  %51 = load %"class.handwriting::mojom::blink::HandwritingStroke"*, %"class.handwriting::mojom::blink::HandwritingStroke"** %50, align 8
  store %"class.handwriting::mojom::blink::HandwritingStroke"* null, %"class.handwriting::mojom::blink::HandwritingStroke"** %50, align 8
  %52 = icmp eq %"class.handwriting::mojom::blink::HandwritingStroke"* %51, null
  br i1 %52, label %55, label %53

53:                                               ; preds = %48
  call void @_ZN11handwriting5mojom5blink17HandwritingStrokeD1Ev(%"class.handwriting::mojom::blink::HandwritingStroke"* nonnull %51) #11
  %54 = bitcast %"class.handwriting::mojom::blink::HandwritingStroke"* %51 to i8*
  call void @_ZdlPv(i8* %54) #12
  br label %55

55:                                               ; preds = %53, %48
  %56 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %49, i64 1
  %57 = icmp eq %"class.mojo::StructPtr"* %56, %47
  br i1 %57, label %58, label %48

58:                                               ; preds = %55
  store i32 0, i32* %14, align 4
  %59 = bitcast %"class.WTF::Vector"* %5 to i8**
  %60 = load i8*, i8** %59, align 8
  br label %61

61:                                               ; preds = %58, %41
  %62 = phi i8* [ %60, %58 ], [ %42, %41 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %62) #11
  store %"class.mojo::StructPtr"* null, %"class.mojo::StructPtr"** %38, align 8
  br label %63

63:                                               ; preds = %4, %61
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN11handwriting5mojom5blink32HandwritingRecognizerAsyncWaiterC2EPNS1_21HandwritingRecognizerE(%"class.handwriting::mojom::blink::HandwritingRecognizerAsyncWaiter"* nocapture, %"class.handwriting::mojom::blink::HandwritingRecognizer"*) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.handwriting::mojom::blink::HandwritingRecognizerAsyncWaiter", %"class.handwriting::mojom::blink::HandwritingRecognizerAsyncWaiter"* %0, i64 0, i32 0
  store %"class.handwriting::mojom::blink::HandwritingRecognizer"* %1, %"class.handwriting::mojom::blink::HandwritingRecognizer"** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN11handwriting5mojom5blink32HandwritingRecognizerAsyncWaiterD2Ev(%"class.handwriting::mojom::blink::HandwritingRecognizerAsyncWaiter"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11handwriting5mojom5blink32HandwritingRecognizerAsyncWaiter13GetPredictionEN3WTF6VectorIN4mojo9StructPtrINS1_17HandwritingStrokeEEELj0ENS3_18PartitionAllocatorEEENS5_16InlinedStructPtrINS1_16HandwritingHintsEEEPN4absl8optionalINS4_INS6_INS1_21HandwritingPredictionEEELj0ES9_EEEE(%"class.handwriting::mojom::blink::HandwritingRecognizerAsyncWaiter"* nocapture readonly, %"class.WTF::Vector"* nocapture, %"class.mojo::InlinedStructPtr"*, %"class.absl::optional.20"*) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.base::RunLoop", align 8
  %6 = alloca %"class.WTF::Vector", align 8
  %7 = alloca %"class.mojo::InlinedStructPtr", align 8
  %8 = alloca %"class.base::OnceCallback", align 8
  %9 = alloca %"class.base::Location", align 8
  %10 = ptrtoint %"class.absl::optional.20"* %3 to i64
  %11 = bitcast %"class.base::RunLoop"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %11) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 48, i1 false)
  call void @_ZN4base7RunLoopC1ENS0_4TypeE(%"class.base::RunLoop"* nonnull %5, i32 0) #11
  %12 = getelementptr inbounds %"class.handwriting::mojom::blink::HandwritingRecognizerAsyncWaiter", %"class.handwriting::mojom::blink::HandwritingRecognizerAsyncWaiter"* %0, i64 0, i32 0
  %13 = load %"class.handwriting::mojom::blink::HandwritingRecognizer"*, %"class.handwriting::mojom::blink::HandwritingRecognizer"** %12, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %6, i64 0, i32 0, i32 0, i32 1
  %15 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %6, i64 0, i32 0, i32 0, i32 2
  %16 = bitcast %"class.WTF::Vector"* %1 to i64*
  %17 = bitcast %"class.WTF::Vector"* %6 to i64*
  store i64 0, i64* %17, align 8
  %18 = load i64, i64* %16, align 8
  %19 = bitcast %"class.WTF::Vector"* %6 to i64*
  store atomic i64 0, i64* %16 monotonic, align 8
  store atomic i64 %18, i64* %19 monotonic, align 8
  %20 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 1
  %21 = load i32, i32* %20, align 4
  store i32 %21, i32* %14, align 8
  store i32 0, i32* %20, align 4
  %22 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 2
  %23 = load i32, i32* %22, align 4
  store i32 %23, i32* %15, align 4
  store i32 0, i32* %22, align 4
  %24 = getelementptr inbounds %"class.mojo::InlinedStructPtr", %"class.mojo::InlinedStructPtr"* %7, i64 0, i32 0
  call void @_ZN11handwriting5mojom5blink16HandwritingHintsC1Ev(%"class.handwriting::mojom::blink::HandwritingHints"* nonnull %24) #11
  %25 = getelementptr inbounds %"class.mojo::InlinedStructPtr", %"class.mojo::InlinedStructPtr"* %7, i64 0, i32 1
  store i32 0, i32* %25, align 8
  call void @_ZN11handwriting5mojom5blink16HandwritingHintsD1Ev(%"class.handwriting::mojom::blink::HandwritingHints"* nonnull %24) #11
  call void @_ZN11handwriting5mojom5blink16HandwritingHintsC1Ev(%"class.handwriting::mojom::blink::HandwritingHints"* nonnull %24) #11
  %26 = getelementptr inbounds %"class.mojo::InlinedStructPtr", %"class.mojo::InlinedStructPtr"* %2, i64 0, i32 0
  call void @_ZNSt3__14swapIN11handwriting5mojom5blink16HandwritingHintsEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_(%"class.handwriting::mojom::blink::HandwritingHints"* nonnull dereferenceable(32) %24, %"class.handwriting::mojom::blink::HandwritingHints"* dereferenceable(32) %26) #11
  %27 = getelementptr inbounds %"class.mojo::InlinedStructPtr", %"class.mojo::InlinedStructPtr"* %2, i64 0, i32 1
  %28 = load i32, i32* %25, align 8
  %29 = load i32, i32* %27, align 4
  store i32 %29, i32* %25, align 8
  store i32 %28, i32* %27, align 4
  %30 = ptrtoint %"class.base::RunLoop"* %5 to i64
  %31 = call i8* @_Znwm(i64 56) #12, !noalias !4
  %32 = bitcast i8* %31 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %32, void ()* bitcast (void (%"class.base::internal::BindStateBase"*, %"class.absl::optional.20"*)* @"_ZN4base8internal7InvokerINS0_9BindStateIZN11handwriting5mojom5blink32HandwritingRecognizerAsyncWaiter13GetPredictionEN3WTF6VectorIN4mojo9StructPtrINS5_17HandwritingStrokeEEELj0ENS7_18PartitionAllocatorEEENS9_16InlinedStructPtrINS5_16HandwritingHintsEEEPN4absl8optionalINS8_INSA_INS5_21HandwritingPredictionEEELj0ESD_EEEEE3$_0JPNS_7RunLoopESO_EEEFvSN_EE7RunOnceEPNS0_13BindStateBaseEOSN_" to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @"_ZN4base8internal9BindStateIZN11handwriting5mojom5blink32HandwritingRecognizerAsyncWaiter13GetPredictionEN3WTF6VectorIN4mojo9StructPtrINS4_17HandwritingStrokeEEELj0ENS6_18PartitionAllocatorEEENS8_16InlinedStructPtrINS4_16HandwritingHintsEEEPN4absl8optionalINS7_INS9_INS4_21HandwritingPredictionEEELj0ESC_EEEEE3$_0JPNS_7RunLoopESN_EE7DestroyEPKNS0_13BindStateBaseE") #11, !noalias !4
  %33 = getelementptr inbounds i8, i8* %31, i64 40
  %34 = bitcast i8* %33 to i64*
  store i64 %30, i64* %34, align 8, !noalias !4
  %35 = getelementptr inbounds i8, i8* %31, i64 48
  %36 = bitcast i8* %35 to i64*
  store i64 %10, i64* %36, align 8, !noalias !4
  %37 = bitcast %"class.base::OnceCallback"* %8 to i8**
  store i8* %31, i8** %37, align 8, !alias.scope !4
  %38 = bitcast %"class.handwriting::mojom::blink::HandwritingRecognizer"* %13 to void (%"class.handwriting::mojom::blink::HandwritingRecognizer"*, %"class.WTF::Vector"*, %"class.mojo::InlinedStructPtr"*, %"class.base::OnceCallback"*)***
  %39 = load void (%"class.handwriting::mojom::blink::HandwritingRecognizer"*, %"class.WTF::Vector"*, %"class.mojo::InlinedStructPtr"*, %"class.base::OnceCallback"*)**, void (%"class.handwriting::mojom::blink::HandwritingRecognizer"*, %"class.WTF::Vector"*, %"class.mojo::InlinedStructPtr"*, %"class.base::OnceCallback"*)*** %38, align 8
  %40 = getelementptr inbounds void (%"class.handwriting::mojom::blink::HandwritingRecognizer"*, %"class.WTF::Vector"*, %"class.mojo::InlinedStructPtr"*, %"class.base::OnceCallback"*)*, void (%"class.handwriting::mojom::blink::HandwritingRecognizer"*, %"class.WTF::Vector"*, %"class.mojo::InlinedStructPtr"*, %"class.base::OnceCallback"*)** %39, i64 2
  %41 = load void (%"class.handwriting::mojom::blink::HandwritingRecognizer"*, %"class.WTF::Vector"*, %"class.mojo::InlinedStructPtr"*, %"class.base::OnceCallback"*)*, void (%"class.handwriting::mojom::blink::HandwritingRecognizer"*, %"class.WTF::Vector"*, %"class.mojo::InlinedStructPtr"*, %"class.base::OnceCallback"*)** %40, align 8
  call void %41(%"class.handwriting::mojom::blink::HandwritingRecognizer"* %13, %"class.WTF::Vector"* nonnull %6, %"class.mojo::InlinedStructPtr"* nonnull %7, %"class.base::OnceCallback"* nonnull %8) #11
  %42 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %8, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %42) #11
  call void @_ZN11handwriting5mojom5blink16HandwritingHintsD1Ev(%"class.handwriting::mojom::blink::HandwritingHints"* nonnull %24) #11
  %43 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %6, i64 0, i32 0, i32 0, i32 0
  %44 = load %"class.mojo::StructPtr"*, %"class.mojo::StructPtr"** %43, align 8
  %45 = icmp eq %"class.mojo::StructPtr"* %44, null
  br i1 %45, label %68, label %46, !prof !2

46:                                               ; preds = %4
  %47 = bitcast %"class.mojo::StructPtr"* %44 to i8*
  %48 = load i32, i32* %15, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %66, label %50, !prof !3

50:                                               ; preds = %46
  %51 = zext i32 %48 to i64
  %52 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %44, i64 %51
  br label %53

53:                                               ; preds = %60, %50
  %54 = phi %"class.mojo::StructPtr"* [ %61, %60 ], [ %44, %50 ]
  %55 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %54, i64 0, i32 0, i32 0, i32 0, i32 0
  %56 = load %"class.handwriting::mojom::blink::HandwritingStroke"*, %"class.handwriting::mojom::blink::HandwritingStroke"** %55, align 8
  store %"class.handwriting::mojom::blink::HandwritingStroke"* null, %"class.handwriting::mojom::blink::HandwritingStroke"** %55, align 8
  %57 = icmp eq %"class.handwriting::mojom::blink::HandwritingStroke"* %56, null
  br i1 %57, label %60, label %58

58:                                               ; preds = %53
  call void @_ZN11handwriting5mojom5blink17HandwritingStrokeD1Ev(%"class.handwriting::mojom::blink::HandwritingStroke"* nonnull %56) #11
  %59 = bitcast %"class.handwriting::mojom::blink::HandwritingStroke"* %56 to i8*
  call void @_ZdlPv(i8* %59) #12
  br label %60

60:                                               ; preds = %58, %53
  %61 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %54, i64 1
  %62 = icmp eq %"class.mojo::StructPtr"* %61, %52
  br i1 %62, label %63, label %53

63:                                               ; preds = %60
  store i32 0, i32* %15, align 4
  %64 = bitcast %"class.WTF::Vector"* %6 to i8**
  %65 = load i8*, i8** %64, align 8
  br label %66

66:                                               ; preds = %63, %46
  %67 = phi i8* [ %65, %63 ], [ %47, %46 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %67) #11
  store %"class.mojo::StructPtr"* null, %"class.mojo::StructPtr"** %43, align 8
  br label %68

68:                                               ; preds = %4, %66
  %69 = bitcast %"class.base::Location"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %69) #11
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %9, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.1, i64 0, i64 0), i32 55) #11
  call void @_ZN4base7RunLoop3RunERKNS_8LocationE(%"class.base::RunLoop"* nonnull %5, %"class.base::Location"* nonnull dereferenceable(32) %9) #11
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %69) #11
  call void @_ZN4base7RunLoopD1Ev(%"class.base::RunLoop"* nonnull %5) #11
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %11) #11
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare void @_ZN4base7RunLoopC1ENS0_4TypeE(%"class.base::RunLoop"*, i32) unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare void @_ZN4base7RunLoop3RunERKNS_8LocationE(%"class.base::RunLoop"*, %"class.base::Location"* dereferenceable(32)) local_unnamed_addr #4

declare void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* sret, i8*, i8*, i32) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN4base7RunLoopD1Ev(%"class.base::RunLoop"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11handwriting5mojom5blink50HandwritingRecognitionServiceInterceptorForTesting27CreateHandwritingRecognizerEN4mojo9StructPtrINS1_26HandwritingModelConstraintEEEN4base12OnceCallbackIFvNS0_33CreateHandwritingRecognizerResultENS3_13PendingRemoteINS1_21HandwritingRecognizerEEEEEE(%"class.handwriting::mojom::blink::HandwritingRecognitionServiceInterceptorForTesting"*, %"class.mojo::StructPtr.74"* nocapture, %"class.base::OnceCallback.86"* nocapture) unnamed_addr #0 align 2 {
  %4 = alloca %"class.mojo::StructPtr.74", align 8
  %5 = alloca %"class.base::OnceCallback.86", align 8
  %6 = bitcast %"class.handwriting::mojom::blink::HandwritingRecognitionServiceInterceptorForTesting"* %0 to %"class.handwriting::mojom::blink::HandwritingRecognitionService"* (%"class.handwriting::mojom::blink::HandwritingRecognitionServiceInterceptorForTesting"*)***
  %7 = load %"class.handwriting::mojom::blink::HandwritingRecognitionService"* (%"class.handwriting::mojom::blink::HandwritingRecognitionServiceInterceptorForTesting"*)**, %"class.handwriting::mojom::blink::HandwritingRecognitionService"* (%"class.handwriting::mojom::blink::HandwritingRecognitionServiceInterceptorForTesting"*)*** %6, align 8
  %8 = getelementptr inbounds %"class.handwriting::mojom::blink::HandwritingRecognitionService"* (%"class.handwriting::mojom::blink::HandwritingRecognitionServiceInterceptorForTesting"*)*, %"class.handwriting::mojom::blink::HandwritingRecognitionService"* (%"class.handwriting::mojom::blink::HandwritingRecognitionServiceInterceptorForTesting"*)** %7, i64 4
  %9 = load %"class.handwriting::mojom::blink::HandwritingRecognitionService"* (%"class.handwriting::mojom::blink::HandwritingRecognitionServiceInterceptorForTesting"*)*, %"class.handwriting::mojom::blink::HandwritingRecognitionService"* (%"class.handwriting::mojom::blink::HandwritingRecognitionServiceInterceptorForTesting"*)** %8, align 8
  %10 = tail call %"class.handwriting::mojom::blink::HandwritingRecognitionService"* %9(%"class.handwriting::mojom::blink::HandwritingRecognitionServiceInterceptorForTesting"* %0) #11
  %11 = bitcast %"class.mojo::StructPtr.74"* %4 to i64*
  %12 = getelementptr inbounds %"class.mojo::StructPtr.74", %"class.mojo::StructPtr.74"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = bitcast %"class.mojo::StructPtr.74"* %1 to i64*
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %11, align 8
  store i64 0, i64* %13, align 8
  %15 = getelementptr inbounds %"class.base::OnceCallback.86", %"class.base::OnceCallback.86"* %2, i64 0, i32 0, i32 0, i32 0
  %16 = bitcast %"class.base::OnceCallback.86"* %2 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.base::OnceCallback.86"* %5 to i64*
  store i64 %17, i64* %18, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %15, align 8
  %19 = bitcast %"class.handwriting::mojom::blink::HandwritingRecognitionService"* %10 to void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.74"*, %"class.base::OnceCallback.86"*)***
  %20 = load void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.74"*, %"class.base::OnceCallback.86"*)**, void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.74"*, %"class.base::OnceCallback.86"*)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.74"*, %"class.base::OnceCallback.86"*)*, void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.74"*, %"class.base::OnceCallback.86"*)** %20, i64 2
  %22 = load void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.74"*, %"class.base::OnceCallback.86"*)*, void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.74"*, %"class.base::OnceCallback.86"*)** %21, align 8
  call void %22(%"class.handwriting::mojom::blink::HandwritingRecognitionService"* %10, %"class.mojo::StructPtr.74"* nonnull %4, %"class.base::OnceCallback.86"* nonnull %5) #11
  %23 = getelementptr inbounds %"class.base::OnceCallback.86", %"class.base::OnceCallback.86"* %5, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %23) #11
  %24 = load %"class.handwriting::mojom::blink::HandwritingModelConstraint"*, %"class.handwriting::mojom::blink::HandwritingModelConstraint"** %12, align 8
  store %"class.handwriting::mojom::blink::HandwritingModelConstraint"* null, %"class.handwriting::mojom::blink::HandwritingModelConstraint"** %12, align 8
  %25 = icmp eq %"class.handwriting::mojom::blink::HandwritingModelConstraint"* %24, null
  br i1 %25, label %28, label %26

26:                                               ; preds = %3
  call void @_ZN11handwriting5mojom5blink26HandwritingModelConstraintD1Ev(%"class.handwriting::mojom::blink::HandwritingModelConstraint"* nonnull %24) #11
  %27 = bitcast %"class.handwriting::mojom::blink::HandwritingModelConstraint"* %24 to i8*
  call void @_ZdlPv(i8* %27) #12
  br label %28

28:                                               ; preds = %3, %26
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11handwriting5mojom5blink50HandwritingRecognitionServiceInterceptorForTesting33QueryHandwritingRecognizerSupportEN4mojo9StructPtrINS1_23HandwritingFeatureQueryEEEN4base12OnceCallbackIFvNS3_16InlinedStructPtrINS1_29HandwritingFeatureQueryResultEEEEEE(%"class.handwriting::mojom::blink::HandwritingRecognitionServiceInterceptorForTesting"*, %"class.mojo::StructPtr.87"* nocapture, %"class.base::OnceCallback.94"* nocapture) unnamed_addr #0 align 2 {
  %4 = alloca %"class.mojo::StructPtr.87", align 8
  %5 = alloca %"class.base::OnceCallback.94", align 8
  %6 = bitcast %"class.handwriting::mojom::blink::HandwritingRecognitionServiceInterceptorForTesting"* %0 to %"class.handwriting::mojom::blink::HandwritingRecognitionService"* (%"class.handwriting::mojom::blink::HandwritingRecognitionServiceInterceptorForTesting"*)***
  %7 = load %"class.handwriting::mojom::blink::HandwritingRecognitionService"* (%"class.handwriting::mojom::blink::HandwritingRecognitionServiceInterceptorForTesting"*)**, %"class.handwriting::mojom::blink::HandwritingRecognitionService"* (%"class.handwriting::mojom::blink::HandwritingRecognitionServiceInterceptorForTesting"*)*** %6, align 8
  %8 = getelementptr inbounds %"class.handwriting::mojom::blink::HandwritingRecognitionService"* (%"class.handwriting::mojom::blink::HandwritingRecognitionServiceInterceptorForTesting"*)*, %"class.handwriting::mojom::blink::HandwritingRecognitionService"* (%"class.handwriting::mojom::blink::HandwritingRecognitionServiceInterceptorForTesting"*)** %7, i64 4
  %9 = load %"class.handwriting::mojom::blink::HandwritingRecognitionService"* (%"class.handwriting::mojom::blink::HandwritingRecognitionServiceInterceptorForTesting"*)*, %"class.handwriting::mojom::blink::HandwritingRecognitionService"* (%"class.handwriting::mojom::blink::HandwritingRecognitionServiceInterceptorForTesting"*)** %8, align 8
  %10 = tail call %"class.handwriting::mojom::blink::HandwritingRecognitionService"* %9(%"class.handwriting::mojom::blink::HandwritingRecognitionServiceInterceptorForTesting"* %0) #11
  %11 = bitcast %"class.mojo::StructPtr.87"* %4 to i64*
  %12 = getelementptr inbounds %"class.mojo::StructPtr.87", %"class.mojo::StructPtr.87"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = bitcast %"class.mojo::StructPtr.87"* %1 to i64*
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %11, align 8
  store i64 0, i64* %13, align 8
  %15 = getelementptr inbounds %"class.base::OnceCallback.94", %"class.base::OnceCallback.94"* %2, i64 0, i32 0, i32 0, i32 0
  %16 = bitcast %"class.base::OnceCallback.94"* %2 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.base::OnceCallback.94"* %5 to i64*
  store i64 %17, i64* %18, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %15, align 8
  %19 = bitcast %"class.handwriting::mojom::blink::HandwritingRecognitionService"* %10 to void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.87"*, %"class.base::OnceCallback.94"*)***
  %20 = load void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.87"*, %"class.base::OnceCallback.94"*)**, void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.87"*, %"class.base::OnceCallback.94"*)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.87"*, %"class.base::OnceCallback.94"*)*, void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.87"*, %"class.base::OnceCallback.94"*)** %20, i64 3
  %22 = load void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.87"*, %"class.base::OnceCallback.94"*)*, void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.87"*, %"class.base::OnceCallback.94"*)** %21, align 8
  call void %22(%"class.handwriting::mojom::blink::HandwritingRecognitionService"* %10, %"class.mojo::StructPtr.87"* nonnull %4, %"class.base::OnceCallback.94"* nonnull %5) #11
  %23 = getelementptr inbounds %"class.base::OnceCallback.94", %"class.base::OnceCallback.94"* %5, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %23) #11
  %24 = load %"class.handwriting::mojom::blink::HandwritingFeatureQuery"*, %"class.handwriting::mojom::blink::HandwritingFeatureQuery"** %12, align 8
  store %"class.handwriting::mojom::blink::HandwritingFeatureQuery"* null, %"class.handwriting::mojom::blink::HandwritingFeatureQuery"** %12, align 8
  %25 = icmp eq %"class.handwriting::mojom::blink::HandwritingFeatureQuery"* %24, null
  br i1 %25, label %28, label %26

26:                                               ; preds = %3
  call void @_ZN11handwriting5mojom5blink23HandwritingFeatureQueryD1Ev(%"class.handwriting::mojom::blink::HandwritingFeatureQuery"* nonnull %24) #11
  %27 = bitcast %"class.handwriting::mojom::blink::HandwritingFeatureQuery"* %24 to i8*
  call void @_ZdlPv(i8* %27) #12
  br label %28

28:                                               ; preds = %3, %26
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN11handwriting5mojom5blink40HandwritingRecognitionServiceAsyncWaiterC2EPNS1_29HandwritingRecognitionServiceE(%"class.handwriting::mojom::blink::HandwritingRecognitionServiceAsyncWaiter"* nocapture, %"class.handwriting::mojom::blink::HandwritingRecognitionService"*) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.handwriting::mojom::blink::HandwritingRecognitionServiceAsyncWaiter", %"class.handwriting::mojom::blink::HandwritingRecognitionServiceAsyncWaiter"* %0, i64 0, i32 0
  store %"class.handwriting::mojom::blink::HandwritingRecognitionService"* %1, %"class.handwriting::mojom::blink::HandwritingRecognitionService"** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN11handwriting5mojom5blink40HandwritingRecognitionServiceAsyncWaiterD2Ev(%"class.handwriting::mojom::blink::HandwritingRecognitionServiceAsyncWaiter"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11handwriting5mojom5blink40HandwritingRecognitionServiceAsyncWaiter27CreateHandwritingRecognizerEN4mojo9StructPtrINS1_26HandwritingModelConstraintEEEPNS0_33CreateHandwritingRecognizerResultEPNS3_13PendingRemoteINS1_21HandwritingRecognizerEEE(%"class.handwriting::mojom::blink::HandwritingRecognitionServiceAsyncWaiter"* nocapture readonly, %"class.mojo::StructPtr.74"* nocapture, i32*, %"class.mojo::PendingRemote"*) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.base::RunLoop", align 8
  %6 = alloca %"class.mojo::StructPtr.74", align 8
  %7 = alloca %"class.base::OnceCallback.86", align 8
  %8 = alloca %"class.base::Location", align 8
  %9 = ptrtoint i32* %2 to i64
  %10 = ptrtoint %"class.mojo::PendingRemote"* %3 to i64
  %11 = bitcast %"class.base::RunLoop"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %11) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 48, i1 false)
  call void @_ZN4base7RunLoopC1ENS0_4TypeE(%"class.base::RunLoop"* nonnull %5, i32 0) #11
  %12 = getelementptr inbounds %"class.handwriting::mojom::blink::HandwritingRecognitionServiceAsyncWaiter", %"class.handwriting::mojom::blink::HandwritingRecognitionServiceAsyncWaiter"* %0, i64 0, i32 0
  %13 = load %"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.handwriting::mojom::blink::HandwritingRecognitionService"** %12, align 8
  %14 = bitcast %"class.mojo::StructPtr.74"* %6 to i64*
  %15 = getelementptr inbounds %"class.mojo::StructPtr.74", %"class.mojo::StructPtr.74"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = bitcast %"class.mojo::StructPtr.74"* %1 to i64*
  %17 = load i64, i64* %16, align 8
  store i64 %17, i64* %14, align 8
  store i64 0, i64* %16, align 8
  %18 = ptrtoint %"class.base::RunLoop"* %5 to i64
  %19 = call i8* @_Znwm(i64 64) #12, !noalias !9
  %20 = bitcast i8* %19 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %20, void ()* bitcast (void (%"class.base::internal::BindStateBase"*, i32, %"class.mojo::PendingRemote"*)* @"_ZN4base8internal7InvokerINS0_9BindStateIZN11handwriting5mojom5blink40HandwritingRecognitionServiceAsyncWaiter27CreateHandwritingRecognizerEN4mojo9StructPtrINS5_26HandwritingModelConstraintEEEPNS4_33CreateHandwritingRecognizerResultEPNS7_13PendingRemoteINS5_21HandwritingRecognizerEEEE3$_1JPNS_7RunLoopESC_SG_EEEFvSB_SF_EE7RunOnceEPNS0_13BindStateBaseESB_OSF_" to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @"_ZN4base8internal9BindStateIZN11handwriting5mojom5blink40HandwritingRecognitionServiceAsyncWaiter27CreateHandwritingRecognizerEN4mojo9StructPtrINS4_26HandwritingModelConstraintEEEPNS3_33CreateHandwritingRecognizerResultEPNS6_13PendingRemoteINS4_21HandwritingRecognizerEEEE3$_1JPNS_7RunLoopESB_SF_EE7DestroyEPKNS0_13BindStateBaseE") #11, !noalias !9
  %21 = getelementptr inbounds i8, i8* %19, i64 40
  %22 = bitcast i8* %21 to i64*
  store i64 %18, i64* %22, align 8, !noalias !9
  %23 = getelementptr inbounds i8, i8* %19, i64 48
  %24 = bitcast i8* %23 to i64*
  store i64 %9, i64* %24, align 8, !noalias !9
  %25 = getelementptr inbounds i8, i8* %19, i64 56
  %26 = bitcast i8* %25 to i64*
  store i64 %10, i64* %26, align 8, !noalias !9
  %27 = bitcast %"class.base::OnceCallback.86"* %7 to i8**
  store i8* %19, i8** %27, align 8, !alias.scope !9
  %28 = bitcast %"class.handwriting::mojom::blink::HandwritingRecognitionService"* %13 to void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.74"*, %"class.base::OnceCallback.86"*)***
  %29 = load void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.74"*, %"class.base::OnceCallback.86"*)**, void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.74"*, %"class.base::OnceCallback.86"*)*** %28, align 8
  %30 = getelementptr inbounds void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.74"*, %"class.base::OnceCallback.86"*)*, void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.74"*, %"class.base::OnceCallback.86"*)** %29, i64 2
  %31 = load void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.74"*, %"class.base::OnceCallback.86"*)*, void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.74"*, %"class.base::OnceCallback.86"*)** %30, align 8
  call void %31(%"class.handwriting::mojom::blink::HandwritingRecognitionService"* %13, %"class.mojo::StructPtr.74"* nonnull %6, %"class.base::OnceCallback.86"* nonnull %7) #11
  %32 = getelementptr inbounds %"class.base::OnceCallback.86", %"class.base::OnceCallback.86"* %7, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %32) #11
  %33 = load %"class.handwriting::mojom::blink::HandwritingModelConstraint"*, %"class.handwriting::mojom::blink::HandwritingModelConstraint"** %15, align 8
  store %"class.handwriting::mojom::blink::HandwritingModelConstraint"* null, %"class.handwriting::mojom::blink::HandwritingModelConstraint"** %15, align 8
  %34 = icmp eq %"class.handwriting::mojom::blink::HandwritingModelConstraint"* %33, null
  br i1 %34, label %37, label %35

35:                                               ; preds = %4
  call void @_ZN11handwriting5mojom5blink26HandwritingModelConstraintD1Ev(%"class.handwriting::mojom::blink::HandwritingModelConstraint"* nonnull %33) #11
  %36 = bitcast %"class.handwriting::mojom::blink::HandwritingModelConstraint"* %33 to i8*
  call void @_ZdlPv(i8* %36) #12
  br label %37

37:                                               ; preds = %4, %35
  %38 = bitcast %"class.base::Location"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %38) #11
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %8, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.1, i64 0, i64 0), i32 88) #11
  call void @_ZN4base7RunLoop3RunERKNS_8LocationE(%"class.base::RunLoop"* nonnull %5, %"class.base::Location"* nonnull dereferenceable(32) %8) #11
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %38) #11
  call void @_ZN4base7RunLoopD1Ev(%"class.base::RunLoop"* nonnull %5) #11
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %11) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11handwriting5mojom5blink40HandwritingRecognitionServiceAsyncWaiter33QueryHandwritingRecognizerSupportEN4mojo9StructPtrINS1_23HandwritingFeatureQueryEEEPNS3_16InlinedStructPtrINS1_29HandwritingFeatureQueryResultEEE(%"class.handwriting::mojom::blink::HandwritingRecognitionServiceAsyncWaiter"* nocapture readonly, %"class.mojo::StructPtr.87"* nocapture, %"class.mojo::InlinedStructPtr.97"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::RunLoop", align 8
  %5 = alloca %"class.mojo::StructPtr.87", align 8
  %6 = alloca %"class.base::OnceCallback.94", align 8
  %7 = alloca %"class.base::Location", align 8
  %8 = ptrtoint %"class.mojo::InlinedStructPtr.97"* %2 to i64
  %9 = bitcast %"class.base::RunLoop"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %9) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 48, i1 false)
  call void @_ZN4base7RunLoopC1ENS0_4TypeE(%"class.base::RunLoop"* nonnull %4, i32 0) #11
  %10 = getelementptr inbounds %"class.handwriting::mojom::blink::HandwritingRecognitionServiceAsyncWaiter", %"class.handwriting::mojom::blink::HandwritingRecognitionServiceAsyncWaiter"* %0, i64 0, i32 0
  %11 = load %"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.handwriting::mojom::blink::HandwritingRecognitionService"** %10, align 8
  %12 = bitcast %"class.mojo::StructPtr.87"* %5 to i64*
  %13 = getelementptr inbounds %"class.mojo::StructPtr.87", %"class.mojo::StructPtr.87"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %14 = bitcast %"class.mojo::StructPtr.87"* %1 to i64*
  %15 = load i64, i64* %14, align 8
  store i64 %15, i64* %12, align 8
  store i64 0, i64* %14, align 8
  %16 = ptrtoint %"class.base::RunLoop"* %4 to i64
  %17 = call i8* @_Znwm(i64 56) #12, !noalias !14
  %18 = bitcast i8* %17 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %18, void ()* bitcast (void (%"class.base::internal::BindStateBase"*, %"class.mojo::InlinedStructPtr.97"*)* @"_ZN4base8internal7InvokerINS0_9BindStateIZN11handwriting5mojom5blink40HandwritingRecognitionServiceAsyncWaiter33QueryHandwritingRecognizerSupportEN4mojo9StructPtrINS5_23HandwritingFeatureQueryEEEPNS7_16InlinedStructPtrINS5_29HandwritingFeatureQueryResultEEEE3$_2JPNS_7RunLoopESE_EEEFvSD_EE7RunOnceEPNS0_13BindStateBaseEOSD_" to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @"_ZN4base8internal9BindStateIZN11handwriting5mojom5blink40HandwritingRecognitionServiceAsyncWaiter33QueryHandwritingRecognizerSupportEN4mojo9StructPtrINS4_23HandwritingFeatureQueryEEEPNS6_16InlinedStructPtrINS4_29HandwritingFeatureQueryResultEEEE3$_2JPNS_7RunLoopESD_EE7DestroyEPKNS0_13BindStateBaseE") #11, !noalias !14
  %19 = getelementptr inbounds i8, i8* %17, i64 40
  %20 = bitcast i8* %19 to i64*
  store i64 %16, i64* %20, align 8, !noalias !14
  %21 = getelementptr inbounds i8, i8* %17, i64 48
  %22 = bitcast i8* %21 to i64*
  store i64 %8, i64* %22, align 8, !noalias !14
  %23 = bitcast %"class.base::OnceCallback.94"* %6 to i8**
  store i8* %17, i8** %23, align 8, !alias.scope !14
  %24 = bitcast %"class.handwriting::mojom::blink::HandwritingRecognitionService"* %11 to void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.87"*, %"class.base::OnceCallback.94"*)***
  %25 = load void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.87"*, %"class.base::OnceCallback.94"*)**, void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.87"*, %"class.base::OnceCallback.94"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.87"*, %"class.base::OnceCallback.94"*)*, void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.87"*, %"class.base::OnceCallback.94"*)** %25, i64 3
  %27 = load void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.87"*, %"class.base::OnceCallback.94"*)*, void (%"class.handwriting::mojom::blink::HandwritingRecognitionService"*, %"class.mojo::StructPtr.87"*, %"class.base::OnceCallback.94"*)** %26, align 8
  call void %27(%"class.handwriting::mojom::blink::HandwritingRecognitionService"* %11, %"class.mojo::StructPtr.87"* nonnull %5, %"class.base::OnceCallback.94"* nonnull %6) #11
  %28 = getelementptr inbounds %"class.base::OnceCallback.94", %"class.base::OnceCallback.94"* %6, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %28) #11
  %29 = load %"class.handwriting::mojom::blink::HandwritingFeatureQuery"*, %"class.handwriting::mojom::blink::HandwritingFeatureQuery"** %13, align 8
  store %"class.handwriting::mojom::blink::HandwritingFeatureQuery"* null, %"class.handwriting::mojom::blink::HandwritingFeatureQuery"** %13, align 8
  %30 = icmp eq %"class.handwriting::mojom::blink::HandwritingFeatureQuery"* %29, null
  br i1 %30, label %33, label %31

31:                                               ; preds = %3
  call void @_ZN11handwriting5mojom5blink23HandwritingFeatureQueryD1Ev(%"class.handwriting::mojom::blink::HandwritingFeatureQuery"* nonnull %29) #11
  %32 = bitcast %"class.handwriting::mojom::blink::HandwritingFeatureQuery"* %29 to i8*
  call void @_ZdlPv(i8* %32) #12
  br label %33

33:                                               ; preds = %3, %31
  %34 = bitcast %"class.base::Location"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %34) #11
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %7, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.1, i64 0, i64 0), i32 103) #11
  call void @_ZN4base7RunLoop3RunERKNS_8LocationE(%"class.base::RunLoop"* nonnull %4, %"class.base::Location"* nonnull dereferenceable(32) %7) #11
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %34) #11
  call void @_ZN4base7RunLoopD1Ev(%"class.base::RunLoop"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %9) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN11handwriting5mojom5blink21HandwritingRecognizerD2Ev(%"class.handwriting::mojom::blink::HandwritingRecognizer"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN11handwriting5mojom5blink42HandwritingRecognizerInterceptorForTestingD0Ev(%"class.handwriting::mojom::blink::HandwritingRecognizerInterceptorForTesting"*) unnamed_addr #6 comdat align 2 {
  tail call void @llvm.trap() #13
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN11handwriting5mojom5blink29HandwritingRecognitionServiceD2Ev(%"class.handwriting::mojom::blink::HandwritingRecognitionService"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN11handwriting5mojom5blink50HandwritingRecognitionServiceInterceptorForTestingD0Ev(%"class.handwriting::mojom::blink::HandwritingRecognitionServiceInterceptorForTesting"*) unnamed_addr #6 comdat align 2 {
  tail call void @llvm.trap() #13
  unreachable
}

; Function Attrs: nounwind
declare void @_ZN11handwriting5mojom5blink16HandwritingHintsD1Ev(%"class.handwriting::mojom::blink::HandwritingHints"*) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN11handwriting5mojom5blink17HandwritingStrokeD1Ev(%"class.handwriting::mojom::blink::HandwritingStroke"*) unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN11handwriting5mojom5blink26HandwritingModelConstraintD1Ev(%"class.handwriting::mojom::blink::HandwritingModelConstraint"*) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN11handwriting5mojom5blink23HandwritingFeatureQueryD1Ev(%"class.handwriting::mojom::blink::HandwritingFeatureQuery"*) unnamed_addr #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

declare void @_ZN11handwriting5mojom5blink16HandwritingHintsC1Ev(%"class.handwriting::mojom::blink::HandwritingHints"*) unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__14swapIN11handwriting5mojom5blink16HandwritingHintsEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_(%"class.handwriting::mojom::blink::HandwritingHints"* dereferenceable(32), %"class.handwriting::mojom::blink::HandwritingHints"* dereferenceable(32)) local_unnamed_addr #6 comdat {
  %3 = alloca %"class.handwriting::mojom::blink::HandwritingHints", align 8
  %4 = bitcast %"class.handwriting::mojom::blink::HandwritingHints"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #11
  %5 = getelementptr inbounds %"class.handwriting::mojom::blink::HandwritingHints", %"class.handwriting::mojom::blink::HandwritingHints"* %3, i64 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.handwriting::mojom::blink::HandwritingHints", %"class.handwriting::mojom::blink::HandwritingHints"* %3, i64 0, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %"class.handwriting::mojom::blink::HandwritingHints", %"class.handwriting::mojom::blink::HandwritingHints"* %3, i64 0, i32 2, i32 0, i32 0
  %8 = getelementptr inbounds %"class.handwriting::mojom::blink::HandwritingHints", %"class.handwriting::mojom::blink::HandwritingHints"* %3, i64 0, i32 3
  %9 = getelementptr inbounds %"class.handwriting::mojom::blink::HandwritingHints", %"class.handwriting::mojom::blink::HandwritingHints"* %0, i64 0, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.handwriting::mojom::blink::HandwritingHints", %"class.handwriting::mojom::blink::HandwritingHints"* %3, i64 0, i32 1
  %11 = bitcast %"class.WTF::String"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  store %"class.WTF::StringImpl"* %12, %"class.WTF::StringImpl"** %5, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %13, label %31, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 2
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %31

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i33
  %23 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %22, i33 1) #11
  %24 = extractvalue { i33, i1 } %23, 1
  %25 = extractvalue { i33, i1 } %23, 0
  %26 = icmp slt i33 %25, 0
  %27 = or i1 %24, %26
  br i1 %27, label %28, label %29, !prof !3

28:                                               ; preds = %19
  tail call void @llvm.trap() #11
  unreachable

29:                                               ; preds = %19
  %30 = trunc i33 %25 to i32
  store i32 %30, i32* %20, align 4
  br label %31

31:                                               ; preds = %29, %14, %2
  %32 = getelementptr inbounds %"class.handwriting::mojom::blink::HandwritingHints", %"class.handwriting::mojom::blink::HandwritingHints"* %0, i64 0, i32 1, i32 0, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  store %"class.WTF::StringImpl"* %33, %"class.WTF::StringImpl"** %6, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, null
  br i1 %34, label %52, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = and i32 %37, 2
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %52

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i33
  %44 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %43, i33 1) #11
  %45 = extractvalue { i33, i1 } %44, 1
  %46 = extractvalue { i33, i1 } %44, 0
  %47 = icmp slt i33 %46, 0
  %48 = or i1 %45, %47
  br i1 %48, label %49, label %50, !prof !3

49:                                               ; preds = %40
  tail call void @llvm.trap() #11
  unreachable

50:                                               ; preds = %40
  %51 = trunc i33 %46 to i32
  store i32 %51, i32* %41, align 4
  br label %52

52:                                               ; preds = %50, %35, %31
  %53 = getelementptr inbounds %"class.handwriting::mojom::blink::HandwritingHints", %"class.handwriting::mojom::blink::HandwritingHints"* %0, i64 0, i32 2, i32 0, i32 0
  %54 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %53, align 8
  store %"class.WTF::StringImpl"* %54, %"class.WTF::StringImpl"** %7, align 8
  %55 = icmp eq %"class.WTF::StringImpl"* %54, null
  br i1 %55, label %73, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load atomic i32, i32* %57 monotonic, align 4
  %59 = and i32 %58, 2
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %73

61:                                               ; preds = %56
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  %64 = zext i32 %63 to i33
  %65 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %64, i33 1) #11
  %66 = extractvalue { i33, i1 } %65, 1
  %67 = extractvalue { i33, i1 } %65, 0
  %68 = icmp slt i33 %67, 0
  %69 = or i1 %66, %68
  br i1 %69, label %70, label %71, !prof !3

70:                                               ; preds = %61
  tail call void @llvm.trap() #11
  unreachable

71:                                               ; preds = %61
  %72 = trunc i33 %67 to i32
  store i32 %72, i32* %62, align 4
  br label %73

73:                                               ; preds = %52, %56, %71
  %74 = getelementptr inbounds %"class.handwriting::mojom::blink::HandwritingHints", %"class.handwriting::mojom::blink::HandwritingHints"* %0, i64 0, i32 3
  %75 = load i32, i32* %74, align 8
  store i32 %75, i32* %8, align 8
  %76 = tail call dereferenceable(32) %"class.handwriting::mojom::blink::HandwritingHints"* @_ZN11handwriting5mojom5blink16HandwritingHintsaSERKS2_(%"class.handwriting::mojom::blink::HandwritingHints"* %0, %"class.handwriting::mojom::blink::HandwritingHints"* dereferenceable(32) %1) #11
  %77 = call dereferenceable(32) %"class.handwriting::mojom::blink::HandwritingHints"* @_ZN11handwriting5mojom5blink16HandwritingHintsaSERKS2_(%"class.handwriting::mojom::blink::HandwritingHints"* %1, %"class.handwriting::mojom::blink::HandwritingHints"* nonnull dereferenceable(32) %3) #11
  call void @_ZN11handwriting5mojom5blink16HandwritingHintsD1Ev(%"class.handwriting::mojom::blink::HandwritingHints"* nonnull %3) #11
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #11
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(32) %"class.handwriting::mojom::blink::HandwritingHints"* @_ZN11handwriting5mojom5blink16HandwritingHintsaSERKS2_(%"class.handwriting::mojom::blink::HandwritingHints"*, %"class.handwriting::mojom::blink::HandwritingHints"* dereferenceable(32)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.handwriting::mojom::blink::HandwritingHints", %"class.handwriting::mojom::blink::HandwritingHints"* %1, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %5, label %23, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 2
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %23

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i33
  %15 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %14, i33 1) #11
  %16 = extractvalue { i33, i1 } %15, 1
  %17 = extractvalue { i33, i1 } %15, 0
  %18 = icmp slt i33 %17, 0
  %19 = or i1 %16, %18
  br i1 %19, label %20, label %21, !prof !3

20:                                               ; preds = %11
  tail call void @llvm.trap() #11
  unreachable

21:                                               ; preds = %11
  %22 = trunc i33 %17 to i32
  store i32 %22, i32* %12, align 4
  br label %23

23:                                               ; preds = %21, %6, %2
  %24 = ptrtoint %"class.WTF::StringImpl"* %4 to i64
  %25 = bitcast %"class.handwriting::mojom::blink::HandwritingHints"* %0 to i64*
  %26 = getelementptr inbounds %"class.handwriting::mojom::blink::HandwritingHints", %"class.handwriting::mojom::blink::HandwritingHints"* %0, i64 0, i32 0, i32 0, i32 0
  %27 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %26, align 8
  store i64 %24, i64* %25, align 8
  %28 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %28, label %42, label %29

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %35 = load i32, i32* %34, align 4
  br i1 %33, label %36, label %38

36:                                               ; preds = %29
  %37 = add i32 %35, -1
  store i32 %37, i32* %34, align 4
  br label %38

38:                                               ; preds = %36, %29
  %39 = phi i32 [ %37, %36 ], [ %35, %29 ]
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %38
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %27) #11
  br label %42

42:                                               ; preds = %23, %38, %41
  %43 = getelementptr inbounds %"class.handwriting::mojom::blink::HandwritingHints", %"class.handwriting::mojom::blink::HandwritingHints"* %0, i64 0, i32 1
  %44 = getelementptr inbounds %"class.handwriting::mojom::blink::HandwritingHints", %"class.handwriting::mojom::blink::HandwritingHints"* %1, i64 0, i32 1, i32 0, i32 0
  %45 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %44, align 8
  %46 = icmp eq %"class.WTF::StringImpl"* %45, null
  br i1 %46, label %64, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load atomic i32, i32* %48 monotonic, align 4
  %50 = and i32 %49, 2
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %64

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = zext i32 %54 to i33
  %56 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %55, i33 1) #11
  %57 = extractvalue { i33, i1 } %56, 1
  %58 = extractvalue { i33, i1 } %56, 0
  %59 = icmp slt i33 %58, 0
  %60 = or i1 %57, %59
  br i1 %60, label %61, label %62, !prof !3

61:                                               ; preds = %52
  tail call void @llvm.trap() #11
  unreachable

62:                                               ; preds = %52
  %63 = trunc i33 %58 to i32
  store i32 %63, i32* %53, align 4
  br label %64

64:                                               ; preds = %62, %47, %42
  %65 = ptrtoint %"class.WTF::StringImpl"* %45 to i64
  %66 = bitcast %"class.WTF::String"* %43 to i64*
  %67 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %43, i64 0, i32 0, i32 0
  %68 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %67, align 8
  store i64 %65, i64* %66, align 8
  %69 = icmp eq %"class.WTF::StringImpl"* %68, null
  br i1 %69, label %83, label %70

70:                                               ; preds = %64
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %68, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %72 = load atomic i32, i32* %71 monotonic, align 4
  %73 = and i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %68, i64 0, i32 0
  %76 = load i32, i32* %75, align 4
  br i1 %74, label %77, label %79

77:                                               ; preds = %70
  %78 = add i32 %76, -1
  store i32 %78, i32* %75, align 4
  br label %79

79:                                               ; preds = %77, %70
  %80 = phi i32 [ %78, %77 ], [ %76, %70 ]
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %83

82:                                               ; preds = %79
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %68) #11
  br label %83

83:                                               ; preds = %64, %79, %82
  %84 = getelementptr inbounds %"class.handwriting::mojom::blink::HandwritingHints", %"class.handwriting::mojom::blink::HandwritingHints"* %0, i64 0, i32 2
  %85 = getelementptr inbounds %"class.handwriting::mojom::blink::HandwritingHints", %"class.handwriting::mojom::blink::HandwritingHints"* %1, i64 0, i32 2, i32 0, i32 0
  %86 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %85, align 8
  %87 = icmp eq %"class.WTF::StringImpl"* %86, null
  br i1 %87, label %105, label %88

88:                                               ; preds = %83
  %89 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %90 = load atomic i32, i32* %89 monotonic, align 4
  %91 = and i32 %90, 2
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %105

93:                                               ; preds = %88
  %94 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 0
  %95 = load i32, i32* %94, align 4
  %96 = zext i32 %95 to i33
  %97 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %96, i33 1) #11
  %98 = extractvalue { i33, i1 } %97, 1
  %99 = extractvalue { i33, i1 } %97, 0
  %100 = icmp slt i33 %99, 0
  %101 = or i1 %98, %100
  br i1 %101, label %102, label %103, !prof !3

102:                                              ; preds = %93
  tail call void @llvm.trap() #11
  unreachable

103:                                              ; preds = %93
  %104 = trunc i33 %99 to i32
  store i32 %104, i32* %94, align 4
  br label %105

105:                                              ; preds = %103, %88, %83
  %106 = ptrtoint %"class.WTF::StringImpl"* %86 to i64
  %107 = bitcast %"class.WTF::String"* %84 to i64*
  %108 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %84, i64 0, i32 0, i32 0
  %109 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %108, align 8
  store i64 %106, i64* %107, align 8
  %110 = icmp eq %"class.WTF::StringImpl"* %109, null
  br i1 %110, label %124, label %111

111:                                              ; preds = %105
  %112 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %109, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %113 = load atomic i32, i32* %112 monotonic, align 4
  %114 = and i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %109, i64 0, i32 0
  %117 = load i32, i32* %116, align 4
  br i1 %115, label %118, label %120

118:                                              ; preds = %111
  %119 = add i32 %117, -1
  store i32 %119, i32* %116, align 4
  br label %120

120:                                              ; preds = %118, %111
  %121 = phi i32 [ %119, %118 ], [ %117, %111 ]
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %124

123:                                              ; preds = %120
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %109) #11
  br label %124

124:                                              ; preds = %105, %120, %123
  %125 = getelementptr inbounds %"class.handwriting::mojom::blink::HandwritingHints", %"class.handwriting::mojom::blink::HandwritingHints"* %1, i64 0, i32 3
  %126 = load i32, i32* %125, align 8
  %127 = getelementptr inbounds %"class.handwriting::mojom::blink::HandwritingHints", %"class.handwriting::mojom::blink::HandwritingHints"* %0, i64 0, i32 3
  store i32 %126, i32* %127, align 8
  ret %"class.handwriting::mojom::blink::HandwritingHints"* %0
}

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #9

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN4base8internal7InvokerINS0_9BindStateIZN11handwriting5mojom5blink32HandwritingRecognizerAsyncWaiter13GetPredictionEN3WTF6VectorIN4mojo9StructPtrINS5_17HandwritingStrokeEEELj0ENS7_18PartitionAllocatorEEENS9_16InlinedStructPtrINS5_16HandwritingHintsEEEPN4absl8optionalINS8_INSA_INS5_21HandwritingPredictionEEELj0ESD_EEEEE3$_0JPNS_7RunLoopESO_EEEFvSN_EE7RunOnceEPNS0_13BindStateBaseEOSN_"(%"class.base::internal::BindStateBase"* nocapture readonly, %"class.absl::optional.20"* nocapture dereferenceable(24)) #0 align 2 {
  %3 = alloca %"class.absl::optional.20", align 8
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %5 = bitcast void ()** %4 to %"class.base::RunLoop"**
  %6 = getelementptr inbounds void ()*, void ()** %4, i64 1
  %7 = bitcast void ()** %6 to %"class.absl::optional.20"**
  %8 = getelementptr inbounds %"class.absl::optional.20", %"class.absl::optional.20"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #11
  %9 = load %"class.base::RunLoop"*, %"class.base::RunLoop"** %5, align 8
  %10 = load %"class.absl::optional.20"*, %"class.absl::optional.20"** %7, align 8
  %11 = getelementptr inbounds %"class.absl::optional.20", %"class.absl::optional.20"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 24, i1 false) #11
  %12 = load i8, i8* %11, align 8, !range !19
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %26, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.absl::optional.20", %"class.absl::optional.20"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %16 = getelementptr inbounds %"class.absl::optional.20", %"class.absl::optional.20"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %17 = getelementptr inbounds %"class.absl::optional.20", %"class.absl::optional.20"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %18 = getelementptr inbounds %"class.absl::optional.20", %"class.absl::optional.20"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %19 = bitcast %"class.WTF::Vector.25"* %15 to i64*
  %20 = bitcast %"class.WTF::Vector.25"* %16 to i64*
  store i64 0, i64* %20, align 8
  %21 = load i64, i64* %19, align 8
  store atomic i64 0, i64* %19 monotonic, align 8
  store atomic i64 %21, i64* %20 monotonic, align 8
  %22 = getelementptr inbounds %"class.absl::optional.20", %"class.absl::optional.20"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %23 = load i32, i32* %22, align 4
  store i32 %23, i32* %17, align 8
  store i32 0, i32* %22, align 4
  %24 = getelementptr inbounds %"class.absl::optional.20", %"class.absl::optional.20"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %25 = load i32, i32* %24, align 4
  store i32 %25, i32* %18, align 4
  store i32 0, i32* %24, align 4
  store i8 1, i8* %8, align 8
  br label %26

26:                                               ; preds = %14, %2
  %27 = getelementptr inbounds %"class.absl::optional.20", %"class.absl::optional.20"* %10, i64 0, i32 0
  %28 = getelementptr inbounds %"class.absl::optional.20", %"class.absl::optional.20"* %3, i64 0, i32 0
  %29 = call dereferenceable(24) %"class.absl::optional_internal::optional_data.21"* @_ZN4absl17optional_internal13optional_dataIN3WTF6VectorIN4mojo9StructPtrIN11handwriting5mojom5blink21HandwritingPredictionEEELj0ENS2_18PartitionAllocatorEEELb0EEaSEOSD_(%"class.absl::optional_internal::optional_data.21"* %27, %"class.absl::optional_internal::optional_data.21"* nonnull dereferenceable(24) %28) #11
  call void @_ZN4base7RunLoop4QuitEv(%"class.base::RunLoop"* %9) #11
  %30 = load i8, i8* %8, align 8, !range !19
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %61, label %32

32:                                               ; preds = %26
  %33 = getelementptr inbounds %"class.absl::optional.20", %"class.absl::optional.20"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %34 = getelementptr inbounds %"class.WTF::Vector.25", %"class.WTF::Vector.25"* %33, i64 0, i32 0, i32 0, i32 0
  %35 = load %"class.mojo::StructPtr.28"*, %"class.mojo::StructPtr.28"** %34, align 8
  %36 = icmp eq %"class.mojo::StructPtr.28"* %35, null
  br i1 %36, label %60, label %37, !prof !2

37:                                               ; preds = %32
  %38 = bitcast %"class.mojo::StructPtr.28"* %35 to i8*
  %39 = getelementptr inbounds %"class.absl::optional.20", %"class.absl::optional.20"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %58, label %42, !prof !3

42:                                               ; preds = %37
  %43 = zext i32 %40 to i64
  %44 = getelementptr inbounds %"class.mojo::StructPtr.28", %"class.mojo::StructPtr.28"* %35, i64 %43
  br label %45

45:                                               ; preds = %52, %42
  %46 = phi %"class.mojo::StructPtr.28"* [ %53, %52 ], [ %35, %42 ]
  %47 = getelementptr inbounds %"class.mojo::StructPtr.28", %"class.mojo::StructPtr.28"* %46, i64 0, i32 0, i32 0, i32 0, i32 0
  %48 = load %"class.handwriting::mojom::blink::HandwritingPrediction"*, %"class.handwriting::mojom::blink::HandwritingPrediction"** %47, align 8
  store %"class.handwriting::mojom::blink::HandwritingPrediction"* null, %"class.handwriting::mojom::blink::HandwritingPrediction"** %47, align 8
  %49 = icmp eq %"class.handwriting::mojom::blink::HandwritingPrediction"* %48, null
  br i1 %49, label %52, label %50

50:                                               ; preds = %45
  call void @_ZN11handwriting5mojom5blink21HandwritingPredictionD1Ev(%"class.handwriting::mojom::blink::HandwritingPrediction"* nonnull %48) #11
  %51 = bitcast %"class.handwriting::mojom::blink::HandwritingPrediction"* %48 to i8*
  call void @_ZdlPv(i8* %51) #12
  br label %52

52:                                               ; preds = %50, %45
  %53 = getelementptr inbounds %"class.mojo::StructPtr.28", %"class.mojo::StructPtr.28"* %46, i64 1
  %54 = icmp eq %"class.mojo::StructPtr.28"* %53, %44
  br i1 %54, label %55, label %45

55:                                               ; preds = %52
  store i32 0, i32* %39, align 4
  %56 = bitcast %"class.WTF::Vector.25"* %33 to i8**
  %57 = load i8*, i8** %56, align 8
  br label %58

58:                                               ; preds = %55, %37
  %59 = phi i8* [ %57, %55 ], [ %38, %37 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %59) #11
  store %"class.mojo::StructPtr.28"* null, %"class.mojo::StructPtr.28"** %34, align 8
  br label %60

60:                                               ; preds = %58, %32
  store i8 0, i8* %8, align 8
  br label %61

61:                                               ; preds = %26, %60
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #11
  ret void
}

declare void @_ZN4base7RunLoop4QuitEv(%"class.base::RunLoop"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"class.absl::optional_internal::optional_data.21"* @_ZN4absl17optional_internal13optional_dataIN3WTF6VectorIN4mojo9StructPtrIN11handwriting5mojom5blink21HandwritingPredictionEEELj0ENS2_18PartitionAllocatorEEELb0EEaSEOSD_(%"class.absl::optional_internal::optional_data.21"*, %"class.absl::optional_internal::optional_data.21"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::optional_internal::optional_data.21", %"class.absl::optional_internal::optional_data.21"* %1, i64 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !19
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %38, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.absl::optional_internal::optional_data.21", %"class.absl::optional_internal::optional_data.21"* %1, i64 0, i32 0, i32 0, i32 1, i32 0
  %8 = getelementptr inbounds %"class.absl::optional_internal::optional_data.21", %"class.absl::optional_internal::optional_data.21"* %0, i64 0, i32 0, i32 0, i32 0
  %9 = load i8, i8* %8, align 8, !range !19
  %10 = icmp eq i8 %9, 0
  %11 = getelementptr inbounds %"class.absl::optional_internal::optional_data.21", %"class.absl::optional_internal::optional_data.21"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  br i1 %10, label %25, label %12

12:                                               ; preds = %6
  %13 = bitcast %"class.WTF::Vector.25"* %7 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.WTF::Vector.25"* %11 to i64*
  %16 = load i64, i64* %15, align 8
  store atomic i64 %16, i64* %13 monotonic, align 8
  store atomic i64 %14, i64* %15 monotonic, align 8
  %17 = getelementptr inbounds %"class.absl::optional_internal::optional_data.21", %"class.absl::optional_internal::optional_data.21"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %18 = getelementptr inbounds %"class.absl::optional_internal::optional_data.21", %"class.absl::optional_internal::optional_data.21"* %1, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %19 = load i32, i32* %17, align 4
  %20 = load i32, i32* %18, align 4
  store i32 %20, i32* %17, align 4
  store i32 %19, i32* %18, align 4
  %21 = getelementptr inbounds %"class.absl::optional_internal::optional_data.21", %"class.absl::optional_internal::optional_data.21"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %22 = getelementptr inbounds %"class.absl::optional_internal::optional_data.21", %"class.absl::optional_internal::optional_data.21"* %1, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %23 = load i32, i32* %21, align 4
  %24 = load i32, i32* %22, align 4
  store i32 %24, i32* %21, align 4
  store i32 %23, i32* %22, align 4
  br label %71

25:                                               ; preds = %6
  %26 = getelementptr inbounds %"class.absl::optional_internal::optional_data.21", %"class.absl::optional_internal::optional_data.21"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %27 = getelementptr inbounds %"class.absl::optional_internal::optional_data.21", %"class.absl::optional_internal::optional_data.21"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %28 = bitcast %"class.WTF::Vector.25"* %7 to i64*
  %29 = bitcast %"class.WTF::Vector.25"* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 16, i1 false) #11
  %30 = load i64, i64* %28, align 8
  %31 = bitcast %"class.WTF::Vector.25"* %11 to i64*
  store atomic i64 0, i64* %28 monotonic, align 8
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = getelementptr inbounds %"class.absl::optional_internal::optional_data.21", %"class.absl::optional_internal::optional_data.21"* %1, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %33 = load i32, i32* %26, align 4
  %34 = load i32, i32* %32, align 4
  store i32 %34, i32* %26, align 4
  store i32 %33, i32* %32, align 4
  %35 = getelementptr inbounds %"class.absl::optional_internal::optional_data.21", %"class.absl::optional_internal::optional_data.21"* %1, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %36 = load i32, i32* %27, align 4
  %37 = load i32, i32* %35, align 4
  store i32 %37, i32* %27, align 4
  store i32 %36, i32* %35, align 4
  store i8 1, i8* %8, align 8
  br label %71

38:                                               ; preds = %2
  %39 = getelementptr inbounds %"class.absl::optional_internal::optional_data.21", %"class.absl::optional_internal::optional_data.21"* %0, i64 0, i32 0, i32 0, i32 0
  %40 = load i8, i8* %39, align 8, !range !19
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %71, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.absl::optional_internal::optional_data.21", %"class.absl::optional_internal::optional_data.21"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %44 = getelementptr inbounds %"class.WTF::Vector.25", %"class.WTF::Vector.25"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = load %"class.mojo::StructPtr.28"*, %"class.mojo::StructPtr.28"** %44, align 8
  %46 = icmp eq %"class.mojo::StructPtr.28"* %45, null
  br i1 %46, label %70, label %47, !prof !2

47:                                               ; preds = %42
  %48 = bitcast %"class.mojo::StructPtr.28"* %45 to i8*
  %49 = getelementptr inbounds %"class.absl::optional_internal::optional_data.21", %"class.absl::optional_internal::optional_data.21"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %68, label %52, !prof !3

52:                                               ; preds = %47
  %53 = zext i32 %50 to i64
  %54 = getelementptr inbounds %"class.mojo::StructPtr.28", %"class.mojo::StructPtr.28"* %45, i64 %53
  br label %55

55:                                               ; preds = %62, %52
  %56 = phi %"class.mojo::StructPtr.28"* [ %63, %62 ], [ %45, %52 ]
  %57 = getelementptr inbounds %"class.mojo::StructPtr.28", %"class.mojo::StructPtr.28"* %56, i64 0, i32 0, i32 0, i32 0, i32 0
  %58 = load %"class.handwriting::mojom::blink::HandwritingPrediction"*, %"class.handwriting::mojom::blink::HandwritingPrediction"** %57, align 8
  store %"class.handwriting::mojom::blink::HandwritingPrediction"* null, %"class.handwriting::mojom::blink::HandwritingPrediction"** %57, align 8
  %59 = icmp eq %"class.handwriting::mojom::blink::HandwritingPrediction"* %58, null
  br i1 %59, label %62, label %60

60:                                               ; preds = %55
  tail call void @_ZN11handwriting5mojom5blink21HandwritingPredictionD1Ev(%"class.handwriting::mojom::blink::HandwritingPrediction"* nonnull %58) #11
  %61 = bitcast %"class.handwriting::mojom::blink::HandwritingPrediction"* %58 to i8*
  tail call void @_ZdlPv(i8* %61) #12
  br label %62

62:                                               ; preds = %60, %55
  %63 = getelementptr inbounds %"class.mojo::StructPtr.28", %"class.mojo::StructPtr.28"* %56, i64 1
  %64 = icmp eq %"class.mojo::StructPtr.28"* %63, %54
  br i1 %64, label %65, label %55

65:                                               ; preds = %62
  store i32 0, i32* %49, align 4
  %66 = bitcast %"class.WTF::Vector.25"* %43 to i8**
  %67 = load i8*, i8** %66, align 8
  br label %68

68:                                               ; preds = %65, %47
  %69 = phi i8* [ %67, %65 ], [ %48, %47 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %69) #11
  store %"class.mojo::StructPtr.28"* null, %"class.mojo::StructPtr.28"** %44, align 8
  br label %70

70:                                               ; preds = %68, %42
  store i8 0, i8* %39, align 8
  br label %71

71:                                               ; preds = %70, %38, %25, %12
  ret %"class.absl::optional_internal::optional_data.21"* %0
}

; Function Attrs: nounwind
declare void @_ZN11handwriting5mojom5blink21HandwritingPredictionD1Ev(%"class.handwriting::mojom::blink::HandwritingPrediction"*) unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN4base8internal9BindStateIZN11handwriting5mojom5blink32HandwritingRecognizerAsyncWaiter13GetPredictionEN3WTF6VectorIN4mojo9StructPtrINS4_17HandwritingStrokeEEELj0ENS6_18PartitionAllocatorEEENS8_16InlinedStructPtrINS4_16HandwritingHintsEEEPN4absl8optionalINS7_INS9_INS4_21HandwritingPredictionEEELj0ESC_EEEEE3$_0JPNS_7RunLoopESN_EE7DestroyEPKNS0_13BindStateBaseE"(%"class.base::internal::BindStateBase"*) #0 align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #12
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN4base8internal7InvokerINS0_9BindStateIZN11handwriting5mojom5blink40HandwritingRecognitionServiceAsyncWaiter27CreateHandwritingRecognizerEN4mojo9StructPtrINS5_26HandwritingModelConstraintEEEPNS4_33CreateHandwritingRecognizerResultEPNS7_13PendingRemoteINS5_21HandwritingRecognizerEEEE3$_1JPNS_7RunLoopESC_SG_EEEFvSB_SF_EE7RunOnceEPNS0_13BindStateBaseESB_OSF_"(%"class.base::internal::BindStateBase"* nocapture readonly, i32, %"class.mojo::PendingRemote"* dereferenceable(8)) #0 align 2 {
  %4 = alloca %"class.mojo::PendingRemote", align 4
  %5 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %6 = bitcast void ()** %5 to %"class.base::RunLoop"**
  %7 = getelementptr inbounds void ()*, void ()** %5, i64 1
  %8 = bitcast void ()** %7 to i32**
  %9 = getelementptr inbounds void ()*, void ()** %5, i64 2
  %10 = bitcast void ()** %9 to %"class.mojo::PendingRemote"**
  %11 = bitcast %"class.mojo::PendingRemote"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #11
  %12 = load %"class.base::RunLoop"*, %"class.base::RunLoop"** %6, align 8
  %13 = load i32*, i32** %8, align 8
  %14 = load %"class.mojo::PendingRemote"*, %"class.mojo::PendingRemote"** %10, align 8
  %15 = getelementptr inbounds %"class.mojo::PendingRemote", %"class.mojo::PendingRemote"* %4, i64 0, i32 0
  %16 = getelementptr inbounds %"class.mojo::PendingRemote", %"class.mojo::PendingRemote"* %2, i64 0, i32 0
  call void @_ZN4mojo8internal18PendingRemoteStateC1EOS1_(%"struct.mojo::internal::PendingRemoteState"* nonnull %15, %"struct.mojo::internal::PendingRemoteState"* dereferenceable(8) %16) #11
  store i32 %1, i32* %13, align 4
  %17 = getelementptr inbounds %"class.mojo::PendingRemote", %"class.mojo::PendingRemote"* %14, i64 0, i32 0
  %18 = call dereferenceable(8) %"struct.mojo::internal::PendingRemoteState"* @_ZN4mojo8internal18PendingRemoteStateaSEOS1_(%"struct.mojo::internal::PendingRemoteState"* %17, %"struct.mojo::internal::PendingRemoteState"* nonnull dereferenceable(8) %15) #11
  call void @_ZN4base7RunLoop4QuitEv(%"class.base::RunLoop"* %12) #11
  call void @_ZN4mojo8internal18PendingRemoteStateD1Ev(%"struct.mojo::internal::PendingRemoteState"* nonnull %15) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #11
  ret void
}

; Function Attrs: nounwind
declare dereferenceable(8) %"struct.mojo::internal::PendingRemoteState"* @_ZN4mojo8internal18PendingRemoteStateaSEOS1_(%"struct.mojo::internal::PendingRemoteState"*, %"struct.mojo::internal::PendingRemoteState"* dereferenceable(8)) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN4mojo8internal18PendingRemoteStateC1EOS1_(%"struct.mojo::internal::PendingRemoteState"*, %"struct.mojo::internal::PendingRemoteState"* dereferenceable(8)) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN4mojo8internal18PendingRemoteStateD1Ev(%"struct.mojo::internal::PendingRemoteState"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN4base8internal9BindStateIZN11handwriting5mojom5blink40HandwritingRecognitionServiceAsyncWaiter27CreateHandwritingRecognizerEN4mojo9StructPtrINS4_26HandwritingModelConstraintEEEPNS3_33CreateHandwritingRecognizerResultEPNS6_13PendingRemoteINS4_21HandwritingRecognizerEEEE3$_1JPNS_7RunLoopESB_SF_EE7DestroyEPKNS0_13BindStateBaseE"(%"class.base::internal::BindStateBase"*) #0 align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #12
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN4base8internal7InvokerINS0_9BindStateIZN11handwriting5mojom5blink40HandwritingRecognitionServiceAsyncWaiter33QueryHandwritingRecognizerSupportEN4mojo9StructPtrINS5_23HandwritingFeatureQueryEEEPNS7_16InlinedStructPtrINS5_29HandwritingFeatureQueryResultEEEE3$_2JPNS_7RunLoopESE_EEEFvSD_EE7RunOnceEPNS0_13BindStateBaseEOSD_"(%"class.base::internal::BindStateBase"* nocapture readonly, %"class.mojo::InlinedStructPtr.97"* nocapture dereferenceable(16)) #0 align 2 {
  %3 = alloca %"class.handwriting::mojom::blink::HandwritingFeatureQueryResult", align 4
  %4 = alloca %"class.handwriting::mojom::blink::HandwritingFeatureQueryResult", align 4
  %5 = alloca %"class.mojo::InlinedStructPtr.97", align 4
  %6 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %7 = bitcast void ()** %6 to %"class.base::RunLoop"**
  %8 = getelementptr inbounds void ()*, void ()** %6, i64 1
  %9 = bitcast void ()** %8 to %"class.mojo::InlinedStructPtr.97"**
  %10 = bitcast %"class.mojo::InlinedStructPtr.97"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #11
  %11 = load %"class.base::RunLoop"*, %"class.base::RunLoop"** %7, align 8
  %12 = load %"class.mojo::InlinedStructPtr.97"*, %"class.mojo::InlinedStructPtr.97"** %9, align 8
  %13 = getelementptr inbounds %"class.mojo::InlinedStructPtr.97", %"class.mojo::InlinedStructPtr.97"* %5, i64 0, i32 0
  call void @_ZN11handwriting5mojom5blink29HandwritingFeatureQueryResultC1Ev(%"class.handwriting::mojom::blink::HandwritingFeatureQueryResult"* nonnull %13) #11
  %14 = getelementptr inbounds %"class.mojo::InlinedStructPtr.97", %"class.mojo::InlinedStructPtr.97"* %5, i64 0, i32 1
  store i32 0, i32* %14, align 4
  call void @_ZN11handwriting5mojom5blink29HandwritingFeatureQueryResultD1Ev(%"class.handwriting::mojom::blink::HandwritingFeatureQueryResult"* nonnull %13) #11
  call void @_ZN11handwriting5mojom5blink29HandwritingFeatureQueryResultC1Ev(%"class.handwriting::mojom::blink::HandwritingFeatureQueryResult"* nonnull %13) #11
  %15 = bitcast %"class.handwriting::mojom::blink::HandwritingFeatureQueryResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %15) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %15, i8* nonnull align 4 %10, i64 12, i1 false) #11
  %16 = bitcast %"class.mojo::InlinedStructPtr.97"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %10, i8* align 4 %16, i64 12, i1 false) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %16, i8* nonnull align 4 %15, i64 12, i1 false) #11
  call void @_ZN11handwriting5mojom5blink29HandwritingFeatureQueryResultD1Ev(%"class.handwriting::mojom::blink::HandwritingFeatureQueryResult"* nonnull %3) #11
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %15) #11
  %17 = getelementptr inbounds %"class.mojo::InlinedStructPtr.97", %"class.mojo::InlinedStructPtr.97"* %1, i64 0, i32 1
  %18 = load i32, i32* %14, align 4
  %19 = load i32, i32* %17, align 4
  store i32 %19, i32* %14, align 4
  store i32 %18, i32* %17, align 4
  %20 = getelementptr inbounds %"class.mojo::InlinedStructPtr.97", %"class.mojo::InlinedStructPtr.97"* %12, i64 0, i32 1
  store i32 0, i32* %20, align 4
  %21 = getelementptr inbounds %"class.mojo::InlinedStructPtr.97", %"class.mojo::InlinedStructPtr.97"* %12, i64 0, i32 0
  call void @_ZN11handwriting5mojom5blink29HandwritingFeatureQueryResultD1Ev(%"class.handwriting::mojom::blink::HandwritingFeatureQueryResult"* %21) #11
  call void @_ZN11handwriting5mojom5blink29HandwritingFeatureQueryResultC1Ev(%"class.handwriting::mojom::blink::HandwritingFeatureQueryResult"* %21) #11
  %22 = bitcast %"class.handwriting::mojom::blink::HandwritingFeatureQueryResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %22) #11
  %23 = bitcast %"class.mojo::InlinedStructPtr.97"* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %22, i8* align 4 %23, i64 12, i1 false) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %23, i8* nonnull align 4 %10, i64 12, i1 false) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %10, i8* nonnull align 4 %22, i64 12, i1 false) #11
  call void @_ZN11handwriting5mojom5blink29HandwritingFeatureQueryResultD1Ev(%"class.handwriting::mojom::blink::HandwritingFeatureQueryResult"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %22) #11
  %24 = load i32, i32* %20, align 4
  %25 = load i32, i32* %14, align 4
  store i32 %25, i32* %20, align 4
  store i32 %24, i32* %14, align 4
  call void @_ZN4base7RunLoop4QuitEv(%"class.base::RunLoop"* %11) #11
  call void @_ZN11handwriting5mojom5blink29HandwritingFeatureQueryResultD1Ev(%"class.handwriting::mojom::blink::HandwritingFeatureQueryResult"* nonnull %13) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  ret void
}

; Function Attrs: nounwind
declare void @_ZN11handwriting5mojom5blink29HandwritingFeatureQueryResultD1Ev(%"class.handwriting::mojom::blink::HandwritingFeatureQueryResult"*) unnamed_addr #5

declare void @_ZN11handwriting5mojom5blink29HandwritingFeatureQueryResultC1Ev(%"class.handwriting::mojom::blink::HandwritingFeatureQueryResult"*) unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN4base8internal9BindStateIZN11handwriting5mojom5blink40HandwritingRecognitionServiceAsyncWaiter33QueryHandwritingRecognizerSupportEN4mojo9StructPtrINS4_23HandwritingFeatureQueryEEEPNS6_16InlinedStructPtrINS4_29HandwritingFeatureQueryResultEEEE3$_2JPNS_7RunLoopESD_EE7DestroyEPKNS0_13BindStateBaseE"(%"class.base::internal::BindStateBase"*) #0 align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #12
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!5, !7}
!5 = distinct !{!5, !6, !"_ZN4base8internal8BindImplINS_12OnceCallbackEZN11handwriting5mojom5blink32HandwritingRecognizerAsyncWaiter13GetPredictionEN3WTF6VectorIN4mojo9StructPtrINS5_17HandwritingStrokeEEELj0ENS7_18PartitionAllocatorEEENS9_16InlinedStructPtrINS5_16HandwritingHintsEEEPN4absl8optionalINS8_INSA_INS5_21HandwritingPredictionEEELj0ESD_EEEEE3$_0JPNS_7RunLoopERSO_EEEDcOT0_DpOT1_: argument 0"}
!6 = distinct !{!6, !"_ZN4base8internal8BindImplINS_12OnceCallbackEZN11handwriting5mojom5blink32HandwritingRecognizerAsyncWaiter13GetPredictionEN3WTF6VectorIN4mojo9StructPtrINS5_17HandwritingStrokeEEELj0ENS7_18PartitionAllocatorEEENS9_16InlinedStructPtrINS5_16HandwritingHintsEEEPN4absl8optionalINS8_INSA_INS5_21HandwritingPredictionEEELj0ESD_EEEEE3$_0JPNS_7RunLoopERSO_EEEDcOT0_DpOT1_"}
!7 = distinct !{!7, !8, !"_ZN4base8BindOnceIZN11handwriting5mojom5blink32HandwritingRecognizerAsyncWaiter13GetPredictionEN3WTF6VectorIN4mojo9StructPtrINS3_17HandwritingStrokeEEELj0ENS5_18PartitionAllocatorEEENS7_16InlinedStructPtrINS3_16HandwritingHintsEEEPN4absl8optionalINS6_INS8_INS3_21HandwritingPredictionEEELj0ESB_EEEEE3$_0JPNS_7RunLoopERSM_EEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSU_DpOSV_: argument 0"}
!8 = distinct !{!8, !"_ZN4base8BindOnceIZN11handwriting5mojom5blink32HandwritingRecognizerAsyncWaiter13GetPredictionEN3WTF6VectorIN4mojo9StructPtrINS3_17HandwritingStrokeEEELj0ENS5_18PartitionAllocatorEEENS7_16InlinedStructPtrINS3_16HandwritingHintsEEEPN4absl8optionalINS6_INS8_INS3_21HandwritingPredictionEEELj0ESB_EEEEE3$_0JPNS_7RunLoopERSM_EEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSU_DpOSV_"}
!9 = !{!10, !12}
!10 = distinct !{!10, !11, !"_ZN4base8internal8BindImplINS_12OnceCallbackEZN11handwriting5mojom5blink40HandwritingRecognitionServiceAsyncWaiter27CreateHandwritingRecognizerEN4mojo9StructPtrINS5_26HandwritingModelConstraintEEEPNS4_33CreateHandwritingRecognizerResultEPNS7_13PendingRemoteINS5_21HandwritingRecognizerEEEE3$_1JPNS_7RunLoopERSC_RSG_EEEDcOT0_DpOT1_: argument 0"}
!11 = distinct !{!11, !"_ZN4base8internal8BindImplINS_12OnceCallbackEZN11handwriting5mojom5blink40HandwritingRecognitionServiceAsyncWaiter27CreateHandwritingRecognizerEN4mojo9StructPtrINS5_26HandwritingModelConstraintEEEPNS4_33CreateHandwritingRecognizerResultEPNS7_13PendingRemoteINS5_21HandwritingRecognizerEEEE3$_1JPNS_7RunLoopERSC_RSG_EEEDcOT0_DpOT1_"}
!12 = distinct !{!12, !13, !"_ZN4base8BindOnceIZN11handwriting5mojom5blink40HandwritingRecognitionServiceAsyncWaiter27CreateHandwritingRecognizerEN4mojo9StructPtrINS3_26HandwritingModelConstraintEEEPNS2_33CreateHandwritingRecognizerResultEPNS5_13PendingRemoteINS3_21HandwritingRecognizerEEEE3$_1JPNS_7RunLoopERSA_RSE_EEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSN_DpOSO_: argument 0"}
!13 = distinct !{!13, !"_ZN4base8BindOnceIZN11handwriting5mojom5blink40HandwritingRecognitionServiceAsyncWaiter27CreateHandwritingRecognizerEN4mojo9StructPtrINS3_26HandwritingModelConstraintEEEPNS2_33CreateHandwritingRecognizerResultEPNS5_13PendingRemoteINS3_21HandwritingRecognizerEEEE3$_1JPNS_7RunLoopERSA_RSE_EEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSN_DpOSO_"}
!14 = !{!15, !17}
!15 = distinct !{!15, !16, !"_ZN4base8internal8BindImplINS_12OnceCallbackEZN11handwriting5mojom5blink40HandwritingRecognitionServiceAsyncWaiter33QueryHandwritingRecognizerSupportEN4mojo9StructPtrINS5_23HandwritingFeatureQueryEEEPNS7_16InlinedStructPtrINS5_29HandwritingFeatureQueryResultEEEE3$_2JPNS_7RunLoopERSE_EEEDcOT0_DpOT1_: argument 0"}
!16 = distinct !{!16, !"_ZN4base8internal8BindImplINS_12OnceCallbackEZN11handwriting5mojom5blink40HandwritingRecognitionServiceAsyncWaiter33QueryHandwritingRecognizerSupportEN4mojo9StructPtrINS5_23HandwritingFeatureQueryEEEPNS7_16InlinedStructPtrINS5_29HandwritingFeatureQueryResultEEEE3$_2JPNS_7RunLoopERSE_EEEDcOT0_DpOT1_"}
!17 = distinct !{!17, !18, !"_ZN4base8BindOnceIZN11handwriting5mojom5blink40HandwritingRecognitionServiceAsyncWaiter33QueryHandwritingRecognizerSupportEN4mojo9StructPtrINS3_23HandwritingFeatureQueryEEEPNS5_16InlinedStructPtrINS3_29HandwritingFeatureQueryResultEEEE3$_2JPNS_7RunLoopERSC_EEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSK_DpOSL_: argument 0"}
!18 = distinct !{!18, !"_ZN4base8BindOnceIZN11handwriting5mojom5blink40HandwritingRecognitionServiceAsyncWaiter33QueryHandwritingRecognizerSupportEN4mojo9StructPtrINS3_23HandwritingFeatureQueryEEEPNS5_16InlinedStructPtrINS3_29HandwritingFeatureQueryResultEEEE3$_2JPNS_7RunLoopERSC_EEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSK_DpOSL_"}
!19 = !{i8 0, i8 2}
