; ModuleID = '../../third_party/blink/renderer/platform/transforms/transformation_matrix.cc'
source_filename = "../../third_party/blink/renderer/platform/transforms/transformation_matrix.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::TransformationMatrix" = type { %"struct.blink::TransformationMatrix::Matrix4" }
%"struct.blink::TransformationMatrix::Matrix4" = type { [4 x [4 x double]] }
%"class.blink::AffineTransform" = type { [6 x double] }
%"class.gfx::Quaternion" = type { double, double, double, double }
%"struct.blink::TransformationMatrix::DecomposedType" = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::FloatQuad" = type { %"class.blink::FloatPoint", %"class.blink::FloatPoint", %"class.blink::FloatPoint", %"class.blink::FloatPoint" }
%"class.blink::FloatBox" = type { float, float, float, float, float, float }
%"class.blink::FloatPoint3D" = type { float, float, float }
%"class.blink::IntRect" = type { %"class.blink::IntPoint", %"class.blink::IntSize" }
%"class.blink::IntPoint" = type { i32, i32 }
%"class.blink::IntSize" = type { i32, i32 }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatSize" = type { float, float }
%"class.blink::LayoutRect" = type { %"class.blink::LayoutPoint", %"class.blink::LayoutSize" }
%"class.blink::LayoutPoint" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutUnit" = type { i32 }
%"class.blink::LayoutSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"struct.blink::Rotation" = type { %"class.blink::FloatPoint3D", double }
%"struct.blink::TransformationMatrix::Decomposed2dType" = type { double, double, double, double, double, double }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%class.SkM44 = type { [16 x float] }
%"class.gfx::Transform" = type { %class.SkMatrix44 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringAppend" = type { %"class.WTF::String", i8* }
%"class.WTF::StringTypeAdapter" = type { %"class.WTF::StringTypeAdapter.11" }
%"class.WTF::StringTypeAdapter.11" = type { %"class.WTF::StringView" }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.WTF::StringTypeAdapter.12" = type <{ i8*, i32, [4 x i8] }>
%"class.blink::JSONArray" = type { %"class.blink::JSONValue.base", %"class.WTF::Vector" }
%"class.blink::JSONValue.base" = type <{ i32 (...)**, i32 }>
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.std::__1::unique_ptr.4"*, i32, i32 }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.blink::JSONValue"* }
%"class.blink::JSONValue" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }

$_ZNK5blink20TransformationMatrix16InternalMapPointERKNS_12FloatPoint3DE = comdat any

$_ZNK3WTF12StringAppendINS_6StringEPKcEcvS1_Ev = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

$_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv = comdat any

@.str = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/transforms/transformation_matrix.cc\00", align 1
@.str.1 = private unnamed_addr constant [58 x i8] c"2-D decomposition cannot be performed on a 3-D transform.\00", align 1
@__const._ZN5blink20TransformationMatrix12ToSkMatrix44ERKS0_.ret = private unnamed_addr constant %class.SkMatrix44 <{ [4 x [4 x float]] [[4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], i8 -86, [3 x i8] c"\AA\AA\AA" }>, align 4
@.str.2 = private unnamed_addr constant [69 x i8] c"[%lg,%lg,%lg,%lg,\0A%lg,%lg,%lg,%lg,\0A%lg,%lg,%lg,%lg,\0A%lg,%lg,%lg,%lg]\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c" (degenerate)\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"identity\00", align 1
@.str.5 = private unnamed_addr constant [25 x i8] c"translation(%lg,%lg,%lg)\00", align 1
@.str.6 = private unnamed_addr constant [123 x i8] c"translation(%lg,%lg,%lg), scale(%lg,%lg,%lg), skew(%lg,%lg,%lg), quaternion(%lg,%lg,%lg,%lg), perspective(%lg,%lg,%lg,%lg)\00", align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.8 = private unnamed_addr constant [27 x i8] c"total >= adapter1.length()\00", align 1
@.str.9 = private unnamed_addr constant [70 x i8] c"../../third_party/blink/renderer/platform/wtf/text/string_operators.h\00", align 1
@.str.10 = private unnamed_addr constant [27 x i8] c"total >= adapter2.length()\00", align 1

@_ZN5blink20TransformationMatrixC1ERKNS_15AffineTransformE = hidden unnamed_addr alias void (%"class.blink::TransformationMatrix"*, %"class.blink::AffineTransform"*), void (%"class.blink::TransformationMatrix"*, %"class.blink::AffineTransform"*)* @_ZN5blink20TransformationMatrixC2ERKNS_15AffineTransformE

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink11ToQuaterionERKNS_20TransformationMatrix14DecomposedTypeE(%"class.gfx::Quaternion"* noalias nocapture sret, %"struct.blink::TransformationMatrix::DecomposedType"* nocapture readonly dereferenceable(136)) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 6
  %4 = bitcast double* %3 to <2 x i64>*
  %5 = load <2 x i64>, <2 x i64>* %4, align 8
  %6 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 8
  %7 = bitcast double* %6 to <2 x i64>*
  %8 = load <2 x i64>, <2 x i64>* %7, align 8
  %9 = bitcast %"class.gfx::Quaternion"* %0 to <2 x i64>*
  store <2 x i64> %5, <2 x i64>* %9, align 8
  %10 = getelementptr inbounds %"class.gfx::Quaternion", %"class.gfx::Quaternion"* %0, i64 0, i32 2
  %11 = bitcast double* %10 to <2 x i64>*
  store <2 x i64> %8, <2 x i64>* %11, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink5SlerpERNS_20TransformationMatrix14DecomposedTypeERKS1_d(%"struct.blink::TransformationMatrix::DecomposedType"* nocapture dereferenceable(136), %"struct.blink::TransformationMatrix::DecomposedType"* nocapture readonly dereferenceable(136), double) local_unnamed_addr #1 {
  %4 = alloca %"class.gfx::Quaternion", align 16
  %5 = alloca %"class.gfx::Quaternion", align 16
  %6 = alloca %"class.gfx::Quaternion", align 16
  %7 = bitcast %"class.gfx::Quaternion"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #19
  %8 = getelementptr inbounds %"class.gfx::Quaternion", %"class.gfx::Quaternion"* %4, i64 0, i32 2
  %9 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %0, i64 0, i32 6
  %10 = bitcast double* %9 to <2 x i64>*
  %11 = load <2 x i64>, <2 x i64>* %10, align 8, !noalias !2
  %12 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %0, i64 0, i32 8
  %13 = bitcast double* %12 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 8, !noalias !2
  %15 = bitcast %"class.gfx::Quaternion"* %4 to <2 x i64>*
  store <2 x i64> %11, <2 x i64>* %15, align 16, !alias.scope !2
  %16 = bitcast double* %8 to <2 x i64>*
  store <2 x i64> %14, <2 x i64>* %16, align 16, !alias.scope !2
  %17 = bitcast %"class.gfx::Quaternion"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %17) #19
  %18 = getelementptr inbounds %"class.gfx::Quaternion", %"class.gfx::Quaternion"* %5, i64 0, i32 2
  %19 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 6
  %20 = bitcast double* %19 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 8, !noalias !5
  %22 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 8
  %23 = bitcast double* %22 to <2 x i64>*
  %24 = load <2 x i64>, <2 x i64>* %23, align 8, !noalias !5
  %25 = bitcast %"class.gfx::Quaternion"* %5 to <2 x i64>*
  store <2 x i64> %21, <2 x i64>* %25, align 16, !alias.scope !5
  %26 = bitcast double* %18 to <2 x i64>*
  store <2 x i64> %24, <2 x i64>* %26, align 16, !alias.scope !5
  %27 = bitcast %"class.gfx::Quaternion"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %27) #19
  %28 = getelementptr inbounds %"class.gfx::Quaternion", %"class.gfx::Quaternion"* %6, i64 0, i32 2
  %29 = bitcast %"class.gfx::Quaternion"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %29, i8 -1, i64 32, i1 false)
  call void @_ZNK3gfx10Quaternion5SlerpERKS0_d(%"class.gfx::Quaternion"* nonnull sret %6, %"class.gfx::Quaternion"* nonnull %4, %"class.gfx::Quaternion"* nonnull dereferenceable(32) %5, double %2) #19
  %30 = bitcast %"class.gfx::Quaternion"* %6 to <2 x i64>*
  %31 = load <2 x i64>, <2 x i64>* %30, align 16
  %32 = bitcast double* %9 to <2 x i64>*
  store <2 x i64> %31, <2 x i64>* %32, align 8
  %33 = bitcast double* %28 to <2 x i64>*
  %34 = load <2 x i64>, <2 x i64>* %33, align 16
  %35 = bitcast double* %12 to <2 x i64>*
  store <2 x i64> %34, <2 x i64>* %35, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %27) #19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #19
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZNK3gfx10Quaternion5SlerpERKS0_d(%"class.gfx::Quaternion"* sret, %"class.gfx::Quaternion"*, %"class.gfx::Quaternion"* dereferenceable(32), double) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20TransformationMatrixC2ERKNS_15AffineTransformE(%"class.blink::TransformationMatrix"* nocapture, %"class.blink::AffineTransform"* nocapture readonly dereferenceable(48)) unnamed_addr #1 align 2 {
  %3 = bitcast %"class.blink::AffineTransform"* %1 to <2 x i64>*
  %4 = load <2 x i64>, <2 x i64>* %3, align 8
  %5 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 2
  %6 = bitcast double* %5 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 8
  %8 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 4
  %9 = bitcast double* %8 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 8
  %11 = bitcast %"class.blink::TransformationMatrix"* %0 to <2 x i64>*
  store <2 x i64> %4, <2 x i64>* %11, align 8
  %12 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %13 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %14 = bitcast double* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 16, i1 false) #19
  %15 = bitcast double* %13 to <2 x i64>*
  store <2 x i64> %7, <2 x i64>* %15, align 8
  %16 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %17 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %18 = bitcast double* %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 32, i1 false) #19
  %19 = bitcast double* %17 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 0.000000e+00>, <2 x double>* %19, align 8
  %20 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %21 = bitcast double* %20 to <2 x i64>*
  store <2 x i64> %10, <2 x i64>* %21, align 8
  %22 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %23 = bitcast double* %22 to <2 x double>*
  store <2 x double> <double 0.000000e+00, double 1.000000e+00>, <2 x double>* %23, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix5ScaleEd(%"class.blink::TransformationMatrix"* returned, double) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::TransformationMatrix"* %0 to <2 x double>*
  %4 = load <2 x double>, <2 x double>* %3, align 8
  %5 = insertelement <2 x double> undef, double %1, i32 0
  %6 = shufflevector <2 x double> %5, <2 x double> undef, <2 x i32> zeroinitializer
  %7 = fmul <2 x double> %4, %6
  %8 = bitcast %"class.blink::TransformationMatrix"* %0 to <2 x double>*
  store <2 x double> %7, <2 x double>* %8, align 8
  %9 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %10 = bitcast double* %9 to <2 x double>*
  %11 = load <2 x double>, <2 x double>* %10, align 8
  %12 = fmul <2 x double> %11, %6
  %13 = bitcast double* %9 to <2 x double>*
  store <2 x double> %12, <2 x double>* %13, align 8
  %14 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %15 = bitcast double* %14 to <2 x double>*
  %16 = load <2 x double>, <2 x double>* %15, align 8
  %17 = fmul <2 x double> %16, %6
  %18 = bitcast double* %14 to <2 x double>*
  store <2 x double> %17, <2 x double>* %18, align 8
  %19 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %20 = bitcast double* %19 to <2 x double>*
  %21 = load <2 x double>, <2 x double>* %20, align 8
  %22 = fmul <2 x double> %21, %6
  %23 = bitcast double* %19 to <2 x double>*
  store <2 x double> %22, <2 x double>* %23, align 8
  ret %"class.blink::TransformationMatrix"* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix15ScaleNonUniformEdd(%"class.blink::TransformationMatrix"* returned, double, double) local_unnamed_addr #0 align 2 {
  %4 = bitcast %"class.blink::TransformationMatrix"* %0 to <2 x double>*
  %5 = load <2 x double>, <2 x double>* %4, align 8
  %6 = insertelement <2 x double> undef, double %1, i32 0
  %7 = shufflevector <2 x double> %6, <2 x double> undef, <2 x i32> zeroinitializer
  %8 = fmul <2 x double> %5, %7
  %9 = bitcast %"class.blink::TransformationMatrix"* %0 to <2 x double>*
  store <2 x double> %8, <2 x double>* %9, align 8
  %10 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %11 = bitcast double* %10 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 8
  %13 = fmul <2 x double> %12, %7
  %14 = bitcast double* %10 to <2 x double>*
  store <2 x double> %13, <2 x double>* %14, align 8
  %15 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %16 = bitcast double* %15 to <2 x double>*
  %17 = load <2 x double>, <2 x double>* %16, align 8
  %18 = insertelement <2 x double> undef, double %2, i32 0
  %19 = shufflevector <2 x double> %18, <2 x double> undef, <2 x i32> zeroinitializer
  %20 = fmul <2 x double> %17, %19
  %21 = bitcast double* %15 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 8
  %22 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %23 = bitcast double* %22 to <2 x double>*
  %24 = load <2 x double>, <2 x double>* %23, align 8
  %25 = fmul <2 x double> %24, %19
  %26 = bitcast double* %22 to <2 x double>*
  store <2 x double> %25, <2 x double>* %26, align 8
  ret %"class.blink::TransformationMatrix"* %0
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden <2 x float> @_ZNK5blink20TransformationMatrix12ProjectPointERKNS_10FloatPointEPb(%"class.blink::TransformationMatrix"* nocapture readonly, %"class.blink::FloatPoint"* nocapture readonly dereferenceable(8), i8*) local_unnamed_addr #4 align 2 {
  %4 = icmp ne i8* %2, null
  br i1 %4, label %5, label %6

5:                                                ; preds = %3
  store i8 0, i8* %2, align 1
  br label %6

6:                                                ; preds = %5, %3
  %7 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %8 = load double, double* %7, align 8
  %9 = fcmp oeq double %8, 0.000000e+00
  br i1 %9, label %85, label %10

10:                                               ; preds = %6
  %11 = bitcast %"class.blink::FloatPoint"* %1 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 4
  %13 = fpext <2 x float> %12 to <2 x double>
  %14 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %15 = load double, double* %14, align 8
  %16 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %17 = load double, double* %16, align 8
  %18 = insertelement <2 x double> undef, double %15, i32 0
  %19 = insertelement <2 x double> %18, double %17, i32 1
  %20 = fmul <2 x double> %19, %13
  %21 = extractelement <2 x double> %20, i32 0
  %22 = extractelement <2 x double> %20, i32 1
  %23 = fadd double %21, %22
  %24 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %25 = load double, double* %24, align 8
  %26 = fadd double %25, %23
  %27 = fsub double -0.000000e+00, %26
  %28 = fdiv double %27, %8
  %29 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %30 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %31 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %32 = bitcast %"class.blink::TransformationMatrix"* %0 to <2 x double>*
  %33 = load <2 x double>, <2 x double>* %32, align 8
  %34 = shufflevector <2 x double> %13, <2 x double> undef, <2 x i32> zeroinitializer
  %35 = fmul <2 x double> %33, %34
  %36 = bitcast double* %29 to <2 x double>*
  %37 = load <2 x double>, <2 x double>* %36, align 8
  %38 = shufflevector <2 x double> %13, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %39 = fmul <2 x double> %37, %38
  %40 = fadd <2 x double> %35, %39
  %41 = bitcast double* %30 to <2 x double>*
  %42 = load <2 x double>, <2 x double>* %41, align 8
  %43 = insertelement <2 x double> undef, double %28, i32 0
  %44 = shufflevector <2 x double> %43, <2 x double> undef, <2 x i32> zeroinitializer
  %45 = fmul <2 x double> %44, %42
  %46 = fadd <2 x double> %40, %45
  %47 = bitcast double* %31 to <2 x double>*
  %48 = load <2 x double>, <2 x double>* %47, align 8
  %49 = fadd <2 x double> %48, %46
  %50 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %51 = load double, double* %50, align 8
  %52 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %53 = load double, double* %52, align 8
  %54 = insertelement <2 x double> undef, double %51, i32 0
  %55 = insertelement <2 x double> %54, double %53, i32 1
  %56 = fmul <2 x double> %55, %13
  %57 = extractelement <2 x double> %56, i32 0
  %58 = extractelement <2 x double> %56, i32 1
  %59 = fadd double %57, %58
  %60 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %61 = load double, double* %60, align 8
  %62 = fmul double %28, %61
  %63 = fadd double %59, %62
  %64 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %65 = load double, double* %64, align 8
  %66 = fadd double %65, %63
  %67 = fcmp ugt double %66, 0.000000e+00
  br i1 %67, label %71, label %68

68:                                               ; preds = %10
  %69 = call <2 x double> @llvm.copysign.v2f64(<2 x double> <double 1.562500e+06, double 1.562500e+06>, <2 x double> %49)
  br i1 %4, label %70, label %77

70:                                               ; preds = %68
  store i8 1, i8* %2, align 1
  br label %77

71:                                               ; preds = %10
  %72 = fcmp une double %66, 1.000000e+00
  br i1 %72, label %73, label %77

73:                                               ; preds = %71
  %74 = insertelement <2 x double> undef, double %66, i32 0
  %75 = shufflevector <2 x double> %74, <2 x double> undef, <2 x i32> zeroinitializer
  %76 = fdiv <2 x double> %49, %75
  br label %77

77:                                               ; preds = %68, %70, %71, %73
  %78 = phi <2 x double> [ %76, %73 ], [ %49, %71 ], [ %69, %70 ], [ %69, %68 ]
  %79 = extractelement <2 x double> %78, i32 0
  %80 = fptrunc double %79 to float
  %81 = extractelement <2 x double> %78, i32 1
  %82 = fptrunc double %81 to float
  %83 = insertelement <2 x float> undef, float %80, i32 0
  %84 = insertelement <2 x float> %83, float %82, i32 1
  br label %85

85:                                               ; preds = %6, %77
  %86 = phi <2 x float> [ %84, %77 ], [ zeroinitializer, %6 ]
  ret <2 x float> %86
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink20TransformationMatrix11ProjectQuadERKNS_9FloatQuadE(%"class.blink::FloatQuad"* noalias nocapture sret, %"class.blink::TransformationMatrix"* nocapture readonly, %"class.blink::FloatQuad"* nocapture readonly dereferenceable(32)) local_unnamed_addr #5 align 2 {
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  %8 = alloca <2 x float>, align 8
  %9 = bitcast <2 x float>* %8 to %"class.blink::FloatPoint"*
  %10 = alloca <2 x float>, align 8
  %11 = bitcast <2 x float>* %10 to %"class.blink::FloatPoint"*
  %12 = alloca <2 x float>, align 8
  %13 = bitcast <2 x float>* %12 to %"class.blink::FloatPoint"*
  %14 = alloca <2 x float>, align 8
  %15 = bitcast <2 x float>* %14 to %"class.blink::FloatPoint"*
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #19
  store i8 0, i8* %4, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5) #19
  store i8 0, i8* %5, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #19
  store i8 0, i8* %6, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #19
  store i8 0, i8* %7, align 1
  %16 = bitcast <2 x float>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #19
  %17 = bitcast %"class.blink::FloatQuad"* %2 to i64*
  %18 = load i64, i64* %17, align 4
  %19 = bitcast <2 x float>* %8 to i64*
  store i64 %18, i64* %19, align 8
  %20 = call <2 x float> @_ZNK5blink20TransformationMatrix12ProjectPointERKNS_10FloatPointEPb(%"class.blink::TransformationMatrix"* %1, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %9, i8* nonnull %4)
  %21 = bitcast <2 x float> %20 to <2 x i32>
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #19
  %22 = bitcast <2 x float>* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #19
  %23 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %2, i64 0, i32 1
  %24 = bitcast %"class.blink::FloatPoint"* %23 to i64*
  %25 = load i64, i64* %24, align 4
  %26 = bitcast <2 x float>* %10 to i64*
  store i64 %25, i64* %26, align 8
  %27 = call <2 x float> @_ZNK5blink20TransformationMatrix12ProjectPointERKNS_10FloatPointEPb(%"class.blink::TransformationMatrix"* %1, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %11, i8* nonnull %5)
  %28 = bitcast <2 x float> %27 to <2 x i32>
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #19
  %29 = bitcast <2 x float>* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #19
  %30 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %2, i64 0, i32 2
  %31 = bitcast %"class.blink::FloatPoint"* %30 to i64*
  %32 = load i64, i64* %31, align 4
  %33 = bitcast <2 x float>* %12 to i64*
  store i64 %32, i64* %33, align 8
  %34 = call <2 x float> @_ZNK5blink20TransformationMatrix12ProjectPointERKNS_10FloatPointEPb(%"class.blink::TransformationMatrix"* %1, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %13, i8* nonnull %6)
  %35 = bitcast <2 x float> %34 to <2 x i32>
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #19
  %36 = bitcast <2 x float>* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #19
  %37 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %2, i64 0, i32 3
  %38 = bitcast %"class.blink::FloatPoint"* %37 to i64*
  %39 = load i64, i64* %38, align 4
  %40 = bitcast <2 x float>* %14 to i64*
  store i64 %39, i64* %40, align 8
  %41 = call <2 x float> @_ZNK5blink20TransformationMatrix12ProjectPointERKNS_10FloatPointEPb(%"class.blink::TransformationMatrix"* %1, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %15, i8* nonnull %7)
  %42 = bitcast <2 x float> %41 to <2 x i32>
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #19
  %43 = load i8, i8* %4, align 1, !range !8
  %44 = icmp eq i8 %43, 0
  %45 = load i8, i8* %5, align 1
  %46 = icmp eq i8 %45, 0
  %47 = or i1 %44, %46
  %48 = load i8, i8* %6, align 1
  %49 = icmp eq i8 %48, 0
  %50 = or i1 %47, %49
  %51 = load i8, i8* %7, align 1
  %52 = icmp eq i8 %51, 0
  %53 = or i1 %50, %52
  br i1 %53, label %56, label %54

54:                                               ; preds = %3
  %55 = bitcast %"class.blink::FloatQuad"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %55, i8 0, i64 32, i1 false)
  br label %80

56:                                               ; preds = %3
  %57 = extractelement <2 x i32> %42, i32 1
  %58 = extractelement <2 x i32> %42, i32 0
  %59 = extractelement <2 x i32> %35, i32 1
  %60 = extractelement <2 x i32> %35, i32 0
  %61 = extractelement <2 x i32> %28, i32 1
  %62 = extractelement <2 x i32> %28, i32 0
  %63 = extractelement <2 x i32> %21, i32 1
  %64 = extractelement <2 x i32> %21, i32 0
  %65 = bitcast %"class.blink::FloatQuad"* %0 to i32*
  store i32 %64, i32* %65, align 4
  %66 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 0, i32 1
  %67 = bitcast float* %66 to i32*
  store i32 %63, i32* %67, align 4
  %68 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 1
  %69 = bitcast %"class.blink::FloatPoint"* %68 to i32*
  store i32 %62, i32* %69, align 4
  %70 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 1, i32 1
  %71 = bitcast float* %70 to i32*
  store i32 %61, i32* %71, align 4
  %72 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 2
  %73 = bitcast %"class.blink::FloatPoint"* %72 to i32*
  store i32 %60, i32* %73, align 4
  %74 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 2, i32 1
  %75 = bitcast float* %74 to i32*
  store i32 %59, i32* %75, align 4
  %76 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 3
  %77 = bitcast %"class.blink::FloatPoint"* %76 to i32*
  store i32 %58, i32* %77, align 4
  %78 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 3, i32 1
  %79 = bitcast float* %78 to i32*
  store i32 %57, i32* %79, align 4
  br label %80

80:                                               ; preds = %56, %54
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #19
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #19
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #19
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #19
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK5blink20TransformationMatrix28ClampedBoundsOfProjectedQuadERKNS_9FloatQuadE(%"class.blink::TransformationMatrix"* nocapture readonly, %"class.blink::FloatQuad"* nocapture readonly dereferenceable(32)) local_unnamed_addr #5 align 2 {
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  %7 = alloca <2 x float>, align 8
  %8 = alloca <2 x float>, align 8
  %9 = alloca <2 x float>, align 8
  %10 = alloca <2 x float>, align 8
  %11 = alloca %"class.blink::FloatQuad", align 4
  %12 = bitcast %"class.blink::FloatQuad"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #19
  %13 = bitcast <2 x float>* %7 to %"class.blink::FloatPoint"*
  %14 = bitcast <2 x float>* %8 to %"class.blink::FloatPoint"*
  %15 = bitcast <2 x float>* %9 to %"class.blink::FloatPoint"*
  %16 = bitcast <2 x float>* %10 to %"class.blink::FloatPoint"*
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #19, !noalias !9
  store i8 0, i8* %3, align 1, !noalias !9
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #19, !noalias !9
  store i8 0, i8* %4, align 1, !noalias !9
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5) #19, !noalias !9
  store i8 0, i8* %5, align 1, !noalias !9
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #19, !noalias !9
  store i8 0, i8* %6, align 1, !noalias !9
  %17 = bitcast <2 x float>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #19, !noalias !9
  %18 = bitcast %"class.blink::FloatQuad"* %1 to i64*
  %19 = load i64, i64* %18, align 4, !noalias !9
  %20 = bitcast <2 x float>* %7 to i64*
  store i64 %19, i64* %20, align 8, !noalias !9
  %21 = call <2 x float> @_ZNK5blink20TransformationMatrix12ProjectPointERKNS_10FloatPointEPb(%"class.blink::TransformationMatrix"* %0, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %13, i8* nonnull %3) #19, !noalias !9
  %22 = bitcast <2 x float> %21 to <2 x i32>
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #19, !noalias !9
  %23 = bitcast <2 x float>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #19, !noalias !9
  %24 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %1, i64 0, i32 1
  %25 = bitcast %"class.blink::FloatPoint"* %24 to i64*
  %26 = load i64, i64* %25, align 4, !noalias !9
  %27 = bitcast <2 x float>* %8 to i64*
  store i64 %26, i64* %27, align 8, !noalias !9
  %28 = call <2 x float> @_ZNK5blink20TransformationMatrix12ProjectPointERKNS_10FloatPointEPb(%"class.blink::TransformationMatrix"* %0, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %14, i8* nonnull %4) #19, !noalias !9
  %29 = bitcast <2 x float> %28 to <2 x i32>
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #19, !noalias !9
  %30 = bitcast <2 x float>* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #19, !noalias !9
  %31 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %1, i64 0, i32 2
  %32 = bitcast %"class.blink::FloatPoint"* %31 to i64*
  %33 = load i64, i64* %32, align 4, !noalias !9
  %34 = bitcast <2 x float>* %9 to i64*
  store i64 %33, i64* %34, align 8, !noalias !9
  %35 = call <2 x float> @_ZNK5blink20TransformationMatrix12ProjectPointERKNS_10FloatPointEPb(%"class.blink::TransformationMatrix"* %0, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %15, i8* nonnull %5) #19, !noalias !9
  %36 = bitcast <2 x float> %35 to <2 x i32>
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #19, !noalias !9
  %37 = bitcast <2 x float>* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #19, !noalias !9
  %38 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %1, i64 0, i32 3
  %39 = bitcast %"class.blink::FloatPoint"* %38 to i64*
  %40 = load i64, i64* %39, align 4, !noalias !9
  %41 = bitcast <2 x float>* %10 to i64*
  store i64 %40, i64* %41, align 8, !noalias !9
  %42 = call <2 x float> @_ZNK5blink20TransformationMatrix12ProjectPointERKNS_10FloatPointEPb(%"class.blink::TransformationMatrix"* %0, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %16, i8* nonnull %6) #19, !noalias !9
  %43 = bitcast <2 x float> %42 to <2 x i32>
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #19, !noalias !9
  %44 = load i8, i8* %3, align 1, !range !8, !noalias !9
  %45 = icmp eq i8 %44, 0
  %46 = load i8, i8* %4, align 1, !noalias !9
  %47 = icmp eq i8 %46, 0
  %48 = or i1 %45, %47
  %49 = load i8, i8* %5, align 1, !noalias !9
  %50 = icmp eq i8 %49, 0
  %51 = or i1 %48, %50
  %52 = load i8, i8* %6, align 1, !noalias !9
  %53 = icmp eq i8 %52, 0
  %54 = or i1 %51, %53
  br i1 %54, label %56, label %55

55:                                               ; preds = %2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %12, i8 0, i64 32, i1 false) #19, !alias.scope !9
  br label %80

56:                                               ; preds = %2
  %57 = extractelement <2 x i32> %43, i32 1
  %58 = extractelement <2 x i32> %43, i32 0
  %59 = extractelement <2 x i32> %36, i32 1
  %60 = extractelement <2 x i32> %36, i32 0
  %61 = extractelement <2 x i32> %29, i32 1
  %62 = extractelement <2 x i32> %29, i32 0
  %63 = extractelement <2 x i32> %22, i32 1
  %64 = extractelement <2 x i32> %22, i32 0
  %65 = bitcast %"class.blink::FloatQuad"* %11 to i32*
  store i32 %64, i32* %65, align 4, !alias.scope !9
  %66 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %11, i64 0, i32 0, i32 1
  %67 = bitcast float* %66 to i32*
  store i32 %63, i32* %67, align 4, !alias.scope !9
  %68 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %11, i64 0, i32 1
  %69 = bitcast %"class.blink::FloatPoint"* %68 to i32*
  store i32 %62, i32* %69, align 4, !alias.scope !9
  %70 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %11, i64 0, i32 1, i32 1
  %71 = bitcast float* %70 to i32*
  store i32 %61, i32* %71, align 4, !alias.scope !9
  %72 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %11, i64 0, i32 2
  %73 = bitcast %"class.blink::FloatPoint"* %72 to i32*
  store i32 %60, i32* %73, align 4, !alias.scope !9
  %74 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %11, i64 0, i32 2, i32 1
  %75 = bitcast float* %74 to i32*
  store i32 %59, i32* %75, align 4, !alias.scope !9
  %76 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %11, i64 0, i32 3
  %77 = bitcast %"class.blink::FloatPoint"* %76 to i32*
  store i32 %58, i32* %77, align 4, !alias.scope !9
  %78 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %11, i64 0, i32 3, i32 1
  %79 = bitcast float* %78 to i32*
  store i32 %57, i32* %79, align 4, !alias.scope !9
  br label %80

80:                                               ; preds = %55, %56
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #19, !noalias !9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #19, !noalias !9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #19, !noalias !9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #19, !noalias !9
  %81 = call { <2 x float>, <2 x float> } @_ZNK5blink9FloatQuad11BoundingBoxEv(%"class.blink::FloatQuad"* nonnull %11) #19
  %82 = extractvalue { <2 x float>, <2 x float> } %81, 0
  %83 = extractvalue { <2 x float>, <2 x float> } %81, 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #19
  %84 = extractelement <2 x float> %82, i32 0
  %85 = call float @llvm.floor.f32(float %84)
  %86 = fcmp ult float %85, 0x4170000000000000
  %87 = fcmp ole float %85, 0xC170000000000000
  %88 = select i1 %87, float 0xC170000000000000, float %85
  %89 = select i1 %86, float %88, float 0x4170000000000000
  %90 = extractelement <2 x float> %82, i32 1
  %91 = call float @llvm.floor.f32(float %90)
  %92 = fcmp ult float %91, 0x4170000000000000
  %93 = fcmp ole float %91, 0xC170000000000000
  %94 = select i1 %93, float 0xC170000000000000, float %91
  %95 = select i1 %92, float %94, float 0x4170000000000000
  %96 = call float @llvm.fabs.f32(float %84) #20
  %97 = fcmp oeq float %96, 0x7FF0000000000000
  %98 = extractelement <2 x float> %83, i32 0
  %99 = call float @llvm.fabs.f32(float %98) #20
  %100 = fcmp oeq float %99, 0x7FF0000000000000
  %101 = and i1 %97, %100
  br i1 %101, label %109, label %102

102:                                              ; preds = %80
  %103 = fadd float %84, %98
  %104 = call float @llvm.ceil.f32(float %103)
  %105 = fcmp ult float %104, 0x4170000000000000
  %106 = fcmp ole float %104, 0xC170000000000000
  %107 = select i1 %106, float 0xC170000000000000, float %104
  %108 = select i1 %105, float %107, float 0x4170000000000000
  br label %109

109:                                              ; preds = %80, %102
  %110 = phi float [ %108, %102 ], [ 0x4170000000000000, %80 ]
  %111 = call float @llvm.fabs.f32(float %90) #20
  %112 = fcmp oeq float %111, 0x7FF0000000000000
  %113 = extractelement <2 x float> %83, i32 1
  %114 = call float @llvm.fabs.f32(float %113) #20
  %115 = fcmp oeq float %114, 0x7FF0000000000000
  %116 = and i1 %112, %115
  br i1 %116, label %124, label %117

117:                                              ; preds = %109
  %118 = fadd float %90, %113
  %119 = call float @llvm.ceil.f32(float %118)
  %120 = fcmp ult float %119, 0x4170000000000000
  %121 = fcmp ole float %119, 0xC170000000000000
  %122 = select i1 %121, float 0xC170000000000000, float %119
  %123 = select i1 %120, float %122, float 0x4170000000000000
  br label %124

124:                                              ; preds = %109, %117
  %125 = phi float [ %123, %117 ], [ 0x4170000000000000, %109 ]
  %126 = fmul float %89, 6.400000e+01
  %127 = call float @llvm.floor.f32(float %126) #19
  %128 = fcmp ult float %127, 0xC1E0000000000000
  %129 = fcmp ugt float %127, 0x41DFFFFFE0000000
  %130 = fcmp ogt float %127, 0xC1E0000000000000
  %131 = select i1 %130, float %127, float 0xC1E0000000000000
  %132 = fptosi float %131 to i32
  %133 = select i1 %128, i32 0, i32 2147483647
  %134 = select i1 %129, i32 %133, i32 %132
  %135 = fmul float %95, 6.400000e+01
  %136 = call float @llvm.floor.f32(float %135) #19
  %137 = fcmp ult float %136, 0xC1E0000000000000
  %138 = fcmp ugt float %136, 0x41DFFFFFE0000000
  %139 = fcmp ogt float %136, 0xC1E0000000000000
  %140 = select i1 %139, float %136, float 0xC1E0000000000000
  %141 = fptosi float %140 to i32
  %142 = select i1 %137, i32 0, i32 2147483647
  %143 = select i1 %138, i32 %142, i32 %141
  %144 = fsub float %110, %89
  %145 = fmul float %144, 6.400000e+01
  %146 = call float @llvm.floor.f32(float %145) #19
  %147 = fcmp ult float %146, 0xC1E0000000000000
  %148 = fcmp ugt float %146, 0x41DFFFFFE0000000
  %149 = fcmp ogt float %146, 0xC1E0000000000000
  %150 = select i1 %149, float %146, float 0xC1E0000000000000
  %151 = fptosi float %150 to i32
  %152 = select i1 %147, i32 0, i32 2147483647
  %153 = select i1 %148, i32 %152, i32 %151
  %154 = fsub float %125, %95
  %155 = fmul float %154, 6.400000e+01
  %156 = call float @llvm.floor.f32(float %155) #19
  %157 = fcmp ult float %156, 0xC1E0000000000000
  %158 = fcmp ugt float %156, 0x41DFFFFFE0000000
  %159 = fcmp ogt float %156, 0xC1E0000000000000
  %160 = select i1 %159, float %156, float 0xC1E0000000000000
  %161 = fptosi float %160 to i32
  %162 = select i1 %157, i32 0, i32 2147483647
  %163 = select i1 %158, i32 %162, i32 %161
  %164 = zext i32 %143 to i64
  %165 = shl nuw i64 %164, 32
  %166 = zext i32 %134 to i64
  %167 = or i64 %165, %166
  %168 = insertvalue { i64, i64 } undef, i64 %167, 0
  %169 = zext i32 %163 to i64
  %170 = shl nuw i64 %169, 32
  %171 = zext i32 %153 to i64
  %172 = or i64 %170, %171
  %173 = insertvalue { i64, i64 } %168, i64 %172, 1
  ret { i64, i64 } %173
}

declare { <2 x float>, <2 x float> } @_ZNK5blink9FloatQuad11BoundingBoxEv(%"class.blink::FloatQuad"*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink20TransformationMatrix12TransformBoxERNS_8FloatBoxE(%"class.blink::TransformationMatrix"*, %"class.blink::FloatBox"* nocapture dereferenceable(24)) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.blink::FloatBox", align 4
  %4 = alloca %"class.blink::FloatPoint3D", align 4
  %5 = alloca %"class.blink::FloatPoint3D", align 4
  %6 = bitcast %"class.blink::FloatBox"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #19
  %7 = getelementptr inbounds %"class.blink::FloatBox", %"class.blink::FloatBox"* %3, i64 0, i32 1
  %8 = getelementptr inbounds %"class.blink::FloatBox", %"class.blink::FloatBox"* %3, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %6, i8 0, i64 24, i1 false) #19
  %9 = bitcast %"class.blink::FloatPoint3D"* %4 to i8*
  %10 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %4, i64 0, i32 0
  %11 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %4, i64 0, i32 1
  %12 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %4, i64 0, i32 2
  %13 = getelementptr inbounds %"class.blink::FloatBox", %"class.blink::FloatBox"* %1, i64 0, i32 0
  %14 = getelementptr inbounds %"class.blink::FloatBox", %"class.blink::FloatBox"* %1, i64 0, i32 1
  %15 = getelementptr inbounds %"class.blink::FloatBox", %"class.blink::FloatBox"* %1, i64 0, i32 2
  %16 = getelementptr inbounds %"class.blink::FloatBox", %"class.blink::FloatBox"* %1, i64 0, i32 3
  %17 = getelementptr inbounds %"class.blink::FloatBox", %"class.blink::FloatBox"* %1, i64 0, i32 4
  %18 = getelementptr inbounds %"class.blink::FloatBox", %"class.blink::FloatBox"* %1, i64 0, i32 5
  %19 = bitcast %"class.blink::FloatPoint3D"* %5 to i8*
  %20 = bitcast %"class.blink::FloatPoint3D"* %4 to i32*
  %21 = bitcast %"class.blink::FloatBox"* %3 to i32*
  %22 = bitcast float* %11 to i32*
  %23 = bitcast float* %7 to i32*
  %24 = bitcast float* %12 to i32*
  %25 = bitcast float* %8 to i32*
  br label %26

26:                                               ; preds = %50, %2
  %27 = phi i64 [ 0, %2 ], [ %51, %50 ]
  %28 = phi i8 [ 1, %2 ], [ %79, %50 ]
  %29 = uitofp i64 %27 to float
  br label %32

30:                                               ; preds = %50
  %31 = bitcast %"class.blink::FloatBox"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %31, i8* nonnull align 4 %6, i64 24, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #19
  ret void

32:                                               ; preds = %78, %26
  %33 = phi i64 [ 0, %26 ], [ %80, %78 ]
  %34 = phi i8 [ %28, %26 ], [ %79, %78 ]
  %35 = uitofp i64 %33 to float
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %9) #19
  %36 = load float, float* %13, align 4
  %37 = load float, float* %14, align 4
  %38 = load float, float* %15, align 4
  %39 = load float, float* %16, align 4
  %40 = fmul float %39, %29
  %41 = load float, float* %17, align 4
  %42 = fmul float %41, %35
  %43 = load float, float* %18, align 4
  %44 = fmul float %43, 0.000000e+00
  %45 = fadd float %36, %40
  store float %45, float* %10, align 4
  %46 = fadd float %37, %42
  store float %46, float* %11, align 4
  %47 = fadd float %38, %44
  store float %47, float* %12, align 4
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %19) #19
  call void @_ZNK5blink20TransformationMatrix8MapPointERKNS_12FloatPoint3DE(%"class.blink::FloatPoint3D"* nonnull sret %5, %"class.blink::TransformationMatrix"* %0, %"class.blink::FloatPoint3D"* nonnull dereferenceable(12) %4)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %9, i8* nonnull align 4 %19, i64 12, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %19) #19
  %48 = and i8 %34, 1
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %57, label %53

50:                                               ; preds = %78
  %51 = add nuw nsw i64 %27, 1
  %52 = icmp eq i64 %51, 2
  br i1 %52, label %30, label %26

53:                                               ; preds = %32
  %54 = load i32, i32* %20, align 4
  store i32 %54, i32* %21, align 4
  %55 = load i32, i32* %22, align 4
  store i32 %55, i32* %23, align 4
  %56 = load i32, i32* %24, align 4
  store i32 %56, i32* %25, align 4
  br label %58

57:                                               ; preds = %32
  call void @_ZN5blink8FloatBox8ExpandToERKNS_12FloatPoint3DES3_(%"class.blink::FloatBox"* nonnull %3, %"class.blink::FloatPoint3D"* nonnull dereferenceable(12) %4, %"class.blink::FloatPoint3D"* nonnull dereferenceable(12) %4) #19
  br label %58

58:                                               ; preds = %57, %53
  %59 = phi i8 [ 0, %53 ], [ %34, %57 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %9) #19
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %9) #19
  %60 = load float, float* %13, align 4
  %61 = load float, float* %14, align 4
  %62 = load float, float* %15, align 4
  %63 = load float, float* %16, align 4
  %64 = fmul float %63, %29
  %65 = load float, float* %17, align 4
  %66 = fmul float %65, %35
  %67 = load float, float* %18, align 4
  %68 = fadd float %60, %64
  store float %68, float* %10, align 4
  %69 = fadd float %61, %66
  store float %69, float* %11, align 4
  %70 = fadd float %62, %67
  store float %70, float* %12, align 4
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %19) #19
  call void @_ZNK5blink20TransformationMatrix8MapPointERKNS_12FloatPoint3DE(%"class.blink::FloatPoint3D"* nonnull sret %5, %"class.blink::TransformationMatrix"* %0, %"class.blink::FloatPoint3D"* nonnull dereferenceable(12) %4)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %9, i8* nonnull align 4 %19, i64 12, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %19) #19
  %71 = and i8 %59, 1
  %72 = icmp eq i8 %71, 0
  br i1 %72, label %77, label %73

73:                                               ; preds = %58
  %74 = load i32, i32* %20, align 4
  store i32 %74, i32* %21, align 4
  %75 = load i32, i32* %22, align 4
  store i32 %75, i32* %23, align 4
  %76 = load i32, i32* %24, align 4
  store i32 %76, i32* %25, align 4
  br label %78

77:                                               ; preds = %58
  call void @_ZN5blink8FloatBox8ExpandToERKNS_12FloatPoint3DES3_(%"class.blink::FloatBox"* nonnull %3, %"class.blink::FloatPoint3D"* nonnull dereferenceable(12) %4, %"class.blink::FloatPoint3D"* nonnull dereferenceable(12) %4) #19
  br label %78

78:                                               ; preds = %77, %73
  %79 = phi i8 [ 0, %73 ], [ %59, %77 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %9) #19
  %80 = add nuw nsw i64 %33, 1
  %81 = icmp eq i64 %80, 2
  br i1 %81, label %50, label %32
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink20TransformationMatrix8MapPointERKNS_12FloatPoint3DE(%"class.blink::FloatPoint3D"* noalias sret, %"class.blink::TransformationMatrix"*, %"class.blink::FloatPoint3D"* dereferenceable(12)) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 0
  %5 = load double, double* %4, align 8
  %6 = fcmp oeq double %5, 1.000000e+00
  br i1 %6, label %7, label %77

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 1
  %9 = load double, double* %8, align 8
  %10 = fcmp oeq double %9, 0.000000e+00
  br i1 %10, label %11, label %77

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 2
  %13 = load double, double* %12, align 8
  %14 = fcmp oeq double %13, 0.000000e+00
  br i1 %14, label %15, label %77

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 3
  %17 = load double, double* %16, align 8
  %18 = fcmp oeq double %17, 0.000000e+00
  br i1 %18, label %19, label %77

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 0
  %21 = load double, double* %20, align 8
  %22 = fcmp oeq double %21, 0.000000e+00
  br i1 %22, label %23, label %77

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 1
  %25 = load double, double* %24, align 8
  %26 = fcmp oeq double %25, 1.000000e+00
  br i1 %26, label %27, label %77

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 2
  %29 = load double, double* %28, align 8
  %30 = fcmp oeq double %29, 0.000000e+00
  br i1 %30, label %31, label %77

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 3
  %33 = load double, double* %32, align 8
  %34 = fcmp oeq double %33, 0.000000e+00
  br i1 %34, label %35, label %77

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 0
  %37 = load double, double* %36, align 8
  %38 = fcmp oeq double %37, 0.000000e+00
  br i1 %38, label %39, label %77

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 1
  %41 = load double, double* %40, align 8
  %42 = fcmp oeq double %41, 0.000000e+00
  br i1 %42, label %43, label %77

43:                                               ; preds = %39
  %44 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 2
  %45 = load double, double* %44, align 8
  %46 = fcmp oeq double %45, 1.000000e+00
  br i1 %46, label %47, label %77

47:                                               ; preds = %43
  %48 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 3
  %49 = load double, double* %48, align 8
  %50 = fcmp oeq double %49, 0.000000e+00
  br i1 %50, label %51, label %77

51:                                               ; preds = %47
  %52 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 3
  %53 = load double, double* %52, align 8
  %54 = fcmp oeq double %53, 1.000000e+00
  br i1 %54, label %55, label %77

55:                                               ; preds = %51
  %56 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %2, i64 0, i32 0
  %57 = load float, float* %56, align 4
  %58 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 0
  %59 = load double, double* %58, align 8
  %60 = fptrunc double %59 to float
  %61 = fadd float %57, %60
  %62 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %2, i64 0, i32 1
  %63 = load float, float* %62, align 4
  %64 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 1
  %65 = load double, double* %64, align 8
  %66 = fptrunc double %65 to float
  %67 = fadd float %63, %66
  %68 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %2, i64 0, i32 2
  %69 = load float, float* %68, align 4
  %70 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 2
  %71 = load double, double* %70, align 8
  %72 = fptrunc double %71 to float
  %73 = fadd float %69, %72
  %74 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %0, i64 0, i32 0
  store float %61, float* %74, align 4
  %75 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %0, i64 0, i32 1
  store float %67, float* %75, align 4
  %76 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %0, i64 0, i32 2
  store float %73, float* %76, align 4
  br label %78

77:                                               ; preds = %3, %7, %11, %15, %19, %23, %27, %31, %35, %39, %43, %47, %51
  tail call void @_ZNK5blink20TransformationMatrix16InternalMapPointERKNS_12FloatPoint3DE(%"class.blink::FloatPoint3D"* sret %0, %"class.blink::TransformationMatrix"* %1, %"class.blink::FloatPoint3D"* dereferenceable(12) %2)
  br label %78

78:                                               ; preds = %77, %55
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden <2 x float> @_ZNK5blink20TransformationMatrix8MapPointERKNS_10FloatPointE(%"class.blink::TransformationMatrix"* readonly, %"class.blink::FloatPoint"* nocapture readonly dereferenceable(8)) local_unnamed_addr #7 align 2 {
  %3 = bitcast %"class.blink::TransformationMatrix"* %0 to <2 x double>*
  %4 = load <2 x double>, <2 x double>* %3, align 8
  %5 = extractelement <2 x double> %4, i32 0
  %6 = fcmp oeq double %5, 1.000000e+00
  %7 = extractelement <2 x double> %4, i32 1
  %8 = fcmp oeq double %7, 0.000000e+00
  %9 = and i1 %6, %8
  br i1 %9, label %10, label %62

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %12 = load double, double* %11, align 8
  %13 = fcmp oeq double %12, 0.000000e+00
  br i1 %13, label %14, label %62

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %16 = load double, double* %15, align 8
  %17 = fcmp oeq double %16, 0.000000e+00
  br i1 %17, label %18, label %62

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %20 = load double, double* %19, align 8
  %21 = fcmp oeq double %20, 0.000000e+00
  br i1 %21, label %22, label %62

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  %24 = load double, double* %23, align 8
  %25 = fcmp oeq double %24, 1.000000e+00
  br i1 %25, label %26, label %62

26:                                               ; preds = %22
  %27 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %28 = load double, double* %27, align 8
  %29 = fcmp oeq double %28, 0.000000e+00
  br i1 %29, label %30, label %62

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %32 = load double, double* %31, align 8
  %33 = fcmp oeq double %32, 0.000000e+00
  br i1 %33, label %34, label %62

34:                                               ; preds = %30
  %35 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %36 = load double, double* %35, align 8
  %37 = fcmp oeq double %36, 0.000000e+00
  br i1 %37, label %38, label %62

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 1
  %40 = load double, double* %39, align 8
  %41 = fcmp oeq double %40, 0.000000e+00
  br i1 %41, label %42, label %62

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %44 = load double, double* %43, align 8
  %45 = fcmp oeq double %44, 1.000000e+00
  br i1 %45, label %46, label %62

46:                                               ; preds = %42
  %47 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %48 = load double, double* %47, align 8
  %49 = fcmp oeq double %48, 0.000000e+00
  br i1 %49, label %50, label %62

50:                                               ; preds = %46
  %51 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %52 = load double, double* %51, align 8
  %53 = fcmp oeq double %52, 1.000000e+00
  br i1 %53, label %54, label %62

54:                                               ; preds = %50
  %55 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %56 = bitcast %"class.blink::FloatPoint"* %1 to <2 x float>*
  %57 = load <2 x float>, <2 x float>* %56, align 4
  %58 = bitcast double* %55 to <2 x double>*
  %59 = load <2 x double>, <2 x double>* %58, align 8
  %60 = fptrunc <2 x double> %59 to <2 x float>
  %61 = fadd <2 x float> %57, %60
  br label %101

62:                                               ; preds = %2, %10, %14, %18, %22, %26, %30, %34, %38, %42, %46, %50
  %63 = bitcast %"class.blink::FloatPoint"* %1 to <2 x float>*
  %64 = load <2 x float>, <2 x float>* %63, align 4
  %65 = fpext <2 x float> %64 to <2 x double>
  %66 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %67 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %68 = bitcast double* %66 to <2 x double>*
  %69 = load <2 x double>, <2 x double>* %68, align 8
  %70 = shufflevector <2 x double> %65, <2 x double> undef, <2 x i32> zeroinitializer
  %71 = fmul <2 x double> %4, %70
  %72 = fadd <2 x double> %69, %71
  %73 = bitcast double* %67 to <2 x double>*
  %74 = load <2 x double>, <2 x double>* %73, align 8
  %75 = shufflevector <2 x double> %65, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %76 = fmul <2 x double> %74, %75
  %77 = fadd <2 x double> %72, %76
  %78 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %79 = load double, double* %78, align 8
  %80 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %81 = load double, double* %80, align 8
  %82 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %83 = load double, double* %82, align 8
  %84 = insertelement <2 x double> undef, double %81, i32 0
  %85 = insertelement <2 x double> %84, double %83, i32 1
  %86 = fmul <2 x double> %85, %65
  %87 = extractelement <2 x double> %86, i32 0
  %88 = fadd double %79, %87
  %89 = extractelement <2 x double> %86, i32 1
  %90 = fadd double %88, %89
  %91 = fcmp une double %90, 1.000000e+00
  %92 = fcmp une double %90, 0.000000e+00
  %93 = and i1 %91, %92
  br i1 %93, label %94, label %98

94:                                               ; preds = %62
  %95 = insertelement <2 x double> undef, double %90, i32 0
  %96 = shufflevector <2 x double> %95, <2 x double> undef, <2 x i32> zeroinitializer
  %97 = fdiv <2 x double> %77, %96
  br label %98

98:                                               ; preds = %62, %94
  %99 = phi <2 x double> [ %97, %94 ], [ %77, %62 ]
  %100 = fptrunc <2 x double> %99 to <2 x float>
  br label %101

101:                                              ; preds = %98, %54
  %102 = phi <2 x float> [ %100, %98 ], [ %61, %54 ]
  ret <2 x float> %102
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5blink20TransformationMatrix16InternalMapPointERKNS_12FloatPoint3DE(%"class.blink::FloatPoint3D"* noalias sret, %"class.blink::TransformationMatrix"*, %"class.blink::FloatPoint3D"* dereferenceable(12)) local_unnamed_addr #1 comdat align 2 {
  %4 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %2, i64 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = fpext float %5 to double
  %7 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %2, i64 0, i32 1
  %8 = bitcast float* %7 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = fpext <2 x float> %9 to <2 x double>
  %11 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 0
  %12 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 0
  %13 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 0
  %14 = bitcast double* %11 to <2 x double>*
  %15 = load <2 x double>, <2 x double>* %14, align 8
  %16 = bitcast %"class.blink::TransformationMatrix"* %1 to <2 x double>*
  %17 = load <2 x double>, <2 x double>* %16, align 8
  %18 = insertelement <2 x double> undef, double %6, i32 0
  %19 = shufflevector <2 x double> %18, <2 x double> undef, <2 x i32> zeroinitializer
  %20 = fmul <2 x double> %17, %19
  %21 = fadd <2 x double> %15, %20
  %22 = bitcast double* %12 to <2 x double>*
  %23 = load <2 x double>, <2 x double>* %22, align 8
  %24 = extractelement <2 x double> %10, i32 0
  %25 = shufflevector <2 x double> %10, <2 x double> undef, <2 x i32> zeroinitializer
  %26 = fmul <2 x double> %23, %25
  %27 = fadd <2 x double> %21, %26
  %28 = bitcast double* %13 to <2 x double>*
  %29 = load <2 x double>, <2 x double>* %28, align 8
  %30 = extractelement <2 x double> %10, i32 1
  %31 = shufflevector <2 x double> %10, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %32 = fmul <2 x double> %29, %31
  %33 = fadd <2 x double> %27, %32
  %34 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 2
  %35 = load double, double* %34, align 8
  %36 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 2
  %37 = load double, double* %36, align 8
  %38 = fmul double %37, %6
  %39 = fadd double %35, %38
  %40 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 2
  %41 = load double, double* %40, align 8
  %42 = fmul double %41, %24
  %43 = fadd double %39, %42
  %44 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 2
  %45 = load double, double* %44, align 8
  %46 = fmul double %45, %30
  %47 = fadd double %43, %46
  %48 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 3
  %49 = load double, double* %48, align 8
  %50 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 3
  %51 = load double, double* %50, align 8
  %52 = fmul double %51, %6
  %53 = fadd double %49, %52
  %54 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 3
  %55 = load double, double* %54, align 8
  %56 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 3
  %57 = load double, double* %56, align 8
  %58 = insertelement <2 x double> undef, double %55, i32 0
  %59 = insertelement <2 x double> %58, double %57, i32 1
  %60 = fmul <2 x double> %59, %10
  %61 = extractelement <2 x double> %60, i32 0
  %62 = fadd double %53, %61
  %63 = extractelement <2 x double> %60, i32 1
  %64 = fadd double %62, %63
  %65 = fcmp une double %64, 1.000000e+00
  %66 = fcmp une double %64, 0.000000e+00
  %67 = and i1 %65, %66
  br i1 %67, label %68, label %73

68:                                               ; preds = %3
  %69 = insertelement <2 x double> undef, double %64, i32 0
  %70 = shufflevector <2 x double> %69, <2 x double> undef, <2 x i32> zeroinitializer
  %71 = fdiv <2 x double> %33, %70
  %72 = fdiv double %47, %64
  br label %73

73:                                               ; preds = %3, %68
  %74 = phi double [ %72, %68 ], [ %47, %3 ]
  %75 = phi <2 x double> [ %71, %68 ], [ %33, %3 ]
  %76 = extractelement <2 x double> %75, i32 0
  %77 = fptrunc double %76 to float
  %78 = extractelement <2 x double> %75, i32 1
  %79 = fptrunc double %78 to float
  %80 = fptrunc double %74 to float
  %81 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %0, i64 0, i32 0
  store float %77, float* %81, align 4
  %82 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %0, i64 0, i32 1
  store float %79, float* %82, align 4
  %83 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %0, i64 0, i32 2
  store float %80, float* %83, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK5blink20TransformationMatrix7MapRectERKNS_7IntRectE(%"class.blink::TransformationMatrix"*, %"class.blink::IntRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #5 align 2 {
  %3 = alloca <4 x float>, align 16
  %4 = bitcast <4 x float>* %3 to %"class.blink::FloatRect"*
  %5 = bitcast <4 x float>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #19
  %6 = bitcast %"class.blink::IntRect"* %1 to <4 x i32>*
  %7 = load <4 x i32>, <4 x i32>* %6, align 4
  %8 = sitofp <4 x i32> %7 to <4 x float>
  store <4 x float> %8, <4 x float>* %3, align 16
  %9 = call { <2 x float>, <2 x float> } @_ZNK5blink20TransformationMatrix7MapRectERKNS_9FloatRectE(%"class.blink::TransformationMatrix"* %0, %"class.blink::FloatRect"* nonnull dereferenceable(16) %4)
  %10 = extractvalue { <2 x float>, <2 x float> } %9, 0
  %11 = extractvalue { <2 x float>, <2 x float> } %9, 1
  %12 = extractelement <2 x float> %10, i32 0
  %13 = tail call float @llvm.floor.f32(float %12) #19
  %14 = fpext float %13 to double
  %15 = fcmp ult double %14, 0x41DFFFFFFFC00000
  br i1 %15, label %16, label %21

16:                                               ; preds = %2
  %17 = fcmp ugt float %13, 0xC1E0000000000000
  br i1 %17, label %18, label %21

18:                                               ; preds = %16
  %19 = fptosi float %13 to i32
  %20 = zext i32 %19 to i64
  br label %21

21:                                               ; preds = %18, %16, %2
  %22 = phi i64 [ %20, %18 ], [ 2147483647, %2 ], [ 2147483648, %16 ]
  %23 = extractelement <2 x float> %10, i32 1
  %24 = tail call float @llvm.floor.f32(float %23) #19
  %25 = fpext float %24 to double
  %26 = fcmp ult double %25, 0x41DFFFFFFFC00000
  br i1 %26, label %27, label %33

27:                                               ; preds = %21
  %28 = fcmp ugt float %24, 0xC1E0000000000000
  br i1 %28, label %29, label %33

29:                                               ; preds = %27
  %30 = fptosi float %24 to i32
  %31 = zext i32 %30 to i64
  %32 = shl nuw i64 %31, 32
  br label %33

33:                                               ; preds = %29, %27, %21
  %34 = phi i64 [ %32, %29 ], [ 9223372032559808512, %21 ], [ -9223372036854775808, %27 ]
  %35 = trunc i64 %22 to i32
  %36 = lshr exact i64 %34, 32
  %37 = trunc i64 %36 to i32
  %38 = extractelement <2 x float> %11, i32 0
  %39 = fadd float %12, %38
  %40 = extractelement <2 x float> %11, i32 1
  %41 = fadd float %23, %40
  %42 = tail call float @llvm.ceil.f32(float %39) #19
  %43 = fpext float %42 to double
  %44 = fcmp ult double %43, 0x41DFFFFFFFC00000
  br i1 %44, label %45, label %49

45:                                               ; preds = %33
  %46 = fcmp ugt float %42, 0xC1E0000000000000
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = fptosi float %42 to i32
  br label %49

49:                                               ; preds = %47, %45, %33
  %50 = phi i32 [ %48, %47 ], [ 2147483647, %33 ], [ -2147483648, %45 ]
  %51 = tail call float @llvm.ceil.f32(float %41) #19
  %52 = fpext float %51 to double
  %53 = fcmp ult double %52, 0x41DFFFFFFFC00000
  br i1 %53, label %54, label %58

54:                                               ; preds = %49
  %55 = fcmp ugt float %51, 0xC1E0000000000000
  br i1 %55, label %56, label %58

56:                                               ; preds = %54
  %57 = fptosi float %51 to i32
  br label %58

58:                                               ; preds = %49, %54, %56
  %59 = phi i32 [ %57, %56 ], [ 2147483647, %49 ], [ -2147483648, %54 ]
  %60 = icmp sgt i32 %35, -1
  %61 = select i1 %60, i32 -2147483648, i32 2147483647
  %62 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %50, i32 %35) #19
  %63 = extractvalue { i32, i1 } %62, 1
  %64 = extractvalue { i32, i1 } %62, 0
  %65 = select i1 %63, i32 %61, i32 %64, !prof !12
  %66 = icmp sgt i32 %37, -1
  %67 = select i1 %66, i32 -2147483648, i32 2147483647
  %68 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %59, i32 %37) #19
  %69 = extractvalue { i32, i1 } %68, 1
  %70 = extractvalue { i32, i1 } %68, 0
  %71 = select i1 %69, i32 %67, i32 %70, !prof !12
  %72 = or i64 %34, %22
  %73 = zext i32 %71 to i64
  %74 = shl nuw i64 %73, 32
  %75 = zext i32 %65 to i64
  %76 = or i64 %74, %75
  %77 = insertvalue { i64, i64 } undef, i64 %72, 0
  %78 = insertvalue { i64, i64 } %77, i64 %76, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #19
  ret { i64, i64 } %78
}

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZNK5blink20TransformationMatrix7MapRectERKNS_9FloatRectE(%"class.blink::TransformationMatrix"* readonly, %"class.blink::FloatRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #5 align 2 {
  %3 = alloca %"class.blink::FloatQuad", align 8
  %4 = bitcast %"class.blink::TransformationMatrix"* %0 to <2 x double>*
  %5 = load <2 x double>, <2 x double>* %4, align 8
  %6 = extractelement <2 x double> %5, i32 0
  %7 = fcmp oeq double %6, 1.000000e+00
  %8 = extractelement <2 x double> %5, i32 1
  %9 = fcmp oeq double %8, 0.000000e+00
  %10 = and i1 %7, %9
  br i1 %10, label %11, label %66

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %13 = load double, double* %12, align 8
  %14 = fcmp oeq double %13, 0.000000e+00
  br i1 %14, label %15, label %66

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %17 = load double, double* %16, align 8
  %18 = fcmp oeq double %17, 0.000000e+00
  br i1 %18, label %19, label %66

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %21 = load double, double* %20, align 8
  %22 = fcmp oeq double %21, 0.000000e+00
  br i1 %22, label %23, label %66

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  %25 = load double, double* %24, align 8
  %26 = fcmp oeq double %25, 1.000000e+00
  br i1 %26, label %27, label %66

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %29 = load double, double* %28, align 8
  %30 = fcmp oeq double %29, 0.000000e+00
  br i1 %30, label %31, label %66

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %33 = load double, double* %32, align 8
  %34 = fcmp oeq double %33, 0.000000e+00
  br i1 %34, label %35, label %66

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %37 = load double, double* %36, align 8
  %38 = fcmp oeq double %37, 0.000000e+00
  br i1 %38, label %39, label %66

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 1
  %41 = load double, double* %40, align 8
  %42 = fcmp oeq double %41, 0.000000e+00
  br i1 %42, label %43, label %66

43:                                               ; preds = %39
  %44 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %45 = load double, double* %44, align 8
  %46 = fcmp oeq double %45, 1.000000e+00
  br i1 %46, label %47, label %66

47:                                               ; preds = %43
  %48 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %49 = load double, double* %48, align 8
  %50 = fcmp oeq double %49, 0.000000e+00
  br i1 %50, label %51, label %66

51:                                               ; preds = %47
  %52 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %53 = load double, double* %52, align 8
  %54 = fcmp oeq double %53, 1.000000e+00
  br i1 %54, label %55, label %66

55:                                               ; preds = %51
  %56 = bitcast %"class.blink::FloatRect"* %1 to <2 x float>*
  %57 = load <2 x float>, <2 x float>* %56, align 4
  %58 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1
  %59 = bitcast %"class.blink::FloatSize"* %58 to <2 x float>*
  %60 = load <2 x float>, <2 x float>* %59, align 4
  %61 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %62 = bitcast double* %61 to <2 x double>*
  %63 = load <2 x double>, <2 x double>* %62, align 8
  %64 = fptrunc <2 x double> %63 to <2 x float>
  %65 = fadd <2 x float> %57, %64
  br label %172

66:                                               ; preds = %2, %11, %15, %19, %23, %27, %31, %35, %39, %43, %47, %51
  %67 = bitcast %"class.blink::FloatQuad"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %67) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %67, i8 0, i64 32, i1 false) #19
  %68 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 0
  %69 = load float, float* %68, align 4
  %70 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 0
  %71 = load float, float* %70, align 4
  %72 = fadd float %69, %71
  %73 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 1
  %74 = load float, float* %73, align 4
  %75 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 1
  %76 = load float, float* %75, align 4
  %77 = fadd float %74, %76
  %78 = fpext float %69 to double
  %79 = fpext float %74 to double
  %80 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %81 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %82 = bitcast double* %81 to <2 x double>*
  %83 = load <2 x double>, <2 x double>* %82, align 8
  %84 = bitcast double* %80 to <2 x double>*
  %85 = load <2 x double>, <2 x double>* %84, align 8
  %86 = insertelement <2 x double> undef, double %78, i32 0
  %87 = shufflevector <2 x double> %86, <2 x double> undef, <2 x i32> zeroinitializer
  %88 = fmul <2 x double> %5, %87
  %89 = fadd <2 x double> %88, %85
  %90 = insertelement <2 x double> undef, double %79, i32 0
  %91 = shufflevector <2 x double> %90, <2 x double> undef, <2 x i32> zeroinitializer
  %92 = fmul <2 x double> %83, %91
  %93 = fadd <2 x double> %89, %92
  %94 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %95 = load double, double* %94, align 8
  %96 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %97 = load double, double* %96, align 8
  %98 = fmul double %97, %78
  %99 = fadd double %95, %98
  %100 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %101 = load double, double* %100, align 8
  %102 = fmul double %101, %79
  %103 = fadd double %99, %102
  %104 = fcmp une double %103, 1.000000e+00
  %105 = fcmp une double %103, 0.000000e+00
  %106 = and i1 %104, %105
  br i1 %106, label %107, label %111

107:                                              ; preds = %66
  %108 = insertelement <2 x double> undef, double %103, i32 0
  %109 = shufflevector <2 x double> %108, <2 x double> undef, <2 x i32> zeroinitializer
  %110 = fdiv <2 x double> %93, %109
  br label %111

111:                                              ; preds = %66, %107
  %112 = phi <2 x double> [ %110, %107 ], [ %93, %66 ]
  %113 = fptrunc <2 x double> %112 to <2 x float>
  %114 = bitcast %"class.blink::FloatQuad"* %3 to <2 x float>*
  store <2 x float> %113, <2 x float>* %114, align 8
  %115 = fpext float %72 to double
  %116 = insertelement <2 x double> undef, double %115, i32 0
  %117 = shufflevector <2 x double> %116, <2 x double> undef, <2 x i32> zeroinitializer
  %118 = fmul <2 x double> %5, %117
  %119 = fadd <2 x double> %85, %118
  %120 = fadd <2 x double> %119, %92
  %121 = fmul double %97, %115
  %122 = fadd double %95, %121
  %123 = fadd double %122, %102
  %124 = fcmp une double %123, 1.000000e+00
  %125 = fcmp une double %123, 0.000000e+00
  %126 = and i1 %124, %125
  br i1 %126, label %127, label %131

127:                                              ; preds = %111
  %128 = insertelement <2 x double> undef, double %123, i32 0
  %129 = shufflevector <2 x double> %128, <2 x double> undef, <2 x i32> zeroinitializer
  %130 = fdiv <2 x double> %120, %129
  br label %131

131:                                              ; preds = %111, %127
  %132 = phi <2 x double> [ %130, %127 ], [ %120, %111 ]
  %133 = fptrunc <2 x double> %132 to <2 x float>
  %134 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %3, i64 0, i32 1
  %135 = bitcast %"class.blink::FloatPoint"* %134 to <2 x float>*
  store <2 x float> %133, <2 x float>* %135, align 8
  %136 = fpext float %77 to double
  %137 = insertelement <2 x double> undef, double %136, i32 0
  %138 = shufflevector <2 x double> %137, <2 x double> undef, <2 x i32> zeroinitializer
  %139 = fmul <2 x double> %83, %138
  %140 = fadd <2 x double> %119, %139
  %141 = fmul double %101, %136
  %142 = fadd double %122, %141
  %143 = fcmp une double %142, 1.000000e+00
  %144 = fcmp une double %142, 0.000000e+00
  %145 = and i1 %143, %144
  br i1 %145, label %146, label %150

146:                                              ; preds = %131
  %147 = insertelement <2 x double> undef, double %142, i32 0
  %148 = shufflevector <2 x double> %147, <2 x double> undef, <2 x i32> zeroinitializer
  %149 = fdiv <2 x double> %140, %148
  br label %150

150:                                              ; preds = %131, %146
  %151 = phi <2 x double> [ %149, %146 ], [ %140, %131 ]
  %152 = fptrunc <2 x double> %151 to <2 x float>
  %153 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %3, i64 0, i32 2
  %154 = bitcast %"class.blink::FloatPoint"* %153 to <2 x float>*
  store <2 x float> %152, <2 x float>* %154, align 8
  %155 = fadd <2 x double> %89, %139
  %156 = fadd double %99, %141
  %157 = fcmp une double %156, 1.000000e+00
  %158 = fcmp une double %156, 0.000000e+00
  %159 = and i1 %157, %158
  br i1 %159, label %160, label %164

160:                                              ; preds = %150
  %161 = insertelement <2 x double> undef, double %156, i32 0
  %162 = shufflevector <2 x double> %161, <2 x double> undef, <2 x i32> zeroinitializer
  %163 = fdiv <2 x double> %155, %162
  br label %164

164:                                              ; preds = %150, %160
  %165 = phi <2 x double> [ %163, %160 ], [ %155, %150 ]
  %166 = fptrunc <2 x double> %165 to <2 x float>
  %167 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %3, i64 0, i32 3
  %168 = bitcast %"class.blink::FloatPoint"* %167 to <2 x float>*
  store <2 x float> %166, <2 x float>* %168, align 8
  %169 = call { <2 x float>, <2 x float> } @_ZNK5blink9FloatQuad11BoundingBoxEv(%"class.blink::FloatQuad"* nonnull %3) #19
  %170 = extractvalue { <2 x float>, <2 x float> } %169, 0
  %171 = extractvalue { <2 x float>, <2 x float> } %169, 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %67) #19
  br label %172

172:                                              ; preds = %164, %55
  %173 = phi <2 x float> [ %65, %55 ], [ %170, %164 ]
  %174 = phi <2 x float> [ %60, %55 ], [ %171, %164 ]
  %175 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %173, 0
  %176 = insertvalue { <2 x float>, <2 x float> } %175, <2 x float> %174, 1
  ret { <2 x float>, <2 x float> } %176
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK5blink20TransformationMatrix7MapRectERKNS_10LayoutRectE(%"class.blink::TransformationMatrix"*, %"class.blink::LayoutRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %3 = alloca { <2 x float>, <2 x float> }, align 8
  %4 = bitcast { <2 x float>, <2 x float> }* %3 to %"class.blink::FloatRect"*
  %5 = bitcast { <2 x float>, <2 x float> }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #19
  %6 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 0, i32 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = sitofp i32 %7 to float
  %9 = fmul float %8, 1.562500e-02
  %10 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 0, i32 1, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = sitofp i32 %11 to float
  %13 = fmul float %12, 1.562500e-02
  %14 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = sitofp i32 %15 to float
  %17 = fmul float %16, 1.562500e-02
  %18 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 1, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = sitofp i32 %19 to float
  %21 = fmul float %20, 1.562500e-02
  %22 = insertelement <2 x float> undef, float %9, i32 0
  %23 = insertelement <2 x float> %22, float %13, i32 1
  %24 = insertelement <2 x float> undef, float %17, i32 0
  %25 = insertelement <2 x float> %24, float %21, i32 1
  %26 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %3, i64 0, i32 0
  store <2 x float> %23, <2 x float>* %26, align 8
  %27 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %3, i64 0, i32 1
  store <2 x float> %25, <2 x float>* %27, align 8
  %28 = call { <2 x float>, <2 x float> } @_ZNK5blink20TransformationMatrix7MapRectERKNS_9FloatRectE(%"class.blink::TransformationMatrix"* %0, %"class.blink::FloatRect"* nonnull dereferenceable(16) %4)
  %29 = extractvalue { <2 x float>, <2 x float> } %28, 0
  %30 = extractvalue { <2 x float>, <2 x float> } %28, 1
  %31 = extractelement <2 x float> %29, i32 0
  %32 = fmul float %31, 6.400000e+01
  %33 = tail call float @llvm.floor.f32(float %32) #19
  %34 = fcmp ult float %33, 0xC1E0000000000000
  %35 = fcmp ugt float %33, 0x41DFFFFFE0000000
  %36 = fcmp ogt float %33, 0xC1E0000000000000
  %37 = select i1 %36, float %33, float 0xC1E0000000000000
  %38 = fptosi float %37 to i32
  %39 = select i1 %34, i32 0, i32 2147483647
  %40 = select i1 %35, i32 %39, i32 %38
  %41 = extractelement <2 x float> %29, i32 1
  %42 = fmul float %41, 6.400000e+01
  %43 = tail call float @llvm.floor.f32(float %42) #19
  %44 = fcmp ult float %43, 0xC1E0000000000000
  %45 = fcmp ugt float %43, 0x41DFFFFFE0000000
  %46 = fcmp ogt float %43, 0xC1E0000000000000
  %47 = select i1 %46, float %43, float 0xC1E0000000000000
  %48 = fptosi float %47 to i32
  %49 = select i1 %44, i32 0, i32 2147483647
  %50 = select i1 %45, i32 %49, i32 %48
  %51 = extractelement <2 x float> %30, i32 0
  %52 = fadd float %31, %51
  %53 = fmul float %52, 6.400000e+01
  %54 = tail call float @llvm.ceil.f32(float %53) #19
  %55 = fcmp ult float %54, 0xC1E0000000000000
  %56 = fcmp ugt float %54, 0x41DFFFFFE0000000
  %57 = fcmp ogt float %54, 0xC1E0000000000000
  %58 = select i1 %57, float %54, float 0xC1E0000000000000
  %59 = fptosi float %58 to i32
  %60 = select i1 %55, i32 0, i32 2147483647
  %61 = select i1 %56, i32 %60, i32 %59
  %62 = extractelement <2 x float> %30, i32 1
  %63 = fadd float %41, %62
  %64 = fmul float %63, 6.400000e+01
  %65 = tail call float @llvm.ceil.f32(float %64) #19
  %66 = fcmp ult float %65, 0xC1E0000000000000
  %67 = fcmp ugt float %65, 0x41DFFFFFE0000000
  %68 = fcmp ogt float %65, 0xC1E0000000000000
  %69 = select i1 %68, float %65, float 0xC1E0000000000000
  %70 = fptosi float %69 to i32
  %71 = select i1 %66, i32 0, i32 2147483647
  %72 = select i1 %67, i32 %71, i32 %70
  %73 = icmp sgt i32 %40, -1
  %74 = select i1 %73, i32 -2147483648, i32 2147483647
  %75 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %61, i32 %40) #19
  %76 = extractvalue { i32, i1 } %75, 1
  %77 = extractvalue { i32, i1 } %75, 0
  %78 = select i1 %76, i32 %74, i32 %77, !prof !12
  %79 = icmp sgt i32 %50, -1
  %80 = select i1 %79, i32 -2147483648, i32 2147483647
  %81 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %72, i32 %50) #19
  %82 = extractvalue { i32, i1 } %81, 1
  %83 = extractvalue { i32, i1 } %81, 0
  %84 = select i1 %82, i32 %80, i32 %83, !prof !12
  %85 = zext i32 %50 to i64
  %86 = shl nuw i64 %85, 32
  %87 = zext i32 %40 to i64
  %88 = or i64 %86, %87
  %89 = insertvalue { i64, i64 } undef, i64 %88, 0
  %90 = zext i32 %84 to i64
  %91 = shl nuw i64 %90, 32
  %92 = zext i32 %78 to i64
  %93 = or i64 %91, %92
  %94 = insertvalue { i64, i64 } %89, i64 %93, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #19
  ret { i64, i64 } %94
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink20TransformationMatrix7MapQuadERKNS_9FloatQuadE(%"class.blink::FloatQuad"* noalias nocapture sret, %"class.blink::TransformationMatrix"* readonly, %"class.blink::FloatQuad"* nocapture readonly dereferenceable(32)) local_unnamed_addr #5 align 2 {
  %4 = bitcast %"class.blink::TransformationMatrix"* %1 to <2 x double>*
  %5 = load <2 x double>, <2 x double>* %4, align 8
  %6 = extractelement <2 x double> %5, i32 0
  %7 = fcmp oeq double %6, 1.000000e+00
  %8 = extractelement <2 x double> %5, i32 1
  %9 = fcmp oeq double %8, 0.000000e+00
  %10 = and i1 %7, %9
  br i1 %10, label %11, label %73

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 2
  %13 = load double, double* %12, align 8
  %14 = fcmp oeq double %13, 0.000000e+00
  br i1 %14, label %15, label %73

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 3
  %17 = load double, double* %16, align 8
  %18 = fcmp oeq double %17, 0.000000e+00
  br i1 %18, label %19, label %73

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 0
  %21 = load double, double* %20, align 8
  %22 = fcmp oeq double %21, 0.000000e+00
  br i1 %22, label %23, label %73

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 1
  %25 = load double, double* %24, align 8
  %26 = fcmp oeq double %25, 1.000000e+00
  br i1 %26, label %27, label %73

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 2
  %29 = load double, double* %28, align 8
  %30 = fcmp oeq double %29, 0.000000e+00
  br i1 %30, label %31, label %73

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 3
  %33 = load double, double* %32, align 8
  %34 = fcmp oeq double %33, 0.000000e+00
  br i1 %34, label %35, label %73

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 0
  %37 = load double, double* %36, align 8
  %38 = fcmp oeq double %37, 0.000000e+00
  br i1 %38, label %39, label %73

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 1
  %41 = load double, double* %40, align 8
  %42 = fcmp oeq double %41, 0.000000e+00
  br i1 %42, label %43, label %73

43:                                               ; preds = %39
  %44 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 2
  %45 = load double, double* %44, align 8
  %46 = fcmp oeq double %45, 1.000000e+00
  br i1 %46, label %47, label %73

47:                                               ; preds = %43
  %48 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 3
  %49 = load double, double* %48, align 8
  %50 = fcmp oeq double %49, 0.000000e+00
  br i1 %50, label %51, label %73

51:                                               ; preds = %47
  %52 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 3
  %53 = load double, double* %52, align 8
  %54 = fcmp oeq double %53, 1.000000e+00
  br i1 %54, label %55, label %73

55:                                               ; preds = %51
  %56 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 2, i32 0
  %57 = bitcast %"class.blink::FloatQuad"* %0 to i8*
  %58 = bitcast %"class.blink::FloatQuad"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %57, i8* align 4 %58, i64 32, i1 false)
  %59 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 0
  %60 = bitcast double* %59 to <2 x double>*
  %61 = load <2 x double>, <2 x double>* %60, align 8
  %62 = fptrunc <2 x double> %61 to <2 x float>
  %63 = shufflevector <2 x float> %62, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %64 = bitcast %"class.blink::FloatQuad"* %0 to <4 x float>*
  %65 = load <4 x float>, <4 x float>* %64, align 4
  %66 = fadd <4 x float> %65, %63
  %67 = bitcast %"class.blink::FloatQuad"* %0 to <4 x float>*
  store <4 x float> %66, <4 x float>* %67, align 4
  %68 = bitcast float* %56 to <4 x float>*
  %69 = load <4 x float>, <4 x float>* %68, align 4
  %70 = shufflevector <2 x float> %62, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %71 = fadd <4 x float> %69, %70
  %72 = bitcast float* %56 to <4 x float>*
  store <4 x float> %71, <4 x float>* %72, align 4
  br label %207

73:                                               ; preds = %3, %11, %15, %19, %23, %27, %31, %35, %39, %43, %47, %51
  %74 = bitcast %"class.blink::FloatQuad"* %2 to <2 x float>*
  %75 = load <2 x float>, <2 x float>* %74, align 4
  %76 = fpext <2 x float> %75 to <2 x double>
  %77 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 0
  %78 = bitcast double* %77 to <2 x double>*
  %79 = load <2 x double>, <2 x double>* %78, align 8
  %80 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 0
  %81 = bitcast double* %80 to <2 x double>*
  %82 = load <2 x double>, <2 x double>* %81, align 8
  %83 = shufflevector <2 x double> %76, <2 x double> undef, <2 x i32> zeroinitializer
  %84 = fmul <2 x double> %5, %83
  %85 = fadd <2 x double> %79, %84
  %86 = shufflevector <2 x double> %76, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %87 = fmul <2 x double> %82, %86
  %88 = fadd <2 x double> %87, %85
  %89 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 3
  %90 = load double, double* %89, align 8
  %91 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 3
  %92 = load double, double* %91, align 8
  %93 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 3
  %94 = load double, double* %93, align 8
  %95 = insertelement <2 x double> undef, double %92, i32 0
  %96 = insertelement <2 x double> %95, double %94, i32 1
  %97 = fmul <2 x double> %96, %76
  %98 = extractelement <2 x double> %97, i32 0
  %99 = fadd double %90, %98
  %100 = extractelement <2 x double> %97, i32 1
  %101 = fadd double %99, %100
  %102 = fcmp une double %101, 1.000000e+00
  %103 = fcmp une double %101, 0.000000e+00
  %104 = and i1 %102, %103
  br i1 %104, label %105, label %109

105:                                              ; preds = %73
  %106 = insertelement <2 x double> undef, double %101, i32 0
  %107 = shufflevector <2 x double> %106, <2 x double> undef, <2 x i32> zeroinitializer
  %108 = fdiv <2 x double> %88, %107
  br label %109

109:                                              ; preds = %73, %105
  %110 = phi <2 x double> [ %108, %105 ], [ %88, %73 ]
  %111 = extractelement <2 x double> %110, i32 0
  %112 = fptrunc double %111 to float
  %113 = extractelement <2 x double> %110, i32 1
  %114 = fptrunc double %113 to float
  %115 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %2, i64 0, i32 1
  %116 = bitcast %"class.blink::FloatPoint"* %115 to <2 x float>*
  %117 = load <2 x float>, <2 x float>* %116, align 4
  %118 = fpext <2 x float> %117 to <2 x double>
  %119 = shufflevector <2 x double> %118, <2 x double> undef, <2 x i32> zeroinitializer
  %120 = fmul <2 x double> %5, %119
  %121 = fadd <2 x double> %79, %120
  %122 = shufflevector <2 x double> %118, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %123 = fmul <2 x double> %82, %122
  %124 = fadd <2 x double> %123, %121
  %125 = fmul <2 x double> %96, %118
  %126 = extractelement <2 x double> %125, i32 0
  %127 = fadd double %90, %126
  %128 = extractelement <2 x double> %125, i32 1
  %129 = fadd double %128, %127
  %130 = fcmp une double %129, 1.000000e+00
  %131 = fcmp une double %129, 0.000000e+00
  %132 = and i1 %130, %131
  br i1 %132, label %133, label %137

133:                                              ; preds = %109
  %134 = insertelement <2 x double> undef, double %129, i32 0
  %135 = shufflevector <2 x double> %134, <2 x double> undef, <2 x i32> zeroinitializer
  %136 = fdiv <2 x double> %124, %135
  br label %137

137:                                              ; preds = %109, %133
  %138 = phi <2 x double> [ %136, %133 ], [ %124, %109 ]
  %139 = extractelement <2 x double> %138, i32 0
  %140 = fptrunc double %139 to float
  %141 = extractelement <2 x double> %138, i32 1
  %142 = fptrunc double %141 to float
  %143 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %2, i64 0, i32 2
  %144 = bitcast %"class.blink::FloatPoint"* %143 to <2 x float>*
  %145 = load <2 x float>, <2 x float>* %144, align 4
  %146 = fpext <2 x float> %145 to <2 x double>
  %147 = shufflevector <2 x double> %146, <2 x double> undef, <2 x i32> zeroinitializer
  %148 = fmul <2 x double> %5, %147
  %149 = fadd <2 x double> %79, %148
  %150 = shufflevector <2 x double> %146, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %151 = fmul <2 x double> %82, %150
  %152 = fadd <2 x double> %151, %149
  %153 = fmul <2 x double> %96, %146
  %154 = extractelement <2 x double> %153, i32 0
  %155 = fadd double %90, %154
  %156 = extractelement <2 x double> %153, i32 1
  %157 = fadd double %156, %155
  %158 = fcmp une double %157, 1.000000e+00
  %159 = fcmp une double %157, 0.000000e+00
  %160 = and i1 %158, %159
  br i1 %160, label %161, label %165

161:                                              ; preds = %137
  %162 = insertelement <2 x double> undef, double %157, i32 0
  %163 = shufflevector <2 x double> %162, <2 x double> undef, <2 x i32> zeroinitializer
  %164 = fdiv <2 x double> %152, %163
  br label %165

165:                                              ; preds = %137, %161
  %166 = phi <2 x double> [ %164, %161 ], [ %152, %137 ]
  %167 = extractelement <2 x double> %166, i32 0
  %168 = fptrunc double %167 to float
  %169 = extractelement <2 x double> %166, i32 1
  %170 = fptrunc double %169 to float
  %171 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %2, i64 0, i32 3
  %172 = bitcast %"class.blink::FloatPoint"* %171 to <2 x float>*
  %173 = load <2 x float>, <2 x float>* %172, align 4
  %174 = fpext <2 x float> %173 to <2 x double>
  %175 = shufflevector <2 x double> %174, <2 x double> undef, <2 x i32> zeroinitializer
  %176 = fmul <2 x double> %5, %175
  %177 = fadd <2 x double> %79, %176
  %178 = shufflevector <2 x double> %174, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %179 = fmul <2 x double> %82, %178
  %180 = fadd <2 x double> %179, %177
  %181 = fmul <2 x double> %96, %174
  %182 = extractelement <2 x double> %181, i32 0
  %183 = fadd double %90, %182
  %184 = extractelement <2 x double> %181, i32 1
  %185 = fadd double %184, %183
  %186 = fcmp une double %185, 1.000000e+00
  %187 = fcmp une double %185, 0.000000e+00
  %188 = and i1 %186, %187
  br i1 %188, label %189, label %193

189:                                              ; preds = %165
  %190 = insertelement <2 x double> undef, double %185, i32 0
  %191 = shufflevector <2 x double> %190, <2 x double> undef, <2 x i32> zeroinitializer
  %192 = fdiv <2 x double> %180, %191
  br label %193

193:                                              ; preds = %165, %189
  %194 = phi <2 x double> [ %192, %189 ], [ %180, %165 ]
  %195 = extractelement <2 x double> %194, i32 0
  %196 = fptrunc double %195 to float
  %197 = extractelement <2 x double> %194, i32 1
  %198 = fptrunc double %197 to float
  %199 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 0, i32 0
  store float %112, float* %199, align 4
  %200 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 0, i32 1
  store float %114, float* %200, align 4
  %201 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 1, i32 0
  store float %140, float* %201, align 4
  %202 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 1, i32 1
  store float %142, float* %202, align 4
  %203 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 2, i32 0
  store float %168, float* %203, align 4
  %204 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 2, i32 1
  store float %170, float* %204, align 4
  %205 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 3, i32 0
  store float %196, float* %205, align 4
  %206 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 3, i32 1
  store float %198, float* %206, align 4
  br label %207

207:                                              ; preds = %193, %55
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix7Scale3dEddd(%"class.blink::TransformationMatrix"* returned, double, double, double) local_unnamed_addr #0 align 2 {
  %5 = bitcast %"class.blink::TransformationMatrix"* %0 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  %7 = insertelement <2 x double> undef, double %1, i32 0
  %8 = shufflevector <2 x double> %7, <2 x double> undef, <2 x i32> zeroinitializer
  %9 = fmul <2 x double> %6, %8
  %10 = bitcast %"class.blink::TransformationMatrix"* %0 to <2 x double>*
  store <2 x double> %9, <2 x double>* %10, align 8
  %11 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %12 = bitcast double* %11 to <2 x double>*
  %13 = load <2 x double>, <2 x double>* %12, align 8
  %14 = fmul <2 x double> %13, %8
  %15 = bitcast double* %11 to <2 x double>*
  store <2 x double> %14, <2 x double>* %15, align 8
  %16 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %17 = bitcast double* %16 to <2 x double>*
  %18 = load <2 x double>, <2 x double>* %17, align 8
  %19 = insertelement <2 x double> undef, double %2, i32 0
  %20 = shufflevector <2 x double> %19, <2 x double> undef, <2 x i32> zeroinitializer
  %21 = fmul <2 x double> %18, %20
  %22 = bitcast double* %16 to <2 x double>*
  store <2 x double> %21, <2 x double>* %22, align 8
  %23 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %24 = bitcast double* %23 to <2 x double>*
  %25 = load <2 x double>, <2 x double>* %24, align 8
  %26 = fmul <2 x double> %25, %20
  %27 = bitcast double* %23 to <2 x double>*
  store <2 x double> %26, <2 x double>* %27, align 8
  %28 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %29 = bitcast double* %28 to <2 x double>*
  %30 = load <2 x double>, <2 x double>* %29, align 8
  %31 = insertelement <2 x double> undef, double %3, i32 0
  %32 = shufflevector <2 x double> %31, <2 x double> undef, <2 x i32> zeroinitializer
  %33 = fmul <2 x double> %30, %32
  %34 = bitcast double* %28 to <2 x double>*
  store <2 x double> %33, <2 x double>* %34, align 8
  %35 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %36 = bitcast double* %35 to <2 x double>*
  %37 = load <2 x double>, <2 x double>* %36, align 8
  %38 = fmul <2 x double> %37, %32
  %39 = bitcast double* %35 to <2 x double>*
  store <2 x double> %38, <2 x double>* %39, align 8
  ret %"class.blink::TransformationMatrix"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix8Rotate3dERKNS_8RotationE(%"class.blink::TransformationMatrix"* returned, %"struct.blink::Rotation"* nocapture readonly dereferenceable(24)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %1, i64 0, i32 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = fpext float %4 to double
  %6 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %1, i64 0, i32 0, i32 1
  %7 = load float, float* %6, align 4
  %8 = fpext float %7 to double
  %9 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %1, i64 0, i32 0, i32 2
  %10 = load float, float* %9, align 4
  %11 = fpext float %10 to double
  %12 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %1, i64 0, i32 1
  %13 = load double, double* %12, align 8
  %14 = tail call dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix8Rotate3dEdddd(%"class.blink::TransformationMatrix"* %0, double %5, double %8, double %11, double %13)
  ret %"class.blink::TransformationMatrix"* %14
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix8Rotate3dEdddd(%"class.blink::TransformationMatrix"* returned, double, double, double, double) local_unnamed_addr #8 align 2 {
  %6 = fmul double %1, %1
  %7 = fmul double %2, %2
  %8 = fadd double %6, %7
  %9 = fmul double %3, %3
  %10 = fadd double %8, %9
  %11 = tail call double @sqrt(double %10) #19
  %12 = fcmp oeq double %11, 0.000000e+00
  br i1 %12, label %177, label %13

13:                                               ; preds = %5
  %14 = fcmp une double %11, 1.000000e+00
  %15 = insertelement <2 x double> undef, double %3, i32 0
  %16 = insertelement <2 x double> %15, double %2, i32 1
  br i1 %14, label %17, label %22

17:                                               ; preds = %13
  %18 = fdiv double %1, %11
  %19 = insertelement <2 x double> undef, double %11, i32 0
  %20 = shufflevector <2 x double> %19, <2 x double> undef, <2 x i32> zeroinitializer
  %21 = fdiv <2 x double> %16, %20
  br label %22

22:                                               ; preds = %13, %17
  %23 = phi double [ %18, %17 ], [ %1, %13 ]
  %24 = phi <2 x double> [ %21, %17 ], [ %16, %13 ]
  %25 = fmul double %4, 0x3F91DF46A2529D39
  %26 = tail call double @sin(double %25) #19
  %27 = tail call double @cos(double %25) #19
  %28 = fcmp oeq double %23, 1.000000e+00
  br i1 %28, label %29, label %33

29:                                               ; preds = %22
  %30 = fsub double -0.000000e+00, %26
  %31 = insertelement <2 x double> undef, double %27, i32 0
  %32 = insertelement <2 x double> %31, double %26, i32 1
  br label %82

33:                                               ; preds = %22
  %34 = extractelement <2 x double> %24, i32 1
  %35 = fcmp oeq double %34, 1.000000e+00
  br i1 %35, label %36, label %39

36:                                               ; preds = %33
  %37 = fsub double -0.000000e+00, %26
  %38 = insertelement <2 x double> <double undef, double 0.000000e+00>, double %37, i32 0
  br label %82

39:                                               ; preds = %33
  %40 = extractelement <2 x double> %24, i32 0
  %41 = fcmp oeq double %40, 1.000000e+00
  br i1 %41, label %42, label %46

42:                                               ; preds = %39
  %43 = fsub double -0.000000e+00, %26
  %44 = insertelement <2 x double> <double 0.000000e+00, double undef>, double %43, i32 1
  %45 = insertelement <2 x double> <double undef, double 0.000000e+00>, double %27, i32 0
  br label %82

46:                                               ; preds = %39
  %47 = fsub double 1.000000e+00, %27
  %48 = fmul double %23, %23
  %49 = fmul double %48, %47
  %50 = fadd double %27, %49
  %51 = insertelement <2 x double> undef, double %23, i32 0
  %52 = shufflevector <2 x double> %51, <2 x double> undef, <2 x i32> zeroinitializer
  %53 = fmul <2 x double> %52, %24
  %54 = insertelement <2 x double> undef, double %47, i32 0
  %55 = shufflevector <2 x double> %54, <2 x double> undef, <2 x i32> zeroinitializer
  %56 = fmul <2 x double> %53, %55
  %57 = shufflevector <2 x double> %24, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %58 = extractelement <2 x double> %24, i32 0
  %59 = shufflevector <2 x double> %57, <2 x double> %24, <2 x i32> <i32 0, i32 2>
  %60 = insertelement <2 x double> undef, double %26, i32 0
  %61 = shufflevector <2 x double> %60, <2 x double> undef, <2 x i32> zeroinitializer
  %62 = fmul <2 x double> %59, %61
  %63 = extractelement <2 x double> %56, i32 1
  %64 = extractelement <2 x double> %62, i32 1
  %65 = fadd double %64, %63
  %66 = fsub <2 x double> %56, %62
  %67 = shufflevector <2 x double> %24, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %68 = fmul <2 x double> %67, %59
  %69 = fmul <2 x double> %68, %55
  %70 = fmul double %23, %26
  %71 = insertelement <2 x double> undef, double %27, i32 0
  %72 = insertelement <2 x double> %71, double %70, i32 1
  %73 = fadd <2 x double> %72, %69
  %74 = extractelement <2 x double> %56, i32 0
  %75 = extractelement <2 x double> %62, i32 0
  %76 = fadd double %75, %74
  %77 = extractelement <2 x double> %69, i32 1
  %78 = fsub double %77, %70
  %79 = fmul double %58, %58
  %80 = fmul double %79, %47
  %81 = fadd double %27, %80
  br label %82

82:                                               ; preds = %36, %46, %42, %29
  %83 = phi double [ 1.000000e+00, %29 ], [ %27, %36 ], [ %27, %42 ], [ %50, %46 ]
  %84 = phi double [ 0.000000e+00, %29 ], [ 0.000000e+00, %36 ], [ %26, %42 ], [ %65, %46 ]
  %85 = phi double [ 0.000000e+00, %29 ], [ %26, %36 ], [ 0.000000e+00, %42 ], [ %76, %46 ]
  %86 = phi double [ %30, %29 ], [ 0.000000e+00, %36 ], [ 0.000000e+00, %42 ], [ %78, %46 ]
  %87 = phi double [ %27, %29 ], [ %27, %36 ], [ 1.000000e+00, %42 ], [ %81, %46 ]
  %88 = phi <2 x double> [ zeroinitializer, %29 ], [ %38, %36 ], [ %44, %42 ], [ %66, %46 ]
  %89 = phi <2 x double> [ %32, %29 ], [ <double 1.000000e+00, double 0.000000e+00>, %36 ], [ %45, %42 ], [ %73, %46 ]
  %90 = bitcast %"class.blink::TransformationMatrix"* %0 to <2 x double>*
  %91 = load <2 x double>, <2 x double>* %90, align 1
  %92 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1
  %93 = bitcast [4 x double]* %92 to <2 x double>*
  %94 = load <2 x double>, <2 x double>* %93, align 1
  %95 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2
  %96 = bitcast [4 x double]* %95 to <2 x double>*
  %97 = load <2 x double>, <2 x double>* %96, align 1
  %98 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3
  %99 = bitcast [4 x double]* %98 to <2 x double>*
  %100 = load <2 x double>, <2 x double>* %99, align 1
  %101 = insertelement <2 x double> undef, double %83, i32 0
  %102 = shufflevector <2 x double> %101, <2 x double> undef, <2 x i32> zeroinitializer
  %103 = insertelement <2 x double> undef, double %84, i32 0
  %104 = shufflevector <2 x double> %103, <2 x double> undef, <2 x i32> zeroinitializer
  %105 = shufflevector <2 x double> %88, <2 x double> undef, <2 x i32> zeroinitializer
  %106 = fmul <2 x double> %102, %91
  %107 = fmul <2 x double> %104, %94
  %108 = fmul <2 x double> %105, %97
  %109 = fmul <2 x double> %100, zeroinitializer
  %110 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %111 = bitcast double* %110 to <2 x double>*
  %112 = load <2 x double>, <2 x double>* %111, align 1
  %113 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %114 = bitcast double* %113 to <2 x double>*
  %115 = load <2 x double>, <2 x double>* %114, align 1
  %116 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %117 = bitcast double* %116 to <2 x double>*
  %118 = load <2 x double>, <2 x double>* %117, align 1
  %119 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %120 = bitcast double* %119 to <2 x double>*
  %121 = load <2 x double>, <2 x double>* %120, align 1
  %122 = fadd <2 x double> %106, %107
  %123 = fadd <2 x double> %122, %108
  %124 = fadd <2 x double> %123, %109
  store <2 x double> %124, <2 x double>* %90, align 1
  %125 = fmul <2 x double> %102, %112
  %126 = fmul <2 x double> %104, %115
  %127 = fmul <2 x double> %105, %118
  %128 = fmul <2 x double> %121, zeroinitializer
  %129 = fadd <2 x double> %125, %126
  %130 = fadd <2 x double> %129, %127
  %131 = fadd <2 x double> %130, %128
  store <2 x double> %131, <2 x double>* %111, align 1
  %132 = shufflevector <2 x double> %88, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %133 = shufflevector <2 x double> %89, <2 x double> undef, <2 x i32> zeroinitializer
  %134 = shufflevector <2 x double> %89, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %135 = fmul <2 x double> %132, %91
  %136 = fmul <2 x double> %133, %94
  %137 = fmul <2 x double> %134, %97
  %138 = fadd <2 x double> %135, %136
  %139 = fadd <2 x double> %138, %137
  %140 = fadd <2 x double> %139, %109
  store <2 x double> %140, <2 x double>* %93, align 1
  %141 = fmul <2 x double> %132, %112
  %142 = fmul <2 x double> %133, %115
  %143 = fmul <2 x double> %134, %118
  %144 = fadd <2 x double> %141, %142
  %145 = fadd <2 x double> %144, %143
  %146 = fadd <2 x double> %145, %128
  store <2 x double> %146, <2 x double>* %114, align 1
  %147 = insertelement <2 x double> undef, double %85, i32 0
  %148 = shufflevector <2 x double> %147, <2 x double> undef, <2 x i32> zeroinitializer
  %149 = insertelement <2 x double> undef, double %86, i32 0
  %150 = shufflevector <2 x double> %149, <2 x double> undef, <2 x i32> zeroinitializer
  %151 = insertelement <2 x double> undef, double %87, i32 0
  %152 = shufflevector <2 x double> %151, <2 x double> undef, <2 x i32> zeroinitializer
  %153 = fmul <2 x double> %148, %91
  %154 = fmul <2 x double> %150, %94
  %155 = fmul <2 x double> %152, %97
  %156 = fadd <2 x double> %153, %154
  %157 = fadd <2 x double> %156, %155
  %158 = fadd <2 x double> %157, %109
  store <2 x double> %158, <2 x double>* %96, align 1
  %159 = fmul <2 x double> %148, %112
  %160 = fmul <2 x double> %150, %115
  %161 = fmul <2 x double> %152, %118
  %162 = fadd <2 x double> %159, %160
  %163 = fadd <2 x double> %162, %161
  %164 = fadd <2 x double> %163, %128
  store <2 x double> %164, <2 x double>* %117, align 1
  %165 = fmul <2 x double> %91, zeroinitializer
  %166 = fmul <2 x double> %94, zeroinitializer
  %167 = fmul <2 x double> %97, zeroinitializer
  %168 = fadd <2 x double> %165, %166
  %169 = fadd <2 x double> %168, %167
  %170 = fadd <2 x double> %100, %169
  store <2 x double> %170, <2 x double>* %99, align 1
  %171 = fmul <2 x double> %112, zeroinitializer
  %172 = fmul <2 x double> %115, zeroinitializer
  %173 = fmul <2 x double> %118, zeroinitializer
  %174 = fadd <2 x double> %171, %172
  %175 = fadd <2 x double> %174, %173
  %176 = fadd <2 x double> %121, %175
  store <2 x double> %176, <2 x double>* %120, align 1
  br label %177

177:                                              ; preds = %5, %82
  ret %"class.blink::TransformationMatrix"* %0
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare double @sin(double) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare double @cos(double) local_unnamed_addr #9

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix8MultiplyERKS0_(%"class.blink::TransformationMatrix"* returned, %"class.blink::TransformationMatrix"* nocapture readonly dereferenceable(128)) local_unnamed_addr #10 align 2 {
  %3 = bitcast %"class.blink::TransformationMatrix"* %0 to <2 x double>*
  %4 = load <2 x double>, <2 x double>* %3, align 1
  %5 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1
  %6 = bitcast [4 x double]* %5 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 1
  %8 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2
  %9 = bitcast [4 x double]* %8 to <2 x double>*
  %10 = load <2 x double>, <2 x double>* %9, align 1
  %11 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3
  %12 = bitcast [4 x double]* %11 to <2 x double>*
  %13 = load <2 x double>, <2 x double>* %12, align 1
  %14 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 0
  %15 = load double, double* %14, align 8
  %16 = insertelement <2 x double> undef, double %15, i32 0
  %17 = shufflevector <2 x double> %16, <2 x double> undef, <2 x i32> zeroinitializer
  %18 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 1
  %19 = load double, double* %18, align 8
  %20 = insertelement <2 x double> undef, double %19, i32 0
  %21 = shufflevector <2 x double> %20, <2 x double> undef, <2 x i32> zeroinitializer
  %22 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 2
  %23 = load double, double* %22, align 8
  %24 = insertelement <2 x double> undef, double %23, i32 0
  %25 = shufflevector <2 x double> %24, <2 x double> undef, <2 x i32> zeroinitializer
  %26 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 3
  %27 = load double, double* %26, align 8
  %28 = insertelement <2 x double> undef, double %27, i32 0
  %29 = shufflevector <2 x double> %28, <2 x double> undef, <2 x i32> zeroinitializer
  %30 = fmul <2 x double> %4, %17
  %31 = fmul <2 x double> %7, %21
  %32 = fmul <2 x double> %10, %25
  %33 = fmul <2 x double> %13, %29
  %34 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %35 = bitcast double* %34 to <2 x double>*
  %36 = load <2 x double>, <2 x double>* %35, align 1
  %37 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %38 = bitcast double* %37 to <2 x double>*
  %39 = load <2 x double>, <2 x double>* %38, align 1
  %40 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %41 = bitcast double* %40 to <2 x double>*
  %42 = load <2 x double>, <2 x double>* %41, align 1
  %43 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %44 = bitcast double* %43 to <2 x double>*
  %45 = load <2 x double>, <2 x double>* %44, align 1
  %46 = fadd <2 x double> %30, %31
  %47 = fadd <2 x double> %46, %32
  %48 = fadd <2 x double> %47, %33
  store <2 x double> %48, <2 x double>* %3, align 1
  %49 = fmul <2 x double> %17, %36
  %50 = fmul <2 x double> %21, %39
  %51 = fmul <2 x double> %25, %42
  %52 = fmul <2 x double> %29, %45
  %53 = fadd <2 x double> %49, %50
  %54 = fadd <2 x double> %53, %51
  %55 = fadd <2 x double> %54, %52
  store <2 x double> %55, <2 x double>* %35, align 1
  %56 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 0
  %57 = load double, double* %56, align 8
  %58 = insertelement <2 x double> undef, double %57, i32 0
  %59 = shufflevector <2 x double> %58, <2 x double> undef, <2 x i32> zeroinitializer
  %60 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 1
  %61 = load double, double* %60, align 8
  %62 = insertelement <2 x double> undef, double %61, i32 0
  %63 = shufflevector <2 x double> %62, <2 x double> undef, <2 x i32> zeroinitializer
  %64 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 2
  %65 = load double, double* %64, align 8
  %66 = insertelement <2 x double> undef, double %65, i32 0
  %67 = shufflevector <2 x double> %66, <2 x double> undef, <2 x i32> zeroinitializer
  %68 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 3
  %69 = load double, double* %68, align 8
  %70 = insertelement <2 x double> undef, double %69, i32 0
  %71 = shufflevector <2 x double> %70, <2 x double> undef, <2 x i32> zeroinitializer
  %72 = fmul <2 x double> %4, %59
  %73 = fmul <2 x double> %7, %63
  %74 = fmul <2 x double> %10, %67
  %75 = fmul <2 x double> %13, %71
  %76 = fadd <2 x double> %72, %73
  %77 = fadd <2 x double> %76, %74
  %78 = fadd <2 x double> %77, %75
  store <2 x double> %78, <2 x double>* %6, align 1
  %79 = fmul <2 x double> %36, %59
  %80 = fmul <2 x double> %39, %63
  %81 = fmul <2 x double> %42, %67
  %82 = fmul <2 x double> %45, %71
  %83 = fadd <2 x double> %79, %80
  %84 = fadd <2 x double> %83, %81
  %85 = fadd <2 x double> %84, %82
  store <2 x double> %85, <2 x double>* %38, align 1
  %86 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 0
  %87 = load double, double* %86, align 8
  %88 = insertelement <2 x double> undef, double %87, i32 0
  %89 = shufflevector <2 x double> %88, <2 x double> undef, <2 x i32> zeroinitializer
  %90 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 1
  %91 = load double, double* %90, align 8
  %92 = insertelement <2 x double> undef, double %91, i32 0
  %93 = shufflevector <2 x double> %92, <2 x double> undef, <2 x i32> zeroinitializer
  %94 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 2
  %95 = load double, double* %94, align 8
  %96 = insertelement <2 x double> undef, double %95, i32 0
  %97 = shufflevector <2 x double> %96, <2 x double> undef, <2 x i32> zeroinitializer
  %98 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 3
  %99 = load double, double* %98, align 8
  %100 = insertelement <2 x double> undef, double %99, i32 0
  %101 = shufflevector <2 x double> %100, <2 x double> undef, <2 x i32> zeroinitializer
  %102 = fmul <2 x double> %4, %89
  %103 = fmul <2 x double> %7, %93
  %104 = fmul <2 x double> %10, %97
  %105 = fmul <2 x double> %13, %101
  %106 = fadd <2 x double> %102, %103
  %107 = fadd <2 x double> %106, %104
  %108 = fadd <2 x double> %107, %105
  store <2 x double> %108, <2 x double>* %9, align 1
  %109 = fmul <2 x double> %36, %89
  %110 = fmul <2 x double> %39, %93
  %111 = fmul <2 x double> %42, %97
  %112 = fmul <2 x double> %45, %101
  %113 = fadd <2 x double> %109, %110
  %114 = fadd <2 x double> %113, %111
  %115 = fadd <2 x double> %114, %112
  store <2 x double> %115, <2 x double>* %41, align 1
  %116 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 0
  %117 = load double, double* %116, align 8
  %118 = insertelement <2 x double> undef, double %117, i32 0
  %119 = shufflevector <2 x double> %118, <2 x double> undef, <2 x i32> zeroinitializer
  %120 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 1
  %121 = load double, double* %120, align 8
  %122 = insertelement <2 x double> undef, double %121, i32 0
  %123 = shufflevector <2 x double> %122, <2 x double> undef, <2 x i32> zeroinitializer
  %124 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 2
  %125 = load double, double* %124, align 8
  %126 = insertelement <2 x double> undef, double %125, i32 0
  %127 = shufflevector <2 x double> %126, <2 x double> undef, <2 x i32> zeroinitializer
  %128 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 3
  %129 = load double, double* %128, align 8
  %130 = insertelement <2 x double> undef, double %129, i32 0
  %131 = shufflevector <2 x double> %130, <2 x double> undef, <2 x i32> zeroinitializer
  %132 = fmul <2 x double> %4, %119
  %133 = fmul <2 x double> %7, %123
  %134 = fmul <2 x double> %10, %127
  %135 = fmul <2 x double> %13, %131
  %136 = fadd <2 x double> %132, %133
  %137 = fadd <2 x double> %136, %134
  %138 = fadd <2 x double> %137, %135
  store <2 x double> %138, <2 x double>* %12, align 1
  %139 = fmul <2 x double> %36, %119
  %140 = fmul <2 x double> %39, %123
  %141 = fmul <2 x double> %42, %127
  %142 = fmul <2 x double> %45, %131
  %143 = fadd <2 x double> %139, %140
  %144 = fadd <2 x double> %143, %141
  %145 = fadd <2 x double> %144, %142
  store <2 x double> %145, <2 x double>* %44, align 1
  ret %"class.blink::TransformationMatrix"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix8Rotate3dEddd(%"class.blink::TransformationMatrix"* returned, double, double, double) local_unnamed_addr #8 align 2 {
  %5 = fmul double %1, 0x3F91DF46A2529D39
  %6 = fmul double %2, 0x3F91DF46A2529D39
  %7 = fmul double %3, 0x3F91DF46A2529D39
  %8 = tail call double @sin(double %7) #19
  %9 = tail call double @cos(double %7) #19
  %10 = insertelement <2 x double> undef, double %9, i32 0
  %11 = insertelement <2 x double> %10, double %8, i32 1
  %12 = fsub double -0.000000e+00, %8
  %13 = insertelement <2 x double> undef, double %12, i32 0
  %14 = insertelement <2 x double> %13, double %9, i32 1
  %15 = tail call double @sin(double %6) #19
  %16 = tail call double @cos(double %6) #19
  %17 = fsub double -0.000000e+00, %15
  %18 = insertelement <2 x double> undef, double %16, i32 0
  %19 = shufflevector <2 x double> %18, <2 x double> undef, <2 x i32> zeroinitializer
  %20 = insertelement <2 x double> undef, double %17, i32 0
  %21 = shufflevector <2 x double> %20, <2 x double> undef, <2 x i32> zeroinitializer
  %22 = fmul <2 x double> %11, %19
  %23 = fmul <2 x double> %14, zeroinitializer
  %24 = fmul <2 x double> %21, zeroinitializer
  %25 = fadd <2 x double> %23, %22
  %26 = fadd <2 x double> %24, %25
  %27 = fadd <2 x double> %26, zeroinitializer
  %28 = fmul <2 x double> %19, zeroinitializer
  %29 = fmul <2 x double> %21, <double 1.000000e+00, double 0.000000e+00>
  %30 = fadd <2 x double> %28, zeroinitializer
  %31 = fadd <2 x double> %29, %30
  %32 = fadd <2 x double> %31, zeroinitializer
  %33 = fmul <2 x double> %11, zeroinitializer
  %34 = fadd <2 x double> %14, %33
  %35 = fadd <2 x double> %34, zeroinitializer
  %36 = insertelement <2 x double> undef, double %15, i32 0
  %37 = shufflevector <2 x double> %36, <2 x double> undef, <2 x i32> zeroinitializer
  %38 = fmul <2 x double> %11, %37
  %39 = fadd <2 x double> %23, %38
  %40 = fadd <2 x double> %39, %28
  %41 = fadd <2 x double> %40, zeroinitializer
  %42 = fmul <2 x double> %37, zeroinitializer
  %43 = fmul <2 x double> %19, <double 1.000000e+00, double 0.000000e+00>
  %44 = fadd <2 x double> %42, zeroinitializer
  %45 = fadd <2 x double> %44, %43
  %46 = fadd <2 x double> %45, zeroinitializer
  %47 = fadd <2 x double> %23, %33
  %48 = fadd <2 x double> %47, zeroinitializer
  %49 = tail call double @sin(double %5) #19
  %50 = tail call double @cos(double %5) #19
  %51 = fsub double -0.000000e+00, %49
  %52 = fmul <2 x double> %35, zeroinitializer
  %53 = fmul <2 x double> %41, zeroinitializer
  %54 = fmul <2 x double> %48, zeroinitializer
  %55 = fadd <2 x double> %52, %27
  %56 = fadd <2 x double> %53, %55
  %57 = fadd <2 x double> %54, %56
  %58 = fmul <2 x double> %46, zeroinitializer
  %59 = fadd <2 x double> %32, %58
  %60 = fadd <2 x double> %59, zeroinitializer
  %61 = insertelement <2 x double> undef, double %50, i32 0
  %62 = shufflevector <2 x double> %61, <2 x double> undef, <2 x i32> zeroinitializer
  %63 = insertelement <2 x double> undef, double %49, i32 0
  %64 = shufflevector <2 x double> %63, <2 x double> undef, <2 x i32> zeroinitializer
  %65 = fmul <2 x double> %27, zeroinitializer
  %66 = fmul <2 x double> %35, %62
  %67 = fmul <2 x double> %64, %41
  %68 = fadd <2 x double> %66, %65
  %69 = fadd <2 x double> %67, %68
  %70 = fadd <2 x double> %54, %69
  %71 = fmul <2 x double> %32, zeroinitializer
  %72 = fmul <2 x double> %62, zeroinitializer
  %73 = fmul <2 x double> %64, %46
  %74 = fadd <2 x double> %72, %71
  %75 = fadd <2 x double> %73, %74
  %76 = fadd <2 x double> %75, zeroinitializer
  %77 = insertelement <2 x double> undef, double %51, i32 0
  %78 = shufflevector <2 x double> %77, <2 x double> undef, <2 x i32> zeroinitializer
  %79 = fmul <2 x double> %35, %78
  %80 = fmul <2 x double> %62, %41
  %81 = fadd <2 x double> %79, %65
  %82 = fadd <2 x double> %80, %81
  %83 = fadd <2 x double> %54, %82
  %84 = fmul <2 x double> %78, zeroinitializer
  %85 = fmul <2 x double> %62, %46
  %86 = fadd <2 x double> %84, %71
  %87 = fadd <2 x double> %85, %86
  %88 = fadd <2 x double> %87, zeroinitializer
  %89 = fadd <2 x double> %52, %65
  %90 = fadd <2 x double> %53, %89
  %91 = fadd <2 x double> %48, %90
  %92 = fadd <2 x double> %71, zeroinitializer
  %93 = fadd <2 x double> %58, %92
  %94 = fadd <2 x double> %93, <double 0.000000e+00, double 1.000000e+00>
  %95 = bitcast %"class.blink::TransformationMatrix"* %0 to <2 x double>*
  %96 = load <2 x double>, <2 x double>* %95, align 1
  %97 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1
  %98 = bitcast [4 x double]* %97 to <2 x double>*
  %99 = load <2 x double>, <2 x double>* %98, align 1
  %100 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2
  %101 = bitcast [4 x double]* %100 to <2 x double>*
  %102 = load <2 x double>, <2 x double>* %101, align 1
  %103 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3
  %104 = bitcast [4 x double]* %103 to <2 x double>*
  %105 = load <2 x double>, <2 x double>* %104, align 1
  %106 = shufflevector <2 x double> %57, <2 x double> undef, <2 x i32> zeroinitializer
  %107 = shufflevector <2 x double> %57, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %108 = shufflevector <2 x double> %60, <2 x double> undef, <2 x i32> zeroinitializer
  %109 = shufflevector <2 x double> %60, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %110 = fmul <2 x double> %96, %106
  %111 = fmul <2 x double> %99, %107
  %112 = fmul <2 x double> %102, %108
  %113 = fmul <2 x double> %105, %109
  %114 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %115 = bitcast double* %114 to <2 x double>*
  %116 = load <2 x double>, <2 x double>* %115, align 1
  %117 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %118 = bitcast double* %117 to <2 x double>*
  %119 = load <2 x double>, <2 x double>* %118, align 1
  %120 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %121 = bitcast double* %120 to <2 x double>*
  %122 = load <2 x double>, <2 x double>* %121, align 1
  %123 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %124 = bitcast double* %123 to <2 x double>*
  %125 = load <2 x double>, <2 x double>* %124, align 1
  %126 = fadd <2 x double> %110, %111
  %127 = fadd <2 x double> %112, %126
  %128 = fadd <2 x double> %113, %127
  store <2 x double> %128, <2 x double>* %95, align 1
  %129 = fmul <2 x double> %116, %106
  %130 = fmul <2 x double> %119, %107
  %131 = fmul <2 x double> %108, %122
  %132 = fmul <2 x double> %109, %125
  %133 = fadd <2 x double> %129, %130
  %134 = fadd <2 x double> %131, %133
  %135 = fadd <2 x double> %132, %134
  store <2 x double> %135, <2 x double>* %115, align 1
  %136 = shufflevector <2 x double> %70, <2 x double> undef, <2 x i32> zeroinitializer
  %137 = shufflevector <2 x double> %70, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %138 = shufflevector <2 x double> %76, <2 x double> undef, <2 x i32> zeroinitializer
  %139 = shufflevector <2 x double> %76, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %140 = fmul <2 x double> %96, %136
  %141 = fmul <2 x double> %99, %137
  %142 = fmul <2 x double> %102, %138
  %143 = fmul <2 x double> %105, %139
  %144 = fadd <2 x double> %140, %141
  %145 = fadd <2 x double> %142, %144
  %146 = fadd <2 x double> %143, %145
  store <2 x double> %146, <2 x double>* %98, align 1
  %147 = fmul <2 x double> %116, %136
  %148 = fmul <2 x double> %119, %137
  %149 = fmul <2 x double> %122, %138
  %150 = fmul <2 x double> %125, %139
  %151 = fadd <2 x double> %147, %148
  %152 = fadd <2 x double> %149, %151
  %153 = fadd <2 x double> %150, %152
  store <2 x double> %153, <2 x double>* %118, align 1
  %154 = shufflevector <2 x double> %83, <2 x double> undef, <2 x i32> zeroinitializer
  %155 = shufflevector <2 x double> %83, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %156 = shufflevector <2 x double> %88, <2 x double> undef, <2 x i32> zeroinitializer
  %157 = shufflevector <2 x double> %88, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %158 = fmul <2 x double> %96, %154
  %159 = fmul <2 x double> %99, %155
  %160 = fmul <2 x double> %102, %156
  %161 = fmul <2 x double> %105, %157
  %162 = fadd <2 x double> %158, %159
  %163 = fadd <2 x double> %160, %162
  %164 = fadd <2 x double> %161, %163
  store <2 x double> %164, <2 x double>* %101, align 1
  %165 = fmul <2 x double> %116, %154
  %166 = fmul <2 x double> %119, %155
  %167 = fmul <2 x double> %122, %156
  %168 = fmul <2 x double> %125, %157
  %169 = fadd <2 x double> %165, %166
  %170 = fadd <2 x double> %167, %169
  %171 = fadd <2 x double> %168, %170
  store <2 x double> %171, <2 x double>* %121, align 1
  %172 = shufflevector <2 x double> %91, <2 x double> undef, <2 x i32> zeroinitializer
  %173 = shufflevector <2 x double> %91, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %174 = shufflevector <2 x double> %94, <2 x double> undef, <2 x i32> zeroinitializer
  %175 = shufflevector <2 x double> %94, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %176 = fmul <2 x double> %96, %172
  %177 = fmul <2 x double> %99, %173
  %178 = fmul <2 x double> %102, %174
  %179 = fmul <2 x double> %105, %175
  %180 = fadd <2 x double> %176, %177
  %181 = fadd <2 x double> %178, %180
  %182 = fadd <2 x double> %179, %181
  store <2 x double> %182, <2 x double>* %104, align 1
  %183 = fmul <2 x double> %116, %172
  %184 = fmul <2 x double> %119, %173
  %185 = fmul <2 x double> %122, %174
  %186 = fmul <2 x double> %125, %175
  %187 = fadd <2 x double> %183, %184
  %188 = fadd <2 x double> %185, %187
  %189 = fadd <2 x double> %186, %188
  store <2 x double> %189, <2 x double>* %124, align 1
  ret %"class.blink::TransformationMatrix"* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix9TranslateEdd(%"class.blink::TransformationMatrix"* returned, double, double) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %5 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %6 = bitcast %"class.blink::TransformationMatrix"* %0 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 8
  %8 = insertelement <2 x double> undef, double %1, i32 0
  %9 = shufflevector <2 x double> %8, <2 x double> undef, <2 x i32> zeroinitializer
  %10 = fmul <2 x double> %7, %9
  %11 = bitcast double* %4 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 8
  %13 = insertelement <2 x double> undef, double %2, i32 0
  %14 = shufflevector <2 x double> %13, <2 x double> undef, <2 x i32> zeroinitializer
  %15 = fmul <2 x double> %12, %14
  %16 = fadd <2 x double> %10, %15
  %17 = bitcast double* %5 to <2 x double>*
  %18 = load <2 x double>, <2 x double>* %17, align 8
  %19 = fadd <2 x double> %18, %16
  %20 = bitcast double* %5 to <2 x double>*
  store <2 x double> %19, <2 x double>* %20, align 8
  %21 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %22 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %23 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %24 = bitcast double* %21 to <2 x double>*
  %25 = load <2 x double>, <2 x double>* %24, align 8
  %26 = fmul <2 x double> %25, %9
  %27 = bitcast double* %22 to <2 x double>*
  %28 = load <2 x double>, <2 x double>* %27, align 8
  %29 = fmul <2 x double> %28, %14
  %30 = fadd <2 x double> %26, %29
  %31 = bitcast double* %23 to <2 x double>*
  %32 = load <2 x double>, <2 x double>* %31, align 8
  %33 = fadd <2 x double> %32, %30
  %34 = bitcast double* %23 to <2 x double>*
  store <2 x double> %33, <2 x double>* %34, align 8
  ret %"class.blink::TransformationMatrix"* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix11Translate3dEddd(%"class.blink::TransformationMatrix"* returned, double, double, double) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %6 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %7 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %8 = bitcast %"class.blink::TransformationMatrix"* %0 to <2 x double>*
  %9 = load <2 x double>, <2 x double>* %8, align 8
  %10 = insertelement <2 x double> undef, double %1, i32 0
  %11 = shufflevector <2 x double> %10, <2 x double> undef, <2 x i32> zeroinitializer
  %12 = fmul <2 x double> %9, %11
  %13 = bitcast double* %5 to <2 x double>*
  %14 = load <2 x double>, <2 x double>* %13, align 8
  %15 = insertelement <2 x double> undef, double %2, i32 0
  %16 = shufflevector <2 x double> %15, <2 x double> undef, <2 x i32> zeroinitializer
  %17 = fmul <2 x double> %14, %16
  %18 = fadd <2 x double> %12, %17
  %19 = bitcast double* %6 to <2 x double>*
  %20 = load <2 x double>, <2 x double>* %19, align 8
  %21 = insertelement <2 x double> undef, double %3, i32 0
  %22 = shufflevector <2 x double> %21, <2 x double> undef, <2 x i32> zeroinitializer
  %23 = fmul <2 x double> %20, %22
  %24 = fadd <2 x double> %18, %23
  %25 = bitcast double* %7 to <2 x double>*
  %26 = load <2 x double>, <2 x double>* %25, align 8
  %27 = fadd <2 x double> %26, %24
  %28 = bitcast double* %7 to <2 x double>*
  store <2 x double> %27, <2 x double>* %28, align 8
  %29 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %30 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %31 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %32 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %33 = bitcast double* %29 to <2 x double>*
  %34 = load <2 x double>, <2 x double>* %33, align 8
  %35 = fmul <2 x double> %34, %11
  %36 = bitcast double* %30 to <2 x double>*
  %37 = load <2 x double>, <2 x double>* %36, align 8
  %38 = fmul <2 x double> %37, %16
  %39 = fadd <2 x double> %35, %38
  %40 = bitcast double* %31 to <2 x double>*
  %41 = load <2 x double>, <2 x double>* %40, align 8
  %42 = fmul <2 x double> %41, %22
  %43 = fadd <2 x double> %39, %42
  %44 = bitcast double* %32 to <2 x double>*
  %45 = load <2 x double>, <2 x double>* %44, align 8
  %46 = fadd <2 x double> %45, %43
  %47 = bitcast double* %32 to <2 x double>*
  store <2 x double> %46, <2 x double>* %47, align 8
  ret %"class.blink::TransformationMatrix"* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix13PostTranslateEdd(%"class.blink::TransformationMatrix"* returned, double, double) local_unnamed_addr #0 align 2 {
  %4 = fcmp une double %1, 0.000000e+00
  br i1 %4, label %5, label %30

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %7 = load double, double* %6, align 8
  %8 = fmul double %7, %1
  %9 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 0
  %10 = load double, double* %9, align 8
  %11 = fadd double %10, %8
  store double %11, double* %9, align 8
  %12 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %13 = load double, double* %12, align 8
  %14 = fmul double %13, %1
  %15 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %16 = load double, double* %15, align 8
  %17 = fadd double %16, %14
  store double %17, double* %15, align 8
  %18 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %19 = load double, double* %18, align 8
  %20 = fmul double %19, %1
  %21 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %22 = load double, double* %21, align 8
  %23 = fadd double %22, %20
  store double %23, double* %21, align 8
  %24 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %25 = load double, double* %24, align 8
  %26 = fmul double %25, %1
  %27 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %28 = load double, double* %27, align 8
  %29 = fadd double %28, %26
  store double %29, double* %27, align 8
  br label %30

30:                                               ; preds = %5, %3
  %31 = fcmp une double %2, 0.000000e+00
  br i1 %31, label %32, label %57

32:                                               ; preds = %30
  %33 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %34 = load double, double* %33, align 8
  %35 = fmul double %34, %2
  %36 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 1
  %37 = load double, double* %36, align 8
  %38 = fadd double %37, %35
  store double %38, double* %36, align 8
  %39 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %40 = load double, double* %39, align 8
  %41 = fmul double %40, %2
  %42 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  %43 = load double, double* %42, align 8
  %44 = fadd double %43, %41
  store double %44, double* %42, align 8
  %45 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %46 = load double, double* %45, align 8
  %47 = fmul double %46, %2
  %48 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 1
  %49 = load double, double* %48, align 8
  %50 = fadd double %49, %47
  store double %50, double* %48, align 8
  %51 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %52 = load double, double* %51, align 8
  %53 = fmul double %52, %2
  %54 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 1
  %55 = load double, double* %54, align 8
  %56 = fadd double %55, %53
  store double %56, double* %54, align 8
  br label %57

57:                                               ; preds = %32, %30
  ret %"class.blink::TransformationMatrix"* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix15PostTranslate3dEddd(%"class.blink::TransformationMatrix"* returned, double, double, double) local_unnamed_addr #0 align 2 {
  %5 = fcmp une double %1, 0.000000e+00
  br i1 %5, label %6, label %31

6:                                                ; preds = %4
  %7 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %8 = load double, double* %7, align 8
  %9 = fmul double %8, %1
  %10 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 0
  %11 = load double, double* %10, align 8
  %12 = fadd double %11, %9
  store double %12, double* %10, align 8
  %13 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %14 = load double, double* %13, align 8
  %15 = fmul double %14, %1
  %16 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %17 = load double, double* %16, align 8
  %18 = fadd double %17, %15
  store double %18, double* %16, align 8
  %19 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %20 = load double, double* %19, align 8
  %21 = fmul double %20, %1
  %22 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %23 = load double, double* %22, align 8
  %24 = fadd double %23, %21
  store double %24, double* %22, align 8
  %25 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %26 = load double, double* %25, align 8
  %27 = fmul double %26, %1
  %28 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %29 = load double, double* %28, align 8
  %30 = fadd double %29, %27
  store double %30, double* %28, align 8
  br label %31

31:                                               ; preds = %6, %4
  %32 = fcmp une double %2, 0.000000e+00
  br i1 %32, label %33, label %58

33:                                               ; preds = %31
  %34 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %35 = load double, double* %34, align 8
  %36 = fmul double %35, %2
  %37 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 1
  %38 = load double, double* %37, align 8
  %39 = fadd double %38, %36
  store double %39, double* %37, align 8
  %40 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %41 = load double, double* %40, align 8
  %42 = fmul double %41, %2
  %43 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  %44 = load double, double* %43, align 8
  %45 = fadd double %44, %42
  store double %45, double* %43, align 8
  %46 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %47 = load double, double* %46, align 8
  %48 = fmul double %47, %2
  %49 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 1
  %50 = load double, double* %49, align 8
  %51 = fadd double %50, %48
  store double %51, double* %49, align 8
  %52 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %53 = load double, double* %52, align 8
  %54 = fmul double %53, %2
  %55 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 1
  %56 = load double, double* %55, align 8
  %57 = fadd double %56, %54
  store double %57, double* %55, align 8
  br label %58

58:                                               ; preds = %31, %33
  %59 = fcmp une double %3, 0.000000e+00
  br i1 %59, label %60, label %85

60:                                               ; preds = %58
  %61 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %62 = load double, double* %61, align 8
  %63 = fmul double %62, %3
  %64 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %65 = load double, double* %64, align 8
  %66 = fadd double %65, %63
  store double %66, double* %64, align 8
  %67 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %68 = load double, double* %67, align 8
  %69 = fmul double %68, %3
  %70 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %71 = load double, double* %70, align 8
  %72 = fadd double %71, %69
  store double %72, double* %70, align 8
  %73 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %74 = load double, double* %73, align 8
  %75 = fmul double %74, %3
  %76 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %77 = load double, double* %76, align 8
  %78 = fadd double %77, %75
  store double %78, double* %76, align 8
  %79 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %80 = load double, double* %79, align 8
  %81 = fmul double %80, %3
  %82 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %83 = load double, double* %82, align 8
  %84 = fadd double %83, %81
  store double %84, double* %82, align 8
  br label %85

85:                                               ; preds = %60, %58
  ret %"class.blink::TransformationMatrix"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix4SkewEdd(%"class.blink::TransformationMatrix"* returned, double, double) local_unnamed_addr #8 align 2 {
  %4 = fmul double %1, 0x3F91DF46A2529D39
  %5 = fmul double %2, 0x3F91DF46A2529D39
  %6 = tail call double @tan(double %5) #19
  %7 = tail call double @tan(double %4) #19
  %8 = bitcast %"class.blink::TransformationMatrix"* %0 to <2 x double>*
  %9 = load <2 x double>, <2 x double>* %8, align 1
  %10 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1
  %11 = bitcast [4 x double]* %10 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 1
  %13 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2
  %14 = bitcast [4 x double]* %13 to <2 x double>*
  %15 = load <2 x double>, <2 x double>* %14, align 1
  %16 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3
  %17 = bitcast [4 x double]* %16 to <2 x double>*
  %18 = load <2 x double>, <2 x double>* %17, align 1
  %19 = insertelement <2 x double> undef, double %6, i32 0
  %20 = shufflevector <2 x double> %19, <2 x double> undef, <2 x i32> zeroinitializer
  %21 = fmul <2 x double> %20, %12
  %22 = fmul <2 x double> %15, zeroinitializer
  %23 = fmul <2 x double> %18, zeroinitializer
  %24 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %25 = bitcast double* %24 to <2 x double>*
  %26 = load <2 x double>, <2 x double>* %25, align 1
  %27 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %28 = bitcast double* %27 to <2 x double>*
  %29 = load <2 x double>, <2 x double>* %28, align 1
  %30 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %31 = bitcast double* %30 to <2 x double>*
  %32 = load <2 x double>, <2 x double>* %31, align 1
  %33 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %34 = bitcast double* %33 to <2 x double>*
  %35 = load <2 x double>, <2 x double>* %34, align 1
  %36 = fadd <2 x double> %9, %21
  %37 = fadd <2 x double> %36, %22
  %38 = fadd <2 x double> %37, %23
  store <2 x double> %38, <2 x double>* %8, align 1
  %39 = fmul <2 x double> %20, %29
  %40 = fmul <2 x double> %32, zeroinitializer
  %41 = fmul <2 x double> %35, zeroinitializer
  %42 = fadd <2 x double> %26, %39
  %43 = fadd <2 x double> %42, %40
  %44 = fadd <2 x double> %43, %41
  store <2 x double> %44, <2 x double>* %25, align 1
  %45 = insertelement <2 x double> undef, double %7, i32 0
  %46 = shufflevector <2 x double> %45, <2 x double> undef, <2 x i32> zeroinitializer
  %47 = fmul <2 x double> %9, %46
  %48 = fadd <2 x double> %12, %47
  %49 = fadd <2 x double> %48, %22
  %50 = fadd <2 x double> %49, %23
  store <2 x double> %50, <2 x double>* %11, align 1
  %51 = fmul <2 x double> %46, %26
  %52 = fadd <2 x double> %51, %29
  %53 = fadd <2 x double> %52, %40
  %54 = fadd <2 x double> %53, %41
  store <2 x double> %54, <2 x double>* %28, align 1
  %55 = fmul <2 x double> %9, zeroinitializer
  %56 = fmul <2 x double> %12, zeroinitializer
  %57 = fadd <2 x double> %55, %56
  %58 = fadd <2 x double> %15, %57
  %59 = fadd <2 x double> %58, %23
  store <2 x double> %59, <2 x double>* %14, align 1
  %60 = fmul <2 x double> %26, zeroinitializer
  %61 = fmul <2 x double> %29, zeroinitializer
  %62 = fadd <2 x double> %60, %61
  %63 = fadd <2 x double> %32, %62
  %64 = fadd <2 x double> %63, %41
  store <2 x double> %64, <2 x double>* %31, align 1
  %65 = fadd <2 x double> %57, %22
  %66 = fadd <2 x double> %18, %65
  store <2 x double> %66, <2 x double>* %17, align 1
  %67 = fadd <2 x double> %62, %40
  %68 = fadd <2 x double> %35, %67
  store <2 x double> %68, <2 x double>* %34, align 1
  ret %"class.blink::TransformationMatrix"* %0
}

; Function Attrs: nofree nounwind
declare double @tan(double) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix16ApplyPerspectiveEd(%"class.blink::TransformationMatrix"* returned, double) local_unnamed_addr #8 align 2 {
  %3 = fcmp une double %1, 0.000000e+00
  %4 = fdiv double -1.000000e+00, %1
  %5 = select i1 %3, double %4, double 0.000000e+00
  %6 = bitcast %"class.blink::TransformationMatrix"* %0 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 1
  %8 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1
  %9 = bitcast [4 x double]* %8 to <2 x double>*
  %10 = load <2 x double>, <2 x double>* %9, align 1
  %11 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2
  %12 = bitcast [4 x double]* %11 to <2 x double>*
  %13 = load <2 x double>, <2 x double>* %12, align 1
  %14 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3
  %15 = bitcast [4 x double]* %14 to <2 x double>*
  %16 = load <2 x double>, <2 x double>* %15, align 1
  %17 = fmul <2 x double> %10, zeroinitializer
  %18 = fmul <2 x double> %13, zeroinitializer
  %19 = fmul <2 x double> %16, zeroinitializer
  %20 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %21 = bitcast double* %20 to <2 x double>*
  %22 = load <2 x double>, <2 x double>* %21, align 1
  %23 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %24 = bitcast double* %23 to <2 x double>*
  %25 = load <2 x double>, <2 x double>* %24, align 1
  %26 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %27 = bitcast double* %26 to <2 x double>*
  %28 = load <2 x double>, <2 x double>* %27, align 1
  %29 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %30 = bitcast double* %29 to <2 x double>*
  %31 = load <2 x double>, <2 x double>* %30, align 1
  %32 = fadd <2 x double> %7, %17
  %33 = fadd <2 x double> %32, %18
  %34 = fadd <2 x double> %33, %19
  store <2 x double> %34, <2 x double>* %6, align 1
  %35 = fmul <2 x double> %25, zeroinitializer
  %36 = fmul <2 x double> %28, zeroinitializer
  %37 = fmul <2 x double> %31, zeroinitializer
  %38 = fadd <2 x double> %22, %35
  %39 = fadd <2 x double> %38, %36
  %40 = fadd <2 x double> %39, %37
  store <2 x double> %40, <2 x double>* %21, align 1
  %41 = fmul <2 x double> %7, zeroinitializer
  %42 = fadd <2 x double> %41, %10
  %43 = fadd <2 x double> %42, %18
  %44 = fadd <2 x double> %43, %19
  store <2 x double> %44, <2 x double>* %9, align 1
  %45 = fmul <2 x double> %22, zeroinitializer
  %46 = fadd <2 x double> %45, %25
  %47 = fadd <2 x double> %46, %36
  %48 = fadd <2 x double> %47, %37
  store <2 x double> %48, <2 x double>* %24, align 1
  %49 = insertelement <2 x double> undef, double %5, i32 0
  %50 = shufflevector <2 x double> %49, <2 x double> undef, <2 x i32> zeroinitializer
  %51 = fmul <2 x double> %50, %16
  %52 = fadd <2 x double> %41, %17
  %53 = fadd <2 x double> %13, %52
  %54 = fadd <2 x double> %53, %51
  store <2 x double> %54, <2 x double>* %12, align 1
  %55 = fmul <2 x double> %50, %31
  %56 = fadd <2 x double> %45, %35
  %57 = fadd <2 x double> %28, %56
  %58 = fadd <2 x double> %57, %55
  store <2 x double> %58, <2 x double>* %27, align 1
  %59 = fadd <2 x double> %52, %18
  %60 = fadd <2 x double> %16, %59
  store <2 x double> %60, <2 x double>* %15, align 1
  %61 = fadd <2 x double> %56, %36
  %62 = fadd <2 x double> %31, %61
  store <2 x double> %62, <2 x double>* %30, align 1
  ret %"class.blink::TransformationMatrix"* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix20ApplyTransformOriginEddd(%"class.blink::TransformationMatrix"* returned, double, double, double) local_unnamed_addr #0 align 2 {
  %5 = tail call dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix15PostTranslate3dEddd(%"class.blink::TransformationMatrix"* %0, double %1, double %2, double %3)
  %6 = fsub double -0.000000e+00, %1
  %7 = fsub double -0.000000e+00, %2
  %8 = fsub double -0.000000e+00, %3
  %9 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %10 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %11 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %12 = bitcast %"class.blink::TransformationMatrix"* %0 to <2 x double>*
  %13 = load <2 x double>, <2 x double>* %12, align 8
  %14 = insertelement <2 x double> undef, double %6, i32 0
  %15 = shufflevector <2 x double> %14, <2 x double> undef, <2 x i32> zeroinitializer
  %16 = fmul <2 x double> %13, %15
  %17 = bitcast double* %9 to <2 x double>*
  %18 = load <2 x double>, <2 x double>* %17, align 8
  %19 = insertelement <2 x double> undef, double %7, i32 0
  %20 = shufflevector <2 x double> %19, <2 x double> undef, <2 x i32> zeroinitializer
  %21 = fmul <2 x double> %18, %20
  %22 = fadd <2 x double> %16, %21
  %23 = bitcast double* %10 to <2 x double>*
  %24 = load <2 x double>, <2 x double>* %23, align 8
  %25 = insertelement <2 x double> undef, double %8, i32 0
  %26 = shufflevector <2 x double> %25, <2 x double> undef, <2 x i32> zeroinitializer
  %27 = fmul <2 x double> %24, %26
  %28 = fadd <2 x double> %22, %27
  %29 = bitcast double* %11 to <2 x double>*
  %30 = load <2 x double>, <2 x double>* %29, align 8
  %31 = fadd <2 x double> %30, %28
  %32 = bitcast double* %11 to <2 x double>*
  store <2 x double> %31, <2 x double>* %32, align 8
  %33 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %34 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %35 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %36 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %37 = bitcast double* %33 to <2 x double>*
  %38 = load <2 x double>, <2 x double>* %37, align 8
  %39 = fmul <2 x double> %38, %15
  %40 = bitcast double* %34 to <2 x double>*
  %41 = load <2 x double>, <2 x double>* %40, align 8
  %42 = fmul <2 x double> %41, %20
  %43 = fadd <2 x double> %39, %42
  %44 = bitcast double* %35 to <2 x double>*
  %45 = load <2 x double>, <2 x double>* %44, align 8
  %46 = fmul <2 x double> %45, %26
  %47 = fadd <2 x double> %43, %46
  %48 = bitcast double* %36 to <2 x double>*
  %49 = load <2 x double>, <2 x double>* %48, align 8
  %50 = fadd <2 x double> %49, %47
  %51 = bitcast double* %36 to <2 x double>*
  store <2 x double> %50, <2 x double>* %51, align 8
  ret %"class.blink::TransformationMatrix"* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix4ZoomEd(%"class.blink::TransformationMatrix"* returned, double) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %4 = load double, double* %3, align 8
  %5 = fdiv double %4, %1
  store double %5, double* %3, align 8
  %6 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %7 = load double, double* %6, align 8
  %8 = fdiv double %7, %1
  store double %8, double* %6, align 8
  %9 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %10 = load double, double* %9, align 8
  %11 = fdiv double %10, %1
  store double %11, double* %9, align 8
  %12 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %13 = bitcast double* %12 to <2 x double>*
  %14 = load <2 x double>, <2 x double>* %13, align 8
  %15 = insertelement <2 x double> undef, double %1, i32 0
  %16 = shufflevector <2 x double> %15, <2 x double> undef, <2 x i32> zeroinitializer
  %17 = fmul <2 x double> %14, %16
  %18 = bitcast double* %12 to <2 x double>*
  store <2 x double> %17, <2 x double>* %18, align 8
  %19 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %20 = load double, double* %19, align 8
  %21 = fmul double %20, %1
  store double %21, double* %19, align 8
  ret %"class.blink::TransformationMatrix"* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK5blink20TransformationMatrix13MultVecMatrixEddRdS1_(%"class.blink::TransformationMatrix"* nocapture readonly, double, double, double* nocapture dereferenceable(8), double* nocapture dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 0
  %9 = load double, double* %8, align 8
  %10 = fmul double %9, %1
  %11 = fadd double %7, %10
  %12 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %13 = load double, double* %12, align 8
  %14 = fmul double %13, %2
  %15 = fadd double %11, %14
  store double %15, double* %3, align 8
  %16 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 1
  %17 = load double, double* %16, align 8
  %18 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 1
  %19 = load double, double* %18, align 8
  %20 = fmul double %19, %1
  %21 = fadd double %17, %20
  %22 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  %23 = load double, double* %22, align 8
  %24 = fmul double %23, %2
  %25 = fadd double %21, %24
  store double %25, double* %4, align 8
  %26 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %27 = load double, double* %26, align 8
  %28 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %29 = load double, double* %28, align 8
  %30 = fmul double %29, %1
  %31 = fadd double %27, %30
  %32 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %33 = load double, double* %32, align 8
  %34 = fmul double %33, %2
  %35 = fadd double %31, %34
  %36 = fcmp une double %35, 1.000000e+00
  %37 = fcmp une double %35, 0.000000e+00
  %38 = and i1 %36, %37
  br i1 %38, label %39, label %44

39:                                               ; preds = %5
  %40 = load double, double* %3, align 8
  %41 = fdiv double %40, %35
  store double %41, double* %3, align 8
  %42 = load double, double* %4, align 8
  %43 = fdiv double %42, %35
  store double %43, double* %4, align 8
  br label %44

44:                                               ; preds = %39, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK5blink20TransformationMatrix13MultVecMatrixEdddRdS1_S1_(%"class.blink::TransformationMatrix"* nocapture readonly, double, double, double, double* nocapture dereferenceable(8), double* nocapture dereferenceable(8), double* nocapture dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %8 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 0
  %11 = load double, double* %10, align 8
  %12 = fmul double %11, %1
  %13 = fadd double %9, %12
  %14 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %15 = load double, double* %14, align 8
  %16 = fmul double %15, %2
  %17 = fadd double %13, %16
  %18 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %19 = load double, double* %18, align 8
  %20 = fmul double %19, %3
  %21 = fadd double %17, %20
  store double %21, double* %4, align 8
  %22 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 1
  %23 = load double, double* %22, align 8
  %24 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 1
  %25 = load double, double* %24, align 8
  %26 = fmul double %25, %1
  %27 = fadd double %23, %26
  %28 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  %29 = load double, double* %28, align 8
  %30 = fmul double %29, %2
  %31 = fadd double %27, %30
  %32 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 1
  %33 = load double, double* %32, align 8
  %34 = fmul double %33, %3
  %35 = fadd double %31, %34
  store double %35, double* %5, align 8
  %36 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %37 = load double, double* %36, align 8
  %38 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %39 = load double, double* %38, align 8
  %40 = fmul double %39, %1
  %41 = fadd double %37, %40
  %42 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %43 = load double, double* %42, align 8
  %44 = fmul double %43, %2
  %45 = fadd double %41, %44
  %46 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %47 = load double, double* %46, align 8
  %48 = fmul double %47, %3
  %49 = fadd double %45, %48
  store double %49, double* %6, align 8
  %50 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %51 = load double, double* %50, align 8
  %52 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %53 = load double, double* %52, align 8
  %54 = fmul double %53, %1
  %55 = fadd double %51, %54
  %56 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %57 = load double, double* %56, align 8
  %58 = fmul double %57, %2
  %59 = fadd double %55, %58
  %60 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %61 = load double, double* %60, align 8
  %62 = fmul double %61, %3
  %63 = fadd double %59, %62
  %64 = fcmp une double %63, 1.000000e+00
  %65 = fcmp une double %63, 0.000000e+00
  %66 = and i1 %64, %65
  br i1 %66, label %67, label %74

67:                                               ; preds = %7
  %68 = load double, double* %4, align 8
  %69 = fdiv double %68, %63
  store double %69, double* %4, align 8
  %70 = load double, double* %5, align 8
  %71 = fdiv double %70, %63
  store double %71, double* %5, align 8
  %72 = load double, double* %6, align 8
  %73 = fdiv double %72, %63
  store double %73, double* %6, align 8
  br label %74

74:                                               ; preds = %67, %7
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink20TransformationMatrix12IsInvertibleEv(%"class.blink::TransformationMatrix"* nocapture readonly) local_unnamed_addr #11 align 2 {
  %2 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 0
  %3 = load double, double* %2, align 8
  %4 = fcmp oeq double %3, 1.000000e+00
  %5 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 1
  %6 = load double, double* %5, align 8
  %7 = fcmp oeq double %6, 0.000000e+00
  %8 = and i1 %4, %7
  br i1 %8, label %9, label %53

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %11 = load double, double* %10, align 8
  %12 = fcmp oeq double %11, 0.000000e+00
  br i1 %12, label %13, label %53

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %15 = load double, double* %14, align 8
  %16 = fcmp oeq double %15, 0.000000e+00
  br i1 %16, label %17, label %53

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %19 = load double, double* %18, align 8
  %20 = fcmp oeq double %19, 0.000000e+00
  br i1 %20, label %21, label %53

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  %23 = load double, double* %22, align 8
  %24 = fcmp oeq double %23, 1.000000e+00
  br i1 %24, label %25, label %53

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %27 = load double, double* %26, align 8
  %28 = fcmp oeq double %27, 0.000000e+00
  br i1 %28, label %29, label %53

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %31 = load double, double* %30, align 8
  %32 = fcmp oeq double %31, 0.000000e+00
  br i1 %32, label %33, label %53

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %35 = load double, double* %34, align 8
  %36 = fcmp oeq double %35, 0.000000e+00
  br i1 %36, label %37, label %53

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 1
  %39 = load double, double* %38, align 8
  %40 = fcmp oeq double %39, 0.000000e+00
  br i1 %40, label %41, label %53

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %43 = load double, double* %42, align 8
  %44 = fcmp oeq double %43, 1.000000e+00
  br i1 %44, label %45, label %53

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %47 = load double, double* %46, align 8
  %48 = fcmp oeq double %47, 0.000000e+00
  br i1 %48, label %49, label %53

49:                                               ; preds = %45
  %50 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %51 = load double, double* %50, align 8
  %52 = fcmp oeq double %51, 1.000000e+00
  br i1 %52, label %139, label %53

53:                                               ; preds = %1, %9, %13, %17, %21, %25, %29, %33, %37, %41, %45, %49
  %54 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %55 = load double, double* %54, align 8
  %56 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %57 = load double, double* %56, align 8
  %58 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %59 = load double, double* %58, align 8
  %60 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  %61 = load double, double* %60, align 8
  %62 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %63 = load double, double* %62, align 8
  %64 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %65 = load double, double* %64, align 8
  %66 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %67 = load double, double* %66, align 8
  %68 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 1
  %69 = load double, double* %68, align 8
  %70 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %71 = load double, double* %70, align 8
  %72 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %73 = load double, double* %72, align 8
  %74 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %75 = load double, double* %74, align 8
  %76 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 1
  %77 = load double, double* %76, align 8
  %78 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %79 = load double, double* %78, align 8
  %80 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %81 = load double, double* %80, align 8
  %82 = fmul double %71, %81
  %83 = fmul double %73, %79
  %84 = fsub double %82, %83
  %85 = fmul double %61, %84
  %86 = fmul double %69, %81
  %87 = fmul double %73, %77
  %88 = fsub double %86, %87
  %89 = fmul double %63, %88
  %90 = fsub double %85, %89
  %91 = fmul double %69, %79
  %92 = fmul double %71, %77
  %93 = fsub double %91, %92
  %94 = fmul double %65, %93
  %95 = fadd double %94, %90
  %96 = fmul double %59, %84
  %97 = fmul double %67, %81
  %98 = fmul double %73, %75
  %99 = fsub double %97, %98
  %100 = fmul double %63, %99
  %101 = fsub double %96, %100
  %102 = fmul double %67, %79
  %103 = fmul double %71, %75
  %104 = fsub double %102, %103
  %105 = fmul double %65, %104
  %106 = fadd double %105, %101
  %107 = fmul double %59, %88
  %108 = fmul double %61, %99
  %109 = fsub double %107, %108
  %110 = fmul double %67, %77
  %111 = fmul double %69, %75
  %112 = fsub double %110, %111
  %113 = fmul double %65, %112
  %114 = fadd double %113, %109
  %115 = insertelement <2 x double> undef, double %3, i32 0
  %116 = insertelement <2 x double> %115, double %59, i32 1
  %117 = insertelement <2 x double> undef, double %95, i32 0
  %118 = insertelement <2 x double> %117, double %93, i32 1
  %119 = fmul <2 x double> %116, %118
  %120 = insertelement <2 x double> undef, double %6, i32 0
  %121 = insertelement <2 x double> %120, double %61, i32 1
  %122 = insertelement <2 x double> undef, double %106, i32 0
  %123 = insertelement <2 x double> %122, double %104, i32 1
  %124 = fmul <2 x double> %121, %123
  %125 = fsub <2 x double> %119, %124
  %126 = insertelement <2 x double> undef, double %55, i32 0
  %127 = insertelement <2 x double> %126, double %63, i32 1
  %128 = insertelement <2 x double> undef, double %114, i32 0
  %129 = insertelement <2 x double> %128, double %112, i32 1
  %130 = fmul <2 x double> %127, %129
  %131 = fadd <2 x double> %130, %125
  %132 = extractelement <2 x double> %131, i32 1
  %133 = fmul double %57, %132
  %134 = extractelement <2 x double> %131, i32 0
  %135 = fsub double %134, %133
  %136 = fdiv double 1.000000e+00, %135
  %137 = tail call double @llvm.fabs.f64(double %136) #20
  %138 = fcmp one double %137, 0x7FF0000000000000
  br label %139

139:                                              ; preds = %53, %49
  %140 = phi i1 [ true, %49 ], [ %138, %53 ]
  ret i1 %140
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink20TransformationMatrix7InverseEv(%"class.blink::TransformationMatrix"* noalias sret, %"class.blink::TransformationMatrix"*) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.blink::TransformationMatrix", align 8
  %4 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 0
  %5 = load double, double* %4, align 8
  %6 = fcmp oeq double %5, 1.000000e+00
  br i1 %6, label %7, label %96

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 1
  %9 = load double, double* %8, align 8
  %10 = fcmp oeq double %9, 0.000000e+00
  br i1 %10, label %11, label %96

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 2
  %13 = load double, double* %12, align 8
  %14 = fcmp oeq double %13, 0.000000e+00
  br i1 %14, label %15, label %96

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 3
  %17 = load double, double* %16, align 8
  %18 = fcmp oeq double %17, 0.000000e+00
  br i1 %18, label %19, label %96

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 0
  %21 = load double, double* %20, align 8
  %22 = fcmp oeq double %21, 0.000000e+00
  br i1 %22, label %23, label %96

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 1
  %25 = load double, double* %24, align 8
  %26 = fcmp oeq double %25, 1.000000e+00
  br i1 %26, label %27, label %96

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 2
  %29 = load double, double* %28, align 8
  %30 = fcmp oeq double %29, 0.000000e+00
  br i1 %30, label %31, label %96

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 3
  %33 = load double, double* %32, align 8
  %34 = fcmp oeq double %33, 0.000000e+00
  br i1 %34, label %35, label %96

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 0
  %37 = load double, double* %36, align 8
  %38 = fcmp oeq double %37, 0.000000e+00
  br i1 %38, label %39, label %96

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 1
  %41 = load double, double* %40, align 8
  %42 = fcmp oeq double %41, 0.000000e+00
  br i1 %42, label %43, label %96

43:                                               ; preds = %39
  %44 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 2
  %45 = load double, double* %44, align 8
  %46 = fcmp oeq double %45, 1.000000e+00
  br i1 %46, label %47, label %96

47:                                               ; preds = %43
  %48 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 3
  %49 = load double, double* %48, align 8
  %50 = fcmp oeq double %49, 0.000000e+00
  br i1 %50, label %51, label %96

51:                                               ; preds = %47
  %52 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 3
  %53 = load double, double* %52, align 8
  %54 = fcmp oeq double %53, 1.000000e+00
  br i1 %54, label %55, label %96

55:                                               ; preds = %51
  %56 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 0
  %57 = bitcast double* %56 to <2 x double>*
  %58 = load <2 x double>, <2 x double>* %57, align 8
  %59 = extractelement <2 x double> %58, i32 0
  %60 = fcmp oeq double %59, 0.000000e+00
  %61 = extractelement <2 x double> %58, i32 1
  %62 = fcmp oeq double %61, 0.000000e+00
  %63 = and i1 %60, %62
  br i1 %63, label %64, label %79

64:                                               ; preds = %55
  %65 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 2
  %66 = load double, double* %65, align 8
  %67 = fcmp oeq double %66, 0.000000e+00
  br i1 %67, label %68, label %79

68:                                               ; preds = %64
  %69 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 0
  store double 1.000000e+00, double* %69, align 8
  %70 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 1
  %71 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  %72 = bitcast double* %70 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %72, i8 0, i64 32, i1 false) #19
  store double 1.000000e+00, double* %71, align 8
  %73 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %74 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %75 = bitcast double* %73 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %75, i8 0, i64 32, i1 false) #19
  store double 1.000000e+00, double* %74, align 8
  %76 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %77 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %78 = bitcast double* %76 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %78, i8 0, i64 32, i1 false) #19
  store double 1.000000e+00, double* %77, align 8
  br label %125

79:                                               ; preds = %55, %64
  %80 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %58
  %81 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 2
  %82 = load double, double* %81, align 8
  %83 = fsub double -0.000000e+00, %82
  %84 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 0
  store double 1.000000e+00, double* %84, align 8
  %85 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 1
  %86 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  %87 = bitcast double* %85 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %87, i8 0, i64 32, i1 false)
  store double 1.000000e+00, double* %86, align 8
  %88 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %89 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %90 = bitcast double* %88 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %90, i8 0, i64 32, i1 false)
  %91 = bitcast double* %89 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 0.000000e+00>, <2 x double>* %91, align 8
  %92 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %93 = bitcast double* %92 to <2 x double>*
  store <2 x double> %80, <2 x double>* %93, align 8
  %94 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  store double %83, double* %94, align 8
  %95 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  store double 1.000000e+00, double* %95, align 8
  br label %125

96:                                               ; preds = %2, %7, %11, %15, %19, %23, %27, %31, %35, %39, %43, %47, %51
  %97 = bitcast %"class.blink::TransformationMatrix"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %97) #19
  %98 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %3, i64 0, i32 0, i32 0, i64 0, i64 0
  store double 1.000000e+00, double* %98, align 8
  %99 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %3, i64 0, i32 0, i32 0, i64 0, i64 1
  %100 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %3, i64 0, i32 0, i32 0, i64 1, i64 1
  %101 = bitcast double* %99 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %101, i8 0, i64 32, i1 false) #19
  store double 1.000000e+00, double* %100, align 8
  %102 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %3, i64 0, i32 0, i32 0, i64 1, i64 2
  %103 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %3, i64 0, i32 0, i32 0, i64 2, i64 2
  %104 = bitcast double* %102 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 32, i1 false) #19
  store double 1.000000e+00, double* %103, align 8
  %105 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %3, i64 0, i32 0, i32 0, i64 2, i64 3
  %106 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %3, i64 0, i32 0, i32 0, i64 3, i64 3
  %107 = bitcast double* %105 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %107, i8 0, i64 32, i1 false) #19
  store double 1.000000e+00, double* %106, align 8
  %108 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0
  %109 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %3, i64 0, i32 0
  %110 = call fastcc zeroext i1 @_ZN5blinkL7InverseERKNS_20TransformationMatrix7Matrix4ERS1_(%"struct.blink::TransformationMatrix::Matrix4"* dereferenceable(128) %108, %"struct.blink::TransformationMatrix::Matrix4"* nonnull dereferenceable(128) %109)
  br i1 %110, label %122, label %111

111:                                              ; preds = %96
  %112 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 0
  store double 1.000000e+00, double* %112, align 8
  %113 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 1
  %114 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  %115 = bitcast double* %113 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %115, i8 0, i64 32, i1 false) #19
  store double 1.000000e+00, double* %114, align 8
  %116 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %117 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %118 = bitcast double* %116 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %118, i8 0, i64 32, i1 false) #19
  store double 1.000000e+00, double* %117, align 8
  %119 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %120 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %121 = bitcast double* %119 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %121, i8 0, i64 32, i1 false) #19
  store double 1.000000e+00, double* %120, align 8
  br label %124

122:                                              ; preds = %96
  %123 = bitcast %"class.blink::TransformationMatrix"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %123, i8* nonnull align 8 %97, i64 128, i1 false) #19
  br label %124

124:                                              ; preds = %122, %111
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %97) #19
  br label %125

125:                                              ; preds = %124, %79, %68
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN5blinkL7InverseERKNS_20TransformationMatrix7Matrix4ERS1_(%"struct.blink::TransformationMatrix::Matrix4"* readonly dereferenceable(128), %"struct.blink::TransformationMatrix::Matrix4"* nocapture dereferenceable(128)) unnamed_addr #12 {
  %3 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %0, i64 0, i32 0, i64 0, i64 0
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %0, i64 0, i32 0, i64 0, i64 1
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %0, i64 0, i32 0, i64 0, i64 2
  %8 = load double, double* %7, align 8
  %9 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %0, i64 0, i32 0, i64 0, i64 3
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %0, i64 0, i32 0, i64 1, i64 0
  %12 = load double, double* %11, align 8
  %13 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %0, i64 0, i32 0, i64 1, i64 1
  %14 = load double, double* %13, align 8
  %15 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %0, i64 0, i32 0, i64 1, i64 2
  %16 = bitcast double* %15 to <2 x double>*
  %17 = load <2 x double>, <2 x double>* %16, align 8
  %18 = shufflevector <2 x double> %17, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %19 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %0, i64 0, i32 0, i64 2, i64 0
  %20 = load double, double* %19, align 8
  %21 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %0, i64 0, i32 0, i64 2, i64 1
  %22 = load double, double* %21, align 8
  %23 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %0, i64 0, i32 0, i64 2, i64 2
  %24 = bitcast double* %23 to <2 x double>*
  %25 = load <2 x double>, <2 x double>* %24, align 8
  %26 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %0, i64 0, i32 0, i64 3, i64 0
  %27 = load double, double* %26, align 8
  %28 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %0, i64 0, i32 0, i64 3, i64 1
  %29 = load double, double* %28, align 8
  %30 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %0, i64 0, i32 0, i64 3, i64 2
  %31 = bitcast double* %30 to <2 x double>*
  %32 = load <2 x double>, <2 x double>* %31, align 8
  %33 = insertelement <2 x double> undef, double %20, i32 0
  %34 = extractelement <2 x double> %25, i32 0
  %35 = shufflevector <2 x double> %33, <2 x double> %25, <2 x i32> <i32 0, i32 2>
  %36 = fmul <2 x double> %35, %32
  %37 = extractelement <2 x double> %25, i32 1
  %38 = insertelement <2 x double> undef, double %27, i32 0
  %39 = extractelement <2 x double> %32, i32 0
  %40 = shufflevector <2 x double> %38, <2 x double> %32, <2 x i32> <i32 0, i32 2>
  %41 = fmul <2 x double> %25, %40
  %42 = fsub <2 x double> %36, %41
  %43 = extractelement <2 x double> %42, i32 1
  %44 = fmul double %14, %43
  %45 = insertelement <2 x double> undef, double %22, i32 0
  %46 = shufflevector <2 x double> %45, <2 x double> undef, <2 x i32> zeroinitializer
  %47 = fmul <2 x double> %46, %32
  %48 = insertelement <2 x double> undef, double %29, i32 0
  %49 = shufflevector <2 x double> %48, <2 x double> undef, <2 x i32> zeroinitializer
  %50 = fmul <2 x double> %25, %49
  %51 = fsub <2 x double> %47, %50
  %52 = fmul <2 x double> %18, %51
  %53 = extractelement <2 x double> %52, i32 1
  %54 = fsub double %44, %53
  %55 = extractelement <2 x double> %52, i32 0
  %56 = fadd double %55, %54
  %57 = extractelement <2 x double> %32, i32 1
  %58 = extractelement <2 x double> %17, i32 0
  %59 = shufflevector <2 x double> %33, <2 x double> undef, <2 x i32> zeroinitializer
  %60 = insertelement <2 x double> %32, double %29, i32 0
  %61 = fmul <2 x double> %59, %60
  %62 = insertelement <2 x double> %25, double %22, i32 0
  %63 = shufflevector <2 x double> %38, <2 x double> undef, <2 x i32> zeroinitializer
  %64 = fmul <2 x double> %62, %63
  %65 = fsub <2 x double> %61, %64
  %66 = extractelement <2 x double> %65, i32 1
  %67 = fmul double %58, %66
  %68 = extractelement <2 x double> %17, i32 1
  %69 = shufflevector <2 x double> %17, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %70 = insertelement <2 x double> %69, double %12, i32 1
  %71 = fmul <2 x double> %70, %42
  %72 = extractelement <2 x double> %71, i32 1
  %73 = fsub double %72, %67
  %74 = extractelement <2 x double> %71, i32 0
  %75 = fadd double %74, %73
  %76 = extractelement <2 x double> %51, i32 1
  %77 = fmul double %12, %76
  %78 = insertelement <2 x double> %69, double %14, i32 1
  %79 = fmul <2 x double> %78, %65
  %80 = extractelement <2 x double> %79, i32 1
  %81 = fsub double %77, %80
  %82 = extractelement <2 x double> %79, i32 0
  %83 = fadd double %82, %81
  %84 = insertelement <2 x double> undef, double %4, i32 0
  %85 = insertelement <2 x double> %84, double %12, i32 1
  %86 = insertelement <2 x double> undef, double %56, i32 0
  %87 = extractelement <2 x double> %51, i32 0
  %88 = shufflevector <2 x double> %86, <2 x double> %51, <2 x i32> <i32 0, i32 2>
  %89 = fmul <2 x double> %85, %88
  %90 = insertelement <2 x double> undef, double %6, i32 0
  %91 = insertelement <2 x double> %90, double %14, i32 1
  %92 = insertelement <2 x double> undef, double %75, i32 0
  %93 = extractelement <2 x double> %42, i32 0
  %94 = shufflevector <2 x double> %92, <2 x double> %42, <2 x i32> <i32 0, i32 2>
  %95 = fmul <2 x double> %91, %94
  %96 = fsub <2 x double> %89, %95
  %97 = insertelement <2 x double> undef, double %8, i32 0
  %98 = shufflevector <2 x double> %97, <2 x double> %17, <2 x i32> <i32 0, i32 2>
  %99 = insertelement <2 x double> undef, double %83, i32 0
  %100 = extractelement <2 x double> %65, i32 0
  %101 = shufflevector <2 x double> %99, <2 x double> %65, <2 x i32> <i32 0, i32 2>
  %102 = fmul <2 x double> %98, %101
  %103 = fadd <2 x double> %102, %96
  %104 = extractelement <2 x double> %103, i32 1
  %105 = fmul double %10, %104
  %106 = extractelement <2 x double> %103, i32 0
  %107 = fsub double %106, %105
  %108 = fdiv double 1.000000e+00, %107
  %109 = tail call double @llvm.fabs.f64(double %108) #20
  %110 = fcmp ueq double %109, 0x7FF0000000000000
  br i1 %110, label %260, label %111

111:                                              ; preds = %2
  %112 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %1, i64 0, i32 0, i64 0, i64 0
  store double %56, double* %112, align 8
  %113 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %1, i64 0, i32 0, i64 1, i64 0
  %114 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %1, i64 0, i32 0, i64 2, i64 0
  store double %83, double* %114, align 8
  %115 = fsub double -0.000000e+00, %104
  %116 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %1, i64 0, i32 0, i64 3, i64 0
  store double %115, double* %116, align 8
  %117 = fmul double %6, %43
  %118 = fmul double %8, %76
  %119 = fsub double %117, %118
  %120 = fmul double %10, %87
  %121 = fadd double %120, %119
  %122 = fsub double -0.000000e+00, %121
  %123 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %1, i64 0, i32 0, i64 0, i64 1
  store double %122, double* %123, align 8
  %124 = fmul double %4, %43
  %125 = fmul double %8, %66
  %126 = fsub double %124, %125
  %127 = fmul double %10, %93
  %128 = fadd double %127, %126
  %129 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %1, i64 0, i32 0, i64 1, i64 1
  store double %128, double* %129, align 8
  %130 = fmul double %4, %76
  %131 = fmul double %6, %66
  %132 = fsub double %130, %131
  %133 = fmul double %10, %100
  %134 = fadd double %133, %132
  %135 = fsub double -0.000000e+00, %134
  %136 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %1, i64 0, i32 0, i64 2, i64 1
  store double %135, double* %136, align 8
  %137 = fmul double %4, %87
  %138 = fmul double %6, %93
  %139 = fsub double %137, %138
  %140 = fmul double %8, %100
  %141 = fadd double %140, %139
  %142 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %1, i64 0, i32 0, i64 3, i64 1
  store double %141, double* %142, align 8
  %143 = fmul double %58, %57
  %144 = fmul double %68, %39
  %145 = fsub double %143, %144
  %146 = fmul double %6, %145
  %147 = fmul double %14, %57
  %148 = fmul double %68, %29
  %149 = fsub double %147, %148
  %150 = fmul double %8, %149
  %151 = fsub double %146, %150
  %152 = fmul double %14, %39
  %153 = fmul double %58, %29
  %154 = fsub double %152, %153
  %155 = fmul double %10, %154
  %156 = fadd double %155, %151
  %157 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %1, i64 0, i32 0, i64 0, i64 2
  %158 = fmul double %4, %145
  %159 = fmul double %12, %57
  %160 = fmul double %68, %27
  %161 = fsub double %159, %160
  %162 = fmul double %8, %161
  %163 = fsub double %158, %162
  %164 = fmul double %12, %39
  %165 = fmul double %58, %27
  %166 = fsub double %164, %165
  %167 = fmul double %10, %166
  %168 = fadd double %167, %163
  %169 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %1, i64 0, i32 0, i64 1, i64 2
  %170 = fmul double %4, %149
  %171 = fmul double %6, %161
  %172 = fsub double %170, %171
  %173 = fmul double %12, %29
  %174 = fmul double %14, %27
  %175 = fsub double %173, %174
  %176 = fmul double %10, %175
  %177 = fadd double %176, %172
  %178 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %1, i64 0, i32 0, i64 2, i64 2
  %179 = fmul double %4, %154
  %180 = fmul double %6, %166
  %181 = fsub double %179, %180
  %182 = fmul double %8, %175
  %183 = fadd double %182, %181
  %184 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %1, i64 0, i32 0, i64 3, i64 2
  %185 = fmul double %58, %37
  %186 = fmul double %68, %34
  %187 = fsub double %185, %186
  %188 = fmul double %6, %187
  %189 = fmul double %14, %37
  %190 = fmul double %68, %22
  %191 = fsub double %189, %190
  %192 = fmul double %8, %191
  %193 = fsub double %188, %192
  %194 = fmul double %14, %34
  %195 = fmul double %58, %22
  %196 = fsub double %194, %195
  %197 = fmul double %10, %196
  %198 = fadd double %197, %193
  %199 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %1, i64 0, i32 0, i64 0, i64 3
  %200 = fmul double %4, %187
  %201 = fmul double %12, %37
  %202 = fmul double %68, %20
  %203 = fsub double %201, %202
  %204 = fmul double %8, %203
  %205 = fsub double %200, %204
  %206 = fmul double %12, %34
  %207 = fmul double %58, %20
  %208 = fsub double %206, %207
  %209 = fmul double %10, %208
  %210 = fadd double %209, %205
  %211 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %1, i64 0, i32 0, i64 1, i64 3
  %212 = fmul double %4, %191
  %213 = fmul double %6, %203
  %214 = fsub double %212, %213
  %215 = fmul double %12, %22
  %216 = fmul double %14, %20
  %217 = fsub double %215, %216
  %218 = fmul double %10, %217
  %219 = fadd double %218, %214
  %220 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %1, i64 0, i32 0, i64 2, i64 3
  %221 = fmul double %4, %196
  %222 = fmul double %6, %208
  %223 = fsub double %221, %222
  %224 = fmul double %8, %217
  %225 = fadd double %224, %223
  %226 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %1, i64 0, i32 0, i64 3, i64 3
  %227 = bitcast %"struct.blink::TransformationMatrix::Matrix4"* %1 to <2 x double>*
  %228 = load <2 x double>, <2 x double>* %227, align 8
  %229 = insertelement <2 x double> undef, double %108, i32 0
  %230 = shufflevector <2 x double> %229, <2 x double> undef, <2 x i32> zeroinitializer
  %231 = fmul <2 x double> %230, %228
  %232 = bitcast %"struct.blink::TransformationMatrix::Matrix4"* %1 to <2 x double>*
  store <2 x double> %231, <2 x double>* %232, align 8
  %233 = fmul double %108, %156
  store double %233, double* %157, align 8
  %234 = fmul double %198, %108
  %235 = insertelement <2 x double> undef, double %234, i32 0
  %236 = insertelement <2 x double> %235, double %75, i32 1
  %237 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %236
  %238 = bitcast double* %199 to <2 x double>*
  store <2 x double> %237, <2 x double>* %238, align 8
  %239 = load double, double* %113, align 8
  %240 = fmul double %108, %239
  store double %240, double* %113, align 8
  %241 = load double, double* %129, align 8
  %242 = fmul double %108, %241
  store double %242, double* %129, align 8
  %243 = fmul double %168, %108
  %244 = fsub double -0.000000e+00, %243
  store double %244, double* %169, align 8
  %245 = fmul double %108, %210
  store double %245, double* %211, align 8
  %246 = bitcast double* %114 to <2 x double>*
  %247 = load <2 x double>, <2 x double>* %246, align 8
  %248 = fmul <2 x double> %230, %247
  %249 = bitcast double* %114 to <2 x double>*
  store <2 x double> %248, <2 x double>* %249, align 8
  %250 = fmul double %108, %177
  store double %250, double* %178, align 8
  %251 = fmul double %219, %108
  %252 = fsub double -0.000000e+00, %251
  store double %252, double* %220, align 8
  %253 = bitcast double* %116 to <2 x double>*
  %254 = load <2 x double>, <2 x double>* %253, align 8
  %255 = fmul <2 x double> %230, %254
  %256 = bitcast double* %116 to <2 x double>*
  store <2 x double> %255, <2 x double>* %256, align 8
  %257 = fmul double %183, %108
  %258 = fsub double -0.000000e+00, %257
  store double %258, double* %184, align 8
  %259 = fmul double %108, %225
  store double %259, double* %226, align 8
  br label %260

260:                                              ; preds = %111, %2
  %261 = phi i1 [ false, %2 ], [ true, %111 ]
  ret i1 %261
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink20TransformationMatrix10MakeAffineEv(%"class.blink::TransformationMatrix"* nocapture) local_unnamed_addr #13 align 2 {
  %2 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %3 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %4 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %5 = bitcast double* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false)
  %6 = bitcast double* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 32, i1 false)
  %7 = bitcast double* %4 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 0.000000e+00>, <2 x double>* %7, align 8
  %8 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %9 = bitcast double* %8 to <2 x double>*
  store <2 x double> <double 0.000000e+00, double 1.000000e+00>, <2 x double>* %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink20TransformationMatrix17ToAffineTransformEv(%"class.blink::AffineTransform"* noalias sret, %"class.blink::TransformationMatrix"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 0
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 1
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 0
  %8 = load double, double* %7, align 8
  %9 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 1
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 0
  %12 = load double, double* %11, align 8
  %13 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 1
  %14 = load double, double* %13, align 8
  tail call void @_ZN5blink15AffineTransformC1Edddddd(%"class.blink::AffineTransform"* %0, double %4, double %6, double %8, double %10, double %12, double %14) #19
  ret void
}

declare void @_ZN5blink15AffineTransformC1Edddddd(%"class.blink::AffineTransform"*, double, double, double, double, double, double) unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink20TransformationMatrix11FlattenTo2dEv(%"class.blink::TransformationMatrix"* nocapture) local_unnamed_addr #13 align 2 {
  %2 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %3 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  store double 0.000000e+00, double* %3, align 8
  %4 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  store double 0.000000e+00, double* %4, align 8
  %5 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %6 = bitcast double* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false)
  %7 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  store double 0.000000e+00, double* %7, align 8
  %8 = bitcast double* %5 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 0.000000e+00>, <2 x double>* %8, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink20TransformationMatrix13Is2dTransformEv(%"class.blink::TransformationMatrix"* nocapture readonly) local_unnamed_addr #14 align 2 {
  %2 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %3 = load double, double* %2, align 8
  %4 = fcmp oeq double %3, 0.000000e+00
  br i1 %4, label %5, label %42

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %7 = load double, double* %6, align 8
  %8 = fcmp oeq double %7, 0.000000e+00
  br i1 %8, label %9, label %42

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %11 = load double, double* %10, align 8
  %12 = fcmp oeq double %11, 0.000000e+00
  br i1 %12, label %13, label %42

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 1
  %15 = load double, double* %14, align 8
  %16 = fcmp oeq double %15, 0.000000e+00
  br i1 %16, label %17, label %42

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %19 = load double, double* %18, align 8
  %20 = fcmp oeq double %19, 1.000000e+00
  br i1 %20, label %21, label %42

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %23 = load double, double* %22, align 8
  %24 = fcmp oeq double %23, 0.000000e+00
  br i1 %24, label %25, label %42

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %27 = load double, double* %26, align 8
  %28 = fcmp oeq double %27, 0.000000e+00
  br i1 %28, label %29, label %42

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %31 = load double, double* %30, align 8
  %32 = fcmp une double %31, 0.000000e+00
  br i1 %32, label %42, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %35 = load double, double* %34, align 8
  %36 = fcmp une double %35, 0.000000e+00
  br i1 %36, label %42, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %39 = load double, double* %38, align 8
  %40 = fcmp une double %39, 1.000000e+00
  br i1 %40, label %42, label %41

41:                                               ; preds = %37
  br label %42

42:                                               ; preds = %1, %5, %9, %13, %17, %21, %29, %33, %37, %25, %41
  %43 = phi i1 [ true, %41 ], [ false, %25 ], [ false, %37 ], [ false, %33 ], [ false, %29 ], [ false, %21 ], [ false, %17 ], [ false, %13 ], [ false, %9 ], [ false, %5 ], [ false, %1 ]
  ret i1 %43
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20TransformationMatrix5BlendERKS0_d(%"class.blink::TransformationMatrix"*, %"class.blink::TransformationMatrix"* readonly dereferenceable(128), double) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.gfx::Quaternion", align 16
  %5 = alloca %"class.gfx::Quaternion", align 16
  %6 = alloca %"class.gfx::Quaternion", align 16
  %7 = alloca %"struct.blink::TransformationMatrix::DecomposedType", align 8
  %8 = alloca %"struct.blink::TransformationMatrix::DecomposedType", align 8
  %9 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 0
  %10 = load double, double* %9, align 8
  %11 = fcmp oeq double %10, 1.000000e+00
  br i1 %11, label %12, label %136

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 1
  %14 = load double, double* %13, align 8
  %15 = fcmp oeq double %14, 0.000000e+00
  br i1 %15, label %16, label %136

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 2
  %18 = load double, double* %17, align 8
  %19 = fcmp oeq double %18, 0.000000e+00
  br i1 %19, label %20, label %136

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 3
  %22 = load double, double* %21, align 8
  %23 = fcmp oeq double %22, 0.000000e+00
  br i1 %23, label %24, label %136

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 0
  %26 = load double, double* %25, align 8
  %27 = fcmp oeq double %26, 0.000000e+00
  br i1 %27, label %28, label %136

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 1
  %30 = load double, double* %29, align 8
  %31 = fcmp oeq double %30, 1.000000e+00
  br i1 %31, label %32, label %136

32:                                               ; preds = %28
  %33 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 2
  %34 = load double, double* %33, align 8
  %35 = fcmp oeq double %34, 0.000000e+00
  br i1 %35, label %36, label %136

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 3
  %38 = load double, double* %37, align 8
  %39 = fcmp oeq double %38, 0.000000e+00
  br i1 %39, label %40, label %136

40:                                               ; preds = %36
  %41 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 0
  %42 = load double, double* %41, align 8
  %43 = fcmp oeq double %42, 0.000000e+00
  br i1 %43, label %44, label %136

44:                                               ; preds = %40
  %45 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 1
  %46 = load double, double* %45, align 8
  %47 = fcmp oeq double %46, 0.000000e+00
  br i1 %47, label %48, label %136

48:                                               ; preds = %44
  %49 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 2
  %50 = load double, double* %49, align 8
  %51 = fcmp oeq double %50, 1.000000e+00
  br i1 %51, label %52, label %136

52:                                               ; preds = %48
  %53 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 3
  %54 = load double, double* %53, align 8
  %55 = fcmp oeq double %54, 0.000000e+00
  br i1 %55, label %56, label %136

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 0
  %58 = load double, double* %57, align 8
  %59 = fcmp oeq double %58, 0.000000e+00
  br i1 %59, label %60, label %136

60:                                               ; preds = %56
  %61 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 1
  %62 = load double, double* %61, align 8
  %63 = fcmp oeq double %62, 0.000000e+00
  br i1 %63, label %64, label %136

64:                                               ; preds = %60
  %65 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 2
  %66 = load double, double* %65, align 8
  %67 = fcmp oeq double %66, 0.000000e+00
  br i1 %67, label %68, label %136

68:                                               ; preds = %64
  %69 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 3
  %70 = load double, double* %69, align 8
  %71 = fcmp oeq double %70, 1.000000e+00
  br i1 %71, label %72, label %136

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 0
  %74 = load double, double* %73, align 8
  %75 = fcmp oeq double %74, 1.000000e+00
  br i1 %75, label %76, label %136

76:                                               ; preds = %72
  %77 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 1
  %78 = load double, double* %77, align 8
  %79 = fcmp oeq double %78, 0.000000e+00
  br i1 %79, label %80, label %136

80:                                               ; preds = %76
  %81 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %82 = load double, double* %81, align 8
  %83 = fcmp oeq double %82, 0.000000e+00
  br i1 %83, label %84, label %136

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %86 = load double, double* %85, align 8
  %87 = fcmp oeq double %86, 0.000000e+00
  br i1 %87, label %88, label %136

88:                                               ; preds = %84
  %89 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %90 = load double, double* %89, align 8
  %91 = fcmp oeq double %90, 0.000000e+00
  br i1 %91, label %92, label %136

92:                                               ; preds = %88
  %93 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  %94 = load double, double* %93, align 8
  %95 = fcmp oeq double %94, 1.000000e+00
  br i1 %95, label %96, label %136

96:                                               ; preds = %92
  %97 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %98 = load double, double* %97, align 8
  %99 = fcmp oeq double %98, 0.000000e+00
  br i1 %99, label %100, label %136

100:                                              ; preds = %96
  %101 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %102 = load double, double* %101, align 8
  %103 = fcmp oeq double %102, 0.000000e+00
  br i1 %103, label %104, label %136

104:                                              ; preds = %100
  %105 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %106 = load double, double* %105, align 8
  %107 = fcmp oeq double %106, 0.000000e+00
  br i1 %107, label %108, label %136

108:                                              ; preds = %104
  %109 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 1
  %110 = load double, double* %109, align 8
  %111 = fcmp oeq double %110, 0.000000e+00
  br i1 %111, label %112, label %136

112:                                              ; preds = %108
  %113 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %114 = load double, double* %113, align 8
  %115 = fcmp oeq double %114, 1.000000e+00
  br i1 %115, label %116, label %136

116:                                              ; preds = %112
  %117 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %118 = load double, double* %117, align 8
  %119 = fcmp oeq double %118, 0.000000e+00
  br i1 %119, label %120, label %136

120:                                              ; preds = %116
  %121 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %122 = load double, double* %121, align 8
  %123 = fcmp oeq double %122, 0.000000e+00
  br i1 %123, label %124, label %136

124:                                              ; preds = %120
  %125 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 1
  %126 = load double, double* %125, align 8
  %127 = fcmp oeq double %126, 0.000000e+00
  br i1 %127, label %128, label %136

128:                                              ; preds = %124
  %129 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %130 = load double, double* %129, align 8
  %131 = fcmp oeq double %130, 0.000000e+00
  br i1 %131, label %132, label %136

132:                                              ; preds = %128
  %133 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %134 = load double, double* %133, align 8
  %135 = fcmp oeq double %134, 1.000000e+00
  br i1 %135, label %388, label %136

136:                                              ; preds = %72, %76, %80, %84, %88, %92, %96, %100, %104, %108, %112, %116, %120, %124, %128, %3, %12, %16, %20, %24, %28, %32, %36, %40, %44, %48, %52, %56, %60, %64, %132, %68
  %137 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 2
  %138 = load double, double* %137, align 8
  %139 = fcmp oeq double %138, 0.000000e+00
  br i1 %139, label %140, label %217

140:                                              ; preds = %136
  %141 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 2
  %142 = load double, double* %141, align 8
  %143 = fcmp oeq double %142, 0.000000e+00
  br i1 %143, label %144, label %217

144:                                              ; preds = %140
  %145 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 0
  %146 = load double, double* %145, align 8
  %147 = fcmp oeq double %146, 0.000000e+00
  br i1 %147, label %148, label %217

148:                                              ; preds = %144
  %149 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 1
  %150 = load double, double* %149, align 8
  %151 = fcmp oeq double %150, 0.000000e+00
  br i1 %151, label %152, label %217

152:                                              ; preds = %148
  %153 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 2
  %154 = load double, double* %153, align 8
  %155 = fcmp oeq double %154, 1.000000e+00
  br i1 %155, label %156, label %217

156:                                              ; preds = %152
  %157 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 3
  %158 = load double, double* %157, align 8
  %159 = fcmp oeq double %158, 0.000000e+00
  br i1 %159, label %160, label %217

160:                                              ; preds = %156
  %161 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 2
  %162 = load double, double* %161, align 8
  %163 = fcmp oeq double %162, 0.000000e+00
  br i1 %163, label %164, label %217

164:                                              ; preds = %160
  %165 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 3
  %166 = load double, double* %165, align 8
  %167 = fcmp une double %166, 0.000000e+00
  br i1 %167, label %217, label %168

168:                                              ; preds = %164
  %169 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 3
  %170 = load double, double* %169, align 8
  %171 = fcmp une double %170, 0.000000e+00
  br i1 %171, label %217, label %172

172:                                              ; preds = %168
  %173 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 3
  %174 = load double, double* %173, align 8
  %175 = fcmp une double %174, 1.000000e+00
  br i1 %175, label %217, label %176

176:                                              ; preds = %172
  %177 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %178 = load double, double* %177, align 8
  %179 = fcmp oeq double %178, 0.000000e+00
  br i1 %179, label %180, label %217

180:                                              ; preds = %176
  %181 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %182 = load double, double* %181, align 8
  %183 = fcmp oeq double %182, 0.000000e+00
  br i1 %183, label %184, label %217

184:                                              ; preds = %180
  %185 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %186 = load double, double* %185, align 8
  %187 = fcmp oeq double %186, 0.000000e+00
  br i1 %187, label %188, label %217

188:                                              ; preds = %184
  %189 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 1
  %190 = load double, double* %189, align 8
  %191 = fcmp oeq double %190, 0.000000e+00
  br i1 %191, label %192, label %217

192:                                              ; preds = %188
  %193 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %194 = load double, double* %193, align 8
  %195 = fcmp oeq double %194, 1.000000e+00
  br i1 %195, label %196, label %217

196:                                              ; preds = %192
  %197 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %198 = load double, double* %197, align 8
  %199 = fcmp oeq double %198, 0.000000e+00
  br i1 %199, label %200, label %217

200:                                              ; preds = %196
  %201 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %202 = load double, double* %201, align 8
  %203 = fcmp oeq double %202, 0.000000e+00
  br i1 %203, label %204, label %217

204:                                              ; preds = %200
  %205 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %206 = load double, double* %205, align 8
  %207 = fcmp une double %206, 0.000000e+00
  br i1 %207, label %217, label %208

208:                                              ; preds = %204
  %209 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %210 = load double, double* %209, align 8
  %211 = fcmp une double %210, 0.000000e+00
  br i1 %211, label %217, label %212

212:                                              ; preds = %208
  %213 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %214 = load double, double* %213, align 8
  %215 = fcmp une double %214, 1.000000e+00
  br i1 %215, label %217, label %216

216:                                              ; preds = %212
  tail call void @_ZN5blink20TransformationMatrix7Blend2DERKS0_d(%"class.blink::TransformationMatrix"* %0, %"class.blink::TransformationMatrix"* dereferenceable(128) %1, double %2)
  br label %388

217:                                              ; preds = %176, %180, %184, %188, %192, %196, %204, %208, %212, %200, %136, %140, %144, %148, %152, %156, %164, %168, %172, %160
  %218 = bitcast %"struct.blink::TransformationMatrix::DecomposedType"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %218) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %218, i8 -1, i64 136, i1 false)
  %219 = bitcast %"struct.blink::TransformationMatrix::DecomposedType"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %219) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %219, i8 -1, i64 136, i1 false)
  %220 = call zeroext i1 @_ZNK5blink20TransformationMatrix9DecomposeERNS0_14DecomposedTypeE(%"class.blink::TransformationMatrix"* %1, %"struct.blink::TransformationMatrix::DecomposedType"* nonnull dereferenceable(136) %7)
  br i1 %220, label %221, label %223

221:                                              ; preds = %217
  %222 = call zeroext i1 @_ZNK5blink20TransformationMatrix9DecomposeERNS0_14DecomposedTypeE(%"class.blink::TransformationMatrix"* %0, %"struct.blink::TransformationMatrix::DecomposedType"* nonnull dereferenceable(136) %8)
  br i1 %222, label %228, label %223

223:                                              ; preds = %221, %217
  %224 = fcmp olt double %2, 5.000000e-01
  br i1 %224, label %225, label %387

225:                                              ; preds = %223
  %226 = bitcast %"class.blink::TransformationMatrix"* %0 to i8*
  %227 = bitcast %"class.blink::TransformationMatrix"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %226, i8* align 8 %227, i64 128, i1 false) #19
  br label %387

228:                                              ; preds = %221
  %229 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %7, i64 0, i32 0
  %230 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %8, i64 0, i32 0
  %231 = load double, double* %230, align 8
  %232 = load double, double* %229, align 8
  %233 = fcmp une double %232, %231
  br i1 %233, label %234, label %238

234:                                              ; preds = %228
  %235 = fsub double %231, %232
  %236 = fmul double %235, %2
  %237 = fadd double %232, %236
  store double %237, double* %229, align 8
  br label %238

238:                                              ; preds = %228, %234
  %239 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %7, i64 0, i32 1
  %240 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %8, i64 0, i32 1
  %241 = load double, double* %240, align 8
  %242 = load double, double* %239, align 8
  %243 = fcmp une double %242, %241
  br i1 %243, label %244, label %248

244:                                              ; preds = %238
  %245 = fsub double %241, %242
  %246 = fmul double %245, %2
  %247 = fadd double %242, %246
  store double %247, double* %239, align 8
  br label %248

248:                                              ; preds = %238, %244
  %249 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %7, i64 0, i32 2
  %250 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %8, i64 0, i32 2
  %251 = load double, double* %250, align 8
  %252 = load double, double* %249, align 8
  %253 = fcmp une double %252, %251
  br i1 %253, label %254, label %258

254:                                              ; preds = %248
  %255 = fsub double %251, %252
  %256 = fmul double %255, %2
  %257 = fadd double %252, %256
  store double %257, double* %249, align 8
  br label %258

258:                                              ; preds = %248, %254
  %259 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %7, i64 0, i32 3
  %260 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %8, i64 0, i32 3
  %261 = load double, double* %260, align 8
  %262 = load double, double* %259, align 8
  %263 = fcmp une double %262, %261
  br i1 %263, label %264, label %268

264:                                              ; preds = %258
  %265 = fsub double %261, %262
  %266 = fmul double %265, %2
  %267 = fadd double %262, %266
  store double %267, double* %259, align 8
  br label %268

268:                                              ; preds = %258, %264
  %269 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %7, i64 0, i32 4
  %270 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %8, i64 0, i32 4
  %271 = load double, double* %270, align 8
  %272 = load double, double* %269, align 8
  %273 = fcmp une double %272, %271
  br i1 %273, label %274, label %278

274:                                              ; preds = %268
  %275 = fsub double %271, %272
  %276 = fmul double %275, %2
  %277 = fadd double %272, %276
  store double %277, double* %269, align 8
  br label %278

278:                                              ; preds = %268, %274
  %279 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %7, i64 0, i32 5
  %280 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %8, i64 0, i32 5
  %281 = load double, double* %280, align 8
  %282 = load double, double* %279, align 8
  %283 = fcmp une double %282, %281
  br i1 %283, label %284, label %288

284:                                              ; preds = %278
  %285 = fsub double %281, %282
  %286 = fmul double %285, %2
  %287 = fadd double %282, %286
  store double %287, double* %279, align 8
  br label %288

288:                                              ; preds = %278, %284
  %289 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %7, i64 0, i32 10
  %290 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %8, i64 0, i32 10
  %291 = load double, double* %290, align 8
  %292 = load double, double* %289, align 8
  %293 = fcmp une double %292, %291
  br i1 %293, label %294, label %298

294:                                              ; preds = %288
  %295 = fsub double %291, %292
  %296 = fmul double %295, %2
  %297 = fadd double %292, %296
  store double %297, double* %289, align 8
  br label %298

298:                                              ; preds = %288, %294
  %299 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %7, i64 0, i32 11
  %300 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %8, i64 0, i32 11
  %301 = load double, double* %300, align 8
  %302 = load double, double* %299, align 8
  %303 = fcmp une double %302, %301
  br i1 %303, label %304, label %308

304:                                              ; preds = %298
  %305 = fsub double %301, %302
  %306 = fmul double %305, %2
  %307 = fadd double %302, %306
  store double %307, double* %299, align 8
  br label %308

308:                                              ; preds = %298, %304
  %309 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %7, i64 0, i32 12
  %310 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %8, i64 0, i32 12
  %311 = load double, double* %310, align 8
  %312 = load double, double* %309, align 8
  %313 = fcmp une double %312, %311
  br i1 %313, label %314, label %318

314:                                              ; preds = %308
  %315 = fsub double %311, %312
  %316 = fmul double %315, %2
  %317 = fadd double %312, %316
  store double %317, double* %309, align 8
  br label %318

318:                                              ; preds = %308, %314
  %319 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %7, i64 0, i32 13
  %320 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %8, i64 0, i32 13
  %321 = load double, double* %320, align 8
  %322 = load double, double* %319, align 8
  %323 = fcmp une double %322, %321
  br i1 %323, label %324, label %328

324:                                              ; preds = %318
  %325 = fsub double %321, %322
  %326 = fmul double %325, %2
  %327 = fadd double %322, %326
  store double %327, double* %319, align 8
  br label %328

328:                                              ; preds = %318, %324
  %329 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %7, i64 0, i32 14
  %330 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %8, i64 0, i32 14
  %331 = load double, double* %330, align 8
  %332 = load double, double* %329, align 8
  %333 = fcmp une double %332, %331
  br i1 %333, label %334, label %338

334:                                              ; preds = %328
  %335 = fsub double %331, %332
  %336 = fmul double %335, %2
  %337 = fadd double %332, %336
  store double %337, double* %329, align 8
  br label %338

338:                                              ; preds = %328, %334
  %339 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %7, i64 0, i32 15
  %340 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %8, i64 0, i32 15
  %341 = load double, double* %340, align 8
  %342 = load double, double* %339, align 8
  %343 = fcmp une double %342, %341
  br i1 %343, label %344, label %348

344:                                              ; preds = %338
  %345 = fsub double %341, %342
  %346 = fmul double %345, %2
  %347 = fadd double %342, %346
  store double %347, double* %339, align 8
  br label %348

348:                                              ; preds = %338, %344
  %349 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %7, i64 0, i32 16
  %350 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %8, i64 0, i32 16
  %351 = load double, double* %350, align 8
  %352 = load double, double* %349, align 8
  %353 = fcmp une double %352, %351
  br i1 %353, label %354, label %358

354:                                              ; preds = %348
  %355 = fsub double %351, %352
  %356 = fmul double %355, %2
  %357 = fadd double %352, %356
  store double %357, double* %349, align 8
  br label %358

358:                                              ; preds = %348, %354
  %359 = bitcast %"class.gfx::Quaternion"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %359) #19
  %360 = getelementptr inbounds %"class.gfx::Quaternion", %"class.gfx::Quaternion"* %4, i64 0, i32 2
  %361 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %7, i64 0, i32 6
  %362 = bitcast double* %361 to <2 x i64>*
  %363 = load <2 x i64>, <2 x i64>* %362, align 8, !noalias !13
  %364 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %7, i64 0, i32 8
  %365 = bitcast double* %364 to <2 x i64>*
  %366 = load <2 x i64>, <2 x i64>* %365, align 8, !noalias !13
  %367 = bitcast %"class.gfx::Quaternion"* %4 to <2 x i64>*
  store <2 x i64> %363, <2 x i64>* %367, align 16, !alias.scope !13
  %368 = bitcast double* %360 to <2 x i64>*
  store <2 x i64> %366, <2 x i64>* %368, align 16, !alias.scope !13
  %369 = bitcast %"class.gfx::Quaternion"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %369) #19
  %370 = getelementptr inbounds %"class.gfx::Quaternion", %"class.gfx::Quaternion"* %5, i64 0, i32 2
  %371 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %8, i64 0, i32 6
  %372 = bitcast double* %371 to <2 x i64>*
  %373 = load <2 x i64>, <2 x i64>* %372, align 8, !noalias !16
  %374 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %8, i64 0, i32 8
  %375 = bitcast double* %374 to <2 x i64>*
  %376 = load <2 x i64>, <2 x i64>* %375, align 8, !noalias !16
  %377 = bitcast %"class.gfx::Quaternion"* %5 to <2 x i64>*
  store <2 x i64> %373, <2 x i64>* %377, align 16, !alias.scope !16
  %378 = bitcast double* %370 to <2 x i64>*
  store <2 x i64> %376, <2 x i64>* %378, align 16, !alias.scope !16
  %379 = bitcast %"class.gfx::Quaternion"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %379) #19
  %380 = getelementptr inbounds %"class.gfx::Quaternion", %"class.gfx::Quaternion"* %6, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %379, i8 -1, i64 32, i1 false) #19
  call void @_ZNK3gfx10Quaternion5SlerpERKS0_d(%"class.gfx::Quaternion"* nonnull sret %6, %"class.gfx::Quaternion"* nonnull %4, %"class.gfx::Quaternion"* nonnull dereferenceable(32) %5, double %2) #19
  %381 = bitcast %"class.gfx::Quaternion"* %6 to <2 x i64>*
  %382 = load <2 x i64>, <2 x i64>* %381, align 16
  %383 = bitcast double* %361 to <2 x i64>*
  store <2 x i64> %382, <2 x i64>* %383, align 8
  %384 = bitcast double* %380 to <2 x i64>*
  %385 = load <2 x i64>, <2 x i64>* %384, align 16
  %386 = bitcast double* %364 to <2 x i64>*
  store <2 x i64> %385, <2 x i64>* %386, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %379) #19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %369) #19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %359) #19
  call void @_ZN5blink20TransformationMatrix9RecomposeERKNS0_14DecomposedTypeE(%"class.blink::TransformationMatrix"* %0, %"struct.blink::TransformationMatrix::DecomposedType"* nonnull dereferenceable(136) %7)
  br label %387

387:                                              ; preds = %223, %225, %358
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %219) #19
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %218) #19
  br label %388

388:                                              ; preds = %132, %387, %216
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20TransformationMatrix7Blend2DERKS0_d(%"class.blink::TransformationMatrix"*, %"class.blink::TransformationMatrix"* nocapture readonly dereferenceable(128), double) local_unnamed_addr #1 align 2 {
  %4 = alloca %"struct.blink::TransformationMatrix::Decomposed2dType", align 8
  %5 = alloca %"struct.blink::TransformationMatrix::Decomposed2dType", align 8
  %6 = bitcast %"struct.blink::TransformationMatrix::Decomposed2dType"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %6) #19
  %7 = getelementptr inbounds %"struct.blink::TransformationMatrix::Decomposed2dType", %"struct.blink::TransformationMatrix::Decomposed2dType"* %4, i64 0, i32 0
  %8 = getelementptr inbounds %"struct.blink::TransformationMatrix::Decomposed2dType", %"struct.blink::TransformationMatrix::Decomposed2dType"* %4, i64 0, i32 1
  %9 = getelementptr inbounds %"struct.blink::TransformationMatrix::Decomposed2dType", %"struct.blink::TransformationMatrix::Decomposed2dType"* %4, i64 0, i32 2
  %10 = getelementptr inbounds %"struct.blink::TransformationMatrix::Decomposed2dType", %"struct.blink::TransformationMatrix::Decomposed2dType"* %4, i64 0, i32 3
  %11 = getelementptr inbounds %"struct.blink::TransformationMatrix::Decomposed2dType", %"struct.blink::TransformationMatrix::Decomposed2dType"* %4, i64 0, i32 4
  %12 = getelementptr inbounds %"struct.blink::TransformationMatrix::Decomposed2dType", %"struct.blink::TransformationMatrix::Decomposed2dType"* %4, i64 0, i32 5
  %13 = bitcast %"struct.blink::TransformationMatrix::Decomposed2dType"* %5 to i8*
  %14 = bitcast %"struct.blink::TransformationMatrix::Decomposed2dType"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -1, i64 48, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %13) #19
  %15 = getelementptr inbounds %"struct.blink::TransformationMatrix::Decomposed2dType", %"struct.blink::TransformationMatrix::Decomposed2dType"* %5, i64 0, i32 0
  %16 = getelementptr inbounds %"struct.blink::TransformationMatrix::Decomposed2dType", %"struct.blink::TransformationMatrix::Decomposed2dType"* %5, i64 0, i32 1
  %17 = getelementptr inbounds %"struct.blink::TransformationMatrix::Decomposed2dType", %"struct.blink::TransformationMatrix::Decomposed2dType"* %5, i64 0, i32 2
  %18 = getelementptr inbounds %"struct.blink::TransformationMatrix::Decomposed2dType", %"struct.blink::TransformationMatrix::Decomposed2dType"* %5, i64 0, i32 3
  %19 = getelementptr inbounds %"struct.blink::TransformationMatrix::Decomposed2dType", %"struct.blink::TransformationMatrix::Decomposed2dType"* %5, i64 0, i32 4
  %20 = getelementptr inbounds %"struct.blink::TransformationMatrix::Decomposed2dType", %"struct.blink::TransformationMatrix::Decomposed2dType"* %5, i64 0, i32 5
  %21 = bitcast %"struct.blink::TransformationMatrix::Decomposed2dType"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 -1, i64 48, i1 false)
  %22 = call zeroext i1 @_ZNK5blink20TransformationMatrix11Decompose2DERNS0_16Decomposed2dTypeE(%"class.blink::TransformationMatrix"* %1, %"struct.blink::TransformationMatrix::Decomposed2dType"* nonnull dereferenceable(48) %4)
  br i1 %22, label %23, label %25

23:                                               ; preds = %3
  %24 = call zeroext i1 @_ZNK5blink20TransformationMatrix11Decompose2DERNS0_16Decomposed2dTypeE(%"class.blink::TransformationMatrix"* %0, %"struct.blink::TransformationMatrix::Decomposed2dType"* nonnull dereferenceable(48) %5)
  br i1 %24, label %30, label %25

25:                                               ; preds = %23, %3
  %26 = fcmp olt double %2, 5.000000e-01
  br i1 %26, label %27, label %91

27:                                               ; preds = %25
  %28 = bitcast %"class.blink::TransformationMatrix"* %0 to i8*
  %29 = bitcast %"class.blink::TransformationMatrix"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %29, i64 128, i1 false) #19
  br label %91

30:                                               ; preds = %23
  %31 = load double, double* %12, align 8
  %32 = load double, double* %20, align 8
  %33 = fsub double %31, %32
  %34 = tail call double @llvm.fabs.f64(double %33) #19
  %35 = fcmp ogt double %34, 0x400921FB54442D18
  br i1 %35, label %36, label %42

36:                                               ; preds = %30
  %37 = fcmp ogt double %31, %32
  br i1 %37, label %38, label %40

38:                                               ; preds = %36
  %39 = fadd double %31, 0xC01921FB54442D18
  store double %39, double* %12, align 8
  br label %42

40:                                               ; preds = %36
  %41 = fadd double %32, 0xC01921FB54442D18
  store double %41, double* %20, align 8
  br label %42

42:                                               ; preds = %38, %40, %30
  %43 = phi double [ %39, %38 ], [ %31, %40 ], [ %31, %30 ]
  %44 = phi double [ %32, %38 ], [ %41, %40 ], [ %32, %30 ]
  %45 = load double, double* %15, align 8
  %46 = load double, double* %7, align 8
  %47 = fcmp une double %46, %45
  br i1 %47, label %48, label %52

48:                                               ; preds = %42
  %49 = fsub double %45, %46
  %50 = fmul double %49, %2
  %51 = fadd double %46, %50
  store double %51, double* %7, align 8
  br label %52

52:                                               ; preds = %42, %48
  %53 = load double, double* %16, align 8
  %54 = load double, double* %8, align 8
  %55 = fcmp une double %54, %53
  br i1 %55, label %56, label %60

56:                                               ; preds = %52
  %57 = fsub double %53, %54
  %58 = fmul double %57, %2
  %59 = fadd double %54, %58
  store double %59, double* %8, align 8
  br label %60

60:                                               ; preds = %52, %56
  %61 = load double, double* %17, align 8
  %62 = load double, double* %9, align 8
  %63 = fcmp une double %62, %61
  br i1 %63, label %64, label %68

64:                                               ; preds = %60
  %65 = fsub double %61, %62
  %66 = fmul double %65, %2
  %67 = fadd double %62, %66
  store double %67, double* %9, align 8
  br label %68

68:                                               ; preds = %60, %64
  %69 = load double, double* %18, align 8
  %70 = load double, double* %10, align 8
  %71 = fcmp une double %70, %69
  br i1 %71, label %72, label %76

72:                                               ; preds = %68
  %73 = fsub double %69, %70
  %74 = fmul double %73, %2
  %75 = fadd double %70, %74
  store double %75, double* %10, align 8
  br label %76

76:                                               ; preds = %68, %72
  %77 = load double, double* %19, align 8
  %78 = load double, double* %11, align 8
  %79 = fcmp une double %78, %77
  br i1 %79, label %80, label %84

80:                                               ; preds = %76
  %81 = fsub double %77, %78
  %82 = fmul double %81, %2
  %83 = fadd double %78, %82
  store double %83, double* %11, align 8
  br label %84

84:                                               ; preds = %76, %80
  %85 = fcmp une double %43, %44
  br i1 %85, label %86, label %90

86:                                               ; preds = %84
  %87 = fsub double %44, %43
  %88 = fmul double %87, %2
  %89 = fadd double %43, %88
  store double %89, double* %12, align 8
  br label %90

90:                                               ; preds = %84, %86
  call void @_ZN5blink20TransformationMatrix11Recompose2DERKNS0_16Decomposed2dTypeE(%"class.blink::TransformationMatrix"* %0, %"struct.blink::TransformationMatrix::Decomposed2dType"* nonnull dereferenceable(48) %4)
  br label %91

91:                                               ; preds = %25, %27, %90
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %13) #19
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %6) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink20TransformationMatrix9DecomposeERNS0_14DecomposedTypeE(%"class.blink::TransformationMatrix"* nocapture readonly, %"struct.blink::TransformationMatrix::DecomposedType"* dereferenceable(136)) local_unnamed_addr #1 align 2 {
  %3 = alloca %"struct.blink::TransformationMatrix::Matrix4", align 16
  %4 = alloca %"struct.blink::TransformationMatrix::Matrix4", align 8
  %5 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 0
  %6 = load double, double* %5, align 8
  %7 = fcmp oeq double %6, 1.000000e+00
  br i1 %7, label %8, label %74

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 1
  %10 = load double, double* %9, align 8
  %11 = fcmp oeq double %10, 0.000000e+00
  br i1 %11, label %12, label %74

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %14 = load double, double* %13, align 8
  %15 = fcmp oeq double %14, 0.000000e+00
  br i1 %15, label %16, label %74

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %18 = load double, double* %17, align 8
  %19 = fcmp oeq double %18, 0.000000e+00
  br i1 %19, label %20, label %74

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %22 = load double, double* %21, align 8
  %23 = fcmp oeq double %22, 0.000000e+00
  br i1 %23, label %24, label %74

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  %26 = load double, double* %25, align 8
  %27 = fcmp oeq double %26, 1.000000e+00
  br i1 %27, label %28, label %74

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %30 = load double, double* %29, align 8
  %31 = fcmp oeq double %30, 0.000000e+00
  br i1 %31, label %32, label %74

32:                                               ; preds = %28
  %33 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %34 = load double, double* %33, align 8
  %35 = fcmp oeq double %34, 0.000000e+00
  br i1 %35, label %36, label %74

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %38 = load double, double* %37, align 8
  %39 = fcmp oeq double %38, 0.000000e+00
  br i1 %39, label %40, label %74

40:                                               ; preds = %36
  %41 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 1
  %42 = load double, double* %41, align 8
  %43 = fcmp oeq double %42, 0.000000e+00
  br i1 %43, label %44, label %74

44:                                               ; preds = %40
  %45 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %46 = load double, double* %45, align 8
  %47 = fcmp oeq double %46, 1.000000e+00
  br i1 %47, label %48, label %74

48:                                               ; preds = %44
  %49 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %50 = load double, double* %49, align 8
  %51 = fcmp oeq double %50, 0.000000e+00
  br i1 %51, label %52, label %74

52:                                               ; preds = %48
  %53 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %54 = load double, double* %53, align 8
  %55 = fcmp oeq double %54, 0.000000e+00
  br i1 %55, label %56, label %74

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 1
  %58 = load double, double* %57, align 8
  %59 = fcmp oeq double %58, 0.000000e+00
  br i1 %59, label %60, label %74

60:                                               ; preds = %56
  %61 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %62 = load double, double* %61, align 8
  %63 = fcmp oeq double %62, 0.000000e+00
  br i1 %63, label %64, label %74

64:                                               ; preds = %60
  %65 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %66 = load double, double* %65, align 8
  %67 = fcmp oeq double %66, 1.000000e+00
  br i1 %67, label %68, label %74

68:                                               ; preds = %64
  %69 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 3
  %70 = bitcast double* %69 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %70, i8 0, i64 104, i1 false)
  %71 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 16
  store double 1.000000e+00, double* %71, align 8
  %72 = bitcast %"struct.blink::TransformationMatrix::DecomposedType"* %1 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %72, align 8
  %73 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 2
  store double 1.000000e+00, double* %73, align 8
  br label %74

74:                                               ; preds = %2, %8, %12, %16, %20, %24, %28, %32, %36, %40, %44, %48, %52, %56, %60, %68, %64
  %75 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %76 = load double, double* %75, align 8
  %77 = fcmp oeq double %76, 0.000000e+00
  br i1 %77, label %546, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %80 = load double, double* %79, align 8
  %81 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %82 = bitcast double* %81 to <2 x double>*
  %83 = load <2 x double>, <2 x double>* %82, align 8
  %84 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %85 = load double, double* %84, align 8
  %86 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %87 = load double, double* %86, align 8
  %88 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %89 = bitcast double* %88 to <2 x double>*
  %90 = load <2 x double>, <2 x double>* %89, align 8
  %91 = shufflevector <2 x double> %90, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %92 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %93 = load double, double* %92, align 8
  %94 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %95 = load double, double* %94, align 8
  %96 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %97 = bitcast double* %96 to <2 x double>*
  %98 = load <2 x double>, <2 x double>* %97, align 8
  %99 = shufflevector <2 x double> %98, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %100 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %101 = load double, double* %100, align 8
  %102 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %103 = load double, double* %102, align 8
  %104 = bitcast %"class.blink::TransformationMatrix"* %0 to <2 x double>*
  %105 = load <2 x double>, <2 x double>* %104, align 8
  %106 = shufflevector <2 x double> %105, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %107 = insertelement <2 x double> undef, double %76, i32 0
  %108 = shufflevector <2 x double> %107, <2 x double> undef, <2 x i32> zeroinitializer
  %109 = fdiv <2 x double> %106, %108
  %110 = fdiv <2 x double> %99, %108
  %111 = insertelement <2 x double> undef, double %103, i32 0
  %112 = insertelement <2 x double> %111, double %95, i32 1
  %113 = fdiv <2 x double> %112, %108
  %114 = insertelement <2 x double> undef, double %93, i32 0
  %115 = insertelement <2 x double> %114, double %101, i32 1
  %116 = fdiv <2 x double> %115, %108
  %117 = fdiv <2 x double> %91, %108
  %118 = fdiv double %85, %76
  %119 = fdiv <2 x double> %83, %108
  %120 = insertelement <2 x double> undef, double %80, i32 0
  %121 = insertelement <2 x double> %120, double %87, i32 1
  %122 = fdiv <2 x double> %121, %108
  %123 = fdiv double %76, %76
  %124 = bitcast %"struct.blink::TransformationMatrix::Matrix4"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %124) #19
  %125 = shufflevector <2 x double> %109, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %126 = bitcast %"struct.blink::TransformationMatrix::Matrix4"* %3 to <2 x double>*
  store <2 x double> %125, <2 x double>* %126, align 16
  %127 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %3, i64 0, i32 0, i64 0, i64 2
  %128 = extractelement <2 x double> %113, i32 0
  store double %128, double* %127, align 16
  %129 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %3, i64 0, i32 0, i64 0, i64 3
  %130 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %3, i64 0, i32 0, i64 1, i64 0
  %131 = shufflevector <2 x double> %110, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %132 = bitcast double* %130 to <2 x double>*
  store <2 x double> %131, <2 x double>* %132, align 16
  %133 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %3, i64 0, i32 0, i64 1, i64 2
  %134 = extractelement <2 x double> %113, i32 1
  store double %134, double* %133, align 16
  %135 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %3, i64 0, i32 0, i64 1, i64 3
  %136 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %3, i64 0, i32 0, i64 2, i64 0
  %137 = shufflevector <2 x double> %117, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %138 = bitcast double* %136 to <2 x double>*
  store <2 x double> %137, <2 x double>* %138, align 16
  %139 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %3, i64 0, i32 0, i64 2, i64 2
  %140 = extractelement <2 x double> %122, i32 1
  store double %140, double* %139, align 16
  %141 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %3, i64 0, i32 0, i64 2, i64 3
  %142 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %3, i64 0, i32 0, i64 3, i64 0
  %143 = bitcast double* %142 to <2 x double>*
  store <2 x double> %119, <2 x double>* %143, align 16
  %144 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %3, i64 0, i32 0, i64 3, i64 2
  %145 = extractelement <2 x double> %122, i32 0
  store double %145, double* %144, align 16
  store double 0.000000e+00, double* %129, align 8
  store double 0.000000e+00, double* %135, align 8
  store double 0.000000e+00, double* %141, align 8
  %146 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %3, i64 0, i32 0, i64 3, i64 3
  store double 1.000000e+00, double* %146, align 8
  %147 = extractelement <2 x double> %110, i32 0
  %148 = shufflevector <2 x double> %122, <2 x double> %119, <2 x i32> <i32 0, i32 2>
  %149 = fmul <2 x double> %148, zeroinitializer
  %150 = shufflevector <2 x double> %122, <2 x double> %117, <2 x i32> <i32 1, i32 3>
  %151 = fsub <2 x double> %150, %149
  %152 = extractelement <2 x double> %151, i32 0
  %153 = fmul double %147, %152
  %154 = extractelement <2 x double> %119, i32 1
  %155 = fmul double %154, 0.000000e+00
  %156 = extractelement <2 x double> %117, i32 0
  %157 = fsub double %156, %155
  %158 = fmul double %134, %157
  %159 = fsub double %153, %158
  %160 = shufflevector <2 x double> %117, <2 x double> %122, <2 x i32> <i32 0, i32 3>
  %161 = shufflevector <2 x double> %122, <2 x double> %119, <2 x i32> <i32 0, i32 3>
  %162 = fmul <2 x double> %160, %161
  %163 = extractelement <2 x double> %162, i32 0
  %164 = extractelement <2 x double> %162, i32 1
  %165 = fsub double %163, %164
  %166 = fmul double %165, 0.000000e+00
  %167 = fadd double %166, %159
  %168 = shufflevector <2 x double> %110, <2 x double> %113, <2 x i32> <i32 1, i32 3>
  %169 = fmul <2 x double> %168, %151
  %170 = extractelement <2 x double> %169, i32 0
  %171 = extractelement <2 x double> %169, i32 1
  %172 = fsub double %170, %171
  %173 = shufflevector <2 x double> %117, <2 x double> %119, <2 x i32> <i32 1, i32 2>
  %174 = fmul <2 x double> %173, %122
  %175 = extractelement <2 x double> %174, i32 0
  %176 = extractelement <2 x double> %174, i32 1
  %177 = fsub double %175, %176
  %178 = fmul double %177, 0.000000e+00
  %179 = fadd double %178, %172
  %180 = extractelement <2 x double> %151, i32 1
  %181 = insertelement <2 x double> undef, double %180, i32 0
  %182 = insertelement <2 x double> %181, double %157, i32 1
  %183 = fmul <2 x double> %110, %182
  %184 = extractelement <2 x double> %183, i32 0
  %185 = extractelement <2 x double> %183, i32 1
  %186 = fsub double %185, %184
  %187 = fmul <2 x double> %117, %119
  %188 = extractelement <2 x double> %187, i32 0
  %189 = extractelement <2 x double> %187, i32 1
  %190 = fsub double %189, %188
  %191 = fmul double %190, 0.000000e+00
  %192 = fadd double %191, %186
  %193 = shufflevector <2 x double> %109, <2 x double> %110, <2 x i32> <i32 1, i32 3>
  %194 = insertelement <2 x double> undef, double %167, i32 0
  %195 = insertelement <2 x double> %194, double %165, i32 1
  %196 = fmul <2 x double> %193, %195
  %197 = shufflevector <2 x double> %109, <2 x double> %110, <2 x i32> <i32 0, i32 2>
  %198 = insertelement <2 x double> undef, double %179, i32 0
  %199 = insertelement <2 x double> %198, double %177, i32 1
  %200 = fmul <2 x double> %197, %199
  %201 = fsub <2 x double> %196, %200
  %202 = insertelement <2 x double> undef, double %192, i32 0
  %203 = insertelement <2 x double> %202, double %190, i32 1
  %204 = fmul <2 x double> %113, %203
  %205 = fadd <2 x double> %204, %201
  %206 = extractelement <2 x double> %205, i32 1
  %207 = fmul double %206, 0.000000e+00
  %208 = extractelement <2 x double> %205, i32 0
  %209 = fsub double %208, %207
  %210 = fcmp oeq double %209, 0.000000e+00
  br i1 %210, label %544, label %211

211:                                              ; preds = %78
  %212 = fcmp une <2 x double> %116, zeroinitializer
  %213 = extractelement <2 x i1> %212, i32 0
  %214 = extractelement <2 x i1> %212, i32 1
  %215 = or i1 %213, %214
  %216 = fcmp une double %118, 0.000000e+00
  %217 = or i1 %216, %215
  br i1 %217, label %218, label %295

218:                                              ; preds = %211
  %219 = bitcast %"struct.blink::TransformationMatrix::Matrix4"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %219) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %219, i8 -1, i64 128, i1 false) #19
  %220 = call fastcc zeroext i1 @_ZN5blinkL7InverseERKNS_20TransformationMatrix7Matrix4ERS1_(%"struct.blink::TransformationMatrix::Matrix4"* nonnull dereferenceable(128) %3, %"struct.blink::TransformationMatrix::Matrix4"* nonnull dereferenceable(128) %4) #19
  br i1 %220, label %221, label %294

221:                                              ; preds = %218
  %222 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %4, i64 0, i32 0, i64 0, i64 0
  %223 = load double, double* %222, align 8
  %224 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %4, i64 0, i32 0, i64 1, i64 0
  %225 = load double, double* %224, align 8
  %226 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %4, i64 0, i32 0, i64 2, i64 0
  %227 = load double, double* %226, align 8
  %228 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %4, i64 0, i32 0, i64 3, i64 0
  %229 = load double, double* %228, align 8
  %230 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %4, i64 0, i32 0, i64 0, i64 1
  %231 = load double, double* %230, align 8
  %232 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %4, i64 0, i32 0, i64 1, i64 1
  %233 = load double, double* %232, align 8
  %234 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %4, i64 0, i32 0, i64 2, i64 1
  %235 = load double, double* %234, align 8
  %236 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %4, i64 0, i32 0, i64 3, i64 1
  %237 = load double, double* %236, align 8
  %238 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %4, i64 0, i32 0, i64 0, i64 2
  %239 = load double, double* %238, align 8
  %240 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %4, i64 0, i32 0, i64 1, i64 2
  %241 = load double, double* %240, align 8
  %242 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %4, i64 0, i32 0, i64 2, i64 2
  %243 = load double, double* %242, align 8
  %244 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %4, i64 0, i32 0, i64 3, i64 2
  %245 = load double, double* %244, align 8
  %246 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %4, i64 0, i32 0, i64 0, i64 3
  %247 = load double, double* %246, align 8
  %248 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %4, i64 0, i32 0, i64 1, i64 3
  %249 = load double, double* %248, align 8
  %250 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %4, i64 0, i32 0, i64 2, i64 3
  %251 = load double, double* %250, align 8
  %252 = getelementptr inbounds %"struct.blink::TransformationMatrix::Matrix4", %"struct.blink::TransformationMatrix::Matrix4"* %4, i64 0, i32 0, i64 3, i64 3
  %253 = load double, double* %252, align 8
  %254 = shufflevector <2 x double> %116, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %255 = insertelement <2 x double> undef, double %223, i32 0
  %256 = insertelement <2 x double> %255, double %225, i32 1
  %257 = fmul <2 x double> %254, %256
  %258 = shufflevector <2 x double> %116, <2 x double> undef, <2 x i32> zeroinitializer
  %259 = insertelement <2 x double> undef, double %231, i32 0
  %260 = insertelement <2 x double> %259, double %233, i32 1
  %261 = fmul <2 x double> %258, %260
  %262 = fadd <2 x double> %257, %261
  %263 = insertelement <2 x double> undef, double %118, i32 0
  %264 = shufflevector <2 x double> %263, <2 x double> undef, <2 x i32> zeroinitializer
  %265 = insertelement <2 x double> undef, double %239, i32 0
  %266 = insertelement <2 x double> %265, double %241, i32 1
  %267 = fmul <2 x double> %264, %266
  %268 = fadd <2 x double> %262, %267
  %269 = insertelement <2 x double> undef, double %123, i32 0
  %270 = shufflevector <2 x double> %269, <2 x double> undef, <2 x i32> zeroinitializer
  %271 = insertelement <2 x double> undef, double %247, i32 0
  %272 = insertelement <2 x double> %271, double %249, i32 1
  %273 = fmul <2 x double> %270, %272
  %274 = fadd <2 x double> %268, %273
  %275 = insertelement <2 x double> undef, double %227, i32 0
  %276 = insertelement <2 x double> %275, double %229, i32 1
  %277 = fmul <2 x double> %254, %276
  %278 = insertelement <2 x double> undef, double %235, i32 0
  %279 = insertelement <2 x double> %278, double %237, i32 1
  %280 = fmul <2 x double> %258, %279
  %281 = fadd <2 x double> %277, %280
  %282 = insertelement <2 x double> undef, double %243, i32 0
  %283 = insertelement <2 x double> %282, double %245, i32 1
  %284 = fmul <2 x double> %264, %283
  %285 = fadd <2 x double> %281, %284
  %286 = insertelement <2 x double> undef, double %251, i32 0
  %287 = insertelement <2 x double> %286, double %253, i32 1
  %288 = fmul <2 x double> %270, %287
  %289 = fadd <2 x double> %285, %288
  %290 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 13
  %291 = bitcast double* %290 to <2 x double>*
  store <2 x double> %274, <2 x double>* %291, align 8
  %292 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 15
  %293 = bitcast double* %292 to <2 x double>*
  store <2 x double> %289, <2 x double>* %293, align 8
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %219) #19
  br label %299

294:                                              ; preds = %218
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %219) #19
  br label %544

295:                                              ; preds = %211
  %296 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 13
  %297 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 16
  %298 = bitcast double* %296 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %298, i8 0, i64 24, i1 false) #19
  store double 1.000000e+00, double* %297, align 8
  br label %299

299:                                              ; preds = %295, %221
  %300 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 10
  %301 = bitcast double* %300 to <2 x double>*
  store <2 x double> %119, <2 x double>* %301, align 8
  %302 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 12
  store double %145, double* %302, align 8
  %303 = fmul <2 x double> %109, %109
  %304 = extractelement <2 x double> %303, i32 0
  %305 = extractelement <2 x double> %303, i32 1
  %306 = fadd double %304, %305
  %307 = fmul double %128, %128
  %308 = fadd double %307, %306
  %309 = call double @sqrt(double %308) #19
  %310 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 0
  store double %309, double* %310, align 8
  %311 = call double @sqrt(double %308) #19
  %312 = fcmp une double %311, 0.000000e+00
  br i1 %312, label %313, label %319

313:                                              ; preds = %299
  %314 = fdiv double 1.000000e+00, %311
  %315 = insertelement <2 x double> undef, double %314, i32 0
  %316 = shufflevector <2 x double> %315, <2 x double> undef, <2 x i32> zeroinitializer
  %317 = fmul <2 x double> %109, %316
  %318 = fmul double %128, %314
  br label %319

319:                                              ; preds = %313, %299
  %320 = phi double [ %318, %313 ], [ %128, %299 ]
  %321 = phi <2 x double> [ %317, %313 ], [ %109, %299 ]
  %322 = fmul <2 x double> %110, %321
  %323 = extractelement <2 x double> %322, i32 0
  %324 = extractelement <2 x double> %322, i32 1
  %325 = fadd double %323, %324
  %326 = fmul double %134, %320
  %327 = fadd double %326, %325
  %328 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 3
  store double %327, double* %328, align 8
  %329 = fsub double -0.000000e+00, %327
  %330 = insertelement <2 x double> undef, double %329, i32 0
  %331 = shufflevector <2 x double> %330, <2 x double> undef, <2 x i32> zeroinitializer
  %332 = fmul <2 x double> %321, %331
  %333 = fadd <2 x double> %110, %332
  %334 = fmul double %320, %329
  %335 = fadd double %134, %334
  %336 = fmul <2 x double> %333, %333
  %337 = extractelement <2 x double> %336, i32 0
  %338 = extractelement <2 x double> %336, i32 1
  %339 = fadd double %338, %337
  %340 = fmul double %335, %335
  %341 = fadd double %340, %339
  %342 = call double @sqrt(double %341) #19
  %343 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 1
  store double %342, double* %343, align 8
  %344 = call double @sqrt(double %341) #19
  %345 = fcmp une double %344, 0.000000e+00
  br i1 %345, label %346, label %352

346:                                              ; preds = %319
  %347 = fdiv double 1.000000e+00, %344
  %348 = insertelement <2 x double> undef, double %347, i32 0
  %349 = shufflevector <2 x double> %348, <2 x double> undef, <2 x i32> zeroinitializer
  %350 = fmul <2 x double> %349, %333
  %351 = fmul double %347, %335
  br label %352

352:                                              ; preds = %346, %319
  %353 = phi double [ %351, %346 ], [ %335, %319 ]
  %354 = phi <2 x double> [ %350, %346 ], [ %333, %319 ]
  %355 = load double, double* %343, align 8
  %356 = load double, double* %328, align 8
  %357 = fdiv double %356, %355
  store double %357, double* %328, align 8
  %358 = fmul <2 x double> %117, %321
  %359 = extractelement <2 x double> %358, i32 0
  %360 = extractelement <2 x double> %358, i32 1
  %361 = fadd double %359, %360
  %362 = fmul double %140, %320
  %363 = fadd double %362, %361
  %364 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 4
  store double %363, double* %364, align 8
  %365 = fsub double -0.000000e+00, %363
  %366 = insertelement <2 x double> undef, double %365, i32 0
  %367 = shufflevector <2 x double> %366, <2 x double> undef, <2 x i32> zeroinitializer
  %368 = fmul <2 x double> %321, %367
  %369 = fadd <2 x double> %117, %368
  %370 = fmul double %320, %365
  %371 = fadd double %140, %370
  %372 = fmul <2 x double> %369, %354
  %373 = extractelement <2 x double> %372, i32 0
  %374 = extractelement <2 x double> %372, i32 1
  %375 = fadd double %374, %373
  %376 = fmul double %371, %353
  %377 = fadd double %376, %375
  %378 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 5
  store double %377, double* %378, align 8
  %379 = fsub double -0.000000e+00, %377
  %380 = insertelement <2 x double> undef, double %379, i32 0
  %381 = shufflevector <2 x double> %380, <2 x double> undef, <2 x i32> zeroinitializer
  %382 = fmul <2 x double> %354, %381
  %383 = fadd <2 x double> %369, %382
  %384 = fmul double %353, %379
  %385 = fadd double %371, %384
  %386 = fmul <2 x double> %383, %383
  %387 = extractelement <2 x double> %386, i32 0
  %388 = extractelement <2 x double> %386, i32 1
  %389 = fadd double %388, %387
  %390 = fmul double %385, %385
  %391 = fadd double %390, %389
  %392 = call double @sqrt(double %391) #19
  %393 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 2
  store double %392, double* %393, align 8
  %394 = call double @sqrt(double %391) #19
  %395 = fcmp une double %394, 0.000000e+00
  br i1 %395, label %396, label %402

396:                                              ; preds = %352
  %397 = fdiv double 1.000000e+00, %394
  %398 = insertelement <2 x double> undef, double %397, i32 0
  %399 = shufflevector <2 x double> %398, <2 x double> undef, <2 x i32> zeroinitializer
  %400 = fmul <2 x double> %383, %399
  %401 = fmul double %385, %397
  br label %402

402:                                              ; preds = %396, %352
  %403 = phi double [ %401, %396 ], [ %385, %352 ]
  %404 = phi <2 x double> [ %400, %396 ], [ %383, %352 ]
  %405 = load double, double* %393, align 8
  %406 = bitcast double* %364 to <2 x double>*
  %407 = load <2 x double>, <2 x double>* %406, align 8
  %408 = insertelement <2 x double> undef, double %405, i32 0
  %409 = shufflevector <2 x double> %408, <2 x double> undef, <2 x i32> zeroinitializer
  %410 = fdiv <2 x double> %407, %409
  %411 = bitcast double* %364 to <2 x double>*
  store <2 x double> %410, <2 x double>* %411, align 8
  %412 = extractelement <2 x double> %354, i32 1
  %413 = insertelement <2 x double> undef, double %353, i32 0
  %414 = insertelement <2 x double> %413, double %403, i32 1
  %415 = shufflevector <2 x double> %404, <2 x double> %354, <2 x i32> <i32 1, i32 3>
  %416 = fmul <2 x double> %414, %415
  %417 = extractelement <2 x double> %416, i32 0
  %418 = extractelement <2 x double> %416, i32 1
  %419 = fsub double %417, %418
  %420 = extractelement <2 x double> %404, i32 0
  %421 = insertelement <2 x double> undef, double %403, i32 0
  %422 = shufflevector <2 x double> %421, <2 x double> %404, <2 x i32> <i32 0, i32 2>
  %423 = fmul <2 x double> %354, %422
  %424 = extractelement <2 x double> %354, i32 0
  %425 = shufflevector <2 x double> %413, <2 x double> %354, <2 x i32> <i32 0, i32 2>
  %426 = fmul <2 x double> %425, %404
  %427 = fsub <2 x double> %423, %426
  %428 = extractelement <2 x double> %321, i32 1
  %429 = extractelement <2 x double> %321, i32 0
  %430 = fmul double %429, %419
  %431 = insertelement <2 x double> undef, double %428, i32 0
  %432 = insertelement <2 x double> %431, double %320, i32 1
  %433 = fmul <2 x double> %432, %427
  %434 = extractelement <2 x double> %433, i32 0
  %435 = fadd double %434, %430
  %436 = extractelement <2 x double> %433, i32 1
  %437 = fadd double %436, %435
  %438 = fcmp olt double %437, 0.000000e+00
  %439 = insertelement <2 x double> %404, double %353, i32 0
  %440 = insertelement <2 x double> undef, double %420, i32 0
  %441 = insertelement <2 x double> %440, double %320, i32 1
  br i1 %438, label %442, label %455

442:                                              ; preds = %402
  %443 = bitcast %"struct.blink::TransformationMatrix::DecomposedType"* %1 to <2 x double>*
  %444 = load <2 x double>, <2 x double>* %443, align 8
  %445 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %444
  %446 = bitcast %"struct.blink::TransformationMatrix::DecomposedType"* %1 to <2 x double>*
  store <2 x double> %445, <2 x double>* %446, align 8
  %447 = fsub double -0.000000e+00, %405
  store double %447, double* %393, align 8
  %448 = fsub double -0.000000e+00, %428
  %449 = fsub double -0.000000e+00, %429
  %450 = fsub double -0.000000e+00, %412
  %451 = fsub double -0.000000e+00, %424
  %452 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %439
  %453 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %441
  %454 = fsub double -0.000000e+00, %403
  br label %455

455:                                              ; preds = %442, %402
  %456 = phi double [ %450, %442 ], [ %412, %402 ]
  %457 = phi double [ %449, %442 ], [ %429, %402 ]
  %458 = phi double [ %454, %442 ], [ %403, %402 ]
  %459 = phi double [ %451, %442 ], [ %424, %402 ]
  %460 = phi double [ %448, %442 ], [ %428, %402 ]
  %461 = phi <2 x double> [ %452, %442 ], [ %439, %402 ]
  %462 = phi <2 x double> [ %453, %442 ], [ %441, %402 ]
  %463 = fadd double %459, %460
  %464 = fadd double %458, %463
  %465 = fadd double %464, 1.000000e+00
  %466 = fcmp ogt double %465, 1.000000e-03
  br i1 %466, label %467, label %479

467:                                              ; preds = %455
  %468 = call double @sqrt(double %465) #19
  %469 = fdiv double 5.000000e-01, %468
  %470 = fsub <2 x double> %461, %462
  %471 = insertelement <2 x double> undef, double %469, i32 0
  %472 = shufflevector <2 x double> %471, <2 x double> undef, <2 x i32> zeroinitializer
  %473 = fmul <2 x double> %470, %472
  %474 = fsub double %457, %456
  %475 = insertelement <2 x double> undef, double %474, i32 0
  %476 = insertelement <2 x double> %475, double %468, i32 1
  %477 = insertelement <2 x double> %471, double 5.000000e-01, i32 1
  %478 = fmul <2 x double> %476, %477
  br label %537

479:                                              ; preds = %455
  %480 = fcmp ogt double %460, %459
  %481 = fcmp ogt double %460, %458
  %482 = and i1 %480, %481
  br i1 %482, label %483, label %502

483:                                              ; preds = %479
  %484 = fadd double %460, 1.000000e+00
  %485 = fsub double %484, %459
  %486 = fsub double %485, %458
  %487 = call double @sqrt(double %486) #19
  %488 = fdiv double 5.000000e-01, %487
  %489 = fsub double %456, %457
  %490 = insertelement <2 x double> undef, double %487, i32 0
  %491 = insertelement <2 x double> %490, double %489, i32 1
  %492 = insertelement <2 x double> <double 5.000000e-01, double undef>, double %488, i32 1
  %493 = fmul <2 x double> %491, %492
  %494 = shufflevector <2 x double> %461, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %495 = shufflevector <2 x double> %462, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %496 = fadd <2 x double> %494, %495
  %497 = fsub <2 x double> %494, %495
  %498 = shufflevector <2 x double> %496, <2 x double> %497, <2 x i32> <i32 0, i32 3>
  %499 = insertelement <2 x double> undef, double %488, i32 0
  %500 = shufflevector <2 x double> %499, <2 x double> undef, <2 x i32> zeroinitializer
  %501 = fmul <2 x double> %498, %500
  br label %537

502:                                              ; preds = %479
  %503 = fcmp ogt double %459, %458
  %504 = fsub double 1.000000e+00, %460
  br i1 %503, label %505, label %521

505:                                              ; preds = %502
  %506 = fadd double %459, %504
  %507 = fsub double %506, %458
  %508 = call double @sqrt(double %507) #19
  %509 = fdiv double 5.000000e-01, %508
  %510 = fadd double %456, %457
  %511 = insertelement <2 x double> undef, double %510, i32 0
  %512 = insertelement <2 x double> %511, double %508, i32 1
  %513 = insertelement <2 x double> undef, double %509, i32 0
  %514 = insertelement <2 x double> %513, double 5.000000e-01, i32 1
  %515 = fmul <2 x double> %512, %514
  %516 = fadd <2 x double> %462, %461
  %517 = fsub <2 x double> %461, %462
  %518 = shufflevector <2 x double> %516, <2 x double> %517, <2 x i32> <i32 0, i32 3>
  %519 = shufflevector <2 x double> %513, <2 x double> undef, <2 x i32> zeroinitializer
  %520 = fmul <2 x double> %518, %519
  br label %537

521:                                              ; preds = %502
  %522 = fsub double %504, %459
  %523 = fadd double %458, %522
  %524 = call double @sqrt(double %523) #19
  %525 = fdiv double 5.000000e-01, %524
  %526 = shufflevector <2 x double> %461, <2 x double> %462, <2 x i32> <i32 1, i32 2>
  %527 = shufflevector <2 x double> %462, <2 x double> %461, <2 x i32> <i32 1, i32 2>
  %528 = fadd <2 x double> %526, %527
  %529 = insertelement <2 x double> undef, double %525, i32 0
  %530 = shufflevector <2 x double> %529, <2 x double> undef, <2 x i32> zeroinitializer
  %531 = fmul <2 x double> %528, %530
  %532 = fsub double %457, %456
  %533 = insertelement <2 x double> undef, double %524, i32 0
  %534 = insertelement <2 x double> %533, double %532, i32 1
  %535 = insertelement <2 x double> <double 5.000000e-01, double undef>, double %525, i32 1
  %536 = fmul <2 x double> %534, %535
  br label %537

537:                                              ; preds = %521, %505, %483, %467
  %538 = phi <2 x double> [ %473, %467 ], [ %493, %483 ], [ %515, %505 ], [ %531, %521 ]
  %539 = phi <2 x double> [ %478, %467 ], [ %501, %483 ], [ %520, %505 ], [ %536, %521 ]
  %540 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 6
  %541 = bitcast double* %540 to <2 x double>*
  store <2 x double> %538, <2 x double>* %541, align 8
  %542 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 8
  %543 = bitcast double* %542 to <2 x double>*
  store <2 x double> %539, <2 x double>* %543, align 8
  br label %544

544:                                              ; preds = %78, %294, %537
  %545 = phi i1 [ true, %537 ], [ false, %294 ], [ false, %78 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %124) #19
  br label %546

546:                                              ; preds = %544, %74
  %547 = phi i1 [ false, %74 ], [ %545, %544 ]
  ret i1 %547
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20TransformationMatrix9RecomposeERKNS0_14DecomposedTypeE(%"class.blink::TransformationMatrix"*, %"struct.blink::TransformationMatrix::DecomposedType"* nocapture readonly dereferenceable(136)) local_unnamed_addr #8 align 2 {
  %3 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 0
  store double 1.000000e+00, double* %3, align 8
  %4 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 1
  %5 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  %6 = bitcast double* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 32, i1 false) #19
  store double 1.000000e+00, double* %5, align 8
  %7 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %8 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %9 = bitcast double* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 32, i1 false) #19
  store double 1.000000e+00, double* %8, align 8
  %10 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %11 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %12 = bitcast double* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 32, i1 false) #19
  store double 1.000000e+00, double* %11, align 8
  %13 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 13
  %14 = bitcast double* %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %17 = bitcast double* %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 14
  %19 = bitcast double* %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %22 = bitcast double* %21 to i64*
  store i64 %20, i64* %22, align 8
  %23 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 15
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast double* %10 to i64*
  store i64 %25, i64* %26, align 8
  %27 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 16
  %28 = bitcast double* %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast double* %11 to i64*
  store i64 %29, i64* %30, align 8
  %31 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 10
  %32 = bitcast double* %31 to <2 x double>*
  %33 = load <2 x double>, <2 x double>* %32, align 8
  %34 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 12
  %35 = load double, double* %34, align 8
  %36 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %37 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %38 = fmul double %35, 0.000000e+00
  %39 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %40 = extractelement <2 x double> %33, i32 1
  %41 = extractelement <2 x double> %33, i32 0
  %42 = fmul <2 x double> %33, zeroinitializer
  %43 = shufflevector <2 x double> %42, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %44 = fadd <2 x double> %33, %43
  %45 = insertelement <2 x double> undef, double %38, i32 0
  %46 = shufflevector <2 x double> %45, <2 x double> undef, <2 x i32> zeroinitializer
  %47 = fadd <2 x double> %44, %46
  %48 = fadd <2 x double> %47, zeroinitializer
  %49 = bitcast double* %39 to <2 x double>*
  store <2 x double> %48, <2 x double>* %49, align 8
  %50 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %51 = extractelement <2 x double> %42, i32 1
  %52 = extractelement <2 x double> %42, i32 0
  %53 = fadd double %52, %51
  %54 = fadd double %35, %53
  %55 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %56 = fadd double %54, 0.000000e+00
  store double %56, double* %55, align 8
  %57 = bitcast i64 %15 to double
  %58 = fmul double %41, %57
  %59 = bitcast i64 %20 to double
  %60 = fmul double %40, %59
  %61 = fadd double %58, %60
  %62 = bitcast i64 %25 to double
  %63 = fmul double %35, %62
  %64 = fadd double %61, %63
  %65 = bitcast i64 %29 to double
  %66 = fadd double %64, %65
  store double %66, double* %11, align 8
  %67 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 6
  %68 = load double, double* %67, align 8
  %69 = fmul double %68, %68
  %70 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 7
  %71 = load double, double* %70, align 8
  %72 = fmul double %68, %71
  %73 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 8
  %74 = load double, double* %73, align 8
  %75 = fmul double %68, %74
  %76 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 9
  %77 = load double, double* %76, align 8
  %78 = fmul double %68, %77
  %79 = fmul double %71, %71
  %80 = fmul double %71, %74
  %81 = fmul double %71, %77
  %82 = fmul double %74, %74
  %83 = fmul double %74, %77
  %84 = fadd double %79, %82
  %85 = fmul double %84, 2.000000e+00
  %86 = fsub double 1.000000e+00, %85
  %87 = fadd double %72, %83
  %88 = fmul double %87, 2.000000e+00
  %89 = fsub double %75, %81
  %90 = fmul double %89, 2.000000e+00
  %91 = fsub double %72, %83
  %92 = fmul double %91, 2.000000e+00
  %93 = fadd double %69, %82
  %94 = fmul double %93, 2.000000e+00
  %95 = fsub double 1.000000e+00, %94
  %96 = fadd double %80, %78
  %97 = fmul double %96, 2.000000e+00
  %98 = fadd double %75, %81
  %99 = fmul double %98, 2.000000e+00
  %100 = fsub double %80, %78
  %101 = fmul double %100, 2.000000e+00
  %102 = fadd double %69, %79
  %103 = fmul double %102, 2.000000e+00
  %104 = fsub double 1.000000e+00, %103
  %105 = bitcast %"class.blink::TransformationMatrix"* %0 to <2 x double>*
  %106 = load <2 x double>, <2 x double>* %105, align 1
  %107 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1
  %108 = bitcast [4 x double]* %107 to <2 x double>*
  %109 = load <2 x double>, <2 x double>* %108, align 1
  %110 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2
  %111 = bitcast [4 x double]* %110 to <2 x double>*
  %112 = load <2 x double>, <2 x double>* %111, align 1
  %113 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3
  %114 = bitcast [4 x double]* %113 to <2 x double>*
  %115 = load <2 x double>, <2 x double>* %114, align 1
  %116 = insertelement <2 x double> undef, double %86, i32 0
  %117 = shufflevector <2 x double> %116, <2 x double> undef, <2 x i32> zeroinitializer
  %118 = insertelement <2 x double> undef, double %88, i32 0
  %119 = shufflevector <2 x double> %118, <2 x double> undef, <2 x i32> zeroinitializer
  %120 = insertelement <2 x double> undef, double %90, i32 0
  %121 = shufflevector <2 x double> %120, <2 x double> undef, <2 x i32> zeroinitializer
  %122 = fmul <2 x double> %106, %117
  %123 = fmul <2 x double> %109, %119
  %124 = fmul <2 x double> %112, %121
  %125 = fmul <2 x double> %115, zeroinitializer
  %126 = bitcast double* %50 to <2 x double>*
  %127 = load <2 x double>, <2 x double>* %126, align 1
  %128 = bitcast double* %7 to <2 x double>*
  %129 = load <2 x double>, <2 x double>* %128, align 1
  %130 = bitcast double* %8 to <2 x double>*
  %131 = load <2 x double>, <2 x double>* %130, align 1
  %132 = bitcast double* %55 to <2 x double>*
  %133 = load <2 x double>, <2 x double>* %132, align 1
  %134 = fadd <2 x double> %122, %123
  %135 = fadd <2 x double> %124, %134
  %136 = fadd <2 x double> %125, %135
  store <2 x double> %136, <2 x double>* %105, align 1
  %137 = fmul <2 x double> %117, %127
  %138 = fmul <2 x double> %119, %129
  %139 = fmul <2 x double> %121, %131
  %140 = fmul <2 x double> %133, zeroinitializer
  %141 = fadd <2 x double> %137, %138
  %142 = fadd <2 x double> %141, %139
  %143 = fadd <2 x double> %142, %140
  store <2 x double> %143, <2 x double>* %126, align 1
  %144 = insertelement <2 x double> undef, double %92, i32 0
  %145 = shufflevector <2 x double> %144, <2 x double> undef, <2 x i32> zeroinitializer
  %146 = insertelement <2 x double> undef, double %95, i32 0
  %147 = shufflevector <2 x double> %146, <2 x double> undef, <2 x i32> zeroinitializer
  %148 = insertelement <2 x double> undef, double %97, i32 0
  %149 = shufflevector <2 x double> %148, <2 x double> undef, <2 x i32> zeroinitializer
  %150 = fmul <2 x double> %106, %145
  %151 = fmul <2 x double> %109, %147
  %152 = fmul <2 x double> %112, %149
  %153 = fadd <2 x double> %150, %151
  %154 = fadd <2 x double> %152, %153
  %155 = fadd <2 x double> %125, %154
  store <2 x double> %155, <2 x double>* %108, align 1
  %156 = fmul <2 x double> %127, %145
  %157 = fmul <2 x double> %147, %129
  %158 = fmul <2 x double> %149, %131
  %159 = fadd <2 x double> %156, %157
  %160 = fadd <2 x double> %159, %158
  %161 = fadd <2 x double> %160, %140
  store <2 x double> %161, <2 x double>* %128, align 1
  %162 = insertelement <2 x double> undef, double %99, i32 0
  %163 = shufflevector <2 x double> %162, <2 x double> undef, <2 x i32> zeroinitializer
  %164 = insertelement <2 x double> undef, double %101, i32 0
  %165 = shufflevector <2 x double> %164, <2 x double> undef, <2 x i32> zeroinitializer
  %166 = insertelement <2 x double> undef, double %104, i32 0
  %167 = shufflevector <2 x double> %166, <2 x double> undef, <2 x i32> zeroinitializer
  %168 = fmul <2 x double> %106, %163
  %169 = fmul <2 x double> %109, %165
  %170 = fmul <2 x double> %112, %167
  %171 = fadd <2 x double> %168, %169
  %172 = fadd <2 x double> %170, %171
  %173 = fadd <2 x double> %125, %172
  store <2 x double> %173, <2 x double>* %111, align 1
  %174 = fmul <2 x double> %127, %163
  %175 = fmul <2 x double> %165, %129
  %176 = fmul <2 x double> %167, %131
  %177 = fadd <2 x double> %174, %175
  %178 = fadd <2 x double> %177, %176
  %179 = fadd <2 x double> %178, %140
  store <2 x double> %179, <2 x double>* %130, align 1
  %180 = fmul <2 x double> %106, zeroinitializer
  %181 = fmul <2 x double> %109, zeroinitializer
  %182 = fmul <2 x double> %112, zeroinitializer
  %183 = fadd <2 x double> %180, %181
  %184 = fadd <2 x double> %183, %182
  %185 = fadd <2 x double> %115, %184
  store <2 x double> %185, <2 x double>* %114, align 1
  %186 = fmul <2 x double> %127, zeroinitializer
  %187 = fmul <2 x double> %129, zeroinitializer
  %188 = fmul <2 x double> %131, zeroinitializer
  %189 = fadd <2 x double> %186, %187
  %190 = fadd <2 x double> %189, %188
  %191 = fadd <2 x double> %133, %190
  store <2 x double> %191, <2 x double>* %132, align 1
  %192 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 5
  %193 = load double, double* %192, align 8
  %194 = fcmp une double %193, 0.000000e+00
  %195 = bitcast <2 x double> %136 to <2 x i64>
  %196 = bitcast <2 x double> %143 to <2 x i64>
  %197 = bitcast <2 x double> %155 to <2 x i64>
  %198 = bitcast <2 x double> %161 to <2 x i64>
  %199 = bitcast <2 x double> %173 to <2 x i64>
  %200 = bitcast <2 x double> %179 to <2 x i64>
  %201 = shufflevector <2 x double> %179, <2 x double> %173, <2 x i32> <i32 1, i32 3>
  %202 = shufflevector <2 x double> %161, <2 x double> %155, <2 x i32> <i32 1, i32 3>
  %203 = shufflevector <2 x double> %143, <2 x double> %136, <2 x i32> <i32 1, i32 3>
  %204 = shufflevector <2 x i64> %200, <2 x i64> %199, <2 x i32> <i32 0, i32 2>
  %205 = shufflevector <2 x i64> %198, <2 x i64> %197, <2 x i32> <i32 0, i32 2>
  %206 = shufflevector <2 x i64> %196, <2 x i64> %195, <2 x i32> <i32 0, i32 2>
  br i1 %194, label %207, label %256

207:                                              ; preds = %2
  %208 = fmul <2 x double> %155, zeroinitializer
  %209 = fmul <2 x double> %173, zeroinitializer
  %210 = fmul <2 x double> %185, zeroinitializer
  %211 = fadd <2 x double> %136, %208
  %212 = fadd <2 x double> %209, %211
  %213 = fadd <2 x double> %210, %212
  store <2 x double> %213, <2 x double>* %105, align 1
  %214 = fmul <2 x double> %161, zeroinitializer
  %215 = fmul <2 x double> %179, zeroinitializer
  %216 = fmul <2 x double> %191, zeroinitializer
  %217 = fadd <2 x double> %143, %214
  %218 = fadd <2 x double> %215, %217
  %219 = fadd <2 x double> %216, %218
  store <2 x double> %219, <2 x double>* %126, align 1
  %220 = fmul <2 x double> %136, zeroinitializer
  %221 = fadd <2 x double> %155, %220
  %222 = fadd <2 x double> %209, %221
  %223 = fadd <2 x double> %210, %222
  store <2 x double> %223, <2 x double>* %108, align 1
  %224 = fmul <2 x double> %143, zeroinitializer
  %225 = fadd <2 x double> %161, %224
  %226 = fadd <2 x double> %215, %225
  %227 = fadd <2 x double> %216, %226
  store <2 x double> %227, <2 x double>* %128, align 1
  %228 = insertelement <2 x double> undef, double %193, i32 0
  %229 = shufflevector <2 x double> %228, <2 x double> undef, <2 x i32> zeroinitializer
  %230 = fmul <2 x double> %155, %229
  %231 = fadd <2 x double> %220, %230
  %232 = fadd <2 x double> %173, %231
  %233 = fadd <2 x double> %210, %232
  store <2 x double> %233, <2 x double>* %111, align 1
  %234 = fmul <2 x double> %161, %229
  %235 = fadd <2 x double> %224, %234
  %236 = fadd <2 x double> %179, %235
  %237 = fadd <2 x double> %216, %236
  store <2 x double> %237, <2 x double>* %130, align 1
  %238 = fadd <2 x double> %220, %208
  %239 = fadd <2 x double> %209, %238
  %240 = fadd <2 x double> %185, %239
  store <2 x double> %240, <2 x double>* %114, align 1
  %241 = fadd <2 x double> %224, %214
  %242 = fadd <2 x double> %215, %241
  %243 = fadd <2 x double> %191, %242
  store <2 x double> %243, <2 x double>* %132, align 1
  %244 = bitcast <2 x double> %213 to <2 x i64>
  %245 = bitcast <2 x double> %219 to <2 x i64>
  %246 = bitcast <2 x double> %223 to <2 x i64>
  %247 = bitcast <2 x double> %227 to <2 x i64>
  %248 = bitcast <2 x double> %233 to <2 x i64>
  %249 = bitcast <2 x double> %237 to <2 x i64>
  %250 = shufflevector <2 x double> %237, <2 x double> %233, <2 x i32> <i32 1, i32 3>
  %251 = shufflevector <2 x double> %227, <2 x double> %223, <2 x i32> <i32 1, i32 3>
  %252 = shufflevector <2 x double> %219, <2 x double> %213, <2 x i32> <i32 1, i32 3>
  %253 = shufflevector <2 x i64> %249, <2 x i64> %248, <2 x i32> <i32 0, i32 2>
  %254 = shufflevector <2 x i64> %247, <2 x i64> %246, <2 x i32> <i32 0, i32 2>
  %255 = shufflevector <2 x i64> %245, <2 x i64> %244, <2 x i32> <i32 0, i32 2>
  br label %256

256:                                              ; preds = %207, %2
  %257 = phi <2 x double> [ %243, %207 ], [ %191, %2 ]
  %258 = phi <2 x double> [ %237, %207 ], [ %179, %2 ]
  %259 = phi <2 x double> [ %227, %207 ], [ %161, %2 ]
  %260 = phi <2 x double> [ %219, %207 ], [ %143, %2 ]
  %261 = phi <2 x double> [ %240, %207 ], [ %185, %2 ]
  %262 = phi <2 x double> [ %233, %207 ], [ %173, %2 ]
  %263 = phi <2 x double> [ %223, %207 ], [ %155, %2 ]
  %264 = phi <2 x double> [ %213, %207 ], [ %136, %2 ]
  %265 = phi <2 x double> [ %250, %207 ], [ %201, %2 ]
  %266 = phi <2 x double> [ %251, %207 ], [ %202, %2 ]
  %267 = phi <2 x double> [ %252, %207 ], [ %203, %2 ]
  %268 = phi <2 x i64> [ %253, %207 ], [ %204, %2 ]
  %269 = phi <2 x i64> [ %254, %207 ], [ %205, %2 ]
  %270 = phi <2 x i64> [ %255, %207 ], [ %206, %2 ]
  %271 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 4
  %272 = load double, double* %271, align 8
  %273 = fcmp une double %272, 0.000000e+00
  br i1 %273, label %274, label %323

274:                                              ; preds = %256
  %275 = fmul <2 x double> %263, zeroinitializer
  %276 = fmul <2 x double> %262, zeroinitializer
  %277 = fmul <2 x double> %261, zeroinitializer
  %278 = fadd <2 x double> %264, %275
  %279 = fadd <2 x double> %278, %276
  %280 = fadd <2 x double> %279, %277
  store <2 x double> %280, <2 x double>* %105, align 1
  %281 = fmul <2 x double> %259, zeroinitializer
  %282 = fmul <2 x double> %258, zeroinitializer
  %283 = fmul <2 x double> %257, zeroinitializer
  %284 = fadd <2 x double> %260, %281
  %285 = fadd <2 x double> %284, %282
  %286 = fadd <2 x double> %285, %283
  store <2 x double> %286, <2 x double>* %126, align 1
  %287 = fmul <2 x double> %264, zeroinitializer
  %288 = fadd <2 x double> %287, %263
  %289 = fadd <2 x double> %288, %276
  %290 = fadd <2 x double> %289, %277
  store <2 x double> %290, <2 x double>* %108, align 1
  %291 = fmul <2 x double> %260, zeroinitializer
  %292 = fadd <2 x double> %291, %259
  %293 = fadd <2 x double> %292, %282
  %294 = fadd <2 x double> %293, %283
  store <2 x double> %294, <2 x double>* %128, align 1
  %295 = insertelement <2 x double> undef, double %272, i32 0
  %296 = shufflevector <2 x double> %295, <2 x double> undef, <2 x i32> zeroinitializer
  %297 = fmul <2 x double> %296, %264
  %298 = fadd <2 x double> %297, %275
  %299 = fadd <2 x double> %262, %298
  %300 = fadd <2 x double> %299, %277
  store <2 x double> %300, <2 x double>* %111, align 1
  %301 = fmul <2 x double> %296, %260
  %302 = fadd <2 x double> %301, %281
  %303 = fadd <2 x double> %258, %302
  %304 = fadd <2 x double> %303, %283
  store <2 x double> %304, <2 x double>* %130, align 1
  %305 = fadd <2 x double> %287, %275
  %306 = fadd <2 x double> %305, %276
  %307 = fadd <2 x double> %261, %306
  store <2 x double> %307, <2 x double>* %114, align 1
  %308 = fadd <2 x double> %291, %281
  %309 = fadd <2 x double> %308, %282
  %310 = fadd <2 x double> %257, %309
  store <2 x double> %310, <2 x double>* %132, align 1
  %311 = bitcast <2 x double> %280 to <2 x i64>
  %312 = bitcast <2 x double> %286 to <2 x i64>
  %313 = bitcast <2 x double> %290 to <2 x i64>
  %314 = bitcast <2 x double> %294 to <2 x i64>
  %315 = bitcast <2 x double> %300 to <2 x i64>
  %316 = bitcast <2 x double> %304 to <2 x i64>
  %317 = shufflevector <2 x double> %304, <2 x double> %300, <2 x i32> <i32 1, i32 3>
  %318 = shufflevector <2 x double> %294, <2 x double> %290, <2 x i32> <i32 1, i32 3>
  %319 = shufflevector <2 x double> %286, <2 x double> %280, <2 x i32> <i32 1, i32 3>
  %320 = shufflevector <2 x i64> %316, <2 x i64> %315, <2 x i32> <i32 0, i32 2>
  %321 = shufflevector <2 x i64> %314, <2 x i64> %313, <2 x i32> <i32 0, i32 2>
  %322 = shufflevector <2 x i64> %312, <2 x i64> %311, <2 x i32> <i32 0, i32 2>
  br label %323

323:                                              ; preds = %274, %256
  %324 = phi <2 x double> [ %310, %274 ], [ %257, %256 ]
  %325 = phi <2 x double> [ %304, %274 ], [ %258, %256 ]
  %326 = phi <2 x double> [ %294, %274 ], [ %259, %256 ]
  %327 = phi <2 x double> [ %286, %274 ], [ %260, %256 ]
  %328 = phi <2 x double> [ %307, %274 ], [ %261, %256 ]
  %329 = phi <2 x double> [ %300, %274 ], [ %262, %256 ]
  %330 = phi <2 x double> [ %290, %274 ], [ %263, %256 ]
  %331 = phi <2 x double> [ %280, %274 ], [ %264, %256 ]
  %332 = phi <2 x double> [ %317, %274 ], [ %265, %256 ]
  %333 = phi <2 x double> [ %318, %274 ], [ %266, %256 ]
  %334 = phi <2 x double> [ %319, %274 ], [ %267, %256 ]
  %335 = phi <2 x i64> [ %320, %274 ], [ %268, %256 ]
  %336 = phi <2 x i64> [ %321, %274 ], [ %269, %256 ]
  %337 = phi <2 x i64> [ %322, %274 ], [ %270, %256 ]
  %338 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 3
  %339 = load double, double* %338, align 8
  %340 = fcmp une double %339, 0.000000e+00
  br i1 %340, label %341, label %388

341:                                              ; preds = %323
  %342 = fmul <2 x double> %330, zeroinitializer
  %343 = fmul <2 x double> %329, zeroinitializer
  %344 = fmul <2 x double> %328, zeroinitializer
  %345 = fadd <2 x double> %331, %342
  %346 = fadd <2 x double> %345, %343
  %347 = fadd <2 x double> %346, %344
  store <2 x double> %347, <2 x double>* %105, align 1
  %348 = fmul <2 x double> %326, zeroinitializer
  %349 = fmul <2 x double> %325, zeroinitializer
  %350 = fmul <2 x double> %324, zeroinitializer
  %351 = fadd <2 x double> %327, %348
  %352 = fadd <2 x double> %351, %349
  %353 = fadd <2 x double> %352, %350
  store <2 x double> %353, <2 x double>* %126, align 1
  %354 = insertelement <2 x double> undef, double %339, i32 0
  %355 = shufflevector <2 x double> %354, <2 x double> undef, <2 x i32> zeroinitializer
  %356 = fmul <2 x double> %355, %331
  %357 = fadd <2 x double> %356, %330
  %358 = fadd <2 x double> %357, %343
  %359 = fadd <2 x double> %358, %344
  store <2 x double> %359, <2 x double>* %108, align 1
  %360 = fmul <2 x double> %355, %327
  %361 = fadd <2 x double> %360, %326
  %362 = fadd <2 x double> %361, %349
  %363 = fadd <2 x double> %362, %350
  store <2 x double> %363, <2 x double>* %128, align 1
  %364 = fmul <2 x double> %331, zeroinitializer
  %365 = fadd <2 x double> %364, %342
  %366 = fadd <2 x double> %329, %365
  %367 = fadd <2 x double> %366, %344
  store <2 x double> %367, <2 x double>* %111, align 1
  %368 = fmul <2 x double> %327, zeroinitializer
  %369 = fadd <2 x double> %368, %348
  %370 = fadd <2 x double> %325, %369
  %371 = fadd <2 x double> %370, %350
  store <2 x double> %371, <2 x double>* %130, align 1
  %372 = fadd <2 x double> %365, %343
  %373 = fadd <2 x double> %328, %372
  store <2 x double> %373, <2 x double>* %114, align 1
  %374 = fadd <2 x double> %369, %349
  %375 = fadd <2 x double> %324, %374
  store <2 x double> %375, <2 x double>* %132, align 1
  %376 = bitcast <2 x double> %347 to <2 x i64>
  %377 = bitcast <2 x double> %353 to <2 x i64>
  %378 = bitcast <2 x double> %359 to <2 x i64>
  %379 = bitcast <2 x double> %363 to <2 x i64>
  %380 = bitcast <2 x double> %367 to <2 x i64>
  %381 = bitcast <2 x double> %371 to <2 x i64>
  %382 = shufflevector <2 x double> %371, <2 x double> %367, <2 x i32> <i32 1, i32 3>
  %383 = shufflevector <2 x double> %363, <2 x double> %359, <2 x i32> <i32 1, i32 3>
  %384 = shufflevector <2 x double> %353, <2 x double> %347, <2 x i32> <i32 1, i32 3>
  %385 = shufflevector <2 x i64> %381, <2 x i64> %380, <2 x i32> <i32 0, i32 2>
  %386 = shufflevector <2 x i64> %379, <2 x i64> %378, <2 x i32> <i32 0, i32 2>
  %387 = shufflevector <2 x i64> %377, <2 x i64> %376, <2 x i32> <i32 0, i32 2>
  br label %388

388:                                              ; preds = %341, %323
  %389 = phi <2 x double> [ %382, %341 ], [ %332, %323 ]
  %390 = phi <2 x double> [ %383, %341 ], [ %333, %323 ]
  %391 = phi <2 x double> [ %384, %341 ], [ %334, %323 ]
  %392 = phi <2 x i64> [ %385, %341 ], [ %335, %323 ]
  %393 = phi <2 x i64> [ %386, %341 ], [ %336, %323 ]
  %394 = phi <2 x i64> [ %387, %341 ], [ %337, %323 ]
  %395 = bitcast <2 x i64> %394 to <2 x double>
  %396 = bitcast <2 x i64> %394 to <2 x double>
  %397 = bitcast <2 x i64> %393 to <2 x double>
  %398 = bitcast <2 x i64> %393 to <2 x double>
  %399 = bitcast <2 x i64> %392 to <2 x double>
  %400 = bitcast <2 x i64> %392 to <2 x double>
  %401 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 0
  %402 = load double, double* %401, align 8
  %403 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 1
  %404 = load double, double* %403, align 8
  %405 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %1, i64 0, i32 2
  %406 = load double, double* %405, align 8
  %407 = insertelement <2 x double> undef, double %402, i32 0
  %408 = shufflevector <2 x double> %407, <2 x double> undef, <2 x i32> zeroinitializer
  %409 = shufflevector <2 x double> %395, <2 x double> %391, <2 x i32> <i32 1, i32 3>
  %410 = fmul <2 x double> %408, %409
  %411 = bitcast %"class.blink::TransformationMatrix"* %0 to <2 x double>*
  store <2 x double> %410, <2 x double>* %411, align 8
  %412 = shufflevector <2 x double> %396, <2 x double> %391, <2 x i32> <i32 0, i32 2>
  %413 = fmul <2 x double> %408, %412
  %414 = bitcast double* %50 to <2 x double>*
  store <2 x double> %413, <2 x double>* %414, align 8
  %415 = insertelement <2 x double> undef, double %404, i32 0
  %416 = shufflevector <2 x double> %415, <2 x double> undef, <2 x i32> zeroinitializer
  %417 = shufflevector <2 x double> %397, <2 x double> %390, <2 x i32> <i32 1, i32 3>
  %418 = fmul <2 x double> %416, %417
  %419 = bitcast double* %36 to <2 x double>*
  store <2 x double> %418, <2 x double>* %419, align 8
  %420 = shufflevector <2 x double> %398, <2 x double> %390, <2 x i32> <i32 0, i32 2>
  %421 = fmul <2 x double> %416, %420
  %422 = bitcast double* %7 to <2 x double>*
  store <2 x double> %421, <2 x double>* %422, align 8
  %423 = insertelement <2 x double> undef, double %406, i32 0
  %424 = shufflevector <2 x double> %423, <2 x double> undef, <2 x i32> zeroinitializer
  %425 = shufflevector <2 x double> %399, <2 x double> %389, <2 x i32> <i32 1, i32 3>
  %426 = fmul <2 x double> %424, %425
  %427 = bitcast double* %37 to <2 x double>*
  store <2 x double> %426, <2 x double>* %427, align 8
  %428 = shufflevector <2 x double> %400, <2 x double> %389, <2 x i32> <i32 0, i32 2>
  %429 = fmul <2 x double> %424, %428
  %430 = bitcast double* %8 to <2 x double>*
  store <2 x double> %429, <2 x double>* %430, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink20TransformationMatrix11Decompose2DERNS0_16Decomposed2dTypeE(%"class.blink::TransformationMatrix"* nocapture readonly, %"struct.blink::TransformationMatrix::Decomposed2dType"* nocapture dereferenceable(48)) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.logging::LogMessage", align 8
  %4 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %5 = load double, double* %4, align 8
  %6 = fcmp oeq double %5, 0.000000e+00
  br i1 %6, label %7, label %43

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %9 = load double, double* %8, align 8
  %10 = fcmp oeq double %9, 0.000000e+00
  br i1 %10, label %11, label %43

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %13 = load double, double* %12, align 8
  %14 = fcmp oeq double %13, 0.000000e+00
  br i1 %14, label %15, label %43

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 1
  %17 = load double, double* %16, align 8
  %18 = fcmp oeq double %17, 0.000000e+00
  br i1 %18, label %19, label %43

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %21 = load double, double* %20, align 8
  %22 = fcmp oeq double %21, 1.000000e+00
  br i1 %22, label %23, label %43

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %25 = load double, double* %24, align 8
  %26 = fcmp oeq double %25, 0.000000e+00
  br i1 %26, label %27, label %43

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %29 = load double, double* %28, align 8
  %30 = fcmp oeq double %29, 0.000000e+00
  br i1 %30, label %31, label %43

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %33 = load double, double* %32, align 8
  %34 = fcmp une double %33, 0.000000e+00
  br i1 %34, label %43, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %37 = load double, double* %36, align 8
  %38 = fcmp une double %37, 0.000000e+00
  br i1 %38, label %43, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %41 = load double, double* %40, align 8
  %42 = fcmp une double %41, 1.000000e+00
  br i1 %42, label %43, label %50

43:                                               ; preds = %27, %39, %35, %31, %23, %19, %15, %11, %7, %2
  %44 = tail call zeroext i1 @_ZN7logging22ShouldCreateLogMessageEi(i32 2) #19
  br i1 %44, label %45, label %107

45:                                               ; preds = %43
  %46 = bitcast %"class.logging::LogMessage"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 304, i8* nonnull %46) #19
  call void @_ZN7logging10LogMessageC1EPKcii(%"class.logging::LogMessage"* nonnull %3, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str, i64 0, i64 0), i32 1829, i32 2) #19
  %47 = getelementptr inbounds %"class.logging::LogMessage", %"class.logging::LogMessage"* %3, i64 0, i32 2
  %48 = bitcast %"class.std::__1::basic_ostringstream"* %47 to %"class.std::__1::basic_ostream"*
  %49 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %48, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i64 0, i64 0), i64 57) #19
  call void @_ZN7logging10LogMessageD1Ev(%"class.logging::LogMessage"* nonnull %3) #19
  call void @llvm.lifetime.end.p0i8(i64 304, i8* nonnull %46) #19
  br label %107

50:                                               ; preds = %39
  %51 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 0
  %52 = load double, double* %51, align 8
  %53 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %54 = load double, double* %53, align 8
  %55 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 1
  %56 = load double, double* %55, align 8
  %57 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  %58 = load double, double* %57, align 8
  %59 = fmul double %52, %58
  %60 = fmul double %54, %56
  %61 = fsub double %59, %60
  %62 = fcmp oeq double %61, 0.000000e+00
  br i1 %62, label %107, label %63

63:                                               ; preds = %50
  %64 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3
  %65 = bitcast [4 x double]* %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = getelementptr inbounds %"struct.blink::TransformationMatrix::Decomposed2dType", %"struct.blink::TransformationMatrix::Decomposed2dType"* %1, i64 0, i32 3
  %68 = bitcast double* %67 to i64*
  store i64 %66, i64* %68, align 8
  %69 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 1
  %70 = bitcast double* %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = getelementptr inbounds %"struct.blink::TransformationMatrix::Decomposed2dType", %"struct.blink::TransformationMatrix::Decomposed2dType"* %1, i64 0, i32 4
  %73 = bitcast double* %72 to i64*
  store i64 %71, i64* %73, align 8
  %74 = getelementptr inbounds %"struct.blink::TransformationMatrix::Decomposed2dType", %"struct.blink::TransformationMatrix::Decomposed2dType"* %1, i64 0, i32 0
  %75 = getelementptr inbounds %"struct.blink::TransformationMatrix::Decomposed2dType", %"struct.blink::TransformationMatrix::Decomposed2dType"* %1, i64 0, i32 1
  %76 = bitcast %"struct.blink::TransformationMatrix::Decomposed2dType"* %1 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %76, align 8
  %77 = fcmp olt double %61, 0.000000e+00
  br i1 %77, label %78, label %81

78:                                               ; preds = %63
  %79 = fcmp olt double %52, %58
  %80 = select i1 %79, double* %74, double* %75
  store double -1.000000e+00, double* %80, align 8
  br label %81

81:                                               ; preds = %78, %63
  %82 = fmul double %52, %52
  %83 = fmul double %56, %56
  %84 = fadd double %82, %83
  %85 = tail call double @sqrt(double %84) #19
  %86 = load double, double* %74, align 8
  %87 = fmul double %85, %86
  store double %87, double* %74, align 8
  %88 = fdiv double %52, %87
  %89 = fdiv double %56, %87
  %90 = fmul double %54, %88
  %91 = fmul double %58, %89
  %92 = fadd double %90, %91
  %93 = fmul double %88, %92
  %94 = fsub double %54, %93
  %95 = fmul double %89, %92
  %96 = fsub double %58, %95
  %97 = fmul double %94, %94
  %98 = fmul double %96, %96
  %99 = fadd double %97, %98
  %100 = tail call double @sqrt(double %99) #19
  %101 = load double, double* %75, align 8
  %102 = fmul double %100, %101
  store double %102, double* %75, align 8
  %103 = fdiv double %92, %102
  %104 = getelementptr inbounds %"struct.blink::TransformationMatrix::Decomposed2dType", %"struct.blink::TransformationMatrix::Decomposed2dType"* %1, i64 0, i32 2
  store double %103, double* %104, align 8
  %105 = tail call double @atan2(double %89, double %88) #19
  %106 = getelementptr inbounds %"struct.blink::TransformationMatrix::Decomposed2dType", %"struct.blink::TransformationMatrix::Decomposed2dType"* %1, i64 0, i32 5
  store double %105, double* %106, align 8
  br label %107

107:                                              ; preds = %45, %43, %81, %50
  %108 = phi i1 [ true, %81 ], [ false, %50 ], [ false, %43 ], [ false, %45 ]
  ret i1 %108
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20TransformationMatrix11Recompose2DERKNS0_16Decomposed2dTypeE(%"class.blink::TransformationMatrix"*, %"struct.blink::TransformationMatrix::Decomposed2dType"* nocapture readonly dereferenceable(48)) local_unnamed_addr #8 align 2 {
  %3 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 0
  store double 1.000000e+00, double* %3, align 8
  %4 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 1
  %5 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  %6 = bitcast double* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 32, i1 false) #19
  store double 1.000000e+00, double* %5, align 8
  %7 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %8 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %9 = bitcast double* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 32, i1 false) #19
  store double 1.000000e+00, double* %8, align 8
  %10 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %11 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %12 = bitcast double* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 32, i1 false) #19
  store double 1.000000e+00, double* %11, align 8
  %13 = getelementptr inbounds %"struct.blink::TransformationMatrix::Decomposed2dType", %"struct.blink::TransformationMatrix::Decomposed2dType"* %1, i64 0, i32 3
  %14 = bitcast double* %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %17 = bitcast double* %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = getelementptr inbounds %"struct.blink::TransformationMatrix::Decomposed2dType", %"struct.blink::TransformationMatrix::Decomposed2dType"* %1, i64 0, i32 4
  %19 = bitcast double* %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 1
  %22 = bitcast double* %21 to i64*
  store i64 %20, i64* %22, align 8
  %23 = getelementptr inbounds %"struct.blink::TransformationMatrix::Decomposed2dType", %"struct.blink::TransformationMatrix::Decomposed2dType"* %1, i64 0, i32 5
  %24 = load double, double* %23, align 8
  %25 = tail call double @cos(double %24) #19
  %26 = load double, double* %23, align 8
  %27 = tail call double @sin(double %26) #19
  store double %25, double* %3, align 8
  %28 = fsub double -0.000000e+00, %27
  %29 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  store double %28, double* %29, align 8
  store double %27, double* %4, align 8
  store double %25, double* %5, align 8
  %30 = getelementptr inbounds %"struct.blink::TransformationMatrix::Decomposed2dType", %"struct.blink::TransformationMatrix::Decomposed2dType"* %1, i64 0, i32 2
  %31 = load double, double* %30, align 8
  %32 = fcmp une double %31, 0.000000e+00
  br i1 %32, label %43, label %33

33:                                               ; preds = %2
  %34 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %35 = bitcast double* %34 to <2 x double>*
  %36 = load <2 x double>, <2 x double>* %35, align 8
  %37 = bitcast double* %7 to <2 x double>*
  %38 = load <2 x double>, <2 x double>* %37, align 8
  %39 = insertelement <2 x double> undef, double %25, i32 0
  %40 = insertelement <2 x double> %39, double %27, i32 1
  %41 = insertelement <2 x double> undef, double %28, i32 0
  %42 = insertelement <2 x double> %41, double %25, i32 1
  br label %99

43:                                               ; preds = %2
  %44 = bitcast %"class.blink::TransformationMatrix"* %0 to <2 x double>*
  %45 = load <2 x double>, <2 x double>* %44, align 1
  %46 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1
  %47 = bitcast [4 x double]* %46 to <2 x double>*
  %48 = load <2 x double>, <2 x double>* %47, align 1
  %49 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2
  %50 = bitcast [4 x double]* %49 to <2 x double>*
  %51 = load <2 x double>, <2 x double>* %50, align 1
  %52 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3
  %53 = bitcast [4 x double]* %52 to <2 x double>*
  %54 = load <2 x double>, <2 x double>* %53, align 1
  %55 = fmul <2 x double> %48, zeroinitializer
  %56 = fmul <2 x double> %51, zeroinitializer
  %57 = fmul <2 x double> %54, zeroinitializer
  %58 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %59 = bitcast double* %58 to <2 x double>*
  %60 = load <2 x double>, <2 x double>* %59, align 1
  %61 = bitcast double* %7 to <2 x double>*
  %62 = load <2 x double>, <2 x double>* %61, align 1
  %63 = bitcast double* %8 to <2 x double>*
  %64 = load <2 x double>, <2 x double>* %63, align 1
  %65 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %66 = bitcast double* %65 to <2 x double>*
  %67 = load <2 x double>, <2 x double>* %66, align 1
  %68 = fadd <2 x double> %45, %55
  %69 = fadd <2 x double> %68, %56
  %70 = fadd <2 x double> %69, %57
  store <2 x double> %70, <2 x double>* %44, align 1
  %71 = fmul <2 x double> %62, zeroinitializer
  %72 = fmul <2 x double> %64, zeroinitializer
  %73 = fmul <2 x double> %67, zeroinitializer
  %74 = fadd <2 x double> %60, %71
  %75 = fadd <2 x double> %74, %72
  %76 = fadd <2 x double> %75, %73
  store <2 x double> %76, <2 x double>* %59, align 1
  %77 = insertelement <2 x double> undef, double %31, i32 0
  %78 = shufflevector <2 x double> %77, <2 x double> undef, <2 x i32> zeroinitializer
  %79 = fmul <2 x double> %78, %45
  %80 = fadd <2 x double> %79, %48
  %81 = fadd <2 x double> %80, %56
  %82 = fadd <2 x double> %81, %57
  store <2 x double> %82, <2 x double>* %47, align 1
  %83 = fmul <2 x double> %78, %60
  %84 = fadd <2 x double> %83, %62
  %85 = fadd <2 x double> %84, %72
  %86 = fadd <2 x double> %85, %73
  store <2 x double> %86, <2 x double>* %61, align 1
  %87 = fmul <2 x double> %45, zeroinitializer
  %88 = fadd <2 x double> %87, %55
  %89 = fadd <2 x double> %51, %88
  %90 = fadd <2 x double> %89, %57
  store <2 x double> %90, <2 x double>* %50, align 1
  %91 = fmul <2 x double> %60, zeroinitializer
  %92 = fadd <2 x double> %91, %71
  %93 = fadd <2 x double> %64, %92
  %94 = fadd <2 x double> %93, %73
  store <2 x double> %94, <2 x double>* %63, align 1
  %95 = fadd <2 x double> %88, %56
  %96 = fadd <2 x double> %54, %95
  store <2 x double> %96, <2 x double>* %53, align 1
  %97 = fadd <2 x double> %92, %72
  %98 = fadd <2 x double> %67, %97
  store <2 x double> %98, <2 x double>* %66, align 1
  br label %99

99:                                               ; preds = %33, %43
  %100 = phi <2 x double> [ %70, %43 ], [ %40, %33 ]
  %101 = phi <2 x double> [ %76, %43 ], [ %36, %33 ]
  %102 = phi <2 x double> [ %82, %43 ], [ %42, %33 ]
  %103 = phi <2 x double> [ %86, %43 ], [ %38, %33 ]
  %104 = getelementptr inbounds %"struct.blink::TransformationMatrix::Decomposed2dType", %"struct.blink::TransformationMatrix::Decomposed2dType"* %1, i64 0, i32 0
  %105 = load double, double* %104, align 8
  %106 = getelementptr inbounds %"struct.blink::TransformationMatrix::Decomposed2dType", %"struct.blink::TransformationMatrix::Decomposed2dType"* %1, i64 0, i32 1
  %107 = load double, double* %106, align 8
  %108 = insertelement <2 x double> undef, double %105, i32 0
  %109 = shufflevector <2 x double> %108, <2 x double> undef, <2 x i32> zeroinitializer
  %110 = fmul <2 x double> %109, %100
  %111 = bitcast %"class.blink::TransformationMatrix"* %0 to <2 x double>*
  store <2 x double> %110, <2 x double>* %111, align 8
  %112 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %113 = fmul <2 x double> %109, %101
  %114 = bitcast double* %112 to <2 x double>*
  store <2 x double> %113, <2 x double>* %114, align 8
  %115 = insertelement <2 x double> undef, double %107, i32 0
  %116 = shufflevector <2 x double> %115, <2 x double> undef, <2 x i32> zeroinitializer
  %117 = fmul <2 x double> %116, %102
  %118 = bitcast double* %29 to <2 x double>*
  store <2 x double> %117, <2 x double>* %118, align 8
  %119 = fmul <2 x double> %116, %103
  %120 = bitcast double* %7 to <2 x double>*
  store <2 x double> %119, <2 x double>* %120, align 8
  ret void
}

declare zeroext i1 @_ZN7logging22ShouldCreateLogMessageEi(i32) local_unnamed_addr #3

declare void @_ZN7logging10LogMessageC1EPKcii(%"class.logging::LogMessage"*, i8*, i32, i32) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10LogMessageD1Ev(%"class.logging::LogMessage"*) unnamed_addr #15

; Function Attrs: nofree nounwind
declare double @atan2(double, double) local_unnamed_addr #9

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink20TransformationMatrix20IsIntegerTranslationEv(%"class.blink::TransformationMatrix"* nocapture readonly) local_unnamed_addr #14 align 2 {
  %2 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 0
  %3 = load double, double* %2, align 8
  %4 = fcmp oeq double %3, 1.000000e+00
  br i1 %4, label %5, label %70

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 1
  %7 = load double, double* %6, align 8
  %8 = fcmp oeq double %7, 0.000000e+00
  br i1 %8, label %9, label %70

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %11 = load double, double* %10, align 8
  %12 = fcmp oeq double %11, 0.000000e+00
  br i1 %12, label %13, label %70

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %15 = load double, double* %14, align 8
  %16 = fcmp oeq double %15, 0.000000e+00
  br i1 %16, label %17, label %70

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %19 = load double, double* %18, align 8
  %20 = fcmp oeq double %19, 0.000000e+00
  br i1 %20, label %21, label %70

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  %23 = load double, double* %22, align 8
  %24 = fcmp oeq double %23, 1.000000e+00
  br i1 %24, label %25, label %70

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %27 = load double, double* %26, align 8
  %28 = fcmp oeq double %27, 0.000000e+00
  br i1 %28, label %29, label %70

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %31 = load double, double* %30, align 8
  %32 = fcmp oeq double %31, 0.000000e+00
  br i1 %32, label %33, label %70

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %35 = load double, double* %34, align 8
  %36 = fcmp oeq double %35, 0.000000e+00
  br i1 %36, label %37, label %70

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 1
  %39 = load double, double* %38, align 8
  %40 = fcmp oeq double %39, 0.000000e+00
  br i1 %40, label %41, label %70

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %43 = load double, double* %42, align 8
  %44 = fcmp oeq double %43, 1.000000e+00
  br i1 %44, label %45, label %70

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %47 = load double, double* %46, align 8
  %48 = fcmp oeq double %47, 0.000000e+00
  br i1 %48, label %49, label %70

49:                                               ; preds = %45
  %50 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %51 = load double, double* %50, align 8
  %52 = fcmp oeq double %51, 1.000000e+00
  br i1 %52, label %53, label %70

53:                                               ; preds = %49
  %54 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %55 = load double, double* %54, align 8
  %56 = fcmp une double %55, 0.000000e+00
  br i1 %56, label %70, label %57

57:                                               ; preds = %53
  %58 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %59 = load double, double* %58, align 8
  %60 = fptosi double %59 to i32
  %61 = sitofp i32 %60 to double
  %62 = fcmp une double %59, %61
  br i1 %62, label %70, label %63

63:                                               ; preds = %57
  %64 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 1
  %65 = load double, double* %64, align 8
  %66 = fptosi double %65 to i32
  %67 = sitofp i32 %66 to double
  %68 = fcmp une double %65, %67
  br i1 %68, label %70, label %69

69:                                               ; preds = %63
  br label %70

70:                                               ; preds = %1, %5, %9, %13, %17, %21, %25, %29, %33, %37, %41, %45, %57, %63, %53, %49, %69
  %71 = phi i1 [ true, %69 ], [ false, %49 ], [ false, %53 ], [ false, %63 ], [ false, %57 ], [ false, %45 ], [ false, %41 ], [ false, %37 ], [ false, %33 ], [ false, %29 ], [ false, %25 ], [ false, %21 ], [ false, %17 ], [ false, %13 ], [ false, %9 ], [ false, %5 ], [ false, %1 ]
  ret i1 %71
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink20TransformationMatrix24Preserves2dAxisAlignmentEv(%"class.blink::TransformationMatrix"* nocapture readonly) local_unnamed_addr #11 align 2 {
  %2 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %3 = load double, double* %2, align 8
  %4 = fcmp une double %3, 0.000000e+00
  br i1 %4, label %34, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %7 = load double, double* %6, align 8
  %8 = fcmp une double %7, 0.000000e+00
  br i1 %8, label %34, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 0
  %11 = load double, double* %10, align 8
  %12 = tail call double @llvm.fabs.f64(double %11) #19
  %13 = fcmp ogt double %12, 0x3E80000000000000
  %14 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 1
  %15 = load double, double* %14, align 8
  %16 = tail call double @llvm.fabs.f64(double %15) #19
  %17 = fcmp ogt double %16, 0x3E80000000000000
  %18 = and i1 %13, %17
  %19 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %20 = load double, double* %19, align 8
  %21 = tail call double @llvm.fabs.f64(double %20) #19
  %22 = fcmp ogt double %21, 0x3E80000000000000
  %23 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  %24 = load double, double* %23, align 8
  %25 = tail call double @llvm.fabs.f64(double %24) #19
  %26 = fcmp ogt double %25, 0x3E80000000000000
  %27 = and i1 %17, %26
  %28 = and i1 %22, %26
  %29 = and i1 %13, %22
  %30 = or i1 %29, %27
  %31 = or i1 %18, %30
  %32 = or i1 %28, %31
  %33 = xor i1 %32, true
  br label %34

34:                                               ; preds = %1, %5, %9
  %35 = phi i1 [ %33, %9 ], [ false, %5 ], [ false, %1 ]
  ret i1 %35
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK5blink20TransformationMatrix23ToColumnMajorFloatArrayERA16_f(%"class.blink::TransformationMatrix"* nocapture readonly, [16 x float]* nocapture dereferenceable(64)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 0
  %4 = load double, double* %3, align 8
  %5 = fptrunc double %4 to float
  %6 = getelementptr inbounds [16 x float], [16 x float]* %1, i64 0, i64 0
  store float %5, float* %6, align 4
  %7 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 1
  %8 = load double, double* %7, align 8
  %9 = fptrunc double %8 to float
  %10 = getelementptr inbounds [16 x float], [16 x float]* %1, i64 0, i64 1
  store float %9, float* %10, align 4
  %11 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %12 = load double, double* %11, align 8
  %13 = fptrunc double %12 to float
  %14 = getelementptr inbounds [16 x float], [16 x float]* %1, i64 0, i64 2
  store float %13, float* %14, align 4
  %15 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %16 = load double, double* %15, align 8
  %17 = fptrunc double %16 to float
  %18 = getelementptr inbounds [16 x float], [16 x float]* %1, i64 0, i64 3
  store float %17, float* %18, align 4
  %19 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %20 = load double, double* %19, align 8
  %21 = fptrunc double %20 to float
  %22 = getelementptr inbounds [16 x float], [16 x float]* %1, i64 0, i64 4
  store float %21, float* %22, align 4
  %23 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  %24 = load double, double* %23, align 8
  %25 = fptrunc double %24 to float
  %26 = getelementptr inbounds [16 x float], [16 x float]* %1, i64 0, i64 5
  store float %25, float* %26, align 4
  %27 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %28 = load double, double* %27, align 8
  %29 = fptrunc double %28 to float
  %30 = getelementptr inbounds [16 x float], [16 x float]* %1, i64 0, i64 6
  store float %29, float* %30, align 4
  %31 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %32 = load double, double* %31, align 8
  %33 = fptrunc double %32 to float
  %34 = getelementptr inbounds [16 x float], [16 x float]* %1, i64 0, i64 7
  store float %33, float* %34, align 4
  %35 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %36 = load double, double* %35, align 8
  %37 = fptrunc double %36 to float
  %38 = getelementptr inbounds [16 x float], [16 x float]* %1, i64 0, i64 8
  store float %37, float* %38, align 4
  %39 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 1
  %40 = load double, double* %39, align 8
  %41 = fptrunc double %40 to float
  %42 = getelementptr inbounds [16 x float], [16 x float]* %1, i64 0, i64 9
  store float %41, float* %42, align 4
  %43 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %44 = load double, double* %43, align 8
  %45 = fptrunc double %44 to float
  %46 = getelementptr inbounds [16 x float], [16 x float]* %1, i64 0, i64 10
  store float %45, float* %46, align 4
  %47 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %48 = load double, double* %47, align 8
  %49 = fptrunc double %48 to float
  %50 = getelementptr inbounds [16 x float], [16 x float]* %1, i64 0, i64 11
  store float %49, float* %50, align 4
  %51 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %52 = load double, double* %51, align 8
  %53 = fptrunc double %52 to float
  %54 = getelementptr inbounds [16 x float], [16 x float]* %1, i64 0, i64 12
  store float %53, float* %54, align 4
  %55 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 1
  %56 = load double, double* %55, align 8
  %57 = fptrunc double %56 to float
  %58 = getelementptr inbounds [16 x float], [16 x float]* %1, i64 0, i64 13
  store float %57, float* %58, align 4
  %59 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %60 = load double, double* %59, align 8
  %61 = fptrunc double %60 to float
  %62 = getelementptr inbounds [16 x float], [16 x float]* %1, i64 0, i64 14
  store float %61, float* %62, align 4
  %63 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %64 = load double, double* %63, align 8
  %65 = fptrunc double %64 to float
  %66 = getelementptr inbounds [16 x float], [16 x float]* %1, i64 0, i64 15
  store float %65, float* %66, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20TransformationMatrix12ToSkMatrix44ERKS0_(%class.SkMatrix44* noalias sret, %"class.blink::TransformationMatrix"* nocapture readonly dereferenceable(128)) local_unnamed_addr #1 align 2 {
  %3 = bitcast %class.SkMatrix44* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 bitcast (%class.SkMatrix44* @__const._ZN5blink20TransformationMatrix12ToSkMatrix44ERKS0_.ret to i8*), i64 68, i1 false)
  %4 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 0
  %5 = load double, double* %4, align 8
  %6 = fptrunc double %5 to float
  %7 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 1
  %8 = load double, double* %7, align 8
  %9 = fptrunc double %8 to float
  %10 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 2
  %11 = load double, double* %10, align 8
  %12 = fptrunc double %11 to float
  %13 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 3
  %14 = load double, double* %13, align 8
  %15 = fptrunc double %14 to float
  %16 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 0
  %17 = load double, double* %16, align 8
  %18 = fptrunc double %17 to float
  %19 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 1
  %20 = load double, double* %19, align 8
  %21 = fptrunc double %20 to float
  %22 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 2
  %23 = load double, double* %22, align 8
  %24 = fptrunc double %23 to float
  %25 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 3
  %26 = load double, double* %25, align 8
  %27 = fptrunc double %26 to float
  %28 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 0
  %29 = load double, double* %28, align 8
  %30 = fptrunc double %29 to float
  %31 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 1
  %32 = load double, double* %31, align 8
  %33 = fptrunc double %32 to float
  %34 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 2
  %35 = load double, double* %34, align 8
  %36 = fptrunc double %35 to float
  %37 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 3
  %38 = load double, double* %37, align 8
  %39 = fptrunc double %38 to float
  %40 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 0
  %41 = load double, double* %40, align 8
  %42 = fptrunc double %41 to float
  %43 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 1
  %44 = load double, double* %43, align 8
  %45 = fptrunc double %44 to float
  %46 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 2
  %47 = load double, double* %46, align 8
  %48 = fptrunc double %47 to float
  %49 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 3
  %50 = load double, double* %49, align 8
  %51 = fptrunc double %50 to float
  tail call void @_ZN10SkMatrix446set4x4Effffffffffffffff(%class.SkMatrix44* %0, float %6, float %9, float %12, float %15, float %18, float %21, float %24, float %27, float %30, float %33, float %36, float %39, float %42, float %45, float %48, float %51) #19
  ret void
}

declare void @_ZN10SkMatrix446set4x4Effffffffffffffff(%class.SkMatrix44*, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink20TransformationMatrix7ToSkM44ERKS0_(%class.SkM44* noalias nocapture sret, %"class.blink::TransformationMatrix"* nocapture readonly dereferenceable(128)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 0
  %4 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 0
  %5 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 0
  %6 = bitcast %"class.blink::TransformationMatrix"* %1 to <4 x double>*
  %7 = load <4 x double>, <4 x double>* %6, align 8
  %8 = fptrunc <4 x double> %7 to <4 x float>
  %9 = bitcast double* %3 to <4 x double>*
  %10 = load <4 x double>, <4 x double>* %9, align 8
  %11 = fptrunc <4 x double> %10 to <4 x float>
  %12 = bitcast double* %4 to <4 x double>*
  %13 = load <4 x double>, <4 x double>* %12, align 8
  %14 = fptrunc <4 x double> %13 to <4 x float>
  %15 = bitcast double* %5 to <4 x double>*
  %16 = load <4 x double>, <4 x double>* %15, align 8
  %17 = fptrunc <4 x double> %16 to <4 x float>
  %18 = bitcast %class.SkM44* %0 to <4 x float>*
  store <4 x float> %8, <4 x float>* %18, align 4
  %19 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 4
  %20 = bitcast float* %19 to <4 x float>*
  store <4 x float> %11, <4 x float>* %20, align 4
  %21 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 8
  %22 = bitcast float* %21 to <4 x float>*
  store <4 x float> %14, <4 x float>* %22, align 4
  %23 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 12
  %24 = bitcast float* %23 to <4 x float>*
  store <4 x float> %17, <4 x float>* %24, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20TransformationMatrix11ToTransformERKS0_(%"class.gfx::Transform"* noalias sret, %"class.blink::TransformationMatrix"* nocapture readonly dereferenceable(128)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 0
  %4 = load double, double* %3, align 8
  %5 = fptrunc double %4 to float
  %6 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 0
  %7 = load double, double* %6, align 8
  %8 = fptrunc double %7 to float
  %9 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 0
  %10 = load double, double* %9, align 8
  %11 = fptrunc double %10 to float
  %12 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 0
  %13 = load double, double* %12, align 8
  %14 = fptrunc double %13 to float
  %15 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 1
  %16 = load double, double* %15, align 8
  %17 = fptrunc double %16 to float
  %18 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 1
  %19 = load double, double* %18, align 8
  %20 = fptrunc double %19 to float
  %21 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 1
  %22 = load double, double* %21, align 8
  %23 = fptrunc double %22 to float
  %24 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 1
  %25 = load double, double* %24, align 8
  %26 = fptrunc double %25 to float
  %27 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 2
  %28 = load double, double* %27, align 8
  %29 = fptrunc double %28 to float
  %30 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 2
  %31 = load double, double* %30, align 8
  %32 = fptrunc double %31 to float
  %33 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 2
  %34 = load double, double* %33, align 8
  %35 = fptrunc double %34 to float
  %36 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 2
  %37 = load double, double* %36, align 8
  %38 = fptrunc double %37 to float
  %39 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 3
  %40 = load double, double* %39, align 8
  %41 = fptrunc double %40 to float
  %42 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 3
  %43 = load double, double* %42, align 8
  %44 = fptrunc double %43 to float
  %45 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 3
  %46 = load double, double* %45, align 8
  %47 = fptrunc double %46 to float
  %48 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 3
  %49 = load double, double* %48, align 8
  %50 = fptrunc double %49 to float
  tail call void @_ZN3gfx9TransformC1Effffffffffffffff(%"class.gfx::Transform"* %0, float %5, float %8, float %11, float %14, float %17, float %20, float %23, float %26, float %29, float %32, float %35, float %38, float %41, float %44, float %47, float %50) #19
  ret void
}

declare void @_ZN3gfx9TransformC1Effffffffffffffff(%"class.gfx::Transform"*, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink20TransformationMatrix8ToStringEb(%"class.blink::TransformationMatrix"* readonly, i1 zeroext) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca %"struct.blink::TransformationMatrix::DecomposedType", align 8
  %5 = alloca %"class.WTF::StringAppend", align 8
  br i1 %1, label %6, label %41

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 0
  %8 = load double, double* %7, align 8
  %9 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %12 = load double, double* %11, align 8
  %13 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %14 = load double, double* %13, align 8
  %15 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 1
  %16 = load double, double* %15, align 8
  %17 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  %18 = load double, double* %17, align 8
  %19 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 1
  %20 = load double, double* %19, align 8
  %21 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 1
  %22 = load double, double* %21, align 8
  %23 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %24 = load double, double* %23, align 8
  %25 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %26 = load double, double* %25, align 8
  %27 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %28 = load double, double* %27, align 8
  %29 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %30 = load double, double* %29, align 8
  %31 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %32 = load double, double* %31, align 8
  %33 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %34 = load double, double* %33, align 8
  %35 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %36 = load double, double* %35, align 8
  %37 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %38 = load double, double* %37, align 8
  %39 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.2, i64 0, i64 0), double %8, double %10, double %12, double %14, double %16, double %18, double %20, double %22, double %24, double %26, double %28, double %30, double %32, double %34, double %36, double %38) #19
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %39, %"class.WTF::StringImpl"** %40, align 8
  br label %271

41:                                               ; preds = %2
  %42 = bitcast %"struct.blink::TransformationMatrix::DecomposedType"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %42) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %42, i8 -1, i64 136, i1 false)
  %43 = call zeroext i1 @_ZNK5blink20TransformationMatrix9DecomposeERNS0_14DecomposedTypeE(%"class.blink::TransformationMatrix"* %0, %"struct.blink::TransformationMatrix::DecomposedType"* nonnull dereferenceable(136) %4)
  br i1 %43, label %159, label %44

44:                                               ; preds = %41
  %45 = bitcast %"class.WTF::StringAppend"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %45) #19
  %46 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 0
  %47 = load double, double* %46, align 8
  %48 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %49 = load double, double* %48, align 8
  %50 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %51 = load double, double* %50, align 8
  %52 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %53 = load double, double* %52, align 8
  %54 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 1
  %55 = load double, double* %54, align 8
  %56 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  %57 = load double, double* %56, align 8
  %58 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 1
  %59 = load double, double* %58, align 8
  %60 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 1
  %61 = load double, double* %60, align 8
  %62 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %63 = load double, double* %62, align 8
  %64 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %65 = load double, double* %64, align 8
  %66 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %67 = load double, double* %66, align 8
  %68 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %69 = load double, double* %68, align 8
  %70 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %71 = load double, double* %70, align 8
  %72 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %73 = load double, double* %72, align 8
  %74 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %75 = load double, double* %74, align 8
  %76 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %77 = load double, double* %76, align 8
  %78 = call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.2, i64 0, i64 0), double %47, double %49, double %51, double %53, double %55, double %57, double %59, double %61, double %63, double %65, double %67, double %69, double %71, double %73, double %75, double %77) #19
  %79 = icmp eq %"class.WTF::StringImpl"* %78, null
  br i1 %79, label %124, label %80

80:                                               ; preds = %44
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load atomic i32, i32* %81 monotonic, align 4
  %83 = and i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 0
  %86 = load i32, i32* %85, align 4
  br i1 %84, label %87, label %97

87:                                               ; preds = %80
  %88 = zext i32 %86 to i33
  %89 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %88, i33 1) #19
  %90 = extractvalue { i33, i1 } %89, 1
  %91 = extractvalue { i33, i1 } %89, 0
  %92 = icmp slt i33 %91, 0
  %93 = or i1 %90, %92
  br i1 %93, label %94, label %95, !prof !12

94:                                               ; preds = %87
  call void @llvm.trap() #19
  unreachable

95:                                               ; preds = %87
  %96 = trunc i33 %91 to i32
  store i32 %96, i32* %85, align 4
  br label %97

97:                                               ; preds = %80, %95
  %98 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %99 = load atomic i32, i32* %81 monotonic, align 4
  %100 = and i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 0
  br i1 %101, label %103, label %113

103:                                              ; preds = %97
  %104 = zext i32 %98 to i33
  %105 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %104, i33 1) #19
  %106 = extractvalue { i33, i1 } %105, 1
  %107 = extractvalue { i33, i1 } %105, 0
  %108 = icmp slt i33 %107, 0
  %109 = or i1 %106, %108
  br i1 %109, label %110, label %111, !prof !12

110:                                              ; preds = %103
  call void @llvm.trap() #19
  unreachable

111:                                              ; preds = %103
  %112 = trunc i33 %107 to i32
  store i32 %112, i32* %102, align 4
  br label %113

113:                                              ; preds = %111, %97
  %114 = phi i32 [ %112, %111 ], [ %98, %97 ]
  %115 = load atomic i32, i32* %81 monotonic, align 4
  %116 = and i32 %115, 2
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %120

118:                                              ; preds = %113
  %119 = add i32 %114, -1
  store i32 %119, i32* %102, align 4
  br label %120

120:                                              ; preds = %118, %113
  %121 = phi i32 [ %119, %118 ], [ %114, %113 ]
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %124

123:                                              ; preds = %120
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %78) #19
  br label %124

124:                                              ; preds = %44, %120, %123
  %125 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %5, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %78, %"class.WTF::StringImpl"** %125, align 8
  %126 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %5, i64 0, i32 1
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i8** %126, align 8
  %127 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS_6StringEPKcEcvS1_Ev(%"class.WTF::StringAppend"* nonnull %5)
  %128 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %127, %"class.WTF::StringImpl"** %128, align 8
  %129 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %125, align 8
  %130 = icmp eq %"class.WTF::StringImpl"* %129, null
  br i1 %130, label %144, label %131

131:                                              ; preds = %124
  %132 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %133 = load atomic i32, i32* %132 monotonic, align 4
  %134 = and i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 0
  %137 = load i32, i32* %136, align 4
  br i1 %135, label %138, label %140

138:                                              ; preds = %131
  %139 = add i32 %137, -1
  store i32 %139, i32* %136, align 4
  br label %140

140:                                              ; preds = %138, %131
  %141 = phi i32 [ %139, %138 ], [ %137, %131 ]
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %143, label %144

143:                                              ; preds = %140
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %129) #19
  br label %144

144:                                              ; preds = %124, %140, %143
  br i1 %79, label %158, label %145

145:                                              ; preds = %144
  %146 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %147 = load atomic i32, i32* %146 monotonic, align 4
  %148 = and i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 0
  %151 = load i32, i32* %150, align 4
  br i1 %149, label %152, label %154

152:                                              ; preds = %145
  %153 = add i32 %151, -1
  store i32 %153, i32* %150, align 4
  br label %154

154:                                              ; preds = %152, %145
  %155 = phi i32 [ %153, %152 ], [ %151, %145 ]
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %158

157:                                              ; preds = %154
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %78) #19
  br label %158

158:                                              ; preds = %144, %154, %157
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %45) #19
  br label %268

159:                                              ; preds = %41
  %160 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 0
  %161 = load double, double* %160, align 8
  %162 = fcmp oeq double %161, 1.000000e+00
  br i1 %162, label %163, label %207

163:                                              ; preds = %159
  %164 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 1
  %165 = load double, double* %164, align 8
  %166 = fcmp oeq double %165, 0.000000e+00
  br i1 %166, label %167, label %207

167:                                              ; preds = %163
  %168 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %169 = load double, double* %168, align 8
  %170 = fcmp oeq double %169, 0.000000e+00
  br i1 %170, label %171, label %207

171:                                              ; preds = %167
  %172 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %173 = load double, double* %172, align 8
  %174 = fcmp oeq double %173, 0.000000e+00
  br i1 %174, label %175, label %207

175:                                              ; preds = %171
  %176 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %177 = load double, double* %176, align 8
  %178 = fcmp oeq double %177, 0.000000e+00
  br i1 %178, label %179, label %207

179:                                              ; preds = %175
  %180 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  %181 = load double, double* %180, align 8
  %182 = fcmp oeq double %181, 1.000000e+00
  br i1 %182, label %183, label %207

183:                                              ; preds = %179
  %184 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %185 = load double, double* %184, align 8
  %186 = fcmp oeq double %185, 0.000000e+00
  br i1 %186, label %187, label %207

187:                                              ; preds = %183
  %188 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %189 = load double, double* %188, align 8
  %190 = fcmp oeq double %189, 0.000000e+00
  br i1 %190, label %191, label %207

191:                                              ; preds = %187
  %192 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %193 = load double, double* %192, align 8
  %194 = fcmp oeq double %193, 0.000000e+00
  br i1 %194, label %195, label %207

195:                                              ; preds = %191
  %196 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 1
  %197 = load double, double* %196, align 8
  %198 = fcmp oeq double %197, 0.000000e+00
  br i1 %198, label %199, label %207

199:                                              ; preds = %195
  %200 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %201 = load double, double* %200, align 8
  %202 = fcmp oeq double %201, 1.000000e+00
  br i1 %202, label %203, label %207

203:                                              ; preds = %199
  %204 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %205 = load double, double* %204, align 8
  %206 = fcmp oeq double %205, 0.000000e+00
  br i1 %206, label %210, label %207

207:                                              ; preds = %203, %199, %195, %191, %187, %183, %179, %175, %171, %167, %163, %159
  %208 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 10
  %209 = load double, double* %208, align 8
  br label %232

210:                                              ; preds = %203
  %211 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %212 = load double, double* %211, align 8
  %213 = fcmp oeq double %212, 1.000000e+00
  %214 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 10
  %215 = load double, double* %214, align 8
  br i1 %213, label %216, label %232

216:                                              ; preds = %210
  %217 = fcmp oeq double %215, 0.000000e+00
  %218 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 11
  %219 = load double, double* %218, align 8
  %220 = fcmp oeq double %219, 0.000000e+00
  %221 = and i1 %217, %220
  br i1 %221, label %222, label %227

222:                                              ; preds = %216
  %223 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 12
  %224 = load double, double* %223, align 8
  %225 = fcmp oeq double %224, 0.000000e+00
  br i1 %225, label %226, label %227

226:                                              ; preds = %222
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i64 8) #19
  br label %268

227:                                              ; preds = %216, %222
  %228 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 12
  %229 = load double, double* %228, align 8
  %230 = call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0), double %215, double %219, double %229) #19
  %231 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %230, %"class.WTF::StringImpl"** %231, align 8
  br label %268

232:                                              ; preds = %207, %210
  %233 = phi double [ %209, %207 ], [ %215, %210 ]
  %234 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 11
  %235 = load double, double* %234, align 8
  %236 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 12
  %237 = load double, double* %236, align 8
  %238 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 0
  %239 = load double, double* %238, align 8
  %240 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 1
  %241 = load double, double* %240, align 8
  %242 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 2
  %243 = load double, double* %242, align 8
  %244 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 3
  %245 = load double, double* %244, align 8
  %246 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 4
  %247 = load double, double* %246, align 8
  %248 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 5
  %249 = load double, double* %248, align 8
  %250 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 6
  %251 = load double, double* %250, align 8
  %252 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 7
  %253 = load double, double* %252, align 8
  %254 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 8
  %255 = load double, double* %254, align 8
  %256 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 9
  %257 = load double, double* %256, align 8
  %258 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 13
  %259 = load double, double* %258, align 8
  %260 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 14
  %261 = load double, double* %260, align 8
  %262 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 15
  %263 = load double, double* %262, align 8
  %264 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 16
  %265 = load double, double* %264, align 8
  %266 = call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.6, i64 0, i64 0), double %233, double %235, double %237, double %239, double %241, double %243, double %245, double %247, double %249, double %251, double %253, double %255, double %257, double %259, double %261, double %263, double %265) #19
  %267 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %266, %"class.WTF::StringImpl"** %267, align 8
  br label %268

268:                                              ; preds = %232, %227, %226, %158
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %42) #19
  %269 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %270 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %269, align 8
  br label %271

271:                                              ; preds = %268, %6
  %272 = phi %"class.WTF::StringImpl"* [ %270, %268 ], [ %39, %6 ]
  ret %"class.WTF::StringImpl"* %272
}

declare %"class.WTF::StringImpl"* @_ZN3WTF6String6FormatEPKcz(i8*, ...) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS_6StringEPKcEcvS1_Ev(%"class.WTF::StringAppend"*) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.WTF::StringTypeAdapter", align 8
  %3 = alloca %"class.WTF::StringTypeAdapter.12", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.12", align 8
  %6 = alloca %"class.WTF::StringTypeAdapter.12", align 8
  %7 = alloca i8*, align 8
  %8 = alloca i16*, align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %13 = select i1 %11, %"class.WTF::StringImpl"* %12, %"class.WTF::StringImpl"* %10
  %14 = bitcast %"class.WTF::StringTypeAdapter.12"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #19
  %15 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 16, i1 false) #19
  %16 = load i8*, i8** %15, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.12"* nonnull %6, i8* %16) #19
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #19
  br i1 %20, label %81, label %21

21:                                               ; preds = %1
  %22 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #19
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %23 = call i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend"* %0)
  %24 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %23, i8** nonnull dereferenceable(8) %7) #19
  %25 = load i8*, i8** %7, align 8
  %26 = bitcast %"class.WTF::StringTypeAdapter"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #19
  %27 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %4, i64 0, i32 0, i32 0, i32 1
  %28 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %4, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 -86, i64 24, i1 false) #19
  %29 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %30 = icmp eq %"class.WTF::StringImpl"* %29, null
  br i1 %30, label %31, label %33

31:                                               ; preds = %21
  %32 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %39

33:                                               ; preds = %21
  %34 = ptrtoint %"class.WTF::StringImpl"* %29 to i64
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 1
  %38 = bitcast %"class.WTF::StringImpl"* %37 to i8*
  br label %39

39:                                               ; preds = %31, %33
  %40 = phi i8* [ null, %31 ], [ %38, %33 ]
  %41 = phi i64 [ %32, %31 ], [ %34, %33 ]
  %42 = phi i32 [ 0, %31 ], [ %36, %33 ]
  %43 = bitcast %"class.WTF::StringTypeAdapter"* %4 to i64*
  store i64 %41, i64* %43, align 8
  store i8* %40, i8** %27, align 8
  store i32 %42, i32* %28, align 8
  %44 = bitcast %"class.WTF::StringTypeAdapter.12"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %44) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %44, i8 -86, i64 16, i1 false) #19
  %45 = load i8*, i8** %15, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.12"* nonnull %5, i8* %45) #19
  %46 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %4, i64 0, i32 0
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.11"* nonnull %46, i8* %25) #19
  %47 = load i32, i32* %28, align 8
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i8, i8* %25, i64 %48
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.12"* nonnull %5, i8* %49) #19
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %44) #19
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #19
  %50 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %50, label %141, label %51

51:                                               ; preds = %39
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = load atomic i32, i32* %52 monotonic, align 4
  %54 = and i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %57 = load i32, i32* %56, align 4
  br i1 %55, label %58, label %68

58:                                               ; preds = %51
  %59 = zext i32 %57 to i33
  %60 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %59, i33 1) #19
  %61 = extractvalue { i33, i1 } %60, 1
  %62 = extractvalue { i33, i1 } %60, 0
  %63 = icmp slt i33 %62, 0
  %64 = or i1 %61, %63
  br i1 %64, label %65, label %66, !prof !12

65:                                               ; preds = %58
  call void @llvm.trap() #19
  unreachable

66:                                               ; preds = %58
  %67 = trunc i33 %62 to i32
  store i32 %67, i32* %56, align 4
  br label %68

68:                                               ; preds = %51, %66
  %69 = phi i32 [ %67, %66 ], [ %57, %51 ]
  %70 = ptrtoint %"class.WTF::StringImpl"* %24 to i64
  %71 = load atomic i32, i32* %52 monotonic, align 4
  %72 = and i32 %71, 2
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %77

74:                                               ; preds = %68
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %76 = add i32 %69, -1
  store i32 %76, i32* %75, align 4
  br label %77

77:                                               ; preds = %74, %68
  %78 = phi i32 [ %76, %74 ], [ %69, %68 ]
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %141

80:                                               ; preds = %77
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %24) #19
  br label %141

81:                                               ; preds = %1
  %82 = bitcast i16** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %82) #19
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %8, align 8
  %83 = call i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend"* %0)
  %84 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %83, i16** nonnull dereferenceable(8) %8) #19
  %85 = load i16*, i16** %8, align 8
  %86 = bitcast %"class.WTF::StringTypeAdapter"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %86) #19
  %87 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %2, i64 0, i32 0, i32 0, i32 1
  %88 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %2, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %86, i8 -86, i64 24, i1 false) #19
  %89 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %90 = icmp eq %"class.WTF::StringImpl"* %89, null
  br i1 %90, label %91, label %93

91:                                               ; preds = %81
  %92 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %99

93:                                               ; preds = %81
  %94 = ptrtoint %"class.WTF::StringImpl"* %89 to i64
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %89, i64 0, i32 1
  %96 = load i32, i32* %95, align 4
  %97 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %89, i64 1
  %98 = bitcast %"class.WTF::StringImpl"* %97 to i8*
  br label %99

99:                                               ; preds = %91, %93
  %100 = phi i8* [ null, %91 ], [ %98, %93 ]
  %101 = phi i64 [ %92, %91 ], [ %94, %93 ]
  %102 = phi i32 [ 0, %91 ], [ %96, %93 ]
  %103 = bitcast %"class.WTF::StringTypeAdapter"* %2 to i64*
  store i64 %101, i64* %103, align 8
  store i8* %100, i8** %87, align 8
  store i32 %102, i32* %88, align 8
  %104 = bitcast %"class.WTF::StringTypeAdapter.12"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %104) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %104, i8 -86, i64 16, i1 false) #19
  %105 = load i8*, i8** %15, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.12"* nonnull %3, i8* %105) #19
  %106 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %2, i64 0, i32 0
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.11"* nonnull %106, i16* %85) #19
  %107 = load i32, i32* %88, align 8
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds i16, i16* %85, i64 %108
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.12"* nonnull %3, i16* %109) #19
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %104) #19
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %86) #19
  %110 = icmp eq %"class.WTF::StringImpl"* %84, null
  br i1 %110, label %141, label %111

111:                                              ; preds = %99
  %112 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %113 = load atomic i32, i32* %112 monotonic, align 4
  %114 = and i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 0
  %117 = load i32, i32* %116, align 4
  br i1 %115, label %118, label %128

118:                                              ; preds = %111
  %119 = zext i32 %117 to i33
  %120 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %119, i33 1) #19
  %121 = extractvalue { i33, i1 } %120, 1
  %122 = extractvalue { i33, i1 } %120, 0
  %123 = icmp slt i33 %122, 0
  %124 = or i1 %121, %123
  br i1 %124, label %125, label %126, !prof !12

125:                                              ; preds = %118
  call void @llvm.trap() #19
  unreachable

126:                                              ; preds = %118
  %127 = trunc i33 %122 to i32
  store i32 %127, i32* %116, align 4
  br label %128

128:                                              ; preds = %111, %126
  %129 = phi i32 [ %127, %126 ], [ %117, %111 ]
  %130 = ptrtoint %"class.WTF::StringImpl"* %84 to i64
  %131 = load atomic i32, i32* %112 monotonic, align 4
  %132 = and i32 %131, 2
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %137

134:                                              ; preds = %128
  %135 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 0
  %136 = add i32 %129, -1
  store i32 %136, i32* %135, align 4
  br label %137

137:                                              ; preds = %134, %128
  %138 = phi i32 [ %136, %134 ], [ %129, %128 ]
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %141

140:                                              ; preds = %137
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %84) #19
  br label %141

141:                                              ; preds = %140, %137, %99, %80, %77, %39
  %142 = phi i8* [ %22, %39 ], [ %22, %77 ], [ %22, %80 ], [ %82, %99 ], [ %82, %137 ], [ %82, %140 ]
  %143 = phi i64 [ 0, %39 ], [ %70, %77 ], [ %70, %80 ], [ 0, %99 ], [ %130, %137 ], [ %130, %140 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %142) #19
  %144 = inttoptr i64 %143 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %144
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN5blinklsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_20TransformationMatrixE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.blink::TransformationMatrix"* dereferenceable(128)) local_unnamed_addr #1 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #19
  %5 = tail call %"class.WTF::StringImpl"* @_ZNK5blink20TransformationMatrix8ToStringEb(%"class.blink::TransformationMatrix"* %1, i1 zeroext false)
  %6 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"** %6, align 8
  %7 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, %"class.WTF::String"* nonnull dereferenceable(8) %3) #19
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %23, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  br i1 %14, label %17, label %19

17:                                               ; preds = %10
  %18 = add i32 %16, -1
  store i32 %18, i32* %15, align 4
  br label %19

19:                                               ; preds = %17, %10
  %20 = phi i32 [ %18, %17 ], [ %16, %10 ]
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #19
  br label %23

23:                                               ; preds = %2, %19, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #19
  ret %"class.std::__1::basic_ostream"* %7
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::JSONArray"* @_ZN5blink20TransformAsJSONArrayERKNS_20TransformationMatrixE(%"class.blink::TransformationMatrix"* nocapture readonly dereferenceable(128)) local_unnamed_addr #1 {
  %2 = tail call noalias i8* @malloc(i64 32) #19
  %3 = bitcast i8* %2 to %"class.blink::JSONArray"*
  tail call void @_ZN5blink9JSONArrayC1Ev(%"class.blink::JSONArray"* %3) #19
  %4 = tail call noalias i8* @malloc(i64 32) #19
  %5 = bitcast i8* %4 to %"class.blink::JSONArray"*
  tail call void @_ZN5blink9JSONArrayC1Ev(%"class.blink::JSONArray"* %5) #19
  %6 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 0
  %7 = load double, double* %6, align 8
  %8 = tail call double @llvm.fabs.f64(double %7) #19
  %9 = fcmp olt double %8, 0x3E7AD7F29ABCAF48
  %10 = select i1 %9, double 0.000000e+00, double %7
  tail call void @_ZN5blink9JSONArray10PushDoubleEd(%"class.blink::JSONArray"* %5, double %10) #19
  %11 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 1
  %12 = load double, double* %11, align 8
  %13 = tail call double @llvm.fabs.f64(double %12) #19
  %14 = fcmp olt double %13, 0x3E7AD7F29ABCAF48
  %15 = select i1 %14, double 0.000000e+00, double %12
  tail call void @_ZN5blink9JSONArray10PushDoubleEd(%"class.blink::JSONArray"* %5, double %15) #19
  %16 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %17 = load double, double* %16, align 8
  %18 = tail call double @llvm.fabs.f64(double %17) #19
  %19 = fcmp olt double %18, 0x3E7AD7F29ABCAF48
  %20 = select i1 %19, double 0.000000e+00, double %17
  tail call void @_ZN5blink9JSONArray10PushDoubleEd(%"class.blink::JSONArray"* %5, double %20) #19
  %21 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %22 = load double, double* %21, align 8
  %23 = tail call double @llvm.fabs.f64(double %22) #19
  %24 = fcmp olt double %23, 0x3E7AD7F29ABCAF48
  %25 = select i1 %24, double 0.000000e+00, double %22
  tail call void @_ZN5blink9JSONArray10PushDoubleEd(%"class.blink::JSONArray"* %5, double %25) #19
  tail call void @_ZN5blink9JSONArray9PushArrayENSt3__110unique_ptrIS0_NS1_14default_deleteIS0_EEEE(%"class.blink::JSONArray"* %3, %"class.blink::JSONArray"* %5) #19
  %26 = tail call noalias i8* @malloc(i64 32) #19
  %27 = bitcast i8* %26 to %"class.blink::JSONArray"*
  tail call void @_ZN5blink9JSONArrayC1Ev(%"class.blink::JSONArray"* %27) #19
  %28 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %29 = load double, double* %28, align 8
  %30 = tail call double @llvm.fabs.f64(double %29) #19
  %31 = fcmp olt double %30, 0x3E7AD7F29ABCAF48
  %32 = select i1 %31, double 0.000000e+00, double %29
  tail call void @_ZN5blink9JSONArray10PushDoubleEd(%"class.blink::JSONArray"* %27, double %32) #19
  %33 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  %34 = load double, double* %33, align 8
  %35 = tail call double @llvm.fabs.f64(double %34) #19
  %36 = fcmp olt double %35, 0x3E7AD7F29ABCAF48
  %37 = select i1 %36, double 0.000000e+00, double %34
  tail call void @_ZN5blink9JSONArray10PushDoubleEd(%"class.blink::JSONArray"* %27, double %37) #19
  %38 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %39 = load double, double* %38, align 8
  %40 = tail call double @llvm.fabs.f64(double %39) #19
  %41 = fcmp olt double %40, 0x3E7AD7F29ABCAF48
  %42 = select i1 %41, double 0.000000e+00, double %39
  tail call void @_ZN5blink9JSONArray10PushDoubleEd(%"class.blink::JSONArray"* %27, double %42) #19
  %43 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %44 = load double, double* %43, align 8
  %45 = tail call double @llvm.fabs.f64(double %44) #19
  %46 = fcmp olt double %45, 0x3E7AD7F29ABCAF48
  %47 = select i1 %46, double 0.000000e+00, double %44
  tail call void @_ZN5blink9JSONArray10PushDoubleEd(%"class.blink::JSONArray"* %27, double %47) #19
  tail call void @_ZN5blink9JSONArray9PushArrayENSt3__110unique_ptrIS0_NS1_14default_deleteIS0_EEEE(%"class.blink::JSONArray"* %3, %"class.blink::JSONArray"* %27) #19
  %48 = tail call noalias i8* @malloc(i64 32) #19
  %49 = bitcast i8* %48 to %"class.blink::JSONArray"*
  tail call void @_ZN5blink9JSONArrayC1Ev(%"class.blink::JSONArray"* %49) #19
  %50 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %51 = load double, double* %50, align 8
  %52 = tail call double @llvm.fabs.f64(double %51) #19
  %53 = fcmp olt double %52, 0x3E7AD7F29ABCAF48
  %54 = select i1 %53, double 0.000000e+00, double %51
  tail call void @_ZN5blink9JSONArray10PushDoubleEd(%"class.blink::JSONArray"* %49, double %54) #19
  %55 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 1
  %56 = load double, double* %55, align 8
  %57 = tail call double @llvm.fabs.f64(double %56) #19
  %58 = fcmp olt double %57, 0x3E7AD7F29ABCAF48
  %59 = select i1 %58, double 0.000000e+00, double %56
  tail call void @_ZN5blink9JSONArray10PushDoubleEd(%"class.blink::JSONArray"* %49, double %59) #19
  %60 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %61 = load double, double* %60, align 8
  %62 = tail call double @llvm.fabs.f64(double %61) #19
  %63 = fcmp olt double %62, 0x3E7AD7F29ABCAF48
  %64 = select i1 %63, double 0.000000e+00, double %61
  tail call void @_ZN5blink9JSONArray10PushDoubleEd(%"class.blink::JSONArray"* %49, double %64) #19
  %65 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %66 = load double, double* %65, align 8
  %67 = tail call double @llvm.fabs.f64(double %66) #19
  %68 = fcmp olt double %67, 0x3E7AD7F29ABCAF48
  %69 = select i1 %68, double 0.000000e+00, double %66
  tail call void @_ZN5blink9JSONArray10PushDoubleEd(%"class.blink::JSONArray"* %49, double %69) #19
  tail call void @_ZN5blink9JSONArray9PushArrayENSt3__110unique_ptrIS0_NS1_14default_deleteIS0_EEEE(%"class.blink::JSONArray"* %3, %"class.blink::JSONArray"* %49) #19
  %70 = tail call noalias i8* @malloc(i64 32) #19
  %71 = bitcast i8* %70 to %"class.blink::JSONArray"*
  tail call void @_ZN5blink9JSONArrayC1Ev(%"class.blink::JSONArray"* %71) #19
  %72 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %73 = load double, double* %72, align 8
  %74 = tail call double @llvm.fabs.f64(double %73) #19
  %75 = fcmp olt double %74, 0x3E7AD7F29ABCAF48
  %76 = select i1 %75, double 0.000000e+00, double %73
  tail call void @_ZN5blink9JSONArray10PushDoubleEd(%"class.blink::JSONArray"* %71, double %76) #19
  %77 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 1
  %78 = load double, double* %77, align 8
  %79 = tail call double @llvm.fabs.f64(double %78) #19
  %80 = fcmp olt double %79, 0x3E7AD7F29ABCAF48
  %81 = select i1 %80, double 0.000000e+00, double %78
  tail call void @_ZN5blink9JSONArray10PushDoubleEd(%"class.blink::JSONArray"* %71, double %81) #19
  %82 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %83 = load double, double* %82, align 8
  %84 = tail call double @llvm.fabs.f64(double %83) #19
  %85 = fcmp olt double %84, 0x3E7AD7F29ABCAF48
  %86 = select i1 %85, double 0.000000e+00, double %83
  tail call void @_ZN5blink9JSONArray10PushDoubleEd(%"class.blink::JSONArray"* %71, double %86) #19
  %87 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %88 = load double, double* %87, align 8
  %89 = tail call double @llvm.fabs.f64(double %88) #19
  %90 = fcmp olt double %89, 0x3E7AD7F29ABCAF48
  %91 = select i1 %90, double 0.000000e+00, double %88
  tail call void @_ZN5blink9JSONArray10PushDoubleEd(%"class.blink::JSONArray"* %71, double %91) #19
  tail call void @_ZN5blink9JSONArray9PushArrayENSt3__110unique_ptrIS0_NS1_14default_deleteIS0_EEEE(%"class.blink::JSONArray"* %3, %"class.blink::JSONArray"* %71) #19
  ret %"class.blink::JSONArray"* %3
}

declare void @_ZN5blink9JSONArray10PushDoubleEd(%"class.blink::JSONArray"*, double) local_unnamed_addr #3

declare void @_ZN5blink9JSONArray9PushArrayENSt3__110unique_ptrIS0_NS1_14default_deleteIS0_EEEE(%"class.blink::JSONArray"*, %"class.blink::JSONArray"*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #6

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #16

declare void @_ZN5blink8FloatBox8ExpandToERKNS_12FloatPoint3DES3_(%"class.blink::FloatBox"*, %"class.blink::FloatPoint3D"* dereferenceable(12), %"class.blink::FloatPoint3D"* dereferenceable(12)) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #6

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #3

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #1 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #19
  %7 = load i8, i8* %6, align 8, !range !8
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #19
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #19
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #19
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #19
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #19
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #19
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #19
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #19
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #1 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #19
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #19
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #21
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #19
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #19
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #21
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #19
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #19
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #15

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #17

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #18

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #15

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #3

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #6

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32, i8** dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend"*) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.12", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  br label %15

15:                                               ; preds = %1, %12
  %16 = phi i32 [ %14, %12 ], [ 0, %1 ]
  %17 = bitcast %"class.WTF::StringTypeAdapter.12"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #19
  %18 = getelementptr inbounds %"class.WTF::StringTypeAdapter.12", %"class.WTF::StringTypeAdapter.12"* %4, i64 0, i32 1
  %19 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %20 = bitcast %"class.WTF::StringTypeAdapter.12"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 16, i1 false)
  %21 = load i8*, i8** %19, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.12"* nonnull %4, i8* %21) #19
  %22 = load i32, i32* %18, align 8
  %23 = add i32 %22, %16
  %24 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #19
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %25, align 8
  %26 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26)
  %27 = icmp ult i32 %23, %16
  br i1 %27, label %29, label %28

28:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* null, i8** %25, align 8
  br label %38

29:                                               ; preds = %15
  %30 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #19
  %31 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %16) #19
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.8, i64 0, i64 0), i8* %30, i8* %31) #19
  %32 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* %33, i8** %25, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %29
  %36 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #19
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.9, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #19
  %37 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #19
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #19
  br label %38

38:                                               ; preds = %28, %29, %35
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #19
  %39 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #19
  %40 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %40, align 8
  %41 = load i32, i32* %18, align 8
  %42 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42)
  %43 = icmp ult i32 %23, %41
  br i1 %43, label %45, label %44

44:                                               ; preds = %38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42)
  store i8* null, i8** %40, align 8
  br label %54

45:                                               ; preds = %38
  %46 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #19
  %47 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %41) #19
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.10, i64 0, i64 0), i8* %46, i8* %47) #19
  %48 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42)
  store i8* %49, i8** %40, align 8
  %50 = icmp eq i8* %49, null
  br i1 %50, label %54, label %51

51:                                               ; preds = %45
  %52 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #19
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.9, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #19
  %53 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #19
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #19
  br label %54

54:                                               ; preds = %44, %45, %51
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #19
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #19
  ret i32 %23
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32, i16** dereferenceable(8)) local_unnamed_addr #3

declare void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.12"*, i8*) unnamed_addr #3

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #15

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.11"*, i8*) local_unnamed_addr #3

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.12"*, i8*) local_unnamed_addr #3

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.11"*, i16*) local_unnamed_addr #3

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.12"*, i16*) local_unnamed_addr #3

declare void @_ZN5blink9JSONArrayC1Ev(%"class.blink::JSONArray"*) unnamed_addr #3

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #9

; Function Attrs: nounwind readnone speculatable
declare <2 x double> @llvm.copysign.v2f64(<2 x double>, <2 x double>) #6

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { cold noreturn nounwind }
attributes #17 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #19 = { nounwind }
attributes #20 = { nounwind readnone }
attributes #21 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN5blink11ToQuaterionERKNS_20TransformationMatrix14DecomposedTypeE: argument 0"}
!4 = distinct !{!4, !"_ZN5blink11ToQuaterionERKNS_20TransformationMatrix14DecomposedTypeE"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN5blink11ToQuaterionERKNS_20TransformationMatrix14DecomposedTypeE: argument 0"}
!7 = distinct !{!7, !"_ZN5blink11ToQuaterionERKNS_20TransformationMatrix14DecomposedTypeE"}
!8 = !{i8 0, i8 2}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZNK5blink20TransformationMatrix11ProjectQuadERKNS_9FloatQuadE: argument 0"}
!11 = distinct !{!11, !"_ZNK5blink20TransformationMatrix11ProjectQuadERKNS_9FloatQuadE"}
!12 = !{!"branch_weights", i32 1, i32 2000}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZN5blink11ToQuaterionERKNS_20TransformationMatrix14DecomposedTypeE: argument 0"}
!15 = distinct !{!15, !"_ZN5blink11ToQuaterionERKNS_20TransformationMatrix14DecomposedTypeE"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"_ZN5blink11ToQuaterionERKNS_20TransformationMatrix14DecomposedTypeE: argument 0"}
!18 = distinct !{!18, !"_ZN5blink11ToQuaterionERKNS_20TransformationMatrix14DecomposedTypeE"}
