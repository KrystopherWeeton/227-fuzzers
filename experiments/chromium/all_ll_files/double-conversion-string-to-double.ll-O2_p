; ModuleID = '../../third_party/icu/source/i18n/double-conversion-string-to-double.cpp'
source_filename = "../../third_party/icu/source/i18n/double-conversion-string-to-double.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.icu_69::double_conversion::StringToDoubleConverter" = type <{ i32, [4 x i8], double, double, i8*, i8*, i16, [6 x i8] }>

$_ZNK6icu_6917double_conversion23StringToDoubleConverter12StringToIeeeIPKcEEdT_ibPi = comdat any

$_ZNK6icu_6917double_conversion23StringToDoubleConverter12StringToIeeeIPKtEEdT_ibPi = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZNK6icu_6917double_conversion23StringToDoubleConverter14StringToDoubleEPKciPi(%"class.icu_69::double_conversion::StringToDoubleConverter"*, i8*, i32, i32*) local_unnamed_addr #0 align 2 {
  %5 = tail call double @_ZNK6icu_6917double_conversion23StringToDoubleConverter12StringToIeeeIPKcEEdT_ibPi(%"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i8* %1, i32 %2, i1 zeroext true, i32* %3)
  ret double %5
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZNK6icu_6917double_conversion23StringToDoubleConverter12StringToIeeeIPKcEEdT_ibPi(%"class.icu_69::double_conversion::StringToDoubleConverter"*, i8*, i32, i1 zeroext, i32*) local_unnamed_addr #0 comdat align 2 {
  %6 = alloca [782 x i8], align 16
  %7 = alloca i8, align 1
  %8 = alloca i8*, align 8
  %9 = ptrtoint i8* %1 to i64
  %10 = sext i32 %2 to i64
  %11 = getelementptr inbounds i8, i8* %1, i64 %10
  store i32 0, i32* %4, align 4
  %12 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = and i32 %13, 4
  %15 = icmp ne i32 %14, 0
  %16 = and i32 %13, 8
  %17 = icmp ne i32 %16, 0
  %18 = and i32 %13, 16
  %19 = icmp ne i32 %18, 0
  %20 = and i32 %13, 32
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %13, 64
  %23 = icmp ne i32 %22, 0
  %24 = icmp eq i32 %2, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %5
  %26 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 2
  %27 = load double, double* %26, align 8
  br label %1609

28:                                               ; preds = %5
  %29 = and i32 %13, 24
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %56, label %31

31:                                               ; preds = %28
  %32 = load i8, i8* %1, align 1
  %33 = sext i8 %32 to i32
  %34 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %33) #5
  br i1 %34, label %39, label %48

35:                                               ; preds = %39
  %36 = load i8, i8* %41, align 1
  %37 = sext i8 %36 to i32
  %38 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %37) #5
  br i1 %38, label %39, label %46

39:                                               ; preds = %31, %35
  %40 = phi i8* [ %41, %35 ], [ %1, %31 ]
  %41 = getelementptr inbounds i8, i8* %40, i64 1
  %42 = icmp eq i8* %41, %11
  br i1 %42, label %43, label %35

43:                                               ; preds = %39
  store i32 %2, i32* %4, align 4
  %44 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 2
  %45 = load double, double* %44, align 8
  br label %1609

46:                                               ; preds = %35
  %47 = ptrtoint i8* %41 to i64
  br label %48

48:                                               ; preds = %46, %31
  %49 = phi i64 [ %9, %31 ], [ %47, %46 ]
  %50 = inttoptr i64 %49 to i8*
  %51 = icmp eq i8* %50, %1
  %52 = or i1 %17, %51
  br i1 %52, label %56, label %53

53:                                               ; preds = %48
  %54 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %55 = load double, double* %54, align 8
  br label %1609

56:                                               ; preds = %28, %48
  %57 = phi i8* [ %50, %48 ], [ %1, %28 ]
  %58 = phi i64 [ %49, %48 ], [ %9, %28 ]
  %59 = load i8, i8* %57, align 1
  switch i8 %59, label %86 [
    i8 43, label %60
    i8 45, label %60
  ]

60:                                               ; preds = %56, %56
  %61 = icmp eq i8 %59, 45
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds i8, i8* %57, i64 1
  %64 = icmp eq i8* %63, %11
  br i1 %64, label %75, label %65

65:                                               ; preds = %60, %71
  %66 = phi i64 [ %72, %71 ], [ 1, %60 ]
  %67 = getelementptr inbounds i8, i8* %57, i64 %66
  %68 = load i8, i8* %67, align 1
  %69 = sext i8 %68 to i32
  %70 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %69) #5
  br i1 %70, label %71, label %78

71:                                               ; preds = %65
  %72 = add nuw nsw i64 %66, 1
  %73 = getelementptr inbounds i8, i8* %57, i64 %72
  %74 = icmp eq i8* %73, %11
  br i1 %74, label %75, label %65

75:                                               ; preds = %71, %60
  %76 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %77 = load double, double* %76, align 8
  br label %1609

78:                                               ; preds = %65
  %79 = getelementptr inbounds i8, i8* %57, i64 %66
  %80 = ptrtoint i8* %79 to i64
  %81 = icmp eq i64 %66, 1
  %82 = or i1 %21, %81
  br i1 %82, label %86, label %83

83:                                               ; preds = %78
  %84 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %85 = load double, double* %84, align 8
  br label %1609

86:                                               ; preds = %78, %56
  %87 = phi i64 [ %58, %56 ], [ %80, %78 ]
  %88 = phi i8 [ 0, %56 ], [ %62, %78 ]
  %89 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 4
  %90 = load i8*, i8** %89, align 8
  %91 = icmp eq i8* %90, null
  br i1 %91, label %142, label %92

92:                                               ; preds = %86
  %93 = inttoptr i64 %87 to i8*
  br i1 %23, label %94, label %95

94:                                               ; preds = %92
  tail call void @abort() #6
  unreachable

95:                                               ; preds = %92
  %96 = load i8, i8* %93, align 1
  %97 = load i8, i8* %90, align 1
  %98 = icmp eq i8 %97, %96
  br i1 %98, label %99, label %142

99:                                               ; preds = %95, %108
  %100 = phi i8* [ %105, %108 ], [ %93, %95 ]
  %101 = phi i8* [ %102, %108 ], [ %90, %95 ]
  %102 = getelementptr inbounds i8, i8* %101, i64 1
  %103 = load i8, i8* %102, align 1
  %104 = icmp eq i8 %103, 0
  %105 = getelementptr inbounds i8, i8* %100, i64 1
  br i1 %104, label %114, label %106

106:                                              ; preds = %99
  %107 = icmp eq i8* %105, %11
  br i1 %107, label %111, label %108

108:                                              ; preds = %106
  %109 = load i8, i8* %105, align 1
  %110 = icmp eq i8 %109, %103
  br i1 %110, label %99, label %111

111:                                              ; preds = %106, %108
  %112 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %113 = load double, double* %112, align 8
  br label %1609

114:                                              ; preds = %99
  %115 = and i32 %13, 20
  %116 = icmp ne i32 %115, 0
  %117 = icmp eq i8* %105, %11
  %118 = or i1 %116, %117
  br i1 %118, label %122, label %119

119:                                              ; preds = %114
  %120 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %121 = load double, double* %120, align 8
  br label %1609

122:                                              ; preds = %114
  %123 = or i1 %15, %117
  br i1 %123, label %135, label %124

124:                                              ; preds = %122, %129
  %125 = phi i8* [ %130, %129 ], [ %105, %122 ]
  %126 = load i8, i8* %125, align 1
  %127 = sext i8 %126 to i32
  %128 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %127) #5
  br i1 %128, label %129, label %132

129:                                              ; preds = %124
  %130 = getelementptr inbounds i8, i8* %125, i64 1
  %131 = icmp eq i8* %130, %11
  br i1 %131, label %135, label %124

132:                                              ; preds = %124
  %133 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %134 = load double, double* %133, align 8
  br label %1609

135:                                              ; preds = %129, %122
  %136 = phi i8* [ %105, %122 ], [ %11, %129 ]
  %137 = ptrtoint i8* %136 to i64
  %138 = sub i64 %137, %9
  %139 = trunc i64 %138 to i32
  store i32 %139, i32* %4, align 4
  %140 = icmp eq i8 %88, 0
  %141 = select i1 %140, double 0x7FF0000000000000, double 0xFFF0000000000000
  br label %1609

142:                                              ; preds = %86, %95
  %143 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 5
  %144 = load i8*, i8** %143, align 8
  %145 = icmp eq i8* %144, null
  %146 = inttoptr i64 %87 to i8*
  br i1 %145, label %147, label %149

147:                                              ; preds = %142
  %148 = load i8, i8* %146, align 1
  br label %198

149:                                              ; preds = %142
  br i1 %23, label %150, label %151

150:                                              ; preds = %149
  tail call void @abort() #6
  unreachable

151:                                              ; preds = %149
  %152 = load i8, i8* %146, align 1
  %153 = load i8, i8* %144, align 1
  %154 = icmp eq i8 %153, %152
  br i1 %154, label %155, label %198

155:                                              ; preds = %151, %164
  %156 = phi i8* [ %161, %164 ], [ %146, %151 ]
  %157 = phi i8* [ %158, %164 ], [ %144, %151 ]
  %158 = getelementptr inbounds i8, i8* %157, i64 1
  %159 = load i8, i8* %158, align 1
  %160 = icmp eq i8 %159, 0
  %161 = getelementptr inbounds i8, i8* %156, i64 1
  br i1 %160, label %170, label %162

162:                                              ; preds = %155
  %163 = icmp eq i8* %161, %11
  br i1 %163, label %167, label %164

164:                                              ; preds = %162
  %165 = load i8, i8* %161, align 1
  %166 = icmp eq i8 %165, %159
  br i1 %166, label %155, label %167

167:                                              ; preds = %162, %164
  %168 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %169 = load double, double* %168, align 8
  br label %1609

170:                                              ; preds = %155
  %171 = and i32 %13, 20
  %172 = icmp ne i32 %171, 0
  %173 = icmp eq i8* %161, %11
  %174 = or i1 %172, %173
  br i1 %174, label %178, label %175

175:                                              ; preds = %170
  %176 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %177 = load double, double* %176, align 8
  br label %1609

178:                                              ; preds = %170
  %179 = or i1 %15, %173
  br i1 %179, label %191, label %180

180:                                              ; preds = %178, %185
  %181 = phi i8* [ %186, %185 ], [ %161, %178 ]
  %182 = load i8, i8* %181, align 1
  %183 = sext i8 %182 to i32
  %184 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %183) #5
  br i1 %184, label %185, label %188

185:                                              ; preds = %180
  %186 = getelementptr inbounds i8, i8* %181, i64 1
  %187 = icmp eq i8* %186, %11
  br i1 %187, label %191, label %180

188:                                              ; preds = %180
  %189 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %190 = load double, double* %189, align 8
  br label %1609

191:                                              ; preds = %185, %178
  %192 = phi i8* [ %161, %178 ], [ %11, %185 ]
  %193 = ptrtoint i8* %192 to i64
  %194 = sub i64 %193, %9
  %195 = trunc i64 %194 to i32
  store i32 %195, i32* %4, align 4
  %196 = icmp eq i8 %88, 0
  %197 = select i1 %196, double 0x7FF8000000000000, double 0xFFF8000000000000
  br label %1609

198:                                              ; preds = %147, %151
  %199 = phi i8 [ %148, %147 ], [ %152, %151 ]
  %200 = icmp eq i8 %199, 48
  br i1 %200, label %201, label %1146

201:                                              ; preds = %198
  %202 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 6
  %203 = load i16, i16* %202, align 8
  %204 = zext i16 %203 to i32
  %205 = icmp eq i16 %203, 0
  %206 = getelementptr inbounds i8, i8* %146, i64 1
  %207 = ptrtoint i8* %206 to i64
  %208 = icmp eq i8* %206, %11
  br i1 %205, label %209, label %210

209:                                              ; preds = %201
  br i1 %208, label %232, label %238

210:                                              ; preds = %201
  br i1 %208, label %232, label %211

211:                                              ; preds = %210
  %212 = getelementptr inbounds i8, i8* %146, i64 2
  %213 = icmp eq i8* %212, %11
  br i1 %213, label %238, label %214

214:                                              ; preds = %211
  %215 = load i8, i8* %206, align 1
  %216 = sext i8 %215 to i32
  %217 = icmp eq i32 %216, %204
  br i1 %217, label %218, label %228

218:                                              ; preds = %214
  %219 = load i8, i8* %212, align 1
  %220 = sext i8 %219 to i32
  %221 = add nsw i32 %220, -48
  %222 = icmp ult i32 %221, 10
  %223 = icmp slt i8 %219, 58
  %224 = and i1 %223, %222
  %225 = ptrtoint i8* %212 to i64
  %226 = select i1 %224, i64 %225, i64 %207
  %227 = select i1 %224, i8* %212, i8* %206
  br label %228

228:                                              ; preds = %218, %214
  %229 = phi i64 [ %207, %214 ], [ %226, %218 ]
  %230 = phi i8* [ %206, %214 ], [ %227, %218 ]
  %231 = icmp eq i8* %230, %11
  br i1 %231, label %232, label %238

232:                                              ; preds = %210, %228, %209
  %233 = phi i64 [ %207, %209 ], [ %229, %228 ], [ %207, %210 ]
  %234 = sub i64 %233, %9
  %235 = trunc i64 %234 to i32
  store i32 %235, i32* %4, align 4
  %236 = icmp eq i8 %88, 0
  %237 = select i1 %236, double 0.000000e+00, double -0.000000e+00
  br label %1609

238:                                              ; preds = %211, %228, %209
  %239 = phi i64 [ %207, %209 ], [ %229, %228 ], [ %207, %211 ]
  %240 = trunc i32 %13 to i8
  %241 = icmp slt i8 %240, 0
  %242 = and i32 %13, 129
  %243 = icmp eq i32 %242, 0
  %244 = inttoptr i64 %239 to i8*
  %245 = load i8, i8* %244, align 1
  br i1 %243, label %1093, label %246

246:                                              ; preds = %238
  switch i8 %245, label %1141 [
    i8 120, label %247
    i8 88, label %247
    i8 48, label %1095
  ]

247:                                              ; preds = %246, %246
  %248 = getelementptr inbounds i8, i8* %244, i64 1
  %249 = ptrtoint i8* %248 to i64
  %250 = icmp eq i8* %248, %11
  br i1 %250, label %251, label %254

251:                                              ; preds = %247
  %252 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %253 = load double, double* %252, align 8
  br label %1609

254:                                              ; preds = %247
  br i1 %241, label %255, label %502

255:                                              ; preds = %254, %307
  %256 = phi i8* [ %308, %307 ], [ %248, %254 ]
  %257 = phi i8 [ 1, %307 ], [ 0, %254 ]
  %258 = load i8, i8* %256, align 1
  %259 = sext i8 %258 to i32
  %260 = add nsw i32 %259, -48
  %261 = icmp ult i32 %260, 10
  %262 = icmp slt i8 %258, 64
  %263 = and i1 %262, %261
  br i1 %263, label %265, label %264

264:                                              ; preds = %255
  switch i8 %258, label %366 [
    i8 102, label %265
    i8 101, label %265
    i8 100, label %265
    i8 99, label %265
    i8 98, label %265
    i8 97, label %265
    i8 70, label %265
    i8 69, label %265
    i8 68, label %265
    i8 67, label %265
    i8 66, label %265
    i8 65, label %265
    i8 46, label %309
  ]

265:                                              ; preds = %264, %264, %264, %264, %264, %264, %264, %264, %264, %264, %264, %264, %255
  br i1 %205, label %266, label %269

266:                                              ; preds = %265
  %267 = getelementptr inbounds i8, i8* %256, i64 1
  %268 = icmp eq i8* %267, %11
  br i1 %268, label %502, label %307

269:                                              ; preds = %265
  %270 = add i8 %258, -97
  %271 = icmp ult i8 %270, 6
  %272 = or i1 %271, %263
  br i1 %272, label %280, label %273

273:                                              ; preds = %269
  %274 = icmp sgt i8 %258, 64
  br i1 %274, label %278, label %275

275:                                              ; preds = %273
  %276 = getelementptr inbounds i8, i8* %256, i64 1
  %277 = icmp eq i8* %276, %11
  br i1 %277, label %502, label %307

278:                                              ; preds = %273
  %279 = icmp sgt i8 %258, 70
  br label %280

280:                                              ; preds = %278, %269
  %281 = phi i1 [ %279, %278 ], [ false, %269 ]
  %282 = getelementptr inbounds i8, i8* %256, i64 1
  %283 = icmp eq i8* %282, %11
  %284 = or i1 %283, %281
  br i1 %284, label %304, label %285

285:                                              ; preds = %280
  %286 = getelementptr inbounds i8, i8* %256, i64 2
  %287 = icmp eq i8* %286, %11
  br i1 %287, label %307, label %288

288:                                              ; preds = %285
  %289 = load i8, i8* %282, align 1
  %290 = sext i8 %289 to i32
  %291 = icmp eq i32 %290, %204
  br i1 %291, label %292, label %301

292:                                              ; preds = %288
  %293 = load i8, i8* %286, align 1
  %294 = sext i8 %293 to i32
  %295 = add nsw i32 %294, -48
  %296 = icmp ult i32 %295, 10
  %297 = icmp slt i8 %293, 64
  %298 = and i1 %297, %296
  br i1 %298, label %300, label %299

299:                                              ; preds = %292
  switch i8 %293, label %301 [
    i8 102, label %300
    i8 101, label %300
    i8 100, label %300
    i8 99, label %300
    i8 98, label %300
    i8 97, label %300
    i8 70, label %300
    i8 69, label %300
    i8 68, label %300
    i8 67, label %300
    i8 66, label %300
    i8 65, label %300
  ]

300:                                              ; preds = %299, %299, %299, %299, %299, %299, %299, %299, %299, %299, %299, %299, %292
  br label %301

301:                                              ; preds = %300, %299, %288
  %302 = phi i8* [ %286, %300 ], [ %282, %288 ], [ %282, %299 ]
  %303 = icmp eq i8* %302, %11
  br i1 %303, label %502, label %307

304:                                              ; preds = %280
  %305 = xor i1 %281, true
  %306 = or i1 %283, %305
  br i1 %306, label %502, label %307

307:                                              ; preds = %304, %301, %285, %275, %266
  %308 = phi i8* [ %282, %304 ], [ %267, %266 ], [ %302, %301 ], [ %276, %275 ], [ %282, %285 ]
  br label %255

309:                                              ; preds = %264
  %310 = getelementptr inbounds i8, i8* %256, i64 1
  %311 = icmp eq i8* %310, %11
  br i1 %311, label %502, label %312

312:                                              ; preds = %309, %364
  %313 = phi i8* [ %365, %364 ], [ %310, %309 ]
  %314 = phi i8 [ 1, %364 ], [ %257, %309 ]
  %315 = load i8, i8* %313, align 1
  %316 = sext i8 %315 to i32
  %317 = add nsw i32 %316, -48
  %318 = icmp ult i32 %317, 10
  %319 = icmp slt i8 %315, 64
  %320 = and i1 %319, %318
  br i1 %320, label %322, label %321

321:                                              ; preds = %312
  switch i8 %315, label %366 [
    i8 102, label %322
    i8 101, label %322
    i8 100, label %322
    i8 99, label %322
    i8 98, label %322
    i8 97, label %322
    i8 70, label %322
    i8 69, label %322
    i8 68, label %322
    i8 67, label %322
    i8 66, label %322
    i8 65, label %322
  ]

322:                                              ; preds = %321, %321, %321, %321, %321, %321, %321, %321, %321, %321, %321, %321, %312
  br i1 %205, label %323, label %326

323:                                              ; preds = %322
  %324 = getelementptr inbounds i8, i8* %313, i64 1
  %325 = icmp eq i8* %324, %11
  br i1 %325, label %502, label %364

326:                                              ; preds = %322
  %327 = add i8 %315, -97
  %328 = icmp ult i8 %327, 6
  %329 = or i1 %328, %320
  br i1 %329, label %337, label %330

330:                                              ; preds = %326
  %331 = icmp sgt i8 %315, 64
  br i1 %331, label %335, label %332

332:                                              ; preds = %330
  %333 = getelementptr inbounds i8, i8* %313, i64 1
  %334 = icmp eq i8* %333, %11
  br i1 %334, label %502, label %364

335:                                              ; preds = %330
  %336 = icmp sgt i8 %315, 70
  br label %337

337:                                              ; preds = %335, %326
  %338 = phi i1 [ %336, %335 ], [ false, %326 ]
  %339 = getelementptr inbounds i8, i8* %313, i64 1
  %340 = icmp eq i8* %339, %11
  %341 = or i1 %340, %338
  br i1 %341, label %361, label %342

342:                                              ; preds = %337
  %343 = getelementptr inbounds i8, i8* %313, i64 2
  %344 = icmp eq i8* %343, %11
  br i1 %344, label %364, label %345

345:                                              ; preds = %342
  %346 = load i8, i8* %339, align 1
  %347 = sext i8 %346 to i32
  %348 = icmp eq i32 %347, %204
  br i1 %348, label %349, label %358

349:                                              ; preds = %345
  %350 = load i8, i8* %343, align 1
  %351 = sext i8 %350 to i32
  %352 = add nsw i32 %351, -48
  %353 = icmp ult i32 %352, 10
  %354 = icmp slt i8 %350, 64
  %355 = and i1 %354, %353
  br i1 %355, label %357, label %356

356:                                              ; preds = %349
  switch i8 %350, label %358 [
    i8 102, label %357
    i8 101, label %357
    i8 100, label %357
    i8 99, label %357
    i8 98, label %357
    i8 97, label %357
    i8 70, label %357
    i8 69, label %357
    i8 68, label %357
    i8 67, label %357
    i8 66, label %357
    i8 65, label %357
  ]

357:                                              ; preds = %356, %356, %356, %356, %356, %356, %356, %356, %356, %356, %356, %356, %349
  br label %358

358:                                              ; preds = %357, %356, %345
  %359 = phi i8* [ %343, %357 ], [ %339, %345 ], [ %339, %356 ]
  %360 = icmp eq i8* %359, %11
  br i1 %360, label %502, label %364

361:                                              ; preds = %337
  %362 = xor i1 %338, true
  %363 = or i1 %340, %362
  br i1 %363, label %502, label %364

364:                                              ; preds = %361, %358, %342, %332, %323
  %365 = phi i8* [ %339, %361 ], [ %324, %323 ], [ %359, %358 ], [ %333, %332 ], [ %339, %342 ]
  br label %312

366:                                              ; preds = %264, %321
  %367 = phi i8 [ %315, %321 ], [ %258, %264 ]
  %368 = phi i8* [ %313, %321 ], [ %256, %264 ]
  %369 = phi i8 [ %314, %321 ], [ %257, %264 ]
  %370 = and i8 %369, 1
  %371 = icmp eq i8 %370, 0
  br i1 %371, label %502, label %372

372:                                              ; preds = %366
  switch i8 %367, label %502 [
    i8 112, label %373
    i8 80, label %373
  ]

373:                                              ; preds = %372, %372
  br i1 %205, label %374, label %377

374:                                              ; preds = %373
  %375 = getelementptr inbounds i8, i8* %368, i64 1
  %376 = icmp eq i8* %375, %11
  br i1 %376, label %502, label %405

377:                                              ; preds = %373
  %378 = add nsw i8 %367, -97
  %379 = icmp ugt i8 %378, 5
  %380 = getelementptr inbounds i8, i8* %368, i64 1
  %381 = icmp eq i8* %380, %11
  %382 = or i1 %379, %381
  br i1 %382, label %402, label %383

383:                                              ; preds = %377
  %384 = getelementptr inbounds i8, i8* %368, i64 2
  %385 = icmp eq i8* %384, %11
  br i1 %385, label %405, label %386

386:                                              ; preds = %383
  %387 = load i8, i8* %380, align 1
  %388 = sext i8 %387 to i32
  %389 = icmp eq i32 %388, %204
  br i1 %389, label %390, label %399

390:                                              ; preds = %386
  %391 = load i8, i8* %384, align 1
  %392 = sext i8 %391 to i32
  %393 = add nsw i32 %392, -48
  %394 = icmp ult i32 %393, 10
  %395 = icmp slt i8 %391, 64
  %396 = and i1 %395, %394
  br i1 %396, label %398, label %397

397:                                              ; preds = %390
  switch i8 %391, label %399 [
    i8 102, label %398
    i8 101, label %398
    i8 100, label %398
    i8 99, label %398
    i8 98, label %398
    i8 97, label %398
    i8 70, label %398
    i8 69, label %398
    i8 68, label %398
    i8 67, label %398
    i8 66, label %398
    i8 65, label %398
  ]

398:                                              ; preds = %397, %397, %397, %397, %397, %397, %397, %397, %397, %397, %397, %397, %390
  br label %399

399:                                              ; preds = %398, %397, %386
  %400 = phi i8* [ %384, %398 ], [ %380, %386 ], [ %380, %397 ]
  %401 = icmp eq i8* %400, %11
  br i1 %401, label %502, label %405

402:                                              ; preds = %377
  %403 = xor i1 %379, true
  %404 = or i1 %381, %403
  br i1 %404, label %502, label %405

405:                                              ; preds = %402, %399, %383, %374
  %406 = phi i8* [ %380, %402 ], [ %375, %374 ], [ %400, %399 ], [ %380, %383 ]
  %407 = load i8, i8* %406, align 1
  switch i8 %407, label %413 [
    i8 43, label %408
    i8 45, label %408
  ]

408:                                              ; preds = %405, %405
  %409 = getelementptr inbounds i8, i8* %406, i64 1
  %410 = icmp eq i8* %409, %11
  br i1 %410, label %502, label %411

411:                                              ; preds = %408
  %412 = load i8, i8* %409, align 1
  br label %413

413:                                              ; preds = %411, %405
  %414 = phi i8 [ %412, %411 ], [ %407, %405 ]
  %415 = phi i8* [ %409, %411 ], [ %406, %405 ]
  %416 = sext i8 %414 to i32
  %417 = add nsw i32 %416, -48
  %418 = icmp ult i32 %417, 10
  %419 = icmp slt i8 %414, 58
  %420 = and i1 %419, %418
  br i1 %420, label %421, label %502

421:                                              ; preds = %413
  %422 = getelementptr inbounds i8, i8* %415, i64 1
  %423 = icmp eq i8* %422, %11
  br i1 %205, label %424, label %425

424:                                              ; preds = %421
  br i1 %423, label %520, label %445

425:                                              ; preds = %421
  br i1 %423, label %520, label %426

426:                                              ; preds = %425
  %427 = getelementptr inbounds i8, i8* %415, i64 2
  %428 = icmp eq i8* %427, %11
  br i1 %428, label %445, label %429

429:                                              ; preds = %426
  %430 = load i8, i8* %422, align 1
  %431 = sext i8 %430 to i32
  %432 = icmp eq i32 %431, %204
  br i1 %432, label %433, label %442

433:                                              ; preds = %429
  %434 = load i8, i8* %427, align 1
  %435 = sext i8 %434 to i32
  %436 = add nsw i32 %435, -48
  %437 = icmp ult i32 %436, 10
  %438 = icmp slt i8 %434, 64
  %439 = and i1 %438, %437
  br i1 %439, label %441, label %440

440:                                              ; preds = %433
  switch i8 %434, label %442 [
    i8 102, label %441
    i8 101, label %441
    i8 100, label %441
    i8 99, label %441
    i8 98, label %441
    i8 97, label %441
    i8 70, label %441
    i8 69, label %441
    i8 68, label %441
    i8 67, label %441
    i8 66, label %441
    i8 65, label %441
  ]

441:                                              ; preds = %440, %440, %440, %440, %440, %440, %440, %440, %440, %440, %440, %440, %433
  br label %442

442:                                              ; preds = %441, %440, %429
  %443 = phi i8* [ %427, %441 ], [ %422, %429 ], [ %422, %440 ]
  %444 = icmp eq i8* %443, %11
  br i1 %444, label %520, label %445

445:                                              ; preds = %442, %426, %424
  %446 = phi i8* [ %422, %426 ], [ %443, %442 ], [ %422, %424 ]
  %447 = load i8, i8* %446, align 1
  %448 = sext i8 %447 to i32
  %449 = add nsw i32 %448, -48
  %450 = icmp ult i32 %449, 10
  %451 = icmp slt i8 %447, 58
  %452 = and i1 %451, %450
  br i1 %452, label %453, label %486

453:                                              ; preds = %445, %478
  %454 = phi i8* [ %479, %478 ], [ %446, %445 ]
  %455 = getelementptr inbounds i8, i8* %454, i64 1
  %456 = icmp eq i8* %455, %11
  br i1 %205, label %457, label %458

457:                                              ; preds = %453
  br i1 %456, label %520, label %478

458:                                              ; preds = %453
  br i1 %456, label %520, label %459

459:                                              ; preds = %458
  %460 = getelementptr inbounds i8, i8* %454, i64 2
  %461 = icmp eq i8* %460, %11
  br i1 %461, label %478, label %462

462:                                              ; preds = %459
  %463 = load i8, i8* %455, align 1
  %464 = sext i8 %463 to i32
  %465 = icmp eq i32 %464, %204
  br i1 %465, label %466, label %475

466:                                              ; preds = %462
  %467 = load i8, i8* %460, align 1
  %468 = sext i8 %467 to i32
  %469 = add nsw i32 %468, -48
  %470 = icmp ult i32 %469, 10
  %471 = icmp slt i8 %467, 64
  %472 = and i1 %471, %470
  br i1 %472, label %474, label %473

473:                                              ; preds = %466
  switch i8 %467, label %475 [
    i8 102, label %474
    i8 101, label %474
    i8 100, label %474
    i8 99, label %474
    i8 98, label %474
    i8 97, label %474
    i8 70, label %474
    i8 69, label %474
    i8 68, label %474
    i8 67, label %474
    i8 66, label %474
    i8 65, label %474
  ]

474:                                              ; preds = %473, %473, %473, %473, %473, %473, %473, %473, %473, %473, %473, %473, %466
  br label %475

475:                                              ; preds = %474, %473, %462
  %476 = phi i8* [ %460, %474 ], [ %455, %462 ], [ %455, %473 ]
  %477 = icmp eq i8* %476, %11
  br i1 %477, label %520, label %478

478:                                              ; preds = %475, %459, %457
  %479 = phi i8* [ %455, %457 ], [ %476, %475 ], [ %455, %459 ]
  %480 = load i8, i8* %479, align 1
  %481 = sext i8 %480 to i32
  %482 = add nsw i32 %481, -48
  %483 = icmp ult i32 %482, 10
  %484 = icmp slt i8 %480, 58
  %485 = and i1 %484, %483
  br i1 %485, label %453, label %486

486:                                              ; preds = %478, %445
  %487 = phi i8 [ %447, %445 ], [ %480, %478 ]
  %488 = phi i8* [ %446, %445 ], [ %479, %478 ]
  %489 = icmp eq i8* %488, %11
  %490 = or i1 %15, %489
  br i1 %490, label %520, label %491

491:                                              ; preds = %486
  %492 = sext i8 %487 to i32
  %493 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %492) #5
  br i1 %493, label %494, label %502

494:                                              ; preds = %491, %498
  %495 = phi i8* [ %496, %498 ], [ %488, %491 ]
  %496 = getelementptr inbounds i8, i8* %495, i64 1
  %497 = icmp eq i8* %496, %11
  br i1 %497, label %520, label %498

498:                                              ; preds = %494
  %499 = load i8, i8* %496, align 1
  %500 = sext i8 %499 to i32
  %501 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %500) #5
  br i1 %501, label %494, label %502

502:                                              ; preds = %304, %266, %301, %275, %361, %323, %358, %332, %498, %491, %254, %366, %372, %402, %374, %399, %413, %309, %408
  %503 = load i8, i8* %248, align 1
  %504 = sext i8 %503 to i32
  %505 = add nsw i32 %504, -48
  %506 = icmp ult i32 %505, 10
  %507 = icmp slt i8 %503, 64
  %508 = and i1 %507, %506
  br i1 %508, label %520, label %509

509:                                              ; preds = %502
  %510 = add i8 %503, -65
  %511 = icmp ult i8 %510, 38
  br i1 %511, label %515, label %512

512:                                              ; preds = %515, %509
  %513 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %514 = load double, double* %513, align 8
  br label %1609

515:                                              ; preds = %509
  %516 = zext i8 %510 to i64
  %517 = lshr i64 270582939711, %516
  %518 = and i64 %517, 1
  %519 = icmp eq i64 %518, 0
  br i1 %519, label %512, label %520

520:                                              ; preds = %457, %458, %475, %494, %515, %502, %424, %425, %442, %486
  %521 = phi i1 [ true, %486 ], [ true, %442 ], [ true, %425 ], [ true, %424 ], [ false, %502 ], [ false, %515 ], [ true, %494 ], [ true, %475 ], [ true, %458 ], [ true, %457 ]
  %522 = icmp ne i8 %88, 0
  %523 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %524 = load double, double* %523, align 8
  %525 = load i8, i8* %248, align 1
  %526 = icmp eq i8 %525, 48
  br i1 %526, label %532, label %527

527:                                              ; preds = %538, %520
  %528 = phi i64 [ %249, %520 ], [ %539, %538 ]
  %529 = phi i8 [ %525, %520 ], [ %541, %538 ]
  %530 = phi i8* [ %248, %520 ], [ %540, %538 ]
  %531 = select i1 %3, i64 53, i64 24
  br label %572

532:                                              ; preds = %520, %538
  %533 = phi i8* [ %540, %538 ], [ %248, %520 ]
  %534 = getelementptr inbounds i8, i8* %533, i64 1
  %535 = ptrtoint i8* %534 to i64
  %536 = icmp eq i8* %534, %11
  br i1 %205, label %537, label %543

537:                                              ; preds = %532
  br i1 %536, label %567, label %538

538:                                              ; preds = %561, %544, %537
  %539 = phi i64 [ %535, %537 ], [ %535, %544 ], [ %562, %561 ]
  %540 = phi i8* [ %534, %537 ], [ %534, %544 ], [ %563, %561 ]
  %541 = load i8, i8* %540, align 1
  %542 = icmp eq i8 %541, 48
  br i1 %542, label %532, label %527

543:                                              ; preds = %532
  br i1 %536, label %565, label %544

544:                                              ; preds = %543
  %545 = getelementptr inbounds i8, i8* %533, i64 2
  %546 = icmp eq i8* %545, %11
  br i1 %546, label %538, label %547

547:                                              ; preds = %544
  %548 = load i8, i8* %534, align 1
  %549 = sext i8 %548 to i32
  %550 = icmp eq i32 %549, %204
  br i1 %550, label %551, label %561

551:                                              ; preds = %547
  %552 = load i8, i8* %545, align 1
  %553 = sext i8 %552 to i32
  %554 = add nsw i32 %553, -48
  %555 = icmp ult i32 %554, 10
  %556 = icmp slt i8 %552, 64
  %557 = and i1 %556, %555
  br i1 %557, label %559, label %558

558:                                              ; preds = %551
  switch i8 %552, label %561 [
    i8 102, label %559
    i8 101, label %559
    i8 100, label %559
    i8 99, label %559
    i8 98, label %559
    i8 97, label %559
    i8 70, label %559
    i8 69, label %559
    i8 68, label %559
    i8 67, label %559
    i8 66, label %559
    i8 65, label %559
  ]

559:                                              ; preds = %558, %558, %558, %558, %558, %558, %558, %558, %558, %558, %558, %558, %551
  %560 = ptrtoint i8* %545 to i64
  br label %561

561:                                              ; preds = %559, %558, %547
  %562 = phi i64 [ %560, %559 ], [ %535, %558 ], [ %535, %547 ]
  %563 = phi i8* [ %545, %559 ], [ %534, %558 ], [ %534, %547 ]
  %564 = icmp eq i8* %563, %11
  br i1 %564, label %569, label %538

565:                                              ; preds = %543
  %566 = ptrtoint i8* %11 to i64
  br label %569

567:                                              ; preds = %537
  %568 = ptrtoint i8* %11 to i64
  br label %569

569:                                              ; preds = %561, %567, %565
  %570 = phi i64 [ %566, %565 ], [ %568, %567 ], [ %562, %561 ]
  %571 = select i1 %522, double -0.000000e+00, double 0.000000e+00
  br label %1067

572:                                              ; preds = %827, %527
  %573 = phi i64 [ %528, %527 ], [ %828, %827 ]
  %574 = phi i8 [ %529, %527 ], [ %833, %827 ]
  %575 = phi i8* [ %530, %527 ], [ %829, %827 ]
  %576 = phi i32 [ 0, %527 ], [ %830, %827 ]
  %577 = phi i64 [ 0, %527 ], [ %831, %827 ]
  %578 = phi i8 [ 0, %527 ], [ %832, %827 ]
  %579 = sext i8 %574 to i32
  %580 = add nsw i32 %579, -48
  %581 = icmp ult i32 %580, 10
  br i1 %581, label %611, label %582

582:                                              ; preds = %572
  %583 = add i8 %574, -97
  %584 = icmp ult i8 %583, 6
  br i1 %584, label %585, label %587

585:                                              ; preds = %582
  %586 = add nsw i32 %579, -87
  br label %611

587:                                              ; preds = %582
  %588 = add i8 %574, -65
  %589 = icmp ult i8 %588, 6
  br i1 %589, label %590, label %592

590:                                              ; preds = %587
  %591 = add nsw i32 %579, -55
  br label %611

592:                                              ; preds = %587
  br i1 %521, label %593, label %597

593:                                              ; preds = %592
  switch i8 %574, label %597 [
    i8 46, label %594
    i8 112, label %847
    i8 80, label %847
  ]

594:                                              ; preds = %593
  %595 = getelementptr inbounds i8, i8* %575, i64 1
  %596 = ptrtoint i8* %595 to i64
  br label %827

597:                                              ; preds = %593, %592
  %598 = phi i1 [ true, %593 ], [ false, %592 ]
  %599 = icmp eq i8* %575, %11
  %600 = or i1 %15, %599
  br i1 %600, label %842, label %601

601:                                              ; preds = %597
  %602 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %579) #5
  br i1 %602, label %603, label %1609

603:                                              ; preds = %601, %607
  %604 = phi i8* [ %605, %607 ], [ %575, %601 ]
  %605 = getelementptr inbounds i8, i8* %604, i64 1
  %606 = icmp eq i8* %605, %11
  br i1 %606, label %834, label %607

607:                                              ; preds = %603
  %608 = load i8, i8* %605, align 1
  %609 = sext i8 %608 to i32
  %610 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %609) #5
  br i1 %610, label %603, label %1609

611:                                              ; preds = %572, %590, %585
  %612 = phi i32 [ %586, %585 ], [ %591, %590 ], [ %580, %572 ]
  %613 = and i8 %578, 1
  %614 = icmp eq i8 %613, 0
  %615 = add nsw i32 %576, -4
  %616 = select i1 %614, i32 %576, i32 %615
  %617 = shl nsw i64 %577, 4
  %618 = sext i32 %612 to i64
  %619 = add nsw i64 %617, %618
  %620 = ashr i64 %619, %531
  %621 = trunc i64 %620 to i32
  %622 = icmp eq i32 %621, 0
  br i1 %622, label %778, label %623

623:                                              ; preds = %611
  %624 = trunc i64 %620 to i32
  %625 = icmp sgt i32 %624, 1
  br i1 %625, label %626, label %632

626:                                              ; preds = %623, %626
  %627 = phi i32 [ %629, %626 ], [ 1, %623 ]
  %628 = phi i32 [ %630, %626 ], [ %624, %623 ]
  %629 = add nuw nsw i32 %627, 1
  %630 = lshr i32 %628, 1
  %631 = icmp ugt i32 %628, 3
  br i1 %631, label %626, label %632

632:                                              ; preds = %626, %623
  %633 = phi i32 [ 1, %623 ], [ %629, %626 ]
  %634 = shl nsw i32 -1, %633
  %635 = xor i32 %634, -1
  %636 = trunc i64 %619 to i32
  %637 = and i32 %635, %636
  %638 = zext i32 %633 to i64
  %639 = ashr i64 %619, %638
  %640 = add nsw i32 %633, %616
  br label %641

641:                                              ; preds = %723, %632
  %642 = phi i8 [ %574, %632 ], [ %714, %723 ]
  %643 = phi i8* [ %575, %632 ], [ %715, %723 ]
  %644 = phi i32 [ %640, %632 ], [ %731, %723 ]
  %645 = phi i8 [ %578, %632 ], [ %716, %723 ]
  %646 = phi i8 [ 1, %632 ], [ %727, %723 ]
  br i1 %205, label %647, label %651

647:                                              ; preds = %641
  %648 = getelementptr inbounds i8, i8* %643, i64 1
  %649 = ptrtoint i8* %648 to i64
  %650 = icmp eq i8* %648, %11
  br i1 %650, label %752, label %698

651:                                              ; preds = %641
  %652 = sext i8 %642 to i32
  %653 = add nsw i32 %652, -48
  %654 = icmp ult i32 %653, 10
  %655 = icmp slt i8 %642, 64
  %656 = and i1 %655, %654
  %657 = add i8 %642, -97
  %658 = icmp ult i8 %657, 6
  %659 = or i1 %658, %656
  br i1 %659, label %668, label %660

660:                                              ; preds = %651
  %661 = icmp sgt i8 %642, 64
  br i1 %661, label %666, label %662

662:                                              ; preds = %660
  %663 = getelementptr inbounds i8, i8* %643, i64 1
  %664 = ptrtoint i8* %663 to i64
  %665 = icmp eq i8* %663, %11
  br i1 %665, label %750, label %698

666:                                              ; preds = %660
  %667 = icmp sgt i8 %642, 70
  br label %668

668:                                              ; preds = %666, %651
  %669 = phi i1 [ %667, %666 ], [ false, %651 ]
  %670 = getelementptr inbounds i8, i8* %643, i64 1
  %671 = ptrtoint i8* %670 to i64
  %672 = icmp eq i8* %670, %11
  %673 = or i1 %672, %669
  br i1 %673, label %695, label %674

674:                                              ; preds = %668
  %675 = getelementptr inbounds i8, i8* %643, i64 2
  %676 = icmp eq i8* %675, %11
  br i1 %676, label %698, label %677

677:                                              ; preds = %674
  %678 = load i8, i8* %670, align 1
  %679 = sext i8 %678 to i32
  %680 = icmp eq i32 %204, %679
  br i1 %680, label %681, label %691

681:                                              ; preds = %677
  %682 = load i8, i8* %675, align 1
  %683 = sext i8 %682 to i32
  %684 = add nsw i32 %683, -48
  %685 = icmp ult i32 %684, 10
  %686 = icmp slt i8 %682, 64
  %687 = and i1 %686, %685
  br i1 %687, label %689, label %688

688:                                              ; preds = %681
  switch i8 %682, label %691 [
    i8 102, label %689
    i8 101, label %689
    i8 100, label %689
    i8 99, label %689
    i8 98, label %689
    i8 97, label %689
    i8 70, label %689
    i8 69, label %689
    i8 68, label %689
    i8 67, label %689
    i8 66, label %689
    i8 65, label %689
  ]

689:                                              ; preds = %688, %688, %688, %688, %688, %688, %688, %688, %688, %688, %688, %688, %681
  %690 = ptrtoint i8* %675 to i64
  br label %691

691:                                              ; preds = %689, %688, %677
  %692 = phi i64 [ %690, %689 ], [ %671, %688 ], [ %671, %677 ]
  %693 = phi i8* [ %675, %689 ], [ %670, %688 ], [ %670, %677 ]
  %694 = icmp eq i8* %693, %11
  br i1 %694, label %754, label %698

695:                                              ; preds = %668
  %696 = xor i1 %669, true
  %697 = or i1 %672, %696
  br i1 %697, label %732, label %698

698:                                              ; preds = %695, %691, %674, %662, %647
  %699 = phi i64 [ %649, %647 ], [ %671, %695 ], [ %671, %674 ], [ %692, %691 ], [ %664, %662 ]
  %700 = phi i8* [ %648, %647 ], [ %670, %695 ], [ %670, %674 ], [ %693, %691 ], [ %663, %662 ]
  br i1 %521, label %701, label %707

701:                                              ; preds = %698
  %702 = load i8, i8* %700, align 1
  %703 = icmp eq i8 %702, 46
  br i1 %703, label %704, label %712

704:                                              ; preds = %701
  %705 = getelementptr inbounds i8, i8* %700, i64 1
  %706 = ptrtoint i8* %705 to i64
  br label %707

707:                                              ; preds = %704, %698
  %708 = phi i64 [ %706, %704 ], [ %699, %698 ]
  %709 = phi i8* [ %705, %704 ], [ %700, %698 ]
  %710 = phi i8 [ 1, %704 ], [ %645, %698 ]
  %711 = load i8, i8* %709, align 1
  br label %712

712:                                              ; preds = %707, %701
  %713 = phi i64 [ %708, %707 ], [ %699, %701 ]
  %714 = phi i8 [ %711, %707 ], [ %702, %701 ]
  %715 = phi i8* [ %709, %707 ], [ %700, %701 ]
  %716 = phi i8 [ %710, %707 ], [ %645, %701 ]
  %717 = sext i8 %714 to i32
  %718 = add nsw i32 %717, -48
  %719 = icmp ult i32 %718, 10
  %720 = icmp slt i8 %714, 64
  %721 = and i1 %720, %719
  br i1 %721, label %723, label %722

722:                                              ; preds = %712
  switch i8 %714, label %734 [
    i8 102, label %723
    i8 101, label %723
    i8 100, label %723
    i8 99, label %723
    i8 98, label %723
    i8 97, label %723
    i8 70, label %723
    i8 69, label %723
    i8 68, label %723
    i8 67, label %723
    i8 66, label %723
    i8 65, label %723
  ]

723:                                              ; preds = %722, %722, %722, %722, %722, %722, %722, %722, %722, %722, %722, %722, %712
  %724 = icmp ne i8 %646, 0
  %725 = icmp eq i8 %714, 48
  %726 = and i1 %724, %725
  %727 = zext i1 %726 to i8
  %728 = and i8 %716, 1
  %729 = icmp eq i8 %728, 0
  %730 = add nsw i32 %644, 4
  %731 = select i1 %729, i32 %730, i32 %644
  br label %641

732:                                              ; preds = %695
  %733 = ptrtoint i8* %670 to i64
  br label %734

734:                                              ; preds = %722, %732
  %735 = phi i64 [ %733, %732 ], [ %713, %722 ]
  %736 = phi i8* [ %670, %732 ], [ %715, %722 ]
  %737 = or i1 %15, %521
  %738 = icmp eq i8* %736, %11
  %739 = or i1 %737, %738
  br i1 %739, label %754, label %740

740:                                              ; preds = %734, %745
  %741 = phi i8* [ %746, %745 ], [ %736, %734 ]
  %742 = load i8, i8* %741, align 1
  %743 = sext i8 %742 to i32
  %744 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %743) #5
  br i1 %744, label %745, label %1609

745:                                              ; preds = %740
  %746 = getelementptr inbounds i8, i8* %741, i64 1
  %747 = icmp eq i8* %746, %11
  br i1 %747, label %748, label %740

748:                                              ; preds = %745
  %749 = ptrtoint i8* %11 to i64
  br label %754

750:                                              ; preds = %662
  %751 = ptrtoint i8* %11 to i64
  br label %754

752:                                              ; preds = %647
  %753 = ptrtoint i8* %11 to i64
  br label %754

754:                                              ; preds = %691, %750, %752, %748, %734
  %755 = phi i64 [ %735, %734 ], [ %749, %748 ], [ %751, %750 ], [ %753, %752 ], [ %692, %691 ]
  %756 = add nsw i32 %633, -1
  %757 = shl i32 1, %756
  %758 = icmp sgt i32 %637, %757
  br i1 %758, label %759, label %761

759:                                              ; preds = %754
  %760 = add nsw i64 %639, 1
  br label %769

761:                                              ; preds = %754
  %762 = icmp eq i32 %637, %757
  br i1 %762, label %763, label %769

763:                                              ; preds = %761
  %764 = and i64 %639, 1
  %765 = xor i8 %646, 1
  %766 = zext i8 %765 to i64
  %767 = or i64 %764, %766
  %768 = add nsw i64 %767, %639
  br label %769

769:                                              ; preds = %763, %761, %759
  %770 = phi i64 [ %760, %759 ], [ %639, %761 ], [ %768, %763 ]
  %771 = shl i64 1, %531
  %772 = and i64 %770, %771
  %773 = icmp ne i64 %772, 0
  %774 = zext i1 %773 to i32
  %775 = add nsw i32 %644, %774
  %776 = zext i1 %773 to i64
  %777 = ashr i64 %770, %776
  br i1 %521, label %847, label %1008

778:                                              ; preds = %611
  br i1 %205, label %779, label %783

779:                                              ; preds = %778
  %780 = getelementptr inbounds i8, i8* %575, i64 1
  %781 = ptrtoint i8* %780 to i64
  %782 = icmp eq i8* %780, %11
  br i1 %782, label %836, label %827

783:                                              ; preds = %778
  %784 = icmp slt i8 %574, 64
  %785 = and i1 %784, %581
  %786 = add i8 %574, -97
  %787 = icmp ult i8 %786, 6
  %788 = or i1 %787, %785
  br i1 %788, label %797, label %789

789:                                              ; preds = %783
  %790 = icmp sgt i8 %574, 64
  br i1 %790, label %795, label %791

791:                                              ; preds = %789
  %792 = getelementptr inbounds i8, i8* %575, i64 1
  %793 = ptrtoint i8* %792 to i64
  %794 = icmp eq i8* %792, %11
  br i1 %794, label %838, label %827

795:                                              ; preds = %789
  %796 = icmp sgt i8 %574, 70
  br label %797

797:                                              ; preds = %795, %783
  %798 = phi i1 [ %796, %795 ], [ false, %783 ]
  %799 = getelementptr inbounds i8, i8* %575, i64 1
  %800 = ptrtoint i8* %799 to i64
  %801 = icmp eq i8* %799, %11
  %802 = or i1 %801, %798
  br i1 %802, label %824, label %803

803:                                              ; preds = %797
  %804 = getelementptr inbounds i8, i8* %575, i64 2
  %805 = icmp eq i8* %804, %11
  br i1 %805, label %827, label %806

806:                                              ; preds = %803
  %807 = load i8, i8* %799, align 1
  %808 = sext i8 %807 to i32
  %809 = icmp eq i32 %204, %808
  br i1 %809, label %810, label %820

810:                                              ; preds = %806
  %811 = load i8, i8* %804, align 1
  %812 = sext i8 %811 to i32
  %813 = add nsw i32 %812, -48
  %814 = icmp ult i32 %813, 10
  %815 = icmp slt i8 %811, 64
  %816 = and i1 %815, %814
  br i1 %816, label %818, label %817

817:                                              ; preds = %810
  switch i8 %811, label %820 [
    i8 102, label %818
    i8 101, label %818
    i8 100, label %818
    i8 99, label %818
    i8 98, label %818
    i8 97, label %818
    i8 70, label %818
    i8 69, label %818
    i8 68, label %818
    i8 67, label %818
    i8 66, label %818
    i8 65, label %818
  ]

818:                                              ; preds = %817, %817, %817, %817, %817, %817, %817, %817, %817, %817, %817, %817, %810
  %819 = ptrtoint i8* %804 to i64
  br label %820

820:                                              ; preds = %818, %817, %806
  %821 = phi i64 [ %819, %818 ], [ %800, %817 ], [ %800, %806 ]
  %822 = phi i8* [ %804, %818 ], [ %799, %817 ], [ %799, %806 ]
  %823 = icmp eq i8* %822, %11
  br i1 %823, label %842, label %827

824:                                              ; preds = %797
  %825 = xor i1 %798, true
  %826 = or i1 %801, %825
  br i1 %826, label %840, label %827

827:                                              ; preds = %824, %820, %803, %791, %779, %594
  %828 = phi i64 [ %781, %779 ], [ %800, %824 ], [ %800, %803 ], [ %821, %820 ], [ %793, %791 ], [ %596, %594 ]
  %829 = phi i8* [ %780, %779 ], [ %799, %824 ], [ %799, %803 ], [ %822, %820 ], [ %792, %791 ], [ %595, %594 ]
  %830 = phi i32 [ %616, %779 ], [ %616, %824 ], [ %616, %803 ], [ %616, %820 ], [ %616, %791 ], [ %576, %594 ]
  %831 = phi i64 [ %619, %779 ], [ %619, %824 ], [ %619, %803 ], [ %619, %820 ], [ %619, %791 ], [ %577, %594 ]
  %832 = phi i8 [ %578, %779 ], [ %578, %824 ], [ %578, %803 ], [ %578, %820 ], [ %578, %791 ], [ 1, %594 ]
  %833 = load i8, i8* %829, align 1
  br label %572

834:                                              ; preds = %603
  %835 = ptrtoint i8* %11 to i64
  br i1 %598, label %847, label %1008

836:                                              ; preds = %779
  %837 = ptrtoint i8* %11 to i64
  br i1 %521, label %852, label %1008

838:                                              ; preds = %791
  %839 = ptrtoint i8* %11 to i64
  br i1 %521, label %858, label %1008

840:                                              ; preds = %824
  %841 = ptrtoint i8* %799 to i64
  br label %842

842:                                              ; preds = %820, %840, %597
  %843 = phi i1 [ %598, %597 ], [ %521, %840 ], [ %521, %820 ]
  %844 = phi i64 [ %573, %597 ], [ %841, %840 ], [ %821, %820 ]
  %845 = phi i32 [ %576, %597 ], [ %616, %840 ], [ %616, %820 ]
  %846 = phi i64 [ %577, %597 ], [ %619, %840 ], [ %619, %820 ]
  br i1 %843, label %847, label %1008

847:                                              ; preds = %593, %593, %834, %769, %842
  %848 = phi i64 [ %844, %842 ], [ %755, %769 ], [ %835, %834 ], [ %573, %593 ], [ %573, %593 ]
  %849 = phi i64 [ %846, %842 ], [ %777, %769 ], [ %577, %834 ], [ %577, %593 ], [ %577, %593 ]
  %850 = phi i32 [ %845, %842 ], [ %775, %769 ], [ %576, %834 ], [ %576, %593 ], [ %576, %593 ]
  %851 = inttoptr i64 %848 to i8*
  br i1 %205, label %852, label %858

852:                                              ; preds = %836, %847
  %853 = phi i8* [ %851, %847 ], [ %11, %836 ]
  %854 = phi i32 [ %850, %847 ], [ %616, %836 ]
  %855 = phi i64 [ %849, %847 ], [ %619, %836 ]
  %856 = getelementptr inbounds i8, i8* %853, i64 1
  %857 = ptrtoint i8* %856 to i64
  br label %901

858:                                              ; preds = %838, %847
  %859 = phi i8* [ %851, %847 ], [ %11, %838 ]
  %860 = phi i32 [ %850, %847 ], [ %616, %838 ]
  %861 = phi i64 [ %849, %847 ], [ %619, %838 ]
  %862 = load i8, i8* %859, align 1
  %863 = sext i8 %862 to i32
  %864 = add nsw i32 %863, -48
  %865 = icmp ult i32 %864, 10
  %866 = icmp slt i8 %862, 64
  %867 = and i1 %866, %865
  %868 = add i8 %862, -97
  %869 = icmp ult i8 %868, 6
  %870 = or i1 %869, %867
  br i1 %870, label %878, label %871

871:                                              ; preds = %858
  %872 = icmp sgt i8 %862, 64
  br i1 %872, label %876, label %873

873:                                              ; preds = %871
  %874 = getelementptr inbounds i8, i8* %859, i64 1
  %875 = ptrtoint i8* %874 to i64
  br label %901

876:                                              ; preds = %871
  %877 = icmp sgt i8 %862, 70
  br label %878

878:                                              ; preds = %876, %858
  %879 = phi i1 [ %877, %876 ], [ false, %858 ]
  %880 = getelementptr inbounds i8, i8* %859, i64 1
  %881 = ptrtoint i8* %880 to i64
  %882 = icmp eq i8* %880, %11
  %883 = or i1 %882, %879
  br i1 %883, label %901, label %884

884:                                              ; preds = %878
  %885 = getelementptr inbounds i8, i8* %859, i64 2
  %886 = icmp eq i8* %885, %11
  br i1 %886, label %901, label %887

887:                                              ; preds = %884
  %888 = load i8, i8* %880, align 1
  %889 = sext i8 %888 to i32
  %890 = icmp eq i32 %204, %889
  br i1 %890, label %891, label %907

891:                                              ; preds = %887
  %892 = load i8, i8* %885, align 1
  %893 = sext i8 %892 to i32
  %894 = add nsw i32 %893, -48
  %895 = icmp ult i32 %894, 10
  %896 = icmp slt i8 %892, 64
  %897 = and i1 %896, %895
  br i1 %897, label %899, label %898

898:                                              ; preds = %891
  switch i8 %892, label %901 [
    i8 102, label %899
    i8 101, label %899
    i8 100, label %899
    i8 99, label %899
    i8 98, label %899
    i8 97, label %899
    i8 70, label %899
    i8 69, label %899
    i8 68, label %899
    i8 67, label %899
    i8 66, label %899
    i8 65, label %899
  ]

899:                                              ; preds = %898, %898, %898, %898, %898, %898, %898, %898, %898, %898, %898, %898, %891
  %900 = ptrtoint i8* %885 to i64
  br label %901

901:                                              ; preds = %899, %898, %884, %878, %873, %852
  %902 = phi i32 [ %854, %852 ], [ %860, %878 ], [ %860, %884 ], [ %860, %899 ], [ %860, %898 ], [ %860, %873 ]
  %903 = phi i64 [ %855, %852 ], [ %861, %878 ], [ %861, %884 ], [ %861, %899 ], [ %861, %898 ], [ %861, %873 ]
  %904 = phi i64 [ %857, %852 ], [ %881, %878 ], [ %881, %884 ], [ %900, %899 ], [ %881, %898 ], [ %875, %873 ]
  %905 = phi i8* [ %856, %852 ], [ %880, %878 ], [ %880, %884 ], [ %885, %899 ], [ %880, %898 ], [ %874, %873 ]
  %906 = load i8, i8* %905, align 1
  br label %907

907:                                              ; preds = %901, %887
  %908 = phi i32 [ %902, %901 ], [ %860, %887 ]
  %909 = phi i64 [ %903, %901 ], [ %861, %887 ]
  %910 = phi i64 [ %904, %901 ], [ %881, %887 ]
  %911 = phi i8 [ %906, %901 ], [ %888, %887 ]
  %912 = phi i8* [ %905, %901 ], [ %880, %887 ]
  switch i8 %911, label %919 [
    i8 43, label %913
    i8 45, label %916
  ]

913:                                              ; preds = %907
  %914 = getelementptr inbounds i8, i8* %912, i64 1
  %915 = ptrtoint i8* %914 to i64
  br label %919

916:                                              ; preds = %907
  %917 = getelementptr inbounds i8, i8* %912, i64 1
  %918 = ptrtoint i8* %917 to i64
  br label %919

919:                                              ; preds = %916, %913, %907
  %920 = phi i64 [ %910, %907 ], [ %918, %916 ], [ %915, %913 ]
  %921 = phi i8* [ %912, %907 ], [ %917, %916 ], [ %914, %913 ]
  %922 = phi i1 [ false, %907 ], [ true, %916 ], [ false, %913 ]
  %923 = load i8, i8* %921, align 1
  %924 = sext i8 %923 to i32
  %925 = add nsw i32 %924, -48
  %926 = icmp ult i32 %925, 10
  br i1 %926, label %927, label %1002

927:                                              ; preds = %919, %989
  %928 = phi i32 [ %993, %989 ], [ %924, %919 ]
  %929 = phi i8 [ %992, %989 ], [ %923, %919 ]
  %930 = phi i8* [ %991, %989 ], [ %921, %919 ]
  %931 = phi i32 [ %941, %989 ], [ 0, %919 ]
  %932 = icmp slt i32 %931, 0
  %933 = sub nsw i32 0, %931
  %934 = select i1 %932, i32 %933, i32 %931
  %935 = icmp slt i32 %934, 97201
  br i1 %935, label %936, label %940

936:                                              ; preds = %927
  %937 = mul nsw i32 %931, 10
  %938 = add nsw i32 %928, -48
  %939 = add i32 %938, %937
  br label %940

940:                                              ; preds = %936, %927
  %941 = phi i32 [ %939, %936 ], [ %931, %927 ]
  br i1 %205, label %942, label %946

942:                                              ; preds = %940
  %943 = getelementptr inbounds i8, i8* %930, i64 1
  %944 = ptrtoint i8* %943 to i64
  %945 = icmp eq i8* %943, %11
  br i1 %945, label %996, label %989

946:                                              ; preds = %940
  %947 = icmp slt i8 %929, 64
  %948 = add i8 %929, -97
  %949 = icmp ult i8 %948, 6
  %950 = or i1 %947, %949
  br i1 %950, label %959, label %951

951:                                              ; preds = %946
  %952 = icmp sgt i8 %929, 64
  br i1 %952, label %957, label %953

953:                                              ; preds = %951
  %954 = getelementptr inbounds i8, i8* %930, i64 1
  %955 = ptrtoint i8* %954 to i64
  %956 = icmp eq i8* %954, %11
  br i1 %956, label %998, label %989

957:                                              ; preds = %951
  %958 = icmp sgt i8 %929, 70
  br label %959

959:                                              ; preds = %957, %946
  %960 = phi i1 [ %958, %957 ], [ false, %946 ]
  %961 = getelementptr inbounds i8, i8* %930, i64 1
  %962 = ptrtoint i8* %961 to i64
  %963 = icmp eq i8* %961, %11
  %964 = or i1 %963, %960
  br i1 %964, label %986, label %965

965:                                              ; preds = %959
  %966 = getelementptr inbounds i8, i8* %930, i64 2
  %967 = icmp eq i8* %966, %11
  br i1 %967, label %989, label %968

968:                                              ; preds = %965
  %969 = load i8, i8* %961, align 1
  %970 = sext i8 %969 to i32
  %971 = icmp eq i32 %204, %970
  br i1 %971, label %972, label %982

972:                                              ; preds = %968
  %973 = load i8, i8* %966, align 1
  %974 = sext i8 %973 to i32
  %975 = add nsw i32 %974, -48
  %976 = icmp ult i32 %975, 10
  %977 = icmp slt i8 %973, 64
  %978 = and i1 %977, %976
  br i1 %978, label %980, label %979

979:                                              ; preds = %972
  switch i8 %973, label %982 [
    i8 102, label %980
    i8 101, label %980
    i8 100, label %980
    i8 99, label %980
    i8 98, label %980
    i8 97, label %980
    i8 70, label %980
    i8 69, label %980
    i8 68, label %980
    i8 67, label %980
    i8 66, label %980
    i8 65, label %980
  ]

980:                                              ; preds = %979, %979, %979, %979, %979, %979, %979, %979, %979, %979, %979, %979, %972
  %981 = ptrtoint i8* %966 to i64
  br label %982

982:                                              ; preds = %980, %979, %968
  %983 = phi i64 [ %981, %980 ], [ %962, %979 ], [ %962, %968 ]
  %984 = phi i8* [ %966, %980 ], [ %961, %979 ], [ %961, %968 ]
  %985 = icmp eq i8* %984, %11
  br i1 %985, label %1002, label %989

986:                                              ; preds = %959
  %987 = xor i1 %960, true
  %988 = or i1 %963, %987
  br i1 %988, label %1000, label %989

989:                                              ; preds = %986, %982, %965, %953, %942
  %990 = phi i64 [ %944, %942 ], [ %962, %986 ], [ %962, %965 ], [ %983, %982 ], [ %955, %953 ]
  %991 = phi i8* [ %943, %942 ], [ %961, %986 ], [ %961, %965 ], [ %984, %982 ], [ %954, %953 ]
  %992 = load i8, i8* %991, align 1
  %993 = sext i8 %992 to i32
  %994 = add nsw i32 %993, -48
  %995 = icmp ult i32 %994, 10
  br i1 %995, label %927, label %1002

996:                                              ; preds = %942
  %997 = ptrtoint i8* %11 to i64
  br label %1002

998:                                              ; preds = %953
  %999 = ptrtoint i8* %11 to i64
  br label %1002

1000:                                             ; preds = %986
  %1001 = ptrtoint i8* %961 to i64
  br label %1002

1002:                                             ; preds = %989, %982, %1000, %996, %998, %919
  %1003 = phi i64 [ %920, %919 ], [ %997, %996 ], [ %999, %998 ], [ %1001, %1000 ], [ %990, %989 ], [ %983, %982 ]
  %1004 = phi i32 [ 0, %919 ], [ %941, %996 ], [ %941, %998 ], [ %941, %1000 ], [ %941, %982 ], [ %941, %989 ]
  %1005 = sub nsw i32 0, %1004
  %1006 = select i1 %922, i32 %1005, i32 %1004
  %1007 = add nsw i32 %1006, %908
  br label %1008

1008:                                             ; preds = %836, %838, %834, %769, %1002, %842
  %1009 = phi i64 [ %1003, %1002 ], [ %844, %842 ], [ %755, %769 ], [ %835, %834 ], [ %839, %838 ], [ %837, %836 ]
  %1010 = phi i64 [ %909, %1002 ], [ %846, %842 ], [ %777, %769 ], [ %577, %834 ], [ %619, %838 ], [ %619, %836 ]
  %1011 = phi i32 [ %1007, %1002 ], [ %845, %842 ], [ %775, %769 ], [ %576, %834 ], [ %616, %838 ], [ %616, %836 ]
  %1012 = icmp eq i32 %1011, 0
  %1013 = icmp eq i64 %1010, 0
  %1014 = or i1 %1013, %1012
  br i1 %1014, label %1015, label %1022

1015:                                             ; preds = %1008
  br i1 %522, label %1016, label %1019

1016:                                             ; preds = %1015
  br i1 %1013, label %1067, label %1017

1017:                                             ; preds = %1016
  %1018 = sub nsw i64 0, %1010
  br label %1019

1019:                                             ; preds = %1017, %1015
  %1020 = phi i64 [ %1018, %1017 ], [ %1010, %1015 ]
  %1021 = sitofp i64 %1020 to double
  br label %1067

1022:                                             ; preds = %1008
  %1023 = icmp ugt i64 %1010, 9007199254740991
  br i1 %1023, label %1024, label %1030

1024:                                             ; preds = %1022, %1024
  %1025 = phi i32 [ %1028, %1024 ], [ %1011, %1022 ]
  %1026 = phi i64 [ %1027, %1024 ], [ %1010, %1022 ]
  %1027 = lshr i64 %1026, 1
  %1028 = add nsw i32 %1025, 1
  %1029 = icmp ugt i64 %1026, 18014398509481983
  br i1 %1029, label %1024, label %1030

1030:                                             ; preds = %1024, %1022
  %1031 = phi i64 [ %1010, %1022 ], [ %1027, %1024 ]
  %1032 = phi i32 [ %1011, %1022 ], [ %1028, %1024 ]
  %1033 = icmp sgt i32 %1032, 971
  br i1 %1033, label %1063, label %1034

1034:                                             ; preds = %1030
  %1035 = icmp slt i32 %1032, -1074
  br i1 %1035, label %1063, label %1036

1036:                                             ; preds = %1034
  %1037 = icmp ne i32 %1032, -1074
  %1038 = and i64 %1031, 4503599627370496
  %1039 = icmp eq i64 %1038, 0
  %1040 = and i1 %1037, %1039
  br i1 %1040, label %1041, label %1050

1041:                                             ; preds = %1036, %1041
  %1042 = phi i32 [ %1045, %1041 ], [ %1032, %1036 ]
  %1043 = phi i64 [ %1044, %1041 ], [ %1031, %1036 ]
  %1044 = shl i64 %1043, 1
  %1045 = add nsw i32 %1042, -1
  %1046 = icmp sgt i32 %1045, -1074
  %1047 = and i64 %1043, 2251799813685248
  %1048 = icmp eq i64 %1047, 0
  %1049 = and i1 %1046, %1048
  br i1 %1049, label %1041, label %1050

1050:                                             ; preds = %1041, %1036
  %1051 = phi i64 [ %1031, %1036 ], [ %1044, %1041 ]
  %1052 = phi i32 [ %1032, %1036 ], [ %1045, %1041 ]
  %1053 = phi i1 [ %1039, %1036 ], [ %1048, %1041 ]
  %1054 = icmp eq i32 %1052, -1074
  %1055 = and i1 %1054, %1053
  %1056 = add nsw i32 %1052, 1075
  %1057 = zext i32 %1056 to i64
  %1058 = shl i64 %1057, 52
  %1059 = select i1 %1055, i64 0, i64 %1058
  %1060 = and i64 %1051, 4503599627370495
  %1061 = or i64 %1059, %1060
  %1062 = bitcast i64 %1061 to double
  br label %1063

1063:                                             ; preds = %1050, %1034, %1030
  %1064 = phi double [ %1062, %1050 ], [ 0x7FF0000000000000, %1030 ], [ 0.000000e+00, %1034 ]
  %1065 = fsub double -0.000000e+00, %1064
  %1066 = select i1 %522, double %1065, double %1064
  br label %1067

1067:                                             ; preds = %569, %1016, %1019, %1063
  %1068 = phi i64 [ %1009, %1063 ], [ %1009, %1019 ], [ %1009, %1016 ], [ %570, %569 ]
  %1069 = phi double [ %1066, %1063 ], [ %1021, %1019 ], [ -0.000000e+00, %1016 ], [ %571, %569 ]
  br i1 %19, label %1070, label %1089

1070:                                             ; preds = %1067
  %1071 = inttoptr i64 %1068 to i8*
  %1072 = icmp eq i8* %11, %1071
  br i1 %1072, label %1089, label %1073

1073:                                             ; preds = %1070
  %1074 = load i8, i8* %1071, align 1
  %1075 = sext i8 %1074 to i32
  %1076 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %1075) #5
  br i1 %1076, label %1081, label %1089

1077:                                             ; preds = %1081
  %1078 = load i8, i8* %1083, align 1
  %1079 = sext i8 %1078 to i32
  %1080 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %1079) #5
  br i1 %1080, label %1081, label %1087

1081:                                             ; preds = %1073, %1077
  %1082 = phi i8* [ %1083, %1077 ], [ %1071, %1073 ]
  %1083 = getelementptr inbounds i8, i8* %1082, i64 1
  %1084 = icmp eq i8* %1083, %11
  br i1 %1084, label %1085, label %1077

1085:                                             ; preds = %1081
  %1086 = ptrtoint i8* %11 to i64
  br label %1089

1087:                                             ; preds = %1077
  %1088 = ptrtoint i8* %1083 to i64
  br label %1089

1089:                                             ; preds = %1087, %1073, %1085, %1070, %1067
  %1090 = phi i64 [ %1068, %1067 ], [ %1068, %1070 ], [ %1086, %1085 ], [ %1068, %1073 ], [ %1088, %1087 ]
  %1091 = sub i64 %1090, %9
  %1092 = trunc i64 %1091 to i32
  store i32 %1092, i32* %4, align 4
  br label %1609

1093:                                             ; preds = %238
  %1094 = icmp eq i8 %245, 48
  br i1 %1094, label %1095, label %1141

1095:                                             ; preds = %246, %1093
  br label %1096

1096:                                             ; preds = %1095, %1102
  %1097 = phi i8* [ %1104, %1102 ], [ %244, %1095 ]
  %1098 = getelementptr inbounds i8, i8* %1097, i64 1
  %1099 = ptrtoint i8* %1098 to i64
  %1100 = icmp eq i8* %1098, %11
  br i1 %205, label %1101, label %1107

1101:                                             ; preds = %1096
  br i1 %1100, label %1131, label %1102

1102:                                             ; preds = %1101, %1125, %1108
  %1103 = phi i64 [ %1099, %1101 ], [ %1126, %1125 ], [ %1099, %1108 ]
  %1104 = inttoptr i64 %1103 to i8*
  %1105 = load i8, i8* %1104, align 1
  %1106 = icmp eq i8 %1105, 48
  br i1 %1106, label %1096, label %1139

1107:                                             ; preds = %1096
  br i1 %1100, label %1129, label %1108

1108:                                             ; preds = %1107
  %1109 = getelementptr inbounds i8, i8* %1097, i64 2
  %1110 = icmp eq i8* %1109, %11
  br i1 %1110, label %1102, label %1111

1111:                                             ; preds = %1108
  %1112 = load i8, i8* %1098, align 1
  %1113 = sext i8 %1112 to i32
  %1114 = icmp eq i32 %1113, %204
  br i1 %1114, label %1115, label %1125

1115:                                             ; preds = %1111
  %1116 = load i8, i8* %1109, align 1
  %1117 = sext i8 %1116 to i32
  %1118 = add nsw i32 %1117, -48
  %1119 = icmp ult i32 %1118, 10
  %1120 = icmp slt i8 %1116, 58
  %1121 = and i1 %1120, %1119
  %1122 = ptrtoint i8* %1109 to i64
  %1123 = select i1 %1121, i64 %1122, i64 %1099
  %1124 = select i1 %1121, i8* %1109, i8* %1098
  br label %1125

1125:                                             ; preds = %1115, %1111
  %1126 = phi i64 [ %1099, %1111 ], [ %1123, %1115 ]
  %1127 = phi i8* [ %1098, %1111 ], [ %1124, %1115 ]
  %1128 = icmp eq i8* %1127, %11
  br i1 %1128, label %1133, label %1102

1129:                                             ; preds = %1107
  %1130 = ptrtoint i8* %11 to i64
  br label %1133

1131:                                             ; preds = %1101
  %1132 = ptrtoint i8* %11 to i64
  br label %1133

1133:                                             ; preds = %1125, %1131, %1129
  %1134 = phi i64 [ %1130, %1129 ], [ %1132, %1131 ], [ %1126, %1125 ]
  %1135 = sub i64 %1134, %9
  %1136 = trunc i64 %1135 to i32
  store i32 %1136, i32* %4, align 4
  %1137 = icmp eq i8 %88, 0
  %1138 = select i1 %1137, double 0.000000e+00, double -0.000000e+00
  br label %1609

1139:                                             ; preds = %1102
  %1140 = inttoptr i64 %1103 to i8*
  br label %1141

1141:                                             ; preds = %246, %1139, %1093
  %1142 = phi i8* [ %244, %1093 ], [ %1140, %1139 ], [ %244, %246 ]
  %1143 = phi i64 [ %239, %1093 ], [ %1103, %1139 ], [ %239, %246 ]
  %1144 = and i32 %13, 2
  %1145 = icmp ne i32 %1144, 0
  br label %1146

1146:                                             ; preds = %198, %1141
  %1147 = phi i8* [ %146, %198 ], [ %1142, %1141 ]
  %1148 = phi i1 [ false, %198 ], [ true, %1141 ]
  %1149 = phi i64 [ %87, %198 ], [ %1143, %1141 ]
  %1150 = phi i1 [ false, %198 ], [ %1145, %1141 ]
  %1151 = zext i1 %1150 to i8
  %1152 = getelementptr inbounds [782 x i8], [782 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 782, i8* nonnull %1152) #5
  %1153 = load i8, i8* %1147, align 1
  %1154 = add i8 %1153, -48
  %1155 = icmp ult i8 %1154, 10
  br i1 %1155, label %1156, label %1238

1156:                                             ; preds = %1146
  %1157 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 6
  br label %1158

1158:                                             ; preds = %1156, %1197
  %1159 = phi i8 [ %1153, %1156 ], [ %1200, %1197 ]
  %1160 = phi i8* [ %1147, %1156 ], [ %1199, %1197 ]
  %1161 = phi i32 [ 0, %1156 ], [ %1182, %1197 ]
  %1162 = phi i32 [ 0, %1156 ], [ %1181, %1197 ]
  %1163 = phi i8 [ 0, %1156 ], [ %1180, %1197 ]
  %1164 = phi i32 [ 0, %1156 ], [ %1179, %1197 ]
  %1165 = phi i8 [ %1151, %1156 ], [ %1189, %1197 ]
  %1166 = icmp slt i32 %1161, 772
  br i1 %1166, label %1167, label %1172

1167:                                             ; preds = %1158
  %1168 = add nsw i32 %1164, 1
  %1169 = sext i32 %1164 to i64
  %1170 = getelementptr inbounds [782 x i8], [782 x i8]* %6, i64 0, i64 %1169
  store i8 %1159, i8* %1170, align 1
  %1171 = add nsw i32 %1161, 1
  br label %1178

1172:                                             ; preds = %1158
  %1173 = add nsw i32 %1162, 1
  %1174 = and i8 %1163, 1
  %1175 = icmp ne i8 %1159, 48
  %1176 = zext i1 %1175 to i8
  %1177 = or i8 %1174, %1176
  br label %1178

1178:                                             ; preds = %1172, %1167
  %1179 = phi i32 [ %1168, %1167 ], [ %1164, %1172 ]
  %1180 = phi i8 [ %1163, %1167 ], [ %1177, %1172 ]
  %1181 = phi i32 [ %1162, %1167 ], [ %1173, %1172 ]
  %1182 = phi i32 [ %1171, %1167 ], [ %1161, %1172 ]
  %1183 = icmp eq i8 %1165, 0
  br i1 %1183, label %1187, label %1184

1184:                                             ; preds = %1178
  %1185 = load i8, i8* %1160, align 1
  %1186 = icmp slt i8 %1185, 56
  br label %1187

1187:                                             ; preds = %1178, %1184
  %1188 = phi i1 [ false, %1178 ], [ %1186, %1184 ]
  %1189 = zext i1 %1188 to i8
  %1190 = load i16, i16* %1157, align 8
  %1191 = zext i16 %1190 to i32
  %1192 = icmp eq i16 %1190, 0
  br i1 %1192, label %1193, label %1203

1193:                                             ; preds = %1187
  %1194 = getelementptr inbounds i8, i8* %1160, i64 1
  %1195 = ptrtoint i8* %1194 to i64
  %1196 = icmp eq i8* %1194, %11
  br i1 %1196, label %1526, label %1197

1197:                                             ; preds = %1193, %1232, %1213, %1215
  %1198 = phi i64 [ %1195, %1193 ], [ %1233, %1232 ], [ %1211, %1213 ], [ %1211, %1215 ]
  %1199 = inttoptr i64 %1198 to i8*
  %1200 = load i8, i8* %1199, align 1
  %1201 = add i8 %1200, -48
  %1202 = icmp ult i8 %1201, 10
  br i1 %1202, label %1158, label %1236

1203:                                             ; preds = %1187
  %1204 = load i8, i8* %1160, align 1
  %1205 = sext i8 %1204 to i32
  %1206 = add nsw i32 %1205, -48
  %1207 = icmp ult i32 %1206, 10
  %1208 = icmp slt i8 %1204, 58
  %1209 = and i1 %1208, %1207
  %1210 = getelementptr inbounds i8, i8* %1160, i64 1
  %1211 = ptrtoint i8* %1210 to i64
  %1212 = icmp eq i8* %1210, %11
  br i1 %1209, label %1214, label %1213

1213:                                             ; preds = %1203
  br i1 %1212, label %1528, label %1197

1214:                                             ; preds = %1203
  br i1 %1212, label %1530, label %1215

1215:                                             ; preds = %1214
  %1216 = getelementptr inbounds i8, i8* %1160, i64 2
  %1217 = icmp eq i8* %1216, %11
  br i1 %1217, label %1197, label %1218

1218:                                             ; preds = %1215
  %1219 = load i8, i8* %1210, align 1
  %1220 = sext i8 %1219 to i32
  %1221 = icmp eq i32 %1220, %1191
  br i1 %1221, label %1222, label %1232

1222:                                             ; preds = %1218
  %1223 = load i8, i8* %1216, align 1
  %1224 = sext i8 %1223 to i32
  %1225 = add nsw i32 %1224, -48
  %1226 = icmp ult i32 %1225, 10
  %1227 = icmp slt i8 %1223, 58
  %1228 = and i1 %1227, %1226
  %1229 = ptrtoint i8* %1216 to i64
  %1230 = select i1 %1228, i64 %1229, i64 %1211
  %1231 = select i1 %1228, i8* %1216, i8* %1210
  br label %1232

1232:                                             ; preds = %1222, %1218
  %1233 = phi i64 [ %1211, %1218 ], [ %1230, %1222 ]
  %1234 = phi i8* [ %1210, %1218 ], [ %1231, %1222 ]
  %1235 = icmp eq i8* %1234, %11
  br i1 %1235, label %1540, label %1197

1236:                                             ; preds = %1197
  %1237 = inttoptr i64 %1198 to i8*
  br label %1238

1238:                                             ; preds = %1236, %1146
  %1239 = phi i64 [ %1149, %1146 ], [ %1198, %1236 ]
  %1240 = phi i8 [ %1151, %1146 ], [ %1189, %1236 ]
  %1241 = phi i32 [ 0, %1146 ], [ %1179, %1236 ]
  %1242 = phi i8 [ 0, %1146 ], [ %1180, %1236 ]
  %1243 = phi i32 [ 0, %1146 ], [ %1181, %1236 ]
  %1244 = phi i32 [ 0, %1146 ], [ %1182, %1236 ]
  %1245 = phi i8* [ %1147, %1146 ], [ %1237, %1236 ]
  %1246 = phi i8 [ %1153, %1146 ], [ %1200, %1236 ]
  %1247 = icmp eq i32 %1244, 0
  %1248 = select i1 %1247, i8 0, i8 %1240
  %1249 = icmp eq i8 %1246, 46
  br i1 %1249, label %1250, label %1394

1250:                                             ; preds = %1238
  %1251 = icmp ne i8 %1248, 0
  %1252 = xor i1 %1251, true
  %1253 = or i1 %15, %1252
  br i1 %1253, label %1257, label %1254

1254:                                             ; preds = %1250
  %1255 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1256 = load double, double* %1255, align 8
  br label %1607

1257:                                             ; preds = %1250
  br i1 %1251, label %1550, label %1258

1258:                                             ; preds = %1257
  %1259 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 6
  %1260 = load i16, i16* %1259, align 8
  %1261 = zext i16 %1260 to i32
  %1262 = icmp eq i16 %1260, 0
  %1263 = getelementptr inbounds i8, i8* %1245, i64 1
  %1264 = ptrtoint i8* %1263 to i64
  %1265 = icmp eq i8* %1263, %11
  br i1 %1265, label %1266, label %1271

1266:                                             ; preds = %1258
  br i1 %1247, label %1267, label %1540

1267:                                             ; preds = %1266
  br i1 %1148, label %1534, label %1268

1268:                                             ; preds = %1267
  %1269 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1270 = load double, double* %1269, align 8
  br label %1607

1271:                                             ; preds = %1258
  br i1 %1247, label %1272, label %1320

1272:                                             ; preds = %1271
  %1273 = load i8, i8* %1263, align 1
  %1274 = icmp eq i8 %1273, 48
  br i1 %1274, label %1275, label %1320

1275:                                             ; preds = %1272, %1314
  %1276 = phi i8* [ %1317, %1314 ], [ %1263, %1272 ]
  %1277 = phi i32 [ %1316, %1314 ], [ 0, %1272 ]
  %1278 = getelementptr inbounds i8, i8* %1276, i64 1
  %1279 = ptrtoint i8* %1278 to i64
  %1280 = icmp eq i8* %1278, %11
  br i1 %1262, label %1281, label %1282

1281:                                             ; preds = %1275
  br i1 %1280, label %1306, label %1314

1282:                                             ; preds = %1275
  br i1 %1280, label %1304, label %1283

1283:                                             ; preds = %1282
  %1284 = getelementptr inbounds i8, i8* %1276, i64 2
  %1285 = icmp eq i8* %1284, %11
  br i1 %1285, label %1314, label %1286

1286:                                             ; preds = %1283
  %1287 = load i8, i8* %1278, align 1
  %1288 = sext i8 %1287 to i32
  %1289 = icmp eq i32 %1288, %1261
  br i1 %1289, label %1290, label %1300

1290:                                             ; preds = %1286
  %1291 = load i8, i8* %1284, align 1
  %1292 = sext i8 %1291 to i32
  %1293 = add nsw i32 %1292, -48
  %1294 = icmp ult i32 %1293, 10
  %1295 = icmp slt i8 %1291, 58
  %1296 = and i1 %1295, %1294
  %1297 = ptrtoint i8* %1284 to i64
  %1298 = select i1 %1296, i64 %1297, i64 %1279
  %1299 = select i1 %1296, i8* %1284, i8* %1278
  br label %1300

1300:                                             ; preds = %1290, %1286
  %1301 = phi i64 [ %1279, %1286 ], [ %1298, %1290 ]
  %1302 = phi i8* [ %1278, %1286 ], [ %1299, %1290 ]
  %1303 = icmp eq i8* %1302, %11
  br i1 %1303, label %1308, label %1314

1304:                                             ; preds = %1282
  %1305 = ptrtoint i8* %11 to i64
  br label %1308

1306:                                             ; preds = %1281
  %1307 = ptrtoint i8* %11 to i64
  br label %1308

1308:                                             ; preds = %1300, %1306, %1304
  %1309 = phi i64 [ %1305, %1304 ], [ %1307, %1306 ], [ %1301, %1300 ]
  %1310 = sub i64 %1309, %9
  %1311 = trunc i64 %1310 to i32
  store i32 %1311, i32* %4, align 4
  %1312 = icmp eq i8 %88, 0
  %1313 = select i1 %1312, double 0.000000e+00, double -0.000000e+00
  br label %1607

1314:                                             ; preds = %1283, %1300, %1281
  %1315 = phi i64 [ %1279, %1281 ], [ %1301, %1300 ], [ %1279, %1283 ]
  %1316 = add nsw i32 %1277, -1
  %1317 = inttoptr i64 %1315 to i8*
  %1318 = load i8, i8* %1317, align 1
  %1319 = icmp eq i8 %1318, 48
  br i1 %1319, label %1275, label %1320

1320:                                             ; preds = %1314, %1272, %1271
  %1321 = phi i64 [ %1264, %1271 ], [ %1264, %1272 ], [ %1315, %1314 ]
  %1322 = phi i32 [ 0, %1271 ], [ 0, %1272 ], [ %1316, %1314 ]
  %1323 = inttoptr i64 %1321 to i8*
  %1324 = load i8, i8* %1323, align 1
  %1325 = add i8 %1324, -48
  %1326 = icmp ult i8 %1325, 10
  br i1 %1326, label %1327, label %1394

1327:                                             ; preds = %1320, %1355
  %1328 = phi i8 [ %1358, %1355 ], [ %1324, %1320 ]
  %1329 = phi i8* [ %1357, %1355 ], [ %1323, %1320 ]
  %1330 = phi i32 [ %1350, %1355 ], [ %1322, %1320 ]
  %1331 = phi i32 [ %1349, %1355 ], [ %1244, %1320 ]
  %1332 = phi i8 [ %1348, %1355 ], [ %1242, %1320 ]
  %1333 = phi i32 [ %1347, %1355 ], [ %1241, %1320 ]
  %1334 = icmp slt i32 %1331, 772
  br i1 %1334, label %1335, label %1341

1335:                                             ; preds = %1327
  %1336 = add nsw i32 %1333, 1
  %1337 = sext i32 %1333 to i64
  %1338 = getelementptr inbounds [782 x i8], [782 x i8]* %6, i64 0, i64 %1337
  store i8 %1328, i8* %1338, align 1
  %1339 = add nsw i32 %1331, 1
  %1340 = add nsw i32 %1330, -1
  br label %1346

1341:                                             ; preds = %1327
  %1342 = and i8 %1332, 1
  %1343 = icmp ne i8 %1328, 48
  %1344 = zext i1 %1343 to i8
  %1345 = or i8 %1342, %1344
  br label %1346

1346:                                             ; preds = %1341, %1335
  %1347 = phi i32 [ %1336, %1335 ], [ %1333, %1341 ]
  %1348 = phi i8 [ %1332, %1335 ], [ %1345, %1341 ]
  %1349 = phi i32 [ %1339, %1335 ], [ %1331, %1341 ]
  %1350 = phi i32 [ %1340, %1335 ], [ %1330, %1341 ]
  br i1 %1262, label %1351, label %1361

1351:                                             ; preds = %1346
  %1352 = getelementptr inbounds i8, i8* %1329, i64 1
  %1353 = ptrtoint i8* %1352 to i64
  %1354 = icmp eq i8* %1352, %11
  br i1 %1354, label %1520, label %1355

1355:                                             ; preds = %1351, %1390, %1371, %1373
  %1356 = phi i64 [ %1353, %1351 ], [ %1391, %1390 ], [ %1369, %1371 ], [ %1369, %1373 ]
  %1357 = inttoptr i64 %1356 to i8*
  %1358 = load i8, i8* %1357, align 1
  %1359 = add i8 %1358, -48
  %1360 = icmp ult i8 %1359, 10
  br i1 %1360, label %1327, label %1394

1361:                                             ; preds = %1346
  %1362 = load i8, i8* %1329, align 1
  %1363 = sext i8 %1362 to i32
  %1364 = add nsw i32 %1363, -48
  %1365 = icmp ult i32 %1364, 10
  %1366 = icmp slt i8 %1362, 58
  %1367 = and i1 %1366, %1365
  %1368 = getelementptr inbounds i8, i8* %1329, i64 1
  %1369 = ptrtoint i8* %1368 to i64
  %1370 = icmp eq i8* %1368, %11
  br i1 %1367, label %1372, label %1371

1371:                                             ; preds = %1361
  br i1 %1370, label %1522, label %1355

1372:                                             ; preds = %1361
  br i1 %1370, label %1524, label %1373

1373:                                             ; preds = %1372
  %1374 = getelementptr inbounds i8, i8* %1329, i64 2
  %1375 = icmp eq i8* %1374, %11
  br i1 %1375, label %1355, label %1376

1376:                                             ; preds = %1373
  %1377 = load i8, i8* %1368, align 1
  %1378 = sext i8 %1377 to i32
  %1379 = icmp eq i32 %1378, %1261
  br i1 %1379, label %1380, label %1390

1380:                                             ; preds = %1376
  %1381 = load i8, i8* %1374, align 1
  %1382 = sext i8 %1381 to i32
  %1383 = add nsw i32 %1382, -48
  %1384 = icmp ult i32 %1383, 10
  %1385 = icmp slt i8 %1381, 58
  %1386 = and i1 %1385, %1384
  %1387 = ptrtoint i8* %1374 to i64
  %1388 = select i1 %1386, i64 %1387, i64 %1369
  %1389 = select i1 %1386, i8* %1374, i8* %1368
  br label %1390

1390:                                             ; preds = %1380, %1376
  %1391 = phi i64 [ %1369, %1376 ], [ %1388, %1380 ]
  %1392 = phi i8* [ %1368, %1376 ], [ %1389, %1380 ]
  %1393 = icmp eq i8* %1392, %11
  br i1 %1393, label %1534, label %1355

1394:                                             ; preds = %1355, %1320, %1238
  %1395 = phi i64 [ %1239, %1238 ], [ %1321, %1320 ], [ %1356, %1355 ]
  %1396 = phi i32 [ %1241, %1238 ], [ %1241, %1320 ], [ %1347, %1355 ]
  %1397 = phi i8 [ %1242, %1238 ], [ %1242, %1320 ], [ %1348, %1355 ]
  %1398 = phi i32 [ %1244, %1238 ], [ %1244, %1320 ], [ %1349, %1355 ]
  %1399 = phi i32 [ 0, %1238 ], [ %1322, %1320 ], [ %1350, %1355 ]
  %1400 = xor i1 %1148, true
  %1401 = or i32 %1399, %1398
  %1402 = icmp eq i32 %1401, 0
  %1403 = and i1 %1402, %1400
  br i1 %1403, label %1404, label %1407

1404:                                             ; preds = %1394
  %1405 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1406 = load double, double* %1405, align 8
  br label %1607

1407:                                             ; preds = %1394
  %1408 = inttoptr i64 %1395 to i8*
  %1409 = load i8, i8* %1408, align 1
  switch i8 %1409, label %1475 [
    i8 101, label %1410
    i8 69, label %1410
  ]

1410:                                             ; preds = %1407, %1407
  %1411 = icmp ne i8 %1248, 0
  %1412 = xor i1 %1411, true
  %1413 = or i1 %15, %1412
  br i1 %1413, label %1417, label %1414

1414:                                             ; preds = %1410
  %1415 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1416 = load double, double* %1415, align 8
  br label %1607

1417:                                             ; preds = %1410
  br i1 %1411, label %1540, label %1418

1418:                                             ; preds = %1417
  %1419 = getelementptr inbounds i8, i8* %1408, i64 1
  %1420 = icmp eq i8* %1419, %11
  br i1 %1420, label %1421, label %1425

1421:                                             ; preds = %1418
  br i1 %15, label %1534, label %1422

1422:                                             ; preds = %1421
  %1423 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1424 = load double, double* %1423, align 8
  br label %1607

1425:                                             ; preds = %1418
  %1426 = load i8, i8* %1419, align 1
  switch i8 %1426, label %1434 [
    i8 43, label %1427
    i8 45, label %1427
  ]

1427:                                             ; preds = %1425, %1425
  %1428 = getelementptr inbounds i8, i8* %1408, i64 2
  %1429 = icmp eq i8* %1428, %11
  br i1 %1429, label %1430, label %1434

1430:                                             ; preds = %1427
  br i1 %15, label %1534, label %1431

1431:                                             ; preds = %1430
  %1432 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1433 = load double, double* %1432, align 8
  br label %1607

1434:                                             ; preds = %1425, %1427
  %1435 = phi i8* [ %1419, %1425 ], [ %1428, %1427 ]
  %1436 = phi i8 [ 43, %1425 ], [ %1426, %1427 ]
  %1437 = icmp eq i8* %1435, %11
  br i1 %1437, label %1442, label %1438

1438:                                             ; preds = %1434
  %1439 = load i8, i8* %1435, align 1
  %1440 = add i8 %1439, -48
  %1441 = icmp ugt i8 %1440, 9
  br i1 %1441, label %1442, label %1446

1442:                                             ; preds = %1438, %1434
  br i1 %15, label %1534, label %1443

1443:                                             ; preds = %1442
  %1444 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1445 = load double, double* %1444, align 8
  br label %1607

1446:                                             ; preds = %1438, %1464
  %1447 = phi i8 [ %1465, %1464 ], [ %1439, %1438 ]
  %1448 = phi i8* [ %1462, %1464 ], [ %1435, %1438 ]
  %1449 = phi i32 [ %1461, %1464 ], [ 0, %1438 ]
  %1450 = sext i8 %1447 to i32
  %1451 = add nsw i32 %1450, -48
  %1452 = icmp sgt i32 %1449, 107374181
  br i1 %1452, label %1453, label %1457

1453:                                             ; preds = %1446
  %1454 = icmp eq i32 %1449, 107374182
  %1455 = icmp slt i32 %1451, 4
  %1456 = and i1 %1454, %1455
  br i1 %1456, label %1457, label %1460

1457:                                             ; preds = %1453, %1446
  %1458 = mul nsw i32 %1449, 10
  %1459 = add nsw i32 %1451, %1458
  br label %1460

1460:                                             ; preds = %1453, %1457
  %1461 = phi i32 [ %1459, %1457 ], [ 1073741823, %1453 ]
  %1462 = getelementptr inbounds i8, i8* %1448, i64 1
  %1463 = icmp eq i8* %1462, %11
  br i1 %1463, label %1468, label %1464

1464:                                             ; preds = %1460
  %1465 = load i8, i8* %1462, align 1
  %1466 = add i8 %1465, -48
  %1467 = icmp ult i8 %1466, 10
  br i1 %1467, label %1446, label %1468

1468:                                             ; preds = %1464, %1460
  %1469 = phi i8* [ %1462, %1464 ], [ %11, %1460 ]
  %1470 = ptrtoint i8* %1469 to i64
  %1471 = icmp eq i8 %1436, 45
  %1472 = sub nsw i32 0, %1461
  %1473 = select i1 %1471, i32 %1472, i32 %1461
  %1474 = add nsw i32 %1473, %1399
  br label %1475

1475:                                             ; preds = %1468, %1407
  %1476 = phi i8* [ %1469, %1468 ], [ %1408, %1407 ]
  %1477 = phi i64 [ %1470, %1468 ], [ %1395, %1407 ]
  %1478 = phi i32 [ %1474, %1468 ], [ %1399, %1407 ]
  %1479 = and i32 %13, 20
  %1480 = icmp ne i32 %1479, 0
  %1481 = icmp eq i8* %11, %1476
  %1482 = or i1 %1480, %1481
  br i1 %1482, label %1486, label %1483

1483:                                             ; preds = %1475
  %1484 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1485 = load double, double* %1484, align 8
  br label %1607

1486:                                             ; preds = %1475
  %1487 = or i1 %15, %1481
  br i1 %1487, label %1501, label %1488

1488:                                             ; preds = %1486, %1493
  %1489 = phi i8* [ %1494, %1493 ], [ %1476, %1486 ]
  %1490 = load i8, i8* %1489, align 1
  %1491 = sext i8 %1490 to i32
  %1492 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %1491) #5
  br i1 %1492, label %1493, label %1496

1493:                                             ; preds = %1488
  %1494 = getelementptr inbounds i8, i8* %1489, i64 1
  %1495 = icmp eq i8* %1494, %11
  br i1 %1495, label %1499, label %1488

1496:                                             ; preds = %1488
  %1497 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1498 = load double, double* %1497, align 8
  br label %1607

1499:                                             ; preds = %1493
  %1500 = ptrtoint i8* %11 to i64
  br label %1501

1501:                                             ; preds = %1486, %1499
  %1502 = phi i64 [ %1477, %1486 ], [ %1500, %1499 ]
  br i1 %19, label %1503, label %1540

1503:                                             ; preds = %1501
  %1504 = inttoptr i64 %1502 to i8*
  %1505 = icmp eq i8* %11, %1504
  br i1 %1505, label %1540, label %1506

1506:                                             ; preds = %1503
  %1507 = load i8, i8* %1504, align 1
  %1508 = sext i8 %1507 to i32
  %1509 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %1508) #5
  br i1 %1509, label %1514, label %1540

1510:                                             ; preds = %1514
  %1511 = load i8, i8* %1516, align 1
  %1512 = sext i8 %1511 to i32
  %1513 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %1512) #5
  br i1 %1513, label %1514, label %1532

1514:                                             ; preds = %1506, %1510
  %1515 = phi i8* [ %1516, %1510 ], [ %1504, %1506 ]
  %1516 = getelementptr inbounds i8, i8* %1515, i64 1
  %1517 = icmp eq i8* %1516, %11
  br i1 %1517, label %1518, label %1510

1518:                                             ; preds = %1514
  %1519 = ptrtoint i8* %11 to i64
  br label %1540

1520:                                             ; preds = %1351
  %1521 = ptrtoint i8* %11 to i64
  br label %1534

1522:                                             ; preds = %1371
  %1523 = ptrtoint i8* %11 to i64
  br label %1534

1524:                                             ; preds = %1372
  %1525 = ptrtoint i8* %11 to i64
  br label %1534

1526:                                             ; preds = %1193
  %1527 = ptrtoint i8* %11 to i64
  br label %1540

1528:                                             ; preds = %1213
  %1529 = ptrtoint i8* %11 to i64
  br label %1540

1530:                                             ; preds = %1214
  %1531 = ptrtoint i8* %11 to i64
  br label %1540

1532:                                             ; preds = %1510
  %1533 = ptrtoint i8* %1516 to i64
  br label %1540

1534:                                             ; preds = %1390, %1267, %1421, %1430, %1442, %1520, %1522, %1524
  %1535 = phi i64 [ %1525, %1524 ], [ %1523, %1522 ], [ %1521, %1520 ], [ %1395, %1442 ], [ %1395, %1430 ], [ %1395, %1421 ], [ %1264, %1267 ], [ %1391, %1390 ]
  %1536 = phi i32 [ %1347, %1524 ], [ %1347, %1522 ], [ %1347, %1520 ], [ %1396, %1442 ], [ %1396, %1430 ], [ %1396, %1421 ], [ %1241, %1267 ], [ %1347, %1390 ]
  %1537 = phi i8 [ %1348, %1524 ], [ %1348, %1522 ], [ %1348, %1520 ], [ %1397, %1442 ], [ %1397, %1430 ], [ %1397, %1421 ], [ %1242, %1267 ], [ %1348, %1390 ]
  %1538 = phi i32 [ %1350, %1524 ], [ %1350, %1522 ], [ %1350, %1520 ], [ %1399, %1442 ], [ %1399, %1430 ], [ %1399, %1421 ], [ 0, %1267 ], [ %1350, %1390 ]
  %1539 = add nsw i32 %1538, %1243
  br label %1564

1540:                                             ; preds = %1232, %1532, %1526, %1528, %1530, %1506, %1518, %1503, %1501, %1417, %1266
  %1541 = phi i64 [ %1264, %1266 ], [ %1502, %1501 ], [ %1395, %1417 ], [ %1502, %1503 ], [ %1519, %1518 ], [ %1502, %1506 ], [ %1527, %1526 ], [ %1529, %1528 ], [ %1531, %1530 ], [ %1533, %1532 ], [ %1233, %1232 ]
  %1542 = phi i8 [ %1240, %1266 ], [ %1248, %1501 ], [ %1248, %1417 ], [ %1248, %1503 ], [ %1248, %1518 ], [ %1248, %1506 ], [ %1189, %1526 ], [ %1189, %1528 ], [ %1189, %1530 ], [ %1248, %1532 ], [ %1189, %1232 ]
  %1543 = phi i32 [ %1241, %1266 ], [ %1396, %1501 ], [ %1396, %1417 ], [ %1396, %1503 ], [ %1396, %1518 ], [ %1396, %1506 ], [ %1179, %1526 ], [ %1179, %1528 ], [ %1179, %1530 ], [ %1396, %1532 ], [ %1179, %1232 ]
  %1544 = phi i8 [ %1242, %1266 ], [ %1397, %1501 ], [ %1397, %1417 ], [ %1397, %1503 ], [ %1397, %1518 ], [ %1397, %1506 ], [ %1180, %1526 ], [ %1180, %1528 ], [ %1180, %1530 ], [ %1397, %1532 ], [ %1180, %1232 ]
  %1545 = phi i32 [ %1243, %1266 ], [ %1243, %1501 ], [ %1243, %1417 ], [ %1243, %1503 ], [ %1243, %1518 ], [ %1243, %1506 ], [ %1181, %1526 ], [ %1181, %1528 ], [ %1181, %1530 ], [ %1243, %1532 ], [ %1181, %1232 ]
  %1546 = phi i32 [ 0, %1266 ], [ %1478, %1501 ], [ %1399, %1417 ], [ %1478, %1503 ], [ %1478, %1518 ], [ %1478, %1506 ], [ 0, %1526 ], [ 0, %1528 ], [ 0, %1530 ], [ %1478, %1532 ], [ 0, %1232 ]
  %1547 = add nsw i32 %1546, %1545
  %1548 = and i8 %1542, 1
  %1549 = icmp eq i8 %1548, 0
  br i1 %1549, label %1564, label %1550

1550:                                             ; preds = %1257, %1540
  %1551 = phi i32 [ %1543, %1540 ], [ %1241, %1257 ]
  %1552 = phi i64 [ %1541, %1540 ], [ %1239, %1257 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #5
  store i8 -86, i8* %7, align 1
  %1553 = bitcast i8** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1553) #5
  store i8* %1152, i8** %8, align 8
  %1554 = sext i32 %1551 to i64
  %1555 = getelementptr inbounds [782 x i8], [782 x i8]* %6, i64 0, i64 %1554
  %1556 = icmp ne i8 %88, 0
  %1557 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 6
  %1558 = load i16, i16* %1557, align 8
  %1559 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1560 = load double, double* %1559, align 8
  %1561 = call fastcc double @_ZN6icu_6917double_conversionL17RadixStringToIeeeILi3EPcEEdPT0_S3_btbbdbPb(i8** nonnull %8, i8* %1555, i1 zeroext %1556, i16 zeroext %1558, i1 zeroext %15, double %1560, i1 zeroext %3, i8* nonnull %7)
  %1562 = sub i64 %1552, %9
  %1563 = trunc i64 %1562 to i32
  store i32 %1563, i32* %4, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1553) #5
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #5
  br label %1607

1564:                                             ; preds = %1534, %1540
  %1565 = phi i32 [ %1539, %1534 ], [ %1547, %1540 ]
  %1566 = phi i8 [ %1537, %1534 ], [ %1544, %1540 ]
  %1567 = phi i32 [ %1536, %1534 ], [ %1543, %1540 ]
  %1568 = phi i64 [ %1535, %1534 ], [ %1541, %1540 ]
  %1569 = and i8 %1566, 1
  %1570 = icmp eq i8 %1569, 0
  br i1 %1570, label %1576, label %1571

1571:                                             ; preds = %1564
  %1572 = add nsw i32 %1567, 1
  %1573 = sext i32 %1567 to i64
  %1574 = getelementptr inbounds [782 x i8], [782 x i8]* %6, i64 0, i64 %1573
  store i8 49, i8* %1574, align 1
  %1575 = add nsw i32 %1565, -1
  br label %1576

1576:                                             ; preds = %1564, %1571
  %1577 = phi i32 [ %1572, %1571 ], [ %1567, %1564 ]
  %1578 = phi i32 [ %1575, %1571 ], [ %1565, %1564 ]
  %1579 = sext i32 %1577 to i64
  %1580 = getelementptr inbounds [782 x i8], [782 x i8]* %6, i64 0, i64 %1579
  store i8 0, i8* %1580, align 1
  br label %1581

1581:                                             ; preds = %1585, %1576
  %1582 = phi i64 [ %1583, %1585 ], [ %1579, %1576 ]
  %1583 = add nsw i64 %1582, -1
  %1584 = icmp sgt i64 %1582, 0
  br i1 %1584, label %1585, label %1591

1585:                                             ; preds = %1581
  %1586 = getelementptr inbounds [782 x i8], [782 x i8]* %6, i64 0, i64 %1583
  %1587 = load i8, i8* %1586, align 1
  %1588 = icmp eq i8 %1587, 48
  br i1 %1588, label %1581, label %1589

1589:                                             ; preds = %1585
  %1590 = trunc i64 %1582 to i32
  br label %1591

1591:                                             ; preds = %1581, %1589
  %1592 = phi i32 [ %1590, %1589 ], [ 0, %1581 ]
  %1593 = sub nsw i32 %1577, %1592
  %1594 = add nsw i32 %1593, %1578
  br i1 %3, label %1595, label %1597

1595:                                             ; preds = %1591
  %1596 = call double @_ZN6icu_6917double_conversion13StrtodTrimmedENS0_6VectorIKcEEi(i8* nonnull %1152, i32 %1592, i32 %1594) #5
  br label %1600

1597:                                             ; preds = %1591
  %1598 = call float @_ZN6icu_6917double_conversion13StrtofTrimmedENS0_6VectorIKcEEi(i8* nonnull %1152, i32 %1592, i32 %1594) #5
  %1599 = fpext float %1598 to double
  br label %1600

1600:                                             ; preds = %1597, %1595
  %1601 = phi double [ %1596, %1595 ], [ %1599, %1597 ]
  %1602 = sub i64 %1568, %9
  %1603 = trunc i64 %1602 to i32
  store i32 %1603, i32* %4, align 4
  %1604 = icmp eq i8 %88, 0
  %1605 = fsub double -0.000000e+00, %1601
  %1606 = select i1 %1604, double %1601, double %1605
  br label %1607

1607:                                             ; preds = %1443, %1431, %1422, %1600, %1550, %1496, %1483, %1414, %1404, %1308, %1268, %1254
  %1608 = phi double [ %1561, %1550 ], [ %1606, %1600 ], [ %1270, %1268 ], [ %1313, %1308 ], [ %1406, %1404 ], [ %1498, %1496 ], [ %1485, %1483 ], [ %1416, %1414 ], [ %1256, %1254 ], [ %1445, %1443 ], [ %1433, %1431 ], [ %1424, %1422 ]
  call void @llvm.lifetime.end.p0i8(i64 782, i8* nonnull %1152) #5
  br label %1609

1609:                                             ; preds = %607, %740, %601, %1089, %75, %83, %111, %119, %132, %135, %167, %175, %188, %191, %512, %1607, %1133, %251, %232, %53, %43, %25
  %1610 = phi double [ %27, %25 ], [ %55, %53 ], [ %45, %43 ], [ %141, %135 ], [ %134, %132 ], [ %121, %119 ], [ %113, %111 ], [ %197, %191 ], [ %190, %188 ], [ %177, %175 ], [ %169, %167 ], [ %237, %232 ], [ %253, %251 ], [ %1138, %1133 ], [ %1608, %1607 ], [ %514, %512 ], [ %85, %83 ], [ %77, %75 ], [ %1069, %1089 ], [ %524, %601 ], [ %524, %740 ], [ %524, %607 ]
  ret double %1610
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZNK6icu_6917double_conversion23StringToDoubleConverter14StringToDoubleEPKtiPi(%"class.icu_69::double_conversion::StringToDoubleConverter"*, i16*, i32, i32*) local_unnamed_addr #0 align 2 {
  %5 = tail call double @_ZNK6icu_6917double_conversion23StringToDoubleConverter12StringToIeeeIPKtEEdT_ibPi(%"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i16* %1, i32 %2, i1 zeroext true, i32* %3)
  ret double %5
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZNK6icu_6917double_conversion23StringToDoubleConverter12StringToIeeeIPKtEEdT_ibPi(%"class.icu_69::double_conversion::StringToDoubleConverter"*, i16*, i32, i1 zeroext, i32*) local_unnamed_addr #0 comdat align 2 {
  %6 = alloca [782 x i8], align 16
  %7 = alloca i8, align 1
  %8 = alloca i8*, align 8
  %9 = ptrtoint i16* %1 to i64
  %10 = sext i32 %2 to i64
  %11 = getelementptr inbounds i16, i16* %1, i64 %10
  store i32 0, i32* %4, align 4
  %12 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = and i32 %13, 4
  %15 = icmp ne i32 %14, 0
  %16 = and i32 %13, 8
  %17 = icmp ne i32 %16, 0
  %18 = and i32 %13, 16
  %19 = icmp ne i32 %18, 0
  %20 = and i32 %13, 32
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %13, 64
  %23 = icmp ne i32 %22, 0
  %24 = icmp eq i32 %2, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %5
  %26 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 2
  %27 = load double, double* %26, align 8
  br label %1606

28:                                               ; preds = %5
  %29 = and i32 %13, 24
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %56, label %31

31:                                               ; preds = %28
  %32 = load i16, i16* %1, align 2
  %33 = zext i16 %32 to i32
  %34 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %33) #5
  br i1 %34, label %39, label %48

35:                                               ; preds = %39
  %36 = load i16, i16* %41, align 2
  %37 = zext i16 %36 to i32
  %38 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %37) #5
  br i1 %38, label %39, label %46

39:                                               ; preds = %31, %35
  %40 = phi i16* [ %41, %35 ], [ %1, %31 ]
  %41 = getelementptr inbounds i16, i16* %40, i64 1
  %42 = icmp eq i16* %41, %11
  br i1 %42, label %43, label %35

43:                                               ; preds = %39
  store i32 %2, i32* %4, align 4
  %44 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 2
  %45 = load double, double* %44, align 8
  br label %1606

46:                                               ; preds = %35
  %47 = ptrtoint i16* %41 to i64
  br label %48

48:                                               ; preds = %46, %31
  %49 = phi i64 [ %9, %31 ], [ %47, %46 ]
  %50 = inttoptr i64 %49 to i16*
  %51 = icmp eq i16* %50, %1
  %52 = or i1 %17, %51
  br i1 %52, label %56, label %53

53:                                               ; preds = %48
  %54 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %55 = load double, double* %54, align 8
  br label %1606

56:                                               ; preds = %28, %48
  %57 = phi i16* [ %50, %48 ], [ %1, %28 ]
  %58 = phi i64 [ %49, %48 ], [ %9, %28 ]
  %59 = load i16, i16* %57, align 2
  switch i16 %59, label %86 [
    i16 43, label %60
    i16 45, label %60
  ]

60:                                               ; preds = %56, %56
  %61 = icmp eq i16 %59, 45
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds i16, i16* %57, i64 1
  %64 = icmp eq i16* %63, %11
  br i1 %64, label %75, label %65

65:                                               ; preds = %60, %71
  %66 = phi i64 [ %72, %71 ], [ 1, %60 ]
  %67 = getelementptr inbounds i16, i16* %57, i64 %66
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %69) #5
  br i1 %70, label %71, label %78

71:                                               ; preds = %65
  %72 = add nuw nsw i64 %66, 1
  %73 = getelementptr inbounds i16, i16* %57, i64 %72
  %74 = icmp eq i16* %73, %11
  br i1 %74, label %75, label %65

75:                                               ; preds = %71, %60
  %76 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %77 = load double, double* %76, align 8
  br label %1606

78:                                               ; preds = %65
  %79 = getelementptr inbounds i16, i16* %57, i64 %66
  %80 = ptrtoint i16* %79 to i64
  %81 = icmp eq i64 %66, 1
  %82 = or i1 %21, %81
  br i1 %82, label %86, label %83

83:                                               ; preds = %78
  %84 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %85 = load double, double* %84, align 8
  br label %1606

86:                                               ; preds = %78, %56
  %87 = phi i64 [ %58, %56 ], [ %80, %78 ]
  %88 = phi i8 [ 0, %56 ], [ %62, %78 ]
  %89 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 4
  %90 = load i8*, i8** %89, align 8
  %91 = icmp eq i8* %90, null
  br i1 %91, label %145, label %92

92:                                               ; preds = %86
  %93 = inttoptr i64 %87 to i16*
  br i1 %23, label %94, label %95

94:                                               ; preds = %92
  tail call void @abort() #6
  unreachable

95:                                               ; preds = %92
  %96 = load i16, i16* %93, align 2
  %97 = trunc i16 %96 to i8
  %98 = load i8, i8* %90, align 1
  %99 = icmp eq i8 %98, %97
  br i1 %99, label %100, label %145

100:                                              ; preds = %95, %109
  %101 = phi i16* [ %106, %109 ], [ %93, %95 ]
  %102 = phi i8* [ %103, %109 ], [ %90, %95 ]
  %103 = getelementptr inbounds i8, i8* %102, i64 1
  %104 = load i8, i8* %103, align 1
  %105 = icmp eq i8 %104, 0
  %106 = getelementptr inbounds i16, i16* %101, i64 1
  br i1 %105, label %116, label %107

107:                                              ; preds = %100
  %108 = icmp eq i16* %106, %11
  br i1 %108, label %113, label %109

109:                                              ; preds = %107
  %110 = load i16, i16* %106, align 2
  %111 = trunc i16 %110 to i8
  %112 = icmp eq i8 %104, %111
  br i1 %112, label %100, label %113

113:                                              ; preds = %107, %109
  %114 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %115 = load double, double* %114, align 8
  br label %1606

116:                                              ; preds = %100
  %117 = and i32 %13, 20
  %118 = icmp ne i32 %117, 0
  %119 = icmp eq i16* %106, %11
  %120 = or i1 %118, %119
  br i1 %120, label %124, label %121

121:                                              ; preds = %116
  %122 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %123 = load double, double* %122, align 8
  br label %1606

124:                                              ; preds = %116
  %125 = or i1 %15, %119
  br i1 %125, label %137, label %126

126:                                              ; preds = %124, %131
  %127 = phi i16* [ %132, %131 ], [ %106, %124 ]
  %128 = load i16, i16* %127, align 2
  %129 = zext i16 %128 to i32
  %130 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %129) #5
  br i1 %130, label %131, label %134

131:                                              ; preds = %126
  %132 = getelementptr inbounds i16, i16* %127, i64 1
  %133 = icmp eq i16* %132, %11
  br i1 %133, label %137, label %126

134:                                              ; preds = %126
  %135 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %136 = load double, double* %135, align 8
  br label %1606

137:                                              ; preds = %131, %124
  %138 = phi i16* [ %106, %124 ], [ %11, %131 ]
  %139 = ptrtoint i16* %138 to i64
  %140 = sub i64 %139, %9
  %141 = lshr exact i64 %140, 1
  %142 = trunc i64 %141 to i32
  store i32 %142, i32* %4, align 4
  %143 = icmp eq i8 %88, 0
  %144 = select i1 %143, double 0x7FF0000000000000, double 0xFFF0000000000000
  br label %1606

145:                                              ; preds = %86, %95
  %146 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 5
  %147 = load i8*, i8** %146, align 8
  %148 = icmp eq i8* %147, null
  %149 = inttoptr i64 %87 to i16*
  br i1 %148, label %150, label %152

150:                                              ; preds = %145
  %151 = load i16, i16* %149, align 2
  br label %204

152:                                              ; preds = %145
  br i1 %23, label %153, label %154

153:                                              ; preds = %152
  tail call void @abort() #6
  unreachable

154:                                              ; preds = %152
  %155 = load i16, i16* %149, align 2
  %156 = trunc i16 %155 to i8
  %157 = load i8, i8* %147, align 1
  %158 = icmp eq i8 %157, %156
  br i1 %158, label %159, label %204

159:                                              ; preds = %154, %168
  %160 = phi i16* [ %165, %168 ], [ %149, %154 ]
  %161 = phi i8* [ %162, %168 ], [ %147, %154 ]
  %162 = getelementptr inbounds i8, i8* %161, i64 1
  %163 = load i8, i8* %162, align 1
  %164 = icmp eq i8 %163, 0
  %165 = getelementptr inbounds i16, i16* %160, i64 1
  br i1 %164, label %175, label %166

166:                                              ; preds = %159
  %167 = icmp eq i16* %165, %11
  br i1 %167, label %172, label %168

168:                                              ; preds = %166
  %169 = load i16, i16* %165, align 2
  %170 = trunc i16 %169 to i8
  %171 = icmp eq i8 %163, %170
  br i1 %171, label %159, label %172

172:                                              ; preds = %166, %168
  %173 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %174 = load double, double* %173, align 8
  br label %1606

175:                                              ; preds = %159
  %176 = and i32 %13, 20
  %177 = icmp ne i32 %176, 0
  %178 = icmp eq i16* %165, %11
  %179 = or i1 %177, %178
  br i1 %179, label %183, label %180

180:                                              ; preds = %175
  %181 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %182 = load double, double* %181, align 8
  br label %1606

183:                                              ; preds = %175
  %184 = or i1 %15, %178
  br i1 %184, label %196, label %185

185:                                              ; preds = %183, %190
  %186 = phi i16* [ %191, %190 ], [ %165, %183 ]
  %187 = load i16, i16* %186, align 2
  %188 = zext i16 %187 to i32
  %189 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %188) #5
  br i1 %189, label %190, label %193

190:                                              ; preds = %185
  %191 = getelementptr inbounds i16, i16* %186, i64 1
  %192 = icmp eq i16* %191, %11
  br i1 %192, label %196, label %185

193:                                              ; preds = %185
  %194 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %195 = load double, double* %194, align 8
  br label %1606

196:                                              ; preds = %190, %183
  %197 = phi i16* [ %165, %183 ], [ %11, %190 ]
  %198 = ptrtoint i16* %197 to i64
  %199 = sub i64 %198, %9
  %200 = lshr exact i64 %199, 1
  %201 = trunc i64 %200 to i32
  store i32 %201, i32* %4, align 4
  %202 = icmp eq i8 %88, 0
  %203 = select i1 %202, double 0x7FF8000000000000, double 0xFFF8000000000000
  br label %1606

204:                                              ; preds = %150, %154
  %205 = phi i16 [ %151, %150 ], [ %155, %154 ]
  %206 = icmp eq i16 %205, 48
  br i1 %206, label %207, label %1141

207:                                              ; preds = %204
  %208 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 6
  %209 = load i16, i16* %208, align 8
  %210 = icmp eq i16 %209, 0
  %211 = getelementptr inbounds i16, i16* %149, i64 1
  %212 = ptrtoint i16* %211 to i64
  %213 = icmp eq i16* %211, %11
  br i1 %210, label %214, label %215

214:                                              ; preds = %207
  br i1 %213, label %236, label %243

215:                                              ; preds = %207
  br i1 %213, label %236, label %216

216:                                              ; preds = %215
  %217 = getelementptr inbounds i16, i16* %149, i64 2
  %218 = icmp eq i16* %217, %11
  br i1 %218, label %243, label %219

219:                                              ; preds = %216
  %220 = load i16, i16* %211, align 2
  %221 = icmp eq i16 %220, %209
  br i1 %221, label %222, label %232

222:                                              ; preds = %219
  %223 = load i16, i16* %217, align 2
  %224 = zext i16 %223 to i32
  %225 = add nsw i32 %224, -48
  %226 = icmp ult i32 %225, 10
  %227 = icmp ult i16 %223, 58
  %228 = and i1 %227, %226
  %229 = ptrtoint i16* %217 to i64
  %230 = select i1 %228, i64 %229, i64 %212
  %231 = select i1 %228, i16* %217, i16* %211
  br label %232

232:                                              ; preds = %222, %219
  %233 = phi i64 [ %212, %219 ], [ %230, %222 ]
  %234 = phi i16* [ %211, %219 ], [ %231, %222 ]
  %235 = icmp eq i16* %234, %11
  br i1 %235, label %236, label %243

236:                                              ; preds = %215, %232, %214
  %237 = phi i64 [ %212, %214 ], [ %233, %232 ], [ %212, %215 ]
  %238 = sub i64 %237, %9
  %239 = lshr exact i64 %238, 1
  %240 = trunc i64 %239 to i32
  store i32 %240, i32* %4, align 4
  %241 = icmp eq i8 %88, 0
  %242 = select i1 %241, double 0.000000e+00, double -0.000000e+00
  br label %1606

243:                                              ; preds = %216, %232, %214
  %244 = phi i64 [ %212, %214 ], [ %233, %232 ], [ %212, %216 ]
  %245 = trunc i32 %13 to i8
  %246 = icmp slt i8 %245, 0
  %247 = and i32 %13, 129
  %248 = icmp eq i32 %247, 0
  %249 = inttoptr i64 %244 to i16*
  %250 = load i16, i16* %249, align 2
  br i1 %248, label %1088, label %251

251:                                              ; preds = %243
  switch i16 %250, label %1136 [
    i16 120, label %252
    i16 88, label %252
    i16 48, label %1090
  ]

252:                                              ; preds = %251, %251
  %253 = getelementptr inbounds i16, i16* %249, i64 1
  %254 = ptrtoint i16* %253 to i64
  %255 = icmp eq i16* %253, %11
  br i1 %255, label %256, label %259

256:                                              ; preds = %252
  %257 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %258 = load double, double* %257, align 8
  br label %1606

259:                                              ; preds = %252
  br i1 %246, label %260, label %502

260:                                              ; preds = %259, %311
  %261 = phi i16* [ %312, %311 ], [ %253, %259 ]
  %262 = phi i8 [ 1, %311 ], [ 0, %259 ]
  %263 = load i16, i16* %261, align 2
  %264 = zext i16 %263 to i32
  %265 = add nsw i32 %264, -48
  %266 = icmp ult i32 %265, 10
  %267 = icmp ult i16 %263, 64
  %268 = and i1 %267, %266
  br i1 %268, label %270, label %269

269:                                              ; preds = %260
  switch i16 %263, label %369 [
    i16 102, label %270
    i16 101, label %270
    i16 100, label %270
    i16 99, label %270
    i16 98, label %270
    i16 97, label %270
    i16 70, label %270
    i16 69, label %270
    i16 68, label %270
    i16 67, label %270
    i16 66, label %270
    i16 65, label %270
    i16 46, label %313
  ]

270:                                              ; preds = %269, %269, %269, %269, %269, %269, %269, %269, %269, %269, %269, %269, %260
  br i1 %210, label %271, label %274

271:                                              ; preds = %270
  %272 = getelementptr inbounds i16, i16* %261, i64 1
  %273 = icmp eq i16* %272, %11
  br i1 %273, label %502, label %311

274:                                              ; preds = %270
  %275 = add nsw i16 %263, -97
  %276 = icmp ult i16 %275, 6
  %277 = or i1 %276, %268
  br i1 %277, label %285, label %278

278:                                              ; preds = %274
  %279 = icmp ugt i16 %263, 64
  br i1 %279, label %283, label %280

280:                                              ; preds = %278
  %281 = getelementptr inbounds i16, i16* %261, i64 1
  %282 = icmp eq i16* %281, %11
  br i1 %282, label %502, label %311

283:                                              ; preds = %278
  %284 = icmp ugt i16 %263, 70
  br label %285

285:                                              ; preds = %283, %274
  %286 = phi i1 [ %284, %283 ], [ false, %274 ]
  %287 = getelementptr inbounds i16, i16* %261, i64 1
  %288 = icmp eq i16* %287, %11
  %289 = or i1 %288, %286
  br i1 %289, label %308, label %290

290:                                              ; preds = %285
  %291 = getelementptr inbounds i16, i16* %261, i64 2
  %292 = icmp eq i16* %291, %11
  br i1 %292, label %311, label %293

293:                                              ; preds = %290
  %294 = load i16, i16* %287, align 2
  %295 = icmp eq i16 %294, %209
  br i1 %295, label %296, label %305

296:                                              ; preds = %293
  %297 = load i16, i16* %291, align 2
  %298 = zext i16 %297 to i32
  %299 = add nsw i32 %298, -48
  %300 = icmp ult i32 %299, 10
  %301 = icmp ult i16 %297, 64
  %302 = and i1 %301, %300
  br i1 %302, label %304, label %303

303:                                              ; preds = %296
  switch i16 %297, label %305 [
    i16 102, label %304
    i16 101, label %304
    i16 100, label %304
    i16 99, label %304
    i16 98, label %304
    i16 97, label %304
    i16 70, label %304
    i16 69, label %304
    i16 68, label %304
    i16 67, label %304
    i16 66, label %304
    i16 65, label %304
  ]

304:                                              ; preds = %303, %303, %303, %303, %303, %303, %303, %303, %303, %303, %303, %303, %296
  br label %305

305:                                              ; preds = %304, %303, %293
  %306 = phi i16* [ %291, %304 ], [ %287, %293 ], [ %287, %303 ]
  %307 = icmp eq i16* %306, %11
  br i1 %307, label %502, label %311

308:                                              ; preds = %285
  %309 = xor i1 %286, true
  %310 = or i1 %288, %309
  br i1 %310, label %502, label %311

311:                                              ; preds = %308, %305, %290, %280, %271
  %312 = phi i16* [ %287, %308 ], [ %272, %271 ], [ %306, %305 ], [ %281, %280 ], [ %287, %290 ]
  br label %260

313:                                              ; preds = %269
  %314 = getelementptr inbounds i16, i16* %261, i64 1
  %315 = icmp eq i16* %314, %11
  br i1 %315, label %502, label %316

316:                                              ; preds = %313, %367
  %317 = phi i16* [ %368, %367 ], [ %314, %313 ]
  %318 = phi i8 [ 1, %367 ], [ %262, %313 ]
  %319 = load i16, i16* %317, align 2
  %320 = zext i16 %319 to i32
  %321 = add nsw i32 %320, -48
  %322 = icmp ult i32 %321, 10
  %323 = icmp ult i16 %319, 64
  %324 = and i1 %323, %322
  br i1 %324, label %326, label %325

325:                                              ; preds = %316
  switch i16 %319, label %369 [
    i16 102, label %326
    i16 101, label %326
    i16 100, label %326
    i16 99, label %326
    i16 98, label %326
    i16 97, label %326
    i16 70, label %326
    i16 69, label %326
    i16 68, label %326
    i16 67, label %326
    i16 66, label %326
    i16 65, label %326
  ]

326:                                              ; preds = %325, %325, %325, %325, %325, %325, %325, %325, %325, %325, %325, %325, %316
  br i1 %210, label %327, label %330

327:                                              ; preds = %326
  %328 = getelementptr inbounds i16, i16* %317, i64 1
  %329 = icmp eq i16* %328, %11
  br i1 %329, label %502, label %367

330:                                              ; preds = %326
  %331 = add nsw i16 %319, -97
  %332 = icmp ult i16 %331, 6
  %333 = or i1 %332, %324
  br i1 %333, label %341, label %334

334:                                              ; preds = %330
  %335 = icmp ugt i16 %319, 64
  br i1 %335, label %339, label %336

336:                                              ; preds = %334
  %337 = getelementptr inbounds i16, i16* %317, i64 1
  %338 = icmp eq i16* %337, %11
  br i1 %338, label %502, label %367

339:                                              ; preds = %334
  %340 = icmp ugt i16 %319, 70
  br label %341

341:                                              ; preds = %339, %330
  %342 = phi i1 [ %340, %339 ], [ false, %330 ]
  %343 = getelementptr inbounds i16, i16* %317, i64 1
  %344 = icmp eq i16* %343, %11
  %345 = or i1 %344, %342
  br i1 %345, label %364, label %346

346:                                              ; preds = %341
  %347 = getelementptr inbounds i16, i16* %317, i64 2
  %348 = icmp eq i16* %347, %11
  br i1 %348, label %367, label %349

349:                                              ; preds = %346
  %350 = load i16, i16* %343, align 2
  %351 = icmp eq i16 %350, %209
  br i1 %351, label %352, label %361

352:                                              ; preds = %349
  %353 = load i16, i16* %347, align 2
  %354 = zext i16 %353 to i32
  %355 = add nsw i32 %354, -48
  %356 = icmp ult i32 %355, 10
  %357 = icmp ult i16 %353, 64
  %358 = and i1 %357, %356
  br i1 %358, label %360, label %359

359:                                              ; preds = %352
  switch i16 %353, label %361 [
    i16 102, label %360
    i16 101, label %360
    i16 100, label %360
    i16 99, label %360
    i16 98, label %360
    i16 97, label %360
    i16 70, label %360
    i16 69, label %360
    i16 68, label %360
    i16 67, label %360
    i16 66, label %360
    i16 65, label %360
  ]

360:                                              ; preds = %359, %359, %359, %359, %359, %359, %359, %359, %359, %359, %359, %359, %352
  br label %361

361:                                              ; preds = %360, %359, %349
  %362 = phi i16* [ %347, %360 ], [ %343, %349 ], [ %343, %359 ]
  %363 = icmp eq i16* %362, %11
  br i1 %363, label %502, label %367

364:                                              ; preds = %341
  %365 = xor i1 %342, true
  %366 = or i1 %344, %365
  br i1 %366, label %502, label %367

367:                                              ; preds = %364, %361, %346, %336, %327
  %368 = phi i16* [ %343, %364 ], [ %328, %327 ], [ %362, %361 ], [ %337, %336 ], [ %343, %346 ]
  br label %316

369:                                              ; preds = %269, %325
  %370 = phi i16 [ %319, %325 ], [ %263, %269 ]
  %371 = phi i16* [ %317, %325 ], [ %261, %269 ]
  %372 = phi i8 [ %318, %325 ], [ %262, %269 ]
  %373 = and i8 %372, 1
  %374 = icmp eq i8 %373, 0
  br i1 %374, label %502, label %375

375:                                              ; preds = %369
  switch i16 %370, label %502 [
    i16 112, label %376
    i16 80, label %376
  ]

376:                                              ; preds = %375, %375
  br i1 %210, label %377, label %380

377:                                              ; preds = %376
  %378 = getelementptr inbounds i16, i16* %371, i64 1
  %379 = icmp eq i16* %378, %11
  br i1 %379, label %502, label %407

380:                                              ; preds = %376
  %381 = add nsw i16 %370, -97
  %382 = icmp ugt i16 %381, 5
  %383 = getelementptr inbounds i16, i16* %371, i64 1
  %384 = icmp eq i16* %383, %11
  %385 = or i1 %382, %384
  br i1 %385, label %404, label %386

386:                                              ; preds = %380
  %387 = getelementptr inbounds i16, i16* %371, i64 2
  %388 = icmp eq i16* %387, %11
  br i1 %388, label %407, label %389

389:                                              ; preds = %386
  %390 = load i16, i16* %383, align 2
  %391 = icmp eq i16 %390, %209
  br i1 %391, label %392, label %401

392:                                              ; preds = %389
  %393 = load i16, i16* %387, align 2
  %394 = zext i16 %393 to i32
  %395 = add nsw i32 %394, -48
  %396 = icmp ult i32 %395, 10
  %397 = icmp ult i16 %393, 64
  %398 = and i1 %397, %396
  br i1 %398, label %400, label %399

399:                                              ; preds = %392
  switch i16 %393, label %401 [
    i16 102, label %400
    i16 101, label %400
    i16 100, label %400
    i16 99, label %400
    i16 98, label %400
    i16 97, label %400
    i16 70, label %400
    i16 69, label %400
    i16 68, label %400
    i16 67, label %400
    i16 66, label %400
    i16 65, label %400
  ]

400:                                              ; preds = %399, %399, %399, %399, %399, %399, %399, %399, %399, %399, %399, %399, %392
  br label %401

401:                                              ; preds = %400, %399, %389
  %402 = phi i16* [ %387, %400 ], [ %383, %389 ], [ %383, %399 ]
  %403 = icmp eq i16* %402, %11
  br i1 %403, label %502, label %407

404:                                              ; preds = %380
  %405 = xor i1 %382, true
  %406 = or i1 %384, %405
  br i1 %406, label %502, label %407

407:                                              ; preds = %404, %401, %386, %377
  %408 = phi i16* [ %383, %404 ], [ %378, %377 ], [ %402, %401 ], [ %383, %386 ]
  %409 = load i16, i16* %408, align 2
  switch i16 %409, label %415 [
    i16 43, label %410
    i16 45, label %410
  ]

410:                                              ; preds = %407, %407
  %411 = getelementptr inbounds i16, i16* %408, i64 1
  %412 = icmp eq i16* %411, %11
  br i1 %412, label %502, label %413

413:                                              ; preds = %410
  %414 = load i16, i16* %411, align 2
  br label %415

415:                                              ; preds = %413, %407
  %416 = phi i16 [ %414, %413 ], [ %409, %407 ]
  %417 = phi i16* [ %411, %413 ], [ %408, %407 ]
  %418 = zext i16 %416 to i32
  %419 = add nsw i32 %418, -48
  %420 = icmp ult i32 %419, 10
  %421 = icmp ult i16 %416, 58
  %422 = and i1 %421, %420
  br i1 %422, label %423, label %502

423:                                              ; preds = %415
  %424 = getelementptr inbounds i16, i16* %417, i64 1
  %425 = icmp eq i16* %424, %11
  br i1 %210, label %426, label %427

426:                                              ; preds = %423
  br i1 %425, label %520, label %446

427:                                              ; preds = %423
  br i1 %425, label %520, label %428

428:                                              ; preds = %427
  %429 = getelementptr inbounds i16, i16* %417, i64 2
  %430 = icmp eq i16* %429, %11
  br i1 %430, label %446, label %431

431:                                              ; preds = %428
  %432 = load i16, i16* %424, align 2
  %433 = icmp eq i16 %432, %209
  br i1 %433, label %434, label %443

434:                                              ; preds = %431
  %435 = load i16, i16* %429, align 2
  %436 = zext i16 %435 to i32
  %437 = add nsw i32 %436, -48
  %438 = icmp ult i32 %437, 10
  %439 = icmp ult i16 %435, 64
  %440 = and i1 %439, %438
  br i1 %440, label %442, label %441

441:                                              ; preds = %434
  switch i16 %435, label %443 [
    i16 102, label %442
    i16 101, label %442
    i16 100, label %442
    i16 99, label %442
    i16 98, label %442
    i16 97, label %442
    i16 70, label %442
    i16 69, label %442
    i16 68, label %442
    i16 67, label %442
    i16 66, label %442
    i16 65, label %442
  ]

442:                                              ; preds = %441, %441, %441, %441, %441, %441, %441, %441, %441, %441, %441, %441, %434
  br label %443

443:                                              ; preds = %442, %441, %431
  %444 = phi i16* [ %429, %442 ], [ %424, %431 ], [ %424, %441 ]
  %445 = icmp eq i16* %444, %11
  br i1 %445, label %520, label %446

446:                                              ; preds = %443, %428, %426
  %447 = phi i16* [ %424, %428 ], [ %444, %443 ], [ %424, %426 ]
  %448 = load i16, i16* %447, align 2
  %449 = zext i16 %448 to i32
  %450 = add nsw i32 %449, -48
  %451 = icmp ult i32 %450, 10
  %452 = icmp ult i16 %448, 58
  %453 = and i1 %452, %451
  br i1 %453, label %454, label %486

454:                                              ; preds = %446, %478
  %455 = phi i16* [ %479, %478 ], [ %447, %446 ]
  %456 = getelementptr inbounds i16, i16* %455, i64 1
  %457 = icmp eq i16* %456, %11
  br i1 %210, label %458, label %459

458:                                              ; preds = %454
  br i1 %457, label %520, label %478

459:                                              ; preds = %454
  br i1 %457, label %520, label %460

460:                                              ; preds = %459
  %461 = getelementptr inbounds i16, i16* %455, i64 2
  %462 = icmp eq i16* %461, %11
  br i1 %462, label %478, label %463

463:                                              ; preds = %460
  %464 = load i16, i16* %456, align 2
  %465 = icmp eq i16 %464, %209
  br i1 %465, label %466, label %475

466:                                              ; preds = %463
  %467 = load i16, i16* %461, align 2
  %468 = zext i16 %467 to i32
  %469 = add nsw i32 %468, -48
  %470 = icmp ult i32 %469, 10
  %471 = icmp ult i16 %467, 64
  %472 = and i1 %471, %470
  br i1 %472, label %474, label %473

473:                                              ; preds = %466
  switch i16 %467, label %475 [
    i16 102, label %474
    i16 101, label %474
    i16 100, label %474
    i16 99, label %474
    i16 98, label %474
    i16 97, label %474
    i16 70, label %474
    i16 69, label %474
    i16 68, label %474
    i16 67, label %474
    i16 66, label %474
    i16 65, label %474
  ]

474:                                              ; preds = %473, %473, %473, %473, %473, %473, %473, %473, %473, %473, %473, %473, %466
  br label %475

475:                                              ; preds = %474, %473, %463
  %476 = phi i16* [ %461, %474 ], [ %456, %463 ], [ %456, %473 ]
  %477 = icmp eq i16* %476, %11
  br i1 %477, label %520, label %478

478:                                              ; preds = %475, %460, %458
  %479 = phi i16* [ %456, %458 ], [ %476, %475 ], [ %456, %460 ]
  %480 = load i16, i16* %479, align 2
  %481 = zext i16 %480 to i32
  %482 = add nsw i32 %481, -48
  %483 = icmp ult i32 %482, 10
  %484 = icmp ult i16 %480, 58
  %485 = and i1 %484, %483
  br i1 %485, label %454, label %486

486:                                              ; preds = %478, %446
  %487 = phi i16 [ %448, %446 ], [ %480, %478 ]
  %488 = phi i16* [ %447, %446 ], [ %479, %478 ]
  %489 = icmp eq i16* %488, %11
  %490 = or i1 %15, %489
  br i1 %490, label %520, label %491

491:                                              ; preds = %486
  %492 = zext i16 %487 to i32
  %493 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %492) #5
  br i1 %493, label %494, label %502

494:                                              ; preds = %491, %498
  %495 = phi i16* [ %496, %498 ], [ %488, %491 ]
  %496 = getelementptr inbounds i16, i16* %495, i64 1
  %497 = icmp eq i16* %496, %11
  br i1 %497, label %520, label %498

498:                                              ; preds = %494
  %499 = load i16, i16* %496, align 2
  %500 = zext i16 %499 to i32
  %501 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %500) #5
  br i1 %501, label %494, label %502

502:                                              ; preds = %308, %271, %305, %280, %364, %327, %361, %336, %498, %491, %259, %369, %375, %404, %377, %401, %415, %313, %410
  %503 = load i16, i16* %253, align 2
  %504 = zext i16 %503 to i32
  %505 = add nsw i32 %504, -48
  %506 = icmp ult i32 %505, 10
  %507 = icmp ult i16 %503, 64
  %508 = and i1 %507, %506
  br i1 %508, label %520, label %509

509:                                              ; preds = %502
  %510 = add i16 %503, -65
  %511 = icmp ult i16 %510, 38
  br i1 %511, label %515, label %512

512:                                              ; preds = %515, %509
  %513 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %514 = load double, double* %513, align 8
  br label %1606

515:                                              ; preds = %509
  %516 = zext i16 %510 to i64
  %517 = lshr i64 270582939711, %516
  %518 = and i64 %517, 1
  %519 = icmp eq i64 %518, 0
  br i1 %519, label %512, label %520

520:                                              ; preds = %458, %459, %475, %494, %515, %502, %426, %427, %443, %486
  %521 = phi i1 [ true, %486 ], [ true, %443 ], [ true, %427 ], [ true, %426 ], [ false, %502 ], [ false, %515 ], [ true, %494 ], [ true, %475 ], [ true, %459 ], [ true, %458 ]
  %522 = icmp ne i8 %88, 0
  %523 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %524 = load double, double* %523, align 8
  %525 = load i16, i16* %253, align 2
  %526 = icmp eq i16 %525, 48
  br i1 %526, label %532, label %527

527:                                              ; preds = %538, %520
  %528 = phi i64 [ %254, %520 ], [ %539, %538 ]
  %529 = phi i16 [ %525, %520 ], [ %541, %538 ]
  %530 = phi i16* [ %253, %520 ], [ %540, %538 ]
  %531 = select i1 %3, i64 53, i64 24
  br label %571

532:                                              ; preds = %520, %538
  %533 = phi i16* [ %540, %538 ], [ %253, %520 ]
  %534 = getelementptr inbounds i16, i16* %533, i64 1
  %535 = ptrtoint i16* %534 to i64
  %536 = icmp eq i16* %534, %11
  br i1 %210, label %537, label %543

537:                                              ; preds = %532
  br i1 %536, label %566, label %538

538:                                              ; preds = %560, %544, %537
  %539 = phi i64 [ %535, %537 ], [ %535, %544 ], [ %561, %560 ]
  %540 = phi i16* [ %534, %537 ], [ %534, %544 ], [ %562, %560 ]
  %541 = load i16, i16* %540, align 2
  %542 = icmp eq i16 %541, 48
  br i1 %542, label %532, label %527

543:                                              ; preds = %532
  br i1 %536, label %564, label %544

544:                                              ; preds = %543
  %545 = getelementptr inbounds i16, i16* %533, i64 2
  %546 = icmp eq i16* %545, %11
  br i1 %546, label %538, label %547

547:                                              ; preds = %544
  %548 = load i16, i16* %534, align 2
  %549 = icmp eq i16 %548, %209
  br i1 %549, label %550, label %560

550:                                              ; preds = %547
  %551 = load i16, i16* %545, align 2
  %552 = zext i16 %551 to i32
  %553 = add nsw i32 %552, -48
  %554 = icmp ult i32 %553, 10
  %555 = icmp ult i16 %551, 64
  %556 = and i1 %555, %554
  br i1 %556, label %558, label %557

557:                                              ; preds = %550
  switch i16 %551, label %560 [
    i16 102, label %558
    i16 101, label %558
    i16 100, label %558
    i16 99, label %558
    i16 98, label %558
    i16 97, label %558
    i16 70, label %558
    i16 69, label %558
    i16 68, label %558
    i16 67, label %558
    i16 66, label %558
    i16 65, label %558
  ]

558:                                              ; preds = %557, %557, %557, %557, %557, %557, %557, %557, %557, %557, %557, %557, %550
  %559 = ptrtoint i16* %545 to i64
  br label %560

560:                                              ; preds = %558, %557, %547
  %561 = phi i64 [ %559, %558 ], [ %535, %557 ], [ %535, %547 ]
  %562 = phi i16* [ %545, %558 ], [ %534, %557 ], [ %534, %547 ]
  %563 = icmp eq i16* %562, %11
  br i1 %563, label %568, label %538

564:                                              ; preds = %543
  %565 = ptrtoint i16* %11 to i64
  br label %568

566:                                              ; preds = %537
  %567 = ptrtoint i16* %11 to i64
  br label %568

568:                                              ; preds = %560, %566, %564
  %569 = phi i64 [ %565, %564 ], [ %567, %566 ], [ %561, %560 ]
  %570 = select i1 %522, double -0.000000e+00, double 0.000000e+00
  br label %1061

571:                                              ; preds = %823, %527
  %572 = phi i64 [ %528, %527 ], [ %824, %823 ]
  %573 = phi i16 [ %529, %527 ], [ %829, %823 ]
  %574 = phi i16* [ %530, %527 ], [ %825, %823 ]
  %575 = phi i32 [ 0, %527 ], [ %826, %823 ]
  %576 = phi i64 [ 0, %527 ], [ %827, %823 ]
  %577 = phi i8 [ 0, %527 ], [ %828, %823 ]
  %578 = zext i16 %573 to i32
  %579 = add nsw i32 %578, -48
  %580 = icmp ult i32 %579, 10
  br i1 %580, label %606, label %581

581:                                              ; preds = %571
  %582 = add i16 %573, -97
  %583 = icmp ult i16 %582, 6
  br i1 %583, label %606, label %584

584:                                              ; preds = %581
  %585 = add i16 %573, -65
  %586 = icmp ult i16 %585, 6
  br i1 %586, label %606, label %587

587:                                              ; preds = %584
  br i1 %521, label %588, label %592

588:                                              ; preds = %587
  switch i16 %573, label %592 [
    i16 46, label %589
    i16 112, label %843
    i16 80, label %843
  ]

589:                                              ; preds = %588
  %590 = getelementptr inbounds i16, i16* %574, i64 1
  %591 = ptrtoint i16* %590 to i64
  br label %823

592:                                              ; preds = %588, %587
  %593 = phi i1 [ true, %588 ], [ false, %587 ]
  %594 = icmp eq i16* %574, %11
  %595 = or i1 %15, %594
  br i1 %595, label %838, label %596

596:                                              ; preds = %592
  %597 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %578) #5
  br i1 %597, label %598, label %1606

598:                                              ; preds = %596, %602
  %599 = phi i16* [ %600, %602 ], [ %574, %596 ]
  %600 = getelementptr inbounds i16, i16* %599, i64 1
  %601 = icmp eq i16* %600, %11
  br i1 %601, label %830, label %602

602:                                              ; preds = %598
  %603 = load i16, i16* %600, align 2
  %604 = zext i16 %603 to i32
  %605 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %604) #5
  br i1 %605, label %598, label %1606

606:                                              ; preds = %584, %581, %571
  %607 = phi i32 [ -48, %571 ], [ -87, %581 ], [ -55, %584 ]
  %608 = shl i32 %578, 24
  %609 = ashr exact i32 %608, 24
  %610 = add nsw i32 %609, %607
  %611 = and i8 %577, 1
  %612 = icmp eq i8 %611, 0
  %613 = add nsw i32 %575, -4
  %614 = select i1 %612, i32 %575, i32 %613
  %615 = shl nsw i64 %576, 4
  %616 = sext i32 %610 to i64
  %617 = add nsw i64 %615, %616
  %618 = ashr i64 %617, %531
  %619 = trunc i64 %618 to i32
  %620 = icmp eq i32 %619, 0
  br i1 %620, label %775, label %621

621:                                              ; preds = %606
  %622 = trunc i64 %618 to i32
  %623 = icmp sgt i32 %622, 1
  br i1 %623, label %624, label %630

624:                                              ; preds = %621, %624
  %625 = phi i32 [ %627, %624 ], [ 1, %621 ]
  %626 = phi i32 [ %628, %624 ], [ %622, %621 ]
  %627 = add nuw nsw i32 %625, 1
  %628 = lshr i32 %626, 1
  %629 = icmp ugt i32 %626, 3
  br i1 %629, label %624, label %630

630:                                              ; preds = %624, %621
  %631 = phi i32 [ 1, %621 ], [ %627, %624 ]
  %632 = shl nsw i32 -1, %631
  %633 = xor i32 %632, -1
  %634 = trunc i64 %617 to i32
  %635 = and i32 %633, %634
  %636 = zext i32 %631 to i64
  %637 = ashr i64 %617, %636
  %638 = add nsw i32 %631, %614
  br label %639

639:                                              ; preds = %720, %630
  %640 = phi i16 [ %573, %630 ], [ %711, %720 ]
  %641 = phi i16* [ %574, %630 ], [ %712, %720 ]
  %642 = phi i32 [ %638, %630 ], [ %728, %720 ]
  %643 = phi i8 [ %577, %630 ], [ %713, %720 ]
  %644 = phi i8 [ 1, %630 ], [ %724, %720 ]
  br i1 %210, label %645, label %649

645:                                              ; preds = %639
  %646 = getelementptr inbounds i16, i16* %641, i64 1
  %647 = ptrtoint i16* %646 to i64
  %648 = icmp eq i16* %646, %11
  br i1 %648, label %749, label %695

649:                                              ; preds = %639
  %650 = zext i16 %640 to i32
  %651 = add nsw i32 %650, -48
  %652 = icmp ult i32 %651, 10
  %653 = icmp ult i16 %640, 64
  %654 = and i1 %653, %652
  %655 = add i16 %640, -97
  %656 = icmp ult i16 %655, 6
  %657 = or i1 %656, %654
  br i1 %657, label %666, label %658

658:                                              ; preds = %649
  %659 = icmp ugt i16 %640, 64
  br i1 %659, label %664, label %660

660:                                              ; preds = %658
  %661 = getelementptr inbounds i16, i16* %641, i64 1
  %662 = ptrtoint i16* %661 to i64
  %663 = icmp eq i16* %661, %11
  br i1 %663, label %747, label %695

664:                                              ; preds = %658
  %665 = icmp ugt i16 %640, 70
  br label %666

666:                                              ; preds = %664, %649
  %667 = phi i1 [ %665, %664 ], [ false, %649 ]
  %668 = getelementptr inbounds i16, i16* %641, i64 1
  %669 = ptrtoint i16* %668 to i64
  %670 = icmp eq i16* %668, %11
  %671 = or i1 %670, %667
  br i1 %671, label %692, label %672

672:                                              ; preds = %666
  %673 = getelementptr inbounds i16, i16* %641, i64 2
  %674 = icmp eq i16* %673, %11
  br i1 %674, label %695, label %675

675:                                              ; preds = %672
  %676 = load i16, i16* %668, align 2
  %677 = icmp eq i16 %676, %209
  br i1 %677, label %678, label %688

678:                                              ; preds = %675
  %679 = load i16, i16* %673, align 2
  %680 = zext i16 %679 to i32
  %681 = add nsw i32 %680, -48
  %682 = icmp ult i32 %681, 10
  %683 = icmp ult i16 %679, 64
  %684 = and i1 %683, %682
  br i1 %684, label %686, label %685

685:                                              ; preds = %678
  switch i16 %679, label %688 [
    i16 102, label %686
    i16 101, label %686
    i16 100, label %686
    i16 99, label %686
    i16 98, label %686
    i16 97, label %686
    i16 70, label %686
    i16 69, label %686
    i16 68, label %686
    i16 67, label %686
    i16 66, label %686
    i16 65, label %686
  ]

686:                                              ; preds = %685, %685, %685, %685, %685, %685, %685, %685, %685, %685, %685, %685, %678
  %687 = ptrtoint i16* %673 to i64
  br label %688

688:                                              ; preds = %686, %685, %675
  %689 = phi i64 [ %687, %686 ], [ %669, %685 ], [ %669, %675 ]
  %690 = phi i16* [ %673, %686 ], [ %668, %685 ], [ %668, %675 ]
  %691 = icmp eq i16* %690, %11
  br i1 %691, label %751, label %695

692:                                              ; preds = %666
  %693 = xor i1 %667, true
  %694 = or i1 %670, %693
  br i1 %694, label %729, label %695

695:                                              ; preds = %692, %688, %672, %660, %645
  %696 = phi i64 [ %647, %645 ], [ %669, %692 ], [ %669, %672 ], [ %689, %688 ], [ %662, %660 ]
  %697 = phi i16* [ %646, %645 ], [ %668, %692 ], [ %668, %672 ], [ %690, %688 ], [ %661, %660 ]
  br i1 %521, label %698, label %704

698:                                              ; preds = %695
  %699 = load i16, i16* %697, align 2
  %700 = icmp eq i16 %699, 46
  br i1 %700, label %701, label %709

701:                                              ; preds = %698
  %702 = getelementptr inbounds i16, i16* %697, i64 1
  %703 = ptrtoint i16* %702 to i64
  br label %704

704:                                              ; preds = %701, %695
  %705 = phi i64 [ %703, %701 ], [ %696, %695 ]
  %706 = phi i16* [ %702, %701 ], [ %697, %695 ]
  %707 = phi i8 [ 1, %701 ], [ %643, %695 ]
  %708 = load i16, i16* %706, align 2
  br label %709

709:                                              ; preds = %704, %698
  %710 = phi i64 [ %705, %704 ], [ %696, %698 ]
  %711 = phi i16 [ %708, %704 ], [ %699, %698 ]
  %712 = phi i16* [ %706, %704 ], [ %697, %698 ]
  %713 = phi i8 [ %707, %704 ], [ %643, %698 ]
  %714 = zext i16 %711 to i32
  %715 = add nsw i32 %714, -48
  %716 = icmp ult i32 %715, 10
  %717 = icmp ult i16 %711, 64
  %718 = and i1 %717, %716
  br i1 %718, label %720, label %719

719:                                              ; preds = %709
  switch i16 %711, label %731 [
    i16 102, label %720
    i16 101, label %720
    i16 100, label %720
    i16 99, label %720
    i16 98, label %720
    i16 97, label %720
    i16 70, label %720
    i16 69, label %720
    i16 68, label %720
    i16 67, label %720
    i16 66, label %720
    i16 65, label %720
  ]

720:                                              ; preds = %719, %719, %719, %719, %719, %719, %719, %719, %719, %719, %719, %719, %709
  %721 = icmp ne i8 %644, 0
  %722 = icmp eq i16 %711, 48
  %723 = and i1 %721, %722
  %724 = zext i1 %723 to i8
  %725 = and i8 %713, 1
  %726 = icmp eq i8 %725, 0
  %727 = add nsw i32 %642, 4
  %728 = select i1 %726, i32 %727, i32 %642
  br label %639

729:                                              ; preds = %692
  %730 = ptrtoint i16* %668 to i64
  br label %731

731:                                              ; preds = %719, %729
  %732 = phi i64 [ %730, %729 ], [ %710, %719 ]
  %733 = phi i16* [ %668, %729 ], [ %712, %719 ]
  %734 = or i1 %15, %521
  %735 = icmp eq i16* %733, %11
  %736 = or i1 %734, %735
  br i1 %736, label %751, label %737

737:                                              ; preds = %731, %742
  %738 = phi i16* [ %743, %742 ], [ %733, %731 ]
  %739 = load i16, i16* %738, align 2
  %740 = zext i16 %739 to i32
  %741 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %740) #5
  br i1 %741, label %742, label %1606

742:                                              ; preds = %737
  %743 = getelementptr inbounds i16, i16* %738, i64 1
  %744 = icmp eq i16* %743, %11
  br i1 %744, label %745, label %737

745:                                              ; preds = %742
  %746 = ptrtoint i16* %11 to i64
  br label %751

747:                                              ; preds = %660
  %748 = ptrtoint i16* %11 to i64
  br label %751

749:                                              ; preds = %645
  %750 = ptrtoint i16* %11 to i64
  br label %751

751:                                              ; preds = %688, %747, %749, %745, %731
  %752 = phi i64 [ %732, %731 ], [ %746, %745 ], [ %748, %747 ], [ %750, %749 ], [ %689, %688 ]
  %753 = add nsw i32 %631, -1
  %754 = shl i32 1, %753
  %755 = icmp sgt i32 %635, %754
  br i1 %755, label %756, label %758

756:                                              ; preds = %751
  %757 = add nsw i64 %637, 1
  br label %766

758:                                              ; preds = %751
  %759 = icmp eq i32 %635, %754
  br i1 %759, label %760, label %766

760:                                              ; preds = %758
  %761 = and i64 %637, 1
  %762 = xor i8 %644, 1
  %763 = zext i8 %762 to i64
  %764 = or i64 %761, %763
  %765 = add nsw i64 %764, %637
  br label %766

766:                                              ; preds = %760, %758, %756
  %767 = phi i64 [ %757, %756 ], [ %637, %758 ], [ %765, %760 ]
  %768 = shl i64 1, %531
  %769 = and i64 %767, %768
  %770 = icmp ne i64 %769, 0
  %771 = zext i1 %770 to i32
  %772 = add nsw i32 %642, %771
  %773 = zext i1 %770 to i64
  %774 = ashr i64 %767, %773
  br i1 %521, label %843, label %1002

775:                                              ; preds = %606
  br i1 %210, label %776, label %780

776:                                              ; preds = %775
  %777 = getelementptr inbounds i16, i16* %574, i64 1
  %778 = ptrtoint i16* %777 to i64
  %779 = icmp eq i16* %777, %11
  br i1 %779, label %832, label %823

780:                                              ; preds = %775
  %781 = icmp ult i16 %573, 64
  %782 = and i1 %781, %580
  %783 = add i16 %573, -97
  %784 = icmp ult i16 %783, 6
  %785 = or i1 %784, %782
  br i1 %785, label %794, label %786

786:                                              ; preds = %780
  %787 = icmp ugt i16 %573, 64
  br i1 %787, label %792, label %788

788:                                              ; preds = %786
  %789 = getelementptr inbounds i16, i16* %574, i64 1
  %790 = ptrtoint i16* %789 to i64
  %791 = icmp eq i16* %789, %11
  br i1 %791, label %834, label %823

792:                                              ; preds = %786
  %793 = icmp ugt i16 %573, 70
  br label %794

794:                                              ; preds = %792, %780
  %795 = phi i1 [ %793, %792 ], [ false, %780 ]
  %796 = getelementptr inbounds i16, i16* %574, i64 1
  %797 = ptrtoint i16* %796 to i64
  %798 = icmp eq i16* %796, %11
  %799 = or i1 %798, %795
  br i1 %799, label %820, label %800

800:                                              ; preds = %794
  %801 = getelementptr inbounds i16, i16* %574, i64 2
  %802 = icmp eq i16* %801, %11
  br i1 %802, label %823, label %803

803:                                              ; preds = %800
  %804 = load i16, i16* %796, align 2
  %805 = icmp eq i16 %804, %209
  br i1 %805, label %806, label %816

806:                                              ; preds = %803
  %807 = load i16, i16* %801, align 2
  %808 = zext i16 %807 to i32
  %809 = add nsw i32 %808, -48
  %810 = icmp ult i32 %809, 10
  %811 = icmp ult i16 %807, 64
  %812 = and i1 %811, %810
  br i1 %812, label %814, label %813

813:                                              ; preds = %806
  switch i16 %807, label %816 [
    i16 102, label %814
    i16 101, label %814
    i16 100, label %814
    i16 99, label %814
    i16 98, label %814
    i16 97, label %814
    i16 70, label %814
    i16 69, label %814
    i16 68, label %814
    i16 67, label %814
    i16 66, label %814
    i16 65, label %814
  ]

814:                                              ; preds = %813, %813, %813, %813, %813, %813, %813, %813, %813, %813, %813, %813, %806
  %815 = ptrtoint i16* %801 to i64
  br label %816

816:                                              ; preds = %814, %813, %803
  %817 = phi i64 [ %815, %814 ], [ %797, %813 ], [ %797, %803 ]
  %818 = phi i16* [ %801, %814 ], [ %796, %813 ], [ %796, %803 ]
  %819 = icmp eq i16* %818, %11
  br i1 %819, label %838, label %823

820:                                              ; preds = %794
  %821 = xor i1 %795, true
  %822 = or i1 %798, %821
  br i1 %822, label %836, label %823

823:                                              ; preds = %820, %816, %800, %788, %776, %589
  %824 = phi i64 [ %778, %776 ], [ %797, %820 ], [ %797, %800 ], [ %817, %816 ], [ %790, %788 ], [ %591, %589 ]
  %825 = phi i16* [ %777, %776 ], [ %796, %820 ], [ %796, %800 ], [ %818, %816 ], [ %789, %788 ], [ %590, %589 ]
  %826 = phi i32 [ %614, %776 ], [ %614, %820 ], [ %614, %800 ], [ %614, %816 ], [ %614, %788 ], [ %575, %589 ]
  %827 = phi i64 [ %617, %776 ], [ %617, %820 ], [ %617, %800 ], [ %617, %816 ], [ %617, %788 ], [ %576, %589 ]
  %828 = phi i8 [ %577, %776 ], [ %577, %820 ], [ %577, %800 ], [ %577, %816 ], [ %577, %788 ], [ 1, %589 ]
  %829 = load i16, i16* %825, align 2
  br label %571

830:                                              ; preds = %598
  %831 = ptrtoint i16* %11 to i64
  br i1 %593, label %843, label %1002

832:                                              ; preds = %776
  %833 = ptrtoint i16* %11 to i64
  br i1 %521, label %848, label %1002

834:                                              ; preds = %788
  %835 = ptrtoint i16* %11 to i64
  br i1 %521, label %854, label %1002

836:                                              ; preds = %820
  %837 = ptrtoint i16* %796 to i64
  br label %838

838:                                              ; preds = %816, %836, %592
  %839 = phi i1 [ %593, %592 ], [ %521, %836 ], [ %521, %816 ]
  %840 = phi i64 [ %572, %592 ], [ %837, %836 ], [ %817, %816 ]
  %841 = phi i32 [ %575, %592 ], [ %614, %836 ], [ %614, %816 ]
  %842 = phi i64 [ %576, %592 ], [ %617, %836 ], [ %617, %816 ]
  br i1 %839, label %843, label %1002

843:                                              ; preds = %588, %588, %830, %766, %838
  %844 = phi i64 [ %840, %838 ], [ %752, %766 ], [ %831, %830 ], [ %572, %588 ], [ %572, %588 ]
  %845 = phi i64 [ %842, %838 ], [ %774, %766 ], [ %576, %830 ], [ %576, %588 ], [ %576, %588 ]
  %846 = phi i32 [ %841, %838 ], [ %772, %766 ], [ %575, %830 ], [ %575, %588 ], [ %575, %588 ]
  %847 = inttoptr i64 %844 to i16*
  br i1 %210, label %848, label %854

848:                                              ; preds = %832, %843
  %849 = phi i16* [ %847, %843 ], [ %11, %832 ]
  %850 = phi i32 [ %846, %843 ], [ %614, %832 ]
  %851 = phi i64 [ %845, %843 ], [ %617, %832 ]
  %852 = getelementptr inbounds i16, i16* %849, i64 1
  %853 = ptrtoint i16* %852 to i64
  br label %896

854:                                              ; preds = %834, %843
  %855 = phi i16* [ %847, %843 ], [ %11, %834 ]
  %856 = phi i32 [ %846, %843 ], [ %614, %834 ]
  %857 = phi i64 [ %845, %843 ], [ %617, %834 ]
  %858 = load i16, i16* %855, align 2
  %859 = zext i16 %858 to i32
  %860 = add nsw i32 %859, -48
  %861 = icmp ult i32 %860, 10
  %862 = icmp ult i16 %858, 64
  %863 = and i1 %862, %861
  %864 = add i16 %858, -97
  %865 = icmp ult i16 %864, 6
  %866 = or i1 %865, %863
  br i1 %866, label %874, label %867

867:                                              ; preds = %854
  %868 = icmp ugt i16 %858, 64
  br i1 %868, label %872, label %869

869:                                              ; preds = %867
  %870 = getelementptr inbounds i16, i16* %855, i64 1
  %871 = ptrtoint i16* %870 to i64
  br label %896

872:                                              ; preds = %867
  %873 = icmp ugt i16 %858, 70
  br label %874

874:                                              ; preds = %872, %854
  %875 = phi i1 [ %873, %872 ], [ false, %854 ]
  %876 = getelementptr inbounds i16, i16* %855, i64 1
  %877 = ptrtoint i16* %876 to i64
  %878 = icmp eq i16* %876, %11
  %879 = or i1 %878, %875
  br i1 %879, label %896, label %880

880:                                              ; preds = %874
  %881 = getelementptr inbounds i16, i16* %855, i64 2
  %882 = icmp eq i16* %881, %11
  br i1 %882, label %896, label %883

883:                                              ; preds = %880
  %884 = load i16, i16* %876, align 2
  %885 = icmp eq i16 %884, %209
  br i1 %885, label %886, label %902

886:                                              ; preds = %883
  %887 = load i16, i16* %881, align 2
  %888 = zext i16 %887 to i32
  %889 = add nsw i32 %888, -48
  %890 = icmp ult i32 %889, 10
  %891 = icmp ult i16 %887, 64
  %892 = and i1 %891, %890
  br i1 %892, label %894, label %893

893:                                              ; preds = %886
  switch i16 %887, label %896 [
    i16 102, label %894
    i16 101, label %894
    i16 100, label %894
    i16 99, label %894
    i16 98, label %894
    i16 97, label %894
    i16 70, label %894
    i16 69, label %894
    i16 68, label %894
    i16 67, label %894
    i16 66, label %894
    i16 65, label %894
  ]

894:                                              ; preds = %893, %893, %893, %893, %893, %893, %893, %893, %893, %893, %893, %893, %886
  %895 = ptrtoint i16* %881 to i64
  br label %896

896:                                              ; preds = %894, %893, %880, %874, %869, %848
  %897 = phi i32 [ %850, %848 ], [ %856, %874 ], [ %856, %880 ], [ %856, %894 ], [ %856, %893 ], [ %856, %869 ]
  %898 = phi i64 [ %851, %848 ], [ %857, %874 ], [ %857, %880 ], [ %857, %894 ], [ %857, %893 ], [ %857, %869 ]
  %899 = phi i64 [ %853, %848 ], [ %877, %874 ], [ %877, %880 ], [ %895, %894 ], [ %877, %893 ], [ %871, %869 ]
  %900 = phi i16* [ %852, %848 ], [ %876, %874 ], [ %876, %880 ], [ %881, %894 ], [ %876, %893 ], [ %870, %869 ]
  %901 = load i16, i16* %900, align 2
  br label %902

902:                                              ; preds = %896, %883
  %903 = phi i32 [ %897, %896 ], [ %856, %883 ]
  %904 = phi i64 [ %898, %896 ], [ %857, %883 ]
  %905 = phi i64 [ %899, %896 ], [ %877, %883 ]
  %906 = phi i16 [ %901, %896 ], [ %884, %883 ]
  %907 = phi i16* [ %900, %896 ], [ %876, %883 ]
  switch i16 %906, label %914 [
    i16 43, label %908
    i16 45, label %911
  ]

908:                                              ; preds = %902
  %909 = getelementptr inbounds i16, i16* %907, i64 1
  %910 = ptrtoint i16* %909 to i64
  br label %914

911:                                              ; preds = %902
  %912 = getelementptr inbounds i16, i16* %907, i64 1
  %913 = ptrtoint i16* %912 to i64
  br label %914

914:                                              ; preds = %911, %908, %902
  %915 = phi i64 [ %905, %902 ], [ %913, %911 ], [ %910, %908 ]
  %916 = phi i16* [ %907, %902 ], [ %912, %911 ], [ %909, %908 ]
  %917 = phi i1 [ false, %902 ], [ true, %911 ], [ false, %908 ]
  %918 = load i16, i16* %916, align 2
  %919 = zext i16 %918 to i32
  %920 = add nsw i32 %919, -48
  %921 = icmp ult i32 %920, 10
  br i1 %921, label %922, label %996

922:                                              ; preds = %914, %983
  %923 = phi i32 [ %987, %983 ], [ %919, %914 ]
  %924 = phi i16 [ %986, %983 ], [ %918, %914 ]
  %925 = phi i16* [ %985, %983 ], [ %916, %914 ]
  %926 = phi i32 [ %936, %983 ], [ 0, %914 ]
  %927 = icmp slt i32 %926, 0
  %928 = sub nsw i32 0, %926
  %929 = select i1 %927, i32 %928, i32 %926
  %930 = icmp slt i32 %929, 97201
  br i1 %930, label %931, label %935

931:                                              ; preds = %922
  %932 = mul nsw i32 %926, 10
  %933 = add nsw i32 %923, -48
  %934 = add i32 %933, %932
  br label %935

935:                                              ; preds = %931, %922
  %936 = phi i32 [ %934, %931 ], [ %926, %922 ]
  br i1 %210, label %937, label %941

937:                                              ; preds = %935
  %938 = getelementptr inbounds i16, i16* %925, i64 1
  %939 = ptrtoint i16* %938 to i64
  %940 = icmp eq i16* %938, %11
  br i1 %940, label %990, label %983

941:                                              ; preds = %935
  %942 = icmp ult i16 %924, 64
  %943 = add i16 %924, -97
  %944 = icmp ult i16 %943, 6
  %945 = or i1 %942, %944
  br i1 %945, label %954, label %946

946:                                              ; preds = %941
  %947 = icmp ugt i16 %924, 64
  br i1 %947, label %952, label %948

948:                                              ; preds = %946
  %949 = getelementptr inbounds i16, i16* %925, i64 1
  %950 = ptrtoint i16* %949 to i64
  %951 = icmp eq i16* %949, %11
  br i1 %951, label %992, label %983

952:                                              ; preds = %946
  %953 = icmp ugt i16 %924, 70
  br label %954

954:                                              ; preds = %952, %941
  %955 = phi i1 [ %953, %952 ], [ false, %941 ]
  %956 = getelementptr inbounds i16, i16* %925, i64 1
  %957 = ptrtoint i16* %956 to i64
  %958 = icmp eq i16* %956, %11
  %959 = or i1 %958, %955
  br i1 %959, label %980, label %960

960:                                              ; preds = %954
  %961 = getelementptr inbounds i16, i16* %925, i64 2
  %962 = icmp eq i16* %961, %11
  br i1 %962, label %983, label %963

963:                                              ; preds = %960
  %964 = load i16, i16* %956, align 2
  %965 = icmp eq i16 %964, %209
  br i1 %965, label %966, label %976

966:                                              ; preds = %963
  %967 = load i16, i16* %961, align 2
  %968 = zext i16 %967 to i32
  %969 = add nsw i32 %968, -48
  %970 = icmp ult i32 %969, 10
  %971 = icmp ult i16 %967, 64
  %972 = and i1 %971, %970
  br i1 %972, label %974, label %973

973:                                              ; preds = %966
  switch i16 %967, label %976 [
    i16 102, label %974
    i16 101, label %974
    i16 100, label %974
    i16 99, label %974
    i16 98, label %974
    i16 97, label %974
    i16 70, label %974
    i16 69, label %974
    i16 68, label %974
    i16 67, label %974
    i16 66, label %974
    i16 65, label %974
  ]

974:                                              ; preds = %973, %973, %973, %973, %973, %973, %973, %973, %973, %973, %973, %973, %966
  %975 = ptrtoint i16* %961 to i64
  br label %976

976:                                              ; preds = %974, %973, %963
  %977 = phi i64 [ %975, %974 ], [ %957, %973 ], [ %957, %963 ]
  %978 = phi i16* [ %961, %974 ], [ %956, %973 ], [ %956, %963 ]
  %979 = icmp eq i16* %978, %11
  br i1 %979, label %996, label %983

980:                                              ; preds = %954
  %981 = xor i1 %955, true
  %982 = or i1 %958, %981
  br i1 %982, label %994, label %983

983:                                              ; preds = %980, %976, %960, %948, %937
  %984 = phi i64 [ %939, %937 ], [ %957, %980 ], [ %957, %960 ], [ %977, %976 ], [ %950, %948 ]
  %985 = phi i16* [ %938, %937 ], [ %956, %980 ], [ %956, %960 ], [ %978, %976 ], [ %949, %948 ]
  %986 = load i16, i16* %985, align 2
  %987 = zext i16 %986 to i32
  %988 = add nsw i32 %987, -48
  %989 = icmp ult i32 %988, 10
  br i1 %989, label %922, label %996

990:                                              ; preds = %937
  %991 = ptrtoint i16* %11 to i64
  br label %996

992:                                              ; preds = %948
  %993 = ptrtoint i16* %11 to i64
  br label %996

994:                                              ; preds = %980
  %995 = ptrtoint i16* %956 to i64
  br label %996

996:                                              ; preds = %983, %976, %994, %990, %992, %914
  %997 = phi i64 [ %915, %914 ], [ %991, %990 ], [ %993, %992 ], [ %995, %994 ], [ %984, %983 ], [ %977, %976 ]
  %998 = phi i32 [ 0, %914 ], [ %936, %990 ], [ %936, %992 ], [ %936, %994 ], [ %936, %976 ], [ %936, %983 ]
  %999 = sub nsw i32 0, %998
  %1000 = select i1 %917, i32 %999, i32 %998
  %1001 = add nsw i32 %1000, %903
  br label %1002

1002:                                             ; preds = %832, %834, %830, %766, %996, %838
  %1003 = phi i64 [ %997, %996 ], [ %840, %838 ], [ %752, %766 ], [ %831, %830 ], [ %835, %834 ], [ %833, %832 ]
  %1004 = phi i64 [ %904, %996 ], [ %842, %838 ], [ %774, %766 ], [ %576, %830 ], [ %617, %834 ], [ %617, %832 ]
  %1005 = phi i32 [ %1001, %996 ], [ %841, %838 ], [ %772, %766 ], [ %575, %830 ], [ %614, %834 ], [ %614, %832 ]
  %1006 = icmp eq i32 %1005, 0
  %1007 = icmp eq i64 %1004, 0
  %1008 = or i1 %1007, %1006
  br i1 %1008, label %1009, label %1016

1009:                                             ; preds = %1002
  br i1 %522, label %1010, label %1013

1010:                                             ; preds = %1009
  br i1 %1007, label %1061, label %1011

1011:                                             ; preds = %1010
  %1012 = sub nsw i64 0, %1004
  br label %1013

1013:                                             ; preds = %1011, %1009
  %1014 = phi i64 [ %1012, %1011 ], [ %1004, %1009 ]
  %1015 = sitofp i64 %1014 to double
  br label %1061

1016:                                             ; preds = %1002
  %1017 = icmp ugt i64 %1004, 9007199254740991
  br i1 %1017, label %1018, label %1024

1018:                                             ; preds = %1016, %1018
  %1019 = phi i32 [ %1022, %1018 ], [ %1005, %1016 ]
  %1020 = phi i64 [ %1021, %1018 ], [ %1004, %1016 ]
  %1021 = lshr i64 %1020, 1
  %1022 = add nsw i32 %1019, 1
  %1023 = icmp ugt i64 %1020, 18014398509481983
  br i1 %1023, label %1018, label %1024

1024:                                             ; preds = %1018, %1016
  %1025 = phi i64 [ %1004, %1016 ], [ %1021, %1018 ]
  %1026 = phi i32 [ %1005, %1016 ], [ %1022, %1018 ]
  %1027 = icmp sgt i32 %1026, 971
  br i1 %1027, label %1057, label %1028

1028:                                             ; preds = %1024
  %1029 = icmp slt i32 %1026, -1074
  br i1 %1029, label %1057, label %1030

1030:                                             ; preds = %1028
  %1031 = icmp ne i32 %1026, -1074
  %1032 = and i64 %1025, 4503599627370496
  %1033 = icmp eq i64 %1032, 0
  %1034 = and i1 %1031, %1033
  br i1 %1034, label %1035, label %1044

1035:                                             ; preds = %1030, %1035
  %1036 = phi i32 [ %1039, %1035 ], [ %1026, %1030 ]
  %1037 = phi i64 [ %1038, %1035 ], [ %1025, %1030 ]
  %1038 = shl i64 %1037, 1
  %1039 = add nsw i32 %1036, -1
  %1040 = icmp sgt i32 %1039, -1074
  %1041 = and i64 %1037, 2251799813685248
  %1042 = icmp eq i64 %1041, 0
  %1043 = and i1 %1040, %1042
  br i1 %1043, label %1035, label %1044

1044:                                             ; preds = %1035, %1030
  %1045 = phi i64 [ %1025, %1030 ], [ %1038, %1035 ]
  %1046 = phi i32 [ %1026, %1030 ], [ %1039, %1035 ]
  %1047 = phi i1 [ %1033, %1030 ], [ %1042, %1035 ]
  %1048 = icmp eq i32 %1046, -1074
  %1049 = and i1 %1048, %1047
  %1050 = add nsw i32 %1046, 1075
  %1051 = zext i32 %1050 to i64
  %1052 = shl i64 %1051, 52
  %1053 = select i1 %1049, i64 0, i64 %1052
  %1054 = and i64 %1045, 4503599627370495
  %1055 = or i64 %1053, %1054
  %1056 = bitcast i64 %1055 to double
  br label %1057

1057:                                             ; preds = %1044, %1028, %1024
  %1058 = phi double [ %1056, %1044 ], [ 0x7FF0000000000000, %1024 ], [ 0.000000e+00, %1028 ]
  %1059 = fsub double -0.000000e+00, %1058
  %1060 = select i1 %522, double %1059, double %1058
  br label %1061

1061:                                             ; preds = %568, %1010, %1013, %1057
  %1062 = phi i64 [ %1003, %1057 ], [ %1003, %1013 ], [ %1003, %1010 ], [ %569, %568 ]
  %1063 = phi double [ %1060, %1057 ], [ %1015, %1013 ], [ -0.000000e+00, %1010 ], [ %570, %568 ]
  br i1 %19, label %1064, label %1083

1064:                                             ; preds = %1061
  %1065 = inttoptr i64 %1062 to i16*
  %1066 = icmp eq i16* %11, %1065
  br i1 %1066, label %1083, label %1067

1067:                                             ; preds = %1064
  %1068 = load i16, i16* %1065, align 2
  %1069 = zext i16 %1068 to i32
  %1070 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %1069) #5
  br i1 %1070, label %1075, label %1083

1071:                                             ; preds = %1075
  %1072 = load i16, i16* %1077, align 2
  %1073 = zext i16 %1072 to i32
  %1074 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %1073) #5
  br i1 %1074, label %1075, label %1081

1075:                                             ; preds = %1067, %1071
  %1076 = phi i16* [ %1077, %1071 ], [ %1065, %1067 ]
  %1077 = getelementptr inbounds i16, i16* %1076, i64 1
  %1078 = icmp eq i16* %1077, %11
  br i1 %1078, label %1079, label %1071

1079:                                             ; preds = %1075
  %1080 = ptrtoint i16* %11 to i64
  br label %1083

1081:                                             ; preds = %1071
  %1082 = ptrtoint i16* %1077 to i64
  br label %1083

1083:                                             ; preds = %1081, %1067, %1079, %1064, %1061
  %1084 = phi i64 [ %1062, %1061 ], [ %1062, %1064 ], [ %1080, %1079 ], [ %1062, %1067 ], [ %1082, %1081 ]
  %1085 = sub i64 %1084, %9
  %1086 = lshr exact i64 %1085, 1
  %1087 = trunc i64 %1086 to i32
  store i32 %1087, i32* %4, align 4
  br label %1606

1088:                                             ; preds = %243
  %1089 = icmp eq i16 %250, 48
  br i1 %1089, label %1090, label %1136

1090:                                             ; preds = %251, %1088
  br label %1091

1091:                                             ; preds = %1090, %1097
  %1092 = phi i16* [ %1099, %1097 ], [ %249, %1090 ]
  %1093 = getelementptr inbounds i16, i16* %1092, i64 1
  %1094 = ptrtoint i16* %1093 to i64
  %1095 = icmp eq i16* %1093, %11
  br i1 %210, label %1096, label %1102

1096:                                             ; preds = %1091
  br i1 %1095, label %1125, label %1097

1097:                                             ; preds = %1096, %1119, %1103
  %1098 = phi i64 [ %1094, %1096 ], [ %1120, %1119 ], [ %1094, %1103 ]
  %1099 = inttoptr i64 %1098 to i16*
  %1100 = load i16, i16* %1099, align 2
  %1101 = icmp eq i16 %1100, 48
  br i1 %1101, label %1091, label %1134

1102:                                             ; preds = %1091
  br i1 %1095, label %1123, label %1103

1103:                                             ; preds = %1102
  %1104 = getelementptr inbounds i16, i16* %1092, i64 2
  %1105 = icmp eq i16* %1104, %11
  br i1 %1105, label %1097, label %1106

1106:                                             ; preds = %1103
  %1107 = load i16, i16* %1093, align 2
  %1108 = icmp eq i16 %1107, %209
  br i1 %1108, label %1109, label %1119

1109:                                             ; preds = %1106
  %1110 = load i16, i16* %1104, align 2
  %1111 = zext i16 %1110 to i32
  %1112 = add nsw i32 %1111, -48
  %1113 = icmp ult i32 %1112, 10
  %1114 = icmp ult i16 %1110, 58
  %1115 = and i1 %1114, %1113
  %1116 = ptrtoint i16* %1104 to i64
  %1117 = select i1 %1115, i64 %1116, i64 %1094
  %1118 = select i1 %1115, i16* %1104, i16* %1093
  br label %1119

1119:                                             ; preds = %1109, %1106
  %1120 = phi i64 [ %1094, %1106 ], [ %1117, %1109 ]
  %1121 = phi i16* [ %1093, %1106 ], [ %1118, %1109 ]
  %1122 = icmp eq i16* %1121, %11
  br i1 %1122, label %1127, label %1097

1123:                                             ; preds = %1102
  %1124 = ptrtoint i16* %11 to i64
  br label %1127

1125:                                             ; preds = %1096
  %1126 = ptrtoint i16* %11 to i64
  br label %1127

1127:                                             ; preds = %1119, %1125, %1123
  %1128 = phi i64 [ %1124, %1123 ], [ %1126, %1125 ], [ %1120, %1119 ]
  %1129 = sub i64 %1128, %9
  %1130 = lshr exact i64 %1129, 1
  %1131 = trunc i64 %1130 to i32
  store i32 %1131, i32* %4, align 4
  %1132 = icmp eq i8 %88, 0
  %1133 = select i1 %1132, double 0.000000e+00, double -0.000000e+00
  br label %1606

1134:                                             ; preds = %1097
  %1135 = inttoptr i64 %1098 to i16*
  br label %1136

1136:                                             ; preds = %251, %1134, %1088
  %1137 = phi i16* [ %249, %1088 ], [ %1135, %1134 ], [ %249, %251 ]
  %1138 = phi i64 [ %244, %1088 ], [ %1098, %1134 ], [ %244, %251 ]
  %1139 = and i32 %13, 2
  %1140 = icmp ne i32 %1139, 0
  br label %1141

1141:                                             ; preds = %204, %1136
  %1142 = phi i16* [ %149, %204 ], [ %1137, %1136 ]
  %1143 = phi i1 [ false, %204 ], [ true, %1136 ]
  %1144 = phi i64 [ %87, %204 ], [ %1138, %1136 ]
  %1145 = phi i1 [ false, %204 ], [ %1140, %1136 ]
  %1146 = zext i1 %1145 to i8
  %1147 = getelementptr inbounds [782 x i8], [782 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 782, i8* nonnull %1147) #5
  %1148 = load i16, i16* %1142, align 2
  %1149 = add i16 %1148, -48
  %1150 = icmp ult i16 %1149, 10
  br i1 %1150, label %1151, label %1232

1151:                                             ; preds = %1141
  %1152 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 6
  br label %1153

1153:                                             ; preds = %1151, %1192
  %1154 = phi i16 [ %1148, %1151 ], [ %1195, %1192 ]
  %1155 = phi i16* [ %1142, %1151 ], [ %1194, %1192 ]
  %1156 = phi i32 [ 0, %1151 ], [ %1178, %1192 ]
  %1157 = phi i32 [ 0, %1151 ], [ %1177, %1192 ]
  %1158 = phi i8 [ 0, %1151 ], [ %1176, %1192 ]
  %1159 = phi i32 [ 0, %1151 ], [ %1175, %1192 ]
  %1160 = phi i8 [ %1146, %1151 ], [ %1185, %1192 ]
  %1161 = icmp slt i32 %1156, 772
  br i1 %1161, label %1162, label %1168

1162:                                             ; preds = %1153
  %1163 = trunc i16 %1154 to i8
  %1164 = add nsw i32 %1159, 1
  %1165 = sext i32 %1159 to i64
  %1166 = getelementptr inbounds [782 x i8], [782 x i8]* %6, i64 0, i64 %1165
  store i8 %1163, i8* %1166, align 1
  %1167 = add nsw i32 %1156, 1
  br label %1174

1168:                                             ; preds = %1153
  %1169 = add nsw i32 %1157, 1
  %1170 = and i8 %1158, 1
  %1171 = icmp ne i16 %1154, 48
  %1172 = zext i1 %1171 to i8
  %1173 = or i8 %1170, %1172
  br label %1174

1174:                                             ; preds = %1168, %1162
  %1175 = phi i32 [ %1164, %1162 ], [ %1159, %1168 ]
  %1176 = phi i8 [ %1158, %1162 ], [ %1173, %1168 ]
  %1177 = phi i32 [ %1157, %1162 ], [ %1169, %1168 ]
  %1178 = phi i32 [ %1167, %1162 ], [ %1156, %1168 ]
  %1179 = icmp eq i8 %1160, 0
  br i1 %1179, label %1183, label %1180

1180:                                             ; preds = %1174
  %1181 = load i16, i16* %1155, align 2
  %1182 = icmp ult i16 %1181, 56
  br label %1183

1183:                                             ; preds = %1174, %1180
  %1184 = phi i1 [ false, %1174 ], [ %1182, %1180 ]
  %1185 = zext i1 %1184 to i8
  %1186 = load i16, i16* %1152, align 8
  %1187 = icmp eq i16 %1186, 0
  br i1 %1187, label %1188, label %1198

1188:                                             ; preds = %1183
  %1189 = getelementptr inbounds i16, i16* %1155, i64 1
  %1190 = ptrtoint i16* %1189 to i64
  %1191 = icmp eq i16* %1189, %11
  br i1 %1191, label %1521, label %1192

1192:                                             ; preds = %1188, %1226, %1208, %1210
  %1193 = phi i64 [ %1190, %1188 ], [ %1227, %1226 ], [ %1206, %1208 ], [ %1206, %1210 ]
  %1194 = inttoptr i64 %1193 to i16*
  %1195 = load i16, i16* %1194, align 2
  %1196 = add i16 %1195, -48
  %1197 = icmp ult i16 %1196, 10
  br i1 %1197, label %1153, label %1230

1198:                                             ; preds = %1183
  %1199 = load i16, i16* %1155, align 2
  %1200 = zext i16 %1199 to i32
  %1201 = add nsw i32 %1200, -48
  %1202 = icmp ult i32 %1201, 10
  %1203 = icmp ult i16 %1199, 58
  %1204 = and i1 %1203, %1202
  %1205 = getelementptr inbounds i16, i16* %1155, i64 1
  %1206 = ptrtoint i16* %1205 to i64
  %1207 = icmp eq i16* %1205, %11
  br i1 %1204, label %1209, label %1208

1208:                                             ; preds = %1198
  br i1 %1207, label %1523, label %1192

1209:                                             ; preds = %1198
  br i1 %1207, label %1525, label %1210

1210:                                             ; preds = %1209
  %1211 = getelementptr inbounds i16, i16* %1155, i64 2
  %1212 = icmp eq i16* %1211, %11
  br i1 %1212, label %1192, label %1213

1213:                                             ; preds = %1210
  %1214 = load i16, i16* %1205, align 2
  %1215 = icmp eq i16 %1214, %1186
  br i1 %1215, label %1216, label %1226

1216:                                             ; preds = %1213
  %1217 = load i16, i16* %1211, align 2
  %1218 = zext i16 %1217 to i32
  %1219 = add nsw i32 %1218, -48
  %1220 = icmp ult i32 %1219, 10
  %1221 = icmp ult i16 %1217, 58
  %1222 = and i1 %1221, %1220
  %1223 = ptrtoint i16* %1211 to i64
  %1224 = select i1 %1222, i64 %1223, i64 %1206
  %1225 = select i1 %1222, i16* %1211, i16* %1205
  br label %1226

1226:                                             ; preds = %1216, %1213
  %1227 = phi i64 [ %1206, %1213 ], [ %1224, %1216 ]
  %1228 = phi i16* [ %1205, %1213 ], [ %1225, %1216 ]
  %1229 = icmp eq i16* %1228, %11
  br i1 %1229, label %1535, label %1192

1230:                                             ; preds = %1192
  %1231 = inttoptr i64 %1193 to i16*
  br label %1232

1232:                                             ; preds = %1230, %1141
  %1233 = phi i64 [ %1144, %1141 ], [ %1193, %1230 ]
  %1234 = phi i8 [ %1146, %1141 ], [ %1185, %1230 ]
  %1235 = phi i32 [ 0, %1141 ], [ %1175, %1230 ]
  %1236 = phi i8 [ 0, %1141 ], [ %1176, %1230 ]
  %1237 = phi i32 [ 0, %1141 ], [ %1177, %1230 ]
  %1238 = phi i32 [ 0, %1141 ], [ %1178, %1230 ]
  %1239 = phi i16* [ %1142, %1141 ], [ %1231, %1230 ]
  %1240 = phi i16 [ %1148, %1141 ], [ %1195, %1230 ]
  %1241 = icmp eq i32 %1238, 0
  %1242 = select i1 %1241, i8 0, i8 %1234
  %1243 = icmp eq i16 %1240, 46
  br i1 %1243, label %1244, label %1387

1244:                                             ; preds = %1232
  %1245 = icmp ne i8 %1242, 0
  %1246 = xor i1 %1245, true
  %1247 = or i1 %15, %1246
  br i1 %1247, label %1251, label %1248

1248:                                             ; preds = %1244
  %1249 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1250 = load double, double* %1249, align 8
  br label %1604

1251:                                             ; preds = %1244
  br i1 %1245, label %1545, label %1252

1252:                                             ; preds = %1251
  %1253 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 6
  %1254 = load i16, i16* %1253, align 8
  %1255 = icmp eq i16 %1254, 0
  %1256 = getelementptr inbounds i16, i16* %1239, i64 1
  %1257 = ptrtoint i16* %1256 to i64
  %1258 = icmp eq i16* %1256, %11
  br i1 %1258, label %1259, label %1264

1259:                                             ; preds = %1252
  br i1 %1241, label %1260, label %1535

1260:                                             ; preds = %1259
  br i1 %1143, label %1529, label %1261

1261:                                             ; preds = %1260
  %1262 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1263 = load double, double* %1262, align 8
  br label %1604

1264:                                             ; preds = %1252
  br i1 %1241, label %1265, label %1313

1265:                                             ; preds = %1264
  %1266 = load i16, i16* %1256, align 2
  %1267 = icmp eq i16 %1266, 48
  br i1 %1267, label %1268, label %1313

1268:                                             ; preds = %1265, %1307
  %1269 = phi i16* [ %1310, %1307 ], [ %1256, %1265 ]
  %1270 = phi i32 [ %1309, %1307 ], [ 0, %1265 ]
  %1271 = getelementptr inbounds i16, i16* %1269, i64 1
  %1272 = ptrtoint i16* %1271 to i64
  %1273 = icmp eq i16* %1271, %11
  br i1 %1255, label %1274, label %1275

1274:                                             ; preds = %1268
  br i1 %1273, label %1298, label %1307

1275:                                             ; preds = %1268
  br i1 %1273, label %1296, label %1276

1276:                                             ; preds = %1275
  %1277 = getelementptr inbounds i16, i16* %1269, i64 2
  %1278 = icmp eq i16* %1277, %11
  br i1 %1278, label %1307, label %1279

1279:                                             ; preds = %1276
  %1280 = load i16, i16* %1271, align 2
  %1281 = icmp eq i16 %1280, %1254
  br i1 %1281, label %1282, label %1292

1282:                                             ; preds = %1279
  %1283 = load i16, i16* %1277, align 2
  %1284 = zext i16 %1283 to i32
  %1285 = add nsw i32 %1284, -48
  %1286 = icmp ult i32 %1285, 10
  %1287 = icmp ult i16 %1283, 58
  %1288 = and i1 %1287, %1286
  %1289 = ptrtoint i16* %1277 to i64
  %1290 = select i1 %1288, i64 %1289, i64 %1272
  %1291 = select i1 %1288, i16* %1277, i16* %1271
  br label %1292

1292:                                             ; preds = %1282, %1279
  %1293 = phi i64 [ %1272, %1279 ], [ %1290, %1282 ]
  %1294 = phi i16* [ %1271, %1279 ], [ %1291, %1282 ]
  %1295 = icmp eq i16* %1294, %11
  br i1 %1295, label %1300, label %1307

1296:                                             ; preds = %1275
  %1297 = ptrtoint i16* %11 to i64
  br label %1300

1298:                                             ; preds = %1274
  %1299 = ptrtoint i16* %11 to i64
  br label %1300

1300:                                             ; preds = %1292, %1298, %1296
  %1301 = phi i64 [ %1297, %1296 ], [ %1299, %1298 ], [ %1293, %1292 ]
  %1302 = sub i64 %1301, %9
  %1303 = lshr exact i64 %1302, 1
  %1304 = trunc i64 %1303 to i32
  store i32 %1304, i32* %4, align 4
  %1305 = icmp eq i8 %88, 0
  %1306 = select i1 %1305, double 0.000000e+00, double -0.000000e+00
  br label %1604

1307:                                             ; preds = %1276, %1292, %1274
  %1308 = phi i64 [ %1272, %1274 ], [ %1293, %1292 ], [ %1272, %1276 ]
  %1309 = add nsw i32 %1270, -1
  %1310 = inttoptr i64 %1308 to i16*
  %1311 = load i16, i16* %1310, align 2
  %1312 = icmp eq i16 %1311, 48
  br i1 %1312, label %1268, label %1313

1313:                                             ; preds = %1307, %1265, %1264
  %1314 = phi i64 [ %1257, %1264 ], [ %1257, %1265 ], [ %1308, %1307 ]
  %1315 = phi i32 [ 0, %1264 ], [ 0, %1265 ], [ %1309, %1307 ]
  %1316 = inttoptr i64 %1314 to i16*
  %1317 = load i16, i16* %1316, align 2
  %1318 = add i16 %1317, -48
  %1319 = icmp ult i16 %1318, 10
  br i1 %1319, label %1320, label %1387

1320:                                             ; preds = %1313, %1349
  %1321 = phi i16 [ %1352, %1349 ], [ %1317, %1313 ]
  %1322 = phi i16* [ %1351, %1349 ], [ %1316, %1313 ]
  %1323 = phi i32 [ %1344, %1349 ], [ %1315, %1313 ]
  %1324 = phi i32 [ %1343, %1349 ], [ %1238, %1313 ]
  %1325 = phi i8 [ %1342, %1349 ], [ %1236, %1313 ]
  %1326 = phi i32 [ %1341, %1349 ], [ %1235, %1313 ]
  %1327 = icmp slt i32 %1324, 772
  br i1 %1327, label %1328, label %1335

1328:                                             ; preds = %1320
  %1329 = trunc i16 %1321 to i8
  %1330 = add nsw i32 %1326, 1
  %1331 = sext i32 %1326 to i64
  %1332 = getelementptr inbounds [782 x i8], [782 x i8]* %6, i64 0, i64 %1331
  store i8 %1329, i8* %1332, align 1
  %1333 = add nsw i32 %1324, 1
  %1334 = add nsw i32 %1323, -1
  br label %1340

1335:                                             ; preds = %1320
  %1336 = and i8 %1325, 1
  %1337 = icmp ne i16 %1321, 48
  %1338 = zext i1 %1337 to i8
  %1339 = or i8 %1336, %1338
  br label %1340

1340:                                             ; preds = %1335, %1328
  %1341 = phi i32 [ %1330, %1328 ], [ %1326, %1335 ]
  %1342 = phi i8 [ %1325, %1328 ], [ %1339, %1335 ]
  %1343 = phi i32 [ %1333, %1328 ], [ %1324, %1335 ]
  %1344 = phi i32 [ %1334, %1328 ], [ %1323, %1335 ]
  br i1 %1255, label %1345, label %1355

1345:                                             ; preds = %1340
  %1346 = getelementptr inbounds i16, i16* %1322, i64 1
  %1347 = ptrtoint i16* %1346 to i64
  %1348 = icmp eq i16* %1346, %11
  br i1 %1348, label %1515, label %1349

1349:                                             ; preds = %1345, %1383, %1365, %1367
  %1350 = phi i64 [ %1347, %1345 ], [ %1384, %1383 ], [ %1363, %1365 ], [ %1363, %1367 ]
  %1351 = inttoptr i64 %1350 to i16*
  %1352 = load i16, i16* %1351, align 2
  %1353 = add i16 %1352, -48
  %1354 = icmp ult i16 %1353, 10
  br i1 %1354, label %1320, label %1387

1355:                                             ; preds = %1340
  %1356 = load i16, i16* %1322, align 2
  %1357 = zext i16 %1356 to i32
  %1358 = add nsw i32 %1357, -48
  %1359 = icmp ult i32 %1358, 10
  %1360 = icmp ult i16 %1356, 58
  %1361 = and i1 %1360, %1359
  %1362 = getelementptr inbounds i16, i16* %1322, i64 1
  %1363 = ptrtoint i16* %1362 to i64
  %1364 = icmp eq i16* %1362, %11
  br i1 %1361, label %1366, label %1365

1365:                                             ; preds = %1355
  br i1 %1364, label %1517, label %1349

1366:                                             ; preds = %1355
  br i1 %1364, label %1519, label %1367

1367:                                             ; preds = %1366
  %1368 = getelementptr inbounds i16, i16* %1322, i64 2
  %1369 = icmp eq i16* %1368, %11
  br i1 %1369, label %1349, label %1370

1370:                                             ; preds = %1367
  %1371 = load i16, i16* %1362, align 2
  %1372 = icmp eq i16 %1371, %1254
  br i1 %1372, label %1373, label %1383

1373:                                             ; preds = %1370
  %1374 = load i16, i16* %1368, align 2
  %1375 = zext i16 %1374 to i32
  %1376 = add nsw i32 %1375, -48
  %1377 = icmp ult i32 %1376, 10
  %1378 = icmp ult i16 %1374, 58
  %1379 = and i1 %1378, %1377
  %1380 = ptrtoint i16* %1368 to i64
  %1381 = select i1 %1379, i64 %1380, i64 %1363
  %1382 = select i1 %1379, i16* %1368, i16* %1362
  br label %1383

1383:                                             ; preds = %1373, %1370
  %1384 = phi i64 [ %1363, %1370 ], [ %1381, %1373 ]
  %1385 = phi i16* [ %1362, %1370 ], [ %1382, %1373 ]
  %1386 = icmp eq i16* %1385, %11
  br i1 %1386, label %1529, label %1349

1387:                                             ; preds = %1349, %1313, %1232
  %1388 = phi i64 [ %1233, %1232 ], [ %1314, %1313 ], [ %1350, %1349 ]
  %1389 = phi i32 [ %1235, %1232 ], [ %1235, %1313 ], [ %1341, %1349 ]
  %1390 = phi i8 [ %1236, %1232 ], [ %1236, %1313 ], [ %1342, %1349 ]
  %1391 = phi i32 [ %1238, %1232 ], [ %1238, %1313 ], [ %1343, %1349 ]
  %1392 = phi i32 [ 0, %1232 ], [ %1315, %1313 ], [ %1344, %1349 ]
  %1393 = xor i1 %1143, true
  %1394 = or i32 %1392, %1391
  %1395 = icmp eq i32 %1394, 0
  %1396 = and i1 %1395, %1393
  br i1 %1396, label %1397, label %1400

1397:                                             ; preds = %1387
  %1398 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1399 = load double, double* %1398, align 8
  br label %1604

1400:                                             ; preds = %1387
  %1401 = inttoptr i64 %1388 to i16*
  %1402 = load i16, i16* %1401, align 2
  switch i16 %1402, label %1470 [
    i16 101, label %1403
    i16 69, label %1403
  ]

1403:                                             ; preds = %1400, %1400
  %1404 = icmp ne i8 %1242, 0
  %1405 = xor i1 %1404, true
  %1406 = or i1 %15, %1405
  br i1 %1406, label %1410, label %1407

1407:                                             ; preds = %1403
  %1408 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1409 = load double, double* %1408, align 8
  br label %1604

1410:                                             ; preds = %1403
  br i1 %1404, label %1535, label %1411

1411:                                             ; preds = %1410
  %1412 = getelementptr inbounds i16, i16* %1401, i64 1
  %1413 = icmp eq i16* %1412, %11
  br i1 %1413, label %1414, label %1418

1414:                                             ; preds = %1411
  br i1 %15, label %1529, label %1415

1415:                                             ; preds = %1414
  %1416 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1417 = load double, double* %1416, align 8
  br label %1604

1418:                                             ; preds = %1411
  %1419 = load i16, i16* %1412, align 2
  switch i16 %1419, label %1428 [
    i16 43, label %1420
    i16 45, label %1420
  ]

1420:                                             ; preds = %1418, %1418
  %1421 = zext i16 %1419 to i32
  %1422 = getelementptr inbounds i16, i16* %1401, i64 2
  %1423 = icmp eq i16* %1422, %11
  br i1 %1423, label %1424, label %1428

1424:                                             ; preds = %1420
  br i1 %15, label %1529, label %1425

1425:                                             ; preds = %1424
  %1426 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1427 = load double, double* %1426, align 8
  br label %1604

1428:                                             ; preds = %1418, %1420
  %1429 = phi i16* [ %1412, %1418 ], [ %1422, %1420 ]
  %1430 = phi i32 [ 43, %1418 ], [ %1421, %1420 ]
  %1431 = icmp eq i16* %1429, %11
  br i1 %1431, label %1436, label %1432

1432:                                             ; preds = %1428
  %1433 = load i16, i16* %1429, align 2
  %1434 = add i16 %1433, -48
  %1435 = icmp ugt i16 %1434, 9
  br i1 %1435, label %1436, label %1440

1436:                                             ; preds = %1432, %1428
  br i1 %15, label %1529, label %1437

1437:                                             ; preds = %1436
  %1438 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1439 = load double, double* %1438, align 8
  br label %1604

1440:                                             ; preds = %1432, %1458
  %1441 = phi i16 [ %1459, %1458 ], [ %1433, %1432 ]
  %1442 = phi i16* [ %1456, %1458 ], [ %1429, %1432 ]
  %1443 = phi i32 [ %1455, %1458 ], [ 0, %1432 ]
  %1444 = zext i16 %1441 to i32
  %1445 = add nsw i32 %1444, -48
  %1446 = icmp sgt i32 %1443, 107374181
  br i1 %1446, label %1447, label %1451

1447:                                             ; preds = %1440
  %1448 = icmp eq i32 %1443, 107374182
  %1449 = icmp slt i32 %1445, 4
  %1450 = and i1 %1448, %1449
  br i1 %1450, label %1451, label %1454

1451:                                             ; preds = %1447, %1440
  %1452 = mul nsw i32 %1443, 10
  %1453 = add nsw i32 %1445, %1452
  br label %1454

1454:                                             ; preds = %1447, %1451
  %1455 = phi i32 [ %1453, %1451 ], [ 1073741823, %1447 ]
  %1456 = getelementptr inbounds i16, i16* %1442, i64 1
  %1457 = icmp eq i16* %1456, %11
  br i1 %1457, label %1462, label %1458

1458:                                             ; preds = %1454
  %1459 = load i16, i16* %1456, align 2
  %1460 = add i16 %1459, -48
  %1461 = icmp ult i16 %1460, 10
  br i1 %1461, label %1440, label %1462

1462:                                             ; preds = %1458, %1454
  %1463 = phi i16* [ %1456, %1458 ], [ %11, %1454 ]
  %1464 = ptrtoint i16* %1463 to i64
  %1465 = and i32 %1430, 255
  %1466 = icmp eq i32 %1465, 45
  %1467 = sub nsw i32 0, %1455
  %1468 = select i1 %1466, i32 %1467, i32 %1455
  %1469 = add nsw i32 %1468, %1392
  br label %1470

1470:                                             ; preds = %1462, %1400
  %1471 = phi i16* [ %1463, %1462 ], [ %1401, %1400 ]
  %1472 = phi i64 [ %1464, %1462 ], [ %1388, %1400 ]
  %1473 = phi i32 [ %1469, %1462 ], [ %1392, %1400 ]
  %1474 = and i32 %13, 20
  %1475 = icmp ne i32 %1474, 0
  %1476 = icmp eq i16* %11, %1471
  %1477 = or i1 %1475, %1476
  br i1 %1477, label %1481, label %1478

1478:                                             ; preds = %1470
  %1479 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1480 = load double, double* %1479, align 8
  br label %1604

1481:                                             ; preds = %1470
  %1482 = or i1 %15, %1476
  br i1 %1482, label %1496, label %1483

1483:                                             ; preds = %1481, %1488
  %1484 = phi i16* [ %1489, %1488 ], [ %1471, %1481 ]
  %1485 = load i16, i16* %1484, align 2
  %1486 = zext i16 %1485 to i32
  %1487 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %1486) #5
  br i1 %1487, label %1488, label %1491

1488:                                             ; preds = %1483
  %1489 = getelementptr inbounds i16, i16* %1484, i64 1
  %1490 = icmp eq i16* %1489, %11
  br i1 %1490, label %1494, label %1483

1491:                                             ; preds = %1483
  %1492 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1493 = load double, double* %1492, align 8
  br label %1604

1494:                                             ; preds = %1488
  %1495 = ptrtoint i16* %11 to i64
  br label %1496

1496:                                             ; preds = %1481, %1494
  %1497 = phi i64 [ %1472, %1481 ], [ %1495, %1494 ]
  br i1 %19, label %1498, label %1535

1498:                                             ; preds = %1496
  %1499 = inttoptr i64 %1497 to i16*
  %1500 = icmp eq i16* %11, %1499
  br i1 %1500, label %1535, label %1501

1501:                                             ; preds = %1498
  %1502 = load i16, i16* %1499, align 2
  %1503 = zext i16 %1502 to i32
  %1504 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %1503) #5
  br i1 %1504, label %1509, label %1535

1505:                                             ; preds = %1509
  %1506 = load i16, i16* %1511, align 2
  %1507 = zext i16 %1506 to i32
  %1508 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %1507) #5
  br i1 %1508, label %1509, label %1527

1509:                                             ; preds = %1501, %1505
  %1510 = phi i16* [ %1511, %1505 ], [ %1499, %1501 ]
  %1511 = getelementptr inbounds i16, i16* %1510, i64 1
  %1512 = icmp eq i16* %1511, %11
  br i1 %1512, label %1513, label %1505

1513:                                             ; preds = %1509
  %1514 = ptrtoint i16* %11 to i64
  br label %1535

1515:                                             ; preds = %1345
  %1516 = ptrtoint i16* %11 to i64
  br label %1529

1517:                                             ; preds = %1365
  %1518 = ptrtoint i16* %11 to i64
  br label %1529

1519:                                             ; preds = %1366
  %1520 = ptrtoint i16* %11 to i64
  br label %1529

1521:                                             ; preds = %1188
  %1522 = ptrtoint i16* %11 to i64
  br label %1535

1523:                                             ; preds = %1208
  %1524 = ptrtoint i16* %11 to i64
  br label %1535

1525:                                             ; preds = %1209
  %1526 = ptrtoint i16* %11 to i64
  br label %1535

1527:                                             ; preds = %1505
  %1528 = ptrtoint i16* %1511 to i64
  br label %1535

1529:                                             ; preds = %1383, %1260, %1414, %1424, %1436, %1515, %1517, %1519
  %1530 = phi i64 [ %1520, %1519 ], [ %1518, %1517 ], [ %1516, %1515 ], [ %1388, %1436 ], [ %1388, %1424 ], [ %1388, %1414 ], [ %1257, %1260 ], [ %1384, %1383 ]
  %1531 = phi i32 [ %1341, %1519 ], [ %1341, %1517 ], [ %1341, %1515 ], [ %1389, %1436 ], [ %1389, %1424 ], [ %1389, %1414 ], [ %1235, %1260 ], [ %1341, %1383 ]
  %1532 = phi i8 [ %1342, %1519 ], [ %1342, %1517 ], [ %1342, %1515 ], [ %1390, %1436 ], [ %1390, %1424 ], [ %1390, %1414 ], [ %1236, %1260 ], [ %1342, %1383 ]
  %1533 = phi i32 [ %1344, %1519 ], [ %1344, %1517 ], [ %1344, %1515 ], [ %1392, %1436 ], [ %1392, %1424 ], [ %1392, %1414 ], [ 0, %1260 ], [ %1344, %1383 ]
  %1534 = add nsw i32 %1533, %1237
  br label %1560

1535:                                             ; preds = %1226, %1527, %1521, %1523, %1525, %1501, %1513, %1498, %1496, %1410, %1259
  %1536 = phi i64 [ %1257, %1259 ], [ %1497, %1496 ], [ %1388, %1410 ], [ %1497, %1498 ], [ %1514, %1513 ], [ %1497, %1501 ], [ %1522, %1521 ], [ %1524, %1523 ], [ %1526, %1525 ], [ %1528, %1527 ], [ %1227, %1226 ]
  %1537 = phi i8 [ %1234, %1259 ], [ %1242, %1496 ], [ %1242, %1410 ], [ %1242, %1498 ], [ %1242, %1513 ], [ %1242, %1501 ], [ %1185, %1521 ], [ %1185, %1523 ], [ %1185, %1525 ], [ %1242, %1527 ], [ %1185, %1226 ]
  %1538 = phi i32 [ %1235, %1259 ], [ %1389, %1496 ], [ %1389, %1410 ], [ %1389, %1498 ], [ %1389, %1513 ], [ %1389, %1501 ], [ %1175, %1521 ], [ %1175, %1523 ], [ %1175, %1525 ], [ %1389, %1527 ], [ %1175, %1226 ]
  %1539 = phi i8 [ %1236, %1259 ], [ %1390, %1496 ], [ %1390, %1410 ], [ %1390, %1498 ], [ %1390, %1513 ], [ %1390, %1501 ], [ %1176, %1521 ], [ %1176, %1523 ], [ %1176, %1525 ], [ %1390, %1527 ], [ %1176, %1226 ]
  %1540 = phi i32 [ %1237, %1259 ], [ %1237, %1496 ], [ %1237, %1410 ], [ %1237, %1498 ], [ %1237, %1513 ], [ %1237, %1501 ], [ %1177, %1521 ], [ %1177, %1523 ], [ %1177, %1525 ], [ %1237, %1527 ], [ %1177, %1226 ]
  %1541 = phi i32 [ 0, %1259 ], [ %1473, %1496 ], [ %1392, %1410 ], [ %1473, %1498 ], [ %1473, %1513 ], [ %1473, %1501 ], [ 0, %1521 ], [ 0, %1523 ], [ 0, %1525 ], [ %1473, %1527 ], [ 0, %1226 ]
  %1542 = add nsw i32 %1541, %1540
  %1543 = and i8 %1537, 1
  %1544 = icmp eq i8 %1543, 0
  br i1 %1544, label %1560, label %1545

1545:                                             ; preds = %1251, %1535
  %1546 = phi i32 [ %1538, %1535 ], [ %1235, %1251 ]
  %1547 = phi i64 [ %1536, %1535 ], [ %1233, %1251 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #5
  store i8 -86, i8* %7, align 1
  %1548 = bitcast i8** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1548) #5
  store i8* %1147, i8** %8, align 8
  %1549 = sext i32 %1546 to i64
  %1550 = getelementptr inbounds [782 x i8], [782 x i8]* %6, i64 0, i64 %1549
  %1551 = icmp ne i8 %88, 0
  %1552 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 6
  %1553 = load i16, i16* %1552, align 8
  %1554 = getelementptr inbounds %"class.icu_69::double_conversion::StringToDoubleConverter", %"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1555 = load double, double* %1554, align 8
  %1556 = call fastcc double @_ZN6icu_6917double_conversionL17RadixStringToIeeeILi3EPcEEdPT0_S3_btbbdbPb(i8** nonnull %8, i8* %1550, i1 zeroext %1551, i16 zeroext %1553, i1 zeroext %15, double %1555, i1 zeroext %3, i8* nonnull %7)
  %1557 = sub i64 %1547, %9
  %1558 = lshr exact i64 %1557, 1
  %1559 = trunc i64 %1558 to i32
  store i32 %1559, i32* %4, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1548) #5
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #5
  br label %1604

1560:                                             ; preds = %1529, %1535
  %1561 = phi i32 [ %1534, %1529 ], [ %1542, %1535 ]
  %1562 = phi i8 [ %1532, %1529 ], [ %1539, %1535 ]
  %1563 = phi i32 [ %1531, %1529 ], [ %1538, %1535 ]
  %1564 = phi i64 [ %1530, %1529 ], [ %1536, %1535 ]
  %1565 = and i8 %1562, 1
  %1566 = icmp eq i8 %1565, 0
  br i1 %1566, label %1572, label %1567

1567:                                             ; preds = %1560
  %1568 = add nsw i32 %1563, 1
  %1569 = sext i32 %1563 to i64
  %1570 = getelementptr inbounds [782 x i8], [782 x i8]* %6, i64 0, i64 %1569
  store i8 49, i8* %1570, align 1
  %1571 = add nsw i32 %1561, -1
  br label %1572

1572:                                             ; preds = %1560, %1567
  %1573 = phi i32 [ %1568, %1567 ], [ %1563, %1560 ]
  %1574 = phi i32 [ %1571, %1567 ], [ %1561, %1560 ]
  %1575 = sext i32 %1573 to i64
  %1576 = getelementptr inbounds [782 x i8], [782 x i8]* %6, i64 0, i64 %1575
  store i8 0, i8* %1576, align 1
  br label %1577

1577:                                             ; preds = %1581, %1572
  %1578 = phi i64 [ %1579, %1581 ], [ %1575, %1572 ]
  %1579 = add nsw i64 %1578, -1
  %1580 = icmp sgt i64 %1578, 0
  br i1 %1580, label %1581, label %1587

1581:                                             ; preds = %1577
  %1582 = getelementptr inbounds [782 x i8], [782 x i8]* %6, i64 0, i64 %1579
  %1583 = load i8, i8* %1582, align 1
  %1584 = icmp eq i8 %1583, 48
  br i1 %1584, label %1577, label %1585

1585:                                             ; preds = %1581
  %1586 = trunc i64 %1578 to i32
  br label %1587

1587:                                             ; preds = %1577, %1585
  %1588 = phi i32 [ %1586, %1585 ], [ 0, %1577 ]
  %1589 = sub nsw i32 %1573, %1588
  %1590 = add nsw i32 %1589, %1574
  br i1 %3, label %1591, label %1593

1591:                                             ; preds = %1587
  %1592 = call double @_ZN6icu_6917double_conversion13StrtodTrimmedENS0_6VectorIKcEEi(i8* nonnull %1147, i32 %1588, i32 %1590) #5
  br label %1596

1593:                                             ; preds = %1587
  %1594 = call float @_ZN6icu_6917double_conversion13StrtofTrimmedENS0_6VectorIKcEEi(i8* nonnull %1147, i32 %1588, i32 %1590) #5
  %1595 = fpext float %1594 to double
  br label %1596

1596:                                             ; preds = %1593, %1591
  %1597 = phi double [ %1592, %1591 ], [ %1595, %1593 ]
  %1598 = sub i64 %1564, %9
  %1599 = lshr exact i64 %1598, 1
  %1600 = trunc i64 %1599 to i32
  store i32 %1600, i32* %4, align 4
  %1601 = icmp eq i8 %88, 0
  %1602 = fsub double -0.000000e+00, %1597
  %1603 = select i1 %1601, double %1597, double %1602
  br label %1604

1604:                                             ; preds = %1437, %1425, %1415, %1596, %1545, %1491, %1478, %1407, %1397, %1300, %1261, %1248
  %1605 = phi double [ %1556, %1545 ], [ %1603, %1596 ], [ %1263, %1261 ], [ %1306, %1300 ], [ %1399, %1397 ], [ %1493, %1491 ], [ %1480, %1478 ], [ %1409, %1407 ], [ %1250, %1248 ], [ %1439, %1437 ], [ %1427, %1425 ], [ %1417, %1415 ]
  call void @llvm.lifetime.end.p0i8(i64 782, i8* nonnull %1147) #5
  br label %1606

1606:                                             ; preds = %602, %737, %596, %1083, %75, %83, %113, %121, %134, %137, %172, %180, %193, %196, %512, %1604, %1127, %256, %236, %53, %43, %25
  %1607 = phi double [ %27, %25 ], [ %55, %53 ], [ %45, %43 ], [ %144, %137 ], [ %136, %134 ], [ %123, %121 ], [ %115, %113 ], [ %203, %196 ], [ %195, %193 ], [ %182, %180 ], [ %174, %172 ], [ %242, %236 ], [ %258, %256 ], [ %1133, %1127 ], [ %1605, %1604 ], [ %514, %512 ], [ %85, %83 ], [ %77, %75 ], [ %1063, %1083 ], [ %524, %596 ], [ %524, %737 ], [ %524, %602 ]
  ret double %1607
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK6icu_6917double_conversion23StringToDoubleConverter13StringToFloatEPKciPi(%"class.icu_69::double_conversion::StringToDoubleConverter"*, i8*, i32, i32*) local_unnamed_addr #0 align 2 {
  %5 = tail call double @_ZNK6icu_6917double_conversion23StringToDoubleConverter12StringToIeeeIPKcEEdT_ibPi(%"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i8* %1, i32 %2, i1 zeroext false, i32* %3)
  %6 = fptrunc double %5 to float
  ret float %6
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK6icu_6917double_conversion23StringToDoubleConverter13StringToFloatEPKtiPi(%"class.icu_69::double_conversion::StringToDoubleConverter"*, i16*, i32, i32*) local_unnamed_addr #0 align 2 {
  %5 = tail call double @_ZNK6icu_6917double_conversion23StringToDoubleConverter12StringToIeeeIPKtEEdT_ibPi(%"class.icu_69::double_conversion::StringToDoubleConverter"* %0, i16* %1, i32 %2, i1 zeroext false, i32* %3)
  %6 = fptrunc double %5 to float
  ret float %6
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc double @_ZN6icu_6917double_conversionL17RadixStringToIeeeILi3EPcEEdPT0_S3_btbbdbPb(i8**, i8*, i1 zeroext, i16 zeroext, i1 zeroext, double, i1 zeroext, i8* nocapture) unnamed_addr #0 {
  store i8 1, i8* %7, align 1
  %9 = load i8*, i8** %0, align 8
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, 48
  br i1 %11, label %12, label %15

12:                                               ; preds = %8
  %13 = zext i16 %3 to i32
  %14 = icmp eq i16 %3, 0
  br label %27

15:                                               ; preds = %51, %8
  %16 = phi i8 [ %10, %8 ], [ %53, %51 ]
  %17 = phi i8* [ %9, %8 ], [ %52, %51 ]
  %18 = sext i8 %16 to i32
  %19 = add nsw i32 %18, -48
  %20 = icmp ult i32 %19, 10
  %21 = icmp slt i32 %19, 8
  %22 = and i1 %20, %21
  br i1 %22, label %23, label %57

23:                                               ; preds = %15
  %24 = select i1 %6, i64 53, i64 24
  %25 = zext i16 %3 to i32
  %26 = icmp eq i16 %3, 0
  br label %74

27:                                               ; preds = %12, %51
  %28 = phi i8* [ %9, %12 ], [ %52, %51 ]
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %0, align 8
  %30 = icmp eq i8* %29, %1
  br i1 %14, label %31, label %32

31:                                               ; preds = %27
  br i1 %30, label %55, label %51

32:                                               ; preds = %27
  br i1 %30, label %55, label %33

33:                                               ; preds = %32
  %34 = getelementptr inbounds i8, i8* %28, i64 2
  %35 = icmp eq i8* %34, %1
  br i1 %35, label %51, label %36

36:                                               ; preds = %33
  %37 = load i8, i8* %29, align 1
  %38 = sext i8 %37 to i32
  %39 = icmp eq i32 %38, %13
  br i1 %39, label %40, label %48

40:                                               ; preds = %36
  %41 = load i8, i8* %34, align 1
  %42 = sext i8 %41 to i32
  %43 = add nsw i32 %42, -48
  %44 = icmp ult i32 %43, 10
  %45 = icmp slt i8 %41, 56
  %46 = and i1 %45, %44
  br i1 %46, label %47, label %48

47:                                               ; preds = %40
  store i8* %34, i8** %0, align 8
  br label %48

48:                                               ; preds = %47, %40, %36
  %49 = phi i8* [ %29, %40 ], [ %34, %47 ], [ %29, %36 ]
  %50 = icmp eq i8* %49, %1
  br i1 %50, label %55, label %51

51:                                               ; preds = %31, %48, %33
  %52 = phi i8* [ %29, %31 ], [ %49, %48 ], [ %29, %33 ]
  %53 = load i8, i8* %52, align 1
  %54 = icmp eq i8 %53, 48
  br i1 %54, label %27, label %15

55:                                               ; preds = %32, %48, %31
  store i8 0, i8* %7, align 1
  %56 = select i1 %2, double -0.000000e+00, double 0.000000e+00
  br label %288

57:                                               ; preds = %211, %15
  %58 = phi i8 [ %16, %15 ], [ %213, %211 ]
  %59 = phi i64 [ 0, %15 ], [ %81, %211 ]
  %60 = phi i8* [ %17, %15 ], [ %212, %211 ]
  %61 = icmp eq i8* %60, %1
  %62 = or i1 %61, %4
  br i1 %62, label %219, label %63

63:                                               ; preds = %57
  %64 = sext i8 %58 to i32
  %65 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %64) #5
  br i1 %65, label %66, label %288

66:                                               ; preds = %63, %70
  %67 = phi i8* [ %68, %70 ], [ %60, %63 ]
  %68 = getelementptr inbounds i8, i8* %67, i64 1
  store i8* %68, i8** %0, align 8
  %69 = icmp eq i8* %68, %1
  br i1 %69, label %219, label %70

70:                                               ; preds = %66
  %71 = load i8, i8* %68, align 1
  %72 = sext i8 %71 to i32
  %73 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %72) #5
  br i1 %73, label %66, label %288

74:                                               ; preds = %23, %211
  %75 = phi i32 [ %19, %23 ], [ %215, %211 ]
  %76 = phi i8 [ %16, %23 ], [ %213, %211 ]
  %77 = phi i8* [ %17, %23 ], [ %212, %211 ]
  %78 = phi i64 [ 0, %23 ], [ %81, %211 ]
  %79 = shl nsw i64 %78, 3
  %80 = sext i32 %75 to i64
  %81 = add nsw i64 %79, %80
  %82 = ashr i64 %81, %24
  %83 = trunc i64 %82 to i32
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %181, label %85

85:                                               ; preds = %74
  %86 = trunc i64 %82 to i32
  %87 = icmp sgt i32 %86, 1
  br i1 %87, label %88, label %94

88:                                               ; preds = %85, %88
  %89 = phi i32 [ %91, %88 ], [ 1, %85 ]
  %90 = phi i32 [ %92, %88 ], [ %86, %85 ]
  %91 = add nuw nsw i32 %89, 1
  %92 = lshr i32 %90, 1
  %93 = icmp ugt i32 %90, 3
  br i1 %93, label %88, label %94

94:                                               ; preds = %88, %85
  %95 = phi i32 [ 1, %85 ], [ %91, %88 ]
  %96 = shl nsw i32 -1, %95
  %97 = xor i32 %96, -1
  %98 = trunc i64 %81 to i32
  %99 = and i32 %97, %98
  %100 = zext i32 %95 to i64
  %101 = ashr i64 %81, %100
  br label %102

102:                                              ; preds = %149, %94
  %103 = phi i8 [ %76, %94 ], [ %143, %149 ]
  %104 = phi i8* [ %77, %94 ], [ %142, %149 ]
  %105 = phi i32 [ %95, %94 ], [ %154, %149 ]
  %106 = phi i8 [ 1, %94 ], [ %153, %149 ]
  br i1 %26, label %107, label %110

107:                                              ; preds = %102
  %108 = getelementptr inbounds i8, i8* %104, i64 1
  store i8* %108, i8** %0, align 8
  %109 = icmp eq i8* %108, %1
  br i1 %109, label %155, label %141

110:                                              ; preds = %102
  %111 = sext i8 %103 to i32
  %112 = add nsw i32 %111, -48
  %113 = icmp ugt i32 %112, 9
  %114 = icmp sgt i8 %103, 55
  %115 = getelementptr inbounds i8, i8* %104, i64 1
  store i8* %115, i8** %0, align 8
  %116 = icmp eq i8* %115, %1
  %117 = or i1 %114, %113
  %118 = or i1 %116, %117
  br i1 %118, label %137, label %119

119:                                              ; preds = %110
  %120 = getelementptr inbounds i8, i8* %104, i64 2
  %121 = icmp eq i8* %120, %1
  br i1 %121, label %141, label %122

122:                                              ; preds = %119
  %123 = load i8, i8* %115, align 1
  %124 = sext i8 %123 to i32
  %125 = icmp eq i32 %124, %25
  br i1 %125, label %126, label %134

126:                                              ; preds = %122
  %127 = load i8, i8* %120, align 1
  %128 = sext i8 %127 to i32
  %129 = add nsw i32 %128, -48
  %130 = icmp ult i32 %129, 10
  %131 = icmp slt i8 %127, 56
  %132 = and i1 %131, %130
  br i1 %132, label %133, label %134

133:                                              ; preds = %126
  store i8* %120, i8** %0, align 8
  br label %134

134:                                              ; preds = %133, %126, %122
  %135 = phi i8* [ %115, %126 ], [ %120, %133 ], [ %115, %122 ]
  %136 = icmp eq i8* %135, %1
  br i1 %136, label %155, label %141

137:                                              ; preds = %110
  %138 = or i1 %114, %113
  %139 = xor i1 %138, true
  %140 = or i1 %116, %139
  br i1 %140, label %155, label %141

141:                                              ; preds = %119, %134, %107, %137
  %142 = phi i8* [ %115, %119 ], [ %135, %134 ], [ %108, %107 ], [ %115, %137 ]
  %143 = load i8, i8* %142, align 1
  %144 = sext i8 %143 to i32
  %145 = add nsw i32 %144, -48
  %146 = icmp ult i32 %145, 10
  %147 = icmp slt i8 %143, 56
  %148 = and i1 %147, %146
  br i1 %148, label %149, label %155

149:                                              ; preds = %141
  %150 = icmp ne i8 %106, 0
  %151 = icmp eq i8 %143, 48
  %152 = and i1 %150, %151
  %153 = zext i1 %152 to i8
  %154 = add nuw nsw i32 %105, 3
  br label %102

155:                                              ; preds = %141, %134, %107, %137
  %156 = phi i8* [ %142, %141 ], [ %1, %134 ], [ %1, %107 ], [ %115, %137 ]
  %157 = icmp eq i8* %156, %1
  %158 = or i1 %157, %4
  br i1 %158, label %167, label %159

159:                                              ; preds = %155, %164
  %160 = phi i8* [ %165, %164 ], [ %156, %155 ]
  %161 = load i8, i8* %160, align 1
  %162 = sext i8 %161 to i32
  %163 = tail call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32 %162) #5
  br i1 %163, label %164, label %288

164:                                              ; preds = %159
  %165 = getelementptr inbounds i8, i8* %160, i64 1
  store i8* %165, i8** %0, align 8
  %166 = icmp eq i8* %165, %1
  br i1 %166, label %167, label %159

167:                                              ; preds = %164, %155
  %168 = add nsw i32 %95, -1
  %169 = shl i32 1, %168
  %170 = icmp sgt i32 %99, %169
  br i1 %170, label %171, label %173

171:                                              ; preds = %167
  %172 = add nsw i64 %101, 1
  br label %222

173:                                              ; preds = %167
  %174 = icmp eq i32 %99, %169
  br i1 %174, label %175, label %222

175:                                              ; preds = %173
  %176 = and i64 %101, 1
  %177 = xor i8 %106, 1
  %178 = zext i8 %177 to i64
  %179 = or i64 %176, %178
  %180 = add nsw i64 %179, %101
  br label %222

181:                                              ; preds = %74
  br i1 %26, label %182, label %185

182:                                              ; preds = %181
  %183 = getelementptr inbounds i8, i8* %77, i64 1
  store i8* %183, i8** %0, align 8
  %184 = icmp eq i8* %183, %1
  br i1 %184, label %219, label %211

185:                                              ; preds = %181
  %186 = icmp sgt i8 %76, 55
  %187 = getelementptr inbounds i8, i8* %77, i64 1
  store i8* %187, i8** %0, align 8
  %188 = icmp eq i8* %187, %1
  %189 = or i1 %188, %186
  br i1 %189, label %208, label %190

190:                                              ; preds = %185
  %191 = getelementptr inbounds i8, i8* %77, i64 2
  %192 = icmp eq i8* %191, %1
  br i1 %192, label %211, label %193

193:                                              ; preds = %190
  %194 = load i8, i8* %187, align 1
  %195 = sext i8 %194 to i32
  %196 = icmp eq i32 %195, %25
  br i1 %196, label %197, label %205

197:                                              ; preds = %193
  %198 = load i8, i8* %191, align 1
  %199 = sext i8 %198 to i32
  %200 = add nsw i32 %199, -48
  %201 = icmp ult i32 %200, 10
  %202 = icmp slt i8 %198, 56
  %203 = and i1 %202, %201
  br i1 %203, label %204, label %205

204:                                              ; preds = %197
  store i8* %191, i8** %0, align 8
  br label %205

205:                                              ; preds = %204, %197, %193
  %206 = phi i8* [ %187, %197 ], [ %191, %204 ], [ %187, %193 ]
  %207 = icmp eq i8* %206, %1
  br i1 %207, label %219, label %211

208:                                              ; preds = %185
  %209 = xor i1 %186, true
  %210 = or i1 %188, %209
  br i1 %210, label %219, label %211

211:                                              ; preds = %190, %208, %182, %205
  %212 = phi i8* [ %187, %190 ], [ %187, %208 ], [ %183, %182 ], [ %206, %205 ]
  %213 = load i8, i8* %212, align 1
  %214 = sext i8 %213 to i32
  %215 = add nsw i32 %214, -48
  %216 = icmp ult i32 %215, 10
  %217 = icmp slt i32 %215, 8
  %218 = and i1 %216, %217
  br i1 %218, label %74, label %57

219:                                              ; preds = %205, %182, %208, %66, %57
  %220 = phi i64 [ %59, %57 ], [ %59, %66 ], [ %81, %208 ], [ %81, %182 ], [ %81, %205 ]
  store i8 0, i8* %7, align 1
  %221 = icmp eq i64 %220, 0
  br label %234

222:                                              ; preds = %171, %173, %175
  %223 = phi i64 [ %172, %171 ], [ %101, %173 ], [ %180, %175 ]
  %224 = shl i64 1, %24
  %225 = and i64 %223, %224
  %226 = icmp ne i64 %225, 0
  %227 = zext i1 %226 to i32
  %228 = add nuw nsw i32 %105, %227
  %229 = zext i1 %226 to i64
  %230 = ashr i64 %223, %229
  store i8 0, i8* %7, align 1
  %231 = icmp eq i32 %228, 0
  %232 = icmp eq i64 %230, 0
  %233 = or i1 %231, %232
  br i1 %233, label %234, label %243

234:                                              ; preds = %219, %222
  %235 = phi i1 [ %221, %219 ], [ %232, %222 ]
  %236 = phi i64 [ %220, %219 ], [ %230, %222 ]
  br i1 %2, label %237, label %240

237:                                              ; preds = %234
  br i1 %235, label %288, label %238

238:                                              ; preds = %237
  %239 = sub nsw i64 0, %236
  br label %240

240:                                              ; preds = %238, %234
  %241 = phi i64 [ %239, %238 ], [ %236, %234 ]
  %242 = sitofp i64 %241 to double
  br label %288

243:                                              ; preds = %222
  %244 = icmp ugt i64 %230, 9007199254740991
  br i1 %244, label %245, label %251

245:                                              ; preds = %243, %245
  %246 = phi i32 [ %249, %245 ], [ %228, %243 ]
  %247 = phi i64 [ %248, %245 ], [ %230, %243 ]
  %248 = lshr i64 %247, 1
  %249 = add nsw i32 %246, 1
  %250 = icmp ugt i64 %247, 18014398509481983
  br i1 %250, label %245, label %251

251:                                              ; preds = %245, %243
  %252 = phi i64 [ %230, %243 ], [ %248, %245 ]
  %253 = phi i32 [ %228, %243 ], [ %249, %245 ]
  %254 = icmp sgt i32 %253, 971
  br i1 %254, label %284, label %255

255:                                              ; preds = %251
  %256 = icmp slt i32 %253, -1074
  br i1 %256, label %284, label %257

257:                                              ; preds = %255
  %258 = icmp ne i32 %253, -1074
  %259 = and i64 %252, 4503599627370496
  %260 = icmp eq i64 %259, 0
  %261 = and i1 %258, %260
  br i1 %261, label %262, label %271

262:                                              ; preds = %257, %262
  %263 = phi i32 [ %266, %262 ], [ %253, %257 ]
  %264 = phi i64 [ %265, %262 ], [ %252, %257 ]
  %265 = shl i64 %264, 1
  %266 = add nsw i32 %263, -1
  %267 = icmp sgt i32 %266, -1074
  %268 = and i64 %264, 2251799813685248
  %269 = icmp eq i64 %268, 0
  %270 = and i1 %267, %269
  br i1 %270, label %262, label %271

271:                                              ; preds = %262, %257
  %272 = phi i64 [ %252, %257 ], [ %265, %262 ]
  %273 = phi i32 [ %253, %257 ], [ %266, %262 ]
  %274 = phi i1 [ %260, %257 ], [ %269, %262 ]
  %275 = icmp eq i32 %273, -1074
  %276 = and i1 %275, %274
  %277 = add nsw i32 %273, 1075
  %278 = zext i32 %277 to i64
  %279 = shl i64 %278, 52
  %280 = select i1 %276, i64 0, i64 %279
  %281 = and i64 %272, 4503599627370495
  %282 = or i64 %280, %281
  %283 = bitcast i64 %282 to double
  br label %284

284:                                              ; preds = %251, %255, %271
  %285 = phi double [ %283, %271 ], [ 0x7FF0000000000000, %251 ], [ 0.000000e+00, %255 ]
  %286 = fsub double -0.000000e+00, %285
  %287 = select i1 %2, double %286, double %285
  br label %288

288:                                              ; preds = %159, %70, %63, %237, %284, %240, %55
  %289 = phi double [ %56, %55 ], [ %242, %240 ], [ %287, %284 ], [ -0.000000e+00, %237 ], [ %5, %63 ], [ %5, %70 ], [ %5, %159 ]
  ret double %289
}

declare double @_ZN6icu_6917double_conversion13StrtodTrimmedENS0_6VectorIKcEEi(i8*, i32, i32) local_unnamed_addr #2

declare float @_ZN6icu_6917double_conversion13StrtofTrimmedENS0_6VectorIKcEEi(i8*, i32, i32) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal fastcc zeroext i1 @_ZN6icu_6917double_conversionL12isWhitespaceEi(i32) unnamed_addr #3 {
  %2 = icmp slt i32 %0, 128
  br i1 %2, label %4, label %3

3:                                                ; preds = %1
  switch i32 %0, label %14 [
    i32 160, label %12
    i32 8232, label %12
    i32 8233, label %12
    i32 5760, label %12
    i32 6158, label %12
    i32 8192, label %12
    i32 8193, label %12
    i32 8194, label %12
    i32 8195, label %12
    i32 8196, label %12
    i32 8197, label %12
    i32 8198, label %12
    i32 8199, label %12
    i32 8200, label %12
    i32 8201, label %12
    i32 8202, label %12
    i32 8239, label %12
    i32 8287, label %12
    i32 12288, label %12
    i32 65279, label %12
  ]

4:                                                ; preds = %1
  %5 = add i32 %0, -9
  %6 = icmp ult i32 %5, 24
  br i1 %6, label %7, label %12

7:                                                ; preds = %4
  %8 = trunc i32 %5 to i24
  %9 = lshr i24 -8388577, %8
  %10 = and i24 %9, 1
  %11 = icmp ne i24 %10, 0
  ret i1 %11

12:                                               ; preds = %4, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %14
  %13 = phi i1 [ true, %3 ], [ false, %14 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ false, %4 ]
  ret i1 %13

14:                                               ; preds = %3
  br label %12
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
