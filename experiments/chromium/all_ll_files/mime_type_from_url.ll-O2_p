; ModuleID = '../../third_party/blink/renderer/platform/network/mime/mime_type_from_url.cc'
source_filename = "../../third_party/blink/renderer/platform/network/mime/mime_type_from_url.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }

@.str = private unnamed_addr constant [11 x i8] c"text/plain\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink19MimeTypeFromDataURLERKN3WTF6StringE(%"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 {
  %2 = alloca %"class.WTF::String", align 8
  %3 = alloca %"class.WTF::String", align 8
  %4 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %104, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %10, 0
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 1
  br i1 %11, label %25, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %45, label %17

17:                                               ; preds = %13
  %18 = bitcast %"class.WTF::StringImpl"* %12 to i8*
  %19 = zext i32 %15 to i64
  %20 = tail call i8* @memchr(i8* %18, i32 59, i64 %19) #4
  %21 = icmp eq i8* %20, null
  %22 = ptrtoint i8* %20 to i64
  %23 = ptrtoint %"class.WTF::StringImpl"* %12 to i64
  %24 = sub i64 %22, %23
  br i1 %21, label %45, label %40

25:                                               ; preds = %7
  %26 = bitcast %"class.WTF::StringImpl"* %12 to i16*
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %45, label %30

30:                                               ; preds = %25
  %31 = zext i32 %28 to i64
  br label %32

32:                                               ; preds = %30, %37
  %33 = phi i64 [ %38, %37 ], [ 0, %30 ]
  %34 = getelementptr inbounds i16, i16* %26, i64 %33
  %35 = load i16, i16* %34, align 2
  %36 = icmp eq i16 %35, 59
  br i1 %36, label %40, label %37

37:                                               ; preds = %32
  %38 = add nuw nsw i64 %33, 1
  %39 = icmp eq i64 %38, %31
  br i1 %39, label %45, label %32

40:                                               ; preds = %32, %17
  %41 = phi i32 [ %15, %17 ], [ %28, %32 ]
  %42 = phi i64 [ %24, %17 ], [ %33, %32 ]
  %43 = trunc i64 %42 to i32
  %44 = icmp eq i32 %43, -1
  br i1 %44, label %45, label %77

45:                                               ; preds = %37, %40, %25, %13, %17
  %46 = phi i32 [ 0, %25 ], [ 0, %13 ], [ %15, %17 ], [ %41, %40 ], [ %28, %37 ]
  %47 = load atomic i32, i32* %8 monotonic, align 4
  %48 = and i32 %47, 1
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %60, label %50

50:                                               ; preds = %45
  %51 = icmp eq i32 %46, 0
  br i1 %51, label %104, label %52

52:                                               ; preds = %50
  %53 = bitcast %"class.WTF::StringImpl"* %12 to i8*
  %54 = zext i32 %46 to i64
  %55 = tail call i8* @memchr(i8* %53, i32 44, i64 %54) #4
  %56 = icmp eq i8* %55, null
  %57 = ptrtoint i8* %55 to i64
  %58 = ptrtoint %"class.WTF::StringImpl"* %12 to i64
  %59 = sub i64 %57, %58
  br i1 %56, label %104, label %73

60:                                               ; preds = %45
  %61 = bitcast %"class.WTF::StringImpl"* %12 to i16*
  %62 = icmp eq i32 %46, 0
  br i1 %62, label %104, label %63

63:                                               ; preds = %60
  %64 = zext i32 %46 to i64
  br label %65

65:                                               ; preds = %63, %70
  %66 = phi i64 [ %71, %70 ], [ 0, %63 ]
  %67 = getelementptr inbounds i16, i16* %61, i64 %66
  %68 = load i16, i16* %67, align 2
  %69 = icmp eq i16 %68, 44
  br i1 %69, label %73, label %70

70:                                               ; preds = %65
  %71 = add nuw nsw i64 %66, 1
  %72 = icmp eq i64 %71, %64
  br i1 %72, label %104, label %65

73:                                               ; preds = %65, %52
  %74 = phi i64 [ %59, %52 ], [ %66, %65 ]
  %75 = trunc i64 %74 to i32
  %76 = icmp eq i32 %75, -1
  br i1 %76, label %104, label %77

77:                                               ; preds = %40, %73
  %78 = phi i32 [ %75, %73 ], [ %43, %40 ]
  %79 = icmp ugt i32 %78, 5
  br i1 %79, label %80, label %103

80:                                               ; preds = %77
  %81 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %81) #5
  %82 = add i32 %78, -5
  %83 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF6String9SubstringEjj(%"class.WTF::String"* %0, i32 5, i32 %82) #5
  %84 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %83, %"class.WTF::StringImpl"** %84, align 8
  %85 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String15DeprecatedLowerEv(%"class.WTF::String"* nonnull %3) #5
  %86 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %85, %"class.WTF::StringImpl"** %86, align 8
  %87 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %84, align 8
  %88 = icmp eq %"class.WTF::StringImpl"* %87, null
  br i1 %88, label %102, label %89

89:                                               ; preds = %80
  %90 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %87, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %91 = load atomic i32, i32* %90 monotonic, align 4
  %92 = and i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %87, i64 0, i32 0
  %95 = load i32, i32* %94, align 4
  br i1 %93, label %96, label %98

96:                                               ; preds = %89
  %97 = add i32 %95, -1
  store i32 %97, i32* %94, align 4
  br label %98

98:                                               ; preds = %96, %89
  %99 = phi i32 [ %97, %96 ], [ %95, %89 ]
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %102

101:                                              ; preds = %98
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %87) #5
  br label %102

102:                                              ; preds = %80, %98, %101
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %81) #5
  br label %105

103:                                              ; preds = %77
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i64 10) #5
  br label %105

104:                                              ; preds = %70, %60, %50, %1, %52, %73
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i64 0) #5
  br label %105

105:                                              ; preds = %104, %103, %102
  %106 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %107 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %106, align 8
  ret %"class.WTF::StringImpl"* %107
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.WTF::StringImpl"* @_ZNK3WTF6String9SubstringEjj(%"class.WTF::String"*, i32, i32) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZNK3WTF6String15DeprecatedLowerEv(%"class.WTF::String"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #3

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
