; ModuleID = '../../third_party/skia/modules/sksg/src/SkSGRect.cpp'
source_filename = "../../third_party/skia/modules/sksg/src/SkSGRect.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sksg::Rect" = type <{ %"class.sksg::GeometryNode.base", [2 x i8], %struct.SkRect, %"struct.sksg::Rect::AttrContainer", [3 x i8] }>
%"class.sksg::GeometryNode.base" = type { %"class.sksg::Node.base" }
%"class.sksg::Node.base" = type <{ %class.SkRefCnt.base, [4 x i8], %union.anon, %struct.SkRect, i16 }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%union.anon = type { %"class.sksg::Node"* }
%"class.sksg::Node" = type <{ %class.SkRefCnt.base, [4 x i8], %union.anon, %struct.SkRect, i16, [6 x i8] }>
%struct.SkRect = type { float, float, float, float }
%"struct.sksg::Rect::AttrContainer" = type { i8 }
%"class.sksg::RRect" = type <{ %"class.sksg::GeometryNode.base", [2 x i8], %class.SkRRect, %"struct.sksg::RRect::AttrContainer", [7 x i8] }>
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkPoint = type { float, float }
%"struct.sksg::RRect::AttrContainer" = type { i8 }
%"class.sksg::GeometryNode" = type { %"class.sksg::Node.base", [6 x i8] }
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp, [384 x i64], %class.sk_sp.1, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.3" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.1 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%"class.std::__1::unique_ptr.3" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%class.SkPaint = type <{ %class.sk_sp.9, %class.sk_sp.10, %class.sk_sp.11, %class.sk_sp.12, %class.sk_sp.13, %struct.SkRGBA4f, float, float, %union.anon.14, [4 x i8] }>
%class.sk_sp.9 = type { %class.SkPathEffect* }
%class.SkPathEffect = type opaque
%class.sk_sp.10 = type { %class.SkShader* }
%class.SkShader = type opaque
%class.sk_sp.11 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type opaque
%class.sk_sp.12 = type { %class.SkColorFilter* }
%class.SkColorFilter = type opaque
%class.sk_sp.13 = type { %class.SkImageFilter* }
%class.SkImageFilter = type opaque
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon.14 = type { %struct.anon }
%struct.anon = type { i32 }
%"class.sksg::InvalidationController" = type opaque
%class.SkMatrix = type { [9 x float], i32 }
%class.SkPath = type <{ %class.sk_sp.15, i32, %"struct.std::__1::atomic.18", %"struct.std::__1::atomic.18", i8, i8 }>
%class.sk_sp.15 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.16, %class.SkTDArray.17, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%class.SkTDArray.16 = type { i8*, i32, i32 }
%class.SkTDArray.17 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.23 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.18" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.23 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.24", [3 x i8] }
%"struct.std::__1::atomic.24" = type { %"struct.std::__1::__atomic_base.25" }
%"struct.std::__1::__atomic_base.25" = type { %"struct.std::__1::__cxx_atomic_impl.26" }
%"struct.std::__1::__cxx_atomic_impl.26" = type { %"struct.std::__1::__cxx_atomic_base_impl.27" }
%"struct.std::__1::__cxx_atomic_base_impl.27" = type { i8 }
%"struct.std::__1::atomic.18" = type { %"struct.std::__1::__atomic_base.19" }
%"struct.std::__1::__atomic_base.19" = type { %"struct.std::__1::__atomic_base.20" }
%"struct.std::__1::__atomic_base.20" = type { %"struct.std::__1::__cxx_atomic_impl.21" }
%"struct.std::__1::__cxx_atomic_impl.21" = type { %"struct.std::__1::__cxx_atomic_base_impl.22" }
%"struct.std::__1::__cxx_atomic_base_impl.22" = type { i8 }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>

$_ZN4sksg4RectD0Ev = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZN4sksg5RRectD0Ev = comdat any

@_ZTVN4sksg4RectE = hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sksg::Node"*)* @_ZN4sksg4NodeD2Ev to i8*), i8* bitcast (void (%"class.sksg::Rect"*)* @_ZN4sksg4RectD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast ({ <2 x float>, <2 x float> } (%"class.sksg::Rect"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)* @_ZN4sksg4Rect12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix to i8*), i8* bitcast (void (%"class.sksg::Rect"*, %class.SkCanvas*, i1)* @_ZNK4sksg4Rect6onClipEP8SkCanvasb to i8*), i8* bitcast (void (%"class.sksg::Rect"*, %class.SkCanvas*, %class.SkPaint*)* @_ZNK4sksg4Rect6onDrawEP8SkCanvasRK7SkPaint to i8*), i8* bitcast (i1 (%"class.sksg::Rect"*, %struct.SkPoint*)* @_ZNK4sksg4Rect10onContainsERK7SkPoint to i8*), i8* bitcast (void (%class.SkPath*, %"class.sksg::Rect"*)* @_ZNK4sksg4Rect8onAsPathEv to i8*)] }, align 8
@_ZTVN4sksg5RRectE = hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sksg::Node"*)* @_ZN4sksg4NodeD2Ev to i8*), i8* bitcast (void (%"class.sksg::RRect"*)* @_ZN4sksg5RRectD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast ({ <2 x float>, <2 x float> } (%"class.sksg::RRect"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)* @_ZN4sksg5RRect12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix to i8*), i8* bitcast (void (%"class.sksg::RRect"*, %class.SkCanvas*, i1)* @_ZNK4sksg5RRect6onClipEP8SkCanvasb to i8*), i8* bitcast (void (%"class.sksg::RRect"*, %class.SkCanvas*, %class.SkPaint*)* @_ZNK4sksg5RRect6onDrawEP8SkCanvasRK7SkPaint to i8*), i8* bitcast (i1 (%"class.sksg::RRect"*, %struct.SkPoint*)* @_ZNK4sksg5RRect10onContainsERK7SkPoint to i8*), i8* bitcast (void (%class.SkPath*, %"class.sksg::RRect"*)* @_ZNK4sksg5RRect8onAsPathEv to i8*)] }, align 8

@_ZN4sksg4RectC1ERK6SkRect = hidden unnamed_addr alias void (%"class.sksg::Rect"*, %struct.SkRect*), void (%"class.sksg::Rect"*, %struct.SkRect*)* @_ZN4sksg4RectC2ERK6SkRect
@_ZN4sksg5RRectC1ERK7SkRRect = hidden unnamed_addr alias void (%"class.sksg::RRect"*, %class.SkRRect*), void (%"class.sksg::RRect"*, %class.SkRRect*)* @_ZN4sksg5RRectC2ERK7SkRRect

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg4RectC2ERK6SkRect(%"class.sksg::Rect"*, %struct.SkRect* nocapture readonly dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.sksg::Rect"* %0 to %"class.sksg::GeometryNode"*
  tail call void @_ZN4sksg12GeometryNodeC2Ev(%"class.sksg::GeometryNode"* %3) #7
  %4 = getelementptr inbounds %"class.sksg::Rect", %"class.sksg::Rect"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN4sksg4RectE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.sksg::Rect", %"class.sksg::Rect"* %0, i64 0, i32 2
  %6 = bitcast %struct.SkRect* %5 to i8*
  %7 = bitcast %struct.SkRect* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %7, i64 16, i1 false)
  %8 = getelementptr inbounds %"class.sksg::Rect", %"class.sksg::Rect"* %0, i64 0, i32 3, i32 0
  %9 = load i8, i8* %8, align 4
  %10 = and i8 %9, -8
  store i8 %10, i8* %8, align 4
  ret void
}

declare void @_ZN4sksg12GeometryNodeC2Ev(%"class.sksg::GeometryNode"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4sksg4Rect6onClipEP8SkCanvasb(%"class.sksg::Rect"*, %class.SkCanvas*, i1 zeroext) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sksg::Rect", %"class.sksg::Rect"* %0, i64 0, i32 2
  tail call void @_ZN8SkCanvas8clipRectERK6SkRect8SkClipOpb(%class.SkCanvas* %1, %struct.SkRect* dereferenceable(16) %4, i32 1, i1 zeroext %2) #7
  ret void
}

declare void @_ZN8SkCanvas8clipRectERK6SkRect8SkClipOpb(%class.SkCanvas*, %struct.SkRect* dereferenceable(16), i32, i1 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4sksg4Rect6onDrawEP8SkCanvasRK7SkPaint(%"class.sksg::Rect"*, %class.SkCanvas*, %class.SkPaint* dereferenceable(72)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sksg::Rect", %"class.sksg::Rect"* %0, i64 0, i32 2
  tail call void @_ZN8SkCanvas8drawRectERK6SkRectRK7SkPaint(%class.SkCanvas* %1, %struct.SkRect* dereferenceable(16) %4, %class.SkPaint* dereferenceable(72) %2) #7
  ret void
}

declare void @_ZN8SkCanvas8drawRectERK6SkRectRK7SkPaint(%class.SkCanvas*, %struct.SkRect* dereferenceable(16), %class.SkPaint* dereferenceable(72)) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK4sksg4Rect10onContainsERK7SkPoint(%"class.sksg::Rect"* nocapture readonly, %struct.SkPoint* nocapture readonly dereferenceable(8)) unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %"class.sksg::Rect", %"class.sksg::Rect"* %0, i64 0, i32 2, i32 0
  %8 = load float, float* %7, align 4
  %9 = fcmp ugt float %8, %4
  br i1 %9, label %22, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.sksg::Rect", %"class.sksg::Rect"* %0, i64 0, i32 2, i32 2
  %12 = load float, float* %11, align 4
  %13 = fcmp ogt float %12, %4
  br i1 %13, label %14, label %22

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.sksg::Rect", %"class.sksg::Rect"* %0, i64 0, i32 2, i32 1
  %16 = load float, float* %15, align 4
  %17 = fcmp ugt float %16, %6
  br i1 %17, label %22, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.sksg::Rect", %"class.sksg::Rect"* %0, i64 0, i32 2, i32 3
  %20 = load float, float* %19, align 4
  %21 = fcmp ogt float %20, %6
  br label %22

22:                                               ; preds = %2, %10, %14, %18
  %23 = phi i1 [ false, %14 ], [ false, %10 ], [ false, %2 ], [ %21, %18 ]
  ret i1 %23
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN4sksg4Rect12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::Rect"* nocapture readonly, %"class.sksg::InvalidationController"* nocapture readnone, %class.SkMatrix* nocapture readnone dereferenceable(40)) unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.sksg::Rect", %"class.sksg::Rect"* %0, i64 0, i32 2
  %5 = bitcast %struct.SkRect* %4 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 4
  %7 = getelementptr inbounds %"class.sksg::Rect", %"class.sksg::Rect"* %0, i64 0, i32 2, i32 2
  %8 = bitcast float* %7 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %6, 0
  %11 = insertvalue { <2 x float>, <2 x float> } %10, <2 x float> %9, 1
  ret { <2 x float>, <2 x float> } %11
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4sksg4Rect8onAsPathEv(%class.SkPath* noalias sret, %"class.sksg::Rect"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sksg::Rect", %"class.sksg::Rect"* %1, i64 0, i32 2
  %4 = getelementptr inbounds %"class.sksg::Rect", %"class.sksg::Rect"* %1, i64 0, i32 3, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = and i8 %5, 1
  %7 = zext i8 %6 to i32
  %8 = lshr i8 %5, 1
  %9 = and i8 %8, 3
  %10 = zext i8 %9 to i32
  tail call void @_ZN6SkPath4RectERK6SkRect15SkPathDirectionj(%class.SkPath* sret %0, %struct.SkRect* dereferenceable(16) %3, i32 %7, i32 %10) #7
  ret void
}

declare void @_ZN6SkPath4RectERK6SkRect15SkPathDirectionj(%class.SkPath* sret, %struct.SkRect* dereferenceable(16), i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg5RRectC2ERK7SkRRect(%"class.sksg::RRect"*, %class.SkRRect* nocapture readonly dereferenceable(52)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.sksg::RRect"* %0 to %"class.sksg::GeometryNode"*
  tail call void @_ZN4sksg12GeometryNodeC2Ev(%"class.sksg::GeometryNode"* %3) #7
  %4 = getelementptr inbounds %"class.sksg::RRect", %"class.sksg::RRect"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN4sksg5RRectE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.sksg::RRect", %"class.sksg::RRect"* %0, i64 0, i32 2
  %6 = bitcast %class.SkRRect* %5 to i8*
  %7 = bitcast %class.SkRRect* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %7, i64 52, i1 false)
  %8 = getelementptr inbounds %"class.sksg::RRect", %"class.sksg::RRect"* %0, i64 0, i32 3, i32 0
  %9 = load i8, i8* %8, align 8
  %10 = and i8 %9, -8
  store i8 %10, i8* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4sksg5RRect6onClipEP8SkCanvasb(%"class.sksg::RRect"*, %class.SkCanvas*, i1 zeroext) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sksg::RRect", %"class.sksg::RRect"* %0, i64 0, i32 2
  tail call void @_ZN8SkCanvas9clipRRectERK7SkRRect8SkClipOpb(%class.SkCanvas* %1, %class.SkRRect* dereferenceable(52) %4, i32 1, i1 zeroext %2) #7
  ret void
}

declare void @_ZN8SkCanvas9clipRRectERK7SkRRect8SkClipOpb(%class.SkCanvas*, %class.SkRRect* dereferenceable(52), i32, i1 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4sksg5RRect6onDrawEP8SkCanvasRK7SkPaint(%"class.sksg::RRect"*, %class.SkCanvas*, %class.SkPaint* dereferenceable(72)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sksg::RRect", %"class.sksg::RRect"* %0, i64 0, i32 2
  tail call void @_ZN8SkCanvas9drawRRectERK7SkRRectRK7SkPaint(%class.SkCanvas* %1, %class.SkRRect* dereferenceable(52) %4, %class.SkPaint* dereferenceable(72) %2) #7
  ret void
}

declare void @_ZN8SkCanvas9drawRRectERK7SkRRectRK7SkPaint(%class.SkCanvas*, %class.SkRRect* dereferenceable(52), %class.SkPaint* dereferenceable(72)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4sksg5RRect10onContainsERK7SkPoint(%"class.sksg::RRect"*, %struct.SkPoint* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = alloca { <2 x float>, <2 x float> }, align 8
  %4 = bitcast { <2 x float>, <2 x float> }* %3 to %struct.SkRect*
  %5 = getelementptr inbounds %"class.sksg::RRect", %"class.sksg::RRect"* %0, i64 0, i32 2
  %6 = bitcast %struct.SkPoint* %1 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %5, i64 0, i32 0, i32 0
  %9 = load float, float* %8, align 4
  %10 = extractelement <2 x float> %7, i32 0
  %11 = fcmp ugt float %9, %10
  br i1 %11, label %36, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.sksg::RRect", %"class.sksg::RRect"* %0, i64 0, i32 2, i32 0, i32 2
  %14 = load float, float* %13, align 4
  %15 = fcmp ogt float %14, %10
  br i1 %15, label %16, label %36

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.sksg::RRect", %"class.sksg::RRect"* %0, i64 0, i32 2, i32 0, i32 1
  %18 = load float, float* %17, align 4
  %19 = extractelement <2 x float> %7, i32 1
  %20 = fcmp ugt float %18, %19
  br i1 %20, label %36, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.sksg::RRect", %"class.sksg::RRect"* %0, i64 0, i32 2, i32 0, i32 3
  %23 = load float, float* %22, align 4
  %24 = fcmp ogt float %23, %19
  br i1 %24, label %25, label %36

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.sksg::RRect", %"class.sksg::RRect"* %0, i64 0, i32 2, i32 2
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 1
  br i1 %28, label %36, label %29

29:                                               ; preds = %25
  %30 = bitcast { <2 x float>, <2 x float> }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %30) #7
  %31 = fadd <2 x float> %7, <float 0xBF30000000000000, float 0xBF30000000000000>
  %32 = fadd <2 x float> %7, <float 0x3F30000000000000, float 0x3F30000000000000>
  %33 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %3, i64 0, i32 0
  store <2 x float> %31, <2 x float>* %33, align 8
  %34 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %3, i64 0, i32 1
  store <2 x float> %32, <2 x float>* %34, align 8
  %35 = call zeroext i1 @_ZNK7SkRRect8containsERK6SkRect(%class.SkRRect* %5, %struct.SkRect* nonnull dereferenceable(16) %4) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %30) #7
  br label %36

36:                                               ; preds = %2, %12, %16, %25, %21, %29
  %37 = phi i1 [ %35, %29 ], [ false, %21 ], [ true, %25 ], [ false, %16 ], [ false, %12 ], [ false, %2 ]
  ret i1 %37
}

declare zeroext i1 @_ZNK7SkRRect8containsERK6SkRect(%class.SkRRect*, %struct.SkRect* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN4sksg5RRect12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::RRect"* nocapture readonly, %"class.sksg::InvalidationController"* nocapture readnone, %class.SkMatrix* nocapture readnone dereferenceable(40)) unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.sksg::RRect", %"class.sksg::RRect"* %0, i64 0, i32 2, i32 0
  %5 = bitcast %struct.SkRect* %4 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 4
  %7 = getelementptr inbounds %"class.sksg::RRect", %"class.sksg::RRect"* %0, i64 0, i32 2, i32 0, i32 2
  %8 = bitcast float* %7 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %6, 0
  %11 = insertvalue { <2 x float>, <2 x float> } %10, <2 x float> %9, 1
  ret { <2 x float>, <2 x float> } %11
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4sksg5RRect8onAsPathEv(%class.SkPath* noalias sret, %"class.sksg::RRect"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sksg::RRect", %"class.sksg::RRect"* %1, i64 0, i32 2
  %4 = getelementptr inbounds %"class.sksg::RRect", %"class.sksg::RRect"* %1, i64 0, i32 3, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = and i8 %5, 1
  %7 = zext i8 %6 to i32
  %8 = lshr i8 %5, 1
  %9 = and i8 %8, 3
  %10 = zext i8 %9 to i32
  tail call void @_ZN6SkPath5RRectERK7SkRRect15SkPathDirectionj(%class.SkPath* sret %0, %class.SkRRect* dereferenceable(52) %3, i32 %7, i32 %10) #7
  ret void
}

declare void @_ZN6SkPath5RRectERK7SkRRect15SkPathDirectionj(%class.SkPath* sret, %class.SkRRect* dereferenceable(52), i32, i32) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sksg4RectD0Ev(%"class.sksg::Rect"*) unnamed_addr #4 comdat align 2 {
  %2 = bitcast %"class.sksg::Rect"* %0 to %"class.sksg::Node"*
  tail call void @_ZN4sksg4NodeD2Ev(%"class.sksg::Node"* %2) #7
  %3 = bitcast %"class.sksg::Rect"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #7
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4sksg4NodeD2Ev(%"class.sksg::Node"*) unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sksg5RRectD0Ev(%"class.sksg::RRect"*) unnamed_addr #4 comdat align 2 {
  %2 = bitcast %"class.sksg::RRect"* %0 to %"class.sksg::Node"*
  tail call void @_ZN4sksg4NodeD2Ev(%"class.sksg::Node"* %2) #7
  %3 = bitcast %"class.sksg::RRect"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
