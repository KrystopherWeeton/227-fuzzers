; ModuleID = '../../extensions/browser/value_store/value_store_change.cc'
source_filename = "../../extensions/browser/value_store/value_store_change.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.ValueStoreChange = type { %"class.std::__1::basic_string", %"class.absl::optional", %"class.absl::optional" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.30 }
%union.anon.30 = type { %"class.base::Value" }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.0" }
%"union.absl::variant_internal::DestructibleUnionImpl.0" = type { %"union.absl::variant_internal::DestructibleUnionImpl.1" }
%"union.absl::variant_internal::DestructibleUnionImpl.1" = type { %"union.absl::variant_internal::DestructibleUnionImpl.2" }
%"union.absl::variant_internal::DestructibleUnionImpl.2" = type { %"union.absl::variant_internal::DestructibleUnionImpl.3" }
%"union.absl::variant_internal::DestructibleUnionImpl.3" = type { %"class.std::__1::basic_string" }
%"class.std::__1::vector.28" = type { %"class.std::__1::__vector_base.29" }
%"class.std::__1::__vector_base.29" = type { %class.ValueStoreChange*, %class.ValueStoreChange*, %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %class.ValueStoreChange* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@.str = private unnamed_addr constant [9 x i8] c"oldValue\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"newValue\00", align 1

@_ZN16ValueStoreChangeC1ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN4absl8optionalIN4base5ValueEEESD_ = hidden unnamed_addr alias void (%class.ValueStoreChange*, %"class.std::__1::basic_string"*, %"class.absl::optional"*, %"class.absl::optional"*), void (%class.ValueStoreChange*, %"class.std::__1::basic_string"*, %"class.absl::optional"*, %"class.absl::optional"*)* @_ZN16ValueStoreChangeC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN4absl8optionalIN4base5ValueEEESD_
@_ZN16ValueStoreChangeD1Ev = hidden unnamed_addr alias void (%class.ValueStoreChange*), void (%class.ValueStoreChange*)* @_ZN16ValueStoreChangeD2Ev
@_ZN16ValueStoreChangeC1EOS_ = hidden unnamed_addr alias void (%class.ValueStoreChange*, %class.ValueStoreChange*), void (%class.ValueStoreChange*, %class.ValueStoreChange*)* @_ZN16ValueStoreChangeC2EOS_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16ValueStoreChange7ToValueENSt3__16vectorIS_NS0_9allocatorIS_EEEE(%"class.base::Value"* noalias sret, %"class.std::__1::vector.28"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::Value", align 8
  %4 = bitcast %"class.base::Value"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 -86, i64 32, i1 false)
  tail call void @_ZN4base5ValueC1ENS0_4TypeE(%"class.base::Value"* %0, i8 zeroext 6) #6
  %5 = getelementptr inbounds %"class.std::__1::vector.28", %"class.std::__1::vector.28"* %1, i64 0, i32 0, i32 0
  %6 = load %class.ValueStoreChange*, %class.ValueStoreChange** %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.28", %"class.std::__1::vector.28"* %1, i64 0, i32 0, i32 1
  %8 = load %class.ValueStoreChange*, %class.ValueStoreChange** %7, align 8
  %9 = icmp eq %class.ValueStoreChange* %6, %8
  br i1 %9, label %13, label %10

10:                                               ; preds = %2
  %11 = bitcast %"class.base::Value"* %3 to i8*
  %12 = bitcast %"class.base::Value"* %3 to i8*
  br label %14

13:                                               ; preds = %33, %2
  ret void

14:                                               ; preds = %10, %33
  %15 = phi %class.ValueStoreChange* [ %6, %10 ], [ %47, %33 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 32, i1 false)
  call void @_ZN4base5ValueC1ENS0_4TypeE(%"class.base::Value"* nonnull %3, i8 zeroext 6) #6
  %16 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %15, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %17 = load i8, i8* %16, align 8, !range !2
  %18 = icmp eq i8 %17, 0
  %19 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %15, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %20 = icmp eq %"class.base::Value"* %19, null
  %21 = or i1 %20, %18
  br i1 %21, label %24, label %22

22:                                               ; preds = %14
  %23 = call %"class.base::Value"* @_ZN4base5Value6SetKeyEPKcOS0_(%"class.base::Value"* nonnull %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), %"class.base::Value"* nonnull dereferenceable(32) %19) #6
  br label %24

24:                                               ; preds = %14, %22
  %25 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %15, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %26 = load i8, i8* %25, align 8, !range !2
  %27 = icmp eq i8 %26, 0
  %28 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %15, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %29 = icmp eq %"class.base::Value"* %28, null
  %30 = or i1 %29, %27
  br i1 %30, label %33, label %31

31:                                               ; preds = %24
  %32 = call %"class.base::Value"* @_ZN4base5Value6SetKeyEPKcOS0_(%"class.base::Value"* nonnull %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), %"class.base::Value"* nonnull dereferenceable(32) %28) #6
  br label %33

33:                                               ; preds = %24, %31
  %34 = bitcast %class.ValueStoreChange* %15 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %35 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %34, i64 0, i32 1, i32 0
  %36 = load i8, i8* %35, align 1
  %37 = icmp slt i8 %36, 0
  %38 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = bitcast %class.ValueStoreChange* %15 to i8*
  %41 = select i1 %37, i8* %39, i8* %40
  %42 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = zext i8 %36 to i64
  %45 = select i1 %37, i64 %43, i64 %44
  %46 = call %"class.base::Value"* @_ZN4base5Value6SetKeyENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEOS0_(%"class.base::Value"* %0, i8* %41, i64 %45, %"class.base::Value"* nonnull dereferenceable(32) %3) #6
  call void @_ZN4base5ValueD1Ev(%"class.base::Value"* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  %47 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %15, i64 1
  %48 = icmp eq %class.ValueStoreChange* %47, %8
  br i1 %48, label %13, label %14
}

declare void @_ZN4base5ValueC1ENS0_4TypeE(%"class.base::Value"*, i8 zeroext) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.base::Value"* @_ZNK16ValueStoreChange9old_valueEv(%class.ValueStoreChange* readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  %5 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %6 = select i1 %4, %"class.base::Value"* null, %"class.base::Value"* %5
  ret %"class.base::Value"* %6
}

declare %"class.base::Value"* @_ZN4base5Value6SetKeyEPKcOS0_(%"class.base::Value"*, i8*, %"class.base::Value"* dereferenceable(32)) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.base::Value"* @_ZNK16ValueStoreChange9new_valueEv(%class.ValueStoreChange* readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  %5 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %6 = select i1 %4, %"class.base::Value"* null, %"class.base::Value"* %5
  ret %"class.base::Value"* %6
}

declare %"class.base::Value"* @_ZN4base5Value6SetKeyENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEOS0_(%"class.base::Value"*, i8*, i64, %"class.base::Value"* dereferenceable(32)) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base5ValueD1Ev(%"class.base::Value"*) unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16ValueStoreChangeC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN4absl8optionalIN4base5ValueEEESD_(%class.ValueStoreChange*, %"class.std::__1::basic_string"* nocapture readonly dereferenceable(24), %"class.absl::optional"*, %"class.absl::optional"*) unnamed_addr #0 align 2 {
  %5 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %6 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %5, i64 0, i32 1, i32 0
  %7 = load i8, i8* %6, align 1
  %8 = icmp slt i8 %7, 0
  br i1 %8, label %12, label %9

9:                                                ; preds = %4
  %10 = bitcast %class.ValueStoreChange* %0 to i8*
  %11 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 24, i1 false) #6
  br label %18

12:                                               ; preds = %4
  %13 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %0, i64 0, i32 0
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %13, i8* %15, i64 %17) #6
  br label %18

18:                                               ; preds = %9, %12
  %19 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 40, i1 false) #6
  %21 = load i8, i8* %20, align 8, !range !2
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %25 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN4base5ValueC1EOS0_(%"class.base::Value"* %25, %"class.base::Value"* dereferenceable(32) %24) #6
  store i8 1, i8* %19, align 8
  br label %26

26:                                               ; preds = %18, %23
  %27 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %27, i8 0, i64 40, i1 false) #6
  %29 = load i8, i8* %28, align 8, !range !2
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %34, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %33 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN4base5ValueC1EOS0_(%"class.base::Value"* %33, %"class.base::Value"* dereferenceable(32) %32) #6
  store i8 1, i8* %27, align 8
  br label %34

34:                                               ; preds = %26, %31
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16ValueStoreChangeD2Ev(%class.ValueStoreChange*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN4base5ValueD1Ev(%"class.base::Value"* %6) #6
  store i8 0, i8* %2, align 8
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %9 = load i8, i8* %8, align 8, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN4base5ValueD1Ev(%"class.base::Value"* %12) #6
  store i8 0, i8* %8, align 8
  br label %13

13:                                               ; preds = %7, %11
  %14 = bitcast %class.ValueStoreChange* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %14, i64 0, i32 1, i32 0
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  tail call void @_ZdlPv(i8* %20) #7
  br label %21

21:                                               ; preds = %13, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16ValueStoreChangeC2EOS_(%class.ValueStoreChange*, %class.ValueStoreChange* dereferenceable(104)) unnamed_addr #0 align 2 {
  %3 = bitcast %class.ValueStoreChange* %0 to i8*
  %4 = bitcast %class.ValueStoreChange* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false) #6
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false) #6
  %5 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 40, i1 false) #6
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %12, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %11 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN4base5ValueC1EOS0_(%"class.base::Value"* %11, %"class.base::Value"* dereferenceable(32) %10) #6
  store i8 1, i8* %5, align 8
  br label %12

12:                                               ; preds = %2, %9
  %13 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 40, i1 false) #6
  %15 = load i8, i8* %14, align 8, !range !2
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %20, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %19 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN4base5ValueC1EOS0_(%"class.base::Value"* %19, %"class.base::Value"* dereferenceable(32) %18) #6
  store i8 1, i8* %13, align 8
  br label %20

20:                                               ; preds = %12, %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(104) %class.ValueStoreChange* @_ZN16ValueStoreChangeaSEOS_(%class.ValueStoreChange* returned, %class.ValueStoreChange* dereferenceable(104)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %class.ValueStoreChange* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  tail call void @_ZdlPv(i8* %9) #7
  br label %10

10:                                               ; preds = %2, %7
  %11 = bitcast %class.ValueStoreChange* %0 to i8*
  %12 = bitcast %class.ValueStoreChange* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 24, i1 false) #6
  %13 = bitcast %class.ValueStoreChange* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %14 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %13, i64 0, i32 1, i32 0
  store i8 0, i8* %14, align 1
  store i8 0, i8* %12, align 1
  %15 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %0, i64 0, i32 1
  %16 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %17 = load i8, i8* %16, align 8, !range !2
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %28, label %19

19:                                               ; preds = %10
  %20 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %21 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %15, i64 0, i32 0, i32 0, i32 0, i32 0
  %22 = load i8, i8* %21, align 8, !range !2
  %23 = icmp eq i8 %22, 0
  %24 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br i1 %23, label %27, label %25

25:                                               ; preds = %19
  %26 = tail call dereferenceable(32) %"class.base::Value"* @_ZN4base5ValueaSEOS0_(%"class.base::Value"* %24, %"class.base::Value"* dereferenceable(32) %20) #6
  br label %34

27:                                               ; preds = %19
  tail call void @_ZN4base5ValueC1EOS0_(%"class.base::Value"* %24, %"class.base::Value"* dereferenceable(32) %20) #6
  store i8 1, i8* %21, align 8
  br label %34

28:                                               ; preds = %10
  %29 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %15, i64 0, i32 0, i32 0, i32 0, i32 0
  %30 = load i8, i8* %29, align 8, !range !2
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %34, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN4base5ValueD1Ev(%"class.base::Value"* %33) #6
  store i8 0, i8* %29, align 8
  br label %34

34:                                               ; preds = %25, %27, %28, %32
  %35 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %0, i64 0, i32 2
  %36 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %37 = load i8, i8* %36, align 8, !range !2
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %48, label %39

39:                                               ; preds = %34
  %40 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %41 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %35, i64 0, i32 0, i32 0, i32 0, i32 0
  %42 = load i8, i8* %41, align 8, !range !2
  %43 = icmp eq i8 %42, 0
  %44 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  br i1 %43, label %47, label %45

45:                                               ; preds = %39
  %46 = tail call dereferenceable(32) %"class.base::Value"* @_ZN4base5ValueaSEOS0_(%"class.base::Value"* %44, %"class.base::Value"* dereferenceable(32) %40) #6
  br label %54

47:                                               ; preds = %39
  tail call void @_ZN4base5ValueC1EOS0_(%"class.base::Value"* %44, %"class.base::Value"* dereferenceable(32) %40) #6
  store i8 1, i8* %41, align 8
  br label %54

48:                                               ; preds = %34
  %49 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %35, i64 0, i32 0, i32 0, i32 0, i32 0
  %50 = load i8, i8* %49, align 8, !range !2
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %54, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds %class.ValueStoreChange, %class.ValueStoreChange* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN4base5ValueD1Ev(%"class.base::Value"* %53) #6
  store i8 0, i8* %49, align 8
  br label %54

54:                                               ; preds = %45, %47, %48, %52
  ret %class.ValueStoreChange* %0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind
declare void @_ZN4base5ValueC1EOS0_(%"class.base::Value"*, %"class.base::Value"* dereferenceable(32)) unnamed_addr #4

; Function Attrs: nounwind
declare dereferenceable(32) %"class.base::Value"* @_ZN4base5ValueaSEOS0_(%"class.base::Value"*, %"class.base::Value"* dereferenceable(32)) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
