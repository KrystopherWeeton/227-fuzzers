; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/local_response_norm.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/local_response_norm.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, i32 (%struct.TfLiteContext*, %struct.TfLiteRegistration*, %struct.TfLiteIntArray*, %struct.TfLiteDelegate*)*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteRegistration = type { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, {}*, {}*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%"class.Eigen::internal::variable_if_dynamic.35" = type { i8 }
%"class.Eigen::internal::variable_if_dynamic" = type { i64 }
%"struct.Eigen::internal::evaluator.136" = type { %"struct.Eigen::internal::evaluator.base.140", [3 x i8] }
%"struct.Eigen::internal::evaluator.base.140" = type <{ %"struct.Eigen::internal::scalar_constant_op", %"struct.Eigen::internal::nullary_wrapper" }>
%"struct.Eigen::internal::scalar_constant_op" = type { float }
%"struct.Eigen::internal::nullary_wrapper" = type { i8 }
%"class.tflite::RuntimeShape" = type { i32, %union.anon }
%union.anon = type { i32*, [16 x i8] }
%struct.TfLiteLocalResponseNormParams = type { i32, float, float, float }
%"struct.tflite::LocalResponseNormalizationParams" = type { i32, double, double, double }
%"struct.Eigen::internal::evaluator.124" = type { %"struct.Eigen::internal::binary_evaluator" }
%"struct.Eigen::internal::binary_evaluator" = type { %"struct.Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<float, float>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, const Eigen::Matrix<float, -1, 1, 0, -1, 1> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, float, float>::Data" }
%"struct.Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<float, float>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<float, float>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, const Eigen::Matrix<float, -1, 1, 0, -1, 1> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, float, float>::Data" = type { [8 x i8], %"struct.Eigen::internal::evaluator.127", %"struct.Eigen::internal::evaluator.136" }
%"struct.Eigen::internal::evaluator.127" = type { %"struct.Eigen::internal::evaluator.128" }
%"struct.Eigen::internal::evaluator.128" = type { %"struct.Eigen::internal::binary_evaluator.129" }
%"struct.Eigen::internal::binary_evaluator.129" = type { %"struct.Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<float, float>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, float, float>::Data" }
%"struct.Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<float, float>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, float, float>::Data" = type { %"struct.Eigen::internal::evaluator.132", %"struct.Eigen::internal::evaluator.132" }
%"struct.Eigen::internal::evaluator.132" = type { %"struct.Eigen::internal::evaluator.133" }
%"struct.Eigen::internal::evaluator.133" = type { %"struct.Eigen::internal::block_evaluator" }
%"struct.Eigen::internal::block_evaluator" = type { %"struct.Eigen::internal::mapbase_evaluator" }
%"struct.Eigen::internal::mapbase_evaluator" = type { float*, %"class.Eigen::internal::variable_if_dynamic.35", %"class.Eigen::internal::variable_if_dynamic" }
%"struct.Eigen::internal::evaluator.142" = type { %"struct.Eigen::internal::block_evaluator.143" }
%"struct.Eigen::internal::block_evaluator.143" = type { %"struct.Eigen::internal::mapbase_evaluator.144" }
%"struct.Eigen::internal::mapbase_evaluator.144" = type { float*, %"class.Eigen::internal::variable_if_dynamic.35", %"class.Eigen::internal::variable_if_dynamic" }
%"class.Eigen::internal::generic_dense_assignment_kernel.147" = type { %"struct.Eigen::internal::evaluator.142"*, %"struct.Eigen::internal::evaluator.124"*, %"struct.Eigen::internal::assign_op"*, %"class.Eigen::Block.42"* }
%"struct.Eigen::internal::assign_op" = type { i8 }
%"class.Eigen::Block.42" = type { %"class.Eigen::BlockImpl.43" }
%"class.Eigen::BlockImpl.43" = type { %"class.Eigen::internal::BlockImpl_dense.44" }
%"class.Eigen::internal::BlockImpl_dense.44" = type { %"class.Eigen::MapBase.45", %"class.Eigen::Matrix"*, %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic", i64 }
%"class.Eigen::MapBase.45" = type { %"class.Eigen::MapBase.46" }
%"class.Eigen::MapBase.46" = type { float*, %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic" }
%"class.Eigen::Matrix" = type { %"class.Eigen::PlainObjectBase" }
%"class.Eigen::PlainObjectBase" = type { %"class.Eigen::DenseStorage" }
%"class.Eigen::DenseStorage" = type { float*, i64 }
%"class.Eigen::DenseBase.48" = type { i8 }

$_ZN6tflite3ops7builtin19local_response_norm4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin19local_response_norm4EvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite13optimized_ops26LocalResponseNormalizationERKNS_32LocalResponseNormalizationParamsERKNS_12RuntimeShapeEPKfS6_Pf = comdat any

$_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5BlockINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELin1ELin1ELb0EEEEENS3_INS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS9_ISB_KNS4_IKNS_3MapIKNS5_IfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEELin1ELi1ELb1EEESK_EEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS6_EEEEEENS0_9assign_opIffEELi0EEELi4ELi0EE3runERSX_ = comdat any

@.str = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%d != %d)\00", align 1
@.str.3 = private unnamed_addr constant [76 x i8] c"../../third_party/tflite/src/tensorflow/lite/kernels/local_response_norm.cc\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"NumInputs(node)\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"NumOutputs(node)\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c"NumDimensions(input)\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"4\00", align 1
@.str.9 = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%s != %s)\00", align 1
@.str.10 = private unnamed_addr constant [13 x i8] c"output->type\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"kTfLiteFloat32\00", align 1
@.str.12 = private unnamed_addr constant [12 x i8] c"input->type\00", align 1
@_ZZN6tflite3ops7builtin32Register_LOCAL_RESPONSE_NORM_REFEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* null, void (%struct.TfLiteContext*, i8*)* null, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin19local_response_norm7PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin19local_response_norm4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin40Register_LOCAL_RESPONSE_NORM_GENERIC_OPTEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* null, void (%struct.TfLiteContext*, i8*)* null, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin19local_response_norm7PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin19local_response_norm4EvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@.str.14 = private unnamed_addr constant [35 x i8] c"Output type is %d, requires float.\00", align 1
@__const._ZN6tflite3ops7builtin19local_response_norm4EvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode.op_params = private unnamed_addr constant { i32, [4 x i8], double, double, double } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, align 8
@__const._ZN5Eigen8internal26call_dense_assignment_loopINS_5BlockINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELin1ELin1ELb0EEENS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS6_IS8_KNS2_IKNS_3MapIKNS3_IfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEELin1ELi1ELb1EEESH_EEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS4_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_.srcEvaluator = private unnamed_addr constant { { { [8 x i8], { { { { { { { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } }, { { { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } } } } } }, %"struct.Eigen::internal::evaluator.136" } } } { { { [8 x i8], { { { { { { { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } }, { { { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } } } } } }, %"struct.Eigen::internal::evaluator.136" } } { { [8 x i8], { { { { { { { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } }, { { { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } } } } } }, %"struct.Eigen::internal::evaluator.136" } { [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA", { { { { { { { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } }, { { { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } } } } } } { { { { { { { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } }, { { { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } } } } } { { { { { { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } }, { { { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } } } } { { { { { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } }, { { { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } } } { { { { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } } { { { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } { { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } { float* inttoptr (i64 -6148914691236517206 to float*), %"class.Eigen::internal::variable_if_dynamic.35" { i8 -86 }, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", %"class.Eigen::internal::variable_if_dynamic" { i64 -6148914691236517206 } } } } }, { { { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } } { { { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } { { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } { float* inttoptr (i64 -6148914691236517206 to float*), %"class.Eigen::internal::variable_if_dynamic.35" { i8 -86 }, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", %"class.Eigen::internal::variable_if_dynamic" { i64 -6148914691236517206 } } } } } } } } }, %"struct.Eigen::internal::evaluator.136" { %"struct.Eigen::internal::evaluator.base.140" <{ %"struct.Eigen::internal::scalar_constant_op" { float 0xFFFFFFFFE0000000 }, %"struct.Eigen::internal::nullary_wrapper" { i8 -86 } }>, [3 x i8] c"\AA\AA\AA" } } } }, align 8
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin19local_response_norm7PrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %4 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %3, align 8
  %5 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 1
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %10 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %9, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %10(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.3, i64 0, i64 0), i32 39, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %6, i32 1) #11
  br label %89

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %13 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %12, align 8
  %14 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %20, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %19 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %18, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %19(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.3, i64 0, i64 0), i32 40, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %15, i32 1) #11
  br label %89

20:                                               ; preds = %11
  %21 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 0
  %22 = load i32, i32* %21, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %29, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %26 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %25, align 8
  %27 = sext i32 %22 to i64
  %28 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 %27
  br label %29

29:                                               ; preds = %20, %24
  %30 = phi %struct.TfLiteTensor* [ %28, %24 ], [ null, %20 ]
  %31 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 1, i64 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %39, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %36 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %35, align 8
  %37 = sext i32 %32 to i64
  %38 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %36, i64 %37
  br label %39

39:                                               ; preds = %29, %34
  %40 = phi %struct.TfLiteTensor* [ %38, %34 ], [ null, %29 ]
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 2
  %42 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %41, align 8
  %43 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 0
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %44, 4
  br i1 %45, label %49, label %46

46:                                               ; preds = %39
  %47 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %48 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %47, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %48(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.3, i64 0, i64 0), i32 45, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0), i32 %44, i32 4) #11
  br label %89

49:                                               ; preds = %39
  %50 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 0
  %51 = load i32, i32* %50, align 8
  %52 = icmp eq i32 %51, 1
  br i1 %52, label %58, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %55 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %54, align 8
  %56 = tail call i8* @TfLiteTypeGetName(i32 %51) #11
  %57 = tail call i8* @TfLiteTypeGetName(i32 1) #11
  tail call void (%struct.TfLiteContext*, i8*, ...) %55(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.3, i64 0, i64 0), i32 47, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i64 0, i64 0), i8* %56, i8* %57) #11
  br label %89

58:                                               ; preds = %49
  %59 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 0
  %60 = load i32, i32* %59, align 8
  %61 = icmp eq i32 %60, 1
  br i1 %61, label %68, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %64 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %63, align 8
  %65 = tail call i8* @TfLiteTypeGetName(i32 %60) #11
  %66 = load i32, i32* %50, align 8
  %67 = tail call i8* @TfLiteTypeGetName(i32 %66) #11
  tail call void (%struct.TfLiteContext*, i8*, ...) %64(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.3, i64 0, i64 0), i32 48, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i64 0, i64 0), i8* %65, i8* %67) #11
  br label %89

68:                                               ; preds = %58
  %69 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32 4) #11
  %70 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %41, align 8
  %71 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %70, i64 0, i32 1, i64 0
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %69, i64 0, i32 1, i64 0
  store i32 %72, i32* %73, align 4
  %74 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %41, align 8
  %75 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %74, i64 0, i32 1, i64 1
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %69, i64 0, i32 1, i64 1
  store i32 %76, i32* %77, align 4
  %78 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %41, align 8
  %79 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %78, i64 0, i32 1, i64 2
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %69, i64 0, i32 1, i64 2
  store i32 %80, i32* %81, align 4
  %82 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %41, align 8
  %83 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %82, i64 0, i32 1, i64 3
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %69, i64 0, i32 1, i64 3
  store i32 %84, i32* %85, align 4
  %86 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %87 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %86, align 8
  %88 = tail call i32 %87(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %40, %struct.TfLiteIntArray* %69) #11
  br label %89

89:                                               ; preds = %46, %53, %62, %68, %17, %8
  %90 = phi i32 [ 1, %8 ], [ 1, %17 ], [ 1, %46 ], [ 1, %53 ], [ 1, %62 ], [ %88, %68 ]
  ret i32 %90
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @TfLiteTypeGetName(i32) local_unnamed_addr #2

declare %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin32Register_LOCAL_RESPONSE_NORM_REFEv() local_unnamed_addr #3 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin32Register_LOCAL_RESPONSE_NORM_REFEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin19local_response_norm4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #0 comdat {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 5
  %6 = bitcast i8** %5 to %struct.TfLiteLocalResponseNormParams**
  %7 = load %struct.TfLiteLocalResponseNormParams*, %struct.TfLiteLocalResponseNormParams** %6, align 8
  %8 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %9 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %8, align 8
  %10 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %9, i64 0, i32 1, i64 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %18, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %15 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %14, align 8
  %16 = sext i32 %11 to i64
  %17 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %15, i64 %16
  br label %18

18:                                               ; preds = %2, %13
  %19 = phi %struct.TfLiteTensor* [ %17, %13 ], [ null, %2 ]
  %20 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %21 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %20, align 8
  %22 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %21, i64 0, i32 1, i64 0
  %23 = load i32, i32* %22, align 4
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %27 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %26, align 8
  %28 = sext i32 %23 to i64
  %29 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %27, i64 %28
  br label %30

30:                                               ; preds = %18, %25
  %31 = phi %struct.TfLiteTensor* [ %29, %25 ], [ null, %18 ]
  %32 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = icmp eq i32 %33, 1
  br i1 %34, label %35, label %299

35:                                               ; preds = %30
  %36 = getelementptr inbounds %struct.TfLiteLocalResponseNormParams, %struct.TfLiteLocalResponseNormParams* %7, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds %struct.TfLiteLocalResponseNormParams, %struct.TfLiteLocalResponseNormParams* %7, i64 0, i32 1
  %39 = load float, float* %38, align 4
  %40 = fpext float %39 to double
  %41 = getelementptr inbounds %struct.TfLiteLocalResponseNormParams, %struct.TfLiteLocalResponseNormParams* %7, i64 0, i32 2
  %42 = load float, float* %41, align 4
  %43 = fpext float %42 to double
  %44 = getelementptr inbounds %struct.TfLiteLocalResponseNormParams, %struct.TfLiteLocalResponseNormParams* %7, i64 0, i32 3
  %45 = load float, float* %44, align 4
  %46 = fpext float %45 to double
  %47 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %47) #11
  %48 = icmp eq %struct.TfLiteTensor* %19, null
  br i1 %48, label %49, label %51

49:                                               ; preds = %35
  %50 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %50, align 8, !alias.scope !2
  br label %79

51:                                               ; preds = %35
  %52 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 2
  %53 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %52, align 8, !noalias !2
  %54 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %53, i64 0, i32 0
  %55 = load i32, i32* %54, align 4, !noalias !2
  %56 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %53, i64 0, i32 1, i64 0
  %57 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %55, i32* %57, align 8, !alias.scope !2
  %58 = icmp sgt i32 %55, 5
  br i1 %58, label %59, label %66

59:                                               ; preds = %51
  %60 = sext i32 %55 to i64
  %61 = shl nsw i64 %60, 2
  %62 = tail call i8* @_Znam(i64 %61) #12, !noalias !2
  %63 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %64 = bitcast i32** %63 to i8**
  store i8* %62, i8** %64, align 8, !alias.scope !2
  %65 = bitcast i8* %62 to i32*
  br label %71

66:                                               ; preds = %51
  %67 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %68 = bitcast %union.anon* %67 to i32*
  %69 = sext i32 %55 to i64
  %70 = shl nsw i64 %69, 2
  br label %71

71:                                               ; preds = %66, %59
  %72 = phi i64 [ %61, %59 ], [ %70, %66 ]
  %73 = phi i32* [ %65, %59 ], [ %68, %66 ]
  %74 = bitcast i32* %73 to i8*
  %75 = bitcast i32* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %74, i8* align 4 %75, i64 %72, i1 false) #11
  %76 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 1
  %77 = bitcast %union.TfLitePtrUnion* %76 to float**
  %78 = load float*, float** %77, align 8
  br label %79

79:                                               ; preds = %49, %71
  %80 = phi i32 [ %55, %71 ], [ 0, %49 ]
  %81 = phi float* [ %78, %71 ], [ null, %49 ]
  %82 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %82) #11
  %83 = icmp eq %struct.TfLiteTensor* %31, null
  br i1 %83, label %84, label %86

84:                                               ; preds = %79
  %85 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %85, align 8, !alias.scope !5
  br label %114

86:                                               ; preds = %79
  %87 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 2
  %88 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %87, align 8, !noalias !5
  %89 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %88, i64 0, i32 0
  %90 = load i32, i32* %89, align 4, !noalias !5
  %91 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %88, i64 0, i32 1, i64 0
  %92 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %90, i32* %92, align 8, !alias.scope !5
  %93 = icmp sgt i32 %90, 5
  br i1 %93, label %94, label %101

94:                                               ; preds = %86
  %95 = sext i32 %90 to i64
  %96 = shl nsw i64 %95, 2
  %97 = tail call i8* @_Znam(i64 %96) #12, !noalias !5
  %98 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %99 = bitcast i32** %98 to i8**
  store i8* %97, i8** %99, align 8, !alias.scope !5
  %100 = bitcast i8* %97 to i32*
  br label %106

101:                                              ; preds = %86
  %102 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %103 = bitcast %union.anon* %102 to i32*
  %104 = sext i32 %90 to i64
  %105 = shl nsw i64 %104, 2
  br label %106

106:                                              ; preds = %101, %94
  %107 = phi i64 [ %96, %94 ], [ %105, %101 ]
  %108 = phi i32* [ %100, %94 ], [ %103, %101 ]
  %109 = bitcast i32* %108 to i8*
  %110 = bitcast i32* %91 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %109, i8* align 4 %110, i64 %107, i1 false) #11
  %111 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1
  %112 = bitcast %union.TfLitePtrUnion* %111 to float**
  %113 = load float*, float** %112, align 8
  br label %114

114:                                              ; preds = %84, %106
  %115 = phi i32 [ %90, %106 ], [ 0, %84 ]
  %116 = phi float* [ %113, %106 ], [ null, %84 ]
  %117 = add nsw i32 %80, -1
  %118 = icmp sgt i32 %80, 5
  %119 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %120 = getelementptr inbounds %union.anon, %union.anon* %119, i64 0, i32 0
  %121 = load i32*, i32** %120, align 8
  %122 = bitcast %union.anon* %119 to i32*
  %123 = select i1 %118, i32* %121, i32* %122
  %124 = icmp sgt i32 %80, 0
  br i1 %124, label %125, label %165

125:                                              ; preds = %114
  %126 = zext i32 %117 to i64
  %127 = zext i32 %80 to i64
  %128 = add nsw i64 %127, -1
  %129 = and i64 %127, 3
  %130 = icmp ult i64 %128, 3
  br i1 %130, label %146, label %131

131:                                              ; preds = %125
  %132 = sub nsw i64 %127, %129
  br label %133

133:                                              ; preds = %323, %131
  %134 = phi i64 [ 0, %131 ], [ %326, %323 ]
  %135 = phi i32 [ 1, %131 ], [ %325, %323 ]
  %136 = phi i64 [ %132, %131 ], [ %327, %323 ]
  %137 = icmp eq i64 %134, %126
  br i1 %137, label %141, label %138

138:                                              ; preds = %133
  %139 = getelementptr inbounds i32, i32* %123, i64 %134
  %140 = load i32, i32* %139, align 4
  br label %141

141:                                              ; preds = %138, %133
  %142 = phi i32 [ %140, %138 ], [ 1, %133 ]
  %143 = mul nsw i32 %142, %135
  %144 = or i64 %134, 1
  %145 = icmp eq i64 %144, %126
  br i1 %145, label %307, label %304

146:                                              ; preds = %323, %125
  %147 = phi i32 [ undef, %125 ], [ %325, %323 ]
  %148 = phi i64 [ 0, %125 ], [ %326, %323 ]
  %149 = phi i32 [ 1, %125 ], [ %325, %323 ]
  %150 = icmp eq i64 %129, 0
  br i1 %150, label %165, label %151

151:                                              ; preds = %146, %159
  %152 = phi i64 [ %162, %159 ], [ %148, %146 ]
  %153 = phi i32 [ %161, %159 ], [ %149, %146 ]
  %154 = phi i64 [ %163, %159 ], [ %129, %146 ]
  %155 = icmp eq i64 %152, %126
  br i1 %155, label %159, label %156

156:                                              ; preds = %151
  %157 = getelementptr inbounds i32, i32* %123, i64 %152
  %158 = load i32, i32* %157, align 4
  br label %159

159:                                              ; preds = %156, %151
  %160 = phi i32 [ %158, %156 ], [ 1, %151 ]
  %161 = mul nsw i32 %160, %153
  %162 = add nuw nsw i64 %152, 1
  %163 = add i64 %154, -1
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %165, label %151, !llvm.loop !8

165:                                              ; preds = %146, %159, %114
  %166 = phi i32 [ 1, %114 ], [ %147, %146 ], [ %161, %159 ]
  %167 = icmp sgt i32 %115, 5
  %168 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %169 = sext i32 %117 to i64
  %170 = getelementptr inbounds i32, i32* %121, i64 %169
  %171 = bitcast %union.anon* %119 to [5 x i32]*
  %172 = getelementptr inbounds [5 x i32], [5 x i32]* %171, i64 0, i64 %169
  %173 = select i1 %118, i32* %170, i32* %172
  %174 = load i32, i32* %173, align 4
  %175 = getelementptr inbounds %union.anon, %union.anon* %168, i64 0, i32 0
  %176 = load i32*, i32** %175, align 8
  %177 = getelementptr inbounds i32, i32* %176, i64 %169
  %178 = bitcast %union.anon* %168 to [5 x i32]*
  %179 = getelementptr inbounds [5 x i32], [5 x i32]* %178, i64 0, i64 %169
  %180 = select i1 %167, i32* %177, i32* %179
  %181 = load i32, i32* %180, align 4
  %182 = icmp slt i32 %181, %174
  %183 = select i1 %182, i32 %181, i32 %174
  %184 = icmp sgt i32 %166, 0
  br i1 %184, label %185, label %286

185:                                              ; preds = %165
  %186 = icmp sgt i32 %183, 0
  %187 = sext i32 %183 to i64
  %188 = zext i32 %166 to i64
  %189 = fsub double -0.000000e+00, %46
  %190 = icmp slt i32 %181, %174
  %191 = select i1 %190, i32 %181, i32 %174
  br label %192

192:                                              ; preds = %196, %185
  %193 = phi i64 [ 0, %185 ], [ %197, %196 ]
  br i1 %186, label %194, label %196

194:                                              ; preds = %192
  %195 = mul nsw i64 %193, %187
  br label %199

196:                                              ; preds = %244, %192
  %197 = add nuw nsw i64 %193, 1
  %198 = icmp eq i64 %197, %188
  br i1 %198, label %286, label %192

199:                                              ; preds = %244, %194
  %200 = phi i64 [ 0, %194 ], [ %256, %244 ]
  %201 = trunc i64 %200 to i32
  %202 = add i32 %37, %201
  %203 = icmp slt i32 %191, %202
  %204 = select i1 %203, i32 %191, i32 %202
  %205 = sext i32 %204 to i64
  %206 = trunc i64 %200 to i32
  %207 = sub i32 %206, %37
  %208 = icmp sgt i32 %207, 0
  %209 = select i1 %208, i32 %207, i32 0
  %210 = zext i32 %209 to i64
  %211 = xor i64 %210, -1
  %212 = add nsw i64 %211, %205
  %213 = trunc i64 %200 to i32
  %214 = sub i32 %213, %37
  %215 = icmp sgt i32 %214, 0
  %216 = select i1 %215, i32 %214, i32 0
  %217 = add nsw i32 %37, %213
  %218 = icmp slt i32 %217, %183
  %219 = select i1 %218, i32 %217, i32 %183
  %220 = icmp slt i32 %216, %219
  br i1 %220, label %221, label %244

221:                                              ; preds = %199
  %222 = sub nsw i64 %205, %210
  %223 = zext i32 %216 to i64
  %224 = sext i32 %219 to i64
  %225 = and i64 %222, 3
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %239, label %227

227:                                              ; preds = %221, %227
  %228 = phi i64 [ %236, %227 ], [ %223, %221 ]
  %229 = phi float [ %235, %227 ], [ 0.000000e+00, %221 ]
  %230 = phi i64 [ %237, %227 ], [ %225, %221 ]
  %231 = add nsw i64 %228, %195
  %232 = getelementptr inbounds float, float* %81, i64 %231
  %233 = load float, float* %232, align 4
  %234 = fmul float %233, %233
  %235 = fadd float %229, %234
  %236 = add nuw nsw i64 %228, 1
  %237 = add i64 %230, -1
  %238 = icmp eq i64 %237, 0
  br i1 %238, label %239, label %227, !llvm.loop !10

239:                                              ; preds = %227, %221
  %240 = phi i64 [ %223, %221 ], [ %236, %227 ]
  %241 = phi float [ 0.000000e+00, %221 ], [ %235, %227 ]
  %242 = phi float [ undef, %221 ], [ %235, %227 ]
  %243 = icmp ult i64 %212, 3
  br i1 %243, label %244, label %258

244:                                              ; preds = %239, %258, %199
  %245 = phi float [ 0.000000e+00, %199 ], [ %242, %239 ], [ %283, %258 ]
  %246 = fpext float %245 to double
  %247 = fmul double %43, %246
  %248 = fadd double %247, %40
  %249 = tail call double @pow(double %248, double %189) #11
  %250 = fptrunc double %249 to float
  %251 = add nsw i64 %200, %195
  %252 = getelementptr inbounds float, float* %81, i64 %251
  %253 = load float, float* %252, align 4
  %254 = fmul float %253, %250
  %255 = getelementptr inbounds float, float* %116, i64 %251
  store float %254, float* %255, align 4
  %256 = add nuw nsw i64 %200, 1
  %257 = icmp slt i64 %256, %187
  br i1 %257, label %199, label %196

258:                                              ; preds = %239, %258
  %259 = phi i64 [ %284, %258 ], [ %240, %239 ]
  %260 = phi float [ %283, %258 ], [ %241, %239 ]
  %261 = add nsw i64 %259, %195
  %262 = getelementptr inbounds float, float* %81, i64 %261
  %263 = load float, float* %262, align 4
  %264 = fmul float %263, %263
  %265 = fadd float %260, %264
  %266 = add nuw nsw i64 %259, 1
  %267 = add nsw i64 %266, %195
  %268 = getelementptr inbounds float, float* %81, i64 %267
  %269 = load float, float* %268, align 4
  %270 = fmul float %269, %269
  %271 = fadd float %265, %270
  %272 = add nuw nsw i64 %259, 2
  %273 = add nsw i64 %272, %195
  %274 = getelementptr inbounds float, float* %81, i64 %273
  %275 = load float, float* %274, align 4
  %276 = fmul float %275, %275
  %277 = fadd float %271, %276
  %278 = add nuw nsw i64 %259, 3
  %279 = add nsw i64 %278, %195
  %280 = getelementptr inbounds float, float* %81, i64 %279
  %281 = load float, float* %280, align 4
  %282 = fmul float %281, %281
  %283 = fadd float %277, %282
  %284 = add nuw nsw i64 %259, 4
  %285 = icmp slt i64 %284, %224
  br i1 %285, label %258, label %244

286:                                              ; preds = %196, %165
  %287 = xor i1 %167, true
  %288 = icmp eq i32* %176, null
  %289 = or i1 %288, %287
  br i1 %289, label %292, label %290

290:                                              ; preds = %286
  %291 = bitcast i32* %176 to i8*
  tail call void @_ZdaPv(i8* %291) #12
  br label %292

292:                                              ; preds = %286, %290
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %82) #11
  %293 = xor i1 %118, true
  %294 = icmp eq i32* %121, null
  %295 = or i1 %294, %293
  br i1 %295, label %298, label %296

296:                                              ; preds = %292
  %297 = bitcast i32* %121 to i8*
  tail call void @_ZdaPv(i8* %297) #12
  br label %298

298:                                              ; preds = %292, %296
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %47) #11
  br label %302

299:                                              ; preds = %30
  %300 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %301 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %300, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %301(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.14, i64 0, i64 0), i32 %33) #11
  br label %302

302:                                              ; preds = %298, %299
  %303 = phi i32 [ 0, %298 ], [ 1, %299 ]
  ret i32 %303

304:                                              ; preds = %141
  %305 = getelementptr inbounds i32, i32* %123, i64 %144
  %306 = load i32, i32* %305, align 4
  br label %307

307:                                              ; preds = %304, %141
  %308 = phi i32 [ %306, %304 ], [ 1, %141 ]
  %309 = mul nsw i32 %308, %143
  %310 = or i64 %134, 2
  %311 = icmp eq i64 %310, %126
  br i1 %311, label %315, label %312

312:                                              ; preds = %307
  %313 = getelementptr inbounds i32, i32* %123, i64 %310
  %314 = load i32, i32* %313, align 4
  br label %315

315:                                              ; preds = %312, %307
  %316 = phi i32 [ %314, %312 ], [ 1, %307 ]
  %317 = mul nsw i32 %316, %309
  %318 = or i64 %134, 3
  %319 = icmp eq i64 %318, %126
  br i1 %319, label %323, label %320

320:                                              ; preds = %315
  %321 = getelementptr inbounds i32, i32* %123, i64 %318
  %322 = load i32, i32* %321, align 4
  br label %323

323:                                              ; preds = %320, %315
  %324 = phi i32 [ %322, %320 ], [ 1, %315 ]
  %325 = mul nsw i32 %324, %317
  %326 = add nuw nsw i64 %134, 4
  %327 = add i64 %136, -4
  %328 = icmp eq i64 %327, 0
  br i1 %328, label %146, label %133
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin40Register_LOCAL_RESPONSE_NORM_GENERIC_OPTEv() local_unnamed_addr #3 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin40Register_LOCAL_RESPONSE_NORM_GENERIC_OPTEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin19local_response_norm4EvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #0 comdat {
  %3 = alloca %"struct.tflite::LocalResponseNormalizationParams", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 5
  %7 = bitcast i8** %6 to %struct.TfLiteLocalResponseNormParams**
  %8 = load %struct.TfLiteLocalResponseNormParams*, %struct.TfLiteLocalResponseNormParams** %7, align 8
  %9 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %10 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %9, align 8
  %11 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %10, i64 0, i32 1, i64 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %16 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %15, align 8
  %17 = sext i32 %12 to i64
  %18 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 %17
  br label %19

19:                                               ; preds = %2, %14
  %20 = phi %struct.TfLiteTensor* [ %18, %14 ], [ null, %2 ]
  %21 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %22 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %21, align 8
  %23 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %22, i64 0, i32 1, i64 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %19
  %27 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %28 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %27, align 8
  %29 = sext i32 %24 to i64
  %30 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 %29
  br label %31

31:                                               ; preds = %19, %26
  %32 = phi %struct.TfLiteTensor* [ %30, %26 ], [ null, %19 ]
  %33 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 0
  %34 = load i32, i32* %33, align 8
  %35 = icmp eq i32 %34, 1
  br i1 %35, label %36, label %141

36:                                               ; preds = %31
  %37 = bitcast %"struct.tflite::LocalResponseNormalizationParams"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %37) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %37, i8* align 8 bitcast ({ i32, [4 x i8], double, double, double }* @__const._ZN6tflite3ops7builtin19local_response_norm4EvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode.op_params to i8*), i64 32, i1 false)
  %38 = getelementptr inbounds %struct.TfLiteLocalResponseNormParams, %struct.TfLiteLocalResponseNormParams* %8, i64 0, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %"struct.tflite::LocalResponseNormalizationParams", %"struct.tflite::LocalResponseNormalizationParams"* %3, i64 0, i32 0
  store i32 %39, i32* %40, align 8
  %41 = getelementptr inbounds %struct.TfLiteLocalResponseNormParams, %struct.TfLiteLocalResponseNormParams* %8, i64 0, i32 1
  %42 = load float, float* %41, align 4
  %43 = fpext float %42 to double
  %44 = getelementptr inbounds %"struct.tflite::LocalResponseNormalizationParams", %"struct.tflite::LocalResponseNormalizationParams"* %3, i64 0, i32 1
  store double %43, double* %44, align 8
  %45 = getelementptr inbounds %struct.TfLiteLocalResponseNormParams, %struct.TfLiteLocalResponseNormParams* %8, i64 0, i32 2
  %46 = load float, float* %45, align 4
  %47 = fpext float %46 to double
  %48 = getelementptr inbounds %"struct.tflite::LocalResponseNormalizationParams", %"struct.tflite::LocalResponseNormalizationParams"* %3, i64 0, i32 2
  store double %47, double* %48, align 8
  %49 = getelementptr inbounds %struct.TfLiteLocalResponseNormParams, %struct.TfLiteLocalResponseNormParams* %8, i64 0, i32 3
  %50 = load float, float* %49, align 4
  %51 = fpext float %50 to double
  %52 = getelementptr inbounds %"struct.tflite::LocalResponseNormalizationParams", %"struct.tflite::LocalResponseNormalizationParams"* %3, i64 0, i32 3
  store double %51, double* %52, align 8
  %53 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %53) #11
  %54 = icmp eq %struct.TfLiteTensor* %20, null
  br i1 %54, label %55, label %57

55:                                               ; preds = %36
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %56, align 8, !alias.scope !11
  br label %85

57:                                               ; preds = %36
  %58 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %20, i64 0, i32 2
  %59 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %58, align 8, !noalias !11
  %60 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %59, i64 0, i32 0
  %61 = load i32, i32* %60, align 4, !noalias !11
  %62 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %59, i64 0, i32 1, i64 0
  %63 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %61, i32* %63, align 8, !alias.scope !11
  %64 = icmp sgt i32 %61, 5
  br i1 %64, label %65, label %72

65:                                               ; preds = %57
  %66 = sext i32 %61 to i64
  %67 = shl nsw i64 %66, 2
  %68 = tail call i8* @_Znam(i64 %67) #12, !noalias !11
  %69 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %70 = bitcast i32** %69 to i8**
  store i8* %68, i8** %70, align 8, !alias.scope !11
  %71 = bitcast i8* %68 to i32*
  br label %77

72:                                               ; preds = %57
  %73 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %74 = bitcast %union.anon* %73 to i32*
  %75 = sext i32 %61 to i64
  %76 = shl nsw i64 %75, 2
  br label %77

77:                                               ; preds = %72, %65
  %78 = phi i64 [ %67, %65 ], [ %76, %72 ]
  %79 = phi i32* [ %71, %65 ], [ %74, %72 ]
  %80 = bitcast i32* %79 to i8*
  %81 = bitcast i32* %62 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %80, i8* align 4 %81, i64 %78, i1 false) #11
  %82 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %20, i64 0, i32 1
  %83 = bitcast %union.TfLitePtrUnion* %82 to float**
  %84 = load float*, float** %83, align 8
  br label %85

85:                                               ; preds = %55, %77
  %86 = phi float* [ %84, %77 ], [ null, %55 ]
  %87 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %87) #11
  %88 = icmp eq %struct.TfLiteTensor* %32, null
  br i1 %88, label %89, label %91

89:                                               ; preds = %85
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %90, align 8, !alias.scope !14
  br label %119

91:                                               ; preds = %85
  %92 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 2
  %93 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %92, align 8, !noalias !14
  %94 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %93, i64 0, i32 0
  %95 = load i32, i32* %94, align 4, !noalias !14
  %96 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %93, i64 0, i32 1, i64 0
  %97 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %95, i32* %97, align 8, !alias.scope !14
  %98 = icmp sgt i32 %95, 5
  br i1 %98, label %99, label %106

99:                                               ; preds = %91
  %100 = sext i32 %95 to i64
  %101 = shl nsw i64 %100, 2
  %102 = tail call i8* @_Znam(i64 %101) #12, !noalias !14
  %103 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %104 = bitcast i32** %103 to i8**
  store i8* %102, i8** %104, align 8, !alias.scope !14
  %105 = bitcast i8* %102 to i32*
  br label %111

106:                                              ; preds = %91
  %107 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %108 = bitcast %union.anon* %107 to i32*
  %109 = sext i32 %95 to i64
  %110 = shl nsw i64 %109, 2
  br label %111

111:                                              ; preds = %106, %99
  %112 = phi i64 [ %101, %99 ], [ %110, %106 ]
  %113 = phi i32* [ %105, %99 ], [ %108, %106 ]
  %114 = bitcast i32* %113 to i8*
  %115 = bitcast i32* %96 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %114, i8* align 4 %115, i64 %112, i1 false) #11
  %116 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 1
  %117 = bitcast %union.TfLitePtrUnion* %116 to float**
  %118 = load float*, float** %117, align 8
  br label %119

119:                                              ; preds = %89, %111
  %120 = phi float* [ %118, %111 ], [ null, %89 ]
  call void @_ZN6tflite13optimized_ops26LocalResponseNormalizationERKNS_32LocalResponseNormalizationParamsERKNS_12RuntimeShapeEPKfS6_Pf(%"struct.tflite::LocalResponseNormalizationParams"* nonnull dereferenceable(32) %3, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %4, float* %86, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %5, float* %120)
  %121 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %122 = load i32, i32* %121, align 8
  %123 = icmp sgt i32 %122, 5
  br i1 %123, label %124, label %130

124:                                              ; preds = %119
  %125 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %126 = load i32*, i32** %125, align 8
  %127 = icmp eq i32* %126, null
  br i1 %127, label %130, label %128

128:                                              ; preds = %124
  %129 = bitcast i32* %126 to i8*
  call void @_ZdaPv(i8* %129) #12
  br label %130

130:                                              ; preds = %119, %124, %128
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %87) #11
  %131 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  %132 = load i32, i32* %131, align 8
  %133 = icmp sgt i32 %132, 5
  br i1 %133, label %134, label %140

134:                                              ; preds = %130
  %135 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %136 = load i32*, i32** %135, align 8
  %137 = icmp eq i32* %136, null
  br i1 %137, label %140, label %138

138:                                              ; preds = %134
  %139 = bitcast i32* %136 to i8*
  call void @_ZdaPv(i8* %139) #12
  br label %140

140:                                              ; preds = %130, %134, %138
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %53) #11
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %37) #11
  br label %144

141:                                              ; preds = %31
  %142 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %143 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %142, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %143(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.14, i64 0, i64 0), i32 %34) #11
  br label %144

144:                                              ; preds = %140, %141
  %145 = phi i32 [ 0, %140 ], [ 1, %141 ]
  ret i32 %145
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin37Register_LOCAL_RESPONSE_NORMALIZATIONEv() local_unnamed_addr #3 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin40Register_LOCAL_RESPONSE_NORM_GENERIC_OPTEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #6

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13optimized_ops26LocalResponseNormalizationERKNS_32LocalResponseNormalizationParamsERKNS_12RuntimeShapeEPKfS6_Pf(%"struct.tflite::LocalResponseNormalizationParams"* dereferenceable(32), %"class.tflite::RuntimeShape"* dereferenceable(32), float*, %"class.tflite::RuntimeShape"* dereferenceable(32), float*) local_unnamed_addr #7 comdat {
  %6 = alloca %"struct.Eigen::internal::evaluator.124", align 8
  %7 = alloca %"struct.Eigen::internal::evaluator.142", align 8
  %8 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel.147", align 8
  %9 = alloca %"struct.Eigen::internal::assign_op", align 1
  %10 = alloca %"class.Eigen::Matrix", align 8
  %11 = alloca %"class.Eigen::Block.42", align 8
  %12 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %15 = icmp sgt i32 %13, 0
  br i1 %15, label %22, label %16

16:                                               ; preds = %5
  %17 = add nsw i32 %13, -1
  %18 = bitcast %union.anon* %14 to [5 x i32]*
  %19 = sext i32 %17 to i64
  %20 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %19
  %21 = load i32, i32* %20, align 4, !noalias !17
  br label %78

22:                                               ; preds = %5
  %23 = icmp sgt i32 %13, 5
  %24 = zext i32 %13 to i64
  %25 = add nsw i32 %13, -1
  %26 = getelementptr inbounds %union.anon, %union.anon* %14, i64 0, i32 0
  %27 = load i32*, i32** %26, align 8
  %28 = sext i32 %25 to i64
  %29 = getelementptr inbounds i32, i32* %27, i64 %28
  %30 = bitcast %union.anon* %14 to [5 x i32]*
  %31 = sext i32 %25 to i64
  %32 = getelementptr inbounds [5 x i32], [5 x i32]* %30, i64 0, i64 %31
  %33 = bitcast %union.anon* %14 to i32*
  %34 = select i1 %23, i32* %27, i32* %33
  %35 = select i1 %23, i32* %29, i32* %32
  %36 = load i32, i32* %35, align 4, !noalias !17
  %37 = zext i32 %25 to i64
  %38 = add nsw i64 %24, -1
  %39 = and i64 %24, 3
  %40 = icmp ult i64 %38, 3
  br i1 %40, label %56, label %41

41:                                               ; preds = %22
  %42 = sub nsw i64 %24, %39
  br label %43

43:                                               ; preds = %904, %41
  %44 = phi i64 [ 0, %41 ], [ %907, %904 ]
  %45 = phi i32 [ 1, %41 ], [ %906, %904 ]
  %46 = phi i64 [ %42, %41 ], [ %908, %904 ]
  %47 = icmp eq i64 %44, %37
  br i1 %47, label %51, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds i32, i32* %34, i64 %44
  %50 = load i32, i32* %49, align 4, !noalias !17
  br label %51

51:                                               ; preds = %48, %43
  %52 = phi i32 [ %50, %48 ], [ 1, %43 ]
  %53 = mul nsw i32 %52, %45
  %54 = or i64 %44, 1
  %55 = icmp eq i64 %54, %37
  br i1 %55, label %888, label %885

56:                                               ; preds = %904, %22
  %57 = phi i32 [ undef, %22 ], [ %906, %904 ]
  %58 = phi i64 [ 0, %22 ], [ %907, %904 ]
  %59 = phi i32 [ 1, %22 ], [ %906, %904 ]
  %60 = icmp eq i64 %39, 0
  br i1 %60, label %75, label %61

61:                                               ; preds = %56, %69
  %62 = phi i64 [ %72, %69 ], [ %58, %56 ]
  %63 = phi i32 [ %71, %69 ], [ %59, %56 ]
  %64 = phi i64 [ %73, %69 ], [ %39, %56 ]
  %65 = icmp eq i64 %62, %37
  br i1 %65, label %69, label %66

66:                                               ; preds = %61
  %67 = getelementptr inbounds i32, i32* %34, i64 %62
  %68 = load i32, i32* %67, align 4, !noalias !17
  br label %69

69:                                               ; preds = %66, %61
  %70 = phi i32 [ %68, %66 ], [ 1, %61 ]
  %71 = mul nsw i32 %70, %63
  %72 = add nuw nsw i64 %62, 1
  %73 = add i64 %64, -1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %61, !llvm.loop !20

75:                                               ; preds = %69, %56
  %76 = phi i32 [ %57, %56 ], [ %71, %69 ]
  %77 = sext i32 %76 to i64
  br label %78

78:                                               ; preds = %16, %75
  %79 = phi i32 [ %36, %75 ], [ %21, %16 ]
  %80 = phi i64 [ %77, %75 ], [ 1, %16 ]
  %81 = sext i32 %79 to i64
  %82 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %83 = load i32, i32* %82, align 8, !noalias !21
  %84 = add nsw i32 %83, -1
  %85 = icmp sgt i32 %83, 5
  %86 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  br i1 %85, label %87, label %93

87:                                               ; preds = %78
  %88 = getelementptr inbounds %union.anon, %union.anon* %86, i64 0, i32 0
  %89 = load i32*, i32** %88, align 8, !noalias !21
  %90 = sext i32 %84 to i64
  %91 = getelementptr inbounds i32, i32* %89, i64 %90
  %92 = load i32, i32* %91, align 4, !noalias !21
  br label %100

93:                                               ; preds = %78
  %94 = bitcast %union.anon* %86 to [5 x i32]*
  %95 = sext i32 %84 to i64
  %96 = getelementptr inbounds [5 x i32], [5 x i32]* %94, i64 0, i64 %95
  %97 = load i32, i32* %96, align 4, !noalias !21
  %98 = bitcast %union.anon* %86 to i32*
  %99 = icmp sgt i32 %83, 0
  br i1 %99, label %100, label %145

100:                                              ; preds = %93, %87
  %101 = phi i32* [ %89, %87 ], [ %98, %93 ]
  %102 = phi i32 [ %92, %87 ], [ %97, %93 ]
  %103 = zext i32 %84 to i64
  %104 = zext i32 %83 to i64
  %105 = add nsw i64 %104, -1
  %106 = and i64 %104, 3
  %107 = icmp ult i64 %105, 3
  br i1 %107, label %123, label %108

108:                                              ; preds = %100
  %109 = sub nsw i64 %104, %106
  br label %110

110:                                              ; preds = %879, %108
  %111 = phi i64 [ 0, %108 ], [ %882, %879 ]
  %112 = phi i32 [ 1, %108 ], [ %881, %879 ]
  %113 = phi i64 [ %109, %108 ], [ %883, %879 ]
  %114 = icmp eq i64 %111, %103
  br i1 %114, label %118, label %115

115:                                              ; preds = %110
  %116 = getelementptr inbounds i32, i32* %101, i64 %111
  %117 = load i32, i32* %116, align 4, !noalias !21
  br label %118

118:                                              ; preds = %115, %110
  %119 = phi i32 [ %117, %115 ], [ 1, %110 ]
  %120 = mul nsw i32 %119, %112
  %121 = or i64 %111, 1
  %122 = icmp eq i64 %121, %103
  br i1 %122, label %863, label %860

123:                                              ; preds = %879, %100
  %124 = phi i32 [ undef, %100 ], [ %881, %879 ]
  %125 = phi i64 [ 0, %100 ], [ %882, %879 ]
  %126 = phi i32 [ 1, %100 ], [ %881, %879 ]
  %127 = icmp eq i64 %106, 0
  br i1 %127, label %142, label %128

128:                                              ; preds = %123, %136
  %129 = phi i64 [ %139, %136 ], [ %125, %123 ]
  %130 = phi i32 [ %138, %136 ], [ %126, %123 ]
  %131 = phi i64 [ %140, %136 ], [ %106, %123 ]
  %132 = icmp eq i64 %129, %103
  br i1 %132, label %136, label %133

133:                                              ; preds = %128
  %134 = getelementptr inbounds i32, i32* %101, i64 %129
  %135 = load i32, i32* %134, align 4, !noalias !21
  br label %136

136:                                              ; preds = %133, %128
  %137 = phi i32 [ %135, %133 ], [ 1, %128 ]
  %138 = mul nsw i32 %137, %130
  %139 = add nuw nsw i64 %129, 1
  %140 = add i64 %131, -1
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %142, label %128, !llvm.loop !24

142:                                              ; preds = %136, %123
  %143 = phi i32 [ %124, %123 ], [ %138, %136 ]
  %144 = sext i32 %143 to i64
  br label %145

145:                                              ; preds = %93, %142
  %146 = phi i32 [ %97, %93 ], [ %102, %142 ]
  %147 = phi i64 [ 1, %93 ], [ %144, %142 ]
  %148 = sext i32 %146 to i64
  %149 = ptrtoint float* %4 to i64
  %150 = getelementptr inbounds %"struct.tflite::LocalResponseNormalizationParams", %"struct.tflite::LocalResponseNormalizationParams"* %0, i64 0, i32 0
  %151 = load i32, i32* %150, align 8
  %152 = shl nsw i32 %151, 1
  %153 = bitcast %"class.Eigen::Matrix"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %153) #11
  %154 = getelementptr inbounds %"class.Eigen::Matrix", %"class.Eigen::Matrix"* %10, i64 0, i32 0, i32 0, i32 0
  %155 = getelementptr inbounds %"class.Eigen::Matrix", %"class.Eigen::Matrix"* %10, i64 0, i32 0, i32 0, i32 1
  %156 = sext i32 %152 to i64
  %157 = add nsw i64 %156, %81
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %153, i8 0, i64 16, i1 false) #11
  %158 = icmp eq i64 %157, 0
  br i1 %158, label %181, label %159

159:                                              ; preds = %145
  %160 = icmp sgt i64 %157, 0
  br i1 %160, label %161, label %180

161:                                              ; preds = %159
  %162 = icmp ugt i64 %157, 4611686018427387903
  br i1 %162, label %163, label %165

163:                                              ; preds = %161
  %164 = tail call i8* @_Znwm(i64 -1) #11
  br label %165

165:                                              ; preds = %163, %161
  %166 = shl nsw i64 %157, 2
  %167 = add nsw i64 %166, 64
  %168 = tail call noalias i8* @malloc(i64 %167) #11
  %169 = icmp eq i8* %168, null
  br i1 %169, label %178, label %170

170:                                              ; preds = %165
  %171 = ptrtoint i8* %168 to i64
  %172 = add i64 %171, 64
  %173 = and i64 %172, -64
  %174 = inttoptr i64 %173 to i8*
  %175 = inttoptr i64 %173 to i8**
  %176 = getelementptr inbounds i8*, i8** %175, i64 -1
  store i8* %168, i8** %176, align 8
  %177 = icmp eq i64 %173, 0
  br i1 %177, label %178, label %184

178:                                              ; preds = %165, %170
  %179 = tail call i8* @_Znwm(i64 -1) #11
  br label %184

180:                                              ; preds = %159
  store float* null, float** %154, align 8
  br label %181

181:                                              ; preds = %145, %180
  store i64 %157, i64* %155, align 8
  %182 = sdiv i64 %157, 4
  %183 = shl nsw i64 %182, 2
  br label %198

184:                                              ; preds = %170, %178
  %185 = phi i8* [ null, %178 ], [ %174, %170 ]
  %186 = bitcast %"class.Eigen::Matrix"* %10 to i8**
  store i8* %185, i8** %186, align 8
  %187 = bitcast i8* %185 to float*
  store i64 %157, i64* %155, align 8
  %188 = lshr i64 %157, 2
  %189 = and i64 %157, -4
  %190 = icmp sgt i64 %157, 3
  br i1 %190, label %191, label %198

191:                                              ; preds = %184
  %192 = icmp sgt i64 %189, 4
  %193 = select i1 %192, i64 %189, i64 4
  %194 = add nuw nsw i64 %193, 4611686018427387903
  %195 = lshr i64 %194, 2
  %196 = shl i64 %195, 4
  %197 = add i64 %196, 16
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %185, i8 0, i64 %197, i1 false) #11
  br label %198

198:                                              ; preds = %181, %191, %184
  %199 = phi i64 [ %183, %181 ], [ %189, %191 ], [ %189, %184 ]
  %200 = phi i64 [ %182, %181 ], [ %188, %191 ], [ %188, %184 ]
  %201 = phi float* [ null, %181 ], [ %187, %191 ], [ %187, %184 ]
  %202 = icmp slt i64 %199, %157
  br i1 %202, label %203, label %209

203:                                              ; preds = %198
  %204 = getelementptr float, float* %201, i64 %199
  %205 = bitcast float* %204 to i8*
  %206 = shl nsw i64 %157, 2
  %207 = shl nsw i64 %200, 4
  %208 = sub nsw i64 %206, %207
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %205, i8 0, i64 %208, i1 false) #11
  br label %209

209:                                              ; preds = %198, %203
  %210 = icmp sgt i64 %80, 0
  br i1 %210, label %211, label %249

211:                                              ; preds = %209
  %212 = getelementptr inbounds %"struct.tflite::LocalResponseNormalizationParams", %"struct.tflite::LocalResponseNormalizationParams"* %0, i64 0, i32 2
  %213 = bitcast %"class.Eigen::Block.42"* %11 to i8*
  %214 = getelementptr inbounds %"class.Eigen::Block.42", %"class.Eigen::Block.42"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %215 = getelementptr inbounds %"class.Eigen::Block.42", %"class.Eigen::Block.42"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %216 = getelementptr inbounds %"class.Eigen::Block.42", %"class.Eigen::Block.42"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  %217 = getelementptr inbounds %"class.Eigen::Block.42", %"class.Eigen::Block.42"* %11, i64 0, i32 0, i32 0, i32 1
  %218 = getelementptr inbounds %"class.Eigen::Block.42", %"class.Eigen::Block.42"* %11, i64 0, i32 0, i32 0, i32 2, i32 0
  %219 = getelementptr inbounds %"class.Eigen::Block.42", %"class.Eigen::Block.42"* %11, i64 0, i32 0, i32 0, i32 3, i32 0
  %220 = getelementptr inbounds %"class.Eigen::Block.42", %"class.Eigen::Block.42"* %11, i64 0, i32 0, i32 0, i32 4
  %221 = getelementptr inbounds %"class.Eigen::Block.42", %"class.Eigen::Block.42"* %11, i64 0, i32 0, i32 0
  %222 = getelementptr inbounds %"struct.Eigen::internal::assign_op", %"struct.Eigen::internal::assign_op"* %9, i64 0, i32 0
  %223 = getelementptr inbounds %"struct.Eigen::internal::evaluator.124", %"struct.Eigen::internal::evaluator.124"* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %224 = getelementptr inbounds %"struct.Eigen::internal::evaluator.124", %"struct.Eigen::internal::evaluator.124"* %6, i64 0, i32 0, i32 0, i32 1
  %225 = bitcast %"struct.Eigen::internal::evaluator.127"* %224 to i64*
  %226 = getelementptr inbounds %"struct.Eigen::internal::evaluator.124", %"struct.Eigen::internal::evaluator.124"* %6, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  %227 = getelementptr inbounds %"struct.Eigen::internal::evaluator.124", %"struct.Eigen::internal::evaluator.124"* %6, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %228 = bitcast %"struct.Eigen::internal::evaluator.132"* %227 to i64*
  %229 = getelementptr inbounds %"struct.Eigen::internal::evaluator.124", %"struct.Eigen::internal::evaluator.124"* %6, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2, i32 0
  %230 = getelementptr inbounds %"struct.Eigen::internal::evaluator.124", %"struct.Eigen::internal::evaluator.124"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %231 = bitcast %"struct.Eigen::internal::evaluator.142"* %7 to i8*
  %232 = getelementptr inbounds %"struct.Eigen::internal::evaluator.142", %"struct.Eigen::internal::evaluator.142"* %7, i64 0, i32 0, i32 0, i32 1, i32 0
  %233 = bitcast i8* %232 to i64*
  %234 = bitcast %"struct.Eigen::internal::evaluator.142"* %7 to i64*
  %235 = getelementptr inbounds %"struct.Eigen::internal::evaluator.142", %"struct.Eigen::internal::evaluator.142"* %7, i64 0, i32 0, i32 0, i32 2, i32 0
  %236 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.147"* %8 to i8*
  %237 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.147", %"class.Eigen::internal::generic_dense_assignment_kernel.147"* %8, i64 0, i32 0
  %238 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.147", %"class.Eigen::internal::generic_dense_assignment_kernel.147"* %8, i64 0, i32 1
  %239 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.147", %"class.Eigen::internal::generic_dense_assignment_kernel.147"* %8, i64 0, i32 2
  %240 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.147", %"class.Eigen::internal::generic_dense_assignment_kernel.147"* %8, i64 0, i32 3
  %241 = bitcast %"class.Eigen::Block.42"** %240 to %"class.Eigen::internal::BlockImpl_dense.44"**
  %242 = icmp sgt i32 %151, 0
  %243 = icmp sgt i32 %79, 0
  %244 = getelementptr inbounds %"struct.tflite::LocalResponseNormalizationParams", %"struct.tflite::LocalResponseNormalizationParams"* %0, i64 0, i32 1
  %245 = and i64 %81, 1
  %246 = icmp eq i32 %79, 1
  %247 = sub nsw i64 %81, %245
  %248 = icmp eq i64 %245, 0
  br label %253

249:                                              ; preds = %295, %209
  %250 = getelementptr inbounds %"struct.tflite::LocalResponseNormalizationParams", %"struct.tflite::LocalResponseNormalizationParams"* %0, i64 0, i32 3
  %251 = load double, double* %250, align 8
  %252 = fcmp oeq double %251, 1.000000e+00
  br i1 %252, label %335, label %561

253:                                              ; preds = %298, %211
  %254 = phi i64 [ %157, %211 ], [ %300, %298 ]
  %255 = phi float* [ %201, %211 ], [ %299, %298 ]
  %256 = phi i64 [ 0, %211 ], [ %296, %298 ]
  %257 = mul nsw i64 %256, %81
  %258 = getelementptr inbounds float, float* %2, i64 %257
  %259 = load double, double* %212, align 8, !noalias !25
  %260 = fptrunc double %259 to float
  %261 = ptrtoint float* %258 to i64
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %213) #11
  %262 = load i32, i32* %150, align 8
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds float, float* %255, i64 %263
  store float* %264, float** %214, align 8, !alias.scope !28
  store i64 %81, i64* %215, align 8, !alias.scope !28
  store i64 1, i64* %216, align 8, !alias.scope !28
  store %"class.Eigen::Matrix"* %10, %"class.Eigen::Matrix"** %217, align 8, !alias.scope !28
  store i64 %263, i64* %218, align 8, !alias.scope !28
  store i64 0, i64* %219, align 8, !alias.scope !28
  store i64 %254, i64* %220, align 8, !alias.scope !28
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %222) #11
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %223) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %223, i8* align 8 getelementptr inbounds ({ { { [8 x i8], { { { { { { { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } }, { { { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } } } } } }, %"struct.Eigen::internal::evaluator.136" } } }, { { { [8 x i8], { { { { { { { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } }, { { { { float*, %"class.Eigen::internal::variable_if_dynamic.35", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } } } } } }, %"struct.Eigen::internal::evaluator.136" } } }* @__const._ZN5Eigen8internal26call_dense_assignment_loopINS_5BlockINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELin1ELin1ELb0EEENS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS6_IS8_KNS2_IKNS_3MapIKNS3_IfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEELin1ELi1ELb1EEESH_EEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS4_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_.srcEvaluator, i64 0, i32 0, i32 0, i32 0, i64 0), i64 64, i1 false) #11
  store i64 %261, i64* %225, align 8
  store i64 %81, i64* %226, align 8
  store i64 %261, i64* %228, align 8
  store i64 %81, i64* %229, align 8
  store float %260, float* %230, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %231) #11
  store i64 -6148914691236517206, i64* %233, align 8
  %265 = ptrtoint float* %264 to i64
  store i64 %265, i64* %234, align 8
  store i64 %254, i64* %235, align 8
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %236) #11
  store %"struct.Eigen::internal::evaluator.142"* %7, %"struct.Eigen::internal::evaluator.142"** %237, align 8
  store %"struct.Eigen::internal::evaluator.124"* %6, %"struct.Eigen::internal::evaluator.124"** %238, align 8
  store %"struct.Eigen::internal::assign_op"* %9, %"struct.Eigen::internal::assign_op"** %239, align 8
  store %"class.Eigen::internal::BlockImpl_dense.44"* %221, %"class.Eigen::internal::BlockImpl_dense.44"** %241, align 8
  call void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5BlockINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELin1ELin1ELb0EEEEENS3_INS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS9_ISB_KNS4_IKNS_3MapIKNS5_IfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEELin1ELi1ELb1EEESK_EEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS6_EEEEEENS0_9assign_opIffEELi0EEELi4ELi0EE3runERSX_(%"class.Eigen::internal::generic_dense_assignment_kernel.147"* nonnull dereferenceable(32) %8) #11
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %236) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %231) #11
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %223) #11
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %222) #11
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %213) #11
  br i1 %242, label %266, label %268

266:                                              ; preds = %253
  %267 = load float*, float** %154, align 8
  br label %273

268:                                              ; preds = %273, %253
  %269 = phi float [ 0.000000e+00, %253 ], [ %278, %273 ]
  br i1 %243, label %270, label %295

270:                                              ; preds = %268
  %271 = mul nsw i64 %256, %148
  %272 = load float*, float** %154, align 8
  br i1 %246, label %281, label %301

273:                                              ; preds = %266, %273
  %274 = phi i64 [ 0, %266 ], [ %279, %273 ]
  %275 = phi float [ 0.000000e+00, %266 ], [ %278, %273 ]
  %276 = getelementptr inbounds float, float* %267, i64 %274
  %277 = load float, float* %276, align 4
  %278 = fadd float %275, %277
  %279 = add nuw nsw i64 %274, 1
  %280 = icmp slt i64 %279, %156
  br i1 %280, label %273, label %268

281:                                              ; preds = %301, %270
  %282 = phi i64 [ 0, %270 ], [ %332, %301 ]
  %283 = phi float [ %269, %270 ], [ %331, %301 ]
  br i1 %248, label %295, label %284

284:                                              ; preds = %281
  %285 = add nsw i64 %282, %156
  %286 = getelementptr inbounds float, float* %272, i64 %285
  %287 = load float, float* %286, align 4
  %288 = fadd float %283, %287
  %289 = load double, double* %244, align 8
  %290 = fpext float %288 to double
  %291 = fadd double %289, %290
  %292 = fptrunc double %291 to float
  %293 = add nsw i64 %282, %271
  %294 = getelementptr inbounds float, float* %4, i64 %293
  store float %292, float* %294, align 4
  br label %295

295:                                              ; preds = %284, %281, %268
  %296 = add nuw nsw i64 %256, 1
  %297 = icmp eq i64 %296, %80
  br i1 %297, label %249, label %298

298:                                              ; preds = %295
  %299 = load float*, float** %154, align 8, !noalias !28
  %300 = load i64, i64* %155, align 8, !noalias !28
  br label %253

301:                                              ; preds = %270, %301
  %302 = phi i64 [ %332, %301 ], [ 0, %270 ]
  %303 = phi float [ %331, %301 ], [ %269, %270 ]
  %304 = phi i64 [ %333, %301 ], [ %247, %270 ]
  %305 = add nsw i64 %302, %156
  %306 = getelementptr inbounds float, float* %272, i64 %305
  %307 = load float, float* %306, align 4
  %308 = fadd float %303, %307
  %309 = load double, double* %244, align 8
  %310 = fpext float %308 to double
  %311 = fadd double %309, %310
  %312 = fptrunc double %311 to float
  %313 = add nsw i64 %302, %271
  %314 = getelementptr inbounds float, float* %4, i64 %313
  store float %312, float* %314, align 4
  %315 = getelementptr inbounds float, float* %272, i64 %302
  %316 = load float, float* %315, align 4
  %317 = fsub float %308, %316
  %318 = or i64 %302, 1
  %319 = add nsw i64 %318, %156
  %320 = getelementptr inbounds float, float* %272, i64 %319
  %321 = load float, float* %320, align 4
  %322 = fadd float %317, %321
  %323 = load double, double* %244, align 8
  %324 = fpext float %322 to double
  %325 = fadd double %323, %324
  %326 = fptrunc double %325 to float
  %327 = add nsw i64 %318, %271
  %328 = getelementptr inbounds float, float* %4, i64 %327
  store float %326, float* %328, align 4
  %329 = getelementptr inbounds float, float* %272, i64 %318
  %330 = load float, float* %329, align 4
  %331 = fsub float %322, %330
  %332 = add nuw nsw i64 %302, 2
  %333 = add i64 %304, -2
  %334 = icmp eq i64 %333, 0
  br i1 %334, label %281, label %301

335:                                              ; preds = %249
  %336 = mul nsw i64 %147, %148
  %337 = and i64 %149, 3
  %338 = icmp eq i64 %337, 0
  br i1 %338, label %339, label %345

339:                                              ; preds = %335
  %340 = lshr i64 %149, 2
  %341 = sub nsw i64 0, %340
  %342 = and i64 %341, 3
  %343 = icmp slt i64 %342, %336
  %344 = select i1 %343, i64 %342, i64 %336
  br label %345

345:                                              ; preds = %339, %335
  %346 = phi i64 [ %344, %339 ], [ %336, %335 ]
  %347 = sub nsw i64 %336, %346
  %348 = sdiv i64 %347, 4
  %349 = shl nsw i64 %348, 2
  %350 = add nsw i64 %349, %346
  %351 = icmp sgt i64 %346, 0
  br i1 %351, label %352, label %442

352:                                              ; preds = %345
  %353 = icmp ult i64 %346, 4
  br i1 %353, label %409, label %354

354:                                              ; preds = %352
  %355 = getelementptr float, float* %4, i64 %346
  %356 = getelementptr float, float* %2, i64 %346
  %357 = icmp ugt float* %356, %4
  %358 = icmp ugt float* %355, %2
  %359 = and i1 %357, %358
  br i1 %359, label %409, label %360

360:                                              ; preds = %354
  %361 = and i64 %346, -4
  %362 = add i64 %361, -4
  %363 = lshr exact i64 %362, 2
  %364 = add nuw nsw i64 %363, 1
  %365 = and i64 %364, 1
  %366 = icmp eq i64 %362, 0
  br i1 %366, label %394, label %367

367:                                              ; preds = %360
  %368 = sub nuw nsw i64 %364, %365
  br label %369

369:                                              ; preds = %369, %367
  %370 = phi i64 [ 0, %367 ], [ %391, %369 ]
  %371 = phi i64 [ %368, %367 ], [ %392, %369 ]
  %372 = getelementptr inbounds float, float* %4, i64 %370
  %373 = getelementptr inbounds float, float* %2, i64 %370
  %374 = bitcast float* %373 to <4 x float>*
  %375 = load <4 x float>, <4 x float>* %374, align 4, !alias.scope !31
  %376 = bitcast float* %372 to <4 x float>*
  %377 = load <4 x float>, <4 x float>* %376, align 4, !alias.scope !34, !noalias !31
  %378 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %377
  %379 = fmul <4 x float> %375, %378
  %380 = bitcast float* %372 to <4 x float>*
  store <4 x float> %379, <4 x float>* %380, align 4, !alias.scope !34, !noalias !31
  %381 = or i64 %370, 4
  %382 = getelementptr inbounds float, float* %4, i64 %381
  %383 = getelementptr inbounds float, float* %2, i64 %381
  %384 = bitcast float* %383 to <4 x float>*
  %385 = load <4 x float>, <4 x float>* %384, align 4, !alias.scope !31
  %386 = bitcast float* %382 to <4 x float>*
  %387 = load <4 x float>, <4 x float>* %386, align 4, !alias.scope !34, !noalias !31
  %388 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %387
  %389 = fmul <4 x float> %385, %388
  %390 = bitcast float* %382 to <4 x float>*
  store <4 x float> %389, <4 x float>* %390, align 4, !alias.scope !34, !noalias !31
  %391 = add i64 %370, 8
  %392 = add i64 %371, -2
  %393 = icmp eq i64 %392, 0
  br i1 %393, label %394, label %369, !llvm.loop !36

394:                                              ; preds = %369, %360
  %395 = phi i64 [ 0, %360 ], [ %391, %369 ]
  %396 = icmp eq i64 %365, 0
  br i1 %396, label %407, label %397

397:                                              ; preds = %394
  %398 = getelementptr inbounds float, float* %4, i64 %395
  %399 = getelementptr inbounds float, float* %2, i64 %395
  %400 = bitcast float* %399 to <4 x float>*
  %401 = load <4 x float>, <4 x float>* %400, align 4, !alias.scope !31
  %402 = bitcast float* %398 to <4 x float>*
  %403 = load <4 x float>, <4 x float>* %402, align 4, !alias.scope !34, !noalias !31
  %404 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %403
  %405 = fmul <4 x float> %401, %404
  %406 = bitcast float* %398 to <4 x float>*
  store <4 x float> %405, <4 x float>* %406, align 4, !alias.scope !34, !noalias !31
  br label %407

407:                                              ; preds = %394, %397
  %408 = icmp eq i64 %346, %361
  br i1 %408, label %442, label %409

409:                                              ; preds = %407, %354, %352
  %410 = phi i64 [ 0, %354 ], [ 0, %352 ], [ %361, %407 ]
  %411 = and i64 %346, 1
  %412 = icmp eq i64 %411, 0
  br i1 %412, label %421, label %413

413:                                              ; preds = %409
  %414 = getelementptr inbounds float, float* %4, i64 %410
  %415 = getelementptr inbounds float, float* %2, i64 %410
  %416 = load float, float* %415, align 4
  %417 = load float, float* %414, align 4
  %418 = fdiv float 1.000000e+00, %417
  %419 = fmul float %416, %418
  store float %419, float* %414, align 4
  %420 = or i64 %410, 1
  br label %421

421:                                              ; preds = %409, %413
  %422 = phi i64 [ %410, %409 ], [ %420, %413 ]
  %423 = or i64 %410, 1
  %424 = icmp eq i64 %346, %423
  br i1 %424, label %442, label %425

425:                                              ; preds = %421, %425
  %426 = phi i64 [ %440, %425 ], [ %422, %421 ]
  %427 = getelementptr inbounds float, float* %4, i64 %426
  %428 = getelementptr inbounds float, float* %2, i64 %426
  %429 = load float, float* %428, align 4
  %430 = load float, float* %427, align 4
  %431 = fdiv float 1.000000e+00, %430
  %432 = fmul float %429, %431
  store float %432, float* %427, align 4
  %433 = add nuw nsw i64 %426, 1
  %434 = getelementptr inbounds float, float* %4, i64 %433
  %435 = getelementptr inbounds float, float* %2, i64 %433
  %436 = load float, float* %435, align 4
  %437 = load float, float* %434, align 4
  %438 = fdiv float 1.000000e+00, %437
  %439 = fmul float %436, %438
  store float %439, float* %434, align 4
  %440 = add nuw nsw i64 %426, 2
  %441 = icmp eq i64 %440, %346
  br i1 %441, label %442, label %425, !llvm.loop !38

442:                                              ; preds = %421, %425, %407, %345
  %443 = icmp sgt i64 %347, 3
  br i1 %443, label %549, label %444

444:                                              ; preds = %549, %442
  %445 = icmp slt i64 %350, %336
  br i1 %445, label %446, label %852

446:                                              ; preds = %444
  %447 = mul nsw i64 %147, %148
  %448 = sub i64 %447, %346
  %449 = sub i64 %448, %349
  %450 = icmp ult i64 %449, 4
  br i1 %450, label %514, label %451

451:                                              ; preds = %446
  %452 = add i64 %346, %349
  %453 = getelementptr float, float* %4, i64 %452
  %454 = mul nsw i64 %147, %148
  %455 = getelementptr float, float* %4, i64 %454
  %456 = getelementptr float, float* %2, i64 %452
  %457 = getelementptr float, float* %2, i64 %454
  %458 = icmp ult float* %453, %457
  %459 = icmp ult float* %456, %455
  %460 = and i1 %458, %459
  br i1 %460, label %514, label %461

461:                                              ; preds = %451
  %462 = and i64 %449, -4
  %463 = add i64 %350, %462
  %464 = add i64 %462, -4
  %465 = lshr exact i64 %464, 2
  %466 = add nuw nsw i64 %465, 1
  %467 = and i64 %466, 1
  %468 = icmp eq i64 %464, 0
  br i1 %468, label %498, label %469

469:                                              ; preds = %461
  %470 = sub nuw nsw i64 %466, %467
  br label %471

471:                                              ; preds = %471, %469
  %472 = phi i64 [ 0, %469 ], [ %495, %471 ]
  %473 = phi i64 [ %470, %469 ], [ %496, %471 ]
  %474 = add i64 %350, %472
  %475 = getelementptr inbounds float, float* %4, i64 %474
  %476 = getelementptr inbounds float, float* %2, i64 %474
  %477 = bitcast float* %476 to <4 x float>*
  %478 = load <4 x float>, <4 x float>* %477, align 4, !alias.scope !39
  %479 = bitcast float* %475 to <4 x float>*
  %480 = load <4 x float>, <4 x float>* %479, align 4, !alias.scope !42, !noalias !39
  %481 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %480
  %482 = fmul <4 x float> %478, %481
  %483 = bitcast float* %475 to <4 x float>*
  store <4 x float> %482, <4 x float>* %483, align 4, !alias.scope !42, !noalias !39
  %484 = or i64 %472, 4
  %485 = add i64 %350, %484
  %486 = getelementptr inbounds float, float* %4, i64 %485
  %487 = getelementptr inbounds float, float* %2, i64 %485
  %488 = bitcast float* %487 to <4 x float>*
  %489 = load <4 x float>, <4 x float>* %488, align 4, !alias.scope !39
  %490 = bitcast float* %486 to <4 x float>*
  %491 = load <4 x float>, <4 x float>* %490, align 4, !alias.scope !42, !noalias !39
  %492 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %491
  %493 = fmul <4 x float> %489, %492
  %494 = bitcast float* %486 to <4 x float>*
  store <4 x float> %493, <4 x float>* %494, align 4, !alias.scope !42, !noalias !39
  %495 = add i64 %472, 8
  %496 = add i64 %473, -2
  %497 = icmp eq i64 %496, 0
  br i1 %497, label %498, label %471, !llvm.loop !44

498:                                              ; preds = %471, %461
  %499 = phi i64 [ 0, %461 ], [ %495, %471 ]
  %500 = icmp eq i64 %467, 0
  br i1 %500, label %512, label %501

501:                                              ; preds = %498
  %502 = add i64 %350, %499
  %503 = getelementptr inbounds float, float* %4, i64 %502
  %504 = getelementptr inbounds float, float* %2, i64 %502
  %505 = bitcast float* %504 to <4 x float>*
  %506 = load <4 x float>, <4 x float>* %505, align 4, !alias.scope !39
  %507 = bitcast float* %503 to <4 x float>*
  %508 = load <4 x float>, <4 x float>* %507, align 4, !alias.scope !42, !noalias !39
  %509 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %508
  %510 = fmul <4 x float> %506, %509
  %511 = bitcast float* %503 to <4 x float>*
  store <4 x float> %510, <4 x float>* %511, align 4, !alias.scope !42, !noalias !39
  br label %512

512:                                              ; preds = %498, %501
  %513 = icmp eq i64 %449, %462
  br i1 %513, label %852, label %514

514:                                              ; preds = %512, %451, %446
  %515 = phi i64 [ %350, %451 ], [ %350, %446 ], [ %463, %512 ]
  %516 = mul nsw i64 %147, %148
  %517 = sub i64 %516, %515
  %518 = and i64 %517, 1
  %519 = icmp eq i64 %518, 0
  br i1 %519, label %528, label %520

520:                                              ; preds = %514
  %521 = getelementptr inbounds float, float* %4, i64 %515
  %522 = getelementptr inbounds float, float* %2, i64 %515
  %523 = load float, float* %522, align 4
  %524 = load float, float* %521, align 4
  %525 = fdiv float 1.000000e+00, %524
  %526 = fmul float %523, %525
  store float %526, float* %521, align 4
  %527 = add nsw i64 %515, 1
  br label %528

528:                                              ; preds = %514, %520
  %529 = phi i64 [ %515, %514 ], [ %527, %520 ]
  %530 = add i64 %515, 1
  %531 = icmp eq i64 %516, %530
  br i1 %531, label %852, label %532

532:                                              ; preds = %528, %532
  %533 = phi i64 [ %547, %532 ], [ %529, %528 ]
  %534 = getelementptr inbounds float, float* %4, i64 %533
  %535 = getelementptr inbounds float, float* %2, i64 %533
  %536 = load float, float* %535, align 4
  %537 = load float, float* %534, align 4
  %538 = fdiv float 1.000000e+00, %537
  %539 = fmul float %536, %538
  store float %539, float* %534, align 4
  %540 = add nsw i64 %533, 1
  %541 = getelementptr inbounds float, float* %4, i64 %540
  %542 = getelementptr inbounds float, float* %2, i64 %540
  %543 = load float, float* %542, align 4
  %544 = load float, float* %541, align 4
  %545 = fdiv float 1.000000e+00, %544
  %546 = fmul float %543, %545
  store float %546, float* %541, align 4
  %547 = add nsw i64 %533, 2
  %548 = icmp eq i64 %547, %336
  br i1 %548, label %852, label %532, !llvm.loop !45

549:                                              ; preds = %442, %549
  %550 = phi i64 [ %559, %549 ], [ %346, %442 ]
  %551 = getelementptr inbounds float, float* %4, i64 %550
  %552 = getelementptr inbounds float, float* %2, i64 %550
  %553 = bitcast float* %552 to <4 x float>*
  %554 = load <4 x float>, <4 x float>* %553, align 1
  %555 = bitcast float* %551 to <4 x float>*
  %556 = load <4 x float>, <4 x float>* %555, align 1
  %557 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %556
  %558 = fmul <4 x float> %554, %557
  store <4 x float> %558, <4 x float>* %555, align 16
  %559 = add nsw i64 %550, 4
  %560 = icmp slt i64 %559, %350
  br i1 %560, label %549, label %444

561:                                              ; preds = %249
  %562 = fcmp oeq double %251, 5.000000e-01
  br i1 %562, label %563, label %812

563:                                              ; preds = %561
  %564 = mul nsw i64 %147, %148
  %565 = and i64 %149, 3
  %566 = icmp eq i64 %565, 0
  br i1 %566, label %567, label %573

567:                                              ; preds = %563
  %568 = lshr i64 %149, 2
  %569 = sub nsw i64 0, %568
  %570 = and i64 %569, 3
  %571 = icmp slt i64 %570, %564
  %572 = select i1 %571, i64 %570, i64 %564
  br label %573

573:                                              ; preds = %567, %563
  %574 = phi i64 [ %572, %567 ], [ %564, %563 ]
  %575 = sub nsw i64 %564, %574
  %576 = sdiv i64 %575, 4
  %577 = shl nsw i64 %576, 2
  %578 = add nsw i64 %577, %574
  %579 = icmp sgt i64 %574, 0
  br i1 %579, label %580, label %676

580:                                              ; preds = %573
  %581 = icmp ult i64 %574, 4
  br i1 %581, label %640, label %582

582:                                              ; preds = %580
  %583 = getelementptr float, float* %4, i64 %574
  %584 = getelementptr float, float* %2, i64 %574
  %585 = icmp ugt float* %584, %4
  %586 = icmp ugt float* %583, %2
  %587 = and i1 %585, %586
  br i1 %587, label %640, label %588

588:                                              ; preds = %582
  %589 = and i64 %574, -4
  %590 = add i64 %589, -4
  %591 = lshr exact i64 %590, 2
  %592 = add nuw nsw i64 %591, 1
  %593 = and i64 %592, 1
  %594 = icmp eq i64 %590, 0
  br i1 %594, label %624, label %595

595:                                              ; preds = %588
  %596 = sub nuw nsw i64 %592, %593
  br label %597

597:                                              ; preds = %597, %595
  %598 = phi i64 [ 0, %595 ], [ %621, %597 ]
  %599 = phi i64 [ %596, %595 ], [ %622, %597 ]
  %600 = getelementptr inbounds float, float* %4, i64 %598
  %601 = getelementptr inbounds float, float* %2, i64 %598
  %602 = bitcast float* %601 to <4 x float>*
  %603 = load <4 x float>, <4 x float>* %602, align 4, !alias.scope !46
  %604 = bitcast float* %600 to <4 x float>*
  %605 = load <4 x float>, <4 x float>* %604, align 4, !alias.scope !49, !noalias !46
  %606 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %605)
  %607 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %606
  %608 = fmul <4 x float> %603, %607
  %609 = bitcast float* %600 to <4 x float>*
  store <4 x float> %608, <4 x float>* %609, align 4, !alias.scope !49, !noalias !46
  %610 = or i64 %598, 4
  %611 = getelementptr inbounds float, float* %4, i64 %610
  %612 = getelementptr inbounds float, float* %2, i64 %610
  %613 = bitcast float* %612 to <4 x float>*
  %614 = load <4 x float>, <4 x float>* %613, align 4, !alias.scope !46
  %615 = bitcast float* %611 to <4 x float>*
  %616 = load <4 x float>, <4 x float>* %615, align 4, !alias.scope !49, !noalias !46
  %617 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %616)
  %618 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %617
  %619 = fmul <4 x float> %614, %618
  %620 = bitcast float* %611 to <4 x float>*
  store <4 x float> %619, <4 x float>* %620, align 4, !alias.scope !49, !noalias !46
  %621 = add i64 %598, 8
  %622 = add i64 %599, -2
  %623 = icmp eq i64 %622, 0
  br i1 %623, label %624, label %597, !llvm.loop !51

624:                                              ; preds = %597, %588
  %625 = phi i64 [ 0, %588 ], [ %621, %597 ]
  %626 = icmp eq i64 %593, 0
  br i1 %626, label %638, label %627

627:                                              ; preds = %624
  %628 = getelementptr inbounds float, float* %4, i64 %625
  %629 = getelementptr inbounds float, float* %2, i64 %625
  %630 = bitcast float* %629 to <4 x float>*
  %631 = load <4 x float>, <4 x float>* %630, align 4, !alias.scope !46
  %632 = bitcast float* %628 to <4 x float>*
  %633 = load <4 x float>, <4 x float>* %632, align 4, !alias.scope !49, !noalias !46
  %634 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %633)
  %635 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %634
  %636 = fmul <4 x float> %631, %635
  %637 = bitcast float* %628 to <4 x float>*
  store <4 x float> %636, <4 x float>* %637, align 4, !alias.scope !49, !noalias !46
  br label %638

638:                                              ; preds = %624, %627
  %639 = icmp eq i64 %574, %589
  br i1 %639, label %676, label %640

640:                                              ; preds = %638, %582, %580
  %641 = phi i64 [ 0, %582 ], [ 0, %580 ], [ %589, %638 ]
  %642 = and i64 %574, 1
  %643 = icmp eq i64 %642, 0
  br i1 %643, label %653, label %644

644:                                              ; preds = %640
  %645 = getelementptr inbounds float, float* %4, i64 %641
  %646 = getelementptr inbounds float, float* %2, i64 %641
  %647 = load float, float* %646, align 4
  %648 = load float, float* %645, align 4
  %649 = call float @llvm.sqrt.f32(float %648) #11
  %650 = fdiv float 1.000000e+00, %649
  %651 = fmul float %647, %650
  store float %651, float* %645, align 4
  %652 = or i64 %641, 1
  br label %653

653:                                              ; preds = %640, %644
  %654 = phi i64 [ %641, %640 ], [ %652, %644 ]
  %655 = or i64 %641, 1
  %656 = icmp eq i64 %574, %655
  br i1 %656, label %676, label %657

657:                                              ; preds = %653, %657
  %658 = phi i64 [ %674, %657 ], [ %654, %653 ]
  %659 = getelementptr inbounds float, float* %4, i64 %658
  %660 = getelementptr inbounds float, float* %2, i64 %658
  %661 = load float, float* %660, align 4
  %662 = load float, float* %659, align 4
  %663 = call float @llvm.sqrt.f32(float %662) #11
  %664 = fdiv float 1.000000e+00, %663
  %665 = fmul float %661, %664
  store float %665, float* %659, align 4
  %666 = add nuw nsw i64 %658, 1
  %667 = getelementptr inbounds float, float* %4, i64 %666
  %668 = getelementptr inbounds float, float* %2, i64 %666
  %669 = load float, float* %668, align 4
  %670 = load float, float* %667, align 4
  %671 = call float @llvm.sqrt.f32(float %670) #11
  %672 = fdiv float 1.000000e+00, %671
  %673 = fmul float %669, %672
  store float %673, float* %667, align 4
  %674 = add nuw nsw i64 %658, 2
  %675 = icmp eq i64 %674, %574
  br i1 %675, label %676, label %657, !llvm.loop !52

676:                                              ; preds = %653, %657, %638, %573
  %677 = icmp sgt i64 %575, 3
  br i1 %677, label %789, label %678

678:                                              ; preds = %789, %676
  %679 = icmp slt i64 %578, %564
  br i1 %679, label %680, label %852

680:                                              ; preds = %678
  %681 = mul nsw i64 %147, %148
  %682 = sub i64 %681, %574
  %683 = sub i64 %682, %577
  %684 = icmp ult i64 %683, 4
  br i1 %684, label %751, label %685

685:                                              ; preds = %680
  %686 = add i64 %574, %577
  %687 = getelementptr float, float* %4, i64 %686
  %688 = mul nsw i64 %147, %148
  %689 = getelementptr float, float* %4, i64 %688
  %690 = getelementptr float, float* %2, i64 %686
  %691 = getelementptr float, float* %2, i64 %688
  %692 = icmp ult float* %687, %691
  %693 = icmp ult float* %690, %689
  %694 = and i1 %692, %693
  br i1 %694, label %751, label %695

695:                                              ; preds = %685
  %696 = and i64 %683, -4
  %697 = add i64 %578, %696
  %698 = add i64 %696, -4
  %699 = lshr exact i64 %698, 2
  %700 = add nuw nsw i64 %699, 1
  %701 = and i64 %700, 1
  %702 = icmp eq i64 %698, 0
  br i1 %702, label %734, label %703

703:                                              ; preds = %695
  %704 = sub nuw nsw i64 %700, %701
  br label %705

705:                                              ; preds = %705, %703
  %706 = phi i64 [ 0, %703 ], [ %731, %705 ]
  %707 = phi i64 [ %704, %703 ], [ %732, %705 ]
  %708 = add i64 %578, %706
  %709 = getelementptr inbounds float, float* %4, i64 %708
  %710 = getelementptr inbounds float, float* %2, i64 %708
  %711 = bitcast float* %710 to <4 x float>*
  %712 = load <4 x float>, <4 x float>* %711, align 4, !alias.scope !53
  %713 = bitcast float* %709 to <4 x float>*
  %714 = load <4 x float>, <4 x float>* %713, align 4, !alias.scope !56, !noalias !53
  %715 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %714)
  %716 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %715
  %717 = fmul <4 x float> %712, %716
  %718 = bitcast float* %709 to <4 x float>*
  store <4 x float> %717, <4 x float>* %718, align 4, !alias.scope !56, !noalias !53
  %719 = or i64 %706, 4
  %720 = add i64 %578, %719
  %721 = getelementptr inbounds float, float* %4, i64 %720
  %722 = getelementptr inbounds float, float* %2, i64 %720
  %723 = bitcast float* %722 to <4 x float>*
  %724 = load <4 x float>, <4 x float>* %723, align 4, !alias.scope !53
  %725 = bitcast float* %721 to <4 x float>*
  %726 = load <4 x float>, <4 x float>* %725, align 4, !alias.scope !56, !noalias !53
  %727 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %726)
  %728 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %727
  %729 = fmul <4 x float> %724, %728
  %730 = bitcast float* %721 to <4 x float>*
  store <4 x float> %729, <4 x float>* %730, align 4, !alias.scope !56, !noalias !53
  %731 = add i64 %706, 8
  %732 = add i64 %707, -2
  %733 = icmp eq i64 %732, 0
  br i1 %733, label %734, label %705, !llvm.loop !58

734:                                              ; preds = %705, %695
  %735 = phi i64 [ 0, %695 ], [ %731, %705 ]
  %736 = icmp eq i64 %701, 0
  br i1 %736, label %749, label %737

737:                                              ; preds = %734
  %738 = add i64 %578, %735
  %739 = getelementptr inbounds float, float* %4, i64 %738
  %740 = getelementptr inbounds float, float* %2, i64 %738
  %741 = bitcast float* %740 to <4 x float>*
  %742 = load <4 x float>, <4 x float>* %741, align 4, !alias.scope !53
  %743 = bitcast float* %739 to <4 x float>*
  %744 = load <4 x float>, <4 x float>* %743, align 4, !alias.scope !56, !noalias !53
  %745 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %744)
  %746 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %745
  %747 = fmul <4 x float> %742, %746
  %748 = bitcast float* %739 to <4 x float>*
  store <4 x float> %747, <4 x float>* %748, align 4, !alias.scope !56, !noalias !53
  br label %749

749:                                              ; preds = %734, %737
  %750 = icmp eq i64 %683, %696
  br i1 %750, label %852, label %751

751:                                              ; preds = %749, %685, %680
  %752 = phi i64 [ %578, %685 ], [ %578, %680 ], [ %697, %749 ]
  %753 = mul nsw i64 %147, %148
  %754 = sub i64 %753, %752
  %755 = and i64 %754, 1
  %756 = icmp eq i64 %755, 0
  br i1 %756, label %766, label %757

757:                                              ; preds = %751
  %758 = getelementptr inbounds float, float* %4, i64 %752
  %759 = getelementptr inbounds float, float* %2, i64 %752
  %760 = load float, float* %759, align 4
  %761 = load float, float* %758, align 4
  %762 = call float @llvm.sqrt.f32(float %761) #11
  %763 = fdiv float 1.000000e+00, %762
  %764 = fmul float %760, %763
  store float %764, float* %758, align 4
  %765 = add nsw i64 %752, 1
  br label %766

766:                                              ; preds = %751, %757
  %767 = phi i64 [ %752, %751 ], [ %765, %757 ]
  %768 = add i64 %752, 1
  %769 = icmp eq i64 %753, %768
  br i1 %769, label %852, label %770

770:                                              ; preds = %766, %770
  %771 = phi i64 [ %787, %770 ], [ %767, %766 ]
  %772 = getelementptr inbounds float, float* %4, i64 %771
  %773 = getelementptr inbounds float, float* %2, i64 %771
  %774 = load float, float* %773, align 4
  %775 = load float, float* %772, align 4
  %776 = call float @llvm.sqrt.f32(float %775) #11
  %777 = fdiv float 1.000000e+00, %776
  %778 = fmul float %774, %777
  store float %778, float* %772, align 4
  %779 = add nsw i64 %771, 1
  %780 = getelementptr inbounds float, float* %4, i64 %779
  %781 = getelementptr inbounds float, float* %2, i64 %779
  %782 = load float, float* %781, align 4
  %783 = load float, float* %780, align 4
  %784 = call float @llvm.sqrt.f32(float %783) #11
  %785 = fdiv float 1.000000e+00, %784
  %786 = fmul float %782, %785
  store float %786, float* %780, align 4
  %787 = add nsw i64 %771, 2
  %788 = icmp eq i64 %787, %564
  br i1 %788, label %852, label %770, !llvm.loop !59

789:                                              ; preds = %676, %789
  %790 = phi i64 [ %810, %789 ], [ %574, %676 ]
  %791 = getelementptr inbounds float, float* %4, i64 %790
  %792 = getelementptr inbounds float, float* %2, i64 %790
  %793 = bitcast float* %792 to <4 x float>*
  %794 = load <4 x float>, <4 x float>* %793, align 1
  %795 = bitcast float* %791 to <4 x float>*
  %796 = load <4 x float>, <4 x float>* %795, align 1
  %797 = fmul <4 x float> %796, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %798 = fcmp ult <4 x float> %796, zeroinitializer
  %799 = fcmp uge <4 x float> %796, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %800 = call <4 x float> @llvm.x86.sse.rsqrt.ps(<4 x float> %796) #11
  %801 = fmul <4 x float> %800, %800
  %802 = fmul <4 x float> %797, %801
  %803 = fsub <4 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>, %802
  %804 = fmul <4 x float> %800, %803
  %805 = fmul <4 x float> %796, %804
  %806 = or <4 x i1> %798, %799
  %807 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %805
  %808 = select <4 x i1> %806, <4 x float> %807, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %809 = fmul <4 x float> %794, %808
  store <4 x float> %809, <4 x float>* %795, align 16
  %810 = add nsw i64 %790, 4
  %811 = icmp slt i64 %810, %578
  br i1 %811, label %789, label %678

812:                                              ; preds = %561
  %813 = fptrunc double %251 to float
  %814 = fsub float -0.000000e+00, %813
  %815 = mul nsw i64 %147, %148
  %816 = icmp sgt i64 %815, 0
  br i1 %816, label %817, label %852

817:                                              ; preds = %812
  %818 = mul nsw i64 %147, %148
  %819 = and i64 %818, 1
  %820 = icmp eq i64 %818, 1
  br i1 %820, label %842, label %821

821:                                              ; preds = %817
  %822 = sub i64 %818, %819
  br label %823

823:                                              ; preds = %823, %821
  %824 = phi i64 [ 0, %821 ], [ %839, %823 ]
  %825 = phi i64 [ %822, %821 ], [ %840, %823 ]
  %826 = getelementptr inbounds float, float* %4, i64 %824
  %827 = getelementptr inbounds float, float* %2, i64 %824
  %828 = load float, float* %827, align 4
  %829 = load float, float* %826, align 4
  %830 = call float @powf(float %829, float %814) #11
  %831 = fmul float %828, %830
  store float %831, float* %826, align 4
  %832 = or i64 %824, 1
  %833 = getelementptr inbounds float, float* %4, i64 %832
  %834 = getelementptr inbounds float, float* %2, i64 %832
  %835 = load float, float* %834, align 4
  %836 = load float, float* %833, align 4
  %837 = call float @powf(float %836, float %814) #11
  %838 = fmul float %835, %837
  store float %838, float* %833, align 4
  %839 = add nuw nsw i64 %824, 2
  %840 = add i64 %825, -2
  %841 = icmp eq i64 %840, 0
  br i1 %841, label %842, label %823

842:                                              ; preds = %823, %817
  %843 = phi i64 [ 0, %817 ], [ %839, %823 ]
  %844 = icmp eq i64 %819, 0
  br i1 %844, label %852, label %845

845:                                              ; preds = %842
  %846 = getelementptr inbounds float, float* %4, i64 %843
  %847 = getelementptr inbounds float, float* %2, i64 %843
  %848 = load float, float* %847, align 4
  %849 = load float, float* %846, align 4
  %850 = call float @powf(float %849, float %814) #11
  %851 = fmul float %848, %850
  store float %851, float* %846, align 4
  br label %852

852:                                              ; preds = %845, %842, %766, %770, %528, %532, %749, %512, %812, %678, %444
  %853 = load float*, float** %154, align 8
  %854 = icmp eq float* %853, null
  br i1 %854, label %859, label %855

855:                                              ; preds = %852
  %856 = getelementptr inbounds float, float* %853, i64 -2
  %857 = bitcast float* %856 to i8**
  %858 = load i8*, i8** %857, align 8
  call void @free(i8* %858) #11
  br label %859

859:                                              ; preds = %852, %855
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %153) #11
  ret void

860:                                              ; preds = %118
  %861 = getelementptr inbounds i32, i32* %101, i64 %121
  %862 = load i32, i32* %861, align 4, !noalias !21
  br label %863

863:                                              ; preds = %860, %118
  %864 = phi i32 [ %862, %860 ], [ 1, %118 ]
  %865 = mul nsw i32 %864, %120
  %866 = or i64 %111, 2
  %867 = icmp eq i64 %866, %103
  br i1 %867, label %871, label %868

868:                                              ; preds = %863
  %869 = getelementptr inbounds i32, i32* %101, i64 %866
  %870 = load i32, i32* %869, align 4, !noalias !21
  br label %871

871:                                              ; preds = %868, %863
  %872 = phi i32 [ %870, %868 ], [ 1, %863 ]
  %873 = mul nsw i32 %872, %865
  %874 = or i64 %111, 3
  %875 = icmp eq i64 %874, %103
  br i1 %875, label %879, label %876

876:                                              ; preds = %871
  %877 = getelementptr inbounds i32, i32* %101, i64 %874
  %878 = load i32, i32* %877, align 4, !noalias !21
  br label %879

879:                                              ; preds = %876, %871
  %880 = phi i32 [ %878, %876 ], [ 1, %871 ]
  %881 = mul nsw i32 %880, %873
  %882 = add nuw nsw i64 %111, 4
  %883 = add i64 %113, -4
  %884 = icmp eq i64 %883, 0
  br i1 %884, label %123, label %110

885:                                              ; preds = %51
  %886 = getelementptr inbounds i32, i32* %34, i64 %54
  %887 = load i32, i32* %886, align 4, !noalias !17
  br label %888

888:                                              ; preds = %885, %51
  %889 = phi i32 [ %887, %885 ], [ 1, %51 ]
  %890 = mul nsw i32 %889, %53
  %891 = or i64 %44, 2
  %892 = icmp eq i64 %891, %37
  br i1 %892, label %896, label %893

893:                                              ; preds = %888
  %894 = getelementptr inbounds i32, i32* %34, i64 %891
  %895 = load i32, i32* %894, align 4, !noalias !17
  br label %896

896:                                              ; preds = %893, %888
  %897 = phi i32 [ %895, %893 ], [ 1, %888 ]
  %898 = mul nsw i32 %897, %890
  %899 = or i64 %44, 3
  %900 = icmp eq i64 %899, %37
  br i1 %900, label %904, label %901

901:                                              ; preds = %896
  %902 = getelementptr inbounds i32, i32* %34, i64 %899
  %903 = load i32, i32* %902, align 4, !noalias !17
  br label %904

904:                                              ; preds = %901, %896
  %905 = phi i32 [ %903, %901 ], [ 1, %896 ]
  %906 = mul nsw i32 %905, %898
  %907 = add nuw nsw i64 %44, 4
  %908 = add i64 %46, -4
  %909 = icmp eq i64 %908, 0
  br i1 %909, label %56, label %43
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5BlockINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELin1ELin1ELb0EEEEENS3_INS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS9_ISB_KNS4_IKNS_3MapIKNS5_IfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEELin1ELi1ELb1EEESK_EEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS6_EEEEEENS0_9assign_opIffEELi0EEELi4ELi0EE3runERSX_(%"class.Eigen::internal::generic_dense_assignment_kernel.147"* dereferenceable(32)) local_unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.147", %"class.Eigen::internal::generic_dense_assignment_kernel.147"* %0, i64 0, i32 3
  %3 = bitcast %"class.Eigen::Block.42"** %2 to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 3
  %7 = icmp eq i64 %6, 0
  %8 = bitcast %"class.Eigen::Block.42"** %2 to %"class.Eigen::DenseBase.48"**
  %9 = bitcast i64* %4 to %"class.Eigen::DenseBase.48"*
  br i1 %7, label %69, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds i64, i64* %4, i64 2
  %12 = load i64, i64* %11, align 8
  %13 = icmp sgt i64 %12, 0
  br i1 %13, label %14, label %210

14:                                               ; preds = %10
  %15 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.147"* %0 to %"struct.Eigen::internal::mapbase_evaluator.144"**
  %16 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.147", %"class.Eigen::internal::generic_dense_assignment_kernel.147"* %0, i64 0, i32 1
  %17 = bitcast %"struct.Eigen::internal::evaluator.124"** %16 to %"struct.Eigen::internal::binary_evaluator"**
  br label %18

18:                                               ; preds = %25, %14
  %19 = phi %"class.Eigen::DenseBase.48"* [ %9, %14 ], [ %26, %25 ]
  %20 = phi i64 [ 0, %14 ], [ %27, %25 ]
  %21 = getelementptr inbounds %"class.Eigen::DenseBase.48", %"class.Eigen::DenseBase.48"* %19, i64 8
  %22 = bitcast %"class.Eigen::DenseBase.48"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = icmp sgt i64 %23, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %32, %18
  %26 = phi %"class.Eigen::DenseBase.48"* [ %19, %18 ], [ %64, %32 ]
  %27 = add nuw nsw i64 %20, 1
  %28 = getelementptr inbounds %"class.Eigen::DenseBase.48", %"class.Eigen::DenseBase.48"* %26, i64 16
  %29 = bitcast %"class.Eigen::DenseBase.48"* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = icmp slt i64 %27, %30
  br i1 %31, label %18, label %210

32:                                               ; preds = %18, %32
  %33 = phi i64 [ %63, %32 ], [ 0, %18 ]
  %34 = load %"struct.Eigen::internal::mapbase_evaluator.144"*, %"struct.Eigen::internal::mapbase_evaluator.144"** %15, align 8
  %35 = getelementptr inbounds %"struct.Eigen::internal::mapbase_evaluator.144", %"struct.Eigen::internal::mapbase_evaluator.144"* %34, i64 0, i32 0
  %36 = load float*, float** %35, align 8
  %37 = getelementptr inbounds %"struct.Eigen::internal::mapbase_evaluator.144", %"struct.Eigen::internal::mapbase_evaluator.144"* %34, i64 0, i32 2, i32 0
  %38 = load i64, i64* %37, align 8
  %39 = mul nsw i64 %38, %20
  %40 = add nsw i64 %39, %33
  %41 = getelementptr inbounds float, float* %36, i64 %40
  %42 = load %"struct.Eigen::internal::binary_evaluator"*, %"struct.Eigen::internal::binary_evaluator"** %17, align 8
  %43 = getelementptr inbounds %"struct.Eigen::internal::binary_evaluator", %"struct.Eigen::internal::binary_evaluator"* %42, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load float*, float** %43, align 8
  %45 = getelementptr inbounds %"struct.Eigen::internal::binary_evaluator", %"struct.Eigen::internal::binary_evaluator"* %42, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  %46 = load i64, i64* %45, align 8
  %47 = mul nsw i64 %46, %20
  %48 = add nsw i64 %47, %33
  %49 = getelementptr inbounds float, float* %44, i64 %48
  %50 = load float, float* %49, align 4
  %51 = getelementptr inbounds %"struct.Eigen::internal::binary_evaluator", %"struct.Eigen::internal::binary_evaluator"* %42, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %52 = load float*, float** %51, align 8
  %53 = getelementptr inbounds %"struct.Eigen::internal::binary_evaluator", %"struct.Eigen::internal::binary_evaluator"* %42, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2, i32 0
  %54 = load i64, i64* %53, align 8
  %55 = mul nsw i64 %54, %20
  %56 = add nsw i64 %55, %33
  %57 = getelementptr inbounds float, float* %52, i64 %56
  %58 = load float, float* %57, align 4
  %59 = fmul float %50, %58
  %60 = getelementptr inbounds %"struct.Eigen::internal::binary_evaluator", %"struct.Eigen::internal::binary_evaluator"* %42, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %61 = load float, float* %60, align 4
  %62 = fmul float %59, %61
  store float %62, float* %41, align 4
  %63 = add nuw nsw i64 %33, 1
  %64 = load %"class.Eigen::DenseBase.48"*, %"class.Eigen::DenseBase.48"** %8, align 8
  %65 = getelementptr inbounds %"class.Eigen::DenseBase.48", %"class.Eigen::DenseBase.48"* %64, i64 8
  %66 = bitcast %"class.Eigen::DenseBase.48"* %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = icmp slt i64 %63, %67
  br i1 %68, label %32, label %25

69:                                               ; preds = %1
  %70 = getelementptr inbounds i64, i64* %4, i64 1
  %71 = load i64, i64* %70, align 8
  %72 = getelementptr inbounds i64, i64* %4, i64 2
  %73 = load i64, i64* %72, align 8
  %74 = getelementptr inbounds i64, i64* %4, i64 6
  %75 = load i64, i64* %74, align 8
  %76 = sub i64 0, %75
  %77 = and i64 %76, 3
  %78 = lshr i64 %5, 2
  %79 = sub nsw i64 0, %78
  %80 = and i64 %79, 3
  %81 = icmp sgt i64 %73, 0
  br i1 %81, label %82, label %210

82:                                               ; preds = %69
  %83 = icmp slt i64 %80, %71
  %84 = select i1 %83, i64 %80, i64 %71
  %85 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.147"* %0 to %"struct.Eigen::internal::mapbase_evaluator.144"**
  %86 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.147", %"class.Eigen::internal::generic_dense_assignment_kernel.147"* %0, i64 0, i32 1
  %87 = bitcast %"struct.Eigen::internal::evaluator.124"** %86 to %"struct.Eigen::internal::binary_evaluator"**
  br label %88

88:                                               ; preds = %170, %82
  %89 = phi i64 [ 0, %82 ], [ %175, %170 ]
  %90 = phi i64 [ %84, %82 ], [ %174, %170 ]
  %91 = sub nsw i64 %71, %90
  %92 = and i64 %91, -4
  %93 = add nsw i64 %92, %90
  %94 = icmp sgt i64 %90, 0
  br i1 %94, label %97, label %95

95:                                               ; preds = %97, %88
  %96 = icmp sgt i64 %92, 0
  br i1 %96, label %132, label %130

97:                                               ; preds = %88, %97
  %98 = phi i64 [ %128, %97 ], [ 0, %88 ]
  %99 = load %"struct.Eigen::internal::mapbase_evaluator.144"*, %"struct.Eigen::internal::mapbase_evaluator.144"** %85, align 8
  %100 = getelementptr inbounds %"struct.Eigen::internal::mapbase_evaluator.144", %"struct.Eigen::internal::mapbase_evaluator.144"* %99, i64 0, i32 0
  %101 = load float*, float** %100, align 8
  %102 = getelementptr inbounds %"struct.Eigen::internal::mapbase_evaluator.144", %"struct.Eigen::internal::mapbase_evaluator.144"* %99, i64 0, i32 2, i32 0
  %103 = load i64, i64* %102, align 8
  %104 = mul nsw i64 %103, %89
  %105 = add nsw i64 %104, %98
  %106 = getelementptr inbounds float, float* %101, i64 %105
  %107 = load %"struct.Eigen::internal::binary_evaluator"*, %"struct.Eigen::internal::binary_evaluator"** %87, align 8
  %108 = getelementptr inbounds %"struct.Eigen::internal::binary_evaluator", %"struct.Eigen::internal::binary_evaluator"* %107, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %109 = load float*, float** %108, align 8
  %110 = getelementptr inbounds %"struct.Eigen::internal::binary_evaluator", %"struct.Eigen::internal::binary_evaluator"* %107, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  %111 = load i64, i64* %110, align 8
  %112 = mul nsw i64 %111, %89
  %113 = add nsw i64 %112, %98
  %114 = getelementptr inbounds float, float* %109, i64 %113
  %115 = load float, float* %114, align 4
  %116 = getelementptr inbounds %"struct.Eigen::internal::binary_evaluator", %"struct.Eigen::internal::binary_evaluator"* %107, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %117 = load float*, float** %116, align 8
  %118 = getelementptr inbounds %"struct.Eigen::internal::binary_evaluator", %"struct.Eigen::internal::binary_evaluator"* %107, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2, i32 0
  %119 = load i64, i64* %118, align 8
  %120 = mul nsw i64 %119, %89
  %121 = add nsw i64 %120, %98
  %122 = getelementptr inbounds float, float* %117, i64 %121
  %123 = load float, float* %122, align 4
  %124 = fmul float %115, %123
  %125 = getelementptr inbounds %"struct.Eigen::internal::binary_evaluator", %"struct.Eigen::internal::binary_evaluator"* %107, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %126 = load float, float* %125, align 4
  %127 = fmul float %124, %126
  store float %127, float* %106, align 4
  %128 = add nuw nsw i64 %98, 1
  %129 = icmp eq i64 %128, %90
  br i1 %129, label %95, label %97

130:                                              ; preds = %132, %95
  %131 = icmp slt i64 %93, %71
  br i1 %131, label %177, label %170

132:                                              ; preds = %95, %132
  %133 = phi i64 [ %168, %132 ], [ %90, %95 ]
  %134 = load %"struct.Eigen::internal::mapbase_evaluator.144"*, %"struct.Eigen::internal::mapbase_evaluator.144"** %85, align 8
  %135 = getelementptr inbounds %"struct.Eigen::internal::mapbase_evaluator.144", %"struct.Eigen::internal::mapbase_evaluator.144"* %134, i64 0, i32 0
  %136 = load float*, float** %135, align 8
  %137 = getelementptr inbounds %"struct.Eigen::internal::mapbase_evaluator.144", %"struct.Eigen::internal::mapbase_evaluator.144"* %134, i64 0, i32 2, i32 0
  %138 = load i64, i64* %137, align 8
  %139 = mul nsw i64 %138, %89
  %140 = add nsw i64 %139, %133
  %141 = getelementptr inbounds float, float* %136, i64 %140
  %142 = load %"struct.Eigen::internal::binary_evaluator"*, %"struct.Eigen::internal::binary_evaluator"** %87, align 8
  %143 = getelementptr inbounds %"struct.Eigen::internal::binary_evaluator", %"struct.Eigen::internal::binary_evaluator"* %142, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %144 = load float*, float** %143, align 8
  %145 = getelementptr inbounds float, float* %144, i64 %133
  %146 = getelementptr inbounds %"struct.Eigen::internal::binary_evaluator", %"struct.Eigen::internal::binary_evaluator"* %142, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  %147 = load i64, i64* %146, align 8
  %148 = mul nsw i64 %147, %89
  %149 = getelementptr inbounds float, float* %145, i64 %148
  %150 = bitcast float* %149 to <4 x float>*
  %151 = load <4 x float>, <4 x float>* %150, align 1
  %152 = getelementptr inbounds %"struct.Eigen::internal::binary_evaluator", %"struct.Eigen::internal::binary_evaluator"* %142, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %153 = load float*, float** %152, align 8
  %154 = getelementptr inbounds float, float* %153, i64 %133
  %155 = getelementptr inbounds %"struct.Eigen::internal::binary_evaluator", %"struct.Eigen::internal::binary_evaluator"* %142, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2, i32 0
  %156 = load i64, i64* %155, align 8
  %157 = mul nsw i64 %156, %89
  %158 = getelementptr inbounds float, float* %154, i64 %157
  %159 = bitcast float* %158 to <4 x float>*
  %160 = load <4 x float>, <4 x float>* %159, align 1
  %161 = fmul <4 x float> %151, %160
  %162 = getelementptr inbounds %"struct.Eigen::internal::binary_evaluator", %"struct.Eigen::internal::binary_evaluator"* %142, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %163 = load float, float* %162, align 4
  %164 = insertelement <4 x float> undef, float %163, i32 0
  %165 = shufflevector <4 x float> %164, <4 x float> undef, <4 x i32> zeroinitializer
  %166 = fmul <4 x float> %161, %165
  %167 = bitcast float* %141 to <4 x float>*
  store <4 x float> %166, <4 x float>* %167, align 16
  %168 = add nsw i64 %133, 4
  %169 = icmp slt i64 %168, %93
  br i1 %169, label %132, label %130

170:                                              ; preds = %177, %130
  %171 = add nsw i64 %90, %77
  %172 = srem i64 %171, 4
  %173 = icmp slt i64 %71, %172
  %174 = select i1 %173, i64 %71, i64 %172
  %175 = add nuw nsw i64 %89, 1
  %176 = icmp eq i64 %175, %73
  br i1 %176, label %210, label %88

177:                                              ; preds = %130, %177
  %178 = phi i64 [ %208, %177 ], [ %93, %130 ]
  %179 = load %"struct.Eigen::internal::mapbase_evaluator.144"*, %"struct.Eigen::internal::mapbase_evaluator.144"** %85, align 8
  %180 = getelementptr inbounds %"struct.Eigen::internal::mapbase_evaluator.144", %"struct.Eigen::internal::mapbase_evaluator.144"* %179, i64 0, i32 0
  %181 = load float*, float** %180, align 8
  %182 = getelementptr inbounds %"struct.Eigen::internal::mapbase_evaluator.144", %"struct.Eigen::internal::mapbase_evaluator.144"* %179, i64 0, i32 2, i32 0
  %183 = load i64, i64* %182, align 8
  %184 = mul nsw i64 %183, %89
  %185 = add nsw i64 %184, %178
  %186 = getelementptr inbounds float, float* %181, i64 %185
  %187 = load %"struct.Eigen::internal::binary_evaluator"*, %"struct.Eigen::internal::binary_evaluator"** %87, align 8
  %188 = getelementptr inbounds %"struct.Eigen::internal::binary_evaluator", %"struct.Eigen::internal::binary_evaluator"* %187, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %189 = load float*, float** %188, align 8
  %190 = getelementptr inbounds %"struct.Eigen::internal::binary_evaluator", %"struct.Eigen::internal::binary_evaluator"* %187, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  %191 = load i64, i64* %190, align 8
  %192 = mul nsw i64 %191, %89
  %193 = add nsw i64 %192, %178
  %194 = getelementptr inbounds float, float* %189, i64 %193
  %195 = load float, float* %194, align 4
  %196 = getelementptr inbounds %"struct.Eigen::internal::binary_evaluator", %"struct.Eigen::internal::binary_evaluator"* %187, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %197 = load float*, float** %196, align 8
  %198 = getelementptr inbounds %"struct.Eigen::internal::binary_evaluator", %"struct.Eigen::internal::binary_evaluator"* %187, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2, i32 0
  %199 = load i64, i64* %198, align 8
  %200 = mul nsw i64 %199, %89
  %201 = add nsw i64 %200, %178
  %202 = getelementptr inbounds float, float* %197, i64 %201
  %203 = load float, float* %202, align 4
  %204 = fmul float %195, %203
  %205 = getelementptr inbounds %"struct.Eigen::internal::binary_evaluator", %"struct.Eigen::internal::binary_evaluator"* %187, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %206 = load float, float* %205, align 4
  %207 = fmul float %204, %206
  store float %207, float* %186, align 4
  %208 = add nsw i64 %178, 1
  %209 = icmp eq i64 %208, %71
  br i1 %209, label %170, label %177

210:                                              ; preds = %25, %170, %69, %10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare float @llvm.sqrt.f32(float) #9

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.rsqrt.ps(<4 x float>) #10

; Function Attrs: nofree nounwind
declare float @powf(float, float) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.sqrt.v4f32(<4 x float>) #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind readnone }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!4 = distinct !{!4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!7 = distinct !{!7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.unroll.disable"}
!10 = distinct !{!10, !9}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!13 = distinct !{!13, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!16 = distinct !{!16, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZN6tflite13optimized_ops28MapAsMatrixWithLastDimAsRowsIKfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS6_6MatrixINS3_12remove_constIS5_E4typeELin1ELin1ELi0ELin1ELin1EEELi0ENS6_6StrideILi0ELi0EEEEENS7_INS8_IS5_Lin1ELin1ELi0ELin1ELin1EEELi0ESF_EEE4typeEPS5_RKNS_12RuntimeShapeE: argument 0"}
!19 = distinct !{!19, !"_ZN6tflite13optimized_ops28MapAsMatrixWithLastDimAsRowsIKfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS6_6MatrixINS3_12remove_constIS5_E4typeELin1ELin1ELi0ELin1ELin1EEELi0ENS6_6StrideILi0ELi0EEEEENS7_INS8_IS5_Lin1ELin1ELi0ELin1ELin1EEELi0ESF_EEE4typeEPS5_RKNS_12RuntimeShapeE"}
!20 = distinct !{!20, !9}
!21 = !{!22}
!22 = distinct !{!22, !23, !"_ZN6tflite13optimized_ops28MapAsMatrixWithLastDimAsRowsIfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS5_6MatrixINS2_12remove_constIS4_E4typeELin1ELin1ELi0ELin1ELin1EEELi0ENS5_6StrideILi0ELi0EEEEENS6_INS7_IS4_Lin1ELin1ELi0ELin1ELin1EEELi0ESE_EEE4typeEPS4_RKNS_12RuntimeShapeE: argument 0"}
!23 = distinct !{!23, !"_ZN6tflite13optimized_ops28MapAsMatrixWithLastDimAsRowsIfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS5_6MatrixINS2_12remove_constIS4_E4typeELin1ELin1ELi0ELin1ELin1EEELi0ENS5_6StrideILi0ELi0EEEEENS6_INS7_IS4_Lin1ELin1ELi0ELin1ELin1EEELi0ESE_EEE4typeEPS4_RKNS_12RuntimeShapeE"}
!24 = distinct !{!24, !9}
!25 = !{!26}
!26 = distinct !{!26, !27, !"_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5BlockIKNS_3MapIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEELin1ELi1ELb1EEESF_EEEmlIdEEKNS1_INS3_IfNS2_18promote_scalar_argIfT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfSK_NS3_IfSK_EEEEEE5valueEE4typeEEEKSG_KNS2_19plain_constant_typeISG_SP_E4typeEEERKSK_: argument 0"}
!27 = distinct !{!27, !"_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5BlockIKNS_3MapIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEELin1ELi1ELb1EEESF_EEEmlIdEEKNS1_INS3_IfNS2_18promote_scalar_argIfT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfSK_NS3_IfSK_EEEEEE5valueEE4typeEEEKSG_KNS2_19plain_constant_typeISG_SP_E4typeEEERKSK_"}
!28 = !{!29}
!29 = distinct !{!29, !30, !"_ZN5Eigen9DenseBaseINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEEE5blockIliEENS3_13FixedBlockXprIXsr8internal15get_fixed_valueIT_EE5valueEXsr8internal15get_fixed_valueIT0_EE5valueEE4TypeEllS6_S7_: argument 0"}
!30 = distinct !{!30, !"_ZN5Eigen9DenseBaseINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEEE5blockIliEENS3_13FixedBlockXprIXsr8internal15get_fixed_valueIT_EE5valueEXsr8internal15get_fixed_valueIT0_EE5valueEE4TypeEllS6_S7_"}
!31 = !{!32}
!32 = distinct !{!32, !33}
!33 = distinct !{!33, !"LVerDomain"}
!34 = !{!35}
!35 = distinct !{!35, !33}
!36 = distinct !{!36, !37}
!37 = !{!"llvm.loop.isvectorized", i32 1}
!38 = distinct !{!38, !37}
!39 = !{!40}
!40 = distinct !{!40, !41}
!41 = distinct !{!41, !"LVerDomain"}
!42 = !{!43}
!43 = distinct !{!43, !41}
!44 = distinct !{!44, !37}
!45 = distinct !{!45, !37}
!46 = !{!47}
!47 = distinct !{!47, !48}
!48 = distinct !{!48, !"LVerDomain"}
!49 = !{!50}
!50 = distinct !{!50, !48}
!51 = distinct !{!51, !37}
!52 = distinct !{!52, !37}
!53 = !{!54}
!54 = distinct !{!54, !55}
!55 = distinct !{!55, !"LVerDomain"}
!56 = !{!57}
!57 = distinct !{!57, !55}
!58 = distinct !{!58, !37}
!59 = distinct !{!59, !37}
