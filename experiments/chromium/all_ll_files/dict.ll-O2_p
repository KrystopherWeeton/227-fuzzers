; ModuleID = '../../third_party/libxml/src/dict.c'
source_filename = "../../third_party/libxml/src/dict.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._xmlRMutex = type opaque
%struct._xmlDict = type { i32, %struct._xmlDictEntry*, i64, i32, %struct._xmlDictStrings*, %struct._xmlDict*, i32, i64 }
%struct._xmlDictEntry = type { %struct._xmlDictEntry*, i8*, i32, i32, i64 }
%struct._xmlDictStrings = type { %struct._xmlDictStrings*, i8*, i8*, i64, i64, [1 x i8] }

@xmlDictInitialized = internal unnamed_addr global i1 false, align 4
@xmlDictMutex = internal unnamed_addr global %struct._xmlRMutex* null, align 8
@xmlMalloc = external local_unnamed_addr global i8* (i64)*, align 8
@xmlFree = external local_unnamed_addr global void (i8*)*, align 8

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @xmlInitializeDict() local_unnamed_addr #0 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @__xmlInitializeDict() local_unnamed_addr #1 {
  %1 = load i1, i1* @xmlDictInitialized, align 4
  br i1 %1, label %9, label %2

2:                                                ; preds = %0
  %3 = tail call %struct._xmlRMutex* @xmlNewRMutex() #10
  store %struct._xmlRMutex* %3, %struct._xmlRMutex** @xmlDictMutex, align 8
  %4 = icmp eq %struct._xmlRMutex* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %2
  tail call void @xmlRMutexLock(%struct._xmlRMutex* nonnull %3) #10
  %6 = tail call i64 @time(i64* null) #10
  %7 = trunc i64 %6 to i32
  tail call void @srand(i32 %7) #10
  store i1 true, i1* @xmlDictInitialized, align 4
  %8 = load %struct._xmlRMutex*, %struct._xmlRMutex** @xmlDictMutex, align 8
  tail call void @xmlRMutexUnlock(%struct._xmlRMutex* %8) #10
  br label %9

9:                                                ; preds = %2, %0, %5
  %10 = phi i32 [ 1, %5 ], [ 1, %0 ], [ 0, %2 ]
  ret i32 %10
}

declare %struct._xmlRMutex* @xmlNewRMutex() local_unnamed_addr #2

declare void @xmlRMutexLock(%struct._xmlRMutex*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @srand(i32) local_unnamed_addr #3

; Function Attrs: nounwind
declare i64 @time(i64*) local_unnamed_addr #3

declare void @xmlRMutexUnlock(%struct._xmlRMutex*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @__xmlRandom() local_unnamed_addr #1 {
  %1 = load i1, i1* @xmlDictInitialized, align 4
  br i1 %1, label %9, label %2

2:                                                ; preds = %0
  %3 = tail call %struct._xmlRMutex* @xmlNewRMutex() #10
  store %struct._xmlRMutex* %3, %struct._xmlRMutex** @xmlDictMutex, align 8
  %4 = icmp eq %struct._xmlRMutex* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %2
  tail call void @xmlRMutexLock(%struct._xmlRMutex* nonnull %3) #10
  %6 = tail call i64 @time(i64* null) #10
  %7 = trunc i64 %6 to i32
  tail call void @srand(i32 %7) #10
  store i1 true, i1* @xmlDictInitialized, align 4
  %8 = load %struct._xmlRMutex*, %struct._xmlRMutex** @xmlDictMutex, align 8
  tail call void @xmlRMutexUnlock(%struct._xmlRMutex* %8) #10
  br label %9

9:                                                ; preds = %5, %2, %0
  %10 = load %struct._xmlRMutex*, %struct._xmlRMutex** @xmlDictMutex, align 8
  tail call void @xmlRMutexLock(%struct._xmlRMutex* %10) #10
  %11 = tail call i32 @rand() #10
  %12 = load %struct._xmlRMutex*, %struct._xmlRMutex** @xmlDictMutex, align 8
  tail call void @xmlRMutexUnlock(%struct._xmlRMutex* %12) #10
  ret i32 %11
}

; Function Attrs: nounwind
declare i32 @rand() local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @xmlDictCleanup() local_unnamed_addr #1 {
  %1 = load i1, i1* @xmlDictInitialized, align 4
  br i1 %1, label %2, label %4

2:                                                ; preds = %0
  %3 = load %struct._xmlRMutex*, %struct._xmlRMutex** @xmlDictMutex, align 8
  tail call void @xmlFreeRMutex(%struct._xmlRMutex* %3) #10
  store i1 false, i1* @xmlDictInitialized, align 4
  br label %4

4:                                                ; preds = %0, %2
  ret void
}

declare void @xmlFreeRMutex(%struct._xmlRMutex*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct._xmlDict* @xmlDictCreate() local_unnamed_addr #1 {
  %1 = load i1, i1* @xmlDictInitialized, align 4
  br i1 %1, label %9, label %2

2:                                                ; preds = %0
  %3 = tail call %struct._xmlRMutex* @xmlNewRMutex() #10
  store %struct._xmlRMutex* %3, %struct._xmlRMutex** @xmlDictMutex, align 8
  %4 = icmp eq %struct._xmlRMutex* %3, null
  br i1 %4, label %34, label %5

5:                                                ; preds = %2
  tail call void @xmlRMutexLock(%struct._xmlRMutex* nonnull %3) #10
  %6 = tail call i64 @time(i64* null) #10
  %7 = trunc i64 %6 to i32
  tail call void @srand(i32 %7) #10
  store i1 true, i1* @xmlDictInitialized, align 4
  %8 = load %struct._xmlRMutex*, %struct._xmlRMutex** @xmlDictMutex, align 8
  tail call void @xmlRMutexUnlock(%struct._xmlRMutex* %8) #10
  br label %9

9:                                                ; preds = %5, %0
  %10 = load i8* (i64)*, i8* (i64)** @xmlMalloc, align 8
  %11 = tail call i8* %10(i64 64) #10
  %12 = bitcast i8* %11 to %struct._xmlDict*
  %13 = icmp eq i8* %11, null
  br i1 %13, label %34, label %14

14:                                               ; preds = %9
  %15 = bitcast i8* %11 to i32*
  store i32 1, i32* %15, align 8
  %16 = getelementptr inbounds i8, i8* %11, i64 56
  %17 = bitcast i8* %16 to i64*
  store i64 0, i64* %17, align 8
  %18 = getelementptr inbounds i8, i8* %11, i64 16
  %19 = bitcast i8* %18 to i64*
  store i64 128, i64* %19, align 8
  %20 = getelementptr inbounds i8, i8* %11, i64 24
  %21 = bitcast i8* %20 to i32*
  store i32 0, i32* %21, align 8
  %22 = load i8* (i64)*, i8* (i64)** @xmlMalloc, align 8
  %23 = tail call i8* %22(i64 4096) #10
  %24 = getelementptr inbounds i8, i8* %11, i64 8
  %25 = bitcast i8* %24 to i8**
  store i8* %23, i8** %25, align 8
  %26 = getelementptr inbounds i8, i8* %11, i64 32
  %27 = icmp eq i8* %23, null
  call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 16, i1 false)
  br i1 %27, label %32, label %28

28:                                               ; preds = %14
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 0, i64 4096, i1 false)
  %29 = tail call i32 @__xmlRandom()
  %30 = getelementptr inbounds i8, i8* %11, i64 48
  %31 = bitcast i8* %30 to i32*
  store i32 %29, i32* %31, align 8
  br label %34

32:                                               ; preds = %14
  %33 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  tail call void %33(i8* nonnull %11) #10
  br label %34

34:                                               ; preds = %2, %32, %9, %28
  %35 = phi %struct._xmlDict* [ %12, %28 ], [ null, %9 ], [ null, %32 ], [ null, %2 ]
  ret %struct._xmlDict* %35
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define hidden %struct._xmlDict* @xmlDictCreateSub(%struct._xmlDict*) local_unnamed_addr #1 {
  %2 = tail call %struct._xmlDict* @xmlDictCreate()
  %3 = icmp ne %struct._xmlDict* %2, null
  %4 = icmp ne %struct._xmlDict* %0, null
  %5 = and i1 %4, %3
  br i1 %5, label %6, label %12

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 6
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %2, i64 0, i32 6
  store i32 %8, i32* %9, align 8
  %10 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %2, i64 0, i32 5
  store %struct._xmlDict* %0, %struct._xmlDict** %10, align 8
  %11 = tail call i32 @xmlDictReference(%struct._xmlDict* nonnull %0)
  br label %12

12:                                               ; preds = %6, %1
  ret %struct._xmlDict* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @xmlDictReference(%struct._xmlDict*) local_unnamed_addr #1 {
  %2 = load i1, i1* @xmlDictInitialized, align 4
  br i1 %2, label %11, label %3

3:                                                ; preds = %1
  %4 = tail call %struct._xmlRMutex* @xmlNewRMutex() #10
  store %struct._xmlRMutex* %4, %struct._xmlRMutex** @xmlDictMutex, align 8
  %5 = icmp eq %struct._xmlRMutex* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %3
  tail call void @xmlRMutexLock(%struct._xmlRMutex* nonnull %4) #10
  %7 = tail call i64 @time(i64* null) #10
  %8 = trunc i64 %7 to i32
  tail call void @srand(i32 %8) #10
  store i1 true, i1* @xmlDictInitialized, align 4
  %9 = load %struct._xmlRMutex*, %struct._xmlRMutex** @xmlDictMutex, align 8
  tail call void @xmlRMutexUnlock(%struct._xmlRMutex* %9) #10
  %10 = icmp eq %struct._xmlDict* %0, null
  br i1 %10, label %19, label %13

11:                                               ; preds = %1
  %12 = icmp eq %struct._xmlDict* %0, null
  br i1 %12, label %19, label %13

13:                                               ; preds = %6, %11
  %14 = load %struct._xmlRMutex*, %struct._xmlRMutex** @xmlDictMutex, align 8
  tail call void @xmlRMutexLock(%struct._xmlRMutex* %14) #10
  %15 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %15, align 8
  %18 = load %struct._xmlRMutex*, %struct._xmlRMutex** @xmlDictMutex, align 8
  tail call void @xmlRMutexUnlock(%struct._xmlRMutex* %18) #10
  br label %19

19:                                               ; preds = %3, %11, %6, %13
  %20 = phi i32 [ 0, %13 ], [ -1, %6 ], [ -1, %11 ], [ -1, %3 ]
  ret i32 %20
}

; Function Attrs: nounwind ssp uwtable
define hidden void @xmlDictFree(%struct._xmlDict*) local_unnamed_addr #1 {
  %2 = icmp eq %struct._xmlDict* %0, null
  br i1 %2, label %88, label %3

3:                                                ; preds = %1
  %4 = load i1, i1* @xmlDictInitialized, align 4
  br i1 %4, label %12, label %5

5:                                                ; preds = %3
  %6 = tail call %struct._xmlRMutex* @xmlNewRMutex() #10
  store %struct._xmlRMutex* %6, %struct._xmlRMutex** @xmlDictMutex, align 8
  %7 = icmp eq %struct._xmlRMutex* %6, null
  br i1 %7, label %88, label %8

8:                                                ; preds = %5
  tail call void @xmlRMutexLock(%struct._xmlRMutex* nonnull %6) #10
  %9 = tail call i64 @time(i64* null) #10
  %10 = trunc i64 %9 to i32
  tail call void @srand(i32 %10) #10
  store i1 true, i1* @xmlDictInitialized, align 4
  %11 = load %struct._xmlRMutex*, %struct._xmlRMutex** @xmlDictMutex, align 8
  tail call void @xmlRMutexUnlock(%struct._xmlRMutex* %11) #10
  br label %12

12:                                               ; preds = %8, %3
  %13 = load %struct._xmlRMutex*, %struct._xmlRMutex** @xmlDictMutex, align 8
  tail call void @xmlRMutexLock(%struct._xmlRMutex* %13) #10
  %14 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = add nsw i32 %15, -1
  store i32 %16, i32* %14, align 8
  %17 = icmp sgt i32 %16, 0
  %18 = load %struct._xmlRMutex*, %struct._xmlRMutex** @xmlDictMutex, align 8
  tail call void @xmlRMutexUnlock(%struct._xmlRMutex* %18) #10
  br i1 %17, label %88, label %19

19:                                               ; preds = %12
  %20 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 5
  %21 = load %struct._xmlDict*, %struct._xmlDict** %20, align 8
  %22 = icmp eq %struct._xmlDict* %21, null
  br i1 %22, label %24, label %23

23:                                               ; preds = %19
  tail call void @xmlDictFree(%struct._xmlDict* nonnull %21)
  br label %24

24:                                               ; preds = %19, %23
  %25 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 1
  %26 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %25, align 8
  %27 = icmp eq %struct._xmlDictEntry* %26, null
  br i1 %27, label %74, label %28

28:                                               ; preds = %24
  %29 = bitcast %struct._xmlDictEntry* %26 to i8*
  %30 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 3
  %31 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 2
  %32 = load i64, i64* %31, align 8
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %71, label %34

34:                                               ; preds = %28
  %35 = load i32, i32* %30, align 8
  br label %36

36:                                               ; preds = %34, %63
  %37 = phi i32 [ %64, %63 ], [ %35, %34 ]
  %38 = phi i64 [ %65, %63 ], [ 0, %34 ]
  %39 = icmp eq i32 %37, 0
  br i1 %39, label %68, label %40

40:                                               ; preds = %36
  %41 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %25, align 8
  %42 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %41, i64 %38, i32 3
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %63, label %45

45:                                               ; preds = %40
  %46 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %41, i64 %38
  %47 = icmp eq %struct._xmlDictEntry* %46, null
  br i1 %47, label %63, label %48

48:                                               ; preds = %45
  %49 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %46, i64 0, i32 0
  %50 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %49, align 8
  %51 = add i32 %37, -1
  store i32 %51, i32* %30, align 8
  %52 = icmp eq %struct._xmlDictEntry* %50, null
  br i1 %52, label %63, label %53

53:                                               ; preds = %48, %53
  %54 = phi i32 [ %61, %53 ], [ %51, %48 ]
  %55 = phi %struct._xmlDictEntry* [ %57, %53 ], [ %50, %48 ]
  %56 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %55, i64 0, i32 0
  %57 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %56, align 8
  %58 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  %59 = bitcast %struct._xmlDictEntry* %55 to i8*
  tail call void %58(i8* nonnull %59) #10
  %60 = load i32, i32* %30, align 8
  %61 = add i32 %60, -1
  store i32 %61, i32* %30, align 8
  %62 = icmp eq %struct._xmlDictEntry* %57, null
  br i1 %62, label %63, label %53, !llvm.loop !2

63:                                               ; preds = %48, %53, %45, %40
  %64 = phi i32 [ %37, %45 ], [ %37, %40 ], [ %51, %48 ], [ %61, %53 ]
  %65 = add nuw i64 %38, 1
  %66 = load i64, i64* %31, align 8
  %67 = icmp ult i64 %65, %66
  br i1 %67, label %36, label %68

68:                                               ; preds = %36, %63
  %69 = bitcast %struct._xmlDictEntry** %25 to i8**
  %70 = load i8*, i8** %69, align 8
  br label %71

71:                                               ; preds = %28, %68
  %72 = phi i8* [ %70, %68 ], [ %29, %28 ]
  %73 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  tail call void %73(i8* %72) #10
  br label %74

74:                                               ; preds = %24, %71
  %75 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 4
  %76 = load %struct._xmlDictStrings*, %struct._xmlDictStrings** %75, align 8
  %77 = icmp eq %struct._xmlDictStrings* %76, null
  br i1 %77, label %85, label %78

78:                                               ; preds = %74, %78
  %79 = phi %struct._xmlDictStrings* [ %82, %78 ], [ %76, %74 ]
  %80 = bitcast %struct._xmlDictStrings* %79 to i8*
  %81 = getelementptr inbounds %struct._xmlDictStrings, %struct._xmlDictStrings* %79, i64 0, i32 0
  %82 = load %struct._xmlDictStrings*, %struct._xmlDictStrings** %81, align 8
  %83 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  tail call void %83(i8* %80) #10
  %84 = icmp eq %struct._xmlDictStrings* %82, null
  br i1 %84, label %85, label %78

85:                                               ; preds = %78, %74
  %86 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  %87 = bitcast %struct._xmlDict* %0 to i8*
  tail call void %86(i8* nonnull %87) #10
  br label %88

88:                                               ; preds = %5, %12, %1, %85
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @xmlDictLookup(%struct._xmlDict*, i8* readonly, i32) local_unnamed_addr #1 {
  %4 = icmp eq %struct._xmlDict* %0, null
  %5 = icmp eq i8* %1, null
  %6 = or i1 %4, %5
  br i1 %6, label %535, label %7

7:                                                ; preds = %3
  %8 = icmp slt i32 %2, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %7
  %10 = tail call i64 @strlen(i8* nonnull %1) #11
  %11 = trunc i64 %10 to i32
  br label %12

12:                                               ; preds = %7, %9
  %13 = phi i32 [ %11, %9 ], [ %2, %7 ]
  %14 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 7
  %15 = load i64, i64* %14, align 8
  %16 = zext i32 %13 to i64
  %17 = add i64 %15, -1
  %18 = icmp ult i64 %17, %16
  %19 = icmp ugt i32 %13, 1073741823
  %20 = or i1 %19, %18
  br i1 %20, label %535, label %21

21:                                               ; preds = %12
  %22 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %23, 128
  %25 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 6
  %26 = load i32, i32* %25, align 8
  br i1 %24, label %27, label %96

27:                                               ; preds = %21
  %28 = sext i32 %26 to i64
  %29 = load i8, i8* %1, align 1
  %30 = zext i8 %29 to i64
  %31 = add nsw i64 %30, %28
  %32 = shl nsw i64 %31, 5
  %33 = icmp sgt i32 %13, 10
  br i1 %33, label %34, label %41

34:                                               ; preds = %27
  %35 = add nsw i32 %13, -1
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %1, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i64
  %40 = add nsw i64 %32, %39
  br label %42

41:                                               ; preds = %27
  switch i32 %13, label %170 [
    i32 10, label %42
    i32 9, label %48
    i32 8, label %54
    i32 7, label %60
    i32 6, label %66
    i32 5, label %72
    i32 4, label %78
    i32 3, label %84
    i32 2, label %90
  ]

42:                                               ; preds = %41, %34
  %43 = phi i64 [ %40, %34 ], [ %32, %41 ]
  %44 = getelementptr inbounds i8, i8* %1, i64 9
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i64
  %47 = add nsw i64 %43, %46
  br label %48

48:                                               ; preds = %42, %41
  %49 = phi i64 [ %32, %41 ], [ %47, %42 ]
  %50 = getelementptr inbounds i8, i8* %1, i64 8
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i64
  %53 = add i64 %49, %52
  br label %54

54:                                               ; preds = %48, %41
  %55 = phi i64 [ %32, %41 ], [ %53, %48 ]
  %56 = getelementptr inbounds i8, i8* %1, i64 7
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i64
  %59 = add i64 %55, %58
  br label %60

60:                                               ; preds = %54, %41
  %61 = phi i64 [ %32, %41 ], [ %59, %54 ]
  %62 = getelementptr inbounds i8, i8* %1, i64 6
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i64
  %65 = add i64 %61, %64
  br label %66

66:                                               ; preds = %60, %41
  %67 = phi i64 [ %32, %41 ], [ %65, %60 ]
  %68 = getelementptr inbounds i8, i8* %1, i64 5
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = add i64 %67, %70
  br label %72

72:                                               ; preds = %66, %41
  %73 = phi i64 [ %32, %41 ], [ %71, %66 ]
  %74 = getelementptr inbounds i8, i8* %1, i64 4
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i64
  %77 = add i64 %73, %76
  br label %78

78:                                               ; preds = %72, %41
  %79 = phi i64 [ %32, %41 ], [ %77, %72 ]
  %80 = getelementptr inbounds i8, i8* %1, i64 3
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i64
  %83 = add i64 %79, %82
  br label %84

84:                                               ; preds = %78, %41
  %85 = phi i64 [ %32, %41 ], [ %83, %78 ]
  %86 = getelementptr inbounds i8, i8* %1, i64 2
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i64
  %89 = add i64 %85, %88
  br label %90

90:                                               ; preds = %84, %41
  %91 = phi i64 [ %32, %41 ], [ %89, %84 ]
  %92 = getelementptr inbounds i8, i8* %1, i64 1
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i64
  %95 = add i64 %91, %94
  br label %170

96:                                               ; preds = %21
  %97 = icmp slt i32 %13, 1
  br i1 %97, label %167, label %98

98:                                               ; preds = %96
  %99 = add nsw i64 %16, -1
  %100 = and i64 %16, 3
  %101 = icmp ult i64 %99, 3
  br i1 %101, label %142, label %102

102:                                              ; preds = %98
  %103 = sub nsw i64 %16, %100
  br label %104

104:                                              ; preds = %104, %102
  %105 = phi i64 [ 0, %102 ], [ %139, %104 ]
  %106 = phi i32 [ %26, %102 ], [ %138, %104 ]
  %107 = phi i64 [ %103, %102 ], [ %140, %104 ]
  %108 = getelementptr inbounds i8, i8* %1, i64 %105
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = add i32 %106, %110
  %112 = mul i32 %111, 1025
  %113 = lshr i32 %112, 6
  %114 = xor i32 %113, %112
  %115 = or i64 %105, 1
  %116 = getelementptr inbounds i8, i8* %1, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = add i32 %114, %118
  %120 = mul i32 %119, 1025
  %121 = lshr i32 %120, 6
  %122 = xor i32 %121, %120
  %123 = or i64 %105, 2
  %124 = getelementptr inbounds i8, i8* %1, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = add i32 %122, %126
  %128 = mul i32 %127, 1025
  %129 = lshr i32 %128, 6
  %130 = xor i32 %129, %128
  %131 = or i64 %105, 3
  %132 = getelementptr inbounds i8, i8* %1, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = add i32 %130, %134
  %136 = mul i32 %135, 1025
  %137 = lshr i32 %136, 6
  %138 = xor i32 %137, %136
  %139 = add nuw nsw i64 %105, 4
  %140 = add i64 %107, -4
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %142, label %104

142:                                              ; preds = %104, %98
  %143 = phi i32 [ undef, %98 ], [ %138, %104 ]
  %144 = phi i64 [ 0, %98 ], [ %139, %104 ]
  %145 = phi i32 [ %26, %98 ], [ %138, %104 ]
  %146 = icmp eq i64 %100, 0
  br i1 %146, label %161, label %147

147:                                              ; preds = %142, %147
  %148 = phi i64 [ %158, %147 ], [ %144, %142 ]
  %149 = phi i32 [ %157, %147 ], [ %145, %142 ]
  %150 = phi i64 [ %159, %147 ], [ %100, %142 ]
  %151 = getelementptr inbounds i8, i8* %1, i64 %148
  %152 = load i8, i8* %151, align 1
  %153 = zext i8 %152 to i32
  %154 = add i32 %149, %153
  %155 = mul i32 %154, 1025
  %156 = lshr i32 %155, 6
  %157 = xor i32 %156, %155
  %158 = add nuw nsw i64 %148, 1
  %159 = add i64 %150, -1
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %161, label %147, !llvm.loop !4

161:                                              ; preds = %147, %142
  %162 = phi i32 [ %143, %142 ], [ %157, %147 ]
  %163 = mul i32 %162, 9
  %164 = lshr i32 %163, 11
  %165 = xor i32 %164, %163
  %166 = mul i32 %165, 32769
  br label %167

167:                                              ; preds = %96, %161
  %168 = phi i32 [ %166, %161 ], [ 0, %96 ]
  %169 = zext i32 %168 to i64
  br label %170

170:                                              ; preds = %90, %41, %167
  %171 = phi i64 [ %169, %167 ], [ %32, %41 ], [ %95, %90 ]
  %172 = urem i64 %171, %23
  %173 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 1
  %174 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %173, align 8
  %175 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %174, i64 %172, i32 3
  %176 = load i32, i32* %175, align 4
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %221, label %178

178:                                              ; preds = %170
  %179 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %174, i64 %172
  %180 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %179, i64 0, i32 0
  %181 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %180, align 8
  %182 = icmp eq %struct._xmlDictEntry* %181, null
  %183 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %174, i64 %172, i32 4
  %184 = load i64, i64* %183, align 8
  %185 = icmp eq i64 %184, %171
  br i1 %182, label %208, label %186

186:                                              ; preds = %178, %200
  %187 = phi i1 [ %207, %200 ], [ %185, %178 ]
  %188 = phi %struct._xmlDictEntry* [ %203, %200 ], [ %181, %178 ]
  %189 = phi %struct._xmlDictEntry* [ %188, %200 ], [ %179, %178 ]
  %190 = phi i64 [ %201, %200 ], [ 0, %178 ]
  br i1 %187, label %191, label %200

191:                                              ; preds = %186
  %192 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %189, i64 0, i32 2
  %193 = load i32, i32* %192, align 8
  %194 = icmp eq i32 %193, %13
  br i1 %194, label %195, label %200

195:                                              ; preds = %191
  %196 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %189, i64 0, i32 1
  %197 = load i8*, i8** %196, align 8
  %198 = tail call i32 @bcmp(i8* %197, i8* %1, i64 %16)
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %535, label %200

200:                                              ; preds = %195, %191, %186
  %201 = add i64 %190, 1
  %202 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %188, i64 0, i32 0
  %203 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %202, align 8
  %204 = icmp eq %struct._xmlDictEntry* %203, null
  %205 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %188, i64 0, i32 4
  %206 = load i64, i64* %205, align 8
  %207 = icmp eq i64 %206, %171
  br i1 %204, label %208, label %186

208:                                              ; preds = %200, %178
  %209 = phi i64 [ 0, %178 ], [ %201, %200 ]
  %210 = phi %struct._xmlDictEntry* [ %179, %178 ], [ %188, %200 ]
  %211 = phi i1 [ %185, %178 ], [ %207, %200 ]
  br i1 %211, label %212, label %221

212:                                              ; preds = %208
  %213 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %210, i64 0, i32 2
  %214 = load i32, i32* %213, align 8
  %215 = icmp eq i32 %214, %13
  br i1 %215, label %216, label %221

216:                                              ; preds = %212
  %217 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %210, i64 0, i32 1
  %218 = load i8*, i8** %217, align 8
  %219 = tail call i32 @bcmp(i8* %218, i8* %1, i64 %16)
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %535, label %221

221:                                              ; preds = %170, %216, %208, %212
  %222 = phi i64 [ %209, %216 ], [ %209, %212 ], [ %209, %208 ], [ 0, %170 ]
  %223 = phi %struct._xmlDictEntry* [ %210, %216 ], [ %210, %212 ], [ %210, %208 ], [ null, %170 ]
  %224 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 5
  %225 = load %struct._xmlDict*, %struct._xmlDict** %224, align 8
  %226 = icmp eq %struct._xmlDict* %225, null
  br i1 %226, label %429, label %227

227:                                              ; preds = %221
  %228 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %225, i64 0, i32 2
  %229 = load i64, i64* %228, align 8
  %230 = icmp eq i64 %229, 128
  br i1 %24, label %231, label %232

231:                                              ; preds = %227
  br i1 %230, label %378, label %304

232:                                              ; preds = %227
  br i1 %230, label %233, label %378

233:                                              ; preds = %232
  %234 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %225, i64 0, i32 6
  %235 = load i32, i32* %234, align 8
  %236 = sext i32 %235 to i64
  %237 = load i8, i8* %1, align 1
  %238 = zext i8 %237 to i64
  %239 = add nsw i64 %238, %236
  %240 = shl nsw i64 %239, 5
  %241 = icmp sgt i32 %13, 10
  br i1 %241, label %242, label %249

242:                                              ; preds = %233
  %243 = add nsw i32 %13, -1
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds i8, i8* %1, i64 %244
  %246 = load i8, i8* %245, align 1
  %247 = zext i8 %246 to i64
  %248 = add nsw i64 %240, %247
  br label %250

249:                                              ; preds = %233
  switch i32 %13, label %378 [
    i32 10, label %250
    i32 9, label %256
    i32 8, label %262
    i32 7, label %268
    i32 6, label %274
    i32 5, label %280
    i32 4, label %286
    i32 3, label %292
    i32 2, label %298
  ]

250:                                              ; preds = %249, %242
  %251 = phi i64 [ %248, %242 ], [ %240, %249 ]
  %252 = getelementptr inbounds i8, i8* %1, i64 9
  %253 = load i8, i8* %252, align 1
  %254 = zext i8 %253 to i64
  %255 = add nsw i64 %251, %254
  br label %256

256:                                              ; preds = %250, %249
  %257 = phi i64 [ %240, %249 ], [ %255, %250 ]
  %258 = getelementptr inbounds i8, i8* %1, i64 8
  %259 = load i8, i8* %258, align 1
  %260 = zext i8 %259 to i64
  %261 = add i64 %257, %260
  br label %262

262:                                              ; preds = %256, %249
  %263 = phi i64 [ %240, %249 ], [ %261, %256 ]
  %264 = getelementptr inbounds i8, i8* %1, i64 7
  %265 = load i8, i8* %264, align 1
  %266 = zext i8 %265 to i64
  %267 = add i64 %263, %266
  br label %268

268:                                              ; preds = %262, %249
  %269 = phi i64 [ %240, %249 ], [ %267, %262 ]
  %270 = getelementptr inbounds i8, i8* %1, i64 6
  %271 = load i8, i8* %270, align 1
  %272 = zext i8 %271 to i64
  %273 = add i64 %269, %272
  br label %274

274:                                              ; preds = %268, %249
  %275 = phi i64 [ %240, %249 ], [ %273, %268 ]
  %276 = getelementptr inbounds i8, i8* %1, i64 5
  %277 = load i8, i8* %276, align 1
  %278 = zext i8 %277 to i64
  %279 = add i64 %275, %278
  br label %280

280:                                              ; preds = %274, %249
  %281 = phi i64 [ %240, %249 ], [ %279, %274 ]
  %282 = getelementptr inbounds i8, i8* %1, i64 4
  %283 = load i8, i8* %282, align 1
  %284 = zext i8 %283 to i64
  %285 = add i64 %281, %284
  br label %286

286:                                              ; preds = %280, %249
  %287 = phi i64 [ %240, %249 ], [ %285, %280 ]
  %288 = getelementptr inbounds i8, i8* %1, i64 3
  %289 = load i8, i8* %288, align 1
  %290 = zext i8 %289 to i64
  %291 = add i64 %287, %290
  br label %292

292:                                              ; preds = %286, %249
  %293 = phi i64 [ %240, %249 ], [ %291, %286 ]
  %294 = getelementptr inbounds i8, i8* %1, i64 2
  %295 = load i8, i8* %294, align 1
  %296 = zext i8 %295 to i64
  %297 = add i64 %293, %296
  br label %298

298:                                              ; preds = %292, %249
  %299 = phi i64 [ %240, %249 ], [ %297, %292 ]
  %300 = getelementptr inbounds i8, i8* %1, i64 1
  %301 = load i8, i8* %300, align 1
  %302 = zext i8 %301 to i64
  %303 = add i64 %299, %302
  br label %378

304:                                              ; preds = %231
  %305 = icmp slt i32 %13, 1
  br i1 %305, label %378, label %306

306:                                              ; preds = %304
  %307 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %225, i64 0, i32 6
  %308 = load i32, i32* %307, align 8
  %309 = add nsw i64 %16, -1
  %310 = and i64 %16, 3
  %311 = icmp ult i64 %309, 3
  br i1 %311, label %352, label %312

312:                                              ; preds = %306
  %313 = sub nsw i64 %16, %310
  br label %314

314:                                              ; preds = %314, %312
  %315 = phi i64 [ 0, %312 ], [ %349, %314 ]
  %316 = phi i32 [ %308, %312 ], [ %348, %314 ]
  %317 = phi i64 [ %313, %312 ], [ %350, %314 ]
  %318 = getelementptr inbounds i8, i8* %1, i64 %315
  %319 = load i8, i8* %318, align 1
  %320 = zext i8 %319 to i32
  %321 = add i32 %316, %320
  %322 = mul i32 %321, 1025
  %323 = lshr i32 %322, 6
  %324 = xor i32 %323, %322
  %325 = or i64 %315, 1
  %326 = getelementptr inbounds i8, i8* %1, i64 %325
  %327 = load i8, i8* %326, align 1
  %328 = zext i8 %327 to i32
  %329 = add i32 %324, %328
  %330 = mul i32 %329, 1025
  %331 = lshr i32 %330, 6
  %332 = xor i32 %331, %330
  %333 = or i64 %315, 2
  %334 = getelementptr inbounds i8, i8* %1, i64 %333
  %335 = load i8, i8* %334, align 1
  %336 = zext i8 %335 to i32
  %337 = add i32 %332, %336
  %338 = mul i32 %337, 1025
  %339 = lshr i32 %338, 6
  %340 = xor i32 %339, %338
  %341 = or i64 %315, 3
  %342 = getelementptr inbounds i8, i8* %1, i64 %341
  %343 = load i8, i8* %342, align 1
  %344 = zext i8 %343 to i32
  %345 = add i32 %340, %344
  %346 = mul i32 %345, 1025
  %347 = lshr i32 %346, 6
  %348 = xor i32 %347, %346
  %349 = add nuw nsw i64 %315, 4
  %350 = add i64 %317, -4
  %351 = icmp eq i64 %350, 0
  br i1 %351, label %352, label %314

352:                                              ; preds = %314, %306
  %353 = phi i32 [ undef, %306 ], [ %348, %314 ]
  %354 = phi i64 [ 0, %306 ], [ %349, %314 ]
  %355 = phi i32 [ %308, %306 ], [ %348, %314 ]
  %356 = icmp eq i64 %310, 0
  br i1 %356, label %371, label %357

357:                                              ; preds = %352, %357
  %358 = phi i64 [ %368, %357 ], [ %354, %352 ]
  %359 = phi i32 [ %367, %357 ], [ %355, %352 ]
  %360 = phi i64 [ %369, %357 ], [ %310, %352 ]
  %361 = getelementptr inbounds i8, i8* %1, i64 %358
  %362 = load i8, i8* %361, align 1
  %363 = zext i8 %362 to i32
  %364 = add i32 %359, %363
  %365 = mul i32 %364, 1025
  %366 = lshr i32 %365, 6
  %367 = xor i32 %366, %365
  %368 = add nuw nsw i64 %358, 1
  %369 = add i64 %360, -1
  %370 = icmp eq i64 %369, 0
  br i1 %370, label %371, label %357, !llvm.loop !5

371:                                              ; preds = %357, %352
  %372 = phi i32 [ %353, %352 ], [ %367, %357 ]
  %373 = mul i32 %372, 9
  %374 = lshr i32 %373, 11
  %375 = xor i32 %374, %373
  %376 = mul i32 %375, 32769
  %377 = zext i32 %376 to i64
  br label %378

378:                                              ; preds = %371, %304, %231, %298, %249, %232
  %379 = phi i64 [ %171, %232 ], [ %240, %249 ], [ %303, %298 ], [ %171, %231 ], [ %377, %371 ], [ 0, %304 ]
  %380 = urem i64 %379, %229
  %381 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %225, i64 0, i32 1
  %382 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %381, align 8
  %383 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %382, i64 %380, i32 3
  %384 = load i32, i32* %383, align 4
  %385 = icmp eq i32 %384, 0
  br i1 %385, label %429, label %386

386:                                              ; preds = %378
  %387 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %382, i64 %380
  %388 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %387, i64 0, i32 0
  %389 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %388, align 8
  %390 = icmp eq %struct._xmlDictEntry* %389, null
  %391 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %382, i64 %380, i32 4
  %392 = load i64, i64* %391, align 8
  %393 = icmp eq i64 %392, %379
  br i1 %390, label %416, label %394

394:                                              ; preds = %386, %408
  %395 = phi i1 [ %415, %408 ], [ %393, %386 ]
  %396 = phi %struct._xmlDictEntry* [ %411, %408 ], [ %389, %386 ]
  %397 = phi %struct._xmlDictEntry* [ %396, %408 ], [ %387, %386 ]
  %398 = phi i64 [ %409, %408 ], [ %222, %386 ]
  br i1 %395, label %399, label %408

399:                                              ; preds = %394
  %400 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %397, i64 0, i32 2
  %401 = load i32, i32* %400, align 8
  %402 = icmp eq i32 %401, %13
  br i1 %402, label %403, label %408

403:                                              ; preds = %399
  %404 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %397, i64 0, i32 1
  %405 = load i8*, i8** %404, align 8
  %406 = tail call i32 @bcmp(i8* %405, i8* %1, i64 %16)
  %407 = icmp eq i32 %406, 0
  br i1 %407, label %535, label %408

408:                                              ; preds = %403, %399, %394
  %409 = add i64 %398, 1
  %410 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %396, i64 0, i32 0
  %411 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %410, align 8
  %412 = icmp eq %struct._xmlDictEntry* %411, null
  %413 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %396, i64 0, i32 4
  %414 = load i64, i64* %413, align 8
  %415 = icmp eq i64 %414, %379
  br i1 %412, label %416, label %394

416:                                              ; preds = %408, %386
  %417 = phi i64 [ %222, %386 ], [ %409, %408 ]
  %418 = phi %struct._xmlDictEntry* [ %387, %386 ], [ %396, %408 ]
  %419 = phi i1 [ %393, %386 ], [ %415, %408 ]
  br i1 %419, label %420, label %429

420:                                              ; preds = %416
  %421 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %418, i64 0, i32 2
  %422 = load i32, i32* %421, align 8
  %423 = icmp eq i32 %422, %13
  br i1 %423, label %424, label %429

424:                                              ; preds = %420
  %425 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %418, i64 0, i32 1
  %426 = load i8*, i8** %425, align 8
  %427 = tail call i32 @bcmp(i8* %426, i8* %1, i64 %16)
  %428 = icmp eq i32 %427, 0
  br i1 %428, label %535, label %429

429:                                              ; preds = %378, %416, %420, %424, %221
  %430 = phi i64 [ %222, %221 ], [ %417, %424 ], [ %417, %420 ], [ %417, %416 ], [ %222, %378 ]
  %431 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 4
  %432 = load %struct._xmlDictStrings*, %struct._xmlDictStrings** %431, align 8
  %433 = icmp eq %struct._xmlDictStrings* %432, null
  br i1 %433, label %462, label %434

434:                                              ; preds = %429, %446
  %435 = phi %struct._xmlDictStrings* [ %453, %446 ], [ %432, %429 ]
  %436 = phi i64 [ %451, %446 ], [ 0, %429 ]
  %437 = phi i64 [ %450, %446 ], [ 0, %429 ]
  %438 = getelementptr inbounds %struct._xmlDictStrings, %struct._xmlDictStrings* %435, i64 0, i32 2
  %439 = bitcast i8** %438 to i64*
  %440 = load i64, i64* %439, align 8
  %441 = getelementptr inbounds %struct._xmlDictStrings, %struct._xmlDictStrings* %435, i64 0, i32 1
  %442 = bitcast i8** %441 to i64*
  %443 = load i64, i64* %442, align 8
  %444 = sub i64 %440, %443
  %445 = icmp ugt i64 %444, %16
  br i1 %445, label %490, label %446

446:                                              ; preds = %434
  %447 = getelementptr inbounds %struct._xmlDictStrings, %struct._xmlDictStrings* %435, i64 0, i32 3
  %448 = load i64, i64* %447, align 8
  %449 = icmp ugt i64 %448, %437
  %450 = select i1 %449, i64 %448, i64 %437
  %451 = add i64 %448, %436
  %452 = getelementptr inbounds %struct._xmlDictStrings, %struct._xmlDictStrings* %435, i64 0, i32 0
  %453 = load %struct._xmlDictStrings*, %struct._xmlDictStrings** %452, align 8
  %454 = icmp eq %struct._xmlDictStrings* %453, null
  br i1 %454, label %455, label %434

455:                                              ; preds = %446
  %456 = icmp ne i64 %15, 0
  %457 = icmp ugt i64 %451, %15
  %458 = and i1 %456, %457
  br i1 %458, label %535, label %459

459:                                              ; preds = %455
  %460 = icmp eq i64 %450, 0
  %461 = shl i64 %450, 2
  br i1 %460, label %462, label %463

462:                                              ; preds = %459, %429
  br label %463

463:                                              ; preds = %462, %459
  %464 = phi i64 [ 1000, %462 ], [ %461, %459 ]
  %465 = shl i32 %13, 2
  %466 = zext i32 %465 to i64
  %467 = icmp ult i64 %464, %466
  %468 = select i1 %467, i64 %466, i64 %464
  %469 = load i8* (i64)*, i8* (i64)** @xmlMalloc, align 8
  %470 = add i64 %468, 48
  %471 = tail call i8* %469(i64 %470) #10
  %472 = icmp eq i8* %471, null
  br i1 %472, label %535, label %473

473:                                              ; preds = %463
  %474 = bitcast i8* %471 to %struct._xmlDictStrings*
  %475 = getelementptr inbounds i8, i8* %471, i64 24
  %476 = bitcast i8* %475 to i64*
  store i64 %468, i64* %476, align 8
  %477 = getelementptr inbounds i8, i8* %471, i64 32
  %478 = bitcast i8* %477 to i64*
  store i64 0, i64* %478, align 8
  %479 = getelementptr inbounds i8, i8* %471, i64 40
  %480 = getelementptr inbounds i8, i8* %471, i64 8
  %481 = bitcast i8* %480 to i8**
  store i8* %479, i8** %481, align 8
  %482 = getelementptr inbounds i8, i8* %479, i64 %468
  %483 = getelementptr inbounds i8, i8* %471, i64 16
  %484 = bitcast i8* %483 to i8**
  store i8* %482, i8** %484, align 8
  %485 = bitcast %struct._xmlDictStrings** %431 to i64*
  %486 = load i64, i64* %485, align 8
  %487 = bitcast i8* %471 to i64*
  store i64 %486, i64* %487, align 8
  %488 = bitcast %struct._xmlDictStrings** %431 to i8**
  store i8* %471, i8** %488, align 8
  %489 = load i8*, i8** %481, align 8
  br label %492

490:                                              ; preds = %434
  %491 = inttoptr i64 %443 to i8*
  br label %492

492:                                              ; preds = %473, %490
  %493 = phi i8* [ %491, %490 ], [ %489, %473 ]
  %494 = phi %struct._xmlDictStrings* [ %435, %490 ], [ %474, %473 ]
  %495 = getelementptr inbounds %struct._xmlDictStrings, %struct._xmlDictStrings* %494, i64 0, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %493, i8* align 1 %1, i64 %16, i1 false) #10
  %496 = load i8*, i8** %495, align 8
  %497 = getelementptr inbounds i8, i8* %496, i64 %16
  %498 = getelementptr inbounds i8, i8* %497, i64 1
  store i8* %498, i8** %495, align 8
  store i8 0, i8* %497, align 1
  %499 = getelementptr inbounds %struct._xmlDictStrings, %struct._xmlDictStrings* %494, i64 0, i32 4
  %500 = load i64, i64* %499, align 8
  %501 = add i64 %500, 1
  store i64 %501, i64* %499, align 8
  %502 = icmp eq i8* %493, null
  br i1 %502, label %535, label %503

503:                                              ; preds = %492
  %504 = icmp eq %struct._xmlDictEntry* %223, null
  br i1 %504, label %505, label %508

505:                                              ; preds = %503
  %506 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %173, align 8
  %507 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %506, i64 %172
  br label %513

508:                                              ; preds = %503
  %509 = load i8* (i64)*, i8* (i64)** @xmlMalloc, align 8
  %510 = tail call i8* %509(i64 32) #10
  %511 = bitcast i8* %510 to %struct._xmlDictEntry*
  %512 = icmp eq i8* %510, null
  br i1 %512, label %535, label %513

513:                                              ; preds = %508, %505
  %514 = phi %struct._xmlDictEntry* [ %507, %505 ], [ %511, %508 ]
  %515 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %514, i64 0, i32 1
  store i8* %493, i8** %515, align 8
  %516 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %514, i64 0, i32 2
  store i32 %13, i32* %516, align 8
  %517 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %514, i64 0, i32 0
  store %struct._xmlDictEntry* null, %struct._xmlDictEntry** %517, align 8
  %518 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %514, i64 0, i32 3
  store i32 1, i32* %518, align 4
  %519 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %514, i64 0, i32 4
  store i64 %171, i64* %519, align 8
  br i1 %504, label %522, label %520

520:                                              ; preds = %513
  %521 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %223, i64 0, i32 0
  store %struct._xmlDictEntry* %514, %struct._xmlDictEntry** %521, align 8
  br label %522

522:                                              ; preds = %513, %520
  %523 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 3
  %524 = load i32, i32* %523, align 8
  %525 = add i32 %524, 1
  store i32 %525, i32* %523, align 8
  %526 = icmp ugt i64 %430, 3
  br i1 %526, label %527, label %534

527:                                              ; preds = %522
  %528 = load i64, i64* %22, align 8
  %529 = icmp ult i64 %528, 2731
  br i1 %529, label %530, label %534

530:                                              ; preds = %527
  %531 = mul i64 %528, 6
  %532 = tail call fastcc i32 @xmlDictGrow(%struct._xmlDict* %0, i64 %531)
  %533 = icmp eq i32 %532, 0
  br i1 %533, label %534, label %535

534:                                              ; preds = %530, %527, %522
  br label %535

535:                                              ; preds = %195, %403, %463, %455, %424, %530, %508, %492, %216, %12, %3, %534
  %536 = phi i8* [ %493, %534 ], [ null, %3 ], [ null, %12 ], [ %218, %216 ], [ null, %492 ], [ null, %508 ], [ null, %530 ], [ %426, %424 ], [ null, %455 ], [ null, %463 ], [ %405, %403 ], [ %197, %195 ]
  ret i8* %536
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @xmlDictGrow(%struct._xmlDict*, i64) unnamed_addr #1 {
  %3 = icmp eq %struct._xmlDict* %0, null
  %4 = add i64 %1, -8
  %5 = icmp ugt i64 %4, 16376
  %6 = or i1 %3, %5
  br i1 %6, label %446, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 1
  %11 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %10, align 8
  %12 = icmp eq %struct._xmlDictEntry* %11, null
  br i1 %12, label %446, label %13

13:                                               ; preds = %7
  %14 = icmp eq i64 %9, 128
  %15 = load i8* (i64)*, i8* (i64)** @xmlMalloc, align 8
  %16 = shl i64 %1, 5
  %17 = tail call i8* %15(i64 %16) #10
  %18 = bitcast %struct._xmlDictEntry** %10 to i8**
  store i8* %17, i8** %18, align 8
  %19 = icmp eq i8* %17, null
  br i1 %19, label %20, label %21

20:                                               ; preds = %13
  store %struct._xmlDictEntry* %11, %struct._xmlDictEntry** %10, align 8
  br label %446

21:                                               ; preds = %13
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 0, i64 %16, i1 false)
  store i64 %1, i64* %8, align 8
  %22 = icmp eq i64 %9, 0
  br i1 %22, label %442, label %23

23:                                               ; preds = %21
  %24 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 6
  br label %28

25:                                               ; preds = %238
  br i1 %22, label %442, label %26

26:                                               ; preds = %25
  %27 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 6
  br label %242

28:                                               ; preds = %238, %23
  %29 = phi i32 [ 0, %23 ], [ %239, %238 ]
  %30 = phi i64 [ 0, %23 ], [ %240, %238 ]
  %31 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %11, i64 %30
  %32 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %11, i64 %30, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %238, label %35

35:                                               ; preds = %28
  br i1 %14, label %40, label %36

36:                                               ; preds = %35
  %37 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %11, i64 %30, i32 4
  %38 = load i64, i64* %37, align 8
  %39 = load i64, i64* %8, align 8
  br label %196

40:                                               ; preds = %35
  %41 = load i64, i64* %8, align 8
  %42 = icmp eq i64 %41, 128
  %43 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %11, i64 %30, i32 1
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %11, i64 %30, i32 2
  %46 = load i32, i32* %45, align 8
  %47 = load i32, i32* %24, align 8
  br i1 %42, label %48, label %119

48:                                               ; preds = %40
  %49 = icmp eq i8* %44, null
  br i1 %49, label %196, label %50

50:                                               ; preds = %48
  %51 = sext i32 %47 to i64
  %52 = load i8, i8* %44, align 1
  %53 = zext i8 %52 to i64
  %54 = add nsw i64 %53, %51
  %55 = shl nsw i64 %54, 5
  %56 = icmp sgt i32 %46, 10
  br i1 %56, label %57, label %64

57:                                               ; preds = %50
  %58 = add nsw i32 %46, -1
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %44, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i64
  %63 = add nsw i64 %55, %62
  br label %65

64:                                               ; preds = %50
  switch i32 %46, label %196 [
    i32 10, label %65
    i32 9, label %71
    i32 8, label %77
    i32 7, label %83
    i32 6, label %89
    i32 5, label %95
    i32 4, label %101
    i32 3, label %107
    i32 2, label %113
  ]

65:                                               ; preds = %64, %57
  %66 = phi i64 [ %63, %57 ], [ %55, %64 ]
  %67 = getelementptr inbounds i8, i8* %44, i64 9
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i64
  %70 = add nsw i64 %66, %69
  br label %71

71:                                               ; preds = %65, %64
  %72 = phi i64 [ %55, %64 ], [ %70, %65 ]
  %73 = getelementptr inbounds i8, i8* %44, i64 8
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i64
  %76 = add i64 %72, %75
  br label %77

77:                                               ; preds = %71, %64
  %78 = phi i64 [ %55, %64 ], [ %76, %71 ]
  %79 = getelementptr inbounds i8, i8* %44, i64 7
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i64
  %82 = add i64 %78, %81
  br label %83

83:                                               ; preds = %77, %64
  %84 = phi i64 [ %55, %64 ], [ %82, %77 ]
  %85 = getelementptr inbounds i8, i8* %44, i64 6
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i64
  %88 = add i64 %84, %87
  br label %89

89:                                               ; preds = %83, %64
  %90 = phi i64 [ %55, %64 ], [ %88, %83 ]
  %91 = getelementptr inbounds i8, i8* %44, i64 5
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i64
  %94 = add i64 %90, %93
  br label %95

95:                                               ; preds = %89, %64
  %96 = phi i64 [ %55, %64 ], [ %94, %89 ]
  %97 = getelementptr inbounds i8, i8* %44, i64 4
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i64
  %100 = add i64 %96, %99
  br label %101

101:                                              ; preds = %95, %64
  %102 = phi i64 [ %55, %64 ], [ %100, %95 ]
  %103 = getelementptr inbounds i8, i8* %44, i64 3
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i64
  %106 = add i64 %102, %105
  br label %107

107:                                              ; preds = %101, %64
  %108 = phi i64 [ %55, %64 ], [ %106, %101 ]
  %109 = getelementptr inbounds i8, i8* %44, i64 2
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i64
  %112 = add i64 %108, %111
  br label %113

113:                                              ; preds = %107, %64
  %114 = phi i64 [ %55, %64 ], [ %112, %107 ]
  %115 = getelementptr inbounds i8, i8* %44, i64 1
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i64
  %118 = add i64 %114, %117
  br label %196

119:                                              ; preds = %40
  %120 = icmp slt i32 %46, 1
  %121 = icmp eq i8* %44, null
  %122 = or i1 %121, %120
  br i1 %122, label %193, label %123

123:                                              ; preds = %119
  %124 = zext i32 %46 to i64
  %125 = add nsw i64 %124, -1
  %126 = and i64 %124, 3
  %127 = icmp ult i64 %125, 3
  br i1 %127, label %168, label %128

128:                                              ; preds = %123
  %129 = sub nsw i64 %124, %126
  br label %130

130:                                              ; preds = %130, %128
  %131 = phi i64 [ 0, %128 ], [ %165, %130 ]
  %132 = phi i32 [ %47, %128 ], [ %164, %130 ]
  %133 = phi i64 [ %129, %128 ], [ %166, %130 ]
  %134 = getelementptr inbounds i8, i8* %44, i64 %131
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i32
  %137 = add i32 %132, %136
  %138 = mul i32 %137, 1025
  %139 = lshr i32 %138, 6
  %140 = xor i32 %139, %138
  %141 = or i64 %131, 1
  %142 = getelementptr inbounds i8, i8* %44, i64 %141
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = add i32 %140, %144
  %146 = mul i32 %145, 1025
  %147 = lshr i32 %146, 6
  %148 = xor i32 %147, %146
  %149 = or i64 %131, 2
  %150 = getelementptr inbounds i8, i8* %44, i64 %149
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i32
  %153 = add i32 %148, %152
  %154 = mul i32 %153, 1025
  %155 = lshr i32 %154, 6
  %156 = xor i32 %155, %154
  %157 = or i64 %131, 3
  %158 = getelementptr inbounds i8, i8* %44, i64 %157
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i32
  %161 = add i32 %156, %160
  %162 = mul i32 %161, 1025
  %163 = lshr i32 %162, 6
  %164 = xor i32 %163, %162
  %165 = add nuw nsw i64 %131, 4
  %166 = add i64 %133, -4
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %168, label %130

168:                                              ; preds = %130, %123
  %169 = phi i32 [ undef, %123 ], [ %164, %130 ]
  %170 = phi i64 [ 0, %123 ], [ %165, %130 ]
  %171 = phi i32 [ %47, %123 ], [ %164, %130 ]
  %172 = icmp eq i64 %126, 0
  br i1 %172, label %187, label %173

173:                                              ; preds = %168, %173
  %174 = phi i64 [ %184, %173 ], [ %170, %168 ]
  %175 = phi i32 [ %183, %173 ], [ %171, %168 ]
  %176 = phi i64 [ %185, %173 ], [ %126, %168 ]
  %177 = getelementptr inbounds i8, i8* %44, i64 %174
  %178 = load i8, i8* %177, align 1
  %179 = zext i8 %178 to i32
  %180 = add i32 %175, %179
  %181 = mul i32 %180, 1025
  %182 = lshr i32 %181, 6
  %183 = xor i32 %182, %181
  %184 = add nuw nsw i64 %174, 1
  %185 = add i64 %176, -1
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %187, label %173, !llvm.loop !6

187:                                              ; preds = %173, %168
  %188 = phi i32 [ %169, %168 ], [ %183, %173 ]
  %189 = mul i32 %188, 9
  %190 = lshr i32 %189, 11
  %191 = xor i32 %190, %189
  %192 = mul i32 %191, 32769
  br label %193

193:                                              ; preds = %119, %187
  %194 = phi i32 [ %192, %187 ], [ 0, %119 ]
  %195 = zext i32 %194 to i64
  br label %196

196:                                              ; preds = %113, %64, %48, %193, %36
  %197 = phi i64 [ %39, %36 ], [ %41, %193 ], [ 128, %48 ], [ 128, %64 ], [ 128, %113 ]
  %198 = phi i64 [ %38, %36 ], [ %195, %193 ], [ 0, %48 ], [ %55, %64 ], [ %118, %113 ]
  %199 = urem i64 %198, %197
  %200 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %10, align 8
  %201 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %200, i64 %199, i32 3
  %202 = load i32, i32* %201, align 4
  %203 = icmp eq i32 %202, 0
  br i1 %203, label %204, label %212

204:                                              ; preds = %196
  %205 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %200, i64 %199
  %206 = bitcast %struct._xmlDictEntry* %205 to i8*
  %207 = bitcast %struct._xmlDictEntry* %31 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %206, i8* align 8 %207, i64 32, i1 false)
  %208 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %10, align 8
  %209 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %208, i64 %199, i32 0
  store %struct._xmlDictEntry* null, %struct._xmlDictEntry** %209, align 8
  %210 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %10, align 8
  %211 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %210, i64 %199, i32 4
  store i64 %198, i64* %211, align 8
  br label %238

212:                                              ; preds = %196
  %213 = load i8* (i64)*, i8* (i64)** @xmlMalloc, align 8
  %214 = tail call i8* %213(i64 32) #10
  %215 = icmp eq i8* %214, null
  br i1 %215, label %238, label %216

216:                                              ; preds = %212
  %217 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %11, i64 %30, i32 1
  %218 = bitcast i8** %217 to i64*
  %219 = load i64, i64* %218, align 8
  %220 = getelementptr inbounds i8, i8* %214, i64 8
  %221 = bitcast i8* %220 to i64*
  store i64 %219, i64* %221, align 8
  %222 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %11, i64 %30, i32 2
  %223 = load i32, i32* %222, align 8
  %224 = getelementptr inbounds i8, i8* %214, i64 16
  %225 = bitcast i8* %224 to i32*
  store i32 %223, i32* %225, align 8
  %226 = getelementptr inbounds i8, i8* %214, i64 24
  %227 = bitcast i8* %226 to i64*
  store i64 %198, i64* %227, align 8
  %228 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %10, align 8
  %229 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %228, i64 %199, i32 0
  %230 = bitcast %struct._xmlDictEntry** %229 to i64*
  %231 = load i64, i64* %230, align 8
  %232 = bitcast i8* %214 to i64*
  store i64 %231, i64* %232, align 8
  %233 = getelementptr inbounds i8, i8* %214, i64 20
  %234 = bitcast i8* %233 to i32*
  store i32 1, i32* %234, align 4
  %235 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %10, align 8
  %236 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %235, i64 %199, i32 0
  %237 = bitcast %struct._xmlDictEntry** %236 to i8**
  store i8* %214, i8** %237, align 8
  br label %238

238:                                              ; preds = %216, %212, %204, %28
  %239 = phi i32 [ %29, %28 ], [ %29, %204 ], [ %29, %216 ], [ -1, %212 ]
  %240 = add nuw i64 %30, 1
  %241 = icmp eq i64 %240, %9
  br i1 %241, label %25, label %28

242:                                              ; preds = %439, %26
  %243 = phi i64 [ 0, %26 ], [ %440, %439 ]
  %244 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %11, i64 %243, i32 0
  %245 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %244, align 8
  %246 = icmp eq %struct._xmlDictEntry* %245, null
  br i1 %246, label %439, label %247

247:                                              ; preds = %242, %437
  %248 = phi %struct._xmlDictEntry* [ %251, %437 ], [ %245, %242 ]
  %249 = bitcast %struct._xmlDictEntry* %248 to i8*
  %250 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %248, i64 0, i32 0
  %251 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %250, align 8
  br i1 %14, label %256, label %252

252:                                              ; preds = %247
  %253 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %248, i64 0, i32 4
  %254 = load i64, i64* %253, align 8
  %255 = load i64, i64* %8, align 8
  br label %412

256:                                              ; preds = %247
  %257 = load i64, i64* %8, align 8
  %258 = icmp eq i64 %257, 128
  %259 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %248, i64 0, i32 1
  %260 = load i8*, i8** %259, align 8
  %261 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %248, i64 0, i32 2
  %262 = load i32, i32* %261, align 8
  %263 = load i32, i32* %27, align 8
  br i1 %258, label %264, label %335

264:                                              ; preds = %256
  %265 = icmp eq i8* %260, null
  br i1 %265, label %412, label %266

266:                                              ; preds = %264
  %267 = sext i32 %263 to i64
  %268 = load i8, i8* %260, align 1
  %269 = zext i8 %268 to i64
  %270 = add nsw i64 %269, %267
  %271 = shl nsw i64 %270, 5
  %272 = icmp sgt i32 %262, 10
  br i1 %272, label %273, label %280

273:                                              ; preds = %266
  %274 = add nsw i32 %262, -1
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds i8, i8* %260, i64 %275
  %277 = load i8, i8* %276, align 1
  %278 = zext i8 %277 to i64
  %279 = add nsw i64 %271, %278
  br label %281

280:                                              ; preds = %266
  switch i32 %262, label %412 [
    i32 10, label %281
    i32 9, label %287
    i32 8, label %293
    i32 7, label %299
    i32 6, label %305
    i32 5, label %311
    i32 4, label %317
    i32 3, label %323
    i32 2, label %329
  ]

281:                                              ; preds = %280, %273
  %282 = phi i64 [ %279, %273 ], [ %271, %280 ]
  %283 = getelementptr inbounds i8, i8* %260, i64 9
  %284 = load i8, i8* %283, align 1
  %285 = zext i8 %284 to i64
  %286 = add nsw i64 %282, %285
  br label %287

287:                                              ; preds = %281, %280
  %288 = phi i64 [ %271, %280 ], [ %286, %281 ]
  %289 = getelementptr inbounds i8, i8* %260, i64 8
  %290 = load i8, i8* %289, align 1
  %291 = zext i8 %290 to i64
  %292 = add i64 %288, %291
  br label %293

293:                                              ; preds = %287, %280
  %294 = phi i64 [ %271, %280 ], [ %292, %287 ]
  %295 = getelementptr inbounds i8, i8* %260, i64 7
  %296 = load i8, i8* %295, align 1
  %297 = zext i8 %296 to i64
  %298 = add i64 %294, %297
  br label %299

299:                                              ; preds = %293, %280
  %300 = phi i64 [ %271, %280 ], [ %298, %293 ]
  %301 = getelementptr inbounds i8, i8* %260, i64 6
  %302 = load i8, i8* %301, align 1
  %303 = zext i8 %302 to i64
  %304 = add i64 %300, %303
  br label %305

305:                                              ; preds = %299, %280
  %306 = phi i64 [ %271, %280 ], [ %304, %299 ]
  %307 = getelementptr inbounds i8, i8* %260, i64 5
  %308 = load i8, i8* %307, align 1
  %309 = zext i8 %308 to i64
  %310 = add i64 %306, %309
  br label %311

311:                                              ; preds = %305, %280
  %312 = phi i64 [ %271, %280 ], [ %310, %305 ]
  %313 = getelementptr inbounds i8, i8* %260, i64 4
  %314 = load i8, i8* %313, align 1
  %315 = zext i8 %314 to i64
  %316 = add i64 %312, %315
  br label %317

317:                                              ; preds = %311, %280
  %318 = phi i64 [ %271, %280 ], [ %316, %311 ]
  %319 = getelementptr inbounds i8, i8* %260, i64 3
  %320 = load i8, i8* %319, align 1
  %321 = zext i8 %320 to i64
  %322 = add i64 %318, %321
  br label %323

323:                                              ; preds = %317, %280
  %324 = phi i64 [ %271, %280 ], [ %322, %317 ]
  %325 = getelementptr inbounds i8, i8* %260, i64 2
  %326 = load i8, i8* %325, align 1
  %327 = zext i8 %326 to i64
  %328 = add i64 %324, %327
  br label %329

329:                                              ; preds = %323, %280
  %330 = phi i64 [ %271, %280 ], [ %328, %323 ]
  %331 = getelementptr inbounds i8, i8* %260, i64 1
  %332 = load i8, i8* %331, align 1
  %333 = zext i8 %332 to i64
  %334 = add i64 %330, %333
  br label %412

335:                                              ; preds = %256
  %336 = icmp slt i32 %262, 1
  %337 = icmp eq i8* %260, null
  %338 = or i1 %337, %336
  br i1 %338, label %409, label %339

339:                                              ; preds = %335
  %340 = zext i32 %262 to i64
  %341 = add nsw i64 %340, -1
  %342 = and i64 %340, 3
  %343 = icmp ult i64 %341, 3
  br i1 %343, label %384, label %344

344:                                              ; preds = %339
  %345 = sub nsw i64 %340, %342
  br label %346

346:                                              ; preds = %346, %344
  %347 = phi i64 [ 0, %344 ], [ %381, %346 ]
  %348 = phi i32 [ %263, %344 ], [ %380, %346 ]
  %349 = phi i64 [ %345, %344 ], [ %382, %346 ]
  %350 = getelementptr inbounds i8, i8* %260, i64 %347
  %351 = load i8, i8* %350, align 1
  %352 = zext i8 %351 to i32
  %353 = add i32 %348, %352
  %354 = mul i32 %353, 1025
  %355 = lshr i32 %354, 6
  %356 = xor i32 %355, %354
  %357 = or i64 %347, 1
  %358 = getelementptr inbounds i8, i8* %260, i64 %357
  %359 = load i8, i8* %358, align 1
  %360 = zext i8 %359 to i32
  %361 = add i32 %356, %360
  %362 = mul i32 %361, 1025
  %363 = lshr i32 %362, 6
  %364 = xor i32 %363, %362
  %365 = or i64 %347, 2
  %366 = getelementptr inbounds i8, i8* %260, i64 %365
  %367 = load i8, i8* %366, align 1
  %368 = zext i8 %367 to i32
  %369 = add i32 %364, %368
  %370 = mul i32 %369, 1025
  %371 = lshr i32 %370, 6
  %372 = xor i32 %371, %370
  %373 = or i64 %347, 3
  %374 = getelementptr inbounds i8, i8* %260, i64 %373
  %375 = load i8, i8* %374, align 1
  %376 = zext i8 %375 to i32
  %377 = add i32 %372, %376
  %378 = mul i32 %377, 1025
  %379 = lshr i32 %378, 6
  %380 = xor i32 %379, %378
  %381 = add nuw nsw i64 %347, 4
  %382 = add i64 %349, -4
  %383 = icmp eq i64 %382, 0
  br i1 %383, label %384, label %346

384:                                              ; preds = %346, %339
  %385 = phi i32 [ undef, %339 ], [ %380, %346 ]
  %386 = phi i64 [ 0, %339 ], [ %381, %346 ]
  %387 = phi i32 [ %263, %339 ], [ %380, %346 ]
  %388 = icmp eq i64 %342, 0
  br i1 %388, label %403, label %389

389:                                              ; preds = %384, %389
  %390 = phi i64 [ %400, %389 ], [ %386, %384 ]
  %391 = phi i32 [ %399, %389 ], [ %387, %384 ]
  %392 = phi i64 [ %401, %389 ], [ %342, %384 ]
  %393 = getelementptr inbounds i8, i8* %260, i64 %390
  %394 = load i8, i8* %393, align 1
  %395 = zext i8 %394 to i32
  %396 = add i32 %391, %395
  %397 = mul i32 %396, 1025
  %398 = lshr i32 %397, 6
  %399 = xor i32 %398, %397
  %400 = add nuw nsw i64 %390, 1
  %401 = add i64 %392, -1
  %402 = icmp eq i64 %401, 0
  br i1 %402, label %403, label %389, !llvm.loop !7

403:                                              ; preds = %389, %384
  %404 = phi i32 [ %385, %384 ], [ %399, %389 ]
  %405 = mul i32 %404, 9
  %406 = lshr i32 %405, 11
  %407 = xor i32 %406, %405
  %408 = mul i32 %407, 32769
  br label %409

409:                                              ; preds = %335, %403
  %410 = phi i32 [ %408, %403 ], [ 0, %335 ]
  %411 = zext i32 %410 to i64
  br label %412

412:                                              ; preds = %329, %280, %264, %409, %252
  %413 = phi i64 [ %255, %252 ], [ %257, %409 ], [ 128, %264 ], [ 128, %280 ], [ 128, %329 ]
  %414 = phi i64 [ %254, %252 ], [ %411, %409 ], [ 0, %264 ], [ %271, %280 ], [ %334, %329 ]
  %415 = urem i64 %414, %413
  %416 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %10, align 8
  %417 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %416, i64 %415
  %418 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %416, i64 %415, i32 3
  %419 = load i32, i32* %418, align 4
  %420 = icmp eq i32 %419, 0
  br i1 %420, label %421, label %430

421:                                              ; preds = %412
  %422 = bitcast %struct._xmlDictEntry* %417 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %422, i8* nonnull align 8 %249, i64 32, i1 false)
  %423 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %10, align 8
  %424 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %423, i64 %415, i32 0
  store %struct._xmlDictEntry* null, %struct._xmlDictEntry** %424, align 8
  %425 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %10, align 8
  %426 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %425, i64 %415, i32 3
  store i32 1, i32* %426, align 4
  %427 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %10, align 8
  %428 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %427, i64 %415, i32 4
  store i64 %414, i64* %428, align 8
  %429 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  tail call void %429(i8* nonnull %249) #10
  br label %437

430:                                              ; preds = %412
  %431 = bitcast %struct._xmlDictEntry* %417 to i64*
  %432 = load i64, i64* %431, align 8
  %433 = bitcast %struct._xmlDictEntry* %248 to i64*
  store i64 %432, i64* %433, align 8
  %434 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %248, i64 0, i32 4
  store i64 %414, i64* %434, align 8
  %435 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %10, align 8
  %436 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %435, i64 %415, i32 0
  store %struct._xmlDictEntry* %248, %struct._xmlDictEntry** %436, align 8
  br label %437

437:                                              ; preds = %430, %421
  %438 = icmp eq %struct._xmlDictEntry* %251, null
  br i1 %438, label %439, label %247

439:                                              ; preds = %437, %242
  %440 = add nuw i64 %243, 1
  %441 = icmp eq i64 %440, %9
  br i1 %441, label %442, label %242

442:                                              ; preds = %439, %21, %25
  %443 = phi i32 [ %239, %25 ], [ 0, %21 ], [ %239, %439 ]
  %444 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  %445 = bitcast %struct._xmlDictEntry* %11 to i8*
  tail call void %444(i8* nonnull %445) #10
  br label %446

446:                                              ; preds = %7, %2, %442, %20
  %447 = phi i32 [ -1, %20 ], [ %443, %442 ], [ -1, %2 ], [ -1, %7 ]
  ret i32 %447
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i8* @xmlDictExists(%struct._xmlDict* readonly, i8* readonly, i32) local_unnamed_addr #6 {
  %4 = icmp eq %struct._xmlDict* %0, null
  %5 = icmp eq i8* %1, null
  %6 = or i1 %4, %5
  br i1 %6, label %422, label %7

7:                                                ; preds = %3
  %8 = icmp slt i32 %2, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %7
  %10 = tail call i64 @strlen(i8* nonnull %1) #11
  %11 = trunc i64 %10 to i32
  br label %12

12:                                               ; preds = %7, %9
  %13 = phi i32 [ %11, %9 ], [ %2, %7 ]
  %14 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 7
  %15 = load i64, i64* %14, align 8
  %16 = zext i32 %13 to i64
  %17 = add i64 %15, -1
  %18 = icmp ult i64 %17, %16
  %19 = icmp ugt i32 %13, 1073741823
  %20 = or i1 %19, %18
  br i1 %20, label %422, label %21

21:                                               ; preds = %12
  %22 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %23, 128
  %25 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 6
  %26 = load i32, i32* %25, align 8
  br i1 %24, label %27, label %96

27:                                               ; preds = %21
  %28 = sext i32 %26 to i64
  %29 = load i8, i8* %1, align 1
  %30 = zext i8 %29 to i64
  %31 = add nsw i64 %30, %28
  %32 = shl nsw i64 %31, 5
  %33 = icmp sgt i32 %13, 10
  br i1 %33, label %34, label %41

34:                                               ; preds = %27
  %35 = add nsw i32 %13, -1
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %1, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i64
  %40 = add nsw i64 %32, %39
  br label %42

41:                                               ; preds = %27
  switch i32 %13, label %170 [
    i32 10, label %42
    i32 9, label %48
    i32 8, label %54
    i32 7, label %60
    i32 6, label %66
    i32 5, label %72
    i32 4, label %78
    i32 3, label %84
    i32 2, label %90
  ]

42:                                               ; preds = %41, %34
  %43 = phi i64 [ %40, %34 ], [ %32, %41 ]
  %44 = getelementptr inbounds i8, i8* %1, i64 9
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i64
  %47 = add nsw i64 %43, %46
  br label %48

48:                                               ; preds = %42, %41
  %49 = phi i64 [ %32, %41 ], [ %47, %42 ]
  %50 = getelementptr inbounds i8, i8* %1, i64 8
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i64
  %53 = add i64 %49, %52
  br label %54

54:                                               ; preds = %48, %41
  %55 = phi i64 [ %32, %41 ], [ %53, %48 ]
  %56 = getelementptr inbounds i8, i8* %1, i64 7
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i64
  %59 = add i64 %55, %58
  br label %60

60:                                               ; preds = %54, %41
  %61 = phi i64 [ %32, %41 ], [ %59, %54 ]
  %62 = getelementptr inbounds i8, i8* %1, i64 6
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i64
  %65 = add i64 %61, %64
  br label %66

66:                                               ; preds = %60, %41
  %67 = phi i64 [ %32, %41 ], [ %65, %60 ]
  %68 = getelementptr inbounds i8, i8* %1, i64 5
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = add i64 %67, %70
  br label %72

72:                                               ; preds = %66, %41
  %73 = phi i64 [ %32, %41 ], [ %71, %66 ]
  %74 = getelementptr inbounds i8, i8* %1, i64 4
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i64
  %77 = add i64 %73, %76
  br label %78

78:                                               ; preds = %72, %41
  %79 = phi i64 [ %32, %41 ], [ %77, %72 ]
  %80 = getelementptr inbounds i8, i8* %1, i64 3
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i64
  %83 = add i64 %79, %82
  br label %84

84:                                               ; preds = %78, %41
  %85 = phi i64 [ %32, %41 ], [ %83, %78 ]
  %86 = getelementptr inbounds i8, i8* %1, i64 2
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i64
  %89 = add i64 %85, %88
  br label %90

90:                                               ; preds = %84, %41
  %91 = phi i64 [ %32, %41 ], [ %89, %84 ]
  %92 = getelementptr inbounds i8, i8* %1, i64 1
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i64
  %95 = add i64 %91, %94
  br label %170

96:                                               ; preds = %21
  %97 = icmp slt i32 %13, 1
  br i1 %97, label %167, label %98

98:                                               ; preds = %96
  %99 = add nsw i64 %16, -1
  %100 = and i64 %16, 3
  %101 = icmp ult i64 %99, 3
  br i1 %101, label %142, label %102

102:                                              ; preds = %98
  %103 = sub nsw i64 %16, %100
  br label %104

104:                                              ; preds = %104, %102
  %105 = phi i64 [ 0, %102 ], [ %139, %104 ]
  %106 = phi i32 [ %26, %102 ], [ %138, %104 ]
  %107 = phi i64 [ %103, %102 ], [ %140, %104 ]
  %108 = getelementptr inbounds i8, i8* %1, i64 %105
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = add i32 %106, %110
  %112 = mul i32 %111, 1025
  %113 = lshr i32 %112, 6
  %114 = xor i32 %113, %112
  %115 = or i64 %105, 1
  %116 = getelementptr inbounds i8, i8* %1, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = add i32 %114, %118
  %120 = mul i32 %119, 1025
  %121 = lshr i32 %120, 6
  %122 = xor i32 %121, %120
  %123 = or i64 %105, 2
  %124 = getelementptr inbounds i8, i8* %1, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = add i32 %122, %126
  %128 = mul i32 %127, 1025
  %129 = lshr i32 %128, 6
  %130 = xor i32 %129, %128
  %131 = or i64 %105, 3
  %132 = getelementptr inbounds i8, i8* %1, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = add i32 %130, %134
  %136 = mul i32 %135, 1025
  %137 = lshr i32 %136, 6
  %138 = xor i32 %137, %136
  %139 = add nuw nsw i64 %105, 4
  %140 = add i64 %107, -4
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %142, label %104

142:                                              ; preds = %104, %98
  %143 = phi i32 [ undef, %98 ], [ %138, %104 ]
  %144 = phi i64 [ 0, %98 ], [ %139, %104 ]
  %145 = phi i32 [ %26, %98 ], [ %138, %104 ]
  %146 = icmp eq i64 %100, 0
  br i1 %146, label %161, label %147

147:                                              ; preds = %142, %147
  %148 = phi i64 [ %158, %147 ], [ %144, %142 ]
  %149 = phi i32 [ %157, %147 ], [ %145, %142 ]
  %150 = phi i64 [ %159, %147 ], [ %100, %142 ]
  %151 = getelementptr inbounds i8, i8* %1, i64 %148
  %152 = load i8, i8* %151, align 1
  %153 = zext i8 %152 to i32
  %154 = add i32 %149, %153
  %155 = mul i32 %154, 1025
  %156 = lshr i32 %155, 6
  %157 = xor i32 %156, %155
  %158 = add nuw nsw i64 %148, 1
  %159 = add i64 %150, -1
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %161, label %147, !llvm.loop !8

161:                                              ; preds = %147, %142
  %162 = phi i32 [ %143, %142 ], [ %157, %147 ]
  %163 = mul i32 %162, 9
  %164 = lshr i32 %163, 11
  %165 = xor i32 %164, %163
  %166 = mul i32 %165, 32769
  br label %167

167:                                              ; preds = %96, %161
  %168 = phi i32 [ %166, %161 ], [ 0, %96 ]
  %169 = zext i32 %168 to i64
  br label %170

170:                                              ; preds = %90, %41, %167
  %171 = phi i64 [ %169, %167 ], [ %32, %41 ], [ %95, %90 ]
  %172 = urem i64 %171, %23
  %173 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 1
  %174 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %173, align 8
  %175 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %174, i64 %172, i32 3
  %176 = load i32, i32* %175, align 4
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %218, label %178

178:                                              ; preds = %170
  %179 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %174, i64 %172
  %180 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %179, i64 0, i32 0
  %181 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %180, align 8
  %182 = icmp eq %struct._xmlDictEntry* %181, null
  %183 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %174, i64 %172, i32 4
  %184 = load i64, i64* %183, align 8
  %185 = icmp eq i64 %184, %171
  br i1 %182, label %206, label %186

186:                                              ; preds = %178, %199
  %187 = phi i1 [ %205, %199 ], [ %185, %178 ]
  %188 = phi %struct._xmlDictEntry* [ %201, %199 ], [ %181, %178 ]
  %189 = phi %struct._xmlDictEntry* [ %188, %199 ], [ %179, %178 ]
  br i1 %187, label %190, label %199

190:                                              ; preds = %186
  %191 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %189, i64 0, i32 2
  %192 = load i32, i32* %191, align 8
  %193 = icmp eq i32 %192, %13
  br i1 %193, label %194, label %199

194:                                              ; preds = %190
  %195 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %189, i64 0, i32 1
  %196 = load i8*, i8** %195, align 8
  %197 = tail call i32 @bcmp(i8* %196, i8* %1, i64 %16)
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %422, label %199

199:                                              ; preds = %194, %190, %186
  %200 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %188, i64 0, i32 0
  %201 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %200, align 8
  %202 = icmp eq %struct._xmlDictEntry* %201, null
  %203 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %188, i64 0, i32 4
  %204 = load i64, i64* %203, align 8
  %205 = icmp eq i64 %204, %171
  br i1 %202, label %206, label %186

206:                                              ; preds = %199, %178
  %207 = phi %struct._xmlDictEntry* [ %179, %178 ], [ %188, %199 ]
  %208 = phi i1 [ %185, %178 ], [ %205, %199 ]
  br i1 %208, label %209, label %218

209:                                              ; preds = %206
  %210 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %207, i64 0, i32 2
  %211 = load i32, i32* %210, align 8
  %212 = icmp eq i32 %211, %13
  br i1 %212, label %213, label %218

213:                                              ; preds = %209
  %214 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %207, i64 0, i32 1
  %215 = load i8*, i8** %214, align 8
  %216 = tail call i32 @bcmp(i8* %215, i8* %1, i64 %16)
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %422, label %218

218:                                              ; preds = %170, %213, %206, %209
  %219 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 5
  %220 = load %struct._xmlDict*, %struct._xmlDict** %219, align 8
  %221 = icmp eq %struct._xmlDict* %220, null
  br i1 %221, label %422, label %222

222:                                              ; preds = %218
  %223 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %220, i64 0, i32 2
  %224 = load i64, i64* %223, align 8
  %225 = icmp eq i64 %224, 128
  br i1 %24, label %226, label %227

226:                                              ; preds = %222
  br i1 %225, label %373, label %299

227:                                              ; preds = %222
  br i1 %225, label %228, label %373

228:                                              ; preds = %227
  %229 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %220, i64 0, i32 6
  %230 = load i32, i32* %229, align 8
  %231 = sext i32 %230 to i64
  %232 = load i8, i8* %1, align 1
  %233 = zext i8 %232 to i64
  %234 = add nsw i64 %233, %231
  %235 = shl nsw i64 %234, 5
  %236 = icmp sgt i32 %13, 10
  br i1 %236, label %237, label %244

237:                                              ; preds = %228
  %238 = add nsw i32 %13, -1
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds i8, i8* %1, i64 %239
  %241 = load i8, i8* %240, align 1
  %242 = zext i8 %241 to i64
  %243 = add nsw i64 %235, %242
  br label %245

244:                                              ; preds = %228
  switch i32 %13, label %373 [
    i32 10, label %245
    i32 9, label %251
    i32 8, label %257
    i32 7, label %263
    i32 6, label %269
    i32 5, label %275
    i32 4, label %281
    i32 3, label %287
    i32 2, label %293
  ]

245:                                              ; preds = %244, %237
  %246 = phi i64 [ %243, %237 ], [ %235, %244 ]
  %247 = getelementptr inbounds i8, i8* %1, i64 9
  %248 = load i8, i8* %247, align 1
  %249 = zext i8 %248 to i64
  %250 = add nsw i64 %246, %249
  br label %251

251:                                              ; preds = %245, %244
  %252 = phi i64 [ %235, %244 ], [ %250, %245 ]
  %253 = getelementptr inbounds i8, i8* %1, i64 8
  %254 = load i8, i8* %253, align 1
  %255 = zext i8 %254 to i64
  %256 = add i64 %252, %255
  br label %257

257:                                              ; preds = %251, %244
  %258 = phi i64 [ %235, %244 ], [ %256, %251 ]
  %259 = getelementptr inbounds i8, i8* %1, i64 7
  %260 = load i8, i8* %259, align 1
  %261 = zext i8 %260 to i64
  %262 = add i64 %258, %261
  br label %263

263:                                              ; preds = %257, %244
  %264 = phi i64 [ %235, %244 ], [ %262, %257 ]
  %265 = getelementptr inbounds i8, i8* %1, i64 6
  %266 = load i8, i8* %265, align 1
  %267 = zext i8 %266 to i64
  %268 = add i64 %264, %267
  br label %269

269:                                              ; preds = %263, %244
  %270 = phi i64 [ %235, %244 ], [ %268, %263 ]
  %271 = getelementptr inbounds i8, i8* %1, i64 5
  %272 = load i8, i8* %271, align 1
  %273 = zext i8 %272 to i64
  %274 = add i64 %270, %273
  br label %275

275:                                              ; preds = %269, %244
  %276 = phi i64 [ %235, %244 ], [ %274, %269 ]
  %277 = getelementptr inbounds i8, i8* %1, i64 4
  %278 = load i8, i8* %277, align 1
  %279 = zext i8 %278 to i64
  %280 = add i64 %276, %279
  br label %281

281:                                              ; preds = %275, %244
  %282 = phi i64 [ %235, %244 ], [ %280, %275 ]
  %283 = getelementptr inbounds i8, i8* %1, i64 3
  %284 = load i8, i8* %283, align 1
  %285 = zext i8 %284 to i64
  %286 = add i64 %282, %285
  br label %287

287:                                              ; preds = %281, %244
  %288 = phi i64 [ %235, %244 ], [ %286, %281 ]
  %289 = getelementptr inbounds i8, i8* %1, i64 2
  %290 = load i8, i8* %289, align 1
  %291 = zext i8 %290 to i64
  %292 = add i64 %288, %291
  br label %293

293:                                              ; preds = %287, %244
  %294 = phi i64 [ %235, %244 ], [ %292, %287 ]
  %295 = getelementptr inbounds i8, i8* %1, i64 1
  %296 = load i8, i8* %295, align 1
  %297 = zext i8 %296 to i64
  %298 = add i64 %294, %297
  br label %373

299:                                              ; preds = %226
  %300 = icmp slt i32 %13, 1
  br i1 %300, label %373, label %301

301:                                              ; preds = %299
  %302 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %220, i64 0, i32 6
  %303 = load i32, i32* %302, align 8
  %304 = add nsw i64 %16, -1
  %305 = and i64 %16, 3
  %306 = icmp ult i64 %304, 3
  br i1 %306, label %347, label %307

307:                                              ; preds = %301
  %308 = sub nsw i64 %16, %305
  br label %309

309:                                              ; preds = %309, %307
  %310 = phi i64 [ 0, %307 ], [ %344, %309 ]
  %311 = phi i32 [ %303, %307 ], [ %343, %309 ]
  %312 = phi i64 [ %308, %307 ], [ %345, %309 ]
  %313 = getelementptr inbounds i8, i8* %1, i64 %310
  %314 = load i8, i8* %313, align 1
  %315 = zext i8 %314 to i32
  %316 = add i32 %311, %315
  %317 = mul i32 %316, 1025
  %318 = lshr i32 %317, 6
  %319 = xor i32 %318, %317
  %320 = or i64 %310, 1
  %321 = getelementptr inbounds i8, i8* %1, i64 %320
  %322 = load i8, i8* %321, align 1
  %323 = zext i8 %322 to i32
  %324 = add i32 %319, %323
  %325 = mul i32 %324, 1025
  %326 = lshr i32 %325, 6
  %327 = xor i32 %326, %325
  %328 = or i64 %310, 2
  %329 = getelementptr inbounds i8, i8* %1, i64 %328
  %330 = load i8, i8* %329, align 1
  %331 = zext i8 %330 to i32
  %332 = add i32 %327, %331
  %333 = mul i32 %332, 1025
  %334 = lshr i32 %333, 6
  %335 = xor i32 %334, %333
  %336 = or i64 %310, 3
  %337 = getelementptr inbounds i8, i8* %1, i64 %336
  %338 = load i8, i8* %337, align 1
  %339 = zext i8 %338 to i32
  %340 = add i32 %335, %339
  %341 = mul i32 %340, 1025
  %342 = lshr i32 %341, 6
  %343 = xor i32 %342, %341
  %344 = add nuw nsw i64 %310, 4
  %345 = add i64 %312, -4
  %346 = icmp eq i64 %345, 0
  br i1 %346, label %347, label %309

347:                                              ; preds = %309, %301
  %348 = phi i32 [ undef, %301 ], [ %343, %309 ]
  %349 = phi i64 [ 0, %301 ], [ %344, %309 ]
  %350 = phi i32 [ %303, %301 ], [ %343, %309 ]
  %351 = icmp eq i64 %305, 0
  br i1 %351, label %366, label %352

352:                                              ; preds = %347, %352
  %353 = phi i64 [ %363, %352 ], [ %349, %347 ]
  %354 = phi i32 [ %362, %352 ], [ %350, %347 ]
  %355 = phi i64 [ %364, %352 ], [ %305, %347 ]
  %356 = getelementptr inbounds i8, i8* %1, i64 %353
  %357 = load i8, i8* %356, align 1
  %358 = zext i8 %357 to i32
  %359 = add i32 %354, %358
  %360 = mul i32 %359, 1025
  %361 = lshr i32 %360, 6
  %362 = xor i32 %361, %360
  %363 = add nuw nsw i64 %353, 1
  %364 = add i64 %355, -1
  %365 = icmp eq i64 %364, 0
  br i1 %365, label %366, label %352, !llvm.loop !9

366:                                              ; preds = %352, %347
  %367 = phi i32 [ %348, %347 ], [ %362, %352 ]
  %368 = mul i32 %367, 9
  %369 = lshr i32 %368, 11
  %370 = xor i32 %369, %368
  %371 = mul i32 %370, 32769
  %372 = zext i32 %371 to i64
  br label %373

373:                                              ; preds = %366, %299, %226, %293, %244, %227
  %374 = phi i64 [ %171, %227 ], [ %235, %244 ], [ %298, %293 ], [ %171, %226 ], [ %372, %366 ], [ 0, %299 ]
  %375 = urem i64 %374, %224
  %376 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %220, i64 0, i32 1
  %377 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %376, align 8
  %378 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %377, i64 %375, i32 3
  %379 = load i32, i32* %378, align 4
  %380 = icmp eq i32 %379, 0
  br i1 %380, label %421, label %381

381:                                              ; preds = %373
  %382 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %377, i64 %375
  %383 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %382, i64 0, i32 0
  %384 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %383, align 8
  %385 = icmp eq %struct._xmlDictEntry* %384, null
  %386 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %377, i64 %375, i32 4
  %387 = load i64, i64* %386, align 8
  %388 = icmp eq i64 %387, %374
  br i1 %385, label %409, label %389

389:                                              ; preds = %381, %402
  %390 = phi i1 [ %408, %402 ], [ %388, %381 ]
  %391 = phi %struct._xmlDictEntry* [ %404, %402 ], [ %384, %381 ]
  %392 = phi %struct._xmlDictEntry* [ %391, %402 ], [ %382, %381 ]
  br i1 %390, label %393, label %402

393:                                              ; preds = %389
  %394 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %392, i64 0, i32 2
  %395 = load i32, i32* %394, align 8
  %396 = icmp eq i32 %395, %13
  br i1 %396, label %397, label %402

397:                                              ; preds = %393
  %398 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %392, i64 0, i32 1
  %399 = load i8*, i8** %398, align 8
  %400 = tail call i32 @bcmp(i8* %399, i8* %1, i64 %16)
  %401 = icmp eq i32 %400, 0
  br i1 %401, label %422, label %402

402:                                              ; preds = %397, %393, %389
  %403 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %391, i64 0, i32 0
  %404 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %403, align 8
  %405 = icmp eq %struct._xmlDictEntry* %404, null
  %406 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %391, i64 0, i32 4
  %407 = load i64, i64* %406, align 8
  %408 = icmp eq i64 %407, %374
  br i1 %405, label %409, label %389

409:                                              ; preds = %402, %381
  %410 = phi %struct._xmlDictEntry* [ %382, %381 ], [ %391, %402 ]
  %411 = phi i1 [ %388, %381 ], [ %408, %402 ]
  br i1 %411, label %412, label %421

412:                                              ; preds = %409
  %413 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %410, i64 0, i32 2
  %414 = load i32, i32* %413, align 8
  %415 = icmp eq i32 %414, %13
  br i1 %415, label %416, label %421

416:                                              ; preds = %412
  %417 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %410, i64 0, i32 1
  %418 = load i8*, i8** %417, align 8
  %419 = tail call i32 @bcmp(i8* %418, i8* %1, i64 %16)
  %420 = icmp eq i32 %419, 0
  br i1 %420, label %422, label %421

421:                                              ; preds = %416, %412, %409, %373
  br label %422

422:                                              ; preds = %194, %397, %218, %421, %416, %213, %12, %3
  %423 = phi i8* [ null, %3 ], [ null, %12 ], [ %215, %213 ], [ %418, %416 ], [ null, %421 ], [ null, %218 ], [ %399, %397 ], [ %196, %194 ]
  ret i8* %423
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @xmlDictQLookup(%struct._xmlDict*, i8*, i8*) local_unnamed_addr #1 {
  %4 = icmp eq %struct._xmlDict* %0, null
  %5 = icmp eq i8* %2, null
  %6 = or i1 %4, %5
  br i1 %6, label %575, label %7

7:                                                ; preds = %3
  %8 = icmp eq i8* %1, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %7
  %10 = tail call i8* @xmlDictLookup(%struct._xmlDict* nonnull %0, i8* nonnull %2, i32 -1)
  br label %575

11:                                               ; preds = %7
  %12 = tail call i64 @strlen(i8* nonnull %2) #11
  %13 = trunc i64 %12 to i32
  %14 = tail call i64 @strlen(i8* nonnull %1) #11
  %15 = trunc i64 %14 to i32
  %16 = add i32 %13, 1
  %17 = add i32 %16, %15
  %18 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 2
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 128
  %21 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 6
  %22 = load i32, i32* %21, align 8
  br i1 %20, label %23, label %25

23:                                               ; preds = %11
  %24 = tail call fastcc i64 @xmlDictComputeFastQKey(i8* nonnull %1, i32 %15, i8* nonnull %2, i32 %13, i32 %22)
  br label %169

25:                                               ; preds = %11
  %26 = icmp sgt i32 %15, 0
  br i1 %26, label %27, label %91

27:                                               ; preds = %25
  %28 = and i64 %14, 4294967295
  %29 = add nsw i64 %28, -1
  %30 = and i64 %14, 3
  %31 = icmp ult i64 %29, 3
  br i1 %31, label %72, label %32

32:                                               ; preds = %27
  %33 = sub nsw i64 %28, %30
  br label %34

34:                                               ; preds = %34, %32
  %35 = phi i64 [ 0, %32 ], [ %69, %34 ]
  %36 = phi i32 [ %22, %32 ], [ %68, %34 ]
  %37 = phi i64 [ %33, %32 ], [ %70, %34 ]
  %38 = getelementptr inbounds i8, i8* %1, i64 %35
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = add i32 %36, %40
  %42 = mul i32 %41, 1025
  %43 = lshr i32 %42, 6
  %44 = xor i32 %43, %42
  %45 = or i64 %35, 1
  %46 = getelementptr inbounds i8, i8* %1, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = add i32 %44, %48
  %50 = mul i32 %49, 1025
  %51 = lshr i32 %50, 6
  %52 = xor i32 %51, %50
  %53 = or i64 %35, 2
  %54 = getelementptr inbounds i8, i8* %1, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = add i32 %52, %56
  %58 = mul i32 %57, 1025
  %59 = lshr i32 %58, 6
  %60 = xor i32 %59, %58
  %61 = or i64 %35, 3
  %62 = getelementptr inbounds i8, i8* %1, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = add i32 %60, %64
  %66 = mul i32 %65, 1025
  %67 = lshr i32 %66, 6
  %68 = xor i32 %67, %66
  %69 = add nuw nsw i64 %35, 4
  %70 = add i64 %37, -4
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %34

72:                                               ; preds = %34, %27
  %73 = phi i32 [ undef, %27 ], [ %68, %34 ]
  %74 = phi i64 [ 0, %27 ], [ %69, %34 ]
  %75 = phi i32 [ %22, %27 ], [ %68, %34 ]
  %76 = icmp eq i64 %30, 0
  br i1 %76, label %91, label %77

77:                                               ; preds = %72, %77
  %78 = phi i64 [ %88, %77 ], [ %74, %72 ]
  %79 = phi i32 [ %87, %77 ], [ %75, %72 ]
  %80 = phi i64 [ %89, %77 ], [ %30, %72 ]
  %81 = getelementptr inbounds i8, i8* %1, i64 %78
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = add i32 %79, %83
  %85 = mul i32 %84, 1025
  %86 = lshr i32 %85, 6
  %87 = xor i32 %86, %85
  %88 = add nuw nsw i64 %78, 1
  %89 = add i64 %80, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %77, !llvm.loop !10

91:                                               ; preds = %72, %77, %25
  %92 = phi i32 [ %22, %25 ], [ %73, %72 ], [ %87, %77 ]
  %93 = mul i32 %92, 1025
  %94 = add i32 %93, 59450
  %95 = lshr i32 %94, 6
  %96 = xor i32 %95, %94
  %97 = icmp sgt i32 %13, 0
  br i1 %97, label %98, label %162

98:                                               ; preds = %91
  %99 = and i64 %12, 4294967295
  %100 = add nsw i64 %99, -1
  %101 = and i64 %12, 3
  %102 = icmp ult i64 %100, 3
  br i1 %102, label %143, label %103

103:                                              ; preds = %98
  %104 = sub nsw i64 %99, %101
  br label %105

105:                                              ; preds = %105, %103
  %106 = phi i64 [ 0, %103 ], [ %140, %105 ]
  %107 = phi i32 [ %96, %103 ], [ %139, %105 ]
  %108 = phi i64 [ %104, %103 ], [ %141, %105 ]
  %109 = getelementptr inbounds i8, i8* %2, i64 %106
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = add i32 %107, %111
  %113 = mul i32 %112, 1025
  %114 = lshr i32 %113, 6
  %115 = xor i32 %114, %113
  %116 = or i64 %106, 1
  %117 = getelementptr inbounds i8, i8* %2, i64 %116
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = add i32 %115, %119
  %121 = mul i32 %120, 1025
  %122 = lshr i32 %121, 6
  %123 = xor i32 %122, %121
  %124 = or i64 %106, 2
  %125 = getelementptr inbounds i8, i8* %2, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = add i32 %123, %127
  %129 = mul i32 %128, 1025
  %130 = lshr i32 %129, 6
  %131 = xor i32 %130, %129
  %132 = or i64 %106, 3
  %133 = getelementptr inbounds i8, i8* %2, i64 %132
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i32
  %136 = add i32 %131, %135
  %137 = mul i32 %136, 1025
  %138 = lshr i32 %137, 6
  %139 = xor i32 %138, %137
  %140 = add nuw nsw i64 %106, 4
  %141 = add i64 %108, -4
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %105

143:                                              ; preds = %105, %98
  %144 = phi i32 [ undef, %98 ], [ %139, %105 ]
  %145 = phi i64 [ 0, %98 ], [ %140, %105 ]
  %146 = phi i32 [ %96, %98 ], [ %139, %105 ]
  %147 = icmp eq i64 %101, 0
  br i1 %147, label %162, label %148

148:                                              ; preds = %143, %148
  %149 = phi i64 [ %159, %148 ], [ %145, %143 ]
  %150 = phi i32 [ %158, %148 ], [ %146, %143 ]
  %151 = phi i64 [ %160, %148 ], [ %101, %143 ]
  %152 = getelementptr inbounds i8, i8* %2, i64 %149
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i32
  %155 = add i32 %150, %154
  %156 = mul i32 %155, 1025
  %157 = lshr i32 %156, 6
  %158 = xor i32 %157, %156
  %159 = add nuw nsw i64 %149, 1
  %160 = add i64 %151, -1
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %162, label %148, !llvm.loop !11

162:                                              ; preds = %143, %148, %91
  %163 = phi i32 [ %96, %91 ], [ %144, %143 ], [ %158, %148 ]
  %164 = mul i32 %163, 9
  %165 = lshr i32 %164, 11
  %166 = xor i32 %165, %164
  %167 = mul i32 %166, 32769
  %168 = zext i32 %167 to i64
  br label %169

169:                                              ; preds = %23, %162
  %170 = phi i64 [ %24, %23 ], [ %168, %162 ]
  %171 = urem i64 %170, %19
  %172 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 1
  %173 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %172, align 8
  %174 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %173, i64 %171, i32 3
  %175 = load i32, i32* %174, align 4
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %229, label %177

177:                                              ; preds = %169
  %178 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %173, i64 %171
  %179 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %178, i64 0, i32 0
  %180 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %179, align 8
  %181 = icmp eq %struct._xmlDictEntry* %180, null
  %182 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %173, i64 %171, i32 4
  %183 = load i64, i64* %182, align 8
  %184 = icmp eq i64 %183, %170
  br i1 %181, label %214, label %185

185:                                              ; preds = %177, %205
  %186 = phi %struct._xmlDictEntry* [ %209, %205 ], [ %180, %177 ]
  %187 = phi i1 [ %213, %205 ], [ %184, %177 ]
  %188 = phi %struct._xmlDictEntry** [ %208, %205 ], [ %179, %177 ]
  %189 = phi %struct._xmlDictEntry* [ %206, %205 ], [ %178, %177 ]
  %190 = phi i64 [ %207, %205 ], [ 0, %177 ]
  br i1 %187, label %191, label %205

191:                                              ; preds = %185
  %192 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %189, i64 0, i32 2
  %193 = load i32, i32* %192, align 8
  %194 = icmp eq i32 %193, %17
  br i1 %194, label %195, label %205

195:                                              ; preds = %191
  %196 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %189, i64 0, i32 1
  %197 = load i8*, i8** %196, align 8
  %198 = tail call i32 @xmlStrQEqual(i8* nonnull %1, i8* %2, i8* %197) #10
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %200, label %202

200:                                              ; preds = %195
  %201 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %188, align 8
  br label %205

202:                                              ; preds = %195
  %203 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %189, i64 0, i32 1
  %204 = load i8*, i8** %203, align 8
  br label %575

205:                                              ; preds = %200, %191, %185
  %206 = phi %struct._xmlDictEntry* [ %201, %200 ], [ %186, %191 ], [ %186, %185 ]
  %207 = add i64 %190, 1
  %208 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %206, i64 0, i32 0
  %209 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %208, align 8
  %210 = icmp eq %struct._xmlDictEntry* %209, null
  %211 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %206, i64 0, i32 4
  %212 = load i64, i64* %211, align 8
  %213 = icmp eq i64 %212, %170
  br i1 %210, label %214, label %185

214:                                              ; preds = %205, %177
  %215 = phi i64 [ 0, %177 ], [ %207, %205 ]
  %216 = phi %struct._xmlDictEntry* [ %178, %177 ], [ %206, %205 ]
  %217 = phi i1 [ %184, %177 ], [ %213, %205 ]
  br i1 %217, label %218, label %229

218:                                              ; preds = %214
  %219 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %216, i64 0, i32 2
  %220 = load i32, i32* %219, align 8
  %221 = icmp eq i32 %220, %17
  br i1 %221, label %222, label %229

222:                                              ; preds = %218
  %223 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %216, i64 0, i32 1
  %224 = load i8*, i8** %223, align 8
  %225 = tail call i32 @xmlStrQEqual(i8* nonnull %1, i8* %2, i8* %224) #10
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %229, label %227

227:                                              ; preds = %222
  %228 = load i8*, i8** %223, align 8
  br label %575

229:                                              ; preds = %169, %222, %214, %218
  %230 = phi i64 [ %215, %222 ], [ %215, %218 ], [ %215, %214 ], [ 0, %169 ]
  %231 = phi %struct._xmlDictEntry* [ %216, %222 ], [ %216, %218 ], [ %216, %214 ], [ null, %169 ]
  %232 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 5
  %233 = load %struct._xmlDict*, %struct._xmlDict** %232, align 8
  %234 = icmp eq %struct._xmlDict* %233, null
  br i1 %234, label %457, label %235

235:                                              ; preds = %229
  %236 = load i64, i64* %18, align 8
  %237 = icmp eq i64 %236, 128
  %238 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %233, i64 0, i32 2
  %239 = load i64, i64* %238, align 8
  %240 = icmp eq i64 %239, 128
  br i1 %237, label %241, label %242

241:                                              ; preds = %235
  br i1 %240, label %393, label %247

242:                                              ; preds = %235
  br i1 %240, label %243, label %393

243:                                              ; preds = %242
  %244 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %233, i64 0, i32 6
  %245 = load i32, i32* %244, align 8
  %246 = tail call fastcc i64 @xmlDictComputeFastQKey(i8* nonnull %1, i32 %15, i8* %2, i32 %13, i32 %245)
  br label %393

247:                                              ; preds = %241
  %248 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %233, i64 0, i32 6
  %249 = load i32, i32* %248, align 8
  %250 = icmp sgt i32 %15, 0
  br i1 %250, label %251, label %315

251:                                              ; preds = %247
  %252 = and i64 %14, 4294967295
  %253 = add nsw i64 %252, -1
  %254 = and i64 %14, 3
  %255 = icmp ult i64 %253, 3
  br i1 %255, label %296, label %256

256:                                              ; preds = %251
  %257 = sub nsw i64 %252, %254
  br label %258

258:                                              ; preds = %258, %256
  %259 = phi i64 [ 0, %256 ], [ %293, %258 ]
  %260 = phi i32 [ %249, %256 ], [ %292, %258 ]
  %261 = phi i64 [ %257, %256 ], [ %294, %258 ]
  %262 = getelementptr inbounds i8, i8* %1, i64 %259
  %263 = load i8, i8* %262, align 1
  %264 = zext i8 %263 to i32
  %265 = add i32 %260, %264
  %266 = mul i32 %265, 1025
  %267 = lshr i32 %266, 6
  %268 = xor i32 %267, %266
  %269 = or i64 %259, 1
  %270 = getelementptr inbounds i8, i8* %1, i64 %269
  %271 = load i8, i8* %270, align 1
  %272 = zext i8 %271 to i32
  %273 = add i32 %268, %272
  %274 = mul i32 %273, 1025
  %275 = lshr i32 %274, 6
  %276 = xor i32 %275, %274
  %277 = or i64 %259, 2
  %278 = getelementptr inbounds i8, i8* %1, i64 %277
  %279 = load i8, i8* %278, align 1
  %280 = zext i8 %279 to i32
  %281 = add i32 %276, %280
  %282 = mul i32 %281, 1025
  %283 = lshr i32 %282, 6
  %284 = xor i32 %283, %282
  %285 = or i64 %259, 3
  %286 = getelementptr inbounds i8, i8* %1, i64 %285
  %287 = load i8, i8* %286, align 1
  %288 = zext i8 %287 to i32
  %289 = add i32 %284, %288
  %290 = mul i32 %289, 1025
  %291 = lshr i32 %290, 6
  %292 = xor i32 %291, %290
  %293 = add nuw nsw i64 %259, 4
  %294 = add i64 %261, -4
  %295 = icmp eq i64 %294, 0
  br i1 %295, label %296, label %258

296:                                              ; preds = %258, %251
  %297 = phi i32 [ undef, %251 ], [ %292, %258 ]
  %298 = phi i64 [ 0, %251 ], [ %293, %258 ]
  %299 = phi i32 [ %249, %251 ], [ %292, %258 ]
  %300 = icmp eq i64 %254, 0
  br i1 %300, label %315, label %301

301:                                              ; preds = %296, %301
  %302 = phi i64 [ %312, %301 ], [ %298, %296 ]
  %303 = phi i32 [ %311, %301 ], [ %299, %296 ]
  %304 = phi i64 [ %313, %301 ], [ %254, %296 ]
  %305 = getelementptr inbounds i8, i8* %1, i64 %302
  %306 = load i8, i8* %305, align 1
  %307 = zext i8 %306 to i32
  %308 = add i32 %303, %307
  %309 = mul i32 %308, 1025
  %310 = lshr i32 %309, 6
  %311 = xor i32 %310, %309
  %312 = add nuw nsw i64 %302, 1
  %313 = add i64 %304, -1
  %314 = icmp eq i64 %313, 0
  br i1 %314, label %315, label %301, !llvm.loop !12

315:                                              ; preds = %296, %301, %247
  %316 = phi i32 [ %249, %247 ], [ %297, %296 ], [ %311, %301 ]
  %317 = mul i32 %316, 1025
  %318 = add i32 %317, 59450
  %319 = lshr i32 %318, 6
  %320 = xor i32 %319, %318
  %321 = icmp sgt i32 %13, 0
  br i1 %321, label %322, label %386

322:                                              ; preds = %315
  %323 = and i64 %12, 4294967295
  %324 = add nsw i64 %323, -1
  %325 = and i64 %12, 3
  %326 = icmp ult i64 %324, 3
  br i1 %326, label %367, label %327

327:                                              ; preds = %322
  %328 = sub nsw i64 %323, %325
  br label %329

329:                                              ; preds = %329, %327
  %330 = phi i64 [ 0, %327 ], [ %364, %329 ]
  %331 = phi i32 [ %320, %327 ], [ %363, %329 ]
  %332 = phi i64 [ %328, %327 ], [ %365, %329 ]
  %333 = getelementptr inbounds i8, i8* %2, i64 %330
  %334 = load i8, i8* %333, align 1
  %335 = zext i8 %334 to i32
  %336 = add i32 %331, %335
  %337 = mul i32 %336, 1025
  %338 = lshr i32 %337, 6
  %339 = xor i32 %338, %337
  %340 = or i64 %330, 1
  %341 = getelementptr inbounds i8, i8* %2, i64 %340
  %342 = load i8, i8* %341, align 1
  %343 = zext i8 %342 to i32
  %344 = add i32 %339, %343
  %345 = mul i32 %344, 1025
  %346 = lshr i32 %345, 6
  %347 = xor i32 %346, %345
  %348 = or i64 %330, 2
  %349 = getelementptr inbounds i8, i8* %2, i64 %348
  %350 = load i8, i8* %349, align 1
  %351 = zext i8 %350 to i32
  %352 = add i32 %347, %351
  %353 = mul i32 %352, 1025
  %354 = lshr i32 %353, 6
  %355 = xor i32 %354, %353
  %356 = or i64 %330, 3
  %357 = getelementptr inbounds i8, i8* %2, i64 %356
  %358 = load i8, i8* %357, align 1
  %359 = zext i8 %358 to i32
  %360 = add i32 %355, %359
  %361 = mul i32 %360, 1025
  %362 = lshr i32 %361, 6
  %363 = xor i32 %362, %361
  %364 = add nuw nsw i64 %330, 4
  %365 = add i64 %332, -4
  %366 = icmp eq i64 %365, 0
  br i1 %366, label %367, label %329

367:                                              ; preds = %329, %322
  %368 = phi i32 [ undef, %322 ], [ %363, %329 ]
  %369 = phi i64 [ 0, %322 ], [ %364, %329 ]
  %370 = phi i32 [ %320, %322 ], [ %363, %329 ]
  %371 = icmp eq i64 %325, 0
  br i1 %371, label %386, label %372

372:                                              ; preds = %367, %372
  %373 = phi i64 [ %383, %372 ], [ %369, %367 ]
  %374 = phi i32 [ %382, %372 ], [ %370, %367 ]
  %375 = phi i64 [ %384, %372 ], [ %325, %367 ]
  %376 = getelementptr inbounds i8, i8* %2, i64 %373
  %377 = load i8, i8* %376, align 1
  %378 = zext i8 %377 to i32
  %379 = add i32 %374, %378
  %380 = mul i32 %379, 1025
  %381 = lshr i32 %380, 6
  %382 = xor i32 %381, %380
  %383 = add nuw nsw i64 %373, 1
  %384 = add i64 %375, -1
  %385 = icmp eq i64 %384, 0
  br i1 %385, label %386, label %372, !llvm.loop !13

386:                                              ; preds = %367, %372, %315
  %387 = phi i32 [ %320, %315 ], [ %368, %367 ], [ %382, %372 ]
  %388 = mul i32 %387, 9
  %389 = lshr i32 %388, 11
  %390 = xor i32 %389, %388
  %391 = mul i32 %390, 32769
  %392 = zext i32 %391 to i64
  br label %393

393:                                              ; preds = %241, %242, %386, %243
  %394 = phi i64 [ %246, %243 ], [ %392, %386 ], [ %170, %242 ], [ %170, %241 ]
  %395 = urem i64 %394, %239
  %396 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %233, i64 0, i32 1
  %397 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %396, align 8
  %398 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %397, i64 %395, i32 3
  %399 = load i32, i32* %398, align 4
  %400 = icmp eq i32 %399, 0
  br i1 %400, label %453, label %401

401:                                              ; preds = %393
  %402 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %397, i64 %395
  %403 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %402, i64 0, i32 0
  %404 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %403, align 8
  %405 = icmp eq %struct._xmlDictEntry* %404, null
  %406 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %397, i64 %395, i32 4
  %407 = load i64, i64* %406, align 8
  %408 = icmp eq i64 %407, %394
  br i1 %405, label %438, label %409

409:                                              ; preds = %401, %429
  %410 = phi %struct._xmlDictEntry* [ %433, %429 ], [ %404, %401 ]
  %411 = phi i1 [ %437, %429 ], [ %408, %401 ]
  %412 = phi %struct._xmlDictEntry** [ %432, %429 ], [ %403, %401 ]
  %413 = phi %struct._xmlDictEntry* [ %430, %429 ], [ %402, %401 ]
  %414 = phi i64 [ %431, %429 ], [ %230, %401 ]
  br i1 %411, label %415, label %429

415:                                              ; preds = %409
  %416 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %413, i64 0, i32 2
  %417 = load i32, i32* %416, align 8
  %418 = icmp eq i32 %417, %17
  br i1 %418, label %419, label %429

419:                                              ; preds = %415
  %420 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %413, i64 0, i32 1
  %421 = load i8*, i8** %420, align 8
  %422 = tail call i32 @xmlStrQEqual(i8* nonnull %1, i8* %2, i8* %421) #10
  %423 = icmp eq i32 %422, 0
  br i1 %423, label %424, label %426

424:                                              ; preds = %419
  %425 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %412, align 8
  br label %429

426:                                              ; preds = %419
  %427 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %413, i64 0, i32 1
  %428 = load i8*, i8** %427, align 8
  br label %575

429:                                              ; preds = %424, %415, %409
  %430 = phi %struct._xmlDictEntry* [ %425, %424 ], [ %410, %415 ], [ %410, %409 ]
  %431 = add i64 %414, 1
  %432 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %430, i64 0, i32 0
  %433 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %432, align 8
  %434 = icmp eq %struct._xmlDictEntry* %433, null
  %435 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %430, i64 0, i32 4
  %436 = load i64, i64* %435, align 8
  %437 = icmp eq i64 %436, %394
  br i1 %434, label %438, label %409

438:                                              ; preds = %429, %401
  %439 = phi i64 [ %230, %401 ], [ %431, %429 ]
  %440 = phi %struct._xmlDictEntry* [ %402, %401 ], [ %430, %429 ]
  %441 = phi i1 [ %408, %401 ], [ %437, %429 ]
  br i1 %441, label %442, label %453

442:                                              ; preds = %438
  %443 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %440, i64 0, i32 2
  %444 = load i32, i32* %443, align 8
  %445 = icmp eq i32 %444, %17
  br i1 %445, label %446, label %453

446:                                              ; preds = %442
  %447 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %440, i64 0, i32 1
  %448 = load i8*, i8** %447, align 8
  %449 = tail call i32 @xmlStrQEqual(i8* nonnull %1, i8* %2, i8* %448) #10
  %450 = icmp eq i32 %449, 0
  br i1 %450, label %453, label %451

451:                                              ; preds = %446
  %452 = load i8*, i8** %447, align 8
  br label %575

453:                                              ; preds = %438, %442, %446, %393
  %454 = phi i64 [ %230, %393 ], [ %439, %446 ], [ %439, %442 ], [ %439, %438 ]
  %455 = load i64, i64* %18, align 8
  %456 = urem i64 %170, %455
  br label %457

457:                                              ; preds = %229, %453
  %458 = phi i64 [ %456, %453 ], [ %171, %229 ]
  %459 = phi i64 [ %454, %453 ], [ %230, %229 ]
  %460 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 4
  %461 = load %struct._xmlDictStrings*, %struct._xmlDictStrings** %460, align 8
  %462 = icmp eq %struct._xmlDictStrings* %461, null
  %463 = add i64 %14, %12
  br i1 %462, label %497, label %464

464:                                              ; preds = %457
  %465 = add i64 %463, 1
  %466 = and i64 %465, 4294967295
  br label %467

467:                                              ; preds = %479, %464
  %468 = phi %struct._xmlDictStrings* [ %461, %464 ], [ %486, %479 ]
  %469 = phi i64 [ 0, %464 ], [ %484, %479 ]
  %470 = phi i64 [ 0, %464 ], [ %483, %479 ]
  %471 = getelementptr inbounds %struct._xmlDictStrings, %struct._xmlDictStrings* %468, i64 0, i32 2
  %472 = bitcast i8** %471 to i64*
  %473 = load i64, i64* %472, align 8
  %474 = getelementptr inbounds %struct._xmlDictStrings, %struct._xmlDictStrings* %468, i64 0, i32 1
  %475 = bitcast i8** %474 to i64*
  %476 = load i64, i64* %475, align 8
  %477 = sub i64 %473, %476
  %478 = icmp ugt i64 %477, %466
  br i1 %478, label %526, label %479

479:                                              ; preds = %467
  %480 = getelementptr inbounds %struct._xmlDictStrings, %struct._xmlDictStrings* %468, i64 0, i32 3
  %481 = load i64, i64* %480, align 8
  %482 = icmp ugt i64 %481, %470
  %483 = select i1 %482, i64 %481, i64 %470
  %484 = add i64 %481, %469
  %485 = getelementptr inbounds %struct._xmlDictStrings, %struct._xmlDictStrings* %468, i64 0, i32 0
  %486 = load %struct._xmlDictStrings*, %struct._xmlDictStrings** %485, align 8
  %487 = icmp eq %struct._xmlDictStrings* %486, null
  br i1 %487, label %488, label %467

488:                                              ; preds = %479
  %489 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 7
  %490 = load i64, i64* %489, align 8
  %491 = icmp ne i64 %490, 0
  %492 = icmp ugt i64 %484, %490
  %493 = and i1 %491, %492
  br i1 %493, label %575, label %494

494:                                              ; preds = %488
  %495 = icmp eq i64 %483, 0
  %496 = shl i64 %483, 2
  br i1 %495, label %497, label %498

497:                                              ; preds = %457, %494
  br label %498

498:                                              ; preds = %497, %494
  %499 = phi i64 [ 1000, %497 ], [ %496, %494 ]
  %500 = shl i64 %463, 2
  %501 = add i64 %500, 4
  %502 = and i64 %501, 4294967292
  %503 = icmp ult i64 %499, %502
  %504 = select i1 %503, i64 %502, i64 %499
  %505 = load i8* (i64)*, i8* (i64)** @xmlMalloc, align 8
  %506 = add i64 %504, 48
  %507 = tail call i8* %505(i64 %506) #10
  %508 = icmp eq i8* %507, null
  br i1 %508, label %575, label %509

509:                                              ; preds = %498
  %510 = bitcast i8* %507 to %struct._xmlDictStrings*
  %511 = getelementptr inbounds i8, i8* %507, i64 24
  %512 = bitcast i8* %511 to i64*
  store i64 %504, i64* %512, align 8
  %513 = getelementptr inbounds i8, i8* %507, i64 32
  %514 = bitcast i8* %513 to i64*
  store i64 0, i64* %514, align 8
  %515 = getelementptr inbounds i8, i8* %507, i64 40
  %516 = getelementptr inbounds i8, i8* %507, i64 8
  %517 = bitcast i8* %516 to i8**
  store i8* %515, i8** %517, align 8
  %518 = getelementptr inbounds i8, i8* %515, i64 %504
  %519 = getelementptr inbounds i8, i8* %507, i64 16
  %520 = bitcast i8* %519 to i8**
  store i8* %518, i8** %520, align 8
  %521 = bitcast %struct._xmlDictStrings** %460 to i64*
  %522 = load i64, i64* %521, align 8
  %523 = bitcast i8* %507 to i64*
  store i64 %522, i64* %523, align 8
  %524 = bitcast %struct._xmlDictStrings** %460 to i8**
  store i8* %507, i8** %524, align 8
  %525 = load i8*, i8** %517, align 8
  br label %528

526:                                              ; preds = %467
  %527 = inttoptr i64 %476 to i8*
  br label %528

528:                                              ; preds = %509, %526
  %529 = phi i8* [ %525, %509 ], [ %527, %526 ]
  %530 = phi %struct._xmlDictStrings* [ %510, %509 ], [ %468, %526 ]
  %531 = getelementptr inbounds %struct._xmlDictStrings, %struct._xmlDictStrings* %530, i64 0, i32 1
  %532 = and i64 %14, 4294967295
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %529, i8* nonnull align 1 %1, i64 %532, i1 false) #10
  %533 = load i8*, i8** %531, align 8
  %534 = getelementptr inbounds i8, i8* %533, i64 %532
  %535 = getelementptr inbounds i8, i8* %534, i64 1
  store i8* %535, i8** %531, align 8
  store i8 58, i8* %534, align 1
  %536 = load i8*, i8** %531, align 8
  %537 = and i64 %12, 4294967295
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %536, i8* align 1 %2, i64 %537, i1 false) #10
  %538 = load i8*, i8** %531, align 8
  %539 = getelementptr inbounds i8, i8* %538, i64 %537
  %540 = getelementptr inbounds i8, i8* %539, i64 1
  store i8* %540, i8** %531, align 8
  store i8 0, i8* %539, align 1
  %541 = getelementptr inbounds %struct._xmlDictStrings, %struct._xmlDictStrings* %530, i64 0, i32 4
  %542 = load i64, i64* %541, align 8
  %543 = add i64 %542, 1
  store i64 %543, i64* %541, align 8
  %544 = icmp eq i8* %529, null
  br i1 %544, label %575, label %545

545:                                              ; preds = %528
  %546 = icmp eq %struct._xmlDictEntry* %231, null
  br i1 %546, label %547, label %550

547:                                              ; preds = %545
  %548 = load %struct._xmlDictEntry*, %struct._xmlDictEntry** %172, align 8
  %549 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %548, i64 %458
  br label %555

550:                                              ; preds = %545
  %551 = load i8* (i64)*, i8* (i64)** @xmlMalloc, align 8
  %552 = tail call i8* %551(i64 32) #10
  %553 = bitcast i8* %552 to %struct._xmlDictEntry*
  %554 = icmp eq i8* %552, null
  br i1 %554, label %575, label %555

555:                                              ; preds = %550, %547
  %556 = phi %struct._xmlDictEntry* [ %549, %547 ], [ %553, %550 ]
  %557 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %556, i64 0, i32 1
  store i8* %529, i8** %557, align 8
  %558 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %556, i64 0, i32 2
  store i32 %17, i32* %558, align 8
  %559 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %556, i64 0, i32 0
  store %struct._xmlDictEntry* null, %struct._xmlDictEntry** %559, align 8
  %560 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %556, i64 0, i32 3
  store i32 1, i32* %560, align 4
  %561 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %556, i64 0, i32 4
  store i64 %170, i64* %561, align 8
  br i1 %546, label %564, label %562

562:                                              ; preds = %555
  %563 = getelementptr inbounds %struct._xmlDictEntry, %struct._xmlDictEntry* %231, i64 0, i32 0
  store %struct._xmlDictEntry* %556, %struct._xmlDictEntry** %563, align 8
  br label %564

564:                                              ; preds = %555, %562
  %565 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 3
  %566 = load i32, i32* %565, align 8
  %567 = add i32 %566, 1
  store i32 %567, i32* %565, align 8
  %568 = icmp ugt i64 %459, 3
  br i1 %568, label %569, label %575

569:                                              ; preds = %564
  %570 = load i64, i64* %18, align 8
  %571 = icmp ult i64 %570, 2731
  br i1 %571, label %572, label %575

572:                                              ; preds = %569
  %573 = mul i64 %570, 6
  %574 = tail call fastcc i32 @xmlDictGrow(%struct._xmlDict* %0, i64 %573)
  br label %575

575:                                              ; preds = %498, %488, %451, %426, %564, %569, %572, %550, %528, %3, %227, %202, %9
  %576 = phi i8* [ %10, %9 ], [ %204, %202 ], [ %228, %227 ], [ null, %3 ], [ null, %528 ], [ null, %550 ], [ %529, %572 ], [ %529, %569 ], [ %529, %564 ], [ %452, %451 ], [ %428, %426 ], [ null, %488 ], [ null, %498 ]
  ret i8* %576
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal fastcc i64 @xmlDictComputeFastQKey(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32) unnamed_addr #7 {
  %6 = sext i32 %4 to i64
  %7 = icmp eq i32 %1, 0
  br i1 %7, label %8, label %10

8:                                                ; preds = %5
  %9 = add nsw i64 %6, 1740
  br label %15

10:                                               ; preds = %5
  %11 = load i8, i8* %0, align 1
  %12 = zext i8 %11 to i64
  %13 = mul nuw nsw i64 %12, 30
  %14 = add nsw i64 %13, %6
  br label %15

15:                                               ; preds = %10, %8
  %16 = phi i64 [ %9, %8 ], [ %14, %10 ]
  %17 = icmp sgt i32 %3, 10
  br i1 %17, label %18, label %30

18:                                               ; preds = %15
  %19 = sub i32 -2, %1
  %20 = add i32 %19, %3
  %21 = icmp slt i32 %20, 0
  %22 = add nsw i32 %3, -11
  %23 = select i1 %21, i32 %22, i32 %20
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %2, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i64
  %28 = add nsw i64 %16, %27
  %29 = icmp sgt i32 %1, 10
  br i1 %29, label %33, label %30

30:                                               ; preds = %18, %15
  %31 = phi i32 [ %3, %15 ], [ 10, %18 ]
  %32 = phi i64 [ %16, %15 ], [ %28, %18 ]
  switch i32 %1, label %111 [
    i32 10, label %33
    i32 9, label %40
    i32 8, label %48
    i32 7, label %56
    i32 6, label %64
    i32 5, label %72
    i32 4, label %80
    i32 3, label %88
    i32 2, label %96
    i32 1, label %104
  ]

33:                                               ; preds = %18, %30
  %34 = phi i64 [ %32, %30 ], [ %28, %18 ]
  %35 = phi i32 [ %31, %30 ], [ 10, %18 ]
  %36 = getelementptr inbounds i8, i8* %0, i64 9
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i64
  %39 = add nsw i64 %34, %38
  br label %40

40:                                               ; preds = %30, %33
  %41 = phi i32 [ %1, %30 ], [ 10, %33 ]
  %42 = phi i32 [ %31, %30 ], [ %35, %33 ]
  %43 = phi i64 [ %32, %30 ], [ %39, %33 ]
  %44 = getelementptr inbounds i8, i8* %0, i64 8
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i64
  %47 = add nsw i64 %43, %46
  br label %48

48:                                               ; preds = %30, %40
  %49 = phi i32 [ %1, %30 ], [ %41, %40 ]
  %50 = phi i32 [ %31, %30 ], [ %42, %40 ]
  %51 = phi i64 [ %32, %30 ], [ %47, %40 ]
  %52 = getelementptr inbounds i8, i8* %0, i64 7
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i64
  %55 = add nsw i64 %51, %54
  br label %56

56:                                               ; preds = %30, %48
  %57 = phi i32 [ %1, %30 ], [ %49, %48 ]
  %58 = phi i32 [ %31, %30 ], [ %50, %48 ]
  %59 = phi i64 [ %32, %30 ], [ %55, %48 ]
  %60 = getelementptr inbounds i8, i8* %0, i64 6
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i64
  %63 = add nsw i64 %59, %62
  br label %64

64:                                               ; preds = %30, %56
  %65 = phi i32 [ %1, %30 ], [ %57, %56 ]
  %66 = phi i32 [ %31, %30 ], [ %58, %56 ]
  %67 = phi i64 [ %32, %30 ], [ %63, %56 ]
  %68 = getelementptr inbounds i8, i8* %0, i64 5
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = add nsw i64 %67, %70
  br label %72

72:                                               ; preds = %30, %64
  %73 = phi i32 [ %1, %30 ], [ %65, %64 ]
  %74 = phi i32 [ %31, %30 ], [ %66, %64 ]
  %75 = phi i64 [ %32, %30 ], [ %71, %64 ]
  %76 = getelementptr inbounds i8, i8* %0, i64 4
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i64
  %79 = add nsw i64 %75, %78
  br label %80

80:                                               ; preds = %30, %72
  %81 = phi i32 [ %1, %30 ], [ %73, %72 ]
  %82 = phi i32 [ %31, %30 ], [ %74, %72 ]
  %83 = phi i64 [ %32, %30 ], [ %79, %72 ]
  %84 = getelementptr inbounds i8, i8* %0, i64 3
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i64
  %87 = add nsw i64 %83, %86
  br label %88

88:                                               ; preds = %30, %80
  %89 = phi i32 [ %1, %30 ], [ %81, %80 ]
  %90 = phi i32 [ %31, %30 ], [ %82, %80 ]
  %91 = phi i64 [ %32, %30 ], [ %87, %80 ]
  %92 = getelementptr inbounds i8, i8* %0, i64 2
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i64
  %95 = add nsw i64 %91, %94
  br label %96

96:                                               ; preds = %30, %88
  %97 = phi i32 [ %1, %30 ], [ %89, %88 ]
  %98 = phi i32 [ %31, %30 ], [ %90, %88 ]
  %99 = phi i64 [ %32, %30 ], [ %95, %88 ]
  %100 = getelementptr inbounds i8, i8* %0, i64 1
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i64
  %103 = add nsw i64 %99, %102
  br label %104

104:                                              ; preds = %30, %96
  %105 = phi i32 [ %1, %30 ], [ %97, %96 ]
  %106 = phi i32 [ %31, %30 ], [ %98, %96 ]
  %107 = phi i64 [ %32, %30 ], [ %103, %96 ]
  %108 = load i8, i8* %0, align 1
  %109 = zext i8 %108 to i64
  %110 = add nsw i64 %107, %109
  br label %111

111:                                              ; preds = %104, %30
  %112 = phi i32 [ %1, %30 ], [ %105, %104 ]
  %113 = phi i32 [ %31, %30 ], [ %106, %104 ]
  %114 = phi i64 [ %32, %30 ], [ %110, %104 ]
  %115 = sub nsw i32 %113, %112
  %116 = icmp sgt i32 %115, 0
  %117 = add nsw i64 %114, 58
  %118 = zext i1 %116 to i32
  %119 = sub i32 %115, %118
  %120 = select i1 %116, i64 %117, i64 %114
  switch i32 %119, label %179 [
    i32 10, label %121
    i32 9, label %126
    i32 8, label %132
    i32 7, label %138
    i32 6, label %144
    i32 5, label %150
    i32 4, label %156
    i32 3, label %162
    i32 2, label %168
    i32 1, label %174
  ]

121:                                              ; preds = %111
  %122 = getelementptr inbounds i8, i8* %2, i64 9
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i64
  %125 = add nsw i64 %120, %124
  br label %126

126:                                              ; preds = %111, %121
  %127 = phi i64 [ %120, %111 ], [ %125, %121 ]
  %128 = getelementptr inbounds i8, i8* %2, i64 8
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i64
  %131 = add nsw i64 %127, %130
  br label %132

132:                                              ; preds = %111, %126
  %133 = phi i64 [ %120, %111 ], [ %131, %126 ]
  %134 = getelementptr inbounds i8, i8* %2, i64 7
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i64
  %137 = add nsw i64 %133, %136
  br label %138

138:                                              ; preds = %111, %132
  %139 = phi i64 [ %120, %111 ], [ %137, %132 ]
  %140 = getelementptr inbounds i8, i8* %2, i64 6
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i64
  %143 = add nsw i64 %139, %142
  br label %144

144:                                              ; preds = %111, %138
  %145 = phi i64 [ %120, %111 ], [ %143, %138 ]
  %146 = getelementptr inbounds i8, i8* %2, i64 5
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i64
  %149 = add nsw i64 %145, %148
  br label %150

150:                                              ; preds = %111, %144
  %151 = phi i64 [ %120, %111 ], [ %149, %144 ]
  %152 = getelementptr inbounds i8, i8* %2, i64 4
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i64
  %155 = add nsw i64 %151, %154
  br label %156

156:                                              ; preds = %111, %150
  %157 = phi i64 [ %120, %111 ], [ %155, %150 ]
  %158 = getelementptr inbounds i8, i8* %2, i64 3
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i64
  %161 = add nsw i64 %157, %160
  br label %162

162:                                              ; preds = %111, %156
  %163 = phi i64 [ %120, %111 ], [ %161, %156 ]
  %164 = getelementptr inbounds i8, i8* %2, i64 2
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i64
  %167 = add nsw i64 %163, %166
  br label %168

168:                                              ; preds = %111, %162
  %169 = phi i64 [ %120, %111 ], [ %167, %162 ]
  %170 = getelementptr inbounds i8, i8* %2, i64 1
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i64
  %173 = add nsw i64 %169, %172
  br label %174

174:                                              ; preds = %111, %168
  %175 = phi i64 [ %120, %111 ], [ %173, %168 ]
  %176 = load i8, i8* %2, align 1
  %177 = zext i8 %176 to i64
  %178 = add nsw i64 %175, %177
  br label %179

179:                                              ; preds = %174, %111
  %180 = phi i64 [ %120, %111 ], [ %178, %174 ]
  ret i64 %180
}

declare i32 @xmlStrQEqual(i8*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @xmlDictOwns(%struct._xmlDict* readonly, i8* readnone) local_unnamed_addr #6 {
  %3 = icmp eq i8* %1, null
  br label %4

4:                                                ; preds = %24, %2
  %5 = phi %struct._xmlDict* [ %0, %2 ], [ %26, %24 ]
  %6 = icmp eq %struct._xmlDict* %5, null
  %7 = or i1 %3, %6
  br i1 %7, label %28, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %5, i64 0, i32 4
  %10 = load %struct._xmlDictStrings*, %struct._xmlDictStrings** %9, align 8
  %11 = icmp eq %struct._xmlDictStrings* %10, null
  br i1 %11, label %24, label %12

12:                                               ; preds = %8, %20
  %13 = phi %struct._xmlDictStrings* [ %22, %20 ], [ %10, %8 ]
  %14 = getelementptr inbounds %struct._xmlDictStrings, %struct._xmlDictStrings* %13, i64 0, i32 5, i64 0
  %15 = icmp ugt i8* %14, %1
  br i1 %15, label %20, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct._xmlDictStrings, %struct._xmlDictStrings* %13, i64 0, i32 1
  %18 = load i8*, i8** %17, align 8
  %19 = icmp ult i8* %18, %1
  br i1 %19, label %20, label %28

20:                                               ; preds = %16, %12
  %21 = getelementptr inbounds %struct._xmlDictStrings, %struct._xmlDictStrings* %13, i64 0, i32 0
  %22 = load %struct._xmlDictStrings*, %struct._xmlDictStrings** %21, align 8
  %23 = icmp eq %struct._xmlDictStrings* %22, null
  br i1 %23, label %24, label %12

24:                                               ; preds = %20, %8
  %25 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %5, i64 0, i32 5
  %26 = load %struct._xmlDict*, %struct._xmlDict** %25, align 8
  %27 = icmp eq %struct._xmlDict* %26, null
  br i1 %27, label %28, label %4

28:                                               ; preds = %24, %4, %16
  %29 = phi i32 [ 1, %16 ], [ 0, %24 ], [ -1, %4 ]
  ret i32 %29
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @xmlDictSize(%struct._xmlDict* readonly) local_unnamed_addr #7 {
  %2 = icmp eq %struct._xmlDict* %0, null
  br i1 %2, label %13, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 5
  %5 = load %struct._xmlDict*, %struct._xmlDict** %4, align 8
  %6 = icmp eq %struct._xmlDict* %5, null
  %7 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  br i1 %6, label %13, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %5, i64 0, i32 3
  %11 = load i32, i32* %10, align 8
  %12 = add i32 %11, %8
  br label %13

13:                                               ; preds = %3, %1, %9
  %14 = phi i32 [ %12, %9 ], [ -1, %1 ], [ %8, %3 ]
  ret i32 %14
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @xmlDictSetLimit(%struct._xmlDict*, i64) local_unnamed_addr #8 {
  %3 = icmp eq %struct._xmlDict* %0, null
  br i1 %3, label %7, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 7
  %6 = load i64, i64* %5, align 8
  store i64 %1, i64* %5, align 8
  br label %7

7:                                                ; preds = %2, %4
  %8 = phi i64 [ %6, %4 ], [ 0, %2 ]
  ret i64 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @xmlDictGetUsage(%struct._xmlDict* readonly) local_unnamed_addr #7 {
  %2 = icmp eq %struct._xmlDict* %0, null
  br i1 %2, label %16, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct._xmlDict, %struct._xmlDict* %0, i64 0, i32 4
  %5 = load %struct._xmlDictStrings*, %struct._xmlDictStrings** %4, align 8
  %6 = icmp eq %struct._xmlDictStrings* %5, null
  br i1 %6, label %16, label %7

7:                                                ; preds = %3, %7
  %8 = phi %struct._xmlDictStrings* [ %14, %7 ], [ %5, %3 ]
  %9 = phi i64 [ %12, %7 ], [ 0, %3 ]
  %10 = getelementptr inbounds %struct._xmlDictStrings, %struct._xmlDictStrings* %8, i64 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = add i64 %11, %9
  %13 = getelementptr inbounds %struct._xmlDictStrings, %struct._xmlDictStrings* %8, i64 0, i32 0
  %14 = load %struct._xmlDictStrings*, %struct._xmlDictStrings** %13, align 8
  %15 = icmp eq %struct._xmlDictStrings* %14, null
  br i1 %15, label %16, label %7

16:                                               ; preds = %7, %3, %1
  %17 = phi i64 [ 0, %1 ], [ 0, %3 ], [ %12, %7 ]
  ret i64 %17
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #9

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind readonly }
attributes #10 = { nounwind }
attributes #11 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !3}
!13 = distinct !{!13, !3}
