; ModuleID = 'gen/third_party/blink/renderer/modules/sanitizer_api/sanitizer_config.cc'
source_filename = "gen/third_party/blink/renderer/modules/sanitizer_api/sanitizer_config.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::SanitizerConfig" = type { %"class.blink::IDLDictionaryBase", i8, i8, i8, i8, i8, i8, %"class.WTF::Vector", i8, %"class.WTF::Vector.0", %"class.WTF::Vector.0", %"class.WTF::Vector", %"class.WTF::Vector.0" }
%"class.blink::IDLDictionaryBase" = type { i32 (...)** }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { %"class.WTF::String", %"class.WTF::Vector.0" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::Vector.0" = type { %"class.WTF::VectorBuffer.1" }
%"class.WTF::VectorBuffer.1" = type { %"class.WTF::VectorBufferBase.2" }
%"class.WTF::VectorBufferBase.2" = type { %"class.WTF::String"*, i32, i32 }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr", i32, [4 x i8], %"class.std::__1::unique_ptr.137", %"class.std::__1::unique_ptr.137", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.148", %"class.std::__1::unique_ptr.154", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.166", %"class.std::__1::unique_ptr.172", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.179", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.6", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.22", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.45", %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.59", %"class.std::__1::unique_ptr.66", %"class.std::__1::unique_ptr.73", %"class.std::__1::unique_ptr.73", %"class.std::__1::unique_ptr.80", %"class.std::__1::unique_ptr.87", %"class.std::__1::unique_ptr.94", %"class.std::__1::unique_ptr.117", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.37" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.37" = type { %"struct.std::__1::__atomic_base.38" }
%"struct.std::__1::__atomic_base.38" = type { %"struct.std::__1::__atomic_base.39" }
%"struct.std::__1::__atomic_base.39" = type { %"struct.std::__1::__cxx_atomic_impl.40" }
%"struct.std::__1::__cxx_atomic_impl.40" = type { %"struct.std::__1::__cxx_atomic_base_impl.41" }
%"struct.std::__1::__cxx_atomic_base_impl.41" = type { i64 }
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"class.blink::Worklist.48"* }
%"class.blink::Worklist.48" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.37" }
%"class.std::__1::unique_ptr.52" = type { %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"class.blink::Worklist.55"* }
%"class.blink::Worklist.55" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.37" }
%"class.std::__1::unique_ptr.59" = type { %"class.std::__1::__compressed_pair.60" }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"class.blink::Worklist.62"* }
%"class.blink::Worklist.62" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.37" }
%"class.std::__1::unique_ptr.66" = type { %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { %"class.blink::Worklist.69"* }
%"class.blink::Worklist.69" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.37" }
%"class.std::__1::unique_ptr.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"class.blink::Worklist.76"* }
%"class.blink::Worklist.76" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.37" }
%"class.std::__1::unique_ptr.80" = type { %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"class.blink::Worklist.83"* }
%"class.blink::Worklist.83" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.37" }
%"class.std::__1::unique_ptr.87" = type { %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89" }
%"struct.std::__1::__compressed_pair_elem.89" = type { %"class.blink::Worklist.90"* }
%"class.blink::Worklist.90" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.37" }
%"class.std::__1::unique_ptr.94" = type { %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.97", %"class.std::__1::__compressed_pair.104", %"class.std::__1::__compressed_pair.109", %"class.std::__1::__compressed_pair.111", [4 x i8] }>
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99", %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.101" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { i64 }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.112" }
%"struct.std::__1::__compressed_pair_elem.112" = type { float }
%"class.std::__1::unique_ptr.117" = type { %"class.std::__1::__compressed_pair.118" }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.119" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.120", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.120" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.129" }
%"class.WTF::Vector.129" = type { %"class.WTF::VectorBuffer.130" }
%"class.WTF::VectorBuffer.130" = type { %"class.WTF::VectorBufferBase.131" }
%"class.WTF::VectorBufferBase.131" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.137" = type { %"class.std::__1::__compressed_pair.138" }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.145" }
%"class.WTF::VectorBuffer.145" = type { %"class.WTF::VectorBufferBase.146" }
%"class.WTF::VectorBufferBase.146" = type { %"struct.std::__1::pair.147"*, i32, i32 }
%"struct.std::__1::pair.147" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.148" = type { %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.154" = type { %"class.std::__1::__compressed_pair.155" }
%"class.std::__1::__compressed_pair.155" = type { %"struct.std::__1::__compressed_pair_elem.156" }
%"struct.std::__1::__compressed_pair_elem.156" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.160" }
%"class.std::__1::unique_ptr.160" = type { %"class.std::__1::__compressed_pair.161" }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"struct.std::__1::__compressed_pair_elem.162" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.48"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.55"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.62"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.69"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.76"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.183" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.183" = type { %"struct.std::__1::__compressed_pair_elem.184" }
%"struct.std::__1::__compressed_pair_elem.184" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.166" = type { %"class.std::__1::__compressed_pair.167" }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.178 }
%class.scoped_refptr.178 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.179" = type { %"struct.std::__1::__atomic_base.180" }
%"struct.std::__1::__atomic_base.180" = type { %"struct.std::__1::__cxx_atomic_impl.181" }
%"struct.std::__1::__cxx_atomic_impl.181" = type { %"struct.std::__1::__cxx_atomic_base_impl.182" }
%"struct.std::__1::__cxx_atomic_base_impl.182" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.v8::Value" = type { i8 }
%"class.v8::Object" = type { i8 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.189" }
%"class.std::__1::__compressed_pair.189" = type { %"struct.std::__1::__compressed_pair_elem.190" }
%"struct.std::__1::__compressed_pair_elem.190" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN3WTF6VectorINSt3__14pairINS_6StringENS0_IS3_Lj0ENS_18PartitionAllocatorEEEEELj0ES4_EaSERKS7_ = comdat any

$_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_ = comdat any

$_ZN3WTF6VectorINSt3__14pairINS_6StringENS0_IS3_Lj0ENS_18PartitionAllocatorEEEEELj0ES4_E16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINSt3__14pairINS_6StringENS_6VectorIS4_Lj0ES0_EEEEEEmm = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm = comdat any

@_ZTVN5blink15SanitizerConfigE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::SanitizerConfig"*)* @_ZN5blink15SanitizerConfigD2Ev to i8*), i8* bitcast (void (%"class.blink::SanitizerConfig"*)* @_ZN5blink15SanitizerConfigD0Ev to i8*), i8* bitcast (%"class.v8::Value"* (%"class.blink::SanitizerConfig"*, %"class.v8::Object"*, %"class.v8::Isolate"*)* @_ZNK5blink15SanitizerConfig8ToV8ImplEN2v85LocalINS1_6ObjectEEEPNS1_7IsolateE to i8*), i8* bitcast (void (%"class.blink::SanitizerConfig"*, %"class.blink::Visitor"*)* @_ZNK5blink15SanitizerConfig5TraceEPNS_7VisitorE to i8*)] }, align 8
@.str = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.1 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINSt3__14pairINS_6StringENS_6VectorIS3_Lj0ENS_18PartitionAllocatorEEEEEEEPKcv = private unnamed_addr constant [130 x i8] c"const char *WTF::GetStringWithTypeName() [T = std::__1::pair<WTF::String, WTF::Vector<WTF::String, 0, WTF::PartitionAllocator> >]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv = private unnamed_addr constant [59 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::String]\00", align 1

@_ZN5blink15SanitizerConfigC1Ev = hidden unnamed_addr alias void (%"class.blink::SanitizerConfig"*), void (%"class.blink::SanitizerConfig"*)* @_ZN5blink15SanitizerConfigC2Ev
@_ZN5blink15SanitizerConfigD1Ev = hidden unnamed_addr alias void (%"class.blink::SanitizerConfig"*), void (%"class.blink::SanitizerConfig"*)* @_ZN5blink15SanitizerConfigD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15SanitizerConfigC2Ev(%"class.blink::SanitizerConfig"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink15SanitizerConfigE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 7
  %5 = bitcast %"class.WTF::Vector"* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false) #6
  %6 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 9
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 6, i1 false)
  %7 = bitcast %"class.WTF::Vector.0"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 64, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15SanitizerConfigD2Ev(%"class.blink::SanitizerConfig"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink15SanitizerConfigE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 12
  %4 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %3, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::String"*, %"class.WTF::String"** %4, align 8
  %6 = icmp eq %"class.WTF::String"* %5, null
  br i1 %6, label %41, label %7, !prof !2

7:                                                ; preds = %1
  %8 = bitcast %"class.WTF::String"* %5 to i8*
  %9 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 12, i32 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %39, label %12, !prof !3

12:                                               ; preds = %7
  %13 = zext i32 %10 to i64
  %14 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 %13
  br label %15

15:                                               ; preds = %33, %12
  %16 = phi %"class.WTF::String"* [ %34, %33 ], [ %5, %12 ]
  %17 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %16, i64 0, i32 0, i32 0
  %18 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %19 = icmp eq %"class.WTF::StringImpl"* %18, null
  br i1 %19, label %33, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = and i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 0
  %26 = load i32, i32* %25, align 4
  br i1 %24, label %27, label %29

27:                                               ; preds = %20
  %28 = add i32 %26, -1
  store i32 %28, i32* %25, align 4
  br label %29

29:                                               ; preds = %27, %20
  %30 = phi i32 [ %28, %27 ], [ %26, %20 ]
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %29
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %18) #6
  br label %33

33:                                               ; preds = %32, %29, %15
  %34 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %16, i64 1
  %35 = icmp eq %"class.WTF::String"* %34, %14
  br i1 %35, label %36, label %15

36:                                               ; preds = %33
  store i32 0, i32* %9, align 4
  %37 = bitcast %"class.WTF::Vector.0"* %3 to i8**
  %38 = load i8*, i8** %37, align 8
  br label %39

39:                                               ; preds = %36, %7
  %40 = phi i8* [ %38, %36 ], [ %8, %7 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %40) #6
  store %"class.WTF::String"* null, %"class.WTF::String"** %4, align 8
  br label %41

41:                                               ; preds = %1, %39
  %42 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 11
  %43 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %42, i64 0, i32 0, i32 0, i32 0
  %44 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %43, align 8
  %45 = icmp eq %"struct.std::__1::pair"* %44, null
  br i1 %45, label %119, label %46, !prof !2

46:                                               ; preds = %41
  %47 = bitcast %"struct.std::__1::pair"* %44 to i8*
  %48 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 11, i32 0, i32 0, i32 2
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %117, label %51, !prof !3

51:                                               ; preds = %46
  %52 = zext i32 %49 to i64
  %53 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %44, i64 %52
  br label %54

54:                                               ; preds = %111, %51
  %55 = phi %"struct.std::__1::pair"* [ %112, %111 ], [ %44, %51 ]
  %56 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %55, i64 0, i32 1
  %57 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %56, i64 0, i32 0, i32 0, i32 0
  %58 = load %"class.WTF::String"*, %"class.WTF::String"** %57, align 8
  %59 = icmp eq %"class.WTF::String"* %58, null
  br i1 %59, label %94, label %60, !prof !2

60:                                               ; preds = %54
  %61 = bitcast %"class.WTF::String"* %58 to i8*
  %62 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %55, i64 0, i32 1, i32 0, i32 0, i32 2
  %63 = load i32, i32* %62, align 4
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %92, label %65, !prof !3

65:                                               ; preds = %60
  %66 = zext i32 %63 to i64
  %67 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %58, i64 %66
  br label %68

68:                                               ; preds = %86, %65
  %69 = phi %"class.WTF::String"* [ %87, %86 ], [ %58, %65 ]
  %70 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %69, i64 0, i32 0, i32 0
  %71 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %70, align 8
  %72 = icmp eq %"class.WTF::StringImpl"* %71, null
  br i1 %72, label %86, label %73

73:                                               ; preds = %68
  %74 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load atomic i32, i32* %74 monotonic, align 4
  %76 = and i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 0
  %79 = load i32, i32* %78, align 4
  br i1 %77, label %80, label %82

80:                                               ; preds = %73
  %81 = add i32 %79, -1
  store i32 %81, i32* %78, align 4
  br label %82

82:                                               ; preds = %80, %73
  %83 = phi i32 [ %81, %80 ], [ %79, %73 ]
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %86

85:                                               ; preds = %82
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %71) #6
  br label %86

86:                                               ; preds = %85, %82, %68
  %87 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %69, i64 1
  %88 = icmp eq %"class.WTF::String"* %87, %67
  br i1 %88, label %89, label %68

89:                                               ; preds = %86
  store i32 0, i32* %62, align 4
  %90 = bitcast %"class.WTF::Vector.0"* %56 to i8**
  %91 = load i8*, i8** %90, align 8
  br label %92

92:                                               ; preds = %89, %60
  %93 = phi i8* [ %91, %89 ], [ %61, %60 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %93) #6
  store %"class.WTF::String"* null, %"class.WTF::String"** %57, align 8
  br label %94

94:                                               ; preds = %92, %54
  %95 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %55, i64 0, i32 0, i32 0, i32 0
  %96 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %95, align 8
  %97 = icmp eq %"class.WTF::StringImpl"* %96, null
  br i1 %97, label %111, label %98

98:                                               ; preds = %94
  %99 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %96, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %100 = load atomic i32, i32* %99 monotonic, align 4
  %101 = and i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %96, i64 0, i32 0
  %104 = load i32, i32* %103, align 4
  br i1 %102, label %105, label %107

105:                                              ; preds = %98
  %106 = add i32 %104, -1
  store i32 %106, i32* %103, align 4
  br label %107

107:                                              ; preds = %105, %98
  %108 = phi i32 [ %106, %105 ], [ %104, %98 ]
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %111

110:                                              ; preds = %107
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %96) #6
  br label %111

111:                                              ; preds = %94, %107, %110
  %112 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %55, i64 1
  %113 = icmp eq %"struct.std::__1::pair"* %112, %53
  br i1 %113, label %114, label %54

114:                                              ; preds = %111
  store i32 0, i32* %48, align 4
  %115 = bitcast %"class.WTF::Vector"* %42 to i8**
  %116 = load i8*, i8** %115, align 8
  br label %117

117:                                              ; preds = %114, %46
  %118 = phi i8* [ %116, %114 ], [ %47, %46 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %118) #6
  store %"struct.std::__1::pair"* null, %"struct.std::__1::pair"** %43, align 8
  br label %119

119:                                              ; preds = %41, %117
  %120 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 10
  %121 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %120, i64 0, i32 0, i32 0, i32 0
  %122 = load %"class.WTF::String"*, %"class.WTF::String"** %121, align 8
  %123 = icmp eq %"class.WTF::String"* %122, null
  br i1 %123, label %158, label %124, !prof !2

124:                                              ; preds = %119
  %125 = bitcast %"class.WTF::String"* %122 to i8*
  %126 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 10, i32 0, i32 0, i32 2
  %127 = load i32, i32* %126, align 4
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %156, label %129, !prof !3

129:                                              ; preds = %124
  %130 = zext i32 %127 to i64
  %131 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %122, i64 %130
  br label %132

132:                                              ; preds = %150, %129
  %133 = phi %"class.WTF::String"* [ %151, %150 ], [ %122, %129 ]
  %134 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %133, i64 0, i32 0, i32 0
  %135 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %134, align 8
  %136 = icmp eq %"class.WTF::StringImpl"* %135, null
  br i1 %136, label %150, label %137

137:                                              ; preds = %132
  %138 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %135, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %139 = load atomic i32, i32* %138 monotonic, align 4
  %140 = and i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %135, i64 0, i32 0
  %143 = load i32, i32* %142, align 4
  br i1 %141, label %144, label %146

144:                                              ; preds = %137
  %145 = add i32 %143, -1
  store i32 %145, i32* %142, align 4
  br label %146

146:                                              ; preds = %144, %137
  %147 = phi i32 [ %145, %144 ], [ %143, %137 ]
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %149, label %150

149:                                              ; preds = %146
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %135) #6
  br label %150

150:                                              ; preds = %149, %146, %132
  %151 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %133, i64 1
  %152 = icmp eq %"class.WTF::String"* %151, %131
  br i1 %152, label %153, label %132

153:                                              ; preds = %150
  store i32 0, i32* %126, align 4
  %154 = bitcast %"class.WTF::Vector.0"* %120 to i8**
  %155 = load i8*, i8** %154, align 8
  br label %156

156:                                              ; preds = %153, %124
  %157 = phi i8* [ %155, %153 ], [ %125, %124 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %157) #6
  store %"class.WTF::String"* null, %"class.WTF::String"** %121, align 8
  br label %158

158:                                              ; preds = %119, %156
  %159 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 9
  %160 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %159, i64 0, i32 0, i32 0, i32 0
  %161 = load %"class.WTF::String"*, %"class.WTF::String"** %160, align 8
  %162 = icmp eq %"class.WTF::String"* %161, null
  br i1 %162, label %197, label %163, !prof !2

163:                                              ; preds = %158
  %164 = bitcast %"class.WTF::String"* %161 to i8*
  %165 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 9, i32 0, i32 0, i32 2
  %166 = load i32, i32* %165, align 4
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %195, label %168, !prof !3

168:                                              ; preds = %163
  %169 = zext i32 %166 to i64
  %170 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %161, i64 %169
  br label %171

171:                                              ; preds = %189, %168
  %172 = phi %"class.WTF::String"* [ %190, %189 ], [ %161, %168 ]
  %173 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %172, i64 0, i32 0, i32 0
  %174 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %173, align 8
  %175 = icmp eq %"class.WTF::StringImpl"* %174, null
  br i1 %175, label %189, label %176

176:                                              ; preds = %171
  %177 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %174, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %178 = load atomic i32, i32* %177 monotonic, align 4
  %179 = and i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %174, i64 0, i32 0
  %182 = load i32, i32* %181, align 4
  br i1 %180, label %183, label %185

183:                                              ; preds = %176
  %184 = add i32 %182, -1
  store i32 %184, i32* %181, align 4
  br label %185

185:                                              ; preds = %183, %176
  %186 = phi i32 [ %184, %183 ], [ %182, %176 ]
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %188, label %189

188:                                              ; preds = %185
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %174) #6
  br label %189

189:                                              ; preds = %188, %185, %171
  %190 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %172, i64 1
  %191 = icmp eq %"class.WTF::String"* %190, %170
  br i1 %191, label %192, label %171

192:                                              ; preds = %189
  store i32 0, i32* %165, align 4
  %193 = bitcast %"class.WTF::Vector.0"* %159 to i8**
  %194 = load i8*, i8** %193, align 8
  br label %195

195:                                              ; preds = %192, %163
  %196 = phi i8* [ %194, %192 ], [ %164, %163 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %196) #6
  store %"class.WTF::String"* null, %"class.WTF::String"** %160, align 8
  br label %197

197:                                              ; preds = %158, %195
  %198 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 7
  %199 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %198, i64 0, i32 0, i32 0, i32 0
  %200 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %199, align 8
  %201 = icmp eq %"struct.std::__1::pair"* %200, null
  br i1 %201, label %275, label %202, !prof !2

202:                                              ; preds = %197
  %203 = bitcast %"struct.std::__1::pair"* %200 to i8*
  %204 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 7, i32 0, i32 0, i32 2
  %205 = load i32, i32* %204, align 4
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %273, label %207, !prof !3

207:                                              ; preds = %202
  %208 = zext i32 %205 to i64
  %209 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %200, i64 %208
  br label %210

210:                                              ; preds = %267, %207
  %211 = phi %"struct.std::__1::pair"* [ %268, %267 ], [ %200, %207 ]
  %212 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %211, i64 0, i32 1
  %213 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %212, i64 0, i32 0, i32 0, i32 0
  %214 = load %"class.WTF::String"*, %"class.WTF::String"** %213, align 8
  %215 = icmp eq %"class.WTF::String"* %214, null
  br i1 %215, label %250, label %216, !prof !2

216:                                              ; preds = %210
  %217 = bitcast %"class.WTF::String"* %214 to i8*
  %218 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %211, i64 0, i32 1, i32 0, i32 0, i32 2
  %219 = load i32, i32* %218, align 4
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %248, label %221, !prof !3

221:                                              ; preds = %216
  %222 = zext i32 %219 to i64
  %223 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %214, i64 %222
  br label %224

224:                                              ; preds = %242, %221
  %225 = phi %"class.WTF::String"* [ %243, %242 ], [ %214, %221 ]
  %226 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %225, i64 0, i32 0, i32 0
  %227 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %226, align 8
  %228 = icmp eq %"class.WTF::StringImpl"* %227, null
  br i1 %228, label %242, label %229

229:                                              ; preds = %224
  %230 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %227, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %231 = load atomic i32, i32* %230 monotonic, align 4
  %232 = and i32 %231, 2
  %233 = icmp eq i32 %232, 0
  %234 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %227, i64 0, i32 0
  %235 = load i32, i32* %234, align 4
  br i1 %233, label %236, label %238

236:                                              ; preds = %229
  %237 = add i32 %235, -1
  store i32 %237, i32* %234, align 4
  br label %238

238:                                              ; preds = %236, %229
  %239 = phi i32 [ %237, %236 ], [ %235, %229 ]
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %241, label %242

241:                                              ; preds = %238
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %227) #6
  br label %242

242:                                              ; preds = %241, %238, %224
  %243 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %225, i64 1
  %244 = icmp eq %"class.WTF::String"* %243, %223
  br i1 %244, label %245, label %224

245:                                              ; preds = %242
  store i32 0, i32* %218, align 4
  %246 = bitcast %"class.WTF::Vector.0"* %212 to i8**
  %247 = load i8*, i8** %246, align 8
  br label %248

248:                                              ; preds = %245, %216
  %249 = phi i8* [ %247, %245 ], [ %217, %216 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %249) #6
  store %"class.WTF::String"* null, %"class.WTF::String"** %213, align 8
  br label %250

250:                                              ; preds = %248, %210
  %251 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %211, i64 0, i32 0, i32 0, i32 0
  %252 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %251, align 8
  %253 = icmp eq %"class.WTF::StringImpl"* %252, null
  br i1 %253, label %267, label %254

254:                                              ; preds = %250
  %255 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %252, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %256 = load atomic i32, i32* %255 monotonic, align 4
  %257 = and i32 %256, 2
  %258 = icmp eq i32 %257, 0
  %259 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %252, i64 0, i32 0
  %260 = load i32, i32* %259, align 4
  br i1 %258, label %261, label %263

261:                                              ; preds = %254
  %262 = add i32 %260, -1
  store i32 %262, i32* %259, align 4
  br label %263

263:                                              ; preds = %261, %254
  %264 = phi i32 [ %262, %261 ], [ %260, %254 ]
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %266, label %267

266:                                              ; preds = %263
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %252) #6
  br label %267

267:                                              ; preds = %250, %263, %266
  %268 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %211, i64 1
  %269 = icmp eq %"struct.std::__1::pair"* %268, %209
  br i1 %269, label %270, label %210

270:                                              ; preds = %267
  store i32 0, i32* %204, align 4
  %271 = bitcast %"class.WTF::Vector"* %198 to i8**
  %272 = load i8*, i8** %271, align 8
  br label %273

273:                                              ; preds = %270, %202
  %274 = phi i8* [ %272, %270 ], [ %203, %202 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %274) #6
  store %"struct.std::__1::pair"* null, %"struct.std::__1::pair"** %199, align 8
  br label %275

275:                                              ; preds = %197, %273
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15SanitizerConfigD0Ev(%"class.blink::SanitizerConfig"* nocapture) unnamed_addr #0 align 2 {
  tail call void @_ZN5blink15SanitizerConfigD2Ev(%"class.blink::SanitizerConfig"* %0) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15SanitizerConfig18setAllowAttributesERKN3WTF6VectorINSt3__14pairINS1_6StringENS2_IS5_Lj0ENS1_18PartitionAllocatorEEEEELj0ES6_EE(%"class.blink::SanitizerConfig"*, %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 7
  %4 = tail call dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorINSt3__14pairINS_6StringENS0_IS3_Lj0ENS_18PartitionAllocatorEEEEELj0ES4_EaSERKS7_(%"class.WTF::Vector"* %3, %"class.WTF::Vector"* dereferenceable(16) %1)
  %5 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 1
  store i8 1, i8* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorINSt3__14pairINS_6StringENS0_IS3_Lj0ENS_18PartitionAllocatorEEEEELj0ES4_EaSERKS7_(%"class.WTF::Vector"*, %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.WTF::Vector"* %1, %0
  br i1 %3, label %338, label %4, !prof !3

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %10, label %78

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %12 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %11, align 8
  %13 = zext i32 %6 to i64
  %14 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %12, i64 %13
  %15 = zext i32 %8 to i64
  %16 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %12, i64 %15
  br label %17

17:                                               ; preds = %74, %10
  %18 = phi %"struct.std::__1::pair"* [ %75, %74 ], [ %16, %10 ]
  %19 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %18, i64 0, i32 1
  %20 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %19, i64 0, i32 0, i32 0, i32 0
  %21 = load %"class.WTF::String"*, %"class.WTF::String"** %20, align 8
  %22 = icmp eq %"class.WTF::String"* %21, null
  br i1 %22, label %57, label %23, !prof !2

23:                                               ; preds = %17
  %24 = bitcast %"class.WTF::String"* %21 to i8*
  %25 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %18, i64 0, i32 1, i32 0, i32 0, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %55, label %28, !prof !3

28:                                               ; preds = %23
  %29 = zext i32 %26 to i64
  %30 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %21, i64 %29
  br label %31

31:                                               ; preds = %49, %28
  %32 = phi %"class.WTF::String"* [ %50, %49 ], [ %21, %28 ]
  %33 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 0, i32 0, i32 0
  %34 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %33, align 8
  %35 = icmp eq %"class.WTF::StringImpl"* %34, null
  br i1 %35, label %49, label %36

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load atomic i32, i32* %37 monotonic, align 4
  %39 = and i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 0, i32 0
  %42 = load i32, i32* %41, align 4
  br i1 %40, label %43, label %45

43:                                               ; preds = %36
  %44 = add i32 %42, -1
  store i32 %44, i32* %41, align 4
  br label %45

45:                                               ; preds = %43, %36
  %46 = phi i32 [ %44, %43 ], [ %42, %36 ]
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %45
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %34) #6
  br label %49

49:                                               ; preds = %48, %45, %31
  %50 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 1
  %51 = icmp eq %"class.WTF::String"* %50, %30
  br i1 %51, label %52, label %31

52:                                               ; preds = %49
  store i32 0, i32* %25, align 4
  %53 = bitcast %"class.WTF::Vector.0"* %19 to i8**
  %54 = load i8*, i8** %53, align 8
  br label %55

55:                                               ; preds = %52, %23
  %56 = phi i8* [ %54, %52 ], [ %24, %23 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %56) #6
  store %"class.WTF::String"* null, %"class.WTF::String"** %20, align 8
  br label %57

57:                                               ; preds = %55, %17
  %58 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %18, i64 0, i32 0, i32 0, i32 0
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %58, align 8
  %60 = icmp eq %"class.WTF::StringImpl"* %59, null
  br i1 %60, label %74, label %61

61:                                               ; preds = %57
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %63 = load atomic i32, i32* %62 monotonic, align 4
  %64 = and i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 0
  %67 = load i32, i32* %66, align 4
  br i1 %65, label %68, label %70

68:                                               ; preds = %61
  %69 = add i32 %67, -1
  store i32 %69, i32* %66, align 4
  br label %70

70:                                               ; preds = %68, %61
  %71 = phi i32 [ %69, %68 ], [ %67, %61 ]
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %74

73:                                               ; preds = %70
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %59) #6
  br label %74

74:                                               ; preds = %57, %70, %73
  %75 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %18, i64 1
  %76 = icmp eq %"struct.std::__1::pair"* %75, %14
  br i1 %76, label %77, label %17

77:                                               ; preds = %74
  store i32 %8, i32* %5, align 4
  br label %177

78:                                               ; preds = %4
  %79 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %80 = load i32, i32* %79, align 8
  %81 = icmp ugt i32 %8, %80
  br i1 %81, label %82, label %175

82:                                               ; preds = %78
  %83 = icmp eq i32 %80, 0
  br i1 %83, label %158, label %84

84:                                               ; preds = %82
  %85 = icmp eq i32 %6, 0
  br i1 %85, label %152, label %86

86:                                               ; preds = %84
  %87 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %88 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %87, align 8
  %89 = zext i32 %6 to i64
  %90 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %88, i64 %89
  br label %91

91:                                               ; preds = %148, %86
  %92 = phi %"struct.std::__1::pair"* [ %149, %148 ], [ %88, %86 ]
  %93 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %92, i64 0, i32 1
  %94 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %93, i64 0, i32 0, i32 0, i32 0
  %95 = load %"class.WTF::String"*, %"class.WTF::String"** %94, align 8
  %96 = icmp eq %"class.WTF::String"* %95, null
  br i1 %96, label %131, label %97, !prof !2

97:                                               ; preds = %91
  %98 = bitcast %"class.WTF::String"* %95 to i8*
  %99 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %92, i64 0, i32 1, i32 0, i32 0, i32 2
  %100 = load i32, i32* %99, align 4
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %129, label %102, !prof !3

102:                                              ; preds = %97
  %103 = zext i32 %100 to i64
  %104 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %95, i64 %103
  br label %105

105:                                              ; preds = %123, %102
  %106 = phi %"class.WTF::String"* [ %124, %123 ], [ %95, %102 ]
  %107 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %106, i64 0, i32 0, i32 0
  %108 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %107, align 8
  %109 = icmp eq %"class.WTF::StringImpl"* %108, null
  br i1 %109, label %123, label %110

110:                                              ; preds = %105
  %111 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %108, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %112 = load atomic i32, i32* %111 monotonic, align 4
  %113 = and i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %108, i64 0, i32 0
  %116 = load i32, i32* %115, align 4
  br i1 %114, label %117, label %119

117:                                              ; preds = %110
  %118 = add i32 %116, -1
  store i32 %118, i32* %115, align 4
  br label %119

119:                                              ; preds = %117, %110
  %120 = phi i32 [ %118, %117 ], [ %116, %110 ]
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %123

122:                                              ; preds = %119
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %108) #6
  br label %123

123:                                              ; preds = %122, %119, %105
  %124 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %106, i64 1
  %125 = icmp eq %"class.WTF::String"* %124, %104
  br i1 %125, label %126, label %105

126:                                              ; preds = %123
  store i32 0, i32* %99, align 4
  %127 = bitcast %"class.WTF::Vector.0"* %93 to i8**
  %128 = load i8*, i8** %127, align 8
  br label %129

129:                                              ; preds = %126, %97
  %130 = phi i8* [ %128, %126 ], [ %98, %97 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %130) #6
  store %"class.WTF::String"* null, %"class.WTF::String"** %94, align 8
  br label %131

131:                                              ; preds = %129, %91
  %132 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %92, i64 0, i32 0, i32 0, i32 0
  %133 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %132, align 8
  %134 = icmp eq %"class.WTF::StringImpl"* %133, null
  br i1 %134, label %148, label %135

135:                                              ; preds = %131
  %136 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %133, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %137 = load atomic i32, i32* %136 monotonic, align 4
  %138 = and i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %133, i64 0, i32 0
  %141 = load i32, i32* %140, align 4
  br i1 %139, label %142, label %144

142:                                              ; preds = %135
  %143 = add i32 %141, -1
  store i32 %143, i32* %140, align 4
  br label %144

144:                                              ; preds = %142, %135
  %145 = phi i32 [ %143, %142 ], [ %141, %135 ]
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %148

147:                                              ; preds = %144
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %133) #6
  br label %148

148:                                              ; preds = %131, %144, %147
  %149 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %92, i64 1
  %150 = icmp eq %"struct.std::__1::pair"* %149, %90
  br i1 %150, label %151, label %91

151:                                              ; preds = %148
  store i32 0, i32* %5, align 4
  br label %152

152:                                              ; preds = %151, %84
  %153 = bitcast %"class.WTF::Vector"* %0 to i8**
  %154 = load i8*, i8** %153, align 8
  %155 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %155 monotonic, align 8
  store i32 0, i32* %79, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %154) #6
  %156 = load i32, i32* %7, align 4
  %157 = load i32, i32* %79, align 8
  br label %158

158:                                              ; preds = %82, %152
  %159 = phi i32 [ 0, %82 ], [ %157, %152 ]
  %160 = phi i32 [ %8, %82 ], [ %156, %152 ]
  %161 = icmp ult i32 %159, %160
  br i1 %161, label %162, label %175, !prof !2

162:                                              ; preds = %158
  %163 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %164 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %163, align 8
  %165 = icmp eq %"struct.std::__1::pair"* %164, null
  br i1 %165, label %166, label %174

166:                                              ; preds = %162
  %167 = zext i32 %160 to i64
  %168 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINSt3__14pairINS_6StringENS_6VectorIS4_Lj0ES0_EEEEEEmm(i64 %167) #6
  %169 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %168, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINSt3__14pairINS_6StringENS_6VectorIS3_Lj0ENS_18PartitionAllocatorEEEEEEEPKcv, i64 0, i64 0)) #6
  %170 = ptrtoint i8* %169 to i64
  %171 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %170, i64* %171 monotonic, align 8
  %172 = udiv i64 %168, 24
  %173 = trunc i64 %172 to i32
  store i32 %173, i32* %79, align 8
  br label %175

174:                                              ; preds = %162
  tail call void @_ZN3WTF6VectorINSt3__14pairINS_6StringENS0_IS3_Lj0ENS_18PartitionAllocatorEEEEELj0ES4_E16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %160) #6
  br label %175

175:                                              ; preds = %78, %158, %166, %174
  %176 = load i32, i32* %5, align 4
  br label %177

177:                                              ; preds = %175, %77
  %178 = phi i32 [ %176, %175 ], [ %8, %77 ]
  %179 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 0
  %180 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %179, align 8
  %181 = zext i32 %178 to i64
  %182 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %180, i64 %181
  %183 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %184 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %183, align 8
  %185 = icmp eq i32 %178, 0
  br i1 %185, label %239, label %186

186:                                              ; preds = %177, %228
  %187 = phi %"struct.std::__1::pair"* [ %233, %228 ], [ %184, %177 ]
  %188 = phi %"struct.std::__1::pair"* [ %232, %228 ], [ %180, %177 ]
  %189 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %188, i64 0, i32 0, i32 0, i32 0
  %190 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %189, align 8
  %191 = icmp eq %"class.WTF::StringImpl"* %190, null
  br i1 %191, label %209, label %192

192:                                              ; preds = %186
  %193 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %190, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %194 = load atomic i32, i32* %193 monotonic, align 4
  %195 = and i32 %194, 2
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %197, label %209

197:                                              ; preds = %192
  %198 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %190, i64 0, i32 0
  %199 = load i32, i32* %198, align 4
  %200 = zext i32 %199 to i33
  %201 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %200, i33 1) #6
  %202 = extractvalue { i33, i1 } %201, 1
  %203 = extractvalue { i33, i1 } %201, 0
  %204 = icmp slt i33 %203, 0
  %205 = or i1 %202, %204
  br i1 %205, label %206, label %207, !prof !3

206:                                              ; preds = %197
  tail call void @llvm.trap() #6
  unreachable

207:                                              ; preds = %197
  %208 = trunc i33 %203 to i32
  store i32 %208, i32* %198, align 4
  br label %209

209:                                              ; preds = %207, %192, %186
  %210 = ptrtoint %"class.WTF::StringImpl"* %190 to i64
  %211 = bitcast %"struct.std::__1::pair"* %187 to i64*
  %212 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %187, i64 0, i32 0, i32 0, i32 0
  %213 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %212, align 8
  store i64 %210, i64* %211, align 8
  %214 = icmp eq %"class.WTF::StringImpl"* %213, null
  br i1 %214, label %228, label %215

215:                                              ; preds = %209
  %216 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %213, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %217 = load atomic i32, i32* %216 monotonic, align 4
  %218 = and i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %213, i64 0, i32 0
  %221 = load i32, i32* %220, align 4
  br i1 %219, label %222, label %224

222:                                              ; preds = %215
  %223 = add i32 %221, -1
  store i32 %223, i32* %220, align 4
  br label %224

224:                                              ; preds = %222, %215
  %225 = phi i32 [ %223, %222 ], [ %221, %215 ]
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %227, label %228

227:                                              ; preds = %224
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %213) #6
  br label %228

228:                                              ; preds = %227, %224, %209
  %229 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %188, i64 0, i32 1
  %230 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %187, i64 0, i32 1
  %231 = tail call dereferenceable(16) %"class.WTF::Vector.0"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_(%"class.WTF::Vector.0"* %230, %"class.WTF::Vector.0"* dereferenceable(16) %229) #6
  %232 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %188, i64 1
  %233 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %187, i64 1
  %234 = icmp eq %"struct.std::__1::pair"* %232, %182
  br i1 %234, label %235, label %186

235:                                              ; preds = %228
  %236 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %179, align 8
  %237 = load i32, i32* %5, align 4
  %238 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %183, align 8
  br label %239

239:                                              ; preds = %235, %177
  %240 = phi %"struct.std::__1::pair"* [ %238, %235 ], [ %184, %177 ]
  %241 = phi i32 [ %237, %235 ], [ 0, %177 ]
  %242 = phi %"struct.std::__1::pair"* [ %236, %235 ], [ %180, %177 ]
  %243 = zext i32 %241 to i64
  %244 = load i32, i32* %7, align 4
  %245 = zext i32 %244 to i64
  %246 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %242, i64 %245
  %247 = icmp eq i32 %241, %244
  br i1 %247, label %336, label %248

248:                                              ; preds = %239
  %249 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %240, i64 %243
  %250 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %242, i64 %243
  br label %251

251:                                              ; preds = %248, %330
  %252 = phi %"struct.std::__1::pair"* [ %331, %330 ], [ %249, %248 ]
  %253 = phi %"struct.std::__1::pair"* [ %332, %330 ], [ %250, %248 ]
  %254 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %253, i64 0, i32 0, i32 0, i32 0
  %255 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %254, align 8
  %256 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %252, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %255, %"class.WTF::StringImpl"** %256, align 8
  %257 = icmp eq %"class.WTF::StringImpl"* %255, null
  br i1 %257, label %275, label %258

258:                                              ; preds = %251
  %259 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %255, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %260 = load atomic i32, i32* %259 monotonic, align 4
  %261 = and i32 %260, 2
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %263, label %275

263:                                              ; preds = %258
  %264 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %255, i64 0, i32 0
  %265 = load i32, i32* %264, align 4
  %266 = zext i32 %265 to i33
  %267 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %266, i33 1) #6
  %268 = extractvalue { i33, i1 } %267, 1
  %269 = extractvalue { i33, i1 } %267, 0
  %270 = icmp slt i33 %269, 0
  %271 = or i1 %268, %270
  br i1 %271, label %272, label %273, !prof !3

272:                                              ; preds = %263
  tail call void @llvm.trap() #6
  unreachable

273:                                              ; preds = %263
  %274 = trunc i33 %269 to i32
  store i32 %274, i32* %264, align 4
  br label %275

275:                                              ; preds = %273, %258, %251
  %276 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %252, i64 0, i32 1
  %277 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %253, i64 0, i32 1, i32 0, i32 0, i32 1
  %278 = load i32, i32* %277, align 8
  %279 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %276, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %279, align 8
  %280 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %252, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 0, i32* %280, align 8
  %281 = icmp eq i32 %278, 0
  br i1 %281, label %291, label %282

282:                                              ; preds = %275
  %283 = zext i32 %278 to i64
  %284 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %283) #6
  %285 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %284, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #6
  %286 = ptrtoint i8* %285 to i64
  %287 = bitcast %"class.WTF::Vector.0"* %276 to i64*
  store atomic i64 %286, i64* %287 monotonic, align 8
  %288 = lshr i64 %284, 3
  %289 = trunc i64 %288 to i32
  store i32 %289, i32* %280, align 8
  %290 = bitcast i8* %285 to %"class.WTF::String"*
  br label %291

291:                                              ; preds = %282, %275
  %292 = phi %"class.WTF::String"* [ null, %275 ], [ %290, %282 ]
  %293 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %253, i64 0, i32 1, i32 0, i32 0, i32 2
  %294 = load i32, i32* %293, align 4
  %295 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %252, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 %294, i32* %295, align 4
  %296 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %253, i64 0, i32 1, i32 0, i32 0, i32 0
  %297 = load %"class.WTF::String"*, %"class.WTF::String"** %296, align 8
  %298 = load i32, i32* %293, align 4
  %299 = zext i32 %298 to i64
  %300 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %297, i64 %299
  %301 = icmp eq i32 %298, 0
  br i1 %301, label %330, label %302

302:                                              ; preds = %291, %326
  %303 = phi %"class.WTF::String"* [ %327, %326 ], [ %292, %291 ]
  %304 = phi %"class.WTF::String"* [ %328, %326 ], [ %297, %291 ]
  %305 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %304, i64 0, i32 0, i32 0
  %306 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %305, align 8
  %307 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %303, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %306, %"class.WTF::StringImpl"** %307, align 8
  %308 = icmp eq %"class.WTF::StringImpl"* %306, null
  br i1 %308, label %326, label %309

309:                                              ; preds = %302
  %310 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %306, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %311 = load atomic i32, i32* %310 monotonic, align 4
  %312 = and i32 %311, 2
  %313 = icmp eq i32 %312, 0
  br i1 %313, label %314, label %326

314:                                              ; preds = %309
  %315 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %306, i64 0, i32 0
  %316 = load i32, i32* %315, align 4
  %317 = zext i32 %316 to i33
  %318 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %317, i33 1) #6
  %319 = extractvalue { i33, i1 } %318, 1
  %320 = extractvalue { i33, i1 } %318, 0
  %321 = icmp slt i33 %320, 0
  %322 = or i1 %319, %321
  br i1 %322, label %323, label %324, !prof !3

323:                                              ; preds = %314
  tail call void @llvm.trap() #6
  unreachable

324:                                              ; preds = %314
  %325 = trunc i33 %320 to i32
  store i32 %325, i32* %315, align 4
  br label %326

326:                                              ; preds = %324, %309, %302
  %327 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %303, i64 1
  %328 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %304, i64 1
  %329 = icmp eq %"class.WTF::String"* %328, %300
  br i1 %329, label %330, label %302

330:                                              ; preds = %326, %291
  %331 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %252, i64 1
  %332 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %253, i64 1
  %333 = icmp eq %"struct.std::__1::pair"* %332, %246
  br i1 %333, label %334, label %251

334:                                              ; preds = %330
  %335 = load i32, i32* %7, align 4
  br label %336

336:                                              ; preds = %334, %239
  %337 = phi i32 [ %335, %334 ], [ %241, %239 ]
  store i32 %337, i32* %5, align 4
  br label %338

338:                                              ; preds = %2, %336
  ret %"class.WTF::Vector"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15SanitizerConfig16setAllowElementsERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::SanitizerConfig"*, %"class.WTF::Vector.0"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 9
  %4 = tail call dereferenceable(16) %"class.WTF::Vector.0"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_(%"class.WTF::Vector.0"* %3, %"class.WTF::Vector.0"* dereferenceable(16) %1)
  %5 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 3
  store i8 1, i8* %5, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.WTF::Vector.0"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_(%"class.WTF::Vector.0"*, %"class.WTF::Vector.0"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.WTF::Vector.0"* %1, %0
  br i1 %3, label %219, label %4, !prof !3

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %1, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %10, label %39

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.WTF::String"*, %"class.WTF::String"** %11, align 8
  %13 = zext i32 %6 to i64
  %14 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 %13
  %15 = zext i32 %8 to i64
  %16 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 %15
  br label %17

17:                                               ; preds = %35, %10
  %18 = phi %"class.WTF::String"* [ %36, %35 ], [ %16, %10 ]
  %19 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = icmp eq %"class.WTF::StringImpl"* %20, null
  br i1 %21, label %35, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load atomic i32, i32* %23 monotonic, align 4
  %25 = and i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  br i1 %26, label %29, label %31

29:                                               ; preds = %22
  %30 = add i32 %28, -1
  store i32 %30, i32* %27, align 4
  br label %31

31:                                               ; preds = %29, %22
  %32 = phi i32 [ %30, %29 ], [ %28, %22 ]
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %31
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %20) #6
  br label %35

35:                                               ; preds = %34, %31, %17
  %36 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 1
  %37 = icmp eq %"class.WTF::String"* %36, %14
  br i1 %37, label %38, label %17

38:                                               ; preds = %35
  store i32 %8, i32* %5, align 4
  br label %116

39:                                               ; preds = %4
  %40 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = icmp ugt i32 %8, %41
  br i1 %42, label %43, label %114

43:                                               ; preds = %39
  %44 = icmp eq i32 %41, 0
  br i1 %44, label %80, label %45

45:                                               ; preds = %43
  %46 = icmp eq i32 %6, 0
  br i1 %46, label %74, label %47

47:                                               ; preds = %45
  %48 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 0
  %49 = load %"class.WTF::String"*, %"class.WTF::String"** %48, align 8
  %50 = zext i32 %6 to i64
  %51 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %49, i64 %50
  br label %52

52:                                               ; preds = %70, %47
  %53 = phi %"class.WTF::String"* [ %71, %70 ], [ %49, %47 ]
  %54 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %53, i64 0, i32 0, i32 0
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %54, align 8
  %56 = icmp eq %"class.WTF::StringImpl"* %55, null
  br i1 %56, label %70, label %57

57:                                               ; preds = %52
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load atomic i32, i32* %58 monotonic, align 4
  %60 = and i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  br i1 %61, label %64, label %66

64:                                               ; preds = %57
  %65 = add i32 %63, -1
  store i32 %65, i32* %62, align 4
  br label %66

66:                                               ; preds = %64, %57
  %67 = phi i32 [ %65, %64 ], [ %63, %57 ]
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %55) #6
  br label %70

70:                                               ; preds = %69, %66, %52
  %71 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %53, i64 1
  %72 = icmp eq %"class.WTF::String"* %71, %51
  br i1 %72, label %73, label %52

73:                                               ; preds = %70
  store i32 0, i32* %5, align 4
  br label %74

74:                                               ; preds = %73, %45
  %75 = bitcast %"class.WTF::Vector.0"* %0 to i8**
  %76 = load i8*, i8** %75, align 8
  %77 = bitcast %"class.WTF::Vector.0"* %0 to i64*
  store atomic i64 0, i64* %77 monotonic, align 8
  store i32 0, i32* %40, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %76) #6
  %78 = load i32, i32* %7, align 4
  %79 = load i32, i32* %40, align 8
  br label %80

80:                                               ; preds = %43, %74
  %81 = phi i32 [ 0, %43 ], [ %79, %74 ]
  %82 = phi i32 [ %8, %43 ], [ %78, %74 ]
  %83 = icmp ult i32 %81, %82
  br i1 %83, label %84, label %114, !prof !2

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 0
  %86 = load %"class.WTF::String"*, %"class.WTF::String"** %85, align 8
  %87 = icmp eq %"class.WTF::String"* %86, null
  %88 = zext i32 %82 to i64
  %89 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %88) #6
  %90 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %89, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #6
  br i1 %87, label %91, label %96

91:                                               ; preds = %84
  %92 = ptrtoint i8* %90 to i64
  %93 = bitcast %"class.WTF::Vector.0"* %0 to i64*
  store atomic i64 %92, i64* %93 monotonic, align 8
  %94 = lshr i64 %89, 3
  %95 = trunc i64 %94 to i32
  store i32 %95, i32* %40, align 8
  br label %114

96:                                               ; preds = %84
  %97 = lshr i64 %89, 3
  %98 = ptrtoint i8* %90 to i64
  %99 = load %"class.WTF::String"*, %"class.WTF::String"** %85, align 8
  %100 = icmp ne i8* %90, null
  %101 = icmp ne %"class.WTF::String"* %99, null
  %102 = and i1 %100, %101
  %103 = bitcast %"class.WTF::String"* %99 to i8*
  br i1 %102, label %104, label %110, !prof !2

104:                                              ; preds = %96
  %105 = load i32, i32* %5, align 4
  %106 = zext i32 %105 to i64
  %107 = shl nuw nsw i64 %106, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %90, i8* nonnull align 8 %103, i64 %107, i1 false) #6
  %108 = bitcast %"class.WTF::Vector.0"* %0 to i8**
  %109 = load i8*, i8** %108, align 8
  br label %110

110:                                              ; preds = %104, %96
  %111 = phi i8* [ %109, %104 ], [ %103, %96 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %111) #6
  %112 = bitcast %"class.WTF::Vector.0"* %0 to i64*
  store atomic i64 %98, i64* %112 monotonic, align 8
  %113 = trunc i64 %97 to i32
  store i32 %113, i32* %40, align 8
  br label %114

114:                                              ; preds = %39, %80, %91, %110
  %115 = load i32, i32* %5, align 4
  br label %116

116:                                              ; preds = %114, %38
  %117 = phi i32 [ %115, %114 ], [ %8, %38 ]
  %118 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %1, i64 0, i32 0, i32 0, i32 0
  %119 = load %"class.WTF::String"*, %"class.WTF::String"** %118, align 8
  %120 = zext i32 %117 to i64
  %121 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %119, i64 %120
  %122 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 0
  %123 = load %"class.WTF::String"*, %"class.WTF::String"** %122, align 8
  %124 = icmp eq i32 %117, 0
  br i1 %124, label %175, label %125

125:                                              ; preds = %116, %167
  %126 = phi %"class.WTF::String"* [ %169, %167 ], [ %123, %116 ]
  %127 = phi %"class.WTF::String"* [ %168, %167 ], [ %119, %116 ]
  %128 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %127, i64 0, i32 0, i32 0
  %129 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %128, align 8
  %130 = icmp eq %"class.WTF::StringImpl"* %129, null
  br i1 %130, label %148, label %131

131:                                              ; preds = %125
  %132 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %133 = load atomic i32, i32* %132 monotonic, align 4
  %134 = and i32 %133, 2
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %148

136:                                              ; preds = %131
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 0
  %138 = load i32, i32* %137, align 4
  %139 = zext i32 %138 to i33
  %140 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %139, i33 1) #6
  %141 = extractvalue { i33, i1 } %140, 1
  %142 = extractvalue { i33, i1 } %140, 0
  %143 = icmp slt i33 %142, 0
  %144 = or i1 %141, %143
  br i1 %144, label %145, label %146, !prof !3

145:                                              ; preds = %136
  tail call void @llvm.trap() #6
  unreachable

146:                                              ; preds = %136
  %147 = trunc i33 %142 to i32
  store i32 %147, i32* %137, align 4
  br label %148

148:                                              ; preds = %146, %131, %125
  %149 = ptrtoint %"class.WTF::StringImpl"* %129 to i64
  %150 = bitcast %"class.WTF::String"* %126 to i64*
  %151 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %126, i64 0, i32 0, i32 0
  %152 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %151, align 8
  store i64 %149, i64* %150, align 8
  %153 = icmp eq %"class.WTF::StringImpl"* %152, null
  br i1 %153, label %167, label %154

154:                                              ; preds = %148
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %156 = load atomic i32, i32* %155 monotonic, align 4
  %157 = and i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 0
  %160 = load i32, i32* %159, align 4
  br i1 %158, label %161, label %163

161:                                              ; preds = %154
  %162 = add i32 %160, -1
  store i32 %162, i32* %159, align 4
  br label %163

163:                                              ; preds = %161, %154
  %164 = phi i32 [ %162, %161 ], [ %160, %154 ]
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %167

166:                                              ; preds = %163
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %152) #6
  br label %167

167:                                              ; preds = %166, %163, %148
  %168 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %127, i64 1
  %169 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %126, i64 1
  %170 = icmp eq %"class.WTF::String"* %168, %121
  br i1 %170, label %171, label %125

171:                                              ; preds = %167
  %172 = load %"class.WTF::String"*, %"class.WTF::String"** %118, align 8
  %173 = load i32, i32* %5, align 4
  %174 = load %"class.WTF::String"*, %"class.WTF::String"** %122, align 8
  br label %175

175:                                              ; preds = %171, %116
  %176 = phi %"class.WTF::String"* [ %174, %171 ], [ %123, %116 ]
  %177 = phi i32 [ %173, %171 ], [ 0, %116 ]
  %178 = phi %"class.WTF::String"* [ %172, %171 ], [ %119, %116 ]
  %179 = zext i32 %177 to i64
  %180 = load i32, i32* %7, align 4
  %181 = zext i32 %180 to i64
  %182 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %178, i64 %181
  %183 = icmp eq i32 %177, %180
  br i1 %183, label %217, label %184

184:                                              ; preds = %175
  %185 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %176, i64 %179
  %186 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %178, i64 %179
  br label %187

187:                                              ; preds = %184, %211
  %188 = phi %"class.WTF::String"* [ %212, %211 ], [ %185, %184 ]
  %189 = phi %"class.WTF::String"* [ %213, %211 ], [ %186, %184 ]
  %190 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %189, i64 0, i32 0, i32 0
  %191 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %190, align 8
  %192 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %188, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %191, %"class.WTF::StringImpl"** %192, align 8
  %193 = icmp eq %"class.WTF::StringImpl"* %191, null
  br i1 %193, label %211, label %194

194:                                              ; preds = %187
  %195 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %196 = load atomic i32, i32* %195 monotonic, align 4
  %197 = and i32 %196, 2
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %211

199:                                              ; preds = %194
  %200 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 0
  %201 = load i32, i32* %200, align 4
  %202 = zext i32 %201 to i33
  %203 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %202, i33 1) #6
  %204 = extractvalue { i33, i1 } %203, 1
  %205 = extractvalue { i33, i1 } %203, 0
  %206 = icmp slt i33 %205, 0
  %207 = or i1 %204, %206
  br i1 %207, label %208, label %209, !prof !3

208:                                              ; preds = %199
  tail call void @llvm.trap() #6
  unreachable

209:                                              ; preds = %199
  %210 = trunc i33 %205 to i32
  store i32 %210, i32* %200, align 4
  br label %211

211:                                              ; preds = %209, %194, %187
  %212 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %188, i64 1
  %213 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %189, i64 1
  %214 = icmp eq %"class.WTF::String"* %213, %182
  br i1 %214, label %215, label %187

215:                                              ; preds = %211
  %216 = load i32, i32* %7, align 4
  br label %217

217:                                              ; preds = %215, %175
  %218 = phi i32 [ %216, %215 ], [ %177, %175 ]
  store i32 %218, i32* %5, align 4
  br label %219

219:                                              ; preds = %2, %217
  ret %"class.WTF::Vector.0"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15SanitizerConfig16setBlockElementsERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::SanitizerConfig"*, %"class.WTF::Vector.0"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 10
  %4 = tail call dereferenceable(16) %"class.WTF::Vector.0"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_(%"class.WTF::Vector.0"* %3, %"class.WTF::Vector.0"* dereferenceable(16) %1)
  %5 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 4
  store i8 1, i8* %5, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15SanitizerConfig17setDropAttributesERKN3WTF6VectorINSt3__14pairINS1_6StringENS2_IS5_Lj0ENS1_18PartitionAllocatorEEEEELj0ES6_EE(%"class.blink::SanitizerConfig"*, %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 11
  %4 = tail call dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorINSt3__14pairINS_6StringENS0_IS3_Lj0ENS_18PartitionAllocatorEEEEELj0ES4_EaSERKS7_(%"class.WTF::Vector"* %3, %"class.WTF::Vector"* dereferenceable(16) %1)
  %5 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 5
  store i8 1, i8* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15SanitizerConfig15setDropElementsERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::SanitizerConfig"*, %"class.WTF::Vector.0"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 12
  %4 = tail call dereferenceable(16) %"class.WTF::Vector.0"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_(%"class.WTF::Vector.0"* %3, %"class.WTF::Vector.0"* dereferenceable(16) %1)
  %5 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 6
  store i8 1, i8* %5, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink15SanitizerConfig5TraceEPNS_7VisitorE(%"class.blink::SanitizerConfig"*, %"class.blink::Visitor"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 0
  tail call void @_ZNK5blink17IDLDictionaryBase5TraceEPNS_7VisitorE(%"class.blink::IDLDictionaryBase"* %3, %"class.blink::Visitor"* %1) #6
  ret void
}

declare void @_ZNK5blink17IDLDictionaryBase5TraceEPNS_7VisitorE(%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*) unnamed_addr #1

declare %"class.v8::Value"* @_ZNK5blink15SanitizerConfig8ToV8ImplEN2v85LocalINS1_6ObjectEEEPNS1_7IsolateE(%"class.blink::SanitizerConfig"*, %"class.v8::Object"*, %"class.v8::Isolate"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINSt3__14pairINS_6StringENS0_IS3_Lj0ENS_18PartitionAllocatorEEEEELj0ES4_E16ReallocateBufferEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %92

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %6, i64 %9
  %11 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %11 monotonic, align 8
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %12, align 8
  %13 = icmp eq i32 %8, 0
  br i1 %13, label %90, label %14

14:                                               ; preds = %4, %86
  %15 = phi %"struct.std::__1::pair"* [ %88, %86 ], [ %6, %4 ]
  %16 = phi %"struct.std::__1::pair"* [ %87, %86 ], [ null, %4 ]
  %17 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %15, i64 0, i32 0, i32 0, i32 0
  %18 = bitcast %"struct.std::__1::pair"* %15 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"struct.std::__1::pair"* %16 to i64*
  store i64 %19, i64* %20, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %17, align 8
  %21 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %16, i64 0, i32 1
  %22 = bitcast %"class.WTF::Vector.0"* %21 to i8*
  %23 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %15, i64 0, i32 1
  %24 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %16, i64 0, i32 1, i32 0, i32 0, i32 1
  %25 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %16, i64 0, i32 1, i32 0, i32 0, i32 2
  %26 = bitcast %"class.WTF::Vector.0"* %23 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 16, i1 false) #6
  %27 = load i64, i64* %26, align 8
  %28 = bitcast %"class.WTF::Vector.0"* %21 to i64*
  store atomic i64 0, i64* %26 monotonic, align 8
  store atomic i64 %27, i64* %28 monotonic, align 8
  %29 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %15, i64 0, i32 1, i32 0, i32 0, i32 1
  %30 = load i32, i32* %24, align 4
  %31 = load i32, i32* %29, align 4
  store i32 %31, i32* %24, align 4
  store i32 %30, i32* %29, align 4
  %32 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %15, i64 0, i32 1, i32 0, i32 0, i32 2
  %33 = load i32, i32* %25, align 4
  %34 = load i32, i32* %32, align 4
  store i32 %34, i32* %25, align 4
  store i32 %33, i32* %32, align 4
  %35 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %23, i64 0, i32 0, i32 0, i32 0
  %36 = load %"class.WTF::String"*, %"class.WTF::String"** %35, align 8
  %37 = icmp eq %"class.WTF::String"* %36, null
  br i1 %37, label %70, label %38, !prof !2

38:                                               ; preds = %14
  %39 = bitcast %"class.WTF::String"* %36 to i8*
  %40 = icmp eq i32 %33, 0
  br i1 %40, label %68, label %41, !prof !3

41:                                               ; preds = %38
  %42 = zext i32 %33 to i64
  %43 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %36, i64 %42
  br label %44

44:                                               ; preds = %62, %41
  %45 = phi %"class.WTF::String"* [ %63, %62 ], [ %36, %41 ]
  %46 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %45, i64 0, i32 0, i32 0
  %47 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %46, align 8
  %48 = icmp eq %"class.WTF::StringImpl"* %47, null
  br i1 %48, label %62, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %47, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = and i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %47, i64 0, i32 0
  %55 = load i32, i32* %54, align 4
  br i1 %53, label %56, label %58

56:                                               ; preds = %49
  %57 = add i32 %55, -1
  store i32 %57, i32* %54, align 4
  br label %58

58:                                               ; preds = %56, %49
  %59 = phi i32 [ %57, %56 ], [ %55, %49 ]
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %62

61:                                               ; preds = %58
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %47) #6
  br label %62

62:                                               ; preds = %61, %58, %44
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %45, i64 1
  %64 = icmp eq %"class.WTF::String"* %63, %43
  br i1 %64, label %65, label %44

65:                                               ; preds = %62
  store i32 0, i32* %32, align 4
  %66 = bitcast %"class.WTF::Vector.0"* %23 to i8**
  %67 = load i8*, i8** %66, align 8
  br label %68

68:                                               ; preds = %65, %38
  %69 = phi i8* [ %67, %65 ], [ %39, %38 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %69) #6
  store %"class.WTF::String"* null, %"class.WTF::String"** %35, align 8
  br label %70

70:                                               ; preds = %68, %14
  %71 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %72 = icmp eq %"class.WTF::StringImpl"* %71, null
  br i1 %72, label %86, label %73

73:                                               ; preds = %70
  %74 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load atomic i32, i32* %74 monotonic, align 4
  %76 = and i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 0
  %79 = load i32, i32* %78, align 4
  br i1 %77, label %80, label %82

80:                                               ; preds = %73
  %81 = add i32 %79, -1
  store i32 %81, i32* %78, align 4
  br label %82

82:                                               ; preds = %80, %73
  %83 = phi i32 [ %81, %80 ], [ %79, %73 ]
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %86

85:                                               ; preds = %82
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %71) #6
  br label %86

86:                                               ; preds = %70, %82, %85
  %87 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %16, i64 1
  %88 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %15, i64 1
  %89 = icmp eq %"struct.std::__1::pair"* %88, %10
  br i1 %89, label %90, label %14

90:                                               ; preds = %86, %4
  %91 = bitcast %"struct.std::__1::pair"* %6 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %91) #6
  br label %193

92:                                               ; preds = %2
  %93 = zext i32 %1 to i64
  %94 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINSt3__14pairINS_6StringENS_6VectorIS4_Lj0ES0_EEEEEEmm(i64 %93) #6
  %95 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %94, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINSt3__14pairINS_6StringENS_6VectorIS3_Lj0ENS_18PartitionAllocatorEEEEEEEPKcv, i64 0, i64 0)) #6
  %96 = udiv i64 %94, 24
  %97 = ptrtoint i8* %95 to i64
  %98 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %99 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %98, align 8
  %100 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %101 = load i32, i32* %100, align 4
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %99, i64 %102
  %104 = icmp eq i32 %101, 0
  br i1 %104, label %105, label %107

105:                                              ; preds = %92
  %106 = bitcast %"struct.std::__1::pair"* %99 to i8*
  br label %188

107:                                              ; preds = %92
  %108 = bitcast i8* %95 to %"struct.std::__1::pair"*
  br label %109

109:                                              ; preds = %107, %181
  %110 = phi %"struct.std::__1::pair"* [ %183, %181 ], [ %99, %107 ]
  %111 = phi %"struct.std::__1::pair"* [ %182, %181 ], [ %108, %107 ]
  %112 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %110, i64 0, i32 0, i32 0, i32 0
  %113 = bitcast %"struct.std::__1::pair"* %110 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"struct.std::__1::pair"* %111 to i64*
  store i64 %114, i64* %115, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %112, align 8
  %116 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %111, i64 0, i32 1
  %117 = bitcast %"class.WTF::Vector.0"* %116 to i8*
  %118 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %110, i64 0, i32 1
  %119 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %111, i64 0, i32 1, i32 0, i32 0, i32 1
  %120 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %111, i64 0, i32 1, i32 0, i32 0, i32 2
  %121 = bitcast %"class.WTF::Vector.0"* %118 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %117, i8 0, i64 16, i1 false) #6
  %122 = load i64, i64* %121, align 8
  %123 = bitcast %"class.WTF::Vector.0"* %116 to i64*
  store atomic i64 0, i64* %121 monotonic, align 8
  store atomic i64 %122, i64* %123 monotonic, align 8
  %124 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %110, i64 0, i32 1, i32 0, i32 0, i32 1
  %125 = load i32, i32* %119, align 4
  %126 = load i32, i32* %124, align 4
  store i32 %126, i32* %119, align 4
  store i32 %125, i32* %124, align 4
  %127 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %110, i64 0, i32 1, i32 0, i32 0, i32 2
  %128 = load i32, i32* %120, align 4
  %129 = load i32, i32* %127, align 4
  store i32 %129, i32* %120, align 4
  store i32 %128, i32* %127, align 4
  %130 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %118, i64 0, i32 0, i32 0, i32 0
  %131 = load %"class.WTF::String"*, %"class.WTF::String"** %130, align 8
  %132 = icmp eq %"class.WTF::String"* %131, null
  br i1 %132, label %165, label %133, !prof !2

133:                                              ; preds = %109
  %134 = bitcast %"class.WTF::String"* %131 to i8*
  %135 = icmp eq i32 %128, 0
  br i1 %135, label %163, label %136, !prof !3

136:                                              ; preds = %133
  %137 = zext i32 %128 to i64
  %138 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %131, i64 %137
  br label %139

139:                                              ; preds = %157, %136
  %140 = phi %"class.WTF::String"* [ %158, %157 ], [ %131, %136 ]
  %141 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %140, i64 0, i32 0, i32 0
  %142 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %141, align 8
  %143 = icmp eq %"class.WTF::StringImpl"* %142, null
  br i1 %143, label %157, label %144

144:                                              ; preds = %139
  %145 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %142, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %146 = load atomic i32, i32* %145 monotonic, align 4
  %147 = and i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %142, i64 0, i32 0
  %150 = load i32, i32* %149, align 4
  br i1 %148, label %151, label %153

151:                                              ; preds = %144
  %152 = add i32 %150, -1
  store i32 %152, i32* %149, align 4
  br label %153

153:                                              ; preds = %151, %144
  %154 = phi i32 [ %152, %151 ], [ %150, %144 ]
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %156, label %157

156:                                              ; preds = %153
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %142) #6
  br label %157

157:                                              ; preds = %156, %153, %139
  %158 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %140, i64 1
  %159 = icmp eq %"class.WTF::String"* %158, %138
  br i1 %159, label %160, label %139

160:                                              ; preds = %157
  store i32 0, i32* %127, align 4
  %161 = bitcast %"class.WTF::Vector.0"* %118 to i8**
  %162 = load i8*, i8** %161, align 8
  br label %163

163:                                              ; preds = %160, %133
  %164 = phi i8* [ %162, %160 ], [ %134, %133 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %164) #6
  store %"class.WTF::String"* null, %"class.WTF::String"** %130, align 8
  br label %165

165:                                              ; preds = %163, %109
  %166 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %112, align 8
  %167 = icmp eq %"class.WTF::StringImpl"* %166, null
  br i1 %167, label %181, label %168

168:                                              ; preds = %165
  %169 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %166, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %170 = load atomic i32, i32* %169 monotonic, align 4
  %171 = and i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %166, i64 0, i32 0
  %174 = load i32, i32* %173, align 4
  br i1 %172, label %175, label %177

175:                                              ; preds = %168
  %176 = add i32 %174, -1
  store i32 %176, i32* %173, align 4
  br label %177

177:                                              ; preds = %175, %168
  %178 = phi i32 [ %176, %175 ], [ %174, %168 ]
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %180, label %181

180:                                              ; preds = %177
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %166) #6
  br label %181

181:                                              ; preds = %165, %177, %180
  %182 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %111, i64 1
  %183 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %110, i64 1
  %184 = icmp eq %"struct.std::__1::pair"* %183, %103
  br i1 %184, label %185, label %109

185:                                              ; preds = %181
  %186 = bitcast %"class.WTF::Vector"* %0 to i8**
  %187 = load i8*, i8** %186, align 8
  br label %188

188:                                              ; preds = %105, %185
  %189 = phi i8* [ %187, %185 ], [ %106, %105 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %189) #6
  %190 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %97, i64* %190 monotonic, align 8
  %191 = trunc i64 %96 to i32
  %192 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %191, i32* %192, align 8
  br label %193

193:                                              ; preds = %188, %90
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINSt3__14pairINS_6StringENS_6VectorIS4_Lj0ES0_EEEEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #6
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 89391104
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #6
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 89391104) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i8* %11, i8* %12) #6
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.1, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #6
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #6
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #6
  %20 = mul i64 %0, 24
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #6
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #6
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #6
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i8* %11, i8* %12) #6
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.1, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #6
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #6
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #6
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #6
  ret i64 %21
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
