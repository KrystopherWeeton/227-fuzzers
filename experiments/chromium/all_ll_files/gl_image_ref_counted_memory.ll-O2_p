; ModuleID = '../../ui/gl/gl_image_ref_counted_memory.cc'
source_filename = "../../ui/gl/gl_image_ref_counted_memory.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gl::GLImageRefCountedMemory" = type { %"class.gl::GLImageMemory.base", %class.scoped_refptr.7 }
%"class.gl::GLImageMemory.base" = type <{ %"class.gl::GLImage", %"class.gfx::Size", i8*, i32, [4 x i8], i64, i32, [4 x i8], %"class.base::WeakPtr", %"class.base::WeakPtr.6", i64, i32 }>
%"class.gl::GLImage" = type { i32 (...)**, %"class.base::RefCounted", %"class.gfx::ColorSpace" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%"class.gfx::Size" = type { i32, i32 }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%"class.base::WeakPtr.6" = type { %"class.base::internal::WeakPtrBase" }
%class.scoped_refptr.7 = type { %"class.base::RefCountedMemory"* }
%"class.base::RefCountedMemory" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.8", [4 x i8] }>
%"class.base::RefCountedThreadSafe.8" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.gl::GLImageMemory" = type <{ %"class.gl::GLImage", %"class.gfx::Size", i8*, i32, [4 x i8], i64, i32, [4 x i8], %"class.base::WeakPtr", %"class.base::WeakPtr.6", i64, i32, [4 x i8] }>
%"class.base::trace_event::ProcessMemoryDump" = type { %"class.base::UnguessableToken", %"class.std::__1::map", %"class.std::__1::map.13", %"struct.base::trace_event::MemoryDumpArgs", %"class.std::__1::unique_ptr" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { i64 }
%"class.std::__1::map.13" = type { %"class.std::__1::__tree.14" }
%"class.std::__1::__tree.14" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.15", %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.base::trace_event::MemoryDumpArgs" = type { i32, i32, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.base::trace_event::MemoryAllocatorDump"* }
%"class.base::trace_event::MemoryAllocatorDump" = type { %"class.std::__1::basic_string", %"class.base::trace_event::MemoryAllocatorDumpGuid", i32, i32, %"class.absl::optional", %"class.std::__1::vector" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::trace_event::MemoryAllocatorDumpGuid" = type { i64 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.31 }
%union.anon.31 = type { i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.base::trace_event::MemoryAllocatorDump::Entry"*, %"struct.base::trace_event::MemoryAllocatorDump::Entry"*, %"class.std::__1::__compressed_pair.32" }
%"struct.base::trace_event::MemoryAllocatorDump::Entry" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i64, %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"struct.base::trace_event::MemoryAllocatorDump::Entry"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.base::trace_event::MemoryDumpManager" = type <{ i32 (...)**, %"class.std::__1::set", %"class.base::RepeatingCallback", i8, [7 x i8], %"class.base::Lock", %"class.std::__1::unique_ptr.47", i64, i8, [7 x i8] }>
%"class.std::__1::set" = type { %"class.std::__1::__tree.38" }
%"class.std::__1::__tree.38" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.39", %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.45 }
%class.scoped_refptr.45 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.46", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.46" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::unique_ptr.47" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.base::Thread"* }
%"class.base::Thread" = type opaque
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }

$_ZN2gl13GLImageMemory15ReleaseTexImageEj = comdat any

$_ZN2gl13GLImageMemory5FlushEv = comdat any

@_ZTVN2gl23GLImageRefCountedMemoryE = hidden unnamed_addr constant { [24 x i8*] } { [24 x i8*] [i8* null, i8* null, i8* bitcast (i64 (%"class.gl::GLImageMemory"*)* @_ZN2gl13GLImageMemory7GetSizeEv to i8*), i8* bitcast (i32 (%"class.gl::GLImageMemory"*)* @_ZN2gl13GLImageMemory17GetInternalFormatEv to i8*), i8* bitcast (i32 (%"class.gl::GLImageMemory"*)* @_ZN2gl13GLImageMemory13GetDataFormatEv to i8*), i8* bitcast (i32 (%"class.gl::GLImageMemory"*)* @_ZN2gl13GLImageMemory11GetDataTypeEv to i8*), i8* bitcast (i32 (%"class.gl::GLImageMemory"*)* @_ZN2gl13GLImageMemory16ShouldBindOrCopyEv to i8*), i8* bitcast (i1 (%"class.gl::GLImageMemory"*, i32)* @_ZN2gl13GLImageMemory12BindTexImageEj to i8*), i8* bitcast (i1 (%"class.gl::GLImage"*, i32, i32)* @_ZN2gl7GLImage30BindTexImageWithInternalformatEjj to i8*), i8* bitcast (void (%"class.gl::GLImageMemory"*, i32)* @_ZN2gl13GLImageMemory15ReleaseTexImageEj to i8*), i8* bitcast (i1 (%"class.gl::GLImageMemory"*, i32)* @_ZN2gl13GLImageMemory12CopyTexImageEj to i8*), i8* bitcast (i1 (%"class.gl::GLImageMemory"*, i32, %"class.gfx::Point"*, %"class.gfx::Rect"*)* @_ZN2gl13GLImageMemory15CopyTexSubImageEjRKN3gfx5PointERKNS1_4RectE to i8*), i8* bitcast (void ()* @_ZN2gl13GLImageMemory20ScheduleOverlayPlaneEjiN3gfx16OverlayTransformERKNS1_4RectERKNS1_5RectFEbNSt3__110unique_ptrINS1_8GpuFenceENS9_14default_deleteISB_EEEE to i8*), i8* bitcast (void (%"class.gl::GLImage"*, %"class.gfx::ColorSpace"*)* @_ZN2gl7GLImage13SetColorSpaceERKN3gfx10ColorSpaceE to i8*), i8* bitcast (void (%"class.gl::GLImageMemory"*)* @_ZN2gl13GLImageMemory5FlushEv to i8*), i8* bitcast (void (%"class.gl::GLImageRefCountedMemory"*, %"class.base::trace_event::ProcessMemoryDump"*, i64, %"class.std::__1::basic_string"*)* @_ZN2gl23GLImageRefCountedMemory12OnMemoryDumpEPN4base11trace_event17ProcessMemoryDumpEmRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE to i8*), i8* bitcast (i1 (%"class.gl::GLImage"*)* @_ZNK2gl7GLImage12EmulatingRGBEv to i8*), i8* bitcast (i1 (%"class.gl::GLImage"*)* @_ZNK2gl7GLImage21IsInUseByWindowServerEv to i8*), i8* bitcast (void (%"class.gl::GLImage"*)* @_ZN2gl7GLImage26DisableInUseByWindowServerEv to i8*), i8* bitcast (i32 (%"class.gl::GLImageMemory"*)* @_ZNK2gl13GLImageMemory7GetTypeEv to i8*), i8* bitcast (i1 (%"class.gl::GLImage"*)* @_ZNK2gl7GLImage15HasMutableStateEv to i8*), i8* bitcast (void ()* @_ZN2gl7GLImage15GetNativePixmapEv to i8*), i8* bitcast (void (%"class.gl::GLImageRefCountedMemory"*)* @_ZN2gl23GLImageRefCountedMemoryD2Ev to i8*), i8* bitcast (void (%"class.gl::GLImageRefCountedMemory"*)* @_ZN2gl23GLImageRefCountedMemoryD0Ev to i8*)] }, align 8
@.str = private unnamed_addr constant [16 x i8] c"/private_memory\00", align 1
@_ZN4base11trace_event19MemoryAllocatorDump9kNameSizeE = external constant [0 x i8], align 1
@_ZN4base11trace_event19MemoryAllocatorDump11kUnitsBytesE = external constant [0 x i8], align 1
@_ZN4base11trace_event17MemoryDumpManager24kSystemAllocatorPoolNameE = external local_unnamed_addr constant i8*, align 8

@_ZN2gl23GLImageRefCountedMemoryC1ERKN3gfx4SizeE = hidden unnamed_addr alias void (%"class.gl::GLImageRefCountedMemory"*, %"class.gfx::Size"*), void (%"class.gl::GLImageRefCountedMemory"*, %"class.gfx::Size"*)* @_ZN2gl23GLImageRefCountedMemoryC2ERKN3gfx4SizeE
@_ZN2gl23GLImageRefCountedMemoryD1Ev = hidden unnamed_addr alias void (%"class.gl::GLImageRefCountedMemory"*), void (%"class.gl::GLImageRefCountedMemory"*)* @_ZN2gl23GLImageRefCountedMemoryD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl23GLImageRefCountedMemoryC2ERKN3gfx4SizeE(%"class.gl::GLImageRefCountedMemory"*, %"class.gfx::Size"* dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.gl::GLImageRefCountedMemory"* %0 to %"class.gl::GLImageMemory"*
  tail call void @_ZN2gl13GLImageMemoryC2ERKN3gfx4SizeE(%"class.gl::GLImageMemory"* %3, %"class.gfx::Size"* dereferenceable(8) %1) #8
  %4 = getelementptr inbounds %"class.gl::GLImageRefCountedMemory", %"class.gl::GLImageRefCountedMemory"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [24 x i8*] }, { [24 x i8*] }* @_ZTVN2gl23GLImageRefCountedMemoryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.gl::GLImageRefCountedMemory", %"class.gl::GLImageRefCountedMemory"* %0, i64 0, i32 1, i32 0
  store %"class.base::RefCountedMemory"* null, %"class.base::RefCountedMemory"** %5, align 8
  ret void
}

declare void @_ZN2gl13GLImageMemoryC2ERKN3gfx4SizeE(%"class.gl::GLImageMemory"*, %"class.gfx::Size"* dereferenceable(8)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl23GLImageRefCountedMemoryD2Ev(%"class.gl::GLImageRefCountedMemory"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLImageRefCountedMemory", %"class.gl::GLImageRefCountedMemory"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [24 x i8*] }, { [24 x i8*] }* @_ZTVN2gl23GLImageRefCountedMemoryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.gl::GLImageRefCountedMemory", %"class.gl::GLImageRefCountedMemory"* %0, i64 0, i32 1, i32 0
  %4 = load %"class.base::RefCountedMemory"*, %"class.base::RefCountedMemory"** %3, align 8
  %5 = icmp eq %"class.base::RefCountedMemory"* %4, null
  br i1 %5, label %18, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::RefCountedMemory", %"class.base::RefCountedMemory"* %4, i64 0, i32 1
  %8 = getelementptr inbounds %"class.base::RefCountedThreadSafe.8", %"class.base::RefCountedThreadSafe.8"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw sub i32* %8, i32 1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %18

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.base::RefCountedThreadSafe.8", %"class.base::RefCountedThreadSafe.8"* %7, i64 -2
  %13 = bitcast %"class.base::RefCountedThreadSafe.8"* %12 to %"class.base::RefCountedMemory"*
  %14 = bitcast %"class.base::RefCountedThreadSafe.8"* %12 to void (%"class.base::RefCountedMemory"*)***
  %15 = load void (%"class.base::RefCountedMemory"*)**, void (%"class.base::RefCountedMemory"*)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %15, i64 3
  %17 = load void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %16, align 8
  tail call void %17(%"class.base::RefCountedMemory"* nonnull %13) #8
  br label %18

18:                                               ; preds = %1, %6, %11
  %19 = bitcast %"class.gl::GLImageRefCountedMemory"* %0 to %"class.gl::GLImageMemory"*
  tail call void @_ZN2gl13GLImageMemoryD2Ev(%"class.gl::GLImageMemory"* %19) #8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN2gl13GLImageMemoryD2Ev(%"class.gl::GLImageMemory"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl23GLImageRefCountedMemoryD0Ev(%"class.gl::GLImageRefCountedMemory"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLImageRefCountedMemory", %"class.gl::GLImageRefCountedMemory"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [24 x i8*] }, { [24 x i8*] }* @_ZTVN2gl23GLImageRefCountedMemoryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.gl::GLImageRefCountedMemory", %"class.gl::GLImageRefCountedMemory"* %0, i64 0, i32 1, i32 0
  %4 = load %"class.base::RefCountedMemory"*, %"class.base::RefCountedMemory"** %3, align 8
  %5 = icmp eq %"class.base::RefCountedMemory"* %4, null
  br i1 %5, label %18, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::RefCountedMemory", %"class.base::RefCountedMemory"* %4, i64 0, i32 1
  %8 = getelementptr inbounds %"class.base::RefCountedThreadSafe.8", %"class.base::RefCountedThreadSafe.8"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw sub i32* %8, i32 1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %18

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.base::RefCountedThreadSafe.8", %"class.base::RefCountedThreadSafe.8"* %7, i64 -2
  %13 = bitcast %"class.base::RefCountedThreadSafe.8"* %12 to %"class.base::RefCountedMemory"*
  %14 = bitcast %"class.base::RefCountedThreadSafe.8"* %12 to void (%"class.base::RefCountedMemory"*)***
  %15 = load void (%"class.base::RefCountedMemory"*)**, void (%"class.base::RefCountedMemory"*)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %15, i64 3
  %17 = load void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %16, align 8
  tail call void %17(%"class.base::RefCountedMemory"* nonnull %13) #8
  br label %18

18:                                               ; preds = %1, %6, %11
  %19 = bitcast %"class.gl::GLImageRefCountedMemory"* %0 to %"class.gl::GLImageMemory"*
  tail call void @_ZN2gl13GLImageMemoryD2Ev(%"class.gl::GLImageMemory"* %19) #8
  %20 = bitcast %"class.gl::GLImageRefCountedMemory"* %0 to i8*
  tail call void @_ZdlPv(i8* %20) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2gl23GLImageRefCountedMemory10InitializeEPN4base16RefCountedMemoryEN3gfx12BufferFormatE(%"class.gl::GLImageRefCountedMemory"*, %"class.base::RefCountedMemory"*, i32) local_unnamed_addr #0 align 2 {
  %4 = bitcast %"class.gl::GLImageRefCountedMemory"* %0 to %"class.gl::GLImageMemory"*
  %5 = bitcast %"class.base::RefCountedMemory"* %1 to i8* (%"class.base::RefCountedMemory"*)***
  %6 = load i8* (%"class.base::RefCountedMemory"*)**, i8* (%"class.base::RefCountedMemory"*)*** %5, align 8
  %7 = load i8* (%"class.base::RefCountedMemory"*)*, i8* (%"class.base::RefCountedMemory"*)** %6, align 8
  %8 = tail call i8* %7(%"class.base::RefCountedMemory"* %1) #8
  %9 = bitcast %"class.gl::GLImageRefCountedMemory"* %0 to i64 (%"class.gl::GLImageMemory"*)***
  %10 = load i64 (%"class.gl::GLImageMemory"*)**, i64 (%"class.gl::GLImageMemory"*)*** %9, align 8
  %11 = load i64 (%"class.gl::GLImageMemory"*)*, i64 (%"class.gl::GLImageMemory"*)** %10, align 8
  %12 = tail call i64 %11(%"class.gl::GLImageMemory"* %4) #8
  %13 = shl i64 %12, 32
  %14 = ashr exact i64 %13, 32
  %15 = tail call i64 @_ZN3gfx22RowSizeForBufferFormatEmNS_12BufferFormatEm(i64 %14, i32 %2, i64 0) #8
  %16 = tail call zeroext i1 @_ZN2gl13GLImageMemory10InitializeEPKhN3gfx12BufferFormatEm(%"class.gl::GLImageMemory"* %4, i8* %8, i32 %2, i64 %15) #8
  br i1 %16, label %17, label %41

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.gl::GLImageRefCountedMemory", %"class.gl::GLImageRefCountedMemory"* %0, i64 0, i32 1
  %19 = icmp eq %"class.base::RefCountedMemory"* %1, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %17
  %21 = getelementptr inbounds %"class.base::RefCountedMemory", %"class.base::RefCountedMemory"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = atomicrmw add i32* %21, i32 1 monotonic
  br label %23

23:                                               ; preds = %20, %17
  %24 = ptrtoint %"class.base::RefCountedMemory"* %1 to i64
  %25 = bitcast %class.scoped_refptr.7* %18 to i64*
  %26 = getelementptr inbounds %class.scoped_refptr.7, %class.scoped_refptr.7* %18, i64 0, i32 0
  %27 = load %"class.base::RefCountedMemory"*, %"class.base::RefCountedMemory"** %26, align 8
  store i64 %24, i64* %25, align 8
  %28 = icmp eq %"class.base::RefCountedMemory"* %27, null
  br i1 %28, label %41, label %29

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.base::RefCountedMemory", %"class.base::RefCountedMemory"* %27, i64 0, i32 1
  %31 = getelementptr inbounds %"class.base::RefCountedThreadSafe.8", %"class.base::RefCountedThreadSafe.8"* %30, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = atomicrmw sub i32* %31, i32 1 acq_rel
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %34, label %41

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.base::RefCountedThreadSafe.8", %"class.base::RefCountedThreadSafe.8"* %30, i64 -2
  %36 = bitcast %"class.base::RefCountedThreadSafe.8"* %35 to %"class.base::RefCountedMemory"*
  %37 = bitcast %"class.base::RefCountedThreadSafe.8"* %35 to void (%"class.base::RefCountedMemory"*)***
  %38 = load void (%"class.base::RefCountedMemory"*)**, void (%"class.base::RefCountedMemory"*)*** %37, align 8
  %39 = getelementptr inbounds void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %38, i64 3
  %40 = load void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %39, align 8
  tail call void %40(%"class.base::RefCountedMemory"* nonnull %36) #8
  br label %41

41:                                               ; preds = %34, %29, %23, %3
  %42 = phi i1 [ false, %3 ], [ true, %23 ], [ true, %29 ], [ true, %34 ]
  ret i1 %42
}

declare zeroext i1 @_ZN2gl13GLImageMemory10InitializeEPKhN3gfx12BufferFormatEm(%"class.gl::GLImageMemory"*, i8*, i32, i64) local_unnamed_addr #1

declare i64 @_ZN3gfx22RowSizeForBufferFormatEmNS_12BufferFormatEm(i64, i32, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl23GLImageRefCountedMemory12OnMemoryDumpEPN4base11trace_event17ProcessMemoryDumpEmRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(%"class.gl::GLImageRefCountedMemory"* nocapture readonly, %"class.base::trace_event::ProcessMemoryDump"*, i64, %"class.std::__1::basic_string"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = getelementptr inbounds %"class.gl::GLImageRefCountedMemory", %"class.gl::GLImageRefCountedMemory"* %0, i64 0, i32 1, i32 0
  %8 = load %"class.base::RefCountedMemory"*, %"class.base::RefCountedMemory"** %7, align 8
  %9 = icmp eq %"class.base::RefCountedMemory"* %8, null
  br i1 %9, label %16, label %10

10:                                               ; preds = %4
  %11 = bitcast %"class.base::RefCountedMemory"* %8 to i64 (%"class.base::RefCountedMemory"*)***
  %12 = load i64 (%"class.base::RefCountedMemory"*)**, i64 (%"class.base::RefCountedMemory"*)*** %11, align 8
  %13 = getelementptr inbounds i64 (%"class.base::RefCountedMemory"*)*, i64 (%"class.base::RefCountedMemory"*)** %12, i64 1
  %14 = load i64 (%"class.base::RefCountedMemory"*)*, i64 (%"class.base::RefCountedMemory"*)** %13, align 8
  %15 = tail call i64 %14(%"class.base::RefCountedMemory"* nonnull %8) #8
  br label %16

16:                                               ; preds = %4, %10
  %17 = phi i64 [ %15, %10 ], [ 0, %4 ]
  %18 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #8
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 24, i1 false) #8, !alias.scope !2
  %22 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %22, i64 0, i32 1, i32 0
  %24 = load i8, i8* %23, align 1, !noalias !2
  %25 = icmp slt i8 %24, 0
  %26 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = zext i8 %24 to i64
  %31 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  %32 = select i1 %25, i64 %27, i64 %30
  %33 = select i1 %25, i8* %29, i8* %31
  %34 = add i64 %32, 15
  %35 = icmp ugt i64 %34, -17
  br i1 %35, label %36, label %38

36:                                               ; preds = %16
  %37 = bitcast %"class.std::__1::basic_string"* %5 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %37) #10
  unreachable

38:                                               ; preds = %16
  %39 = icmp ult i64 %34, 23
  br i1 %39, label %45, label %40

40:                                               ; preds = %38
  %41 = add nuw i64 %32, 31
  %42 = and i64 %41, -16
  %43 = tail call i8* @_Znwm(i64 %42) #9
  store i8* %43, i8** %19, align 8, !alias.scope !2
  %44 = or i64 %42, -9223372036854775808
  store i64 %44, i64* %21, align 8, !alias.scope !2
  store i64 %32, i64* %20, align 8, !alias.scope !2
  br label %50

45:                                               ; preds = %38
  %46 = trunc i64 %32 to i8
  %47 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %48 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %47, i64 0, i32 1, i32 0
  store i8 %46, i8* %48, align 1, !alias.scope !2
  %49 = icmp eq i64 %32, 0
  br i1 %49, label %52, label %50

50:                                               ; preds = %40, %45
  %51 = phi i8* [ %43, %40 ], [ %18, %45 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %51, i8* align 1 %33, i64 %32, i1 false) #8
  br label %52

52:                                               ; preds = %45, %50
  %53 = phi i8* [ %18, %45 ], [ %51, %50 ]
  %54 = getelementptr inbounds i8, i8* %53, i64 %32
  store i8 0, i8* %54, align 1
  %55 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %5, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i64 15) #8
  %56 = call %"class.base::trace_event::MemoryAllocatorDump"* @_ZN4base11trace_event17ProcessMemoryDump19CreateAllocatorDumpERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.base::trace_event::ProcessMemoryDump"* %1, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %5) #8
  %57 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %58 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %57, i64 0, i32 1, i32 0
  %59 = load i8, i8* %58, align 1
  %60 = icmp slt i8 %59, 0
  br i1 %60, label %61, label %63

61:                                               ; preds = %52
  %62 = load i8*, i8** %19, align 8
  call void @_ZdlPv(i8* %62) #9
  br label %63

63:                                               ; preds = %52, %61
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #8
  call void @_ZN4base11trace_event19MemoryAllocatorDump9AddScalarEPKcS3_m(%"class.base::trace_event::MemoryAllocatorDump"* %56, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN4base11trace_event19MemoryAllocatorDump9kNameSizeE, i64 0, i64 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN4base11trace_event19MemoryAllocatorDump11kUnitsBytesE, i64 0, i64 0), i64 %17) #8
  %64 = getelementptr inbounds %"class.base::trace_event::MemoryAllocatorDump", %"class.base::trace_event::MemoryAllocatorDump"* %56, i64 0, i32 1
  %65 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %65) #8
  %66 = call %"class.base::trace_event::MemoryDumpManager"* @_ZN4base11trace_event17MemoryDumpManager11GetInstanceEv() #8
  %67 = load i8*, i8** @_ZN4base11trace_event17MemoryDumpManager24kSystemAllocatorPoolNameE, align 8
  %68 = call i64 @strlen(i8* %67) #8
  %69 = icmp ugt i64 %68, -17
  br i1 %69, label %70, label %72

70:                                               ; preds = %63
  %71 = bitcast %"class.std::__1::basic_string"* %6 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %71) #10
  unreachable

72:                                               ; preds = %63
  %73 = icmp ult i64 %68, 23
  br i1 %73, label %83, label %74

74:                                               ; preds = %72
  %75 = add nuw i64 %68, 16
  %76 = and i64 %75, -16
  %77 = call i8* @_Znwm(i64 %76) #9
  %78 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %77, i8** %78, align 8
  %79 = or i64 %76, -9223372036854775808
  %80 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %79, i64* %80, align 8
  %81 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %68, i64* %81, align 8
  %82 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %88

83:                                               ; preds = %72
  %84 = trunc i64 %68 to i8
  %85 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %86 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %85, i64 0, i32 1, i32 0
  store i8 %84, i8* %86, align 1
  %87 = icmp eq i64 %68, 0
  br i1 %87, label %91, label %88

88:                                               ; preds = %83, %74
  %89 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %85, %83 ], [ %82, %74 ]
  %90 = phi i8* [ %65, %83 ], [ %77, %74 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %90, i8* align 1 %67, i64 %68, i1 false) #8
  br label %91

91:                                               ; preds = %83, %88
  %92 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %85, %83 ], [ %89, %88 ]
  %93 = phi i8* [ %65, %83 ], [ %90, %88 ]
  %94 = getelementptr inbounds i8, i8* %93, i64 %68
  store i8 0, i8* %94, align 1
  call void @_ZN4base11trace_event17ProcessMemoryDump16AddSuballocationERKNS0_23MemoryAllocatorDumpGuidERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(%"class.base::trace_event::ProcessMemoryDump"* %1, %"class.base::trace_event::MemoryAllocatorDumpGuid"* dereferenceable(8) %64, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %6) #8
  %95 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %92, i64 0, i32 1, i32 0
  %96 = load i8, i8* %95, align 1
  %97 = icmp slt i8 %96, 0
  br i1 %97, label %98, label %101

98:                                               ; preds = %91
  %99 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %100 = load i8*, i8** %99, align 8
  call void @_ZdlPv(i8* %100) #9
  br label %101

101:                                              ; preds = %91, %98
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %65) #8
  ret void
}

declare %"class.base::trace_event::MemoryAllocatorDump"* @_ZN4base11trace_event17ProcessMemoryDump19CreateAllocatorDumpERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.base::trace_event::ProcessMemoryDump"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1

declare void @_ZN4base11trace_event19MemoryAllocatorDump9AddScalarEPKcS3_m(%"class.base::trace_event::MemoryAllocatorDump"*, i8*, i8*, i64) local_unnamed_addr #1

declare void @_ZN4base11trace_event17ProcessMemoryDump16AddSuballocationERKNS0_23MemoryAllocatorDumpGuidERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(%"class.base::trace_event::ProcessMemoryDump"*, %"class.base::trace_event::MemoryAllocatorDumpGuid"* dereferenceable(8), %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1

declare %"class.base::trace_event::MemoryDumpManager"* @_ZN4base11trace_event17MemoryDumpManager11GetInstanceEv() local_unnamed_addr #1

declare i64 @_ZN2gl13GLImageMemory7GetSizeEv(%"class.gl::GLImageMemory"*) unnamed_addr #1

declare i32 @_ZN2gl13GLImageMemory17GetInternalFormatEv(%"class.gl::GLImageMemory"*) unnamed_addr #1

declare i32 @_ZN2gl13GLImageMemory13GetDataFormatEv(%"class.gl::GLImageMemory"*) unnamed_addr #1

declare i32 @_ZN2gl13GLImageMemory11GetDataTypeEv(%"class.gl::GLImageMemory"*) unnamed_addr #1

declare i32 @_ZN2gl13GLImageMemory16ShouldBindOrCopyEv(%"class.gl::GLImageMemory"*) unnamed_addr #1

declare zeroext i1 @_ZN2gl13GLImageMemory12BindTexImageEj(%"class.gl::GLImageMemory"*, i32) unnamed_addr #1

declare zeroext i1 @_ZN2gl7GLImage30BindTexImageWithInternalformatEjj(%"class.gl::GLImage"*, i32, i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2gl13GLImageMemory15ReleaseTexImageEj(%"class.gl::GLImageMemory"*, i32) unnamed_addr #0 comdat align 2 {
  ret void
}

declare zeroext i1 @_ZN2gl13GLImageMemory12CopyTexImageEj(%"class.gl::GLImageMemory"*, i32) unnamed_addr #1

declare zeroext i1 @_ZN2gl13GLImageMemory15CopyTexSubImageEjRKN3gfx5PointERKNS1_4RectE(%"class.gl::GLImageMemory"*, i32, %"class.gfx::Point"* dereferenceable(8), %"class.gfx::Rect"* dereferenceable(16)) unnamed_addr #1

declare void @_ZN2gl13GLImageMemory20ScheduleOverlayPlaneEjiN3gfx16OverlayTransformERKNS1_4RectERKNS1_5RectFEbNSt3__110unique_ptrINS1_8GpuFenceENS9_14default_deleteISB_EEEE() unnamed_addr

declare void @_ZN2gl7GLImage13SetColorSpaceERKN3gfx10ColorSpaceE(%"class.gl::GLImage"*, %"class.gfx::ColorSpace"* dereferenceable(68)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2gl13GLImageMemory5FlushEv(%"class.gl::GLImageMemory"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare zeroext i1 @_ZNK2gl7GLImage12EmulatingRGBEv(%"class.gl::GLImage"*) unnamed_addr #1

declare zeroext i1 @_ZNK2gl7GLImage21IsInUseByWindowServerEv(%"class.gl::GLImage"*) unnamed_addr #1

declare void @_ZN2gl7GLImage26DisableInUseByWindowServerEv(%"class.gl::GLImage"*) unnamed_addr #1

declare i32 @_ZNK2gl13GLImageMemory7GetTypeEv(%"class.gl::GLImageMemory"*) unnamed_addr #1

declare zeroext i1 @_ZNK2gl7GLImage15HasMutableStateEv(%"class.gl::GLImage"*) unnamed_addr #1

declare void @_ZN2gl7GLImage15GetNativePixmapEv() unnamed_addr

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_: argument 0"}
!4 = distinct !{!4, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_"}
