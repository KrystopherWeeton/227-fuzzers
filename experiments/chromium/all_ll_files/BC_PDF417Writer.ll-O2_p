; ModuleID = '../../third_party/pdfium/fxbarcode/pdf417/BC_PDF417Writer.cpp'
source_filename = "../../third_party/pdfium/fxbarcode/pdf417/BC_PDF417Writer.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CBC_PDF417Writer = type { %class.CBC_TwoDimWriter.base, [3 x i8] }
%class.CBC_TwoDimWriter.base = type <{ %class.CBC_Writer.base, [2 x i8], %"class.std::__1::unique_ptr", i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }>
%class.CBC_Writer.base = type <{ i32 (...)**, i32, i32, i32, i32, i32, i16 }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CBC_CommonBitMatrix* }
%class.CBC_CommonBitMatrix = type { i32, i32, i32, %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.0" }
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { i32* }
%class.CBC_TwoDimWriter = type <{ %class.CBC_Writer.base, [2 x i8], %"class.std::__1::unique_ptr", i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { i8*, i8*, %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i8* }
%"class.fxcrt::StringViewTemplate" = type { %"class.pdfium::span" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i32* }
%class.CBC_PDF417 = type { %"class.std::__1::unique_ptr.9", i32, i32, i32, i32 }
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %class.CBC_BarcodeMatrix* }
%class.CBC_BarcodeMatrix = type { %"class.std::__1::vector.12", i64, i64 }
%"class.std::__1::vector.12" = type { %"class.std::__1::__vector_base.13" }
%"class.std::__1::__vector_base.13" = type { %"class.std::__1::unique_ptr.14"*, %"class.std::__1::unique_ptr.14"*, %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::unique_ptr.14" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %class.CBC_BarcodeRow* }
%class.CBC_BarcodeRow = type opaque
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.std::__1::unique_ptr.14"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%class.CBC_Writer = type <{ i32 (...)**, i32, i32, i32, i32, i32, i16, [2 x i8] }>

@_ZTV16CBC_PDF417Writer = hidden unnamed_addr constant { [14 x i8*] } { [14 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CBC_PDF417Writer*)* @_ZN16CBC_PDF417WriterD2Ev to i8*), i8* bitcast (void (%class.CBC_PDF417Writer*)* @_ZN16CBC_PDF417WriterD0Ev to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer15SetCharEncodingEi to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer15SetModuleHeightEi to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer14SetModuleWidthEi to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer9SetHeightEi to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer8SetWidthEi to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i8)* @_ZN10CBC_Writer15SetTextLocationE11BC_TEXT_LOC to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i8)* @_ZN10CBC_Writer18SetWideNarrowRatioEa to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i8)* @_ZN10CBC_Writer12SetStartCharEc to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i8)* @_ZN10CBC_Writer10SetEndCharEc to i8*), i8* bitcast (i1 (%class.CBC_PDF417Writer*, i32)* @_ZN16CBC_PDF417Writer23SetErrorCorrectionLevelEi to i8*)] }, align 8

@_ZN16CBC_PDF417WriterC1Ev = hidden unnamed_addr alias void (%class.CBC_PDF417Writer*), void (%class.CBC_PDF417Writer*)* @_ZN16CBC_PDF417WriterC2Ev
@_ZN16CBC_PDF417WriterD1Ev = hidden unnamed_addr alias void (%class.CBC_PDF417Writer*), void (%class.CBC_PDF417Writer*)* @_ZN16CBC_PDF417WriterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16CBC_PDF417WriterC2Ev(%class.CBC_PDF417Writer*) unnamed_addr #0 align 2 {
  %2 = bitcast %class.CBC_PDF417Writer* %0 to %class.CBC_TwoDimWriter*
  tail call void @_ZN16CBC_TwoDimWriterC2Eb(%class.CBC_TwoDimWriter* %2, i1 zeroext false) #9
  %3 = getelementptr inbounds %class.CBC_PDF417Writer, %class.CBC_PDF417Writer* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*] }, { [14 x i8*] }* @_ZTV16CBC_PDF417Writer, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

declare void @_ZN16CBC_TwoDimWriterC2Eb(%class.CBC_TwoDimWriter*, i1 zeroext) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN16CBC_TwoDimWriterD2Ev(%class.CBC_TwoDimWriter*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16CBC_PDF417WriterD2Ev(%class.CBC_PDF417Writer*) unnamed_addr #0 align 2 {
  %2 = bitcast %class.CBC_PDF417Writer* %0 to %class.CBC_TwoDimWriter*
  tail call void @_ZN16CBC_TwoDimWriterD2Ev(%class.CBC_TwoDimWriter* %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16CBC_PDF417WriterD0Ev(%class.CBC_PDF417Writer*) unnamed_addr #0 align 2 {
  %2 = bitcast %class.CBC_PDF417Writer* %0 to %class.CBC_TwoDimWriter*
  tail call void @_ZN16CBC_TwoDimWriterD2Ev(%class.CBC_TwoDimWriter* %2) #9
  %3 = bitcast %class.CBC_PDF417Writer* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden zeroext i1 @_ZN16CBC_PDF417Writer23SetErrorCorrectionLevelEi(%class.CBC_PDF417Writer* nocapture, i32) unnamed_addr #4 align 2 {
  %3 = icmp ugt i32 %1, 8
  br i1 %3, label %6, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %class.CBC_PDF417Writer, %class.CBC_PDF417Writer* %0, i64 0, i32 0, i32 11
  store i32 %1, i32* %5, align 8
  br label %6

6:                                                ; preds = %2, %4
  %7 = phi i1 [ true, %4 ], [ false, %2 ]
  ret i1 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16CBC_PDF417Writer6EncodeEN5fxcrt18StringViewTemplateIwEEPiS3_(%"class.std::__1::vector.4"* noalias nocapture sret, %class.CBC_PDF417Writer* nocapture readonly, %"class.fxcrt::StringViewTemplate"* nocapture readonly, i32* nocapture, i32* nocapture) local_unnamed_addr #0 align 2 {
  %6 = alloca %class.CBC_PDF417, align 8
  %7 = alloca %"class.fxcrt::StringViewTemplate", align 8
  %8 = alloca %"class.std::__1::vector.4", align 8
  %9 = alloca %"class.std::__1::vector.4", align 8
  %10 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %12 = bitcast %"class.std::__1::vector.4"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false) #9
  %13 = bitcast %class.CBC_PDF417* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #9
  %14 = bitcast %class.CBC_PDF417* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 24, i1 false)
  call void @_ZN10CBC_PDF417C1Ev(%class.CBC_PDF417* nonnull %6) #9
  %15 = getelementptr inbounds %class.CBC_PDF417Writer, %class.CBC_PDF417Writer* %1, i64 0, i32 0, i32 0, i32 5
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %class.CBC_PDF417Writer, %class.CBC_PDF417Writer* %1, i64 0, i32 0, i32 0, i32 3
  %18 = load i32, i32* %17, align 8
  %19 = sdiv i32 %16, %18
  %20 = add nsw i32 %19, -69
  %21 = sdiv i32 %20, 17
  %22 = getelementptr inbounds %class.CBC_PDF417Writer, %class.CBC_PDF417Writer* %1, i64 0, i32 0, i32 0, i32 4
  %23 = load i32, i32* %22, align 4
  %24 = mul nsw i32 %18, 20
  %25 = sdiv i32 %23, %24
  %26 = add i32 %25, -3
  %27 = icmp ult i32 %26, 88
  %28 = add i32 %19, -86
  %29 = icmp ult i32 %28, 510
  %30 = and i1 %29, %27
  br i1 %30, label %31, label %32

31:                                               ; preds = %5
  call void @_ZN10CBC_PDF41713setDimensionsEiiii(%class.CBC_PDF417* nonnull %6, i32 %21, i32 1, i32 %25, i32 3) #9
  br label %36

32:                                               ; preds = %5
  br i1 %29, label %33, label %34

33:                                               ; preds = %32
  call void @_ZN10CBC_PDF41713setDimensionsEiiii(%class.CBC_PDF417* nonnull %6, i32 %21, i32 %21, i32 90, i32 3) #9
  br label %36

34:                                               ; preds = %32
  br i1 %27, label %35, label %36

35:                                               ; preds = %34
  call void @_ZN10CBC_PDF41713setDimensionsEiiii(%class.CBC_PDF417* nonnull %6, i32 30, i32 1, i32 %25, i32 %25) #9
  br label %36

36:                                               ; preds = %33, %35, %34, %31
  %37 = bitcast %"class.fxcrt::StringViewTemplate"* %7 to i8*
  %38 = bitcast %"class.fxcrt::StringViewTemplate"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %37, i8* align 8 %38, i64 16, i1 false)
  %39 = getelementptr inbounds %class.CBC_PDF417Writer, %class.CBC_PDF417Writer* %1, i64 0, i32 0, i32 11
  %40 = load i32, i32* %39, align 8
  %41 = call zeroext i1 @_ZN10CBC_PDF41720GenerateBarcodeLogicEN5fxcrt18StringViewTemplateIwEEi(%class.CBC_PDF417* nonnull %6, %"class.fxcrt::StringViewTemplate"* nonnull %7, i32 %40) #9
  br i1 %41, label %42, label %107

42:                                               ; preds = %36
  %43 = call %class.CBC_BarcodeMatrix* @_ZN10CBC_PDF41716getBarcodeMatrixEv(%class.CBC_PDF417* nonnull %6) #9
  %44 = bitcast %"class.std::__1::vector.4"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %44) #9
  %45 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %8, i64 0, i32 0, i32 0
  %46 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %8, i64 0, i32 0, i32 1
  %47 = bitcast %"class.std::__1::vector.4"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %47, i8 -86, i64 24, i1 false)
  call void @_ZN17CBC_BarcodeMatrix10toBitArrayEv(%"class.std::__1::vector.4"* nonnull sret %8, %class.CBC_BarcodeMatrix* %43) #9
  %48 = getelementptr inbounds %class.CBC_BarcodeMatrix, %class.CBC_BarcodeMatrix* %43, i64 0, i32 1
  %49 = load i64, i64* %48, align 8
  %50 = trunc i64 %49 to i32
  %51 = getelementptr inbounds %class.CBC_BarcodeMatrix, %class.CBC_BarcodeMatrix* %43, i64 0, i32 2
  %52 = load i64, i64* %51, align 8
  %53 = trunc i64 %52 to i32
  %54 = icmp slt i32 %50, %53
  br i1 %54, label %55, label %56

55:                                               ; preds = %42
  call void @_ZN16CBC_PDF417Writer11RotateArrayEPNSt3__16vectorIh16FxAllocAllocatorIhEEEii(%class.CBC_PDF417Writer* undef, %"class.std::__1::vector.4"* nonnull %8, i32 %53, i32 %50)
  br label %56

56:                                               ; preds = %55, %42
  %57 = phi i32 [ %53, %55 ], [ %50, %42 ]
  %58 = phi i32 [ %50, %55 ], [ %53, %42 ]
  store i32 %57, i32* %3, align 4
  store i32 %58, i32* %4, align 4
  %59 = bitcast %"class.std::__1::vector.4"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %59) #9
  %60 = load i32, i32* %3, align 4
  %61 = sext i32 %60 to i64
  %62 = sext i32 %58 to i64
  %63 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %61, i64 %62) #9
  %64 = extractvalue { i64, i1 } %63, 1
  %65 = extractvalue { i64, i1 } %63, 0
  br i1 %64, label %66, label %67, !prof !2

66:                                               ; preds = %56
  call void @llvm.trap() #9
  unreachable

67:                                               ; preds = %56
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %59, i8 0, i64 24, i1 false) #9, !alias.scope !3
  %68 = icmp eq i64 %65, 0
  br i1 %68, label %85, label %69

69:                                               ; preds = %67
  %70 = icmp slt i64 %65, 0
  br i1 %70, label %71, label %73

71:                                               ; preds = %69
  %72 = bitcast %"class.std::__1::vector.4"* %9 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %72) #11
  unreachable

73:                                               ; preds = %69
  %74 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %65, i64 1) #9
  %75 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %9, i64 0, i32 0, i32 1
  %76 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %9, i64 0, i32 0, i32 0
  store i8* %74, i8** %76, align 8, !alias.scope !3
  %77 = getelementptr inbounds i8, i8* %74, i64 %65
  %78 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  store i8* %77, i8** %78, align 8, !alias.scope !3
  %79 = bitcast i8** %75 to i64*
  %80 = ptrtoint i8* %74 to i64
  %81 = sub i64 %65, %80
  %82 = getelementptr i8, i8* %74, i64 %81
  %83 = ptrtoint i8* %82 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %74, i8 0, i64 %83, i1 false) #9
  %84 = ptrtoint i8* %77 to i64
  store i64 %84, i64* %79, align 8, !alias.scope !3
  br label %85

85:                                               ; preds = %67, %73
  %86 = phi i64 [ 0, %67 ], [ %84, %73 ]
  %87 = bitcast %"class.std::__1::vector.4"* %9 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  %90 = bitcast i8** %89 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = bitcast i8** %10 to i64*
  %93 = bitcast %"class.std::__1::vector.4"* %0 to i64*
  store i64 %88, i64* %93, align 8
  store i64 %86, i64* %92, align 8
  %94 = bitcast i8** %11 to i64*
  store i64 %91, i64* %94, align 8
  %95 = inttoptr i64 %88 to i8*
  %96 = load i8*, i8** %45, align 8
  %97 = load i32, i32* %3, align 4
  %98 = load i32, i32* %4, align 4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %59) #9
  %99 = mul nsw i32 %98, %97
  %100 = sext i32 %99 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %95, i8* align 1 %96, i64 %100, i1 false)
  %101 = load i8*, i8** %45, align 8
  %102 = icmp eq i8* %101, null
  br i1 %102, label %106, label %103

103:                                              ; preds = %85
  %104 = ptrtoint i8* %101 to i64
  %105 = bitcast i8** %46 to i64*
  store i64 %104, i64* %105, align 8
  call void @_Z7FX_FreePv(i8* nonnull %101) #9
  br label %106

106:                                              ; preds = %85, %103
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %44) #9
  br label %107

107:                                              ; preds = %36, %106
  call void @_ZN10CBC_PDF417D1Ev(%class.CBC_PDF417* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

declare void @_ZN10CBC_PDF417C1Ev(%class.CBC_PDF417*) unnamed_addr #1

declare void @_ZN10CBC_PDF41713setDimensionsEiiii(%class.CBC_PDF417*, i32, i32, i32, i32) local_unnamed_addr #1

declare zeroext i1 @_ZN10CBC_PDF41720GenerateBarcodeLogicEN5fxcrt18StringViewTemplateIwEEi(%class.CBC_PDF417*, %"class.fxcrt::StringViewTemplate"*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

declare %class.CBC_BarcodeMatrix* @_ZN10CBC_PDF41716getBarcodeMatrixEv(%class.CBC_PDF417*) local_unnamed_addr #1

declare void @_ZN17CBC_BarcodeMatrix10toBitArrayEv(%"class.std::__1::vector.4"* sret, %class.CBC_BarcodeMatrix*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16CBC_PDF417Writer11RotateArrayEPNSt3__16vectorIh16FxAllocAllocatorIhEEEii(%class.CBC_PDF417Writer* nocapture readnone, %"class.std::__1::vector.4"* nocapture readonly, i32, i32) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.std::__1::vector.4", align 8
  %6 = bitcast %"class.std::__1::vector.4"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %5, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %5, i64 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 24, i1 false) #9
  %10 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %1, i64 0, i32 0, i32 1
  %11 = bitcast i8** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector.4"* %1 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %12, %14
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %135, label %17

17:                                               ; preds = %4
  %18 = icmp slt i64 %15, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %17
  %20 = bitcast %"class.std::__1::vector.4"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %20) #11
  unreachable

21:                                               ; preds = %17
  %22 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %15, i64 1) #9
  store i8* %22, i8** %8, align 8
  store i8* %22, i8** %7, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 %15
  store i8* %23, i8** %9, align 8
  %24 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %1, i64 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = ptrtoint i8* %25 to i64
  %27 = load i8*, i8** %10, align 8
  %28 = bitcast i8** %8 to i64*
  %29 = icmp eq i8* %25, %27
  br i1 %29, label %132, label %30

30:                                               ; preds = %21
  %31 = ptrtoint i8* %27 to i64
  %32 = sub i64 %31, %26
  %33 = icmp ult i64 %32, 32
  br i1 %33, label %122, label %34

34:                                               ; preds = %30
  %35 = ptrtoint i8* %27 to i64
  %36 = sub i64 %35, %26
  %37 = getelementptr i8, i8* %22, i64 %36
  %38 = icmp ult i8* %22, %27
  %39 = icmp ult i8* %25, %37
  %40 = and i1 %38, %39
  br i1 %40, label %122, label %41

41:                                               ; preds = %34
  %42 = and i64 %32, -32
  %43 = getelementptr i8, i8* %22, i64 %42
  %44 = getelementptr i8, i8* %25, i64 %42
  %45 = add i64 %42, -32
  %46 = lshr exact i64 %45, 5
  %47 = add nuw nsw i64 %46, 1
  %48 = and i64 %47, 3
  %49 = icmp ult i64 %45, 96
  br i1 %49, label %101, label %50

50:                                               ; preds = %41
  %51 = sub nsw i64 %47, %48
  br label %52

52:                                               ; preds = %52, %50
  %53 = phi i64 [ 0, %50 ], [ %98, %52 ]
  %54 = phi i64 [ %51, %50 ], [ %99, %52 ]
  %55 = getelementptr i8, i8* %22, i64 %53
  %56 = getelementptr i8, i8* %25, i64 %53
  %57 = bitcast i8* %56 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 1, !alias.scope !6
  %59 = getelementptr i8, i8* %56, i64 16
  %60 = bitcast i8* %59 to <16 x i8>*
  %61 = load <16 x i8>, <16 x i8>* %60, align 1, !alias.scope !6
  %62 = bitcast i8* %55 to <16 x i8>*
  store <16 x i8> %58, <16 x i8>* %62, align 1, !alias.scope !9, !noalias !6
  %63 = getelementptr i8, i8* %55, i64 16
  %64 = bitcast i8* %63 to <16 x i8>*
  store <16 x i8> %61, <16 x i8>* %64, align 1, !alias.scope !9, !noalias !6
  %65 = or i64 %53, 32
  %66 = getelementptr i8, i8* %22, i64 %65
  %67 = getelementptr i8, i8* %25, i64 %65
  %68 = bitcast i8* %67 to <16 x i8>*
  %69 = load <16 x i8>, <16 x i8>* %68, align 1, !alias.scope !6
  %70 = getelementptr i8, i8* %67, i64 16
  %71 = bitcast i8* %70 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1, !alias.scope !6
  %73 = bitcast i8* %66 to <16 x i8>*
  store <16 x i8> %69, <16 x i8>* %73, align 1, !alias.scope !9, !noalias !6
  %74 = getelementptr i8, i8* %66, i64 16
  %75 = bitcast i8* %74 to <16 x i8>*
  store <16 x i8> %72, <16 x i8>* %75, align 1, !alias.scope !9, !noalias !6
  %76 = or i64 %53, 64
  %77 = getelementptr i8, i8* %22, i64 %76
  %78 = getelementptr i8, i8* %25, i64 %76
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1, !alias.scope !6
  %81 = getelementptr i8, i8* %78, i64 16
  %82 = bitcast i8* %81 to <16 x i8>*
  %83 = load <16 x i8>, <16 x i8>* %82, align 1, !alias.scope !6
  %84 = bitcast i8* %77 to <16 x i8>*
  store <16 x i8> %80, <16 x i8>* %84, align 1, !alias.scope !9, !noalias !6
  %85 = getelementptr i8, i8* %77, i64 16
  %86 = bitcast i8* %85 to <16 x i8>*
  store <16 x i8> %83, <16 x i8>* %86, align 1, !alias.scope !9, !noalias !6
  %87 = or i64 %53, 96
  %88 = getelementptr i8, i8* %22, i64 %87
  %89 = getelementptr i8, i8* %25, i64 %87
  %90 = bitcast i8* %89 to <16 x i8>*
  %91 = load <16 x i8>, <16 x i8>* %90, align 1, !alias.scope !6
  %92 = getelementptr i8, i8* %89, i64 16
  %93 = bitcast i8* %92 to <16 x i8>*
  %94 = load <16 x i8>, <16 x i8>* %93, align 1, !alias.scope !6
  %95 = bitcast i8* %88 to <16 x i8>*
  store <16 x i8> %91, <16 x i8>* %95, align 1, !alias.scope !9, !noalias !6
  %96 = getelementptr i8, i8* %88, i64 16
  %97 = bitcast i8* %96 to <16 x i8>*
  store <16 x i8> %94, <16 x i8>* %97, align 1, !alias.scope !9, !noalias !6
  %98 = add i64 %53, 128
  %99 = add i64 %54, -4
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %52, !llvm.loop !11

101:                                              ; preds = %52, %41
  %102 = phi i64 [ 0, %41 ], [ %98, %52 ]
  %103 = icmp eq i64 %48, 0
  br i1 %103, label %120, label %104

104:                                              ; preds = %101, %104
  %105 = phi i64 [ %117, %104 ], [ %102, %101 ]
  %106 = phi i64 [ %118, %104 ], [ %48, %101 ]
  %107 = getelementptr i8, i8* %22, i64 %105
  %108 = getelementptr i8, i8* %25, i64 %105
  %109 = bitcast i8* %108 to <16 x i8>*
  %110 = load <16 x i8>, <16 x i8>* %109, align 1, !alias.scope !6
  %111 = getelementptr i8, i8* %108, i64 16
  %112 = bitcast i8* %111 to <16 x i8>*
  %113 = load <16 x i8>, <16 x i8>* %112, align 1, !alias.scope !6
  %114 = bitcast i8* %107 to <16 x i8>*
  store <16 x i8> %110, <16 x i8>* %114, align 1, !alias.scope !9, !noalias !6
  %115 = getelementptr i8, i8* %107, i64 16
  %116 = bitcast i8* %115 to <16 x i8>*
  store <16 x i8> %113, <16 x i8>* %116, align 1, !alias.scope !9, !noalias !6
  %117 = add i64 %105, 32
  %118 = add i64 %106, -1
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %104, !llvm.loop !13

120:                                              ; preds = %104, %101
  %121 = icmp eq i64 %32, %42
  br i1 %121, label %132, label %122

122:                                              ; preds = %120, %34, %30
  %123 = phi i8* [ %22, %34 ], [ %22, %30 ], [ %43, %120 ]
  %124 = phi i8* [ %25, %34 ], [ %25, %30 ], [ %44, %120 ]
  br label %125

125:                                              ; preds = %122, %125
  %126 = phi i8* [ %130, %125 ], [ %123, %122 ]
  %127 = phi i8* [ %129, %125 ], [ %124, %122 ]
  %128 = load i8, i8* %127, align 1
  store i8 %128, i8* %126, align 1
  %129 = getelementptr inbounds i8, i8* %127, i64 1
  %130 = getelementptr inbounds i8, i8* %126, i64 1
  %131 = icmp eq i8* %129, %27
  br i1 %131, label %132, label %125, !llvm.loop !15

132:                                              ; preds = %125, %120, %21
  %133 = phi i8* [ %22, %21 ], [ %43, %120 ], [ %130, %125 ]
  %134 = ptrtoint i8* %133 to i64
  store i64 %134, i64* %28, align 8
  br label %135

135:                                              ; preds = %4, %132
  %136 = icmp sgt i32 %2, 0
  br i1 %136, label %137, label %148

137:                                              ; preds = %135
  %138 = icmp sgt i32 %3, 0
  %139 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %1, i64 0, i32 0, i32 0
  %140 = sext i32 %2 to i64
  %141 = sext i32 %3 to i64
  %142 = zext i32 %2 to i64
  %143 = zext i32 %3 to i64
  %144 = and i64 %143, 1
  %145 = icmp eq i32 %3, 1
  %146 = sub nsw i64 %143, %144
  %147 = icmp eq i64 %144, 0
  br label %155

148:                                              ; preds = %174, %135
  %149 = load i8*, i8** %7, align 8
  %150 = icmp eq i8* %149, null
  br i1 %150, label %154, label %151

151:                                              ; preds = %148
  %152 = ptrtoint i8* %149 to i64
  %153 = bitcast i8** %8 to i64*
  store i64 %152, i64* %153, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %149) #9
  br label %154

154:                                              ; preds = %148, %151
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #9
  ret void

155:                                              ; preds = %174, %137
  %156 = phi i64 [ 0, %137 ], [ %175, %174 ]
  br i1 %138, label %157, label %174

157:                                              ; preds = %155
  %158 = trunc i64 %156 to i32
  %159 = xor i32 %158, -1
  %160 = add i32 %159, %2
  %161 = mul nsw i64 %156, %141
  %162 = sext i32 %160 to i64
  br i1 %145, label %163, label %177

163:                                              ; preds = %177, %157
  %164 = phi i64 [ 0, %157 ], [ %197, %177 ]
  br i1 %147, label %174, label %165

165:                                              ; preds = %163
  %166 = add nsw i64 %164, %161
  %167 = load i8*, i8** %7, align 8
  %168 = getelementptr inbounds i8, i8* %167, i64 %166
  %169 = load i8, i8* %168, align 1
  %170 = mul nsw i64 %164, %140
  %171 = add nsw i64 %170, %162
  %172 = load i8*, i8** %139, align 8
  %173 = getelementptr inbounds i8, i8* %172, i64 %171
  store i8 %169, i8* %173, align 1
  br label %174

174:                                              ; preds = %165, %163, %155
  %175 = add nuw nsw i64 %156, 1
  %176 = icmp eq i64 %175, %142
  br i1 %176, label %148, label %155

177:                                              ; preds = %157, %177
  %178 = phi i64 [ %197, %177 ], [ 0, %157 ]
  %179 = phi i64 [ %198, %177 ], [ %146, %157 ]
  %180 = add nsw i64 %178, %161
  %181 = load i8*, i8** %7, align 8
  %182 = getelementptr inbounds i8, i8* %181, i64 %180
  %183 = load i8, i8* %182, align 1
  %184 = mul nsw i64 %178, %140
  %185 = add nsw i64 %184, %162
  %186 = load i8*, i8** %139, align 8
  %187 = getelementptr inbounds i8, i8* %186, i64 %185
  store i8 %183, i8* %187, align 1
  %188 = or i64 %178, 1
  %189 = add nsw i64 %188, %161
  %190 = load i8*, i8** %7, align 8
  %191 = getelementptr inbounds i8, i8* %190, i64 %189
  %192 = load i8, i8* %191, align 1
  %193 = mul nsw i64 %188, %140
  %194 = add nsw i64 %193, %162
  %195 = load i8*, i8** %139, align 8
  %196 = getelementptr inbounds i8, i8* %195, i64 %194
  store i8 %192, i8* %196, align 1
  %197 = add nuw nsw i64 %178, 2
  %198 = add i64 %179, -2
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %163, label %177
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nounwind
declare void @_ZN10CBC_PDF417D1Ev(%class.CBC_PDF417*) unnamed_addr #2

declare zeroext i1 @_ZN10CBC_Writer15SetCharEncodingEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer15SetModuleHeightEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer14SetModuleWidthEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer9SetHeightEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer8SetWidthEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer15SetTextLocationE11BC_TEXT_LOC(%class.CBC_Writer*, i8 zeroext) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer18SetWideNarrowRatioEa(%class.CBC_Writer*, i8 signext) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer12SetStartCharEc(%class.CBC_Writer*, i8 signext) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer10SetEndCharEc(%class.CBC_Writer*, i8 signext) unnamed_addr #1

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #6

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

declare i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN6pdfium8Vector2DIh16FxAllocAllocatorIhEEENSt3__16vectorIT_T0_EEmm: argument 0"}
!5 = distinct !{!5, !"_ZN6pdfium8Vector2DIh16FxAllocAllocatorIhEEENSt3__16vectorIT_T0_EEmm"}
!6 = !{!7}
!7 = distinct !{!7, !8}
!8 = distinct !{!8, !"LVerDomain"}
!9 = !{!10}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.isvectorized", i32 1}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.unroll.disable"}
!15 = distinct !{!15, !12}
