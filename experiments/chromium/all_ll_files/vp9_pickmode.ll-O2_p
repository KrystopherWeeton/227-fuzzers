; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_pickmode.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_pickmode.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.REF_MODE = type { i8, i8 }
%struct.position = type { i32, i32 }
%struct.scan_order = type { i16*, i16*, i16* }
%struct.VP9_COMP = type { %struct.FRAME_INFO, [8 x i8], %struct.QUANTS, %struct.ThreadData, %struct.MB_MODE_INFO_EXT*, [8 x i8], [256 x [8 x i16]], [256 x [8 x i16]], %struct.VP9Common, %struct.VP9EncoderConfig, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i8, [50 x %struct.TplDepFrame], [8 x %struct.yv12_buffer_config*], [8 x %struct.EncFrameBuf], %union.pthread_mutex_t, i32, %struct.KMEANS_DATA*, i32, i32, [8 x double], [8 x double], [8 x i32], i32, %struct.TileDataEnc*, i32, i32, [3 x i32], i32, i32, i32, [8 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64*, i32, i32, double*, %struct.yv12_buffer_config, [4 x [64 x %struct.TOKENEXTRA*]], [4 x [64 x %struct.TOKENLIST*]], i64, %struct.RD_OPT, %struct.CODING_CONTEXT, [2 x i32*], [2 x i32*], [2 x i32*], [2 x i32*], i64, i64, i64, %struct.RATE_CONTROL, double, [8 x [4 x i32]], %struct.vpx_codec_pkt_list*, [25 x %struct.MBGRAPH_FRAME_STATS], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i32, i32, i32, i8*, i8*, [8 x i32], %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i32 (%struct.macroblock*, %struct.mv*, %struct.mv*, i32, i32, %struct.vp9_variance_vtable*, i32, i32, i32*, i32*, i32**, i32*, i32*, i8*, i32, i32, i32)*, %struct.scale_factors, i32 (%struct.macroblock*, %struct.search_site_config*, %struct.mv*, %struct.mv*, i32, i32, i32*, %struct.vp9_variance_vtable*, %struct.mv*)*, [13 x %struct.vp9_variance_vtable], i64, i64, i64, i64, %struct.TWO_PASS, i8, %struct.yv12_buffer_config, %struct.ALT_REF_AQ*, i32, i32, i32, i32, i32, i32, %struct.SVC, %struct.diff*, i32, i32, i32, %struct.search_site_config, [10 x i32], [7 x [4 x i32]], [2 x [10 x [10 x i32]]], [10 x [10 x [10 x i32]]], [4 x [3 x i32]], [16 x [4 x i32]], [3 x [2 x [4 x i32]]], %struct.vp9_denoiser, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.noise_estimate, i8*, [4 x i64], i64, i64, i64, i8, i32, %struct.VPxWorker*, %struct.EncWorkerData*, %struct.VP9LfSyncData, %struct.VP9BitstreamWorkerData*, i32, %struct.Vp9LevelInfo, %struct.MultiThreadHandle, void (%struct.VP9RowMTSyncData*, i32, i32)*, void (%struct.VP9RowMTSyncData*, i32, i32, i32)*, %struct.ARNRFilterData, i32, i32, i8*, i8*, i8*, i8*, i8, i8, i8*, i32, %struct.LevelConstraint, i8*, i8*, i32, %struct.vpx_roi_map, i32, %struct.EXT_RATECTRL, [8 x i8] }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PICK_MODE_CONTEXT*, %struct.PC_TREE*, %struct.PC_TREE*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], %struct.macroblockd, %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, [4 x i32], [4 x i32], i32, [4 x i32], [4 x i32], [4 x i32], [2 x i32*], [2 x i32*], i32**, [4 x i32], [2 x i32*], [2 x i32*], i32**, i32, i32, %struct.MvLimits, [4 x [256 x i8]], [4 x i32], i32, i32, [4 x [2 x [2 x [6 x [2 x [6 x [12 x i32]]]]]]], i32, i32, i32, i32, i32, [12 x i8], [12 x i64], [4 x %struct.mv], [2 x i8], i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, [25 x i8], i8, i8, void (i16*, i32*, i32)*, void (i32*, i8*, i32, i32)*, void (i32*, i16*, i32, i32, i32)*, [8 x i8], [4096 x i8], %struct.scale_factors*, [8 x i8] }
%struct.macroblock_plane = type { [4096 x i16], i32*, i32*, i16*, %struct.buf_2d, [8 x i8], [8 x i16], i16*, i16*, i16*, i16*, i16*, [2 x i64], [8 x i8] }
%struct.buf_2d = type { i8*, i32 }
%struct.macroblockd = type { [3 x %struct.macroblockd_plane], i8, i8, %struct.FRAME_COUNTS*, %struct.TileInfo, i32, %struct.MODE_INFO**, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i32, [3 x i8]*, i32, i32, i32, i32, %struct.frame_contexts*, [2 x %struct.RefBuffer*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [16 x i8]], i8*, [8 x i8], i32, i32, i32, %struct.vpx_internal_error_info*, i32* }
%struct.macroblockd_plane = type { i32*, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i16, i16, i8, i8, i16*, i32* }
%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%union.int_mv = type { i32 }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.MvLimits = type { i32, i32, i32, i32 }
%struct.mv = type { i16, i16 }
%struct.RD_COUNTS = type { [4 x [2 x [2 x [6 x [6 x [12 x i32]]]]]], [3 x i64], [4 x i64] }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.PC_TREE = type { i32, i32, i8, %struct.PICK_MODE_CONTEXT, [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT], %union.anon, %struct.mv }
%struct.PICK_MODE_CONTEXT = type { %struct.MODE_INFO, %struct.MB_MODE_INFO_EXT, i8*, [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], i32, i32, i32, i32, i32, [12 x i8], i32, i32, i32, i32, [4 x i64], i32, i64, i64, i32, i32, i32, i8, %union.int_mv, i8, i8, i32, [4 x %struct.mv], i8, i32, i8 }
%struct.MB_MODE_INFO_EXT = type { [4 x [2 x %union.int_mv]], [4 x i8] }
%union.anon = type { [4 x %struct.PC_TREE*] }
%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.VP9EncoderConfig = type { i32, i32, i32, i32, i32, double, %struct.vpx_rational, %struct.vpx_rational64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [12 x i32], [5 x i32], [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_rational = type { i32, i32 }
%struct.vpx_rational64 = type { i64, i32 }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.lookahead_ctx = type { i32, i32, i32, i32, i32, %struct.lookahead_entry* }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, i32, i32, i32, i32, i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, i64, i32, %union.int_mv }
%struct.EncFrameBuf = type { i32, i32, %struct.yv12_buffer_config }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.KMEANS_DATA = type { double, i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [13 x [30 x i32]], [13 x [30 x i8]], %struct.FIRSTPASS_DATA, %struct.VP9RowMTSyncData, i32* }
%struct.FIRSTPASS_DATA = type { double, double, i64, i64, i64, i64, i32, i32, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32 }
%struct.VP9RowMTSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.0, %union.anon.1, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.0 = type { i64 }
%union.anon.1 = type { i64 }
%struct.TOKENEXTRA = type { i8*, i16, i32 }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA*, i32 }
%struct.RD_OPT = type { [30 x i32], [6 x i32], [8 x [13 x [30 x i32]]], [4 x [3 x i64]], [4 x [4 x i64]], i32, i32, double }
%struct.CODING_CONTEXT = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [3 x i8], i8*, [4 x i8], [2 x i8], %struct.frame_contexts }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, [2 x i32], i32, i32, i32, i32, i32, [5 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, [2 x i32], [2 x i32], [5 x i32], i32, i32, [25 x i64], i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, [5 x i32], double, i32, i32, i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon.3 }
%union.anon.3 = type { %struct.anon.4, [40 x i8] }
%struct.anon.4 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.MBGRAPH_FRAME_STATS = type { %struct.MBGRAPH_MB_STATS* }
%struct.MBGRAPH_MB_STATS = type { [4 x %struct.anon.5] }
%struct.anon.5 = type { i32, %union.anon.6 }
%union.anon.6 = type { %union.int_mv }
%struct.SPEED_FEATURES = type { %struct.MV_SPEED_FEATURES, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i8, i8, i32, i32, i8, i8, i8, i32, i32, i32, i32, i32, i32, [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], [4 x i32], [13 x i32], i32, i32, i32, i32, i32, [13 x i32], i32, i32, i32, i8, i32, i32, i32, i8, i32, i32, i32, %struct.PARTITION_SEARCH_BREAKOUT_THR, %struct.anon.7, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, %struct.ADAPT_SUBPEL_FORCE_STOP, i32 }
%struct.ADAPT_SUBPEL_FORCE_STOP = type { i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.PARTITION_SEARCH_BREAKOUT_THR = type { i64, i32 }
%struct.anon.7 = type { i32, [3 x float], i32, i32, [4 x i32] }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, double, [3 x i32], i32, double, i32, i32, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.vp9_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)* }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.TWO_PASS = type { i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRST_PASS_INFO, %struct.FIRSTPASS_STATS, i32, i64, double, double, double, double, %struct.FP_MB_FLOAT_STATS*, i32, i64, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x i32], %struct.GF_GROUP }
%struct.FIRST_PASS_INFO = type { %struct.FIRSTPASS_STATS*, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64 }
%struct.FP_MB_FLOAT_STATS = type { double, double, double }
%struct.GF_GROUP = type { i8, [252 x i32], [252 x i32], [252 x i8], [252 x i8], [252 x i8], [252 x i32], [252 x i32], i32, i32, [50 x i32], i32, i32, i32, i32, i32, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ALT_REF_AQ = type opaque
%struct.SVC = type { i32, i32, i32, i32, i32, i32, %struct.lookahead_entry, i32, [25 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, i32, i32, [12 x %struct.LAYER_CONTEXT], i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [2 x %struct.BUFFER_LONGTERM_REF], i32, i32, i32, i32, [5 x i8], [5 x i32], i8*, [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, i32, i32, [5 x i32], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i32], [8 x i8], [8 x i8], [5 x i32], i8, i8, i8, [8 x i8], i32, [5 x i32], i32, [5 x i64], i64, i64, [5 x i64], i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, %struct.TWO_PASS, %struct.vpx_fixed_buf, i32, i32, i32, i32, %struct.lookahead_entry*, i32, i32, i32, i64, i32, i8*, i8*, i8*, i32, i32, i32, i8, i32 }
%struct.BUFFER_LONGTERM_REF = type { i32, i32 }
%struct.diff = type { i32, i32, i32 }
%struct.search_site_config = type { [88 x %struct.mv], [88 x i64], i32, i32 }
%struct.vp9_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VPxWorker = type { %struct.VPxWorkerImpl*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VPxWorkerImpl = type opaque
%struct.EncWorkerData = type { %struct.VP9_COMP*, %struct.ThreadData*, i32, i32, [64 x i32] }
%struct.VP9LfSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, %struct.LoopFilterWorkerData*, i32, i32, %union.pthread_mutex_t*, %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.VP9Common*, [3 x %struct.macroblockd_plane], i32, i32, i32 }
%struct.VP9BitstreamWorkerData = type opaque
%struct.Vp9LevelInfo = type { %struct.Vp9LevelStats, %struct.Vp9LevelSpec }
%struct.Vp9LevelStats = type { i8, i32, i64, i64, double, %struct.FrameWindowBuffer, i32 }
%struct.FrameWindowBuffer = type { [128 x %struct.FrameRecord], i8, i8 }
%struct.FrameRecord = type { i64, i32, i32 }
%struct.Vp9LevelSpec = type { i32, i64, i32, i32, double, double, double, i8, i32, i8 }
%struct.MultiThreadHandle = type { i32, i32, i32, [4 x i32], %struct.JobQueue*, i32, [64 x %struct.RowMTInfo], [80 x i32] }
%struct.JobQueue = type { i8*, %struct.JobNode }
%struct.JobNode = type { i32, i32, i32 }
%struct.RowMTInfo = type { %struct.JobQueueHandle, %union.pthread_mutex_t }
%struct.JobQueueHandle = type { i8*, i32 }
%struct.ARNRFilterData = type { [25 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors }
%struct.LevelConstraint = type { i8, i8, i32, double }
%struct.vpx_roi_map = type { i8, i8*, i32, i32, [8 x i32], [8 x i32], [8 x i32], [8 x i32], [4 x i32] }
%struct.EXT_RATECTRL = type { i32, i8*, %struct.vpx_rc_funcs, %struct.vpx_rc_config, %struct.vpx_rc_firstpass_stats }
%struct.vpx_rc_funcs = type { i32 (i8*, %struct.vpx_rc_config*, i8**)*, i32 (i8*, %struct.vpx_rc_firstpass_stats*)*, i32 (i8*, %struct.vpx_rc_encodeframe_info*, %struct.vpx_rc_encodeframe_decision*)*, i32 (i8*, %struct.vpx_rc_encodeframe_result*)*, i32 (i8*)*, i8* }
%struct.vpx_rc_encodeframe_info = type { i32, i32, i32, i32, [3 x i32], [3 x i32] }
%struct.vpx_rc_encodeframe_decision = type { i32 }
%struct.vpx_rc_encodeframe_result = type { i64, i64, i64 }
%struct.vpx_rc_config = type { i32, i32, i32, i32, i32, i32 }
%struct.vpx_rc_firstpass_stats = type { %struct.vpx_rc_frame_stats*, i32 }
%struct.vpx_rc_frame_stats = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%struct.RD_COST = type { i32, i64, i64 }
%struct.estimate_block_intra_args = type { %struct.VP9_COMP*, %struct.macroblock*, i8, i32, %struct.RD_COST* }
%struct.PRED_BUFFER = type { i8*, i32, i32 }

@max_txsize_lookup = external local_unnamed_addr constant [13 x i8], align 1
@tx_mode_to_biggest_tx_size = external local_unnamed_addr constant [5 x i8], align 1
@vp9_prob_cost = external local_unnamed_addr constant [256 x i16], align 16
@vp9_pick_inter_mode.flag_list = internal unnamed_addr constant [4 x i32] [i32 0, i32 1, i32 2, i32 4], align 16
@num_4x4_blocks_high_lookup = external local_unnamed_addr constant [13 x i8], align 1
@num_4x4_blocks_wide_lookup = external local_unnamed_addr constant [13 x i8], align 1
@mi_width_log2_lookup = external local_unnamed_addr constant [13 x i8], align 1
@ref_mode_set = internal unnamed_addr constant [12 x %struct.REF_MODE] [%struct.REF_MODE { i8 1, i8 12 }, %struct.REF_MODE { i8 1, i8 10 }, %struct.REF_MODE { i8 2, i8 12 }, %struct.REF_MODE { i8 1, i8 11 }, %struct.REF_MODE { i8 1, i8 13 }, %struct.REF_MODE { i8 2, i8 10 }, %struct.REF_MODE { i8 2, i8 11 }, %struct.REF_MODE { i8 2, i8 13 }, %struct.REF_MODE { i8 3, i8 12 }, %struct.REF_MODE { i8 3, i8 10 }, %struct.REF_MODE { i8 3, i8 11 }, %struct.REF_MODE { i8 3, i8 13 }], align 16
@ref_mode_set_svc = internal unnamed_addr constant [8 x %struct.REF_MODE] [%struct.REF_MODE { i8 1, i8 12 }, %struct.REF_MODE { i8 1, i8 10 }, %struct.REF_MODE { i8 1, i8 11 }, %struct.REF_MODE { i8 2, i8 12 }, %struct.REF_MODE { i8 2, i8 10 }, %struct.REF_MODE { i8 2, i8 11 }, %struct.REF_MODE { i8 1, i8 13 }, %struct.REF_MODE { i8 2, i8 13 }], align 16
@mode_idx = internal unnamed_addr constant [4 x [4 x i32]] [[4 x i32] [i32 3, i32 23, i32 22, i32 15], [4 x i32] [i32 0, i32 7, i32 10, i32 4], [4 x i32] [i32 2, i32 9, i32 11, i32 6], [4 x i32] [i32 1, i32 8, i32 12, i32 5]], align 16
@b_width_log2_lookup = external local_unnamed_addr constant [13 x i8], align 1
@b_height_log2_lookup = external local_unnamed_addr constant [13 x i8], align 1
@vpx_highbd_convolve_copy = external local_unnamed_addr global void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*, align 8
@intra_mode_list = internal unnamed_addr constant [4 x i8] c"\00\01\02\09", align 1
@vp9_filter_kernels = external local_unnamed_addr global [5 x [8 x i16]*], align 16
@txsize_to_bsize = external local_unnamed_addr constant [4 x i8], align 1
@pos_shift_16x16 = internal unnamed_addr constant [4 x [4 x i32]] [[4 x i32] [i32 9, i32 10, i32 13, i32 14], [4 x i32] [i32 11, i32 12, i32 15, i32 16], [4 x i32] [i32 17, i32 18, i32 21, i32 22], [4 x i32] [i32 19, i32 20, i32 23, i32 24]], align 16
@mv_ref_blocks = internal unnamed_addr constant [13 x [8 x %struct.position]] [[8 x %struct.position] [%struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -2, i32 0 }, %struct.position { i32 0, i32 -2 }, %struct.position { i32 -2, i32 -1 }, %struct.position { i32 -1, i32 -2 }, %struct.position { i32 -2, i32 -2 }], [8 x %struct.position] [%struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -2, i32 0 }, %struct.position { i32 0, i32 -2 }, %struct.position { i32 -2, i32 -1 }, %struct.position { i32 -1, i32 -2 }, %struct.position { i32 -2, i32 -2 }], [8 x %struct.position] [%struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -2, i32 0 }, %struct.position { i32 0, i32 -2 }, %struct.position { i32 -2, i32 -1 }, %struct.position { i32 -1, i32 -2 }, %struct.position { i32 -2, i32 -2 }], [8 x %struct.position] [%struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -2, i32 0 }, %struct.position { i32 0, i32 -2 }, %struct.position { i32 -2, i32 -1 }, %struct.position { i32 -1, i32 -2 }, %struct.position { i32 -2, i32 -2 }], [8 x %struct.position] [%struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 0 }, %struct.position { i32 1, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 0, i32 -2 }, %struct.position { i32 -2, i32 0 }, %struct.position { i32 -2, i32 -1 }, %struct.position { i32 -1, i32 -2 }], [8 x %struct.position] [%struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -2, i32 0 }, %struct.position { i32 0, i32 -2 }, %struct.position { i32 -1, i32 -2 }, %struct.position { i32 -2, i32 -1 }], [8 x %struct.position] [%struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 1 }, %struct.position { i32 1, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -3, i32 0 }, %struct.position { i32 0, i32 -3 }, %struct.position { i32 -3, i32 -3 }], [8 x %struct.position] [%struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 0 }, %struct.position { i32 2, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -1, i32 1 }, %struct.position { i32 0, i32 -3 }, %struct.position { i32 -3, i32 0 }, %struct.position { i32 -3, i32 -3 }], [8 x %struct.position] [%struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 2 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 1, i32 -1 }, %struct.position { i32 -3, i32 0 }, %struct.position { i32 0, i32 -3 }, %struct.position { i32 -3, i32 -3 }], [8 x %struct.position] [%struct.position { i32 -1, i32 1 }, %struct.position { i32 1, i32 -1 }, %struct.position { i32 -1, i32 2 }, %struct.position { i32 2, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -3, i32 0 }, %struct.position { i32 0, i32 -3 }, %struct.position { i32 -3, i32 -3 }], [8 x %struct.position] [%struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 0 }, %struct.position { i32 4, i32 -1 }, %struct.position { i32 -1, i32 2 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 0, i32 -3 }, %struct.position { i32 -3, i32 0 }, %struct.position { i32 2, i32 -1 }], [8 x %struct.position] [%struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 4 }, %struct.position { i32 2, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -3, i32 0 }, %struct.position { i32 0, i32 -3 }, %struct.position { i32 -1, i32 2 }], [8 x %struct.position] [%struct.position { i32 -1, i32 3 }, %struct.position { i32 3, i32 -1 }, %struct.position { i32 -1, i32 4 }, %struct.position { i32 4, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 6 }]], align 16
@mode_2_counter = internal unnamed_addr constant [14 x i32] [i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 0, i32 0, i32 3, i32 1], align 16
@counter_to_context = internal unnamed_addr constant [19 x i32] [i32 2, i32 3, i32 4, i32 1, i32 3, i32 9, i32 0, i32 9, i32 9, i32 5, i32 5, i32 9, i32 5, i32 9, i32 9, i32 9, i32 9, i32 9, i32 6], align 16
@__const.search_new_mv.cost_list = private unnamed_addr constant [5 x i32] [i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647], align 16
@num_pels_log2_lookup = external local_unnamed_addr constant [13 x i8], align 1
@uv_txsize_lookup = external local_unnamed_addr constant [13 x [4 x [2 x [2 x i8]]]], align 16
@vp9_default_scan_orders = external local_unnamed_addr constant [4 x %struct.scan_order], align 16
@vpx_hadamard_16x16 = external local_unnamed_addr global void (i16*, i64, i32*)*, align 8
@vp9_quantize_fp = external local_unnamed_addr global void (i32*, i64, i32, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)*, align 8
@vpx_hadamard_8x8 = external local_unnamed_addr global void (i16*, i64, i32*)*, align 8
@vpx_satd = external local_unnamed_addr global i32 (i32*, i32)*, align 8
@vp9_block_error_fp = external local_unnamed_addr global i64 (i32*, i32*, i32)*, align 8
@ss_size_lookup = external local_unnamed_addr constant [13 x [2 x [2 x i8]]], align 16
@switch.table.vp9_pick_inter_mode.3 = private unnamed_addr constant [10 x i64] [i64 0, i64 1, i64 2, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 3], align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_pick_intra_mode(%struct.VP9_COMP*, %struct.macroblock*, %struct.RD_COST* nocapture, i8 zeroext, %struct.PICK_MODE_CONTEXT* nocapture readnone) local_unnamed_addr #0 {
  %6 = alloca %struct.RD_COST, align 8
  %7 = alloca %struct.RD_COST, align 8
  %8 = alloca %struct.estimate_block_intra_args, align 8
  %9 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1
  %10 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 6
  %11 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %10, align 8
  %12 = load %struct.MODE_INFO*, %struct.MODE_INFO** %11, align 8
  %13 = bitcast %struct.RD_COST* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 24, i1 false)
  %14 = bitcast %struct.RD_COST* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 24, i1 false)
  %15 = bitcast %struct.estimate_block_intra_args* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 32, i1 false)
  %16 = getelementptr inbounds %struct.estimate_block_intra_args, %struct.estimate_block_intra_args* %8, i64 0, i32 0
  store %struct.VP9_COMP* %0, %struct.VP9_COMP** %16, align 8
  %17 = getelementptr inbounds %struct.estimate_block_intra_args, %struct.estimate_block_intra_args* %8, i64 0, i32 1
  store %struct.macroblock* %1, %struct.macroblock** %17, align 8
  %18 = getelementptr inbounds %struct.estimate_block_intra_args, %struct.estimate_block_intra_args* %8, i64 0, i32 2
  store i8 0, i8* %18, align 8
  %19 = getelementptr inbounds %struct.estimate_block_intra_args, %struct.estimate_block_intra_args* %8, i64 0, i32 3
  store i32 1, i32* %19, align 4
  %20 = getelementptr inbounds %struct.estimate_block_intra_args, %struct.estimate_block_intra_args* %8, i64 0, i32 4
  store %struct.RD_COST* null, %struct.RD_COST** %20, align 8
  %21 = zext i8 %3 to i64
  %22 = getelementptr inbounds [13 x i8], [13 x i8]* @max_txsize_lookup, i64 0, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 37
  %25 = load i32, i32* %24, align 16
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [5 x i8], [5 x i8]* @tx_mode_to_biggest_tx_size, i64 0, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = icmp ult i8 %23, %28
  %30 = select i1 %29, i8 %23, i8 %28
  %31 = load %struct.MODE_INFO*, %struct.MODE_INFO** %11, align 8
  %32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 8
  %33 = load %struct.MODE_INFO*, %struct.MODE_INFO** %32, align 8
  %34 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 7
  %35 = load %struct.MODE_INFO*, %struct.MODE_INFO** %34, align 8
  %36 = tail call zeroext i8 @vp9_above_block_mode(%struct.MODE_INFO* %31, %struct.MODE_INFO* %33, i32 0) #3
  %37 = tail call zeroext i8 @vp9_left_block_mode(%struct.MODE_INFO* %31, %struct.MODE_INFO* %35, i32 0) #3
  %38 = zext i8 %36 to i64
  %39 = zext i8 %37 to i64
  call void @vp9_rd_cost_reset(%struct.RD_COST* nonnull %7) #3
  call void @vp9_rd_cost_reset(%struct.RD_COST* nonnull %6) #3
  %40 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %12, i64 0, i32 8, i64 0
  store i8 0, i8* %40, align 4
  %41 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %12, i64 0, i32 7
  store i8 3, i8* %41, align 1
  %42 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %12, i64 0, i32 9, i64 0, i32 0
  store i32 -2147450880, i32* %42, align 4
  %43 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %12, i64 0, i32 6
  store i8 0, i8* %43, align 2
  %44 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 4 %44, i8 0, i64 12, i1 false)
  %45 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %6, i64 0, i32 0
  %46 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %6, i64 0, i32 1
  %47 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %12, i64 0, i32 2
  %48 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 73
  %49 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 15
  %50 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 14
  %51 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %6, i64 0, i32 2
  %52 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %7, i64 0, i32 2
  %53 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %12, i64 0, i32 1
  br label %54

54:                                               ; preds = %131, %5
  %55 = phi i64 [ 0, %5 ], [ %132, %131 ]
  store i32 0, i32* %45, align 8
  store i64 0, i64* %46, align 8
  %56 = trunc i64 %55 to i8
  store i8 %56, i8* %18, align 8
  store i32 1, i32* %19, align 4
  store %struct.RD_COST* %6, %struct.RD_COST** %20, align 8
  store i8 %30, i8* %47, align 2
  call void @vp9_foreach_transformed_block_in_plane(%struct.macroblockd* %9, i8 zeroext %3, i32 0, void (i32, i32, i32, i32, i8, i8, i8*)* nonnull @estimate_block_intra, i8* nonnull %15) #3
  %57 = load i32, i32* %19, align 4
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %85, label %59

59:                                               ; preds = %54
  store i8 1, i8* %44, align 4
  %60 = load %struct.frame_contexts*, %struct.frame_contexts** %48, align 8
  %61 = load %struct.MODE_INFO*, %struct.MODE_INFO** %32, align 8
  %62 = load %struct.MODE_INFO*, %struct.MODE_INFO** %34, align 8
  %63 = icmp eq %struct.MODE_INFO* %61, null
  br i1 %63, label %68, label %64

64:                                               ; preds = %59
  %65 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %61, i64 0, i32 3
  %66 = load i8, i8* %65, align 1
  %67 = sext i8 %66 to i64
  br label %68

68:                                               ; preds = %64, %59
  %69 = phi i64 [ %67, %64 ], [ 0, %59 ]
  %70 = icmp eq %struct.MODE_INFO* %62, null
  br i1 %70, label %75, label %71

71:                                               ; preds = %68
  %72 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %62, i64 0, i32 3
  %73 = load i8, i8* %72, align 1
  %74 = sext i8 %73 to i64
  br label %75

75:                                               ; preds = %68, %71
  %76 = phi i64 [ %74, %71 ], [ 0, %68 ]
  %77 = add nsw i64 %76, %69
  %78 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %60, i64 0, i32 11, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i64
  %81 = sub nuw nsw i64 256, %80
  %82 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %81
  %83 = load i16, i16* %82, align 2
  %84 = zext i16 %83 to i32
  br label %112

85:                                               ; preds = %54
  store i8 0, i8* %44, align 4
  %86 = load %struct.frame_contexts*, %struct.frame_contexts** %48, align 8
  %87 = load %struct.MODE_INFO*, %struct.MODE_INFO** %32, align 8
  %88 = load %struct.MODE_INFO*, %struct.MODE_INFO** %34, align 8
  %89 = icmp eq %struct.MODE_INFO* %87, null
  br i1 %89, label %94, label %90

90:                                               ; preds = %85
  %91 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %87, i64 0, i32 3
  %92 = load i8, i8* %91, align 1
  %93 = sext i8 %92 to i64
  br label %94

94:                                               ; preds = %90, %85
  %95 = phi i64 [ %93, %90 ], [ 0, %85 ]
  %96 = icmp eq %struct.MODE_INFO* %88, null
  br i1 %96, label %101, label %97

97:                                               ; preds = %94
  %98 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %88, i64 0, i32 3
  %99 = load i8, i8* %98, align 1
  %100 = sext i8 %99 to i64
  br label %101

101:                                              ; preds = %94, %97
  %102 = phi i64 [ %100, %97 ], [ 0, %94 ]
  %103 = add nsw i64 %102, %95
  %104 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %86, i64 0, i32 11, i64 %103
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i64
  %107 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %106
  %108 = load i16, i16* %107, align 2
  %109 = zext i16 %108 to i32
  %110 = load i32, i32* %45, align 8
  %111 = add nsw i32 %110, %109
  br label %112

112:                                              ; preds = %101, %75
  %113 = phi i32 [ %111, %101 ], [ %84, %75 ]
  %114 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 113, i64 %38, i64 %39, i64 %55
  %115 = load i32, i32* %114, align 4
  %116 = add nsw i32 %115, %113
  store i32 %116, i32* %45, align 8
  %117 = sext i32 %116 to i64
  %118 = load i32, i32* %49, align 4
  %119 = sext i32 %118 to i64
  %120 = mul nsw i64 %119, %117
  %121 = add nsw i64 %120, 256
  %122 = ashr i64 %121, 9
  %123 = load i64, i64* %46, align 8
  %124 = load i32, i32* %50, align 8
  %125 = zext i32 %124 to i64
  %126 = shl i64 %123, %125
  %127 = add nsw i64 %122, %126
  store i64 %127, i64* %51, align 8
  %128 = load i64, i64* %52, align 8
  %129 = icmp slt i64 %127, %128
  br i1 %129, label %130, label %131

130:                                              ; preds = %112
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %14, i8* nonnull align 8 %13, i64 24, i1 false)
  store i8 %56, i8* %53, align 1
  br label %131

131:                                              ; preds = %112, %130
  %132 = add nuw nsw i64 %55, 1
  %133 = icmp eq i64 %132, 3
  br i1 %133, label %134, label %54

134:                                              ; preds = %131
  %135 = bitcast %struct.RD_COST* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %135, i8* nonnull align 8 %14, i64 24, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #3
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #3
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare zeroext i8 @vp9_above_block_mode(%struct.MODE_INFO*, %struct.MODE_INFO*, i32) local_unnamed_addr #2

declare zeroext i8 @vp9_left_block_mode(%struct.MODE_INFO*, %struct.MODE_INFO*, i32) local_unnamed_addr #2

declare void @vp9_rd_cost_reset(%struct.RD_COST*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @vp9_foreach_transformed_block_in_plane(%struct.macroblockd*, i8 zeroext, i32, void (i32, i32, i32, i32, i8, i8, i8*)*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @estimate_block_intra(i32, i32, i32, i32, i8 zeroext, i8 zeroext, i8* nocapture) #0 {
  %8 = alloca %struct.RD_COST, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = bitcast i8* %6 to %struct.VP9_COMP**
  %13 = load %struct.VP9_COMP*, %struct.VP9_COMP** %12, align 8
  %14 = getelementptr inbounds i8, i8* %6, i64 8
  %15 = bitcast i8* %14 to %struct.macroblock**
  %16 = load %struct.macroblock*, %struct.macroblock** %15, align 8
  %17 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %16, i64 0, i32 1
  %18 = sext i32 %0 to i64
  %19 = zext i8 %5 to i64
  %20 = getelementptr inbounds [4 x i8], [4 x i8]* @txsize_to_bsize, i64 0, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %16, i64 0, i32 0, i64 %18, i32 4, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %16, i64 0, i32 1, i32 0, i64 %18, i32 3, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %16, i64 0, i32 0, i64 %18, i32 4, i32 1
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %16, i64 0, i32 1, i32 0, i64 %18, i32 3, i32 1
  %29 = load i32, i32* %28, align 8
  %30 = bitcast %struct.RD_COST* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %30) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 -86, i64 24, i1 false)
  %31 = sext i32 %2 to i64
  %32 = sext i32 %27 to i64
  %33 = mul nsw i64 %32, %31
  %34 = sext i32 %3 to i64
  %35 = add nsw i64 %33, %34
  %36 = shl nsw i64 %35, 2
  %37 = getelementptr inbounds i8, i8* %23, i64 %36
  store i8* %37, i8** %22, align 8
  %38 = sext i32 %29 to i64
  %39 = mul nsw i64 %38, %31
  %40 = add nsw i64 %39, %34
  %41 = shl nsw i64 %40, 2
  %42 = getelementptr inbounds i8, i8* %25, i64 %41
  store i8* %42, i8** %24, align 8
  %43 = zext i8 %4 to i64
  %44 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %43
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = getelementptr inbounds i8, i8* %6, i64 16
  %48 = load i8, i8* %47, align 8
  %49 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %16, i64 0, i32 44
  %50 = load i32, i32* %49, align 16
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %54, label %52

52:                                               ; preds = %7
  %53 = load i8*, i8** %22, align 8
  br label %54

54:                                               ; preds = %7, %52
  %55 = phi i8* [ %53, %52 ], [ %42, %7 ]
  %56 = select i1 %51, i32 %29, i32 %27
  tail call void @vp9_predict_intra_block(%struct.macroblockd* %17, i32 %46, i8 zeroext %5, i8 zeroext %48, i8* %55, i32 %56, i8* %42, i32 %29, i32 %3, i32 %2, i32 %0) #3
  %57 = icmp eq i32 %0, 0
  br i1 %57, label %58, label %64

58:                                               ; preds = %54
  %59 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %59) #3
  store i64 9223372036854775807, i64* %9, align 8
  %60 = getelementptr inbounds i8, i8* %6, i64 20
  %61 = bitcast i8* %60 to i32*
  %62 = icmp ult i8 %5, 2
  %63 = select i1 %62, i8 %5, i8 2
  call fastcc void @block_yrd(%struct.VP9_COMP* %13, %struct.macroblock* %16, %struct.RD_COST* nonnull %8, i32* %61, i64* nonnull %9, i8 zeroext %21, i8 zeroext %63, i32 0, i32 1)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %59) #3
  br label %67

64:                                               ; preds = %54
  %65 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %65) #3
  store i32 0, i32* %10, align 4
  %66 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %66) #3
  store i32 0, i32* %11, align 4
  call fastcc void @model_rd_for_sb_uv(%struct.VP9_COMP* %13, i8 zeroext %21, %struct.macroblock* %16, %struct.macroblockd* %17, %struct.RD_COST* nonnull %8, i32* nonnull %10, i32* nonnull %11, i32 %0, i32 %0)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %66) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %65) #3
  br label %67

67:                                               ; preds = %64, %58
  store i8* %23, i8** %22, align 8
  store i8* %25, i8** %24, align 8
  %68 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %8, i64 0, i32 0
  %69 = load i32, i32* %68, align 8
  %70 = getelementptr inbounds i8, i8* %6, i64 24
  %71 = bitcast i8* %70 to %struct.RD_COST**
  %72 = load %struct.RD_COST*, %struct.RD_COST** %71, align 8
  %73 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %72, i64 0, i32 0
  %74 = load i32, i32* %73, align 8
  %75 = add nsw i32 %74, %69
  store i32 %75, i32* %73, align 8
  %76 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %8, i64 0, i32 1
  %77 = load i64, i64* %76, align 8
  %78 = load %struct.RD_COST*, %struct.RD_COST** %71, align 8
  %79 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %78, i64 0, i32 1
  %80 = load i64, i64* %79, align 8
  %81 = add nsw i64 %80, %77
  store i64 %81, i64* %79, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %30) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_pick_inter_mode(%struct.VP9_COMP*, %struct.macroblock*, %struct.TileDataEnc* nocapture, i32, i32, %struct.RD_COST*, i8 zeroext, %struct.PICK_MODE_CONTEXT*) local_unnamed_addr #0 {
  %9 = alloca [3 x i32], align 4
  %10 = alloca [3 x i64], align 16
  %11 = alloca [3 x i32], align 4
  %12 = alloca [3 x i32], align 4
  %13 = alloca [3 x i32], align 4
  %14 = alloca [3 x i8], align 1
  %15 = alloca i32, align 4
  %16 = alloca [5 x i32], align 16
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i64, align 8
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca [14 x [4 x %union.int_mv]], align 16
  %25 = alloca [14 x [4 x i8]], align 16
  %26 = alloca [4 x [3 x %struct.buf_2d]], align 16
  %27 = alloca %struct.RD_COST, align 8
  %28 = alloca %struct.RD_COST, align 8
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca [4 x i32], align 16
  %32 = alloca [4 x %struct.PRED_BUFFER], align 16
  %33 = alloca [12288 x i8], align 16
  %34 = alloca [12288 x i16], align 16
  %35 = alloca [4 x i32], align 16
  %36 = alloca [3 x i32], align 4
  %37 = alloca [4 x i32], align 16
  %38 = alloca i32, align 4
  %39 = alloca i64, align 8
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %42 = alloca i64, align 8
  %43 = bitcast i64* %42 to [2 x i32]*
  %44 = alloca %struct.RD_COST, align 8
  %45 = alloca %struct.estimate_block_intra_args, align 8
  %46 = alloca i64, align 8
  %47 = alloca i32, align 4
  %48 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8
  %49 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104
  %50 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1
  %51 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 6
  %52 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %51, align 8
  %53 = load %struct.MODE_INFO*, %struct.MODE_INFO** %52, align 8
  %54 = bitcast [14 x [4 x %union.int_mv]]* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 224, i8* nonnull %54) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %54, i8 -86, i64 224, i1 false)
  %55 = getelementptr inbounds [14 x [4 x i8]], [14 x [4 x i8]]* %25, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %55) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %55, i8 -86, i64 56, i1 false)
  %56 = bitcast [4 x [3 x %struct.buf_2d]]* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %56) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %56, i8 -86, i64 192, i1 false)
  %57 = bitcast %struct.RD_COST* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %57) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %57, i8 -86, i64 24, i1 false)
  %58 = bitcast %struct.RD_COST* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %58) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %58, i8 -86, i64 24, i1 false)
  %59 = bitcast i32* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %59) #3
  store i32 -1, i32* %29, align 4
  %60 = bitcast i32* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %60) #3
  store i32 -1, i32* %30, align 4
  %61 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 38
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 39
  %64 = load i32, i32* %63, align 8
  %65 = tail call i32 @vp9_get_intra_cost_penalty(%struct.VP9_COMP* %0, i8 zeroext %6, i32 %62, i32 %64) #3
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 15
  %68 = load i32, i32* %67, align 4
  %69 = sext i32 %68 to i64
  %70 = mul nsw i64 %69, %66
  %71 = add nsw i64 %70, 256
  %72 = ashr i64 %71, 9
  %73 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 14
  %74 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %53, i64 0, i32 4
  %75 = load i8, i8* %74, align 4
  %76 = sext i8 %75 to i64
  %77 = zext i8 %6 to i64
  %78 = ashr i32 %3, 3
  %79 = mul nsw i32 %78, 13
  %80 = zext i8 %6 to i32
  %81 = add nsw i32 %79, %80
  %82 = mul nsw i32 %81, 30
  %83 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 7
  %84 = load i32, i32* %83, align 4
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %91, label %86

86:                                               ; preds = %8
  %87 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %2, i64 0, i32 5
  %88 = load i32*, i32** %87, align 8
  %89 = sext i32 %82 to i64
  %90 = getelementptr inbounds i32, i32* %88, i64 %89
  br label %93

91:                                               ; preds = %8
  %92 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %2, i64 0, i32 1, i64 %77, i64 0
  br label %93

93:                                               ; preds = %91, %86
  %94 = phi i32* [ %90, %86 ], [ %92, %91 ]
  %95 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 63
  %96 = load i8, i8* %95, align 4
  %97 = icmp eq i8 %96, 4
  %98 = zext i1 %97 to i32
  %99 = bitcast [4 x i32]* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %99) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %99, i8 0, i64 16, i1 false)
  %100 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_high_lookup, i64 0, i64 %77
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = shl nuw nsw i32 %102, 2
  %104 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_wide_lookup, i64 0, i64 %77
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = shl nuw nsw i32 %106, 2
  %108 = bitcast [4 x %struct.PRED_BUFFER]* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %108) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %108, i8 -86, i64 64, i1 false)
  %109 = getelementptr inbounds [12288 x i8], [12288 x i8]* %33, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 12288, i8* nonnull %109) #3
  %110 = bitcast [12288 x i16]* %34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24576, i8* nonnull %110) #3
  %111 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 3, i32 0
  %112 = load i8*, i8** %111, align 8
  %113 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 3, i32 1
  %114 = bitcast i32* %113 to i64*
  %115 = load i64, i64* %114, align 8
  %116 = mul nuw nsw i32 %107, %103
  %117 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 68
  %118 = load i32, i32* %117, align 8
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %124, label %120

120:                                              ; preds = %93
  %121 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %7, i64 0, i32 14
  %122 = load i32, i32* %121, align 4
  %123 = icmp ne i32 %122, 0
  br label %124

124:                                              ; preds = %93, %120
  %125 = phi i1 [ false, %93 ], [ %123, %120 ]
  %126 = bitcast [4 x i32]* %35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %126) #3
  %127 = getelementptr inbounds [4 x i32], [4 x i32]* %35, i64 0, i64 0
  %128 = getelementptr inbounds [4 x i32], [4 x i32]* %35, i64 0, i64 1
  %129 = getelementptr inbounds [4 x i32], [4 x i32]* %35, i64 0, i64 2
  %130 = getelementptr inbounds [4 x i32], [4 x i32]* %35, i64 0, i64 3
  %131 = bitcast [3 x i32]* %36 to i8*
  %132 = bitcast [4 x i32]* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %132, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %131) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %131, i8 0, i64 12, i1 false)
  %133 = bitcast [4 x i32]* %37 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %133) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %133, i8 0, i64 16, i1 false)
  %134 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %135 = load i32, i32* %134, align 4
  %136 = icmp ne i32 %135, 0
  %137 = select i1 %136, i32 8, i32 12
  %138 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 99
  %139 = load i32, i32* %138, align 4
  %140 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 71
  %141 = load i32, i32* %140, align 8
  %142 = icmp ne i32 %141, 0
  %143 = xor i1 %136, true
  %144 = or i1 %142, %143
  br i1 %144, label %149, label %145

145:                                              ; preds = %124
  %146 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 43
  %147 = load i32, i32* %146, align 8
  %148 = icmp ne i32 %147, 0
  br label %149

149:                                              ; preds = %124, %145
  %150 = phi i1 [ %142, %124 ], [ %148, %145 ]
  %151 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 0
  %152 = load i8, i8* %151, align 4
  %153 = icmp eq i8 %152, 0
  br i1 %153, label %158, label %154

154:                                              ; preds = %149
  %155 = load i8, i8* %74, align 4
  %156 = sext i8 %155 to i64
  %157 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 83, i64 %156
  br label %160

158:                                              ; preds = %149
  %159 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 80
  br label %160

160:                                              ; preds = %158, %154
  %161 = phi i32* [ %157, %154 ], [ %159, %158 ]
  %162 = load i32, i32* %161, align 4
  %163 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 40
  store i32 %162, i32* %163, align 4
  %164 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23
  store i32 -1, i32* %164, align 16
  %165 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 70
  %166 = load i8, i8* %165, align 8
  %167 = icmp eq i8 %166, 3
  %168 = select i1 %167, i8 3, i8 0
  %169 = load i32, i32* %134, align 4
  %170 = icmp eq i32 %169, 0
  %171 = getelementptr inbounds %struct.SVC, %struct.SVC* %49, i64 0, i32 0
  %172 = load i32, i32* %171, align 8
  br i1 %170, label %193, label %173

173:                                              ; preds = %160
  %174 = icmp sgt i32 %172, 0
  br i1 %174, label %177, label %175

175:                                              ; preds = %173
  %176 = getelementptr inbounds %struct.SVC, %struct.SVC* %49, i64 0, i32 0
  br label %222

177:                                              ; preds = %173
  %178 = add nsw i32 %172, -1
  %179 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 3
  %180 = load i32, i32* %179, align 4
  %181 = mul nsw i32 %180, %178
  %182 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 1
  %183 = load i32, i32* %182, align 4
  %184 = add nsw i32 %181, %183
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 12, i64 %185, i32 7
  %187 = load i32, i32* %186, align 4
  %188 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 12, i64 %185, i32 8
  %189 = load i32, i32* %188, align 8
  %190 = icmp eq i32 %187, %189
  %191 = zext i1 %190 to i32
  %192 = getelementptr inbounds %struct.SVC, %struct.SVC* %49, i64 0, i32 0
  br label %196

193:                                              ; preds = %160
  %194 = getelementptr inbounds %struct.SVC, %struct.SVC* %49, i64 0, i32 0
  %195 = icmp sgt i32 %172, 0
  br i1 %195, label %196, label %236

196:                                              ; preds = %177, %193
  %197 = phi i32* [ %192, %177 ], [ %194, %193 ]
  %198 = phi i32 [ %191, %177 ], [ 0, %193 ]
  %199 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 43
  %200 = load i32, i32* %199, align 8
  %201 = or i32 %200, %198
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %203, label %220

203:                                              ; preds = %196
  %204 = load i32, i32* %61, align 4
  %205 = icmp sgt i32 %204, 150
  br i1 %205, label %206, label %212

206:                                              ; preds = %203
  %207 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 34
  %208 = load i32, i32* %207, align 8
  %209 = add nsw i32 %208, 15
  %210 = icmp sgt i32 %204, %209
  %211 = select i1 %210, i32 100, i32 500
  br label %220

212:                                              ; preds = %203
  %213 = icmp slt i32 %204, 140
  br i1 %213, label %214, label %220

214:                                              ; preds = %212
  %215 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 34
  %216 = load i32, i32* %215, align 8
  %217 = add nsw i32 %216, -20
  %218 = icmp slt i32 %204, %217
  %219 = select i1 %218, i32 1000, i32 500
  br label %220

220:                                              ; preds = %206, %214, %196, %212
  %221 = phi i32 [ 500, %212 ], [ 0, %196 ], [ %219, %214 ], [ %211, %206 ]
  br i1 %170, label %236, label %222

222:                                              ; preds = %175, %220
  %223 = phi i32 [ 500, %175 ], [ %221, %220 ]
  %224 = phi i32 [ 0, %175 ], [ %198, %220 ]
  %225 = phi i32* [ %176, %175 ], [ %197, %220 ]
  %226 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 20
  %227 = load i32, i32* %226, align 4
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %256, label %229

229:                                              ; preds = %222
  %230 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 1
  %231 = load i32, i32* %230, align 4
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 12, i64 %232, i32 14
  %234 = load i32, i32* %233, align 4
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %236, label %256

236:                                              ; preds = %193, %229, %220
  %237 = phi i32 [ %223, %229 ], [ %221, %220 ], [ 500, %193 ]
  %238 = phi i32 [ %224, %229 ], [ %198, %220 ], [ 0, %193 ]
  %239 = phi i32* [ %225, %229 ], [ %197, %220 ], [ %194, %193 ]
  %240 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 0, i32 2, i32 0
  %241 = load i32, i32* %240, align 8
  %242 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 1, i32 2, i32 0
  %243 = load i32, i32* %242, align 8
  %244 = icmp eq i32 %241, %243
  br i1 %244, label %245, label %256

245:                                              ; preds = %236
  %246 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 0, i32 2, i32 1
  %247 = load i32, i32* %246, align 4
  %248 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 1, i32 2, i32 1
  %249 = load i32, i32* %248, align 4
  %250 = icmp eq i32 %247, %249
  br i1 %250, label %251, label %256

251:                                              ; preds = %245
  %252 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 75
  %253 = load i32, i32* %252, align 8
  %254 = icmp sgt i32 %253, 70
  %255 = select i1 %254, i32 500, i32 0
  br label %256

256:                                              ; preds = %245, %236, %251, %229, %222
  %257 = phi i32 [ %224, %229 ], [ %224, %222 ], [ %238, %245 ], [ %238, %236 ], [ %238, %251 ]
  %258 = phi i32* [ %225, %229 ], [ %225, %222 ], [ %239, %245 ], [ %239, %236 ], [ %239, %251 ]
  %259 = phi i32 [ 0, %229 ], [ 0, %222 ], [ 0, %245 ], [ 0, %236 ], [ 1, %251 ]
  %260 = phi i32 [ %223, %229 ], [ %223, %222 ], [ %237, %245 ], [ %237, %236 ], [ %255, %251 ]
  %261 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 73
  %262 = load %struct.frame_contexts*, %struct.frame_contexts** %261, align 8
  %263 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 8
  %264 = load %struct.MODE_INFO*, %struct.MODE_INFO** %263, align 8
  %265 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 7
  %266 = load %struct.MODE_INFO*, %struct.MODE_INFO** %265, align 8
  %267 = icmp ne %struct.MODE_INFO* %264, null
  %268 = icmp ne %struct.MODE_INFO* %266, null
  %269 = and i1 %267, %268
  br i1 %269, label %270, label %282

270:                                              ; preds = %256
  %271 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %264, i64 0, i32 8, i64 0
  %272 = load i8, i8* %271, align 4
  %273 = icmp sgt i8 %272, 0
  %274 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %266, i64 0, i32 8, i64 0
  %275 = load i8, i8* %274, align 4
  %276 = icmp sgt i8 %275, 0
  %277 = or i1 %273, %276
  br i1 %277, label %278, label %291

278:                                              ; preds = %270
  %279 = and i1 %273, %276
  %280 = xor i1 %279, true
  %281 = zext i1 %280 to i32
  br label %291

282:                                              ; preds = %256
  %283 = or i1 %267, %268
  br i1 %283, label %284, label %291

284:                                              ; preds = %282
  %285 = select i1 %267, %struct.MODE_INFO* %264, %struct.MODE_INFO* %266
  %286 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %285, i64 0, i32 8, i64 0
  %287 = load i8, i8* %286, align 4
  %288 = icmp slt i8 %287, 1
  %289 = zext i1 %288 to i32
  %290 = shl nuw nsw i32 %289, 1
  br label %291

291:                                              ; preds = %270, %278, %282, %284
  %292 = phi i32 [ %290, %284 ], [ %281, %278 ], [ 3, %270 ], [ 0, %282 ]
  %293 = sext i32 %292 to i64
  %294 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %262, i64 0, i32 6, i64 %293
  %295 = load i8, i8* %294, align 1
  %296 = tail call i32 @vp9_get_pred_context_single_ref_p1(%struct.macroblockd* %50) #3
  %297 = sext i32 %296 to i64
  %298 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %262, i64 0, i32 8, i64 %297, i64 0
  %299 = load i8, i8* %298, align 2
  %300 = load %struct.frame_contexts*, %struct.frame_contexts** %261, align 8
  %301 = tail call i32 @vp9_get_pred_context_single_ref_p2(%struct.macroblockd* %50) #3
  %302 = sext i32 %301 to i64
  %303 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %300, i64 0, i32 8, i64 %302, i64 1
  %304 = load i8, i8* %303, align 1
  %305 = zext i8 %295 to i64
  %306 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %305
  %307 = load i16, i16* %306, align 2
  %308 = zext i16 %307 to i32
  store i32 %308, i32* %127, align 16
  %309 = sub nuw nsw i64 256, %305
  %310 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %309
  %311 = load i16, i16* %310, align 2
  %312 = zext i16 %311 to i32
  %313 = zext i8 %299 to i64
  %314 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %313
  %315 = load i16, i16* %314, align 2
  %316 = zext i16 %315 to i32
  %317 = add nuw nsw i32 %316, %312
  store i32 %317, i32* %128, align 4
  %318 = sub nuw nsw i64 256, %313
  %319 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %318
  %320 = load i16, i16* %319, align 2
  %321 = zext i16 %320 to i32
  %322 = add nuw nsw i32 %321, %312
  %323 = zext i8 %304 to i64
  %324 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %323
  %325 = load i16, i16* %324, align 2
  %326 = zext i16 %325 to i32
  %327 = add nuw nsw i32 %322, %326
  store i32 %327, i32* %129, align 8
  %328 = sub nuw nsw i64 256, %323
  %329 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %328
  %330 = load i16, i16* %329, align 2
  %331 = zext i16 %330 to i32
  %332 = add nuw nsw i32 %322, %331
  store i32 %332, i32* %130, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %55, i8 0, i64 56, i1 false)
  br i1 %125, label %333, label %338

333:                                              ; preds = %291
  %334 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 11
  %335 = load i32, i32* %334, align 16
  %336 = icmp eq i32 %335, 0
  %337 = zext i32 %116 to i64
  br i1 %336, label %3660, label %3649

338:                                              ; preds = %3665, %291
  %339 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 9
  %340 = load i32, i32* %339, align 4
  %341 = icmp eq i32 %340, 0
  br i1 %341, label %346, label %342

342:                                              ; preds = %338
  %343 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 8
  %344 = load i32, i32* %343, align 16
  %345 = icmp slt i32 %344, 115
  br label %346

346:                                              ; preds = %338, %342
  %347 = phi i1 [ false, %338 ], [ %345, %342 ]
  %348 = zext i1 %347 to i32
  %349 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 44
  store i32 %348, i32* %349, align 16
  %350 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 39
  store i32 0, i32* %350, align 16
  %351 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 45
  %352 = load i32, i32* %351, align 4
  %353 = icmp eq i32 %352, 0
  %354 = load i8, i8* %95, align 4
  br i1 %353, label %367, label %355

355:                                              ; preds = %346
  %356 = icmp eq i8 %354, 4
  br i1 %356, label %357, label %367

357:                                              ; preds = %355
  %358 = getelementptr inbounds [13 x i8], [13 x i8]* @mi_width_log2_lookup, i64 0, i64 %77
  %359 = load i8, i8* %358, align 1
  %360 = zext i8 %359 to i32
  %361 = add nsw i32 %4, %3
  %362 = lshr i32 %361, %360
  %363 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 77
  %364 = load i32, i32* %363, align 4
  %365 = add i32 %362, %364
  %366 = and i32 %365, 1
  br label %367

367:                                              ; preds = %346, %357, %355
  %368 = phi i8 [ 4, %357 ], [ %354, %355 ], [ %354, %346 ]
  %369 = phi i32 [ %366, %357 ], [ 0, %355 ], [ %98, %346 ]
  %370 = load i8, i8* %165, align 8
  %371 = icmp eq i8 %370, 3
  br i1 %371, label %392, label %372

372:                                              ; preds = %367
  %373 = load %struct.MODE_INFO*, %struct.MODE_INFO** %263, align 8
  %374 = icmp eq %struct.MODE_INFO* %373, null
  br i1 %374, label %382, label %375

375:                                              ; preds = %372
  %376 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %373, i64 0, i32 8, i64 0
  %377 = load i8, i8* %376, align 4
  %378 = icmp slt i8 %377, 1
  br i1 %378, label %382, label %379

379:                                              ; preds = %375
  %380 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %373, i64 0, i32 7
  %381 = load i8, i8* %380, align 1
  br label %392

382:                                              ; preds = %375, %372
  %383 = load %struct.MODE_INFO*, %struct.MODE_INFO** %265, align 8
  %384 = icmp eq %struct.MODE_INFO* %383, null
  br i1 %384, label %392, label %385

385:                                              ; preds = %382
  %386 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %383, i64 0, i32 8, i64 0
  %387 = load i8, i8* %386, align 4
  %388 = icmp slt i8 %387, 1
  br i1 %388, label %392, label %389

389:                                              ; preds = %385
  %390 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %383, i64 0, i32 7
  %391 = load i8, i8* %390, align 1
  br label %392

392:                                              ; preds = %385, %382, %367, %379, %389
  %393 = phi i8 [ %381, %379 ], [ %391, %389 ], [ %368, %385 ], [ %368, %382 ], [ %368, %367 ]
  call void @vp9_rd_cost_reset(%struct.RD_COST* nonnull %28) #3
  call void @vp9_rd_cost_reset(%struct.RD_COST* %5) #3
  %394 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %53, i64 0, i32 0
  store i8 %6, i8* %394, align 4
  %395 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %53, i64 0, i32 8, i64 0
  store i8 -1, i8* %395, align 4
  %396 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %53, i64 0, i32 8, i64 1
  store i8 -1, i8* %396, align 1
  %397 = getelementptr inbounds [13 x i8], [13 x i8]* @max_txsize_lookup, i64 0, i64 %77
  %398 = load i8, i8* %397, align 1
  %399 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 37
  %400 = load i32, i32* %399, align 16
  %401 = zext i32 %400 to i64
  %402 = getelementptr inbounds [5 x i8], [5 x i8]* @tx_mode_to_biggest_tx_size, i64 0, i64 %401
  %403 = load i8, i8* %402, align 1
  %404 = icmp ult i8 %398, %403
  %405 = select i1 %404, i8 %398, i8 %403
  %406 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %53, i64 0, i32 2
  store i8 %405, i8* %406, align 2
  %407 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 78
  %408 = load i32, i32* %407, align 8
  %409 = icmp eq i32 %408, 0
  br i1 %409, label %410, label %414

410:                                              ; preds = %392
  %411 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 80
  %412 = load i32, i32* %411, align 8
  %413 = icmp eq i32 %412, 0
  br i1 %413, label %447, label %414

414:                                              ; preds = %410, %392
  %415 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 18
  %416 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %415, align 8
  %417 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %416, i64 0, i32 29
  %418 = load i32, i32* %417, align 8
  %419 = and i32 %418, 8
  %420 = icmp eq i32 %419, 0
  %421 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 4
  br i1 %420, label %426, label %422

422:                                              ; preds = %414
  %423 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 23
  %424 = load i32, i32* %423, align 8
  %425 = call i32 @vp9_high_get_sby_perpixel_variance(%struct.VP9_COMP* %0, %struct.buf_2d* %421, i8 zeroext %6, i32 %424) #3
  br label %428

426:                                              ; preds = %414
  %427 = call i32 @vp9_get_sby_perpixel_variance(%struct.VP9_COMP* %0, %struct.buf_2d* %421, i8 zeroext %6) #3
  br label %428

428:                                              ; preds = %426, %422
  %429 = phi i32 [ %427, %426 ], [ %425, %422 ]
  store i32 %429, i32* %164, align 16
  %430 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 62
  %431 = load i32, i32* %430, align 4
  %432 = icmp eq i32 %431, 1
  br i1 %432, label %433, label %447

433:                                              ; preds = %428
  %434 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 31
  %435 = load i32, i32* %434, align 4
  %436 = icmp eq i32 %435, 3
  br i1 %436, label %437, label %447

437:                                              ; preds = %433
  %438 = load i8, i8* %74, align 4
  %439 = icmp sgt i8 %438, 0
  br i1 %439, label %440, label %447

440:                                              ; preds = %437
  %441 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 59
  %442 = load i32, i32* %441, align 16
  %443 = icmp ne i32 %442, 0
  %444 = icmp eq i32 %429, 0
  %445 = and i1 %444, %443
  br i1 %445, label %446, label %447

446:                                              ; preds = %440
  store i8 0, i8* %74, align 4
  call void @vp9_init_plane_quantizers(%struct.VP9_COMP* %0, %struct.macroblock* %1) #3
  br label %447

447:                                              ; preds = %440, %410, %428, %433, %437, %446
  %448 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 9
  %449 = load i32, i32* %448, align 16
  %450 = icmp sgt i32 %449, 0
  br i1 %450, label %451, label %464

451:                                              ; preds = %447
  %452 = load i32, i32* %134, align 4
  %453 = icmp eq i32 %452, 0
  br i1 %453, label %456, label %454

454:                                              ; preds = %451
  %455 = call i32 @vp9_denoise_svc_non_key(%struct.VP9_COMP* %0) #3
  br label %456

456:                                              ; preds = %451, %454
  %457 = phi i32 [ %455, %454 ], [ 1, %451 ]
  %458 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 8
  %459 = load i32, i32* %458, align 4
  %460 = icmp ne i32 %459, 0
  %461 = icmp ne i32 %457, 0
  %462 = and i1 %461, %460
  br i1 %462, label %463, label %464

463:                                              ; preds = %456
  call void @vp9_denoiser_reset_frame_stats(%struct.PICK_MODE_CONTEXT* %7) #3
  br label %464

464:                                              ; preds = %456, %463, %447
  %465 = phi i32 [ %457, %463 ], [ %457, %456 ], [ 1, %447 ]
  %466 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 11
  %467 = load i32, i32* %466, align 8
  %468 = icmp eq i32 %467, 0
  %469 = icmp ne i32 %259, 0
  %470 = and i1 %469, %468
  br i1 %470, label %471, label %479

471:                                              ; preds = %464
  %472 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 69
  %473 = load i32, i32* %472, align 8
  %474 = icmp eq i32 %473, 0
  br i1 %474, label %475, label %479

475:                                              ; preds = %471
  %476 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 70
  %477 = load i32, i32* %476, align 4
  %478 = icmp eq i32 %477, 0
  br i1 %478, label %480, label %479

479:                                              ; preds = %475, %471, %464
  br label %480

480:                                              ; preds = %475, %479
  %481 = phi i8 [ 2, %479 ], [ 1, %475 ]
  %482 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 19
  %483 = load i32, i32* %482, align 8
  %484 = icmp sgt i32 %483, 0
  br i1 %484, label %485, label %512

485:                                              ; preds = %480
  %486 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 20
  %487 = load i32, i32* %486, align 4
  %488 = icmp eq i32 %487, 0
  br i1 %488, label %489, label %512

489:                                              ; preds = %485
  %490 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 69
  %491 = load i32, i32* %490, align 8
  %492 = icmp eq i32 %491, 0
  %493 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 24
  %494 = load i32, i32* %493, align 4
  %495 = icmp eq i32 %494, 0
  %496 = select i1 %492, i8 %481, i8 3
  br i1 %495, label %500, label %497

497:                                              ; preds = %489
  %498 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 1, i32* %498, align 4
  %499 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 2
  store i32 1, i32* %499, align 8
  br label %500

500:                                              ; preds = %489, %497
  %501 = phi i8 [ 3, %497 ], [ %496, %489 ]
  %502 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 24
  %503 = load i32, i32* %502, align 16
  %504 = icmp eq i32 %503, 0
  br i1 %504, label %505, label %512

505:                                              ; preds = %500
  %506 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 19
  %507 = load i32, i32* %506, align 8
  %508 = icmp eq i32 %507, 1
  br i1 %508, label %509, label %512

509:                                              ; preds = %505
  %510 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 2
  store i32 1, i32* %510, align 8
  %511 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 3
  store i32 1, i32* %511, align 4
  br label %512

512:                                              ; preds = %500, %509, %505, %485, %480
  %513 = phi i8 [ %501, %500 ], [ 1, %509 ], [ %501, %505 ], [ %481, %485 ], [ %481, %480 ]
  %514 = load i32, i32* %134, align 4
  %515 = icmp eq i32 %514, 0
  br i1 %515, label %561, label %516

516:                                              ; preds = %512
  %517 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 18
  %518 = load i32, i32* %517, align 4
  %519 = icmp eq i32 %518, 0
  br i1 %519, label %561, label %520

520:                                              ; preds = %516
  %521 = load i32, i32* %258, align 8
  %522 = icmp slt i32 %521, 1
  %523 = or i1 %469, %522
  br i1 %523, label %561, label %524

524:                                              ; preds = %520
  %525 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 74
  %526 = load i32, i32* %525, align 16
  %527 = and i32 %526, 1
  %528 = icmp eq i32 %527, 0
  br i1 %528, label %543, label %529

529:                                              ; preds = %524
  %530 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 0, i32 2, i32 0
  %531 = load i32, i32* %530, align 8
  %532 = icmp eq i32 %531, -1
  br i1 %532, label %543, label %533

533:                                              ; preds = %529
  %534 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 0, i32 2, i32 1
  %535 = load i32, i32* %534, align 4
  %536 = icmp eq i32 %535, -1
  br i1 %536, label %543, label %537

537:                                              ; preds = %533
  %538 = icmp eq i32 %531, 16384
  %539 = icmp eq i32 %535, 16384
  %540 = and i1 %538, %539
  br i1 %540, label %543, label %541

541:                                              ; preds = %537
  %542 = getelementptr inbounds [3 x i32], [3 x i32]* %36, i64 0, i64 0
  store i32 1, i32* %542, align 4
  br label %543

543:                                              ; preds = %537, %529, %533, %541, %524
  %544 = phi i8 [ 2, %524 ], [ 1, %541 ], [ 2, %533 ], [ 2, %529 ], [ 2, %537 ]
  %545 = and i32 %526, 2
  %546 = icmp eq i32 %545, 0
  br i1 %546, label %561, label %547

547:                                              ; preds = %543
  %548 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 1, i32 2, i32 0
  %549 = load i32, i32* %548, align 8
  %550 = icmp eq i32 %549, -1
  br i1 %550, label %561, label %551

551:                                              ; preds = %547
  %552 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 1, i32 2, i32 1
  %553 = load i32, i32* %552, align 4
  %554 = icmp eq i32 %553, -1
  br i1 %554, label %561, label %555

555:                                              ; preds = %551
  %556 = icmp eq i32 %549, 16384
  %557 = icmp eq i32 %553, 16384
  %558 = and i1 %556, %557
  br i1 %558, label %561, label %559

559:                                              ; preds = %555
  %560 = getelementptr inbounds [3 x i32], [3 x i32]* %36, i64 0, i64 1
  store i32 1, i32* %560, align 4
  br label %561

561:                                              ; preds = %555, %547, %551, %559, %543, %516, %512, %520
  %562 = phi i32 [ 0, %520 ], [ 0, %543 ], [ 0, %516 ], [ 0, %512 ], [ 1, %559 ], [ 0, %551 ], [ 0, %547 ], [ 0, %555 ]
  %563 = phi i8 [ 2, %520 ], [ %544, %543 ], [ 2, %516 ], [ 2, %512 ], [ 2, %559 ], [ %544, %551 ], [ %544, %547 ], [ %544, %555 ]
  %564 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 79
  %565 = load i32, i32* %564, align 4
  %566 = icmp eq i32 %565, 0
  br i1 %566, label %689, label %567

567:                                              ; preds = %561
  %568 = and i32 %3, 7
  %569 = lshr i32 %568, 1
  %570 = and i32 %4, 7
  %571 = lshr i32 %570, 1
  switch i8 %6, label %684 [
    i8 12, label %572
    i8 11, label %576
    i8 10, label %591
    i8 9, label %606
    i8 6, label %633
    i8 8, label %642
    i8 7, label %663
  ]

572:                                              ; preds = %567
  %573 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 61, i64 0
  %574 = load i8, i8* %573, align 1
  %575 = zext i8 %574 to i32
  br label %684

576:                                              ; preds = %567
  %577 = icmp ne i32 %570, 0
  %578 = xor i1 %577, true
  %579 = icmp eq i32 %568, 0
  %580 = and i1 %579, %578
  br i1 %580, label %581, label %585

581:                                              ; preds = %576
  %582 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 61, i64 1
  %583 = load i8, i8* %582, align 1
  %584 = zext i8 %583 to i32
  br label %684

585:                                              ; preds = %576
  %586 = or i1 %579, %577
  br i1 %586, label %684, label %587

587:                                              ; preds = %585
  %588 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 61, i64 2
  %589 = load i8, i8* %588, align 1
  %590 = zext i8 %589 to i32
  br label %684

591:                                              ; preds = %567
  %592 = icmp ne i32 %570, 0
  %593 = xor i1 %592, true
  %594 = icmp eq i32 %568, 0
  %595 = and i1 %594, %593
  br i1 %595, label %596, label %600

596:                                              ; preds = %591
  %597 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 61, i64 3
  %598 = load i8, i8* %597, align 1
  %599 = zext i8 %598 to i32
  br label %684

600:                                              ; preds = %591
  %601 = and i1 %594, %592
  br i1 %601, label %602, label %684

602:                                              ; preds = %600
  %603 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 61, i64 4
  %604 = load i8, i8* %603, align 1
  %605 = zext i8 %604 to i32
  br label %684

606:                                              ; preds = %567
  %607 = icmp ne i32 %570, 0
  %608 = xor i1 %607, true
  %609 = icmp eq i32 %568, 0
  %610 = and i1 %609, %608
  br i1 %610, label %611, label %615

611:                                              ; preds = %606
  %612 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 61, i64 5
  %613 = load i8, i8* %612, align 1
  %614 = zext i8 %613 to i32
  br label %684

615:                                              ; preds = %606
  %616 = and i1 %609, %607
  br i1 %616, label %617, label %621

617:                                              ; preds = %615
  %618 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 61, i64 6
  %619 = load i8, i8* %618, align 1
  %620 = zext i8 %619 to i32
  br label %684

621:                                              ; preds = %615
  %622 = or i1 %609, %607
  br i1 %622, label %627, label %623

623:                                              ; preds = %621
  %624 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 61, i64 7
  %625 = load i8, i8* %624, align 1
  %626 = zext i8 %625 to i32
  br label %684

627:                                              ; preds = %621
  %628 = or i1 %609, %608
  br i1 %628, label %684, label %629

629:                                              ; preds = %627
  %630 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 61, i64 8
  %631 = load i8, i8* %630, align 1
  %632 = zext i8 %631 to i32
  br label %684

633:                                              ; preds = %567
  %634 = zext i32 %569 to i64
  %635 = zext i32 %571 to i64
  %636 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* @pos_shift_16x16, i64 0, i64 %634, i64 %635
  %637 = load i32, i32* %636, align 4
  %638 = sext i32 %637 to i64
  %639 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 61, i64 %638
  %640 = load i8, i8* %639, align 1
  %641 = zext i8 %640 to i32
  br label %684

642:                                              ; preds = %567
  %643 = zext i32 %569 to i64
  %644 = zext i32 %571 to i64
  %645 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* @pos_shift_16x16, i64 0, i64 %643, i64 %644
  %646 = load i32, i32* %645, align 4
  %647 = sext i32 %646 to i64
  %648 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 61, i64 %647
  %649 = load i8, i8* %648, align 1
  %650 = icmp eq i8 %649, 0
  br i1 %650, label %684, label %651

651:                                              ; preds = %642
  %652 = add nsw i32 %4, 2
  %653 = lshr i32 %652, 1
  %654 = and i32 %653, 3
  %655 = zext i32 %654 to i64
  %656 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* @pos_shift_16x16, i64 0, i64 %643, i64 %655
  %657 = load i32, i32* %656, align 4
  %658 = sext i32 %657 to i64
  %659 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 61, i64 %658
  %660 = load i8, i8* %659, align 1
  %661 = icmp ne i8 %660, 0
  %662 = zext i1 %661 to i32
  br label %684

663:                                              ; preds = %567
  %664 = zext i32 %569 to i64
  %665 = zext i32 %571 to i64
  %666 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* @pos_shift_16x16, i64 0, i64 %664, i64 %665
  %667 = load i32, i32* %666, align 4
  %668 = sext i32 %667 to i64
  %669 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 61, i64 %668
  %670 = load i8, i8* %669, align 1
  %671 = icmp eq i8 %670, 0
  br i1 %671, label %684, label %672

672:                                              ; preds = %663
  %673 = add nsw i32 %3, 2
  %674 = lshr i32 %673, 1
  %675 = and i32 %674, 3
  %676 = zext i32 %675 to i64
  %677 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* @pos_shift_16x16, i64 0, i64 %676, i64 %665
  %678 = load i32, i32* %677, align 4
  %679 = sext i32 %678 to i64
  %680 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 61, i64 %679
  %681 = load i8, i8* %680, align 1
  %682 = icmp ne i8 %681, 0
  %683 = zext i1 %682 to i32
  br label %684

684:                                              ; preds = %567, %572, %581, %585, %587, %596, %600, %602, %611, %617, %623, %627, %629, %633, %642, %651, %663, %672
  %685 = phi i32 [ %575, %572 ], [ 0, %585 ], [ %590, %587 ], [ %584, %581 ], [ %605, %602 ], [ 0, %600 ], [ %599, %596 ], [ %632, %629 ], [ 0, %627 ], [ %626, %623 ], [ %620, %617 ], [ %614, %611 ], [ %641, %633 ], [ 0, %642 ], [ %662, %651 ], [ 0, %567 ], [ 0, %663 ], [ %683, %672 ]
  switch i32 %565, label %689 [
    i32 1, label %686
    i32 3, label %686
  ]

686:                                              ; preds = %684, %684
  %687 = icmp eq i32 %685, 0
  %688 = select i1 %687, i8 %513, i8 1
  br label %689

689:                                              ; preds = %686, %684, %561
  %690 = phi i8 [ %513, %561 ], [ %513, %684 ], [ %688, %686 ]
  %691 = phi i32 [ 0, %561 ], [ %685, %684 ], [ %685, %686 ]
  %692 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 94
  %693 = load i32, i32* %692, align 8
  %694 = icmp eq i32 %693, 0
  br i1 %694, label %704, label %695

695:                                              ; preds = %689
  %696 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 60
  %697 = load i8, i8* %696, align 4
  %698 = icmp eq i8 %697, 6
  br i1 %698, label %699, label %703

699:                                              ; preds = %695
  %700 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 75
  %701 = load i32, i32* %700, align 8
  %702 = icmp slt i32 %701, 60
  br i1 %702, label %703, label %704

703:                                              ; preds = %695, %699
  br label %704

704:                                              ; preds = %689, %703, %699
  %705 = phi i8 [ 1, %703 ], [ %690, %699 ], [ %690, %689 ]
  %706 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 74
  %707 = load i32, i32* %706, align 16
  %708 = and i32 %707, 2
  %709 = icmp ne i32 %708, 0
  %710 = or i32 %562, %691
  %711 = icmp eq i32 %710, 0
  %712 = and i1 %709, %711
  %713 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 11
  %714 = load i32, i32* %713, align 8
  %715 = icmp slt i32 %714, 8
  %716 = xor i1 %515, true
  %717 = or i1 %715, %716
  br i1 %717, label %729, label %718

718:                                              ; preds = %704
  %719 = add nsw i32 %467, 1
  %720 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 54
  %721 = load i8, i8* %720, align 1
  %722 = zext i8 %721 to i32
  %723 = icmp slt i32 %719, %722
  %724 = icmp ugt i8 %721, 40
  %725 = or i1 %724, %723
  %726 = icmp sgt i32 %467, 120
  %727 = or i1 %726, %725
  %728 = select i1 %727, i8 1, i8 %705
  br label %729

729:                                              ; preds = %704, %718
  %730 = phi i8 [ %705, %704 ], [ %728, %718 ]
  %731 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 72
  %732 = load i32, i32* %731, align 16
  %733 = icmp eq i32 %732, 2
  br i1 %733, label %734, label %741

734:                                              ; preds = %729
  %735 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 89
  %736 = load i32, i32* %735, align 4
  %737 = icmp ne i32 %736, 0
  %738 = icmp eq i8 %730, 3
  %739 = and i1 %738, %737
  %740 = select i1 %739, i32 2, i32 0
  br label %741

741:                                              ; preds = %734, %729
  %742 = phi i32 [ 0, %729 ], [ %740, %734 ]
  %743 = load i8, i8* %151, align 4
  %744 = icmp eq i8 %743, 0
  br i1 %744, label %758, label %745

745:                                              ; preds = %741
  %746 = load i8, i8* %74, align 4
  %747 = sext i8 %746 to i64
  %748 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 8, i64 %747
  %749 = load i32, i32* %748, align 4
  %750 = and i32 %749, 4
  %751 = icmp eq i32 %750, 0
  br i1 %751, label %758, label %752

752:                                              ; preds = %745
  %753 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 7, i64 %747, i64 2
  %754 = load i16, i16* %753, align 2
  %755 = icmp eq i16 %754, 2
  br i1 %755, label %756, label %758

756:                                              ; preds = %752
  %757 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 2
  store i32 0, i32* %757, align 8
  br label %758

758:                                              ; preds = %752, %756, %745, %741
  %759 = phi i8 [ 2, %756 ], [ %730, %752 ], [ %730, %745 ], [ %730, %741 ]
  %760 = phi i32 [ 0, %756 ], [ %260, %752 ], [ %260, %745 ], [ %260, %741 ]
  %761 = lshr exact i32 %742, 1
  %762 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 37
  %763 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 36
  %764 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 38
  %765 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 89
  %766 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  %767 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 56
  %768 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 24
  %769 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %770 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %771 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %2, i64 0, i32 0, i32 2
  %772 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %2, i64 0, i32 0, i32 3
  %773 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 5
  %774 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 1
  %775 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 13
  %776 = ashr i32 %4, 1
  %777 = ashr i32 %3, 1
  %778 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %779 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 12
  %780 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 13
  %781 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 14
  %782 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 15
  %783 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 29
  %784 = icmp ugt i8 %6, 2
  %785 = icmp ne i32 %691, 0
  br label %786

786:                                              ; preds = %1252, %758
  %787 = phi i32 [ %707, %758 ], [ %1253, %1252 ]
  %788 = phi i8 [ 1, %758 ], [ %1250, %1252 ]
  %789 = phi i32 [ 0, %758 ], [ %1249, %1252 ]
  %790 = sext i8 %788 to i64
  %791 = getelementptr inbounds [4 x i32], [4 x i32]* @vp9_pick_inter_mode.flag_list, i64 0, i64 %790
  %792 = load i32, i32* %791, align 4
  %793 = and i32 %792, %787
  %794 = icmp eq i32 %793, 0
  %795 = zext i1 %794 to i32
  %796 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 %790
  store i32 %795, i32* %796, align 4
  br i1 %794, label %1248, label %797

797:                                              ; preds = %786
  switch i8 %788, label %799 [
    i8 1, label %800
    i8 2, label %798
  ]

798:                                              ; preds = %797
  br label %800

799:                                              ; preds = %797
  br label %800

800:                                              ; preds = %797, %799, %798
  %801 = phi i32* [ %762, %798 ], [ %764, %799 ], [ %763, %797 ]
  %802 = load i32, i32* %801, align 4
  %803 = icmp eq i32 %802, -1
  br i1 %803, label %813, label %804

804:                                              ; preds = %800
  %805 = sext i32 %802 to i64
  %806 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 15, i64 %805
  %807 = load i32, i32* %806, align 4
  %808 = icmp eq i32 %807, -1
  br i1 %808, label %813, label %809

809:                                              ; preds = %804
  %810 = load %struct.BufferPool*, %struct.BufferPool** %765, align 8
  %811 = sext i32 %807 to i64
  %812 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %810, i64 0, i32 3, i64 %811, i32 8
  br label %813

813:                                              ; preds = %809, %804, %800
  %814 = phi %struct.yv12_buffer_config* [ %812, %809 ], [ null, %804 ], [ null, %800 ]
  %815 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 25, i64 %790
  store i32 2147483647, i32* %815, align 4
  %816 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 13, i64 %790
  %817 = getelementptr inbounds %union.int_mv, %union.int_mv* %816, i64 0, i32 0
  store i32 -2147450880, i32* %817, align 4
  %818 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 12, i64 %790, i32 0
  store i32 0, i32* %818, align 4
  %819 = load i32, i32* %706, align 16
  %820 = and i32 %819, %792
  %821 = icmp ne i32 %820, 0
  %822 = icmp ne %struct.yv12_buffer_config* %814, null
  %823 = and i1 %822, %821
  br i1 %823, label %824, label %1244

824:                                              ; preds = %813
  %825 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %766, align 16
  %826 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %825, i64 0, i32 0, i64 %790, i64 0
  %827 = sext i8 %788 to i32
  %828 = add nsw i32 %827, -1
  %829 = sext i32 %828 to i64
  %830 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 %829, i32 2
  %831 = getelementptr inbounds [4 x [3 x %struct.buf_2d]], [4 x [3 x %struct.buf_2d]]* %26, i64 0, i64 %790, i64 0
  call void @vp9_setup_pred_block(%struct.macroblockd* %50, %struct.buf_2d* %831, %struct.yv12_buffer_config* nonnull %814, i32 %3, i32 %4, %struct.scale_factors* %830, %struct.scale_factors* %830) #3
  %832 = load i32, i32* %767, align 16
  %833 = or i32 %832, %761
  %834 = icmp eq i32 %833, 0
  %835 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %51, align 8
  %836 = load %struct.MODE_INFO*, %struct.MODE_INFO** %835, align 8
  br i1 %834, label %840, label %837

837:                                              ; preds = %824
  %838 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %766, align 16
  %839 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %838, i64 0, i32 1, i64 0
  call void @vp9_find_mv_refs(%struct.VP9Common* %48, %struct.macroblockd* %50, %struct.MODE_INFO* %836, i8 signext %788, %union.int_mv* %826, i32 %3, i32 %4, i8* %839) #3
  br label %1217

840:                                              ; preds = %824
  %841 = load i32, i32* %768, align 16
  %842 = icmp eq i32 %841, 0
  br i1 %842, label %847, label %843

843:                                              ; preds = %840
  %844 = load i32, i32* %769, align 16
  %845 = icmp ne i32 %844, 0
  %846 = zext i1 %845 to i32
  br label %847

847:                                              ; preds = %843, %840
  %848 = phi i32 [ 0, %840 ], [ %846, %843 ]
  %849 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %836, i64 0, i32 0
  %850 = load i8, i8* %849, align 4
  %851 = zext i8 %850 to i64
  %852 = bitcast %union.int_mv* %826 to i64*
  store i64 0, i64* %852, align 4
  %853 = getelementptr inbounds %union.int_mv, %union.int_mv* %826, i64 0, i32 0
  %854 = getelementptr inbounds [13 x [8 x %struct.position]], [13 x [8 x %struct.position]]* @mv_ref_blocks, i64 0, i64 %851, i64 0, i32 0
  %855 = load i32, i32* %854, align 16
  %856 = add nsw i32 %855, %3
  %857 = icmp slt i32 %856, 0
  br i1 %857, label %897, label %863

858:                                              ; preds = %1155, %1153, %1132, %1129, %1120, %897
  %859 = phi i32 [ %898, %1129 ], [ %898, %1120 ], [ %898, %897 ], [ %898, %1153 ], [ %1152, %1155 ], [ %898, %1132 ]
  %860 = phi i32 [ %899, %1129 ], [ %899, %1120 ], [ %899, %897 ], [ %1145, %1153 ], [ %1145, %1155 ], [ %1145, %1132 ]
  %861 = phi i32 [ %900, %1129 ], [ %900, %1120 ], [ %900, %897 ], [ 1, %1153 ], [ 1, %1155 ], [ 1, %1132 ]
  %862 = phi i32 [ %901, %1129 ], [ %901, %1120 ], [ %901, %897 ], [ 1, %1153 ], [ 1, %1155 ], [ %901, %1132 ]
  br label %906

863:                                              ; preds = %847
  %864 = load i32, i32* %770, align 16
  %865 = getelementptr inbounds [13 x [8 x %struct.position]], [13 x [8 x %struct.position]]* @mv_ref_blocks, i64 0, i64 %851, i64 0, i32 1
  %866 = load i32, i32* %865, align 4
  %867 = add nsw i32 %866, %4
  %868 = load i32, i32* %771, align 4
  %869 = icmp sge i32 %867, %868
  %870 = icmp slt i32 %856, %864
  %871 = and i1 %870, %869
  br i1 %871, label %872, label %897

872:                                              ; preds = %863
  %873 = load i32, i32* %772, align 4
  %874 = icmp slt i32 %867, %873
  br i1 %874, label %875, label %897

875:                                              ; preds = %872
  %876 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %51, align 8
  %877 = load i32, i32* %773, align 8
  %878 = mul nsw i32 %877, %855
  %879 = add nsw i32 %878, %866
  %880 = sext i32 %879 to i64
  %881 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %876, i64 %880
  %882 = load %struct.MODE_INFO*, %struct.MODE_INFO** %881, align 8
  %883 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %882, i64 0, i32 1
  %884 = load i8, i8* %883, align 1
  %885 = zext i8 %884 to i64
  %886 = getelementptr inbounds [14 x i32], [14 x i32]* @mode_2_counter, i64 0, i64 %885
  %887 = load i32, i32* %886, align 4
  %888 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %882, i64 0, i32 8, i64 0
  %889 = load i8, i8* %888, align 4
  %890 = icmp eq i8 %889, %788
  br i1 %890, label %891, label %897

891:                                              ; preds = %875
  %892 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %882, i64 0, i32 9, i64 0, i32 0
  %893 = load i32, i32* %892, align 4
  store i32 %893, i32* %853, align 4
  br label %897

894:                                              ; preds = %1153
  %895 = zext i32 %901 to i64
  %896 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %825, i64 0, i32 0, i64 %790, i64 %895, i32 0
  store i32 %1152, i32* %896, align 4
  br label %1156

897:                                              ; preds = %891, %875, %872, %863, %847
  %898 = phi i32 [ 0, %872 ], [ 0, %863 ], [ 0, %847 ], [ %893, %891 ], [ 0, %875 ]
  %899 = phi i32 [ 0, %872 ], [ 0, %863 ], [ 0, %847 ], [ %887, %891 ], [ %887, %875 ]
  %900 = phi i32 [ 0, %872 ], [ 0, %863 ], [ 0, %847 ], [ 1, %891 ], [ 1, %875 ]
  %901 = phi i32 [ 0, %872 ], [ 0, %863 ], [ 0, %847 ], [ 1, %891 ], [ 0, %875 ]
  %902 = getelementptr inbounds [13 x [8 x %struct.position]], [13 x [8 x %struct.position]]* @mv_ref_blocks, i64 0, i64 %851, i64 1, i32 0
  %903 = load i32, i32* %902, align 8
  %904 = add nsw i32 %903, %3
  %905 = icmp slt i32 %904, 0
  br i1 %905, label %858, label %1120

906:                                              ; preds = %943, %858
  %907 = phi i32 [ %859, %858 ], [ %944, %943 ]
  %908 = phi i64 [ 2, %858 ], [ %947, %943 ]
  %909 = phi i32 [ %862, %858 ], [ %946, %943 ]
  %910 = phi i32 [ %861, %858 ], [ %945, %943 ]
  %911 = icmp eq i32 %909, 0
  br i1 %911, label %912, label %1066

912:                                              ; preds = %906
  %913 = getelementptr inbounds [13 x [8 x %struct.position]], [13 x [8 x %struct.position]]* @mv_ref_blocks, i64 0, i64 %851, i64 %908, i32 0
  %914 = load i32, i32* %913, align 8
  %915 = add nsw i32 %914, %3
  %916 = icmp slt i32 %915, 0
  br i1 %916, label %943, label %917

917:                                              ; preds = %912
  %918 = load i32, i32* %770, align 16
  %919 = getelementptr inbounds [13 x [8 x %struct.position]], [13 x [8 x %struct.position]]* @mv_ref_blocks, i64 0, i64 %851, i64 %908, i32 1
  %920 = load i32, i32* %919, align 4
  %921 = add nsw i32 %920, %4
  %922 = load i32, i32* %771, align 4
  %923 = icmp sge i32 %921, %922
  %924 = icmp slt i32 %915, %918
  %925 = and i1 %924, %923
  br i1 %925, label %926, label %943

926:                                              ; preds = %917
  %927 = load i32, i32* %772, align 4
  %928 = icmp slt i32 %921, %927
  br i1 %928, label %929, label %943

929:                                              ; preds = %926
  %930 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %51, align 8
  %931 = load i32, i32* %773, align 8
  %932 = mul nsw i32 %931, %914
  %933 = add nsw i32 %932, %920
  %934 = sext i32 %933 to i64
  %935 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %930, i64 %934
  %936 = load %struct.MODE_INFO*, %struct.MODE_INFO** %935, align 8
  %937 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %936, i64 0, i32 8, i64 0
  %938 = load i8, i8* %937, align 4
  %939 = icmp eq i8 %938, %788
  br i1 %939, label %940, label %943

940:                                              ; preds = %929
  %941 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %936, i64 0, i32 9, i64 0, i32 0
  %942 = load i32, i32* %941, align 4
  store i32 %942, i32* %853, align 4
  br label %943

943:                                              ; preds = %940, %929, %926, %917, %912
  %944 = phi i32 [ %907, %926 ], [ %907, %929 ], [ %942, %940 ], [ %907, %917 ], [ %907, %912 ]
  %945 = phi i32 [ %910, %926 ], [ 1, %929 ], [ 1, %940 ], [ %910, %917 ], [ %910, %912 ]
  %946 = phi i32 [ 0, %926 ], [ 0, %929 ], [ 1, %940 ], [ 0, %917 ], [ 0, %912 ]
  %947 = add nuw nsw i64 %908, 1
  %948 = icmp eq i64 %947, 8
  br i1 %948, label %949, label %906

949:                                              ; preds = %943
  %950 = icmp eq i32 %945, 0
  %951 = icmp ne i32 %946, 0
  %952 = or i1 %950, %951
  br i1 %952, label %1066, label %953

953:                                              ; preds = %949
  %954 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 67, i64 %790
  br label %955

955:                                              ; preds = %1063, %953
  %956 = phi i32 [ %944, %953 ], [ %1058, %1063 ]
  %957 = phi i32 [ %944, %953 ], [ %1059, %1063 ]
  %958 = phi i32 [ %855, %953 ], [ %1065, %1063 ]
  %959 = phi i64 [ 0, %953 ], [ %1061, %1063 ]
  %960 = phi i32 [ 0, %953 ], [ %1060, %1063 ]
  %961 = add nsw i32 %958, %3
  %962 = icmp slt i32 %961, 0
  br i1 %962, label %1057, label %963

963:                                              ; preds = %955
  %964 = load i32, i32* %770, align 16
  %965 = getelementptr inbounds [13 x [8 x %struct.position]], [13 x [8 x %struct.position]]* @mv_ref_blocks, i64 0, i64 %851, i64 %959, i32 1
  %966 = load i32, i32* %965, align 4
  %967 = add nsw i32 %966, %4
  %968 = load i32, i32* %771, align 4
  %969 = icmp sge i32 %967, %968
  %970 = icmp slt i32 %961, %964
  %971 = and i1 %970, %969
  br i1 %971, label %972, label %1057

972:                                              ; preds = %963
  %973 = load i32, i32* %772, align 4
  %974 = icmp slt i32 %967, %973
  br i1 %974, label %975, label %1057

975:                                              ; preds = %972
  %976 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %51, align 8
  %977 = load i32, i32* %773, align 8
  %978 = mul nsw i32 %977, %958
  %979 = add nsw i32 %978, %966
  %980 = sext i32 %979 to i64
  %981 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %976, i64 %980
  %982 = load %struct.MODE_INFO*, %struct.MODE_INFO** %981, align 8
  %983 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %982, i64 0, i32 8, i64 0
  %984 = load i8, i8* %983, align 4
  %985 = icmp slt i8 %984, 1
  br i1 %985, label %1057, label %986

986:                                              ; preds = %975
  %987 = icmp eq i8 %984, %788
  br i1 %987, label %1016, label %988

988:                                              ; preds = %986
  %989 = icmp eq i32 %960, 0
  %990 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %982, i64 0, i32 9, i64 0
  %991 = bitcast %union.int_mv* %990 to i8*
  %992 = bitcast %union.int_mv* %990 to i16*
  %993 = load i16, i16* %992, align 4
  %994 = getelementptr inbounds i8, i8* %991, i64 2
  %995 = bitcast i8* %994 to i16*
  %996 = load i16, i16* %995, align 2
  %997 = sext i8 %984 to i64
  %998 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 67, i64 %997
  %999 = load i32, i32* %998, align 4
  %1000 = load i32, i32* %954, align 4
  %1001 = icmp eq i32 %999, %1000
  %1002 = sub i16 0, %993
  %1003 = sub i16 0, %996
  %1004 = select i1 %1001, i16 %993, i16 %1002
  %1005 = select i1 %1001, i16 %996, i16 %1003
  %1006 = zext i16 %1005 to i32
  %1007 = shl nuw i32 %1006, 16
  %1008 = zext i16 %1004 to i32
  %1009 = or i32 %1007, %1008
  br i1 %989, label %1015, label %1010

1010:                                             ; preds = %988
  %1011 = icmp eq i32 %1009, %957
  br i1 %1011, label %1016, label %1012

1012:                                             ; preds = %1010
  %1013 = sext i32 %960 to i64
  %1014 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %825, i64 0, i32 0, i64 %790, i64 %1013, i32 0
  store i32 %1009, i32* %1014, align 4
  br label %1156

1015:                                             ; preds = %988
  store i32 %1009, i32* %853, align 4
  br label %1016

1016:                                             ; preds = %1015, %1010, %986
  %1017 = phi i32 [ %956, %1010 ], [ %1009, %1015 ], [ %956, %986 ]
  %1018 = phi i32 [ %957, %1010 ], [ %1009, %1015 ], [ %957, %986 ]
  %1019 = phi i32 [ %960, %1010 ], [ 1, %1015 ], [ %960, %986 ]
  %1020 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %982, i64 0, i32 8, i64 1
  %1021 = load i8, i8* %1020, align 1
  %1022 = icmp slt i8 %1021, 1
  %1023 = icmp eq i8 %1021, %788
  %1024 = or i1 %1022, %1023
  br i1 %1024, label %1057, label %1025

1025:                                             ; preds = %1016
  %1026 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %982, i64 0, i32 9, i64 1, i32 0
  %1027 = load i32, i32* %1026, align 4
  %1028 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %982, i64 0, i32 9, i64 0, i32 0
  %1029 = load i32, i32* %1028, align 4
  %1030 = icmp eq i32 %1027, %1029
  br i1 %1030, label %1057, label %1031

1031:                                             ; preds = %1025
  %1032 = icmp eq i32 %1019, 0
  %1033 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %982, i64 0, i32 9, i64 1
  %1034 = bitcast %union.int_mv* %1033 to i8*
  %1035 = getelementptr inbounds i8, i8* %1034, i64 2
  %1036 = bitcast i8* %1035 to i16*
  %1037 = load i16, i16* %1036, align 2
  %1038 = sext i8 %1021 to i64
  %1039 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 67, i64 %1038
  %1040 = load i32, i32* %1039, align 4
  %1041 = load i32, i32* %954, align 4
  %1042 = icmp eq i32 %1040, %1041
  %1043 = sub i32 0, %1027
  %1044 = sub i16 0, %1037
  %1045 = select i1 %1042, i32 %1027, i32 %1043
  %1046 = select i1 %1042, i16 %1037, i16 %1044
  %1047 = zext i16 %1046 to i32
  %1048 = shl nuw i32 %1047, 16
  %1049 = and i32 %1045, 65535
  %1050 = or i32 %1048, %1049
  br i1 %1032, label %1056, label %1051

1051:                                             ; preds = %1031
  %1052 = icmp eq i32 %1050, %1017
  br i1 %1052, label %1057, label %1053

1053:                                             ; preds = %1051
  %1054 = sext i32 %1019 to i64
  %1055 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %825, i64 0, i32 0, i64 %790, i64 %1054, i32 0
  store i32 %1050, i32* %1055, align 4
  br label %1156

1056:                                             ; preds = %1031
  store i32 %1050, i32* %853, align 4
  br label %1057

1057:                                             ; preds = %1056, %1051, %1025, %1016, %975, %972, %963, %955
  %1058 = phi i32 [ %956, %972 ], [ %956, %963 ], [ %956, %955 ], [ %956, %975 ], [ %1017, %1016 ], [ %1017, %1025 ], [ %1050, %1056 ], [ %1017, %1051 ]
  %1059 = phi i32 [ %957, %972 ], [ %957, %963 ], [ %957, %955 ], [ %957, %975 ], [ %1018, %1016 ], [ %1018, %1025 ], [ %1050, %1056 ], [ %1017, %1051 ]
  %1060 = phi i32 [ %960, %972 ], [ %960, %963 ], [ %960, %955 ], [ %960, %975 ], [ %1019, %1016 ], [ %1019, %1025 ], [ 1, %1056 ], [ %1019, %1051 ]
  %1061 = add nuw nsw i64 %959, 1
  %1062 = icmp eq i64 %1061, 8
  br i1 %1062, label %1066, label %1063

1063:                                             ; preds = %1057
  %1064 = getelementptr inbounds [13 x [8 x %struct.position]], [13 x [8 x %struct.position]]* @mv_ref_blocks, i64 0, i64 %851, i64 %1061, i32 0
  %1065 = load i32, i32* %1064, align 8
  br label %955

1066:                                             ; preds = %906, %1057, %949
  %1067 = icmp eq i32 %848, 0
  br i1 %1067, label %1156, label %1068

1068:                                             ; preds = %1066
  %1069 = load i32, i32* %774, align 4
  %1070 = sext i32 %1069 to i64
  %1071 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 12, i64 %1070, i32 14
  %1072 = load i32, i32* %1071, align 4
  %1073 = icmp eq i32 %1072, 0
  %1074 = icmp eq i8 %788, 1
  %1075 = and i1 %1074, %1073
  br i1 %1075, label %1076, label %1156

1076:                                             ; preds = %1068
  %1077 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %775, align 16
  %1078 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %1077, i64 0, i32 1
  %1079 = load %struct.MV_REF*, %struct.MV_REF** %1078, align 8
  %1080 = load i32, i32* %778, align 8
  %1081 = ashr i32 %1080, 1
  %1082 = mul nsw i32 %1081, %777
  %1083 = add nsw i32 %1082, %776
  %1084 = sext i32 %1083 to i64
  %1085 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %1079, i64 %1084, i32 0, i64 0
  %1086 = getelementptr inbounds %union.int_mv, %union.int_mv* %1085, i64 0, i32 0
  %1087 = load i32, i32* %1086, align 4
  %1088 = icmp eq i32 %1087, -2147450880
  br i1 %1088, label %1119, label %1089

1089:                                             ; preds = %1076
  %1090 = trunc i32 %1087 to i16
  %1091 = bitcast %union.int_mv* %1085 to %struct.mv*
  %1092 = shl i16 %1090, 1
  %1093 = bitcast %union.int_mv* %816 to %struct.mv*
  %1094 = bitcast %union.int_mv* %816 to i16*
  store i16 %1092, i16* %1094, align 4
  %1095 = getelementptr inbounds %struct.mv, %struct.mv* %1091, i64 0, i32 1
  %1096 = load i16, i16* %1095, align 2
  %1097 = shl i16 %1096, 1
  %1098 = getelementptr inbounds %struct.mv, %struct.mv* %1093, i64 0, i32 1
  %1099 = load i32, i32* %779, align 8
  %1100 = add nsw i32 %1099, -128
  %1101 = load i32, i32* %780, align 4
  %1102 = add nsw i32 %1101, 128
  %1103 = load i32, i32* %781, align 8
  %1104 = add nsw i32 %1103, -128
  %1105 = load i32, i32* %782, align 4
  %1106 = add nsw i32 %1105, 128
  %1107 = sext i16 %1097 to i32
  %1108 = icmp sgt i32 %1100, %1107
  %1109 = icmp slt i32 %1102, %1107
  %1110 = select i1 %1109, i32 %1102, i32 %1107
  %1111 = select i1 %1108, i32 %1100, i32 %1110
  %1112 = trunc i32 %1111 to i16
  store i16 %1112, i16* %1098, align 2
  %1113 = sext i16 %1092 to i32
  %1114 = icmp sgt i32 %1104, %1113
  %1115 = icmp slt i32 %1106, %1113
  %1116 = select i1 %1115, i32 %1106, i32 %1113
  %1117 = select i1 %1114, i32 %1104, i32 %1116
  %1118 = trunc i32 %1117 to i16
  store i16 %1118, i16* %1094, align 4
  br label %1156

1119:                                             ; preds = %1076
  store i32 -2147450880, i32* %817, align 4
  br label %1156

1120:                                             ; preds = %897
  %1121 = load i32, i32* %770, align 16
  %1122 = getelementptr inbounds [13 x [8 x %struct.position]], [13 x [8 x %struct.position]]* @mv_ref_blocks, i64 0, i64 %851, i64 1, i32 1
  %1123 = load i32, i32* %1122, align 4
  %1124 = add nsw i32 %1123, %4
  %1125 = load i32, i32* %771, align 4
  %1126 = icmp sge i32 %1124, %1125
  %1127 = icmp slt i32 %904, %1121
  %1128 = and i1 %1127, %1126
  br i1 %1128, label %1129, label %858

1129:                                             ; preds = %1120
  %1130 = load i32, i32* %772, align 4
  %1131 = icmp slt i32 %1124, %1130
  br i1 %1131, label %1132, label %858

1132:                                             ; preds = %1129
  %1133 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %51, align 8
  %1134 = load i32, i32* %773, align 8
  %1135 = mul nsw i32 %1134, %903
  %1136 = add nsw i32 %1135, %1123
  %1137 = sext i32 %1136 to i64
  %1138 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %1133, i64 %1137
  %1139 = load %struct.MODE_INFO*, %struct.MODE_INFO** %1138, align 8
  %1140 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1139, i64 0, i32 1
  %1141 = load i8, i8* %1140, align 1
  %1142 = zext i8 %1141 to i64
  %1143 = getelementptr inbounds [14 x i32], [14 x i32]* @mode_2_counter, i64 0, i64 %1142
  %1144 = load i32, i32* %1143, align 4
  %1145 = add nsw i32 %1144, %899
  %1146 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1139, i64 0, i32 8, i64 0
  %1147 = load i8, i8* %1146, align 4
  %1148 = icmp eq i8 %1147, %788
  br i1 %1148, label %1149, label %858

1149:                                             ; preds = %1132
  %1150 = icmp eq i32 %901, 0
  %1151 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1139, i64 0, i32 9, i64 0, i32 0
  %1152 = load i32, i32* %1151, align 4
  br i1 %1150, label %1155, label %1153

1153:                                             ; preds = %1149
  %1154 = icmp eq i32 %1152, %898
  br i1 %1154, label %858, label %894

1155:                                             ; preds = %1149
  store i32 %1152, i32* %853, align 4
  br label %858

1156:                                             ; preds = %1119, %1089, %1068, %1066, %1053, %1012, %894
  %1157 = phi i32 [ 0, %894 ], [ 1, %1068 ], [ 1, %1066 ], [ 1, %1119 ], [ 1, %1089 ], [ 1, %1012 ], [ 1, %1053 ]
  %1158 = phi i32 [ %1145, %894 ], [ %860, %1068 ], [ %860, %1066 ], [ %860, %1119 ], [ %860, %1089 ], [ %860, %1012 ], [ %860, %1053 ]
  %1159 = sext i32 %1158 to i64
  %1160 = getelementptr inbounds [19 x i32], [19 x i32]* @counter_to_context, i64 0, i64 %1159
  %1161 = load i32, i32* %1160, align 4
  %1162 = trunc i32 %1161 to i8
  %1163 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %766, align 16
  %1164 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %1163, i64 0, i32 1, i64 %790
  store i8 %1162, i8* %1164, align 1
  %1165 = bitcast %union.int_mv* %826 to %struct.mv*
  %1166 = load i32, i32* %779, align 8
  %1167 = add nsw i32 %1166, -128
  %1168 = load i32, i32* %780, align 4
  %1169 = add nsw i32 %1168, 128
  %1170 = load i32, i32* %781, align 8
  %1171 = add nsw i32 %1170, -128
  %1172 = load i32, i32* %782, align 4
  %1173 = add nsw i32 %1172, 128
  %1174 = getelementptr inbounds %struct.mv, %struct.mv* %1165, i64 0, i32 1
  %1175 = load i16, i16* %1174, align 2
  %1176 = sext i16 %1175 to i32
  %1177 = icmp sgt i32 %1167, %1176
  %1178 = icmp slt i32 %1169, %1176
  %1179 = select i1 %1178, i32 %1169, i32 %1176
  %1180 = select i1 %1177, i32 %1167, i32 %1179
  %1181 = trunc i32 %1180 to i16
  store i16 %1181, i16* %1174, align 2
  %1182 = bitcast %union.int_mv* %826 to i16*
  %1183 = load i16, i16* %1182, align 2
  %1184 = sext i16 %1183 to i32
  %1185 = icmp sgt i32 %1171, %1184
  %1186 = icmp slt i32 %1173, %1184
  %1187 = select i1 %1186, i32 %1173, i32 %1184
  %1188 = select i1 %1185, i32 %1171, i32 %1187
  %1189 = trunc i32 %1188 to i16
  store i16 %1189, i16* %1182, align 2
  %1190 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %825, i64 0, i32 0, i64 %790, i64 1
  %1191 = bitcast %union.int_mv* %1190 to %struct.mv*
  %1192 = load i32, i32* %779, align 8
  %1193 = add nsw i32 %1192, -128
  %1194 = load i32, i32* %780, align 4
  %1195 = add nsw i32 %1194, 128
  %1196 = load i32, i32* %781, align 8
  %1197 = add nsw i32 %1196, -128
  %1198 = load i32, i32* %782, align 4
  %1199 = add nsw i32 %1198, 128
  %1200 = getelementptr inbounds %struct.mv, %struct.mv* %1191, i64 0, i32 1
  %1201 = load i16, i16* %1200, align 2
  %1202 = sext i16 %1201 to i32
  %1203 = icmp sgt i32 %1193, %1202
  %1204 = icmp slt i32 %1195, %1202
  %1205 = select i1 %1204, i32 %1195, i32 %1202
  %1206 = select i1 %1203, i32 %1193, i32 %1205
  %1207 = trunc i32 %1206 to i16
  store i16 %1207, i16* %1200, align 2
  %1208 = bitcast %union.int_mv* %1190 to i16*
  %1209 = load i16, i16* %1208, align 2
  %1210 = sext i16 %1209 to i32
  %1211 = icmp sgt i32 %1197, %1210
  %1212 = icmp slt i32 %1199, %1210
  %1213 = select i1 %1212, i32 %1199, i32 %1210
  %1214 = select i1 %1211, i32 %1197, i32 %1213
  %1215 = trunc i32 %1214 to i16
  store i16 %1215, i16* %1208, align 2
  %1216 = getelementptr inbounds [4 x i32], [4 x i32]* %31, i64 0, i64 %790
  store i32 %1157, i32* %1216, align 4
  br label %1217

1217:                                             ; preds = %1156, %837
  %1218 = load i32, i32* %783, align 16
  %1219 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 10, i64 %790
  %1220 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 11, i64 %790
  call void @vp9_find_best_ref_mvs(%struct.macroblockd* %50, i32 %1218, %union.int_mv* %826, %union.int_mv* %1219, %union.int_mv* %1220) #3
  %1221 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %830, i64 0, i32 0
  %1222 = load i32, i32* %1221, align 8
  %1223 = icmp eq i32 %1222, -1
  br i1 %1223, label %1232, label %1224

1224:                                             ; preds = %1217
  %1225 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 %829, i32 2, i32 1
  %1226 = load i32, i32* %1225, align 4
  %1227 = icmp eq i32 %1226, -1
  br i1 %1227, label %1232, label %1228

1228:                                             ; preds = %1224
  %1229 = icmp eq i32 %1222, 16384
  br i1 %1229, label %1230, label %1248

1230:                                             ; preds = %1228
  %1231 = icmp eq i32 %1226, 16384
  br label %1232

1232:                                             ; preds = %1230, %1224, %1217
  %1233 = phi i1 [ true, %1224 ], [ %1231, %1230 ], [ true, %1217 ]
  %1234 = and i1 %784, %1233
  %1235 = xor i1 %1234, true
  %1236 = icmp eq i8 %788, 2
  %1237 = and i1 %785, %1236
  %1238 = or i1 %1237, %1235
  br i1 %1238, label %1248, label %1239

1239:                                             ; preds = %1232
  %1240 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %831, i64 0, i32 0
  %1241 = load i8*, i8** %1240, align 16
  %1242 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %814, i64 0, i32 4
  %1243 = load i32, i32* %1242, align 8
  call void @vp9_mv_pred(%struct.VP9_COMP* %0, %struct.macroblock* %1, i8* %1241, i32 %1243, i32 %827, i8 zeroext %6) #3
  br label %1248

1244:                                             ; preds = %813
  %1245 = sext i8 %788 to i32
  %1246 = shl i32 1, %1245
  %1247 = or i32 %1246, %789
  br label %1248

1248:                                             ; preds = %1232, %1244, %1239, %1228, %786
  %1249 = phi i32 [ %789, %786 ], [ %789, %1239 ], [ %789, %1232 ], [ %789, %1228 ], [ %1247, %1244 ]
  %1250 = add i8 %788, 1
  %1251 = icmp sgt i8 %1250, %759
  br i1 %1251, label %1254, label %1252

1252:                                             ; preds = %1248
  %1253 = load i32, i32* %706, align 16
  br label %786

1254:                                             ; preds = %1248
  %1255 = load i32, i32* %134, align 4
  %1256 = icmp eq i32 %1255, 0
  br i1 %1256, label %1257, label %1262

1257:                                             ; preds = %1254
  %1258 = load i32, i32* %713, align 8
  %1259 = icmp slt i32 %1258, 8
  %1260 = icmp ult i8 %6, 9
  %1261 = or i1 %1260, %1259
  br i1 %1261, label %1262, label %1266

1262:                                             ; preds = %1257, %1254
  %1263 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 55
  store i32 0, i32* %1263, align 16
  %1264 = load i32, i32* %134, align 4
  %1265 = icmp eq i32 %1264, 0
  br i1 %1265, label %1266, label %1268

1266:                                             ; preds = %1257, %1262
  %1267 = load i32, i32* %258, align 8
  br label %1287

1268:                                             ; preds = %1262
  %1269 = load i32, i32* %258, align 8
  %1270 = icmp sgt i32 %1269, 0
  br i1 %1270, label %1271, label %1305

1271:                                             ; preds = %1268
  %1272 = sext i8 %563 to i64
  %1273 = add nsw i64 %1272, -1
  %1274 = getelementptr inbounds [3 x i32], [3 x i32]* %36, i64 0, i64 %1273
  %1275 = load i32, i32* %1274, align 4
  %1276 = icmp eq i32 %1275, 0
  br i1 %1276, label %1287, label %1277

1277:                                             ; preds = %1271
  %1278 = add nsw i32 %1269, -1
  %1279 = sext i32 %1278 to i64
  %1280 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 27, i64 %1279
  %1281 = load i32, i32* %1280, align 4
  %1282 = icmp ne i32 %1281, 8
  %1283 = or i1 %469, %1282
  %1284 = xor i1 %1283, true
  %1285 = zext i1 %1284 to i32
  %1286 = select i1 %1283, i32 0, i32 -4
  br label %1287

1287:                                             ; preds = %1266, %1277, %1271
  %1288 = phi i32 [ %1269, %1271 ], [ %1267, %1266 ], [ %1269, %1277 ]
  %1289 = phi i32 [ 0, %1271 ], [ 0, %1266 ], [ %1285, %1277 ]
  %1290 = phi i32 [ 0, %1271 ], [ 0, %1266 ], [ %1286, %1277 ]
  %1291 = icmp sgt i32 %1288, 0
  %1292 = icmp ne i32 %257, 0
  %1293 = and i1 %1292, %1291
  br i1 %1293, label %1294, label %1305

1294:                                             ; preds = %1287
  %1295 = load i32, i32* %706, align 16
  %1296 = and i32 %1295, 2
  %1297 = icmp eq i32 %1296, 0
  br i1 %1297, label %1305, label %1298

1298:                                             ; preds = %1294
  %1299 = load i32, i32* %61, align 4
  %1300 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 34
  %1301 = load i32, i32* %1300, align 8
  %1302 = add nsw i32 %1301, 10
  %1303 = icmp sgt i32 %1299, %1302
  %1304 = zext i1 %1303 to i32
  br label %1305

1305:                                             ; preds = %1268, %1298, %1294, %1287
  %1306 = phi i32 [ %1290, %1294 ], [ %1290, %1287 ], [ %1290, %1298 ], [ 0, %1268 ]
  %1307 = phi i32 [ %1289, %1294 ], [ %1289, %1287 ], [ %1289, %1298 ], [ 0, %1268 ]
  %1308 = phi i32 [ 0, %1294 ], [ 0, %1287 ], [ %1304, %1298 ], [ 0, %1268 ]
  %1309 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 60
  %1310 = load i8, i8* %1309, align 4
  %1311 = icmp eq i8 %1310, 6
  br i1 %1311, label %1324, label %1312

1312:                                             ; preds = %1305
  %1313 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 51
  %1314 = load i8, i8* %1313, align 2
  %1315 = icmp eq i8 %1314, 0
  br i1 %1315, label %1320, label %1316

1316:                                             ; preds = %1312
  %1317 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 75
  %1318 = load i32, i32* %1317, align 8
  %1319 = icmp sgt i32 %1318, 70
  br i1 %1319, label %1324, label %1320

1320:                                             ; preds = %1312, %1316
  %1321 = load i32, i32* %713, align 8
  %1322 = icmp slt i32 %1321, 7
  %1323 = select i1 %1322, i8 9, i8 8
  br label %1324

1324:                                             ; preds = %1320, %1305, %1316
  %1325 = phi i8 [ 9, %1316 ], [ 9, %1305 ], [ %1323, %1320 ]
  %1326 = icmp ult i8 %1325, %6
  %1327 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 20
  %1328 = load i32, i32* %1327, align 4
  %1329 = icmp eq i32 %1328, 1
  %1330 = and i1 %1326, %1329
  br i1 %1330, label %1331, label %1342

1331:                                             ; preds = %1324
  %1332 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %51, align 8
  %1333 = load %struct.MODE_INFO*, %struct.MODE_INFO** %1332, align 8
  %1334 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1333, i64 0, i32 4
  %1335 = load i8, i8* %1334, align 4
  %1336 = sext i8 %1335 to i32
  %1337 = add nsw i32 %1336, -1
  %1338 = icmp ugt i32 %1337, 1
  br i1 %1338, label %1339, label %1342

1339:                                             ; preds = %1331
  %1340 = load i32, i32* %61, align 4
  %1341 = icmp ne i32 %1340, 0
  br label %1342

1342:                                             ; preds = %1331, %1339, %1324
  %1343 = phi i1 [ false, %1331 ], [ false, %1324 ], [ %1341, %1339 ]
  %1344 = or i32 %742, %137
  %1345 = bitcast i32* %38 to i8*
  %1346 = bitcast i64* %39 to i8*
  %1347 = bitcast i32* %40 to i8*
  %1348 = bitcast i32* %41 to i8*
  %1349 = bitcast i64* %42 to i8*
  %1350 = add nsw i32 %1344, -1
  %1351 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 57
  %1352 = icmp ne i32 %1307, 0
  %1353 = trunc i32 %1306 to i16
  %1354 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 78
  %1355 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 62
  %1356 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 155
  %1357 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 84
  %1358 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 59
  %1359 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 62, i64 %77
  %1360 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 24
  %1361 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 24
  %1362 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 69
  %1363 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 16
  %1364 = icmp ne i32 %691, 0
  %1365 = icmp eq i8 %6, 12
  %1366 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 23
  %1367 = icmp slt i8 %759, 3
  %1368 = xor i1 %1364, true
  %1369 = icmp eq i8 %759, 2
  %1370 = and i1 %1369, %1368
  %1371 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 17, i64 0
  %1372 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 17, i64 1
  %1373 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 81
  %1374 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %28, i64 0, i32 2
  %1375 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 24
  %1376 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %1377 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 4, i64 0, i32 1
  %1378 = bitcast i32* %17 to i8*
  %1379 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 75
  %1380 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 4, i64 0, i32 0
  %1381 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %77, i32 2
  %1382 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 4, i32 0
  %1383 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 4, i32 1
  %1384 = icmp ult i8 %6, 6
  %1385 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 82
  %1386 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %77
  %1387 = getelementptr inbounds [13 x i8], [13 x i8]* @b_height_log2_lookup, i64 0, i64 %77
  %1388 = bitcast i32* %15 to i8*
  %1389 = bitcast [5 x i32]* %16 to i8*
  %1390 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  %1391 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 25, i64 1
  %1392 = getelementptr inbounds [13 x i8], [13 x i8]* @num_pels_log2_lookup, i64 0, i64 %77
  %1393 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 26, i64 0
  %1394 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 29
  %1395 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 86
  %1396 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 29
  %1397 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 11
  %1398 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %77
  %1399 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 0, i32 5
  %1400 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 0, i32 4
  %1401 = getelementptr inbounds [5 x i32], [5 x i32]* %16, i64 0, i64 0
  %1402 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 0, i32 3
  %1403 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 95
  %1404 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 13, i64 1
  %1405 = getelementptr inbounds %union.int_mv, %union.int_mv* %1404, i64 0, i32 0
  %1406 = bitcast %union.int_mv* %1404 to %struct.mv*
  %1407 = getelementptr inbounds %struct.mv, %struct.mv* %1406, i64 0, i32 1
  %1408 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %77, i32 0
  %1409 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %53, i64 0, i32 1
  %1410 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %53, i64 0, i32 9
  %1411 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %1410, i64 0, i64 0, i32 0
  %1412 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %53, i64 0, i32 9, i64 1, i32 0
  %1413 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %32, i64 0, i64 0, i32 2
  %1414 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %32, i64 0, i64 1, i32 2
  %1415 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %32, i64 0, i64 2, i32 2
  %1416 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 3
  %1417 = bitcast %struct.buf_2d* %1416 to i64*
  %1418 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %32, i64 0, i64 3
  %1419 = ptrtoint %struct.PRED_BUFFER* %1418 to i64
  %1420 = icmp eq i8 %393, 4
  %1421 = icmp eq i32 %369, 0
  %1422 = bitcast [2 x %union.int_mv]* %1410 to %struct.mv*
  %1423 = bitcast [2 x %union.int_mv]* %1410 to i16*
  %1424 = getelementptr inbounds %struct.mv, %struct.mv* %1422, i64 0, i32 1
  %1425 = bitcast i64* %42 to i32*
  %1426 = bitcast [3 x i32]* %9 to i8*
  %1427 = bitcast [3 x i64]* %10 to i8*
  %1428 = bitcast [3 x i32]* %11 to i8*
  %1429 = bitcast [3 x i32]* %12 to i8*
  %1430 = bitcast [3 x i32]* %13 to i8*
  %1431 = getelementptr inbounds [3 x i8], [3 x i8]* %14, i64 0, i64 0
  %1432 = icmp ne i32 %139, 0
  %1433 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 0
  %1434 = getelementptr inbounds i32, i32* %1425, i64 1
  %1435 = zext i1 %1432 to i64
  %1436 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %27, i64 0, i32 0
  %1437 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %27, i64 0, i32 1
  %1438 = select i1 %1420, i8 0, i8 %393
  %1439 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %53, i64 0, i32 7
  %1440 = getelementptr inbounds [3 x i32], [3 x i32]* %36, i64 0, i64 1
  %1441 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 50, i64 0
  %1442 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 50, i64 1
  %1443 = bitcast %struct.RD_COST* %44 to i8*
  %1444 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 1
  %1445 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 2
  %1446 = getelementptr inbounds [2 x i32], [2 x i32]* %43, i64 0, i64 1
  %1447 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %44, i64 0, i32 0
  %1448 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %44, i64 0, i32 1
  %1449 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %27, i64 0, i32 2
  %1450 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 53
  %1451 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 51
  %1452 = icmp ugt i8 %6, 9
  %1453 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 0
  %1454 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 1
  %1455 = icmp ugt i8 %6, 8
  %1456 = icmp ugt i8 %6, 5
  %1457 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 79
  %1458 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 24
  %1459 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 44
  %1460 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 23
  %1461 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 12
  %1462 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 18
  %1463 = bitcast i32* %18 to i8*
  %1464 = bitcast i32* %19 to i8*
  %1465 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 4, i64 0
  %1466 = bitcast %struct.buf_2d* %1465 to i8*
  %1467 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 2, i32 4, i64 0
  %1468 = bitcast %struct.buf_2d* %1467 to i8*
  %1469 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 4, i32 0
  %1470 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 4, i32 1
  %1471 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 3, i32 0
  %1472 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 3, i32 1
  %1473 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 2, i32 4, i32 0
  %1474 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 2, i32 4, i32 1
  %1475 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 2, i32 3, i32 0
  %1476 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 2, i32 3, i32 1
  %1477 = icmp ne i32 %465, 0
  %1478 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 8
  %1479 = xor i1 %125, true
  %1480 = icmp ne i32 %1308, 0
  %1481 = getelementptr inbounds [14 x [4 x i8]], [14 x [4 x i8]]* %25, i64 0, i64 12, i64 2
  %1482 = zext i32 %137 to i64
  %1483 = zext i32 %1350 to i64
  %1484 = zext i32 %1344 to i64
  %1485 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 4
  %1486 = bitcast [2 x %struct.buf_2d]* %1485 to i8*
  %1487 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 4
  %1488 = bitcast [2 x %struct.buf_2d]* %1487 to i8*
  %1489 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 2, i32 4
  %1490 = bitcast [2 x %struct.buf_2d]* %1489 to i8*
  %1491 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 4, i64 1
  %1492 = bitcast %struct.buf_2d* %1491 to i8*
  %1493 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 4
  %1494 = bitcast [2 x %struct.buf_2d]* %1493 to i8*
  %1495 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 4, i64 1
  %1496 = bitcast %struct.buf_2d* %1495 to i8*
  %1497 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 2, i32 4
  %1498 = bitcast [2 x %struct.buf_2d]* %1497 to i8*
  %1499 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 2, i32 4, i64 1
  %1500 = bitcast %struct.buf_2d* %1499 to i8*
  br label %1501

1501:                                             ; preds = %2838, %1342
  %1502 = phi i64 [ %2854, %2838 ], [ 0, %1342 ]
  %1503 = phi i64 [ %2852, %2838 ], [ 9223372036854775807, %1342 ]
  %1504 = phi i32 [ %2851, %2838 ], [ -1, %1342 ]
  %1505 = phi i32 [ %2850, %2838 ], [ -1, %1342 ]
  %1506 = phi i32 [ %2849, %2838 ], [ 0, %1342 ]
  %1507 = phi i32 [ %2848, %2838 ], [ 2147483647, %1342 ]
  %1508 = phi i32 [ %2847, %2838 ], [ %1249, %1342 ]
  %1509 = phi i64 [ %2846, %2838 ], [ 0, %1342 ]
  %1510 = phi i64 [ %2845, %2838 ], [ 0, %1342 ]
  %1511 = phi i8 [ %2844, %2838 ], [ 12, %1342 ]
  %1512 = phi i8 [ %2843, %2838 ], [ 4, %1342 ]
  %1513 = phi i8 [ %2842, %2838 ], [ 1, %1342 ]
  %1514 = phi i8 [ %2841, %2838 ], [ -1, %1342 ]
  %1515 = phi i8 [ %2840, %2838 ], [ 0, %1342 ]
  %1516 = phi i8 [ %2839, %2838 ], [ %168, %1342 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1345) #3
  store i32 0, i32* %38, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1346) #3
  store i64 -6148914691236517206, i64* %39, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1347) #3
  store i32 -1431655766, i32* %40, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1348) #3
  store i32 0, i32* %41, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1349) #3
  store i64 0, i64* %42, align 8
  %1517 = icmp ult i64 %1502, %1482
  br i1 %1517, label %1518, label %1530

1518:                                             ; preds = %1501
  %1519 = getelementptr inbounds [12 x %struct.REF_MODE], [12 x %struct.REF_MODE]* @ref_mode_set, i64 0, i64 %1502, i32 1
  %1520 = load i8, i8* %1519, align 1
  %1521 = getelementptr inbounds [12 x %struct.REF_MODE], [12 x %struct.REF_MODE]* @ref_mode_set, i64 0, i64 %1502, i32 0
  %1522 = load i8, i8* %1521, align 2
  %1523 = load i32, i32* %134, align 4
  %1524 = icmp eq i32 %1523, 0
  br i1 %1524, label %1533, label %1525

1525:                                             ; preds = %1518
  %1526 = getelementptr inbounds [8 x %struct.REF_MODE], [8 x %struct.REF_MODE]* @ref_mode_set_svc, i64 0, i64 %1502, i32 1
  %1527 = load i8, i8* %1526, align 1
  %1528 = getelementptr inbounds [8 x %struct.REF_MODE], [8 x %struct.REF_MODE]* @ref_mode_set_svc, i64 0, i64 %1502, i32 0
  %1529 = load i8, i8* %1528, align 2
  br label %1533

1530:                                             ; preds = %1501
  %1531 = icmp eq i64 %1502, %1483
  %1532 = select i1 %1531, i8 2, i8 1
  br label %1533

1533:                                             ; preds = %1518, %1525, %1530
  %1534 = phi i8 [ -1, %1525 ], [ -1, %1518 ], [ 3, %1530 ]
  %1535 = phi i8 [ %1529, %1525 ], [ %1522, %1518 ], [ %1532, %1530 ]
  %1536 = phi i32 [ 0, %1525 ], [ 0, %1518 ], [ 1, %1530 ]
  %1537 = phi i8 [ %1527, %1525 ], [ %1520, %1518 ], [ 12, %1530 ]
  %1538 = sext i8 %1535 to i32
  %1539 = icmp sgt i8 %1535, %759
  br i1 %1539, label %2838, label %1540

1540:                                             ; preds = %1533
  %1541 = sext i8 %1535 to i64
  %1542 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 %1541
  %1543 = load i32, i32* %1542, align 4
  %1544 = icmp eq i32 %1543, 0
  br i1 %1544, label %1545, label %2838

1545:                                             ; preds = %1540
  %1546 = load i8, i8* %1351, align 1
  %1547 = icmp eq i8 %1546, 0
  br i1 %1547, label %1555, label %1548

1548:                                             ; preds = %1545
  %1549 = icmp eq i8 %1535, 1
  br i1 %1549, label %1550, label %2838

1550:                                             ; preds = %1548
  %1551 = zext i8 %1537 to i64
  %1552 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 %1551, i64 %1541, i32 0
  %1553 = load i32, i32* %1552, align 4
  %1554 = icmp eq i32 %1553, 0
  br i1 %1554, label %1555, label %2838

1555:                                             ; preds = %1550, %1545
  %1556 = load i8, i8* %151, align 4
  %1557 = icmp eq i8 %1556, 0
  br i1 %1557, label %1570, label %1558

1558:                                             ; preds = %1555
  %1559 = load i8, i8* %74, align 4
  %1560 = sext i8 %1559 to i64
  %1561 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 8, i64 %1560
  %1562 = load i32, i32* %1561, align 4
  %1563 = and i32 %1562, 4
  %1564 = icmp eq i32 %1563, 0
  br i1 %1564, label %1570, label %1565

1565:                                             ; preds = %1558
  %1566 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 7, i64 %1560, i64 2
  %1567 = load i16, i16* %1566, align 2
  %1568 = sext i16 %1567 to i32
  %1569 = icmp eq i32 %1568, %1538
  br i1 %1569, label %1570, label %2838

1570:                                             ; preds = %1555, %1565, %1558
  %1571 = icmp eq i8 %1535, %563
  %1572 = and i1 %1352, %1571
  br i1 %1572, label %1573, label %1590

1573:                                             ; preds = %1570
  %1574 = icmp eq i8 %1537, 13
  %1575 = zext i8 %1537 to i64
  %1576 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 %1575, i64 %1541
  %1577 = bitcast %union.int_mv* %1576 to %struct.mv*
  %1578 = getelementptr inbounds %struct.mv, %struct.mv* %1577, i64 0, i32 1
  br i1 %1574, label %1579, label %1581

1579:                                             ; preds = %1573
  store i16 %1353, i16* %1578, align 2
  %1580 = bitcast %union.int_mv* %1576 to i16*
  store i16 %1353, i16* %1580, align 4
  br label %1590

1581:                                             ; preds = %1573
  %1582 = load i16, i16* %1578, align 2
  %1583 = sext i16 %1582 to i32
  %1584 = icmp eq i32 %1306, %1583
  br i1 %1584, label %1585, label %2838

1585:                                             ; preds = %1581
  %1586 = bitcast %union.int_mv* %1576 to i16*
  %1587 = load i16, i16* %1586, align 4
  %1588 = sext i16 %1587 to i32
  %1589 = icmp eq i32 %1306, %1588
  br i1 %1589, label %1590, label %2838

1590:                                             ; preds = %1570, %1585, %1579
  %1591 = phi i32 [ 1, %1579 ], [ 1, %1585 ], [ 0, %1570 ]
  %1592 = icmp ne i32 %1536, 0
  br i1 %1592, label %1593, label %1611

1593:                                             ; preds = %1590
  %1594 = load i32, i32* %1354, align 8
  %1595 = icmp eq i32 %1594, 0
  br i1 %1595, label %2838, label %1596

1596:                                             ; preds = %1593
  %1597 = load i32, i32* %706, align 16
  %1598 = sext i8 %1534 to i64
  %1599 = getelementptr inbounds [4 x i32], [4 x i32]* @vp9_pick_inter_mode.flag_list, i64 0, i64 %1598
  %1600 = load i32, i32* %1599, align 4
  %1601 = and i32 %1600, %1597
  %1602 = icmp eq i32 %1601, 0
  br i1 %1602, label %2838, label %1603

1603:                                             ; preds = %1596
  br i1 %1557, label %1611, label %1604

1604:                                             ; preds = %1603
  %1605 = load i8, i8* %74, align 4
  %1606 = sext i8 %1605 to i64
  %1607 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 8, i64 %1606
  %1608 = load i32, i32* %1607, align 4
  %1609 = and i32 %1608, 4
  %1610 = icmp eq i32 %1609, 0
  br i1 %1610, label %1611, label %2838

1611:                                             ; preds = %1603, %1604, %1590
  %1612 = icmp eq i8 %1535, 2
  br i1 %1612, label %1613, label %1625

1613:                                             ; preds = %1611
  %1614 = load i32, i32* %1327, align 4
  %1615 = icmp eq i32 %1614, 1
  br i1 %1615, label %1616, label %1625

1616:                                             ; preds = %1613
  %1617 = load i32, i32* %134, align 4
  %1618 = icmp ne i32 %1617, 0
  %1619 = icmp ult i32 %1505, %760
  %1620 = and i1 %1619, %1618
  br i1 %1620, label %2838, label %1621

1621:                                             ; preds = %1616
  %1622 = icmp eq i32 %1617, 0
  %1623 = icmp ult i32 %1505, 500
  %1624 = and i1 %1623, %1622
  br i1 %1624, label %2838, label %1625

1625:                                             ; preds = %1621, %1613, %1611
  %1626 = load i32, i32* %706, align 16
  %1627 = getelementptr inbounds [4 x i32], [4 x i32]* @vp9_pick_inter_mode.flag_list, i64 0, i64 %1541
  %1628 = load i32, i32* %1627, align 4
  %1629 = and i32 %1628, %1626
  %1630 = icmp eq i32 %1629, 0
  br i1 %1630, label %2838, label %1631

1631:                                             ; preds = %1625
  %1632 = load i32, i32* %1355, align 4
  %1633 = icmp eq i32 %1632, 1
  br i1 %1633, label %1634, label %1664

1634:                                             ; preds = %1631
  %1635 = load i32, i32* %1356, align 16
  %1636 = icmp eq i32 %1635, 0
  br i1 %1636, label %1656, label %1637

1637:                                             ; preds = %1634
  %1638 = load i32, i32* %1357, align 8
  %1639 = icmp eq i32 %1638, 0
  br i1 %1639, label %1656, label %1640

1640:                                             ; preds = %1637
  %1641 = zext i8 %1537 to i64
  %1642 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 %1641, i64 %1541, i32 0
  %1643 = load i32, i32* %1642, align 4
  %1644 = icmp eq i32 %1643, 0
  br i1 %1644, label %1648, label %1645

1645:                                             ; preds = %1640
  %1646 = load i32, i32* %1358, align 16
  %1647 = icmp eq i32 %1646, 0
  br i1 %1647, label %1664, label %2838

1648:                                             ; preds = %1640
  %1649 = load i32, i32* %164, align 16
  %1650 = icmp eq i32 %1649, 0
  %1651 = icmp eq i8 %1535, 1
  %1652 = and i1 %1651, %1650
  br i1 %1652, label %1653, label %1664

1653:                                             ; preds = %1648
  %1654 = load i32, i32* %1358, align 16
  %1655 = icmp eq i32 %1654, 0
  br i1 %1655, label %2838, label %1664

1656:                                             ; preds = %1637, %1634
  %1657 = zext i8 %1537 to i64
  %1658 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 %1657, i64 %1541, i32 0
  %1659 = load i32, i32* %1658, align 4
  %1660 = icmp eq i32 %1659, 0
  br i1 %1660, label %1664, label %1661

1661:                                             ; preds = %1656
  %1662 = load i32, i32* %164, align 16
  %1663 = icmp eq i32 %1662, 0
  br i1 %1663, label %2838, label %1664

1664:                                             ; preds = %1645, %1653, %1656, %1648, %1661, %1631
  %1665 = load i32, i32* %1359, align 4
  %1666 = zext i8 %1537 to i32
  %1667 = shl i32 1, %1666
  %1668 = and i32 %1665, %1667
  %1669 = icmp eq i32 %1668, 0
  br i1 %1669, label %2838, label %1670

1670:                                             ; preds = %1664
  %1671 = load i32, i32* %482, align 8
  %1672 = icmp sgt i32 %1671, 0
  br i1 %1672, label %1673, label %1722

1673:                                             ; preds = %1670
  %1674 = load i32, i32* %1327, align 4
  %1675 = icmp eq i32 %1674, 0
  br i1 %1675, label %1676, label %1722

1676:                                             ; preds = %1673
  %1677 = load i32, i32* %1360, align 4
  %1678 = icmp eq i32 %1677, 0
  br i1 %1678, label %1686, label %1679

1679:                                             ; preds = %1676
  %1680 = icmp eq i8 %1535, 3
  br i1 %1680, label %1681, label %2838

1681:                                             ; preds = %1679
  %1682 = zext i8 %1537 to i64
  %1683 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 %1682, i64 %1541, i32 0
  %1684 = load i32, i32* %1683, align 4
  %1685 = icmp eq i32 %1684, 0
  br i1 %1685, label %1686, label %2838

1686:                                             ; preds = %1681, %1676
  %1687 = load i32, i32* %1361, align 16
  %1688 = icmp eq i32 %1687, 0
  %1689 = icmp eq i8 %1535, 3
  %1690 = and i1 %1689, %1688
  br i1 %1690, label %1691, label %1696

1691:                                             ; preds = %1686
  %1692 = zext i8 %1537 to i64
  %1693 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 %1692, i64 %1541, i32 0
  %1694 = load i32, i32* %1693, align 4
  %1695 = icmp eq i32 %1694, 0
  br i1 %1695, label %1696, label %2838

1696:                                             ; preds = %1691, %1686
  %1697 = load i32, i32* %1362, align 8
  %1698 = icmp eq i32 %1697, 0
  %1699 = or i1 %1688, %1698
  br i1 %1699, label %1722, label %1700

1700:                                             ; preds = %1696
  %1701 = load i32, i32* %466, align 8
  %1702 = load i32, i32* %1363, align 4
  %1703 = ashr i32 %1702, 1
  %1704 = icmp sle i32 %1701, %1703
  %1705 = xor i1 %1612, true
  %1706 = or i1 %1704, %1705
  br i1 %1706, label %1712, label %1707

1707:                                             ; preds = %1700
  %1708 = zext i8 %1537 to i64
  %1709 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 %1708, i64 %1541, i32 0
  %1710 = load i32, i32* %1709, align 4
  %1711 = icmp eq i32 %1710, 0
  br i1 %1711, label %1712, label %2838

1712:                                             ; preds = %1700, %1707
  %1713 = icmp sgt i32 %1701, 0
  %1714 = icmp slt i32 %1701, %1703
  %1715 = and i1 %1689, %1714
  %1716 = and i1 %1713, %1715
  br i1 %1716, label %1717, label %1722

1717:                                             ; preds = %1712
  %1718 = zext i8 %1537 to i64
  %1719 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 %1718, i64 %1541, i32 0
  %1720 = load i32, i32* %1719, align 4
  %1721 = icmp eq i32 %1720, 0
  br i1 %1721, label %1722, label %2838

1722:                                             ; preds = %1696, %1717, %1712, %1673, %1670
  %1723 = getelementptr inbounds [4 x i32], [4 x i32]* %31, i64 0, i64 %1541
  %1724 = load i32, i32* %1723, align 4
  %1725 = icmp ne i32 %1724, 0
  %1726 = icmp eq i8 %1537, 11
  %1727 = and i1 %1726, %1725
  br i1 %1727, label %2838, label %1728

1728:                                             ; preds = %1722
  %1729 = icmp eq i32 %1591, 0
  %1730 = and i1 %1364, %1729
  %1731 = xor i1 %1730, true
  %1732 = xor i1 %1612, true
  %1733 = or i1 %1732, %1731
  br i1 %1733, label %1739, label %1734

1734:                                             ; preds = %1728
  %1735 = zext i8 %1537 to i64
  %1736 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 %1735, i64 %1541, i32 0
  %1737 = load i32, i32* %1736, align 4
  %1738 = icmp eq i32 %1737, 0
  br i1 %1738, label %1739, label %2838

1739:                                             ; preds = %1728, %1734
  %1740 = load i8, i8* %1309, align 4
  %1741 = icmp eq i8 %1740, 6
  br i1 %1741, label %1758, label %1742

1742:                                             ; preds = %1739
  %1743 = load i32, i32* %564, align 4
  %1744 = icmp sgt i32 %1743, 1
  br i1 %1744, label %1753, label %1745

1745:                                             ; preds = %1742
  %1746 = icmp eq i32 %1743, 1
  %1747 = and i1 %1365, %1746
  %1748 = and i1 %1364, %1747
  %1749 = icmp eq i8 %1535, 1
  %1750 = and i1 %1749, %1748
  %1751 = icmp eq i8 %1537, 13
  %1752 = and i1 %1751, %1750
  br i1 %1752, label %2838, label %1758

1753:                                             ; preds = %1742
  %1754 = icmp eq i8 %1535, 1
  %1755 = and i1 %1364, %1754
  %1756 = icmp eq i8 %1537, 13
  %1757 = and i1 %1755, %1756
  br i1 %1757, label %2838, label %1758

1758:                                             ; preds = %1745, %1739, %1753
  %1759 = load i32, i32* %134, align 4
  %1760 = icmp eq i32 %1759, 0
  %1761 = icmp ne i32 %1591, 0
  %1762 = or i1 %1761, %1760
  br i1 %1762, label %1774, label %1763

1763:                                             ; preds = %1758
  %1764 = add nsw i32 %1538, -1
  %1765 = sext i32 %1764 to i64
  %1766 = getelementptr inbounds [3 x i32], [3 x i32]* %36, i64 0, i64 %1765
  %1767 = load i32, i32* %1766, align 4
  %1768 = icmp eq i32 %1767, 0
  br i1 %1768, label %1774, label %1769

1769:                                             ; preds = %1763
  %1770 = zext i8 %1537 to i64
  %1771 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 %1770, i64 %1541, i32 0
  %1772 = load i32, i32* %1771, align 4
  %1773 = icmp eq i32 %1772, 0
  br i1 %1773, label %1774, label %2838

1774:                                             ; preds = %1769, %1763, %1758
  br i1 %1557, label %1782, label %1775

1775:                                             ; preds = %1774
  %1776 = load i8, i8* %74, align 4
  %1777 = sext i8 %1776 to i64
  %1778 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 8, i64 %1777
  %1779 = load i32, i32* %1778, align 4
  %1780 = and i32 %1779, 4
  %1781 = icmp eq i32 %1780, 0
  br i1 %1781, label %1782, label %1850

1782:                                             ; preds = %1774, %1775
  %1783 = load i32, i32* %1366, align 4
  %1784 = icmp eq i32 %1783, 0
  br i1 %1784, label %1845, label %1785

1785:                                             ; preds = %1782
  %1786 = zext i8 %1537 to i64
  %1787 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 %1786, i64 %1541, i32 0
  %1788 = load i32, i32* %1787, align 4
  %1789 = icmp eq i32 %1788, 0
  %1790 = icmp eq i8 %1535, 1
  %1791 = and i1 %1790, %1789
  br i1 %1791, label %1845, label %1792

1792:                                             ; preds = %1785
  br i1 %1367, label %1793, label %1810

1793:                                             ; preds = %1792
  br i1 %1370, label %1794, label %1845

1794:                                             ; preds = %1793
  %1795 = select i1 %1790, i64 2, i64 1
  %1796 = getelementptr inbounds [4 x i32], [4 x i32]* @vp9_pick_inter_mode.flag_list, i64 0, i64 %1795
  %1797 = load i32, i32* %1796, align 4
  %1798 = and i32 %1797, %1626
  %1799 = icmp eq i32 %1798, 0
  br i1 %1799, label %1845, label %1800

1800:                                             ; preds = %1794
  %1801 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 25, i64 %1541
  %1802 = load i32, i32* %1801, align 4
  %1803 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 25, i64 %1795
  %1804 = load i32, i32* %1803, align 4
  %1805 = shl i32 %1804, 1
  %1806 = icmp sgt i32 %1802, %1805
  br i1 %1806, label %1807, label %1845

1807:                                             ; preds = %1800
  %1808 = shl i32 1, %1538
  %1809 = or i32 %1808, %1508
  br label %1845

1810:                                             ; preds = %1792
  %1811 = load i32, i32* %1360, align 4
  %1812 = icmp eq i32 %1811, 0
  br i1 %1812, label %1813, label %1845

1813:                                             ; preds = %1810
  %1814 = icmp eq i8 %1535, 3
  %1815 = and i1 %1814, %1789
  br i1 %1815, label %1845, label %1816

1816:                                             ; preds = %1813
  %1817 = select i1 %1612, i64 1, i64 2
  %1818 = getelementptr inbounds [4 x i32], [4 x i32]* @vp9_pick_inter_mode.flag_list, i64 0, i64 %1817
  %1819 = load i32, i32* %1818, align 4
  %1820 = and i32 %1819, %1626
  %1821 = icmp eq i32 %1820, 0
  br i1 %1821, label %1829, label %1822

1822:                                             ; preds = %1816
  %1823 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 25, i64 %1541
  %1824 = load i32, i32* %1823, align 4
  %1825 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 25, i64 %1817
  %1826 = load i32, i32* %1825, align 4
  %1827 = shl i32 %1826, 1
  %1828 = icmp sgt i32 %1824, %1827
  br i1 %1828, label %1842, label %1829

1829:                                             ; preds = %1816, %1822
  %1830 = select i1 %1814, i64 1, i64 3
  %1831 = getelementptr inbounds [4 x i32], [4 x i32]* @vp9_pick_inter_mode.flag_list, i64 0, i64 %1830
  %1832 = load i32, i32* %1831, align 4
  %1833 = and i32 %1832, %1626
  %1834 = icmp eq i32 %1833, 0
  br i1 %1834, label %1845, label %1835

1835:                                             ; preds = %1829
  %1836 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 25, i64 %1541
  %1837 = load i32, i32* %1836, align 4
  %1838 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 25, i64 %1830
  %1839 = load i32, i32* %1838, align 4
  %1840 = shl i32 %1839, 1
  %1841 = icmp sgt i32 %1837, %1840
  br i1 %1841, label %1842, label %1845

1842:                                             ; preds = %1835, %1822
  %1843 = shl i32 1, %1538
  %1844 = or i32 %1843, %1508
  br label %1845

1845:                                             ; preds = %1835, %1842, %1829, %1813, %1793, %1785, %1794, %1810, %1782, %1807, %1800
  %1846 = phi i32 [ %1508, %1782 ], [ %1508, %1785 ], [ %1508, %1794 ], [ %1809, %1807 ], [ %1508, %1800 ], [ %1508, %1793 ], [ %1508, %1813 ], [ %1508, %1829 ], [ %1844, %1842 ], [ %1508, %1835 ], [ %1508, %1810 ]
  %1847 = shl i32 1, %1538
  %1848 = and i32 %1846, %1847
  %1849 = icmp eq i32 %1848, 0
  br i1 %1849, label %1850, label %2838

1850:                                             ; preds = %1845, %1775
  %1851 = phi i32 [ %1846, %1845 ], [ %1508, %1775 ]
  %1852 = sext i8 %1534 to i64
  %1853 = getelementptr inbounds [4 x [3 x %struct.buf_2d]], [4 x [3 x %struct.buf_2d]]* %26, i64 0, i64 %1541, i64 0
  %1854 = bitcast %struct.buf_2d* %1853 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1486, i8* align 16 %1854, i64 16, i1 false)
  br i1 %1592, label %3565, label %3560

1855:                                             ; preds = %3576
  %1856 = load i32, i32* %466, align 8
  %1857 = icmp sgt i32 %1856, 4
  %1858 = shl i32 %3597, 3
  %1859 = select i1 %1857, i32 %1858, i32 %3597
  br label %1860

1860:                                             ; preds = %1855, %3576
  %1861 = phi i32 [ %3597, %3576 ], [ %1859, %1855 ]
  %1862 = load i64, i64* %1374, align 8
  %1863 = getelementptr inbounds i32, i32* %94, i64 %3593
  %1864 = sext i32 %1861 to i64
  %1865 = load i32, i32* %1863, align 4
  %1866 = sext i32 %1865 to i64
  %1867 = mul nsw i64 %1866, %1864
  %1868 = ashr i64 %1867, 5
  %1869 = icmp sle i64 %1868, %1862
  %1870 = icmp ne i32 %1861, 2147483647
  %1871 = and i1 %1870, %1869
  br i1 %1871, label %1877, label %1872

1872:                                             ; preds = %1860
  %1873 = zext i8 %1537 to i64
  %1874 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 %1873, i64 %1541, i32 0
  %1875 = load i32, i32* %1874, align 4
  %1876 = icmp eq i32 %1875, 0
  br i1 %1876, label %1877, label %2838

1877:                                             ; preds = %1860, %1872
  %1878 = icmp ne i8 %1537, 13
  %1879 = or i1 %1878, %1761
  br i1 %1879, label %2026, label %1880

1880:                                             ; preds = %1877
  %1881 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %51, align 8
  %1882 = load %struct.MODE_INFO*, %struct.MODE_INFO** %1881, align 8
  %1883 = icmp sgt i8 %1535, 1
  %1884 = and i1 %469, %1883
  br i1 %1884, label %1885, label %1935

1885:                                             ; preds = %1880
  %1886 = load i32, i32* %1327, align 4
  %1887 = icmp eq i32 %1886, 1
  br i1 %1887, label %1888, label %1935

1888:                                             ; preds = %1885
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1388) #3
  store i32 -1431655766, i32* %15, align 4
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %1389) #3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %1389, i8* align 16 bitcast ([5 x i32]* @__const.search_new_mv.cost_list to i8*), i64 20, i1 false) #3
  br i1 %1384, label %1934, label %1889

1889:                                             ; preds = %1888
  %1890 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %1390, align 16
  %1891 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %1890, i64 0, i32 0, i64 %1541, i64 0
  %1892 = bitcast %union.int_mv* %1891 to %struct.mv*
  %1893 = call i32 @vp9_int_pro_motion_estimation(%struct.VP9_COMP* %0, %struct.macroblock* %1, i8 zeroext %6, i32 %3, i32 %4, %struct.mv* %1892) #3
  %1894 = load i32, i32* %1391, align 4
  %1895 = icmp sgt i32 %1893, %1894
  br i1 %1895, label %1934, label %1896

1896:                                             ; preds = %1889
  %1897 = load i8, i8* %1392, align 1
  %1898 = zext i8 %1897 to i32
  %1899 = shl nuw nsw i32 %1898, 4
  %1900 = add nsw i32 %1899, %1893
  %1901 = icmp sgt i32 %1900, %1507
  br i1 %1901, label %1934, label %1902

1902:                                             ; preds = %1896
  %1903 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1882, i64 0, i32 9, i64 0, i32 0
  %1904 = load i32, i32* %1903, align 4
  %1905 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 13, i64 %1541
  %1906 = getelementptr inbounds %union.int_mv, %union.int_mv* %1905, i64 0, i32 0
  store i32 %1904, i32* %1906, align 4
  %1907 = bitcast %union.int_mv* %1905 to %struct.mv*
  %1908 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %1390, align 16
  %1909 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %1908, i64 0, i32 0, i64 %1541, i64 0
  %1910 = bitcast %union.int_mv* %1909 to %struct.mv*
  %1911 = load i32**, i32*** %1394, align 8
  %1912 = call i32 @vp9_mv_bit_cost(%struct.mv* %1907, %struct.mv* %1910, i32* %1393, i32** %1911, i32 108) #3
  store i32 %1912, i32* %38, align 4
  %1913 = bitcast %union.int_mv* %1905 to i16*
  %1914 = load i16, i16* %1913, align 4
  %1915 = ashr i16 %1914, 3
  store i16 %1915, i16* %1913, align 4
  %1916 = getelementptr inbounds %struct.mv, %struct.mv* %1907, i64 0, i32 1
  %1917 = load i16, i16* %1916, align 2
  %1918 = ashr i16 %1917, 3
  store i16 %1918, i16* %1916, align 2
  %1919 = load i32 (%struct.macroblock*, %struct.mv*, %struct.mv*, i32, i32, %struct.vp9_variance_vtable*, i32, i32, i32*, i32*, i32**, i32*, i32*, i8*, i32, i32, i32)*, i32 (%struct.macroblock*, %struct.mv*, %struct.mv*, i32, i32, %struct.vp9_variance_vtable*, i32, i32, i32*, i32*, i32**, i32*, i32*, i8*, i32, i32, i32)** %1395, align 16
  %1920 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %1390, align 16
  %1921 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %1920, i64 0, i32 0, i64 %1541, i64 0
  %1922 = bitcast %union.int_mv* %1921 to %struct.mv*
  %1923 = load i32, i32* %1396, align 16
  %1924 = load i32, i32* %1397, align 4
  %1925 = load i32, i32* %1399, align 4
  %1926 = load i32, i32* %1400, align 8
  %1927 = load i32, i32* %1402, align 4
  %1928 = icmp eq i32 %1927, 0
  %1929 = select i1 %1928, i32* null, i32* %1401
  %1930 = load i32**, i32*** %1394, align 8
  %1931 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 24, i64 %1541
  %1932 = load i32, i32* %1403, align 4
  %1933 = call i32 %1919(%struct.macroblock* %1, %struct.mv* %1907, %struct.mv* %1922, i32 %1923, i32 %1924, %struct.vp9_variance_vtable* %1398, i32 %1925, i32 %1926, i32* %1929, i32* %1393, i32** %1930, i32* nonnull %15, i32* %1931, i8* null, i32 0, i32 0, i32 %1932) #3
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %1389) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1388) #3
  br label %2026

1934:                                             ; preds = %1896, %1889, %1888
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %1389) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1388) #3
  br label %2838

1935:                                             ; preds = %1885, %1880
  %1936 = load i32, i32* %1375, align 8
  %1937 = icmp eq i32 %1936, 0
  br i1 %1937, label %2022, label %1938

1938:                                             ; preds = %1935
  %1939 = load i32, i32* %1376, align 8
  %1940 = icmp eq i32 %1939, 0
  br i1 %1940, label %2022, label %1941

1941:                                             ; preds = %1938
  %1942 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 13, i64 %1541
  %1943 = getelementptr inbounds %union.int_mv, %union.int_mv* %1942, i64 0, i32 0
  %1944 = load i32, i32* %1943, align 4
  %1945 = icmp eq i32 %1944, -2147450880
  br i1 %1945, label %2019, label %1946

1946:                                             ; preds = %1941
  %1947 = trunc i32 %1944 to i16
  %1948 = load i32, i32* %1377, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1378) #3
  store i32 -1, i32* %17, align 4
  %1949 = load i32, i32* %1379, align 8
  %1950 = icmp sgt i32 %1949, 60
  %1951 = select i1 %1950, i32 2, i32 4
  %1952 = load i8*, i8** %1380, align 8
  %1953 = bitcast %union.int_mv* %1942 to %struct.mv*
  %1954 = bitcast %union.int_mv* %1942 to i16*
  %1955 = ashr i16 %1947, 3
  %1956 = sext i16 %1955 to i32
  %1957 = mul nsw i32 %1948, %1956
  %1958 = sext i32 %1957 to i64
  %1959 = getelementptr inbounds i8, i8* %1952, i64 %1958
  %1960 = getelementptr inbounds %struct.mv, %struct.mv* %1953, i64 0, i32 1
  %1961 = load i16, i16* %1960, align 2
  %1962 = ashr i16 %1961, 3
  %1963 = sext i16 %1962 to i64
  %1964 = getelementptr inbounds i8, i8* %1959, i64 %1963
  %1965 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %1381, align 8
  %1966 = load i8*, i8** %1382, align 8
  %1967 = load i32, i32* %1383, align 8
  %1968 = call i32 %1965(i8* %1966, i32 %1967, i8* %1964, i32 %1948, i32* nonnull %17) #3
  %1969 = load i32, i32* %134, align 4
  %1970 = icmp eq i32 %1969, 0
  br i1 %1970, label %1981, label %1971

1971:                                             ; preds = %1946
  %1972 = load i32, i32* %1375, align 8
  %1973 = icmp ne i32 %1972, 0
  %1974 = and i1 %1384, %1973
  br i1 %1974, label %1975, label %1981

1975:                                             ; preds = %1971
  %1976 = load i16, i16* %1954, align 4
  %1977 = icmp eq i16 %1976, 0
  br i1 %1977, label %1978, label %1981

1978:                                             ; preds = %1975
  %1979 = load i16, i16* %1960, align 2
  %1980 = icmp eq i16 %1979, 0
  br i1 %1980, label %2017, label %1981

1981:                                             ; preds = %1978, %1975, %1971, %1946
  %1982 = load i32, i32* %1385, align 8
  %1983 = icmp eq i32 %1982, 0
  %1984 = load i32, i32* %17, align 4
  %1985 = xor i1 %1983, true
  %1986 = shl i32 %1504, %1951
  %1987 = icmp ugt i32 %1984, %1986
  %1988 = and i1 %1987, %1985
  br i1 %1988, label %2017, label %1989

1989:                                             ; preds = %1981
  %1990 = shl i32 %1504, 1
  %1991 = icmp ult i32 %1984, %1990
  br i1 %1991, label %1992, label %2013

1992:                                             ; preds = %1989
  br i1 %1983, label %2009, label %1993

1993:                                             ; preds = %1992
  %1994 = load i8, i8* %1386, align 1
  %1995 = zext i8 %1994 to i32
  %1996 = load i8, i8* %1387, align 1
  %1997 = zext i8 %1996 to i32
  %1998 = add nuw nsw i32 %1997, %1995
  %1999 = lshr i32 %1984, %1998
  %2000 = icmp ule i32 %1984, %1504
  %2001 = icmp ult i32 %1999, 400
  %2002 = and i1 %2000, %2001
  br i1 %2002, label %2003, label %2009

2003:                                             ; preds = %1993
  %2004 = load i16, i16* %1954, align 4
  %2005 = icmp eq i16 %2004, 0
  br i1 %2005, label %2006, label %2009

2006:                                             ; preds = %2003
  %2007 = load i16, i16* %1960, align 2
  %2008 = icmp eq i16 %2007, 0
  br i1 %2008, label %2017, label %2009

2009:                                             ; preds = %2006, %2003, %1993, %1992
  %2010 = load i64, i64* %1374, align 8
  %2011 = call fastcc i32 @combined_motion_search(%struct.VP9_COMP* %0, %struct.macroblock* %1, i8 zeroext %6, i32 %3, i32 %4, %union.int_mv* %1942, i32* nonnull %38, i64 %2010, i32 1) #3
  %2012 = icmp eq i32 %2011, 0
  br i1 %2012, label %2017, label %2018

2013:                                             ; preds = %1989
  %2014 = load i64, i64* %1374, align 8
  %2015 = call fastcc i32 @combined_motion_search(%struct.VP9_COMP* %0, %struct.macroblock* %1, i8 zeroext %6, i32 %3, i32 %4, %union.int_mv* %1942, i32* nonnull %38, i64 %2014, i32 0) #3
  %2016 = icmp eq i32 %2015, 0
  br i1 %2016, label %2017, label %2018

2017:                                             ; preds = %2013, %2009, %2006, %1981, %1978
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1378) #3
  br label %2838

2018:                                             ; preds = %2013, %2009
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1378) #3
  br label %2026

2019:                                             ; preds = %1941
  %2020 = call fastcc i32 @combined_motion_search(%struct.VP9_COMP* %0, %struct.macroblock* %1, i8 zeroext %6, i32 %3, i32 %4, %union.int_mv* %1942, i32* nonnull %38, i64 %1862, i32 0) #3
  %2021 = icmp eq i32 %2020, 0
  br i1 %2021, label %2838, label %2026

2022:                                             ; preds = %1938, %1935
  %2023 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 13, i64 %1541
  %2024 = call fastcc i32 @combined_motion_search(%struct.VP9_COMP* %0, %struct.macroblock* %1, i8 zeroext %6, i32 %3, i32 %4, %union.int_mv* %2023, i32* nonnull %38, i64 %1862, i32 0) #3
  %2025 = icmp eq i32 %2024, 0
  br i1 %2025, label %2838, label %2026

2026:                                             ; preds = %2022, %2019, %2018, %1902, %1877
  %2027 = zext i8 %1537 to i64
  %2028 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 %2027, i64 %1541, i32 0
  %2029 = icmp eq i8 %1537, 10
  %2030 = or i1 %1592, %2029
  br i1 %2030, label %2042, label %2031

2031:                                             ; preds = %2026
  %2032 = getelementptr inbounds [14 x [4 x i8]], [14 x [4 x i8]]* %25, i64 0, i64 10, i64 %1541
  %2033 = load i8, i8* %2032, align 1
  %2034 = icmp eq i8 %2033, 0
  br i1 %2034, label %2042, label %2035

2035:                                             ; preds = %2031
  %2036 = load i32, i32* %2028, align 4
  %2037 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 10, i64 %1541, i32 0
  %2038 = load i32, i32* %2037, align 4
  %2039 = icmp eq i32 %2036, %2038
  %2040 = icmp eq i32 %2038, 0
  %2041 = and i1 %2039, %2040
  br i1 %2041, label %2838, label %2042

2042:                                             ; preds = %2031, %2035, %2026
  %2043 = icmp eq i8 %1537, 11
  %2044 = or i1 %1592, %2043
  br i1 %2044, label %3612, label %3601

2045:                                             ; preds = %3640
  %2046 = trunc i32 %3646 to i16
  %2047 = load i32, i32* %1377, align 8
  %2048 = load i8*, i8** %1380, align 8
  %2049 = ashr i16 %2046, 3
  %2050 = sext i16 %2049 to i32
  %2051 = mul nsw i32 %2047, %2050
  %2052 = sext i32 %2051 to i64
  %2053 = getelementptr inbounds i8, i8* %2048, i64 %2052
  %2054 = load i16, i16* %1407, align 2
  %2055 = ashr i16 %2054, 3
  %2056 = sext i16 %2055 to i64
  %2057 = getelementptr inbounds i8, i8* %2053, i64 %2056
  %2058 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %1408, align 8
  %2059 = load i8*, i8** %1382, align 8
  %2060 = load i32, i32* %1383, align 8
  %2061 = call i32 %2058(i8* %2059, i32 %2060, i8* %2057, i32 %2047) #3
  store i32 %2061, i32* %1391, align 4
  br label %2062

2062:                                             ; preds = %3640, %2045
  %2063 = phi i32 [ %2061, %2045 ], [ %1507, %3640 ]
  %2064 = icmp eq i8 %1537, 10
  %2065 = or i1 %1592, %2064
  br i1 %2065, label %2071, label %2066

2066:                                             ; preds = %2062
  %2067 = load i32, i32* %2028, align 4
  %2068 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 10, i64 %1541, i32 0
  %2069 = load i32, i32* %2068, align 4
  %2070 = icmp eq i32 %2067, %2069
  br i1 %2070, label %2838, label %2071

2071:                                             ; preds = %2062, %2066
  store i8 %1537, i8* %1409, align 1
  %2072 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 %2027, i64 %1541
  %2073 = getelementptr inbounds %union.int_mv, %union.int_mv* %2072, i64 0, i32 0
  %2074 = load i32, i32* %2073, align 4
  store i32 %2074, i32* %1411, align 4
  store i32 0, i32* %1412, align 4
  br i1 %125, label %2075, label %2095

2075:                                             ; preds = %2071
  %2076 = icmp eq i64 %1509, 0
  br i1 %2076, label %2095, label %2077

2077:                                             ; preds = %2075
  %2078 = load i32, i32* %1413, align 4
  %2079 = icmp eq i32 %2078, 0
  br i1 %2079, label %2080, label %2083

2080:                                             ; preds = %2086, %2083, %2077
  %2081 = phi i64 [ 0, %2077 ], [ 1, %2083 ], [ 2, %2086 ]
  %2082 = phi i32* [ %1413, %2077 ], [ %1414, %2083 ], [ %1415, %2086 ]
  store i32 1, i32* %2082, align 4
  br label %2089

2083:                                             ; preds = %2077
  %2084 = load i32, i32* %1414, align 4
  %2085 = icmp eq i32 %2084, 0
  br i1 %2085, label %2080, label %2086

2086:                                             ; preds = %2083
  %2087 = load i32, i32* %1415, align 4
  %2088 = icmp eq i32 %2087, 0
  br i1 %2088, label %2080, label %2089

2089:                                             ; preds = %2080, %2086
  %2090 = phi i64 [ %2081, %2080 ], [ -1, %2086 ]
  %2091 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %32, i64 0, i64 %2090
  %2092 = ptrtoint %struct.PRED_BUFFER* %2091 to i64
  %2093 = bitcast %struct.PRED_BUFFER* %2091 to i64*
  %2094 = load i64, i64* %2093, align 16
  store i64 %2094, i64* %1417, align 8
  store i32 %107, i32* %113, align 8
  br label %2095

2095:                                             ; preds = %2075, %2089, %2071
  %2096 = phi i64 [ %2092, %2089 ], [ %1509, %2071 ], [ %1419, %2075 ]
  %2097 = or i1 %1420, %3641
  %2098 = xor i1 %2097, true
  %2099 = or i1 %1421, %2098
  br i1 %2099, label %2247, label %2100

2100:                                             ; preds = %2095
  br i1 %3643, label %2110, label %2101

2101:                                             ; preds = %2100
  %2102 = icmp ne i8 %1535, 2
  %2103 = or i1 %2102, %1761
  br i1 %2103, label %2247, label %2104

2104:                                             ; preds = %2101
  %2105 = load i32, i32* %134, align 4
  %2106 = icmp eq i32 %2105, 0
  br i1 %2106, label %2107, label %2110

2107:                                             ; preds = %2104
  %2108 = load i32, i32* %1327, align 4
  %2109 = icmp eq i32 %2108, 0
  br i1 %2109, label %2110, label %2247

2110:                                             ; preds = %2104, %2107, %2100
  %2111 = load i16, i16* %1423, align 4
  %2112 = load i16, i16* %1424, align 2
  %2113 = or i16 %2112, %2111
  %2114 = and i16 %2113, 7
  %2115 = icmp eq i16 %2114, 0
  br i1 %2115, label %2247, label %2116

2116:                                             ; preds = %2110
  %2117 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %51, align 8
  %2118 = load %struct.MODE_INFO*, %struct.MODE_INFO** %2117, align 8
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %1426) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %1426, i8 0, i64 12, i1 false) #3
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1427) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1427, i8 0, i64 24, i1 false) #3
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %1428) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %1428, i8 0, i64 12, i1 false) #3
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %1429) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %1429, i8 0, i64 12, i1 false) #3
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %1430) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %1430, i8 0, i64 12, i1 false) #3
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %1431) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %1431, i8 0, i64 3, i1 false) #3
  %2119 = inttoptr i64 %2096 to %struct.PRED_BUFFER*
  %2120 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %2118, i64 0, i32 7
  %2121 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %2118, i64 0, i32 2
  br label %2122

2122:                                             ; preds = %2192, %2116
  %2123 = phi i64 [ %2096, %2116 ], [ %2193, %2192 ]
  %2124 = phi i64 [ %1435, %2116 ], [ %2201, %2192 ]
  %2125 = phi i32 [ 0, %2116 ], [ %2200, %2192 ]
  %2126 = phi i32 [ 0, %2116 ], [ %2199, %2192 ]
  %2127 = phi i32 [ 0, %2116 ], [ %2198, %2192 ]
  %2128 = phi i8 [ 0, %2116 ], [ %2197, %2192 ]
  %2129 = phi %struct.PRED_BUFFER* [ %2119, %2116 ], [ %2196, %2192 ]
  %2130 = phi i8 [ 4, %2116 ], [ %2195, %2192 ]
  %2131 = phi i64 [ 9223372036854775807, %2116 ], [ %2194, %2192 ]
  %2132 = trunc i64 %2124 to i8
  store i8 %2132, i8* %2120, align 1
  call void @vp9_build_inter_predictors_sby(%struct.macroblockd* %50, i32 %3, i32 %4, i8 zeroext %6) #3
  %2133 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 %2124
  %2134 = getelementptr inbounds [3 x i64], [3 x i64]* %10, i64 0, i64 %2124
  %2135 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 %2124
  %2136 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 %2124
  br i1 %1343, label %2137, label %2138

2137:                                             ; preds = %2122
  call fastcc void @model_rd_for_sb_y_large(%struct.VP9_COMP* %0, i8 zeroext %6, %struct.macroblock* %1, %struct.macroblockd* %50, i32* %2133, i64* %2134, i32* %2135, i32* %2136, i32 %3, i32 %4, i32* nonnull %41, i32* nonnull %1425) #3
  br label %2139

2138:                                             ; preds = %2122
  call fastcc void @model_rd_for_sb_y(%struct.VP9_COMP* %0, i8 zeroext %6, %struct.macroblock* %1, %struct.macroblockd* %50, i32* %2133, i64* %2134, i32* %2135, i32* %2136, i32 0) #3
  br label %2139

2139:                                             ; preds = %2138, %2137
  %2140 = load i32, i32* %2133, align 4
  %2141 = getelementptr inbounds [3 x i32], [3 x i32]* %11, i64 0, i64 %2124
  store i32 %2140, i32* %2141, align 4
  %2142 = call i32 @vp9_get_switchable_rate(%struct.VP9_COMP* %0, %struct.macroblockd* %50) #3
  %2143 = add nsw i32 %2142, %2140
  store i32 %2143, i32* %2133, align 4
  %2144 = sext i32 %2143 to i64
  %2145 = load i32, i32* %67, align 4
  %2146 = sext i32 %2145 to i64
  %2147 = mul nsw i64 %2146, %2144
  %2148 = add nsw i64 %2147, 256
  %2149 = ashr i64 %2148, 9
  %2150 = load i64, i64* %2134, align 8
  %2151 = load i32, i32* %73, align 8
  %2152 = zext i32 %2151 to i64
  %2153 = shl i64 %2150, %2152
  %2154 = add nsw i64 %2149, %2153
  %2155 = load i8, i8* %2121, align 2
  %2156 = getelementptr inbounds [3 x i8], [3 x i8]* %14, i64 0, i64 %2124
  store i8 %2155, i8* %2156, align 1
  %2157 = icmp slt i64 %2154, %2131
  br i1 %2157, label %2158, label %2192

2158:                                             ; preds = %2139
  %2159 = load i8, i8* %1433, align 4
  %2160 = load i32, i32* %41, align 4
  %2161 = load i32, i32* %1425, align 8
  %2162 = load i32, i32* %1434, align 4
  br i1 %125, label %2163, label %2192

2163:                                             ; preds = %2158
  %2164 = inttoptr i64 %2123 to %struct.PRED_BUFFER*
  %2165 = icmp eq %struct.PRED_BUFFER* %2129, %2164
  br i1 %2165, label %2172, label %2166

2166:                                             ; preds = %2163
  %2167 = icmp eq i64 %2123, 0
  br i1 %2167, label %2170, label %2168

2168:                                             ; preds = %2166
  %2169 = getelementptr inbounds %struct.PRED_BUFFER, %struct.PRED_BUFFER* %2164, i64 0, i32 2
  store i32 0, i32* %2169, align 4
  br label %2170

2170:                                             ; preds = %2168, %2166
  %2171 = ptrtoint %struct.PRED_BUFFER* %2129 to i64
  br label %2172

2172:                                             ; preds = %2170, %2163
  %2173 = phi i64 [ %2123, %2163 ], [ %2171, %2170 ]
  %2174 = icmp eq i64 %2124, 1
  br i1 %2174, label %2204, label %2175

2175:                                             ; preds = %2172
  %2176 = load i32, i32* %1413, align 4
  %2177 = icmp eq i32 %2176, 0
  br i1 %2177, label %2178, label %2181

2178:                                             ; preds = %2184, %2181, %2175
  %2179 = phi i64 [ 0, %2175 ], [ 1, %2181 ], [ 2, %2184 ]
  %2180 = phi i32* [ %1413, %2175 ], [ %1414, %2181 ], [ %1415, %2184 ]
  store i32 1, i32* %2180, align 4
  br label %2187

2181:                                             ; preds = %2175
  %2182 = load i32, i32* %1414, align 4
  %2183 = icmp eq i32 %2182, 0
  br i1 %2183, label %2178, label %2184

2184:                                             ; preds = %2181
  %2185 = load i32, i32* %1415, align 4
  %2186 = icmp eq i32 %2185, 0
  br i1 %2186, label %2178, label %2187

2187:                                             ; preds = %2184, %2178
  %2188 = phi i64 [ %2179, %2178 ], [ -1, %2184 ]
  %2189 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %32, i64 0, i64 %2188
  %2190 = bitcast %struct.PRED_BUFFER* %2189 to i64*
  %2191 = load i64, i64* %2190, align 16
  store i64 %2191, i64* %1417, align 8
  store i32 %107, i32* %113, align 8
  br label %2192

2192:                                             ; preds = %2158, %2187, %2139
  %2193 = phi i64 [ %2123, %2158 ], [ %2173, %2187 ], [ %2123, %2139 ]
  %2194 = phi i64 [ %2154, %2158 ], [ %2154, %2187 ], [ %2131, %2139 ]
  %2195 = phi i8 [ %2132, %2158 ], [ 0, %2187 ], [ %2130, %2139 ]
  %2196 = phi %struct.PRED_BUFFER* [ %2129, %2158 ], [ %2189, %2187 ], [ %2129, %2139 ]
  %2197 = phi i8 [ %2159, %2158 ], [ %2159, %2187 ], [ %2128, %2139 ]
  %2198 = phi i32 [ %2160, %2158 ], [ %2160, %2187 ], [ %2127, %2139 ]
  %2199 = phi i32 [ %2161, %2158 ], [ %2161, %2187 ], [ %2126, %2139 ]
  %2200 = phi i32 [ %2162, %2158 ], [ %2162, %2187 ], [ %2125, %2139 ]
  %2201 = add nuw nsw i64 %2124, 1
  %2202 = icmp eq i64 %2201, 2
  br i1 %2202, label %2203, label %2122

2203:                                             ; preds = %2192
  br i1 %125, label %2204, label %2218

2204:                                             ; preds = %2172, %2203
  %2205 = phi i64 [ %2193, %2203 ], [ %2173, %2172 ]
  %2206 = phi i8 [ %2195, %2203 ], [ 1, %2172 ]
  %2207 = phi %struct.PRED_BUFFER* [ %2196, %2203 ], [ %2129, %2172 ]
  %2208 = phi i8 [ %2197, %2203 ], [ %2159, %2172 ]
  %2209 = phi i32 [ %2198, %2203 ], [ %2160, %2172 ]
  %2210 = phi i32 [ %2199, %2203 ], [ %2161, %2172 ]
  %2211 = phi i32 [ %2200, %2203 ], [ %2162, %2172 ]
  %2212 = inttoptr i64 %2205 to %struct.PRED_BUFFER*
  %2213 = icmp eq %struct.PRED_BUFFER* %2207, %2212
  %2214 = icmp eq %struct.PRED_BUFFER* %2207, null
  %2215 = or i1 %2214, %2213
  br i1 %2215, label %2218, label %2216

2216:                                             ; preds = %2204
  %2217 = getelementptr inbounds %struct.PRED_BUFFER, %struct.PRED_BUFFER* %2207, i64 0, i32 2
  store i32 0, i32* %2217, align 4
  br label %2218

2218:                                             ; preds = %2203, %2216, %2204
  %2219 = phi i64 [ %2193, %2203 ], [ %2205, %2204 ], [ %2205, %2216 ]
  %2220 = phi i1 [ false, %2203 ], [ true, %2204 ], [ true, %2216 ]
  %2221 = phi i8 [ %2195, %2203 ], [ %2206, %2204 ], [ %2206, %2216 ]
  %2222 = phi i8 [ %2197, %2203 ], [ %2208, %2204 ], [ %2208, %2216 ]
  %2223 = phi i32 [ %2198, %2203 ], [ %2209, %2204 ], [ %2209, %2216 ]
  %2224 = phi i32 [ %2199, %2203 ], [ %2210, %2204 ], [ %2210, %2216 ]
  %2225 = phi i32 [ %2200, %2203 ], [ %2211, %2204 ], [ %2211, %2216 ]
  store i8 %2221, i8* %2120, align 1
  %2226 = zext i8 %2221 to i64
  %2227 = getelementptr inbounds [3 x i8], [3 x i8]* %14, i64 0, i64 %2226
  %2228 = load i8, i8* %2227, align 1
  store i8 %2228, i8* %2121, align 2
  %2229 = getelementptr inbounds [3 x i32], [3 x i32]* %11, i64 0, i64 %2226
  %2230 = load i32, i32* %2229, align 4
  store i32 %2230, i32* %1436, align 8
  %2231 = getelementptr inbounds [3 x i64], [3 x i64]* %10, i64 0, i64 %2226
  %2232 = load i64, i64* %2231, align 8
  store i64 %2232, i64* %1437, align 8
  %2233 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 %2226
  %2234 = load i32, i32* %2233, align 4
  store i32 %2234, i32* %29, align 4
  %2235 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 %2226
  %2236 = load i32, i32* %2235, align 4
  store i32 %2236, i32* %30, align 4
  store i8 %2222, i8* %1433, align 4
  store i32 %2223, i32* %41, align 4
  store i32 %2224, i32* %1425, align 8
  store i32 %2225, i32* %1434, align 4
  br i1 %2220, label %2237, label %2243

2237:                                             ; preds = %2218
  %2238 = inttoptr i64 %2219 to i64*
  %2239 = load i64, i64* %2238, align 8
  store i64 %2239, i64* %1417, align 8
  %2240 = inttoptr i64 %2219 to %struct.PRED_BUFFER*
  %2241 = getelementptr inbounds %struct.PRED_BUFFER, %struct.PRED_BUFFER* %2240, i64 0, i32 1
  %2242 = load i32, i32* %2241, align 8
  store i32 %2242, i32* %113, align 8
  br label %2246

2243:                                             ; preds = %2218
  %2244 = icmp eq i8 %2221, 0
  br i1 %2244, label %2245, label %2246

2245:                                             ; preds = %2243
  store i8 0, i8* %2120, align 1
  call void @vp9_build_inter_predictors_sby(%struct.macroblockd* %50, i32 %3, i32 %4, i8 zeroext %6) #3
  br label %2246

2246:                                             ; preds = %2237, %2243, %2245
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %1431) #3
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %1430) #3
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %1429) #3
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %1428) #3
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1427) #3
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %1426) #3
  br label %2275

2247:                                             ; preds = %2095, %2110, %2101, %2107
  store i8 %1438, i8* %1439, align 1
  %2248 = load i32, i32* %134, align 4
  %2249 = icmp eq i32 %2248, 0
  %2250 = or i1 %2249, %1732
  %2251 = load i32, i32* %1440, align 4
  %2252 = icmp eq i32 %2251, 0
  %2253 = or i1 %2250, %2252
  %2254 = select i1 %2253, i8 %1438, i8 %168
  store i8 %2254, i8* %1439, align 1
  call void @vp9_build_inter_predictors_sby(%struct.macroblockd* %50, i32 %3, i32 %4, i8 zeroext %6) #3
  br i1 %1343, label %2255, label %2256

2255:                                             ; preds = %2247
  call fastcc void @model_rd_for_sb_y_large(%struct.VP9_COMP* %0, i8 zeroext %6, %struct.macroblock* %1, %struct.macroblockd* %50, i32* nonnull %1436, i64* %1437, i32* nonnull %29, i32* nonnull %30, i32 %3, i32 %4, i32* nonnull %41, i32* nonnull %1425)
  br label %2257

2256:                                             ; preds = %2247
  call fastcc void @model_rd_for_sb_y(%struct.VP9_COMP* %0, i8 zeroext %6, %struct.macroblock* %1, %struct.macroblockd* %50, i32* nonnull %1436, i64* %1437, i32* nonnull %29, i32* nonnull %30, i32 0)
  br label %2257

2257:                                             ; preds = %2256, %2255
  br i1 %3643, label %2258, label %2269

2258:                                             ; preds = %2257
  %2259 = load i32, i32* %2073, align 4
  %2260 = icmp eq i32 %2259, 0
  br i1 %2260, label %2261, label %2269

2261:                                             ; preds = %2258
  %2262 = load i32, i32* %30, align 4
  %2263 = load i8, i8* %1386, align 1
  %2264 = zext i8 %2263 to i32
  %2265 = load i8, i8* %1387, align 1
  %2266 = zext i8 %2265 to i32
  %2267 = add nuw nsw i32 %2266, %2264
  %2268 = lshr i32 %2262, %2267
  br label %2269

2269:                                             ; preds = %2261, %2258, %2257
  %2270 = phi i32 [ %2268, %2261 ], [ %1505, %2258 ], [ %1505, %2257 ]
  %2271 = load i32, i32* %30, align 4
  %2272 = icmp ult i32 %2271, %1504
  %2273 = select i1 %2272, i32 %2271, i32 %1504
  %2274 = load i32, i32* %41, align 4
  br label %2275

2275:                                             ; preds = %2269, %2246
  %2276 = phi i32 [ %2271, %2269 ], [ %2236, %2246 ]
  %2277 = phi i32 [ %2274, %2269 ], [ %2223, %2246 ]
  %2278 = phi i64 [ %2096, %2269 ], [ %2219, %2246 ]
  %2279 = phi i32 [ %2270, %2269 ], [ %1505, %2246 ]
  %2280 = phi i32 [ %2273, %2269 ], [ %1504, %2246 ]
  %2281 = icmp eq i32 %2277, 0
  br i1 %2281, label %2282, label %2377

2282:                                             ; preds = %2275
  %2283 = zext i32 %2276 to i64
  store i64 %2283, i64* %39, align 8
  %2284 = load i8, i8* %406, align 2
  %2285 = icmp ult i8 %2284, 2
  %2286 = select i1 %2285, i8 %2284, i8 2
  call fastcc void @block_yrd(%struct.VP9_COMP* %0, %struct.macroblock* %1, %struct.RD_COST* nonnull %27, i32* nonnull %40, i64* nonnull %39, i8 zeroext %6, i8 zeroext %2286, i32 1, i32 0)
  %2287 = load i32, i32* %40, align 4
  %2288 = trunc i32 %2287 to i8
  store i8 %2288, i8* %1433, align 4
  %2289 = icmp eq i32 %2287, 0
  br i1 %2289, label %2316, label %2290

2290:                                             ; preds = %2282
  %2291 = load %struct.frame_contexts*, %struct.frame_contexts** %261, align 8
  %2292 = load %struct.MODE_INFO*, %struct.MODE_INFO** %263, align 8
  %2293 = load %struct.MODE_INFO*, %struct.MODE_INFO** %265, align 8
  %2294 = icmp eq %struct.MODE_INFO* %2292, null
  br i1 %2294, label %2299, label %2295

2295:                                             ; preds = %2290
  %2296 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %2292, i64 0, i32 3
  %2297 = load i8, i8* %2296, align 1
  %2298 = sext i8 %2297 to i64
  br label %2299

2299:                                             ; preds = %2295, %2290
  %2300 = phi i64 [ %2298, %2295 ], [ 0, %2290 ]
  %2301 = icmp eq %struct.MODE_INFO* %2293, null
  br i1 %2301, label %2306, label %2302

2302:                                             ; preds = %2299
  %2303 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %2293, i64 0, i32 3
  %2304 = load i8, i8* %2303, align 1
  %2305 = sext i8 %2304 to i64
  br label %2306

2306:                                             ; preds = %2299, %2302
  %2307 = phi i64 [ %2305, %2302 ], [ 0, %2299 ]
  %2308 = add nsw i64 %2307, %2300
  %2309 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %2291, i64 0, i32 11, i64 %2308
  %2310 = load i8, i8* %2309, align 1
  %2311 = zext i8 %2310 to i64
  %2312 = sub nuw nsw i64 256, %2311
  %2313 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %2312
  %2314 = load i16, i16* %2313, align 2
  %2315 = zext i16 %2314 to i32
  store i32 %2315, i32* %1436, align 8
  br label %2363

2316:                                             ; preds = %2282
  %2317 = load i32, i32* %1436, align 8
  %2318 = sext i32 %2317 to i64
  %2319 = load i32, i32* %67, align 4
  %2320 = sext i32 %2319 to i64
  %2321 = mul nsw i64 %2320, %2318
  %2322 = add nsw i64 %2321, 256
  %2323 = ashr i64 %2322, 9
  %2324 = load i64, i64* %1437, align 8
  %2325 = load i32, i32* %73, align 8
  %2326 = zext i32 %2325 to i64
  %2327 = shl i64 %2324, %2326
  %2328 = add nsw i64 %2323, %2327
  %2329 = load i64, i64* %39, align 8
  %2330 = shl i64 %2329, %2326
  %2331 = icmp slt i64 %2328, %2330
  %2332 = load %struct.frame_contexts*, %struct.frame_contexts** %261, align 8
  %2333 = load %struct.MODE_INFO*, %struct.MODE_INFO** %263, align 8
  %2334 = load %struct.MODE_INFO*, %struct.MODE_INFO** %265, align 8
  %2335 = icmp eq %struct.MODE_INFO* %2333, null
  br i1 %2335, label %2340, label %2336

2336:                                             ; preds = %2316
  %2337 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %2333, i64 0, i32 3
  %2338 = load i8, i8* %2337, align 1
  %2339 = sext i8 %2338 to i64
  br label %2340

2340:                                             ; preds = %2336, %2316
  %2341 = phi i64 [ %2339, %2336 ], [ 0, %2316 ]
  %2342 = icmp eq %struct.MODE_INFO* %2334, null
  br i1 %2342, label %2347, label %2343

2343:                                             ; preds = %2340
  %2344 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %2334, i64 0, i32 3
  %2345 = load i8, i8* %2344, align 1
  %2346 = sext i8 %2345 to i64
  br label %2347

2347:                                             ; preds = %2340, %2343
  %2348 = phi i64 [ %2346, %2343 ], [ 0, %2340 ]
  %2349 = add nsw i64 %2348, %2341
  %2350 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %2332, i64 0, i32 11, i64 %2349
  %2351 = load i8, i8* %2350, align 1
  %2352 = zext i8 %2351 to i64
  br i1 %2331, label %2353, label %2358

2353:                                             ; preds = %2347
  %2354 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %2352
  %2355 = load i16, i16* %2354, align 2
  %2356 = zext i16 %2355 to i32
  %2357 = add nsw i32 %2317, %2356
  store i32 %2357, i32* %1436, align 8
  br label %2363

2358:                                             ; preds = %2347
  %2359 = sub nuw nsw i64 256, %2352
  %2360 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %2359
  %2361 = load i16, i16* %2360, align 2
  %2362 = zext i16 %2361 to i32
  store i32 %2362, i32* %1436, align 8
  store i64 %2329, i64* %1437, align 8
  store i8 1, i8* %1433, align 4
  br label %2363

2363:                                             ; preds = %2353, %2358, %2306
  %2364 = phi i32 [ %2357, %2353 ], [ %2362, %2358 ], [ %2315, %2306 ]
  %2365 = load i8, i8* %95, align 4
  %2366 = icmp eq i8 %2365, 4
  br i1 %2366, label %2367, label %2418

2367:                                             ; preds = %2363
  %2368 = load i16, i16* %1423, align 4
  %2369 = load i16, i16* %1424, align 2
  %2370 = or i16 %2369, %2368
  %2371 = and i16 %2370, 7
  %2372 = icmp eq i16 %2371, 0
  br i1 %2372, label %2418, label %2373

2373:                                             ; preds = %2367
  %2374 = call i32 @vp9_get_switchable_rate(%struct.VP9_COMP* %0, %struct.macroblockd* %50) #3
  %2375 = load i32, i32* %1436, align 8
  %2376 = add nsw i32 %2375, %2374
  store i32 %2376, i32* %1436, align 8
  br label %2418

2377:                                             ; preds = %2275
  %2378 = load i8, i8* %95, align 4
  %2379 = icmp eq i8 %2378, 4
  br i1 %2379, label %2380, label %2390

2380:                                             ; preds = %2377
  %2381 = load i16, i16* %1423, align 4
  %2382 = load i16, i16* %1424, align 2
  %2383 = or i16 %2382, %2381
  %2384 = and i16 %2383, 7
  %2385 = icmp eq i16 %2384, 0
  br i1 %2385, label %2390, label %2386

2386:                                             ; preds = %2380
  %2387 = call i32 @vp9_get_switchable_rate(%struct.VP9_COMP* %0, %struct.macroblockd* %50) #3
  %2388 = load i32, i32* %1436, align 8
  %2389 = add nsw i32 %2388, %2387
  store i32 %2389, i32* %1436, align 8
  br label %2390

2390:                                             ; preds = %2380, %2386, %2377
  %2391 = load %struct.frame_contexts*, %struct.frame_contexts** %261, align 8
  %2392 = load %struct.MODE_INFO*, %struct.MODE_INFO** %263, align 8
  %2393 = load %struct.MODE_INFO*, %struct.MODE_INFO** %265, align 8
  %2394 = icmp eq %struct.MODE_INFO* %2392, null
  br i1 %2394, label %2399, label %2395

2395:                                             ; preds = %2390
  %2396 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %2392, i64 0, i32 3
  %2397 = load i8, i8* %2396, align 1
  %2398 = sext i8 %2397 to i64
  br label %2399

2399:                                             ; preds = %2395, %2390
  %2400 = phi i64 [ %2398, %2395 ], [ 0, %2390 ]
  %2401 = icmp eq %struct.MODE_INFO* %2393, null
  br i1 %2401, label %2406, label %2402

2402:                                             ; preds = %2399
  %2403 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %2393, i64 0, i32 3
  %2404 = load i8, i8* %2403, align 1
  %2405 = sext i8 %2404 to i64
  br label %2406

2406:                                             ; preds = %2402, %2399
  %2407 = phi i64 [ %2405, %2402 ], [ 0, %2399 ]
  %2408 = add nsw i64 %2407, %2400
  %2409 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %2391, i64 0, i32 11, i64 %2408
  %2410 = load i8, i8* %2409, align 1
  %2411 = zext i8 %2410 to i64
  %2412 = sub nuw nsw i64 256, %2411
  %2413 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %2412
  %2414 = load i16, i16* %2413, align 2
  %2415 = zext i16 %2414 to i32
  %2416 = load i32, i32* %1436, align 8
  %2417 = add nsw i32 %2416, %2415
  store i32 %2417, i32* %1436, align 8
  br label %2451

2418:                                             ; preds = %2367, %2363, %2373
  %2419 = phi i32 [ %2364, %2367 ], [ %2364, %2363 ], [ %2376, %2373 ]
  %2420 = load i8, i8* %1441, align 8
  %2421 = icmp eq i8 %2420, 0
  br i1 %2421, label %2422, label %2425

2422:                                             ; preds = %2418
  %2423 = load i8, i8* %1442, align 1
  %2424 = icmp eq i8 %2423, 0
  br i1 %2424, label %2451, label %2425

2425:                                             ; preds = %2422, %2418
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1443) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1443, i8 -86, i64 24, i1 false)
  %2426 = load i32, i32* %1444, align 8
  %2427 = sext i32 %2426 to i64
  %2428 = load i32, i32* %1445, align 4
  %2429 = sext i32 %2428 to i64
  %2430 = getelementptr inbounds [13 x [2 x [2 x i8]]], [13 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %77, i64 %2427, i64 %2429
  %2431 = load i8, i8* %2430, align 1
  %2432 = xor i1 %2421, true
  %2433 = load i32, i32* %1425, align 8
  %2434 = icmp eq i32 %2433, 0
  %2435 = and i1 %2434, %2432
  br i1 %2435, label %2436, label %2437

2436:                                             ; preds = %2425
  call void @vp9_build_inter_predictors_sbp(%struct.macroblockd* %50, i32 %3, i32 %4, i8 zeroext %6, i32 1) #3
  store i32 1, i32* %1425, align 8
  br label %2437

2437:                                             ; preds = %2425, %2436
  %2438 = load i8, i8* %1442, align 1
  %2439 = icmp ne i8 %2438, 0
  %2440 = load i32, i32* %1446, align 4
  %2441 = icmp eq i32 %2440, 0
  %2442 = and i1 %2439, %2441
  br i1 %2442, label %2443, label %2444

2443:                                             ; preds = %2437
  call void @vp9_build_inter_predictors_sbp(%struct.macroblockd* %50, i32 %3, i32 %4, i8 zeroext %6, i32 2) #3
  store i32 1, i32* %1446, align 4
  br label %2444

2444:                                             ; preds = %2437, %2443
  call fastcc void @model_rd_for_sb_uv(%struct.VP9_COMP* %0, i8 zeroext %2431, %struct.macroblock* %1, %struct.macroblockd* %50, %struct.RD_COST* nonnull %44, i32* nonnull %29, i32* nonnull %30, i32 1, i32 2)
  %2445 = load i32, i32* %1447, align 8
  %2446 = load i32, i32* %1436, align 8
  %2447 = add nsw i32 %2446, %2445
  store i32 %2447, i32* %1436, align 8
  %2448 = load i64, i64* %1448, align 8
  %2449 = load i64, i64* %1437, align 8
  %2450 = add nsw i64 %2449, %2448
  store i64 %2450, i64* %1437, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1443) #3
  br label %2451

2451:                                             ; preds = %2406, %2422, %2444
  %2452 = phi i32 [ %2417, %2406 ], [ %2419, %2422 ], [ %2447, %2444 ]
  %2453 = load i32, i32* %38, align 4
  %2454 = add nsw i32 %2452, %2453
  store i32 %2454, i32* %1436, align 8
  %2455 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %1390, align 16
  %2456 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %2455, i64 0, i32 1, i64 %1541
  %2457 = load i8, i8* %2456, align 1
  %2458 = zext i8 %2457 to i64
  %2459 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 111, i64 %2458, i64 %3589
  %2460 = load i32, i32* %2459, align 4
  %2461 = add i32 %2460, %2454
  %2462 = getelementptr inbounds [4 x i32], [4 x i32]* %35, i64 0, i64 %1541
  %2463 = load i32, i32* %2462, align 4
  %2464 = add nsw i32 %2463, %2461
  store i32 %2464, i32* %1436, align 8
  %2465 = sext i32 %2464 to i64
  %2466 = load i32, i32* %67, align 4
  %2467 = sext i32 %2466 to i64
  %2468 = mul nsw i64 %2467, %2465
  %2469 = add nsw i64 %2468, 256
  %2470 = ashr i64 %2469, 9
  %2471 = load i64, i64* %1437, align 8
  %2472 = load i32, i32* %73, align 8
  %2473 = zext i32 %2472 to i64
  %2474 = shl i64 %2471, %2473
  %2475 = add nsw i64 %2470, %2474
  store i64 %2475, i64* %1449, align 8
  %2476 = load i32, i32* %1327, align 4
  %2477 = icmp eq i32 %2476, 1
  br i1 %2477, label %2478, label %2591

2478:                                             ; preds = %2451
  %2479 = load i32, i32* %713, align 8
  %2480 = icmp sgt i32 %2479, 4
  br i1 %2480, label %2481, label %2591

2481:                                             ; preds = %2478
  %2482 = load i32, i32* %1355, align 4
  %2483 = icmp eq i32 %2482, 1
  br i1 %2483, label %2591, label %2484

2484:                                             ; preds = %2481
  %2485 = bitcast %union.int_mv* %2072 to %struct.mv*
  %2486 = bitcast %union.int_mv* %2072 to i16*
  %2487 = load i16, i16* %2486, align 4
  %2488 = sext i16 %2487 to i32
  %2489 = getelementptr inbounds %struct.mv, %struct.mv* %2485, i64 0, i32 1
  %2490 = load i16, i16* %2489, align 2
  %2491 = sext i16 %2490 to i32
  %2492 = load i8, i8* %1450, align 4
  %2493 = load i8, i8* %1451, align 2
  br i1 %3641, label %2494, label %2558

2494:                                             ; preds = %2484
  %2495 = load %struct.MODE_INFO*, %struct.MODE_INFO** %263, align 8
  %2496 = icmp eq %struct.MODE_INFO* %2495, null
  br i1 %2496, label %2509, label %2497

2497:                                             ; preds = %2494
  %2498 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %2495, i64 0, i32 9, i64 0
  %2499 = getelementptr inbounds %union.int_mv, %union.int_mv* %2498, i64 0, i32 0
  %2500 = load i32, i32* %2499, align 4
  %2501 = icmp ne i32 %2500, -2147450880
  %2502 = zext i1 %2501 to i32
  %2503 = bitcast %union.int_mv* %2498 to %struct.mv*
  %2504 = shl i32 %2500, 16
  %2505 = ashr exact i32 %2504, 16
  %2506 = getelementptr inbounds %struct.mv, %struct.mv* %2503, i64 0, i32 1
  %2507 = load i16, i16* %2506, align 2
  %2508 = sext i16 %2507 to i32
  br label %2509

2509:                                             ; preds = %2497, %2494
  %2510 = phi i32 [ %2502, %2497 ], [ 0, %2494 ]
  %2511 = phi i32 [ %2505, %2497 ], [ 0, %2494 ]
  %2512 = phi i32 [ %2508, %2497 ], [ 0, %2494 ]
  %2513 = load %struct.MODE_INFO*, %struct.MODE_INFO** %265, align 8
  %2514 = icmp eq %struct.MODE_INFO* %2513, null
  br i1 %2514, label %2515, label %2517

2515:                                             ; preds = %2509
  %2516 = icmp eq i32 %2510, 0
  br i1 %2516, label %2541, label %2542

2517:                                             ; preds = %2509
  %2518 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %2513, i64 0, i32 9, i64 0
  %2519 = getelementptr inbounds %union.int_mv, %union.int_mv* %2518, i64 0, i32 0
  %2520 = load i32, i32* %2519, align 4
  %2521 = icmp ne i32 %2520, -2147450880
  %2522 = bitcast %union.int_mv* %2518 to %struct.mv*
  %2523 = shl i32 %2520, 16
  %2524 = ashr exact i32 %2523, 16
  %2525 = getelementptr inbounds %struct.mv, %struct.mv* %2522, i64 0, i32 1
  %2526 = load i16, i16* %2525, align 2
  %2527 = sext i16 %2526 to i32
  %2528 = icmp ne i32 %2510, 0
  %2529 = and i1 %2528, %2521
  br i1 %2529, label %2530, label %2537

2530:                                             ; preds = %2517
  %2531 = add nsw i32 %2511, 1
  %2532 = add nsw i32 %2531, %2524
  %2533 = ashr i32 %2532, 1
  %2534 = add nsw i32 %2512, 1
  %2535 = add nsw i32 %2534, %2527
  %2536 = ashr i32 %2535, 1
  br label %2542

2537:                                             ; preds = %2517
  %2538 = or i1 %2528, %2521
  %2539 = select i1 %2528, i32 %2511, i32 %2524
  %2540 = select i1 %2528, i32 %2512, i32 %2527
  br i1 %2538, label %2542, label %2541

2541:                                             ; preds = %2537, %2515
  br label %2542

2542:                                             ; preds = %2541, %2537, %2530, %2515
  %2543 = phi i32 [ %2533, %2530 ], [ %2539, %2537 ], [ %2511, %2515 ], [ 0, %2541 ]
  %2544 = phi i32 [ %2536, %2530 ], [ %2540, %2537 ], [ %2512, %2515 ], [ 0, %2541 ]
  %2545 = sub nsw i32 48, %2488
  %2546 = add nsw i32 %2545, %2543
  %2547 = icmp ugt i32 %2546, 96
  %2548 = sub nsw i32 48, %2491
  %2549 = add nsw i32 %2548, %2544
  %2550 = icmp ugt i32 %2549, 96
  %2551 = or i1 %2547, %2550
  br i1 %2551, label %2552, label %2558

2552:                                             ; preds = %2542
  br i1 %1452, label %2553, label %2555

2553:                                             ; preds = %2552
  %2554 = shl i64 %2475, 1
  store i64 %2554, i64* %1449, align 8
  br label %2558

2555:                                             ; preds = %2552
  %2556 = mul nsw i64 %2475, 3
  %2557 = ashr i64 %2556, 1
  store i64 %2557, i64* %1449, align 8
  br label %2558

2558:                                             ; preds = %2555, %2553, %2542, %2484
  %2559 = phi i64 [ %2557, %2555 ], [ %2554, %2553 ], [ %2475, %2542 ], [ %2475, %2484 ]
  %2560 = load i32, i32* %1453, align 4
  %2561 = icmp eq i32 %2560, 0
  br i1 %2561, label %2576, label %2562

2562:                                             ; preds = %2558
  %2563 = load i32, i32* %1454, align 4
  %2564 = icmp ugt i32 %2563, 1
  br i1 %2564, label %2565, label %2576

2565:                                             ; preds = %2562
  %2566 = and i1 %1455, %3643
  %2567 = add nsw i32 %2488, 7
  %2568 = icmp ult i32 %2567, 15
  %2569 = and i1 %2566, %2568
  %2570 = add nsw i32 %2491, 7
  %2571 = icmp ult i32 %2570, 15
  %2572 = and i1 %2571, %2569
  br i1 %2572, label %2573, label %2576

2573:                                             ; preds = %2565
  %2574 = ashr i64 %2559, 3
  %2575 = mul nsw i64 %2574, 7
  store i64 %2575, i64* %1449, align 8
  br label %2591

2576:                                             ; preds = %2565, %2562, %2558
  %2577 = icmp eq i8 %2492, 0
  %2578 = icmp ne i8 %2493, 0
  %2579 = or i1 %2577, %2578
  br i1 %2579, label %2591, label %2580

2580:                                             ; preds = %2576
  %2581 = and i1 %1456, %3643
  %2582 = add nsw i32 %2488, 15
  %2583 = icmp ult i32 %2582, 31
  %2584 = and i1 %2581, %2583
  %2585 = add nsw i32 %2491, 15
  %2586 = icmp ult i32 %2585, 31
  %2587 = and i1 %2586, %2584
  br i1 %2587, label %2588, label %2591

2588:                                             ; preds = %2580
  %2589 = ashr i64 %2559, 3
  %2590 = mul nsw i64 %2589, 7
  store i64 %2590, i64* %1449, align 8
  br label %2591

2591:                                             ; preds = %2588, %2580, %2576, %2573, %2481, %2478, %2451
  %2592 = load i32, i32* %1457, align 4
  %2593 = icmp eq i32 %2592, 0
  br i1 %2593, label %2751, label %2594

2594:                                             ; preds = %2591
  %2595 = load i32, i32* %1458, align 4
  %2596 = icmp ne i32 %2595, 0
  %2597 = or i1 %150, %2596
  br i1 %2597, label %2751, label %2598

2598:                                             ; preds = %2594
  %2599 = load i32, i32* %1459, align 4
  %2600 = icmp eq i32 %2599, 0
  br i1 %2600, label %2601, label %2751

2601:                                             ; preds = %2598
  %2602 = load i32, i32* %29, align 4
  %2603 = load i32, i32* %30, align 4
  %2604 = load i32, i32* %1444, align 8
  %2605 = sext i32 %2604 to i64
  %2606 = load i32, i32* %1445, align 4
  %2607 = sext i32 %2606 to i64
  %2608 = getelementptr inbounds [13 x [2 x [2 x i8]]], [13 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %77, i64 %2605, i64 %2607
  %2609 = load i8, i8* %2608, align 1
  %2610 = load i32, i32* %134, align 4
  %2611 = icmp ne i32 %2610, 0
  %2612 = and i1 %1612, %2611
  br i1 %2612, label %2734, label %2613

2613:                                             ; preds = %2601
  %2614 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %51, align 8
  %2615 = load %struct.MODE_INFO*, %struct.MODE_INFO** %2614, align 8
  %2616 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %2615, i64 0, i32 9, i64 0
  %2617 = bitcast %union.int_mv* %2616 to i16*
  %2618 = load i16, i16* %2617, align 4
  %2619 = add i16 %2618, 64
  %2620 = icmp ugt i16 %2619, 128
  br i1 %2620, label %2677, label %2621

2621:                                             ; preds = %2613
  %2622 = bitcast %union.int_mv* %2616 to %struct.mv*
  %2623 = getelementptr inbounds %struct.mv, %struct.mv* %2622, i64 0, i32 1
  %2624 = load i16, i16* %2623, align 2
  %2625 = add i16 %2624, 64
  %2626 = icmp ugt i16 %2625, 128
  br i1 %2626, label %2677, label %2627

2627:                                             ; preds = %2621
  %2628 = load i32, i32* %163, align 4
  %2629 = icmp sgt i32 %2628, 0
  br i1 %2629, label %2630, label %2677

2630:                                             ; preds = %2627
  %2631 = shl i32 %2628, 4
  %2632 = icmp ult i32 %2631, 36000
  %2633 = select i1 %2632, i32 %2631, i32 36000
  %2634 = load i32, i32* %1460, align 8
  %2635 = shl i32 %2634, 1
  %2636 = add nsw i32 %2635, -16
  %2637 = load i16*, i16** %1461, align 8
  %2638 = getelementptr inbounds i16, i16* %2637, i64 1
  %2639 = load i16, i16* %2638, align 2
  %2640 = sext i16 %2639 to i32
  %2641 = mul nsw i32 %2640, %2640
  %2642 = lshr i32 %2641, 3
  %2643 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %1462, align 8
  %2644 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2643, i64 0, i32 29
  %2645 = load i32, i32* %2644, align 8
  %2646 = and i32 %2645, 8
  %2647 = icmp ne i32 %2646, 0
  %2648 = icmp sgt i32 %2636, 0
  %2649 = and i1 %2648, %2647
  br i1 %2649, label %2650, label %2655

2650:                                             ; preds = %2630
  %2651 = add nsw i32 %2635, -17
  %2652 = shl i32 1, %2651
  %2653 = add i32 %2642, %2652
  %2654 = lshr i32 %2653, %2636
  br label %2655

2655:                                             ; preds = %2650, %2630
  %2656 = phi i32 [ %2654, %2650 ], [ %2642, %2630 ]
  %2657 = icmp slt i32 %2656, %2633
  %2658 = icmp slt i32 %2656, 36000
  %2659 = select i1 %2658, i32 %2656, i32 36000
  %2660 = select i1 %2657, i32 %2633, i32 %2659
  %2661 = load i8, i8* %1386, align 1
  %2662 = zext i8 %2661 to i32
  %2663 = load i8, i8* %1387, align 1
  %2664 = zext i8 %2663 to i32
  %2665 = sub nsw i32 8, %2662
  %2666 = sub nsw i32 %2665, %2664
  %2667 = lshr i32 %2660, %2666
  %2668 = load i16, i16* %2637, align 2
  %2669 = sext i16 %2668 to i32
  %2670 = mul nsw i32 %2669, %2669
  %2671 = lshr i32 %2670, 6
  br i1 %2649, label %2672, label %2677

2672:                                             ; preds = %2655
  %2673 = add nsw i32 %2635, -17
  %2674 = shl i32 1, %2673
  %2675 = add i32 %2671, %2674
  %2676 = lshr i32 %2675, %2636
  br label %2677

2677:                                             ; preds = %2672, %2655, %2627, %2621, %2613
  %2678 = phi i32 [ %2667, %2672 ], [ %2667, %2655 ], [ 0, %2627 ], [ 0, %2613 ], [ 0, %2621 ]
  %2679 = phi i32 [ %2676, %2672 ], [ %2671, %2655 ], [ 0, %2627 ], [ 0, %2613 ], [ 0, %2621 ]
  %2680 = icmp ult i32 %2678, %2602
  %2681 = sub i32 %2603, %2602
  %2682 = icmp ugt i32 %2681, %2679
  %2683 = or i1 %2680, %2682
  br i1 %2683, label %2734, label %2684

2684:                                             ; preds = %2677
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1463) #3
  store i32 -1431655766, i32* %18, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1464) #3
  store i32 -1431655766, i32* %19, align 4
  %2685 = load i8, i8* %1451, align 2
  %2686 = icmp eq i8 %2685, 0
  %2687 = select i1 %2686, i32 %2678, i32 0
  %2688 = select i1 %2686, i32 %2679, i32 0
  %2689 = load i32, i32* %1425, align 8
  %2690 = icmp eq i32 %2689, 0
  %2691 = load i32, i32* %1434, align 4
  %2692 = icmp eq i32 %2691, 0
  %2693 = or i1 %2690, %2692
  br i1 %2693, label %2694, label %2695

2694:                                             ; preds = %2684
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1466, i8* align 16 %3578, i64 16, i1 false) #3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1468, i8* align 16 %3577, i64 16, i1 false) #3
  call void @vp9_build_inter_predictors_sbuv(%struct.macroblockd* %50, i32 %3, i32 %4, i8 zeroext %6) #3
  br label %2695

2695:                                             ; preds = %2684, %2694
  %2696 = zext i8 %2609 to i64
  %2697 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %2696, i32 2
  %2698 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %2697, align 8
  %2699 = load i8*, i8** %1469, align 8
  %2700 = load i32, i32* %1470, align 8
  %2701 = load i8*, i8** %1471, align 8
  %2702 = load i32, i32* %1472, align 8
  %2703 = call i32 %2698(i8* %2699, i32 %2700, i8* %2701, i32 %2702, i32* nonnull %18) #3
  %2704 = shl i32 %2703, 2
  %2705 = icmp ugt i32 %2704, %2687
  br i1 %2705, label %2733, label %2706

2706:                                             ; preds = %2695
  %2707 = load i32, i32* %18, align 4
  %2708 = sub i32 %2707, %2703
  %2709 = icmp ugt i32 %2708, %2688
  br i1 %2709, label %2733, label %2710

2710:                                             ; preds = %2706
  %2711 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %2697, align 8
  %2712 = load i8*, i8** %1473, align 8
  %2713 = load i32, i32* %1474, align 8
  %2714 = load i8*, i8** %1475, align 8
  %2715 = load i32, i32* %1476, align 8
  %2716 = call i32 %2711(i8* %2712, i32 %2713, i8* %2714, i32 %2715, i32* nonnull %19) #3
  %2717 = shl i32 %2716, 2
  %2718 = icmp ugt i32 %2717, %2687
  br i1 %2718, label %2733, label %2719

2719:                                             ; preds = %2710
  %2720 = load i32, i32* %19, align 4
  %2721 = sub i32 %2720, %2716
  %2722 = icmp ugt i32 %2721, %2688
  br i1 %2722, label %2733, label %2723

2723:                                             ; preds = %2719
  store i32 1, i32* %350, align 16
  %2724 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %1390, align 16
  %2725 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %2724, i64 0, i32 1, i64 %1541
  %2726 = load i8, i8* %2725, align 1
  %2727 = zext i8 %2726 to i64
  %2728 = add nsw i64 %2027, -10
  %2729 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 111, i64 %2727, i64 %2728
  %2730 = load i32, i32* %2729, align 4
  store i32 %2730, i32* %1436, align 8
  %2731 = shl i32 %2603, 4
  %2732 = zext i32 %2731 to i64
  store i64 %2732, i64* %1437, align 8
  br label %2733

2733:                                             ; preds = %2723, %2719, %2710, %2706, %2695
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1464) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1463) #3
  br label %2734

2734:                                             ; preds = %2601, %2677, %2733
  %2735 = load i32, i32* %350, align 16
  %2736 = icmp eq i32 %2735, 0
  br i1 %2736, label %2751, label %2737

2737:                                             ; preds = %2734
  %2738 = load i32, i32* %1436, align 8
  %2739 = add nsw i32 %2738, %2453
  store i32 %2739, i32* %1436, align 8
  %2740 = sext i32 %2739 to i64
  %2741 = load i32, i32* %67, align 4
  %2742 = sext i32 %2741 to i64
  %2743 = mul nsw i64 %2742, %2740
  %2744 = add nsw i64 %2743, 256
  %2745 = ashr i64 %2744, 9
  %2746 = load i64, i64* %1437, align 8
  %2747 = load i32, i32* %73, align 8
  %2748 = zext i32 %2747 to i64
  %2749 = shl i64 %2746, %2748
  %2750 = add nsw i64 %2745, %2749
  store i64 %2750, i64* %1449, align 8
  br label %2751

2751:                                             ; preds = %2734, %2598, %2591, %2737, %2594
  %2752 = load i32, i32* %1355, align 4
  %2753 = icmp eq i32 %2752, 1
  br i1 %2753, label %2754, label %2775

2754:                                             ; preds = %2751
  br i1 %150, label %2759, label %2755

2755:                                             ; preds = %2754
  %2756 = load i32, i32* %1459, align 4
  %2757 = icmp ne i32 %2756, 0
  %2758 = and i1 %3643, %2757
  br i1 %2758, label %2760, label %2775

2759:                                             ; preds = %2754
  br i1 %3643, label %2760, label %2775

2760:                                             ; preds = %2755, %2759
  %2761 = load i32, i32* %2073, align 4
  %2762 = icmp eq i32 %2761, 0
  br i1 %2762, label %2763, label %2775

2763:                                             ; preds = %2760
  %2764 = load i32, i32* %258, align 8
  %2765 = icmp eq i32 %2764, 0
  br i1 %2765, label %2766, label %2775

2766:                                             ; preds = %2763
  %2767 = load i32, i32* %164, align 16
  %2768 = icmp eq i32 %2767, 0
  %2769 = load i32, i32* %30, align 4
  %2770 = icmp ne i32 %2769, 0
  %2771 = and i1 %2768, %2770
  br i1 %2771, label %2772, label %2775

2772:                                             ; preds = %2766
  %2773 = load i64, i64* %1449, align 8
  %2774 = shl i64 %2773, 2
  store i64 %2774, i64* %1449, align 8
  br label %2775

2775:                                             ; preds = %2755, %2772, %2766, %2763, %2760, %2759, %2751
  %2776 = load i32, i32* %448, align 16
  %2777 = icmp sgt i32 %2776, 0
  %2778 = and i1 %1477, %2777
  br i1 %2778, label %2779, label %2789

2779:                                             ; preds = %2775
  %2780 = load i32, i32* %1478, align 4
  %2781 = icmp eq i32 %2780, 0
  br i1 %2781, label %2789, label %2782

2782:                                             ; preds = %2779
  %2783 = load i32, i32* %30, align 4
  call void @vp9_denoiser_update_frame_stats(%struct.MODE_INFO* %53, i32 %2783, i8 zeroext %1537, %struct.PICK_MODE_CONTEXT* %7) #3
  br i1 %3643, label %2784, label %2789

2784:                                             ; preds = %2782
  %2785 = load i32, i32* %2073, align 4
  %2786 = icmp eq i32 %2785, 0
  %2787 = load i64, i64* %1449, align 8
  %2788 = select i1 %2786, i64 %2787, i64 %1503
  br label %2789

2789:                                             ; preds = %2784, %2779, %2782, %2775
  %2790 = phi i64 [ %1503, %2782 ], [ %1503, %2779 ], [ %1503, %2775 ], [ %2788, %2784 ]
  %2791 = getelementptr inbounds [14 x [4 x i8]], [14 x [4 x i8]]* %25, i64 0, i64 %2027, i64 %1541
  store i8 1, i8* %2791, align 1
  %2792 = load i64, i64* %1449, align 8
  %2793 = load i64, i64* %1374, align 8
  %2794 = icmp slt i64 %2792, %2793
  br i1 %2794, label %2798, label %2795

2795:                                             ; preds = %2789
  %2796 = load i32, i32* %350, align 16
  %2797 = icmp eq i32 %2796, 0
  br i1 %2797, label %2807, label %2798

2798:                                             ; preds = %2795, %2789
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %58, i8* nonnull align 8 %57, i64 24, i1 false)
  %2799 = load i8, i8* %1439, align 1
  %2800 = load i8, i8* %406, align 2
  %2801 = load i8, i8* %1433, align 4
  br i1 %125, label %2802, label %2813

2802:                                             ; preds = %2798
  %2803 = icmp eq i64 %1510, 0
  br i1 %2803, label %2813, label %2804

2804:                                             ; preds = %2802
  %2805 = inttoptr i64 %1510 to %struct.PRED_BUFFER*
  %2806 = getelementptr inbounds %struct.PRED_BUFFER, %struct.PRED_BUFFER* %2805, i64 0, i32 2
  store i32 0, i32* %2806, align 4
  br label %2813

2807:                                             ; preds = %2795
  %2808 = icmp eq i64 %2278, 0
  %2809 = or i1 %2808, %1479
  br i1 %2809, label %2813, label %2810

2810:                                             ; preds = %2807
  %2811 = inttoptr i64 %2278 to %struct.PRED_BUFFER*
  %2812 = getelementptr inbounds %struct.PRED_BUFFER, %struct.PRED_BUFFER* %2811, i64 0, i32 2
  store i32 0, i32* %2812, align 4
  br label %2813

2813:                                             ; preds = %2807, %2810, %2804, %2802, %2798
  %2814 = phi i8 [ %2799, %2798 ], [ %1516, %2807 ], [ %2799, %2802 ], [ %2799, %2804 ], [ %1516, %2810 ]
  %2815 = phi i8 [ %2801, %2798 ], [ %1515, %2807 ], [ %2801, %2802 ], [ %2801, %2804 ], [ %1515, %2810 ]
  %2816 = phi i8 [ %1534, %2798 ], [ %1514, %2807 ], [ %1534, %2802 ], [ %1534, %2804 ], [ %1514, %2810 ]
  %2817 = phi i8 [ %1535, %2798 ], [ %1513, %2807 ], [ %1535, %2802 ], [ %1535, %2804 ], [ %1513, %2810 ]
  %2818 = phi i8 [ %2800, %2798 ], [ %1512, %2807 ], [ %2800, %2802 ], [ %2800, %2804 ], [ %1512, %2810 ]
  %2819 = phi i8 [ %1537, %2798 ], [ %1511, %2807 ], [ %1537, %2802 ], [ %1537, %2804 ], [ %1511, %2810 ]
  %2820 = phi i64 [ %1510, %2798 ], [ %1510, %2807 ], [ %2278, %2802 ], [ %2278, %2804 ], [ %1510, %2810 ]
  %2821 = phi i32 [ %2277, %2798 ], [ %1506, %2807 ], [ %2277, %2802 ], [ %2277, %2804 ], [ %1506, %2810 ]
  %2822 = load i32, i32* %350, align 16
  %2823 = icmp eq i32 %2822, 0
  br i1 %2823, label %2828, label %2824

2824:                                             ; preds = %2813
  %2825 = load i8, i8* %1481, align 2
  %2826 = icmp eq i8 %2825, 0
  %2827 = and i1 %1480, %2826
  br i1 %2827, label %2828, label %2838

2828:                                             ; preds = %2824, %2813
  %2829 = icmp eq i32 %2821, 0
  %2830 = icmp eq i64 %1502, 0
  %2831 = or i1 %2830, %2829
  %2832 = or i1 %150, %2831
  br i1 %2832, label %2838, label %2833

2833:                                             ; preds = %2828
  %2834 = load i8, i8* %1481, align 2
  %2835 = icmp eq i8 %2834, 0
  %2836 = and i1 %1480, %2835
  br i1 %2836, label %2838, label %2837

2837:                                             ; preds = %2833
  store i32 1, i32* %350, align 16
  br label %2838

2838:                                             ; preds = %2035, %3605, %3619, %3633, %2833, %2824, %2017, %2022, %2019, %1934, %2828, %2066, %1872, %1845, %1769, %1753, %1745, %1734, %1722, %1717, %1707, %1691, %1679, %1681, %1664, %1661, %1653, %1645, %1625, %1616, %1621, %1604, %1596, %1593, %1581, %1585, %1565, %1548, %1550, %1540, %1533, %2837
  %2839 = phi i8 [ %1516, %1533 ], [ %1516, %1593 ], [ %1516, %1596 ], [ %1516, %1616 ], [ %1516, %1621 ], [ %1516, %1625 ], [ %1516, %1664 ], [ %1516, %1722 ], [ %2814, %2828 ], [ %2814, %2837 ], [ %2814, %2824 ], [ %1516, %2066 ], [ %1516, %1872 ], [ %1516, %1845 ], [ %1516, %1769 ], [ %1516, %1753 ], [ %1516, %1745 ], [ %1516, %1734 ], [ %1516, %1717 ], [ %1516, %1707 ], [ %1516, %1691 ], [ %1516, %1681 ], [ %1516, %1679 ], [ %1516, %1661 ], [ %1516, %1653 ], [ %1516, %1645 ], [ %1516, %1604 ], [ %1516, %1585 ], [ %1516, %1581 ], [ %1516, %1565 ], [ %1516, %1550 ], [ %1516, %1548 ], [ %1516, %1540 ], [ %1516, %1934 ], [ %1516, %2019 ], [ %1516, %2022 ], [ %1516, %2017 ], [ %2814, %2833 ], [ %1516, %3633 ], [ %1516, %3619 ], [ %1516, %3605 ], [ %1516, %2035 ]
  %2840 = phi i8 [ %1515, %1533 ], [ %1515, %1593 ], [ %1515, %1596 ], [ %1515, %1616 ], [ %1515, %1621 ], [ %1515, %1625 ], [ %1515, %1664 ], [ %1515, %1722 ], [ %2815, %2828 ], [ %2815, %2837 ], [ %2815, %2824 ], [ %1515, %2066 ], [ %1515, %1872 ], [ %1515, %1845 ], [ %1515, %1769 ], [ %1515, %1753 ], [ %1515, %1745 ], [ %1515, %1734 ], [ %1515, %1717 ], [ %1515, %1707 ], [ %1515, %1691 ], [ %1515, %1681 ], [ %1515, %1679 ], [ %1515, %1661 ], [ %1515, %1653 ], [ %1515, %1645 ], [ %1515, %1604 ], [ %1515, %1585 ], [ %1515, %1581 ], [ %1515, %1565 ], [ %1515, %1550 ], [ %1515, %1548 ], [ %1515, %1540 ], [ %1515, %1934 ], [ %1515, %2019 ], [ %1515, %2022 ], [ %1515, %2017 ], [ %2815, %2833 ], [ %1515, %3633 ], [ %1515, %3619 ], [ %1515, %3605 ], [ %1515, %2035 ]
  %2841 = phi i8 [ %1514, %1533 ], [ %1514, %1593 ], [ %1514, %1596 ], [ %1514, %1616 ], [ %1514, %1621 ], [ %1514, %1625 ], [ %1514, %1664 ], [ %1514, %1722 ], [ %2816, %2828 ], [ %2816, %2837 ], [ %2816, %2824 ], [ %1514, %2066 ], [ %1514, %1872 ], [ %1514, %1845 ], [ %1514, %1769 ], [ %1514, %1753 ], [ %1514, %1745 ], [ %1514, %1734 ], [ %1514, %1717 ], [ %1514, %1707 ], [ %1514, %1691 ], [ %1514, %1681 ], [ %1514, %1679 ], [ %1514, %1661 ], [ %1514, %1653 ], [ %1514, %1645 ], [ %1514, %1604 ], [ %1514, %1585 ], [ %1514, %1581 ], [ %1514, %1565 ], [ %1514, %1550 ], [ %1514, %1548 ], [ %1514, %1540 ], [ %1514, %1934 ], [ %1514, %2019 ], [ %1514, %2022 ], [ %1514, %2017 ], [ %2816, %2833 ], [ %1514, %3633 ], [ %1514, %3619 ], [ %1514, %3605 ], [ %1514, %2035 ]
  %2842 = phi i8 [ %1513, %1533 ], [ %1513, %1593 ], [ %1513, %1596 ], [ %1513, %1616 ], [ %1513, %1621 ], [ %1513, %1625 ], [ %1513, %1664 ], [ %1513, %1722 ], [ %2817, %2828 ], [ %2817, %2837 ], [ %2817, %2824 ], [ %1513, %2066 ], [ %1513, %1872 ], [ %1513, %1845 ], [ %1513, %1769 ], [ %1513, %1753 ], [ %1513, %1745 ], [ %1513, %1734 ], [ %1513, %1717 ], [ %1513, %1707 ], [ %1513, %1691 ], [ %1513, %1681 ], [ %1513, %1679 ], [ %1513, %1661 ], [ %1513, %1653 ], [ %1513, %1645 ], [ %1513, %1604 ], [ %1513, %1585 ], [ %1513, %1581 ], [ %1513, %1565 ], [ %1513, %1550 ], [ %1513, %1548 ], [ %1513, %1540 ], [ %1513, %1934 ], [ %1513, %2019 ], [ %1513, %2022 ], [ %1513, %2017 ], [ %2817, %2833 ], [ %1513, %3633 ], [ %1513, %3619 ], [ %1513, %3605 ], [ %1513, %2035 ]
  %2843 = phi i8 [ %1512, %1533 ], [ %1512, %1593 ], [ %1512, %1596 ], [ %1512, %1616 ], [ %1512, %1621 ], [ %1512, %1625 ], [ %1512, %1664 ], [ %1512, %1722 ], [ %2818, %2828 ], [ %2818, %2837 ], [ %2818, %2824 ], [ %1512, %2066 ], [ %1512, %1872 ], [ %1512, %1845 ], [ %1512, %1769 ], [ %1512, %1753 ], [ %1512, %1745 ], [ %1512, %1734 ], [ %1512, %1717 ], [ %1512, %1707 ], [ %1512, %1691 ], [ %1512, %1681 ], [ %1512, %1679 ], [ %1512, %1661 ], [ %1512, %1653 ], [ %1512, %1645 ], [ %1512, %1604 ], [ %1512, %1585 ], [ %1512, %1581 ], [ %1512, %1565 ], [ %1512, %1550 ], [ %1512, %1548 ], [ %1512, %1540 ], [ %1512, %1934 ], [ %1512, %2019 ], [ %1512, %2022 ], [ %1512, %2017 ], [ %2818, %2833 ], [ %1512, %3633 ], [ %1512, %3619 ], [ %1512, %3605 ], [ %1512, %2035 ]
  %2844 = phi i8 [ %1511, %1533 ], [ %1511, %1593 ], [ %1511, %1596 ], [ %1511, %1616 ], [ %1511, %1621 ], [ %1511, %1625 ], [ %1511, %1664 ], [ %1511, %1722 ], [ %2819, %2828 ], [ %2819, %2837 ], [ %2819, %2824 ], [ %1511, %2066 ], [ %1511, %1872 ], [ %1511, %1845 ], [ %1511, %1769 ], [ %1511, %1753 ], [ %1511, %1745 ], [ %1511, %1734 ], [ %1511, %1717 ], [ %1511, %1707 ], [ %1511, %1691 ], [ %1511, %1681 ], [ %1511, %1679 ], [ %1511, %1661 ], [ %1511, %1653 ], [ %1511, %1645 ], [ %1511, %1604 ], [ %1511, %1585 ], [ %1511, %1581 ], [ %1511, %1565 ], [ %1511, %1550 ], [ %1511, %1548 ], [ %1511, %1540 ], [ %1511, %1934 ], [ %1511, %2019 ], [ %1511, %2022 ], [ %1511, %2017 ], [ %2819, %2833 ], [ %1511, %3633 ], [ %1511, %3619 ], [ %1511, %3605 ], [ %1511, %2035 ]
  %2845 = phi i64 [ %1510, %1533 ], [ %1510, %1593 ], [ %1510, %1596 ], [ %1510, %1616 ], [ %1510, %1621 ], [ %1510, %1625 ], [ %1510, %1664 ], [ %1510, %1722 ], [ %2820, %2828 ], [ %2820, %2837 ], [ %2820, %2824 ], [ %1510, %2066 ], [ %1510, %1872 ], [ %1510, %1845 ], [ %1510, %1769 ], [ %1510, %1753 ], [ %1510, %1745 ], [ %1510, %1734 ], [ %1510, %1717 ], [ %1510, %1707 ], [ %1510, %1691 ], [ %1510, %1681 ], [ %1510, %1679 ], [ %1510, %1661 ], [ %1510, %1653 ], [ %1510, %1645 ], [ %1510, %1604 ], [ %1510, %1585 ], [ %1510, %1581 ], [ %1510, %1565 ], [ %1510, %1550 ], [ %1510, %1548 ], [ %1510, %1540 ], [ %1510, %1934 ], [ %1510, %2019 ], [ %1510, %2022 ], [ %1510, %2017 ], [ %2820, %2833 ], [ %1510, %3633 ], [ %1510, %3619 ], [ %1510, %3605 ], [ %1510, %2035 ]
  %2846 = phi i64 [ %1509, %1533 ], [ %1509, %1593 ], [ %1509, %1596 ], [ %1509, %1616 ], [ %1509, %1621 ], [ %1509, %1625 ], [ %1509, %1664 ], [ %1509, %1722 ], [ %2278, %2828 ], [ %2278, %2837 ], [ %2278, %2824 ], [ %1509, %2066 ], [ %1509, %1872 ], [ %1509, %1845 ], [ %1509, %1769 ], [ %1509, %1753 ], [ %1509, %1745 ], [ %1509, %1734 ], [ %1509, %1717 ], [ %1509, %1707 ], [ %1509, %1691 ], [ %1509, %1681 ], [ %1509, %1679 ], [ %1509, %1661 ], [ %1509, %1653 ], [ %1509, %1645 ], [ %1509, %1604 ], [ %1509, %1585 ], [ %1509, %1581 ], [ %1509, %1565 ], [ %1509, %1550 ], [ %1509, %1548 ], [ %1509, %1540 ], [ %1509, %1934 ], [ %1509, %2019 ], [ %1509, %2022 ], [ %1509, %2017 ], [ %2278, %2833 ], [ %1509, %3633 ], [ %1509, %3619 ], [ %1509, %3605 ], [ %1509, %2035 ]
  %2847 = phi i32 [ %1508, %1533 ], [ %1508, %1593 ], [ %1508, %1596 ], [ %1508, %1616 ], [ %1508, %1621 ], [ %1508, %1625 ], [ %1508, %1664 ], [ %1508, %1722 ], [ %1851, %2828 ], [ %1851, %2837 ], [ %1851, %2824 ], [ %1851, %2066 ], [ %1851, %1872 ], [ %1846, %1845 ], [ %1508, %1769 ], [ %1508, %1753 ], [ %1508, %1745 ], [ %1508, %1734 ], [ %1508, %1717 ], [ %1508, %1707 ], [ %1508, %1691 ], [ %1508, %1681 ], [ %1508, %1679 ], [ %1508, %1661 ], [ %1508, %1653 ], [ %1508, %1645 ], [ %1508, %1604 ], [ %1508, %1585 ], [ %1508, %1581 ], [ %1508, %1565 ], [ %1508, %1550 ], [ %1508, %1548 ], [ %1508, %1540 ], [ %1851, %1934 ], [ %1851, %2019 ], [ %1851, %2022 ], [ %1851, %2017 ], [ %1851, %2833 ], [ %1851, %3633 ], [ %1851, %3619 ], [ %1851, %3605 ], [ %1851, %2035 ]
  %2848 = phi i32 [ %1507, %1533 ], [ %1507, %1593 ], [ %1507, %1596 ], [ %1507, %1616 ], [ %1507, %1621 ], [ %1507, %1625 ], [ %1507, %1664 ], [ %1507, %1722 ], [ %2063, %2828 ], [ %2063, %2837 ], [ %2063, %2824 ], [ %2063, %2066 ], [ %1507, %1872 ], [ %1507, %1845 ], [ %1507, %1769 ], [ %1507, %1753 ], [ %1507, %1745 ], [ %1507, %1734 ], [ %1507, %1717 ], [ %1507, %1707 ], [ %1507, %1691 ], [ %1507, %1681 ], [ %1507, %1679 ], [ %1507, %1661 ], [ %1507, %1653 ], [ %1507, %1645 ], [ %1507, %1604 ], [ %1507, %1585 ], [ %1507, %1581 ], [ %1507, %1565 ], [ %1507, %1550 ], [ %1507, %1548 ], [ %1507, %1540 ], [ %1507, %1934 ], [ %1507, %2019 ], [ %1507, %2022 ], [ %1507, %2017 ], [ %2063, %2833 ], [ %1507, %3633 ], [ %1507, %3619 ], [ %1507, %3605 ], [ %1507, %2035 ]
  %2849 = phi i32 [ %1506, %1533 ], [ %1506, %1593 ], [ %1506, %1596 ], [ %1506, %1616 ], [ %1506, %1621 ], [ %1506, %1625 ], [ %1506, %1664 ], [ %1506, %1722 ], [ %2821, %2828 ], [ %2821, %2837 ], [ %2821, %2824 ], [ %1506, %2066 ], [ %1506, %1872 ], [ %1506, %1845 ], [ %1506, %1769 ], [ %1506, %1753 ], [ %1506, %1745 ], [ %1506, %1734 ], [ %1506, %1717 ], [ %1506, %1707 ], [ %1506, %1691 ], [ %1506, %1681 ], [ %1506, %1679 ], [ %1506, %1661 ], [ %1506, %1653 ], [ %1506, %1645 ], [ %1506, %1604 ], [ %1506, %1585 ], [ %1506, %1581 ], [ %1506, %1565 ], [ %1506, %1550 ], [ %1506, %1548 ], [ %1506, %1540 ], [ %1506, %1934 ], [ %1506, %2019 ], [ %1506, %2022 ], [ %1506, %2017 ], [ %2821, %2833 ], [ %1506, %3633 ], [ %1506, %3619 ], [ %1506, %3605 ], [ %1506, %2035 ]
  %2850 = phi i32 [ %1505, %1533 ], [ %1505, %1593 ], [ %1505, %1596 ], [ %1505, %1616 ], [ %1505, %1621 ], [ %1505, %1625 ], [ %1505, %1664 ], [ %1505, %1722 ], [ %2279, %2828 ], [ %2279, %2837 ], [ %2279, %2824 ], [ %1505, %2066 ], [ %1505, %1872 ], [ %1505, %1845 ], [ %1505, %1769 ], [ %1505, %1753 ], [ %1505, %1745 ], [ %1505, %1734 ], [ %1505, %1717 ], [ %1505, %1707 ], [ %1505, %1691 ], [ %1505, %1681 ], [ %1505, %1679 ], [ %1505, %1661 ], [ %1505, %1653 ], [ %1505, %1645 ], [ %1505, %1604 ], [ %1505, %1585 ], [ %1505, %1581 ], [ %1505, %1565 ], [ %1505, %1550 ], [ %1505, %1548 ], [ %1505, %1540 ], [ %1505, %1934 ], [ %1505, %2019 ], [ %1505, %2022 ], [ %1505, %2017 ], [ %2279, %2833 ], [ %1505, %3633 ], [ %1505, %3619 ], [ %1505, %3605 ], [ %1505, %2035 ]
  %2851 = phi i32 [ %1504, %1533 ], [ %1504, %1593 ], [ %1504, %1596 ], [ %1504, %1616 ], [ %1504, %1621 ], [ %1504, %1625 ], [ %1504, %1664 ], [ %1504, %1722 ], [ %2280, %2828 ], [ %2280, %2837 ], [ %2280, %2824 ], [ %1504, %2066 ], [ %1504, %1872 ], [ %1504, %1845 ], [ %1504, %1769 ], [ %1504, %1753 ], [ %1504, %1745 ], [ %1504, %1734 ], [ %1504, %1717 ], [ %1504, %1707 ], [ %1504, %1691 ], [ %1504, %1681 ], [ %1504, %1679 ], [ %1504, %1661 ], [ %1504, %1653 ], [ %1504, %1645 ], [ %1504, %1604 ], [ %1504, %1585 ], [ %1504, %1581 ], [ %1504, %1565 ], [ %1504, %1550 ], [ %1504, %1548 ], [ %1504, %1540 ], [ %1504, %1934 ], [ %1504, %2019 ], [ %1504, %2022 ], [ %1504, %2017 ], [ %2280, %2833 ], [ %1504, %3633 ], [ %1504, %3619 ], [ %1504, %3605 ], [ %1504, %2035 ]
  %2852 = phi i64 [ %1503, %1533 ], [ %1503, %1593 ], [ %1503, %1596 ], [ %1503, %1616 ], [ %1503, %1621 ], [ %1503, %1625 ], [ %1503, %1664 ], [ %1503, %1722 ], [ %2790, %2828 ], [ %2790, %2837 ], [ %2790, %2824 ], [ %1503, %2066 ], [ %1503, %1872 ], [ %1503, %1845 ], [ %1503, %1769 ], [ %1503, %1753 ], [ %1503, %1745 ], [ %1503, %1734 ], [ %1503, %1717 ], [ %1503, %1707 ], [ %1503, %1691 ], [ %1503, %1681 ], [ %1503, %1679 ], [ %1503, %1661 ], [ %1503, %1653 ], [ %1503, %1645 ], [ %1503, %1604 ], [ %1503, %1585 ], [ %1503, %1581 ], [ %1503, %1565 ], [ %1503, %1550 ], [ %1503, %1548 ], [ %1503, %1540 ], [ %1503, %1934 ], [ %1503, %2019 ], [ %1503, %2022 ], [ %1503, %2017 ], [ %2790, %2833 ], [ %1503, %3633 ], [ %1503, %3619 ], [ %1503, %3605 ], [ %1503, %2035 ]
  %2853 = phi i1 [ true, %1533 ], [ true, %1593 ], [ true, %1596 ], [ true, %1616 ], [ true, %1621 ], [ true, %1625 ], [ true, %1664 ], [ true, %1722 ], [ true, %2828 ], [ false, %2837 ], [ false, %2824 ], [ true, %2066 ], [ true, %1872 ], [ true, %1845 ], [ true, %1769 ], [ true, %1753 ], [ true, %1745 ], [ true, %1734 ], [ true, %1717 ], [ true, %1707 ], [ true, %1691 ], [ true, %1681 ], [ true, %1679 ], [ true, %1661 ], [ true, %1653 ], [ true, %1645 ], [ true, %1604 ], [ true, %1585 ], [ true, %1581 ], [ true, %1565 ], [ true, %1550 ], [ true, %1548 ], [ true, %1540 ], [ true, %1934 ], [ true, %2019 ], [ true, %2022 ], [ true, %2017 ], [ true, %2833 ], [ true, %3633 ], [ true, %3619 ], [ true, %3605 ], [ true, %2035 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1349) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1348) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1347) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1346) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1345) #3
  %2854 = add nuw nsw i64 %1502, 1
  %2855 = icmp ult i64 %2854, %1484
  %2856 = and i1 %2853, %2855
  br i1 %2856, label %1501, label %2857

2857:                                             ; preds = %2838
  store i8 %2844, i8* %1409, align 1
  store i8 %2839, i8* %1439, align 1
  store i8 %2843, i8* %406, align 2
  store i8 %2842, i8* %395, align 4
  %2858 = zext i8 %2844 to i64
  %2859 = sext i8 %2842 to i64
  %2860 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 %2858, i64 %2859, i32 0
  %2861 = load i32, i32* %2860, align 4
  %2862 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %53, i64 0, i32 9, i64 0, i32 0
  store i32 %2861, i32* %2862, align 4
  %2863 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %51, align 8
  %2864 = load %struct.MODE_INFO*, %struct.MODE_INFO** %2863, align 8
  %2865 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %2864, i64 0, i32 10, i64 0, i32 1, i64 0, i32 0
  store i32 %2861, i32* %2865, align 4
  store i8 %2840, i8* %1433, align 4
  store i8 %2841, i8* %396, align 1
  %2866 = load i32, i32* %258, align 8
  %2867 = icmp eq i32 %2866, 0
  %2868 = or i1 %469, %2867
  br i1 %2868, label %2891, label %2869

2869:                                             ; preds = %2857
  %2870 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 1
  %2871 = load i32, i32* %2870, align 4
  %2872 = icmp eq i32 %2871, 0
  br i1 %2872, label %2887, label %2873

2873:                                             ; preds = %2869
  %2874 = sext i32 %2871 to i64
  %2875 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 12, i64 %2874, i32 14
  %2876 = load i32, i32* %2875, align 4
  %2877 = icmp eq i32 %2876, 0
  br i1 %2877, label %2878, label %2887

2878:                                             ; preds = %2873
  %2879 = load i32, i32* %706, align 16
  %2880 = and i32 %2879, 2
  %2881 = icmp eq i32 %2880, 0
  br i1 %2881, label %2887, label %2882

2882:                                             ; preds = %2878
  %2883 = add nsw i64 %2859, -1
  %2884 = getelementptr inbounds [3 x i32], [3 x i32]* %36, i64 0, i64 %2883
  %2885 = load i32, i32* %2884, align 4
  %2886 = icmp ne i32 %2885, 0
  br label %2887

2887:                                             ; preds = %2878, %2873, %2882, %2869
  %2888 = phi i1 [ true, %2878 ], [ true, %2873 ], [ true, %2869 ], [ %2886, %2882 ]
  %2889 = zext i1 %2888 to i32
  %2890 = mul nsw i64 %72, 3
  br label %2891

2891:                                             ; preds = %2857, %2887
  %2892 = phi i64 [ %72, %2857 ], [ %2890, %2887 ]
  %2893 = phi i32 [ 1, %2857 ], [ %2889, %2887 ]
  %2894 = load i32, i32* %482, align 8
  %2895 = icmp sgt i32 %2894, 0
  br i1 %2895, label %2896, label %2902

2896:                                             ; preds = %2891
  %2897 = load i32, i32* %1327, align 4
  %2898 = icmp eq i32 %2897, 0
  br i1 %2898, label %2899, label %2902

2899:                                             ; preds = %2896
  %2900 = load i32, i32* %1360, align 4
  %2901 = icmp eq i32 %2900, 0
  br i1 %2901, label %2902, label %2905

2902:                                             ; preds = %2899, %2896, %2891
  %2903 = load i8, i8* %1351, align 1
  %2904 = icmp eq i8 %2903, 0
  br i1 %2904, label %2906, label %2905

2905:                                             ; preds = %2899, %2902
  br label %2906

2906:                                             ; preds = %2902, %2905
  %2907 = phi i32 [ 0, %2905 ], [ %2893, %2902 ]
  %2908 = load i8, i8* %151, align 4
  %2909 = icmp eq i8 %2908, 0
  br i1 %2909, label %2922, label %2910

2910:                                             ; preds = %2906
  %2911 = load i8, i8* %74, align 4
  %2912 = sext i8 %2911 to i64
  %2913 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 8, i64 %2912
  %2914 = load i32, i32* %2913, align 4
  %2915 = and i32 %2914, 4
  %2916 = icmp eq i32 %2915, 0
  br i1 %2916, label %2922, label %2917

2917:                                             ; preds = %2910
  %2918 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 7, i64 %2912, i64 2
  %2919 = load i16, i16* %2918, align 2
  %2920 = icmp sgt i16 %2919, 0
  %2921 = select i1 %2920, i32 0, i32 %2907
  br label %2922

2922:                                             ; preds = %2906, %2917, %2910
  %2923 = phi i32 [ %2907, %2910 ], [ %2921, %2917 ], [ %2907, %2906 ]
  %2924 = load i64, i64* %1374, align 8
  %2925 = icmp eq i64 %2924, 9223372036854775807
  br i1 %2925, label %2961, label %2926

2926:                                             ; preds = %2922
  %2927 = load i32, i32* %1355, align 4
  %2928 = icmp eq i32 %2927, 1
  br i1 %2928, label %2929, label %2932

2929:                                             ; preds = %2926
  %2930 = load i32, i32* %164, align 16
  %2931 = icmp eq i32 %2930, 0
  br i1 %2931, label %2961, label %2932

2932:                                             ; preds = %2929, %2926
  %2933 = icmp ne i32 %2923, 0
  %2934 = and i1 %150, %2933
  br i1 %2934, label %2961, label %2935

2935:                                             ; preds = %2932
  %2936 = icmp eq i32 %691, 0
  %2937 = icmp ult i8 %6, 9
  %2938 = or i1 %2937, %2936
  br i1 %2938, label %2944, label %2939

2939:                                             ; preds = %2935
  %2940 = load i8, i8* %1309, align 4
  %2941 = icmp ne i8 %2940, 6
  %2942 = xor i1 %2933, true
  %2943 = or i1 %2941, %2942
  br i1 %2943, label %3267, label %2945

2944:                                             ; preds = %2935
  br i1 %2933, label %2945, label %3267

2945:                                             ; preds = %2939, %2944
  %2946 = load i32, i32* %350, align 16
  %2947 = icmp eq i32 %2946, 0
  %2948 = icmp sgt i64 %2924, %2892
  %2949 = and i1 %2948, %2947
  br i1 %2949, label %2950, label %3267

2950:                                             ; preds = %2945
  %2951 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 66
  %2952 = load i8, i8* %2951, align 8
  %2953 = icmp ult i8 %2952, %6
  br i1 %2953, label %3267, label %2954

2954:                                             ; preds = %2950
  %2955 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 52
  %2956 = load i8, i8* %2955, align 1
  %2957 = icmp eq i8 %2956, 0
  br i1 %2957, label %2958, label %3267

2958:                                             ; preds = %2954
  %2959 = load i8, i8* %1450, align 4
  %2960 = icmp eq i8 %2959, 0
  br i1 %2960, label %2961, label %3267

2961:                                             ; preds = %2958, %2932, %2929, %2922
  %2962 = bitcast %struct.estimate_block_intra_args* %45 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %2962) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2962, i8 -86, i64 32, i1 false)
  %2963 = getelementptr inbounds %struct.estimate_block_intra_args, %struct.estimate_block_intra_args* %45, i64 0, i32 0
  store %struct.VP9_COMP* %0, %struct.VP9_COMP** %2963, align 8
  %2964 = getelementptr inbounds %struct.estimate_block_intra_args, %struct.estimate_block_intra_args* %45, i64 0, i32 1
  store %struct.macroblock* %1, %struct.macroblock** %2964, align 8
  %2965 = getelementptr inbounds %struct.estimate_block_intra_args, %struct.estimate_block_intra_args* %45, i64 0, i32 2
  store i8 0, i8* %2965, align 8
  %2966 = getelementptr inbounds %struct.estimate_block_intra_args, %struct.estimate_block_intra_args* %45, i64 0, i32 3
  store i32 1, i32* %2966, align 4
  %2967 = getelementptr inbounds %struct.estimate_block_intra_args, %struct.estimate_block_intra_args* %45, i64 0, i32 4
  store %struct.RD_COST* null, %struct.RD_COST** %2967, align 8
  %2968 = bitcast i64* %46 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2968) #3
  store i64 9223372036854775807, i64* %46, align 8
  %2969 = inttoptr i64 %2845 to %struct.PRED_BUFFER*
  %2970 = load i32, i32* %399, align 16
  %2971 = zext i32 %2970 to i64
  %2972 = getelementptr inbounds [5 x i8], [5 x i8]* @tx_mode_to_biggest_tx_size, i64 0, i64 %2971
  %2973 = load i8, i8* %2972, align 1
  %2974 = icmp ult i8 %398, %2973
  %2975 = select i1 %2974, i8 %398, i8 %2973
  %2976 = icmp ne i64 %2845, 0
  %2977 = and i1 %125, %2976
  br i1 %2977, label %2978, label %3028

2978:                                             ; preds = %2961
  %2979 = getelementptr inbounds %struct.PRED_BUFFER, %struct.PRED_BUFFER* %2969, i64 0, i32 0
  %2980 = load i8*, i8** %2979, align 8
  %2981 = icmp eq i8* %2980, %112
  br i1 %2981, label %2982, label %3028

2982:                                             ; preds = %2978
  %2983 = load i32, i32* %1413, align 4
  %2984 = icmp eq i32 %2983, 0
  br i1 %2984, label %2985, label %2988

2985:                                             ; preds = %2991, %2988, %2982
  %2986 = phi i64 [ 0, %2982 ], [ 1, %2988 ], [ 2, %2991 ]
  %2987 = phi i32* [ %1413, %2982 ], [ %1414, %2988 ], [ %1415, %2991 ]
  store i32 1, i32* %2987, align 4
  br label %2994

2988:                                             ; preds = %2982
  %2989 = load i32, i32* %1414, align 4
  %2990 = icmp eq i32 %2989, 0
  br i1 %2990, label %2985, label %2991

2991:                                             ; preds = %2988
  %2992 = load i32, i32* %1415, align 4
  %2993 = icmp eq i32 %2992, 0
  br i1 %2993, label %2985, label %2994

2994:                                             ; preds = %2985, %2991
  %2995 = phi i64 [ %2986, %2985 ], [ -1, %2991 ]
  %2996 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %32, i64 0, i64 %2995
  %2997 = ptrtoint %struct.PRED_BUFFER* %2996 to i64
  %2998 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 11
  %2999 = load i32, i32* %2998, align 16
  %3000 = icmp eq i32 %2999, 0
  br i1 %3000, label %3018, label %3001

3001:                                             ; preds = %2994
  %3002 = load void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*, void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)** @vpx_highbd_convolve_copy, align 8
  %3003 = inttoptr i64 %2845 to i64*
  %3004 = load i64, i64* %3003, align 8
  %3005 = shl i64 %3004, 1
  %3006 = inttoptr i64 %3005 to i16*
  %3007 = getelementptr inbounds %struct.PRED_BUFFER, %struct.PRED_BUFFER* %2969, i64 0, i32 1
  %3008 = load i32, i32* %3007, align 8
  %3009 = sext i32 %3008 to i64
  %3010 = bitcast %struct.PRED_BUFFER* %2996 to i64*
  %3011 = load i64, i64* %3010, align 16
  %3012 = shl i64 %3011, 1
  %3013 = inttoptr i64 %3012 to i16*
  %3014 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %32, i64 0, i64 %2995, i32 1
  %3015 = load i32, i32* %3014, align 8
  %3016 = sext i32 %3015 to i64
  %3017 = load i32, i32* %1460, align 8
  call void %3002(i16* %3006, i64 %3009, i16* %3013, i64 %3016, [8 x i16]* null, i32 0, i32 0, i32 0, i32 0, i32 %107, i32 %103, i32 %3017) #3
  br label %3028

3018:                                             ; preds = %2994
  %3019 = load i8*, i8** %2979, align 8
  %3020 = getelementptr inbounds %struct.PRED_BUFFER, %struct.PRED_BUFFER* %2969, i64 0, i32 1
  %3021 = load i32, i32* %3020, align 8
  %3022 = sext i32 %3021 to i64
  %3023 = getelementptr inbounds %struct.PRED_BUFFER, %struct.PRED_BUFFER* %2996, i64 0, i32 0
  %3024 = load i8*, i8** %3023, align 16
  %3025 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %32, i64 0, i64 %2995, i32 1
  %3026 = load i32, i32* %3025, align 8
  %3027 = sext i32 %3026 to i64
  call void @vpx_convolve_copy_sse2(i8* %3019, i64 %3022, i8* %3024, i64 %3027, [8 x i16]* null, i32 0, i32 0, i32 0, i32 0, i32 %107, i32 %103) #3
  br label %3028

3028:                                             ; preds = %3001, %3018, %2978, %2961
  %3029 = phi i64 [ %2845, %2978 ], [ %2845, %2961 ], [ %2997, %3018 ], [ %2997, %3001 ]
  store i8* %112, i8** %111, align 8
  store i64 %115, i64* %114, align 8
  %3030 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 56, i64 %77
  %3031 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 100
  %3032 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 13
  %3033 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 1
  %3034 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 15
  %3035 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 2
  %3036 = zext i8 %398 to i32
  %3037 = shl i32 1, %3036
  %3038 = sext i32 %3037 to i64
  %3039 = load i32, i32* %127, align 16
  %3040 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %53, i64 0, i32 6
  br label %3041

3041:                                             ; preds = %3256, %3028
  %3042 = phi i64 [ 0, %3028 ], [ %3262, %3256 ]
  %3043 = phi i8 [ %2844, %3028 ], [ %3261, %3256 ]
  %3044 = phi i8 [ 4, %3028 ], [ %3260, %3256 ]
  %3045 = phi i8 [ %2842, %3028 ], [ %3259, %3256 ]
  %3046 = phi i8 [ %2841, %3028 ], [ %3258, %3256 ]
  %3047 = phi i8 [ %2840, %3028 ], [ %3257, %3256 ]
  %3048 = getelementptr inbounds [4 x i8], [4 x i8]* @intra_mode_list, i64 0, i64 %3042
  %3049 = load i8, i8* %3048, align 1
  %3050 = sext i8 %3049 to i64
  %3051 = getelementptr inbounds [10 x i64], [10 x i64]* @switch.table.vp9_pick_inter_mode.3, i64 0, i64 %3050
  %3052 = load i64, i64* %3051, align 8
  %3053 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* @mode_idx, i64 0, i64 0, i64 %3052
  %3054 = load i32, i32* %3053, align 4
  %3055 = zext i32 %3054 to i64
  %3056 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 58, i32 2, i64 %76, i64 %77, i64 %3055
  %3057 = load i32, i32* %3056, align 4
  %3058 = load i32, i32* %407, align 8
  %3059 = icmp eq i32 %3058, 0
  br i1 %3059, label %3070, label %3060

3060:                                             ; preds = %3041
  %3061 = load i32, i32* %164, align 16
  %3062 = icmp eq i32 %3061, 0
  br i1 %3062, label %3063, label %3070

3063:                                             ; preds = %3060
  %3064 = load i32, i32* %1358, align 16
  %3065 = icmp ne i32 %3064, 0
  %3066 = icmp ne i64 %3042, 0
  %3067 = and i1 %3066, %3065
  %3068 = icmp ugt i64 %3042, 2
  %3069 = or i1 %3068, %3067
  br i1 %3069, label %3256, label %3070

3070:                                             ; preds = %3063, %3041, %3060
  %3071 = zext i8 %3049 to i32
  %3072 = shl i32 1, %3071
  %3073 = load i32, i32* %3030, align 4
  %3074 = and i32 %3073, %3072
  %3075 = icmp eq i32 %3074, 0
  br i1 %3075, label %3256, label %3076

3076:                                             ; preds = %3070
  %3077 = load i32, i32* %3031, align 8
  %3078 = icmp eq i32 %3077, 0
  %3079 = icmp eq i64 %3042, 0
  %3080 = or i1 %3079, %3078
  br i1 %3080, label %3084, label %3081

3081:                                             ; preds = %3076
  %3082 = load i8, i8* %1309, align 4
  %3083 = icmp eq i8 %3082, 6
  br i1 %3083, label %3084, label %3256

3084:                                             ; preds = %3081, %3076
  %3085 = load i64, i64* %1374, align 8
  %3086 = getelementptr inbounds i32, i32* %94, i64 %3055
  %3087 = sext i32 %3057 to i64
  %3088 = load i32, i32* %3086, align 4
  %3089 = sext i32 %3088 to i64
  %3090 = mul nsw i64 %3089, %3087
  %3091 = ashr i64 %3090, 5
  %3092 = icmp sle i64 %3091, %3085
  %3093 = icmp ne i32 %3057, 2147483647
  %3094 = and i1 %3093, %3092
  br i1 %3094, label %3105, label %3095

3095:                                             ; preds = %3084
  %3096 = load i32, i32* %1355, align 4
  %3097 = icmp eq i32 %3096, 1
  br i1 %3097, label %3098, label %3256

3098:                                             ; preds = %3095
  %3099 = load i32, i32* %258, align 8
  %3100 = icmp sgt i32 %3099, 0
  br i1 %3100, label %3256, label %3101

3101:                                             ; preds = %3098
  br i1 %150, label %3105, label %3102

3102:                                             ; preds = %3101
  %3103 = load i32, i32* %1459, align 4
  %3104 = icmp eq i32 %3103, 0
  br i1 %3104, label %3256, label %3105

3105:                                             ; preds = %3084, %3102, %3101
  store i8 %3049, i8* %1409, align 1
  store i8 0, i8* %395, align 4
  store i32 0, i32* %1436, align 8
  store i64 0, i64* %1437, align 8
  store i8 %3049, i8* %2965, align 8
  store i32 1, i32* %2966, align 4
  store %struct.RD_COST* %27, %struct.RD_COST** %2967, align 8
  store i8 %2975, i8* %406, align 2
  %3106 = load i8*, i8** %1382, align 8
  %3107 = load i8*, i8** %111, align 8
  %3108 = load i32, i32* %1383, align 8
  %3109 = load i32, i32* %113, align 8
  %3110 = load i32, i32* %3032, align 4
  %3111 = icmp sgt i32 %3110, -1
  br i1 %3111, label %3116, label %3112

3112:                                             ; preds = %3105
  %3113 = load i32, i32* %3033, align 8
  %3114 = add nsw i32 %3113, 5
  %3115 = ashr i32 %3110, %3114
  br label %3116

3116:                                             ; preds = %3112, %3105
  %3117 = phi i32 [ %3115, %3112 ], [ 0, %3105 ]
  %3118 = add nsw i32 %3117, %106
  %3119 = load i32, i32* %3034, align 4
  %3120 = icmp sgt i32 %3119, -1
  br i1 %3120, label %3125, label %3121

3121:                                             ; preds = %3116
  %3122 = load i32, i32* %3035, align 4
  %3123 = add nsw i32 %3122, 5
  %3124 = ashr i32 %3119, %3123
  br label %3125

3125:                                             ; preds = %3121, %3116
  %3126 = phi i32 [ %3124, %3121 ], [ 0, %3116 ]
  %3127 = add nsw i32 %3126, %102
  %3128 = icmp sgt i32 %3127, 0
  br i1 %3128, label %3129, label %3161

3129:                                             ; preds = %3125
  %3130 = icmp sgt i32 %3118, 0
  %3131 = sext i32 %3108 to i64
  %3132 = sext i32 %3109 to i64
  %3133 = sext i32 %3118 to i64
  %3134 = sext i32 %3127 to i64
  br label %3135

3135:                                             ; preds = %3158, %3129
  %3136 = phi i64 [ 0, %3129 ], [ %3159, %3158 ]
  br i1 %3130, label %3137, label %3158

3137:                                             ; preds = %3135
  %3138 = mul nsw i64 %3136, %3131
  %3139 = mul nsw i64 %3136, %3132
  %3140 = load i8, i8* %1386, align 1
  %3141 = zext i8 %3140 to i32
  %3142 = trunc i64 %3136 to i32
  br label %3143

3143:                                             ; preds = %3143, %3137
  %3144 = phi i64 [ 0, %3137 ], [ %3156, %3143 ]
  %3145 = add nsw i64 %3144, %3138
  %3146 = shl nsw i64 %3145, 2
  %3147 = getelementptr inbounds i8, i8* %3106, i64 %3146
  store i8* %3147, i8** %1382, align 8
  %3148 = add nsw i64 %3144, %3139
  %3149 = shl nsw i64 %3148, 2
  %3150 = getelementptr inbounds i8, i8* %3107, i64 %3149
  store i8* %3150, i8** %111, align 8
  %3151 = load i32, i32* %349, align 16
  %3152 = icmp eq i32 %3151, 0
  %3153 = select i1 %3152, i8* %3150, i8* %3147
  %3154 = select i1 %3152, i32 %3109, i32 %3108
  %3155 = trunc i64 %3144 to i32
  call void @vp9_predict_intra_block(%struct.macroblockd* %50, i32 %3141, i8 zeroext %398, i8 zeroext %3049, i8* %3153, i32 %3154, i8* %3150, i32 %3109, i32 %3155, i32 %3142, i32 0) #3
  %3156 = add i64 %3144, %3038
  %3157 = icmp slt i64 %3156, %3133
  br i1 %3157, label %3143, label %3158

3158:                                             ; preds = %3143, %3135
  %3159 = add i64 %3136, %3038
  %3160 = icmp slt i64 %3159, %3134
  br i1 %3160, label %3135, label %3161

3161:                                             ; preds = %3158, %3125
  store i8* %3106, i8** %1382, align 8
  store i8* %3107, i8** %111, align 8
  call fastcc void @model_rd_for_sb_y(%struct.VP9_COMP* %0, i8 zeroext %6, %struct.macroblock* %1, %struct.macroblockd* %50, i32* nonnull %1436, i64* %1437, i32* nonnull %29, i32* nonnull %30, i32 1)
  %3162 = load i8, i8* %406, align 2
  %3163 = icmp ult i8 %3162, 2
  %3164 = select i1 %3163, i8 %3162, i8 2
  call fastcc void @block_yrd(%struct.VP9_COMP* %0, %struct.macroblock* %1, %struct.RD_COST* nonnull %27, i32* %2966, i64* nonnull %46, i8 zeroext %6, i8 zeroext %3164, i32 1, i32 1)
  %3165 = load i32, i32* %2966, align 4
  %3166 = icmp eq i32 %3165, 0
  br i1 %3166, label %3193, label %3167

3167:                                             ; preds = %3161
  store i8 1, i8* %1433, align 4
  %3168 = load %struct.frame_contexts*, %struct.frame_contexts** %261, align 8
  %3169 = load %struct.MODE_INFO*, %struct.MODE_INFO** %263, align 8
  %3170 = load %struct.MODE_INFO*, %struct.MODE_INFO** %265, align 8
  %3171 = icmp eq %struct.MODE_INFO* %3169, null
  br i1 %3171, label %3176, label %3172

3172:                                             ; preds = %3167
  %3173 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %3169, i64 0, i32 3
  %3174 = load i8, i8* %3173, align 1
  %3175 = sext i8 %3174 to i64
  br label %3176

3176:                                             ; preds = %3172, %3167
  %3177 = phi i64 [ %3175, %3172 ], [ 0, %3167 ]
  %3178 = icmp eq %struct.MODE_INFO* %3170, null
  br i1 %3178, label %3183, label %3179

3179:                                             ; preds = %3176
  %3180 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %3170, i64 0, i32 3
  %3181 = load i8, i8* %3180, align 1
  %3182 = sext i8 %3181 to i64
  br label %3183

3183:                                             ; preds = %3176, %3179
  %3184 = phi i64 [ %3182, %3179 ], [ 0, %3176 ]
  %3185 = add nsw i64 %3184, %3177
  %3186 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %3168, i64 0, i32 11, i64 %3185
  %3187 = load i8, i8* %3186, align 1
  %3188 = zext i8 %3187 to i64
  %3189 = sub nuw nsw i64 256, %3188
  %3190 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %3189
  %3191 = load i16, i16* %3190, align 2
  %3192 = zext i16 %3191 to i32
  br label %3220

3193:                                             ; preds = %3161
  store i8 0, i8* %1433, align 4
  %3194 = load %struct.frame_contexts*, %struct.frame_contexts** %261, align 8
  %3195 = load %struct.MODE_INFO*, %struct.MODE_INFO** %263, align 8
  %3196 = load %struct.MODE_INFO*, %struct.MODE_INFO** %265, align 8
  %3197 = icmp eq %struct.MODE_INFO* %3195, null
  br i1 %3197, label %3202, label %3198

3198:                                             ; preds = %3193
  %3199 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %3195, i64 0, i32 3
  %3200 = load i8, i8* %3199, align 1
  %3201 = sext i8 %3200 to i64
  br label %3202

3202:                                             ; preds = %3198, %3193
  %3203 = phi i64 [ %3201, %3198 ], [ 0, %3193 ]
  %3204 = icmp eq %struct.MODE_INFO* %3196, null
  br i1 %3204, label %3209, label %3205

3205:                                             ; preds = %3202
  %3206 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %3196, i64 0, i32 3
  %3207 = load i8, i8* %3206, align 1
  %3208 = sext i8 %3207 to i64
  br label %3209

3209:                                             ; preds = %3202, %3205
  %3210 = phi i64 [ %3208, %3205 ], [ 0, %3202 ]
  %3211 = add nsw i64 %3210, %3203
  %3212 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %3194, i64 0, i32 11, i64 %3211
  %3213 = load i8, i8* %3212, align 1
  %3214 = zext i8 %3213 to i64
  %3215 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %3214
  %3216 = load i16, i16* %3215, align 2
  %3217 = zext i16 %3216 to i32
  %3218 = load i32, i32* %1436, align 8
  %3219 = add nsw i32 %3218, %3217
  br label %3220

3220:                                             ; preds = %3209, %3183
  %3221 = phi i32 [ %3219, %3209 ], [ %3192, %3183 ]
  store i32 %3221, i32* %1436, align 8
  %3222 = load i32, i32* %1355, align 4
  %3223 = icmp eq i32 %3222, 1
  br i1 %3223, label %3224, label %3232

3224:                                             ; preds = %3220
  %3225 = load i8, i8* %1441, align 8
  %3226 = icmp eq i8 %3225, 0
  br i1 %3226, label %3228, label %3227

3227:                                             ; preds = %3224
  call void @vp9_foreach_transformed_block_in_plane(%struct.macroblockd* %50, i8 zeroext %6, i32 1, void (i32, i32, i32, i32, i8, i8, i8*)* nonnull @estimate_block_intra, i8* nonnull %2962) #3
  br label %3228

3228:                                             ; preds = %3224, %3227
  %3229 = load i8, i8* %1442, align 1
  %3230 = icmp eq i8 %3229, 0
  br i1 %3230, label %3232, label %3231

3231:                                             ; preds = %3228
  call void @vp9_foreach_transformed_block_in_plane(%struct.macroblockd* %50, i8 zeroext %6, i32 2, void (i32, i32, i32, i32, i8, i8, i8*)* nonnull @estimate_block_intra, i8* nonnull %2962) #3
  br label %3232

3232:                                             ; preds = %3228, %3231, %3220
  %3233 = zext i8 %3049 to i64
  %3234 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 110, i64 %3233
  %3235 = load i32, i32* %3234, align 4
  %3236 = load i32, i32* %1436, align 8
  %3237 = add nsw i32 %3236, %3235
  %3238 = add i32 %3237, %65
  %3239 = add i32 %3238, %3039
  store i32 %3239, i32* %1436, align 8
  %3240 = sext i32 %3239 to i64
  %3241 = load i32, i32* %67, align 4
  %3242 = sext i32 %3241 to i64
  %3243 = mul nsw i64 %3240, %3242
  %3244 = add nsw i64 %3243, 256
  %3245 = ashr i64 %3244, 9
  %3246 = load i64, i64* %1437, align 8
  %3247 = load i32, i32* %73, align 8
  %3248 = zext i32 %3247 to i64
  %3249 = shl i64 %3246, %3248
  %3250 = add nsw i64 %3245, %3249
  store i64 %3250, i64* %1449, align 8
  %3251 = load i64, i64* %1374, align 8
  %3252 = icmp slt i64 %3250, %3251
  br i1 %3252, label %3253, label %3256

3253:                                             ; preds = %3232
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %58, i8* nonnull align 8 %57, i64 24, i1 false)
  %3254 = load i8, i8* %406, align 2
  store i8 %3049, i8* %3040, align 2
  store i32 -2147450880, i32* %2862, align 4
  store i32 -2147450880, i32* %1412, align 4
  %3255 = load i8, i8* %1433, align 4
  br label %3256

3256:                                             ; preds = %3232, %3253, %3098, %3095, %3102, %3081, %3070, %3063
  %3257 = phi i8 [ %3047, %3070 ], [ %3255, %3253 ], [ %3047, %3232 ], [ %3047, %3098 ], [ %3047, %3102 ], [ %3047, %3095 ], [ %3047, %3081 ], [ %3047, %3063 ]
  %3258 = phi i8 [ %3046, %3070 ], [ -1, %3253 ], [ %3046, %3232 ], [ %3046, %3098 ], [ %3046, %3102 ], [ %3046, %3095 ], [ %3046, %3081 ], [ %3046, %3063 ]
  %3259 = phi i8 [ %3045, %3070 ], [ 0, %3253 ], [ %3045, %3232 ], [ %3045, %3098 ], [ %3045, %3102 ], [ %3045, %3095 ], [ %3045, %3081 ], [ %3045, %3063 ]
  %3260 = phi i8 [ %3044, %3070 ], [ %3254, %3253 ], [ %3044, %3232 ], [ %3044, %3098 ], [ %3044, %3102 ], [ %3044, %3095 ], [ %3044, %3081 ], [ %3044, %3063 ]
  %3261 = phi i8 [ %3043, %3070 ], [ %3049, %3253 ], [ %3043, %3232 ], [ %3043, %3098 ], [ %3043, %3102 ], [ %3043, %3095 ], [ %3043, %3081 ], [ %3043, %3063 ]
  %3262 = add nuw nsw i64 %3042, 1
  %3263 = icmp eq i64 %3262, 4
  br i1 %3263, label %3264, label %3041

3264:                                             ; preds = %3256
  %3265 = icmp eq i8 %3259, 0
  %3266 = select i1 %3265, i8 %3260, i8 %2843
  store i8 %3266, i8* %406, align 2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2968) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %2962) #3
  br label %3267

3267:                                             ; preds = %2939, %2958, %2954, %2950, %2945, %3264, %2944
  %3268 = phi i8 [ %3257, %3264 ], [ %2840, %2950 ], [ %2840, %2958 ], [ %2840, %2954 ], [ %2840, %2945 ], [ %2840, %2944 ], [ %2840, %2939 ]
  %3269 = phi i8 [ %3258, %3264 ], [ %2841, %2950 ], [ %2841, %2958 ], [ %2841, %2954 ], [ %2841, %2945 ], [ %2841, %2944 ], [ %2841, %2939 ]
  %3270 = phi i8 [ %3259, %3264 ], [ %2842, %2950 ], [ %2842, %2958 ], [ %2842, %2954 ], [ %2842, %2945 ], [ %2842, %2944 ], [ %2842, %2939 ]
  %3271 = phi i8 [ %3261, %3264 ], [ %2844, %2950 ], [ %2844, %2958 ], [ %2844, %2954 ], [ %2844, %2945 ], [ %2844, %2944 ], [ %2844, %2939 ]
  %3272 = phi i64 [ %3029, %3264 ], [ %2845, %2950 ], [ %2845, %2958 ], [ %2845, %2954 ], [ %2845, %2945 ], [ %2845, %2944 ], [ %2845, %2939 ]
  store i8* %112, i8** %111, align 8
  store i64 %115, i64* %114, align 8
  store i8 %3271, i8* %1409, align 1
  store i8 %3270, i8* %395, align 4
  store i8 %3269, i8* %396, align 1
  store i8 %3268, i8* %1433, align 4
  %3273 = load i8, i8* %395, align 4
  %3274 = icmp slt i8 %3273, 1
  br i1 %3274, label %3275, label %3276

3275:                                             ; preds = %3267
  store i8 3, i8* %1439, align 1
  br label %3276

3276:                                             ; preds = %3267, %3275
  br i1 %125, label %3277, label %3314

3277:                                             ; preds = %3276
  %3278 = inttoptr i64 %3272 to %struct.PRED_BUFFER*
  %3279 = icmp eq i64 %3272, 0
  br i1 %3279, label %3314, label %3280

3280:                                             ; preds = %3277
  %3281 = getelementptr inbounds %struct.PRED_BUFFER, %struct.PRED_BUFFER* %3278, i64 0, i32 0
  %3282 = load i8*, i8** %3281, align 8
  %3283 = icmp eq i8* %3282, %112
  br i1 %3283, label %3314, label %3284

3284:                                             ; preds = %3280
  %3285 = load i8, i8* %1409, align 1
  %3286 = add i8 %3285, -10
  %3287 = icmp ugt i8 %3286, 3
  br i1 %3287, label %3314, label %3288

3288:                                             ; preds = %3284
  %3289 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 11
  %3290 = load i32, i32* %3289, align 16
  %3291 = icmp eq i32 %3290, 0
  br i1 %3291, label %3307, label %3292

3292:                                             ; preds = %3288
  %3293 = load void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*, void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)** @vpx_highbd_convolve_copy, align 8
  %3294 = inttoptr i64 %3272 to i64*
  %3295 = load i64, i64* %3294, align 8
  %3296 = shl i64 %3295, 1
  %3297 = inttoptr i64 %3296 to i16*
  %3298 = getelementptr inbounds %struct.PRED_BUFFER, %struct.PRED_BUFFER* %3278, i64 0, i32 1
  %3299 = load i32, i32* %3298, align 8
  %3300 = sext i32 %3299 to i64
  %3301 = load i64, i64* %1417, align 8
  %3302 = shl i64 %3301, 1
  %3303 = inttoptr i64 %3302 to i16*
  %3304 = load i32, i32* %113, align 8
  %3305 = sext i32 %3304 to i64
  %3306 = load i32, i32* %1460, align 8
  call void %3293(i16* %3297, i64 %3300, i16* %3303, i64 %3305, [8 x i16]* null, i32 0, i32 0, i32 0, i32 0, i32 %107, i32 %103, i32 %3306) #3
  br label %3314

3307:                                             ; preds = %3288
  %3308 = getelementptr inbounds %struct.PRED_BUFFER, %struct.PRED_BUFFER* %3278, i64 0, i32 1
  %3309 = load i32, i32* %3308, align 8
  %3310 = sext i32 %3309 to i64
  %3311 = load i8*, i8** %111, align 8
  %3312 = load i32, i32* %113, align 8
  %3313 = sext i32 %3312 to i64
  call void @vpx_convolve_copy_sse2(i8* %3282, i64 %3310, i8* %3311, i64 %3313, [8 x i16]* null, i32 0, i32 0, i32 0, i32 0, i32 %107, i32 %103) #3
  br label %3314

3314:                                             ; preds = %3307, %3292, %3280, %3284, %3277, %3276
  %3315 = load i32, i32* %448, align 16
  %3316 = icmp sgt i32 %3315, 0
  br i1 %3316, label %3317, label %3418

3317:                                             ; preds = %3314
  %3318 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 118
  %3319 = load i32, i32* %3318, align 16
  %3320 = icmp eq i32 %3319, 0
  %3321 = and i1 %1477, %3320
  br i1 %3321, label %3322, label %3418

3322:                                             ; preds = %3317
  %3323 = load i32, i32* %1478, align 4
  %3324 = icmp eq i32 %3323, 0
  br i1 %3324, label %3418, label %3325

3325:                                             ; preds = %3322
  %3326 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 4
  %3327 = load i32, i32* %3326, align 4
  %3328 = icmp eq i32 %3327, 0
  br i1 %3328, label %3329, label %3418

3329:                                             ; preds = %3325
  %3330 = bitcast i32* %47 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3330) #3
  store i32 0, i32* %47, align 4
  %3331 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %7, i64 0, i32 32
  store i32 0, i32* %3331, align 8
  %3332 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58
  %3333 = load i32, i32* %3332, align 4
  %3334 = icmp ne i32 %3333, 0
  %3335 = zext i1 %3334 to i32
  store i32 %3335, i32* %3331, align 8
  call void @vp9_denoiser_denoise(%struct.VP9_COMP* %0, %struct.macroblock* %1, i32 %3, i32 %4, i8 zeroext %6, %struct.PICK_MODE_CONTEXT* %7, i32* nonnull %47, i32 %259) #3
  %3336 = load i32, i32* %47, align 4
  %3337 = load i32, i32* %1453, align 8
  %3338 = icmp eq i32 %3337, 0
  br i1 %3338, label %3416, label %3339

3339:                                             ; preds = %3329
  %3340 = load i32, i32* %1454, align 4
  %3341 = icmp ugt i32 %3340, 1
  br i1 %3341, label %3342, label %3416

3342:                                             ; preds = %3339
  %3343 = load i64, i64* %1374, align 8
  %3344 = shl i64 %3343, 3
  %3345 = icmp slt i64 %2852, %3344
  br i1 %3345, label %3346, label %3416

3346:                                             ; preds = %3342
  %3347 = icmp eq i8 %3270, 0
  %3348 = icmp ne i32 %3336, 0
  %3349 = and i1 %3347, %3348
  br i1 %3349, label %3358, label %3350

3350:                                             ; preds = %3346
  %3351 = icmp eq i8 %3270, 2
  br i1 %3351, label %3352, label %3416

3352:                                             ; preds = %3350
  %3353 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 2
  %3354 = load i32, i32* %3353, align 8
  %3355 = icmp eq i32 %3354, 1
  %3356 = icmp eq i32 %3336, 2
  %3357 = and i1 %3356, %3355
  br i1 %3357, label %3358, label %3416

3358:                                             ; preds = %3352, %3346
  %3359 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3359) #3
  store i32 0, i32* %20, align 4
  %3360 = bitcast i64* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3360) #3
  store i64 0, i64* %21, align 8
  %3361 = bitcast i32* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3361) #3
  store i32 -1, i32* %22, align 4
  %3362 = bitcast i32* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3362) #3
  store i32 -1, i32* %23, align 4
  store i8 12, i8* %1409, align 1
  store i8 1, i8* %395, align 4
  store i8 -1, i8* %396, align 1
  %3363 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 0
  store %struct.RefBuffer* %3363, %struct.RefBuffer** %1371, align 8
  store %struct.RefBuffer* %3363, %struct.RefBuffer** %1372, align 8
  store i32 0, i32* %2862, align 4
  store i8 0, i8* %1439, align 1
  %3364 = load i8, i8* %165, align 8
  %3365 = icmp eq i8 %3364, 3
  %3366 = select i1 %3365, i8 3, i8 0
  store i8 %3366, i8* %1439, align 1
  %3367 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 4, i64 0
  %3368 = getelementptr inbounds [4 x [3 x %struct.buf_2d]], [4 x [3 x %struct.buf_2d]]* %26, i64 0, i64 1, i64 0
  %3369 = bitcast %struct.buf_2d* %3367 to i8*
  %3370 = bitcast %struct.buf_2d* %3368 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3369, i8* align 16 %3370, i64 16, i1 false) #3
  call void @vp9_build_inter_predictors_sby(%struct.macroblockd* %50, i32 %3, i32 %4, i8 zeroext %6) #3
  call fastcc void @model_rd_for_sb_y(%struct.VP9_COMP* %0, i8 zeroext %6, %struct.macroblock* %1, %struct.macroblockd* %50, i32* nonnull %20, i64* nonnull %21, i32* nonnull %22, i32* nonnull %23, i32 0) #3
  %3371 = load i32, i32* %20, align 4
  %3372 = load i64, i64* %21, align 8
  %3373 = sext i32 %3371 to i64
  %3374 = load i32, i32* %67, align 4
  %3375 = sext i32 %3374 to i64
  %3376 = mul nsw i64 %3375, %3373
  %3377 = add nsw i64 %3376, 256
  %3378 = ashr i64 %3377, 9
  %3379 = load i32, i32* %73, align 8
  %3380 = zext i32 %3379 to i64
  %3381 = shl i64 %3372, %3380
  %3382 = add nsw i64 %3378, %3381
  %3383 = load i64, i64* %1374, align 8
  %3384 = icmp sgt i64 %3382, %3383
  br i1 %3384, label %3385, label %3400

3385:                                             ; preds = %3358
  store i8 %3271, i8* %1409, align 1
  store i8 %3270, i8* %395, align 4
  %3386 = sext i8 %3270 to i64
  %3387 = icmp sgt i8 %3270, 0
  %3388 = add nsw i64 %3386, -1
  %3389 = select i1 %3387, i64 %3388, i64 0
  %3390 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 %3389
  store %struct.RefBuffer* %3390, %struct.RefBuffer** %1371, align 8
  store %struct.RefBuffer* %3363, %struct.RefBuffer** %1372, align 8
  store i8 %2839, i8* %1439, align 1
  switch i8 %3270, label %3399 [
    i8 0, label %3391
    i8 2, label %3392
  ]

3391:                                             ; preds = %3385
  store i32 -2147450880, i32* %2862, align 4
  store i8 3, i8* %1439, align 1
  br label %3399

3392:                                             ; preds = %3385
  %3393 = zext i8 %3271 to i64
  %3394 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 %3393, i64 2, i32 0
  %3395 = load i32, i32* %3394, align 8
  store i32 %3395, i32* %2862, align 4
  br i1 %125, label %3396, label %3399

3396:                                             ; preds = %3392
  %3397 = getelementptr inbounds [4 x [3 x %struct.buf_2d]], [4 x [3 x %struct.buf_2d]]* %26, i64 0, i64 2, i64 0
  %3398 = bitcast %struct.buf_2d* %3397 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3369, i8* align 16 %3398, i64 16, i1 false) #3
  call void @vp9_build_inter_predictors_sby(%struct.macroblockd* %50, i32 %3, i32 %4, i8 zeroext %6) #3
  br label %3399

3399:                                             ; preds = %3392, %3396, %3391, %3385
  store i8 %2843, i8* %406, align 2
  store i8 %3268, i8* %1433, align 4
  br label %3414

3400:                                             ; preds = %3358
  %3401 = load i32, i32* %128, align 4
  %3402 = add nsw i32 %3401, %3371
  %3403 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %1390, align 16
  %3404 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %3403, i64 0, i32 1, i64 1
  %3405 = load i8, i8* %3404, align 1
  %3406 = zext i8 %3405 to i64
  %3407 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 111, i64 %3406, i64 2
  %3408 = load i32, i32* %3407, align 8
  %3409 = add i32 %3402, %3408
  %3410 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %28, i64 0, i32 0
  store i32 %3409, i32* %3410, align 8
  %3411 = getelementptr inbounds i8, i8* %58, i64 4
  %3412 = bitcast i8* %3411 to i32*
  store i32 -1431655766, i32* %3412, align 4
  %3413 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %28, i64 0, i32 1
  store i64 %3372, i64* %3413, align 8
  store i64 %3382, i64* %1374, align 8
  br label %3414

3414:                                             ; preds = %3400, %3399
  %3415 = phi i8 [ %3270, %3399 ], [ 1, %3400 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3362) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3361) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3360) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3359) #3
  br label %3416

3416:                                             ; preds = %3329, %3339, %3342, %3350, %3352, %3414
  %3417 = phi i8 [ %3270, %3329 ], [ %3415, %3414 ], [ 2, %3352 ], [ %3270, %3350 ], [ %3270, %3342 ], [ %3270, %3339 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3330) #3
  br label %3418

3418:                                             ; preds = %3322, %3416, %3325, %3317, %3314
  %3419 = phi i8 [ %3270, %3322 ], [ %3417, %3416 ], [ %3270, %3325 ], [ %3270, %3317 ], [ %3270, %3314 ]
  %3420 = icmp eq i8 %3419, 3
  %3421 = icmp eq i8 %3269, 3
  %3422 = or i1 %3421, %3420
  br i1 %3422, label %3423, label %3427

3423:                                             ; preds = %3418
  %3424 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 62
  %3425 = load i8, i8* %3424, align 2
  %3426 = add i8 %3425, 1
  store i8 %3426, i8* %3424, align 2
  br label %3433

3427:                                             ; preds = %3418
  %3428 = icmp eq i8 %3419, 0
  br i1 %3428, label %3433, label %3429

3429:                                             ; preds = %3427
  %3430 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 63
  %3431 = load i8, i8* %3430, align 1
  %3432 = add i8 %3431, 1
  store i8 %3432, i8* %3430, align 1
  br label %3433

3433:                                             ; preds = %3427, %3429, %3423
  %3434 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 6
  %3435 = load i32, i32* %3434, align 8
  %3436 = icmp eq i32 %3435, 0
  br i1 %3436, label %3558, label %3437

3437:                                             ; preds = %3433
  %3438 = sext i8 %3419 to i64
  %3439 = load i8, i8* %1409, align 1
  %3440 = icmp ugt i8 %3439, 9
  br i1 %3440, label %3441, label %3444

3441:                                             ; preds = %3437
  %3442 = zext i8 %3439 to i64
  %3443 = add nsw i64 %3442, -10
  br label %3448

3444:                                             ; preds = %3437
  %3445 = sext i8 %3439 to i64
  %3446 = getelementptr inbounds [10 x i64], [10 x i64]* @switch.table.vp9_pick_inter_mode.3, i64 0, i64 %3445
  %3447 = load i64, i64* %3446, align 8
  br label %3448

3448:                                             ; preds = %3444, %3441
  %3449 = phi i64 [ %3443, %3441 ], [ %3447, %3444 ]
  %3450 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* @mode_idx, i64 0, i64 %3438, i64 %3449
  %3451 = load i32, i32* %3450, align 4
  %3452 = icmp eq i8 %3419, 0
  %3453 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %2, i64 0, i32 5
  br i1 %3452, label %3462, label %3454

3454:                                             ; preds = %3448
  %3455 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 80
  %3456 = zext i8 %3419 to i64
  %3457 = icmp eq i8 %3419, 1
  %3458 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* @mode_idx, i64 0, i64 %3456, i64 0
  %3459 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* @mode_idx, i64 0, i64 %3456, i64 1
  %3460 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* @mode_idx, i64 0, i64 %3456, i64 2
  %3461 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* @mode_idx, i64 0, i64 %3456, i64 3
  br label %3506

3462:                                             ; preds = %3448, %3503
  %3463 = phi i64 [ %3504, %3503 ], [ 0, %3448 ]
  %3464 = load i32, i32* %83, align 4
  %3465 = icmp eq i32 %3464, 0
  %3466 = getelementptr inbounds [4 x i8], [4 x i8]* @intra_mode_list, i64 0, i64 %3463
  %3467 = load i8, i8* %3466, align 1
  %3468 = sext i8 %3467 to i64
  %3469 = getelementptr inbounds [10 x i64], [10 x i64]* @switch.table.vp9_pick_inter_mode.3, i64 0, i64 %3468
  %3470 = load i64, i64* %3469, align 8
  %3471 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* @mode_idx, i64 0, i64 0, i64 %3470
  %3472 = load i32, i32* %3471, align 4
  br i1 %3465, label %3489, label %3473

3473:                                             ; preds = %3462
  %3474 = add i32 %3472, %82
  %3475 = load i32*, i32** %3453, align 8
  %3476 = sext i32 %3474 to i64
  %3477 = getelementptr inbounds i32, i32* %3475, i64 %3476
  %3478 = icmp eq i32 %3472, %3451
  %3479 = load i32, i32* %3477, align 4
  br i1 %3478, label %3480, label %3483

3480:                                             ; preds = %3473
  %3481 = ashr i32 %3479, 4
  %3482 = sub nsw i32 %3479, %3481
  store i32 %3482, i32* %3477, align 4
  br label %3503

3483:                                             ; preds = %3473
  %3484 = add nsw i32 %3479, 1
  %3485 = load i32, i32* %3434, align 8
  %3486 = shl nsw i32 %3485, 6
  %3487 = icmp slt i32 %3484, %3486
  %3488 = select i1 %3487, i32 %3484, i32 %3486
  store i32 %3488, i32* %3477, align 4
  br label %3503

3489:                                             ; preds = %3462
  %3490 = zext i32 %3472 to i64
  %3491 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %2, i64 0, i32 1, i64 %77, i64 %3490
  %3492 = icmp eq i32 %3472, %3451
  %3493 = load i32, i32* %3491, align 4
  br i1 %3492, label %3494, label %3497

3494:                                             ; preds = %3489
  %3495 = ashr i32 %3493, 4
  %3496 = sub nsw i32 %3493, %3495
  store i32 %3496, i32* %3491, align 4
  br label %3503

3497:                                             ; preds = %3489
  %3498 = add nsw i32 %3493, 1
  %3499 = load i32, i32* %3434, align 8
  %3500 = shl nsw i32 %3499, 6
  %3501 = icmp slt i32 %3498, %3500
  %3502 = select i1 %3501, i32 %3498, i32 %3500
  store i32 %3502, i32* %3491, align 4
  br label %3503

3503:                                             ; preds = %3497, %3494, %3483, %3480
  %3504 = add nuw nsw i64 %3463, 1
  %3505 = icmp eq i64 %3504, 4
  br i1 %3505, label %3558, label %3462

3506:                                             ; preds = %3555, %3454
  %3507 = phi i64 [ 1, %3454 ], [ %3556, %3555 ]
  %3508 = icmp eq i64 %3507, %3456
  br i1 %3508, label %3509, label %3555

3509:                                             ; preds = %3506
  %3510 = load i32, i32* %83, align 4
  %3511 = icmp eq i32 %3510, 0
  %3512 = load i32, i32* %3458, align 16
  br i1 %3511, label %3533, label %3513

3513:                                             ; preds = %3509
  %3514 = add i32 %3512, %82
  %3515 = load i32*, i32** %3453, align 8
  %3516 = sext i32 %3514 to i64
  %3517 = getelementptr inbounds i32, i32* %3515, i64 %3516
  %3518 = icmp eq i32 %3512, %3451
  %3519 = load i32, i32* %3517, align 4
  br i1 %3518, label %3520, label %3527

3520:                                             ; preds = %3513
  %3521 = ashr i32 %3519, 4
  %3522 = sub nsw i32 %3519, %3521
  store i32 %3522, i32* %3517, align 4
  br label %3551

3523:                                             ; preds = %3764
  %3524 = icmp slt i32 %3770, 31
  %3525 = select i1 %3524, i32 %3770, i32 31
  %3526 = add nsw i32 %3525, 1
  store i32 %3526, i32* %3762, align 4
  br label %3555

3527:                                             ; preds = %3513
  %3528 = add nsw i32 %3519, 1
  %3529 = load i32, i32* %3434, align 8
  %3530 = shl nsw i32 %3529, 6
  %3531 = icmp slt i32 %3528, %3530
  %3532 = select i1 %3531, i32 %3528, i32 %3530
  store i32 %3532, i32* %3517, align 4
  br label %3551

3533:                                             ; preds = %3509
  %3534 = zext i32 %3512 to i64
  %3535 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %2, i64 0, i32 1, i64 %77, i64 %3534
  %3536 = icmp eq i32 %3512, %3451
  %3537 = load i32, i32* %3535, align 4
  br i1 %3536, label %3538, label %3545

3538:                                             ; preds = %3533
  %3539 = ashr i32 %3537, 4
  %3540 = sub nsw i32 %3537, %3539
  store i32 %3540, i32* %3535, align 4
  br label %3551

3541:                                             ; preds = %3785
  %3542 = icmp slt i32 %3791, 31
  %3543 = select i1 %3542, i32 %3791, i32 31
  %3544 = add nsw i32 %3543, 1
  store i32 %3544, i32* %3783, align 4
  br label %3555

3545:                                             ; preds = %3533
  %3546 = add nsw i32 %3537, 1
  %3547 = load i32, i32* %3434, align 8
  %3548 = shl nsw i32 %3547, 6
  %3549 = icmp slt i32 %3546, %3548
  %3550 = select i1 %3549, i32 %3546, i32 %3548
  store i32 %3550, i32* %3535, align 4
  br label %3551

3551:                                             ; preds = %3545, %3538, %3527, %3520
  %3552 = load i32, i32* %83, align 4
  %3553 = icmp eq i32 %3552, 0
  %3554 = load i32, i32* %3459, align 4
  br i1 %3553, label %3705, label %3689

3555:                                             ; preds = %3771, %3777, %3792, %3798, %3523, %3541, %3506
  %3556 = add nuw nsw i64 %3507, 1
  %3557 = icmp eq i64 %3556, 3
  br i1 %3557, label %3558, label %3506

3558:                                             ; preds = %3555, %3503, %3433
  %3559 = bitcast %struct.RD_COST* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3559, i8* nonnull align 8 %58, i64 24, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %133) #3
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %131) #3
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %126) #3
  call void @llvm.lifetime.end.p0i8(i64 24576, i8* nonnull %110) #3
  call void @llvm.lifetime.end.p0i8(i64 12288, i8* nonnull %109) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %108) #3
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %99) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %60) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %59) #3
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %58) #3
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %57) #3
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %56) #3
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %55) #3
  call void @llvm.lifetime.end.p0i8(i64 224, i8* nonnull %54) #3
  ret void

3560:                                             ; preds = %1850
  %3561 = getelementptr inbounds [4 x [3 x %struct.buf_2d]], [4 x [3 x %struct.buf_2d]]* %26, i64 0, i64 %1541, i64 1
  %3562 = bitcast %struct.buf_2d* %3561 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1488, i8* align 16 %3562, i64 16, i1 false)
  %3563 = getelementptr inbounds [4 x [3 x %struct.buf_2d]], [4 x [3 x %struct.buf_2d]]* %26, i64 0, i64 %1541, i64 2
  %3564 = bitcast %struct.buf_2d* %3563 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1490, i8* align 16 %3564, i64 16, i1 false)
  br label %3576

3565:                                             ; preds = %1850
  %3566 = getelementptr inbounds [4 x [3 x %struct.buf_2d]], [4 x [3 x %struct.buf_2d]]* %26, i64 0, i64 %1852, i64 0
  %3567 = bitcast %struct.buf_2d* %3566 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1492, i8* align 16 %3567, i64 16, i1 false)
  %3568 = getelementptr inbounds [4 x [3 x %struct.buf_2d]], [4 x [3 x %struct.buf_2d]]* %26, i64 0, i64 %1541, i64 1
  %3569 = bitcast %struct.buf_2d* %3568 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1494, i8* align 16 %3569, i64 16, i1 false)
  %3570 = getelementptr inbounds [4 x [3 x %struct.buf_2d]], [4 x [3 x %struct.buf_2d]]* %26, i64 0, i64 %1852, i64 1
  %3571 = bitcast %struct.buf_2d* %3570 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1496, i8* align 16 %3571, i64 16, i1 false)
  %3572 = getelementptr inbounds [4 x [3 x %struct.buf_2d]], [4 x [3 x %struct.buf_2d]]* %26, i64 0, i64 %1541, i64 2
  %3573 = bitcast %struct.buf_2d* %3572 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1498, i8* align 16 %3573, i64 16, i1 false)
  %3574 = getelementptr inbounds [4 x [3 x %struct.buf_2d]], [4 x [3 x %struct.buf_2d]]* %26, i64 0, i64 %1852, i64 2
  %3575 = bitcast %struct.buf_2d* %3574 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1500, i8* align 16 %3575, i64 16, i1 false)
  br label %3576

3576:                                             ; preds = %3560, %3565
  %3577 = phi i8* [ %3573, %3565 ], [ %3564, %3560 ]
  %3578 = phi i8* [ %3569, %3565 ], [ %3562, %3560 ]
  store i8 %1535, i8* %395, align 4
  store i8 %1534, i8* %396, align 1
  %3579 = icmp sgt i8 %1535, 0
  %3580 = add nsw i64 %1541, -1
  %3581 = select i1 %3579, i64 %3580, i64 0
  %3582 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 %3581
  store %struct.RefBuffer* %3582, %struct.RefBuffer** %1371, align 8
  %3583 = icmp sgt i8 %1534, 0
  %3584 = add nsw i8 %1534, -1
  %3585 = select i1 %3583, i8 %3584, i8 0
  %3586 = sext i8 %3585 to i64
  %3587 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 %3586
  store %struct.RefBuffer* %3587, %struct.RefBuffer** %1372, align 8
  %3588 = add nsw i32 %1666, -10
  %3589 = sext i32 %3588 to i64
  %3590 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* @mode_idx, i64 0, i64 %1541, i64 %3589
  %3591 = load i32, i32* %3590, align 4
  %3592 = icmp ne i8 %1515, 0
  %3593 = sext i32 %3591 to i64
  %3594 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 58, i32 2, i64 %76, i64 %77, i64 %3593
  %3595 = load i32, i32* %3594, align 4
  %3596 = zext i1 %3592 to i32
  %3597 = shl i32 %3595, %3596
  %3598 = load i32, i32* %1373, align 4
  %3599 = icmp eq i32 %3598, 0
  %3600 = or i1 %3599, %1732
  br i1 %3600, label %1860, label %1855

3601:                                             ; preds = %2042
  %3602 = getelementptr inbounds [14 x [4 x i8]], [14 x [4 x i8]]* %25, i64 0, i64 11, i64 %1541
  %3603 = load i8, i8* %3602, align 1
  %3604 = icmp eq i8 %3603, 0
  br i1 %3604, label %3612, label %3605

3605:                                             ; preds = %3601
  %3606 = load i32, i32* %2028, align 4
  %3607 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 11, i64 %1541, i32 0
  %3608 = load i32, i32* %3607, align 4
  %3609 = icmp eq i32 %3606, %3608
  %3610 = icmp eq i32 %3608, 0
  %3611 = and i1 %3609, %3610
  br i1 %3611, label %2838, label %3612

3612:                                             ; preds = %3605, %3601, %2042
  %3613 = icmp eq i8 %1537, 12
  %3614 = or i1 %1592, %3613
  br i1 %3614, label %3626, label %3615

3615:                                             ; preds = %3612
  %3616 = getelementptr inbounds [14 x [4 x i8]], [14 x [4 x i8]]* %25, i64 0, i64 12, i64 %1541
  %3617 = load i8, i8* %3616, align 1
  %3618 = icmp eq i8 %3617, 0
  br i1 %3618, label %3626, label %3619

3619:                                             ; preds = %3615
  %3620 = load i32, i32* %2028, align 4
  %3621 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 12, i64 %1541, i32 0
  %3622 = load i32, i32* %3621, align 4
  %3623 = icmp eq i32 %3620, %3622
  %3624 = icmp eq i32 %3622, 0
  %3625 = and i1 %3623, %3624
  br i1 %3625, label %2838, label %3626

3626:                                             ; preds = %3619, %3615, %3612
  %3627 = icmp eq i8 %1537, 13
  %3628 = or i1 %1592, %3627
  br i1 %3628, label %3640, label %3629

3629:                                             ; preds = %3626
  %3630 = getelementptr inbounds [14 x [4 x i8]], [14 x [4 x i8]]* %25, i64 0, i64 13, i64 %1541
  %3631 = load i8, i8* %3630, align 1
  %3632 = icmp eq i8 %3631, 0
  br i1 %3632, label %3640, label %3633

3633:                                             ; preds = %3629
  %3634 = load i32, i32* %2028, align 4
  %3635 = getelementptr inbounds [14 x [4 x %union.int_mv]], [14 x [4 x %union.int_mv]]* %24, i64 0, i64 13, i64 %1541, i32 0
  %3636 = load i32, i32* %3635, align 4
  %3637 = icmp eq i32 %3634, %3636
  %3638 = icmp eq i32 %3636, 0
  %3639 = and i1 %3637, %3638
  br i1 %3639, label %2838, label %3640

3640:                                             ; preds = %3633, %3629, %3626
  %3641 = icmp eq i8 %1537, 13
  %3642 = and i1 %712, %3641
  %3643 = icmp eq i8 %1535, 1
  %3644 = and i1 %3643, %3642
  %3645 = xor i1 %3644, true
  %3646 = load i32, i32* %1405, align 4
  %3647 = icmp eq i32 %3646, -2147450880
  %3648 = or i1 %3647, %3645
  br i1 %3648, label %2062, label %2045

3649:                                             ; preds = %333
  %3650 = ptrtoint [12288 x i16]* %34 to i64
  %3651 = lshr exact i64 %3650, 1
  %3652 = inttoptr i64 %3651 to i8*
  %3653 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %32, i64 0, i64 0, i32 0
  store i8* %3652, i8** %3653, align 16
  %3654 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %32, i64 0, i64 0, i32 1
  store i32 %107, i32* %3654, align 8
  %3655 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %32, i64 0, i64 0, i32 2
  store i32 0, i32* %3655, align 4
  %3656 = getelementptr inbounds [12288 x i16], [12288 x i16]* %34, i64 0, i64 %337
  %3657 = ptrtoint i16* %3656 to i64
  %3658 = lshr exact i64 %3657, 1
  %3659 = inttoptr i64 %3658 to i8*
  br label %3665

3660:                                             ; preds = %333
  %3661 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %32, i64 0, i64 0, i32 0
  store i8* %109, i8** %3661, align 16
  %3662 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %32, i64 0, i64 0, i32 1
  store i32 %107, i32* %3662, align 8
  %3663 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %32, i64 0, i64 0, i32 2
  store i32 0, i32* %3663, align 4
  %3664 = getelementptr inbounds [12288 x i8], [12288 x i8]* %33, i64 0, i64 %337
  br label %3665

3665:                                             ; preds = %3660, %3649
  %3666 = phi i8* [ %3664, %3660 ], [ %3659, %3649 ]
  %3667 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %32, i64 0, i64 1, i32 0
  store i8* %3666, i8** %3667, align 16
  %3668 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %32, i64 0, i64 1, i32 1
  store i32 %107, i32* %3668, align 8
  %3669 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %32, i64 0, i64 1, i32 2
  store i32 0, i32* %3669, align 4
  %3670 = shl nuw nsw i32 %116, 1
  %3671 = zext i32 %3670 to i64
  %3672 = getelementptr inbounds [12288 x i8], [12288 x i8]* %33, i64 0, i64 %3671
  %3673 = getelementptr inbounds [12288 x i16], [12288 x i16]* %34, i64 0, i64 %3671
  %3674 = ptrtoint i16* %3673 to i64
  %3675 = lshr exact i64 %3674, 1
  %3676 = inttoptr i64 %3675 to i8*
  %3677 = select i1 %336, i8* %3672, i8* %3676
  %3678 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %32, i64 0, i64 2, i32 0
  store i8* %3677, i8** %3678, align 16
  %3679 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %32, i64 0, i64 2, i32 1
  store i32 %107, i32* %3679, align 8
  %3680 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %32, i64 0, i64 2, i32 2
  store i32 0, i32* %3680, align 4
  %3681 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 3
  %3682 = bitcast %struct.buf_2d* %3681 to i64*
  %3683 = load i64, i64* %3682, align 8
  %3684 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %32, i64 0, i64 3
  %3685 = bitcast %struct.PRED_BUFFER* %3684 to i64*
  store i64 %3683, i64* %3685, align 16
  %3686 = load i32, i32* %113, align 8
  %3687 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %32, i64 0, i64 3, i32 1
  store i32 %3686, i32* %3687, align 8
  %3688 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %32, i64 0, i64 3, i32 2
  store i32 0, i32* %3688, align 4
  br label %338

3689:                                             ; preds = %3551
  %3690 = add i32 %3554, %82
  %3691 = load i32*, i32** %3453, align 8
  %3692 = sext i32 %3690 to i64
  %3693 = getelementptr inbounds i32, i32* %3691, i64 %3692
  %3694 = icmp eq i32 %3554, %3451
  %3695 = load i32, i32* %3693, align 4
  br i1 %3694, label %3702, label %3696

3696:                                             ; preds = %3689
  %3697 = add nsw i32 %3695, 1
  %3698 = load i32, i32* %3434, align 8
  %3699 = shl nsw i32 %3698, 6
  %3700 = icmp slt i32 %3697, %3699
  %3701 = select i1 %3700, i32 %3697, i32 %3699
  store i32 %3701, i32* %3693, align 4
  br label %3719

3702:                                             ; preds = %3689
  %3703 = ashr i32 %3695, 4
  %3704 = sub nsw i32 %3695, %3703
  store i32 %3704, i32* %3693, align 4
  br label %3719

3705:                                             ; preds = %3551
  %3706 = zext i32 %3554 to i64
  %3707 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %2, i64 0, i32 1, i64 %77, i64 %3706
  %3708 = icmp eq i32 %3554, %3451
  %3709 = load i32, i32* %3707, align 4
  br i1 %3708, label %3716, label %3710

3710:                                             ; preds = %3705
  %3711 = add nsw i32 %3709, 1
  %3712 = load i32, i32* %3434, align 8
  %3713 = shl nsw i32 %3712, 6
  %3714 = icmp slt i32 %3711, %3713
  %3715 = select i1 %3714, i32 %3711, i32 %3713
  store i32 %3715, i32* %3707, align 4
  br label %3719

3716:                                             ; preds = %3705
  %3717 = ashr i32 %3709, 4
  %3718 = sub nsw i32 %3709, %3717
  store i32 %3718, i32* %3707, align 4
  br label %3719

3719:                                             ; preds = %3716, %3710, %3702, %3696
  %3720 = load i32, i32* %83, align 4
  %3721 = icmp eq i32 %3720, 0
  %3722 = load i32, i32* %3460, align 8
  br i1 %3721, label %3739, label %3723

3723:                                             ; preds = %3719
  %3724 = add i32 %3722, %82
  %3725 = load i32*, i32** %3453, align 8
  %3726 = sext i32 %3724 to i64
  %3727 = getelementptr inbounds i32, i32* %3725, i64 %3726
  %3728 = icmp eq i32 %3722, %3451
  %3729 = load i32, i32* %3727, align 4
  br i1 %3728, label %3736, label %3730

3730:                                             ; preds = %3723
  %3731 = add nsw i32 %3729, 1
  %3732 = load i32, i32* %3434, align 8
  %3733 = shl nsw i32 %3732, 6
  %3734 = icmp slt i32 %3731, %3733
  %3735 = select i1 %3734, i32 %3731, i32 %3733
  store i32 %3735, i32* %3727, align 4
  br label %3753

3736:                                             ; preds = %3723
  %3737 = ashr i32 %3729, 4
  %3738 = sub nsw i32 %3729, %3737
  store i32 %3738, i32* %3727, align 4
  br label %3753

3739:                                             ; preds = %3719
  %3740 = zext i32 %3722 to i64
  %3741 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %2, i64 0, i32 1, i64 %77, i64 %3740
  %3742 = icmp eq i32 %3722, %3451
  %3743 = load i32, i32* %3741, align 4
  br i1 %3742, label %3750, label %3744

3744:                                             ; preds = %3739
  %3745 = add nsw i32 %3743, 1
  %3746 = load i32, i32* %3434, align 8
  %3747 = shl nsw i32 %3746, 6
  %3748 = icmp slt i32 %3745, %3747
  %3749 = select i1 %3748, i32 %3745, i32 %3747
  store i32 %3749, i32* %3741, align 4
  br label %3753

3750:                                             ; preds = %3739
  %3751 = ashr i32 %3743, 4
  %3752 = sub nsw i32 %3743, %3751
  store i32 %3752, i32* %3741, align 4
  br label %3753

3753:                                             ; preds = %3750, %3744, %3736, %3730
  %3754 = load i32, i32* %83, align 4
  %3755 = icmp eq i32 %3754, 0
  %3756 = load i32, i32* %164, align 16
  %3757 = load i32, i32* %3461, align 4
  br i1 %3755, label %3781, label %3758

3758:                                             ; preds = %3753
  %3759 = add i32 %3757, %82
  %3760 = load i32*, i32** %3453, align 8
  %3761 = sext i32 %3759 to i64
  %3762 = getelementptr inbounds i32, i32* %3760, i64 %3761
  %3763 = icmp eq i32 %3757, %3451
  br i1 %3763, label %3777, label %3764

3764:                                             ; preds = %3758
  %3765 = load i32, i32* %3455, align 8
  %3766 = icmp ne i32 %3765, 0
  %3767 = icmp slt i32 %3756, 5
  %3768 = and i1 %3457, %3767
  %3769 = and i1 %3766, %3768
  %3770 = load i32, i32* %3762, align 4
  br i1 %3769, label %3523, label %3771

3771:                                             ; preds = %3764
  %3772 = add nsw i32 %3770, 1
  %3773 = load i32, i32* %3434, align 8
  %3774 = shl nsw i32 %3773, 6
  %3775 = icmp slt i32 %3772, %3774
  %3776 = select i1 %3775, i32 %3772, i32 %3774
  store i32 %3776, i32* %3762, align 4
  br label %3555

3777:                                             ; preds = %3758
  %3778 = load i32, i32* %3762, align 4
  %3779 = ashr i32 %3778, 4
  %3780 = sub nsw i32 %3778, %3779
  store i32 %3780, i32* %3762, align 4
  br label %3555

3781:                                             ; preds = %3753
  %3782 = zext i32 %3757 to i64
  %3783 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %2, i64 0, i32 1, i64 %77, i64 %3782
  %3784 = icmp eq i32 %3757, %3451
  br i1 %3784, label %3798, label %3785

3785:                                             ; preds = %3781
  %3786 = load i32, i32* %3455, align 8
  %3787 = icmp ne i32 %3786, 0
  %3788 = icmp ult i32 %3756, 5
  %3789 = and i1 %3457, %3788
  %3790 = and i1 %3787, %3789
  %3791 = load i32, i32* %3783, align 4
  br i1 %3790, label %3541, label %3792

3792:                                             ; preds = %3785
  %3793 = add nsw i32 %3791, 1
  %3794 = load i32, i32* %3434, align 8
  %3795 = shl nsw i32 %3794, 6
  %3796 = icmp slt i32 %3793, %3795
  %3797 = select i1 %3796, i32 %3793, i32 %3795
  store i32 %3797, i32* %3783, align 4
  br label %3555

3798:                                             ; preds = %3781
  %3799 = load i32, i32* %3783, align 4
  %3800 = ashr i32 %3799, 4
  %3801 = sub nsw i32 %3799, %3800
  store i32 %3801, i32* %3783, align 4
  br label %3555
}

declare i32 @vp9_get_intra_cost_penalty(%struct.VP9_COMP*, i8 zeroext, i32, i32) local_unnamed_addr #2

declare i32 @vp9_high_get_sby_perpixel_variance(%struct.VP9_COMP*, %struct.buf_2d*, i8 zeroext, i32) local_unnamed_addr #2

declare i32 @vp9_get_sby_perpixel_variance(%struct.VP9_COMP*, %struct.buf_2d*, i8 zeroext) local_unnamed_addr #2

declare void @vp9_init_plane_quantizers(%struct.VP9_COMP*, %struct.macroblock*) local_unnamed_addr #2

declare i32 @vp9_denoise_svc_non_key(%struct.VP9_COMP*) local_unnamed_addr #2

declare void @vp9_denoiser_reset_frame_stats(%struct.PICK_MODE_CONTEXT*) local_unnamed_addr #2

declare void @vp9_build_inter_predictors_sby(%struct.macroblockd*, i32, i32, i8 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @model_rd_for_sb_y_large(%struct.VP9_COMP* nocapture readonly, i8 zeroext, %struct.macroblock* nocapture, %struct.macroblockd*, i32* nocapture, i64* nocapture, i32* nocapture, i32* nocapture, i32, i32, i32* nocapture, i32* nocapture) unnamed_addr #0 {
  %13 = alloca i32, align 4
  %14 = alloca i64, align 8
  %15 = alloca [64 x i32], align 16
  %16 = alloca [64 x i32], align 16
  %17 = alloca [64 x i32], align 16
  %18 = alloca [16 x i32], align 16
  %19 = alloca [16 x i32], align 16
  %20 = alloca [16 x i32], align 16
  %21 = alloca [4 x i32], align 16
  %22 = alloca [4 x i32], align 16
  %23 = alloca [2 x i32], align 4
  %24 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #3
  store i32 -1431655766, i32* %13, align 4
  %25 = bitcast i64* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #3
  store i64 -6148914691236517206, i64* %14, align 8
  %26 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 0, i64 0, i32 12
  %27 = load i16*, i16** %26, align 8
  %28 = load i16, i16* %27, align 2
  %29 = sext i16 %28 to i32
  %30 = getelementptr inbounds i16, i16* %27, i64 1
  %31 = load i16, i16* %30, align 2
  %32 = sext i16 %31 to i32
  %33 = mul nsw i32 %29, %29
  %34 = lshr i32 %33, 6
  %35 = zext i32 %34 to i64
  %36 = mul nsw i32 %32, %32
  %37 = lshr i32 %36, 6
  %38 = zext i32 %37 to i64
  %39 = zext i8 %1 to i64
  %40 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = getelementptr inbounds [13 x i8], [13 x i8]* @b_height_log2_lookup, i64 0, i64 %39
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = add nuw nsw i32 %45, %42
  %47 = add nsw i32 %46, -2
  %48 = shl i32 1, %47
  %49 = bitcast [64 x i32]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %49) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %49, i8 0, i64 256, i1 false)
  %50 = bitcast [64 x i32]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %50) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %50, i8 0, i64 256, i1 false)
  %51 = bitcast [64 x i32]* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %51) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %51, i8 0, i64 256, i1 false)
  %52 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 80
  %53 = load i32, i32* %52, align 16
  %54 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 0, i32 4, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 0, i32 4, i32 1
  %57 = load i32, i32* %56, align 8
  %58 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 0, i64 0, i32 3, i32 0
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 0, i64 0, i32 3, i32 1
  %61 = load i32, i32* %60, align 8
  %62 = shl i32 4, %42
  %63 = shl i32 4, %45
  %64 = getelementptr inbounds [64 x i32], [64 x i32]* %15, i64 0, i64 0
  %65 = getelementptr inbounds [64 x i32], [64 x i32]* %17, i64 0, i64 0
  %66 = icmp sgt i32 %63, 0
  br i1 %66, label %67, label %137

67:                                               ; preds = %12
  %68 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 11
  %69 = load i32, i32* %68, align 16
  %70 = icmp sgt i32 %62, 0
  %71 = icmp eq i32 %69, 0
  %72 = sext i32 %61 to i64
  %73 = sext i32 %57 to i64
  %74 = sext i32 %63 to i64
  br label %75

75:                                               ; preds = %131, %67
  %76 = phi i32 [ 0, %67 ], [ %132, %131 ]
  %77 = phi i32 [ 0, %67 ], [ %133, %131 ]
  %78 = phi i64 [ 0, %67 ], [ %135, %131 ]
  %79 = phi i32 [ 0, %67 ], [ %134, %131 ]
  br i1 %70, label %80, label %131

80:                                               ; preds = %75
  %81 = mul nsw i64 %78, %73
  %82 = getelementptr inbounds i8, i8* %55, i64 %81
  %83 = mul nsw i64 %78, %72
  %84 = getelementptr inbounds i8, i8* %59, i64 %83
  %85 = sext i32 %79 to i64
  br label %86

86:                                               ; preds = %112, %80
  %87 = phi i32 [ %76, %80 ], [ %115, %112 ]
  %88 = phi i32 [ %77, %80 ], [ %118, %112 ]
  %89 = phi i64 [ 0, %80 ], [ %126, %112 ]
  %90 = phi i64 [ %85, %80 ], [ %125, %112 ]
  br i1 %71, label %107, label %91

91:                                               ; preds = %86
  switch i32 %53, label %112 [
    i32 8, label %92
    i32 10, label %97
    i32 12, label %102
  ]

92:                                               ; preds = %91
  %93 = getelementptr inbounds i8, i8* %82, i64 %89
  %94 = getelementptr inbounds i8, i8* %84, i64 %89
  %95 = getelementptr inbounds [64 x i32], [64 x i32]* %15, i64 0, i64 %90
  %96 = getelementptr inbounds [64 x i32], [64 x i32]* %16, i64 0, i64 %90
  call void @vpx_highbd_8_get8x8var_sse2(i8* %93, i32 %57, i8* %94, i32 %61, i32* %95, i32* %96) #3
  br label %112

97:                                               ; preds = %91
  %98 = getelementptr inbounds i8, i8* %82, i64 %89
  %99 = getelementptr inbounds i8, i8* %84, i64 %89
  %100 = getelementptr inbounds [64 x i32], [64 x i32]* %15, i64 0, i64 %90
  %101 = getelementptr inbounds [64 x i32], [64 x i32]* %16, i64 0, i64 %90
  call void @vpx_highbd_10_get8x8var_sse2(i8* %98, i32 %57, i8* %99, i32 %61, i32* %100, i32* %101) #3
  br label %112

102:                                              ; preds = %91
  %103 = getelementptr inbounds i8, i8* %82, i64 %89
  %104 = getelementptr inbounds i8, i8* %84, i64 %89
  %105 = getelementptr inbounds [64 x i32], [64 x i32]* %15, i64 0, i64 %90
  %106 = getelementptr inbounds [64 x i32], [64 x i32]* %16, i64 0, i64 %90
  call void @vpx_highbd_12_get8x8var_sse2(i8* %103, i32 %57, i8* %104, i32 %61, i32* %105, i32* %106) #3
  br label %112

107:                                              ; preds = %86
  %108 = getelementptr inbounds i8, i8* %82, i64 %89
  %109 = getelementptr inbounds i8, i8* %84, i64 %89
  %110 = getelementptr inbounds [64 x i32], [64 x i32]* %15, i64 0, i64 %90
  %111 = getelementptr inbounds [64 x i32], [64 x i32]* %16, i64 0, i64 %90
  call void @vpx_get8x8var_sse2(i8* %108, i32 %57, i8* %109, i32 %61, i32* %110, i32* %111) #3
  br label %112

112:                                              ; preds = %107, %102, %97, %92, %91
  %113 = getelementptr inbounds [64 x i32], [64 x i32]* %15, i64 0, i64 %90
  %114 = load i32, i32* %113, align 4
  %115 = add i32 %114, %87
  %116 = getelementptr inbounds [64 x i32], [64 x i32]* %16, i64 0, i64 %90
  %117 = load i32, i32* %116, align 4
  %118 = add nsw i32 %117, %88
  %119 = sext i32 %117 to i64
  %120 = mul nsw i64 %119, %119
  %121 = lshr i64 %120, 6
  %122 = trunc i64 %121 to i32
  %123 = sub i32 %114, %122
  %124 = getelementptr inbounds [64 x i32], [64 x i32]* %17, i64 0, i64 %90
  store i32 %123, i32* %124, align 4
  %125 = add i64 %90, 1
  %126 = add nuw i64 %89, 8
  %127 = trunc i64 %126 to i32
  %128 = icmp sgt i32 %62, %127
  br i1 %128, label %86, label %129

129:                                              ; preds = %112
  %130 = trunc i64 %125 to i32
  br label %131

131:                                              ; preds = %129, %75
  %132 = phi i32 [ %115, %129 ], [ %76, %75 ]
  %133 = phi i32 [ %118, %129 ], [ %77, %75 ]
  %134 = phi i32 [ %130, %129 ], [ %79, %75 ]
  %135 = add nuw nsw i64 %78, 8
  %136 = icmp slt i64 %135, %74
  br i1 %136, label %75, label %137

137:                                              ; preds = %131, %12
  %138 = phi i32 [ 0, %12 ], [ %132, %131 ]
  %139 = phi i32 [ 0, %12 ], [ %133, %131 ]
  %140 = sext i32 %139 to i64
  %141 = mul nsw i64 %140, %140
  %142 = add nuw nsw i32 %46, 4
  %143 = zext i32 %142 to i64
  %144 = lshr i64 %141, %143
  %145 = trunc i64 %144 to i32
  %146 = sub i32 %138, %145
  store i32 %146, i32* %6, align 4
  store i32 %138, i32* %7, align 4
  %147 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 9
  %148 = load i32, i32* %147, align 16
  %149 = icmp sgt i32 %148, 0
  br i1 %149, label %150, label %174

150:                                              ; preds = %137
  %151 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %152 = load i32, i32* %151, align 4
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %160, label %154

154:                                              ; preds = %150
  %155 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %156 = load i32, i32* %155, align 16
  %157 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 32
  %158 = load i32, i32* %157, align 16
  %159 = icmp slt i32 %156, %158
  br i1 %159, label %174, label %160

160:                                              ; preds = %150, %154
  %161 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 11
  %162 = load i32, i32* %161, align 8
  %163 = icmp sgt i32 %162, 5
  br i1 %163, label %164, label %174

164:                                              ; preds = %160
  %165 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 8
  %166 = load i32, i32* %165, align 4
  %167 = icmp slt i32 %139, 0
  %168 = sub nsw i32 0, %139
  %169 = select i1 %167, i32 %168, i32 %139
  %170 = lshr i32 %169, %46
  %171 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 1
  %172 = load i32, i32* %171, align 4
  %173 = call i64 @vp9_scale_acskip_thresh(i64 %38, i32 %166, i32 %170, i32 %172) #3
  br label %196

174:                                              ; preds = %154, %160, %137
  %175 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 11
  %176 = load i32, i32* %175, align 8
  %177 = icmp slt i32 %139, 0
  %178 = sub nsw i32 0, %139
  %179 = select i1 %177, i32 %178, i32 %139
  %180 = lshr i32 %179, %46
  %181 = icmp sgt i32 %176, 7
  %182 = icmp slt i32 %180, 5
  %183 = and i1 %182, %181
  br i1 %183, label %184, label %193

184:                                              ; preds = %174
  %185 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  %186 = load i32, i32* %185, align 4
  %187 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 3
  %188 = load i32, i32* %187, align 16
  %189 = icmp slt i32 %188, 641
  %190 = icmp slt i32 %186, 481
  %191 = and i1 %190, %189
  %192 = select i1 %191, i64 4, i64 2
  br label %193

193:                                              ; preds = %174, %184
  %194 = phi i64 [ %192, %184 ], [ 1, %174 ]
  %195 = mul nuw nsw i64 %194, %38
  br label %196

196:                                              ; preds = %193, %164
  %197 = phi i64 [ %173, %164 ], [ %195, %193 ]
  %198 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 23
  %199 = trunc i64 %197 to i32
  %200 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 31
  %201 = load i32, i32* %200, align 4
  %202 = icmp eq i32 %201, 3
  br i1 %202, label %203, label %209

203:                                              ; preds = %196
  %204 = load i32, i32* %198, align 16
  %205 = icmp ne i32 %204, 0
  %206 = icmp ne i32 %146, 0
  %207 = and i1 %206, %205
  %208 = zext i1 %207 to i32
  br label %209

209:                                              ; preds = %203, %196
  %210 = phi i32 [ 1, %196 ], [ %208, %203 ]
  %211 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 37
  %212 = load i32, i32* %211, align 16
  %213 = icmp eq i32 %212, 4
  br i1 %213, label %214, label %253

214:                                              ; preds = %209
  %215 = shl i32 %146, 2
  %216 = icmp ult i32 %215, %138
  br i1 %216, label %217, label %223

217:                                              ; preds = %214
  %218 = getelementptr inbounds [13 x i8], [13 x i8]* @max_txsize_lookup, i64 0, i64 %39
  %219 = load i8, i8* %218, align 1
  %220 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @tx_mode_to_biggest_tx_size, i64 0, i64 4), align 1
  %221 = icmp ult i8 %219, %220
  %222 = select i1 %221, i8 %219, i8 %220
  br label %223

223:                                              ; preds = %217, %214
  %224 = phi i8 [ %222, %217 ], [ 1, %214 ]
  %225 = icmp ne i32 %210, 0
  %226 = and i1 %202, %225
  br i1 %226, label %227, label %236

227:                                              ; preds = %223
  %228 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 6
  %229 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %228, align 8
  %230 = load %struct.MODE_INFO*, %struct.MODE_INFO** %229, align 8
  %231 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %230, i64 0, i32 4
  %232 = load i8, i8* %231, align 4
  %233 = sext i8 %232 to i32
  %234 = add nsw i32 %233, -1
  %235 = icmp ugt i32 %234, 1
  br i1 %235, label %236, label %240

236:                                              ; preds = %227, %223
  %237 = icmp ugt i8 %224, 2
  %238 = and i1 %225, %237
  %239 = select i1 %238, i8 2, i8 %224
  br label %240

240:                                              ; preds = %236, %227
  %241 = phi i8 [ 1, %227 ], [ %239, %236 ]
  %242 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 62
  %243 = load i32, i32* %242, align 4
  %244 = icmp eq i32 %243, 1
  %245 = icmp eq i8 %241, 1
  %246 = and i1 %245, %244
  %247 = icmp ult i8 %1, 7
  %248 = and i1 %247, %246
  %249 = lshr i32 %146, 5
  %250 = icmp ugt i32 %249, %199
  %251 = and i1 %250, %248
  %252 = select i1 %251, i8 0, i8 %241
  br label %261

253:                                              ; preds = %209
  %254 = getelementptr inbounds [13 x i8], [13 x i8]* @max_txsize_lookup, i64 0, i64 %39
  %255 = load i8, i8* %254, align 1
  %256 = zext i32 %212 to i64
  %257 = getelementptr inbounds [5 x i8], [5 x i8]* @tx_mode_to_biggest_tx_size, i64 0, i64 %256
  %258 = load i8, i8* %257, align 1
  %259 = icmp ult i8 %255, %258
  %260 = select i1 %259, i8 %255, i8 %258
  br label %261

261:                                              ; preds = %253, %240
  %262 = phi i8 [ %252, %240 ], [ %260, %253 ]
  %263 = icmp eq i8 %262, 0
  %264 = select i1 %263, i8 1, i8 %262
  %265 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 6
  %266 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %265, align 8
  %267 = load %struct.MODE_INFO*, %struct.MODE_INFO** %266, align 8
  %268 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %267, i64 0, i32 2
  store i8 %264, i8* %268, align 2
  %269 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 62
  %270 = load i32, i32* %269, align 4
  %271 = icmp eq i32 %270, 1
  br i1 %271, label %272, label %282

272:                                              ; preds = %261
  %273 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 59
  %274 = load i32, i32* %273, align 16
  %275 = icmp eq i32 %274, 0
  br i1 %275, label %282, label %276

276:                                              ; preds = %272
  %277 = load i32, i32* %198, align 16
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %279, label %282

279:                                              ; preds = %276
  %280 = shl nuw nsw i32 %34, 1
  %281 = zext i32 %280 to i64
  br label %282

282:                                              ; preds = %272, %279, %276, %261
  %283 = phi i64 [ %281, %279 ], [ %35, %276 ], [ %35, %272 ], [ %35, %261 ]
  %284 = bitcast [16 x i32]* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %284) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %284, i8 0, i64 64, i1 false)
  %285 = bitcast [16 x i32]* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %285) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %285, i8 0, i64 64, i1 false)
  %286 = bitcast [16 x i32]* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %286) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %286, i8 0, i64 64, i1 false)
  %287 = bitcast [4 x i32]* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %287) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %287, i8 0, i64 16, i1 false)
  %288 = bitcast [4 x i32]* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %288) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %288, i8 0, i64 16, i1 false)
  %289 = icmp eq i8 %264, 1
  br i1 %289, label %294, label %290

290:                                              ; preds = %282
  %291 = icmp eq i8 %264, 2
  %292 = select i1 %291, i32 2, i32 4
  %293 = ashr i32 %48, %292
  br label %294

294:                                              ; preds = %282, %290
  %295 = phi i32 [ %293, %290 ], [ %48, %282 ]
  %296 = icmp eq i8 %264, 2
  %297 = getelementptr inbounds [16 x i32], [16 x i32]* %18, i64 0, i64 0
  %298 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 0
  %299 = select i1 %296, i32* %297, i32* %298
  %300 = select i1 %289, i32* %64, i32* %299
  %301 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 0
  %302 = getelementptr inbounds [4 x i32], [4 x i32]* %22, i64 0, i64 0
  %303 = select i1 %296, i32* %301, i32* %302
  %304 = select i1 %289, i32* %65, i32* %303
  %305 = icmp ugt i8 %264, 1
  br i1 %305, label %306, label %461

306:                                              ; preds = %294
  %307 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @txsize_to_bsize, i64 0, i64 1), align 1
  %308 = zext i8 %307 to i64
  %309 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %308
  %310 = load i8, i8* %309, align 1
  %311 = zext i8 %310 to i32
  %312 = sub nsw i32 %42, %311
  %313 = getelementptr inbounds [13 x i8], [13 x i8]* @b_height_log2_lookup, i64 0, i64 %308
  %314 = load i8, i8* %313, align 1
  %315 = zext i8 %314 to i32
  %316 = sub nsw i32 %45, %315
  %317 = shl i32 1, %316
  %318 = icmp eq i32 %316, 31
  br i1 %318, label %383, label %319

319:                                              ; preds = %306
  %320 = shl i32 1, %312
  %321 = icmp eq i32 %312, 31
  %322 = zext i8 %310 to i64
  %323 = zext i8 %314 to i64
  %324 = add nuw nsw i64 %322, 6
  %325 = add nuw nsw i64 %324, %323
  %326 = sext i32 %320 to i64
  br label %327

327:                                              ; preds = %379, %319
  %328 = phi i32 [ 0, %319 ], [ %380, %379 ]
  %329 = phi i32 [ 0, %319 ], [ %381, %379 ]
  br i1 %321, label %379, label %330

330:                                              ; preds = %327
  %331 = shl i32 %329, %312
  %332 = or i32 %329, 1
  %333 = shl i32 %332, %312
  %334 = sext i32 %328 to i64
  %335 = sext i32 %333 to i64
  %336 = sext i32 %331 to i64
  br label %337

337:                                              ; preds = %337, %330
  %338 = phi i64 [ 0, %330 ], [ %375, %337 ]
  %339 = phi i64 [ %334, %330 ], [ %374, %337 ]
  %340 = add nsw i64 %338, %336
  %341 = getelementptr inbounds [64 x i32], [64 x i32]* %15, i64 0, i64 %340
  %342 = load i32, i32* %341, align 4
  %343 = add nsw i64 %340, 1
  %344 = getelementptr inbounds [64 x i32], [64 x i32]* %15, i64 0, i64 %343
  %345 = load i32, i32* %344, align 4
  %346 = add i32 %345, %342
  %347 = add nsw i64 %338, %335
  %348 = getelementptr inbounds [64 x i32], [64 x i32]* %15, i64 0, i64 %347
  %349 = load i32, i32* %348, align 4
  %350 = add i32 %346, %349
  %351 = add nsw i64 %347, 1
  %352 = getelementptr inbounds [64 x i32], [64 x i32]* %15, i64 0, i64 %351
  %353 = load i32, i32* %352, align 4
  %354 = add i32 %350, %353
  %355 = getelementptr inbounds [16 x i32], [16 x i32]* %18, i64 0, i64 %339
  store i32 %354, i32* %355, align 4
  %356 = getelementptr inbounds [64 x i32], [64 x i32]* %16, i64 0, i64 %340
  %357 = load i32, i32* %356, align 4
  %358 = getelementptr inbounds [64 x i32], [64 x i32]* %16, i64 0, i64 %343
  %359 = load i32, i32* %358, align 4
  %360 = add nsw i32 %359, %357
  %361 = getelementptr inbounds [64 x i32], [64 x i32]* %16, i64 0, i64 %347
  %362 = load i32, i32* %361, align 4
  %363 = add nsw i32 %360, %362
  %364 = getelementptr inbounds [64 x i32], [64 x i32]* %16, i64 0, i64 %351
  %365 = load i32, i32* %364, align 4
  %366 = add nsw i32 %363, %365
  %367 = getelementptr inbounds [16 x i32], [16 x i32]* %19, i64 0, i64 %339
  store i32 %366, i32* %367, align 4
  %368 = sext i32 %366 to i64
  %369 = mul nsw i64 %368, %368
  %370 = lshr i64 %369, %325
  %371 = trunc i64 %370 to i32
  %372 = sub i32 %354, %371
  %373 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 %339
  store i32 %372, i32* %373, align 4
  %374 = add nsw i64 %339, 1
  %375 = add nuw nsw i64 %338, 2
  %376 = icmp slt i64 %375, %326
  br i1 %376, label %337, label %377

377:                                              ; preds = %337
  %378 = trunc i64 %374 to i32
  br label %379

379:                                              ; preds = %377, %327
  %380 = phi i32 [ %328, %327 ], [ %378, %377 ]
  %381 = add nuw nsw i32 %329, 2
  %382 = icmp slt i32 %381, %317
  br i1 %382, label %327, label %383

383:                                              ; preds = %379, %306
  %384 = icmp eq i8 %264, 3
  br i1 %384, label %385, label %461

385:                                              ; preds = %383
  %386 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @txsize_to_bsize, i64 0, i64 2), align 1
  %387 = zext i8 %386 to i64
  %388 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %387
  %389 = load i8, i8* %388, align 1
  %390 = zext i8 %389 to i32
  %391 = sub nsw i32 %42, %390
  %392 = getelementptr inbounds [13 x i8], [13 x i8]* @b_height_log2_lookup, i64 0, i64 %387
  %393 = load i8, i8* %392, align 1
  %394 = zext i8 %393 to i32
  %395 = sub nsw i32 %45, %394
  %396 = shl i32 1, %395
  %397 = icmp eq i32 %395, 31
  br i1 %397, label %461, label %398

398:                                              ; preds = %385
  %399 = shl i32 1, %391
  %400 = icmp eq i32 %391, 31
  %401 = zext i8 %389 to i64
  %402 = zext i8 %393 to i64
  %403 = add nuw nsw i64 %401, 6
  %404 = add nuw nsw i64 %403, %402
  %405 = sext i32 %399 to i64
  br label %406

406:                                              ; preds = %457, %398
  %407 = phi i32 [ 0, %398 ], [ %458, %457 ]
  %408 = phi i32 [ 0, %398 ], [ %459, %457 ]
  br i1 %400, label %457, label %409

409:                                              ; preds = %406
  %410 = shl i32 %408, %391
  %411 = or i32 %408, 1
  %412 = shl i32 %411, %391
  %413 = sext i32 %407 to i64
  %414 = sext i32 %412 to i64
  %415 = sext i32 %410 to i64
  br label %416

416:                                              ; preds = %416, %409
  %417 = phi i64 [ 0, %409 ], [ %453, %416 ]
  %418 = phi i64 [ %413, %409 ], [ %452, %416 ]
  %419 = add nsw i64 %417, %415
  %420 = getelementptr inbounds [16 x i32], [16 x i32]* %18, i64 0, i64 %419
  %421 = load i32, i32* %420, align 4
  %422 = add nsw i64 %419, 1
  %423 = getelementptr inbounds [16 x i32], [16 x i32]* %18, i64 0, i64 %422
  %424 = load i32, i32* %423, align 4
  %425 = add i32 %424, %421
  %426 = add nsw i64 %417, %414
  %427 = getelementptr inbounds [16 x i32], [16 x i32]* %18, i64 0, i64 %426
  %428 = load i32, i32* %427, align 4
  %429 = add i32 %425, %428
  %430 = add nsw i64 %426, 1
  %431 = getelementptr inbounds [16 x i32], [16 x i32]* %18, i64 0, i64 %430
  %432 = load i32, i32* %431, align 4
  %433 = add i32 %429, %432
  %434 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 %418
  store i32 %433, i32* %434, align 4
  %435 = getelementptr inbounds [16 x i32], [16 x i32]* %19, i64 0, i64 %419
  %436 = load i32, i32* %435, align 4
  %437 = getelementptr inbounds [16 x i32], [16 x i32]* %19, i64 0, i64 %422
  %438 = load i32, i32* %437, align 4
  %439 = add nsw i32 %438, %436
  %440 = getelementptr inbounds [16 x i32], [16 x i32]* %19, i64 0, i64 %426
  %441 = load i32, i32* %440, align 4
  %442 = add nsw i32 %439, %441
  %443 = getelementptr inbounds [16 x i32], [16 x i32]* %19, i64 0, i64 %430
  %444 = load i32, i32* %443, align 4
  %445 = add nsw i32 %442, %444
  %446 = sext i32 %445 to i64
  %447 = mul nsw i64 %446, %446
  %448 = lshr i64 %447, %404
  %449 = trunc i64 %448 to i32
  %450 = sub i32 %433, %449
  %451 = getelementptr inbounds [4 x i32], [4 x i32]* %22, i64 0, i64 %418
  store i32 %450, i32* %451, align 4
  %452 = add nsw i64 %418, 1
  %453 = add nuw nsw i64 %417, 2
  %454 = icmp slt i64 %453, %405
  br i1 %454, label %416, label %455

455:                                              ; preds = %416
  %456 = trunc i64 %452 to i32
  br label %457

457:                                              ; preds = %455, %406
  %458 = phi i32 [ %407, %406 ], [ %456, %455 ]
  %459 = add nuw nsw i32 %408, 2
  %460 = icmp slt i32 %459, %396
  br i1 %460, label %406, label %461

461:                                              ; preds = %457, %294, %385, %383
  %462 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 47, i64 0
  store i8 0, i8* %462, align 4
  %463 = icmp sgt i32 %295, 0
  br i1 %463, label %464, label %501

464:                                              ; preds = %461
  %465 = icmp eq i32 %146, 0
  %466 = zext i32 %295 to i64
  br label %469

467:                                              ; preds = %469
  %468 = icmp eq i64 %476, %466
  br i1 %468, label %477, label %469

469:                                              ; preds = %467, %464
  %470 = phi i64 [ 0, %464 ], [ %476, %467 ]
  %471 = getelementptr inbounds i32, i32* %304, i64 %470
  %472 = load i32, i32* %471, align 4
  %473 = zext i32 %472 to i64
  %474 = icmp sgt i64 %197, %473
  %475 = or i1 %465, %474
  %476 = add nuw nsw i64 %470, 1
  br i1 %475, label %467, label %477

477:                                              ; preds = %469, %467
  %478 = phi i32 [ 1, %467 ], [ 0, %469 ]
  br i1 %463, label %479, label %495

479:                                              ; preds = %477
  %480 = icmp eq i32 %145, 0
  %481 = zext i32 %295 to i64
  br label %484

482:                                              ; preds = %484
  %483 = icmp eq i64 %494, %481
  br i1 %483, label %495, label %484

484:                                              ; preds = %482, %479
  %485 = phi i64 [ 0, %479 ], [ %494, %482 ]
  %486 = getelementptr inbounds i32, i32* %300, i64 %485
  %487 = load i32, i32* %486, align 4
  %488 = getelementptr inbounds i32, i32* %304, i64 %485
  %489 = load i32, i32* %488, align 4
  %490 = sub i32 %487, %489
  %491 = zext i32 %490 to i64
  %492 = icmp ugt i64 %283, %491
  %493 = or i1 %480, %492
  %494 = add nuw nsw i64 %485, 1
  br i1 %493, label %482, label %495

495:                                              ; preds = %484, %482, %477
  %496 = phi i1 [ false, %477 ], [ true, %484 ], [ false, %482 ]
  %497 = icmp eq i32 %478, 0
  br i1 %497, label %504, label %498

498:                                              ; preds = %495
  %499 = select i1 %496, i8 2, i8 1
  %500 = xor i1 %496, true
  br label %501

501:                                              ; preds = %498, %461
  %502 = phi i1 [ true, %461 ], [ %500, %498 ]
  %503 = phi i8 [ 1, %461 ], [ %499, %498 ]
  store i8 %503, i8* %462, align 4
  br label %507

504:                                              ; preds = %495
  %505 = xor i1 %496, true
  %506 = zext i1 %505 to i32
  br label %507

507:                                              ; preds = %504, %501
  %508 = phi i1 [ %502, %501 ], [ false, %504 ]
  %509 = phi i32 [ 0, %501 ], [ %506, %504 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %288) #3
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %287) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %286) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %285) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %284) #3
  br i1 %508, label %510, label %657

510:                                              ; preds = %507
  %511 = bitcast [2 x i32]* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %511) #3
  %512 = getelementptr inbounds [2 x i32], [2 x i32]* %23, i64 0, i64 0
  store i32 -1431655766, i32* %512, align 4
  %513 = getelementptr inbounds [2 x i32], [2 x i32]* %23, i64 0, i64 1
  store i32 -1431655766, i32* %513, align 4
  store i32 0, i32* %4, align 4
  %514 = shl i32 %138, 4
  %515 = zext i32 %514 to i64
  store i64 %515, i64* %5, align 8
  %516 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %265, align 8
  %517 = load %struct.MODE_INFO*, %struct.MODE_INFO** %516, align 8
  %518 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %517, i64 0, i32 0
  %519 = load i8, i8* %518, align 4
  %520 = zext i8 %519 to i64
  %521 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %517, i64 0, i32 2
  %522 = load i8, i8* %521, align 2
  %523 = zext i8 %522 to i64
  %524 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 0, i64 1, i32 1
  %525 = load i32, i32* %524, align 8
  %526 = sext i32 %525 to i64
  %527 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 0, i64 1, i32 2
  %528 = load i32, i32* %527, align 4
  %529 = sext i32 %528 to i64
  %530 = getelementptr inbounds [13 x [4 x [2 x [2 x i8]]]], [13 x [4 x [2 x [2 x i8]]]]* @uv_txsize_lookup, i64 0, i64 %520, i64 %523, i64 %526, i64 %529
  %531 = load i8, i8* %530, align 1
  %532 = zext i8 %531 to i64
  %533 = getelementptr inbounds [4 x i8], [4 x i8]* @txsize_to_bsize, i64 0, i64 %532
  %534 = load i8, i8* %533, align 1
  %535 = getelementptr inbounds [13 x [2 x [2 x i8]]], [13 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %39, i64 %526, i64 %529
  %536 = load i8, i8* %535, align 1
  %537 = zext i8 %536 to i64
  %538 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %537
  %539 = load i8, i8* %538, align 1
  %540 = zext i8 %539 to i32
  %541 = getelementptr inbounds [13 x i8], [13 x i8]* @b_height_log2_lookup, i64 0, i64 %537
  %542 = load i8, i8* %541, align 1
  %543 = zext i8 %542 to i32
  %544 = zext i8 %534 to i64
  %545 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %544
  %546 = load i8, i8* %545, align 1
  %547 = zext i8 %546 to i32
  %548 = getelementptr inbounds [13 x i8], [13 x i8]* @b_height_log2_lookup, i64 0, i64 %544
  %549 = load i8, i8* %548, align 1
  %550 = zext i8 %549 to i32
  %551 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 0, i64 1, i32 12
  %552 = load i16*, i16** %551, align 8
  %553 = load i16, i16* %552, align 2
  %554 = sext i16 %553 to i32
  %555 = sub nsw i32 6, %540
  %556 = sub nsw i32 %555, %543
  %557 = add nsw i32 %556, %547
  %558 = add nsw i32 %557, %550
  %559 = getelementptr inbounds i16, i16* %552, i64 1
  %560 = load i16, i16* %559, align 2
  %561 = sext i16 %560 to i32
  %562 = mul nsw i32 %561, %561
  %563 = lshr i32 %562, %558
  call void @vp9_build_inter_predictors_sbp(%struct.macroblockd* %3, i32 %8, i32 %9, i8 zeroext %1, i32 1) #3
  store i32 1, i32* %11, align 4
  %564 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %537, i32 2
  %565 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %564, align 8
  %566 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 1, i32 4, i32 0
  %567 = load i8*, i8** %566, align 8
  %568 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 1, i32 4, i32 1
  %569 = load i32, i32* %568, align 8
  %570 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 0, i64 1, i32 3, i32 0
  %571 = load i8*, i8** %570, align 8
  %572 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 0, i64 1, i32 3, i32 1
  %573 = load i32, i32* %572, align 8
  %574 = call i32 %565(i8* %567, i32 %569, i8* %571, i32 %573, i32* nonnull %512) #3
  %575 = icmp ult i32 %574, %563
  %576 = icmp eq i32 %574, 0
  %577 = or i1 %575, %576
  br i1 %577, label %578, label %650

578:                                              ; preds = %510
  %579 = mul nsw i32 %554, %554
  %580 = lshr i32 %579, %558
  %581 = load i32, i32* %512, align 4
  %582 = sub i32 %581, %574
  %583 = icmp ult i32 %582, %580
  %584 = icmp eq i32 %581, %574
  %585 = or i1 %584, %583
  br i1 %585, label %586, label %650

586:                                              ; preds = %578
  %587 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %265, align 8
  %588 = load %struct.MODE_INFO*, %struct.MODE_INFO** %587, align 8
  %589 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %588, i64 0, i32 0
  %590 = load i8, i8* %589, align 4
  %591 = zext i8 %590 to i64
  %592 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %588, i64 0, i32 2
  %593 = load i8, i8* %592, align 2
  %594 = zext i8 %593 to i64
  %595 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 0, i64 2, i32 1
  %596 = load i32, i32* %595, align 8
  %597 = sext i32 %596 to i64
  %598 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 0, i64 2, i32 2
  %599 = load i32, i32* %598, align 4
  %600 = sext i32 %599 to i64
  %601 = getelementptr inbounds [13 x [4 x [2 x [2 x i8]]]], [13 x [4 x [2 x [2 x i8]]]]* @uv_txsize_lookup, i64 0, i64 %591, i64 %594, i64 %597, i64 %600
  %602 = load i8, i8* %601, align 1
  %603 = zext i8 %602 to i64
  %604 = getelementptr inbounds [4 x i8], [4 x i8]* @txsize_to_bsize, i64 0, i64 %603
  %605 = load i8, i8* %604, align 1
  %606 = getelementptr inbounds [13 x [2 x [2 x i8]]], [13 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %39, i64 %597, i64 %600
  %607 = load i8, i8* %606, align 1
  %608 = zext i8 %607 to i64
  %609 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %608
  %610 = load i8, i8* %609, align 1
  %611 = zext i8 %610 to i32
  %612 = getelementptr inbounds [13 x i8], [13 x i8]* @b_height_log2_lookup, i64 0, i64 %608
  %613 = load i8, i8* %612, align 1
  %614 = zext i8 %613 to i32
  %615 = zext i8 %605 to i64
  %616 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %615
  %617 = load i8, i8* %616, align 1
  %618 = zext i8 %617 to i32
  %619 = getelementptr inbounds [13 x i8], [13 x i8]* @b_height_log2_lookup, i64 0, i64 %615
  %620 = load i8, i8* %619, align 1
  %621 = zext i8 %620 to i32
  %622 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 0, i64 2, i32 12
  %623 = load i16*, i16** %622, align 8
  %624 = load i16, i16* %623, align 2
  %625 = sext i16 %624 to i32
  %626 = sub nsw i32 6, %611
  %627 = sub nsw i32 %626, %614
  %628 = add nsw i32 %627, %618
  %629 = add nsw i32 %628, %621
  %630 = getelementptr inbounds i16, i16* %623, i64 1
  %631 = load i16, i16* %630, align 2
  %632 = sext i16 %631 to i32
  %633 = mul nsw i32 %632, %632
  %634 = lshr i32 %633, %629
  call void @vp9_build_inter_predictors_sbp(%struct.macroblockd* %3, i32 %8, i32 %9, i8 zeroext %1, i32 2) #3
  %635 = getelementptr inbounds i32, i32* %11, i64 1
  store i32 1, i32* %635, align 4
  %636 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %608, i32 2
  %637 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %636, align 8
  %638 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 2, i32 4, i32 0
  %639 = load i8*, i8** %638, align 8
  %640 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 2, i32 4, i32 1
  %641 = load i32, i32* %640, align 8
  %642 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 0, i64 2, i32 3, i32 0
  %643 = load i8*, i8** %642, align 8
  %644 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 0, i64 2, i32 3, i32 1
  %645 = load i32, i32* %644, align 8
  %646 = call i32 %637(i8* %639, i32 %641, i8* %643, i32 %645, i32* %513) #3
  %647 = icmp ult i32 %646, %634
  %648 = icmp eq i32 %646, 0
  %649 = or i1 %647, %648
  br i1 %649, label %691, label %650

650:                                              ; preds = %691, %586, %578, %510
  %651 = phi i32 [ 0, %586 ], [ 0, %578 ], [ 0, %510 ], [ %699, %691 ]
  %652 = phi i32 [ 1, %586 ], [ 0, %578 ], [ 0, %510 ], [ 1, %691 ]
  %653 = and i32 %651, %652
  %654 = icmp eq i32 %653, 0
  br i1 %654, label %656, label %655

655:                                              ; preds = %650
  store i32 1, i32* %10, align 4
  br label %656

656:                                              ; preds = %650, %655
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %511) #3
  br label %690

657:                                              ; preds = %507
  %658 = icmp eq i32 %509, 0
  br i1 %658, label %659, label %671

659:                                              ; preds = %657
  %660 = getelementptr inbounds [13 x i8], [13 x i8]* @num_pels_log2_lookup, i64 0, i64 %39
  %661 = load i8, i8* %660, align 1
  %662 = zext i8 %661 to i32
  %663 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 23
  %664 = load i32, i32* %663, align 8
  %665 = add nsw i32 %664, -5
  %666 = lshr i32 %29, %665
  call void @vp9_model_rd_from_var_lapndz(i32 %145, i32 %662, i32 %666, i32* nonnull %13, i64* nonnull %14) #3
  %667 = load i32, i32* %13, align 4
  %668 = ashr i32 %667, 1
  store i32 %668, i32* %4, align 4
  %669 = load i64, i64* %14, align 8
  %670 = shl i64 %669, 3
  br label %674

671:                                              ; preds = %657
  store i32 0, i32* %4, align 4
  %672 = shl i64 %144, 4
  %673 = and i64 %672, 4294967280
  br label %674

674:                                              ; preds = %671, %659
  %675 = phi i64 [ %670, %659 ], [ %673, %671 ]
  store i64 %675, i64* %5, align 8
  %676 = getelementptr inbounds [13 x i8], [13 x i8]* @num_pels_log2_lookup, i64 0, i64 %39
  %677 = load i8, i8* %676, align 1
  %678 = zext i8 %677 to i32
  %679 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 23
  %680 = load i32, i32* %679, align 8
  %681 = add nsw i32 %680, -5
  %682 = lshr i32 %32, %681
  call void @vp9_model_rd_from_var_lapndz(i32 %146, i32 %678, i32 %682, i32* nonnull %13, i64* nonnull %14) #3
  %683 = load i32, i32* %13, align 4
  %684 = load i32, i32* %4, align 4
  %685 = add nsw i32 %684, %683
  store i32 %685, i32* %4, align 4
  %686 = load i64, i64* %14, align 8
  %687 = shl i64 %686, 4
  %688 = load i64, i64* %5, align 8
  %689 = add nsw i64 %688, %687
  store i64 %689, i64* %5, align 8
  br label %690

690:                                              ; preds = %674, %656
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %51) #3
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %50) #3
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %49) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #3
  ret void

691:                                              ; preds = %586
  %692 = mul nsw i32 %625, %625
  %693 = lshr i32 %692, %629
  %694 = load i32, i32* %513, align 4
  %695 = sub i32 %694, %646
  %696 = icmp ult i32 %695, %693
  %697 = icmp eq i32 %694, %646
  %698 = or i1 %697, %696
  %699 = zext i1 %698 to i32
  br label %650
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @model_rd_for_sb_y(%struct.VP9_COMP* nocapture readonly, i8 zeroext, %struct.macroblock* nocapture, %struct.macroblockd* nocapture readonly, i32* nocapture, i64* nocapture, i32* nocapture, i32* nocapture, i32) unnamed_addr #0 {
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  %13 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #3
  store i32 -1431655766, i32* %10, align 4
  %14 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #3
  store i32 -1431655766, i32* %11, align 4
  %15 = bitcast i64* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #3
  store i64 -6148914691236517206, i64* %12, align 8
  %16 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 0, i32 12, i64 0
  %17 = load i64, i64* %16, align 8
  %18 = ashr i64 %17, 6
  %19 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 0, i32 12, i64 1
  %20 = load i64, i64* %19, align 8
  %21 = ashr i64 %20, 6
  %22 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 0, i64 0, i32 12
  %23 = load i16*, i16** %22, align 8
  %24 = load i16, i16* %23, align 2
  %25 = sext i16 %24 to i32
  %26 = getelementptr inbounds i16, i16* %23, i64 1
  %27 = load i16, i16* %26, align 2
  %28 = sext i16 %27 to i32
  %29 = zext i8 %1 to i64
  %30 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %29, i32 2
  %31 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %30, align 8
  %32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 0, i32 4, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 0, i32 4, i32 1
  %35 = load i32, i32* %34, align 8
  %36 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 0, i64 0, i32 3, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 0, i64 0, i32 3, i32 1
  %39 = load i32, i32* %38, align 8
  %40 = call i32 %31(i8* %33, i32 %35, i8* %37, i32 %39, i32* nonnull %10) #3
  store i32 %40, i32* %6, align 4
  %41 = load i32, i32* %10, align 4
  store i32 %41, i32* %7, align 4
  %42 = trunc i64 %21 to i32
  %43 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 31
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %44, 3
  br i1 %45, label %46, label %55

46:                                               ; preds = %9
  %47 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 23
  %48 = load i32, i32* %47, align 16
  %49 = icmp eq i32 %8, 0
  %50 = select i1 %49, i32 1, i32 %42
  %51 = icmp ne i32 %48, 0
  %52 = icmp ule i32 %50, %40
  %53 = and i1 %52, %51
  %54 = zext i1 %53 to i32
  br label %55

55:                                               ; preds = %46, %9
  %56 = phi i32 [ 1, %9 ], [ %54, %46 ]
  %57 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 37
  %58 = load i32, i32* %57, align 16
  %59 = icmp eq i32 %58, 4
  br i1 %59, label %60, label %99

60:                                               ; preds = %55
  %61 = shl i32 %40, 2
  %62 = icmp ult i32 %61, %41
  br i1 %62, label %63, label %69

63:                                               ; preds = %60
  %64 = getelementptr inbounds [13 x i8], [13 x i8]* @max_txsize_lookup, i64 0, i64 %29
  %65 = load i8, i8* %64, align 1
  %66 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @tx_mode_to_biggest_tx_size, i64 0, i64 4), align 1
  %67 = icmp ult i8 %65, %66
  %68 = select i1 %67, i8 %65, i8 %66
  br label %69

69:                                               ; preds = %63, %60
  %70 = phi i8 [ %68, %63 ], [ 1, %60 ]
  %71 = icmp ne i32 %56, 0
  %72 = and i1 %45, %71
  br i1 %72, label %73, label %82

73:                                               ; preds = %69
  %74 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 6
  %75 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %74, align 8
  %76 = load %struct.MODE_INFO*, %struct.MODE_INFO** %75, align 8
  %77 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %76, i64 0, i32 4
  %78 = load i8, i8* %77, align 4
  %79 = sext i8 %78 to i32
  %80 = add nsw i32 %79, -1
  %81 = icmp ugt i32 %80, 1
  br i1 %81, label %82, label %86

82:                                               ; preds = %73, %69
  %83 = icmp ugt i8 %70, 2
  %84 = and i1 %71, %83
  %85 = select i1 %84, i8 2, i8 %70
  br label %86

86:                                               ; preds = %82, %73
  %87 = phi i8 [ 1, %73 ], [ %85, %82 ]
  %88 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 62
  %89 = load i32, i32* %88, align 4
  %90 = icmp eq i32 %89, 1
  %91 = icmp eq i8 %87, 1
  %92 = and i1 %91, %90
  %93 = icmp ult i8 %1, 7
  %94 = and i1 %93, %92
  %95 = lshr i32 %40, 5
  %96 = icmp ugt i32 %95, %42
  %97 = and i1 %96, %94
  %98 = select i1 %97, i8 0, i8 %87
  br label %107

99:                                               ; preds = %55
  %100 = getelementptr inbounds [13 x i8], [13 x i8]* @max_txsize_lookup, i64 0, i64 %29
  %101 = load i8, i8* %100, align 1
  %102 = zext i32 %58 to i64
  %103 = getelementptr inbounds [5 x i8], [5 x i8]* @tx_mode_to_biggest_tx_size, i64 0, i64 %102
  %104 = load i8, i8* %103, align 1
  %105 = icmp ult i8 %101, %104
  %106 = select i1 %105, i8 %101, i8 %104
  br label %107

107:                                              ; preds = %99, %86
  %108 = phi i8 [ %98, %86 ], [ %106, %99 ]
  %109 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 6
  %110 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %109, align 8
  %111 = load %struct.MODE_INFO*, %struct.MODE_INFO** %110, align 8
  %112 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %111, i64 0, i32 2
  store i8 %108, i8* %112, align 2
  %113 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %109, align 8
  %114 = load %struct.MODE_INFO*, %struct.MODE_INFO** %113, align 8
  %115 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %114, i64 0, i32 2
  %116 = load i8, i8* %115, align 2
  %117 = zext i8 %116 to i64
  %118 = getelementptr inbounds [4 x i8], [4 x i8]* @txsize_to_bsize, i64 0, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %29
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = zext i8 %119 to i64
  %124 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = sub nsw i32 %122, %126
  %128 = getelementptr inbounds [13 x i8], [13 x i8]* @b_height_log2_lookup, i64 0, i64 %29
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = getelementptr inbounds [13 x i8], [13 x i8]* @b_height_log2_lookup, i64 0, i64 %123
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i32
  %134 = sub nsw i32 %130, %133
  %135 = add nsw i32 %134, %127
  %136 = load i32, i32* %10, align 4
  %137 = lshr i32 %136, %135
  %138 = lshr i32 %40, %135
  %139 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 47, i64 0
  store i8 0, i8* %139, align 4
  %140 = zext i32 %138 to i64
  %141 = icmp sgt i64 %21, %140
  %142 = icmp eq i32 %40, 0
  %143 = or i1 %142, %141
  %144 = sub i32 %137, %138
  %145 = zext i32 %144 to i64
  %146 = icmp sgt i64 %18, %145
  %147 = icmp eq i32 %136, %40
  %148 = or i1 %147, %146
  br i1 %143, label %149, label %154

149:                                              ; preds = %107
  %150 = select i1 %148, i8 1, i8 2
  store i8 %150, i8* %139, align 4
  br i1 %148, label %151, label %156

151:                                              ; preds = %149
  store i32 0, i32* %4, align 4
  %152 = shl i32 %136, 4
  %153 = zext i32 %152 to i64
  br label %190

154:                                              ; preds = %107
  %155 = or i1 %147, %146
  br i1 %155, label %169, label %156

156:                                              ; preds = %154, %149
  %157 = sub i32 %136, %40
  %158 = getelementptr inbounds [13 x i8], [13 x i8]* @num_pels_log2_lookup, i64 0, i64 %29
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i32
  %161 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 23
  %162 = load i32, i32* %161, align 8
  %163 = add nsw i32 %162, -5
  %164 = lshr i32 %25, %163
  call void @vp9_model_rd_from_var_lapndz(i32 %157, i32 %160, i32 %164, i32* nonnull %11, i64* nonnull %12) #3
  %165 = load i32, i32* %11, align 4
  %166 = ashr i32 %165, 1
  store i32 %166, i32* %4, align 4
  %167 = load i64, i64* %12, align 8
  %168 = shl i64 %167, 3
  br label %176

169:                                              ; preds = %154
  store i32 0, i32* %4, align 4
  %170 = sub i32 %136, %40
  %171 = shl i32 %170, 4
  %172 = zext i32 %171 to i64
  %173 = getelementptr inbounds [13 x i8], [13 x i8]* @num_pels_log2_lookup, i64 0, i64 %29
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i32
  br label %176

176:                                              ; preds = %169, %156
  %177 = phi i32 [ %175, %169 ], [ %160, %156 ]
  %178 = phi i64 [ %172, %169 ], [ %168, %156 ]
  store i64 %178, i64* %5, align 8
  %179 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 23
  %180 = load i32, i32* %179, align 8
  %181 = add nsw i32 %180, -5
  %182 = lshr i32 %28, %181
  call void @vp9_model_rd_from_var_lapndz(i32 %40, i32 %177, i32 %182, i32* nonnull %11, i64* nonnull %12) #3
  %183 = load i32, i32* %11, align 4
  %184 = load i32, i32* %4, align 4
  %185 = add nsw i32 %184, %183
  store i32 %185, i32* %4, align 4
  %186 = load i64, i64* %12, align 8
  %187 = shl i64 %186, 4
  %188 = load i64, i64* %5, align 8
  %189 = add nsw i64 %188, %187
  br label %190

190:                                              ; preds = %176, %151
  %191 = phi i64 [ %189, %176 ], [ %153, %151 ]
  store i64 %191, i64* %5, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @block_yrd(%struct.VP9_COMP* nocapture readonly, %struct.macroblock*, %struct.RD_COST* nocapture, i32* nocapture, i64* nocapture, i8 zeroext, i8 zeroext, i32, i32) unnamed_addr #0 {
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1
  %13 = zext i8 %5 to i64
  %14 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_wide_lookup, i64 0, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_high_lookup, i64 0, i64 %13
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = zext i8 %6 to i32
  %21 = shl nuw nsw i32 %20, 1
  %22 = shl i32 1, %21
  %23 = shl i32 1, %20
  %24 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 13
  %25 = load i32, i32* %24, align 4
  %26 = icmp sgt i32 %25, -1
  %27 = ashr i32 %25, 5
  %28 = select i1 %26, i32 0, i32 %27
  %29 = add nsw i32 %28, %16
  %30 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 15
  %31 = load i32, i32* %30, align 4
  %32 = icmp sgt i32 %31, -1
  %33 = ashr i32 %31, 5
  %34 = select i1 %32, i32 0, i32 %33
  %35 = add nsw i32 %34, %19
  %36 = shl nuw nsw i32 %16, 2
  %37 = shl nuw nsw i32 %19, 2
  %38 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 85
  %39 = load i32, i32* %38, align 4
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %63, label %41

41:                                               ; preds = %9
  %42 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %63, label %45

45:                                               ; preds = %41
  %46 = icmp ult i8 %5, 9
  br i1 %46, label %55, label %47

47:                                               ; preds = %45
  %48 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %63, label %51

51:                                               ; preds = %47
  %52 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = icmp sgt i32 %53, 0
  br i1 %54, label %55, label %63

55:                                               ; preds = %51, %45
  %56 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %56) #3
  store i32 -1431655766, i32* %10, align 4
  %57 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %57) #3
  store i32 -1431655766, i32* %11, align 4
  %58 = icmp eq i32 %7, 0
  br i1 %58, label %59, label %62

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %2, i64 0, i32 0
  %61 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %2, i64 0, i32 1
  call fastcc void @model_rd_for_sb_y(%struct.VP9_COMP* %0, i8 zeroext %5, %struct.macroblock* %1, %struct.macroblockd* %12, i32* %60, i64* %61, i32* nonnull %10, i32* nonnull %11, i32 %8)
  br label %62

62:                                               ; preds = %55, %59
  store i64 2147483647, i64* %4, align 8
  store i32 0, i32* %3, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %57) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #3
  br label %259

63:                                               ; preds = %47, %41, %9, %51
  %64 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 18
  %65 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %64, align 8
  %66 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %65, i64 0, i32 29
  %67 = load i32, i32* %66, align 8
  %68 = and i32 %67, 8
  %69 = icmp eq i32 %68, 0
  %70 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 0, i64 0
  %71 = zext i32 %36 to i64
  %72 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 4, i32 0
  %73 = load i8*, i8** %72, align 8
  %74 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 4, i32 1
  %75 = load i32, i32* %74, align 8
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 3, i32 0
  %78 = load i8*, i8** %77, align 8
  %79 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 3, i32 1
  %80 = load i32, i32* %79, align 8
  %81 = sext i32 %80 to i64
  br i1 %69, label %85, label %82

82:                                               ; preds = %63
  %83 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 23
  %84 = load i32, i32* %83, align 16
  tail call void @vpx_highbd_subtract_block_c(i32 %37, i32 %36, i16* %70, i64 %71, i8* %73, i64 %76, i8* %78, i64 %81, i32 %84) #3
  br label %86

85:                                               ; preds = %63
  tail call void @vpx_subtract_block_sse2(i32 %37, i32 %36, i16* %70, i64 %71, i8* %73, i64 %76, i8* %78, i64 %81) #3
  br label %86

86:                                               ; preds = %85, %82
  store i32 1, i32* %3, align 4
  %87 = icmp sgt i32 %35, 0
  br i1 %87, label %88, label %180

88:                                               ; preds = %86
  %89 = icmp eq i8 %15, 0
  %90 = zext i8 %6 to i64
  %91 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 2
  %92 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 1
  %93 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %12, i64 0, i32 0, i64 0, i32 0
  %94 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 3
  %95 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4
  %96 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 6, i64 0
  %97 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 7
  %98 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 12
  %99 = getelementptr inbounds [4 x %struct.scan_order], [4 x %struct.scan_order]* @vp9_default_scan_orders, i64 0, i64 %90, i32 0
  %100 = getelementptr inbounds [4 x %struct.scan_order], [4 x %struct.scan_order]* @vp9_default_scan_orders, i64 0, i64 %90, i32 1
  %101 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 64
  %102 = sext i32 %23 to i64
  %103 = zext i8 %15 to i64
  %104 = sext i32 %29 to i64
  %105 = sext i32 %22 to i64
  %106 = zext i32 %36 to i64
  %107 = sext i32 %35 to i64
  br label %108

108:                                              ; preds = %88, %175
  %109 = phi i64 [ 0, %88 ], [ %178, %175 ]
  %110 = phi i32 [ 0, %88 ], [ %177, %175 ]
  %111 = phi i32 [ 0, %88 ], [ %176, %175 ]
  br i1 %89, label %175, label %112

112:                                              ; preds = %108
  %113 = mul nsw i64 %109, %106
  %114 = sext i32 %111 to i64
  br label %115

115:                                              ; preds = %112, %168
  %116 = phi i64 [ %114, %112 ], [ %170, %168 ]
  %117 = phi i64 [ 0, %112 ], [ %171, %168 ]
  %118 = phi i32 [ %110, %112 ], [ %169, %168 ]
  %119 = icmp slt i64 %117, %104
  br i1 %119, label %120, label %168

120:                                              ; preds = %115
  %121 = load i32*, i32** %91, align 8
  %122 = trunc i64 %116 to i32
  %123 = shl nsw i32 %122, 4
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds i32, i32* %121, i64 %124
  %126 = load i32*, i32** %92, align 16
  %127 = getelementptr inbounds i32, i32* %126, i64 %124
  %128 = load i32*, i32** %93, align 8
  %129 = getelementptr inbounds i32, i32* %128, i64 %124
  %130 = load i16*, i16** %94, align 16
  %131 = getelementptr inbounds i16, i16* %130, i64 %116
  %132 = add nsw i64 %117, %113
  %133 = trunc i64 %132 to i32
  %134 = shl i32 %133, 2
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 0, i64 %135
  switch i8 %6, label %153 [
    i8 2, label %137
    i8 1, label %145
  ]

137:                                              ; preds = %120
  %138 = load void (i16*, i64, i32*)*, void (i16*, i64, i32*)** @vpx_hadamard_16x16, align 8
  tail call void %138(i16* %136, i64 %71, i32* %125) #3
  %139 = load void (i32*, i64, i32, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)*, void (i32*, i64, i32, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)** @vp9_quantize_fp, align 8
  %140 = load i32, i32* %95, align 16
  %141 = load i16*, i16** %97, align 16
  %142 = load i16*, i16** %98, align 8
  %143 = load i16*, i16** %99, align 8
  %144 = load i16*, i16** %100, align 8
  tail call void %139(i32* %125, i64 256, i32 %140, i16* %96, i16* %141, i32* %127, i32* %129, i16* %142, i16* %131, i16* %143, i16* %144) #3
  br label %161

145:                                              ; preds = %120
  %146 = load void (i16*, i64, i32*)*, void (i16*, i64, i32*)** @vpx_hadamard_8x8, align 8
  tail call void %146(i16* %136, i64 %71, i32* %125) #3
  %147 = load void (i32*, i64, i32, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)*, void (i32*, i64, i32, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)** @vp9_quantize_fp, align 8
  %148 = load i32, i32* %95, align 16
  %149 = load i16*, i16** %97, align 16
  %150 = load i16*, i16** %98, align 8
  %151 = load i16*, i16** %99, align 8
  %152 = load i16*, i16** %100, align 8
  tail call void %147(i32* %125, i64 64, i32 %148, i16* %96, i16* %149, i32* %127, i32* %129, i16* %150, i16* %131, i16* %151, i16* %152) #3
  br label %161

153:                                              ; preds = %120
  %154 = load void (i16*, i32*, i32)*, void (i16*, i32*, i32)** %101, align 16
  tail call void %154(i16* %136, i32* %125, i32 %36) #3
  %155 = load void (i32*, i64, i32, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)*, void (i32*, i64, i32, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)** @vp9_quantize_fp, align 8
  %156 = load i32, i32* %95, align 16
  %157 = load i16*, i16** %97, align 16
  %158 = load i16*, i16** %98, align 8
  %159 = load i16*, i16** %99, align 8
  %160 = load i16*, i16** %100, align 8
  tail call void %155(i32* %125, i64 16, i32 %156, i16* %96, i16* %157, i32* %127, i32* %129, i16* %158, i16* %131, i16* %159, i16* %160) #3
  br label %161

161:                                              ; preds = %153, %145, %137
  %162 = load i16, i16* %131, align 2
  %163 = icmp eq i16 %162, 0
  %164 = zext i1 %163 to i32
  %165 = load i32, i32* %3, align 4
  %166 = and i32 %165, %164
  store i32 %166, i32* %3, align 4
  %167 = add nsw i32 %118, 1
  br label %168

168:                                              ; preds = %161, %115
  %169 = phi i32 [ %167, %161 ], [ %118, %115 ]
  %170 = add i64 %116, %105
  %171 = add i64 %117, %102
  %172 = icmp slt i64 %171, %103
  br i1 %172, label %115, label %173

173:                                              ; preds = %168
  %174 = trunc i64 %170 to i32
  br label %175

175:                                              ; preds = %173, %108
  %176 = phi i32 [ %111, %108 ], [ %174, %173 ]
  %177 = phi i32 [ %110, %108 ], [ %169, %173 ]
  %178 = add i64 %109, %102
  %179 = icmp slt i64 %178, %107
  br i1 %179, label %108, label %180

180:                                              ; preds = %175, %86
  %181 = phi i32 [ 0, %86 ], [ %177, %175 ]
  %182 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %2, i64 0, i32 0
  store i32 0, i32* %182, align 8
  %183 = load i64, i64* %4, align 8
  %184 = icmp eq i64 %183, 9223372036854775807
  br i1 %184, label %192, label %185

185:                                              ; preds = %180
  %186 = shl i64 %183, 6
  %187 = ashr exact i64 %186, 2
  store i64 %187, i64* %4, align 8
  %188 = load i32, i32* %3, align 4
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %192, label %190

190:                                              ; preds = %185
  %191 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %2, i64 0, i32 1
  store i64 %187, i64* %191, align 8
  br label %259

192:                                              ; preds = %185, %180
  %193 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %2, i64 0, i32 1
  store i64 0, i64* %193, align 8
  br i1 %87, label %194, label %254

194:                                              ; preds = %192
  %195 = icmp eq i8 %15, 0
  %196 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 2
  %197 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 1
  %198 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %12, i64 0, i32 0, i64 0, i32 0
  %199 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 3
  %200 = shl i32 %22, 4
  %201 = sext i32 %22 to i64
  br label %202

202:                                              ; preds = %194, %250
  %203 = phi i32 [ 0, %194 ], [ %252, %250 ]
  %204 = phi i32 [ 0, %194 ], [ %251, %250 ]
  br i1 %195, label %250, label %205

205:                                              ; preds = %202
  %206 = sext i32 %204 to i64
  br label %207

207:                                              ; preds = %205, %244
  %208 = phi i64 [ %206, %205 ], [ %245, %244 ]
  %209 = phi i32 [ 0, %205 ], [ %246, %244 ]
  %210 = icmp slt i32 %209, %29
  br i1 %210, label %211, label %244

211:                                              ; preds = %207
  %212 = load i32*, i32** %196, align 8
  %213 = trunc i64 %208 to i32
  %214 = shl nsw i32 %213, 4
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds i32, i32* %212, i64 %215
  %217 = load i32*, i32** %197, align 16
  %218 = getelementptr inbounds i32, i32* %217, i64 %215
  %219 = load i32*, i32** %198, align 8
  %220 = getelementptr inbounds i32, i32* %219, i64 %215
  %221 = load i16*, i16** %199, align 16
  %222 = getelementptr inbounds i16, i16* %221, i64 %208
  %223 = load i16, i16* %222, align 2
  switch i16 %223, label %230 [
    i16 1, label %224
    i16 0, label %238
  ]

224:                                              ; preds = %211
  %225 = load i32, i32* %218, align 4
  %226 = icmp slt i32 %225, 0
  %227 = sub nsw i32 0, %225
  %228 = select i1 %226, i32 %227, i32 %225
  %229 = load i32, i32* %182, align 8
  br label %234

230:                                              ; preds = %211
  %231 = load i32 (i32*, i32)*, i32 (i32*, i32)** @vpx_satd, align 8
  %232 = tail call i32 %231(i32* %218, i32 %200) #3
  %233 = load i32, i32* %182, align 8
  br label %234

234:                                              ; preds = %224, %230
  %235 = phi i32 [ %232, %230 ], [ %229, %224 ]
  %236 = phi i32 [ %233, %230 ], [ %228, %224 ]
  %237 = add nsw i32 %236, %235
  store i32 %237, i32* %182, align 8
  br label %238

238:                                              ; preds = %234, %211
  %239 = load i64 (i32*, i32*, i32)*, i64 (i32*, i32*, i32)** @vp9_block_error_fp, align 8
  %240 = tail call i64 %239(i32* %216, i32* %220, i32 %200) #3
  %241 = ashr i64 %240, 2
  %242 = load i64, i64* %193, align 8
  %243 = add nsw i64 %242, %241
  store i64 %243, i64* %193, align 8
  br label %244

244:                                              ; preds = %238, %207
  %245 = add i64 %208, %201
  %246 = add nsw i32 %209, %23
  %247 = icmp slt i32 %246, %16
  br i1 %247, label %207, label %248

248:                                              ; preds = %244
  %249 = trunc i64 %245 to i32
  br label %250

250:                                              ; preds = %248, %202
  %251 = phi i32 [ %204, %202 ], [ %249, %248 ]
  %252 = add nsw i32 %203, %23
  %253 = icmp slt i32 %252, %35
  br i1 %253, label %202, label %254

254:                                              ; preds = %250, %192
  %255 = load i32, i32* %182, align 8
  %256 = shl i32 %255, 11
  %257 = shl i32 %181, 9
  %258 = add nsw i32 %256, %257
  store i32 %258, i32* %182, align 8
  br label %259

259:                                              ; preds = %254, %190, %62
  ret void
}

declare i32 @vp9_get_switchable_rate(%struct.VP9_COMP*, %struct.macroblockd*) local_unnamed_addr #2

declare void @vp9_build_inter_predictors_sbp(%struct.macroblockd*, i32, i32, i8 zeroext, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @model_rd_for_sb_uv(%struct.VP9_COMP* nocapture readonly, i8 zeroext, %struct.macroblock* nocapture readonly, %struct.macroblockd* nocapture readonly, %struct.RD_COST* nocapture, i32* nocapture, i32* nocapture, i32, i32) unnamed_addr #0 {
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  %13 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #3
  store i32 -1431655766, i32* %10, align 4
  %14 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #3
  store i32 -1431655766, i32* %11, align 4
  %15 = bitcast i64* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #3
  store i64 -6148914691236517206, i64* %12, align 8
  %16 = load i32, i32* %5, align 4
  %17 = zext i32 %16 to i64
  %18 = load i32, i32* %6, align 4
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %4, i64 0, i32 0
  store i32 0, i32* %20, align 8
  %21 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %4, i64 0, i32 1
  store i64 0, i64* %21, align 8
  %22 = icmp sgt i32 %7, %8
  br i1 %22, label %90, label %23

23:                                               ; preds = %9
  %24 = zext i8 %1 to i64
  %25 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %24, i32 2
  %26 = getelementptr inbounds [13 x i8], [13 x i8]* @num_pels_log2_lookup, i64 0, i64 %24
  %27 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 23
  %28 = sext i32 %7 to i64
  %29 = sext i32 %8 to i64
  br label %30

30:                                               ; preds = %85, %23
  %31 = phi i64 [ %88, %85 ], [ %28, %23 ]
  %32 = phi i64 [ %87, %85 ], [ %19, %23 ]
  %33 = phi i64 [ %86, %85 ], [ %17, %23 ]
  %34 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 0, i64 %31, i32 12
  %35 = load i16*, i16** %34, align 8
  %36 = add nsw i64 %31, -1
  %37 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 50, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %85, label %40

40:                                               ; preds = %30
  %41 = getelementptr inbounds i16, i16* %35, i64 1
  %42 = load i16, i16* %41, align 2
  %43 = sext i16 %42 to i32
  %44 = load i16, i16* %35, align 2
  %45 = sext i16 %44 to i32
  %46 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %25, align 8
  %47 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 %31, i32 4, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 %31, i32 4, i32 1
  %50 = load i32, i32* %49, align 8
  %51 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 0, i64 %31, i32 3, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 0, i64 %31, i32 3, i32 1
  %54 = load i32, i32* %53, align 8
  %55 = call i32 %46(i8* %48, i32 %50, i8* %52, i32 %54, i32* nonnull %10) #3
  %56 = zext i32 %55 to i64
  %57 = add i64 %33, %56
  %58 = load i32, i32* %10, align 4
  %59 = zext i32 %58 to i64
  %60 = add i64 %32, %59
  %61 = sub i32 %58, %55
  %62 = load i8, i8* %26, align 1
  %63 = zext i8 %62 to i32
  %64 = load i32, i32* %27, align 8
  %65 = add nsw i32 %64, -5
  %66 = lshr i32 %45, %65
  call void @vp9_model_rd_from_var_lapndz(i32 %61, i32 %63, i32 %66, i32* nonnull %11, i64* nonnull %12) #3
  %67 = load i32, i32* %11, align 4
  %68 = ashr i32 %67, 1
  %69 = load i32, i32* %20, align 8
  %70 = add nsw i32 %69, %68
  store i32 %70, i32* %20, align 8
  %71 = load i64, i64* %12, align 8
  %72 = shl i64 %71, 3
  %73 = load i64, i64* %21, align 8
  %74 = add nsw i64 %73, %72
  store i64 %74, i64* %21, align 8
  %75 = load i32, i32* %27, align 8
  %76 = add nsw i32 %75, -5
  %77 = lshr i32 %43, %76
  call void @vp9_model_rd_from_var_lapndz(i32 %55, i32 %63, i32 %77, i32* nonnull %11, i64* nonnull %12) #3
  %78 = load i32, i32* %11, align 4
  %79 = load i32, i32* %20, align 8
  %80 = add nsw i32 %79, %78
  store i32 %80, i32* %20, align 8
  %81 = load i64, i64* %12, align 8
  %82 = shl i64 %81, 4
  %83 = load i64, i64* %21, align 8
  %84 = add nsw i64 %83, %82
  store i64 %84, i64* %21, align 8
  br label %85

85:                                               ; preds = %30, %40
  %86 = phi i64 [ %57, %40 ], [ %33, %30 ]
  %87 = phi i64 [ %60, %40 ], [ %32, %30 ]
  %88 = add nsw i64 %31, 1
  %89 = icmp slt i64 %31, %29
  br i1 %89, label %30, label %90

90:                                               ; preds = %85, %9
  %91 = phi i64 [ %17, %9 ], [ %86, %85 ]
  %92 = phi i64 [ %19, %9 ], [ %87, %85 ]
  %93 = icmp ult i64 %91, 4294967295
  %94 = select i1 %93, i64 %91, i64 4294967295
  %95 = trunc i64 %94 to i32
  store i32 %95, i32* %5, align 4
  %96 = icmp ult i64 %92, 4294967295
  %97 = select i1 %96, i64 %92, i64 4294967295
  %98 = trunc i64 %97 to i32
  store i32 %98, i32* %6, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #3
  ret void
}

declare void @vp9_denoiser_update_frame_stats(%struct.MODE_INFO*, i32, i8 zeroext, %struct.PICK_MODE_CONTEXT*) local_unnamed_addr #2

declare void @vpx_convolve_copy_sse2(i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32) local_unnamed_addr #2

declare void @vp9_denoiser_denoise(%struct.VP9_COMP*, %struct.macroblock*, i32, i32, i8 zeroext, %struct.PICK_MODE_CONTEXT*, i32*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_pick_inter_mode_sub8x8(%struct.VP9_COMP*, %struct.macroblock*, i32, i32, %struct.RD_COST* nocapture, i8 zeroext, %struct.PICK_MODE_CONTEXT* nocapture) local_unnamed_addr #0 {
  %8 = alloca [4 x [3 x %struct.buf_2d]], align 16
  %9 = alloca [4 x [4 x %struct.b_mode_info]], align 16
  %10 = alloca [2 x %union.int_mv], align 4
  %11 = alloca [14 x %union.int_mv], align 16
  %12 = alloca %struct.RD_COST, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %struct.buf_2d, align 8
  %16 = alloca %struct.buf_2d, align 8
  %17 = alloca [2 x %struct.buf_2d], align 16
  %18 = alloca %struct.mv, align 2
  %19 = alloca i32, align 4
  %20 = bitcast i32* %19 to %struct.mv*
  %21 = alloca [5 x i32], align 16
  %22 = alloca i32, align 4
  %23 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8
  %24 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1
  %25 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 6
  %26 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %25, align 8
  %27 = load %struct.MODE_INFO*, %struct.MODE_INFO** %26, align 8
  %28 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  %29 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %28, align 16
  %30 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %27, i64 0, i32 4
  %31 = load i8, i8* %30, align 4
  %32 = bitcast [4 x [3 x %struct.buf_2d]]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %32) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %32, i8 -86, i64 192, i1 false)
  %33 = getelementptr inbounds [4 x [4 x %struct.b_mode_info]], [4 x [4 x %struct.b_mode_info]]* %9, i64 0, i64 0, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %33) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %33, i8 -86, i64 192, i1 false)
  %34 = zext i8 %5 to i64
  %35 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_wide_lookup, i64 0, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_high_lookup, i64 0, i64 %34
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 9
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %7
  %45 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 8
  %46 = load i32, i32* %45, align 16
  %47 = icmp slt i32 %46, 115
  %48 = zext i1 %47 to i32
  br label %49

49:                                               ; preds = %44, %7
  %50 = phi i32 [ 0, %7 ], [ %48, %44 ]
  %51 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 44
  store i32 %50, i32* %51, align 16
  %52 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %6, i64 0, i32 14
  store i32 0, i32* %52, align 4
  %53 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 37
  %54 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 36
  %55 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 89
  %56 = bitcast [2 x %union.int_mv]* %10 to i8*
  %57 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %10, i64 0, i64 0, i32 0
  %58 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %10, i64 0, i64 1
  %59 = getelementptr inbounds %union.int_mv, %union.int_mv* %58, i64 0, i32 0
  %60 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 74
  %61 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %10, i64 0, i64 0
  %62 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %29, i64 0, i32 1, i64 0
  %63 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 29
  %64 = load i32, i32* %54, align 4
  %65 = icmp eq i32 %64, -1
  br i1 %65, label %75, label %66

66:                                               ; preds = %49
  %67 = sext i32 %64 to i64
  %68 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 15, i64 %67
  %69 = load i32, i32* %68, align 4
  %70 = icmp eq i32 %69, -1
  br i1 %70, label %75, label %71

71:                                               ; preds = %66
  %72 = load %struct.BufferPool*, %struct.BufferPool** %55, align 8
  %73 = sext i32 %69 to i64
  %74 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %72, i64 0, i32 3, i64 %73, i32 8
  br label %75

75:                                               ; preds = %49, %66, %71
  %76 = phi %struct.yv12_buffer_config* [ %74, %71 ], [ null, %66 ], [ null, %49 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #3
  store i32 -1431655766, i32* %57, align 4
  store i32 -1431655766, i32* %59, align 4
  %77 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 25, i64 1
  store i32 2147483647, i32* %77, align 4
  %78 = load i32, i32* %60, align 16
  %79 = and i32 %78, 1
  %80 = icmp ne i32 %79, 0
  %81 = icmp ne %struct.yv12_buffer_config* %76, null
  %82 = and i1 %81, %80
  br i1 %82, label %83, label %392

83:                                               ; preds = %75
  %84 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %29, i64 0, i32 0, i64 1, i64 0
  %85 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 0, i32 2
  %86 = getelementptr inbounds [4 x [3 x %struct.buf_2d]], [4 x [3 x %struct.buf_2d]]* %8, i64 0, i64 1, i64 0
  call void @vp9_setup_pred_block(%struct.macroblockd* %24, %struct.buf_2d* %86, %struct.yv12_buffer_config* nonnull %76, i32 %2, i32 %3, %struct.scale_factors* %85, %struct.scale_factors* %85) #3
  %87 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %25, align 8
  %88 = load %struct.MODE_INFO*, %struct.MODE_INFO** %87, align 8
  call void @vp9_find_mv_refs(%struct.VP9Common* %23, %struct.macroblockd* %24, %struct.MODE_INFO* %88, i8 signext 1, %union.int_mv* %84, i32 %2, i32 %3, i8* %62) #3
  %89 = load i32, i32* %63, align 16
  call void @vp9_find_best_ref_mvs(%struct.macroblockd* %24, i32 %89, %union.int_mv* %84, %union.int_mv* nonnull %61, %union.int_mv* %58) #3
  br label %392

90:                                               ; preds = %341, %422
  %91 = phi i64 [ 1, %422 ], [ %344, %341 ]
  %92 = phi i64 [ 9223372036854775807, %422 ], [ %343, %341 ]
  %93 = phi i8 [ -1, %422 ], [ %342, %341 ]
  %94 = trunc i64 %91 to i32
  %95 = shl i32 1, %94
  %96 = and i32 %95, %423
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %341

98:                                               ; preds = %90
  %99 = add nsw i64 %91, -1
  %100 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 %99, i32 2, i32 0
  %101 = load i32, i32* %100, align 8
  %102 = icmp eq i32 %101, -1
  br i1 %102, label %111, label %103

103:                                              ; preds = %98
  %104 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 %99, i32 2, i32 1
  %105 = load i32, i32* %104, align 4
  %106 = icmp eq i32 %105, -1
  br i1 %106, label %111, label %107

107:                                              ; preds = %103
  %108 = icmp eq i32 %101, 16384
  %109 = icmp eq i32 %105, 16384
  %110 = and i1 %108, %109
  br i1 %110, label %111, label %341

111:                                              ; preds = %107, %98, %103
  %112 = load i8, i8* %434, align 4
  %113 = icmp eq i8 %112, 0
  br i1 %113, label %123, label %114

114:                                              ; preds = %111
  %115 = load i32, i32* %436, align 4
  %116 = and i32 %115, 4
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %123, label %118

118:                                              ; preds = %114
  %119 = load i16, i16* %437, align 2
  %120 = sext i16 %119 to i64
  %121 = and i64 %120, 4294967295
  %122 = icmp eq i64 %91, %121
  br i1 %122, label %123, label %341

123:                                              ; preds = %111, %118, %114
  %124 = trunc i64 %91 to i8
  store i8 %124, i8* %427, align 4
  store i32 0, i32* %438, align 16
  %125 = add nsw i64 %91, -1
  %126 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 %125
  store %struct.RefBuffer* %126, %struct.RefBuffer** %439, align 8
  store %struct.RefBuffer* %440, %struct.RefBuffer** %441, align 8
  %127 = getelementptr inbounds [4 x [3 x %struct.buf_2d]], [4 x [3 x %struct.buf_2d]]* %8, i64 0, i64 %91, i64 0
  %128 = bitcast %struct.buf_2d* %127 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %454, i8* align 16 %128, i64 16, i1 false)
  %129 = getelementptr inbounds [4 x [3 x %struct.buf_2d]], [4 x [3 x %struct.buf_2d]]* %8, i64 0, i64 %91, i64 1
  %130 = bitcast %struct.buf_2d* %129 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %505, i8* align 16 %130, i64 16, i1 false)
  %131 = getelementptr inbounds [4 x [3 x %struct.buf_2d]], [4 x [3 x %struct.buf_2d]]* %8, i64 0, i64 %91, i64 2
  %132 = bitcast %struct.buf_2d* %131 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %507, i8* align 16 %132, i64 16, i1 false)
  %133 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %29, i64 0, i32 0, i64 %91, i64 0
  %134 = bitcast %union.int_mv* %133 to %struct.mv*
  %135 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 24, i64 %91
  br label %136

136:                                              ; preds = %123, %334
  %137 = phi i64 [ 0, %123 ], [ %335, %334 ]
  %138 = phi i64 [ 0, %123 ], [ %314, %334 ]
  %139 = shl nuw nsw i64 %137, 1
  br label %140

140:                                              ; preds = %136, %331
  %141 = phi i64 [ 0, %136 ], [ %332, %331 ]
  %142 = phi i64 [ %138, %136 ], [ %314, %331 ]
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %442) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %442, i8 -86, i64 56, i1 false)
  %143 = add nuw nsw i64 %141, %139
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %443) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %443, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %444) #3
  store i32 -1431655766, i32* %13, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %445) #3
  store i32 -1431655766, i32* %14, align 4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %446)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %446, i8* align 8 %448, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %449)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %449, i8* align 8 %451, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %452)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %452, i8* align 8 %454, i64 32, i1 false)
  %144 = load i8*, i8** %455, align 8
  %145 = load i32, i32* %456, align 8
  %146 = trunc i64 %143 to i32
  %147 = call i32 @vp9_raster_block_offset(i8 zeroext 3, i32 %146, i32 %145) #3
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds i8, i8* %144, i64 %148
  store i8* %149, i8** %455, align 8
  %150 = load i8*, i8** %457, align 8
  %151 = load i32, i32* %458, align 8
  %152 = call i32 @vp9_raster_block_offset(i8 zeroext 3, i32 %146, i32 %151) #3
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds i8, i8* %150, i64 %153
  store i8* %154, i8** %457, align 8
  %155 = load i8*, i8** %459, align 8
  %156 = load i32, i32* %460, align 8
  %157 = call i32 @vp9_raster_block_offset(i8 zeroext 3, i32 %146, i32 %156) #3
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds i8, i8* %155, i64 %158
  store i8* %159, i8** %459, align 8
  store i32 0, i32* %461, align 16
  store i32 -2147450880, i32* %462, align 4
  call void @vp9_append_sub8x8_mvs_for_idx(%struct.VP9Common* %23, %struct.macroblockd* %24, i32 %146, i32 0, i32 %2, i32 %3, %union.int_mv* %463, %union.int_mv* %464, i8* %62) #3
  %160 = icmp eq i64 %143, 0
  %161 = shl i32 %146, 2
  %162 = and i32 %161, 4
  %163 = or i32 %162, %493
  %164 = lshr i32 %146, 1
  %165 = shl nuw nsw i32 %164, 2
  %166 = add nsw i32 %165, %494
  %167 = getelementptr inbounds [4 x [4 x %struct.b_mode_info]], [4 x [4 x %struct.b_mode_info]]* %9, i64 0, i64 %91, i64 %143, i32 0
  %168 = getelementptr inbounds [4 x [4 x %struct.b_mode_info]], [4 x [4 x %struct.b_mode_info]]* %9, i64 0, i64 %91, i64 %143, i32 1, i64 0, i32 0
  br label %169

169:                                              ; preds = %308, %140
  %170 = phi i64 [ 10, %140 ], [ %310, %308 ]
  %171 = phi i64 [ 9223372036854775807, %140 ], [ %309, %308 ]
  %172 = getelementptr inbounds [14 x %union.int_mv], [14 x %union.int_mv]* %11, i64 0, i64 %170, i32 0
  %173 = load i32, i32* %172, align 4
  %174 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %25, align 8
  %175 = load %struct.MODE_INFO*, %struct.MODE_INFO** %174, align 8
  %176 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %175, i64 0, i32 10, i64 %143, i32 1, i64 0, i32 0
  store i32 %173, i32* %176, align 4
  %177 = icmp eq i64 %170, 13
  br i1 %177, label %178, label %237

178:                                              ; preds = %169
  %179 = load i32, i32* %465, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %466) #3
  store i16 -21846, i16* %467, align 2
  store i16 -21846, i16* %468, align 2
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %469) #3
  store i16 -21846, i16* %470, align 4
  store i16 -21846, i16* %471, align 2
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %472) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %508, i8 -86, i64 20, i1 false)
  %180 = load <4 x i32>, <4 x i32>* %509, align 16
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %475) #3
  store i32 -1431655766, i32* %22, align 4
  br i1 %160, label %185, label %181

181:                                              ; preds = %178
  %182 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %25, align 8
  %183 = load %struct.MODE_INFO*, %struct.MODE_INFO** %182, align 8
  %184 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %183, i64 0, i32 10, i64 0, i32 1, i64 0
  br label %185

185:                                              ; preds = %178, %181
  %186 = phi %union.int_mv* [ %184, %181 ], [ %463, %178 ]
  %187 = bitcast %union.int_mv* %186 to i16*
  %188 = load i16, i16* %187, align 4
  %189 = ashr i16 %188, 3
  store i16 %189, i16* %467, align 2
  %190 = bitcast %union.int_mv* %186 to %struct.mv*
  %191 = getelementptr inbounds %struct.mv, %struct.mv* %190, i64 0, i32 1
  %192 = load i16, i16* %191, align 2
  %193 = ashr i16 %192, 3
  store i16 %193, i16* %468, align 2
  call void @vp9_set_mv_search_range(%struct.MvLimits* %476, %struct.mv* %134) #3
  %194 = load i32, i32* %477, align 8
  %195 = load i32, i32* %478, align 4
  %196 = load i32, i32* %479, align 4
  %197 = icmp eq i32 %196, 0
  %198 = select i1 %197, i32* null, i32* %473
  %199 = call i32 @vp9_full_pixel_search(%struct.VP9_COMP* %0, %struct.macroblock* %1, i8 zeroext %5, %struct.mv* nonnull %18, i32 %179, i32 %194, i32 %195, i32* %198, %struct.mv* %134, %struct.mv* nonnull %20, i32 2147483647, i32 0) #3
  store <4 x i32> %180, <4 x i32>* %510, align 16
  %200 = load i16, i16* %470, align 4
  %201 = shl i16 %200, 3
  store i16 %201, i16* %467, align 2
  %202 = load i16, i16* %471, align 2
  %203 = shl i16 %202, 3
  store i16 %203, i16* %468, align 2
  %204 = load i32**, i32*** %481, align 8
  %205 = call i32 @vp9_mv_bit_cost(%struct.mv* nonnull %18, %struct.mv* %134, i32* %480, i32** %204, i32 108) #3
  %206 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %28, align 16
  %207 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %206, i64 0, i32 1, i64 %91
  %208 = load i8, i8* %207, align 1
  %209 = zext i8 %208 to i64
  %210 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 111, i64 %209, i64 3
  %211 = load i32, i32* %210, align 4
  %212 = add i32 %211, %205
  %213 = sext i32 %212 to i64
  %214 = load i32, i32* %482, align 4
  %215 = sext i32 %214 to i64
  %216 = mul nsw i64 %213, %215
  %217 = add nsw i64 %216, 256
  %218 = ashr i64 %217, 9
  %219 = icmp sgt i64 %218, %171
  br i1 %219, label %236, label %220

220:                                              ; preds = %185
  %221 = load i32 (%struct.macroblock*, %struct.mv*, %struct.mv*, i32, i32, %struct.vp9_variance_vtable*, i32, i32, i32*, i32*, i32**, i32*, i32*, i8*, i32, i32, i32)*, i32 (%struct.macroblock*, %struct.mv*, %struct.mv*, i32, i32, %struct.vp9_variance_vtable*, i32, i32, i32*, i32*, i32**, i32*, i32*, i8*, i32, i32, i32)** %483, align 16
  %222 = load i32, i32* %63, align 16
  %223 = load i32, i32* %484, align 4
  %224 = load i32, i32* %486, align 4
  %225 = load i32, i32* %487, align 8
  %226 = load i32, i32* %479, align 4
  %227 = icmp eq i32 %226, 0
  %228 = select i1 %227, i32* null, i32* %473
  %229 = load i32**, i32*** %481, align 8
  %230 = load i32, i32* %488, align 4
  %231 = call i32 %221(%struct.macroblock* %1, %struct.mv* nonnull %20, %struct.mv* %134, i32 %222, i32 %223, %struct.vp9_variance_vtable* %485, i32 %224, i32 %225, i32* %228, i32* %480, i32** %229, i32* nonnull %22, i32* %135, i8* null, i32 0, i32 0, i32 %230) #3
  %232 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %25, align 8
  %233 = load %struct.MODE_INFO*, %struct.MODE_INFO** %232, align 8
  %234 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %233, i64 0, i32 10, i64 %143, i32 1, i64 0, i32 0
  %235 = load i32, i32* %19, align 4
  store i32 %235, i32* %234, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %475) #3
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %472) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %469) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %466) #3
  br label %245

236:                                              ; preds = %185
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %475) #3
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %472) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %469) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %466) #3
  br label %312

237:                                              ; preds = %169
  %238 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %28, align 16
  %239 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %238, i64 0, i32 1, i64 %91
  %240 = load i8, i8* %239, align 1
  %241 = zext i8 %240 to i64
  %242 = add nsw i64 %170, -10
  %243 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 111, i64 %241, i64 %242
  %244 = load i32, i32* %243, align 4
  br label %245

245:                                              ; preds = %220, %237
  %246 = phi i32 [ %244, %237 ], [ %212, %220 ]
  %247 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %489, align 8
  %248 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %247, i64 0, i32 29
  %249 = load i32, i32* %248, align 8
  %250 = and i32 %249, 8
  %251 = icmp eq i32 %250, 0
  %252 = load i8*, i8** %459, align 8
  br i1 %251, label %273, label %253

253:                                              ; preds = %245
  %254 = ptrtoint i8* %252 to i64
  %255 = shl i64 %254, 1
  %256 = inttoptr i64 %255 to i16*
  %257 = load i32, i32* %460, align 8
  %258 = load i64, i64* %490, align 8
  %259 = shl i64 %258, 1
  %260 = inttoptr i64 %259 to i16*
  %261 = load i32, i32* %458, align 8
  %262 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %25, align 8
  %263 = load %struct.MODE_INFO*, %struct.MODE_INFO** %262, align 8
  %264 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %263, i64 0, i32 10, i64 %143, i32 1, i64 0
  %265 = bitcast %union.int_mv* %264 to %struct.mv*
  %266 = load %struct.RefBuffer*, %struct.RefBuffer** %439, align 8
  %267 = getelementptr inbounds %struct.RefBuffer, %struct.RefBuffer* %266, i64 0, i32 2
  %268 = load i8, i8* %433, align 1
  %269 = zext i8 %268 to i64
  %270 = getelementptr inbounds [5 x [8 x i16]*], [5 x [8 x i16]*]* @vp9_filter_kernels, i64 0, i64 %269
  %271 = load [8 x i16]*, [8 x i16]** %270, align 8
  %272 = load i32, i32* %495, align 8
  call void @vp9_highbd_build_inter_predictor(i16* %256, i32 %257, i16* %260, i32 %261, %struct.mv* %265, %struct.scale_factors* %267, i32 %491, i32 %492, i32 0, [8 x i16]* %271, i32 0, i32 %163, i32 %166, i32 %272) #3
  br label %287

273:                                              ; preds = %245
  %274 = load i32, i32* %460, align 8
  %275 = load i8*, i8** %457, align 8
  %276 = load i32, i32* %458, align 8
  %277 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %25, align 8
  %278 = load %struct.MODE_INFO*, %struct.MODE_INFO** %277, align 8
  %279 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %278, i64 0, i32 10, i64 %143, i32 1, i64 0
  %280 = bitcast %union.int_mv* %279 to %struct.mv*
  %281 = load %struct.RefBuffer*, %struct.RefBuffer** %439, align 8
  %282 = getelementptr inbounds %struct.RefBuffer, %struct.RefBuffer* %281, i64 0, i32 2
  %283 = load i8, i8* %433, align 1
  %284 = zext i8 %283 to i64
  %285 = getelementptr inbounds [5 x [8 x i16]*], [5 x [8 x i16]*]* @vp9_filter_kernels, i64 0, i64 %284
  %286 = load [8 x i16]*, [8 x i16]** %285, align 8
  call void @vp9_build_inter_predictor(i8* %252, i32 %274, i8* %275, i32 %276, %struct.mv* %280, %struct.scale_factors* %282, i32 %491, i32 %492, i32 0, [8 x i16]* %286, i32 0, i32 %163, i32 %166) #3
  br label %287

287:                                              ; preds = %273, %253
  call fastcc void @model_rd_for_sb_y(%struct.VP9_COMP* %0, i8 zeroext %5, %struct.macroblock* %1, %struct.macroblockd* %24, i32* nonnull %496, i64* %497, i32* nonnull %13, i32* nonnull %14, i32 0)
  %288 = load i32, i32* %496, align 8
  %289 = add nsw i32 %288, %246
  store i32 %289, i32* %496, align 8
  %290 = sext i32 %289 to i64
  %291 = load i32, i32* %482, align 4
  %292 = sext i32 %291 to i64
  %293 = mul nsw i64 %292, %290
  %294 = add nsw i64 %293, 256
  %295 = ashr i64 %294, 9
  %296 = load i64, i64* %497, align 8
  %297 = load i32, i32* %498, align 8
  %298 = zext i32 %297 to i64
  %299 = shl i64 %296, %298
  %300 = add nsw i64 %295, %299
  store i64 %300, i64* %499, align 8
  %301 = icmp slt i64 %300, %171
  br i1 %301, label %302, label %308

302:                                              ; preds = %287
  %303 = trunc i64 %170 to i8
  store i8 %303, i8* %167, align 4
  %304 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %25, align 8
  %305 = load %struct.MODE_INFO*, %struct.MODE_INFO** %304, align 8
  %306 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %305, i64 0, i32 10, i64 %143, i32 1, i64 0, i32 0
  %307 = load i32, i32* %306, align 4
  store i32 %307, i32* %168, align 4
  br label %308

308:                                              ; preds = %287, %302
  %309 = phi i64 [ %300, %302 ], [ %171, %287 ]
  %310 = add nuw nsw i64 %170, 1
  %311 = icmp eq i64 %310, 14
  br i1 %311, label %312, label %169

312:                                              ; preds = %308, %236
  %313 = phi i64 [ %171, %236 ], [ %309, %308 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %448, i8* nonnull align 8 %446, i64 16, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %454, i8* nonnull align 16 %452, i64 16, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %451, i8* nonnull align 8 %449, i64 16, i1 false)
  %314 = add nsw i64 %313, %142
  %315 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %25, align 8
  %316 = load %struct.MODE_INFO*, %struct.MODE_INFO** %315, align 8
  %317 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %316, i64 0, i32 10, i64 %143, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %317, i8* align 4 %167, i64 12, i1 false)
  br i1 %500, label %318, label %324

318:                                              ; preds = %312
  %319 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %25, align 8
  %320 = load %struct.MODE_INFO*, %struct.MODE_INFO** %319, align 8
  %321 = add nuw nsw i64 %143, 1
  %322 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %320, i64 0, i32 10, i64 %321, i32 0
  %323 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %320, i64 0, i32 10, i64 %143, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %322, i8* align 4 %323, i64 12, i1 false)
  br label %324

324:                                              ; preds = %318, %312
  br i1 %501, label %325, label %331

325:                                              ; preds = %324
  %326 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %25, align 8
  %327 = load %struct.MODE_INFO*, %struct.MODE_INFO** %326, align 8
  %328 = add nuw nsw i64 %143, 2
  %329 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %327, i64 0, i32 10, i64 %328, i32 0
  %330 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %327, i64 0, i32 10, i64 %143, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %329, i8* align 4 %330, i64 12, i1 false)
  br label %331

331:                                              ; preds = %325, %324
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %452)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %449)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %446)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %445) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %444) #3
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %443) #3
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %442) #3
  %332 = add i64 %141, %502
  %333 = icmp ult i64 %332, 2
  br i1 %333, label %140, label %334

334:                                              ; preds = %331
  %335 = add i64 %137, %503
  %336 = icmp ult i64 %335, 2
  br i1 %336, label %136, label %337

337:                                              ; preds = %334
  %338 = icmp slt i64 %314, %92
  %339 = select i1 %338, i8 %124, i8 %93
  %340 = select i1 %338, i64 %314, i64 %92
  br label %341

341:                                              ; preds = %107, %118, %90, %337
  %342 = phi i8 [ %339, %337 ], [ %93, %90 ], [ %93, %118 ], [ %93, %107 ]
  %343 = phi i64 [ %340, %337 ], [ %92, %90 ], [ %92, %118 ], [ %92, %107 ]
  %344 = add nuw nsw i64 %91, 1
  %345 = icmp eq i64 %344, 3
  br i1 %345, label %346, label %90

346:                                              ; preds = %341
  store i8 0, i8* %425, align 2
  store i8 %342, i8* %427, align 4
  %347 = sext i8 %342 to i64
  br label %348

348:                                              ; preds = %346, %372
  %349 = phi i64 [ 0, %346 ], [ %373, %372 ]
  %350 = shl nuw nsw i64 %349, 1
  br label %351

351:                                              ; preds = %348, %369
  %352 = phi i64 [ 0, %348 ], [ %370, %369 ]
  %353 = add nuw nsw i64 %352, %350
  %354 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %25, align 8
  %355 = load %struct.MODE_INFO*, %struct.MODE_INFO** %354, align 8
  %356 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %355, i64 0, i32 10, i64 %353, i32 0
  %357 = getelementptr inbounds [4 x [4 x %struct.b_mode_info]], [4 x [4 x %struct.b_mode_info]]* %9, i64 0, i64 %347, i64 %353, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %356, i8* align 4 %357, i64 12, i1 false)
  br i1 %500, label %358, label %363

358:                                              ; preds = %351
  %359 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %25, align 8
  %360 = load %struct.MODE_INFO*, %struct.MODE_INFO** %359, align 8
  %361 = add nuw nsw i64 %353, 1
  %362 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %360, i64 0, i32 10, i64 %361, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %362, i8* align 4 %357, i64 12, i1 false)
  br label %363

363:                                              ; preds = %358, %351
  br i1 %501, label %364, label %369

364:                                              ; preds = %363
  %365 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %25, align 8
  %366 = load %struct.MODE_INFO*, %struct.MODE_INFO** %365, align 8
  %367 = add nuw nsw i64 %353, 2
  %368 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %366, i64 0, i32 10, i64 %367, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %368, i8* align 4 %357, i64 12, i1 false)
  br label %369

369:                                              ; preds = %364, %363
  %370 = add i64 %352, %502
  %371 = icmp ult i64 %370, 2
  br i1 %371, label %351, label %372

372:                                              ; preds = %369
  %373 = add i64 %349, %503
  %374 = icmp ult i64 %373, 2
  br i1 %374, label %348, label %375

375:                                              ; preds = %372
  %376 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %25, align 8
  %377 = load %struct.MODE_INFO*, %struct.MODE_INFO** %376, align 8
  %378 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %377, i64 0, i32 10, i64 3, i32 0
  %379 = load i8, i8* %378, align 4
  %380 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %27, i64 0, i32 1
  store i8 %379, i8* %380, align 1
  %381 = bitcast %struct.MODE_INFO*** %25 to i8***
  %382 = load i8**, i8*** %381, align 8
  %383 = load i8*, i8** %382, align 8
  %384 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %6, i64 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %384, i8* align 4 %383, i64 68, i1 false)
  %385 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %6, i64 0, i32 1
  %386 = bitcast %struct.MB_MODE_INFO_EXT** %28 to i8**
  %387 = load i8*, i8** %386, align 16
  %388 = bitcast %struct.MB_MODE_INFO_EXT* %385 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %388, i8* align 4 %387, i64 36, i1 false)
  %389 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %6, i64 0, i32 16, i64 0
  store i8 0, i8* %389, align 4
  %390 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %6, i64 0, i32 13
  store i32 0, i32* %390, align 8
  %391 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %4, i64 0, i32 2
  store i64 %343, i64* %391, align 8
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %33) #3
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %32) #3
  ret void

392:                                              ; preds = %75, %83
  %393 = phi i32 [ 0, %83 ], [ 2, %75 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #3
  %394 = load i32, i32* %53, align 4
  %395 = icmp eq i32 %394, -1
  br i1 %395, label %405, label %396

396:                                              ; preds = %392
  %397 = sext i32 %394 to i64
  %398 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 15, i64 %397
  %399 = load i32, i32* %398, align 4
  %400 = icmp eq i32 %399, -1
  br i1 %400, label %405, label %401

401:                                              ; preds = %396
  %402 = load %struct.BufferPool*, %struct.BufferPool** %55, align 8
  %403 = sext i32 %399 to i64
  %404 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %402, i64 0, i32 3, i64 %403, i32 8
  br label %405

405:                                              ; preds = %401, %396, %392
  %406 = phi %struct.yv12_buffer_config* [ %404, %401 ], [ null, %396 ], [ null, %392 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #3
  store i32 -1431655766, i32* %57, align 4
  store i32 -1431655766, i32* %59, align 4
  %407 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 25, i64 2
  store i32 2147483647, i32* %407, align 4
  %408 = load i32, i32* %60, align 16
  %409 = and i32 %408, 2
  %410 = icmp ne i32 %409, 0
  %411 = icmp ne %struct.yv12_buffer_config* %406, null
  %412 = and i1 %411, %410
  br i1 %412, label %415, label %413

413:                                              ; preds = %405
  %414 = or i32 %393, 4
  br label %422

415:                                              ; preds = %405
  %416 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %29, i64 0, i32 0, i64 2, i64 0
  %417 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 1, i32 2
  %418 = getelementptr inbounds [4 x [3 x %struct.buf_2d]], [4 x [3 x %struct.buf_2d]]* %8, i64 0, i64 2, i64 0
  call void @vp9_setup_pred_block(%struct.macroblockd* %24, %struct.buf_2d* %418, %struct.yv12_buffer_config* nonnull %406, i32 %2, i32 %3, %struct.scale_factors* %417, %struct.scale_factors* %417) #3
  %419 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %25, align 8
  %420 = load %struct.MODE_INFO*, %struct.MODE_INFO** %419, align 8
  call void @vp9_find_mv_refs(%struct.VP9Common* %23, %struct.macroblockd* %24, %struct.MODE_INFO* %420, i8 signext 2, %union.int_mv* %416, i32 %2, i32 %3, i8* %62) #3
  %421 = load i32, i32* %63, align 16
  call void @vp9_find_best_ref_mvs(%struct.macroblockd* %24, i32 %421, %union.int_mv* %416, %union.int_mv* nonnull %61, %union.int_mv* %58) #3
  br label %422

422:                                              ; preds = %415, %413
  %423 = phi i32 [ %393, %415 ], [ %414, %413 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #3
  %424 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %27, i64 0, i32 0
  store i8 %5, i8* %424, align 4
  %425 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %27, i64 0, i32 2
  store i8 0, i8* %425, align 2
  %426 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %27, i64 0, i32 6
  store i8 0, i8* %426, align 2
  %427 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %27, i64 0, i32 8, i64 0
  store i8 1, i8* %427, align 4
  %428 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %27, i64 0, i32 8, i64 1
  store i8 -1, i8* %428, align 1
  %429 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 63
  %430 = load i8, i8* %429, align 4
  %431 = icmp eq i8 %430, 4
  %432 = select i1 %431, i8 0, i8 %430
  %433 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %27, i64 0, i32 7
  store i8 %432, i8* %433, align 1
  %434 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 0
  %435 = zext i8 %31 to i64
  %436 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 8, i64 %435
  %437 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 7, i64 %435, i64 2
  %438 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 39
  %439 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 17, i64 0
  %440 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 0
  %441 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 17, i64 1
  %442 = bitcast [14 x %union.int_mv]* %11 to i8*
  %443 = bitcast %struct.RD_COST* %12 to i8*
  %444 = bitcast i32* %13 to i8*
  %445 = bitcast i32* %14 to i8*
  %446 = bitcast %struct.buf_2d* %15 to i8*
  %447 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 4
  %448 = bitcast %struct.buf_2d* %447 to i8*
  %449 = bitcast %struct.buf_2d* %16 to i8*
  %450 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 3
  %451 = bitcast %struct.buf_2d* %450 to i8*
  %452 = bitcast [2 x %struct.buf_2d]* %17 to i8*
  %453 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 4, i64 0
  %454 = bitcast %struct.buf_2d* %453 to i8*
  %455 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %447, i64 0, i32 0
  %456 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 4, i32 1
  %457 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %450, i64 0, i32 0
  %458 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 3, i32 1
  %459 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %453, i64 0, i32 0
  %460 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 4, i64 0, i32 1
  %461 = getelementptr inbounds [14 x %union.int_mv], [14 x %union.int_mv]* %11, i64 0, i64 12, i32 0
  %462 = getelementptr inbounds [14 x %union.int_mv], [14 x %union.int_mv]* %11, i64 0, i64 13, i32 0
  %463 = getelementptr inbounds [14 x %union.int_mv], [14 x %union.int_mv]* %11, i64 0, i64 10
  %464 = getelementptr inbounds [14 x %union.int_mv], [14 x %union.int_mv]* %11, i64 0, i64 11
  %465 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 0, i32 8
  %466 = bitcast %struct.mv* %18 to i8*
  %467 = getelementptr inbounds %struct.mv, %struct.mv* %18, i64 0, i32 0
  %468 = getelementptr inbounds %struct.mv, %struct.mv* %18, i64 0, i32 1
  %469 = bitcast i32* %19 to i8*
  %470 = bitcast i32* %19 to i16*
  %471 = getelementptr inbounds %struct.mv, %struct.mv* %20, i64 0, i32 1
  %472 = bitcast [5 x i32]* %21 to i8*
  %473 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 0
  %474 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 36, i32 0
  %475 = bitcast i32* %22 to i8*
  %476 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 36
  %477 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 0, i32 0
  %478 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 13
  %479 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 0, i32 3
  %480 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 26, i64 0
  %481 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 29
  %482 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 15
  %483 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 86
  %484 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 11
  %485 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %34
  %486 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 0, i32 5
  %487 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 0, i32 4
  %488 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 95
  %489 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 18
  %490 = bitcast %struct.buf_2d* %450 to i64*
  %491 = shl nuw nsw i32 %37, 2
  %492 = shl nuw nsw i32 %40, 2
  %493 = shl nsw i32 %3, 3
  %494 = shl i32 %2, 3
  %495 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 23
  %496 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %12, i64 0, i32 0
  %497 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %12, i64 0, i32 1
  %498 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 14
  %499 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %12, i64 0, i32 2
  %500 = icmp ugt i8 %36, 1
  %501 = icmp ugt i8 %39, 1
  %502 = zext i8 %36 to i64
  %503 = zext i8 %39 to i64
  %504 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 4, i64 0
  %505 = bitcast %struct.buf_2d* %504 to i8*
  %506 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 2, i32 4, i64 0
  %507 = bitcast %struct.buf_2d* %506 to i8*
  %508 = bitcast [5 x i32]* %21 to i8*
  %509 = bitcast i32* %474 to <4 x i32>*
  %510 = bitcast i32* %474 to <4 x i32>*
  br label %90
}

declare void @vp9_setup_pred_block(%struct.macroblockd*, %struct.buf_2d*, %struct.yv12_buffer_config*, i32, i32, %struct.scale_factors*, %struct.scale_factors*) local_unnamed_addr #2

declare void @vp9_find_mv_refs(%struct.VP9Common*, %struct.macroblockd*, %struct.MODE_INFO*, i8 signext, %union.int_mv*, i32, i32, i8*) local_unnamed_addr #2

declare void @vp9_find_best_ref_mvs(%struct.macroblockd*, i32, %union.int_mv*, %union.int_mv*, %union.int_mv*) local_unnamed_addr #2

declare i32 @vp9_raster_block_offset(i8 zeroext, i32, i32) local_unnamed_addr #2

declare void @vp9_append_sub8x8_mvs_for_idx(%struct.VP9Common*, %struct.macroblockd*, i32, i32, i32, i32, %union.int_mv*, %union.int_mv*, i8*) local_unnamed_addr #2

declare void @vp9_set_mv_search_range(%struct.MvLimits*, %struct.mv*) local_unnamed_addr #2

declare i32 @vp9_full_pixel_search(%struct.VP9_COMP*, %struct.macroblock*, i8 zeroext, %struct.mv*, i32, i32, i32, i32*, %struct.mv*, %struct.mv*, i32, i32) local_unnamed_addr #2

declare i32 @vp9_mv_bit_cost(%struct.mv*, %struct.mv*, i32*, i32**, i32) local_unnamed_addr #2

declare void @vp9_highbd_build_inter_predictor(i16*, i32, i16*, i32, %struct.mv*, %struct.scale_factors*, i32, i32, i32, [8 x i16]*, i32, i32, i32, i32) local_unnamed_addr #2

declare void @vp9_build_inter_predictor(i8*, i32, i8*, i32, %struct.mv*, %struct.scale_factors*, i32, i32, i32, [8 x i16]*, i32, i32, i32) local_unnamed_addr #2

declare void @vp9_predict_intra_block(%struct.macroblockd*, i32, i8 zeroext, i8 zeroext, i8*, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #2

declare i32 @vp9_get_pred_context_single_ref_p1(%struct.macroblockd*) local_unnamed_addr #2

declare i32 @vp9_get_pred_context_single_ref_p2(%struct.macroblockd*) local_unnamed_addr #2

declare void @vp9_mv_pred(%struct.VP9_COMP*, %struct.macroblock*, i8*, i32, i32, i8 zeroext) local_unnamed_addr #2

declare i32 @vp9_int_pro_motion_estimation(%struct.VP9_COMP*, %struct.macroblock*, i8 zeroext, i32, i32, %struct.mv*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @combined_motion_search(%struct.VP9_COMP*, %struct.macroblock*, i8 zeroext, i32, i32, %union.int_mv*, i32* nocapture, i64, i32) unnamed_addr #0 {
  %10 = alloca [3 x %struct.buf_2d], align 16
  %11 = alloca i32, align 4
  %12 = bitcast i32* %11 to %struct.mv*
  %13 = alloca i32, align 4
  %14 = bitcast i32* %13 to %struct.mv*
  %15 = alloca i32, align 4
  %16 = bitcast i32* %15 to %struct.mv*
  %17 = alloca i32, align 4
  %18 = alloca [5 x i32], align 16
  %19 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 6
  %20 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %19, align 8
  %21 = load %struct.MODE_INFO*, %struct.MODE_INFO** %20, align 8
  %22 = bitcast [3 x %struct.buf_2d]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %22) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 0, i64 48, i1 false)
  %23 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 0, i32 8
  %24 = load i32, i32* %23, align 8
  %25 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 12
  %26 = load i32, i32* %25, align 16
  %27 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %27) #3
  %28 = bitcast i32* %11 to i16*
  store i16 -21846, i16* %28, align 4
  %29 = getelementptr inbounds %struct.mv, %struct.mv* %12, i64 0, i32 1
  store i16 -21846, i16* %29, align 2
  %30 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %21, i64 0, i32 8, i64 0
  %31 = load i8, i8* %30, align 4
  %32 = sext i8 %31 to i32
  %33 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %33) #3
  %34 = bitcast i32* %13 to i16*
  store i16 -21846, i16* %34, align 4
  %35 = getelementptr inbounds %struct.mv, %struct.mv* %14, i64 0, i32 1
  store i16 -21846, i16* %35, align 2
  %36 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  %37 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %36, align 16
  %38 = sext i8 %31 to i64
  %39 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %37, i64 0, i32 0, i64 %38, i64 0, i32 0
  %40 = load i32, i32* %39, align 4
  store i32 %40, i32* %13, align 4
  %41 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %41) #3
  %42 = bitcast i32* %15 to i16*
  store i16 -21846, i16* %42, align 4
  %43 = getelementptr inbounds %struct.mv, %struct.mv* %16, i64 0, i32 1
  store i16 -21846, i16* %43, align 2
  %44 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %44) #3
  store i32 -1431655766, i32* %17, align 4
  %45 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 36, i32 0
  %46 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 36, i32 1
  %47 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 36, i32 2
  %48 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 36, i32 3
  %49 = bitcast i32* %45 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 16
  %51 = bitcast [5 x i32]* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %51) #3
  %52 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 0
  %53 = bitcast [5 x i32]* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %53, i8 -86, i64 20, i1 false)
  %54 = tail call %struct.yv12_buffer_config* @vp9_get_scaled_ref_frame(%struct.VP9_COMP* %0, i32 %32) #3
  %55 = icmp ne %struct.yv12_buffer_config* %54, null
  br i1 %55, label %56, label %69

56:                                               ; preds = %9
  %57 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1
  %58 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 4, i64 0
  %59 = bitcast [3 x %struct.buf_2d]* %10 to i8*
  %60 = bitcast %struct.buf_2d* %58 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %59, i8* align 8 %60, i64 16, i1 false)
  %61 = getelementptr inbounds [3 x %struct.buf_2d], [3 x %struct.buf_2d]* %10, i64 0, i64 1
  %62 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 4, i64 0
  %63 = bitcast %struct.buf_2d* %61 to i8*
  %64 = bitcast %struct.buf_2d* %62 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %63, i8* align 8 %64, i64 16, i1 false)
  %65 = getelementptr inbounds [3 x %struct.buf_2d], [3 x %struct.buf_2d]* %10, i64 0, i64 2
  %66 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 2, i32 4, i64 0
  %67 = bitcast %struct.buf_2d* %65 to i8*
  %68 = bitcast %struct.buf_2d* %66 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %67, i8* align 8 %68, i64 16, i1 false)
  tail call void @vp9_setup_pre_planes(%struct.macroblockd* %57, i32 0, %struct.yv12_buffer_config* nonnull %54, i32 %3, i32 %4, %struct.scale_factors* null) #3
  br label %69

69:                                               ; preds = %56, %9
  %70 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 36
  call void @vp9_set_mv_search_range(%struct.MvLimits* %70, %struct.mv* nonnull %14) #3
  %71 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 11
  %72 = load i32, i32* %71, align 8
  %73 = icmp sgt i32 %72, 5
  br i1 %73, label %74, label %92

74:                                               ; preds = %69
  %75 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 53
  %76 = load i8, i8* %75, align 4
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %92, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds %struct.MvLimits, %struct.MvLimits* %70, i64 0, i32 0
  %80 = load i32, i32* %79, align 16
  %81 = icmp sgt i32 %80, -10
  %82 = select i1 %81, i32 %80, i32 -10
  store i32 %82, i32* %79, align 16
  %83 = load i32, i32* %47, align 8
  %84 = icmp sgt i32 %83, -10
  %85 = select i1 %84, i32 %83, i32 -10
  store i32 %85, i32* %47, align 8
  %86 = load i32, i32* %46, align 4
  %87 = icmp slt i32 %86, 10
  %88 = select i1 %87, i32 %86, i32 10
  store i32 %88, i32* %46, align 4
  %89 = load i32, i32* %48, align 4
  %90 = icmp slt i32 %89, 10
  %91 = select i1 %90, i32 %89, i32 10
  store i32 %91, i32* %48, align 4
  br label %92

92:                                               ; preds = %74, %78, %69
  %93 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 21, i64 %38
  %94 = load i32, i32* %93, align 4
  %95 = icmp slt i32 %94, 2
  br i1 %95, label %96, label %100

96:                                               ; preds = %92
  %97 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %36, align 16
  %98 = sext i32 %94 to i64
  %99 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %97, i64 0, i32 0, i64 %38, i64 %98, i32 0
  br label %103

100:                                              ; preds = %92
  %101 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 49, i64 %38
  %102 = bitcast %struct.mv* %101 to i32*
  br label %103

103:                                              ; preds = %100, %96
  %104 = phi i32* [ %99, %96 ], [ %102, %100 ]
  %105 = load i32, i32* %104, align 4
  %106 = lshr i32 %105, 16
  %107 = trunc i32 %106 to i16
  %108 = ashr i16 %107, 3
  store i16 %108, i16* %29, align 2
  %109 = trunc i32 %105 to i16
  %110 = ashr i16 %109, 3
  store i16 %110, i16* %28, align 4
  %111 = icmp ne i32 %8, 0
  %112 = getelementptr inbounds %union.int_mv, %union.int_mv* %5, i64 0, i32 0
  %113 = select i1 %111, i32* %112, i32* %13
  %114 = load i32, i32* %113, align 4
  store i32 %114, i32* %15, align 4
  %115 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 55
  %116 = load i32, i32* %115, align 16
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %130, label %118

118:                                              ; preds = %103
  %119 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57
  %120 = load i32, i32* %119, align 8
  %121 = lshr i32 %120, 3
  %122 = trunc i32 %121 to i16
  %123 = bitcast %union.int_mv* %5 to %struct.mv*
  %124 = bitcast %union.int_mv* %5 to i16*
  store i16 %122, i16* %124, align 4
  %125 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 56
  %126 = load i32, i32* %125, align 4
  %127 = lshr i32 %126, 3
  %128 = trunc i32 %127 to i16
  %129 = getelementptr inbounds %struct.mv, %struct.mv* %123, i64 0, i32 1
  store i16 %128, i16* %129, align 2
  br label %140

130:                                              ; preds = %103
  %131 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 0, i32 0
  %132 = load i32, i32* %131, align 8
  %133 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 0, i32 3
  %134 = load i32, i32* %133, align 4
  %135 = icmp eq i32 %134, 0
  %136 = select i1 %135, i32* null, i32* %52
  %137 = bitcast %union.int_mv* %5 to %struct.mv*
  %138 = call i32 @vp9_full_pixel_search(%struct.VP9_COMP* %0, %struct.macroblock* %1, i8 zeroext %2, %struct.mv* nonnull %12, i32 %24, i32 %132, i32 %26, i32* %136, %struct.mv* nonnull %16, %struct.mv* %137, i32 2147483647, i32 0) #3
  %139 = bitcast %union.int_mv* %5 to i16*
  br label %140

140:                                              ; preds = %130, %118
  %141 = phi i16* [ %139, %130 ], [ %124, %118 ]
  %142 = phi %struct.mv* [ %137, %130 ], [ %123, %118 ]
  %143 = bitcast i32* %45 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %143, align 16
  %144 = load i16, i16* %141, align 4
  %145 = shl i16 %144, 3
  store i16 %145, i16* %28, align 4
  %146 = getelementptr inbounds %struct.mv, %struct.mv* %142, i64 0, i32 1
  %147 = load i16, i16* %146, align 2
  %148 = shl i16 %147, 3
  store i16 %148, i16* %29, align 2
  %149 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 26, i64 0
  %150 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 29
  %151 = load i32**, i32*** %150, align 8
  %152 = call i32 @vp9_mv_bit_cost(%struct.mv* nonnull %12, %struct.mv* nonnull %14, i32* %149, i32** %151, i32 108) #3
  store i32 %152, i32* %6, align 4
  %153 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %36, align 16
  %154 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %153, i64 0, i32 1, i64 %38
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i64
  %157 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 111, i64 %156, i64 3
  %158 = load i32, i32* %157, align 4
  %159 = add nsw i32 %158, %152
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 15
  %162 = load i32, i32* %161, align 4
  %163 = sext i32 %162 to i64
  %164 = mul nsw i64 %160, %163
  %165 = add nsw i64 %164, 256
  %166 = ashr i64 %165, 9
  %167 = icmp sle i64 %166, %7
  %168 = zext i1 %167 to i32
  %169 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %170 = load i32, i32* %169, align 4
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %181, label %172

172:                                              ; preds = %140
  %173 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 23
  %174 = load i32, i32* %173, align 4
  %175 = icmp eq i32 %174, 0
  %176 = load i16, i16* %28, align 4
  %177 = load i16, i16* %29, align 2
  %178 = or i16 %177, %176
  %179 = icmp ne i16 %178, 0
  %180 = or i1 %175, %179
  br label %181

181:                                              ; preds = %172, %140
  %182 = phi i1 [ true, %140 ], [ %180, %172 ]
  %183 = and i1 %167, %182
  br i1 %183, label %184, label %243

184:                                              ; preds = %181
  %185 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 0, i32 5
  %186 = load i32, i32* %185, align 4
  br i1 %111, label %187, label %192

187:                                              ; preds = %184
  %188 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 82
  %189 = load i32, i32* %188, align 8
  %190 = icmp eq i32 %189, 0
  %191 = select i1 %190, i32 %186, i32 2
  br label %192

192:                                              ; preds = %187, %184
  %193 = phi i32 [ %186, %184 ], [ %191, %187 ]
  %194 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 0, i32 6
  %195 = load i32, i32* %194, align 8
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %220, label %197

197:                                              ; preds = %192
  %198 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 0, i32 7, i32 0
  %199 = load i32, i32* %198, align 4
  %200 = load i16, i16* %141, align 4
  %201 = sext i16 %200 to i32
  %202 = icmp slt i32 %201, 0
  %203 = sub nsw i32 0, %201
  %204 = select i1 %202, i32 %203, i32 %201
  %205 = icmp slt i32 %204, %199
  br i1 %205, label %206, label %213

206:                                              ; preds = %197
  %207 = load i16, i16* %146, align 2
  %208 = sext i16 %207 to i32
  %209 = icmp slt i32 %208, 0
  %210 = sub nsw i32 0, %208
  %211 = select i1 %209, i32 %210, i32 %208
  %212 = icmp slt i32 %211, %199
  br i1 %212, label %215, label %213

213:                                              ; preds = %206, %197
  %214 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 0, i32 7, i32 2
  br label %217

215:                                              ; preds = %206
  %216 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 0, i32 7, i32 1
  br label %217

217:                                              ; preds = %215, %213
  %218 = phi i32* [ %214, %213 ], [ %216, %215 ]
  %219 = load i32, i32* %218, align 4
  br label %220

220:                                              ; preds = %192, %217
  %221 = phi i32 [ %219, %217 ], [ %193, %192 ]
  %222 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 86
  %223 = load i32 (%struct.macroblock*, %struct.mv*, %struct.mv*, i32, i32, %struct.vp9_variance_vtable*, i32, i32, i32*, i32*, i32**, i32*, i32*, i8*, i32, i32, i32)*, i32 (%struct.macroblock*, %struct.mv*, %struct.mv*, i32, i32, %struct.vp9_variance_vtable*, i32, i32, i32*, i32*, i32**, i32*, i32*, i8*, i32, i32, i32)** %222, align 16
  %224 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 29
  %225 = load i32, i32* %224, align 16
  %226 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 11
  %227 = load i32, i32* %226, align 4
  %228 = zext i8 %2 to i64
  %229 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %228
  %230 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 0, i32 4
  %231 = load i32, i32* %230, align 8
  %232 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 0, i32 3
  %233 = load i32, i32* %232, align 4
  %234 = icmp eq i32 %233, 0
  %235 = select i1 %234, i32* null, i32* %52
  %236 = load i32**, i32*** %150, align 8
  %237 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 24, i64 %38
  %238 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 95
  %239 = load i32, i32* %238, align 4
  %240 = call i32 %223(%struct.macroblock* %1, %struct.mv* %142, %struct.mv* nonnull %14, i32 %225, i32 %227, %struct.vp9_variance_vtable* %229, i32 %221, i32 %231, i32* %235, i32* %149, i32** %236, i32* nonnull %17, i32* %237, i8* null, i32 0, i32 0, i32 %239) #3
  %241 = load i32**, i32*** %150, align 8
  %242 = call i32 @vp9_mv_bit_cost(%struct.mv* %142, %struct.mv* nonnull %14, i32* %149, i32** %241, i32 108) #3
  store i32 %242, i32* %6, align 4
  br label %243

243:                                              ; preds = %220, %181
  br i1 %55, label %244, label %256

244:                                              ; preds = %243
  %245 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 4, i64 0
  %246 = bitcast %struct.buf_2d* %245 to i8*
  %247 = bitcast [3 x %struct.buf_2d]* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %246, i8* nonnull align 16 %247, i64 16, i1 false)
  %248 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 4, i64 0
  %249 = getelementptr inbounds [3 x %struct.buf_2d], [3 x %struct.buf_2d]* %10, i64 0, i64 1
  %250 = bitcast %struct.buf_2d* %248 to i8*
  %251 = bitcast %struct.buf_2d* %249 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %250, i8* align 16 %251, i64 16, i1 false)
  %252 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 2, i32 4, i64 0
  %253 = getelementptr inbounds [3 x %struct.buf_2d], [3 x %struct.buf_2d]* %10, i64 0, i64 2
  %254 = bitcast %struct.buf_2d* %252 to i8*
  %255 = bitcast %struct.buf_2d* %253 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %254, i8* align 16 %255, i64 16, i1 false)
  br label %256

256:                                              ; preds = %244, %243
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %51) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %44) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %41) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %33) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %27) #3
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %22) #3
  ret i32 %168
}

declare %struct.yv12_buffer_config* @vp9_get_scaled_ref_frame(%struct.VP9_COMP*, i32) local_unnamed_addr #2

declare void @vp9_setup_pre_planes(%struct.macroblockd*, i32, %struct.yv12_buffer_config*, i32, i32, %struct.scale_factors*) local_unnamed_addr #2

declare i64 @vp9_scale_acskip_thresh(i64, i32, i32, i32) local_unnamed_addr #2

declare void @vp9_model_rd_from_var_lapndz(i32, i32, i32, i32*, i64*) local_unnamed_addr #2

declare void @vpx_highbd_8_get8x8var_sse2(i8*, i32, i8*, i32, i32*, i32*) local_unnamed_addr #2

declare void @vpx_highbd_10_get8x8var_sse2(i8*, i32, i8*, i32, i32*, i32*) local_unnamed_addr #2

declare void @vpx_highbd_12_get8x8var_sse2(i8*, i32, i8*, i32, i32*, i32*) local_unnamed_addr #2

declare void @vpx_get8x8var_sse2(i8*, i32, i8*, i32, i32*, i32*) local_unnamed_addr #2

declare void @vpx_highbd_subtract_block_c(i32, i32, i16*, i64, i8*, i64, i8*, i64, i32) local_unnamed_addr #2

declare void @vpx_subtract_block_sse2(i32, i32, i16*, i64, i8*, i64, i8*, i64) local_unnamed_addr #2

declare void @vp9_build_inter_predictors_sbuv(%struct.macroblockd*, i32, i32, i8 zeroext) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
