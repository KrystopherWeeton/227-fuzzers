; ModuleID = '../../net/quic/platform/impl/quic_mem_slice_span_impl.cc'
source_filename = "../../net/quic/platform/impl/quic_mem_slice_span_impl.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.quic::QuicMemSliceSpanImpl" = type { %class.scoped_refptr*, i64*, i64 }
%class.scoped_refptr = type { %"class.net::IOBuffer"* }
%"class.net::IOBuffer" = type { i32 (...)**, %"class.base::RefCountedThreadSafe", i8* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.quic::QuicMemSliceImpl" = type { %class.scoped_refptr, i64 }

@_ZN4quic20QuicMemSliceSpanImplC1EPK13scoped_refptrIN3net8IOBufferEEPKmm = hidden unnamed_addr alias void (%"class.quic::QuicMemSliceSpanImpl"*, %class.scoped_refptr*, i64*, i64), void (%"class.quic::QuicMemSliceSpanImpl"*, %class.scoped_refptr*, i64*, i64)* @_ZN4quic20QuicMemSliceSpanImplC2EPK13scoped_refptrIN3net8IOBufferEEPKmm
@_ZN4quic20QuicMemSliceSpanImplC1EPNS_16QuicMemSliceImplE = hidden unnamed_addr alias void (%"class.quic::QuicMemSliceSpanImpl"*, %"class.quic::QuicMemSliceImpl"*), void (%"class.quic::QuicMemSliceSpanImpl"*, %"class.quic::QuicMemSliceImpl"*)* @_ZN4quic20QuicMemSliceSpanImplC2EPNS_16QuicMemSliceImplE
@_ZN4quic20QuicMemSliceSpanImplC1ERKS0_ = hidden unnamed_addr alias void (%"class.quic::QuicMemSliceSpanImpl"*, %"class.quic::QuicMemSliceSpanImpl"*), void (%"class.quic::QuicMemSliceSpanImpl"*, %"class.quic::QuicMemSliceSpanImpl"*)* @_ZN4quic20QuicMemSliceSpanImplC2ERKS0_
@_ZN4quic20QuicMemSliceSpanImplC1EOS0_ = hidden unnamed_addr alias void (%"class.quic::QuicMemSliceSpanImpl"*, %"class.quic::QuicMemSliceSpanImpl"*), void (%"class.quic::QuicMemSliceSpanImpl"*, %"class.quic::QuicMemSliceSpanImpl"*)* @_ZN4quic20QuicMemSliceSpanImplC2EOS0_
@_ZN4quic20QuicMemSliceSpanImplD1Ev = hidden unnamed_addr alias void (%"class.quic::QuicMemSliceSpanImpl"*), void (%"class.quic::QuicMemSliceSpanImpl"*)* @_ZN4quic20QuicMemSliceSpanImplD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4quic20QuicMemSliceSpanImplC2EPK13scoped_refptrIN3net8IOBufferEEPKmm(%"class.quic::QuicMemSliceSpanImpl"* nocapture, %class.scoped_refptr*, i64*, i64) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.quic::QuicMemSliceSpanImpl", %"class.quic::QuicMemSliceSpanImpl"* %0, i64 0, i32 0
  store %class.scoped_refptr* %1, %class.scoped_refptr** %5, align 8
  %6 = getelementptr inbounds %"class.quic::QuicMemSliceSpanImpl", %"class.quic::QuicMemSliceSpanImpl"* %0, i64 0, i32 1
  store i64* %2, i64** %6, align 8
  %7 = getelementptr inbounds %"class.quic::QuicMemSliceSpanImpl", %"class.quic::QuicMemSliceSpanImpl"* %0, i64 0, i32 2
  store i64 %3, i64* %7, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4quic20QuicMemSliceSpanImplC2EPNS_16QuicMemSliceImplE(%"class.quic::QuicMemSliceSpanImpl"* nocapture, %"class.quic::QuicMemSliceImpl"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.quic::QuicMemSliceImpl", %"class.quic::QuicMemSliceImpl"* %1, i64 0, i32 0
  %4 = getelementptr inbounds %"class.quic::QuicMemSliceImpl", %"class.quic::QuicMemSliceImpl"* %1, i64 0, i32 1
  %5 = getelementptr inbounds %"class.quic::QuicMemSliceSpanImpl", %"class.quic::QuicMemSliceSpanImpl"* %0, i64 0, i32 0
  store %class.scoped_refptr* %3, %class.scoped_refptr** %5, align 8
  %6 = getelementptr inbounds %"class.quic::QuicMemSliceSpanImpl", %"class.quic::QuicMemSliceSpanImpl"* %0, i64 0, i32 1
  store i64* %4, i64** %6, align 8
  %7 = getelementptr inbounds %"class.quic::QuicMemSliceSpanImpl", %"class.quic::QuicMemSliceSpanImpl"* %0, i64 0, i32 2
  store i64 1, i64* %7, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic20QuicMemSliceSpanImplC2ERKS0_(%"class.quic::QuicMemSliceSpanImpl"* nocapture, %"class.quic::QuicMemSliceSpanImpl"* nocapture readonly dereferenceable(24)) unnamed_addr #1 align 2 {
  %3 = bitcast %"class.quic::QuicMemSliceSpanImpl"* %0 to i8*
  %4 = bitcast %"class.quic::QuicMemSliceSpanImpl"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.quic::QuicMemSliceSpanImpl"* @_ZN4quic20QuicMemSliceSpanImplaSERKS0_(%"class.quic::QuicMemSliceSpanImpl"* returned, %"class.quic::QuicMemSliceSpanImpl"* nocapture readonly dereferenceable(24)) local_unnamed_addr #1 align 2 {
  %3 = bitcast %"class.quic::QuicMemSliceSpanImpl"* %0 to i8*
  %4 = bitcast %"class.quic::QuicMemSliceSpanImpl"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false)
  ret %"class.quic::QuicMemSliceSpanImpl"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic20QuicMemSliceSpanImplC2EOS0_(%"class.quic::QuicMemSliceSpanImpl"* nocapture, %"class.quic::QuicMemSliceSpanImpl"* nocapture readonly dereferenceable(24)) unnamed_addr #1 align 2 {
  %3 = bitcast %"class.quic::QuicMemSliceSpanImpl"* %0 to i8*
  %4 = bitcast %"class.quic::QuicMemSliceSpanImpl"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.quic::QuicMemSliceSpanImpl"* @_ZN4quic20QuicMemSliceSpanImplaSEOS0_(%"class.quic::QuicMemSliceSpanImpl"* returned, %"class.quic::QuicMemSliceSpanImpl"* nocapture readonly dereferenceable(24)) local_unnamed_addr #1 align 2 {
  %3 = bitcast %"class.quic::QuicMemSliceSpanImpl"* %0 to i8*
  %4 = bitcast %"class.quic::QuicMemSliceSpanImpl"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false)
  ret %"class.quic::QuicMemSliceSpanImpl"* %0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN4quic20QuicMemSliceSpanImplD2Ev(%"class.quic::QuicMemSliceSpanImpl"* nocapture) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN4quic20QuicMemSliceSpanImpl12total_lengthEv(%"class.quic::QuicMemSliceSpanImpl"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.quic::QuicMemSliceSpanImpl", %"class.quic::QuicMemSliceSpanImpl"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %95, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.quic::QuicMemSliceSpanImpl", %"class.quic::QuicMemSliceSpanImpl"* %0, i64 0, i32 1
  %7 = load i64*, i64** %6, align 8
  %8 = icmp ult i64 %3, 4
  br i1 %8, label %9, label %12

9:                                                ; preds = %87, %5
  %10 = phi i64 [ 0, %5 ], [ %13, %87 ]
  %11 = phi i64 [ 0, %5 ], [ %93, %87 ]
  br label %97

12:                                               ; preds = %5
  %13 = and i64 %3, -4
  %14 = add i64 %13, -4
  %15 = lshr exact i64 %14, 2
  %16 = add nuw nsw i64 %15, 1
  %17 = and i64 %16, 3
  %18 = icmp ult i64 %14, 12
  br i1 %18, label %64, label %19

19:                                               ; preds = %12
  %20 = sub nsw i64 %16, %17
  br label %21

21:                                               ; preds = %21, %19
  %22 = phi i64 [ 0, %19 ], [ %61, %21 ]
  %23 = phi <2 x i64> [ zeroinitializer, %19 ], [ %59, %21 ]
  %24 = phi <2 x i64> [ zeroinitializer, %19 ], [ %60, %21 ]
  %25 = phi i64 [ %20, %19 ], [ %62, %21 ]
  %26 = getelementptr inbounds i64, i64* %7, i64 %22
  %27 = bitcast i64* %26 to <2 x i64>*
  %28 = load <2 x i64>, <2 x i64>* %27, align 8
  %29 = getelementptr inbounds i64, i64* %26, i64 2
  %30 = bitcast i64* %29 to <2 x i64>*
  %31 = load <2 x i64>, <2 x i64>* %30, align 8
  %32 = add <2 x i64> %28, %23
  %33 = add <2 x i64> %31, %24
  %34 = or i64 %22, 4
  %35 = getelementptr inbounds i64, i64* %7, i64 %34
  %36 = bitcast i64* %35 to <2 x i64>*
  %37 = load <2 x i64>, <2 x i64>* %36, align 8
  %38 = getelementptr inbounds i64, i64* %35, i64 2
  %39 = bitcast i64* %38 to <2 x i64>*
  %40 = load <2 x i64>, <2 x i64>* %39, align 8
  %41 = add <2 x i64> %37, %32
  %42 = add <2 x i64> %40, %33
  %43 = or i64 %22, 8
  %44 = getelementptr inbounds i64, i64* %7, i64 %43
  %45 = bitcast i64* %44 to <2 x i64>*
  %46 = load <2 x i64>, <2 x i64>* %45, align 8
  %47 = getelementptr inbounds i64, i64* %44, i64 2
  %48 = bitcast i64* %47 to <2 x i64>*
  %49 = load <2 x i64>, <2 x i64>* %48, align 8
  %50 = add <2 x i64> %46, %41
  %51 = add <2 x i64> %49, %42
  %52 = or i64 %22, 12
  %53 = getelementptr inbounds i64, i64* %7, i64 %52
  %54 = bitcast i64* %53 to <2 x i64>*
  %55 = load <2 x i64>, <2 x i64>* %54, align 8
  %56 = getelementptr inbounds i64, i64* %53, i64 2
  %57 = bitcast i64* %56 to <2 x i64>*
  %58 = load <2 x i64>, <2 x i64>* %57, align 8
  %59 = add <2 x i64> %55, %50
  %60 = add <2 x i64> %58, %51
  %61 = add i64 %22, 16
  %62 = add i64 %25, -4
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %21, !llvm.loop !2

64:                                               ; preds = %21, %12
  %65 = phi <2 x i64> [ undef, %12 ], [ %59, %21 ]
  %66 = phi <2 x i64> [ undef, %12 ], [ %60, %21 ]
  %67 = phi i64 [ 0, %12 ], [ %61, %21 ]
  %68 = phi <2 x i64> [ zeroinitializer, %12 ], [ %59, %21 ]
  %69 = phi <2 x i64> [ zeroinitializer, %12 ], [ %60, %21 ]
  %70 = icmp eq i64 %17, 0
  br i1 %70, label %87, label %71

71:                                               ; preds = %64, %71
  %72 = phi i64 [ %84, %71 ], [ %67, %64 ]
  %73 = phi <2 x i64> [ %82, %71 ], [ %68, %64 ]
  %74 = phi <2 x i64> [ %83, %71 ], [ %69, %64 ]
  %75 = phi i64 [ %85, %71 ], [ %17, %64 ]
  %76 = getelementptr inbounds i64, i64* %7, i64 %72
  %77 = bitcast i64* %76 to <2 x i64>*
  %78 = load <2 x i64>, <2 x i64>* %77, align 8
  %79 = getelementptr inbounds i64, i64* %76, i64 2
  %80 = bitcast i64* %79 to <2 x i64>*
  %81 = load <2 x i64>, <2 x i64>* %80, align 8
  %82 = add <2 x i64> %78, %73
  %83 = add <2 x i64> %81, %74
  %84 = add i64 %72, 4
  %85 = add i64 %75, -1
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %87, label %71, !llvm.loop !4

87:                                               ; preds = %71, %64
  %88 = phi <2 x i64> [ %65, %64 ], [ %82, %71 ]
  %89 = phi <2 x i64> [ %66, %64 ], [ %83, %71 ]
  %90 = add <2 x i64> %89, %88
  %91 = shufflevector <2 x i64> %90, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %92 = add <2 x i64> %90, %91
  %93 = extractelement <2 x i64> %92, i32 0
  %94 = icmp eq i64 %3, %13
  br i1 %94, label %95, label %9

95:                                               ; preds = %97, %87, %1
  %96 = phi i64 [ 0, %1 ], [ %93, %87 ], [ %102, %97 ]
  ret i64 %96

97:                                               ; preds = %9, %97
  %98 = phi i64 [ %103, %97 ], [ %10, %9 ]
  %99 = phi i64 [ %102, %97 ], [ %11, %9 ]
  %100 = getelementptr inbounds i64, i64* %7, i64 %98
  %101 = load i64, i64* %100, align 8
  %102 = add i64 %101, %99
  %103 = add nuw i64 %98, 1
  %104 = icmp ult i64 %103, %3
  br i1 %104, label %97, label %95, !llvm.loop !6
}

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
