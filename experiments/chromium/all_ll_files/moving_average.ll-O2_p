; ModuleID = '../../media/base/moving_average.cc'
source_filename = "../../media/base/moving_average.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.media::MovingAverage" = type { i64, %"class.std::__1::vector", i64, %"class.base::TimeDelta", %"class.base::TimeDelta" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::TimeDelta"*, %"class.base::TimeDelta"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::TimeDelta"* }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZNK4base9TimeDeltamiES0_ = comdat any

@.str = private unnamed_addr constant [23 x i8] c"delta_ != other.delta_\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"../../base/time/time.h\00", align 1
@.str.2 = private unnamed_addr constant [38 x i8] c"!is_inf() || (delta_ == other.delta_)\00", align 1

@_ZN5media13MovingAverageC1Em = hidden unnamed_addr alias void (%"class.media::MovingAverage"*, i64), void (%"class.media::MovingAverage"*, i64)* @_ZN5media13MovingAverageC2Em
@_ZN5media13MovingAverageD1Ev = hidden unnamed_addr alias void (%"class.media::MovingAverage"*), void (%"class.media::MovingAverage"*)* @_ZN5media13MovingAverageD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media13MovingAverageC2Em(%"class.media::MovingAverage"*, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  %4 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 1
  %5 = bitcast %"class.std::__1::vector"* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #10
  %6 = icmp eq i64 %1, 0
  br i1 %6, label %28, label %7

7:                                                ; preds = %2
  %8 = icmp ugt i64 %1, 2305843009213693951
  br i1 %8, label %9, label %11

9:                                                ; preds = %7
  %10 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %10) #11
  unreachable

11:                                               ; preds = %7
  %12 = shl i64 %1, 3
  %13 = tail call i8* @_Znwm(i64 %12) #12
  %14 = bitcast i8* %13 to %"class.base::TimeDelta"*
  %15 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 1, i32 0, i32 1
  %16 = bitcast %"class.std::__1::vector"* %4 to i8**
  store i8* %13, i8** %16, align 8
  %17 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %14, i64 %1
  %18 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  store %"class.base::TimeDelta"* %17, %"class.base::TimeDelta"** %18, align 8
  %19 = bitcast %"class.base::TimeDelta"** %15 to i64*
  %20 = ptrtoint i8* %13 to i64
  %21 = add nsw i64 %1, -1
  %22 = getelementptr %"class.base::TimeDelta", %"class.base::TimeDelta"* %14, i64 %21, i32 0
  %23 = ptrtoint i64* %22 to i64
  %24 = sub i64 8, %20
  %25 = add i64 %24, %23
  %26 = and i64 %25, -8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 %26, i1 false) #10
  %27 = ptrtoint %"class.base::TimeDelta"* %17 to i64
  store i64 %27, i64* %19, align 8
  br label %28

28:                                               ; preds = %2, %11
  %29 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 2
  %30 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 4, i32 0
  %31 = bitcast i64* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 16, i1 false)
  store i64 -9223372036854775808, i64* %30, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media13MovingAverageD2Ev(%"class.media::MovingAverage"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load %"class.base::TimeDelta"*, %"class.base::TimeDelta"** %2, align 8
  %4 = icmp eq %"class.base::TimeDelta"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %"class.base::TimeDelta"* %3 to i64
  %7 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 1, i32 0, i32 1
  %8 = bitcast %"class.base::TimeDelta"** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast %"class.base::TimeDelta"* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #12
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media13MovingAverage9AddSampleEN4base9TimeDeltaE(%"class.media::MovingAverage"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.base::TimeDelta", align 8
  %5 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %4, i64 0, i32 0
  store i64 %1, i64* %5, align 8
  %6 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, 1
  store i64 %8, i64* %6, align 8
  %9 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = urem i64 %7, %10
  %12 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 1, i32 0, i32 0
  %13 = load %"class.base::TimeDelta"*, %"class.base::TimeDelta"** %12, align 8
  %14 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %13, i64 %11, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* nonnull %4, i64 %15)
  %17 = add i64 %16, -9223372036854775807
  %18 = icmp ult i64 %17, 2
  %19 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 3, i32 0
  %20 = load i64, i64* %19, align 8
  br i1 %18, label %28, label %21

21:                                               ; preds = %2
  %22 = icmp slt i64 %16, 0
  %23 = select i1 %22, i64 -9223372036854775808, i64 9223372036854775807
  %24 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %20, i64 %16) #10
  %25 = extractvalue { i64, i1 } %24, 1
  %26 = extractvalue { i64, i1 } %24, 0
  %27 = select i1 %25, i64 %23, i64 %26, !prof !2
  br label %36

28:                                               ; preds = %2
  %29 = add i64 %20, -9223372036854775807
  %30 = icmp ugt i64 %29, 1
  %31 = icmp eq i64 %20, %16
  %32 = or i1 %31, %30
  br i1 %32, label %36, label %33

33:                                               ; preds = %28
  %34 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i64 0, i64 0)) #10
  %35 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #10
  br label %36

36:                                               ; preds = %21, %28, %33
  %37 = phi i64 [ %27, %21 ], [ %16, %28 ], [ %16, %33 ]
  store i64 %37, i64* %19, align 8
  %38 = load i64, i64* %5, align 8
  store i64 %38, i64* %14, align 8
  %39 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 4, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = load i64, i64* %5, align 8
  %42 = icmp sgt i64 %41, %40
  br i1 %42, label %43, label %44

43:                                               ; preds = %36
  store i64 %41, i64* %39, align 8
  br label %44

44:                                               ; preds = %43, %36
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = add i64 %1, -9223372036854775807
  %7 = icmp ult i64 %6, 2
  br i1 %7, label %17, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp sgt i64 %1, -1
  %12 = select i1 %11, i64 -9223372036854775808, i64 9223372036854775807
  %13 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %10, i64 %1) #10
  %14 = extractvalue { i64, i1 } %13, 1
  %15 = extractvalue { i64, i1 } %13, 0
  %16 = select i1 %14, i64 %12, i64 %15, !prof !2
  ret i64 %16

17:                                               ; preds = %2
  %18 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #10
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = icmp eq i64 %21, %1
  br i1 %23, label %25, label %24

24:                                               ; preds = %17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* null, i8** %19, align 8
  br label %34

25:                                               ; preds = %17
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %1) #10
  %27 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %1) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %26, i8* %27) #10
  %28 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* %29, i8** %19, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 387, %"class.logging::CheckOpResult"* nonnull %4) #10
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #10
  br label %34

34:                                               ; preds = %24, %25, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #10
  %35 = icmp slt i64 %1, 0
  %36 = select i1 %35, i64 9223372036854775807, i64 -9223372036854775808
  ret i64 %36
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZNK5media13MovingAverage7AverageEv(%"class.media::MovingAverage"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %3
  %7 = select i1 %6, i64 %5, i64 %3
  %8 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 3, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = icmp ne i64 %7, 0
  %11 = icmp sgt i64 %9, -1
  %12 = and i1 %11, %10
  br i1 %12, label %13, label %19, !prof !3

13:                                               ; preds = %1
  %14 = udiv i64 %9, %7
  %15 = icmp sgt i64 %14, 0
  %16 = select i1 %15, i64 %14, i64 0
  %17 = icmp sgt i64 %14, -1
  %18 = select i1 %17, i64 %16, i64 9223372036854775807
  br label %21

19:                                               ; preds = %1
  %20 = select i1 %11, i64 9223372036854775807, i64 -9223372036854775808
  br label %21

21:                                               ; preds = %13, %19
  %22 = phi i64 [ %18, %13 ], [ %20, %19 ]
  ret i64 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK5media13MovingAverage9DeviationEv(%"class.media::MovingAverage"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %3
  %7 = select i1 %6, i64 %5, i64 %3
  %8 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 3, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = icmp ne i64 %7, 0
  %11 = icmp sgt i64 %9, -1
  %12 = and i1 %11, %10
  br i1 %12, label %13, label %19, !prof !3

13:                                               ; preds = %1
  %14 = udiv i64 %9, %7
  %15 = icmp sgt i64 %14, 0
  %16 = select i1 %15, i64 %14, i64 0
  %17 = icmp sgt i64 %14, -1
  %18 = select i1 %17, i64 %16, i64 9223372036854775807
  br label %22

19:                                               ; preds = %1
  %20 = select i1 %11, i64 9223372036854775807, i64 -9223372036854775808
  %21 = icmp eq i64 %7, 0
  br i1 %21, label %25, label %22

22:                                               ; preds = %13, %19
  %23 = phi i64 [ %18, %13 ], [ %20, %19 ]
  %24 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 1, i32 0, i32 0
  br label %38

25:                                               ; preds = %52, %19
  %26 = phi double [ 0.000000e+00, %19 ], [ %55, %52 ]
  %27 = uitofp i64 %7 to double
  %28 = fdiv double %26, %27
  %29 = tail call double @sqrt(double %28) #10
  %30 = fmul double %29, 1.000000e+06
  %31 = fcmp ult double %30, 0xC3E0000000000000
  %32 = fcmp ugt double %30, 0x43DFFFFFFFFFFFFF
  %33 = fcmp ogt double %30, 0xC3E0000000000000
  %34 = select i1 %33, double %30, double 0xC3E0000000000000
  %35 = fptosi double %34 to i64
  %36 = select i1 %31, i64 0, i64 9223372036854775807
  %37 = select i1 %32, i64 %36, i64 %35
  ret i64 %37

38:                                               ; preds = %22, %52
  %39 = phi i64 [ 0, %22 ], [ %56, %52 ]
  %40 = phi double [ 0.000000e+00, %22 ], [ %55, %52 ]
  %41 = load %"class.base::TimeDelta"*, %"class.base::TimeDelta"** %24, align 8
  %42 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %41, i64 %39
  %43 = tail call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* %42, i64 %23)
  %44 = add i64 %43, -9223372036854775807
  %45 = icmp ult i64 %44, 2
  br i1 %45, label %49, label %46

46:                                               ; preds = %38
  %47 = sitofp i64 %43 to double
  %48 = fdiv double %47, 1.000000e+06
  br label %52

49:                                               ; preds = %38
  %50 = icmp slt i64 %43, 0
  %51 = select i1 %50, double 0xFFF0000000000000, double 0x7FF0000000000000
  br label %52

52:                                               ; preds = %46, %49
  %53 = phi double [ %51, %49 ], [ %48, %46 ]
  %54 = fmul double %53, %53
  %55 = fadd double %40, %54
  %56 = add nuw i64 %39, 1
  %57 = icmp ult i64 %56, %7
  br i1 %57, label %38, label %25
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media13MovingAverage5ResetEv(%"class.media::MovingAverage"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 2
  %3 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 4, i32 0
  %4 = bitcast i64* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 16, i1 false)
  store i64 -9223372036854775808, i64* %3, align 8
  %5 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 1, i32 0, i32 0
  %6 = load %"class.base::TimeDelta"*, %"class.base::TimeDelta"** %5, align 8
  %7 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 1, i32 0, i32 1
  %8 = bitcast %"class.base::TimeDelta"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = ptrtoint %"class.base::TimeDelta"* %6 to i64
  %11 = sub i64 %9, %10
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %20

13:                                               ; preds = %1
  %14 = bitcast %"class.base::TimeDelta"* %6 to i8*
  %15 = and i64 %11, -8
  %16 = icmp ult i64 %11, 8
  %17 = sext i1 %16 to i64
  %18 = shl nsw i64 %17, 3
  %19 = sub i64 %15, %18
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 %19, i1 false)
  br label %20

20:                                               ; preds = %13, %1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZN5media13MovingAverage12GetMinAndMaxEv(%"class.media::MovingAverage"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load %"class.base::TimeDelta"*, %"class.base::TimeDelta"** %2, align 8
  %4 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %3, i64 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.media::MovingAverage", %"class.media::MovingAverage"* %0, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = icmp ult i64 %9, %7
  %11 = select i1 %10, i64 %9, i64 %7
  %12 = icmp ugt i64 %11, 1
  br i1 %12, label %13, label %41

13:                                               ; preds = %1
  %14 = add i64 %11, -1
  %15 = add i64 %11, -2
  %16 = and i64 %14, 3
  %17 = icmp ult i64 %15, 3
  br i1 %17, label %20, label %18

18:                                               ; preds = %13
  %19 = sub i64 %14, %16
  br label %46

20:                                               ; preds = %46, %13
  %21 = phi i64 [ undef, %13 ], [ %75, %46 ]
  %22 = phi i64 [ undef, %13 ], [ %77, %46 ]
  %23 = phi i64 [ 1, %13 ], [ %78, %46 ]
  %24 = phi i64 [ %5, %13 ], [ %77, %46 ]
  %25 = phi i64 [ %5, %13 ], [ %75, %46 ]
  %26 = icmp eq i64 %16, 0
  br i1 %26, label %41, label %27

27:                                               ; preds = %20, %27
  %28 = phi i64 [ %38, %27 ], [ %23, %20 ]
  %29 = phi i64 [ %37, %27 ], [ %24, %20 ]
  %30 = phi i64 [ %35, %27 ], [ %25, %20 ]
  %31 = phi i64 [ %39, %27 ], [ %16, %20 ]
  %32 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %3, i64 %28, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = icmp slt i64 %33, %30
  %35 = select i1 %34, i64 %33, i64 %30
  %36 = icmp sgt i64 %33, %29
  %37 = select i1 %36, i64 %33, i64 %29
  %38 = add nuw i64 %28, 1
  %39 = add i64 %31, -1
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %27, !llvm.loop !4

41:                                               ; preds = %20, %27, %1
  %42 = phi i64 [ %5, %1 ], [ %21, %20 ], [ %35, %27 ]
  %43 = phi i64 [ %5, %1 ], [ %22, %20 ], [ %37, %27 ]
  %44 = insertvalue { i64, i64 } undef, i64 %42, 0
  %45 = insertvalue { i64, i64 } %44, i64 %43, 1
  ret { i64, i64 } %45

46:                                               ; preds = %46, %18
  %47 = phi i64 [ 1, %18 ], [ %78, %46 ]
  %48 = phi i64 [ %5, %18 ], [ %77, %46 ]
  %49 = phi i64 [ %5, %18 ], [ %75, %46 ]
  %50 = phi i64 [ %19, %18 ], [ %79, %46 ]
  %51 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %3, i64 %47, i32 0
  %52 = load i64, i64* %51, align 8
  %53 = icmp slt i64 %52, %49
  %54 = select i1 %53, i64 %52, i64 %49
  %55 = icmp sgt i64 %52, %48
  %56 = select i1 %55, i64 %52, i64 %48
  %57 = add nuw nsw i64 %47, 1
  %58 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %3, i64 %57, i32 0
  %59 = load i64, i64* %58, align 8
  %60 = icmp slt i64 %59, %54
  %61 = select i1 %60, i64 %59, i64 %54
  %62 = icmp sgt i64 %59, %56
  %63 = select i1 %62, i64 %59, i64 %56
  %64 = add nuw nsw i64 %47, 2
  %65 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %3, i64 %64, i32 0
  %66 = load i64, i64* %65, align 8
  %67 = icmp slt i64 %66, %61
  %68 = select i1 %67, i64 %66, i64 %61
  %69 = icmp sgt i64 %66, %63
  %70 = select i1 %69, i64 %66, i64 %63
  %71 = add nuw i64 %47, 3
  %72 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %3, i64 %71, i32 0
  %73 = load i64, i64* %72, align 8
  %74 = icmp slt i64 %73, %68
  %75 = select i1 %74, i64 %73, i64 %68
  %76 = icmp sgt i64 %73, %70
  %77 = select i1 %76, i64 %73, i64 %70
  %78 = add nuw i64 %47, 4
  %79 = add i64 %50, -4
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %20, label %46
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #6

declare i8* @_ZN7logging15CheckOpValueStrEl(i64) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 2002}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
