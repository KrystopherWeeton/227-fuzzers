; ModuleID = '../../third_party/webrtc/common_audio/audio_util.cc'
source_filename = "../../third_party/webrtc/common_audio/audio_util.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc10FloatToS16EPKfmPs(float* nocapture readonly, i64, i16* nocapture) local_unnamed_addr #0 {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %98, label %5

5:                                                ; preds = %3
  %6 = icmp ult i64 %1, 4
  br i1 %6, label %7, label %29

7:                                                ; preds = %96, %29, %5
  %8 = phi i64 [ 0, %29 ], [ 0, %5 ], [ %38, %96 ]
  %9 = xor i64 %8, -1
  %10 = and i64 %1, 1
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %25, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds float, float* %0, i64 %8
  %14 = load float, float* %13, align 4
  %15 = fmul float %14, 3.276800e+04
  %16 = fcmp ogt float %15, 3.276700e+04
  %17 = select i1 %16, float 3.276700e+04, float %15
  %18 = fcmp olt float %17, -3.276800e+04
  %19 = select i1 %18, float -3.276800e+04, float %17
  %20 = tail call float @llvm.copysign.f32(float 5.000000e-01, float %19) #3
  %21 = fadd float %19, %20
  %22 = fptosi float %21 to i16
  %23 = getelementptr inbounds i16, i16* %2, i64 %8
  store i16 %22, i16* %23, align 2
  %24 = or i64 %8, 1
  br label %25

25:                                               ; preds = %7, %12
  %26 = phi i64 [ %8, %7 ], [ %24, %12 ]
  %27 = sub i64 0, %1
  %28 = icmp eq i64 %9, %27
  br i1 %28, label %98, label %99

29:                                               ; preds = %5
  %30 = getelementptr i16, i16* %2, i64 %1
  %31 = getelementptr float, float* %0, i64 %1
  %32 = bitcast float* %31 to i16*
  %33 = icmp ugt i16* %32, %2
  %34 = bitcast i16* %30 to float*
  %35 = icmp ugt float* %34, %0
  %36 = and i1 %33, %35
  br i1 %36, label %7, label %37

37:                                               ; preds = %29
  %38 = and i64 %1, -4
  %39 = add i64 %38, -4
  %40 = lshr exact i64 %39, 2
  %41 = add nuw nsw i64 %40, 1
  %42 = and i64 %41, 1
  %43 = icmp eq i64 %39, 0
  br i1 %43, label %79, label %44

44:                                               ; preds = %37
  %45 = sub nuw nsw i64 %41, %42
  br label %46

46:                                               ; preds = %46, %44
  %47 = phi i64 [ 0, %44 ], [ %76, %46 ]
  %48 = phi i64 [ %45, %44 ], [ %77, %46 ]
  %49 = getelementptr inbounds float, float* %0, i64 %47
  %50 = bitcast float* %49 to <4 x float>*
  %51 = load <4 x float>, <4 x float>* %50, align 4, !alias.scope !2
  %52 = fmul <4 x float> %51, <float 3.276800e+04, float 3.276800e+04, float 3.276800e+04, float 3.276800e+04>
  %53 = fcmp ogt <4 x float> %52, <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>
  %54 = select <4 x i1> %53, <4 x float> <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>, <4 x float> %52
  %55 = fcmp olt <4 x float> %54, <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>
  %56 = select <4 x i1> %55, <4 x float> <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>, <4 x float> %54
  %57 = call <4 x float> @llvm.copysign.v4f32(<4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, <4 x float> %56)
  %58 = fadd <4 x float> %56, %57
  %59 = fptosi <4 x float> %58 to <4 x i16>
  %60 = getelementptr inbounds i16, i16* %2, i64 %47
  %61 = bitcast i16* %60 to <4 x i16>*
  store <4 x i16> %59, <4 x i16>* %61, align 2, !alias.scope !5, !noalias !2
  %62 = or i64 %47, 4
  %63 = getelementptr inbounds float, float* %0, i64 %62
  %64 = bitcast float* %63 to <4 x float>*
  %65 = load <4 x float>, <4 x float>* %64, align 4, !alias.scope !2
  %66 = fmul <4 x float> %65, <float 3.276800e+04, float 3.276800e+04, float 3.276800e+04, float 3.276800e+04>
  %67 = fcmp ogt <4 x float> %66, <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>
  %68 = select <4 x i1> %67, <4 x float> <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>, <4 x float> %66
  %69 = fcmp olt <4 x float> %68, <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>
  %70 = select <4 x i1> %69, <4 x float> <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>, <4 x float> %68
  %71 = call <4 x float> @llvm.copysign.v4f32(<4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, <4 x float> %70)
  %72 = fadd <4 x float> %70, %71
  %73 = fptosi <4 x float> %72 to <4 x i16>
  %74 = getelementptr inbounds i16, i16* %2, i64 %62
  %75 = bitcast i16* %74 to <4 x i16>*
  store <4 x i16> %73, <4 x i16>* %75, align 2, !alias.scope !5, !noalias !2
  %76 = add i64 %47, 8
  %77 = add i64 %48, -2
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %46, !llvm.loop !7

79:                                               ; preds = %46, %37
  %80 = phi i64 [ 0, %37 ], [ %76, %46 ]
  %81 = icmp eq i64 %42, 0
  br i1 %81, label %96, label %82

82:                                               ; preds = %79
  %83 = getelementptr inbounds float, float* %0, i64 %80
  %84 = bitcast float* %83 to <4 x float>*
  %85 = load <4 x float>, <4 x float>* %84, align 4, !alias.scope !2
  %86 = fmul <4 x float> %85, <float 3.276800e+04, float 3.276800e+04, float 3.276800e+04, float 3.276800e+04>
  %87 = fcmp ogt <4 x float> %86, <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>
  %88 = select <4 x i1> %87, <4 x float> <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>, <4 x float> %86
  %89 = fcmp olt <4 x float> %88, <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>
  %90 = select <4 x i1> %89, <4 x float> <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>, <4 x float> %88
  %91 = call <4 x float> @llvm.copysign.v4f32(<4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, <4 x float> %90)
  %92 = fadd <4 x float> %90, %91
  %93 = fptosi <4 x float> %92 to <4 x i16>
  %94 = getelementptr inbounds i16, i16* %2, i64 %80
  %95 = bitcast i16* %94 to <4 x i16>*
  store <4 x i16> %93, <4 x i16>* %95, align 2, !alias.scope !5, !noalias !2
  br label %96

96:                                               ; preds = %79, %82
  %97 = icmp eq i64 %38, %1
  br i1 %97, label %98, label %7

98:                                               ; preds = %25, %99, %96, %3
  ret void

99:                                               ; preds = %25, %99
  %100 = phi i64 [ %124, %99 ], [ %26, %25 ]
  %101 = getelementptr inbounds float, float* %0, i64 %100
  %102 = load float, float* %101, align 4
  %103 = fmul float %102, 3.276800e+04
  %104 = fcmp ogt float %103, 3.276700e+04
  %105 = select i1 %104, float 3.276700e+04, float %103
  %106 = fcmp olt float %105, -3.276800e+04
  %107 = select i1 %106, float -3.276800e+04, float %105
  %108 = tail call float @llvm.copysign.f32(float 5.000000e-01, float %107) #3
  %109 = fadd float %107, %108
  %110 = fptosi float %109 to i16
  %111 = getelementptr inbounds i16, i16* %2, i64 %100
  store i16 %110, i16* %111, align 2
  %112 = add nuw i64 %100, 1
  %113 = getelementptr inbounds float, float* %0, i64 %112
  %114 = load float, float* %113, align 4
  %115 = fmul float %114, 3.276800e+04
  %116 = fcmp ogt float %115, 3.276700e+04
  %117 = select i1 %116, float 3.276700e+04, float %115
  %118 = fcmp olt float %117, -3.276800e+04
  %119 = select i1 %118, float -3.276800e+04, float %117
  %120 = tail call float @llvm.copysign.f32(float 5.000000e-01, float %119) #3
  %121 = fadd float %119, %120
  %122 = fptosi float %121 to i16
  %123 = getelementptr inbounds i16, i16* %2, i64 %112
  store i16 %122, i16* %123, align 2
  %124 = add nuw i64 %100, 2
  %125 = icmp eq i64 %124, %1
  br i1 %125, label %98, label %99, !llvm.loop !9
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6webrtc10S16ToFloatEPKsmPf(i16* nocapture readonly, i64, float* nocapture) local_unnamed_addr #1 {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %99, label %5

5:                                                ; preds = %3
  %6 = icmp ult i64 %1, 8
  br i1 %6, label %7, label %27

7:                                                ; preds = %97, %27, %5
  %8 = phi i64 [ 0, %27 ], [ 0, %5 ], [ %36, %97 ]
  %9 = xor i64 %8, -1
  %10 = add i64 %9, %1
  %11 = and i64 %1, 3
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %24, label %13

13:                                               ; preds = %7, %13
  %14 = phi i64 [ %21, %13 ], [ %8, %7 ]
  %15 = phi i64 [ %22, %13 ], [ %11, %7 ]
  %16 = getelementptr inbounds i16, i16* %0, i64 %14
  %17 = load i16, i16* %16, align 2
  %18 = sitofp i16 %17 to float
  %19 = fmul float %18, 0x3F00000000000000
  %20 = getelementptr inbounds float, float* %2, i64 %14
  store float %19, float* %20, align 4
  %21 = add nuw i64 %14, 1
  %22 = add i64 %15, -1
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %13, !llvm.loop !10

24:                                               ; preds = %13, %7
  %25 = phi i64 [ %8, %7 ], [ %21, %13 ]
  %26 = icmp ult i64 %10, 3
  br i1 %26, label %99, label %100

27:                                               ; preds = %5
  %28 = getelementptr float, float* %2, i64 %1
  %29 = getelementptr i16, i16* %0, i64 %1
  %30 = bitcast i16* %29 to float*
  %31 = icmp ugt float* %30, %2
  %32 = bitcast float* %28 to i16*
  %33 = icmp ugt i16* %32, %0
  %34 = and i1 %31, %33
  br i1 %34, label %7, label %35

35:                                               ; preds = %27
  %36 = and i64 %1, -8
  %37 = add i64 %36, -8
  %38 = lshr exact i64 %37, 3
  %39 = add nuw nsw i64 %38, 1
  %40 = and i64 %39, 1
  %41 = icmp eq i64 %37, 0
  br i1 %41, label %79, label %42

42:                                               ; preds = %35
  %43 = sub nuw nsw i64 %39, %40
  br label %44

44:                                               ; preds = %44, %42
  %45 = phi i64 [ 0, %42 ], [ %76, %44 ]
  %46 = phi i64 [ %43, %42 ], [ %77, %44 ]
  %47 = getelementptr inbounds i16, i16* %0, i64 %45
  %48 = bitcast i16* %47 to <4 x i16>*
  %49 = load <4 x i16>, <4 x i16>* %48, align 2, !alias.scope !12
  %50 = getelementptr inbounds i16, i16* %47, i64 4
  %51 = bitcast i16* %50 to <4 x i16>*
  %52 = load <4 x i16>, <4 x i16>* %51, align 2, !alias.scope !12
  %53 = sitofp <4 x i16> %49 to <4 x float>
  %54 = sitofp <4 x i16> %52 to <4 x float>
  %55 = fmul <4 x float> %53, <float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000>
  %56 = fmul <4 x float> %54, <float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000>
  %57 = getelementptr inbounds float, float* %2, i64 %45
  %58 = bitcast float* %57 to <4 x float>*
  store <4 x float> %55, <4 x float>* %58, align 4, !alias.scope !15, !noalias !12
  %59 = getelementptr inbounds float, float* %57, i64 4
  %60 = bitcast float* %59 to <4 x float>*
  store <4 x float> %56, <4 x float>* %60, align 4, !alias.scope !15, !noalias !12
  %61 = or i64 %45, 8
  %62 = getelementptr inbounds i16, i16* %0, i64 %61
  %63 = bitcast i16* %62 to <4 x i16>*
  %64 = load <4 x i16>, <4 x i16>* %63, align 2, !alias.scope !12
  %65 = getelementptr inbounds i16, i16* %62, i64 4
  %66 = bitcast i16* %65 to <4 x i16>*
  %67 = load <4 x i16>, <4 x i16>* %66, align 2, !alias.scope !12
  %68 = sitofp <4 x i16> %64 to <4 x float>
  %69 = sitofp <4 x i16> %67 to <4 x float>
  %70 = fmul <4 x float> %68, <float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000>
  %71 = fmul <4 x float> %69, <float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000>
  %72 = getelementptr inbounds float, float* %2, i64 %61
  %73 = bitcast float* %72 to <4 x float>*
  store <4 x float> %70, <4 x float>* %73, align 4, !alias.scope !15, !noalias !12
  %74 = getelementptr inbounds float, float* %72, i64 4
  %75 = bitcast float* %74 to <4 x float>*
  store <4 x float> %71, <4 x float>* %75, align 4, !alias.scope !15, !noalias !12
  %76 = add i64 %45, 16
  %77 = add i64 %46, -2
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %44, !llvm.loop !17

79:                                               ; preds = %44, %35
  %80 = phi i64 [ 0, %35 ], [ %76, %44 ]
  %81 = icmp eq i64 %40, 0
  br i1 %81, label %97, label %82

82:                                               ; preds = %79
  %83 = getelementptr inbounds i16, i16* %0, i64 %80
  %84 = bitcast i16* %83 to <4 x i16>*
  %85 = load <4 x i16>, <4 x i16>* %84, align 2, !alias.scope !12
  %86 = getelementptr inbounds i16, i16* %83, i64 4
  %87 = bitcast i16* %86 to <4 x i16>*
  %88 = load <4 x i16>, <4 x i16>* %87, align 2, !alias.scope !12
  %89 = sitofp <4 x i16> %85 to <4 x float>
  %90 = sitofp <4 x i16> %88 to <4 x float>
  %91 = fmul <4 x float> %89, <float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000>
  %92 = fmul <4 x float> %90, <float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000>
  %93 = getelementptr inbounds float, float* %2, i64 %80
  %94 = bitcast float* %93 to <4 x float>*
  store <4 x float> %91, <4 x float>* %94, align 4, !alias.scope !15, !noalias !12
  %95 = getelementptr inbounds float, float* %93, i64 4
  %96 = bitcast float* %95 to <4 x float>*
  store <4 x float> %92, <4 x float>* %96, align 4, !alias.scope !15, !noalias !12
  br label %97

97:                                               ; preds = %79, %82
  %98 = icmp eq i64 %36, %1
  br i1 %98, label %99, label %7

99:                                               ; preds = %24, %100, %97, %3
  ret void

100:                                              ; preds = %24, %100
  %101 = phi i64 [ %125, %100 ], [ %25, %24 ]
  %102 = getelementptr inbounds i16, i16* %0, i64 %101
  %103 = load i16, i16* %102, align 2
  %104 = sitofp i16 %103 to float
  %105 = fmul float %104, 0x3F00000000000000
  %106 = getelementptr inbounds float, float* %2, i64 %101
  store float %105, float* %106, align 4
  %107 = add nuw i64 %101, 1
  %108 = getelementptr inbounds i16, i16* %0, i64 %107
  %109 = load i16, i16* %108, align 2
  %110 = sitofp i16 %109 to float
  %111 = fmul float %110, 0x3F00000000000000
  %112 = getelementptr inbounds float, float* %2, i64 %107
  store float %111, float* %112, align 4
  %113 = add nuw i64 %101, 2
  %114 = getelementptr inbounds i16, i16* %0, i64 %113
  %115 = load i16, i16* %114, align 2
  %116 = sitofp i16 %115 to float
  %117 = fmul float %116, 0x3F00000000000000
  %118 = getelementptr inbounds float, float* %2, i64 %113
  store float %117, float* %118, align 4
  %119 = add nuw i64 %101, 3
  %120 = getelementptr inbounds i16, i16* %0, i64 %119
  %121 = load i16, i16* %120, align 2
  %122 = sitofp i16 %121 to float
  %123 = fmul float %122, 0x3F00000000000000
  %124 = getelementptr inbounds float, float* %2, i64 %119
  store float %123, float* %124, align 4
  %125 = add nuw i64 %101, 4
  %126 = icmp eq i64 %125, %1
  br i1 %126, label %99, label %100, !llvm.loop !18
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6webrtc13S16ToFloatS16EPKsmPf(i16* nocapture readonly, i64, float* nocapture) local_unnamed_addr #1 {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %92, label %5

5:                                                ; preds = %3
  %6 = icmp ult i64 %1, 8
  br i1 %6, label %7, label %26

7:                                                ; preds = %90, %26, %5
  %8 = phi i64 [ 0, %26 ], [ 0, %5 ], [ %35, %90 ]
  %9 = xor i64 %8, -1
  %10 = add i64 %9, %1
  %11 = and i64 %1, 3
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %23, label %13

13:                                               ; preds = %7, %13
  %14 = phi i64 [ %20, %13 ], [ %8, %7 ]
  %15 = phi i64 [ %21, %13 ], [ %11, %7 ]
  %16 = getelementptr inbounds i16, i16* %0, i64 %14
  %17 = load i16, i16* %16, align 2
  %18 = sitofp i16 %17 to float
  %19 = getelementptr inbounds float, float* %2, i64 %14
  store float %18, float* %19, align 4
  %20 = add nuw i64 %14, 1
  %21 = add i64 %15, -1
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %23, label %13, !llvm.loop !19

23:                                               ; preds = %13, %7
  %24 = phi i64 [ %8, %7 ], [ %20, %13 ]
  %25 = icmp ult i64 %10, 3
  br i1 %25, label %92, label %93

26:                                               ; preds = %5
  %27 = getelementptr float, float* %2, i64 %1
  %28 = getelementptr i16, i16* %0, i64 %1
  %29 = bitcast i16* %28 to float*
  %30 = icmp ugt float* %29, %2
  %31 = bitcast float* %27 to i16*
  %32 = icmp ugt i16* %31, %0
  %33 = and i1 %30, %32
  br i1 %33, label %7, label %34

34:                                               ; preds = %26
  %35 = and i64 %1, -8
  %36 = add i64 %35, -8
  %37 = lshr exact i64 %36, 3
  %38 = add nuw nsw i64 %37, 1
  %39 = and i64 %38, 1
  %40 = icmp eq i64 %36, 0
  br i1 %40, label %74, label %41

41:                                               ; preds = %34
  %42 = sub nuw nsw i64 %38, %39
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi i64 [ 0, %41 ], [ %71, %43 ]
  %45 = phi i64 [ %42, %41 ], [ %72, %43 ]
  %46 = getelementptr inbounds i16, i16* %0, i64 %44
  %47 = bitcast i16* %46 to <4 x i16>*
  %48 = load <4 x i16>, <4 x i16>* %47, align 2, !alias.scope !20
  %49 = getelementptr inbounds i16, i16* %46, i64 4
  %50 = bitcast i16* %49 to <4 x i16>*
  %51 = load <4 x i16>, <4 x i16>* %50, align 2, !alias.scope !20
  %52 = sitofp <4 x i16> %48 to <4 x float>
  %53 = sitofp <4 x i16> %51 to <4 x float>
  %54 = getelementptr inbounds float, float* %2, i64 %44
  %55 = bitcast float* %54 to <4 x float>*
  store <4 x float> %52, <4 x float>* %55, align 4, !alias.scope !23, !noalias !20
  %56 = getelementptr inbounds float, float* %54, i64 4
  %57 = bitcast float* %56 to <4 x float>*
  store <4 x float> %53, <4 x float>* %57, align 4, !alias.scope !23, !noalias !20
  %58 = or i64 %44, 8
  %59 = getelementptr inbounds i16, i16* %0, i64 %58
  %60 = bitcast i16* %59 to <4 x i16>*
  %61 = load <4 x i16>, <4 x i16>* %60, align 2, !alias.scope !20
  %62 = getelementptr inbounds i16, i16* %59, i64 4
  %63 = bitcast i16* %62 to <4 x i16>*
  %64 = load <4 x i16>, <4 x i16>* %63, align 2, !alias.scope !20
  %65 = sitofp <4 x i16> %61 to <4 x float>
  %66 = sitofp <4 x i16> %64 to <4 x float>
  %67 = getelementptr inbounds float, float* %2, i64 %58
  %68 = bitcast float* %67 to <4 x float>*
  store <4 x float> %65, <4 x float>* %68, align 4, !alias.scope !23, !noalias !20
  %69 = getelementptr inbounds float, float* %67, i64 4
  %70 = bitcast float* %69 to <4 x float>*
  store <4 x float> %66, <4 x float>* %70, align 4, !alias.scope !23, !noalias !20
  %71 = add i64 %44, 16
  %72 = add i64 %45, -2
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %43, !llvm.loop !25

74:                                               ; preds = %43, %34
  %75 = phi i64 [ 0, %34 ], [ %71, %43 ]
  %76 = icmp eq i64 %39, 0
  br i1 %76, label %90, label %77

77:                                               ; preds = %74
  %78 = getelementptr inbounds i16, i16* %0, i64 %75
  %79 = bitcast i16* %78 to <4 x i16>*
  %80 = load <4 x i16>, <4 x i16>* %79, align 2, !alias.scope !20
  %81 = getelementptr inbounds i16, i16* %78, i64 4
  %82 = bitcast i16* %81 to <4 x i16>*
  %83 = load <4 x i16>, <4 x i16>* %82, align 2, !alias.scope !20
  %84 = sitofp <4 x i16> %80 to <4 x float>
  %85 = sitofp <4 x i16> %83 to <4 x float>
  %86 = getelementptr inbounds float, float* %2, i64 %75
  %87 = bitcast float* %86 to <4 x float>*
  store <4 x float> %84, <4 x float>* %87, align 4, !alias.scope !23, !noalias !20
  %88 = getelementptr inbounds float, float* %86, i64 4
  %89 = bitcast float* %88 to <4 x float>*
  store <4 x float> %85, <4 x float>* %89, align 4, !alias.scope !23, !noalias !20
  br label %90

90:                                               ; preds = %74, %77
  %91 = icmp eq i64 %35, %1
  br i1 %91, label %92, label %7

92:                                               ; preds = %23, %93, %90, %3
  ret void

93:                                               ; preds = %23, %93
  %94 = phi i64 [ %114, %93 ], [ %24, %23 ]
  %95 = getelementptr inbounds i16, i16* %0, i64 %94
  %96 = load i16, i16* %95, align 2
  %97 = sitofp i16 %96 to float
  %98 = getelementptr inbounds float, float* %2, i64 %94
  store float %97, float* %98, align 4
  %99 = add nuw i64 %94, 1
  %100 = getelementptr inbounds i16, i16* %0, i64 %99
  %101 = load i16, i16* %100, align 2
  %102 = sitofp i16 %101 to float
  %103 = getelementptr inbounds float, float* %2, i64 %99
  store float %102, float* %103, align 4
  %104 = add nuw i64 %94, 2
  %105 = getelementptr inbounds i16, i16* %0, i64 %104
  %106 = load i16, i16* %105, align 2
  %107 = sitofp i16 %106 to float
  %108 = getelementptr inbounds float, float* %2, i64 %104
  store float %107, float* %108, align 4
  %109 = add nuw i64 %94, 3
  %110 = getelementptr inbounds i16, i16* %0, i64 %109
  %111 = load i16, i16* %110, align 2
  %112 = sitofp i16 %111 to float
  %113 = getelementptr inbounds float, float* %2, i64 %109
  store float %112, float* %113, align 4
  %114 = add nuw i64 %94, 4
  %115 = icmp eq i64 %114, %1
  br i1 %115, label %92, label %93, !llvm.loop !26
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc13FloatS16ToS16EPKfmPs(float* nocapture readonly, i64, i16* nocapture) local_unnamed_addr #0 {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %68, label %5

5:                                                ; preds = %3
  %6 = icmp ult i64 %1, 8
  br i1 %6, label %7, label %28

7:                                                ; preds = %66, %28, %5
  %8 = phi i64 [ 0, %28 ], [ 0, %5 ], [ %37, %66 ]
  %9 = xor i64 %8, -1
  %10 = and i64 %1, 1
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %24, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds float, float* %0, i64 %8
  %14 = load float, float* %13, align 4
  %15 = fcmp ogt float %14, 3.276700e+04
  %16 = select i1 %15, float 3.276700e+04, float %14
  %17 = fcmp olt float %16, -3.276800e+04
  %18 = select i1 %17, float -3.276800e+04, float %16
  %19 = tail call float @llvm.copysign.f32(float 5.000000e-01, float %18) #3
  %20 = fadd float %18, %19
  %21 = fptosi float %20 to i16
  %22 = getelementptr inbounds i16, i16* %2, i64 %8
  store i16 %21, i16* %22, align 2
  %23 = or i64 %8, 1
  br label %24

24:                                               ; preds = %7, %12
  %25 = phi i64 [ %8, %7 ], [ %23, %12 ]
  %26 = sub i64 0, %1
  %27 = icmp eq i64 %9, %26
  br i1 %27, label %68, label %69

28:                                               ; preds = %5
  %29 = getelementptr i16, i16* %2, i64 %1
  %30 = getelementptr float, float* %0, i64 %1
  %31 = bitcast float* %30 to i16*
  %32 = icmp ugt i16* %31, %2
  %33 = bitcast i16* %29 to float*
  %34 = icmp ugt float* %33, %0
  %35 = and i1 %32, %34
  br i1 %35, label %7, label %36

36:                                               ; preds = %28
  %37 = and i64 %1, -8
  br label %38

38:                                               ; preds = %38, %36
  %39 = phi i64 [ 0, %36 ], [ %64, %38 ]
  %40 = getelementptr inbounds float, float* %0, i64 %39
  %41 = bitcast float* %40 to <4 x float>*
  %42 = load <4 x float>, <4 x float>* %41, align 4, !alias.scope !27
  %43 = getelementptr inbounds float, float* %40, i64 4
  %44 = bitcast float* %43 to <4 x float>*
  %45 = load <4 x float>, <4 x float>* %44, align 4, !alias.scope !27
  %46 = fcmp ogt <4 x float> %42, <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>
  %47 = fcmp ogt <4 x float> %45, <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>
  %48 = select <4 x i1> %46, <4 x float> <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>, <4 x float> %42
  %49 = select <4 x i1> %47, <4 x float> <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>, <4 x float> %45
  %50 = fcmp olt <4 x float> %48, <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>
  %51 = fcmp olt <4 x float> %49, <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>
  %52 = select <4 x i1> %50, <4 x float> <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>, <4 x float> %48
  %53 = select <4 x i1> %51, <4 x float> <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>, <4 x float> %49
  %54 = call <4 x float> @llvm.copysign.v4f32(<4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, <4 x float> %52)
  %55 = call <4 x float> @llvm.copysign.v4f32(<4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, <4 x float> %53)
  %56 = fadd <4 x float> %52, %54
  %57 = fadd <4 x float> %53, %55
  %58 = fptosi <4 x float> %56 to <4 x i16>
  %59 = fptosi <4 x float> %57 to <4 x i16>
  %60 = getelementptr inbounds i16, i16* %2, i64 %39
  %61 = bitcast i16* %60 to <4 x i16>*
  store <4 x i16> %58, <4 x i16>* %61, align 2, !alias.scope !30, !noalias !27
  %62 = getelementptr inbounds i16, i16* %60, i64 4
  %63 = bitcast i16* %62 to <4 x i16>*
  store <4 x i16> %59, <4 x i16>* %63, align 2, !alias.scope !30, !noalias !27
  %64 = add i64 %39, 8
  %65 = icmp eq i64 %64, %37
  br i1 %65, label %66, label %38, !llvm.loop !32

66:                                               ; preds = %38
  %67 = icmp eq i64 %37, %1
  br i1 %67, label %68, label %7

68:                                               ; preds = %24, %69, %66, %3
  ret void

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %92, %69 ], [ %25, %24 ]
  %71 = getelementptr inbounds float, float* %0, i64 %70
  %72 = load float, float* %71, align 4
  %73 = fcmp ogt float %72, 3.276700e+04
  %74 = select i1 %73, float 3.276700e+04, float %72
  %75 = fcmp olt float %74, -3.276800e+04
  %76 = select i1 %75, float -3.276800e+04, float %74
  %77 = tail call float @llvm.copysign.f32(float 5.000000e-01, float %76) #3
  %78 = fadd float %76, %77
  %79 = fptosi float %78 to i16
  %80 = getelementptr inbounds i16, i16* %2, i64 %70
  store i16 %79, i16* %80, align 2
  %81 = add nuw i64 %70, 1
  %82 = getelementptr inbounds float, float* %0, i64 %81
  %83 = load float, float* %82, align 4
  %84 = fcmp ogt float %83, 3.276700e+04
  %85 = select i1 %84, float 3.276700e+04, float %83
  %86 = fcmp olt float %85, -3.276800e+04
  %87 = select i1 %86, float -3.276800e+04, float %85
  %88 = tail call float @llvm.copysign.f32(float 5.000000e-01, float %87) #3
  %89 = fadd float %87, %88
  %90 = fptosi float %89 to i16
  %91 = getelementptr inbounds i16, i16* %2, i64 %81
  store i16 %90, i16* %91, align 2
  %92 = add nuw i64 %70, 2
  %93 = icmp eq i64 %92, %1
  br i1 %93, label %68, label %69, !llvm.loop !33
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc15FloatToFloatS16EPKfmPf(float* nocapture readonly, i64, float* nocapture) local_unnamed_addr #0 {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %60, label %5

5:                                                ; preds = %3
  %6 = icmp ult i64 %1, 8
  br i1 %6, label %7, label %26

7:                                                ; preds = %58, %26, %5
  %8 = phi i64 [ 0, %26 ], [ 0, %5 ], [ %33, %58 ]
  %9 = xor i64 %8, -1
  %10 = and i64 %1, 1
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %22, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds float, float* %0, i64 %8
  %14 = load float, float* %13, align 4
  %15 = fcmp ogt float %14, 1.000000e+00
  %16 = select i1 %15, float 1.000000e+00, float %14
  %17 = fcmp olt float %16, -1.000000e+00
  %18 = fmul float %16, 3.276800e+04
  %19 = select i1 %17, float -3.276800e+04, float %18
  %20 = getelementptr inbounds float, float* %2, i64 %8
  store float %19, float* %20, align 4
  %21 = or i64 %8, 1
  br label %22

22:                                               ; preds = %7, %12
  %23 = phi i64 [ %8, %7 ], [ %21, %12 ]
  %24 = sub i64 0, %1
  %25 = icmp eq i64 %9, %24
  br i1 %25, label %60, label %61

26:                                               ; preds = %5
  %27 = getelementptr float, float* %2, i64 %1
  %28 = getelementptr float, float* %0, i64 %1
  %29 = icmp ugt float* %28, %2
  %30 = icmp ugt float* %27, %0
  %31 = and i1 %29, %30
  br i1 %31, label %7, label %32

32:                                               ; preds = %26
  %33 = and i64 %1, -8
  br label %34

34:                                               ; preds = %34, %32
  %35 = phi i64 [ 0, %32 ], [ %56, %34 ]
  %36 = getelementptr inbounds float, float* %0, i64 %35
  %37 = bitcast float* %36 to <4 x float>*
  %38 = load <4 x float>, <4 x float>* %37, align 4, !alias.scope !34
  %39 = getelementptr inbounds float, float* %36, i64 4
  %40 = bitcast float* %39 to <4 x float>*
  %41 = load <4 x float>, <4 x float>* %40, align 4, !alias.scope !34
  %42 = fcmp ogt <4 x float> %38, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %43 = fcmp ogt <4 x float> %41, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %44 = select <4 x i1> %42, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %38
  %45 = select <4 x i1> %43, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %41
  %46 = fcmp olt <4 x float> %44, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %47 = fcmp olt <4 x float> %45, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %48 = fmul <4 x float> %44, <float 3.276800e+04, float 3.276800e+04, float 3.276800e+04, float 3.276800e+04>
  %49 = fmul <4 x float> %45, <float 3.276800e+04, float 3.276800e+04, float 3.276800e+04, float 3.276800e+04>
  %50 = select <4 x i1> %46, <4 x float> <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>, <4 x float> %48
  %51 = select <4 x i1> %47, <4 x float> <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>, <4 x float> %49
  %52 = getelementptr inbounds float, float* %2, i64 %35
  %53 = bitcast float* %52 to <4 x float>*
  store <4 x float> %50, <4 x float>* %53, align 4, !alias.scope !37, !noalias !34
  %54 = getelementptr inbounds float, float* %52, i64 4
  %55 = bitcast float* %54 to <4 x float>*
  store <4 x float> %51, <4 x float>* %55, align 4, !alias.scope !37, !noalias !34
  %56 = add i64 %35, 8
  %57 = icmp eq i64 %56, %33
  br i1 %57, label %58, label %34, !llvm.loop !39

58:                                               ; preds = %34
  %59 = icmp eq i64 %33, %1
  br i1 %59, label %60, label %7

60:                                               ; preds = %22, %61, %58, %3
  ret void

61:                                               ; preds = %22, %61
  %62 = phi i64 [ %80, %61 ], [ %23, %22 ]
  %63 = getelementptr inbounds float, float* %0, i64 %62
  %64 = load float, float* %63, align 4
  %65 = fcmp ogt float %64, 1.000000e+00
  %66 = select i1 %65, float 1.000000e+00, float %64
  %67 = fcmp olt float %66, -1.000000e+00
  %68 = fmul float %66, 3.276800e+04
  %69 = select i1 %67, float -3.276800e+04, float %68
  %70 = getelementptr inbounds float, float* %2, i64 %62
  store float %69, float* %70, align 4
  %71 = add nuw i64 %62, 1
  %72 = getelementptr inbounds float, float* %0, i64 %71
  %73 = load float, float* %72, align 4
  %74 = fcmp ogt float %73, 1.000000e+00
  %75 = select i1 %74, float 1.000000e+00, float %73
  %76 = fcmp olt float %75, -1.000000e+00
  %77 = fmul float %75, 3.276800e+04
  %78 = select i1 %76, float -3.276800e+04, float %77
  %79 = getelementptr inbounds float, float* %2, i64 %71
  store float %78, float* %79, align 4
  %80 = add nuw i64 %62, 2
  %81 = icmp eq i64 %80, %1
  br i1 %81, label %60, label %61, !llvm.loop !40
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc15FloatS16ToFloatEPKfmPf(float* nocapture readonly, i64, float* nocapture) local_unnamed_addr #0 {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %60, label %5

5:                                                ; preds = %3
  %6 = icmp ult i64 %1, 8
  br i1 %6, label %7, label %26

7:                                                ; preds = %58, %26, %5
  %8 = phi i64 [ 0, %26 ], [ 0, %5 ], [ %33, %58 ]
  %9 = xor i64 %8, -1
  %10 = and i64 %1, 1
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %22, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds float, float* %0, i64 %8
  %14 = load float, float* %13, align 4
  %15 = fcmp ogt float %14, 3.276800e+04
  %16 = select i1 %15, float 3.276800e+04, float %14
  %17 = fcmp olt float %16, -3.276800e+04
  %18 = fmul float %16, 0x3F00000000000000
  %19 = select i1 %17, float -1.000000e+00, float %18
  %20 = getelementptr inbounds float, float* %2, i64 %8
  store float %19, float* %20, align 4
  %21 = or i64 %8, 1
  br label %22

22:                                               ; preds = %7, %12
  %23 = phi i64 [ %8, %7 ], [ %21, %12 ]
  %24 = sub i64 0, %1
  %25 = icmp eq i64 %9, %24
  br i1 %25, label %60, label %61

26:                                               ; preds = %5
  %27 = getelementptr float, float* %2, i64 %1
  %28 = getelementptr float, float* %0, i64 %1
  %29 = icmp ugt float* %28, %2
  %30 = icmp ugt float* %27, %0
  %31 = and i1 %29, %30
  br i1 %31, label %7, label %32

32:                                               ; preds = %26
  %33 = and i64 %1, -8
  br label %34

34:                                               ; preds = %34, %32
  %35 = phi i64 [ 0, %32 ], [ %56, %34 ]
  %36 = getelementptr inbounds float, float* %0, i64 %35
  %37 = bitcast float* %36 to <4 x float>*
  %38 = load <4 x float>, <4 x float>* %37, align 4, !alias.scope !41
  %39 = getelementptr inbounds float, float* %36, i64 4
  %40 = bitcast float* %39 to <4 x float>*
  %41 = load <4 x float>, <4 x float>* %40, align 4, !alias.scope !41
  %42 = fcmp ogt <4 x float> %38, <float 3.276800e+04, float 3.276800e+04, float 3.276800e+04, float 3.276800e+04>
  %43 = fcmp ogt <4 x float> %41, <float 3.276800e+04, float 3.276800e+04, float 3.276800e+04, float 3.276800e+04>
  %44 = select <4 x i1> %42, <4 x float> <float 3.276800e+04, float 3.276800e+04, float 3.276800e+04, float 3.276800e+04>, <4 x float> %38
  %45 = select <4 x i1> %43, <4 x float> <float 3.276800e+04, float 3.276800e+04, float 3.276800e+04, float 3.276800e+04>, <4 x float> %41
  %46 = fcmp olt <4 x float> %44, <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>
  %47 = fcmp olt <4 x float> %45, <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>
  %48 = fmul <4 x float> %44, <float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000>
  %49 = fmul <4 x float> %45, <float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000>
  %50 = select <4 x i1> %46, <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float> %48
  %51 = select <4 x i1> %47, <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float> %49
  %52 = getelementptr inbounds float, float* %2, i64 %35
  %53 = bitcast float* %52 to <4 x float>*
  store <4 x float> %50, <4 x float>* %53, align 4, !alias.scope !44, !noalias !41
  %54 = getelementptr inbounds float, float* %52, i64 4
  %55 = bitcast float* %54 to <4 x float>*
  store <4 x float> %51, <4 x float>* %55, align 4, !alias.scope !44, !noalias !41
  %56 = add i64 %35, 8
  %57 = icmp eq i64 %56, %33
  br i1 %57, label %58, label %34, !llvm.loop !46

58:                                               ; preds = %34
  %59 = icmp eq i64 %33, %1
  br i1 %59, label %60, label %7

60:                                               ; preds = %22, %61, %58, %3
  ret void

61:                                               ; preds = %22, %61
  %62 = phi i64 [ %80, %61 ], [ %23, %22 ]
  %63 = getelementptr inbounds float, float* %0, i64 %62
  %64 = load float, float* %63, align 4
  %65 = fcmp ogt float %64, 3.276800e+04
  %66 = select i1 %65, float 3.276800e+04, float %64
  %67 = fcmp olt float %66, -3.276800e+04
  %68 = fmul float %66, 0x3F00000000000000
  %69 = select i1 %67, float -1.000000e+00, float %68
  %70 = getelementptr inbounds float, float* %2, i64 %62
  store float %69, float* %70, align 4
  %71 = add nuw i64 %62, 1
  %72 = getelementptr inbounds float, float* %0, i64 %71
  %73 = load float, float* %72, align 4
  %74 = fcmp ogt float %73, 3.276800e+04
  %75 = select i1 %74, float 3.276800e+04, float %73
  %76 = fcmp olt float %75, -3.276800e+04
  %77 = fmul float %75, 0x3F00000000000000
  %78 = select i1 %76, float -1.000000e+00, float %77
  %79 = getelementptr inbounds float, float* %2, i64 %71
  store float %78, float* %79, align 4
  %80 = add nuw i64 %62, 2
  %81 = icmp eq i64 %80, %1
  br i1 %81, label %60, label %61, !llvm.loop !47
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6webrtc24DownmixInterleavedToMonoIsEEvPKT_miPS1_(i16* readonly, i64, i32, i16* nocapture) local_unnamed_addr #1 {
  %5 = sext i32 %2 to i64
  %6 = mul i64 %5, %1
  %7 = getelementptr inbounds i16, i16* %0, i64 %6
  %8 = icmp sgt i64 %6, 0
  br i1 %8, label %9, label %118

9:                                                ; preds = %4
  %10 = icmp sgt i32 %2, 1
  br label %11

11:                                               ; preds = %111, %9
  %12 = phi i16* [ %116, %111 ], [ %3, %9 ]
  %13 = phi i16* [ %113, %111 ], [ %0, %9 ]
  %14 = getelementptr inbounds i16, i16* %13, i64 %5
  %15 = load i16, i16* %13, align 2
  %16 = sext i16 %15 to i32
  %17 = getelementptr inbounds i16, i16* %13, i64 1
  br i1 %10, label %18, label %111

18:                                               ; preds = %11
  %19 = ptrtoint i16* %13 to i64
  %20 = getelementptr i16, i16* %13, i64 2
  %21 = icmp ugt i16* %14, %20
  %22 = select i1 %21, i16* %14, i16* %20
  %23 = getelementptr i16, i16* %22, i64 -1
  %24 = bitcast i16* %23 to i8*
  %25 = getelementptr i8, i8* %24, i64 -1
  %26 = sub i64 0, %19
  %27 = getelementptr i8, i8* %25, i64 %26
  %28 = ptrtoint i8* %27 to i64
  %29 = lshr i64 %28, 1
  %30 = add nuw i64 %29, 1
  %31 = icmp ult i64 %30, 8
  br i1 %31, label %100, label %32

32:                                               ; preds = %18
  %33 = and i64 %30, -8
  %34 = getelementptr i16, i16* %17, i64 %33
  %35 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %16, i32 0
  %36 = add i64 %33, -8
  %37 = lshr exact i64 %36, 3
  %38 = add nuw nsw i64 %37, 1
  %39 = and i64 %38, 1
  %40 = icmp eq i64 %36, 0
  br i1 %40, label %72, label %41

41:                                               ; preds = %32
  %42 = sub nuw nsw i64 %38, %39
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi i64 [ 0, %41 ], [ %69, %43 ]
  %45 = phi <4 x i32> [ %35, %41 ], [ %67, %43 ]
  %46 = phi <4 x i32> [ zeroinitializer, %41 ], [ %68, %43 ]
  %47 = phi i64 [ %42, %41 ], [ %70, %43 ]
  %48 = getelementptr i16, i16* %17, i64 %44
  %49 = bitcast i16* %48 to <4 x i16>*
  %50 = load <4 x i16>, <4 x i16>* %49, align 2
  %51 = getelementptr i16, i16* %48, i64 4
  %52 = bitcast i16* %51 to <4 x i16>*
  %53 = load <4 x i16>, <4 x i16>* %52, align 2
  %54 = sext <4 x i16> %50 to <4 x i32>
  %55 = sext <4 x i16> %53 to <4 x i32>
  %56 = add nsw <4 x i32> %45, %54
  %57 = add nsw <4 x i32> %46, %55
  %58 = or i64 %44, 8
  %59 = getelementptr i16, i16* %17, i64 %58
  %60 = bitcast i16* %59 to <4 x i16>*
  %61 = load <4 x i16>, <4 x i16>* %60, align 2
  %62 = getelementptr i16, i16* %59, i64 4
  %63 = bitcast i16* %62 to <4 x i16>*
  %64 = load <4 x i16>, <4 x i16>* %63, align 2
  %65 = sext <4 x i16> %61 to <4 x i32>
  %66 = sext <4 x i16> %64 to <4 x i32>
  %67 = add nsw <4 x i32> %56, %65
  %68 = add nsw <4 x i32> %57, %66
  %69 = add i64 %44, 16
  %70 = add i64 %47, -2
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %43, !llvm.loop !48

72:                                               ; preds = %43, %32
  %73 = phi <4 x i32> [ undef, %32 ], [ %67, %43 ]
  %74 = phi <4 x i32> [ undef, %32 ], [ %68, %43 ]
  %75 = phi i64 [ 0, %32 ], [ %69, %43 ]
  %76 = phi <4 x i32> [ %35, %32 ], [ %67, %43 ]
  %77 = phi <4 x i32> [ zeroinitializer, %32 ], [ %68, %43 ]
  %78 = icmp eq i64 %39, 0
  br i1 %78, label %90, label %79

79:                                               ; preds = %72
  %80 = getelementptr i16, i16* %17, i64 %75
  %81 = getelementptr i16, i16* %80, i64 4
  %82 = bitcast i16* %81 to <4 x i16>*
  %83 = load <4 x i16>, <4 x i16>* %82, align 2
  %84 = sext <4 x i16> %83 to <4 x i32>
  %85 = add nsw <4 x i32> %77, %84
  %86 = bitcast i16* %80 to <4 x i16>*
  %87 = load <4 x i16>, <4 x i16>* %86, align 2
  %88 = sext <4 x i16> %87 to <4 x i32>
  %89 = add nsw <4 x i32> %76, %88
  br label %90

90:                                               ; preds = %72, %79
  %91 = phi <4 x i32> [ %73, %72 ], [ %89, %79 ]
  %92 = phi <4 x i32> [ %74, %72 ], [ %85, %79 ]
  %93 = add <4 x i32> %92, %91
  %94 = shufflevector <4 x i32> %93, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %95 = add <4 x i32> %93, %94
  %96 = shufflevector <4 x i32> %95, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %97 = add <4 x i32> %95, %96
  %98 = extractelement <4 x i32> %97, i32 0
  %99 = icmp eq i64 %30, %33
  br i1 %99, label %111, label %100

100:                                              ; preds = %90, %18
  %101 = phi i16* [ %17, %18 ], [ %34, %90 ]
  %102 = phi i32 [ %16, %18 ], [ %98, %90 ]
  br label %103

103:                                              ; preds = %100, %103
  %104 = phi i16* [ %109, %103 ], [ %101, %100 ]
  %105 = phi i32 [ %108, %103 ], [ %102, %100 ]
  %106 = load i16, i16* %104, align 2
  %107 = sext i16 %106 to i32
  %108 = add nsw i32 %105, %107
  %109 = getelementptr inbounds i16, i16* %104, i64 1
  %110 = icmp ult i16* %109, %14
  br i1 %110, label %103, label %111, !llvm.loop !49

111:                                              ; preds = %103, %90, %11
  %112 = phi i32 [ %16, %11 ], [ %98, %90 ], [ %108, %103 ]
  %113 = phi i16* [ %17, %11 ], [ %34, %90 ], [ %109, %103 ]
  %114 = sdiv i32 %112, %2
  %115 = trunc i32 %114 to i16
  %116 = getelementptr inbounds i16, i16* %12, i64 1
  store i16 %115, i16* %12, align 2
  %117 = icmp ult i16* %113, %7
  br i1 %117, label %11, label %118

118:                                              ; preds = %111, %4
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.copysign.f32(float, float) #2

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.copysign.v4f32(<4 x float>, <4 x float>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !11}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = !{!24}
!24 = distinct !{!24, !22}
!25 = distinct !{!25, !8}
!26 = distinct !{!26, !8}
!27 = !{!28}
!28 = distinct !{!28, !29}
!29 = distinct !{!29, !"LVerDomain"}
!30 = !{!31}
!31 = distinct !{!31, !29}
!32 = distinct !{!32, !8}
!33 = distinct !{!33, !8}
!34 = !{!35}
!35 = distinct !{!35, !36}
!36 = distinct !{!36, !"LVerDomain"}
!37 = !{!38}
!38 = distinct !{!38, !36}
!39 = distinct !{!39, !8}
!40 = distinct !{!40, !8}
!41 = !{!42}
!42 = distinct !{!42, !43}
!43 = distinct !{!43, !"LVerDomain"}
!44 = !{!45}
!45 = distinct !{!45, !43}
!46 = distinct !{!46, !8}
!47 = distinct !{!47, !8}
!48 = distinct !{!48, !8}
!49 = distinct !{!49, !50, !8}
!50 = !{!"llvm.loop.unroll.runtime.disable"}
