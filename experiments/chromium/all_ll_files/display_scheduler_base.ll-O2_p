; ModuleID = '../../components/viz/service/display/display_scheduler_base.cc'
source_filename = "../../components/viz/service/display/display_scheduler_base.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.viz::DisplaySchedulerBase" = type { %"class.viz::DisplayDamageTracker::Observer", %"class.viz::DisplaySchedulerClient"*, %"class.viz::DisplayDamageTracker"* }
%"class.viz::DisplayDamageTracker::Observer" = type { i32 (...)** }
%"class.viz::DisplaySchedulerClient" = type { i32 (...)** }
%"class.viz::DisplayDamageTracker" = type { %"class.viz::SurfaceObserver", %"class.base::ObserverList", %"class.viz::SurfaceManager"*, %"class.viz::SurfaceAggregator"*, i8, i8, %"class.base::flat_map", %"class.std::__1::vector.8", %"class.viz::SurfaceId" }
%"class.viz::SurfaceObserver" = type { i32 (...)** }
%"class.base::ObserverList" = type <{ %"class.std::__1::vector", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.viz::SurfaceManager" = type opaque
%"class.viz::SurfaceAggregator" = type opaque
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.1" }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.3" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::pair"* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.viz::SurfaceId"* }
%"class.viz::SurfaceId" = type { %"class.viz::FrameSinkId", %"class.viz::LocalSurfaceId" }
%"class.viz::FrameSinkId" = type { i32, i32 }
%"class.viz::LocalSurfaceId" = type { i32, i32, %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }

@_ZTVN3viz20DisplaySchedulerBaseE = hidden unnamed_addr constant { [14 x i8*] } { [14 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.viz::DisplaySchedulerBase"*)* @_ZN3viz20DisplaySchedulerBaseD2Ev to i8*), i8* bitcast (void (%"class.viz::DisplaySchedulerBase"*)* @_ZN3viz20DisplaySchedulerBaseD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8

@_ZN3viz20DisplaySchedulerBaseD1Ev = hidden unnamed_addr alias void (%"class.viz::DisplaySchedulerBase"*), void (%"class.viz::DisplaySchedulerBase"*)* @_ZN3viz20DisplaySchedulerBaseD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3viz20DisplaySchedulerBaseC2Ev(%"class.viz::DisplaySchedulerBase"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::DisplaySchedulerBase", %"class.viz::DisplaySchedulerBase"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*] }, { [14 x i8*] }* @_ZTVN3viz20DisplaySchedulerBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.viz::DisplaySchedulerBase", %"class.viz::DisplaySchedulerBase"* %0, i64 0, i32 1
  %4 = bitcast %"class.viz::DisplaySchedulerClient"** %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz20DisplaySchedulerBaseD2Ev(%"class.viz::DisplaySchedulerBase"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.viz::DisplaySchedulerBase", %"class.viz::DisplaySchedulerBase"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*] }, { [14 x i8*] }* @_ZTVN3viz20DisplaySchedulerBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.viz::DisplaySchedulerBase", %"class.viz::DisplaySchedulerBase"* %0, i64 0, i32 2
  %4 = load %"class.viz::DisplayDamageTracker"*, %"class.viz::DisplayDamageTracker"** %3, align 8
  %5 = icmp eq %"class.viz::DisplayDamageTracker"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.viz::DisplaySchedulerBase", %"class.viz::DisplaySchedulerBase"* %0, i64 0, i32 0
  tail call void @_ZN3viz20DisplayDamageTracker14RemoveObserverEPNS0_8ObserverE(%"class.viz::DisplayDamageTracker"* nonnull %4, %"class.viz::DisplayDamageTracker::Observer"* %7) #6
  br label %8

8:                                                ; preds = %1, %6
  ret void
}

declare void @_ZN3viz20DisplayDamageTracker14RemoveObserverEPNS0_8ObserverE(%"class.viz::DisplayDamageTracker"*, %"class.viz::DisplayDamageTracker::Observer"*) local_unnamed_addr #2

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN3viz20DisplaySchedulerBaseD0Ev(%"class.viz::DisplaySchedulerBase"* nocapture readnone) unnamed_addr #3 align 2 {
  tail call void @llvm.trap() #7
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3viz20DisplaySchedulerBase9SetClientEPNS_22DisplaySchedulerClientE(%"class.viz::DisplaySchedulerBase"* nocapture, %"class.viz::DisplaySchedulerClient"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::DisplaySchedulerBase", %"class.viz::DisplaySchedulerBase"* %0, i64 0, i32 1
  store %"class.viz::DisplaySchedulerClient"* %1, %"class.viz::DisplaySchedulerClient"** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz20DisplaySchedulerBase16SetDamageTrackerEPNS_20DisplayDamageTrackerE(%"class.viz::DisplaySchedulerBase"*, %"class.viz::DisplayDamageTracker"*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.viz::DisplaySchedulerBase", %"class.viz::DisplaySchedulerBase"* %0, i64 0, i32 2
  store %"class.viz::DisplayDamageTracker"* %1, %"class.viz::DisplayDamageTracker"** %3, align 8
  %4 = getelementptr inbounds %"class.viz::DisplaySchedulerBase", %"class.viz::DisplaySchedulerBase"* %0, i64 0, i32 0
  tail call void @_ZN3viz20DisplayDamageTracker11AddObserverEPNS0_8ObserverE(%"class.viz::DisplayDamageTracker"* %1, %"class.viz::DisplayDamageTracker::Observer"* %4) #6
  ret void
}

declare void @_ZN3viz20DisplayDamageTracker11AddObserverEPNS0_8ObserverE(%"class.viz::DisplayDamageTracker"*, %"class.viz::DisplayDamageTracker::Observer"*) local_unnamed_addr #2

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
