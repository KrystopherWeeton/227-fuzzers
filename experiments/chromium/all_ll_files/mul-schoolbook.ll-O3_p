; ModuleID = '../../v8/src/bigint/mul-schoolbook.cc'
source_filename = "../../v8/src/bigint/mul-schoolbook.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.v8::bigint::ProcessorImpl" = type { i64, i32, %"class.v8::bigint::Platform"* }
%"class.v8::bigint::Platform" = type { i32 (...)** }
%"class.v8::bigint::Digits" = type <{ i64*, i32, [4 x i8] }>

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v86bigint13ProcessorImpl14MultiplySingleENS0_8RWDigitsENS0_6DigitsEm(%"class.v8::bigint::ProcessorImpl"* nocapture, i64*, i32, i64*, i32, i64) local_unnamed_addr #0 align 2 {
  %7 = icmp sgt i32 %4, 0
  br i1 %7, label %8, label %39

8:                                                ; preds = %6
  %9 = zext i64 %5 to i128
  %10 = zext i32 %4 to i64
  %11 = and i64 %10, 1
  %12 = icmp eq i32 %4, 1
  br i1 %12, label %18, label %13

13:                                               ; preds = %8
  %14 = sub nsw i64 %10, %11
  br label %71

15:                                               ; preds = %71
  %16 = trunc i128 %94 to i64
  %17 = trunc i128 %99 to i64
  br label %18

18:                                               ; preds = %15, %8
  %19 = phi i64 [ undef, %8 ], [ %16, %15 ]
  %20 = phi i64 [ undef, %8 ], [ %17, %15 ]
  %21 = phi i64 [ 0, %8 ], [ %103, %15 ]
  %22 = phi i128 [ 0, %8 ], [ %94, %15 ]
  %23 = phi i128 [ 0, %8 ], [ %99, %15 ]
  %24 = icmp eq i64 %11, 0
  br i1 %24, label %39, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds i64, i64* %3, i64 %21
  %27 = load i64, i64* %26, align 8
  %28 = zext i64 %27 to i128
  %29 = mul nuw i128 %28, %9
  %30 = and i128 %29, 18446744073709551615
  %31 = add nuw nsw i128 %22, %23
  %32 = add nuw nsw i128 %31, %30
  %33 = trunc i128 %32 to i64
  %34 = getelementptr inbounds i64, i64* %1, i64 %21
  store i64 %33, i64* %34, align 4
  %35 = lshr i128 %32, 64
  %36 = lshr i128 %29, 64
  %37 = trunc i128 %36 to i64
  %38 = trunc i128 %35 to i64
  br label %39

39:                                               ; preds = %25, %18, %6
  %40 = phi i64 [ 0, %6 ], [ %20, %18 ], [ %38, %25 ]
  %41 = phi i64 [ 0, %6 ], [ %19, %18 ], [ %37, %25 ]
  %42 = sext i32 %4 to i64
  %43 = getelementptr inbounds %"class.v8::bigint::ProcessorImpl", %"class.v8::bigint::ProcessorImpl"* %0, i64 0, i32 0
  %44 = load i64, i64* %43, align 8
  %45 = add i64 %44, %42
  store i64 %45, i64* %43, align 8
  %46 = icmp ugt i64 %45, 4999999
  br i1 %46, label %47, label %57

47:                                               ; preds = %39
  store i64 0, i64* %43, align 8
  %48 = getelementptr inbounds %"class.v8::bigint::ProcessorImpl", %"class.v8::bigint::ProcessorImpl"* %0, i64 0, i32 2
  %49 = load %"class.v8::bigint::Platform"*, %"class.v8::bigint::Platform"** %48, align 8
  %50 = bitcast %"class.v8::bigint::Platform"* %49 to i1 (%"class.v8::bigint::Platform"*)***
  %51 = load i1 (%"class.v8::bigint::Platform"*)**, i1 (%"class.v8::bigint::Platform"*)*** %50, align 8
  %52 = getelementptr inbounds i1 (%"class.v8::bigint::Platform"*)*, i1 (%"class.v8::bigint::Platform"*)** %51, i64 2
  %53 = load i1 (%"class.v8::bigint::Platform"*)*, i1 (%"class.v8::bigint::Platform"*)** %52, align 8
  %54 = tail call zeroext i1 %53(%"class.v8::bigint::Platform"* %49) #2
  br i1 %54, label %55, label %57

55:                                               ; preds = %47
  %56 = getelementptr inbounds %"class.v8::bigint::ProcessorImpl", %"class.v8::bigint::ProcessorImpl"* %0, i64 0, i32 1
  store i32 1, i32* %56, align 8
  br label %57

57:                                               ; preds = %39, %47, %55
  %58 = add i64 %41, %40
  %59 = getelementptr inbounds i64, i64* %1, i64 %42
  store i64 %58, i64* %59, align 4
  %60 = add i32 %4, 1
  %61 = icmp slt i32 %60, %2
  br i1 %61, label %62, label %106

62:                                               ; preds = %57
  %63 = sext i32 %60 to i64
  %64 = getelementptr i64, i64* %1, i64 %63
  %65 = bitcast i64* %64 to i8*
  %66 = add i32 %2, -2
  %67 = sub i32 %66, %4
  %68 = zext i32 %67 to i64
  %69 = shl nuw nsw i64 %68, 3
  %70 = add nuw nsw i64 %69, 8
  call void @llvm.memset.p0i8.i64(i8* align 4 %65, i8 0, i64 %70, i1 false)
  br label %106

71:                                               ; preds = %71, %13
  %72 = phi i64 [ 0, %13 ], [ %103, %71 ]
  %73 = phi i64 [ 0, %13 ], [ %95, %71 ]
  %74 = phi i64 [ 0, %13 ], [ %100, %71 ]
  %75 = phi i64 [ %14, %13 ], [ %104, %71 ]
  %76 = getelementptr inbounds i64, i64* %3, i64 %72
  %77 = load i64, i64* %76, align 8
  %78 = zext i64 %77 to i128
  %79 = mul nuw i128 %78, %9
  %80 = lshr i128 %79, 64
  %81 = and i128 %79, 18446744073709551615
  %82 = zext i64 %73 to i128
  %83 = zext i64 %74 to i128
  %84 = add nuw nsw i128 %82, %83
  %85 = add nuw nsw i128 %84, %81
  %86 = lshr i128 %85, 64
  %87 = trunc i128 %85 to i64
  %88 = getelementptr inbounds i64, i64* %1, i64 %72
  store i64 %87, i64* %88, align 4
  %89 = or i64 %72, 1
  %90 = getelementptr inbounds i64, i64* %3, i64 %89
  %91 = load i64, i64* %90, align 8
  %92 = zext i64 %91 to i128
  %93 = mul nuw i128 %92, %9
  %94 = lshr i128 %93, 64
  %95 = trunc i128 %94 to i64
  %96 = and i128 %93, 18446744073709551615
  %97 = add nuw nsw i128 %80, %86
  %98 = add nuw nsw i128 %97, %96
  %99 = lshr i128 %98, 64
  %100 = trunc i128 %99 to i64
  %101 = trunc i128 %98 to i64
  %102 = getelementptr inbounds i64, i64* %1, i64 %89
  store i64 %101, i64* %102, align 4
  %103 = add nuw nsw i64 %72, 2
  %104 = add i64 %75, -2
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %15, label %71

106:                                              ; preds = %62, %57
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v86bigint13ProcessorImpl18MultiplySchoolbookENS0_8RWDigitsENS0_6DigitsES3_(%"class.v8::bigint::ProcessorImpl"* nocapture, i64*, i32, i64*, i32, %"class.v8::bigint::Digits"* nocapture readonly byval(%"class.v8::bigint::Digits") align 8) local_unnamed_addr #0 align 2 {
  %7 = icmp eq i32 %4, 0
  br i1 %7, label %12, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds %"class.v8::bigint::Digits", %"class.v8::bigint::Digits"* %5, i64 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %16

12:                                               ; preds = %8, %6
  %13 = bitcast i64* %1 to i8*
  %14 = sext i32 %2 to i64
  %15 = shl nsw i64 %14, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 %15, i1 false) #2
  br label %257

16:                                               ; preds = %8
  %17 = load i64, i64* %3, align 8
  %18 = getelementptr inbounds %"class.v8::bigint::Digits", %"class.v8::bigint::Digits"* %5, i64 0, i32 0
  %19 = load i64*, i64** %18, align 8
  %20 = load i64, i64* %19, align 8
  %21 = zext i64 %17 to i128
  %22 = zext i64 %20 to i128
  %23 = mul nuw i128 %22, %21
  %24 = lshr i128 %23, 64
  %25 = trunc i128 %24 to i64
  %26 = trunc i128 %23 to i64
  store i64 %26, i64* %1, align 4
  %27 = icmp sgt i32 %10, 1
  br i1 %27, label %28, label %59

28:                                               ; preds = %16
  %29 = load i64, i64* %3, align 8
  %30 = getelementptr inbounds i64, i64* %19, i64 1
  %31 = load i64, i64* %30, align 8
  %32 = zext i64 %29 to i128
  %33 = zext i64 %31 to i128
  %34 = mul nuw i128 %33, %32
  %35 = lshr i128 %34, 64
  %36 = and i128 %34, 18446744073709551615
  %37 = add nuw nsw i128 %36, %24
  %38 = lshr i128 %37, 64
  %39 = trunc i128 %38 to i64
  %40 = getelementptr inbounds i64, i64* %3, i64 1
  %41 = load i64, i64* %40, align 8
  %42 = load i64, i64* %19, align 8
  %43 = zext i64 %41 to i128
  %44 = zext i64 %42 to i128
  %45 = mul nuw i128 %44, %43
  %46 = lshr i128 %45, 64
  %47 = and i128 %37, 18446744073709551615
  %48 = and i128 %45, 18446744073709551615
  %49 = add nuw nsw i128 %48, %47
  %50 = lshr i128 %49, 64
  %51 = trunc i128 %50 to i64
  %52 = add nuw nsw i64 %39, %51
  %53 = add nuw nsw i128 %46, %35
  %54 = lshr i128 %53, 64
  %55 = trunc i128 %54 to i64
  %56 = trunc i128 %49 to i64
  %57 = trunc i128 %53 to i64
  %58 = getelementptr inbounds i64, i64* %1, i64 1
  store i64 %56, i64* %58, align 4
  br label %59

59:                                               ; preds = %28, %16
  %60 = phi i32 [ 2, %28 ], [ 1, %16 ]
  %61 = phi i64 [ %52, %28 ], [ 0, %16 ]
  %62 = phi i64 [ %57, %28 ], [ %25, %16 ]
  %63 = phi i64 [ %55, %28 ], [ 0, %16 ]
  %64 = icmp slt i32 %60, %10
  br i1 %64, label %65, label %138

65:                                               ; preds = %59
  %66 = getelementptr inbounds %"class.v8::bigint::ProcessorImpl", %"class.v8::bigint::ProcessorImpl"* %0, i64 0, i32 0
  %67 = getelementptr inbounds %"class.v8::bigint::ProcessorImpl", %"class.v8::bigint::ProcessorImpl"* %0, i64 0, i32 2
  %68 = getelementptr inbounds %"class.v8::bigint::ProcessorImpl", %"class.v8::bigint::ProcessorImpl"* %0, i64 0, i32 1
  %69 = zext i32 %60 to i64
  %70 = zext i32 %10 to i64
  br label %71

71:                                               ; preds = %133, %65
  %72 = phi i64 [ %69, %65 ], [ %134, %133 ]
  %73 = phi i64 [ %69, %65 ], [ %77, %133 ]
  %74 = phi i64 [ %63, %65 ], [ %130, %133 ]
  %75 = phi i64 [ %62, %65 ], [ %87, %133 ]
  %76 = phi i64 [ %61, %65 ], [ %124, %133 ]
  %77 = add i64 %73, 1
  %78 = zext i64 %75 to i128
  %79 = zext i64 %76 to i128
  %80 = add nuw nsw i128 %78, %79
  %81 = lshr i128 %80, 64
  %82 = trunc i128 %81 to i64
  %83 = trunc i128 %80 to i64
  %84 = add i64 %74, %82
  br label %103

85:                                               ; preds = %103
  %86 = trunc i128 %120 to i64
  %87 = trunc i128 %126 to i64
  %88 = getelementptr inbounds i64, i64* %1, i64 %72
  store i64 %86, i64* %88, align 4
  %89 = load i64, i64* %66, align 8
  %90 = add i64 %89, %72
  store i64 %90, i64* %66, align 8
  %91 = icmp ugt i64 %90, 4999999
  br i1 %91, label %92, label %100

92:                                               ; preds = %85
  store i64 0, i64* %66, align 8
  %93 = load %"class.v8::bigint::Platform"*, %"class.v8::bigint::Platform"** %67, align 8
  %94 = bitcast %"class.v8::bigint::Platform"* %93 to i1 (%"class.v8::bigint::Platform"*)***
  %95 = load i1 (%"class.v8::bigint::Platform"*)**, i1 (%"class.v8::bigint::Platform"*)*** %94, align 8
  %96 = getelementptr inbounds i1 (%"class.v8::bigint::Platform"*)*, i1 (%"class.v8::bigint::Platform"*)** %95, i64 2
  %97 = load i1 (%"class.v8::bigint::Platform"*)*, i1 (%"class.v8::bigint::Platform"*)** %96, align 8
  %98 = tail call zeroext i1 %97(%"class.v8::bigint::Platform"* %93) #2
  br i1 %98, label %99, label %100

99:                                               ; preds = %92
  store i32 1, i32* %68, align 8
  br label %257

100:                                              ; preds = %85, %92
  %101 = load i32, i32* %68, align 8
  %102 = icmp eq i32 %101, 1
  br i1 %102, label %257, label %133

103:                                              ; preds = %103, %71
  %104 = phi i64 [ %131, %103 ], [ 0, %71 ]
  %105 = phi i64 [ %130, %103 ], [ 0, %71 ]
  %106 = phi i64 [ %123, %103 ], [ %83, %71 ]
  %107 = phi i64 [ %129, %103 ], [ %84, %71 ]
  %108 = phi i64 [ %124, %103 ], [ 0, %71 ]
  %109 = getelementptr inbounds i64, i64* %3, i64 %104
  %110 = load i64, i64* %109, align 8
  %111 = sub nsw i64 %72, %104
  %112 = getelementptr inbounds i64, i64* %19, i64 %111
  %113 = load i64, i64* %112, align 8
  %114 = zext i64 %110 to i128
  %115 = zext i64 %113 to i128
  %116 = mul nuw i128 %115, %114
  %117 = lshr i128 %116, 64
  %118 = zext i64 %106 to i128
  %119 = and i128 %116, 18446744073709551615
  %120 = add nuw nsw i128 %119, %118
  %121 = lshr i128 %120, 64
  %122 = trunc i128 %121 to i64
  %123 = trunc i128 %120 to i64
  %124 = add i64 %108, %122
  %125 = zext i64 %107 to i128
  %126 = add nuw nsw i128 %117, %125
  %127 = lshr i128 %126, 64
  %128 = trunc i128 %127 to i64
  %129 = trunc i128 %126 to i64
  %130 = add i64 %105, %128
  %131 = add nuw nsw i64 %104, 1
  %132 = icmp eq i64 %131, %77
  br i1 %132, label %85, label %103

133:                                              ; preds = %100
  %134 = add nuw nsw i64 %72, 1
  %135 = icmp eq i64 %134, %70
  br i1 %135, label %136, label %71

136:                                              ; preds = %133
  %137 = trunc i128 %126 to i64
  br label %138

138:                                              ; preds = %136, %59
  %139 = phi i32 [ %60, %59 ], [ %10, %136 ]
  %140 = phi i64 [ %61, %59 ], [ %124, %136 ]
  %141 = phi i64 [ %62, %59 ], [ %137, %136 ]
  %142 = phi i64 [ %63, %59 ], [ %130, %136 ]
  %143 = add i32 %4, -2
  %144 = add i32 %143, %10
  %145 = icmp sgt i32 %139, %144
  br i1 %145, label %239, label %146

146:                                              ; preds = %138
  %147 = add nsw i32 %4, -1
  %148 = sub i32 1, %10
  %149 = getelementptr inbounds %"class.v8::bigint::ProcessorImpl", %"class.v8::bigint::ProcessorImpl"* %0, i64 0, i32 0
  %150 = getelementptr inbounds %"class.v8::bigint::ProcessorImpl", %"class.v8::bigint::ProcessorImpl"* %0, i64 0, i32 2
  %151 = getelementptr inbounds %"class.v8::bigint::ProcessorImpl", %"class.v8::bigint::ProcessorImpl"* %0, i64 0, i32 1
  %152 = add i32 %139, 1
  %153 = sub i32 %152, %10
  %154 = zext i32 %139 to i64
  br label %155

155:                                              ; preds = %233, %146
  %156 = phi i64 [ %234, %233 ], [ %154, %146 ]
  %157 = phi i32 [ %236, %233 ], [ %153, %146 ]
  %158 = phi i64 [ %185, %233 ], [ %142, %146 ]
  %159 = phi i64 [ %183, %233 ], [ %141, %146 ]
  %160 = phi i64 [ %182, %233 ], [ %140, %146 ]
  %161 = trunc i64 %156 to i32
  %162 = icmp slt i32 %147, %161
  %163 = select i1 %162, i32 %147, i32 %161
  %164 = add i32 %148, %161
  %165 = zext i64 %159 to i128
  %166 = zext i64 %160 to i128
  %167 = add nuw nsw i128 %165, %166
  %168 = lshr i128 %167, 64
  %169 = trunc i128 %168 to i64
  %170 = trunc i128 %167 to i64
  %171 = add i64 %158, %169
  %172 = icmp slt i32 %163, %164
  br i1 %172, label %181, label %173

173:                                              ; preds = %155
  %174 = sext i32 %157 to i64
  %175 = shl i64 %156, 32
  %176 = ashr exact i64 %175, 32
  %177 = sext i32 %163 to i64
  br label %203

178:                                              ; preds = %203
  %179 = trunc i128 %220 to i64
  %180 = trunc i128 %226 to i64
  br label %181

181:                                              ; preds = %178, %155
  %182 = phi i64 [ 0, %155 ], [ %224, %178 ]
  %183 = phi i64 [ %171, %155 ], [ %180, %178 ]
  %184 = phi i64 [ %170, %155 ], [ %179, %178 ]
  %185 = phi i64 [ 0, %155 ], [ %230, %178 ]
  %186 = getelementptr inbounds i64, i64* %1, i64 %156
  store i64 %184, i64* %186, align 4
  %187 = sub nsw i32 %163, %164
  %188 = sext i32 %187 to i64
  %189 = load i64, i64* %149, align 8
  %190 = add i64 %189, %188
  store i64 %190, i64* %149, align 8
  %191 = icmp ugt i64 %190, 4999999
  br i1 %191, label %192, label %200

192:                                              ; preds = %181
  store i64 0, i64* %149, align 8
  %193 = load %"class.v8::bigint::Platform"*, %"class.v8::bigint::Platform"** %150, align 8
  %194 = bitcast %"class.v8::bigint::Platform"* %193 to i1 (%"class.v8::bigint::Platform"*)***
  %195 = load i1 (%"class.v8::bigint::Platform"*)**, i1 (%"class.v8::bigint::Platform"*)*** %194, align 8
  %196 = getelementptr inbounds i1 (%"class.v8::bigint::Platform"*)*, i1 (%"class.v8::bigint::Platform"*)** %195, i64 2
  %197 = load i1 (%"class.v8::bigint::Platform"*)*, i1 (%"class.v8::bigint::Platform"*)** %196, align 8
  %198 = tail call zeroext i1 %197(%"class.v8::bigint::Platform"* %193) #2
  br i1 %198, label %199, label %200

199:                                              ; preds = %192
  store i32 1, i32* %151, align 8
  br label %257

200:                                              ; preds = %181, %192
  %201 = load i32, i32* %151, align 8
  %202 = icmp eq i32 %201, 1
  br i1 %202, label %257, label %233

203:                                              ; preds = %173, %203
  %204 = phi i64 [ %174, %173 ], [ %231, %203 ]
  %205 = phi i64 [ 0, %173 ], [ %230, %203 ]
  %206 = phi i64 [ %170, %173 ], [ %223, %203 ]
  %207 = phi i64 [ %171, %173 ], [ %229, %203 ]
  %208 = phi i64 [ 0, %173 ], [ %224, %203 ]
  %209 = getelementptr inbounds i64, i64* %3, i64 %204
  %210 = load i64, i64* %209, align 8
  %211 = sub nsw i64 %176, %204
  %212 = getelementptr inbounds i64, i64* %19, i64 %211
  %213 = load i64, i64* %212, align 8
  %214 = zext i64 %210 to i128
  %215 = zext i64 %213 to i128
  %216 = mul nuw i128 %215, %214
  %217 = lshr i128 %216, 64
  %218 = zext i64 %206 to i128
  %219 = and i128 %216, 18446744073709551615
  %220 = add nuw nsw i128 %219, %218
  %221 = lshr i128 %220, 64
  %222 = trunc i128 %221 to i64
  %223 = trunc i128 %220 to i64
  %224 = add i64 %208, %222
  %225 = zext i64 %207 to i128
  %226 = add nuw nsw i128 %217, %225
  %227 = lshr i128 %226, 64
  %228 = trunc i128 %227 to i64
  %229 = trunc i128 %226 to i64
  %230 = add i64 %205, %228
  %231 = add nsw i64 %204, 1
  %232 = icmp slt i64 %204, %177
  br i1 %232, label %203, label %178

233:                                              ; preds = %200
  %234 = add nuw nsw i64 %156, 1
  %235 = icmp sgt i32 %144, %161
  %236 = add i32 %157, 1
  br i1 %235, label %155, label %237

237:                                              ; preds = %233
  %238 = trunc i64 %234 to i32
  br label %239

239:                                              ; preds = %237, %138
  %240 = phi i32 [ %139, %138 ], [ %238, %237 ]
  %241 = phi i64 [ %140, %138 ], [ %182, %237 ]
  %242 = phi i64 [ %141, %138 ], [ %183, %237 ]
  %243 = add i64 %242, %241
  %244 = zext i32 %240 to i64
  %245 = getelementptr inbounds i64, i64* %1, i64 %244
  store i64 %243, i64* %245, align 4
  %246 = add i32 %240, 1
  %247 = icmp slt i32 %246, %2
  br i1 %247, label %248, label %257

248:                                              ; preds = %239
  %249 = zext i32 %246 to i64
  %250 = getelementptr i64, i64* %1, i64 %249
  %251 = bitcast i64* %250 to i8*
  %252 = add i32 %2, -2
  %253 = sub i32 %252, %240
  %254 = zext i32 %253 to i64
  %255 = shl nuw nsw i64 %254, 3
  %256 = add nuw nsw i64 %255, 8
  call void @llvm.memset.p0i8.i64(i8* align 4 %251, i8 0, i64 %256, i1 false)
  br label %257

257:                                              ; preds = %100, %200, %99, %199, %248, %239, %12
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
