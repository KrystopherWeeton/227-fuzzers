; ModuleID = '../../cc/benchmarks/micro_benchmark_controller.cc'
source_filename = "../../cc/benchmarks/micro_benchmark_controller.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cc::MicroBenchmarkController" = type { %"class.cc::LayerTreeHost"*, %"class.std::__1::vector", %class.scoped_refptr.5 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.cc::MicroBenchmark"* }
%"class.cc::MicroBenchmark" = type { i32 (...)**, %"class.base::OnceCallback", i8, i8, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.std::__1::unique_ptr"* }
%class.scoped_refptr.5 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.6" }>
%"class.base::RefCountedThreadSafe.6" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.cc::LayerTreeHost" = type { %"class.cc::MutatorHostClient", %"class.cc::MicroBenchmarkController", %"class.base::WeakPtr", %class.scoped_refptr.14, %"class.std::__1::unique_ptr.15", i32, %"class.std::__1::unique_ptr.21", %"class.cc::LayerTreeHostClient"*, %"class.cc::LayerTreeHostSchedulingClient"*, %"class.std::__1::unique_ptr.27", %"class.std::__1::unique_ptr.33", i32, %"class.std::__1::unique_ptr.39", %"class.cc::SwapPromiseManager", %"class.std::__1::unique_ptr.68", %"class.std::__1::unique_ptr.68", %"class.cc::LayerTreeSettings", %"class.cc::LayerTreeDebugState", i8, i8, i8, i32, i8, i8, i8, %"class.cc::TaskGraphRunner"*, %"class.gfx::RenderingPipeline"*, %"class.gfx::RenderingPipeline"*, i32, %class.scoped_refptr.83, %"struct.cc::LayerTreeHost::ViewportPropertyIds", %"struct.cc::OverscrollBehavior", %"struct.cc::BrowserControlsParams", float, float, float, float, float, float, float, float, float, i8, i8, %"class.gfx::DisplayColorSpaces", i8, %"class.viz::LocalSurfaceId", i8, i32, i32, i32, %"struct.viz::Selection", %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::Size", i8, i8, [4 x i32], %"class.std::__1::unique_ptr.163", i8, %"class.cc::PropertyTrees", i8, i8, %"class.gfx::Vector2dF", %class.scoped_refptr.313, %"class.base::flat_map.314", %"class.base::internal::flat_tree.324", %"class.std::__1::unordered_map", %"class.std::__1::unordered_map.355", i8, i8, %"class.cc::MutatorHost"*, %"class.cc::RasterDarkModeFilter"*, %"class.std::__1::vector.381", %"class.std::__1::unordered_map.389", %"class.std::__1::vector.413", %"struct.cc::LayerTreeHost::ScrollAnimationState", %"class.std::__1::unique_ptr.422", %"class.base::TimeTicks", %"class.cc::EventsMetricsManager", %"class.std::__1::unique_ptr.443", %"class.std::__1::vector.449", %"class.base::flat_map.457", %"class.base::WeakPtrFactory.467" }
%"class.cc::MutatorHostClient" = type { i32 (...)** }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.7 }
%class.scoped_refptr.7 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.8", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.8" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.9" }
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__atomic_base.11" }
%"struct.std::__1::__atomic_base.11" = type { %"struct.std::__1::__cxx_atomic_impl.12" }
%"struct.std::__1::__cxx_atomic_impl.12" = type { %"struct.std::__1::__cxx_atomic_base_impl.13" }
%"struct.std::__1::__cxx_atomic_base_impl.13" = type { i8 }
%class.scoped_refptr.14 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.cc::UkmRecorderFactory"* }
%"class.cc::UkmRecorderFactory" = type { i32 (...)** }
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.cc::UIResourceManager"* }
%"class.cc::UIResourceManager" = type opaque
%"class.cc::LayerTreeHostClient" = type { i32 (...)** }
%"class.cc::LayerTreeHostSchedulingClient" = type { i32 (...)** }
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.cc::Proxy"* }
%"class.cc::Proxy" = type { i32 (...)** }
%"class.std::__1::unique_ptr.33" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.cc::TaskRunnerProvider"* }
%"class.cc::TaskRunnerProvider" = type { i32 (...)**, %class.scoped_refptr.5, %class.scoped_refptr.5 }
%"class.std::__1::unique_ptr.39" = type { %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.cc::RenderingStatsInstrumentation"* }
%"class.cc::RenderingStatsInstrumentation" = type { i32 (...)**, %"struct.cc::RenderingStats", i8, %"class.base::Lock" }
%"struct.cc::RenderingStats" = type { i64, i64, i64, i64, i64, i64, %"class.cc::RenderingStats::TimeDeltaList", %"class.cc::RenderingStats::TimeDeltaList", %"class.cc::RenderingStats::TimeDeltaList", %"class.cc::RenderingStats::TimeDeltaList", %"class.cc::RenderingStats::TimeDeltaList" }
%"class.cc::RenderingStats::TimeDeltaList" = type { %"class.std::__1::vector.42" }
%"class.std::__1::vector.42" = type { %"class.std::__1::__vector_base.43" }
%"class.std::__1::__vector_base.43" = type { %"class.base::TimeDelta"*, %"class.base::TimeDelta"*, %"class.std::__1::__compressed_pair.44" }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"class.base::TimeDelta"* }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.cc::SwapPromiseManager" = type { %"class.std::__1::vector.52", %"class.std::__1::set" }
%"class.std::__1::vector.52" = type { %"class.std::__1::__vector_base.53" }
%"class.std::__1::__vector_base.53" = type { %"class.std::__1::unique_ptr.54"*, %"class.std::__1::unique_ptr.54"*, %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.1268" }
%"class.std::__1::__compressed_pair.1268" = type { %"struct.std::__1::__compressed_pair_elem.1269" }
%"struct.std::__1::__compressed_pair_elem.1269" = type { %"class.cc::SwapPromise"* }
%"class.cc::SwapPromise" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"class.std::__1::unique_ptr.54"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.60", %"class.std::__1::__compressed_pair.65" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { i64 }
%"class.std::__1::unique_ptr.68" = type { %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"class.cc::LayerTreeFrameSink"* }
%"class.cc::LayerTreeFrameSink" = type { %"class.viz::SharedBitmapReporter", %"class.viz::ContextLostObserver", %"class.cc::LayerTreeFrameSinkClient"*, %class.scoped_refptr.71, %class.scoped_refptr.72, %class.scoped_refptr.5, %"class.gpu::GpuMemoryBufferManager"*, %"class.std::__1::unique_ptr.73", i64, %"class.base::WeakPtrFactory" }
%"class.viz::SharedBitmapReporter" = type { i32 (...)** }
%"class.viz::ContextLostObserver" = type { i32 (...)** }
%"class.cc::LayerTreeFrameSinkClient" = type { i32 (...)** }
%class.scoped_refptr.71 = type { %"class.viz::ContextProvider"* }
%"class.viz::ContextProvider" = type { i32 (...)** }
%class.scoped_refptr.72 = type { %"class.viz::RasterContextProvider"* }
%"class.viz::RasterContextProvider" = type { i32 (...)** }
%"class.gpu::GpuMemoryBufferManager" = type opaque
%"class.std::__1::unique_ptr.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"class.cc::LayerTreeFrameSink::ContextLostForwarder"* }
%"class.cc::LayerTreeFrameSink::ContextLostForwarder" = type opaque
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.79 }
%class.scoped_refptr.79 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.cc::LayerTreeSettings" = type <{ i32 (...)**, %"class.viz::ResourceSettings", i8, i8, i8, i8, [2 x i8], i32, i8, i8, i8, i8, i32, float, i8, i8, [2 x i8], i32, %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta", i8, [3 x i8], i32, %"class.base::TimeDelta", i8, i8, [2 x i8], float, float, float, %"class.gfx::Size", %"class.gfx::Size", %"class.gfx::Size", i32, %"class.gfx::Size", i32, float, i32, i64, i8, i8, i8, [5 x i8], i64, i8, i8, [2 x i8], i32, %"struct.cc::ManagedMemoryPolicy", i64, i32, i8, i8, i8, i8, i64, i8, [7 x i8], %"class.cc::LayerTreeDebugState", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [6 x i8] }>
%"class.viz::ResourceSettings" = type { i8, i8 }
%"struct.cc::ManagedMemoryPolicy" = type { i64, i32, i64 }
%"class.cc::LayerTreeDebugState" = type <{ i8, [7 x i8], %"class.std::__1::bitset", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, [2 x i8] }>
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { i64 }
%"class.cc::TaskGraphRunner" = type { i32 (...)** }
%"class.gfx::RenderingPipeline" = type { i32 (...)** }
%class.scoped_refptr.83 = type { %"class.cc::Layer"* }
%"class.cc::Layer" = type <{ i32 (...)**, %"class.base::RefCounted", [4 x i8], %"class.cc::Layer"*, %"class.cc::LayerTreeHost"*, %"struct.cc::Layer::Inputs", %"class.std::__1::unique_ptr.98", i32, i32, i32, i32, i32, i32, %"class.gfx::Vector2dF", i8, i16, [5 x i8], %"class.std::__1::unique_ptr.132" }>
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"struct.cc::Layer::Inputs" = type { %"class.std::__1::vector.84", %"class.gfx::Rect", %"class.gfx::Size", i32, i8, i32, %"class.cc::Region", %"class.cc::TouchActionRegion", %"class.cc::Region", %"struct.cc::ElementId" }
%"class.std::__1::vector.84" = type { %"class.std::__1::__vector_base.85" }
%"class.std::__1::__vector_base.85" = type { %class.scoped_refptr.83*, %class.scoped_refptr.83*, %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %class.scoped_refptr.83* }
%"class.cc::TouchActionRegion" = type { %"class.base::flat_map" }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.91" }
%"class.std::__1::vector.91" = type { %"class.std::__1::__vector_base.92" }
%"class.std::__1::__vector_base.92" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.93" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"struct.std::__1::pair"* }
%"class.cc::Region" = type { %class.SkRegion }
%class.SkRegion = type { %struct.SkIRect, %"struct.SkRegion::RunHead"* }
%struct.SkIRect = type { i32, i32, i32, i32 }
%"struct.SkRegion::RunHead" = type opaque
%"struct.cc::ElementId" = type { i64 }
%"class.std::__1::unique_ptr.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"struct.cc::Layer::LayerTreeInputs"* }
%"struct.cc::Layer::LayerTreeInputs" = type { %"class.gfx::Rect", %"class.cc::PictureLayer"*, float, i32, i8, %"class.gfx::PointF", %"class.gfx::Transform", %"class.gfx::Point3F", %"class.viz::SubtreeCaptureId", i32, %"class.cc::FilterOperations", %"class.cc::FilterOperations", %"class.absl::optional.116", float, i32, %"class.gfx::ScrollOffset", %"class.gfx::Size", %"class.gfx::RoundedCornersF", %"class.base::RepeatingCallback", %"class.std::__1::vector.121" }
%"class.cc::PictureLayer" = type opaque
%"class.gfx::PointF" = type { float, float }
%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.gfx::Point3F" = type { float, float, float }
%"class.viz::SubtreeCaptureId" = type { i32 }
%"class.cc::FilterOperations" = type { %"class.std::__1::vector.101" }
%"class.std::__1::vector.101" = type { %"class.std::__1::__vector_base.102" }
%"class.std::__1::__vector_base.102" = type { %"class.cc::FilterOperation"*, %"class.cc::FilterOperation"*, %"class.std::__1::__compressed_pair.111" }
%"class.cc::FilterOperation" = type <{ i32, float, float, %"class.gfx::Point", i32, %class.sk_sp, [20 x float], i32, [4 x i8], %"class.std::__1::vector.104", i32, [4 x i8] }>
%"class.gfx::Point" = type { i32, i32 }
%class.sk_sp = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type { %class.SkRefCnt.base, %class.sk_sp.103, i32, %"class.absl::optional", i8, i32 }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%class.sk_sp.103 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %struct.SkRect }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::vector.104" = type { %"class.std::__1::__vector_base.105" }
%"class.std::__1::__vector_base.105" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"class.gfx::Rect"* }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.112" }
%"struct.std::__1::__compressed_pair_elem.112" = type { %"class.cc::FilterOperation"* }
%"class.absl::optional.116" = type { %"class.absl::optional_internal::optional_data.117" }
%"class.absl::optional_internal::optional_data.117" = type { %"class.absl::optional_internal::optional_data_base.118" }
%"class.absl::optional_internal::optional_data_base.118" = type { %"class.absl::optional_internal::optional_data_dtor_base.119" }
%"class.absl::optional_internal::optional_data_dtor_base.119" = type { i8, %union.anon.120 }
%union.anon.120 = type { %"class.gfx::RRectF" }
%"class.gfx::RRectF" = type { %class.SkRRect }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkPoint = type { float, float }
%"class.gfx::ScrollOffset" = type { float, float }
%"class.gfx::RoundedCornersF" = type { float, float, float, float }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.std::__1::vector.121" = type { %"class.std::__1::__vector_base.122" }
%"class.std::__1::__vector_base.122" = type { %"class.std::__1::unique_ptr.123"*, %"class.std::__1::unique_ptr.123"*, %"class.std::__1::__compressed_pair.124" }
%"class.std::__1::unique_ptr.123" = type opaque
%"class.std::__1::__compressed_pair.124" = type { %"struct.std::__1::__compressed_pair_elem.125" }
%"struct.std::__1::__compressed_pair_elem.125" = type { %"class.std::__1::unique_ptr.123"* }
%"class.std::__1::unique_ptr.132" = type { %"class.std::__1::__compressed_pair.133" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.134" }
%"struct.std::__1::__compressed_pair_elem.134" = type { %"struct.cc::LayerDebugInfo"* }
%"struct.cc::LayerDebugInfo" = type { %"class.std::__1::basic_string", i32, i32, %"class.std::__1::vector.141", %"class.std::__1::vector.141", %"class.std::__1::vector.148" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.135" }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.136" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.137 }
%union.anon.137 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.141" = type { %"class.std::__1::__vector_base.142" }
%"class.std::__1::__vector_base.142" = type { i8**, i8**, %"class.std::__1::__compressed_pair.143" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { i8** }
%"class.std::__1::vector.148" = type { %"class.std::__1::__vector_base.149" }
%"class.std::__1::__vector_base.149" = type { %"struct.cc::LayerDebugInfo::Invalidation"*, %"struct.cc::LayerDebugInfo::Invalidation"*, %"class.std::__1::__compressed_pair.150" }
%"struct.cc::LayerDebugInfo::Invalidation" = type { %"class.gfx::Rect", i8*, %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.150" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"struct.std::__1::__compressed_pair_elem.151" = type { %"struct.cc::LayerDebugInfo::Invalidation"* }
%"struct.cc::LayerTreeHost::ViewportPropertyIds" = type { i32, i32, i32, i32, i32 }
%"struct.cc::OverscrollBehavior" = type { i32, i32 }
%"struct.cc::BrowserControlsParams" = type <{ float, float, float, float, i8, i8, i8, i8 }>
%"class.gfx::DisplayColorSpaces" = type { [6 x %"class.gfx::ColorSpace"], [6 x i32], float, %"class.absl::optional.158" }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%"class.absl::optional.158" = type { %"class.absl::optional_internal::optional_data.159" }
%"class.absl::optional_internal::optional_data.159" = type { %"class.absl::optional_internal::optional_data_base.160" }
%"class.absl::optional_internal::optional_data_base.160" = type { %"class.absl::optional_internal::optional_data_dtor_base.161" }
%"class.absl::optional_internal::optional_data_dtor_base.161" = type { i8, %union.anon.162 }
%union.anon.162 = type { %"struct.gfx::HDRStaticMetadata" }
%"struct.gfx::HDRStaticMetadata" = type { double, double, double }
%"class.viz::LocalSurfaceId" = type { i32, i32, %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"struct.viz::Selection" = type { %"struct.cc::LayerSelectionBound", %"struct.cc::LayerSelectionBound" }
%"struct.cc::LayerSelectionBound" = type <{ i32, %"class.gfx::Point", %"class.gfx::Point", i32, i8, [3 x i8] }>
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Size" = type { i32, i32 }
%"class.std::__1::unique_ptr.163" = type { %"class.std::__1::__compressed_pair.164" }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.165" }
%"struct.std::__1::__compressed_pair_elem.165" = type { %"struct.cc::PendingPageScaleAnimation"* }
%"struct.cc::PendingPageScaleAnimation" = type opaque
%"class.cc::PropertyTrees" = type { %"class.base::flat_map.169", %"class.base::flat_map.169", %"class.base::flat_map.169", %"class.cc::TransformTree", %"class.cc::EffectTree", %"class.cc::ClipTree", %"class.cc::ScrollTree", i8, i8, i8, i32, i8, i8, %"class.gfx::Vector2dF", %"class.gfx::Vector2dF", %"struct.cc::PropertyTreesCachedData" }
%"class.base::flat_map.169" = type { %"class.base::internal::flat_tree.170" }
%"class.base::internal::flat_tree.170" = type { %"class.std::__1::vector.171" }
%"class.std::__1::vector.171" = type { %"class.std::__1::__vector_base.172" }
%"class.std::__1::__vector_base.172" = type { %"struct.std::__1::pair.173"*, %"struct.std::__1::pair.173"*, %"class.std::__1::__compressed_pair.174" }
%"struct.std::__1::pair.173" = type opaque
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.175" }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"struct.std::__1::pair.173"* }
%"class.cc::TransformTree" = type { %"class.cc::PropertyTree", float, float, float, %"class.std::__1::vector.186", %"class.std::__1::vector.193", %"class.std::__1::vector.200" }
%"class.cc::PropertyTree" = type { i32 (...)**, %"class.std::__1::vector.179", i8, %"class.cc::PropertyTrees"* }
%"class.std::__1::vector.179" = type { %"class.std::__1::__vector_base.180" }
%"class.std::__1::__vector_base.180" = type { %"struct.cc::TransformNode"*, %"struct.cc::TransformNode"*, %"class.std::__1::__compressed_pair.181" }
%"struct.cc::TransformNode" = type opaque
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"struct.cc::TransformNode"* }
%"class.std::__1::vector.186" = type { %"class.std::__1::__vector_base.187" }
%"class.std::__1::__vector_base.187" = type { i32*, i32*, %"class.std::__1::__compressed_pair.188" }
%"class.std::__1::__compressed_pair.188" = type { %"struct.std::__1::__compressed_pair_elem.189" }
%"struct.std::__1::__compressed_pair_elem.189" = type { i32* }
%"class.std::__1::vector.193" = type { %"class.std::__1::__vector_base.194" }
%"class.std::__1::__vector_base.194" = type { %"struct.cc::TransformCachedNodeData"*, %"struct.cc::TransformCachedNodeData"*, %"class.std::__1::__compressed_pair.195" }
%"struct.cc::TransformCachedNodeData" = type opaque
%"class.std::__1::__compressed_pair.195" = type { %"struct.std::__1::__compressed_pair_elem.196" }
%"struct.std::__1::__compressed_pair_elem.196" = type { %"struct.cc::TransformCachedNodeData"* }
%"class.std::__1::vector.200" = type { %"class.std::__1::__vector_base.201" }
%"class.std::__1::__vector_base.201" = type { %"struct.cc::StickyPositionNodeData"*, %"struct.cc::StickyPositionNodeData"*, %"class.std::__1::__compressed_pair.202" }
%"struct.cc::StickyPositionNodeData" = type { i32, %"struct.cc::StickyPositionConstraint", i32, i32, %"class.gfx::Vector2dF", %"class.gfx::Vector2dF" }
%"struct.cc::StickyPositionConstraint" = type { i8, float, float, float, float, %"class.gfx::RectF", %"class.gfx::RectF", %"class.gfx::RectF", %"struct.cc::ElementId", %"struct.cc::ElementId" }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::SizeF" = type { float, float }
%"class.std::__1::__compressed_pair.202" = type { %"struct.std::__1::__compressed_pair_elem.203" }
%"struct.std::__1::__compressed_pair_elem.203" = type { %"struct.cc::StickyPositionNodeData"* }
%"class.cc::EffectTree" = type { %"class.cc::PropertyTree.207", %"class.std::__1::unordered_multimap", %"class.std::__1::vector.242" }
%"class.cc::PropertyTree.207" = type { i32 (...)**, %"class.std::__1::vector.208", i8, %"class.cc::PropertyTrees"* }
%"class.std::__1::vector.208" = type { %"class.std::__1::__vector_base.209" }
%"class.std::__1::__vector_base.209" = type { %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"*, %"class.std::__1::__compressed_pair.218" }
%"struct.cc::EffectNode" = type { i32, i32, i64, float, float, %"class.cc::FilterOperations", %"class.cc::FilterOperations", %"class.absl::optional.116", float, %"class.gfx::PointF", %"struct.cc::ElementId", %"class.gfx::MaskFilterInfo", i32, %"class.gfx::Vector2dF", %"class.viz::SubtreeCaptureId", %"class.gfx::Size", [3 x i8], i8, i32, i32, i32, i32, i32, i32, %"class.cc::DocumentTransitionSharedElementId" }
%"class.gfx::MaskFilterInfo" = type { %"class.gfx::RRectF" }
%"class.cc::DocumentTransitionSharedElementId" = type { i32, %"class.base::internal::flat_tree.210" }
%"class.base::internal::flat_tree.210" = type { %"class.std::__1::vector.211" }
%"class.std::__1::vector.211" = type { %"class.std::__1::__vector_base.212" }
%"class.std::__1::__vector_base.212" = type { i32*, i32*, %"class.std::__1::__compressed_pair.213" }
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.214" }
%"struct.std::__1::__compressed_pair_elem.214" = type { i32* }
%"class.std::__1::__compressed_pair.218" = type { %"struct.std::__1::__compressed_pair_elem.219" }
%"struct.std::__1::__compressed_pair_elem.219" = type { %"struct.cc::EffectNode"* }
%"class.std::__1::unordered_multimap" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.223", %"class.std::__1::__compressed_pair.231", %"class.std::__1::__compressed_pair.236", %"class.std::__1::__compressed_pair.238", [4 x i8] }>
%"class.std::__1::unique_ptr.223" = type { %"class.std::__1::__compressed_pair.224" }
%"class.std::__1::__compressed_pair.224" = type { %"struct.std::__1::__compressed_pair_elem.225", %"struct.std::__1::__compressed_pair_elem.226" }
%"struct.std::__1::__compressed_pair_elem.225" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.226" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.227" }
%"class.std::__1::__compressed_pair.227" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.231" = type { %"struct.std::__1::__compressed_pair_elem.232" }
%"struct.std::__1::__compressed_pair_elem.232" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.236" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.238" = type { %"struct.std::__1::__compressed_pair_elem.239" }
%"struct.std::__1::__compressed_pair_elem.239" = type { float }
%"class.std::__1::vector.242" = type { %"class.std::__1::__vector_base.243" }
%"class.std::__1::__vector_base.243" = type { %"class.std::__1::unique_ptr.244"*, %"class.std::__1::unique_ptr.244"*, %"class.std::__1::__compressed_pair.256" }
%"class.std::__1::unique_ptr.244" = type { %"class.std::__1::__compressed_pair.245" }
%"class.std::__1::__compressed_pair.245" = type { %"struct.std::__1::__compressed_pair_elem.246" }
%"struct.std::__1::__compressed_pair_elem.246" = type { %"class.cc::RenderSurfaceImpl"* }
%"class.cc::RenderSurfaceImpl" = type { i32 (...)**, %"class.cc::LayerTreeImpl"*, i64, i32, %"struct.cc::RenderSurfaceImpl::DrawProperties", %"class.gfx::Rect", i32, i8, %"class.cc::Occlusion", %"class.cc::RenderSurfaceImpl"*, %"class.std::__1::unique_ptr.247" }
%"class.cc::LayerTreeImpl" = type opaque
%"struct.cc::RenderSurfaceImpl::DrawProperties" = type { float, %"class.gfx::Transform", %"class.gfx::Transform", %"class.gfx::Rect", %"class.gfx::Rect", i8, %"class.gfx::MaskFilterInfo" }
%"class.cc::Occlusion" = type { %"class.gfx::Transform", %"class.cc::SimpleEnclosedRegion", %"class.cc::SimpleEnclosedRegion" }
%"class.cc::SimpleEnclosedRegion" = type { %"class.gfx::Rect" }
%"class.std::__1::unique_ptr.247" = type { %"class.std::__1::__compressed_pair.248" }
%"class.std::__1::__compressed_pair.248" = type { %"struct.std::__1::__compressed_pair_elem.249" }
%"struct.std::__1::__compressed_pair_elem.249" = type { %"class.cc::DamageTracker"* }
%"class.cc::DamageTracker" = type opaque
%"class.std::__1::__compressed_pair.256" = type { %"struct.std::__1::__compressed_pair_elem.257" }
%"struct.std::__1::__compressed_pair_elem.257" = type { %"class.std::__1::unique_ptr.244"* }
%"class.cc::ClipTree" = type { %"class.cc::PropertyTree.261" }
%"class.cc::PropertyTree.261" = type { i32 (...)**, %"class.std::__1::vector.262", i8, %"class.cc::PropertyTrees"* }
%"class.std::__1::vector.262" = type { %"class.std::__1::__vector_base.263" }
%"class.std::__1::__vector_base.263" = type { %"struct.cc::ClipNode"*, %"struct.cc::ClipNode"*, %"class.std::__1::__compressed_pair.264" }
%"struct.cc::ClipNode" = type opaque
%"class.std::__1::__compressed_pair.264" = type { %"struct.std::__1::__compressed_pair_elem.265" }
%"struct.std::__1::__compressed_pair_elem.265" = type { %"struct.cc::ClipNode"* }
%"class.cc::ScrollTree" = type { %"class.cc::PropertyTree.269", i32, %"class.base::flat_map.277", %"class.base::flat_map.287", %"class.base::WeakPtr.297" }
%"class.cc::PropertyTree.269" = type { i32 (...)**, %"class.std::__1::vector.270", i8, %"class.cc::PropertyTrees"* }
%"class.std::__1::vector.270" = type { %"class.std::__1::__vector_base.271" }
%"class.std::__1::__vector_base.271" = type { %"struct.cc::ScrollNode"*, %"struct.cc::ScrollNode"*, %"class.std::__1::__compressed_pair.272" }
%"struct.cc::ScrollNode" = type opaque
%"class.std::__1::__compressed_pair.272" = type { %"struct.std::__1::__compressed_pair_elem.273" }
%"struct.std::__1::__compressed_pair_elem.273" = type { %"struct.cc::ScrollNode"* }
%"class.base::flat_map.277" = type { %"class.base::internal::flat_tree.278" }
%"class.base::internal::flat_tree.278" = type { %"class.std::__1::vector.279" }
%"class.std::__1::vector.279" = type { %"class.std::__1::__vector_base.280" }
%"class.std::__1::__vector_base.280" = type { %"struct.std::__1::pair.281"*, %"struct.std::__1::pair.281"*, %"class.std::__1::__compressed_pair.282" }
%"struct.std::__1::pair.281" = type opaque
%"class.std::__1::__compressed_pair.282" = type { %"struct.std::__1::__compressed_pair_elem.283" }
%"struct.std::__1::__compressed_pair_elem.283" = type { %"struct.std::__1::pair.281"* }
%"class.base::flat_map.287" = type { %"class.base::internal::flat_tree.288" }
%"class.base::internal::flat_tree.288" = type { %"class.std::__1::vector.289" }
%"class.std::__1::vector.289" = type { %"class.std::__1::__vector_base.290" }
%"class.std::__1::__vector_base.290" = type { %"struct.std::__1::pair.291"*, %"struct.std::__1::pair.291"*, %"class.std::__1::__compressed_pair.292" }
%"struct.std::__1::pair.291" = type opaque
%"class.std::__1::__compressed_pair.292" = type { %"struct.std::__1::__compressed_pair_elem.293" }
%"struct.std::__1::__compressed_pair_elem.293" = type { %"struct.std::__1::pair.291"* }
%"class.base::WeakPtr.297" = type { %"class.base::internal::WeakPtrBase" }
%"struct.cc::PropertyTreesCachedData" = type { i32, %"class.std::__1::vector.298", %"class.std::__1::vector.305" }
%"class.std::__1::vector.298" = type { %"class.std::__1::__vector_base.299" }
%"class.std::__1::__vector_base.299" = type { %"struct.cc::AnimationScaleData"*, %"struct.cc::AnimationScaleData"*, %"class.std::__1::__compressed_pair.300" }
%"struct.cc::AnimationScaleData" = type <{ i32, float, i8, i8, [2 x i8] }>
%"class.std::__1::__compressed_pair.300" = type { %"struct.std::__1::__compressed_pair_elem.301" }
%"struct.std::__1::__compressed_pair_elem.301" = type { %"struct.cc::AnimationScaleData"* }
%"class.std::__1::vector.305" = type { %"class.std::__1::__vector_base.306" }
%"class.std::__1::__vector_base.306" = type { %"class.std::__1::vector.307"*, %"class.std::__1::vector.307"*, %"class.std::__1::__compressed_pair.308" }
%"class.std::__1::vector.307" = type opaque
%"class.std::__1::__compressed_pair.308" = type { %"struct.std::__1::__compressed_pair_elem.309" }
%"struct.std::__1::__compressed_pair_elem.309" = type { %"class.std::__1::vector.307"* }
%"class.gfx::Vector2dF" = type { float, float }
%class.scoped_refptr.313 = type { %"class.cc::HeadsUpDisplayLayer"* }
%"class.cc::HeadsUpDisplayLayer" = type opaque
%"class.base::flat_map.314" = type { %"class.base::internal::flat_tree.315" }
%"class.base::internal::flat_tree.315" = type { %"class.std::__1::vector.316" }
%"class.std::__1::vector.316" = type { %"class.std::__1::__vector_base.317" }
%"class.std::__1::__vector_base.317" = type { %"struct.std::__1::pair.318"*, %"struct.std::__1::pair.318"*, %"class.std::__1::__compressed_pair.319" }
%"struct.std::__1::pair.318" = type opaque
%"class.std::__1::__compressed_pair.319" = type { %"struct.std::__1::__compressed_pair_elem.320" }
%"struct.std::__1::__compressed_pair_elem.320" = type { %"struct.std::__1::pair.318"* }
%"class.base::internal::flat_tree.324" = type { %"class.std::__1::vector.325" }
%"class.std::__1::vector.325" = type { %"class.std::__1::__vector_base.326" }
%"class.std::__1::__vector_base.326" = type { %"class.cc::Layer"**, %"class.cc::Layer"**, %"class.std::__1::__compressed_pair.327" }
%"class.std::__1::__compressed_pair.327" = type { %"struct.std::__1::__compressed_pair_elem.328" }
%"struct.std::__1::__compressed_pair_elem.328" = type { %"class.cc::Layer"** }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table.332" }
%"class.std::__1::__hash_table.332" = type <{ %"class.std::__1::unique_ptr.333", %"class.std::__1::__compressed_pair.343", %"class.std::__1::__compressed_pair.348", %"class.std::__1::__compressed_pair.351", [4 x i8] }>
%"class.std::__1::unique_ptr.333" = type { %"class.std::__1::__compressed_pair.334" }
%"class.std::__1::__compressed_pair.334" = type { %"struct.std::__1::__compressed_pair_elem.335", %"struct.std::__1::__compressed_pair_elem.337" }
%"struct.std::__1::__compressed_pair_elem.335" = type { %"struct.std::__1::__hash_node_base.336"** }
%"struct.std::__1::__hash_node_base.336" = type { %"struct.std::__1::__hash_node_base.336"* }
%"struct.std::__1::__compressed_pair_elem.337" = type { %"class.std::__1::__bucket_list_deallocator.338" }
%"class.std::__1::__bucket_list_deallocator.338" = type { %"class.std::__1::__compressed_pair.339" }
%"class.std::__1::__compressed_pair.339" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.343" = type { %"struct.std::__1::__compressed_pair_elem.344" }
%"struct.std::__1::__compressed_pair_elem.344" = type { %"struct.std::__1::__hash_node_base.336" }
%"class.std::__1::__compressed_pair.348" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.351" = type { %"struct.std::__1::__compressed_pair_elem.239" }
%"class.std::__1::unordered_map.355" = type { %"class.std::__1::__hash_table.356" }
%"class.std::__1::__hash_table.356" = type <{ %"class.std::__1::unique_ptr.357", %"class.std::__1::__compressed_pair.367", %"class.std::__1::__compressed_pair.372", %"class.std::__1::__compressed_pair.375", [4 x i8] }>
%"class.std::__1::unique_ptr.357" = type { %"class.std::__1::__compressed_pair.358" }
%"class.std::__1::__compressed_pair.358" = type { %"struct.std::__1::__compressed_pair_elem.359", %"struct.std::__1::__compressed_pair_elem.361" }
%"struct.std::__1::__compressed_pair_elem.359" = type { %"struct.std::__1::__hash_node_base.360"** }
%"struct.std::__1::__hash_node_base.360" = type { %"struct.std::__1::__hash_node_base.360"* }
%"struct.std::__1::__compressed_pair_elem.361" = type { %"class.std::__1::__bucket_list_deallocator.362" }
%"class.std::__1::__bucket_list_deallocator.362" = type { %"class.std::__1::__compressed_pair.363" }
%"class.std::__1::__compressed_pair.363" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.367" = type { %"struct.std::__1::__compressed_pair_elem.368" }
%"struct.std::__1::__compressed_pair_elem.368" = type { %"struct.std::__1::__hash_node_base.360" }
%"class.std::__1::__compressed_pair.372" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.375" = type { %"struct.std::__1::__compressed_pair_elem.239" }
%"class.cc::MutatorHost" = type { i32 (...)** }
%"class.cc::RasterDarkModeFilter" = type opaque
%"class.std::__1::vector.381" = type { %"class.std::__1::__vector_base.382" }
%"class.std::__1::__vector_base.382" = type { %"struct.std::__1::pair.383"*, %"struct.std::__1::pair.383"*, %"class.std::__1::__compressed_pair.384" }
%"struct.std::__1::pair.383" = type opaque
%"class.std::__1::__compressed_pair.384" = type { %"struct.std::__1::__compressed_pair_elem.385" }
%"struct.std::__1::__compressed_pair_elem.385" = type { %"struct.std::__1::pair.383"* }
%"class.std::__1::unordered_map.389" = type { %"class.std::__1::__hash_table.390" }
%"class.std::__1::__hash_table.390" = type <{ %"class.std::__1::unique_ptr.391", %"class.std::__1::__compressed_pair.401", %"class.std::__1::__compressed_pair.406", %"class.std::__1::__compressed_pair.409", [4 x i8] }>
%"class.std::__1::unique_ptr.391" = type { %"class.std::__1::__compressed_pair.392" }
%"class.std::__1::__compressed_pair.392" = type { %"struct.std::__1::__compressed_pair_elem.393", %"struct.std::__1::__compressed_pair_elem.395" }
%"struct.std::__1::__compressed_pair_elem.393" = type { %"struct.std::__1::__hash_node_base.394"** }
%"struct.std::__1::__hash_node_base.394" = type { %"struct.std::__1::__hash_node_base.394"* }
%"struct.std::__1::__compressed_pair_elem.395" = type { %"class.std::__1::__bucket_list_deallocator.396" }
%"class.std::__1::__bucket_list_deallocator.396" = type { %"class.std::__1::__compressed_pair.397" }
%"class.std::__1::__compressed_pair.397" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.401" = type { %"struct.std::__1::__compressed_pair_elem.402" }
%"struct.std::__1::__compressed_pair_elem.402" = type { %"struct.std::__1::__hash_node_base.394" }
%"class.std::__1::__compressed_pair.406" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.409" = type { %"struct.std::__1::__compressed_pair_elem.239" }
%"class.std::__1::vector.413" = type { %"class.std::__1::__vector_base.414" }
%"class.std::__1::__vector_base.414" = type { %"class.base::OnceCallback.415"*, %"class.base::OnceCallback.415"*, %"class.std::__1::__compressed_pair.416" }
%"class.base::OnceCallback.415" = type opaque
%"class.std::__1::__compressed_pair.416" = type { %"struct.std::__1::__compressed_pair_elem.417" }
%"struct.std::__1::__compressed_pair_elem.417" = type { %"class.base::OnceCallback.415"* }
%"struct.cc::LayerTreeHost::ScrollAnimationState" = type { i8, %"class.base::OnceCallback.421" }
%"class.base::OnceCallback.421" = type { %"class.base::internal::CallbackBase" }
%"class.std::__1::unique_ptr.422" = type { %"class.std::__1::__compressed_pair.423" }
%"class.std::__1::__compressed_pair.423" = type { %"struct.std::__1::__compressed_pair_elem.424" }
%"struct.std::__1::__compressed_pair_elem.424" = type { %"struct.cc::BeginMainFrameMetrics"* }
%"struct.cc::BeginMainFrameMetrics" = type <{ %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta", i8, [7 x i8] }>
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.cc::EventsMetricsManager" = type { %"class.std::__1::vector.428", %"class.std::__1::vector.435" }
%"class.std::__1::vector.428" = type { %"class.std::__1::__vector_base.429" }
%"class.std::__1::__vector_base.429" = type { %"class.cc::EventsMetricsManager::ScopedMonitorImpl"**, %"class.cc::EventsMetricsManager::ScopedMonitorImpl"**, %"class.std::__1::__compressed_pair.430" }
%"class.cc::EventsMetricsManager::ScopedMonitorImpl" = type opaque
%"class.std::__1::__compressed_pair.430" = type { %"struct.std::__1::__compressed_pair_elem.431" }
%"struct.std::__1::__compressed_pair_elem.431" = type { %"class.cc::EventsMetricsManager::ScopedMonitorImpl"** }
%"class.std::__1::vector.435" = type { %"class.std::__1::__vector_base.436" }
%"class.std::__1::__vector_base.436" = type { %"class.std::__1::unique_ptr.437"*, %"class.std::__1::unique_ptr.437"*, %"class.std::__1::__compressed_pair.438" }
%"class.std::__1::unique_ptr.437" = type { %"class.std::__1::__compressed_pair.1258" }
%"class.std::__1::__compressed_pair.1258" = type { %"struct.std::__1::__compressed_pair_elem.1259" }
%"struct.std::__1::__compressed_pair_elem.1259" = type { %"class.cc::EventMetrics"* }
%"class.cc::EventMetrics" = type { i32, %"class.absl::optional.1260", %"class.base::TickClock"*, [6 x %"class.base::TimeTicks"] }
%"class.absl::optional.1260" = type { %"class.absl::optional_internal::optional_data.1261" }
%"class.absl::optional_internal::optional_data.1261" = type { %"class.absl::optional_internal::optional_data_base.1262" }
%"class.absl::optional_internal::optional_data_base.1262" = type { %"class.absl::optional_internal::optional_data_dtor_base.1263" }
%"class.absl::optional_internal::optional_data_dtor_base.1263" = type { i8, %union.anon.1264 }
%union.anon.1264 = type { i32 }
%"class.base::TickClock" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.438" = type { %"struct.std::__1::__compressed_pair_elem.439" }
%"struct.std::__1::__compressed_pair_elem.439" = type { %"class.std::__1::unique_ptr.437"* }
%"class.std::__1::unique_ptr.443" = type { %"class.std::__1::__compressed_pair.444" }
%"class.std::__1::__compressed_pair.444" = type { %"struct.std::__1::__compressed_pair_elem.445" }
%"struct.std::__1::__compressed_pair_elem.445" = type { %"class.gfx::DelegatedInkMetadata"* }
%"class.gfx::DelegatedInkMetadata" = type <{ %"class.gfx::PointF", double, i32, [4 x i8], %"class.base::TimeTicks", %"class.gfx::RectF", %"class.base::TimeTicks", i8, [7 x i8] }>
%"class.std::__1::vector.449" = type { %"class.std::__1::__vector_base.450" }
%"class.std::__1::__vector_base.450" = type { %"class.std::__1::unique_ptr.451"*, %"class.std::__1::unique_ptr.451"*, %"class.std::__1::__compressed_pair.452" }
%"class.std::__1::unique_ptr.451" = type opaque
%"class.std::__1::__compressed_pair.452" = type { %"struct.std::__1::__compressed_pair_elem.453" }
%"struct.std::__1::__compressed_pair_elem.453" = type { %"class.std::__1::unique_ptr.451"* }
%"class.base::flat_map.457" = type { %"class.base::internal::flat_tree.458" }
%"class.base::internal::flat_tree.458" = type { %"class.std::__1::vector.459" }
%"class.std::__1::vector.459" = type { %"class.std::__1::__vector_base.460" }
%"class.std::__1::__vector_base.460" = type { %"struct.std::__1::pair.461"*, %"struct.std::__1::pair.461"*, %"class.std::__1::__compressed_pair.462" }
%"struct.std::__1::pair.461" = type opaque
%"class.std::__1::__compressed_pair.462" = type { %"struct.std::__1::__compressed_pair_elem.463" }
%"struct.std::__1::__compressed_pair_elem.463" = type { %"struct.std::__1::pair.461"* }
%"class.base::WeakPtrFactory.467" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.6", [4 x i8] }>
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.474" }
%"union.absl::variant_internal::DestructibleUnionImpl.474" = type { %"union.absl::variant_internal::DestructibleUnionImpl.475" }
%"union.absl::variant_internal::DestructibleUnionImpl.475" = type { %"union.absl::variant_internal::DestructibleUnionImpl.476" }
%"union.absl::variant_internal::DestructibleUnionImpl.476" = type { %"union.absl::variant_internal::DestructibleUnionImpl.477" }
%"union.absl::variant_internal::DestructibleUnionImpl.477" = type { %"class.std::__1::basic_string" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.cc::InvalidationBenchmark" = type { %"class.cc::MicroBenchmark", i32, i32, i32, i32 }
%"class.cc::RasterizeAndRecordBenchmark" = type { %"class.cc::MicroBenchmark", %"struct.cc::RasterizeAndRecordBenchmark::RecordResults", i32, %"class.std::__1::unique_ptr.468", %"class.std::__1::unique_ptr.1296", i8, %"class.cc::LayerTreeHost"*, %"class.base::WeakPtrFactory.1302" }
%"struct.cc::RasterizeAndRecordBenchmark::RecordResults" = type { i32, i64, i64 }
%"class.std::__1::unique_ptr.468" = type { %"class.std::__1::__compressed_pair.469" }
%"class.std::__1::__compressed_pair.469" = type { %"struct.std::__1::__compressed_pair_elem.470" }
%"struct.std::__1::__compressed_pair_elem.470" = type { %"class.base::Value"* }
%"class.std::__1::unique_ptr.1296" = type { %"class.std::__1::__compressed_pair.1297" }
%"class.std::__1::__compressed_pair.1297" = type { %"struct.std::__1::__compressed_pair_elem.1298" }
%"struct.std::__1::__compressed_pair_elem.1298" = type { %"class.base::DictionaryValue"* }
%"class.base::DictionaryValue" = type { %"class.base::Value" }
%"class.base::WeakPtrFactory.1302" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.cc::UnittestOnlyBenchmark" = type { %"class.cc::MicroBenchmark", i8, %"class.base::WeakPtrFactory.1309" }
%"class.base::WeakPtrFactory.1309" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.cc::LayerTreeHostImpl" = type { %"class.cc::TileManagerClient", %"class.cc::LayerTreeFrameSinkClient", %"class.cc::BrowserControlsOffsetManagerClient", %"class.cc::ScrollbarAnimationControllerClient", %"class.cc::VideoFrameControllerClient", %"class.cc::MutatorHostClient", %"class.cc::ImageAnimationController::Client", %"class.cc::CompositorDelegateForInput", %"class.cc::LayerTreeHostImplClient"*, %"class.cc::LayerTreeHostSchedulingClient"*, %"class.cc::TaskRunnerProvider"*, %"class.cc::BeginFrameTracker", %"class.std::__1::unique_ptr.505", %"class.std::__1::unique_ptr.511", %"class.cc::LayerTreeSettings", i8, %"class.viz::ClientResourceProvider", %"class.std::__1::unordered_map.527", %"class.std::__1::unordered_map.527", %"class.std::__1::set.551", %"class.cc::LayerTreeFrameSink"*, i32, %"class.std::__1::unique_ptr.560", %"class.std::__1::unique_ptr.560", i8, i8, i8, i8, i8, i32, %"class.std::__1::unique_ptr.566", %"class.std::__1::unique_ptr.572", %"class.std::__1::unique_ptr.596", %"class.std::__1::unique_ptr.604", %"class.cc::GlobalStateThatImpactsTilePriority", %"class.std::__1::unique_ptr.610", %"class.std::__1::unique_ptr.610", %"class.std::__1::unique_ptr.610", %"class.gfx::Vector2dF", %"class.std::__1::vector.52", i8, [7 x i8], %"class.cc::LayerTreeDebugState", i8, %"struct.cc::ManagedMemoryPolicy", %"class.cc::TileManager", %"class.std::__1::unique_ptr.885", %"class.std::__1::unique_ptr.891", %"class.cc::DroppedFrameCounter", %"class.cc::TotalFrameCounter", %"class.std::__1::unique_ptr.941", %"class.std::__1::unique_ptr.948", i64, %"class.gfx::Transform", %"class.gfx::Rect", %"class.gfx::Rect", i8, %"class.gfx::Rect", %"class.std::__1::unique_ptr.954", %"class.std::__1::unique_ptr.960", %"class.std::__1::set.966", %"class.cc::RasterDarkModeFilter"*, %"class.std::__1::unordered_map.976", %"class.cc::RenderingStatsInstrumentation"*, %"class.cc::MicroBenchmarkControllerImpl", %"class.std::__1::unique_ptr.1013", %"class.base::RepeatingCallback.820", %"class.cc::TaskGraphRunner"*, i32, %"class.std::__1::set", i8, i8, i8, i32, %"class.std::__1::unique_ptr.1019", %"class.gfx::Size", i8, %"class.std::__1::unique_ptr.1025", %"class.std::__1::vector.1031", i32, [4 x i8], %"class.cc::ImageAnimationController", %"class.std::__1::unique_ptr.1051", %"class.std::__1::unique_ptr.1063", %"class.viz::FrameTokenGenerator", %"class.viz::LocalSurfaceId", %"class.base::internal::flat_tree.1069", %"class.absl::optional.1082", %"class.viz::LocalSurfaceId", %"class.viz::ChildLocalSurfaceIdAllocator", i32, %"class.std::__1::unique_ptr.585", %"class.cc::PresentationTimeCallbackBuffer", i32, %"class.cc::FrameSequenceTrackerCollection", %"class.std::__1::unique_ptr.1150", i8, i8, %"class.cc::AnimatedPaintWorkletTracker", %"class.cc::AverageLagTrackingManager", %"class.cc::DeJellyState", %"class.cc::EventsMetricsManager", %"class.std::__1::unique_ptr.1213", %"class.cc::FrameRateEstimator", i8, i8, i8, %"class.base::WritableSharedMemoryMapping", %"class.base::MRUCache", %"class.cc::ThrottleDecider", %"class.std::__1::vector.211", %"class.base::WeakPtrFactory.1256" }
%"class.cc::TileManagerClient" = type { i32 (...)** }
%"class.cc::BrowserControlsOffsetManagerClient" = type { i32 (...)** }
%"class.cc::ScrollbarAnimationControllerClient" = type { i32 (...)** }
%"class.cc::VideoFrameControllerClient" = type { i32 (...)** }
%"class.cc::ImageAnimationController::Client" = type { i32 (...)** }
%"class.cc::CompositorDelegateForInput" = type { i32 (...)** }
%"class.cc::LayerTreeHostImplClient" = type { i32 (...)** }
%"class.cc::BeginFrameTracker" = type { %"class.base::Location", %"class.std::__1::basic_string", %"class.base::TimeTicks", %"struct.viz::BeginFrameArgs", %"class.base::TimeTicks" }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"struct.viz::BeginFrameArgs" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeDelta", %"struct.viz::BeginFrameId", i64, i32, i8, i8, i64 }
%"struct.viz::BeginFrameId" = type { i64, i64 }
%"class.std::__1::unique_ptr.505" = type { %"class.std::__1::__compressed_pair.506" }
%"class.std::__1::__compressed_pair.506" = type { %"struct.std::__1::__compressed_pair_elem.507" }
%"struct.std::__1::__compressed_pair_elem.507" = type { %"class.cc::CompositorFrameReportingController"* }
%"class.cc::CompositorFrameReportingController" = type opaque
%"class.std::__1::unique_ptr.511" = type { %"class.std::__1::__compressed_pair.512" }
%"class.std::__1::__compressed_pair.512" = type { %"struct.std::__1::__compressed_pair_elem.513" }
%"struct.std::__1::__compressed_pair_elem.513" = type { %"class.cc::InputDelegateForCompositor"* }
%"class.cc::InputDelegateForCompositor" = type { i32 (...)** }
%"class.viz::ClientResourceProvider" = type { %"class.base::flat_map.517", %"class.viz::ResourceIdGenerator" }
%"class.base::flat_map.517" = type { %"class.base::internal::flat_tree.518" }
%"class.base::internal::flat_tree.518" = type { %"class.std::__1::vector.519" }
%"class.std::__1::vector.519" = type { %"class.std::__1::__vector_base.520" }
%"class.std::__1::__vector_base.520" = type { %"struct.std::__1::pair.521"*, %"struct.std::__1::pair.521"*, %"class.std::__1::__compressed_pair.522" }
%"struct.std::__1::pair.521" = type opaque
%"class.std::__1::__compressed_pair.522" = type { %"struct.std::__1::__compressed_pair_elem.523" }
%"struct.std::__1::__compressed_pair_elem.523" = type { %"struct.std::__1::pair.521"* }
%"class.viz::ResourceIdGenerator" = type { i32, i32 }
%"class.std::__1::unordered_map.527" = type { %"class.std::__1::__hash_table.528" }
%"class.std::__1::__hash_table.528" = type <{ %"class.std::__1::unique_ptr.529", %"class.std::__1::__compressed_pair.539", %"class.std::__1::__compressed_pair.544", %"class.std::__1::__compressed_pair.547", [4 x i8] }>
%"class.std::__1::unique_ptr.529" = type { %"class.std::__1::__compressed_pair.530" }
%"class.std::__1::__compressed_pair.530" = type { %"struct.std::__1::__compressed_pair_elem.531", %"struct.std::__1::__compressed_pair_elem.533" }
%"struct.std::__1::__compressed_pair_elem.531" = type { %"struct.std::__1::__hash_node_base.532"** }
%"struct.std::__1::__hash_node_base.532" = type { %"struct.std::__1::__hash_node_base.532"* }
%"struct.std::__1::__compressed_pair_elem.533" = type { %"class.std::__1::__bucket_list_deallocator.534" }
%"class.std::__1::__bucket_list_deallocator.534" = type { %"class.std::__1::__compressed_pair.535" }
%"class.std::__1::__compressed_pair.535" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.539" = type { %"struct.std::__1::__compressed_pair_elem.540" }
%"struct.std::__1::__compressed_pair_elem.540" = type { %"struct.std::__1::__hash_node_base.532" }
%"class.std::__1::__compressed_pair.544" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.547" = type { %"struct.std::__1::__compressed_pair_elem.239" }
%"class.std::__1::set.551" = type { %"class.std::__1::__tree.552" }
%"class.std::__1::__tree.552" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.553", %"class.std::__1::__compressed_pair.557" }
%"class.std::__1::__compressed_pair.553" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"class.std::__1::__compressed_pair.557" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::unique_ptr.560" = type { %"class.std::__1::__compressed_pair.561" }
%"class.std::__1::__compressed_pair.561" = type { %"struct.std::__1::__compressed_pair_elem.562" }
%"struct.std::__1::__compressed_pair_elem.562" = type { %"class.viz::ContextCacheController::ScopedToken"* }
%"class.viz::ContextCacheController::ScopedToken" = type { i8 }
%"class.std::__1::unique_ptr.566" = type { %"class.std::__1::__compressed_pair.567" }
%"class.std::__1::__compressed_pair.567" = type { %"struct.std::__1::__compressed_pair_elem.568" }
%"struct.std::__1::__compressed_pair_elem.568" = type { %"class.cc::RasterBufferProvider"* }
%"class.cc::RasterBufferProvider" = type { i32 (...)** }
%"class.std::__1::unique_ptr.572" = type { %"class.std::__1::__compressed_pair.573" }
%"class.std::__1::__compressed_pair.573" = type { %"struct.std::__1::__compressed_pair_elem.574" }
%"struct.std::__1::__compressed_pair_elem.574" = type { %"class.cc::ResourcePool"* }
%"class.cc::ResourcePool" = type { %"class.base::trace_event::MemoryDumpProvider", %"class.viz::ClientResourceProvider"*, %"class.viz::ContextProvider"*, %class.scoped_refptr.5, %"class.base::TimeDelta", i8, i32, i64, i64, i64, i64, i64, i64, i8, i8, %"class.base::circular_deque", %"class.base::circular_deque", %"class.std::__1::map", %"class.std::__1::unique_ptr.585", %"class.base::TimeTicks", %"class.base::TickClock"*, %"class.base::WeakPtrFactory.592" }
%"class.base::trace_event::MemoryDumpProvider" = type { i32 (...)** }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"class.std::__1::unique_ptr.575"*, i64 }
%"class.std::__1::unique_ptr.575" = type opaque
%"class.std::__1::map" = type { %"class.std::__1::__tree.576" }
%"class.std::__1::__tree.576" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.577", %"class.std::__1::__compressed_pair.581" }
%"class.std::__1::__compressed_pair.577" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"class.std::__1::__compressed_pair.581" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.base::WeakPtrFactory.592" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.std::__1::unique_ptr.596" = type { %"class.std::__1::__compressed_pair.597" }
%"class.std::__1::__compressed_pair.597" = type { %"struct.std::__1::__compressed_pair_elem.598" }
%"struct.std::__1::__compressed_pair_elem.598" = type { %"class.cc::RasterQueryQueue"* }
%"class.cc::RasterQueryQueue" = type { i32 (...)**, %"class.viz::RasterContextProvider"*, i8, %"class.base::Lock", %"class.base::circular_deque.599" }
%"class.base::circular_deque.599" = type { %"class.base::internal::VectorBuffer.600", i64, i64 }
%"class.base::internal::VectorBuffer.600" = type { %"struct.cc::RasterQuery"*, i64 }
%"struct.cc::RasterQuery" = type <{ i32, [4 x i8], %"class.base::TimeDelta", i32, [4 x i8], %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.604" = type { %"class.std::__1::__compressed_pair.605" }
%"class.std::__1::__compressed_pair.605" = type { %"struct.std::__1::__compressed_pair_elem.606" }
%"struct.std::__1::__compressed_pair_elem.606" = type { %"class.cc::ImageDecodeCache"* }
%"class.cc::ImageDecodeCache" = type { i32 (...)** }
%"class.cc::GlobalStateThatImpactsTilePriority" = type <{ i32, [4 x i8], i64, i64, i64, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.610" = type { %"class.std::__1::__compressed_pair.611" }
%"class.std::__1::__compressed_pair.611" = type { %"struct.std::__1::__compressed_pair_elem.612" }
%"struct.std::__1::__compressed_pair_elem.612" = type { %"class.cc::LayerTreeImpl"* }
%"class.cc::TileManager" = type { %"class.cc::CheckerImageTrackerClient", %"class.cc::TileManagerClient"*, %"class.base::SequencedTaskRunner"*, %"class.cc::ResourcePool"*, %"class.std::__1::unique_ptr.616", %"class.cc::RasterBufferProvider"*, %"class.cc::GlobalStateThatImpactsTilePriority", i64, %"struct.cc::TileManagerSettings", i8, i8, %"class.cc::RasterQueryQueue"*, %"class.std::__1::unordered_map.622", i8, [7 x i8], %"struct.cc::MemoryHistory::Entry", i8, i8, %"class.cc::ImageController", %"class.cc::DecodedImageTracker", %"class.cc::CheckerImageTracker", %"struct.cc::RasterTaskCompletionStats", %"struct.cc::TaskGraph", %"class.cc::UniqueNotifier", %"struct.cc::TileManager::Signals", %"class.cc::UniqueNotifier", i8, i64, i64, %"class.std::__1::unordered_set", i64, i64, i8, [7 x i8], %"class.std::__1::unordered_map.847", %"class.std::__1::vector.709", i32, %class.GURL, i8, %"class.base::internal::CancelableCallbackImpl", %"class.base::WaitableEvent", %"class.base::WeakPtrFactory.884", %"class.base::WeakPtrFactory.884" }
%"class.cc::CheckerImageTrackerClient" = type { i32 (...)** }
%"class.std::__1::unique_ptr.616" = type { %"class.std::__1::__compressed_pair.617" }
%"class.std::__1::__compressed_pair.617" = type { %"struct.std::__1::__compressed_pair_elem.618" }
%"struct.std::__1::__compressed_pair_elem.618" = type { %"class.cc::TileTaskManager"* }
%"class.cc::TileTaskManager" = type { i32 (...)** }
%"struct.cc::TileManagerSettings" = type { i8, i8, i64 }
%"class.std::__1::unordered_map.622" = type { %"class.std::__1::__hash_table.623" }
%"class.std::__1::__hash_table.623" = type <{ %"class.std::__1::unique_ptr.624", %"class.std::__1::__compressed_pair.634", %"class.std::__1::__compressed_pair.639", %"class.std::__1::__compressed_pair.644", [4 x i8] }>
%"class.std::__1::unique_ptr.624" = type { %"class.std::__1::__compressed_pair.625" }
%"class.std::__1::__compressed_pair.625" = type { %"struct.std::__1::__compressed_pair_elem.626", %"struct.std::__1::__compressed_pair_elem.628" }
%"struct.std::__1::__compressed_pair_elem.626" = type { %"struct.std::__1::__hash_node_base.627"** }
%"struct.std::__1::__hash_node_base.627" = type { %"struct.std::__1::__hash_node_base.627"* }
%"struct.std::__1::__compressed_pair_elem.628" = type { %"class.std::__1::__bucket_list_deallocator.629" }
%"class.std::__1::__bucket_list_deallocator.629" = type { %"class.std::__1::__compressed_pair.630" }
%"class.std::__1::__compressed_pair.630" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.634" = type { %"struct.std::__1::__compressed_pair_elem.635" }
%"struct.std::__1::__compressed_pair_elem.635" = type { %"struct.std::__1::__hash_node_base.627" }
%"class.std::__1::__compressed_pair.639" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.644" = type { %"struct.std::__1::__compressed_pair_elem.239" }
%"struct.cc::MemoryHistory::Entry" = type <{ i64, i64, i8, [7 x i8] }>
%"class.cc::ImageController" = type { i32 (...)**, %class.scoped_refptr.14, %"class.base::WeakPtr.649", %"class.cc::ImageDecodeCache"*, %"class.std::__1::vector.650", %"class.base::flat_map.685", %"class.base::SequencedTaskRunner"*, i64, %"class.base::Lock", %"class.std::__1::map.695", %"class.std::__1::map.695", i8, %"class.std::__1::vector.704", %"class.base::WeakPtrFactory.721" }
%"class.base::WeakPtr.649" = type { %"class.base::internal::WeakPtrBase" }
%"class.std::__1::vector.650" = type { %"class.std::__1::__vector_base.651" }
%"class.std::__1::__vector_base.651" = type { %"class.cc::DrawImage"*, %"class.cc::DrawImage"*, %"class.std::__1::__compressed_pair.680" }
%"class.cc::DrawImage" = type <{ %"class.cc::PaintImage", i8, [3 x i8], %struct.SkIRect, i32, %struct.SkSize, i8, [7 x i8], %"class.absl::optional.670", %"class.absl::optional.675", float, [4 x i8] }>
%"class.cc::PaintImage" = type { %class.sk_sp.652, %class.sk_sp.654, %"class.gfx::Rect", i32, %class.sk_sp.659, %class.sk_sp.667, i32, i32, i32, i32, i8, i8, i32, i32, %class.sk_sp.652, %class.scoped_refptr.668 }
%class.sk_sp.654 = type { %"class.cc::PaintOpBuffer"* }
%"class.cc::PaintOpBuffer" = type <{ %class.SkRefCnt.base, [4 x i8], %"class.std::__1::unique_ptr.655", i64, i64, i64, i64, i64, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr.655" = type { %"class.std::__1::__compressed_pair.656" }
%"class.std::__1::__compressed_pair.656" = type { %"struct.std::__1::__compressed_pair_elem.657" }
%"struct.std::__1::__compressed_pair_elem.657" = type { i8* }
%class.sk_sp.659 = type { %"class.cc::PaintImageGenerator"* }
%"class.cc::PaintImageGenerator" = type { %class.SkRefCnt.base, %struct.SkImageInfo, i32, %"class.std::__1::vector.660" }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.653, i32, i32 }
%class.sk_sp.653 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.9" }
%struct.SkISize = type { i32, i32 }
%"class.std::__1::vector.660" = type { %"class.std::__1::__vector_base.661" }
%"class.std::__1::__vector_base.661" = type { %"struct.cc::FrameMetadata"*, %"struct.cc::FrameMetadata"*, %"class.std::__1::__compressed_pair.662" }
%"struct.cc::FrameMetadata" = type { i8, %"class.base::TimeDelta" }
%"class.std::__1::__compressed_pair.662" = type { %"struct.std::__1::__compressed_pair_elem.663" }
%"struct.std::__1::__compressed_pair_elem.663" = type { %"struct.cc::FrameMetadata"* }
%class.sk_sp.667 = type { %"class.cc::TextureBacking"* }
%"class.cc::TextureBacking" = type opaque
%class.sk_sp.652 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%class.scoped_refptr.668 = type { %"class.cc::PaintWorkletInput"* }
%"class.cc::PaintWorkletInput" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.669", [4 x i8] }>
%"class.base::RefCountedThreadSafe.669" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%struct.SkSize = type { float, float }
%"class.absl::optional.670" = type { %"class.absl::optional_internal::optional_data.671" }
%"class.absl::optional_internal::optional_data.671" = type { %"class.absl::optional_internal::optional_data_base.672" }
%"class.absl::optional_internal::optional_data_base.672" = type { %"class.absl::optional_internal::optional_data_dtor_base.673" }
%"class.absl::optional_internal::optional_data_dtor_base.673" = type { i8, %union.anon.674 }
%union.anon.674 = type { i64 }
%"class.absl::optional.675" = type { %"class.absl::optional_internal::optional_data.676" }
%"class.absl::optional_internal::optional_data.676" = type { %"class.absl::optional_internal::optional_data_base.677" }
%"class.absl::optional_internal::optional_data_base.677" = type { %"class.absl::optional_internal::optional_data_dtor_base.678" }
%"class.absl::optional_internal::optional_data_dtor_base.678" = type { i8, %union.anon.679 }
%union.anon.679 = type { %"class.gfx::ColorSpace" }
%"class.std::__1::__compressed_pair.680" = type { %"struct.std::__1::__compressed_pair_elem.681" }
%"struct.std::__1::__compressed_pair_elem.681" = type { %"class.cc::DrawImage"* }
%"class.base::flat_map.685" = type { %"class.base::internal::flat_tree.686" }
%"class.base::internal::flat_tree.686" = type { %"class.std::__1::vector.687" }
%"class.std::__1::vector.687" = type { %"class.std::__1::__vector_base.688" }
%"class.std::__1::__vector_base.688" = type { %"struct.std::__1::pair.689"*, %"struct.std::__1::pair.689"*, %"class.std::__1::__compressed_pair.690" }
%"struct.std::__1::pair.689" = type opaque
%"class.std::__1::__compressed_pair.690" = type { %"struct.std::__1::__compressed_pair_elem.691" }
%"struct.std::__1::__compressed_pair_elem.691" = type { %"struct.std::__1::pair.689"* }
%"class.std::__1::map.695" = type { %"class.std::__1::__tree.696" }
%"class.std::__1::__tree.696" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.697", %"class.std::__1::__compressed_pair.701" }
%"class.std::__1::__compressed_pair.697" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"class.std::__1::__compressed_pair.701" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::vector.704" = type { %"class.std::__1::__vector_base.705" }
%"class.std::__1::__vector_base.705" = type { %"struct.cc::ImageController::ImageDecodeRequest"*, %"struct.cc::ImageController::ImageDecodeRequest"*, %"class.std::__1::__compressed_pair.716" }
%"struct.cc::ImageController::ImageDecodeRequest" = type <{ i64, %"class.cc::DrawImage", %"class.base::OnceCallback.706", %class.scoped_refptr.707, i8, [7 x i8] }>
%"class.base::OnceCallback.706" = type { %"class.base::internal::CallbackBase" }
%class.scoped_refptr.707 = type { %"class.cc::TileTask"* }
%"class.cc::TileTask" = type <{ %"class.cc::Task", i32, i32, %"class.std::__1::vector.709", i8, [7 x i8] }>
%"class.cc::Task" = type { i32 (...)**, %"class.base::RefCountedThreadSafe.708", %"class.cc::TaskState", i64 }
%"class.base::RefCountedThreadSafe.708" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.cc::TaskState" = type { i16 }
%"class.std::__1::__compressed_pair.716" = type { %"struct.std::__1::__compressed_pair_elem.717" }
%"struct.std::__1::__compressed_pair_elem.717" = type { %"struct.cc::ImageController::ImageDecodeRequest"* }
%"class.base::WeakPtrFactory.721" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.cc::DecodedImageTracker" = type { %"class.cc::ImageController"*, %"class.base::flat_map.722", i8, %class.scoped_refptr.14, %"class.base::TickClock"*, %"class.base::WeakPtrFactory.732" }
%"class.base::flat_map.722" = type { %"class.base::internal::flat_tree.723" }
%"class.base::internal::flat_tree.723" = type { %"class.std::__1::vector.724" }
%"class.std::__1::vector.724" = type { %"class.std::__1::__vector_base.725" }
%"class.std::__1::__vector_base.725" = type { %"struct.std::__1::pair.726"*, %"struct.std::__1::pair.726"*, %"class.std::__1::__compressed_pair.727" }
%"struct.std::__1::pair.726" = type { i32, %"class.std::__1::unique_ptr.1273" }
%"class.std::__1::unique_ptr.1273" = type { %"class.std::__1::__compressed_pair.1274" }
%"class.std::__1::__compressed_pair.1274" = type { %"struct.std::__1::__compressed_pair_elem.1275" }
%"struct.std::__1::__compressed_pair_elem.1275" = type { %"class.cc::DecodedImageTracker::ImageLock"* }
%"class.cc::DecodedImageTracker::ImageLock" = type { %"class.cc::DecodedImageTracker"*, i64, %"class.base::TimeTicks" }
%"class.std::__1::__compressed_pair.727" = type { %"struct.std::__1::__compressed_pair_elem.728" }
%"struct.std::__1::__compressed_pair_elem.728" = type { %"struct.std::__1::pair.726"* }
%"class.base::WeakPtrFactory.732" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.cc::CheckerImageTracker" = type { %"class.cc::ImageController"*, %"class.cc::CheckerImageTrackerClient"*, i8, i64, i8, %"class.base::internal::flat_tree.733", %"class.base::internal::flat_tree.733", %"class.std::__1::vector.734", i32, %"class.absl::optional.741", %"class.std::__1::unordered_map.746", %"class.std::__1::unordered_map.770", %"class.base::flat_map.794", %"class.base::WeakPtrFactory.804" }
%"class.base::internal::flat_tree.733" = type { %"class.std::__1::vector.186" }
%"class.std::__1::vector.734" = type { %"class.std::__1::__vector_base.735" }
%"class.std::__1::__vector_base.735" = type { %"struct.cc::CheckerImageTracker::ImageDecodeRequest"*, %"struct.cc::CheckerImageTracker::ImageDecodeRequest"*, %"class.std::__1::__compressed_pair.736" }
%"struct.cc::CheckerImageTracker::ImageDecodeRequest" = type <{ %"class.cc::PaintImage", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.736" = type { %"struct.std::__1::__compressed_pair_elem.737" }
%"struct.std::__1::__compressed_pair_elem.737" = type { %"struct.cc::CheckerImageTracker::ImageDecodeRequest"* }
%"class.absl::optional.741" = type { %"class.absl::optional_internal::optional_data.742" }
%"class.absl::optional_internal::optional_data.742" = type { %"class.absl::optional_internal::optional_data_base.743" }
%"class.absl::optional_internal::optional_data_base.743" = type { %"class.absl::optional_internal::optional_data_dtor_base.744" }
%"class.absl::optional_internal::optional_data_dtor_base.744" = type { i8, %union.anon.745 }
%union.anon.745 = type { %"class.cc::PaintImage" }
%"class.std::__1::unordered_map.746" = type { %"class.std::__1::__hash_table.747" }
%"class.std::__1::__hash_table.747" = type <{ %"class.std::__1::unique_ptr.748", %"class.std::__1::__compressed_pair.758", %"class.std::__1::__compressed_pair.763", %"class.std::__1::__compressed_pair.766", [4 x i8] }>
%"class.std::__1::unique_ptr.748" = type { %"class.std::__1::__compressed_pair.749" }
%"class.std::__1::__compressed_pair.749" = type { %"struct.std::__1::__compressed_pair_elem.750", %"struct.std::__1::__compressed_pair_elem.752" }
%"struct.std::__1::__compressed_pair_elem.750" = type { %"struct.std::__1::__hash_node_base.751"** }
%"struct.std::__1::__hash_node_base.751" = type { %"struct.std::__1::__hash_node_base.751"* }
%"struct.std::__1::__compressed_pair_elem.752" = type { %"class.std::__1::__bucket_list_deallocator.753" }
%"class.std::__1::__bucket_list_deallocator.753" = type { %"class.std::__1::__compressed_pair.754" }
%"class.std::__1::__compressed_pair.754" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.758" = type { %"struct.std::__1::__compressed_pair_elem.759" }
%"struct.std::__1::__compressed_pair_elem.759" = type { %"struct.std::__1::__hash_node_base.751" }
%"class.std::__1::__compressed_pair.763" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.766" = type { %"struct.std::__1::__compressed_pair_elem.239" }
%"class.std::__1::unordered_map.770" = type { %"class.std::__1::__hash_table.771" }
%"class.std::__1::__hash_table.771" = type <{ %"class.std::__1::unique_ptr.772", %"class.std::__1::__compressed_pair.782", %"class.std::__1::__compressed_pair.787", %"class.std::__1::__compressed_pair.790", [4 x i8] }>
%"class.std::__1::unique_ptr.772" = type { %"class.std::__1::__compressed_pair.773" }
%"class.std::__1::__compressed_pair.773" = type { %"struct.std::__1::__compressed_pair_elem.774", %"struct.std::__1::__compressed_pair_elem.776" }
%"struct.std::__1::__compressed_pair_elem.774" = type { %"struct.std::__1::__hash_node_base.775"** }
%"struct.std::__1::__hash_node_base.775" = type { %"struct.std::__1::__hash_node_base.775"* }
%"struct.std::__1::__compressed_pair_elem.776" = type { %"class.std::__1::__bucket_list_deallocator.777" }
%"class.std::__1::__bucket_list_deallocator.777" = type { %"class.std::__1::__compressed_pair.778" }
%"class.std::__1::__compressed_pair.778" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.782" = type { %"struct.std::__1::__compressed_pair_elem.783" }
%"struct.std::__1::__compressed_pair_elem.783" = type { %"struct.std::__1::__hash_node_base.775" }
%"class.std::__1::__compressed_pair.787" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.790" = type { %"struct.std::__1::__compressed_pair_elem.239" }
%"class.base::flat_map.794" = type { %"class.base::internal::flat_tree.795" }
%"class.base::internal::flat_tree.795" = type { %"class.std::__1::vector.796" }
%"class.std::__1::vector.796" = type { %"class.std::__1::__vector_base.797" }
%"class.std::__1::__vector_base.797" = type { %"struct.std::__1::pair.798"*, %"struct.std::__1::pair.798"*, %"class.std::__1::__compressed_pair.799" }
%"struct.std::__1::pair.798" = type { i32, i32 }
%"class.std::__1::__compressed_pair.799" = type { %"struct.std::__1::__compressed_pair_elem.800" }
%"struct.std::__1::__compressed_pair_elem.800" = type { %"struct.std::__1::pair.798"* }
%"class.base::WeakPtrFactory.804" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"struct.cc::RasterTaskCompletionStats" = type { i64, i64 }
%"struct.cc::TaskGraph" = type { %"class.std::__1::vector.805", %"class.std::__1::vector.813" }
%"class.std::__1::vector.805" = type { %"class.std::__1::__vector_base.806" }
%"class.std::__1::__vector_base.806" = type { %"struct.cc::TaskGraph::Node"*, %"struct.cc::TaskGraph::Node"*, %"class.std::__1::__compressed_pair.808" }
%"struct.cc::TaskGraph::Node" = type { %class.scoped_refptr.807, i16, i16, i32 }
%class.scoped_refptr.807 = type { %"class.cc::Task"* }
%"class.std::__1::__compressed_pair.808" = type { %"struct.std::__1::__compressed_pair_elem.809" }
%"struct.std::__1::__compressed_pair_elem.809" = type { %"struct.cc::TaskGraph::Node"* }
%"class.std::__1::vector.813" = type { %"class.std::__1::__vector_base.814" }
%"class.std::__1::__vector_base.814" = type { %"struct.cc::TaskGraph::Edge"*, %"struct.cc::TaskGraph::Edge"*, %"class.std::__1::__compressed_pair.815" }
%"struct.cc::TaskGraph::Edge" = type { %"class.cc::Task"*, %"class.cc::Task"* }
%"class.std::__1::__compressed_pair.815" = type { %"struct.std::__1::__compressed_pair_elem.816" }
%"struct.std::__1::__compressed_pair_elem.816" = type { %"struct.cc::TaskGraph::Edge"* }
%"struct.cc::TileManager::Signals" = type { i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.cc::UniqueNotifier" = type { %"class.base::SequencedTaskRunner"*, %"class.base::RepeatingCallback.820", %"class.base::Lock", i8, %"class.base::WeakPtrFactory.821" }
%"class.base::WeakPtrFactory.821" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.822" }
%"class.std::__1::__hash_table.822" = type <{ %"class.std::__1::unique_ptr.823", %"class.std::__1::__compressed_pair.833", %"class.std::__1::__compressed_pair.838", %"class.std::__1::__compressed_pair.842", [4 x i8] }>
%"class.std::__1::unique_ptr.823" = type { %"class.std::__1::__compressed_pair.824" }
%"class.std::__1::__compressed_pair.824" = type { %"struct.std::__1::__compressed_pair_elem.825", %"struct.std::__1::__compressed_pair_elem.827" }
%"struct.std::__1::__compressed_pair_elem.825" = type { %"struct.std::__1::__hash_node_base.826"** }
%"struct.std::__1::__hash_node_base.826" = type { %"struct.std::__1::__hash_node_base.826"* }
%"struct.std::__1::__compressed_pair_elem.827" = type { %"class.std::__1::__bucket_list_deallocator.828" }
%"class.std::__1::__bucket_list_deallocator.828" = type { %"class.std::__1::__compressed_pair.829" }
%"class.std::__1::__compressed_pair.829" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.833" = type { %"struct.std::__1::__compressed_pair_elem.834" }
%"struct.std::__1::__compressed_pair_elem.834" = type { %"struct.std::__1::__hash_node_base.826" }
%"class.std::__1::__compressed_pair.838" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.842" = type { %"struct.std::__1::__compressed_pair_elem.239" }
%"class.std::__1::unordered_map.847" = type { %"class.std::__1::__hash_table.848" }
%"class.std::__1::__hash_table.848" = type <{ %"class.std::__1::unique_ptr.849", %"class.std::__1::__compressed_pair.859", %"class.std::__1::__compressed_pair.864", %"class.std::__1::__compressed_pair.867", [4 x i8] }>
%"class.std::__1::unique_ptr.849" = type { %"class.std::__1::__compressed_pair.850" }
%"class.std::__1::__compressed_pair.850" = type { %"struct.std::__1::__compressed_pair_elem.851", %"struct.std::__1::__compressed_pair_elem.853" }
%"struct.std::__1::__compressed_pair_elem.851" = type { %"struct.std::__1::__hash_node_base.852"** }
%"struct.std::__1::__hash_node_base.852" = type { %"struct.std::__1::__hash_node_base.852"* }
%"struct.std::__1::__compressed_pair_elem.853" = type { %"class.std::__1::__bucket_list_deallocator.854" }
%"class.std::__1::__bucket_list_deallocator.854" = type { %"class.std::__1::__compressed_pair.855" }
%"class.std::__1::__compressed_pair.855" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.859" = type { %"struct.std::__1::__compressed_pair_elem.860" }
%"struct.std::__1::__compressed_pair_elem.860" = type { %"struct.std::__1::__hash_node_base.852" }
%"class.std::__1::__compressed_pair.864" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.867" = type { %"struct.std::__1::__compressed_pair_elem.239" }
%"class.std::__1::vector.709" = type { %"class.std::__1::__vector_base.710" }
%"class.std::__1::__vector_base.710" = type { %class.scoped_refptr.707*, %class.scoped_refptr.707*, %"class.std::__1::__compressed_pair.711" }
%"class.std::__1::__compressed_pair.711" = type { %"struct.std::__1::__compressed_pair_elem.712" }
%"struct.std::__1::__compressed_pair_elem.712" = type { %class.scoped_refptr.707* }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr.871" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.871" = type { %"class.std::__1::__compressed_pair.872" }
%"class.std::__1::__compressed_pair.872" = type { %"struct.std::__1::__compressed_pair_elem.873" }
%"struct.std::__1::__compressed_pair_elem.873" = type { %class.GURL* }
%"class.base::internal::CancelableCallbackImpl" = type { %"class.base::OnceCallback.421", %"class.base::WeakPtrFactory.877" }
%"class.base::WeakPtrFactory.877" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::WaitableEvent" = type <{ %class.scoped_refptr.878, i8, [7 x i8] }>
%class.scoped_refptr.878 = type { %"struct.base::WaitableEvent::WaitableEventKernel"* }
%"struct.base::WaitableEvent::WaitableEventKernel" = type { %"class.base::RefCountedThreadSafe.879", %"class.base::Lock", i8, i8, %"class.std::__1::list" }
%"class.base::RefCountedThreadSafe.879" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.880" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.880" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.base::WeakPtrFactory.884" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.std::__1::unique_ptr.885" = type { %"class.std::__1::__compressed_pair.886" }
%"class.std::__1::__compressed_pair.886" = type { %"struct.std::__1::__compressed_pair_elem.887" }
%"struct.std::__1::__compressed_pair_elem.887" = type { %"class.cc::BrowserControlsOffsetManager"* }
%"class.cc::BrowserControlsOffsetManager" = type opaque
%"class.std::__1::unique_ptr.891" = type { %"class.std::__1::__compressed_pair.892" }
%"class.std::__1::__compressed_pair.892" = type { %"struct.std::__1::__compressed_pair_elem.893" }
%"struct.std::__1::__compressed_pair_elem.893" = type { %"class.cc::PageScaleAnimation"* }
%"class.cc::PageScaleAnimation" = type opaque
%"class.cc::DroppedFrameCounter" = type { %"class.base::TimeDelta", %"class.std::__1::queue", i32, double, %"class.cc::DroppedFrameCounter::SlidingWindowHistogram", %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::RingBuffer", i64, i64, i64, i64, i8, double, %"class.absl::optional.907", %"class.absl::optional.907", %"class.absl::optional.907", %"class.base::TimeTicks", %"class.base::TimeDelta", %"struct.cc::SharedMetricsBuffer"*, %"class.cc::FrameSorter", %"class.cc::TotalFrameCounter"*, %struct.anon.926, %"class.absl::optional.927", %"class.std::__1::map.932" }
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.903" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.897"**, %"struct.std::__1::pair.897"**, %"struct.std::__1::pair.897"**, %"class.std::__1::__compressed_pair.898" }
%"struct.std::__1::pair.897" = type opaque
%"class.std::__1::__compressed_pair.898" = type { %"struct.std::__1::__compressed_pair_elem.899" }
%"struct.std::__1::__compressed_pair_elem.899" = type { %"struct.std::__1::pair.897"** }
%"class.std::__1::__compressed_pair.903" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.cc::DroppedFrameCounter::SlidingWindowHistogram" = type { [101 x i32], i32 }
%"class.base::RingBuffer" = type { [180 x i32], i64 }
%"class.absl::optional.907" = type { %"class.absl::optional_internal::optional_data.908" }
%"class.absl::optional_internal::optional_data.908" = type { %"class.absl::optional_internal::optional_data_base.909" }
%"class.absl::optional_internal::optional_data_base.909" = type { %"class.absl::optional_internal::optional_data_dtor_base.910" }
%"class.absl::optional_internal::optional_data_dtor_base.910" = type { i8, %union.anon.911 }
%union.anon.911 = type { double }
%"struct.cc::SharedMetricsBuffer" = type opaque
%"class.cc::FrameSorter" = type { i64, %"class.base::RepeatingCallback.912", %"class.base::circular_deque.913", %"class.std::__1::map.915", %"class.absl::optional.670" }
%"class.base::RepeatingCallback.912" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::circular_deque.913" = type { %"class.base::internal::VectorBuffer.914", i64, i64 }
%"class.base::internal::VectorBuffer.914" = type { %"struct.viz::BeginFrameArgs"*, i64 }
%"class.std::__1::map.915" = type { %"class.std::__1::__tree.916" }
%"class.std::__1::__tree.916" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.917", %"class.std::__1::__compressed_pair.921" }
%"class.std::__1::__compressed_pair.917" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"class.std::__1::__compressed_pair.921" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%struct.anon.926 = type { double, double }
%"class.absl::optional.927" = type { %"class.absl::optional_internal::optional_data.928" }
%"class.absl::optional_internal::optional_data.928" = type { %"class.absl::optional_internal::optional_data_base.929" }
%"class.absl::optional_internal::optional_data_base.929" = type { %"class.absl::optional_internal::optional_data_dtor_base.930" }
%"class.absl::optional_internal::optional_data_dtor_base.930" = type { i8, %union.anon.931 }
%union.anon.931 = type { %"struct.cc::DroppedFrameCounter::ScrollStartInfo" }
%"struct.cc::DroppedFrameCounter::ScrollStartInfo" = type { %"class.base::TimeTicks", %"struct.viz::BeginFrameId" }
%"class.std::__1::map.932" = type { %"class.std::__1::__tree.933" }
%"class.std::__1::__tree.933" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.934", %"class.std::__1::__compressed_pair.938" }
%"class.std::__1::__compressed_pair.934" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"class.std::__1::__compressed_pair.938" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.cc::TotalFrameCounter" = type { i64, %"class.base::TimeDelta", %"class.base::TimeTicks" }
%"class.std::__1::unique_ptr.941" = type { %"class.std::__1::__compressed_pair.942" }
%"class.std::__1::__compressed_pair.942" = type { %"struct.std::__1::__compressed_pair_elem.943" }
%"struct.std::__1::__compressed_pair_elem.943" = type { %"class.cc::MemoryHistory"* }
%"class.cc::MemoryHistory" = type { %"class.base::RingBuffer.944" }
%"class.base::RingBuffer.944" = type { [80 x %"struct.cc::MemoryHistory::Entry"], i64 }
%"class.std::__1::unique_ptr.948" = type { %"class.std::__1::__compressed_pair.949" }
%"class.std::__1::__compressed_pair.949" = type { %"struct.std::__1::__compressed_pair_elem.950" }
%"struct.std::__1::__compressed_pair_elem.950" = type { %"class.cc::DebugRectHistory"* }
%"class.cc::DebugRectHistory" = type opaque
%"class.std::__1::unique_ptr.954" = type { %"class.std::__1::__compressed_pair.955" }
%"class.std::__1::__compressed_pair.955" = type { %"struct.std::__1::__compressed_pair_elem.956" }
%"struct.std::__1::__compressed_pair_elem.956" = type { %"class.cc::MutatorHost"* }
%"class.std::__1::unique_ptr.960" = type { %"class.std::__1::__compressed_pair.961" }
%"class.std::__1::__compressed_pair.961" = type { %"struct.std::__1::__compressed_pair_elem.962" }
%"struct.std::__1::__compressed_pair_elem.962" = type { %"class.cc::MutatorEvents"* }
%"class.cc::MutatorEvents" = type { i32 (...)** }
%"class.std::__1::set.966" = type { %"class.std::__1::__tree.967" }
%"class.std::__1::__tree.967" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.968", %"class.std::__1::__compressed_pair.972" }
%"class.std::__1::__compressed_pair.968" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"class.std::__1::__compressed_pair.972" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::unordered_map.976" = type { %"class.std::__1::__hash_table.977" }
%"class.std::__1::__hash_table.977" = type <{ %"class.std::__1::unique_ptr.978", %"class.std::__1::__compressed_pair.988", %"class.std::__1::__compressed_pair.993", %"class.std::__1::__compressed_pair.996", [4 x i8] }>
%"class.std::__1::unique_ptr.978" = type { %"class.std::__1::__compressed_pair.979" }
%"class.std::__1::__compressed_pair.979" = type { %"struct.std::__1::__compressed_pair_elem.980", %"struct.std::__1::__compressed_pair_elem.982" }
%"struct.std::__1::__compressed_pair_elem.980" = type { %"struct.std::__1::__hash_node_base.981"** }
%"struct.std::__1::__hash_node_base.981" = type { %"struct.std::__1::__hash_node_base.981"* }
%"struct.std::__1::__compressed_pair_elem.982" = type { %"class.std::__1::__bucket_list_deallocator.983" }
%"class.std::__1::__bucket_list_deallocator.983" = type { %"class.std::__1::__compressed_pair.984" }
%"class.std::__1::__compressed_pair.984" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.988" = type { %"struct.std::__1::__compressed_pair_elem.989" }
%"struct.std::__1::__compressed_pair_elem.989" = type { %"struct.std::__1::__hash_node_base.981" }
%"class.std::__1::__compressed_pair.993" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.996" = type { %"struct.std::__1::__compressed_pair_elem.239" }
%"class.cc::MicroBenchmarkControllerImpl" = type { %"class.cc::LayerTreeHostImpl"*, %"class.std::__1::vector.1000" }
%"class.std::__1::vector.1000" = type { %"class.std::__1::__vector_base.1001" }
%"class.std::__1::__vector_base.1001" = type { %"class.std::__1::unique_ptr.1002"*, %"class.std::__1::unique_ptr.1002"*, %"class.std::__1::__compressed_pair.1008" }
%"class.std::__1::unique_ptr.1002" = type { %"class.std::__1::__compressed_pair.1003" }
%"class.std::__1::__compressed_pair.1003" = type { %"struct.std::__1::__compressed_pair_elem.1004" }
%"struct.std::__1::__compressed_pair_elem.1004" = type { %"class.cc::MicroBenchmarkImpl"* }
%"class.cc::MicroBenchmarkImpl" = type { i32 (...)**, %"class.base::OnceCallback", i8, %class.scoped_refptr.5 }
%"class.std::__1::__compressed_pair.1008" = type { %"struct.std::__1::__compressed_pair_elem.1009" }
%"struct.std::__1::__compressed_pair_elem.1009" = type { %"class.std::__1::unique_ptr.1002"* }
%"class.std::__1::unique_ptr.1013" = type { %"class.std::__1::__compressed_pair.1014" }
%"class.std::__1::__compressed_pair.1014" = type { %"struct.std::__1::__compressed_pair_elem.1015" }
%"struct.std::__1::__compressed_pair_elem.1015" = type { %"class.cc::SynchronousTaskGraphRunner"* }
%"class.cc::SynchronousTaskGraphRunner" = type opaque
%"class.base::RepeatingCallback.820" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.std::__1::unique_ptr.1019" = type { %"class.std::__1::__compressed_pair.1020" }
%"class.std::__1::__compressed_pair.1020" = type { %"struct.std::__1::__compressed_pair_elem.1021" }
%"struct.std::__1::__compressed_pair_elem.1021" = type { %"class.cc::Viewport"* }
%"class.cc::Viewport" = type opaque
%"class.std::__1::unique_ptr.1025" = type { %"class.std::__1::__compressed_pair.1026" }
%"class.std::__1::__compressed_pair.1026" = type { %"struct.std::__1::__compressed_pair_elem.1027" }
%"struct.std::__1::__compressed_pair_elem.1027" = type { %"class.cc::PendingTreeRasterDurationHistogramTimer"* }
%"class.cc::PendingTreeRasterDurationHistogramTimer" = type opaque
%"class.std::__1::vector.1031" = type { %"class.std::__1::__vector_base.1032" }
%"class.std::__1::__vector_base.1032" = type { %"struct.std::__1::pair.1033"*, %"struct.std::__1::pair.1033"*, %"class.std::__1::__compressed_pair.1034" }
%"struct.std::__1::pair.1033" = type opaque
%"class.std::__1::__compressed_pair.1034" = type { %"struct.std::__1::__compressed_pair_elem.1035" }
%"struct.std::__1::__compressed_pair_elem.1035" = type { %"struct.std::__1::pair.1033"* }
%"class.cc::ImageAnimationController" = type <{ %"class.base::flat_map.1039", %"class.base::internal::flat_tree.733", %"class.base::internal::flat_tree.733", %"class.cc::ImageAnimationController::InvalidationScheduler", i8, i8, i8, [5 x i8] }>
%"class.base::flat_map.1039" = type { %"class.base::internal::flat_tree.1040" }
%"class.base::internal::flat_tree.1040" = type { %"class.std::__1::vector.1041" }
%"class.std::__1::vector.1041" = type { %"class.std::__1::__vector_base.1042" }
%"class.std::__1::__vector_base.1042" = type { %"struct.std::__1::pair.1043"*, %"struct.std::__1::pair.1043"*, %"class.std::__1::__compressed_pair.1044" }
%"struct.std::__1::pair.1043" = type { i32, %"class.cc::ImageAnimationController::AnimationState" }
%"class.cc::ImageAnimationController::AnimationState" = type { i32, %"class.std::__1::vector.660", i32, %"struct.cc::ImageAnimationController::AnimationState::AnimationAdvancementState", %"class.base::internal::flat_tree.1279", i64, i8, i8, %"class.base::TimeTicks", i32, i32, i64 }
%"struct.cc::ImageAnimationController::AnimationState::AnimationAdvancementState" = type { i64, %"class.base::TimeTicks", %"class.base::TimeTicks", i32, i64 }
%"class.base::internal::flat_tree.1279" = type { %"class.std::__1::vector.1280" }
%"class.std::__1::vector.1280" = type { %"class.std::__1::__vector_base.1281" }
%"class.std::__1::__vector_base.1281" = type { %"class.cc::ImageAnimationController::AnimationDriver"**, %"class.cc::ImageAnimationController::AnimationDriver"**, %"class.std::__1::__compressed_pair.1282" }
%"class.cc::ImageAnimationController::AnimationDriver" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.1282" = type { %"struct.std::__1::__compressed_pair_elem.1283" }
%"struct.std::__1::__compressed_pair_elem.1283" = type { %"class.cc::ImageAnimationController::AnimationDriver"** }
%"class.std::__1::__compressed_pair.1044" = type { %"struct.std::__1::__compressed_pair_elem.1045" }
%"struct.std::__1::__compressed_pair_elem.1045" = type { %"struct.std::__1::pair.1043"* }
%"class.cc::ImageAnimationController::InvalidationScheduler" = type { %"class.base::SingleThreadTaskRunner"*, %"class.cc::ImageAnimationController::Client"*, %"class.base::RepeatingCallback.1049", i32, %"class.base::TimeTicks", %"class.base::WeakPtrFactory.1050" }
%"class.base::RepeatingCallback.1049" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::WeakPtrFactory.1050" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.std::__1::unique_ptr.1051" = type { %"class.std::__1::__compressed_pair.1052" }
%"class.std::__1::__compressed_pair.1052" = type { %"struct.std::__1::__compressed_pair_elem.1053" }
%"struct.std::__1::__compressed_pair_elem.1053" = type { %"class.cc::UkmManager"* }
%"class.cc::UkmManager" = type { i8, i64, i64, i64, i64, i64, i32, i64, %"class.std::__1::unique_ptr.1054" }
%"class.std::__1::unique_ptr.1054" = type { %"class.std::__1::__compressed_pair.1055" }
%"class.std::__1::__compressed_pair.1055" = type { %"struct.std::__1::__compressed_pair_elem.1056" }
%"struct.std::__1::__compressed_pair_elem.1056" = type { %"class.ukm::UkmRecorder"* }
%"class.ukm::UkmRecorder" = type opaque
%"class.std::__1::unique_ptr.1063" = type { %"class.std::__1::__compressed_pair.1064" }
%"class.std::__1::__compressed_pair.1064" = type { %"struct.std::__1::__compressed_pair_elem.1065" }
%"struct.std::__1::__compressed_pair_elem.1065" = type { %"class.cc::RenderFrameMetadataObserver"* }
%"class.cc::RenderFrameMetadataObserver" = type opaque
%"class.viz::FrameTokenGenerator" = type { i32 }
%"class.base::internal::flat_tree.1069" = type { %"class.std::__1::vector.1070" }
%"class.std::__1::vector.1070" = type { %"class.std::__1::__vector_base.1071" }
%"class.std::__1::__vector_base.1071" = type { %"class.viz::SurfaceRange"*, %"class.viz::SurfaceRange"*, %"class.std::__1::__compressed_pair.1077" }
%"class.viz::SurfaceRange" = type { %"class.absl::optional.1072", %"class.viz::SurfaceId" }
%"class.absl::optional.1072" = type { %"class.absl::optional_internal::optional_data.1073" }
%"class.absl::optional_internal::optional_data.1073" = type { %"class.absl::optional_internal::optional_data_base.1074" }
%"class.absl::optional_internal::optional_data_base.1074" = type { %"class.absl::optional_internal::optional_data_dtor_base.1075" }
%"class.absl::optional_internal::optional_data_dtor_base.1075" = type { i8, %union.anon.1076 }
%union.anon.1076 = type { %"class.viz::SurfaceId" }
%"class.viz::SurfaceId" = type { %"class.viz::FrameSinkId", %"class.viz::LocalSurfaceId" }
%"class.viz::FrameSinkId" = type { i32, i32 }
%"class.std::__1::__compressed_pair.1077" = type { %"struct.std::__1::__compressed_pair_elem.1078" }
%"struct.std::__1::__compressed_pair_elem.1078" = type { %"class.viz::SurfaceRange"* }
%"class.absl::optional.1082" = type { %"class.absl::optional_internal::optional_data.1083" }
%"class.absl::optional_internal::optional_data.1083" = type { %"class.absl::optional_internal::optional_data_base.1084" }
%"class.absl::optional_internal::optional_data_base.1084" = type { %"class.absl::optional_internal::optional_data_dtor_base.1085" }
%"class.absl::optional_internal::optional_data_dtor_base.1085" = type { i8, [7 x i8], %union.anon.1086 }
%union.anon.1086 = type { %"class.cc::RenderFrameMetadata" }
%"class.cc::RenderFrameMetadata" = type <{ i8, [3 x i8], i32, %"class.absl::optional.1087", %"struct.viz::Selection.1092", i8, %"class.absl::optional.1093", i8, float, %"class.gfx::Size", [4 x i8], %"class.absl::optional.1098", float, float, float, float, i32, [4 x i8] }>
%"class.absl::optional.1087" = type { %"class.absl::optional_internal::optional_data.1088" }
%"class.absl::optional_internal::optional_data.1088" = type { %"class.absl::optional_internal::optional_data_base.1089" }
%"class.absl::optional_internal::optional_data_base.1089" = type { %"class.absl::optional_internal::optional_data_dtor_base.1090" }
%"class.absl::optional_internal::optional_data_dtor_base.1090" = type { i8, %union.anon.1091 }
%union.anon.1091 = type { %"class.gfx::Vector2dF" }
%"struct.viz::Selection.1092" = type { %"class.gfx::SelectionBound", %"class.gfx::SelectionBound" }
%"class.gfx::SelectionBound" = type <{ i32, %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::Point", %"class.gfx::Point", i8, [3 x i8] }>
%"class.absl::optional.1093" = type { %"class.absl::optional_internal::optional_data.1094" }
%"class.absl::optional_internal::optional_data.1094" = type { %"class.absl::optional_internal::optional_data_base.1095" }
%"class.absl::optional_internal::optional_data_base.1095" = type { %"class.absl::optional_internal::optional_data_dtor_base.1096" }
%"class.absl::optional_internal::optional_data_dtor_base.1096" = type { i8, %union.anon.1097 }
%union.anon.1097 = type { %"struct.cc::DelegatedInkBrowserMetadata" }
%"struct.cc::DelegatedInkBrowserMetadata" = type { i8 }
%"class.absl::optional.1098" = type { %"class.absl::optional_internal::optional_data.1099" }
%"class.absl::optional_internal::optional_data.1099" = type { %"class.absl::optional_internal::optional_data_base.1100" }
%"class.absl::optional_internal::optional_data_base.1100" = type { %"class.absl::optional_internal::optional_data_dtor_base.1101" }
%"class.absl::optional_internal::optional_data_dtor_base.1101" = type { i8, %union.anon.1102 }
%union.anon.1102 = type { %"class.viz::LocalSurfaceId" }
%"class.viz::ChildLocalSurfaceIdAllocator" = type { %"class.viz::LocalSurfaceId" }
%"class.std::__1::unique_ptr.585" = type { %"class.std::__1::__compressed_pair.586" }
%"class.std::__1::__compressed_pair.586" = type { %"struct.std::__1::__compressed_pair_elem.587" }
%"struct.std::__1::__compressed_pair_elem.587" = type { %"class.base::MemoryPressureListener"* }
%"class.base::MemoryPressureListener" = type { %"class.base::RepeatingCallback.588", %"class.base::RepeatingCallback.588", %"class.base::Location" }
%"class.base::RepeatingCallback.588" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.cc::PresentationTimeCallbackBuffer" = type { %"class.base::circular_deque.1103" }
%"class.base::circular_deque.1103" = type { %"class.base::internal::VectorBuffer.1104", i64, i64 }
%"class.base::internal::VectorBuffer.1104" = type { %"struct.cc::PresentationTimeCallbackBuffer::FrameTokenInfo"*, i64 }
%"struct.cc::PresentationTimeCallbackBuffer::FrameTokenInfo" = type { i32, %"class.std::__1::vector.413", %"class.std::__1::vector.413" }
%"class.cc::FrameSequenceTrackerCollection" = type { i8, %"class.std::__1::unique_ptr.1105", %"class.base::flat_map.1111", %"class.base::flat_map.1121", %"class.base::RepeatingCallback.1131", %"class.std::__1::vector.1132", %"class.cc::CompositorFrameReportingController"*, %"class.base::flat_map.1140", i64, i64 }
%"class.std::__1::unique_ptr.1105" = type { %"class.std::__1::__compressed_pair.1106" }
%"class.std::__1::__compressed_pair.1106" = type { %"struct.std::__1::__compressed_pair_elem.1107" }
%"struct.std::__1::__compressed_pair_elem.1107" = type { %"class.cc::ThroughputUkmReporter"* }
%"class.cc::ThroughputUkmReporter" = type opaque
%"class.base::flat_map.1111" = type { %"class.base::internal::flat_tree.1112" }
%"class.base::internal::flat_tree.1112" = type { %"class.std::__1::vector.1113" }
%"class.std::__1::vector.1113" = type { %"class.std::__1::__vector_base.1114" }
%"class.std::__1::__vector_base.1114" = type { %"struct.std::__1::pair.1115"*, %"struct.std::__1::pair.1115"*, %"class.std::__1::__compressed_pair.1116" }
%"struct.std::__1::pair.1115" = type opaque
%"class.std::__1::__compressed_pair.1116" = type { %"struct.std::__1::__compressed_pair_elem.1117" }
%"struct.std::__1::__compressed_pair_elem.1117" = type { %"struct.std::__1::pair.1115"* }
%"class.base::flat_map.1121" = type { %"class.base::internal::flat_tree.1122" }
%"class.base::internal::flat_tree.1122" = type { %"class.std::__1::vector.1123" }
%"class.std::__1::vector.1123" = type { %"class.std::__1::__vector_base.1124" }
%"class.std::__1::__vector_base.1124" = type { %"struct.std::__1::pair.1125"*, %"struct.std::__1::pair.1125"*, %"class.std::__1::__compressed_pair.1126" }
%"struct.std::__1::pair.1125" = type opaque
%"class.std::__1::__compressed_pair.1126" = type { %"struct.std::__1::__compressed_pair_elem.1127" }
%"struct.std::__1::__compressed_pair_elem.1127" = type { %"struct.std::__1::pair.1125"* }
%"class.base::RepeatingCallback.1131" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.std::__1::vector.1132" = type { %"class.std::__1::__vector_base.1133" }
%"class.std::__1::__vector_base.1133" = type { %"class.std::__1::unique_ptr.1134"*, %"class.std::__1::unique_ptr.1134"*, %"class.std::__1::__compressed_pair.1135" }
%"class.std::__1::unique_ptr.1134" = type opaque
%"class.std::__1::__compressed_pair.1135" = type { %"struct.std::__1::__compressed_pair_elem.1136" }
%"struct.std::__1::__compressed_pair_elem.1136" = type { %"class.std::__1::unique_ptr.1134"* }
%"class.base::flat_map.1140" = type { %"class.base::internal::flat_tree.1141" }
%"class.base::internal::flat_tree.1141" = type { %"class.std::__1::vector.1142" }
%"class.std::__1::vector.1142" = type { %"class.std::__1::__vector_base.1143" }
%"class.std::__1::__vector_base.1143" = type { %"struct.std::__1::pair.1144"*, %"struct.std::__1::pair.1144"*, %"class.std::__1::__compressed_pair.1145" }
%"struct.std::__1::pair.1144" = type opaque
%"class.std::__1::__compressed_pair.1145" = type { %"struct.std::__1::__compressed_pair_elem.1146" }
%"struct.std::__1::__compressed_pair_elem.1146" = type { %"struct.std::__1::pair.1144"* }
%"class.std::__1::unique_ptr.1150" = type { %"class.std::__1::__compressed_pair.1151" }
%"class.std::__1::__compressed_pair.1151" = type { %"struct.std::__1::__compressed_pair_elem.1152" }
%"struct.std::__1::__compressed_pair_elem.1152" = type { %"class.cc::PaintWorkletLayerPainter"* }
%"class.cc::PaintWorkletLayerPainter" = type opaque
%"class.cc::AnimatedPaintWorkletTracker" = type { %"class.base::flat_map.1156", %"class.base::internal::flat_tree.1166" }
%"class.base::flat_map.1156" = type { %"class.base::internal::flat_tree.1157" }
%"class.base::internal::flat_tree.1157" = type { %"class.std::__1::vector.1158" }
%"class.std::__1::vector.1158" = type { %"class.std::__1::__vector_base.1159" }
%"class.std::__1::__vector_base.1159" = type { %"struct.std::__1::pair.1160"*, %"struct.std::__1::pair.1160"*, %"class.std::__1::__compressed_pair.1161" }
%"struct.std::__1::pair.1160" = type opaque
%"class.std::__1::__compressed_pair.1161" = type { %"struct.std::__1::__compressed_pair_elem.1162" }
%"struct.std::__1::__compressed_pair_elem.1162" = type { %"struct.std::__1::pair.1160"* }
%"class.base::internal::flat_tree.1166" = type { %"class.std::__1::vector.1167" }
%"class.std::__1::vector.1167" = type { %"class.std::__1::__vector_base.1168" }
%"class.std::__1::__vector_base.1168" = type { %"struct.cc::PaintWorkletInput::PropertyKey"*, %"struct.cc::PaintWorkletInput::PropertyKey"*, %"class.std::__1::__compressed_pair.1179" }
%"struct.cc::PaintWorkletInput::PropertyKey" = type { %"class.absl::optional.1169", %"class.absl::optional.1174", %"struct.cc::ElementId" }
%"class.absl::optional.1169" = type { %"class.absl::optional_internal::optional_data.1170" }
%"class.absl::optional_internal::optional_data.1170" = type { %"class.absl::optional_internal::optional_data_base.1171" }
%"class.absl::optional_internal::optional_data_base.1171" = type { %"class.absl::optional_internal::optional_data_dtor_base.1172" }
%"class.absl::optional_internal::optional_data_dtor_base.1172" = type { i8, %union.anon.1173 }
%union.anon.1173 = type { %"class.std::__1::basic_string" }
%"class.absl::optional.1174" = type { %"class.absl::optional_internal::optional_data.1175" }
%"class.absl::optional_internal::optional_data.1175" = type { %"class.absl::optional_internal::optional_data_base.1176" }
%"class.absl::optional_internal::optional_data_base.1176" = type { %"class.absl::optional_internal::optional_data_dtor_base.1177" }
%"class.absl::optional_internal::optional_data_dtor_base.1177" = type { i8, %union.anon.1178 }
%union.anon.1178 = type { i32 }
%"class.std::__1::__compressed_pair.1179" = type { %"struct.std::__1::__compressed_pair_elem.1180" }
%"struct.std::__1::__compressed_pair_elem.1180" = type { %"struct.cc::PaintWorkletInput::PropertyKey"* }
%"class.cc::AverageLagTrackingManager" = type { %"class.cc::AverageLagTracker", %"class.cc::AverageLagTracker", %"class.base::circular_deque.1196" }
%"class.cc::AverageLagTracker" = type <{ i32, [4 x i8], %"class.std::__1::deque.1184", %"class.base::TimeTicks", %"class.base::TimeTicks", float, float, %"class.base::TimeTicks", i8, [3 x i8], float, float, [4 x i8] }>
%"class.std::__1::deque.1184" = type { %"class.std::__1::__deque_base.1185" }
%"class.std::__1::__deque_base.1185" = type { %"struct.std::__1::__split_buffer.1186", i64, %"class.std::__1::__compressed_pair.1192" }
%"struct.std::__1::__split_buffer.1186" = type { %"struct.cc::AverageLagTracker::LagAreaInFrame"**, %"struct.cc::AverageLagTracker::LagAreaInFrame"**, %"struct.cc::AverageLagTracker::LagAreaInFrame"**, %"class.std::__1::__compressed_pair.1187" }
%"struct.cc::AverageLagTracker::LagAreaInFrame" = type { %"class.base::TimeTicks", float, float, float, float }
%"class.std::__1::__compressed_pair.1187" = type { %"struct.std::__1::__compressed_pair_elem.1188" }
%"struct.std::__1::__compressed_pair_elem.1188" = type { %"struct.cc::AverageLagTracker::LagAreaInFrame"** }
%"class.std::__1::__compressed_pair.1192" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.base::circular_deque.1196" = type { %"class.base::internal::VectorBuffer.1197", i64, i64 }
%"class.base::internal::VectorBuffer.1197" = type { %"struct.std::__1::pair.1198"*, i64 }
%"struct.std::__1::pair.1198" = type opaque
%"class.cc::DeJellyState" = type { i8, i32, float, float, %"class.absl::optional.1199", %"class.std::__1::map.1204", %"class.std::__1::map.1204" }
%"class.absl::optional.1199" = type { %"class.absl::optional_internal::optional_data.1200" }
%"class.absl::optional_internal::optional_data.1200" = type { %"class.absl::optional_internal::optional_data_base.1201" }
%"class.absl::optional_internal::optional_data_base.1201" = type { %"class.absl::optional_internal::optional_data_dtor_base.1202" }
%"class.absl::optional_internal::optional_data_dtor_base.1202" = type { i8, [3 x i8], %union.anon.1203 }
%union.anon.1203 = type { %"class.gfx::Transform" }
%"class.std::__1::map.1204" = type { %"class.std::__1::__tree.1205" }
%"class.std::__1::__tree.1205" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1206", %"class.std::__1::__compressed_pair.1210" }
%"class.std::__1::__compressed_pair.1206" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"class.std::__1::__compressed_pair.1210" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::unique_ptr.1213" = type { %"class.std::__1::__compressed_pair.1214" }
%"class.std::__1::__compressed_pair.1214" = type { %"struct.std::__1::__compressed_pair_elem.1215" }
%"struct.std::__1::__compressed_pair_elem.1215" = type { %"class.cc::LCDTextMetricsReporter"* }
%"class.cc::LCDTextMetricsReporter" = type opaque
%"class.cc::FrameRateEstimator" = type { i8, %"class.base::TimeTicks", i64, i8, %"class.cc::DelayedUniqueNotifier" }
%"class.cc::DelayedUniqueNotifier" = type { i32 (...)**, %"class.base::SequencedTaskRunner"*, %"class.base::RepeatingCallback.820", %"class.base::TimeDelta", %"class.base::TimeTicks", i8, %"class.base::WeakPtrFactory.1219" }
%"class.base::WeakPtrFactory.1219" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::WritableSharedMemoryMapping" = type { %"class.base::SharedMemoryMapping" }
%"class.base::SharedMemoryMapping" = type { i32 (...)**, i8*, i64, i64, %"class.base::UnguessableToken" }
%"class.base::MRUCache" = type { %"class.base::MRUCacheBase" }
%"class.base::MRUCacheBase" = type { i32 (...)**, %"class.std::__1::list.1220", %"class.std::__1::map.1227", i64 }
%"class.std::__1::list.1220" = type { %"class.std::__1::__list_imp.1221" }
%"class.std::__1::__list_imp.1221" = type { %"struct.std::__1::__list_node_base.1222", %"class.std::__1::__compressed_pair.1223" }
%"struct.std::__1::__list_node_base.1222" = type { %"struct.std::__1::__list_node_base.1222"*, %"struct.std::__1::__list_node_base.1222"* }
%"class.std::__1::__compressed_pair.1223" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::map.1227" = type { %"class.std::__1::__tree.1228" }
%"class.std::__1::__tree.1228" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1229", %"class.std::__1::__compressed_pair.1233" }
%"class.std::__1::__compressed_pair.1229" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"class.std::__1::__compressed_pair.1233" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.cc::ThrottleDecider" = type { %"class.base::flat_map.1238", %"class.base::internal::flat_tree.1248", %"class.base::internal::flat_tree.1248" }
%"class.base::flat_map.1238" = type { %"class.base::internal::flat_tree.1239" }
%"class.base::internal::flat_tree.1239" = type { %"class.std::__1::vector.1240" }
%"class.std::__1::vector.1240" = type { %"class.std::__1::__vector_base.1241" }
%"class.std::__1::__vector_base.1241" = type { %"struct.std::__1::pair.1242"*, %"struct.std::__1::pair.1242"*, %"class.std::__1::__compressed_pair.1243" }
%"struct.std::__1::pair.1242" = type opaque
%"class.std::__1::__compressed_pair.1243" = type { %"struct.std::__1::__compressed_pair_elem.1244" }
%"struct.std::__1::__compressed_pair_elem.1244" = type { %"struct.std::__1::pair.1242"* }
%"class.base::internal::flat_tree.1248" = type { %"class.std::__1::vector.1249" }
%"class.std::__1::vector.1249" = type { %"class.std::__1::__vector_base.1250" }
%"class.std::__1::__vector_base.1250" = type { %"class.viz::FrameSinkId"*, %"class.viz::FrameSinkId"*, %"class.std::__1::__compressed_pair.1251" }
%"class.std::__1::__compressed_pair.1251" = type { %"struct.std::__1::__compressed_pair_elem.1252" }
%"struct.std::__1::__compressed_pair_elem.1252" = type { %"class.viz::FrameSinkId"* }
%"class.base::WeakPtrFactory.1256" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorINS_10unique_ptrIN2cc14MicroBenchmarkENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_ = comdat any

@_ZN2cc24MicroBenchmarkController8next_id_E = hidden local_unnamed_addr global i32 1, align 4
@.str = private unnamed_addr constant [23 x i8] c"invalidation_benchmark\00", align 1
@.str.1 = private unnamed_addr constant [31 x i8] c"rasterize_and_record_benchmark\00", align 1
@.str.2 = private unnamed_addr constant [24 x i8] c"unittest_only_benchmark\00", align 1

@_ZN2cc24MicroBenchmarkControllerC1EPNS_13LayerTreeHostE = hidden unnamed_addr alias void (%"class.cc::MicroBenchmarkController"*, %"class.cc::LayerTreeHost"*), void (%"class.cc::MicroBenchmarkController"*, %"class.cc::LayerTreeHost"*)* @_ZN2cc24MicroBenchmarkControllerC2EPNS_13LayerTreeHostE
@_ZN2cc24MicroBenchmarkControllerD1Ev = hidden unnamed_addr alias void (%"class.cc::MicroBenchmarkController"*), void (%"class.cc::MicroBenchmarkController"*)* @_ZN2cc24MicroBenchmarkControllerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc24MicroBenchmarkControllerC2EPNS_13LayerTreeHostE(%"class.cc::MicroBenchmarkController"* nocapture, %"class.cc::LayerTreeHost"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::MicroBenchmarkController", %"class.cc::MicroBenchmarkController"* %0, i64 0, i32 0
  store %"class.cc::LayerTreeHost"* %1, %"class.cc::LayerTreeHost"** %3, align 8
  %4 = getelementptr inbounds %"class.cc::MicroBenchmarkController", %"class.cc::MicroBenchmarkController"* %0, i64 0, i32 1
  %5 = bitcast %"class.std::__1::vector"* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #10
  %6 = getelementptr inbounds %"class.cc::MicroBenchmarkController", %"class.cc::MicroBenchmarkController"* %0, i64 0, i32 2
  %7 = tail call zeroext i1 @_ZN4base22ThreadTaskRunnerHandle5IsSetEv() #10
  br i1 %7, label %8, label %17

8:                                                ; preds = %2
  %9 = tail call dereferenceable(8) %class.scoped_refptr.5* @_ZN4base22ThreadTaskRunnerHandle3GetEv() #10
  %10 = getelementptr inbounds %class.scoped_refptr.5, %class.scoped_refptr.5* %9, i64 0, i32 0
  %11 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %10, align 8
  %12 = getelementptr inbounds %class.scoped_refptr.5, %class.scoped_refptr.5* %6, i64 0, i32 0
  store %"class.base::SingleThreadTaskRunner"* %11, %"class.base::SingleThreadTaskRunner"** %12, align 8
  %13 = icmp eq %"class.base::SingleThreadTaskRunner"* %11, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %11, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = atomicrmw add i32* %15, i32 1 monotonic
  br label %19

17:                                               ; preds = %2
  %18 = getelementptr inbounds %class.scoped_refptr.5, %class.scoped_refptr.5* %6, i64 0, i32 0
  store %"class.base::SingleThreadTaskRunner"* null, %"class.base::SingleThreadTaskRunner"** %18, align 8
  br label %19

19:                                               ; preds = %14, %8, %17
  ret void
}

declare zeroext i1 @_ZN4base22ThreadTaskRunnerHandle5IsSetEv() local_unnamed_addr #1

declare dereferenceable(8) %class.scoped_refptr.5* @_ZN4base22ThreadTaskRunnerHandle3GetEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc24MicroBenchmarkControllerD2Ev(%"class.cc::MicroBenchmarkController"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::MicroBenchmarkController", %"class.cc::MicroBenchmarkController"* %0, i64 0, i32 2, i32 0
  %3 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %2, align 8
  %4 = icmp eq %"class.base::SingleThreadTaskRunner"* %3, null
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %3, i64 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.base::RefCountedThreadSafe.6", %"class.base::RefCountedThreadSafe.6"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw sub i32* %7, i32 1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %13

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.base::RefCountedThreadSafe.6", %"class.base::RefCountedThreadSafe.6"* %6, i64 -2
  %12 = bitcast %"class.base::RefCountedThreadSafe.6"* %11 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %12) #10
  br label %13

13:                                               ; preds = %1, %5, %10
  %14 = getelementptr inbounds %"class.cc::MicroBenchmarkController", %"class.cc::MicroBenchmarkController"* %0, i64 0, i32 1
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %14, i64 0, i32 0, i32 0
  %16 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %15, align 8
  %17 = icmp eq %"class.std::__1::unique_ptr"* %16, null
  br i1 %17, label %41, label %18

18:                                               ; preds = %13
  %19 = bitcast %"class.std::__1::unique_ptr"* %16 to i8*
  %20 = getelementptr inbounds %"class.cc::MicroBenchmarkController", %"class.cc::MicroBenchmarkController"* %0, i64 0, i32 1, i32 0, i32 1
  %21 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %20, align 8
  %22 = icmp eq %"class.std::__1::unique_ptr"* %21, %16
  br i1 %22, label %39, label %23

23:                                               ; preds = %18, %34
  %24 = phi %"class.std::__1::unique_ptr"* [ %25, %34 ], [ %21, %18 ]
  %25 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %24, i64 -1
  %26 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %25, i64 0, i32 0, i32 0, i32 0
  %27 = load %"class.cc::MicroBenchmark"*, %"class.cc::MicroBenchmark"** %26, align 8
  store %"class.cc::MicroBenchmark"* null, %"class.cc::MicroBenchmark"** %26, align 8
  %28 = icmp eq %"class.cc::MicroBenchmark"* %27, null
  br i1 %28, label %34, label %29

29:                                               ; preds = %23
  %30 = bitcast %"class.cc::MicroBenchmark"* %27 to void (%"class.cc::MicroBenchmark"*)***
  %31 = load void (%"class.cc::MicroBenchmark"*)**, void (%"class.cc::MicroBenchmark"*)*** %30, align 8
  %32 = getelementptr inbounds void (%"class.cc::MicroBenchmark"*)*, void (%"class.cc::MicroBenchmark"*)** %31, i64 1
  %33 = load void (%"class.cc::MicroBenchmark"*)*, void (%"class.cc::MicroBenchmark"*)** %32, align 8
  tail call void %33(%"class.cc::MicroBenchmark"* nonnull %27) #10
  br label %34

34:                                               ; preds = %29, %23
  %35 = icmp eq %"class.std::__1::unique_ptr"* %25, %16
  br i1 %35, label %36, label %23

36:                                               ; preds = %34
  %37 = bitcast %"class.std::__1::vector"* %14 to i8**
  %38 = load i8*, i8** %37, align 8
  br label %39

39:                                               ; preds = %36, %18
  %40 = phi i8* [ %38, %36 ], [ %19, %18 ]
  store %"class.std::__1::unique_ptr"* %16, %"class.std::__1::unique_ptr"** %20, align 8
  tail call void @_ZdlPv(i8* %40) #11
  br label %41

41:                                               ; preds = %13, %39
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2cc24MicroBenchmarkController11ScheduleRunERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10unique_ptrIN4base5ValueENS1_14default_deleteISC_EEEENSB_12OnceCallbackIFvSF_EEE(%"class.cc::MicroBenchmarkController"*, %"class.std::__1::basic_string"* dereferenceable(24), %"class.base::Value"*, %"class.base::OnceCallback"* nocapture) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.base::OnceCallback", align 8
  %6 = alloca %"class.base::OnceCallback", align 8
  %7 = alloca %"class.base::OnceCallback", align 8
  %8 = alloca %"class.std::__1::unique_ptr", align 8
  %9 = alloca %"class.base::OnceCallback", align 8
  %10 = bitcast %"class.std::__1::unique_ptr"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #10
  %11 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %8, i64 0, i32 0, i32 0, i32 0
  store %"class.cc::MicroBenchmark"* inttoptr (i64 -6148914691236517206 to %"class.cc::MicroBenchmark"*), %"class.cc::MicroBenchmark"** %11, align 8
  %12 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0, i32 0, i32 0
  %13 = bitcast %"class.base::OnceCallback"* %3 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.base::OnceCallback"* %9 to i64*
  store i64 %14, i64* %15, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %12, align 8
  %16 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %17 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %16, i64 0, i32 1, i32 0
  %18 = load i8, i8* %17, align 1
  %19 = icmp slt i8 %18, 0
  %20 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = zext i8 %18 to i64
  %23 = select i1 %19, i64 %21, i64 %22
  %24 = icmp eq i64 %23, 22
  br i1 %24, label %25, label %40

25:                                               ; preds = %4
  %26 = tail call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %1, i64 0, i64 -1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i64 22) #10
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %25
  %29 = load i8, i8* %17, align 1
  %30 = load i64, i64* %20, align 8
  %31 = zext i8 %29 to i64
  br label %40

32:                                               ; preds = %25
  %33 = bitcast %"class.base::OnceCallback"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #10
  %34 = tail call i8* @_Znwm(i64 40) #11
  %35 = bitcast i8* %34 to %"class.cc::InvalidationBenchmark"*
  %36 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %9, i64 0, i32 0, i32 0, i32 0
  %37 = bitcast %"class.base::OnceCallback"* %7 to i64*
  store i64 %14, i64* %37, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %36, align 8
  call void @_ZN2cc21InvalidationBenchmarkC1ENSt3__110unique_ptrIN4base5ValueENS1_14default_deleteIS4_EEEENS3_12OnceCallbackIFvS7_EEE(%"class.cc::InvalidationBenchmark"* nonnull %35, %"class.base::Value"* %2, %"class.base::OnceCallback"* nonnull %7) #10
  %38 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %7, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %38) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #10
  %39 = ptrtoint i8* %34 to i64
  br label %84

40:                                               ; preds = %28, %4
  %41 = phi i64 [ %31, %28 ], [ %22, %4 ]
  %42 = phi i64 [ %30, %28 ], [ %21, %4 ]
  %43 = phi i8 [ %29, %28 ], [ %18, %4 ]
  %44 = icmp slt i8 %43, 0
  %45 = select i1 %44, i64 %42, i64 %41
  %46 = icmp eq i64 %45, 30
  br i1 %46, label %47, label %62

47:                                               ; preds = %40
  %48 = tail call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %1, i64 0, i64 -1, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0), i64 30) #10
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %54, label %50

50:                                               ; preds = %47
  %51 = load i8, i8* %17, align 1
  %52 = load i64, i64* %20, align 8
  %53 = zext i8 %51 to i64
  br label %62

54:                                               ; preds = %47
  %55 = bitcast %"class.base::OnceCallback"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %55) #10
  %56 = tail call i8* @_Znwm(i64 104) #11
  %57 = bitcast i8* %56 to %"class.cc::RasterizeAndRecordBenchmark"*
  %58 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %9, i64 0, i32 0, i32 0, i32 0
  %59 = bitcast %"class.base::OnceCallback"* %6 to i64*
  store i64 %14, i64* %59, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %58, align 8
  call void @_ZN2cc27RasterizeAndRecordBenchmarkC1ENSt3__110unique_ptrIN4base5ValueENS1_14default_deleteIS4_EEEENS3_12OnceCallbackIFvS7_EEE(%"class.cc::RasterizeAndRecordBenchmark"* nonnull %57, %"class.base::Value"* %2, %"class.base::OnceCallback"* nonnull %6) #10
  %60 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %6, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %60) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %55) #10
  %61 = ptrtoint i8* %56 to i64
  br label %84

62:                                               ; preds = %50, %40
  %63 = phi i64 [ %53, %50 ], [ %41, %40 ]
  %64 = phi i64 [ %52, %50 ], [ %42, %40 ]
  %65 = phi i8 [ %51, %50 ], [ %43, %40 ]
  %66 = icmp slt i8 %65, 0
  %67 = select i1 %66, i64 %64, i64 %63
  %68 = icmp eq i64 %67, 23
  br i1 %68, label %69, label %80

69:                                               ; preds = %62
  %70 = tail call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %1, i64 0, i64 -1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0), i64 23) #10
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %80

72:                                               ; preds = %69
  %73 = bitcast %"class.base::OnceCallback"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %73) #10
  %74 = tail call i8* @_Znwm(i64 48) #11
  %75 = bitcast i8* %74 to %"class.cc::UnittestOnlyBenchmark"*
  %76 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %9, i64 0, i32 0, i32 0, i32 0
  %77 = bitcast %"class.base::OnceCallback"* %5 to i64*
  store i64 %14, i64* %77, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %76, align 8
  call void @_ZN2cc21UnittestOnlyBenchmarkC1ENSt3__110unique_ptrIN4base5ValueENS1_14default_deleteIS4_EEEENS3_12OnceCallbackIFvS7_EEE(%"class.cc::UnittestOnlyBenchmark"* nonnull %75, %"class.base::Value"* %2, %"class.base::OnceCallback"* nonnull %5) #10
  %78 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %78) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %73) #10
  %79 = ptrtoint i8* %74 to i64
  br label %84

80:                                               ; preds = %69, %62
  %81 = icmp eq %"class.base::Value"* %2, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %80
  tail call void @_ZN4base5ValueD1Ev(%"class.base::Value"* nonnull %2) #10
  %83 = bitcast %"class.base::Value"* %2 to i8*
  tail call void @_ZdlPv(i8* %83) #11
  br label %84

84:                                               ; preds = %32, %54, %72, %80, %82
  %85 = phi i64 [ 0, %80 ], [ 0, %82 ], [ %79, %72 ], [ %61, %54 ], [ %39, %32 ]
  %86 = inttoptr i64 %85 to %"class.cc::MicroBenchmark"*
  store %"class.cc::MicroBenchmark"* %86, %"class.cc::MicroBenchmark"** %11, align 8
  %87 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %9, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %87) #10
  %88 = icmp eq i64 %85, 0
  br i1 %88, label %89, label %90

89:                                               ; preds = %84
  store %"class.cc::MicroBenchmark"* null, %"class.cc::MicroBenchmark"** %11, align 8
  br label %122

90:                                               ; preds = %84
  %91 = load i32, i32* @_ZN2cc24MicroBenchmarkController8next_id_E, align 4
  %92 = add nsw i32 %91, 1
  %93 = icmp eq i32 %92, 2147483647
  %94 = select i1 %93, i32 1, i32 %92
  store i32 %94, i32* @_ZN2cc24MicroBenchmarkController8next_id_E, align 4
  %95 = getelementptr inbounds %"class.cc::MicroBenchmark", %"class.cc::MicroBenchmark"* %86, i64 0, i32 4
  store i32 %91, i32* %95, align 4
  %96 = getelementptr inbounds %"class.cc::MicroBenchmarkController", %"class.cc::MicroBenchmarkController"* %0, i64 0, i32 1, i32 0, i32 1
  %97 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %96, align 8
  %98 = getelementptr inbounds %"class.cc::MicroBenchmarkController", %"class.cc::MicroBenchmarkController"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %99 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %98, align 8
  %100 = icmp ult %"class.std::__1::unique_ptr"* %97, %99
  br i1 %100, label %101, label %106

101:                                              ; preds = %90
  store %"class.cc::MicroBenchmark"* null, %"class.cc::MicroBenchmark"** %11, align 8
  %102 = bitcast %"class.std::__1::unique_ptr"* %97 to i64*
  store i64 %85, i64* %102, align 8
  %103 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %97, i64 1
  %104 = ptrtoint %"class.std::__1::unique_ptr"* %103 to i64
  %105 = bitcast %"class.std::__1::unique_ptr"** %96 to i64*
  store i64 %104, i64* %105, align 8
  br label %108

106:                                              ; preds = %90
  %107 = getelementptr inbounds %"class.cc::MicroBenchmarkController", %"class.cc::MicroBenchmarkController"* %0, i64 0, i32 1
  call void @_ZNSt3__16vectorINS_10unique_ptrIN2cc14MicroBenchmarkENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_(%"class.std::__1::vector"* %107, %"class.std::__1::unique_ptr"* nonnull dereferenceable(8) %8) #10
  br label %108

108:                                              ; preds = %106, %101
  %109 = getelementptr inbounds %"class.cc::MicroBenchmarkController", %"class.cc::MicroBenchmarkController"* %0, i64 0, i32 0
  %110 = load %"class.cc::LayerTreeHost"*, %"class.cc::LayerTreeHost"** %109, align 8
  %111 = bitcast %"class.cc::LayerTreeHost"* %110 to void (%"class.cc::LayerTreeHost"*)***
  %112 = load void (%"class.cc::LayerTreeHost"*)**, void (%"class.cc::LayerTreeHost"*)*** %111, align 8
  %113 = getelementptr inbounds void (%"class.cc::LayerTreeHost"*)*, void (%"class.cc::LayerTreeHost"*)** %112, i64 17
  %114 = load void (%"class.cc::LayerTreeHost"*)*, void (%"class.cc::LayerTreeHost"*)** %113, align 8
  call void %114(%"class.cc::LayerTreeHost"* %110) #10
  %115 = load %"class.cc::MicroBenchmark"*, %"class.cc::MicroBenchmark"** %11, align 8
  store %"class.cc::MicroBenchmark"* null, %"class.cc::MicroBenchmark"** %11, align 8
  %116 = icmp eq %"class.cc::MicroBenchmark"* %115, null
  br i1 %116, label %122, label %117

117:                                              ; preds = %108
  %118 = bitcast %"class.cc::MicroBenchmark"* %115 to void (%"class.cc::MicroBenchmark"*)***
  %119 = load void (%"class.cc::MicroBenchmark"*)**, void (%"class.cc::MicroBenchmark"*)*** %118, align 8
  %120 = getelementptr inbounds void (%"class.cc::MicroBenchmark"*)*, void (%"class.cc::MicroBenchmark"*)** %119, i64 1
  %121 = load void (%"class.cc::MicroBenchmark"*)*, void (%"class.cc::MicroBenchmark"*)** %120, align 8
  call void %121(%"class.cc::MicroBenchmark"* nonnull %115) #10
  br label %122

122:                                              ; preds = %117, %108, %89
  %123 = phi i32 [ 0, %89 ], [ %91, %108 ], [ %91, %117 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #10
  ret i32 %123
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN2cc24MicroBenchmarkController21GetNextIdAndIncrementEv(%"class.cc::MicroBenchmarkController"* nocapture readnone) local_unnamed_addr #4 align 2 {
  %2 = load i32, i32* @_ZN2cc24MicroBenchmarkController8next_id_E, align 4
  %3 = add nsw i32 %2, 1
  %4 = icmp eq i32 %3, 2147483647
  %5 = select i1 %4, i32 1, i32 %3
  store i32 %5, i32* @_ZN2cc24MicroBenchmarkController8next_id_E, align 4
  ret i32 %2
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2cc24MicroBenchmarkController11SendMessageEiNSt3__110unique_ptrIN4base5ValueENS1_14default_deleteIS4_EEEE(%"class.cc::MicroBenchmarkController"* nocapture readonly, i32, %"class.base::Value"*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.cc::MicroBenchmarkController", %"class.cc::MicroBenchmarkController"* %0, i64 0, i32 1, i32 0, i32 0
  %5 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %4, align 8
  %6 = getelementptr inbounds %"class.cc::MicroBenchmarkController", %"class.cc::MicroBenchmarkController"* %0, i64 0, i32 1, i32 0, i32 1
  %7 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %6, align 8
  %8 = icmp eq %"class.std::__1::unique_ptr"* %5, %7
  br i1 %8, label %19, label %9

9:                                                ; preds = %3, %16
  %10 = phi %"class.std::__1::unique_ptr"* [ %17, %16 ], [ %5, %3 ]
  %11 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %10, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.cc::MicroBenchmark"*, %"class.cc::MicroBenchmark"** %11, align 8
  %13 = getelementptr inbounds %"class.cc::MicroBenchmark", %"class.cc::MicroBenchmark"* %12, i64 0, i32 4
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, %1
  br i1 %15, label %19, label %16

16:                                               ; preds = %9
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %10, i64 1
  %18 = icmp eq %"class.std::__1::unique_ptr"* %17, %7
  br i1 %18, label %30, label %9

19:                                               ; preds = %9, %3
  %20 = phi %"class.std::__1::unique_ptr"* [ %5, %3 ], [ %10, %9 ]
  %21 = icmp eq %"class.std::__1::unique_ptr"* %20, %7
  br i1 %21, label %30, label %22

22:                                               ; preds = %19
  %23 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %20, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.cc::MicroBenchmark"*, %"class.cc::MicroBenchmark"** %23, align 8
  %25 = bitcast %"class.cc::MicroBenchmark"* %24 to i1 (%"class.cc::MicroBenchmark"*, %"class.base::Value"*)***
  %26 = load i1 (%"class.cc::MicroBenchmark"*, %"class.base::Value"*)**, i1 (%"class.cc::MicroBenchmark"*, %"class.base::Value"*)*** %25, align 8
  %27 = getelementptr inbounds i1 (%"class.cc::MicroBenchmark"*, %"class.base::Value"*)*, i1 (%"class.cc::MicroBenchmark"*, %"class.base::Value"*)** %26, i64 4
  %28 = load i1 (%"class.cc::MicroBenchmark"*, %"class.base::Value"*)*, i1 (%"class.cc::MicroBenchmark"*, %"class.base::Value"*)** %27, align 8
  %29 = tail call zeroext i1 %28(%"class.cc::MicroBenchmark"* %24, %"class.base::Value"* %2) #10
  br label %34

30:                                               ; preds = %16, %19
  %31 = icmp eq %"class.base::Value"* %2, null
  br i1 %31, label %34, label %32

32:                                               ; preds = %30
  tail call void @_ZN4base5ValueD1Ev(%"class.base::Value"* nonnull %2) #10
  %33 = bitcast %"class.base::Value"* %2 to i8*
  tail call void @_ZdlPv(i8* %33) #11
  br label %34

34:                                               ; preds = %22, %30, %32
  %35 = phi i1 [ %29, %22 ], [ false, %30 ], [ false, %32 ]
  ret i1 %35
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc24MicroBenchmarkController22ScheduleImplBenchmarksEPNS_17LayerTreeHostImplE(%"class.cc::MicroBenchmarkController"* nocapture readonly, %"class.cc::LayerTreeHostImpl"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::MicroBenchmarkController", %"class.cc::MicroBenchmarkController"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %3, align 8
  %5 = getelementptr inbounds %"class.cc::MicroBenchmarkController", %"class.cc::MicroBenchmarkController"* %0, i64 0, i32 1, i32 0, i32 1
  %6 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %5, align 8
  %7 = icmp eq %"class.std::__1::unique_ptr"* %4, %6
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.cc::MicroBenchmarkController", %"class.cc::MicroBenchmarkController"* %0, i64 0, i32 2, i32 0
  br label %11

10:                                               ; preds = %27, %2
  ret void

11:                                               ; preds = %8, %27
  %12 = phi %"class.std::__1::unique_ptr"* [ %4, %8 ], [ %28, %27 ]
  %13 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %12, i64 0, i32 0, i32 0, i32 0
  %14 = load %"class.cc::MicroBenchmark"*, %"class.cc::MicroBenchmark"** %13, align 8
  %15 = tail call zeroext i1 @_ZNK2cc14MicroBenchmark25ProcessedForBenchmarkImplEv(%"class.cc::MicroBenchmark"* %14) #10
  br i1 %15, label %27, label %16

16:                                               ; preds = %11
  %17 = load %"class.cc::MicroBenchmark"*, %"class.cc::MicroBenchmark"** %13, align 8
  %18 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %9, align 8
  %19 = icmp eq %"class.base::SingleThreadTaskRunner"* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %18, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = atomicrmw add i32* %21, i32 1 monotonic
  br label %23

23:                                               ; preds = %20, %16
  %24 = tail call %"class.cc::MicroBenchmarkImpl"* @_ZN2cc14MicroBenchmark16GetBenchmarkImplE13scoped_refptrIN4base22SingleThreadTaskRunnerEE(%"class.cc::MicroBenchmark"* %17, %"class.base::SingleThreadTaskRunner"* %18) #10
  %25 = icmp eq %"class.cc::MicroBenchmarkImpl"* %24, null
  br i1 %25, label %27, label %26

26:                                               ; preds = %23
  tail call void @_ZN2cc17LayerTreeHostImpl22ScheduleMicroBenchmarkENSt3__110unique_ptrINS_18MicroBenchmarkImplENS1_14default_deleteIS3_EEEE(%"class.cc::LayerTreeHostImpl"* %1, %"class.cc::MicroBenchmarkImpl"* nonnull %24) #10
  br label %27

27:                                               ; preds = %23, %11, %26
  %28 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %12, i64 1
  %29 = icmp eq %"class.std::__1::unique_ptr"* %28, %6
  br i1 %29, label %10, label %11
}

declare zeroext i1 @_ZNK2cc14MicroBenchmark25ProcessedForBenchmarkImplEv(%"class.cc::MicroBenchmark"*) local_unnamed_addr #1

declare %"class.cc::MicroBenchmarkImpl"* @_ZN2cc14MicroBenchmark16GetBenchmarkImplE13scoped_refptrIN4base22SingleThreadTaskRunnerEE(%"class.cc::MicroBenchmark"*, %"class.base::SingleThreadTaskRunner"*) local_unnamed_addr #1

declare void @_ZN2cc17LayerTreeHostImpl22ScheduleMicroBenchmarkENSt3__110unique_ptrINS_18MicroBenchmarkImplENS1_14default_deleteIS3_EEEE(%"class.cc::LayerTreeHostImpl"*, %"class.cc::MicroBenchmarkImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc24MicroBenchmarkController15DidUpdateLayersEv(%"class.cc::MicroBenchmarkController"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::MicroBenchmarkController", %"class.cc::MicroBenchmarkController"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %2, align 8
  %4 = getelementptr inbounds %"class.cc::MicroBenchmarkController", %"class.cc::MicroBenchmarkController"* %0, i64 0, i32 1, i32 0, i32 1
  %5 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %4, align 8
  %6 = icmp eq %"class.std::__1::unique_ptr"* %3, %5
  br i1 %6, label %9, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.cc::MicroBenchmarkController", %"class.cc::MicroBenchmarkController"* %0, i64 0, i32 0
  br label %10

9:                                                ; preds = %22, %1
  tail call void @_ZN2cc24MicroBenchmarkController25CleanUpFinishedBenchmarksEv(%"class.cc::MicroBenchmarkController"* %0)
  ret void

10:                                               ; preds = %7, %22
  %11 = phi %"class.std::__1::unique_ptr"* [ %3, %7 ], [ %23, %22 ]
  %12 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %11, i64 0, i32 0, i32 0, i32 0
  %13 = load %"class.cc::MicroBenchmark"*, %"class.cc::MicroBenchmark"** %12, align 8
  %14 = tail call zeroext i1 @_ZNK2cc14MicroBenchmark6IsDoneEv(%"class.cc::MicroBenchmark"* %13) #10
  br i1 %14, label %22, label %15

15:                                               ; preds = %10
  %16 = load %"class.cc::MicroBenchmark"*, %"class.cc::MicroBenchmark"** %12, align 8
  %17 = load %"class.cc::LayerTreeHost"*, %"class.cc::LayerTreeHost"** %8, align 8
  %18 = bitcast %"class.cc::MicroBenchmark"* %16 to void (%"class.cc::MicroBenchmark"*, %"class.cc::LayerTreeHost"*)***
  %19 = load void (%"class.cc::MicroBenchmark"*, %"class.cc::LayerTreeHost"*)**, void (%"class.cc::MicroBenchmark"*, %"class.cc::LayerTreeHost"*)*** %18, align 8
  %20 = getelementptr inbounds void (%"class.cc::MicroBenchmark"*, %"class.cc::LayerTreeHost"*)*, void (%"class.cc::MicroBenchmark"*, %"class.cc::LayerTreeHost"*)** %19, i64 2
  %21 = load void (%"class.cc::MicroBenchmark"*, %"class.cc::LayerTreeHost"*)*, void (%"class.cc::MicroBenchmark"*, %"class.cc::LayerTreeHost"*)** %20, align 8
  tail call void %21(%"class.cc::MicroBenchmark"* %16, %"class.cc::LayerTreeHost"* %17) #10
  br label %22

22:                                               ; preds = %15, %10
  %23 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %11, i64 1
  %24 = icmp eq %"class.std::__1::unique_ptr"* %23, %5
  br i1 %24, label %9, label %10
}

declare zeroext i1 @_ZNK2cc14MicroBenchmark6IsDoneEv(%"class.cc::MicroBenchmark"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc24MicroBenchmarkController25CleanUpFinishedBenchmarksEv(%"class.cc::MicroBenchmarkController"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::MicroBenchmarkController", %"class.cc::MicroBenchmarkController"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %2, align 8
  %4 = getelementptr inbounds %"class.cc::MicroBenchmarkController", %"class.cc::MicroBenchmarkController"* %0, i64 0, i32 1, i32 0, i32 1
  %5 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %4, align 8
  %6 = icmp eq %"class.std::__1::unique_ptr"* %3, %5
  br i1 %6, label %17, label %7

7:                                                ; preds = %1, %12
  %8 = phi %"class.std::__1::unique_ptr"* [ %13, %12 ], [ %3, %1 ]
  %9 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %8, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.cc::MicroBenchmark"*, %"class.cc::MicroBenchmark"** %9, align 8
  %11 = tail call zeroext i1 @_ZNK2cc14MicroBenchmark6IsDoneEv(%"class.cc::MicroBenchmark"* %10) #10
  br i1 %11, label %17, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %8, i64 1
  %14 = icmp eq %"class.std::__1::unique_ptr"* %13, %5
  br i1 %14, label %15, label %7

15:                                               ; preds = %12
  %16 = ptrtoint %"class.std::__1::unique_ptr"* %5 to i64
  br label %50

17:                                               ; preds = %7, %1
  %18 = phi %"class.std::__1::unique_ptr"* [ %3, %1 ], [ %8, %7 ]
  %19 = ptrtoint %"class.std::__1::unique_ptr"* %18 to i64
  %20 = icmp eq %"class.std::__1::unique_ptr"* %18, %5
  br i1 %20, label %50, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %18, i64 1
  %23 = icmp eq %"class.std::__1::unique_ptr"* %22, %5
  br i1 %23, label %50, label %24

24:                                               ; preds = %21, %46
  %25 = phi %"class.std::__1::unique_ptr"* [ %48, %46 ], [ %22, %21 ]
  %26 = phi i64 [ %47, %46 ], [ %19, %21 ]
  %27 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %25, i64 0, i32 0, i32 0, i32 0
  %28 = load %"class.cc::MicroBenchmark"*, %"class.cc::MicroBenchmark"** %27, align 8
  %29 = tail call zeroext i1 @_ZNK2cc14MicroBenchmark6IsDoneEv(%"class.cc::MicroBenchmark"* %28) #10
  br i1 %29, label %46, label %30

30:                                               ; preds = %24
  %31 = inttoptr i64 %26 to %"class.std::__1::unique_ptr"*
  %32 = bitcast %"class.std::__1::unique_ptr"* %25 to i64*
  %33 = load i64, i64* %32, align 8
  store %"class.cc::MicroBenchmark"* null, %"class.cc::MicroBenchmark"** %27, align 8
  %34 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %31, i64 0, i32 0, i32 0, i32 0
  %35 = load %"class.cc::MicroBenchmark"*, %"class.cc::MicroBenchmark"** %34, align 8
  %36 = inttoptr i64 %26 to i64*
  store i64 %33, i64* %36, align 8
  %37 = icmp eq %"class.cc::MicroBenchmark"* %35, null
  br i1 %37, label %43, label %38

38:                                               ; preds = %30
  %39 = bitcast %"class.cc::MicroBenchmark"* %35 to void (%"class.cc::MicroBenchmark"*)***
  %40 = load void (%"class.cc::MicroBenchmark"*)**, void (%"class.cc::MicroBenchmark"*)*** %39, align 8
  %41 = getelementptr inbounds void (%"class.cc::MicroBenchmark"*)*, void (%"class.cc::MicroBenchmark"*)** %40, i64 1
  %42 = load void (%"class.cc::MicroBenchmark"*)*, void (%"class.cc::MicroBenchmark"*)** %41, align 8
  tail call void %42(%"class.cc::MicroBenchmark"* nonnull %35) #10
  br label %43

43:                                               ; preds = %38, %30
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %31, i64 1
  %45 = ptrtoint %"class.std::__1::unique_ptr"* %44 to i64
  br label %46

46:                                               ; preds = %43, %24
  %47 = phi i64 [ %26, %24 ], [ %45, %43 ]
  %48 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %25, i64 1
  %49 = icmp eq %"class.std::__1::unique_ptr"* %48, %5
  br i1 %49, label %50, label %24

50:                                               ; preds = %46, %21, %17, %15
  %51 = phi i64 [ %19, %17 ], [ %16, %15 ], [ %19, %21 ], [ %47, %46 ]
  %52 = inttoptr i64 %51 to %"class.std::__1::unique_ptr"*
  %53 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %4, align 8
  %54 = icmp eq %"class.std::__1::unique_ptr"* %53, %52
  br i1 %54, label %69, label %55

55:                                               ; preds = %50, %66
  %56 = phi %"class.std::__1::unique_ptr"* [ %57, %66 ], [ %53, %50 ]
  %57 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %56, i64 -1
  %58 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %57, i64 0, i32 0, i32 0, i32 0
  %59 = load %"class.cc::MicroBenchmark"*, %"class.cc::MicroBenchmark"** %58, align 8
  store %"class.cc::MicroBenchmark"* null, %"class.cc::MicroBenchmark"** %58, align 8
  %60 = icmp eq %"class.cc::MicroBenchmark"* %59, null
  br i1 %60, label %66, label %61

61:                                               ; preds = %55
  %62 = bitcast %"class.cc::MicroBenchmark"* %59 to void (%"class.cc::MicroBenchmark"*)***
  %63 = load void (%"class.cc::MicroBenchmark"*)**, void (%"class.cc::MicroBenchmark"*)*** %62, align 8
  %64 = getelementptr inbounds void (%"class.cc::MicroBenchmark"*)*, void (%"class.cc::MicroBenchmark"*)** %63, i64 1
  %65 = load void (%"class.cc::MicroBenchmark"*)*, void (%"class.cc::MicroBenchmark"*)** %64, align 8
  tail call void %65(%"class.cc::MicroBenchmark"* nonnull %59) #10
  br label %66

66:                                               ; preds = %61, %55
  %67 = icmp eq %"class.std::__1::unique_ptr"* %57, %52
  br i1 %67, label %68, label %55

68:                                               ; preds = %66
  store %"class.std::__1::unique_ptr"* %52, %"class.std::__1::unique_ptr"** %4, align 8
  br label %69

69:                                               ; preds = %50, %68
  ret void
}

declare i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"*, i64, i64, i8*, i64) local_unnamed_addr #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

declare void @_ZN2cc21InvalidationBenchmarkC1ENSt3__110unique_ptrIN4base5ValueENS1_14default_deleteIS4_EEEENS3_12OnceCallbackIFvS7_EEE(%"class.cc::InvalidationBenchmark"*, %"class.base::Value"*, %"class.base::OnceCallback"*) unnamed_addr #1

declare void @_ZN2cc27RasterizeAndRecordBenchmarkC1ENSt3__110unique_ptrIN4base5ValueENS1_14default_deleteIS4_EEEENS3_12OnceCallbackIFvS7_EEE(%"class.cc::RasterizeAndRecordBenchmark"*, %"class.base::Value"*, %"class.base::OnceCallback"*) unnamed_addr #1

declare void @_ZN2cc21UnittestOnlyBenchmarkC1ENSt3__110unique_ptrIN4base5ValueENS1_14default_deleteIS4_EEEENS3_12OnceCallbackIFvS7_EEE(%"class.cc::UnittestOnlyBenchmark"*, %"class.base::Value"*, %"class.base::OnceCallback"*) unnamed_addr #1

declare void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base5ValueD1Ev(%"class.base::Value"*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_10unique_ptrIN2cc14MicroBenchmarkENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_(%"class.std::__1::vector"*, %"class.std::__1::unique_ptr"* dereferenceable(8)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #12
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::unique_ptr"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #12
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #11
  %33 = bitcast i8* %32 to %"class.std::__1::unique_ptr"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.std::__1::unique_ptr"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 %9
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 %35
  %39 = ptrtoint %"class.std::__1::unique_ptr"* %38 to i64
  %40 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %1, i64 0, i32 0, i32 0, i32 0
  %41 = bitcast %"class.std::__1::unique_ptr"* %1 to i64*
  %42 = load i64, i64* %41, align 8
  store %"class.cc::MicroBenchmark"* null, %"class.cc::MicroBenchmark"** %40, align 8
  %43 = bitcast %"class.std::__1::unique_ptr"* %37 to i64*
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %37, i64 1
  %45 = ptrtoint %"class.std::__1::unique_ptr"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %47 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %46, align 8
  %48 = ptrtoint %"class.std::__1::unique_ptr"* %47 to i64
  %49 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %3, align 8
  %50 = icmp eq %"class.std::__1::unique_ptr"* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 -1, i32 0, i32 0, i32 0
  %53 = ptrtoint %"class.cc::MicroBenchmark"** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %"class.std::__1::unique_ptr"* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %"class.std::__1::unique_ptr"* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %60, i64 -1
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %61, i64 -1
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store %"class.cc::MicroBenchmark"* null, %"class.cc::MicroBenchmark"** %65, align 8
  %68 = bitcast %"class.std::__1::unique_ptr"* %63 to i64*
  store i64 %67, i64* %68, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !2

71:                                               ; preds = %59, %51
  %72 = phi %"class.std::__1::unique_ptr"* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %"class.std::__1::unique_ptr"* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %"class.std::__1::unique_ptr"* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %"class.std::__1::unique_ptr"* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %"class.std::__1::unique_ptr"* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -1
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %80, i64 0, i32 0, i32 0, i32 0
  %82 = bitcast %"class.std::__1::unique_ptr"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  store %"class.cc::MicroBenchmark"* null, %"class.cc::MicroBenchmark"** %81, align 8
  %84 = bitcast %"class.std::__1::unique_ptr"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -2
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -2
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = bitcast %"class.std::__1::unique_ptr"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  store %"class.cc::MicroBenchmark"* null, %"class.cc::MicroBenchmark"** %87, align 8
  %90 = bitcast %"class.std::__1::unique_ptr"* %85 to i64*
  store i64 %89, i64* %90, align 8
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -3
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -3
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = bitcast %"class.std::__1::unique_ptr"* %92 to i64*
  %95 = load i64, i64* %94, align 8
  store %"class.cc::MicroBenchmark"* null, %"class.cc::MicroBenchmark"** %93, align 8
  %96 = bitcast %"class.std::__1::unique_ptr"* %91 to i64*
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -4
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -4
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %98, i64 0, i32 0, i32 0, i32 0
  %100 = bitcast %"class.std::__1::unique_ptr"* %98 to i64*
  %101 = load i64, i64* %100, align 8
  store %"class.cc::MicroBenchmark"* null, %"class.cc::MicroBenchmark"** %99, align 8
  %102 = bitcast %"class.std::__1::unique_ptr"* %97 to i64*
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -5
  %104 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -5
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %104, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::unique_ptr"* %104 to i64*
  %107 = load i64, i64* %106, align 8
  store %"class.cc::MicroBenchmark"* null, %"class.cc::MicroBenchmark"** %105, align 8
  %108 = bitcast %"class.std::__1::unique_ptr"* %103 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -6
  %110 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -6
  %111 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %110, i64 0, i32 0, i32 0, i32 0
  %112 = bitcast %"class.std::__1::unique_ptr"* %110 to i64*
  %113 = load i64, i64* %112, align 8
  store %"class.cc::MicroBenchmark"* null, %"class.cc::MicroBenchmark"** %111, align 8
  %114 = bitcast %"class.std::__1::unique_ptr"* %109 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -7
  %116 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -7
  %117 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %116, i64 0, i32 0, i32 0, i32 0
  %118 = bitcast %"class.std::__1::unique_ptr"* %116 to i64*
  %119 = load i64, i64* %118, align 8
  store %"class.cc::MicroBenchmark"* null, %"class.cc::MicroBenchmark"** %117, align 8
  %120 = bitcast %"class.std::__1::unique_ptr"* %115 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -8
  %122 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -8
  %123 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %122, i64 0, i32 0, i32 0, i32 0
  %124 = bitcast %"class.std::__1::unique_ptr"* %122 to i64*
  %125 = load i64, i64* %124, align 8
  store %"class.cc::MicroBenchmark"* null, %"class.cc::MicroBenchmark"** %123, align 8
  %126 = bitcast %"class.std::__1::unique_ptr"* %121 to i64*
  store i64 %125, i64* %126, align 8
  %127 = icmp eq %"class.std::__1::unique_ptr"* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %"class.std::__1::unique_ptr"* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %"class.std::__1::unique_ptr"* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %"class.std::__1::unique_ptr"* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %"class.std::__1::unique_ptr"* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %"class.std::__1::unique_ptr"*
  %138 = icmp eq %"class.std::__1::unique_ptr"* %133, %137
  br i1 %138, label %152, label %139

139:                                              ; preds = %132, %150
  %140 = phi %"class.std::__1::unique_ptr"* [ %141, %150 ], [ %133, %132 ]
  %141 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %140, i64 -1
  %142 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %141, i64 0, i32 0, i32 0, i32 0
  %143 = load %"class.cc::MicroBenchmark"*, %"class.cc::MicroBenchmark"** %142, align 8
  store %"class.cc::MicroBenchmark"* null, %"class.cc::MicroBenchmark"** %142, align 8
  %144 = icmp eq %"class.cc::MicroBenchmark"* %143, null
  br i1 %144, label %150, label %145

145:                                              ; preds = %139
  %146 = bitcast %"class.cc::MicroBenchmark"* %143 to void (%"class.cc::MicroBenchmark"*)***
  %147 = load void (%"class.cc::MicroBenchmark"*)**, void (%"class.cc::MicroBenchmark"*)*** %146, align 8
  %148 = getelementptr inbounds void (%"class.cc::MicroBenchmark"*)*, void (%"class.cc::MicroBenchmark"*)** %147, i64 1
  %149 = load void (%"class.cc::MicroBenchmark"*)*, void (%"class.cc::MicroBenchmark"*)** %148, align 8
  tail call void %149(%"class.cc::MicroBenchmark"* nonnull %143) #10
  br label %150

150:                                              ; preds = %145, %139
  %151 = icmp eq %"class.std::__1::unique_ptr"* %141, %137
  br i1 %151, label %152, label %139

152:                                              ; preds = %150, %132
  %153 = icmp eq i64 %135, 0
  br i1 %153, label %156, label %154

154:                                              ; preds = %152
  %155 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %155) #11
  br label %156

156:                                              ; preds = %152, %154
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
