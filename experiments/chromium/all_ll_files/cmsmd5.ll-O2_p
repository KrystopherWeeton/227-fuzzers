; ModuleID = '../../third_party/pdfium/third_party/lcms/src/cmsmd5.c'
source_filename = "../../third_party/pdfium/third_party/lcms/src/cmsmd5.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct._cmsContext_struct = type { %struct._cmsContext_struct*, %struct._cmsSubAllocator*, [15 x i8*], %struct._cmsMemPluginChunkType }
%struct._cmsSubAllocator = type { %struct._cmsContext_struct*, %struct._cmsSubAllocator_chunk_st* }
%struct._cmsSubAllocator_chunk_st = type { i8*, i32, i32, %struct._cmsSubAllocator_chunk_st* }
%struct._cmsMemPluginChunkType = type { i8* (%struct._cmsContext_struct*, i32)*, i8* (%struct._cmsContext_struct*, i32)*, void (%struct._cmsContext_struct*, i8*)*, i8* (%struct._cmsContext_struct*, i8*, i32)*, i8* (%struct._cmsContext_struct*, i32, i32)*, i8* (%struct._cmsContext_struct*, i8*, i32)* }
%union.cmsProfileID = type { [4 x i32] }
%struct._cms_iccprofile_struct = type { %struct._cms_io_handler*, %struct._cmsContext_struct*, %struct.tm, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, %union.cmsProfileID, i32, [100 x i32], [100 x i32], [100 x i32], [100 x i32], [100 x i32], [100 x i8*], [100 x %struct._cms_typehandler_struct*], i32, i8* }
%struct._cms_io_handler = type { i8*, %struct._cmsContext_struct*, i32, i32, [256 x i8], i32 (%struct._cms_io_handler*, i8*, i32, i32)*, i32 (%struct._cms_io_handler*, i32)*, i32 (%struct._cms_io_handler*)*, i32 (%struct._cms_io_handler*)*, i32 (%struct._cms_io_handler*, i32, i8*)* }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct._cms_typehandler_struct = type { i32, i8* (%struct._cms_typehandler_struct*, %struct._cms_io_handler*, i32*, i32)*, i32 (%struct._cms_typehandler_struct*, %struct._cms_io_handler*, i8*, i32)*, i8* (%struct._cms_typehandler_struct*, i8*, i32)*, void (%struct._cms_typehandler_struct*, i8*)*, %struct._cmsContext_struct*, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden i8* @cmsMD5alloc(%struct._cmsContext_struct*) local_unnamed_addr #0 {
  %2 = tail call i8* @_cmsMallocZero(%struct._cmsContext_struct* %0, i32 96) #4
  %3 = icmp eq i8* %2, null
  br i1 %3, label %12, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds i8, i8* %2, i64 88
  %6 = bitcast i8* %5 to %struct._cmsContext_struct**
  store %struct._cmsContext_struct* %0, %struct._cmsContext_struct** %6, align 8
  %7 = bitcast i8* %2 to <4 x i32>*
  store <4 x i32> <i32 1732584193, i32 -271733879, i32 -1732584194, i32 271733878>, <4 x i32>* %7, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to i32*
  store i32 0, i32* %9, align 8
  %10 = getelementptr inbounds i8, i8* %2, i64 20
  %11 = bitcast i8* %10 to i32*
  store i32 0, i32* %11, align 4
  br label %12

12:                                               ; preds = %1, %4
  ret i8* %2
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @_cmsMallocZero(%struct._cmsContext_struct*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @cmsMD5add(i8* nocapture, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds i8, i8* %0, i64 16
  %5 = bitcast i8* %4 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = shl i32 %2, 3
  %8 = add i32 %6, %7
  store i32 %8, i32* %5, align 8
  %9 = icmp ult i32 %8, %6
  %10 = getelementptr inbounds i8, i8* %0, i64 20
  %11 = bitcast i8* %10 to i32*
  %12 = load i32, i32* %11, align 4
  br i1 %9, label %13, label %15

13:                                               ; preds = %3
  %14 = add i32 %12, 1
  store i32 %14, i32* %11, align 4
  br label %15

15:                                               ; preds = %3, %13
  %16 = phi i32 [ %14, %13 ], [ %12, %3 ]
  %17 = lshr i32 %2, 29
  %18 = add i32 %16, %17
  store i32 %18, i32* %11, align 4
  %19 = lshr i32 %6, 3
  %20 = and i32 %19, 63
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %36, label %22

22:                                               ; preds = %15
  %23 = getelementptr inbounds i8, i8* %0, i64 24
  %24 = zext i32 %20 to i64
  %25 = getelementptr inbounds i8, i8* %23, i64 %24
  %26 = sub nuw nsw i32 64, %20
  %27 = icmp ugt i32 %26, %2
  br i1 %27, label %34, label %28

28:                                               ; preds = %22
  %29 = zext i32 %26 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %1, i64 %29, i1 false)
  %30 = bitcast i8* %0 to i32*
  %31 = bitcast i8* %23 to i32*
  tail call fastcc void @cmsMD5_Transform(i32* %30, i32* %31)
  %32 = getelementptr inbounds i8, i8* %1, i64 %29
  %33 = sub i32 %2, %26
  br label %36

34:                                               ; preds = %22
  %35 = zext i32 %2 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %1, i64 %35, i1 false)
  br label %56

36:                                               ; preds = %28, %15
  %37 = phi i32 [ %2, %15 ], [ %33, %28 ]
  %38 = phi i8* [ %1, %15 ], [ %32, %28 ]
  %39 = icmp ugt i32 %37, 63
  %40 = getelementptr inbounds i8, i8* %0, i64 24
  br i1 %39, label %41, label %52

41:                                               ; preds = %36
  %42 = bitcast i8* %0 to i32*
  %43 = bitcast i8* %40 to i32*
  br label %44

44:                                               ; preds = %41, %44
  %45 = phi i8* [ %38, %41 ], [ %47, %44 ]
  %46 = phi i32 [ %37, %41 ], [ %48, %44 ]
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %40, i8* align 1 %45, i64 64, i1 false)
  tail call fastcc void @cmsMD5_Transform(i32* %42, i32* %43)
  %47 = getelementptr inbounds i8, i8* %45, i64 64
  %48 = add i32 %46, -64
  %49 = icmp ugt i32 %48, 63
  br i1 %49, label %44, label %50

50:                                               ; preds = %44
  %51 = and i32 %37, 63
  br label %52

52:                                               ; preds = %50, %36
  %53 = phi i32 [ %37, %36 ], [ %51, %50 ]
  %54 = phi i8* [ %38, %36 ], [ %47, %50 ]
  %55 = zext i32 %53 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %40, i8* align 1 %54, i64 %55, i1 false)
  br label %56

56:                                               ; preds = %34, %52
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @cmsMD5_Transform(i32* nocapture, i32* nocapture readonly) unnamed_addr #3 {
  %3 = load i32, i32* %0, align 4
  %4 = getelementptr inbounds i32, i32* %0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds i32, i32* %0, i64 2
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 3
  %9 = load i32, i32* %8, align 4
  %10 = xor i32 %9, %7
  %11 = and i32 %10, %5
  %12 = xor i32 %11, %9
  %13 = load i32, i32* %1, align 4
  %14 = add i32 %3, -680876936
  %15 = add i32 %14, %13
  %16 = add i32 %15, %12
  %17 = shl i32 %16, 7
  %18 = lshr i32 %16, 25
  %19 = or i32 %17, %18
  %20 = add i32 %19, %5
  %21 = xor i32 %7, %5
  %22 = and i32 %20, %21
  %23 = xor i32 %22, %7
  %24 = getelementptr inbounds i32, i32* %1, i64 1
  %25 = load i32, i32* %24, align 4
  %26 = add i32 %9, -389564586
  %27 = add i32 %26, %25
  %28 = add i32 %27, %23
  %29 = shl i32 %28, 12
  %30 = lshr i32 %28, 20
  %31 = or i32 %29, %30
  %32 = add i32 %31, %20
  %33 = xor i32 %20, %5
  %34 = and i32 %32, %33
  %35 = xor i32 %34, %5
  %36 = getelementptr inbounds i32, i32* %1, i64 2
  %37 = load i32, i32* %36, align 4
  %38 = add i32 %7, 606105819
  %39 = add i32 %38, %37
  %40 = add i32 %39, %35
  %41 = shl i32 %40, 17
  %42 = lshr i32 %40, 15
  %43 = or i32 %41, %42
  %44 = add i32 %43, %32
  %45 = xor i32 %32, %20
  %46 = and i32 %44, %45
  %47 = xor i32 %46, %20
  %48 = getelementptr inbounds i32, i32* %1, i64 3
  %49 = load i32, i32* %48, align 4
  %50 = add i32 %5, -1044525330
  %51 = add i32 %50, %49
  %52 = add i32 %51, %47
  %53 = shl i32 %52, 22
  %54 = lshr i32 %52, 10
  %55 = or i32 %53, %54
  %56 = add i32 %55, %44
  %57 = xor i32 %44, %32
  %58 = and i32 %56, %57
  %59 = xor i32 %58, %32
  %60 = getelementptr inbounds i32, i32* %1, i64 4
  %61 = load i32, i32* %60, align 4
  %62 = add i32 %61, -176418897
  %63 = add i32 %62, %20
  %64 = add i32 %63, %59
  %65 = shl i32 %64, 7
  %66 = lshr i32 %64, 25
  %67 = or i32 %65, %66
  %68 = add i32 %67, %56
  %69 = xor i32 %56, %44
  %70 = and i32 %68, %69
  %71 = xor i32 %70, %44
  %72 = getelementptr inbounds i32, i32* %1, i64 5
  %73 = load i32, i32* %72, align 4
  %74 = add i32 %73, 1200080426
  %75 = add i32 %74, %32
  %76 = add i32 %75, %71
  %77 = shl i32 %76, 12
  %78 = lshr i32 %76, 20
  %79 = or i32 %77, %78
  %80 = add i32 %79, %68
  %81 = xor i32 %68, %56
  %82 = and i32 %80, %81
  %83 = xor i32 %82, %56
  %84 = getelementptr inbounds i32, i32* %1, i64 6
  %85 = load i32, i32* %84, align 4
  %86 = add i32 %85, -1473231341
  %87 = add i32 %86, %44
  %88 = add i32 %87, %83
  %89 = shl i32 %88, 17
  %90 = lshr i32 %88, 15
  %91 = or i32 %89, %90
  %92 = add i32 %91, %80
  %93 = xor i32 %80, %68
  %94 = and i32 %92, %93
  %95 = xor i32 %94, %68
  %96 = getelementptr inbounds i32, i32* %1, i64 7
  %97 = load i32, i32* %96, align 4
  %98 = add i32 %97, -45705983
  %99 = add i32 %98, %56
  %100 = add i32 %99, %95
  %101 = shl i32 %100, 22
  %102 = lshr i32 %100, 10
  %103 = or i32 %101, %102
  %104 = add i32 %103, %92
  %105 = xor i32 %92, %80
  %106 = and i32 %104, %105
  %107 = xor i32 %106, %80
  %108 = getelementptr inbounds i32, i32* %1, i64 8
  %109 = load i32, i32* %108, align 4
  %110 = add i32 %109, 1770035416
  %111 = add i32 %110, %68
  %112 = add i32 %111, %107
  %113 = shl i32 %112, 7
  %114 = lshr i32 %112, 25
  %115 = or i32 %113, %114
  %116 = add i32 %115, %104
  %117 = xor i32 %104, %92
  %118 = and i32 %116, %117
  %119 = xor i32 %118, %92
  %120 = getelementptr inbounds i32, i32* %1, i64 9
  %121 = load i32, i32* %120, align 4
  %122 = add i32 %121, -1958414417
  %123 = add i32 %122, %80
  %124 = add i32 %123, %119
  %125 = shl i32 %124, 12
  %126 = lshr i32 %124, 20
  %127 = or i32 %125, %126
  %128 = add i32 %127, %116
  %129 = xor i32 %116, %104
  %130 = and i32 %128, %129
  %131 = xor i32 %130, %104
  %132 = getelementptr inbounds i32, i32* %1, i64 10
  %133 = load i32, i32* %132, align 4
  %134 = add i32 %133, -42063
  %135 = add i32 %134, %92
  %136 = add i32 %135, %131
  %137 = shl i32 %136, 17
  %138 = lshr i32 %136, 15
  %139 = or i32 %137, %138
  %140 = add i32 %139, %128
  %141 = xor i32 %128, %116
  %142 = and i32 %140, %141
  %143 = xor i32 %142, %116
  %144 = getelementptr inbounds i32, i32* %1, i64 11
  %145 = load i32, i32* %144, align 4
  %146 = add i32 %145, -1990404162
  %147 = add i32 %146, %104
  %148 = add i32 %147, %143
  %149 = shl i32 %148, 22
  %150 = lshr i32 %148, 10
  %151 = or i32 %149, %150
  %152 = add i32 %151, %140
  %153 = xor i32 %140, %128
  %154 = and i32 %152, %153
  %155 = xor i32 %154, %128
  %156 = getelementptr inbounds i32, i32* %1, i64 12
  %157 = load i32, i32* %156, align 4
  %158 = add i32 %157, 1804603682
  %159 = add i32 %158, %116
  %160 = add i32 %159, %155
  %161 = shl i32 %160, 7
  %162 = lshr i32 %160, 25
  %163 = or i32 %161, %162
  %164 = add i32 %163, %152
  %165 = xor i32 %152, %140
  %166 = and i32 %164, %165
  %167 = xor i32 %166, %140
  %168 = getelementptr inbounds i32, i32* %1, i64 13
  %169 = load i32, i32* %168, align 4
  %170 = add i32 %169, -40341101
  %171 = add i32 %170, %128
  %172 = add i32 %171, %167
  %173 = shl i32 %172, 12
  %174 = lshr i32 %172, 20
  %175 = or i32 %173, %174
  %176 = add i32 %175, %164
  %177 = xor i32 %164, %152
  %178 = and i32 %176, %177
  %179 = xor i32 %178, %152
  %180 = getelementptr inbounds i32, i32* %1, i64 14
  %181 = load i32, i32* %180, align 4
  %182 = add i32 %181, -1502002290
  %183 = add i32 %182, %140
  %184 = add i32 %183, %179
  %185 = shl i32 %184, 17
  %186 = lshr i32 %184, 15
  %187 = or i32 %185, %186
  %188 = add i32 %187, %176
  %189 = xor i32 %176, %164
  %190 = and i32 %188, %189
  %191 = xor i32 %190, %164
  %192 = getelementptr inbounds i32, i32* %1, i64 15
  %193 = load i32, i32* %192, align 4
  %194 = add i32 %193, 1236535329
  %195 = add i32 %194, %152
  %196 = add i32 %195, %191
  %197 = shl i32 %196, 22
  %198 = lshr i32 %196, 10
  %199 = or i32 %197, %198
  %200 = add i32 %199, %188
  %201 = xor i32 %200, %188
  %202 = and i32 %201, %176
  %203 = xor i32 %202, %188
  %204 = add i32 %25, -165796510
  %205 = add i32 %204, %164
  %206 = add i32 %205, %203
  %207 = shl i32 %206, 5
  %208 = lshr i32 %206, 27
  %209 = or i32 %207, %208
  %210 = add i32 %209, %200
  %211 = xor i32 %210, %200
  %212 = and i32 %211, %188
  %213 = xor i32 %212, %200
  %214 = add i32 %85, -1069501632
  %215 = add i32 %214, %176
  %216 = add i32 %215, %213
  %217 = shl i32 %216, 9
  %218 = lshr i32 %216, 23
  %219 = or i32 %217, %218
  %220 = add i32 %219, %210
  %221 = xor i32 %220, %210
  %222 = and i32 %221, %200
  %223 = xor i32 %222, %210
  %224 = add i32 %145, 643717713
  %225 = add i32 %224, %188
  %226 = add i32 %225, %223
  %227 = shl i32 %226, 14
  %228 = lshr i32 %226, 18
  %229 = or i32 %227, %228
  %230 = add i32 %229, %220
  %231 = xor i32 %230, %220
  %232 = and i32 %231, %210
  %233 = xor i32 %232, %220
  %234 = add i32 %13, -373897302
  %235 = add i32 %234, %200
  %236 = add i32 %235, %233
  %237 = shl i32 %236, 20
  %238 = lshr i32 %236, 12
  %239 = or i32 %237, %238
  %240 = add i32 %239, %230
  %241 = xor i32 %240, %230
  %242 = and i32 %241, %220
  %243 = xor i32 %242, %230
  %244 = add i32 %73, -701558691
  %245 = add i32 %244, %210
  %246 = add i32 %245, %243
  %247 = shl i32 %246, 5
  %248 = lshr i32 %246, 27
  %249 = or i32 %247, %248
  %250 = add i32 %249, %240
  %251 = xor i32 %250, %240
  %252 = and i32 %251, %230
  %253 = xor i32 %252, %240
  %254 = add i32 %133, 38016083
  %255 = add i32 %254, %220
  %256 = add i32 %255, %253
  %257 = shl i32 %256, 9
  %258 = lshr i32 %256, 23
  %259 = or i32 %257, %258
  %260 = add i32 %259, %250
  %261 = xor i32 %260, %250
  %262 = and i32 %261, %240
  %263 = xor i32 %262, %250
  %264 = add i32 %193, -660478335
  %265 = add i32 %264, %230
  %266 = add i32 %265, %263
  %267 = shl i32 %266, 14
  %268 = lshr i32 %266, 18
  %269 = or i32 %267, %268
  %270 = add i32 %269, %260
  %271 = xor i32 %270, %260
  %272 = and i32 %271, %250
  %273 = xor i32 %272, %260
  %274 = add i32 %61, -405537848
  %275 = add i32 %274, %240
  %276 = add i32 %275, %273
  %277 = shl i32 %276, 20
  %278 = lshr i32 %276, 12
  %279 = or i32 %277, %278
  %280 = add i32 %279, %270
  %281 = xor i32 %280, %270
  %282 = and i32 %281, %260
  %283 = xor i32 %282, %270
  %284 = add i32 %121, 568446438
  %285 = add i32 %284, %250
  %286 = add i32 %285, %283
  %287 = shl i32 %286, 5
  %288 = lshr i32 %286, 27
  %289 = or i32 %287, %288
  %290 = add i32 %289, %280
  %291 = xor i32 %290, %280
  %292 = and i32 %291, %270
  %293 = xor i32 %292, %280
  %294 = add i32 %181, -1019803690
  %295 = add i32 %294, %260
  %296 = add i32 %295, %293
  %297 = shl i32 %296, 9
  %298 = lshr i32 %296, 23
  %299 = or i32 %297, %298
  %300 = add i32 %299, %290
  %301 = xor i32 %300, %290
  %302 = and i32 %301, %280
  %303 = xor i32 %302, %290
  %304 = add i32 %49, -187363961
  %305 = add i32 %304, %270
  %306 = add i32 %305, %303
  %307 = shl i32 %306, 14
  %308 = lshr i32 %306, 18
  %309 = or i32 %307, %308
  %310 = add i32 %309, %300
  %311 = xor i32 %310, %300
  %312 = and i32 %311, %290
  %313 = xor i32 %312, %300
  %314 = add i32 %109, 1163531501
  %315 = add i32 %314, %280
  %316 = add i32 %315, %313
  %317 = shl i32 %316, 20
  %318 = lshr i32 %316, 12
  %319 = or i32 %317, %318
  %320 = add i32 %319, %310
  %321 = xor i32 %320, %310
  %322 = and i32 %321, %300
  %323 = xor i32 %322, %310
  %324 = add i32 %169, -1444681467
  %325 = add i32 %324, %290
  %326 = add i32 %325, %323
  %327 = shl i32 %326, 5
  %328 = lshr i32 %326, 27
  %329 = or i32 %327, %328
  %330 = add i32 %329, %320
  %331 = xor i32 %330, %320
  %332 = and i32 %331, %310
  %333 = xor i32 %332, %320
  %334 = add i32 %37, -51403784
  %335 = add i32 %334, %300
  %336 = add i32 %335, %333
  %337 = shl i32 %336, 9
  %338 = lshr i32 %336, 23
  %339 = or i32 %337, %338
  %340 = add i32 %339, %330
  %341 = xor i32 %340, %330
  %342 = and i32 %341, %320
  %343 = xor i32 %342, %330
  %344 = add i32 %97, 1735328473
  %345 = add i32 %344, %310
  %346 = add i32 %345, %343
  %347 = shl i32 %346, 14
  %348 = lshr i32 %346, 18
  %349 = or i32 %347, %348
  %350 = add i32 %349, %340
  %351 = xor i32 %350, %340
  %352 = and i32 %351, %330
  %353 = xor i32 %352, %340
  %354 = add i32 %157, -1926607734
  %355 = add i32 %354, %320
  %356 = add i32 %355, %353
  %357 = shl i32 %356, 20
  %358 = lshr i32 %356, 12
  %359 = or i32 %357, %358
  %360 = add i32 %359, %350
  %361 = xor i32 %351, %360
  %362 = add i32 %73, -378558
  %363 = add i32 %362, %330
  %364 = add i32 %363, %361
  %365 = shl i32 %364, 4
  %366 = lshr i32 %364, 28
  %367 = or i32 %365, %366
  %368 = add i32 %367, %360
  %369 = xor i32 %360, %350
  %370 = xor i32 %369, %368
  %371 = add i32 %109, -2022574463
  %372 = add i32 %371, %340
  %373 = add i32 %372, %370
  %374 = shl i32 %373, 11
  %375 = lshr i32 %373, 21
  %376 = or i32 %374, %375
  %377 = add i32 %376, %368
  %378 = xor i32 %368, %360
  %379 = xor i32 %378, %377
  %380 = add i32 %145, 1839030562
  %381 = add i32 %380, %350
  %382 = add i32 %381, %379
  %383 = shl i32 %382, 16
  %384 = lshr i32 %382, 16
  %385 = or i32 %383, %384
  %386 = add i32 %385, %377
  %387 = xor i32 %377, %368
  %388 = xor i32 %387, %386
  %389 = add i32 %181, -35309556
  %390 = add i32 %389, %360
  %391 = add i32 %390, %388
  %392 = shl i32 %391, 23
  %393 = lshr i32 %391, 9
  %394 = or i32 %392, %393
  %395 = add i32 %394, %386
  %396 = xor i32 %386, %377
  %397 = xor i32 %396, %395
  %398 = add i32 %25, -1530992060
  %399 = add i32 %398, %368
  %400 = add i32 %399, %397
  %401 = shl i32 %400, 4
  %402 = lshr i32 %400, 28
  %403 = or i32 %401, %402
  %404 = add i32 %403, %395
  %405 = xor i32 %395, %386
  %406 = xor i32 %405, %404
  %407 = add i32 %61, 1272893353
  %408 = add i32 %407, %377
  %409 = add i32 %408, %406
  %410 = shl i32 %409, 11
  %411 = lshr i32 %409, 21
  %412 = or i32 %410, %411
  %413 = add i32 %412, %404
  %414 = xor i32 %404, %395
  %415 = xor i32 %414, %413
  %416 = add i32 %97, -155497632
  %417 = add i32 %416, %386
  %418 = add i32 %417, %415
  %419 = shl i32 %418, 16
  %420 = lshr i32 %418, 16
  %421 = or i32 %419, %420
  %422 = add i32 %421, %413
  %423 = xor i32 %413, %404
  %424 = xor i32 %423, %422
  %425 = add i32 %133, -1094730640
  %426 = add i32 %425, %395
  %427 = add i32 %426, %424
  %428 = shl i32 %427, 23
  %429 = lshr i32 %427, 9
  %430 = or i32 %428, %429
  %431 = add i32 %430, %422
  %432 = xor i32 %422, %413
  %433 = xor i32 %432, %431
  %434 = add i32 %169, 681279174
  %435 = add i32 %434, %404
  %436 = add i32 %435, %433
  %437 = shl i32 %436, 4
  %438 = lshr i32 %436, 28
  %439 = or i32 %437, %438
  %440 = add i32 %439, %431
  %441 = xor i32 %431, %422
  %442 = xor i32 %441, %440
  %443 = add i32 %13, -358537222
  %444 = add i32 %443, %413
  %445 = add i32 %444, %442
  %446 = shl i32 %445, 11
  %447 = lshr i32 %445, 21
  %448 = or i32 %446, %447
  %449 = add i32 %448, %440
  %450 = xor i32 %440, %431
  %451 = xor i32 %450, %449
  %452 = add i32 %49, -722521979
  %453 = add i32 %452, %422
  %454 = add i32 %453, %451
  %455 = shl i32 %454, 16
  %456 = lshr i32 %454, 16
  %457 = or i32 %455, %456
  %458 = add i32 %457, %449
  %459 = xor i32 %449, %440
  %460 = xor i32 %459, %458
  %461 = add i32 %85, 76029189
  %462 = add i32 %461, %431
  %463 = add i32 %462, %460
  %464 = shl i32 %463, 23
  %465 = lshr i32 %463, 9
  %466 = or i32 %464, %465
  %467 = add i32 %466, %458
  %468 = xor i32 %458, %449
  %469 = xor i32 %468, %467
  %470 = add i32 %121, -640364487
  %471 = add i32 %470, %440
  %472 = add i32 %471, %469
  %473 = shl i32 %472, 4
  %474 = lshr i32 %472, 28
  %475 = or i32 %473, %474
  %476 = add i32 %475, %467
  %477 = xor i32 %467, %458
  %478 = xor i32 %477, %476
  %479 = add i32 %157, -421815835
  %480 = add i32 %479, %449
  %481 = add i32 %480, %478
  %482 = shl i32 %481, 11
  %483 = lshr i32 %481, 21
  %484 = or i32 %482, %483
  %485 = add i32 %484, %476
  %486 = xor i32 %476, %467
  %487 = xor i32 %486, %485
  %488 = add i32 %193, 530742520
  %489 = add i32 %488, %458
  %490 = add i32 %489, %487
  %491 = shl i32 %490, 16
  %492 = lshr i32 %490, 16
  %493 = or i32 %491, %492
  %494 = add i32 %493, %485
  %495 = xor i32 %485, %476
  %496 = xor i32 %495, %494
  %497 = add i32 %37, -995338651
  %498 = add i32 %497, %467
  %499 = add i32 %498, %496
  %500 = shl i32 %499, 23
  %501 = lshr i32 %499, 9
  %502 = or i32 %500, %501
  %503 = add i32 %502, %494
  %504 = xor i32 %485, -1
  %505 = or i32 %503, %504
  %506 = xor i32 %505, %494
  %507 = add i32 %13, -198630844
  %508 = add i32 %507, %476
  %509 = add i32 %508, %506
  %510 = shl i32 %509, 6
  %511 = lshr i32 %509, 26
  %512 = or i32 %510, %511
  %513 = add i32 %512, %503
  %514 = xor i32 %494, -1
  %515 = or i32 %513, %514
  %516 = xor i32 %515, %503
  %517 = add i32 %97, 1126891415
  %518 = add i32 %517, %485
  %519 = add i32 %518, %516
  %520 = shl i32 %519, 10
  %521 = lshr i32 %519, 22
  %522 = or i32 %520, %521
  %523 = add i32 %522, %513
  %524 = xor i32 %503, -1
  %525 = or i32 %523, %524
  %526 = xor i32 %525, %513
  %527 = add i32 %181, -1416354905
  %528 = add i32 %527, %494
  %529 = add i32 %528, %526
  %530 = shl i32 %529, 15
  %531 = lshr i32 %529, 17
  %532 = or i32 %530, %531
  %533 = add i32 %532, %523
  %534 = xor i32 %513, -1
  %535 = or i32 %533, %534
  %536 = xor i32 %535, %523
  %537 = add i32 %73, -57434055
  %538 = add i32 %537, %503
  %539 = add i32 %538, %536
  %540 = shl i32 %539, 21
  %541 = lshr i32 %539, 11
  %542 = or i32 %540, %541
  %543 = add i32 %542, %533
  %544 = xor i32 %523, -1
  %545 = or i32 %543, %544
  %546 = xor i32 %545, %533
  %547 = add i32 %157, 1700485571
  %548 = add i32 %547, %513
  %549 = add i32 %548, %546
  %550 = shl i32 %549, 6
  %551 = lshr i32 %549, 26
  %552 = or i32 %550, %551
  %553 = add i32 %552, %543
  %554 = xor i32 %533, -1
  %555 = or i32 %553, %554
  %556 = xor i32 %555, %543
  %557 = add i32 %49, -1894986606
  %558 = add i32 %557, %523
  %559 = add i32 %558, %556
  %560 = shl i32 %559, 10
  %561 = lshr i32 %559, 22
  %562 = or i32 %560, %561
  %563 = add i32 %562, %553
  %564 = xor i32 %543, -1
  %565 = or i32 %563, %564
  %566 = xor i32 %565, %553
  %567 = add i32 %133, -1051523
  %568 = add i32 %567, %533
  %569 = add i32 %568, %566
  %570 = shl i32 %569, 15
  %571 = lshr i32 %569, 17
  %572 = or i32 %570, %571
  %573 = add i32 %572, %563
  %574 = xor i32 %553, -1
  %575 = or i32 %573, %574
  %576 = xor i32 %575, %563
  %577 = add i32 %25, -2054922799
  %578 = add i32 %577, %543
  %579 = add i32 %578, %576
  %580 = shl i32 %579, 21
  %581 = lshr i32 %579, 11
  %582 = or i32 %580, %581
  %583 = add i32 %582, %573
  %584 = xor i32 %563, -1
  %585 = or i32 %583, %584
  %586 = xor i32 %585, %573
  %587 = add i32 %109, 1873313359
  %588 = add i32 %587, %553
  %589 = add i32 %588, %586
  %590 = shl i32 %589, 6
  %591 = lshr i32 %589, 26
  %592 = or i32 %590, %591
  %593 = add i32 %592, %583
  %594 = xor i32 %573, -1
  %595 = or i32 %593, %594
  %596 = xor i32 %595, %583
  %597 = add i32 %193, -30611744
  %598 = add i32 %597, %563
  %599 = add i32 %598, %596
  %600 = shl i32 %599, 10
  %601 = lshr i32 %599, 22
  %602 = or i32 %600, %601
  %603 = add i32 %602, %593
  %604 = xor i32 %583, -1
  %605 = or i32 %603, %604
  %606 = xor i32 %605, %593
  %607 = add i32 %85, -1560198380
  %608 = add i32 %607, %573
  %609 = add i32 %608, %606
  %610 = shl i32 %609, 15
  %611 = lshr i32 %609, 17
  %612 = or i32 %610, %611
  %613 = add i32 %612, %603
  %614 = xor i32 %593, -1
  %615 = or i32 %613, %614
  %616 = xor i32 %615, %603
  %617 = add i32 %169, 1309151649
  %618 = add i32 %617, %583
  %619 = add i32 %618, %616
  %620 = shl i32 %619, 21
  %621 = lshr i32 %619, 11
  %622 = or i32 %620, %621
  %623 = add i32 %622, %613
  %624 = xor i32 %603, -1
  %625 = or i32 %623, %624
  %626 = xor i32 %625, %613
  %627 = add i32 %61, -145523070
  %628 = add i32 %627, %593
  %629 = add i32 %628, %626
  %630 = shl i32 %629, 6
  %631 = lshr i32 %629, 26
  %632 = or i32 %630, %631
  %633 = add i32 %632, %623
  %634 = xor i32 %613, -1
  %635 = or i32 %633, %634
  %636 = xor i32 %635, %623
  %637 = add i32 %145, -1120210379
  %638 = add i32 %637, %603
  %639 = add i32 %638, %636
  %640 = shl i32 %639, 10
  %641 = lshr i32 %639, 22
  %642 = or i32 %640, %641
  %643 = add i32 %642, %633
  %644 = xor i32 %623, -1
  %645 = or i32 %643, %644
  %646 = xor i32 %645, %633
  %647 = add i32 %37, 718787259
  %648 = add i32 %647, %613
  %649 = add i32 %648, %646
  %650 = shl i32 %649, 15
  %651 = lshr i32 %649, 17
  %652 = or i32 %650, %651
  %653 = add i32 %652, %643
  %654 = xor i32 %633, -1
  %655 = or i32 %653, %654
  %656 = xor i32 %655, %643
  %657 = add i32 %121, -343485551
  %658 = add i32 %657, %623
  %659 = add i32 %658, %656
  %660 = shl i32 %659, 21
  %661 = lshr i32 %659, 11
  %662 = or i32 %660, %661
  %663 = add i32 %633, %3
  store i32 %663, i32* %0, align 4
  %664 = add i32 %653, %5
  %665 = add i32 %664, %662
  store i32 %665, i32* %4, align 4
  %666 = add i32 %653, %7
  store i32 %666, i32* %6, align 4
  %667 = add i32 %643, %9
  store i32 %667, i32* %8, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cmsMD5finish(%union.cmsProfileID* nocapture, i8*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds i8, i8* %1, i64 16
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = lshr i32 %5, 3
  %7 = and i32 %6, 63
  %8 = getelementptr inbounds i8, i8* %1, i64 24
  %9 = zext i32 %7 to i64
  %10 = getelementptr inbounds i8, i8* %8, i64 %9
  %11 = getelementptr inbounds i8, i8* %10, i64 1
  store i8 -128, i8* %10, align 1
  %12 = xor i32 %7, 63
  %13 = icmp ult i32 %12, 8
  br i1 %13, label %14, label %19

14:                                               ; preds = %2
  %15 = zext i32 %12 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %11, i8 0, i64 %15, i1 false)
  %16 = bitcast i8* %1 to i32*
  %17 = bitcast i8* %8 to i32*
  tail call fastcc void @cmsMD5_Transform(i32* %16, i32* %17)
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 56, i1 false)
  %18 = load i32, i32* %4, align 8
  br label %24

19:                                               ; preds = %2
  %20 = add nsw i32 %12, -8
  %21 = zext i32 %20 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %11, i8 0, i64 %21, i1 false)
  %22 = bitcast i8* %8 to i32*
  %23 = bitcast i8* %1 to i32*
  br label %24

24:                                               ; preds = %19, %14
  %25 = phi i32* [ %23, %19 ], [ %16, %14 ]
  %26 = phi i32* [ %22, %19 ], [ %17, %14 ]
  %27 = phi i32 [ %5, %19 ], [ %18, %14 ]
  %28 = getelementptr inbounds i8, i8* %1, i64 80
  %29 = bitcast i8* %28 to i32*
  store i32 %27, i32* %29, align 8
  %30 = getelementptr inbounds i8, i8* %1, i64 20
  %31 = bitcast i8* %30 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds i8, i8* %1, i64 84
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 4
  tail call fastcc void @cmsMD5_Transform(i32* %25, i32* %26)
  %35 = bitcast %union.cmsProfileID* %0 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %35, i8* align 8 %1, i64 16, i1 false)
  %36 = getelementptr inbounds i8, i8* %1, i64 88
  %37 = bitcast i8* %36 to %struct._cmsContext_struct**
  %38 = load %struct._cmsContext_struct*, %struct._cmsContext_struct** %37, align 8
  tail call void @_cmsFree(%struct._cmsContext_struct* %38, i8* %1) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_cmsFree(%struct._cmsContext_struct*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cmsMD5computeID(i8*) local_unnamed_addr #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct._cms_iccprofile_struct, align 8
  %4 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #4
  store i32 -1431655766, i32* %2, align 4
  %5 = bitcast %struct._cms_iccprofile_struct* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 3752, i8* nonnull %5)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 3752, i1 false)
  %6 = tail call %struct._cmsContext_struct* @cmsGetProfileContextID(i8* %0) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %5, i8* align 8 %0, i64 3752, i1 false)
  %7 = getelementptr inbounds i8, i8* %0, i64 104
  %8 = bitcast i8* %7 to i64*
  store i64 0, i64* %8, align 8
  %9 = getelementptr inbounds i8, i8* %0, i64 88
  %10 = bitcast i8* %9 to i32*
  store i32 0, i32* %10, align 8
  %11 = getelementptr inbounds i8, i8* %0, i64 116
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 16, i1 false)
  %12 = call i32 @cmsSaveProfileToMem(i8* %0, i8* null, i32* nonnull %2) #4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %79, label %14

14:                                               ; preds = %1
  %15 = load i32, i32* %2, align 4
  %16 = call i8* @_cmsMalloc(%struct._cmsContext_struct* %6, i32 %15) #4
  %17 = icmp eq i8* %16, null
  br i1 %17, label %79, label %18

18:                                               ; preds = %14
  %19 = call i32 @cmsSaveProfileToMem(i8* %0, i8* nonnull %16, i32* nonnull %2) #4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %78, label %21

21:                                               ; preds = %18
  %22 = call i8* @_cmsMallocZero(%struct._cmsContext_struct* %6, i32 96) #4
  %23 = icmp eq i8* %22, null
  br i1 %23, label %78, label %24

24:                                               ; preds = %21
  %25 = getelementptr inbounds i8, i8* %22, i64 88
  %26 = bitcast i8* %25 to %struct._cmsContext_struct**
  store %struct._cmsContext_struct* %6, %struct._cmsContext_struct** %26, align 8
  %27 = bitcast i8* %22 to i32*
  %28 = bitcast i8* %22 to <4 x i32>*
  store <4 x i32> <i32 1732584193, i32 -271733879, i32 -1732584194, i32 271733878>, <4 x i32>* %28, align 8
  %29 = getelementptr inbounds i8, i8* %22, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = getelementptr inbounds i8, i8* %22, i64 20
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %2, align 4
  %34 = shl i32 %33, 3
  store i32 %34, i32* %30, align 8
  %35 = lshr i32 %33, 29
  store i32 %35, i32* %32, align 4
  %36 = icmp ugt i32 %33, 63
  %37 = getelementptr inbounds i8, i8* %22, i64 24
  br i1 %36, label %38, label %48

38:                                               ; preds = %24
  %39 = bitcast i8* %37 to i32*
  br label %40

40:                                               ; preds = %40, %38
  %41 = phi i8* [ %16, %38 ], [ %43, %40 ]
  %42 = phi i32 [ %33, %38 ], [ %44, %40 ]
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %37, i8* align 1 %41, i64 64, i1 false) #4
  call fastcc void @cmsMD5_Transform(i32* nonnull %27, i32* %39) #4
  %43 = getelementptr inbounds i8, i8* %41, i64 64
  %44 = add i32 %42, -64
  %45 = icmp ugt i32 %44, 63
  br i1 %45, label %40, label %46

46:                                               ; preds = %40
  %47 = and i32 %33, 63
  br label %48

48:                                               ; preds = %24, %46
  %49 = phi i32 [ %33, %24 ], [ %47, %46 ]
  %50 = phi i8* [ %16, %24 ], [ %43, %46 ]
  %51 = zext i32 %49 to i64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %37, i8* align 1 %50, i64 %51, i1 false) #4
  call void @_cmsFree(%struct._cmsContext_struct* %6, i8* nonnull %16) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %0, i8* nonnull align 8 %5, i64 3752, i1 false)
  %52 = load i32, i32* %30, align 8
  %53 = lshr i32 %52, 3
  %54 = and i32 %53, 63
  %55 = getelementptr inbounds i8, i8* %22, i64 24
  %56 = zext i32 %54 to i64
  %57 = getelementptr inbounds i8, i8* %55, i64 %56
  %58 = getelementptr inbounds i8, i8* %57, i64 1
  store i8 -128, i8* %57, align 1
  %59 = xor i32 %54, 63
  %60 = icmp ult i32 %59, 8
  br i1 %60, label %61, label %65

61:                                               ; preds = %48
  %62 = zext i32 %59 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %58, i8 0, i64 %62, i1 false) #4
  %63 = bitcast i8* %55 to i32*
  call fastcc void @cmsMD5_Transform(i32* nonnull %27, i32* %63) #4
  call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 56, i1 false) #4
  %64 = load i32, i32* %30, align 8
  br label %69

65:                                               ; preds = %48
  %66 = add nsw i32 %59, -8
  %67 = zext i32 %66 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %58, i8 0, i64 %67, i1 false) #4
  %68 = bitcast i8* %55 to i32*
  br label %69

69:                                               ; preds = %61, %65
  %70 = phi i32* [ %68, %65 ], [ %63, %61 ]
  %71 = phi i32 [ %52, %65 ], [ %64, %61 ]
  %72 = getelementptr inbounds i8, i8* %22, i64 80
  %73 = bitcast i8* %72 to i32*
  store i32 %71, i32* %73, align 8
  %74 = load i32, i32* %32, align 4
  %75 = getelementptr inbounds i8, i8* %22, i64 84
  %76 = bitcast i8* %75 to i32*
  store i32 %74, i32* %76, align 4
  call fastcc void @cmsMD5_Transform(i32* nonnull %27, i32* %70) #4
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %11, i8* nonnull align 8 %22, i64 16, i1 false) #4
  %77 = load %struct._cmsContext_struct*, %struct._cmsContext_struct** %26, align 8
  call void @_cmsFree(%struct._cmsContext_struct* %77, i8* nonnull %22) #4
  br label %80

78:                                               ; preds = %21, %18
  call void @_cmsFree(%struct._cmsContext_struct* %6, i8* nonnull %16) #4
  br label %79

79:                                               ; preds = %1, %14, %78
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %0, i8* nonnull align 8 %5, i64 3752, i1 false)
  br label %80

80:                                               ; preds = %79, %69
  %81 = phi i32 [ 0, %79 ], [ 1, %69 ]
  call void @llvm.lifetime.end.p0i8(i64 3752, i8* nonnull %5)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #4
  ret i32 %81
}

declare %struct._cmsContext_struct* @cmsGetProfileContextID(i8*) local_unnamed_addr #2

declare i32 @cmsSaveProfileToMem(i8*, i8*, i32*) local_unnamed_addr #2

declare i8* @_cmsMalloc(%struct._cmsContext_struct*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
