; ModuleID = '../../third_party/libzip/src/lib/zip_file_replace.c'
source_filename = "../../third_party/libzip/src/lib/zip_file_replace.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @zip_file_replace(%struct.zip*, i64, %struct.zip_source*, i32) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 9
  %6 = load i64, i64* %5, align 8
  %7 = icmp ule i64 %6, %1
  %8 = icmp eq %struct.zip_source* %2, null
  %9 = or i1 %8, %7
  br i1 %9, label %10, label %12

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %11, i32 18, i32 0) #2
  br label %16

12:                                               ; preds = %4
  %13 = tail call i64 @_zip_file_replace(%struct.zip* %0, i64 %1, i8* null, %struct.zip_source* nonnull %2, i32 %3)
  %14 = icmp eq i64 %13, -1
  %15 = sext i1 %14 to i32
  br label %16

16:                                               ; preds = %12, %10
  %17 = phi i32 [ -1, %10 ], [ %15, %12 ]
  ret i32 %17
}

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_zip_file_replace(%struct.zip*, i64, i8*, %struct.zip_source*, i32) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 4
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 2
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %11, i32 25, i32 0) #2
  br label %79

12:                                               ; preds = %5
  %13 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 9
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %1, -1
  br i1 %15, label %16, label %25

16:                                               ; preds = %12
  %17 = and i32 %4, 8192
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %16
  %20 = tail call i64 @_zip_name_locate(%struct.zip* %0, i8* %2, i32 %4, %struct.zip_error* null) #2
  %21 = icmp eq i64 %20, -1
  br i1 %21, label %22, label %25

22:                                               ; preds = %16, %19
  %23 = tail call i64 @_zip_add_entry(%struct.zip* %0) #2
  %24 = icmp slt i64 %23, 0
  br i1 %24, label %79, label %25

25:                                               ; preds = %22, %19, %12
  %26 = phi i64 [ %1, %12 ], [ %23, %22 ], [ %20, %19 ]
  %27 = icmp eq i8* %2, null
  br i1 %27, label %38, label %28

28:                                               ; preds = %25
  %29 = tail call i32 @_zip_set_name(%struct.zip* %0, i64 %26, i8* nonnull %2, i32 %4) #2
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %38, label %31

31:                                               ; preds = %28
  %32 = load i64, i64* %13, align 8
  %33 = icmp eq i64 %32, %14
  br i1 %33, label %79, label %34

34:                                               ; preds = %31
  %35 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 11
  %36 = load %struct.zip_entry*, %struct.zip_entry** %35, align 8
  %37 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %36, i64 %26
  tail call void @_zip_entry_finalize(%struct.zip_entry* %37) #2
  store i64 %14, i64* %13, align 8
  br label %79

38:                                               ; preds = %28, %25
  %39 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 11
  %40 = load %struct.zip_entry*, %struct.zip_entry** %39, align 8
  %41 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %40, i64 %26
  tail call void @_zip_unchange_data(%struct.zip_entry* %41) #2
  %42 = load %struct.zip_entry*, %struct.zip_entry** %39, align 8
  %43 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %42, i64 %26, i32 0
  %44 = load %struct.zip_dirent*, %struct.zip_dirent** %43, align 8
  %45 = icmp eq %struct.zip_dirent* %44, null
  br i1 %45, label %76, label %46

46:                                               ; preds = %38
  %47 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %42, i64 %26, i32 1
  %48 = load %struct.zip_dirent*, %struct.zip_dirent** %47, align 8
  %49 = icmp eq %struct.zip_dirent* %48, null
  br i1 %49, label %55, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %48, i64 0, i32 0
  %52 = load i32, i32* %51, align 8
  %53 = and i32 %52, 1
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %66, label %76

55:                                               ; preds = %46
  %56 = tail call %struct.zip_dirent* @_zip_dirent_clone(%struct.zip_dirent* nonnull %44) #2
  %57 = load %struct.zip_entry*, %struct.zip_entry** %39, align 8
  %58 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %57, i64 %26, i32 1
  store %struct.zip_dirent* %56, %struct.zip_dirent** %58, align 8
  %59 = icmp eq %struct.zip_dirent* %56, null
  br i1 %59, label %64, label %60

60:                                               ; preds = %55
  %61 = load %struct.zip_entry*, %struct.zip_entry** %39, align 8
  %62 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %61, i64 %26, i32 1
  %63 = load %struct.zip_dirent*, %struct.zip_dirent** %62, align 8
  br label %66

64:                                               ; preds = %55
  %65 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %65, i32 14, i32 0) #2
  br label %79

66:                                               ; preds = %60, %50
  %67 = phi %struct.zip_dirent* [ %63, %60 ], [ %48, %50 ]
  %68 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %67, i64 0, i32 7
  store i32 -2, i32* %68, align 8
  %69 = load %struct.zip_entry*, %struct.zip_entry** %39, align 8
  %70 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %69, i64 %26, i32 1
  %71 = load %struct.zip_dirent*, %struct.zip_dirent** %70, align 8
  %72 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %71, i64 0, i32 0
  %73 = load i32, i32* %72, align 8
  %74 = or i32 %73, 1
  store i32 %74, i32* %72, align 8
  %75 = load %struct.zip_entry*, %struct.zip_entry** %39, align 8
  br label %76

76:                                               ; preds = %38, %66, %50
  %77 = phi %struct.zip_entry* [ %42, %38 ], [ %75, %66 ], [ %42, %50 ]
  %78 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %77, i64 %26, i32 2
  store %struct.zip_source* %3, %struct.zip_source** %78, align 8
  br label %79

79:                                               ; preds = %22, %34, %31, %76, %64, %10
  %80 = phi i64 [ -1, %10 ], [ -1, %64 ], [ %26, %76 ], [ -1, %31 ], [ -1, %34 ], [ -1, %22 ]
  ret i64 %80
}

declare i64 @_zip_name_locate(%struct.zip*, i8*, i32, %struct.zip_error*) local_unnamed_addr #1

declare i64 @_zip_add_entry(%struct.zip*) local_unnamed_addr #1

declare i32 @_zip_set_name(%struct.zip*, i64, i8*, i32) local_unnamed_addr #1

declare void @_zip_entry_finalize(%struct.zip_entry*) local_unnamed_addr #1

declare void @_zip_unchange_data(%struct.zip_entry*) local_unnamed_addr #1

declare %struct.zip_dirent* @_zip_dirent_clone(%struct.zip_dirent*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
