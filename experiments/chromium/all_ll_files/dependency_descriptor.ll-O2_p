; ModuleID = '../../third_party/webrtc/api/transport/rtp/dependency_descriptor.cc'
source_filename = "../../third_party/webrtc/api/transport/rtp/dependency_descriptor.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.absl::InlinedVector" = type { %"class.absl::inlined_vector_internal::Storage" }
%"class.absl::inlined_vector_internal::Storage" = type { %"class.absl::container_internal::CompressedTuple", %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data" }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.0" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage.0" = type { i64 }
%"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Allocated", [24 x i8] }
%"struct.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Allocated" = type { i32*, i64 }

$_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15EmplaceBackSlowIJRKS3_EEERS3_DpOT_ = comdat any

@_ZN6webrtc20DependencyDescriptor14kMaxSpatialIdsE = hidden local_unnamed_addr constant i32 4, align 4
@_ZN6webrtc20DependencyDescriptor15kMaxTemporalIdsE = hidden local_unnamed_addr constant i32 8, align 4
@_ZN6webrtc20DependencyDescriptor13kMaxTemplatesE = hidden local_unnamed_addr constant i32 64, align 4
@_ZN6webrtc20DependencyDescriptor17kMaxDecodeTargetsE = hidden local_unnamed_addr constant i32 32, align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc11webrtc_impl31StringToDecodeTargetIndicationsEN4absl11string_viewE(%"class.absl::InlinedVector"* noalias sret, i8*, i64) local_unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 -86, i64 40, i1 false)
  %7 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %7, align 8
  %8 = icmp ugt i64 %2, 10
  br i1 %8, label %9, label %21, !prof !2

9:                                                ; preds = %3
  %10 = icmp ugt i64 %2, 20
  %11 = select i1 %10, i64 %2, i64 20
  %12 = icmp ugt i64 %11, 4611686018427387903
  br i1 %12, label %13, label %14

13:                                               ; preds = %9
  tail call void @abort() #6
  unreachable

14:                                               ; preds = %9
  %15 = shl i64 %11, 2
  %16 = tail call i8* @_Znwm(i64 %15) #7
  %17 = ptrtoint i8* %16 to i64
  %18 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %19 = bitcast i32** %18 to i64*
  store i64 %17, i64* %19, align 8
  %20 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %0, i64 0, i32 0, i32 1, i32 0, i32 1
  store i64 %11, i64* %20, align 8
  store i64 1, i64* %7, align 8
  br label %23

21:                                               ; preds = %3
  %22 = icmp eq i64 %2, 0
  br i1 %22, label %61, label %23

23:                                               ; preds = %14, %21
  %24 = getelementptr inbounds i8, i8* %1, i64 %2
  %25 = bitcast i32* %4 to i8*
  %26 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %0, i64 0, i32 0, i32 1, i32 0, i32 1
  %27 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %0, i64 0, i32 0, i32 1
  %28 = ptrtoint %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %27 to i64
  %29 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %30 = bitcast i32** %29 to i64*
  %31 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %0, i64 0, i32 0
  br label %32

32:                                               ; preds = %23, %58
  %33 = phi i8* [ %1, %23 ], [ %59, %58 ]
  %34 = load i8, i8* %33, align 1
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %25) #8
  store i32 -1431655766, i32* %4, align 4
  %35 = sext i8 %34 to i32
  switch i32 %35, label %40 [
    i32 45, label %36
    i32 68, label %37
    i32 82, label %38
    i32 83, label %39
  ]

36:                                               ; preds = %32
  store i32 0, i32* %4, align 4
  br label %40

37:                                               ; preds = %32
  store i32 1, i32* %4, align 4
  br label %40

38:                                               ; preds = %32
  store i32 3, i32* %4, align 4
  br label %40

39:                                               ; preds = %32
  store i32 2, i32* %4, align 4
  br label %40

40:                                               ; preds = %32, %39, %38, %37, %36
  %41 = phi i32 [ -1431655766, %32 ], [ 2, %39 ], [ 3, %38 ], [ 1, %37 ], [ 0, %36 ]
  %42 = load i64, i64* %7, align 8, !noalias !3
  %43 = and i64 %42, 1
  %44 = icmp eq i64 %43, 0
  %45 = load i64, i64* %26, align 8
  %46 = select i1 %44, i64 10, i64 %45
  %47 = lshr i64 %42, 1
  %48 = icmp eq i64 %47, %46
  br i1 %48, label %56, label %49, !prof !6

49:                                               ; preds = %40
  %50 = load i64, i64* %30, align 8
  %51 = select i1 %44, i64 %28, i64 %50
  %52 = inttoptr i64 %51 to i32*
  %53 = getelementptr inbounds i32, i32* %52, i64 %47
  store i32 %41, i32* %53, align 4
  %54 = load i64, i64* %7, align 8
  %55 = add i64 %54, 2
  store i64 %55, i64* %7, align 8
  br label %58

56:                                               ; preds = %40
  %57 = call dereferenceable(4) i32* @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15EmplaceBackSlowIJRKS3_EEERS3_DpOT_(%"class.absl::inlined_vector_internal::Storage"* %31, i32* nonnull dereferenceable(4) %4) #8
  br label %58

58:                                               ; preds = %49, %56
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25) #8
  %59 = getelementptr inbounds i8, i8* %33, i64 1
  %60 = icmp eq i8* %59, %24
  br i1 %60, label %61, label %32

61:                                               ; preds = %58, %21
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) i32* @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15EmplaceBackSlowIJRKS3_EEERS3_DpOT_(%"class.absl::inlined_vector_internal::Storage"*, i32* dereferenceable(4)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !noalias !7
  %5 = and i64 %4, 1
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1
  %9 = ptrtoint %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %8 to i64
  br label %19

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %12 = bitcast i32** %11 to i64*
  %13 = load i64, i64* %12, align 8, !noalias !7
  %14 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 1
  %15 = load i64, i64* %14, align 8, !noalias !7
  %16 = shl i64 %15, 1
  %17 = icmp ugt i64 %16, 4611686018427387903
  br i1 %17, label %18, label %19

18:                                               ; preds = %10
  tail call void @abort() #6
  unreachable

19:                                               ; preds = %7, %10
  %20 = phi i64 [ 20, %7 ], [ %16, %10 ]
  %21 = phi i64 [ %9, %7 ], [ %13, %10 ]
  %22 = inttoptr i64 %21 to i32*
  %23 = inttoptr i64 %21 to i8*
  %24 = lshr i64 %4, 1
  %25 = shl i64 %20, 2
  %26 = tail call i8* @_Znwm(i64 %25) #7
  %27 = bitcast i8* %26 to i32*
  %28 = ptrtoint i8* %26 to i64
  %29 = getelementptr inbounds i32, i32* %27, i64 %24
  %30 = load i32, i32* %1, align 4
  store i32 %30, i32* %29, align 4
  %31 = icmp eq i64 %24, 0
  br i1 %31, label %163, label %32

32:                                               ; preds = %19
  %33 = icmp ult i64 %4, 16
  br i1 %33, label %122, label %34

34:                                               ; preds = %32
  %35 = shl i64 %24, 2
  %36 = getelementptr i8, i8* %26, i64 %35
  %37 = getelementptr i32, i32* %22, i64 %24
  %38 = bitcast i32* %37 to i8*
  %39 = icmp ult i8* %26, %38
  %40 = icmp ugt i8* %36, %23
  %41 = and i1 %39, %40
  br i1 %41, label %122, label %42

42:                                               ; preds = %34
  %43 = and i64 %24, 9223372036854775800
  %44 = getelementptr i32, i32* %22, i64 %43
  %45 = add nsw i64 %43, -8
  %46 = lshr exact i64 %45, 3
  %47 = add nuw nsw i64 %46, 1
  %48 = and i64 %47, 3
  %49 = icmp ult i64 %45, 24
  br i1 %49, label %101, label %50

50:                                               ; preds = %42
  %51 = sub nsw i64 %47, %48
  br label %52

52:                                               ; preds = %52, %50
  %53 = phi i64 [ 0, %50 ], [ %98, %52 ]
  %54 = phi i64 [ %51, %50 ], [ %99, %52 ]
  %55 = getelementptr i32, i32* %22, i64 %53
  %56 = getelementptr inbounds i32, i32* %27, i64 %53
  %57 = bitcast i32* %55 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 4, !alias.scope !10
  %59 = getelementptr i32, i32* %55, i64 4
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 4, !alias.scope !10
  %62 = bitcast i32* %56 to <4 x i32>*
  store <4 x i32> %58, <4 x i32>* %62, align 4, !alias.scope !13, !noalias !10
  %63 = getelementptr inbounds i32, i32* %56, i64 4
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> %61, <4 x i32>* %64, align 4, !alias.scope !13, !noalias !10
  %65 = or i64 %53, 8
  %66 = getelementptr i32, i32* %22, i64 %65
  %67 = getelementptr inbounds i32, i32* %27, i64 %65
  %68 = bitcast i32* %66 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4, !alias.scope !10
  %70 = getelementptr i32, i32* %66, i64 4
  %71 = bitcast i32* %70 to <4 x i32>*
  %72 = load <4 x i32>, <4 x i32>* %71, align 4, !alias.scope !10
  %73 = bitcast i32* %67 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %73, align 4, !alias.scope !13, !noalias !10
  %74 = getelementptr inbounds i32, i32* %67, i64 4
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> %72, <4 x i32>* %75, align 4, !alias.scope !13, !noalias !10
  %76 = or i64 %53, 16
  %77 = getelementptr i32, i32* %22, i64 %76
  %78 = getelementptr inbounds i32, i32* %27, i64 %76
  %79 = bitcast i32* %77 to <4 x i32>*
  %80 = load <4 x i32>, <4 x i32>* %79, align 4, !alias.scope !10
  %81 = getelementptr i32, i32* %77, i64 4
  %82 = bitcast i32* %81 to <4 x i32>*
  %83 = load <4 x i32>, <4 x i32>* %82, align 4, !alias.scope !10
  %84 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> %80, <4 x i32>* %84, align 4, !alias.scope !13, !noalias !10
  %85 = getelementptr inbounds i32, i32* %78, i64 4
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %83, <4 x i32>* %86, align 4, !alias.scope !13, !noalias !10
  %87 = or i64 %53, 24
  %88 = getelementptr i32, i32* %22, i64 %87
  %89 = getelementptr inbounds i32, i32* %27, i64 %87
  %90 = bitcast i32* %88 to <4 x i32>*
  %91 = load <4 x i32>, <4 x i32>* %90, align 4, !alias.scope !10
  %92 = getelementptr i32, i32* %88, i64 4
  %93 = bitcast i32* %92 to <4 x i32>*
  %94 = load <4 x i32>, <4 x i32>* %93, align 4, !alias.scope !10
  %95 = bitcast i32* %89 to <4 x i32>*
  store <4 x i32> %91, <4 x i32>* %95, align 4, !alias.scope !13, !noalias !10
  %96 = getelementptr inbounds i32, i32* %89, i64 4
  %97 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %97, align 4, !alias.scope !13, !noalias !10
  %98 = add i64 %53, 32
  %99 = add i64 %54, -4
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %52, !llvm.loop !15

101:                                              ; preds = %52, %42
  %102 = phi i64 [ 0, %42 ], [ %98, %52 ]
  %103 = icmp eq i64 %48, 0
  br i1 %103, label %120, label %104

104:                                              ; preds = %101, %104
  %105 = phi i64 [ %117, %104 ], [ %102, %101 ]
  %106 = phi i64 [ %118, %104 ], [ %48, %101 ]
  %107 = getelementptr i32, i32* %22, i64 %105
  %108 = getelementptr inbounds i32, i32* %27, i64 %105
  %109 = bitcast i32* %107 to <4 x i32>*
  %110 = load <4 x i32>, <4 x i32>* %109, align 4, !alias.scope !10
  %111 = getelementptr i32, i32* %107, i64 4
  %112 = bitcast i32* %111 to <4 x i32>*
  %113 = load <4 x i32>, <4 x i32>* %112, align 4, !alias.scope !10
  %114 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %110, <4 x i32>* %114, align 4, !alias.scope !13, !noalias !10
  %115 = getelementptr inbounds i32, i32* %108, i64 4
  %116 = bitcast i32* %115 to <4 x i32>*
  store <4 x i32> %113, <4 x i32>* %116, align 4, !alias.scope !13, !noalias !10
  %117 = add i64 %105, 8
  %118 = add i64 %106, -1
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %104, !llvm.loop !17

120:                                              ; preds = %104, %101
  %121 = icmp eq i64 %24, %43
  br i1 %121, label %163, label %122

122:                                              ; preds = %120, %34, %32
  %123 = phi i32* [ %22, %34 ], [ %22, %32 ], [ %44, %120 ]
  %124 = phi i64 [ 0, %34 ], [ 0, %32 ], [ %43, %120 ]
  %125 = xor i64 %124, -1
  %126 = add nsw i64 %24, %125
  %127 = and i64 %24, 3
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %139, label %129

129:                                              ; preds = %122, %129
  %130 = phi i32* [ %135, %129 ], [ %123, %122 ]
  %131 = phi i64 [ %136, %129 ], [ %124, %122 ]
  %132 = phi i64 [ %137, %129 ], [ %127, %122 ]
  %133 = getelementptr inbounds i32, i32* %27, i64 %131
  %134 = load i32, i32* %130, align 4
  store i32 %134, i32* %133, align 4
  %135 = getelementptr inbounds i32, i32* %130, i64 1
  %136 = add nuw nsw i64 %131, 1
  %137 = add i64 %132, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %129, !llvm.loop !19

139:                                              ; preds = %129, %122
  %140 = phi i32* [ %123, %122 ], [ %135, %129 ]
  %141 = phi i64 [ %124, %122 ], [ %136, %129 ]
  %142 = icmp ult i64 %126, 3
  br i1 %142, label %163, label %143

143:                                              ; preds = %139, %143
  %144 = phi i32* [ %160, %143 ], [ %140, %139 ]
  %145 = phi i64 [ %161, %143 ], [ %141, %139 ]
  %146 = getelementptr inbounds i32, i32* %27, i64 %145
  %147 = load i32, i32* %144, align 4
  store i32 %147, i32* %146, align 4
  %148 = getelementptr inbounds i32, i32* %144, i64 1
  %149 = add nuw nsw i64 %145, 1
  %150 = getelementptr inbounds i32, i32* %27, i64 %149
  %151 = load i32, i32* %148, align 4
  store i32 %151, i32* %150, align 4
  %152 = getelementptr inbounds i32, i32* %144, i64 2
  %153 = add nuw nsw i64 %145, 2
  %154 = getelementptr inbounds i32, i32* %27, i64 %153
  %155 = load i32, i32* %152, align 4
  store i32 %155, i32* %154, align 4
  %156 = getelementptr inbounds i32, i32* %144, i64 3
  %157 = add nuw nsw i64 %145, 3
  %158 = getelementptr inbounds i32, i32* %27, i64 %157
  %159 = load i32, i32* %156, align 4
  store i32 %159, i32* %158, align 4
  %160 = getelementptr inbounds i32, i32* %144, i64 4
  %161 = add nuw nsw i64 %145, 4
  %162 = icmp eq i64 %161, %24
  br i1 %162, label %163, label %143, !llvm.loop !20

163:                                              ; preds = %139, %143, %120, %19
  br i1 %6, label %169, label %164

164:                                              ; preds = %163
  %165 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %166 = bitcast i32** %165 to i8**
  %167 = load i8*, i8** %166, align 8
  tail call void @_ZdlPv(i8* %167) #7
  %168 = load i64, i64* %3, align 8
  br label %169

169:                                              ; preds = %164, %163
  %170 = phi i64 [ %168, %164 ], [ %4, %163 ]
  %171 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %172 = bitcast i32** %171 to i64*
  store i64 %28, i64* %172, align 8
  %173 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %20, i64* %173, align 8
  %174 = or i64 %170, 1
  %175 = add i64 %174, 2
  store i64 %175, i64* %3, align 8
  ret i32* %29
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind }
attributes #7 = { builtin nounwind }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15MakeStorageViewEv: argument 0"}
!5 = distinct !{!5, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15MakeStorageViewEv"}
!6 = !{!"branch_weights", i32 1, i32 2000}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15MakeStorageViewEv: argument 0"}
!9 = distinct !{!9, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15MakeStorageViewEv"}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !16}
!16 = !{!"llvm.loop.isvectorized", i32 1}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.unroll.disable"}
!19 = distinct !{!19, !18}
!20 = distinct !{!20, !16}
