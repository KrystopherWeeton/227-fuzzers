; ModuleID = '../../third_party/webrtc/modules/audio_coding/codecs/cng/webrtc_cng.cc'
source_filename = "../../third_party/webrtc/modules/audio_coding/codecs/cng/webrtc_cng.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.webrtc::ComfortNoiseDecoder" = type <{ i32, i32, i32, [13 x i16], [13 x i16], [13 x i16], [13 x i16], i16, i16, i16, [2 x i8] }>
%"class.webrtc::ComfortNoiseEncoder" = type { i64, i32, i16, i16, i32, [13 x i16], [13 x i32], i32 }
%"class.rtc::BufferT" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }

$_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t = comdat any

$_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t = comdat any

$_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE5EmEES6_EEEvPKciS8_DpRKT_E1t = comdat any

@_ZN6webrtc12_GLOBAL__N_115WebRtcCng_kDbovE = internal unnamed_addr constant [94 x i32] [i32 1081109975, i32 858756178, i32 682134279, i32 541838517, i32 430397633, i32 341876992, i32 271562548, i32 215709799, i32 171344384, i32 136103682, i32 108110997, i32 85875618, i32 68213428, i32 54183852, i32 43039763, i32 34187699, i32 27156255, i32 21570980, i32 17134438, i32 13610368, i32 10811100, i32 8587562, i32 6821343, i32 5418385, i32 4303976, i32 3418770, i32 2715625, i32 2157098, i32 1713444, i32 1361037, i32 1081110, i32 858756, i32 682134, i32 541839, i32 430398, i32 341877, i32 271563, i32 215710, i32 171344, i32 136104, i32 108111, i32 85876, i32 68213, i32 54184, i32 43040, i32 34188, i32 27156, i32 21571, i32 17134, i32 13610, i32 10811, i32 8588, i32 6821, i32 5418, i32 4304, i32 3419, i32 2716, i32 2157, i32 1713, i32 1361, i32 1081, i32 859, i32 682, i32 542, i32 430, i32 342, i32 272, i32 216, i32 171, i32 136, i32 108, i32 86, i32 68, i32 54, i32 43, i32 34, i32 27, i32 22, i32 17, i32 14, i32 11, i32 9, i32 7, i32 5, i32 4, i32 3, i32 3, i32 2, i32 2, i32 1, i32 1, i32 1, i32 1, i32 1], align 16
@.str = private unnamed_addr constant [71 x i8] c"../../third_party/webrtc/modules/audio_coding/codecs/cng/webrtc_cng.cc\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"quality > 0\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"quality <= 12\00", align 1
@.str.3 = private unnamed_addr constant [35 x i8] c"num_samples <= kCngMaxOutsizeOrder\00", align 1
@_ZN6webrtc12_GLOBAL__N_121WebRtcCng_kCorrWindowE = internal unnamed_addr constant [12 x i16] [i16 32702, i16 32636, i16 32570, i16 32505, i16 32439, i16 32374, i16 32309, i16 32244, i16 32179, i16 32114, i16 32049, i16 31985], align 16
@.str.4 = private unnamed_addr constant [62 x i8] c"../../third_party/webrtc/rtc_base/numerics/safe_conversions.h\00", align 1
@.str.5 = private unnamed_addr constant [41 x i8] c"IsValueInRangeForNumericType<Dst>(value)\00", align 1
@_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t = linkonce_odr hidden constant [1 x i8] zeroinitializer, comdat, align 1
@_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t = linkonce_odr hidden constant [4 x i8] c"\0D\01\01\00", comdat, align 1
@_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE5EmEES6_EEEvPKciS8_DpRKT_E1t = linkonce_odr hidden constant [4 x i8] c"\0D\05\05\00", comdat, align 1

@_ZN6webrtc19ComfortNoiseDecoderC1Ev = hidden unnamed_addr alias void (%"class.webrtc::ComfortNoiseDecoder"*), void (%"class.webrtc::ComfortNoiseDecoder"*)* @_ZN6webrtc19ComfortNoiseDecoderC2Ev
@_ZN6webrtc19ComfortNoiseEncoderC1Eiii = hidden unnamed_addr alias void (%"class.webrtc::ComfortNoiseEncoder"*, i32, i32, i32), void (%"class.webrtc::ComfortNoiseEncoder"*, i32, i32, i32)* @_ZN6webrtc19ComfortNoiseEncoderC2Eiii

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc19ComfortNoiseDecoderC2Ev(%"class.webrtc::ComfortNoiseDecoder"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 0
  store i32 7777, i32* %2, align 4
  %3 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 7
  %5 = bitcast i32* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 112, i1 false) #7
  store i16 5, i16* %4, align 4
  %6 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 8
  store i16 0, i16* %6, align 2
  %7 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 9
  store i16 0, i16* %7, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc19ComfortNoiseDecoder5ResetEv(%"class.webrtc::ComfortNoiseDecoder"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 0
  store i32 7777, i32* %2, align 4
  %3 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 7
  %5 = bitcast i32* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 112, i1 false)
  store i16 5, i16* %4, align 4
  %6 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 8
  store i16 0, i16* %6, align 2
  %7 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 9
  store i16 0, i16* %7, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc19ComfortNoiseDecoder9UpdateSidEN3rtc9ArrayViewIKhLln4711EEE(%"class.webrtc::ComfortNoiseDecoder"* nocapture, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = bitcast %"class.webrtc::ComfortNoiseDecoder"* %0 to i8*
  %5 = icmp ult i64 %2, 13
  %6 = select i1 %5, i64 %2, i64 13
  %7 = trunc i64 %6 to i16
  %8 = add nsw i16 %7, -1
  %9 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 7
  store i16 %8, i16* %9, align 4
  %10 = load i8, i8* %1, align 1
  %11 = icmp ult i8 %10, 93
  %12 = select i1 %11, i8 %10, i8 93
  %13 = zext i8 %12 to i64
  %14 = getelementptr inbounds [94 x i32], [94 x i32]* @_ZN6webrtc12_GLOBAL__N_115WebRtcCng_kDbovE, i64 0, i64 %13
  %15 = load i32, i32* %14, align 4
  %16 = ashr i32 %15, 1
  %17 = ashr i32 %15, 3
  %18 = add nsw i32 %16, %17
  %19 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 1
  store i32 %18, i32* %19, align 4
  switch i16 %7, label %31 [
    i16 13, label %20
    i16 1, label %46
  ]

20:                                               ; preds = %3, %20
  %21 = phi i64 [ %22, %20 ], [ 0, %3 ]
  %22 = add nuw nsw i64 %21, 1
  %23 = getelementptr inbounds i8, i8* %1, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i16
  %26 = shl nuw i16 %25, 8
  %27 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 3, i64 %21
  store i16 %26, i16* %27, align 2
  %28 = load i16, i16* %9, align 4
  %29 = zext i16 %28 to i64
  %30 = icmp ult i64 %22, %29
  br i1 %30, label %20, label %43

31:                                               ; preds = %3, %31
  %32 = phi i64 [ %33, %31 ], [ 0, %3 ]
  %33 = add nuw nsw i64 %32, 1
  %34 = getelementptr inbounds i8, i8* %1, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i16
  %37 = shl nuw i16 %36, 8
  %38 = add i16 %37, -32512
  %39 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 3, i64 %32
  store i16 %38, i16* %39, align 2
  %40 = load i16, i16* %9, align 4
  %41 = zext i16 %40 to i64
  %42 = icmp ult i64 %33, %41
  br i1 %42, label %31, label %43

43:                                               ; preds = %20, %31
  %44 = phi i16 [ %40, %31 ], [ %28, %20 ]
  %45 = icmp ult i16 %44, 12
  br i1 %45, label %46, label %53

46:                                               ; preds = %3, %43
  %47 = phi i16 [ %44, %43 ], [ 0, %3 ]
  %48 = zext i16 %47 to i64
  %49 = shl nuw nsw i64 %48, 1
  %50 = add nuw nsw i64 %49, 12
  %51 = getelementptr i8, i8* %4, i64 %50
  %52 = sub nuw nsw i64 24, %49
  call void @llvm.memset.p0i8.i64(i8* align 2 %51, i8 0, i64 %52, i1 false)
  br label %53

53:                                               ; preds = %46, %43
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6webrtc19ComfortNoiseDecoder8GenerateEN3rtc9ArrayViewIsLln4711EEEb(%"class.webrtc::ComfortNoiseDecoder"*, i16*, i64, i1 zeroext) local_unnamed_addr #0 align 2 {
  %5 = alloca [15 x i16], align 16
  %6 = alloca [640 x i16], align 16
  %7 = alloca [640 x i16], align 16
  %8 = alloca [13 x i16], align 16
  %9 = bitcast [13 x i16]* %8 to i8*
  %10 = bitcast [640 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1280, i8* nonnull %10) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 1280, i1 false)
  %11 = bitcast [640 x i16]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1280, i8* nonnull %11) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 1280, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 26, i8* nonnull %9) #7
  %12 = getelementptr inbounds [13 x i16], [13 x i16]* %8, i64 0, i64 0
  %13 = getelementptr inbounds [13 x i16], [13 x i16]* %8, i64 0, i64 1
  %14 = icmp ugt i64 %2, 640
  %15 = bitcast [13 x i16]* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 26, i1 false)
  br i1 %14, label %471, label %16

16:                                               ; preds = %4
  br i1 %3, label %22, label %17

17:                                               ; preds = %16
  %18 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 9
  %19 = load i16, i16* %18, align 4
  %20 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 8
  %21 = load i16, i16* %20, align 2
  br label %26

22:                                               ; preds = %16
  %23 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 8
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 9
  store i16 %24, i16* %25, align 4
  br label %26

26:                                               ; preds = %17, %22
  %27 = phi i16 [ %24, %22 ], [ %21, %17 ]
  %28 = phi i16 [ %24, %22 ], [ %19, %17 ]
  %29 = phi i32 [ 19661, %22 ], [ 26214, %17 ]
  %30 = phi i32 [ 13107, %22 ], [ 6553, %17 ]
  %31 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 9
  %32 = sext i16 %28 to i32
  %33 = lshr i32 %29, 2
  %34 = mul nsw i32 %33, %32
  %35 = ashr i32 %34, 13
  %36 = sext i16 %27 to i32
  %37 = lshr i32 %30, 2
  %38 = mul nsw i32 %37, %36
  %39 = ashr i32 %38, 13
  %40 = add nsw i32 %39, %35
  %41 = icmp sgt i32 %40, 32767
  %42 = select i1 %41, i32 2, i32 0
  %43 = icmp slt i32 %40, -32768
  %44 = zext i1 %43 to i32
  %45 = or i32 %42, %44
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %48, label %47

47:                                               ; preds = %26
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.4, i64 0, i64 0), i32 36, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, i64 0, i64 0)) #8
  unreachable

48:                                               ; preds = %26
  %49 = trunc i32 %40 to i16
  store i16 %49, i16* %31, align 4
  %50 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 2
  %51 = load i32, i32* %50, align 4
  %52 = ashr i32 %51, 1
  %53 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = ashr i32 %54, 1
  %56 = add nsw i32 %55, %52
  store i32 %56, i32* %50, align 4
  %57 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 4, i64 0
  %58 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 3, i64 0
  %59 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 4, i64 1
  %60 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 4, i64 2
  %61 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 4, i64 3
  %62 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 4, i64 4
  %63 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 4, i64 5
  %64 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 4, i64 6
  %65 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 4, i64 7
  %66 = bitcast i16* %57 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 2
  %68 = sext <8 x i16> %67 to <8 x i32>
  %69 = insertelement <8 x i32> undef, i32 %29, i32 0
  %70 = shufflevector <8 x i32> %69, <8 x i32> undef, <8 x i32> zeroinitializer
  %71 = mul nsw <8 x i32> %70, %68
  %72 = lshr <8 x i32> %71, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %73 = bitcast i16* %58 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2
  %75 = sext <8 x i16> %74 to <8 x i32>
  %76 = insertelement <8 x i32> undef, i32 %30, i32 0
  %77 = shufflevector <8 x i32> %76, <8 x i32> undef, <8 x i32> zeroinitializer
  %78 = mul nsw <8 x i32> %77, %75
  %79 = lshr <8 x i32> %78, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %80 = add nuw nsw <8 x i32> %79, %72
  %81 = trunc <8 x i32> %80 to <8 x i16>
  %82 = bitcast i16* %57 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %82, align 2
  %83 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 4, i64 8
  %84 = load i16, i16* %83, align 2
  %85 = sext i16 %84 to i32
  %86 = mul nsw i32 %29, %85
  %87 = lshr i32 %86, 15
  %88 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 3, i64 8
  %89 = load i16, i16* %88, align 2
  %90 = sext i16 %89 to i32
  %91 = mul nsw i32 %30, %90
  %92 = lshr i32 %91, 15
  %93 = add nuw nsw i32 %92, %87
  %94 = trunc i32 %93 to i16
  store i16 %94, i16* %83, align 2
  %95 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 4, i64 9
  %96 = load i16, i16* %95, align 2
  %97 = sext i16 %96 to i32
  %98 = mul nsw i32 %29, %97
  %99 = lshr i32 %98, 15
  %100 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 3, i64 9
  %101 = load i16, i16* %100, align 2
  %102 = sext i16 %101 to i32
  %103 = mul nsw i32 %30, %102
  %104 = lshr i32 %103, 15
  %105 = add nuw nsw i32 %104, %99
  %106 = trunc i32 %105 to i16
  store i16 %106, i16* %95, align 2
  %107 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 4, i64 10
  %108 = load i16, i16* %107, align 2
  %109 = sext i16 %108 to i32
  %110 = mul nsw i32 %29, %109
  %111 = lshr i32 %110, 15
  %112 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 3, i64 10
  %113 = load i16, i16* %112, align 2
  %114 = sext i16 %113 to i32
  %115 = mul nsw i32 %30, %114
  %116 = lshr i32 %115, 15
  %117 = add nuw nsw i32 %116, %111
  %118 = trunc i32 %117 to i16
  store i16 %118, i16* %107, align 2
  %119 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 4, i64 11
  %120 = load i16, i16* %119, align 2
  %121 = sext i16 %120 to i32
  %122 = mul nsw i32 %29, %121
  %123 = lshr i32 %122, 15
  %124 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 3, i64 11
  %125 = load i16, i16* %124, align 2
  %126 = sext i16 %125 to i32
  %127 = mul nsw i32 %30, %126
  %128 = lshr i32 %127, 15
  %129 = add nuw nsw i32 %128, %123
  %130 = trunc i32 %129 to i16
  store i16 %130, i16* %119, align 2
  %131 = bitcast [15 x i16]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 30, i8* nonnull %131) #7
  %132 = getelementptr inbounds [15 x i16], [15 x i16]* %5, i64 0, i64 0
  %133 = getelementptr inbounds [15 x i16], [15 x i16]* %5, i64 0, i64 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %131, i8 -86, i64 30, i1 false) #7
  store i16 4096, i16* %12, align 16
  store i16 4096, i16* %132, align 16
  %134 = load i16, i16* %57, align 2
  %135 = sext i16 %134 to i32
  %136 = add nsw i32 %135, 4
  %137 = ashr i32 %136, 3
  %138 = trunc i32 %137 to i16
  store i16 %138, i16* %13, align 2
  br label %143

139:                                              ; preds = %301, %295
  %140 = add nuw nsw i32 %146, 1
  %141 = icmp eq i64 %160, 12
  %142 = add i64 %144, 1
  br i1 %141, label %310, label %143

143:                                              ; preds = %139, %48
  %144 = phi i64 [ %142, %139 ], [ 0, %48 ]
  %145 = phi i64 [ %160, %139 ], [ 1, %48 ]
  %146 = phi i32 [ %140, %139 ], [ 3, %48 ]
  %147 = phi i16* [ %153, %139 ], [ %57, %48 ]
  %148 = add i64 %144, -13
  %149 = lshr i64 %148, 4
  %150 = add nuw nsw i64 %149, 1
  %151 = add i64 %144, 1
  %152 = add i64 %144, 3
  %153 = getelementptr inbounds i16, i16* %147, i64 1
  %154 = getelementptr inbounds [13 x i16], [13 x i16]* %8, i64 0, i64 %145
  %155 = load i16, i16* %153, align 2
  %156 = sext i16 %155 to i32
  %157 = add nsw i32 %156, 4
  %158 = ashr i32 %157, 3
  %159 = trunc i32 %158 to i16
  %160 = add nuw nsw i64 %145, 1
  %161 = getelementptr inbounds [15 x i16], [15 x i16]* %5, i64 0, i64 %160
  store i16 %159, i16* %161, align 2
  %162 = and i64 %151, 1
  %163 = icmp eq i64 %144, 0
  br i1 %163, label %199, label %164

164:                                              ; preds = %143
  %165 = sub i64 %151, %162
  br label %166

166:                                              ; preds = %166, %164
  %167 = phi i16* [ %12, %164 ], [ %184, %166 ]
  %168 = phi i16* [ %133, %164 ], [ %196, %166 ]
  %169 = phi i16* [ %154, %164 ], [ %186, %166 ]
  %170 = phi i64 [ %165, %164 ], [ %197, %166 ]
  %171 = getelementptr inbounds i16, i16* %167, i64 1
  %172 = load i16, i16* %171, align 2
  %173 = getelementptr inbounds i16, i16* %169, i64 -1
  %174 = load i16, i16* %169, align 2
  %175 = sext i16 %174 to i32
  %176 = load i16, i16* %153, align 2
  %177 = sext i16 %176 to i32
  %178 = mul nsw i32 %177, %175
  %179 = add nsw i32 %178, 16384
  %180 = lshr i32 %179, 15
  %181 = trunc i32 %180 to i16
  %182 = add i16 %172, %181
  %183 = getelementptr inbounds i16, i16* %168, i64 1
  store i16 %182, i16* %168, align 2
  %184 = getelementptr inbounds i16, i16* %167, i64 2
  %185 = load i16, i16* %184, align 2
  %186 = getelementptr inbounds i16, i16* %169, i64 -2
  %187 = load i16, i16* %173, align 2
  %188 = sext i16 %187 to i32
  %189 = load i16, i16* %153, align 2
  %190 = sext i16 %189 to i32
  %191 = mul nsw i32 %190, %188
  %192 = add nsw i32 %191, 16384
  %193 = lshr i32 %192, 15
  %194 = trunc i32 %193 to i16
  %195 = add i16 %185, %194
  %196 = getelementptr inbounds i16, i16* %168, i64 2
  store i16 %195, i16* %183, align 2
  %197 = add i64 %170, -2
  %198 = icmp eq i64 %197, 0
  br i1 %198, label %199, label %166

199:                                              ; preds = %166, %143
  %200 = phi i16* [ %12, %143 ], [ %184, %166 ]
  %201 = phi i16* [ %133, %143 ], [ %196, %166 ]
  %202 = phi i16* [ %154, %143 ], [ %186, %166 ]
  %203 = icmp eq i64 %162, 0
  br i1 %203, label %216, label %204

204:                                              ; preds = %199
  %205 = getelementptr inbounds i16, i16* %200, i64 1
  %206 = load i16, i16* %205, align 2
  %207 = load i16, i16* %202, align 2
  %208 = sext i16 %207 to i32
  %209 = load i16, i16* %153, align 2
  %210 = sext i16 %209 to i32
  %211 = mul nsw i32 %210, %208
  %212 = add nsw i32 %211, 16384
  %213 = lshr i32 %212, 15
  %214 = trunc i32 %213 to i16
  %215 = add i16 %206, %214
  store i16 %215, i16* %201, align 2
  br label %216

216:                                              ; preds = %199, %204
  %217 = icmp ult i64 %152, 16
  br i1 %217, label %297, label %218

218:                                              ; preds = %216
  %219 = and i64 %152, -16
  %220 = trunc i64 %219 to i32
  %221 = getelementptr [15 x i16], [15 x i16]* %5, i64 0, i64 %219
  %222 = getelementptr [13 x i16], [13 x i16]* %8, i64 0, i64 %219
  %223 = and i64 %150, 3
  %224 = icmp ult i64 %148, 48
  br i1 %224, label %276, label %225

225:                                              ; preds = %218
  %226 = sub nsw i64 %150, %223
  br label %227

227:                                              ; preds = %227, %225
  %228 = phi i64 [ 0, %225 ], [ %273, %227 ]
  %229 = phi i64 [ %226, %225 ], [ %274, %227 ]
  %230 = getelementptr [15 x i16], [15 x i16]* %5, i64 0, i64 %228
  %231 = getelementptr [13 x i16], [13 x i16]* %8, i64 0, i64 %228
  %232 = bitcast i16* %230 to <8 x i16>*
  %233 = load <8 x i16>, <8 x i16>* %232, align 16
  %234 = getelementptr i16, i16* %230, i64 8
  %235 = bitcast i16* %234 to <8 x i16>*
  %236 = load <8 x i16>, <8 x i16>* %235, align 16
  %237 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %237, align 16
  %238 = getelementptr i16, i16* %231, i64 8
  %239 = bitcast i16* %238 to <8 x i16>*
  store <8 x i16> %236, <8 x i16>* %239, align 16
  %240 = or i64 %228, 16
  %241 = getelementptr [15 x i16], [15 x i16]* %5, i64 0, i64 %240
  %242 = getelementptr [13 x i16], [13 x i16]* %8, i64 0, i64 %240
  %243 = bitcast i16* %241 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 16
  %245 = getelementptr i16, i16* %241, i64 8
  %246 = bitcast i16* %245 to <8 x i16>*
  %247 = load <8 x i16>, <8 x i16>* %246, align 16
  %248 = bitcast i16* %242 to <8 x i16>*
  store <8 x i16> %244, <8 x i16>* %248, align 16
  %249 = getelementptr i16, i16* %242, i64 8
  %250 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %250, align 16
  %251 = or i64 %228, 32
  %252 = getelementptr [15 x i16], [15 x i16]* %5, i64 0, i64 %251
  %253 = getelementptr [13 x i16], [13 x i16]* %8, i64 0, i64 %251
  %254 = bitcast i16* %252 to <8 x i16>*
  %255 = load <8 x i16>, <8 x i16>* %254, align 16
  %256 = getelementptr i16, i16* %252, i64 8
  %257 = bitcast i16* %256 to <8 x i16>*
  %258 = load <8 x i16>, <8 x i16>* %257, align 16
  %259 = bitcast i16* %253 to <8 x i16>*
  store <8 x i16> %255, <8 x i16>* %259, align 16
  %260 = getelementptr i16, i16* %253, i64 8
  %261 = bitcast i16* %260 to <8 x i16>*
  store <8 x i16> %258, <8 x i16>* %261, align 16
  %262 = or i64 %228, 48
  %263 = getelementptr [15 x i16], [15 x i16]* %5, i64 0, i64 %262
  %264 = getelementptr [13 x i16], [13 x i16]* %8, i64 0, i64 %262
  %265 = bitcast i16* %263 to <8 x i16>*
  %266 = load <8 x i16>, <8 x i16>* %265, align 16
  %267 = getelementptr i16, i16* %263, i64 8
  %268 = bitcast i16* %267 to <8 x i16>*
  %269 = load <8 x i16>, <8 x i16>* %268, align 16
  %270 = bitcast i16* %264 to <8 x i16>*
  store <8 x i16> %266, <8 x i16>* %270, align 16
  %271 = getelementptr i16, i16* %264, i64 8
  %272 = bitcast i16* %271 to <8 x i16>*
  store <8 x i16> %269, <8 x i16>* %272, align 16
  %273 = add i64 %228, 64
  %274 = add i64 %229, -4
  %275 = icmp eq i64 %274, 0
  br i1 %275, label %276, label %227, !llvm.loop !2

276:                                              ; preds = %227, %218
  %277 = phi i64 [ 0, %218 ], [ %273, %227 ]
  %278 = icmp eq i64 %223, 0
  br i1 %278, label %295, label %279

279:                                              ; preds = %276, %279
  %280 = phi i64 [ %292, %279 ], [ %277, %276 ]
  %281 = phi i64 [ %293, %279 ], [ %223, %276 ]
  %282 = getelementptr [15 x i16], [15 x i16]* %5, i64 0, i64 %280
  %283 = getelementptr [13 x i16], [13 x i16]* %8, i64 0, i64 %280
  %284 = bitcast i16* %282 to <8 x i16>*
  %285 = load <8 x i16>, <8 x i16>* %284, align 16
  %286 = getelementptr i16, i16* %282, i64 8
  %287 = bitcast i16* %286 to <8 x i16>*
  %288 = load <8 x i16>, <8 x i16>* %287, align 16
  %289 = bitcast i16* %283 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %289, align 16
  %290 = getelementptr i16, i16* %283, i64 8
  %291 = bitcast i16* %290 to <8 x i16>*
  store <8 x i16> %288, <8 x i16>* %291, align 16
  %292 = add i64 %280, 16
  %293 = add i64 %281, -1
  %294 = icmp eq i64 %293, 0
  br i1 %294, label %295, label %279, !llvm.loop !4

295:                                              ; preds = %279, %276
  %296 = icmp eq i64 %152, %219
  br i1 %296, label %139, label %297

297:                                              ; preds = %295, %216
  %298 = phi i32 [ 0, %216 ], [ %220, %295 ]
  %299 = phi i16* [ %132, %216 ], [ %221, %295 ]
  %300 = phi i16* [ %12, %216 ], [ %222, %295 ]
  br label %301

301:                                              ; preds = %297, %301
  %302 = phi i32 [ %308, %301 ], [ %298, %297 ]
  %303 = phi i16* [ %305, %301 ], [ %299, %297 ]
  %304 = phi i16* [ %307, %301 ], [ %300, %297 ]
  %305 = getelementptr inbounds i16, i16* %303, i64 1
  %306 = load i16, i16* %303, align 2
  %307 = getelementptr inbounds i16, i16* %304, i64 1
  store i16 %306, i16* %304, align 2
  %308 = add nuw nsw i32 %302, 1
  %309 = icmp eq i32 %308, %146
  br i1 %309, label %139, label %301, !llvm.loop !6

310:                                              ; preds = %139
  call void @llvm.lifetime.end.p0i8(i64 30, i8* nonnull %131) #7
  %311 = load i16, i16* %57, align 2
  %312 = sext i16 %311 to i32
  %313 = mul nsw i32 %312, %312
  %314 = lshr i32 %313, 15
  %315 = shl nuw i32 %314, 16
  %316 = sub i32 2147418112, %315
  %317 = ashr exact i32 %316, 3
  %318 = lshr i32 %317, 15
  %319 = shl i32 %318, 16
  %320 = ashr exact i32 %319, 16
  %321 = load i16, i16* %59, align 2
  %322 = sext i16 %321 to i32
  %323 = mul nsw i32 %322, %322
  %324 = lshr i32 %323, 15
  %325 = shl nuw i32 %324, 16
  %326 = sub i32 2147418112, %325
  %327 = ashr exact i32 %326, 16
  %328 = mul nsw i32 %327, %320
  %329 = lshr i32 %328, 15
  %330 = shl i32 %329, 16
  %331 = ashr exact i32 %330, 16
  %332 = load i16, i16* %60, align 2
  %333 = sext i16 %332 to i32
  %334 = mul nsw i32 %333, %333
  %335 = lshr i32 %334, 15
  %336 = shl nuw i32 %335, 16
  %337 = sub i32 2147418112, %336
  %338 = ashr exact i32 %337, 16
  %339 = mul nsw i32 %338, %331
  %340 = lshr i32 %339, 15
  %341 = shl i32 %340, 16
  %342 = ashr exact i32 %341, 16
  %343 = load i16, i16* %61, align 2
  %344 = sext i16 %343 to i32
  %345 = mul nsw i32 %344, %344
  %346 = lshr i32 %345, 15
  %347 = shl nuw i32 %346, 16
  %348 = sub i32 2147418112, %347
  %349 = ashr exact i32 %348, 16
  %350 = mul nsw i32 %349, %342
  %351 = lshr i32 %350, 15
  %352 = shl i32 %351, 16
  %353 = ashr exact i32 %352, 16
  %354 = load i16, i16* %62, align 2
  %355 = sext i16 %354 to i32
  %356 = mul nsw i32 %355, %355
  %357 = lshr i32 %356, 15
  %358 = shl nuw i32 %357, 16
  %359 = sub i32 2147418112, %358
  %360 = ashr exact i32 %359, 16
  %361 = mul nsw i32 %360, %353
  %362 = lshr i32 %361, 15
  %363 = shl i32 %362, 16
  %364 = ashr exact i32 %363, 16
  %365 = load i16, i16* %63, align 2
  %366 = sext i16 %365 to i32
  %367 = mul nsw i32 %366, %366
  %368 = lshr i32 %367, 15
  %369 = shl nuw i32 %368, 16
  %370 = sub i32 2147418112, %369
  %371 = ashr exact i32 %370, 16
  %372 = mul nsw i32 %371, %364
  %373 = lshr i32 %372, 15
  %374 = shl i32 %373, 16
  %375 = ashr exact i32 %374, 16
  %376 = load i16, i16* %64, align 2
  %377 = sext i16 %376 to i32
  %378 = mul nsw i32 %377, %377
  %379 = lshr i32 %378, 15
  %380 = shl nuw i32 %379, 16
  %381 = sub i32 2147418112, %380
  %382 = ashr exact i32 %381, 16
  %383 = mul nsw i32 %382, %375
  %384 = lshr i32 %383, 15
  %385 = shl i32 %384, 16
  %386 = ashr exact i32 %385, 16
  %387 = load i16, i16* %65, align 2
  %388 = sext i16 %387 to i32
  %389 = mul nsw i32 %388, %388
  %390 = lshr i32 %389, 15
  %391 = shl nuw i32 %390, 16
  %392 = sub i32 2147418112, %391
  %393 = ashr exact i32 %392, 16
  %394 = mul nsw i32 %393, %386
  %395 = lshr i32 %394, 15
  %396 = shl i32 %395, 16
  %397 = ashr exact i32 %396, 16
  %398 = load i16, i16* %83, align 2
  %399 = sext i16 %398 to i32
  %400 = mul nsw i32 %399, %399
  %401 = lshr i32 %400, 15
  %402 = shl nuw i32 %401, 16
  %403 = sub i32 2147418112, %402
  %404 = ashr exact i32 %403, 16
  %405 = mul nsw i32 %404, %397
  %406 = lshr i32 %405, 15
  %407 = shl i32 %406, 16
  %408 = ashr exact i32 %407, 16
  %409 = load i16, i16* %95, align 2
  %410 = sext i16 %409 to i32
  %411 = mul nsw i32 %410, %410
  %412 = lshr i32 %411, 15
  %413 = shl nuw i32 %412, 16
  %414 = sub i32 2147418112, %413
  %415 = ashr exact i32 %414, 16
  %416 = mul nsw i32 %415, %408
  %417 = lshr i32 %416, 15
  %418 = shl i32 %417, 16
  %419 = ashr exact i32 %418, 16
  %420 = load i16, i16* %107, align 2
  %421 = sext i16 %420 to i32
  %422 = mul nsw i32 %421, %421
  %423 = lshr i32 %422, 15
  %424 = shl nuw i32 %423, 16
  %425 = sub i32 2147418112, %424
  %426 = ashr exact i32 %425, 16
  %427 = mul nsw i32 %426, %419
  %428 = lshr i32 %427, 15
  %429 = shl i32 %428, 16
  %430 = ashr exact i32 %429, 16
  %431 = load i16, i16* %119, align 2
  %432 = sext i16 %431 to i32
  %433 = mul nsw i32 %432, %432
  %434 = lshr i32 %433, 15
  %435 = shl nuw i32 %434, 16
  %436 = sub i32 2147418112, %435
  %437 = ashr exact i32 %436, 16
  %438 = mul nsw i32 %437, %430
  %439 = lshr i32 %438, 15
  %440 = shl i32 %439, 16
  %441 = ashr exact i32 %440, 16
  %442 = load i32, i32* %50, align 4
  %443 = tail call i32 @WebRtcSpl_Sqrt(i32 %442) #7
  %444 = tail call i32 @WebRtcSpl_Sqrt(i32 %441) #7
  %445 = shl i32 %444, 22
  %446 = ashr exact i32 %445, 16
  %447 = mul i32 %446, 98304
  %448 = ashr exact i32 %447, 16
  %449 = mul nsw i32 %448, %443
  %450 = lshr i32 %449, 12
  %451 = trunc i32 %450 to i16
  store i16 %451, i16* %31, align 4
  %452 = icmp eq i64 %2, 0
  br i1 %452, label %457, label %453

453:                                              ; preds = %310
  %454 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 0
  br label %464

455:                                              ; preds = %464
  %456 = load i16, i16* %31, align 4
  br label %457

457:                                              ; preds = %455, %310
  %458 = phi i16 [ %456, %455 ], [ %451, %310 ]
  %459 = getelementptr inbounds [640 x i16], [640 x i16]* %6, i64 0, i64 0
  call void @WebRtcSpl_ScaleVector(i16* nonnull %459, i16* nonnull %459, i16 signext %458, i64 %2, i16 signext 13) #7
  %460 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 5, i64 0
  %461 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder", %"class.webrtc::ComfortNoiseDecoder"* %0, i64 0, i32 6, i64 0
  %462 = getelementptr inbounds [640 x i16], [640 x i16]* %7, i64 0, i64 0
  %463 = call i64 @WebRtcSpl_FilterAR(i16* nonnull %12, i64 13, i16* nonnull %459, i64 %2, i16* %460, i64 12, i16* %461, i64 12, i16* %1, i16* nonnull %462, i64 %2) #7
  br label %471

464:                                              ; preds = %464, %453
  %465 = phi i64 [ 0, %453 ], [ %469, %464 ]
  %466 = tail call signext i16 @WebRtcSpl_RandN(i32* %454) #7
  %467 = ashr i16 %466, 1
  %468 = getelementptr inbounds [640 x i16], [640 x i16]* %6, i64 0, i64 %465
  store i16 %467, i16* %468, align 2
  %469 = add nuw i64 %465, 1
  %470 = icmp eq i64 %469, %2
  br i1 %470, label %455, label %464

471:                                              ; preds = %4, %457
  %472 = phi i1 [ true, %457 ], [ false, %4 ]
  call void @llvm.lifetime.end.p0i8(i64 26, i8* nonnull %9) #7
  call void @llvm.lifetime.end.p0i8(i64 1280, i8* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 1280, i8* nonnull %10) #7
  ret i1 %472
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @WebRtcSpl_Sqrt(i32) local_unnamed_addr #3

declare signext i16 @WebRtcSpl_RandN(i32*) local_unnamed_addr #3

declare void @WebRtcSpl_ScaleVector(i16*, i16*, i16 signext, i64, i16 signext) local_unnamed_addr #3

declare i64 @WebRtcSpl_FilterAR(i16*, i64, i16*, i64, i16*, i64, i16*, i64, i16*, i16*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc19ComfortNoiseEncoderC2Eiii(%"class.webrtc::ComfortNoiseEncoder"* nocapture, i32, i32, i32) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 0
  %6 = sext i32 %3 to i64
  store i64 %6, i64* %5, align 8
  %7 = getelementptr inbounds %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 1
  store i32 %1, i32* %7, align 8
  %8 = getelementptr inbounds %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 2
  %9 = trunc i32 %2 to i16
  store i16 %9, i16* %8, align 4
  %10 = getelementptr inbounds %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 3
  %11 = getelementptr inbounds %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 6
  %12 = bitcast [13 x i32]* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 52, i1 false)
  %13 = getelementptr inbounds %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 7
  %14 = bitcast i16* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 2 %14, i8 0, i64 32, i1 false)
  store i32 7777, i32* %13, align 4
  %15 = icmp sgt i32 %3, 0
  br i1 %15, label %17, label %16

16:                                               ; preds = %4
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str, i64 0, i64 0), i32 217, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t, i64 0, i64 0), i32 %3, i32 0) #8
  unreachable

17:                                               ; preds = %4
  %18 = icmp slt i32 %3, 13
  br i1 %18, label %20, label %19

19:                                               ; preds = %17
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str, i64 0, i64 0), i32 218, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t, i64 0, i64 0), i32 %3, i32 12) #8
  unreachable

20:                                               ; preds = %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc19ComfortNoiseEncoder5ResetEiii(%"class.webrtc::ComfortNoiseEncoder"*, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %4
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str, i64 0, i64 0), i32 222, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t, i64 0, i64 0), i32 %3, i32 0) #8
  unreachable

7:                                                ; preds = %4
  %8 = icmp slt i32 %3, 13
  br i1 %8, label %10, label %9

9:                                                ; preds = %7
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str, i64 0, i64 0), i32 223, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t, i64 0, i64 0), i32 %3, i32 12) #8
  unreachable

10:                                               ; preds = %7
  %11 = sext i32 %3 to i64
  %12 = getelementptr inbounds %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 0
  store i64 %11, i64* %12, align 8
  %13 = getelementptr inbounds %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 1
  store i32 %1, i32* %13, align 8
  %14 = trunc i32 %2 to i16
  %15 = getelementptr inbounds %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 2
  store i16 %14, i16* %15, align 4
  %16 = getelementptr inbounds %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 3
  %17 = getelementptr %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 6, i64 0
  %18 = bitcast i32* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %18, i8 0, i64 52, i1 false)
  %19 = getelementptr inbounds %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 7
  %20 = bitcast i16* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 2 %20, i8 0, i64 32, i1 false)
  store i32 7777, i32* %19, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN6webrtc19ComfortNoiseEncoder6EncodeEN3rtc9ArrayViewIKsLln4711EEEbPNS1_7BufferTIhLb0EEE(%"class.webrtc::ComfortNoiseEncoder"*, i16*, i64, i1 zeroext, %"class.rtc::BufferT"* nocapture) local_unnamed_addr #0 align 2 {
  %6 = bitcast i16* %1 to i8*
  %7 = alloca [13 x i16], align 16
  %8 = alloca [13 x i32], align 16
  %9 = alloca [13 x i16], align 16
  %10 = bitcast [13 x i16]* %9 to i8*
  %11 = alloca [640 x i16], align 16
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca [640 x i16], align 16
  %15 = bitcast [640 x i16]* %14 to i8*
  %16 = bitcast [13 x i16]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 26, i8* nonnull %16) #7
  %17 = getelementptr inbounds [13 x i16], [13 x i16]* %7, i64 0, i64 0
  %18 = bitcast [13 x i32]* %8 to i8*
  %19 = bitcast [13 x i16]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -86, i64 26, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 52, i8* nonnull %18) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -86, i64 52, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 26, i8* nonnull %10) #7
  %20 = getelementptr inbounds [13 x i16], [13 x i16]* %9, i64 0, i64 0
  %21 = bitcast [640 x i16]* %11 to i8*
  %22 = bitcast [13 x i16]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -86, i64 26, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 1280, i8* nonnull %21) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -86, i64 1280, i1 false)
  %23 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %23) #7
  store i32 -1431655766, i32* %12, align 4
  %24 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #7
  store i32 -1431655766, i32* %13, align 4
  call void @llvm.lifetime.start.p0i8(i64 1280, i8* nonnull %15) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 1280, i1 false)
  %25 = icmp ult i64 %2, 641
  br i1 %25, label %26, label %30

26:                                               ; preds = %5
  %27 = icmp eq i64 %2, 0
  br i1 %27, label %31, label %28

28:                                               ; preds = %26
  %29 = shl nuw i64 %2, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %15, i8* align 2 %6, i64 %29, i1 false)
  br label %31

30:                                               ; preds = %5
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str, i64 0, i64 0), i32 259, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE5EmEES6_EEEvPKciS8_DpRKT_E1t, i64 0, i64 0), i64 %2, i64 640) #8
  unreachable

31:                                               ; preds = %28, %26
  %32 = getelementptr inbounds [640 x i16], [640 x i16]* %14, i64 0, i64 0
  %33 = call i32 @WebRtcSpl_Energy(i16* nonnull %32, i64 %2, i32* nonnull %12) #7
  %34 = load i32, i32* %12, align 4
  %35 = icmp sgt i32 %34, 0
  br i1 %35, label %36, label %51

36:                                               ; preds = %31, %36
  %37 = phi i64 [ %48, %36 ], [ %2, %31 ]
  %38 = phi i32 [ %45, %36 ], [ %33, %31 ]
  %39 = phi i32 [ %43, %36 ], [ %34, %31 ]
  %40 = icmp sgt i32 %39, 5
  %41 = add nsw i32 %39, -1
  %42 = add nsw i32 %39, -5
  %43 = select i1 %40, i32 5, i32 %41
  %44 = select i1 %40, i32 %42, i32 0
  %45 = shl i32 %38, %44
  %46 = xor i1 %40, true
  %47 = zext i1 %46 to i64
  %48 = lshr i64 %37, %47
  %49 = icmp sgt i32 %43, 0
  br i1 %49, label %36, label %50

50:                                               ; preds = %36
  store i32 %43, i32* %12, align 4
  br label %51

51:                                               ; preds = %50, %31
  %52 = phi i32 [ %45, %50 ], [ %33, %31 ]
  %53 = phi i64 [ %48, %50 ], [ %2, %31 ]
  %54 = trunc i64 %53 to i16
  %55 = call i32 @WebRtcSpl_DivW32W16(i32 %52, i16 signext %54) #7
  %56 = icmp sgt i32 %55, 1
  br i1 %56, label %63, label %57

57:                                               ; preds = %51
  %58 = getelementptr inbounds %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 0
  %59 = load i64, i64* %58, align 8
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %168, label %61

61:                                               ; preds = %57
  %62 = shl nuw i64 %59, 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 0, i64 %62, i1 false)
  br label %168

63:                                               ; preds = %51
  %64 = getelementptr inbounds [640 x i16], [640 x i16]* %11, i64 0, i64 0
  %65 = lshr i64 %2, 1
  call void @WebRtcSpl_GetHanningWindow(i16* nonnull %64, i64 %65) #7
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %116, label %67

67:                                               ; preds = %63
  %68 = add nsw i64 %65, -1
  %69 = and i64 %65, 3
  %70 = icmp ult i64 %68, 3
  br i1 %70, label %102, label %71

71:                                               ; preds = %67
  %72 = sub nsw i64 %65, %69
  br label %73

73:                                               ; preds = %73, %71
  %74 = phi i64 [ 0, %71 ], [ %99, %73 ]
  %75 = phi i64 [ %72, %71 ], [ %100, %73 ]
  %76 = getelementptr inbounds [640 x i16], [640 x i16]* %11, i64 0, i64 %74
  %77 = load i16, i16* %76, align 8
  %78 = xor i64 %74, -1
  %79 = add i64 %78, %2
  %80 = getelementptr inbounds [640 x i16], [640 x i16]* %11, i64 0, i64 %79
  store i16 %77, i16* %80, align 2
  %81 = or i64 %74, 1
  %82 = getelementptr inbounds [640 x i16], [640 x i16]* %11, i64 0, i64 %81
  %83 = load i16, i16* %82, align 2
  %84 = sub nuw nsw i64 -2, %74
  %85 = add i64 %84, %2
  %86 = getelementptr inbounds [640 x i16], [640 x i16]* %11, i64 0, i64 %85
  store i16 %83, i16* %86, align 2
  %87 = or i64 %74, 2
  %88 = getelementptr inbounds [640 x i16], [640 x i16]* %11, i64 0, i64 %87
  %89 = load i16, i16* %88, align 4
  %90 = sub nuw nsw i64 -3, %74
  %91 = add i64 %90, %2
  %92 = getelementptr inbounds [640 x i16], [640 x i16]* %11, i64 0, i64 %91
  store i16 %89, i16* %92, align 2
  %93 = or i64 %74, 3
  %94 = getelementptr inbounds [640 x i16], [640 x i16]* %11, i64 0, i64 %93
  %95 = load i16, i16* %94, align 2
  %96 = sub nuw nsw i64 -4, %74
  %97 = add i64 %96, %2
  %98 = getelementptr inbounds [640 x i16], [640 x i16]* %11, i64 0, i64 %97
  store i16 %95, i16* %98, align 2
  %99 = add nuw nsw i64 %74, 4
  %100 = add i64 %75, -4
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %73

102:                                              ; preds = %73, %67
  %103 = phi i64 [ 0, %67 ], [ %99, %73 ]
  %104 = icmp eq i64 %69, 0
  br i1 %104, label %116, label %105

105:                                              ; preds = %102, %105
  %106 = phi i64 [ %113, %105 ], [ %103, %102 ]
  %107 = phi i64 [ %114, %105 ], [ %69, %102 ]
  %108 = getelementptr inbounds [640 x i16], [640 x i16]* %11, i64 0, i64 %106
  %109 = load i16, i16* %108, align 2
  %110 = xor i64 %106, -1
  %111 = add i64 %110, %2
  %112 = getelementptr inbounds [640 x i16], [640 x i16]* %11, i64 0, i64 %111
  store i16 %109, i16* %112, align 2
  %113 = add nuw nsw i64 %106, 1
  %114 = add i64 %107, -1
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %116, label %105, !llvm.loop !8

116:                                              ; preds = %102, %105, %63
  call void @WebRtcSpl_ElementwiseVectorMult(i16* nonnull %32, i16* nonnull %64, i16* nonnull %32, i64 %2, i16 signext 14) #7
  %117 = getelementptr inbounds %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 0
  %118 = load i64, i64* %117, align 8
  %119 = getelementptr inbounds [13 x i32], [13 x i32]* %8, i64 0, i64 0
  %120 = call i64 @WebRtcSpl_AutoCorrelation(i16* nonnull %32, i64 %2, i64 %118, i32* nonnull %119, i32* nonnull %13) #7
  %121 = load i32, i32* %119, align 16
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %124

123:                                              ; preds = %116
  store i32 32767, i32* %119, align 16
  br label %124

124:                                              ; preds = %123, %116
  %125 = phi i32 [ 32767, %123 ], [ %121, %116 ]
  %126 = load i64, i64* %117, align 8
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %162, label %128

128:                                              ; preds = %124, %159
  %129 = phi i32 [ %161, %159 ], [ %125, %124 ]
  %130 = phi i16* [ %160, %159 ], [ getelementptr inbounds ([12 x i16], [12 x i16]* @_ZN6webrtc12_GLOBAL__N_121WebRtcCng_kCorrWindowE, i64 0, i64 0), %124 ]
  %131 = phi i32* [ %155, %159 ], [ %119, %124 ]
  %132 = phi i64 [ %156, %159 ], [ 0, %124 ]
  %133 = icmp slt i32 %129, 0
  br i1 %133, label %134, label %136

134:                                              ; preds = %128
  %135 = sub nsw i32 0, %129
  store i32 %135, i32* %131, align 4
  br label %136

136:                                              ; preds = %134, %128
  %137 = phi i32 [ %135, %134 ], [ %129, %128 ]
  %138 = load i16, i16* %130, align 2
  %139 = sext i16 %138 to i32
  %140 = and i32 %137, 65535
  %141 = mul nsw i32 %140, %139
  %142 = lshr i32 %141, 16
  %143 = lshr i32 %137, 16
  %144 = mul nsw i32 %143, %139
  %145 = add nsw i32 %142, %144
  %146 = and i32 %141, 32768
  %147 = shl i32 %145, 16
  %148 = or i32 %147, %146
  %149 = lshr i32 %145, 16
  %150 = shl i32 %149, 17
  %151 = lshr exact i32 %148, 15
  %152 = or i32 %151, %150
  %153 = sub nsw i32 0, %152
  %154 = select i1 %133, i32 %153, i32 %152
  store i32 %154, i32* %131, align 4
  %155 = getelementptr inbounds i32, i32* %131, i64 1
  %156 = add nuw i64 %132, 1
  %157 = load i64, i64* %117, align 8
  %158 = icmp ult i64 %156, %157
  br i1 %158, label %159, label %162

159:                                              ; preds = %136
  %160 = getelementptr inbounds i16, i16* %130, i64 1
  %161 = load i32, i32* %155, align 4
  br label %128

162:                                              ; preds = %136, %124
  %163 = phi i64 [ 0, %124 ], [ %157, %136 ]
  %164 = call signext i16 @WebRtcSpl_LevinsonDurbin(i32* nonnull %119, i16* nonnull %17, i16* nonnull %20, i64 %163) #7
  %165 = icmp eq i16 %164, 0
  br i1 %165, label %312, label %166

166:                                              ; preds = %162
  %167 = load i64, i64* %117, align 8
  br label %168

168:                                              ; preds = %166, %61, %57
  %169 = phi i64 [ %167, %166 ], [ %59, %61 ], [ 0, %57 ]
  %170 = getelementptr inbounds %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 0
  %171 = icmp ne i64 %169, 0
  br i1 %3, label %173, label %172

172:                                              ; preds = %168
  br i1 %171, label %185, label %203

173:                                              ; preds = %168
  br i1 %171, label %174, label %182

174:                                              ; preds = %173, %174
  %175 = phi i64 [ %179, %174 ], [ 0, %173 ]
  %176 = getelementptr inbounds [13 x i16], [13 x i16]* %9, i64 0, i64 %175
  %177 = load i16, i16* %176, align 2
  %178 = getelementptr inbounds %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 5, i64 %175
  store i16 %177, i16* %178, align 2
  %179 = add nuw i64 %175, 1
  %180 = load i64, i64* %170, align 8
  %181 = icmp ult i64 %179, %180
  br i1 %181, label %174, label %182

182:                                              ; preds = %174, %173
  %183 = phi i64 [ 0, %173 ], [ %180, %174 ]
  %184 = getelementptr inbounds %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 4
  store i32 %55, i32* %184, align 8
  br label %212

185:                                              ; preds = %172, %185
  %186 = phi i64 [ %200, %185 ], [ 0, %172 ]
  %187 = getelementptr inbounds %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 5, i64 %186
  %188 = load i16, i16* %187, align 2
  %189 = sext i16 %188 to i32
  %190 = mul nsw i32 %189, 19661
  %191 = lshr i32 %190, 15
  %192 = trunc i32 %191 to i16
  %193 = getelementptr inbounds [13 x i16], [13 x i16]* %9, i64 0, i64 %186
  %194 = load i16, i16* %193, align 2
  %195 = sext i16 %194 to i32
  %196 = mul nsw i32 %195, 26214
  %197 = lshr i32 %196, 16
  %198 = trunc i32 %197 to i16
  %199 = add i16 %198, %192
  store i16 %199, i16* %187, align 2
  %200 = add nuw i64 %186, 1
  %201 = load i64, i64* %170, align 8
  %202 = icmp ult i64 %200, %201
  br i1 %202, label %185, label %203

203:                                              ; preds = %185, %172
  %204 = phi i64 [ 0, %172 ], [ %201, %185 ]
  %205 = ashr i32 %55, 2
  %206 = getelementptr inbounds %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 4
  %207 = load i32, i32* %206, align 8
  %208 = ashr i32 %207, 1
  %209 = add nsw i32 %208, %205
  %210 = ashr i32 %207, 2
  %211 = add nsw i32 %209, %210
  store i32 %211, i32* %206, align 8
  br label %212

212:                                              ; preds = %203, %182
  %213 = phi i64 [ %204, %203 ], [ %183, %182 ]
  %214 = phi i32 [ %211, %203 ], [ %55, %182 ]
  %215 = icmp slt i32 %214, 1
  br i1 %215, label %216, label %218

216:                                              ; preds = %212
  %217 = getelementptr inbounds %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 4
  store i32 1, i32* %217, align 8
  br label %218

218:                                              ; preds = %216, %212
  %219 = phi i32 [ 1, %216 ], [ %214, %212 ]
  %220 = getelementptr inbounds %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 3
  %221 = load i16, i16* %220, align 2
  %222 = getelementptr inbounds %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 2
  %223 = load i16, i16* %222, align 4
  %224 = icmp sle i16 %223, %221
  %225 = or i1 %224, %3
  br i1 %225, label %226, label %301

226:                                              ; preds = %218, %324
  %227 = phi i64 [ %325, %324 ], [ 1, %218 ]
  %228 = getelementptr inbounds [94 x i32], [94 x i32]* @_ZN6webrtc12_GLOBAL__N_115WebRtcCng_kDbovE, i64 0, i64 %227
  %229 = load i32, i32* %228, align 4
  %230 = icmp sgt i32 %219, %229
  br i1 %230, label %236, label %231

231:                                              ; preds = %226
  %232 = add nuw nsw i64 %227, 1
  %233 = getelementptr inbounds [94 x i32], [94 x i32]* @_ZN6webrtc12_GLOBAL__N_115WebRtcCng_kDbovE, i64 0, i64 %232
  %234 = load i32, i32* %233, align 4
  %235 = icmp sgt i32 %219, %234
  br i1 %235, label %236, label %314

236:                                              ; preds = %324, %319, %314, %231, %226
  %237 = phi i64 [ %227, %226 ], [ %232, %231 ], [ %315, %314 ], [ %320, %319 ], [ 94, %324 ]
  %238 = add i64 %213, 1
  %239 = getelementptr inbounds %"class.rtc::BufferT", %"class.rtc::BufferT"* %4, i64 0, i32 0
  %240 = load i64, i64* %239, align 8
  %241 = add i64 %240, %238
  %242 = getelementptr inbounds %"class.rtc::BufferT", %"class.rtc::BufferT"* %4, i64 0, i32 1
  %243 = load i64, i64* %242, align 8
  %244 = icmp ult i64 %243, %241
  br i1 %244, label %245, label %261

245:                                              ; preds = %236
  %246 = lshr i64 %243, 1
  %247 = add i64 %246, %243
  %248 = icmp ugt i64 %247, %241
  %249 = select i1 %248, i64 %247, i64 %241
  %250 = call i8* @_Znam(i64 %249) #9
  %251 = ptrtoint i8* %250 to i64
  %252 = getelementptr inbounds %"class.rtc::BufferT", %"class.rtc::BufferT"* %4, i64 0, i32 2
  %253 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %252, i64 0, i32 0, i32 0, i32 0
  %254 = load i8*, i8** %253, align 8
  %255 = icmp eq i8* %254, null
  br i1 %255, label %256, label %258

256:                                              ; preds = %245
  %257 = bitcast %"class.std::__1::unique_ptr"* %252 to i64*
  store i64 %251, i64* %257, align 8
  br label %260

258:                                              ; preds = %245
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %250, i8* nonnull align 1 %254, i64 %240, i1 false) #7
  %259 = bitcast %"class.std::__1::unique_ptr"* %252 to i64*
  store i64 %251, i64* %259, align 8
  call void @_ZdaPv(i8* nonnull %254) #9
  br label %260

260:                                              ; preds = %258, %256
  store i64 %249, i64* %242, align 8
  br label %261

261:                                              ; preds = %260, %236
  store i64 %241, i64* %239, align 8
  %262 = getelementptr inbounds %"class.rtc::BufferT", %"class.rtc::BufferT"* %4, i64 0, i32 2, i32 0, i32 0, i32 0
  %263 = load i8*, i8** %262, align 8
  %264 = getelementptr inbounds i8, i8* %263, i64 %240
  %265 = icmp eq i64 %238, 0
  %266 = select i1 %265, i8* null, i8* %264
  %267 = trunc i64 %237 to i8
  store i8 %267, i8* %266, align 1
  %268 = load i64, i64* %170, align 8
  switch i64 %268, label %281 [
    i64 12, label %269
    i64 0, label %294
  ]

269:                                              ; preds = %261, %269
  %270 = phi i64 [ %277, %269 ], [ 0, %261 ]
  %271 = getelementptr inbounds %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 5, i64 %270
  %272 = load i16, i16* %271, align 2
  %273 = zext i16 %272 to i32
  %274 = add nuw nsw i32 %273, 128
  %275 = lshr i32 %274, 8
  %276 = trunc i32 %275 to i8
  %277 = add nuw i64 %270, 1
  %278 = getelementptr inbounds i8, i8* %266, i64 %277
  store i8 %276, i8* %278, align 1
  %279 = load i64, i64* %170, align 8
  %280 = icmp ult i64 %277, %279
  br i1 %280, label %269, label %294

281:                                              ; preds = %261, %281
  %282 = phi i64 [ %290, %281 ], [ 0, %261 ]
  %283 = getelementptr inbounds %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 5, i64 %282
  %284 = load i16, i16* %283, align 2
  %285 = zext i16 %284 to i32
  %286 = add nuw nsw i32 %285, 128
  %287 = lshr i32 %286, 8
  %288 = trunc i32 %287 to i8
  %289 = add i8 %288, 127
  %290 = add nuw i64 %282, 1
  %291 = getelementptr inbounds i8, i8* %266, i64 %290
  store i8 %289, i8* %291, align 1
  %292 = load i64, i64* %170, align 8
  %293 = icmp ult i64 %290, %292
  br i1 %293, label %281, label %294

294:                                              ; preds = %269, %281, %261
  store i64 %241, i64* %239, align 8
  %295 = mul i64 %2, 1000
  %296 = getelementptr inbounds %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 1
  %297 = load i32, i32* %296, align 8
  %298 = sext i32 %297 to i64
  %299 = udiv i64 %295, %298
  %300 = trunc i64 %299 to i16
  br label %309

301:                                              ; preds = %218
  %302 = mul i64 %2, 1000
  %303 = getelementptr inbounds %"class.webrtc::ComfortNoiseEncoder", %"class.webrtc::ComfortNoiseEncoder"* %0, i64 0, i32 1
  %304 = load i32, i32* %303, align 8
  %305 = sext i32 %304 to i64
  %306 = udiv i64 %302, %305
  %307 = trunc i64 %306 to i16
  %308 = add i16 %221, %307
  br label %309

309:                                              ; preds = %294, %301
  %310 = phi i16 [ %308, %301 ], [ %300, %294 ]
  %311 = phi i64 [ 0, %301 ], [ %238, %294 ]
  store i16 %310, i16* %220, align 2
  br label %312

312:                                              ; preds = %309, %162
  %313 = phi i64 [ 0, %162 ], [ %311, %309 ]
  call void @llvm.lifetime.end.p0i8(i64 1280, i8* nonnull %15) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #7
  call void @llvm.lifetime.end.p0i8(i64 1280, i8* nonnull %21) #7
  call void @llvm.lifetime.end.p0i8(i64 26, i8* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %18) #7
  call void @llvm.lifetime.end.p0i8(i64 26, i8* nonnull %16) #7
  ret i64 %313

314:                                              ; preds = %231
  %315 = add nuw nsw i64 %227, 2
  %316 = getelementptr inbounds [94 x i32], [94 x i32]* @_ZN6webrtc12_GLOBAL__N_115WebRtcCng_kDbovE, i64 0, i64 %315
  %317 = load i32, i32* %316, align 4
  %318 = icmp sgt i32 %219, %317
  br i1 %318, label %236, label %319

319:                                              ; preds = %314
  %320 = add nuw nsw i64 %227, 3
  %321 = getelementptr inbounds [94 x i32], [94 x i32]* @_ZN6webrtc12_GLOBAL__N_115WebRtcCng_kDbovE, i64 0, i64 %320
  %322 = load i32, i32* %321, align 4
  %323 = icmp sgt i32 %219, %322
  br i1 %323, label %236, label %324

324:                                              ; preds = %319
  %325 = add nuw nsw i64 %227, 4
  %326 = icmp eq i64 %325, 93
  br i1 %326, label %236, label %226
}

declare i32 @WebRtcSpl_Energy(i16*, i64, i32*) local_unnamed_addr #3

declare i32 @WebRtcSpl_DivW32W16(i32, i16 signext) local_unnamed_addr #3

declare void @WebRtcSpl_GetHanningWindow(i16*, i64) local_unnamed_addr #3

declare void @WebRtcSpl_ElementwiseVectorMult(i16*, i16*, i16*, i64, i16 signext) local_unnamed_addr #3

declare i64 @WebRtcSpl_AutoCorrelation(i16*, i64, i64, i32*, i32*) local_unnamed_addr #3

declare signext i16 @WebRtcSpl_LevinsonDurbin(i32*, i16*, i16*, i64) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8*, i32, i8*, i8*, ...) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = distinct !{!8, !5}
