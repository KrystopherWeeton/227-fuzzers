; ModuleID = '../../net/http/http_auth_challenge_tokenizer.cc'
source_filename = "../../net/http/http_auth_challenge_tokenizer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.net::HttpAuthChallengeTokenizer" = type { %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter", %"class.std::__1::basic_string" }
%"class.std::__1::__wrap_iter" = type { i8* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::StringTokenizerT" = type <{ %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i8, [3 x i8], i32, [4 x i8] }>
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.net::HttpUtil::NameValuePairsIterator" = type <{ %"class.net::HttpUtil::ValuesIterator", i8, [7 x i8], %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter", %"class.std::__1::basic_string", i8, i8, i8, [5 x i8] }>
%"class.net::HttpUtil::ValuesIterator" = type <{ %"class.base::StringTokenizerT", %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter", i8, [7 x i8] }>
%"class.std::__1::__basic_string_common" = type { i8 }

$_ZN4base16StringTokenizerTINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_11__wrap_iterIPKcEEE12QuickGetNextEv = comdat any

@_ZN3net26HttpAuthChallengeTokenizerC1ENSt3__111__wrap_iterIPKcEES5_ = hidden unnamed_addr alias void (%"class.net::HttpAuthChallengeTokenizer"*, i8*, i8*), void (%"class.net::HttpAuthChallengeTokenizer"*, i8*, i8*)* @_ZN3net26HttpAuthChallengeTokenizerC2ENSt3__111__wrap_iterIPKcEES5_
@_ZN3net26HttpAuthChallengeTokenizerD1Ev = hidden unnamed_addr alias void (%"class.net::HttpAuthChallengeTokenizer"*), void (%"class.net::HttpAuthChallengeTokenizer"*)* @_ZN3net26HttpAuthChallengeTokenizerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net26HttpAuthChallengeTokenizerC2ENSt3__111__wrap_iterIPKcEES5_(%"class.net::HttpAuthChallengeTokenizer"*, i8*, i8*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.net::HttpAuthChallengeTokenizer", %"class.net::HttpAuthChallengeTokenizer"* %0, i64 0, i32 0, i32 0
  store i8* %1, i8** %4, align 8
  %5 = getelementptr inbounds %"class.net::HttpAuthChallengeTokenizer", %"class.net::HttpAuthChallengeTokenizer"* %0, i64 0, i32 1, i32 0
  store i8* %2, i8** %5, align 8
  %6 = getelementptr inbounds %"class.net::HttpAuthChallengeTokenizer", %"class.net::HttpAuthChallengeTokenizer"* %0, i64 0, i32 2, i32 0
  store i8* %2, i8** %6, align 8
  %7 = getelementptr inbounds %"class.net::HttpAuthChallengeTokenizer", %"class.net::HttpAuthChallengeTokenizer"* %0, i64 0, i32 3, i32 0
  store i8* %2, i8** %7, align 8
  %8 = getelementptr inbounds %"class.net::HttpAuthChallengeTokenizer", %"class.net::HttpAuthChallengeTokenizer"* %0, i64 0, i32 4
  %9 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #7
  tail call void @_ZN3net26HttpAuthChallengeTokenizer4InitENSt3__111__wrap_iterIPKcEES5_(%"class.net::HttpAuthChallengeTokenizer"* %0, i8* %1, i8* %2)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net26HttpAuthChallengeTokenizer4InitENSt3__111__wrap_iterIPKcEES5_(%"class.net::HttpAuthChallengeTokenizer"*, i8*, i8*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::StringTokenizerT", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = bitcast %"class.base::StringTokenizerT"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %7) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 96, i1 false)
  %8 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #7
  %9 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %9, i64 0, i32 1, i32 0
  store i8 2, i8* %10, align 1
  %11 = bitcast %"class.std::__1::basic_string"* %5 to i16*
  store i16 2336, i16* %11, align 8
  %12 = getelementptr inbounds i8, i8* %8, i64 2
  store i8 0, i8* %12, align 2
  %13 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %4, i64 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %4, i64 0, i32 1, i32 0
  %15 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %4, i64 0, i32 2, i32 0
  %16 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %4, i64 0, i32 3, i32 0
  %17 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %4, i64 0, i32 4
  %18 = bitcast %"class.std::__1::basic_string"* %17 to i8*
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %17, i64 1
  %20 = bitcast %"class.std::__1::basic_string"* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 24, i1 false) #7
  store i8* %1, i8** %13, align 8
  store i8* %1, i8** %14, align 8
  store i8* %1, i8** %15, align 8
  store i8* %2, i8** %16, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* nonnull align 8 %8, i64 24, i1 false) #7
  %21 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %4, i64 0, i32 6
  store i32 0, i32* %21, align 8
  %22 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %4, i64 0, i32 7
  store i8 1, i8* %22, align 4
  %23 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %4, i64 0, i32 9
  store i32 0, i32* %23, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #7
  %24 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %4, i64 0, i32 5
  %25 = bitcast %"class.std::__1::basic_string"* %24 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %26 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %25, i64 0, i32 1, i32 0
  %27 = call zeroext i1 @_ZN4base16StringTokenizerTINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_11__wrap_iterIPKcEEE12QuickGetNextEv(%"class.base::StringTokenizerT"* nonnull %4) #7
  br i1 %27, label %28, label %51

28:                                               ; preds = %3
  %29 = load i8*, i8** %14, align 8
  %30 = bitcast i8** %15 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %32) #7
  %33 = ptrtoint i8* %29 to i64
  %34 = sub i64 %31, %33
  call void @_ZN4base12ToLowerASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* nonnull sret %6, i8* %29, i64 %34) #7
  %35 = getelementptr inbounds %"class.net::HttpAuthChallengeTokenizer", %"class.net::HttpAuthChallengeTokenizer"* %0, i64 0, i32 4
  %36 = bitcast %"class.std::__1::basic_string"* %35 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %37 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %36, i64 0, i32 1, i32 0
  %38 = load i8, i8* %37, align 1
  %39 = icmp slt i8 %38, 0
  br i1 %39, label %40, label %43

40:                                               ; preds = %28
  %41 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %35, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  call void @_ZdlPv(i8* %42) #8
  br label %43

43:                                               ; preds = %40, %28
  %44 = bitcast %"class.std::__1::basic_string"* %35 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %44, i8* nonnull align 8 %32, i64 24, i1 false) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %32) #7
  %45 = load i64, i64* %30, align 8
  %46 = getelementptr inbounds %"class.net::HttpAuthChallengeTokenizer", %"class.net::HttpAuthChallengeTokenizer"* %0, i64 0, i32 2, i32 0
  %47 = bitcast i8** %46 to i64*
  store i64 %45, i64* %47, align 8
  %48 = getelementptr inbounds %"class.net::HttpAuthChallengeTokenizer", %"class.net::HttpAuthChallengeTokenizer"* %0, i64 0, i32 3, i32 0
  store i8* %2, i8** %48, align 8
  %49 = getelementptr inbounds %"class.net::HttpAuthChallengeTokenizer", %"class.net::HttpAuthChallengeTokenizer"* %0, i64 0, i32 2
  %50 = getelementptr inbounds %"class.net::HttpAuthChallengeTokenizer", %"class.net::HttpAuthChallengeTokenizer"* %0, i64 0, i32 3
  call void @_ZN3net8HttpUtil7TrimLWSEPNSt3__111__wrap_iterIPKcEES6_(%"class.std::__1::__wrap_iter"* %49, %"class.std::__1::__wrap_iter"* %50) #7
  br label %51

51:                                               ; preds = %3, %43
  %52 = load i8, i8* %26, align 1
  %53 = icmp slt i8 %52, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %51
  %55 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  call void @_ZdlPv(i8* %56) #8
  br label %57

57:                                               ; preds = %54, %51
  %58 = bitcast %"class.std::__1::basic_string"* %17 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %59 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %58, i64 0, i32 1, i32 0
  %60 = load i8, i8* %59, align 1
  %61 = icmp slt i8 %60, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %57
  %63 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load i8*, i8** %63, align 8
  call void @_ZdlPv(i8* %64) #8
  br label %65

65:                                               ; preds = %57, %62
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %7) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net26HttpAuthChallengeTokenizerD2Ev(%"class.net::HttpAuthChallengeTokenizer"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::HttpAuthChallengeTokenizer", %"class.net::HttpAuthChallengeTokenizer"* %0, i64 0, i32 4
  %3 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  tail call void @_ZdlPv(i8* %9) #8
  br label %10

10:                                               ; preds = %1, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3net26HttpAuthChallengeTokenizer11param_pairsEv(%"class.net::HttpUtil::NameValuePairsIterator"* noalias sret, %"class.net::HttpAuthChallengeTokenizer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::HttpAuthChallengeTokenizer", %"class.net::HttpAuthChallengeTokenizer"* %1, i64 0, i32 2, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.net::HttpAuthChallengeTokenizer", %"class.net::HttpAuthChallengeTokenizer"* %1, i64 0, i32 3, i32 0
  %6 = load i8*, i8** %5, align 8
  tail call void @_ZN3net8HttpUtil22NameValuePairsIteratorC1ENSt3__111__wrap_iterIPKcEES6_c(%"class.net::HttpUtil::NameValuePairsIterator"* %0, i8* %4, i8* %6, i8 signext 44) #7
  ret void
}

declare void @_ZN3net8HttpUtil22NameValuePairsIteratorC1ENSt3__111__wrap_iterIPKcEES6_c(%"class.net::HttpUtil::NameValuePairsIterator"*, i8*, i8*, i8 signext) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3net26HttpAuthChallengeTokenizer12base64_paramEv(%"class.std::__1::basic_string"* noalias sret, %"class.net::HttpAuthChallengeTokenizer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::HttpAuthChallengeTokenizer", %"class.net::HttpAuthChallengeTokenizer"* %1, i64 0, i32 3
  %4 = getelementptr inbounds %"class.net::HttpAuthChallengeTokenizer", %"class.net::HttpAuthChallengeTokenizer"* %1, i64 0, i32 2
  %5 = bitcast %"class.std::__1::__wrap_iter"* %3 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::__wrap_iter"* %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = inttoptr i64 %8 to i8*
  %11 = icmp slt i64 %9, 1
  %12 = and i64 %9, 3
  %13 = icmp eq i64 %12, 0
  %14 = or i1 %11, %13
  br i1 %14, label %20, label %15

15:                                               ; preds = %2
  %16 = add nsw i64 %9, -1
  %17 = getelementptr inbounds i8, i8* %10, i64 %16
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %18, 61
  br i1 %19, label %146, label %20

20:                                               ; preds = %161, %156, %151, %146, %2, %15
  %21 = phi i64 [ %9, %2 ], [ %9, %15 ], [ %16, %146 ], [ %16, %151 ], [ %152, %156 ], [ %166, %161 ]
  %22 = getelementptr inbounds i8, i8* %10, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = sub i64 %23, %8
  %25 = icmp ugt i64 %24, -17
  br i1 %25, label %26, label %28

26:                                               ; preds = %20
  %27 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %27) #9
  unreachable

28:                                               ; preds = %20
  %29 = icmp ult i64 %24, 23
  br i1 %29, label %30, label %35

30:                                               ; preds = %28
  %31 = trunc i64 %24 to i8
  %32 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %33 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %32, i64 0, i32 1, i32 0
  store i8 %31, i8* %33, align 1
  %34 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %43

35:                                               ; preds = %28
  %36 = add nuw i64 %24, 16
  %37 = and i64 %36, -16
  %38 = tail call i8* @_Znwm(i64 %37) #8
  %39 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %38, i8** %39, align 8
  %40 = or i64 %37, -9223372036854775808
  %41 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %40, i64* %41, align 8
  %42 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %24, i64* %42, align 8
  br label %43

43:                                               ; preds = %35, %30
  %44 = phi i8* [ %34, %30 ], [ %38, %35 ]
  %45 = icmp eq i64 %21, 0
  br i1 %45, label %144, label %46

46:                                               ; preds = %43
  %47 = icmp ult i64 %21, 32
  br i1 %47, label %134, label %48

48:                                               ; preds = %46
  %49 = getelementptr i8, i8* %44, i64 %21
  %50 = icmp ult i8* %44, %22
  %51 = icmp ugt i8* %49, %10
  %52 = and i1 %50, %51
  br i1 %52, label %134, label %53

53:                                               ; preds = %48
  %54 = and i64 %21, -32
  %55 = getelementptr i8, i8* %44, i64 %54
  %56 = getelementptr i8, i8* %10, i64 %54
  %57 = add i64 %54, -32
  %58 = lshr exact i64 %57, 5
  %59 = add nuw nsw i64 %58, 1
  %60 = and i64 %59, 3
  %61 = icmp ult i64 %57, 96
  br i1 %61, label %113, label %62

62:                                               ; preds = %53
  %63 = sub nsw i64 %59, %60
  br label %64

64:                                               ; preds = %64, %62
  %65 = phi i64 [ 0, %62 ], [ %110, %64 ]
  %66 = phi i64 [ %63, %62 ], [ %111, %64 ]
  %67 = getelementptr i8, i8* %44, i64 %65
  %68 = getelementptr i8, i8* %10, i64 %65
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1, !alias.scope !2
  %71 = getelementptr i8, i8* %68, i64 16
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !2
  %74 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %74, align 1, !alias.scope !5, !noalias !2
  %75 = getelementptr i8, i8* %67, i64 16
  %76 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %76, align 1, !alias.scope !5, !noalias !2
  %77 = or i64 %65, 32
  %78 = getelementptr i8, i8* %44, i64 %77
  %79 = getelementptr i8, i8* %10, i64 %77
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1, !alias.scope !2
  %82 = getelementptr i8, i8* %79, i64 16
  %83 = bitcast i8* %82 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !2
  %85 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %85, align 1, !alias.scope !5, !noalias !2
  %86 = getelementptr i8, i8* %78, i64 16
  %87 = bitcast i8* %86 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %87, align 1, !alias.scope !5, !noalias !2
  %88 = or i64 %65, 64
  %89 = getelementptr i8, i8* %44, i64 %88
  %90 = getelementptr i8, i8* %10, i64 %88
  %91 = bitcast i8* %90 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 1, !alias.scope !2
  %93 = getelementptr i8, i8* %90, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1, !alias.scope !2
  %96 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %96, align 1, !alias.scope !5, !noalias !2
  %97 = getelementptr i8, i8* %89, i64 16
  %98 = bitcast i8* %97 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %98, align 1, !alias.scope !5, !noalias !2
  %99 = or i64 %65, 96
  %100 = getelementptr i8, i8* %44, i64 %99
  %101 = getelementptr i8, i8* %10, i64 %99
  %102 = bitcast i8* %101 to <16 x i8>*
  %103 = load <16 x i8>, <16 x i8>* %102, align 1, !alias.scope !2
  %104 = getelementptr i8, i8* %101, i64 16
  %105 = bitcast i8* %104 to <16 x i8>*
  %106 = load <16 x i8>, <16 x i8>* %105, align 1, !alias.scope !2
  %107 = bitcast i8* %100 to <16 x i8>*
  store <16 x i8> %103, <16 x i8>* %107, align 1, !alias.scope !5, !noalias !2
  %108 = getelementptr i8, i8* %100, i64 16
  %109 = bitcast i8* %108 to <16 x i8>*
  store <16 x i8> %106, <16 x i8>* %109, align 1, !alias.scope !5, !noalias !2
  %110 = add i64 %65, 128
  %111 = add i64 %66, -4
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %64, !llvm.loop !7

113:                                              ; preds = %64, %53
  %114 = phi i64 [ 0, %53 ], [ %110, %64 ]
  %115 = icmp eq i64 %60, 0
  br i1 %115, label %132, label %116

116:                                              ; preds = %113, %116
  %117 = phi i64 [ %129, %116 ], [ %114, %113 ]
  %118 = phi i64 [ %130, %116 ], [ %60, %113 ]
  %119 = getelementptr i8, i8* %44, i64 %117
  %120 = getelementptr i8, i8* %10, i64 %117
  %121 = bitcast i8* %120 to <16 x i8>*
  %122 = load <16 x i8>, <16 x i8>* %121, align 1, !alias.scope !2
  %123 = getelementptr i8, i8* %120, i64 16
  %124 = bitcast i8* %123 to <16 x i8>*
  %125 = load <16 x i8>, <16 x i8>* %124, align 1, !alias.scope !2
  %126 = bitcast i8* %119 to <16 x i8>*
  store <16 x i8> %122, <16 x i8>* %126, align 1, !alias.scope !5, !noalias !2
  %127 = getelementptr i8, i8* %119, i64 16
  %128 = bitcast i8* %127 to <16 x i8>*
  store <16 x i8> %125, <16 x i8>* %128, align 1, !alias.scope !5, !noalias !2
  %129 = add i64 %117, 32
  %130 = add i64 %118, -1
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %116, !llvm.loop !9

132:                                              ; preds = %116, %113
  %133 = icmp eq i64 %21, %54
  br i1 %133, label %144, label %134

134:                                              ; preds = %132, %48, %46
  %135 = phi i8* [ %44, %48 ], [ %44, %46 ], [ %55, %132 ]
  %136 = phi i8* [ %10, %48 ], [ %10, %46 ], [ %56, %132 ]
  br label %137

137:                                              ; preds = %134, %137
  %138 = phi i8* [ %142, %137 ], [ %135, %134 ]
  %139 = phi i8* [ %141, %137 ], [ %136, %134 ]
  %140 = load i8, i8* %139, align 1
  store i8 %140, i8* %138, align 1
  %141 = getelementptr inbounds i8, i8* %139, i64 1
  %142 = getelementptr inbounds i8, i8* %138, i64 1
  %143 = icmp eq i8* %141, %22
  br i1 %143, label %144, label %137, !llvm.loop !11

144:                                              ; preds = %137, %132, %43
  %145 = phi i8* [ %44, %43 ], [ %55, %132 ], [ %142, %137 ]
  store i8 0, i8* %145, align 1
  ret void

146:                                              ; preds = %15
  %147 = icmp slt i64 %9, 2
  %148 = and i64 %16, 3
  %149 = icmp eq i64 %148, 0
  %150 = or i1 %147, %149
  br i1 %150, label %20, label %151

151:                                              ; preds = %146
  %152 = add nsw i64 %9, -2
  %153 = getelementptr inbounds i8, i8* %10, i64 %152
  %154 = load i8, i8* %153, align 1
  %155 = icmp eq i8 %154, 61
  br i1 %155, label %156, label %20

156:                                              ; preds = %151
  %157 = icmp slt i64 %152, 1
  %158 = and i64 %152, 3
  %159 = icmp eq i64 %158, 0
  %160 = or i1 %157, %159
  br i1 %160, label %20, label %161

161:                                              ; preds = %156
  %162 = add nsw i64 %9, -3
  %163 = getelementptr inbounds i8, i8* %10, i64 %162
  %164 = load i8, i8* %163, align 1
  %165 = icmp eq i8 %164, 61
  %166 = select i1 %165, i64 %162, i64 %152
  br label %20
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN4base12ToLowerASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* sret, i8*, i64) local_unnamed_addr #2

declare void @_ZN3net8HttpUtil7TrimLWSEPNSt3__111__wrap_iterIPKcEES6_(%"class.std::__1::__wrap_iter"*, %"class.std::__1::__wrap_iter"*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4base16StringTokenizerTINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_11__wrap_iterIPKcEEE12QuickGetNextEv(%"class.base::StringTokenizerT"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %0, i64 0, i32 7
  store i8 0, i8* %2, align 4
  %3 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %0, i64 0, i32 1
  %5 = bitcast %"class.std::__1::__wrap_iter"* %3 to i64*
  %6 = bitcast %"class.std::__1::__wrap_iter"* %4 to i64*
  %7 = load i64, i64* %5, align 8
  store i64 %7, i64* %6, align 8
  %8 = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %3, i64 0, i32 0
  %9 = inttoptr i64 %7 to i8*
  %10 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %0, i64 0, i32 3, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = icmp eq i8* %11, %9
  br i1 %12, label %17, label %13

13:                                               ; preds = %1
  %14 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %0, i64 0, i32 4
  %15 = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %4, i64 0, i32 0
  %16 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %0, i64 0, i32 9
  br label %18

17:                                               ; preds = %34, %1
  store i8 1, i8* %2, align 4
  br label %61

18:                                               ; preds = %13, %34
  %19 = phi i8* [ %9, %13 ], [ %36, %34 ]
  %20 = getelementptr inbounds i8, i8* %19, i64 1
  store i8* %20, i8** %8, align 8
  %21 = load i8, i8* %19, align 1
  %22 = tail call i64 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcm(%"class.std::__1::basic_string"* %14, i8 signext %21, i64 0) #7
  %23 = icmp eq i64 %22, -1
  br i1 %23, label %24, label %34

24:                                               ; preds = %18
  %25 = load i32, i32* %16, align 8
  %26 = icmp eq i32 %25, 1
  br i1 %26, label %27, label %30

27:                                               ; preds = %24
  %28 = load i8*, i8** %15, align 8
  %29 = load i8, i8* %28, align 1
  switch i8 %29, label %30 [
    i8 32, label %34
    i8 13, label %34
    i8 10, label %34
    i8 9, label %34
    i8 12, label %34
  ]

30:                                               ; preds = %27, %24
  %31 = load i8*, i8** %8, align 8
  %32 = load i8*, i8** %10, align 8
  %33 = icmp eq i8* %31, %32
  br i1 %33, label %61, label %39

34:                                               ; preds = %27, %27, %27, %27, %27, %18
  %35 = load i64, i64* %5, align 8
  store i64 %35, i64* %6, align 8
  %36 = inttoptr i64 %35 to i8*
  %37 = load i8*, i8** %10, align 8
  %38 = icmp eq i8* %37, %36
  br i1 %38, label %17, label %18

39:                                               ; preds = %30, %52
  %40 = phi i8* [ %53, %52 ], [ %31, %30 ]
  %41 = load i8, i8* %40, align 1
  %42 = tail call i64 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcm(%"class.std::__1::basic_string"* %14, i8 signext %41, i64 0) #7
  %43 = icmp eq i64 %42, -1
  br i1 %43, label %44, label %61

44:                                               ; preds = %39
  %45 = load i8*, i8** %8, align 8
  %46 = load i32, i32* %16, align 8
  %47 = icmp eq i32 %46, 1
  br i1 %47, label %48, label %52

48:                                               ; preds = %44
  %49 = load i8, i8* %45, align 1
  %50 = add i8 %49, -9
  %51 = icmp ult i8 %50, 24
  br i1 %51, label %56, label %52

52:                                               ; preds = %56, %48, %44
  %53 = getelementptr inbounds i8, i8* %45, i64 1
  store i8* %53, i8** %8, align 8
  %54 = load i8*, i8** %10, align 8
  %55 = icmp eq i8* %53, %54
  br i1 %55, label %61, label %39

56:                                               ; preds = %48
  %57 = zext i8 %50 to i32
  %58 = lshr i32 8388635, %57
  %59 = and i32 %58, 1
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %52, label %61

61:                                               ; preds = %17, %30, %52, %39, %56
  %62 = phi i1 [ true, %56 ], [ false, %17 ], [ true, %30 ], [ true, %52 ], [ true, %39 ]
  ret i1 %62
}

; Function Attrs: nounwind
declare i64 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcm(%"class.std::__1::basic_string"*, i8 signext, i64) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
