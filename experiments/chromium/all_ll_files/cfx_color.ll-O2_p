; ModuleID = '../../third_party/pdfium/core/fxge/cfx_color.cpp'
source_filename = "../../third_party/pdfium/core/fxge/cfx_color.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.CFX_Color = type { i32, float, float, float, float }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK9CFX_Color16ConvertColorTypeENS_4TypeE(%struct.CFX_Color* noalias nocapture sret, %struct.CFX_Color* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, %2
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = bitcast %struct.CFX_Color* %0 to i8*
  %9 = bitcast %struct.CFX_Color* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %8, i8* align 4 %9, i64 20, i1 false)
  br label %174

10:                                               ; preds = %3
  switch i32 %5, label %163 [
    i32 0, label %11
    i32 1, label %20
    i32 2, label %36
    i32 3, label %89
  ]

11:                                               ; preds = %10
  %12 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %1, i64 0, i32 1
  %13 = load float, float* %12, align 4
  %14 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %1, i64 0, i32 2
  %15 = load float, float* %14, align 4
  %16 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %1, i64 0, i32 3
  %17 = load float, float* %16, align 4
  %18 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %1, i64 0, i32 4
  %19 = load float, float* %18, align 4
  br label %163

20:                                               ; preds = %10
  switch i32 %2, label %163 [
    i32 2, label %21
    i32 3, label %28
  ]

21:                                               ; preds = %20
  %22 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %1, i64 0, i32 1
  %23 = load float, float* %22, align 4
  %24 = fcmp oge float %23, 0.000000e+00
  %25 = fcmp ole float %23, 1.000000e+00
  %26 = and i1 %24, %25
  %27 = select i1 %26, float %23, float 0.000000e+00
  br label %163

28:                                               ; preds = %20
  %29 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %1, i64 0, i32 1
  %30 = load float, float* %29, align 4
  %31 = fcmp oge float %30, 0.000000e+00
  %32 = fcmp ole float %30, 1.000000e+00
  %33 = and i1 %31, %32
  %34 = fsub float 1.000000e+00, %30
  %35 = select i1 %33, float %34, float 0.000000e+00
  br label %163

36:                                               ; preds = %10
  switch i32 %2, label %163 [
    i32 1, label %37
    i32 3, label %61
  ]

37:                                               ; preds = %36
  %38 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %1, i64 0, i32 1
  %39 = load float, float* %38, align 4
  %40 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %1, i64 0, i32 2
  %41 = load float, float* %40, align 4
  %42 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %1, i64 0, i32 3
  %43 = load float, float* %42, align 4
  %44 = fcmp oge float %39, 0.000000e+00
  %45 = fcmp ole float %39, 1.000000e+00
  %46 = and i1 %44, %45
  br i1 %46, label %47, label %163

47:                                               ; preds = %37
  %48 = fcmp oge float %41, 0.000000e+00
  %49 = fcmp ole float %41, 1.000000e+00
  %50 = and i1 %48, %49
  br i1 %50, label %51, label %163

51:                                               ; preds = %47
  %52 = fcmp oge float %43, 0.000000e+00
  %53 = fcmp ole float %43, 1.000000e+00
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %163

55:                                               ; preds = %51
  %56 = fmul float %39, 0x3FD3333340000000
  %57 = fmul float %41, 0x3FE2E147A0000000
  %58 = fadd float %56, %57
  %59 = fmul float %43, 0x3FBC28F5C0000000
  %60 = fadd float %58, %59
  br label %163

61:                                               ; preds = %36
  %62 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %1, i64 0, i32 1
  %63 = load float, float* %62, align 4
  %64 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %1, i64 0, i32 2
  %65 = bitcast float* %64 to <2 x float>*
  %66 = load <2 x float>, <2 x float>* %65, align 4
  %67 = fcmp oge float %63, 0.000000e+00
  %68 = fcmp ole float %63, 1.000000e+00
  %69 = and i1 %67, %68
  br i1 %69, label %70, label %163

70:                                               ; preds = %61
  %71 = extractelement <2 x float> %66, i32 0
  %72 = fcmp oge float %71, 0.000000e+00
  %73 = fcmp ole float %71, 1.000000e+00
  %74 = and i1 %72, %73
  br i1 %74, label %75, label %163

75:                                               ; preds = %70
  %76 = extractelement <2 x float> %66, i32 1
  %77 = fcmp oge float %76, 0.000000e+00
  %78 = fcmp ole float %76, 1.000000e+00
  %79 = and i1 %77, %78
  br i1 %79, label %80, label %163

80:                                               ; preds = %75
  %81 = fsub float 1.000000e+00, %63
  %82 = fsub <2 x float> <float 1.000000e+00, float 1.000000e+00>, %66
  %83 = extractelement <2 x float> %82, i32 0
  %84 = extractelement <2 x float> %82, i32 1
  %85 = fcmp olt float %84, %83
  %86 = select i1 %85, float %84, float %83
  %87 = fcmp olt float %86, %81
  %88 = select i1 %87, float %86, float %81
  br label %163

89:                                               ; preds = %10
  switch i32 %2, label %163 [
    i32 1, label %90
    i32 2, label %126
  ]

90:                                               ; preds = %89
  %91 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %1, i64 0, i32 1
  %92 = load float, float* %91, align 4
  %93 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %1, i64 0, i32 2
  %94 = bitcast float* %93 to <2 x float>*
  %95 = load <2 x float>, <2 x float>* %94, align 4
  %96 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %1, i64 0, i32 4
  %97 = load float, float* %96, align 4
  %98 = fcmp oge float %92, 0.000000e+00
  %99 = fcmp ole float %92, 1.000000e+00
  %100 = and i1 %98, %99
  br i1 %100, label %101, label %163

101:                                              ; preds = %90
  %102 = extractelement <2 x float> %95, i32 0
  %103 = fcmp oge float %102, 0.000000e+00
  %104 = fcmp ole float %102, 1.000000e+00
  %105 = and i1 %103, %104
  br i1 %105, label %106, label %163

106:                                              ; preds = %101
  %107 = extractelement <2 x float> %95, i32 1
  %108 = fcmp oge float %107, 0.000000e+00
  %109 = fcmp ole float %107, 1.000000e+00
  %110 = and i1 %108, %109
  br i1 %110, label %111, label %163

111:                                              ; preds = %106
  %112 = fcmp oge float %97, 0.000000e+00
  %113 = fcmp ole float %97, 1.000000e+00
  %114 = and i1 %112, %113
  br i1 %114, label %115, label %163

115:                                              ; preds = %111
  %116 = fmul float %92, 0x3FD3333340000000
  %117 = fmul <2 x float> %95, <float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000>
  %118 = extractelement <2 x float> %117, i32 0
  %119 = fadd float %116, %118
  %120 = extractelement <2 x float> %117, i32 1
  %121 = fadd float %119, %120
  %122 = fadd float %97, %121
  %123 = fcmp olt float %122, 1.000000e+00
  %124 = select i1 %123, float %122, float 1.000000e+00
  %125 = fsub float 1.000000e+00, %124
  br label %163

126:                                              ; preds = %89
  %127 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %1, i64 0, i32 1
  %128 = load float, float* %127, align 4
  %129 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %1, i64 0, i32 2
  %130 = load float, float* %129, align 4
  %131 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %1, i64 0, i32 3
  %132 = load float, float* %131, align 4
  %133 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %1, i64 0, i32 4
  %134 = load float, float* %133, align 4
  %135 = fcmp oge float %128, 0.000000e+00
  %136 = fcmp ole float %128, 1.000000e+00
  %137 = and i1 %135, %136
  br i1 %137, label %138, label %163

138:                                              ; preds = %126
  %139 = fcmp oge float %130, 0.000000e+00
  %140 = fcmp ole float %130, 1.000000e+00
  %141 = and i1 %139, %140
  br i1 %141, label %142, label %163

142:                                              ; preds = %138
  %143 = fcmp oge float %132, 0.000000e+00
  %144 = fcmp ole float %132, 1.000000e+00
  %145 = and i1 %143, %144
  br i1 %145, label %146, label %163

146:                                              ; preds = %142
  %147 = fcmp oge float %134, 0.000000e+00
  %148 = fcmp ole float %134, 1.000000e+00
  %149 = and i1 %147, %148
  br i1 %149, label %150, label %163

150:                                              ; preds = %146
  %151 = fadd float %128, %134
  %152 = fcmp olt float %151, 1.000000e+00
  %153 = select i1 %152, float %151, float 1.000000e+00
  %154 = fsub float 1.000000e+00, %153
  %155 = fadd float %130, %134
  %156 = fcmp olt float %155, 1.000000e+00
  %157 = select i1 %156, float %155, float 1.000000e+00
  %158 = fsub float 1.000000e+00, %157
  %159 = fadd float %132, %134
  %160 = fcmp olt float %159, 1.000000e+00
  %161 = select i1 %160, float %159, float 1.000000e+00
  %162 = fsub float 1.000000e+00, %161
  br label %163

163:                                              ; preds = %150, %146, %142, %138, %126, %115, %111, %106, %101, %90, %80, %75, %70, %61, %55, %51, %47, %37, %89, %36, %21, %28, %20, %10, %11
  %164 = phi i32 [ 0, %10 ], [ 0, %89 ], [ 0, %36 ], [ 0, %20 ], [ 3, %28 ], [ 2, %21 ], [ 0, %11 ], [ 1, %37 ], [ 1, %47 ], [ 1, %51 ], [ 1, %55 ], [ 3, %61 ], [ 3, %70 ], [ 3, %75 ], [ 3, %80 ], [ 1, %90 ], [ 1, %101 ], [ 1, %106 ], [ 1, %111 ], [ 1, %115 ], [ 2, %126 ], [ 2, %138 ], [ 2, %142 ], [ 2, %146 ], [ 2, %150 ]
  %165 = phi float [ 0.000000e+00, %10 ], [ 0.000000e+00, %89 ], [ 0.000000e+00, %36 ], [ 0.000000e+00, %20 ], [ 0.000000e+00, %28 ], [ %27, %21 ], [ %13, %11 ], [ 0.000000e+00, %37 ], [ 0.000000e+00, %47 ], [ 0.000000e+00, %51 ], [ %60, %55 ], [ 0.000000e+00, %61 ], [ 0.000000e+00, %70 ], [ 0.000000e+00, %75 ], [ %81, %80 ], [ 0.000000e+00, %90 ], [ 0.000000e+00, %101 ], [ 0.000000e+00, %106 ], [ 0.000000e+00, %111 ], [ %125, %115 ], [ 0.000000e+00, %126 ], [ 0.000000e+00, %138 ], [ 0.000000e+00, %142 ], [ 0.000000e+00, %146 ], [ %154, %150 ]
  %166 = phi float [ 0.000000e+00, %10 ], [ 0.000000e+00, %89 ], [ 0.000000e+00, %36 ], [ 0.000000e+00, %20 ], [ 0.000000e+00, %28 ], [ %27, %21 ], [ %15, %11 ], [ 0.000000e+00, %37 ], [ 0.000000e+00, %47 ], [ 0.000000e+00, %51 ], [ 0.000000e+00, %55 ], [ 0.000000e+00, %61 ], [ 0.000000e+00, %70 ], [ 0.000000e+00, %75 ], [ %83, %80 ], [ 0.000000e+00, %90 ], [ 0.000000e+00, %101 ], [ 0.000000e+00, %106 ], [ 0.000000e+00, %111 ], [ 0.000000e+00, %115 ], [ 0.000000e+00, %126 ], [ 0.000000e+00, %138 ], [ 0.000000e+00, %142 ], [ 0.000000e+00, %146 ], [ %158, %150 ]
  %167 = phi float [ 0.000000e+00, %10 ], [ 0.000000e+00, %89 ], [ 0.000000e+00, %36 ], [ 0.000000e+00, %20 ], [ 0.000000e+00, %28 ], [ %27, %21 ], [ %17, %11 ], [ 0.000000e+00, %37 ], [ 0.000000e+00, %47 ], [ 0.000000e+00, %51 ], [ 0.000000e+00, %55 ], [ 0.000000e+00, %61 ], [ 0.000000e+00, %70 ], [ 0.000000e+00, %75 ], [ %84, %80 ], [ 0.000000e+00, %90 ], [ 0.000000e+00, %101 ], [ 0.000000e+00, %106 ], [ 0.000000e+00, %111 ], [ 0.000000e+00, %115 ], [ 0.000000e+00, %126 ], [ 0.000000e+00, %138 ], [ 0.000000e+00, %142 ], [ 0.000000e+00, %146 ], [ %162, %150 ]
  %168 = phi float [ 0.000000e+00, %10 ], [ 0.000000e+00, %89 ], [ 0.000000e+00, %36 ], [ 0.000000e+00, %20 ], [ %35, %28 ], [ 0.000000e+00, %21 ], [ %19, %11 ], [ 0.000000e+00, %37 ], [ 0.000000e+00, %47 ], [ 0.000000e+00, %51 ], [ 0.000000e+00, %55 ], [ 0.000000e+00, %61 ], [ 0.000000e+00, %70 ], [ 0.000000e+00, %75 ], [ %88, %80 ], [ 0.000000e+00, %90 ], [ 0.000000e+00, %101 ], [ 0.000000e+00, %106 ], [ 0.000000e+00, %111 ], [ 0.000000e+00, %115 ], [ 0.000000e+00, %126 ], [ 0.000000e+00, %138 ], [ 0.000000e+00, %142 ], [ 0.000000e+00, %146 ], [ 0.000000e+00, %150 ]
  %169 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %0, i64 0, i32 0
  store i32 %164, i32* %169, align 4
  %170 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %0, i64 0, i32 1
  store float %165, float* %170, align 4
  %171 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %0, i64 0, i32 2
  store float %166, float* %171, align 4
  %172 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %0, i64 0, i32 3
  store float %167, float* %172, align 4
  %173 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %0, i64 0, i32 4
  store float %168, float* %173, align 4
  br label %174

174:                                              ; preds = %163, %7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZNK9CFX_Color9ToFXColorEi(%struct.CFX_Color* nocapture readonly, i32) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  switch i32 %4, label %63 [
    i32 3, label %21
    i32 1, label %5
    i32 2, label %13
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %0, i64 0, i32 1
  %7 = load float, float* %6, align 4
  %8 = fcmp oge float %7, 0.000000e+00
  %9 = fcmp ole float %7, 1.000000e+00
  %10 = and i1 %8, %9
  %11 = select i1 %10, float %7, float 0.000000e+00
  %12 = sitofp i32 %1 to float
  br label %63

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %0, i64 0, i32 1
  %15 = load float, float* %14, align 4
  %16 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %0, i64 0, i32 2
  %17 = load float, float* %16, align 4
  %18 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %0, i64 0, i32 3
  %19 = load float, float* %18, align 4
  %20 = sitofp i32 %1 to float
  br label %63

21:                                               ; preds = %2
  %22 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %0, i64 0, i32 1
  %23 = load float, float* %22, align 4
  %24 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %0, i64 0, i32 2
  %25 = load float, float* %24, align 4
  %26 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %0, i64 0, i32 3
  %27 = load float, float* %26, align 4
  %28 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %0, i64 0, i32 4
  %29 = load float, float* %28, align 4
  %30 = fcmp oge float %23, 0.000000e+00
  %31 = fcmp ole float %23, 1.000000e+00
  %32 = and i1 %30, %31
  br i1 %32, label %33, label %58

33:                                               ; preds = %21
  %34 = fcmp oge float %25, 0.000000e+00
  %35 = fcmp ole float %25, 1.000000e+00
  %36 = and i1 %34, %35
  br i1 %36, label %37, label %58

37:                                               ; preds = %33
  %38 = fcmp oge float %27, 0.000000e+00
  %39 = fcmp ole float %27, 1.000000e+00
  %40 = and i1 %38, %39
  br i1 %40, label %41, label %58

41:                                               ; preds = %37
  %42 = fcmp oge float %29, 0.000000e+00
  %43 = fcmp ole float %29, 1.000000e+00
  %44 = and i1 %42, %43
  br i1 %44, label %45, label %58

45:                                               ; preds = %41
  %46 = fadd float %23, %29
  %47 = fcmp olt float %46, 1.000000e+00
  %48 = select i1 %47, float %46, float 1.000000e+00
  %49 = fsub float 1.000000e+00, %48
  %50 = fadd float %25, %29
  %51 = fcmp olt float %50, 1.000000e+00
  %52 = select i1 %51, float %50, float 1.000000e+00
  %53 = fsub float 1.000000e+00, %52
  %54 = fadd float %27, %29
  %55 = fcmp olt float %54, 1.000000e+00
  %56 = select i1 %55, float %54, float 1.000000e+00
  %57 = fsub float 1.000000e+00, %56
  br label %58

58:                                               ; preds = %21, %33, %37, %41, %45
  %59 = phi float [ %49, %45 ], [ 0.000000e+00, %41 ], [ 0.000000e+00, %37 ], [ 0.000000e+00, %33 ], [ 0.000000e+00, %21 ]
  %60 = phi float [ %53, %45 ], [ 0.000000e+00, %41 ], [ 0.000000e+00, %37 ], [ 0.000000e+00, %33 ], [ 0.000000e+00, %21 ]
  %61 = phi float [ %57, %45 ], [ 0.000000e+00, %41 ], [ 0.000000e+00, %37 ], [ 0.000000e+00, %33 ], [ 0.000000e+00, %21 ]
  %62 = sitofp i32 %1 to float
  br label %63

63:                                               ; preds = %2, %58, %13, %5
  %64 = phi float [ %59, %58 ], [ %15, %13 ], [ %11, %5 ], [ 0.000000e+00, %2 ]
  %65 = phi float [ %60, %58 ], [ %17, %13 ], [ %11, %5 ], [ 0.000000e+00, %2 ]
  %66 = phi float [ %61, %58 ], [ %19, %13 ], [ %11, %5 ], [ 0.000000e+00, %2 ]
  %67 = phi float [ %62, %58 ], [ %20, %13 ], [ %12, %5 ], [ 0.000000e+00, %2 ]
  %68 = fptoui float %67 to i32
  %69 = fmul float %64, 2.550000e+02
  %70 = fptosi float %69 to i32
  %71 = fmul float %65, 2.550000e+02
  %72 = fptosi float %71 to i32
  %73 = fmul float %66, 2.550000e+02
  %74 = fptosi float %73 to i32
  %75 = shl i32 %68, 24
  %76 = shl i32 %70, 16
  %77 = shl i32 %72, 8
  %78 = or i32 %77, %76
  %79 = or i32 %78, %74
  %80 = or i32 %79, %75
  ret i32 %80
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK9CFX_ColormiEf(%struct.CFX_Color* noalias nocapture sret, %struct.CFX_Color* nocapture readonly, float) local_unnamed_addr #0 align 2 {
  %4 = alloca float, align 4
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = alloca float, align 4
  %10 = alloca float, align 4
  %11 = alloca float, align 4
  %12 = alloca float, align 4
  %13 = alloca float, align 4
  %14 = alloca float, align 4
  %15 = alloca float, align 4
  %16 = alloca float, align 4
  %17 = alloca float, align 4
  %18 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %0, i64 0, i32 0
  %19 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %0, i64 0, i32 1
  %20 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %0, i64 0, i32 2
  %21 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %0, i64 0, i32 3
  %22 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %1, i64 0, i32 0
  %23 = load i32, i32* %22, align 4
  store i32 %23, i32* %18, align 4
  %24 = bitcast float* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %24, i8 0, i64 16, i1 false)
  switch i32 %23, label %90 [
    i32 0, label %25
    i32 2, label %43
    i32 1, label %43
    i32 3, label %43
  ]

25:                                               ; preds = %3
  store i32 2, i32* %18, align 4
  %26 = bitcast float* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %26)
  %27 = fsub float 1.000000e+00, %2
  store float %27, float* %4, align 4
  %28 = bitcast float* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28)
  store float 0.000000e+00, float* %5, align 4
  %29 = fcmp olt float %27, 0.000000e+00
  %30 = select i1 %29, float* %5, float* %4
  %31 = bitcast float* %30 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = bitcast float* %19 to i32*
  store i32 %32, i32* %33, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %26)
  %34 = bitcast float* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %34)
  store float %27, float* %6, align 4
  %35 = bitcast float* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %35)
  store float 0.000000e+00, float* %7, align 4
  %36 = select i1 %29, float* %7, float* %6
  %37 = bitcast float* %36 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = bitcast float* %20 to i32*
  store i32 %38, i32* %39, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %35)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %34)
  %40 = bitcast float* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %40)
  store float %27, float* %8, align 4
  %41 = bitcast float* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %41)
  store float 0.000000e+00, float* %9, align 4
  %42 = select i1 %29, float* %9, float* %8
  br label %82

43:                                               ; preds = %3, %3, %3
  %44 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %0, i64 0, i32 4
  %45 = bitcast float* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %45)
  %46 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %1, i64 0, i32 1
  %47 = load float, float* %46, align 4
  %48 = fsub float %47, %2
  store float %48, float* %10, align 4
  %49 = bitcast float* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %49)
  store float 0.000000e+00, float* %11, align 4
  %50 = fcmp olt float %48, 0.000000e+00
  %51 = select i1 %50, float* %11, float* %10
  %52 = bitcast float* %51 to i32*
  %53 = load i32, i32* %52, align 4
  %54 = bitcast float* %19 to i32*
  store i32 %53, i32* %54, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %45)
  %55 = bitcast float* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %55)
  %56 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %1, i64 0, i32 2
  %57 = load float, float* %56, align 4
  %58 = fsub float %57, %2
  store float %58, float* %12, align 4
  %59 = bitcast float* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %59)
  store float 0.000000e+00, float* %13, align 4
  %60 = fcmp olt float %58, 0.000000e+00
  %61 = select i1 %60, float* %13, float* %12
  %62 = bitcast float* %61 to i32*
  %63 = load i32, i32* %62, align 4
  %64 = bitcast float* %20 to i32*
  store i32 %63, i32* %64, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %59)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %55)
  %65 = bitcast float* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %65)
  %66 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %1, i64 0, i32 3
  %67 = load float, float* %66, align 4
  %68 = fsub float %67, %2
  store float %68, float* %14, align 4
  %69 = bitcast float* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %69)
  store float 0.000000e+00, float* %15, align 4
  %70 = fcmp olt float %68, 0.000000e+00
  %71 = select i1 %70, float* %15, float* %14
  %72 = bitcast float* %71 to i32*
  %73 = load i32, i32* %72, align 4
  %74 = bitcast float* %21 to i32*
  store i32 %73, i32* %74, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %69)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %65)
  %75 = bitcast float* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %75)
  %76 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %1, i64 0, i32 4
  %77 = load float, float* %76, align 4
  %78 = fsub float %77, %2
  store float %78, float* %16, align 4
  %79 = bitcast float* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %79)
  store float 0.000000e+00, float* %17, align 4
  %80 = fcmp olt float %78, 0.000000e+00
  %81 = select i1 %80, float* %17, float* %16
  br label %82

82:                                               ; preds = %25, %43
  %83 = phi float* [ %81, %43 ], [ %42, %25 ]
  %84 = phi float* [ %44, %43 ], [ %21, %25 ]
  %85 = phi i8* [ %79, %43 ], [ %41, %25 ]
  %86 = phi i8* [ %75, %43 ], [ %40, %25 ]
  %87 = bitcast float* %83 to i32*
  %88 = load i32, i32* %87, align 4
  %89 = bitcast float* %84 to i32*
  store i32 %88, i32* %89, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %85)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %86)
  br label %90

90:                                               ; preds = %82, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK9CFX_ColordvEf(%struct.CFX_Color* noalias nocapture sret, %struct.CFX_Color* nocapture readonly, float) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %0, i64 0, i32 0
  %5 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %0, i64 0, i32 1
  %6 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 4
  store i32 %7, i32* %4, align 4
  %8 = bitcast float* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 16, i1 false)
  switch i32 %7, label %22 [
    i32 0, label %9
    i32 2, label %13
    i32 1, label %13
    i32 3, label %13
  ]

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %0, i64 0, i32 3
  %11 = getelementptr inbounds %struct.CFX_Color, %struct.CFX_Color* %0, i64 0, i32 2
  store i32 2, i32* %4, align 4
  %12 = fdiv float 1.000000e+00, %2
  store float %12, float* %5, align 4
  store float %12, float* %11, align 4
  store float %12, float* %10, align 4
  br label %22

13:                                               ; preds = %3, %3, %3
  %14 = bitcast %struct.CFX_Color* %0 to i8*
  %15 = bitcast %struct.CFX_Color* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %14, i8* align 4 %15, i64 20, i1 false)
  %16 = bitcast float* %5 to <4 x float>*
  %17 = load <4 x float>, <4 x float>* %16, align 4
  %18 = insertelement <4 x float> undef, float %2, i32 0
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> zeroinitializer
  %20 = fdiv <4 x float> %17, %19
  %21 = bitcast float* %5 to <4 x float>*
  store <4 x float> %20, <4 x float>* %21, align 4
  br label %22

22:                                               ; preds = %3, %13, %9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
