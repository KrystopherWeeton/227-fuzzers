; ModuleID = '../../third_party/lzma_sdk/Xz.c'
source_filename = "../../third_party/lzma_sdk/Xz.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.CXzStream = type { i16, i64, i64, %struct.CXzBlockSizes*, i64 }
%struct.CXzBlockSizes = type { i64, i64 }
%struct.ISzAlloc = type { i8* (i8*, i64)*, void (i8*, i8*)* }
%struct.CXzCheck = type { i32, i32, i64, %struct.CSha256 }
%struct.CSha256 = type { [8 x i32], i64, [64 x i8] }

@XZ_SIG = hidden local_unnamed_addr constant [6 x i8] c"\FD7zXZ\00", align 1
@XZ_FOOTER_SIG = hidden local_unnamed_addr constant [2 x i8] c"YZ", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @Xz_WriteVarInt(i8* nocapture, i64) local_unnamed_addr #0 {
  br label %3

3:                                                ; preds = %3, %2
  %4 = phi i64 [ %8, %3 ], [ 0, %2 ]
  %5 = phi i64 [ %10, %3 ], [ %1, %2 ]
  %6 = trunc i64 %5 to i8
  %7 = or i8 %6, -128
  %8 = add nuw nsw i64 %4, 1
  %9 = getelementptr inbounds i8, i8* %0, i64 %4
  store i8 %7, i8* %9, align 1
  %10 = lshr i64 %5, 7
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %3

12:                                               ; preds = %3
  %13 = trunc i64 %5 to i8
  %14 = trunc i64 %8 to i32
  %15 = and i64 %4, 4294967295
  %16 = getelementptr inbounds i8, i8* %0, i64 %15
  %17 = and i8 %13, 127
  store i8 %17, i8* %16, align 1
  ret i32 %14
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @Xz_Construct(%struct.CXzStream* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.CXzStream, %struct.CXzStream* %0, i64 0, i32 1
  %3 = getelementptr inbounds %struct.CXzStream, %struct.CXzStream* %0, i64 0, i32 0
  store i16 0, i16* %3, align 8
  %4 = bitcast i64* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @Xz_Free(%struct.CXzStream* nocapture, %struct.ISzAlloc*) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %1, i64 0, i32 1
  %4 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %5 = bitcast %struct.ISzAlloc* %1 to i8*
  %6 = getelementptr inbounds %struct.CXzStream, %struct.CXzStream* %0, i64 0, i32 3
  %7 = bitcast %struct.CXzBlockSizes** %6 to i8**
  %8 = load i8*, i8** %7, align 8
  tail call void %4(i8* %5, i8* %8) #5
  %9 = getelementptr inbounds %struct.CXzStream, %struct.CXzStream* %0, i64 0, i32 1
  %10 = bitcast i64* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @XzFlags_GetCheckSize(i16 zeroext) local_unnamed_addr #2 {
  %2 = and i16 %0, 15
  %3 = icmp eq i16 %2, 0
  br i1 %3, label %10, label %4

4:                                                ; preds = %1
  %5 = trunc i16 %2 to i8
  %6 = add nsw i8 %5, -1
  %7 = udiv i8 %6, 3
  %8 = zext i8 %7 to i32
  %9 = shl i32 4, %8
  br label %10

10:                                               ; preds = %1, %4
  %11 = phi i32 [ %9, %4 ], [ 0, %1 ]
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden void @XzCheck_Init(%struct.CXzCheck*, i32) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.CXzCheck, %struct.CXzCheck* %0, i64 0, i32 0
  store i32 %1, i32* %3, align 8
  switch i32 %1, label %10 [
    i32 1, label %4
    i32 4, label %6
    i32 10, label %8
  ]

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.CXzCheck, %struct.CXzCheck* %0, i64 0, i32 1
  store i32 -1, i32* %5, align 4
  br label %10

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.CXzCheck, %struct.CXzCheck* %0, i64 0, i32 2
  store i64 -1, i64* %7, align 8
  br label %10

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.CXzCheck, %struct.CXzCheck* %0, i64 0, i32 3
  tail call void @Sha256_Init(%struct.CSha256* %9) #5
  br label %10

10:                                               ; preds = %2, %8, %6, %4
  ret void
}

declare void @Sha256_Init(%struct.CSha256*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @XzCheck_Update(%struct.CXzCheck*, i8*, i64) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.CXzCheck, %struct.CXzCheck* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  switch i32 %5, label %16 [
    i32 1, label %6
    i32 4, label %10
    i32 10, label %14
  ]

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.CXzCheck, %struct.CXzCheck* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = tail call i32 @CrcUpdate(i32 %8, i8* %1, i64 %2) #5
  store i32 %9, i32* %7, align 4
  br label %16

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.CXzCheck, %struct.CXzCheck* %0, i64 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = tail call i64 @Crc64Update(i64 %12, i8* %1, i64 %2) #5
  store i64 %13, i64* %11, align 8
  br label %16

14:                                               ; preds = %3
  %15 = getelementptr inbounds %struct.CXzCheck, %struct.CXzCheck* %0, i64 0, i32 3
  tail call void @Sha256_Update(%struct.CSha256* %15, i8* %1, i64 %2) #5
  br label %16

16:                                               ; preds = %3, %14, %10, %6
  ret void
}

declare i32 @CrcUpdate(i32, i8*, i64) local_unnamed_addr #3

declare i64 @Crc64Update(i64, i8*, i64) local_unnamed_addr #3

declare void @Sha256_Update(%struct.CSha256*, i8*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @XzCheck_Final(%struct.CXzCheck*, i8*) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.CXzCheck, %struct.CXzCheck* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  switch i32 %4, label %38 [
    i32 1, label %5
    i32 4, label %10
    i32 10, label %36
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.CXzCheck, %struct.CXzCheck* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = xor i32 %7, -1
  %9 = bitcast i8* %1 to i32*
  store i32 %8, i32* %9, align 4
  br label %38

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.CXzCheck, %struct.CXzCheck* %0, i64 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = xor i64 %12, -1
  %14 = trunc i64 %13 to i8
  store i8 %14, i8* %1, align 1
  %15 = lshr i64 %13, 8
  %16 = trunc i64 %15 to i8
  %17 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %16, i8* %17, align 1
  %18 = lshr i64 %13, 16
  %19 = trunc i64 %18 to i8
  %20 = getelementptr inbounds i8, i8* %1, i64 2
  store i8 %19, i8* %20, align 1
  %21 = lshr i64 %13, 24
  %22 = trunc i64 %21 to i8
  %23 = getelementptr inbounds i8, i8* %1, i64 3
  store i8 %22, i8* %23, align 1
  %24 = lshr i64 %13, 32
  %25 = trunc i64 %24 to i8
  %26 = getelementptr inbounds i8, i8* %1, i64 4
  store i8 %25, i8* %26, align 1
  %27 = lshr i64 %13, 40
  %28 = trunc i64 %27 to i8
  %29 = getelementptr inbounds i8, i8* %1, i64 5
  store i8 %28, i8* %29, align 1
  %30 = lshr i64 %13, 48
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds i8, i8* %1, i64 6
  store i8 %31, i8* %32, align 1
  %33 = lshr i64 %13, 56
  %34 = trunc i64 %33 to i8
  %35 = getelementptr inbounds i8, i8* %1, i64 7
  store i8 %34, i8* %35, align 1
  br label %38

36:                                               ; preds = %2
  %37 = getelementptr inbounds %struct.CXzCheck, %struct.CXzCheck* %0, i64 0, i32 3
  tail call void @Sha256_Final(%struct.CSha256* %37, i8* %1) #5
  br label %38

38:                                               ; preds = %10, %5, %36, %2
  %39 = phi i32 [ 0, %2 ], [ 1, %36 ], [ 1, %5 ], [ 1, %10 ]
  ret i32 %39
}

declare void @Sha256_Final(%struct.CSha256*, i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
