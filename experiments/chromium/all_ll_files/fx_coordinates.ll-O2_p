; ModuleID = '../../third_party/pdfium/core/fxcrt/fx_coordinates.cpp'
source_filename = "../../third_party/pdfium/core/fxcrt/fx_coordinates.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_FloatRect = type { float, float, float, float }
%struct.FX_RECT = type { i32, i32, i32, i32 }
%class.CFX_PTemplate = type { float, float }
%class.CFX_RectF = type { float, float, float, float }
%class.CFX_Matrix = type { float, float, float, float, float, float }

@_ZN13CFX_FloatRectC1ERK7FX_RECT = hidden unnamed_addr alias void (%class.CFX_FloatRect*, %struct.FX_RECT*), void (%class.CFX_FloatRect*, %struct.FX_RECT*)* @_ZN13CFX_FloatRectC2ERK7FX_RECT
@_ZN13CFX_FloatRectC1ERK13CFX_PTemplateIfE = hidden unnamed_addr alias void (%class.CFX_FloatRect*, %class.CFX_PTemplate*), void (%class.CFX_FloatRect*, %class.CFX_PTemplate*)* @_ZN13CFX_FloatRectC2ERK13CFX_PTemplateIfE

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK7FX_RECT5ValidEv(%struct.FX_RECT* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %3, i32 %7) #9
  %9 = extractvalue { i32, i1 } %8, 1
  %10 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %5, i32 %11) #9
  %13 = extractvalue { i32, i1 } %12, 1
  %14 = or i1 %9, %13
  %15 = xor i1 %14, true
  ret i1 %15
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN7FX_RECT9NormalizeEv(%struct.FX_RECT* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp sgt i32 %3, %5
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  store i32 %5, i32* %2, align 4
  store i32 %3, i32* %4, align 4
  br label %8

8:                                                ; preds = %7, %1
  %9 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %0, i64 0, i32 3
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %10, %12
  br i1 %13, label %14, label %15

14:                                               ; preds = %8
  store i32 %12, i32* %9, align 4
  store i32 %10, i32* %11, align 4
  br label %15

15:                                               ; preds = %14, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7FX_RECT9IntersectERKS_(%struct.FX_RECT* nocapture, %struct.FX_RECT* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %1, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %1, i64 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %1, i64 0, i32 3
  %10 = load i32, i32* %9, align 4
  %11 = icmp sgt i32 %4, %8
  %12 = select i1 %11, i32 %8, i32 %4
  %13 = select i1 %11, i32 %4, i32 %8
  %14 = icmp sgt i32 %6, %10
  %15 = select i1 %14, i32 %10, i32 %6
  %16 = select i1 %14, i32 %6, i32 %10
  %17 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %0, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %0, i64 0, i32 2
  %20 = load i32, i32* %19, align 4
  %21 = icmp sgt i32 %18, %20
  br i1 %21, label %22, label %23

22:                                               ; preds = %2
  store i32 %20, i32* %17, align 4
  store i32 %18, i32* %19, align 4
  br label %23

23:                                               ; preds = %22, %2
  %24 = phi i32 [ %18, %22 ], [ %20, %2 ]
  %25 = phi i32 [ %20, %22 ], [ %18, %2 ]
  %26 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %0, i64 0, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %0, i64 0, i32 3
  %29 = load i32, i32* %28, align 4
  %30 = icmp sgt i32 %27, %29
  br i1 %30, label %31, label %32

31:                                               ; preds = %23
  store i32 %29, i32* %26, align 4
  store i32 %27, i32* %28, align 4
  br label %32

32:                                               ; preds = %23, %31
  %33 = phi i32 [ %29, %23 ], [ %27, %31 ]
  %34 = phi i32 [ %27, %23 ], [ %29, %31 ]
  %35 = icmp slt i32 %25, %12
  %36 = select i1 %35, i32 %12, i32 %25
  store i32 %36, i32* %17, align 4
  %37 = icmp slt i32 %34, %15
  %38 = select i1 %37, i32 %15, i32 %34
  store i32 %38, i32* %26, align 4
  %39 = icmp slt i32 %13, %24
  %40 = select i1 %39, i32 %13, i32 %24
  store i32 %40, i32* %19, align 4
  %41 = icmp slt i32 %16, %33
  %42 = select i1 %41, i32 %16, i32 %33
  store i32 %42, i32* %28, align 4
  %43 = icmp sgt i32 %36, %40
  %44 = icmp sgt i32 %38, %42
  %45 = or i1 %43, %44
  br i1 %45, label %46, label %48

46:                                               ; preds = %32
  %47 = bitcast %struct.FX_RECT* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %47, i8 0, i64 16, i1 false)
  br label %48

48:                                               ; preds = %32, %46
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN13CFX_FloatRectC2ERK7FX_RECT(%class.CFX_FloatRect* nocapture, %struct.FX_RECT* nocapture readonly dereferenceable(16)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 0
  %4 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = sitofp i32 %5 to float
  store float %6, float* %3, align 4
  %7 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 1
  %8 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = sitofp i32 %9 to float
  store float %10, float* %7, align 4
  %11 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 2
  %12 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %1, i64 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = sitofp i32 %13 to float
  store float %14, float* %11, align 4
  %15 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 3
  %16 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %1, i64 0, i32 3
  %17 = load i32, i32* %16, align 4
  %18 = sitofp i32 %17 to float
  store float %18, float* %15, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN13CFX_FloatRectC2ERK13CFX_PTemplateIfE(%class.CFX_FloatRect* nocapture, %class.CFX_PTemplate* nocapture readonly dereferenceable(8)) unnamed_addr #1 align 2 {
  %3 = bitcast %class.CFX_PTemplate* %1 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = bitcast %class.CFX_FloatRect* %0 to i32*
  store i32 %4, i32* %5, align 4
  %6 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 1
  %7 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %1, i64 0, i32 1
  %8 = bitcast float* %7 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = bitcast float* %6 to i32*
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 2
  %12 = load i32, i32* %3, align 4
  %13 = bitcast float* %11 to i32*
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 3
  %15 = load i32, i32* %8, align 4
  %16 = bitcast float* %14 to i32*
  store i32 %15, i32* %16, align 4
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN13CFX_FloatRect7GetBBoxEPK13CFX_PTemplateIfEi(%class.CFX_PTemplate* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %85, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %0, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %0, i64 0, i32 1
  %8 = load float, float* %7, align 4
  %9 = icmp sgt i32 %1, 1
  br i1 %9, label %10, label %41

10:                                               ; preds = %4
  %11 = zext i32 %1 to i64
  %12 = add nsw i64 %11, -1
  %13 = and i64 %12, 1
  %14 = icmp eq i32 %1, 2
  br i1 %14, label %17, label %15

15:                                               ; preds = %10
  %16 = sub nsw i64 %12, %13
  br label %50

17:                                               ; preds = %50, %10
  %18 = phi float [ undef, %10 ], [ %73, %50 ]
  %19 = phi float [ undef, %10 ], [ %75, %50 ]
  %20 = phi float [ undef, %10 ], [ %79, %50 ]
  %21 = phi float [ undef, %10 ], [ %81, %50 ]
  %22 = phi float [ %8, %10 ], [ %81, %50 ]
  %23 = phi float [ %6, %10 ], [ %75, %50 ]
  %24 = phi i64 [ 1, %10 ], [ %82, %50 ]
  %25 = phi float [ %8, %10 ], [ %79, %50 ]
  %26 = phi float [ %6, %10 ], [ %73, %50 ]
  %27 = icmp eq i64 %13, 0
  br i1 %27, label %41, label %28

28:                                               ; preds = %17
  %29 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %0, i64 %24, i32 0
  %30 = load float, float* %29, align 4
  %31 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %0, i64 %24, i32 1
  %32 = load float, float* %31, align 4
  %33 = fcmp olt float %22, %32
  %34 = select i1 %33, float %32, float %22
  %35 = fcmp olt float %32, %25
  %36 = select i1 %35, float %32, float %25
  %37 = fcmp olt float %23, %30
  %38 = select i1 %37, float %30, float %23
  %39 = fcmp olt float %30, %26
  %40 = select i1 %39, float %30, float %26
  br label %41

41:                                               ; preds = %28, %17, %4
  %42 = phi float [ %8, %4 ], [ %21, %17 ], [ %34, %28 ]
  %43 = phi float [ %6, %4 ], [ %19, %17 ], [ %38, %28 ]
  %44 = phi float [ %8, %4 ], [ %20, %17 ], [ %36, %28 ]
  %45 = phi float [ %6, %4 ], [ %18, %17 ], [ %40, %28 ]
  %46 = insertelement <2 x float> undef, float %45, i32 0
  %47 = insertelement <2 x float> %46, float %44, i32 1
  %48 = insertelement <2 x float> undef, float %43, i32 0
  %49 = insertelement <2 x float> %48, float %42, i32 1
  br label %85

50:                                               ; preds = %50, %15
  %51 = phi float [ %8, %15 ], [ %81, %50 ]
  %52 = phi float [ %6, %15 ], [ %75, %50 ]
  %53 = phi i64 [ 1, %15 ], [ %82, %50 ]
  %54 = phi float [ %8, %15 ], [ %79, %50 ]
  %55 = phi float [ %6, %15 ], [ %73, %50 ]
  %56 = phi i64 [ %16, %15 ], [ %83, %50 ]
  %57 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %0, i64 %53, i32 0
  %58 = load float, float* %57, align 4
  %59 = fcmp olt float %58, %55
  %60 = select i1 %59, float %58, float %55
  %61 = fcmp olt float %52, %58
  %62 = select i1 %61, float %58, float %52
  %63 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %0, i64 %53, i32 1
  %64 = load float, float* %63, align 4
  %65 = fcmp olt float %64, %54
  %66 = select i1 %65, float %64, float %54
  %67 = fcmp olt float %51, %64
  %68 = select i1 %67, float %64, float %51
  %69 = add nuw nsw i64 %53, 1
  %70 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %0, i64 %69, i32 0
  %71 = load float, float* %70, align 4
  %72 = fcmp olt float %71, %60
  %73 = select i1 %72, float %71, float %60
  %74 = fcmp olt float %62, %71
  %75 = select i1 %74, float %71, float %62
  %76 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %0, i64 %69, i32 1
  %77 = load float, float* %76, align 4
  %78 = fcmp olt float %77, %66
  %79 = select i1 %78, float %77, float %66
  %80 = fcmp olt float %68, %77
  %81 = select i1 %80, float %77, float %68
  %82 = add nuw nsw i64 %53, 2
  %83 = add i64 %56, -2
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %17, label %50

85:                                               ; preds = %2, %41
  %86 = phi <2 x float> [ %49, %41 ], [ zeroinitializer, %2 ]
  %87 = phi <2 x float> [ %47, %41 ], [ zeroinitializer, %2 ]
  %88 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %87, 0
  %89 = insertvalue { <2 x float>, <2 x float> } %88, <2 x float> %86, 1
  ret { <2 x float>, <2 x float> } %89
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN13CFX_FloatRect9NormalizeEv(%class.CFX_FloatRect* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 2
  %5 = load float, float* %4, align 4
  %6 = fcmp ogt float %3, %5
  br i1 %6, label %7, label %9

7:                                                ; preds = %1
  %8 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 0
  store float %5, float* %8, align 4
  store float %3, float* %4, align 4
  br label %9

9:                                                ; preds = %7, %1
  %10 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 1
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 3
  %13 = load float, float* %12, align 4
  %14 = fcmp ogt float %11, %13
  br i1 %14, label %15, label %16

15:                                               ; preds = %9
  store float %11, float* %12, align 4
  store float %13, float* %10, align 4
  br label %16

16:                                               ; preds = %15, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFX_FloatRect9IntersectERKS_(%class.CFX_FloatRect* nocapture, %class.CFX_FloatRect* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 2
  %6 = load float, float* %5, align 4
  %7 = fcmp ogt float %4, %6
  br i1 %7, label %8, label %9

8:                                                ; preds = %2
  store float %6, float* %3, align 4
  store float %4, float* %5, align 4
  br label %9

9:                                                ; preds = %8, %2
  %10 = phi float [ %4, %8 ], [ %6, %2 ]
  %11 = phi float [ %6, %8 ], [ %4, %2 ]
  %12 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 1
  %13 = load float, float* %12, align 4
  %14 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 3
  %15 = load float, float* %14, align 4
  %16 = fcmp ogt float %13, %15
  br i1 %16, label %17, label %18

17:                                               ; preds = %9
  store float %13, float* %14, align 4
  store float %15, float* %12, align 4
  br label %18

18:                                               ; preds = %9, %17
  %19 = phi float [ %15, %9 ], [ %13, %17 ]
  %20 = phi float [ %13, %9 ], [ %15, %17 ]
  %21 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 0
  %22 = load float, float* %21, align 4
  %23 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 1
  %24 = load float, float* %23, align 4
  %25 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 2
  %26 = load float, float* %25, align 4
  %27 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 3
  %28 = load float, float* %27, align 4
  %29 = fcmp ogt float %22, %26
  %30 = select i1 %29, float %22, float %26
  %31 = select i1 %29, float %26, float %22
  %32 = fcmp ogt float %24, %28
  %33 = select i1 %32, float %28, float %24
  %34 = select i1 %32, float %24, float %28
  %35 = fcmp olt float %11, %31
  %36 = select i1 %35, float %31, float %11
  store float %36, float* %3, align 4
  %37 = fcmp olt float %20, %33
  %38 = select i1 %37, float %33, float %20
  store float %38, float* %12, align 4
  %39 = fcmp olt float %30, %10
  %40 = select i1 %39, float %30, float %10
  store float %40, float* %5, align 4
  %41 = fcmp olt float %34, %19
  %42 = select i1 %41, float %34, float %19
  store float %42, float* %14, align 4
  %43 = fcmp ogt float %36, %40
  %44 = fcmp ogt float %38, %42
  %45 = or i1 %43, %44
  br i1 %45, label %46, label %48

46:                                               ; preds = %18
  %47 = bitcast %class.CFX_FloatRect* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %47, i8 0, i64 16, i1 false)
  br label %48

48:                                               ; preds = %18, %46
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFX_FloatRect5UnionERKS_(%class.CFX_FloatRect* nocapture, %class.CFX_FloatRect* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 2
  %6 = load float, float* %5, align 4
  %7 = fcmp ogt float %4, %6
  br i1 %7, label %8, label %9

8:                                                ; preds = %2
  store float %6, float* %3, align 4
  store float %4, float* %5, align 4
  br label %9

9:                                                ; preds = %8, %2
  %10 = phi float [ %4, %8 ], [ %6, %2 ]
  %11 = phi float [ %6, %8 ], [ %4, %2 ]
  %12 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 1
  %13 = load float, float* %12, align 4
  %14 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 3
  %15 = load float, float* %14, align 4
  %16 = fcmp ogt float %13, %15
  br i1 %16, label %17, label %18

17:                                               ; preds = %9
  store float %13, float* %14, align 4
  store float %15, float* %12, align 4
  br label %18

18:                                               ; preds = %9, %17
  %19 = phi float [ %15, %9 ], [ %13, %17 ]
  %20 = phi float [ %13, %9 ], [ %15, %17 ]
  %21 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 0
  %22 = load float, float* %21, align 4
  %23 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 1
  %24 = load float, float* %23, align 4
  %25 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 2
  %26 = load float, float* %25, align 4
  %27 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 3
  %28 = load float, float* %27, align 4
  %29 = fcmp ogt float %22, %26
  %30 = select i1 %29, float %22, float %26
  %31 = select i1 %29, float %26, float %22
  %32 = fcmp ogt float %24, %28
  %33 = select i1 %32, float %24, float %28
  %34 = select i1 %32, float %28, float %24
  %35 = fcmp olt float %31, %11
  %36 = select i1 %35, float %31, float %11
  store float %36, float* %3, align 4
  %37 = fcmp olt float %34, %20
  %38 = select i1 %37, float %34, float %20
  store float %38, float* %12, align 4
  %39 = fcmp olt float %10, %30
  %40 = select i1 %39, float %30, float %10
  store float %40, float* %5, align 4
  %41 = fcmp olt float %19, %33
  %42 = select i1 %41, float %33, float %19
  store float %42, float* %14, align 4
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZNK13CFX_FloatRect12GetOuterRectEv(%class.CFX_FloatRect* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = tail call float @llvm.floor.f32(float %3) #9
  %5 = fcmp ult float %4, 0xC1E0000000000000
  %6 = fcmp ugt float %4, 0x41DFFFFFE0000000
  %7 = fcmp ogt float %4, 0xC1E0000000000000
  %8 = select i1 %7, float %4, float 0xC1E0000000000000
  %9 = fptosi float %8 to i32
  %10 = select i1 %5, i32 0, i32 2147483647
  %11 = select i1 %6, i32 %10, i32 %9
  %12 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 3
  %13 = load float, float* %12, align 4
  %14 = tail call float @llvm.ceil.f32(float %13) #9
  %15 = fcmp ult float %14, 0xC1E0000000000000
  %16 = fcmp ugt float %14, 0x41DFFFFFE0000000
  %17 = fcmp ogt float %14, 0xC1E0000000000000
  %18 = select i1 %17, float %14, float 0xC1E0000000000000
  %19 = fptosi float %18 to i32
  %20 = select i1 %15, i32 0, i32 2147483647
  %21 = select i1 %16, i32 %20, i32 %19
  %22 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 2
  %23 = load float, float* %22, align 4
  %24 = tail call float @llvm.ceil.f32(float %23) #9
  %25 = fcmp ult float %24, 0xC1E0000000000000
  %26 = fcmp ugt float %24, 0x41DFFFFFE0000000
  %27 = fcmp ogt float %24, 0xC1E0000000000000
  %28 = select i1 %27, float %24, float 0xC1E0000000000000
  %29 = fptosi float %28 to i32
  %30 = select i1 %25, i32 0, i32 2147483647
  %31 = select i1 %26, i32 %30, i32 %29
  %32 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 1
  %33 = load float, float* %32, align 4
  %34 = tail call float @llvm.floor.f32(float %33) #9
  %35 = fcmp ult float %34, 0xC1E0000000000000
  %36 = fcmp ugt float %34, 0x41DFFFFFE0000000
  %37 = fcmp ogt float %34, 0xC1E0000000000000
  %38 = select i1 %37, float %34, float 0xC1E0000000000000
  %39 = fptosi float %38 to i32
  %40 = select i1 %35, i32 0, i32 2147483647
  %41 = select i1 %36, i32 %40, i32 %39
  %42 = icmp sgt i32 %11, %31
  %43 = select i1 %42, i32 %31, i32 %11
  %44 = select i1 %42, i32 %11, i32 %31
  %45 = zext i32 %44 to i64
  %46 = icmp sgt i32 %41, %21
  %47 = select i1 %46, i32 %21, i32 %41
  %48 = select i1 %46, i32 %41, i32 %21
  %49 = zext i32 %48 to i64
  %50 = shl nuw i64 %49, 32
  %51 = or i64 %50, %45
  %52 = zext i32 %47 to i64
  %53 = shl nuw i64 %52, 32
  %54 = zext i32 %43 to i64
  %55 = or i64 %53, %54
  %56 = insertvalue { i64, i64 } undef, i64 %55, 0
  %57 = insertvalue { i64, i64 } %56, i64 %51, 1
  ret { i64, i64 } %57
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZNK13CFX_FloatRect12GetInnerRectEv(%class.CFX_FloatRect* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = tail call float @llvm.ceil.f32(float %3) #9
  %5 = fcmp ult float %4, 0xC1E0000000000000
  %6 = fcmp ugt float %4, 0x41DFFFFFE0000000
  %7 = fcmp ogt float %4, 0xC1E0000000000000
  %8 = select i1 %7, float %4, float 0xC1E0000000000000
  %9 = fptosi float %8 to i32
  %10 = select i1 %5, i32 0, i32 2147483647
  %11 = select i1 %6, i32 %10, i32 %9
  %12 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 3
  %13 = load float, float* %12, align 4
  %14 = tail call float @llvm.floor.f32(float %13) #9
  %15 = fcmp ult float %14, 0xC1E0000000000000
  %16 = fcmp ugt float %14, 0x41DFFFFFE0000000
  %17 = fcmp ogt float %14, 0xC1E0000000000000
  %18 = select i1 %17, float %14, float 0xC1E0000000000000
  %19 = fptosi float %18 to i32
  %20 = select i1 %15, i32 0, i32 2147483647
  %21 = select i1 %16, i32 %20, i32 %19
  %22 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 2
  %23 = load float, float* %22, align 4
  %24 = tail call float @llvm.floor.f32(float %23) #9
  %25 = fcmp ult float %24, 0xC1E0000000000000
  %26 = fcmp ugt float %24, 0x41DFFFFFE0000000
  %27 = fcmp ogt float %24, 0xC1E0000000000000
  %28 = select i1 %27, float %24, float 0xC1E0000000000000
  %29 = fptosi float %28 to i32
  %30 = select i1 %25, i32 0, i32 2147483647
  %31 = select i1 %26, i32 %30, i32 %29
  %32 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 1
  %33 = load float, float* %32, align 4
  %34 = tail call float @llvm.ceil.f32(float %33) #9
  %35 = fcmp ult float %34, 0xC1E0000000000000
  %36 = fcmp ugt float %34, 0x41DFFFFFE0000000
  %37 = fcmp ogt float %34, 0xC1E0000000000000
  %38 = select i1 %37, float %34, float 0xC1E0000000000000
  %39 = fptosi float %38 to i32
  %40 = select i1 %35, i32 0, i32 2147483647
  %41 = select i1 %36, i32 %40, i32 %39
  %42 = icmp sgt i32 %11, %31
  %43 = select i1 %42, i32 %31, i32 %11
  %44 = select i1 %42, i32 %11, i32 %31
  %45 = zext i32 %44 to i64
  %46 = icmp sgt i32 %41, %21
  %47 = select i1 %46, i32 %21, i32 %41
  %48 = select i1 %46, i32 %41, i32 %21
  %49 = zext i32 %48 to i64
  %50 = shl nuw i64 %49, 32
  %51 = or i64 %50, %45
  %52 = zext i32 %47 to i64
  %53 = shl nuw i64 %52, 32
  %54 = zext i32 %43 to i64
  %55 = or i64 %53, %54
  %56 = insertvalue { i64, i64 } undef, i64 %55, 0
  %57 = insertvalue { i64, i64 } %56, i64 %51, 1
  ret { i64, i64 } %57
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZNK13CFX_FloatRect14GetClosestRectEv(%class.CFX_FloatRect* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 2
  %5 = load float, float* %4, align 4
  %6 = fsub float %5, %3
  %7 = tail call float @llvm.ceil.f32(float %6) #9
  %8 = tail call float @llvm.floor.f32(float %3) #9
  %9 = tail call float @llvm.ceil.f32(float %3) #9
  %10 = insertelement <2 x float> undef, float %3, i32 0
  %11 = insertelement <2 x float> %10, float %9, i32 1
  %12 = insertelement <2 x float> undef, float %8, i32 0
  %13 = insertelement <2 x float> %12, float %3, i32 1
  %14 = fsub <2 x float> %11, %13
  %15 = insertelement <2 x float> undef, float %5, i32 0
  %16 = shufflevector <2 x float> %15, <2 x float> undef, <2 x i32> zeroinitializer
  %17 = insertelement <2 x float> %12, float %9, i32 1
  %18 = fsub <2 x float> %16, %17
  %19 = insertelement <2 x float> undef, float %7, i32 0
  %20 = shufflevector <2 x float> %19, <2 x float> undef, <2 x i32> zeroinitializer
  %21 = fsub <2 x float> %18, %20
  %22 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %21)
  %23 = fadd <2 x float> %14, %22
  %24 = extractelement <2 x float> %23, i32 0
  %25 = extractelement <2 x float> %23, i32 1
  %26 = fcmp ogt float %24, %25
  %27 = select i1 %26, float %9, float %8
  %28 = fcmp oge float %27, 0xC1E0000000000000
  %29 = fcmp ole float %27, 0x41DFFFFFE0000000
  %30 = fadd float %7, %27
  %31 = fcmp oge float %30, 0xC1E0000000000000
  %32 = fcmp ole float %30, 0x41DFFFFFE0000000
  %33 = and i1 %29, %28
  %34 = and i1 %32, %31
  %35 = and i1 %33, %34
  %36 = fptosi float %30 to i32
  %37 = fptosi float %27 to i32
  %38 = select i1 %35, i32 %37, i32 0
  %39 = zext i32 %36 to i64
  %40 = select i1 %35, i64 %39, i64 0
  %41 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 1
  %42 = load float, float* %41, align 4
  %43 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 3
  %44 = load float, float* %43, align 4
  %45 = fsub float %44, %42
  %46 = tail call float @llvm.ceil.f32(float %45) #9
  %47 = tail call float @llvm.floor.f32(float %42) #9
  %48 = tail call float @llvm.ceil.f32(float %42) #9
  %49 = insertelement <2 x float> undef, float %42, i32 0
  %50 = insertelement <2 x float> %49, float %48, i32 1
  %51 = insertelement <2 x float> undef, float %47, i32 0
  %52 = insertelement <2 x float> %51, float %42, i32 1
  %53 = fsub <2 x float> %50, %52
  %54 = insertelement <2 x float> undef, float %44, i32 0
  %55 = shufflevector <2 x float> %54, <2 x float> undef, <2 x i32> zeroinitializer
  %56 = insertelement <2 x float> %51, float %48, i32 1
  %57 = fsub <2 x float> %55, %56
  %58 = insertelement <2 x float> undef, float %46, i32 0
  %59 = shufflevector <2 x float> %58, <2 x float> undef, <2 x i32> zeroinitializer
  %60 = fsub <2 x float> %57, %59
  %61 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %60)
  %62 = fadd <2 x float> %53, %61
  %63 = extractelement <2 x float> %62, i32 0
  %64 = extractelement <2 x float> %62, i32 1
  %65 = fcmp ogt float %63, %64
  %66 = select i1 %65, float %48, float %47
  %67 = fcmp oge float %66, 0xC1E0000000000000
  %68 = fcmp ole float %66, 0x41DFFFFFE0000000
  %69 = fadd float %46, %66
  %70 = fcmp oge float %69, 0xC1E0000000000000
  %71 = fcmp ole float %69, 0x41DFFFFFE0000000
  %72 = and i1 %68, %67
  %73 = and i1 %71, %70
  %74 = and i1 %72, %73
  %75 = fptosi float %69 to i32
  %76 = fptosi float %66 to i32
  %77 = select i1 %74, i32 %76, i32 0
  %78 = zext i32 %75 to i64
  %79 = shl nuw i64 %78, 32
  %80 = select i1 %74, i64 %79, i64 0
  %81 = trunc i64 %40 to i32
  %82 = icmp sgt i32 %38, %81
  %83 = zext i32 %38 to i64
  %84 = select i1 %82, i32 %81, i32 %38
  %85 = select i1 %82, i64 %83, i64 %40
  %86 = lshr exact i64 %80, 32
  %87 = trunc i64 %86 to i32
  %88 = icmp sgt i32 %77, %87
  %89 = zext i32 %77 to i64
  %90 = shl nuw i64 %89, 32
  %91 = select i1 %88, i32 %87, i32 %77
  %92 = select i1 %88, i64 %90, i64 %80
  %93 = or i64 %85, %92
  %94 = zext i32 %91 to i64
  %95 = shl nuw i64 %94, 32
  %96 = zext i32 %84 to i64
  %97 = or i64 %95, %96
  %98 = insertvalue { i64, i64 } undef, i64 %97, 0
  %99 = insertvalue { i64, i64 } %98, i64 %93, 1
  ret { i64, i64 } %99
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZNK13CFX_FloatRect15GetCenterSquareEv(%class.CFX_FloatRect* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 2
  %3 = bitcast float* %2 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 4
  %5 = bitcast %class.CFX_FloatRect* %0 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 4
  %7 = fsub <2 x float> %4, %6
  %8 = extractelement <2 x float> %7, i32 0
  %9 = extractelement <2 x float> %7, i32 1
  %10 = fcmp ogt float %8, %9
  %11 = select i1 %10, float %9, float %8
  %12 = fmul float %11, 5.000000e-01
  %13 = fadd <2 x float> %4, %6
  %14 = fmul <2 x float> %13, <float 5.000000e-01, float 5.000000e-01>
  %15 = insertelement <2 x float> undef, float %12, i32 0
  %16 = shufflevector <2 x float> %15, <2 x float> undef, <2 x i32> zeroinitializer
  %17 = fsub <2 x float> %14, %16
  %18 = fadd <2 x float> %14, %16
  %19 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %17, 0
  %20 = insertvalue { <2 x float>, <2 x float> } %19, <2 x float> %18, 1
  ret { <2 x float>, <2 x float> } %20
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK13CFX_FloatRect8ContainsERK13CFX_PTemplateIfE(%class.CFX_FloatRect* nocapture readonly, %class.CFX_PTemplate* nocapture readonly dereferenceable(8)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 1
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 2
  %8 = load float, float* %7, align 4
  %9 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 3
  %10 = load float, float* %9, align 4
  %11 = fcmp ogt float %4, %8
  %12 = select i1 %11, float %4, float %8
  %13 = select i1 %11, float %8, float %4
  %14 = fcmp ogt float %6, %10
  %15 = select i1 %14, float %10, float %6
  %16 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %1, i64 0, i32 0
  %17 = load float, float* %16, align 4
  %18 = fcmp ugt float %17, %12
  %19 = fcmp ult float %17, %13
  %20 = or i1 %18, %19
  br i1 %20, label %28, label %21

21:                                               ; preds = %2
  %22 = select i1 %14, float %6, float %10
  %23 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %1, i64 0, i32 1
  %24 = load float, float* %23, align 4
  %25 = fcmp ugt float %24, %22
  br i1 %25, label %28, label %26

26:                                               ; preds = %21
  %27 = fcmp oge float %24, %15
  br label %28

28:                                               ; preds = %21, %2, %26
  %29 = phi i1 [ false, %21 ], [ false, %2 ], [ %27, %26 ]
  ret i1 %29
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK13CFX_FloatRect8ContainsERKS_(%class.CFX_FloatRect* nocapture readonly, %class.CFX_FloatRect* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 1
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 2
  %8 = load float, float* %7, align 4
  %9 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 3
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 0
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 1
  %14 = load float, float* %13, align 4
  %15 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 2
  %16 = load float, float* %15, align 4
  %17 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 3
  %18 = load float, float* %17, align 4
  %19 = fcmp ogt float %4, %8
  %20 = select i1 %19, float %4, float %8
  %21 = select i1 %19, float %8, float %4
  %22 = fcmp ogt float %6, %10
  %23 = select i1 %22, float %10, float %6
  %24 = fcmp ogt float %12, %16
  %25 = select i1 %24, float %12, float %16
  %26 = select i1 %24, float %16, float %12
  %27 = fcmp ogt float %14, %18
  %28 = select i1 %27, float %18, float %14
  %29 = fcmp ult float %26, %21
  %30 = fcmp ugt float %25, %20
  %31 = or i1 %29, %30
  %32 = fcmp ult float %28, %23
  %33 = or i1 %31, %32
  br i1 %33, label %38, label %34

34:                                               ; preds = %2
  %35 = select i1 %27, float %14, float %18
  %36 = select i1 %22, float %6, float %10
  %37 = fcmp ole float %35, %36
  br label %38

38:                                               ; preds = %2, %34
  %39 = phi i1 [ false, %2 ], [ %37, %34 ]
  ret i1 %39
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN13CFX_FloatRect10UpdateRectERK13CFX_PTemplateIfE(%class.CFX_FloatRect* nocapture, %class.CFX_PTemplate* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 0
  %4 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %1, i64 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = load float, float* %3, align 4
  %7 = fcmp olt float %5, %6
  %8 = select i1 %7, float %5, float %6
  store float %8, float* %3, align 4
  %9 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 1
  %10 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %1, i64 0, i32 1
  %11 = load float, float* %10, align 4
  %12 = load float, float* %9, align 4
  %13 = fcmp olt float %11, %12
  %14 = select i1 %13, float %11, float %12
  store float %14, float* %9, align 4
  %15 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 2
  %16 = load float, float* %15, align 4
  %17 = load float, float* %4, align 4
  %18 = fcmp olt float %16, %17
  %19 = select i1 %18, float %17, float %16
  store float %19, float* %15, align 4
  %20 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 3
  %21 = load float, float* %20, align 4
  %22 = load float, float* %10, align 4
  %23 = fcmp olt float %21, %22
  %24 = select i1 %23, float %22, float %21
  store float %24, float* %20, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN13CFX_FloatRect7InflateEff(%class.CFX_FloatRect* nocapture, float, float) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 2
  %7 = load float, float* %6, align 4
  %8 = fcmp ogt float %5, %7
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  store float %7, float* %4, align 4
  store float %5, float* %6, align 4
  br label %10

10:                                               ; preds = %9, %3
  %11 = phi float [ %5, %9 ], [ %7, %3 ]
  %12 = phi float [ %7, %9 ], [ %5, %3 ]
  %13 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 1
  %14 = load float, float* %13, align 4
  %15 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 3
  %16 = load float, float* %15, align 4
  %17 = fcmp ogt float %14, %16
  br i1 %17, label %18, label %19

18:                                               ; preds = %10
  store float %14, float* %15, align 4
  store float %16, float* %13, align 4
  br label %19

19:                                               ; preds = %10, %18
  %20 = phi float [ %16, %10 ], [ %14, %18 ]
  %21 = phi float [ %14, %10 ], [ %16, %18 ]
  %22 = fsub float %12, %1
  store float %22, float* %4, align 4
  %23 = fsub float %21, %2
  store float %23, float* %13, align 4
  %24 = fadd float %11, %1
  store float %24, float* %6, align 4
  %25 = fadd float %20, %2
  store float %25, float* %15, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN13CFX_FloatRect7InflateEffff(%class.CFX_FloatRect* nocapture, float, float, float, float) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 2
  %9 = load float, float* %8, align 4
  %10 = fcmp ogt float %7, %9
  br i1 %10, label %11, label %12

11:                                               ; preds = %5
  store float %9, float* %6, align 4
  store float %7, float* %8, align 4
  br label %12

12:                                               ; preds = %11, %5
  %13 = phi float [ %7, %11 ], [ %9, %5 ]
  %14 = phi float [ %9, %11 ], [ %7, %5 ]
  %15 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 1
  %16 = load float, float* %15, align 4
  %17 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 3
  %18 = load float, float* %17, align 4
  %19 = fcmp ogt float %16, %18
  br i1 %19, label %20, label %21

20:                                               ; preds = %12
  store float %16, float* %17, align 4
  store float %18, float* %15, align 4
  br label %21

21:                                               ; preds = %12, %20
  %22 = phi float [ %18, %12 ], [ %16, %20 ]
  %23 = phi float [ %16, %12 ], [ %18, %20 ]
  %24 = fsub float %14, %1
  store float %24, float* %6, align 4
  %25 = fsub float %23, %2
  store float %25, float* %15, align 4
  %26 = fadd float %13, %3
  store float %26, float* %8, align 4
  %27 = fadd float %22, %4
  store float %27, float* %17, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN13CFX_FloatRect7InflateERKS_(%class.CFX_FloatRect* nocapture, %class.CFX_FloatRect* nocapture readonly dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %3 = bitcast %class.CFX_FloatRect* %1 to <4 x float>*
  %4 = load <4 x float>, <4 x float>* %3, align 4
  %5 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 2
  %8 = load float, float* %7, align 4
  %9 = fcmp ogt float %6, %8
  br i1 %9, label %10, label %11

10:                                               ; preds = %2
  store float %8, float* %5, align 4
  store float %6, float* %7, align 4
  br label %11

11:                                               ; preds = %10, %2
  %12 = phi float [ %6, %10 ], [ %8, %2 ]
  %13 = phi float [ %8, %10 ], [ %6, %2 ]
  %14 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 1
  %15 = load float, float* %14, align 4
  %16 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 3
  %17 = load float, float* %16, align 4
  %18 = fcmp ogt float %15, %17
  br i1 %18, label %19, label %20

19:                                               ; preds = %11
  store float %15, float* %16, align 4
  store float %17, float* %14, align 4
  br label %20

20:                                               ; preds = %11, %19
  %21 = phi float [ %17, %11 ], [ %15, %19 ]
  %22 = phi float [ %15, %11 ], [ %17, %19 ]
  %23 = insertelement <4 x float> undef, float %13, i32 0
  %24 = insertelement <4 x float> %23, float %22, i32 1
  %25 = insertelement <4 x float> %24, float %12, i32 2
  %26 = insertelement <4 x float> %25, float %21, i32 3
  %27 = fsub <4 x float> %26, %4
  %28 = fadd <4 x float> %26, %4
  %29 = shufflevector <4 x float> %27, <4 x float> %28, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %30 = bitcast %class.CFX_FloatRect* %0 to <4 x float>*
  store <4 x float> %29, <4 x float>* %30, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN13CFX_FloatRect7DeflateEff(%class.CFX_FloatRect* nocapture, float, float) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 2
  %7 = load float, float* %6, align 4
  %8 = fcmp ogt float %5, %7
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  store float %7, float* %4, align 4
  store float %5, float* %6, align 4
  br label %10

10:                                               ; preds = %9, %3
  %11 = phi float [ %5, %9 ], [ %7, %3 ]
  %12 = phi float [ %7, %9 ], [ %5, %3 ]
  %13 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 1
  %14 = load float, float* %13, align 4
  %15 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 3
  %16 = load float, float* %15, align 4
  %17 = fcmp ogt float %14, %16
  br i1 %17, label %18, label %19

18:                                               ; preds = %10
  store float %14, float* %15, align 4
  store float %16, float* %13, align 4
  br label %19

19:                                               ; preds = %10, %18
  %20 = phi float [ %16, %10 ], [ %14, %18 ]
  %21 = phi float [ %14, %10 ], [ %16, %18 ]
  %22 = fadd float %12, %1
  store float %22, float* %4, align 4
  %23 = fadd float %21, %2
  store float %23, float* %13, align 4
  %24 = fsub float %11, %1
  store float %24, float* %6, align 4
  %25 = fsub float %20, %2
  store float %25, float* %15, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN13CFX_FloatRect7DeflateEffff(%class.CFX_FloatRect* nocapture, float, float, float, float) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 2
  %9 = load float, float* %8, align 4
  %10 = fcmp ogt float %7, %9
  br i1 %10, label %11, label %12

11:                                               ; preds = %5
  store float %9, float* %6, align 4
  store float %7, float* %8, align 4
  br label %12

12:                                               ; preds = %11, %5
  %13 = phi float [ %7, %11 ], [ %9, %5 ]
  %14 = phi float [ %9, %11 ], [ %7, %5 ]
  %15 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 1
  %16 = load float, float* %15, align 4
  %17 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 3
  %18 = load float, float* %17, align 4
  %19 = fcmp ogt float %16, %18
  br i1 %19, label %20, label %21

20:                                               ; preds = %12
  store float %16, float* %17, align 4
  store float %18, float* %15, align 4
  br label %21

21:                                               ; preds = %12, %20
  %22 = phi float [ %18, %12 ], [ %16, %20 ]
  %23 = phi float [ %16, %12 ], [ %18, %20 ]
  %24 = fadd float %14, %1
  store float %24, float* %6, align 4
  %25 = fadd float %23, %2
  store float %25, float* %15, align 4
  %26 = fsub float %13, %3
  store float %26, float* %8, align 4
  %27 = fsub float %22, %4
  store float %27, float* %17, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN13CFX_FloatRect7DeflateERKS_(%class.CFX_FloatRect* nocapture, %class.CFX_FloatRect* nocapture readonly dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %3 = bitcast %class.CFX_FloatRect* %1 to <4 x float>*
  %4 = load <4 x float>, <4 x float>* %3, align 4
  %5 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 2
  %8 = load float, float* %7, align 4
  %9 = fcmp ogt float %6, %8
  br i1 %9, label %10, label %11

10:                                               ; preds = %2
  store float %8, float* %5, align 4
  store float %6, float* %7, align 4
  br label %11

11:                                               ; preds = %10, %2
  %12 = phi float [ %6, %10 ], [ %8, %2 ]
  %13 = phi float [ %8, %10 ], [ %6, %2 ]
  %14 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 1
  %15 = load float, float* %14, align 4
  %16 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 3
  %17 = load float, float* %16, align 4
  %18 = fcmp ogt float %15, %17
  br i1 %18, label %19, label %20

19:                                               ; preds = %11
  store float %15, float* %16, align 4
  store float %17, float* %14, align 4
  br label %20

20:                                               ; preds = %11, %19
  %21 = phi float [ %17, %11 ], [ %15, %19 ]
  %22 = phi float [ %15, %11 ], [ %17, %19 ]
  %23 = insertelement <4 x float> undef, float %13, i32 0
  %24 = insertelement <4 x float> %23, float %22, i32 1
  %25 = insertelement <4 x float> %24, float %12, i32 2
  %26 = insertelement <4 x float> %25, float %21, i32 3
  %27 = fadd <4 x float> %26, %4
  %28 = fsub <4 x float> %26, %4
  %29 = shufflevector <4 x float> %27, <4 x float> %28, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %30 = bitcast %class.CFX_FloatRect* %0 to <4 x float>*
  store <4 x float> %29, <4 x float>* %30, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZNK13CFX_FloatRect11GetDeflatedEff(%class.CFX_FloatRect* nocapture readonly, float, float) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 2
  %7 = load float, float* %6, align 4
  %8 = fcmp ult float %5, %7
  br i1 %8, label %9, label %36

9:                                                ; preds = %3
  %10 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 1
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 3
  %13 = load float, float* %12, align 4
  %14 = fcmp ult float %11, %13
  br i1 %14, label %15, label %36

15:                                               ; preds = %9
  %16 = fcmp ogt float %5, %7
  %17 = select i1 %16, float %5, float %7
  %18 = select i1 %16, float %7, float %5
  %19 = fcmp ogt float %11, %13
  %20 = select i1 %19, float %11, float %13
  %21 = select i1 %19, float %13, float %11
  %22 = fadd float %18, %1
  %23 = fadd float %21, %2
  %24 = fsub float %17, %1
  %25 = fsub float %20, %2
  %26 = fcmp ogt float %22, %24
  %27 = select i1 %26, float %22, float %24
  %28 = select i1 %26, float %24, float %22
  %29 = fcmp ogt float %23, %25
  %30 = select i1 %29, float %23, float %25
  %31 = select i1 %29, float %25, float %23
  %32 = insertelement <2 x float> undef, float %28, i32 0
  %33 = insertelement <2 x float> %32, float %31, i32 1
  %34 = insertelement <2 x float> undef, float %27, i32 0
  %35 = insertelement <2 x float> %34, float %30, i32 1
  br label %36

36:                                               ; preds = %9, %3, %15
  %37 = phi <2 x float> [ %35, %15 ], [ zeroinitializer, %9 ], [ zeroinitializer, %3 ]
  %38 = phi <2 x float> [ %33, %15 ], [ zeroinitializer, %9 ], [ zeroinitializer, %3 ]
  %39 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %38, 0
  %40 = insertvalue { <2 x float>, <2 x float> } %39, <2 x float> %37, 1
  ret { <2 x float>, <2 x float> } %40
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN13CFX_FloatRect9TranslateEff(%class.CFX_FloatRect* nocapture, float, float) local_unnamed_addr #1 align 2 {
  %4 = bitcast %class.CFX_FloatRect* %0 to <4 x float>*
  %5 = load <4 x float>, <4 x float>* %4, align 4
  %6 = insertelement <2 x float> undef, float %1, i32 0
  %7 = insertelement <2 x float> %6, float %2, i32 1
  %8 = shufflevector <2 x float> %7, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %9 = fadd <4 x float> %5, %8
  %10 = bitcast %class.CFX_FloatRect* %0 to <4 x float>*
  store <4 x float> %9, <4 x float>* %10, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN13CFX_FloatRect5ScaleEf(%class.CFX_FloatRect* nocapture, float) local_unnamed_addr #1 align 2 {
  %3 = bitcast %class.CFX_FloatRect* %0 to <4 x float>*
  %4 = load <4 x float>, <4 x float>* %3, align 4
  %5 = insertelement <4 x float> undef, float %1, i32 0
  %6 = shufflevector <4 x float> %5, <4 x float> undef, <4 x i32> zeroinitializer
  %7 = fmul <4 x float> %4, %6
  %8 = bitcast %class.CFX_FloatRect* %0 to <4 x float>*
  store <4 x float> %7, <4 x float>* %8, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN13CFX_FloatRect20ScaleFromCenterPointEf(%class.CFX_FloatRect* nocapture, float) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 2
  %4 = bitcast float* %3 to <2 x float>*
  %5 = load <2 x float>, <2 x float>* %4, align 4
  %6 = bitcast %class.CFX_FloatRect* %0 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fsub <2 x float> %5, %7
  %9 = fmul <2 x float> %8, <float 5.000000e-01, float 5.000000e-01>
  %10 = fadd <2 x float> %5, %7
  %11 = fmul <2 x float> %10, <float 5.000000e-01, float 5.000000e-01>
  %12 = shufflevector <2 x float> %11, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %13 = insertelement <2 x float> undef, float %1, i32 0
  %14 = shufflevector <2 x float> %13, <2 x float> undef, <2 x i32> zeroinitializer
  %15 = fmul <2 x float> %9, %14
  %16 = shufflevector <2 x float> %15, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %17 = fsub <4 x float> %12, %16
  %18 = fadd <4 x float> %12, %16
  %19 = shufflevector <4 x float> %17, <4 x float> %18, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %20 = bitcast %class.CFX_FloatRect* %0 to <4 x float>*
  store <4 x float> %19, <4 x float>* %20, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZNK13CFX_FloatRect8ToFxRectEv(%class.CFX_FloatRect* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = fptosi float %3 to i32
  %5 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 3
  %6 = load float, float* %5, align 4
  %7 = fptosi float %6 to i32
  %8 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 2
  %9 = load float, float* %8, align 4
  %10 = fptosi float %9 to i32
  %11 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 1
  %12 = load float, float* %11, align 4
  %13 = fptosi float %12 to i32
  %14 = zext i32 %7 to i64
  %15 = shl nuw i64 %14, 32
  %16 = zext i32 %4 to i64
  %17 = or i64 %15, %16
  %18 = insertvalue { i64, i64 } undef, i64 %17, 0
  %19 = zext i32 %13 to i64
  %20 = shl nuw i64 %19, 32
  %21 = zext i32 %10 to i64
  %22 = or i64 %20, %21
  %23 = insertvalue { i64, i64 } %18, i64 %22, 1
  ret { i64, i64 } %23
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK13CFX_FloatRect15ToRoundedFxRectEv(%class.CFX_FloatRect* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = tail call i32 @FXSYS_roundf(float %3) #9
  %5 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 3
  %6 = load float, float* %5, align 4
  %7 = tail call i32 @FXSYS_roundf(float %6) #9
  %8 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 2
  %9 = load float, float* %8, align 4
  %10 = tail call i32 @FXSYS_roundf(float %9) #9
  %11 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %0, i64 0, i32 1
  %12 = load float, float* %11, align 4
  %13 = tail call i32 @FXSYS_roundf(float %12) #9
  %14 = zext i32 %7 to i64
  %15 = shl nuw i64 %14, 32
  %16 = zext i32 %4 to i64
  %17 = or i64 %15, %16
  %18 = insertvalue { i64, i64 } undef, i64 %17, 0
  %19 = zext i32 %13 to i64
  %20 = shl nuw i64 %19, 32
  %21 = zext i32 %10 to i64
  %22 = or i64 %20, %21
  %23 = insertvalue { i64, i64 } %18, i64 %22, 1
  ret { i64, i64 } %23
}

declare i32 @FXSYS_roundf(float) local_unnamed_addr #5

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZNK9CFX_RectF12GetOuterRectEv(%class.CFX_RectF* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %0, i64 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = tail call float @llvm.floor.f32(float %3) #9
  %5 = fptosi float %4 to i32
  %6 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %0, i64 0, i32 1
  %7 = load float, float* %6, align 4
  %8 = tail call float @llvm.floor.f32(float %7) #9
  %9 = fptosi float %8 to i32
  %10 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %0, i64 0, i32 2
  %11 = load float, float* %10, align 4
  %12 = fadd float %3, %11
  %13 = tail call float @llvm.ceil.f32(float %12) #9
  %14 = fptosi float %13 to i32
  %15 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %0, i64 0, i32 3
  %16 = load float, float* %15, align 4
  %17 = fadd float %7, %16
  %18 = tail call float @llvm.ceil.f32(float %17) #9
  %19 = fptosi float %18 to i32
  %20 = zext i32 %9 to i64
  %21 = shl nuw i64 %20, 32
  %22 = zext i32 %5 to i64
  %23 = or i64 %21, %22
  %24 = insertvalue { i64, i64 } undef, i64 %23, 0
  %25 = zext i32 %19 to i64
  %26 = shl nuw i64 %25, 32
  %27 = zext i32 %14 to i64
  %28 = or i64 %26, %27
  %29 = insertvalue { i64, i64 } %24, i64 %28, 1
  ret { i64, i64 } %29
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZNK10CFX_Matrix10GetInverseEv(%class.CFX_Matrix* noalias nocapture sret, %class.CFX_Matrix* nocapture readonly) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 4
  %4 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 5
  %5 = bitcast %class.CFX_Matrix* %0 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %5, align 4
  store float 0.000000e+00, float* %3, align 4
  store float 0.000000e+00, float* %4, align 4
  %6 = bitcast %class.CFX_Matrix* %1 to <4 x float>*
  %7 = load <4 x float>, <4 x float>* %6, align 4
  %8 = shufflevector <4 x float> %7, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x float> %7, <4 x float> undef, <2 x i32> <i32 3, i32 2>
  %10 = fmul <2 x float> %8, %9
  %11 = extractelement <2 x float> %10, i32 0
  %12 = extractelement <2 x float> %10, i32 1
  %13 = fsub float %11, %12
  %14 = fcmp oeq float %13, 0.000000e+00
  br i1 %14, label %39, label %15

15:                                               ; preds = %2
  %16 = extractelement <4 x float> %7, i32 3
  %17 = extractelement <4 x float> %7, i32 2
  %18 = extractelement <4 x float> %7, i32 0
  %19 = extractelement <4 x float> %7, i32 1
  %20 = shufflevector <4 x float> %7, <4 x float> undef, <4 x i32> <i32 3, i32 1, i32 2, i32 0>
  %21 = fsub float -0.000000e+00, %13
  %22 = insertelement <2 x float> undef, float %13, i32 0
  %23 = insertelement <2 x float> %22, float %21, i32 1
  %24 = shufflevector <2 x float> %23, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 0>
  %25 = fdiv <4 x float> %20, %24
  %26 = bitcast %class.CFX_Matrix* %0 to <4 x float>*
  store <4 x float> %25, <4 x float>* %26, align 4
  %27 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %1, i64 0, i32 5
  %28 = load float, float* %27, align 4
  %29 = fmul float %17, %28
  %30 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %1, i64 0, i32 4
  %31 = load float, float* %30, align 4
  %32 = fmul float %16, %31
  %33 = fsub float %29, %32
  %34 = fdiv float %33, %13
  store float %34, float* %3, align 4
  %35 = fmul float %18, %28
  %36 = fmul float %19, %31
  %37 = fsub float %35, %36
  %38 = fdiv float %37, %21
  store float %38, float* %4, align 4
  br label %39

39:                                               ; preds = %2, %15
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK10CFX_Matrix11Is90RotatedEv(%class.CFX_Matrix* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = fmul float %3, 1.000000e+03
  %5 = tail call float @llvm.fabs.f32(float %4) #9
  %6 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 1
  %7 = load float, float* %6, align 4
  %8 = tail call float @llvm.fabs.f32(float %7) #9
  %9 = fcmp olt float %5, %8
  br i1 %9, label %10, label %19

10:                                               ; preds = %1
  %11 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 3
  %12 = load float, float* %11, align 4
  %13 = fmul float %12, 1.000000e+03
  %14 = tail call float @llvm.fabs.f32(float %13) #9
  %15 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 2
  %16 = load float, float* %15, align 4
  %17 = tail call float @llvm.fabs.f32(float %16) #9
  %18 = fcmp olt float %14, %17
  br label %19

19:                                               ; preds = %10, %1
  %20 = phi i1 [ false, %1 ], [ %18, %10 ]
  ret i1 %20
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK10CFX_Matrix8IsScaledEv(%class.CFX_Matrix* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 1
  %3 = load float, float* %2, align 4
  %4 = fmul float %3, 1.000000e+03
  %5 = tail call float @llvm.fabs.f32(float %4) #9
  %6 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = tail call float @llvm.fabs.f32(float %7) #9
  %9 = fcmp olt float %5, %8
  br i1 %9, label %10, label %19

10:                                               ; preds = %1
  %11 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 2
  %12 = load float, float* %11, align 4
  %13 = fmul float %12, 1.000000e+03
  %14 = tail call float @llvm.fabs.f32(float %13) #9
  %15 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 3
  %16 = load float, float* %15, align 4
  %17 = tail call float @llvm.fabs.f32(float %16) #9
  %18 = fcmp olt float %14, %17
  br label %19

19:                                               ; preds = %10, %1
  %20 = phi i1 [ false, %1 ], [ %18, %10 ]
  ret i1 %20
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN10CFX_Matrix9TranslateEff(%class.CFX_Matrix* nocapture, float, float) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 4
  %5 = load float, float* %4, align 4
  %6 = fadd float %5, %1
  store float %6, float* %4, align 4
  %7 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 5
  %8 = load float, float* %7, align 4
  %9 = fadd float %8, %2
  store float %9, float* %7, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN10CFX_Matrix16TranslatePrependEff(%class.CFX_Matrix* nocapture, float, float) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = fmul float %5, %1
  %7 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 2
  %8 = load float, float* %7, align 4
  %9 = fmul float %8, %2
  %10 = fadd float %6, %9
  %11 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 4
  %12 = load float, float* %11, align 4
  %13 = fadd float %12, %10
  store float %13, float* %11, align 4
  %14 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 3
  %15 = load float, float* %14, align 4
  %16 = fmul float %15, %2
  %17 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 1
  %18 = load float, float* %17, align 4
  %19 = fmul float %18, %1
  %20 = fadd float %16, %19
  %21 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 5
  %22 = load float, float* %21, align 4
  %23 = fadd float %22, %20
  store float %23, float* %21, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN10CFX_Matrix5ScaleEff(%class.CFX_Matrix* nocapture, float, float) local_unnamed_addr #1 align 2 {
  %4 = bitcast %class.CFX_Matrix* %0 to <4 x float>*
  %5 = load <4 x float>, <4 x float>* %4, align 4
  %6 = insertelement <2 x float> undef, float %1, i32 0
  %7 = insertelement <2 x float> %6, float %2, i32 1
  %8 = shufflevector <2 x float> %7, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %9 = fmul <4 x float> %5, %8
  %10 = bitcast %class.CFX_Matrix* %0 to <4 x float>*
  store <4 x float> %9, <4 x float>* %10, align 4
  %11 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 4
  %12 = load float, float* %11, align 4
  %13 = fmul float %12, %1
  store float %13, float* %11, align 4
  %14 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 5
  %15 = load float, float* %14, align 4
  %16 = fmul float %15, %2
  store float %16, float* %14, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10CFX_Matrix6RotateEf(%class.CFX_Matrix* nocapture, float) local_unnamed_addr #2 align 2 {
  %3 = tail call float @cosf(float %1) #9
  %4 = tail call float @sinf(float %1) #9
  %5 = fsub float -0.000000e+00, %4
  %6 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 0
  %7 = load float, float* %6, align 4, !noalias !2
  %8 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 1
  %9 = load float, float* %8, align 4, !noalias !2
  %10 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 2
  %11 = load float, float* %10, align 4, !noalias !2
  %12 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 3
  %13 = load float, float* %12, align 4, !noalias !2
  %14 = insertelement <2 x float> undef, float %3, i32 0
  %15 = insertelement <2 x float> %14, float %4, i32 1
  %16 = shufflevector <2 x float> %15, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %17 = insertelement <2 x float> undef, float %7, i32 0
  %18 = insertelement <2 x float> %17, float %11, i32 1
  %19 = shufflevector <2 x float> %18, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %20 = fmul <4 x float> %16, %19
  %21 = insertelement <4 x float> undef, float %9, i32 0
  %22 = insertelement <4 x float> %21, float %3, i32 1
  %23 = insertelement <4 x float> %22, float %13, i32 2
  %24 = insertelement <4 x float> %23, float %3, i32 3
  %25 = insertelement <4 x float> undef, float %5, i32 0
  %26 = insertelement <4 x float> %25, float %9, i32 1
  %27 = insertelement <4 x float> %26, float %5, i32 2
  %28 = insertelement <4 x float> %27, float %13, i32 3
  %29 = fmul <4 x float> %24, %28
  %30 = fadd <4 x float> %20, %29
  %31 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 4
  %32 = load float, float* %31, align 4, !noalias !2
  %33 = fmul float %3, %32
  %34 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 5
  %35 = load float, float* %34, align 4, !noalias !2
  %36 = fmul float %35, %5
  %37 = fadd float %33, %36
  %38 = fadd float %37, 0.000000e+00
  %39 = fmul float %4, %32
  %40 = fmul float %3, %35
  %41 = fadd float %39, %40
  %42 = fadd float %41, 0.000000e+00
  %43 = bitcast %class.CFX_Matrix* %0 to <4 x float>*
  store <4 x float> %30, <4 x float>* %43, align 4
  store float %38, float* %31, align 4
  store float %42, float* %34, align 4
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN10CFX_Matrix9MatchRectERK13CFX_FloatRectS2_(%class.CFX_Matrix* nocapture, %class.CFX_FloatRect* nocapture readonly dereferenceable(16), %class.CFX_FloatRect* nocapture readonly dereferenceable(16)) local_unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %2, i64 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %2, i64 0, i32 2
  %7 = load float, float* %6, align 4
  %8 = fsub float %5, %7
  %9 = tail call float @llvm.fabs.f32(float %8) #9
  %10 = fcmp olt float %9, 0x3F50624DE0000000
  br i1 %10, label %18, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 0
  %13 = load float, float* %12, align 4
  %14 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 2
  %15 = load float, float* %14, align 4
  %16 = fsub float %13, %15
  %17 = fdiv float %16, %8
  br label %18

18:                                               ; preds = %3, %11
  %19 = phi float [ %17, %11 ], [ 1.000000e+00, %3 ]
  %20 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 0
  store float %19, float* %20, align 4
  %21 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %2, i64 0, i32 1
  %22 = load float, float* %21, align 4
  %23 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %2, i64 0, i32 3
  %24 = load float, float* %23, align 4
  %25 = fsub float %22, %24
  %26 = tail call float @llvm.fabs.f32(float %25) #9
  %27 = fcmp olt float %26, 0x3F50624DE0000000
  br i1 %27, label %35, label %28

28:                                               ; preds = %18
  %29 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 1
  %30 = load float, float* %29, align 4
  %31 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 3
  %32 = load float, float* %31, align 4
  %33 = fsub float %30, %32
  %34 = fdiv float %33, %25
  br label %35

35:                                               ; preds = %18, %28
  %36 = phi float [ %34, %28 ], [ 1.000000e+00, %18 ]
  %37 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 3
  store float %36, float* %37, align 4
  %38 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 0
  %39 = load float, float* %38, align 4
  %40 = load float, float* %4, align 4
  %41 = fmul float %19, %40
  %42 = fsub float %39, %41
  %43 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 4
  store float %42, float* %43, align 4
  %44 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 1
  %45 = load float, float* %44, align 4
  %46 = load float, float* %21, align 4
  %47 = fmul float %36, %46
  %48 = fsub float %45, %47
  %49 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 5
  store float %48, float* %49, align 4
  %50 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 1
  store float 0.000000e+00, float* %50, align 4
  %51 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 2
  store float 0.000000e+00, float* %51, align 4
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden float @_ZNK10CFX_Matrix8GetXUnitEv(%class.CFX_Matrix* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 1
  %3 = load float, float* %2, align 4
  %4 = fcmp oeq float %3, 0.000000e+00
  %5 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 0
  %6 = load float, float* %5, align 4
  br i1 %4, label %7, label %11

7:                                                ; preds = %1
  %8 = fcmp ogt float %6, 0.000000e+00
  %9 = fsub float -0.000000e+00, %6
  %10 = select i1 %8, float %6, float %9
  br label %22

11:                                               ; preds = %1
  %12 = fcmp oeq float %6, 0.000000e+00
  br i1 %12, label %13, label %17

13:                                               ; preds = %11
  %14 = fcmp ogt float %3, 0.000000e+00
  %15 = fsub float -0.000000e+00, %3
  %16 = select i1 %14, float %3, float %15
  br label %22

17:                                               ; preds = %11
  %18 = fmul float %6, %6
  %19 = fmul float %3, %3
  %20 = fadd float %19, %18
  %21 = tail call float @sqrtf(float %20) #9
  br label %22

22:                                               ; preds = %17, %13, %7
  %23 = phi float [ %10, %7 ], [ %16, %13 ], [ %21, %17 ]
  ret float %23
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden float @_ZNK10CFX_Matrix8GetYUnitEv(%class.CFX_Matrix* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 2
  %3 = load float, float* %2, align 4
  %4 = fcmp oeq float %3, 0.000000e+00
  %5 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 3
  %6 = load float, float* %5, align 4
  br i1 %4, label %7, label %11

7:                                                ; preds = %1
  %8 = fcmp ogt float %6, 0.000000e+00
  %9 = fsub float -0.000000e+00, %6
  %10 = select i1 %8, float %6, float %9
  br label %22

11:                                               ; preds = %1
  %12 = fcmp oeq float %6, 0.000000e+00
  br i1 %12, label %13, label %17

13:                                               ; preds = %11
  %14 = fcmp ogt float %3, 0.000000e+00
  %15 = fsub float -0.000000e+00, %3
  %16 = select i1 %14, float %3, float %15
  br label %22

17:                                               ; preds = %11
  %18 = fmul float %3, %3
  %19 = fmul float %6, %6
  %20 = fadd float %18, %19
  %21 = tail call float @sqrtf(float %20) #9
  br label %22

22:                                               ; preds = %17, %13, %7
  %23 = phi float [ %10, %7 ], [ %16, %13 ], [ %21, %17 ]
  ret float %23
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZNK10CFX_Matrix11GetUnitRectEv(%class.CFX_Matrix* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 2
  %3 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 4
  %4 = bitcast %class.CFX_Matrix* %0 to <2 x float>*
  %5 = load <2 x float>, <2 x float>* %4, align 4, !noalias !5
  %6 = fmul <2 x float> %5, zeroinitializer
  %7 = bitcast float* %2 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4, !noalias !5
  %9 = fadd <2 x float> %6, %8
  %10 = bitcast float* %3 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 4, !noalias !5
  %12 = fadd <2 x float> %11, %9
  %13 = fmul <2 x float> %8, zeroinitializer
  %14 = fadd <2 x float> %6, %13
  %15 = fadd <2 x float> %11, %14
  %16 = fadd <2 x float> %5, %8
  %17 = fadd <2 x float> %11, %16
  %18 = fadd <2 x float> %5, %13
  %19 = fadd <2 x float> %11, %18
  %20 = fcmp olt <2 x float> %12, %15
  %21 = select <2 x i1> %20, <2 x float> %15, <2 x float> %12
  %22 = fcmp olt <2 x float> %15, %12
  %23 = select <2 x i1> %22, <2 x float> %15, <2 x float> %12
  %24 = fcmp olt <2 x float> %21, %17
  %25 = select <2 x i1> %24, <2 x float> %17, <2 x float> %21
  %26 = fcmp olt <2 x float> %17, %23
  %27 = select <2 x i1> %26, <2 x float> %17, <2 x float> %23
  %28 = fcmp olt <2 x float> %25, %19
  %29 = select <2 x i1> %28, <2 x float> %19, <2 x float> %25
  %30 = fcmp olt <2 x float> %19, %27
  %31 = select <2 x i1> %30, <2 x float> %19, <2 x float> %27
  %32 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %31, 0
  %33 = insertvalue { <2 x float>, <2 x float> } %32, <2 x float> %29, 1
  ret { <2 x float>, <2 x float> } %33
}

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZNK10CFX_Matrix13TransformRectERK13CFX_FloatRect(%class.CFX_Matrix* nocapture readonly, %class.CFX_FloatRect* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 3
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 1
  %8 = load float, float* %7, align 4
  %9 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 2
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 2
  %12 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 4
  %13 = bitcast %class.CFX_Matrix* %0 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4, !noalias !8
  %15 = insertelement <2 x float> undef, float %4, i32 0
  %16 = shufflevector <2 x float> %15, <2 x float> undef, <2 x i32> zeroinitializer
  %17 = fmul <2 x float> %14, %16
  %18 = bitcast float* %11 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4, !noalias !8
  %20 = insertelement <2 x float> undef, float %6, i32 0
  %21 = shufflevector <2 x float> %20, <2 x float> undef, <2 x i32> zeroinitializer
  %22 = fmul <2 x float> %19, %21
  %23 = fadd <2 x float> %17, %22
  %24 = bitcast float* %12 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 4, !noalias !8
  %26 = fadd <2 x float> %25, %23
  %27 = insertelement <2 x float> undef, float %8, i32 0
  %28 = shufflevector <2 x float> %27, <2 x float> undef, <2 x i32> zeroinitializer
  %29 = fmul <2 x float> %19, %28
  %30 = fadd <2 x float> %17, %29
  %31 = fadd <2 x float> %25, %30
  %32 = insertelement <2 x float> undef, float %10, i32 0
  %33 = shufflevector <2 x float> %32, <2 x float> undef, <2 x i32> zeroinitializer
  %34 = fmul <2 x float> %14, %33
  %35 = fadd <2 x float> %34, %22
  %36 = fadd <2 x float> %25, %35
  %37 = fadd <2 x float> %34, %29
  %38 = fadd <2 x float> %25, %37
  %39 = fcmp olt <2 x float> %26, %31
  %40 = select <2 x i1> %39, <2 x float> %31, <2 x float> %26
  %41 = fcmp olt <2 x float> %31, %26
  %42 = select <2 x i1> %41, <2 x float> %31, <2 x float> %26
  %43 = fcmp olt <2 x float> %40, %36
  %44 = select <2 x i1> %43, <2 x float> %36, <2 x float> %40
  %45 = fcmp olt <2 x float> %36, %42
  %46 = select <2 x i1> %45, <2 x float> %36, <2 x float> %42
  %47 = fcmp olt <2 x float> %44, %38
  %48 = select <2 x i1> %47, <2 x float> %38, <2 x float> %44
  %49 = fcmp olt <2 x float> %38, %46
  %50 = select <2 x i1> %49, <2 x float> %38, <2 x float> %46
  %51 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %50, 0
  %52 = insertvalue { <2 x float>, <2 x float> } %51, <2 x float> %48, 1
  ret { <2 x float>, <2 x float> } %52
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden float @_ZNK10CFX_Matrix18TransformXDistanceEf(%class.CFX_Matrix* nocapture readonly, float) local_unnamed_addr #6 align 2 {
  %3 = bitcast %class.CFX_Matrix* %0 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 4
  %5 = insertelement <2 x float> undef, float %1, i32 0
  %6 = shufflevector <2 x float> %5, <2 x float> undef, <2 x i32> zeroinitializer
  %7 = fmul <2 x float> %4, %6
  %8 = fmul <2 x float> %7, %7
  %9 = extractelement <2 x float> %8, i32 0
  %10 = extractelement <2 x float> %8, i32 1
  %11 = fadd float %9, %10
  %12 = tail call float @sqrtf(float %11) #9
  ret float %12
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden float @_ZNK10CFX_Matrix17TransformDistanceEf(%class.CFX_Matrix* nocapture readonly, float) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 1
  %4 = load float, float* %3, align 4
  %5 = fcmp oeq float %4, 0.000000e+00
  %6 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 0
  %7 = load float, float* %6, align 4
  br i1 %5, label %8, label %12

8:                                                ; preds = %2
  %9 = fcmp ogt float %7, 0.000000e+00
  %10 = fsub float -0.000000e+00, %7
  %11 = select i1 %9, float %7, float %10
  br label %23

12:                                               ; preds = %2
  %13 = fcmp oeq float %7, 0.000000e+00
  br i1 %13, label %14, label %18

14:                                               ; preds = %12
  %15 = fcmp ogt float %4, 0.000000e+00
  %16 = fsub float -0.000000e+00, %4
  %17 = select i1 %15, float %4, float %16
  br label %23

18:                                               ; preds = %12
  %19 = fmul float %7, %7
  %20 = fmul float %4, %4
  %21 = fadd float %20, %19
  %22 = tail call float @sqrtf(float %21) #9
  br label %23

23:                                               ; preds = %8, %14, %18
  %24 = phi float [ %11, %8 ], [ %17, %14 ], [ %22, %18 ]
  %25 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 2
  %26 = load float, float* %25, align 4
  %27 = fcmp oeq float %26, 0.000000e+00
  %28 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 3
  %29 = load float, float* %28, align 4
  br i1 %27, label %30, label %34

30:                                               ; preds = %23
  %31 = fcmp ogt float %29, 0.000000e+00
  %32 = fsub float -0.000000e+00, %29
  %33 = select i1 %31, float %29, float %32
  br label %45

34:                                               ; preds = %23
  %35 = fcmp oeq float %29, 0.000000e+00
  br i1 %35, label %36, label %40

36:                                               ; preds = %34
  %37 = fcmp ogt float %26, 0.000000e+00
  %38 = fsub float -0.000000e+00, %26
  %39 = select i1 %37, float %26, float %38
  br label %45

40:                                               ; preds = %34
  %41 = fmul float %26, %26
  %42 = fmul float %29, %29
  %43 = fadd float %41, %42
  %44 = tail call float @sqrtf(float %43) #9
  br label %45

45:                                               ; preds = %30, %36, %40
  %46 = phi float [ %33, %30 ], [ %39, %36 ], [ %44, %40 ]
  %47 = fadd float %24, %46
  %48 = fmul float %47, %1
  %49 = fmul float %48, 5.000000e-01
  ret float %49
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK10CFX_Matrix9TransformERK13CFX_PTemplateIfE(%class.CFX_PTemplate* noalias nocapture sret, %class.CFX_Matrix* nocapture readonly, %class.CFX_PTemplate* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %1, i64 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %2, i64 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = fmul float %5, %7
  %9 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %1, i64 0, i32 2
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %2, i64 0, i32 1
  %12 = load float, float* %11, align 4
  %13 = fmul float %10, %12
  %14 = fadd float %8, %13
  %15 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %1, i64 0, i32 4
  %16 = load float, float* %15, align 4
  %17 = fadd float %16, %14
  %18 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %1, i64 0, i32 1
  %19 = load float, float* %18, align 4
  %20 = fmul float %7, %19
  %21 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %1, i64 0, i32 3
  %22 = load float, float* %21, align 4
  %23 = fmul float %12, %22
  %24 = fadd float %20, %23
  %25 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %1, i64 0, i32 5
  %26 = load float, float* %25, align 4
  %27 = fadd float %26, %24
  %28 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %0, i64 0, i32 0
  store float %17, float* %28, align 4
  %29 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %0, i64 0, i32 1
  store float %27, float* %29, align 4
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZNK10CFX_Matrix13TransformRectERK9CFX_RectF(%class.CFX_Matrix* nocapture readonly, %class.CFX_RectF* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %class.CFX_RectF* %1 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 4
  %5 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %1, i64 0, i32 2
  %6 = bitcast float* %5 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fadd <2 x float> %4, %7
  %9 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 0
  %10 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 2
  %11 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 4
  %12 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 1
  %13 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 3
  %14 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %0, i64 0, i32 5
  %15 = load float, float* %9, align 4, !noalias !11
  %16 = load float, float* %10, align 4, !noalias !11
  %17 = insertelement <2 x float> undef, float %15, i32 0
  %18 = insertelement <2 x float> %17, float %16, i32 1
  %19 = fmul <2 x float> %4, %18
  %20 = fmul <2 x float> %8, %18
  %21 = extractelement <2 x float> %20, i32 1
  %22 = load float, float* %11, align 4, !noalias !11
  %23 = load float, float* %12, align 4, !noalias !11
  %24 = load float, float* %13, align 4, !noalias !11
  %25 = insertelement <2 x float> undef, float %23, i32 0
  %26 = insertelement <2 x float> %25, float %24, i32 1
  %27 = fmul <2 x float> %8, %26
  %28 = extractelement <2 x float> %27, i32 1
  %29 = fmul <2 x float> %4, %26
  %30 = load float, float* %14, align 4, !noalias !11
  %31 = extractelement <2 x float> %19, i32 1
  %32 = shufflevector <2 x float> %19, <2 x float> undef, <2 x i32> zeroinitializer
  %33 = shufflevector <2 x float> %20, <2 x float> %19, <2 x i32> <i32 1, i32 3>
  %34 = fadd <2 x float> %32, %33
  %35 = insertelement <2 x float> undef, float %22, i32 0
  %36 = shufflevector <2 x float> %35, <2 x float> undef, <2 x i32> zeroinitializer
  %37 = fadd <2 x float> %36, %34
  %38 = extractelement <2 x float> %29, i32 1
  %39 = shufflevector <2 x float> %29, <2 x float> undef, <2 x i32> zeroinitializer
  %40 = shufflevector <2 x float> %29, <2 x float> %27, <2 x i32> <i32 1, i32 3>
  %41 = fadd <2 x float> %39, %40
  %42 = insertelement <2 x float> undef, float %30, i32 0
  %43 = shufflevector <2 x float> %42, <2 x float> undef, <2 x i32> zeroinitializer
  %44 = fadd <2 x float> %43, %41
  %45 = extractelement <2 x float> %20, i32 0
  %46 = fadd float %45, %21
  %47 = fadd float %22, %46
  %48 = extractelement <2 x float> %27, i32 0
  %49 = fadd float %48, %28
  %50 = fadd float %30, %49
  %51 = fadd float %45, %31
  %52 = fadd float %22, %51
  %53 = fadd float %48, %38
  %54 = fadd float %30, %53
  %55 = extractelement <2 x float> %37, i32 0
  %56 = extractelement <2 x float> %37, i32 1
  %57 = fcmp olt float %55, %56
  %58 = select i1 %57, float %56, float %55
  %59 = fcmp olt float %56, %55
  %60 = select i1 %59, float %56, float %55
  %61 = extractelement <2 x float> %44, i32 0
  %62 = extractelement <2 x float> %44, i32 1
  %63 = fcmp olt float %62, %61
  %64 = select i1 %63, float %61, float %62
  %65 = fcmp olt float %61, %62
  %66 = select i1 %65, float %61, float %62
  %67 = fcmp olt float %58, %47
  %68 = select i1 %67, float %47, float %58
  %69 = fcmp olt float %47, %60
  %70 = select i1 %69, float %47, float %60
  %71 = fcmp olt float %64, %50
  %72 = select i1 %71, float %50, float %64
  %73 = fcmp olt float %50, %66
  %74 = select i1 %73, float %50, float %66
  %75 = fcmp olt float %68, %52
  %76 = select i1 %75, float %52, float %68
  %77 = fcmp olt float %52, %70
  %78 = select i1 %77, float %52, float %70
  %79 = fcmp olt float %72, %54
  %80 = select i1 %79, float %54, float %72
  %81 = fcmp olt float %54, %74
  %82 = select i1 %81, float %54, float %74
  %83 = insertelement <2 x float> undef, float %78, i32 0
  %84 = insertelement <2 x float> %83, float %82, i32 1
  %85 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %84, 0
  %86 = fsub float %76, %78
  %87 = fsub float %80, %82
  %88 = insertelement <2 x float> undef, float %86, i32 0
  %89 = insertelement <2 x float> %88, float %87, i32 1
  %90 = insertvalue { <2 x float>, <2 x float> } %85, <2 x float> %89, 1
  ret { <2 x float>, <2 x float> } %90
}

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #7

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #7

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #7

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #7

; Function Attrs: nofree nounwind
declare float @cosf(float) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare float @sinf(float) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #8

; Function Attrs: nounwind readnone speculatable
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #7

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK10CFX_MatrixmlERKS_: argument 0"}
!4 = distinct !{!4, !"_ZNK10CFX_MatrixmlERKS_"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNK10CFX_Matrix9TransformERK13CFX_PTemplateIfE: argument 0"}
!7 = distinct !{!7, !"_ZNK10CFX_Matrix9TransformERK13CFX_PTemplateIfE"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZNK10CFX_Matrix9TransformERK13CFX_PTemplateIfE: argument 0"}
!10 = distinct !{!10, !"_ZNK10CFX_Matrix9TransformERK13CFX_PTemplateIfE"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZNK10CFX_Matrix9TransformERK13CFX_PTemplateIfE: argument 0"}
!13 = distinct !{!13, !"_ZNK10CFX_Matrix9TransformERK13CFX_PTemplateIfE"}
