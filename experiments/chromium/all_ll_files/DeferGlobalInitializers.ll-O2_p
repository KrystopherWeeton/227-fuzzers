; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/DeferGlobalInitializers.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/DeferGlobalInitializers.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::ImmutableString" = type { i8*, i64 }
%"struct.sh::StaticType::Helpers::StaticMangledName" = type { [4 x i8] }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.22" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.23"*, i64, i32, %"class.std::__1::basic_string.24" }
%"class.sh::TVector.23" = type opaque
%"class.std::__1::basic_string.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon.27 }
%union.anon.27 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::TCompiler" = type { %"class.sh::TShHandleBase", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"struct.sh::ValidateASTOptions", %"class.angle::BitSetT", i8, i8, i32, i32, i32, %"class.sh::CallDAG", %"class.std::__1::vector.59", %struct.ShBuiltInResources, %"class.std::__1::basic_string", %"class.sh::TSymbolTable", %"class.std::__1::map.90", %"class.sh::ArrayBoundsClamper", %"class.sh::BuiltInFunctionEmulator", i32, %"class.sh::TInfoSink", %"class.sh::TDiagnostics", i8*, i8, i8, i8, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.std::__1::map.124", %struct.TPragma, i64 }
%"class.sh::TShHandleBase" = type { i32 (...)**, %"class.angle::PoolAllocator" }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"*, %"class.std::__1::__compressed_pair.3" }
%"struct.sh::ShaderVariable" = type { i32, i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector.117", i8, i8, %"class.std::__1::vector.1", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, i32, i8, i32, i32, i32, i8, i8, i8, i32, i8, i32, i8, i8, i8, i8, i32 }
%"class.std::__1::vector.117" = type { %"class.std::__1::__vector_base.118" }
%"class.std::__1::__vector_base.118" = type { i32*, i32*, %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { i32* }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.sh::ShaderVariable"* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.sh::InterfaceBlock"*, %"struct.sh::InterfaceBlock"*, %"class.std::__1::__compressed_pair.15" }
%"struct.sh::InterfaceBlock" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i32, i8, i32, i8, i8, i32, %"class.std::__1::vector.1" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.sh::InterfaceBlock"* }
%"struct.sh::ValidateASTOptions" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.angle::BitSetT" = type { i32 }
%"class.sh::CallDAG" = type { %"class.std::__1::vector.20", %"class.std::__1::map" }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"struct.sh::CallDAG::Record"*, %"struct.sh::CallDAG::Record"*, %"class.std::__1::__compressed_pair.46" }
%"struct.sh::CallDAG::Record" = type { %"class.sh::TIntermFunctionDefinition"*, %"class.std::__1::vector.39" }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TVector" = type opaque
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TConstantUnion" = type { %union.anon.30, i32 }
%union.anon.30 = type { i32 }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { i32*, i32*, %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { i32* }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.sh::CallDAG::Record"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.51", %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { i64 }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { %"struct.sh::TCompiler::FunctionMetadata"*, %"struct.sh::TCompiler::FunctionMetadata"*, %"class.std::__1::__compressed_pair.61" }
%"struct.sh::TCompiler::FunctionMetadata" = type { i8 }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"struct.sh::TCompiler::FunctionMetadata"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector.66", %"class.std::__1::vector.73", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map.81", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.std::__1::vector.66" = type { %"class.std::__1::__vector_base.67" }
%"class.std::__1::__vector_base.67" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { %"class.std::__1::unique_ptr.75"*, %"class.std::__1::unique_ptr.75"*, %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::unique_ptr.75" = type opaque
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"class.std::__1::unique_ptr.75"* }
%"class.std::__1::map.81" = type { %"class.std::__1::__tree.82" }
%"class.std::__1::__tree.82" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.83", %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.std::__1::map.90" = type { %"class.std::__1::__tree.91" }
%"class.std::__1::__tree.91" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.92", %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.sh::ArrayBoundsClamper" = type <{ i32, i8, [3 x i8] }>
%"class.sh::BuiltInFunctionEmulator" = type { %"class.std::__1::map.101", %"class.std::__1::map", %"class.std::__1::vector.39", %"class.std::__1::vector.110" }
%"class.std::__1::map.101" = type { %"class.std::__1::__tree.102" }
%"class.std::__1::__tree.102" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.103", %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.std::__1::vector.110" = type { %"class.std::__1::__vector_base.111" }
%"class.std::__1::__vector_base.111" = type { i8* (i32)**, i8* (i32)**, %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { i8* (i32)** }
%"class.sh::TInfoSink" = type { %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase" }
%"class.sh::TInfoSinkBase" = type { %"class.std::__1::basic_string", %"class.std::__1::vector.117" }
%"class.sh::TDiagnostics" = type { %"class.angle::pp::Diagnostics", %"class.sh::TInfoSinkBase"*, i32, i32 }
%"class.angle::pp::Diagnostics" = type { i32 (...)** }
%"class.std::__1::map.124" = type { %"class.std::__1::__tree.125" }
%"class.std::__1::__tree.125" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.126", %"class.std::__1::__compressed_pair.130" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%struct.TPragma = type { i8, i8, i8, %"struct.TPragma::STDGL" }
%"struct.TPragma::STDGL" = type { i8 }
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.31", i8, [7 x i8] }>
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector.31" = type { %"class.std::__1::vector.32" }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.sh::TIntermNode"** }
%"class.std::__1::vector.135" = type { %"class.std::__1::__vector_base.136" }
%"class.std::__1::__vector_base.136" = type { %"class.sh::TVariable"**, %"class.sh::TVariable"**, %"class.std::__1::__compressed_pair.137" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %"class.sh::TVariable"** }
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.31" }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.31", i8, i8, %"class.sh::TFunction"* }

$_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertINS_11__wrap_iterIPS3_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISC_E9referenceEEE5valueESA_E4typeENS8_IPKS3_EESC_SC_ = comdat any

$_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertENS_11__wrap_iterIPKS3_EEOS3_ = comdat any

@_ZN2sh12_GLOBAL__N_118kInitGlobalsStringE = internal constant %"class.sh::ImmutableString" { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i64 11 }, align 8
@_ZTVN2sh12TIntermBlockE = external unnamed_addr constant { [31 x i8*], [6 x i8*] }, align 8
@.str.1 = private unnamed_addr constant [12 x i8] c"initGlobals\00", align 1
@_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE0ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE = internal constant %"struct.sh::StaticType::Helpers::StaticMangledName" { [4 x i8] c"00A\00" }, align 1
@_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE0ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE = internal global { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* } { i32 0, i32 0, i32 1, i8 0, i8 0, %"struct.sh::TMemoryQualifier" zeroinitializer, { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 } { i32 -1, i32 0, i32 0, i32 0, %"struct.sh::WorkGroupSize" { [3 x i32] [i32 -1, i32 -1, i32 -1] }, i32 -1, i32 -1, i32 0, i32 -1, i8 0, i8 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i8 0 }, i8 1, i8 1, %"class.sh::TSpan" zeroinitializer, %"class.sh::TVector.22"* null, %"class.sh::TInterfaceBlock"* null, %"class.sh::TStructure"* null, i8 0, i64 0, i8* getelementptr inbounds (%"struct.sh::StaticType::Helpers::StaticMangledName", %"struct.sh::StaticType::Helpers::StaticMangledName"* @_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE0ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE, i32 0, i32 0, i32 0) }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh23DeferGlobalInitializersEPNS_9TCompilerEPNS_12TIntermBlockEbbbPNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) local_unnamed_addr #0 {
  %7 = alloca %"class.sh::TVector.31", align 8
  %8 = alloca %"class.sh::TIntermNode"*, align 8
  %9 = alloca %"class.sh::TVector.31", align 8
  %10 = alloca %"class.sh::TIntermNode"*, align 8
  %11 = alloca %"class.sh::TVector.31", align 16
  %12 = alloca %"class.std::__1::vector.135", align 8
  %13 = alloca %"class.sh::ImmutableString", align 8
  %14 = bitcast %"class.sh::TVector.31"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #7
  %15 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %11, i64 0, i32 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %11, i64 0, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %11, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 0, i64 24, i1 false) #7
  %18 = bitcast %"class.std::__1::vector.135"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #7
  %19 = getelementptr inbounds %"class.std::__1::vector.135", %"class.std::__1::vector.135"* %12, i64 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.std::__1::vector.135", %"class.std::__1::vector.135"* %12, i64 0, i32 0, i32 1
  %21 = getelementptr inbounds %"class.std::__1::vector.135", %"class.std::__1::vector.135"* %12, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 24, i1 false) #7
  %22 = bitcast %"class.sh::TIntermBlock"* %1 to %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)***
  %23 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*** %22, align 8
  %24 = getelementptr inbounds %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %23, i64 27
  %25 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %24, align 8
  %26 = tail call %"class.sh::TVector.31"* %25(%"class.sh::TIntermBlock"* %1) #7
  %27 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %26, i64 0, i32 0, i32 0, i32 0
  %28 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %27, align 8
  %29 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %26, i64 0, i32 0, i32 0, i32 1
  %30 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %29, align 8
  %31 = icmp eq %"class.sh::TIntermNode"** %28, %30
  br i1 %31, label %510, label %32

32:                                               ; preds = %6
  %33 = bitcast %"class.sh::TVariable"*** %20 to i64*
  %34 = bitcast %"class.std::__1::vector.135"* %12 to i64*
  %35 = bitcast %"class.sh::TVariable"*** %21 to i64*
  %36 = bitcast %"class.sh::TIntermNode"*** %16 to i64*
  %37 = bitcast %"class.sh::TVector.31"* %11 to i64*
  %38 = bitcast %"class.sh::TIntermNode"*** %17 to i64*
  %39 = bitcast %"class.sh::TVector.31"* %7 to i8*
  %40 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %7, i64 0, i32 0, i32 0, i32 0
  %41 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %7, i64 0, i32 0, i32 0, i32 1
  %42 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %11, i64 0, i32 0
  %43 = bitcast %"class.sh::TIntermNode"*** %41 to i64*
  br label %48

44:                                               ; preds = %435
  %45 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %15, align 16
  %46 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %16, align 8
  %47 = icmp eq %"class.sh::TIntermNode"** %45, %46
  br i1 %47, label %510, label %438

48:                                               ; preds = %32, %435
  %49 = phi %"class.sh::TIntermNode"** [ %28, %32 ], [ %436, %435 ]
  %50 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %49, align 8
  %51 = bitcast %"class.sh::TIntermNode"* %50 to %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)***
  %52 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*** %51, align 8
  %53 = getelementptr inbounds %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %52, i64 11
  %54 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %53, align 8
  %55 = call %"class.sh::TIntermDeclaration"* %54(%"class.sh::TIntermNode"* %50) #7
  %56 = icmp eq %"class.sh::TIntermDeclaration"* %55, null
  br i1 %56, label %435, label %57

57:                                               ; preds = %48
  %58 = bitcast %"class.sh::TIntermDeclaration"* %55 to %"class.sh::TVector.31"* (%"class.sh::TIntermDeclaration"*)***
  %59 = load %"class.sh::TVector.31"* (%"class.sh::TIntermDeclaration"*)**, %"class.sh::TVector.31"* (%"class.sh::TIntermDeclaration"*)*** %58, align 8
  %60 = getelementptr inbounds %"class.sh::TVector.31"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermDeclaration"*)** %59, i64 27
  %61 = load %"class.sh::TVector.31"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermDeclaration"*)** %60, align 8
  %62 = call %"class.sh::TVector.31"* %61(%"class.sh::TIntermDeclaration"* nonnull %55) #7
  %63 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %62, i64 0, i32 0, i32 0, i32 1
  %64 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %63, align 8
  %65 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %64, i64 -1
  %66 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %65, align 8
  %67 = bitcast %"class.sh::TIntermNode"* %66 to %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)***
  %68 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %67, align 8
  %69 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %68, i64 13
  %70 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %69, align 8
  %71 = call %"class.sh::TIntermBinary"* %70(%"class.sh::TIntermNode"* %66) #7
  %72 = icmp eq %"class.sh::TIntermBinary"* %71, null
  br i1 %72, label %401, label %73

73:                                               ; preds = %57
  %74 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %71, i64 0, i32 2
  %75 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %74, align 8
  %76 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %75, i64 0, i32 0
  %77 = bitcast %"class.sh::TIntermTyped"* %75 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %78 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %77, align 8
  %79 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %78, i64 19
  %80 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %79, align 8
  %81 = call %"class.sh::TIntermSymbol"* %80(%"class.sh::TIntermNode"* %76) #7
  %82 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %71, i64 0, i32 3
  %83 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %82, align 8
  %84 = bitcast %"class.sh::TIntermTyped"* %83 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %85 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %84, align 8
  %86 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %85, i64 31
  %87 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %86, align 8
  %88 = call dereferenceable(184) %"class.sh::TType"* %87(%"class.sh::TIntermTyped"* %83) #7
  %89 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %88, i64 0, i32 2
  %90 = load i32, i32* %89, align 8
  %91 = icmp eq i32 %90, 2
  br i1 %91, label %92, label %98

92:                                               ; preds = %73
  %93 = bitcast %"class.sh::TIntermTyped"* %83 to i1 (%"class.sh::TIntermTyped"*)***
  %94 = load i1 (%"class.sh::TIntermTyped"*)**, i1 (%"class.sh::TIntermTyped"*)*** %93, align 8
  %95 = getelementptr inbounds i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %94, i64 28
  %96 = load i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %95, align 8
  %97 = call zeroext i1 %96(%"class.sh::TIntermTyped"* %83) #7
  br i1 %97, label %435, label %98

98:                                               ; preds = %92, %73
  %99 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %81, i64 0, i32 0
  %100 = bitcast %"class.sh::TIntermSymbol"* %81 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %101 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %100, align 8
  %102 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %101, i64 31
  %103 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %102, align 8
  %104 = call dereferenceable(184) %"class.sh::TType"* %103(%"class.sh::TIntermTyped"* %99) #7
  %105 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %104, i64 0, i32 2
  %106 = load i32, i32* %105, align 8
  %107 = icmp eq i32 %106, 2
  br i1 %107, label %108, label %164

108:                                              ; preds = %98
  %109 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %81, i64 0, i32 1
  %110 = bitcast %"class.sh::TVariable"** %109 to i64*
  %111 = load i64, i64* %110, align 8
  %112 = load %"class.sh::TVariable"**, %"class.sh::TVariable"*** %20, align 8
  %113 = load %"class.sh::TVariable"**, %"class.sh::TVariable"*** %21, align 8
  %114 = icmp ult %"class.sh::TVariable"** %112, %113
  %115 = ptrtoint %"class.sh::TVariable"** %113 to i64
  br i1 %114, label %116, label %120

116:                                              ; preds = %108
  %117 = bitcast %"class.sh::TVariable"** %112 to i64*
  store i64 %111, i64* %117, align 8
  %118 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %112, i64 1
  %119 = ptrtoint %"class.sh::TVariable"** %118 to i64
  store i64 %119, i64* %33, align 8
  br label %164

120:                                              ; preds = %108
  %121 = ptrtoint %"class.sh::TVariable"** %112 to i64
  %122 = load i64, i64* %34, align 8
  %123 = sub i64 %121, %122
  %124 = ashr exact i64 %123, 3
  %125 = add nsw i64 %124, 1
  %126 = icmp ugt i64 %125, 2305843009213693951
  br i1 %126, label %127, label %129

127:                                              ; preds = %120
  %128 = bitcast %"class.std::__1::vector.135"* %12 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %128) #8
  unreachable

129:                                              ; preds = %120
  %130 = sub i64 %115, %122
  %131 = ashr exact i64 %130, 3
  %132 = icmp ult i64 %131, 1152921504606846975
  br i1 %132, label %133, label %141

133:                                              ; preds = %129
  %134 = ashr exact i64 %130, 2
  %135 = icmp ult i64 %134, %125
  %136 = select i1 %135, i64 %125, i64 %134
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %146, label %138

138:                                              ; preds = %133
  %139 = icmp ugt i64 %136, 2305843009213693951
  br i1 %139, label %140, label %141

140:                                              ; preds = %138
  call void @abort() #8
  unreachable

141:                                              ; preds = %138, %129
  %142 = phi i64 [ %136, %138 ], [ 2305843009213693951, %129 ]
  %143 = shl i64 %142, 3
  %144 = call i8* @_Znwm(i64 %143) #9
  %145 = bitcast i8* %144 to %"class.sh::TVariable"**
  br label %146

146:                                              ; preds = %141, %133
  %147 = phi i64 [ %142, %141 ], [ 0, %133 ]
  %148 = phi i8* [ %144, %141 ], [ null, %133 ]
  %149 = phi %"class.sh::TVariable"** [ %145, %141 ], [ null, %133 ]
  %150 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %149, i64 %124
  %151 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %149, i64 %147
  %152 = ptrtoint %"class.sh::TVariable"** %151 to i64
  %153 = bitcast %"class.sh::TVariable"** %150 to i64*
  store i64 %111, i64* %153, align 8
  %154 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %150, i64 1
  %155 = ptrtoint %"class.sh::TVariable"** %154 to i64
  %156 = ptrtoint %"class.sh::TVariable"** %149 to i64
  %157 = icmp sgt i64 %123, 0
  br i1 %157, label %158, label %160

158:                                              ; preds = %146
  %159 = inttoptr i64 %122 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %148, i8* align 8 %159, i64 %123, i1 false) #7
  br label %160

160:                                              ; preds = %158, %146
  store i64 %156, i64* %34, align 8
  store i64 %155, i64* %33, align 8
  store i64 %152, i64* %35, align 8
  %161 = icmp eq i64 %122, 0
  br i1 %161, label %164, label %162

162:                                              ; preds = %160
  %163 = inttoptr i64 %122 to i8*
  call void @_ZdlPv(i8* %163) #9
  br label %164

164:                                              ; preds = %162, %160, %116, %98
  %165 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %166 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %165, i64 240) #7
  %167 = bitcast i8* %166 to %"class.sh::TIntermBinary"*
  %168 = bitcast %"class.sh::TIntermSymbol"* %81 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)***
  %169 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*** %168, align 8
  %170 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %169, i64 23
  %171 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %170, align 8
  %172 = call %"class.sh::TIntermTyped"* %171(%"class.sh::TIntermSymbol"* %81) #7
  %173 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %82, align 8
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %167, i8 zeroext -118, %"class.sh::TIntermTyped"* %172, %"class.sh::TIntermTyped"* %173) #7
  %174 = ptrtoint i8* %166 to i64
  %175 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %16, align 8
  %176 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 16
  %177 = icmp ult %"class.sh::TIntermNode"** %175, %176
  %178 = ptrtoint %"class.sh::TIntermNode"** %176 to i64
  br i1 %177, label %179, label %183

179:                                              ; preds = %164
  %180 = bitcast %"class.sh::TIntermNode"** %175 to i64*
  store i64 %174, i64* %180, align 8
  %181 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %175, i64 1
  %182 = ptrtoint %"class.sh::TIntermNode"** %181 to i64
  store i64 %182, i64* %36, align 8
  br label %393

183:                                              ; preds = %164
  %184 = ptrtoint %"class.sh::TIntermNode"** %175 to i64
  %185 = load i64, i64* %37, align 16
  %186 = sub i64 %184, %185
  %187 = ashr exact i64 %186, 3
  %188 = add nsw i64 %187, 1
  %189 = icmp ugt i64 %188, 2305843009213693951
  br i1 %189, label %190, label %192

190:                                              ; preds = %183
  %191 = bitcast %"class.sh::TVector.31"* %11 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %191) #8
  unreachable

192:                                              ; preds = %183
  %193 = sub i64 %178, %185
  %194 = ashr exact i64 %193, 3
  %195 = icmp ult i64 %194, 1152921504606846975
  br i1 %195, label %196, label %201

196:                                              ; preds = %192
  %197 = ashr exact i64 %193, 2
  %198 = icmp ult i64 %197, %188
  %199 = select i1 %198, i64 %188, i64 %197
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %207, label %201

201:                                              ; preds = %196, %192
  %202 = phi i64 [ %199, %196 ], [ 2305843009213693951, %192 ]
  %203 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %204 = shl i64 %202, 3
  %205 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %203, i64 %204) #7
  %206 = bitcast i8* %205 to %"class.sh::TIntermNode"**
  br label %207

207:                                              ; preds = %201, %196
  %208 = phi i64 [ %202, %201 ], [ 0, %196 ]
  %209 = phi %"class.sh::TIntermNode"** [ %206, %201 ], [ null, %196 ]
  %210 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %209, i64 %187
  %211 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %209, i64 %208
  %212 = ptrtoint %"class.sh::TIntermNode"** %211 to i64
  %213 = bitcast %"class.sh::TIntermNode"** %210 to i64*
  store i64 %174, i64* %213, align 8
  %214 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %210, i64 1
  %215 = ptrtoint %"class.sh::TIntermNode"** %214 to i64
  %216 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %15, align 16
  %217 = ptrtoint %"class.sh::TIntermNode"** %216 to i64
  %218 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %16, align 8
  %219 = icmp eq %"class.sh::TIntermNode"** %218, %216
  br i1 %219, label %390, label %220

220:                                              ; preds = %207
  %221 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 -1
  %222 = ptrtoint %"class.sh::TIntermNode"** %221 to i64
  %223 = sub i64 %222, %217
  %224 = lshr i64 %223, 3
  %225 = add nuw nsw i64 %224, 1
  %226 = icmp ult i64 %225, 4
  br i1 %226, label %320, label %227

227:                                              ; preds = %220
  %228 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %209, i64 -1
  %229 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 -1
  %230 = ptrtoint %"class.sh::TIntermNode"** %229 to i64
  %231 = sub i64 %230, %217
  %232 = lshr i64 %231, 3
  %233 = sub nsw i64 %187, %232
  %234 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %233
  %235 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 -1
  %236 = sub nsw i64 0, %232
  %237 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %235, i64 %236
  %238 = icmp ult %"class.sh::TIntermNode"** %234, %218
  %239 = icmp ult %"class.sh::TIntermNode"** %237, %210
  %240 = and i1 %238, %239
  br i1 %240, label %320, label %241

241:                                              ; preds = %227
  %242 = and i64 %225, 4611686018427387900
  %243 = sub nsw i64 0, %242
  %244 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %210, i64 %243
  %245 = sub nsw i64 0, %242
  %246 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 %245
  %247 = add nsw i64 %242, -4
  %248 = lshr exact i64 %247, 2
  %249 = add nuw nsw i64 %248, 1
  %250 = and i64 %249, 1
  %251 = icmp eq i64 %247, 0
  br i1 %251, label %296, label %252

252:                                              ; preds = %241
  %253 = sub nuw nsw i64 %249, %250
  %254 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %210, i64 -1
  %255 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 -1
  %256 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %210, i64 -1
  %257 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 -1
  br label %258

258:                                              ; preds = %258, %252
  %259 = phi i64 [ 0, %252 ], [ %293, %258 ]
  %260 = phi i64 [ %253, %252 ], [ %294, %258 ]
  %261 = sub i64 0, %259
  %262 = sub i64 0, %259
  %263 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %254, i64 %261
  %264 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 %262
  %265 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %264, i64 -1
  %266 = bitcast %"class.sh::TIntermNode"** %265 to <2 x i64>*
  %267 = load <2 x i64>, <2 x i64>* %266, align 8, !alias.scope !2
  %268 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %264, i64 -2
  %269 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %268, i64 -1
  %270 = bitcast %"class.sh::TIntermNode"** %269 to <2 x i64>*
  %271 = load <2 x i64>, <2 x i64>* %270, align 8, !alias.scope !2
  %272 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %263, i64 -1
  %273 = bitcast %"class.sh::TIntermNode"** %272 to <2 x i64>*
  store <2 x i64> %267, <2 x i64>* %273, align 8, !alias.scope !5, !noalias !2
  %274 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %263, i64 -2
  %275 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %274, i64 -1
  %276 = bitcast %"class.sh::TIntermNode"** %275 to <2 x i64>*
  store <2 x i64> %271, <2 x i64>* %276, align 8, !alias.scope !5, !noalias !2
  %277 = sub nuw nsw i64 -4, %259
  %278 = sub nuw nsw i64 -4, %259
  %279 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %256, i64 %277
  %280 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %257, i64 %278
  %281 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %280, i64 -1
  %282 = bitcast %"class.sh::TIntermNode"** %281 to <2 x i64>*
  %283 = load <2 x i64>, <2 x i64>* %282, align 8, !alias.scope !2
  %284 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %280, i64 -2
  %285 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %284, i64 -1
  %286 = bitcast %"class.sh::TIntermNode"** %285 to <2 x i64>*
  %287 = load <2 x i64>, <2 x i64>* %286, align 8, !alias.scope !2
  %288 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %279, i64 -1
  %289 = bitcast %"class.sh::TIntermNode"** %288 to <2 x i64>*
  store <2 x i64> %283, <2 x i64>* %289, align 8, !alias.scope !5, !noalias !2
  %290 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %279, i64 -2
  %291 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %290, i64 -1
  %292 = bitcast %"class.sh::TIntermNode"** %291 to <2 x i64>*
  store <2 x i64> %287, <2 x i64>* %292, align 8, !alias.scope !5, !noalias !2
  %293 = add i64 %259, 8
  %294 = add i64 %260, -2
  %295 = icmp eq i64 %294, 0
  br i1 %295, label %296, label %258, !llvm.loop !7

296:                                              ; preds = %258, %241
  %297 = phi i64 [ 0, %241 ], [ %293, %258 ]
  %298 = icmp eq i64 %250, 0
  br i1 %298, label %318, label %299

299:                                              ; preds = %296
  %300 = sub i64 0, %297
  %301 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %210, i64 -1
  %302 = sub i64 0, %297
  %303 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 -1
  %304 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %301, i64 %300
  %305 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %303, i64 %302
  %306 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %305, i64 -1
  %307 = bitcast %"class.sh::TIntermNode"** %306 to <2 x i64>*
  %308 = load <2 x i64>, <2 x i64>* %307, align 8, !alias.scope !2
  %309 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %305, i64 -2
  %310 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %309, i64 -1
  %311 = bitcast %"class.sh::TIntermNode"** %310 to <2 x i64>*
  %312 = load <2 x i64>, <2 x i64>* %311, align 8, !alias.scope !2
  %313 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %304, i64 -1
  %314 = bitcast %"class.sh::TIntermNode"** %313 to <2 x i64>*
  store <2 x i64> %308, <2 x i64>* %314, align 8, !alias.scope !5, !noalias !2
  %315 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %304, i64 -2
  %316 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %315, i64 -1
  %317 = bitcast %"class.sh::TIntermNode"** %316 to <2 x i64>*
  store <2 x i64> %312, <2 x i64>* %317, align 8, !alias.scope !5, !noalias !2
  br label %318

318:                                              ; preds = %296, %299
  %319 = icmp eq i64 %225, %242
  br i1 %319, label %390, label %320

320:                                              ; preds = %318, %227, %220
  %321 = phi %"class.sh::TIntermNode"** [ %210, %227 ], [ %210, %220 ], [ %244, %318 ]
  %322 = phi %"class.sh::TIntermNode"** [ %218, %227 ], [ %218, %220 ], [ %246, %318 ]
  %323 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %322, i64 -1
  %324 = ptrtoint %"class.sh::TIntermNode"** %323 to i64
  %325 = sub i64 %324, %217
  %326 = lshr i64 %325, 3
  %327 = add nuw nsw i64 %326, 1
  %328 = and i64 %327, 7
  %329 = icmp eq i64 %328, 0
  br i1 %329, label %341, label %330

330:                                              ; preds = %320, %330
  %331 = phi %"class.sh::TIntermNode"** [ %334, %330 ], [ %321, %320 ]
  %332 = phi %"class.sh::TIntermNode"** [ %335, %330 ], [ %322, %320 ]
  %333 = phi i64 [ %339, %330 ], [ %328, %320 ]
  %334 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %331, i64 -1
  %335 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %332, i64 -1
  %336 = bitcast %"class.sh::TIntermNode"** %335 to i64*
  %337 = load i64, i64* %336, align 8
  %338 = bitcast %"class.sh::TIntermNode"** %334 to i64*
  store i64 %337, i64* %338, align 8
  %339 = add i64 %333, -1
  %340 = icmp eq i64 %339, 0
  br i1 %340, label %341, label %330, !llvm.loop !9

341:                                              ; preds = %330, %320
  %342 = phi %"class.sh::TIntermNode"** [ undef, %320 ], [ %334, %330 ]
  %343 = phi %"class.sh::TIntermNode"** [ %321, %320 ], [ %334, %330 ]
  %344 = phi %"class.sh::TIntermNode"** [ %322, %320 ], [ %335, %330 ]
  %345 = icmp ult i64 %325, 56
  br i1 %345, label %390, label %346

346:                                              ; preds = %341, %346
  %347 = phi %"class.sh::TIntermNode"** [ %384, %346 ], [ %343, %341 ]
  %348 = phi %"class.sh::TIntermNode"** [ %385, %346 ], [ %344, %341 ]
  %349 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %347, i64 -1
  %350 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %348, i64 -1
  %351 = bitcast %"class.sh::TIntermNode"** %350 to i64*
  %352 = load i64, i64* %351, align 8
  %353 = bitcast %"class.sh::TIntermNode"** %349 to i64*
  store i64 %352, i64* %353, align 8
  %354 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %347, i64 -2
  %355 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %348, i64 -2
  %356 = bitcast %"class.sh::TIntermNode"** %355 to i64*
  %357 = load i64, i64* %356, align 8
  %358 = bitcast %"class.sh::TIntermNode"** %354 to i64*
  store i64 %357, i64* %358, align 8
  %359 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %347, i64 -3
  %360 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %348, i64 -3
  %361 = bitcast %"class.sh::TIntermNode"** %360 to i64*
  %362 = load i64, i64* %361, align 8
  %363 = bitcast %"class.sh::TIntermNode"** %359 to i64*
  store i64 %362, i64* %363, align 8
  %364 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %347, i64 -4
  %365 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %348, i64 -4
  %366 = bitcast %"class.sh::TIntermNode"** %365 to i64*
  %367 = load i64, i64* %366, align 8
  %368 = bitcast %"class.sh::TIntermNode"** %364 to i64*
  store i64 %367, i64* %368, align 8
  %369 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %347, i64 -5
  %370 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %348, i64 -5
  %371 = bitcast %"class.sh::TIntermNode"** %370 to i64*
  %372 = load i64, i64* %371, align 8
  %373 = bitcast %"class.sh::TIntermNode"** %369 to i64*
  store i64 %372, i64* %373, align 8
  %374 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %347, i64 -6
  %375 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %348, i64 -6
  %376 = bitcast %"class.sh::TIntermNode"** %375 to i64*
  %377 = load i64, i64* %376, align 8
  %378 = bitcast %"class.sh::TIntermNode"** %374 to i64*
  store i64 %377, i64* %378, align 8
  %379 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %347, i64 -7
  %380 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %348, i64 -7
  %381 = bitcast %"class.sh::TIntermNode"** %380 to i64*
  %382 = load i64, i64* %381, align 8
  %383 = bitcast %"class.sh::TIntermNode"** %379 to i64*
  store i64 %382, i64* %383, align 8
  %384 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %347, i64 -8
  %385 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %348, i64 -8
  %386 = bitcast %"class.sh::TIntermNode"** %385 to i64*
  %387 = load i64, i64* %386, align 8
  %388 = bitcast %"class.sh::TIntermNode"** %384 to i64*
  store i64 %387, i64* %388, align 8
  %389 = icmp eq %"class.sh::TIntermNode"** %385, %216
  br i1 %389, label %390, label %346, !llvm.loop !11

390:                                              ; preds = %341, %346, %318, %207
  %391 = phi %"class.sh::TIntermNode"** [ %210, %207 ], [ %244, %318 ], [ %342, %341 ], [ %384, %346 ]
  %392 = ptrtoint %"class.sh::TIntermNode"** %391 to i64
  store i64 %392, i64* %37, align 16
  store i64 %215, i64* %36, align 8
  store i64 %212, i64* %38, align 16
  br label %393

393:                                              ; preds = %390, %179
  %394 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %71, i64 0, i32 0, i32 0, i32 0, i32 0
  %395 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %81, i64 0, i32 0, i32 0
  %396 = bitcast %"class.sh::TIntermDeclaration"* %55 to i1 (%"class.sh::TIntermDeclaration"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)***
  %397 = load i1 (%"class.sh::TIntermDeclaration"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)**, i1 (%"class.sh::TIntermDeclaration"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)*** %396, align 8
  %398 = getelementptr inbounds i1 (%"class.sh::TIntermDeclaration"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)*, i1 (%"class.sh::TIntermDeclaration"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)** %397, i64 26
  %399 = load i1 (%"class.sh::TIntermDeclaration"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)*, i1 (%"class.sh::TIntermDeclaration"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)** %398, align 8
  %400 = call zeroext i1 %399(%"class.sh::TIntermDeclaration"* nonnull %55, %"class.sh::TIntermNode"* %394, %"class.sh::TIntermNode"* %395) #7
  br label %435

401:                                              ; preds = %57
  br i1 %2, label %402, label %435

402:                                              ; preds = %401
  %403 = bitcast %"class.sh::TIntermNode"* %66 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %404 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %403, align 8
  %405 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %404, i64 19
  %406 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %405, align 8
  %407 = call %"class.sh::TIntermSymbol"* %406(%"class.sh::TIntermNode"* %66) #7
  %408 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %407, i64 0, i32 1
  %409 = bitcast %"class.sh::TVariable"** %408 to %"class.sh::TSymbol"**
  %410 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %409, align 8
  %411 = getelementptr inbounds %"class.sh::TSymbol", %"class.sh::TSymbol"* %410, i64 0, i32 2
  %412 = load i8, i8* %411, align 4
  %413 = and i8 %412, -2
  %414 = icmp eq i8 %413, 2
  br i1 %414, label %435, label %415

415:                                              ; preds = %402
  %416 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %407, i64 0, i32 0
  %417 = bitcast %"class.sh::TIntermSymbol"* %407 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %418 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %417, align 8
  %419 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %418, i64 31
  %420 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %419, align 8
  %421 = call dereferenceable(184) %"class.sh::TType"* %420(%"class.sh::TIntermTyped"* %416) #7
  %422 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %421, i64 0, i32 2
  %423 = load i32, i32* %422, align 8
  %424 = icmp eq i32 %423, 1
  br i1 %424, label %425, label %435

425:                                              ; preds = %415
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %39) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %39, i8 0, i64 24, i1 false) #7
  call void @_ZN2sh14CreateInitCodeEPKNS_12TIntermTypedEbbPNS_7TVectorIPNS_11TIntermNodeEEEPNS_12TSymbolTableE(%"class.sh::TIntermTyped"* %416, i1 zeroext %3, i1 zeroext %4, %"class.sh::TVector.31"* nonnull %7, %"class.sh::TSymbolTable"* %5) #7
  %426 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %16, align 8
  %427 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %40, align 8
  %428 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %41, align 8
  %429 = call %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertINS_11__wrap_iterIPS3_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISC_E9referenceEEE5valueESA_E4typeENS8_IPKS3_EESC_SC_(%"class.std::__1::vector.32"* nonnull %42, %"class.sh::TIntermNode"** %426, %"class.sh::TIntermNode"** %427, %"class.sh::TIntermNode"** %428) #7
  %430 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %40, align 8
  %431 = icmp eq %"class.sh::TIntermNode"** %430, null
  br i1 %431, label %434, label %432

432:                                              ; preds = %425
  %433 = ptrtoint %"class.sh::TIntermNode"** %430 to i64
  store i64 %433, i64* %43, align 8
  br label %434

434:                                              ; preds = %432, %425
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %39) #7
  br label %435

435:                                              ; preds = %434, %415, %402, %401, %393, %92, %48
  %436 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %49, i64 1
  %437 = icmp eq %"class.sh::TIntermNode"** %436, %30
  br i1 %437, label %44, label %48

438:                                              ; preds = %44
  %439 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %440 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %439, i64 64) #7
  %441 = bitcast i8* %440 to %"class.sh::TIntermBlock"*
  %442 = bitcast i8* %440 to i32 (...)***
  %443 = getelementptr inbounds i8, i8* %440, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %443, i8 0, i64 16, i1 false) #7
  %444 = getelementptr inbounds i8, i8* %440, i64 24
  %445 = bitcast i8* %444 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %442, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %445, align 8
  %446 = getelementptr inbounds i8, i8* %440, i64 32
  call void @llvm.memset.p0i8.i64(i8* align 8 %446, i8 0, i64 25, i1 false) #7
  %447 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 29) to %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)**), align 8
  %448 = call %"class.sh::TVector.31"* %447(%"class.sh::TIntermBlock"* %441) #7
  %449 = bitcast %"class.sh::TVector.31"* %448 to i64*
  %450 = bitcast %"class.sh::TVector.31"* %11 to i64*
  %451 = load i64, i64* %450, align 16
  %452 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %448, i64 0, i32 0, i32 0, i32 1
  %453 = bitcast %"class.sh::TIntermNode"*** %452 to i64*
  %454 = bitcast %"class.sh::TVector.31"* %448 to <2 x i64>*
  %455 = load <2 x i64>, <2 x i64>* %454, align 8
  store i64 %451, i64* %449, align 8
  %456 = bitcast %"class.sh::TIntermNode"*** %16 to i64*
  %457 = load i64, i64* %456, align 8
  store i64 %457, i64* %453, align 8
  %458 = bitcast %"class.sh::TVector.31"* %11 to <2 x i64>*
  store <2 x i64> %455, <2 x i64>* %458, align 16
  %459 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %448, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %460 = bitcast %"class.sh::TIntermNode"*** %459 to i64*
  %461 = load i64, i64* %460, align 8
  %462 = bitcast %"class.sh::TIntermNode"*** %17 to i64*
  %463 = load i64, i64* %462, align 16
  store i64 %463, i64* %460, align 8
  store i64 %461, i64* %462, align 16
  %464 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %465 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %464, i64 80) #7
  %466 = bitcast i8* %465 to %"class.sh::TFunction"*
  call void @_ZN2sh9TFunctionC1EPNS_12TSymbolTableERKNS_15ImmutableStringENS_10SymbolTypeEPKNS_5TTypeEb(%"class.sh::TFunction"* %466, %"class.sh::TSymbolTable"* %5, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_118kInitGlobalsStringE, i8 zeroext 2, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE0ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*), i1 zeroext false) #7
  %467 = call %"class.sh::TIntermFunctionPrototype"* @_ZN2sh35CreateInternalFunctionPrototypeNodeERKNS_9TFunctionE(%"class.sh::TFunction"* dereferenceable(80) %466) #7
  %468 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*** %22, align 8
  %469 = getelementptr inbounds %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %468, i64 27
  %470 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %469, align 8
  %471 = call %"class.sh::TVector.31"* %470(%"class.sh::TIntermBlock"* %1) #7
  %472 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %471, i64 0, i32 0
  %473 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*** %22, align 8
  %474 = getelementptr inbounds %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %473, i64 27
  %475 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %474, align 8
  %476 = call %"class.sh::TVector.31"* %475(%"class.sh::TIntermBlock"* %1) #7
  %477 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %476, i64 0, i32 0, i32 0, i32 0
  %478 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %477, align 8
  %479 = bitcast %"class.sh::TIntermNode"** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %479) #7
  %480 = getelementptr inbounds %"class.sh::TIntermFunctionPrototype", %"class.sh::TIntermFunctionPrototype"* %467, i64 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %480, %"class.sh::TIntermNode"** %8, align 8
  %481 = call %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertENS_11__wrap_iterIPKS3_EEOS3_(%"class.std::__1::vector.32"* %472, %"class.sh::TIntermNode"** %478, %"class.sh::TIntermNode"** nonnull dereferenceable(8) %8) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %479) #7
  %482 = call %"class.sh::TIntermFunctionDefinition"* @_ZN2sh36CreateInternalFunctionDefinitionNodeERKNS_9TFunctionEPNS_12TIntermBlockE(%"class.sh::TFunction"* dereferenceable(80) %466, %"class.sh::TIntermBlock"* %441) #7
  %483 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition", %"class.sh::TIntermFunctionDefinition"* %482, i64 0, i32 0
  call void @_ZN2sh12TIntermBlock15appendStatementEPNS_11TIntermNodeE(%"class.sh::TIntermBlock"* %1, %"class.sh::TIntermNode"* %483) #7
  %484 = bitcast %"class.sh::TVector.31"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %484) #7
  %485 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %9, i64 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %484, i8 0, i64 24, i1 false) #7
  %486 = call %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate18CreateFunctionCallERKNS_9TFunctionEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TFunction"* dereferenceable(80) %466, %"class.sh::TVector.31"* nonnull %9) #7
  %487 = call %"class.sh::TIntermBlock"* @_ZN2sh12FindMainBodyEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"* %1) #7
  %488 = bitcast %"class.sh::TIntermBlock"* %487 to %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)***
  %489 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*** %488, align 8
  %490 = getelementptr inbounds %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %489, i64 27
  %491 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %490, align 8
  %492 = call %"class.sh::TVector.31"* %491(%"class.sh::TIntermBlock"* %487) #7
  %493 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %492, i64 0, i32 0
  %494 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*** %488, align 8
  %495 = getelementptr inbounds %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %494, i64 27
  %496 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %495, align 8
  %497 = call %"class.sh::TVector.31"* %496(%"class.sh::TIntermBlock"* %487) #7
  %498 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %497, i64 0, i32 0, i32 0, i32 0
  %499 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %498, align 8
  %500 = bitcast %"class.sh::TIntermNode"** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %500) #7
  %501 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %486, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %501, %"class.sh::TIntermNode"** %10, align 8
  %502 = call %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertENS_11__wrap_iterIPKS3_EEOS3_(%"class.std::__1::vector.32"* %493, %"class.sh::TIntermNode"** %499, %"class.sh::TIntermNode"** nonnull dereferenceable(8) %10) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %500) #7
  %503 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %485, align 8
  %504 = icmp eq %"class.sh::TIntermNode"** %503, null
  br i1 %504, label %509, label %505

505:                                              ; preds = %438
  %506 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %9, i64 0, i32 0, i32 0, i32 1
  %507 = ptrtoint %"class.sh::TIntermNode"** %503 to i64
  %508 = bitcast %"class.sh::TIntermNode"*** %506 to i64*
  store i64 %507, i64* %508, align 8
  br label %509

509:                                              ; preds = %438, %505
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %484) #7
  br label %510

510:                                              ; preds = %6, %509, %44
  %511 = load %"class.sh::TVariable"**, %"class.sh::TVariable"*** %19, align 8
  %512 = load %"class.sh::TVariable"**, %"class.sh::TVariable"*** %20, align 8
  %513 = icmp eq %"class.sh::TVariable"** %511, %512
  br i1 %513, label %544, label %514

514:                                              ; preds = %510
  %515 = bitcast %"class.sh::ImmutableString"* %13 to i8*
  %516 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %13, i64 0, i32 0
  %517 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %13, i64 0, i32 1
  br label %520

518:                                              ; preds = %520
  %519 = icmp eq %"class.sh::TVariable"** %540, %512
  br i1 %519, label %541, label %520

520:                                              ; preds = %514, %518
  %521 = phi %"class.sh::TVariable"** [ %511, %514 ], [ %540, %518 ]
  %522 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %521, align 8
  %523 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %524 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %523, i64 184) #7
  %525 = bitcast i8* %524 to %"class.sh::TType"*
  %526 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %522, i64 0, i32 1
  %527 = load %"class.sh::TType"*, %"class.sh::TType"** %526, align 8
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %525, %"class.sh::TType"* dereferenceable(184) %527) #7
  %528 = getelementptr inbounds i8, i8* %524, i64 8
  %529 = bitcast i8* %528 to i32*
  store i32 1, i32* %529, align 8
  %530 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %531 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %530, i64 40) #7
  %532 = bitcast i8* %531 to %"class.sh::TVariable"*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %515) #7
  %533 = bitcast %"class.sh::TVariable"* %522 to %"class.sh::TSymbol"*
  %534 = call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %533) #7
  %535 = extractvalue { i8*, i64 } %534, 0
  store i8* %535, i8** %516, align 8
  %536 = extractvalue { i8*, i64 } %534, 1
  store i64 %536, i64* %517, align 8
  %537 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %522, i64 0, i32 0, i32 2
  %538 = load i8, i8* %537, align 4
  call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %532, %"class.sh::TSymbolTable"* %5, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %13, %"class.sh::TType"* %525, i8 zeroext %538, i8 zeroext 0) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %515) #7
  %539 = call zeroext i1 @_ZN2sh15ReplaceVariableEPNS_9TCompilerEPNS_12TIntermBlockEPKNS_9TVariableES6_(%"class.sh::TCompiler"* %0, %"class.sh::TIntermBlock"* %1, %"class.sh::TVariable"* %522, %"class.sh::TVariable"* %532) #7
  %540 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %521, i64 1
  br i1 %539, label %518, label %541

541:                                              ; preds = %518, %520
  %542 = phi i1 [ false, %520 ], [ true, %518 ]
  %543 = load %"class.sh::TVariable"**, %"class.sh::TVariable"*** %19, align 8
  br label %544

544:                                              ; preds = %541, %510
  %545 = phi %"class.sh::TVariable"** [ %511, %510 ], [ %543, %541 ]
  %546 = phi i1 [ true, %510 ], [ %542, %541 ]
  %547 = icmp eq %"class.sh::TVariable"** %545, null
  br i1 %547, label %552, label %548

548:                                              ; preds = %544
  %549 = ptrtoint %"class.sh::TVariable"** %545 to i64
  %550 = bitcast %"class.sh::TVariable"*** %20 to i64*
  store i64 %549, i64* %550, align 8
  %551 = bitcast %"class.sh::TVariable"** %545 to i8*
  call void @_ZdlPv(i8* %551) #9
  br label %552

552:                                              ; preds = %544, %548
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #7
  %553 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %15, align 16
  %554 = icmp eq %"class.sh::TIntermNode"** %553, null
  br i1 %554, label %558, label %555

555:                                              ; preds = %552
  %556 = ptrtoint %"class.sh::TIntermNode"** %553 to i64
  %557 = bitcast %"class.sh::TIntermNode"*** %16 to i64*
  store i64 %556, i64* %557, align 8
  br label %558

558:                                              ; preds = %552, %555
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #7
  ret i1 %546
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"*, %"class.sh::TType"* dereferenceable(184)) unnamed_addr #2

declare { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"*) local_unnamed_addr #2

declare void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"*, %"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::TType"*, i8 zeroext, i8 zeroext) unnamed_addr #2

declare zeroext i1 @_ZN2sh15ReplaceVariableEPNS_9TCompilerEPNS_12TIntermBlockEPKNS_9TVariableES6_(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TVariable"*, %"class.sh::TVariable"*) local_unnamed_addr #2

declare void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #2

declare void @_ZN2sh14CreateInitCodeEPKNS_12TIntermTypedEbbPNS_7TVectorIPNS_11TIntermNodeEEEPNS_12TSymbolTableE(%"class.sh::TIntermTyped"*, i1 zeroext, i1 zeroext, %"class.sh::TVector.31"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertINS_11__wrap_iterIPS3_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISC_E9referenceEEE5valueESA_E4typeENS8_IPKS3_EESC_SC_(%"class.std::__1::vector.32"*, %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**) local_unnamed_addr #0 comdat align 2 {
  %5 = bitcast %"class.sh::TIntermNode"** %1 to i8*
  %6 = ptrtoint %"class.sh::TIntermNode"** %1 to i64
  %7 = ptrtoint %"class.sh::TIntermNode"** %2 to i64
  %8 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 0
  %9 = ptrtoint %"class.sh::TIntermNode"** %3 to i64
  %10 = sub i64 %9, %7
  %11 = ashr exact i64 %10, 3
  %12 = icmp sgt i64 %10, 0
  br i1 %12, label %13, label %834

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %15 = bitcast %"class.sh::TIntermNode"*** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 1
  %18 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %19 = ptrtoint %"class.sh::TIntermNode"** %18 to i64
  %20 = sub i64 %16, %19
  %21 = ashr exact i64 %20, 3
  %22 = icmp sgt i64 %11, %21
  %23 = bitcast %"class.sh::TIntermNode"*** %17 to i64*
  br i1 %22, label %359, label %24

24:                                               ; preds = %13
  %25 = sub i64 %19, %6
  %26 = ashr exact i64 %25, 3
  %27 = icmp sgt i64 %11, %26
  br i1 %27, label %28, label %213

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %26
  %30 = icmp eq %"class.sh::TIntermNode"** %29, %3
  br i1 %30, label %208, label %31

31:                                               ; preds = %28
  %32 = xor i64 %26, -1
  %33 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %3, i64 %32
  %34 = ptrtoint %"class.sh::TIntermNode"** %33 to i64
  %35 = sub i64 %34, %7
  %36 = lshr i64 %35, 3
  %37 = add nuw nsw i64 %36, 1
  %38 = icmp ult i64 %37, 4
  br i1 %38, label %134, label %39

39:                                               ; preds = %31
  %40 = xor i64 %26, -1
  %41 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %3, i64 %40
  %42 = ptrtoint %"class.sh::TIntermNode"** %41 to i64
  %43 = sub i64 %42, %7
  %44 = lshr i64 %43, 3
  %45 = add nuw nsw i64 %44, 1
  %46 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %45
  %47 = add nsw i64 %26, %44
  %48 = add nsw i64 %47, 1
  %49 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %48
  %50 = icmp ult %"class.sh::TIntermNode"** %18, %49
  %51 = icmp ult %"class.sh::TIntermNode"** %29, %46
  %52 = and i1 %50, %51
  br i1 %52, label %134, label %53

53:                                               ; preds = %39
  %54 = and i64 %37, 4611686018427387900
  %55 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %54
  %56 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %54
  %57 = add nsw i64 %54, -4
  %58 = lshr exact i64 %57, 2
  %59 = add nuw nsw i64 %58, 1
  %60 = and i64 %59, 3
  %61 = icmp ult i64 %57, 12
  br i1 %61, label %113, label %62

62:                                               ; preds = %53
  %63 = sub nsw i64 %59, %60
  br label %64

64:                                               ; preds = %64, %62
  %65 = phi i64 [ 0, %62 ], [ %110, %64 ]
  %66 = phi i64 [ %63, %62 ], [ %111, %64 ]
  %67 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %65
  %68 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %65
  %69 = bitcast %"class.sh::TIntermNode"** %68 to <2 x i64>*
  %70 = load <2 x i64>, <2 x i64>* %69, align 8, !alias.scope !12
  %71 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %68, i64 2
  %72 = bitcast %"class.sh::TIntermNode"** %71 to <2 x i64>*
  %73 = load <2 x i64>, <2 x i64>* %72, align 8, !alias.scope !12
  %74 = bitcast %"class.sh::TIntermNode"** %67 to <2 x i64>*
  store <2 x i64> %70, <2 x i64>* %74, align 8, !alias.scope !15, !noalias !12
  %75 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %67, i64 2
  %76 = bitcast %"class.sh::TIntermNode"** %75 to <2 x i64>*
  store <2 x i64> %73, <2 x i64>* %76, align 8, !alias.scope !15, !noalias !12
  %77 = or i64 %65, 4
  %78 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %77
  %79 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %77
  %80 = bitcast %"class.sh::TIntermNode"** %79 to <2 x i64>*
  %81 = load <2 x i64>, <2 x i64>* %80, align 8, !alias.scope !12
  %82 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %79, i64 2
  %83 = bitcast %"class.sh::TIntermNode"** %82 to <2 x i64>*
  %84 = load <2 x i64>, <2 x i64>* %83, align 8, !alias.scope !12
  %85 = bitcast %"class.sh::TIntermNode"** %78 to <2 x i64>*
  store <2 x i64> %81, <2 x i64>* %85, align 8, !alias.scope !15, !noalias !12
  %86 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %78, i64 2
  %87 = bitcast %"class.sh::TIntermNode"** %86 to <2 x i64>*
  store <2 x i64> %84, <2 x i64>* %87, align 8, !alias.scope !15, !noalias !12
  %88 = or i64 %65, 8
  %89 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %88
  %90 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %88
  %91 = bitcast %"class.sh::TIntermNode"** %90 to <2 x i64>*
  %92 = load <2 x i64>, <2 x i64>* %91, align 8, !alias.scope !12
  %93 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %90, i64 2
  %94 = bitcast %"class.sh::TIntermNode"** %93 to <2 x i64>*
  %95 = load <2 x i64>, <2 x i64>* %94, align 8, !alias.scope !12
  %96 = bitcast %"class.sh::TIntermNode"** %89 to <2 x i64>*
  store <2 x i64> %92, <2 x i64>* %96, align 8, !alias.scope !15, !noalias !12
  %97 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %89, i64 2
  %98 = bitcast %"class.sh::TIntermNode"** %97 to <2 x i64>*
  store <2 x i64> %95, <2 x i64>* %98, align 8, !alias.scope !15, !noalias !12
  %99 = or i64 %65, 12
  %100 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %99
  %101 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %99
  %102 = bitcast %"class.sh::TIntermNode"** %101 to <2 x i64>*
  %103 = load <2 x i64>, <2 x i64>* %102, align 8, !alias.scope !12
  %104 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %101, i64 2
  %105 = bitcast %"class.sh::TIntermNode"** %104 to <2 x i64>*
  %106 = load <2 x i64>, <2 x i64>* %105, align 8, !alias.scope !12
  %107 = bitcast %"class.sh::TIntermNode"** %100 to <2 x i64>*
  store <2 x i64> %103, <2 x i64>* %107, align 8, !alias.scope !15, !noalias !12
  %108 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %100, i64 2
  %109 = bitcast %"class.sh::TIntermNode"** %108 to <2 x i64>*
  store <2 x i64> %106, <2 x i64>* %109, align 8, !alias.scope !15, !noalias !12
  %110 = add i64 %65, 16
  %111 = add i64 %66, -4
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %64, !llvm.loop !17

113:                                              ; preds = %64, %53
  %114 = phi i64 [ 0, %53 ], [ %110, %64 ]
  %115 = icmp eq i64 %60, 0
  br i1 %115, label %132, label %116

116:                                              ; preds = %113, %116
  %117 = phi i64 [ %129, %116 ], [ %114, %113 ]
  %118 = phi i64 [ %130, %116 ], [ %60, %113 ]
  %119 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %117
  %120 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %117
  %121 = bitcast %"class.sh::TIntermNode"** %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 8, !alias.scope !12
  %123 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %120, i64 2
  %124 = bitcast %"class.sh::TIntermNode"** %123 to <2 x i64>*
  %125 = load <2 x i64>, <2 x i64>* %124, align 8, !alias.scope !12
  %126 = bitcast %"class.sh::TIntermNode"** %119 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %126, align 8, !alias.scope !15, !noalias !12
  %127 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 2
  %128 = bitcast %"class.sh::TIntermNode"** %127 to <2 x i64>*
  store <2 x i64> %125, <2 x i64>* %128, align 8, !alias.scope !15, !noalias !12
  %129 = add i64 %117, 4
  %130 = add i64 %118, -1
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %116, !llvm.loop !18

132:                                              ; preds = %116, %113
  %133 = icmp eq i64 %37, %54
  br i1 %133, label %205, label %134

134:                                              ; preds = %132, %39, %31
  %135 = phi %"class.sh::TIntermNode"** [ %18, %39 ], [ %18, %31 ], [ %55, %132 ]
  %136 = phi %"class.sh::TIntermNode"** [ %29, %39 ], [ %29, %31 ], [ %56, %132 ]
  %137 = ptrtoint %"class.sh::TIntermNode"** %136 to i64
  %138 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %3, i64 -1
  %139 = ptrtoint %"class.sh::TIntermNode"** %138 to i64
  %140 = sub i64 %139, %137
  %141 = lshr i64 %140, 3
  %142 = add nuw nsw i64 %141, 1
  %143 = and i64 %142, 7
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %156, label %145

145:                                              ; preds = %134, %145
  %146 = phi %"class.sh::TIntermNode"** [ %153, %145 ], [ %135, %134 ]
  %147 = phi %"class.sh::TIntermNode"** [ %152, %145 ], [ %136, %134 ]
  %148 = phi i64 [ %154, %145 ], [ %143, %134 ]
  %149 = bitcast %"class.sh::TIntermNode"** %146 to i64*
  %150 = bitcast %"class.sh::TIntermNode"** %147 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %147, i64 1
  %153 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %146, i64 1
  %154 = add i64 %148, -1
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %145, !llvm.loop !19

156:                                              ; preds = %145, %134
  %157 = phi %"class.sh::TIntermNode"** [ undef, %134 ], [ %153, %145 ]
  %158 = phi %"class.sh::TIntermNode"** [ %135, %134 ], [ %153, %145 ]
  %159 = phi %"class.sh::TIntermNode"** [ %136, %134 ], [ %152, %145 ]
  %160 = icmp ult i64 %140, 56
  br i1 %160, label %205, label %161

161:                                              ; preds = %156, %161
  %162 = phi %"class.sh::TIntermNode"** [ %203, %161 ], [ %158, %156 ]
  %163 = phi %"class.sh::TIntermNode"** [ %202, %161 ], [ %159, %156 ]
  %164 = bitcast %"class.sh::TIntermNode"** %162 to i64*
  %165 = bitcast %"class.sh::TIntermNode"** %163 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %164, align 8
  %167 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 1
  %168 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 1
  %169 = bitcast %"class.sh::TIntermNode"** %168 to i64*
  %170 = bitcast %"class.sh::TIntermNode"** %167 to i64*
  %171 = load i64, i64* %170, align 8
  store i64 %171, i64* %169, align 8
  %172 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 2
  %173 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 2
  %174 = bitcast %"class.sh::TIntermNode"** %173 to i64*
  %175 = bitcast %"class.sh::TIntermNode"** %172 to i64*
  %176 = load i64, i64* %175, align 8
  store i64 %176, i64* %174, align 8
  %177 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 3
  %178 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 3
  %179 = bitcast %"class.sh::TIntermNode"** %178 to i64*
  %180 = bitcast %"class.sh::TIntermNode"** %177 to i64*
  %181 = load i64, i64* %180, align 8
  store i64 %181, i64* %179, align 8
  %182 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 4
  %183 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 4
  %184 = bitcast %"class.sh::TIntermNode"** %183 to i64*
  %185 = bitcast %"class.sh::TIntermNode"** %182 to i64*
  %186 = load i64, i64* %185, align 8
  store i64 %186, i64* %184, align 8
  %187 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 5
  %188 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 5
  %189 = bitcast %"class.sh::TIntermNode"** %188 to i64*
  %190 = bitcast %"class.sh::TIntermNode"** %187 to i64*
  %191 = load i64, i64* %190, align 8
  store i64 %191, i64* %189, align 8
  %192 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 6
  %193 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 6
  %194 = bitcast %"class.sh::TIntermNode"** %193 to i64*
  %195 = bitcast %"class.sh::TIntermNode"** %192 to i64*
  %196 = load i64, i64* %195, align 8
  store i64 %196, i64* %194, align 8
  %197 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 7
  %198 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 7
  %199 = bitcast %"class.sh::TIntermNode"** %198 to i64*
  %200 = bitcast %"class.sh::TIntermNode"** %197 to i64*
  %201 = load i64, i64* %200, align 8
  store i64 %201, i64* %199, align 8
  %202 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 8
  %203 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 8
  %204 = icmp eq %"class.sh::TIntermNode"** %202, %3
  br i1 %204, label %205, label %161, !llvm.loop !20

205:                                              ; preds = %156, %161, %132
  %206 = phi %"class.sh::TIntermNode"** [ %55, %132 ], [ %157, %156 ], [ %203, %161 ]
  %207 = ptrtoint %"class.sh::TIntermNode"** %206 to i64
  br label %208

208:                                              ; preds = %205, %28
  %209 = phi i64 [ %19, %28 ], [ %207, %205 ]
  store i64 %209, i64* %23, align 8
  %210 = icmp sgt i64 %25, 0
  br i1 %210, label %211, label %834

211:                                              ; preds = %208
  %212 = inttoptr i64 %209 to %"class.sh::TIntermNode"**
  br label %213

213:                                              ; preds = %211, %24
  %214 = phi i64 [ %209, %211 ], [ %19, %24 ]
  %215 = phi %"class.sh::TIntermNode"** [ %212, %211 ], [ %18, %24 ]
  %216 = phi %"class.sh::TIntermNode"** [ %29, %211 ], [ %3, %24 ]
  %217 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %11
  %218 = ptrtoint %"class.sh::TIntermNode"** %217 to i64
  %219 = sub i64 %214, %218
  %220 = ashr exact i64 %219, 3
  %221 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %220
  %222 = icmp ult %"class.sh::TIntermNode"** %221, %18
  br i1 %222, label %223, label %336

223:                                              ; preds = %213
  %224 = sub nsw i64 0, %220
  %225 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %224
  %226 = bitcast %"class.sh::TIntermNode"** %225 to i8*
  %227 = xor i64 %6, -1
  %228 = getelementptr i8, i8* %226, i64 %227
  %229 = ptrtoint i8* %228 to i64
  %230 = lshr i64 %229, 3
  %231 = add nuw nsw i64 %230, 1
  %232 = icmp ult i64 %231, 4
  br i1 %232, label %233, label %236

233:                                              ; preds = %331, %236, %223
  %234 = phi %"class.sh::TIntermNode"** [ %215, %236 ], [ %215, %223 ], [ %254, %331 ]
  %235 = phi %"class.sh::TIntermNode"** [ %221, %236 ], [ %221, %223 ], [ %255, %331 ]
  br label %344

236:                                              ; preds = %223
  %237 = sub nsw i64 0, %220
  %238 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %237
  %239 = bitcast %"class.sh::TIntermNode"** %238 to i8*
  %240 = xor i64 %6, -1
  %241 = getelementptr i8, i8* %239, i64 %240
  %242 = ptrtoint i8* %241 to i64
  %243 = lshr i64 %242, 3
  %244 = add nuw nsw i64 %243, 1
  %245 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %244
  %246 = add nsw i64 %220, %243
  %247 = add nsw i64 %246, 1
  %248 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %247
  %249 = icmp ult %"class.sh::TIntermNode"** %215, %248
  %250 = icmp ult %"class.sh::TIntermNode"** %221, %245
  %251 = and i1 %249, %250
  br i1 %251, label %233, label %252

252:                                              ; preds = %236
  %253 = and i64 %231, 4611686018427387900
  %254 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %253
  %255 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %253
  %256 = add nsw i64 %253, -4
  %257 = lshr exact i64 %256, 2
  %258 = add nuw nsw i64 %257, 1
  %259 = and i64 %258, 3
  %260 = icmp ult i64 %256, 12
  br i1 %260, label %312, label %261

261:                                              ; preds = %252
  %262 = sub nsw i64 %258, %259
  br label %263

263:                                              ; preds = %263, %261
  %264 = phi i64 [ 0, %261 ], [ %309, %263 ]
  %265 = phi i64 [ %262, %261 ], [ %310, %263 ]
  %266 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %264
  %267 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %264
  %268 = bitcast %"class.sh::TIntermNode"** %267 to <2 x i64>*
  %269 = load <2 x i64>, <2 x i64>* %268, align 8, !alias.scope !21
  %270 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %267, i64 2
  %271 = bitcast %"class.sh::TIntermNode"** %270 to <2 x i64>*
  %272 = load <2 x i64>, <2 x i64>* %271, align 8, !alias.scope !21
  %273 = bitcast %"class.sh::TIntermNode"** %266 to <2 x i64>*
  store <2 x i64> %269, <2 x i64>* %273, align 8, !alias.scope !24, !noalias !21
  %274 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %266, i64 2
  %275 = bitcast %"class.sh::TIntermNode"** %274 to <2 x i64>*
  store <2 x i64> %272, <2 x i64>* %275, align 8, !alias.scope !24, !noalias !21
  %276 = or i64 %264, 4
  %277 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %276
  %278 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %276
  %279 = bitcast %"class.sh::TIntermNode"** %278 to <2 x i64>*
  %280 = load <2 x i64>, <2 x i64>* %279, align 8, !alias.scope !21
  %281 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %278, i64 2
  %282 = bitcast %"class.sh::TIntermNode"** %281 to <2 x i64>*
  %283 = load <2 x i64>, <2 x i64>* %282, align 8, !alias.scope !21
  %284 = bitcast %"class.sh::TIntermNode"** %277 to <2 x i64>*
  store <2 x i64> %280, <2 x i64>* %284, align 8, !alias.scope !24, !noalias !21
  %285 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %277, i64 2
  %286 = bitcast %"class.sh::TIntermNode"** %285 to <2 x i64>*
  store <2 x i64> %283, <2 x i64>* %286, align 8, !alias.scope !24, !noalias !21
  %287 = or i64 %264, 8
  %288 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %287
  %289 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %287
  %290 = bitcast %"class.sh::TIntermNode"** %289 to <2 x i64>*
  %291 = load <2 x i64>, <2 x i64>* %290, align 8, !alias.scope !21
  %292 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %289, i64 2
  %293 = bitcast %"class.sh::TIntermNode"** %292 to <2 x i64>*
  %294 = load <2 x i64>, <2 x i64>* %293, align 8, !alias.scope !21
  %295 = bitcast %"class.sh::TIntermNode"** %288 to <2 x i64>*
  store <2 x i64> %291, <2 x i64>* %295, align 8, !alias.scope !24, !noalias !21
  %296 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %288, i64 2
  %297 = bitcast %"class.sh::TIntermNode"** %296 to <2 x i64>*
  store <2 x i64> %294, <2 x i64>* %297, align 8, !alias.scope !24, !noalias !21
  %298 = or i64 %264, 12
  %299 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %298
  %300 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %298
  %301 = bitcast %"class.sh::TIntermNode"** %300 to <2 x i64>*
  %302 = load <2 x i64>, <2 x i64>* %301, align 8, !alias.scope !21
  %303 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %300, i64 2
  %304 = bitcast %"class.sh::TIntermNode"** %303 to <2 x i64>*
  %305 = load <2 x i64>, <2 x i64>* %304, align 8, !alias.scope !21
  %306 = bitcast %"class.sh::TIntermNode"** %299 to <2 x i64>*
  store <2 x i64> %302, <2 x i64>* %306, align 8, !alias.scope !24, !noalias !21
  %307 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %299, i64 2
  %308 = bitcast %"class.sh::TIntermNode"** %307 to <2 x i64>*
  store <2 x i64> %305, <2 x i64>* %308, align 8, !alias.scope !24, !noalias !21
  %309 = add i64 %264, 16
  %310 = add i64 %265, -4
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %312, label %263, !llvm.loop !26

312:                                              ; preds = %263, %252
  %313 = phi i64 [ 0, %252 ], [ %309, %263 ]
  %314 = icmp eq i64 %259, 0
  br i1 %314, label %331, label %315

315:                                              ; preds = %312, %315
  %316 = phi i64 [ %328, %315 ], [ %313, %312 ]
  %317 = phi i64 [ %329, %315 ], [ %259, %312 ]
  %318 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %316
  %319 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %316
  %320 = bitcast %"class.sh::TIntermNode"** %319 to <2 x i64>*
  %321 = load <2 x i64>, <2 x i64>* %320, align 8, !alias.scope !21
  %322 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %319, i64 2
  %323 = bitcast %"class.sh::TIntermNode"** %322 to <2 x i64>*
  %324 = load <2 x i64>, <2 x i64>* %323, align 8, !alias.scope !21
  %325 = bitcast %"class.sh::TIntermNode"** %318 to <2 x i64>*
  store <2 x i64> %321, <2 x i64>* %325, align 8, !alias.scope !24, !noalias !21
  %326 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %318, i64 2
  %327 = bitcast %"class.sh::TIntermNode"** %326 to <2 x i64>*
  store <2 x i64> %324, <2 x i64>* %327, align 8, !alias.scope !24, !noalias !21
  %328 = add i64 %316, 4
  %329 = add i64 %317, -1
  %330 = icmp eq i64 %329, 0
  br i1 %330, label %331, label %315, !llvm.loop !27

331:                                              ; preds = %315, %312
  %332 = icmp eq i64 %231, %253
  br i1 %332, label %333, label %233

333:                                              ; preds = %344, %331
  %334 = phi %"class.sh::TIntermNode"** [ %254, %331 ], [ %351, %344 ]
  %335 = ptrtoint %"class.sh::TIntermNode"** %334 to i64
  br label %336

336:                                              ; preds = %333, %213
  %337 = phi i64 [ %335, %333 ], [ %214, %213 ]
  store i64 %337, i64* %23, align 8
  %338 = icmp eq i64 %219, 0
  br i1 %338, label %353, label %339

339:                                              ; preds = %336
  %340 = sub nsw i64 0, %220
  %341 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %340
  %342 = bitcast %"class.sh::TIntermNode"** %341 to i8*
  %343 = bitcast %"class.sh::TIntermNode"** %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %342, i8* align 8 %343, i64 %219, i1 false) #7
  br label %353

344:                                              ; preds = %233, %344
  %345 = phi %"class.sh::TIntermNode"** [ %351, %344 ], [ %234, %233 ]
  %346 = phi %"class.sh::TIntermNode"** [ %350, %344 ], [ %235, %233 ]
  %347 = bitcast %"class.sh::TIntermNode"** %346 to i64*
  %348 = load i64, i64* %347, align 8
  %349 = bitcast %"class.sh::TIntermNode"** %345 to i64*
  store i64 %348, i64* %349, align 8
  %350 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %346, i64 1
  %351 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %345, i64 1
  %352 = icmp ult %"class.sh::TIntermNode"** %350, %18
  br i1 %352, label %344, label %333, !llvm.loop !28

353:                                              ; preds = %336, %339
  %354 = ptrtoint %"class.sh::TIntermNode"** %216 to i64
  %355 = sub i64 %354, %7
  %356 = icmp eq i64 %355, 0
  br i1 %356, label %834, label %357

357:                                              ; preds = %353
  %358 = bitcast %"class.sh::TIntermNode"** %2 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %358, i64 %355, i1 false) #7
  br label %834

359:                                              ; preds = %13
  %360 = bitcast %"class.std::__1::vector.32"* %0 to i64*
  %361 = load i64, i64* %360, align 8
  %362 = sub i64 %19, %361
  %363 = ashr exact i64 %362, 3
  %364 = add nsw i64 %363, %11
  %365 = icmp ugt i64 %364, 2305843009213693951
  br i1 %365, label %366, label %368

366:                                              ; preds = %359
  %367 = bitcast %"class.std::__1::vector.32"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %367) #8
  unreachable

368:                                              ; preds = %359
  %369 = sub i64 %16, %361
  %370 = ashr exact i64 %369, 3
  %371 = icmp ult i64 %370, 1152921504606846975
  br i1 %371, label %375, label %372

372:                                              ; preds = %368
  %373 = sub i64 %6, %361
  %374 = ashr exact i64 %373, 3
  br label %382

375:                                              ; preds = %368
  %376 = ashr exact i64 %369, 2
  %377 = icmp ult i64 %376, %364
  %378 = select i1 %377, i64 %364, i64 %376
  %379 = sub i64 %6, %361
  %380 = ashr exact i64 %379, 3
  %381 = icmp eq i64 %378, 0
  br i1 %381, label %389, label %382

382:                                              ; preds = %372, %375
  %383 = phi i64 [ %374, %372 ], [ %380, %375 ]
  %384 = phi i64 [ 2305843009213693951, %372 ], [ %378, %375 ]
  %385 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %386 = shl i64 %384, 3
  %387 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %385, i64 %386) #7
  %388 = bitcast i8* %387 to %"class.sh::TIntermNode"**
  br label %389

389:                                              ; preds = %382, %375
  %390 = phi i64 [ %383, %382 ], [ %380, %375 ]
  %391 = phi i64 [ %384, %382 ], [ 0, %375 ]
  %392 = phi %"class.sh::TIntermNode"** [ %388, %382 ], [ null, %375 ]
  %393 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 %390
  %394 = ptrtoint %"class.sh::TIntermNode"** %393 to i64
  %395 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 %391
  %396 = ptrtoint %"class.sh::TIntermNode"** %395 to i64
  %397 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 %11
  %398 = add i64 %10, -8
  %399 = lshr i64 %398, 3
  %400 = add nuw nsw i64 %399, 1
  %401 = and i64 %400, 7
  %402 = icmp eq i64 %401, 0
  br i1 %402, label %418, label %403

403:                                              ; preds = %389, %403
  %404 = phi %"class.sh::TIntermNode"** [ %411, %403 ], [ %393, %389 ]
  %405 = phi i64 [ %412, %403 ], [ %394, %389 ]
  %406 = phi %"class.sh::TIntermNode"** [ %413, %403 ], [ %2, %389 ]
  %407 = phi i64 [ %414, %403 ], [ %401, %389 ]
  %408 = bitcast %"class.sh::TIntermNode"** %406 to i64*
  %409 = load i64, i64* %408, align 8
  %410 = inttoptr i64 %405 to i64*
  store i64 %409, i64* %410, align 8
  %411 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %404, i64 1
  %412 = ptrtoint %"class.sh::TIntermNode"** %411 to i64
  %413 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %406, i64 1
  %414 = add i64 %407, -1
  %415 = icmp eq i64 %414, 0
  br i1 %415, label %416, label %403, !llvm.loop !29

416:                                              ; preds = %403
  %417 = ptrtoint %"class.sh::TIntermNode"** %411 to i64
  br label %418

418:                                              ; preds = %389, %416
  %419 = phi %"class.sh::TIntermNode"** [ %393, %389 ], [ %411, %416 ]
  %420 = phi i64 [ %394, %389 ], [ %417, %416 ]
  %421 = phi %"class.sh::TIntermNode"** [ %2, %389 ], [ %413, %416 ]
  %422 = icmp ult i64 %398, 56
  br i1 %422, label %469, label %423

423:                                              ; preds = %418, %423
  %424 = phi %"class.sh::TIntermNode"** [ %465, %423 ], [ %419, %418 ]
  %425 = phi i64 [ %466, %423 ], [ %420, %418 ]
  %426 = phi %"class.sh::TIntermNode"** [ %467, %423 ], [ %421, %418 ]
  %427 = bitcast %"class.sh::TIntermNode"** %426 to i64*
  %428 = load i64, i64* %427, align 8
  %429 = inttoptr i64 %425 to i64*
  store i64 %428, i64* %429, align 8
  %430 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 1
  %431 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 1
  %432 = bitcast %"class.sh::TIntermNode"** %431 to i64*
  %433 = load i64, i64* %432, align 8
  %434 = bitcast %"class.sh::TIntermNode"** %430 to i64*
  store i64 %433, i64* %434, align 8
  %435 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 2
  %436 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 2
  %437 = bitcast %"class.sh::TIntermNode"** %436 to i64*
  %438 = load i64, i64* %437, align 8
  %439 = bitcast %"class.sh::TIntermNode"** %435 to i64*
  store i64 %438, i64* %439, align 8
  %440 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 3
  %441 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 3
  %442 = bitcast %"class.sh::TIntermNode"** %441 to i64*
  %443 = load i64, i64* %442, align 8
  %444 = bitcast %"class.sh::TIntermNode"** %440 to i64*
  store i64 %443, i64* %444, align 8
  %445 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 4
  %446 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 4
  %447 = bitcast %"class.sh::TIntermNode"** %446 to i64*
  %448 = load i64, i64* %447, align 8
  %449 = bitcast %"class.sh::TIntermNode"** %445 to i64*
  store i64 %448, i64* %449, align 8
  %450 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 5
  %451 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 5
  %452 = bitcast %"class.sh::TIntermNode"** %451 to i64*
  %453 = load i64, i64* %452, align 8
  %454 = bitcast %"class.sh::TIntermNode"** %450 to i64*
  store i64 %453, i64* %454, align 8
  %455 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 6
  %456 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 6
  %457 = bitcast %"class.sh::TIntermNode"** %456 to i64*
  %458 = load i64, i64* %457, align 8
  %459 = bitcast %"class.sh::TIntermNode"** %455 to i64*
  store i64 %458, i64* %459, align 8
  %460 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 7
  %461 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 7
  %462 = bitcast %"class.sh::TIntermNode"** %461 to i64*
  %463 = load i64, i64* %462, align 8
  %464 = bitcast %"class.sh::TIntermNode"** %460 to i64*
  store i64 %463, i64* %464, align 8
  %465 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 8
  %466 = ptrtoint %"class.sh::TIntermNode"** %465 to i64
  %467 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 8
  %468 = icmp eq %"class.sh::TIntermNode"** %397, %465
  br i1 %468, label %469, label %423

469:                                              ; preds = %423, %418
  %470 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %8, align 8
  %471 = ptrtoint %"class.sh::TIntermNode"** %470 to i64
  %472 = icmp eq %"class.sh::TIntermNode"** %470, %1
  br i1 %472, label %645, label %473

473:                                              ; preds = %469
  %474 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %475 = ptrtoint %"class.sh::TIntermNode"** %474 to i64
  %476 = sub i64 %475, %471
  %477 = lshr i64 %476, 3
  %478 = add nuw nsw i64 %477, 1
  %479 = icmp ult i64 %478, 4
  br i1 %479, label %572, label %480

480:                                              ; preds = %473
  %481 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %482 = ptrtoint %"class.sh::TIntermNode"** %481 to i64
  %483 = sub i64 %482, %471
  %484 = lshr i64 %483, 3
  %485 = xor i64 %484, -1
  %486 = add nsw i64 %390, %485
  %487 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 %486
  %488 = xor i64 %484, -1
  %489 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %488
  %490 = icmp ult %"class.sh::TIntermNode"** %487, %1
  %491 = icmp ult %"class.sh::TIntermNode"** %489, %393
  %492 = and i1 %490, %491
  br i1 %492, label %572, label %493

493:                                              ; preds = %480
  %494 = and i64 %478, 4611686018427387900
  %495 = sub nsw i64 0, %494
  %496 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 %495
  %497 = sub nsw i64 0, %494
  %498 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %497
  %499 = add nsw i64 %494, -4
  %500 = lshr exact i64 %499, 2
  %501 = add nuw nsw i64 %500, 1
  %502 = and i64 %501, 1
  %503 = icmp eq i64 %499, 0
  br i1 %503, label %548, label %504

504:                                              ; preds = %493
  %505 = sub nuw nsw i64 %501, %502
  %506 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 -1
  %507 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %508 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 -1
  %509 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  br label %510

510:                                              ; preds = %510, %504
  %511 = phi i64 [ 0, %504 ], [ %545, %510 ]
  %512 = phi i64 [ %505, %504 ], [ %546, %510 ]
  %513 = sub i64 0, %511
  %514 = sub i64 0, %511
  %515 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %506, i64 %513
  %516 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %507, i64 %514
  %517 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %516, i64 -1
  %518 = bitcast %"class.sh::TIntermNode"** %517 to <2 x i64>*
  %519 = load <2 x i64>, <2 x i64>* %518, align 8, !alias.scope !30
  %520 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %516, i64 -2
  %521 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %520, i64 -1
  %522 = bitcast %"class.sh::TIntermNode"** %521 to <2 x i64>*
  %523 = load <2 x i64>, <2 x i64>* %522, align 8, !alias.scope !30
  %524 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %515, i64 -1
  %525 = bitcast %"class.sh::TIntermNode"** %524 to <2 x i64>*
  store <2 x i64> %519, <2 x i64>* %525, align 8, !alias.scope !33, !noalias !30
  %526 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %515, i64 -2
  %527 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %526, i64 -1
  %528 = bitcast %"class.sh::TIntermNode"** %527 to <2 x i64>*
  store <2 x i64> %523, <2 x i64>* %528, align 8, !alias.scope !33, !noalias !30
  %529 = sub nuw nsw i64 -4, %511
  %530 = sub nuw nsw i64 -4, %511
  %531 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %508, i64 %529
  %532 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %509, i64 %530
  %533 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 -1
  %534 = bitcast %"class.sh::TIntermNode"** %533 to <2 x i64>*
  %535 = load <2 x i64>, <2 x i64>* %534, align 8, !alias.scope !30
  %536 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 -2
  %537 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %536, i64 -1
  %538 = bitcast %"class.sh::TIntermNode"** %537 to <2 x i64>*
  %539 = load <2 x i64>, <2 x i64>* %538, align 8, !alias.scope !30
  %540 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 -1
  %541 = bitcast %"class.sh::TIntermNode"** %540 to <2 x i64>*
  store <2 x i64> %535, <2 x i64>* %541, align 8, !alias.scope !33, !noalias !30
  %542 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 -2
  %543 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %542, i64 -1
  %544 = bitcast %"class.sh::TIntermNode"** %543 to <2 x i64>*
  store <2 x i64> %539, <2 x i64>* %544, align 8, !alias.scope !33, !noalias !30
  %545 = add i64 %511, 8
  %546 = add i64 %512, -2
  %547 = icmp eq i64 %546, 0
  br i1 %547, label %548, label %510, !llvm.loop !35

548:                                              ; preds = %510, %493
  %549 = phi i64 [ 0, %493 ], [ %545, %510 ]
  %550 = icmp eq i64 %502, 0
  br i1 %550, label %570, label %551

551:                                              ; preds = %548
  %552 = sub i64 0, %549
  %553 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 -1
  %554 = sub i64 0, %549
  %555 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %556 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %553, i64 %552
  %557 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %555, i64 %554
  %558 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %557, i64 -1
  %559 = bitcast %"class.sh::TIntermNode"** %558 to <2 x i64>*
  %560 = load <2 x i64>, <2 x i64>* %559, align 8, !alias.scope !30
  %561 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %557, i64 -2
  %562 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %561, i64 -1
  %563 = bitcast %"class.sh::TIntermNode"** %562 to <2 x i64>*
  %564 = load <2 x i64>, <2 x i64>* %563, align 8, !alias.scope !30
  %565 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %556, i64 -1
  %566 = bitcast %"class.sh::TIntermNode"** %565 to <2 x i64>*
  store <2 x i64> %560, <2 x i64>* %566, align 8, !alias.scope !33, !noalias !30
  %567 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %556, i64 -2
  %568 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %567, i64 -1
  %569 = bitcast %"class.sh::TIntermNode"** %568 to <2 x i64>*
  store <2 x i64> %564, <2 x i64>* %569, align 8, !alias.scope !33, !noalias !30
  br label %570

570:                                              ; preds = %548, %551
  %571 = icmp eq i64 %478, %494
  br i1 %571, label %642, label %572

572:                                              ; preds = %570, %480, %473
  %573 = phi %"class.sh::TIntermNode"** [ %393, %480 ], [ %393, %473 ], [ %496, %570 ]
  %574 = phi %"class.sh::TIntermNode"** [ %1, %480 ], [ %1, %473 ], [ %498, %570 ]
  %575 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %574, i64 -1
  %576 = ptrtoint %"class.sh::TIntermNode"** %575 to i64
  %577 = sub i64 %576, %471
  %578 = lshr i64 %577, 3
  %579 = add nuw nsw i64 %578, 1
  %580 = and i64 %579, 7
  %581 = icmp eq i64 %580, 0
  br i1 %581, label %593, label %582

582:                                              ; preds = %572, %582
  %583 = phi %"class.sh::TIntermNode"** [ %586, %582 ], [ %573, %572 ]
  %584 = phi %"class.sh::TIntermNode"** [ %587, %582 ], [ %574, %572 ]
  %585 = phi i64 [ %591, %582 ], [ %580, %572 ]
  %586 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %583, i64 -1
  %587 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %584, i64 -1
  %588 = bitcast %"class.sh::TIntermNode"** %587 to i64*
  %589 = load i64, i64* %588, align 8
  %590 = bitcast %"class.sh::TIntermNode"** %586 to i64*
  store i64 %589, i64* %590, align 8
  %591 = add i64 %585, -1
  %592 = icmp eq i64 %591, 0
  br i1 %592, label %593, label %582, !llvm.loop !36

593:                                              ; preds = %582, %572
  %594 = phi %"class.sh::TIntermNode"** [ undef, %572 ], [ %586, %582 ]
  %595 = phi %"class.sh::TIntermNode"** [ %573, %572 ], [ %586, %582 ]
  %596 = phi %"class.sh::TIntermNode"** [ %574, %572 ], [ %587, %582 ]
  %597 = icmp ult i64 %577, 56
  br i1 %597, label %642, label %598

598:                                              ; preds = %593, %598
  %599 = phi %"class.sh::TIntermNode"** [ %636, %598 ], [ %595, %593 ]
  %600 = phi %"class.sh::TIntermNode"** [ %637, %598 ], [ %596, %593 ]
  %601 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -1
  %602 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -1
  %603 = bitcast %"class.sh::TIntermNode"** %602 to i64*
  %604 = load i64, i64* %603, align 8
  %605 = bitcast %"class.sh::TIntermNode"** %601 to i64*
  store i64 %604, i64* %605, align 8
  %606 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -2
  %607 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -2
  %608 = bitcast %"class.sh::TIntermNode"** %607 to i64*
  %609 = load i64, i64* %608, align 8
  %610 = bitcast %"class.sh::TIntermNode"** %606 to i64*
  store i64 %609, i64* %610, align 8
  %611 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -3
  %612 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -3
  %613 = bitcast %"class.sh::TIntermNode"** %612 to i64*
  %614 = load i64, i64* %613, align 8
  %615 = bitcast %"class.sh::TIntermNode"** %611 to i64*
  store i64 %614, i64* %615, align 8
  %616 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -4
  %617 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -4
  %618 = bitcast %"class.sh::TIntermNode"** %617 to i64*
  %619 = load i64, i64* %618, align 8
  %620 = bitcast %"class.sh::TIntermNode"** %616 to i64*
  store i64 %619, i64* %620, align 8
  %621 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -5
  %622 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -5
  %623 = bitcast %"class.sh::TIntermNode"** %622 to i64*
  %624 = load i64, i64* %623, align 8
  %625 = bitcast %"class.sh::TIntermNode"** %621 to i64*
  store i64 %624, i64* %625, align 8
  %626 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -6
  %627 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -6
  %628 = bitcast %"class.sh::TIntermNode"** %627 to i64*
  %629 = load i64, i64* %628, align 8
  %630 = bitcast %"class.sh::TIntermNode"** %626 to i64*
  store i64 %629, i64* %630, align 8
  %631 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -7
  %632 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -7
  %633 = bitcast %"class.sh::TIntermNode"** %632 to i64*
  %634 = load i64, i64* %633, align 8
  %635 = bitcast %"class.sh::TIntermNode"** %631 to i64*
  store i64 %634, i64* %635, align 8
  %636 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -8
  %637 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -8
  %638 = bitcast %"class.sh::TIntermNode"** %637 to i64*
  %639 = load i64, i64* %638, align 8
  %640 = bitcast %"class.sh::TIntermNode"** %636 to i64*
  store i64 %639, i64* %640, align 8
  %641 = icmp eq %"class.sh::TIntermNode"** %637, %470
  br i1 %641, label %642, label %598, !llvm.loop !37

642:                                              ; preds = %593, %598, %570
  %643 = phi %"class.sh::TIntermNode"** [ %496, %570 ], [ %594, %593 ], [ %636, %598 ]
  %644 = ptrtoint %"class.sh::TIntermNode"** %643 to i64
  br label %645

645:                                              ; preds = %642, %469
  %646 = phi i64 [ %394, %469 ], [ %644, %642 ]
  %647 = phi %"class.sh::TIntermNode"** [ %393, %469 ], [ %643, %642 ]
  %648 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %649 = icmp eq %"class.sh::TIntermNode"** %648, %1
  br i1 %649, label %650, label %652

650:                                              ; preds = %645
  %651 = ptrtoint %"class.sh::TIntermNode"** %647 to i64
  br label %830

652:                                              ; preds = %645
  %653 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %648, i64 -1
  %654 = ptrtoint %"class.sh::TIntermNode"** %653 to i64
  %655 = sub i64 %654, %6
  %656 = lshr i64 %655, 3
  %657 = add nuw nsw i64 %656, 1
  %658 = icmp ult i64 %657, 4
  br i1 %658, label %755, label %659

659:                                              ; preds = %652
  %660 = add nsw i64 %390, %11
  %661 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %648, i64 -1
  %662 = ptrtoint %"class.sh::TIntermNode"** %661 to i64
  %663 = sub i64 %662, %6
  %664 = lshr i64 %663, 3
  %665 = add nsw i64 %660, %664
  %666 = add nsw i64 %665, 1
  %667 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 %666
  %668 = add nuw nsw i64 %664, 1
  %669 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %668
  %670 = icmp ult %"class.sh::TIntermNode"** %397, %669
  %671 = icmp ugt %"class.sh::TIntermNode"** %667, %1
  %672 = and i1 %670, %671
  br i1 %672, label %755, label %673

673:                                              ; preds = %659
  %674 = and i64 %657, 4611686018427387900
  %675 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %674
  %676 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %674
  %677 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %674
  %678 = add nsw i64 %674, -4
  %679 = lshr exact i64 %678, 2
  %680 = add nuw nsw i64 %679, 1
  %681 = and i64 %680, 3
  %682 = icmp ult i64 %678, 12
  br i1 %682, label %734, label %683

683:                                              ; preds = %673
  %684 = sub nsw i64 %680, %681
  br label %685

685:                                              ; preds = %685, %683
  %686 = phi i64 [ 0, %683 ], [ %731, %685 ]
  %687 = phi i64 [ %684, %683 ], [ %732, %685 ]
  %688 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %686
  %689 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %686
  %690 = bitcast %"class.sh::TIntermNode"** %689 to <2 x i64>*
  %691 = load <2 x i64>, <2 x i64>* %690, align 8, !alias.scope !38
  %692 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %689, i64 2
  %693 = bitcast %"class.sh::TIntermNode"** %692 to <2 x i64>*
  %694 = load <2 x i64>, <2 x i64>* %693, align 8, !alias.scope !38
  %695 = bitcast %"class.sh::TIntermNode"** %688 to <2 x i64>*
  store <2 x i64> %691, <2 x i64>* %695, align 8, !alias.scope !41, !noalias !38
  %696 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %688, i64 2
  %697 = bitcast %"class.sh::TIntermNode"** %696 to <2 x i64>*
  store <2 x i64> %694, <2 x i64>* %697, align 8, !alias.scope !41, !noalias !38
  %698 = or i64 %686, 4
  %699 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %698
  %700 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %698
  %701 = bitcast %"class.sh::TIntermNode"** %700 to <2 x i64>*
  %702 = load <2 x i64>, <2 x i64>* %701, align 8, !alias.scope !38
  %703 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %700, i64 2
  %704 = bitcast %"class.sh::TIntermNode"** %703 to <2 x i64>*
  %705 = load <2 x i64>, <2 x i64>* %704, align 8, !alias.scope !38
  %706 = bitcast %"class.sh::TIntermNode"** %699 to <2 x i64>*
  store <2 x i64> %702, <2 x i64>* %706, align 8, !alias.scope !41, !noalias !38
  %707 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %699, i64 2
  %708 = bitcast %"class.sh::TIntermNode"** %707 to <2 x i64>*
  store <2 x i64> %705, <2 x i64>* %708, align 8, !alias.scope !41, !noalias !38
  %709 = or i64 %686, 8
  %710 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %709
  %711 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %709
  %712 = bitcast %"class.sh::TIntermNode"** %711 to <2 x i64>*
  %713 = load <2 x i64>, <2 x i64>* %712, align 8, !alias.scope !38
  %714 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %711, i64 2
  %715 = bitcast %"class.sh::TIntermNode"** %714 to <2 x i64>*
  %716 = load <2 x i64>, <2 x i64>* %715, align 8, !alias.scope !38
  %717 = bitcast %"class.sh::TIntermNode"** %710 to <2 x i64>*
  store <2 x i64> %713, <2 x i64>* %717, align 8, !alias.scope !41, !noalias !38
  %718 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %710, i64 2
  %719 = bitcast %"class.sh::TIntermNode"** %718 to <2 x i64>*
  store <2 x i64> %716, <2 x i64>* %719, align 8, !alias.scope !41, !noalias !38
  %720 = or i64 %686, 12
  %721 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %720
  %722 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %720
  %723 = bitcast %"class.sh::TIntermNode"** %722 to <2 x i64>*
  %724 = load <2 x i64>, <2 x i64>* %723, align 8, !alias.scope !38
  %725 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %722, i64 2
  %726 = bitcast %"class.sh::TIntermNode"** %725 to <2 x i64>*
  %727 = load <2 x i64>, <2 x i64>* %726, align 8, !alias.scope !38
  %728 = bitcast %"class.sh::TIntermNode"** %721 to <2 x i64>*
  store <2 x i64> %724, <2 x i64>* %728, align 8, !alias.scope !41, !noalias !38
  %729 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %721, i64 2
  %730 = bitcast %"class.sh::TIntermNode"** %729 to <2 x i64>*
  store <2 x i64> %727, <2 x i64>* %730, align 8, !alias.scope !41, !noalias !38
  %731 = add i64 %686, 16
  %732 = add i64 %687, -4
  %733 = icmp eq i64 %732, 0
  br i1 %733, label %734, label %685, !llvm.loop !43

734:                                              ; preds = %685, %673
  %735 = phi i64 [ 0, %673 ], [ %731, %685 ]
  %736 = icmp eq i64 %681, 0
  br i1 %736, label %753, label %737

737:                                              ; preds = %734, %737
  %738 = phi i64 [ %750, %737 ], [ %735, %734 ]
  %739 = phi i64 [ %751, %737 ], [ %681, %734 ]
  %740 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %738
  %741 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %738
  %742 = bitcast %"class.sh::TIntermNode"** %741 to <2 x i64>*
  %743 = load <2 x i64>, <2 x i64>* %742, align 8, !alias.scope !38
  %744 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %741, i64 2
  %745 = bitcast %"class.sh::TIntermNode"** %744 to <2 x i64>*
  %746 = load <2 x i64>, <2 x i64>* %745, align 8, !alias.scope !38
  %747 = bitcast %"class.sh::TIntermNode"** %740 to <2 x i64>*
  store <2 x i64> %743, <2 x i64>* %747, align 8, !alias.scope !41, !noalias !38
  %748 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %740, i64 2
  %749 = bitcast %"class.sh::TIntermNode"** %748 to <2 x i64>*
  store <2 x i64> %746, <2 x i64>* %749, align 8, !alias.scope !41, !noalias !38
  %750 = add i64 %738, 4
  %751 = add i64 %739, -1
  %752 = icmp eq i64 %751, 0
  br i1 %752, label %753, label %737, !llvm.loop !44

753:                                              ; preds = %737, %734
  %754 = icmp eq i64 %657, %674
  br i1 %754, label %830, label %755

755:                                              ; preds = %753, %659, %652
  %756 = phi %"class.sh::TIntermNode"** [ %397, %659 ], [ %397, %652 ], [ %675, %753 ]
  %757 = phi %"class.sh::TIntermNode"** [ %397, %659 ], [ %397, %652 ], [ %676, %753 ]
  %758 = phi %"class.sh::TIntermNode"** [ %1, %659 ], [ %1, %652 ], [ %677, %753 ]
  %759 = ptrtoint %"class.sh::TIntermNode"** %758 to i64
  %760 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %648, i64 -1
  %761 = ptrtoint %"class.sh::TIntermNode"** %760 to i64
  %762 = sub i64 %761, %759
  %763 = lshr i64 %762, 3
  %764 = add nuw nsw i64 %763, 1
  %765 = and i64 %764, 7
  %766 = icmp eq i64 %765, 0
  br i1 %766, label %779, label %767

767:                                              ; preds = %755, %767
  %768 = phi %"class.sh::TIntermNode"** [ %776, %767 ], [ %756, %755 ]
  %769 = phi %"class.sh::TIntermNode"** [ %776, %767 ], [ %757, %755 ]
  %770 = phi %"class.sh::TIntermNode"** [ %775, %767 ], [ %758, %755 ]
  %771 = phi i64 [ %777, %767 ], [ %765, %755 ]
  %772 = bitcast %"class.sh::TIntermNode"** %769 to i64*
  %773 = bitcast %"class.sh::TIntermNode"** %770 to i64*
  %774 = load i64, i64* %773, align 8
  store i64 %774, i64* %772, align 8
  %775 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %770, i64 1
  %776 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %768, i64 1
  %777 = add i64 %771, -1
  %778 = icmp eq i64 %777, 0
  br i1 %778, label %779, label %767, !llvm.loop !45

779:                                              ; preds = %767, %755
  %780 = phi %"class.sh::TIntermNode"** [ undef, %755 ], [ %776, %767 ]
  %781 = phi %"class.sh::TIntermNode"** [ %756, %755 ], [ %776, %767 ]
  %782 = phi %"class.sh::TIntermNode"** [ %757, %755 ], [ %776, %767 ]
  %783 = phi %"class.sh::TIntermNode"** [ %758, %755 ], [ %775, %767 ]
  %784 = icmp ult i64 %762, 56
  br i1 %784, label %830, label %785

785:                                              ; preds = %779, %785
  %786 = phi %"class.sh::TIntermNode"** [ %828, %785 ], [ %781, %779 ]
  %787 = phi %"class.sh::TIntermNode"** [ %828, %785 ], [ %782, %779 ]
  %788 = phi %"class.sh::TIntermNode"** [ %827, %785 ], [ %783, %779 ]
  %789 = bitcast %"class.sh::TIntermNode"** %787 to i64*
  %790 = bitcast %"class.sh::TIntermNode"** %788 to i64*
  %791 = load i64, i64* %790, align 8
  store i64 %791, i64* %789, align 8
  %792 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 1
  %793 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 1
  %794 = bitcast %"class.sh::TIntermNode"** %793 to i64*
  %795 = bitcast %"class.sh::TIntermNode"** %792 to i64*
  %796 = load i64, i64* %795, align 8
  store i64 %796, i64* %794, align 8
  %797 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 2
  %798 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 2
  %799 = bitcast %"class.sh::TIntermNode"** %798 to i64*
  %800 = bitcast %"class.sh::TIntermNode"** %797 to i64*
  %801 = load i64, i64* %800, align 8
  store i64 %801, i64* %799, align 8
  %802 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 3
  %803 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 3
  %804 = bitcast %"class.sh::TIntermNode"** %803 to i64*
  %805 = bitcast %"class.sh::TIntermNode"** %802 to i64*
  %806 = load i64, i64* %805, align 8
  store i64 %806, i64* %804, align 8
  %807 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 4
  %808 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 4
  %809 = bitcast %"class.sh::TIntermNode"** %808 to i64*
  %810 = bitcast %"class.sh::TIntermNode"** %807 to i64*
  %811 = load i64, i64* %810, align 8
  store i64 %811, i64* %809, align 8
  %812 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 5
  %813 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 5
  %814 = bitcast %"class.sh::TIntermNode"** %813 to i64*
  %815 = bitcast %"class.sh::TIntermNode"** %812 to i64*
  %816 = load i64, i64* %815, align 8
  store i64 %816, i64* %814, align 8
  %817 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 6
  %818 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 6
  %819 = bitcast %"class.sh::TIntermNode"** %818 to i64*
  %820 = bitcast %"class.sh::TIntermNode"** %817 to i64*
  %821 = load i64, i64* %820, align 8
  store i64 %821, i64* %819, align 8
  %822 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 7
  %823 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 7
  %824 = bitcast %"class.sh::TIntermNode"** %823 to i64*
  %825 = bitcast %"class.sh::TIntermNode"** %822 to i64*
  %826 = load i64, i64* %825, align 8
  store i64 %826, i64* %824, align 8
  %827 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 8
  %828 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 8
  %829 = icmp eq %"class.sh::TIntermNode"** %827, %648
  br i1 %829, label %830, label %785, !llvm.loop !46

830:                                              ; preds = %779, %785, %753, %650
  %831 = phi %"class.sh::TIntermNode"** [ %397, %650 ], [ %675, %753 ], [ %780, %779 ], [ %828, %785 ]
  %832 = phi i64 [ %651, %650 ], [ %646, %753 ], [ %646, %785 ], [ %646, %779 ]
  %833 = ptrtoint %"class.sh::TIntermNode"** %831 to i64
  store i64 %832, i64* %360, align 8
  store i64 %833, i64* %23, align 8
  store i64 %396, i64* %15, align 8
  ret %"class.sh::TIntermNode"** %393

834:                                              ; preds = %208, %353, %357, %4
  ret %"class.sh::TIntermNode"** %1
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN2sh9TFunctionC1EPNS_12TSymbolTableERKNS_15ImmutableStringENS_10SymbolTypeEPKNS_5TTypeEb(%"class.sh::TFunction"*, %"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16), i8 zeroext, %"class.sh::TType"*, i1 zeroext) unnamed_addr #2

declare %"class.sh::TIntermFunctionPrototype"* @_ZN2sh35CreateInternalFunctionPrototypeNodeERKNS_9TFunctionE(%"class.sh::TFunction"* dereferenceable(80)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertENS_11__wrap_iterIPKS3_EEOS3_(%"class.std::__1::vector.32"*, %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"class.sh::TIntermNode"** %1 to i64
  %5 = bitcast %"class.sh::TIntermNode"** %1 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 1
  %8 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %9, align 8
  %11 = icmp ult %"class.sh::TIntermNode"** %8, %10
  %12 = ptrtoint %"class.sh::TIntermNode"** %8 to i64
  %13 = ptrtoint %"class.sh::TIntermNode"** %10 to i64
  br i1 %11, label %14, label %164

14:                                               ; preds = %3
  %15 = icmp eq %"class.sh::TIntermNode"** %8, %1
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = bitcast %"class.sh::TIntermNode"** %2 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %"class.sh::TIntermNode"** %1 to i64*
  store i64 %18, i64* %19, align 8
  %20 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 1
  %21 = ptrtoint %"class.sh::TIntermNode"** %20 to i64
  %22 = bitcast %"class.sh::TIntermNode"*** %7 to i64*
  store i64 %21, i64* %22, align 8
  br label %578

23:                                               ; preds = %14
  %24 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 1
  %25 = ptrtoint %"class.sh::TIntermNode"** %24 to i64
  %26 = sub i64 %12, %25
  %27 = ashr exact i64 %26, 3
  %28 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %27
  %29 = bitcast %"class.sh::TIntermNode"*** %7 to i64*
  %30 = icmp ult %"class.sh::TIntermNode"** %28, %8
  br i1 %30, label %31, label %144

31:                                               ; preds = %23
  %32 = sub nsw i64 0, %27
  %33 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %32
  %34 = bitcast %"class.sh::TIntermNode"** %33 to i8*
  %35 = xor i64 %4, -1
  %36 = getelementptr i8, i8* %34, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = lshr i64 %37, 3
  %39 = add nuw nsw i64 %38, 1
  %40 = icmp ult i64 %39, 4
  br i1 %40, label %41, label %44

41:                                               ; preds = %139, %44, %31
  %42 = phi %"class.sh::TIntermNode"** [ %8, %44 ], [ %8, %31 ], [ %62, %139 ]
  %43 = phi %"class.sh::TIntermNode"** [ %28, %44 ], [ %28, %31 ], [ %63, %139 ]
  br label %151

44:                                               ; preds = %31
  %45 = sub nsw i64 0, %27
  %46 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %45
  %47 = bitcast %"class.sh::TIntermNode"** %46 to i8*
  %48 = xor i64 %4, -1
  %49 = getelementptr i8, i8* %47, i64 %48
  %50 = ptrtoint i8* %49 to i64
  %51 = lshr i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %52
  %54 = add nsw i64 %27, %51
  %55 = add nsw i64 %54, 1
  %56 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %55
  %57 = icmp ult %"class.sh::TIntermNode"** %8, %56
  %58 = icmp ult %"class.sh::TIntermNode"** %28, %53
  %59 = and i1 %57, %58
  br i1 %59, label %41, label %60

60:                                               ; preds = %44
  %61 = and i64 %39, 4611686018427387900
  %62 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %61
  %63 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %61
  %64 = add nsw i64 %61, -4
  %65 = lshr exact i64 %64, 2
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 3
  %68 = icmp ult i64 %64, 12
  br i1 %68, label %120, label %69

69:                                               ; preds = %60
  %70 = sub nsw i64 %66, %67
  br label %71

71:                                               ; preds = %71, %69
  %72 = phi i64 [ 0, %69 ], [ %117, %71 ]
  %73 = phi i64 [ %70, %69 ], [ %118, %71 ]
  %74 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %72
  %75 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %72
  %76 = bitcast %"class.sh::TIntermNode"** %75 to <2 x i64>*
  %77 = load <2 x i64>, <2 x i64>* %76, align 8, !alias.scope !47
  %78 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %75, i64 2
  %79 = bitcast %"class.sh::TIntermNode"** %78 to <2 x i64>*
  %80 = load <2 x i64>, <2 x i64>* %79, align 8, !alias.scope !47
  %81 = bitcast %"class.sh::TIntermNode"** %74 to <2 x i64>*
  store <2 x i64> %77, <2 x i64>* %81, align 8, !alias.scope !50, !noalias !47
  %82 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 2
  %83 = bitcast %"class.sh::TIntermNode"** %82 to <2 x i64>*
  store <2 x i64> %80, <2 x i64>* %83, align 8, !alias.scope !50, !noalias !47
  %84 = or i64 %72, 4
  %85 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %84
  %86 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %84
  %87 = bitcast %"class.sh::TIntermNode"** %86 to <2 x i64>*
  %88 = load <2 x i64>, <2 x i64>* %87, align 8, !alias.scope !47
  %89 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %86, i64 2
  %90 = bitcast %"class.sh::TIntermNode"** %89 to <2 x i64>*
  %91 = load <2 x i64>, <2 x i64>* %90, align 8, !alias.scope !47
  %92 = bitcast %"class.sh::TIntermNode"** %85 to <2 x i64>*
  store <2 x i64> %88, <2 x i64>* %92, align 8, !alias.scope !50, !noalias !47
  %93 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %85, i64 2
  %94 = bitcast %"class.sh::TIntermNode"** %93 to <2 x i64>*
  store <2 x i64> %91, <2 x i64>* %94, align 8, !alias.scope !50, !noalias !47
  %95 = or i64 %72, 8
  %96 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %95
  %97 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %95
  %98 = bitcast %"class.sh::TIntermNode"** %97 to <2 x i64>*
  %99 = load <2 x i64>, <2 x i64>* %98, align 8, !alias.scope !47
  %100 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %97, i64 2
  %101 = bitcast %"class.sh::TIntermNode"** %100 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 8, !alias.scope !47
  %103 = bitcast %"class.sh::TIntermNode"** %96 to <2 x i64>*
  store <2 x i64> %99, <2 x i64>* %103, align 8, !alias.scope !50, !noalias !47
  %104 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %96, i64 2
  %105 = bitcast %"class.sh::TIntermNode"** %104 to <2 x i64>*
  store <2 x i64> %102, <2 x i64>* %105, align 8, !alias.scope !50, !noalias !47
  %106 = or i64 %72, 12
  %107 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %106
  %108 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %106
  %109 = bitcast %"class.sh::TIntermNode"** %108 to <2 x i64>*
  %110 = load <2 x i64>, <2 x i64>* %109, align 8, !alias.scope !47
  %111 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %108, i64 2
  %112 = bitcast %"class.sh::TIntermNode"** %111 to <2 x i64>*
  %113 = load <2 x i64>, <2 x i64>* %112, align 8, !alias.scope !47
  %114 = bitcast %"class.sh::TIntermNode"** %107 to <2 x i64>*
  store <2 x i64> %110, <2 x i64>* %114, align 8, !alias.scope !50, !noalias !47
  %115 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %107, i64 2
  %116 = bitcast %"class.sh::TIntermNode"** %115 to <2 x i64>*
  store <2 x i64> %113, <2 x i64>* %116, align 8, !alias.scope !50, !noalias !47
  %117 = add i64 %72, 16
  %118 = add i64 %73, -4
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %71, !llvm.loop !52

120:                                              ; preds = %71, %60
  %121 = phi i64 [ 0, %60 ], [ %117, %71 ]
  %122 = icmp eq i64 %67, 0
  br i1 %122, label %139, label %123

123:                                              ; preds = %120, %123
  %124 = phi i64 [ %136, %123 ], [ %121, %120 ]
  %125 = phi i64 [ %137, %123 ], [ %67, %120 ]
  %126 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %124
  %127 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %124
  %128 = bitcast %"class.sh::TIntermNode"** %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 8, !alias.scope !47
  %130 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %127, i64 2
  %131 = bitcast %"class.sh::TIntermNode"** %130 to <2 x i64>*
  %132 = load <2 x i64>, <2 x i64>* %131, align 8, !alias.scope !47
  %133 = bitcast %"class.sh::TIntermNode"** %126 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %133, align 8, !alias.scope !50, !noalias !47
  %134 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %126, i64 2
  %135 = bitcast %"class.sh::TIntermNode"** %134 to <2 x i64>*
  store <2 x i64> %132, <2 x i64>* %135, align 8, !alias.scope !50, !noalias !47
  %136 = add i64 %124, 4
  %137 = add i64 %125, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %123, !llvm.loop !53

139:                                              ; preds = %123, %120
  %140 = icmp eq i64 %39, %61
  br i1 %140, label %141, label %41

141:                                              ; preds = %151, %139
  %142 = phi %"class.sh::TIntermNode"** [ %62, %139 ], [ %158, %151 ]
  %143 = ptrtoint %"class.sh::TIntermNode"** %142 to i64
  br label %144

144:                                              ; preds = %141, %23
  %145 = phi i64 [ %143, %141 ], [ %12, %23 ]
  store i64 %145, i64* %29, align 8
  %146 = icmp eq i64 %26, 0
  br i1 %146, label %160, label %147

147:                                              ; preds = %144
  %148 = sub nsw i64 0, %27
  %149 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %148
  %150 = bitcast %"class.sh::TIntermNode"** %149 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %150, i8* align 8 %5, i64 %26, i1 false) #7
  br label %160

151:                                              ; preds = %41, %151
  %152 = phi %"class.sh::TIntermNode"** [ %158, %151 ], [ %42, %41 ]
  %153 = phi %"class.sh::TIntermNode"** [ %157, %151 ], [ %43, %41 ]
  %154 = bitcast %"class.sh::TIntermNode"** %153 to i64*
  %155 = load i64, i64* %154, align 8
  %156 = bitcast %"class.sh::TIntermNode"** %152 to i64*
  store i64 %155, i64* %156, align 8
  %157 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %153, i64 1
  %158 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %152, i64 1
  %159 = icmp ult %"class.sh::TIntermNode"** %157, %8
  br i1 %159, label %151, label %141, !llvm.loop !54

160:                                              ; preds = %144, %147
  %161 = bitcast %"class.sh::TIntermNode"** %2 to i64*
  %162 = load i64, i64* %161, align 8
  %163 = bitcast %"class.sh::TIntermNode"** %1 to i64*
  store i64 %162, i64* %163, align 8
  br label %578

164:                                              ; preds = %3
  %165 = bitcast %"class.sh::TIntermNode"*** %7 to i64*
  %166 = bitcast %"class.std::__1::vector.32"* %0 to i64*
  %167 = load i64, i64* %166, align 8
  %168 = sub i64 %12, %167
  %169 = ashr exact i64 %168, 3
  %170 = add nsw i64 %169, 1
  %171 = icmp ugt i64 %170, 2305843009213693951
  br i1 %171, label %172, label %174

172:                                              ; preds = %164
  %173 = bitcast %"class.std::__1::vector.32"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %173) #8
  unreachable

174:                                              ; preds = %164
  %175 = bitcast %"class.sh::TIntermNode"*** %9 to i64*
  %176 = sub i64 %13, %167
  %177 = ashr exact i64 %176, 3
  %178 = icmp ult i64 %177, 1152921504606846975
  br i1 %178, label %182, label %179

179:                                              ; preds = %174
  %180 = sub i64 %4, %167
  %181 = ashr exact i64 %180, 3
  br label %189

182:                                              ; preds = %174
  %183 = ashr exact i64 %176, 2
  %184 = icmp ult i64 %183, %170
  %185 = select i1 %184, i64 %170, i64 %183
  %186 = sub i64 %4, %167
  %187 = ashr exact i64 %186, 3
  %188 = icmp eq i64 %185, 0
  br i1 %188, label %196, label %189

189:                                              ; preds = %179, %182
  %190 = phi i64 [ %181, %179 ], [ %187, %182 ]
  %191 = phi i64 [ 2305843009213693951, %179 ], [ %185, %182 ]
  %192 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %193 = shl i64 %191, 3
  %194 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %192, i64 %193) #7
  %195 = bitcast i8* %194 to %"class.sh::TIntermNode"**
  br label %196

196:                                              ; preds = %182, %189
  %197 = phi i64 [ %190, %189 ], [ %187, %182 ]
  %198 = phi i64 [ %191, %189 ], [ 0, %182 ]
  %199 = phi %"class.sh::TIntermNode"** [ %195, %189 ], [ null, %182 ]
  %200 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %199, i64 %197
  %201 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %199, i64 %198
  %202 = ptrtoint %"class.sh::TIntermNode"** %201 to i64
  %203 = icmp eq i64 %197, %198
  br i1 %203, label %204, label %222

204:                                              ; preds = %196
  %205 = icmp sgt i64 %197, 0
  br i1 %205, label %206, label %210

206:                                              ; preds = %204
  %207 = add nuw nsw i64 %197, 1
  %208 = sdiv i64 %207, -2
  %209 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %200, i64 %208
  br label %222

210:                                              ; preds = %204
  %211 = shl nsw i64 %197, 1
  %212 = icmp eq i64 %197, 0
  %213 = select i1 %212, i64 1, i64 %211
  %214 = lshr i64 %213, 2
  %215 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %216 = shl i64 %213, 3
  %217 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %215, i64 %216) #7
  %218 = bitcast i8* %217 to %"class.sh::TIntermNode"**
  %219 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 %214
  %220 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 %213
  %221 = ptrtoint %"class.sh::TIntermNode"** %220 to i64
  br label %222

222:                                              ; preds = %196, %206, %210
  %223 = phi %"class.sh::TIntermNode"** [ %209, %206 ], [ %219, %210 ], [ %200, %196 ]
  %224 = phi i64 [ %202, %206 ], [ %221, %210 ], [ %202, %196 ]
  %225 = bitcast %"class.sh::TIntermNode"** %223 to i64*
  %226 = bitcast %"class.sh::TIntermNode"** %2 to i64*
  %227 = load i64, i64* %226, align 8
  store i64 %227, i64* %225, align 8
  %228 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 1
  %229 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %6, align 8
  %230 = ptrtoint %"class.sh::TIntermNode"** %229 to i64
  %231 = icmp eq %"class.sh::TIntermNode"** %229, %1
  br i1 %231, label %399, label %232

232:                                              ; preds = %222
  %233 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %234 = ptrtoint %"class.sh::TIntermNode"** %233 to i64
  %235 = sub i64 %234, %230
  %236 = lshr i64 %235, 3
  %237 = add nuw nsw i64 %236, 1
  %238 = icmp ult i64 %237, 4
  br i1 %238, label %329, label %239

239:                                              ; preds = %232
  %240 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %241 = ptrtoint %"class.sh::TIntermNode"** %240 to i64
  %242 = sub i64 %241, %230
  %243 = lshr i64 %242, 3
  %244 = xor i64 %243, -1
  %245 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 %244
  %246 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %244
  %247 = icmp ult %"class.sh::TIntermNode"** %245, %1
  %248 = icmp ult %"class.sh::TIntermNode"** %246, %223
  %249 = and i1 %247, %248
  br i1 %249, label %329, label %250

250:                                              ; preds = %239
  %251 = and i64 %237, 4611686018427387900
  %252 = sub nsw i64 0, %251
  %253 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 %252
  %254 = sub nsw i64 0, %251
  %255 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %254
  %256 = add nsw i64 %251, -4
  %257 = lshr exact i64 %256, 2
  %258 = add nuw nsw i64 %257, 1
  %259 = and i64 %258, 1
  %260 = icmp eq i64 %256, 0
  br i1 %260, label %305, label %261

261:                                              ; preds = %250
  %262 = sub nuw nsw i64 %258, %259
  %263 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 -1
  %264 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %265 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 -1
  %266 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  br label %267

267:                                              ; preds = %267, %261
  %268 = phi i64 [ 0, %261 ], [ %302, %267 ]
  %269 = phi i64 [ %262, %261 ], [ %303, %267 ]
  %270 = sub i64 0, %268
  %271 = sub i64 0, %268
  %272 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %263, i64 %270
  %273 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %264, i64 %271
  %274 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %273, i64 -1
  %275 = bitcast %"class.sh::TIntermNode"** %274 to <2 x i64>*
  %276 = load <2 x i64>, <2 x i64>* %275, align 8, !alias.scope !55
  %277 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %273, i64 -2
  %278 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %277, i64 -1
  %279 = bitcast %"class.sh::TIntermNode"** %278 to <2 x i64>*
  %280 = load <2 x i64>, <2 x i64>* %279, align 8, !alias.scope !55
  %281 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %272, i64 -1
  %282 = bitcast %"class.sh::TIntermNode"** %281 to <2 x i64>*
  store <2 x i64> %276, <2 x i64>* %282, align 8, !alias.scope !58, !noalias !55
  %283 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %272, i64 -2
  %284 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %283, i64 -1
  %285 = bitcast %"class.sh::TIntermNode"** %284 to <2 x i64>*
  store <2 x i64> %280, <2 x i64>* %285, align 8, !alias.scope !58, !noalias !55
  %286 = sub nuw nsw i64 -4, %268
  %287 = sub nuw nsw i64 -4, %268
  %288 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %265, i64 %286
  %289 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %266, i64 %287
  %290 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %289, i64 -1
  %291 = bitcast %"class.sh::TIntermNode"** %290 to <2 x i64>*
  %292 = load <2 x i64>, <2 x i64>* %291, align 8, !alias.scope !55
  %293 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %289, i64 -2
  %294 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %293, i64 -1
  %295 = bitcast %"class.sh::TIntermNode"** %294 to <2 x i64>*
  %296 = load <2 x i64>, <2 x i64>* %295, align 8, !alias.scope !55
  %297 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %288, i64 -1
  %298 = bitcast %"class.sh::TIntermNode"** %297 to <2 x i64>*
  store <2 x i64> %292, <2 x i64>* %298, align 8, !alias.scope !58, !noalias !55
  %299 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %288, i64 -2
  %300 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %299, i64 -1
  %301 = bitcast %"class.sh::TIntermNode"** %300 to <2 x i64>*
  store <2 x i64> %296, <2 x i64>* %301, align 8, !alias.scope !58, !noalias !55
  %302 = add i64 %268, 8
  %303 = add i64 %269, -2
  %304 = icmp eq i64 %303, 0
  br i1 %304, label %305, label %267, !llvm.loop !60

305:                                              ; preds = %267, %250
  %306 = phi i64 [ 0, %250 ], [ %302, %267 ]
  %307 = icmp eq i64 %259, 0
  br i1 %307, label %327, label %308

308:                                              ; preds = %305
  %309 = sub i64 0, %306
  %310 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 -1
  %311 = sub i64 0, %306
  %312 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %313 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %310, i64 %309
  %314 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %312, i64 %311
  %315 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %314, i64 -1
  %316 = bitcast %"class.sh::TIntermNode"** %315 to <2 x i64>*
  %317 = load <2 x i64>, <2 x i64>* %316, align 8, !alias.scope !55
  %318 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %314, i64 -2
  %319 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %318, i64 -1
  %320 = bitcast %"class.sh::TIntermNode"** %319 to <2 x i64>*
  %321 = load <2 x i64>, <2 x i64>* %320, align 8, !alias.scope !55
  %322 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %313, i64 -1
  %323 = bitcast %"class.sh::TIntermNode"** %322 to <2 x i64>*
  store <2 x i64> %317, <2 x i64>* %323, align 8, !alias.scope !58, !noalias !55
  %324 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %313, i64 -2
  %325 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %324, i64 -1
  %326 = bitcast %"class.sh::TIntermNode"** %325 to <2 x i64>*
  store <2 x i64> %321, <2 x i64>* %326, align 8, !alias.scope !58, !noalias !55
  br label %327

327:                                              ; preds = %305, %308
  %328 = icmp eq i64 %237, %251
  br i1 %328, label %399, label %329

329:                                              ; preds = %327, %239, %232
  %330 = phi %"class.sh::TIntermNode"** [ %223, %239 ], [ %223, %232 ], [ %253, %327 ]
  %331 = phi %"class.sh::TIntermNode"** [ %1, %239 ], [ %1, %232 ], [ %255, %327 ]
  %332 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %331, i64 -1
  %333 = ptrtoint %"class.sh::TIntermNode"** %332 to i64
  %334 = sub i64 %333, %230
  %335 = lshr i64 %334, 3
  %336 = add nuw nsw i64 %335, 1
  %337 = and i64 %336, 7
  %338 = icmp eq i64 %337, 0
  br i1 %338, label %350, label %339

339:                                              ; preds = %329, %339
  %340 = phi %"class.sh::TIntermNode"** [ %343, %339 ], [ %330, %329 ]
  %341 = phi %"class.sh::TIntermNode"** [ %344, %339 ], [ %331, %329 ]
  %342 = phi i64 [ %348, %339 ], [ %337, %329 ]
  %343 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %340, i64 -1
  %344 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %341, i64 -1
  %345 = bitcast %"class.sh::TIntermNode"** %344 to i64*
  %346 = load i64, i64* %345, align 8
  %347 = bitcast %"class.sh::TIntermNode"** %343 to i64*
  store i64 %346, i64* %347, align 8
  %348 = add i64 %342, -1
  %349 = icmp eq i64 %348, 0
  br i1 %349, label %350, label %339, !llvm.loop !61

350:                                              ; preds = %339, %329
  %351 = phi %"class.sh::TIntermNode"** [ undef, %329 ], [ %343, %339 ]
  %352 = phi %"class.sh::TIntermNode"** [ %330, %329 ], [ %343, %339 ]
  %353 = phi %"class.sh::TIntermNode"** [ %331, %329 ], [ %344, %339 ]
  %354 = icmp ult i64 %334, 56
  br i1 %354, label %399, label %355

355:                                              ; preds = %350, %355
  %356 = phi %"class.sh::TIntermNode"** [ %393, %355 ], [ %352, %350 ]
  %357 = phi %"class.sh::TIntermNode"** [ %394, %355 ], [ %353, %350 ]
  %358 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -1
  %359 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -1
  %360 = bitcast %"class.sh::TIntermNode"** %359 to i64*
  %361 = load i64, i64* %360, align 8
  %362 = bitcast %"class.sh::TIntermNode"** %358 to i64*
  store i64 %361, i64* %362, align 8
  %363 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -2
  %364 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -2
  %365 = bitcast %"class.sh::TIntermNode"** %364 to i64*
  %366 = load i64, i64* %365, align 8
  %367 = bitcast %"class.sh::TIntermNode"** %363 to i64*
  store i64 %366, i64* %367, align 8
  %368 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -3
  %369 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -3
  %370 = bitcast %"class.sh::TIntermNode"** %369 to i64*
  %371 = load i64, i64* %370, align 8
  %372 = bitcast %"class.sh::TIntermNode"** %368 to i64*
  store i64 %371, i64* %372, align 8
  %373 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -4
  %374 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -4
  %375 = bitcast %"class.sh::TIntermNode"** %374 to i64*
  %376 = load i64, i64* %375, align 8
  %377 = bitcast %"class.sh::TIntermNode"** %373 to i64*
  store i64 %376, i64* %377, align 8
  %378 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -5
  %379 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -5
  %380 = bitcast %"class.sh::TIntermNode"** %379 to i64*
  %381 = load i64, i64* %380, align 8
  %382 = bitcast %"class.sh::TIntermNode"** %378 to i64*
  store i64 %381, i64* %382, align 8
  %383 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -6
  %384 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -6
  %385 = bitcast %"class.sh::TIntermNode"** %384 to i64*
  %386 = load i64, i64* %385, align 8
  %387 = bitcast %"class.sh::TIntermNode"** %383 to i64*
  store i64 %386, i64* %387, align 8
  %388 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -7
  %389 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -7
  %390 = bitcast %"class.sh::TIntermNode"** %389 to i64*
  %391 = load i64, i64* %390, align 8
  %392 = bitcast %"class.sh::TIntermNode"** %388 to i64*
  store i64 %391, i64* %392, align 8
  %393 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -8
  %394 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -8
  %395 = bitcast %"class.sh::TIntermNode"** %394 to i64*
  %396 = load i64, i64* %395, align 8
  %397 = bitcast %"class.sh::TIntermNode"** %393 to i64*
  store i64 %396, i64* %397, align 8
  %398 = icmp eq %"class.sh::TIntermNode"** %394, %229
  br i1 %398, label %399, label %355, !llvm.loop !62

399:                                              ; preds = %350, %355, %327, %222
  %400 = phi %"class.sh::TIntermNode"** [ %223, %222 ], [ %253, %327 ], [ %351, %350 ], [ %393, %355 ]
  %401 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %402 = icmp eq %"class.sh::TIntermNode"** %401, %1
  br i1 %402, label %574, label %403

403:                                              ; preds = %399
  %404 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %401, i64 -1
  %405 = ptrtoint %"class.sh::TIntermNode"** %404 to i64
  %406 = sub i64 %405, %4
  %407 = lshr i64 %406, 3
  %408 = add nuw nsw i64 %407, 1
  %409 = icmp ult i64 %408, 4
  br i1 %409, label %503, label %410

410:                                              ; preds = %403
  %411 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %401, i64 -1
  %412 = ptrtoint %"class.sh::TIntermNode"** %411 to i64
  %413 = sub i64 %412, %4
  %414 = lshr i64 %413, 3
  %415 = add nuw nsw i64 %414, 2
  %416 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 %415
  %417 = add nuw nsw i64 %414, 1
  %418 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %417
  %419 = icmp ult %"class.sh::TIntermNode"** %228, %418
  %420 = icmp ugt %"class.sh::TIntermNode"** %416, %1
  %421 = and i1 %419, %420
  br i1 %421, label %503, label %422

422:                                              ; preds = %410
  %423 = and i64 %408, 4611686018427387900
  %424 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %423
  %425 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %423
  %426 = add nsw i64 %423, -4
  %427 = lshr exact i64 %426, 2
  %428 = add nuw nsw i64 %427, 1
  %429 = and i64 %428, 3
  %430 = icmp ult i64 %426, 12
  br i1 %430, label %482, label %431

431:                                              ; preds = %422
  %432 = sub nsw i64 %428, %429
  br label %433

433:                                              ; preds = %433, %431
  %434 = phi i64 [ 0, %431 ], [ %479, %433 ]
  %435 = phi i64 [ %432, %431 ], [ %480, %433 ]
  %436 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %434
  %437 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %434
  %438 = bitcast %"class.sh::TIntermNode"** %437 to <2 x i64>*
  %439 = load <2 x i64>, <2 x i64>* %438, align 8, !alias.scope !63
  %440 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %437, i64 2
  %441 = bitcast %"class.sh::TIntermNode"** %440 to <2 x i64>*
  %442 = load <2 x i64>, <2 x i64>* %441, align 8, !alias.scope !63
  %443 = bitcast %"class.sh::TIntermNode"** %436 to <2 x i64>*
  store <2 x i64> %439, <2 x i64>* %443, align 8, !alias.scope !66, !noalias !63
  %444 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %436, i64 2
  %445 = bitcast %"class.sh::TIntermNode"** %444 to <2 x i64>*
  store <2 x i64> %442, <2 x i64>* %445, align 8, !alias.scope !66, !noalias !63
  %446 = or i64 %434, 4
  %447 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %446
  %448 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %446
  %449 = bitcast %"class.sh::TIntermNode"** %448 to <2 x i64>*
  %450 = load <2 x i64>, <2 x i64>* %449, align 8, !alias.scope !63
  %451 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %448, i64 2
  %452 = bitcast %"class.sh::TIntermNode"** %451 to <2 x i64>*
  %453 = load <2 x i64>, <2 x i64>* %452, align 8, !alias.scope !63
  %454 = bitcast %"class.sh::TIntermNode"** %447 to <2 x i64>*
  store <2 x i64> %450, <2 x i64>* %454, align 8, !alias.scope !66, !noalias !63
  %455 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %447, i64 2
  %456 = bitcast %"class.sh::TIntermNode"** %455 to <2 x i64>*
  store <2 x i64> %453, <2 x i64>* %456, align 8, !alias.scope !66, !noalias !63
  %457 = or i64 %434, 8
  %458 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %457
  %459 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %457
  %460 = bitcast %"class.sh::TIntermNode"** %459 to <2 x i64>*
  %461 = load <2 x i64>, <2 x i64>* %460, align 8, !alias.scope !63
  %462 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %459, i64 2
  %463 = bitcast %"class.sh::TIntermNode"** %462 to <2 x i64>*
  %464 = load <2 x i64>, <2 x i64>* %463, align 8, !alias.scope !63
  %465 = bitcast %"class.sh::TIntermNode"** %458 to <2 x i64>*
  store <2 x i64> %461, <2 x i64>* %465, align 8, !alias.scope !66, !noalias !63
  %466 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %458, i64 2
  %467 = bitcast %"class.sh::TIntermNode"** %466 to <2 x i64>*
  store <2 x i64> %464, <2 x i64>* %467, align 8, !alias.scope !66, !noalias !63
  %468 = or i64 %434, 12
  %469 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %468
  %470 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %468
  %471 = bitcast %"class.sh::TIntermNode"** %470 to <2 x i64>*
  %472 = load <2 x i64>, <2 x i64>* %471, align 8, !alias.scope !63
  %473 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %470, i64 2
  %474 = bitcast %"class.sh::TIntermNode"** %473 to <2 x i64>*
  %475 = load <2 x i64>, <2 x i64>* %474, align 8, !alias.scope !63
  %476 = bitcast %"class.sh::TIntermNode"** %469 to <2 x i64>*
  store <2 x i64> %472, <2 x i64>* %476, align 8, !alias.scope !66, !noalias !63
  %477 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 2
  %478 = bitcast %"class.sh::TIntermNode"** %477 to <2 x i64>*
  store <2 x i64> %475, <2 x i64>* %478, align 8, !alias.scope !66, !noalias !63
  %479 = add i64 %434, 16
  %480 = add i64 %435, -4
  %481 = icmp eq i64 %480, 0
  br i1 %481, label %482, label %433, !llvm.loop !68

482:                                              ; preds = %433, %422
  %483 = phi i64 [ 0, %422 ], [ %479, %433 ]
  %484 = icmp eq i64 %429, 0
  br i1 %484, label %501, label %485

485:                                              ; preds = %482, %485
  %486 = phi i64 [ %498, %485 ], [ %483, %482 ]
  %487 = phi i64 [ %499, %485 ], [ %429, %482 ]
  %488 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %486
  %489 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %486
  %490 = bitcast %"class.sh::TIntermNode"** %489 to <2 x i64>*
  %491 = load <2 x i64>, <2 x i64>* %490, align 8, !alias.scope !63
  %492 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %489, i64 2
  %493 = bitcast %"class.sh::TIntermNode"** %492 to <2 x i64>*
  %494 = load <2 x i64>, <2 x i64>* %493, align 8, !alias.scope !63
  %495 = bitcast %"class.sh::TIntermNode"** %488 to <2 x i64>*
  store <2 x i64> %491, <2 x i64>* %495, align 8, !alias.scope !66, !noalias !63
  %496 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %488, i64 2
  %497 = bitcast %"class.sh::TIntermNode"** %496 to <2 x i64>*
  store <2 x i64> %494, <2 x i64>* %497, align 8, !alias.scope !66, !noalias !63
  %498 = add i64 %486, 4
  %499 = add i64 %487, -1
  %500 = icmp eq i64 %499, 0
  br i1 %500, label %501, label %485, !llvm.loop !69

501:                                              ; preds = %485, %482
  %502 = icmp eq i64 %408, %423
  br i1 %502, label %574, label %503

503:                                              ; preds = %501, %410, %403
  %504 = phi %"class.sh::TIntermNode"** [ %228, %410 ], [ %228, %403 ], [ %424, %501 ]
  %505 = phi %"class.sh::TIntermNode"** [ %1, %410 ], [ %1, %403 ], [ %425, %501 ]
  %506 = ptrtoint %"class.sh::TIntermNode"** %505 to i64
  %507 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %401, i64 -1
  %508 = ptrtoint %"class.sh::TIntermNode"** %507 to i64
  %509 = sub i64 %508, %506
  %510 = lshr i64 %509, 3
  %511 = add nuw nsw i64 %510, 1
  %512 = and i64 %511, 7
  %513 = icmp eq i64 %512, 0
  br i1 %513, label %525, label %514

514:                                              ; preds = %503, %514
  %515 = phi %"class.sh::TIntermNode"** [ %522, %514 ], [ %504, %503 ]
  %516 = phi %"class.sh::TIntermNode"** [ %521, %514 ], [ %505, %503 ]
  %517 = phi i64 [ %523, %514 ], [ %512, %503 ]
  %518 = bitcast %"class.sh::TIntermNode"** %515 to i64*
  %519 = bitcast %"class.sh::TIntermNode"** %516 to i64*
  %520 = load i64, i64* %519, align 8
  store i64 %520, i64* %518, align 8
  %521 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %516, i64 1
  %522 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %515, i64 1
  %523 = add i64 %517, -1
  %524 = icmp eq i64 %523, 0
  br i1 %524, label %525, label %514, !llvm.loop !70

525:                                              ; preds = %514, %503
  %526 = phi %"class.sh::TIntermNode"** [ undef, %503 ], [ %522, %514 ]
  %527 = phi %"class.sh::TIntermNode"** [ %504, %503 ], [ %522, %514 ]
  %528 = phi %"class.sh::TIntermNode"** [ %505, %503 ], [ %521, %514 ]
  %529 = icmp ult i64 %509, 56
  br i1 %529, label %574, label %530

530:                                              ; preds = %525, %530
  %531 = phi %"class.sh::TIntermNode"** [ %572, %530 ], [ %527, %525 ]
  %532 = phi %"class.sh::TIntermNode"** [ %571, %530 ], [ %528, %525 ]
  %533 = bitcast %"class.sh::TIntermNode"** %531 to i64*
  %534 = bitcast %"class.sh::TIntermNode"** %532 to i64*
  %535 = load i64, i64* %534, align 8
  store i64 %535, i64* %533, align 8
  %536 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 1
  %537 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 1
  %538 = bitcast %"class.sh::TIntermNode"** %537 to i64*
  %539 = bitcast %"class.sh::TIntermNode"** %536 to i64*
  %540 = load i64, i64* %539, align 8
  store i64 %540, i64* %538, align 8
  %541 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 2
  %542 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 2
  %543 = bitcast %"class.sh::TIntermNode"** %542 to i64*
  %544 = bitcast %"class.sh::TIntermNode"** %541 to i64*
  %545 = load i64, i64* %544, align 8
  store i64 %545, i64* %543, align 8
  %546 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 3
  %547 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 3
  %548 = bitcast %"class.sh::TIntermNode"** %547 to i64*
  %549 = bitcast %"class.sh::TIntermNode"** %546 to i64*
  %550 = load i64, i64* %549, align 8
  store i64 %550, i64* %548, align 8
  %551 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 4
  %552 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 4
  %553 = bitcast %"class.sh::TIntermNode"** %552 to i64*
  %554 = bitcast %"class.sh::TIntermNode"** %551 to i64*
  %555 = load i64, i64* %554, align 8
  store i64 %555, i64* %553, align 8
  %556 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 5
  %557 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 5
  %558 = bitcast %"class.sh::TIntermNode"** %557 to i64*
  %559 = bitcast %"class.sh::TIntermNode"** %556 to i64*
  %560 = load i64, i64* %559, align 8
  store i64 %560, i64* %558, align 8
  %561 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 6
  %562 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 6
  %563 = bitcast %"class.sh::TIntermNode"** %562 to i64*
  %564 = bitcast %"class.sh::TIntermNode"** %561 to i64*
  %565 = load i64, i64* %564, align 8
  store i64 %565, i64* %563, align 8
  %566 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 7
  %567 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 7
  %568 = bitcast %"class.sh::TIntermNode"** %567 to i64*
  %569 = bitcast %"class.sh::TIntermNode"** %566 to i64*
  %570 = load i64, i64* %569, align 8
  store i64 %570, i64* %568, align 8
  %571 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 8
  %572 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 8
  %573 = icmp eq %"class.sh::TIntermNode"** %571, %401
  br i1 %573, label %574, label %530, !llvm.loop !71

574:                                              ; preds = %525, %530, %501, %399
  %575 = phi %"class.sh::TIntermNode"** [ %228, %399 ], [ %424, %501 ], [ %526, %525 ], [ %572, %530 ]
  %576 = ptrtoint %"class.sh::TIntermNode"** %400 to i64
  %577 = ptrtoint %"class.sh::TIntermNode"** %575 to i64
  store i64 %576, i64* %166, align 8
  store i64 %577, i64* %165, align 8
  store i64 %224, i64* %175, align 8
  ret %"class.sh::TIntermNode"** %223

578:                                              ; preds = %16, %160
  ret %"class.sh::TIntermNode"** %1
}

declare %"class.sh::TIntermFunctionDefinition"* @_ZN2sh36CreateInternalFunctionDefinitionNodeERKNS_9TFunctionEPNS_12TIntermBlockE(%"class.sh::TFunction"* dereferenceable(80), %"class.sh::TIntermBlock"*) local_unnamed_addr #2

declare void @_ZN2sh12TIntermBlock15appendStatementEPNS_11TIntermNodeE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

declare %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate18CreateFunctionCallERKNS_9TFunctionEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TFunction"* dereferenceable(80), %"class.sh::TVector.31"*) local_unnamed_addr #2

declare %"class.sh::TIntermBlock"* @_ZN2sh12FindMainBodyEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !10}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !8}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !8}
!27 = distinct !{!27, !10}
!28 = distinct !{!28, !8}
!29 = distinct !{!29, !10}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = distinct !{!35, !8}
!36 = distinct !{!36, !10}
!37 = distinct !{!37, !8}
!38 = !{!39}
!39 = distinct !{!39, !40}
!40 = distinct !{!40, !"LVerDomain"}
!41 = !{!42}
!42 = distinct !{!42, !40}
!43 = distinct !{!43, !8}
!44 = distinct !{!44, !10}
!45 = distinct !{!45, !10}
!46 = distinct !{!46, !8}
!47 = !{!48}
!48 = distinct !{!48, !49}
!49 = distinct !{!49, !"LVerDomain"}
!50 = !{!51}
!51 = distinct !{!51, !49}
!52 = distinct !{!52, !8}
!53 = distinct !{!53, !10}
!54 = distinct !{!54, !8}
!55 = !{!56}
!56 = distinct !{!56, !57}
!57 = distinct !{!57, !"LVerDomain"}
!58 = !{!59}
!59 = distinct !{!59, !57}
!60 = distinct !{!60, !8}
!61 = distinct !{!61, !10}
!62 = distinct !{!62, !8}
!63 = !{!64}
!64 = distinct !{!64, !65}
!65 = distinct !{!65, !"LVerDomain"}
!66 = !{!67}
!67 = distinct !{!67, !65}
!68 = distinct !{!68, !8}
!69 = distinct !{!69, !10}
!70 = distinct !{!70, !10}
!71 = distinct !{!71, !8}
