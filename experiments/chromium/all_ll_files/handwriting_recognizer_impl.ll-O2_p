; ModuleID = '../../content/browser/handwriting/handwriting_recognizer_impl.cc'
source_filename = "../../content/browser/handwriting/handwriting_recognizer_impl.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.content::HandwritingRecognizerImpl" = type { %"class.handwriting::mojom::HandwritingRecognizer" }
%"class.handwriting::mojom::HandwritingRecognizer" = type { i32 (...)** }
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.handwriting::mojom::HandwritingModelConstraint"* }
%"class.handwriting::mojom::HandwritingModelConstraint" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.0" }
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.std::__1::basic_string"* }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.9" }
%"struct.std::__1::__atomic_base.9" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.mojo::PendingRemote" = type { %"struct.mojo::internal::PendingRemoteState" }
%"struct.mojo::internal::PendingRemoteState" = type { %"class.mojo::ScopedHandleBase", i32 }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessagePipeHandle" }
%"class.mojo::MessagePipeHandle" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { %"class.mojo::StructPtr.12"*, %"class.mojo::StructPtr.12"*, %"class.std::__1::__compressed_pair.34" }
%"class.mojo::StructPtr.12" = type { %"class.std::__1::unique_ptr.13" }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.handwriting::mojom::HandwritingStroke"* }
%"class.handwriting::mojom::HandwritingStroke" = type { %"class.std::__1::vector.16" }
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { %"class.mojo::StructPtr.18"*, %"class.mojo::StructPtr.18"*, %"class.std::__1::__compressed_pair.26" }
%"class.mojo::StructPtr.18" = type { %"class.std::__1::unique_ptr.19" }
%"class.std::__1::unique_ptr.19" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.handwriting::mojom::HandwritingPoint"* }
%"class.handwriting::mojom::HandwritingPoint" = type { %"class.gfx::PointF", %"class.absl::optional" }
%"class.gfx::PointF" = type { float, float }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.22 }
%union.anon.22 = type { %"class.base::TimeDelta" }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.mojo::StructPtr.18"* }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.mojo::StructPtr.12"* }
%"class.mojo::InlinedStructPtr" = type { %"class.handwriting::mojom::HandwritingHints", i32, [4 x i8] }
%"class.handwriting::mojom::HandwritingHints" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, [4 x i8] }>
%"class.base::OnceCallback.39" = type { %"class.base::internal::CallbackBase" }
%"class.absl::optional.40" = type { %"class.absl::optional_internal::optional_data.41" }
%"class.absl::optional_internal::optional_data.41" = type { %"class.absl::optional_internal::optional_data_base.42" }
%"class.absl::optional_internal::optional_data_base.42" = type { %"class.absl::optional_internal::optional_data_dtor_base.43" }
%"class.absl::optional_internal::optional_data_dtor_base.43" = type { i8, %union.anon.44 }
%union.anon.44 = type { %"class.std::__1::vector.45" }
%"class.std::__1::vector.45" = type { %"class.std::__1::__vector_base.46" }
%"class.std::__1::__vector_base.46" = type { %"class.mojo::StructPtr.47"*, %"class.mojo::StructPtr.47"*, %"class.std::__1::__compressed_pair.76" }
%"class.mojo::StructPtr.47" = type { %"class.std::__1::unique_ptr.48" }
%"class.std::__1::unique_ptr.48" = type { %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.handwriting::mojom::HandwritingPrediction"* }
%"class.handwriting::mojom::HandwritingPrediction" = type { %"class.std::__1::basic_string", %"class.std::__1::vector.51" }
%"class.std::__1::vector.51" = type { %"class.std::__1::__vector_base.52" }
%"class.std::__1::__vector_base.52" = type { %"class.mojo::StructPtr.53"*, %"class.mojo::StructPtr.53"*, %"class.std::__1::__compressed_pair.68" }
%"class.mojo::StructPtr.53" = type { %"class.std::__1::unique_ptr.54" }
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"class.handwriting::mojom::HandwritingSegment"* }
%"class.handwriting::mojom::HandwritingSegment" = type { %"class.std::__1::basic_string", i32, i32, %"class.std::__1::vector.57" }
%"class.std::__1::vector.57" = type { %"class.std::__1::__vector_base.58" }
%"class.std::__1::__vector_base.58" = type { %"class.mojo::InlinedStructPtr.59"*, %"class.mojo::InlinedStructPtr.59"*, %"class.std::__1::__compressed_pair.60" }
%"class.mojo::InlinedStructPtr.59" = type { %"class.handwriting::mojom::HandwritingDrawingSegment", i32 }
%"class.handwriting::mojom::HandwritingDrawingSegment" = type { i32, i32, i32 }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"class.mojo::InlinedStructPtr.59"* }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.mojo::StructPtr.53"* }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"class.mojo::StructPtr.47"* }

@_ZTVN7content25HandwritingRecognizerImplE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.content::HandwritingRecognizerImpl"*)* @_ZN7content25HandwritingRecognizerImplD2Ev to i8*), i8* bitcast (void (%"class.content::HandwritingRecognizerImpl"*)* @_ZN7content25HandwritingRecognizerImplD0Ev to i8*), i8* bitcast (void (%"class.content::HandwritingRecognizerImpl"*, %"class.std::__1::vector.10"*, %"class.mojo::InlinedStructPtr"*, %"class.base::OnceCallback.39"*)* @_ZN7content25HandwritingRecognizerImpl13GetPredictionENSt3__16vectorIN4mojo9StructPtrIN11handwriting5mojom17HandwritingStrokeEEENS1_9allocatorIS8_EEEENS3_16InlinedStructPtrINS6_16HandwritingHintsEEEN4base12OnceCallbackIFvN4absl8optionalINS2_INS4_INS6_21HandwritingPredictionEEENS9_ISK_EEEEEEEEE to i8*)] }, align 8

@_ZN7content25HandwritingRecognizerImplC1Ev = hidden unnamed_addr alias void (%"class.content::HandwritingRecognizerImpl"*), void (%"class.content::HandwritingRecognizerImpl"*)* @_ZN7content25HandwritingRecognizerImplC2Ev
@_ZN7content25HandwritingRecognizerImplD1Ev = hidden unnamed_addr alias void (%"class.content::HandwritingRecognizerImpl"*), void (%"class.content::HandwritingRecognizerImpl"*)* @_ZN7content25HandwritingRecognizerImplD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content25HandwritingRecognizerImpl6CreateEN4mojo9StructPtrIN11handwriting5mojom26HandwritingModelConstraintEEEN4base12OnceCallbackIFvNS4_33CreateHandwritingRecognizerResultENS1_13PendingRemoteINS4_21HandwritingRecognizerEEEEEE(%"class.mojo::StructPtr"* nocapture readnone, %"class.base::OnceCallback"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::OnceCallback", align 8
  %4 = alloca i64, align 8
  %5 = bitcast i64* %4 to %"class.mojo::PendingRemote"*
  store i64 0, i64* %4, align 8, !alias.scope !2
  %6 = bitcast i64* %4 to %"struct.mojo::internal::PendingRemoteState"*
  call void @_ZN4mojo8internal18PendingRemoteStateC1Ev(%"struct.mojo::internal::PendingRemoteState"* nonnull %6) #7
  %7 = bitcast %"class.base::OnceCallback"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #7
  %8 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %1, i64 0, i32 0, i32 0, i32 0
  %9 = bitcast %"class.base::OnceCallback"* %1 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.base::OnceCallback"* %3 to i64*
  store i64 %10, i64* %11, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %8, align 8
  %12 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0
  %13 = inttoptr i64 %10 to %"class.base::internal::BindStateBase"*
  %14 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %13, i64 0, i32 1
  %15 = bitcast void ()** %14 to void (%"class.base::internal::BindStateBase"*, i32, %"class.mojo::PendingRemote"*)**
  %16 = load void (%"class.base::internal::BindStateBase"*, i32, %"class.mojo::PendingRemote"*)*, void (%"class.base::internal::BindStateBase"*, i32, %"class.mojo::PendingRemote"*)** %15, align 8
  call void %16(%"class.base::internal::BindStateBase"* %13, i32 1, %"class.mojo::PendingRemote"* nonnull dereferenceable(8) %5) #7
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %12) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #7
  call void @_ZN4mojo8internal18PendingRemoteStateD1Ev(%"struct.mojo::internal::PendingRemoteState"* nonnull %6) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN7content25HandwritingRecognizerImplC2Ev(%"class.content::HandwritingRecognizerImpl"* nocapture) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.content::HandwritingRecognizerImpl", %"class.content::HandwritingRecognizerImpl"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN7content25HandwritingRecognizerImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN7content25HandwritingRecognizerImplD2Ev(%"class.content::HandwritingRecognizerImpl"* nocapture) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content25HandwritingRecognizerImplD0Ev(%"class.content::HandwritingRecognizerImpl"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.content::HandwritingRecognizerImpl"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content25HandwritingRecognizerImpl13GetPredictionENSt3__16vectorIN4mojo9StructPtrIN11handwriting5mojom17HandwritingStrokeEEENS1_9allocatorIS8_EEEENS3_16InlinedStructPtrINS6_16HandwritingHintsEEEN4base12OnceCallbackIFvN4absl8optionalINS2_INS4_INS6_21HandwritingPredictionEEENS9_ISK_EEEEEEEEE(%"class.content::HandwritingRecognizerImpl"* nocapture readnone, %"class.std::__1::vector.10"* nocapture readnone, %"class.mojo::InlinedStructPtr"* nocapture readnone, %"class.base::OnceCallback.39"* nocapture) unnamed_addr #0 align 2 {
  %5 = alloca %"class.base::OnceCallback.39", align 8
  %6 = alloca %"class.absl::optional.40", align 8
  %7 = getelementptr inbounds %"class.absl::optional.40", %"class.absl::optional.40"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %7, align 8
  %8 = getelementptr inbounds %"class.absl::optional.40", %"class.absl::optional.40"* %6, i64 0, i32 0, i32 0, i32 0, i32 1
  %9 = bitcast %union.anon.44* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #7
  %10 = bitcast %"class.base::OnceCallback.39"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #7
  %11 = getelementptr inbounds %"class.base::OnceCallback.39", %"class.base::OnceCallback.39"* %3, i64 0, i32 0, i32 0, i32 0
  %12 = bitcast %"class.base::OnceCallback.39"* %3 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.base::OnceCallback.39"* %5 to i64*
  store i64 %13, i64* %14, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %11, align 8
  %15 = getelementptr inbounds %"class.base::OnceCallback.39", %"class.base::OnceCallback.39"* %5, i64 0, i32 0
  %16 = inttoptr i64 %13 to %"class.base::internal::BindStateBase"*
  %17 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %16, i64 0, i32 1
  %18 = bitcast void ()** %17 to void (%"class.base::internal::BindStateBase"*, %"class.absl::optional.40"*)**
  %19 = load void (%"class.base::internal::BindStateBase"*, %"class.absl::optional.40"*)*, void (%"class.base::internal::BindStateBase"*, %"class.absl::optional.40"*)** %18, align 8
  call void %19(%"class.base::internal::BindStateBase"* %16, %"class.absl::optional.40"* nonnull dereferenceable(32) %6) #7
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %15) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #7
  %20 = load i8, i8* %7, align 8, !range !5
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %48, label %22

22:                                               ; preds = %4
  %23 = getelementptr inbounds %"class.absl::optional.40", %"class.absl::optional.40"* %6, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %24 = getelementptr inbounds %"class.std::__1::vector.45", %"class.std::__1::vector.45"* %23, i64 0, i32 0, i32 0
  %25 = load %"class.mojo::StructPtr.47"*, %"class.mojo::StructPtr.47"** %24, align 8
  %26 = icmp eq %"class.mojo::StructPtr.47"* %25, null
  br i1 %26, label %47, label %27

27:                                               ; preds = %22
  %28 = bitcast %"class.mojo::StructPtr.47"* %25 to i8*
  %29 = getelementptr inbounds %"class.absl::optional.40", %"class.absl::optional.40"* %6, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %30 = load %"class.mojo::StructPtr.47"*, %"class.mojo::StructPtr.47"** %29, align 8
  %31 = icmp eq %"class.mojo::StructPtr.47"* %30, %25
  br i1 %31, label %45, label %32

32:                                               ; preds = %27, %40
  %33 = phi %"class.mojo::StructPtr.47"* [ %34, %40 ], [ %30, %27 ]
  %34 = getelementptr inbounds %"class.mojo::StructPtr.47", %"class.mojo::StructPtr.47"* %33, i64 -1
  %35 = getelementptr inbounds %"class.mojo::StructPtr.47", %"class.mojo::StructPtr.47"* %34, i64 0, i32 0, i32 0, i32 0, i32 0
  %36 = load %"class.handwriting::mojom::HandwritingPrediction"*, %"class.handwriting::mojom::HandwritingPrediction"** %35, align 8
  store %"class.handwriting::mojom::HandwritingPrediction"* null, %"class.handwriting::mojom::HandwritingPrediction"** %35, align 8
  %37 = icmp eq %"class.handwriting::mojom::HandwritingPrediction"* %36, null
  br i1 %37, label %40, label %38

38:                                               ; preds = %32
  call void @_ZN11handwriting5mojom21HandwritingPredictionD1Ev(%"class.handwriting::mojom::HandwritingPrediction"* nonnull %36) #7
  %39 = bitcast %"class.handwriting::mojom::HandwritingPrediction"* %36 to i8*
  call void @_ZdlPv(i8* %39) #8
  br label %40

40:                                               ; preds = %38, %32
  %41 = icmp eq %"class.mojo::StructPtr.47"* %34, %25
  br i1 %41, label %42, label %32

42:                                               ; preds = %40
  %43 = bitcast %"class.std::__1::vector.45"* %23 to i8**
  %44 = load i8*, i8** %43, align 8
  br label %45

45:                                               ; preds = %42, %27
  %46 = phi i8* [ %44, %42 ], [ %28, %27 ]
  store %"class.mojo::StructPtr.47"* %25, %"class.mojo::StructPtr.47"** %29, align 8
  call void @_ZdlPv(i8* %46) #8
  br label %47

47:                                               ; preds = %45, %22
  store i8 0, i8* %7, align 8
  br label %48

48:                                               ; preds = %4, %47
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4mojo8internal18PendingRemoteStateD1Ev(%"struct.mojo::internal::PendingRemoteState"*) unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind
declare void @_ZN11handwriting5mojom21HandwritingPredictionD1Ev(%"class.handwriting::mojom::HandwritingPrediction"*) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #5

declare void @_ZN4mojo8internal18PendingRemoteStateC1Ev(%"struct.mojo::internal::PendingRemoteState"*) unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK4mojo10NullRemotecvNS_13PendingRemoteIT_EEIN11handwriting5mojom21HandwritingRecognizerEEEv: argument 0"}
!4 = distinct !{!4, !"_ZNK4mojo10NullRemotecvNS_13PendingRemoteIT_EEIN11handwriting5mojom21HandwritingRecognizerEEEv"}
!5 = !{i8 0, i8 2}
