; ModuleID = '../../third_party/dav1d/libdav1d/src/film_grain_tmpl.c'
source_filename = "../../third_party/dav1d/libdav1d/src/film_grain_tmpl.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Dav1dFilmGrainDSPContext = type { void ([82 x i8]*, %struct.Dav1dFilmGrainData*)*, [3 x void ([82 x i8]*, [82 x i8]*, %struct.Dav1dFilmGrainData*, i64)*], void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i64, i8*, [82 x i8]*, i32, i32)*, [3 x void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i32, i8*, [82 x i8]*, i32, i32, i8*, i64, i32, i32)*] }
%struct.Dav1dFilmGrainData = type { i32, i32, [14 x [2 x i8]], i32, [2 x i32], [2 x [10 x [2 x i8]]], i32, i32, [24 x i8], [2 x [28 x i8]], i64, i32, [2 x i32], [2 x i32], [2 x i32], i32, i32 }

@dav1d_gaussian_sequence = external local_unnamed_addr constant [2048 x i16], align 16
@fgy_32x32xn_c.w = internal unnamed_addr constant [2 x [2 x i32]] [[2 x i32] [i32 27, i32 17], [2 x i32] [i32 17, i32 27]], align 16
@fguv_32x32xn_c.w = internal unnamed_addr constant [2 x [2 x [2 x i32]]] [[2 x [2 x i32]] [[2 x i32] [i32 27, i32 17], [2 x i32] [i32 17, i32 27]], [2 x [2 x i32]] [[2 x i32] [i32 23, i32 22], [2 x i32] zeroinitializer]], align 16

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @dav1d_film_grain_dsp_init_8bpc(%struct.Dav1dFilmGrainDSPContext*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.Dav1dFilmGrainDSPContext, %struct.Dav1dFilmGrainDSPContext* %0, i64 0, i32 0
  store void ([82 x i8]*, %struct.Dav1dFilmGrainData*)* @generate_grain_y_c, void ([82 x i8]*, %struct.Dav1dFilmGrainData*)** %2, align 8
  %3 = getelementptr inbounds %struct.Dav1dFilmGrainDSPContext, %struct.Dav1dFilmGrainDSPContext* %0, i64 0, i32 1, i64 0
  %4 = bitcast void ([82 x i8]*, [82 x i8]*, %struct.Dav1dFilmGrainData*, i64)** %3 to <2 x void ([82 x i8]*, [82 x i8]*, %struct.Dav1dFilmGrainData*, i64)*>*
  store <2 x void ([82 x i8]*, [82 x i8]*, %struct.Dav1dFilmGrainData*, i64)*> <void ([82 x i8]*, [82 x i8]*, %struct.Dav1dFilmGrainData*, i64)* @generate_grain_uv_420_c, void ([82 x i8]*, [82 x i8]*, %struct.Dav1dFilmGrainData*, i64)* @generate_grain_uv_422_c>, <2 x void ([82 x i8]*, [82 x i8]*, %struct.Dav1dFilmGrainData*, i64)*>* %4, align 8
  %5 = getelementptr inbounds %struct.Dav1dFilmGrainDSPContext, %struct.Dav1dFilmGrainDSPContext* %0, i64 0, i32 1, i64 2
  store void ([82 x i8]*, [82 x i8]*, %struct.Dav1dFilmGrainData*, i64)* @generate_grain_uv_444_c, void ([82 x i8]*, [82 x i8]*, %struct.Dav1dFilmGrainData*, i64)** %5, align 8
  %6 = getelementptr inbounds %struct.Dav1dFilmGrainDSPContext, %struct.Dav1dFilmGrainDSPContext* %0, i64 0, i32 2
  store void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i64, i8*, [82 x i8]*, i32, i32)* @fgy_32x32xn_c, void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i64, i8*, [82 x i8]*, i32, i32)** %6, align 8
  %7 = getelementptr inbounds %struct.Dav1dFilmGrainDSPContext, %struct.Dav1dFilmGrainDSPContext* %0, i64 0, i32 3, i64 0
  %8 = bitcast void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i32, i8*, [82 x i8]*, i32, i32, i8*, i64, i32, i32)** %7 to <2 x void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i32, i8*, [82 x i8]*, i32, i32, i8*, i64, i32, i32)*>*
  store <2 x void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i32, i8*, [82 x i8]*, i32, i32, i8*, i64, i32, i32)*> <void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i32, i8*, [82 x i8]*, i32, i32, i8*, i64, i32, i32)* @fguv_32x32xn_420_c, void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i32, i8*, [82 x i8]*, i32, i32, i8*, i64, i32, i32)* @fguv_32x32xn_422_c>, <2 x void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i32, i8*, [82 x i8]*, i32, i32, i8*, i64, i32, i32)*>* %8, align 8
  %9 = getelementptr inbounds %struct.Dav1dFilmGrainDSPContext, %struct.Dav1dFilmGrainDSPContext* %0, i64 0, i32 3, i64 2
  store void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i32, i8*, [82 x i8]*, i32, i32, i8*, i64, i32, i32)* @fguv_32x32xn_444_c, void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i32, i8*, [82 x i8]*, i32, i32, i8*, i64, i32, i32)** %9, align 8
  tail call void @dav1d_film_grain_dsp_init_x86_8bpc(%struct.Dav1dFilmGrainDSPContext* %0) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @generate_grain_y_c([82 x i8]* nocapture, %struct.Dav1dFilmGrainData* nocapture readonly) #1 {
  %3 = getelementptr inbounds %struct.Dav1dFilmGrainData, %struct.Dav1dFilmGrainData* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %struct.Dav1dFilmGrainData, %struct.Dav1dFilmGrainData* %1, i64 0, i32 11
  %6 = load i32, i32* %5, align 8
  %7 = add nsw i32 %6, 4
  %8 = shl i32 1, %7
  %9 = ashr i32 %8, 1
  br label %10

10:                                               ; preds = %23, %2
  %11 = phi i64 [ 0, %2 ], [ %24, %23 ]
  %12 = phi i32 [ %4, %2 ], [ %37, %23 ]
  br label %26

13:                                               ; preds = %23
  %14 = getelementptr inbounds %struct.Dav1dFilmGrainData, %struct.Dav1dFilmGrainData* %1, i64 0, i32 7
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.Dav1dFilmGrainData, %struct.Dav1dFilmGrainData* %1, i64 0, i32 8, i64 0
  %17 = sub i32 0, %15
  %18 = icmp sgt i32 %15, -1
  %19 = icmp slt i32 %15, %17
  %20 = getelementptr inbounds %struct.Dav1dFilmGrainData, %struct.Dav1dFilmGrainData* %1, i64 0, i32 10
  %21 = sext i32 %17 to i64
  %22 = sext i32 %15 to i64
  br label %50

23:                                               ; preds = %26
  %24 = add nuw nsw i64 %11, 1
  %25 = icmp eq i64 %24, 73
  br i1 %25, label %13, label %10

26:                                               ; preds = %26, %10
  %27 = phi i64 [ 0, %10 ], [ %48, %26 ]
  %28 = phi i32 [ %12, %10 ], [ %37, %26 ]
  %29 = ashr i32 %28, 1
  %30 = xor i32 %29, %28
  %31 = lshr i32 %28, 3
  %32 = xor i32 %30, %31
  %33 = lshr i32 %28, 12
  %34 = xor i32 %32, %33
  %35 = shl i32 %34, 15
  %36 = and i32 %35, 32768
  %37 = or i32 %36, %29
  %38 = lshr i32 %37, 5
  %39 = and i32 %38, 2047
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds [2048 x i16], [2048 x i16]* @dav1d_gaussian_sequence, i64 0, i64 %40
  %42 = load i16, i16* %41, align 2
  %43 = sext i16 %42 to i32
  %44 = add nsw i32 %9, %43
  %45 = ashr i32 %44, %7
  %46 = trunc i32 %45 to i8
  %47 = getelementptr inbounds [82 x i8], [82 x i8]* %0, i64 %11, i64 %27
  store i8 %46, i8* %47, align 1
  %48 = add nuw nsw i64 %27, 1
  %49 = icmp eq i64 %48, 82
  br i1 %49, label %23, label %26

50:                                               ; preds = %53, %13
  %51 = phi i64 [ 3, %13 ], [ %54, %53 ]
  br label %56

52:                                               ; preds = %53
  ret void

53:                                               ; preds = %68
  %54 = add nuw nsw i64 %51, 1
  %55 = icmp eq i64 %54, 73
  br i1 %55, label %52, label %50

56:                                               ; preds = %68, %50
  %57 = phi i64 [ 3, %50 ], [ %85, %68 ]
  br i1 %18, label %58, label %68

58:                                               ; preds = %56, %106
  %59 = phi i64 [ %109, %106 ], [ %21, %56 ]
  %60 = phi i32 [ %108, %106 ], [ 0, %56 ]
  %61 = phi i8* [ %107, %106 ], [ %16, %56 ]
  %62 = trunc i64 %59 to i32
  %63 = or i32 %62, %17
  %64 = icmp eq i32 %63, 0
  %65 = or i1 %19, %64
  br i1 %65, label %106, label %66

66:                                               ; preds = %58
  %67 = add nsw i64 %59, %51
  br label %87

68:                                               ; preds = %106, %56
  %69 = phi i32 [ 0, %56 ], [ %108, %106 ]
  %70 = getelementptr inbounds [82 x i8], [82 x i8]* %0, i64 %51, i64 %57
  %71 = load i8, i8* %70, align 1
  %72 = sext i8 %71 to i32
  %73 = load i64, i64* %20, align 8
  %74 = trunc i64 %73 to i32
  %75 = shl i32 1, %74
  %76 = ashr i32 %75, 1
  %77 = add nsw i32 %76, %69
  %78 = ashr i32 %77, %74
  %79 = add nsw i32 %78, %72
  %80 = icmp slt i32 %79, 127
  %81 = select i1 %80, i32 %79, i32 127
  %82 = icmp sgt i32 %81, -128
  %83 = select i1 %82, i32 %81, i32 -128
  %84 = trunc i32 %83 to i8
  store i8 %84, i8* %70, align 1
  %85 = add nuw nsw i64 %57, 1
  %86 = icmp eq i64 %85, 79
  br i1 %86, label %53, label %56

87:                                               ; preds = %66, %87
  %88 = phi i64 [ %21, %66 ], [ %100, %87 ]
  %89 = phi i32 [ %60, %66 ], [ %99, %87 ]
  %90 = phi i8* [ %61, %66 ], [ %91, %87 ]
  %91 = getelementptr inbounds i8, i8* %90, i64 1
  %92 = load i8, i8* %90, align 1
  %93 = sext i8 %92 to i32
  %94 = add nsw i64 %88, %57
  %95 = getelementptr inbounds [82 x i8], [82 x i8]* %0, i64 %67, i64 %94
  %96 = load i8, i8* %95, align 1
  %97 = sext i8 %96 to i32
  %98 = mul nsw i32 %97, %93
  %99 = add nsw i32 %98, %89
  %100 = add nsw i64 %88, 1
  %101 = icmp sge i64 %88, %22
  %102 = or i64 %100, %59
  %103 = trunc i64 %102 to i32
  %104 = icmp eq i32 %103, 0
  %105 = or i1 %101, %104
  br i1 %105, label %106, label %87

106:                                              ; preds = %87, %58
  %107 = phi i8* [ %61, %58 ], [ %91, %87 ]
  %108 = phi i32 [ %60, %58 ], [ %99, %87 ]
  %109 = add nsw i64 %59, 1
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %68, label %58
}

; Function Attrs: nounwind ssp uwtable
define internal void @generate_grain_uv_420_c([82 x i8]* nocapture, [82 x i8]* nocapture readonly, %struct.Dav1dFilmGrainData* nocapture readonly, i64) #1 {
  tail call fastcc void @generate_grain_uv_c([82 x i8]* %0, [82 x i8]* %1, %struct.Dav1dFilmGrainData* %2, i64 %3, i32 1, i32 1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @generate_grain_uv_422_c([82 x i8]* nocapture, [82 x i8]* nocapture readonly, %struct.Dav1dFilmGrainData* nocapture readonly, i64) #1 {
  tail call fastcc void @generate_grain_uv_c([82 x i8]* %0, [82 x i8]* %1, %struct.Dav1dFilmGrainData* %2, i64 %3, i32 1, i32 0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @generate_grain_uv_444_c([82 x i8]* nocapture, [82 x i8]* nocapture readonly, %struct.Dav1dFilmGrainData* nocapture readonly, i64) #1 {
  tail call fastcc void @generate_grain_uv_c([82 x i8]* %0, [82 x i8]* %1, %struct.Dav1dFilmGrainData* %2, i64 %3, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @fgy_32x32xn_c(i8* nocapture, i8* nocapture readonly, i64, %struct.Dav1dFilmGrainData* nocapture readonly, i64, i8* nocapture readonly, [82 x i8]* nocapture readonly, i32, i32) #1 {
  %10 = alloca [2 x i32], align 4
  %11 = alloca [2 x [2 x i32]], align 16
  %12 = getelementptr inbounds %struct.Dav1dFilmGrainData, %struct.Dav1dFilmGrainData* %3, i64 0, i32 15
  %13 = load i32, i32* %12, align 4
  %14 = icmp ne i32 %13, 0
  %15 = icmp sgt i32 %8, 0
  %16 = and i1 %15, %14
  %17 = getelementptr inbounds %struct.Dav1dFilmGrainData, %struct.Dav1dFilmGrainData* %3, i64 0, i32 16
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 255, i32 235
  %21 = bitcast [2 x i32]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #5
  %22 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 0
  store i32 -1431655766, i32* %22, align 4
  %23 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 1
  store i32 -1431655766, i32* %23, align 4
  %24 = getelementptr inbounds %struct.Dav1dFilmGrainData, %struct.Dav1dFilmGrainData* %3, i64 0, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 0
  %27 = mul i32 %8, 9472
  %28 = add i32 %27, 45568
  %29 = and i32 %28, 65280
  %30 = mul nsw i32 %8, 173
  %31 = add nsw i32 %30, 105
  %32 = and i32 %31, 255
  %33 = or i32 %32, %29
  %34 = xor i32 %33, %25
  store i32 %34, i32* %26, align 4
  br i1 %16, label %438, label %35

35:                                               ; preds = %438, %9
  %36 = select i1 %19, i32 0, i32 16
  %37 = and i64 %2, 31
  %38 = icmp eq i64 %37, 0
  tail call void @llvm.assume(i1 %38)
  %39 = bitcast [2 x [2 x i32]]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %39) #5
  %40 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %11, i64 0, i64 0, i64 1
  %41 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %11, i64 0, i64 1, i64 1
  %42 = icmp eq i64 %4, 0
  %43 = bitcast [2 x [2 x i32]]* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %43, i8 -86, i64 16, i1 false)
  br i1 %42, label %62, label %44

44:                                               ; preds = %35
  %45 = trunc i64 %4 to i32
  %46 = icmp ne i32 %8, 0
  %47 = icmp slt i32 %7, 2
  %48 = select i1 %47, i32 %7, i32 2
  %49 = getelementptr inbounds %struct.Dav1dFilmGrainData, %struct.Dav1dFilmGrainData* %3, i64 0, i32 6
  %50 = sext i32 %7 to i64
  %51 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %11, i64 0, i64 0, i64 0
  %52 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %11, i64 0, i64 1, i64 0
  %53 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 0
  %54 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 1
  %55 = load i32, i32* %51, align 16
  %56 = load i32, i32* %52, align 8
  %57 = load i32, i32* %53, align 4
  %58 = load i32, i32* %40, align 4
  %59 = load i32, i32* %41, align 4
  %60 = load i32, i32* %54, align 4
  br label %63

61:                                               ; preds = %270
  store i32 %92, i32* %51, align 16
  store i32 %81, i32* %52, align 8
  store i32 %90, i32* %53, align 4
  store i32 %95, i32* %40, align 4
  store i32 %80, i32* %41, align 4
  store i32 %94, i32* %54, align 4
  br label %62

62:                                               ; preds = %61, %35
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %39) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #5
  ret void

63:                                               ; preds = %274, %44
  %64 = phi i32 [ %60, %44 ], [ %94, %274 ]
  %65 = phi i32 [ %59, %44 ], [ %80, %274 ]
  %66 = phi i32 [ %58, %44 ], [ %95, %274 ]
  %67 = phi i32 [ %57, %44 ], [ %90, %274 ]
  %68 = phi i32 [ %56, %44 ], [ %81, %274 ]
  %69 = phi i32 [ %55, %44 ], [ %92, %274 ]
  %70 = phi i32 [ %13, %44 ], [ %275, %274 ]
  %71 = phi i64 [ 0, %44 ], [ %272, %274 ]
  %72 = phi i32 [ 0, %44 ], [ %271, %274 ]
  %73 = sub i32 %45, %72
  %74 = icmp slt i32 %73, 32
  %75 = select i1 %74, i32 %73, i32 32
  %76 = icmp ne i32 %70, 0
  %77 = icmp ne i32 %72, 0
  %78 = and i1 %77, %76
  %79 = select i1 %16, i32 %66, i32 %65
  %80 = select i1 %78, i32 %79, i32 %65
  %81 = select i1 %78, i32 %69, i32 %68
  %82 = ashr i32 %67, 1
  %83 = xor i32 %82, %67
  %84 = lshr i32 %67, 3
  %85 = xor i32 %83, %84
  %86 = lshr i32 %67, 12
  %87 = xor i32 %85, %86
  %88 = shl i32 %87, 15
  %89 = and i32 %88, 32768
  %90 = or i32 %89, %82
  %91 = lshr i32 %90, 8
  %92 = and i32 %91, 255
  br i1 %16, label %426, label %93

93:                                               ; preds = %426, %63
  %94 = phi i32 [ %435, %426 ], [ %64, %63 ]
  %95 = phi i32 [ %437, %426 ], [ %66, %63 ]
  %96 = and i1 %46, %76
  %97 = select i1 %96, i32 %48, i32 0
  %98 = icmp slt i32 %75, 2
  %99 = select i1 %98, i32 %73, i32 2
  %100 = select i1 %78, i32 %99, i32 0
  %101 = icmp slt i32 %97, %7
  br i1 %101, label %102, label %119

102:                                              ; preds = %93
  %103 = icmp slt i32 %100, %75
  %104 = ashr i32 %92, 4
  %105 = shl nsw i32 %104, 1
  %106 = shl i32 %92, 1
  %107 = and i32 %106, 30
  %108 = getelementptr inbounds i8, i8* %1, i64 %71
  %109 = getelementptr inbounds i8, i8* %0, i64 %71
  %110 = icmp sgt i32 %100, 0
  %111 = ashr i32 %81, 4
  %112 = shl nsw i32 %111, 1
  %113 = shl i32 %81, 1
  %114 = and i32 %113, 30
  %115 = sext i32 %100 to i64
  %116 = sext i32 %75 to i64
  %117 = sext i32 %97 to i64
  %118 = zext i32 %100 to i64
  br label %146

119:                                              ; preds = %198, %93
  %120 = icmp sgt i32 %97, 0
  br i1 %120, label %121, label %270

121:                                              ; preds = %119
  %122 = icmp slt i32 %100, %75
  %123 = ashr i32 %92, 4
  %124 = shl nsw i32 %123, 1
  %125 = shl i32 %92, 1
  %126 = and i32 %125, 30
  %127 = ashr i32 %95, 4
  %128 = shl nsw i32 %127, 1
  %129 = shl i32 %95, 1
  %130 = and i32 %129, 30
  %131 = getelementptr inbounds i8, i8* %1, i64 %71
  %132 = getelementptr inbounds i8, i8* %0, i64 %71
  %133 = icmp sgt i32 %100, 0
  %134 = ashr i32 %80, 4
  %135 = shl nsw i32 %134, 1
  %136 = shl i32 %80, 1
  %137 = and i32 %136, 30
  %138 = ashr i32 %81, 4
  %139 = shl nsw i32 %138, 1
  %140 = shl i32 %81, 1
  %141 = and i32 %140, 30
  %142 = sext i32 %100 to i64
  %143 = sext i32 %75 to i64
  %144 = zext i32 %97 to i64
  %145 = zext i32 %100 to i64
  br label %252

146:                                              ; preds = %198, %102
  %147 = phi i64 [ %117, %102 ], [ %199, %198 ]
  br i1 %103, label %148, label %156

148:                                              ; preds = %146
  %149 = trunc i64 %147 to i32
  %150 = add i32 %149, 9
  %151 = add i32 %150, %107
  %152 = sext i32 %151 to i64
  %153 = mul nsw i64 %147, %2
  %154 = getelementptr inbounds i8, i8* %108, i64 %153
  %155 = getelementptr inbounds i8, i8* %109, i64 %153
  br label %167

156:                                              ; preds = %167, %146
  br i1 %110, label %157, label %198

157:                                              ; preds = %156
  %158 = trunc i64 %147 to i32
  %159 = add i32 %158, 9
  %160 = add i32 %159, %107
  %161 = sext i32 %160 to i64
  %162 = add i32 %159, %114
  %163 = sext i32 %162 to i64
  %164 = mul nsw i64 %147, %2
  %165 = getelementptr inbounds i8, i8* %108, i64 %164
  %166 = getelementptr inbounds i8, i8* %109, i64 %164
  br label %201

167:                                              ; preds = %148, %167
  %168 = phi i64 [ %115, %148 ], [ %196, %167 ]
  %169 = trunc i64 %168 to i32
  %170 = add i32 %169, 9
  %171 = add i32 %170, %105
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds [82 x i8], [82 x i8]* %6, i64 %152, i64 %172
  %174 = load i8, i8* %173, align 1
  %175 = sext i8 %174 to i32
  %176 = getelementptr inbounds i8, i8* %154, i64 %168
  %177 = getelementptr inbounds i8, i8* %155, i64 %168
  %178 = load i8, i8* %176, align 1
  %179 = zext i8 %178 to i64
  %180 = getelementptr inbounds i8, i8* %5, i64 %179
  %181 = load i8, i8* %180, align 1
  %182 = zext i8 %181 to i32
  %183 = mul nsw i32 %182, %175
  %184 = load i32, i32* %49, align 8
  %185 = shl i32 1, %184
  %186 = ashr i32 %185, 1
  %187 = add nsw i32 %186, %183
  %188 = ashr i32 %187, %184
  %189 = zext i8 %178 to i32
  %190 = add nsw i32 %188, %189
  %191 = icmp slt i32 %190, %36
  %192 = icmp sgt i32 %190, %20
  %193 = select i1 %192, i32 %20, i32 %190
  %194 = select i1 %191, i32 %36, i32 %193
  %195 = trunc i32 %194 to i8
  store i8 %195, i8* %177, align 1
  %196 = add nsw i64 %168, 1
  %197 = icmp slt i64 %196, %116
  br i1 %197, label %167, label %156

198:                                              ; preds = %201, %156
  %199 = add nsw i64 %147, 1
  %200 = icmp eq i64 %199, %50
  br i1 %200, label %119, label %146

201:                                              ; preds = %201, %157
  %202 = phi i64 [ 0, %157 ], [ %250, %201 ]
  %203 = trunc i64 %202 to i32
  %204 = add i32 %203, 9
  %205 = add i32 %204, %105
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds [82 x i8], [82 x i8]* %6, i64 %161, i64 %206
  %208 = load i8, i8* %207, align 1
  %209 = sext i8 %208 to i32
  %210 = trunc i64 %202 to i32
  %211 = add i32 %210, 41
  %212 = add i32 %211, %112
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds [82 x i8], [82 x i8]* %6, i64 %163, i64 %213
  %215 = load i8, i8* %214, align 1
  %216 = sext i8 %215 to i32
  %217 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* @fgy_32x32xn_c.w, i64 0, i64 %202, i64 0
  %218 = load i32, i32* %217, align 8
  %219 = mul nsw i32 %218, %216
  %220 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* @fgy_32x32xn_c.w, i64 0, i64 %202, i64 1
  %221 = load i32, i32* %220, align 4
  %222 = mul nsw i32 %221, %209
  %223 = add i32 %219, 16
  %224 = add i32 %223, %222
  %225 = ashr i32 %224, 5
  %226 = icmp slt i32 %225, 127
  %227 = select i1 %226, i32 %225, i32 127
  %228 = icmp sgt i32 %227, -128
  %229 = select i1 %228, i32 %227, i32 -128
  %230 = getelementptr inbounds i8, i8* %165, i64 %202
  %231 = getelementptr inbounds i8, i8* %166, i64 %202
  %232 = load i8, i8* %230, align 1
  %233 = zext i8 %232 to i64
  %234 = getelementptr inbounds i8, i8* %5, i64 %233
  %235 = load i8, i8* %234, align 1
  %236 = zext i8 %235 to i32
  %237 = mul nsw i32 %229, %236
  %238 = load i32, i32* %49, align 8
  %239 = shl i32 1, %238
  %240 = ashr i32 %239, 1
  %241 = add nsw i32 %237, %240
  %242 = ashr i32 %241, %238
  %243 = zext i8 %232 to i32
  %244 = add nsw i32 %242, %243
  %245 = icmp slt i32 %244, %36
  %246 = icmp sgt i32 %244, %20
  %247 = select i1 %246, i32 %20, i32 %244
  %248 = select i1 %245, i32 %36, i32 %247
  %249 = trunc i32 %248 to i8
  store i8 %249, i8* %231, align 1
  %250 = add nuw nsw i64 %202, 1
  %251 = icmp eq i64 %250, %118
  br i1 %251, label %198, label %201

252:                                              ; preds = %344, %121
  %253 = phi i64 [ 0, %121 ], [ %345, %344 ]
  br i1 %122, label %254, label %276

254:                                              ; preds = %252
  %255 = trunc i64 %253 to i32
  %256 = add i32 %255, 9
  %257 = add i32 %126, %256
  %258 = sext i32 %257 to i64
  %259 = trunc i64 %253 to i32
  %260 = add i32 %259, 41
  %261 = add i32 %130, %260
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* @fgy_32x32xn_c.w, i64 0, i64 %253, i64 0
  %264 = load i32, i32* %263, align 8
  %265 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* @fgy_32x32xn_c.w, i64 0, i64 %253, i64 1
  %266 = load i32, i32* %265, align 4
  %267 = mul nsw i64 %253, %2
  %268 = getelementptr inbounds i8, i8* %131, i64 %267
  %269 = getelementptr inbounds i8, i8* %132, i64 %267
  br label %299

270:                                              ; preds = %344, %119
  %271 = add i32 %72, 32
  %272 = zext i32 %271 to i64
  %273 = icmp ult i64 %272, %4
  br i1 %273, label %274, label %61

274:                                              ; preds = %270
  %275 = load i32, i32* %12, align 4
  br label %63

276:                                              ; preds = %299, %252
  br i1 %133, label %277, label %344

277:                                              ; preds = %276
  %278 = add nuw nsw i64 %253, 41
  %279 = trunc i64 %278 to i32
  %280 = add i32 %130, %279
  %281 = sext i32 %280 to i64
  %282 = trunc i64 %278 to i32
  %283 = add i32 %137, %282
  %284 = sext i32 %283 to i64
  %285 = add nuw nsw i64 %253, 9
  %286 = trunc i64 %285 to i32
  %287 = add i32 %126, %286
  %288 = sext i32 %287 to i64
  %289 = trunc i64 %285 to i32
  %290 = add i32 %141, %289
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* @fgy_32x32xn_c.w, i64 0, i64 %253, i64 0
  %293 = load i32, i32* %292, align 8
  %294 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* @fgy_32x32xn_c.w, i64 0, i64 %253, i64 1
  %295 = load i32, i32* %294, align 4
  %296 = mul nsw i64 %253, %2
  %297 = getelementptr inbounds i8, i8* %131, i64 %296
  %298 = getelementptr inbounds i8, i8* %132, i64 %296
  br label %347

299:                                              ; preds = %254, %299
  %300 = phi i64 [ %142, %254 ], [ %342, %299 ]
  %301 = trunc i64 %300 to i32
  %302 = add i32 %301, 9
  %303 = add i32 %302, %124
  %304 = sext i32 %303 to i64
  %305 = getelementptr inbounds [82 x i8], [82 x i8]* %6, i64 %258, i64 %304
  %306 = load i8, i8* %305, align 1
  %307 = sext i8 %306 to i32
  %308 = add i32 %302, %128
  %309 = sext i32 %308 to i64
  %310 = getelementptr inbounds [82 x i8], [82 x i8]* %6, i64 %262, i64 %309
  %311 = load i8, i8* %310, align 1
  %312 = sext i8 %311 to i32
  %313 = mul nsw i32 %264, %312
  %314 = mul nsw i32 %266, %307
  %315 = add i32 %313, 16
  %316 = add i32 %315, %314
  %317 = ashr i32 %316, 5
  %318 = icmp slt i32 %317, 127
  %319 = select i1 %318, i32 %317, i32 127
  %320 = icmp sgt i32 %319, -128
  %321 = select i1 %320, i32 %319, i32 -128
  %322 = getelementptr inbounds i8, i8* %268, i64 %300
  %323 = getelementptr inbounds i8, i8* %269, i64 %300
  %324 = load i8, i8* %322, align 1
  %325 = zext i8 %324 to i64
  %326 = getelementptr inbounds i8, i8* %5, i64 %325
  %327 = load i8, i8* %326, align 1
  %328 = zext i8 %327 to i32
  %329 = mul nsw i32 %321, %328
  %330 = load i32, i32* %49, align 8
  %331 = shl i32 1, %330
  %332 = ashr i32 %331, 1
  %333 = add nsw i32 %329, %332
  %334 = ashr i32 %333, %330
  %335 = zext i8 %324 to i32
  %336 = add nsw i32 %334, %335
  %337 = icmp slt i32 %336, %36
  %338 = icmp sgt i32 %336, %20
  %339 = select i1 %338, i32 %20, i32 %336
  %340 = select i1 %337, i32 %36, i32 %339
  %341 = trunc i32 %340 to i8
  store i8 %341, i8* %323, align 1
  %342 = add nsw i64 %300, 1
  %343 = icmp slt i64 %342, %143
  br i1 %343, label %299, label %276

344:                                              ; preds = %347, %276
  %345 = add nuw nsw i64 %253, 1
  %346 = icmp eq i64 %345, %144
  br i1 %346, label %270, label %252

347:                                              ; preds = %347, %277
  %348 = phi i64 [ 0, %277 ], [ %424, %347 ]
  %349 = trunc i64 %348 to i32
  %350 = add i32 %349, 9
  %351 = add i32 %350, %128
  %352 = sext i32 %351 to i64
  %353 = getelementptr inbounds [82 x i8], [82 x i8]* %6, i64 %281, i64 %352
  %354 = load i8, i8* %353, align 1
  %355 = sext i8 %354 to i32
  %356 = trunc i64 %348 to i32
  %357 = add i32 %356, 41
  %358 = add i32 %357, %135
  %359 = sext i32 %358 to i64
  %360 = getelementptr inbounds [82 x i8], [82 x i8]* %6, i64 %284, i64 %359
  %361 = load i8, i8* %360, align 1
  %362 = sext i8 %361 to i32
  %363 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* @fgy_32x32xn_c.w, i64 0, i64 %348, i64 0
  %364 = load i32, i32* %363, align 8
  %365 = mul nsw i32 %364, %362
  %366 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* @fgy_32x32xn_c.w, i64 0, i64 %348, i64 1
  %367 = load i32, i32* %366, align 4
  %368 = mul nsw i32 %367, %355
  %369 = add i32 %365, 16
  %370 = add i32 %369, %368
  %371 = ashr i32 %370, 5
  %372 = icmp slt i32 %371, 127
  %373 = select i1 %372, i32 %371, i32 127
  %374 = icmp sgt i32 %373, -128
  %375 = select i1 %374, i32 %373, i32 -128
  %376 = add i32 %350, %124
  %377 = sext i32 %376 to i64
  %378 = getelementptr inbounds [82 x i8], [82 x i8]* %6, i64 %288, i64 %377
  %379 = load i8, i8* %378, align 1
  %380 = sext i8 %379 to i32
  %381 = add i32 %357, %139
  %382 = sext i32 %381 to i64
  %383 = getelementptr inbounds [82 x i8], [82 x i8]* %6, i64 %291, i64 %382
  %384 = load i8, i8* %383, align 1
  %385 = sext i8 %384 to i32
  %386 = mul nsw i32 %364, %385
  %387 = mul nsw i32 %367, %380
  %388 = add i32 %387, 16
  %389 = add i32 %388, %386
  %390 = ashr i32 %389, 5
  %391 = icmp slt i32 %390, 127
  %392 = select i1 %391, i32 %390, i32 127
  %393 = icmp sgt i32 %392, -128
  %394 = select i1 %393, i32 %392, i32 -128
  %395 = mul nsw i32 %375, %293
  %396 = mul nsw i32 %394, %295
  %397 = add i32 %395, 16
  %398 = add i32 %397, %396
  %399 = ashr i32 %398, 5
  %400 = icmp slt i32 %399, 127
  %401 = select i1 %400, i32 %399, i32 127
  %402 = icmp sgt i32 %401, -128
  %403 = select i1 %402, i32 %401, i32 -128
  %404 = getelementptr inbounds i8, i8* %297, i64 %348
  %405 = getelementptr inbounds i8, i8* %298, i64 %348
  %406 = load i8, i8* %404, align 1
  %407 = zext i8 %406 to i64
  %408 = getelementptr inbounds i8, i8* %5, i64 %407
  %409 = load i8, i8* %408, align 1
  %410 = zext i8 %409 to i32
  %411 = mul nsw i32 %403, %410
  %412 = load i32, i32* %49, align 8
  %413 = shl i32 1, %412
  %414 = ashr i32 %413, 1
  %415 = add nsw i32 %411, %414
  %416 = ashr i32 %415, %412
  %417 = zext i8 %406 to i32
  %418 = add nsw i32 %416, %417
  %419 = icmp slt i32 %418, %36
  %420 = icmp sgt i32 %418, %20
  %421 = select i1 %420, i32 %20, i32 %418
  %422 = select i1 %419, i32 %36, i32 %421
  %423 = trunc i32 %422 to i8
  store i8 %423, i8* %405, align 1
  %424 = add nuw nsw i64 %348, 1
  %425 = icmp eq i64 %424, %145
  br i1 %425, label %344, label %347

426:                                              ; preds = %63
  %427 = ashr i32 %64, 1
  %428 = xor i32 %427, %64
  %429 = lshr i32 %64, 3
  %430 = xor i32 %428, %429
  %431 = lshr i32 %64, 12
  %432 = xor i32 %430, %431
  %433 = shl i32 %432, 15
  %434 = and i32 %433, 32768
  %435 = or i32 %434, %427
  %436 = lshr i32 %435, 8
  %437 = and i32 %436, 255
  br label %93

438:                                              ; preds = %9
  %439 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 1
  %440 = add nsw i32 %8, -1
  %441 = mul i32 %440, 9472
  %442 = add i32 %441, 45568
  %443 = and i32 %442, 65280
  %444 = mul nsw i32 %440, 173
  %445 = add nsw i32 %444, 105
  %446 = and i32 %445, 255
  %447 = or i32 %446, %443
  %448 = xor i32 %447, %25
  store i32 %448, i32* %439, align 4
  br label %35
}

; Function Attrs: nounwind ssp uwtable
define internal void @fguv_32x32xn_420_c(i8* nocapture, i8* nocapture readonly, i64, %struct.Dav1dFilmGrainData* readonly, i32, i8* nocapture readonly, [82 x i8]* nocapture readonly, i32, i32, i8* nocapture readonly, i64, i32, i32) #1 {
  tail call fastcc void @fguv_32x32xn_c(i8* %0, i8* %1, i64 %2, %struct.Dav1dFilmGrainData* %3, i32 %4, i8* %5, [82 x i8]* %6, i32 %7, i32 %8, i8* %9, i64 %10, i32 %11, i32 %12, i32 1, i32 1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @fguv_32x32xn_422_c(i8* nocapture, i8* nocapture readonly, i64, %struct.Dav1dFilmGrainData* readonly, i32, i8* nocapture readonly, [82 x i8]* nocapture readonly, i32, i32, i8* nocapture readonly, i64, i32, i32) #1 {
  tail call fastcc void @fguv_32x32xn_c(i8* %0, i8* %1, i64 %2, %struct.Dav1dFilmGrainData* %3, i32 %4, i8* %5, [82 x i8]* %6, i32 %7, i32 %8, i8* %9, i64 %10, i32 %11, i32 %12, i32 1, i32 0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @fguv_32x32xn_444_c(i8* nocapture, i8* nocapture readonly, i64, %struct.Dav1dFilmGrainData* readonly, i32, i8* nocapture readonly, [82 x i8]* nocapture readonly, i32, i32, i8* nocapture readonly, i64, i32, i32) #1 {
  tail call fastcc void @fguv_32x32xn_c(i8* %0, i8* %1, i64 %2, %struct.Dav1dFilmGrainData* %3, i32 %4, i8* %5, [82 x i8]* %6, i32 %7, i32 %8, i8* %9, i64 %10, i32 %11, i32 %12, i32 0, i32 0)
  ret void
}

declare void @dav1d_film_grain_dsp_init_x86_8bpc(%struct.Dav1dFilmGrainDSPContext*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @generate_grain_uv_c([82 x i8]* nocapture, [82 x i8]* nocapture readonly, %struct.Dav1dFilmGrainData* nocapture readonly, i64, i32, i32) unnamed_addr #4 {
  %7 = getelementptr inbounds %struct.Dav1dFilmGrainData, %struct.Dav1dFilmGrainData* %2, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i64 %3, 0
  %10 = select i1 %9, i32 46372, i32 18904
  %11 = xor i32 %8, %10
  %12 = getelementptr inbounds %struct.Dav1dFilmGrainData, %struct.Dav1dFilmGrainData* %2, i64 0, i32 11
  %13 = load i32, i32* %12, align 8
  %14 = add nsw i32 %13, 4
  %15 = icmp eq i32 %4, 0
  %16 = select i1 %15, i32 82, i32 44
  %17 = icmp eq i32 %5, 0
  %18 = select i1 %17, i64 73, i64 38
  %19 = shl i32 1, %14
  %20 = ashr i32 %19, 1
  %21 = zext i32 %16 to i64
  br label %22

22:                                               ; preds = %6, %59
  %23 = phi i64 [ 0, %6 ], [ %60, %59 ]
  %24 = phi i32 [ %11, %6 ], [ %73, %59 ]
  br label %62

25:                                               ; preds = %59
  %26 = getelementptr inbounds %struct.Dav1dFilmGrainData, %struct.Dav1dFilmGrainData* %2, i64 0, i32 7
  %27 = load i32, i32* %26, align 4
  %28 = add nsw i32 %16, -3
  %29 = icmp sgt i32 %28, 3
  %30 = getelementptr inbounds %struct.Dav1dFilmGrainData, %struct.Dav1dFilmGrainData* %2, i64 0, i32 9, i64 %3, i64 0
  %31 = sub i32 0, %27
  %32 = icmp sgt i32 %27, -1
  %33 = icmp slt i32 %27, %31
  %34 = getelementptr inbounds %struct.Dav1dFilmGrainData, %struct.Dav1dFilmGrainData* %2, i64 0, i32 1
  %35 = icmp slt i32 %5, 0
  %36 = icmp slt i32 %4, 0
  %37 = add nsw i32 %5, %4
  %38 = shl i32 1, %37
  %39 = ashr i32 %38, 1
  %40 = getelementptr inbounds %struct.Dav1dFilmGrainData, %struct.Dav1dFilmGrainData* %2, i64 0, i32 10
  %41 = sext i32 %31 to i64
  %42 = sext i32 %27 to i64
  %43 = add i32 %4, 1
  %44 = add i32 %5, 1
  %45 = zext i32 %28 to i64
  %46 = zext i32 %44 to i64
  %47 = zext i32 %43 to i64
  %48 = and i64 %47, 4294967288
  %49 = add nsw i64 %48, -8
  %50 = lshr exact i64 %49, 3
  %51 = add nuw nsw i64 %50, 1
  %52 = icmp ult i32 %43, 8
  %53 = and i64 %47, 4294967288
  %54 = and i64 %51, 1
  %55 = icmp eq i64 %49, 0
  %56 = sub nuw nsw i64 %51, %54
  %57 = icmp eq i64 %54, 0
  %58 = icmp eq i64 %53, %47
  br label %86

59:                                               ; preds = %62
  %60 = add nuw nsw i64 %23, 1
  %61 = icmp ult i64 %60, %18
  br i1 %61, label %22, label %25

62:                                               ; preds = %22, %62
  %63 = phi i64 [ 0, %22 ], [ %84, %62 ]
  %64 = phi i32 [ %24, %22 ], [ %73, %62 ]
  %65 = ashr i32 %64, 1
  %66 = xor i32 %65, %64
  %67 = lshr i32 %64, 3
  %68 = xor i32 %66, %67
  %69 = lshr i32 %64, 12
  %70 = xor i32 %68, %69
  %71 = shl i32 %70, 15
  %72 = and i32 %71, 32768
  %73 = or i32 %72, %65
  %74 = lshr i32 %73, 5
  %75 = and i32 %74, 2047
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds [2048 x i16], [2048 x i16]* @dav1d_gaussian_sequence, i64 0, i64 %76
  %78 = load i16, i16* %77, align 2
  %79 = sext i16 %78 to i32
  %80 = add nsw i32 %20, %79
  %81 = ashr i32 %80, %14
  %82 = trunc i32 %81 to i8
  %83 = getelementptr inbounds [82 x i8], [82 x i8]* %0, i64 %23, i64 %63
  store i8 %82, i8* %83, align 1
  %84 = add nuw nsw i64 %63, 1
  %85 = icmp ult i64 %84, %21
  br i1 %85, label %62, label %59

86:                                               ; preds = %25, %95
  %87 = phi i64 [ 3, %25 ], [ %96, %95 ]
  br i1 %29, label %88, label %95

88:                                               ; preds = %86
  %89 = trunc i64 %87 to i32
  %90 = add i32 %89, -3
  %91 = shl i32 %90, %5
  %92 = add nsw i32 %91, 3
  %93 = sext i32 %92 to i64
  br label %98

94:                                               ; preds = %95
  ret void

95:                                               ; preds = %112, %86
  %96 = add nuw nsw i64 %87, 1
  %97 = icmp ult i64 %96, %18
  br i1 %97, label %86, label %94

98:                                               ; preds = %112, %88
  %99 = phi i64 [ 3, %88 ], [ %129, %112 ]
  br i1 %32, label %100, label %112

100:                                              ; preds = %98
  %101 = trunc i64 %99 to i32
  %102 = add i32 %101, -3
  %103 = shl i32 %102, %4
  %104 = add nsw i32 %103, 3
  %105 = sext i32 %104 to i64
  br label %106

106:                                              ; preds = %244, %100
  %107 = phi i64 [ %41, %100 ], [ %247, %244 ]
  %108 = phi i32 [ 0, %100 ], [ %246, %244 ]
  %109 = phi i8* [ %30, %100 ], [ %245, %244 ]
  br i1 %33, label %244, label %110

110:                                              ; preds = %106
  %111 = add nsw i64 %107, %87
  br label %131

112:                                              ; preds = %244, %98
  %113 = phi i32 [ 0, %98 ], [ %246, %244 ]
  %114 = getelementptr inbounds [82 x i8], [82 x i8]* %0, i64 %87, i64 %99
  %115 = load i8, i8* %114, align 1
  %116 = sext i8 %115 to i32
  %117 = load i64, i64* %40, align 8
  %118 = trunc i64 %117 to i32
  %119 = shl i32 1, %118
  %120 = ashr i32 %119, 1
  %121 = add nsw i32 %120, %113
  %122 = ashr i32 %121, %118
  %123 = add nsw i32 %122, %116
  %124 = icmp slt i32 %123, 127
  %125 = select i1 %124, i32 %123, i32 127
  %126 = icmp sgt i32 %125, -128
  %127 = select i1 %126, i32 %125, i32 -128
  %128 = trunc i32 %127 to i8
  store i8 %128, i8* %114, align 1
  %129 = add nuw nsw i64 %99, 1
  %130 = icmp eq i64 %129, %45
  br i1 %130, label %95, label %98

131:                                              ; preds = %232, %110
  %132 = phi i64 [ %242, %232 ], [ %41, %110 ]
  %133 = phi i32 [ %241, %232 ], [ %108, %110 ]
  %134 = phi i8* [ %233, %232 ], [ %109, %110 ]
  %135 = or i64 %132, %107
  %136 = trunc i64 %135 to i32
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %232

138:                                              ; preds = %131
  %139 = load i32, i32* %34, align 4
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %244, label %141

141:                                              ; preds = %138
  br i1 %35, label %210, label %142

142:                                              ; preds = %141, %218
  %143 = phi i64 [ %220, %218 ], [ 0, %141 ]
  %144 = phi i32 [ %219, %218 ], [ 0, %141 ]
  br i1 %36, label %218, label %145

145:                                              ; preds = %142
  %146 = add nsw i64 %143, %93
  br i1 %52, label %147, label %150

147:                                              ; preds = %201, %145
  %148 = phi i64 [ 0, %145 ], [ %53, %201 ]
  %149 = phi i32 [ %144, %145 ], [ %209, %201 ]
  br label %222

150:                                              ; preds = %145
  %151 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %144, i32 0
  br i1 %55, label %183, label %152

152:                                              ; preds = %150, %152
  %153 = phi i64 [ %180, %152 ], [ 0, %150 ]
  %154 = phi <4 x i32> [ %178, %152 ], [ %151, %150 ]
  %155 = phi <4 x i32> [ %179, %152 ], [ zeroinitializer, %150 ]
  %156 = phi i64 [ %181, %152 ], [ %56, %150 ]
  %157 = add nsw i64 %153, %105
  %158 = getelementptr inbounds [82 x i8], [82 x i8]* %1, i64 %146, i64 %157
  %159 = bitcast i8* %158 to <4 x i8>*
  %160 = load <4 x i8>, <4 x i8>* %159, align 1
  %161 = getelementptr inbounds i8, i8* %158, i64 4
  %162 = bitcast i8* %161 to <4 x i8>*
  %163 = load <4 x i8>, <4 x i8>* %162, align 1
  %164 = sext <4 x i8> %160 to <4 x i32>
  %165 = sext <4 x i8> %163 to <4 x i32>
  %166 = add nsw <4 x i32> %154, %164
  %167 = add nsw <4 x i32> %155, %165
  %168 = or i64 %153, 8
  %169 = add nsw i64 %168, %105
  %170 = getelementptr inbounds [82 x i8], [82 x i8]* %1, i64 %146, i64 %169
  %171 = bitcast i8* %170 to <4 x i8>*
  %172 = load <4 x i8>, <4 x i8>* %171, align 1
  %173 = getelementptr inbounds i8, i8* %170, i64 4
  %174 = bitcast i8* %173 to <4 x i8>*
  %175 = load <4 x i8>, <4 x i8>* %174, align 1
  %176 = sext <4 x i8> %172 to <4 x i32>
  %177 = sext <4 x i8> %175 to <4 x i32>
  %178 = add nsw <4 x i32> %166, %176
  %179 = add nsw <4 x i32> %167, %177
  %180 = add i64 %153, 16
  %181 = add i64 %156, -2
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %183, label %152, !llvm.loop !2

183:                                              ; preds = %152, %150
  %184 = phi <4 x i32> [ undef, %150 ], [ %178, %152 ]
  %185 = phi <4 x i32> [ undef, %150 ], [ %179, %152 ]
  %186 = phi i64 [ 0, %150 ], [ %180, %152 ]
  %187 = phi <4 x i32> [ %151, %150 ], [ %178, %152 ]
  %188 = phi <4 x i32> [ zeroinitializer, %150 ], [ %179, %152 ]
  br i1 %57, label %201, label %189

189:                                              ; preds = %183
  %190 = add nsw i64 %186, %105
  %191 = getelementptr inbounds [82 x i8], [82 x i8]* %1, i64 %146, i64 %190
  %192 = getelementptr inbounds i8, i8* %191, i64 4
  %193 = bitcast i8* %192 to <4 x i8>*
  %194 = load <4 x i8>, <4 x i8>* %193, align 1
  %195 = sext <4 x i8> %194 to <4 x i32>
  %196 = add nsw <4 x i32> %188, %195
  %197 = bitcast i8* %191 to <4 x i8>*
  %198 = load <4 x i8>, <4 x i8>* %197, align 1
  %199 = sext <4 x i8> %198 to <4 x i32>
  %200 = add nsw <4 x i32> %187, %199
  br label %201

201:                                              ; preds = %183, %189
  %202 = phi <4 x i32> [ %184, %183 ], [ %200, %189 ]
  %203 = phi <4 x i32> [ %185, %183 ], [ %196, %189 ]
  %204 = add <4 x i32> %203, %202
  %205 = shufflevector <4 x i32> %204, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %206 = add <4 x i32> %204, %205
  %207 = shufflevector <4 x i32> %206, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %208 = add <4 x i32> %206, %207
  %209 = extractelement <4 x i32> %208, i32 0
  br i1 %58, label %218, label %147

210:                                              ; preds = %218, %141
  %211 = phi i32 [ 0, %141 ], [ %219, %218 ]
  %212 = add nsw i32 %211, %39
  %213 = ashr i32 %212, %37
  %214 = load i8, i8* %134, align 1
  %215 = sext i8 %214 to i32
  %216 = mul nsw i32 %213, %215
  %217 = add nsw i32 %216, %133
  br label %244

218:                                              ; preds = %222, %201, %142
  %219 = phi i32 [ %144, %142 ], [ %209, %201 ], [ %229, %222 ]
  %220 = add nuw nsw i64 %143, 1
  %221 = icmp eq i64 %220, %46
  br i1 %221, label %210, label %142

222:                                              ; preds = %147, %222
  %223 = phi i64 [ %230, %222 ], [ %148, %147 ]
  %224 = phi i32 [ %229, %222 ], [ %149, %147 ]
  %225 = add nsw i64 %223, %105
  %226 = getelementptr inbounds [82 x i8], [82 x i8]* %1, i64 %146, i64 %225
  %227 = load i8, i8* %226, align 1
  %228 = sext i8 %227 to i32
  %229 = add nsw i32 %224, %228
  %230 = add nuw nsw i64 %223, 1
  %231 = icmp eq i64 %230, %47
  br i1 %231, label %218, label %222, !llvm.loop !4

232:                                              ; preds = %131
  %233 = getelementptr inbounds i8, i8* %134, i64 1
  %234 = load i8, i8* %134, align 1
  %235 = sext i8 %234 to i32
  %236 = add nsw i64 %132, %99
  %237 = getelementptr inbounds [82 x i8], [82 x i8]* %0, i64 %111, i64 %236
  %238 = load i8, i8* %237, align 1
  %239 = sext i8 %238 to i32
  %240 = mul nsw i32 %239, %235
  %241 = add nsw i32 %240, %133
  %242 = add nsw i64 %132, 1
  %243 = icmp slt i64 %132, %42
  br i1 %243, label %131, label %244

244:                                              ; preds = %232, %106, %138, %210
  %245 = phi i8* [ %134, %210 ], [ %134, %138 ], [ %109, %106 ], [ %233, %232 ]
  %246 = phi i32 [ %217, %210 ], [ %133, %138 ], [ %108, %106 ], [ %241, %232 ]
  %247 = add nsw i64 %107, 1
  %248 = trunc i64 %247 to i32
  %249 = icmp eq i32 %248, 1
  br i1 %249, label %112, label %106
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @fguv_32x32xn_c(i8* nocapture, i8* nocapture readonly, i64, %struct.Dav1dFilmGrainData* readonly, i32, i8* nocapture readonly, [82 x i8]* nocapture readonly, i32, i32, i8* nocapture readonly, i64, i32, i32, i32, i32) unnamed_addr #4 {
  %16 = alloca [2 x i32], align 4
  %17 = alloca [2 x [2 x i32]], align 16
  %18 = getelementptr inbounds %struct.Dav1dFilmGrainData, %struct.Dav1dFilmGrainData* %3, i64 0, i32 15
  %19 = load i32, i32* %18, align 4
  %20 = icmp ne i32 %19, 0
  %21 = icmp sgt i32 %8, 0
  %22 = and i1 %21, %20
  %23 = getelementptr inbounds %struct.Dav1dFilmGrainData, %struct.Dav1dFilmGrainData* %3, i64 0, i32 16
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 0
  %26 = icmp eq i32 %12, 0
  %27 = select i1 %26, i32 240, i32 235
  %28 = select i1 %25, i32 255, i32 %27
  %29 = bitcast [2 x i32]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #5
  %30 = getelementptr inbounds [2 x i32], [2 x i32]* %16, i64 0, i64 0
  store i32 -1431655766, i32* %30, align 4
  %31 = getelementptr inbounds [2 x i32], [2 x i32]* %16, i64 0, i64 1
  store i32 -1431655766, i32* %31, align 4
  %32 = getelementptr inbounds %struct.Dav1dFilmGrainData, %struct.Dav1dFilmGrainData* %3, i64 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = getelementptr inbounds [2 x i32], [2 x i32]* %16, i64 0, i64 0
  %35 = mul i32 %8, 9472
  %36 = add i32 %35, 45568
  %37 = and i32 %36, 65280
  %38 = mul nsw i32 %8, 173
  %39 = add nsw i32 %38, 105
  %40 = and i32 %39, 255
  %41 = or i32 %40, %37
  %42 = xor i32 %41, %33
  store i32 %42, i32* %34, align 4
  br i1 %22, label %637, label %43

43:                                               ; preds = %637, %15
  %44 = select i1 %25, i32 0, i32 16
  %45 = and i64 %2, 31
  %46 = icmp eq i64 %45, 0
  tail call void @llvm.assume(i1 %46)
  %47 = bitcast [2 x [2 x i32]]* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %47) #5
  %48 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %17, i64 0, i64 0, i64 1
  %49 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %17, i64 0, i64 1, i64 1
  %50 = icmp sgt i32 %4, 0
  %51 = bitcast [2 x [2 x i32]]* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %51, i8 -86, i64 16, i1 false)
  br i1 %50, label %52, label %84

52:                                               ; preds = %43
  %53 = lshr i32 32, %13
  %54 = icmp ne i32 %8, 0
  %55 = lshr i32 2, %14
  %56 = icmp slt i32 %55, %7
  %57 = select i1 %56, i32 %55, i32 %7
  %58 = lshr i32 2, %13
  %59 = icmp eq i32 %13, 0
  %60 = getelementptr inbounds %struct.Dav1dFilmGrainData, %struct.Dav1dFilmGrainData* %3, i64 0, i32 3
  %61 = sext i32 %11 to i64
  %62 = getelementptr inbounds %struct.Dav1dFilmGrainData, %struct.Dav1dFilmGrainData* %3, i64 0, i32 13, i64 %61
  %63 = getelementptr inbounds %struct.Dav1dFilmGrainData, %struct.Dav1dFilmGrainData* %3, i64 0, i32 12, i64 %61
  %64 = getelementptr inbounds %struct.Dav1dFilmGrainData, %struct.Dav1dFilmGrainData* %3, i64 0, i32 14, i64 %61
  %65 = getelementptr inbounds %struct.Dav1dFilmGrainData, %struct.Dav1dFilmGrainData* %3, i64 0, i32 6
  %66 = add nuw nsw i32 %53, 3
  %67 = sext i32 %13 to i64
  %68 = lshr i32 32, %14
  %69 = sext i32 %14 to i64
  %70 = sext i32 %53 to i64
  %71 = sext i32 %4 to i64
  %72 = sext i32 %7 to i64
  %73 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %17, i64 0, i64 0, i64 0
  %74 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %17, i64 0, i64 1, i64 0
  %75 = getelementptr inbounds [2 x i32], [2 x i32]* %16, i64 0, i64 0
  %76 = getelementptr inbounds [2 x i32], [2 x i32]* %16, i64 0, i64 1
  %77 = load i32, i32* %73, align 16
  %78 = load i32, i32* %74, align 8
  %79 = load i32, i32* %75, align 4
  %80 = load i32, i32* %48, align 4
  %81 = load i32, i32* %49, align 4
  %82 = load i32, i32* %76, align 4
  br label %85

83:                                               ; preds = %390
  store i32 %114, i32* %73, align 16
  store i32 %103, i32* %74, align 8
  store i32 %112, i32* %75, align 4
  store i32 %117, i32* %48, align 4
  store i32 %102, i32* %49, align 4
  store i32 %116, i32* %76, align 4
  br label %84

84:                                               ; preds = %83, %43
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %47) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #5
  ret void

85:                                               ; preds = %393, %52
  %86 = phi i32 [ %82, %52 ], [ %116, %393 ]
  %87 = phi i32 [ %81, %52 ], [ %102, %393 ]
  %88 = phi i32 [ %80, %52 ], [ %117, %393 ]
  %89 = phi i32 [ %79, %52 ], [ %112, %393 ]
  %90 = phi i32 [ %78, %52 ], [ %103, %393 ]
  %91 = phi i32 [ %77, %52 ], [ %114, %393 ]
  %92 = phi i32 [ %19, %52 ], [ %394, %393 ]
  %93 = phi i64 [ 0, %52 ], [ %391, %393 ]
  %94 = sub nsw i64 %71, %93
  %95 = icmp sgt i64 %94, %70
  %96 = trunc i64 %94 to i32
  %97 = select i1 %95, i32 %53, i32 %96
  %98 = icmp ne i32 %92, 0
  %99 = icmp ne i64 %93, 0
  %100 = and i1 %99, %98
  %101 = select i1 %22, i32 %88, i32 %87
  %102 = select i1 %100, i32 %101, i32 %87
  %103 = select i1 %100, i32 %91, i32 %90
  %104 = ashr i32 %89, 1
  %105 = xor i32 %104, %89
  %106 = lshr i32 %89, 3
  %107 = xor i32 %105, %106
  %108 = lshr i32 %89, 12
  %109 = xor i32 %107, %108
  %110 = shl i32 %109, 15
  %111 = and i32 %110, 32768
  %112 = or i32 %111, %104
  %113 = lshr i32 %112, 8
  %114 = and i32 %113, 255
  br i1 %22, label %625, label %115

115:                                              ; preds = %625, %85
  %116 = phi i32 [ %634, %625 ], [ %86, %85 ]
  %117 = phi i32 [ %636, %625 ], [ %88, %85 ]
  %118 = and i1 %54, %98
  %119 = select i1 %118, i32 %57, i32 0
  %120 = icmp slt i32 %58, %97
  %121 = select i1 %120, i32 %58, i32 %97
  %122 = select i1 %100, i32 %121, i32 0
  %123 = icmp slt i32 %119, %7
  br i1 %123, label %124, label %143

124:                                              ; preds = %115
  %125 = icmp slt i32 %122, %97
  %126 = ashr i32 %114, 4
  %127 = add nsw i32 %126, 3
  %128 = mul nsw i32 %127, %58
  %129 = and i32 %114, 15
  %130 = add nuw nsw i32 %129, 3
  %131 = mul nsw i32 %130, %55
  %132 = icmp sgt i32 %122, 0
  %133 = ashr i32 %103, 4
  %134 = add nsw i32 %133, 3
  %135 = mul nsw i32 %134, %58
  %136 = and i32 %103, 15
  %137 = add nuw nsw i32 %136, 3
  %138 = mul nsw i32 %137, %55
  %139 = sext i32 %122 to i64
  %140 = sext i32 %97 to i64
  %141 = sext i32 %119 to i64
  %142 = zext i32 %122 to i64
  br label %176

143:                                              ; preds = %275, %115
  %144 = icmp sgt i32 %119, 0
  br i1 %144, label %145, label %390

145:                                              ; preds = %143
  %146 = icmp slt i32 %122, %97
  %147 = ashr i32 %114, 4
  %148 = add nsw i32 %147, 3
  %149 = mul nsw i32 %148, %58
  %150 = and i32 %114, 15
  %151 = add nuw nsw i32 %150, 3
  %152 = mul nsw i32 %151, %55
  %153 = ashr i32 %117, 4
  %154 = add nsw i32 %153, 3
  %155 = mul nsw i32 %154, %58
  %156 = and i32 %117, 15
  %157 = add nuw nsw i32 %156, 3
  %158 = mul nsw i32 %157, %55
  %159 = icmp sgt i32 %122, 0
  %160 = ashr i32 %102, 4
  %161 = add nsw i32 %160, 3
  %162 = mul nsw i32 %161, %58
  %163 = and i32 %102, 15
  %164 = add nuw nsw i32 %163, 3
  %165 = mul nsw i32 %164, %55
  %166 = ashr i32 %103, 4
  %167 = add nsw i32 %166, 3
  %168 = mul nsw i32 %167, %58
  %169 = and i32 %103, 15
  %170 = add nuw nsw i32 %169, 3
  %171 = mul nsw i32 %170, %55
  %172 = sext i32 %122 to i64
  %173 = sext i32 %97 to i64
  %174 = zext i32 %119 to i64
  %175 = zext i32 %122 to i64
  br label %368

176:                                              ; preds = %275, %124
  %177 = phi i64 [ %141, %124 ], [ %276, %275 ]
  br i1 %125, label %178, label %190

178:                                              ; preds = %176
  %179 = trunc i64 %177 to i32
  %180 = add i32 %179, 3
  %181 = add i32 %180, %131
  %182 = sext i32 %181 to i64
  %183 = shl i32 %179, %14
  %184 = sext i32 %183 to i64
  %185 = mul nsw i64 %184, %10
  %186 = getelementptr inbounds i8, i8* %9, i64 %185
  %187 = mul nsw i64 %177, %2
  %188 = getelementptr inbounds i8, i8* %1, i64 %187
  %189 = getelementptr inbounds i8, i8* %0, i64 %187
  br label %205

190:                                              ; preds = %254, %176
  br i1 %132, label %191, label %275

191:                                              ; preds = %190
  %192 = trunc i64 %177 to i32
  %193 = add i32 %192, 3
  %194 = add i32 %131, %193
  %195 = sext i32 %194 to i64
  %196 = add i32 %138, %193
  %197 = sext i32 %196 to i64
  %198 = shl i32 %192, %14
  %199 = sext i32 %198 to i64
  %200 = mul nsw i64 %199, %10
  %201 = getelementptr inbounds i8, i8* %9, i64 %200
  %202 = mul nsw i64 %177, %2
  %203 = getelementptr inbounds i8, i8* %1, i64 %202
  %204 = getelementptr inbounds i8, i8* %0, i64 %202
  br label %278

205:                                              ; preds = %178, %254
  %206 = phi i64 [ %139, %178 ], [ %273, %254 ]
  %207 = trunc i64 %206 to i32
  %208 = add i32 %207, 3
  %209 = add i32 %208, %128
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds [82 x i8], [82 x i8]* %6, i64 %182, i64 %210
  %212 = load i8, i8* %211, align 1
  %213 = sext i8 %212 to i32
  %214 = add nsw i64 %206, %93
  %215 = trunc i64 %214 to i32
  %216 = shl i32 %215, %13
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds i8, i8* %186, i64 %217
  %219 = load i8, i8* %218, align 1
  br i1 %59, label %229, label %220

220:                                              ; preds = %205
  %221 = zext i8 %219 to i32
  %222 = getelementptr inbounds i8, i8* %218, i64 1
  %223 = load i8, i8* %222, align 1
  %224 = zext i8 %223 to i32
  %225 = add nuw nsw i32 %221, 1
  %226 = add nuw nsw i32 %225, %224
  %227 = lshr i32 %226, 1
  %228 = trunc i32 %227 to i8
  br label %229

229:                                              ; preds = %205, %220
  %230 = phi i8 [ %228, %220 ], [ %219, %205 ]
  %231 = getelementptr inbounds i8, i8* %188, i64 %214
  %232 = getelementptr inbounds i8, i8* %189, i64 %214
  %233 = zext i8 %230 to i32
  %234 = load i32, i32* %60, align 4
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %239, label %236

236:                                              ; preds = %229
  %237 = load i8, i8* %231, align 1
  %238 = zext i8 %237 to i32
  br label %254

239:                                              ; preds = %229
  %240 = load i32, i32* %62, align 4
  %241 = mul nsw i32 %240, %233
  %242 = load i8, i8* %231, align 1
  %243 = zext i8 %242 to i32
  %244 = load i32, i32* %63, align 4
  %245 = mul nsw i32 %244, %243
  %246 = add nsw i32 %245, %241
  %247 = ashr i32 %246, 6
  %248 = load i32, i32* %64, align 4
  %249 = add nsw i32 %247, %248
  %250 = icmp slt i32 %249, 255
  %251 = select i1 %250, i32 %249, i32 255
  %252 = icmp sgt i32 %251, 0
  %253 = select i1 %252, i32 %251, i32 0
  br label %254

254:                                              ; preds = %236, %239
  %255 = phi i32 [ %238, %236 ], [ %243, %239 ]
  %256 = phi i32 [ %233, %236 ], [ %253, %239 ]
  %257 = zext i32 %256 to i64
  %258 = getelementptr inbounds i8, i8* %5, i64 %257
  %259 = load i8, i8* %258, align 1
  %260 = zext i8 %259 to i32
  %261 = mul nsw i32 %260, %213
  %262 = load i32, i32* %65, align 8
  %263 = shl i32 1, %262
  %264 = ashr i32 %263, 1
  %265 = add nsw i32 %264, %261
  %266 = ashr i32 %265, %262
  %267 = add nsw i32 %266, %255
  %268 = icmp slt i32 %267, %44
  %269 = icmp sgt i32 %267, %28
  %270 = select i1 %269, i32 %28, i32 %267
  %271 = select i1 %268, i32 %44, i32 %270
  %272 = trunc i32 %271 to i8
  store i8 %272, i8* %232, align 1
  %273 = add nsw i64 %206, 1
  %274 = icmp slt i64 %273, %140
  br i1 %274, label %205, label %190

275:                                              ; preds = %347, %190
  %276 = add nsw i64 %177, 1
  %277 = icmp eq i64 %276, %72
  br i1 %277, label %143, label %176

278:                                              ; preds = %347, %191
  %279 = phi i64 [ 0, %191 ], [ %366, %347 ]
  %280 = trunc i64 %279 to i32
  %281 = add i32 %280, 3
  %282 = add i32 %281, %128
  %283 = sext i32 %282 to i64
  %284 = getelementptr inbounds [82 x i8], [82 x i8]* %6, i64 %195, i64 %283
  %285 = load i8, i8* %284, align 1
  %286 = sext i8 %285 to i32
  %287 = trunc i64 %279 to i32
  %288 = add i32 %66, %287
  %289 = add i32 %288, %135
  %290 = sext i32 %289 to i64
  %291 = getelementptr inbounds [82 x i8], [82 x i8]* %6, i64 %197, i64 %290
  %292 = load i8, i8* %291, align 1
  %293 = sext i8 %292 to i32
  %294 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* @fguv_32x32xn_c.w, i64 0, i64 %67, i64 %279, i64 0
  %295 = load i32, i32* %294, align 8
  %296 = mul nsw i32 %295, %293
  %297 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* @fguv_32x32xn_c.w, i64 0, i64 %67, i64 %279, i64 1
  %298 = load i32, i32* %297, align 4
  %299 = mul nsw i32 %298, %286
  %300 = add i32 %296, 16
  %301 = add i32 %300, %299
  %302 = ashr i32 %301, 5
  %303 = icmp slt i32 %302, 127
  %304 = select i1 %303, i32 %302, i32 127
  %305 = icmp sgt i32 %304, -128
  %306 = select i1 %305, i32 %304, i32 -128
  %307 = add nsw i64 %279, %93
  %308 = trunc i64 %307 to i32
  %309 = shl i32 %308, %13
  %310 = sext i32 %309 to i64
  %311 = getelementptr inbounds i8, i8* %201, i64 %310
  %312 = load i8, i8* %311, align 1
  br i1 %59, label %322, label %313

313:                                              ; preds = %278
  %314 = zext i8 %312 to i32
  %315 = getelementptr inbounds i8, i8* %311, i64 1
  %316 = load i8, i8* %315, align 1
  %317 = zext i8 %316 to i32
  %318 = add nuw nsw i32 %314, 1
  %319 = add nuw nsw i32 %318, %317
  %320 = lshr i32 %319, 1
  %321 = trunc i32 %320 to i8
  br label %322

322:                                              ; preds = %278, %313
  %323 = phi i8 [ %321, %313 ], [ %312, %278 ]
  %324 = getelementptr inbounds i8, i8* %203, i64 %307
  %325 = getelementptr inbounds i8, i8* %204, i64 %307
  %326 = zext i8 %323 to i32
  %327 = load i32, i32* %60, align 4
  %328 = icmp eq i32 %327, 0
  br i1 %328, label %332, label %329

329:                                              ; preds = %322
  %330 = load i8, i8* %324, align 1
  %331 = zext i8 %330 to i32
  br label %347

332:                                              ; preds = %322
  %333 = load i32, i32* %62, align 4
  %334 = mul nsw i32 %333, %326
  %335 = load i8, i8* %324, align 1
  %336 = zext i8 %335 to i32
  %337 = load i32, i32* %63, align 4
  %338 = mul nsw i32 %337, %336
  %339 = add nsw i32 %338, %334
  %340 = ashr i32 %339, 6
  %341 = load i32, i32* %64, align 4
  %342 = add nsw i32 %340, %341
  %343 = icmp slt i32 %342, 255
  %344 = select i1 %343, i32 %342, i32 255
  %345 = icmp sgt i32 %344, 0
  %346 = select i1 %345, i32 %344, i32 0
  br label %347

347:                                              ; preds = %329, %332
  %348 = phi i32 [ %331, %329 ], [ %336, %332 ]
  %349 = phi i32 [ %326, %329 ], [ %346, %332 ]
  %350 = zext i32 %349 to i64
  %351 = getelementptr inbounds i8, i8* %5, i64 %350
  %352 = load i8, i8* %351, align 1
  %353 = zext i8 %352 to i32
  %354 = mul nsw i32 %306, %353
  %355 = load i32, i32* %65, align 8
  %356 = shl i32 1, %355
  %357 = ashr i32 %356, 1
  %358 = add nsw i32 %357, %354
  %359 = ashr i32 %358, %355
  %360 = add nsw i32 %359, %348
  %361 = icmp slt i32 %360, %44
  %362 = icmp sgt i32 %360, %28
  %363 = select i1 %362, i32 %28, i32 %360
  %364 = select i1 %361, i32 %44, i32 %363
  %365 = trunc i32 %364 to i8
  store i8 %365, i8* %325, align 1
  %366 = add nuw nsw i64 %279, 1
  %367 = icmp eq i64 %366, %142
  br i1 %367, label %275, label %278

368:                                              ; preds = %504, %145
  %369 = phi i64 [ 0, %145 ], [ %505, %504 ]
  br i1 %146, label %370, label %395

370:                                              ; preds = %368
  %371 = trunc i64 %369 to i32
  %372 = add i32 %371, 3
  %373 = add i32 %372, %152
  %374 = sext i32 %373 to i64
  %375 = add i32 %372, %68
  %376 = add i32 %375, %158
  %377 = sext i32 %376 to i64
  %378 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* @fguv_32x32xn_c.w, i64 0, i64 %69, i64 %369, i64 0
  %379 = load i32, i32* %378, align 8
  %380 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* @fguv_32x32xn_c.w, i64 0, i64 %69, i64 %369, i64 1
  %381 = load i32, i32* %380, align 4
  %382 = trunc i64 %369 to i32
  %383 = shl i32 %382, %14
  %384 = sext i32 %383 to i64
  %385 = mul nsw i64 %384, %10
  %386 = getelementptr inbounds i8, i8* %9, i64 %385
  %387 = mul nsw i64 %369, %2
  %388 = getelementptr inbounds i8, i8* %1, i64 %387
  %389 = getelementptr inbounds i8, i8* %0, i64 %387
  br label %420

390:                                              ; preds = %504, %143
  %391 = add nsw i64 %93, %70
  %392 = icmp slt i64 %391, %71
  br i1 %392, label %393, label %83

393:                                              ; preds = %390
  %394 = load i32, i32* %18, align 4
  br label %85

395:                                              ; preds = %483, %368
  br i1 %159, label %396, label %504

396:                                              ; preds = %395
  %397 = trunc i64 %369 to i32
  %398 = add i32 %397, 3
  %399 = add i32 %398, %68
  %400 = add i32 %158, %399
  %401 = sext i32 %400 to i64
  %402 = add i32 %165, %399
  %403 = sext i32 %402 to i64
  %404 = add i32 %152, %398
  %405 = sext i32 %404 to i64
  %406 = add i32 %171, %398
  %407 = sext i32 %406 to i64
  %408 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* @fguv_32x32xn_c.w, i64 0, i64 %69, i64 %369, i64 0
  %409 = load i32, i32* %408, align 8
  %410 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* @fguv_32x32xn_c.w, i64 0, i64 %69, i64 %369, i64 1
  %411 = load i32, i32* %410, align 4
  %412 = trunc i64 %369 to i32
  %413 = shl i32 %412, %14
  %414 = sext i32 %413 to i64
  %415 = mul nsw i64 %414, %10
  %416 = getelementptr inbounds i8, i8* %9, i64 %415
  %417 = mul nsw i64 %369, %2
  %418 = getelementptr inbounds i8, i8* %1, i64 %417
  %419 = getelementptr inbounds i8, i8* %0, i64 %417
  br label %507

420:                                              ; preds = %370, %483
  %421 = phi i64 [ %172, %370 ], [ %502, %483 ]
  %422 = trunc i64 %421 to i32
  %423 = add i32 %422, 3
  %424 = add i32 %149, %423
  %425 = sext i32 %424 to i64
  %426 = getelementptr inbounds [82 x i8], [82 x i8]* %6, i64 %374, i64 %425
  %427 = load i8, i8* %426, align 1
  %428 = sext i8 %427 to i32
  %429 = add i32 %155, %423
  %430 = sext i32 %429 to i64
  %431 = getelementptr inbounds [82 x i8], [82 x i8]* %6, i64 %377, i64 %430
  %432 = load i8, i8* %431, align 1
  %433 = sext i8 %432 to i32
  %434 = mul nsw i32 %379, %433
  %435 = mul nsw i32 %381, %428
  %436 = add i32 %434, 16
  %437 = add i32 %436, %435
  %438 = ashr i32 %437, 5
  %439 = icmp slt i32 %438, 127
  %440 = select i1 %439, i32 %438, i32 127
  %441 = icmp sgt i32 %440, -128
  %442 = select i1 %441, i32 %440, i32 -128
  %443 = add nsw i64 %421, %93
  %444 = trunc i64 %443 to i32
  %445 = shl i32 %444, %13
  %446 = sext i32 %445 to i64
  %447 = getelementptr inbounds i8, i8* %386, i64 %446
  %448 = load i8, i8* %447, align 1
  br i1 %59, label %458, label %449

449:                                              ; preds = %420
  %450 = zext i8 %448 to i32
  %451 = getelementptr inbounds i8, i8* %447, i64 1
  %452 = load i8, i8* %451, align 1
  %453 = zext i8 %452 to i32
  %454 = add nuw nsw i32 %450, 1
  %455 = add nuw nsw i32 %454, %453
  %456 = lshr i32 %455, 1
  %457 = trunc i32 %456 to i8
  br label %458

458:                                              ; preds = %420, %449
  %459 = phi i8 [ %457, %449 ], [ %448, %420 ]
  %460 = getelementptr inbounds i8, i8* %388, i64 %443
  %461 = getelementptr inbounds i8, i8* %389, i64 %443
  %462 = zext i8 %459 to i32
  %463 = load i32, i32* %60, align 4
  %464 = icmp eq i32 %463, 0
  br i1 %464, label %468, label %465

465:                                              ; preds = %458
  %466 = load i8, i8* %460, align 1
  %467 = zext i8 %466 to i32
  br label %483

468:                                              ; preds = %458
  %469 = load i32, i32* %62, align 4
  %470 = mul nsw i32 %469, %462
  %471 = load i8, i8* %460, align 1
  %472 = zext i8 %471 to i32
  %473 = load i32, i32* %63, align 4
  %474 = mul nsw i32 %473, %472
  %475 = add nsw i32 %474, %470
  %476 = ashr i32 %475, 6
  %477 = load i32, i32* %64, align 4
  %478 = add nsw i32 %476, %477
  %479 = icmp slt i32 %478, 255
  %480 = select i1 %479, i32 %478, i32 255
  %481 = icmp sgt i32 %480, 0
  %482 = select i1 %481, i32 %480, i32 0
  br label %483

483:                                              ; preds = %465, %468
  %484 = phi i32 [ %467, %465 ], [ %472, %468 ]
  %485 = phi i32 [ %462, %465 ], [ %482, %468 ]
  %486 = zext i32 %485 to i64
  %487 = getelementptr inbounds i8, i8* %5, i64 %486
  %488 = load i8, i8* %487, align 1
  %489 = zext i8 %488 to i32
  %490 = mul nsw i32 %442, %489
  %491 = load i32, i32* %65, align 8
  %492 = shl i32 1, %491
  %493 = ashr i32 %492, 1
  %494 = add nsw i32 %493, %490
  %495 = ashr i32 %494, %491
  %496 = add nsw i32 %495, %484
  %497 = icmp slt i32 %496, %44
  %498 = icmp sgt i32 %496, %28
  %499 = select i1 %498, i32 %28, i32 %496
  %500 = select i1 %497, i32 %44, i32 %499
  %501 = trunc i32 %500 to i8
  store i8 %501, i8* %461, align 1
  %502 = add nsw i64 %421, 1
  %503 = icmp slt i64 %502, %173
  br i1 %503, label %420, label %395

504:                                              ; preds = %604, %395
  %505 = add nuw nsw i64 %369, 1
  %506 = icmp eq i64 %505, %174
  br i1 %506, label %390, label %368

507:                                              ; preds = %604, %396
  %508 = phi i64 [ 0, %396 ], [ %623, %604 ]
  %509 = trunc i64 %508 to i32
  %510 = add i32 %509, 3
  %511 = add i32 %155, %510
  %512 = sext i32 %511 to i64
  %513 = getelementptr inbounds [82 x i8], [82 x i8]* %6, i64 %401, i64 %512
  %514 = load i8, i8* %513, align 1
  %515 = sext i8 %514 to i32
  %516 = trunc i64 %508 to i32
  %517 = add i32 %66, %516
  %518 = add i32 %162, %517
  %519 = sext i32 %518 to i64
  %520 = getelementptr inbounds [82 x i8], [82 x i8]* %6, i64 %403, i64 %519
  %521 = load i8, i8* %520, align 1
  %522 = sext i8 %521 to i32
  %523 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* @fguv_32x32xn_c.w, i64 0, i64 %67, i64 %508, i64 0
  %524 = load i32, i32* %523, align 8
  %525 = mul nsw i32 %524, %522
  %526 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* @fguv_32x32xn_c.w, i64 0, i64 %67, i64 %508, i64 1
  %527 = load i32, i32* %526, align 4
  %528 = mul nsw i32 %527, %515
  %529 = add i32 %525, 16
  %530 = add i32 %529, %528
  %531 = ashr i32 %530, 5
  %532 = icmp slt i32 %531, 127
  %533 = select i1 %532, i32 %531, i32 127
  %534 = icmp sgt i32 %533, -128
  %535 = select i1 %534, i32 %533, i32 -128
  %536 = add i32 %149, %510
  %537 = sext i32 %536 to i64
  %538 = getelementptr inbounds [82 x i8], [82 x i8]* %6, i64 %405, i64 %537
  %539 = load i8, i8* %538, align 1
  %540 = sext i8 %539 to i32
  %541 = add i32 %168, %517
  %542 = sext i32 %541 to i64
  %543 = getelementptr inbounds [82 x i8], [82 x i8]* %6, i64 %407, i64 %542
  %544 = load i8, i8* %543, align 1
  %545 = sext i8 %544 to i32
  %546 = mul nsw i32 %524, %545
  %547 = mul nsw i32 %527, %540
  %548 = add i32 %547, 16
  %549 = add i32 %548, %546
  %550 = ashr i32 %549, 5
  %551 = icmp slt i32 %550, 127
  %552 = select i1 %551, i32 %550, i32 127
  %553 = icmp sgt i32 %552, -128
  %554 = select i1 %553, i32 %552, i32 -128
  %555 = mul nsw i32 %535, %409
  %556 = mul nsw i32 %554, %411
  %557 = add i32 %555, 16
  %558 = add i32 %557, %556
  %559 = ashr i32 %558, 5
  %560 = icmp slt i32 %559, 127
  %561 = select i1 %560, i32 %559, i32 127
  %562 = icmp sgt i32 %561, -128
  %563 = select i1 %562, i32 %561, i32 -128
  %564 = add nsw i64 %508, %93
  %565 = trunc i64 %564 to i32
  %566 = shl i32 %565, %13
  %567 = sext i32 %566 to i64
  %568 = getelementptr inbounds i8, i8* %416, i64 %567
  %569 = load i8, i8* %568, align 1
  br i1 %59, label %579, label %570

570:                                              ; preds = %507
  %571 = zext i8 %569 to i32
  %572 = getelementptr inbounds i8, i8* %568, i64 1
  %573 = load i8, i8* %572, align 1
  %574 = zext i8 %573 to i32
  %575 = add nuw nsw i32 %571, 1
  %576 = add nuw nsw i32 %575, %574
  %577 = lshr i32 %576, 1
  %578 = trunc i32 %577 to i8
  br label %579

579:                                              ; preds = %507, %570
  %580 = phi i8 [ %578, %570 ], [ %569, %507 ]
  %581 = getelementptr inbounds i8, i8* %418, i64 %564
  %582 = getelementptr inbounds i8, i8* %419, i64 %564
  %583 = zext i8 %580 to i32
  %584 = load i32, i32* %60, align 4
  %585 = icmp eq i32 %584, 0
  br i1 %585, label %589, label %586

586:                                              ; preds = %579
  %587 = load i8, i8* %581, align 1
  %588 = zext i8 %587 to i32
  br label %604

589:                                              ; preds = %579
  %590 = load i32, i32* %62, align 4
  %591 = mul nsw i32 %590, %583
  %592 = load i8, i8* %581, align 1
  %593 = zext i8 %592 to i32
  %594 = load i32, i32* %63, align 4
  %595 = mul nsw i32 %594, %593
  %596 = add nsw i32 %595, %591
  %597 = ashr i32 %596, 6
  %598 = load i32, i32* %64, align 4
  %599 = add nsw i32 %597, %598
  %600 = icmp slt i32 %599, 255
  %601 = select i1 %600, i32 %599, i32 255
  %602 = icmp sgt i32 %601, 0
  %603 = select i1 %602, i32 %601, i32 0
  br label %604

604:                                              ; preds = %586, %589
  %605 = phi i32 [ %588, %586 ], [ %593, %589 ]
  %606 = phi i32 [ %583, %586 ], [ %603, %589 ]
  %607 = zext i32 %606 to i64
  %608 = getelementptr inbounds i8, i8* %5, i64 %607
  %609 = load i8, i8* %608, align 1
  %610 = zext i8 %609 to i32
  %611 = mul nsw i32 %563, %610
  %612 = load i32, i32* %65, align 8
  %613 = shl i32 1, %612
  %614 = ashr i32 %613, 1
  %615 = add nsw i32 %614, %611
  %616 = ashr i32 %615, %612
  %617 = add nsw i32 %616, %605
  %618 = icmp slt i32 %617, %44
  %619 = icmp sgt i32 %617, %28
  %620 = select i1 %619, i32 %28, i32 %617
  %621 = select i1 %618, i32 %44, i32 %620
  %622 = trunc i32 %621 to i8
  store i8 %622, i8* %582, align 1
  %623 = add nuw nsw i64 %508, 1
  %624 = icmp eq i64 %623, %175
  br i1 %624, label %504, label %507

625:                                              ; preds = %85
  %626 = ashr i32 %86, 1
  %627 = xor i32 %626, %86
  %628 = lshr i32 %86, 3
  %629 = xor i32 %627, %628
  %630 = lshr i32 %86, 12
  %631 = xor i32 %629, %630
  %632 = shl i32 %631, 15
  %633 = and i32 %632, 32768
  %634 = or i32 %633, %626
  %635 = lshr i32 %634, 8
  %636 = and i32 %635, 255
  br label %115

637:                                              ; preds = %15
  %638 = getelementptr inbounds [2 x i32], [2 x i32]* %16, i64 0, i64 1
  %639 = add nsw i32 %8, -1
  %640 = mul i32 %639, 9472
  %641 = add i32 %640, 45568
  %642 = and i32 %641, 65280
  %643 = mul nsw i32 %639, 173
  %644 = add nsw i32 %643, 105
  %645 = and i32 %644, 255
  %646 = or i32 %645, %642
  %647 = xor i32 %646, %33
  store i32 %647, i32* %638, align 4
  br label %43
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
