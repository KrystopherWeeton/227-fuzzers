; ModuleID = '../../third_party/nasm/nasmlib/readnum.c'
source_filename = "../../third_party/nasm/nasmlib/readnum.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [44 x i8] c"numeric constant %s does not fit in 64 bits\00", align 1
@nasm_ctype_tab = external local_unnamed_addr global [256 x i16], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i64 @readnum(i8*, i8* nocapture) local_unnamed_addr #0 {
  store i8 0, i8* %1, align 1
  br label %3

3:                                                ; preds = %3, %2
  %4 = phi i8* [ %0, %2 ], [ %11, %3 ]
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i64
  %7 = getelementptr inbounds [256 x i16], [256 x i16]* @nasm_ctype_tab, i64 0, i64 %6
  %8 = load i16, i16* %7, align 2
  %9 = and i16 %8, 2
  %10 = icmp eq i16 %9, 0
  %11 = getelementptr inbounds i8, i8* %4, i64 1
  br i1 %10, label %12, label %3

12:                                               ; preds = %3
  %13 = icmp eq i8 %5, 45
  %14 = select i1 %13, i8* %11, i8* %4
  br label %15

15:                                               ; preds = %24, %12
  %16 = phi i8* [ %14, %12 ], [ %25, %24 ]
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i64
  %19 = getelementptr inbounds [256 x i16], [256 x i16]* @nasm_ctype_tab, i64 0, i64 %18
  %20 = load i16, i16* %19, align 2
  %21 = and i16 %20, 56
  %22 = icmp eq i16 %21, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %15
  switch i8 %17, label %26 [
    i8 95, label %24
    i8 36, label %24
  ]

24:                                               ; preds = %23, %23, %15
  %25 = getelementptr inbounds i8, i8* %16, i64 1
  br label %15

26:                                               ; preds = %23
  %27 = select i1 %13, i64 -1, i64 1
  %28 = ptrtoint i8* %16 to i64
  %29 = ptrtoint i8* %14 to i64
  %30 = sub i64 %28, %29
  %31 = trunc i64 %30 to i32
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %26
  store i8 1, i8* %1, align 1
  br label %133

34:                                               ; preds = %26
  %35 = icmp sgt i32 %31, 2
  br i1 %35, label %36, label %44

36:                                               ; preds = %34
  %37 = load i8, i8* %14, align 1
  %38 = icmp eq i8 %37, 48
  br i1 %38, label %39, label %48

39:                                               ; preds = %36
  %40 = getelementptr inbounds i8, i8* %14, i64 1
  %41 = load i8, i8* %40, align 1
  %42 = tail call fastcc i32 @radix_letter(i8 signext %41)
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %48, label %53

44:                                               ; preds = %34
  %45 = icmp eq i32 %31, 2
  br i1 %45, label %46, label %64

46:                                               ; preds = %44
  %47 = load i8, i8* %14, align 1
  br label %48

48:                                               ; preds = %46, %36, %39
  %49 = phi i8 [ %47, %46 ], [ %37, %36 ], [ 48, %39 ]
  %50 = icmp eq i8 %49, 36
  %51 = select i1 %50, i32 16, i32 0
  %52 = zext i1 %50 to i64
  br label %53

53:                                               ; preds = %39, %48
  %54 = phi i32 [ %51, %48 ], [ %42, %39 ]
  %55 = phi i64 [ %52, %48 ], [ 2, %39 ]
  %56 = getelementptr inbounds i8, i8* %16, i64 -1
  %57 = load i8, i8* %56, align 1
  %58 = tail call fastcc i32 @radix_letter(i8 signext %57)
  %59 = icmp ne i32 %58, 0
  %60 = sext i1 %59 to i64
  %61 = icmp sgt i32 %54, %58
  br i1 %61, label %62, label %64

62:                                               ; preds = %53
  %63 = getelementptr inbounds i8, i8* %14, i64 %55
  br label %72

64:                                               ; preds = %44, %53
  %65 = phi i64 [ %60, %53 ], [ 0, %44 ]
  %66 = phi i32 [ %58, %53 ], [ 0, %44 ]
  %67 = phi i32 [ %54, %53 ], [ 0, %44 ]
  %68 = icmp sgt i32 %66, %67
  %69 = getelementptr inbounds i8, i8* %16, i64 %65
  %70 = select i1 %68, i8* %69, i8* %16
  %71 = select i1 %68, i32 %66, i32 10
  br label %72

72:                                               ; preds = %64, %62
  %73 = phi i8* [ %63, %62 ], [ %14, %64 ]
  %74 = phi i8* [ %16, %62 ], [ %70, %64 ]
  %75 = phi i32 [ %54, %62 ], [ %71, %64 ]
  %76 = ashr i32 %75, 1
  %77 = sext i32 %76 to i64
  %78 = udiv i64 -9223372036854775808, %77
  %79 = icmp eq i32 %75, 10
  %80 = select i1 %79, i32 6, i32 0
  %81 = load i8, i8* %73, align 1
  %82 = icmp ne i8 %81, 0
  %83 = icmp ult i8* %73, %74
  %84 = and i1 %83, %82
  br i1 %84, label %85, label %130

85:                                               ; preds = %72
  %86 = sext i32 %75 to i64
  br label %87

87:                                               ; preds = %85, %118
  %88 = phi i8 [ %81, %85 ], [ %122, %118 ]
  %89 = phi i8 [ 0, %85 ], [ %120, %118 ]
  %90 = phi i64 [ 0, %85 ], [ %119, %118 ]
  %91 = phi i8* [ %73, %85 ], [ %121, %118 ]
  %92 = icmp eq i8 %88, 95
  br i1 %92, label %118, label %93

93:                                               ; preds = %87
  %94 = icmp slt i8 %88, 48
  %95 = add i8 %88, -58
  %96 = icmp ult i8 %95, 7
  %97 = or i1 %94, %96
  br i1 %97, label %105, label %98

98:                                               ; preds = %93
  %99 = or i8 %88, 32
  %100 = zext i8 %99 to i32
  %101 = icmp ugt i8 %99, 96
  %102 = select i1 %101, i32 -87, i32 -48
  %103 = add nsw i32 %102, %100
  %104 = icmp slt i32 %103, %75
  br i1 %104, label %106, label %105

105:                                              ; preds = %98, %93
  store i8 1, i8* %1, align 1
  br label %133

106:                                              ; preds = %98
  %107 = icmp ugt i64 %90, %78
  br i1 %107, label %112, label %108

108:                                              ; preds = %106
  %109 = icmp ne i64 %90, %78
  %110 = icmp slt i32 %103, %80
  %111 = or i1 %109, %110
  br i1 %111, label %113, label %112

112:                                              ; preds = %108, %106
  br label %113

113:                                              ; preds = %108, %112
  %114 = phi i8 [ 1, %112 ], [ %89, %108 ]
  %115 = mul i64 %90, %86
  %116 = sext i32 %103 to i64
  %117 = add i64 %115, %116
  br label %118

118:                                              ; preds = %87, %113
  %119 = phi i64 [ %117, %113 ], [ %90, %87 ]
  %120 = phi i8 [ %114, %113 ], [ %89, %87 ]
  %121 = getelementptr inbounds i8, i8* %91, i64 1
  %122 = load i8, i8* %121, align 1
  %123 = icmp ne i8 %122, 0
  %124 = icmp ult i8* %121, %74
  %125 = and i1 %124, %123
  br i1 %125, label %87, label %126

126:                                              ; preds = %118
  %127 = and i8 %120, 1
  %128 = icmp eq i8 %127, 0
  br i1 %128, label %130, label %129

129:                                              ; preds = %126
  tail call void (i32, i8*, ...) @nasm_warn(i32 1179648, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i8* %0) #3
  br label %130

130:                                              ; preds = %72, %126, %129
  %131 = phi i64 [ %119, %126 ], [ %119, %129 ], [ 0, %72 ]
  %132 = mul i64 %131, %27
  br label %133

133:                                              ; preds = %130, %105, %33
  %134 = phi i64 [ 0, %105 ], [ %132, %130 ], [ 0, %33 ]
  ret i64 %134
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal fastcc i32 @radix_letter(i8 signext) unnamed_addr #1 {
  %2 = sext i8 %0 to i32
  switch i32 %2, label %6 [
    i32 98, label %7
    i32 66, label %7
    i32 121, label %7
    i32 89, label %7
    i32 111, label %3
    i32 79, label %3
    i32 113, label %3
    i32 81, label %3
    i32 104, label %4
    i32 72, label %4
    i32 120, label %4
    i32 88, label %4
    i32 100, label %5
    i32 68, label %5
    i32 116, label %5
    i32 84, label %5
  ]

3:                                                ; preds = %1, %1, %1, %1
  br label %7

4:                                                ; preds = %1, %1, %1, %1
  br label %7

5:                                                ; preds = %1, %1, %1, %1
  br label %7

6:                                                ; preds = %1
  br label %7

7:                                                ; preds = %1, %1, %1, %1, %6, %5, %4, %3
  %8 = phi i32 [ 0, %6 ], [ 10, %5 ], [ 16, %4 ], [ 8, %3 ], [ 2, %1 ], [ 2, %1 ], [ 2, %1 ], [ 2, %1 ]
  ret i32 %8
}

declare void @nasm_warn(i32, i8*, ...) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
