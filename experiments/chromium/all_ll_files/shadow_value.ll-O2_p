; ModuleID = '../../ui/gfx/shadow_value.cc'
source_filename = "../../ui/gfx/shadow_value.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::ShadowValue" = type <{ %"class.gfx::Vector2d", double, i32, [4 x i8] }>
%"class.gfx::Vector2d" = type { i32, i32 }
%"class.gfx::Vector2dF" = type { float, float }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.gfx::ShadowValue"*, %"class.gfx::ShadowValue"*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.gfx::ShadowValue"* }
%"class.gfx::Insets" = type { i32, i32, i32, i32 }

$_ZNK3gfx6InsetsngEv = comdat any

@.str = private unnamed_addr constant [31 x i8] c"(%d,%d),%.2f,rgba(%d,%d,%d,%d)\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3gfx11ShadowValue5ScaleEf(%"class.gfx::ShadowValue"* noalias nocapture sret, %"class.gfx::ShadowValue"* nocapture readonly, float) local_unnamed_addr #0 align 2 {
  %4 = alloca <2 x float>, align 8
  %5 = bitcast <2 x float>* %4 to %"class.gfx::Vector2dF"*
  %6 = alloca <2 x float>, align 8
  %7 = bitcast <2 x float>* %6 to %"class.gfx::Vector2dF"*
  %8 = bitcast <2 x float>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #9
  %9 = bitcast <2 x float>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #9
  %10 = getelementptr inbounds %"class.gfx::ShadowValue", %"class.gfx::ShadowValue"* %1, i64 0, i32 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = sitofp i32 %11 to float
  %13 = getelementptr inbounds %"class.gfx::ShadowValue", %"class.gfx::ShadowValue"* %1, i64 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = sitofp i32 %14 to float
  %16 = insertelement <2 x float> undef, float %12, i32 0
  %17 = insertelement <2 x float> %16, float %15, i32 1
  store <2 x float> %17, <2 x float>* %6, align 8
  %18 = call <2 x float> @_ZN3gfx13ScaleVector2dERKNS_9Vector2dFEff(%"class.gfx::Vector2dF"* nonnull dereferenceable(8) %7, float %2, float %2) #9
  store <2 x float> %18, <2 x float>* %4, align 8
  %19 = call i64 @_ZN3gfx17ToFlooredVector2dERKNS_9Vector2dFE(%"class.gfx::Vector2dF"* nonnull dereferenceable(8) %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #9
  %20 = getelementptr inbounds %"class.gfx::ShadowValue", %"class.gfx::ShadowValue"* %1, i64 0, i32 1
  %21 = load double, double* %20, align 8
  %22 = fpext float %2 to double
  %23 = fmul double %21, %22
  %24 = getelementptr inbounds %"class.gfx::ShadowValue", %"class.gfx::ShadowValue"* %1, i64 0, i32 2
  %25 = load i32, i32* %24, align 8
  %26 = bitcast %"class.gfx::ShadowValue"* %0 to i64*
  store i64 %19, i64* %26, align 8
  %27 = getelementptr inbounds %"class.gfx::ShadowValue", %"class.gfx::ShadowValue"* %0, i64 0, i32 1
  store double %23, double* %27, align 8
  %28 = getelementptr inbounds %"class.gfx::ShadowValue", %"class.gfx::ShadowValue"* %0, i64 0, i32 2
  store i32 %25, i32* %28, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i64 @_ZN3gfx17ToFlooredVector2dERKNS_9Vector2dFE(%"class.gfx::Vector2dF"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3gfx11ShadowValue8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.gfx::ShadowValue"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.gfx::ShadowValue", %"class.gfx::ShadowValue"* %1, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::ShadowValue", %"class.gfx::ShadowValue"* %1, i64 0, i32 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.gfx::ShadowValue", %"class.gfx::ShadowValue"* %1, i64 0, i32 1
  %8 = load double, double* %7, align 8
  %9 = getelementptr inbounds %"class.gfx::ShadowValue", %"class.gfx::ShadowValue"* %1, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = lshr i32 %10, 16
  %12 = and i32 %11, 255
  %13 = lshr i32 %10, 8
  %14 = and i32 %13, 255
  %15 = and i32 %10, 255
  %16 = lshr i32 %10, 24
  tail call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret %0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0), i32 %4, i32 %6, double %8, i32 %12, i32 %14, i32 %15, i32 %16) #9
  ret void
}

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZN3gfx11ShadowValue9GetMarginERKNSt3__16vectorIS0_NS1_9allocatorIS0_EEEE(%"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #3 align 2 {
  %2 = alloca { i64, i64 }, align 8
  %3 = bitcast { i64, i64 }* %2 to %"class.gfx::Insets"*
  %4 = bitcast { i64, i64 }* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #9
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i64 0, i32 1
  %6 = tail call fastcc { i64, i64 } @_ZN3gfx12_GLOBAL__N_19GetInsetsERKNSt3__16vectorINS_11ShadowValueENS1_9allocatorIS3_EEEEb(%"class.std::__1::vector"* dereferenceable(24) %0, i1 zeroext false)
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i64 0, i32 0
  %8 = extractvalue { i64, i64 } %6, 0
  store i64 %8, i64* %7, align 8
  %9 = extractvalue { i64, i64 } %6, 1
  store i64 %9, i64* %5, align 8
  %10 = call { i64, i64 } @_ZNK3gfx6InsetsngEv(%"class.gfx::Insets"* nonnull %3)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #9
  ret { i64, i64 } %10
}

; Function Attrs: nounwind readonly ssp uwtable
define internal fastcc { i64, i64 } @_ZN3gfx12_GLOBAL__N_19GetInsetsERKNSt3__16vectorINS_11ShadowValueENS1_9allocatorIS3_EEEEb(%"class.std::__1::vector"* nocapture readonly dereferenceable(24), i1 zeroext) unnamed_addr #4 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.gfx::ShadowValue"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %5, %7
  %9 = inttoptr i64 %7 to %"class.gfx::ShadowValue"*
  br i1 %8, label %24, label %10

10:                                               ; preds = %2
  %11 = sub i64 %5, %7
  %12 = sdiv exact i64 %11, 24
  br label %65

13:                                               ; preds = %65
  %14 = extractelement <4 x i32> %95, i32 1
  %15 = icmp sgt i32 %14, 0
  %16 = extractelement <4 x i32> %95, i32 3
  %17 = icmp sgt i32 %16, 0
  %18 = and i1 %17, %15
  %19 = sub nuw nsw i32 2147483647, %14
  %20 = icmp ult i32 %19, %16
  %21 = and i1 %20, %18
  %22 = extractelement <4 x i32> %95, i32 0
  %23 = extractelement <4 x i32> %95, i32 2
  br i1 %21, label %35, label %24

24:                                               ; preds = %2, %13
  %25 = phi i32 [ %22, %13 ], [ 0, %2 ]
  %26 = phi i32 [ %14, %13 ], [ 0, %2 ]
  %27 = phi i32 [ %23, %13 ], [ 0, %2 ]
  %28 = phi i32 [ %16, %13 ], [ 0, %2 ]
  %29 = and i32 %26, %28
  %30 = icmp slt i32 %29, 0
  %31 = sub nsw i32 -2147483648, %26
  %32 = icmp sgt i32 %31, %28
  %33 = and i1 %32, %30
  %34 = select i1 %33, i32 %31, i32 %28
  br label %35

35:                                               ; preds = %24, %13
  %36 = phi i32 [ %25, %24 ], [ %22, %13 ]
  %37 = phi i32 [ %26, %24 ], [ %14, %13 ]
  %38 = phi i32 [ %27, %24 ], [ %23, %13 ]
  %39 = phi i32 [ %34, %24 ], [ %19, %13 ]
  %40 = icmp sgt i32 %36, 0
  %41 = icmp sgt i32 %38, 0
  %42 = and i1 %41, %40
  %43 = sub nuw nsw i32 2147483647, %36
  %44 = icmp ult i32 %43, %38
  %45 = and i1 %44, %42
  br i1 %45, label %53, label %46

46:                                               ; preds = %35
  %47 = and i32 %36, %38
  %48 = icmp slt i32 %47, 0
  %49 = sub nsw i32 -2147483648, %36
  %50 = icmp sgt i32 %49, %38
  %51 = and i1 %50, %48
  %52 = select i1 %51, i32 %49, i32 %38
  br label %53

53:                                               ; preds = %35, %46
  %54 = phi i32 [ %52, %46 ], [ %43, %35 ]
  %55 = zext i32 %36 to i64
  %56 = shl nuw i64 %55, 32
  %57 = zext i32 %37 to i64
  %58 = or i64 %56, %57
  %59 = insertvalue { i64, i64 } undef, i64 %58, 0
  %60 = zext i32 %54 to i64
  %61 = shl nuw i64 %60, 32
  %62 = zext i32 %39 to i64
  %63 = or i64 %61, %62
  %64 = insertvalue { i64, i64 } %59, i64 %63, 1
  ret { i64, i64 } %64

65:                                               ; preds = %10, %65
  %66 = phi i64 [ 0, %10 ], [ %96, %65 ]
  %67 = phi <4 x i32> [ zeroinitializer, %10 ], [ %95, %65 ]
  %68 = getelementptr inbounds %"class.gfx::ShadowValue", %"class.gfx::ShadowValue"* %9, i64 %66, i32 1
  %69 = load double, double* %68, align 8
  %70 = fmul double %69, 5.000000e-01
  %71 = select i1 %1, double %69, double %70
  %72 = fcmp oge double %71, 0.000000e+00
  %73 = fadd double %71, 5.000000e-01
  %74 = tail call double @llvm.floor.f64(double %73) #9
  %75 = fadd double %71, -5.000000e-01
  %76 = tail call double @llvm.ceil.f64(double %75) #9
  %77 = select i1 %72, double %74, double %76
  %78 = fcmp ult double %77, 0xC1E0000000000000
  %79 = fcmp ugt double %77, 0x41DFFFFFFFC00000
  %80 = fcmp ogt double %77, 0xC1E0000000000000
  %81 = select i1 %80, double %77, double 0xC1E0000000000000
  %82 = fptosi double %81 to i32
  %83 = select i1 %78, i32 0, i32 2147483647
  %84 = select i1 %79, i32 %83, i32 %82
  %85 = getelementptr inbounds %"class.gfx::ShadowValue", %"class.gfx::ShadowValue"* %9, i64 %66, i32 0, i32 0
  %86 = bitcast i32* %85 to <2 x i32>*
  %87 = load <2 x i32>, <2 x i32>* %86, align 4
  %88 = shufflevector <2 x i32> %87, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %89 = insertelement <4 x i32> undef, i32 %84, i32 0
  %90 = shufflevector <4 x i32> %89, <4 x i32> undef, <4 x i32> zeroinitializer
  %91 = sub nsw <4 x i32> %90, %88
  %92 = add nsw <4 x i32> %90, %88
  %93 = shufflevector <4 x i32> %91, <4 x i32> %92, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %94 = icmp slt <4 x i32> %67, %93
  %95 = select <4 x i1> %94, <4 x i32> %93, <4 x i32> %67
  %96 = add nuw i64 %66, 1
  %97 = icmp ult i64 %96, %12
  br i1 %97, label %65, label %13
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i64 } @_ZNK3gfx6InsetsngEv(%"class.gfx::Insets"*) local_unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.gfx::Insets", %"class.gfx::Insets"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = tail call i1 @llvm.is.constant.i32(i32 %3) #9
  br i1 %4, label %5, label %9

5:                                                ; preds = %1
  %6 = sub i32 0, %3
  %7 = icmp eq i32 %6, -2147483648
  %8 = select i1 %7, i32 2147483647, i32 %6
  br label %14

9:                                                ; preds = %1
  %10 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %3) #9
  %11 = extractvalue { i32, i1 } %10, 1
  %12 = extractvalue { i32, i1 } %10, 0
  %13 = select i1 %11, i32 2147483647, i32 %12
  br label %14

14:                                               ; preds = %5, %9
  %15 = phi i32 [ %8, %5 ], [ %13, %9 ]
  %16 = getelementptr inbounds %"class.gfx::Insets", %"class.gfx::Insets"* %0, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = tail call i1 @llvm.is.constant.i32(i32 %17) #9
  br i1 %18, label %19, label %23

19:                                               ; preds = %14
  %20 = sub i32 0, %17
  %21 = icmp eq i32 %20, -2147483648
  %22 = select i1 %21, i32 2147483647, i32 %20
  br label %28

23:                                               ; preds = %14
  %24 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %17) #9
  %25 = extractvalue { i32, i1 } %24, 1
  %26 = extractvalue { i32, i1 } %24, 0
  %27 = select i1 %25, i32 2147483647, i32 %26
  br label %28

28:                                               ; preds = %19, %23
  %29 = phi i32 [ %22, %19 ], [ %27, %23 ]
  %30 = getelementptr inbounds %"class.gfx::Insets", %"class.gfx::Insets"* %0, i64 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = tail call i1 @llvm.is.constant.i32(i32 %31) #9
  br i1 %32, label %33, label %37

33:                                               ; preds = %28
  %34 = sub i32 0, %31
  %35 = icmp eq i32 %34, -2147483648
  %36 = select i1 %35, i32 2147483647, i32 %34
  br label %42

37:                                               ; preds = %28
  %38 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %31) #9
  %39 = extractvalue { i32, i1 } %38, 1
  %40 = extractvalue { i32, i1 } %38, 0
  %41 = select i1 %39, i32 2147483647, i32 %40
  br label %42

42:                                               ; preds = %33, %37
  %43 = phi i32 [ %36, %33 ], [ %41, %37 ]
  %44 = getelementptr inbounds %"class.gfx::Insets", %"class.gfx::Insets"* %0, i64 0, i32 3
  %45 = load i32, i32* %44, align 4
  %46 = tail call i1 @llvm.is.constant.i32(i32 %45) #9
  br i1 %46, label %47, label %51

47:                                               ; preds = %42
  %48 = sub i32 0, %45
  %49 = icmp eq i32 %48, -2147483648
  %50 = select i1 %49, i32 2147483647, i32 %48
  br label %56

51:                                               ; preds = %42
  %52 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %45) #9
  %53 = extractvalue { i32, i1 } %52, 1
  %54 = extractvalue { i32, i1 } %52, 0
  %55 = select i1 %53, i32 2147483647, i32 %54
  br label %56

56:                                               ; preds = %47, %51
  %57 = phi i32 [ %50, %47 ], [ %55, %51 ]
  %58 = icmp sgt i32 %15, 0
  %59 = icmp sgt i32 %43, 0
  %60 = and i1 %58, %59
  %61 = sub nuw nsw i32 2147483647, %15
  %62 = icmp ult i32 %61, %43
  %63 = and i1 %62, %60
  br i1 %63, label %71, label %64

64:                                               ; preds = %56
  %65 = and i32 %43, %15
  %66 = icmp slt i32 %65, 0
  %67 = sub nsw i32 -2147483648, %15
  %68 = icmp sgt i32 %67, %43
  %69 = and i1 %68, %66
  %70 = select i1 %69, i32 %67, i32 %43
  br label %71

71:                                               ; preds = %64, %56
  %72 = phi i32 [ %70, %64 ], [ %61, %56 ]
  %73 = icmp sgt i32 %29, 0
  %74 = icmp sgt i32 %57, 0
  %75 = and i1 %73, %74
  %76 = sub nuw nsw i32 2147483647, %29
  %77 = icmp ult i32 %76, %57
  %78 = and i1 %77, %75
  br i1 %78, label %86, label %79

79:                                               ; preds = %71
  %80 = and i32 %57, %29
  %81 = icmp slt i32 %80, 0
  %82 = sub nsw i32 -2147483648, %29
  %83 = icmp sgt i32 %82, %57
  %84 = and i1 %83, %81
  %85 = select i1 %84, i32 %82, i32 %57
  br label %86

86:                                               ; preds = %71, %79
  %87 = phi i32 [ %85, %79 ], [ %76, %71 ]
  %88 = zext i32 %29 to i64
  %89 = shl nuw i64 %88, 32
  %90 = zext i32 %15 to i64
  %91 = or i64 %89, %90
  %92 = insertvalue { i64, i64 } undef, i64 %91, 0
  %93 = zext i32 %87 to i64
  %94 = shl nuw i64 %93, 32
  %95 = zext i32 %72 to i64
  %96 = or i64 %94, %95
  %97 = insertvalue { i64, i64 } %92, i64 %96, 1
  ret { i64, i64 } %97
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZN3gfx11ShadowValue13GetBlurRegionERKNSt3__16vectorIS0_NS1_9allocatorIS0_EEEE(%"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #4 align 2 {
  %2 = tail call fastcc { i64, i64 } @_ZN3gfx12_GLOBAL__N_19GetInsetsERKNSt3__16vectorINS_11ShadowValueENS1_9allocatorIS3_EEEEb(%"class.std::__1::vector"* dereferenceable(24) %0, i1 zeroext true)
  ret { i64, i64 } %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx11ShadowValue16MakeShadowValuesEijj(%"class.std::__1::vector"* noalias nocapture sret, i32, i32, i32) local_unnamed_addr #3 align 2 {
  switch i32 %1, label %45 [
    i32 3, label %5
    i32 16, label %25
  ]

5:                                                ; preds = %4
  %6 = tail call i8* @_Znwm(i64 48) #10
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %6, i8** %8, align 8
  %9 = getelementptr inbounds i8, i8* %6, i64 48
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %11 = bitcast %"class.gfx::ShadowValue"** %10 to i8**
  store i8* %9, i8** %11, align 8
  %12 = bitcast %"class.gfx::ShadowValue"** %7 to i64*
  %13 = bitcast i8* %6 to i64*
  store i64 4294967296, i64* %13, align 8
  %14 = getelementptr inbounds i8, i8* %6, i64 8
  %15 = bitcast i8* %14 to double*
  store double 1.200000e+01, double* %15, align 8
  %16 = getelementptr inbounds i8, i8* %6, i64 16
  %17 = bitcast i8* %16 to i32*
  store i32 %2, i32* %17, align 8
  %18 = getelementptr inbounds i8, i8* %6, i64 24
  %19 = bitcast i8* %18 to i64*
  store i64 17179869184, i64* %19, align 8
  %20 = getelementptr inbounds i8, i8* %6, i64 32
  %21 = bitcast i8* %20 to double*
  store double 6.400000e+01, double* %21, align 8
  %22 = getelementptr inbounds i8, i8* %6, i64 40
  %23 = bitcast i8* %22 to i32*
  store i32 %3, i32* %23, align 8
  %24 = ptrtoint i8* %9 to i64
  store i64 %24, i64* %12, align 8
  br label %76

25:                                               ; preds = %4
  %26 = tail call i8* @_Znwm(i64 48) #10
  %27 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %28 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %26, i8** %28, align 8
  %29 = getelementptr inbounds i8, i8* %26, i64 48
  %30 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %31 = bitcast %"class.gfx::ShadowValue"** %30 to i8**
  store i8* %29, i8** %31, align 8
  %32 = bitcast %"class.gfx::ShadowValue"** %27 to i64*
  %33 = bitcast i8* %26 to i64*
  store i64 0, i64* %33, align 8
  %34 = getelementptr inbounds i8, i8* %26, i64 8
  %35 = bitcast i8* %34 to double*
  store double 3.200000e+01, double* %35, align 8
  %36 = getelementptr inbounds i8, i8* %26, i64 16
  %37 = bitcast i8* %36 to i32*
  store i32 %2, i32* %37, align 8
  %38 = getelementptr inbounds i8, i8* %26, i64 24
  %39 = bitcast i8* %38 to i64*
  store i64 51539607552, i64* %39, align 8
  %40 = getelementptr inbounds i8, i8* %26, i64 32
  %41 = bitcast i8* %40 to double*
  store double 3.200000e+01, double* %41, align 8
  %42 = getelementptr inbounds i8, i8* %26, i64 40
  %43 = bitcast i8* %42 to i32*
  store i32 %3, i32* %43, align 8
  %44 = ptrtoint i8* %29 to i64
  store i64 %44, i64* %32, align 8
  br label %76

45:                                               ; preds = %4
  %46 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %47 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %48 = shl nsw i32 %1, 1
  %49 = shl nsw i32 %1, 2
  %50 = and i32 %2, 16777215
  %51 = or i32 %50, 1023410176
  %52 = bitcast %"class.gfx::ShadowValue"** %46 to i64*
  %53 = bitcast %"class.std::__1::vector"* %0 to i64*
  %54 = bitcast %"class.gfx::ShadowValue"** %47 to i64*
  %55 = tail call i8* @_Znwm(i64 24) #10, !noalias !2
  %56 = sitofp i32 %49 to double
  %57 = bitcast i8* %55 to i64*
  %58 = zext i32 %1 to i64
  %59 = shl nuw i64 %58, 32
  store i64 %59, i64* %57, align 8, !noalias !2
  %60 = getelementptr inbounds i8, i8* %55, i64 8
  %61 = bitcast i8* %60 to double*
  store double %56, double* %61, align 8, !noalias !2
  %62 = getelementptr inbounds i8, i8* %55, i64 16
  %63 = bitcast i8* %62 to i32*
  store i32 %51, i32* %63, align 8, !noalias !2
  %64 = or i32 %50, 520093696
  %65 = tail call i8* @_Znwm(i64 48) #10, !noalias !2
  %66 = getelementptr inbounds i8, i8* %65, i64 24
  %67 = getelementptr inbounds i8, i8* %65, i64 48
  %68 = ptrtoint i8* %67 to i64
  %69 = sitofp i32 %48 to double
  %70 = bitcast i8* %66 to i64*
  store i64 0, i64* %70, align 8, !noalias !2
  %71 = getelementptr inbounds i8, i8* %65, i64 32
  %72 = bitcast i8* %71 to double*
  store double %69, double* %72, align 8, !noalias !2
  %73 = getelementptr inbounds i8, i8* %65, i64 40
  %74 = bitcast i8* %73 to i32*
  store i32 %64, i32* %74, align 8, !noalias !2
  %75 = ptrtoint i8* %65 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %65, i8* nonnull align 8 %55, i64 24, i1 false) #9, !noalias !2
  store i64 %75, i64* %53, align 8, !alias.scope !2
  store i64 %68, i64* %52, align 8, !alias.scope !2
  store i64 %68, i64* %54, align 8, !alias.scope !2
  tail call void @_ZdlPv(i8* nonnull %55) #10, !noalias !2
  br label %76

76:                                               ; preds = %45, %25, %5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx11ShadowValue18MakeMdShadowValuesEij(%"class.std::__1::vector"* noalias sret, i32, i32) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %6 = shl nsw i32 %1, 1
  %7 = shl nsw i32 %1, 2
  %8 = and i32 %2, 16777215
  %9 = or i32 %8, 1023410176
  %10 = bitcast %"class.gfx::ShadowValue"** %4 to i64*
  %11 = bitcast %"class.std::__1::vector"* %0 to i64*
  %12 = bitcast %"class.gfx::ShadowValue"** %5 to i64*
  %13 = tail call i8* @_Znwm(i64 24) #10
  %14 = getelementptr inbounds i8, i8* %13, i64 24
  %15 = ptrtoint i8* %14 to i64
  %16 = sitofp i32 %7 to double
  %17 = bitcast i8* %13 to i64*
  %18 = zext i32 %1 to i64
  %19 = shl nuw i64 %18, 32
  store i64 %19, i64* %17, align 8
  %20 = getelementptr inbounds i8, i8* %13, i64 8
  %21 = bitcast i8* %20 to double*
  store double %16, double* %21, align 8
  %22 = getelementptr inbounds i8, i8* %13, i64 16
  %23 = bitcast i8* %22 to i32*
  store i32 %9, i32* %23, align 8
  %24 = ptrtoint i8* %13 to i64
  store i64 %24, i64* %11, align 8
  store i64 %15, i64* %10, align 8
  store i64 %15, i64* %12, align 8
  %25 = or i32 %8, 520093696
  %26 = bitcast %"class.std::__1::vector"* %0 to i64*
  %27 = tail call i8* @_Znwm(i64 48) #10
  %28 = getelementptr inbounds i8, i8* %27, i64 24
  %29 = sitofp i32 %6 to double
  %30 = bitcast i8* %28 to i64*
  store i64 0, i64* %30, align 8
  %31 = getelementptr inbounds i8, i8* %27, i64 32
  %32 = bitcast i8* %31 to double*
  store double %29, double* %32, align 8
  %33 = getelementptr inbounds i8, i8* %27, i64 40
  %34 = bitcast i8* %33 to i32*
  store i32 %25, i32* %34, align 8
  %35 = insertelement <2 x i8*> undef, i8* %27, i32 0
  %36 = shufflevector <2 x i8*> %35, <2 x i8*> undef, <2 x i32> zeroinitializer
  %37 = getelementptr i8, <2 x i8*> %36, <2 x i64> <i64 48, i64 48>
  %38 = ptrtoint <2 x i8*> %37 to <2 x i64>
  %39 = ptrtoint i8* %27 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %27, i8* nonnull align 8 %13, i64 24, i1 false) #9
  store i64 %39, i64* %26, align 8
  %40 = bitcast %"class.gfx::ShadowValue"** %4 to <2 x i64>*
  store <2 x i64> %38, <2 x i64>* %40, align 8
  tail call void @_ZdlPv(i8* nonnull %13) #10
  ret void
}

declare <2 x float> @_ZN3gfx13ScaleVector2dERKNS_9Vector2dFEff(%"class.gfx::Vector2dF"* dereferenceable(8), float, float) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #5

; Function Attrs: nounwind readnone speculatable
declare double @llvm.ceil.f64(double) #5

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i32(i32) #6

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind readnone }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN3gfx11ShadowValue18MakeMdShadowValuesEij: argument 0"}
!4 = distinct !{!4, !"_ZN3gfx11ShadowValue18MakeMdShadowValuesEij"}
