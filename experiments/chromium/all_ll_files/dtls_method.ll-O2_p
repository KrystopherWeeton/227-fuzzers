; ModuleID = '../../third_party/boringssl/src/ssl/dtls_method.cc'
source_filename = "../../third_party/boringssl/src/ssl/dtls_method.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ssl_method_st = type { i16, %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_X509_METHOD"* }
%"struct.bssl::SSL_PROTOCOL_METHOD" = type { i8, i1 (%struct.ssl_st*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %"struct.bssl::SSLMessage"*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, %"class.bssl::Span"*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %struct.cbb_st*, i8)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*)*, i32 (%struct.ssl_st*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)* }
%struct.ssl_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"class.std::__1::unique_ptr", i16, i16, [4 x i8], %"class.std::__1::unique_ptr.84", %"class.std::__1::unique_ptr.84", i32 (%"struct.bssl::SSL_HANDSHAKE"*)*, %"struct.bssl::SSL3_STATE"*, %"struct.bssl::DTLS1_STATE"*, void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], %"class.std::__1::unique_ptr.51", void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.105", %"class.std::__1::unique_ptr.105", %struct.crypto_ex_data_st, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.23", %struct.ssl_quic_method_st*, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.bssl::SSL_CONFIG"* }
%"struct.bssl::SSL_CONFIG" = type <{ %struct.ssl_st*, i16, i16, [4 x i8], %struct.X509_VERIFY_PARAM_st*, %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.9", i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.ssl_st*, i8*)*, %"class.std::__1::unique_ptr.23", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, %"class.std::__1::unique_ptr.17", %struct.stack_st_X509_NAME*, %"class.bssl::Array.49", %"class.std::__1::unique_ptr.12", %"class.bssl::Array", %"class.bssl::GrowableArray.75", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.49", %"class.std::__1::unique_ptr.77", i8, i16, [5 x i8] }>
%struct.X509_VERIFY_PARAM_st = type { i8*, i64, i64, i64, i32, i32, i32, %struct.stack_st_ASN1_OBJECT*, %struct.X509_VERIFY_PARAM_ID_st* }
%struct.stack_st_ASN1_OBJECT = type opaque
%struct.X509_VERIFY_PARAM_ID_st = type opaque
%"class.std::__1::unique_ptr.0" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.bssl::SSLCipherPreferenceList"* }
%"struct.bssl::SSLCipherPreferenceList" = type { %"class.std::__1::unique_ptr.3", i8* }
%"class.std::__1::unique_ptr.3" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %struct.stack_st_SSL_CIPHER* }
%struct.stack_st_SSL_CIPHER = type opaque
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.bssl::CERT"* }
%"struct.bssl::CERT" = type { %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.17", %struct.stack_st_X509*, %struct.x509_st*, %struct.x509_st*, %struct.ssl_private_key_method_st*, %"struct.bssl::SSL_X509_METHOD"*, %"class.bssl::Array.49", i32 (%struct.ssl_st*, i8*)*, i8*, %struct.x509_store_st*, %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", i8, [32 x i8], %"class.std::__1::unique_ptr.68", %"class.std::__1::unique_ptr.12", %struct.ssl_private_key_method_st* }
%struct.stack_st_X509 = type opaque
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon.22 }
%union.anon.22 = type { i8* }
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type opaque
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.x509_store_st = type { i32, %struct.stack_st_X509_OBJECT*, %union.crypto_mutex_st, %struct.stack_st_X509*, %struct.stack_st_X509_LOOKUP*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 }
%struct.stack_st_X509_OBJECT = type opaque
%struct.stack_st_X509_LOOKUP = type opaque
%struct.x509_store_ctx_st = type { %struct.x509_store_st*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509_CRL*, %struct.X509_VERIFY_PARAM_st*, i8*, {}*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, {}*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, {}*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, {}*, i32, i32, %struct.stack_st_X509*, %struct.X509_POLICY_TREE_st*, i32, i32, i32, %struct.x509_st*, %struct.x509_st*, %struct.X509_crl_st*, i32, i32, %struct.x509_store_ctx_st*, %struct.crypto_ex_data_st }
%struct.stack_st_X509_CRL = type opaque
%struct.X509_POLICY_TREE_st = type opaque
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.stack_st_X509_REVOKED = type opaque
%struct.ISSUING_DIST_POINT_st = type opaque
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_crl_method_st = type opaque
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %struct.crypto_buffer_st* }
%"class.std::__1::unique_ptr.68" = type { %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"struct.bssl::DC"* }
%"struct.bssl::DC" = type { %"class.std::__1::unique_ptr.28", i16, %"class.std::__1::unique_ptr.12" }
%struct.ssl_private_key_method_st = type { i32 (%struct.ssl_st*, i8*, i64*, i64, i16, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64)* }
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %struct.stack_st_CRYPTO_BUFFER* }
%struct.stack_st_CRYPTO_BUFFER = type opaque
%struct.stack_st_X509_NAME = type opaque
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %struct.evp_pkey_st* }
%struct.evp_pkey_st = type { i32, i32, %union.anon, %struct.evp_pkey_asn1_method_st* }
%union.anon = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%"class.bssl::GrowableArray.75" = type { i64, %"class.bssl::Array.76" }
%"class.bssl::Array.76" = type { %"struct.bssl::ALPSConfig"*, i64 }
%"struct.bssl::ALPSConfig" = type { %"class.bssl::Array", %"class.bssl::Array" }
%"class.bssl::Array" = type { i8*, i64 }
%"class.bssl::Array.49" = type { i16*, i64 }
%"class.std::__1::unique_ptr.77" = type { %"class.std::__1::__compressed_pair.78" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %struct.stack_st_SRTP_PROTECTION_PROFILE* }
%struct.stack_st_SRTP_PROTECTION_PROFILE = type opaque
%"class.std::__1::unique_ptr.84" = type { %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %struct.bio_st* }
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%"struct.bssl::SSL_HANDSHAKE" = type <{ %struct.ssl_st*, %"struct.bssl::SSL_CONFIG"*, i32, i32, i32, i16, i16, i64, [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], %union.anon.33, i16, [2 x i8], %"class.std::__1::unique_ptr.34", [2 x %"class.std::__1::unique_ptr.39"], %"class.bssl::SSLTranscript", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.49", %"class.bssl::Array.49", %"class.bssl::Array.49", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::internal::StackAllocated.50", %"class.bssl::Array", %"class.std::__1::unique_ptr.23", %"class.std::__1::unique_ptr.17", %struct.stack_st_X509_NAME*, %"class.bssl::Array", %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.51", %"class.std::__1::unique_ptr.51", %"class.std::__1::unique_ptr.56", %struct.ssl_cipher_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.63", i32, i16, i16, i16, i8, [32 x i8], i8, [6 x i8], [6 x i8] }>
%union.anon.33 = type { i32 }
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %struct.err_save_state_st* }
%struct.err_save_state_st = type opaque
%"class.std::__1::unique_ptr.39" = type { %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.bssl::SSLKeyShare"* }
%"class.bssl::SSLKeyShare" = type { i32 (...)** }
%"class.bssl::SSLTranscript" = type { %"class.std::__1::unique_ptr.44", %"class.bssl::internal::StackAllocated" }
%"class.std::__1::unique_ptr.44" = type { %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %struct.buf_mem_st* }
%"class.bssl::internal::StackAllocated" = type { %struct.env_md_ctx_st }
%struct.env_md_ctx_st = type { %struct.env_md_st*, i8*, %struct.evp_pkey_ctx_st*, %struct.evp_md_pctx_ops* }
%struct.env_md_st = type opaque
%struct.evp_pkey_ctx_st = type opaque
%struct.evp_md_pctx_ops = type opaque
%"class.bssl::internal::StackAllocated.50" = type { %struct.evp_hpke_ctx_st }
%struct.evp_hpke_ctx_st = type { %struct.evp_hpke_aead_st*, %struct.evp_hpke_kdf_st*, %struct.evp_aead_ctx_st, [24 x i8], [64 x i8], i64, i32 }
%struct.evp_hpke_aead_st = type opaque
%struct.evp_hpke_kdf_st = type opaque
%struct.evp_aead_ctx_st = type { %struct.evp_aead_st*, %union.evp_aead_ctx_st_state, i8 }
%struct.evp_aead_st = type opaque
%union.evp_aead_ctx_st_state = type { i64, [576 x i8] }
%"class.std::__1::unique_ptr.56" = type { %"class.std::__1::__compressed_pair.57" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %struct.ssl_ech_server_config_list_st* }
%struct.ssl_ech_server_config_list_st = type <{ %"class.bssl::GrowableArray", i32, [4 x i8] }>
%"class.bssl::GrowableArray" = type { i64, %"class.bssl::Array.59" }
%"class.bssl::Array.59" = type { %"class.std::__1::unique_ptr.60"*, i64 }
%"class.std::__1::unique_ptr.60" = type opaque
%struct.ssl_cipher_st = type { i8*, i8*, i32, i32, i32, i32, i32, i32 }
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"struct.bssl::SSL_HANDSHAKE_HINTS"* }
%"struct.bssl::SSL_HANDSHAKE_HINTS" = type <{ %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, [7 x i8] }>
%"struct.bssl::SSL3_STATE" = type <{ [8 x i8], [8 x i8], [32 x i8], [32 x i8], %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer", %"class.bssl::Span", i32, i32, i32, i32, i8*, i32, i32, %"class.std::__1::unique_ptr.34", i32, i32, i32, i32, i16, i8, i8, i8, i16, i8, %"class.std::__1::unique_ptr.44", %"class.std::__1::unique_ptr.44", %"class.std::__1::unique_ptr.44", i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.89", %"class.std::__1::unique_ptr.89", %"class.std::__1::unique_ptr.95", [48 x i8], [48 x i8], [48 x i8], i8, i8, i8, [12 x i8], i8, i8, [12 x i8], [2 x i8], i8, %"class.std::__1::unique_ptr.51", %"class.bssl::Array", %"class.bssl::Array", %"class.std::__1::unique_ptr.23", [64 x i8], %"class.bssl::Array", %struct.srtp_protection_profile_st* }>
%"class.bssl::SSLBuffer" = type <{ i8*, i16, i16, i16, [5 x i8], i8, [4 x i8] }>
%"class.bssl::Span" = type { i8*, i64 }
%"class.std::__1::unique_ptr.89" = type { %"class.std::__1::__compressed_pair.90" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"class.bssl::SSLAEADContext"* }
%"class.bssl::SSLAEADContext" = type <{ %struct.ssl_cipher_st*, %"class.bssl::internal::StackAllocated.92", [12 x i8], i8, i8, i16, i8, i8, [6 x i8] }>
%"class.bssl::internal::StackAllocated.92" = type { %struct.evp_aead_ctx_st }
%"class.std::__1::unique_ptr.95" = type { %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"struct.bssl::SSL_HANDSHAKE"* }
%struct.srtp_protection_profile_st = type { i8*, i64 }
%"struct.bssl::DTLS1_STATE" = type <{ i8, [256 x i8], [7 x i8], i64, i16, i16, [4 x i8], %"struct.bssl::DTLS1_BITMAP", i16, i16, [8 x i8], [4 x i8], %"class.std::__1::unique_ptr.89", [7 x %"class.std::__1::unique_ptr.100"], [7 x %"struct.bssl::DTLS_OUTGOING_MESSAGE"], i8, i8, [2 x i8], i32, i32, i32, %"struct.bssl::OPENSSL_timeval", i32, [4 x i8] }>
%"struct.bssl::DTLS1_BITMAP" = type { i64, i64 }
%"class.std::__1::unique_ptr.100" = type { %"class.std::__1::__compressed_pair.101" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { %"struct.bssl::hm_fragment"* }
%"struct.bssl::hm_fragment" = type { i8, i16, i32, i8*, i8* }
%"struct.bssl::DTLS_OUTGOING_MESSAGE" = type <{ i8*, i32, i16, i8, i8 }>
%"struct.bssl::OPENSSL_timeval" = type { i64, i32 }
%"class.std::__1::unique_ptr.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %struct.ssl_session_st* }
%struct.ssl_session_st = type { i32, i16, i16, i16, i32, [48 x i8], i32, [32 x i8], i8, [32 x i8], %"class.std::__1::unique_ptr.23", %"class.std::__1::unique_ptr.17", %"struct.bssl::SSL_X509_METHOD"*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509*, i64, i32, i32, i64, %struct.ssl_cipher_st*, %struct.crypto_ex_data_st, %struct.ssl_session_st*, %struct.ssl_session_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", [32 x i8], [64 x i8], i8, i32, i32, i32, %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, %"class.bssl::Array" }
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %struct.ssl_ctx_st* }
%struct.ssl_ctx_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_X509_METHOD"*, %union.crypto_mutex_st, i16, i16, [4 x i8], %struct.ssl_quic_method_st*, %"class.std::__1::unique_ptr.0", %struct.x509_store_st*, %struct.lhash_st_SSL_SESSION*, i64, %struct.ssl_session_st*, %struct.ssl_session_st*, i32, i32, i32, i32, i32 (%struct.ssl_st*, %struct.ssl_session_st*)*, void (%struct.ssl_ctx_st*, %struct.ssl_session_st*)*, %struct.ssl_session_st* (%struct.ssl_st*, i8*, i32, i32*)*, i32, [4 x i8], i32 (%struct.x509_store_ctx_st*, i8*)*, i8*, i32 (%struct.ssl_st*, i8*)*, i32 (i8*, i32, i32, i8*)*, i8*, i32 (%struct.ssl_st*, %struct.x509_st**, %struct.evp_pkey_st**)*, void (%struct.ssl_st*, %struct.evp_pkey_st**)*, %struct.crypto_ex_data_st, void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.17", %struct.stack_st_X509_NAME*, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.9", void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], i32 (i32, %struct.x509_store_ctx_st*)*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.ssl_early_callback_ctx*)*, i32 (%struct.ssl_early_callback_ctx*)*, i8, i8, i16, [4 x i8], i32 (%struct.ssl_st*, i32*, i8*)*, i8*, %"class.std::__1::unique_ptr.108", %"class.std::__1::unique_ptr.108", i32 (%struct.ssl_st*, i8*, i8*, %struct.evp_cipher_ctx_st*, %struct.hmac_ctx_st*, i32)*, %"class.std::__1::unique_ptr.23", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*, i8**, i32*, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, %"class.bssl::Array", %"class.std::__1::unique_ptr.77", %"class.bssl::GrowableArray.113", %"class.bssl::Array.49", %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.56", void (%struct.ssl_st*, i8*)*, void (%struct.ssl_st*, %struct.timeval*)*, %struct.crypto_buffer_pool_st*, %struct.ssl_ticket_aead_method_st*, i32 (%struct.ssl_st*, i8*)*, i8*, %"class.bssl::Array.49", i16, [6 x i8] }>
%struct.lhash_st_SSL_SESSION = type opaque
%struct.ssl_early_callback_ctx = type { %struct.ssl_st*, i8*, i64, i16, i8*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64 }
%"class.std::__1::unique_ptr.108" = type { %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %"struct.bssl::TicketKey"* }
%"struct.bssl::TicketKey" = type { [16 x i8], [16 x i8], [16 x i8], i64 }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }
%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }
%struct.hmac_ctx_st = type { %struct.env_md_st*, %struct.env_md_ctx_st, %struct.env_md_ctx_st, %struct.env_md_ctx_st }
%"class.bssl::GrowableArray.113" = type { i64, %"class.bssl::Array.114" }
%"class.bssl::Array.114" = type { %"struct.bssl::CertCompressionAlg"*, i64 }
%"struct.bssl::CertCompressionAlg" = type <{ i32 (%struct.ssl_st*, %struct.cbb_st*, i8*, i64)*, i32 (%struct.ssl_st*, %struct.crypto_buffer_st**, i64, i8*, i64)*, i16, [6 x i8] }>
%struct.cbb_st = type { %struct.cbb_buffer_st*, %struct.cbb_st*, i64, i8, i8, i8 }
%struct.cbb_buffer_st = type { i8*, i64, i64, i8, i8 }
%struct.timeval = type { i64, i64 }
%struct.crypto_buffer_pool_st = type opaque
%struct.ssl_ticket_aead_method_st = type { i64 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)* }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { i8* }
%struct.ssl_quic_method_st = type { i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, i8*, i64)*, i32 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i32, i8)* }
%"struct.bssl::SSLMessage" = type { i8, i8, %struct.cbs_st, %struct.cbs_st }
%struct.cbs_st = type { i8*, i64 }
%"struct.bssl::SSL_X509_METHOD" = type { i1 (%struct.stack_st_CRYPTO_BUFFER*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*, %"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, i1 (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %struct.ssl_session_st*)*, void (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %"struct.bssl::SSL_HANDSHAKE"*, i8*)*, void (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)* }

@_ZZ11DTLS_methodE7kMethod = internal constant %struct.ssl_method_st { i16 0, %"struct.bssl::SSL_PROTOCOL_METHOD"* @_ZL19kDTLSProtocolMethod, %"struct.bssl::SSL_X509_METHOD"* @_ZN4bssl22ssl_crypto_x509_methodE }, align 8
@_ZL19kDTLSProtocolMethod = internal constant %"struct.bssl::SSL_PROTOCOL_METHOD" { i8 1, i1 (%struct.ssl_st*)* @_ZN4bssl9dtls1_newEP6ssl_st, void (%struct.ssl_st*)* @_ZN4bssl10dtls1_freeEP6ssl_st, i1 (%struct.ssl_st*, %"struct.bssl::SSLMessage"*)* @_ZN4bssl17dtls1_get_messageEPK6ssl_stPNS_10SSLMessageE, void (%struct.ssl_st*)* @_ZN4bssl18dtls1_next_messageEP6ssl_st, i1 (%struct.ssl_st*)* @_ZN4bssl35dtls_has_unprocessed_handshake_dataEPK6ssl_st, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)* @_ZN4bssl20dtls1_open_handshakeEP6ssl_stPmPhNS_4SpanIhEE, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)* @_ZN4bssl29dtls1_open_change_cipher_specEP6ssl_stPmPhNS_4SpanIhEE, i32 (%struct.ssl_st*, %"class.bssl::Span"*, i64*, i8*, i8*, i64)* @_ZN4bssl19dtls1_open_app_dataEP6ssl_stPNS_4SpanIhEEPmPhS3_, i32 (%struct.ssl_st*, i8*, i8*, i32)* @_ZN4bssl20dtls1_write_app_dataEP6ssl_stPbPKhi, i32 (%struct.ssl_st*)* @_ZN4bssl20dtls1_dispatch_alertEP6ssl_st, i1 (%struct.ssl_st*, %struct.cbb_st*, %struct.cbb_st*, i8)* @_ZN4bssl18dtls1_init_messageEP6ssl_stP6cbb_stS3_h, i1 (%struct.ssl_st*, %struct.cbb_st*, %"class.bssl::Array"*)* @_ZN4bssl20dtls1_finish_messageEP6ssl_stP6cbb_stPNS_5ArrayIhEE, i1 (%struct.ssl_st*, %"class.bssl::Array"*)* @_ZN4bssl17dtls1_add_messageEP6ssl_stNS_5ArrayIhEE, i1 (%struct.ssl_st*)* @_ZN4bssl28dtls1_add_change_cipher_specEP6ssl_st, i32 (%struct.ssl_st*)* @_ZN4bssl18dtls1_flush_flightEP6ssl_st, void (%struct.ssl_st*)* @_ZL27dtls1_on_handshake_completeP6ssl_st, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)* @_ZL20dtls1_set_read_stateP6ssl_st22ssl_encryption_level_tNSt3__110unique_ptrIN4bssl14SSLAEADContextENS4_8internal7DeleterIS5_EEEENS4_4SpanIKhEE, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)* @_ZL21dtls1_set_write_stateP6ssl_st22ssl_encryption_level_tNSt3__110unique_ptrIN4bssl14SSLAEADContextENS4_8internal7DeleterIS5_EEEENS4_4SpanIKhEE }, align 8
@_ZN4bssl22ssl_crypto_x509_methodE = external global %"struct.bssl::SSL_X509_METHOD", align 8
@_ZZ24DTLS_with_buffers_methodE7kMethod = internal constant %struct.ssl_method_st { i16 0, %"struct.bssl::SSL_PROTOCOL_METHOD"* @_ZL19kDTLSProtocolMethod, %"struct.bssl::SSL_X509_METHOD"* @_ZN4bssl20ssl_noop_x509_methodE }, align 8
@_ZN4bssl20ssl_noop_x509_methodE = external global %"struct.bssl::SSL_X509_METHOD", align 8
@_ZZ15DTLSv1_2_methodE7kMethod = internal constant %struct.ssl_method_st { i16 -259, %"struct.bssl::SSL_PROTOCOL_METHOD"* @_ZL19kDTLSProtocolMethod, %"struct.bssl::SSL_X509_METHOD"* @_ZN4bssl22ssl_crypto_x509_methodE }, align 8
@_ZZ13DTLSv1_methodE7kMethod = internal constant %struct.ssl_method_st { i16 -257, %"struct.bssl::SSL_PROTOCOL_METHOD"* @_ZL19kDTLSProtocolMethod, %"struct.bssl::SSL_X509_METHOD"* @_ZN4bssl22ssl_crypto_x509_methodE }, align 8
@.str = private unnamed_addr constant [51 x i8] c"../../third_party/boringssl/src/ssl/dtls_method.cc\00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.ssl_method_st* @DTLS_method() local_unnamed_addr #0 {
  ret %struct.ssl_method_st* @_ZZ11DTLS_methodE7kMethod
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.ssl_method_st* @DTLS_with_buffers_method() local_unnamed_addr #0 {
  ret %struct.ssl_method_st* @_ZZ24DTLS_with_buffers_methodE7kMethod
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.ssl_method_st* @DTLSv1_2_method() local_unnamed_addr #0 {
  ret %struct.ssl_method_st* @_ZZ15DTLSv1_2_methodE7kMethod
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.ssl_method_st* @DTLSv1_method() local_unnamed_addr #0 {
  ret %struct.ssl_method_st* @_ZZ13DTLSv1_methodE7kMethod
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.ssl_method_st* @DTLSv1_2_server_method() local_unnamed_addr #0 {
  ret %struct.ssl_method_st* @_ZZ15DTLSv1_2_methodE7kMethod
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.ssl_method_st* @DTLSv1_server_method() local_unnamed_addr #0 {
  ret %struct.ssl_method_st* @_ZZ13DTLSv1_methodE7kMethod
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.ssl_method_st* @DTLSv1_2_client_method() local_unnamed_addr #0 {
  ret %struct.ssl_method_st* @_ZZ15DTLSv1_2_methodE7kMethod
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.ssl_method_st* @DTLSv1_client_method() local_unnamed_addr #0 {
  ret %struct.ssl_method_st* @_ZZ13DTLSv1_methodE7kMethod
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.ssl_method_st* @DTLS_server_method() local_unnamed_addr #0 {
  ret %struct.ssl_method_st* @_ZZ11DTLS_methodE7kMethod
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.ssl_method_st* @DTLS_client_method() local_unnamed_addr #0 {
  ret %struct.ssl_method_st* @_ZZ11DTLS_methodE7kMethod
}

declare zeroext i1 @_ZN4bssl9dtls1_newEP6ssl_st(%struct.ssl_st*) #1

declare void @_ZN4bssl10dtls1_freeEP6ssl_st(%struct.ssl_st*) #1

declare zeroext i1 @_ZN4bssl17dtls1_get_messageEPK6ssl_stPNS_10SSLMessageE(%struct.ssl_st*, %"struct.bssl::SSLMessage"*) #1

declare void @_ZN4bssl18dtls1_next_messageEP6ssl_st(%struct.ssl_st*) #1

declare zeroext i1 @_ZN4bssl35dtls_has_unprocessed_handshake_dataEPK6ssl_st(%struct.ssl_st*) #1

declare i32 @_ZN4bssl20dtls1_open_handshakeEP6ssl_stPmPhNS_4SpanIhEE(%struct.ssl_st*, i64*, i8*, i8*, i64) #1

declare i32 @_ZN4bssl29dtls1_open_change_cipher_specEP6ssl_stPmPhNS_4SpanIhEE(%struct.ssl_st*, i64*, i8*, i8*, i64) #1

declare i32 @_ZN4bssl19dtls1_open_app_dataEP6ssl_stPNS_4SpanIhEEPmPhS3_(%struct.ssl_st*, %"class.bssl::Span"*, i64*, i8*, i8*, i64) #1

declare i32 @_ZN4bssl20dtls1_write_app_dataEP6ssl_stPbPKhi(%struct.ssl_st*, i8*, i8*, i32) #1

declare i32 @_ZN4bssl20dtls1_dispatch_alertEP6ssl_st(%struct.ssl_st*) #1

declare zeroext i1 @_ZN4bssl18dtls1_init_messageEP6ssl_stP6cbb_stS3_h(%struct.ssl_st*, %struct.cbb_st*, %struct.cbb_st*, i8 zeroext) #1

declare zeroext i1 @_ZN4bssl20dtls1_finish_messageEP6ssl_stP6cbb_stPNS_5ArrayIhEE(%struct.ssl_st*, %struct.cbb_st*, %"class.bssl::Array"*) #1

declare zeroext i1 @_ZN4bssl17dtls1_add_messageEP6ssl_stNS_5ArrayIhEE(%struct.ssl_st*, %"class.bssl::Array"*) #1

declare zeroext i1 @_ZN4bssl28dtls1_add_change_cipher_specEP6ssl_st(%struct.ssl_st*) #1

declare i32 @_ZN4bssl18dtls1_flush_flightEP6ssl_st(%struct.ssl_st*) #1

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL27dtls1_on_handshake_completeP6ssl_st(%struct.ssl_st*) #2 {
  tail call void @_ZN4bssl16dtls1_stop_timerEP6ssl_st(%struct.ssl_st* %0) #5
  %2 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %3 = bitcast %"struct.bssl::DTLS1_STATE"** %2 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = load i8, i8* %4, align 8
  %6 = and i8 %5, 4
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %9, label %8

8:                                                ; preds = %1
  tail call void @_ZN4bssl28dtls_clear_outgoing_messagesEP6ssl_st(%struct.ssl_st* %0) #5
  br label %9

9:                                                ; preds = %1, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZL20dtls1_set_read_stateP6ssl_st22ssl_encryption_level_tNSt3__110unique_ptrIN4bssl14SSLAEADContextENS4_8internal7DeleterIS5_EEEENS4_4SpanIKhEE(%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8* nocapture readnone, i64) #2 {
  %6 = tail call zeroext i1 @_ZN4bssl35dtls_has_unprocessed_handshake_dataEPK6ssl_st(%struct.ssl_st* %0) #5
  br i1 %6, label %35, label %7

7:                                                ; preds = %5
  %8 = ptrtoint %"class.bssl::SSLAEADContext"* %2 to i64
  %9 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %10 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %9, align 8
  %11 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %10, i64 0, i32 4
  %12 = load i16, i16* %11, align 8
  %13 = add i16 %12, 1
  store i16 %13, i16* %11, align 8
  %14 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %9, align 8
  %15 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %14, i64 0, i32 7
  %16 = bitcast %"struct.bssl::DTLS1_BITMAP"* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %16, i8 0, i64 16, i1 false) #5
  %17 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %18 = bitcast %"struct.bssl::SSL3_STATE"** %17 to i64**
  %19 = load i64*, i64** %18, align 8
  store i64 0, i64* %19, align 1
  %20 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %17, align 8
  %21 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %20, i64 0, i32 32
  %22 = getelementptr inbounds %"class.std::__1::unique_ptr.89", %"class.std::__1::unique_ptr.89"* %21, i64 0, i32 0, i32 0, i32 0
  %23 = load %"class.bssl::SSLAEADContext"*, %"class.bssl::SSLAEADContext"** %22, align 8
  %24 = bitcast %"class.std::__1::unique_ptr.89"* %21 to i64*
  store i64 %8, i64* %24, align 8
  %25 = icmp eq %"class.bssl::SSLAEADContext"* %23, null
  br i1 %25, label %28, label %26

26:                                               ; preds = %7
  tail call void @_ZN4bssl14SSLAEADContextD1Ev(%"class.bssl::SSLAEADContext"* nonnull %23) #5
  %27 = bitcast %"class.bssl::SSLAEADContext"* %23 to i8*
  tail call void @OPENSSL_free(i8* nonnull %27) #5
  br label %28

28:                                               ; preds = %26, %7
  %29 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %17, align 8
  %30 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %29, i64 0, i32 17
  store i32 %1, i32* %30, align 8
  %31 = bitcast %"struct.bssl::DTLS1_STATE"** %9 to i8**
  %32 = load i8*, i8** %31, align 8
  %33 = load i8, i8* %32, align 8
  %34 = and i8 %33, -2
  store i8 %34, i8* %32, align 8
  br label %39

35:                                               ; preds = %5
  tail call void @ERR_put_error(i32 16, i32 0, i32 255, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 86) #5
  tail call void @_ZN4bssl14ssl_send_alertEP6ssl_stii(%struct.ssl_st* %0, i32 2, i32 10) #5
  %36 = icmp eq %"class.bssl::SSLAEADContext"* %2, null
  br i1 %36, label %39, label %37

37:                                               ; preds = %35
  tail call void @_ZN4bssl14SSLAEADContextD1Ev(%"class.bssl::SSLAEADContext"* nonnull %2) #5
  %38 = bitcast %"class.bssl::SSLAEADContext"* %2 to i8*
  tail call void @OPENSSL_free(i8* nonnull %38) #5
  br label %39

39:                                               ; preds = %28, %35, %37
  %40 = phi i1 [ true, %28 ], [ false, %35 ], [ false, %37 ]
  ret i1 %40
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZL21dtls1_set_write_stateP6ssl_st22ssl_encryption_level_tNSt3__110unique_ptrIN4bssl14SSLAEADContextENS4_8internal7DeleterIS5_EEEENS4_4SpanIKhEE(%struct.ssl_st* nocapture readonly, i32, %"class.bssl::SSLAEADContext"*, i8* nocapture readnone, i64) #2 {
  %6 = ptrtoint %"class.bssl::SSLAEADContext"* %2 to i64
  %7 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %8 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %7, align 8
  %9 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %8, i64 0, i32 5
  %10 = load i16, i16* %9, align 2
  %11 = add i16 %10, 1
  store i16 %11, i16* %9, align 2
  %12 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %7, align 8
  %13 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %12, i64 0, i32 10, i64 0
  %14 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %15 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %14, align 8
  %16 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %15, i64 0, i32 1, i64 0
  %17 = bitcast i8* %16 to i64*
  %18 = bitcast i8* %13 to i64*
  %19 = load i64, i64* %17, align 1
  store i64 %19, i64* %18, align 1
  %20 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %14, align 8
  %21 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %20, i64 0, i32 1, i64 0
  %22 = bitcast i8* %21 to i64*
  store i64 0, i64* %22, align 1
  %23 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %14, align 8
  %24 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %23, i64 0, i32 33
  %25 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %7, align 8
  %26 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %25, i64 0, i32 12
  %27 = getelementptr inbounds %"class.std::__1::unique_ptr.89", %"class.std::__1::unique_ptr.89"* %24, i64 0, i32 0, i32 0, i32 0
  %28 = bitcast %"class.std::__1::unique_ptr.89"* %24 to i64*
  %29 = load i64, i64* %28, align 8
  store %"class.bssl::SSLAEADContext"* null, %"class.bssl::SSLAEADContext"** %27, align 8
  %30 = getelementptr inbounds %"class.std::__1::unique_ptr.89", %"class.std::__1::unique_ptr.89"* %26, i64 0, i32 0, i32 0, i32 0
  %31 = load %"class.bssl::SSLAEADContext"*, %"class.bssl::SSLAEADContext"** %30, align 8
  %32 = bitcast %"class.std::__1::unique_ptr.89"* %26 to i64*
  store i64 %29, i64* %32, align 8
  %33 = icmp eq %"class.bssl::SSLAEADContext"* %31, null
  br i1 %33, label %36, label %34

34:                                               ; preds = %5
  tail call void @_ZN4bssl14SSLAEADContextD1Ev(%"class.bssl::SSLAEADContext"* nonnull %31) #5
  %35 = bitcast %"class.bssl::SSLAEADContext"* %31 to i8*
  tail call void @OPENSSL_free(i8* nonnull %35) #5
  br label %36

36:                                               ; preds = %5, %34
  %37 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %14, align 8
  %38 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %37, i64 0, i32 33
  %39 = getelementptr inbounds %"class.std::__1::unique_ptr.89", %"class.std::__1::unique_ptr.89"* %38, i64 0, i32 0, i32 0, i32 0
  %40 = load %"class.bssl::SSLAEADContext"*, %"class.bssl::SSLAEADContext"** %39, align 8
  %41 = bitcast %"class.std::__1::unique_ptr.89"* %38 to i64*
  store i64 %6, i64* %41, align 8
  %42 = icmp eq %"class.bssl::SSLAEADContext"* %40, null
  br i1 %42, label %45, label %43

43:                                               ; preds = %36
  tail call void @_ZN4bssl14SSLAEADContextD1Ev(%"class.bssl::SSLAEADContext"* nonnull %40) #5
  %44 = bitcast %"class.bssl::SSLAEADContext"* %40 to i8*
  tail call void @OPENSSL_free(i8* nonnull %44) #5
  br label %45

45:                                               ; preds = %43, %36
  %46 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %14, align 8
  %47 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %46, i64 0, i32 18
  store i32 %1, i32* %47, align 4
  ret i1 true
}

declare void @_ZN4bssl16dtls1_stop_timerEP6ssl_st(%struct.ssl_st*) local_unnamed_addr #1

declare void @_ZN4bssl28dtls_clear_outgoing_messagesEP6ssl_st(%struct.ssl_st*) local_unnamed_addr #1

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

declare void @_ZN4bssl14ssl_send_alertEP6ssl_stii(%struct.ssl_st*, i32, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind
declare void @_ZN4bssl14SSLAEADContextD1Ev(%"class.bssl::SSLAEADContext"*) unnamed_addr #4

declare void @OPENSSL_free(i8*) local_unnamed_addr #1

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
