; ModuleID = '../../content/common/input/synthetic_pinch_gesture_params.cc'
source_filename = "../../content/common/input/synthetic_pinch_gesture_params.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.content::SyntheticPinchGestureParams" = type { %"struct.content::SyntheticGestureParams.base", float, %"class.gfx::PointF", float, [4 x i8] }
%"struct.content::SyntheticGestureParams.base" = type <{ i32 (...)**, i32 }>
%"class.gfx::PointF" = type { float, float }
%"struct.content::SyntheticGestureParams" = type <{ i32 (...)**, i32, [4 x i8] }>

@_ZTVN7content27SyntheticPinchGestureParamsE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"struct.content::SyntheticPinchGestureParams"*)* @_ZN7content27SyntheticPinchGestureParamsD2Ev to i8*), i8* bitcast (void (%"struct.content::SyntheticPinchGestureParams"*)* @_ZN7content27SyntheticPinchGestureParamsD0Ev to i8*), i8* bitcast (i32 (%"struct.content::SyntheticPinchGestureParams"*)* @_ZNK7content27SyntheticPinchGestureParams14GetGestureTypeEv to i8*)] }, align 8

@_ZN7content27SyntheticPinchGestureParamsC1Ev = hidden unnamed_addr alias void (%"struct.content::SyntheticPinchGestureParams"*), void (%"struct.content::SyntheticPinchGestureParams"*)* @_ZN7content27SyntheticPinchGestureParamsC2Ev
@_ZN7content27SyntheticPinchGestureParamsC1ERKS0_ = hidden unnamed_addr alias void (%"struct.content::SyntheticPinchGestureParams"*, %"struct.content::SyntheticPinchGestureParams"*), void (%"struct.content::SyntheticPinchGestureParams"*, %"struct.content::SyntheticPinchGestureParams"*)* @_ZN7content27SyntheticPinchGestureParamsC2ERKS0_
@_ZN7content27SyntheticPinchGestureParamsD1Ev = hidden unnamed_addr alias void (%"struct.content::SyntheticPinchGestureParams"*), void (%"struct.content::SyntheticPinchGestureParams"*)* @_ZN7content27SyntheticPinchGestureParamsD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content27SyntheticPinchGestureParamsC2Ev(%"struct.content::SyntheticPinchGestureParams"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"struct.content::SyntheticPinchGestureParams"* %0 to %"struct.content::SyntheticGestureParams"*
  tail call void @_ZN7content22SyntheticGestureParamsC2Ev(%"struct.content::SyntheticGestureParams"* %2) #5
  %3 = getelementptr inbounds %"struct.content::SyntheticPinchGestureParams", %"struct.content::SyntheticPinchGestureParams"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN7content27SyntheticPinchGestureParamsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"struct.content::SyntheticPinchGestureParams", %"struct.content::SyntheticPinchGestureParams"* %0, i64 0, i32 1
  %5 = bitcast float* %4 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 5.000000e+02>, <4 x float>* %5, align 4
  ret void
}

declare void @_ZN7content22SyntheticGestureParamsC2Ev(%"struct.content::SyntheticGestureParams"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content27SyntheticPinchGestureParamsC2ERKS0_(%"struct.content::SyntheticPinchGestureParams"*, %"struct.content::SyntheticPinchGestureParams"* dereferenceable(32)) unnamed_addr #0 align 2 {
  %3 = bitcast %"struct.content::SyntheticPinchGestureParams"* %0 to %"struct.content::SyntheticGestureParams"*
  %4 = bitcast %"struct.content::SyntheticPinchGestureParams"* %1 to %"struct.content::SyntheticGestureParams"*
  tail call void @_ZN7content22SyntheticGestureParamsC2ERKS0_(%"struct.content::SyntheticGestureParams"* %3, %"struct.content::SyntheticGestureParams"* dereferenceable(16) %4) #5
  %5 = getelementptr inbounds %"struct.content::SyntheticPinchGestureParams", %"struct.content::SyntheticPinchGestureParams"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN7content27SyntheticPinchGestureParamsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"struct.content::SyntheticPinchGestureParams", %"struct.content::SyntheticPinchGestureParams"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"struct.content::SyntheticPinchGestureParams", %"struct.content::SyntheticPinchGestureParams"* %1, i64 0, i32 1
  %8 = bitcast float* %7 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = bitcast float* %6 to i32*
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds %"struct.content::SyntheticPinchGestureParams", %"struct.content::SyntheticPinchGestureParams"* %0, i64 0, i32 2
  %12 = getelementptr inbounds %"struct.content::SyntheticPinchGestureParams", %"struct.content::SyntheticPinchGestureParams"* %1, i64 0, i32 2
  %13 = bitcast %"class.gfx::PointF"* %12 to i64*
  %14 = bitcast %"class.gfx::PointF"* %11 to i64*
  %15 = load i64, i64* %13, align 8
  store i64 %15, i64* %14, align 8
  %16 = getelementptr inbounds %"struct.content::SyntheticPinchGestureParams", %"struct.content::SyntheticPinchGestureParams"* %0, i64 0, i32 3
  %17 = getelementptr inbounds %"struct.content::SyntheticPinchGestureParams", %"struct.content::SyntheticPinchGestureParams"* %1, i64 0, i32 3
  %18 = bitcast float* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = bitcast float* %16 to i32*
  store i32 %19, i32* %20, align 8
  ret void
}

declare void @_ZN7content22SyntheticGestureParamsC2ERKS0_(%"struct.content::SyntheticGestureParams"*, %"struct.content::SyntheticGestureParams"* dereferenceable(16)) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7content22SyntheticGestureParamsD2Ev(%"struct.content::SyntheticGestureParams"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content27SyntheticPinchGestureParamsD2Ev(%"struct.content::SyntheticPinchGestureParams"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"struct.content::SyntheticPinchGestureParams"* %0 to %"struct.content::SyntheticGestureParams"*
  tail call void @_ZN7content22SyntheticGestureParamsD2Ev(%"struct.content::SyntheticGestureParams"* %2) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content27SyntheticPinchGestureParamsD0Ev(%"struct.content::SyntheticPinchGestureParams"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"struct.content::SyntheticPinchGestureParams"* %0 to %"struct.content::SyntheticGestureParams"*
  tail call void @_ZN7content22SyntheticGestureParamsD2Ev(%"struct.content::SyntheticGestureParams"* %2) #5
  %3 = bitcast %"struct.content::SyntheticPinchGestureParams"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK7content27SyntheticPinchGestureParams14GetGestureTypeEv(%"struct.content::SyntheticPinchGestureParams"* nocapture readnone) unnamed_addr #4 align 2 {
  ret i32 2
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %"struct.content::SyntheticPinchGestureParams"* @_ZN7content27SyntheticPinchGestureParams4CastEPKNS_22SyntheticGestureParamsE(%"struct.content::SyntheticGestureParams"* readnone) local_unnamed_addr #4 align 2 {
  %2 = bitcast %"struct.content::SyntheticGestureParams"* %0 to %"struct.content::SyntheticPinchGestureParams"*
  ret %"struct.content::SyntheticPinchGestureParams"* %2
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
