; ModuleID = '../../components/qr_code_generator/qr_code_generator.cc'
source_filename = "../../components/qr_code_generator/qr_code_generator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"struct.std::__1::array" = type { [3 x i32] }
%class.QRCodeGenerator = type <{ %struct.QRVersionInfo*, %"class.std::__1::vector", i8, [7 x i8] }>
%struct.QRVersionInfo = type <{ i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array", [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.QRCodeGenerator::GeneratedCode" = type <{ %"class.base::span", i32, [4 x i8] }>
%"class.base::span" = type { %"struct.base::internal::ExtentStorage", i8* }
%"struct.base::internal::ExtentStorage" = type { i64 }
%"class.absl::optional.7" = type { %"class.absl::optional_internal::optional_data.8" }
%"class.absl::optional_internal::optional_data.8" = type { %"class.absl::optional_internal::optional_data_base.9" }
%"class.absl::optional_internal::optional_data_base.9" = type { %"class.absl::optional_internal::optional_data_dtor_base.10" }
%"class.absl::optional_internal::optional_data_dtor_base.10" = type { i8, [7 x i8], %union.anon.11 }
%union.anon.11 = type { %"struct.QRCodeGenerator::GeneratedCode" }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.base::CheckedContiguousIterator" = type { i8*, i8*, i8* }
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { %"class.std::__1::vector"*, %"class.std::__1::vector"*, %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.std::__1::vector"* }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.33 }
%union.anon.33 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZZN7logging15CheckOpValueStrIPKhEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_ = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

$_ZN4base25CheckedContiguousIteratorIKhEC2EPS1_S3_S3_ = comdat any

$_ZNK4base25CheckedContiguousIteratorIKhEdeEv = comdat any

$_ZN4base25CheckedContiguousIteratorIKhEppEv = comdat any

$_ZNK4base25CheckedContiguousIteratorIKhE15CheckComparableERKS2_ = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

$_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEm = comdat any

@.str = private unnamed_addr constant [56 x i8] c"../../components/qr_code_generator/qr_code_generator.cc\00", align 1
@.str.1 = private unnamed_addr constant [27 x i8] c"!mask || *mask <= kMaxMask\00", align 1
@_ZN12_GLOBAL__N_114kAlphanumValueE = internal unnamed_addr constant [91 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF$\FF\FF\FF%&\FF\FF\FF\FF'(\FF)*+\00\01\02\03\04\05\06\07\08\09,\FF\FF\FF\FF\FF\FF\0A\0B\0C\0D\0E\0F\10\11\12\13\14\15\16\17\18\19\1A\1B\1C\1D\1E\1F !\22#", align 16
@.str.2 = private unnamed_addr constant [95 x i8] c"total_bytes == group1_block_bytes * group1_num_blocks + group2_block_bytes * group2_num_blocks\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"internal error\00", align 1
@_ZN12_GLOBAL__N_114kMaskFunctionsE = internal unnamed_addr constant [8 x i8 (i32, i32)*] [i8 (i32, i32)* @_ZN12_GLOBAL__N_113MaskFunction0Eii, i8 (i32, i32)* @_ZN12_GLOBAL__N_113MaskFunction1Eii, i8 (i32, i32)* @_ZN12_GLOBAL__N_113MaskFunction2Eii, i8 (i32, i32)* @_ZN12_GLOBAL__N_113MaskFunction3Eii, i8 (i32, i32)* @_ZN12_GLOBAL__N_113MaskFunction4Eii, i8 (i32, i32)* @_ZN12_GLOBAL__N_113MaskFunction5Eii, i8 (i32, i32)* @_ZN12_GLOBAL__N_113MaskFunction6Eii, i8 (i32, i32)* @_ZN12_GLOBAL__N_113MaskFunction7Eii], align 16
@_ZZN15QRCodeGenerator9PutFinderEiiE5kLine = internal unnamed_addr constant [7 x i8] c"\03\02\03\03\03\02\03", align 1
@_ZZN15QRCodeGenerator12PutAlignmentEiiE5kLine = internal unnamed_addr constant [5 x i8] c"\03\02\02\02\03", align 1
@_ZZN15QRCodeGenerator13PutFormatBitsEtE5kRun1 = internal unnamed_addr constant [15 x i8] c"\80\81\82\83\84\85\87\88xXH8(\18\08", align 1
@_ZZN15QRCodeGenerator18AddErrorCorrectionEN4base4spanIhLm18446744073709551615EEENS1_IKhLm18446744073709551615EEEmmE12kGenerator10 = internal unnamed_addr constant [11 x i8] c"\C1\9Dq_^\C7o\9F\C2\D8\01", align 1
@_ZZN15QRCodeGenerator18AddErrorCorrectionEN4base4spanIhLm18446744073709551615EEENS1_IKhLm18446744073709551615EEEmmE12kGenerator18 = internal unnamed_addr constant [19 x i8] c"\92\D9C K\ADRI\DC\F0\D7\C7\AF\95q\B7\FB\EF\01", align 16
@_ZZN15QRCodeGenerator18AddErrorCorrectionEN4base4spanIhLm18446744073709551615EEENS1_IKhLm18446744073709551615EEEmmE12kGenerator22 = internal unnamed_addr constant [23 x i8] c"\F5\91\1A\E6\DAV\FDC{\1D\89\1C(E\BD\13\F4\B6\B0\83\B3Y\01", align 16
@_ZZN15QRCodeGenerator18AddErrorCorrectionEN4base4spanIhLm18446744073709551615EEENS1_IKhLm18446744073709551615EEEmmE12kGenerator24 = internal unnamed_addr constant [25 x i8] c"u\90\D9\7F\F7\ED\01\CE+=H\82I\E5\96sf\D8\ED\B2F\A9vz\01", align 16
@.str.4 = private unnamed_addr constant [17 x i8] c"start <= current\00", align 1
@.str.5 = private unnamed_addr constant [42 x i8] c"../../base/containers/checked_iterators.h\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c"current <= end\00", align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8
@_ZN12_GLOBAL__N_113version_infosE = internal constant [5 x { i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array" }] [{ i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array" } { i32 2, i32 0, i32 0, i32 25, i64 44, i64 1, i64 34, i64 0, i64 0, i64 0, %"struct.std::__1::array" { [3 x i32] [i32 6, i32 18, i32 0] } }, { i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array" } { i32 5, i32 1, i32 0, i32 37, i64 134, i64 2, i64 43, i64 0, i64 0, i64 0, %"struct.std::__1::array" { [3 x i32] [i32 6, i32 30, i32 0] } }, { i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array" } { i32 7, i32 1, i32 31892, i32 45, i64 196, i64 4, i64 31, i64 0, i64 0, i64 0, %"struct.std::__1::array" { [3 x i32] [i32 6, i32 22, i32 38] } }, { i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array" } { i32 9, i32 1, i32 39577, i32 53, i64 174, i64 3, i64 36, i64 118, i64 2, i64 37, %"struct.std::__1::array" { [3 x i32] [i32 6, i32 26, i32 46] } }, { i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array" } { i32 12, i32 1, i32 51042, i32 65, i64 348, i64 6, i64 36, i64 118, i64 2, i64 37, %"struct.std::__1::array" { [3 x i32] [i32 6, i32 32, i32 58] } }], align 16
@.str.9 = private unnamed_addr constant [29 x i8] c"../../base/containers/span.h\00", align 1
@.str.10 = private unnamed_addr constant [13 x i8] c"idx < size()\00", align 1
@_ZZN12_GLOBAL__N_123FormatInformationForECCEN13QRVersionInfo3ECCEE18kFormatInformation = internal unnamed_addr constant [16 x i16] [i16 30660, i16 29427, i16 32170, i16 30877, i16 26159, i16 25368, i16 27713, i16 26998, i16 21522, i16 20773, i16 24188, i16 23371, i16 17913, i16 16590, i16 20375, i16 19104], align 16
@.str.12 = private unnamed_addr constant [23 x i8] c"start_ == other.start_\00", align 1
@.str.13 = private unnamed_addr constant [19 x i8] c"end_ == other.end_\00", align 1
@.str.14 = private unnamed_addr constant [17 x i8] c"current_ != end_\00", align 1
@switch.table._ZN15QRCodeGenerator18AddErrorCorrectionEN4base4spanIhLm18446744073709551615EEENS1_IKhLm18446744073709551615EEEmm = private unnamed_addr constant [8 x i8*] [i8* getelementptr inbounds ([11 x i8], [11 x i8]* @_ZZN15QRCodeGenerator18AddErrorCorrectionEN4base4spanIhLm18446744073709551615EEENS1_IKhLm18446744073709551615EEEmmE12kGenerator10, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @_ZZN15QRCodeGenerator18AddErrorCorrectionEN4base4spanIhLm18446744073709551615EEENS1_IKhLm18446744073709551615EEEmmE12kGenerator10, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @_ZZN15QRCodeGenerator18AddErrorCorrectionEN4base4spanIhLm18446744073709551615EEENS1_IKhLm18446744073709551615EEEmmE12kGenerator10, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @_ZZN15QRCodeGenerator18AddErrorCorrectionEN4base4spanIhLm18446744073709551615EEENS1_IKhLm18446744073709551615EEEmmE12kGenerator10, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @_ZZN15QRCodeGenerator18AddErrorCorrectionEN4base4spanIhLm18446744073709551615EEENS1_IKhLm18446744073709551615EEEmmE12kGenerator18, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @_ZZN15QRCodeGenerator18AddErrorCorrectionEN4base4spanIhLm18446744073709551615EEENS1_IKhLm18446744073709551615EEEmmE12kGenerator10, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @_ZZN15QRCodeGenerator18AddErrorCorrectionEN4base4spanIhLm18446744073709551615EEENS1_IKhLm18446744073709551615EEEmmE12kGenerator22, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @_ZZN15QRCodeGenerator18AddErrorCorrectionEN4base4spanIhLm18446744073709551615EEENS1_IKhLm18446744073709551615EEEmmE12kGenerator24, i64 0, i64 0)], align 8

@_ZN15QRCodeGeneratorC1Ev = hidden unnamed_addr alias void (%class.QRCodeGenerator*), void (%class.QRCodeGenerator*)* @_ZN15QRCodeGeneratorC2Ev
@_ZN15QRCodeGeneratorD1Ev = hidden unnamed_addr alias void (%class.QRCodeGenerator*), void (%class.QRCodeGenerator*)* @_ZN15QRCodeGeneratorD2Ev
@_ZN15QRCodeGenerator13GeneratedCodeC1Ev = hidden unnamed_addr alias void (%"struct.QRCodeGenerator::GeneratedCode"*), void (%"struct.QRCodeGenerator::GeneratedCode"*)* @_ZN15QRCodeGenerator13GeneratedCodeC2Ev
@_ZN15QRCodeGenerator13GeneratedCodeC1EOS0_ = hidden unnamed_addr alias void (%"struct.QRCodeGenerator::GeneratedCode"*, %"struct.QRCodeGenerator::GeneratedCode"*), void (%"struct.QRCodeGenerator::GeneratedCode"*, %"struct.QRCodeGenerator::GeneratedCode"*)* @_ZN15QRCodeGenerator13GeneratedCodeC2EOS0_
@_ZN15QRCodeGenerator13GeneratedCodeD1Ev = hidden unnamed_addr alias void (%"struct.QRCodeGenerator::GeneratedCode"*), void (%"struct.QRCodeGenerator::GeneratedCode"*)* @_ZN15QRCodeGenerator13GeneratedCodeD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15QRCodeGeneratorC2Ev(%class.QRCodeGenerator* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %class.QRCodeGenerator* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15QRCodeGeneratorD2Ev(%class.QRCodeGenerator* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i8* %3 to i64
  %7 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 1, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  store i64 %6, i64* %8, align 8
  tail call void @_ZdlPv(i8* nonnull %3) #15
  br label %9

9:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15QRCodeGenerator13GeneratedCodeC2Ev(%"struct.QRCodeGenerator::GeneratedCode"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"struct.QRCodeGenerator::GeneratedCode"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 20, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15QRCodeGenerator13GeneratedCodeC2EOS0_(%"struct.QRCodeGenerator::GeneratedCode"* nocapture, %"struct.QRCodeGenerator::GeneratedCode"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = bitcast %"struct.QRCodeGenerator::GeneratedCode"* %0 to i8*
  %4 = bitcast %"struct.QRCodeGenerator::GeneratedCode"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 20, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN15QRCodeGenerator13GeneratedCodeD2Ev(%"struct.QRCodeGenerator::GeneratedCode"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15QRCodeGenerator8GenerateEN4base4spanIKhLm18446744073709551615EEEN4absl8optionalIiEENS5_IhEE(%"class.absl::optional.7"* noalias nocapture sret, %class.QRCodeGenerator*, i64, i8*, i64, i16) local_unnamed_addr #0 align 2 {
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = alloca %"class.base::CheckedContiguousIterator", align 8
  %10 = alloca %"class.base::CheckedContiguousIterator", align 8
  %11 = alloca %"class.logging::CheckError", align 8
  %12 = alloca %"class.base::CheckedContiguousIterator", align 8
  %13 = alloca %"class.base::CheckedContiguousIterator", align 8
  %14 = alloca %"class.std::__1::vector", align 8
  %15 = alloca %"class.std::__1::vector.16", align 8
  %16 = alloca %"class.std::__1::vector.16", align 8
  %17 = alloca %"class.logging::CheckError", align 8
  %18 = trunc i16 %5 to i8
  %19 = lshr i16 %5, 8
  %20 = trunc i16 %19 to i8
  %21 = icmp ne i8 %18, 0
  %22 = xor i1 %21, true
  %23 = icmp ult i8 %20, 8
  %24 = or i1 %23, %22
  br i1 %24, label %28, label %25

25:                                               ; preds = %6
  %26 = bitcast %"class.logging::CheckError"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #6
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %11, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str, i64 0, i64 0), i32 411, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0)) #6
  %27 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %11) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #6
  br label %28

28:                                               ; preds = %6, %25
  %29 = getelementptr inbounds i8, i8* %3, i64 %2
  call void @_ZN4base25CheckedContiguousIteratorIKhEC2EPS1_S3_S3_(%"class.base::CheckedContiguousIterator"* nonnull %12, i8* %3, i8* %3, i8* %29) #6
  call void @_ZN4base25CheckedContiguousIteratorIKhEC2EPS1_S3_S3_(%"class.base::CheckedContiguousIterator"* nonnull %13, i8* %3, i8* %29, i8* %29) #6
  %30 = bitcast %"class.base::CheckedContiguousIterator"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %30)
  %31 = bitcast %"class.base::CheckedContiguousIterator"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31)
  %32 = bitcast %"class.base::CheckedContiguousIterator"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %31, i8* nonnull align 8 %32, i64 24, i1 false) #6
  %33 = bitcast %"class.base::CheckedContiguousIterator"* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %30, i8* nonnull align 8 %33, i64 24, i1 false) #6
  call void @_ZNK4base25CheckedContiguousIteratorIKhE15CheckComparableERKS2_(%"class.base::CheckedContiguousIterator"* nonnull %10, %"class.base::CheckedContiguousIterator"* nonnull dereferenceable(24) %9) #6
  %34 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %10, i64 0, i32 1
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %9, i64 0, i32 1
  %37 = load i8*, i8** %36, align 8
  %38 = icmp eq i8* %35, %37
  br i1 %38, label %53, label %39

39:                                               ; preds = %28, %48
  %40 = call dereferenceable(1) i8* @_ZNK4base25CheckedContiguousIteratorIKhEdeEv(%"class.base::CheckedContiguousIterator"* nonnull %10) #6
  %41 = load i8, i8* %40, align 1
  %42 = icmp ult i8 %41, 91
  br i1 %42, label %43, label %61

43:                                               ; preds = %39
  %44 = zext i8 %41 to i64
  %45 = getelementptr inbounds [91 x i8], [91 x i8]* @_ZN12_GLOBAL__N_114kAlphanumValueE, i64 0, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = icmp eq i8 %46, -1
  br i1 %47, label %61, label %48

48:                                               ; preds = %43
  %49 = call dereferenceable(24) %"class.base::CheckedContiguousIterator"* @_ZN4base25CheckedContiguousIteratorIKhEppEv(%"class.base::CheckedContiguousIterator"* nonnull %10) #6
  call void @_ZNK4base25CheckedContiguousIteratorIKhE15CheckComparableERKS2_(%"class.base::CheckedContiguousIterator"* nonnull %10, %"class.base::CheckedContiguousIterator"* nonnull dereferenceable(24) %9) #6
  %50 = load i8*, i8** %34, align 8
  %51 = load i8*, i8** %36, align 8
  %52 = icmp eq i8* %50, %51
  br i1 %52, label %53, label %39

53:                                               ; preds = %48, %28
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %30)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31)
  %54 = lshr i64 %2, 1
  %55 = mul i64 %54, 11
  %56 = and i64 %2, 1
  %57 = mul nuw nsw i64 %56, 6
  %58 = add i64 %55, %57
  %59 = add i64 %58, 17
  %60 = add i64 %58, 19
  br label %65

61:                                               ; preds = %43, %39
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %30)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31)
  %62 = shl i64 %2, 3
  %63 = add i64 %62, 16
  %64 = add i64 %62, 24
  br label %65

65:                                               ; preds = %61, %53
  %66 = phi i1 [ true, %53 ], [ false, %61 ]
  %67 = phi i64 [ %60, %53 ], [ %64, %61 ]
  %68 = phi i64 [ %59, %53 ], [ %63, %61 ]
  %69 = add i64 %68, 7
  %70 = add i64 %67, 7
  %71 = trunc i64 %4 to i8
  %72 = lshr i64 %4, 32
  %73 = trunc i64 %72 to i32
  %74 = icmp ne i8 %71, 0
  %75 = icmp ugt i64 %69, 263
  %76 = icmp sgt i32 %73, 2
  %77 = and i1 %74, %76
  %78 = or i1 %77, %75
  br i1 %78, label %79, label %103

79:                                               ; preds = %65
  %80 = icmp ugt i64 %69, 679
  %81 = icmp sgt i32 %73, 5
  %82 = and i1 %74, %81
  %83 = or i1 %82, %80
  br i1 %83, label %84, label %103

84:                                               ; preds = %79
  %85 = icmp ugt i64 %69, 983
  %86 = icmp sgt i32 %73, 7
  %87 = and i1 %74, %86
  %88 = or i1 %87, %85
  br i1 %88, label %89, label %103

89:                                               ; preds = %84
  %90 = icmp ugt i64 %69, 1447
  %91 = icmp sgt i32 %73, 9
  %92 = and i1 %74, %91
  %93 = or i1 %92, %90
  br i1 %93, label %94, label %103

94:                                               ; preds = %89
  %95 = icmp ugt i64 %69, 2303
  %96 = icmp sgt i32 %73, 12
  %97 = and i1 %74, %96
  %98 = or i1 %97, %95
  br i1 %98, label %99, label %103

99:                                               ; preds = %94
  %100 = getelementptr inbounds %"class.absl::optional.7", %"class.absl::optional.7"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %100, align 8
  %101 = getelementptr inbounds %"class.absl::optional.7", %"class.absl::optional.7"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %102 = bitcast %union.anon.11* %101 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %102, i8 0, i64 24, i1 false) #6
  br label %1643

103:                                              ; preds = %94, %65, %79, %84, %89
  %104 = phi %struct.QRVersionInfo* [ bitcast (i32* getelementptr inbounds ([5 x { i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array" }], [5 x { i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array" }]* @_ZN12_GLOBAL__N_113version_infosE, i64 0, i64 3, i32 0) to %struct.QRVersionInfo*), %89 ], [ bitcast (i32* getelementptr inbounds ([5 x { i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array" }], [5 x { i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array" }]* @_ZN12_GLOBAL__N_113version_infosE, i64 0, i64 2, i32 0) to %struct.QRVersionInfo*), %84 ], [ bitcast (i32* getelementptr inbounds ([5 x { i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array" }], [5 x { i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array" }]* @_ZN12_GLOBAL__N_113version_infosE, i64 0, i64 1, i32 0) to %struct.QRVersionInfo*), %79 ], [ bitcast ([5 x { i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array" }]* @_ZN12_GLOBAL__N_113version_infosE to %struct.QRVersionInfo*), %65 ], [ bitcast (i32* getelementptr inbounds ([5 x { i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array" }], [5 x { i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array" }]* @_ZN12_GLOBAL__N_113version_infosE, i64 0, i64 4, i32 0) to %struct.QRVersionInfo*), %94 ]
  %105 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %104, i64 0, i32 0
  %106 = load i32, i32* %105, align 8
  %107 = icmp sgt i32 %106, 9
  br i1 %107, label %108, label %135

108:                                              ; preds = %103
  %109 = icmp ugt i64 %70, 263
  %110 = or i1 %77, %109
  br i1 %110, label %111, label %135

111:                                              ; preds = %108
  %112 = icmp ugt i64 %70, 679
  %113 = icmp sgt i32 %73, 5
  %114 = and i1 %74, %113
  %115 = or i1 %114, %112
  br i1 %115, label %116, label %135

116:                                              ; preds = %111
  %117 = icmp ugt i64 %70, 983
  %118 = icmp sgt i32 %73, 7
  %119 = and i1 %74, %118
  %120 = or i1 %119, %117
  br i1 %120, label %121, label %135

121:                                              ; preds = %116
  %122 = icmp ugt i64 %70, 1447
  %123 = icmp sgt i32 %73, 9
  %124 = and i1 %74, %123
  %125 = or i1 %124, %122
  br i1 %125, label %126, label %135

126:                                              ; preds = %121
  %127 = icmp ugt i64 %70, 2303
  %128 = icmp sgt i32 %73, 12
  %129 = and i1 %74, %128
  %130 = or i1 %129, %127
  br i1 %130, label %131, label %135

131:                                              ; preds = %126
  %132 = getelementptr inbounds %"class.absl::optional.7", %"class.absl::optional.7"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %132, align 8
  %133 = getelementptr inbounds %"class.absl::optional.7", %"class.absl::optional.7"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %134 = bitcast %union.anon.11* %133 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %134, i8 0, i64 24, i1 false) #6
  br label %1643

135:                                              ; preds = %121, %116, %111, %108, %126, %103
  %136 = phi %struct.QRVersionInfo* [ %104, %103 ], [ bitcast (i32* getelementptr inbounds ([5 x { i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array" }], [5 x { i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array" }]* @_ZN12_GLOBAL__N_113version_infosE, i64 0, i64 3, i32 0) to %struct.QRVersionInfo*), %121 ], [ bitcast (i32* getelementptr inbounds ([5 x { i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array" }], [5 x { i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array" }]* @_ZN12_GLOBAL__N_113version_infosE, i64 0, i64 2, i32 0) to %struct.QRVersionInfo*), %116 ], [ bitcast (i32* getelementptr inbounds ([5 x { i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array" }], [5 x { i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array" }]* @_ZN12_GLOBAL__N_113version_infosE, i64 0, i64 1, i32 0) to %struct.QRVersionInfo*), %111 ], [ bitcast ([5 x { i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array" }]* @_ZN12_GLOBAL__N_113version_infosE to %struct.QRVersionInfo*), %108 ], [ bitcast (i32* getelementptr inbounds ([5 x { i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array" }], [5 x { i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array" }]* @_ZN12_GLOBAL__N_113version_infosE, i64 0, i64 4, i32 0) to %struct.QRVersionInfo*), %126 ]
  %137 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %1, i64 0, i32 0
  %138 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %137, align 8
  %139 = icmp eq %struct.QRVersionInfo* %136, %138
  br i1 %139, label %161, label %140

140:                                              ; preds = %135
  store %struct.QRVersionInfo* %136, %struct.QRVersionInfo** %137, align 8
  %141 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %1, i64 0, i32 1
  %142 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %136, i64 0, i32 3
  %143 = load i32, i32* %142, align 4
  %144 = mul nsw i32 %143, %143
  %145 = zext i32 %144 to i64
  %146 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %1, i64 0, i32 1, i32 0, i32 1
  %147 = bitcast i8** %146 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = bitcast %"class.std::__1::vector"* %141 to i64*
  %150 = load i64, i64* %149, align 8
  %151 = sub i64 %148, %150
  %152 = icmp ult i64 %151, %145
  %153 = inttoptr i64 %150 to i8*
  br i1 %152, label %154, label %157

154:                                              ; preds = %140
  %155 = sub i64 %145, %151
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %141, i64 %155) #6
  %156 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %137, align 8
  br label %161

157:                                              ; preds = %140
  %158 = icmp ugt i64 %151, %145
  br i1 %158, label %159, label %161

159:                                              ; preds = %157
  %160 = getelementptr inbounds i8, i8* %153, i64 %145
  store i8* %160, i8** %146, align 8
  br label %161

161:                                              ; preds = %159, %157, %154, %135
  %162 = phi %struct.QRVersionInfo* [ %136, %159 ], [ %136, %157 ], [ %156, %154 ], [ %136, %135 ]
  %163 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %1, i64 0, i32 1, i32 0, i32 0
  %164 = load i8*, i8** %163, align 8
  %165 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %162, i64 0, i32 3
  %166 = load i32, i32* %165, align 4
  %167 = mul nsw i32 %166, %166
  %168 = zext i32 %167 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %164, i8 0, i64 %168, i1 false)
  %169 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %137, align 8
  %170 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %169, i64 0, i32 6
  %171 = load i64, i64* %170, align 8
  %172 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %169, i64 0, i32 5
  %173 = load i64, i64* %172, align 8
  %174 = mul i64 %173, %171
  %175 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %169, i64 0, i32 9
  %176 = load i64, i64* %175, align 8
  %177 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %169, i64 0, i32 8
  %178 = load i64, i64* %177, align 8
  %179 = mul i64 %178, %176
  %180 = add i64 %179, %174
  %181 = bitcast %"class.std::__1::vector"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %181) #6
  %182 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %14, i64 0, i32 0, i32 0
  %183 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %14, i64 0, i32 0, i32 1
  %184 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %14, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %181, i8 0, i64 24, i1 false) #6
  %185 = bitcast i8** %184 to i64*
  %186 = bitcast %"class.std::__1::vector"* %14 to i64*
  %187 = icmp eq i64 %180, 0
  br i1 %187, label %194, label %188

188:                                              ; preds = %161
  %189 = bitcast i8** %183 to i64*
  %190 = call i8* @_Znwm(i64 %180) #15
  %191 = ptrtoint i8* %190 to i64
  %192 = getelementptr inbounds i8, i8* %190, i64 %180
  %193 = ptrtoint i8* %192 to i64
  store i64 %191, i64* %186, align 8
  store i64 %191, i64* %189, align 8
  store i64 %193, i64* %185, align 8
  br label %194

194:                                              ; preds = %188, %161
  %195 = phi i8* [ null, %161 ], [ %190, %188 ]
  %196 = phi i64 [ 0, %161 ], [ %191, %188 ]
  %197 = phi i8* [ null, %161 ], [ %192, %188 ]
  %198 = icmp ult i8* %195, %197
  %199 = ptrtoint i8* %197 to i64
  br i1 %66, label %200, label %593

200:                                              ; preds = %194
  br i1 %198, label %201, label %205

201:                                              ; preds = %200
  store i8 32, i8* %195, align 1
  %202 = getelementptr inbounds i8, i8* %195, i64 1
  %203 = ptrtoint i8* %202 to i64
  %204 = bitcast i8** %183 to i64*
  store i64 %203, i64* %204, align 8
  br label %242

205:                                              ; preds = %200
  %206 = ptrtoint i8* %195 to i64
  %207 = bitcast i8** %183 to i64*
  %208 = sub i64 %206, %196
  %209 = add i64 %208, 1
  %210 = icmp slt i64 %209, 0
  br i1 %210, label %211, label %213

211:                                              ; preds = %205
  %212 = bitcast %"class.std::__1::vector"* %14 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %212) #16
  unreachable

213:                                              ; preds = %205
  %214 = sub i64 %199, %196
  %215 = icmp ult i64 %214, 4611686018427387903
  br i1 %215, label %216, label %221

216:                                              ; preds = %213
  %217 = shl i64 %214, 1
  %218 = icmp ult i64 %217, %209
  %219 = select i1 %218, i64 %209, i64 %217
  %220 = icmp eq i64 %219, 0
  br i1 %220, label %224, label %221

221:                                              ; preds = %216, %213
  %222 = phi i64 [ %219, %216 ], [ 9223372036854775807, %213 ]
  %223 = call i8* @_Znwm(i64 %222) #15
  br label %224

224:                                              ; preds = %221, %216
  %225 = phi i64 [ %222, %221 ], [ 0, %216 ]
  %226 = phi i8* [ %223, %221 ], [ null, %216 ]
  %227 = getelementptr inbounds i8, i8* %226, i64 %208
  %228 = getelementptr inbounds i8, i8* %226, i64 %225
  %229 = ptrtoint i8* %228 to i64
  store i8 32, i8* %227, align 1
  %230 = getelementptr inbounds i8, i8* %227, i64 1
  %231 = ptrtoint i8* %230 to i64
  %232 = ptrtoint i8* %195 to i64
  %233 = sub i64 %196, %232
  %234 = sub i64 0, %233
  %235 = getelementptr inbounds i8, i8* %227, i64 %234
  %236 = ptrtoint i8* %235 to i64
  %237 = icmp sgt i64 %233, 0
  br i1 %237, label %238, label %239

238:                                              ; preds = %224
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %235, i8* align 1 %195, i64 %233, i1 false) #6
  br label %239

239:                                              ; preds = %238, %224
  store i64 %236, i64* %186, align 8
  store i64 %231, i64* %207, align 8
  store i64 %229, i64* %185, align 8
  %240 = icmp eq i8* %195, null
  br i1 %240, label %242, label %241

241:                                              ; preds = %239
  call void @_ZdlPv(i8* nonnull %195) #15
  br label %242

242:                                              ; preds = %241, %239, %201
  %243 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %137, align 8
  %244 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %243, i64 0, i32 0
  %245 = load i32, i32* %244, align 8
  %246 = icmp slt i32 %245, 10
  %247 = trunc i64 %2 to i16
  br i1 %246, label %248, label %309

248:                                              ; preds = %242
  %249 = lshr i16 %247, 1
  %250 = load i8*, i8** %183, align 8
  %251 = getelementptr inbounds i8, i8* %250, i64 -1
  %252 = load i8, i8* %251, align 1
  %253 = lshr i16 %247, 5
  %254 = trunc i16 %253 to i8
  %255 = and i8 %254, 15
  %256 = or i8 %252, %255
  store i8 %256, i8* %251, align 1
  %257 = shl i16 %249, 4
  %258 = trunc i16 %257 to i8
  %259 = load i8*, i8** %183, align 8
  %260 = load i8*, i8** %184, align 8
  %261 = icmp ult i8* %259, %260
  %262 = ptrtoint i8* %260 to i64
  br i1 %261, label %263, label %267

263:                                              ; preds = %248
  store i8 %258, i8* %259, align 1
  %264 = getelementptr inbounds i8, i8* %259, i64 1
  %265 = ptrtoint i8* %264 to i64
  %266 = bitcast i8** %183 to i64*
  store i64 %265, i64* %266, align 8
  br label %303

267:                                              ; preds = %248
  %268 = ptrtoint i8* %259 to i64
  %269 = bitcast i8** %183 to i64*
  %270 = load i64, i64* %186, align 8
  %271 = sub i64 %268, %270
  %272 = add i64 %271, 1
  %273 = icmp slt i64 %272, 0
  %274 = inttoptr i64 %270 to i8*
  br i1 %273, label %275, label %277

275:                                              ; preds = %267
  %276 = bitcast %"class.std::__1::vector"* %14 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %276) #16
  unreachable

277:                                              ; preds = %267
  %278 = sub i64 %262, %270
  %279 = icmp ult i64 %278, 4611686018427387903
  br i1 %279, label %280, label %285

280:                                              ; preds = %277
  %281 = shl i64 %278, 1
  %282 = icmp ult i64 %281, %272
  %283 = select i1 %282, i64 %272, i64 %281
  %284 = icmp eq i64 %283, 0
  br i1 %284, label %288, label %285

285:                                              ; preds = %280, %277
  %286 = phi i64 [ %283, %280 ], [ 9223372036854775807, %277 ]
  %287 = call i8* @_Znwm(i64 %286) #15
  br label %288

288:                                              ; preds = %285, %280
  %289 = phi i64 [ %286, %285 ], [ 0, %280 ]
  %290 = phi i8* [ %287, %285 ], [ null, %280 ]
  %291 = getelementptr inbounds i8, i8* %290, i64 %271
  %292 = getelementptr inbounds i8, i8* %290, i64 %289
  %293 = ptrtoint i8* %292 to i64
  store i8 %258, i8* %291, align 1
  %294 = getelementptr inbounds i8, i8* %291, i64 1
  %295 = ptrtoint i8* %294 to i64
  %296 = ptrtoint i8* %290 to i64
  %297 = icmp sgt i64 %271, 0
  br i1 %297, label %298, label %299

298:                                              ; preds = %288
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %290, i8* align 1 %274, i64 %271, i1 false) #6
  br label %299

299:                                              ; preds = %298, %288
  store i64 %296, i64* %186, align 8
  store i64 %295, i64* %269, align 8
  store i64 %293, i64* %185, align 8
  %300 = icmp eq i64 %270, 0
  br i1 %300, label %303, label %301

301:                                              ; preds = %299
  call void @_ZdlPv(i8* nonnull %274) #15
  %302 = load i8*, i8** %183, align 8
  br label %303

303:                                              ; preds = %263, %299, %301
  %304 = phi i8* [ %264, %263 ], [ %294, %299 ], [ %302, %301 ]
  %305 = getelementptr inbounds i8, i8* %304, i64 -1
  %306 = trunc i64 %2 to i8
  %307 = shl i8 %306, 3
  %308 = and i8 %307, 8
  br label %370

309:                                              ; preds = %242
  %310 = lshr i16 %247, 3
  %311 = load i8*, i8** %183, align 8
  %312 = getelementptr inbounds i8, i8* %311, i64 -1
  %313 = load i8, i8* %312, align 1
  %314 = lshr i16 %247, 7
  %315 = trunc i16 %314 to i8
  %316 = and i8 %315, 15
  %317 = or i8 %313, %316
  store i8 %317, i8* %312, align 1
  %318 = shl i16 %310, 4
  %319 = trunc i16 %318 to i8
  %320 = load i8*, i8** %183, align 8
  %321 = load i8*, i8** %184, align 8
  %322 = icmp ult i8* %320, %321
  %323 = ptrtoint i8* %321 to i64
  br i1 %322, label %324, label %328

324:                                              ; preds = %309
  store i8 %319, i8* %320, align 1
  %325 = getelementptr inbounds i8, i8* %320, i64 1
  %326 = ptrtoint i8* %325 to i64
  %327 = bitcast i8** %183 to i64*
  store i64 %326, i64* %327, align 8
  br label %364

328:                                              ; preds = %309
  %329 = ptrtoint i8* %320 to i64
  %330 = bitcast i8** %183 to i64*
  %331 = load i64, i64* %186, align 8
  %332 = sub i64 %329, %331
  %333 = add i64 %332, 1
  %334 = icmp slt i64 %333, 0
  %335 = inttoptr i64 %331 to i8*
  br i1 %334, label %336, label %338

336:                                              ; preds = %328
  %337 = bitcast %"class.std::__1::vector"* %14 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %337) #16
  unreachable

338:                                              ; preds = %328
  %339 = sub i64 %323, %331
  %340 = icmp ult i64 %339, 4611686018427387903
  br i1 %340, label %341, label %346

341:                                              ; preds = %338
  %342 = shl i64 %339, 1
  %343 = icmp ult i64 %342, %333
  %344 = select i1 %343, i64 %333, i64 %342
  %345 = icmp eq i64 %344, 0
  br i1 %345, label %349, label %346

346:                                              ; preds = %341, %338
  %347 = phi i64 [ %344, %341 ], [ 9223372036854775807, %338 ]
  %348 = call i8* @_Znwm(i64 %347) #15
  br label %349

349:                                              ; preds = %346, %341
  %350 = phi i64 [ %347, %346 ], [ 0, %341 ]
  %351 = phi i8* [ %348, %346 ], [ null, %341 ]
  %352 = getelementptr inbounds i8, i8* %351, i64 %332
  %353 = getelementptr inbounds i8, i8* %351, i64 %350
  %354 = ptrtoint i8* %353 to i64
  store i8 %319, i8* %352, align 1
  %355 = getelementptr inbounds i8, i8* %352, i64 1
  %356 = ptrtoint i8* %355 to i64
  %357 = ptrtoint i8* %351 to i64
  %358 = icmp sgt i64 %332, 0
  br i1 %358, label %359, label %360

359:                                              ; preds = %349
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %351, i8* align 1 %335, i64 %332, i1 false) #6
  br label %360

360:                                              ; preds = %359, %349
  store i64 %357, i64* %186, align 8
  store i64 %356, i64* %330, align 8
  store i64 %354, i64* %185, align 8
  %361 = icmp eq i64 %331, 0
  br i1 %361, label %364, label %362

362:                                              ; preds = %360
  call void @_ZdlPv(i8* nonnull %335) #15
  %363 = load i8*, i8** %183, align 8
  br label %364

364:                                              ; preds = %324, %360, %362
  %365 = phi i8* [ %325, %324 ], [ %355, %360 ], [ %363, %362 ]
  %366 = trunc i64 %2 to i8
  %367 = shl i8 %366, 1
  %368 = getelementptr inbounds i8, i8* %365, i64 -1
  %369 = and i8 %367, 14
  br label %370

370:                                              ; preds = %364, %303
  %371 = phi i8 [ %369, %364 ], [ %308, %303 ]
  %372 = phi i8* [ %368, %364 ], [ %305, %303 ]
  %373 = phi i32 [ 1, %364 ], [ 3, %303 ]
  %374 = load i8, i8* %372, align 1
  %375 = or i8 %374, %371
  store i8 %375, i8* %372, align 1
  %376 = icmp eq i64 %2, 0
  br i1 %376, label %865, label %377

377:                                              ; preds = %370
  %378 = add i64 %2, -1
  %379 = bitcast %"class.logging::CheckError"* %8 to i8*
  %380 = bitcast i8** %183 to i64*
  br label %381

381:                                              ; preds = %377, %589
  %382 = phi i64 [ 0, %377 ], [ %591, %589 ]
  %383 = phi i32 [ %373, %377 ], [ %590, %589 ]
  %384 = icmp eq i64 %382, %378
  %385 = getelementptr inbounds i8, i8* %3, i64 %382
  %386 = load i8, i8* %385, align 1
  %387 = zext i8 %386 to i64
  %388 = getelementptr inbounds [91 x i8], [91 x i8]* @_ZN12_GLOBAL__N_114kAlphanumValueE, i64 0, i64 %387
  %389 = load i8, i8* %388, align 1
  br i1 %384, label %390, label %453

390:                                              ; preds = %381
  %391 = zext i8 %389 to i32
  %392 = shl nuw nsw i32 %391, 2
  %393 = icmp sgt i32 %383, 0
  br i1 %393, label %394, label %403

394:                                              ; preds = %390
  %395 = and i32 %392, 252
  %396 = sub nsw i32 8, %383
  %397 = lshr i32 %395, %396
  %398 = load i8*, i8** %183, align 8
  %399 = getelementptr inbounds i8, i8* %398, i64 -1
  %400 = load i8, i8* %399, align 1
  %401 = trunc i32 %397 to i8
  %402 = or i8 %400, %401
  store i8 %402, i8* %399, align 1
  br label %403

403:                                              ; preds = %394, %390
  %404 = add nsw i32 %383, -6
  %405 = icmp slt i32 %404, 0
  br i1 %405, label %406, label %589

406:                                              ; preds = %403
  %407 = and i32 %392, 252
  %408 = shl i32 %407, %383
  %409 = trunc i32 %408 to i8
  %410 = load i8*, i8** %183, align 8
  %411 = load i8*, i8** %184, align 8
  %412 = icmp ult i8* %410, %411
  %413 = ptrtoint i8* %411 to i64
  br i1 %412, label %414, label %417

414:                                              ; preds = %406
  store i8 %409, i8* %410, align 1
  %415 = getelementptr inbounds i8, i8* %410, i64 1
  %416 = ptrtoint i8* %415 to i64
  store i64 %416, i64* %380, align 8
  br label %451

417:                                              ; preds = %406
  %418 = ptrtoint i8* %410 to i64
  %419 = load i64, i64* %186, align 8
  %420 = sub i64 %418, %419
  %421 = add i64 %420, 1
  %422 = icmp slt i64 %421, 0
  %423 = inttoptr i64 %419 to i8*
  br i1 %422, label %424, label %426

424:                                              ; preds = %417
  %425 = bitcast %"class.std::__1::vector"* %14 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %425) #16
  unreachable

426:                                              ; preds = %417
  %427 = sub i64 %413, %419
  %428 = icmp ult i64 %427, 4611686018427387903
  br i1 %428, label %429, label %434

429:                                              ; preds = %426
  %430 = shl i64 %427, 1
  %431 = icmp ult i64 %430, %421
  %432 = select i1 %431, i64 %421, i64 %430
  %433 = icmp eq i64 %432, 0
  br i1 %433, label %437, label %434

434:                                              ; preds = %429, %426
  %435 = phi i64 [ %432, %429 ], [ 9223372036854775807, %426 ]
  %436 = call i8* @_Znwm(i64 %435) #15
  br label %437

437:                                              ; preds = %434, %429
  %438 = phi i64 [ %435, %434 ], [ 0, %429 ]
  %439 = phi i8* [ %436, %434 ], [ null, %429 ]
  %440 = getelementptr inbounds i8, i8* %439, i64 %420
  %441 = getelementptr inbounds i8, i8* %439, i64 %438
  %442 = ptrtoint i8* %441 to i64
  store i8 %409, i8* %440, align 1
  %443 = getelementptr inbounds i8, i8* %440, i64 1
  %444 = ptrtoint i8* %443 to i64
  %445 = ptrtoint i8* %439 to i64
  %446 = icmp sgt i64 %420, 0
  br i1 %446, label %447, label %448

447:                                              ; preds = %437
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %439, i8* align 1 %423, i64 %420, i1 false) #6
  br label %448

448:                                              ; preds = %447, %437
  store i64 %445, i64* %186, align 8
  store i64 %444, i64* %380, align 8
  store i64 %442, i64* %185, align 8
  %449 = icmp eq i64 %419, 0
  br i1 %449, label %451, label %450

450:                                              ; preds = %448
  call void @_ZdlPv(i8* nonnull %423) #15
  br label %451

451:                                              ; preds = %414, %448, %450
  %452 = add nsw i32 %383, 2
  br label %589

453:                                              ; preds = %381
  %454 = zext i8 %389 to i16
  %455 = mul nuw nsw i16 %454, 45
  %456 = or i64 %382, 1
  %457 = icmp ult i64 %456, %2
  br i1 %457, label %460, label %458

458:                                              ; preds = %453
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %379) #6
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0), i32 418, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i64 0, i64 0)) #6
  %459 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %379) #6
  br label %460

460:                                              ; preds = %453, %458
  %461 = getelementptr inbounds i8, i8* %3, i64 %456
  %462 = load i8, i8* %461, align 1
  %463 = zext i8 %462 to i64
  %464 = getelementptr inbounds [91 x i8], [91 x i8]* @_ZN12_GLOBAL__N_114kAlphanumValueE, i64 0, i64 %463
  %465 = load i8, i8* %464, align 1
  %466 = zext i8 %465 to i16
  %467 = add nuw nsw i16 %455, %466
  %468 = lshr i16 %467, 3
  %469 = and i16 %468, 255
  %470 = zext i16 %469 to i32
  %471 = icmp sgt i32 %383, 0
  br i1 %471, label %472, label %480

472:                                              ; preds = %460
  %473 = sub nsw i32 8, %383
  %474 = lshr i32 %470, %473
  %475 = load i8*, i8** %183, align 8
  %476 = getelementptr inbounds i8, i8* %475, i64 -1
  %477 = load i8, i8* %476, align 1
  %478 = trunc i32 %474 to i8
  %479 = or i8 %477, %478
  store i8 %479, i8* %476, align 1
  br label %480

480:                                              ; preds = %472, %460
  %481 = add nsw i32 %383, -8
  %482 = icmp slt i32 %481, 0
  br i1 %482, label %483, label %527

483:                                              ; preds = %480
  %484 = shl i32 %470, %383
  %485 = trunc i32 %484 to i8
  %486 = load i8*, i8** %183, align 8
  %487 = load i8*, i8** %184, align 8
  %488 = icmp ult i8* %486, %487
  %489 = ptrtoint i8* %487 to i64
  br i1 %488, label %490, label %493

490:                                              ; preds = %483
  store i8 %485, i8* %486, align 1
  %491 = getelementptr inbounds i8, i8* %486, i64 1
  %492 = ptrtoint i8* %491 to i64
  store i64 %492, i64* %380, align 8
  br label %527

493:                                              ; preds = %483
  %494 = ptrtoint i8* %486 to i64
  %495 = load i64, i64* %186, align 8
  %496 = sub i64 %494, %495
  %497 = add i64 %496, 1
  %498 = icmp slt i64 %497, 0
  %499 = inttoptr i64 %495 to i8*
  br i1 %498, label %500, label %502

500:                                              ; preds = %493
  %501 = bitcast %"class.std::__1::vector"* %14 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %501) #16
  unreachable

502:                                              ; preds = %493
  %503 = sub i64 %489, %495
  %504 = icmp ult i64 %503, 4611686018427387903
  br i1 %504, label %505, label %510

505:                                              ; preds = %502
  %506 = shl i64 %503, 1
  %507 = icmp ult i64 %506, %497
  %508 = select i1 %507, i64 %497, i64 %506
  %509 = icmp eq i64 %508, 0
  br i1 %509, label %513, label %510

510:                                              ; preds = %505, %502
  %511 = phi i64 [ %508, %505 ], [ 9223372036854775807, %502 ]
  %512 = call i8* @_Znwm(i64 %511) #15
  br label %513

513:                                              ; preds = %510, %505
  %514 = phi i64 [ %511, %510 ], [ 0, %505 ]
  %515 = phi i8* [ %512, %510 ], [ null, %505 ]
  %516 = getelementptr inbounds i8, i8* %515, i64 %496
  %517 = getelementptr inbounds i8, i8* %515, i64 %514
  %518 = ptrtoint i8* %517 to i64
  store i8 %485, i8* %516, align 1
  %519 = getelementptr inbounds i8, i8* %516, i64 1
  %520 = ptrtoint i8* %519 to i64
  %521 = ptrtoint i8* %515 to i64
  %522 = icmp sgt i64 %496, 0
  br i1 %522, label %523, label %524

523:                                              ; preds = %513
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %515, i8* align 1 %499, i64 %496, i1 false) #6
  br label %524

524:                                              ; preds = %523, %513
  store i64 %521, i64* %186, align 8
  store i64 %520, i64* %380, align 8
  store i64 %518, i64* %185, align 8
  %525 = icmp eq i64 %495, 0
  br i1 %525, label %527, label %526

526:                                              ; preds = %524
  call void @_ZdlPv(i8* nonnull %499) #15
  br label %527

527:                                              ; preds = %526, %524, %490, %480
  %528 = phi i32 [ %481, %480 ], [ %383, %490 ], [ %383, %524 ], [ %383, %526 ]
  %529 = shl i16 %467, 5
  %530 = and i16 %529, 224
  %531 = zext i16 %530 to i32
  %532 = icmp sgt i32 %528, 0
  br i1 %532, label %533, label %543

533:                                              ; preds = %527
  %534 = sub nsw i32 8, %528
  %535 = lshr i32 %531, %534
  %536 = load i8*, i8** %183, align 8
  %537 = getelementptr inbounds i8, i8* %536, i64 -1
  %538 = load i8, i8* %537, align 1
  %539 = trunc i32 %535 to i8
  %540 = or i8 %538, %539
  store i8 %540, i8* %537, align 1
  %541 = add nsw i32 %528, -3
  %542 = icmp slt i32 %541, 0
  br i1 %542, label %543, label %589

543:                                              ; preds = %527, %533
  %544 = shl i32 %531, %528
  %545 = trunc i32 %544 to i8
  %546 = load i8*, i8** %183, align 8
  %547 = load i8*, i8** %184, align 8
  %548 = icmp ult i8* %546, %547
  %549 = ptrtoint i8* %547 to i64
  br i1 %548, label %550, label %553

550:                                              ; preds = %543
  store i8 %545, i8* %546, align 1
  %551 = getelementptr inbounds i8, i8* %546, i64 1
  %552 = ptrtoint i8* %551 to i64
  store i64 %552, i64* %380, align 8
  br label %587

553:                                              ; preds = %543
  %554 = ptrtoint i8* %546 to i64
  %555 = load i64, i64* %186, align 8
  %556 = sub i64 %554, %555
  %557 = add i64 %556, 1
  %558 = icmp slt i64 %557, 0
  %559 = inttoptr i64 %555 to i8*
  br i1 %558, label %560, label %562

560:                                              ; preds = %553
  %561 = bitcast %"class.std::__1::vector"* %14 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %561) #16
  unreachable

562:                                              ; preds = %553
  %563 = sub i64 %549, %555
  %564 = icmp ult i64 %563, 4611686018427387903
  br i1 %564, label %565, label %570

565:                                              ; preds = %562
  %566 = shl i64 %563, 1
  %567 = icmp ult i64 %566, %557
  %568 = select i1 %567, i64 %557, i64 %566
  %569 = icmp eq i64 %568, 0
  br i1 %569, label %573, label %570

570:                                              ; preds = %565, %562
  %571 = phi i64 [ %568, %565 ], [ 9223372036854775807, %562 ]
  %572 = call i8* @_Znwm(i64 %571) #15
  br label %573

573:                                              ; preds = %570, %565
  %574 = phi i64 [ %571, %570 ], [ 0, %565 ]
  %575 = phi i8* [ %572, %570 ], [ null, %565 ]
  %576 = getelementptr inbounds i8, i8* %575, i64 %556
  %577 = getelementptr inbounds i8, i8* %575, i64 %574
  %578 = ptrtoint i8* %577 to i64
  store i8 %545, i8* %576, align 1
  %579 = getelementptr inbounds i8, i8* %576, i64 1
  %580 = ptrtoint i8* %579 to i64
  %581 = ptrtoint i8* %575 to i64
  %582 = icmp sgt i64 %556, 0
  br i1 %582, label %583, label %584

583:                                              ; preds = %573
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %575, i8* align 1 %559, i64 %556, i1 false) #6
  br label %584

584:                                              ; preds = %583, %573
  store i64 %581, i64* %186, align 8
  store i64 %580, i64* %380, align 8
  store i64 %578, i64* %185, align 8
  %585 = icmp eq i64 %555, 0
  br i1 %585, label %587, label %586

586:                                              ; preds = %584
  call void @_ZdlPv(i8* nonnull %559) #15
  br label %587

587:                                              ; preds = %550, %584, %586
  %588 = add nsw i32 %528, 5
  br label %589

589:                                              ; preds = %587, %533, %451, %403
  %590 = phi i32 [ %452, %451 ], [ %404, %403 ], [ %588, %587 ], [ %541, %533 ]
  %591 = add i64 %382, 2
  %592 = icmp ult i64 %591, %2
  br i1 %592, label %381, label %861

593:                                              ; preds = %194
  br i1 %198, label %594, label %598

594:                                              ; preds = %593
  store i8 64, i8* %195, align 1
  %595 = getelementptr inbounds i8, i8* %195, i64 1
  %596 = ptrtoint i8* %595 to i64
  %597 = bitcast i8** %183 to i64*
  store i64 %596, i64* %597, align 8
  br label %635

598:                                              ; preds = %593
  %599 = ptrtoint i8* %195 to i64
  %600 = bitcast i8** %183 to i64*
  %601 = sub i64 %599, %196
  %602 = add i64 %601, 1
  %603 = icmp slt i64 %602, 0
  br i1 %603, label %604, label %606

604:                                              ; preds = %598
  %605 = bitcast %"class.std::__1::vector"* %14 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %605) #16
  unreachable

606:                                              ; preds = %598
  %607 = sub i64 %199, %196
  %608 = icmp ult i64 %607, 4611686018427387903
  br i1 %608, label %609, label %614

609:                                              ; preds = %606
  %610 = shl i64 %607, 1
  %611 = icmp ult i64 %610, %602
  %612 = select i1 %611, i64 %602, i64 %610
  %613 = icmp eq i64 %612, 0
  br i1 %613, label %617, label %614

614:                                              ; preds = %609, %606
  %615 = phi i64 [ %612, %609 ], [ 9223372036854775807, %606 ]
  %616 = call i8* @_Znwm(i64 %615) #15
  br label %617

617:                                              ; preds = %614, %609
  %618 = phi i64 [ %615, %614 ], [ 0, %609 ]
  %619 = phi i8* [ %616, %614 ], [ null, %609 ]
  %620 = getelementptr inbounds i8, i8* %619, i64 %601
  %621 = getelementptr inbounds i8, i8* %619, i64 %618
  %622 = ptrtoint i8* %621 to i64
  store i8 64, i8* %620, align 1
  %623 = getelementptr inbounds i8, i8* %620, i64 1
  %624 = ptrtoint i8* %623 to i64
  %625 = ptrtoint i8* %195 to i64
  %626 = sub i64 %196, %625
  %627 = sub i64 0, %626
  %628 = getelementptr inbounds i8, i8* %620, i64 %627
  %629 = ptrtoint i8* %628 to i64
  %630 = icmp sgt i64 %626, 0
  br i1 %630, label %631, label %632

631:                                              ; preds = %617
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %628, i8* align 1 %195, i64 %626, i1 false) #6
  br label %632

632:                                              ; preds = %631, %617
  store i64 %629, i64* %186, align 8
  store i64 %624, i64* %600, align 8
  store i64 %622, i64* %185, align 8
  %633 = icmp eq i8* %195, null
  br i1 %633, label %635, label %634

634:                                              ; preds = %632
  call void @_ZdlPv(i8* nonnull %195) #15
  br label %635

635:                                              ; preds = %634, %632, %594
  %636 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %137, align 8
  %637 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %636, i64 0, i32 0
  %638 = load i32, i32* %637, align 8
  %639 = icmp slt i32 %638, 10
  br i1 %639, label %640, label %694

640:                                              ; preds = %635
  %641 = trunc i64 %2 to i32
  %642 = lshr i32 %641, 4
  %643 = load i8*, i8** %183, align 8
  %644 = getelementptr inbounds i8, i8* %643, i64 -1
  %645 = load i8, i8* %644, align 1
  %646 = trunc i32 %642 to i8
  %647 = and i8 %646, 15
  %648 = or i8 %645, %647
  store i8 %648, i8* %644, align 1
  %649 = trunc i64 %2 to i8
  %650 = shl i8 %649, 4
  %651 = load i8*, i8** %183, align 8
  %652 = load i8*, i8** %184, align 8
  %653 = icmp ult i8* %651, %652
  %654 = ptrtoint i8* %652 to i64
  br i1 %653, label %655, label %659

655:                                              ; preds = %640
  store i8 %650, i8* %651, align 1
  %656 = getelementptr inbounds i8, i8* %651, i64 1
  %657 = ptrtoint i8* %656 to i64
  %658 = bitcast i8** %183 to i64*
  store i64 %657, i64* %658, align 8
  br label %803

659:                                              ; preds = %640
  %660 = ptrtoint i8* %651 to i64
  %661 = bitcast i8** %183 to i64*
  %662 = load i64, i64* %186, align 8
  %663 = sub i64 %660, %662
  %664 = add i64 %663, 1
  %665 = icmp slt i64 %664, 0
  %666 = inttoptr i64 %662 to i8*
  br i1 %665, label %667, label %669

667:                                              ; preds = %659
  %668 = bitcast %"class.std::__1::vector"* %14 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %668) #16
  unreachable

669:                                              ; preds = %659
  %670 = sub i64 %654, %662
  %671 = icmp ult i64 %670, 4611686018427387903
  br i1 %671, label %672, label %677

672:                                              ; preds = %669
  %673 = shl i64 %670, 1
  %674 = icmp ult i64 %673, %664
  %675 = select i1 %674, i64 %664, i64 %673
  %676 = icmp eq i64 %675, 0
  br i1 %676, label %680, label %677

677:                                              ; preds = %672, %669
  %678 = phi i64 [ %675, %672 ], [ 9223372036854775807, %669 ]
  %679 = call i8* @_Znwm(i64 %678) #15
  br label %680

680:                                              ; preds = %677, %672
  %681 = phi i64 [ %678, %677 ], [ 0, %672 ]
  %682 = phi i8* [ %679, %677 ], [ null, %672 ]
  %683 = getelementptr inbounds i8, i8* %682, i64 %663
  %684 = getelementptr inbounds i8, i8* %682, i64 %681
  %685 = ptrtoint i8* %684 to i64
  store i8 %650, i8* %683, align 1
  %686 = getelementptr inbounds i8, i8* %683, i64 1
  %687 = ptrtoint i8* %686 to i64
  %688 = ptrtoint i8* %682 to i64
  %689 = icmp sgt i64 %663, 0
  br i1 %689, label %690, label %691

690:                                              ; preds = %680
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %682, i8* align 1 %666, i64 %663, i1 false) #6
  br label %691

691:                                              ; preds = %690, %680
  store i64 %688, i64* %186, align 8
  store i64 %687, i64* %661, align 8
  store i64 %685, i64* %185, align 8
  %692 = icmp eq i64 %662, 0
  br i1 %692, label %803, label %693

693:                                              ; preds = %691
  call void @_ZdlPv(i8* nonnull %666) #15
  br label %803

694:                                              ; preds = %635
  %695 = lshr i64 %2, 8
  %696 = lshr i64 %2, 12
  %697 = load i8*, i8** %183, align 8
  %698 = getelementptr inbounds i8, i8* %697, i64 -1
  %699 = load i8, i8* %698, align 1
  %700 = trunc i64 %696 to i8
  %701 = and i8 %700, 15
  %702 = or i8 %699, %701
  store i8 %702, i8* %698, align 1
  %703 = shl nuw nsw i64 %695, 4
  %704 = trunc i64 %703 to i8
  %705 = load i8*, i8** %183, align 8
  %706 = load i8*, i8** %184, align 8
  %707 = icmp ult i8* %705, %706
  %708 = ptrtoint i8* %706 to i64
  br i1 %707, label %709, label %713

709:                                              ; preds = %694
  store i8 %704, i8* %705, align 1
  %710 = getelementptr inbounds i8, i8* %705, i64 1
  %711 = ptrtoint i8* %710 to i64
  %712 = bitcast i8** %183 to i64*
  store i64 %711, i64* %712, align 8
  br label %749

713:                                              ; preds = %694
  %714 = ptrtoint i8* %705 to i64
  %715 = bitcast i8** %183 to i64*
  %716 = load i64, i64* %186, align 8
  %717 = sub i64 %714, %716
  %718 = add i64 %717, 1
  %719 = icmp slt i64 %718, 0
  %720 = inttoptr i64 %716 to i8*
  br i1 %719, label %721, label %723

721:                                              ; preds = %713
  %722 = bitcast %"class.std::__1::vector"* %14 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %722) #16
  unreachable

723:                                              ; preds = %713
  %724 = sub i64 %708, %716
  %725 = icmp ult i64 %724, 4611686018427387903
  br i1 %725, label %726, label %731

726:                                              ; preds = %723
  %727 = shl i64 %724, 1
  %728 = icmp ult i64 %727, %718
  %729 = select i1 %728, i64 %718, i64 %727
  %730 = icmp eq i64 %729, 0
  br i1 %730, label %734, label %731

731:                                              ; preds = %726, %723
  %732 = phi i64 [ %729, %726 ], [ 9223372036854775807, %723 ]
  %733 = call i8* @_Znwm(i64 %732) #15
  br label %734

734:                                              ; preds = %731, %726
  %735 = phi i64 [ %732, %731 ], [ 0, %726 ]
  %736 = phi i8* [ %733, %731 ], [ null, %726 ]
  %737 = getelementptr inbounds i8, i8* %736, i64 %717
  %738 = getelementptr inbounds i8, i8* %736, i64 %735
  %739 = ptrtoint i8* %738 to i64
  store i8 %704, i8* %737, align 1
  %740 = getelementptr inbounds i8, i8* %737, i64 1
  %741 = ptrtoint i8* %740 to i64
  %742 = ptrtoint i8* %736 to i64
  %743 = icmp sgt i64 %717, 0
  br i1 %743, label %744, label %745

744:                                              ; preds = %734
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %736, i8* align 1 %720, i64 %717, i1 false) #6
  br label %745

745:                                              ; preds = %744, %734
  store i64 %742, i64* %186, align 8
  store i64 %741, i64* %715, align 8
  store i64 %739, i64* %185, align 8
  %746 = icmp eq i64 %716, 0
  br i1 %746, label %749, label %747

747:                                              ; preds = %745
  call void @_ZdlPv(i8* nonnull %720) #15
  %748 = load i8*, i8** %183, align 8
  br label %749

749:                                              ; preds = %709, %745, %747
  %750 = phi i8* [ %710, %709 ], [ %740, %745 ], [ %748, %747 ]
  %751 = trunc i64 %2 to i32
  %752 = lshr i32 %751, 4
  %753 = getelementptr inbounds i8, i8* %750, i64 -1
  %754 = load i8, i8* %753, align 1
  %755 = trunc i32 %752 to i8
  %756 = and i8 %755, 15
  %757 = or i8 %754, %756
  store i8 %757, i8* %753, align 1
  %758 = trunc i64 %2 to i8
  %759 = shl i8 %758, 4
  %760 = load i8*, i8** %183, align 8
  %761 = load i8*, i8** %184, align 8
  %762 = icmp ult i8* %760, %761
  %763 = ptrtoint i8* %761 to i64
  br i1 %762, label %764, label %768

764:                                              ; preds = %749
  store i8 %759, i8* %760, align 1
  %765 = getelementptr inbounds i8, i8* %760, i64 1
  %766 = ptrtoint i8* %765 to i64
  %767 = bitcast i8** %183 to i64*
  store i64 %766, i64* %767, align 8
  br label %803

768:                                              ; preds = %749
  %769 = ptrtoint i8* %760 to i64
  %770 = bitcast i8** %183 to i64*
  %771 = load i64, i64* %186, align 8
  %772 = sub i64 %769, %771
  %773 = add i64 %772, 1
  %774 = icmp slt i64 %773, 0
  %775 = inttoptr i64 %771 to i8*
  br i1 %774, label %776, label %778

776:                                              ; preds = %768
  %777 = bitcast %"class.std::__1::vector"* %14 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %777) #16
  unreachable

778:                                              ; preds = %768
  %779 = sub i64 %763, %771
  %780 = icmp ult i64 %779, 4611686018427387903
  br i1 %780, label %781, label %786

781:                                              ; preds = %778
  %782 = shl i64 %779, 1
  %783 = icmp ult i64 %782, %773
  %784 = select i1 %783, i64 %773, i64 %782
  %785 = icmp eq i64 %784, 0
  br i1 %785, label %789, label %786

786:                                              ; preds = %781, %778
  %787 = phi i64 [ %784, %781 ], [ 9223372036854775807, %778 ]
  %788 = call i8* @_Znwm(i64 %787) #15
  br label %789

789:                                              ; preds = %786, %781
  %790 = phi i64 [ %787, %786 ], [ 0, %781 ]
  %791 = phi i8* [ %788, %786 ], [ null, %781 ]
  %792 = getelementptr inbounds i8, i8* %791, i64 %772
  %793 = getelementptr inbounds i8, i8* %791, i64 %790
  %794 = ptrtoint i8* %793 to i64
  store i8 %759, i8* %792, align 1
  %795 = getelementptr inbounds i8, i8* %792, i64 1
  %796 = ptrtoint i8* %795 to i64
  %797 = ptrtoint i8* %791 to i64
  %798 = icmp sgt i64 %772, 0
  br i1 %798, label %799, label %800

799:                                              ; preds = %789
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %791, i8* align 1 %775, i64 %772, i1 false) #6
  br label %800

800:                                              ; preds = %799, %789
  store i64 %797, i64* %186, align 8
  store i64 %796, i64* %770, align 8
  store i64 %794, i64* %185, align 8
  %801 = icmp eq i64 %771, 0
  br i1 %801, label %803, label %802

802:                                              ; preds = %800
  call void @_ZdlPv(i8* nonnull %775) #15
  br label %803

803:                                              ; preds = %764, %800, %802, %655, %691, %693
  %804 = icmp eq i64 %2, 0
  br i1 %804, label %863, label %805

805:                                              ; preds = %803
  %806 = bitcast i8** %183 to i64*
  br label %807

807:                                              ; preds = %805, %858
  %808 = phi i64 [ 0, %805 ], [ %859, %858 ]
  %809 = getelementptr inbounds i8, i8* %3, i64 %808
  %810 = load i8, i8* %809, align 1
  %811 = lshr i8 %810, 4
  %812 = load i8*, i8** %183, align 8
  %813 = getelementptr inbounds i8, i8* %812, i64 -1
  %814 = load i8, i8* %813, align 1
  %815 = or i8 %814, %811
  store i8 %815, i8* %813, align 1
  %816 = shl i8 %810, 4
  %817 = load i8*, i8** %183, align 8
  %818 = load i8*, i8** %184, align 8
  %819 = icmp ult i8* %817, %818
  %820 = ptrtoint i8* %818 to i64
  br i1 %819, label %821, label %824

821:                                              ; preds = %807
  store i8 %816, i8* %817, align 1
  %822 = getelementptr inbounds i8, i8* %817, i64 1
  %823 = ptrtoint i8* %822 to i64
  store i64 %823, i64* %806, align 8
  br label %858

824:                                              ; preds = %807
  %825 = ptrtoint i8* %817 to i64
  %826 = load i64, i64* %186, align 8
  %827 = sub i64 %825, %826
  %828 = add i64 %827, 1
  %829 = icmp slt i64 %828, 0
  %830 = inttoptr i64 %826 to i8*
  br i1 %829, label %831, label %833

831:                                              ; preds = %824
  %832 = bitcast %"class.std::__1::vector"* %14 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %832) #16
  unreachable

833:                                              ; preds = %824
  %834 = sub i64 %820, %826
  %835 = icmp ult i64 %834, 4611686018427387903
  br i1 %835, label %836, label %841

836:                                              ; preds = %833
  %837 = shl i64 %834, 1
  %838 = icmp ult i64 %837, %828
  %839 = select i1 %838, i64 %828, i64 %837
  %840 = icmp eq i64 %839, 0
  br i1 %840, label %844, label %841

841:                                              ; preds = %836, %833
  %842 = phi i64 [ %839, %836 ], [ 9223372036854775807, %833 ]
  %843 = call i8* @_Znwm(i64 %842) #15
  br label %844

844:                                              ; preds = %841, %836
  %845 = phi i64 [ %842, %841 ], [ 0, %836 ]
  %846 = phi i8* [ %843, %841 ], [ null, %836 ]
  %847 = getelementptr inbounds i8, i8* %846, i64 %827
  %848 = getelementptr inbounds i8, i8* %846, i64 %845
  %849 = ptrtoint i8* %848 to i64
  store i8 %816, i8* %847, align 1
  %850 = getelementptr inbounds i8, i8* %847, i64 1
  %851 = ptrtoint i8* %850 to i64
  %852 = ptrtoint i8* %846 to i64
  %853 = icmp sgt i64 %827, 0
  br i1 %853, label %854, label %855

854:                                              ; preds = %844
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %846, i8* align 1 %830, i64 %827, i1 false) #6
  br label %855

855:                                              ; preds = %854, %844
  store i64 %852, i64* %186, align 8
  store i64 %851, i64* %806, align 8
  store i64 %849, i64* %185, align 8
  %856 = icmp eq i64 %826, 0
  br i1 %856, label %858, label %857

857:                                              ; preds = %855
  call void @_ZdlPv(i8* nonnull %830) #15
  br label %858

858:                                              ; preds = %857, %855, %821
  %859 = add nuw i64 %808, 1
  %860 = icmp eq i64 %859, %2
  br i1 %860, label %863, label %807

861:                                              ; preds = %589
  %862 = icmp slt i32 %590, 4
  br i1 %862, label %865, label %863

863:                                              ; preds = %858, %803, %861
  %864 = bitcast i8** %183 to i64*
  br label %909

865:                                              ; preds = %370, %861
  %866 = load i8*, i8** %183, align 8
  %867 = load i8*, i8** %184, align 8
  %868 = icmp ult i8* %866, %867
  %869 = ptrtoint i8* %867 to i64
  br i1 %868, label %870, label %874

870:                                              ; preds = %865
  store i8 0, i8* %866, align 1
  %871 = getelementptr inbounds i8, i8* %866, i64 1
  %872 = ptrtoint i8* %871 to i64
  %873 = bitcast i8** %183 to i64*
  store i64 %872, i64* %873, align 8
  br label %909

874:                                              ; preds = %865
  %875 = ptrtoint i8* %866 to i64
  %876 = bitcast i8** %183 to i64*
  %877 = load i64, i64* %186, align 8
  %878 = sub i64 %875, %877
  %879 = add i64 %878, 1
  %880 = icmp slt i64 %879, 0
  %881 = inttoptr i64 %877 to i8*
  br i1 %880, label %882, label %884

882:                                              ; preds = %874
  %883 = bitcast %"class.std::__1::vector"* %14 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %883) #16
  unreachable

884:                                              ; preds = %874
  %885 = sub i64 %869, %877
  %886 = icmp ult i64 %885, 4611686018427387903
  br i1 %886, label %887, label %892

887:                                              ; preds = %884
  %888 = shl i64 %885, 1
  %889 = icmp ult i64 %888, %879
  %890 = select i1 %889, i64 %879, i64 %888
  %891 = icmp eq i64 %890, 0
  br i1 %891, label %895, label %892

892:                                              ; preds = %887, %884
  %893 = phi i64 [ %890, %887 ], [ 9223372036854775807, %884 ]
  %894 = call i8* @_Znwm(i64 %893) #15
  br label %895

895:                                              ; preds = %892, %887
  %896 = phi i64 [ %893, %892 ], [ 0, %887 ]
  %897 = phi i8* [ %894, %892 ], [ null, %887 ]
  %898 = getelementptr inbounds i8, i8* %897, i64 %878
  %899 = getelementptr inbounds i8, i8* %897, i64 %896
  %900 = ptrtoint i8* %899 to i64
  store i8 0, i8* %898, align 1
  %901 = getelementptr inbounds i8, i8* %898, i64 1
  %902 = ptrtoint i8* %901 to i64
  %903 = ptrtoint i8* %897 to i64
  %904 = icmp sgt i64 %878, 0
  br i1 %904, label %905, label %906

905:                                              ; preds = %895
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %897, i8* align 1 %881, i64 %878, i1 false) #6
  br label %906

906:                                              ; preds = %905, %895
  store i64 %903, i64* %186, align 8
  store i64 %902, i64* %876, align 8
  store i64 %900, i64* %185, align 8
  %907 = icmp eq i64 %877, 0
  br i1 %907, label %909, label %908

908:                                              ; preds = %906
  call void @_ZdlPv(i8* nonnull %881) #15
  br label %909

909:                                              ; preds = %863, %870, %906, %908
  %910 = phi i64* [ %864, %863 ], [ %873, %870 ], [ %876, %906 ], [ %876, %908 ]
  %911 = load i64, i64* %910, align 8
  %912 = load i64, i64* %186, align 8
  %913 = sub i64 %911, %912
  %914 = icmp ult i64 %913, %180
  br i1 %914, label %915, label %969

915:                                              ; preds = %909, %963
  %916 = phi i64 [ %966, %963 ], [ %912, %909 ]
  %917 = phi i64 [ %964, %963 ], [ %911, %909 ]
  %918 = phi i1 [ %965, %963 ], [ false, %909 ]
  %919 = inttoptr i64 %917 to i8*
  %920 = inttoptr i64 %916 to i8*
  %921 = select i1 %918, i8 17, i8 -20
  %922 = load i8*, i8** %184, align 8
  %923 = icmp ugt i8* %922, %919
  %924 = ptrtoint i8* %922 to i64
  br i1 %923, label %925, label %928

925:                                              ; preds = %915
  store i8 %921, i8* %919, align 1
  %926 = getelementptr inbounds i8, i8* %919, i64 1
  %927 = ptrtoint i8* %926 to i64
  store i64 %927, i64* %910, align 8
  br label %963

928:                                              ; preds = %915
  %929 = sub i64 %917, %916
  %930 = add i64 %929, 1
  %931 = icmp slt i64 %930, 0
  br i1 %931, label %932, label %934

932:                                              ; preds = %928
  %933 = bitcast %"class.std::__1::vector"* %14 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %933) #16
  unreachable

934:                                              ; preds = %928
  %935 = sub i64 %924, %916
  %936 = icmp ult i64 %935, 4611686018427387903
  br i1 %936, label %937, label %942

937:                                              ; preds = %934
  %938 = shl i64 %935, 1
  %939 = icmp ult i64 %938, %930
  %940 = select i1 %939, i64 %930, i64 %938
  %941 = icmp eq i64 %940, 0
  br i1 %941, label %945, label %942

942:                                              ; preds = %937, %934
  %943 = phi i64 [ %940, %937 ], [ 9223372036854775807, %934 ]
  %944 = call i8* @_Znwm(i64 %943) #15
  br label %945

945:                                              ; preds = %942, %937
  %946 = phi i64 [ %943, %942 ], [ 0, %937 ]
  %947 = phi i8* [ %944, %942 ], [ null, %937 ]
  %948 = getelementptr inbounds i8, i8* %947, i64 %929
  %949 = getelementptr inbounds i8, i8* %947, i64 %946
  %950 = ptrtoint i8* %949 to i64
  store i8 %921, i8* %948, align 1
  %951 = getelementptr inbounds i8, i8* %948, i64 1
  %952 = ptrtoint i8* %951 to i64
  %953 = sub i64 %917, %916
  %954 = sub i64 0, %953
  %955 = getelementptr inbounds i8, i8* %948, i64 %954
  %956 = ptrtoint i8* %955 to i64
  %957 = icmp sgt i64 %953, 0
  br i1 %957, label %958, label %959

958:                                              ; preds = %945
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %955, i8* align 1 %920, i64 %953, i1 false) #6
  br label %959

959:                                              ; preds = %958, %945
  store i64 %956, i64* %186, align 8
  store i64 %952, i64* %910, align 8
  store i64 %950, i64* %185, align 8
  %960 = icmp eq i64 %916, 0
  br i1 %960, label %963, label %961

961:                                              ; preds = %959
  call void @_ZdlPv(i8* nonnull %920) #15
  %962 = load i64, i64* %910, align 8
  br label %963

963:                                              ; preds = %925, %959, %961
  %964 = phi i64 [ %927, %925 ], [ %952, %959 ], [ %962, %961 ]
  %965 = xor i1 %918, true
  %966 = load i64, i64* %186, align 8
  %967 = sub i64 %964, %966
  %968 = icmp ult i64 %967, %180
  br i1 %968, label %915, label %969

969:                                              ; preds = %963, %909
  %970 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %137, align 8
  %971 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %970, i64 0, i32 3
  %972 = load i32, i32* %971, align 4
  %973 = icmp sgt i32 %972, 0
  br i1 %973, label %974, label %1008

974:                                              ; preds = %969, %974
  %975 = phi i32 [ %988, %974 ], [ %972, %969 ]
  %976 = phi i32 [ %985, %974 ], [ 0, %969 ]
  %977 = trunc i32 %976 to i8
  %978 = and i8 %977, 1
  %979 = xor i8 %978, 3
  %980 = mul nsw i32 %976, %975
  %981 = add nsw i32 %980, 6
  %982 = sext i32 %981 to i64
  %983 = load i8*, i8** %163, align 8
  %984 = getelementptr inbounds i8, i8* %983, i64 %982
  store i8 %979, i8* %984, align 1
  %985 = add nuw nsw i32 %976, 1
  %986 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %137, align 8
  %987 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %986, i64 0, i32 3
  %988 = load i32, i32* %987, align 4
  %989 = icmp slt i32 %985, %988
  br i1 %989, label %974, label %990

990:                                              ; preds = %974
  %991 = icmp sgt i32 %988, 0
  br i1 %991, label %992, label %1008

992:                                              ; preds = %990, %992
  %993 = phi i32 [ %1006, %992 ], [ %988, %990 ]
  %994 = phi i32 [ %1003, %992 ], [ 0, %990 ]
  %995 = trunc i32 %994 to i8
  %996 = and i8 %995, 1
  %997 = xor i8 %996, 3
  %998 = mul nsw i32 %993, 6
  %999 = add nsw i32 %998, %994
  %1000 = sext i32 %999 to i64
  %1001 = load i8*, i8** %163, align 8
  %1002 = getelementptr inbounds i8, i8* %1001, i64 %1000
  store i8 %997, i8* %1002, align 1
  %1003 = add nuw nsw i32 %994, 1
  %1004 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %137, align 8
  %1005 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1004, i64 0, i32 3
  %1006 = load i32, i32* %1005, align 4
  %1007 = icmp slt i32 %1003, %1006
  br i1 %1007, label %992, label %1008

1008:                                             ; preds = %992, %969, %990
  call void @_ZN15QRCodeGenerator9PutFinderEii(%class.QRCodeGenerator* %1, i32 3, i32 3)
  %1009 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %137, align 8
  %1010 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1009, i64 0, i32 3
  %1011 = load i32, i32* %1010, align 4
  %1012 = add nsw i32 %1011, -4
  call void @_ZN15QRCodeGenerator9PutFinderEii(%class.QRCodeGenerator* %1, i32 3, i32 %1012)
  %1013 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %137, align 8
  %1014 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1013, i64 0, i32 3
  %1015 = load i32, i32* %1014, align 4
  %1016 = add nsw i32 %1015, -4
  call void @_ZN15QRCodeGenerator9PutFinderEii(%class.QRCodeGenerator* %1, i32 %1016, i32 3)
  %1017 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %137, align 8
  %1018 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1017, i64 0, i32 10, i32 0, i64 0
  %1019 = load i32, i32* %1018, align 4
  %1020 = icmp eq i32 %1019, 0
  br i1 %1020, label %1035, label %1021

1021:                                             ; preds = %1008
  %1022 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1017, i64 0, i32 10, i32 0, i64 1
  %1023 = load i32, i32* %1022, align 4
  %1024 = icmp eq i32 %1023, 0
  br i1 %1024, label %1025, label %1644

1025:                                             ; preds = %1644, %1021
  %1026 = phi i64 [ 1, %1021 ], [ %1648, %1644 ]
  %1027 = add nsw i64 %1026, -1
  br label %1028

1028:                                             ; preds = %1025, %1040
  %1029 = phi i64 [ 0, %1025 ], [ %1041, %1040 ]
  %1030 = icmp eq i64 %1029, 0
  %1031 = icmp eq i64 %1029, %1027
  %1032 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1017, i64 0, i32 10, i32 0, i64 %1029
  br label %1043

1033:                                             ; preds = %1040
  %1034 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %137, align 8
  br label %1035

1035:                                             ; preds = %1008, %1033
  %1036 = phi %struct.QRVersionInfo* [ %1034, %1033 ], [ %1017, %1008 ]
  %1037 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1036, i64 0, i32 2
  %1038 = load i32, i32* %1037, align 8
  %1039 = icmp eq i32 %1038, 0
  br i1 %1039, label %1115, label %1113

1040:                                             ; preds = %1110
  %1041 = add nuw nsw i64 %1029, 1
  %1042 = icmp eq i64 %1041, %1026
  br i1 %1042, label %1033, label %1028

1043:                                             ; preds = %1110, %1028
  %1044 = phi i64 [ 0, %1028 ], [ %1111, %1110 ]
  %1045 = or i64 %1044, %1029
  %1046 = icmp eq i64 %1045, 0
  br i1 %1046, label %1110, label %1047

1047:                                             ; preds = %1043
  %1048 = icmp eq i64 %1044, 0
  %1049 = icmp eq i64 %1044, %1027
  %1050 = and i1 %1030, %1049
  %1051 = and i1 %1031, %1048
  %1052 = or i1 %1050, %1051
  br i1 %1052, label %1110, label %1053

1053:                                             ; preds = %1047
  %1054 = load i32, i32* %1032, align 4
  %1055 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1017, i64 0, i32 10, i32 0, i64 %1044
  %1056 = load i32, i32* %1055, align 4
  %1057 = add nsw i32 %1054, -2
  %1058 = add nsw i32 %1056, -2
  %1059 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %137, align 8
  %1060 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1059, i64 0, i32 3
  %1061 = load i32, i32* %1060, align 4
  %1062 = mul nsw i32 %1061, %1058
  %1063 = add nsw i32 %1062, %1057
  %1064 = sext i32 %1063 to i64
  %1065 = load i8*, i8** %163, align 8
  %1066 = getelementptr inbounds i8, i8* %1065, i64 %1064
  call void @llvm.memset.p0i8.i64(i8* align 1 %1066, i8 3, i64 5, i1 false) #6
  %1067 = add nsw i32 %1056, 2
  %1068 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %137, align 8
  %1069 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1068, i64 0, i32 3
  %1070 = load i32, i32* %1069, align 4
  %1071 = mul nsw i32 %1070, %1067
  %1072 = add nsw i32 %1071, %1057
  %1073 = sext i32 %1072 to i64
  %1074 = load i8*, i8** %163, align 8
  %1075 = getelementptr inbounds i8, i8* %1074, i64 %1073
  call void @llvm.memset.p0i8.i64(i8* align 1 %1075, i8 3, i64 5, i1 false) #6
  %1076 = add nsw i32 %1056, -1
  %1077 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %137, align 8
  %1078 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1077, i64 0, i32 3
  %1079 = load i32, i32* %1078, align 4
  %1080 = mul nsw i32 %1079, %1076
  %1081 = add nsw i32 %1080, %1057
  %1082 = sext i32 %1081 to i64
  %1083 = load i8*, i8** %163, align 8
  %1084 = getelementptr inbounds i8, i8* %1083, i64 %1082
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1084, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @_ZZN15QRCodeGenerator12PutAlignmentEiiE5kLine, i64 0, i64 0), i64 5, i1 false) #6
  %1085 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %137, align 8
  %1086 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1085, i64 0, i32 3
  %1087 = load i32, i32* %1086, align 4
  %1088 = mul nsw i32 %1087, %1056
  %1089 = add nsw i32 %1088, %1057
  %1090 = sext i32 %1089 to i64
  %1091 = load i8*, i8** %163, align 8
  %1092 = getelementptr inbounds i8, i8* %1091, i64 %1090
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1092, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @_ZZN15QRCodeGenerator12PutAlignmentEiiE5kLine, i64 0, i64 0), i64 5, i1 false) #6
  %1093 = add nsw i32 %1056, 1
  %1094 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %137, align 8
  %1095 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1094, i64 0, i32 3
  %1096 = load i32, i32* %1095, align 4
  %1097 = mul nsw i32 %1096, %1093
  %1098 = add nsw i32 %1097, %1057
  %1099 = sext i32 %1098 to i64
  %1100 = load i8*, i8** %163, align 8
  %1101 = getelementptr inbounds i8, i8* %1100, i64 %1099
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1101, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @_ZZN15QRCodeGenerator12PutAlignmentEiiE5kLine, i64 0, i64 0), i64 5, i1 false) #6
  %1102 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %137, align 8
  %1103 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1102, i64 0, i32 3
  %1104 = load i32, i32* %1103, align 4
  %1105 = mul nsw i32 %1104, %1056
  %1106 = add nsw i32 %1105, %1054
  %1107 = sext i32 %1106 to i64
  %1108 = load i8*, i8** %163, align 8
  %1109 = getelementptr inbounds i8, i8* %1108, i64 %1107
  store i8 3, i8* %1109, align 1
  br label %1110

1110:                                             ; preds = %1047, %1043, %1053
  %1111 = add nuw nsw i64 %1044, 1
  %1112 = icmp eq i64 %1111, %1026
  br i1 %1112, label %1040, label %1043

1113:                                             ; preds = %1035
  call void @_ZN15QRCodeGenerator16PutVersionBlocksEj(%class.QRCodeGenerator* %1, i32 %1038)
  %1114 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %137, align 8
  br label %1115

1115:                                             ; preds = %1035, %1113
  %1116 = phi %struct.QRVersionInfo* [ %1036, %1035 ], [ %1114, %1113 ]
  %1117 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1116, i64 0, i32 5
  %1118 = load i64, i64* %1117, align 8
  %1119 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1116, i64 0, i32 4
  %1120 = load i64, i64* %1119, align 8
  %1121 = udiv i64 %1120, %1118
  %1122 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1116, i64 0, i32 6
  %1123 = load i64, i64* %1122, align 8
  %1124 = sub i64 %1121, %1123
  %1125 = bitcast %"class.std::__1::vector.16"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1125) #6
  %1126 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %15, i64 0, i32 0, i32 0
  %1127 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %15, i64 0, i32 0, i32 1
  %1128 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %15, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1125, i8 0, i64 24, i1 false) #6
  %1129 = icmp eq i64 %1118, 0
  br i1 %1129, label %1152, label %1130

1130:                                             ; preds = %1115
  %1131 = icmp ugt i64 %1118, 768614336404564650
  br i1 %1131, label %1132, label %1134

1132:                                             ; preds = %1130
  %1133 = bitcast %"class.std::__1::vector.16"* %15 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1133) #16
  unreachable

1134:                                             ; preds = %1130
  %1135 = mul i64 %1118, 24
  %1136 = call i8* @_Znwm(i64 %1135) #15
  %1137 = bitcast i8* %1136 to %"class.std::__1::vector"*
  %1138 = bitcast %"class.std::__1::vector.16"* %15 to i8**
  store i8* %1136, i8** %1138, align 8
  %1139 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1137, i64 %1118
  store %"class.std::__1::vector"* %1139, %"class.std::__1::vector"** %1128, align 8
  %1140 = bitcast %"class.std::__1::vector"** %1127 to i64*
  %1141 = ptrtoint i8* %1136 to i64
  %1142 = add nsw i64 %1118, -1
  %1143 = getelementptr %"class.std::__1::vector", %"class.std::__1::vector"* %1137, i64 %1142, i32 0, i32 0
  %1144 = ptrtoint i8** %1143 to i64
  %1145 = sub i64 %1144, %1141
  %1146 = urem i64 %1145, 24
  %1147 = add i64 %1145, 24
  %1148 = sub i64 %1147, %1146
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1136, i8 0, i64 %1148, i1 false) #6
  %1149 = ptrtoint %"class.std::__1::vector"* %1139 to i64
  store i64 %1149, i64* %1140, align 8
  br label %1175

1150:                                             ; preds = %1193
  %1151 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %137, align 8
  br label %1152

1152:                                             ; preds = %1115, %1150
  %1153 = phi %struct.QRVersionInfo* [ %1151, %1150 ], [ %1116, %1115 ]
  %1154 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1153, i64 0, i32 6
  %1155 = load i64, i64* %1154, align 8
  %1156 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1153, i64 0, i32 5
  %1157 = load i64, i64* %1156, align 8
  %1158 = mul i64 %1157, %1155
  %1159 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1153, i64 0, i32 8
  %1160 = load i64, i64* %1159, align 8
  %1161 = icmp eq i64 %1160, 0
  br i1 %1161, label %1166, label %1162

1162:                                             ; preds = %1152
  %1163 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1153, i64 0, i32 7
  %1164 = load i64, i64* %1163, align 8
  %1165 = udiv i64 %1164, %1160
  br label %1166

1166:                                             ; preds = %1152, %1162
  %1167 = phi i64 [ %1165, %1162 ], [ 0, %1152 ]
  %1168 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1153, i64 0, i32 9
  %1169 = load i64, i64* %1168, align 8
  %1170 = sub i64 %1167, %1169
  %1171 = bitcast %"class.std::__1::vector.16"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1171) #6
  %1172 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %16, i64 0, i32 0, i32 0
  %1173 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %16, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1171, i8 0, i64 24, i1 false) #6
  %1174 = icmp ne i64 %1160, 0
  br i1 %1174, label %1210, label %1245

1175:                                             ; preds = %1208, %1134
  %1176 = phi %"class.std::__1::vector"* [ %1209, %1208 ], [ %1137, %1134 ]
  %1177 = phi i64 [ %1206, %1208 ], [ 0, %1134 ]
  %1178 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1176, i64 %1177
  %1179 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1176, i64 %1177, i32 0, i32 1
  %1180 = bitcast i8** %1179 to i64*
  %1181 = load i64, i64* %1180, align 8
  %1182 = bitcast %"class.std::__1::vector"* %1178 to i64*
  %1183 = load i64, i64* %1182, align 8
  %1184 = sub i64 %1181, %1183
  %1185 = icmp ugt i64 %1121, %1184
  %1186 = inttoptr i64 %1183 to i8*
  br i1 %1185, label %1187, label %1189

1187:                                             ; preds = %1175
  %1188 = sub i64 %1121, %1184
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %1178, i64 %1188) #6
  br label %1193

1189:                                             ; preds = %1175
  %1190 = icmp ult i64 %1121, %1184
  br i1 %1190, label %1191, label %1193

1191:                                             ; preds = %1189
  %1192 = getelementptr inbounds i8, i8* %1186, i64 %1121
  store i8* %1192, i8** %1179, align 8
  br label %1193

1193:                                             ; preds = %1187, %1189, %1191
  %1194 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %1126, align 8
  %1195 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1194, i64 %1177
  %1196 = bitcast %"class.std::__1::vector"* %1195 to i64*
  %1197 = load i64, i64* %1196, align 8
  %1198 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1194, i64 %1177, i32 0, i32 1
  %1199 = bitcast i8** %1198 to i64*
  %1200 = load i64, i64* %1199, align 8
  %1201 = sub i64 %1200, %1197
  %1202 = mul i64 %1177, %1123
  %1203 = load i8*, i8** %182, align 8
  %1204 = getelementptr inbounds i8, i8* %1203, i64 %1202
  %1205 = inttoptr i64 %1197 to i8*
  call void @_ZN15QRCodeGenerator18AddErrorCorrectionEN4base4spanIhLm18446744073709551615EEENS1_IKhLm18446744073709551615EEEmm(%class.QRCodeGenerator* undef, i64 %1201, i8* %1205, i64 %1123, i8* %1204, i64 %1121, i64 %1124)
  %1206 = add nuw i64 %1177, 1
  %1207 = icmp eq i64 %1206, %1118
  br i1 %1207, label %1150, label %1208

1208:                                             ; preds = %1193
  %1209 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %1126, align 8
  br label %1175

1210:                                             ; preds = %1166
  call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector.16"* nonnull %16, i64 %1160) #6
  br label %1211

1211:                                             ; preds = %1229, %1210
  %1212 = phi i64 [ %1243, %1229 ], [ 0, %1210 ]
  %1213 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %1172, align 8
  %1214 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1213, i64 %1212
  %1215 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1213, i64 %1212, i32 0, i32 1
  %1216 = bitcast i8** %1215 to i64*
  %1217 = load i64, i64* %1216, align 8
  %1218 = bitcast %"class.std::__1::vector"* %1214 to i64*
  %1219 = load i64, i64* %1218, align 8
  %1220 = sub i64 %1217, %1219
  %1221 = icmp ugt i64 %1167, %1220
  %1222 = inttoptr i64 %1219 to i8*
  br i1 %1221, label %1223, label %1225

1223:                                             ; preds = %1211
  %1224 = sub i64 %1167, %1220
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %1214, i64 %1224) #6
  br label %1229

1225:                                             ; preds = %1211
  %1226 = icmp ult i64 %1167, %1220
  br i1 %1226, label %1227, label %1229

1227:                                             ; preds = %1225
  %1228 = getelementptr inbounds i8, i8* %1222, i64 %1167
  store i8* %1228, i8** %1215, align 8
  br label %1229

1229:                                             ; preds = %1223, %1225, %1227
  %1230 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %1172, align 8
  %1231 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1230, i64 %1212
  %1232 = bitcast %"class.std::__1::vector"* %1231 to i64*
  %1233 = load i64, i64* %1232, align 8
  %1234 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1230, i64 %1212, i32 0, i32 1
  %1235 = bitcast i8** %1234 to i64*
  %1236 = load i64, i64* %1235, align 8
  %1237 = sub i64 %1236, %1233
  %1238 = mul i64 %1212, %1169
  %1239 = add i64 %1238, %1158
  %1240 = load i8*, i8** %182, align 8
  %1241 = getelementptr inbounds i8, i8* %1240, i64 %1239
  %1242 = inttoptr i64 %1233 to i8*
  call void @_ZN15QRCodeGenerator18AddErrorCorrectionEN4base4spanIhLm18446744073709551615EEENS1_IKhLm18446744073709551615EEEmm(%class.QRCodeGenerator* undef, i64 %1237, i8* %1242, i64 %1169, i8* %1241, i64 %1167, i64 %1170)
  %1243 = add nuw i64 %1212, 1
  %1244 = icmp eq i64 %1243, %1160
  br i1 %1244, label %1245, label %1211

1245:                                             ; preds = %1229, %1166
  %1246 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %137, align 8
  %1247 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1246, i64 0, i32 4
  %1248 = load i64, i64* %1247, align 8
  %1249 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1246, i64 0, i32 7
  %1250 = load i64, i64* %1249, align 8
  %1251 = add i64 %1250, %1248
  %1252 = call i8* @llvm.stacksave()
  %1253 = alloca i8, i64 %1251, align 16
  %1254 = icmp eq i64 %1251, 0
  br i1 %1254, label %1256, label %1255

1255:                                             ; preds = %1245
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1253, i8 -86, i64 %1251, i1 false)
  br label %1256

1256:                                             ; preds = %1255, %1245
  %1257 = mul i64 %1121, %1118
  %1258 = mul i64 %1167, %1160
  %1259 = add i64 %1258, %1257
  %1260 = icmp eq i64 %1251, %1259
  br i1 %1260, label %1265, label %1261

1261:                                             ; preds = %1256
  %1262 = bitcast %"class.logging::CheckError"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1262) #6
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %17, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str, i64 0, i64 0), i32 593, i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.2, i64 0, i64 0)) #6
  %1263 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %17) #6
  %1264 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %1263, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0), i64 14) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %17) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1262) #6
  br label %1265

1265:                                             ; preds = %1256, %1261
  %1266 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %137, align 8
  %1267 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1266, i64 0, i32 6
  %1268 = load i64, i64* %1267, align 8
  %1269 = icmp eq i64 %1268, 0
  br i1 %1269, label %1355, label %1270

1270:                                             ; preds = %1265
  %1271 = and i64 %1118, 1
  %1272 = icmp eq i64 %1118, 1
  %1273 = sub i64 %1118, %1271
  %1274 = icmp eq i64 %1271, 0
  %1275 = and i64 %1160, 1
  %1276 = icmp eq i64 %1160, 1
  %1277 = sub i64 %1160, %1275
  %1278 = icmp eq i64 %1275, 0
  br label %1279

1279:                                             ; preds = %1270, %1330
  %1280 = phi i64 [ %1332, %1330 ], [ 0, %1270 ]
  %1281 = phi i64 [ %1331, %1330 ], [ 0, %1270 ]
  br i1 %1129, label %1295, label %1282

1282:                                             ; preds = %1279
  %1283 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %1126, align 8
  br i1 %1272, label %1284, label %1299

1284:                                             ; preds = %1299, %1282
  %1285 = phi i64 [ undef, %1282 ], [ %1314, %1299 ]
  %1286 = phi i64 [ 0, %1282 ], [ %1316, %1299 ]
  %1287 = phi i64 [ %1281, %1282 ], [ %1314, %1299 ]
  br i1 %1274, label %1295, label %1288

1288:                                             ; preds = %1284
  %1289 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1283, i64 %1286, i32 0, i32 0
  %1290 = load i8*, i8** %1289, align 8
  %1291 = getelementptr inbounds i8, i8* %1290, i64 %1280
  %1292 = load i8, i8* %1291, align 1
  %1293 = getelementptr inbounds i8, i8* %1253, i64 %1287
  store i8 %1292, i8* %1293, align 1
  %1294 = add i64 %1287, 1
  br label %1295

1295:                                             ; preds = %1288, %1284, %1279
  %1296 = phi i64 [ %1281, %1279 ], [ %1285, %1284 ], [ %1294, %1288 ]
  br i1 %1161, label %1330, label %1297

1297:                                             ; preds = %1295
  %1298 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %1172, align 8
  br i1 %1276, label %1319, label %1335

1299:                                             ; preds = %1282, %1299
  %1300 = phi i64 [ %1316, %1299 ], [ 0, %1282 ]
  %1301 = phi i64 [ %1314, %1299 ], [ %1281, %1282 ]
  %1302 = phi i64 [ %1317, %1299 ], [ %1273, %1282 ]
  %1303 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1283, i64 %1300, i32 0, i32 0
  %1304 = load i8*, i8** %1303, align 8
  %1305 = getelementptr inbounds i8, i8* %1304, i64 %1280
  %1306 = load i8, i8* %1305, align 1
  %1307 = add i64 %1301, 1
  %1308 = getelementptr inbounds i8, i8* %1253, i64 %1301
  store i8 %1306, i8* %1308, align 1
  %1309 = or i64 %1300, 1
  %1310 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1283, i64 %1309, i32 0, i32 0
  %1311 = load i8*, i8** %1310, align 8
  %1312 = getelementptr inbounds i8, i8* %1311, i64 %1280
  %1313 = load i8, i8* %1312, align 1
  %1314 = add i64 %1301, 2
  %1315 = getelementptr inbounds i8, i8* %1253, i64 %1307
  store i8 %1313, i8* %1315, align 1
  %1316 = add nuw i64 %1300, 2
  %1317 = add i64 %1302, -2
  %1318 = icmp eq i64 %1317, 0
  br i1 %1318, label %1284, label %1299

1319:                                             ; preds = %1335, %1297
  %1320 = phi i64 [ undef, %1297 ], [ %1350, %1335 ]
  %1321 = phi i64 [ 0, %1297 ], [ %1352, %1335 ]
  %1322 = phi i64 [ %1296, %1297 ], [ %1350, %1335 ]
  br i1 %1278, label %1330, label %1323

1323:                                             ; preds = %1319
  %1324 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1298, i64 %1321, i32 0, i32 0
  %1325 = load i8*, i8** %1324, align 8
  %1326 = getelementptr inbounds i8, i8* %1325, i64 %1280
  %1327 = load i8, i8* %1326, align 1
  %1328 = getelementptr inbounds i8, i8* %1253, i64 %1322
  store i8 %1327, i8* %1328, align 1
  %1329 = add i64 %1322, 1
  br label %1330

1330:                                             ; preds = %1323, %1319, %1295
  %1331 = phi i64 [ %1296, %1295 ], [ %1320, %1319 ], [ %1329, %1323 ]
  %1332 = add nuw i64 %1280, 1
  %1333 = load i64, i64* %1267, align 8
  %1334 = icmp ult i64 %1332, %1333
  br i1 %1334, label %1279, label %1355

1335:                                             ; preds = %1297, %1335
  %1336 = phi i64 [ %1352, %1335 ], [ 0, %1297 ]
  %1337 = phi i64 [ %1350, %1335 ], [ %1296, %1297 ]
  %1338 = phi i64 [ %1353, %1335 ], [ %1277, %1297 ]
  %1339 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1298, i64 %1336, i32 0, i32 0
  %1340 = load i8*, i8** %1339, align 8
  %1341 = getelementptr inbounds i8, i8* %1340, i64 %1280
  %1342 = load i8, i8* %1341, align 1
  %1343 = add i64 %1337, 1
  %1344 = getelementptr inbounds i8, i8* %1253, i64 %1337
  store i8 %1342, i8* %1344, align 1
  %1345 = or i64 %1336, 1
  %1346 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1298, i64 %1345, i32 0, i32 0
  %1347 = load i8*, i8** %1346, align 8
  %1348 = getelementptr inbounds i8, i8* %1347, i64 %1280
  %1349 = load i8, i8* %1348, align 1
  %1350 = add i64 %1337, 2
  %1351 = getelementptr inbounds i8, i8* %1253, i64 %1343
  store i8 %1349, i8* %1351, align 1
  %1352 = add nuw i64 %1336, 2
  %1353 = add i64 %1338, -2
  %1354 = icmp eq i64 %1353, 0
  br i1 %1354, label %1319, label %1335

1355:                                             ; preds = %1330, %1265
  %1356 = phi i64 [ 0, %1265 ], [ %1333, %1330 ]
  %1357 = phi i64 [ 0, %1265 ], [ %1331, %1330 ]
  %1358 = phi i64 [ 0, %1265 ], [ %1332, %1330 ]
  br i1 %1174, label %1359, label %1410

1359:                                             ; preds = %1355
  %1360 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1266, i64 0, i32 9
  %1361 = load i64, i64* %1360, align 8
  %1362 = icmp ult i64 %1358, %1361
  br i1 %1362, label %1363, label %1410

1363:                                             ; preds = %1359
  %1364 = and i64 %1160, 1
  %1365 = icmp eq i64 %1160, 1
  %1366 = sub i64 %1160, %1364
  %1367 = icmp eq i64 %1364, 0
  br label %1368

1368:                                             ; preds = %1363, %1383
  %1369 = phi i64 [ %1386, %1383 ], [ %1358, %1363 ]
  %1370 = phi i64 [ %1384, %1383 ], [ %1357, %1363 ]
  %1371 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %1172, align 8
  br i1 %1365, label %1372, label %1388

1372:                                             ; preds = %1388, %1368
  %1373 = phi i64 [ undef, %1368 ], [ %1403, %1388 ]
  %1374 = phi i64 [ 0, %1368 ], [ %1405, %1388 ]
  %1375 = phi i64 [ %1370, %1368 ], [ %1403, %1388 ]
  br i1 %1367, label %1383, label %1376

1376:                                             ; preds = %1372
  %1377 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1371, i64 %1374, i32 0, i32 0
  %1378 = load i8*, i8** %1377, align 8
  %1379 = getelementptr inbounds i8, i8* %1378, i64 %1369
  %1380 = load i8, i8* %1379, align 1
  %1381 = getelementptr inbounds i8, i8* %1253, i64 %1375
  store i8 %1380, i8* %1381, align 1
  %1382 = add i64 %1375, 1
  br label %1383

1383:                                             ; preds = %1372, %1376
  %1384 = phi i64 [ %1373, %1372 ], [ %1382, %1376 ]
  %1385 = load i64, i64* %1360, align 8
  %1386 = add nuw i64 %1369, 1
  %1387 = icmp ult i64 %1386, %1385
  br i1 %1387, label %1368, label %1408

1388:                                             ; preds = %1368, %1388
  %1389 = phi i64 [ %1405, %1388 ], [ 0, %1368 ]
  %1390 = phi i64 [ %1403, %1388 ], [ %1370, %1368 ]
  %1391 = phi i64 [ %1406, %1388 ], [ %1366, %1368 ]
  %1392 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1371, i64 %1389, i32 0, i32 0
  %1393 = load i8*, i8** %1392, align 8
  %1394 = getelementptr inbounds i8, i8* %1393, i64 %1369
  %1395 = load i8, i8* %1394, align 1
  %1396 = add i64 %1390, 1
  %1397 = getelementptr inbounds i8, i8* %1253, i64 %1390
  store i8 %1395, i8* %1397, align 1
  %1398 = or i64 %1389, 1
  %1399 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1371, i64 %1398, i32 0, i32 0
  %1400 = load i8*, i8** %1399, align 8
  %1401 = getelementptr inbounds i8, i8* %1400, i64 %1369
  %1402 = load i8, i8* %1401, align 1
  %1403 = add i64 %1390, 2
  %1404 = getelementptr inbounds i8, i8* %1253, i64 %1396
  store i8 %1402, i8* %1404, align 1
  %1405 = add nuw i64 %1389, 2
  %1406 = add i64 %1391, -2
  %1407 = icmp eq i64 %1406, 0
  br i1 %1407, label %1372, label %1388

1408:                                             ; preds = %1383
  %1409 = load i64, i64* %1267, align 8
  br label %1410

1410:                                             ; preds = %1408, %1359, %1355
  %1411 = phi i64 [ %1356, %1355 ], [ %1356, %1359 ], [ %1409, %1408 ]
  %1412 = phi i64 [ %1357, %1355 ], [ %1357, %1359 ], [ %1384, %1408 ]
  %1413 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1266, i64 0, i32 4
  %1414 = load i64, i64* %1413, align 8
  %1415 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1266, i64 0, i32 5
  %1416 = load i64, i64* %1415, align 8
  %1417 = udiv i64 %1414, %1416
  %1418 = icmp eq i64 %1417, %1411
  br i1 %1418, label %1443, label %1419

1419:                                             ; preds = %1410
  %1420 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1266, i64 0, i32 9
  %1421 = add i64 %1118, -1
  %1422 = and i64 %1421, 1
  %1423 = icmp eq i64 %1118, 2
  %1424 = sub i64 %1421, %1422
  %1425 = icmp eq i64 %1422, 0
  %1426 = and i64 %1160, 1
  %1427 = icmp eq i64 %1160, 1
  %1428 = sub i64 %1160, %1426
  %1429 = icmp eq i64 %1426, 0
  br label %1430

1430:                                             ; preds = %1419, %1504
  %1431 = phi i64 [ %1411, %1419 ], [ %1510, %1504 ]
  %1432 = phi i64 [ 0, %1419 ], [ %1506, %1504 ]
  %1433 = phi i64 [ %1412, %1419 ], [ %1505, %1504 ]
  br i1 %1129, label %1463, label %1434

1434:                                             ; preds = %1430
  %1435 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %1126, align 8
  %1436 = add i64 %1431, %1432
  %1437 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1435, i64 0, i32 0, i32 0
  %1438 = load i8*, i8** %1437, align 8
  %1439 = getelementptr inbounds i8, i8* %1438, i64 %1436
  %1440 = load i8, i8* %1439, align 1
  %1441 = add i64 %1433, 1
  %1442 = getelementptr inbounds i8, i8* %1253, i64 %1433
  store i8 %1440, i8* %1442, align 1
  switch i64 %1118, label %1466 [
    i64 1, label %1463
    i64 2, label %1450
  ]

1443:                                             ; preds = %1504, %1410
  %1444 = icmp eq i8 %18, 0
  %1445 = select i1 %1444, i8 0, i8 %20
  %1446 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1266, i64 0, i32 1
  %1447 = load i32, i32* %1446, align 4
  %1448 = icmp eq i32 %1447, 0
  %1449 = select i1 %1448, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @_ZZN12_GLOBAL__N_123FormatInformationForECCEN13QRVersionInfo3ECCEE18kFormatInformation, i64 0, i64 0), i16* getelementptr inbounds ([16 x i16], [16 x i16]* @_ZZN12_GLOBAL__N_123FormatInformationForECCEN13QRVersionInfo3ECCEE18kFormatInformation, i64 0, i64 8)
  br i1 %21, label %1539, label %1617

1450:                                             ; preds = %1466, %1434
  %1451 = phi i64 [ undef, %1434 ], [ %1485, %1466 ]
  %1452 = phi i64 [ 1, %1434 ], [ %1487, %1466 ]
  %1453 = phi i64 [ %1441, %1434 ], [ %1485, %1466 ]
  br i1 %1425, label %1463, label %1454

1454:                                             ; preds = %1450
  %1455 = load i64, i64* %1267, align 8
  %1456 = add i64 %1455, %1432
  %1457 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1435, i64 %1452, i32 0, i32 0
  %1458 = load i8*, i8** %1457, align 8
  %1459 = getelementptr inbounds i8, i8* %1458, i64 %1456
  %1460 = load i8, i8* %1459, align 1
  %1461 = getelementptr inbounds i8, i8* %1253, i64 %1453
  store i8 %1460, i8* %1461, align 1
  %1462 = add i64 %1453, 1
  br label %1463

1463:                                             ; preds = %1454, %1450, %1434, %1430
  %1464 = phi i64 [ %1433, %1430 ], [ %1441, %1434 ], [ %1451, %1450 ], [ %1462, %1454 ]
  br i1 %1161, label %1504, label %1465

1465:                                             ; preds = %1463
  br i1 %1427, label %1490, label %1513

1466:                                             ; preds = %1434, %1466
  %1467 = phi i64 [ %1487, %1466 ], [ 1, %1434 ]
  %1468 = phi i64 [ %1485, %1466 ], [ %1441, %1434 ]
  %1469 = phi i64 [ %1488, %1466 ], [ %1424, %1434 ]
  %1470 = load i64, i64* %1267, align 8
  %1471 = add i64 %1470, %1432
  %1472 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1435, i64 %1467, i32 0, i32 0
  %1473 = load i8*, i8** %1472, align 8
  %1474 = getelementptr inbounds i8, i8* %1473, i64 %1471
  %1475 = load i8, i8* %1474, align 1
  %1476 = add i64 %1468, 1
  %1477 = getelementptr inbounds i8, i8* %1253, i64 %1468
  store i8 %1475, i8* %1477, align 1
  %1478 = add nuw i64 %1467, 1
  %1479 = load i64, i64* %1267, align 8
  %1480 = add i64 %1479, %1432
  %1481 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1435, i64 %1478, i32 0, i32 0
  %1482 = load i8*, i8** %1481, align 8
  %1483 = getelementptr inbounds i8, i8* %1482, i64 %1480
  %1484 = load i8, i8* %1483, align 1
  %1485 = add i64 %1468, 2
  %1486 = getelementptr inbounds i8, i8* %1253, i64 %1476
  store i8 %1484, i8* %1486, align 1
  %1487 = add nuw i64 %1467, 2
  %1488 = add i64 %1469, -2
  %1489 = icmp eq i64 %1488, 0
  br i1 %1489, label %1450, label %1466

1490:                                             ; preds = %1513, %1465
  %1491 = phi i64 [ undef, %1465 ], [ %1534, %1513 ]
  %1492 = phi i64 [ 0, %1465 ], [ %1536, %1513 ]
  %1493 = phi i64 [ %1464, %1465 ], [ %1534, %1513 ]
  br i1 %1429, label %1504, label %1494

1494:                                             ; preds = %1490
  %1495 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %1172, align 8
  %1496 = load i64, i64* %1420, align 8
  %1497 = add i64 %1496, %1432
  %1498 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1495, i64 %1492, i32 0, i32 0
  %1499 = load i8*, i8** %1498, align 8
  %1500 = getelementptr inbounds i8, i8* %1499, i64 %1497
  %1501 = load i8, i8* %1500, align 1
  %1502 = getelementptr inbounds i8, i8* %1253, i64 %1493
  store i8 %1501, i8* %1502, align 1
  %1503 = add i64 %1493, 1
  br label %1504

1504:                                             ; preds = %1494, %1490, %1463
  %1505 = phi i64 [ %1464, %1463 ], [ %1491, %1490 ], [ %1503, %1494 ]
  %1506 = add nuw i64 %1432, 1
  %1507 = load i64, i64* %1413, align 8
  %1508 = load i64, i64* %1415, align 8
  %1509 = udiv i64 %1507, %1508
  %1510 = load i64, i64* %1267, align 8
  %1511 = sub i64 %1509, %1510
  %1512 = icmp ult i64 %1506, %1511
  br i1 %1512, label %1430, label %1443

1513:                                             ; preds = %1465, %1513
  %1514 = phi i64 [ %1536, %1513 ], [ 0, %1465 ]
  %1515 = phi i64 [ %1534, %1513 ], [ %1464, %1465 ]
  %1516 = phi i64 [ %1537, %1513 ], [ %1428, %1465 ]
  %1517 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %1172, align 8
  %1518 = load i64, i64* %1420, align 8
  %1519 = add i64 %1518, %1432
  %1520 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1517, i64 %1514, i32 0, i32 0
  %1521 = load i8*, i8** %1520, align 8
  %1522 = getelementptr inbounds i8, i8* %1521, i64 %1519
  %1523 = load i8, i8* %1522, align 1
  %1524 = add i64 %1515, 1
  %1525 = getelementptr inbounds i8, i8* %1253, i64 %1515
  store i8 %1523, i8* %1525, align 1
  %1526 = or i64 %1514, 1
  %1527 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %1172, align 8
  %1528 = load i64, i64* %1420, align 8
  %1529 = add i64 %1528, %1432
  %1530 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1527, i64 %1526, i32 0, i32 0
  %1531 = load i8*, i8** %1530, align 8
  %1532 = getelementptr inbounds i8, i8* %1531, i64 %1529
  %1533 = load i8, i8* %1532, align 1
  %1534 = add i64 %1515, 2
  %1535 = getelementptr inbounds i8, i8* %1253, i64 %1524
  store i8 %1533, i8* %1535, align 1
  %1536 = add nuw i64 %1514, 2
  %1537 = add i64 %1516, -2
  %1538 = icmp eq i64 %1537, 0
  br i1 %1538, label %1490, label %1513

1539:                                             ; preds = %1617, %1443
  %1540 = phi i8 [ %1445, %1443 ], [ %1634, %1617 ]
  %1541 = phi i16* [ %1449, %1443 ], [ %1642, %1617 ]
  %1542 = zext i8 %1540 to i64
  %1543 = icmp ult i8 %1540, 8
  br i1 %1543, label %1547, label %1544

1544:                                             ; preds = %1539
  %1545 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1545) #6
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0), i32 418, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i64 0, i64 0)) #6
  %1546 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1545) #6
  br label %1547

1547:                                             ; preds = %1539, %1544
  %1548 = getelementptr inbounds i16, i16* %1541, i64 %1542
  %1549 = load i16, i16* %1548, align 2
  call void @_ZN15QRCodeGenerator13PutFormatBitsEt(%class.QRCodeGenerator* %1, i16 zeroext %1549)
  %1550 = getelementptr inbounds [8 x i8 (i32, i32)*], [8 x i8 (i32, i32)*]* @_ZN12_GLOBAL__N_114kMaskFunctionsE, i64 0, i64 %1542
  %1551 = load i8 (i32, i32)*, i8 (i32, i32)** %1550, align 8
  call void @_ZN15QRCodeGenerator7PutBitsEPKhmPFhiiE(%class.QRCodeGenerator* %1, i8* nonnull %1253, i64 %1251, i8 (i32, i32)* %1551)
  %1552 = bitcast i8** %163 to i64*
  %1553 = load i64, i64* %1552, align 8
  %1554 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %137, align 8
  %1555 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1554, i64 0, i32 3
  %1556 = load i32, i32* %1555, align 4
  %1557 = mul nsw i32 %1556, %1556
  %1558 = zext i32 %1557 to i64
  %1559 = getelementptr inbounds %"class.absl::optional.7", %"class.absl::optional.7"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %1559, align 8
  %1560 = getelementptr inbounds %"class.absl::optional.7", %"class.absl::optional.7"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0
  store i64 %1558, i64* %1560, align 8
  %1561 = getelementptr inbounds %"class.absl::optional.7", %"class.absl::optional.7"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 1
  %1562 = bitcast i8** %1561 to i64*
  store i64 %1553, i64* %1562, align 8
  %1563 = getelementptr inbounds %"class.absl::optional.7", %"class.absl::optional.7"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1
  store i32 %1556, i32* %1563, align 8
  call void @llvm.stackrestore(i8* %1252)
  %1564 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %1172, align 8
  %1565 = icmp eq %"class.std::__1::vector"* %1564, null
  br i1 %1565, label %1587, label %1566

1566:                                             ; preds = %1547
  %1567 = bitcast %"class.std::__1::vector"* %1564 to i8*
  %1568 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %1173, align 8
  %1569 = icmp eq %"class.std::__1::vector"* %1568, %1564
  br i1 %1569, label %1585, label %1570

1570:                                             ; preds = %1566, %1580
  %1571 = phi %"class.std::__1::vector"* [ %1572, %1580 ], [ %1568, %1566 ]
  %1572 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1571, i64 -1
  %1573 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1572, i64 0, i32 0, i32 0
  %1574 = load i8*, i8** %1573, align 8
  %1575 = icmp eq i8* %1574, null
  br i1 %1575, label %1580, label %1576

1576:                                             ; preds = %1570
  %1577 = ptrtoint i8* %1574 to i64
  %1578 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1571, i64 -1, i32 0, i32 1
  %1579 = bitcast i8** %1578 to i64*
  store i64 %1577, i64* %1579, align 8
  call void @_ZdlPv(i8* nonnull %1574) #15
  br label %1580

1580:                                             ; preds = %1576, %1570
  %1581 = icmp eq %"class.std::__1::vector"* %1572, %1564
  br i1 %1581, label %1582, label %1570

1582:                                             ; preds = %1580
  %1583 = bitcast %"class.std::__1::vector.16"* %16 to i8**
  %1584 = load i8*, i8** %1583, align 8
  br label %1585

1585:                                             ; preds = %1582, %1566
  %1586 = phi i8* [ %1584, %1582 ], [ %1567, %1566 ]
  store %"class.std::__1::vector"* %1564, %"class.std::__1::vector"** %1173, align 8
  call void @_ZdlPv(i8* %1586) #15
  br label %1587

1587:                                             ; preds = %1547, %1585
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1171) #6
  %1588 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %1126, align 8
  %1589 = icmp eq %"class.std::__1::vector"* %1588, null
  br i1 %1589, label %1611, label %1590

1590:                                             ; preds = %1587
  %1591 = bitcast %"class.std::__1::vector"* %1588 to i8*
  %1592 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %1127, align 8
  %1593 = icmp eq %"class.std::__1::vector"* %1592, %1588
  br i1 %1593, label %1609, label %1594

1594:                                             ; preds = %1590, %1604
  %1595 = phi %"class.std::__1::vector"* [ %1596, %1604 ], [ %1592, %1590 ]
  %1596 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1595, i64 -1
  %1597 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1596, i64 0, i32 0, i32 0
  %1598 = load i8*, i8** %1597, align 8
  %1599 = icmp eq i8* %1598, null
  br i1 %1599, label %1604, label %1600

1600:                                             ; preds = %1594
  %1601 = ptrtoint i8* %1598 to i64
  %1602 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1595, i64 -1, i32 0, i32 1
  %1603 = bitcast i8** %1602 to i64*
  store i64 %1601, i64* %1603, align 8
  call void @_ZdlPv(i8* nonnull %1598) #15
  br label %1604

1604:                                             ; preds = %1600, %1594
  %1605 = icmp eq %"class.std::__1::vector"* %1596, %1588
  br i1 %1605, label %1606, label %1594

1606:                                             ; preds = %1604
  %1607 = bitcast %"class.std::__1::vector.16"* %15 to i8**
  %1608 = load i8*, i8** %1607, align 8
  br label %1609

1609:                                             ; preds = %1606, %1590
  %1610 = phi i8* [ %1608, %1606 ], [ %1591, %1590 ]
  store %"class.std::__1::vector"* %1588, %"class.std::__1::vector"** %1127, align 8
  call void @_ZdlPv(i8* %1610) #15
  br label %1611

1611:                                             ; preds = %1587, %1609
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1125) #6
  %1612 = load i8*, i8** %182, align 8
  %1613 = icmp eq i8* %1612, null
  br i1 %1613, label %1616, label %1614

1614:                                             ; preds = %1611
  %1615 = ptrtoint i8* %1612 to i64
  store i64 %1615, i64* %910, align 8
  call void @_ZdlPv(i8* nonnull %1612) #15
  br label %1616

1616:                                             ; preds = %1611, %1614
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %181) #6
  br label %1643

1617:                                             ; preds = %1443, %1617
  %1618 = phi i64 [ %1635, %1617 ], [ 0, %1443 ]
  %1619 = phi i16* [ %1642, %1617 ], [ %1449, %1443 ]
  %1620 = phi i8 [ %1634, %1617 ], [ %1445, %1443 ]
  %1621 = phi i32 [ %1632, %1617 ], [ -1431655766, %1443 ]
  %1622 = phi i8 [ %1631, %1617 ], [ 0, %1443 ]
  %1623 = getelementptr inbounds i16, i16* %1619, i64 %1618
  %1624 = load i16, i16* %1623, align 2
  call void @_ZN15QRCodeGenerator13PutFormatBitsEt(%class.QRCodeGenerator* %1, i16 zeroext %1624)
  %1625 = getelementptr inbounds [8 x i8 (i32, i32)*], [8 x i8 (i32, i32)*]* @_ZN12_GLOBAL__N_114kMaskFunctionsE, i64 0, i64 %1618
  %1626 = load i8 (i32, i32)*, i8 (i32, i32)** %1625, align 8
  call void @_ZN15QRCodeGenerator7PutBitsEPKhmPFhiiE(%class.QRCodeGenerator* %1, i8* nonnull %1253, i64 %1251, i8 (i32, i32)* %1626)
  %1627 = call i32 @_ZNK15QRCodeGenerator18CountPenaltyPointsEv(%class.QRCodeGenerator* %1)
  %1628 = icmp eq i8 %1622, 0
  %1629 = icmp ugt i32 %1621, %1627
  %1630 = or i1 %1628, %1629
  %1631 = select i1 %1630, i8 1, i8 %1622
  %1632 = select i1 %1630, i32 %1627, i32 %1621
  %1633 = trunc i64 %1618 to i8
  %1634 = select i1 %1630, i8 %1633, i8 %1620
  %1635 = add nuw nsw i64 %1618, 1
  %1636 = icmp ult i64 %1635, 8
  %1637 = and i1 %1636, %22
  %1638 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %137, align 8
  %1639 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1638, i64 0, i32 1
  %1640 = load i32, i32* %1639, align 4
  %1641 = icmp eq i32 %1640, 0
  %1642 = select i1 %1641, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @_ZZN12_GLOBAL__N_123FormatInformationForECCEN13QRVersionInfo3ECCEE18kFormatInformation, i64 0, i64 0), i16* getelementptr inbounds ([16 x i16], [16 x i16]* @_ZZN12_GLOBAL__N_123FormatInformationForECCEN13QRVersionInfo3ECCEE18kFormatInformation, i64 0, i64 8)
  br i1 %1637, label %1617, label %1539

1643:                                             ; preds = %1616, %131, %99
  ret void

1644:                                             ; preds = %1021
  %1645 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %1017, i64 0, i32 10, i32 0, i64 2
  %1646 = load i32, i32* %1645, align 4
  %1647 = icmp eq i32 %1646, 0
  %1648 = select i1 %1647, i64 2, i64 3
  br label %1025
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN15QRCodeGenerator17PutVerticalTimingEi(%class.QRCodeGenerator* nocapture readonly, i32) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 0
  %4 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %3, align 8
  %5 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %4, i64 0, i32 3
  %6 = load i32, i32* %5, align 4
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %10

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 1, i32 0, i32 0
  br label %11

10:                                               ; preds = %11, %2
  ret void

11:                                               ; preds = %8, %11
  %12 = phi i32 [ %6, %8 ], [ %25, %11 ]
  %13 = phi i32 [ 0, %8 ], [ %22, %11 ]
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 3
  %17 = mul nsw i32 %12, %13
  %18 = add nsw i32 %17, %1
  %19 = sext i32 %18 to i64
  %20 = load i8*, i8** %9, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 %19
  store i8 %16, i8* %21, align 1
  %22 = add nuw nsw i32 %13, 1
  %23 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %3, align 8
  %24 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %23, i64 0, i32 3
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %22, %25
  br i1 %26, label %11, label %10
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN15QRCodeGenerator19PutHorizontalTimingEi(%class.QRCodeGenerator* nocapture readonly, i32) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 0
  %4 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %3, align 8
  %5 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %4, i64 0, i32 3
  %6 = load i32, i32* %5, align 4
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %10

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 1, i32 0, i32 0
  br label %11

10:                                               ; preds = %11, %2
  ret void

11:                                               ; preds = %8, %11
  %12 = phi i32 [ %6, %8 ], [ %25, %11 ]
  %13 = phi i32 [ 0, %8 ], [ %22, %11 ]
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 3
  %17 = mul nsw i32 %12, %1
  %18 = add nsw i32 %17, %13
  %19 = sext i32 %18 to i64
  %20 = load i8*, i8** %9, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 %19
  store i8 %16, i8* %21, align 1
  %22 = add nuw nsw i32 %13, 1
  %23 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %3, align 8
  %24 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %23, i64 0, i32 3
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %22, %25
  br i1 %26, label %11, label %10
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15QRCodeGenerator9PutFinderEii(%class.QRCodeGenerator*, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = add nsw i32 %1, -3
  %5 = add nsw i32 %2, -3
  %6 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 0
  %7 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %8 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %7, i64 0, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = mul nsw i32 %9, %5
  %11 = add nsw i32 %10, %4
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 1, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %12
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 3, i64 7, i1 false) #6
  %16 = add nsw i32 %1, -2
  %17 = add nsw i32 %2, -2
  %18 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %19 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %18, i64 0, i32 3
  %20 = load i32, i32* %19, align 4
  %21 = mul nsw i32 %20, %17
  %22 = add nsw i32 %21, %16
  %23 = sext i32 %22 to i64
  %24 = load i8*, i8** %13, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 %23
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 2, i64 5, i1 false) #6
  %26 = add nsw i32 %2, 2
  %27 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %28 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %27, i64 0, i32 3
  %29 = load i32, i32* %28, align 4
  %30 = mul nsw i32 %29, %26
  %31 = add nsw i32 %30, %16
  %32 = sext i32 %31 to i64
  %33 = load i8*, i8** %13, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 %32
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 2, i64 5, i1 false) #6
  %35 = add nsw i32 %2, 3
  %36 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %37 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %36, i64 0, i32 3
  %38 = load i32, i32* %37, align 4
  %39 = mul nsw i32 %38, %35
  %40 = add nsw i32 %39, %4
  %41 = sext i32 %40 to i64
  %42 = load i8*, i8** %13, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 %41
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %43, i8 3, i64 7, i1 false) #6
  %44 = add nsw i32 %2, -1
  %45 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %46 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %45, i64 0, i32 3
  %47 = load i32, i32* %46, align 4
  %48 = mul nsw i32 %47, %44
  %49 = add nsw i32 %48, %4
  %50 = sext i32 %49 to i64
  %51 = load i8*, i8** %13, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 %50
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %52, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @_ZZN15QRCodeGenerator9PutFinderEiiE5kLine, i64 0, i64 0), i64 7, i1 false) #6
  %53 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %54 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %53, i64 0, i32 3
  %55 = load i32, i32* %54, align 4
  %56 = mul nsw i32 %55, %2
  %57 = add nsw i32 %56, %4
  %58 = sext i32 %57 to i64
  %59 = load i8*, i8** %13, align 8
  %60 = getelementptr inbounds i8, i8* %59, i64 %58
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %60, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @_ZZN15QRCodeGenerator9PutFinderEiiE5kLine, i64 0, i64 0), i64 7, i1 false) #6
  %61 = add nsw i32 %2, 1
  %62 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %63 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %62, i64 0, i32 3
  %64 = load i32, i32* %63, align 4
  %65 = mul nsw i32 %64, %61
  %66 = add nsw i32 %65, %4
  %67 = sext i32 %66 to i64
  %68 = load i8*, i8** %13, align 8
  %69 = getelementptr inbounds i8, i8* %68, i64 %67
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %69, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @_ZZN15QRCodeGenerator9PutFinderEiiE5kLine, i64 0, i64 0), i64 7, i1 false) #6
  %70 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %71 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %70, i64 0, i32 3
  %72 = load i32, i32* %71, align 4
  %73 = mul nsw i32 %72, %17
  %74 = add nsw i32 %73, %4
  %75 = sext i32 %74 to i64
  %76 = load i8*, i8** %13, align 8
  %77 = getelementptr inbounds i8, i8* %76, i64 %75
  store i8 3, i8* %77, align 1
  %78 = add nsw i32 %1, 3
  %79 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %80 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %79, i64 0, i32 3
  %81 = load i32, i32* %80, align 4
  %82 = mul nsw i32 %81, %17
  %83 = add nsw i32 %82, %78
  %84 = sext i32 %83 to i64
  %85 = load i8*, i8** %13, align 8
  %86 = getelementptr inbounds i8, i8* %85, i64 %84
  store i8 3, i8* %86, align 1
  %87 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %88 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %87, i64 0, i32 3
  %89 = load i32, i32* %88, align 4
  %90 = mul nsw i32 %89, %26
  %91 = add nsw i32 %90, %4
  %92 = sext i32 %91 to i64
  %93 = load i8*, i8** %13, align 8
  %94 = getelementptr inbounds i8, i8* %93, i64 %92
  store i8 3, i8* %94, align 1
  %95 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %96 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %95, i64 0, i32 3
  %97 = load i32, i32* %96, align 4
  %98 = mul nsw i32 %97, %26
  %99 = add nsw i32 %98, %78
  %100 = sext i32 %99 to i64
  %101 = load i8*, i8** %13, align 8
  %102 = getelementptr inbounds i8, i8* %101, i64 %100
  store i8 3, i8* %102, align 1
  %103 = add nsw i32 %1, -4
  %104 = add nsw i32 %1, 4
  %105 = add nsw i32 %2, -4
  %106 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 2
  %107 = icmp sgt i32 %105, -1
  %108 = add nsw i32 %2, 4
  %109 = icmp sgt i32 %108, -1
  br label %113

110:                                              ; preds = %147
  %111 = icmp sgt i32 %103, -1
  %112 = icmp sgt i32 %104, -1
  br i1 %111, label %153, label %168

113:                                              ; preds = %147, %3
  %114 = phi i32 [ %103, %3 ], [ %149, %147 ]
  %115 = icmp sgt i32 %114, -1
  br i1 %115, label %116, label %132

116:                                              ; preds = %113
  %117 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %118 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %117, i64 0, i32 3
  %119 = load i32, i32* %118, align 4
  %120 = icmp sgt i32 %119, %114
  %121 = and i1 %107, %120
  %122 = icmp sgt i32 %119, %105
  %123 = and i1 %122, %121
  br i1 %123, label %125, label %124

124:                                              ; preds = %116
  store i8 2, i8* %106, align 1
  br label %133

125:                                              ; preds = %116
  %126 = mul nsw i32 %119, %105
  %127 = add nsw i32 %126, %114
  %128 = sext i32 %127 to i64
  %129 = load i8*, i8** %13, align 8
  %130 = getelementptr inbounds i8, i8* %129, i64 %128
  store i8 2, i8* %130, align 1
  %131 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  br label %133

132:                                              ; preds = %113
  store i8 2, i8* %106, align 1
  br label %147

133:                                              ; preds = %124, %125
  %134 = phi %struct.QRVersionInfo* [ %117, %124 ], [ %131, %125 ]
  %135 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %134, i64 0, i32 3
  %136 = load i32, i32* %135, align 4
  %137 = icmp sgt i32 %136, %114
  %138 = and i1 %109, %137
  %139 = icmp sgt i32 %136, %108
  %140 = and i1 %139, %138
  br i1 %140, label %141, label %147

141:                                              ; preds = %133
  %142 = mul nsw i32 %136, %108
  %143 = add nsw i32 %142, %114
  %144 = sext i32 %143 to i64
  %145 = load i8*, i8** %13, align 8
  %146 = getelementptr inbounds i8, i8* %145, i64 %144
  br label %147

147:                                              ; preds = %133, %132, %141
  %148 = phi i8* [ %146, %141 ], [ %106, %132 ], [ %106, %133 ]
  store i8 2, i8* %148, align 1
  %149 = add nsw i32 %114, 1
  %150 = icmp slt i32 %114, %104
  br i1 %150, label %113, label %110

151:                                              ; preds = %376, %378, %387
  %152 = phi i8* [ %392, %387 ], [ %106, %378 ], [ %106, %376 ]
  store i8 2, i8* %152, align 1
  ret void

153:                                              ; preds = %110
  %154 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %155 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %154, i64 0, i32 3
  %156 = load i32, i32* %155, align 4
  %157 = icmp sgt i32 %156, %103
  %158 = icmp sgt i32 %5, -1
  %159 = and i1 %158, %157
  %160 = icmp sgt i32 %156, %5
  %161 = and i1 %160, %159
  br i1 %161, label %162, label %168

162:                                              ; preds = %153
  %163 = mul nsw i32 %156, %5
  %164 = add nsw i32 %163, %103
  %165 = sext i32 %164 to i64
  %166 = load i8*, i8** %13, align 8
  %167 = getelementptr inbounds i8, i8* %166, i64 %165
  br label %168

168:                                              ; preds = %110, %153, %162
  %169 = phi i8* [ %167, %162 ], [ %106, %153 ], [ %106, %110 ]
  store i8 2, i8* %169, align 1
  br i1 %112, label %170, label %185

170:                                              ; preds = %168
  %171 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %172 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %171, i64 0, i32 3
  %173 = load i32, i32* %172, align 4
  %174 = icmp sgt i32 %173, %104
  %175 = icmp sgt i32 %5, -1
  %176 = and i1 %175, %174
  %177 = icmp sgt i32 %173, %5
  %178 = and i1 %177, %176
  br i1 %178, label %179, label %185

179:                                              ; preds = %170
  %180 = mul nsw i32 %173, %5
  %181 = add nsw i32 %180, %104
  %182 = sext i32 %181 to i64
  %183 = load i8*, i8** %13, align 8
  %184 = getelementptr inbounds i8, i8* %183, i64 %182
  br label %185

185:                                              ; preds = %179, %170, %168
  %186 = phi i8* [ %184, %179 ], [ %106, %170 ], [ %106, %168 ]
  store i8 2, i8* %186, align 1
  %187 = add nsw i32 %2, -2
  br i1 %111, label %188, label %203

188:                                              ; preds = %185
  %189 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %190 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %189, i64 0, i32 3
  %191 = load i32, i32* %190, align 4
  %192 = icmp sgt i32 %191, %103
  %193 = icmp sgt i32 %187, -1
  %194 = and i1 %193, %192
  %195 = icmp sgt i32 %191, %187
  %196 = and i1 %195, %194
  br i1 %196, label %197, label %203

197:                                              ; preds = %188
  %198 = mul nsw i32 %191, %187
  %199 = add nsw i32 %198, %103
  %200 = sext i32 %199 to i64
  %201 = load i8*, i8** %13, align 8
  %202 = getelementptr inbounds i8, i8* %201, i64 %200
  br label %203

203:                                              ; preds = %197, %188, %185
  %204 = phi i8* [ %202, %197 ], [ %106, %188 ], [ %106, %185 ]
  store i8 2, i8* %204, align 1
  br i1 %112, label %205, label %220

205:                                              ; preds = %203
  %206 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %207 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %206, i64 0, i32 3
  %208 = load i32, i32* %207, align 4
  %209 = icmp sgt i32 %208, %104
  %210 = icmp sgt i32 %187, -1
  %211 = and i1 %210, %209
  %212 = icmp sgt i32 %208, %187
  %213 = and i1 %212, %211
  br i1 %213, label %214, label %220

214:                                              ; preds = %205
  %215 = mul nsw i32 %208, %187
  %216 = add nsw i32 %215, %104
  %217 = sext i32 %216 to i64
  %218 = load i8*, i8** %13, align 8
  %219 = getelementptr inbounds i8, i8* %218, i64 %217
  br label %220

220:                                              ; preds = %214, %205, %203
  %221 = phi i8* [ %219, %214 ], [ %106, %205 ], [ %106, %203 ]
  store i8 2, i8* %221, align 1
  %222 = add nsw i32 %2, -1
  br i1 %111, label %223, label %238

223:                                              ; preds = %220
  %224 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %225 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %224, i64 0, i32 3
  %226 = load i32, i32* %225, align 4
  %227 = icmp sgt i32 %226, %103
  %228 = icmp sgt i32 %2, 0
  %229 = and i1 %228, %227
  %230 = icmp sge i32 %226, %2
  %231 = and i1 %230, %229
  br i1 %231, label %232, label %238

232:                                              ; preds = %223
  %233 = mul nsw i32 %226, %222
  %234 = add nsw i32 %233, %103
  %235 = sext i32 %234 to i64
  %236 = load i8*, i8** %13, align 8
  %237 = getelementptr inbounds i8, i8* %236, i64 %235
  br label %238

238:                                              ; preds = %232, %223, %220
  %239 = phi i8* [ %237, %232 ], [ %106, %223 ], [ %106, %220 ]
  store i8 2, i8* %239, align 1
  br i1 %112, label %240, label %255

240:                                              ; preds = %238
  %241 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %242 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %241, i64 0, i32 3
  %243 = load i32, i32* %242, align 4
  %244 = icmp sgt i32 %243, %104
  %245 = icmp sgt i32 %2, 0
  %246 = and i1 %245, %244
  %247 = icmp sge i32 %243, %2
  %248 = and i1 %247, %246
  br i1 %248, label %249, label %255

249:                                              ; preds = %240
  %250 = mul nsw i32 %243, %222
  %251 = add nsw i32 %250, %104
  %252 = sext i32 %251 to i64
  %253 = load i8*, i8** %13, align 8
  %254 = getelementptr inbounds i8, i8* %253, i64 %252
  br label %255

255:                                              ; preds = %249, %240, %238
  %256 = phi i8* [ %254, %249 ], [ %106, %240 ], [ %106, %238 ]
  store i8 2, i8* %256, align 1
  br i1 %111, label %257, label %272

257:                                              ; preds = %255
  %258 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %259 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %258, i64 0, i32 3
  %260 = load i32, i32* %259, align 4
  %261 = icmp sgt i32 %260, %103
  %262 = icmp sgt i32 %2, -1
  %263 = and i1 %262, %261
  %264 = icmp sgt i32 %260, %2
  %265 = and i1 %264, %263
  br i1 %265, label %266, label %272

266:                                              ; preds = %257
  %267 = mul nsw i32 %260, %2
  %268 = add nsw i32 %267, %103
  %269 = sext i32 %268 to i64
  %270 = load i8*, i8** %13, align 8
  %271 = getelementptr inbounds i8, i8* %270, i64 %269
  br label %272

272:                                              ; preds = %266, %257, %255
  %273 = phi i8* [ %271, %266 ], [ %106, %257 ], [ %106, %255 ]
  store i8 2, i8* %273, align 1
  br i1 %112, label %274, label %289

274:                                              ; preds = %272
  %275 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %276 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %275, i64 0, i32 3
  %277 = load i32, i32* %276, align 4
  %278 = icmp sgt i32 %277, %104
  %279 = icmp sgt i32 %2, -1
  %280 = and i1 %279, %278
  %281 = icmp sgt i32 %277, %2
  %282 = and i1 %281, %280
  br i1 %282, label %283, label %289

283:                                              ; preds = %274
  %284 = mul nsw i32 %277, %2
  %285 = add nsw i32 %284, %104
  %286 = sext i32 %285 to i64
  %287 = load i8*, i8** %13, align 8
  %288 = getelementptr inbounds i8, i8* %287, i64 %286
  br label %289

289:                                              ; preds = %283, %274, %272
  %290 = phi i8* [ %288, %283 ], [ %106, %274 ], [ %106, %272 ]
  store i8 2, i8* %290, align 1
  br i1 %111, label %291, label %306

291:                                              ; preds = %289
  %292 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %293 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %292, i64 0, i32 3
  %294 = load i32, i32* %293, align 4
  %295 = icmp sgt i32 %294, %103
  %296 = icmp sgt i32 %2, -2
  %297 = and i1 %296, %295
  %298 = icmp sgt i32 %294, %61
  %299 = and i1 %298, %297
  br i1 %299, label %300, label %306

300:                                              ; preds = %291
  %301 = mul nsw i32 %294, %61
  %302 = add nsw i32 %301, %103
  %303 = sext i32 %302 to i64
  %304 = load i8*, i8** %13, align 8
  %305 = getelementptr inbounds i8, i8* %304, i64 %303
  br label %306

306:                                              ; preds = %300, %291, %289
  %307 = phi i8* [ %305, %300 ], [ %106, %291 ], [ %106, %289 ]
  store i8 2, i8* %307, align 1
  br i1 %112, label %308, label %323

308:                                              ; preds = %306
  %309 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %310 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %309, i64 0, i32 3
  %311 = load i32, i32* %310, align 4
  %312 = icmp sgt i32 %311, %104
  %313 = icmp sgt i32 %2, -2
  %314 = and i1 %313, %312
  %315 = icmp sgt i32 %311, %61
  %316 = and i1 %315, %314
  br i1 %316, label %317, label %323

317:                                              ; preds = %308
  %318 = mul nsw i32 %311, %61
  %319 = add nsw i32 %318, %104
  %320 = sext i32 %319 to i64
  %321 = load i8*, i8** %13, align 8
  %322 = getelementptr inbounds i8, i8* %321, i64 %320
  br label %323

323:                                              ; preds = %317, %308, %306
  %324 = phi i8* [ %322, %317 ], [ %106, %308 ], [ %106, %306 ]
  store i8 2, i8* %324, align 1
  %325 = add nsw i32 %2, 2
  br i1 %111, label %326, label %341

326:                                              ; preds = %323
  %327 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %328 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %327, i64 0, i32 3
  %329 = load i32, i32* %328, align 4
  %330 = icmp sgt i32 %329, %103
  %331 = icmp sgt i32 %325, -1
  %332 = and i1 %331, %330
  %333 = icmp sgt i32 %329, %325
  %334 = and i1 %333, %332
  br i1 %334, label %335, label %341

335:                                              ; preds = %326
  %336 = mul nsw i32 %329, %325
  %337 = add nsw i32 %336, %103
  %338 = sext i32 %337 to i64
  %339 = load i8*, i8** %13, align 8
  %340 = getelementptr inbounds i8, i8* %339, i64 %338
  br label %341

341:                                              ; preds = %335, %326, %323
  %342 = phi i8* [ %340, %335 ], [ %106, %326 ], [ %106, %323 ]
  store i8 2, i8* %342, align 1
  br i1 %112, label %343, label %358

343:                                              ; preds = %341
  %344 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %345 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %344, i64 0, i32 3
  %346 = load i32, i32* %345, align 4
  %347 = icmp sgt i32 %346, %104
  %348 = icmp sgt i32 %325, -1
  %349 = and i1 %348, %347
  %350 = icmp sgt i32 %346, %325
  %351 = and i1 %350, %349
  br i1 %351, label %352, label %358

352:                                              ; preds = %343
  %353 = mul nsw i32 %346, %325
  %354 = add nsw i32 %353, %104
  %355 = sext i32 %354 to i64
  %356 = load i8*, i8** %13, align 8
  %357 = getelementptr inbounds i8, i8* %356, i64 %355
  br label %358

358:                                              ; preds = %352, %343, %341
  %359 = phi i8* [ %357, %352 ], [ %106, %343 ], [ %106, %341 ]
  store i8 2, i8* %359, align 1
  %360 = add nsw i32 %2, 3
  br i1 %111, label %361, label %376

361:                                              ; preds = %358
  %362 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %363 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %362, i64 0, i32 3
  %364 = load i32, i32* %363, align 4
  %365 = icmp sgt i32 %364, %103
  %366 = icmp sgt i32 %360, -1
  %367 = and i1 %366, %365
  %368 = icmp sgt i32 %364, %360
  %369 = and i1 %368, %367
  br i1 %369, label %370, label %376

370:                                              ; preds = %361
  %371 = mul nsw i32 %364, %360
  %372 = add nsw i32 %371, %103
  %373 = sext i32 %372 to i64
  %374 = load i8*, i8** %13, align 8
  %375 = getelementptr inbounds i8, i8* %374, i64 %373
  br label %376

376:                                              ; preds = %370, %361, %358
  %377 = phi i8* [ %375, %370 ], [ %106, %361 ], [ %106, %358 ]
  store i8 2, i8* %377, align 1
  br i1 %112, label %378, label %151

378:                                              ; preds = %376
  %379 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %380 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %379, i64 0, i32 3
  %381 = load i32, i32* %380, align 4
  %382 = icmp sgt i32 %381, %104
  %383 = icmp sgt i32 %360, -1
  %384 = and i1 %383, %382
  %385 = icmp sgt i32 %381, %360
  %386 = and i1 %385, %384
  br i1 %386, label %387, label %151

387:                                              ; preds = %378
  %388 = mul nsw i32 %381, %360
  %389 = add nsw i32 %388, %104
  %390 = sext i32 %389 to i64
  %391 = load i8*, i8** %13, align 8
  %392 = getelementptr inbounds i8, i8* %391, i64 %390
  br label %151
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15QRCodeGenerator12PutAlignmentEii(%class.QRCodeGenerator* nocapture readonly, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = add nsw i32 %1, -2
  %5 = add nsw i32 %2, -2
  %6 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 0
  %7 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %8 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %7, i64 0, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = mul nsw i32 %9, %5
  %11 = add nsw i32 %10, %4
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 1, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %12
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 3, i64 5, i1 false) #6
  %16 = add nsw i32 %2, 2
  %17 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %18 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %17, i64 0, i32 3
  %19 = load i32, i32* %18, align 4
  %20 = mul nsw i32 %19, %16
  %21 = add nsw i32 %20, %4
  %22 = sext i32 %21 to i64
  %23 = load i8*, i8** %13, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 %22
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 3, i64 5, i1 false) #6
  %25 = add nsw i32 %2, -1
  %26 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %27 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %26, i64 0, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = mul nsw i32 %28, %25
  %30 = add nsw i32 %29, %4
  %31 = sext i32 %30 to i64
  %32 = load i8*, i8** %13, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 %31
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %33, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @_ZZN15QRCodeGenerator12PutAlignmentEiiE5kLine, i64 0, i64 0), i64 5, i1 false) #6
  %34 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %35 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %34, i64 0, i32 3
  %36 = load i32, i32* %35, align 4
  %37 = mul nsw i32 %36, %2
  %38 = add nsw i32 %37, %4
  %39 = sext i32 %38 to i64
  %40 = load i8*, i8** %13, align 8
  %41 = getelementptr inbounds i8, i8* %40, i64 %39
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @_ZZN15QRCodeGenerator12PutAlignmentEiiE5kLine, i64 0, i64 0), i64 5, i1 false) #6
  %42 = add nsw i32 %2, 1
  %43 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %44 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %43, i64 0, i32 3
  %45 = load i32, i32* %44, align 4
  %46 = mul nsw i32 %45, %42
  %47 = add nsw i32 %46, %4
  %48 = sext i32 %47 to i64
  %49 = load i8*, i8** %13, align 8
  %50 = getelementptr inbounds i8, i8* %49, i64 %48
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %50, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @_ZZN15QRCodeGenerator12PutAlignmentEiiE5kLine, i64 0, i64 0), i64 5, i1 false) #6
  %51 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %52 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %51, i64 0, i32 3
  %53 = load i32, i32* %52, align 4
  %54 = mul nsw i32 %53, %2
  %55 = add nsw i32 %54, %1
  %56 = sext i32 %55 to i64
  %57 = load i8*, i8** %13, align 8
  %58 = getelementptr inbounds i8, i8* %57, i64 %56
  store i8 3, i8* %58, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN15QRCodeGenerator16PutVersionBlocksEj(%class.QRCodeGenerator* nocapture readonly, i32) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 0
  %4 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %3, align 8
  %5 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %4, i64 0, i32 3
  %6 = load i32, i32* %5, align 4
  %7 = add nsw i32 %6, -11
  %8 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 1, i32 0, i32 0
  %9 = add nsw i32 %6, -10
  %10 = add nsw i32 %6, -9
  br label %11

11:                                               ; preds = %73, %2
  %12 = phi i32 [ %6, %2 ], [ %77, %73 ]
  %13 = phi i32 [ 0, %2 ], [ %71, %73 ]
  %14 = phi i32 [ %1, %2 ], [ %74, %73 ]
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = or i8 %16, 2
  %18 = mul nsw i32 %12, %7
  %19 = add nsw i32 %18, %13
  %20 = sext i32 %19 to i64
  %21 = load i8*, i8** %8, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 %20
  store i8 %17, i8* %22, align 1
  %23 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %3, align 8
  %24 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %23, i64 0, i32 3
  %25 = load i32, i32* %24, align 4
  %26 = mul nsw i32 %25, %13
  %27 = add nsw i32 %26, %7
  %28 = sext i32 %27 to i64
  %29 = load i8*, i8** %8, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 %28
  store i8 %17, i8* %30, align 1
  %31 = lshr i32 %14, 1
  %32 = trunc i32 %31 to i8
  %33 = and i8 %32, 1
  %34 = or i8 %33, 2
  %35 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %3, align 8
  %36 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %35, i64 0, i32 3
  %37 = load i32, i32* %36, align 4
  %38 = mul nsw i32 %37, %9
  %39 = add nsw i32 %38, %13
  %40 = sext i32 %39 to i64
  %41 = load i8*, i8** %8, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 %40
  store i8 %34, i8* %42, align 1
  %43 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %3, align 8
  %44 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %43, i64 0, i32 3
  %45 = load i32, i32* %44, align 4
  %46 = mul nsw i32 %45, %13
  %47 = add nsw i32 %46, %9
  %48 = sext i32 %47 to i64
  %49 = load i8*, i8** %8, align 8
  %50 = getelementptr inbounds i8, i8* %49, i64 %48
  store i8 %34, i8* %50, align 1
  %51 = lshr i32 %14, 2
  %52 = trunc i32 %51 to i8
  %53 = and i8 %52, 1
  %54 = or i8 %53, 2
  %55 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %3, align 8
  %56 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %55, i64 0, i32 3
  %57 = load i32, i32* %56, align 4
  %58 = mul nsw i32 %57, %10
  %59 = add nsw i32 %58, %13
  %60 = sext i32 %59 to i64
  %61 = load i8*, i8** %8, align 8
  %62 = getelementptr inbounds i8, i8* %61, i64 %60
  store i8 %54, i8* %62, align 1
  %63 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %3, align 8
  %64 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %63, i64 0, i32 3
  %65 = load i32, i32* %64, align 4
  %66 = mul nsw i32 %65, %13
  %67 = add nsw i32 %66, %10
  %68 = sext i32 %67 to i64
  %69 = load i8*, i8** %8, align 8
  %70 = getelementptr inbounds i8, i8* %69, i64 %68
  store i8 %54, i8* %70, align 1
  %71 = add nuw nsw i32 %13, 1
  %72 = icmp eq i32 %71, 6
  br i1 %72, label %78, label %73

73:                                               ; preds = %11
  %74 = lshr i32 %14, 3
  %75 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %3, align 8
  %76 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %75, i64 0, i32 3
  %77 = load i32, i32* %76, align 4
  br label %11

78:                                               ; preds = %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15QRCodeGenerator18AddErrorCorrectionEN4base4spanIhLm18446744073709551615EEENS1_IKhLm18446744073709551615EEEmm(%class.QRCodeGenerator* nocapture readnone, i64, i8*, i64, i8*, i64, i64) local_unnamed_addr #0 align 2 {
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = alloca %"class.logging::CheckError", align 8
  %10 = alloca %"class.logging::CheckError", align 8
  %11 = alloca %"class.logging::CheckError", align 8
  %12 = add i64 %6, -10
  %13 = lshr i64 %12, 1
  %14 = shl i64 %12, 63
  %15 = or i64 %13, %14
  %16 = icmp ult i64 %15, 8
  br i1 %16, label %17, label %102

17:                                               ; preds = %7
  %18 = trunc i64 %13 to i8
  %19 = lshr i8 -47, %18
  %20 = and i8 %19, 1
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %102, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds [8 x i8*], [8 x i8*]* @switch.table._ZN15QRCodeGenerator18AddErrorCorrectionEN4base4spanIhLm18446744073709551615EEENS1_IKhLm18446744073709551615EEEmm, i64 0, i64 %15
  %24 = load i8*, i8** %23, align 8
  %25 = tail call i8* @llvm.stacksave()
  %26 = alloca i8, i64 %5, align 16
  %27 = icmp eq i64 %5, 0
  br i1 %27, label %29, label %28

28:                                               ; preds = %22
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 -86, i64 %5, i1 false)
  br label %29

29:                                               ; preds = %28, %22
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 0, i64 %6, i1 false)
  %30 = sub i64 %5, %6
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %34, label %32

32:                                               ; preds = %29
  %33 = bitcast %"class.logging::CheckError"* %11 to i8*
  br label %39

34:                                               ; preds = %46, %29
  %35 = add i64 %5, -1
  %36 = icmp ult i64 %35, %6
  br i1 %36, label %61, label %37

37:                                               ; preds = %34
  %38 = icmp eq i64 %6, 0
  br label %56

39:                                               ; preds = %46, %32
  %40 = phi i64 [ 0, %32 ], [ %51, %46 ]
  %41 = xor i64 %40, -1
  %42 = add i64 %30, %41
  %43 = icmp ult i64 %42, %3
  br i1 %43, label %46, label %44

44:                                               ; preds = %39
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #6
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %11, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0), i32 418, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i64 0, i64 0)) #6
  %45 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %11) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #6
  br label %46

46:                                               ; preds = %39, %44
  %47 = getelementptr inbounds i8, i8* %4, i64 %42
  %48 = load i8, i8* %47, align 1
  %49 = add i64 %40, %6
  %50 = getelementptr inbounds i8, i8* %26, i64 %49
  store i8 %48, i8* %50, align 1
  %51 = add nuw i64 %40, 1
  %52 = icmp eq i64 %51, %30
  br i1 %52, label %34, label %39

53:                                               ; preds = %73, %56
  %54 = add i64 %57, -1
  %55 = icmp ult i64 %54, %6
  br i1 %55, label %61, label %56

56:                                               ; preds = %37, %53
  %57 = phi i64 [ %35, %37 ], [ %54, %53 ]
  br i1 %38, label %53, label %58

58:                                               ; preds = %56
  %59 = getelementptr inbounds i8, i8* %26, i64 %57
  %60 = sub i64 %57, %6
  br label %73

61:                                               ; preds = %53, %34
  %62 = icmp eq i64 %1, 0
  br i1 %62, label %63, label %66

63:                                               ; preds = %61
  %64 = bitcast %"class.logging::CheckError"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %64) #6
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %10, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0), i32 418, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i64 0, i64 0)) #6
  %65 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %10) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %10) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %64) #6
  br label %66

66:                                               ; preds = %61, %63
  %67 = icmp eq i64 %3, 0
  br i1 %67, label %68, label %71

68:                                               ; preds = %66
  %69 = bitcast %"class.logging::CheckError"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69) #6
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %9, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0), i32 418, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i64 0, i64 0)) #6
  %70 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %9) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69) #6
  br label %71

71:                                               ; preds = %68, %66
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %2, i8* align 1 %4, i64 %30, i1 false)
  %72 = bitcast %"class.logging::CheckError"* %8 to i8*
  br label %88

73:                                               ; preds = %73, %58
  %74 = phi i64 [ 0, %58 ], [ %85, %73 ]
  %75 = getelementptr inbounds i8, i8* %24, i64 %74
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i16
  %78 = load i8, i8* %59, align 1
  %79 = zext i8 %78 to i16
  %80 = call zeroext i8 @_ZN15QRCodeGenerator7GF28MulEtt(i16 zeroext %77, i16 zeroext %79)
  %81 = add i64 %60, %74
  %82 = getelementptr inbounds i8, i8* %26, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = xor i8 %83, %80
  store i8 %84, i8* %82, align 1
  %85 = add nuw i64 %74, 1
  %86 = icmp eq i64 %85, %6
  br i1 %86, label %53, label %73

87:                                               ; preds = %98
  call void @llvm.stackrestore(i8* %25)
  br label %102

88:                                               ; preds = %98, %71
  %89 = phi i64 [ 0, %71 ], [ %100, %98 ]
  %90 = xor i64 %89, -1
  %91 = add i64 %90, %6
  %92 = getelementptr inbounds i8, i8* %26, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = add i64 %89, %30
  %95 = icmp ult i64 %94, %1
  br i1 %95, label %98, label %96

96:                                               ; preds = %88
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %72) #6
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0), i32 418, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i64 0, i64 0)) #6
  %97 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %72) #6
  br label %98

98:                                               ; preds = %88, %96
  %99 = getelementptr inbounds i8, i8* %2, i64 %94
  store i8 %93, i8* %99, align 1
  %100 = add nuw i64 %89, 1
  %101 = icmp eq i64 %100, %6
  br i1 %101, label %87, label %88

102:                                              ; preds = %17, %7, %87
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #6

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN15QRCodeGenerator13PutFormatBitsEt(%class.QRCodeGenerator* nocapture readonly, i16 zeroext) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 0
  %4 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 1, i32 0, i32 0
  br label %20

5:                                                ; preds = %20
  %6 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %3, align 8
  %7 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %6, i64 0, i32 3
  %8 = load i32, i32* %7, align 4
  %9 = add nsw i32 %8, -8
  %10 = add nsw i32 %8, -1
  %11 = trunc i16 %1 to i8
  %12 = and i8 %11, 1
  %13 = or i8 %12, 2
  %14 = shl i32 %8, 3
  %15 = add nsw i32 %14, %10
  %16 = sext i32 %15 to i64
  %17 = load i8*, i8** %4, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 %16
  store i8 %13, i8* %18, align 1
  %19 = lshr i16 %1, 1
  br label %42

20:                                               ; preds = %20, %2
  %21 = phi i16 [ %1, %2 ], [ %39, %20 ]
  %22 = phi i64 [ 0, %2 ], [ %40, %20 ]
  %23 = getelementptr inbounds [15 x i8], [15 x i8]* @_ZZN15QRCodeGenerator13PutFormatBitsEtE5kRun1, i64 0, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = trunc i16 %21 to i8
  %26 = and i8 %25, 1
  %27 = or i8 %26, 2
  %28 = zext i8 %24 to i32
  %29 = lshr i32 %28, 4
  %30 = and i32 %28, 15
  %31 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %3, align 8
  %32 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %31, i64 0, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = mul nsw i32 %33, %30
  %35 = add nsw i32 %34, %29
  %36 = sext i32 %35 to i64
  %37 = load i8*, i8** %4, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 %36
  store i8 %27, i8* %38, align 1
  %39 = lshr i16 %21, 1
  %40 = add nuw nsw i64 %22, 1
  %41 = icmp eq i64 %40, 15
  br i1 %41, label %5, label %20

42:                                               ; preds = %5, %42
  %43 = phi i16 [ %19, %5 ], [ %57, %42 ]
  %44 = phi i32 [ %10, %5 ], [ %48, %42 ]
  %45 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %3, align 8
  %46 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %45, i64 0, i32 3
  %47 = load i32, i32* %46, align 4
  %48 = add nsw i32 %44, -1
  %49 = trunc i16 %43 to i8
  %50 = and i8 %49, 1
  %51 = or i8 %50, 2
  %52 = shl i32 %47, 3
  %53 = add nsw i32 %52, %48
  %54 = sext i32 %53 to i64
  %55 = load i8*, i8** %4, align 8
  %56 = getelementptr inbounds i8, i8* %55, i64 %54
  store i8 %51, i8* %56, align 1
  %57 = lshr i16 %43, 1
  %58 = icmp sgt i32 %48, %9
  br i1 %58, label %42, label %59

59:                                               ; preds = %42
  %60 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %3, align 8
  %61 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %60, i64 0, i32 3
  %62 = load i32, i32* %61, align 4
  %63 = mul nsw i32 %62, %9
  %64 = add nsw i32 %63, 8
  %65 = sext i32 %64 to i64
  %66 = load i8*, i8** %4, align 8
  %67 = getelementptr inbounds i8, i8* %66, i64 %65
  store i8 3, i8* %67, align 1
  %68 = add nsw i32 %8, -7
  %69 = trunc i16 %57 to i8
  %70 = and i8 %69, 1
  %71 = or i8 %70, 2
  %72 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %3, align 8
  %73 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %72, i64 0, i32 3
  %74 = load i32, i32* %73, align 4
  %75 = mul nsw i32 %74, %68
  %76 = add nsw i32 %75, 8
  %77 = sext i32 %76 to i64
  %78 = load i8*, i8** %4, align 8
  %79 = getelementptr inbounds i8, i8* %78, i64 %77
  store i8 %71, i8* %79, align 1
  %80 = add nsw i32 %8, -6
  %81 = lshr i16 %43, 2
  %82 = trunc i16 %81 to i8
  %83 = and i8 %82, 1
  %84 = or i8 %83, 2
  %85 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %3, align 8
  %86 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %85, i64 0, i32 3
  %87 = load i32, i32* %86, align 4
  %88 = mul nsw i32 %87, %80
  %89 = add nsw i32 %88, 8
  %90 = sext i32 %89 to i64
  %91 = load i8*, i8** %4, align 8
  %92 = getelementptr inbounds i8, i8* %91, i64 %90
  store i8 %84, i8* %92, align 1
  %93 = lshr i16 %43, 3
  %94 = add nsw i32 %8, -5
  %95 = trunc i16 %93 to i8
  %96 = and i8 %95, 1
  %97 = or i8 %96, 2
  %98 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %3, align 8
  %99 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %98, i64 0, i32 3
  %100 = load i32, i32* %99, align 4
  %101 = mul nsw i32 %100, %94
  %102 = add nsw i32 %101, 8
  %103 = sext i32 %102 to i64
  %104 = load i8*, i8** %4, align 8
  %105 = getelementptr inbounds i8, i8* %104, i64 %103
  store i8 %97, i8* %105, align 1
  %106 = lshr i16 %43, 4
  %107 = add nsw i32 %8, -4
  %108 = trunc i16 %106 to i8
  %109 = and i8 %108, 1
  %110 = or i8 %109, 2
  %111 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %3, align 8
  %112 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %111, i64 0, i32 3
  %113 = load i32, i32* %112, align 4
  %114 = mul nsw i32 %113, %107
  %115 = add nsw i32 %114, 8
  %116 = sext i32 %115 to i64
  %117 = load i8*, i8** %4, align 8
  %118 = getelementptr inbounds i8, i8* %117, i64 %116
  store i8 %110, i8* %118, align 1
  %119 = lshr i16 %43, 5
  %120 = add nsw i32 %8, -3
  %121 = trunc i16 %119 to i8
  %122 = and i8 %121, 1
  %123 = or i8 %122, 2
  %124 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %3, align 8
  %125 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %124, i64 0, i32 3
  %126 = load i32, i32* %125, align 4
  %127 = mul nsw i32 %126, %120
  %128 = add nsw i32 %127, 8
  %129 = sext i32 %128 to i64
  %130 = load i8*, i8** %4, align 8
  %131 = getelementptr inbounds i8, i8* %130, i64 %129
  store i8 %123, i8* %131, align 1
  %132 = lshr i16 %43, 6
  %133 = add nsw i32 %8, -2
  %134 = trunc i16 %132 to i8
  %135 = and i8 %134, 1
  %136 = or i8 %135, 2
  %137 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %3, align 8
  %138 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %137, i64 0, i32 3
  %139 = load i32, i32* %138, align 4
  %140 = mul nsw i32 %139, %133
  %141 = add nsw i32 %140, 8
  %142 = sext i32 %141 to i64
  %143 = load i8*, i8** %4, align 8
  %144 = getelementptr inbounds i8, i8* %143, i64 %142
  store i8 %136, i8* %144, align 1
  %145 = lshr i16 %43, 7
  %146 = add nsw i32 %8, -1
  %147 = trunc i16 %145 to i8
  %148 = and i8 %147, 1
  %149 = or i8 %148, 2
  %150 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %3, align 8
  %151 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %150, i64 0, i32 3
  %152 = load i32, i32* %151, align 4
  %153 = mul nsw i32 %152, %146
  %154 = add nsw i32 %153, 8
  %155 = sext i32 %154 to i64
  %156 = load i8*, i8** %4, align 8
  %157 = getelementptr inbounds i8, i8* %156, i64 %155
  store i8 %149, i8* %157, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15QRCodeGenerator7PutBitsEPKhmPFhiiE(%class.QRCodeGenerator* nocapture readonly, i8*, i64, i8 (i32, i32)* nocapture) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 0
  %6 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %5, align 8
  %7 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %6, i64 0, i32 3
  %8 = load i32, i32* %7, align 4
  %9 = add nsw i32 %8, -1
  %10 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 1, i32 0, i32 0
  br label %11

11:                                               ; preds = %108, %4
  %12 = phi i32 [ %8, %4 ], [ %114, %108 ]
  %13 = phi i8 [ -86, %4 ], [ %82, %108 ]
  %14 = phi i32 [ 0, %4 ], [ %83, %108 ]
  %15 = phi i64 [ 0, %4 ], [ %84, %108 ]
  %16 = phi i8 [ 1, %4 ], [ %109, %108 ]
  %17 = phi i32 [ %9, %4 ], [ %110, %108 ]
  %18 = phi i32 [ %9, %4 ], [ %111, %108 ]
  %19 = mul nsw i32 %12, %18
  %20 = add nsw i32 %19, %17
  %21 = sext i32 %20 to i64
  %22 = load i8*, i8** %10, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 %21
  %24 = load i8, i8* %23, align 1
  %25 = and i8 %24, 2
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %27, label %50

27:                                               ; preds = %11
  %28 = icmp eq i32 %14, 0
  br i1 %28, label %31, label %29

29:                                               ; preds = %27
  %30 = add i32 %14, -1
  br label %37

31:                                               ; preds = %27
  %32 = icmp ult i64 %15, %2
  br i1 %32, label %33, label %37

33:                                               ; preds = %31
  %34 = add nuw i64 %15, 1
  %35 = getelementptr inbounds i8, i8* %1, i64 %15
  %36 = load i8, i8* %35, align 1
  br label %37

37:                                               ; preds = %31, %33, %29
  %38 = phi i64 [ %15, %29 ], [ %34, %33 ], [ %15, %31 ]
  %39 = phi i32 [ %30, %29 ], [ 7, %33 ], [ 7, %31 ]
  %40 = phi i8 [ %13, %29 ], [ %36, %33 ], [ 0, %31 ]
  %41 = lshr i8 %40, 7
  %42 = shl i8 %40, 1
  %43 = tail call zeroext i8 %3(i32 %17, i32 %18) #6
  %44 = xor i8 %41, %43
  store i8 %44, i8* %23, align 1
  %45 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %5, align 8
  %46 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %45, i64 0, i32 3
  %47 = load i32, i32* %46, align 4
  %48 = load i8*, i8** %10, align 8
  %49 = mul nsw i32 %47, %18
  br label %50

50:                                               ; preds = %37, %11
  %51 = phi i32 [ %49, %37 ], [ %19, %11 ]
  %52 = phi i8* [ %48, %37 ], [ %22, %11 ]
  %53 = phi i8 [ %42, %37 ], [ %13, %11 ]
  %54 = phi i32 [ %39, %37 ], [ %14, %11 ]
  %55 = phi i64 [ %38, %37 ], [ %15, %11 ]
  %56 = add nsw i32 %17, -1
  %57 = add nsw i32 %51, %56
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %52, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = and i8 %60, 2
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %63, label %81

63:                                               ; preds = %50
  %64 = icmp eq i32 %54, 0
  br i1 %64, label %67, label %65

65:                                               ; preds = %63
  %66 = add i32 %54, -1
  br label %73

67:                                               ; preds = %63
  %68 = icmp ult i64 %55, %2
  br i1 %68, label %69, label %73

69:                                               ; preds = %67
  %70 = add nuw i64 %55, 1
  %71 = getelementptr inbounds i8, i8* %1, i64 %55
  %72 = load i8, i8* %71, align 1
  br label %73

73:                                               ; preds = %67, %69, %65
  %74 = phi i64 [ %55, %65 ], [ %70, %69 ], [ %55, %67 ]
  %75 = phi i32 [ %66, %65 ], [ 7, %69 ], [ 7, %67 ]
  %76 = phi i8 [ %53, %65 ], [ %72, %69 ], [ 0, %67 ]
  %77 = lshr i8 %76, 7
  %78 = shl i8 %76, 1
  %79 = tail call zeroext i8 %3(i32 %56, i32 %18) #6
  %80 = xor i8 %77, %79
  store i8 %80, i8* %59, align 1
  br label %81

81:                                               ; preds = %73, %50
  %82 = phi i8 [ %78, %73 ], [ %53, %50 ]
  %83 = phi i32 [ %75, %73 ], [ %54, %50 ]
  %84 = phi i64 [ %74, %73 ], [ %55, %50 ]
  %85 = and i8 %16, 1
  %86 = icmp ne i8 %85, 0
  %87 = icmp eq i32 %18, 0
  %88 = and i1 %86, %87
  br i1 %88, label %96, label %89

89:                                               ; preds = %81
  br i1 %86, label %104, label %90

90:                                               ; preds = %89
  %91 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %5, align 8
  %92 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %91, i64 0, i32 3
  %93 = load i32, i32* %92, align 4
  %94 = add nsw i32 %93, -1
  %95 = icmp eq i32 %18, %94
  br i1 %95, label %96, label %106

96:                                               ; preds = %81, %90
  %97 = icmp eq i32 %17, 1
  br i1 %97, label %115, label %98

98:                                               ; preds = %96
  %99 = add nsw i32 %17, -2
  %100 = icmp eq i32 %99, 6
  %101 = select i1 %100, i32 5, i32 %99
  %102 = xor i1 %86, true
  %103 = zext i1 %102 to i8
  br label %108

104:                                              ; preds = %89
  %105 = add nsw i32 %18, -1
  br label %108

106:                                              ; preds = %90
  %107 = add nsw i32 %18, 1
  br label %108

108:                                              ; preds = %98, %106, %104
  %109 = phi i8 [ %103, %98 ], [ %16, %104 ], [ %16, %106 ]
  %110 = phi i32 [ %101, %98 ], [ %17, %104 ], [ %17, %106 ]
  %111 = phi i32 [ %18, %98 ], [ %105, %104 ], [ %107, %106 ]
  %112 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %5, align 8
  %113 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %112, i64 0, i32 3
  %114 = load i32, i32* %113, align 4
  br label %11

115:                                              ; preds = %96
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZNK15QRCodeGenerator18CountPenaltyPointsEv(%class.QRCodeGenerator* nocapture readonly) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 0
  %3 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %2, align 8
  %4 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %3, i64 0, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %85

7:                                                ; preds = %1
  %8 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 1, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = icmp eq i32 %5, 1
  %11 = add nsw i32 %5, -2
  %12 = zext i32 %11 to i64
  %13 = add nuw nsw i64 %12, 2
  br label %21

14:                                               ; preds = %37
  br i1 %6, label %15, label %85

15:                                               ; preds = %14
  %16 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 1, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = sext i32 %5 to i64
  %19 = icmp eq i32 %5, 1
  %20 = zext i32 %5 to i64
  br label %97

21:                                               ; preds = %37, %7
  %22 = phi i32 [ 0, %7 ], [ %48, %37 ]
  %23 = phi i64 [ 0, %7 ], [ %38, %37 ]
  %24 = phi i32 [ 0, %7 ], [ %40, %37 ]
  %25 = phi i32 [ 0, %7 ], [ %47, %37 ]
  %26 = getelementptr inbounds i8, i8* %9, i64 %23
  %27 = load i8, i8* %26, align 1
  %28 = and i8 %27, 1
  %29 = zext i8 %28 to i32
  %30 = add i32 %24, %29
  %31 = add i64 %23, 1
  br i1 %10, label %37, label %50

32:                                               ; preds = %78
  %33 = add i64 %13, %23
  %34 = icmp ugt i32 %80, 4
  %35 = add i32 %80, -2
  %36 = select i1 %34, i32 %35, i32 0
  br label %37

37:                                               ; preds = %32, %21
  %38 = phi i64 [ %31, %21 ], [ %33, %32 ]
  %39 = phi i32 [ %29, %21 ], [ %64, %32 ]
  %40 = phi i32 [ %30, %21 ], [ %69, %32 ]
  %41 = phi i32 [ %25, %21 ], [ %79, %32 ]
  %42 = phi i32 [ 0, %21 ], [ %36, %32 ]
  %43 = add i32 %42, %41
  %44 = and i32 %39, 127
  %45 = icmp eq i32 %44, 93
  %46 = add i32 %43, 40
  %47 = select i1 %45, i32 %46, i32 %43
  %48 = add nuw nsw i32 %22, 1
  %49 = icmp eq i32 %48, %5
  br i1 %49, label %14, label %21

50:                                               ; preds = %21, %78
  %51 = phi i64 [ %83, %78 ], [ %31, %21 ]
  %52 = phi i32 [ %82, %78 ], [ 1, %21 ]
  %53 = phi i32 [ %64, %78 ], [ %29, %21 ]
  %54 = phi i32 [ %69, %78 ], [ %30, %21 ]
  %55 = phi i32 [ %81, %78 ], [ %29, %21 ]
  %56 = phi i32 [ %80, %78 ], [ 0, %21 ]
  %57 = phi i32 [ %79, %78 ], [ %25, %21 ]
  %58 = getelementptr inbounds i8, i8* %9, i64 %51
  %59 = load i8, i8* %58, align 1
  %60 = and i8 %59, 1
  %61 = zext i8 %60 to i32
  %62 = shl nuw nsw i32 %53, 1
  %63 = and i32 %62, 2046
  %64 = or i32 %63, %61
  switch i32 %64, label %67 [
    i32 1488, label %65
    i32 93, label %65
  ]

65:                                               ; preds = %50, %50
  %66 = add i32 %57, 40
  br label %67

67:                                               ; preds = %50, %65
  %68 = phi i32 [ %66, %65 ], [ %57, %50 ]
  %69 = add i32 %54, %61
  %70 = icmp eq i32 %55, %61
  br i1 %70, label %71, label %73

71:                                               ; preds = %67
  %72 = add i32 %56, 1
  br label %78

73:                                               ; preds = %67
  %74 = icmp ugt i32 %56, 4
  %75 = add i32 %56, -2
  %76 = select i1 %74, i32 %75, i32 0
  %77 = add i32 %68, %76
  br label %78

78:                                               ; preds = %73, %71
  %79 = phi i32 [ %68, %71 ], [ %77, %73 ]
  %80 = phi i32 [ %72, %71 ], [ 0, %73 ]
  %81 = phi i32 [ %55, %71 ], [ %61, %73 ]
  %82 = add nuw nsw i32 %52, 1
  %83 = add i64 %51, 1
  %84 = icmp eq i32 %82, %5
  br i1 %84, label %32, label %50

85:                                               ; preds = %108, %1, %14
  %86 = phi i32 [ %40, %14 ], [ 0, %1 ], [ %40, %108 ]
  %87 = phi i32 [ %47, %14 ], [ 0, %1 ], [ %116, %108 ]
  %88 = add i32 %5, -1
  %89 = icmp sgt i32 %88, 0
  br i1 %89, label %90, label %156

90:                                               ; preds = %85
  %91 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 1, i32 0, i32 0
  %92 = sext i32 %5 to i64
  %93 = add i32 %5, -2
  %94 = zext i32 %93 to i64
  %95 = add nuw nsw i64 %94, 1
  %96 = load i8*, i8** %91, align 8
  br label %152

97:                                               ; preds = %108, %15
  %98 = phi i64 [ 0, %15 ], [ %117, %108 ]
  %99 = phi i32 [ %47, %15 ], [ %116, %108 ]
  %100 = getelementptr inbounds i8, i8* %17, i64 %98
  %101 = load i8, i8* %100, align 1
  %102 = and i8 %101, 1
  %103 = zext i8 %102 to i32
  br i1 %19, label %108, label %119

104:                                              ; preds = %146
  %105 = icmp ugt i32 %148, 4
  %106 = add i32 %148, -2
  %107 = select i1 %105, i32 %106, i32 0
  br label %108

108:                                              ; preds = %104, %97
  %109 = phi i32 [ %103, %97 ], [ %133, %104 ]
  %110 = phi i32 [ %99, %97 ], [ %147, %104 ]
  %111 = phi i32 [ 0, %97 ], [ %107, %104 ]
  %112 = add i32 %111, %110
  %113 = and i32 %109, 127
  %114 = icmp eq i32 %113, 93
  %115 = add i32 %112, 40
  %116 = select i1 %114, i32 %115, i32 %112
  %117 = add nuw nsw i64 %98, 1
  %118 = icmp eq i64 %117, %20
  br i1 %118, label %85, label %97

119:                                              ; preds = %97, %146
  %120 = phi i64 [ %126, %146 ], [ %98, %97 ]
  %121 = phi i32 [ %150, %146 ], [ 1, %97 ]
  %122 = phi i32 [ %133, %146 ], [ %103, %97 ]
  %123 = phi i32 [ %149, %146 ], [ %103, %97 ]
  %124 = phi i32 [ %148, %146 ], [ 0, %97 ]
  %125 = phi i32 [ %147, %146 ], [ %99, %97 ]
  %126 = add nsw i64 %120, %18
  %127 = getelementptr inbounds i8, i8* %17, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = and i8 %128, 1
  %130 = zext i8 %129 to i32
  %131 = shl nuw nsw i32 %122, 1
  %132 = and i32 %131, 2046
  %133 = or i32 %132, %130
  switch i32 %133, label %136 [
    i32 1488, label %134
    i32 93, label %134
  ]

134:                                              ; preds = %119, %119
  %135 = add i32 %125, 40
  br label %136

136:                                              ; preds = %119, %134
  %137 = phi i32 [ %135, %134 ], [ %125, %119 ]
  %138 = icmp eq i32 %123, %130
  br i1 %138, label %139, label %141

139:                                              ; preds = %136
  %140 = add i32 %124, 1
  br label %146

141:                                              ; preds = %136
  %142 = icmp ugt i32 %124, 4
  %143 = add i32 %124, -2
  %144 = select i1 %142, i32 %143, i32 0
  %145 = add i32 %137, %144
  br label %146

146:                                              ; preds = %141, %139
  %147 = phi i32 [ %137, %139 ], [ %145, %141 ]
  %148 = phi i32 [ %140, %139 ], [ 0, %141 ]
  %149 = phi i32 [ %123, %139 ], [ %130, %141 ]
  %150 = add nuw nsw i32 %121, 1
  %151 = icmp eq i32 %150, %5
  br i1 %151, label %104, label %119

152:                                              ; preds = %90, %171
  %153 = phi i32 [ 0, %90 ], [ %173, %171 ]
  %154 = phi i64 [ 0, %90 ], [ %172, %171 ]
  %155 = phi i32 [ %87, %90 ], [ %203, %171 ]
  br label %175

156:                                              ; preds = %171, %85
  %157 = phi i32 [ %87, %85 ], [ %203, %171 ]
  %158 = uitofp i32 %86 to double
  %159 = sitofp i32 %5 to double
  %160 = fmul double %159, %159
  %161 = fdiv double %158, %160
  %162 = fcmp olt double %161, 5.000000e-01
  %163 = fsub double 1.000000e+00, %161
  %164 = select i1 %162, double %163, double %161
  %165 = fadd double %164, -5.000000e-01
  %166 = fdiv double %165, 5.000000e-02
  %167 = tail call double @llvm.floor.f64(double %166)
  %168 = fptoui double %167 to i32
  %169 = mul i32 %168, 5
  %170 = add i32 %157, %169
  ret i32 %170

171:                                              ; preds = %202
  %172 = add nuw nsw i64 %95, %154
  %173 = add nuw nsw i32 %153, 1
  %174 = icmp eq i32 %173, %88
  br i1 %174, label %156, label %152

175:                                              ; preds = %202, %152
  %176 = phi i32 [ 0, %152 ], [ %204, %202 ]
  %177 = phi i64 [ %154, %152 ], [ %179, %202 ]
  %178 = phi i32 [ %155, %152 ], [ %203, %202 ]
  %179 = add i64 %177, 1
  %180 = getelementptr inbounds i8, i8* %96, i64 %177
  %181 = load i8, i8* %180, align 1
  %182 = and i8 %181, 1
  %183 = add i64 %177, 2
  %184 = getelementptr inbounds i8, i8* %96, i64 %183
  %185 = load i8, i8* %184, align 1
  %186 = and i8 %185, 1
  %187 = icmp eq i8 %186, %182
  br i1 %187, label %188, label %202

188:                                              ; preds = %175
  %189 = add i64 %179, %92
  %190 = getelementptr inbounds i8, i8* %96, i64 %189
  %191 = load i8, i8* %190, align 1
  %192 = and i8 %191, 1
  %193 = icmp eq i8 %192, %182
  br i1 %193, label %194, label %202

194:                                              ; preds = %188
  %195 = add i64 %189, 1
  %196 = getelementptr inbounds i8, i8* %96, i64 %195
  %197 = load i8, i8* %196, align 1
  %198 = and i8 %197, 1
  %199 = icmp eq i8 %198, %182
  %200 = add i32 %178, 3
  %201 = select i1 %199, i32 %200, i32 %178
  br label %202

202:                                              ; preds = %194, %188, %175
  %203 = phi i32 [ %178, %188 ], [ %178, %175 ], [ %201, %194 ]
  %204 = add nuw nsw i32 %176, 1
  %205 = icmp eq i32 %204, %88
  br i1 %205, label %171, label %175
}

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15QRCodeGenerator6fillAtEiimh(%class.QRCodeGenerator* nocapture readonly, i32, i32, i64, i8 zeroext) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 0
  %7 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %8 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %7, i64 0, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = mul nsw i32 %9, %2
  %11 = add nsw i32 %10, %1
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 1, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %12
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 %4, i64 %3, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15QRCodeGenerator6copyToEiiPKhm(%class.QRCodeGenerator* nocapture readonly, i32, i32, i8* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 0
  %7 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %8 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %7, i64 0, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = mul nsw i32 %9, %2
  %11 = add nsw i32 %10, %1
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 1, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 %3, i64 %4, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(1) i8* @_ZN15QRCodeGenerator2atEii(%class.QRCodeGenerator* nocapture readonly, i32, i32) local_unnamed_addr #8 align 2 {
  %4 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 0
  %5 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %4, align 8
  %6 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %5, i64 0, i32 3
  %7 = load i32, i32* %6, align 4
  %8 = mul nsw i32 %7, %2
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 1, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %10
  ret i8* %13
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(1) i8* @_ZN15QRCodeGenerator7clippedEii(%class.QRCodeGenerator* readonly, i32, i32) local_unnamed_addr #8 align 2 {
  %4 = icmp sgt i32 %1, -1
  br i1 %4, label %5, label %22

5:                                                ; preds = %3
  %6 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 0
  %7 = load %struct.QRVersionInfo*, %struct.QRVersionInfo** %6, align 8
  %8 = getelementptr inbounds %struct.QRVersionInfo, %struct.QRVersionInfo* %7, i64 0, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = icmp sgt i32 %9, %1
  %11 = icmp sgt i32 %2, -1
  %12 = and i1 %11, %10
  %13 = icmp sgt i32 %9, %2
  %14 = and i1 %13, %12
  br i1 %14, label %15, label %22

15:                                               ; preds = %5
  %16 = mul nsw i32 %9, %2
  %17 = add nsw i32 %16, %1
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 1, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 %18
  br label %24

22:                                               ; preds = %5, %3
  %23 = getelementptr inbounds %class.QRCodeGenerator, %class.QRCodeGenerator* %0, i64 0, i32 2
  br label %24

24:                                               ; preds = %22, %15
  %25 = phi i8* [ %21, %15 ], [ %23, %22 ]
  ret i8* %25
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i8 @_ZN15QRCodeGenerator7GF28MulEtt(i16 zeroext, i16 zeroext) local_unnamed_addr #2 align 2 {
  %3 = and i16 %1, 1
  %4 = sub nsw i16 0, %3
  %5 = and i16 %4, %0
  %6 = lshr i16 %1, 1
  %7 = shl i16 %0, 1
  %8 = and i16 %6, 1
  %9 = sub nsw i16 0, %8
  %10 = and i16 %7, %9
  %11 = xor i16 %10, %5
  %12 = lshr i16 %1, 2
  %13 = shl i16 %0, 2
  %14 = and i16 %12, 1
  %15 = sub nsw i16 0, %14
  %16 = and i16 %13, %15
  %17 = xor i16 %16, %11
  %18 = lshr i16 %1, 3
  %19 = shl i16 %0, 3
  %20 = and i16 %18, 1
  %21 = sub nsw i16 0, %20
  %22 = and i16 %19, %21
  %23 = xor i16 %22, %17
  %24 = lshr i16 %1, 4
  %25 = shl i16 %0, 4
  %26 = and i16 %24, 1
  %27 = sub nsw i16 0, %26
  %28 = and i16 %25, %27
  %29 = xor i16 %28, %23
  %30 = lshr i16 %1, 5
  %31 = shl i16 %0, 5
  %32 = and i16 %30, 1
  %33 = sub nsw i16 0, %32
  %34 = and i16 %31, %33
  %35 = xor i16 %34, %29
  %36 = lshr i16 %1, 6
  %37 = shl i16 %0, 6
  %38 = and i16 %36, 1
  %39 = sub nsw i16 0, %38
  %40 = and i16 %37, %39
  %41 = xor i16 %40, %35
  %42 = lshr i16 %1, 7
  %43 = shl i16 %0, 7
  %44 = and i16 %42, 1
  %45 = sub nsw i16 0, %44
  %46 = and i16 %43, %45
  %47 = xor i16 %46, %41
  %48 = ashr i16 %47, 15
  %49 = and i16 %48, -29056
  %50 = xor i16 %47, %49
  %51 = lshr i16 %50, 14
  %52 = sub nsw i16 0, %51
  %53 = and i16 %52, 18240
  %54 = xor i16 %50, %53
  %55 = lshr i16 %54, 13
  %56 = sub nsw i16 0, %55
  %57 = and i16 %56, 9120
  %58 = xor i16 %54, %57
  %59 = lshr i16 %58, 12
  %60 = sub nsw i16 0, %59
  %61 = and i16 %60, 4560
  %62 = xor i16 %58, %61
  %63 = lshr i16 %62, 11
  %64 = sub nsw i16 0, %63
  %65 = and i16 %64, 2280
  %66 = xor i16 %62, %65
  %67 = lshr i16 %66, 10
  %68 = sub nsw i16 0, %67
  %69 = and i16 %68, 1140
  %70 = xor i16 %66, %69
  %71 = lshr i16 %70, 9
  %72 = sub nsw i16 0, %71
  %73 = and i16 %72, 570
  %74 = xor i16 %70, %73
  %75 = lshr i16 %74, 8
  %76 = sub nsw i16 0, %75
  %77 = and i16 %76, 29
  %78 = xor i16 %74, %77
  %79 = trunc i16 %78 to i8
  ret i8 %79
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #9

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

declare i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8*, void (%"class.std::__1::basic_ostream"*, i8*)*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZZN7logging15CheckOpValueStrIPKhEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*) #10 comdat align 2 {
  %3 = bitcast i8* %1 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = tail call i64 @strlen(i8* %4) #6
  %6 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* %4, i64 %5) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #6
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #6
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #6
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #6
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #6
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #6
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #6
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #6
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #6
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #6
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #15
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #6
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #6
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #15
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #6
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #6
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #11

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #12

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #4

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #3

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #13

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base25CheckedContiguousIteratorIKhEC2EPS1_S3_S3_(%"class.base::CheckedContiguousIterator"*, i8*, i8*, i8*) unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca %"class.logging::CheckOpResult", align 8
  %11 = alloca %"class.logging::CheckError", align 8
  %12 = alloca %"class.logging::CheckOpResult", align 8
  %13 = alloca %"class.logging::CheckError", align 8
  store i8* %1, i8** %7, align 8
  store i8* %2, i8** %8, align 8
  store i8* %3, i8** %9, align 8
  %14 = ptrtoint i8* %1 to i64
  %15 = bitcast %"class.base::CheckedContiguousIterator"* %0 to i64*
  store i64 %14, i64* %15, align 8
  %16 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %0, i64 0, i32 1
  %17 = ptrtoint i8* %2 to i64
  %18 = bitcast i8** %16 to i64*
  store i64 %17, i64* %18, align 8
  %19 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %0, i64 0, i32 2
  %20 = ptrtoint i8* %3 to i64
  %21 = bitcast i8** %19 to i64*
  store i64 %20, i64* %21, align 8
  %22 = bitcast %"class.logging::CheckOpResult"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #6
  %23 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %10, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %23, align 8
  %24 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24)
  %25 = icmp ugt i8* %1, %2
  br i1 %25, label %27, label %26

26:                                               ; preds = %4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24)
  store i8* null, i8** %23, align 8
  br label %38

27:                                               ; preds = %4
  %28 = bitcast i8** %7 to i8*
  %29 = call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* nonnull %28, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIPKhEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_) #6
  %30 = bitcast i8** %8 to i8*
  %31 = call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* nonnull %30, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIPKhEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %6, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i64 0, i64 0), i8* %29, i8* %31) #6
  %32 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24)
  store i8* %33, i8** %23, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %27
  %36 = bitcast %"class.logging::CheckError"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %11, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0), i32 45, %"class.logging::CheckOpResult"* nonnull %10) #6
  %37 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %11) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #6
  br label %38

38:                                               ; preds = %26, %27, %35
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #6
  %39 = bitcast %"class.logging::CheckOpResult"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #6
  %40 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %12, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %40, align 8
  %41 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41)
  %42 = load i8*, i8** %8, align 8
  %43 = load i8*, i8** %9, align 8
  %44 = icmp ugt i8* %42, %43
  br i1 %44, label %46, label %45

45:                                               ; preds = %38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  store i8* null, i8** %40, align 8
  br label %57

46:                                               ; preds = %38
  %47 = bitcast i8** %8 to i8*
  %48 = call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* nonnull %47, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIPKhEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_) #6
  %49 = bitcast i8** %9 to i8*
  %50 = call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* nonnull %49, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIPKhEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %5, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), i8* %48, i8* %50) #6
  %51 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  %52 = load i8*, i8** %51, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  store i8* %52, i8** %40, align 8
  %53 = icmp eq i8* %52, null
  br i1 %53, label %57, label %54

54:                                               ; preds = %46
  %55 = bitcast %"class.logging::CheckError"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %55) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %13, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0), i32 46, %"class.logging::CheckOpResult"* nonnull %12) #6
  %56 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %13) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %13) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %55) #6
  br label %57

57:                                               ; preds = %45, %46, %54
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #6
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i8 @_ZN12_GLOBAL__N_113MaskFunction0Eii(i32, i32) #2 {
  %3 = add nsw i32 %1, %0
  %4 = trunc i32 %3 to i8
  %5 = and i8 %4, 1
  %6 = xor i8 %5, 1
  ret i8 %6
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i8 @_ZN12_GLOBAL__N_113MaskFunction1Eii(i32, i32) #2 {
  %3 = trunc i32 %1 to i8
  %4 = and i8 %3, 1
  %5 = xor i8 %4, 1
  ret i8 %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i8 @_ZN12_GLOBAL__N_113MaskFunction2Eii(i32, i32) #2 {
  %3 = srem i32 %0, 3
  %4 = icmp eq i32 %3, 0
  %5 = zext i1 %4 to i8
  ret i8 %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i8 @_ZN12_GLOBAL__N_113MaskFunction3Eii(i32, i32) #2 {
  %3 = add nsw i32 %1, %0
  %4 = srem i32 %3, 3
  %5 = icmp eq i32 %4, 0
  %6 = zext i1 %5 to i8
  ret i8 %6
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i8 @_ZN12_GLOBAL__N_113MaskFunction4Eii(i32, i32) #2 {
  %3 = sdiv i32 %1, 2
  %4 = sdiv i32 %0, 3
  %5 = add nsw i32 %3, %4
  %6 = trunc i32 %5 to i8
  %7 = and i8 %6, 1
  %8 = xor i8 %7, 1
  ret i8 %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i8 @_ZN12_GLOBAL__N_113MaskFunction5Eii(i32, i32) #2 {
  %3 = mul nsw i32 %1, %0
  %4 = srem i32 %3, 2
  %5 = srem i32 %3, 3
  %6 = sub nsw i32 0, %5
  %7 = icmp eq i32 %4, %6
  %8 = zext i1 %7 to i8
  ret i8 %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i8 @_ZN12_GLOBAL__N_113MaskFunction6Eii(i32, i32) #2 {
  %3 = mul nsw i32 %1, %0
  %4 = srem i32 %3, 3
  %5 = add i32 %4, %3
  %6 = trunc i32 %5 to i8
  %7 = and i8 %6, 1
  %8 = xor i8 %7, 1
  ret i8 %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i8 @_ZN12_GLOBAL__N_113MaskFunction7Eii(i32, i32) #2 {
  %3 = add nsw i32 %1, %0
  %4 = mul nsw i32 %1, %0
  %5 = srem i32 %4, 3
  %6 = add i32 %3, %5
  %7 = trunc i32 %6 to i8
  %8 = and i8 %7, 1
  %9 = xor i8 %8, 1
  ret i8 %9
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #14

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) i8* @_ZNK4base25CheckedContiguousIteratorIKhEdeEv(%"class.base::CheckedContiguousIterator"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #6
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %0, i64 0, i32 2
  %9 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9)
  %10 = load i8*, i8** %7, align 8
  %11 = load i8*, i8** %8, align 8
  %12 = icmp eq i8* %10, %11
  br i1 %12, label %14, label %13

13:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* null, i8** %6, align 8
  br label %25

14:                                               ; preds = %1
  %15 = bitcast i8** %7 to i8*
  %16 = tail call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* %15, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIPKhEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_) #6
  %17 = bitcast i8** %8 to i8*
  %18 = tail call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* %17, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIPKhEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14, i64 0, i64 0), i8* %16, i8* %18) #6
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* %20, i8** %6, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %25, label %22

22:                                               ; preds = %14
  %23 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0), i32 173, %"class.logging::CheckOpResult"* nonnull %3) #6
  %24 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #6
  br label %25

25:                                               ; preds = %13, %14, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #6
  %26 = load i8*, i8** %7, align 8
  ret i8* %26
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"class.base::CheckedContiguousIterator"* @_ZN4base25CheckedContiguousIteratorIKhEppEv(%"class.base::CheckedContiguousIterator"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #6
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %0, i64 0, i32 2
  %9 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9)
  %10 = load i8*, i8** %7, align 8
  %11 = load i8*, i8** %8, align 8
  %12 = icmp eq i8* %10, %11
  br i1 %12, label %14, label %13

13:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* null, i8** %6, align 8
  br label %25

14:                                               ; preds = %1
  %15 = bitcast i8** %7 to i8*
  %16 = tail call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* %15, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIPKhEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_) #6
  %17 = bitcast i8** %8 to i8*
  %18 = tail call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* %17, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIPKhEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14, i64 0, i64 0), i8* %16, i8* %18) #6
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* %20, i8** %6, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %25, label %22

22:                                               ; preds = %14
  %23 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0), i32 110, %"class.logging::CheckOpResult"* nonnull %3) #6
  %24 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #6
  br label %25

25:                                               ; preds = %13, %14, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #6
  %26 = load i8*, i8** %7, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %27, i8** %7, align 8
  ret %"class.base::CheckedContiguousIterator"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK4base25CheckedContiguousIteratorIKhE15CheckComparableERKS2_(%"class.base::CheckedContiguousIterator"*, %"class.base::CheckedContiguousIterator"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #6
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %0, i64 0, i32 0
  %12 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %1, i64 0, i32 0
  %13 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13)
  %14 = load i8*, i8** %11, align 8
  %15 = load i8*, i8** %12, align 8
  %16 = icmp eq i8* %14, %15
  br i1 %16, label %17, label %18

17:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13)
  store i8* null, i8** %10, align 8
  br label %29

18:                                               ; preds = %2
  %19 = bitcast %"class.base::CheckedContiguousIterator"* %0 to i8*
  %20 = tail call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* %19, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIPKhEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_) #6
  %21 = bitcast %"class.base::CheckedContiguousIterator"* %1 to i8*
  %22 = tail call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* %21, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIPKhEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i8* %20, i8* %22) #6
  %23 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13)
  store i8* %24, i8** %10, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %29, label %26

26:                                               ; preds = %18
  %27 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0), i32 206, %"class.logging::CheckOpResult"* nonnull %5) #6
  %28 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #6
  br label %29

29:                                               ; preds = %17, %18, %26
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #6
  %30 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #6
  %31 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %31, align 8
  %32 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %0, i64 0, i32 2
  %33 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %1, i64 0, i32 2
  %34 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34)
  %35 = load i8*, i8** %32, align 8
  %36 = load i8*, i8** %33, align 8
  %37 = icmp eq i8* %35, %36
  br i1 %37, label %38, label %39

38:                                               ; preds = %29
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34)
  store i8* null, i8** %31, align 8
  br label %50

39:                                               ; preds = %29
  %40 = bitcast i8** %32 to i8*
  %41 = call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* %40, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIPKhEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_) #6
  %42 = bitcast i8** %33 to i8*
  %43 = call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* %42, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIPKhEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.13, i64 0, i64 0), i8* %41, i8* %43) #6
  %44 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %45 = load i8*, i8** %44, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34)
  store i8* %45, i8** %31, align 8
  %46 = icmp eq i8* %45, null
  br i1 %46, label %50, label %47

47:                                               ; preds = %39
  %48 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0), i32 207, %"class.logging::CheckOpResult"* nonnull %7) #6
  %49 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48) #6
  br label %50

50:                                               ; preds = %38, %39, %47
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #6
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #16
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #15
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #6
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #6
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #15
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector.16"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::vector"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::vector"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.std::__1::vector"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.std::__1::vector", %"class.std::__1::vector"* %13, i64 %18, i32 0, i32 0
  %20 = bitcast i8** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 24
  %25 = add i64 %23, 24
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #6
  %27 = ptrtoint %"class.std::__1::vector"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %123

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector.16"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 24
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 768614336404564650
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector.16"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #16
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 24
  %42 = icmp ult i64 %41, 384307168202282325
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 768614336404564650, %39 ]
  %50 = mul i64 %49, 24
  %51 = tail call i8* @_Znwm(i64 %50) #15
  %52 = bitcast i8* %51 to %"class.std::__1::vector"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"class.std::__1::vector"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %55, i64 %34
  %57 = ptrtoint %"class.std::__1::vector"* %56 to i64
  %58 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %55, i64 %54
  %59 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %56, i64 %1
  br label %60

60:                                               ; preds = %53, %60
  %61 = phi %"class.std::__1::vector"* [ %64, %60 ], [ %56, %53 ]
  %62 = phi i64 [ %65, %60 ], [ %57, %53 ]
  %63 = inttoptr i64 %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #6
  %64 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %61, i64 1
  %65 = ptrtoint %"class.std::__1::vector"* %64 to i64
  %66 = icmp eq %"class.std::__1::vector"* %59, %64
  br i1 %66, label %67, label %60

67:                                               ; preds = %60
  %68 = ptrtoint %"class.std::__1::vector"* %58 to i64
  %69 = ptrtoint %"class.std::__1::vector"* %59 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 0
  %71 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %70, align 8
  %72 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %6, align 8
  %73 = icmp eq %"class.std::__1::vector"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"class.std::__1::vector"* %71 to i64
  br label %101

76:                                               ; preds = %67, %76
  %77 = phi %"class.std::__1::vector"* [ %79, %76 ], [ %56, %67 ]
  %78 = phi %"class.std::__1::vector"* [ %80, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %78, i64 -1
  %81 = bitcast %"class.std::__1::vector"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #6
  %82 = bitcast %"class.std::__1::vector"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.std::__1::vector"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %78, i64 -1, i32 0, i32 1
  %86 = bitcast i8** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %77, i64 -1, i32 0, i32 1
  %89 = bitcast i8** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %78, i64 -1, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast i8** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %77, i64 -1, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast i8** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.std::__1::vector"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #6
  %96 = icmp eq %"class.std::__1::vector"* %80, %71
  br i1 %96, label %97, label %76

97:                                               ; preds = %76
  %98 = ptrtoint %"class.std::__1::vector"* %79 to i64
  %99 = load i64, i64* %31, align 8
  %100 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %6, align 8
  br label %101

101:                                              ; preds = %74, %97
  %102 = phi %"class.std::__1::vector"* [ %71, %74 ], [ %100, %97 ]
  %103 = phi i64 [ %57, %74 ], [ %98, %97 ]
  %104 = phi i64 [ %75, %74 ], [ %99, %97 ]
  store i64 %103, i64* %31, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %105 = inttoptr i64 %104 to %"class.std::__1::vector"*
  %106 = icmp eq %"class.std::__1::vector"* %102, %105
  br i1 %106, label %119, label %107

107:                                              ; preds = %101, %117
  %108 = phi %"class.std::__1::vector"* [ %109, %117 ], [ %102, %101 ]
  %109 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %108, i64 -1
  %110 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %109, i64 0, i32 0, i32 0
  %111 = load i8*, i8** %110, align 8
  %112 = icmp eq i8* %111, null
  br i1 %112, label %117, label %113

113:                                              ; preds = %107
  %114 = ptrtoint i8* %111 to i64
  %115 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %108, i64 -1, i32 0, i32 1
  %116 = bitcast i8** %115 to i64*
  store i64 %114, i64* %116, align 8
  tail call void @_ZdlPv(i8* nonnull %111) #15
  br label %117

117:                                              ; preds = %113, %107
  %118 = icmp eq %"class.std::__1::vector"* %109, %105
  br i1 %118, label %119, label %107

119:                                              ; preds = %117, %101
  %120 = icmp eq i64 %104, 0
  br i1 %120, label %123, label %121

121:                                              ; preds = %119
  %122 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %122) #15
  br label %123

123:                                              ; preds = %121, %119, %28
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { builtin nounwind }
attributes #16 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
