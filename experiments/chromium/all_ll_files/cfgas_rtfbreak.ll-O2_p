; ModuleID = '../../third_party/pdfium/xfa/fgas/layout/cfgas_rtfbreak.cpp'
source_filename = "../../third_party/pdfium/xfa/fgas/layout/cfgas_rtfbreak.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFGAS_RTFBreak = type { %class.CFGAS_Break, i8, i8, %"class.std::__1::vector.80", %"class.fxcrt::RetainPtr.49" }
%class.CFGAS_Break = type { i32 (...)**, i8, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.fxcrt::RetainPtr", %"class.fxcrt::UnownedPtr.46", i8, [7 x i8], [2 x %class.CFGAS_BreakLine] }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CFGAS_GEFont* }
%class.CFGAS_GEFont = type { %"class.fxcrt::Retainable", %"class.pdfium::Optional", %"class.fxcrt::RetainPtr.0", %"class.fxcrt::MaybeOwned", %"class.std::__1::unique_ptr.9", %"class.std::__1::map", %"class.std::__1::map.21", %"class.std::__1::vector", %"class.std::__1::map.35" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.pdfium::Optional" = type { %"class.pdfium::internal::OptionalBase" }
%"class.pdfium::internal::OptionalBase" = type { %"struct.pdfium::internal::OptionalStorage" }
%"struct.pdfium::internal::OptionalStorage" = type { %"struct.pdfium::internal::OptionalStorageBase" }
%"struct.pdfium::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.fxcrt::RetainPtr.0" = type { %"class.std::__1::unique_ptr.1" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %class.CPDF_Font* }
%class.CPDF_Font = type opaque
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr.5", %"class.fxcrt::UnownedPtr" }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %class.CFX_Font* }
%class.CFX_Font = type opaque
%"class.fxcrt::UnownedPtr" = type { %class.CFX_Font* }
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %class.CFX_UnicodeEncodingEx* }
%class.CFX_UnicodeEncodingEx = type opaque
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.15", %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { i64 }
%"class.std::__1::map.21" = type { %"class.std::__1::__tree.22" }
%"class.std::__1::__tree.22" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.23", %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.fxcrt::RetainPtr"*, %"class.fxcrt::RetainPtr"*, %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.fxcrt::RetainPtr"* }
%"class.std::__1::map.35" = type { %"class.std::__1::__tree.36" }
%"class.std::__1::__tree.36" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.37", %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.fxcrt::UnownedPtr.46" = type { %class.CFGAS_BreakLine* }
%class.CFGAS_BreakLine = type <{ %"class.std::__1::vector.47", %"class.std::__1::vector.72", i32, i32, i32, [4 x i8] }>
%"class.std::__1::vector.47" = type { %"class.std::__1::__vector_base.48" }
%"class.std::__1::__vector_base.48" = type { %class.CFGAS_Char*, %class.CFGAS_Char*, %"class.std::__1::__compressed_pair.67" }
%class.CFGAS_Char = type <{ i8, i8, i8, i8, i32, i32, i16, i16, i16, [2 x i8], i32, i32, [4 x i8], %"class.fxcrt::RetainPtr.49", i16, [2 x i8], i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { %class.CFGAS_Char* }
%"class.std::__1::vector.72" = type { %"class.std::__1::__vector_base.73" }
%"class.std::__1::__vector_base.73" = type { %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece*, %"class.std::__1::__compressed_pair.75" }
%class.CFGAS_BreakPiece = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.fxcrt::UnownedPtr.74", %"class.fxcrt::RetainPtr.49" }
%"class.fxcrt::UnownedPtr.74" = type { %"class.std::__1::vector.47"* }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %class.CFGAS_BreakPiece* }
%"class.std::__1::vector.80" = type { %"class.std::__1::__vector_base.81" }
%"class.std::__1::__vector_base.81" = type { i32*, i32*, %"class.std::__1::__compressed_pair.82" }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { i32* }
%"class.fxcrt::RetainPtr.49" = type { %"class.std::__1::unique_ptr.50" }
%"class.std::__1::unique_ptr.50" = type { %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %class.CFGAS_TextUserData* }
%class.CFGAS_TextUserData = type { %"class.fxcrt::Retainable", %"class.fxcrt::RetainPtr.53", %"class.fxcrt::RetainPtr.59" }
%"class.fxcrt::RetainPtr.53" = type { %"class.std::__1::unique_ptr.54" }
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %class.CFX_CSSComputedStyle* }
%class.CFX_CSSComputedStyle = type opaque
%"class.fxcrt::RetainPtr.59" = type { %"class.std::__1::unique_ptr.60" }
%"class.std::__1::unique_ptr.60" = type { %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %class.CFGAS_LinkUserData* }
%class.CFGAS_LinkUserData = type opaque
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.93" }
%"struct.std::__1::__split_buffer" = type { %struct.FX_TPO**, %struct.FX_TPO**, %struct.FX_TPO**, %"class.std::__1::__compressed_pair.88" }
%struct.FX_TPO = type { i32, i32 }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89" }
%"struct.std::__1::__compressed_pair_elem.89" = type { %struct.FX_TPO** }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__less.134" = type { i8 }
%class.CFGAS_TextPiece = type { %"class.fxcrt::WideString", %"class.std::__1::vector.80", i32, i32, i32, i32, float, %class.CFX_RectF, %"class.fxcrt::RetainPtr" }
%"class.fxcrt::WideString" = type { %"class.fxcrt::RetainPtr.101" }
%"class.fxcrt::RetainPtr.101" = type { %"class.std::__1::unique_ptr.102" }
%"class.std::__1::unique_ptr.102" = type { %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i32], [4 x i8] }>
%class.CFX_RectF = type { float, float, float, float }
%"class.std::__1::vector.107" = type { %"class.std::__1::__vector_base.108" }
%"class.std::__1::__vector_base.108" = type { %class.TextCharPos*, %class.TextCharPos*, %"class.std::__1::__compressed_pair.109" }
%class.TextCharPos = type { %class.CFX_PTemplate, i32, i32, i32, i32, i8, i8, [4 x float] }
%class.CFX_PTemplate = type { float, float }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %class.TextCharPos* }
%"struct.std::__1::__split_buffer.126" = type { %struct.FX_TPO**, %struct.FX_TPO**, %struct.FX_TPO**, %"class.std::__1::__compressed_pair.127" }
%"class.std::__1::__compressed_pair.127" = type { %"struct.std::__1::__compressed_pair_elem.89", %"struct.std::__1::__compressed_pair_elem.128" }
%"struct.std::__1::__compressed_pair_elem.128" = type { %"class.std::__1::allocator.91"* }
%"class.std::__1::allocator.91" = type { i8 }
%"class.std::__1::__deque_iterator" = type { %struct.FX_TPO**, %struct.FX_TPO* }

$_ZNSt3__16vectorIiNS_9allocatorIiEEE6insertENS_11__wrap_iterIPKiEERS5_ = comdat any

$_ZNSt3__16vectorI10CFGAS_CharNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRwRiS7_EEEvDpOT_ = comdat any

$_ZNSt3__16vectorI16CFGAS_BreakPieceNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_ = comdat any

$_ZNSt3__15dequeI6FX_TPONS_9allocatorIS1_EEE19__add_back_capacityEv = comdat any

$_ZNSt3__114__split_bufferIP6FX_TPONS_9allocatorIS2_EEE9push_backEOS2_ = comdat any

$_ZNSt3__114__split_bufferIP6FX_TPONS_9allocatorIS2_EEE10push_frontEOS2_ = comdat any

$_ZNSt3__114__split_bufferIP6FX_TPORNS_9allocatorIS2_EEE10push_frontERKS2_ = comdat any

$_ZNSt3__16__sortIRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEvT0_SA_T_ = comdat any

$_ZNSt3__17__sort4IRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEjT0_SA_SA_SA_T_ = comdat any

$_ZNSt3__118__insertion_sort_3IRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEvT0_SA_T_ = comdat any

$_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEbT0_SA_T_ = comdat any

@_ZTV14CFGAS_RTFBreak = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CFGAS_RTFBreak*)* @_ZN14CFGAS_RTFBreakD2Ev to i8*), i8* bitcast (void (%class.CFGAS_RTFBreak*)* @_ZN14CFGAS_RTFBreakD0Ev to i8*)] }, align 8
@_ZN11CFGAS_Break17kConversionFactorE = external local_unnamed_addr constant float, align 4

@_ZN14CFGAS_RTFBreakC1Ej = hidden unnamed_addr alias void (%class.CFGAS_RTFBreak*, i32), void (%class.CFGAS_RTFBreak*, i32)* @_ZN14CFGAS_RTFBreakC2Ej
@_ZN14CFGAS_RTFBreakD1Ev = hidden unnamed_addr alias void (%class.CFGAS_RTFBreak*), void (%class.CFGAS_RTFBreak*)* @_ZN14CFGAS_RTFBreakD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CFGAS_RTFBreakC2Ej(%class.CFGAS_RTFBreak*, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0
  tail call void @_ZN11CFGAS_BreakC2Ej(%class.CFGAS_Break* %3, i32 %1) #11
  %4 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV14CFGAS_RTFBreak, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 1
  store i8 0, i8* %5, align 8
  %6 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 2
  store i8 0, i8* %6, align 1
  %7 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 3
  %8 = bitcast %"class.std::__1::vector.80"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 32, i1 false)
  tail call void @_ZN11CFGAS_Break14SetBreakStatusEv(%class.CFGAS_Break* %3) #11
  %9 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 5
  %10 = load i32, i32* %9, align 8
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  store i8 %12, i8* %5, align 8
  ret void
}

declare void @_ZN11CFGAS_BreakC2Ej(%class.CFGAS_Break*, i32) unnamed_addr #1

declare void @_ZN11CFGAS_Break14SetBreakStatusEv(%class.CFGAS_Break*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CFGAS_RTFBreakD2Ev(%class.CFGAS_RTFBreak*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV14CFGAS_RTFBreak, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %4 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %3, align 8
  store %class.CFGAS_TextUserData* null, %class.CFGAS_TextUserData** %3, align 8
  %5 = icmp eq %class.CFGAS_TextUserData* %4, null
  br i1 %5, label %17, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %4, i64 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = add nsw i64 %8, -1
  store i64 %9, i64* %7, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %4, i64 0, i32 0
  %13 = bitcast %class.CFGAS_TextUserData* %4 to void (%"class.fxcrt::Retainable"*)***
  %14 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %14, i64 1
  %16 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %15, align 8
  tail call void %16(%"class.fxcrt::Retainable"* nonnull %12) #11
  br label %17

17:                                               ; preds = %1, %6, %11
  %18 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 3, i32 0, i32 0
  %19 = load i32*, i32** %18, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %17
  %22 = ptrtoint i32* %19 to i64
  %23 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 3, i32 0, i32 1
  %24 = bitcast i32** %23 to i64*
  store i64 %22, i64* %24, align 8
  %25 = bitcast i32* %19 to i8*
  tail call void @_ZdlPv(i8* %25) #12
  br label %26

26:                                               ; preds = %17, %21
  %27 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0
  tail call void @_ZN11CFGAS_BreakD2Ev(%class.CFGAS_Break* %27) #11
  ret void
}

; Function Attrs: nounwind
declare void @_ZN11CFGAS_BreakD2Ev(%class.CFGAS_Break*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CFGAS_RTFBreakD0Ev(%class.CFGAS_RTFBreak*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV14CFGAS_RTFBreak, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %4 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %3, align 8
  store %class.CFGAS_TextUserData* null, %class.CFGAS_TextUserData** %3, align 8
  %5 = icmp eq %class.CFGAS_TextUserData* %4, null
  br i1 %5, label %17, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %4, i64 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = add nsw i64 %8, -1
  store i64 %9, i64* %7, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %4, i64 0, i32 0
  %13 = bitcast %class.CFGAS_TextUserData* %4 to void (%"class.fxcrt::Retainable"*)***
  %14 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %14, i64 1
  %16 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %15, align 8
  tail call void %16(%"class.fxcrt::Retainable"* nonnull %12) #11
  br label %17

17:                                               ; preds = %11, %6, %1
  %18 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 3, i32 0, i32 0
  %19 = load i32*, i32** %18, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %17
  %22 = ptrtoint i32* %19 to i64
  %23 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 3, i32 0, i32 1
  %24 = bitcast i32** %23 to i64*
  store i64 %22, i64* %24, align 8
  %25 = bitcast i32* %19 to i8*
  tail call void @_ZdlPv(i8* %25) #12
  br label %26

26:                                               ; preds = %17, %21
  %27 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0
  tail call void @_ZN11CFGAS_BreakD2Ev(%class.CFGAS_Break* %27) #11
  %28 = bitcast %class.CFGAS_RTFBreak* %0 to i8*
  tail call void @_ZdlPv(i8* %28) #12
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CFGAS_RTFBreak15SetLineStartPosEf(%class.CFGAS_RTFBreak* nocapture readonly, float) local_unnamed_addr #0 align 2 {
  %3 = load float, float* @_ZN11CFGAS_Break17kConversionFactorE, align 4
  %4 = fmul float %3, %1
  %5 = tail call i32 @FXSYS_roundf(float %4) #11
  %6 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 7
  %7 = load i32, i32* %6, align 4
  %8 = icmp slt i32 %7, %5
  %9 = select i1 %8, i32 %7, i32 %5
  %10 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 6
  %11 = load i32, i32* %10, align 4
  %12 = icmp slt i32 %9, %11
  %13 = select i1 %12, i32 %11, i32 %9
  %14 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 16, i32 0
  %15 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %14, align 8
  %16 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %15, i64 0, i32 2
  store i32 %13, i32* %16, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare i32 @FXSYS_roundf(float) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CFGAS_RTFBreak16AddPositionedTabEf(%class.CFGAS_RTFBreak*, float) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #11
  %5 = load float, float* @_ZN11CFGAS_Break17kConversionFactorE, align 4
  %6 = fmul float %5, %1
  %7 = tail call i32 @FXSYS_roundf(float %6) #11
  %8 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 6
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, %7
  %11 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 7
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, %10
  %14 = select i1 %13, i32 %12, i32 %10
  store i32 %14, i32* %3, align 4
  %15 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 3
  %16 = getelementptr inbounds %"class.std::__1::vector.80", %"class.std::__1::vector.80"* %15, i64 0, i32 0, i32 0
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 3, i32 0, i32 1
  %19 = load i32*, i32** %18, align 8
  %20 = ptrtoint i32* %17 to i64
  %21 = ptrtoint i32* %19 to i64
  %22 = sub i64 %21, %20
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %39, label %24

24:                                               ; preds = %2
  %25 = ashr exact i64 %22, 2
  br label %26

26:                                               ; preds = %26, %24
  %27 = phi i32* [ %17, %24 ], [ %37, %26 ]
  %28 = phi i64 [ %25, %24 ], [ %36, %26 ]
  %29 = lshr i64 %28, 1
  %30 = getelementptr inbounds i32, i32* %27, i64 %29
  %31 = load i32, i32* %30, align 4
  %32 = icmp slt i32 %31, %14
  %33 = getelementptr inbounds i32, i32* %30, i64 1
  %34 = xor i64 %29, -1
  %35 = add i64 %28, %34
  %36 = select i1 %32, i64 %35, i64 %29
  %37 = select i1 %32, i32* %33, i32* %27
  %38 = icmp eq i64 %36, 0
  br i1 %38, label %39, label %26

39:                                               ; preds = %26, %2
  %40 = phi i32* [ %17, %2 ], [ %37, %26 ]
  %41 = icmp eq i32* %40, %19
  br i1 %41, label %45, label %42

42:                                               ; preds = %39
  %43 = load i32, i32* %40, align 4
  %44 = icmp eq i32 %43, %14
  br i1 %44, label %47, label %45

45:                                               ; preds = %39, %42
  %46 = call i32* @_ZNSt3__16vectorIiNS_9allocatorIiEEE6insertENS_11__wrap_iterIPKiEERS5_(%"class.std::__1::vector.80"* %15, i32* %40, i32* nonnull dereferenceable(4) %3)
  br label %47

47:                                               ; preds = %42, %45
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZNSt3__16vectorIiNS_9allocatorIiEEE6insertENS_11__wrap_iterIPKiEERS5_(%"class.std::__1::vector.80"*, i32*, i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i32* %1 to i64
  %5 = bitcast i32* %1 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector.80", %"class.std::__1::vector.80"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::vector.80", %"class.std::__1::vector.80"* %0, i64 0, i32 0, i32 1
  %8 = load i32*, i32** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.80", %"class.std::__1::vector.80"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = load i32*, i32** %9, align 8
  %11 = icmp ult i32* %8, %10
  %12 = ptrtoint i32* %8 to i64
  %13 = ptrtoint i32* %10 to i64
  br i1 %11, label %14, label %166

14:                                               ; preds = %3
  %15 = icmp eq i32* %8, %1
  br i1 %15, label %16, label %21

16:                                               ; preds = %14
  %17 = load i32, i32* %2, align 4
  store i32 %17, i32* %1, align 4
  %18 = getelementptr inbounds i32, i32* %1, i64 1
  %19 = ptrtoint i32* %18 to i64
  %20 = bitcast i32** %7 to i64*
  store i64 %19, i64* %20, align 8
  br label %410

21:                                               ; preds = %14
  %22 = getelementptr inbounds i32, i32* %1, i64 1
  %23 = ptrtoint i32* %22 to i64
  %24 = sub i64 %12, %23
  %25 = ashr exact i64 %24, 2
  %26 = getelementptr inbounds i32, i32* %1, i64 %25
  %27 = bitcast i32** %7 to i64*
  %28 = icmp ult i32* %26, %8
  br i1 %28, label %29, label %142

29:                                               ; preds = %21
  %30 = sub nsw i64 0, %25
  %31 = getelementptr i32, i32* %8, i64 %30
  %32 = bitcast i32* %31 to i8*
  %33 = xor i64 %4, -1
  %34 = getelementptr i8, i8* %32, i64 %33
  %35 = ptrtoint i8* %34 to i64
  %36 = lshr i64 %35, 2
  %37 = add nuw nsw i64 %36, 1
  %38 = icmp ult i64 %37, 8
  br i1 %38, label %39, label %42

39:                                               ; preds = %137, %42, %29
  %40 = phi i32* [ %8, %42 ], [ %8, %29 ], [ %60, %137 ]
  %41 = phi i32* [ %26, %42 ], [ %26, %29 ], [ %61, %137 ]
  br label %149

42:                                               ; preds = %29
  %43 = sub nsw i64 0, %25
  %44 = getelementptr i32, i32* %8, i64 %43
  %45 = bitcast i32* %44 to i8*
  %46 = xor i64 %4, -1
  %47 = getelementptr i8, i8* %45, i64 %46
  %48 = ptrtoint i8* %47 to i64
  %49 = lshr i64 %48, 2
  %50 = add nuw nsw i64 %49, 1
  %51 = getelementptr i32, i32* %8, i64 %50
  %52 = add nsw i64 %25, %49
  %53 = add i64 %52, 1
  %54 = getelementptr i32, i32* %1, i64 %53
  %55 = icmp ult i32* %8, %54
  %56 = icmp ult i32* %26, %51
  %57 = and i1 %55, %56
  br i1 %57, label %39, label %58

58:                                               ; preds = %42
  %59 = and i64 %37, 9223372036854775800
  %60 = getelementptr i32, i32* %8, i64 %59
  %61 = getelementptr i32, i32* %26, i64 %59
  %62 = add nsw i64 %59, -8
  %63 = lshr exact i64 %62, 3
  %64 = add nuw nsw i64 %63, 1
  %65 = and i64 %64, 3
  %66 = icmp ult i64 %62, 24
  br i1 %66, label %118, label %67

67:                                               ; preds = %58
  %68 = sub nsw i64 %64, %65
  br label %69

69:                                               ; preds = %69, %67
  %70 = phi i64 [ 0, %67 ], [ %115, %69 ]
  %71 = phi i64 [ %68, %67 ], [ %116, %69 ]
  %72 = getelementptr i32, i32* %8, i64 %70
  %73 = getelementptr i32, i32* %26, i64 %70
  %74 = bitcast i32* %73 to <4 x i32>*
  %75 = load <4 x i32>, <4 x i32>* %74, align 4, !alias.scope !2
  %76 = getelementptr i32, i32* %73, i64 4
  %77 = bitcast i32* %76 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 4, !alias.scope !2
  %79 = bitcast i32* %72 to <4 x i32>*
  store <4 x i32> %75, <4 x i32>* %79, align 4, !alias.scope !5, !noalias !2
  %80 = getelementptr i32, i32* %72, i64 4
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %81, align 4, !alias.scope !5, !noalias !2
  %82 = or i64 %70, 8
  %83 = getelementptr i32, i32* %8, i64 %82
  %84 = getelementptr i32, i32* %26, i64 %82
  %85 = bitcast i32* %84 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 4, !alias.scope !2
  %87 = getelementptr i32, i32* %84, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4, !alias.scope !2
  %90 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> %86, <4 x i32>* %90, align 4, !alias.scope !5, !noalias !2
  %91 = getelementptr i32, i32* %83, i64 4
  %92 = bitcast i32* %91 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %92, align 4, !alias.scope !5, !noalias !2
  %93 = or i64 %70, 16
  %94 = getelementptr i32, i32* %8, i64 %93
  %95 = getelementptr i32, i32* %26, i64 %93
  %96 = bitcast i32* %95 to <4 x i32>*
  %97 = load <4 x i32>, <4 x i32>* %96, align 4, !alias.scope !2
  %98 = getelementptr i32, i32* %95, i64 4
  %99 = bitcast i32* %98 to <4 x i32>*
  %100 = load <4 x i32>, <4 x i32>* %99, align 4, !alias.scope !2
  %101 = bitcast i32* %94 to <4 x i32>*
  store <4 x i32> %97, <4 x i32>* %101, align 4, !alias.scope !5, !noalias !2
  %102 = getelementptr i32, i32* %94, i64 4
  %103 = bitcast i32* %102 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %103, align 4, !alias.scope !5, !noalias !2
  %104 = or i64 %70, 24
  %105 = getelementptr i32, i32* %8, i64 %104
  %106 = getelementptr i32, i32* %26, i64 %104
  %107 = bitcast i32* %106 to <4 x i32>*
  %108 = load <4 x i32>, <4 x i32>* %107, align 4, !alias.scope !2
  %109 = getelementptr i32, i32* %106, i64 4
  %110 = bitcast i32* %109 to <4 x i32>*
  %111 = load <4 x i32>, <4 x i32>* %110, align 4, !alias.scope !2
  %112 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %112, align 4, !alias.scope !5, !noalias !2
  %113 = getelementptr i32, i32* %105, i64 4
  %114 = bitcast i32* %113 to <4 x i32>*
  store <4 x i32> %111, <4 x i32>* %114, align 4, !alias.scope !5, !noalias !2
  %115 = add i64 %70, 32
  %116 = add i64 %71, -4
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %69, !llvm.loop !7

118:                                              ; preds = %69, %58
  %119 = phi i64 [ 0, %58 ], [ %115, %69 ]
  %120 = icmp eq i64 %65, 0
  br i1 %120, label %137, label %121

121:                                              ; preds = %118, %121
  %122 = phi i64 [ %134, %121 ], [ %119, %118 ]
  %123 = phi i64 [ %135, %121 ], [ %65, %118 ]
  %124 = getelementptr i32, i32* %8, i64 %122
  %125 = getelementptr i32, i32* %26, i64 %122
  %126 = bitcast i32* %125 to <4 x i32>*
  %127 = load <4 x i32>, <4 x i32>* %126, align 4, !alias.scope !2
  %128 = getelementptr i32, i32* %125, i64 4
  %129 = bitcast i32* %128 to <4 x i32>*
  %130 = load <4 x i32>, <4 x i32>* %129, align 4, !alias.scope !2
  %131 = bitcast i32* %124 to <4 x i32>*
  store <4 x i32> %127, <4 x i32>* %131, align 4, !alias.scope !5, !noalias !2
  %132 = getelementptr i32, i32* %124, i64 4
  %133 = bitcast i32* %132 to <4 x i32>*
  store <4 x i32> %130, <4 x i32>* %133, align 4, !alias.scope !5, !noalias !2
  %134 = add i64 %122, 8
  %135 = add i64 %123, -1
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %121, !llvm.loop !9

137:                                              ; preds = %121, %118
  %138 = icmp eq i64 %37, %59
  br i1 %138, label %139, label %39

139:                                              ; preds = %149, %137
  %140 = phi i32* [ %60, %137 ], [ %154, %149 ]
  %141 = ptrtoint i32* %140 to i64
  br label %142

142:                                              ; preds = %139, %21
  %143 = phi i64 [ %141, %139 ], [ %12, %21 ]
  store i64 %143, i64* %27, align 8
  %144 = icmp eq i64 %24, 0
  br i1 %144, label %156, label %145

145:                                              ; preds = %142
  %146 = sub nsw i64 0, %25
  %147 = getelementptr inbounds i32, i32* %8, i64 %146
  %148 = bitcast i32* %147 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %148, i8* align 4 %5, i64 %24, i1 false) #11
  br label %156

149:                                              ; preds = %39, %149
  %150 = phi i32* [ %154, %149 ], [ %40, %39 ]
  %151 = phi i32* [ %153, %149 ], [ %41, %39 ]
  %152 = load i32, i32* %151, align 4
  store i32 %152, i32* %150, align 4
  %153 = getelementptr inbounds i32, i32* %151, i64 1
  %154 = getelementptr inbounds i32, i32* %150, i64 1
  %155 = icmp ult i32* %153, %8
  br i1 %155, label %149, label %139, !llvm.loop !11

156:                                              ; preds = %142, %145
  %157 = icmp ugt i32* %1, %2
  br i1 %157, label %163, label %158

158:                                              ; preds = %156
  %159 = load i32*, i32** %7, align 8
  %160 = icmp ugt i32* %159, %2
  %161 = getelementptr inbounds i32, i32* %2, i64 1
  %162 = select i1 %160, i32* %161, i32* %2
  br label %163

163:                                              ; preds = %158, %156
  %164 = phi i32* [ %2, %156 ], [ %162, %158 ]
  %165 = load i32, i32* %164, align 4
  store i32 %165, i32* %1, align 4
  br label %410

166:                                              ; preds = %3
  %167 = bitcast i32** %7 to i64*
  %168 = bitcast %"class.std::__1::vector.80"* %0 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = sub i64 %12, %169
  %171 = ashr exact i64 %170, 2
  %172 = add nsw i64 %171, 1
  %173 = icmp ugt i64 %172, 4611686018427387903
  br i1 %173, label %174, label %176

174:                                              ; preds = %166
  %175 = bitcast %"class.std::__1::vector.80"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %175) #13
  unreachable

176:                                              ; preds = %166
  %177 = bitcast i32** %9 to i64*
  %178 = sub i64 %13, %169
  %179 = ashr exact i64 %178, 2
  %180 = icmp ult i64 %179, 2305843009213693951
  br i1 %180, label %184, label %181

181:                                              ; preds = %176
  %182 = sub i64 %4, %169
  %183 = ashr exact i64 %182, 2
  br label %194

184:                                              ; preds = %176
  %185 = ashr exact i64 %178, 1
  %186 = icmp ult i64 %185, %172
  %187 = select i1 %186, i64 %172, i64 %185
  %188 = sub i64 %4, %169
  %189 = ashr exact i64 %188, 2
  %190 = icmp eq i64 %187, 0
  br i1 %190, label %200, label %191

191:                                              ; preds = %184
  %192 = icmp ugt i64 %187, 4611686018427387903
  br i1 %192, label %193, label %194

193:                                              ; preds = %191
  tail call void @abort() #13
  unreachable

194:                                              ; preds = %181, %191
  %195 = phi i64 [ 4611686018427387903, %181 ], [ %187, %191 ]
  %196 = phi i64 [ %183, %181 ], [ %189, %191 ]
  %197 = shl i64 %195, 2
  %198 = tail call i8* @_Znwm(i64 %197) #12
  %199 = bitcast i8* %198 to i32*
  br label %200

200:                                              ; preds = %184, %194
  %201 = phi i64 [ %196, %194 ], [ %189, %184 ]
  %202 = phi i64 [ %195, %194 ], [ 0, %184 ]
  %203 = phi i8* [ %198, %194 ], [ null, %184 ]
  %204 = phi i32* [ %199, %194 ], [ null, %184 ]
  %205 = getelementptr inbounds i32, i32* %204, i64 %201
  %206 = getelementptr inbounds i32, i32* %204, i64 %202
  %207 = ptrtoint i32* %206 to i64
  %208 = icmp eq i64 %201, %202
  br i1 %208, label %209, label %231

209:                                              ; preds = %200
  %210 = icmp sgt i64 %201, 0
  br i1 %210, label %211, label %215

211:                                              ; preds = %209
  %212 = add nuw nsw i64 %201, 1
  %213 = sdiv i64 %212, -2
  %214 = getelementptr inbounds i32, i32* %205, i64 %213
  br label %231

215:                                              ; preds = %209
  %216 = shl nsw i64 %201, 1
  %217 = icmp eq i64 %201, 0
  %218 = select i1 %217, i64 1, i64 %216
  %219 = icmp ugt i64 %218, 4611686018427387903
  br i1 %219, label %220, label %221

220:                                              ; preds = %215
  tail call void @abort() #13
  unreachable

221:                                              ; preds = %215
  %222 = lshr i64 %218, 2
  %223 = shl i64 %218, 2
  %224 = tail call i8* @_Znwm(i64 %223) #12
  %225 = bitcast i8* %224 to i32*
  %226 = getelementptr inbounds i32, i32* %225, i64 %222
  %227 = getelementptr inbounds i32, i32* %225, i64 %218
  %228 = ptrtoint i32* %227 to i64
  %229 = icmp eq i32* %204, null
  br i1 %229, label %231, label %230

230:                                              ; preds = %221
  tail call void @_ZdlPv(i8* %203) #12
  br label %231

231:                                              ; preds = %200, %211, %221, %230
  %232 = phi i32* [ %214, %211 ], [ %226, %221 ], [ %226, %230 ], [ %205, %200 ]
  %233 = phi i64 [ %207, %211 ], [ %228, %221 ], [ %228, %230 ], [ %207, %200 ]
  %234 = load i32, i32* %2, align 4
  store i32 %234, i32* %232, align 4
  %235 = getelementptr inbounds i32, i32* %232, i64 1
  %236 = load i32*, i32** %6, align 8
  %237 = ptrtoint i32* %236 to i64
  %238 = sub i64 %4, %237
  %239 = ashr exact i64 %238, 2
  %240 = sub nsw i64 0, %239
  %241 = getelementptr inbounds i32, i32* %232, i64 %240
  %242 = ptrtoint i32* %241 to i64
  %243 = icmp sgt i64 %238, 0
  br i1 %243, label %244, label %247

244:                                              ; preds = %231
  %245 = bitcast i32* %241 to i8*
  %246 = bitcast i32* %236 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %245, i8* align 4 %246, i64 %238, i1 false) #11
  br label %247

247:                                              ; preds = %244, %231
  %248 = load i32*, i32** %7, align 8
  %249 = icmp eq i32* %248, %1
  br i1 %249, label %403, label %250

250:                                              ; preds = %247
  %251 = getelementptr i32, i32* %248, i64 -1
  %252 = ptrtoint i32* %251 to i64
  %253 = sub i64 %252, %4
  %254 = lshr i64 %253, 2
  %255 = add nuw nsw i64 %254, 1
  %256 = icmp ult i64 %255, 8
  br i1 %256, label %350, label %257

257:                                              ; preds = %250
  %258 = getelementptr i32, i32* %248, i64 -1
  %259 = ptrtoint i32* %258 to i64
  %260 = sub i64 %259, %4
  %261 = lshr i64 %260, 2
  %262 = add nuw nsw i64 %261, 2
  %263 = getelementptr i32, i32* %232, i64 %262
  %264 = add nuw nsw i64 %261, 1
  %265 = getelementptr i32, i32* %1, i64 %264
  %266 = icmp ult i32* %235, %265
  %267 = icmp ugt i32* %263, %1
  %268 = and i1 %266, %267
  br i1 %268, label %350, label %269

269:                                              ; preds = %257
  %270 = and i64 %255, 9223372036854775800
  %271 = getelementptr i32, i32* %235, i64 %270
  %272 = getelementptr i32, i32* %1, i64 %270
  %273 = add nsw i64 %270, -8
  %274 = lshr exact i64 %273, 3
  %275 = add nuw nsw i64 %274, 1
  %276 = and i64 %275, 3
  %277 = icmp ult i64 %273, 24
  br i1 %277, label %329, label %278

278:                                              ; preds = %269
  %279 = sub nsw i64 %275, %276
  br label %280

280:                                              ; preds = %280, %278
  %281 = phi i64 [ 0, %278 ], [ %326, %280 ]
  %282 = phi i64 [ %279, %278 ], [ %327, %280 ]
  %283 = getelementptr i32, i32* %235, i64 %281
  %284 = getelementptr i32, i32* %1, i64 %281
  %285 = bitcast i32* %284 to <4 x i32>*
  %286 = load <4 x i32>, <4 x i32>* %285, align 4, !alias.scope !12
  %287 = getelementptr i32, i32* %284, i64 4
  %288 = bitcast i32* %287 to <4 x i32>*
  %289 = load <4 x i32>, <4 x i32>* %288, align 4, !alias.scope !12
  %290 = bitcast i32* %283 to <4 x i32>*
  store <4 x i32> %286, <4 x i32>* %290, align 4, !alias.scope !15, !noalias !12
  %291 = getelementptr i32, i32* %283, i64 4
  %292 = bitcast i32* %291 to <4 x i32>*
  store <4 x i32> %289, <4 x i32>* %292, align 4, !alias.scope !15, !noalias !12
  %293 = or i64 %281, 8
  %294 = getelementptr i32, i32* %235, i64 %293
  %295 = getelementptr i32, i32* %1, i64 %293
  %296 = bitcast i32* %295 to <4 x i32>*
  %297 = load <4 x i32>, <4 x i32>* %296, align 4, !alias.scope !12
  %298 = getelementptr i32, i32* %295, i64 4
  %299 = bitcast i32* %298 to <4 x i32>*
  %300 = load <4 x i32>, <4 x i32>* %299, align 4, !alias.scope !12
  %301 = bitcast i32* %294 to <4 x i32>*
  store <4 x i32> %297, <4 x i32>* %301, align 4, !alias.scope !15, !noalias !12
  %302 = getelementptr i32, i32* %294, i64 4
  %303 = bitcast i32* %302 to <4 x i32>*
  store <4 x i32> %300, <4 x i32>* %303, align 4, !alias.scope !15, !noalias !12
  %304 = or i64 %281, 16
  %305 = getelementptr i32, i32* %235, i64 %304
  %306 = getelementptr i32, i32* %1, i64 %304
  %307 = bitcast i32* %306 to <4 x i32>*
  %308 = load <4 x i32>, <4 x i32>* %307, align 4, !alias.scope !12
  %309 = getelementptr i32, i32* %306, i64 4
  %310 = bitcast i32* %309 to <4 x i32>*
  %311 = load <4 x i32>, <4 x i32>* %310, align 4, !alias.scope !12
  %312 = bitcast i32* %305 to <4 x i32>*
  store <4 x i32> %308, <4 x i32>* %312, align 4, !alias.scope !15, !noalias !12
  %313 = getelementptr i32, i32* %305, i64 4
  %314 = bitcast i32* %313 to <4 x i32>*
  store <4 x i32> %311, <4 x i32>* %314, align 4, !alias.scope !15, !noalias !12
  %315 = or i64 %281, 24
  %316 = getelementptr i32, i32* %235, i64 %315
  %317 = getelementptr i32, i32* %1, i64 %315
  %318 = bitcast i32* %317 to <4 x i32>*
  %319 = load <4 x i32>, <4 x i32>* %318, align 4, !alias.scope !12
  %320 = getelementptr i32, i32* %317, i64 4
  %321 = bitcast i32* %320 to <4 x i32>*
  %322 = load <4 x i32>, <4 x i32>* %321, align 4, !alias.scope !12
  %323 = bitcast i32* %316 to <4 x i32>*
  store <4 x i32> %319, <4 x i32>* %323, align 4, !alias.scope !15, !noalias !12
  %324 = getelementptr i32, i32* %316, i64 4
  %325 = bitcast i32* %324 to <4 x i32>*
  store <4 x i32> %322, <4 x i32>* %325, align 4, !alias.scope !15, !noalias !12
  %326 = add i64 %281, 32
  %327 = add i64 %282, -4
  %328 = icmp eq i64 %327, 0
  br i1 %328, label %329, label %280, !llvm.loop !17

329:                                              ; preds = %280, %269
  %330 = phi i64 [ 0, %269 ], [ %326, %280 ]
  %331 = icmp eq i64 %276, 0
  br i1 %331, label %348, label %332

332:                                              ; preds = %329, %332
  %333 = phi i64 [ %345, %332 ], [ %330, %329 ]
  %334 = phi i64 [ %346, %332 ], [ %276, %329 ]
  %335 = getelementptr i32, i32* %235, i64 %333
  %336 = getelementptr i32, i32* %1, i64 %333
  %337 = bitcast i32* %336 to <4 x i32>*
  %338 = load <4 x i32>, <4 x i32>* %337, align 4, !alias.scope !12
  %339 = getelementptr i32, i32* %336, i64 4
  %340 = bitcast i32* %339 to <4 x i32>*
  %341 = load <4 x i32>, <4 x i32>* %340, align 4, !alias.scope !12
  %342 = bitcast i32* %335 to <4 x i32>*
  store <4 x i32> %338, <4 x i32>* %342, align 4, !alias.scope !15, !noalias !12
  %343 = getelementptr i32, i32* %335, i64 4
  %344 = bitcast i32* %343 to <4 x i32>*
  store <4 x i32> %341, <4 x i32>* %344, align 4, !alias.scope !15, !noalias !12
  %345 = add i64 %333, 8
  %346 = add i64 %334, -1
  %347 = icmp eq i64 %346, 0
  br i1 %347, label %348, label %332, !llvm.loop !18

348:                                              ; preds = %332, %329
  %349 = icmp eq i64 %255, %270
  br i1 %349, label %403, label %350

350:                                              ; preds = %348, %257, %250
  %351 = phi i32* [ %235, %257 ], [ %235, %250 ], [ %271, %348 ]
  %352 = phi i32* [ %1, %257 ], [ %1, %250 ], [ %272, %348 ]
  %353 = ptrtoint i32* %352 to i64
  %354 = getelementptr i32, i32* %248, i64 -1
  %355 = ptrtoint i32* %354 to i64
  %356 = sub i64 %355, %353
  %357 = lshr i64 %356, 2
  %358 = add nuw nsw i64 %357, 1
  %359 = and i64 %358, 7
  %360 = icmp eq i64 %359, 0
  br i1 %360, label %370, label %361

361:                                              ; preds = %350, %361
  %362 = phi i32* [ %367, %361 ], [ %351, %350 ]
  %363 = phi i32* [ %366, %361 ], [ %352, %350 ]
  %364 = phi i64 [ %368, %361 ], [ %359, %350 ]
  %365 = load i32, i32* %363, align 4
  store i32 %365, i32* %362, align 4
  %366 = getelementptr inbounds i32, i32* %363, i64 1
  %367 = getelementptr inbounds i32, i32* %362, i64 1
  %368 = add i64 %364, -1
  %369 = icmp eq i64 %368, 0
  br i1 %369, label %370, label %361, !llvm.loop !19

370:                                              ; preds = %361, %350
  %371 = phi i32* [ undef, %350 ], [ %367, %361 ]
  %372 = phi i32* [ %351, %350 ], [ %367, %361 ]
  %373 = phi i32* [ %352, %350 ], [ %366, %361 ]
  %374 = icmp ult i64 %356, 28
  br i1 %374, label %403, label %375

375:                                              ; preds = %370, %375
  %376 = phi i32* [ %401, %375 ], [ %372, %370 ]
  %377 = phi i32* [ %400, %375 ], [ %373, %370 ]
  %378 = load i32, i32* %377, align 4
  store i32 %378, i32* %376, align 4
  %379 = getelementptr inbounds i32, i32* %377, i64 1
  %380 = getelementptr inbounds i32, i32* %376, i64 1
  %381 = load i32, i32* %379, align 4
  store i32 %381, i32* %380, align 4
  %382 = getelementptr inbounds i32, i32* %377, i64 2
  %383 = getelementptr inbounds i32, i32* %376, i64 2
  %384 = load i32, i32* %382, align 4
  store i32 %384, i32* %383, align 4
  %385 = getelementptr inbounds i32, i32* %377, i64 3
  %386 = getelementptr inbounds i32, i32* %376, i64 3
  %387 = load i32, i32* %385, align 4
  store i32 %387, i32* %386, align 4
  %388 = getelementptr inbounds i32, i32* %377, i64 4
  %389 = getelementptr inbounds i32, i32* %376, i64 4
  %390 = load i32, i32* %388, align 4
  store i32 %390, i32* %389, align 4
  %391 = getelementptr inbounds i32, i32* %377, i64 5
  %392 = getelementptr inbounds i32, i32* %376, i64 5
  %393 = load i32, i32* %391, align 4
  store i32 %393, i32* %392, align 4
  %394 = getelementptr inbounds i32, i32* %377, i64 6
  %395 = getelementptr inbounds i32, i32* %376, i64 6
  %396 = load i32, i32* %394, align 4
  store i32 %396, i32* %395, align 4
  %397 = getelementptr inbounds i32, i32* %377, i64 7
  %398 = getelementptr inbounds i32, i32* %376, i64 7
  %399 = load i32, i32* %397, align 4
  store i32 %399, i32* %398, align 4
  %400 = getelementptr inbounds i32, i32* %377, i64 8
  %401 = getelementptr inbounds i32, i32* %376, i64 8
  %402 = icmp eq i32* %400, %248
  br i1 %402, label %403, label %375, !llvm.loop !20

403:                                              ; preds = %370, %375, %348, %247
  %404 = phi i32* [ %235, %247 ], [ %271, %348 ], [ %371, %370 ], [ %401, %375 ]
  %405 = ptrtoint i32* %404 to i64
  %406 = load i32*, i32** %6, align 8
  store i64 %242, i64* %168, align 8
  store i64 %405, i64* %167, align 8
  store i64 %233, i64* %177, align 8
  %407 = icmp eq i32* %406, null
  br i1 %407, label %410, label %408

408:                                              ; preds = %403
  %409 = bitcast i32* %406 to i8*
  tail call void @_ZdlPv(i8* %409) #12
  br label %410

410:                                              ; preds = %408, %403, %16, %163
  %411 = phi i32* [ %1, %16 ], [ %1, %163 ], [ %232, %403 ], [ %232, %408 ]
  ret i32* %411
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CFGAS_RTFBreak11SetUserDataERKN5fxcrt9RetainPtrI18CFGAS_TextUserDataEE(%class.CFGAS_RTFBreak*, %"class.fxcrt::RetainPtr.49"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %4 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %3, align 8
  %5 = getelementptr inbounds %"class.fxcrt::RetainPtr.49", %"class.fxcrt::RetainPtr.49"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %5, align 8
  %7 = icmp eq %class.CFGAS_TextUserData* %4, %6
  br i1 %7, label %34, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0
  tail call void @_ZN11CFGAS_Break14SetBreakStatusEv(%class.CFGAS_Break* %9) #11
  %10 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %3, align 8
  %11 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %5, align 8
  %12 = icmp eq %class.CFGAS_TextUserData* %10, %11
  br i1 %12, label %34, label %13

13:                                               ; preds = %8
  %14 = icmp eq %class.CFGAS_TextUserData* %11, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %13
  %16 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %11, i64 0, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = add nsw i64 %17, 1
  store i64 %18, i64* %16, align 8
  %19 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %3, align 8
  br label %20

20:                                               ; preds = %15, %13
  %21 = phi %class.CFGAS_TextUserData* [ %19, %15 ], [ %10, %13 ]
  store %class.CFGAS_TextUserData* %11, %class.CFGAS_TextUserData** %3, align 8
  %22 = icmp eq %class.CFGAS_TextUserData* %21, null
  br i1 %22, label %34, label %23

23:                                               ; preds = %20
  %24 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %21, i64 0, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = add nsw i64 %25, -1
  store i64 %26, i64* %24, align 8
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %34

28:                                               ; preds = %23
  %29 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %21, i64 0, i32 0
  %30 = bitcast %class.CFGAS_TextUserData* %21 to void (%"class.fxcrt::Retainable"*)***
  %31 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %30, align 8
  %32 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %31, i64 1
  %33 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %32, align 8
  tail call void %33(%"class.fxcrt::Retainable"* nonnull %29) #11
  br label %34

34:                                               ; preds = %28, %23, %20, %8, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK14CFGAS_RTFBreak16GetPositionedTabEPi(%class.CFGAS_RTFBreak* nocapture readonly, i32* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 3, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 3, i32 0, i32 1
  %6 = load i32*, i32** %5, align 8
  %7 = ptrtoint i32* %4 to i64
  %8 = ptrtoint i32* %6 to i64
  %9 = sub i64 %8, %7
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %27, label %11

11:                                               ; preds = %2
  %12 = ashr exact i64 %9, 2
  %13 = load i32, i32* %1, align 4
  br label %14

14:                                               ; preds = %14, %11
  %15 = phi i32* [ %4, %11 ], [ %25, %14 ]
  %16 = phi i64 [ %12, %11 ], [ %24, %14 ]
  %17 = lshr i64 %16, 1
  %18 = getelementptr inbounds i32, i32* %15, i64 %17
  %19 = load i32, i32* %18, align 4
  %20 = icmp slt i32 %13, %19
  %21 = getelementptr inbounds i32, i32* %18, i64 1
  %22 = xor i64 %17, -1
  %23 = add i64 %16, %22
  %24 = select i1 %20, i64 %17, i64 %23
  %25 = select i1 %20, i32* %15, i32* %21
  %26 = icmp eq i64 %24, 0
  br i1 %26, label %27, label %14

27:                                               ; preds = %14, %2
  %28 = phi i32* [ %4, %2 ], [ %25, %14 ]
  %29 = icmp eq i32* %28, %6
  br i1 %29, label %32, label %30

30:                                               ; preds = %27
  %31 = load i32, i32* %28, align 4
  store i32 %31, i32* %1, align 4
  br label %32

32:                                               ; preds = %27, %30
  %33 = phi i1 [ true, %30 ], [ false, %27 ]
  ret i1 %33
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN14CFGAS_RTFBreak10AppendCharEw(%class.CFGAS_RTFBreak*, i32 signext) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  store i32 %1, i32* %3, align 4
  %4 = tail call zeroext i8 @_Z14FX_GetCharTypew(i32 signext %1) #11
  %5 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0
  %6 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 16, i32 0
  %7 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %6, align 8
  %8 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 11
  %9 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 12
  %10 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %7, i64 0, i32 0, i32 0, i32 1
  %11 = load %class.CFGAS_Char*, %class.CFGAS_Char** %10, align 8
  %12 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %7, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %13 = load %class.CFGAS_Char*, %class.CFGAS_Char** %12, align 8
  %14 = icmp ult %class.CFGAS_Char* %11, %13
  br i1 %14, label %15, label %22

15:                                               ; preds = %2
  %16 = trunc i32 %1 to i16
  %17 = load i32, i32* %8, align 4
  %18 = load i32, i32* %9, align 4
  tail call void @_ZN10CFGAS_CharC1Etii(%class.CFGAS_Char* %11, i16 zeroext %16, i32 %17, i32 %18) #11
  %19 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %11, i64 1
  %20 = ptrtoint %class.CFGAS_Char* %19 to i64
  %21 = bitcast %class.CFGAS_Char** %10 to i64*
  store i64 %20, i64* %21, align 8
  br label %24

22:                                               ; preds = %2
  %23 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %7, i64 0, i32 0
  call void @_ZNSt3__16vectorI10CFGAS_CharNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRwRiS7_EEEvDpOT_(%"class.std::__1::vector.47"* %23, i32* nonnull dereferenceable(4) %3, i32* dereferenceable(4) %8, i32* dereferenceable(4) %9) #11
  br label %24

24:                                               ; preds = %15, %22
  %25 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %6, align 8
  %26 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %25, i64 0, i32 0, i32 0, i32 1
  %27 = load %class.CFGAS_Char*, %class.CFGAS_Char** %26, align 8
  %28 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %27, i64 -1
  %29 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 9
  %30 = load i32, i32* %29, align 8
  %31 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %27, i64 -1, i32 10
  store i32 %30, i32* %31, align 4
  %32 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 4
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %27, i64 -1, i32 11
  store i32 %33, i32* %34, align 8
  %35 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %27, i64 -1, i32 13, i32 0, i32 0, i32 0, i32 0
  %36 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %35, align 8
  %37 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %38 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %37, align 8
  %39 = icmp eq %class.CFGAS_TextUserData* %36, %38
  br i1 %39, label %61, label %40

40:                                               ; preds = %24
  %41 = icmp eq %class.CFGAS_TextUserData* %38, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %40
  %43 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %38, i64 0, i32 0, i32 1
  %44 = load i64, i64* %43, align 8
  %45 = add nsw i64 %44, 1
  store i64 %45, i64* %43, align 8
  %46 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %35, align 8
  br label %47

47:                                               ; preds = %42, %40
  %48 = phi %class.CFGAS_TextUserData* [ %46, %42 ], [ %36, %40 ]
  store %class.CFGAS_TextUserData* %38, %class.CFGAS_TextUserData** %35, align 8
  %49 = icmp eq %class.CFGAS_TextUserData* %48, null
  br i1 %49, label %61, label %50

50:                                               ; preds = %47
  %51 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %48, i64 0, i32 0, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = add nsw i64 %52, -1
  store i64 %53, i64* %51, align 8
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %61

55:                                               ; preds = %50
  %56 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %48, i64 0, i32 0
  %57 = bitcast %class.CFGAS_TextUserData* %48 to void (%"class.fxcrt::Retainable"*)***
  %58 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %57, align 8
  %59 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %58, i64 1
  %60 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %59, align 8
  call void %60(%"class.fxcrt::Retainable"* nonnull %56) #11
  br label %61

61:                                               ; preds = %24, %47, %50, %55
  %62 = icmp eq i8 %4, 4
  br i1 %62, label %165, label %63

63:                                               ; preds = %61
  %64 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 1
  %65 = load i8, i8* %64, align 8
  %66 = call zeroext i8 @_ZNK11CFGAS_Break18GetUnifiedCharTypeE11FX_CHARTYPE(%class.CFGAS_Break* %5, i8 zeroext %65) #11
  %67 = call zeroext i8 @_ZNK11CFGAS_Break18GetUnifiedCharTypeE11FX_CHARTYPE(%class.CFGAS_Break* %5, i8 zeroext %4) #11
  %68 = icmp eq i8 %66, %67
  br i1 %68, label %91, label %69

69:                                               ; preds = %63
  %70 = load i8, i8* %64, align 8
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %91, label %72

72:                                               ; preds = %69
  %73 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %6, align 8
  %74 = call i32 @_ZNK15CFGAS_BreakLine10GetLineEndEv(%class.CFGAS_BreakLine* %73) #11
  %75 = call zeroext i1 @_ZNK11CFGAS_Break22IsGreaterThanLineWidthEi(%class.CFGAS_Break* %5, i32 %74) #11
  br i1 %75, label %76, label %91

76:                                               ; preds = %72
  %77 = load i8, i8* %64, align 8
  %78 = icmp ne i8 %77, 2
  %79 = icmp ne i8 %4, 3
  %80 = or i1 %79, %78
  br i1 %80, label %81, label %150

81:                                               ; preds = %76
  %82 = call zeroext i8 @_ZN14CFGAS_RTFBreak8EndBreakEN10CFGAS_Char9BreakTypeE(%class.CFGAS_RTFBreak* %0, i8 zeroext 2)
  %83 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %6, align 8
  %84 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %83, i64 0, i32 0, i32 0, i32 0
  %85 = load %class.CFGAS_Char*, %class.CFGAS_Char** %84, align 8
  %86 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %83, i64 0, i32 0, i32 0, i32 1
  %87 = load %class.CFGAS_Char*, %class.CFGAS_Char** %86, align 8
  %88 = icmp eq %class.CFGAS_Char* %85, %87
  %89 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %87, i64 -1
  %90 = select i1 %88, %class.CFGAS_Char* %28, %class.CFGAS_Char* %89
  br label %91

91:                                               ; preds = %81, %69, %63, %72
  %92 = phi i8 [ 0, %63 ], [ 0, %69 ], [ 0, %72 ], [ %82, %81 ]
  %93 = phi %class.CFGAS_Char* [ %28, %63 ], [ %28, %69 ], [ %28, %72 ], [ %90, %81 ]
  switch i8 %4, label %168 [
    i8 1, label %94
    i8 3, label %150
    i8 12, label %166
    i8 7, label %166
    i8 8, label %166
    i8 9, label %166
    i8 10, label %166
    i8 11, label %166
  ]

94:                                               ; preds = %91
  %95 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 5
  %96 = load i32, i32* %95, align 8
  %97 = and i32 %96, 16
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %170, label %99

99:                                               ; preds = %94
  %100 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %6, align 8
  %101 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %100, i64 0, i32 3
  %102 = load i32, i32* %101, align 4
  %103 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 3, i32 0, i32 0
  %104 = load i32*, i32** %103, align 8
  %105 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 3, i32 0, i32 1
  %106 = load i32*, i32** %105, align 8
  %107 = ptrtoint i32* %104 to i64
  %108 = ptrtoint i32* %106 to i64
  %109 = sub i64 %108, %107
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %126, label %111

111:                                              ; preds = %99
  %112 = ashr exact i64 %109, 2
  br label %113

113:                                              ; preds = %113, %111
  %114 = phi i32* [ %104, %111 ], [ %124, %113 ]
  %115 = phi i64 [ %112, %111 ], [ %123, %113 ]
  %116 = lshr i64 %115, 1
  %117 = getelementptr inbounds i32, i32* %114, i64 %116
  %118 = load i32, i32* %117, align 4
  %119 = icmp slt i32 %102, %118
  %120 = getelementptr inbounds i32, i32* %117, i64 1
  %121 = xor i64 %116, -1
  %122 = add i64 %115, %121
  %123 = select i1 %119, i64 %116, i64 %122
  %124 = select i1 %119, i32* %114, i32* %120
  %125 = icmp eq i64 %123, 0
  br i1 %125, label %126, label %113

126:                                              ; preds = %113, %99
  %127 = phi i32* [ %104, %99 ], [ %124, %113 ]
  %128 = icmp eq i32* %127, %106
  br i1 %128, label %131, label %129

129:                                              ; preds = %126
  %130 = load i32, i32* %127, align 4
  br label %139

131:                                              ; preds = %126
  %132 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 10
  %133 = load i32, i32* %132, align 4
  %134 = sdiv i32 %102, %133
  %135 = add nsw i32 %134, 1
  %136 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %135, i32 %133) #11
  %137 = extractvalue { i32, i1 } %136, 1
  %138 = extractvalue { i32, i1 } %136, 0
  br i1 %137, label %145, label %139

139:                                              ; preds = %131, %129
  %140 = phi i32 [ %130, %129 ], [ %138, %131 ]
  %141 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %140, i32 %102) #11
  %142 = extractvalue { i32, i1 } %141, 1
  %143 = extractvalue { i32, i1 } %141, 0
  %144 = select i1 %142, i32 0, i32 %143
  br label %145

145:                                              ; preds = %139, %131
  %146 = phi i32 [ %144, %139 ], [ 0, %131 ]
  %147 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %93, i64 0, i32 5
  store i32 %146, i32* %147, align 8
  %148 = load i32, i32* %101, align 4
  %149 = add nsw i32 %148, %146
  store i32 %149, i32* %101, align 4
  br label %170

150:                                              ; preds = %76, %91
  %151 = phi %class.CFGAS_Char* [ %93, %91 ], [ %28, %76 ]
  %152 = phi i8 [ %92, %91 ], [ 0, %76 ]
  %153 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %151, i64 0, i32 14
  %154 = load i16, i16* %153, align 8
  switch i16 %154, label %157 [
    i16 11, label %162
    i16 8232, label %162
    i16 12, label %155
    i16 8233, label %156
  ]

155:                                              ; preds = %150
  br label %162

156:                                              ; preds = %150
  br label %162

157:                                              ; preds = %150
  %158 = zext i16 %154 to i32
  %159 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 8
  %160 = load i32, i32* %159, align 4
  %161 = icmp eq i32 %160, %158
  br i1 %161, label %162, label %170

162:                                              ; preds = %157, %156, %155, %150, %150
  %163 = phi i8 [ 2, %150 ], [ 2, %150 ], [ 4, %155 ], [ 3, %156 ], [ 3, %157 ]
  %164 = call zeroext i8 @_ZN14CFGAS_RTFBreak8EndBreakEN10CFGAS_Char9BreakTypeE(%class.CFGAS_RTFBreak* %0, i8 zeroext %163) #11
  br label %170

165:                                              ; preds = %61
  call void @_ZN14CFGAS_RTFBreak22AppendChar_CombinationEP10CFGAS_Char(%class.CFGAS_RTFBreak* %0, %class.CFGAS_Char* %28)
  br label %170

166:                                              ; preds = %91, %91, %91, %91, %91, %91
  %167 = call zeroext i8 @_ZN14CFGAS_RTFBreak17AppendChar_ArabicEP10CFGAS_Char(%class.CFGAS_RTFBreak* %0, %class.CFGAS_Char* %93)
  br label %170

168:                                              ; preds = %91
  %169 = call zeroext i8 @_ZN14CFGAS_RTFBreak17AppendChar_OthersEP10CFGAS_Char(%class.CFGAS_RTFBreak* %0, %class.CFGAS_Char* %93)
  br label %170

170:                                              ; preds = %162, %157, %145, %94, %168, %166, %165
  %171 = phi i8 [ %92, %168 ], [ %92, %166 ], [ 0, %165 ], [ %92, %94 ], [ %92, %145 ], [ %152, %157 ], [ %152, %162 ]
  %172 = phi i8 [ %169, %168 ], [ %167, %166 ], [ 0, %165 ], [ 0, %94 ], [ 0, %145 ], [ 0, %157 ], [ %164, %162 ]
  %173 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 1
  store i8 %4, i8* %173, align 8
  %174 = icmp ult i8 %171, %172
  %175 = select i1 %174, i8 %172, i8 %171
  ret i8 %175
}

declare zeroext i8 @_Z14FX_GetCharTypew(i32 signext) local_unnamed_addr #1

declare zeroext i8 @_ZNK11CFGAS_Break18GetUnifiedCharTypeE11FX_CHARTYPE(%class.CFGAS_Break*, i8 zeroext) local_unnamed_addr #1

declare zeroext i1 @_ZNK11CFGAS_Break22IsGreaterThanLineWidthEi(%class.CFGAS_Break*, i32) local_unnamed_addr #1

declare i32 @_ZNK15CFGAS_BreakLine10GetLineEndEv(%class.CFGAS_BreakLine*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN14CFGAS_RTFBreak8EndBreakEN10CFGAS_Char9BreakTypeE(%class.CFGAS_RTFBreak*, i8 zeroext) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::deque", align 8
  %4 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0
  %5 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 4
  %6 = load i32, i32* %5, align 4
  %7 = add i32 %6, 1
  store i32 %7, i32* %5, align 4
  %8 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 16, i32 0
  %9 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %8, align 8
  %10 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %9, i64 0, i32 1, i32 0, i32 0
  %11 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %10, align 8
  %12 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %9, i64 0, i32 1, i32 0, i32 1
  %13 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %12, align 8
  %14 = icmp eq %class.CFGAS_BreakPiece* %11, %13
  br i1 %14, label %26, label %15

15:                                               ; preds = %2
  %16 = icmp eq i8 %1, 1
  br i1 %16, label %22, label %17

17:                                               ; preds = %15
  %18 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %13, i64 -1, i32 0
  store i8 %1, i8* %18, align 8
  %19 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %8, align 8
  %20 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %19, i64 0, i32 1, i32 0, i32 1
  %21 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %20, align 8
  br label %22

22:                                               ; preds = %15, %17
  %23 = phi %class.CFGAS_BreakPiece* [ %13, %15 ], [ %21, %17 ]
  %24 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %23, i64 -1, i32 0
  %25 = load i8, i8* %24, align 8
  br label %193

26:                                               ; preds = %2
  %27 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 17
  %28 = load i8, i8* %27, align 8
  %29 = icmp sgt i8 %28, -1
  br i1 %29, label %30, label %49

30:                                               ; preds = %26
  %31 = sext i8 %28 to i64
  %32 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 19, i64 %31, i32 1, i32 0, i32 0
  %33 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %32, align 8
  %34 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 19, i64 %31, i32 1, i32 0, i32 1
  %35 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %34, align 8
  %36 = icmp eq %class.CFGAS_BreakPiece* %33, %35
  br i1 %36, label %193, label %37

37:                                               ; preds = %30
  %38 = icmp eq i8 %1, 1
  br i1 %38, label %45, label %39

39:                                               ; preds = %37
  %40 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %35, i64 -1, i32 0
  store i8 %1, i8* %40, align 8
  %41 = load i8, i8* %27, align 8
  %42 = sext i8 %41 to i64
  %43 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 19, i64 %42, i32 1, i32 0, i32 1
  %44 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %43, align 8
  br label %45

45:                                               ; preds = %37, %39
  %46 = phi %class.CFGAS_BreakPiece* [ %35, %37 ], [ %44, %39 ]
  %47 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %46, i64 -1, i32 0
  %48 = load i8, i8* %47, align 8
  br label %193

49:                                               ; preds = %26
  %50 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %9, i64 0, i32 0, i32 0, i32 0
  %51 = load %class.CFGAS_Char*, %class.CFGAS_Char** %50, align 8
  %52 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %9, i64 0, i32 0, i32 0, i32 1
  %53 = load %class.CFGAS_Char*, %class.CFGAS_Char** %52, align 8
  %54 = icmp eq %class.CFGAS_Char* %51, %53
  br i1 %54, label %193, label %55

55:                                               ; preds = %49
  %56 = ptrtoint %class.CFGAS_Char* %51 to i64
  %57 = ptrtoint %class.CFGAS_Char* %53 to i64
  %58 = sub i64 %57, %56
  %59 = sdiv exact i64 %58, 56
  %60 = trunc i64 %59 to i32
  %61 = add i32 %60, -1
  %62 = tail call %class.CFGAS_Char* @_ZN15CFGAS_BreakLine7GetCharEi(%class.CFGAS_BreakLine* %9, i32 %61) #11
  %63 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %62, i64 0, i32 0
  store i8 %1, i8* %63, align 8
  %64 = icmp eq i8 %1, 1
  br i1 %64, label %193, label %65

65:                                               ; preds = %55
  %66 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %8, align 8
  %67 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 19, i64 0
  %68 = icmp ne %class.CFGAS_BreakLine* %66, %67
  %69 = zext i1 %68 to i8
  store i8 %69, i8* %27, align 8
  %70 = xor i1 %68, true
  %71 = zext i1 %70 to i64
  %72 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 19, i64 %71
  %73 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 2
  %74 = load i8, i8* %73, align 1
  %75 = add i8 %74, -3
  %76 = icmp ult i8 %75, 2
  %77 = tail call zeroext i1 @_ZN14CFGAS_RTFBreak18EndBreak_SplitLineEP15CFGAS_BreakLinebN10CFGAS_Char9BreakTypeE(%class.CFGAS_RTFBreak* %0, %class.CFGAS_BreakLine* %72, i1 zeroext %76, i8 zeroext undef)
  br i1 %77, label %182, label %78

78:                                               ; preds = %65
  %79 = bitcast %"class.std::__1::deque"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %79) #11
  %80 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %3, i64 0, i32 0, i32 0, i32 0
  %81 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %3, i64 0, i32 0, i32 0, i32 1
  %82 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %3, i64 0, i32 0, i32 0, i32 2
  %83 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %3, i64 0, i32 0, i32 1
  %84 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %79, i8 0, i64 48, i1 false) #11
  call void @_ZN14CFGAS_RTFBreak17EndBreak_BidiLineEPNSt3__15dequeI6FX_TPONS0_9allocatorIS2_EEEEN10CFGAS_Char9BreakTypeE(%class.CFGAS_RTFBreak* %0, %"class.std::__1::deque"* nonnull %3, i8 zeroext %1)
  %85 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 1
  %86 = load i8, i8* %85, align 8, !range !21
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %88, label %92

88:                                               ; preds = %78
  %89 = load i8, i8* %73, align 1
  %90 = icmp eq i8 %89, 0
  br i1 %90, label %92, label %91

91:                                               ; preds = %88
  call void @_ZN14CFGAS_RTFBreak18EndBreak_AlignmentERKNSt3__15dequeI6FX_TPONS0_9allocatorIS2_EEEEbN10CFGAS_Char9BreakTypeE(%class.CFGAS_RTFBreak* %0, %"class.std::__1::deque"* nonnull dereferenceable(48) %3, i1 zeroext %76, i8 zeroext %1)
  br label %92

92:                                               ; preds = %88, %78, %91
  %93 = load %struct.FX_TPO**, %struct.FX_TPO*** %81, align 8
  %94 = load i64, i64* %83, align 8
  %95 = lshr i64 %94, 9
  %96 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %93, i64 %95
  %97 = load %struct.FX_TPO**, %struct.FX_TPO*** %82, align 8
  %98 = icmp eq %struct.FX_TPO** %97, %93
  %99 = ptrtoint %struct.FX_TPO** %97 to i64
  %100 = ptrtoint %struct.FX_TPO** %93 to i64
  br i1 %98, label %113, label %101

101:                                              ; preds = %92
  %102 = load %struct.FX_TPO*, %struct.FX_TPO** %96, align 8
  %103 = and i64 %94, 511
  %104 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %102, i64 %103
  %105 = load i64, i64* %84, align 8
  %106 = add i64 %105, %94
  %107 = lshr i64 %106, 9
  %108 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %93, i64 %107
  %109 = load %struct.FX_TPO*, %struct.FX_TPO** %108, align 8
  %110 = and i64 %106, 511
  %111 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %109, i64 %110
  %112 = icmp eq %struct.FX_TPO* %111, %104
  br i1 %112, label %113, label %118

113:                                              ; preds = %131, %92, %101
  store i64 0, i64* %84, align 8
  %114 = bitcast %struct.FX_TPO*** %82 to i64*
  %115 = sub i64 %99, %100
  %116 = ashr exact i64 %115, 3
  %117 = icmp ugt i64 %116, 2
  br i1 %117, label %136, label %149

118:                                              ; preds = %101, %131
  %119 = phi %struct.FX_TPO* [ %134, %131 ], [ %104, %101 ]
  %120 = phi %struct.FX_TPO** [ %133, %131 ], [ %96, %101 ]
  %121 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %119, i64 1
  %122 = ptrtoint %struct.FX_TPO* %121 to i64
  %123 = bitcast %struct.FX_TPO** %120 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = sub i64 %122, %124
  %126 = icmp eq i64 %125, 4096
  br i1 %126, label %127, label %131

127:                                              ; preds = %118
  %128 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %120, i64 1
  %129 = bitcast %struct.FX_TPO** %128 to i64*
  %130 = load i64, i64* %129, align 8
  br label %131

131:                                              ; preds = %127, %118
  %132 = phi i64 [ %130, %127 ], [ %122, %118 ]
  %133 = phi %struct.FX_TPO** [ %128, %127 ], [ %120, %118 ]
  %134 = inttoptr i64 %132 to %struct.FX_TPO*
  %135 = icmp eq %struct.FX_TPO* %111, %134
  br i1 %135, label %113, label %118

136:                                              ; preds = %113, %136
  %137 = phi %struct.FX_TPO** [ %141, %136 ], [ %93, %113 ]
  %138 = bitcast %struct.FX_TPO** %137 to i8**
  %139 = load i8*, i8** %138, align 8
  call void @_ZdlPv(i8* %139) #12
  %140 = load %struct.FX_TPO**, %struct.FX_TPO*** %81, align 8
  %141 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %140, i64 1
  store %struct.FX_TPO** %141, %struct.FX_TPO*** %81, align 8
  %142 = load i64, i64* %114, align 8
  %143 = ptrtoint %struct.FX_TPO** %141 to i64
  %144 = sub i64 %142, %143
  %145 = ashr exact i64 %144, 3
  %146 = icmp ugt i64 %145, 2
  br i1 %146, label %136, label %147

147:                                              ; preds = %136
  %148 = inttoptr i64 %142 to %struct.FX_TPO**
  br label %149

149:                                              ; preds = %147, %113
  %150 = phi %struct.FX_TPO** [ %97, %113 ], [ %148, %147 ]
  %151 = phi %struct.FX_TPO** [ %93, %113 ], [ %141, %147 ]
  %152 = phi i64 [ %116, %113 ], [ %145, %147 ]
  switch i64 %152, label %156 [
    i64 1, label %154
    i64 2, label %153
  ]

153:                                              ; preds = %149
  br label %154

154:                                              ; preds = %149, %153
  %155 = phi i64 [ 512, %153 ], [ 256, %149 ]
  store i64 %155, i64* %83, align 8
  br label %156

156:                                              ; preds = %154, %149
  %157 = icmp eq %struct.FX_TPO** %151, %150
  br i1 %157, label %176, label %158

158:                                              ; preds = %156, %158
  %159 = phi %struct.FX_TPO** [ %162, %158 ], [ %151, %156 ]
  %160 = bitcast %struct.FX_TPO** %159 to i8**
  %161 = load i8*, i8** %160, align 8
  call void @_ZdlPv(i8* %161) #12
  %162 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %159, i64 1
  %163 = icmp eq %struct.FX_TPO** %162, %150
  br i1 %163, label %164, label %158

164:                                              ; preds = %158
  %165 = load %struct.FX_TPO**, %struct.FX_TPO*** %81, align 8
  %166 = load %struct.FX_TPO**, %struct.FX_TPO*** %82, align 8
  %167 = icmp eq %struct.FX_TPO** %166, %165
  br i1 %167, label %176, label %168

168:                                              ; preds = %164
  %169 = ptrtoint %struct.FX_TPO** %165 to i64
  %170 = getelementptr %struct.FX_TPO*, %struct.FX_TPO** %166, i64 -1
  %171 = ptrtoint %struct.FX_TPO** %170 to i64
  %172 = sub i64 %171, %169
  %173 = lshr i64 %172, 3
  %174 = xor i64 %173, -1
  %175 = getelementptr %struct.FX_TPO*, %struct.FX_TPO** %166, i64 %174
  store %struct.FX_TPO** %175, %struct.FX_TPO*** %82, align 8
  br label %176

176:                                              ; preds = %168, %164, %156
  %177 = load %struct.FX_TPO**, %struct.FX_TPO*** %80, align 8
  %178 = icmp eq %struct.FX_TPO** %177, null
  br i1 %178, label %181, label %179

179:                                              ; preds = %176
  %180 = bitcast %struct.FX_TPO** %177 to i8*
  call void @_ZdlPv(i8* %180) #12
  br label %181

181:                                              ; preds = %176, %179
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %79) #11
  br label %182

182:                                              ; preds = %181, %65
  store %class.CFGAS_BreakLine* %72, %class.CFGAS_BreakLine** %8, align 8
  %183 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 6
  %184 = load i32, i32* %183, align 4
  %185 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 19, i64 %71, i32 2
  store i32 %184, i32* %185, align 8
  %186 = call %class.CFGAS_Char* @_ZNK11CFGAS_Break11GetLastCharEibb(%class.CFGAS_Break* %4, i32 0, i1 zeroext false, i1 zeroext true) #11
  %187 = icmp eq %class.CFGAS_Char* %186, null
  br i1 %187, label %190, label %188

188:                                              ; preds = %182
  %189 = call zeroext i8 @_ZNK10CFGAS_Char11GetCharTypeEv(%class.CFGAS_Char* nonnull %186) #11
  br label %190

190:                                              ; preds = %182, %188
  %191 = phi i8 [ %189, %188 ], [ 0, %182 ]
  %192 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 1
  store i8 %191, i8* %192, align 8
  br label %193

193:                                              ; preds = %190, %55, %49, %30, %45, %22
  %194 = phi i8 [ %48, %45 ], [ %25, %22 ], [ 0, %30 ], [ 0, %49 ], [ 1, %55 ], [ %1, %190 ]
  ret i8 %194
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CFGAS_RTFBreak14AppendChar_TabEP10CFGAS_Char(%class.CFGAS_RTFBreak* nocapture readonly, %class.CFGAS_Char* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 5
  %4 = load i32, i32* %3, align 8
  %5 = and i32 %4, 16
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %59, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 16, i32 0
  %9 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %8, align 8
  %10 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %9, i64 0, i32 3
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load i32*, i32** %12, align 8
  %14 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 3, i32 0, i32 1
  %15 = load i32*, i32** %14, align 8
  %16 = ptrtoint i32* %13 to i64
  %17 = ptrtoint i32* %15 to i64
  %18 = sub i64 %17, %16
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %35, label %20

20:                                               ; preds = %7
  %21 = ashr exact i64 %18, 2
  br label %22

22:                                               ; preds = %22, %20
  %23 = phi i32* [ %13, %20 ], [ %33, %22 ]
  %24 = phi i64 [ %21, %20 ], [ %32, %22 ]
  %25 = lshr i64 %24, 1
  %26 = getelementptr inbounds i32, i32* %23, i64 %25
  %27 = load i32, i32* %26, align 4
  %28 = icmp slt i32 %11, %27
  %29 = getelementptr inbounds i32, i32* %26, i64 1
  %30 = xor i64 %25, -1
  %31 = add i64 %24, %30
  %32 = select i1 %28, i64 %25, i64 %31
  %33 = select i1 %28, i32* %23, i32* %29
  %34 = icmp eq i64 %32, 0
  br i1 %34, label %35, label %22

35:                                               ; preds = %22, %7
  %36 = phi i32* [ %13, %7 ], [ %33, %22 ]
  %37 = icmp eq i32* %36, %15
  br i1 %37, label %40, label %38

38:                                               ; preds = %35
  %39 = load i32, i32* %36, align 4
  br label %48

40:                                               ; preds = %35
  %41 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 10
  %42 = load i32, i32* %41, align 4
  %43 = sdiv i32 %11, %42
  %44 = add nsw i32 %43, 1
  %45 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %44, i32 %42) #11
  %46 = extractvalue { i32, i1 } %45, 1
  %47 = extractvalue { i32, i1 } %45, 0
  br i1 %46, label %54, label %48

48:                                               ; preds = %38, %40
  %49 = phi i32 [ %39, %38 ], [ %47, %40 ]
  %50 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %49, i32 %11) #11
  %51 = extractvalue { i32, i1 } %50, 1
  %52 = extractvalue { i32, i1 } %50, 0
  %53 = select i1 %51, i32 0, i32 %52
  br label %54

54:                                               ; preds = %40, %48
  %55 = phi i32 [ %53, %48 ], [ 0, %40 ]
  %56 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %1, i64 0, i32 5
  store i32 %55, i32* %56, align 8
  %57 = load i32, i32* %10, align 4
  %58 = add nsw i32 %57, %55
  store i32 %58, i32* %10, align 4
  br label %59

59:                                               ; preds = %2, %54
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN14CFGAS_RTFBreak18AppendChar_ControlEP10CFGAS_Char(%class.CFGAS_RTFBreak*, %class.CFGAS_Char* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %1, i64 0, i32 14
  %4 = load i16, i16* %3, align 8
  switch i16 %4, label %7 [
    i16 11, label %12
    i16 8232, label %12
    i16 12, label %5
    i16 8233, label %6
  ]

5:                                                ; preds = %2
  br label %12

6:                                                ; preds = %2
  br label %12

7:                                                ; preds = %2
  %8 = zext i16 %4 to i32
  %9 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 8
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, %8
  br i1 %11, label %12, label %15

12:                                               ; preds = %7, %6, %5, %2, %2
  %13 = phi i8 [ 2, %2 ], [ 2, %2 ], [ 4, %5 ], [ 3, %6 ], [ 3, %7 ]
  %14 = tail call zeroext i8 @_ZN14CFGAS_RTFBreak8EndBreakEN10CFGAS_Char9BreakTypeE(%class.CFGAS_RTFBreak* %0, i8 zeroext %13)
  br label %15

15:                                               ; preds = %7, %12
  %16 = phi i8 [ %14, %12 ], [ 0, %7 ]
  ret i8 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CFGAS_RTFBreak22AppendChar_CombinationEP10CFGAS_Char(%class.CFGAS_RTFBreak*, %class.CFGAS_Char* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #11
  store i32 -1431655766, i32* %3, align 4
  %5 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0
  %6 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 15, i32 0, i32 0, i32 0, i32 0
  %7 = load %class.CFGAS_GEFont*, %class.CFGAS_GEFont** %6, align 8
  %8 = icmp eq %class.CFGAS_GEFont* %7, null
  br i1 %8, label %16, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %1, i64 0, i32 14
  %11 = load i16, i16* %10, align 8
  %12 = zext i16 %11 to i32
  %13 = call zeroext i1 @_ZN12CFGAS_GEFont12GetCharWidthEwPi(%class.CFGAS_GEFont* nonnull %7, i32 signext %12, i32* nonnull %3) #11
  %14 = load i32, i32* %3, align 4
  %15 = select i1 %13, i32 %14, i32 0
  br label %16

16:                                               ; preds = %9, %2
  %17 = phi i32 [ 0, %2 ], [ %15, %9 ]
  %18 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 9
  %19 = load i32, i32* %18, align 8
  %20 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %17, i32 %19) #11
  %21 = extractvalue { i32, i1 } %20, 1
  br i1 %21, label %30, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 11
  %24 = load i32, i32* %23, align 8
  %25 = extractvalue { i32, i1 } %20, 0
  %26 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %25, i32 %24) #11
  %27 = extractvalue { i32, i1 } %26, 1
  %28 = extractvalue { i32, i1 } %26, 0
  %29 = sdiv i32 %28, 100
  br i1 %27, label %30, label %32

30:                                               ; preds = %16, %22
  %31 = phi i32 [ %29, %22 ], [ 0, %16 ]
  br label %32

32:                                               ; preds = %22, %30
  %33 = phi i1 [ true, %30 ], [ false, %22 ]
  %34 = phi i32 [ %31, %30 ], [ %29, %22 ]
  %35 = phi i32 [ 0, %30 ], [ %29, %22 ]
  %36 = call %class.CFGAS_Char* @_ZNK11CFGAS_Break11GetLastCharEibb(%class.CFGAS_Break* %5, i32 0, i1 zeroext false, i1 zeroext true) #11
  %37 = icmp eq %class.CFGAS_Char* %36, null
  br i1 %37, label %41, label %38

38:                                               ; preds = %32
  %39 = call zeroext i8 @_ZNK10CFGAS_Char11GetCharTypeEv(%class.CFGAS_Char* nonnull %36) #11
  %40 = icmp ugt i8 %39, 4
  br i1 %40, label %44, label %41

41:                                               ; preds = %32, %38
  %42 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 1
  store i8 4, i8* %42, align 8
  %43 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %1, i64 0, i32 5
  br i1 %33, label %47, label %49, !prof !22

44:                                               ; preds = %38
  %45 = sub nsw i32 0, %34
  %46 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %1, i64 0, i32 5
  br i1 %33, label %47, label %49, !prof !22

47:                                               ; preds = %41, %44
  %48 = phi i32* [ %43, %41 ], [ %46, %44 ]
  store i32 0, i32* %48, align 8
  br label %62

49:                                               ; preds = %41, %44
  %50 = phi i32* [ %43, %41 ], [ %46, %44 ]
  %51 = phi i32 [ %35, %41 ], [ %45, %44 ]
  store i32 %51, i32* %50, align 8
  %52 = icmp sgt i32 %51, 0
  br i1 %52, label %53, label %62

53:                                               ; preds = %49
  %54 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 16, i32 0
  %55 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %54, align 8
  %56 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %55, i64 0, i32 3
  %57 = load i32, i32* %56, align 4
  %58 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %57, i32 %51) #11
  %59 = extractvalue { i32, i1 } %58, 1
  br i1 %59, label %62, label %60

60:                                               ; preds = %53
  %61 = extractvalue { i32, i1 } %58, 0
  store i32 %61, i32* %56, align 4
  br label %62

62:                                               ; preds = %53, %47, %49, %60
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN14CFGAS_RTFBreak17AppendChar_ArabicEP10CFGAS_Char(%class.CFGAS_RTFBreak*, %class.CFGAS_Char*) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0
  %6 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 16, i32 0
  %7 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %6, align 8
  tail call void @_ZN15CFGAS_BreakLine24IncrementArabicCharCountEv(%class.CFGAS_BreakLine* %7) #11
  %8 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 1
  %9 = load i8, i8* %8, align 8
  %10 = add i8 %9, -7
  %11 = icmp ult i8 %10, 3
  br i1 %11, label %12, label %69

12:                                               ; preds = %2
  %13 = tail call %class.CFGAS_Char* @_ZNK11CFGAS_Break11GetLastCharEibb(%class.CFGAS_Break* %5, i32 1, i1 zeroext false, i1 zeroext true) #11
  %14 = icmp eq %class.CFGAS_Char* %13, null
  br i1 %14, label %69, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %13, i64 0, i32 5
  %17 = load i32, i32* %16, align 8
  %18 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %6, align 8
  %19 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %18, i64 0, i32 3
  %20 = load i32, i32* %19, align 4
  %21 = sub nsw i32 %20, %17
  store i32 %21, i32* %19, align 4
  %22 = tail call %class.CFGAS_Char* @_ZNK11CFGAS_Break11GetLastCharEibb(%class.CFGAS_Break* %5, i32 2, i1 zeroext false, i1 zeroext true) #11
  %23 = tail call signext i32 @_ZN6pdfium6arabic11GetFormCharEPK10CFGAS_CharS3_S3_(%class.CFGAS_Char* nonnull %13, %class.CFGAS_Char* %22, %class.CFGAS_Char* %1) #11
  %24 = icmp eq i32 %23, 65279
  br i1 %24, label %25, label %28

25:                                               ; preds = %15
  %26 = tail call zeroext i8 @_ZNK10CFGAS_Char11GetCharTypeEv(%class.CFGAS_Char* nonnull %13) #11
  %27 = icmp eq i8 %26, 7
  br label %28

28:                                               ; preds = %25, %15
  %29 = phi i1 [ false, %15 ], [ %27, %25 ]
  %30 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30) #11
  store i32 -1431655766, i32* %3, align 4
  %31 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 15, i32 0, i32 0, i32 0, i32 0
  %32 = load %class.CFGAS_GEFont*, %class.CFGAS_GEFont** %31, align 8
  %33 = icmp eq %class.CFGAS_GEFont* %32, null
  br i1 %33, label %44, label %34

34:                                               ; preds = %28
  %35 = call zeroext i1 @_ZN12CFGAS_GEFont12GetCharWidthEwPi(%class.CFGAS_GEFont* nonnull %32, i32 signext %23, i32* nonnull %3) #11
  br i1 %35, label %42, label %36

36:                                               ; preds = %34
  %37 = load %class.CFGAS_GEFont*, %class.CFGAS_GEFont** %31, align 8
  %38 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %13, i64 0, i32 14
  %39 = load i16, i16* %38, align 8
  %40 = zext i16 %39 to i32
  %41 = call zeroext i1 @_ZN12CFGAS_GEFont12GetCharWidthEwPi(%class.CFGAS_GEFont* %37, i32 signext %40, i32* nonnull %3) #11
  br i1 %41, label %42, label %44

42:                                               ; preds = %36, %34
  %43 = load i32, i32* %3, align 4
  br label %44

44:                                               ; preds = %28, %36, %42
  %45 = phi i32 [ %43, %42 ], [ 0, %36 ], [ 0, %28 ]
  %46 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 9
  %47 = load i32, i32* %46, align 8
  %48 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %45, i32 %47) #11
  %49 = extractvalue { i32, i1 } %48, 1
  br i1 %49, label %59, label %50

50:                                               ; preds = %44
  %51 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 11
  %52 = load i32, i32* %51, align 8
  %53 = extractvalue { i32, i1 } %48, 0
  %54 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %53, i32 %52) #11
  %55 = extractvalue { i32, i1 } %54, 1
  %56 = extractvalue { i32, i1 } %54, 0
  %57 = sdiv i32 %56, 100
  %58 = select i1 %55, i32 0, i32 %57
  br label %59

59:                                               ; preds = %44, %50
  %60 = phi i32 [ %58, %50 ], [ 0, %44 ]
  store i32 %60, i32* %16, align 8
  %61 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %6, align 8
  %62 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %61, i64 0, i32 3
  %63 = load i32, i32* %62, align 4
  %64 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %63, i32 %60) #11
  %65 = extractvalue { i32, i1 } %64, 1
  br i1 %65, label %116, label %66

66:                                               ; preds = %59
  %67 = extractvalue { i32, i1 } %64, 0
  store i32 %67, i32* %62, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #11
  %68 = select i1 %29, %class.CFGAS_Char* null, %class.CFGAS_Char* %13
  br label %69

69:                                               ; preds = %66, %2, %12
  %70 = phi %class.CFGAS_Char* [ null, %12 ], [ null, %2 ], [ %68, %66 ]
  %71 = call signext i32 @_ZN6pdfium6arabic11GetFormCharEPK10CFGAS_CharS3_S3_(%class.CFGAS_Char* %1, %class.CFGAS_Char* %70, %class.CFGAS_Char* null) #11
  %72 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %72) #11
  store i32 -1431655766, i32* %4, align 4
  %73 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 15, i32 0, i32 0, i32 0, i32 0
  %74 = load %class.CFGAS_GEFont*, %class.CFGAS_GEFont** %73, align 8
  %75 = icmp eq %class.CFGAS_GEFont* %74, null
  br i1 %75, label %86, label %76

76:                                               ; preds = %69
  %77 = call zeroext i1 @_ZN12CFGAS_GEFont12GetCharWidthEwPi(%class.CFGAS_GEFont* nonnull %74, i32 signext %71, i32* nonnull %4) #11
  br i1 %77, label %84, label %78

78:                                               ; preds = %76
  %79 = load %class.CFGAS_GEFont*, %class.CFGAS_GEFont** %73, align 8
  %80 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %1, i64 0, i32 14
  %81 = load i16, i16* %80, align 8
  %82 = zext i16 %81 to i32
  %83 = call zeroext i1 @_ZN12CFGAS_GEFont12GetCharWidthEwPi(%class.CFGAS_GEFont* %79, i32 signext %82, i32* nonnull %4) #11
  br i1 %83, label %84, label %86

84:                                               ; preds = %78, %76
  %85 = load i32, i32* %4, align 4
  br label %86

86:                                               ; preds = %69, %78, %84
  %87 = phi i32 [ %85, %84 ], [ 0, %78 ], [ 0, %69 ]
  %88 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 9
  %89 = load i32, i32* %88, align 8
  %90 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %87, i32 %89) #11
  %91 = extractvalue { i32, i1 } %90, 1
  br i1 %91, label %101, label %92

92:                                               ; preds = %86
  %93 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 11
  %94 = load i32, i32* %93, align 8
  %95 = extractvalue { i32, i1 } %90, 0
  %96 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %95, i32 %94) #11
  %97 = extractvalue { i32, i1 } %96, 1
  %98 = extractvalue { i32, i1 } %96, 0
  %99 = sdiv i32 %98, 100
  %100 = select i1 %97, i32 0, i32 %99
  br label %101

101:                                              ; preds = %86, %92
  %102 = phi i32 [ %100, %92 ], [ 0, %86 ]
  %103 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %1, i64 0, i32 5
  store i32 %102, i32* %103, align 8
  %104 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %6, align 8
  %105 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %104, i64 0, i32 3
  %106 = load i32, i32* %105, align 4
  %107 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %106, i32 %102) #11
  %108 = extractvalue { i32, i1 } %107, 1
  br i1 %108, label %116, label %109

109:                                              ; preds = %101
  %110 = extractvalue { i32, i1 } %107, 0
  store i32 %110, i32* %105, align 4
  %111 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %6, align 8
  %112 = call i32 @_ZNK15CFGAS_BreakLine10GetLineEndEv(%class.CFGAS_BreakLine* %111) #11
  %113 = call zeroext i1 @_ZNK11CFGAS_Break22IsGreaterThanLineWidthEi(%class.CFGAS_Break* %5, i32 %112) #11
  br i1 %113, label %114, label %116

114:                                              ; preds = %109
  %115 = call zeroext i8 @_ZN14CFGAS_RTFBreak8EndBreakEN10CFGAS_Char9BreakTypeE(%class.CFGAS_RTFBreak* %0, i8 zeroext 2)
  br label %116

116:                                              ; preds = %114, %109, %101, %59
  %117 = phi i8* [ %30, %59 ], [ %72, %101 ], [ %72, %109 ], [ %72, %114 ]
  %118 = phi i8 [ 0, %59 ], [ 0, %101 ], [ 0, %109 ], [ %115, %114 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %117) #11
  ret i8 %118
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN14CFGAS_RTFBreak17AppendChar_OthersEP10CFGAS_Char(%class.CFGAS_RTFBreak*, %class.CFGAS_Char*) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = tail call zeroext i8 @_ZNK10CFGAS_Char11GetCharTypeEv(%class.CFGAS_Char* %1) #11
  %5 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %1, i64 0, i32 14
  %6 = load i16, i16* %5, align 8
  %7 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #11
  store i32 -1431655766, i32* %3, align 4
  %8 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0
  %9 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 15, i32 0, i32 0, i32 0, i32 0
  %10 = load %class.CFGAS_GEFont*, %class.CFGAS_GEFont** %9, align 8
  %11 = icmp eq %class.CFGAS_GEFont* %10, null
  br i1 %11, label %17, label %12

12:                                               ; preds = %2
  %13 = zext i16 %6 to i32
  %14 = call zeroext i1 @_ZN12CFGAS_GEFont12GetCharWidthEwPi(%class.CFGAS_GEFont* nonnull %10, i32 signext %13, i32* nonnull %3) #11
  %15 = load i32, i32* %3, align 4
  %16 = select i1 %14, i32 %15, i32 0
  br label %17

17:                                               ; preds = %12, %2
  %18 = phi i32 [ 0, %2 ], [ %16, %12 ]
  %19 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 9
  %20 = load i32, i32* %19, align 8
  %21 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %18, i32 %20) #11
  %22 = extractvalue { i32, i1 } %21, 1
  br i1 %22, label %38, label %23

23:                                               ; preds = %17
  %24 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 11
  %25 = load i32, i32* %24, align 8
  %26 = extractvalue { i32, i1 } %21, 0
  %27 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %26, i32 %25) #11
  %28 = extractvalue { i32, i1 } %27, 1
  br i1 %28, label %38, label %29

29:                                               ; preds = %23
  %30 = extractvalue { i32, i1 } %27, 0
  %31 = sdiv i32 %30, 100
  %32 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 14
  %33 = load i32, i32* %32, align 4
  %34 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %31, i32 %33) #11
  %35 = extractvalue { i32, i1 } %34, 1
  %36 = extractvalue { i32, i1 } %34, 0
  %37 = select i1 %35, i32 0, i32 %36
  br label %38

38:                                               ; preds = %17, %23, %29
  %39 = phi i32 [ %37, %29 ], [ 0, %23 ], [ 0, %17 ]
  %40 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %1, i64 0, i32 5
  store i32 %39, i32* %40, align 8
  %41 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 16, i32 0
  %42 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %41, align 8
  %43 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %42, i64 0, i32 3
  %44 = load i32, i32* %43, align 4
  %45 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %44, i32 %39) #11
  %46 = extractvalue { i32, i1 } %45, 1
  br i1 %46, label %56, label %47

47:                                               ; preds = %38
  %48 = extractvalue { i32, i1 } %45, 0
  store i32 %48, i32* %43, align 4
  %49 = icmp eq i8 %4, 2
  br i1 %49, label %56, label %50

50:                                               ; preds = %47
  %51 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %41, align 8
  %52 = call i32 @_ZNK15CFGAS_BreakLine10GetLineEndEv(%class.CFGAS_BreakLine* %51) #11
  %53 = call zeroext i1 @_ZNK11CFGAS_Break22IsGreaterThanLineWidthEi(%class.CFGAS_Break* %8, i32 %52) #11
  br i1 %53, label %54, label %56

54:                                               ; preds = %50
  %55 = call zeroext i8 @_ZN14CFGAS_RTFBreak8EndBreakEN10CFGAS_Char9BreakTypeE(%class.CFGAS_RTFBreak* %0, i8 zeroext 2)
  br label %56

56:                                               ; preds = %38, %50, %47, %54
  %57 = phi i8 [ %55, %54 ], [ 0, %38 ], [ 0, %47 ], [ 0, %50 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #11
  ret i8 %57
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

declare zeroext i1 @_ZN12CFGAS_GEFont12GetCharWidthEwPi(%class.CFGAS_GEFont*, i32 signext, i32*) local_unnamed_addr #1

declare %class.CFGAS_Char* @_ZNK11CFGAS_Break11GetLastCharEibb(%class.CFGAS_Break*, i32, i1 zeroext, i1 zeroext) local_unnamed_addr #1

declare zeroext i8 @_ZNK10CFGAS_Char11GetCharTypeEv(%class.CFGAS_Char*) local_unnamed_addr #1

declare void @_ZN15CFGAS_BreakLine24IncrementArabicCharCountEv(%class.CFGAS_BreakLine*) local_unnamed_addr #1

declare signext i32 @_ZN6pdfium6arabic11GetFormCharEPK10CFGAS_CharS3_S3_(%class.CFGAS_Char*, %class.CFGAS_Char*, %class.CFGAS_Char*) local_unnamed_addr #1

declare %class.CFGAS_Char* @_ZN15CFGAS_BreakLine7GetCharEi(%class.CFGAS_BreakLine*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN14CFGAS_RTFBreak18EndBreak_SplitLineEP15CFGAS_BreakLinebN10CFGAS_Char9BreakTypeE(%class.CFGAS_RTFBreak*, %class.CFGAS_BreakLine*, i1 zeroext, i8 zeroext) local_unnamed_addr #0 align 2 {
  %5 = alloca i32, align 4
  %6 = alloca %class.CFGAS_BreakPiece, align 8
  %7 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0
  %8 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 16, i32 0
  %9 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %8, align 8
  %10 = tail call i32 @_ZNK15CFGAS_BreakLine10GetLineEndEv(%class.CFGAS_BreakLine* %9) #11
  %11 = tail call zeroext i1 @_ZNK11CFGAS_Break22IsGreaterThanLineWidthEi(%class.CFGAS_Break* %7, i32 %10) #11
  br i1 %11, label %12, label %33

12:                                               ; preds = %4
  %13 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %8, align 8
  %14 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %13, i64 0, i32 0, i32 0, i32 1
  %15 = bitcast %class.CFGAS_Char** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %class.CFGAS_BreakLine* %13 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %16, %18
  %20 = sdiv exact i64 %19, 56
  %21 = trunc i64 %20 to i32
  %22 = add i32 %21, -1
  %23 = tail call %class.CFGAS_Char* @_ZN15CFGAS_BreakLine7GetCharEi(%class.CFGAS_BreakLine* %13, i32 %22) #11
  %24 = tail call zeroext i8 @_ZNK10CFGAS_Char11GetCharTypeEv(%class.CFGAS_Char* %23) #11
  %25 = add i8 %24, -1
  %26 = icmp ult i8 %25, 3
  br i1 %26, label %33, label %27

27:                                               ; preds = %12
  %28 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %8, align 8
  %29 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 1
  %30 = load i8, i8* %29, align 8, !range !21
  %31 = icmp eq i8 %30, 0
  %32 = and i1 %31, %2
  tail call void @_ZN14CFGAS_RTFBreak13SplitTextLineEP15CFGAS_BreakLineS1_b(%class.CFGAS_RTFBreak* %0, %class.CFGAS_BreakLine* %28, %class.CFGAS_BreakLine* %1, i1 zeroext %32)
  br label %33

33:                                               ; preds = %27, %12, %4
  %34 = phi i1 [ false, %4 ], [ false, %12 ], [ true, %27 ]
  %35 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 1
  %36 = load i8, i8* %35, align 8, !range !21
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %38, label %48

38:                                               ; preds = %33
  %39 = xor i1 %2, true
  %40 = or i1 %34, %39
  br i1 %40, label %183, label %41

41:                                               ; preds = %38
  %42 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %42) #11
  %43 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %8, align 8
  %44 = tail call i32 @_ZNK15CFGAS_BreakLine10GetLineEndEv(%class.CFGAS_BreakLine* %43) #11
  store i32 %44, i32* %5, align 4
  %45 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %8, align 8
  %46 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %45, i64 0, i32 0
  %47 = call i32 @_ZN14CFGAS_RTFBreak11GetBreakPosERNSt3__16vectorI10CFGAS_CharNS0_9allocatorIS2_EEEEbbPi(%class.CFGAS_RTFBreak* %0, %"class.std::__1::vector.47"* dereferenceable(24) %46, i1 zeroext %2, i1 zeroext true, i32* nonnull %5)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %42) #11
  br label %183

48:                                               ; preds = %33
  %49 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %8, align 8
  %50 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %49, i64 0, i32 0, i32 0, i32 0
  %51 = load %class.CFGAS_Char*, %class.CFGAS_Char** %50, align 8
  %52 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %6, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %52) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %52, i8 -86, i64 64, i1 false)
  call void @_ZN16CFGAS_BreakPieceC1Ev(%class.CFGAS_BreakPiece* nonnull %6) #11
  %53 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %8, align 8
  %54 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %53, i64 0, i32 0
  %55 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %6, i64 0, i32 12, i32 0
  store %"class.std::__1::vector.47"* %54, %"class.std::__1::vector.47"** %55, align 8
  %56 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %53, i64 0, i32 0, i32 0, i32 1
  %57 = bitcast %class.CFGAS_Char** %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = bitcast %class.CFGAS_BreakLine* %53 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = sub i64 %58, %60
  %62 = sdiv exact i64 %61, 56
  %63 = icmp ult i64 %62, 2147483648
  br i1 %63, label %65, label %64, !prof !23

64:                                               ; preds = %48
  call void @llvm.trap() #11
  unreachable

65:                                               ; preds = %48
  %66 = trunc i64 %62 to i32
  %67 = add nsw i32 %66, -1
  %68 = icmp sgt i32 %66, 0
  br i1 %68, label %69, label %79

69:                                               ; preds = %65
  %70 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %6, i64 0, i32 3
  %71 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %6, i64 0, i32 2
  %72 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %6, i64 0, i32 1
  %73 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %6, i64 0, i32 7
  %74 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %6, i64 0, i32 8
  %75 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %6, i64 0, i32 9
  %76 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %6, i64 0, i32 10
  %77 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %6, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  %78 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %6, i64 0, i32 4
  br label %80

79:                                               ; preds = %179, %65
  call void @_ZN16CFGAS_BreakPieceD1Ev(%class.CFGAS_BreakPiece* nonnull %6) #11
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %52) #11
  br label %183

80:                                               ; preds = %69, %179
  %81 = phi i32 [ 0, %69 ], [ %181, %179 ]
  %82 = phi i32 [ 0, %69 ], [ %135, %179 ]
  %83 = phi i32 [ -1, %69 ], [ %134, %179 ]
  %84 = phi i8 [ 1, %69 ], [ %180, %179 ]
  %85 = sext i32 %81 to i64
  %86 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %51, i64 %85
  %87 = and i8 %84, 1
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %132, label %89

89:                                               ; preds = %80
  store i32 %81, i32* %70, align 4
  %90 = load i32, i32* %71, align 8
  %91 = load i32, i32* %72, align 4
  %92 = add nsw i32 %91, %90
  store i32 %92, i32* %72, align 4
  store i32 0, i32* %71, align 8
  %93 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %86, i64 0, i32 0
  %94 = load i8, i8* %93, align 8
  store i8 %94, i8* %52, align 8
  %95 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %51, i64 %85, i32 10
  %96 = load i32, i32* %95, align 4
  store i32 %96, i32* %73, align 4
  %97 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %51, i64 %85, i32 16
  %98 = load i32, i32* %97, align 4
  %99 = shl i32 %98, 16
  %100 = ashr exact i32 %99, 16
  store i32 %100, i32* %74, align 8
  %101 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %51, i64 %85, i32 17
  %102 = load i32, i32* %101, align 8
  %103 = shl i32 %102, 16
  %104 = ashr exact i32 %103, 16
  store i32 %104, i32* %75, align 4
  %105 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %51, i64 %85, i32 11
  %106 = load i32, i32* %105, align 8
  store i32 %106, i32* %76, align 8
  %107 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %77, align 8
  %108 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %51, i64 %85, i32 13, i32 0, i32 0, i32 0, i32 0
  %109 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %108, align 8
  %110 = icmp eq %class.CFGAS_TextUserData* %107, %109
  br i1 %110, label %132, label %111

111:                                              ; preds = %89
  %112 = icmp eq %class.CFGAS_TextUserData* %109, null
  br i1 %112, label %118, label %113

113:                                              ; preds = %111
  %114 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %109, i64 0, i32 0, i32 1
  %115 = load i64, i64* %114, align 8
  %116 = add nsw i64 %115, 1
  store i64 %116, i64* %114, align 8
  %117 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %77, align 8
  br label %118

118:                                              ; preds = %113, %111
  %119 = phi %class.CFGAS_TextUserData* [ %117, %113 ], [ %107, %111 ]
  store %class.CFGAS_TextUserData* %109, %class.CFGAS_TextUserData** %77, align 8
  %120 = icmp eq %class.CFGAS_TextUserData* %119, null
  br i1 %120, label %132, label %121

121:                                              ; preds = %118
  %122 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %119, i64 0, i32 0, i32 1
  %123 = load i64, i64* %122, align 8
  %124 = add nsw i64 %123, -1
  store i64 %124, i64* %122, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %132

126:                                              ; preds = %121
  %127 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %119, i64 0, i32 0
  %128 = bitcast %class.CFGAS_TextUserData* %119 to void (%"class.fxcrt::Retainable"*)***
  %129 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %128, align 8
  %130 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %129, i64 1
  %131 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %130, align 8
  call void %131(%"class.fxcrt::Retainable"* nonnull %127) #11
  br label %132

132:                                              ; preds = %126, %121, %118, %89, %80
  %133 = phi i8 [ %84, %80 ], [ 0, %89 ], [ 0, %118 ], [ 0, %121 ], [ 0, %126 ]
  %134 = phi i32 [ %83, %80 ], [ %106, %89 ], [ %106, %118 ], [ %106, %121 ], [ %106, %126 ]
  %135 = phi i32 [ %82, %80 ], [ %81, %89 ], [ %81, %118 ], [ %81, %121 ], [ %81, %126 ]
  %136 = icmp eq i32 %81, %67
  br i1 %136, label %145, label %137

137:                                              ; preds = %132
  %138 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %86, i64 0, i32 0
  %139 = load i8, i8* %138, align 8
  %140 = icmp eq i8 %139, 0
  br i1 %140, label %141, label %145

141:                                              ; preds = %137
  %142 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %51, i64 %85, i32 11
  %143 = load i32, i32* %142, align 8
  %144 = icmp eq i32 %143, %134
  br i1 %144, label %173, label %145

145:                                              ; preds = %141, %137, %132
  %146 = sub nsw i32 %81, %135
  store i32 %146, i32* %78, align 8
  %147 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %51, i64 %85, i32 11
  %148 = load i32, i32* %147, align 8
  %149 = icmp eq i32 %148, %134
  br i1 %149, label %150, label %159

150:                                              ; preds = %145
  %151 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %86, i64 0, i32 0
  %152 = load i8, i8* %151, align 8
  store i8 %152, i8* %52, align 8
  %153 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %51, i64 %85, i32 5
  %154 = load i32, i32* %153, align 8
  %155 = load i32, i32* %71, align 8
  %156 = add nsw i32 %155, %154
  store i32 %156, i32* %71, align 8
  %157 = add nsw i32 %146, 1
  store i32 %157, i32* %78, align 8
  %158 = add nsw i32 %81, 1
  br label %159

159:                                              ; preds = %150, %145
  %160 = phi i32 [ %158, %150 ], [ %81, %145 ]
  %161 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %8, align 8
  %162 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %161, i64 0, i32 1, i32 0, i32 1
  %163 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %162, align 8
  %164 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %161, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %165 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %164, align 8
  %166 = icmp eq %class.CFGAS_BreakPiece* %163, %165
  br i1 %166, label %171, label %167

167:                                              ; preds = %159
  call void @_ZN16CFGAS_BreakPieceC1ERKS_(%class.CFGAS_BreakPiece* %163, %class.CFGAS_BreakPiece* nonnull dereferenceable(64) %6) #11
  %168 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %163, i64 1
  %169 = ptrtoint %class.CFGAS_BreakPiece* %168 to i64
  %170 = bitcast %class.CFGAS_BreakPiece** %162 to i64*
  store i64 %169, i64* %170, align 8
  br label %179

171:                                              ; preds = %159
  %172 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %161, i64 0, i32 1
  call void @_ZNSt3__16vectorI16CFGAS_BreakPieceNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(%"class.std::__1::vector.72"* %172, %class.CFGAS_BreakPiece* nonnull dereferenceable(64) %6) #11
  br label %179

173:                                              ; preds = %141
  %174 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %51, i64 %85, i32 5
  %175 = load i32, i32* %174, align 8
  %176 = load i32, i32* %71, align 8
  %177 = add nsw i32 %176, %175
  store i32 %177, i32* %71, align 8
  %178 = add nsw i32 %81, 1
  br label %179

179:                                              ; preds = %171, %167, %173
  %180 = phi i8 [ %133, %173 ], [ 1, %167 ], [ 1, %171 ]
  %181 = phi i32 [ %178, %173 ], [ %160, %167 ], [ %160, %171 ]
  %182 = icmp slt i32 %181, %66
  br i1 %182, label %80, label %79

183:                                              ; preds = %41, %38, %79
  %184 = phi i1 [ true, %79 ], [ false, %38 ], [ false, %41 ]
  ret i1 %184
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CFGAS_RTFBreak17EndBreak_BidiLineEPNSt3__15dequeI6FX_TPONS0_9allocatorIS2_EEEEN10CFGAS_Char9BreakTypeE(%class.CFGAS_RTFBreak* nocapture readonly, %"class.std::__1::deque"*, i8 zeroext) local_unnamed_addr #0 align 2 {
  %4 = alloca %"struct.std::__1::__less.134", align 1
  %5 = alloca %class.CFGAS_BreakPiece, align 8
  %6 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 16, i32 0
  %7 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %6, align 8
  %8 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %7, i64 0, i32 0
  %9 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 1
  %10 = load i8, i8* %9, align 8, !range !21
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %56

12:                                               ; preds = %3
  %13 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %7, i64 0, i32 4
  %14 = load i32, i32* %13, align 8
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %56

16:                                               ; preds = %12
  %17 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %7, i64 0, i32 0, i32 0, i32 1
  %18 = bitcast %class.CFGAS_Char** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %class.CFGAS_BreakLine* %7 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = icmp eq i64 %19, %21
  br i1 %22, label %28, label %23

23:                                               ; preds = %16
  %24 = inttoptr i64 %21 to %class.CFGAS_Char*
  %25 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %7, i64 0, i32 0, i32 0, i32 0
  br label %30

26:                                               ; preds = %43
  %27 = add i64 %39, 1
  br label %28

28:                                               ; preds = %26, %16
  %29 = phi i64 [ 1, %16 ], [ %27, %26 ]
  tail call void @_ZN10CFGAS_Char8BidiLineEPNSt3__16vectorIS_NS0_9allocatorIS_EEEEm(%"class.std::__1::vector.47"* %8, i64 %29) #11
  br label %84

30:                                               ; preds = %54, %23
  %31 = phi %class.CFGAS_Char* [ %24, %23 ], [ %55, %54 ]
  %32 = phi i64 [ 0, %23 ], [ %39, %54 ]
  %33 = phi i64 [ 0, %23 ], [ %44, %54 ]
  %34 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %31, i64 %33
  %35 = trunc i64 %33 to i16
  %36 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %31, i64 %33, i32 7
  store i16 %35, i16* %36, align 2
  %37 = tail call zeroext i8 @_ZNK10CFGAS_Char11GetCharTypeEv(%class.CFGAS_Char* %34) #11
  %38 = icmp eq i8 %37, 3
  %39 = select i1 %38, i64 %32, i64 %33
  %40 = icmp eq i64 %33, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %30
  %42 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %31, i64 0, i32 6
  store i16 1, i16* %42, align 4
  br label %43

43:                                               ; preds = %30, %41
  %44 = add nuw i64 %33, 1
  %45 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %6, align 8
  %46 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %45, i64 0, i32 0, i32 0, i32 1
  %47 = bitcast %class.CFGAS_Char** %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = bitcast %class.CFGAS_BreakLine* %45 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = sub i64 %48, %50
  %52 = sdiv exact i64 %51, 56
  %53 = icmp ult i64 %44, %52
  br i1 %53, label %54, label %26

54:                                               ; preds = %43
  %55 = load %class.CFGAS_Char*, %class.CFGAS_Char** %25, align 8
  br label %30

56:                                               ; preds = %3, %12
  %57 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %7, i64 0, i32 0, i32 0, i32 1
  %58 = bitcast %class.CFGAS_Char** %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = bitcast %class.CFGAS_BreakLine* %7 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = icmp eq i64 %59, %61
  br i1 %62, label %84, label %63

63:                                               ; preds = %56
  %64 = inttoptr i64 %61 to %class.CFGAS_Char*
  %65 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %7, i64 0, i32 0, i32 0, i32 0
  br label %66

66:                                               ; preds = %82, %63
  %67 = phi %class.CFGAS_Char* [ %64, %63 ], [ %83, %82 ]
  %68 = phi i64 [ 0, %63 ], [ %72, %82 ]
  %69 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %67, i64 %68, i32 6
  store i16 0, i16* %69, align 4
  %70 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %67, i64 %68, i32 7
  store i16 0, i16* %70, align 2
  %71 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %67, i64 %68, i32 8
  store i16 0, i16* %71, align 8
  %72 = add nuw i64 %68, 1
  %73 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %6, align 8
  %74 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %73, i64 0, i32 0, i32 0, i32 1
  %75 = bitcast %class.CFGAS_Char** %74 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = bitcast %class.CFGAS_BreakLine* %73 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = sub i64 %76, %78
  %80 = sdiv exact i64 %79, 56
  %81 = icmp ult i64 %72, %80
  br i1 %81, label %82, label %84

82:                                               ; preds = %66
  %83 = load %class.CFGAS_Char*, %class.CFGAS_Char** %65, align 8
  br label %66

84:                                               ; preds = %66, %56, %28
  %85 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %85) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %85, i8 -86, i64 64, i1 false)
  call void @_ZN16CFGAS_BreakPieceC1Ev(%class.CFGAS_BreakPiece* nonnull %5) #11
  store i8 1, i8* %85, align 8
  %86 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %6, align 8
  %87 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %86, i64 0, i32 2
  %88 = load i32, i32* %87, align 8
  %89 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 1
  store i32 %88, i32* %89, align 4
  %90 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 12, i32 0
  store %"class.std::__1::vector.47"* %8, %"class.std::__1::vector.47"** %90, align 8
  %91 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %86, i64 0, i32 0, i32 0, i32 1
  %92 = bitcast %class.CFGAS_Char** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = bitcast %class.CFGAS_BreakLine* %86 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = sub i64 %93, %95
  %97 = sdiv exact i64 %96, 56
  %98 = icmp ult i64 %97, 2147483648
  br i1 %98, label %100, label %99, !prof !23

99:                                               ; preds = %84
  call void @llvm.trap() #11
  unreachable

100:                                              ; preds = %84
  %101 = trunc i64 %97 to i32
  %102 = icmp sgt i32 %101, 0
  br i1 %102, label %103, label %260

103:                                              ; preds = %100
  %104 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %7, i64 0, i32 0, i32 0, i32 0
  %105 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 3
  %106 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 4
  %107 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 2
  %108 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 6
  %109 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 0, i32 2
  %110 = bitcast %struct.FX_TPO*** %109 to i64*
  %111 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 0, i32 1
  %112 = bitcast %struct.FX_TPO*** %111 to i64*
  %113 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 1
  %114 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %115 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 5
  %116 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 7
  %117 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 8
  %118 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 9
  %119 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 10
  %120 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  br label %121

121:                                              ; preds = %103, %254
  %122 = phi i32 [ -1, %103 ], [ %258, %254 ]
  %123 = phi i32 [ 0, %103 ], [ %257, %254 ]
  %124 = phi i32 [ 0, %103 ], [ %256, %254 ]
  %125 = phi i32 [ -1, %103 ], [ %255, %254 ]
  %126 = sext i32 %124 to i64
  %127 = load %class.CFGAS_Char*, %class.CFGAS_Char** %104, align 8
  %128 = icmp slt i32 %122, 0
  %129 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %127, i64 %126, i32 6
  %130 = load i16, i16* %129, align 4
  %131 = zext i16 %130 to i32
  br i1 %128, label %132, label %179

132:                                              ; preds = %121
  %133 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %127, i64 %126, i32 5
  %134 = load i32, i32* %133, align 8
  %135 = icmp sgt i32 %134, 0
  %136 = select i1 %135, i32 %134, i32 0
  store i32 %136, i32* %107, align 8
  store i32 %131, i32* %115, align 4
  %137 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %127, i64 %126, i32 8
  %138 = load i16, i16* %137, align 8
  %139 = zext i16 %138 to i32
  store i32 %139, i32* %108, align 8
  %140 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %127, i64 %126, i32 10
  %141 = load i32, i32* %140, align 4
  store i32 %141, i32* %116, align 4
  %142 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %127, i64 %126, i32 16
  %143 = load i32, i32* %142, align 4
  %144 = shl i32 %143, 16
  %145 = ashr exact i32 %144, 16
  store i32 %145, i32* %117, align 8
  %146 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %127, i64 %126, i32 17
  %147 = load i32, i32* %146, align 8
  %148 = shl i32 %147, 16
  %149 = ashr exact i32 %148, 16
  store i32 %149, i32* %118, align 4
  %150 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %127, i64 %126, i32 11
  %151 = load i32, i32* %150, align 8
  store i32 %151, i32* %119, align 8
  %152 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %120, align 8
  %153 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %127, i64 %126, i32 13, i32 0, i32 0, i32 0, i32 0
  %154 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %153, align 8
  %155 = icmp eq %class.CFGAS_TextUserData* %152, %154
  br i1 %155, label %177, label %156

156:                                              ; preds = %132
  %157 = icmp eq %class.CFGAS_TextUserData* %154, null
  br i1 %157, label %163, label %158

158:                                              ; preds = %156
  %159 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %154, i64 0, i32 0, i32 1
  %160 = load i64, i64* %159, align 8
  %161 = add nsw i64 %160, 1
  store i64 %161, i64* %159, align 8
  %162 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %120, align 8
  br label %163

163:                                              ; preds = %158, %156
  %164 = phi %class.CFGAS_TextUserData* [ %162, %158 ], [ %152, %156 ]
  store %class.CFGAS_TextUserData* %154, %class.CFGAS_TextUserData** %120, align 8
  %165 = icmp eq %class.CFGAS_TextUserData* %164, null
  br i1 %165, label %177, label %166

166:                                              ; preds = %163
  %167 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %164, i64 0, i32 0, i32 1
  %168 = load i64, i64* %167, align 8
  %169 = add nsw i64 %168, -1
  store i64 %169, i64* %167, align 8
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %171, label %177

171:                                              ; preds = %166
  %172 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %164, i64 0, i32 0
  %173 = bitcast %class.CFGAS_TextUserData* %164 to void (%"class.fxcrt::Retainable"*)***
  %174 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %173, align 8
  %175 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %174, i64 1
  %176 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %175, align 8
  call void %176(%"class.fxcrt::Retainable"* nonnull %172) #11
  br label %177

177:                                              ; preds = %132, %163, %166, %171
  store i8 1, i8* %85, align 8
  %178 = add nsw i32 %124, 1
  br label %254

179:                                              ; preds = %121
  %180 = icmp eq i32 %122, %131
  br i1 %180, label %181, label %185

181:                                              ; preds = %179
  %182 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %127, i64 %126, i32 11
  %183 = load i32, i32* %182, align 8
  %184 = icmp eq i32 %183, %125
  br i1 %184, label %245, label %185

185:                                              ; preds = %181, %179
  %186 = load i32, i32* %105, align 4
  %187 = sub nsw i32 %124, %186
  store i32 %187, i32* %106, align 8
  %188 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %6, align 8
  %189 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %188, i64 0, i32 1, i32 0, i32 1
  %190 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %189, align 8
  %191 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %188, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %192 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %191, align 8
  %193 = icmp eq %class.CFGAS_BreakPiece* %190, %192
  br i1 %193, label %198, label %194

194:                                              ; preds = %185
  call void @_ZN16CFGAS_BreakPieceC1ERKS_(%class.CFGAS_BreakPiece* %190, %class.CFGAS_BreakPiece* nonnull dereferenceable(64) %5) #11
  %195 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %190, i64 1
  %196 = ptrtoint %class.CFGAS_BreakPiece* %195 to i64
  %197 = bitcast %class.CFGAS_BreakPiece** %189 to i64*
  store i64 %196, i64* %197, align 8
  br label %200

198:                                              ; preds = %185
  %199 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %188, i64 0, i32 1
  call void @_ZNSt3__16vectorI16CFGAS_BreakPieceNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(%"class.std::__1::vector.72"* %199, %class.CFGAS_BreakPiece* nonnull dereferenceable(64) %5) #11
  br label %200

200:                                              ; preds = %194, %198
  %201 = load i32, i32* %107, align 8
  %202 = load i32, i32* %89, align 4
  %203 = add nsw i32 %202, %201
  store i32 %203, i32* %89, align 4
  store i32 %124, i32* %105, align 4
  %204 = add nsw i32 %123, 1
  %205 = load i32, i32* %108, align 8
  %206 = load i64, i64* %110, align 8
  %207 = load i64, i64* %112, align 8
  %208 = sub i64 %206, %207
  %209 = icmp eq i64 %208, 0
  %210 = shl i64 %208, 6
  %211 = add i64 %210, -1
  %212 = select i1 %209, i64 0, i64 %211
  %213 = load i64, i64* %113, align 8
  %214 = load i64, i64* %114, align 8
  %215 = add i64 %214, %213
  %216 = icmp eq i64 %212, %215
  %217 = inttoptr i64 %207 to %struct.FX_TPO**
  %218 = inttoptr i64 %206 to %struct.FX_TPO**
  br i1 %216, label %219, label %225

219:                                              ; preds = %200
  call void @_ZNSt3__15dequeI6FX_TPONS_9allocatorIS1_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %1) #11
  %220 = load i64, i64* %114, align 8
  %221 = load i64, i64* %113, align 8
  %222 = load %struct.FX_TPO**, %struct.FX_TPO*** %111, align 8
  %223 = load %struct.FX_TPO**, %struct.FX_TPO*** %109, align 8
  %224 = add i64 %221, %220
  br label %225

225:                                              ; preds = %219, %200
  %226 = phi i64 [ %224, %219 ], [ %215, %200 ]
  %227 = phi %struct.FX_TPO** [ %223, %219 ], [ %218, %200 ]
  %228 = phi %struct.FX_TPO** [ %222, %219 ], [ %217, %200 ]
  %229 = icmp eq %struct.FX_TPO** %227, %228
  br i1 %229, label %237, label %230

230:                                              ; preds = %225
  %231 = lshr i64 %226, 9
  %232 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %228, i64 %231
  %233 = load %struct.FX_TPO*, %struct.FX_TPO** %232, align 8
  %234 = and i64 %226, 511
  %235 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %233, i64 %234
  %236 = bitcast %struct.FX_TPO* %235 to i64*
  br label %237

237:                                              ; preds = %225, %230
  %238 = phi i64* [ %236, %230 ], [ null, %225 ]
  %239 = zext i32 %205 to i64
  %240 = shl nuw i64 %239, 32
  %241 = zext i32 %123 to i64
  %242 = or i64 %240, %241
  store i64 %242, i64* %238, align 4
  %243 = load i64, i64* %114, align 8
  %244 = add i64 %243, 1
  store i64 %244, i64* %114, align 8
  br label %254

245:                                              ; preds = %181
  %246 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %127, i64 %126, i32 5
  %247 = load i32, i32* %246, align 8
  %248 = icmp sgt i32 %247, 0
  br i1 %248, label %249, label %252

249:                                              ; preds = %245
  %250 = load i32, i32* %107, align 8
  %251 = add nsw i32 %250, %247
  store i32 %251, i32* %107, align 8
  br label %252

252:                                              ; preds = %249, %245
  %253 = add nsw i32 %124, 1
  br label %254

254:                                              ; preds = %237, %252, %177
  %255 = phi i32 [ %151, %177 ], [ %125, %237 ], [ %125, %252 ]
  %256 = phi i32 [ %178, %177 ], [ %124, %237 ], [ %253, %252 ]
  %257 = phi i32 [ %123, %177 ], [ %204, %237 ], [ %123, %252 ]
  %258 = phi i32 [ %131, %177 ], [ -1, %237 ], [ %122, %252 ]
  %259 = icmp slt i32 %256, %101
  br i1 %259, label %121, label %260

260:                                              ; preds = %254, %100
  %261 = phi i32 [ 0, %100 ], [ %256, %254 ]
  %262 = phi i32 [ 0, %100 ], [ %257, %254 ]
  %263 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 3
  %264 = load i32, i32* %263, align 4
  %265 = icmp sgt i32 %261, %264
  br i1 %265, label %266, label %329

266:                                              ; preds = %260
  store i8 %2, i8* %85, align 8
  %267 = sub nsw i32 %261, %264
  %268 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 4
  store i32 %267, i32* %268, align 8
  %269 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %6, align 8
  %270 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %269, i64 0, i32 1, i32 0, i32 1
  %271 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %270, align 8
  %272 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %269, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %273 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %272, align 8
  %274 = icmp eq %class.CFGAS_BreakPiece* %271, %273
  br i1 %274, label %279, label %275

275:                                              ; preds = %266
  call void @_ZN16CFGAS_BreakPieceC1ERKS_(%class.CFGAS_BreakPiece* %271, %class.CFGAS_BreakPiece* nonnull dereferenceable(64) %5) #11
  %276 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %271, i64 1
  %277 = ptrtoint %class.CFGAS_BreakPiece* %276 to i64
  %278 = bitcast %class.CFGAS_BreakPiece** %270 to i64*
  store i64 %277, i64* %278, align 8
  br label %281

279:                                              ; preds = %266
  %280 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %269, i64 0, i32 1
  call void @_ZNSt3__16vectorI16CFGAS_BreakPieceNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(%"class.std::__1::vector.72"* %280, %class.CFGAS_BreakPiece* nonnull dereferenceable(64) %5) #11
  br label %281

281:                                              ; preds = %275, %279
  %282 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 6
  %283 = load i32, i32* %282, align 8
  %284 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 0, i32 2
  %285 = bitcast %struct.FX_TPO*** %284 to i64*
  %286 = load i64, i64* %285, align 8
  %287 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 0, i32 1
  %288 = bitcast %struct.FX_TPO*** %287 to i64*
  %289 = load i64, i64* %288, align 8
  %290 = sub i64 %286, %289
  %291 = icmp eq i64 %290, 0
  %292 = shl i64 %290, 6
  %293 = add i64 %292, -1
  %294 = select i1 %291, i64 0, i64 %293
  %295 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 1
  %296 = load i64, i64* %295, align 8
  %297 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %298 = load i64, i64* %297, align 8
  %299 = add i64 %298, %296
  %300 = icmp eq i64 %294, %299
  %301 = inttoptr i64 %289 to %struct.FX_TPO**
  %302 = inttoptr i64 %286 to %struct.FX_TPO**
  br i1 %300, label %303, label %309

303:                                              ; preds = %281
  call void @_ZNSt3__15dequeI6FX_TPONS_9allocatorIS1_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %1) #11
  %304 = load i64, i64* %297, align 8
  %305 = load i64, i64* %295, align 8
  %306 = load %struct.FX_TPO**, %struct.FX_TPO*** %287, align 8
  %307 = load %struct.FX_TPO**, %struct.FX_TPO*** %284, align 8
  %308 = add i64 %305, %304
  br label %309

309:                                              ; preds = %303, %281
  %310 = phi i64 [ %308, %303 ], [ %299, %281 ]
  %311 = phi %struct.FX_TPO** [ %307, %303 ], [ %302, %281 ]
  %312 = phi %struct.FX_TPO** [ %306, %303 ], [ %301, %281 ]
  %313 = icmp eq %struct.FX_TPO** %311, %312
  br i1 %313, label %321, label %314

314:                                              ; preds = %309
  %315 = lshr i64 %310, 9
  %316 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %312, i64 %315
  %317 = load %struct.FX_TPO*, %struct.FX_TPO** %316, align 8
  %318 = and i64 %310, 511
  %319 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %317, i64 %318
  %320 = bitcast %struct.FX_TPO* %319 to i64*
  br label %321

321:                                              ; preds = %309, %314
  %322 = phi i64* [ %320, %314 ], [ null, %309 ]
  %323 = zext i32 %283 to i64
  %324 = shl nuw i64 %323, 32
  %325 = zext i32 %262 to i64
  %326 = or i64 %324, %325
  store i64 %326, i64* %322, align 4
  %327 = load i64, i64* %297, align 8
  %328 = add i64 %327, 1
  store i64 %328, i64* %297, align 8
  br label %329

329:                                              ; preds = %321, %260
  %330 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 0, i32 1
  %331 = load %struct.FX_TPO**, %struct.FX_TPO*** %330, align 8
  %332 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 1
  %333 = load i64, i64* %332, align 8
  %334 = lshr i64 %333, 9
  %335 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %331, i64 %334
  %336 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 0, i32 2
  %337 = load %struct.FX_TPO**, %struct.FX_TPO*** %336, align 8
  %338 = icmp eq %struct.FX_TPO** %337, %331
  br i1 %338, label %339, label %345

339:                                              ; preds = %329
  %340 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %341 = load i64, i64* %340, align 8
  %342 = add i64 %341, %333
  %343 = lshr i64 %342, 9
  %344 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %331, i64 %343
  br label %357

345:                                              ; preds = %329
  %346 = load %struct.FX_TPO*, %struct.FX_TPO** %335, align 8
  %347 = and i64 %333, 511
  %348 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %346, i64 %347
  %349 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %350 = load i64, i64* %349, align 8
  %351 = add i64 %350, %333
  %352 = lshr i64 %351, 9
  %353 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %331, i64 %352
  %354 = load %struct.FX_TPO*, %struct.FX_TPO** %353, align 8
  %355 = and i64 %351, 511
  %356 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %354, i64 %355
  br label %357

357:                                              ; preds = %339, %345
  %358 = phi %struct.FX_TPO** [ %353, %345 ], [ %344, %339 ]
  %359 = phi i64* [ %349, %345 ], [ %340, %339 ]
  %360 = phi %struct.FX_TPO* [ %348, %345 ], [ null, %339 ]
  %361 = phi %struct.FX_TPO* [ %356, %345 ], [ null, %339 ]
  %362 = getelementptr inbounds %"struct.std::__1::__less.134", %"struct.std::__1::__less.134"* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %362) #11
  call void @_ZNSt3__16__sortIRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEvT0_SA_T_(%struct.FX_TPO** %335, %struct.FX_TPO* %360, %struct.FX_TPO** %358, %struct.FX_TPO* %361, %"struct.std::__1::__less.134"* nonnull dereferenceable(1) %4) #11
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %362) #11
  %363 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %6, align 8
  %364 = load %struct.FX_TPO**, %struct.FX_TPO*** %330, align 8
  %365 = load i64, i64* %332, align 8
  %366 = lshr i64 %365, 9
  %367 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %364, i64 %366
  %368 = load %struct.FX_TPO**, %struct.FX_TPO*** %336, align 8
  %369 = icmp eq %struct.FX_TPO** %368, %364
  br i1 %369, label %385, label %370

370:                                              ; preds = %357
  %371 = load %struct.FX_TPO*, %struct.FX_TPO** %367, align 8
  %372 = and i64 %365, 511
  %373 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %371, i64 %372
  %374 = load i64, i64* %359, align 8
  %375 = add i64 %374, %365
  %376 = lshr i64 %375, 9
  %377 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %364, i64 %376
  %378 = load %struct.FX_TPO*, %struct.FX_TPO** %377, align 8
  %379 = and i64 %375, 511
  %380 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %378, i64 %379
  %381 = icmp eq %struct.FX_TPO* %380, %373
  br i1 %381, label %385, label %382

382:                                              ; preds = %370
  %383 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %363, i64 0, i32 2
  %384 = load i32, i32* %383, align 8
  br label %386

385:                                              ; preds = %410, %357, %370
  call void @_ZN16CFGAS_BreakPieceD1Ev(%class.CFGAS_BreakPiece* nonnull %5) #11
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %85) #11
  ret void

386:                                              ; preds = %382, %415
  %387 = phi %class.CFGAS_BreakLine* [ %416, %415 ], [ %363, %382 ]
  %388 = phi %struct.FX_TPO* [ %413, %415 ], [ %373, %382 ]
  %389 = phi i32 [ %399, %415 ], [ %384, %382 ]
  %390 = phi %struct.FX_TPO** [ %412, %415 ], [ %367, %382 ]
  %391 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %388, i64 0, i32 0
  %392 = load i32, i32* %391, align 4
  %393 = sext i32 %392 to i64
  %394 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %387, i64 0, i32 1, i32 0, i32 0
  %395 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %394, align 8
  %396 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %395, i64 %393, i32 1
  store i32 %389, i32* %396, align 4
  %397 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %395, i64 %393, i32 2
  %398 = load i32, i32* %397, align 8
  %399 = add nsw i32 %398, %389
  %400 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %388, i64 1
  %401 = ptrtoint %struct.FX_TPO* %400 to i64
  %402 = bitcast %struct.FX_TPO** %390 to i64*
  %403 = load i64, i64* %402, align 8
  %404 = sub i64 %401, %403
  %405 = icmp eq i64 %404, 4096
  br i1 %405, label %406, label %410

406:                                              ; preds = %386
  %407 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %390, i64 1
  %408 = bitcast %struct.FX_TPO** %407 to i64*
  %409 = load i64, i64* %408, align 8
  br label %410

410:                                              ; preds = %386, %406
  %411 = phi i64 [ %409, %406 ], [ %401, %386 ]
  %412 = phi %struct.FX_TPO** [ %407, %406 ], [ %390, %386 ]
  %413 = inttoptr i64 %411 to %struct.FX_TPO*
  %414 = icmp eq %struct.FX_TPO* %380, %413
  br i1 %414, label %385, label %415

415:                                              ; preds = %410
  %416 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %6, align 8
  br label %386
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CFGAS_RTFBreak18EndBreak_AlignmentERKNSt3__15dequeI6FX_TPONS0_9allocatorIS2_EEEEbN10CFGAS_Char9BreakTypeE(%class.CFGAS_RTFBreak* nocapture readonly, %"class.std::__1::deque"* dereferenceable(48), i1 zeroext, i8 zeroext) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 16, i32 0
  %6 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %5, align 8
  %7 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %6, i64 0, i32 3
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !noalias !24
  %11 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8, !noalias !24
  %13 = add i64 %12, %10
  %14 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 0, i32 1
  %15 = load %struct.FX_TPO**, %struct.FX_TPO*** %14, align 8, !noalias !24
  %16 = lshr i64 %13, 9
  %17 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %15, i64 %16
  %18 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 0, i32 2
  %19 = load %struct.FX_TPO**, %struct.FX_TPO*** %18, align 8, !noalias !24
  %20 = icmp eq %struct.FX_TPO** %19, %15
  br i1 %20, label %132, label %21

21:                                               ; preds = %4
  %22 = load %struct.FX_TPO*, %struct.FX_TPO** %17, align 8, !noalias !24
  %23 = and i64 %13, 511
  %24 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %22, i64 %23
  %25 = lshr i64 %12, 9
  %26 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %15, i64 %25
  %27 = load %struct.FX_TPO*, %struct.FX_TPO** %26, align 8, !noalias !31
  %28 = and i64 %12, 511
  %29 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %27, i64 %28
  %30 = icmp eq %struct.FX_TPO* %24, %29
  br i1 %30, label %132, label %31

31:                                               ; preds = %21
  %32 = load %struct.FX_TPO*, %struct.FX_TPO** %17, align 8
  br label %33

33:                                               ; preds = %31, %126
  %34 = phi %struct.FX_TPO* [ %127, %126 ], [ %32, %31 ]
  %35 = phi i32 [ %114, %126 ], [ %8, %31 ]
  %36 = phi i32 [ %116, %126 ], [ 0, %31 ]
  %37 = phi i8 [ %115, %126 ], [ 0, %31 ]
  %38 = phi %struct.FX_TPO** [ %128, %126 ], [ %17, %31 ]
  %39 = phi %struct.FX_TPO* [ %130, %126 ], [ %24, %31 ]
  %40 = icmp eq %struct.FX_TPO* %39, %34
  br i1 %40, label %41, label %45

41:                                               ; preds = %33
  %42 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %38, i64 -1
  %43 = load %struct.FX_TPO*, %struct.FX_TPO** %42, align 8
  %44 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %43, i64 512
  br label %45

45:                                               ; preds = %33, %41
  %46 = phi %struct.FX_TPO* [ %44, %41 ], [ %39, %33 ]
  %47 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %5, align 8
  %48 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %46, i64 -1, i32 0
  %49 = load i32, i32* %48, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %47, i64 0, i32 1, i32 0, i32 0
  %52 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %51, align 8
  %53 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %52, i64 %50
  %54 = and i8 %37, 1
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %56, label %58

56:                                               ; preds = %45
  %57 = tail call i32 @_ZNK16CFGAS_BreakPiece9GetEndPosEv(%class.CFGAS_BreakPiece* %53) #11
  br label %58

58:                                               ; preds = %45, %56
  %59 = phi i32 [ %35, %45 ], [ %57, %56 ]
  %60 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %52, i64 %50, i32 5
  %61 = load i32, i32* %60, align 4
  %62 = and i32 %61, 1
  %63 = icmp ne i32 %62, 0
  %64 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %52, i64 %50, i32 4
  %65 = load i32, i32* %64, align 8
  %66 = add nsw i32 %65, -1
  %67 = select i1 %63, i32 0, i32 %66
  %68 = icmp sgt i32 %67, -1
  br i1 %68, label %69, label %112

69:                                               ; preds = %58
  %70 = select i1 %63, i32 1, i32 -1
  %71 = icmp slt i32 %67, %65
  br i1 %71, label %72, label %107

72:                                               ; preds = %69, %104
  %73 = phi i32 [ %102, %104 ], [ %67, %69 ]
  %74 = phi i8 [ %100, %104 ], [ %37, %69 ]
  %75 = phi i32 [ %82, %104 ], [ %36, %69 ]
  %76 = phi i32 [ %101, %104 ], [ %59, %69 ]
  %77 = tail call %class.CFGAS_Char* @_ZNK16CFGAS_BreakPiece7GetCharEi(%class.CFGAS_BreakPiece* %53, i32 %73) #11
  %78 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %77, i64 0, i32 2
  %79 = load i8, i8* %78, align 2
  %80 = icmp eq i8 %79, 26
  %81 = zext i1 %80 to i32
  %82 = add nsw i32 %75, %81
  %83 = and i8 %74, 1
  %84 = icmp ne i8 %83, 0
  %85 = and i1 %84, %2
  br i1 %85, label %99, label %86

86:                                               ; preds = %72
  %87 = tail call zeroext i8 @_ZNK10CFGAS_Char11GetCharTypeEv(%class.CFGAS_Char* %77) #11
  %88 = or i8 %87, 1
  %89 = icmp eq i8 %88, 3
  br i1 %89, label %90, label %98

90:                                               ; preds = %86
  br i1 %84, label %99, label %91

91:                                               ; preds = %90
  %92 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %77, i64 0, i32 5
  %93 = load i32, i32* %92, align 8
  %94 = icmp sgt i32 %93, 0
  %95 = and i1 %94, %2
  %96 = select i1 %95, i32 %93, i32 0
  %97 = sub nsw i32 %76, %96
  br label %99

98:                                               ; preds = %86
  br i1 %2, label %99, label %107

99:                                               ; preds = %72, %98, %90, %91
  %100 = phi i8 [ %74, %72 ], [ %74, %90 ], [ %74, %91 ], [ 1, %98 ]
  %101 = phi i32 [ %76, %72 ], [ %76, %90 ], [ %97, %91 ], [ %76, %98 ]
  %102 = add nsw i32 %73, %70
  %103 = icmp sgt i32 %102, -1
  br i1 %103, label %104, label %107

104:                                              ; preds = %99
  %105 = load i32, i32* %64, align 8
  %106 = icmp slt i32 %102, %105
  br i1 %106, label %72, label %107

107:                                              ; preds = %104, %99, %98, %69
  %108 = phi i32 [ %59, %69 ], [ %101, %104 ], [ %101, %99 ], [ %76, %98 ]
  %109 = phi i8 [ %37, %69 ], [ %100, %104 ], [ %100, %99 ], [ 1, %98 ]
  %110 = phi i32 [ %36, %69 ], [ %82, %98 ], [ %82, %99 ], [ %82, %104 ]
  %111 = and i8 %109, 1
  br label %112

112:                                              ; preds = %107, %58
  %113 = phi i8 [ %111, %107 ], [ %54, %58 ]
  %114 = phi i32 [ %108, %107 ], [ %59, %58 ]
  %115 = phi i8 [ %109, %107 ], [ %37, %58 ]
  %116 = phi i32 [ %110, %107 ], [ %36, %58 ]
  %117 = icmp eq i8 %113, 0
  %118 = or i1 %117, %2
  br i1 %118, label %119, label %136

119:                                              ; preds = %112
  %120 = load %struct.FX_TPO*, %struct.FX_TPO** %38, align 8
  %121 = icmp eq %struct.FX_TPO* %39, %120
  br i1 %121, label %122, label %126

122:                                              ; preds = %119
  %123 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %38, i64 -1
  %124 = load %struct.FX_TPO*, %struct.FX_TPO** %123, align 8
  %125 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %124, i64 512
  br label %126

126:                                              ; preds = %119, %122
  %127 = phi %struct.FX_TPO* [ %124, %122 ], [ %120, %119 ]
  %128 = phi %struct.FX_TPO** [ %123, %122 ], [ %38, %119 ]
  %129 = phi %struct.FX_TPO* [ %125, %122 ], [ %39, %119 ]
  %130 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %129, i64 -1
  %131 = icmp eq %struct.FX_TPO* %130, %29
  br i1 %131, label %136, label %33

132:                                              ; preds = %21, %4
  %133 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 7
  %134 = load i32, i32* %133, align 8
  %135 = sub nsw i32 %134, %8
  br label %141

136:                                              ; preds = %112, %126
  %137 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 7
  %138 = load i32, i32* %137, align 8
  %139 = sub nsw i32 %138, %114
  %140 = icmp sgt i32 %116, 0
  br i1 %140, label %145, label %141

141:                                              ; preds = %132, %136
  %142 = phi i32 [ %135, %132 ], [ %139, %136 ]
  %143 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 2
  %144 = load i8, i8* %143, align 1
  br label %244

145:                                              ; preds = %136
  %146 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 2
  %147 = load i8, i8* %146, align 1
  %148 = icmp eq i8 %147, 4
  br i1 %148, label %153, label %149

149:                                              ; preds = %145
  %150 = icmp eq i8 %147, 3
  %151 = icmp ne i8 %3, 3
  %152 = and i1 %151, %150
  br i1 %152, label %153, label %244

153:                                              ; preds = %149, %145
  %154 = load %struct.FX_TPO**, %struct.FX_TPO*** %14, align 8
  %155 = load i64, i64* %11, align 8
  %156 = lshr i64 %155, 9
  %157 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %154, i64 %156
  %158 = load %struct.FX_TPO**, %struct.FX_TPO*** %18, align 8
  %159 = icmp eq %struct.FX_TPO** %158, %154
  br i1 %159, label %310, label %160

160:                                              ; preds = %153
  %161 = load %struct.FX_TPO*, %struct.FX_TPO** %157, align 8
  %162 = and i64 %155, 511
  %163 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %161, i64 %162
  %164 = load i64, i64* %9, align 8
  %165 = add i64 %164, %155
  %166 = lshr i64 %165, 9
  %167 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %154, i64 %166
  %168 = load %struct.FX_TPO*, %struct.FX_TPO** %167, align 8
  %169 = and i64 %165, 511
  %170 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %168, i64 %169
  %171 = icmp eq %struct.FX_TPO* %170, %163
  br i1 %171, label %310, label %172

172:                                              ; preds = %160, %239
  %173 = phi %struct.FX_TPO* [ %242, %239 ], [ %163, %160 ]
  %174 = phi i32 [ %225, %239 ], [ %116, %160 ]
  %175 = phi i32 [ %228, %239 ], [ -1, %160 ]
  %176 = phi i32 [ %224, %239 ], [ %139, %160 ]
  %177 = phi %struct.FX_TPO** [ %241, %239 ], [ %157, %160 ]
  %178 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %5, align 8
  %179 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %173, i64 0, i32 0
  %180 = load i32, i32* %179, align 4
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %178, i64 0, i32 1, i32 0, i32 0
  %183 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %182, align 8
  %184 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %183, i64 %181
  %185 = icmp slt i32 %175, 0
  %186 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %183, i64 %181, i32 1
  br i1 %185, label %187, label %189

187:                                              ; preds = %172
  %188 = load i32, i32* %186, align 4
  br label %190

189:                                              ; preds = %172
  store i32 %175, i32* %186, align 4
  br label %190

190:                                              ; preds = %189, %187
  %191 = phi i32 [ %188, %187 ], [ %175, %189 ]
  %192 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %183, i64 %181, i32 4
  %193 = load i32, i32* %192, align 8
  %194 = icmp sgt i32 %193, 0
  br i1 %194, label %195, label %223

195:                                              ; preds = %190
  %196 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %183, i64 %181, i32 2
  br label %197

197:                                              ; preds = %195, %217
  %198 = phi i32 [ %174, %195 ], [ %219, %217 ]
  %199 = phi i32 [ 0, %195 ], [ %220, %217 ]
  %200 = phi i32 [ %176, %195 ], [ %218, %217 ]
  %201 = tail call %class.CFGAS_Char* @_ZNK16CFGAS_BreakPiece7GetCharEi(%class.CFGAS_BreakPiece* %184, i32 %199) #11
  %202 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %201, i64 0, i32 2
  %203 = load i8, i8* %202, align 2
  %204 = icmp eq i8 %203, 26
  br i1 %204, label %205, label %217

205:                                              ; preds = %197
  %206 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %201, i64 0, i32 5
  %207 = load i32, i32* %206, align 8
  %208 = icmp slt i32 %207, 0
  br i1 %208, label %217, label %209

209:                                              ; preds = %205
  %210 = sdiv i32 %200, %198
  %211 = add nsw i32 %210, %207
  store i32 %211, i32* %206, align 8
  %212 = load i32, i32* %196, align 8
  %213 = add nsw i32 %212, %210
  store i32 %213, i32* %196, align 8
  %214 = sub nsw i32 %200, %210
  %215 = add nsw i32 %198, -1
  %216 = icmp slt i32 %198, 2
  br i1 %216, label %223, label %217

217:                                              ; preds = %209, %197, %205
  %218 = phi i32 [ %200, %205 ], [ %200, %197 ], [ %214, %209 ]
  %219 = phi i32 [ %198, %205 ], [ %198, %197 ], [ %215, %209 ]
  %220 = add nuw nsw i32 %199, 1
  %221 = load i32, i32* %192, align 8
  %222 = icmp slt i32 %220, %221
  br i1 %222, label %197, label %223

223:                                              ; preds = %217, %209, %190
  %224 = phi i32 [ %176, %190 ], [ %214, %209 ], [ %218, %217 ]
  %225 = phi i32 [ %174, %190 ], [ %215, %209 ], [ %219, %217 ]
  %226 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %183, i64 %181, i32 2
  %227 = load i32, i32* %226, align 8
  %228 = add nsw i32 %227, %191
  %229 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %173, i64 1
  %230 = ptrtoint %struct.FX_TPO* %229 to i64
  %231 = bitcast %struct.FX_TPO** %177 to i64*
  %232 = load i64, i64* %231, align 8
  %233 = sub i64 %230, %232
  %234 = icmp eq i64 %233, 4096
  br i1 %234, label %235, label %239

235:                                              ; preds = %223
  %236 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %177, i64 1
  %237 = bitcast %struct.FX_TPO** %236 to i64*
  %238 = load i64, i64* %237, align 8
  br label %239

239:                                              ; preds = %223, %235
  %240 = phi i64 [ %238, %235 ], [ %230, %223 ]
  %241 = phi %struct.FX_TPO** [ %236, %235 ], [ %177, %223 ]
  %242 = inttoptr i64 %240 to %struct.FX_TPO*
  %243 = icmp eq %struct.FX_TPO* %170, %242
  br i1 %243, label %310, label %172

244:                                              ; preds = %141, %149
  %245 = phi i32 [ %142, %141 ], [ %139, %149 ]
  %246 = phi i8 [ %144, %141 ], [ %147, %149 ]
  %247 = add i8 %246, -1
  %248 = icmp ult i8 %247, 2
  br i1 %248, label %249, label %310

249:                                              ; preds = %244
  %250 = icmp eq i8 %246, 1
  %251 = sdiv i32 %245, 2
  %252 = select i1 %250, i32 %251, i32 %245
  %253 = icmp sgt i32 %252, 0
  br i1 %253, label %254, label %310

254:                                              ; preds = %249
  %255 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %5, align 8
  %256 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %255, i64 0, i32 1, i32 0, i32 0
  %257 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %256, align 8
  %258 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %255, i64 0, i32 1, i32 0, i32 1
  %259 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %258, align 8
  %260 = icmp eq %class.CFGAS_BreakPiece* %257, %259
  br i1 %260, label %310, label %261

261:                                              ; preds = %254
  %262 = ptrtoint %class.CFGAS_BreakPiece* %257 to i64
  %263 = getelementptr %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %259, i64 -1, i32 0
  %264 = ptrtoint i8* %263 to i64
  %265 = sub i64 %264, %262
  %266 = lshr i64 %265, 6
  %267 = add nuw nsw i64 %266, 1
  %268 = and i64 %267, 7
  %269 = icmp eq i64 %268, 0
  br i1 %269, label %279, label %270

270:                                              ; preds = %261, %270
  %271 = phi %class.CFGAS_BreakPiece* [ %276, %270 ], [ %257, %261 ]
  %272 = phi i64 [ %277, %270 ], [ %268, %261 ]
  %273 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %271, i64 0, i32 1
  %274 = load i32, i32* %273, align 4
  %275 = add nsw i32 %274, %252
  store i32 %275, i32* %273, align 4
  %276 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %271, i64 1
  %277 = add i64 %272, -1
  %278 = icmp eq i64 %277, 0
  br i1 %278, label %279, label %270, !llvm.loop !38

279:                                              ; preds = %270, %261
  %280 = phi %class.CFGAS_BreakPiece* [ %257, %261 ], [ %276, %270 ]
  %281 = icmp ult i64 %265, 448
  br i1 %281, label %310, label %282

282:                                              ; preds = %279, %282
  %283 = phi %class.CFGAS_BreakPiece* [ %308, %282 ], [ %280, %279 ]
  %284 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %283, i64 0, i32 1
  %285 = load i32, i32* %284, align 4
  %286 = add nsw i32 %285, %252
  store i32 %286, i32* %284, align 4
  %287 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %283, i64 1, i32 1
  %288 = load i32, i32* %287, align 4
  %289 = add nsw i32 %288, %252
  store i32 %289, i32* %287, align 4
  %290 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %283, i64 2, i32 1
  %291 = load i32, i32* %290, align 4
  %292 = add nsw i32 %291, %252
  store i32 %292, i32* %290, align 4
  %293 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %283, i64 3, i32 1
  %294 = load i32, i32* %293, align 4
  %295 = add nsw i32 %294, %252
  store i32 %295, i32* %293, align 4
  %296 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %283, i64 4, i32 1
  %297 = load i32, i32* %296, align 4
  %298 = add nsw i32 %297, %252
  store i32 %298, i32* %296, align 4
  %299 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %283, i64 5, i32 1
  %300 = load i32, i32* %299, align 4
  %301 = add nsw i32 %300, %252
  store i32 %301, i32* %299, align 4
  %302 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %283, i64 6, i32 1
  %303 = load i32, i32* %302, align 4
  %304 = add nsw i32 %303, %252
  store i32 %304, i32* %302, align 4
  %305 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %283, i64 7, i32 1
  %306 = load i32, i32* %305, align 4
  %307 = add nsw i32 %306, %252
  store i32 %307, i32* %305, align 4
  %308 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %283, i64 8
  %309 = icmp eq %class.CFGAS_BreakPiece* %308, %259
  br i1 %309, label %310, label %282

310:                                              ; preds = %239, %279, %282, %153, %254, %160, %244, %249
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CFGAS_RTFBreak13SplitTextLineEP15CFGAS_BreakLineS1_b(%class.CFGAS_RTFBreak* nocapture readonly, %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %5 = alloca i32, align 4
  %6 = alloca %"class.std::__1::vector.47", align 8
  %7 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %1, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast %class.CFGAS_Char** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %class.CFGAS_BreakLine* %1 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = sdiv exact i64 %12, 56
  %14 = icmp ult i64 %13, 2
  br i1 %14, label %143, label %15

15:                                               ; preds = %4
  %16 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %1, i64 0, i32 0
  %17 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #11
  %18 = tail call i32 @_ZNK15CFGAS_BreakLine10GetLineEndEv(%class.CFGAS_BreakLine* %1) #11
  store i32 %18, i32* %5, align 4
  %19 = call i32 @_ZN14CFGAS_RTFBreak11GetBreakPosERNSt3__16vectorI10CFGAS_CharNS0_9allocatorIS2_EEEEbbPi(%class.CFGAS_RTFBreak* %0, %"class.std::__1::vector.47"* dereferenceable(24) %16, i1 zeroext %3, i1 zeroext false, i32* nonnull %5)
  %20 = icmp sgt i32 %19, 0
  %21 = select i1 %20, i32 %19, i32 0
  %22 = add nuw nsw i32 %21, 1
  %23 = load i64, i64* %8, align 8
  %24 = load i64, i64* %10, align 8
  %25 = sub i64 %23, %24
  %26 = sdiv exact i64 %25, 56
  %27 = icmp ult i64 %26, 2147483648
  %28 = inttoptr i64 %24 to %class.CFGAS_Char*
  %29 = inttoptr i64 %23 to %class.CFGAS_Char*
  br i1 %27, label %31, label %30, !prof !23

30:                                               ; preds = %15
  tail call void @llvm.trap() #11
  unreachable

31:                                               ; preds = %15
  %32 = trunc i64 %26 to i32
  %33 = icmp slt i32 %22, %32
  br i1 %33, label %39, label %34

34:                                               ; preds = %31
  tail call void @_ZN15CFGAS_BreakLine5ClearEv(%class.CFGAS_BreakLine* %2) #11
  %35 = zext i32 %21 to i64
  %36 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %1, i64 0, i32 0, i32 0, i32 0
  %37 = load %class.CFGAS_Char*, %class.CFGAS_Char** %36, align 8
  %38 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %37, i64 %35, i32 2
  store i8 0, i8* %38, align 2
  br label %142

39:                                               ; preds = %31
  %40 = bitcast %"class.std::__1::vector.47"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %40) #11
  %41 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %1, i64 0, i32 0, i32 0, i32 0
  %42 = zext i32 %22 to i64
  %43 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %28, i64 %42
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 0, i64 24, i1 false) #11
  %44 = ptrtoint %class.CFGAS_Char* %43 to i64
  %45 = sub i64 %23, %44
  %46 = sdiv exact i64 %45, 56
  %47 = icmp eq i64 %45, 0
  br i1 %47, label %74, label %48

48:                                               ; preds = %39
  %49 = icmp ugt i64 %46, 329406144173384850
  br i1 %49, label %50, label %52

50:                                               ; preds = %48
  %51 = bitcast %"class.std::__1::vector.47"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %51) #13
  unreachable

52:                                               ; preds = %48
  %53 = tail call i8* @_Znwm(i64 %45) #12
  %54 = bitcast i8* %53 to %class.CFGAS_Char*
  %55 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %6, i64 0, i32 0, i32 1
  %56 = bitcast %class.CFGAS_Char** %55 to i8**
  store i8* %53, i8** %56, align 8
  %57 = bitcast %"class.std::__1::vector.47"* %6 to i8**
  store i8* %53, i8** %57, align 8
  %58 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %54, i64 %46
  %59 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  store %class.CFGAS_Char* %58, %class.CFGAS_Char** %59, align 8
  %60 = bitcast %class.CFGAS_Char** %55 to i64*
  %61 = ptrtoint i8* %53 to i64
  %62 = icmp eq %class.CFGAS_Char* %43, %29
  %63 = ptrtoint %class.CFGAS_Char* %58 to i64
  br i1 %62, label %72, label %64

64:                                               ; preds = %52, %64
  %65 = phi %class.CFGAS_Char* [ %68, %64 ], [ %54, %52 ]
  %66 = phi %class.CFGAS_Char* [ %67, %64 ], [ %43, %52 ]
  tail call void @_ZN10CFGAS_CharC1ERKS_(%class.CFGAS_Char* %65, %class.CFGAS_Char* dereferenceable(56) %66) #11
  %67 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %66, i64 1
  %68 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %65, i64 1
  %69 = icmp eq %class.CFGAS_Char* %67, %29
  br i1 %69, label %70, label %64

70:                                               ; preds = %64
  %71 = ptrtoint %class.CFGAS_Char* %68 to i64
  br label %72

72:                                               ; preds = %70, %52
  %73 = phi i64 [ %61, %52 ], [ %71, %70 ]
  store i64 %73, i64* %60, align 8
  br label %74

74:                                               ; preds = %39, %72
  %75 = phi i64 [ 0, %39 ], [ %63, %72 ]
  %76 = phi i64 [ 0, %39 ], [ %73, %72 ]
  %77 = phi i64 [ 0, %39 ], [ %61, %72 ]
  %78 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %2, i64 0, i32 0, i32 0, i32 0
  %79 = load %class.CFGAS_Char*, %class.CFGAS_Char** %78, align 8
  %80 = icmp eq %class.CFGAS_Char* %79, null
  br i1 %80, label %95, label %81

81:                                               ; preds = %74
  %82 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %2, i64 0, i32 0, i32 0, i32 1
  %83 = load %class.CFGAS_Char*, %class.CFGAS_Char** %82, align 8
  %84 = icmp eq %class.CFGAS_Char* %83, %79
  br i1 %84, label %91, label %85

85:                                               ; preds = %81, %85
  %86 = phi %class.CFGAS_Char* [ %87, %85 ], [ %83, %81 ]
  %87 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %86, i64 -1
  tail call void @_ZN10CFGAS_CharD1Ev(%class.CFGAS_Char* %87) #11
  %88 = icmp eq %class.CFGAS_Char* %87, %79
  br i1 %88, label %89, label %85

89:                                               ; preds = %85
  %90 = load %class.CFGAS_Char*, %class.CFGAS_Char** %78, align 8
  br label %91

91:                                               ; preds = %89, %81
  %92 = phi %class.CFGAS_Char* [ %90, %89 ], [ %79, %81 ]
  store %class.CFGAS_Char* %79, %class.CFGAS_Char** %82, align 8
  %93 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %92, i64 0, i32 0
  tail call void @_ZdlPv(i8* %93) #12
  %94 = bitcast %class.CFGAS_BreakLine* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %94, i8 0, i64 24, i1 false) #11
  br label %95

95:                                               ; preds = %74, %91
  %96 = bitcast %class.CFGAS_BreakLine* %2 to i64*
  store i64 %77, i64* %96, align 8
  %97 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %2, i64 0, i32 0, i32 0, i32 1
  %98 = bitcast %class.CFGAS_Char** %97 to i64*
  store i64 %76, i64* %98, align 8
  %99 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %2, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %100 = bitcast %class.CFGAS_Char** %99 to i64*
  store i64 %75, i64* %100, align 8
  %101 = load %class.CFGAS_Char*, %class.CFGAS_Char** %41, align 8
  %102 = load %class.CFGAS_Char*, %class.CFGAS_Char** %7, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %40) #11
  %103 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %101, i64 %42
  %104 = icmp eq %class.CFGAS_Char* %103, %102
  br i1 %104, label %110, label %105

105:                                              ; preds = %95, %105
  %106 = phi %class.CFGAS_Char* [ %107, %105 ], [ %102, %95 ]
  %107 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %106, i64 -1
  tail call void @_ZN10CFGAS_CharD1Ev(%class.CFGAS_Char* %107) #11
  %108 = icmp eq %class.CFGAS_Char* %107, %103
  br i1 %108, label %109, label %105

109:                                              ; preds = %105
  store %class.CFGAS_Char* %103, %class.CFGAS_Char** %7, align 8
  br label %110

110:                                              ; preds = %95, %109
  %111 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %1, i64 0, i32 2
  %112 = load i32, i32* %111, align 8
  %113 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %2, i64 0, i32 2
  store i32 %112, i32* %113, align 8
  %114 = tail call i32 @_ZNK15CFGAS_BreakLine10GetLineEndEv(%class.CFGAS_BreakLine* %1) #11
  %115 = load i32, i32* %5, align 4
  %116 = sub nsw i32 %114, %115
  %117 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %2, i64 0, i32 3
  store i32 %116, i32* %117, align 4
  %118 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %1, i64 0, i32 3
  store i32 %115, i32* %118, align 4
  %119 = zext i32 %21 to i64
  %120 = load %class.CFGAS_Char*, %class.CFGAS_Char** %41, align 8
  %121 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %120, i64 %119, i32 2
  store i8 0, i8* %121, align 2
  %122 = load i64, i64* %98, align 8
  %123 = load i64, i64* %96, align 8
  %124 = icmp eq i64 %122, %123
  br i1 %124, label %142, label %125

125:                                              ; preds = %110, %133
  %126 = phi i64 [ %138, %133 ], [ %123, %110 ]
  %127 = phi i64 [ %136, %133 ], [ 0, %110 ]
  %128 = inttoptr i64 %126 to %class.CFGAS_Char*
  %129 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %128, i64 %127
  %130 = tail call zeroext i8 @_ZNK10CFGAS_Char11GetCharTypeEv(%class.CFGAS_Char* %129) #11
  %131 = icmp ugt i8 %130, 6
  br i1 %131, label %132, label %133

132:                                              ; preds = %125
  tail call void @_ZN15CFGAS_BreakLine24DecrementArabicCharCountEv(%class.CFGAS_BreakLine* %1) #11
  tail call void @_ZN15CFGAS_BreakLine24IncrementArabicCharCountEv(%class.CFGAS_BreakLine* %2) #11
  br label %133

133:                                              ; preds = %132, %125
  %134 = load %class.CFGAS_Char*, %class.CFGAS_Char** %78, align 8
  %135 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %134, i64 %127, i32 0
  store i8 0, i8* %135, align 8
  %136 = add nuw i64 %127, 1
  %137 = load i64, i64* %98, align 8
  %138 = load i64, i64* %96, align 8
  %139 = sub i64 %137, %138
  %140 = sdiv exact i64 %139, 56
  %141 = icmp ult i64 %136, %140
  br i1 %141, label %125, label %142

142:                                              ; preds = %133, %110, %34
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #11
  br label %143

143:                                              ; preds = %4, %142
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14CFGAS_RTFBreak11GetBreakPosERNSt3__16vectorI10CFGAS_CharNS0_9allocatorIS2_EEEEbbPi(%class.CFGAS_RTFBreak* nocapture readonly, %"class.std::__1::vector.47"* nocapture readonly dereferenceable(24), i1 zeroext, i1 zeroext, i32* nocapture) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %1, i64 0, i32 0, i32 1
  %7 = bitcast %class.CFGAS_Char** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.std::__1::vector.47"* %1 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = sdiv exact i64 %11, 56
  %13 = icmp ult i64 %12, 2147483648
  %14 = inttoptr i64 %10 to %class.CFGAS_Char*
  br i1 %13, label %16, label %15, !prof !23

15:                                               ; preds = %5
  tail call void @llvm.trap() #11
  unreachable

16:                                               ; preds = %5
  %17 = trunc i64 %12 to i32
  %18 = add nsw i32 %17, -1
  %19 = icmp slt i32 %17, 2
  br i1 %19, label %136, label %20

20:                                               ; preds = %16
  %21 = load i32, i32* %4, align 4
  %22 = getelementptr inbounds %class.CFGAS_RTFBreak, %class.CFGAS_RTFBreak* %0, i64 0, i32 0, i32 7
  %23 = load i32, i32* %22, align 8
  %24 = icmp sgt i32 %21, %23
  %25 = or i1 %24, %2
  %26 = select i1 %24, i32 -1, i32 %18
  %27 = select i1 %24, i32 -1, i32 %21
  br i1 %25, label %28, label %136

28:                                               ; preds = %20
  %29 = sext i32 %18 to i64
  br i1 %2, label %30, label %32

30:                                               ; preds = %28
  %31 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %14, i64 %29, i32 2
  store i8 0, i8* %31, align 2
  br label %32

32:                                               ; preds = %30, %28
  %33 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %14, i64 %29, i32 14
  %34 = load i16, i16* %33, align 8
  %35 = zext i16 %34 to i32
  %36 = tail call zeroext i8 @_Z19FX_GetBreakPropertyw(i32 signext %35) #11
  %37 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %14, i64 %29, i32 5
  %38 = load i32, i32* %37, align 8
  %39 = icmp sgt i32 %38, 0
  br i1 %39, label %40, label %43

40:                                               ; preds = %32
  %41 = load i32, i32* %4, align 4
  %42 = sub nsw i32 %41, %38
  store i32 %42, i32* %4, align 4
  br label %43

43:                                               ; preds = %32, %40
  %44 = shl i64 %12, 32
  %45 = add i64 %44, -8589934592
  %46 = ashr exact i64 %45, 32
  br label %47

47:                                               ; preds = %43, %115
  %48 = phi i64 [ %46, %43 ], [ %122, %115 ]
  %49 = phi i8 [ %36, %43 ], [ %59, %115 ]
  %50 = phi i32 [ -1, %43 ], [ %121, %115 ]
  %51 = phi i32 [ -1, %43 ], [ %120, %115 ]
  %52 = phi i32 [ -1, %43 ], [ %119, %115 ]
  %53 = phi i32 [ -1, %43 ], [ %118, %115 ]
  %54 = phi i32 [ %27, %43 ], [ %117, %115 ]
  %55 = phi i32 [ %26, %43 ], [ %116, %115 ]
  %56 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %14, i64 %48, i32 14
  %57 = load i16, i16* %56, align 8
  %58 = zext i16 %57 to i32
  %59 = tail call zeroext i8 @_Z19FX_GetBreakPropertyw(i32 signext %58) #11
  switch i8 %59, label %65 [
    i8 37, label %60
    i8 35, label %64
  ]

60:                                               ; preds = %47
  %61 = icmp eq i8 %49, 37
  br i1 %61, label %70, label %62

62:                                               ; preds = %60
  %63 = tail call zeroext i8 @_Z24GetLineBreakTypeFromPair16FX_BREAKPROPERTYS_(i8 zeroext 37, i8 zeroext %49) #11
  br label %70

64:                                               ; preds = %47
  br label %65

65:                                               ; preds = %47, %64
  %66 = phi i1 [ true, %64 ], [ false, %47 ]
  %67 = icmp eq i8 %49, 35
  br i1 %67, label %70, label %68

68:                                               ; preds = %65
  %69 = tail call zeroext i8 @_Z24GetLineBreakTypeFromPair16FX_BREAKPROPERTYS_(i8 zeroext %59, i8 zeroext %49) #11
  br label %70

70:                                               ; preds = %68, %65, %62, %60
  %71 = phi i1 [ true, %60 ], [ true, %62 ], [ %66, %65 ], [ %66, %68 ]
  %72 = phi i8 [ 94, %60 ], [ %63, %62 ], [ 94, %65 ], [ %69, %68 ]
  br i1 %2, label %73, label %75

73:                                               ; preds = %70
  %74 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %14, i64 %48, i32 2
  store i8 %72, i8* %74, align 2
  br label %75

75:                                               ; preds = %73, %70
  br i1 %3, label %115, label %76

76:                                               ; preds = %75
  %77 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %14, i64 %48, i32 5
  %78 = load i32, i32* %77, align 8
  %79 = load i32, i32* %4, align 4
  %80 = load i32, i32* %22, align 8
  %81 = icmp sle i32 %79, %80
  %82 = or i1 %71, %81
  br i1 %82, label %83, label %105

83:                                               ; preds = %76
  %84 = icmp eq i8 %72, 26
  %85 = icmp slt i32 %55, 0
  %86 = and i1 %85, %84
  br i1 %86, label %87, label %89

87:                                               ; preds = %83
  %88 = trunc i64 %48 to i32
  br i1 %2, label %96, label %134

89:                                               ; preds = %83
  %90 = icmp eq i8 %72, 43
  %91 = icmp slt i32 %53, 0
  %92 = and i1 %91, %90
  %93 = trunc i64 %48 to i32
  %94 = select i1 %92, i32 %93, i32 %53
  %95 = select i1 %92, i32 %79, i32 %52
  br label %96

96:                                               ; preds = %89, %87
  %97 = phi i32 [ %93, %89 ], [ %88, %87 ]
  %98 = phi i32 [ %55, %89 ], [ %88, %87 ]
  %99 = phi i32 [ %54, %89 ], [ %79, %87 ]
  %100 = phi i32 [ %94, %89 ], [ %53, %87 ]
  %101 = phi i32 [ %95, %89 ], [ %52, %87 ]
  %102 = icmp slt i32 %51, 0
  %103 = select i1 %102, i32 %97, i32 %51
  %104 = select i1 %102, i32 %79, i32 %50
  br label %105

105:                                              ; preds = %96, %76
  %106 = phi i32 [ %55, %76 ], [ %98, %96 ]
  %107 = phi i32 [ %54, %76 ], [ %99, %96 ]
  %108 = phi i32 [ %53, %76 ], [ %100, %96 ]
  %109 = phi i32 [ %52, %76 ], [ %101, %96 ]
  %110 = phi i32 [ %51, %76 ], [ %103, %96 ]
  %111 = phi i32 [ %50, %76 ], [ %104, %96 ]
  %112 = icmp sgt i32 %78, 0
  br i1 %112, label %113, label %115

113:                                              ; preds = %105
  %114 = sub nsw i32 %79, %78
  store i32 %114, i32* %4, align 4
  br label %115

115:                                              ; preds = %75, %113, %105
  %116 = phi i32 [ %55, %75 ], [ %106, %113 ], [ %106, %105 ]
  %117 = phi i32 [ %54, %75 ], [ %107, %113 ], [ %107, %105 ]
  %118 = phi i32 [ %53, %75 ], [ %108, %113 ], [ %108, %105 ]
  %119 = phi i32 [ %52, %75 ], [ %109, %113 ], [ %109, %105 ]
  %120 = phi i32 [ %51, %75 ], [ %110, %113 ], [ %110, %105 ]
  %121 = phi i32 [ %50, %75 ], [ %111, %113 ], [ %111, %105 ]
  %122 = add nsw i64 %48, -1
  %123 = icmp sgt i64 %48, 0
  br i1 %123, label %47, label %124

124:                                              ; preds = %115
  br i1 %3, label %136, label %125

125:                                              ; preds = %124
  %126 = icmp sgt i32 %116, -1
  br i1 %126, label %127, label %128

127:                                              ; preds = %125
  store i32 %117, i32* %4, align 4
  br label %136

128:                                              ; preds = %125
  %129 = icmp sgt i32 %118, -1
  br i1 %129, label %130, label %131

130:                                              ; preds = %128
  store i32 %119, i32* %4, align 4
  br label %136

131:                                              ; preds = %128
  %132 = icmp sgt i32 %120, -1
  br i1 %132, label %133, label %136

133:                                              ; preds = %131
  store i32 %121, i32* %4, align 4
  br label %136

134:                                              ; preds = %87
  %135 = trunc i64 %48 to i32
  br label %136

136:                                              ; preds = %134, %20, %131, %124, %133, %130, %127, %16
  %137 = phi i32 [ %18, %16 ], [ %116, %127 ], [ %118, %130 ], [ %120, %133 ], [ 0, %124 ], [ 0, %131 ], [ %18, %20 ], [ %135, %134 ]
  ret i32 %137
}

declare void @_ZN16CFGAS_BreakPieceC1Ev(%class.CFGAS_BreakPiece*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN16CFGAS_BreakPieceD1Ev(%class.CFGAS_BreakPiece*) unnamed_addr #2

declare void @_ZN10CFGAS_Char8BidiLineEPNSt3__16vectorIS_NS0_9allocatorIS_EEEEm(%"class.std::__1::vector.47"*, i64) local_unnamed_addr #1

declare i32 @_ZNK16CFGAS_BreakPiece9GetEndPosEv(%class.CFGAS_BreakPiece*) local_unnamed_addr #1

declare %class.CFGAS_Char* @_ZNK16CFGAS_BreakPiece7GetCharEi(%class.CFGAS_BreakPiece*, i32) local_unnamed_addr #1

declare zeroext i8 @_Z19FX_GetBreakPropertyw(i32 signext) local_unnamed_addr #1

declare zeroext i8 @_Z24GetLineBreakTypeFromPair16FX_BREAKPROPERTYS_(i8 zeroext, i8 zeroext) local_unnamed_addr #1

declare void @_ZN15CFGAS_BreakLine5ClearEv(%class.CFGAS_BreakLine*) local_unnamed_addr #1

declare void @_ZN15CFGAS_BreakLine24DecrementArabicCharCountEv(%class.CFGAS_BreakLine*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK14CFGAS_RTFBreak13GetDisplayPosEPK15CFGAS_TextPiecePNSt3__16vectorI11TextCharPosNS3_9allocatorIS5_EEEE(%class.CFGAS_RTFBreak* nocapture readnone, %class.CFGAS_TextPiece* nocapture readonly, %"class.std::__1::vector.107"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.CFGAS_TextPiece, %class.CFGAS_TextPiece* %1, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %195, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.CFGAS_TextPiece, %class.CFGAS_TextPiece* %1, i64 0, i32 8, i32 0, i32 0, i32 0, i32 0
  %9 = load %class.CFGAS_GEFont*, %class.CFGAS_GEFont** %8, align 8
  %10 = icmp eq %class.CFGAS_GEFont* %9, null
  br i1 %10, label %195, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %class.CFGAS_GEFont, %class.CFGAS_GEFont* %9, i64 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add nsw i64 %13, 1
  store i64 %14, i64* %12, align 8
  %15 = getelementptr inbounds %class.CFGAS_TextPiece, %class.CFGAS_TextPiece* %1, i64 0, i32 7, i32 0
  %16 = load float, float* %15, align 4
  %17 = getelementptr inbounds %class.CFGAS_TextPiece, %class.CFGAS_TextPiece* %1, i64 0, i32 7, i32 1
  %18 = load float, float* %17, align 4
  %19 = getelementptr inbounds %class.CFGAS_TextPiece, %class.CFGAS_TextPiece* %1, i64 0, i32 7, i32 2
  %20 = load float, float* %19, align 4
  %21 = getelementptr inbounds %class.CFGAS_TextPiece, %class.CFGAS_TextPiece* %1, i64 0, i32 5
  %22 = load i32, i32* %21, align 4
  %23 = and i32 %22, 1
  %24 = icmp ne i32 %23, 0
  %25 = getelementptr inbounds %class.CFGAS_TextPiece, %class.CFGAS_TextPiece* %1, i64 0, i32 6
  %26 = load float, float* %25, align 8
  %27 = fmul float %26, 2.000000e+01
  %28 = tail call i32 @FXSYS_roundf(float %27) #11
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %184, label %30

30:                                               ; preds = %11
  %31 = tail call i32 @_ZNK12CFGAS_GEFont9GetAscentEv(%class.CFGAS_GEFont* nonnull %9) #11
  %32 = tail call i32 @_ZNK12CFGAS_GEFont10GetDescentEv(%class.CFGAS_GEFont* nonnull %9) #11
  %33 = sub nsw i32 %31, %32
  %34 = sitofp i32 %31 to float
  %35 = fmul float %26, %34
  %36 = sitofp i32 %33 to float
  %37 = fdiv float %35, %36
  %38 = getelementptr inbounds %class.CFGAS_TextPiece, %class.CFGAS_TextPiece* %1, i64 0, i32 3
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %class.CFGAS_TextPiece, %class.CFGAS_TextPiece* %1, i64 0, i32 4
  %41 = load i32, i32* %40, align 8
  %42 = load i32, i32* %4, align 8
  %43 = icmp sgt i32 %42, 0
  br i1 %43, label %44, label %184

44:                                               ; preds = %30
  %45 = fadd float %18, %37
  %46 = fadd float %16, %20
  %47 = select i1 %24, float %46, float %16
  %48 = getelementptr inbounds %"class.std::__1::vector.107", %"class.std::__1::vector.107"* %2, i64 0, i32 0, i32 0
  %49 = getelementptr inbounds %class.CFGAS_TextPiece, %class.CFGAS_TextPiece* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = getelementptr inbounds %class.CFGAS_TextPiece, %class.CFGAS_TextPiece* %1, i64 0, i32 1, i32 0, i32 0
  %51 = xor i1 %24, true
  %52 = sitofp i32 %41 to float
  %53 = fmul float %37, %52
  %54 = fdiv float %53, 1.000000e+02
  %55 = icmp ne i32 %39, 100
  %56 = icmp ne i32 %41, 100
  %57 = or i1 %55, %56
  %58 = sitofp i32 %39 to float
  %59 = fmul float %58, 0.000000e+00
  %60 = fmul float %52, 0.000000e+00
  %61 = insertelement <4 x float> undef, float %58, i32 0
  %62 = insertelement <4 x float> %61, float %59, i32 1
  %63 = insertelement <4 x float> %62, float %60, i32 2
  %64 = insertelement <4 x float> %63, float %52, i32 3
  %65 = fdiv <4 x float> %64, <float -1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>
  %66 = fadd float %54, %45
  %67 = fsub float %66, %37
  br label %68

68:                                               ; preds = %44, %176
  %69 = phi i64 [ 0, %44 ], [ %180, %176 ]
  %70 = phi i64 [ 0, %44 ], [ %179, %176 ]
  %71 = phi float [ %47, %44 ], [ %178, %176 ]
  %72 = phi i32 [ 65279, %44 ], [ %177, %176 ]
  %73 = load %class.TextCharPos*, %class.TextCharPos** %48, align 8
  %74 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %49, align 8
  %75 = icmp eq %"class.fxcrt::StringDataTemplate"* %74, null
  br i1 %75, label %80, label %76

76:                                               ; preds = %68
  %77 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %74, i64 0, i32 1
  %78 = load i64, i64* %77, align 8
  %79 = icmp ugt i64 %78, %69
  br i1 %79, label %81, label %80, !prof !23

80:                                               ; preds = %76, %68
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !39
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !40
  unreachable

81:                                               ; preds = %76
  %82 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %74, i64 0, i32 3, i64 %69
  %83 = load i32, i32* %82, align 4
  %84 = load i32*, i32** %50, align 8
  %85 = getelementptr inbounds i32, i32* %84, i64 %69
  %86 = load i32, i32* %85, align 4
  %87 = tail call zeroext i8 @_Z14FX_GetCharTypew(i32 signext %83) #11
  %88 = icmp eq i32 %86, 0
  br i1 %88, label %89, label %92

89:                                               ; preds = %81
  %90 = icmp eq i8 %87, 7
  %91 = select i1 %90, i32 65279, i32 %72
  br label %176

92:                                               ; preds = %81
  %93 = icmp slt i32 %86, 0
  %94 = sub nsw i32 0, %86
  %95 = select i1 %93, i32 %94, i32 %86
  %96 = add i8 %87, -1
  %97 = icmp ult i8 %96, 3
  %98 = xor i1 %97, true
  %99 = zext i1 %98 to i64
  %100 = add i64 %70, %99
  %101 = sdiv i32 %95, %28
  %102 = icmp ugt i8 %87, 6
  br i1 %102, label %103, label %136

103:                                              ; preds = %92
  %104 = add nuw nsw i64 %69, 1
  %105 = load i32, i32* %4, align 8
  %106 = sext i32 %105 to i64
  %107 = icmp slt i64 %104, %106
  br i1 %107, label %108, label %133

108:                                              ; preds = %103
  %109 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %49, align 8
  %110 = icmp eq %"class.fxcrt::StringDataTemplate"* %109, null
  br i1 %110, label %115, label %111

111:                                              ; preds = %108
  %112 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %109, i64 0, i32 1
  %113 = load i64, i64* %112, align 8
  %114 = icmp ugt i64 %113, %104
  br i1 %114, label %116, label %115, !prof !23

115:                                              ; preds = %111, %108
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !39
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !40
  unreachable

116:                                              ; preds = %111
  %117 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %109, i64 0, i32 3, i64 %104
  %118 = load i32, i32* %117, align 4
  %119 = load i32*, i32** %50, align 8
  %120 = getelementptr inbounds i32, i32* %119, i64 %104
  %121 = load i32, i32* %120, align 4
  %122 = icmp slt i32 %121, 0
  br i1 %122, label %123, label %133

123:                                              ; preds = %116
  %124 = add nuw nsw i64 %69, 2
  %125 = trunc i64 %124 to i32
  %126 = icmp sgt i32 %105, %125
  br i1 %126, label %127, label %133

127:                                              ; preds = %123
  %128 = icmp ugt i64 %113, %124
  br i1 %128, label %130, label %129, !prof !23

129:                                              ; preds = %127
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !39
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !40
  unreachable

130:                                              ; preds = %127
  %131 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %109, i64 0, i32 3, i64 %124
  %132 = load i32, i32* %131, align 4
  br label %133

133:                                              ; preds = %103, %116, %123, %130
  %134 = phi i32 [ %132, %130 ], [ %118, %123 ], [ %118, %116 ], [ 65279, %103 ]
  %135 = tail call signext i32 @_ZN6pdfium6arabic11GetFormCharEwww(i32 signext %83, i32 signext %72, i32 signext %134) #11
  br label %139

136:                                              ; preds = %92
  br i1 %24, label %137, label %139

137:                                              ; preds = %136
  %138 = tail call signext i32 @_Z16FX_GetMirrorCharw(i32 signext %83) #11
  br label %139

139:                                              ; preds = %136, %137, %133
  %140 = phi i32 [ %135, %133 ], [ %138, %137 ], [ %83, %136 ]
  br i1 %97, label %149, label %141

141:                                              ; preds = %139
  %142 = tail call i32 @_ZN12CFGAS_GEFont13GetGlyphIndexEw(%class.CFGAS_GEFont* nonnull %9, i32 signext %140) #11
  %143 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %73, i64 %70, i32 2
  store i32 %142, i32* %143, align 4
  %144 = icmp eq i32 %142, 65535
  br i1 %144, label %145, label %147

145:                                              ; preds = %141
  %146 = tail call i32 @_ZN12CFGAS_GEFont13GetGlyphIndexEw(%class.CFGAS_GEFont* nonnull %9, i32 signext %83) #11
  store i32 %146, i32* %143, align 4
  br label %147

147:                                              ; preds = %145, %141
  %148 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %73, i64 %70, i32 3
  store i32 %101, i32* %148, align 4
  br label %149

149:                                              ; preds = %147, %139
  %150 = sitofp i32 %101 to float
  %151 = fmul float %26, %150
  %152 = fdiv float %151, 1.000000e+03
  %153 = icmp ne i8 %87, 4
  %154 = and i1 %24, %153
  %155 = fsub float %71, %152
  %156 = select i1 %154, float %155, float %71
  br i1 %97, label %157, label %161

157:                                              ; preds = %149
  %158 = and i1 %153, %51
  %159 = fadd float %152, %156
  %160 = select i1 %158, float %159, float %156
  br label %172

161:                                              ; preds = %149
  %162 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %73, i64 %70, i32 0, i32 0
  store float %156, float* %162, align 4
  %163 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %73, i64 %70, i32 0, i32 1
  %164 = and i1 %153, %51
  %165 = fadd float %152, %156
  %166 = select i1 %164, float %165, float %156
  %167 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %73, i64 %70, i32 5
  store i8 1, i8* %167, align 4
  %168 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %73, i64 %70, i32 7, i64 0
  %169 = bitcast float* %168 to <4 x float>*
  store <4 x float> <float -1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %169, align 4
  store float %67, float* %163, align 4
  br i1 %57, label %170, label %172

170:                                              ; preds = %161
  %171 = bitcast float* %168 to <4 x float>*
  store <4 x float> %65, <4 x float>* %171, align 4
  br label %172

172:                                              ; preds = %157, %170, %161
  %173 = phi float [ %160, %157 ], [ %166, %170 ], [ %166, %161 ]
  %174 = icmp sgt i32 %86, 0
  %175 = select i1 %174, i32 %83, i32 %72
  br label %176

176:                                              ; preds = %172, %89
  %177 = phi i32 [ %91, %89 ], [ %175, %172 ]
  %178 = phi float [ %71, %89 ], [ %173, %172 ]
  %179 = phi i64 [ %70, %89 ], [ %100, %172 ]
  %180 = add nuw nsw i64 %69, 1
  %181 = load i32, i32* %4, align 8
  %182 = sext i32 %181 to i64
  %183 = icmp slt i64 %180, %182
  br i1 %183, label %68, label %184

184:                                              ; preds = %176, %30, %11
  %185 = phi i64 [ 0, %11 ], [ 0, %30 ], [ %179, %176 ]
  %186 = load i64, i64* %12, align 8
  %187 = add nsw i64 %186, -1
  store i64 %187, i64* %12, align 8
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %189, label %195

189:                                              ; preds = %184
  %190 = getelementptr inbounds %class.CFGAS_GEFont, %class.CFGAS_GEFont* %9, i64 0, i32 0
  %191 = bitcast %class.CFGAS_GEFont* %9 to void (%"class.fxcrt::Retainable"*)***
  %192 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %191, align 8
  %193 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %192, i64 1
  %194 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %193, align 8
  tail call void %194(%"class.fxcrt::Retainable"* nonnull %190) #11
  br label %195

195:                                              ; preds = %7, %189, %184, %3
  %196 = phi i64 [ 0, %7 ], [ 0, %3 ], [ %185, %184 ], [ %185, %189 ]
  ret i64 %196
}

declare i32 @_ZNK12CFGAS_GEFont9GetAscentEv(%class.CFGAS_GEFont*) local_unnamed_addr #1

declare i32 @_ZNK12CFGAS_GEFont10GetDescentEv(%class.CFGAS_GEFont*) local_unnamed_addr #1

declare signext i32 @_ZN6pdfium6arabic11GetFormCharEwww(i32 signext, i32 signext, i32 signext) local_unnamed_addr #1

declare signext i32 @_Z16FX_GetMirrorCharw(i32 signext) local_unnamed_addr #1

declare i32 @_ZN12CFGAS_GEFont13GetGlyphIndexEw(%class.CFGAS_GEFont*, i32 signext) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.smul.with.overflow.i32(i32, i32) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #5

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI10CFGAS_CharNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRwRiS7_EEEvDpOT_(%"class.std::__1::vector.47"*, i32* dereferenceable(4), i32* dereferenceable(4), i32* dereferenceable(4)) local_unnamed_addr #10 comdat align 2 {
  %5 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %class.CFGAS_Char** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.47"* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = sdiv exact i64 %10, 56
  %12 = add nsw i64 %11, 1
  %13 = icmp ugt i64 %12, 329406144173384850
  br i1 %13, label %14, label %16

14:                                               ; preds = %4
  %15 = bitcast %"class.std::__1::vector.47"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #13
  unreachable

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = bitcast %class.CFGAS_Char** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %9
  %21 = sdiv exact i64 %20, 56
  %22 = icmp ult i64 %21, 164703072086692425
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = shl nsw i64 %21, 1
  %25 = icmp ult i64 %24, %12
  %26 = select i1 %25, i64 %12, i64 %24
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %16, %23
  %29 = phi i64 [ %26, %23 ], [ 329406144173384850, %16 ]
  %30 = mul i64 %29, 56
  %31 = tail call i8* @_Znwm(i64 %30) #12
  %32 = bitcast i8* %31 to %class.CFGAS_Char*
  br label %33

33:                                               ; preds = %23, %28
  %34 = phi i64 [ %29, %28 ], [ 0, %23 ]
  %35 = phi %class.CFGAS_Char* [ %32, %28 ], [ null, %23 ]
  %36 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %35, i64 %11
  %37 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %35, i64 %34
  %38 = ptrtoint %class.CFGAS_Char* %37 to i64
  %39 = load i32, i32* %1, align 4
  %40 = trunc i32 %39 to i16
  %41 = load i32, i32* %2, align 4
  %42 = load i32, i32* %3, align 4
  tail call void @_ZN10CFGAS_CharC1Etii(%class.CFGAS_Char* %36, i16 zeroext %40, i32 %41, i32 %42) #11
  %43 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %36, i64 1
  %44 = ptrtoint %class.CFGAS_Char* %43 to i64
  %45 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %0, i64 0, i32 0, i32 0
  %46 = load %class.CFGAS_Char*, %class.CFGAS_Char** %45, align 8
  %47 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %48 = icmp eq %class.CFGAS_Char* %47, %46
  br i1 %48, label %49, label %51

49:                                               ; preds = %33
  %50 = ptrtoint %class.CFGAS_Char* %36 to i64
  store i64 %50, i64* %8, align 8
  store i64 %44, i64* %6, align 8
  store i64 %38, i64* %18, align 8
  br label %66

51:                                               ; preds = %33, %51
  %52 = phi %class.CFGAS_Char* [ %54, %51 ], [ %36, %33 ]
  %53 = phi %class.CFGAS_Char* [ %55, %51 ], [ %47, %33 ]
  %54 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %52, i64 -1
  %55 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %53, i64 -1
  tail call void @_ZN10CFGAS_CharC1ERKS_(%class.CFGAS_Char* %54, %class.CFGAS_Char* dereferenceable(56) %55) #11
  %56 = icmp eq %class.CFGAS_Char* %55, %46
  br i1 %56, label %57, label %51

57:                                               ; preds = %51
  %58 = load %class.CFGAS_Char*, %class.CFGAS_Char** %45, align 8
  %59 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %60 = ptrtoint %class.CFGAS_Char* %54 to i64
  store i64 %60, i64* %8, align 8
  store i64 %44, i64* %6, align 8
  store i64 %38, i64* %18, align 8
  %61 = icmp eq %class.CFGAS_Char* %59, %58
  br i1 %61, label %66, label %62

62:                                               ; preds = %57, %62
  %63 = phi %class.CFGAS_Char* [ %64, %62 ], [ %59, %57 ]
  %64 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %63, i64 -1
  tail call void @_ZN10CFGAS_CharD1Ev(%class.CFGAS_Char* %64) #11
  %65 = icmp eq %class.CFGAS_Char* %64, %58
  br i1 %65, label %66, label %62

66:                                               ; preds = %62, %49, %57
  %67 = phi %class.CFGAS_Char* [ %46, %49 ], [ %58, %57 ], [ %58, %62 ]
  %68 = icmp eq %class.CFGAS_Char* %67, null
  br i1 %68, label %71, label %69

69:                                               ; preds = %66
  %70 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %67, i64 0, i32 0
  tail call void @_ZdlPv(i8* %70) #12
  br label %71

71:                                               ; preds = %66, %69
  ret void
}

declare void @_ZN10CFGAS_CharC1Etii(%class.CFGAS_Char*, i16 zeroext, i32, i32) unnamed_addr #1

declare void @_ZN10CFGAS_CharC1ERKS_(%class.CFGAS_Char*, %class.CFGAS_Char* dereferenceable(56)) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN10CFGAS_CharD1Ev(%class.CFGAS_Char*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI16CFGAS_BreakPieceNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(%"class.std::__1::vector.72"*, %class.CFGAS_BreakPiece* dereferenceable(64)) local_unnamed_addr #10 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.72", %"class.std::__1::vector.72"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %class.CFGAS_BreakPiece** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.72"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 6
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 288230376151711743
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.72"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #13
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.72", %"class.std::__1::vector.72"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %class.CFGAS_BreakPiece** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 6
  %20 = icmp ult i64 %19, 144115188075855871
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 5
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 288230376151711743
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #13
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 288230376151711743, %14 ]
  %31 = shl i64 %30, 6
  %32 = tail call i8* @_Znwm(i64 %31) #12
  %33 = bitcast i8* %32 to %class.CFGAS_BreakPiece*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %class.CFGAS_BreakPiece* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %36, i64 %9
  %38 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %36, i64 %35
  %39 = ptrtoint %class.CFGAS_BreakPiece* %38 to i64
  tail call void @_ZN16CFGAS_BreakPieceC1ERKS_(%class.CFGAS_BreakPiece* %37, %class.CFGAS_BreakPiece* dereferenceable(64) %1) #11
  %40 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %37, i64 1
  %41 = ptrtoint %class.CFGAS_BreakPiece* %40 to i64
  %42 = getelementptr inbounds %"class.std::__1::vector.72", %"class.std::__1::vector.72"* %0, i64 0, i32 0, i32 0
  %43 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %42, align 8
  %44 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %3, align 8
  %45 = icmp eq %class.CFGAS_BreakPiece* %44, %43
  br i1 %45, label %46, label %48

46:                                               ; preds = %34
  %47 = ptrtoint %class.CFGAS_BreakPiece* %37 to i64
  store i64 %47, i64* %6, align 8
  store i64 %41, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  br label %63

48:                                               ; preds = %34, %48
  %49 = phi %class.CFGAS_BreakPiece* [ %51, %48 ], [ %37, %34 ]
  %50 = phi %class.CFGAS_BreakPiece* [ %52, %48 ], [ %44, %34 ]
  %51 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %49, i64 -1
  %52 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %50, i64 -1
  tail call void @_ZN16CFGAS_BreakPieceC1ERKS_(%class.CFGAS_BreakPiece* %51, %class.CFGAS_BreakPiece* dereferenceable(64) %52) #11
  %53 = icmp eq %class.CFGAS_BreakPiece* %52, %43
  br i1 %53, label %54, label %48

54:                                               ; preds = %48
  %55 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %42, align 8
  %56 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %3, align 8
  %57 = ptrtoint %class.CFGAS_BreakPiece* %51 to i64
  store i64 %57, i64* %6, align 8
  store i64 %41, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %58 = icmp eq %class.CFGAS_BreakPiece* %56, %55
  br i1 %58, label %63, label %59

59:                                               ; preds = %54, %59
  %60 = phi %class.CFGAS_BreakPiece* [ %61, %59 ], [ %56, %54 ]
  %61 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %60, i64 -1
  tail call void @_ZN16CFGAS_BreakPieceD1Ev(%class.CFGAS_BreakPiece* %61) #11
  %62 = icmp eq %class.CFGAS_BreakPiece* %61, %55
  br i1 %62, label %63, label %59

63:                                               ; preds = %59, %46, %54
  %64 = phi %class.CFGAS_BreakPiece* [ %43, %46 ], [ %55, %54 ], [ %55, %59 ]
  %65 = icmp eq %class.CFGAS_BreakPiece* %64, null
  br i1 %65, label %68, label %66

66:                                               ; preds = %63
  %67 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %64, i64 0, i32 0
  tail call void @_ZdlPv(i8* %67) #12
  br label %68

68:                                               ; preds = %63, %66
  ret void
}

declare void @_ZN16CFGAS_BreakPieceC1ERKS_(%class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece* dereferenceable(64)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeI6FX_TPONS_9allocatorIS1_EEE19__add_back_capacityEv(%"class.std::__1::deque"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %struct.FX_TPO*, align 8
  %3 = alloca %struct.FX_TPO*, align 8
  %4 = alloca %"struct.std::__1::__split_buffer.126", align 8
  %5 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, 511
  br i1 %7, label %8, label %162

8:                                                ; preds = %1
  %9 = add i64 %6, -512
  store i64 %9, i64* %5, align 8
  %10 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load %struct.FX_TPO**, %struct.FX_TPO*** %10, align 8
  %12 = bitcast %struct.FX_TPO** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %11, i64 1
  store %struct.FX_TPO** %14, %struct.FX_TPO*** %10, align 8
  %15 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %16 = load %struct.FX_TPO**, %struct.FX_TPO*** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %18 = load %struct.FX_TPO**, %struct.FX_TPO*** %17, align 8
  %19 = icmp eq %struct.FX_TPO** %16, %18
  %20 = ptrtoint %struct.FX_TPO** %18 to i64
  %21 = bitcast %struct.FX_TPO** %16 to i64*
  br i1 %19, label %22, label %158

22:                                               ; preds = %8
  %23 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %struct.FX_TPO**, %struct.FX_TPO*** %23, align 8
  %25 = icmp ugt %struct.FX_TPO** %14, %24
  %26 = ptrtoint %struct.FX_TPO** %24 to i64
  br i1 %25, label %27, label %47

27:                                               ; preds = %22
  %28 = ptrtoint %struct.FX_TPO** %14 to i64
  %29 = sub i64 %28, %26
  %30 = ashr exact i64 %29, 3
  %31 = add nsw i64 %30, 1
  %32 = sdiv i64 %31, -2
  %33 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %14, i64 %32
  %34 = ptrtoint %struct.FX_TPO** %16 to i64
  %35 = sub i64 %34, %28
  %36 = ashr exact i64 %35, 3
  %37 = icmp eq i64 %35, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %27
  %39 = bitcast %struct.FX_TPO** %33 to i8*
  %40 = bitcast %struct.FX_TPO** %14 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 %35, i1 false) #11
  %41 = load %struct.FX_TPO**, %struct.FX_TPO*** %10, align 8
  br label %42

42:                                               ; preds = %38, %27
  %43 = phi %struct.FX_TPO** [ %14, %27 ], [ %41, %38 ]
  %44 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %33, i64 %36
  store %struct.FX_TPO** %44, %struct.FX_TPO*** %15, align 8
  %45 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %43, i64 %32
  store %struct.FX_TPO** %45, %struct.FX_TPO*** %10, align 8
  %46 = bitcast %struct.FX_TPO** %44 to i64*
  br label %158

47:                                               ; preds = %22
  %48 = bitcast %struct.FX_TPO*** %17 to i64*
  %49 = bitcast %"class.std::__1::deque"* %0 to i64*
  %50 = sub i64 %20, %26
  %51 = ashr exact i64 %50, 2
  %52 = icmp eq i64 %50, 0
  %53 = select i1 %52, i64 1, i64 %51
  %54 = icmp ugt i64 %53, 2305843009213693951
  br i1 %54, label %55, label %56

55:                                               ; preds = %47
  tail call void @abort() #13
  unreachable

56:                                               ; preds = %47
  %57 = lshr i64 %53, 2
  %58 = shl i64 %53, 3
  %59 = tail call i8* @_Znwm(i64 %58) #12
  %60 = bitcast i8* %59 to %struct.FX_TPO**
  %61 = ptrtoint i8* %59 to i64
  %62 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %60, i64 %57
  %63 = ptrtoint %struct.FX_TPO** %62 to i64
  %64 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %60, i64 %53
  %65 = ptrtoint %struct.FX_TPO** %64 to i64
  %66 = ptrtoint %struct.FX_TPO** %14 to i64
  %67 = ptrtoint %struct.FX_TPO** %16 to i64
  %68 = sub i64 %67, %66
  %69 = ashr exact i64 %68, 3
  %70 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %62, i64 %69
  %71 = icmp eq i64 %68, 0
  br i1 %71, label %147, label %72

72:                                               ; preds = %56
  %73 = add i64 %68, -8
  %74 = lshr i64 %73, 3
  %75 = add nuw nsw i64 %74, 1
  %76 = and i64 %75, 7
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %93, label %78

78:                                               ; preds = %72, %78
  %79 = phi %struct.FX_TPO** [ %86, %78 ], [ %62, %72 ]
  %80 = phi i64 [ %87, %78 ], [ %63, %72 ]
  %81 = phi %struct.FX_TPO** [ %88, %78 ], [ %14, %72 ]
  %82 = phi i64 [ %89, %78 ], [ %76, %72 ]
  %83 = bitcast %struct.FX_TPO** %81 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = inttoptr i64 %80 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %79, i64 1
  %87 = ptrtoint %struct.FX_TPO** %86 to i64
  %88 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %81, i64 1
  %89 = add i64 %82, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %78, !llvm.loop !41

91:                                               ; preds = %78
  %92 = ptrtoint %struct.FX_TPO** %86 to i64
  br label %93

93:                                               ; preds = %72, %91
  %94 = phi %struct.FX_TPO** [ %62, %72 ], [ %86, %91 ]
  %95 = phi i64 [ %63, %72 ], [ %92, %91 ]
  %96 = phi %struct.FX_TPO** [ %14, %72 ], [ %88, %91 ]
  %97 = icmp ult i64 %73, 56
  br i1 %97, label %144, label %98

98:                                               ; preds = %93, %98
  %99 = phi %struct.FX_TPO** [ %140, %98 ], [ %94, %93 ]
  %100 = phi i64 [ %141, %98 ], [ %95, %93 ]
  %101 = phi %struct.FX_TPO** [ %142, %98 ], [ %96, %93 ]
  %102 = bitcast %struct.FX_TPO** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = inttoptr i64 %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %99, i64 1
  %106 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %101, i64 1
  %107 = bitcast %struct.FX_TPO** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast %struct.FX_TPO** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %99, i64 2
  %111 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %101, i64 2
  %112 = bitcast %struct.FX_TPO** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %struct.FX_TPO** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %99, i64 3
  %116 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %101, i64 3
  %117 = bitcast %struct.FX_TPO** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %struct.FX_TPO** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %99, i64 4
  %121 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %101, i64 4
  %122 = bitcast %struct.FX_TPO** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %struct.FX_TPO** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %99, i64 5
  %126 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %101, i64 5
  %127 = bitcast %struct.FX_TPO** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %struct.FX_TPO** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %99, i64 6
  %131 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %101, i64 6
  %132 = bitcast %struct.FX_TPO** %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = bitcast %struct.FX_TPO** %130 to i64*
  store i64 %133, i64* %134, align 8
  %135 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %99, i64 7
  %136 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %101, i64 7
  %137 = bitcast %struct.FX_TPO** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast %struct.FX_TPO** %135 to i64*
  store i64 %138, i64* %139, align 8
  %140 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %99, i64 8
  %141 = ptrtoint %struct.FX_TPO** %140 to i64
  %142 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %101, i64 8
  %143 = icmp eq %struct.FX_TPO** %70, %140
  br i1 %143, label %144, label %98

144:                                              ; preds = %98, %93
  %145 = ptrtoint %struct.FX_TPO** %70 to i64
  %146 = load %struct.FX_TPO**, %struct.FX_TPO*** %23, align 8
  br label %147

147:                                              ; preds = %144, %56
  %148 = phi %struct.FX_TPO** [ %146, %144 ], [ %24, %56 ]
  %149 = phi i64 [ %145, %144 ], [ %63, %56 ]
  store i64 %61, i64* %49, align 8
  %150 = bitcast %struct.FX_TPO*** %10 to i64*
  store i64 %63, i64* %150, align 8
  %151 = bitcast %struct.FX_TPO*** %15 to i64*
  store i64 %149, i64* %151, align 8
  store i64 %65, i64* %48, align 8
  %152 = icmp eq %struct.FX_TPO** %148, null
  %153 = inttoptr i64 %149 to i64*
  br i1 %152, label %158, label %154

154:                                              ; preds = %147
  %155 = bitcast %struct.FX_TPO** %148 to i8*
  tail call void @_ZdlPv(i8* %155) #12
  %156 = bitcast %struct.FX_TPO*** %15 to i64**
  %157 = load i64*, i64** %156, align 8
  br label %158

158:                                              ; preds = %8, %42, %147, %154
  %159 = phi i64* [ %157, %154 ], [ %153, %147 ], [ %46, %42 ], [ %21, %8 ]
  store i64 %13, i64* %159, align 8
  %160 = load %struct.FX_TPO**, %struct.FX_TPO*** %15, align 8
  %161 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %160, i64 1
  store %struct.FX_TPO** %161, %struct.FX_TPO*** %15, align 8
  br label %460

162:                                              ; preds = %1
  %163 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %164 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %165 = bitcast %struct.FX_TPO*** %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %168 = bitcast %struct.FX_TPO*** %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = sub i64 %166, %169
  %171 = ashr exact i64 %170, 3
  %172 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %173 = bitcast %struct.FX_TPO*** %172 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = bitcast %"class.std::__1::deque"* %0 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = sub i64 %174, %176
  %178 = ashr exact i64 %177, 3
  %179 = icmp ult i64 %171, %178
  %180 = inttoptr i64 %166 to %struct.FX_TPO**
  %181 = inttoptr i64 %169 to %struct.FX_TPO**
  br i1 %179, label %182, label %337

182:                                              ; preds = %162
  %183 = icmp eq i64 %174, %166
  br i1 %183, label %188, label %184

184:                                              ; preds = %182
  %185 = bitcast %struct.FX_TPO** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #11
  %186 = tail call i8* @_Znwm(i64 4096) #12
  %187 = bitcast %struct.FX_TPO** %2 to i8**
  store i8* %186, i8** %187, align 8
  call void @_ZNSt3__114__split_bufferIP6FX_TPONS_9allocatorIS2_EEE9push_backEOS2_(%"struct.std::__1::__split_buffer"* %163, %struct.FX_TPO** nonnull dereferenceable(8) %2)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #11
  br label %460

188:                                              ; preds = %182
  %189 = bitcast %struct.FX_TPO** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %189) #11
  %190 = tail call i8* @_Znwm(i64 4096) #12
  %191 = bitcast %struct.FX_TPO** %3 to i8**
  store i8* %190, i8** %191, align 8
  call void @_ZNSt3__114__split_bufferIP6FX_TPONS_9allocatorIS2_EEE10push_frontEOS2_(%"struct.std::__1::__split_buffer"* %163, %struct.FX_TPO** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %189) #11
  %192 = load %struct.FX_TPO**, %struct.FX_TPO*** %167, align 8
  %193 = bitcast %struct.FX_TPO** %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %192, i64 1
  store %struct.FX_TPO** %195, %struct.FX_TPO*** %167, align 8
  %196 = load %struct.FX_TPO**, %struct.FX_TPO*** %164, align 8
  %197 = load %struct.FX_TPO**, %struct.FX_TPO*** %172, align 8
  %198 = icmp eq %struct.FX_TPO** %196, %197
  %199 = ptrtoint %struct.FX_TPO** %197 to i64
  %200 = bitcast %struct.FX_TPO** %196 to i64*
  br i1 %198, label %201, label %333

201:                                              ; preds = %188
  %202 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %203 = load %struct.FX_TPO**, %struct.FX_TPO*** %202, align 8
  %204 = icmp ugt %struct.FX_TPO** %195, %203
  %205 = ptrtoint %struct.FX_TPO** %203 to i64
  br i1 %204, label %206, label %226

206:                                              ; preds = %201
  %207 = ptrtoint %struct.FX_TPO** %195 to i64
  %208 = sub i64 %207, %205
  %209 = ashr exact i64 %208, 3
  %210 = add nsw i64 %209, 1
  %211 = sdiv i64 %210, -2
  %212 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %195, i64 %211
  %213 = ptrtoint %struct.FX_TPO** %196 to i64
  %214 = sub i64 %213, %207
  %215 = ashr exact i64 %214, 3
  %216 = icmp eq i64 %214, 0
  br i1 %216, label %221, label %217

217:                                              ; preds = %206
  %218 = bitcast %struct.FX_TPO** %212 to i8*
  %219 = bitcast %struct.FX_TPO** %195 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %218, i8* align 8 %219, i64 %214, i1 false) #11
  %220 = load %struct.FX_TPO**, %struct.FX_TPO*** %167, align 8
  br label %221

221:                                              ; preds = %217, %206
  %222 = phi %struct.FX_TPO** [ %195, %206 ], [ %220, %217 ]
  %223 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %212, i64 %215
  store %struct.FX_TPO** %223, %struct.FX_TPO*** %164, align 8
  %224 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %222, i64 %211
  store %struct.FX_TPO** %224, %struct.FX_TPO*** %167, align 8
  %225 = bitcast %struct.FX_TPO** %223 to i64*
  br label %333

226:                                              ; preds = %201
  %227 = sub i64 %199, %205
  %228 = ashr exact i64 %227, 2
  %229 = icmp eq i64 %227, 0
  %230 = select i1 %229, i64 1, i64 %228
  %231 = icmp ugt i64 %230, 2305843009213693951
  br i1 %231, label %232, label %233

232:                                              ; preds = %226
  call void @abort() #13
  unreachable

233:                                              ; preds = %226
  %234 = lshr i64 %230, 2
  %235 = shl i64 %230, 3
  %236 = call i8* @_Znwm(i64 %235) #12
  %237 = bitcast i8* %236 to %struct.FX_TPO**
  %238 = ptrtoint i8* %236 to i64
  %239 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %237, i64 %234
  %240 = ptrtoint %struct.FX_TPO** %239 to i64
  %241 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %237, i64 %230
  %242 = ptrtoint %struct.FX_TPO** %241 to i64
  %243 = ptrtoint %struct.FX_TPO** %195 to i64
  %244 = ptrtoint %struct.FX_TPO** %196 to i64
  %245 = sub i64 %244, %243
  %246 = ashr exact i64 %245, 3
  %247 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %239, i64 %246
  %248 = icmp eq i64 %245, 0
  br i1 %248, label %324, label %249

249:                                              ; preds = %233
  %250 = add i64 %245, -8
  %251 = lshr i64 %250, 3
  %252 = add nuw nsw i64 %251, 1
  %253 = and i64 %252, 7
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %270, label %255

255:                                              ; preds = %249, %255
  %256 = phi %struct.FX_TPO** [ %263, %255 ], [ %239, %249 ]
  %257 = phi i64 [ %264, %255 ], [ %240, %249 ]
  %258 = phi %struct.FX_TPO** [ %265, %255 ], [ %195, %249 ]
  %259 = phi i64 [ %266, %255 ], [ %253, %249 ]
  %260 = bitcast %struct.FX_TPO** %258 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = inttoptr i64 %257 to i64*
  store i64 %261, i64* %262, align 8
  %263 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %256, i64 1
  %264 = ptrtoint %struct.FX_TPO** %263 to i64
  %265 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %258, i64 1
  %266 = add i64 %259, -1
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %255, !llvm.loop !42

268:                                              ; preds = %255
  %269 = ptrtoint %struct.FX_TPO** %263 to i64
  br label %270

270:                                              ; preds = %249, %268
  %271 = phi %struct.FX_TPO** [ %239, %249 ], [ %263, %268 ]
  %272 = phi i64 [ %240, %249 ], [ %269, %268 ]
  %273 = phi %struct.FX_TPO** [ %195, %249 ], [ %265, %268 ]
  %274 = icmp ult i64 %250, 56
  br i1 %274, label %321, label %275

275:                                              ; preds = %270, %275
  %276 = phi %struct.FX_TPO** [ %317, %275 ], [ %271, %270 ]
  %277 = phi i64 [ %318, %275 ], [ %272, %270 ]
  %278 = phi %struct.FX_TPO** [ %319, %275 ], [ %273, %270 ]
  %279 = bitcast %struct.FX_TPO** %278 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = inttoptr i64 %277 to i64*
  store i64 %280, i64* %281, align 8
  %282 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %276, i64 1
  %283 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %278, i64 1
  %284 = bitcast %struct.FX_TPO** %283 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = bitcast %struct.FX_TPO** %282 to i64*
  store i64 %285, i64* %286, align 8
  %287 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %276, i64 2
  %288 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %278, i64 2
  %289 = bitcast %struct.FX_TPO** %288 to i64*
  %290 = load i64, i64* %289, align 8
  %291 = bitcast %struct.FX_TPO** %287 to i64*
  store i64 %290, i64* %291, align 8
  %292 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %276, i64 3
  %293 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %278, i64 3
  %294 = bitcast %struct.FX_TPO** %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = bitcast %struct.FX_TPO** %292 to i64*
  store i64 %295, i64* %296, align 8
  %297 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %276, i64 4
  %298 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %278, i64 4
  %299 = bitcast %struct.FX_TPO** %298 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = bitcast %struct.FX_TPO** %297 to i64*
  store i64 %300, i64* %301, align 8
  %302 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %276, i64 5
  %303 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %278, i64 5
  %304 = bitcast %struct.FX_TPO** %303 to i64*
  %305 = load i64, i64* %304, align 8
  %306 = bitcast %struct.FX_TPO** %302 to i64*
  store i64 %305, i64* %306, align 8
  %307 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %276, i64 6
  %308 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %278, i64 6
  %309 = bitcast %struct.FX_TPO** %308 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = bitcast %struct.FX_TPO** %307 to i64*
  store i64 %310, i64* %311, align 8
  %312 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %276, i64 7
  %313 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %278, i64 7
  %314 = bitcast %struct.FX_TPO** %313 to i64*
  %315 = load i64, i64* %314, align 8
  %316 = bitcast %struct.FX_TPO** %312 to i64*
  store i64 %315, i64* %316, align 8
  %317 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %276, i64 8
  %318 = ptrtoint %struct.FX_TPO** %317 to i64
  %319 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %278, i64 8
  %320 = icmp eq %struct.FX_TPO** %247, %317
  br i1 %320, label %321, label %275

321:                                              ; preds = %275, %270
  %322 = ptrtoint %struct.FX_TPO** %247 to i64
  %323 = load %struct.FX_TPO**, %struct.FX_TPO*** %202, align 8
  br label %324

324:                                              ; preds = %321, %233
  %325 = phi %struct.FX_TPO** [ %323, %321 ], [ %203, %233 ]
  %326 = phi i64 [ %322, %321 ], [ %240, %233 ]
  store i64 %238, i64* %175, align 8
  store i64 %240, i64* %168, align 8
  store i64 %326, i64* %165, align 8
  store i64 %242, i64* %173, align 8
  %327 = icmp eq %struct.FX_TPO** %325, null
  %328 = inttoptr i64 %326 to i64*
  br i1 %327, label %333, label %329

329:                                              ; preds = %324
  %330 = bitcast %struct.FX_TPO** %325 to i8*
  call void @_ZdlPv(i8* %330) #12
  %331 = bitcast %struct.FX_TPO*** %164 to i64**
  %332 = load i64*, i64** %331, align 8
  br label %333

333:                                              ; preds = %188, %221, %324, %329
  %334 = phi i64* [ %332, %329 ], [ %328, %324 ], [ %225, %221 ], [ %200, %188 ]
  store i64 %194, i64* %334, align 8
  %335 = load %struct.FX_TPO**, %struct.FX_TPO*** %164, align 8
  %336 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %335, i64 1
  store %struct.FX_TPO** %336, %struct.FX_TPO*** %164, align 8
  br label %460

337:                                              ; preds = %162
  %338 = bitcast %"struct.std::__1::__split_buffer.126"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %338) #11
  %339 = getelementptr inbounds %"struct.std::__1::__split_buffer.126", %"struct.std::__1::__split_buffer.126"* %4, i64 0, i32 1
  %340 = getelementptr inbounds %"struct.std::__1::__split_buffer.126", %"struct.std::__1::__split_buffer.126"* %4, i64 0, i32 2
  %341 = getelementptr inbounds %"struct.std::__1::__split_buffer.126", %"struct.std::__1::__split_buffer.126"* %4, i64 0, i32 3, i32 0, i32 0
  %342 = getelementptr inbounds %"struct.std::__1::__split_buffer.126", %"struct.std::__1::__split_buffer.126"* %4, i64 0, i32 3, i32 1, i32 0
  %343 = ashr exact i64 %177, 2
  %344 = icmp eq i64 %177, 0
  %345 = select i1 %344, i64 1, i64 %343
  %346 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3
  %347 = bitcast %"struct.std::__1::__split_buffer.126"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %347, i8 -86, i64 24, i1 false)
  store %struct.FX_TPO** null, %struct.FX_TPO*** %341, align 8
  %348 = bitcast %"class.std::__1::allocator.91"** %342 to %"class.std::__1::__compressed_pair.88"**
  store %"class.std::__1::__compressed_pair.88"* %346, %"class.std::__1::__compressed_pair.88"** %348, align 8
  %349 = icmp ugt i64 %345, 2305843009213693951
  br i1 %349, label %350, label %351

350:                                              ; preds = %337
  tail call void @abort() #13
  unreachable

351:                                              ; preds = %337
  %352 = shl i64 %345, 3
  %353 = tail call i8* @_Znwm(i64 %352) #12
  %354 = bitcast i8* %353 to %struct.FX_TPO**
  %355 = bitcast %"struct.std::__1::__split_buffer.126"* %4 to i8**
  store i8* %353, i8** %355, align 8
  %356 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %354, i64 %171
  store %struct.FX_TPO** %356, %struct.FX_TPO*** %340, align 8
  store %struct.FX_TPO** %356, %struct.FX_TPO*** %339, align 8
  %357 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %354, i64 %345
  store %struct.FX_TPO** %357, %struct.FX_TPO*** %341, align 8
  %358 = tail call i8* @_Znwm(i64 4096) #12
  %359 = ptrtoint i8* %358 to i64
  %360 = icmp eq i64 %171, %345
  %361 = ptrtoint %struct.FX_TPO** %357 to i64
  %362 = ptrtoint i8* %353 to i64
  %363 = ptrtoint %struct.FX_TPO** %356 to i64
  br i1 %360, label %364, label %398

364:                                              ; preds = %351
  %365 = icmp ugt %struct.FX_TPO** %356, %354
  br i1 %365, label %366, label %373

366:                                              ; preds = %364
  %367 = sub i64 %363, %362
  %368 = ashr exact i64 %367, 3
  %369 = add nsw i64 %368, 1
  %370 = sdiv i64 %369, -2
  %371 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %356, i64 %370
  store %struct.FX_TPO** %371, %struct.FX_TPO*** %340, align 8
  store %struct.FX_TPO** %371, %struct.FX_TPO*** %339, align 8
  %372 = ptrtoint %struct.FX_TPO** %371 to i64
  br label %398

373:                                              ; preds = %364
  %374 = sub i64 %361, %362
  %375 = ashr exact i64 %374, 2
  %376 = icmp eq i64 %374, 0
  %377 = select i1 %376, i64 1, i64 %375
  %378 = icmp ugt i64 %377, 2305843009213693951
  br i1 %378, label %379, label %380

379:                                              ; preds = %373
  tail call void @abort() #13
  unreachable

380:                                              ; preds = %373
  %381 = bitcast %"struct.std::__1::__split_buffer.126"* %4 to i64*
  %382 = bitcast %struct.FX_TPO*** %341 to i64*
  %383 = lshr i64 %377, 2
  %384 = shl i64 %377, 3
  %385 = tail call i8* @_Znwm(i64 %384) #12
  %386 = bitcast i8* %385 to %struct.FX_TPO**
  %387 = ptrtoint i8* %385 to i64
  %388 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %386, i64 %383
  %389 = ptrtoint %struct.FX_TPO** %388 to i64
  %390 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %386, i64 %377
  %391 = ptrtoint %struct.FX_TPO** %390 to i64
  store i64 %387, i64* %381, align 8
  %392 = bitcast %struct.FX_TPO*** %339 to i64*
  store i64 %389, i64* %392, align 8
  %393 = bitcast %struct.FX_TPO*** %340 to i64*
  store i64 %389, i64* %393, align 8
  store i64 %391, i64* %382, align 8
  tail call void @_ZdlPv(i8* nonnull %353) #12
  %394 = load %struct.FX_TPO**, %struct.FX_TPO*** %164, align 8
  %395 = load %struct.FX_TPO**, %struct.FX_TPO*** %167, align 8
  %396 = ptrtoint %struct.FX_TPO** %395 to i64
  %397 = ptrtoint %struct.FX_TPO** %394 to i64
  br label %398

398:                                              ; preds = %351, %366, %380
  %399 = phi i64 [ %391, %380 ], [ %361, %366 ], [ %361, %351 ]
  %400 = phi i64 [ %397, %380 ], [ %166, %366 ], [ %166, %351 ]
  %401 = phi i64 [ %389, %380 ], [ %372, %366 ], [ %363, %351 ]
  %402 = phi i64 [ %396, %380 ], [ %169, %366 ], [ %169, %351 ]
  %403 = phi i64 [ %387, %380 ], [ %362, %366 ], [ %362, %351 ]
  %404 = phi %struct.FX_TPO** [ %395, %380 ], [ %181, %366 ], [ %181, %351 ]
  %405 = phi %struct.FX_TPO** [ %394, %380 ], [ %180, %366 ], [ %180, %351 ]
  %406 = phi %struct.FX_TPO** [ %388, %380 ], [ %371, %366 ], [ %356, %351 ]
  %407 = bitcast %struct.FX_TPO** %406 to i64*
  store i64 %359, i64* %407, align 8
  %408 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %406, i64 1
  store %struct.FX_TPO** %408, %struct.FX_TPO*** %340, align 8
  %409 = icmp eq %struct.FX_TPO** %405, %404
  br i1 %409, label %410, label %455

410:                                              ; preds = %398
  %411 = ptrtoint %struct.FX_TPO** %408 to i64
  %412 = bitcast %"struct.std::__1::__split_buffer.126"* %4 to i64*
  %413 = bitcast %struct.FX_TPO*** %339 to i64*
  %414 = bitcast %struct.FX_TPO*** %340 to i64*
  %415 = bitcast %struct.FX_TPO*** %341 to i64*
  br label %427

416:                                              ; preds = %455
  %417 = ptrtoint %struct.FX_TPO** %458 to i64
  %418 = bitcast %"struct.std::__1::__split_buffer.126"* %4 to i64*
  %419 = load i64, i64* %418, align 8
  %420 = bitcast %struct.FX_TPO*** %339 to i64*
  %421 = load i64, i64* %420, align 8
  %422 = load i64, i64* %165, align 8
  %423 = bitcast %struct.FX_TPO*** %340 to i64*
  %424 = load i64, i64* %423, align 8
  %425 = bitcast %struct.FX_TPO*** %341 to i64*
  %426 = load i64, i64* %425, align 8
  br label %427

427:                                              ; preds = %410, %416
  %428 = phi i64* [ %415, %410 ], [ %425, %416 ]
  %429 = phi i64* [ %414, %410 ], [ %423, %416 ]
  %430 = phi i64* [ %413, %410 ], [ %420, %416 ]
  %431 = phi i64* [ %412, %410 ], [ %418, %416 ]
  %432 = phi i64 [ %399, %410 ], [ %426, %416 ]
  %433 = phi i64 [ %411, %410 ], [ %424, %416 ]
  %434 = phi i64 [ %400, %410 ], [ %422, %416 ]
  %435 = phi i64 [ %401, %410 ], [ %421, %416 ]
  %436 = phi i64 [ %402, %410 ], [ %417, %416 ]
  %437 = phi i64 [ %403, %410 ], [ %419, %416 ]
  %438 = load i64, i64* %175, align 8
  store i64 %437, i64* %175, align 8
  store i64 %438, i64* %431, align 8
  store i64 %435, i64* %168, align 8
  store i64 %436, i64* %430, align 8
  store i64 %433, i64* %165, align 8
  store i64 %434, i64* %429, align 8
  %439 = load i64, i64* %173, align 8
  store i64 %432, i64* %173, align 8
  store i64 %439, i64* %428, align 8
  %440 = inttoptr i64 %436 to %struct.FX_TPO**
  %441 = inttoptr i64 %434 to %struct.FX_TPO**
  %442 = icmp eq %struct.FX_TPO** %441, %440
  br i1 %442, label %450, label %443

443:                                              ; preds = %427
  %444 = getelementptr %struct.FX_TPO*, %struct.FX_TPO** %441, i64 -1
  %445 = ptrtoint %struct.FX_TPO** %444 to i64
  %446 = sub i64 %445, %436
  %447 = lshr i64 %446, 3
  %448 = xor i64 %447, -1
  %449 = getelementptr %struct.FX_TPO*, %struct.FX_TPO** %441, i64 %448
  store %struct.FX_TPO** %449, %struct.FX_TPO*** %340, align 8
  br label %450

450:                                              ; preds = %443, %427
  %451 = icmp eq i64 %438, 0
  br i1 %451, label %454, label %452

452:                                              ; preds = %450
  %453 = inttoptr i64 %438 to i8*
  call void @_ZdlPv(i8* %453) #12
  br label %454

454:                                              ; preds = %450, %452
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %338) #11
  br label %460

455:                                              ; preds = %398, %455
  %456 = phi %struct.FX_TPO** [ %457, %455 ], [ %405, %398 ]
  %457 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %456, i64 -1
  call void @_ZNSt3__114__split_bufferIP6FX_TPORNS_9allocatorIS2_EEE10push_frontERKS2_(%"struct.std::__1::__split_buffer.126"* nonnull %4, %struct.FX_TPO** dereferenceable(8) %457)
  %458 = load %struct.FX_TPO**, %struct.FX_TPO*** %167, align 8
  %459 = icmp eq %struct.FX_TPO** %457, %458
  br i1 %459, label %416, label %455

460:                                              ; preds = %454, %333, %184, %158
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIP6FX_TPONS_9allocatorIS2_EEE9push_backEOS2_(%"struct.std::__1::__split_buffer"*, %struct.FX_TPO** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load %struct.FX_TPO**, %struct.FX_TPO*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %struct.FX_TPO**, %struct.FX_TPO*** %5, align 8
  %7 = icmp eq %struct.FX_TPO** %4, %6
  %8 = ptrtoint %struct.FX_TPO** %6 to i64
  %9 = bitcast %struct.FX_TPO** %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %12 = load %struct.FX_TPO**, %struct.FX_TPO*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %14 = load %struct.FX_TPO**, %struct.FX_TPO*** %13, align 8
  %15 = icmp ugt %struct.FX_TPO** %12, %14
  %16 = ptrtoint %struct.FX_TPO** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint %struct.FX_TPO** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %12, i64 %22
  %24 = ptrtoint %struct.FX_TPO** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast %struct.FX_TPO** %23 to i8*
  %30 = bitcast %struct.FX_TPO** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #11
  %31 = load %struct.FX_TPO**, %struct.FX_TPO*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi %struct.FX_TPO** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %23, i64 %26
  store %struct.FX_TPO** %34, %struct.FX_TPO*** %3, align 8
  %35 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %33, i64 %22
  store %struct.FX_TPO** %35, %struct.FX_TPO*** %11, align 8
  %36 = bitcast %struct.FX_TPO** %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast %struct.FX_TPO*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #13
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #12
  %50 = bitcast i8* %49 to %struct.FX_TPO**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %50, i64 %47
  %53 = ptrtoint %struct.FX_TPO** %52 to i64
  %54 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %50, i64 %43
  %55 = ptrtoint %struct.FX_TPO** %54 to i64
  %56 = ptrtoint %struct.FX_TPO** %12 to i64
  %57 = ptrtoint %struct.FX_TPO** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi %struct.FX_TPO** [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi %struct.FX_TPO** [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast %struct.FX_TPO** %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %69, i64 1
  %77 = ptrtoint %struct.FX_TPO** %76 to i64
  %78 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !43

81:                                               ; preds = %68
  %82 = ptrtoint %struct.FX_TPO** %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi %struct.FX_TPO** [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi %struct.FX_TPO** [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi %struct.FX_TPO** [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi %struct.FX_TPO** [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast %struct.FX_TPO** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = inttoptr i64 %90 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %89, i64 1
  %96 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %91, i64 1
  %97 = bitcast %struct.FX_TPO** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast %struct.FX_TPO** %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %89, i64 2
  %101 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %91, i64 2
  %102 = bitcast %struct.FX_TPO** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast %struct.FX_TPO** %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %89, i64 3
  %106 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %91, i64 3
  %107 = bitcast %struct.FX_TPO** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast %struct.FX_TPO** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %89, i64 4
  %111 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %91, i64 4
  %112 = bitcast %struct.FX_TPO** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %struct.FX_TPO** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %89, i64 5
  %116 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %91, i64 5
  %117 = bitcast %struct.FX_TPO** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %struct.FX_TPO** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %89, i64 6
  %121 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %91, i64 6
  %122 = bitcast %struct.FX_TPO** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %struct.FX_TPO** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %89, i64 7
  %126 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %91, i64 7
  %127 = bitcast %struct.FX_TPO** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %struct.FX_TPO** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %89, i64 8
  %131 = ptrtoint %struct.FX_TPO** %130 to i64
  %132 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %91, i64 8
  %133 = icmp eq %struct.FX_TPO** %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint %struct.FX_TPO** %60 to i64
  %136 = load %struct.FX_TPO**, %struct.FX_TPO*** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi %struct.FX_TPO** [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast %struct.FX_TPO*** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast %struct.FX_TPO*** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq %struct.FX_TPO** %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast %struct.FX_TPO** %138 to i8*
  tail call void @_ZdlPv(i8* %145) #12
  %146 = bitcast %struct.FX_TPO*** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast %struct.FX_TPO** %1 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = load %struct.FX_TPO**, %struct.FX_TPO*** %3, align 8
  %153 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %152, i64 1
  store %struct.FX_TPO** %153, %struct.FX_TPO*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIP6FX_TPONS_9allocatorIS2_EEE10push_frontEOS2_(%"struct.std::__1::__split_buffer"*, %struct.FX_TPO** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %4 = load %struct.FX_TPO**, %struct.FX_TPO*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %6 = load %struct.FX_TPO**, %struct.FX_TPO*** %5, align 8
  %7 = icmp eq %struct.FX_TPO** %4, %6
  %8 = ptrtoint %struct.FX_TPO** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %11 = load %struct.FX_TPO**, %struct.FX_TPO*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %struct.FX_TPO**, %struct.FX_TPO*** %12, align 8
  %14 = icmp ult %struct.FX_TPO** %11, %13
  %15 = bitcast %struct.FX_TPO*** %12 to i64*
  %16 = ptrtoint %struct.FX_TPO** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %struct.FX_TPO** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %11, i64 %22
  %24 = ptrtoint %struct.FX_TPO** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %23, i64 %29
  %31 = bitcast %struct.FX_TPO** %30 to i8*
  %32 = bitcast %struct.FX_TPO** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #11
  %33 = load %struct.FX_TPO**, %struct.FX_TPO*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %struct.FX_TPO** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %struct.FX_TPO** [ %30, %27 ], [ %23, %17 ]
  store %struct.FX_TPO** %36, %struct.FX_TPO*** %3, align 8
  %37 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %35, i64 %22
  store %struct.FX_TPO** %37, %struct.FX_TPO*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #13
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #12
  %51 = bitcast i8* %50 to %struct.FX_TPO**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %51, i64 %48
  %54 = ptrtoint %struct.FX_TPO** %53 to i64
  %55 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %51, i64 %43
  %56 = ptrtoint %struct.FX_TPO** %55 to i64
  %57 = ptrtoint %struct.FX_TPO** %4 to i64
  %58 = ptrtoint %struct.FX_TPO** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi %struct.FX_TPO** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi %struct.FX_TPO** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast %struct.FX_TPO** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %70, i64 1
  %78 = ptrtoint %struct.FX_TPO** %77 to i64
  %79 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !44

82:                                               ; preds = %69
  %83 = ptrtoint %struct.FX_TPO** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi %struct.FX_TPO** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi %struct.FX_TPO** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi %struct.FX_TPO** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi %struct.FX_TPO** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast %struct.FX_TPO** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 1
  %97 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 1
  %98 = bitcast %struct.FX_TPO** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %struct.FX_TPO** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 2
  %102 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 2
  %103 = bitcast %struct.FX_TPO** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %struct.FX_TPO** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 3
  %107 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 3
  %108 = bitcast %struct.FX_TPO** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %struct.FX_TPO** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 4
  %112 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 4
  %113 = bitcast %struct.FX_TPO** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %struct.FX_TPO** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 5
  %117 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 5
  %118 = bitcast %struct.FX_TPO** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %struct.FX_TPO** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 6
  %122 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 6
  %123 = bitcast %struct.FX_TPO** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %struct.FX_TPO** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 7
  %127 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 7
  %128 = bitcast %struct.FX_TPO** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %struct.FX_TPO** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 8
  %132 = ptrtoint %struct.FX_TPO** %131 to i64
  %133 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 8
  %134 = icmp eq %struct.FX_TPO** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint %struct.FX_TPO** %61 to i64
  %137 = load %struct.FX_TPO**, %struct.FX_TPO*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi %struct.FX_TPO** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast %struct.FX_TPO*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast %struct.FX_TPO*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq %struct.FX_TPO** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast %struct.FX_TPO** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #12
  %146 = load %struct.FX_TPO**, %struct.FX_TPO*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi %struct.FX_TPO** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %148, i64 -1
  %150 = bitcast %struct.FX_TPO** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast %struct.FX_TPO** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load %struct.FX_TPO**, %struct.FX_TPO*** %3, align 8
  %154 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %153, i64 -1
  store %struct.FX_TPO** %154, %struct.FX_TPO*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIP6FX_TPORNS_9allocatorIS2_EEE10push_frontERKS2_(%"struct.std::__1::__split_buffer.126"*, %struct.FX_TPO** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.126", %"struct.std::__1::__split_buffer.126"* %0, i64 0, i32 1
  %4 = load %struct.FX_TPO**, %struct.FX_TPO*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.126", %"struct.std::__1::__split_buffer.126"* %0, i64 0, i32 0
  %6 = load %struct.FX_TPO**, %struct.FX_TPO*** %5, align 8
  %7 = icmp eq %struct.FX_TPO** %4, %6
  %8 = ptrtoint %struct.FX_TPO** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.126", %"struct.std::__1::__split_buffer.126"* %0, i64 0, i32 2
  %11 = load %struct.FX_TPO**, %struct.FX_TPO*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.126", %"struct.std::__1::__split_buffer.126"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %struct.FX_TPO**, %struct.FX_TPO*** %12, align 8
  %14 = icmp ult %struct.FX_TPO** %11, %13
  %15 = bitcast %struct.FX_TPO*** %12 to i64*
  %16 = ptrtoint %struct.FX_TPO** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %struct.FX_TPO** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %11, i64 %22
  %24 = ptrtoint %struct.FX_TPO** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %23, i64 %29
  %31 = bitcast %struct.FX_TPO** %30 to i8*
  %32 = bitcast %struct.FX_TPO** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #11
  %33 = load %struct.FX_TPO**, %struct.FX_TPO*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %struct.FX_TPO** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %struct.FX_TPO** [ %30, %27 ], [ %23, %17 ]
  store %struct.FX_TPO** %36, %struct.FX_TPO*** %3, align 8
  %37 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %35, i64 %22
  store %struct.FX_TPO** %37, %struct.FX_TPO*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.126"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #13
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #12
  %51 = bitcast i8* %50 to %struct.FX_TPO**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %51, i64 %48
  %54 = ptrtoint %struct.FX_TPO** %53 to i64
  %55 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %51, i64 %43
  %56 = ptrtoint %struct.FX_TPO** %55 to i64
  %57 = ptrtoint %struct.FX_TPO** %4 to i64
  %58 = ptrtoint %struct.FX_TPO** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi %struct.FX_TPO** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi %struct.FX_TPO** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast %struct.FX_TPO** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %70, i64 1
  %78 = ptrtoint %struct.FX_TPO** %77 to i64
  %79 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !45

82:                                               ; preds = %69
  %83 = ptrtoint %struct.FX_TPO** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi %struct.FX_TPO** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi %struct.FX_TPO** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi %struct.FX_TPO** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi %struct.FX_TPO** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast %struct.FX_TPO** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 1
  %97 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 1
  %98 = bitcast %struct.FX_TPO** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %struct.FX_TPO** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 2
  %102 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 2
  %103 = bitcast %struct.FX_TPO** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %struct.FX_TPO** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 3
  %107 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 3
  %108 = bitcast %struct.FX_TPO** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %struct.FX_TPO** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 4
  %112 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 4
  %113 = bitcast %struct.FX_TPO** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %struct.FX_TPO** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 5
  %117 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 5
  %118 = bitcast %struct.FX_TPO** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %struct.FX_TPO** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 6
  %122 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 6
  %123 = bitcast %struct.FX_TPO** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %struct.FX_TPO** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 7
  %127 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 7
  %128 = bitcast %struct.FX_TPO** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %struct.FX_TPO** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 8
  %132 = ptrtoint %struct.FX_TPO** %131 to i64
  %133 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 8
  %134 = icmp eq %struct.FX_TPO** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint %struct.FX_TPO** %61 to i64
  %137 = load %struct.FX_TPO**, %struct.FX_TPO*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi %struct.FX_TPO** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast %struct.FX_TPO*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast %struct.FX_TPO*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq %struct.FX_TPO** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast %struct.FX_TPO** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #12
  %146 = load %struct.FX_TPO**, %struct.FX_TPO*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi %struct.FX_TPO** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %148, i64 -1
  %150 = bitcast %struct.FX_TPO** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast %struct.FX_TPO** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load %struct.FX_TPO**, %struct.FX_TPO*** %3, align 8
  %154 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %153, i64 -1
  store %struct.FX_TPO** %154, %struct.FX_TPO*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__sortIRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEvT0_SA_T_(%struct.FX_TPO**, %struct.FX_TPO*, %struct.FX_TPO**, %struct.FX_TPO*, %"struct.std::__1::__less.134"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %6 = alloca %"class.std::__1::__deque_iterator", align 8
  %7 = alloca %"class.std::__1::__deque_iterator", align 8
  %8 = alloca %"class.std::__1::__deque_iterator", align 8
  %9 = bitcast %"class.std::__1::__deque_iterator"* %7 to i8*
  %10 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %7, i64 0, i32 0
  %11 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %7, i64 0, i32 1
  %12 = icmp eq %struct.FX_TPO* %3, %1
  br i1 %12, label %933, label %13

13:                                               ; preds = %5
  %14 = ptrtoint %struct.FX_TPO* %3 to i64
  %15 = ptrtoint %struct.FX_TPO* %1 to i64
  br label %24

16:                                               ; preds = %930, %898, %905, %860, %854, %852
  %17 = phi %struct.FX_TPO** [ %808, %852 ], [ %26, %854 ], [ %26, %860 ], [ %26, %905 ], [ %26, %898 ], [ %808, %930 ]
  %18 = phi i64 [ %807, %852 ], [ %30, %854 ], [ %30, %860 ], [ %30, %905 ], [ %30, %898 ], [ %807, %930 ]
  %19 = phi %struct.FX_TPO** [ %41, %852 ], [ %808, %854 ], [ %861, %860 ], [ %906, %905 ], [ %808, %898 ], [ %41, %930 ]
  %20 = phi i64 [ %40, %852 ], [ %856, %854 ], [ %863, %860 ], [ %908, %905 ], [ %900, %898 ], [ %40, %930 ]
  %21 = inttoptr i64 %18 to %struct.FX_TPO*
  %22 = inttoptr i64 %20 to %struct.FX_TPO*
  %23 = icmp eq %struct.FX_TPO* %21, %22
  br i1 %23, label %933, label %24

24:                                               ; preds = %13, %16
  %25 = phi %struct.FX_TPO* [ %1, %13 ], [ %22, %16 ]
  %26 = phi %struct.FX_TPO** [ %2, %13 ], [ %17, %16 ]
  %27 = phi %struct.FX_TPO* [ %3, %13 ], [ %21, %16 ]
  %28 = phi i64 [ %15, %13 ], [ %20, %16 ]
  %29 = phi %struct.FX_TPO** [ %0, %13 ], [ %19, %16 ]
  %30 = phi i64 [ %14, %13 ], [ %18, %16 ]
  %31 = ptrtoint %struct.FX_TPO** %26 to i64
  %32 = bitcast %struct.FX_TPO** %26 to i64*
  %33 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %26, i64 -1
  %34 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %26, i64 -1
  br label %38

35:                                               ; preds = %653
  %36 = inttoptr i64 %610 to %struct.FX_TPO*
  %37 = icmp eq %struct.FX_TPO* %27, %36
  br i1 %37, label %933, label %38

38:                                               ; preds = %24, %35
  %39 = phi %struct.FX_TPO* [ %25, %24 ], [ %36, %35 ]
  %40 = phi i64 [ %28, %24 ], [ %610, %35 ]
  %41 = phi %struct.FX_TPO** [ %29, %24 ], [ %611, %35 ]
  %42 = ptrtoint %struct.FX_TPO** %41 to i64
  %43 = sub i64 %31, %42
  %44 = shl i64 %43, 6
  %45 = load i64, i64* %32, align 8
  %46 = sub i64 %30, %45
  %47 = ashr exact i64 %46, 3
  %48 = add nsw i64 %47, %44
  %49 = bitcast %struct.FX_TPO** %41 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = sub i64 %40, %50
  %52 = ashr exact i64 %51, 3
  %53 = sub i64 %48, %52
  %54 = inttoptr i64 %45 to %struct.FX_TPO*
  switch i64 %53, label %317 [
    i64 0, label %933
    i64 1, label %933
    i64 2, label %55
    i64 3, label %77
    i64 4, label %144
    i64 5, label %202
  ]

55:                                               ; preds = %38
  %56 = inttoptr i64 %30 to %struct.FX_TPO*
  %57 = inttoptr i64 %40 to %struct.FX_TPO*
  %58 = inttoptr i64 %45 to %struct.FX_TPO*
  %59 = icmp eq %struct.FX_TPO* %58, %56
  br i1 %59, label %60, label %64

60:                                               ; preds = %55
  %61 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %26, i64 -1
  %62 = load %struct.FX_TPO*, %struct.FX_TPO** %61, align 8
  %63 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %62, i64 512
  br label %64

64:                                               ; preds = %55, %60
  %65 = phi %struct.FX_TPO* [ %63, %60 ], [ %56, %55 ]
  %66 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %65, i64 -1, i32 1
  %67 = load i32, i32* %66, align 4
  %68 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %57, i64 0, i32 1
  %69 = load i32, i32* %68, align 4
  %70 = icmp slt i32 %67, %69
  br i1 %70, label %71, label %933

71:                                               ; preds = %64
  %72 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %65, i64 -1
  %73 = inttoptr i64 %40 to i64*
  %74 = load i64, i64* %73, align 4
  %75 = bitcast %struct.FX_TPO* %72 to i64*
  %76 = load i64, i64* %75, align 4
  store i64 %76, i64* %73, align 4
  store i64 %74, i64* %75, align 4
  br label %933

77:                                               ; preds = %38
  %78 = inttoptr i64 %30 to %struct.FX_TPO*
  %79 = inttoptr i64 %40 to %struct.FX_TPO*
  %80 = inttoptr i64 %45 to %struct.FX_TPO*
  %81 = add nsw i64 %52, 1
  %82 = icmp sgt i64 %51, -8
  br i1 %82, label %83, label %89

83:                                               ; preds = %77
  %84 = lshr i64 %81, 9
  %85 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %84
  %86 = load %struct.FX_TPO*, %struct.FX_TPO** %85, align 8
  %87 = and i64 %81, 511
  %88 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %86, i64 %87
  br label %97

89:                                               ; preds = %77
  %90 = sub nsw i64 510, %52
  %91 = sdiv i64 %90, -512
  %92 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %91
  %93 = load %struct.FX_TPO*, %struct.FX_TPO** %92, align 8
  %94 = srem i64 %90, 512
  %95 = sub nuw nsw i64 511, %94
  %96 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %93, i64 %95
  br label %97

97:                                               ; preds = %83, %89
  %98 = phi %struct.FX_TPO* [ %88, %83 ], [ %96, %89 ]
  %99 = icmp eq %struct.FX_TPO* %80, %78
  br i1 %99, label %100, label %104

100:                                              ; preds = %97
  %101 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %26, i64 -1
  %102 = load %struct.FX_TPO*, %struct.FX_TPO** %101, align 8
  %103 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %102, i64 512
  br label %104

104:                                              ; preds = %97, %100
  %105 = phi %struct.FX_TPO* [ %103, %100 ], [ %78, %97 ]
  %106 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %105, i64 -1
  %107 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %98, i64 0, i32 1
  %108 = load i32, i32* %107, align 4
  %109 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %79, i64 0, i32 1
  %110 = load i32, i32* %109, align 4
  %111 = icmp slt i32 %108, %110
  %112 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %105, i64 -1, i32 1
  %113 = load i32, i32* %112, align 4
  %114 = icmp slt i32 %113, %108
  br i1 %111, label %128, label %115

115:                                              ; preds = %104
  br i1 %114, label %116, label %933

116:                                              ; preds = %115
  %117 = bitcast %struct.FX_TPO* %98 to i64*
  %118 = load i64, i64* %117, align 4
  %119 = bitcast %struct.FX_TPO* %106 to i64*
  %120 = load i64, i64* %119, align 4
  store i64 %120, i64* %117, align 4
  store i64 %118, i64* %119, align 4
  %121 = load i32, i32* %107, align 4
  %122 = load i32, i32* %109, align 4
  %123 = icmp slt i32 %121, %122
  br i1 %123, label %124, label %933

124:                                              ; preds = %116
  %125 = inttoptr i64 %40 to i64*
  %126 = load i64, i64* %125, align 4
  %127 = load i64, i64* %117, align 4
  store i64 %127, i64* %125, align 4
  store i64 %126, i64* %117, align 4
  br label %933

128:                                              ; preds = %104
  %129 = inttoptr i64 %40 to i64*
  %130 = load i64, i64* %129, align 4
  br i1 %114, label %131, label %134

131:                                              ; preds = %128
  %132 = bitcast %struct.FX_TPO* %106 to i64*
  %133 = load i64, i64* %132, align 4
  store i64 %133, i64* %129, align 4
  store i64 %130, i64* %132, align 4
  br label %933

134:                                              ; preds = %128
  %135 = bitcast %struct.FX_TPO* %98 to i64*
  %136 = load i64, i64* %135, align 4
  store i64 %136, i64* %129, align 4
  store i64 %130, i64* %135, align 4
  %137 = load i32, i32* %112, align 4
  %138 = lshr i64 %130, 32
  %139 = trunc i64 %138 to i32
  %140 = icmp slt i32 %137, %139
  br i1 %140, label %141, label %933

141:                                              ; preds = %134
  %142 = bitcast %struct.FX_TPO* %106 to i64*
  %143 = load i64, i64* %142, align 4
  store i64 %143, i64* %135, align 4
  store i64 %130, i64* %142, align 4
  br label %933

144:                                              ; preds = %38
  %145 = inttoptr i64 %30 to %struct.FX_TPO*
  %146 = inttoptr i64 %40 to %struct.FX_TPO*
  %147 = inttoptr i64 %45 to %struct.FX_TPO*
  %148 = add nsw i64 %52, 1
  %149 = icmp sgt i64 %51, -8
  br i1 %149, label %150, label %157

150:                                              ; preds = %144
  %151 = lshr i64 %148, 9
  %152 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %151
  %153 = load %struct.FX_TPO*, %struct.FX_TPO** %152, align 8
  %154 = and i64 %148, 511
  %155 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %153, i64 %154
  %156 = add nuw nsw i64 %52, 2
  br label %166

157:                                              ; preds = %144
  %158 = sub nsw i64 510, %52
  %159 = sdiv i64 %158, -512
  %160 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %159
  %161 = load %struct.FX_TPO*, %struct.FX_TPO** %160, align 8
  %162 = srem i64 %158, 512
  %163 = sub nuw nsw i64 511, %162
  %164 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %161, i64 %163
  %165 = icmp sgt i64 %51, -16
  br i1 %165, label %166, label %175

166:                                              ; preds = %150, %157
  %167 = phi i64 [ %156, %150 ], [ 1, %157 ]
  %168 = phi %struct.FX_TPO* [ %155, %150 ], [ %164, %157 ]
  %169 = phi %struct.FX_TPO** [ %152, %150 ], [ %160, %157 ]
  %170 = lshr i64 %167, 9
  %171 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %170
  %172 = load %struct.FX_TPO*, %struct.FX_TPO** %171, align 8
  %173 = and i64 %167, 511
  %174 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %172, i64 %173
  br label %183

175:                                              ; preds = %157
  %176 = sub nsw i64 509, %52
  %177 = sdiv i64 %176, -512
  %178 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %177
  %179 = load %struct.FX_TPO*, %struct.FX_TPO** %178, align 8
  %180 = srem i64 %176, 512
  %181 = sub nuw nsw i64 511, %180
  %182 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %179, i64 %181
  br label %183

183:                                              ; preds = %166, %175
  %184 = phi %struct.FX_TPO* [ %168, %166 ], [ %164, %175 ]
  %185 = phi %struct.FX_TPO** [ %169, %166 ], [ %160, %175 ]
  %186 = phi %struct.FX_TPO* [ %174, %166 ], [ %182, %175 ]
  %187 = phi %struct.FX_TPO** [ %171, %166 ], [ %178, %175 ]
  %188 = icmp eq %struct.FX_TPO* %147, %145
  br i1 %188, label %189, label %193

189:                                              ; preds = %183
  %190 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %26, i64 -1
  %191 = load %struct.FX_TPO*, %struct.FX_TPO** %190, align 8
  %192 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %191, i64 512
  br label %193

193:                                              ; preds = %183, %189
  %194 = phi %struct.FX_TPO** [ %190, %189 ], [ %26, %183 ]
  %195 = phi %struct.FX_TPO* [ %192, %189 ], [ %145, %183 ]
  %196 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %195, i64 -1
  %197 = ptrtoint %struct.FX_TPO* %196 to i64
  %198 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %8, i64 0, i32 0
  store %struct.FX_TPO** %194, %struct.FX_TPO*** %198, align 8
  %199 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %8, i64 0, i32 1
  %200 = bitcast %struct.FX_TPO** %199 to i64*
  store i64 %197, i64* %200, align 8
  %201 = tail call i32 @_ZNSt3__17__sort4IRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEjT0_SA_SA_SA_T_(%struct.FX_TPO** %41, %struct.FX_TPO* %146, %struct.FX_TPO** %185, %struct.FX_TPO* %184, %struct.FX_TPO** %187, %struct.FX_TPO* %186, %"class.std::__1::__deque_iterator"* nonnull byval(%"class.std::__1::__deque_iterator") align 8 %8, %"struct.std::__1::__less.134"* dereferenceable(1) %4)
  br label %933

202:                                              ; preds = %38
  %203 = inttoptr i64 %30 to %struct.FX_TPO*
  %204 = inttoptr i64 %40 to %struct.FX_TPO*
  %205 = inttoptr i64 %45 to %struct.FX_TPO*
  %206 = add nsw i64 %52, 1
  %207 = icmp sgt i64 %51, -8
  br i1 %207, label %208, label %215

208:                                              ; preds = %202
  %209 = lshr i64 %206, 9
  %210 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %209
  %211 = load %struct.FX_TPO*, %struct.FX_TPO** %210, align 8
  %212 = and i64 %206, 511
  %213 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %211, i64 %212
  %214 = add nuw nsw i64 %52, 2
  br label %224

215:                                              ; preds = %202
  %216 = sub nsw i64 510, %52
  %217 = sdiv i64 %216, -512
  %218 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %217
  %219 = load %struct.FX_TPO*, %struct.FX_TPO** %218, align 8
  %220 = srem i64 %216, 512
  %221 = sub nuw nsw i64 511, %220
  %222 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %219, i64 %221
  %223 = icmp sgt i64 %51, -16
  br i1 %223, label %224, label %234

224:                                              ; preds = %215, %208
  %225 = phi i64 [ %214, %208 ], [ 1, %215 ]
  %226 = phi %struct.FX_TPO* [ %213, %208 ], [ %222, %215 ]
  %227 = phi %struct.FX_TPO** [ %210, %208 ], [ %218, %215 ]
  %228 = lshr i64 %225, 9
  %229 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %228
  %230 = load %struct.FX_TPO*, %struct.FX_TPO** %229, align 8
  %231 = and i64 %225, 511
  %232 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %230, i64 %231
  %233 = add nsw i64 %52, 3
  br label %243

234:                                              ; preds = %215
  %235 = sub nsw i64 509, %52
  %236 = sdiv i64 %235, -512
  %237 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %236
  %238 = load %struct.FX_TPO*, %struct.FX_TPO** %237, align 8
  %239 = srem i64 %235, 512
  %240 = sub nuw nsw i64 511, %239
  %241 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %238, i64 %240
  %242 = icmp sgt i64 %51, -24
  br i1 %242, label %243, label %254

243:                                              ; preds = %224, %234
  %244 = phi i64 [ %233, %224 ], [ 1, %234 ]
  %245 = phi %struct.FX_TPO* [ %232, %224 ], [ %241, %234 ]
  %246 = phi %struct.FX_TPO** [ %229, %224 ], [ %237, %234 ]
  %247 = phi %struct.FX_TPO** [ %227, %224 ], [ %218, %234 ]
  %248 = phi %struct.FX_TPO* [ %226, %224 ], [ %222, %234 ]
  %249 = lshr i64 %244, 9
  %250 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %249
  %251 = load %struct.FX_TPO*, %struct.FX_TPO** %250, align 8
  %252 = and i64 %244, 511
  %253 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %251, i64 %252
  br label %262

254:                                              ; preds = %234
  %255 = sub nsw i64 508, %52
  %256 = sdiv i64 %255, -512
  %257 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %256
  %258 = load %struct.FX_TPO*, %struct.FX_TPO** %257, align 8
  %259 = srem i64 %255, 512
  %260 = sub nuw nsw i64 511, %259
  %261 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %258, i64 %260
  br label %262

262:                                              ; preds = %243, %254
  %263 = phi %struct.FX_TPO* [ %245, %243 ], [ %241, %254 ]
  %264 = phi %struct.FX_TPO** [ %246, %243 ], [ %237, %254 ]
  %265 = phi %struct.FX_TPO** [ %247, %243 ], [ %218, %254 ]
  %266 = phi %struct.FX_TPO* [ %248, %243 ], [ %222, %254 ]
  %267 = phi %struct.FX_TPO* [ %253, %243 ], [ %261, %254 ]
  %268 = phi %struct.FX_TPO** [ %250, %243 ], [ %257, %254 ]
  %269 = icmp eq %struct.FX_TPO* %205, %203
  br i1 %269, label %270, label %274

270:                                              ; preds = %262
  %271 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %26, i64 -1
  %272 = load %struct.FX_TPO*, %struct.FX_TPO** %271, align 8
  %273 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %272, i64 512
  br label %274

274:                                              ; preds = %262, %270
  %275 = phi %struct.FX_TPO* [ %273, %270 ], [ %203, %262 ]
  %276 = bitcast %"class.std::__1::__deque_iterator"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %276)
  %277 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %6, i64 0, i32 0
  store %struct.FX_TPO** %268, %struct.FX_TPO*** %277, align 8
  %278 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %6, i64 0, i32 1
  store %struct.FX_TPO* %267, %struct.FX_TPO** %278, align 8
  %279 = tail call i32 @_ZNSt3__17__sort4IRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEjT0_SA_SA_SA_T_(%struct.FX_TPO** %41, %struct.FX_TPO* %204, %struct.FX_TPO** %265, %struct.FX_TPO* %266, %struct.FX_TPO** %264, %struct.FX_TPO* %263, %"class.std::__1::__deque_iterator"* nonnull byval(%"class.std::__1::__deque_iterator") align 8 %6, %"struct.std::__1::__less.134"* dereferenceable(1) %4) #11
  %280 = load %struct.FX_TPO*, %struct.FX_TPO** %278, align 8
  %281 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %275, i64 -1, i32 1
  %282 = load i32, i32* %281, align 4
  %283 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %280, i64 0, i32 1
  %284 = load i32, i32* %283, align 4
  %285 = icmp slt i32 %282, %284
  br i1 %285, label %286, label %316

286:                                              ; preds = %274
  %287 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %275, i64 -1
  %288 = bitcast %struct.FX_TPO* %280 to i64*
  %289 = load i64, i64* %288, align 4
  %290 = bitcast %struct.FX_TPO* %287 to i64*
  %291 = load i64, i64* %290, align 4
  store i64 %291, i64* %288, align 4
  store i64 %289, i64* %290, align 4
  %292 = load i32, i32* %283, align 4
  %293 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %263, i64 0, i32 1
  %294 = load i32, i32* %293, align 4
  %295 = icmp slt i32 %292, %294
  br i1 %295, label %296, label %316

296:                                              ; preds = %286
  %297 = bitcast %struct.FX_TPO* %263 to i64*
  %298 = load i64, i64* %297, align 4
  %299 = load i64, i64* %288, align 4
  store i64 %299, i64* %297, align 4
  store i64 %298, i64* %288, align 4
  %300 = load i32, i32* %293, align 4
  %301 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %266, i64 0, i32 1
  %302 = load i32, i32* %301, align 4
  %303 = icmp slt i32 %300, %302
  br i1 %303, label %304, label %316

304:                                              ; preds = %296
  %305 = bitcast %struct.FX_TPO* %266 to i64*
  %306 = load i64, i64* %305, align 4
  %307 = load i64, i64* %297, align 4
  store i64 %307, i64* %305, align 4
  store i64 %306, i64* %297, align 4
  %308 = load i32, i32* %301, align 4
  %309 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %204, i64 0, i32 1
  %310 = load i32, i32* %309, align 4
  %311 = icmp slt i32 %308, %310
  br i1 %311, label %312, label %316

312:                                              ; preds = %304
  %313 = inttoptr i64 %40 to i64*
  %314 = load i64, i64* %313, align 4
  %315 = load i64, i64* %305, align 4
  store i64 %315, i64* %313, align 4
  store i64 %314, i64* %305, align 4
  br label %316

316:                                              ; preds = %274, %286, %296, %304, %312
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %276)
  br label %933

317:                                              ; preds = %38
  %318 = icmp slt i64 %53, 31
  br i1 %318, label %319, label %322

319:                                              ; preds = %317
  %320 = inttoptr i64 %30 to %struct.FX_TPO*
  %321 = inttoptr i64 %40 to %struct.FX_TPO*
  tail call void @_ZNSt3__118__insertion_sort_3IRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEvT0_SA_T_(%struct.FX_TPO** %41, %struct.FX_TPO* %321, %struct.FX_TPO** %26, %struct.FX_TPO* %320, %"struct.std::__1::__less.134"* dereferenceable(1) %4)
  br label %933

322:                                              ; preds = %317
  %323 = icmp eq %struct.FX_TPO* %27, %54
  br i1 %323, label %324, label %327

324:                                              ; preds = %322
  %325 = load %struct.FX_TPO*, %struct.FX_TPO** %33, align 8
  %326 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %325, i64 512
  br label %327

327:                                              ; preds = %322, %324
  %328 = phi %struct.FX_TPO** [ %33, %324 ], [ %26, %322 ]
  %329 = phi %struct.FX_TPO* [ %326, %324 ], [ %27, %322 ]
  %330 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %329, i64 -1
  %331 = icmp sgt i64 %53, 999
  %332 = lshr i64 %53, 1
  %333 = icmp eq i64 %332, 0
  br i1 %333, label %353, label %334

334:                                              ; preds = %327
  %335 = add nsw i64 %52, %332
  %336 = icmp sgt i64 %335, 0
  br i1 %336, label %337, label %344

337:                                              ; preds = %334
  %338 = lshr i64 %335, 9
  %339 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %338
  %340 = load %struct.FX_TPO*, %struct.FX_TPO** %339, align 8
  %341 = and i64 %335, 511
  %342 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %340, i64 %341
  %343 = ptrtoint %struct.FX_TPO* %342 to i64
  br label %353

344:                                              ; preds = %334
  %345 = sub nsw i64 511, %335
  %346 = sdiv i64 %345, -512
  %347 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %346
  %348 = load %struct.FX_TPO*, %struct.FX_TPO** %347, align 8
  %349 = srem i64 %345, 512
  %350 = sub nuw nsw i64 511, %349
  %351 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %348, i64 %350
  %352 = ptrtoint %struct.FX_TPO* %351 to i64
  br label %353

353:                                              ; preds = %327, %337, %344
  %354 = phi i64 [ %40, %327 ], [ %343, %337 ], [ %352, %344 ]
  %355 = phi %struct.FX_TPO** [ %41, %327 ], [ %339, %337 ], [ %347, %344 ]
  br i1 %331, label %356, label %454

356:                                              ; preds = %353
  %357 = lshr i64 %53, 2
  %358 = icmp eq i64 %357, 0
  br i1 %358, label %376, label %359

359:                                              ; preds = %356
  %360 = add nsw i64 %52, %357
  %361 = icmp sgt i64 %360, 0
  br i1 %361, label %362, label %368

362:                                              ; preds = %359
  %363 = lshr i64 %360, 9
  %364 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %363
  %365 = load %struct.FX_TPO*, %struct.FX_TPO** %364, align 8
  %366 = and i64 %360, 511
  %367 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %365, i64 %366
  br label %378

368:                                              ; preds = %359
  %369 = sub nsw i64 511, %360
  %370 = sdiv i64 %369, -512
  %371 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %370
  %372 = load %struct.FX_TPO*, %struct.FX_TPO** %371, align 8
  %373 = srem i64 %369, 512
  %374 = sub nuw nsw i64 511, %373
  %375 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %372, i64 %374
  br label %378

376:                                              ; preds = %356
  %377 = inttoptr i64 %354 to %struct.FX_TPO*
  br label %404

378:                                              ; preds = %362, %368
  %379 = phi %struct.FX_TPO* [ %375, %368 ], [ %367, %362 ]
  %380 = phi %struct.FX_TPO** [ %371, %368 ], [ %364, %362 ]
  %381 = inttoptr i64 %354 to %struct.FX_TPO*
  %382 = bitcast %struct.FX_TPO** %355 to i64*
  %383 = load i64, i64* %382, align 8
  %384 = sub i64 %354, %383
  %385 = ashr exact i64 %384, 3
  %386 = add nsw i64 %385, %357
  %387 = icmp sgt i64 %386, 0
  br i1 %387, label %388, label %395

388:                                              ; preds = %378
  %389 = lshr i64 %386, 9
  %390 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %355, i64 %389
  %391 = load %struct.FX_TPO*, %struct.FX_TPO** %390, align 8
  %392 = and i64 %386, 511
  %393 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %391, i64 %392
  %394 = ptrtoint %struct.FX_TPO* %393 to i64
  br label %404

395:                                              ; preds = %378
  %396 = sub nsw i64 511, %386
  %397 = sdiv i64 %396, -512
  %398 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %355, i64 %397
  %399 = load %struct.FX_TPO*, %struct.FX_TPO** %398, align 8
  %400 = srem i64 %396, 512
  %401 = sub nuw nsw i64 511, %400
  %402 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %399, i64 %401
  %403 = ptrtoint %struct.FX_TPO* %402 to i64
  br label %404

404:                                              ; preds = %376, %388, %395
  %405 = phi %struct.FX_TPO* [ %377, %376 ], [ %381, %388 ], [ %381, %395 ]
  %406 = phi %struct.FX_TPO* [ %39, %376 ], [ %379, %388 ], [ %379, %395 ]
  %407 = phi %struct.FX_TPO** [ %41, %376 ], [ %380, %388 ], [ %380, %395 ]
  %408 = phi i64 [ %354, %376 ], [ %394, %388 ], [ %403, %395 ]
  %409 = phi %struct.FX_TPO** [ %355, %376 ], [ %390, %388 ], [ %398, %395 ]
  %410 = inttoptr i64 %408 to %struct.FX_TPO*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9)
  store %struct.FX_TPO** %409, %struct.FX_TPO*** %10, align 8
  store %struct.FX_TPO* %410, %struct.FX_TPO** %11, align 8
  %411 = tail call i32 @_ZNSt3__17__sort4IRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEjT0_SA_SA_SA_T_(%struct.FX_TPO** %41, %struct.FX_TPO* %39, %struct.FX_TPO** %407, %struct.FX_TPO* %406, %struct.FX_TPO** %355, %struct.FX_TPO* %405, %"class.std::__1::__deque_iterator"* nonnull byval(%"class.std::__1::__deque_iterator") align 8 %7, %"struct.std::__1::__less.134"* dereferenceable(1) %4) #11
  %412 = load %struct.FX_TPO*, %struct.FX_TPO** %11, align 8
  %413 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %329, i64 -1, i32 1
  %414 = load i32, i32* %413, align 4
  %415 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %412, i64 0, i32 1
  %416 = load i32, i32* %415, align 4
  %417 = icmp slt i32 %414, %416
  br i1 %417, label %418, label %451

418:                                              ; preds = %404
  %419 = bitcast %struct.FX_TPO* %412 to i64*
  %420 = load i64, i64* %419, align 4
  %421 = bitcast %struct.FX_TPO* %330 to i64*
  %422 = load i64, i64* %421, align 4
  store i64 %422, i64* %419, align 4
  store i64 %420, i64* %421, align 4
  %423 = add i32 %411, 1
  %424 = load i32, i32* %415, align 4
  %425 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %405, i64 0, i32 1
  %426 = load i32, i32* %425, align 4
  %427 = icmp slt i32 %424, %426
  br i1 %427, label %428, label %451

428:                                              ; preds = %418
  %429 = bitcast %struct.FX_TPO* %405 to i64*
  %430 = load i64, i64* %429, align 4
  %431 = load i64, i64* %419, align 4
  store i64 %431, i64* %429, align 4
  store i64 %430, i64* %419, align 4
  %432 = add i32 %411, 2
  %433 = load i32, i32* %425, align 4
  %434 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %406, i64 0, i32 1
  %435 = load i32, i32* %434, align 4
  %436 = icmp slt i32 %433, %435
  br i1 %436, label %437, label %451

437:                                              ; preds = %428
  %438 = bitcast %struct.FX_TPO* %406 to i64*
  %439 = load i64, i64* %438, align 4
  %440 = load i64, i64* %429, align 4
  store i64 %440, i64* %438, align 4
  store i64 %439, i64* %429, align 4
  %441 = add i32 %411, 3
  %442 = load i32, i32* %434, align 4
  %443 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %39, i64 0, i32 1
  %444 = load i32, i32* %443, align 4
  %445 = icmp slt i32 %442, %444
  br i1 %445, label %446, label %451

446:                                              ; preds = %437
  %447 = inttoptr i64 %40 to i64*
  %448 = load i64, i64* %447, align 4
  %449 = load i64, i64* %438, align 4
  store i64 %449, i64* %447, align 4
  store i64 %448, i64* %438, align 4
  %450 = add i32 %411, 4
  br label %451

451:                                              ; preds = %404, %418, %428, %437, %446
  %452 = phi i32 [ %450, %446 ], [ %441, %437 ], [ %432, %428 ], [ %423, %418 ], [ %411, %404 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9)
  %453 = inttoptr i64 %354 to %struct.FX_TPO*
  br label %493

454:                                              ; preds = %353
  %455 = inttoptr i64 %354 to %struct.FX_TPO*
  %456 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %455, i64 0, i32 1
  %457 = load i32, i32* %456, align 4
  %458 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %39, i64 0, i32 1
  %459 = load i32, i32* %458, align 4
  %460 = icmp slt i32 %457, %459
  %461 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %329, i64 -1, i32 1
  %462 = load i32, i32* %461, align 4
  %463 = icmp slt i32 %462, %457
  br i1 %460, label %477, label %464

464:                                              ; preds = %454
  br i1 %463, label %465, label %493

465:                                              ; preds = %464
  %466 = inttoptr i64 %354 to i64*
  %467 = load i64, i64* %466, align 4
  %468 = bitcast %struct.FX_TPO* %330 to i64*
  %469 = load i64, i64* %468, align 4
  store i64 %469, i64* %466, align 4
  store i64 %467, i64* %468, align 4
  %470 = load i32, i32* %456, align 4
  %471 = load i32, i32* %458, align 4
  %472 = icmp slt i32 %470, %471
  br i1 %472, label %473, label %493

473:                                              ; preds = %465
  %474 = inttoptr i64 %40 to i64*
  %475 = load i64, i64* %474, align 4
  %476 = load i64, i64* %466, align 4
  store i64 %476, i64* %474, align 4
  store i64 %475, i64* %466, align 4
  br label %493

477:                                              ; preds = %454
  %478 = inttoptr i64 %40 to i64*
  %479 = load i64, i64* %478, align 4
  br i1 %463, label %480, label %483

480:                                              ; preds = %477
  %481 = bitcast %struct.FX_TPO* %330 to i64*
  %482 = load i64, i64* %481, align 4
  store i64 %482, i64* %478, align 4
  store i64 %479, i64* %481, align 4
  br label %493

483:                                              ; preds = %477
  %484 = inttoptr i64 %354 to i64*
  %485 = load i64, i64* %484, align 4
  store i64 %485, i64* %478, align 4
  store i64 %479, i64* %484, align 4
  %486 = load i32, i32* %461, align 4
  %487 = lshr i64 %479, 32
  %488 = trunc i64 %487 to i32
  %489 = icmp slt i32 %486, %488
  br i1 %489, label %490, label %493

490:                                              ; preds = %483
  %491 = bitcast %struct.FX_TPO* %330 to i64*
  %492 = load i64, i64* %491, align 4
  store i64 %492, i64* %484, align 4
  store i64 %479, i64* %491, align 4
  br label %493

493:                                              ; preds = %490, %483, %480, %473, %465, %464, %451
  %494 = phi %struct.FX_TPO* [ %455, %490 ], [ %455, %483 ], [ %455, %480 ], [ %455, %473 ], [ %455, %465 ], [ %455, %464 ], [ %453, %451 ]
  %495 = phi i32 [ 2, %490 ], [ 1, %483 ], [ 1, %480 ], [ 2, %473 ], [ 1, %465 ], [ 0, %464 ], [ %452, %451 ]
  %496 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %39, i64 0, i32 1
  %497 = load i32, i32* %496, align 4
  %498 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %494, i64 0, i32 1
  %499 = load i32, i32* %498, align 4
  %500 = icmp slt i32 %497, %499
  br i1 %500, label %685, label %501

501:                                              ; preds = %493
  %502 = load %struct.FX_TPO*, %struct.FX_TPO** %328, align 8
  br label %503

503:                                              ; preds = %501, %675
  %504 = phi %struct.FX_TPO* [ %513, %675 ], [ %502, %501 ]
  %505 = phi %struct.FX_TPO* [ %516, %675 ], [ %330, %501 ]
  %506 = phi %struct.FX_TPO** [ %514, %675 ], [ %328, %501 ]
  %507 = icmp eq %struct.FX_TPO* %505, %504
  br i1 %507, label %508, label %512

508:                                              ; preds = %503
  %509 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %506, i64 -1
  %510 = load %struct.FX_TPO*, %struct.FX_TPO** %509, align 8
  %511 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %510, i64 512
  br label %512

512:                                              ; preds = %503, %508
  %513 = phi %struct.FX_TPO* [ %510, %508 ], [ %504, %503 ]
  %514 = phi %struct.FX_TPO** [ %509, %508 ], [ %506, %503 ]
  %515 = phi %struct.FX_TPO* [ %511, %508 ], [ %505, %503 ]
  %516 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %515, i64 -1
  %517 = icmp eq %struct.FX_TPO* %516, %39
  br i1 %517, label %518, label %675

518:                                              ; preds = %512
  %519 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %39, i64 1
  %520 = ptrtoint %struct.FX_TPO* %519 to i64
  %521 = load i64, i64* %49, align 8
  %522 = sub i64 %520, %521
  %523 = icmp eq i64 %522, 4096
  br i1 %523, label %524, label %528

524:                                              ; preds = %518
  %525 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 1
  %526 = bitcast %struct.FX_TPO** %525 to i64*
  %527 = load i64, i64* %526, align 8
  br label %528

528:                                              ; preds = %518, %524
  %529 = phi i64 [ %527, %524 ], [ %520, %518 ]
  %530 = phi %struct.FX_TPO** [ %525, %524 ], [ %41, %518 ]
  %531 = load %struct.FX_TPO*, %struct.FX_TPO** %26, align 8
  %532 = icmp eq %struct.FX_TPO* %531, %27
  br i1 %532, label %533, label %536

533:                                              ; preds = %528
  %534 = load %struct.FX_TPO*, %struct.FX_TPO** %34, align 8
  %535 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %534, i64 512
  br label %536

536:                                              ; preds = %528, %533
  %537 = phi %struct.FX_TPO** [ %34, %533 ], [ %26, %528 ]
  %538 = phi %struct.FX_TPO* [ %535, %533 ], [ %27, %528 ]
  %539 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %538, i64 -1
  %540 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %538, i64 -1, i32 1
  %541 = load i32, i32* %540, align 4
  %542 = icmp slt i32 %497, %541
  br i1 %542, label %592, label %543

543:                                              ; preds = %536
  %544 = inttoptr i64 %529 to %struct.FX_TPO*
  %545 = icmp eq %struct.FX_TPO* %539, %544
  br i1 %545, label %933, label %546

546:                                              ; preds = %543
  %547 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %544, i64 0, i32 1
  %548 = load i32, i32* %547, align 4
  %549 = icmp slt i32 %497, %548
  br i1 %549, label %556, label %574

550:                                              ; preds = %587
  %551 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %590, i64 0, i32 1
  %552 = load i32, i32* %551, align 4
  %553 = icmp slt i32 %497, %552
  br i1 %553, label %554, label %574

554:                                              ; preds = %550
  %555 = inttoptr i64 %588 to %struct.FX_TPO*
  br label %556

556:                                              ; preds = %554, %546
  %557 = phi %struct.FX_TPO* [ %544, %546 ], [ %555, %554 ]
  %558 = phi %struct.FX_TPO** [ %530, %546 ], [ %589, %554 ]
  %559 = phi i64 [ %529, %546 ], [ %588, %554 ]
  %560 = inttoptr i64 %559 to i64*
  %561 = load i64, i64* %560, align 4
  %562 = bitcast %struct.FX_TPO* %539 to i64*
  %563 = load i64, i64* %562, align 4
  store i64 %563, i64* %560, align 4
  store i64 %561, i64* %562, align 4
  %564 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %557, i64 1
  %565 = ptrtoint %struct.FX_TPO* %564 to i64
  %566 = bitcast %struct.FX_TPO** %558 to i64*
  %567 = load i64, i64* %566, align 8
  %568 = sub i64 %565, %567
  %569 = icmp eq i64 %568, 4096
  br i1 %569, label %570, label %592

570:                                              ; preds = %556
  %571 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %558, i64 1
  %572 = bitcast %struct.FX_TPO** %571 to i64*
  %573 = load i64, i64* %572, align 8
  br label %592

574:                                              ; preds = %546, %550
  %575 = phi %struct.FX_TPO** [ %589, %550 ], [ %530, %546 ]
  %576 = phi %struct.FX_TPO* [ %590, %550 ], [ %544, %546 ]
  %577 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %576, i64 1
  %578 = ptrtoint %struct.FX_TPO* %577 to i64
  %579 = bitcast %struct.FX_TPO** %575 to i64*
  %580 = load i64, i64* %579, align 8
  %581 = sub i64 %578, %580
  %582 = icmp eq i64 %581, 4096
  br i1 %582, label %583, label %587

583:                                              ; preds = %574
  %584 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %575, i64 1
  %585 = bitcast %struct.FX_TPO** %584 to i64*
  %586 = load i64, i64* %585, align 8
  br label %587

587:                                              ; preds = %574, %583
  %588 = phi i64 [ %586, %583 ], [ %578, %574 ]
  %589 = phi %struct.FX_TPO** [ %584, %583 ], [ %575, %574 ]
  %590 = inttoptr i64 %588 to %struct.FX_TPO*
  %591 = icmp eq %struct.FX_TPO* %539, %590
  br i1 %591, label %933, label %550

592:                                              ; preds = %570, %556, %536
  %593 = phi i64 [ %529, %536 ], [ %573, %570 ], [ %565, %556 ]
  %594 = phi %struct.FX_TPO** [ %530, %536 ], [ %571, %570 ], [ %558, %556 ]
  %595 = inttoptr i64 %593 to %struct.FX_TPO*
  %596 = icmp eq %struct.FX_TPO* %539, %595
  br i1 %596, label %933, label %597

597:                                              ; preds = %592, %668
  %598 = phi i64 [ %669, %668 ], [ %593, %592 ]
  %599 = phi %struct.FX_TPO** [ %670, %668 ], [ %594, %592 ]
  %600 = phi %struct.FX_TPO* [ %647, %668 ], [ %539, %592 ]
  %601 = phi %struct.FX_TPO** [ %645, %668 ], [ %537, %592 ]
  %602 = inttoptr i64 %598 to %struct.FX_TPO*
  %603 = load i32, i32* %496, align 4
  %604 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %602, i64 0, i32 1
  %605 = load i32, i32* %604, align 4
  %606 = icmp slt i32 %603, %605
  br i1 %606, label %609, label %614

607:                                              ; preds = %627
  %608 = inttoptr i64 %628 to %struct.FX_TPO*
  br label %609

609:                                              ; preds = %607, %597
  %610 = phi i64 [ %598, %597 ], [ %628, %607 ]
  %611 = phi %struct.FX_TPO** [ %599, %597 ], [ %629, %607 ]
  %612 = phi %struct.FX_TPO* [ %602, %597 ], [ %608, %607 ]
  %613 = load %struct.FX_TPO*, %struct.FX_TPO** %601, align 8
  br label %634

614:                                              ; preds = %597, %627
  %615 = phi %struct.FX_TPO* [ %630, %627 ], [ %602, %597 ]
  %616 = phi %struct.FX_TPO** [ %629, %627 ], [ %599, %597 ]
  %617 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %615, i64 1
  %618 = ptrtoint %struct.FX_TPO* %617 to i64
  %619 = bitcast %struct.FX_TPO** %616 to i64*
  %620 = load i64, i64* %619, align 8
  %621 = sub i64 %618, %620
  %622 = icmp eq i64 %621, 4096
  br i1 %622, label %623, label %627

623:                                              ; preds = %614
  %624 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %616, i64 1
  %625 = bitcast %struct.FX_TPO** %624 to i64*
  %626 = load i64, i64* %625, align 8
  br label %627

627:                                              ; preds = %614, %623
  %628 = phi i64 [ %626, %623 ], [ %618, %614 ]
  %629 = phi %struct.FX_TPO** [ %624, %623 ], [ %616, %614 ]
  %630 = inttoptr i64 %628 to %struct.FX_TPO*
  %631 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %630, i64 0, i32 1
  %632 = load i32, i32* %631, align 4
  %633 = icmp slt i32 %603, %632
  br i1 %633, label %607, label %614

634:                                              ; preds = %609, %643
  %635 = phi %struct.FX_TPO* [ %644, %643 ], [ %613, %609 ]
  %636 = phi %struct.FX_TPO* [ %647, %643 ], [ %600, %609 ]
  %637 = phi %struct.FX_TPO** [ %645, %643 ], [ %601, %609 ]
  %638 = icmp eq %struct.FX_TPO* %636, %635
  br i1 %638, label %639, label %643

639:                                              ; preds = %634
  %640 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %637, i64 -1
  %641 = load %struct.FX_TPO*, %struct.FX_TPO** %640, align 8
  %642 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %641, i64 512
  br label %643

643:                                              ; preds = %634, %639
  %644 = phi %struct.FX_TPO* [ %641, %639 ], [ %635, %634 ]
  %645 = phi %struct.FX_TPO** [ %640, %639 ], [ %637, %634 ]
  %646 = phi %struct.FX_TPO* [ %642, %639 ], [ %636, %634 ]
  %647 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %646, i64 -1
  %648 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %646, i64 -1, i32 1
  %649 = load i32, i32* %648, align 4
  %650 = icmp slt i32 %603, %649
  br i1 %650, label %634, label %651

651:                                              ; preds = %643
  %652 = icmp ult %struct.FX_TPO** %611, %645
  br i1 %652, label %657, label %653

653:                                              ; preds = %651
  %654 = icmp ne %struct.FX_TPO** %611, %645
  %655 = icmp ule %struct.FX_TPO* %647, %612
  %656 = or i1 %654, %655
  br i1 %656, label %35, label %657

657:                                              ; preds = %653, %651
  %658 = inttoptr i64 %610 to i64*
  %659 = load i64, i64* %658, align 4
  %660 = bitcast %struct.FX_TPO* %647 to i64*
  %661 = load i64, i64* %660, align 4
  store i64 %661, i64* %658, align 4
  store i64 %659, i64* %660, align 4
  %662 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %612, i64 1
  %663 = ptrtoint %struct.FX_TPO* %662 to i64
  %664 = bitcast %struct.FX_TPO** %611 to i64*
  %665 = load i64, i64* %664, align 8
  %666 = sub i64 %663, %665
  %667 = icmp eq i64 %666, 4096
  br i1 %667, label %671, label %668

668:                                              ; preds = %657, %671
  %669 = phi i64 [ %674, %671 ], [ %663, %657 ]
  %670 = phi %struct.FX_TPO** [ %672, %671 ], [ %611, %657 ]
  br label %597

671:                                              ; preds = %657
  %672 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %611, i64 1
  %673 = bitcast %struct.FX_TPO** %672 to i64*
  %674 = load i64, i64* %673, align 8
  br label %668

675:                                              ; preds = %512
  %676 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %515, i64 -1, i32 1
  %677 = load i32, i32* %676, align 4
  %678 = icmp slt i32 %677, %499
  br i1 %678, label %679, label %503

679:                                              ; preds = %675
  %680 = inttoptr i64 %40 to i64*
  %681 = load i64, i64* %680, align 4
  %682 = bitcast %struct.FX_TPO* %516 to i64*
  %683 = load i64, i64* %682, align 4
  store i64 %683, i64* %680, align 4
  store i64 %681, i64* %682, align 4
  %684 = add i32 %495, 1
  br label %685

685:                                              ; preds = %493, %679
  %686 = phi %struct.FX_TPO* [ %516, %679 ], [ %330, %493 ]
  %687 = phi %struct.FX_TPO** [ %514, %679 ], [ %328, %493 ]
  %688 = phi i32 [ %684, %679 ], [ %495, %493 ]
  %689 = bitcast %struct.FX_TPO** %41 to i64*
  %690 = bitcast %struct.FX_TPO** %26 to i64*
  %691 = ptrtoint %struct.FX_TPO** %41 to i64
  %692 = ptrtoint %struct.FX_TPO** %26 to i64
  %693 = inttoptr i64 %40 to %struct.FX_TPO*
  %694 = inttoptr i64 %30 to %struct.FX_TPO*
  %695 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %693, i64 1
  %696 = ptrtoint %struct.FX_TPO* %695 to i64
  %697 = load i64, i64* %689, align 8
  %698 = sub i64 %696, %697
  %699 = icmp eq i64 %698, 4096
  br i1 %699, label %700, label %704

700:                                              ; preds = %685
  %701 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 1
  %702 = bitcast %struct.FX_TPO** %701 to i64*
  %703 = load i64, i64* %702, align 8
  br label %704

704:                                              ; preds = %685, %700
  %705 = phi i64 [ %703, %700 ], [ %696, %685 ]
  %706 = phi %struct.FX_TPO** [ %701, %700 ], [ %41, %685 ]
  %707 = icmp ult %struct.FX_TPO** %706, %687
  br i1 %707, label %713, label %708

708:                                              ; preds = %704
  %709 = icmp eq %struct.FX_TPO** %706, %687
  %710 = inttoptr i64 %705 to %struct.FX_TPO*
  %711 = icmp ugt %struct.FX_TPO* %686, %710
  %712 = and i1 %709, %711
  br i1 %712, label %713, label %803

713:                                              ; preds = %708, %704
  br label %714

714:                                              ; preds = %793, %713
  %715 = phi i64 [ %354, %713 ], [ %786, %793 ]
  %716 = phi i64 [ %705, %713 ], [ %794, %793 ]
  %717 = phi %struct.FX_TPO** [ %706, %713 ], [ %795, %793 ]
  %718 = phi %struct.FX_TPO* [ %686, %713 ], [ %768, %793 ]
  %719 = phi %struct.FX_TPO** [ %687, %713 ], [ %766, %793 ]
  %720 = phi i32 [ %688, %713 ], [ %783, %793 ]
  %721 = inttoptr i64 %716 to %struct.FX_TPO*
  %722 = inttoptr i64 %715 to %struct.FX_TPO*
  %723 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %721, i64 0, i32 1
  %724 = load i32, i32* %723, align 4
  %725 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %722, i64 0, i32 1
  %726 = load i32, i32* %725, align 4
  %727 = icmp slt i32 %724, %726
  br i1 %727, label %735, label %730

728:                                              ; preds = %748
  %729 = inttoptr i64 %749 to %struct.FX_TPO*
  br label %730

730:                                              ; preds = %728, %714
  %731 = phi i64 [ %716, %714 ], [ %749, %728 ]
  %732 = phi %struct.FX_TPO** [ %717, %714 ], [ %750, %728 ]
  %733 = phi %struct.FX_TPO* [ %721, %714 ], [ %729, %728 ]
  %734 = load %struct.FX_TPO*, %struct.FX_TPO** %719, align 8
  br label %755

735:                                              ; preds = %714, %748
  %736 = phi %struct.FX_TPO* [ %751, %748 ], [ %721, %714 ]
  %737 = phi %struct.FX_TPO** [ %750, %748 ], [ %717, %714 ]
  %738 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %736, i64 1
  %739 = ptrtoint %struct.FX_TPO* %738 to i64
  %740 = bitcast %struct.FX_TPO** %737 to i64*
  %741 = load i64, i64* %740, align 8
  %742 = sub i64 %739, %741
  %743 = icmp eq i64 %742, 4096
  br i1 %743, label %744, label %748

744:                                              ; preds = %735
  %745 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %737, i64 1
  %746 = bitcast %struct.FX_TPO** %745 to i64*
  %747 = load i64, i64* %746, align 8
  br label %748

748:                                              ; preds = %735, %744
  %749 = phi i64 [ %747, %744 ], [ %739, %735 ]
  %750 = phi %struct.FX_TPO** [ %745, %744 ], [ %737, %735 ]
  %751 = inttoptr i64 %749 to %struct.FX_TPO*
  %752 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %751, i64 0, i32 1
  %753 = load i32, i32* %752, align 4
  %754 = icmp slt i32 %753, %726
  br i1 %754, label %735, label %728

755:                                              ; preds = %730, %764
  %756 = phi %struct.FX_TPO* [ %765, %764 ], [ %734, %730 ]
  %757 = phi %struct.FX_TPO* [ %768, %764 ], [ %718, %730 ]
  %758 = phi %struct.FX_TPO** [ %766, %764 ], [ %719, %730 ]
  %759 = icmp eq %struct.FX_TPO* %757, %756
  br i1 %759, label %760, label %764

760:                                              ; preds = %755
  %761 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %758, i64 -1
  %762 = load %struct.FX_TPO*, %struct.FX_TPO** %761, align 8
  %763 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %762, i64 512
  br label %764

764:                                              ; preds = %755, %760
  %765 = phi %struct.FX_TPO* [ %762, %760 ], [ %756, %755 ]
  %766 = phi %struct.FX_TPO** [ %761, %760 ], [ %758, %755 ]
  %767 = phi %struct.FX_TPO* [ %763, %760 ], [ %757, %755 ]
  %768 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %767, i64 -1
  %769 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %767, i64 -1, i32 1
  %770 = load i32, i32* %769, align 4
  %771 = icmp slt i32 %770, %726
  br i1 %771, label %772, label %755

772:                                              ; preds = %764
  %773 = icmp ult %struct.FX_TPO** %766, %732
  br i1 %773, label %800, label %774

774:                                              ; preds = %772
  %775 = icmp eq %struct.FX_TPO** %766, %732
  %776 = icmp ult %struct.FX_TPO* %768, %733
  %777 = and i1 %775, %776
  br i1 %777, label %800, label %778

778:                                              ; preds = %774
  %779 = inttoptr i64 %731 to i64*
  %780 = load i64, i64* %779, align 4
  %781 = bitcast %struct.FX_TPO* %768 to i64*
  %782 = load i64, i64* %781, align 4
  store i64 %782, i64* %779, align 4
  store i64 %780, i64* %781, align 4
  %783 = add i32 %720, 1
  %784 = icmp eq %struct.FX_TPO* %733, %722
  %785 = ptrtoint %struct.FX_TPO* %768 to i64
  %786 = select i1 %784, i64 %785, i64 %715
  %787 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %733, i64 1
  %788 = ptrtoint %struct.FX_TPO* %787 to i64
  %789 = bitcast %struct.FX_TPO** %732 to i64*
  %790 = load i64, i64* %789, align 8
  %791 = sub i64 %788, %790
  %792 = icmp eq i64 %791, 4096
  br i1 %792, label %796, label %793

793:                                              ; preds = %778, %796
  %794 = phi i64 [ %788, %778 ], [ %799, %796 ]
  %795 = phi %struct.FX_TPO** [ %732, %778 ], [ %797, %796 ]
  br label %714

796:                                              ; preds = %778
  %797 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %732, i64 1
  %798 = bitcast %struct.FX_TPO** %797 to i64*
  %799 = load i64, i64* %798, align 8
  br label %793

800:                                              ; preds = %772, %774
  %801 = inttoptr i64 %715 to %struct.FX_TPO*
  %802 = inttoptr i64 %731 to %struct.FX_TPO*
  br label %803

803:                                              ; preds = %800, %708
  %804 = phi %struct.FX_TPO* [ %801, %800 ], [ %494, %708 ]
  %805 = phi %struct.FX_TPO* [ %802, %800 ], [ %710, %708 ]
  %806 = phi i64 [ %715, %800 ], [ %354, %708 ]
  %807 = phi i64 [ %731, %800 ], [ %705, %708 ]
  %808 = phi %struct.FX_TPO** [ %732, %800 ], [ %706, %708 ]
  %809 = phi i32 [ %720, %800 ], [ %688, %708 ]
  %810 = icmp eq %struct.FX_TPO* %805, %804
  br i1 %810, label %823, label %811

811:                                              ; preds = %803
  %812 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %804, i64 0, i32 1
  %813 = load i32, i32* %812, align 4
  %814 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %805, i64 0, i32 1
  %815 = load i32, i32* %814, align 4
  %816 = icmp slt i32 %813, %815
  br i1 %816, label %817, label %823

817:                                              ; preds = %811
  %818 = inttoptr i64 %807 to i64*
  %819 = load i64, i64* %818, align 4
  %820 = inttoptr i64 %806 to i64*
  %821 = load i64, i64* %820, align 4
  store i64 %821, i64* %818, align 4
  store i64 %819, i64* %820, align 4
  %822 = add i32 %809, 1
  br label %823

823:                                              ; preds = %803, %817, %811
  %824 = phi i32 [ %822, %817 ], [ %809, %811 ], [ %809, %803 ]
  %825 = icmp eq i32 %824, 0
  br i1 %825, label %826, label %864

826:                                              ; preds = %823
  %827 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEbT0_SA_T_(%struct.FX_TPO** %41, %struct.FX_TPO* %693, %struct.FX_TPO** %808, %struct.FX_TPO* %805, %"struct.std::__1::__less.134"* dereferenceable(1) %4)
  %828 = bitcast %struct.FX_TPO** %808 to i64*
  %829 = load i64, i64* %828, align 8
  %830 = sub i64 %807, %829
  %831 = ashr exact i64 %830, 3
  %832 = add nsw i64 %831, 1
  %833 = icmp sgt i64 %830, -8
  br i1 %833, label %834, label %840

834:                                              ; preds = %826
  %835 = lshr i64 %832, 9
  %836 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %808, i64 %835
  %837 = load %struct.FX_TPO*, %struct.FX_TPO** %836, align 8
  %838 = and i64 %832, 511
  %839 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %837, i64 %838
  br label %848

840:                                              ; preds = %826
  %841 = sub nsw i64 510, %831
  %842 = sdiv i64 %841, -512
  %843 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %808, i64 %842
  %844 = load %struct.FX_TPO*, %struct.FX_TPO** %843, align 8
  %845 = srem i64 %841, 512
  %846 = sub nuw nsw i64 511, %845
  %847 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %844, i64 %846
  br label %848

848:                                              ; preds = %834, %840
  %849 = phi %struct.FX_TPO* [ %839, %834 ], [ %847, %840 ]
  %850 = phi %struct.FX_TPO** [ %836, %834 ], [ %843, %840 ]
  %851 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEbT0_SA_T_(%struct.FX_TPO** %850, %struct.FX_TPO* %849, %struct.FX_TPO** %26, %struct.FX_TPO* %694, %"struct.std::__1::__less.134"* dereferenceable(1) %4)
  br i1 %851, label %852, label %853

852:                                              ; preds = %848
  br i1 %827, label %933, label %16

853:                                              ; preds = %848
  br i1 %827, label %854, label %864

854:                                              ; preds = %853
  %855 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %805, i64 1
  %856 = ptrtoint %struct.FX_TPO* %855 to i64
  %857 = load i64, i64* %828, align 8
  %858 = sub i64 %856, %857
  %859 = icmp eq i64 %858, 4096
  br i1 %859, label %860, label %16

860:                                              ; preds = %854
  %861 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %808, i64 1
  %862 = bitcast %struct.FX_TPO** %861 to i64*
  %863 = load i64, i64* %862, align 8
  br label %16

864:                                              ; preds = %853, %823
  %865 = icmp eq %struct.FX_TPO* %805, %693
  br i1 %865, label %879, label %866

866:                                              ; preds = %864
  %867 = ptrtoint %struct.FX_TPO** %808 to i64
  %868 = sub i64 %867, %691
  %869 = shl i64 %868, 6
  %870 = bitcast %struct.FX_TPO** %808 to i64*
  %871 = load i64, i64* %870, align 8
  %872 = sub i64 %807, %871
  %873 = ashr exact i64 %872, 3
  %874 = add nsw i64 %873, %869
  %875 = load i64, i64* %689, align 8
  %876 = sub i64 %40, %875
  %877 = ashr exact i64 %876, 3
  %878 = sub i64 %874, %877
  br label %879

879:                                              ; preds = %864, %866
  %880 = phi i64 [ %878, %866 ], [ 0, %864 ]
  %881 = icmp eq %struct.FX_TPO* %805, %694
  br i1 %881, label %895, label %882

882:                                              ; preds = %879
  %883 = ptrtoint %struct.FX_TPO** %808 to i64
  %884 = sub i64 %692, %883
  %885 = shl i64 %884, 6
  %886 = load i64, i64* %690, align 8
  %887 = sub i64 %30, %886
  %888 = ashr exact i64 %887, 3
  %889 = add nsw i64 %888, %885
  %890 = bitcast %struct.FX_TPO** %808 to i64*
  %891 = load i64, i64* %890, align 8
  %892 = sub i64 %807, %891
  %893 = ashr exact i64 %892, 3
  %894 = sub i64 %889, %893
  br label %895

895:                                              ; preds = %879, %882
  %896 = phi i64 [ %894, %882 ], [ 0, %879 ]
  %897 = icmp slt i64 %880, %896
  br i1 %897, label %898, label %909

898:                                              ; preds = %895
  tail call void @_ZNSt3__16__sortIRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEvT0_SA_T_(%struct.FX_TPO** %41, %struct.FX_TPO* %693, %struct.FX_TPO** %808, %struct.FX_TPO* %805, %"struct.std::__1::__less.134"* dereferenceable(1) %4)
  %899 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %805, i64 1
  %900 = ptrtoint %struct.FX_TPO* %899 to i64
  %901 = bitcast %struct.FX_TPO** %808 to i64*
  %902 = load i64, i64* %901, align 8
  %903 = sub i64 %900, %902
  %904 = icmp eq i64 %903, 4096
  br i1 %904, label %905, label %16

905:                                              ; preds = %898
  %906 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %808, i64 1
  %907 = bitcast %struct.FX_TPO** %906 to i64*
  %908 = load i64, i64* %907, align 8
  br label %16

909:                                              ; preds = %895
  %910 = bitcast %struct.FX_TPO** %808 to i64*
  %911 = load i64, i64* %910, align 8
  %912 = sub i64 %807, %911
  %913 = ashr exact i64 %912, 3
  %914 = add nsw i64 %913, 1
  %915 = icmp sgt i64 %912, -8
  br i1 %915, label %916, label %922

916:                                              ; preds = %909
  %917 = lshr i64 %914, 9
  %918 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %808, i64 %917
  %919 = load %struct.FX_TPO*, %struct.FX_TPO** %918, align 8
  %920 = and i64 %914, 511
  %921 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %919, i64 %920
  br label %930

922:                                              ; preds = %909
  %923 = sub nsw i64 510, %913
  %924 = sdiv i64 %923, -512
  %925 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %808, i64 %924
  %926 = load %struct.FX_TPO*, %struct.FX_TPO** %925, align 8
  %927 = srem i64 %923, 512
  %928 = sub nuw nsw i64 511, %927
  %929 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %926, i64 %928
  br label %930

930:                                              ; preds = %916, %922
  %931 = phi %struct.FX_TPO* [ %921, %916 ], [ %929, %922 ]
  %932 = phi %struct.FX_TPO** [ %918, %916 ], [ %925, %922 ]
  tail call void @_ZNSt3__16__sortIRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEvT0_SA_T_(%struct.FX_TPO** %932, %struct.FX_TPO* %931, %struct.FX_TPO** %26, %struct.FX_TPO* %694, %"struct.std::__1::__less.134"* dereferenceable(1) %4)
  br label %16

933:                                              ; preds = %852, %16, %543, %38, %38, %592, %35, %587, %5, %141, %134, %131, %124, %116, %115, %64, %71, %193, %316, %319
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort4IRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEjT0_SA_SA_SA_T_(%struct.FX_TPO**, %struct.FX_TPO*, %struct.FX_TPO**, %struct.FX_TPO*, %struct.FX_TPO**, %struct.FX_TPO*, %"class.std::__1::__deque_iterator"* byval(%"class.std::__1::__deque_iterator") align 8, %"struct.std::__1::__less.134"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %9 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %3, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %10, %12
  %14 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %5, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 %15, %10
  br i1 %13, label %33, label %17

17:                                               ; preds = %8
  br i1 %16, label %18, label %51

18:                                               ; preds = %17
  %19 = bitcast %struct.FX_TPO* %3 to i64*
  %20 = load i64, i64* %19, align 4
  %21 = bitcast %struct.FX_TPO* %5 to i64*
  %22 = load i64, i64* %21, align 4
  store i64 %22, i64* %19, align 4
  store i64 %20, i64* %21, align 4
  %23 = load i32, i32* %9, align 4
  %24 = load i32, i32* %11, align 4
  %25 = icmp slt i32 %23, %24
  %26 = lshr i64 %20, 32
  %27 = trunc i64 %26 to i32
  br i1 %25, label %28, label %51

28:                                               ; preds = %18
  %29 = bitcast %struct.FX_TPO* %1 to i64*
  %30 = load i64, i64* %29, align 4
  %31 = load i64, i64* %19, align 4
  store i64 %31, i64* %29, align 4
  store i64 %30, i64* %19, align 4
  %32 = load i32, i32* %14, align 4
  br label %51

33:                                               ; preds = %8
  %34 = bitcast %struct.FX_TPO* %1 to i64*
  %35 = load i64, i64* %34, align 4
  br i1 %16, label %36, label %41

36:                                               ; preds = %33
  %37 = bitcast %struct.FX_TPO* %5 to i64*
  %38 = load i64, i64* %37, align 4
  store i64 %38, i64* %34, align 4
  store i64 %35, i64* %37, align 4
  %39 = lshr i64 %35, 32
  %40 = trunc i64 %39 to i32
  br label %51

41:                                               ; preds = %33
  %42 = bitcast %struct.FX_TPO* %3 to i64*
  %43 = load i64, i64* %42, align 4
  store i64 %43, i64* %34, align 4
  store i64 %35, i64* %42, align 4
  %44 = load i32, i32* %14, align 4
  %45 = lshr i64 %35, 32
  %46 = trunc i64 %45 to i32
  %47 = icmp slt i32 %44, %46
  br i1 %47, label %48, label %51

48:                                               ; preds = %41
  %49 = bitcast %struct.FX_TPO* %5 to i64*
  %50 = load i64, i64* %49, align 4
  store i64 %50, i64* %42, align 4
  store i64 %35, i64* %49, align 4
  br label %51

51:                                               ; preds = %17, %18, %28, %36, %41, %48
  %52 = phi i32 [ %40, %36 ], [ %15, %17 ], [ %32, %28 ], [ %27, %18 ], [ %46, %48 ], [ %44, %41 ]
  %53 = phi i32 [ 1, %36 ], [ 0, %17 ], [ 2, %28 ], [ 1, %18 ], [ 2, %48 ], [ 1, %41 ]
  %54 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %6, i64 0, i32 1
  %55 = load %struct.FX_TPO*, %struct.FX_TPO** %54, align 8
  %56 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %55, i64 0, i32 1
  %57 = load i32, i32* %56, align 4
  %58 = icmp slt i32 %57, %52
  br i1 %58, label %59, label %81

59:                                               ; preds = %51
  %60 = bitcast %struct.FX_TPO* %5 to i64*
  %61 = load i64, i64* %60, align 4
  %62 = bitcast %struct.FX_TPO* %55 to i64*
  %63 = load i64, i64* %62, align 4
  store i64 %63, i64* %60, align 4
  store i64 %61, i64* %62, align 4
  %64 = add nuw nsw i32 %53, 1
  %65 = load i32, i32* %14, align 4
  %66 = load i32, i32* %9, align 4
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %68, label %81

68:                                               ; preds = %59
  %69 = bitcast %struct.FX_TPO* %3 to i64*
  %70 = load i64, i64* %69, align 4
  %71 = load i64, i64* %60, align 4
  store i64 %71, i64* %69, align 4
  store i64 %70, i64* %60, align 4
  %72 = add nuw nsw i32 %53, 2
  %73 = load i32, i32* %9, align 4
  %74 = load i32, i32* %11, align 4
  %75 = icmp slt i32 %73, %74
  br i1 %75, label %76, label %81

76:                                               ; preds = %68
  %77 = bitcast %struct.FX_TPO* %1 to i64*
  %78 = load i64, i64* %77, align 4
  %79 = load i64, i64* %69, align 4
  store i64 %79, i64* %77, align 4
  store i64 %78, i64* %69, align 4
  %80 = add nuw nsw i32 %53, 3
  br label %81

81:                                               ; preds = %59, %76, %68, %51
  %82 = phi i32 [ %80, %76 ], [ %72, %68 ], [ %64, %59 ], [ %53, %51 ]
  ret i32 %82
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__118__insertion_sort_3IRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEvT0_SA_T_(%struct.FX_TPO**, %struct.FX_TPO*, %struct.FX_TPO**, %struct.FX_TPO*, %"struct.std::__1::__less.134"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %6 = ptrtoint %struct.FX_TPO* %1 to i64
  %7 = bitcast %struct.FX_TPO** %0 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = ashr exact i64 %9, 3
  %11 = add nsw i64 %10, 2
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %23, label %13

13:                                               ; preds = %5
  %14 = sub nsw i64 509, %10
  %15 = sdiv i64 %14, -512
  %16 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %15
  %17 = load %struct.FX_TPO*, %struct.FX_TPO** %16, align 8
  %18 = srem i64 %14, 512
  %19 = sub nuw nsw i64 511, %18
  %20 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %17, i64 %19
  %21 = ptrtoint %struct.FX_TPO* %20 to i64
  %22 = sub nsw i64 510, %10
  br label %38

23:                                               ; preds = %5
  %24 = lshr i64 %11, 9
  %25 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %24
  %26 = load %struct.FX_TPO*, %struct.FX_TPO** %25, align 8
  %27 = and i64 %11, 511
  %28 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %26, i64 %27
  %29 = ptrtoint %struct.FX_TPO* %28 to i64
  %30 = add nsw i64 %10, 1
  %31 = icmp sgt i64 %9, -8
  br i1 %31, label %32, label %38

32:                                               ; preds = %23
  %33 = lshr i64 %30, 9
  %34 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %33
  %35 = load %struct.FX_TPO*, %struct.FX_TPO** %34, align 8
  %36 = and i64 %30, 511
  %37 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %35, i64 %36
  br label %49

38:                                               ; preds = %13, %23
  %39 = phi i64 [ %22, %13 ], [ 511, %23 ]
  %40 = phi %struct.FX_TPO* [ %20, %13 ], [ %28, %23 ]
  %41 = phi %struct.FX_TPO** [ %16, %13 ], [ %25, %23 ]
  %42 = phi i64 [ %21, %13 ], [ %29, %23 ]
  %43 = sdiv i64 %39, -512
  %44 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %43
  %45 = load %struct.FX_TPO*, %struct.FX_TPO** %44, align 8
  %46 = and i64 %39, 511
  %47 = xor i64 %46, 511
  %48 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %45, i64 %47
  br label %49

49:                                               ; preds = %32, %38
  %50 = phi %struct.FX_TPO* [ %28, %32 ], [ %40, %38 ]
  %51 = phi %struct.FX_TPO** [ %25, %32 ], [ %41, %38 ]
  %52 = phi i64 [ %29, %32 ], [ %42, %38 ]
  %53 = phi %struct.FX_TPO* [ %37, %32 ], [ %48, %38 ]
  %54 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %53, i64 0, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %1, i64 0, i32 1
  %57 = load i32, i32* %56, align 4
  %58 = icmp slt i32 %55, %57
  %59 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %50, i64 0, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = icmp slt i32 %60, %55
  br i1 %58, label %75, label %62

62:                                               ; preds = %49
  br i1 %61, label %63, label %91

63:                                               ; preds = %62
  %64 = bitcast %struct.FX_TPO* %53 to i64*
  %65 = load i64, i64* %64, align 4
  %66 = bitcast %struct.FX_TPO* %50 to i64*
  %67 = load i64, i64* %66, align 4
  store i64 %67, i64* %64, align 4
  store i64 %65, i64* %66, align 4
  %68 = load i32, i32* %54, align 4
  %69 = load i32, i32* %56, align 4
  %70 = icmp slt i32 %68, %69
  br i1 %70, label %71, label %91

71:                                               ; preds = %63
  %72 = bitcast %struct.FX_TPO* %1 to i64*
  %73 = load i64, i64* %72, align 4
  %74 = load i64, i64* %64, align 4
  store i64 %74, i64* %72, align 4
  store i64 %73, i64* %64, align 4
  br label %91

75:                                               ; preds = %49
  %76 = bitcast %struct.FX_TPO* %1 to i64*
  %77 = load i64, i64* %76, align 4
  br i1 %61, label %78, label %81

78:                                               ; preds = %75
  %79 = bitcast %struct.FX_TPO* %50 to i64*
  %80 = load i64, i64* %79, align 4
  store i64 %80, i64* %76, align 4
  store i64 %77, i64* %79, align 4
  br label %91

81:                                               ; preds = %75
  %82 = bitcast %struct.FX_TPO* %53 to i64*
  %83 = load i64, i64* %82, align 4
  store i64 %83, i64* %76, align 4
  store i64 %77, i64* %82, align 4
  %84 = load i32, i32* %59, align 4
  %85 = lshr i64 %77, 32
  %86 = trunc i64 %85 to i32
  %87 = icmp slt i32 %84, %86
  br i1 %87, label %88, label %91

88:                                               ; preds = %81
  %89 = bitcast %struct.FX_TPO* %50 to i64*
  %90 = load i64, i64* %89, align 4
  store i64 %90, i64* %82, align 4
  store i64 %77, i64* %89, align 4
  br label %91

91:                                               ; preds = %62, %63, %71, %78, %81, %88
  %92 = bitcast %struct.FX_TPO** %51 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %52, %93
  %95 = ashr exact i64 %94, 3
  %96 = add nsw i64 %95, 1
  %97 = icmp sgt i64 %94, -8
  br i1 %97, label %98, label %104

98:                                               ; preds = %91
  %99 = lshr i64 %96, 9
  %100 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %51, i64 %99
  %101 = load %struct.FX_TPO*, %struct.FX_TPO** %100, align 8
  %102 = and i64 %96, 511
  %103 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %101, i64 %102
  br label %112

104:                                              ; preds = %91
  %105 = sub nsw i64 510, %95
  %106 = sdiv i64 %105, -512
  %107 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %51, i64 %106
  %108 = load %struct.FX_TPO*, %struct.FX_TPO** %107, align 8
  %109 = srem i64 %105, 512
  %110 = sub nuw nsw i64 511, %109
  %111 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %108, i64 %110
  br label %112

112:                                              ; preds = %98, %104
  %113 = phi %struct.FX_TPO* [ %103, %98 ], [ %111, %104 ]
  %114 = phi %struct.FX_TPO** [ %100, %98 ], [ %107, %104 ]
  %115 = icmp eq %struct.FX_TPO* %113, %3
  br i1 %115, label %118, label %116

116:                                              ; preds = %112
  %117 = ptrtoint %struct.FX_TPO* %113 to i64
  br label %119

118:                                              ; preds = %173, %112
  ret void

119:                                              ; preds = %116, %173
  %120 = phi %struct.FX_TPO* [ %176, %173 ], [ %113, %116 ]
  %121 = phi %struct.FX_TPO** [ %175, %173 ], [ %114, %116 ]
  %122 = phi i64 [ %174, %173 ], [ %117, %116 ]
  %123 = phi %struct.FX_TPO** [ %121, %173 ], [ %51, %116 ]
  %124 = phi i64 [ %122, %173 ], [ %52, %116 ]
  %125 = inttoptr i64 %124 to %struct.FX_TPO*
  %126 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %120, i64 0, i32 1
  %127 = load i32, i32* %126, align 4
  %128 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %125, i64 0, i32 1
  %129 = load i32, i32* %128, align 4
  %130 = icmp slt i32 %127, %129
  br i1 %130, label %131, label %162

131:                                              ; preds = %119
  %132 = inttoptr i64 %122 to i64*
  %133 = load i64, i64* %132, align 4
  %134 = lshr i64 %133, 32
  %135 = trunc i64 %134 to i32
  br label %136

136:                                              ; preds = %152, %131
  %137 = phi i64 [ %122, %131 ], [ %143, %152 ]
  %138 = phi %struct.FX_TPO* [ %125, %131 ], [ %155, %152 ]
  %139 = phi %struct.FX_TPO** [ %123, %131 ], [ %153, %152 ]
  %140 = bitcast %struct.FX_TPO* %138 to i64*
  %141 = inttoptr i64 %137 to i64*
  %142 = load i64, i64* %140, align 4
  store i64 %142, i64* %141, align 4
  %143 = ptrtoint %struct.FX_TPO* %138 to i64
  %144 = icmp eq %struct.FX_TPO* %138, %1
  br i1 %144, label %159, label %145

145:                                              ; preds = %136
  %146 = load %struct.FX_TPO*, %struct.FX_TPO** %139, align 8
  %147 = icmp eq %struct.FX_TPO* %138, %146
  br i1 %147, label %148, label %152

148:                                              ; preds = %145
  %149 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %139, i64 -1
  %150 = load %struct.FX_TPO*, %struct.FX_TPO** %149, align 8
  %151 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %150, i64 512
  br label %152

152:                                              ; preds = %145, %148
  %153 = phi %struct.FX_TPO** [ %149, %148 ], [ %139, %145 ]
  %154 = phi %struct.FX_TPO* [ %151, %148 ], [ %138, %145 ]
  %155 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %154, i64 -1
  %156 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %154, i64 -1, i32 1
  %157 = load i32, i32* %156, align 4
  %158 = icmp sgt i32 %157, %135
  br i1 %158, label %136, label %159

159:                                              ; preds = %136, %152
  %160 = phi %struct.FX_TPO* [ %138, %152 ], [ %1, %136 ]
  %161 = bitcast %struct.FX_TPO* %160 to i64*
  store i64 %133, i64* %161, align 4
  br label %162

162:                                              ; preds = %159, %119
  %163 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %120, i64 1
  %164 = ptrtoint %struct.FX_TPO* %163 to i64
  %165 = bitcast %struct.FX_TPO** %121 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = sub i64 %164, %166
  %168 = icmp eq i64 %167, 4096
  br i1 %168, label %169, label %173

169:                                              ; preds = %162
  %170 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %121, i64 1
  %171 = bitcast %struct.FX_TPO** %170 to i64*
  %172 = load i64, i64* %171, align 8
  br label %173

173:                                              ; preds = %162, %169
  %174 = phi i64 [ %172, %169 ], [ %164, %162 ]
  %175 = phi %struct.FX_TPO** [ %170, %169 ], [ %121, %162 ]
  %176 = inttoptr i64 %174 to %struct.FX_TPO*
  %177 = icmp eq %struct.FX_TPO* %176, %3
  br i1 %177, label %118, label %119
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEbT0_SA_T_(%struct.FX_TPO**, %struct.FX_TPO*, %struct.FX_TPO**, %struct.FX_TPO*, %"struct.std::__1::__less.134"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %6 = alloca %"class.std::__1::__deque_iterator", align 8
  %7 = alloca %"class.std::__1::__deque_iterator", align 8
  %8 = icmp eq %struct.FX_TPO* %3, %1
  br i1 %8, label %462, label %9

9:                                                ; preds = %5
  %10 = ptrtoint %struct.FX_TPO* %1 to i64
  %11 = ptrtoint %struct.FX_TPO* %3 to i64
  %12 = ptrtoint %struct.FX_TPO** %2 to i64
  %13 = ptrtoint %struct.FX_TPO** %0 to i64
  %14 = sub i64 %12, %13
  %15 = shl i64 %14, 6
  %16 = bitcast %struct.FX_TPO** %2 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %11, %17
  %19 = ashr exact i64 %18, 3
  %20 = add nsw i64 %19, %15
  %21 = bitcast %struct.FX_TPO** %0 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %10, %22
  %24 = ashr exact i64 %23, 3
  %25 = sub i64 %20, %24
  %26 = inttoptr i64 %17 to %struct.FX_TPO*
  switch i64 %25, label %275 [
    i64 0, label %462
    i64 1, label %462
    i64 2, label %27
    i64 3, label %46
    i64 4, label %110
    i64 5, label %163
  ]

27:                                               ; preds = %9
  %28 = icmp eq %struct.FX_TPO* %26, %3
  br i1 %28, label %29, label %33

29:                                               ; preds = %27
  %30 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %2, i64 -1
  %31 = load %struct.FX_TPO*, %struct.FX_TPO** %30, align 8
  %32 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %31, i64 512
  br label %33

33:                                               ; preds = %27, %29
  %34 = phi %struct.FX_TPO* [ %32, %29 ], [ %3, %27 ]
  %35 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %34, i64 -1, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %1, i64 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %36, %38
  br i1 %39, label %40, label %462

40:                                               ; preds = %33
  %41 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %34, i64 -1
  %42 = bitcast %struct.FX_TPO* %1 to i64*
  %43 = load i64, i64* %42, align 4
  %44 = bitcast %struct.FX_TPO* %41 to i64*
  %45 = load i64, i64* %44, align 4
  store i64 %45, i64* %42, align 4
  store i64 %43, i64* %44, align 4
  br label %462

46:                                               ; preds = %9
  %47 = add nsw i64 %24, 1
  %48 = icmp sgt i64 %23, -8
  br i1 %48, label %49, label %55

49:                                               ; preds = %46
  %50 = lshr i64 %47, 9
  %51 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %50
  %52 = load %struct.FX_TPO*, %struct.FX_TPO** %51, align 8
  %53 = and i64 %47, 511
  %54 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %52, i64 %53
  br label %63

55:                                               ; preds = %46
  %56 = sub nsw i64 510, %24
  %57 = sdiv i64 %56, -512
  %58 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %57
  %59 = load %struct.FX_TPO*, %struct.FX_TPO** %58, align 8
  %60 = srem i64 %56, 512
  %61 = sub nuw nsw i64 511, %60
  %62 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %59, i64 %61
  br label %63

63:                                               ; preds = %49, %55
  %64 = phi %struct.FX_TPO* [ %54, %49 ], [ %62, %55 ]
  %65 = icmp eq %struct.FX_TPO* %26, %3
  br i1 %65, label %66, label %70

66:                                               ; preds = %63
  %67 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %2, i64 -1
  %68 = load %struct.FX_TPO*, %struct.FX_TPO** %67, align 8
  %69 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %68, i64 512
  br label %70

70:                                               ; preds = %63, %66
  %71 = phi %struct.FX_TPO* [ %69, %66 ], [ %3, %63 ]
  %72 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %71, i64 -1
  %73 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %64, i64 0, i32 1
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %1, i64 0, i32 1
  %76 = load i32, i32* %75, align 4
  %77 = icmp slt i32 %74, %76
  %78 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %71, i64 -1, i32 1
  %79 = load i32, i32* %78, align 4
  %80 = icmp slt i32 %79, %74
  br i1 %77, label %94, label %81

81:                                               ; preds = %70
  br i1 %80, label %82, label %462

82:                                               ; preds = %81
  %83 = bitcast %struct.FX_TPO* %64 to i64*
  %84 = load i64, i64* %83, align 4
  %85 = bitcast %struct.FX_TPO* %72 to i64*
  %86 = load i64, i64* %85, align 4
  store i64 %86, i64* %83, align 4
  store i64 %84, i64* %85, align 4
  %87 = load i32, i32* %73, align 4
  %88 = load i32, i32* %75, align 4
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %90, label %462

90:                                               ; preds = %82
  %91 = bitcast %struct.FX_TPO* %1 to i64*
  %92 = load i64, i64* %91, align 4
  %93 = load i64, i64* %83, align 4
  store i64 %93, i64* %91, align 4
  store i64 %92, i64* %83, align 4
  br label %462

94:                                               ; preds = %70
  %95 = bitcast %struct.FX_TPO* %1 to i64*
  %96 = load i64, i64* %95, align 4
  br i1 %80, label %97, label %100

97:                                               ; preds = %94
  %98 = bitcast %struct.FX_TPO* %72 to i64*
  %99 = load i64, i64* %98, align 4
  store i64 %99, i64* %95, align 4
  store i64 %96, i64* %98, align 4
  br label %462

100:                                              ; preds = %94
  %101 = bitcast %struct.FX_TPO* %64 to i64*
  %102 = load i64, i64* %101, align 4
  store i64 %102, i64* %95, align 4
  store i64 %96, i64* %101, align 4
  %103 = load i32, i32* %78, align 4
  %104 = lshr i64 %96, 32
  %105 = trunc i64 %104 to i32
  %106 = icmp slt i32 %103, %105
  br i1 %106, label %107, label %462

107:                                              ; preds = %100
  %108 = bitcast %struct.FX_TPO* %72 to i64*
  %109 = load i64, i64* %108, align 4
  store i64 %109, i64* %101, align 4
  store i64 %96, i64* %108, align 4
  br label %462

110:                                              ; preds = %9
  %111 = add nsw i64 %24, 1
  %112 = icmp sgt i64 %23, -8
  br i1 %112, label %113, label %120

113:                                              ; preds = %110
  %114 = lshr i64 %111, 9
  %115 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %114
  %116 = load %struct.FX_TPO*, %struct.FX_TPO** %115, align 8
  %117 = and i64 %111, 511
  %118 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %116, i64 %117
  %119 = add nuw nsw i64 %24, 2
  br label %129

120:                                              ; preds = %110
  %121 = sub nsw i64 510, %24
  %122 = sdiv i64 %121, -512
  %123 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %122
  %124 = load %struct.FX_TPO*, %struct.FX_TPO** %123, align 8
  %125 = srem i64 %121, 512
  %126 = sub nuw nsw i64 511, %125
  %127 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %124, i64 %126
  %128 = icmp sgt i64 %23, -16
  br i1 %128, label %129, label %138

129:                                              ; preds = %113, %120
  %130 = phi i64 [ %119, %113 ], [ 1, %120 ]
  %131 = phi %struct.FX_TPO* [ %118, %113 ], [ %127, %120 ]
  %132 = phi %struct.FX_TPO** [ %115, %113 ], [ %123, %120 ]
  %133 = lshr i64 %130, 9
  %134 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %133
  %135 = load %struct.FX_TPO*, %struct.FX_TPO** %134, align 8
  %136 = and i64 %130, 511
  %137 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %135, i64 %136
  br label %146

138:                                              ; preds = %120
  %139 = sub nsw i64 509, %24
  %140 = sdiv i64 %139, -512
  %141 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %140
  %142 = load %struct.FX_TPO*, %struct.FX_TPO** %141, align 8
  %143 = srem i64 %139, 512
  %144 = sub nuw nsw i64 511, %143
  %145 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %142, i64 %144
  br label %146

146:                                              ; preds = %129, %138
  %147 = phi %struct.FX_TPO* [ %131, %129 ], [ %127, %138 ]
  %148 = phi %struct.FX_TPO** [ %132, %129 ], [ %123, %138 ]
  %149 = phi %struct.FX_TPO* [ %137, %129 ], [ %145, %138 ]
  %150 = phi %struct.FX_TPO** [ %134, %129 ], [ %141, %138 ]
  %151 = icmp eq %struct.FX_TPO* %26, %3
  br i1 %151, label %152, label %156

152:                                              ; preds = %146
  %153 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %2, i64 -1
  %154 = load %struct.FX_TPO*, %struct.FX_TPO** %153, align 8
  %155 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %154, i64 512
  br label %156

156:                                              ; preds = %146, %152
  %157 = phi %struct.FX_TPO** [ %153, %152 ], [ %2, %146 ]
  %158 = phi %struct.FX_TPO* [ %155, %152 ], [ %3, %146 ]
  %159 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %158, i64 -1
  %160 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %7, i64 0, i32 0
  store %struct.FX_TPO** %157, %struct.FX_TPO*** %160, align 8
  %161 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %7, i64 0, i32 1
  store %struct.FX_TPO* %159, %struct.FX_TPO** %161, align 8
  %162 = tail call i32 @_ZNSt3__17__sort4IRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEjT0_SA_SA_SA_T_(%struct.FX_TPO** %0, %struct.FX_TPO* %1, %struct.FX_TPO** %148, %struct.FX_TPO* %147, %struct.FX_TPO** %150, %struct.FX_TPO* %149, %"class.std::__1::__deque_iterator"* nonnull byval(%"class.std::__1::__deque_iterator") align 8 %7, %"struct.std::__1::__less.134"* dereferenceable(1) %4)
  br label %462

163:                                              ; preds = %9
  %164 = add nsw i64 %24, 1
  %165 = icmp sgt i64 %23, -8
  br i1 %165, label %166, label %173

166:                                              ; preds = %163
  %167 = lshr i64 %164, 9
  %168 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %167
  %169 = load %struct.FX_TPO*, %struct.FX_TPO** %168, align 8
  %170 = and i64 %164, 511
  %171 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %169, i64 %170
  %172 = add nuw nsw i64 %24, 2
  br label %182

173:                                              ; preds = %163
  %174 = sub nsw i64 510, %24
  %175 = sdiv i64 %174, -512
  %176 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %175
  %177 = load %struct.FX_TPO*, %struct.FX_TPO** %176, align 8
  %178 = srem i64 %174, 512
  %179 = sub nuw nsw i64 511, %178
  %180 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %177, i64 %179
  %181 = icmp sgt i64 %23, -16
  br i1 %181, label %182, label %192

182:                                              ; preds = %173, %166
  %183 = phi i64 [ %172, %166 ], [ 1, %173 ]
  %184 = phi %struct.FX_TPO* [ %171, %166 ], [ %180, %173 ]
  %185 = phi %struct.FX_TPO** [ %168, %166 ], [ %176, %173 ]
  %186 = lshr i64 %183, 9
  %187 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %186
  %188 = load %struct.FX_TPO*, %struct.FX_TPO** %187, align 8
  %189 = and i64 %183, 511
  %190 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %188, i64 %189
  %191 = add nsw i64 %24, 3
  br label %201

192:                                              ; preds = %173
  %193 = sub nsw i64 509, %24
  %194 = sdiv i64 %193, -512
  %195 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %194
  %196 = load %struct.FX_TPO*, %struct.FX_TPO** %195, align 8
  %197 = srem i64 %193, 512
  %198 = sub nuw nsw i64 511, %197
  %199 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %196, i64 %198
  %200 = icmp sgt i64 %23, -24
  br i1 %200, label %201, label %212

201:                                              ; preds = %182, %192
  %202 = phi i64 [ %191, %182 ], [ 1, %192 ]
  %203 = phi %struct.FX_TPO* [ %190, %182 ], [ %199, %192 ]
  %204 = phi %struct.FX_TPO** [ %187, %182 ], [ %195, %192 ]
  %205 = phi %struct.FX_TPO** [ %185, %182 ], [ %176, %192 ]
  %206 = phi %struct.FX_TPO* [ %184, %182 ], [ %180, %192 ]
  %207 = lshr i64 %202, 9
  %208 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %207
  %209 = load %struct.FX_TPO*, %struct.FX_TPO** %208, align 8
  %210 = and i64 %202, 511
  %211 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %209, i64 %210
  br label %220

212:                                              ; preds = %192
  %213 = sub nsw i64 508, %24
  %214 = sdiv i64 %213, -512
  %215 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %214
  %216 = load %struct.FX_TPO*, %struct.FX_TPO** %215, align 8
  %217 = srem i64 %213, 512
  %218 = sub nuw nsw i64 511, %217
  %219 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %216, i64 %218
  br label %220

220:                                              ; preds = %201, %212
  %221 = phi %struct.FX_TPO* [ %203, %201 ], [ %199, %212 ]
  %222 = phi %struct.FX_TPO** [ %204, %201 ], [ %195, %212 ]
  %223 = phi %struct.FX_TPO** [ %205, %201 ], [ %176, %212 ]
  %224 = phi %struct.FX_TPO* [ %206, %201 ], [ %180, %212 ]
  %225 = phi %struct.FX_TPO* [ %211, %201 ], [ %219, %212 ]
  %226 = phi %struct.FX_TPO** [ %208, %201 ], [ %215, %212 ]
  %227 = icmp eq %struct.FX_TPO* %26, %3
  br i1 %227, label %228, label %232

228:                                              ; preds = %220
  %229 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %2, i64 -1
  %230 = load %struct.FX_TPO*, %struct.FX_TPO** %229, align 8
  %231 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %230, i64 512
  br label %232

232:                                              ; preds = %220, %228
  %233 = phi %struct.FX_TPO* [ %231, %228 ], [ %3, %220 ]
  %234 = bitcast %"class.std::__1::__deque_iterator"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %234)
  %235 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %6, i64 0, i32 0
  store %struct.FX_TPO** %226, %struct.FX_TPO*** %235, align 8
  %236 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %6, i64 0, i32 1
  store %struct.FX_TPO* %225, %struct.FX_TPO** %236, align 8
  %237 = tail call i32 @_ZNSt3__17__sort4IRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEjT0_SA_SA_SA_T_(%struct.FX_TPO** %0, %struct.FX_TPO* %1, %struct.FX_TPO** %223, %struct.FX_TPO* %224, %struct.FX_TPO** %222, %struct.FX_TPO* %221, %"class.std::__1::__deque_iterator"* nonnull byval(%"class.std::__1::__deque_iterator") align 8 %6, %"struct.std::__1::__less.134"* dereferenceable(1) %4) #11
  %238 = load %struct.FX_TPO*, %struct.FX_TPO** %236, align 8
  %239 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %233, i64 -1, i32 1
  %240 = load i32, i32* %239, align 4
  %241 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %238, i64 0, i32 1
  %242 = load i32, i32* %241, align 4
  %243 = icmp slt i32 %240, %242
  br i1 %243, label %244, label %274

244:                                              ; preds = %232
  %245 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %233, i64 -1
  %246 = bitcast %struct.FX_TPO* %238 to i64*
  %247 = load i64, i64* %246, align 4
  %248 = bitcast %struct.FX_TPO* %245 to i64*
  %249 = load i64, i64* %248, align 4
  store i64 %249, i64* %246, align 4
  store i64 %247, i64* %248, align 4
  %250 = load i32, i32* %241, align 4
  %251 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %221, i64 0, i32 1
  %252 = load i32, i32* %251, align 4
  %253 = icmp slt i32 %250, %252
  br i1 %253, label %254, label %274

254:                                              ; preds = %244
  %255 = bitcast %struct.FX_TPO* %221 to i64*
  %256 = load i64, i64* %255, align 4
  %257 = load i64, i64* %246, align 4
  store i64 %257, i64* %255, align 4
  store i64 %256, i64* %246, align 4
  %258 = load i32, i32* %251, align 4
  %259 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %224, i64 0, i32 1
  %260 = load i32, i32* %259, align 4
  %261 = icmp slt i32 %258, %260
  br i1 %261, label %262, label %274

262:                                              ; preds = %254
  %263 = bitcast %struct.FX_TPO* %224 to i64*
  %264 = load i64, i64* %263, align 4
  %265 = load i64, i64* %255, align 4
  store i64 %265, i64* %263, align 4
  store i64 %264, i64* %255, align 4
  %266 = load i32, i32* %259, align 4
  %267 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %1, i64 0, i32 1
  %268 = load i32, i32* %267, align 4
  %269 = icmp slt i32 %266, %268
  br i1 %269, label %270, label %274

270:                                              ; preds = %262
  %271 = bitcast %struct.FX_TPO* %1 to i64*
  %272 = load i64, i64* %271, align 4
  %273 = load i64, i64* %263, align 4
  store i64 %273, i64* %271, align 4
  store i64 %272, i64* %263, align 4
  br label %274

274:                                              ; preds = %232, %244, %254, %262, %270
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %234)
  br label %462

275:                                              ; preds = %9
  %276 = add nsw i64 %24, 2
  %277 = icmp sgt i64 %276, 0
  br i1 %277, label %288, label %278

278:                                              ; preds = %275
  %279 = sub nsw i64 509, %24
  %280 = sdiv i64 %279, -512
  %281 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %280
  %282 = load %struct.FX_TPO*, %struct.FX_TPO** %281, align 8
  %283 = srem i64 %279, 512
  %284 = sub nuw nsw i64 511, %283
  %285 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %282, i64 %284
  %286 = ptrtoint %struct.FX_TPO* %285 to i64
  %287 = sub nsw i64 510, %24
  br label %303

288:                                              ; preds = %275
  %289 = lshr i64 %276, 9
  %290 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %289
  %291 = load %struct.FX_TPO*, %struct.FX_TPO** %290, align 8
  %292 = and i64 %276, 511
  %293 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %291, i64 %292
  %294 = ptrtoint %struct.FX_TPO* %293 to i64
  %295 = add nsw i64 %24, 1
  %296 = icmp sgt i64 %23, -8
  br i1 %296, label %297, label %303

297:                                              ; preds = %288
  %298 = lshr i64 %295, 9
  %299 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %298
  %300 = load %struct.FX_TPO*, %struct.FX_TPO** %299, align 8
  %301 = and i64 %295, 511
  %302 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %300, i64 %301
  br label %314

303:                                              ; preds = %278, %288
  %304 = phi i64 [ %287, %278 ], [ 511, %288 ]
  %305 = phi %struct.FX_TPO* [ %285, %278 ], [ %293, %288 ]
  %306 = phi %struct.FX_TPO** [ %281, %278 ], [ %290, %288 ]
  %307 = phi i64 [ %286, %278 ], [ %294, %288 ]
  %308 = sdiv i64 %304, -512
  %309 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %308
  %310 = load %struct.FX_TPO*, %struct.FX_TPO** %309, align 8
  %311 = and i64 %304, 511
  %312 = xor i64 %311, 511
  %313 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %310, i64 %312
  br label %314

314:                                              ; preds = %297, %303
  %315 = phi %struct.FX_TPO* [ %293, %297 ], [ %305, %303 ]
  %316 = phi %struct.FX_TPO** [ %290, %297 ], [ %306, %303 ]
  %317 = phi i64 [ %294, %297 ], [ %307, %303 ]
  %318 = phi %struct.FX_TPO* [ %302, %297 ], [ %313, %303 ]
  %319 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %318, i64 0, i32 1
  %320 = load i32, i32* %319, align 4
  %321 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %1, i64 0, i32 1
  %322 = load i32, i32* %321, align 4
  %323 = icmp slt i32 %320, %322
  %324 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %315, i64 0, i32 1
  %325 = load i32, i32* %324, align 4
  %326 = icmp slt i32 %325, %320
  br i1 %323, label %340, label %327

327:                                              ; preds = %314
  br i1 %326, label %328, label %356

328:                                              ; preds = %327
  %329 = bitcast %struct.FX_TPO* %318 to i64*
  %330 = load i64, i64* %329, align 4
  %331 = bitcast %struct.FX_TPO* %315 to i64*
  %332 = load i64, i64* %331, align 4
  store i64 %332, i64* %329, align 4
  store i64 %330, i64* %331, align 4
  %333 = load i32, i32* %319, align 4
  %334 = load i32, i32* %321, align 4
  %335 = icmp slt i32 %333, %334
  br i1 %335, label %336, label %356

336:                                              ; preds = %328
  %337 = bitcast %struct.FX_TPO* %1 to i64*
  %338 = load i64, i64* %337, align 4
  %339 = load i64, i64* %329, align 4
  store i64 %339, i64* %337, align 4
  store i64 %338, i64* %329, align 4
  br label %356

340:                                              ; preds = %314
  %341 = bitcast %struct.FX_TPO* %1 to i64*
  %342 = load i64, i64* %341, align 4
  br i1 %326, label %343, label %346

343:                                              ; preds = %340
  %344 = bitcast %struct.FX_TPO* %315 to i64*
  %345 = load i64, i64* %344, align 4
  store i64 %345, i64* %341, align 4
  store i64 %342, i64* %344, align 4
  br label %356

346:                                              ; preds = %340
  %347 = bitcast %struct.FX_TPO* %318 to i64*
  %348 = load i64, i64* %347, align 4
  store i64 %348, i64* %341, align 4
  store i64 %342, i64* %347, align 4
  %349 = load i32, i32* %324, align 4
  %350 = lshr i64 %342, 32
  %351 = trunc i64 %350 to i32
  %352 = icmp slt i32 %349, %351
  br i1 %352, label %353, label %356

353:                                              ; preds = %346
  %354 = bitcast %struct.FX_TPO* %315 to i64*
  %355 = load i64, i64* %354, align 4
  store i64 %355, i64* %347, align 4
  store i64 %342, i64* %354, align 4
  br label %356

356:                                              ; preds = %327, %328, %336, %343, %346, %353
  %357 = bitcast %struct.FX_TPO** %316 to i64*
  %358 = load i64, i64* %357, align 8
  %359 = sub i64 %317, %358
  %360 = ashr exact i64 %359, 3
  %361 = add nsw i64 %360, 1
  %362 = icmp sgt i64 %359, -8
  br i1 %362, label %363, label %369

363:                                              ; preds = %356
  %364 = lshr i64 %361, 9
  %365 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %316, i64 %364
  %366 = load %struct.FX_TPO*, %struct.FX_TPO** %365, align 8
  %367 = and i64 %361, 511
  %368 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %366, i64 %367
  br label %377

369:                                              ; preds = %356
  %370 = sub nsw i64 510, %360
  %371 = sdiv i64 %370, -512
  %372 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %316, i64 %371
  %373 = load %struct.FX_TPO*, %struct.FX_TPO** %372, align 8
  %374 = srem i64 %370, 512
  %375 = sub nuw nsw i64 511, %374
  %376 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %373, i64 %375
  br label %377

377:                                              ; preds = %363, %369
  %378 = phi %struct.FX_TPO* [ %368, %363 ], [ %376, %369 ]
  %379 = phi %struct.FX_TPO** [ %365, %363 ], [ %372, %369 ]
  %380 = icmp eq %struct.FX_TPO* %378, %3
  br i1 %380, label %462, label %381

381:                                              ; preds = %377
  %382 = ptrtoint %struct.FX_TPO* %378 to i64
  br label %383

383:                                              ; preds = %381, %453
  %384 = phi %struct.FX_TPO* [ %456, %453 ], [ %378, %381 ]
  %385 = phi i32 [ %441, %453 ], [ 0, %381 ]
  %386 = phi %struct.FX_TPO** [ %455, %453 ], [ %379, %381 ]
  %387 = phi i64 [ %454, %453 ], [ %382, %381 ]
  %388 = phi %struct.FX_TPO** [ %386, %453 ], [ %316, %381 ]
  %389 = phi i64 [ %387, %453 ], [ %317, %381 ]
  %390 = inttoptr i64 %389 to %struct.FX_TPO*
  %391 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %384, i64 0, i32 1
  %392 = load i32, i32* %391, align 4
  %393 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %390, i64 0, i32 1
  %394 = load i32, i32* %393, align 4
  %395 = icmp slt i32 %392, %394
  br i1 %395, label %396, label %440

396:                                              ; preds = %383
  %397 = inttoptr i64 %387 to i64*
  %398 = load i64, i64* %397, align 4
  %399 = lshr i64 %398, 32
  %400 = trunc i64 %399 to i32
  br label %401

401:                                              ; preds = %417, %396
  %402 = phi i64 [ %387, %396 ], [ %408, %417 ]
  %403 = phi %struct.FX_TPO* [ %390, %396 ], [ %420, %417 ]
  %404 = phi %struct.FX_TPO** [ %388, %396 ], [ %418, %417 ]
  %405 = bitcast %struct.FX_TPO* %403 to i64*
  %406 = inttoptr i64 %402 to i64*
  %407 = load i64, i64* %405, align 4
  store i64 %407, i64* %406, align 4
  %408 = ptrtoint %struct.FX_TPO* %403 to i64
  %409 = icmp eq %struct.FX_TPO* %403, %1
  br i1 %409, label %424, label %410

410:                                              ; preds = %401
  %411 = load %struct.FX_TPO*, %struct.FX_TPO** %404, align 8
  %412 = icmp eq %struct.FX_TPO* %403, %411
  br i1 %412, label %413, label %417

413:                                              ; preds = %410
  %414 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %404, i64 -1
  %415 = load %struct.FX_TPO*, %struct.FX_TPO** %414, align 8
  %416 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %415, i64 512
  br label %417

417:                                              ; preds = %410, %413
  %418 = phi %struct.FX_TPO** [ %414, %413 ], [ %404, %410 ]
  %419 = phi %struct.FX_TPO* [ %416, %413 ], [ %403, %410 ]
  %420 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %419, i64 -1
  %421 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %419, i64 -1, i32 1
  %422 = load i32, i32* %421, align 4
  %423 = icmp sgt i32 %422, %400
  br i1 %423, label %401, label %424

424:                                              ; preds = %401, %417
  %425 = phi %struct.FX_TPO* [ %403, %417 ], [ %1, %401 ]
  %426 = bitcast %struct.FX_TPO* %425 to i64*
  store i64 %398, i64* %426, align 4
  %427 = add i32 %385, 1
  %428 = icmp eq i32 %427, 8
  br i1 %428, label %429, label %440

429:                                              ; preds = %424
  %430 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %384, i64 1
  %431 = ptrtoint %struct.FX_TPO* %430 to i64
  %432 = bitcast %struct.FX_TPO** %386 to i64*
  %433 = load i64, i64* %432, align 8
  %434 = sub i64 %431, %433
  %435 = icmp eq i64 %434, 4096
  br i1 %435, label %436, label %458

436:                                              ; preds = %429
  %437 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %386, i64 1
  %438 = bitcast %struct.FX_TPO** %437 to i64*
  %439 = load i64, i64* %438, align 8
  br label %458

440:                                              ; preds = %424, %383
  %441 = phi i32 [ %385, %383 ], [ %427, %424 ]
  %442 = inttoptr i64 %387 to %struct.FX_TPO*
  %443 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %442, i64 1
  %444 = ptrtoint %struct.FX_TPO* %443 to i64
  %445 = bitcast %struct.FX_TPO** %386 to i64*
  %446 = load i64, i64* %445, align 8
  %447 = sub i64 %444, %446
  %448 = icmp eq i64 %447, 4096
  br i1 %448, label %449, label %453

449:                                              ; preds = %440
  %450 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %386, i64 1
  %451 = bitcast %struct.FX_TPO** %450 to i64*
  %452 = load i64, i64* %451, align 8
  br label %453

453:                                              ; preds = %440, %449
  %454 = phi i64 [ %452, %449 ], [ %444, %440 ]
  %455 = phi %struct.FX_TPO** [ %450, %449 ], [ %386, %440 ]
  %456 = inttoptr i64 %454 to %struct.FX_TPO*
  %457 = icmp eq %struct.FX_TPO* %456, %3
  br i1 %457, label %462, label %383

458:                                              ; preds = %429, %436
  %459 = phi i64 [ %439, %436 ], [ %431, %429 ]
  %460 = inttoptr i64 %459 to %struct.FX_TPO*
  %461 = icmp eq %struct.FX_TPO* %460, %3
  br label %462

462:                                              ; preds = %453, %377, %5, %458, %107, %100, %97, %90, %82, %81, %33, %40, %9, %9, %274, %156
  %463 = phi i1 [ true, %274 ], [ true, %156 ], [ true, %9 ], [ true, %9 ], [ true, %40 ], [ true, %33 ], [ true, %81 ], [ true, %82 ], [ true, %90 ], [ true, %97 ], [ true, %100 ], [ true, %107 ], [ %461, %458 ], [ true, %5 ], [ true, %377 ], [ true, %453 ]
  ret i1 %463
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !10}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !8}
!21 = !{i8 0, i8 2}
!22 = !{!"branch_weights", i32 1, i32 2000}
!23 = !{!"branch_weights", i32 2000, i32 1}
!24 = !{!25, !27, !29}
!25 = distinct !{!25, !26, !"_ZNKSt3__15dequeI6FX_TPONS_9allocatorIS1_EEE6rbeginEv: argument 0"}
!26 = distinct !{!26, !"_ZNKSt3__15dequeI6FX_TPONS_9allocatorIS1_EEE6rbeginEv"}
!27 = distinct !{!27, !28, !"_ZNSt3__16rbeginINS_5dequeI6FX_TPONS_9allocatorIS2_EEEEEEDTcldtfp_6rbeginEERKT_: argument 0"}
!28 = distinct !{!28, !"_ZNSt3__16rbeginINS_5dequeI6FX_TPONS_9allocatorIS2_EEEEEEDTcldtfp_6rbeginEERKT_"}
!29 = distinct !{!29, !30, !"_ZNK6pdfium4base8internal15ReversedAdapterIKNSt3__15dequeI6FX_TPONS3_9allocatorIS5_EEEEE5beginEv: argument 0"}
!30 = distinct !{!30, !"_ZNK6pdfium4base8internal15ReversedAdapterIKNSt3__15dequeI6FX_TPONS3_9allocatorIS5_EEEEE5beginEv"}
!31 = !{!32, !34, !36}
!32 = distinct !{!32, !33, !"_ZNKSt3__15dequeI6FX_TPONS_9allocatorIS1_EEE4rendEv: argument 0"}
!33 = distinct !{!33, !"_ZNKSt3__15dequeI6FX_TPONS_9allocatorIS1_EEE4rendEv"}
!34 = distinct !{!34, !35, !"_ZNSt3__14rendINS_5dequeI6FX_TPONS_9allocatorIS2_EEEEEEDTcldtfp_4rendEERKT_: argument 0"}
!35 = distinct !{!35, !"_ZNSt3__14rendINS_5dequeI6FX_TPONS_9allocatorIS2_EEEEEEDTcldtfp_4rendEERKT_"}
!36 = distinct !{!36, !37, !"_ZNK6pdfium4base8internal15ReversedAdapterIKNSt3__15dequeI6FX_TPONS3_9allocatorIS5_EEEEE3endEv: argument 0"}
!37 = distinct !{!37, !"_ZNK6pdfium4base8internal15ReversedAdapterIKNSt3__15dequeI6FX_TPONS3_9allocatorIS5_EEEEE3endEv"}
!38 = distinct !{!38, !10}
!39 = !{i32 -2143639589}
!40 = !{i32 -2143639568}
!41 = distinct !{!41, !10}
!42 = distinct !{!42, !10}
!43 = distinct !{!43, !10}
!44 = distinct !{!44, !10}
!45 = distinct !{!45, !10}
