; ModuleID = '../../third_party/zlib/adler32.c'
source_filename = "../../third_party/zlib/adler32.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@Cr_z_x86_cpu_enable_ssse3 = external local_unnamed_addr global i32, align 4

; Function Attrs: nounwind ssp uwtable
define hidden i64 @Cr_z_adler32_z(i64, i8*, i64) local_unnamed_addr #0 {
  %4 = icmp ne i8* %1, null
  %5 = icmp ugt i64 %2, 63
  %6 = and i1 %4, %5
  %7 = load i32, i32* @Cr_z_x86_cpu_enable_ssse3, align 4
  %8 = icmp ne i32 %7, 0
  %9 = and i1 %6, %8
  br i1 %9, label %10, label %14

10:                                               ; preds = %3
  %11 = trunc i64 %0 to i32
  %12 = tail call i32 @Cr_z_adler32_simd_(i32 %11, i8* nonnull %1, i64 %2) #3
  %13 = zext i32 %12 to i64
  br label %373

14:                                               ; preds = %3
  %15 = lshr i64 %0, 16
  %16 = and i64 %15, 65535
  %17 = and i64 %0, 65535
  %18 = icmp eq i64 %2, 1
  br i1 %18, label %19, label %32

19:                                               ; preds = %14
  %20 = load i8, i8* %1, align 1
  %21 = zext i8 %20 to i64
  %22 = add nuw nsw i64 %17, %21
  %23 = icmp ugt i64 %22, 65520
  %24 = add nsw i64 %22, -65521
  %25 = select i1 %23, i64 %24, i64 %22
  %26 = add nsw i64 %25, %16
  %27 = icmp ugt i64 %26, 65520
  %28 = shl nsw i64 %26, 16
  %29 = add nsw i64 %28, -4293984256
  %30 = select i1 %27, i64 %29, i64 %28
  %31 = or i64 %30, %25
  br label %373

32:                                               ; preds = %14
  %33 = icmp eq i8* %1, null
  br i1 %33, label %34, label %37

34:                                               ; preds = %32
  %35 = icmp eq i64 %2, 0
  br i1 %35, label %36, label %373

36:                                               ; preds = %34
  tail call void @Cr_z_cpu_check_features() #3
  br label %373

37:                                               ; preds = %32
  %38 = icmp ult i64 %2, 16
  br i1 %38, label %41, label %39

39:                                               ; preds = %37
  %40 = icmp ugt i64 %2, 5551
  br i1 %40, label %105, label %207

41:                                               ; preds = %37
  %42 = icmp eq i64 %2, 0
  br i1 %42, label %96, label %43

43:                                               ; preds = %41
  %44 = add i64 %2, -1
  %45 = and i64 %2, 3
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %61, label %47

47:                                               ; preds = %43, %47
  %48 = phi i64 [ %58, %47 ], [ %16, %43 ]
  %49 = phi i64 [ %53, %47 ], [ %2, %43 ]
  %50 = phi i8* [ %54, %47 ], [ %1, %43 ]
  %51 = phi i64 [ %57, %47 ], [ %17, %43 ]
  %52 = phi i64 [ %59, %47 ], [ %45, %43 ]
  %53 = add i64 %49, -1
  %54 = getelementptr inbounds i8, i8* %50, i64 1
  %55 = load i8, i8* %50, align 1
  %56 = zext i8 %55 to i64
  %57 = add i64 %51, %56
  %58 = add i64 %57, %48
  %59 = add i64 %52, -1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %47, !llvm.loop !2

61:                                               ; preds = %47, %43
  %62 = phi i64 [ undef, %43 ], [ %57, %47 ]
  %63 = phi i64 [ undef, %43 ], [ %58, %47 ]
  %64 = phi i64 [ %16, %43 ], [ %58, %47 ]
  %65 = phi i64 [ %2, %43 ], [ %53, %47 ]
  %66 = phi i8* [ %1, %43 ], [ %54, %47 ]
  %67 = phi i64 [ %17, %43 ], [ %57, %47 ]
  %68 = icmp ult i64 %44, 3
  br i1 %68, label %96, label %69

69:                                               ; preds = %61, %69
  %70 = phi i64 [ %94, %69 ], [ %64, %61 ]
  %71 = phi i64 [ %89, %69 ], [ %65, %61 ]
  %72 = phi i8* [ %90, %69 ], [ %66, %61 ]
  %73 = phi i64 [ %93, %69 ], [ %67, %61 ]
  %74 = getelementptr inbounds i8, i8* %72, i64 1
  %75 = load i8, i8* %72, align 1
  %76 = zext i8 %75 to i64
  %77 = add i64 %73, %76
  %78 = add i64 %77, %70
  %79 = getelementptr inbounds i8, i8* %72, i64 2
  %80 = load i8, i8* %74, align 1
  %81 = zext i8 %80 to i64
  %82 = add i64 %77, %81
  %83 = add i64 %82, %78
  %84 = getelementptr inbounds i8, i8* %72, i64 3
  %85 = load i8, i8* %79, align 1
  %86 = zext i8 %85 to i64
  %87 = add i64 %82, %86
  %88 = add i64 %87, %83
  %89 = add i64 %71, -4
  %90 = getelementptr inbounds i8, i8* %72, i64 4
  %91 = load i8, i8* %84, align 1
  %92 = zext i8 %91 to i64
  %93 = add i64 %87, %92
  %94 = add i64 %93, %88
  %95 = icmp eq i64 %89, 0
  br i1 %95, label %96, label %69

96:                                               ; preds = %61, %69, %41
  %97 = phi i64 [ %17, %41 ], [ %62, %61 ], [ %93, %69 ]
  %98 = phi i64 [ %16, %41 ], [ %63, %61 ], [ %94, %69 ]
  %99 = icmp ugt i64 %97, 65520
  %100 = add i64 %97, -65521
  %101 = select i1 %99, i64 %100, i64 %97
  %102 = urem i64 %98, 65521
  %103 = shl nuw nsw i64 %102, 16
  %104 = or i64 %103, %101
  br label %373

105:                                              ; preds = %39, %198
  %106 = phi i64 [ %201, %198 ], [ %16, %39 ]
  %107 = phi i64 [ %110, %198 ], [ %2, %39 ]
  %108 = phi i8* [ %199, %198 ], [ %1, %39 ]
  %109 = phi i64 [ %200, %198 ], [ %17, %39 ]
  %110 = add i64 %107, -5552
  br label %111

111:                                              ; preds = %111, %105
  %112 = phi i64 [ %109, %105 ], [ %193, %111 ]
  %113 = phi i8* [ %108, %105 ], [ %195, %111 ]
  %114 = phi i64 [ %106, %105 ], [ %194, %111 ]
  %115 = phi i32 [ 347, %105 ], [ %196, %111 ]
  %116 = load i8, i8* %113, align 1
  %117 = zext i8 %116 to i64
  %118 = add i64 %112, %117
  %119 = add i64 %118, %114
  %120 = getelementptr inbounds i8, i8* %113, i64 1
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i64
  %123 = add i64 %118, %122
  %124 = add i64 %119, %123
  %125 = getelementptr inbounds i8, i8* %113, i64 2
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i64
  %128 = add i64 %123, %127
  %129 = add i64 %124, %128
  %130 = getelementptr inbounds i8, i8* %113, i64 3
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i64
  %133 = add i64 %128, %132
  %134 = add i64 %129, %133
  %135 = getelementptr inbounds i8, i8* %113, i64 4
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i64
  %138 = add i64 %133, %137
  %139 = add i64 %134, %138
  %140 = getelementptr inbounds i8, i8* %113, i64 5
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i64
  %143 = add i64 %138, %142
  %144 = add i64 %139, %143
  %145 = getelementptr inbounds i8, i8* %113, i64 6
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i64
  %148 = add i64 %143, %147
  %149 = add i64 %144, %148
  %150 = getelementptr inbounds i8, i8* %113, i64 7
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i64
  %153 = add i64 %148, %152
  %154 = add i64 %149, %153
  %155 = getelementptr inbounds i8, i8* %113, i64 8
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i64
  %158 = add i64 %153, %157
  %159 = add i64 %154, %158
  %160 = getelementptr inbounds i8, i8* %113, i64 9
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i64
  %163 = add i64 %158, %162
  %164 = add i64 %159, %163
  %165 = getelementptr inbounds i8, i8* %113, i64 10
  %166 = load i8, i8* %165, align 1
  %167 = zext i8 %166 to i64
  %168 = add i64 %163, %167
  %169 = add i64 %164, %168
  %170 = getelementptr inbounds i8, i8* %113, i64 11
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i64
  %173 = add i64 %168, %172
  %174 = add i64 %169, %173
  %175 = getelementptr inbounds i8, i8* %113, i64 12
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i64
  %178 = add i64 %173, %177
  %179 = add i64 %174, %178
  %180 = getelementptr inbounds i8, i8* %113, i64 13
  %181 = load i8, i8* %180, align 1
  %182 = zext i8 %181 to i64
  %183 = add i64 %178, %182
  %184 = add i64 %179, %183
  %185 = getelementptr inbounds i8, i8* %113, i64 14
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %186 to i64
  %188 = add i64 %183, %187
  %189 = add i64 %184, %188
  %190 = getelementptr inbounds i8, i8* %113, i64 15
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i64
  %193 = add i64 %188, %192
  %194 = add i64 %189, %193
  %195 = getelementptr inbounds i8, i8* %113, i64 16
  %196 = add nsw i32 %115, -1
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %198, label %111

198:                                              ; preds = %111
  %199 = getelementptr i8, i8* %108, i64 5552
  %200 = urem i64 %193, 65521
  %201 = urem i64 %194, 65521
  %202 = icmp ugt i64 %110, 5551
  br i1 %202, label %105, label %203

203:                                              ; preds = %198
  %204 = icmp eq i64 %110, 0
  br i1 %204, label %368, label %205

205:                                              ; preds = %203
  %206 = icmp ugt i64 %110, 15
  br i1 %206, label %207, label %219

207:                                              ; preds = %39, %205
  %208 = phi i64 [ %200, %205 ], [ %17, %39 ]
  %209 = phi i8* [ %199, %205 ], [ %1, %39 ]
  %210 = phi i64 [ %110, %205 ], [ %2, %39 ]
  %211 = phi i64 [ %201, %205 ], [ %16, %39 ]
  %212 = add nsw i64 %210, -16
  %213 = and i64 %212, -16
  %214 = add nuw nsw i64 %213, 16
  br label %249

215:                                              ; preds = %249
  %216 = sub i64 %212, %213
  %217 = getelementptr i8, i8* %209, i64 %214
  %218 = icmp eq i64 %216, 0
  br i1 %218, label %363, label %219

219:                                              ; preds = %205, %215
  %220 = phi i64 [ %201, %205 ], [ %333, %215 ]
  %221 = phi i64 [ %110, %205 ], [ %216, %215 ]
  %222 = phi i8* [ %199, %205 ], [ %217, %215 ]
  %223 = phi i64 [ %200, %205 ], [ %332, %215 ]
  %224 = add i64 %221, -1
  %225 = and i64 %221, 3
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %241, label %227

227:                                              ; preds = %219, %227
  %228 = phi i64 [ %238, %227 ], [ %220, %219 ]
  %229 = phi i64 [ %233, %227 ], [ %221, %219 ]
  %230 = phi i8* [ %234, %227 ], [ %222, %219 ]
  %231 = phi i64 [ %237, %227 ], [ %223, %219 ]
  %232 = phi i64 [ %239, %227 ], [ %225, %219 ]
  %233 = add i64 %229, -1
  %234 = getelementptr inbounds i8, i8* %230, i64 1
  %235 = load i8, i8* %230, align 1
  %236 = zext i8 %235 to i64
  %237 = add i64 %231, %236
  %238 = add i64 %237, %228
  %239 = add i64 %232, -1
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %241, label %227, !llvm.loop !4

241:                                              ; preds = %227, %219
  %242 = phi i64 [ undef, %219 ], [ %237, %227 ]
  %243 = phi i64 [ undef, %219 ], [ %238, %227 ]
  %244 = phi i64 [ %220, %219 ], [ %238, %227 ]
  %245 = phi i64 [ %221, %219 ], [ %233, %227 ]
  %246 = phi i8* [ %222, %219 ], [ %234, %227 ]
  %247 = phi i64 [ %223, %219 ], [ %237, %227 ]
  %248 = icmp ult i64 %224, 3
  br i1 %248, label %363, label %336

249:                                              ; preds = %207, %249
  %250 = phi i64 [ %333, %249 ], [ %211, %207 ]
  %251 = phi i64 [ %254, %249 ], [ %210, %207 ]
  %252 = phi i8* [ %334, %249 ], [ %209, %207 ]
  %253 = phi i64 [ %332, %249 ], [ %208, %207 ]
  %254 = add i64 %251, -16
  %255 = load i8, i8* %252, align 1
  %256 = zext i8 %255 to i64
  %257 = add i64 %253, %256
  %258 = add i64 %257, %250
  %259 = getelementptr inbounds i8, i8* %252, i64 1
  %260 = load i8, i8* %259, align 1
  %261 = zext i8 %260 to i64
  %262 = add i64 %257, %261
  %263 = add i64 %258, %262
  %264 = getelementptr inbounds i8, i8* %252, i64 2
  %265 = load i8, i8* %264, align 1
  %266 = zext i8 %265 to i64
  %267 = add i64 %262, %266
  %268 = add i64 %263, %267
  %269 = getelementptr inbounds i8, i8* %252, i64 3
  %270 = load i8, i8* %269, align 1
  %271 = zext i8 %270 to i64
  %272 = add i64 %267, %271
  %273 = add i64 %268, %272
  %274 = getelementptr inbounds i8, i8* %252, i64 4
  %275 = load i8, i8* %274, align 1
  %276 = zext i8 %275 to i64
  %277 = add i64 %272, %276
  %278 = add i64 %273, %277
  %279 = getelementptr inbounds i8, i8* %252, i64 5
  %280 = load i8, i8* %279, align 1
  %281 = zext i8 %280 to i64
  %282 = add i64 %277, %281
  %283 = add i64 %278, %282
  %284 = getelementptr inbounds i8, i8* %252, i64 6
  %285 = load i8, i8* %284, align 1
  %286 = zext i8 %285 to i64
  %287 = add i64 %282, %286
  %288 = add i64 %283, %287
  %289 = getelementptr inbounds i8, i8* %252, i64 7
  %290 = load i8, i8* %289, align 1
  %291 = zext i8 %290 to i64
  %292 = add i64 %287, %291
  %293 = add i64 %288, %292
  %294 = getelementptr inbounds i8, i8* %252, i64 8
  %295 = load i8, i8* %294, align 1
  %296 = zext i8 %295 to i64
  %297 = add i64 %292, %296
  %298 = add i64 %293, %297
  %299 = getelementptr inbounds i8, i8* %252, i64 9
  %300 = load i8, i8* %299, align 1
  %301 = zext i8 %300 to i64
  %302 = add i64 %297, %301
  %303 = add i64 %298, %302
  %304 = getelementptr inbounds i8, i8* %252, i64 10
  %305 = load i8, i8* %304, align 1
  %306 = zext i8 %305 to i64
  %307 = add i64 %302, %306
  %308 = add i64 %303, %307
  %309 = getelementptr inbounds i8, i8* %252, i64 11
  %310 = load i8, i8* %309, align 1
  %311 = zext i8 %310 to i64
  %312 = add i64 %307, %311
  %313 = add i64 %308, %312
  %314 = getelementptr inbounds i8, i8* %252, i64 12
  %315 = load i8, i8* %314, align 1
  %316 = zext i8 %315 to i64
  %317 = add i64 %312, %316
  %318 = add i64 %313, %317
  %319 = getelementptr inbounds i8, i8* %252, i64 13
  %320 = load i8, i8* %319, align 1
  %321 = zext i8 %320 to i64
  %322 = add i64 %317, %321
  %323 = add i64 %318, %322
  %324 = getelementptr inbounds i8, i8* %252, i64 14
  %325 = load i8, i8* %324, align 1
  %326 = zext i8 %325 to i64
  %327 = add i64 %322, %326
  %328 = add i64 %323, %327
  %329 = getelementptr inbounds i8, i8* %252, i64 15
  %330 = load i8, i8* %329, align 1
  %331 = zext i8 %330 to i64
  %332 = add i64 %327, %331
  %333 = add i64 %328, %332
  %334 = getelementptr inbounds i8, i8* %252, i64 16
  %335 = icmp ugt i64 %254, 15
  br i1 %335, label %249, label %215

336:                                              ; preds = %241, %336
  %337 = phi i64 [ %361, %336 ], [ %244, %241 ]
  %338 = phi i64 [ %356, %336 ], [ %245, %241 ]
  %339 = phi i8* [ %357, %336 ], [ %246, %241 ]
  %340 = phi i64 [ %360, %336 ], [ %247, %241 ]
  %341 = getelementptr inbounds i8, i8* %339, i64 1
  %342 = load i8, i8* %339, align 1
  %343 = zext i8 %342 to i64
  %344 = add i64 %340, %343
  %345 = add i64 %344, %337
  %346 = getelementptr inbounds i8, i8* %339, i64 2
  %347 = load i8, i8* %341, align 1
  %348 = zext i8 %347 to i64
  %349 = add i64 %344, %348
  %350 = add i64 %349, %345
  %351 = getelementptr inbounds i8, i8* %339, i64 3
  %352 = load i8, i8* %346, align 1
  %353 = zext i8 %352 to i64
  %354 = add i64 %349, %353
  %355 = add i64 %354, %350
  %356 = add i64 %338, -4
  %357 = getelementptr inbounds i8, i8* %339, i64 4
  %358 = load i8, i8* %351, align 1
  %359 = zext i8 %358 to i64
  %360 = add i64 %354, %359
  %361 = add i64 %360, %355
  %362 = icmp eq i64 %356, 0
  br i1 %362, label %363, label %336

363:                                              ; preds = %241, %336, %215
  %364 = phi i64 [ %332, %215 ], [ %242, %241 ], [ %360, %336 ]
  %365 = phi i64 [ %333, %215 ], [ %243, %241 ], [ %361, %336 ]
  %366 = urem i64 %364, 65521
  %367 = urem i64 %365, 65521
  br label %368

368:                                              ; preds = %203, %363
  %369 = phi i64 [ %366, %363 ], [ %200, %203 ]
  %370 = phi i64 [ %367, %363 ], [ %201, %203 ]
  %371 = shl nuw nsw i64 %370, 16
  %372 = or i64 %371, %369
  br label %373

373:                                              ; preds = %36, %34, %368, %96, %19, %10
  %374 = phi i64 [ %13, %10 ], [ %31, %19 ], [ %104, %96 ], [ %372, %368 ], [ 1, %34 ], [ 1, %36 ]
  ret i64 %374
}

declare i32 @Cr_z_adler32_simd_(i32, i8*, i64) local_unnamed_addr #1

declare void @Cr_z_cpu_check_features() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @Cr_z_adler32(i64, i8*, i32) local_unnamed_addr #0 {
  %4 = zext i32 %2 to i64
  %5 = tail call i64 @Cr_z_adler32_z(i64 %0, i8* %1, i64 %4)
  ret i64 %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @Cr_z_adler32_combine(i64, i64, i64) local_unnamed_addr #2 {
  %4 = icmp slt i64 %2, 0
  br i1 %4, label %37, label %5

5:                                                ; preds = %3
  %6 = urem i64 %2, 65521
  %7 = and i64 %0, 65535
  %8 = mul nuw nsw i64 %6, %7
  %9 = trunc i64 %8 to i32
  %10 = urem i32 %9, 65521
  %11 = zext i32 %10 to i64
  %12 = and i64 %1, 65535
  %13 = add nuw nsw i64 %7, 65520
  %14 = add nuw nsw i64 %13, %12
  %15 = lshr i64 %0, 16
  %16 = and i64 %15, 65535
  %17 = lshr i64 %1, 16
  %18 = and i64 %17, 65535
  %19 = add nuw nsw i64 %16, 65521
  %20 = add nuw nsw i64 %19, %18
  %21 = sub nuw nsw i64 %20, %6
  %22 = add nuw nsw i64 %21, %11
  %23 = icmp ugt i64 %14, 65520
  %24 = add nsw i64 %14, -65521
  %25 = select i1 %23, i64 %24, i64 %14
  %26 = icmp ugt i64 %25, 65520
  %27 = add nsw i64 %25, -65521
  %28 = select i1 %26, i64 %27, i64 %25
  %29 = icmp ugt i64 %22, 131041
  %30 = add nsw i64 %22, -131042
  %31 = select i1 %29, i64 %30, i64 %22
  %32 = icmp ugt i64 %31, 65520
  %33 = shl i64 %31, 16
  %34 = add i64 %33, -4293984256
  %35 = select i1 %32, i64 %34, i64 %33
  %36 = or i64 %35, %28
  br label %37

37:                                               ; preds = %3, %5
  %38 = phi i64 [ %36, %5 ], [ 4294967295, %3 ]
  ret i64 %38
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @Cr_z_adler32_combine64(i64, i64, i64) local_unnamed_addr #2 {
  %4 = icmp slt i64 %2, 0
  br i1 %4, label %37, label %5

5:                                                ; preds = %3
  %6 = urem i64 %2, 65521
  %7 = and i64 %0, 65535
  %8 = mul nuw nsw i64 %6, %7
  %9 = trunc i64 %8 to i32
  %10 = urem i32 %9, 65521
  %11 = zext i32 %10 to i64
  %12 = and i64 %1, 65535
  %13 = add nuw nsw i64 %7, 65520
  %14 = add nuw nsw i64 %13, %12
  %15 = lshr i64 %0, 16
  %16 = and i64 %15, 65535
  %17 = lshr i64 %1, 16
  %18 = and i64 %17, 65535
  %19 = add nuw nsw i64 %16, 65521
  %20 = add nuw nsw i64 %19, %18
  %21 = sub nuw nsw i64 %20, %6
  %22 = add nuw nsw i64 %21, %11
  %23 = icmp ugt i64 %14, 65520
  %24 = add nsw i64 %14, -65521
  %25 = select i1 %23, i64 %24, i64 %14
  %26 = icmp ugt i64 %25, 65520
  %27 = add nsw i64 %25, -65521
  %28 = select i1 %26, i64 %27, i64 %25
  %29 = icmp ugt i64 %22, 131041
  %30 = add nsw i64 %22, -131042
  %31 = select i1 %29, i64 %30, i64 %22
  %32 = icmp ugt i64 %31, 65520
  %33 = shl i64 %31, 16
  %34 = add i64 %33, -4293984256
  %35 = select i1 %32, i64 %34, i64 %33
  %36 = or i64 %35, %28
  br label %37

37:                                               ; preds = %3, %5
  %38 = phi i64 [ %36, %5 ], [ 4294967295, %3 ]
  ret i64 %38
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
