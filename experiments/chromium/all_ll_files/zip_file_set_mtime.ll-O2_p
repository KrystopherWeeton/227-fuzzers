; ModuleID = '../../third_party/libzip/src/lib/zip_file_set_mtime.c'
source_filename = "../../third_party/libzip/src/lib/zip_file_set_mtime.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque

; Function Attrs: nounwind ssp uwtable
define hidden i32 @zip_file_set_dostime(%struct.zip*, i64, i16 zeroext, i16 zeroext, i32) local_unnamed_addr #0 {
  %6 = tail call i64 @_zip_d2u_time(i16 zeroext %2, i16 zeroext %3) #2
  %7 = tail call i32 @zip_file_set_mtime(%struct.zip* %0, i64 %1, i64 %6, i32 undef)
  ret i32 %7
}

declare i64 @_zip_d2u_time(i16 zeroext, i16 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @zip_file_set_mtime(%struct.zip*, i64, i64, i32) local_unnamed_addr #0 {
  %5 = tail call %struct.zip_dirent* @_zip_get_dirent(%struct.zip* %0, i64 %1, i32 0, %struct.zip_error* null) #2
  %6 = icmp eq %struct.zip_dirent* %5, null
  br i1 %6, label %34, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 4
  %9 = load i32, i32* %8, align 4
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %14, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %13, i32 25, i32 0) #2
  br label %34

14:                                               ; preds = %7
  %15 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 11
  %16 = load %struct.zip_entry*, %struct.zip_entry** %15, align 8
  %17 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %16, i64 %1, i32 1
  %18 = load %struct.zip_dirent*, %struct.zip_dirent** %17, align 8
  %19 = icmp eq %struct.zip_dirent* %18, null
  br i1 %19, label %20, label %27

20:                                               ; preds = %14
  %21 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %16, i64 %1, i32 0
  %22 = load %struct.zip_dirent*, %struct.zip_dirent** %21, align 8
  %23 = tail call %struct.zip_dirent* @_zip_dirent_clone(%struct.zip_dirent* %22) #2
  store %struct.zip_dirent* %23, %struct.zip_dirent** %17, align 8
  %24 = icmp eq %struct.zip_dirent* %23, null
  br i1 %24, label %25, label %27

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %26, i32 14, i32 0) #2
  br label %34

27:                                               ; preds = %20, %14
  %28 = phi %struct.zip_dirent* [ %23, %20 ], [ %18, %14 ]
  %29 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %28, i64 0, i32 8
  store i64 %2, i64* %29, align 8
  %30 = load %struct.zip_dirent*, %struct.zip_dirent** %17, align 8
  %31 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %30, i64 0, i32 0
  %32 = load i32, i32* %31, align 8
  %33 = or i32 %32, 32
  store i32 %33, i32* %31, align 8
  br label %34

34:                                               ; preds = %4, %27, %25, %12
  %35 = phi i32 [ -1, %12 ], [ -1, %25 ], [ 0, %27 ], [ -1, %4 ]
  ret i32 %35
}

declare %struct.zip_dirent* @_zip_get_dirent(%struct.zip*, i64, i32, %struct.zip_error*) local_unnamed_addr #1

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #1

declare %struct.zip_dirent* @_zip_dirent_clone(%struct.zip_dirent*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
