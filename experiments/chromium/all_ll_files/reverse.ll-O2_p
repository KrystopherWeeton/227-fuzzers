; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/reverse.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/reverse.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TfLiteRegistration = type { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, {}*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%"class.tflite::RuntimeShape" = type { i32, %union.anon }
%union.anon = type { i32*, [16 x i8] }

@_ZZN6tflite3ops7builtin19Register_REVERSE_V2EvE1r = internal global %struct.TfLiteRegistration { i8* (%struct.TfLiteContext*, i8*, i64)* null, void (%struct.TfLiteContext*, i8*)* null, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin7reverse12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin7reverse12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@.str = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%d != %d)\00", align 1
@.str.4 = private unnamed_addr constant [64 x i8] c"../../third_party/tflite/src/tensorflow/lite/kernels/reverse.cc\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"NumInputs(node)\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.7 = private unnamed_addr constant [17 x i8] c"NumOutputs(node)\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.9 = private unnamed_addr constant [20 x i8] c"NumDimensions(axis)\00", align 1
@.str.10 = private unnamed_addr constant [23 x i8] c"%s:%d %s was not true.\00", align 1
@.str.11 = private unnamed_addr constant [42 x i8] c"NumDimensions(input) >= NumElements(axis)\00", align 1
@.str.12 = private unnamed_addr constant [39 x i8] c"Type '%s' is not supported by reverse.\00", align 1
@.str.13 = private unnamed_addr constant [44 x i8] c"Axis Type '%s' is not supported by reverse.\00", align 1
@.str.14 = private unnamed_addr constant [43 x i8] c"Current does not support more than 1 axis.\00", align 1
@.str.15 = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%s != %s)\00", align 1
@.str.16 = private unnamed_addr constant [13 x i8] c"output->type\00", align 1
@.str.17 = private unnamed_addr constant [12 x i8] c"input->type\00", align 1
@.str.18 = private unnamed_addr constant [25 x i8] c"axis >= 0 && axis < rank\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin19Register_REVERSE_V2Ev() local_unnamed_addr #0 {
  ret %struct.TfLiteRegistration* @_ZZN6tflite3ops7builtin19Register_REVERSE_V2EvE1r
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN6tflite3ops7builtin7reverse12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #1 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %4 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %3, align 8
  %5 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 2
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %10 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %9, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %10(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.4, i64 0, i64 0), i32 35, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0), i32 %6, i32 2) #6
  br label %111

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %13 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %12, align 8
  %14 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %20, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %19 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %18, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %19(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.4, i64 0, i64 0), i32 36, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0), i32 %15, i32 1) #6
  br label %111

20:                                               ; preds = %11
  %21 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 0
  %22 = load i32, i32* %21, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %29, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %26 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %25, align 8
  %27 = sext i32 %22 to i64
  %28 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 %27
  br label %29

29:                                               ; preds = %20, %24
  %30 = phi %struct.TfLiteTensor* [ %28, %24 ], [ null, %20 ]
  %31 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 1
  %32 = load i32, i32* %31, align 4
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %39, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %36 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %35, align 8
  %37 = sext i32 %32 to i64
  %38 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %36, i64 %37
  br label %39

39:                                               ; preds = %29, %34
  %40 = phi %struct.TfLiteTensor* [ %38, %34 ], [ null, %29 ]
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 2
  %42 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %41, align 8
  %43 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 0
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %44, 1
  br i1 %45, label %49, label %46

46:                                               ; preds = %39
  %47 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %48 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %47, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %48(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.4, i64 0, i64 0), i32 40, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0), i32 %44, i32 1) #6
  br label %111

49:                                               ; preds = %39
  %50 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 2
  %51 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %50, align 8
  %52 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %51, i64 0, i32 0
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 1, i64 0
  %55 = load i32, i32* %54, align 4
  %56 = icmp sgt i32 %55, %53
  br i1 %56, label %57, label %60

57:                                               ; preds = %49
  %58 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %59 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %58, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %59(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.4, i64 0, i64 0), i32 41, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.11, i64 0, i64 0)) #6
  br label %111

60:                                               ; preds = %49
  %61 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 0
  %62 = load i32, i32* %61, align 8
  switch i32 %62, label %63 [
    i32 2, label %67
    i32 1, label %67
    i32 3, label %67
    i32 7, label %67
    i32 4, label %67
    i32 6, label %67
  ]

63:                                               ; preds = %60
  %64 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %65 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %64, align 8
  %66 = tail call i8* @TfLiteTypeGetName(i32 %62) #6
  tail call void (%struct.TfLiteContext*, i8*, ...) %65(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.12, i64 0, i64 0), i8* %66) #6
  br label %111

67:                                               ; preds = %60, %60, %60, %60, %60, %60
  %68 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 0
  %69 = load i32, i32* %68, align 8
  %70 = icmp eq i32 %69, 2
  br i1 %70, label %75, label %71

71:                                               ; preds = %67
  %72 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %73 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %72, align 8
  %74 = tail call i8* @TfLiteTypeGetName(i32 %69) #6
  tail call void (%struct.TfLiteContext*, i8*, ...) %73(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.13, i64 0, i64 0), i8* %74) #6
  br label %111

75:                                               ; preds = %67
  %76 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 1, i64 0
  %77 = load i32, i32* %76, align 4
  %78 = icmp sgt i32 %77, 1
  br i1 %78, label %79, label %83

79:                                               ; preds = %75
  %80 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %81 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %80, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %81(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.14, i64 0, i64 0)) #6
  %82 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %12, align 8
  br label %83

83:                                               ; preds = %79, %75
  %84 = phi %struct.TfLiteIntArray* [ %82, %79 ], [ %13, %75 ]
  %85 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %84, i64 0, i32 1, i64 0
  %86 = load i32, i32* %85, align 4
  %87 = icmp slt i32 %86, 0
  br i1 %87, label %93, label %88

88:                                               ; preds = %83
  %89 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %90 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %89, align 8
  %91 = sext i32 %86 to i64
  %92 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %90, i64 %91
  br label %93

93:                                               ; preds = %83, %88
  %94 = phi %struct.TfLiteTensor* [ %92, %88 ], [ null, %83 ]
  %95 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %50, align 8
  %96 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray* %95) #6
  %97 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %94, i64 0, i32 0
  %98 = load i32, i32* %97, align 8
  %99 = load i32, i32* %61, align 8
  %100 = icmp eq i32 %98, %99
  br i1 %100, label %107, label %101

101:                                              ; preds = %93
  %102 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %103 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %102, align 8
  %104 = tail call i8* @TfLiteTypeGetName(i32 %98) #6
  %105 = load i32, i32* %61, align 8
  %106 = tail call i8* @TfLiteTypeGetName(i32 %105) #6
  tail call void (%struct.TfLiteContext*, i8*, ...) %103(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.4, i64 0, i64 0), i32 64, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17, i64 0, i64 0), i8* %104, i8* %106) #6
  br label %111

107:                                              ; preds = %93
  %108 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %109 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %108, align 8
  %110 = tail call i32 %109(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %94, %struct.TfLiteIntArray* %96) #6
  br label %111

111:                                              ; preds = %46, %57, %63, %71, %107, %101, %17, %8
  %112 = phi i32 [ 1, %8 ], [ 1, %17 ], [ 1, %46 ], [ 1, %63 ], [ 1, %71 ], [ 1, %57 ], [ 1, %101 ], [ %110, %107 ]
  ret i32 %112
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN6tflite3ops7builtin7reverse12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #1 {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = alloca %"class.tflite::RuntimeShape", align 8
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = alloca %"class.tflite::RuntimeShape", align 8
  %13 = alloca %"class.tflite::RuntimeShape", align 8
  %14 = alloca %"class.tflite::RuntimeShape", align 8
  %15 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %16 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %15, align 8
  %17 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %16, i64 0, i32 1, i64 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %25, label %20

20:                                               ; preds = %2
  %21 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %22 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %21, align 8
  %23 = sext i32 %18 to i64
  %24 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %22, i64 %23
  br label %25

25:                                               ; preds = %2, %20
  %26 = phi %struct.TfLiteTensor* [ %24, %20 ], [ null, %2 ]
  %27 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %16, i64 0, i32 1, i64 1
  %28 = load i32, i32* %27, align 4
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %39, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %32 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %31, align 8
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 %33
  %35 = icmp eq %struct.TfLiteTensor* %34, null
  br i1 %35, label %39, label %36

36:                                               ; preds = %30
  %37 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 %33, i32 1, i32 0
  %38 = load i32*, i32** %37, align 8
  br label %39

39:                                               ; preds = %25, %30, %36
  %40 = phi i32* [ %38, %36 ], [ null, %30 ], [ null, %25 ]
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 0, i32 2
  %43 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %42, align 8
  %44 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %43, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = icmp slt i32 %41, 0
  %47 = select i1 %46, i32 %45, i32 0
  %48 = add nsw i32 %47, %41
  %49 = icmp sgt i32 %48, -1
  %50 = icmp slt i32 %48, %45
  %51 = and i1 %49, %50
  br i1 %51, label %55, label %52

52:                                               ; preds = %39
  %53 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %54 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %53, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %54(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.4, i64 0, i64 0), i32 78, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.18, i64 0, i64 0)) #6
  br label %1744

55:                                               ; preds = %39
  %56 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %57 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %56, align 8
  %58 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %57, i64 0, i32 1, i64 0
  %59 = load i32, i32* %58, align 4
  %60 = icmp slt i32 %59, 0
  br i1 %60, label %66, label %61

61:                                               ; preds = %55
  %62 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %63 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %62, align 8
  %64 = sext i32 %59 to i64
  %65 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %63, i64 %64
  br label %66

66:                                               ; preds = %55, %61
  %67 = phi %struct.TfLiteTensor* [ %65, %61 ], [ null, %55 ]
  %68 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %67, i64 0, i32 0
  %69 = load i32, i32* %68, align 8
  switch i32 %69, label %1740 [
    i32 1, label %70
    i32 3, label %351
    i32 7, label %625
    i32 2, label %906
    i32 4, label %1185
    i32 6, label %1466
  ]

70:                                               ; preds = %66
  %71 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %71) #6
  %72 = icmp eq %struct.TfLiteTensor* %26, null
  br i1 %72, label %73, label %75

73:                                               ; preds = %70
  %74 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %74, align 8, !alias.scope !2
  br label %99

75:                                               ; preds = %70
  %76 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %43, i64 0, i32 1, i64 0
  %77 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %45, i32* %77, align 8, !alias.scope !2
  %78 = icmp sgt i32 %45, 5
  br i1 %78, label %79, label %86

79:                                               ; preds = %75
  %80 = sext i32 %45 to i64
  %81 = shl nsw i64 %80, 2
  %82 = tail call i8* @_Znam(i64 %81) #7, !noalias !2
  %83 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %84 = bitcast i32** %83 to i8**
  store i8* %82, i8** %84, align 8, !alias.scope !2
  %85 = bitcast i8* %82 to i32*
  br label %91

86:                                               ; preds = %75
  %87 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %88 = bitcast %union.anon* %87 to i32*
  %89 = sext i32 %45 to i64
  %90 = shl nsw i64 %89, 2
  br label %91

91:                                               ; preds = %86, %79
  %92 = phi i64 [ %81, %79 ], [ %90, %86 ]
  %93 = phi i32* [ %85, %79 ], [ %88, %86 ]
  %94 = bitcast i32* %93 to i8*
  %95 = bitcast i32* %76 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %94, i8* align 4 %95, i64 %92, i1 false) #6
  %96 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 0, i32 1
  %97 = bitcast %union.TfLitePtrUnion* %96 to float**
  %98 = load float*, float** %97, align 8
  br label %99

99:                                               ; preds = %73, %91
  %100 = phi i32 [ %45, %91 ], [ 0, %73 ]
  %101 = phi float* [ %98, %91 ], [ null, %73 ]
  %102 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %102) #6
  %103 = icmp eq %struct.TfLiteTensor* %67, null
  br i1 %103, label %104, label %106

104:                                              ; preds = %99
  %105 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %105, align 8, !alias.scope !5
  br label %134

106:                                              ; preds = %99
  %107 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %67, i64 0, i32 2
  %108 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %107, align 8, !noalias !5
  %109 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %108, i64 0, i32 0
  %110 = load i32, i32* %109, align 4, !noalias !5
  %111 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %108, i64 0, i32 1, i64 0
  %112 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %110, i32* %112, align 8, !alias.scope !5
  %113 = icmp sgt i32 %110, 5
  br i1 %113, label %114, label %121

114:                                              ; preds = %106
  %115 = sext i32 %110 to i64
  %116 = shl nsw i64 %115, 2
  %117 = tail call i8* @_Znam(i64 %116) #7, !noalias !5
  %118 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %119 = bitcast i32** %118 to i8**
  store i8* %117, i8** %119, align 8, !alias.scope !5
  %120 = bitcast i8* %117 to i32*
  br label %126

121:                                              ; preds = %106
  %122 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %123 = bitcast %union.anon* %122 to i32*
  %124 = sext i32 %110 to i64
  %125 = shl nsw i64 %124, 2
  br label %126

126:                                              ; preds = %121, %114
  %127 = phi i64 [ %116, %114 ], [ %125, %121 ]
  %128 = phi i32* [ %120, %114 ], [ %123, %121 ]
  %129 = bitcast i32* %128 to i8*
  %130 = bitcast i32* %111 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %129, i8* align 4 %130, i64 %127, i1 false) #6
  %131 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %67, i64 0, i32 1
  %132 = bitcast %union.TfLitePtrUnion* %131 to float**
  %133 = load float*, float** %132, align 8
  br label %134

134:                                              ; preds = %104, %126
  %135 = phi i32 [ %110, %126 ], [ 0, %104 ]
  %136 = phi float* [ %133, %126 ], [ null, %104 ]
  %137 = icmp sgt i32 %48, 0
  br i1 %137, label %141, label %138

138:                                              ; preds = %134
  %139 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %140 = load i32*, i32** %139, align 8
  br label %170

141:                                              ; preds = %134
  %142 = icmp sgt i32 %100, 5
  %143 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %144 = getelementptr inbounds %union.anon, %union.anon* %143, i64 0, i32 0
  %145 = load i32*, i32** %144, align 8
  %146 = bitcast %union.anon* %143 to [5 x i32]*
  %147 = zext i32 %48 to i64
  %148 = add nsw i64 %147, -1
  %149 = and i64 %147, 3
  %150 = icmp ult i64 %148, 3
  br i1 %150, label %153, label %151

151:                                              ; preds = %141
  %152 = sub nsw i64 %147, %149
  br label %188

153:                                              ; preds = %188, %141
  %154 = phi i32 [ undef, %141 ], [ %214, %188 ]
  %155 = phi i64 [ 0, %141 ], [ %215, %188 ]
  %156 = phi i32 [ 1, %141 ], [ %214, %188 ]
  %157 = icmp eq i64 %149, 0
  br i1 %157, label %170, label %158

158:                                              ; preds = %153, %158
  %159 = phi i64 [ %167, %158 ], [ %155, %153 ]
  %160 = phi i32 [ %166, %158 ], [ %156, %153 ]
  %161 = phi i64 [ %168, %158 ], [ %149, %153 ]
  %162 = getelementptr inbounds i32, i32* %145, i64 %159
  %163 = getelementptr inbounds [5 x i32], [5 x i32]* %146, i64 0, i64 %159
  %164 = select i1 %142, i32* %162, i32* %163
  %165 = load i32, i32* %164, align 4
  %166 = mul nsw i32 %165, %160
  %167 = add nuw nsw i64 %159, 1
  %168 = add i64 %161, -1
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %170, label %158, !llvm.loop !8

170:                                              ; preds = %153, %158, %138
  %171 = phi i32* [ %140, %138 ], [ %145, %158 ], [ %145, %153 ]
  %172 = phi i32 [ 1, %138 ], [ %154, %153 ], [ %166, %158 ]
  %173 = add i32 %48, 1
  %174 = icmp slt i32 %173, %100
  %175 = icmp sgt i32 %100, 5
  %176 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %177 = bitcast %union.anon* %176 to [5 x i32]*
  br i1 %174, label %178, label %235

178:                                              ; preds = %170
  %179 = sext i32 %173 to i64
  %180 = sext i32 %100 to i64
  %181 = sub nsw i64 %180, %179
  %182 = xor i64 %179, -1
  %183 = add nsw i64 %182, %180
  %184 = and i64 %181, 3
  %185 = icmp ult i64 %183, 3
  br i1 %185, label %218, label %186

186:                                              ; preds = %178
  %187 = sub nsw i64 %181, %184
  br label %254

188:                                              ; preds = %188, %151
  %189 = phi i64 [ 0, %151 ], [ %215, %188 ]
  %190 = phi i32 [ 1, %151 ], [ %214, %188 ]
  %191 = phi i64 [ %152, %151 ], [ %216, %188 ]
  %192 = getelementptr inbounds i32, i32* %145, i64 %189
  %193 = getelementptr inbounds [5 x i32], [5 x i32]* %146, i64 0, i64 %189
  %194 = select i1 %142, i32* %192, i32* %193
  %195 = load i32, i32* %194, align 4
  %196 = mul nsw i32 %195, %190
  %197 = or i64 %189, 1
  %198 = getelementptr inbounds i32, i32* %145, i64 %197
  %199 = getelementptr inbounds [5 x i32], [5 x i32]* %146, i64 0, i64 %197
  %200 = select i1 %142, i32* %198, i32* %199
  %201 = load i32, i32* %200, align 4
  %202 = mul nsw i32 %201, %196
  %203 = or i64 %189, 2
  %204 = getelementptr inbounds i32, i32* %145, i64 %203
  %205 = getelementptr inbounds [5 x i32], [5 x i32]* %146, i64 0, i64 %203
  %206 = select i1 %142, i32* %204, i32* %205
  %207 = load i32, i32* %206, align 4
  %208 = mul nsw i32 %207, %202
  %209 = or i64 %189, 3
  %210 = getelementptr inbounds i32, i32* %145, i64 %209
  %211 = getelementptr inbounds [5 x i32], [5 x i32]* %146, i64 0, i64 %209
  %212 = select i1 %142, i32* %210, i32* %211
  %213 = load i32, i32* %212, align 4
  %214 = mul nsw i32 %213, %208
  %215 = add nuw nsw i64 %189, 4
  %216 = add i64 %191, -4
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %153, label %188

218:                                              ; preds = %254, %178
  %219 = phi i32 [ undef, %178 ], [ %280, %254 ]
  %220 = phi i64 [ %179, %178 ], [ %281, %254 ]
  %221 = phi i32 [ 1, %178 ], [ %280, %254 ]
  %222 = icmp eq i64 %184, 0
  br i1 %222, label %235, label %223

223:                                              ; preds = %218, %223
  %224 = phi i64 [ %232, %223 ], [ %220, %218 ]
  %225 = phi i32 [ %231, %223 ], [ %221, %218 ]
  %226 = phi i64 [ %233, %223 ], [ %184, %218 ]
  %227 = getelementptr inbounds i32, i32* %171, i64 %224
  %228 = getelementptr inbounds [5 x i32], [5 x i32]* %177, i64 0, i64 %224
  %229 = select i1 %175, i32* %227, i32* %228
  %230 = load i32, i32* %229, align 4
  %231 = mul nsw i32 %230, %225
  %232 = add nsw i64 %224, 1
  %233 = add i64 %226, -1
  %234 = icmp eq i64 %233, 0
  br i1 %234, label %235, label %223, !llvm.loop !10

235:                                              ; preds = %218, %223, %170
  %236 = phi i32 [ 1, %170 ], [ %219, %218 ], [ %231, %223 ]
  %237 = sext i32 %48 to i64
  %238 = getelementptr inbounds i32, i32* %171, i64 %237
  %239 = getelementptr inbounds [5 x i32], [5 x i32]* %177, i64 0, i64 %237
  %240 = select i1 %175, i32* %238, i32* %239
  %241 = load i32, i32* %240, align 4
  %242 = icmp sgt i32 %172, 0
  br i1 %242, label %243, label %336

243:                                              ; preds = %235
  %244 = icmp sgt i32 %241, 0
  %245 = sext i32 %236 to i64
  %246 = shl nsw i64 %245, 2
  %247 = sext i32 %241 to i64
  %248 = zext i32 %172 to i64
  %249 = zext i32 %241 to i64
  %250 = and i64 %249, 1
  %251 = icmp eq i32 %241, 1
  %252 = sub nsw i64 %249, %250
  %253 = icmp eq i64 %250, 0
  br label %284

254:                                              ; preds = %254, %186
  %255 = phi i64 [ %179, %186 ], [ %281, %254 ]
  %256 = phi i32 [ 1, %186 ], [ %280, %254 ]
  %257 = phi i64 [ %187, %186 ], [ %282, %254 ]
  %258 = getelementptr inbounds i32, i32* %171, i64 %255
  %259 = getelementptr inbounds [5 x i32], [5 x i32]* %177, i64 0, i64 %255
  %260 = select i1 %175, i32* %258, i32* %259
  %261 = load i32, i32* %260, align 4
  %262 = mul nsw i32 %261, %256
  %263 = add nsw i64 %255, 1
  %264 = getelementptr inbounds i32, i32* %171, i64 %263
  %265 = getelementptr inbounds [5 x i32], [5 x i32]* %177, i64 0, i64 %263
  %266 = select i1 %175, i32* %264, i32* %265
  %267 = load i32, i32* %266, align 4
  %268 = mul nsw i32 %267, %262
  %269 = add nsw i64 %255, 2
  %270 = getelementptr inbounds i32, i32* %171, i64 %269
  %271 = getelementptr inbounds [5 x i32], [5 x i32]* %177, i64 0, i64 %269
  %272 = select i1 %175, i32* %270, i32* %271
  %273 = load i32, i32* %272, align 4
  %274 = mul nsw i32 %273, %268
  %275 = add nsw i64 %255, 3
  %276 = getelementptr inbounds i32, i32* %171, i64 %275
  %277 = getelementptr inbounds [5 x i32], [5 x i32]* %177, i64 0, i64 %275
  %278 = select i1 %175, i32* %276, i32* %277
  %279 = load i32, i32* %278, align 4
  %280 = mul nsw i32 %279, %274
  %281 = add nsw i64 %255, 4
  %282 = add i64 %257, -4
  %283 = icmp eq i64 %282, 0
  br i1 %283, label %218, label %254

284:                                              ; preds = %304, %243
  %285 = phi i64 [ 0, %243 ], [ %305, %304 ]
  br i1 %244, label %286, label %304

286:                                              ; preds = %284
  %287 = mul nsw i64 %285, %247
  %288 = trunc i64 %287 to i32
  %289 = add i32 %241, %288
  br i1 %251, label %290, label %307

290:                                              ; preds = %307, %286
  %291 = phi i64 [ 0, %286 ], [ %333, %307 ]
  br i1 %253, label %304, label %292

292:                                              ; preds = %290
  %293 = add nsw i64 %291, %287
  %294 = mul nsw i64 %293, %245
  %295 = getelementptr inbounds float, float* %136, i64 %294
  %296 = trunc i64 %291 to i32
  %297 = xor i32 %296, -1
  %298 = add i32 %289, %297
  %299 = mul nsw i32 %298, %236
  %300 = bitcast float* %295 to i8*
  %301 = sext i32 %299 to i64
  %302 = getelementptr inbounds float, float* %101, i64 %301
  %303 = bitcast float* %302 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %300, i8* align 4 %303, i64 %246, i1 false) #6
  br label %304

304:                                              ; preds = %292, %290, %284
  %305 = add nuw nsw i64 %285, 1
  %306 = icmp eq i64 %305, %248
  br i1 %306, label %336, label %284

307:                                              ; preds = %286, %307
  %308 = phi i64 [ %333, %307 ], [ 0, %286 ]
  %309 = phi i64 [ %334, %307 ], [ %252, %286 ]
  %310 = add nsw i64 %308, %287
  %311 = mul nsw i64 %310, %245
  %312 = getelementptr inbounds float, float* %136, i64 %311
  %313 = trunc i64 %308 to i32
  %314 = xor i32 %313, -1
  %315 = add i32 %289, %314
  %316 = mul nsw i32 %315, %236
  %317 = bitcast float* %312 to i8*
  %318 = sext i32 %316 to i64
  %319 = getelementptr inbounds float, float* %101, i64 %318
  %320 = bitcast float* %319 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %317, i8* align 4 %320, i64 %246, i1 false) #6
  %321 = or i64 %308, 1
  %322 = add nsw i64 %321, %287
  %323 = mul nsw i64 %322, %245
  %324 = getelementptr inbounds float, float* %136, i64 %323
  %325 = trunc i64 %321 to i32
  %326 = xor i32 %325, -1
  %327 = add i32 %289, %326
  %328 = mul nsw i32 %327, %236
  %329 = bitcast float* %324 to i8*
  %330 = sext i32 %328 to i64
  %331 = getelementptr inbounds float, float* %101, i64 %330
  %332 = bitcast float* %331 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %329, i8* align 4 %332, i64 %246, i1 false) #6
  %333 = add nuw nsw i64 %308, 2
  %334 = add i64 %309, -2
  %335 = icmp eq i64 %334, 0
  br i1 %335, label %290, label %307

336:                                              ; preds = %304, %235
  %337 = icmp sgt i32 %135, 5
  br i1 %337, label %338, label %344

338:                                              ; preds = %336
  %339 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %340 = load i32*, i32** %339, align 8
  %341 = icmp eq i32* %340, null
  br i1 %341, label %344, label %342

342:                                              ; preds = %338
  %343 = bitcast i32* %340 to i8*
  tail call void @_ZdaPv(i8* %343) #7
  br label %344

344:                                              ; preds = %336, %338, %342
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %102) #6
  %345 = xor i1 %175, true
  %346 = icmp eq i32* %171, null
  %347 = or i1 %346, %345
  br i1 %347, label %350, label %348

348:                                              ; preds = %344
  %349 = bitcast i32* %171 to i8*
  tail call void @_ZdaPv(i8* %349) #7
  br label %350

350:                                              ; preds = %344, %348
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %71) #6
  br label %1744

351:                                              ; preds = %66
  %352 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %352) #6
  %353 = icmp eq %struct.TfLiteTensor* %26, null
  br i1 %353, label %354, label %356

354:                                              ; preds = %351
  %355 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %355, align 8, !alias.scope !11
  br label %380

356:                                              ; preds = %351
  %357 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %43, i64 0, i32 1, i64 0
  %358 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %45, i32* %358, align 8, !alias.scope !11
  %359 = icmp sgt i32 %45, 5
  br i1 %359, label %360, label %367

360:                                              ; preds = %356
  %361 = sext i32 %45 to i64
  %362 = shl nsw i64 %361, 2
  %363 = tail call i8* @_Znam(i64 %362) #7, !noalias !11
  %364 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %365 = bitcast i32** %364 to i8**
  store i8* %363, i8** %365, align 8, !alias.scope !11
  %366 = bitcast i8* %363 to i32*
  br label %372

367:                                              ; preds = %356
  %368 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %369 = bitcast %union.anon* %368 to i32*
  %370 = sext i32 %45 to i64
  %371 = shl nsw i64 %370, 2
  br label %372

372:                                              ; preds = %367, %360
  %373 = phi i64 [ %362, %360 ], [ %371, %367 ]
  %374 = phi i32* [ %366, %360 ], [ %369, %367 ]
  %375 = bitcast i32* %374 to i8*
  %376 = bitcast i32* %357 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %375, i8* align 4 %376, i64 %373, i1 false) #6
  %377 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 0, i32 1
  %378 = bitcast %union.TfLitePtrUnion* %377 to i8**
  %379 = load i8*, i8** %378, align 8
  br label %380

380:                                              ; preds = %354, %372
  %381 = phi i32 [ %45, %372 ], [ 0, %354 ]
  %382 = phi i8* [ %379, %372 ], [ null, %354 ]
  %383 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %383) #6
  %384 = icmp eq %struct.TfLiteTensor* %67, null
  br i1 %384, label %385, label %387

385:                                              ; preds = %380
  %386 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %386, align 8, !alias.scope !14
  br label %415

387:                                              ; preds = %380
  %388 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %67, i64 0, i32 2
  %389 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %388, align 8, !noalias !14
  %390 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %389, i64 0, i32 0
  %391 = load i32, i32* %390, align 4, !noalias !14
  %392 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %389, i64 0, i32 1, i64 0
  %393 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %391, i32* %393, align 8, !alias.scope !14
  %394 = icmp sgt i32 %391, 5
  br i1 %394, label %395, label %402

395:                                              ; preds = %387
  %396 = sext i32 %391 to i64
  %397 = shl nsw i64 %396, 2
  %398 = tail call i8* @_Znam(i64 %397) #7, !noalias !14
  %399 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %400 = bitcast i32** %399 to i8**
  store i8* %398, i8** %400, align 8, !alias.scope !14
  %401 = bitcast i8* %398 to i32*
  br label %407

402:                                              ; preds = %387
  %403 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %404 = bitcast %union.anon* %403 to i32*
  %405 = sext i32 %391 to i64
  %406 = shl nsw i64 %405, 2
  br label %407

407:                                              ; preds = %402, %395
  %408 = phi i64 [ %397, %395 ], [ %406, %402 ]
  %409 = phi i32* [ %401, %395 ], [ %404, %402 ]
  %410 = bitcast i32* %409 to i8*
  %411 = bitcast i32* %392 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %410, i8* align 4 %411, i64 %408, i1 false) #6
  %412 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %67, i64 0, i32 1
  %413 = bitcast %union.TfLitePtrUnion* %412 to i8**
  %414 = load i8*, i8** %413, align 8
  br label %415

415:                                              ; preds = %385, %407
  %416 = phi i32 [ %391, %407 ], [ 0, %385 ]
  %417 = phi i8* [ %414, %407 ], [ null, %385 ]
  %418 = icmp sgt i32 %48, 0
  br i1 %418, label %422, label %419

419:                                              ; preds = %415
  %420 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %421 = load i32*, i32** %420, align 8
  br label %451

422:                                              ; preds = %415
  %423 = icmp sgt i32 %381, 5
  %424 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %425 = getelementptr inbounds %union.anon, %union.anon* %424, i64 0, i32 0
  %426 = load i32*, i32** %425, align 8
  %427 = bitcast %union.anon* %424 to [5 x i32]*
  %428 = zext i32 %48 to i64
  %429 = add nsw i64 %428, -1
  %430 = and i64 %428, 3
  %431 = icmp ult i64 %429, 3
  br i1 %431, label %434, label %432

432:                                              ; preds = %422
  %433 = sub nsw i64 %428, %430
  br label %469

434:                                              ; preds = %469, %422
  %435 = phi i32 [ undef, %422 ], [ %495, %469 ]
  %436 = phi i64 [ 0, %422 ], [ %496, %469 ]
  %437 = phi i32 [ 1, %422 ], [ %495, %469 ]
  %438 = icmp eq i64 %430, 0
  br i1 %438, label %451, label %439

439:                                              ; preds = %434, %439
  %440 = phi i64 [ %448, %439 ], [ %436, %434 ]
  %441 = phi i32 [ %447, %439 ], [ %437, %434 ]
  %442 = phi i64 [ %449, %439 ], [ %430, %434 ]
  %443 = getelementptr inbounds i32, i32* %426, i64 %440
  %444 = getelementptr inbounds [5 x i32], [5 x i32]* %427, i64 0, i64 %440
  %445 = select i1 %423, i32* %443, i32* %444
  %446 = load i32, i32* %445, align 4
  %447 = mul nsw i32 %446, %441
  %448 = add nuw nsw i64 %440, 1
  %449 = add i64 %442, -1
  %450 = icmp eq i64 %449, 0
  br i1 %450, label %451, label %439, !llvm.loop !17

451:                                              ; preds = %434, %439, %419
  %452 = phi i32* [ %421, %419 ], [ %426, %439 ], [ %426, %434 ]
  %453 = phi i32 [ 1, %419 ], [ %435, %434 ], [ %447, %439 ]
  %454 = add i32 %48, 1
  %455 = icmp slt i32 %454, %381
  %456 = icmp sgt i32 %381, 5
  %457 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %458 = bitcast %union.anon* %457 to [5 x i32]*
  br i1 %455, label %459, label %516

459:                                              ; preds = %451
  %460 = sext i32 %454 to i64
  %461 = sext i32 %381 to i64
  %462 = sub nsw i64 %461, %460
  %463 = xor i64 %460, -1
  %464 = add nsw i64 %463, %461
  %465 = and i64 %462, 3
  %466 = icmp ult i64 %464, 3
  br i1 %466, label %499, label %467

467:                                              ; preds = %459
  %468 = sub nsw i64 %462, %465
  br label %534

469:                                              ; preds = %469, %432
  %470 = phi i64 [ 0, %432 ], [ %496, %469 ]
  %471 = phi i32 [ 1, %432 ], [ %495, %469 ]
  %472 = phi i64 [ %433, %432 ], [ %497, %469 ]
  %473 = getelementptr inbounds i32, i32* %426, i64 %470
  %474 = getelementptr inbounds [5 x i32], [5 x i32]* %427, i64 0, i64 %470
  %475 = select i1 %423, i32* %473, i32* %474
  %476 = load i32, i32* %475, align 4
  %477 = mul nsw i32 %476, %471
  %478 = or i64 %470, 1
  %479 = getelementptr inbounds i32, i32* %426, i64 %478
  %480 = getelementptr inbounds [5 x i32], [5 x i32]* %427, i64 0, i64 %478
  %481 = select i1 %423, i32* %479, i32* %480
  %482 = load i32, i32* %481, align 4
  %483 = mul nsw i32 %482, %477
  %484 = or i64 %470, 2
  %485 = getelementptr inbounds i32, i32* %426, i64 %484
  %486 = getelementptr inbounds [5 x i32], [5 x i32]* %427, i64 0, i64 %484
  %487 = select i1 %423, i32* %485, i32* %486
  %488 = load i32, i32* %487, align 4
  %489 = mul nsw i32 %488, %483
  %490 = or i64 %470, 3
  %491 = getelementptr inbounds i32, i32* %426, i64 %490
  %492 = getelementptr inbounds [5 x i32], [5 x i32]* %427, i64 0, i64 %490
  %493 = select i1 %423, i32* %491, i32* %492
  %494 = load i32, i32* %493, align 4
  %495 = mul nsw i32 %494, %489
  %496 = add nuw nsw i64 %470, 4
  %497 = add i64 %472, -4
  %498 = icmp eq i64 %497, 0
  br i1 %498, label %434, label %469

499:                                              ; preds = %534, %459
  %500 = phi i32 [ undef, %459 ], [ %560, %534 ]
  %501 = phi i64 [ %460, %459 ], [ %561, %534 ]
  %502 = phi i32 [ 1, %459 ], [ %560, %534 ]
  %503 = icmp eq i64 %465, 0
  br i1 %503, label %516, label %504

504:                                              ; preds = %499, %504
  %505 = phi i64 [ %513, %504 ], [ %501, %499 ]
  %506 = phi i32 [ %512, %504 ], [ %502, %499 ]
  %507 = phi i64 [ %514, %504 ], [ %465, %499 ]
  %508 = getelementptr inbounds i32, i32* %452, i64 %505
  %509 = getelementptr inbounds [5 x i32], [5 x i32]* %458, i64 0, i64 %505
  %510 = select i1 %456, i32* %508, i32* %509
  %511 = load i32, i32* %510, align 4
  %512 = mul nsw i32 %511, %506
  %513 = add nsw i64 %505, 1
  %514 = add i64 %507, -1
  %515 = icmp eq i64 %514, 0
  br i1 %515, label %516, label %504, !llvm.loop !18

516:                                              ; preds = %499, %504, %451
  %517 = phi i32 [ 1, %451 ], [ %500, %499 ], [ %512, %504 ]
  %518 = sext i32 %48 to i64
  %519 = getelementptr inbounds i32, i32* %452, i64 %518
  %520 = getelementptr inbounds [5 x i32], [5 x i32]* %458, i64 0, i64 %518
  %521 = select i1 %456, i32* %519, i32* %520
  %522 = load i32, i32* %521, align 4
  %523 = icmp sgt i32 %453, 0
  br i1 %523, label %524, label %610

524:                                              ; preds = %516
  %525 = icmp sgt i32 %522, 0
  %526 = sext i32 %517 to i64
  %527 = sext i32 %522 to i64
  %528 = zext i32 %453 to i64
  %529 = zext i32 %522 to i64
  %530 = and i64 %529, 1
  %531 = icmp eq i32 %522, 1
  %532 = sub nsw i64 %529, %530
  %533 = icmp eq i64 %530, 0
  br label %564

534:                                              ; preds = %534, %467
  %535 = phi i64 [ %460, %467 ], [ %561, %534 ]
  %536 = phi i32 [ 1, %467 ], [ %560, %534 ]
  %537 = phi i64 [ %468, %467 ], [ %562, %534 ]
  %538 = getelementptr inbounds i32, i32* %452, i64 %535
  %539 = getelementptr inbounds [5 x i32], [5 x i32]* %458, i64 0, i64 %535
  %540 = select i1 %456, i32* %538, i32* %539
  %541 = load i32, i32* %540, align 4
  %542 = mul nsw i32 %541, %536
  %543 = add nsw i64 %535, 1
  %544 = getelementptr inbounds i32, i32* %452, i64 %543
  %545 = getelementptr inbounds [5 x i32], [5 x i32]* %458, i64 0, i64 %543
  %546 = select i1 %456, i32* %544, i32* %545
  %547 = load i32, i32* %546, align 4
  %548 = mul nsw i32 %547, %542
  %549 = add nsw i64 %535, 2
  %550 = getelementptr inbounds i32, i32* %452, i64 %549
  %551 = getelementptr inbounds [5 x i32], [5 x i32]* %458, i64 0, i64 %549
  %552 = select i1 %456, i32* %550, i32* %551
  %553 = load i32, i32* %552, align 4
  %554 = mul nsw i32 %553, %548
  %555 = add nsw i64 %535, 3
  %556 = getelementptr inbounds i32, i32* %452, i64 %555
  %557 = getelementptr inbounds [5 x i32], [5 x i32]* %458, i64 0, i64 %555
  %558 = select i1 %456, i32* %556, i32* %557
  %559 = load i32, i32* %558, align 4
  %560 = mul nsw i32 %559, %554
  %561 = add nsw i64 %535, 4
  %562 = add i64 %537, -4
  %563 = icmp eq i64 %562, 0
  br i1 %563, label %499, label %534

564:                                              ; preds = %582, %524
  %565 = phi i64 [ 0, %524 ], [ %583, %582 ]
  br i1 %525, label %566, label %582

566:                                              ; preds = %564
  %567 = mul nsw i64 %565, %527
  %568 = trunc i64 %567 to i32
  %569 = add i32 %522, %568
  br i1 %531, label %570, label %585

570:                                              ; preds = %585, %566
  %571 = phi i64 [ 0, %566 ], [ %607, %585 ]
  br i1 %533, label %582, label %572

572:                                              ; preds = %570
  %573 = add nsw i64 %571, %567
  %574 = mul nsw i64 %573, %526
  %575 = getelementptr inbounds i8, i8* %417, i64 %574
  %576 = trunc i64 %571 to i32
  %577 = xor i32 %576, -1
  %578 = add i32 %569, %577
  %579 = mul nsw i32 %578, %517
  %580 = sext i32 %579 to i64
  %581 = getelementptr inbounds i8, i8* %382, i64 %580
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %575, i8* align 1 %581, i64 %526, i1 false) #6
  br label %582

582:                                              ; preds = %572, %570, %564
  %583 = add nuw nsw i64 %565, 1
  %584 = icmp eq i64 %583, %528
  br i1 %584, label %610, label %564

585:                                              ; preds = %566, %585
  %586 = phi i64 [ %607, %585 ], [ 0, %566 ]
  %587 = phi i64 [ %608, %585 ], [ %532, %566 ]
  %588 = add nsw i64 %586, %567
  %589 = mul nsw i64 %588, %526
  %590 = getelementptr inbounds i8, i8* %417, i64 %589
  %591 = trunc i64 %586 to i32
  %592 = xor i32 %591, -1
  %593 = add i32 %569, %592
  %594 = mul nsw i32 %593, %517
  %595 = sext i32 %594 to i64
  %596 = getelementptr inbounds i8, i8* %382, i64 %595
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %590, i8* align 1 %596, i64 %526, i1 false) #6
  %597 = or i64 %586, 1
  %598 = add nsw i64 %597, %567
  %599 = mul nsw i64 %598, %526
  %600 = getelementptr inbounds i8, i8* %417, i64 %599
  %601 = trunc i64 %597 to i32
  %602 = xor i32 %601, -1
  %603 = add i32 %569, %602
  %604 = mul nsw i32 %603, %517
  %605 = sext i32 %604 to i64
  %606 = getelementptr inbounds i8, i8* %382, i64 %605
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %600, i8* align 1 %606, i64 %526, i1 false) #6
  %607 = add nuw nsw i64 %586, 2
  %608 = add i64 %587, -2
  %609 = icmp eq i64 %608, 0
  br i1 %609, label %570, label %585

610:                                              ; preds = %582, %516
  %611 = icmp sgt i32 %416, 5
  br i1 %611, label %612, label %618

612:                                              ; preds = %610
  %613 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %614 = load i32*, i32** %613, align 8
  %615 = icmp eq i32* %614, null
  br i1 %615, label %618, label %616

616:                                              ; preds = %612
  %617 = bitcast i32* %614 to i8*
  tail call void @_ZdaPv(i8* %617) #7
  br label %618

618:                                              ; preds = %610, %612, %616
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %383) #6
  %619 = xor i1 %456, true
  %620 = icmp eq i32* %452, null
  %621 = or i1 %620, %619
  br i1 %621, label %624, label %622

622:                                              ; preds = %618
  %623 = bitcast i32* %452 to i8*
  tail call void @_ZdaPv(i8* %623) #7
  br label %624

624:                                              ; preds = %618, %622
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %352) #6
  br label %1744

625:                                              ; preds = %66
  %626 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %626) #6
  %627 = icmp eq %struct.TfLiteTensor* %26, null
  br i1 %627, label %628, label %630

628:                                              ; preds = %625
  %629 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %629, align 8, !alias.scope !19
  br label %654

630:                                              ; preds = %625
  %631 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %43, i64 0, i32 1, i64 0
  %632 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %45, i32* %632, align 8, !alias.scope !19
  %633 = icmp sgt i32 %45, 5
  br i1 %633, label %634, label %641

634:                                              ; preds = %630
  %635 = sext i32 %45 to i64
  %636 = shl nsw i64 %635, 2
  %637 = tail call i8* @_Znam(i64 %636) #7, !noalias !19
  %638 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %639 = bitcast i32** %638 to i8**
  store i8* %637, i8** %639, align 8, !alias.scope !19
  %640 = bitcast i8* %637 to i32*
  br label %646

641:                                              ; preds = %630
  %642 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %643 = bitcast %union.anon* %642 to i32*
  %644 = sext i32 %45 to i64
  %645 = shl nsw i64 %644, 2
  br label %646

646:                                              ; preds = %641, %634
  %647 = phi i64 [ %636, %634 ], [ %645, %641 ]
  %648 = phi i32* [ %640, %634 ], [ %643, %641 ]
  %649 = bitcast i32* %648 to i8*
  %650 = bitcast i32* %631 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %649, i8* align 4 %650, i64 %647, i1 false) #6
  %651 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 0, i32 1
  %652 = bitcast %union.TfLitePtrUnion* %651 to i16**
  %653 = load i16*, i16** %652, align 8
  br label %654

654:                                              ; preds = %628, %646
  %655 = phi i32 [ %45, %646 ], [ 0, %628 ]
  %656 = phi i16* [ %653, %646 ], [ null, %628 ]
  %657 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %657) #6
  %658 = icmp eq %struct.TfLiteTensor* %67, null
  br i1 %658, label %659, label %661

659:                                              ; preds = %654
  %660 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %660, align 8, !alias.scope !22
  br label %689

661:                                              ; preds = %654
  %662 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %67, i64 0, i32 2
  %663 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %662, align 8, !noalias !22
  %664 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %663, i64 0, i32 0
  %665 = load i32, i32* %664, align 4, !noalias !22
  %666 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %663, i64 0, i32 1, i64 0
  %667 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %665, i32* %667, align 8, !alias.scope !22
  %668 = icmp sgt i32 %665, 5
  br i1 %668, label %669, label %676

669:                                              ; preds = %661
  %670 = sext i32 %665 to i64
  %671 = shl nsw i64 %670, 2
  %672 = tail call i8* @_Znam(i64 %671) #7, !noalias !22
  %673 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %674 = bitcast i32** %673 to i8**
  store i8* %672, i8** %674, align 8, !alias.scope !22
  %675 = bitcast i8* %672 to i32*
  br label %681

676:                                              ; preds = %661
  %677 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %678 = bitcast %union.anon* %677 to i32*
  %679 = sext i32 %665 to i64
  %680 = shl nsw i64 %679, 2
  br label %681

681:                                              ; preds = %676, %669
  %682 = phi i64 [ %671, %669 ], [ %680, %676 ]
  %683 = phi i32* [ %675, %669 ], [ %678, %676 ]
  %684 = bitcast i32* %683 to i8*
  %685 = bitcast i32* %666 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %684, i8* align 4 %685, i64 %682, i1 false) #6
  %686 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %67, i64 0, i32 1
  %687 = bitcast %union.TfLitePtrUnion* %686 to i16**
  %688 = load i16*, i16** %687, align 8
  br label %689

689:                                              ; preds = %659, %681
  %690 = phi i32 [ %665, %681 ], [ 0, %659 ]
  %691 = phi i16* [ %688, %681 ], [ null, %659 ]
  %692 = icmp sgt i32 %48, 0
  br i1 %692, label %696, label %693

693:                                              ; preds = %689
  %694 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %695 = load i32*, i32** %694, align 8
  br label %725

696:                                              ; preds = %689
  %697 = icmp sgt i32 %655, 5
  %698 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %699 = getelementptr inbounds %union.anon, %union.anon* %698, i64 0, i32 0
  %700 = load i32*, i32** %699, align 8
  %701 = bitcast %union.anon* %698 to [5 x i32]*
  %702 = zext i32 %48 to i64
  %703 = add nsw i64 %702, -1
  %704 = and i64 %702, 3
  %705 = icmp ult i64 %703, 3
  br i1 %705, label %708, label %706

706:                                              ; preds = %696
  %707 = sub nsw i64 %702, %704
  br label %743

708:                                              ; preds = %743, %696
  %709 = phi i32 [ undef, %696 ], [ %769, %743 ]
  %710 = phi i64 [ 0, %696 ], [ %770, %743 ]
  %711 = phi i32 [ 1, %696 ], [ %769, %743 ]
  %712 = icmp eq i64 %704, 0
  br i1 %712, label %725, label %713

713:                                              ; preds = %708, %713
  %714 = phi i64 [ %722, %713 ], [ %710, %708 ]
  %715 = phi i32 [ %721, %713 ], [ %711, %708 ]
  %716 = phi i64 [ %723, %713 ], [ %704, %708 ]
  %717 = getelementptr inbounds i32, i32* %700, i64 %714
  %718 = getelementptr inbounds [5 x i32], [5 x i32]* %701, i64 0, i64 %714
  %719 = select i1 %697, i32* %717, i32* %718
  %720 = load i32, i32* %719, align 4
  %721 = mul nsw i32 %720, %715
  %722 = add nuw nsw i64 %714, 1
  %723 = add i64 %716, -1
  %724 = icmp eq i64 %723, 0
  br i1 %724, label %725, label %713, !llvm.loop !25

725:                                              ; preds = %708, %713, %693
  %726 = phi i32* [ %695, %693 ], [ %700, %713 ], [ %700, %708 ]
  %727 = phi i32 [ 1, %693 ], [ %709, %708 ], [ %721, %713 ]
  %728 = add i32 %48, 1
  %729 = icmp slt i32 %728, %655
  %730 = icmp sgt i32 %655, 5
  %731 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %732 = bitcast %union.anon* %731 to [5 x i32]*
  br i1 %729, label %733, label %790

733:                                              ; preds = %725
  %734 = sext i32 %728 to i64
  %735 = sext i32 %655 to i64
  %736 = sub nsw i64 %735, %734
  %737 = xor i64 %734, -1
  %738 = add nsw i64 %737, %735
  %739 = and i64 %736, 3
  %740 = icmp ult i64 %738, 3
  br i1 %740, label %773, label %741

741:                                              ; preds = %733
  %742 = sub nsw i64 %736, %739
  br label %809

743:                                              ; preds = %743, %706
  %744 = phi i64 [ 0, %706 ], [ %770, %743 ]
  %745 = phi i32 [ 1, %706 ], [ %769, %743 ]
  %746 = phi i64 [ %707, %706 ], [ %771, %743 ]
  %747 = getelementptr inbounds i32, i32* %700, i64 %744
  %748 = getelementptr inbounds [5 x i32], [5 x i32]* %701, i64 0, i64 %744
  %749 = select i1 %697, i32* %747, i32* %748
  %750 = load i32, i32* %749, align 4
  %751 = mul nsw i32 %750, %745
  %752 = or i64 %744, 1
  %753 = getelementptr inbounds i32, i32* %700, i64 %752
  %754 = getelementptr inbounds [5 x i32], [5 x i32]* %701, i64 0, i64 %752
  %755 = select i1 %697, i32* %753, i32* %754
  %756 = load i32, i32* %755, align 4
  %757 = mul nsw i32 %756, %751
  %758 = or i64 %744, 2
  %759 = getelementptr inbounds i32, i32* %700, i64 %758
  %760 = getelementptr inbounds [5 x i32], [5 x i32]* %701, i64 0, i64 %758
  %761 = select i1 %697, i32* %759, i32* %760
  %762 = load i32, i32* %761, align 4
  %763 = mul nsw i32 %762, %757
  %764 = or i64 %744, 3
  %765 = getelementptr inbounds i32, i32* %700, i64 %764
  %766 = getelementptr inbounds [5 x i32], [5 x i32]* %701, i64 0, i64 %764
  %767 = select i1 %697, i32* %765, i32* %766
  %768 = load i32, i32* %767, align 4
  %769 = mul nsw i32 %768, %763
  %770 = add nuw nsw i64 %744, 4
  %771 = add i64 %746, -4
  %772 = icmp eq i64 %771, 0
  br i1 %772, label %708, label %743

773:                                              ; preds = %809, %733
  %774 = phi i32 [ undef, %733 ], [ %835, %809 ]
  %775 = phi i64 [ %734, %733 ], [ %836, %809 ]
  %776 = phi i32 [ 1, %733 ], [ %835, %809 ]
  %777 = icmp eq i64 %739, 0
  br i1 %777, label %790, label %778

778:                                              ; preds = %773, %778
  %779 = phi i64 [ %787, %778 ], [ %775, %773 ]
  %780 = phi i32 [ %786, %778 ], [ %776, %773 ]
  %781 = phi i64 [ %788, %778 ], [ %739, %773 ]
  %782 = getelementptr inbounds i32, i32* %726, i64 %779
  %783 = getelementptr inbounds [5 x i32], [5 x i32]* %732, i64 0, i64 %779
  %784 = select i1 %730, i32* %782, i32* %783
  %785 = load i32, i32* %784, align 4
  %786 = mul nsw i32 %785, %780
  %787 = add nsw i64 %779, 1
  %788 = add i64 %781, -1
  %789 = icmp eq i64 %788, 0
  br i1 %789, label %790, label %778, !llvm.loop !26

790:                                              ; preds = %773, %778, %725
  %791 = phi i32 [ 1, %725 ], [ %774, %773 ], [ %786, %778 ]
  %792 = sext i32 %48 to i64
  %793 = getelementptr inbounds i32, i32* %726, i64 %792
  %794 = getelementptr inbounds [5 x i32], [5 x i32]* %732, i64 0, i64 %792
  %795 = select i1 %730, i32* %793, i32* %794
  %796 = load i32, i32* %795, align 4
  %797 = icmp sgt i32 %727, 0
  br i1 %797, label %798, label %891

798:                                              ; preds = %790
  %799 = icmp sgt i32 %796, 0
  %800 = sext i32 %791 to i64
  %801 = shl nsw i64 %800, 1
  %802 = sext i32 %796 to i64
  %803 = zext i32 %727 to i64
  %804 = zext i32 %796 to i64
  %805 = and i64 %804, 1
  %806 = icmp eq i32 %796, 1
  %807 = sub nsw i64 %804, %805
  %808 = icmp eq i64 %805, 0
  br label %839

809:                                              ; preds = %809, %741
  %810 = phi i64 [ %734, %741 ], [ %836, %809 ]
  %811 = phi i32 [ 1, %741 ], [ %835, %809 ]
  %812 = phi i64 [ %742, %741 ], [ %837, %809 ]
  %813 = getelementptr inbounds i32, i32* %726, i64 %810
  %814 = getelementptr inbounds [5 x i32], [5 x i32]* %732, i64 0, i64 %810
  %815 = select i1 %730, i32* %813, i32* %814
  %816 = load i32, i32* %815, align 4
  %817 = mul nsw i32 %816, %811
  %818 = add nsw i64 %810, 1
  %819 = getelementptr inbounds i32, i32* %726, i64 %818
  %820 = getelementptr inbounds [5 x i32], [5 x i32]* %732, i64 0, i64 %818
  %821 = select i1 %730, i32* %819, i32* %820
  %822 = load i32, i32* %821, align 4
  %823 = mul nsw i32 %822, %817
  %824 = add nsw i64 %810, 2
  %825 = getelementptr inbounds i32, i32* %726, i64 %824
  %826 = getelementptr inbounds [5 x i32], [5 x i32]* %732, i64 0, i64 %824
  %827 = select i1 %730, i32* %825, i32* %826
  %828 = load i32, i32* %827, align 4
  %829 = mul nsw i32 %828, %823
  %830 = add nsw i64 %810, 3
  %831 = getelementptr inbounds i32, i32* %726, i64 %830
  %832 = getelementptr inbounds [5 x i32], [5 x i32]* %732, i64 0, i64 %830
  %833 = select i1 %730, i32* %831, i32* %832
  %834 = load i32, i32* %833, align 4
  %835 = mul nsw i32 %834, %829
  %836 = add nsw i64 %810, 4
  %837 = add i64 %812, -4
  %838 = icmp eq i64 %837, 0
  br i1 %838, label %773, label %809

839:                                              ; preds = %859, %798
  %840 = phi i64 [ 0, %798 ], [ %860, %859 ]
  br i1 %799, label %841, label %859

841:                                              ; preds = %839
  %842 = mul nsw i64 %840, %802
  %843 = trunc i64 %842 to i32
  %844 = add i32 %796, %843
  br i1 %806, label %845, label %862

845:                                              ; preds = %862, %841
  %846 = phi i64 [ 0, %841 ], [ %888, %862 ]
  br i1 %808, label %859, label %847

847:                                              ; preds = %845
  %848 = add nsw i64 %846, %842
  %849 = mul nsw i64 %848, %800
  %850 = getelementptr inbounds i16, i16* %691, i64 %849
  %851 = trunc i64 %846 to i32
  %852 = xor i32 %851, -1
  %853 = add i32 %844, %852
  %854 = mul nsw i32 %853, %791
  %855 = bitcast i16* %850 to i8*
  %856 = sext i32 %854 to i64
  %857 = getelementptr inbounds i16, i16* %656, i64 %856
  %858 = bitcast i16* %857 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %855, i8* align 2 %858, i64 %801, i1 false) #6
  br label %859

859:                                              ; preds = %847, %845, %839
  %860 = add nuw nsw i64 %840, 1
  %861 = icmp eq i64 %860, %803
  br i1 %861, label %891, label %839

862:                                              ; preds = %841, %862
  %863 = phi i64 [ %888, %862 ], [ 0, %841 ]
  %864 = phi i64 [ %889, %862 ], [ %807, %841 ]
  %865 = add nsw i64 %863, %842
  %866 = mul nsw i64 %865, %800
  %867 = getelementptr inbounds i16, i16* %691, i64 %866
  %868 = trunc i64 %863 to i32
  %869 = xor i32 %868, -1
  %870 = add i32 %844, %869
  %871 = mul nsw i32 %870, %791
  %872 = bitcast i16* %867 to i8*
  %873 = sext i32 %871 to i64
  %874 = getelementptr inbounds i16, i16* %656, i64 %873
  %875 = bitcast i16* %874 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %872, i8* align 2 %875, i64 %801, i1 false) #6
  %876 = or i64 %863, 1
  %877 = add nsw i64 %876, %842
  %878 = mul nsw i64 %877, %800
  %879 = getelementptr inbounds i16, i16* %691, i64 %878
  %880 = trunc i64 %876 to i32
  %881 = xor i32 %880, -1
  %882 = add i32 %844, %881
  %883 = mul nsw i32 %882, %791
  %884 = bitcast i16* %879 to i8*
  %885 = sext i32 %883 to i64
  %886 = getelementptr inbounds i16, i16* %656, i64 %885
  %887 = bitcast i16* %886 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %884, i8* align 2 %887, i64 %801, i1 false) #6
  %888 = add nuw nsw i64 %863, 2
  %889 = add i64 %864, -2
  %890 = icmp eq i64 %889, 0
  br i1 %890, label %845, label %862

891:                                              ; preds = %859, %790
  %892 = icmp sgt i32 %690, 5
  br i1 %892, label %893, label %899

893:                                              ; preds = %891
  %894 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %895 = load i32*, i32** %894, align 8
  %896 = icmp eq i32* %895, null
  br i1 %896, label %899, label %897

897:                                              ; preds = %893
  %898 = bitcast i32* %895 to i8*
  tail call void @_ZdaPv(i8* %898) #7
  br label %899

899:                                              ; preds = %891, %893, %897
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %657) #6
  %900 = xor i1 %730, true
  %901 = icmp eq i32* %726, null
  %902 = or i1 %901, %900
  br i1 %902, label %905, label %903

903:                                              ; preds = %899
  %904 = bitcast i32* %726 to i8*
  tail call void @_ZdaPv(i8* %904) #7
  br label %905

905:                                              ; preds = %899, %903
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %626) #6
  br label %1744

906:                                              ; preds = %66
  %907 = bitcast %"class.tflite::RuntimeShape"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %907) #6
  %908 = icmp eq %struct.TfLiteTensor* %26, null
  br i1 %908, label %909, label %911

909:                                              ; preds = %906
  %910 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 0, i32* %910, align 8, !alias.scope !27
  br label %934

911:                                              ; preds = %906
  %912 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %43, i64 0, i32 1, i64 0
  %913 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 %45, i32* %913, align 8, !alias.scope !27
  %914 = icmp sgt i32 %45, 5
  br i1 %914, label %915, label %922

915:                                              ; preds = %911
  %916 = sext i32 %45 to i64
  %917 = shl nsw i64 %916, 2
  %918 = tail call i8* @_Znam(i64 %917) #7, !noalias !27
  %919 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %920 = bitcast i32** %919 to i8**
  store i8* %918, i8** %920, align 8, !alias.scope !27
  %921 = bitcast i8* %918 to i32*
  br label %927

922:                                              ; preds = %911
  %923 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %924 = bitcast %union.anon* %923 to i32*
  %925 = sext i32 %45 to i64
  %926 = shl nsw i64 %925, 2
  br label %927

927:                                              ; preds = %922, %915
  %928 = phi i64 [ %917, %915 ], [ %926, %922 ]
  %929 = phi i32* [ %921, %915 ], [ %924, %922 ]
  %930 = bitcast i32* %929 to i8*
  %931 = bitcast i32* %912 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %930, i8* align 4 %931, i64 %928, i1 false) #6
  %932 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 0, i32 1, i32 0
  %933 = load i32*, i32** %932, align 8
  br label %934

934:                                              ; preds = %909, %927
  %935 = phi i32 [ %45, %927 ], [ 0, %909 ]
  %936 = phi i32* [ %933, %927 ], [ null, %909 ]
  %937 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %937) #6
  %938 = icmp eq %struct.TfLiteTensor* %67, null
  br i1 %938, label %939, label %941

939:                                              ; preds = %934
  %940 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %940, align 8, !alias.scope !30
  br label %968

941:                                              ; preds = %934
  %942 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %67, i64 0, i32 2
  %943 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %942, align 8, !noalias !30
  %944 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %943, i64 0, i32 0
  %945 = load i32, i32* %944, align 4, !noalias !30
  %946 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %943, i64 0, i32 1, i64 0
  %947 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %945, i32* %947, align 8, !alias.scope !30
  %948 = icmp sgt i32 %945, 5
  br i1 %948, label %949, label %956

949:                                              ; preds = %941
  %950 = sext i32 %945 to i64
  %951 = shl nsw i64 %950, 2
  %952 = tail call i8* @_Znam(i64 %951) #7, !noalias !30
  %953 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %954 = bitcast i32** %953 to i8**
  store i8* %952, i8** %954, align 8, !alias.scope !30
  %955 = bitcast i8* %952 to i32*
  br label %961

956:                                              ; preds = %941
  %957 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %958 = bitcast %union.anon* %957 to i32*
  %959 = sext i32 %945 to i64
  %960 = shl nsw i64 %959, 2
  br label %961

961:                                              ; preds = %956, %949
  %962 = phi i64 [ %951, %949 ], [ %960, %956 ]
  %963 = phi i32* [ %955, %949 ], [ %958, %956 ]
  %964 = bitcast i32* %963 to i8*
  %965 = bitcast i32* %946 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %964, i8* align 4 %965, i64 %962, i1 false) #6
  %966 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %67, i64 0, i32 1, i32 0
  %967 = load i32*, i32** %966, align 8
  br label %968

968:                                              ; preds = %939, %961
  %969 = phi i32 [ %945, %961 ], [ 0, %939 ]
  %970 = phi i32* [ %967, %961 ], [ null, %939 ]
  %971 = icmp sgt i32 %48, 0
  br i1 %971, label %975, label %972

972:                                              ; preds = %968
  %973 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %974 = load i32*, i32** %973, align 8
  br label %1004

975:                                              ; preds = %968
  %976 = icmp sgt i32 %935, 5
  %977 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %978 = getelementptr inbounds %union.anon, %union.anon* %977, i64 0, i32 0
  %979 = load i32*, i32** %978, align 8
  %980 = bitcast %union.anon* %977 to [5 x i32]*
  %981 = zext i32 %48 to i64
  %982 = add nsw i64 %981, -1
  %983 = and i64 %981, 3
  %984 = icmp ult i64 %982, 3
  br i1 %984, label %987, label %985

985:                                              ; preds = %975
  %986 = sub nsw i64 %981, %983
  br label %1022

987:                                              ; preds = %1022, %975
  %988 = phi i32 [ undef, %975 ], [ %1048, %1022 ]
  %989 = phi i64 [ 0, %975 ], [ %1049, %1022 ]
  %990 = phi i32 [ 1, %975 ], [ %1048, %1022 ]
  %991 = icmp eq i64 %983, 0
  br i1 %991, label %1004, label %992

992:                                              ; preds = %987, %992
  %993 = phi i64 [ %1001, %992 ], [ %989, %987 ]
  %994 = phi i32 [ %1000, %992 ], [ %990, %987 ]
  %995 = phi i64 [ %1002, %992 ], [ %983, %987 ]
  %996 = getelementptr inbounds i32, i32* %979, i64 %993
  %997 = getelementptr inbounds [5 x i32], [5 x i32]* %980, i64 0, i64 %993
  %998 = select i1 %976, i32* %996, i32* %997
  %999 = load i32, i32* %998, align 4
  %1000 = mul nsw i32 %999, %994
  %1001 = add nuw nsw i64 %993, 1
  %1002 = add i64 %995, -1
  %1003 = icmp eq i64 %1002, 0
  br i1 %1003, label %1004, label %992, !llvm.loop !33

1004:                                             ; preds = %987, %992, %972
  %1005 = phi i32* [ %974, %972 ], [ %979, %992 ], [ %979, %987 ]
  %1006 = phi i32 [ 1, %972 ], [ %988, %987 ], [ %1000, %992 ]
  %1007 = add i32 %48, 1
  %1008 = icmp slt i32 %1007, %935
  %1009 = icmp sgt i32 %935, 5
  %1010 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %1011 = bitcast %union.anon* %1010 to [5 x i32]*
  br i1 %1008, label %1012, label %1069

1012:                                             ; preds = %1004
  %1013 = sext i32 %1007 to i64
  %1014 = sext i32 %935 to i64
  %1015 = sub nsw i64 %1014, %1013
  %1016 = xor i64 %1013, -1
  %1017 = add nsw i64 %1016, %1014
  %1018 = and i64 %1015, 3
  %1019 = icmp ult i64 %1017, 3
  br i1 %1019, label %1052, label %1020

1020:                                             ; preds = %1012
  %1021 = sub nsw i64 %1015, %1018
  br label %1088

1022:                                             ; preds = %1022, %985
  %1023 = phi i64 [ 0, %985 ], [ %1049, %1022 ]
  %1024 = phi i32 [ 1, %985 ], [ %1048, %1022 ]
  %1025 = phi i64 [ %986, %985 ], [ %1050, %1022 ]
  %1026 = getelementptr inbounds i32, i32* %979, i64 %1023
  %1027 = getelementptr inbounds [5 x i32], [5 x i32]* %980, i64 0, i64 %1023
  %1028 = select i1 %976, i32* %1026, i32* %1027
  %1029 = load i32, i32* %1028, align 4
  %1030 = mul nsw i32 %1029, %1024
  %1031 = or i64 %1023, 1
  %1032 = getelementptr inbounds i32, i32* %979, i64 %1031
  %1033 = getelementptr inbounds [5 x i32], [5 x i32]* %980, i64 0, i64 %1031
  %1034 = select i1 %976, i32* %1032, i32* %1033
  %1035 = load i32, i32* %1034, align 4
  %1036 = mul nsw i32 %1035, %1030
  %1037 = or i64 %1023, 2
  %1038 = getelementptr inbounds i32, i32* %979, i64 %1037
  %1039 = getelementptr inbounds [5 x i32], [5 x i32]* %980, i64 0, i64 %1037
  %1040 = select i1 %976, i32* %1038, i32* %1039
  %1041 = load i32, i32* %1040, align 4
  %1042 = mul nsw i32 %1041, %1036
  %1043 = or i64 %1023, 3
  %1044 = getelementptr inbounds i32, i32* %979, i64 %1043
  %1045 = getelementptr inbounds [5 x i32], [5 x i32]* %980, i64 0, i64 %1043
  %1046 = select i1 %976, i32* %1044, i32* %1045
  %1047 = load i32, i32* %1046, align 4
  %1048 = mul nsw i32 %1047, %1042
  %1049 = add nuw nsw i64 %1023, 4
  %1050 = add i64 %1025, -4
  %1051 = icmp eq i64 %1050, 0
  br i1 %1051, label %987, label %1022

1052:                                             ; preds = %1088, %1012
  %1053 = phi i32 [ undef, %1012 ], [ %1114, %1088 ]
  %1054 = phi i64 [ %1013, %1012 ], [ %1115, %1088 ]
  %1055 = phi i32 [ 1, %1012 ], [ %1114, %1088 ]
  %1056 = icmp eq i64 %1018, 0
  br i1 %1056, label %1069, label %1057

1057:                                             ; preds = %1052, %1057
  %1058 = phi i64 [ %1066, %1057 ], [ %1054, %1052 ]
  %1059 = phi i32 [ %1065, %1057 ], [ %1055, %1052 ]
  %1060 = phi i64 [ %1067, %1057 ], [ %1018, %1052 ]
  %1061 = getelementptr inbounds i32, i32* %1005, i64 %1058
  %1062 = getelementptr inbounds [5 x i32], [5 x i32]* %1011, i64 0, i64 %1058
  %1063 = select i1 %1009, i32* %1061, i32* %1062
  %1064 = load i32, i32* %1063, align 4
  %1065 = mul nsw i32 %1064, %1059
  %1066 = add nsw i64 %1058, 1
  %1067 = add i64 %1060, -1
  %1068 = icmp eq i64 %1067, 0
  br i1 %1068, label %1069, label %1057, !llvm.loop !34

1069:                                             ; preds = %1052, %1057, %1004
  %1070 = phi i32 [ 1, %1004 ], [ %1053, %1052 ], [ %1065, %1057 ]
  %1071 = sext i32 %48 to i64
  %1072 = getelementptr inbounds i32, i32* %1005, i64 %1071
  %1073 = getelementptr inbounds [5 x i32], [5 x i32]* %1011, i64 0, i64 %1071
  %1074 = select i1 %1009, i32* %1072, i32* %1073
  %1075 = load i32, i32* %1074, align 4
  %1076 = icmp sgt i32 %1006, 0
  br i1 %1076, label %1077, label %1170

1077:                                             ; preds = %1069
  %1078 = icmp sgt i32 %1075, 0
  %1079 = sext i32 %1070 to i64
  %1080 = shl nsw i64 %1079, 2
  %1081 = sext i32 %1075 to i64
  %1082 = zext i32 %1006 to i64
  %1083 = zext i32 %1075 to i64
  %1084 = and i64 %1083, 1
  %1085 = icmp eq i32 %1075, 1
  %1086 = sub nsw i64 %1083, %1084
  %1087 = icmp eq i64 %1084, 0
  br label %1118

1088:                                             ; preds = %1088, %1020
  %1089 = phi i64 [ %1013, %1020 ], [ %1115, %1088 ]
  %1090 = phi i32 [ 1, %1020 ], [ %1114, %1088 ]
  %1091 = phi i64 [ %1021, %1020 ], [ %1116, %1088 ]
  %1092 = getelementptr inbounds i32, i32* %1005, i64 %1089
  %1093 = getelementptr inbounds [5 x i32], [5 x i32]* %1011, i64 0, i64 %1089
  %1094 = select i1 %1009, i32* %1092, i32* %1093
  %1095 = load i32, i32* %1094, align 4
  %1096 = mul nsw i32 %1095, %1090
  %1097 = add nsw i64 %1089, 1
  %1098 = getelementptr inbounds i32, i32* %1005, i64 %1097
  %1099 = getelementptr inbounds [5 x i32], [5 x i32]* %1011, i64 0, i64 %1097
  %1100 = select i1 %1009, i32* %1098, i32* %1099
  %1101 = load i32, i32* %1100, align 4
  %1102 = mul nsw i32 %1101, %1096
  %1103 = add nsw i64 %1089, 2
  %1104 = getelementptr inbounds i32, i32* %1005, i64 %1103
  %1105 = getelementptr inbounds [5 x i32], [5 x i32]* %1011, i64 0, i64 %1103
  %1106 = select i1 %1009, i32* %1104, i32* %1105
  %1107 = load i32, i32* %1106, align 4
  %1108 = mul nsw i32 %1107, %1102
  %1109 = add nsw i64 %1089, 3
  %1110 = getelementptr inbounds i32, i32* %1005, i64 %1109
  %1111 = getelementptr inbounds [5 x i32], [5 x i32]* %1011, i64 0, i64 %1109
  %1112 = select i1 %1009, i32* %1110, i32* %1111
  %1113 = load i32, i32* %1112, align 4
  %1114 = mul nsw i32 %1113, %1108
  %1115 = add nsw i64 %1089, 4
  %1116 = add i64 %1091, -4
  %1117 = icmp eq i64 %1116, 0
  br i1 %1117, label %1052, label %1088

1118:                                             ; preds = %1138, %1077
  %1119 = phi i64 [ 0, %1077 ], [ %1139, %1138 ]
  br i1 %1078, label %1120, label %1138

1120:                                             ; preds = %1118
  %1121 = mul nsw i64 %1119, %1081
  %1122 = trunc i64 %1121 to i32
  %1123 = add i32 %1075, %1122
  br i1 %1085, label %1124, label %1141

1124:                                             ; preds = %1141, %1120
  %1125 = phi i64 [ 0, %1120 ], [ %1167, %1141 ]
  br i1 %1087, label %1138, label %1126

1126:                                             ; preds = %1124
  %1127 = add nsw i64 %1125, %1121
  %1128 = mul nsw i64 %1127, %1079
  %1129 = getelementptr inbounds i32, i32* %970, i64 %1128
  %1130 = trunc i64 %1125 to i32
  %1131 = xor i32 %1130, -1
  %1132 = add i32 %1123, %1131
  %1133 = mul nsw i32 %1132, %1070
  %1134 = bitcast i32* %1129 to i8*
  %1135 = sext i32 %1133 to i64
  %1136 = getelementptr inbounds i32, i32* %936, i64 %1135
  %1137 = bitcast i32* %1136 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1134, i8* align 4 %1137, i64 %1080, i1 false) #6
  br label %1138

1138:                                             ; preds = %1126, %1124, %1118
  %1139 = add nuw nsw i64 %1119, 1
  %1140 = icmp eq i64 %1139, %1082
  br i1 %1140, label %1170, label %1118

1141:                                             ; preds = %1120, %1141
  %1142 = phi i64 [ %1167, %1141 ], [ 0, %1120 ]
  %1143 = phi i64 [ %1168, %1141 ], [ %1086, %1120 ]
  %1144 = add nsw i64 %1142, %1121
  %1145 = mul nsw i64 %1144, %1079
  %1146 = getelementptr inbounds i32, i32* %970, i64 %1145
  %1147 = trunc i64 %1142 to i32
  %1148 = xor i32 %1147, -1
  %1149 = add i32 %1123, %1148
  %1150 = mul nsw i32 %1149, %1070
  %1151 = bitcast i32* %1146 to i8*
  %1152 = sext i32 %1150 to i64
  %1153 = getelementptr inbounds i32, i32* %936, i64 %1152
  %1154 = bitcast i32* %1153 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1151, i8* align 4 %1154, i64 %1080, i1 false) #6
  %1155 = or i64 %1142, 1
  %1156 = add nsw i64 %1155, %1121
  %1157 = mul nsw i64 %1156, %1079
  %1158 = getelementptr inbounds i32, i32* %970, i64 %1157
  %1159 = trunc i64 %1155 to i32
  %1160 = xor i32 %1159, -1
  %1161 = add i32 %1123, %1160
  %1162 = mul nsw i32 %1161, %1070
  %1163 = bitcast i32* %1158 to i8*
  %1164 = sext i32 %1162 to i64
  %1165 = getelementptr inbounds i32, i32* %936, i64 %1164
  %1166 = bitcast i32* %1165 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1163, i8* align 4 %1166, i64 %1080, i1 false) #6
  %1167 = add nuw nsw i64 %1142, 2
  %1168 = add i64 %1143, -2
  %1169 = icmp eq i64 %1168, 0
  br i1 %1169, label %1124, label %1141

1170:                                             ; preds = %1138, %1069
  %1171 = icmp sgt i32 %969, 5
  br i1 %1171, label %1172, label %1178

1172:                                             ; preds = %1170
  %1173 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %1174 = load i32*, i32** %1173, align 8
  %1175 = icmp eq i32* %1174, null
  br i1 %1175, label %1178, label %1176

1176:                                             ; preds = %1172
  %1177 = bitcast i32* %1174 to i8*
  tail call void @_ZdaPv(i8* %1177) #7
  br label %1178

1178:                                             ; preds = %1170, %1172, %1176
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %937) #6
  %1179 = xor i1 %1009, true
  %1180 = icmp eq i32* %1005, null
  %1181 = or i1 %1180, %1179
  br i1 %1181, label %1184, label %1182

1182:                                             ; preds = %1178
  %1183 = bitcast i32* %1005 to i8*
  tail call void @_ZdaPv(i8* %1183) #7
  br label %1184

1184:                                             ; preds = %1178, %1182
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %907) #6
  br label %1744

1185:                                             ; preds = %66
  %1186 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1186) #6
  %1187 = icmp eq %struct.TfLiteTensor* %26, null
  br i1 %1187, label %1188, label %1190

1188:                                             ; preds = %1185
  %1189 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %1189, align 8, !alias.scope !35
  br label %1214

1190:                                             ; preds = %1185
  %1191 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %43, i64 0, i32 1, i64 0
  %1192 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %45, i32* %1192, align 8, !alias.scope !35
  %1193 = icmp sgt i32 %45, 5
  br i1 %1193, label %1194, label %1201

1194:                                             ; preds = %1190
  %1195 = sext i32 %45 to i64
  %1196 = shl nsw i64 %1195, 2
  %1197 = tail call i8* @_Znam(i64 %1196) #7, !noalias !35
  %1198 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %1199 = bitcast i32** %1198 to i8**
  store i8* %1197, i8** %1199, align 8, !alias.scope !35
  %1200 = bitcast i8* %1197 to i32*
  br label %1206

1201:                                             ; preds = %1190
  %1202 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %1203 = bitcast %union.anon* %1202 to i32*
  %1204 = sext i32 %45 to i64
  %1205 = shl nsw i64 %1204, 2
  br label %1206

1206:                                             ; preds = %1201, %1194
  %1207 = phi i64 [ %1196, %1194 ], [ %1205, %1201 ]
  %1208 = phi i32* [ %1200, %1194 ], [ %1203, %1201 ]
  %1209 = bitcast i32* %1208 to i8*
  %1210 = bitcast i32* %1191 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1209, i8* align 4 %1210, i64 %1207, i1 false) #6
  %1211 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 0, i32 1
  %1212 = bitcast %union.TfLitePtrUnion* %1211 to i64**
  %1213 = load i64*, i64** %1212, align 8
  br label %1214

1214:                                             ; preds = %1188, %1206
  %1215 = phi i32 [ %45, %1206 ], [ 0, %1188 ]
  %1216 = phi i64* [ %1213, %1206 ], [ null, %1188 ]
  %1217 = bitcast %"class.tflite::RuntimeShape"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1217) #6
  %1218 = icmp eq %struct.TfLiteTensor* %67, null
  br i1 %1218, label %1219, label %1221

1219:                                             ; preds = %1214
  %1220 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 0, i32* %1220, align 8, !alias.scope !38
  br label %1249

1221:                                             ; preds = %1214
  %1222 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %67, i64 0, i32 2
  %1223 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1222, align 8, !noalias !38
  %1224 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1223, i64 0, i32 0
  %1225 = load i32, i32* %1224, align 4, !noalias !38
  %1226 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1223, i64 0, i32 1, i64 0
  %1227 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 %1225, i32* %1227, align 8, !alias.scope !38
  %1228 = icmp sgt i32 %1225, 5
  br i1 %1228, label %1229, label %1236

1229:                                             ; preds = %1221
  %1230 = sext i32 %1225 to i64
  %1231 = shl nsw i64 %1230, 2
  %1232 = tail call i8* @_Znam(i64 %1231) #7, !noalias !38
  %1233 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %1234 = bitcast i32** %1233 to i8**
  store i8* %1232, i8** %1234, align 8, !alias.scope !38
  %1235 = bitcast i8* %1232 to i32*
  br label %1241

1236:                                             ; preds = %1221
  %1237 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1
  %1238 = bitcast %union.anon* %1237 to i32*
  %1239 = sext i32 %1225 to i64
  %1240 = shl nsw i64 %1239, 2
  br label %1241

1241:                                             ; preds = %1236, %1229
  %1242 = phi i64 [ %1231, %1229 ], [ %1240, %1236 ]
  %1243 = phi i32* [ %1235, %1229 ], [ %1238, %1236 ]
  %1244 = bitcast i32* %1243 to i8*
  %1245 = bitcast i32* %1226 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1244, i8* align 4 %1245, i64 %1242, i1 false) #6
  %1246 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %67, i64 0, i32 1
  %1247 = bitcast %union.TfLitePtrUnion* %1246 to i64**
  %1248 = load i64*, i64** %1247, align 8
  br label %1249

1249:                                             ; preds = %1219, %1241
  %1250 = phi i32 [ %1225, %1241 ], [ 0, %1219 ]
  %1251 = phi i64* [ %1248, %1241 ], [ null, %1219 ]
  %1252 = icmp sgt i32 %48, 0
  br i1 %1252, label %1256, label %1253

1253:                                             ; preds = %1249
  %1254 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %1255 = load i32*, i32** %1254, align 8
  br label %1285

1256:                                             ; preds = %1249
  %1257 = icmp sgt i32 %1215, 5
  %1258 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %1259 = getelementptr inbounds %union.anon, %union.anon* %1258, i64 0, i32 0
  %1260 = load i32*, i32** %1259, align 8
  %1261 = bitcast %union.anon* %1258 to [5 x i32]*
  %1262 = zext i32 %48 to i64
  %1263 = add nsw i64 %1262, -1
  %1264 = and i64 %1262, 3
  %1265 = icmp ult i64 %1263, 3
  br i1 %1265, label %1268, label %1266

1266:                                             ; preds = %1256
  %1267 = sub nsw i64 %1262, %1264
  br label %1303

1268:                                             ; preds = %1303, %1256
  %1269 = phi i32 [ undef, %1256 ], [ %1329, %1303 ]
  %1270 = phi i64 [ 0, %1256 ], [ %1330, %1303 ]
  %1271 = phi i32 [ 1, %1256 ], [ %1329, %1303 ]
  %1272 = icmp eq i64 %1264, 0
  br i1 %1272, label %1285, label %1273

1273:                                             ; preds = %1268, %1273
  %1274 = phi i64 [ %1282, %1273 ], [ %1270, %1268 ]
  %1275 = phi i32 [ %1281, %1273 ], [ %1271, %1268 ]
  %1276 = phi i64 [ %1283, %1273 ], [ %1264, %1268 ]
  %1277 = getelementptr inbounds i32, i32* %1260, i64 %1274
  %1278 = getelementptr inbounds [5 x i32], [5 x i32]* %1261, i64 0, i64 %1274
  %1279 = select i1 %1257, i32* %1277, i32* %1278
  %1280 = load i32, i32* %1279, align 4
  %1281 = mul nsw i32 %1280, %1275
  %1282 = add nuw nsw i64 %1274, 1
  %1283 = add i64 %1276, -1
  %1284 = icmp eq i64 %1283, 0
  br i1 %1284, label %1285, label %1273, !llvm.loop !41

1285:                                             ; preds = %1268, %1273, %1253
  %1286 = phi i32* [ %1255, %1253 ], [ %1260, %1273 ], [ %1260, %1268 ]
  %1287 = phi i32 [ 1, %1253 ], [ %1269, %1268 ], [ %1281, %1273 ]
  %1288 = add i32 %48, 1
  %1289 = icmp slt i32 %1288, %1215
  %1290 = icmp sgt i32 %1215, 5
  %1291 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %1292 = bitcast %union.anon* %1291 to [5 x i32]*
  br i1 %1289, label %1293, label %1350

1293:                                             ; preds = %1285
  %1294 = sext i32 %1288 to i64
  %1295 = sext i32 %1215 to i64
  %1296 = sub nsw i64 %1295, %1294
  %1297 = xor i64 %1294, -1
  %1298 = add nsw i64 %1297, %1295
  %1299 = and i64 %1296, 3
  %1300 = icmp ult i64 %1298, 3
  br i1 %1300, label %1333, label %1301

1301:                                             ; preds = %1293
  %1302 = sub nsw i64 %1296, %1299
  br label %1369

1303:                                             ; preds = %1303, %1266
  %1304 = phi i64 [ 0, %1266 ], [ %1330, %1303 ]
  %1305 = phi i32 [ 1, %1266 ], [ %1329, %1303 ]
  %1306 = phi i64 [ %1267, %1266 ], [ %1331, %1303 ]
  %1307 = getelementptr inbounds i32, i32* %1260, i64 %1304
  %1308 = getelementptr inbounds [5 x i32], [5 x i32]* %1261, i64 0, i64 %1304
  %1309 = select i1 %1257, i32* %1307, i32* %1308
  %1310 = load i32, i32* %1309, align 4
  %1311 = mul nsw i32 %1310, %1305
  %1312 = or i64 %1304, 1
  %1313 = getelementptr inbounds i32, i32* %1260, i64 %1312
  %1314 = getelementptr inbounds [5 x i32], [5 x i32]* %1261, i64 0, i64 %1312
  %1315 = select i1 %1257, i32* %1313, i32* %1314
  %1316 = load i32, i32* %1315, align 4
  %1317 = mul nsw i32 %1316, %1311
  %1318 = or i64 %1304, 2
  %1319 = getelementptr inbounds i32, i32* %1260, i64 %1318
  %1320 = getelementptr inbounds [5 x i32], [5 x i32]* %1261, i64 0, i64 %1318
  %1321 = select i1 %1257, i32* %1319, i32* %1320
  %1322 = load i32, i32* %1321, align 4
  %1323 = mul nsw i32 %1322, %1317
  %1324 = or i64 %1304, 3
  %1325 = getelementptr inbounds i32, i32* %1260, i64 %1324
  %1326 = getelementptr inbounds [5 x i32], [5 x i32]* %1261, i64 0, i64 %1324
  %1327 = select i1 %1257, i32* %1325, i32* %1326
  %1328 = load i32, i32* %1327, align 4
  %1329 = mul nsw i32 %1328, %1323
  %1330 = add nuw nsw i64 %1304, 4
  %1331 = add i64 %1306, -4
  %1332 = icmp eq i64 %1331, 0
  br i1 %1332, label %1268, label %1303

1333:                                             ; preds = %1369, %1293
  %1334 = phi i32 [ undef, %1293 ], [ %1395, %1369 ]
  %1335 = phi i64 [ %1294, %1293 ], [ %1396, %1369 ]
  %1336 = phi i32 [ 1, %1293 ], [ %1395, %1369 ]
  %1337 = icmp eq i64 %1299, 0
  br i1 %1337, label %1350, label %1338

1338:                                             ; preds = %1333, %1338
  %1339 = phi i64 [ %1347, %1338 ], [ %1335, %1333 ]
  %1340 = phi i32 [ %1346, %1338 ], [ %1336, %1333 ]
  %1341 = phi i64 [ %1348, %1338 ], [ %1299, %1333 ]
  %1342 = getelementptr inbounds i32, i32* %1286, i64 %1339
  %1343 = getelementptr inbounds [5 x i32], [5 x i32]* %1292, i64 0, i64 %1339
  %1344 = select i1 %1290, i32* %1342, i32* %1343
  %1345 = load i32, i32* %1344, align 4
  %1346 = mul nsw i32 %1345, %1340
  %1347 = add nsw i64 %1339, 1
  %1348 = add i64 %1341, -1
  %1349 = icmp eq i64 %1348, 0
  br i1 %1349, label %1350, label %1338, !llvm.loop !42

1350:                                             ; preds = %1333, %1338, %1285
  %1351 = phi i32 [ 1, %1285 ], [ %1334, %1333 ], [ %1346, %1338 ]
  %1352 = sext i32 %48 to i64
  %1353 = getelementptr inbounds i32, i32* %1286, i64 %1352
  %1354 = getelementptr inbounds [5 x i32], [5 x i32]* %1292, i64 0, i64 %1352
  %1355 = select i1 %1290, i32* %1353, i32* %1354
  %1356 = load i32, i32* %1355, align 4
  %1357 = icmp sgt i32 %1287, 0
  br i1 %1357, label %1358, label %1451

1358:                                             ; preds = %1350
  %1359 = icmp sgt i32 %1356, 0
  %1360 = sext i32 %1351 to i64
  %1361 = shl nsw i64 %1360, 3
  %1362 = sext i32 %1356 to i64
  %1363 = zext i32 %1287 to i64
  %1364 = zext i32 %1356 to i64
  %1365 = and i64 %1364, 1
  %1366 = icmp eq i32 %1356, 1
  %1367 = sub nsw i64 %1364, %1365
  %1368 = icmp eq i64 %1365, 0
  br label %1399

1369:                                             ; preds = %1369, %1301
  %1370 = phi i64 [ %1294, %1301 ], [ %1396, %1369 ]
  %1371 = phi i32 [ 1, %1301 ], [ %1395, %1369 ]
  %1372 = phi i64 [ %1302, %1301 ], [ %1397, %1369 ]
  %1373 = getelementptr inbounds i32, i32* %1286, i64 %1370
  %1374 = getelementptr inbounds [5 x i32], [5 x i32]* %1292, i64 0, i64 %1370
  %1375 = select i1 %1290, i32* %1373, i32* %1374
  %1376 = load i32, i32* %1375, align 4
  %1377 = mul nsw i32 %1376, %1371
  %1378 = add nsw i64 %1370, 1
  %1379 = getelementptr inbounds i32, i32* %1286, i64 %1378
  %1380 = getelementptr inbounds [5 x i32], [5 x i32]* %1292, i64 0, i64 %1378
  %1381 = select i1 %1290, i32* %1379, i32* %1380
  %1382 = load i32, i32* %1381, align 4
  %1383 = mul nsw i32 %1382, %1377
  %1384 = add nsw i64 %1370, 2
  %1385 = getelementptr inbounds i32, i32* %1286, i64 %1384
  %1386 = getelementptr inbounds [5 x i32], [5 x i32]* %1292, i64 0, i64 %1384
  %1387 = select i1 %1290, i32* %1385, i32* %1386
  %1388 = load i32, i32* %1387, align 4
  %1389 = mul nsw i32 %1388, %1383
  %1390 = add nsw i64 %1370, 3
  %1391 = getelementptr inbounds i32, i32* %1286, i64 %1390
  %1392 = getelementptr inbounds [5 x i32], [5 x i32]* %1292, i64 0, i64 %1390
  %1393 = select i1 %1290, i32* %1391, i32* %1392
  %1394 = load i32, i32* %1393, align 4
  %1395 = mul nsw i32 %1394, %1389
  %1396 = add nsw i64 %1370, 4
  %1397 = add i64 %1372, -4
  %1398 = icmp eq i64 %1397, 0
  br i1 %1398, label %1333, label %1369

1399:                                             ; preds = %1419, %1358
  %1400 = phi i64 [ 0, %1358 ], [ %1420, %1419 ]
  br i1 %1359, label %1401, label %1419

1401:                                             ; preds = %1399
  %1402 = mul nsw i64 %1400, %1362
  %1403 = trunc i64 %1402 to i32
  %1404 = add i32 %1356, %1403
  br i1 %1366, label %1405, label %1422

1405:                                             ; preds = %1422, %1401
  %1406 = phi i64 [ 0, %1401 ], [ %1448, %1422 ]
  br i1 %1368, label %1419, label %1407

1407:                                             ; preds = %1405
  %1408 = add nsw i64 %1406, %1402
  %1409 = mul nsw i64 %1408, %1360
  %1410 = getelementptr inbounds i64, i64* %1251, i64 %1409
  %1411 = trunc i64 %1406 to i32
  %1412 = xor i32 %1411, -1
  %1413 = add i32 %1404, %1412
  %1414 = mul nsw i32 %1413, %1351
  %1415 = bitcast i64* %1410 to i8*
  %1416 = sext i32 %1414 to i64
  %1417 = getelementptr inbounds i64, i64* %1216, i64 %1416
  %1418 = bitcast i64* %1417 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1415, i8* align 8 %1418, i64 %1361, i1 false) #6
  br label %1419

1419:                                             ; preds = %1407, %1405, %1399
  %1420 = add nuw nsw i64 %1400, 1
  %1421 = icmp eq i64 %1420, %1363
  br i1 %1421, label %1451, label %1399

1422:                                             ; preds = %1401, %1422
  %1423 = phi i64 [ %1448, %1422 ], [ 0, %1401 ]
  %1424 = phi i64 [ %1449, %1422 ], [ %1367, %1401 ]
  %1425 = add nsw i64 %1423, %1402
  %1426 = mul nsw i64 %1425, %1360
  %1427 = getelementptr inbounds i64, i64* %1251, i64 %1426
  %1428 = trunc i64 %1423 to i32
  %1429 = xor i32 %1428, -1
  %1430 = add i32 %1404, %1429
  %1431 = mul nsw i32 %1430, %1351
  %1432 = bitcast i64* %1427 to i8*
  %1433 = sext i32 %1431 to i64
  %1434 = getelementptr inbounds i64, i64* %1216, i64 %1433
  %1435 = bitcast i64* %1434 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1432, i8* align 8 %1435, i64 %1361, i1 false) #6
  %1436 = or i64 %1423, 1
  %1437 = add nsw i64 %1436, %1402
  %1438 = mul nsw i64 %1437, %1360
  %1439 = getelementptr inbounds i64, i64* %1251, i64 %1438
  %1440 = trunc i64 %1436 to i32
  %1441 = xor i32 %1440, -1
  %1442 = add i32 %1404, %1441
  %1443 = mul nsw i32 %1442, %1351
  %1444 = bitcast i64* %1439 to i8*
  %1445 = sext i32 %1443 to i64
  %1446 = getelementptr inbounds i64, i64* %1216, i64 %1445
  %1447 = bitcast i64* %1446 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1444, i8* align 8 %1447, i64 %1361, i1 false) #6
  %1448 = add nuw nsw i64 %1423, 2
  %1449 = add i64 %1424, -2
  %1450 = icmp eq i64 %1449, 0
  br i1 %1450, label %1405, label %1422

1451:                                             ; preds = %1419, %1350
  %1452 = icmp sgt i32 %1250, 5
  br i1 %1452, label %1453, label %1459

1453:                                             ; preds = %1451
  %1454 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %1455 = load i32*, i32** %1454, align 8
  %1456 = icmp eq i32* %1455, null
  br i1 %1456, label %1459, label %1457

1457:                                             ; preds = %1453
  %1458 = bitcast i32* %1455 to i8*
  tail call void @_ZdaPv(i8* %1458) #7
  br label %1459

1459:                                             ; preds = %1451, %1453, %1457
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1217) #6
  %1460 = xor i1 %1290, true
  %1461 = icmp eq i32* %1286, null
  %1462 = or i1 %1461, %1460
  br i1 %1462, label %1465, label %1463

1463:                                             ; preds = %1459
  %1464 = bitcast i32* %1286 to i8*
  tail call void @_ZdaPv(i8* %1464) #7
  br label %1465

1465:                                             ; preds = %1459, %1463
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1186) #6
  br label %1744

1466:                                             ; preds = %66
  %1467 = bitcast %"class.tflite::RuntimeShape"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1467) #6
  %1468 = icmp eq %struct.TfLiteTensor* %26, null
  br i1 %1468, label %1469, label %1471

1469:                                             ; preds = %1466
  %1470 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  store i32 0, i32* %1470, align 8, !alias.scope !43
  br label %1495

1471:                                             ; preds = %1466
  %1472 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %43, i64 0, i32 1, i64 0
  %1473 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  store i32 %45, i32* %1473, align 8, !alias.scope !43
  %1474 = icmp sgt i32 %45, 5
  br i1 %1474, label %1475, label %1482

1475:                                             ; preds = %1471
  %1476 = sext i32 %45 to i64
  %1477 = shl nsw i64 %1476, 2
  %1478 = tail call i8* @_Znam(i64 %1477) #7, !noalias !43
  %1479 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1, i32 0
  %1480 = bitcast i32** %1479 to i8**
  store i8* %1478, i8** %1480, align 8, !alias.scope !43
  %1481 = bitcast i8* %1478 to i32*
  br label %1487

1482:                                             ; preds = %1471
  %1483 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1
  %1484 = bitcast %union.anon* %1483 to i32*
  %1485 = sext i32 %45 to i64
  %1486 = shl nsw i64 %1485, 2
  br label %1487

1487:                                             ; preds = %1482, %1475
  %1488 = phi i64 [ %1477, %1475 ], [ %1486, %1482 ]
  %1489 = phi i32* [ %1481, %1475 ], [ %1484, %1482 ]
  %1490 = bitcast i32* %1489 to i8*
  %1491 = bitcast i32* %1472 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1490, i8* align 4 %1491, i64 %1488, i1 false) #6
  %1492 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 0, i32 1
  %1493 = bitcast %union.TfLitePtrUnion* %1492 to i8**
  %1494 = load i8*, i8** %1493, align 8
  br label %1495

1495:                                             ; preds = %1469, %1487
  %1496 = phi i32 [ %45, %1487 ], [ 0, %1469 ]
  %1497 = phi i8* [ %1494, %1487 ], [ null, %1469 ]
  %1498 = bitcast %"class.tflite::RuntimeShape"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1498) #6
  %1499 = icmp eq %struct.TfLiteTensor* %67, null
  br i1 %1499, label %1500, label %1502

1500:                                             ; preds = %1495
  %1501 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  store i32 0, i32* %1501, align 8, !alias.scope !46
  br label %1530

1502:                                             ; preds = %1495
  %1503 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %67, i64 0, i32 2
  %1504 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1503, align 8, !noalias !46
  %1505 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1504, i64 0, i32 0
  %1506 = load i32, i32* %1505, align 4, !noalias !46
  %1507 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1504, i64 0, i32 1, i64 0
  %1508 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  store i32 %1506, i32* %1508, align 8, !alias.scope !46
  %1509 = icmp sgt i32 %1506, 5
  br i1 %1509, label %1510, label %1517

1510:                                             ; preds = %1502
  %1511 = sext i32 %1506 to i64
  %1512 = shl nsw i64 %1511, 2
  %1513 = tail call i8* @_Znam(i64 %1512) #7, !noalias !46
  %1514 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1, i32 0
  %1515 = bitcast i32** %1514 to i8**
  store i8* %1513, i8** %1515, align 8, !alias.scope !46
  %1516 = bitcast i8* %1513 to i32*
  br label %1522

1517:                                             ; preds = %1502
  %1518 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1
  %1519 = bitcast %union.anon* %1518 to i32*
  %1520 = sext i32 %1506 to i64
  %1521 = shl nsw i64 %1520, 2
  br label %1522

1522:                                             ; preds = %1517, %1510
  %1523 = phi i64 [ %1512, %1510 ], [ %1521, %1517 ]
  %1524 = phi i32* [ %1516, %1510 ], [ %1519, %1517 ]
  %1525 = bitcast i32* %1524 to i8*
  %1526 = bitcast i32* %1507 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1525, i8* align 4 %1526, i64 %1523, i1 false) #6
  %1527 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %67, i64 0, i32 1
  %1528 = bitcast %union.TfLitePtrUnion* %1527 to i8**
  %1529 = load i8*, i8** %1528, align 8
  br label %1530

1530:                                             ; preds = %1500, %1522
  %1531 = phi i32 [ %1506, %1522 ], [ 0, %1500 ]
  %1532 = phi i8* [ %1529, %1522 ], [ null, %1500 ]
  %1533 = icmp sgt i32 %48, 0
  br i1 %1533, label %1537, label %1534

1534:                                             ; preds = %1530
  %1535 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1, i32 0
  %1536 = load i32*, i32** %1535, align 8
  br label %1566

1537:                                             ; preds = %1530
  %1538 = icmp sgt i32 %1496, 5
  %1539 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1
  %1540 = getelementptr inbounds %union.anon, %union.anon* %1539, i64 0, i32 0
  %1541 = load i32*, i32** %1540, align 8
  %1542 = bitcast %union.anon* %1539 to [5 x i32]*
  %1543 = zext i32 %48 to i64
  %1544 = add nsw i64 %1543, -1
  %1545 = and i64 %1543, 3
  %1546 = icmp ult i64 %1544, 3
  br i1 %1546, label %1549, label %1547

1547:                                             ; preds = %1537
  %1548 = sub nsw i64 %1543, %1545
  br label %1584

1549:                                             ; preds = %1584, %1537
  %1550 = phi i32 [ undef, %1537 ], [ %1610, %1584 ]
  %1551 = phi i64 [ 0, %1537 ], [ %1611, %1584 ]
  %1552 = phi i32 [ 1, %1537 ], [ %1610, %1584 ]
  %1553 = icmp eq i64 %1545, 0
  br i1 %1553, label %1566, label %1554

1554:                                             ; preds = %1549, %1554
  %1555 = phi i64 [ %1563, %1554 ], [ %1551, %1549 ]
  %1556 = phi i32 [ %1562, %1554 ], [ %1552, %1549 ]
  %1557 = phi i64 [ %1564, %1554 ], [ %1545, %1549 ]
  %1558 = getelementptr inbounds i32, i32* %1541, i64 %1555
  %1559 = getelementptr inbounds [5 x i32], [5 x i32]* %1542, i64 0, i64 %1555
  %1560 = select i1 %1538, i32* %1558, i32* %1559
  %1561 = load i32, i32* %1560, align 4
  %1562 = mul nsw i32 %1561, %1556
  %1563 = add nuw nsw i64 %1555, 1
  %1564 = add i64 %1557, -1
  %1565 = icmp eq i64 %1564, 0
  br i1 %1565, label %1566, label %1554, !llvm.loop !49

1566:                                             ; preds = %1549, %1554, %1534
  %1567 = phi i32* [ %1536, %1534 ], [ %1541, %1554 ], [ %1541, %1549 ]
  %1568 = phi i32 [ 1, %1534 ], [ %1550, %1549 ], [ %1562, %1554 ]
  %1569 = add i32 %48, 1
  %1570 = icmp slt i32 %1569, %1496
  %1571 = icmp sgt i32 %1496, 5
  %1572 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1
  %1573 = bitcast %union.anon* %1572 to [5 x i32]*
  br i1 %1570, label %1574, label %1631

1574:                                             ; preds = %1566
  %1575 = sext i32 %1569 to i64
  %1576 = sext i32 %1496 to i64
  %1577 = sub nsw i64 %1576, %1575
  %1578 = xor i64 %1575, -1
  %1579 = add nsw i64 %1578, %1576
  %1580 = and i64 %1577, 3
  %1581 = icmp ult i64 %1579, 3
  br i1 %1581, label %1614, label %1582

1582:                                             ; preds = %1574
  %1583 = sub nsw i64 %1577, %1580
  br label %1649

1584:                                             ; preds = %1584, %1547
  %1585 = phi i64 [ 0, %1547 ], [ %1611, %1584 ]
  %1586 = phi i32 [ 1, %1547 ], [ %1610, %1584 ]
  %1587 = phi i64 [ %1548, %1547 ], [ %1612, %1584 ]
  %1588 = getelementptr inbounds i32, i32* %1541, i64 %1585
  %1589 = getelementptr inbounds [5 x i32], [5 x i32]* %1542, i64 0, i64 %1585
  %1590 = select i1 %1538, i32* %1588, i32* %1589
  %1591 = load i32, i32* %1590, align 4
  %1592 = mul nsw i32 %1591, %1586
  %1593 = or i64 %1585, 1
  %1594 = getelementptr inbounds i32, i32* %1541, i64 %1593
  %1595 = getelementptr inbounds [5 x i32], [5 x i32]* %1542, i64 0, i64 %1593
  %1596 = select i1 %1538, i32* %1594, i32* %1595
  %1597 = load i32, i32* %1596, align 4
  %1598 = mul nsw i32 %1597, %1592
  %1599 = or i64 %1585, 2
  %1600 = getelementptr inbounds i32, i32* %1541, i64 %1599
  %1601 = getelementptr inbounds [5 x i32], [5 x i32]* %1542, i64 0, i64 %1599
  %1602 = select i1 %1538, i32* %1600, i32* %1601
  %1603 = load i32, i32* %1602, align 4
  %1604 = mul nsw i32 %1603, %1598
  %1605 = or i64 %1585, 3
  %1606 = getelementptr inbounds i32, i32* %1541, i64 %1605
  %1607 = getelementptr inbounds [5 x i32], [5 x i32]* %1542, i64 0, i64 %1605
  %1608 = select i1 %1538, i32* %1606, i32* %1607
  %1609 = load i32, i32* %1608, align 4
  %1610 = mul nsw i32 %1609, %1604
  %1611 = add nuw nsw i64 %1585, 4
  %1612 = add i64 %1587, -4
  %1613 = icmp eq i64 %1612, 0
  br i1 %1613, label %1549, label %1584

1614:                                             ; preds = %1649, %1574
  %1615 = phi i32 [ undef, %1574 ], [ %1675, %1649 ]
  %1616 = phi i64 [ %1575, %1574 ], [ %1676, %1649 ]
  %1617 = phi i32 [ 1, %1574 ], [ %1675, %1649 ]
  %1618 = icmp eq i64 %1580, 0
  br i1 %1618, label %1631, label %1619

1619:                                             ; preds = %1614, %1619
  %1620 = phi i64 [ %1628, %1619 ], [ %1616, %1614 ]
  %1621 = phi i32 [ %1627, %1619 ], [ %1617, %1614 ]
  %1622 = phi i64 [ %1629, %1619 ], [ %1580, %1614 ]
  %1623 = getelementptr inbounds i32, i32* %1567, i64 %1620
  %1624 = getelementptr inbounds [5 x i32], [5 x i32]* %1573, i64 0, i64 %1620
  %1625 = select i1 %1571, i32* %1623, i32* %1624
  %1626 = load i32, i32* %1625, align 4
  %1627 = mul nsw i32 %1626, %1621
  %1628 = add nsw i64 %1620, 1
  %1629 = add i64 %1622, -1
  %1630 = icmp eq i64 %1629, 0
  br i1 %1630, label %1631, label %1619, !llvm.loop !50

1631:                                             ; preds = %1614, %1619, %1566
  %1632 = phi i32 [ 1, %1566 ], [ %1615, %1614 ], [ %1627, %1619 ]
  %1633 = sext i32 %48 to i64
  %1634 = getelementptr inbounds i32, i32* %1567, i64 %1633
  %1635 = getelementptr inbounds [5 x i32], [5 x i32]* %1573, i64 0, i64 %1633
  %1636 = select i1 %1571, i32* %1634, i32* %1635
  %1637 = load i32, i32* %1636, align 4
  %1638 = icmp sgt i32 %1568, 0
  br i1 %1638, label %1639, label %1725

1639:                                             ; preds = %1631
  %1640 = icmp sgt i32 %1637, 0
  %1641 = sext i32 %1632 to i64
  %1642 = sext i32 %1637 to i64
  %1643 = zext i32 %1568 to i64
  %1644 = zext i32 %1637 to i64
  %1645 = and i64 %1644, 1
  %1646 = icmp eq i32 %1637, 1
  %1647 = sub nsw i64 %1644, %1645
  %1648 = icmp eq i64 %1645, 0
  br label %1679

1649:                                             ; preds = %1649, %1582
  %1650 = phi i64 [ %1575, %1582 ], [ %1676, %1649 ]
  %1651 = phi i32 [ 1, %1582 ], [ %1675, %1649 ]
  %1652 = phi i64 [ %1583, %1582 ], [ %1677, %1649 ]
  %1653 = getelementptr inbounds i32, i32* %1567, i64 %1650
  %1654 = getelementptr inbounds [5 x i32], [5 x i32]* %1573, i64 0, i64 %1650
  %1655 = select i1 %1571, i32* %1653, i32* %1654
  %1656 = load i32, i32* %1655, align 4
  %1657 = mul nsw i32 %1656, %1651
  %1658 = add nsw i64 %1650, 1
  %1659 = getelementptr inbounds i32, i32* %1567, i64 %1658
  %1660 = getelementptr inbounds [5 x i32], [5 x i32]* %1573, i64 0, i64 %1658
  %1661 = select i1 %1571, i32* %1659, i32* %1660
  %1662 = load i32, i32* %1661, align 4
  %1663 = mul nsw i32 %1662, %1657
  %1664 = add nsw i64 %1650, 2
  %1665 = getelementptr inbounds i32, i32* %1567, i64 %1664
  %1666 = getelementptr inbounds [5 x i32], [5 x i32]* %1573, i64 0, i64 %1664
  %1667 = select i1 %1571, i32* %1665, i32* %1666
  %1668 = load i32, i32* %1667, align 4
  %1669 = mul nsw i32 %1668, %1663
  %1670 = add nsw i64 %1650, 3
  %1671 = getelementptr inbounds i32, i32* %1567, i64 %1670
  %1672 = getelementptr inbounds [5 x i32], [5 x i32]* %1573, i64 0, i64 %1670
  %1673 = select i1 %1571, i32* %1671, i32* %1672
  %1674 = load i32, i32* %1673, align 4
  %1675 = mul nsw i32 %1674, %1669
  %1676 = add nsw i64 %1650, 4
  %1677 = add i64 %1652, -4
  %1678 = icmp eq i64 %1677, 0
  br i1 %1678, label %1614, label %1649

1679:                                             ; preds = %1697, %1639
  %1680 = phi i64 [ 0, %1639 ], [ %1698, %1697 ]
  br i1 %1640, label %1681, label %1697

1681:                                             ; preds = %1679
  %1682 = mul nsw i64 %1680, %1642
  %1683 = trunc i64 %1682 to i32
  %1684 = add i32 %1637, %1683
  br i1 %1646, label %1685, label %1700

1685:                                             ; preds = %1700, %1681
  %1686 = phi i64 [ 0, %1681 ], [ %1722, %1700 ]
  br i1 %1648, label %1697, label %1687

1687:                                             ; preds = %1685
  %1688 = add nsw i64 %1686, %1682
  %1689 = mul nsw i64 %1688, %1641
  %1690 = getelementptr inbounds i8, i8* %1532, i64 %1689
  %1691 = trunc i64 %1686 to i32
  %1692 = xor i32 %1691, -1
  %1693 = add i32 %1684, %1692
  %1694 = mul nsw i32 %1693, %1632
  %1695 = sext i32 %1694 to i64
  %1696 = getelementptr inbounds i8, i8* %1497, i64 %1695
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1690, i8* align 1 %1696, i64 %1641, i1 false) #6
  br label %1697

1697:                                             ; preds = %1687, %1685, %1679
  %1698 = add nuw nsw i64 %1680, 1
  %1699 = icmp eq i64 %1698, %1643
  br i1 %1699, label %1725, label %1679

1700:                                             ; preds = %1681, %1700
  %1701 = phi i64 [ %1722, %1700 ], [ 0, %1681 ]
  %1702 = phi i64 [ %1723, %1700 ], [ %1647, %1681 ]
  %1703 = add nsw i64 %1701, %1682
  %1704 = mul nsw i64 %1703, %1641
  %1705 = getelementptr inbounds i8, i8* %1532, i64 %1704
  %1706 = trunc i64 %1701 to i32
  %1707 = xor i32 %1706, -1
  %1708 = add i32 %1684, %1707
  %1709 = mul nsw i32 %1708, %1632
  %1710 = sext i32 %1709 to i64
  %1711 = getelementptr inbounds i8, i8* %1497, i64 %1710
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1705, i8* align 1 %1711, i64 %1641, i1 false) #6
  %1712 = or i64 %1701, 1
  %1713 = add nsw i64 %1712, %1682
  %1714 = mul nsw i64 %1713, %1641
  %1715 = getelementptr inbounds i8, i8* %1532, i64 %1714
  %1716 = trunc i64 %1712 to i32
  %1717 = xor i32 %1716, -1
  %1718 = add i32 %1684, %1717
  %1719 = mul nsw i32 %1718, %1632
  %1720 = sext i32 %1719 to i64
  %1721 = getelementptr inbounds i8, i8* %1497, i64 %1720
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1715, i8* align 1 %1721, i64 %1641, i1 false) #6
  %1722 = add nuw nsw i64 %1701, 2
  %1723 = add i64 %1702, -2
  %1724 = icmp eq i64 %1723, 0
  br i1 %1724, label %1685, label %1700

1725:                                             ; preds = %1697, %1631
  %1726 = icmp sgt i32 %1531, 5
  br i1 %1726, label %1727, label %1733

1727:                                             ; preds = %1725
  %1728 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1, i32 0
  %1729 = load i32*, i32** %1728, align 8
  %1730 = icmp eq i32* %1729, null
  br i1 %1730, label %1733, label %1731

1731:                                             ; preds = %1727
  %1732 = bitcast i32* %1729 to i8*
  tail call void @_ZdaPv(i8* %1732) #7
  br label %1733

1733:                                             ; preds = %1725, %1727, %1731
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1498) #6
  %1734 = xor i1 %1571, true
  %1735 = icmp eq i32* %1567, null
  %1736 = or i1 %1735, %1734
  br i1 %1736, label %1739, label %1737

1737:                                             ; preds = %1733
  %1738 = bitcast i32* %1567 to i8*
  tail call void @_ZdaPv(i8* %1738) #7
  br label %1739

1739:                                             ; preds = %1733, %1737
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1467) #6
  br label %1744

1740:                                             ; preds = %66
  %1741 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %1742 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %1741, align 8
  %1743 = tail call i8* @TfLiteTypeGetName(i32 %69) #6
  tail call void (%struct.TfLiteContext*, i8*, ...) %1742(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.12, i64 0, i64 0), i8* %1743) #6
  br label %1744

1744:                                             ; preds = %1740, %1739, %1465, %1184, %905, %624, %350, %52
  %1745 = phi i32 [ 1, %52 ], [ 1, %1740 ], [ 0, %1739 ], [ 0, %1465 ], [ 0, %1184 ], [ 0, %905 ], [ 0, %624 ], [ 0, %350 ]
  ret i32 %1745
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i8* @TfLiteTypeGetName(i32) local_unnamed_addr #3

declare %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #5

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!4 = distinct !{!4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!7 = distinct !{!7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.unroll.disable"}
!10 = distinct !{!10, !9}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!13 = distinct !{!13, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!16 = distinct !{!16, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!17 = distinct !{!17, !9}
!18 = distinct !{!18, !9}
!19 = !{!20}
!20 = distinct !{!20, !21, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!21 = distinct !{!21, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!24 = distinct !{!24, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!25 = distinct !{!25, !9}
!26 = distinct !{!26, !9}
!27 = !{!28}
!28 = distinct !{!28, !29, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!29 = distinct !{!29, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!32 = distinct !{!32, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!33 = distinct !{!33, !9}
!34 = distinct !{!34, !9}
!35 = !{!36}
!36 = distinct !{!36, !37, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!37 = distinct !{!37, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!38 = !{!39}
!39 = distinct !{!39, !40, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!40 = distinct !{!40, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!41 = distinct !{!41, !9}
!42 = distinct !{!42, !9}
!43 = !{!44}
!44 = distinct !{!44, !45, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!45 = distinct !{!45, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!46 = !{!47}
!47 = distinct !{!47, !48, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!48 = distinct !{!48, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!49 = distinct !{!49, !9}
!50 = distinct !{!50, !9}
