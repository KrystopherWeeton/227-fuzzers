; ModuleID = '../../base/allocator/allocator_shim_default_dispatch_to_partition_alloc.cc'
source_filename = "../../base/allocator/allocator_shim_default_dispatch_to_partition_alloc.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.base::allocator::AllocatorDispatch" = type { {}*, {}*, i8* (%"struct.base::allocator::AllocatorDispatch"*, i64, i64, i8*)*, i8* (%"struct.base::allocator::AllocatorDispatch"*, i64, i64, i8*)*, i8* (%"struct.base::allocator::AllocatorDispatch"*, i8*, i64, i8*)*, void (%"struct.base::allocator::AllocatorDispatch"*, i8*, i8*)*, i64 (%"struct.base::allocator::AllocatorDispatch"*, i8*, i8*)*, i32 (%"struct.base::allocator::AllocatorDispatch"*, i64, i8**, i32, i8*)*, void (%"struct.base::allocator::AllocatorDispatch"*, i8**, i32, i8*)*, void (%"struct.base::allocator::AllocatorDispatch"*, i8*, i64, i8*)*, i8* (%"struct.base::allocator::AllocatorDispatch"*, i64, i64, i8*)*, i8* (%"struct.base::allocator::AllocatorDispatch"*, i8*, i64, i64, i8*)*, void (%"struct.base::allocator::AllocatorDispatch"*, i8*, i8*)*, %"struct.base::allocator::AllocatorDispatch"* }
%"class.(anonymous namespace)::LeakySingleton" = type <{ %"struct.std::__1::atomic.40", [5408 x i8], %"struct.std::__1::atomic.36", [7 x i8] }>
%"struct.std::__1::atomic.40" = type { %"struct.std::__1::__atomic_base.41" }
%"struct.std::__1::__atomic_base.41" = type { %"struct.std::__1::__cxx_atomic_impl.42" }
%"struct.std::__1::__cxx_atomic_impl.42" = type { %"struct.std::__1::__cxx_atomic_base_impl.43" }
%"struct.std::__1::__cxx_atomic_base_impl.43" = type { %"struct.base::PartitionRoot"* }
%"struct.base::PartitionRoot" = type <{ i8, i8, i8, i8, i8, i8, i8, i8, %"class.base::internal::MaybeSpinLock", [4 x i8], [128 x %"struct.base::internal::PartitionBucket"], %"struct.base::internal::PartitionBucket", i8, [7 x i8], %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1", i8*, i8*, i8*, %"struct.base::internal::PartitionSuperPageExtentEntry"*, %"struct.base::internal::PartitionSuperPageExtentEntry"*, %"struct.base::internal::PartitionDirectMapExtent"*, [16 x %"struct.base::internal::SlotSpanMetadata"*], i16, [6 x i8], i64, %"struct.std::__1::atomic", [4 x i8] }>
%"class.base::internal::MaybeSpinLock" = type { %"class.base::internal::SpinningMutex" }
%"class.base::internal::SpinningMutex" = type { %"struct.std::__1::atomic" }
%"struct.base::internal::PartitionBucket" = type { %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::SlotSpanMetadata"*, i32, i32, i64 }
%"struct.base::internal::SlotSpanMetadata" = type <{ %"class.base::internal::PartitionFreelistEntry"*, %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::PartitionBucket"*, i16, i16, i8, i8 }>
%"class.base::internal::PartitionFreelistEntry" = type { %"struct.base::internal::EncodedPartitionFreelistEntry"*, i64 }
%"struct.base::internal::EncodedPartitionFreelistEntry" = type { [8 x i8], [8 x i8] }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i64 }
%"struct.base::internal::PartitionSuperPageExtentEntry" = type { %"struct.base::PartitionRoot"*, i8*, i8*, %"struct.base::internal::PartitionSuperPageExtentEntry"* }
%"struct.base::internal::PartitionDirectMapExtent" = type opaque
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.std::__1::atomic.36" = type { %"struct.std::__1::__atomic_base.37" }
%"struct.std::__1::__atomic_base.37" = type { %"struct.std::__1::__cxx_atomic_impl.38" }
%"struct.std::__1::__cxx_atomic_impl.38" = type { %"struct.std::__1::__cxx_atomic_base_impl.39" }
%"struct.std::__1::__cxx_atomic_base_impl.39" = type { i8 }
%"class.base::internal::PCScan" = type <{ %"class.base::internal::PCScanScheduler", %"struct.std::__1::atomic.44", i8, [6 x i8] }>
%"class.base::internal::PCScanScheduler" = type { %"struct.base::internal::QuarantineData", %"class.base::internal::LimitBackend", %"class.base::internal::PCScanSchedulingBackend"* }
%"struct.base::internal::QuarantineData" = type { %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1", i64 }
%"class.base::internal::LimitBackend" = type { %"class.base::internal::PCScanSchedulingBackend" }
%"class.base::internal::PCScanSchedulingBackend" = type { i32 (...)**, %"class.base::internal::PCScanScheduler"* }
%"struct.std::__1::atomic.44" = type { %"struct.std::__1::__atomic_base.45" }
%"struct.std::__1::__atomic_base.45" = type { %"struct.std::__1::__cxx_atomic_impl.46" }
%"struct.std::__1::__cxx_atomic_impl.46" = type { %"struct.std::__1::__cxx_atomic_base_impl.47" }
%"struct.std::__1::__cxx_atomic_base_impl.47" = type { i8 }
%"class.base::internal::ThreadCache" = type { [89 x %"struct.base::internal::ThreadCache::Bucket"], i64, %"struct.std::__1::atomic.36", %"struct.base::ThreadCacheStats", %"struct.base::PartitionRoot"*, %"class.base::internal::ThreadCache"*, %"class.base::internal::ThreadCache"* }
%"struct.base::internal::ThreadCache::Bucket" = type <{ %"class.base::internal::PartitionFreelistEntry"*, i8, %"struct.std::__1::atomic.8", i16, [4 x i8] }>
%"struct.std::__1::atomic.8" = type { %"struct.std::__1::__atomic_base.9" }
%"struct.std::__1::__atomic_base.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"struct.base::ThreadCacheStats" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [129 x i64], [129 x i64] }
%"struct.base::internal::PartitionPage" = type { %union.anon, i8, i8 }
%union.anon = type <{ %"struct.base::internal::SubsequentPageMetadata", [22 x i8] }>
%"struct.base::internal::SubsequentPageMetadata" = type { i64 }
%"struct.base::internal::DeferredUnmap" = type { i8*, i64 }
%"class.base::internal::ObjectBitmap" = type { %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [2048 x i64] }
%"class.base::PartitionAllocMemoryReclaimer" = type { %"class.std::__1::unique_ptr", %"class.base::Lock", %"class.std::__1::set", %"class.std::__1::set.22" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::RepeatingTimer"* }
%"class.base::RepeatingTimer" = type { %"class.base::internal::TimerBase", %"class.base::RepeatingCallback" }
%"class.base::internal::TimerBase" = type { i32 (...)**, %class.scoped_refptr, %"class.base::SequenceCheckerDoNothing", %"class.base::internal::TaskDestructionDetector"*, %"class.base::Location", %"class.base::TimeDelta", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TickClock"*, i8, %"class.base::WeakPtrFactory" }
%class.scoped_refptr = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.base::internal::TaskDestructionDetector" = type opaque
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::TimeDelta" = type { i64 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::TickClock" = type opaque
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.6 }
%class.scoped_refptr.6 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.7", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.7" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.8" }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.13 }
%class.scoped_refptr.13 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.14", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.14" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.16", %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { i64 }
%"class.std::__1::set.22" = type { %"class.std::__1::__tree.23" }
%"class.std::__1::__tree.23" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.24", %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"class.base::internal::NonScannableAllocator" = type { %"class.std::__1::unique_ptr.32", %"struct.std::__1::atomic.36", [7 x i8] }
%"class.std::__1::unique_ptr.32" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type <{ %"struct.std::__1::__compressed_pair_elem.34", %"struct.std::__1::__compressed_pair_elem.35", [7 x i8] }>
%"struct.std::__1::__compressed_pair_elem.34" = type { %"struct.base::internal::PartitionAllocator"* }
%"struct.base::internal::PartitionAllocator" = type { %"struct.base::PartitionRoot" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"struct.base::internal::PCScanMetadataDeleter" }
%"struct.base::internal::PCScanMetadataDeleter" = type { i8 }
%struct.mallinfo = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.base::SimplePartitionStatsDumper" = type { %"class.base::PartitionStatsDumper", %"struct.base::PartitionMemoryStats" }
%"class.base::PartitionStatsDumper" = type { i32 (...)** }
%"struct.base::PartitionMemoryStats" = type { i64, i64, i64, i64, i64, i64, i8, %"struct.base::ThreadCacheStats", %"struct.base::ThreadCacheStats" }

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@_ZN4base9allocator17AllocatorDispatch16default_dispatchE = hidden local_unnamed_addr constant { i8* (%"struct.base::allocator::AllocatorDispatch"*, i64, i8*)*, i8* (%"struct.base::allocator::AllocatorDispatch"*, i64, i8*)*, i8* (%"struct.base::allocator::AllocatorDispatch"*, i64, i64, i8*)*, i8* (%"struct.base::allocator::AllocatorDispatch"*, i64, i64, i8*)*, i8* (%"struct.base::allocator::AllocatorDispatch"*, i8*, i64, i8*)*, void (%"struct.base::allocator::AllocatorDispatch"*, i8*, i8*)*, i64 (%"struct.base::allocator::AllocatorDispatch"*, i8*, i8*)*, i32 (%"struct.base::allocator::AllocatorDispatch"*, i64, i8**, i32, i8*)*, void (%"struct.base::allocator::AllocatorDispatch"*, i8**, i32, i8*)*, void (%"struct.base::allocator::AllocatorDispatch"*, i8*, i64, i8*)*, i8* (%"struct.base::allocator::AllocatorDispatch"*, i64, i64, i8*)*, i8* (%"struct.base::allocator::AllocatorDispatch"*, i8*, i64, i64, i8*)*, void (%"struct.base::allocator::AllocatorDispatch"*, i8*, i8*)*, %"struct.base::allocator::AllocatorDispatch"* } { i8* (%"struct.base::allocator::AllocatorDispatch"*, i64, i8*)* @_ZN4base8internal15PartitionMallocEPKNS_9allocator17AllocatorDispatchEmPv, i8* (%"struct.base::allocator::AllocatorDispatch"*, i64, i8*)* @_ZN4base8internal24PartitionMallocUncheckedEPKNS_9allocator17AllocatorDispatchEmPv, i8* (%"struct.base::allocator::AllocatorDispatch"*, i64, i64, i8*)* @_ZN4base8internal15PartitionCallocEPKNS_9allocator17AllocatorDispatchEmmPv, i8* (%"struct.base::allocator::AllocatorDispatch"*, i64, i64, i8*)* @_ZN4base8internal17PartitionMemalignEPKNS_9allocator17AllocatorDispatchEmmPv, i8* (%"struct.base::allocator::AllocatorDispatch"*, i8*, i64, i8*)* @_ZN4base8internal16PartitionReallocEPKNS_9allocator17AllocatorDispatchEPvmS5_, void (%"struct.base::allocator::AllocatorDispatch"*, i8*, i8*)* @_ZN4base8internal13PartitionFreeEPKNS_9allocator17AllocatorDispatchEPvS5_, i64 (%"struct.base::allocator::AllocatorDispatch"*, i8*, i8*)* @_ZN4base8internal24PartitionGetSizeEstimateEPKNS_9allocator17AllocatorDispatchEPvS5_, i32 (%"struct.base::allocator::AllocatorDispatch"*, i64, i8**, i32, i8*)* null, void (%"struct.base::allocator::AllocatorDispatch"*, i8**, i32, i8*)* null, void (%"struct.base::allocator::AllocatorDispatch"*, i8*, i64, i8*)* null, i8* (%"struct.base::allocator::AllocatorDispatch"*, i64, i64, i8*)* @_ZN4base8internal21PartitionAlignedAllocEPKNS_9allocator17AllocatorDispatchEmmPv, i8* (%"struct.base::allocator::AllocatorDispatch"*, i8*, i64, i64, i8*)* @_ZN4base8internal23PartitionAlignedReallocEPKNS_9allocator17AllocatorDispatchEPvmmS5_, void (%"struct.base::allocator::AllocatorDispatch"*, i8*, i8*)* @_ZN4base8internal13PartitionFreeEPKNS_9allocator17AllocatorDispatchEPvS5_, %"struct.base::allocator::AllocatorDispatch"* null }, align 8
@.str.1 = private unnamed_addr constant [7 x i8] c"malloc\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"posix_memalign\00", align 1
@_ZN12_GLOBAL__N_16g_rootE = internal global %"class.(anonymous namespace)::LeakySingleton" zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [130 x i8] c"../../base/allocator/allocator_shim_default_dispatch_to_partition_alloc.cc(259) Check failed: base::bits::IsPowerOfTwo(alignment)\00", align 1
@.str.4 = private unnamed_addr constant [114 x i8] c"../../base/allocator/partition_allocator/partition_root.h(1603) Check failed: base::bits::IsPowerOfTwo(alignment)\00", align 1
@.str.5 = private unnamed_addr constant [114 x i8] c"../../base/allocator/partition_allocator/partition_root.h(1605) Check failed: alignment <= kMaxSupportedAlignment\00", align 1
@.str.6 = private unnamed_addr constant [139 x i8] c"../../base/allocator/partition_allocator/partition_root.h(1608) Check failed: alignment <= PartitionPageSize() || raw_size <= kMaxBucketed\00", align 1
@.str.7 = private unnamed_addr constant [132 x i8] c"../../base/allocator/partition_allocator/partition_root.h(1653) Check failed: !(reinterpret_cast<uintptr_t>(ptr) & (alignment - 1))\00", align 1
@_ZN12_GLOBAL__N_116g_original_root_E = internal unnamed_addr global { { %"struct.base::PartitionRoot"* } } zeroinitializer, align 8
@_ZZN4base8internal17BucketIndexLookup8GetIndexEmE6lookup = internal unnamed_addr constant { [128 x i64], [521 x i16] } { [128 x i64] [i64 16, i64 18, i64 20, i64 22, i64 24, i64 26, i64 28, i64 30, i64 32, i64 36, i64 40, i64 44, i64 48, i64 52, i64 56, i64 60, i64 64, i64 72, i64 80, i64 88, i64 96, i64 104, i64 112, i64 120, i64 128, i64 144, i64 160, i64 176, i64 192, i64 208, i64 224, i64 240, i64 256, i64 288, i64 320, i64 352, i64 384, i64 416, i64 448, i64 480, i64 512, i64 576, i64 640, i64 704, i64 768, i64 832, i64 896, i64 960, i64 1024, i64 1152, i64 1280, i64 1408, i64 1536, i64 1664, i64 1792, i64 1920, i64 2048, i64 2304, i64 2560, i64 2816, i64 3072, i64 3328, i64 3584, i64 3840, i64 4096, i64 4608, i64 5120, i64 5632, i64 6144, i64 6656, i64 7168, i64 7680, i64 8192, i64 9216, i64 10240, i64 11264, i64 12288, i64 13312, i64 14336, i64 15360, i64 16384, i64 18432, i64 20480, i64 22528, i64 24576, i64 26624, i64 28672, i64 30720, i64 32768, i64 36864, i64 40960, i64 45056, i64 49152, i64 53248, i64 57344, i64 61440, i64 65536, i64 73728, i64 81920, i64 90112, i64 98304, i64 106496, i64 114688, i64 122880, i64 131072, i64 147456, i64 163840, i64 180224, i64 196608, i64 212992, i64 229376, i64 245760, i64 262144, i64 294912, i64 327680, i64 360448, i64 393216, i64 425984, i64 458752, i64 491520, i64 524288, i64 589824, i64 655360, i64 720896, i64 786432, i64 851968, i64 917504, i64 983040], [521 x i16] [i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 12, i16 12, i16 12, i16 12, i16 16, i16 16, i16 16, i16 16, i16 18, i16 18, i16 20, i16 20, i16 22, i16 22, i16 24, i16 24, i16 25, i16 26, i16 27, i16 28, i16 29, i16 30, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 54, i16 55, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 73, i16 74, i16 75, i16 76, i16 77, i16 78, i16 79, i16 80, i16 81, i16 82, i16 83, i16 84, i16 85, i16 86, i16 87, i16 88, i16 89, i16 90, i16 91, i16 92, i16 93, i16 94, i16 95, i16 96, i16 97, i16 98, i16 99, i16 100, i16 101, i16 102, i16 103, i16 104, i16 105, i16 106, i16 107, i16 108, i16 109, i16 110, i16 111, i16 112, i16 113, i16 114, i16 115, i16 116, i16 117, i16 118, i16 119, i16 120, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128] }, align 8
@_ZN4base12_GLOBAL__N_116kOrderIndexShiftE = internal unnamed_addr constant [65 x i8] c"\00\00\00\00\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D\0E\0F\10\11\12\13\14\15\16\17\18\19\1A\1B\1C\1D\1E\1F !\22#$%&'()*+,-./0123456789:;<", align 16
@_ZN4base12_GLOBAL__N_118kOrderSubIndexMaskE = internal unnamed_addr constant [65 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 1, i64 3, i64 7, i64 15, i64 31, i64 63, i64 127, i64 255, i64 511, i64 1023, i64 2047, i64 4095, i64 8191, i64 16383, i64 32767, i64 65535, i64 131071, i64 262143, i64 524287, i64 1048575, i64 2097151, i64 4194303, i64 8388607, i64 16777215, i64 33554431, i64 67108863, i64 134217727, i64 268435455, i64 536870911, i64 1073741823, i64 2147483647, i64 4294967295, i64 8589934591, i64 17179869183, i64 34359738367, i64 68719476735, i64 137438953471, i64 274877906943, i64 549755813887, i64 1099511627775, i64 2199023255551, i64 4398046511103, i64 8796093022207, i64 17592186044415, i64 35184372088831, i64 70368744177663, i64 140737488355327, i64 281474976710655, i64 562949953421311, i64 1125899906842623, i64 2251799813685247, i64 4503599627370495, i64 9007199254740991, i64 18014398509481983, i64 36028797018963967, i64 72057594037927935, i64 144115188075855871, i64 288230376151711743, i64 576460752303423487, i64 1152921504606846975], align 16
@_ZN4base8internal6PCScan9instance_E = external global %"class.base::internal::PCScan", align 8
@_ZN4base8internal18g_thread_cache_keyE = external local_unnamed_addr global i32, align 4
@_ZN4base8internal11ThreadCache28largest_active_bucket_index_E = external local_unnamed_addr global i16, align 2
@.str.10 = private unnamed_addr constant [105 x i8] c"../../base/allocator/partition_allocator/partition_page.h(549) Check failed: slot_start != freelist_head\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN4base8internal15PartitionMallocEPKNS_9allocator17AllocatorDispatchEmPv(%"struct.base::allocator::AllocatorDispatch"* nocapture readnone, i64, i8* nocapture readnone) #0 {
  %4 = alloca i8, align 1
  %5 = alloca i64, align 8
  %6 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) acquire, align 8
  %7 = inttoptr i64 %6 to %"struct.base::PartitionRoot"*
  %8 = icmp eq i64 %6, 0
  br i1 %8, label %9, label %20, !prof !2

9:                                                ; preds = %3, %9
  %10 = cmpxchg i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0), i8 0, i8 1 acquire acquire
  %11 = extractvalue { i8, i1 } %10, 1
  br i1 %11, label %12, label %9

12:                                               ; preds = %9
  %13 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) monotonic, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %12
  %16 = inttoptr i64 %13 to %"struct.base::PartitionRoot"*
  br label %18

17:                                               ; preds = %12
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0), align 8
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 1), align 1
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 2), align 2
  store i8 1, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 3), align 1
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 8) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 16), i8 0, i64 5120, i1 false) #13
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5176), align 8
  store i64 0, i64* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5392) to i64*), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5400) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5184), i8 0, i64 202, i1 false) #13
  tail call void @_ZN4base13PartitionRootILb1EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot"* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), i40 65793) #13
  store atomic i64 ptrtoint (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to i64), i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) release, align 8
  br label %18

18:                                               ; preds = %17, %15
  %19 = phi %"struct.base::PartitionRoot"* [ bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), %17 ], [ %16, %15 ]
  store atomic i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) release, align 8
  br label %20

20:                                               ; preds = %18, %3
  %21 = phi %"struct.base::PartitionRoot"* [ %7, %3 ], [ %19, %18 ]
  %22 = tail call i64 @llvm.ctlz.i64(i64 %1, i1 false) #13, !range !3
  %23 = sub nuw nsw i64 64, %22
  %24 = and i64 %23, 255
  %25 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN4base12_GLOBAL__N_116kOrderIndexShiftE, i64 0, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i64
  %28 = lshr i64 %1, %27
  %29 = and i64 %28, 7
  %30 = getelementptr inbounds [65 x i64], [65 x i64]* @_ZN4base12_GLOBAL__N_118kOrderSubIndexMaskE, i64 0, i64 %24
  %31 = load i64, i64* %30, align 8
  %32 = and i64 %31, %1
  %33 = shl nuw nsw i64 %24, 3
  %34 = or i64 %29, %33
  %35 = icmp ne i64 %32, 0
  %36 = zext i1 %35 to i64
  %37 = add nuw nsw i64 %34, %36
  %38 = getelementptr inbounds { [128 x i64], [521 x i16] }, { [128 x i64], [521 x i16] }* @_ZZN4base8internal17BucketIndexLookup8GetIndexEmE6lookup, i64 0, i32 1, i64 %37
  %39 = load i16, i16* %38, align 2
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #13
  store i8 0, i8* %4, align 1
  %40 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #13
  store i64 -6148914691236517206, i64* %5, align 8
  %41 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %21, i64 0, i32 0
  %42 = load i8, i8* %41, align 8
  %43 = icmp eq i8 %42, 2
  br i1 %43, label %44, label %48

44:                                               ; preds = %20
  %45 = load atomic i8, i8* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0) acquire, align 8
  %46 = icmp eq i8 %45, 2
  br i1 %46, label %47, label %48, !prof !2

47:                                               ; preds = %44
  tail call void @_ZN4base8internal6PCScan8JoinScanEv() #13
  br label %48

48:                                               ; preds = %47, %44, %20
  %49 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %21, i64 0, i32 2
  %50 = load i8, i8* %49, align 2, !range !4
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %200, label %52, !prof !5

52:                                               ; preds = %48
  %53 = load i32, i32* @_ZN4base8internal18g_thread_cache_keyE, align 4
  %54 = tail call i8* @pthread_getspecific(i32 %53) #13
  %55 = bitcast i8* %54 to %"class.base::internal::ThreadCache"*
  %56 = icmp ugt i8* %54, inttoptr (i64 1 to i8*)
  br i1 %56, label %57, label %127, !prof !6

57:                                               ; preds = %52
  %58 = zext i16 %39 to i64
  %59 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %55, i64 0, i32 3, i32 12, i64 %58
  %60 = load i64, i64* %59, align 8
  %61 = add i64 %60, 1
  store i64 %61, i64* %59, align 8
  %62 = getelementptr inbounds i8, i8* %54, i64 1440
  %63 = bitcast i8* %62 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load i16, i16* @_ZN4base8internal11ThreadCache28largest_active_bucket_index_E, align 2
  %67 = icmp ult i16 %66, %39
  br i1 %67, label %68, label %77, !prof !2

68:                                               ; preds = %57
  %69 = getelementptr inbounds i8, i8* %54, i64 1472
  %70 = bitcast i8* %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = add i64 %71, 1
  store i64 %72, i64* %70, align 8
  %73 = getelementptr inbounds i8, i8* %54, i64 1456
  %74 = bitcast i8* %73 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, 1
  store i64 %76, i64* %74, align 8
  br label %134

77:                                               ; preds = %57
  %78 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %55, i64 0, i32 0, i64 %58, i32 0
  %79 = load %"class.base::internal::PartitionFreelistEntry"*, %"class.base::internal::PartitionFreelistEntry"** %78, align 8
  %80 = icmp eq %"class.base::internal::PartitionFreelistEntry"* %79, null
  br i1 %80, label %86, label %81, !prof !2

81:                                               ; preds = %77
  %82 = getelementptr inbounds i8, i8* %54, i64 1448
  %83 = bitcast i8* %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = add i64 %84, 1
  store i64 %85, i64* %83, align 8
  br label %94

86:                                               ; preds = %77
  %87 = getelementptr inbounds i8, i8* %54, i64 1456
  %88 = bitcast i8* %87 to <2 x i64>*
  %89 = load <2 x i64>, <2 x i64>* %88, align 8
  %90 = add <2 x i64> %89, <i64 1, i64 1>
  %91 = bitcast i8* %87 to <2 x i64>*
  store <2 x i64> %90, <2 x i64>* %91, align 8
  tail call void @_ZN4base8internal11ThreadCache10FillBucketEm(%"class.base::internal::ThreadCache"* %55, i64 %58) #13
  %92 = load %"class.base::internal::PartitionFreelistEntry"*, %"class.base::internal::PartitionFreelistEntry"** %78, align 8
  %93 = icmp eq %"class.base::internal::PartitionFreelistEntry"* %92, null
  br i1 %93, label %134, label %94, !prof !2

94:                                               ; preds = %86, %81
  %95 = phi %"class.base::internal::PartitionFreelistEntry"* [ %92, %86 ], [ %79, %81 ]
  %96 = getelementptr inbounds %"class.base::internal::PartitionFreelistEntry", %"class.base::internal::PartitionFreelistEntry"* %95, i64 0, i32 0
  %97 = load %"struct.base::internal::EncodedPartitionFreelistEntry"*, %"struct.base::internal::EncodedPartitionFreelistEntry"** %96, align 8
  %98 = icmp eq %"struct.base::internal::EncodedPartitionFreelistEntry"* %97, null
  %99 = ptrtoint %"struct.base::internal::EncodedPartitionFreelistEntry"* %97 to i64
  br i1 %98, label %100, label %102

100:                                              ; preds = %94
  %101 = tail call i64 @llvm.bswap.i64(i64 %99) #13
  br label %111

102:                                              ; preds = %94
  %103 = xor i64 %99, -1
  %104 = getelementptr inbounds %"class.base::internal::PartitionFreelistEntry", %"class.base::internal::PartitionFreelistEntry"* %95, i64 0, i32 1
  %105 = load i64, i64* %104, align 8
  %106 = icmp eq i64 %105, %103
  br i1 %106, label %108, label %107, !prof !6

107:                                              ; preds = %102
  tail call fastcc void @_ZN4base8internal12_GLOBAL__N_126FreelistCorruptionDetectedEv() #14
  unreachable

108:                                              ; preds = %102
  %109 = tail call i64 @llvm.bswap.i64(i64 %99) #13
  %110 = inttoptr i64 %109 to i8*
  tail call void @llvm.prefetch(i8* nonnull %110, i32 0, i32 3, i32 1) #13
  br label %111

111:                                              ; preds = %108, %100
  %112 = phi i64 [ %101, %100 ], [ %109, %108 ]
  %113 = inttoptr i64 %112 to %"class.base::internal::PartitionFreelistEntry"*
  %114 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %55, i64 0, i32 0, i64 %58, i32 1
  %115 = load i8, i8* %114, align 8
  %116 = add i8 %115, -1
  store i8 %116, i8* %114, align 8
  store %"class.base::internal::PartitionFreelistEntry"* %113, %"class.base::internal::PartitionFreelistEntry"** %78, align 8
  %117 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %55, i64 0, i32 0, i64 %58, i32 3
  %118 = load i16, i16* %117, align 2
  %119 = zext i16 %118 to i64
  store i64 %119, i64* %5, align 8
  %120 = load i16, i16* %117, align 2
  %121 = zext i16 %120 to i64
  %122 = getelementptr inbounds i8, i8* %54, i64 1424
  %123 = bitcast i8* %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = sub i64 %124, %121
  store i64 %125, i64* %123, align 8
  %126 = bitcast %"class.base::internal::PartitionFreelistEntry"* %95 to i8*
  br label %129

127:                                              ; preds = %52
  %128 = call i8* @_ZN4base13PartitionRootILb1EE28MaybeInitThreadCacheAndAllocEtPm(%"struct.base::PartitionRoot"* %21, i16 zeroext %39, i64* nonnull %5) #13
  br label %129

129:                                              ; preds = %127, %111
  %130 = phi i8* [ %128, %127 ], [ %126, %111 ]
  %131 = icmp eq i8* %130, null
  br i1 %131, label %132, label %269, !prof !2

132:                                              ; preds = %129
  %133 = zext i16 %39 to i64
  br label %134

134:                                              ; preds = %132, %86, %68
  %135 = phi i64 [ %133, %132 ], [ %58, %86 ], [ %58, %68 ]
  %136 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %21, i64 0, i32 10, i64 %135
  %137 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %21, i64 0, i32 8
  %138 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %137, i64 0, i32 0
  %139 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %137, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %140

140:                                              ; preds = %152, %134
  %141 = phi i32 [ 0, %134 ], [ %153, %152 ]
  %142 = phi i32 [ 1, %134 ], [ %156, %152 ]
  %143 = load atomic i32, i32* %139 monotonic, align 4
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %148, !prof !7

145:                                              ; preds = %140
  %146 = cmpxchg weak i32* %139, i32 0, i32 1 acquire monotonic
  %147 = extractvalue { i32, i1 } %146, 1
  br i1 %147, label %163, label %148, !prof !6

148:                                              ; preds = %145, %140
  %149 = icmp sgt i32 %142, 0
  br i1 %149, label %158, label %152

150:                                              ; preds = %158
  %151 = add i32 %142, %141
  br label %152

152:                                              ; preds = %150, %148
  %153 = phi i32 [ %141, %148 ], [ %151, %150 ]
  %154 = shl i32 %142, 1
  %155 = icmp slt i32 %154, 64
  %156 = select i1 %155, i32 %154, i32 64
  %157 = icmp slt i32 %153, 1000
  br i1 %157, label %140, label %162

158:                                              ; preds = %148, %158
  %159 = phi i32 [ %160, %158 ], [ 0, %148 ]
  call void asm sideeffect "pause", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !8
  %160 = add nuw nsw i32 %159, 1
  %161 = icmp eq i32 %160, %142
  br i1 %161, label %150, label %158

162:                                              ; preds = %152
  call void @_ZN4base8internal13SpinningMutex8LockSlowEv(%"class.base::internal::SpinningMutex"* %138) #13
  br label %163

163:                                              ; preds = %145, %162
  %164 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %136, i64 0, i32 0
  %165 = load %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::SlotSpanMetadata"** %164, align 8
  %166 = bitcast %"struct.base::internal::SlotSpanMetadata"* %165 to i8**
  %167 = load i8*, i8** %166, align 1
  %168 = icmp eq i8* %167, null
  br i1 %168, label %193, label %169, !prof !2

169:                                              ; preds = %163
  %170 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %165, i64 0, i32 0
  store i8 0, i8* %4, align 1
  %171 = bitcast i8* %167 to %"struct.base::internal::EncodedPartitionFreelistEntry"**
  %172 = load %"struct.base::internal::EncodedPartitionFreelistEntry"*, %"struct.base::internal::EncodedPartitionFreelistEntry"** %171, align 8
  %173 = icmp eq %"struct.base::internal::EncodedPartitionFreelistEntry"* %172, null
  %174 = ptrtoint %"struct.base::internal::EncodedPartitionFreelistEntry"* %172 to i64
  br i1 %173, label %175, label %177

175:                                              ; preds = %169
  %176 = call i64 @llvm.bswap.i64(i64 %174) #13
  br label %187

177:                                              ; preds = %169
  %178 = xor i64 %174, -1
  %179 = getelementptr inbounds i8, i8* %167, i64 8
  %180 = bitcast i8* %179 to i64*
  %181 = load i64, i64* %180, align 8
  %182 = icmp eq i64 %181, %178
  br i1 %182, label %184, label %183, !prof !6

183:                                              ; preds = %177
  call fastcc void @_ZN4base8internal12_GLOBAL__N_126FreelistCorruptionDetectedEv() #14
  unreachable

184:                                              ; preds = %177
  %185 = call i64 @llvm.bswap.i64(i64 %174) #13
  %186 = inttoptr i64 %185 to i8*
  call void @llvm.prefetch(i8* nonnull %186, i32 0, i32 3, i32 1) #13
  br label %187

187:                                              ; preds = %184, %175
  %188 = phi i64 [ %176, %175 ], [ %185, %184 ]
  %189 = inttoptr i64 %188 to %"class.base::internal::PartitionFreelistEntry"*
  store %"class.base::internal::PartitionFreelistEntry"* %189, %"class.base::internal::PartitionFreelistEntry"** %170, align 1
  %190 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %165, i64 0, i32 3
  %191 = load i16, i16* %190, align 1
  %192 = add i16 %191, 1
  store i16 %192, i16* %190, align 1
  br label %195

193:                                              ; preds = %163
  %194 = call i8* @_ZN4base8internal15PartitionBucketILb1EE13SlowPathAllocEPNS_13PartitionRootILb1EEEimmPb(%"struct.base::internal::PartitionBucket"* %136, %"struct.base::PartitionRoot"* %21, i32 0, i64 %1, i64 16384, i8* nonnull %4) #13
  br label %195

195:                                              ; preds = %193, %187
  %196 = phi i8* [ %167, %187 ], [ %194, %193 ]
  %197 = atomicrmw xchg i32* %139, i32 0 release
  %198 = icmp eq i32 %197, 2
  br i1 %198, label %199, label %266, !prof !2

199:                                              ; preds = %195
  call void @_ZN4base8internal13SpinningMutex9FutexWakeEv(%"class.base::internal::SpinningMutex"* %138) #13
  br label %266

200:                                              ; preds = %48
  %201 = zext i16 %39 to i64
  %202 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %21, i64 0, i32 10, i64 %201
  %203 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %21, i64 0, i32 8
  %204 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %203, i64 0, i32 0
  %205 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %203, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %206

206:                                              ; preds = %218, %200
  %207 = phi i32 [ 0, %200 ], [ %219, %218 ]
  %208 = phi i32 [ 1, %200 ], [ %222, %218 ]
  %209 = load atomic i32, i32* %205 monotonic, align 4
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %214, !prof !7

211:                                              ; preds = %206
  %212 = cmpxchg weak i32* %205, i32 0, i32 1 acquire monotonic
  %213 = extractvalue { i32, i1 } %212, 1
  br i1 %213, label %229, label %214, !prof !6

214:                                              ; preds = %211, %206
  %215 = icmp sgt i32 %208, 0
  br i1 %215, label %224, label %218

216:                                              ; preds = %224
  %217 = add i32 %208, %207
  br label %218

218:                                              ; preds = %216, %214
  %219 = phi i32 [ %207, %214 ], [ %217, %216 ]
  %220 = shl i32 %208, 1
  %221 = icmp slt i32 %220, 64
  %222 = select i1 %221, i32 %220, i32 64
  %223 = icmp slt i32 %219, 1000
  br i1 %223, label %206, label %228

224:                                              ; preds = %214, %224
  %225 = phi i32 [ %226, %224 ], [ 0, %214 ]
  tail call void asm sideeffect "pause", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !8
  %226 = add nuw nsw i32 %225, 1
  %227 = icmp eq i32 %226, %208
  br i1 %227, label %216, label %224

228:                                              ; preds = %218
  tail call void @_ZN4base8internal13SpinningMutex8LockSlowEv(%"class.base::internal::SpinningMutex"* %204) #13
  br label %229

229:                                              ; preds = %211, %228
  %230 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %202, i64 0, i32 0
  %231 = load %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::SlotSpanMetadata"** %230, align 8
  %232 = bitcast %"struct.base::internal::SlotSpanMetadata"* %231 to i8**
  %233 = load i8*, i8** %232, align 1
  %234 = icmp eq i8* %233, null
  br i1 %234, label %259, label %235, !prof !2

235:                                              ; preds = %229
  %236 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %231, i64 0, i32 0
  store i8 0, i8* %4, align 1
  %237 = bitcast i8* %233 to %"struct.base::internal::EncodedPartitionFreelistEntry"**
  %238 = load %"struct.base::internal::EncodedPartitionFreelistEntry"*, %"struct.base::internal::EncodedPartitionFreelistEntry"** %237, align 8
  %239 = icmp eq %"struct.base::internal::EncodedPartitionFreelistEntry"* %238, null
  %240 = ptrtoint %"struct.base::internal::EncodedPartitionFreelistEntry"* %238 to i64
  br i1 %239, label %241, label %243

241:                                              ; preds = %235
  %242 = tail call i64 @llvm.bswap.i64(i64 %240) #13
  br label %253

243:                                              ; preds = %235
  %244 = xor i64 %240, -1
  %245 = getelementptr inbounds i8, i8* %233, i64 8
  %246 = bitcast i8* %245 to i64*
  %247 = load i64, i64* %246, align 8
  %248 = icmp eq i64 %247, %244
  br i1 %248, label %250, label %249, !prof !6

249:                                              ; preds = %243
  tail call fastcc void @_ZN4base8internal12_GLOBAL__N_126FreelistCorruptionDetectedEv() #14
  unreachable

250:                                              ; preds = %243
  %251 = tail call i64 @llvm.bswap.i64(i64 %240) #13
  %252 = inttoptr i64 %251 to i8*
  tail call void @llvm.prefetch(i8* nonnull %252, i32 0, i32 3, i32 1) #13
  br label %253

253:                                              ; preds = %250, %241
  %254 = phi i64 [ %242, %241 ], [ %251, %250 ]
  %255 = inttoptr i64 %254 to %"class.base::internal::PartitionFreelistEntry"*
  store %"class.base::internal::PartitionFreelistEntry"* %255, %"class.base::internal::PartitionFreelistEntry"** %236, align 1
  %256 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %231, i64 0, i32 3
  %257 = load i16, i16* %256, align 1
  %258 = add i16 %257, 1
  store i16 %258, i16* %256, align 1
  br label %261

259:                                              ; preds = %229
  %260 = call i8* @_ZN4base8internal15PartitionBucketILb1EE13SlowPathAllocEPNS_13PartitionRootILb1EEEimmPb(%"struct.base::internal::PartitionBucket"* %202, %"struct.base::PartitionRoot"* %21, i32 0, i64 %1, i64 16384, i8* nonnull %4) #13
  br label %261

261:                                              ; preds = %259, %253
  %262 = phi i8* [ %233, %253 ], [ %260, %259 ]
  %263 = atomicrmw xchg i32* %205, i32 0 release
  %264 = icmp eq i32 %263, 2
  br i1 %264, label %265, label %266, !prof !2

265:                                              ; preds = %261
  call void @_ZN4base8internal13SpinningMutex9FutexWakeEv(%"class.base::internal::SpinningMutex"* %204) #13
  br label %266

266:                                              ; preds = %265, %261, %199, %195
  %267 = phi i8* [ %196, %195 ], [ %196, %199 ], [ %262, %261 ], [ %262, %265 ]
  %268 = icmp eq i8* %267, null
  br i1 %268, label %271, label %269, !prof !2

269:                                              ; preds = %129, %266
  %270 = phi i8* [ %267, %266 ], [ %130, %129 ]
  br label %271

271:                                              ; preds = %266, %269
  %272 = phi i8* [ null, %266 ], [ %270, %269 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #13
  ret i8* %272
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN4base8internal24PartitionMallocUncheckedEPKNS_9allocator17AllocatorDispatchEmPv(%"struct.base::allocator::AllocatorDispatch"* nocapture readnone, i64, i8* nocapture readnone) #0 {
  %4 = alloca i8, align 1
  %5 = alloca i64, align 8
  %6 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) acquire, align 8
  %7 = inttoptr i64 %6 to %"struct.base::PartitionRoot"*
  %8 = icmp eq i64 %6, 0
  br i1 %8, label %9, label %20, !prof !2

9:                                                ; preds = %3, %9
  %10 = cmpxchg i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0), i8 0, i8 1 acquire acquire
  %11 = extractvalue { i8, i1 } %10, 1
  br i1 %11, label %12, label %9

12:                                               ; preds = %9
  %13 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) monotonic, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %12
  %16 = inttoptr i64 %13 to %"struct.base::PartitionRoot"*
  br label %18

17:                                               ; preds = %12
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0), align 8
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 1), align 1
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 2), align 2
  store i8 1, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 3), align 1
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 8) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 16), i8 0, i64 5120, i1 false) #13
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5176), align 8
  store i64 0, i64* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5392) to i64*), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5400) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5184), i8 0, i64 202, i1 false) #13
  tail call void @_ZN4base13PartitionRootILb1EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot"* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), i40 65793) #13
  store atomic i64 ptrtoint (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to i64), i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) release, align 8
  br label %18

18:                                               ; preds = %17, %15
  %19 = phi %"struct.base::PartitionRoot"* [ bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), %17 ], [ %16, %15 ]
  store atomic i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) release, align 8
  br label %20

20:                                               ; preds = %18, %3
  %21 = phi %"struct.base::PartitionRoot"* [ %7, %3 ], [ %19, %18 ]
  %22 = tail call i64 @llvm.ctlz.i64(i64 %1, i1 false) #13, !range !3
  %23 = sub nuw nsw i64 64, %22
  %24 = and i64 %23, 255
  %25 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN4base12_GLOBAL__N_116kOrderIndexShiftE, i64 0, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i64
  %28 = lshr i64 %1, %27
  %29 = and i64 %28, 7
  %30 = getelementptr inbounds [65 x i64], [65 x i64]* @_ZN4base12_GLOBAL__N_118kOrderSubIndexMaskE, i64 0, i64 %24
  %31 = load i64, i64* %30, align 8
  %32 = and i64 %31, %1
  %33 = shl nuw nsw i64 %24, 3
  %34 = or i64 %29, %33
  %35 = icmp ne i64 %32, 0
  %36 = zext i1 %35 to i64
  %37 = add nuw nsw i64 %34, %36
  %38 = getelementptr inbounds { [128 x i64], [521 x i16] }, { [128 x i64], [521 x i16] }* @_ZZN4base8internal17BucketIndexLookup8GetIndexEmE6lookup, i64 0, i32 1, i64 %37
  %39 = load i16, i16* %38, align 2
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #13
  store i8 0, i8* %4, align 1
  %40 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #13
  store i64 -6148914691236517206, i64* %5, align 8
  %41 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %21, i64 0, i32 0
  %42 = load i8, i8* %41, align 8
  %43 = icmp eq i8 %42, 2
  br i1 %43, label %44, label %48

44:                                               ; preds = %20
  %45 = load atomic i8, i8* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0) acquire, align 8
  %46 = icmp eq i8 %45, 2
  br i1 %46, label %47, label %48, !prof !2

47:                                               ; preds = %44
  tail call void @_ZN4base8internal6PCScan8JoinScanEv() #13
  br label %48

48:                                               ; preds = %47, %44, %20
  %49 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %21, i64 0, i32 2
  %50 = load i8, i8* %49, align 2, !range !4
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %200, label %52, !prof !5

52:                                               ; preds = %48
  %53 = load i32, i32* @_ZN4base8internal18g_thread_cache_keyE, align 4
  %54 = tail call i8* @pthread_getspecific(i32 %53) #13
  %55 = bitcast i8* %54 to %"class.base::internal::ThreadCache"*
  %56 = icmp ugt i8* %54, inttoptr (i64 1 to i8*)
  br i1 %56, label %57, label %127, !prof !6

57:                                               ; preds = %52
  %58 = zext i16 %39 to i64
  %59 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %55, i64 0, i32 3, i32 12, i64 %58
  %60 = load i64, i64* %59, align 8
  %61 = add i64 %60, 1
  store i64 %61, i64* %59, align 8
  %62 = getelementptr inbounds i8, i8* %54, i64 1440
  %63 = bitcast i8* %62 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load i16, i16* @_ZN4base8internal11ThreadCache28largest_active_bucket_index_E, align 2
  %67 = icmp ult i16 %66, %39
  br i1 %67, label %68, label %77, !prof !2

68:                                               ; preds = %57
  %69 = getelementptr inbounds i8, i8* %54, i64 1472
  %70 = bitcast i8* %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = add i64 %71, 1
  store i64 %72, i64* %70, align 8
  %73 = getelementptr inbounds i8, i8* %54, i64 1456
  %74 = bitcast i8* %73 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, 1
  store i64 %76, i64* %74, align 8
  br label %134

77:                                               ; preds = %57
  %78 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %55, i64 0, i32 0, i64 %58, i32 0
  %79 = load %"class.base::internal::PartitionFreelistEntry"*, %"class.base::internal::PartitionFreelistEntry"** %78, align 8
  %80 = icmp eq %"class.base::internal::PartitionFreelistEntry"* %79, null
  br i1 %80, label %86, label %81, !prof !2

81:                                               ; preds = %77
  %82 = getelementptr inbounds i8, i8* %54, i64 1448
  %83 = bitcast i8* %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = add i64 %84, 1
  store i64 %85, i64* %83, align 8
  br label %94

86:                                               ; preds = %77
  %87 = getelementptr inbounds i8, i8* %54, i64 1456
  %88 = bitcast i8* %87 to <2 x i64>*
  %89 = load <2 x i64>, <2 x i64>* %88, align 8
  %90 = add <2 x i64> %89, <i64 1, i64 1>
  %91 = bitcast i8* %87 to <2 x i64>*
  store <2 x i64> %90, <2 x i64>* %91, align 8
  tail call void @_ZN4base8internal11ThreadCache10FillBucketEm(%"class.base::internal::ThreadCache"* %55, i64 %58) #13
  %92 = load %"class.base::internal::PartitionFreelistEntry"*, %"class.base::internal::PartitionFreelistEntry"** %78, align 8
  %93 = icmp eq %"class.base::internal::PartitionFreelistEntry"* %92, null
  br i1 %93, label %134, label %94, !prof !2

94:                                               ; preds = %86, %81
  %95 = phi %"class.base::internal::PartitionFreelistEntry"* [ %92, %86 ], [ %79, %81 ]
  %96 = getelementptr inbounds %"class.base::internal::PartitionFreelistEntry", %"class.base::internal::PartitionFreelistEntry"* %95, i64 0, i32 0
  %97 = load %"struct.base::internal::EncodedPartitionFreelistEntry"*, %"struct.base::internal::EncodedPartitionFreelistEntry"** %96, align 8
  %98 = icmp eq %"struct.base::internal::EncodedPartitionFreelistEntry"* %97, null
  %99 = ptrtoint %"struct.base::internal::EncodedPartitionFreelistEntry"* %97 to i64
  br i1 %98, label %100, label %102

100:                                              ; preds = %94
  %101 = tail call i64 @llvm.bswap.i64(i64 %99) #13
  br label %111

102:                                              ; preds = %94
  %103 = xor i64 %99, -1
  %104 = getelementptr inbounds %"class.base::internal::PartitionFreelistEntry", %"class.base::internal::PartitionFreelistEntry"* %95, i64 0, i32 1
  %105 = load i64, i64* %104, align 8
  %106 = icmp eq i64 %105, %103
  br i1 %106, label %108, label %107, !prof !6

107:                                              ; preds = %102
  tail call fastcc void @_ZN4base8internal12_GLOBAL__N_126FreelistCorruptionDetectedEv() #14
  unreachable

108:                                              ; preds = %102
  %109 = tail call i64 @llvm.bswap.i64(i64 %99) #13
  %110 = inttoptr i64 %109 to i8*
  tail call void @llvm.prefetch(i8* nonnull %110, i32 0, i32 3, i32 1) #13
  br label %111

111:                                              ; preds = %108, %100
  %112 = phi i64 [ %101, %100 ], [ %109, %108 ]
  %113 = inttoptr i64 %112 to %"class.base::internal::PartitionFreelistEntry"*
  %114 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %55, i64 0, i32 0, i64 %58, i32 1
  %115 = load i8, i8* %114, align 8
  %116 = add i8 %115, -1
  store i8 %116, i8* %114, align 8
  store %"class.base::internal::PartitionFreelistEntry"* %113, %"class.base::internal::PartitionFreelistEntry"** %78, align 8
  %117 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %55, i64 0, i32 0, i64 %58, i32 3
  %118 = load i16, i16* %117, align 2
  %119 = zext i16 %118 to i64
  store i64 %119, i64* %5, align 8
  %120 = load i16, i16* %117, align 2
  %121 = zext i16 %120 to i64
  %122 = getelementptr inbounds i8, i8* %54, i64 1424
  %123 = bitcast i8* %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = sub i64 %124, %121
  store i64 %125, i64* %123, align 8
  %126 = bitcast %"class.base::internal::PartitionFreelistEntry"* %95 to i8*
  br label %129

127:                                              ; preds = %52
  %128 = call i8* @_ZN4base13PartitionRootILb1EE28MaybeInitThreadCacheAndAllocEtPm(%"struct.base::PartitionRoot"* %21, i16 zeroext %39, i64* nonnull %5) #13
  br label %129

129:                                              ; preds = %127, %111
  %130 = phi i8* [ %128, %127 ], [ %126, %111 ]
  %131 = icmp eq i8* %130, null
  br i1 %131, label %132, label %269, !prof !2

132:                                              ; preds = %129
  %133 = zext i16 %39 to i64
  br label %134

134:                                              ; preds = %132, %86, %68
  %135 = phi i64 [ %133, %132 ], [ %58, %86 ], [ %58, %68 ]
  %136 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %21, i64 0, i32 10, i64 %135
  %137 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %21, i64 0, i32 8
  %138 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %137, i64 0, i32 0
  %139 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %137, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %140

140:                                              ; preds = %152, %134
  %141 = phi i32 [ 0, %134 ], [ %153, %152 ]
  %142 = phi i32 [ 1, %134 ], [ %156, %152 ]
  %143 = load atomic i32, i32* %139 monotonic, align 4
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %148, !prof !7

145:                                              ; preds = %140
  %146 = cmpxchg weak i32* %139, i32 0, i32 1 acquire monotonic
  %147 = extractvalue { i32, i1 } %146, 1
  br i1 %147, label %163, label %148, !prof !6

148:                                              ; preds = %145, %140
  %149 = icmp sgt i32 %142, 0
  br i1 %149, label %158, label %152

150:                                              ; preds = %158
  %151 = add i32 %142, %141
  br label %152

152:                                              ; preds = %150, %148
  %153 = phi i32 [ %141, %148 ], [ %151, %150 ]
  %154 = shl i32 %142, 1
  %155 = icmp slt i32 %154, 64
  %156 = select i1 %155, i32 %154, i32 64
  %157 = icmp slt i32 %153, 1000
  br i1 %157, label %140, label %162

158:                                              ; preds = %148, %158
  %159 = phi i32 [ %160, %158 ], [ 0, %148 ]
  call void asm sideeffect "pause", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !8
  %160 = add nuw nsw i32 %159, 1
  %161 = icmp eq i32 %160, %142
  br i1 %161, label %150, label %158

162:                                              ; preds = %152
  call void @_ZN4base8internal13SpinningMutex8LockSlowEv(%"class.base::internal::SpinningMutex"* %138) #13
  br label %163

163:                                              ; preds = %145, %162
  %164 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %136, i64 0, i32 0
  %165 = load %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::SlotSpanMetadata"** %164, align 8
  %166 = bitcast %"struct.base::internal::SlotSpanMetadata"* %165 to i8**
  %167 = load i8*, i8** %166, align 1
  %168 = icmp eq i8* %167, null
  br i1 %168, label %193, label %169, !prof !2

169:                                              ; preds = %163
  %170 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %165, i64 0, i32 0
  store i8 0, i8* %4, align 1
  %171 = bitcast i8* %167 to %"struct.base::internal::EncodedPartitionFreelistEntry"**
  %172 = load %"struct.base::internal::EncodedPartitionFreelistEntry"*, %"struct.base::internal::EncodedPartitionFreelistEntry"** %171, align 8
  %173 = icmp eq %"struct.base::internal::EncodedPartitionFreelistEntry"* %172, null
  %174 = ptrtoint %"struct.base::internal::EncodedPartitionFreelistEntry"* %172 to i64
  br i1 %173, label %175, label %177

175:                                              ; preds = %169
  %176 = call i64 @llvm.bswap.i64(i64 %174) #13
  br label %187

177:                                              ; preds = %169
  %178 = xor i64 %174, -1
  %179 = getelementptr inbounds i8, i8* %167, i64 8
  %180 = bitcast i8* %179 to i64*
  %181 = load i64, i64* %180, align 8
  %182 = icmp eq i64 %181, %178
  br i1 %182, label %184, label %183, !prof !6

183:                                              ; preds = %177
  call fastcc void @_ZN4base8internal12_GLOBAL__N_126FreelistCorruptionDetectedEv() #14
  unreachable

184:                                              ; preds = %177
  %185 = call i64 @llvm.bswap.i64(i64 %174) #13
  %186 = inttoptr i64 %185 to i8*
  call void @llvm.prefetch(i8* nonnull %186, i32 0, i32 3, i32 1) #13
  br label %187

187:                                              ; preds = %184, %175
  %188 = phi i64 [ %176, %175 ], [ %185, %184 ]
  %189 = inttoptr i64 %188 to %"class.base::internal::PartitionFreelistEntry"*
  store %"class.base::internal::PartitionFreelistEntry"* %189, %"class.base::internal::PartitionFreelistEntry"** %170, align 1
  %190 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %165, i64 0, i32 3
  %191 = load i16, i16* %190, align 1
  %192 = add i16 %191, 1
  store i16 %192, i16* %190, align 1
  br label %195

193:                                              ; preds = %163
  %194 = call i8* @_ZN4base8internal15PartitionBucketILb1EE13SlowPathAllocEPNS_13PartitionRootILb1EEEimmPb(%"struct.base::internal::PartitionBucket"* %136, %"struct.base::PartitionRoot"* %21, i32 1, i64 %1, i64 16384, i8* nonnull %4) #13
  br label %195

195:                                              ; preds = %193, %187
  %196 = phi i8* [ %167, %187 ], [ %194, %193 ]
  %197 = atomicrmw xchg i32* %139, i32 0 release
  %198 = icmp eq i32 %197, 2
  br i1 %198, label %199, label %266, !prof !2

199:                                              ; preds = %195
  call void @_ZN4base8internal13SpinningMutex9FutexWakeEv(%"class.base::internal::SpinningMutex"* %138) #13
  br label %266

200:                                              ; preds = %48
  %201 = zext i16 %39 to i64
  %202 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %21, i64 0, i32 10, i64 %201
  %203 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %21, i64 0, i32 8
  %204 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %203, i64 0, i32 0
  %205 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %203, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %206

206:                                              ; preds = %218, %200
  %207 = phi i32 [ 0, %200 ], [ %219, %218 ]
  %208 = phi i32 [ 1, %200 ], [ %222, %218 ]
  %209 = load atomic i32, i32* %205 monotonic, align 4
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %214, !prof !7

211:                                              ; preds = %206
  %212 = cmpxchg weak i32* %205, i32 0, i32 1 acquire monotonic
  %213 = extractvalue { i32, i1 } %212, 1
  br i1 %213, label %229, label %214, !prof !6

214:                                              ; preds = %211, %206
  %215 = icmp sgt i32 %208, 0
  br i1 %215, label %224, label %218

216:                                              ; preds = %224
  %217 = add i32 %208, %207
  br label %218

218:                                              ; preds = %216, %214
  %219 = phi i32 [ %207, %214 ], [ %217, %216 ]
  %220 = shl i32 %208, 1
  %221 = icmp slt i32 %220, 64
  %222 = select i1 %221, i32 %220, i32 64
  %223 = icmp slt i32 %219, 1000
  br i1 %223, label %206, label %228

224:                                              ; preds = %214, %224
  %225 = phi i32 [ %226, %224 ], [ 0, %214 ]
  tail call void asm sideeffect "pause", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !8
  %226 = add nuw nsw i32 %225, 1
  %227 = icmp eq i32 %226, %208
  br i1 %227, label %216, label %224

228:                                              ; preds = %218
  tail call void @_ZN4base8internal13SpinningMutex8LockSlowEv(%"class.base::internal::SpinningMutex"* %204) #13
  br label %229

229:                                              ; preds = %211, %228
  %230 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %202, i64 0, i32 0
  %231 = load %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::SlotSpanMetadata"** %230, align 8
  %232 = bitcast %"struct.base::internal::SlotSpanMetadata"* %231 to i8**
  %233 = load i8*, i8** %232, align 1
  %234 = icmp eq i8* %233, null
  br i1 %234, label %259, label %235, !prof !2

235:                                              ; preds = %229
  %236 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %231, i64 0, i32 0
  store i8 0, i8* %4, align 1
  %237 = bitcast i8* %233 to %"struct.base::internal::EncodedPartitionFreelistEntry"**
  %238 = load %"struct.base::internal::EncodedPartitionFreelistEntry"*, %"struct.base::internal::EncodedPartitionFreelistEntry"** %237, align 8
  %239 = icmp eq %"struct.base::internal::EncodedPartitionFreelistEntry"* %238, null
  %240 = ptrtoint %"struct.base::internal::EncodedPartitionFreelistEntry"* %238 to i64
  br i1 %239, label %241, label %243

241:                                              ; preds = %235
  %242 = tail call i64 @llvm.bswap.i64(i64 %240) #13
  br label %253

243:                                              ; preds = %235
  %244 = xor i64 %240, -1
  %245 = getelementptr inbounds i8, i8* %233, i64 8
  %246 = bitcast i8* %245 to i64*
  %247 = load i64, i64* %246, align 8
  %248 = icmp eq i64 %247, %244
  br i1 %248, label %250, label %249, !prof !6

249:                                              ; preds = %243
  tail call fastcc void @_ZN4base8internal12_GLOBAL__N_126FreelistCorruptionDetectedEv() #14
  unreachable

250:                                              ; preds = %243
  %251 = tail call i64 @llvm.bswap.i64(i64 %240) #13
  %252 = inttoptr i64 %251 to i8*
  tail call void @llvm.prefetch(i8* nonnull %252, i32 0, i32 3, i32 1) #13
  br label %253

253:                                              ; preds = %250, %241
  %254 = phi i64 [ %242, %241 ], [ %251, %250 ]
  %255 = inttoptr i64 %254 to %"class.base::internal::PartitionFreelistEntry"*
  store %"class.base::internal::PartitionFreelistEntry"* %255, %"class.base::internal::PartitionFreelistEntry"** %236, align 1
  %256 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %231, i64 0, i32 3
  %257 = load i16, i16* %256, align 1
  %258 = add i16 %257, 1
  store i16 %258, i16* %256, align 1
  br label %261

259:                                              ; preds = %229
  %260 = call i8* @_ZN4base8internal15PartitionBucketILb1EE13SlowPathAllocEPNS_13PartitionRootILb1EEEimmPb(%"struct.base::internal::PartitionBucket"* %202, %"struct.base::PartitionRoot"* %21, i32 1, i64 %1, i64 16384, i8* nonnull %4) #13
  br label %261

261:                                              ; preds = %259, %253
  %262 = phi i8* [ %233, %253 ], [ %260, %259 ]
  %263 = atomicrmw xchg i32* %205, i32 0 release
  %264 = icmp eq i32 %263, 2
  br i1 %264, label %265, label %266, !prof !2

265:                                              ; preds = %261
  call void @_ZN4base8internal13SpinningMutex9FutexWakeEv(%"class.base::internal::SpinningMutex"* %204) #13
  br label %266

266:                                              ; preds = %265, %261, %199, %195
  %267 = phi i8* [ %196, %195 ], [ %196, %199 ], [ %262, %261 ], [ %262, %265 ]
  %268 = icmp eq i8* %267, null
  br i1 %268, label %271, label %269, !prof !2

269:                                              ; preds = %129, %266
  %270 = phi i8* [ %267, %266 ], [ %130, %129 ]
  br label %271

271:                                              ; preds = %266, %269
  %272 = phi i8* [ null, %266 ], [ %270, %269 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #13
  ret i8* %272
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN4base8internal15PartitionCallocEPKNS_9allocator17AllocatorDispatchEmmPv(%"struct.base::allocator::AllocatorDispatch"* nocapture readnone, i64, i64, i8* nocapture readnone) #0 {
  %5 = alloca i8, align 1
  %6 = alloca i64, align 8
  %7 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %1, i64 %2) #13
  %8 = extractvalue { i64, i1 } %7, 1
  %9 = extractvalue { i64, i1 } %7, 0
  br i1 %8, label %10, label %11, !prof !2

10:                                               ; preds = %4
  tail call void @llvm.trap() #13
  unreachable

11:                                               ; preds = %4
  %12 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) acquire, align 8
  %13 = inttoptr i64 %12 to %"struct.base::PartitionRoot"*
  %14 = icmp eq i64 %12, 0
  br i1 %14, label %15, label %26, !prof !2

15:                                               ; preds = %11, %15
  %16 = cmpxchg i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0), i8 0, i8 1 acquire acquire
  %17 = extractvalue { i8, i1 } %16, 1
  br i1 %17, label %18, label %15

18:                                               ; preds = %15
  %19 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) monotonic, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %23, label %21

21:                                               ; preds = %18
  %22 = inttoptr i64 %19 to %"struct.base::PartitionRoot"*
  br label %24

23:                                               ; preds = %18
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0), align 8
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 1), align 1
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 2), align 2
  store i8 1, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 3), align 1
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 8) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 16), i8 0, i64 5120, i1 false) #13
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5176), align 8
  store i64 0, i64* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5392) to i64*), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5400) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5184), i8 0, i64 202, i1 false) #13
  tail call void @_ZN4base13PartitionRootILb1EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot"* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), i40 65793) #13
  store atomic i64 ptrtoint (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to i64), i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) release, align 8
  br label %24

24:                                               ; preds = %23, %21
  %25 = phi %"struct.base::PartitionRoot"* [ bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), %23 ], [ %22, %21 ]
  store atomic i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) release, align 8
  br label %26

26:                                               ; preds = %24, %11
  %27 = phi %"struct.base::PartitionRoot"* [ %13, %11 ], [ %25, %24 ]
  %28 = tail call i64 @llvm.ctlz.i64(i64 %9, i1 false) #13, !range !3
  %29 = sub nuw nsw i64 64, %28
  %30 = and i64 %29, 255
  %31 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN4base12_GLOBAL__N_116kOrderIndexShiftE, i64 0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i64
  %34 = lshr i64 %9, %33
  %35 = and i64 %34, 7
  %36 = getelementptr inbounds [65 x i64], [65 x i64]* @_ZN4base12_GLOBAL__N_118kOrderSubIndexMaskE, i64 0, i64 %30
  %37 = load i64, i64* %36, align 8
  %38 = and i64 %37, %9
  %39 = shl nuw nsw i64 %30, 3
  %40 = or i64 %35, %39
  %41 = icmp ne i64 %38, 0
  %42 = zext i1 %41 to i64
  %43 = add nuw nsw i64 %40, %42
  %44 = getelementptr inbounds { [128 x i64], [521 x i16] }, { [128 x i64], [521 x i16] }* @_ZZN4base8internal17BucketIndexLookup8GetIndexEmE6lookup, i64 0, i32 1, i64 %43
  %45 = load i16, i16* %44, align 2
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5) #13
  store i8 0, i8* %5, align 1
  %46 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #13
  store i64 -6148914691236517206, i64* %6, align 8
  %47 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %27, i64 0, i32 0
  %48 = load i8, i8* %47, align 8
  %49 = icmp eq i8 %48, 2
  br i1 %49, label %50, label %54

50:                                               ; preds = %26
  %51 = load atomic i8, i8* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0) acquire, align 8
  %52 = icmp eq i8 %51, 2
  br i1 %52, label %53, label %54, !prof !2

53:                                               ; preds = %50
  tail call void @_ZN4base8internal6PCScan8JoinScanEv() #13
  br label %54

54:                                               ; preds = %53, %50, %26
  %55 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %27, i64 0, i32 2
  %56 = load i8, i8* %55, align 2, !range !4
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %241, label %58, !prof !5

58:                                               ; preds = %54
  %59 = load i32, i32* @_ZN4base8internal18g_thread_cache_keyE, align 4
  %60 = tail call i8* @pthread_getspecific(i32 %59) #13
  %61 = bitcast i8* %60 to %"class.base::internal::ThreadCache"*
  %62 = icmp ugt i8* %60, inttoptr (i64 1 to i8*)
  br i1 %62, label %63, label %133, !prof !6

63:                                               ; preds = %58
  %64 = zext i16 %45 to i64
  %65 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %61, i64 0, i32 3, i32 12, i64 %64
  %66 = load i64, i64* %65, align 8
  %67 = add i64 %66, 1
  store i64 %67, i64* %65, align 8
  %68 = getelementptr inbounds i8, i8* %60, i64 1440
  %69 = bitcast i8* %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = add i64 %70, 1
  store i64 %71, i64* %69, align 8
  %72 = load i16, i16* @_ZN4base8internal11ThreadCache28largest_active_bucket_index_E, align 2
  %73 = icmp ult i16 %72, %45
  br i1 %73, label %74, label %83, !prof !2

74:                                               ; preds = %63
  %75 = getelementptr inbounds i8, i8* %60, i64 1472
  %76 = bitcast i8* %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = add i64 %77, 1
  store i64 %78, i64* %76, align 8
  %79 = getelementptr inbounds i8, i8* %60, i64 1456
  %80 = bitcast i8* %79 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = add i64 %81, 1
  store i64 %82, i64* %80, align 8
  br label %142

83:                                               ; preds = %63
  %84 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %61, i64 0, i32 0, i64 %64, i32 0
  %85 = load %"class.base::internal::PartitionFreelistEntry"*, %"class.base::internal::PartitionFreelistEntry"** %84, align 8
  %86 = icmp eq %"class.base::internal::PartitionFreelistEntry"* %85, null
  br i1 %86, label %92, label %87, !prof !2

87:                                               ; preds = %83
  %88 = getelementptr inbounds i8, i8* %60, i64 1448
  %89 = bitcast i8* %88 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = add i64 %90, 1
  store i64 %91, i64* %89, align 8
  br label %100

92:                                               ; preds = %83
  %93 = getelementptr inbounds i8, i8* %60, i64 1456
  %94 = bitcast i8* %93 to <2 x i64>*
  %95 = load <2 x i64>, <2 x i64>* %94, align 8
  %96 = add <2 x i64> %95, <i64 1, i64 1>
  %97 = bitcast i8* %93 to <2 x i64>*
  store <2 x i64> %96, <2 x i64>* %97, align 8
  tail call void @_ZN4base8internal11ThreadCache10FillBucketEm(%"class.base::internal::ThreadCache"* %61, i64 %64) #13
  %98 = load %"class.base::internal::PartitionFreelistEntry"*, %"class.base::internal::PartitionFreelistEntry"** %84, align 8
  %99 = icmp eq %"class.base::internal::PartitionFreelistEntry"* %98, null
  br i1 %99, label %142, label %100, !prof !2

100:                                              ; preds = %92, %87
  %101 = phi %"class.base::internal::PartitionFreelistEntry"* [ %98, %92 ], [ %85, %87 ]
  %102 = getelementptr inbounds %"class.base::internal::PartitionFreelistEntry", %"class.base::internal::PartitionFreelistEntry"* %101, i64 0, i32 0
  %103 = load %"struct.base::internal::EncodedPartitionFreelistEntry"*, %"struct.base::internal::EncodedPartitionFreelistEntry"** %102, align 8
  %104 = icmp eq %"struct.base::internal::EncodedPartitionFreelistEntry"* %103, null
  %105 = ptrtoint %"struct.base::internal::EncodedPartitionFreelistEntry"* %103 to i64
  br i1 %104, label %106, label %108

106:                                              ; preds = %100
  %107 = tail call i64 @llvm.bswap.i64(i64 %105) #13
  br label %117

108:                                              ; preds = %100
  %109 = xor i64 %105, -1
  %110 = getelementptr inbounds %"class.base::internal::PartitionFreelistEntry", %"class.base::internal::PartitionFreelistEntry"* %101, i64 0, i32 1
  %111 = load i64, i64* %110, align 8
  %112 = icmp eq i64 %111, %109
  br i1 %112, label %114, label %113, !prof !6

113:                                              ; preds = %108
  tail call fastcc void @_ZN4base8internal12_GLOBAL__N_126FreelistCorruptionDetectedEv() #14
  unreachable

114:                                              ; preds = %108
  %115 = tail call i64 @llvm.bswap.i64(i64 %105) #13
  %116 = inttoptr i64 %115 to i8*
  tail call void @llvm.prefetch(i8* nonnull %116, i32 0, i32 3, i32 1) #13
  br label %117

117:                                              ; preds = %114, %106
  %118 = phi i64 [ %107, %106 ], [ %115, %114 ]
  %119 = inttoptr i64 %118 to %"class.base::internal::PartitionFreelistEntry"*
  %120 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %61, i64 0, i32 0, i64 %64, i32 1
  %121 = load i8, i8* %120, align 8
  %122 = add i8 %121, -1
  store i8 %122, i8* %120, align 8
  store %"class.base::internal::PartitionFreelistEntry"* %119, %"class.base::internal::PartitionFreelistEntry"** %84, align 8
  %123 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %61, i64 0, i32 0, i64 %64, i32 3
  %124 = load i16, i16* %123, align 2
  %125 = zext i16 %124 to i64
  store i64 %125, i64* %6, align 8
  %126 = load i16, i16* %123, align 2
  %127 = zext i16 %126 to i64
  %128 = getelementptr inbounds i8, i8* %60, i64 1424
  %129 = bitcast i8* %128 to i64*
  %130 = load i64, i64* %129, align 8
  %131 = sub i64 %130, %127
  store i64 %131, i64* %129, align 8
  %132 = bitcast %"class.base::internal::PartitionFreelistEntry"* %101 to i8*
  br label %135

133:                                              ; preds = %58
  %134 = call i8* @_ZN4base13PartitionRootILb1EE28MaybeInitThreadCacheAndAllocEtPm(%"struct.base::PartitionRoot"* %27, i16 zeroext %45, i64* nonnull %6) #13
  br label %135

135:                                              ; preds = %133, %117
  %136 = phi i8* [ %134, %133 ], [ %132, %117 ]
  %137 = icmp eq i8* %136, null
  br i1 %137, label %138, label %140, !prof !2

138:                                              ; preds = %135
  %139 = zext i16 %45 to i64
  br label %142

140:                                              ; preds = %135
  %141 = load i64, i64* %6, align 8
  br label %344

142:                                              ; preds = %138, %92, %74
  %143 = phi i64 [ %139, %138 ], [ %64, %92 ], [ %64, %74 ]
  %144 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %27, i64 0, i32 10, i64 %143
  %145 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %27, i64 0, i32 8
  %146 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %145, i64 0, i32 0
  %147 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %145, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %148

148:                                              ; preds = %160, %142
  %149 = phi i32 [ 0, %142 ], [ %161, %160 ]
  %150 = phi i32 [ 1, %142 ], [ %164, %160 ]
  %151 = load atomic i32, i32* %147 monotonic, align 4
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %156, !prof !7

153:                                              ; preds = %148
  %154 = cmpxchg weak i32* %147, i32 0, i32 1 acquire monotonic
  %155 = extractvalue { i32, i1 } %154, 1
  br i1 %155, label %171, label %156, !prof !6

156:                                              ; preds = %153, %148
  %157 = icmp sgt i32 %150, 0
  br i1 %157, label %166, label %160

158:                                              ; preds = %166
  %159 = add i32 %150, %149
  br label %160

160:                                              ; preds = %158, %156
  %161 = phi i32 [ %149, %156 ], [ %159, %158 ]
  %162 = shl i32 %150, 1
  %163 = icmp slt i32 %162, 64
  %164 = select i1 %163, i32 %162, i32 64
  %165 = icmp slt i32 %161, 1000
  br i1 %165, label %148, label %170

166:                                              ; preds = %156, %166
  %167 = phi i32 [ %168, %166 ], [ 0, %156 ]
  call void asm sideeffect "pause", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !8
  %168 = add nuw nsw i32 %167, 1
  %169 = icmp eq i32 %168, %150
  br i1 %169, label %158, label %166

170:                                              ; preds = %160
  call void @_ZN4base8internal13SpinningMutex8LockSlowEv(%"class.base::internal::SpinningMutex"* %146) #13
  br label %171

171:                                              ; preds = %153, %170
  %172 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %144, i64 0, i32 0
  %173 = load %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::SlotSpanMetadata"** %172, align 8
  %174 = bitcast %"struct.base::internal::SlotSpanMetadata"* %173 to i8**
  %175 = load i8*, i8** %174, align 1
  %176 = icmp eq i8* %175, null
  br i1 %176, label %204, label %177, !prof !2

177:                                              ; preds = %171
  %178 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %173, i64 0, i32 0
  store i8 0, i8* %5, align 1
  %179 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %27, i64 0, i32 10, i64 %143, i32 3
  %180 = load i32, i32* %179, align 8
  %181 = zext i32 %180 to i64
  %182 = bitcast i8* %175 to %"struct.base::internal::EncodedPartitionFreelistEntry"**
  %183 = load %"struct.base::internal::EncodedPartitionFreelistEntry"*, %"struct.base::internal::EncodedPartitionFreelistEntry"** %182, align 8
  %184 = icmp eq %"struct.base::internal::EncodedPartitionFreelistEntry"* %183, null
  %185 = ptrtoint %"struct.base::internal::EncodedPartitionFreelistEntry"* %183 to i64
  br i1 %184, label %186, label %188

186:                                              ; preds = %177
  %187 = call i64 @llvm.bswap.i64(i64 %185) #13
  br label %198

188:                                              ; preds = %177
  %189 = xor i64 %185, -1
  %190 = getelementptr inbounds i8, i8* %175, i64 8
  %191 = bitcast i8* %190 to i64*
  %192 = load i64, i64* %191, align 8
  %193 = icmp eq i64 %192, %189
  br i1 %193, label %195, label %194, !prof !6

194:                                              ; preds = %188
  call fastcc void @_ZN4base8internal12_GLOBAL__N_126FreelistCorruptionDetectedEv() #14
  unreachable

195:                                              ; preds = %188
  %196 = call i64 @llvm.bswap.i64(i64 %185) #13
  %197 = inttoptr i64 %196 to i8*
  call void @llvm.prefetch(i8* nonnull %197, i32 0, i32 3, i32 1) #13
  br label %198

198:                                              ; preds = %195, %186
  %199 = phi i64 [ %187, %186 ], [ %196, %195 ]
  %200 = inttoptr i64 %199 to %"class.base::internal::PartitionFreelistEntry"*
  store %"class.base::internal::PartitionFreelistEntry"* %200, %"class.base::internal::PartitionFreelistEntry"** %178, align 1
  %201 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %173, i64 0, i32 3
  %202 = load i16, i16* %201, align 1
  %203 = add i16 %202, 1
  store i16 %203, i16* %201, align 1
  br label %235

204:                                              ; preds = %171
  %205 = call i8* @_ZN4base8internal15PartitionBucketILb1EE13SlowPathAllocEPNS_13PartitionRootILb1EEEimmPb(%"struct.base::internal::PartitionBucket"* %144, %"struct.base::PartitionRoot"* %27, i32 2, i64 %9, i64 16384, i8* nonnull %5) #13
  %206 = icmp eq i8* %205, null
  br i1 %206, label %235, label %207, !prof !2

207:                                              ; preds = %204
  %208 = ptrtoint i8* %205 to i64
  %209 = and i64 %208, -2097152
  %210 = or i64 %209, 4096
  %211 = inttoptr i64 %210 to i8*
  %212 = lshr i64 %208, 9
  %213 = and i64 %212, 4064
  %214 = getelementptr inbounds i8, i8* %211, i64 %213
  %215 = bitcast i8* %214 to %"struct.base::internal::PartitionPage"*
  %216 = getelementptr inbounds i8, i8* %214, i64 30
  %217 = load i8, i8* %216, align 2
  %218 = zext i8 %217 to i64
  %219 = sub nsw i64 0, %218
  %220 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %215, i64 %219, i32 0, i32 1, i64 21
  %221 = load i8, i8* %220, align 1, !range !4
  %222 = icmp eq i8 %221, 0
  br i1 %222, label %223, label %230, !prof !6

223:                                              ; preds = %207
  %224 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %215, i64 %219, i32 0, i32 1, i64 8
  %225 = bitcast i8* %224 to %"struct.base::internal::PartitionBucket"**
  %226 = load %"struct.base::internal::PartitionBucket"*, %"struct.base::internal::PartitionBucket"** %225, align 1
  %227 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %226, i64 0, i32 3
  %228 = load i32, i32* %227, align 8
  %229 = zext i32 %228 to i64
  br label %235

230:                                              ; preds = %207
  %231 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %215, i64 %219, i32 0
  %232 = bitcast %union.anon* %231 to %"struct.base::internal::PartitionPage"*
  %233 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %232, i64 1, i32 0, i32 0, i32 0
  %234 = load i64, i64* %233, align 1
  br label %235

235:                                              ; preds = %230, %223, %204, %198
  %236 = phi i64 [ %181, %198 ], [ -6148914691236517206, %204 ], [ %229, %223 ], [ %234, %230 ]
  %237 = phi i8* [ %175, %198 ], [ null, %204 ], [ %205, %223 ], [ %205, %230 ]
  %238 = atomicrmw xchg i32* %147, i32 0 release
  %239 = icmp eq i32 %238, 2
  br i1 %239, label %240, label %340, !prof !2

240:                                              ; preds = %235
  call void @_ZN4base8internal13SpinningMutex9FutexWakeEv(%"class.base::internal::SpinningMutex"* %146) #13
  br label %340

241:                                              ; preds = %54
  %242 = zext i16 %45 to i64
  %243 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %27, i64 0, i32 10, i64 %242
  %244 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %27, i64 0, i32 8
  %245 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %244, i64 0, i32 0
  %246 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %244, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %247

247:                                              ; preds = %259, %241
  %248 = phi i32 [ 0, %241 ], [ %260, %259 ]
  %249 = phi i32 [ 1, %241 ], [ %263, %259 ]
  %250 = load atomic i32, i32* %246 monotonic, align 4
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %252, label %255, !prof !7

252:                                              ; preds = %247
  %253 = cmpxchg weak i32* %246, i32 0, i32 1 acquire monotonic
  %254 = extractvalue { i32, i1 } %253, 1
  br i1 %254, label %270, label %255, !prof !6

255:                                              ; preds = %252, %247
  %256 = icmp sgt i32 %249, 0
  br i1 %256, label %265, label %259

257:                                              ; preds = %265
  %258 = add i32 %249, %248
  br label %259

259:                                              ; preds = %257, %255
  %260 = phi i32 [ %248, %255 ], [ %258, %257 ]
  %261 = shl i32 %249, 1
  %262 = icmp slt i32 %261, 64
  %263 = select i1 %262, i32 %261, i32 64
  %264 = icmp slt i32 %260, 1000
  br i1 %264, label %247, label %269

265:                                              ; preds = %255, %265
  %266 = phi i32 [ %267, %265 ], [ 0, %255 ]
  tail call void asm sideeffect "pause", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !8
  %267 = add nuw nsw i32 %266, 1
  %268 = icmp eq i32 %267, %249
  br i1 %268, label %257, label %265

269:                                              ; preds = %259
  tail call void @_ZN4base8internal13SpinningMutex8LockSlowEv(%"class.base::internal::SpinningMutex"* %245) #13
  br label %270

270:                                              ; preds = %252, %269
  %271 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %243, i64 0, i32 0
  %272 = load %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::SlotSpanMetadata"** %271, align 8
  %273 = bitcast %"struct.base::internal::SlotSpanMetadata"* %272 to i8**
  %274 = load i8*, i8** %273, align 1
  %275 = icmp eq i8* %274, null
  br i1 %275, label %303, label %276, !prof !2

276:                                              ; preds = %270
  %277 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %272, i64 0, i32 0
  store i8 0, i8* %5, align 1
  %278 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %27, i64 0, i32 10, i64 %242, i32 3
  %279 = load i32, i32* %278, align 8
  %280 = zext i32 %279 to i64
  %281 = bitcast i8* %274 to %"struct.base::internal::EncodedPartitionFreelistEntry"**
  %282 = load %"struct.base::internal::EncodedPartitionFreelistEntry"*, %"struct.base::internal::EncodedPartitionFreelistEntry"** %281, align 8
  %283 = icmp eq %"struct.base::internal::EncodedPartitionFreelistEntry"* %282, null
  %284 = ptrtoint %"struct.base::internal::EncodedPartitionFreelistEntry"* %282 to i64
  br i1 %283, label %285, label %287

285:                                              ; preds = %276
  %286 = tail call i64 @llvm.bswap.i64(i64 %284) #13
  br label %297

287:                                              ; preds = %276
  %288 = xor i64 %284, -1
  %289 = getelementptr inbounds i8, i8* %274, i64 8
  %290 = bitcast i8* %289 to i64*
  %291 = load i64, i64* %290, align 8
  %292 = icmp eq i64 %291, %288
  br i1 %292, label %294, label %293, !prof !6

293:                                              ; preds = %287
  tail call fastcc void @_ZN4base8internal12_GLOBAL__N_126FreelistCorruptionDetectedEv() #14
  unreachable

294:                                              ; preds = %287
  %295 = tail call i64 @llvm.bswap.i64(i64 %284) #13
  %296 = inttoptr i64 %295 to i8*
  tail call void @llvm.prefetch(i8* nonnull %296, i32 0, i32 3, i32 1) #13
  br label %297

297:                                              ; preds = %294, %285
  %298 = phi i64 [ %286, %285 ], [ %295, %294 ]
  %299 = inttoptr i64 %298 to %"class.base::internal::PartitionFreelistEntry"*
  store %"class.base::internal::PartitionFreelistEntry"* %299, %"class.base::internal::PartitionFreelistEntry"** %277, align 1
  %300 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %272, i64 0, i32 3
  %301 = load i16, i16* %300, align 1
  %302 = add i16 %301, 1
  store i16 %302, i16* %300, align 1
  br label %334

303:                                              ; preds = %270
  %304 = call i8* @_ZN4base8internal15PartitionBucketILb1EE13SlowPathAllocEPNS_13PartitionRootILb1EEEimmPb(%"struct.base::internal::PartitionBucket"* %243, %"struct.base::PartitionRoot"* %27, i32 2, i64 %9, i64 16384, i8* nonnull %5) #13
  %305 = icmp eq i8* %304, null
  br i1 %305, label %334, label %306, !prof !2

306:                                              ; preds = %303
  %307 = ptrtoint i8* %304 to i64
  %308 = and i64 %307, -2097152
  %309 = or i64 %308, 4096
  %310 = inttoptr i64 %309 to i8*
  %311 = lshr i64 %307, 9
  %312 = and i64 %311, 4064
  %313 = getelementptr inbounds i8, i8* %310, i64 %312
  %314 = bitcast i8* %313 to %"struct.base::internal::PartitionPage"*
  %315 = getelementptr inbounds i8, i8* %313, i64 30
  %316 = load i8, i8* %315, align 2
  %317 = zext i8 %316 to i64
  %318 = sub nsw i64 0, %317
  %319 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %314, i64 %318, i32 0, i32 1, i64 21
  %320 = load i8, i8* %319, align 1, !range !4
  %321 = icmp eq i8 %320, 0
  br i1 %321, label %322, label %329, !prof !6

322:                                              ; preds = %306
  %323 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %314, i64 %318, i32 0, i32 1, i64 8
  %324 = bitcast i8* %323 to %"struct.base::internal::PartitionBucket"**
  %325 = load %"struct.base::internal::PartitionBucket"*, %"struct.base::internal::PartitionBucket"** %324, align 1
  %326 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %325, i64 0, i32 3
  %327 = load i32, i32* %326, align 8
  %328 = zext i32 %327 to i64
  br label %334

329:                                              ; preds = %306
  %330 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %314, i64 %318, i32 0
  %331 = bitcast %union.anon* %330 to %"struct.base::internal::PartitionPage"*
  %332 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %331, i64 1, i32 0, i32 0, i32 0
  %333 = load i64, i64* %332, align 1
  br label %334

334:                                              ; preds = %329, %322, %303, %297
  %335 = phi i64 [ %280, %297 ], [ -6148914691236517206, %303 ], [ %328, %322 ], [ %333, %329 ]
  %336 = phi i8* [ %274, %297 ], [ null, %303 ], [ %304, %322 ], [ %304, %329 ]
  %337 = atomicrmw xchg i32* %246, i32 0 release
  %338 = icmp eq i32 %337, 2
  br i1 %338, label %339, label %340, !prof !2

339:                                              ; preds = %334
  call void @_ZN4base8internal13SpinningMutex9FutexWakeEv(%"class.base::internal::SpinningMutex"* %245) #13
  br label %340

340:                                              ; preds = %339, %334, %240, %235
  %341 = phi i64 [ %236, %235 ], [ %236, %240 ], [ %335, %334 ], [ %335, %339 ]
  %342 = phi i8* [ %237, %235 ], [ %237, %240 ], [ %336, %334 ], [ %336, %339 ]
  %343 = icmp eq i8* %342, null
  br i1 %343, label %350, label %344, !prof !2

344:                                              ; preds = %340, %140
  %345 = phi i8* [ %136, %140 ], [ %342, %340 ]
  %346 = phi i64 [ %141, %140 ], [ %341, %340 ]
  %347 = load i8, i8* %5, align 1
  %348 = icmp eq i8 %347, 0
  br i1 %348, label %349, label %350, !prof !9

349:                                              ; preds = %344
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %345, i8 0, i64 %346, i1 false) #13
  br label %350

350:                                              ; preds = %340, %344, %349
  %351 = phi i8* [ null, %340 ], [ %345, %344 ], [ %345, %349 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #13
  ret i8* %351
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN4base8internal17PartitionMemalignEPKNS_9allocator17AllocatorDispatchEmmPv(%"struct.base::allocator::AllocatorDispatch"* nocapture readnone, i64, i64, i8* nocapture readnone) #0 {
  %5 = tail call fastcc i8* @_ZN12_GLOBAL__N_121AllocateAlignedMemoryEmm(i64 %1, i64 %2)
  ret i8* %5
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i8* @_ZN12_GLOBAL__N_121AllocateAlignedMemoryEmm(i64, i64) unnamed_addr #0 {
  %3 = alloca i8, align 1
  %4 = alloca i64, align 8
  %5 = alloca i8, align 1
  %6 = alloca i64, align 8
  %7 = icmp ult i64 %0, 17
  br i1 %7, label %8, label %280

8:                                                ; preds = %2
  %9 = tail call i64 @llvm.ctpop.i64(i64 %0) #13, !range !3
  %10 = icmp eq i64 %9, 1
  br i1 %10, label %12, label %11, !prof !6

11:                                               ; preds = %8
  tail call void @_ZN7logging8RawCheckEPKc(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.3, i64 0, i64 0)) #13
  br label %12

12:                                               ; preds = %8, %11
  %13 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) acquire, align 8
  %14 = inttoptr i64 %13 to %"struct.base::PartitionRoot"*
  %15 = icmp eq i64 %13, 0
  br i1 %15, label %16, label %27, !prof !2

16:                                               ; preds = %12, %16
  %17 = cmpxchg i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0), i8 0, i8 1 acquire acquire
  %18 = extractvalue { i8, i1 } %17, 1
  br i1 %18, label %19, label %16

19:                                               ; preds = %16
  %20 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) monotonic, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %24, label %22

22:                                               ; preds = %19
  %23 = inttoptr i64 %20 to %"struct.base::PartitionRoot"*
  br label %25

24:                                               ; preds = %19
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0), align 8
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 1), align 1
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 2), align 2
  store i8 1, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 3), align 1
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 8) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 16), i8 0, i64 5120, i1 false) #13
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5176), align 8
  store i64 0, i64* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5392) to i64*), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5400) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5184), i8 0, i64 202, i1 false) #13
  tail call void @_ZN4base13PartitionRootILb1EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot"* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), i40 65793) #13
  store atomic i64 ptrtoint (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to i64), i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) release, align 8
  br label %25

25:                                               ; preds = %24, %22
  %26 = phi %"struct.base::PartitionRoot"* [ bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), %24 ], [ %23, %22 ]
  store atomic i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) release, align 8
  br label %27

27:                                               ; preds = %25, %12
  %28 = phi %"struct.base::PartitionRoot"* [ %14, %12 ], [ %26, %25 ]
  %29 = tail call i64 @llvm.ctlz.i64(i64 %1, i1 false) #13, !range !3
  %30 = sub nuw nsw i64 64, %29
  %31 = and i64 %30, 255
  %32 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN4base12_GLOBAL__N_116kOrderIndexShiftE, i64 0, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i64
  %35 = lshr i64 %1, %34
  %36 = and i64 %35, 7
  %37 = getelementptr inbounds [65 x i64], [65 x i64]* @_ZN4base12_GLOBAL__N_118kOrderSubIndexMaskE, i64 0, i64 %31
  %38 = load i64, i64* %37, align 8
  %39 = and i64 %38, %1
  %40 = shl nuw nsw i64 %31, 3
  %41 = or i64 %36, %40
  %42 = icmp ne i64 %39, 0
  %43 = zext i1 %42 to i64
  %44 = add nuw nsw i64 %41, %43
  %45 = getelementptr inbounds { [128 x i64], [521 x i16] }, { [128 x i64], [521 x i16] }* @_ZZN4base8internal17BucketIndexLookup8GetIndexEmE6lookup, i64 0, i32 1, i64 %44
  %46 = load i16, i16* %45, align 2
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #13
  store i8 0, i8* %3, align 1
  %47 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #13
  store i64 -6148914691236517206, i64* %4, align 8
  %48 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %28, i64 0, i32 0
  %49 = load i8, i8* %48, align 8
  %50 = icmp eq i8 %49, 2
  br i1 %50, label %51, label %55

51:                                               ; preds = %27
  %52 = load atomic i8, i8* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0) acquire, align 8
  %53 = icmp eq i8 %52, 2
  br i1 %53, label %54, label %55, !prof !2

54:                                               ; preds = %51
  tail call void @_ZN4base8internal6PCScan8JoinScanEv() #13
  br label %55

55:                                               ; preds = %54, %51, %27
  %56 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %28, i64 0, i32 2
  %57 = load i8, i8* %56, align 2, !range !4
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %207, label %59, !prof !5

59:                                               ; preds = %55
  %60 = load i32, i32* @_ZN4base8internal18g_thread_cache_keyE, align 4
  %61 = tail call i8* @pthread_getspecific(i32 %60) #13
  %62 = bitcast i8* %61 to %"class.base::internal::ThreadCache"*
  %63 = icmp ugt i8* %61, inttoptr (i64 1 to i8*)
  br i1 %63, label %64, label %134, !prof !6

64:                                               ; preds = %59
  %65 = zext i16 %46 to i64
  %66 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %62, i64 0, i32 3, i32 12, i64 %65
  %67 = load i64, i64* %66, align 8
  %68 = add i64 %67, 1
  store i64 %68, i64* %66, align 8
  %69 = getelementptr inbounds i8, i8* %61, i64 1440
  %70 = bitcast i8* %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = add i64 %71, 1
  store i64 %72, i64* %70, align 8
  %73 = load i16, i16* @_ZN4base8internal11ThreadCache28largest_active_bucket_index_E, align 2
  %74 = icmp ult i16 %73, %46
  br i1 %74, label %75, label %84, !prof !2

75:                                               ; preds = %64
  %76 = getelementptr inbounds i8, i8* %61, i64 1472
  %77 = bitcast i8* %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = add i64 %78, 1
  store i64 %79, i64* %77, align 8
  %80 = getelementptr inbounds i8, i8* %61, i64 1456
  %81 = bitcast i8* %80 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = add i64 %82, 1
  store i64 %83, i64* %81, align 8
  br label %141

84:                                               ; preds = %64
  %85 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %62, i64 0, i32 0, i64 %65, i32 0
  %86 = load %"class.base::internal::PartitionFreelistEntry"*, %"class.base::internal::PartitionFreelistEntry"** %85, align 8
  %87 = icmp eq %"class.base::internal::PartitionFreelistEntry"* %86, null
  br i1 %87, label %93, label %88, !prof !2

88:                                               ; preds = %84
  %89 = getelementptr inbounds i8, i8* %61, i64 1448
  %90 = bitcast i8* %89 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = add i64 %91, 1
  store i64 %92, i64* %90, align 8
  br label %101

93:                                               ; preds = %84
  %94 = getelementptr inbounds i8, i8* %61, i64 1456
  %95 = bitcast i8* %94 to <2 x i64>*
  %96 = load <2 x i64>, <2 x i64>* %95, align 8
  %97 = add <2 x i64> %96, <i64 1, i64 1>
  %98 = bitcast i8* %94 to <2 x i64>*
  store <2 x i64> %97, <2 x i64>* %98, align 8
  tail call void @_ZN4base8internal11ThreadCache10FillBucketEm(%"class.base::internal::ThreadCache"* %62, i64 %65) #13
  %99 = load %"class.base::internal::PartitionFreelistEntry"*, %"class.base::internal::PartitionFreelistEntry"** %85, align 8
  %100 = icmp eq %"class.base::internal::PartitionFreelistEntry"* %99, null
  br i1 %100, label %141, label %101, !prof !2

101:                                              ; preds = %93, %88
  %102 = phi %"class.base::internal::PartitionFreelistEntry"* [ %99, %93 ], [ %86, %88 ]
  %103 = getelementptr inbounds %"class.base::internal::PartitionFreelistEntry", %"class.base::internal::PartitionFreelistEntry"* %102, i64 0, i32 0
  %104 = load %"struct.base::internal::EncodedPartitionFreelistEntry"*, %"struct.base::internal::EncodedPartitionFreelistEntry"** %103, align 8
  %105 = icmp eq %"struct.base::internal::EncodedPartitionFreelistEntry"* %104, null
  %106 = ptrtoint %"struct.base::internal::EncodedPartitionFreelistEntry"* %104 to i64
  br i1 %105, label %107, label %109

107:                                              ; preds = %101
  %108 = tail call i64 @llvm.bswap.i64(i64 %106) #13
  br label %118

109:                                              ; preds = %101
  %110 = xor i64 %106, -1
  %111 = getelementptr inbounds %"class.base::internal::PartitionFreelistEntry", %"class.base::internal::PartitionFreelistEntry"* %102, i64 0, i32 1
  %112 = load i64, i64* %111, align 8
  %113 = icmp eq i64 %112, %110
  br i1 %113, label %115, label %114, !prof !6

114:                                              ; preds = %109
  tail call fastcc void @_ZN4base8internal12_GLOBAL__N_126FreelistCorruptionDetectedEv() #14
  unreachable

115:                                              ; preds = %109
  %116 = tail call i64 @llvm.bswap.i64(i64 %106) #13
  %117 = inttoptr i64 %116 to i8*
  tail call void @llvm.prefetch(i8* nonnull %117, i32 0, i32 3, i32 1) #13
  br label %118

118:                                              ; preds = %115, %107
  %119 = phi i64 [ %108, %107 ], [ %116, %115 ]
  %120 = inttoptr i64 %119 to %"class.base::internal::PartitionFreelistEntry"*
  %121 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %62, i64 0, i32 0, i64 %65, i32 1
  %122 = load i8, i8* %121, align 8
  %123 = add i8 %122, -1
  store i8 %123, i8* %121, align 8
  store %"class.base::internal::PartitionFreelistEntry"* %120, %"class.base::internal::PartitionFreelistEntry"** %85, align 8
  %124 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %62, i64 0, i32 0, i64 %65, i32 3
  %125 = load i16, i16* %124, align 2
  %126 = zext i16 %125 to i64
  store i64 %126, i64* %4, align 8
  %127 = load i16, i16* %124, align 2
  %128 = zext i16 %127 to i64
  %129 = getelementptr inbounds i8, i8* %61, i64 1424
  %130 = bitcast i8* %129 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = sub i64 %131, %128
  store i64 %132, i64* %130, align 8
  %133 = bitcast %"class.base::internal::PartitionFreelistEntry"* %102 to i8*
  br label %136

134:                                              ; preds = %59
  %135 = call i8* @_ZN4base13PartitionRootILb1EE28MaybeInitThreadCacheAndAllocEtPm(%"struct.base::PartitionRoot"* %28, i16 zeroext %46, i64* nonnull %4) #13
  br label %136

136:                                              ; preds = %134, %118
  %137 = phi i8* [ %135, %134 ], [ %133, %118 ]
  %138 = icmp eq i8* %137, null
  br i1 %138, label %139, label %276, !prof !2

139:                                              ; preds = %136
  %140 = zext i16 %46 to i64
  br label %141

141:                                              ; preds = %139, %93, %75
  %142 = phi i64 [ %140, %139 ], [ %65, %93 ], [ %65, %75 ]
  %143 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %28, i64 0, i32 10, i64 %142
  %144 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %28, i64 0, i32 8
  %145 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %144, i64 0, i32 0
  %146 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %144, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %147

147:                                              ; preds = %159, %141
  %148 = phi i32 [ 0, %141 ], [ %160, %159 ]
  %149 = phi i32 [ 1, %141 ], [ %163, %159 ]
  %150 = load atomic i32, i32* %146 monotonic, align 4
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %152, label %155, !prof !7

152:                                              ; preds = %147
  %153 = cmpxchg weak i32* %146, i32 0, i32 1 acquire monotonic
  %154 = extractvalue { i32, i1 } %153, 1
  br i1 %154, label %170, label %155, !prof !6

155:                                              ; preds = %152, %147
  %156 = icmp sgt i32 %149, 0
  br i1 %156, label %165, label %159

157:                                              ; preds = %165
  %158 = add i32 %149, %148
  br label %159

159:                                              ; preds = %157, %155
  %160 = phi i32 [ %148, %155 ], [ %158, %157 ]
  %161 = shl i32 %149, 1
  %162 = icmp slt i32 %161, 64
  %163 = select i1 %162, i32 %161, i32 64
  %164 = icmp slt i32 %160, 1000
  br i1 %164, label %147, label %169

165:                                              ; preds = %155, %165
  %166 = phi i32 [ %167, %165 ], [ 0, %155 ]
  call void asm sideeffect "pause", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !8
  %167 = add nuw nsw i32 %166, 1
  %168 = icmp eq i32 %167, %149
  br i1 %168, label %157, label %165

169:                                              ; preds = %159
  call void @_ZN4base8internal13SpinningMutex8LockSlowEv(%"class.base::internal::SpinningMutex"* %145) #13
  br label %170

170:                                              ; preds = %152, %169
  %171 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %143, i64 0, i32 0
  %172 = load %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::SlotSpanMetadata"** %171, align 8
  %173 = bitcast %"struct.base::internal::SlotSpanMetadata"* %172 to i8**
  %174 = load i8*, i8** %173, align 1
  %175 = icmp eq i8* %174, null
  br i1 %175, label %200, label %176, !prof !2

176:                                              ; preds = %170
  %177 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %172, i64 0, i32 0
  store i8 0, i8* %3, align 1
  %178 = bitcast i8* %174 to %"struct.base::internal::EncodedPartitionFreelistEntry"**
  %179 = load %"struct.base::internal::EncodedPartitionFreelistEntry"*, %"struct.base::internal::EncodedPartitionFreelistEntry"** %178, align 8
  %180 = icmp eq %"struct.base::internal::EncodedPartitionFreelistEntry"* %179, null
  %181 = ptrtoint %"struct.base::internal::EncodedPartitionFreelistEntry"* %179 to i64
  br i1 %180, label %182, label %184

182:                                              ; preds = %176
  %183 = call i64 @llvm.bswap.i64(i64 %181) #13
  br label %194

184:                                              ; preds = %176
  %185 = xor i64 %181, -1
  %186 = getelementptr inbounds i8, i8* %174, i64 8
  %187 = bitcast i8* %186 to i64*
  %188 = load i64, i64* %187, align 8
  %189 = icmp eq i64 %188, %185
  br i1 %189, label %191, label %190, !prof !6

190:                                              ; preds = %184
  call fastcc void @_ZN4base8internal12_GLOBAL__N_126FreelistCorruptionDetectedEv() #14
  unreachable

191:                                              ; preds = %184
  %192 = call i64 @llvm.bswap.i64(i64 %181) #13
  %193 = inttoptr i64 %192 to i8*
  call void @llvm.prefetch(i8* nonnull %193, i32 0, i32 3, i32 1) #13
  br label %194

194:                                              ; preds = %191, %182
  %195 = phi i64 [ %183, %182 ], [ %192, %191 ]
  %196 = inttoptr i64 %195 to %"class.base::internal::PartitionFreelistEntry"*
  store %"class.base::internal::PartitionFreelistEntry"* %196, %"class.base::internal::PartitionFreelistEntry"** %177, align 1
  %197 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %172, i64 0, i32 3
  %198 = load i16, i16* %197, align 1
  %199 = add i16 %198, 1
  store i16 %199, i16* %197, align 1
  br label %202

200:                                              ; preds = %170
  %201 = call i8* @_ZN4base8internal15PartitionBucketILb1EE13SlowPathAllocEPNS_13PartitionRootILb1EEEimmPb(%"struct.base::internal::PartitionBucket"* %143, %"struct.base::PartitionRoot"* %28, i32 0, i64 %1, i64 16384, i8* nonnull %3) #13
  br label %202

202:                                              ; preds = %200, %194
  %203 = phi i8* [ %174, %194 ], [ %201, %200 ]
  %204 = atomicrmw xchg i32* %146, i32 0 release
  %205 = icmp eq i32 %204, 2
  br i1 %205, label %206, label %273, !prof !2

206:                                              ; preds = %202
  call void @_ZN4base8internal13SpinningMutex9FutexWakeEv(%"class.base::internal::SpinningMutex"* %145) #13
  br label %273

207:                                              ; preds = %55
  %208 = zext i16 %46 to i64
  %209 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %28, i64 0, i32 10, i64 %208
  %210 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %28, i64 0, i32 8
  %211 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %210, i64 0, i32 0
  %212 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %210, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %213

213:                                              ; preds = %225, %207
  %214 = phi i32 [ 0, %207 ], [ %226, %225 ]
  %215 = phi i32 [ 1, %207 ], [ %229, %225 ]
  %216 = load atomic i32, i32* %212 monotonic, align 4
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %218, label %221, !prof !7

218:                                              ; preds = %213
  %219 = cmpxchg weak i32* %212, i32 0, i32 1 acquire monotonic
  %220 = extractvalue { i32, i1 } %219, 1
  br i1 %220, label %236, label %221, !prof !6

221:                                              ; preds = %218, %213
  %222 = icmp sgt i32 %215, 0
  br i1 %222, label %231, label %225

223:                                              ; preds = %231
  %224 = add i32 %215, %214
  br label %225

225:                                              ; preds = %223, %221
  %226 = phi i32 [ %214, %221 ], [ %224, %223 ]
  %227 = shl i32 %215, 1
  %228 = icmp slt i32 %227, 64
  %229 = select i1 %228, i32 %227, i32 64
  %230 = icmp slt i32 %226, 1000
  br i1 %230, label %213, label %235

231:                                              ; preds = %221, %231
  %232 = phi i32 [ %233, %231 ], [ 0, %221 ]
  tail call void asm sideeffect "pause", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !8
  %233 = add nuw nsw i32 %232, 1
  %234 = icmp eq i32 %233, %215
  br i1 %234, label %223, label %231

235:                                              ; preds = %225
  tail call void @_ZN4base8internal13SpinningMutex8LockSlowEv(%"class.base::internal::SpinningMutex"* %211) #13
  br label %236

236:                                              ; preds = %218, %235
  %237 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %209, i64 0, i32 0
  %238 = load %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::SlotSpanMetadata"** %237, align 8
  %239 = bitcast %"struct.base::internal::SlotSpanMetadata"* %238 to i8**
  %240 = load i8*, i8** %239, align 1
  %241 = icmp eq i8* %240, null
  br i1 %241, label %266, label %242, !prof !2

242:                                              ; preds = %236
  %243 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %238, i64 0, i32 0
  store i8 0, i8* %3, align 1
  %244 = bitcast i8* %240 to %"struct.base::internal::EncodedPartitionFreelistEntry"**
  %245 = load %"struct.base::internal::EncodedPartitionFreelistEntry"*, %"struct.base::internal::EncodedPartitionFreelistEntry"** %244, align 8
  %246 = icmp eq %"struct.base::internal::EncodedPartitionFreelistEntry"* %245, null
  %247 = ptrtoint %"struct.base::internal::EncodedPartitionFreelistEntry"* %245 to i64
  br i1 %246, label %248, label %250

248:                                              ; preds = %242
  %249 = tail call i64 @llvm.bswap.i64(i64 %247) #13
  br label %260

250:                                              ; preds = %242
  %251 = xor i64 %247, -1
  %252 = getelementptr inbounds i8, i8* %240, i64 8
  %253 = bitcast i8* %252 to i64*
  %254 = load i64, i64* %253, align 8
  %255 = icmp eq i64 %254, %251
  br i1 %255, label %257, label %256, !prof !6

256:                                              ; preds = %250
  tail call fastcc void @_ZN4base8internal12_GLOBAL__N_126FreelistCorruptionDetectedEv() #14
  unreachable

257:                                              ; preds = %250
  %258 = tail call i64 @llvm.bswap.i64(i64 %247) #13
  %259 = inttoptr i64 %258 to i8*
  tail call void @llvm.prefetch(i8* nonnull %259, i32 0, i32 3, i32 1) #13
  br label %260

260:                                              ; preds = %257, %248
  %261 = phi i64 [ %249, %248 ], [ %258, %257 ]
  %262 = inttoptr i64 %261 to %"class.base::internal::PartitionFreelistEntry"*
  store %"class.base::internal::PartitionFreelistEntry"* %262, %"class.base::internal::PartitionFreelistEntry"** %243, align 1
  %263 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %238, i64 0, i32 3
  %264 = load i16, i16* %263, align 1
  %265 = add i16 %264, 1
  store i16 %265, i16* %263, align 1
  br label %268

266:                                              ; preds = %236
  %267 = call i8* @_ZN4base8internal15PartitionBucketILb1EE13SlowPathAllocEPNS_13PartitionRootILb1EEEimmPb(%"struct.base::internal::PartitionBucket"* %209, %"struct.base::PartitionRoot"* %28, i32 0, i64 %1, i64 16384, i8* nonnull %3) #13
  br label %268

268:                                              ; preds = %266, %260
  %269 = phi i8* [ %240, %260 ], [ %267, %266 ]
  %270 = atomicrmw xchg i32* %212, i32 0 release
  %271 = icmp eq i32 %270, 2
  br i1 %271, label %272, label %273, !prof !2

272:                                              ; preds = %268
  call void @_ZN4base8internal13SpinningMutex9FutexWakeEv(%"class.base::internal::SpinningMutex"* %211) #13
  br label %273

273:                                              ; preds = %272, %268, %206, %202
  %274 = phi i8* [ %203, %202 ], [ %203, %206 ], [ %269, %268 ], [ %269, %272 ]
  %275 = icmp eq i8* %274, null
  br i1 %275, label %278, label %276, !prof !2

276:                                              ; preds = %136, %273
  %277 = phi i8* [ %274, %273 ], [ %137, %136 ]
  br label %278

278:                                              ; preds = %273, %276
  %279 = phi i8* [ null, %273 ], [ %277, %276 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #13
  br label %582

280:                                              ; preds = %2
  %281 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) acquire, align 8
  %282 = inttoptr i64 %281 to %"struct.base::PartitionRoot"*
  %283 = icmp eq i64 %281, 0
  br i1 %283, label %284, label %295, !prof !2

284:                                              ; preds = %280, %284
  %285 = cmpxchg i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0), i8 0, i8 1 acquire acquire
  %286 = extractvalue { i8, i1 } %285, 1
  br i1 %286, label %287, label %284

287:                                              ; preds = %284
  %288 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) monotonic, align 8
  %289 = icmp eq i64 %288, 0
  br i1 %289, label %292, label %290

290:                                              ; preds = %287
  %291 = inttoptr i64 %288 to %"struct.base::PartitionRoot"*
  br label %293

292:                                              ; preds = %287
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0), align 8
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 1), align 1
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 2), align 2
  store i8 1, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 3), align 1
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 8) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 16), i8 0, i64 5120, i1 false) #13
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5176), align 8
  store i64 0, i64* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5392) to i64*), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5400) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5184), i8 0, i64 202, i1 false) #13
  tail call void @_ZN4base13PartitionRootILb1EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot"* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), i40 65793) #13
  store atomic i64 ptrtoint (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to i64), i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) release, align 8
  br label %293

293:                                              ; preds = %292, %290
  %294 = phi %"struct.base::PartitionRoot"* [ bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), %292 ], [ %291, %290 ]
  store atomic i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) release, align 8
  br label %295

295:                                              ; preds = %293, %280
  %296 = phi %"struct.base::PartitionRoot"* [ %282, %280 ], [ %294, %293 ]
  %297 = tail call i64 @llvm.ctpop.i64(i64 %0) #13, !range !3
  %298 = icmp eq i64 %297, 1
  br i1 %298, label %300, label %299, !prof !6

299:                                              ; preds = %295
  tail call void @_ZN7logging8RawCheckEPKc(i8* getelementptr inbounds ([114 x i8], [114 x i8]* @.str.4, i64 0, i64 0)) #13
  br label %300

300:                                              ; preds = %299, %295
  %301 = icmp ugt i64 %0, 1048576
  br i1 %301, label %302, label %303, !prof !2

302:                                              ; preds = %300
  tail call void @_ZN7logging8RawCheckEPKc(i8* getelementptr inbounds ([114 x i8], [114 x i8]* @.str.5, i64 0, i64 0)) #13
  br label %303

303:                                              ; preds = %302, %300
  %304 = icmp ugt i64 %0, 16384
  %305 = icmp ugt i64 %1, 983040
  %306 = and i1 %304, %305
  br i1 %306, label %307, label %308, !prof !2

307:                                              ; preds = %303
  tail call void @_ZN7logging8RawCheckEPKc(i8* getelementptr inbounds ([139 x i8], [139 x i8]* @.str.6, i64 0, i64 0)) #13
  br label %308

308:                                              ; preds = %307, %303
  br i1 %304, label %320, label %309

309:                                              ; preds = %308
  %310 = icmp ult i64 %1, %0
  br i1 %310, label %316, label %311, !prof !2

311:                                              ; preds = %309
  %312 = add i64 %1, -1
  %313 = tail call i64 @llvm.ctlz.i64(i64 %312, i1 false) #13, !range !3
  %314 = sub nuw nsw i64 64, %313
  %315 = shl i64 1, %314
  br label %316

316:                                              ; preds = %311, %309
  %317 = phi i64 [ %315, %311 ], [ %0, %309 ]
  %318 = icmp ult i64 %317, %1
  br i1 %318, label %319, label %320, !prof !2

319:                                              ; preds = %316
  tail call void @_ZN4base8internal32PartitionExcessiveAllocationSizeEm(i64 %1) #14
  unreachable

320:                                              ; preds = %316, %308
  %321 = phi i64 [ %317, %316 ], [ %1, %308 ]
  %322 = select i1 %304, i64 %0, i64 16384
  %323 = tail call i64 @llvm.ctlz.i64(i64 %321, i1 false) #13, !range !3
  %324 = sub nuw nsw i64 64, %323
  %325 = and i64 %324, 255
  %326 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN4base12_GLOBAL__N_116kOrderIndexShiftE, i64 0, i64 %325
  %327 = load i8, i8* %326, align 1
  %328 = zext i8 %327 to i64
  %329 = lshr i64 %321, %328
  %330 = and i64 %329, 7
  %331 = getelementptr inbounds [65 x i64], [65 x i64]* @_ZN4base12_GLOBAL__N_118kOrderSubIndexMaskE, i64 0, i64 %325
  %332 = load i64, i64* %331, align 8
  %333 = and i64 %332, %321
  %334 = shl nuw nsw i64 %325, 3
  %335 = or i64 %330, %334
  %336 = icmp ne i64 %333, 0
  %337 = zext i1 %336 to i64
  %338 = add nuw nsw i64 %335, %337
  %339 = getelementptr inbounds { [128 x i64], [521 x i16] }, { [128 x i64], [521 x i16] }* @_ZZN4base8internal17BucketIndexLookup8GetIndexEmE6lookup, i64 0, i32 1, i64 %338
  %340 = load i16, i16* %339, align 2
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5) #13
  store i8 0, i8* %5, align 1
  %341 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %341) #13
  store i64 -6148914691236517206, i64* %6, align 8
  %342 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %296, i64 0, i32 0
  %343 = load i8, i8* %342, align 8
  %344 = icmp eq i8 %343, 2
  br i1 %344, label %345, label %349

345:                                              ; preds = %320
  %346 = load atomic i8, i8* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0) acquire, align 8
  %347 = icmp eq i8 %346, 2
  br i1 %347, label %348, label %349, !prof !2

348:                                              ; preds = %345
  tail call void @_ZN4base8internal6PCScan8JoinScanEv() #13
  br label %349

349:                                              ; preds = %348, %345, %320
  %350 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %296, i64 0, i32 2
  %351 = load i8, i8* %350, align 2, !range !4
  %352 = icmp ne i8 %351, 0
  %353 = icmp ult i64 %322, 16385
  %354 = and i1 %353, %352
  br i1 %354, label %355, label %503, !prof !10

355:                                              ; preds = %349
  %356 = load i32, i32* @_ZN4base8internal18g_thread_cache_keyE, align 4
  %357 = tail call i8* @pthread_getspecific(i32 %356) #13
  %358 = bitcast i8* %357 to %"class.base::internal::ThreadCache"*
  %359 = icmp ugt i8* %357, inttoptr (i64 1 to i8*)
  br i1 %359, label %360, label %430, !prof !6

360:                                              ; preds = %355
  %361 = zext i16 %340 to i64
  %362 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %358, i64 0, i32 3, i32 12, i64 %361
  %363 = load i64, i64* %362, align 8
  %364 = add i64 %363, 1
  store i64 %364, i64* %362, align 8
  %365 = getelementptr inbounds i8, i8* %357, i64 1440
  %366 = bitcast i8* %365 to i64*
  %367 = load i64, i64* %366, align 8
  %368 = add i64 %367, 1
  store i64 %368, i64* %366, align 8
  %369 = load i16, i16* @_ZN4base8internal11ThreadCache28largest_active_bucket_index_E, align 2
  %370 = icmp ult i16 %369, %340
  br i1 %370, label %371, label %380, !prof !2

371:                                              ; preds = %360
  %372 = getelementptr inbounds i8, i8* %357, i64 1472
  %373 = bitcast i8* %372 to i64*
  %374 = load i64, i64* %373, align 8
  %375 = add i64 %374, 1
  store i64 %375, i64* %373, align 8
  %376 = getelementptr inbounds i8, i8* %357, i64 1456
  %377 = bitcast i8* %376 to i64*
  %378 = load i64, i64* %377, align 8
  %379 = add i64 %378, 1
  store i64 %379, i64* %377, align 8
  br label %437

380:                                              ; preds = %360
  %381 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %358, i64 0, i32 0, i64 %361, i32 0
  %382 = load %"class.base::internal::PartitionFreelistEntry"*, %"class.base::internal::PartitionFreelistEntry"** %381, align 8
  %383 = icmp eq %"class.base::internal::PartitionFreelistEntry"* %382, null
  br i1 %383, label %389, label %384, !prof !2

384:                                              ; preds = %380
  %385 = getelementptr inbounds i8, i8* %357, i64 1448
  %386 = bitcast i8* %385 to i64*
  %387 = load i64, i64* %386, align 8
  %388 = add i64 %387, 1
  store i64 %388, i64* %386, align 8
  br label %397

389:                                              ; preds = %380
  %390 = getelementptr inbounds i8, i8* %357, i64 1456
  %391 = bitcast i8* %390 to <2 x i64>*
  %392 = load <2 x i64>, <2 x i64>* %391, align 8
  %393 = add <2 x i64> %392, <i64 1, i64 1>
  %394 = bitcast i8* %390 to <2 x i64>*
  store <2 x i64> %393, <2 x i64>* %394, align 8
  tail call void @_ZN4base8internal11ThreadCache10FillBucketEm(%"class.base::internal::ThreadCache"* %358, i64 %361) #13
  %395 = load %"class.base::internal::PartitionFreelistEntry"*, %"class.base::internal::PartitionFreelistEntry"** %381, align 8
  %396 = icmp eq %"class.base::internal::PartitionFreelistEntry"* %395, null
  br i1 %396, label %437, label %397, !prof !2

397:                                              ; preds = %389, %384
  %398 = phi %"class.base::internal::PartitionFreelistEntry"* [ %395, %389 ], [ %382, %384 ]
  %399 = getelementptr inbounds %"class.base::internal::PartitionFreelistEntry", %"class.base::internal::PartitionFreelistEntry"* %398, i64 0, i32 0
  %400 = load %"struct.base::internal::EncodedPartitionFreelistEntry"*, %"struct.base::internal::EncodedPartitionFreelistEntry"** %399, align 8
  %401 = icmp eq %"struct.base::internal::EncodedPartitionFreelistEntry"* %400, null
  %402 = ptrtoint %"struct.base::internal::EncodedPartitionFreelistEntry"* %400 to i64
  br i1 %401, label %403, label %405

403:                                              ; preds = %397
  %404 = tail call i64 @llvm.bswap.i64(i64 %402) #13
  br label %414

405:                                              ; preds = %397
  %406 = xor i64 %402, -1
  %407 = getelementptr inbounds %"class.base::internal::PartitionFreelistEntry", %"class.base::internal::PartitionFreelistEntry"* %398, i64 0, i32 1
  %408 = load i64, i64* %407, align 8
  %409 = icmp eq i64 %408, %406
  br i1 %409, label %411, label %410, !prof !6

410:                                              ; preds = %405
  tail call fastcc void @_ZN4base8internal12_GLOBAL__N_126FreelistCorruptionDetectedEv() #14
  unreachable

411:                                              ; preds = %405
  %412 = tail call i64 @llvm.bswap.i64(i64 %402) #13
  %413 = inttoptr i64 %412 to i8*
  tail call void @llvm.prefetch(i8* nonnull %413, i32 0, i32 3, i32 1) #13
  br label %414

414:                                              ; preds = %411, %403
  %415 = phi i64 [ %404, %403 ], [ %412, %411 ]
  %416 = inttoptr i64 %415 to %"class.base::internal::PartitionFreelistEntry"*
  %417 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %358, i64 0, i32 0, i64 %361, i32 1
  %418 = load i8, i8* %417, align 8
  %419 = add i8 %418, -1
  store i8 %419, i8* %417, align 8
  store %"class.base::internal::PartitionFreelistEntry"* %416, %"class.base::internal::PartitionFreelistEntry"** %381, align 8
  %420 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %358, i64 0, i32 0, i64 %361, i32 3
  %421 = load i16, i16* %420, align 2
  %422 = zext i16 %421 to i64
  store i64 %422, i64* %6, align 8
  %423 = load i16, i16* %420, align 2
  %424 = zext i16 %423 to i64
  %425 = getelementptr inbounds i8, i8* %357, i64 1424
  %426 = bitcast i8* %425 to i64*
  %427 = load i64, i64* %426, align 8
  %428 = sub i64 %427, %424
  store i64 %428, i64* %426, align 8
  %429 = bitcast %"class.base::internal::PartitionFreelistEntry"* %398 to i8*
  br label %432

430:                                              ; preds = %355
  %431 = call i8* @_ZN4base13PartitionRootILb1EE28MaybeInitThreadCacheAndAllocEtPm(%"struct.base::PartitionRoot"* %296, i16 zeroext %340, i64* nonnull %6) #13
  br label %432

432:                                              ; preds = %430, %414
  %433 = phi i8* [ %431, %430 ], [ %429, %414 ]
  %434 = icmp eq i8* %433, null
  br i1 %434, label %435, label %573, !prof !2

435:                                              ; preds = %432
  %436 = zext i16 %340 to i64
  br label %437

437:                                              ; preds = %435, %389, %371
  %438 = phi i64 [ %436, %435 ], [ %361, %389 ], [ %361, %371 ]
  %439 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %296, i64 0, i32 10, i64 %438
  %440 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %296, i64 0, i32 8
  %441 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %440, i64 0, i32 0
  %442 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %440, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %443

443:                                              ; preds = %455, %437
  %444 = phi i32 [ 0, %437 ], [ %456, %455 ]
  %445 = phi i32 [ 1, %437 ], [ %459, %455 ]
  %446 = load atomic i32, i32* %442 monotonic, align 4
  %447 = icmp eq i32 %446, 0
  br i1 %447, label %448, label %451, !prof !7

448:                                              ; preds = %443
  %449 = cmpxchg weak i32* %442, i32 0, i32 1 acquire monotonic
  %450 = extractvalue { i32, i1 } %449, 1
  br i1 %450, label %466, label %451, !prof !6

451:                                              ; preds = %448, %443
  %452 = icmp sgt i32 %445, 0
  br i1 %452, label %461, label %455

453:                                              ; preds = %461
  %454 = add i32 %445, %444
  br label %455

455:                                              ; preds = %453, %451
  %456 = phi i32 [ %444, %451 ], [ %454, %453 ]
  %457 = shl i32 %445, 1
  %458 = icmp slt i32 %457, 64
  %459 = select i1 %458, i32 %457, i32 64
  %460 = icmp slt i32 %456, 1000
  br i1 %460, label %443, label %465

461:                                              ; preds = %451, %461
  %462 = phi i32 [ %463, %461 ], [ 0, %451 ]
  call void asm sideeffect "pause", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !8
  %463 = add nuw nsw i32 %462, 1
  %464 = icmp eq i32 %463, %445
  br i1 %464, label %453, label %461

465:                                              ; preds = %455
  call void @_ZN4base8internal13SpinningMutex8LockSlowEv(%"class.base::internal::SpinningMutex"* %441) #13
  br label %466

466:                                              ; preds = %448, %465
  %467 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %439, i64 0, i32 0
  %468 = load %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::SlotSpanMetadata"** %467, align 8
  %469 = bitcast %"struct.base::internal::SlotSpanMetadata"* %468 to i8**
  %470 = load i8*, i8** %469, align 1
  %471 = icmp eq i8* %470, null
  br i1 %471, label %496, label %472, !prof !2

472:                                              ; preds = %466
  %473 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %468, i64 0, i32 0
  store i8 0, i8* %5, align 1
  %474 = bitcast i8* %470 to %"struct.base::internal::EncodedPartitionFreelistEntry"**
  %475 = load %"struct.base::internal::EncodedPartitionFreelistEntry"*, %"struct.base::internal::EncodedPartitionFreelistEntry"** %474, align 8
  %476 = icmp eq %"struct.base::internal::EncodedPartitionFreelistEntry"* %475, null
  %477 = ptrtoint %"struct.base::internal::EncodedPartitionFreelistEntry"* %475 to i64
  br i1 %476, label %478, label %480

478:                                              ; preds = %472
  %479 = call i64 @llvm.bswap.i64(i64 %477) #13
  br label %490

480:                                              ; preds = %472
  %481 = xor i64 %477, -1
  %482 = getelementptr inbounds i8, i8* %470, i64 8
  %483 = bitcast i8* %482 to i64*
  %484 = load i64, i64* %483, align 8
  %485 = icmp eq i64 %484, %481
  br i1 %485, label %487, label %486, !prof !6

486:                                              ; preds = %480
  call fastcc void @_ZN4base8internal12_GLOBAL__N_126FreelistCorruptionDetectedEv() #14
  unreachable

487:                                              ; preds = %480
  %488 = call i64 @llvm.bswap.i64(i64 %477) #13
  %489 = inttoptr i64 %488 to i8*
  call void @llvm.prefetch(i8* nonnull %489, i32 0, i32 3, i32 1) #13
  br label %490

490:                                              ; preds = %487, %478
  %491 = phi i64 [ %479, %478 ], [ %488, %487 ]
  %492 = inttoptr i64 %491 to %"class.base::internal::PartitionFreelistEntry"*
  store %"class.base::internal::PartitionFreelistEntry"* %492, %"class.base::internal::PartitionFreelistEntry"** %473, align 1
  %493 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %468, i64 0, i32 3
  %494 = load i16, i16* %493, align 1
  %495 = add i16 %494, 1
  store i16 %495, i16* %493, align 1
  br label %498

496:                                              ; preds = %466
  %497 = call i8* @_ZN4base8internal15PartitionBucketILb1EE13SlowPathAllocEPNS_13PartitionRootILb1EEEimmPb(%"struct.base::internal::PartitionBucket"* %439, %"struct.base::PartitionRoot"* %296, i32 0, i64 %321, i64 %322, i8* nonnull %5) #13
  br label %498

498:                                              ; preds = %496, %490
  %499 = phi i8* [ %470, %490 ], [ %497, %496 ]
  %500 = atomicrmw xchg i32* %442, i32 0 release
  %501 = icmp eq i32 %500, 2
  br i1 %501, label %502, label %570, !prof !2

502:                                              ; preds = %498
  call void @_ZN4base8internal13SpinningMutex9FutexWakeEv(%"class.base::internal::SpinningMutex"* %441) #13
  br label %570

503:                                              ; preds = %349
  %504 = zext i16 %340 to i64
  %505 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %296, i64 0, i32 10, i64 %504
  %506 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %296, i64 0, i32 8
  %507 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %506, i64 0, i32 0
  %508 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %506, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %509

509:                                              ; preds = %521, %503
  %510 = phi i32 [ 0, %503 ], [ %522, %521 ]
  %511 = phi i32 [ 1, %503 ], [ %525, %521 ]
  %512 = load atomic i32, i32* %508 monotonic, align 4
  %513 = icmp eq i32 %512, 0
  br i1 %513, label %514, label %517, !prof !7

514:                                              ; preds = %509
  %515 = cmpxchg weak i32* %508, i32 0, i32 1 acquire monotonic
  %516 = extractvalue { i32, i1 } %515, 1
  br i1 %516, label %532, label %517, !prof !6

517:                                              ; preds = %514, %509
  %518 = icmp sgt i32 %511, 0
  br i1 %518, label %527, label %521

519:                                              ; preds = %527
  %520 = add i32 %511, %510
  br label %521

521:                                              ; preds = %519, %517
  %522 = phi i32 [ %510, %517 ], [ %520, %519 ]
  %523 = shl i32 %511, 1
  %524 = icmp slt i32 %523, 64
  %525 = select i1 %524, i32 %523, i32 64
  %526 = icmp slt i32 %522, 1000
  br i1 %526, label %509, label %531

527:                                              ; preds = %517, %527
  %528 = phi i32 [ %529, %527 ], [ 0, %517 ]
  tail call void asm sideeffect "pause", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !8
  %529 = add nuw nsw i32 %528, 1
  %530 = icmp eq i32 %529, %511
  br i1 %530, label %519, label %527

531:                                              ; preds = %521
  tail call void @_ZN4base8internal13SpinningMutex8LockSlowEv(%"class.base::internal::SpinningMutex"* %507) #13
  br label %532

532:                                              ; preds = %514, %531
  %533 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %505, i64 0, i32 0
  %534 = load %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::SlotSpanMetadata"** %533, align 8
  %535 = bitcast %"struct.base::internal::SlotSpanMetadata"* %534 to i8**
  %536 = load i8*, i8** %535, align 1
  %537 = icmp ne i8* %536, null
  %538 = and i1 %353, %537
  br i1 %538, label %539, label %563, !prof !6

539:                                              ; preds = %532
  %540 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %534, i64 0, i32 0
  store i8 0, i8* %5, align 1
  %541 = bitcast i8* %536 to %"struct.base::internal::EncodedPartitionFreelistEntry"**
  %542 = load %"struct.base::internal::EncodedPartitionFreelistEntry"*, %"struct.base::internal::EncodedPartitionFreelistEntry"** %541, align 8
  %543 = icmp eq %"struct.base::internal::EncodedPartitionFreelistEntry"* %542, null
  %544 = ptrtoint %"struct.base::internal::EncodedPartitionFreelistEntry"* %542 to i64
  br i1 %543, label %545, label %547

545:                                              ; preds = %539
  %546 = tail call i64 @llvm.bswap.i64(i64 %544) #13
  br label %557

547:                                              ; preds = %539
  %548 = xor i64 %544, -1
  %549 = getelementptr inbounds i8, i8* %536, i64 8
  %550 = bitcast i8* %549 to i64*
  %551 = load i64, i64* %550, align 8
  %552 = icmp eq i64 %551, %548
  br i1 %552, label %554, label %553, !prof !6

553:                                              ; preds = %547
  tail call fastcc void @_ZN4base8internal12_GLOBAL__N_126FreelistCorruptionDetectedEv() #14
  unreachable

554:                                              ; preds = %547
  %555 = tail call i64 @llvm.bswap.i64(i64 %544) #13
  %556 = inttoptr i64 %555 to i8*
  tail call void @llvm.prefetch(i8* nonnull %556, i32 0, i32 3, i32 1) #13
  br label %557

557:                                              ; preds = %554, %545
  %558 = phi i64 [ %546, %545 ], [ %555, %554 ]
  %559 = inttoptr i64 %558 to %"class.base::internal::PartitionFreelistEntry"*
  store %"class.base::internal::PartitionFreelistEntry"* %559, %"class.base::internal::PartitionFreelistEntry"** %540, align 1
  %560 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %534, i64 0, i32 3
  %561 = load i16, i16* %560, align 1
  %562 = add i16 %561, 1
  store i16 %562, i16* %560, align 1
  br label %565

563:                                              ; preds = %532
  %564 = call i8* @_ZN4base8internal15PartitionBucketILb1EE13SlowPathAllocEPNS_13PartitionRootILb1EEEimmPb(%"struct.base::internal::PartitionBucket"* %505, %"struct.base::PartitionRoot"* %296, i32 0, i64 %321, i64 %322, i8* nonnull %5) #13
  br label %565

565:                                              ; preds = %563, %557
  %566 = phi i8* [ %536, %557 ], [ %564, %563 ]
  %567 = atomicrmw xchg i32* %508, i32 0 release
  %568 = icmp eq i32 %567, 2
  br i1 %568, label %569, label %570, !prof !2

569:                                              ; preds = %565
  call void @_ZN4base8internal13SpinningMutex9FutexWakeEv(%"class.base::internal::SpinningMutex"* %507) #13
  br label %570

570:                                              ; preds = %569, %565, %502, %498
  %571 = phi i8* [ %499, %498 ], [ %499, %502 ], [ %566, %565 ], [ %566, %569 ]
  %572 = icmp eq i8* %571, null
  br i1 %572, label %575, label %573, !prof !2

573:                                              ; preds = %570, %432
  %574 = phi i8* [ %571, %570 ], [ %433, %432 ]
  br label %575

575:                                              ; preds = %573, %570
  %576 = phi i8* [ null, %570 ], [ %574, %573 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %341) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #13
  %577 = ptrtoint i8* %576 to i64
  %578 = add i64 %0, -1
  %579 = and i64 %578, %577
  %580 = icmp eq i64 %579, 0
  br i1 %580, label %582, label %581, !prof !6

581:                                              ; preds = %575
  call void @_ZN7logging8RawCheckEPKc(i8* getelementptr inbounds ([132 x i8], [132 x i8]* @.str.7, i64 0, i64 0)) #13
  br label %582

582:                                              ; preds = %581, %575, %278
  %583 = phi i8* [ %279, %278 ], [ %576, %575 ], [ %576, %581 ]
  ret i8* %583
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN4base8internal21PartitionAlignedAllocEPKNS_9allocator17AllocatorDispatchEmmPv(%"struct.base::allocator::AllocatorDispatch"* nocapture readnone, i64, i64, i8* nocapture readnone) #0 {
  %5 = tail call fastcc i8* @_ZN12_GLOBAL__N_121AllocateAlignedMemoryEmm(i64 %2, i64 %1)
  ret i8* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN4base8internal23PartitionAlignedReallocEPKNS_9allocator17AllocatorDispatchEPvmmS5_(%"struct.base::allocator::AllocatorDispatch"* nocapture readnone, i8*, i64, i64, i8* nocapture readnone) #0 {
  %6 = alloca %"struct.base::internal::DeferredUnmap", align 8
  %7 = alloca %"struct.base::internal::DeferredUnmap", align 8
  %8 = icmp eq i64 %2, 0
  br i1 %8, label %9, label %243

9:                                                ; preds = %5
  %10 = icmp eq i8* %1, null
  br i1 %10, label %502, label %11

11:                                               ; preds = %9
  tail call void @llvm.prefetch(i8* nonnull %1, i32 0, i32 3, i32 1) #13
  %12 = ptrtoint i8* %1 to i64
  %13 = and i64 %12, -2097152
  %14 = or i64 %13, 4096
  %15 = inttoptr i64 %14 to i8*
  %16 = lshr i64 %12, 9
  %17 = and i64 %16, 4064
  %18 = getelementptr inbounds i8, i8* %15, i64 %17
  %19 = bitcast i8* %18 to %"struct.base::internal::PartitionPage"*
  %20 = getelementptr inbounds i8, i8* %18, i64 30
  %21 = load i8, i8* %20, align 2
  %22 = zext i8 %21 to i64
  %23 = sub nsw i64 0, %22
  %24 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %19, i64 %23, i32 0
  %25 = bitcast %union.anon* %24 to %"struct.base::internal::SlotSpanMetadata"*
  %26 = bitcast %union.anon* %24 to i8*
  tail call void @llvm.prefetch(i8* %26, i32 0, i32 3, i32 1) #13
  %27 = ptrtoint %union.anon* %24 to i64
  %28 = and i64 %27, -4096
  %29 = inttoptr i64 %28 to %"struct.base::internal::PartitionSuperPageExtentEntry"*
  %30 = getelementptr inbounds %"struct.base::internal::PartitionSuperPageExtentEntry", %"struct.base::internal::PartitionSuperPageExtentEntry"* %29, i64 0, i32 0
  %31 = load %"struct.base::PartitionRoot"*, %"struct.base::PartitionRoot"** %30, align 4096
  %32 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %31, i64 0, i32 0
  %33 = load i8, i8* %32, align 8
  %34 = icmp eq i8 %33, 2
  br i1 %34, label %35, label %104, !prof !2

35:                                               ; preds = %11
  %36 = load atomic i8, i8* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0) acquire, align 8
  %37 = icmp eq i8 %36, 2
  br i1 %37, label %38, label %39, !prof !2

38:                                               ; preds = %35
  tail call void @_ZN4base8internal6PCScan8JoinScanEv() #13
  br label %39

39:                                               ; preds = %38, %35
  %40 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %19, i64 %23, i32 0, i32 1, i64 8
  %41 = bitcast i8* %40 to %"struct.base::internal::PartitionBucket"**
  %42 = load %"struct.base::internal::PartitionBucket"*, %"struct.base::internal::PartitionBucket"** %41, align 1
  %43 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %31, i64 0, i32 10, i64 0
  %44 = icmp ugt %"struct.base::internal::PartitionBucket"* %43, %42
  %45 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %31, i64 0, i32 11
  %46 = icmp ult %"struct.base::internal::PartitionBucket"* %45, %42
  %47 = or i1 %44, %46
  br i1 %47, label %104, label %48, !prof !2

48:                                               ; preds = %39
  %49 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %19, i64 %23, i32 0, i32 1, i64 21
  %50 = load i8, i8* %49, align 1, !range !4
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %52, label %56, !prof !6

52:                                               ; preds = %48
  %53 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %42, i64 0, i32 3
  %54 = load i32, i32* %53, align 8
  %55 = zext i32 %54 to i64
  br label %63

56:                                               ; preds = %48
  %57 = bitcast %union.anon* %24 to %"struct.base::internal::PartitionPage"*
  %58 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %57, i64 1, i32 0, i32 0, i32 0
  %59 = load i64, i64* %58, align 1
  %60 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %42, i64 0, i32 3
  %61 = load i32, i32* %60, align 8
  %62 = zext i32 %61 to i64
  br label %63

63:                                               ; preds = %56, %52
  %64 = phi i64 [ %55, %52 ], [ %62, %56 ]
  %65 = phi i64 [ %55, %52 ], [ %59, %56 ]
  %66 = load atomic i64, i64* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 8
  %67 = inttoptr i64 %13 to i8*
  %68 = and i64 %66, 1
  %69 = icmp eq i64 %68, 0
  %70 = select i1 %69, i64 16384, i64 32768
  %71 = getelementptr inbounds i8, i8* %67, i64 %70
  %72 = bitcast i8* %71 to %"class.base::internal::ObjectBitmap"*
  %73 = lshr i64 %12, 4
  %74 = lshr i64 %12, 10
  %75 = and i64 %74, 2047
  %76 = and i64 %73, 63
  %77 = shl i64 1, %76
  %78 = getelementptr inbounds %"class.base::internal::ObjectBitmap", %"class.base::internal::ObjectBitmap"* %72, i64 0, i32 0, i32 0, i64 %75
  %79 = atomicrmw or i64* %78, i64 %77 monotonic
  %80 = and i64 %79, %77
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %83, label %82, !prof !6

82:                                               ; preds = %63
  notail call void @_ZN4base8internal17DoubleFreeAttemptEv() #14
  unreachable

83:                                               ; preds = %63
  %84 = atomicrmw add i64* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0), i64 %64 monotonic
  %85 = add i64 %84, %64
  %86 = load atomic i64, i64* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 8
  %87 = icmp ugt i64 %85, %86
  br i1 %87, label %88, label %94

88:                                               ; preds = %83
  %89 = load %"class.base::internal::PCScanSchedulingBackend"*, %"class.base::internal::PCScanSchedulingBackend"** getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 0, i32 2), align 8
  %90 = bitcast %"class.base::internal::PCScanSchedulingBackend"* %89 to i1 (%"class.base::internal::PCScanSchedulingBackend"*)***
  %91 = load i1 (%"class.base::internal::PCScanSchedulingBackend"*)**, i1 (%"class.base::internal::PCScanSchedulingBackend"*)*** %90, align 8
  %92 = load i1 (%"class.base::internal::PCScanSchedulingBackend"*)*, i1 (%"class.base::internal::PCScanSchedulingBackend"*)** %91, align 8
  %93 = tail call zeroext i1 %92(%"class.base::internal::PCScanSchedulingBackend"* %89) #13
  br label %94

94:                                               ; preds = %88, %83
  %95 = phi i1 [ false, %83 ], [ %93, %88 ]
  %96 = load i8, i8* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 2), align 1
  %97 = icmp eq i8 %96, 1
  br i1 %97, label %98, label %99

98:                                               ; preds = %94
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %1, i8 0, i64 %65, i1 false) #13
  br label %99

99:                                               ; preds = %98, %94
  br i1 %95, label %100, label %502, !prof !2

100:                                              ; preds = %99
  %101 = load atomic i8, i8* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0) monotonic, align 8
  %102 = icmp eq i8 %101, 0
  br i1 %102, label %103, label %502

103:                                              ; preds = %100
  tail call void @_ZN4base8internal6PCScan11PerformScanENS1_14InvocationModeE(%"class.base::internal::PCScan"* nonnull @_ZN4base8internal6PCScan9instance_E, i32 1) #13
  br label %502

104:                                              ; preds = %39, %11
  %105 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %31, i64 0, i32 2
  %106 = load i8, i8* %105, align 2, !range !4
  %107 = icmp eq i8 %106, 0
  br i1 %107, label %176, label %108, !prof !2

108:                                              ; preds = %104
  %109 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %19, i64 %23, i32 0, i32 1, i64 8
  %110 = bitcast i8* %109 to %"struct.base::internal::PartitionBucket"**
  %111 = load %"struct.base::internal::PartitionBucket"*, %"struct.base::internal::PartitionBucket"** %110, align 1
  %112 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %31, i64 0, i32 10, i64 0
  %113 = icmp ule %"struct.base::internal::PartitionBucket"* %112, %111
  %114 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %31, i64 0, i32 11
  %115 = icmp uge %"struct.base::internal::PartitionBucket"* %114, %111
  %116 = and i1 %115, %113
  %117 = ptrtoint %"struct.base::internal::PartitionBucket"* %111 to i64
  br i1 %116, label %118, label %176, !prof !6

118:                                              ; preds = %108
  %119 = load i32, i32* @_ZN4base8internal18g_thread_cache_keyE, align 4
  %120 = tail call i8* @pthread_getspecific(i32 %119) #13
  %121 = bitcast i8* %120 to %"class.base::internal::ThreadCache"*
  %122 = icmp ugt i8* %120, inttoptr (i64 1 to i8*)
  br i1 %122, label %123, label %176, !prof !6

123:                                              ; preds = %118
  %124 = ptrtoint %"struct.base::internal::PartitionBucket"* %112 to i64
  %125 = sub i64 %117, %124
  %126 = sdiv exact i64 %125, 40
  %127 = getelementptr inbounds i8, i8* %120, i64 1480
  %128 = bitcast i8* %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = add i64 %129, 1
  store i64 %130, i64* %128, align 8
  %131 = load i16, i16* @_ZN4base8internal11ThreadCache28largest_active_bucket_index_E, align 2
  %132 = zext i16 %131 to i64
  %133 = icmp ugt i64 %126, %132
  br i1 %133, label %134, label %139, !prof !2

134:                                              ; preds = %123
  %135 = getelementptr inbounds i8, i8* %120, i64 1496
  %136 = bitcast i8* %135 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = add i64 %137, 1
  store i64 %138, i64* %136, align 8
  br label %176

139:                                              ; preds = %123
  %140 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %121, i64 0, i32 0, i64 %126
  %141 = bitcast %"struct.base::internal::ThreadCache::Bucket"* %140 to i64*
  %142 = load i64, i64* %141, align 8
  %143 = tail call i64 @llvm.bswap.i64(i64 %142) #13
  %144 = inttoptr i64 %143 to %"struct.base::internal::EncodedPartitionFreelistEntry"*
  %145 = bitcast i8* %1 to %"struct.base::internal::EncodedPartitionFreelistEntry"**
  store %"struct.base::internal::EncodedPartitionFreelistEntry"* %144, %"struct.base::internal::EncodedPartitionFreelistEntry"** %145, align 8
  %146 = xor i64 %143, -1
  %147 = getelementptr inbounds i8, i8* %1, i64 8
  %148 = bitcast i8* %147 to i64*
  store i64 %146, i64* %148, align 8
  %149 = bitcast %"struct.base::internal::ThreadCache::Bucket"* %140 to i8**
  store i8* %1, i8** %149, align 8
  %150 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %121, i64 0, i32 0, i64 %126, i32 1
  %151 = load i8, i8* %150, align 8
  %152 = add i8 %151, 1
  store i8 %152, i8* %150, align 8
  %153 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %121, i64 0, i32 0, i64 %126, i32 3
  %154 = load i16, i16* %153, align 2
  %155 = zext i16 %154 to i64
  %156 = getelementptr inbounds i8, i8* %120, i64 1424
  %157 = bitcast i8* %156 to i64*
  %158 = load i64, i64* %157, align 8
  %159 = add i64 %158, %155
  store i64 %159, i64* %157, align 8
  %160 = getelementptr inbounds i8, i8* %120, i64 1488
  %161 = bitcast i8* %160 to i64*
  %162 = load i64, i64* %161, align 8
  %163 = add i64 %162, 1
  store i64 %163, i64* %161, align 8
  %164 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %121, i64 0, i32 0, i64 %126, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %165 = load atomic i8, i8* %164 monotonic, align 1
  %166 = icmp ugt i8 %152, %165
  br i1 %166, label %167, label %170, !prof !2

167:                                              ; preds = %139
  %168 = lshr i8 %165, 1
  %169 = zext i8 %168 to i64
  tail call void @_ZN4base8internal11ThreadCache11ClearBucketERNS1_6BucketEm(%"class.base::internal::ThreadCache"* %121, %"struct.base::internal::ThreadCache::Bucket"* dereferenceable(16) %140, i64 %169) #13
  br label %170

170:                                              ; preds = %167, %139
  %171 = getelementptr inbounds i8, i8* %120, i64 1432
  %172 = load atomic i8, i8* %171 monotonic, align 1
  %173 = and i8 %172, 1
  %174 = icmp eq i8 %173, 0
  br i1 %174, label %502, label %175, !prof !6

175:                                              ; preds = %170
  tail call void @_ZN4base8internal11ThreadCache13PurgeInternalEv(%"class.base::internal::ThreadCache"* %121) #13
  br label %502

176:                                              ; preds = %134, %118, %108, %104
  %177 = bitcast %"struct.base::internal::DeferredUnmap"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %177) #13
  %178 = getelementptr inbounds %"struct.base::internal::DeferredUnmap", %"struct.base::internal::DeferredUnmap"* %6, i64 0, i32 0
  %179 = getelementptr inbounds %"struct.base::internal::DeferredUnmap", %"struct.base::internal::DeferredUnmap"* %6, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %177, i8 0, i64 16, i1 false) #13
  %180 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %31, i64 0, i32 8
  %181 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %180, i64 0, i32 0
  %182 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %180, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %183

183:                                              ; preds = %195, %176
  %184 = phi i32 [ 0, %176 ], [ %196, %195 ]
  %185 = phi i32 [ 1, %176 ], [ %199, %195 ]
  %186 = load atomic i32, i32* %182 monotonic, align 4
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %188, label %191, !prof !7

188:                                              ; preds = %183
  %189 = cmpxchg weak i32* %182, i32 0, i32 1 acquire monotonic
  %190 = extractvalue { i32, i1 } %189, 1
  br i1 %190, label %206, label %191, !prof !6

191:                                              ; preds = %188, %183
  %192 = icmp sgt i32 %185, 0
  br i1 %192, label %201, label %195

193:                                              ; preds = %201
  %194 = add i32 %185, %184
  br label %195

195:                                              ; preds = %193, %191
  %196 = phi i32 [ %184, %191 ], [ %194, %193 ]
  %197 = shl i32 %185, 1
  %198 = icmp slt i32 %197, 64
  %199 = select i1 %198, i32 %197, i32 64
  %200 = icmp slt i32 %196, 1000
  br i1 %200, label %183, label %205

201:                                              ; preds = %191, %201
  %202 = phi i32 [ %203, %201 ], [ 0, %191 ]
  tail call void asm sideeffect "pause", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !8
  %203 = add nuw nsw i32 %202, 1
  %204 = icmp eq i32 %203, %185
  br i1 %204, label %193, label %201

205:                                              ; preds = %195
  tail call void @_ZN4base8internal13SpinningMutex8LockSlowEv(%"class.base::internal::SpinningMutex"* %181) #13
  br label %206

206:                                              ; preds = %188, %205
  %207 = bitcast %union.anon* %24 to i8**
  %208 = load i8*, i8** %207, align 1
  %209 = icmp eq i8* %208, %1
  br i1 %209, label %212, label %210, !prof !2

210:                                              ; preds = %206
  %211 = ptrtoint i8* %208 to i64
  br label %215

212:                                              ; preds = %206
  tail call void @_ZN7logging8RawCheckEPKc(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.10, i64 0, i64 0)) #13
  %213 = getelementptr inbounds %union.anon, %union.anon* %24, i64 0, i32 0, i32 0
  %214 = load i64, i64* %213, align 1
  br label %215

215:                                              ; preds = %212, %210
  %216 = phi i64 [ %211, %210 ], [ %214, %212 ]
  %217 = tail call i64 @llvm.bswap.i64(i64 %216) #13
  %218 = inttoptr i64 %217 to %"struct.base::internal::EncodedPartitionFreelistEntry"*
  %219 = bitcast i8* %1 to %"struct.base::internal::EncodedPartitionFreelistEntry"**
  store %"struct.base::internal::EncodedPartitionFreelistEntry"* %218, %"struct.base::internal::EncodedPartitionFreelistEntry"** %219, align 8
  %220 = xor i64 %217, -1
  %221 = getelementptr inbounds i8, i8* %1, i64 8
  %222 = bitcast i8* %221 to i64*
  store i64 %220, i64* %222, align 8
  store i8* %1, i8** %207, align 1
  %223 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %19, i64 %23, i32 0, i32 1, i64 16
  %224 = bitcast i8* %223 to i16*
  %225 = load i16, i16* %224, align 1
  %226 = add i16 %225, -1
  store i16 %226, i16* %224, align 1
  %227 = icmp slt i16 %226, 1
  br i1 %227, label %228, label %232, !prof !2

228:                                              ; preds = %215
  %229 = tail call { i8*, i64 } @_ZN4base8internal16SlotSpanMetadataILb1EE12FreeSlowPathEv(%"struct.base::internal::SlotSpanMetadata"* %25) #13
  %230 = extractvalue { i8*, i64 } %229, 0
  %231 = extractvalue { i8*, i64 } %229, 1
  br label %232

232:                                              ; preds = %228, %215
  %233 = phi i8* [ %230, %228 ], [ null, %215 ]
  %234 = phi i64 [ %231, %228 ], [ 0, %215 ]
  store i8* %233, i8** %178, align 8
  store i64 %234, i64* %179, align 8
  %235 = atomicrmw xchg i32* %182, i32 0 release
  %236 = icmp eq i32 %235, 2
  br i1 %236, label %237, label %238, !prof !2

237:                                              ; preds = %232
  tail call void @_ZN4base8internal13SpinningMutex9FutexWakeEv(%"class.base::internal::SpinningMutex"* %181) #13
  br label %238

238:                                              ; preds = %237, %232
  %239 = load i8*, i8** %178, align 8
  %240 = icmp eq i8* %239, null
  br i1 %240, label %242, label %241, !prof !6

241:                                              ; preds = %238
  call void @_ZN4base8internal13DeferredUnmap5UnmapEv(%"struct.base::internal::DeferredUnmap"* nonnull %6) #13
  br label %242

242:                                              ; preds = %241, %238
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %177) #13
  br label %502

243:                                              ; preds = %5
  %244 = tail call fastcc i8* @_ZN12_GLOBAL__N_121AllocateAlignedMemoryEmm(i64 %3, i64 %2)
  %245 = icmp eq i8* %244, null
  br i1 %245, label %502, label %246

246:                                              ; preds = %243
  %247 = icmp eq i8* %1, null
  br i1 %247, label %502, label %248

248:                                              ; preds = %246
  %249 = ptrtoint i8* %1 to i64
  %250 = and i64 %249, -2097152
  %251 = or i64 %250, 4096
  %252 = inttoptr i64 %251 to i8*
  %253 = lshr i64 %249, 9
  %254 = and i64 %253, 4064
  %255 = getelementptr inbounds i8, i8* %252, i64 %254
  %256 = bitcast i8* %255 to %"struct.base::internal::PartitionPage"*
  %257 = getelementptr inbounds i8, i8* %255, i64 30
  %258 = load i8, i8* %257, align 2
  %259 = zext i8 %258 to i64
  %260 = sub nsw i64 0, %259
  %261 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %256, i64 %260, i32 0, i32 1, i64 21
  %262 = load i8, i8* %261, align 1, !range !4
  %263 = icmp eq i8 %262, 0
  br i1 %263, label %264, label %271, !prof !6

264:                                              ; preds = %248
  %265 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %256, i64 %260, i32 0, i32 1, i64 8
  %266 = bitcast i8* %265 to %"struct.base::internal::PartitionBucket"**
  %267 = load %"struct.base::internal::PartitionBucket"*, %"struct.base::internal::PartitionBucket"** %266, align 1
  %268 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %267, i64 0, i32 3
  %269 = load i32, i32* %268, align 8
  %270 = zext i32 %269 to i64
  br label %276

271:                                              ; preds = %248
  %272 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %256, i64 %260, i32 0
  %273 = bitcast %union.anon* %272 to %"struct.base::internal::PartitionPage"*
  %274 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %273, i64 1, i32 0, i32 0, i32 0
  %275 = load i64, i64* %274, align 1
  br label %276

276:                                              ; preds = %271, %264
  %277 = phi i64 [ %270, %264 ], [ %275, %271 ]
  %278 = icmp ugt i64 %277, %2
  %279 = select i1 %278, i64 %2, i64 %277
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %244, i8* nonnull align 1 %1, i64 %279, i1 false)
  tail call void @llvm.prefetch(i8* nonnull %1, i32 0, i32 3, i32 1) #13
  %280 = load i8, i8* %257, align 2
  %281 = zext i8 %280 to i64
  %282 = sub nsw i64 0, %281
  %283 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %256, i64 %282, i32 0
  %284 = bitcast %union.anon* %283 to %"struct.base::internal::SlotSpanMetadata"*
  %285 = bitcast %union.anon* %283 to i8*
  tail call void @llvm.prefetch(i8* %285, i32 0, i32 3, i32 1) #13
  %286 = ptrtoint %union.anon* %283 to i64
  %287 = and i64 %286, -4096
  %288 = inttoptr i64 %287 to %"struct.base::internal::PartitionSuperPageExtentEntry"*
  %289 = getelementptr inbounds %"struct.base::internal::PartitionSuperPageExtentEntry", %"struct.base::internal::PartitionSuperPageExtentEntry"* %288, i64 0, i32 0
  %290 = load %"struct.base::PartitionRoot"*, %"struct.base::PartitionRoot"** %289, align 4096
  %291 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %290, i64 0, i32 0
  %292 = load i8, i8* %291, align 8
  %293 = icmp eq i8 %292, 2
  br i1 %293, label %294, label %363, !prof !2

294:                                              ; preds = %276
  %295 = load atomic i8, i8* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0) acquire, align 8
  %296 = icmp eq i8 %295, 2
  br i1 %296, label %297, label %298, !prof !2

297:                                              ; preds = %294
  tail call void @_ZN4base8internal6PCScan8JoinScanEv() #13
  br label %298

298:                                              ; preds = %297, %294
  %299 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %256, i64 %282, i32 0, i32 1, i64 8
  %300 = bitcast i8* %299 to %"struct.base::internal::PartitionBucket"**
  %301 = load %"struct.base::internal::PartitionBucket"*, %"struct.base::internal::PartitionBucket"** %300, align 1
  %302 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %290, i64 0, i32 10, i64 0
  %303 = icmp ugt %"struct.base::internal::PartitionBucket"* %302, %301
  %304 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %290, i64 0, i32 11
  %305 = icmp ult %"struct.base::internal::PartitionBucket"* %304, %301
  %306 = or i1 %303, %305
  br i1 %306, label %363, label %307, !prof !2

307:                                              ; preds = %298
  %308 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %256, i64 %282, i32 0, i32 1, i64 21
  %309 = load i8, i8* %308, align 1, !range !4
  %310 = icmp eq i8 %309, 0
  br i1 %310, label %311, label %315, !prof !6

311:                                              ; preds = %307
  %312 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %301, i64 0, i32 3
  %313 = load i32, i32* %312, align 8
  %314 = zext i32 %313 to i64
  br label %322

315:                                              ; preds = %307
  %316 = bitcast %union.anon* %283 to %"struct.base::internal::PartitionPage"*
  %317 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %316, i64 1, i32 0, i32 0, i32 0
  %318 = load i64, i64* %317, align 1
  %319 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %301, i64 0, i32 3
  %320 = load i32, i32* %319, align 8
  %321 = zext i32 %320 to i64
  br label %322

322:                                              ; preds = %315, %311
  %323 = phi i64 [ %314, %311 ], [ %321, %315 ]
  %324 = phi i64 [ %314, %311 ], [ %318, %315 ]
  %325 = load atomic i64, i64* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 8
  %326 = inttoptr i64 %250 to i8*
  %327 = and i64 %325, 1
  %328 = icmp eq i64 %327, 0
  %329 = select i1 %328, i64 16384, i64 32768
  %330 = getelementptr inbounds i8, i8* %326, i64 %329
  %331 = bitcast i8* %330 to %"class.base::internal::ObjectBitmap"*
  %332 = lshr i64 %249, 4
  %333 = lshr i64 %249, 10
  %334 = and i64 %333, 2047
  %335 = and i64 %332, 63
  %336 = shl i64 1, %335
  %337 = getelementptr inbounds %"class.base::internal::ObjectBitmap", %"class.base::internal::ObjectBitmap"* %331, i64 0, i32 0, i32 0, i64 %334
  %338 = atomicrmw or i64* %337, i64 %336 monotonic
  %339 = and i64 %338, %336
  %340 = icmp eq i64 %339, 0
  br i1 %340, label %342, label %341, !prof !6

341:                                              ; preds = %322
  notail call void @_ZN4base8internal17DoubleFreeAttemptEv() #14
  unreachable

342:                                              ; preds = %322
  %343 = atomicrmw add i64* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0), i64 %323 monotonic
  %344 = add i64 %343, %323
  %345 = load atomic i64, i64* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 8
  %346 = icmp ugt i64 %344, %345
  br i1 %346, label %347, label %353

347:                                              ; preds = %342
  %348 = load %"class.base::internal::PCScanSchedulingBackend"*, %"class.base::internal::PCScanSchedulingBackend"** getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 0, i32 2), align 8
  %349 = bitcast %"class.base::internal::PCScanSchedulingBackend"* %348 to i1 (%"class.base::internal::PCScanSchedulingBackend"*)***
  %350 = load i1 (%"class.base::internal::PCScanSchedulingBackend"*)**, i1 (%"class.base::internal::PCScanSchedulingBackend"*)*** %349, align 8
  %351 = load i1 (%"class.base::internal::PCScanSchedulingBackend"*)*, i1 (%"class.base::internal::PCScanSchedulingBackend"*)** %350, align 8
  %352 = tail call zeroext i1 %351(%"class.base::internal::PCScanSchedulingBackend"* %348) #13
  br label %353

353:                                              ; preds = %347, %342
  %354 = phi i1 [ false, %342 ], [ %352, %347 ]
  %355 = load i8, i8* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 2), align 1
  %356 = icmp eq i8 %355, 1
  br i1 %356, label %357, label %358

357:                                              ; preds = %353
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %1, i8 0, i64 %324, i1 false) #13
  br label %358

358:                                              ; preds = %357, %353
  br i1 %354, label %359, label %502, !prof !2

359:                                              ; preds = %358
  %360 = load atomic i8, i8* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0) monotonic, align 8
  %361 = icmp eq i8 %360, 0
  br i1 %361, label %362, label %502

362:                                              ; preds = %359
  tail call void @_ZN4base8internal6PCScan11PerformScanENS1_14InvocationModeE(%"class.base::internal::PCScan"* nonnull @_ZN4base8internal6PCScan9instance_E, i32 1) #13
  br label %502

363:                                              ; preds = %298, %276
  %364 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %290, i64 0, i32 2
  %365 = load i8, i8* %364, align 2, !range !4
  %366 = icmp eq i8 %365, 0
  br i1 %366, label %435, label %367, !prof !2

367:                                              ; preds = %363
  %368 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %256, i64 %282, i32 0, i32 1, i64 8
  %369 = bitcast i8* %368 to %"struct.base::internal::PartitionBucket"**
  %370 = load %"struct.base::internal::PartitionBucket"*, %"struct.base::internal::PartitionBucket"** %369, align 1
  %371 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %290, i64 0, i32 10, i64 0
  %372 = icmp ule %"struct.base::internal::PartitionBucket"* %371, %370
  %373 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %290, i64 0, i32 11
  %374 = icmp uge %"struct.base::internal::PartitionBucket"* %373, %370
  %375 = and i1 %374, %372
  %376 = ptrtoint %"struct.base::internal::PartitionBucket"* %370 to i64
  br i1 %375, label %377, label %435, !prof !6

377:                                              ; preds = %367
  %378 = load i32, i32* @_ZN4base8internal18g_thread_cache_keyE, align 4
  %379 = tail call i8* @pthread_getspecific(i32 %378) #13
  %380 = bitcast i8* %379 to %"class.base::internal::ThreadCache"*
  %381 = icmp ugt i8* %379, inttoptr (i64 1 to i8*)
  br i1 %381, label %382, label %435, !prof !6

382:                                              ; preds = %377
  %383 = ptrtoint %"struct.base::internal::PartitionBucket"* %371 to i64
  %384 = sub i64 %376, %383
  %385 = sdiv exact i64 %384, 40
  %386 = getelementptr inbounds i8, i8* %379, i64 1480
  %387 = bitcast i8* %386 to i64*
  %388 = load i64, i64* %387, align 8
  %389 = add i64 %388, 1
  store i64 %389, i64* %387, align 8
  %390 = load i16, i16* @_ZN4base8internal11ThreadCache28largest_active_bucket_index_E, align 2
  %391 = zext i16 %390 to i64
  %392 = icmp ugt i64 %385, %391
  br i1 %392, label %393, label %398, !prof !2

393:                                              ; preds = %382
  %394 = getelementptr inbounds i8, i8* %379, i64 1496
  %395 = bitcast i8* %394 to i64*
  %396 = load i64, i64* %395, align 8
  %397 = add i64 %396, 1
  store i64 %397, i64* %395, align 8
  br label %435

398:                                              ; preds = %382
  %399 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %380, i64 0, i32 0, i64 %385
  %400 = bitcast %"struct.base::internal::ThreadCache::Bucket"* %399 to i64*
  %401 = load i64, i64* %400, align 8
  %402 = tail call i64 @llvm.bswap.i64(i64 %401) #13
  %403 = inttoptr i64 %402 to %"struct.base::internal::EncodedPartitionFreelistEntry"*
  %404 = bitcast i8* %1 to %"struct.base::internal::EncodedPartitionFreelistEntry"**
  store %"struct.base::internal::EncodedPartitionFreelistEntry"* %403, %"struct.base::internal::EncodedPartitionFreelistEntry"** %404, align 8
  %405 = xor i64 %402, -1
  %406 = getelementptr inbounds i8, i8* %1, i64 8
  %407 = bitcast i8* %406 to i64*
  store i64 %405, i64* %407, align 8
  %408 = bitcast %"struct.base::internal::ThreadCache::Bucket"* %399 to i8**
  store i8* %1, i8** %408, align 8
  %409 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %380, i64 0, i32 0, i64 %385, i32 1
  %410 = load i8, i8* %409, align 8
  %411 = add i8 %410, 1
  store i8 %411, i8* %409, align 8
  %412 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %380, i64 0, i32 0, i64 %385, i32 3
  %413 = load i16, i16* %412, align 2
  %414 = zext i16 %413 to i64
  %415 = getelementptr inbounds i8, i8* %379, i64 1424
  %416 = bitcast i8* %415 to i64*
  %417 = load i64, i64* %416, align 8
  %418 = add i64 %417, %414
  store i64 %418, i64* %416, align 8
  %419 = getelementptr inbounds i8, i8* %379, i64 1488
  %420 = bitcast i8* %419 to i64*
  %421 = load i64, i64* %420, align 8
  %422 = add i64 %421, 1
  store i64 %422, i64* %420, align 8
  %423 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %380, i64 0, i32 0, i64 %385, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %424 = load atomic i8, i8* %423 monotonic, align 1
  %425 = icmp ugt i8 %411, %424
  br i1 %425, label %426, label %429, !prof !2

426:                                              ; preds = %398
  %427 = lshr i8 %424, 1
  %428 = zext i8 %427 to i64
  tail call void @_ZN4base8internal11ThreadCache11ClearBucketERNS1_6BucketEm(%"class.base::internal::ThreadCache"* %380, %"struct.base::internal::ThreadCache::Bucket"* dereferenceable(16) %399, i64 %428) #13
  br label %429

429:                                              ; preds = %426, %398
  %430 = getelementptr inbounds i8, i8* %379, i64 1432
  %431 = load atomic i8, i8* %430 monotonic, align 1
  %432 = and i8 %431, 1
  %433 = icmp eq i8 %432, 0
  br i1 %433, label %502, label %434, !prof !6

434:                                              ; preds = %429
  tail call void @_ZN4base8internal11ThreadCache13PurgeInternalEv(%"class.base::internal::ThreadCache"* %380) #13
  br label %502

435:                                              ; preds = %393, %377, %367, %363
  %436 = bitcast %"struct.base::internal::DeferredUnmap"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %436) #13
  %437 = getelementptr inbounds %"struct.base::internal::DeferredUnmap", %"struct.base::internal::DeferredUnmap"* %7, i64 0, i32 0
  %438 = getelementptr inbounds %"struct.base::internal::DeferredUnmap", %"struct.base::internal::DeferredUnmap"* %7, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %436, i8 0, i64 16, i1 false) #13
  %439 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %290, i64 0, i32 8
  %440 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %439, i64 0, i32 0
  %441 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %439, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %442

442:                                              ; preds = %454, %435
  %443 = phi i32 [ 0, %435 ], [ %455, %454 ]
  %444 = phi i32 [ 1, %435 ], [ %458, %454 ]
  %445 = load atomic i32, i32* %441 monotonic, align 4
  %446 = icmp eq i32 %445, 0
  br i1 %446, label %447, label %450, !prof !7

447:                                              ; preds = %442
  %448 = cmpxchg weak i32* %441, i32 0, i32 1 acquire monotonic
  %449 = extractvalue { i32, i1 } %448, 1
  br i1 %449, label %465, label %450, !prof !6

450:                                              ; preds = %447, %442
  %451 = icmp sgt i32 %444, 0
  br i1 %451, label %460, label %454

452:                                              ; preds = %460
  %453 = add i32 %444, %443
  br label %454

454:                                              ; preds = %452, %450
  %455 = phi i32 [ %443, %450 ], [ %453, %452 ]
  %456 = shl i32 %444, 1
  %457 = icmp slt i32 %456, 64
  %458 = select i1 %457, i32 %456, i32 64
  %459 = icmp slt i32 %455, 1000
  br i1 %459, label %442, label %464

460:                                              ; preds = %450, %460
  %461 = phi i32 [ %462, %460 ], [ 0, %450 ]
  tail call void asm sideeffect "pause", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !8
  %462 = add nuw nsw i32 %461, 1
  %463 = icmp eq i32 %462, %444
  br i1 %463, label %452, label %460

464:                                              ; preds = %454
  tail call void @_ZN4base8internal13SpinningMutex8LockSlowEv(%"class.base::internal::SpinningMutex"* %440) #13
  br label %465

465:                                              ; preds = %447, %464
  %466 = bitcast %union.anon* %283 to i8**
  %467 = load i8*, i8** %466, align 1
  %468 = icmp eq i8* %467, %1
  br i1 %468, label %471, label %469, !prof !2

469:                                              ; preds = %465
  %470 = ptrtoint i8* %467 to i64
  br label %474

471:                                              ; preds = %465
  tail call void @_ZN7logging8RawCheckEPKc(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.10, i64 0, i64 0)) #13
  %472 = getelementptr inbounds %union.anon, %union.anon* %283, i64 0, i32 0, i32 0
  %473 = load i64, i64* %472, align 1
  br label %474

474:                                              ; preds = %471, %469
  %475 = phi i64 [ %470, %469 ], [ %473, %471 ]
  %476 = tail call i64 @llvm.bswap.i64(i64 %475) #13
  %477 = inttoptr i64 %476 to %"struct.base::internal::EncodedPartitionFreelistEntry"*
  %478 = bitcast i8* %1 to %"struct.base::internal::EncodedPartitionFreelistEntry"**
  store %"struct.base::internal::EncodedPartitionFreelistEntry"* %477, %"struct.base::internal::EncodedPartitionFreelistEntry"** %478, align 8
  %479 = xor i64 %476, -1
  %480 = getelementptr inbounds i8, i8* %1, i64 8
  %481 = bitcast i8* %480 to i64*
  store i64 %479, i64* %481, align 8
  store i8* %1, i8** %466, align 1
  %482 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %256, i64 %282, i32 0, i32 1, i64 16
  %483 = bitcast i8* %482 to i16*
  %484 = load i16, i16* %483, align 1
  %485 = add i16 %484, -1
  store i16 %485, i16* %483, align 1
  %486 = icmp slt i16 %485, 1
  br i1 %486, label %487, label %491, !prof !2

487:                                              ; preds = %474
  %488 = tail call { i8*, i64 } @_ZN4base8internal16SlotSpanMetadataILb1EE12FreeSlowPathEv(%"struct.base::internal::SlotSpanMetadata"* %284) #13
  %489 = extractvalue { i8*, i64 } %488, 0
  %490 = extractvalue { i8*, i64 } %488, 1
  br label %491

491:                                              ; preds = %487, %474
  %492 = phi i8* [ %489, %487 ], [ null, %474 ]
  %493 = phi i64 [ %490, %487 ], [ 0, %474 ]
  store i8* %492, i8** %437, align 8
  store i64 %493, i64* %438, align 8
  %494 = atomicrmw xchg i32* %441, i32 0 release
  %495 = icmp eq i32 %494, 2
  br i1 %495, label %496, label %497, !prof !2

496:                                              ; preds = %491
  tail call void @_ZN4base8internal13SpinningMutex9FutexWakeEv(%"class.base::internal::SpinningMutex"* %440) #13
  br label %497

497:                                              ; preds = %496, %491
  %498 = load i8*, i8** %437, align 8
  %499 = icmp eq i8* %498, null
  br i1 %499, label %501, label %500, !prof !6

500:                                              ; preds = %497
  call void @_ZN4base8internal13DeferredUnmap5UnmapEv(%"struct.base::internal::DeferredUnmap"* nonnull %7) #13
  br label %501

501:                                              ; preds = %500, %497
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %436) #13
  br label %502

502:                                              ; preds = %242, %175, %170, %103, %100, %99, %9, %501, %434, %429, %362, %359, %358, %246, %243
  %503 = phi i8* [ null, %243 ], [ %244, %246 ], [ %244, %358 ], [ %244, %359 ], [ %244, %362 ], [ %244, %429 ], [ %244, %434 ], [ %244, %501 ], [ null, %9 ], [ null, %99 ], [ null, %100 ], [ null, %103 ], [ null, %170 ], [ null, %175 ], [ null, %242 ]
  ret i8* %503
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN4base8internal16PartitionReallocEPKNS_9allocator17AllocatorDispatchEPvmS5_(%"struct.base::allocator::AllocatorDispatch"* nocapture readnone, i8*, i64, i8* nocapture readnone) #0 {
  %5 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) acquire, align 8
  %6 = inttoptr i64 %5 to %"struct.base::PartitionRoot"*
  %7 = icmp eq i64 %5, 0
  br i1 %7, label %8, label %19, !prof !2

8:                                                ; preds = %4, %8
  %9 = cmpxchg i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0), i8 0, i8 1 acquire acquire
  %10 = extractvalue { i8, i1 } %9, 1
  br i1 %10, label %11, label %8

11:                                               ; preds = %8
  %12 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) monotonic, align 8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %11
  %15 = inttoptr i64 %12 to %"struct.base::PartitionRoot"*
  br label %17

16:                                               ; preds = %11
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0), align 8
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 1), align 1
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 2), align 2
  store i8 1, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 3), align 1
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 8) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 16), i8 0, i64 5120, i1 false) #13
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5176), align 8
  store i64 0, i64* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5392) to i64*), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5400) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5184), i8 0, i64 202, i1 false) #13
  tail call void @_ZN4base13PartitionRootILb1EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot"* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), i40 65793) #13
  store atomic i64 ptrtoint (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to i64), i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) release, align 8
  br label %17

17:                                               ; preds = %16, %14
  %18 = phi %"struct.base::PartitionRoot"* [ bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), %16 ], [ %15, %14 ]
  store atomic i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) release, align 8
  br label %19

19:                                               ; preds = %17, %4
  %20 = phi %"struct.base::PartitionRoot"* [ %6, %4 ], [ %18, %17 ]
  %21 = tail call i8* @_ZN4base13PartitionRootILb1EE12ReallocFlagsEiPvmPKc(%"struct.base::PartitionRoot"* %20, i32 4, i8* %1, i64 %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)) #13
  ret i8* %21
}

declare i8* @_ZN4base13PartitionRootILb1EE12ReallocFlagsEiPvmPKc(%"struct.base::PartitionRoot"*, i32, i8*, i64, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal13PartitionFreeEPKNS_9allocator17AllocatorDispatchEPvS5_(%"struct.base::allocator::AllocatorDispatch"* nocapture readnone, i8*, i8* nocapture readnone) #0 {
  %4 = alloca %"struct.base::internal::DeferredUnmap", align 8
  %5 = icmp eq i8* %1, null
  br i1 %5, label %238, label %6, !prof !2

6:                                                ; preds = %3
  tail call void @llvm.prefetch(i8* nonnull %1, i32 0, i32 3, i32 1) #13
  %7 = ptrtoint i8* %1 to i64
  %8 = and i64 %7, -2097152
  %9 = or i64 %8, 4096
  %10 = inttoptr i64 %9 to i8*
  %11 = lshr i64 %7, 9
  %12 = and i64 %11, 4064
  %13 = getelementptr inbounds i8, i8* %10, i64 %12
  %14 = bitcast i8* %13 to %"struct.base::internal::PartitionPage"*
  %15 = getelementptr inbounds i8, i8* %13, i64 30
  %16 = load i8, i8* %15, align 2
  %17 = zext i8 %16 to i64
  %18 = sub nsw i64 0, %17
  %19 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %14, i64 %18, i32 0
  %20 = bitcast %union.anon* %19 to %"struct.base::internal::SlotSpanMetadata"*
  %21 = bitcast %union.anon* %19 to i8*
  tail call void @llvm.prefetch(i8* %21, i32 0, i32 3, i32 1) #13
  %22 = ptrtoint %union.anon* %19 to i64
  %23 = and i64 %22, -4096
  %24 = inttoptr i64 %23 to %"struct.base::internal::PartitionSuperPageExtentEntry"*
  %25 = getelementptr inbounds %"struct.base::internal::PartitionSuperPageExtentEntry", %"struct.base::internal::PartitionSuperPageExtentEntry"* %24, i64 0, i32 0
  %26 = load %"struct.base::PartitionRoot"*, %"struct.base::PartitionRoot"** %25, align 4096
  %27 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %26, i64 0, i32 0
  %28 = load i8, i8* %27, align 8
  %29 = icmp eq i8 %28, 2
  br i1 %29, label %30, label %99, !prof !2

30:                                               ; preds = %6
  %31 = load atomic i8, i8* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0) acquire, align 8
  %32 = icmp eq i8 %31, 2
  br i1 %32, label %33, label %34, !prof !2

33:                                               ; preds = %30
  tail call void @_ZN4base8internal6PCScan8JoinScanEv() #13
  br label %34

34:                                               ; preds = %33, %30
  %35 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %14, i64 %18, i32 0, i32 1, i64 8
  %36 = bitcast i8* %35 to %"struct.base::internal::PartitionBucket"**
  %37 = load %"struct.base::internal::PartitionBucket"*, %"struct.base::internal::PartitionBucket"** %36, align 1
  %38 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %26, i64 0, i32 10, i64 0
  %39 = icmp ugt %"struct.base::internal::PartitionBucket"* %38, %37
  %40 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %26, i64 0, i32 11
  %41 = icmp ult %"struct.base::internal::PartitionBucket"* %40, %37
  %42 = or i1 %39, %41
  br i1 %42, label %99, label %43, !prof !2

43:                                               ; preds = %34
  %44 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %14, i64 %18, i32 0, i32 1, i64 21
  %45 = load i8, i8* %44, align 1, !range !4
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %47, label %51, !prof !6

47:                                               ; preds = %43
  %48 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %37, i64 0, i32 3
  %49 = load i32, i32* %48, align 8
  %50 = zext i32 %49 to i64
  br label %58

51:                                               ; preds = %43
  %52 = bitcast %union.anon* %19 to %"struct.base::internal::PartitionPage"*
  %53 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %52, i64 1, i32 0, i32 0, i32 0
  %54 = load i64, i64* %53, align 1
  %55 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %37, i64 0, i32 3
  %56 = load i32, i32* %55, align 8
  %57 = zext i32 %56 to i64
  br label %58

58:                                               ; preds = %51, %47
  %59 = phi i64 [ %50, %47 ], [ %57, %51 ]
  %60 = phi i64 [ %50, %47 ], [ %54, %51 ]
  %61 = load atomic i64, i64* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 8
  %62 = inttoptr i64 %8 to i8*
  %63 = and i64 %61, 1
  %64 = icmp eq i64 %63, 0
  %65 = select i1 %64, i64 16384, i64 32768
  %66 = getelementptr inbounds i8, i8* %62, i64 %65
  %67 = bitcast i8* %66 to %"class.base::internal::ObjectBitmap"*
  %68 = lshr i64 %7, 4
  %69 = lshr i64 %7, 10
  %70 = and i64 %69, 2047
  %71 = and i64 %68, 63
  %72 = shl i64 1, %71
  %73 = getelementptr inbounds %"class.base::internal::ObjectBitmap", %"class.base::internal::ObjectBitmap"* %67, i64 0, i32 0, i32 0, i64 %70
  %74 = atomicrmw or i64* %73, i64 %72 monotonic
  %75 = and i64 %74, %72
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %78, label %77, !prof !6

77:                                               ; preds = %58
  notail call void @_ZN4base8internal17DoubleFreeAttemptEv() #14
  unreachable

78:                                               ; preds = %58
  %79 = atomicrmw add i64* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0), i64 %59 monotonic
  %80 = add i64 %79, %59
  %81 = load atomic i64, i64* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 8
  %82 = icmp ugt i64 %80, %81
  br i1 %82, label %83, label %89

83:                                               ; preds = %78
  %84 = load %"class.base::internal::PCScanSchedulingBackend"*, %"class.base::internal::PCScanSchedulingBackend"** getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 0, i32 2), align 8
  %85 = bitcast %"class.base::internal::PCScanSchedulingBackend"* %84 to i1 (%"class.base::internal::PCScanSchedulingBackend"*)***
  %86 = load i1 (%"class.base::internal::PCScanSchedulingBackend"*)**, i1 (%"class.base::internal::PCScanSchedulingBackend"*)*** %85, align 8
  %87 = load i1 (%"class.base::internal::PCScanSchedulingBackend"*)*, i1 (%"class.base::internal::PCScanSchedulingBackend"*)** %86, align 8
  %88 = tail call zeroext i1 %87(%"class.base::internal::PCScanSchedulingBackend"* %84) #13
  br label %89

89:                                               ; preds = %83, %78
  %90 = phi i1 [ false, %78 ], [ %88, %83 ]
  %91 = load i8, i8* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 2), align 1
  %92 = icmp eq i8 %91, 1
  br i1 %92, label %93, label %94

93:                                               ; preds = %89
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %1, i8 0, i64 %60, i1 false) #13
  br label %94

94:                                               ; preds = %93, %89
  br i1 %90, label %95, label %238, !prof !2

95:                                               ; preds = %94
  %96 = load atomic i8, i8* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0) monotonic, align 8
  %97 = icmp eq i8 %96, 0
  br i1 %97, label %98, label %238

98:                                               ; preds = %95
  tail call void @_ZN4base8internal6PCScan11PerformScanENS1_14InvocationModeE(%"class.base::internal::PCScan"* nonnull @_ZN4base8internal6PCScan9instance_E, i32 1) #13
  br label %238

99:                                               ; preds = %34, %6
  %100 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %26, i64 0, i32 2
  %101 = load i8, i8* %100, align 2, !range !4
  %102 = icmp eq i8 %101, 0
  br i1 %102, label %171, label %103, !prof !2

103:                                              ; preds = %99
  %104 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %14, i64 %18, i32 0, i32 1, i64 8
  %105 = bitcast i8* %104 to %"struct.base::internal::PartitionBucket"**
  %106 = load %"struct.base::internal::PartitionBucket"*, %"struct.base::internal::PartitionBucket"** %105, align 1
  %107 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %26, i64 0, i32 10, i64 0
  %108 = icmp ule %"struct.base::internal::PartitionBucket"* %107, %106
  %109 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %26, i64 0, i32 11
  %110 = icmp uge %"struct.base::internal::PartitionBucket"* %109, %106
  %111 = and i1 %110, %108
  %112 = ptrtoint %"struct.base::internal::PartitionBucket"* %106 to i64
  br i1 %111, label %113, label %171, !prof !6

113:                                              ; preds = %103
  %114 = load i32, i32* @_ZN4base8internal18g_thread_cache_keyE, align 4
  %115 = tail call i8* @pthread_getspecific(i32 %114) #13
  %116 = bitcast i8* %115 to %"class.base::internal::ThreadCache"*
  %117 = icmp ugt i8* %115, inttoptr (i64 1 to i8*)
  br i1 %117, label %118, label %171, !prof !6

118:                                              ; preds = %113
  %119 = ptrtoint %"struct.base::internal::PartitionBucket"* %107 to i64
  %120 = sub i64 %112, %119
  %121 = sdiv exact i64 %120, 40
  %122 = getelementptr inbounds i8, i8* %115, i64 1480
  %123 = bitcast i8* %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = add i64 %124, 1
  store i64 %125, i64* %123, align 8
  %126 = load i16, i16* @_ZN4base8internal11ThreadCache28largest_active_bucket_index_E, align 2
  %127 = zext i16 %126 to i64
  %128 = icmp ugt i64 %121, %127
  br i1 %128, label %129, label %134, !prof !2

129:                                              ; preds = %118
  %130 = getelementptr inbounds i8, i8* %115, i64 1496
  %131 = bitcast i8* %130 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = add i64 %132, 1
  store i64 %133, i64* %131, align 8
  br label %171

134:                                              ; preds = %118
  %135 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %116, i64 0, i32 0, i64 %121
  %136 = bitcast %"struct.base::internal::ThreadCache::Bucket"* %135 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = tail call i64 @llvm.bswap.i64(i64 %137) #13
  %139 = inttoptr i64 %138 to %"struct.base::internal::EncodedPartitionFreelistEntry"*
  %140 = bitcast i8* %1 to %"struct.base::internal::EncodedPartitionFreelistEntry"**
  store %"struct.base::internal::EncodedPartitionFreelistEntry"* %139, %"struct.base::internal::EncodedPartitionFreelistEntry"** %140, align 8
  %141 = xor i64 %138, -1
  %142 = getelementptr inbounds i8, i8* %1, i64 8
  %143 = bitcast i8* %142 to i64*
  store i64 %141, i64* %143, align 8
  %144 = bitcast %"struct.base::internal::ThreadCache::Bucket"* %135 to i8**
  store i8* %1, i8** %144, align 8
  %145 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %116, i64 0, i32 0, i64 %121, i32 1
  %146 = load i8, i8* %145, align 8
  %147 = add i8 %146, 1
  store i8 %147, i8* %145, align 8
  %148 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %116, i64 0, i32 0, i64 %121, i32 3
  %149 = load i16, i16* %148, align 2
  %150 = zext i16 %149 to i64
  %151 = getelementptr inbounds i8, i8* %115, i64 1424
  %152 = bitcast i8* %151 to i64*
  %153 = load i64, i64* %152, align 8
  %154 = add i64 %153, %150
  store i64 %154, i64* %152, align 8
  %155 = getelementptr inbounds i8, i8* %115, i64 1488
  %156 = bitcast i8* %155 to i64*
  %157 = load i64, i64* %156, align 8
  %158 = add i64 %157, 1
  store i64 %158, i64* %156, align 8
  %159 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %116, i64 0, i32 0, i64 %121, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %160 = load atomic i8, i8* %159 monotonic, align 1
  %161 = icmp ugt i8 %147, %160
  br i1 %161, label %162, label %165, !prof !2

162:                                              ; preds = %134
  %163 = lshr i8 %160, 1
  %164 = zext i8 %163 to i64
  tail call void @_ZN4base8internal11ThreadCache11ClearBucketERNS1_6BucketEm(%"class.base::internal::ThreadCache"* %116, %"struct.base::internal::ThreadCache::Bucket"* dereferenceable(16) %135, i64 %164) #13
  br label %165

165:                                              ; preds = %162, %134
  %166 = getelementptr inbounds i8, i8* %115, i64 1432
  %167 = load atomic i8, i8* %166 monotonic, align 1
  %168 = and i8 %167, 1
  %169 = icmp eq i8 %168, 0
  br i1 %169, label %238, label %170, !prof !6

170:                                              ; preds = %165
  tail call void @_ZN4base8internal11ThreadCache13PurgeInternalEv(%"class.base::internal::ThreadCache"* %116) #13
  br label %238

171:                                              ; preds = %129, %113, %103, %99
  %172 = bitcast %"struct.base::internal::DeferredUnmap"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %172) #13
  %173 = getelementptr inbounds %"struct.base::internal::DeferredUnmap", %"struct.base::internal::DeferredUnmap"* %4, i64 0, i32 0
  %174 = getelementptr inbounds %"struct.base::internal::DeferredUnmap", %"struct.base::internal::DeferredUnmap"* %4, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %172, i8 0, i64 16, i1 false) #13
  %175 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %26, i64 0, i32 8
  %176 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %175, i64 0, i32 0
  %177 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %175, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %178

178:                                              ; preds = %190, %171
  %179 = phi i32 [ 0, %171 ], [ %191, %190 ]
  %180 = phi i32 [ 1, %171 ], [ %194, %190 ]
  %181 = load atomic i32, i32* %177 monotonic, align 4
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %183, label %186, !prof !7

183:                                              ; preds = %178
  %184 = cmpxchg weak i32* %177, i32 0, i32 1 acquire monotonic
  %185 = extractvalue { i32, i1 } %184, 1
  br i1 %185, label %201, label %186, !prof !6

186:                                              ; preds = %183, %178
  %187 = icmp sgt i32 %180, 0
  br i1 %187, label %196, label %190

188:                                              ; preds = %196
  %189 = add i32 %180, %179
  br label %190

190:                                              ; preds = %188, %186
  %191 = phi i32 [ %179, %186 ], [ %189, %188 ]
  %192 = shl i32 %180, 1
  %193 = icmp slt i32 %192, 64
  %194 = select i1 %193, i32 %192, i32 64
  %195 = icmp slt i32 %191, 1000
  br i1 %195, label %178, label %200

196:                                              ; preds = %186, %196
  %197 = phi i32 [ %198, %196 ], [ 0, %186 ]
  tail call void asm sideeffect "pause", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !8
  %198 = add nuw nsw i32 %197, 1
  %199 = icmp eq i32 %198, %180
  br i1 %199, label %188, label %196

200:                                              ; preds = %190
  tail call void @_ZN4base8internal13SpinningMutex8LockSlowEv(%"class.base::internal::SpinningMutex"* %176) #13
  br label %201

201:                                              ; preds = %183, %200
  %202 = bitcast %union.anon* %19 to i8**
  %203 = load i8*, i8** %202, align 1
  %204 = icmp eq i8* %203, %1
  br i1 %204, label %207, label %205, !prof !2

205:                                              ; preds = %201
  %206 = ptrtoint i8* %203 to i64
  br label %210

207:                                              ; preds = %201
  tail call void @_ZN7logging8RawCheckEPKc(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.10, i64 0, i64 0)) #13
  %208 = getelementptr inbounds %union.anon, %union.anon* %19, i64 0, i32 0, i32 0
  %209 = load i64, i64* %208, align 1
  br label %210

210:                                              ; preds = %207, %205
  %211 = phi i64 [ %206, %205 ], [ %209, %207 ]
  %212 = tail call i64 @llvm.bswap.i64(i64 %211) #13
  %213 = inttoptr i64 %212 to %"struct.base::internal::EncodedPartitionFreelistEntry"*
  %214 = bitcast i8* %1 to %"struct.base::internal::EncodedPartitionFreelistEntry"**
  store %"struct.base::internal::EncodedPartitionFreelistEntry"* %213, %"struct.base::internal::EncodedPartitionFreelistEntry"** %214, align 8
  %215 = xor i64 %212, -1
  %216 = getelementptr inbounds i8, i8* %1, i64 8
  %217 = bitcast i8* %216 to i64*
  store i64 %215, i64* %217, align 8
  store i8* %1, i8** %202, align 1
  %218 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %14, i64 %18, i32 0, i32 1, i64 16
  %219 = bitcast i8* %218 to i16*
  %220 = load i16, i16* %219, align 1
  %221 = add i16 %220, -1
  store i16 %221, i16* %219, align 1
  %222 = icmp slt i16 %221, 1
  br i1 %222, label %223, label %227, !prof !2

223:                                              ; preds = %210
  %224 = tail call { i8*, i64 } @_ZN4base8internal16SlotSpanMetadataILb1EE12FreeSlowPathEv(%"struct.base::internal::SlotSpanMetadata"* %20) #13
  %225 = extractvalue { i8*, i64 } %224, 0
  %226 = extractvalue { i8*, i64 } %224, 1
  br label %227

227:                                              ; preds = %223, %210
  %228 = phi i8* [ %225, %223 ], [ null, %210 ]
  %229 = phi i64 [ %226, %223 ], [ 0, %210 ]
  store i8* %228, i8** %173, align 8
  store i64 %229, i64* %174, align 8
  %230 = atomicrmw xchg i32* %177, i32 0 release
  %231 = icmp eq i32 %230, 2
  br i1 %231, label %232, label %233, !prof !2

232:                                              ; preds = %227
  tail call void @_ZN4base8internal13SpinningMutex9FutexWakeEv(%"class.base::internal::SpinningMutex"* %176) #13
  br label %233

233:                                              ; preds = %232, %227
  %234 = load i8*, i8** %173, align 8
  %235 = icmp eq i8* %234, null
  br i1 %235, label %237, label %236, !prof !6

236:                                              ; preds = %233
  call void @_ZN4base8internal13DeferredUnmap5UnmapEv(%"struct.base::internal::DeferredUnmap"* nonnull %4) #13
  br label %237

237:                                              ; preds = %236, %233
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %172) #13
  br label %238

238:                                              ; preds = %3, %94, %95, %98, %165, %170, %237
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN4base8internal24PartitionGetSizeEstimateEPKNS_9allocator17AllocatorDispatchEPvS5_(%"struct.base::allocator::AllocatorDispatch"* nocapture readnone, i8*, i8* nocapture readnone) #3 {
  %4 = ptrtoint i8* %1 to i64
  %5 = and i64 %4, -2097152
  %6 = or i64 %5, 4096
  %7 = inttoptr i64 %6 to i8*
  %8 = lshr i64 %4, 9
  %9 = and i64 %8, 4064
  %10 = getelementptr inbounds i8, i8* %7, i64 %9
  %11 = bitcast i8* %10 to %"struct.base::internal::PartitionPage"*
  %12 = getelementptr inbounds i8, i8* %10, i64 30
  %13 = load i8, i8* %12, align 2
  %14 = zext i8 %13 to i64
  %15 = sub nsw i64 0, %14
  %16 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %11, i64 %15, i32 0, i32 1, i64 21
  %17 = load i8, i8* %16, align 1, !range !4
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %26, !prof !6

19:                                               ; preds = %3
  %20 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %11, i64 %15, i32 0, i32 1, i64 8
  %21 = bitcast i8* %20 to %"struct.base::internal::PartitionBucket"**
  %22 = load %"struct.base::internal::PartitionBucket"*, %"struct.base::internal::PartitionBucket"** %21, align 1
  %23 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %22, i64 0, i32 3
  %24 = load i32, i32* %23, align 8
  %25 = zext i32 %24 to i64
  br label %31

26:                                               ; preds = %3
  %27 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %11, i64 %15, i32 0
  %28 = bitcast %union.anon* %27 to %"struct.base::internal::PartitionPage"*
  %29 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %28, i64 1, i32 0, i32 0, i32 0
  %30 = load i64, i64* %29, align 1
  br label %31

31:                                               ; preds = %19, %26
  %32 = phi i64 [ %25, %19 ], [ %30, %26 ]
  ret i64 %32
}

; Function Attrs: nounwind ssp uwtable
define hidden %"struct.base::PartitionRoot"* @_ZN4base8internal20PartitionAllocMalloc9AllocatorEv() local_unnamed_addr #0 align 2 {
  %1 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) acquire, align 8
  %2 = inttoptr i64 %1 to %"struct.base::PartitionRoot"*
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %4, label %15, !prof !2

4:                                                ; preds = %0, %4
  %5 = cmpxchg i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0), i8 0, i8 1 acquire acquire
  %6 = extractvalue { i8, i1 } %5, 1
  br i1 %6, label %7, label %4

7:                                                ; preds = %4
  %8 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) monotonic, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %7
  %11 = inttoptr i64 %8 to %"struct.base::PartitionRoot"*
  br label %13

12:                                               ; preds = %7
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0), align 8
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 1), align 1
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 2), align 2
  store i8 1, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 3), align 1
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 8) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 16), i8 0, i64 5120, i1 false) #13
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5176), align 8
  store i64 0, i64* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5392) to i64*), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5400) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5184), i8 0, i64 202, i1 false) #13
  tail call void @_ZN4base13PartitionRootILb1EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot"* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), i40 65793) #13
  store atomic i64 ptrtoint (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to i64), i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) release, align 8
  br label %13

13:                                               ; preds = %12, %10
  %14 = phi %"struct.base::PartitionRoot"* [ bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), %12 ], [ %11, %10 ]
  store atomic i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) release, align 8
  br label %15

15:                                               ; preds = %13, %0
  %16 = phi %"struct.base::PartitionRoot"* [ %2, %0 ], [ %14, %13 ]
  ret %"struct.base::PartitionRoot"* %16
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden %"struct.base::PartitionRoot"* @_ZN4base8internal20PartitionAllocMalloc17OriginalAllocatorEv() local_unnamed_addr #4 align 2 {
  %1 = load atomic i64, i64* bitcast ({ { %"struct.base::PartitionRoot"* } }* @_ZN12_GLOBAL__N_116g_original_root_E to i64*) monotonic, align 8
  %2 = inttoptr i64 %1 to %"struct.base::PartitionRoot"*
  ret %"struct.base::PartitionRoot"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden %"struct.base::PartitionRoot"* @_ZN4base8internal20PartitionAllocMalloc16AlignedAllocatorEv() local_unnamed_addr #0 align 2 {
  %1 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) acquire, align 8
  %2 = inttoptr i64 %1 to %"struct.base::PartitionRoot"*
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %4, label %15, !prof !2

4:                                                ; preds = %0, %4
  %5 = cmpxchg i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0), i8 0, i8 1 acquire acquire
  %6 = extractvalue { i8, i1 } %5, 1
  br i1 %6, label %7, label %4

7:                                                ; preds = %4
  %8 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) monotonic, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %7
  %11 = inttoptr i64 %8 to %"struct.base::PartitionRoot"*
  br label %13

12:                                               ; preds = %7
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0), align 8
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 1), align 1
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 2), align 2
  store i8 1, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 3), align 1
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 8) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 16), i8 0, i64 5120, i1 false) #13
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5176), align 8
  store i64 0, i64* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5392) to i64*), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5400) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5184), i8 0, i64 202, i1 false) #13
  tail call void @_ZN4base13PartitionRootILb1EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot"* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), i40 65793) #13
  store atomic i64 ptrtoint (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to i64), i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) release, align 8
  br label %13

13:                                               ; preds = %12, %10
  %14 = phi %"struct.base::PartitionRoot"* [ bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), %12 ], [ %11, %10 ]
  store atomic i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) release, align 8
  br label %15

15:                                               ; preds = %13, %0
  %16 = phi %"struct.base::PartitionRoot"* [ %2, %0 ], [ %14, %13 ]
  ret %"struct.base::PartitionRoot"* %16
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base9allocator35EnablePartitionAllocMemoryReclaimerEv() local_unnamed_addr #0 {
  %1 = tail call %"class.base::PartitionAllocMemoryReclaimer"* @_ZN4base29PartitionAllocMemoryReclaimer8InstanceEv() #13
  %2 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) acquire, align 8
  %3 = inttoptr i64 %2 to %"struct.base::PartitionRoot"*
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %5, label %16, !prof !2

5:                                                ; preds = %0, %5
  %6 = cmpxchg i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0), i8 0, i8 1 acquire acquire
  %7 = extractvalue { i8, i1 } %6, 1
  br i1 %7, label %8, label %5

8:                                                ; preds = %5
  %9 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) monotonic, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %8
  %12 = inttoptr i64 %9 to %"struct.base::PartitionRoot"*
  br label %14

13:                                               ; preds = %8
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0), align 8
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 1), align 1
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 2), align 2
  store i8 1, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 3), align 1
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 8) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 16), i8 0, i64 5120, i1 false) #13
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5176), align 8
  store i64 0, i64* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5392) to i64*), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5400) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5184), i8 0, i64 202, i1 false) #13
  tail call void @_ZN4base13PartitionRootILb1EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot"* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), i40 65793) #13
  store atomic i64 ptrtoint (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to i64), i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) release, align 8
  br label %14

14:                                               ; preds = %13, %11
  %15 = phi %"struct.base::PartitionRoot"* [ bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), %13 ], [ %12, %11 ]
  store atomic i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) release, align 8
  br label %16

16:                                               ; preds = %14, %0
  %17 = phi %"struct.base::PartitionRoot"* [ %3, %0 ], [ %15, %14 ]
  tail call void @_ZN4base29PartitionAllocMemoryReclaimer17RegisterPartitionEPNS_13PartitionRootILb1EEE(%"class.base::PartitionAllocMemoryReclaimer"* %1, %"struct.base::PartitionRoot"* %17) #13
  %18 = load atomic i64, i64* bitcast ({ { %"struct.base::PartitionRoot"* } }* @_ZN12_GLOBAL__N_116g_original_root_E to i64*) monotonic, align 8
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %23, label %20

20:                                               ; preds = %16
  %21 = inttoptr i64 %18 to %"struct.base::PartitionRoot"*
  %22 = tail call %"class.base::PartitionAllocMemoryReclaimer"* @_ZN4base29PartitionAllocMemoryReclaimer8InstanceEv() #13
  tail call void @_ZN4base29PartitionAllocMemoryReclaimer17RegisterPartitionEPNS_13PartitionRootILb1EEE(%"class.base::PartitionAllocMemoryReclaimer"* %22, %"struct.base::PartitionRoot"* nonnull %21) #13
  br label %23

23:                                               ; preds = %16, %20
  %24 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) acquire, align 8
  %25 = inttoptr i64 %24 to %"struct.base::PartitionRoot"*
  %26 = icmp eq i64 %24, 0
  br i1 %26, label %27, label %38, !prof !2

27:                                               ; preds = %23, %27
  %28 = cmpxchg i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0), i8 0, i8 1 acquire acquire
  %29 = extractvalue { i8, i1 } %28, 1
  br i1 %29, label %30, label %27

30:                                               ; preds = %27
  %31 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) monotonic, align 8
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %35, label %33

33:                                               ; preds = %30
  %34 = inttoptr i64 %31 to %"struct.base::PartitionRoot"*
  br label %36

35:                                               ; preds = %30
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0), align 8
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 1), align 1
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 2), align 2
  store i8 1, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 3), align 1
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 8) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 16), i8 0, i64 5120, i1 false) #13
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5176), align 8
  store i64 0, i64* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5392) to i64*), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5400) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5184), i8 0, i64 202, i1 false) #13
  tail call void @_ZN4base13PartitionRootILb1EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot"* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), i40 65793) #13
  store atomic i64 ptrtoint (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to i64), i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) release, align 8
  br label %36

36:                                               ; preds = %35, %33
  %37 = phi %"struct.base::PartitionRoot"* [ bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), %35 ], [ %34, %33 ]
  store atomic i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) release, align 8
  br label %38

38:                                               ; preds = %36, %23
  %39 = phi %"struct.base::PartitionRoot"* [ %25, %23 ], [ %37, %36 ]
  %40 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) acquire, align 8
  %41 = inttoptr i64 %40 to %"struct.base::PartitionRoot"*
  %42 = icmp eq i64 %40, 0
  br i1 %42, label %43, label %54, !prof !2

43:                                               ; preds = %38, %43
  %44 = cmpxchg i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0), i8 0, i8 1 acquire acquire
  %45 = extractvalue { i8, i1 } %44, 1
  br i1 %45, label %46, label %43

46:                                               ; preds = %43
  %47 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) monotonic, align 8
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %51, label %49

49:                                               ; preds = %46
  %50 = inttoptr i64 %47 to %"struct.base::PartitionRoot"*
  br label %52

51:                                               ; preds = %46
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0), align 8
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 1), align 1
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 2), align 2
  store i8 1, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 3), align 1
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 8) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 16), i8 0, i64 5120, i1 false) #13
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5176), align 8
  store i64 0, i64* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5392) to i64*), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5400) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5184), i8 0, i64 202, i1 false) #13
  tail call void @_ZN4base13PartitionRootILb1EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot"* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), i40 65793) #13
  store atomic i64 ptrtoint (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to i64), i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) release, align 8
  br label %52

52:                                               ; preds = %51, %49
  %53 = phi %"struct.base::PartitionRoot"* [ bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), %51 ], [ %50, %49 ]
  store atomic i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) release, align 8
  br label %54

54:                                               ; preds = %52, %38
  %55 = phi %"struct.base::PartitionRoot"* [ %41, %38 ], [ %53, %52 ]
  %56 = icmp eq %"struct.base::PartitionRoot"* %39, %55
  br i1 %56, label %75, label %57

57:                                               ; preds = %54
  %58 = tail call %"class.base::PartitionAllocMemoryReclaimer"* @_ZN4base29PartitionAllocMemoryReclaimer8InstanceEv() #13
  %59 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) acquire, align 8
  %60 = inttoptr i64 %59 to %"struct.base::PartitionRoot"*
  %61 = icmp eq i64 %59, 0
  br i1 %61, label %62, label %73, !prof !2

62:                                               ; preds = %57, %62
  %63 = cmpxchg i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0), i8 0, i8 1 acquire acquire
  %64 = extractvalue { i8, i1 } %63, 1
  br i1 %64, label %65, label %62

65:                                               ; preds = %62
  %66 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) monotonic, align 8
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %70, label %68

68:                                               ; preds = %65
  %69 = inttoptr i64 %66 to %"struct.base::PartitionRoot"*
  br label %71

70:                                               ; preds = %65
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0), align 8
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 1), align 1
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 2), align 2
  store i8 1, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 3), align 1
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 8) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 16), i8 0, i64 5120, i1 false) #13
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5176), align 8
  store i64 0, i64* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5392) to i64*), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5400) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5184), i8 0, i64 202, i1 false) #13
  tail call void @_ZN4base13PartitionRootILb1EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot"* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), i40 65793) #13
  store atomic i64 ptrtoint (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to i64), i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) release, align 8
  br label %71

71:                                               ; preds = %70, %68
  %72 = phi %"struct.base::PartitionRoot"* [ bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), %70 ], [ %69, %68 ]
  store atomic i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) release, align 8
  br label %73

73:                                               ; preds = %71, %57
  %74 = phi %"struct.base::PartitionRoot"* [ %60, %57 ], [ %72, %71 ]
  tail call void @_ZN4base29PartitionAllocMemoryReclaimer17RegisterPartitionEPNS_13PartitionRootILb1EEE(%"class.base::PartitionAllocMemoryReclaimer"* %58, %"struct.base::PartitionRoot"* %74) #13
  br label %75

75:                                               ; preds = %54, %73
  ret void
}

declare %"class.base::PartitionAllocMemoryReclaimer"* @_ZN4base29PartitionAllocMemoryReclaimer8InstanceEv() local_unnamed_addr #2

declare void @_ZN4base29PartitionAllocMemoryReclaimer17RegisterPartitionEPNS_13PartitionRootILb1EEE(%"class.base::PartitionAllocMemoryReclaimer"*, %"struct.base::PartitionRoot"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base9allocator35ReconfigurePartitionAllocLazyCommitEv() local_unnamed_addr #0 {
  %1 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) acquire, align 8
  %2 = inttoptr i64 %1 to %"struct.base::PartitionRoot"*
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %4, label %15, !prof !2

4:                                                ; preds = %0, %4
  %5 = cmpxchg i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0), i8 0, i8 1 acquire acquire
  %6 = extractvalue { i8, i1 } %5, 1
  br i1 %6, label %7, label %4

7:                                                ; preds = %4
  %8 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) monotonic, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %7
  %11 = inttoptr i64 %8 to %"struct.base::PartitionRoot"*
  br label %13

12:                                               ; preds = %7
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0), align 8
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 1), align 1
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 2), align 2
  store i8 1, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 3), align 1
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 8) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 16), i8 0, i64 5120, i1 false) #13
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5176), align 8
  store i64 0, i64* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5392) to i64*), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5400) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5184), i8 0, i64 202, i1 false) #13
  tail call void @_ZN4base13PartitionRootILb1EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot"* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), i40 65793) #13
  store atomic i64 ptrtoint (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to i64), i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) release, align 8
  br label %13

13:                                               ; preds = %12, %10
  %14 = phi %"struct.base::PartitionRoot"* [ bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), %12 ], [ %11, %10 ]
  store atomic i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) release, align 8
  br label %15

15:                                               ; preds = %13, %0
  %16 = phi %"struct.base::PartitionRoot"* [ %2, %0 ], [ %14, %13 ]
  tail call void @_ZN4base13PartitionRootILb1EE19ConfigureLazyCommitEv(%"struct.base::PartitionRoot"* %16) #13
  %17 = load atomic i64, i64* bitcast ({ { %"struct.base::PartitionRoot"* } }* @_ZN12_GLOBAL__N_116g_original_root_E to i64*) monotonic, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %15
  %20 = inttoptr i64 %17 to %"struct.base::PartitionRoot"*
  tail call void @_ZN4base13PartitionRootILb1EE19ConfigureLazyCommitEv(%"struct.base::PartitionRoot"* nonnull %20) #13
  br label %21

21:                                               ; preds = %15, %19
  %22 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) acquire, align 8
  %23 = inttoptr i64 %22 to %"struct.base::PartitionRoot"*
  %24 = icmp eq i64 %22, 0
  br i1 %24, label %25, label %36, !prof !2

25:                                               ; preds = %21, %25
  %26 = cmpxchg i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0), i8 0, i8 1 acquire acquire
  %27 = extractvalue { i8, i1 } %26, 1
  br i1 %27, label %28, label %25

28:                                               ; preds = %25
  %29 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) monotonic, align 8
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %33, label %31

31:                                               ; preds = %28
  %32 = inttoptr i64 %29 to %"struct.base::PartitionRoot"*
  br label %34

33:                                               ; preds = %28
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0), align 8
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 1), align 1
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 2), align 2
  store i8 1, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 3), align 1
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 8) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 16), i8 0, i64 5120, i1 false) #13
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5176), align 8
  store i64 0, i64* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5392) to i64*), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5400) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5184), i8 0, i64 202, i1 false) #13
  tail call void @_ZN4base13PartitionRootILb1EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot"* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), i40 65793) #13
  store atomic i64 ptrtoint (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to i64), i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) release, align 8
  br label %34

34:                                               ; preds = %33, %31
  %35 = phi %"struct.base::PartitionRoot"* [ bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), %33 ], [ %32, %31 ]
  store atomic i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) release, align 8
  br label %36

36:                                               ; preds = %34, %21
  %37 = phi %"struct.base::PartitionRoot"* [ %23, %21 ], [ %35, %34 ]
  tail call void @_ZN4base13PartitionRootILb1EE19ConfigureLazyCommitEv(%"struct.base::PartitionRoot"* %37) #13
  ret void
}

declare void @_ZN4base13PartitionRootILb1EE19ConfigureLazyCommitEv(%"struct.base::PartitionRoot"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base9allocator12EnablePCScanEb(i1 zeroext) local_unnamed_addr #0 {
  %2 = zext i1 %0 to i8
  tail call void @_ZN4base8internal6PCScan10InitializeENS1_25WantedWriteProtectionModeE(i8 zeroext %2) #13
  %3 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) acquire, align 8
  %4 = inttoptr i64 %3 to %"struct.base::PartitionRoot"*
  %5 = icmp eq i64 %3, 0
  br i1 %5, label %6, label %17, !prof !2

6:                                                ; preds = %1, %6
  %7 = cmpxchg i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0), i8 0, i8 1 acquire acquire
  %8 = extractvalue { i8, i1 } %7, 1
  br i1 %8, label %9, label %6

9:                                                ; preds = %6
  %10 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) monotonic, align 8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %14, label %12

12:                                               ; preds = %9
  %13 = inttoptr i64 %10 to %"struct.base::PartitionRoot"*
  br label %15

14:                                               ; preds = %9
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0), align 8
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 1), align 1
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 2), align 2
  store i8 1, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 3), align 1
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 8) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 16), i8 0, i64 5120, i1 false) #13
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5176), align 8
  store i64 0, i64* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5392) to i64*), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5400) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5184), i8 0, i64 202, i1 false) #13
  tail call void @_ZN4base13PartitionRootILb1EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot"* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), i40 65793) #13
  store atomic i64 ptrtoint (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to i64), i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) release, align 8
  br label %15

15:                                               ; preds = %14, %12
  %16 = phi %"struct.base::PartitionRoot"* [ bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), %14 ], [ %13, %12 ]
  store atomic i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) release, align 8
  br label %17

17:                                               ; preds = %15, %1
  %18 = phi %"struct.base::PartitionRoot"* [ %4, %1 ], [ %16, %15 ]
  tail call void @_ZN4base8internal6PCScan21RegisterScannableRootEPNS_13PartitionRootILb1EEE(%"struct.base::PartitionRoot"* %18) #13
  %19 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) acquire, align 8
  %20 = inttoptr i64 %19 to %"struct.base::PartitionRoot"*
  %21 = icmp eq i64 %19, 0
  br i1 %21, label %22, label %33, !prof !2

22:                                               ; preds = %17, %22
  %23 = cmpxchg i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0), i8 0, i8 1 acquire acquire
  %24 = extractvalue { i8, i1 } %23, 1
  br i1 %24, label %25, label %22

25:                                               ; preds = %22
  %26 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) monotonic, align 8
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %30, label %28

28:                                               ; preds = %25
  %29 = inttoptr i64 %26 to %"struct.base::PartitionRoot"*
  br label %31

30:                                               ; preds = %25
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0), align 8
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 1), align 1
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 2), align 2
  store i8 1, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 3), align 1
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 8) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 16), i8 0, i64 5120, i1 false) #13
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5176), align 8
  store i64 0, i64* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5392) to i64*), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5400) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5184), i8 0, i64 202, i1 false) #13
  tail call void @_ZN4base13PartitionRootILb1EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot"* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), i40 65793) #13
  store atomic i64 ptrtoint (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to i64), i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) release, align 8
  br label %31

31:                                               ; preds = %30, %28
  %32 = phi %"struct.base::PartitionRoot"* [ bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), %30 ], [ %29, %28 ]
  store atomic i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) release, align 8
  br label %33

33:                                               ; preds = %31, %17
  %34 = phi %"struct.base::PartitionRoot"* [ %20, %17 ], [ %32, %31 ]
  %35 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) acquire, align 8
  %36 = inttoptr i64 %35 to %"struct.base::PartitionRoot"*
  %37 = icmp eq i64 %35, 0
  br i1 %37, label %38, label %49, !prof !2

38:                                               ; preds = %33, %38
  %39 = cmpxchg i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0), i8 0, i8 1 acquire acquire
  %40 = extractvalue { i8, i1 } %39, 1
  br i1 %40, label %41, label %38

41:                                               ; preds = %38
  %42 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) monotonic, align 8
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %46, label %44

44:                                               ; preds = %41
  %45 = inttoptr i64 %42 to %"struct.base::PartitionRoot"*
  br label %47

46:                                               ; preds = %41
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0), align 8
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 1), align 1
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 2), align 2
  store i8 1, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 3), align 1
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 8) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 16), i8 0, i64 5120, i1 false) #13
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5176), align 8
  store i64 0, i64* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5392) to i64*), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5400) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5184), i8 0, i64 202, i1 false) #13
  tail call void @_ZN4base13PartitionRootILb1EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot"* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), i40 65793) #13
  store atomic i64 ptrtoint (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to i64), i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) release, align 8
  br label %47

47:                                               ; preds = %46, %44
  %48 = phi %"struct.base::PartitionRoot"* [ bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), %46 ], [ %45, %44 ]
  store atomic i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) release, align 8
  br label %49

49:                                               ; preds = %47, %33
  %50 = phi %"struct.base::PartitionRoot"* [ %36, %33 ], [ %48, %47 ]
  %51 = icmp eq %"struct.base::PartitionRoot"* %34, %50
  br i1 %51, label %69, label %52

52:                                               ; preds = %49
  %53 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) acquire, align 8
  %54 = inttoptr i64 %53 to %"struct.base::PartitionRoot"*
  %55 = icmp eq i64 %53, 0
  br i1 %55, label %56, label %67, !prof !2

56:                                               ; preds = %52, %56
  %57 = cmpxchg i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0), i8 0, i8 1 acquire acquire
  %58 = extractvalue { i8, i1 } %57, 1
  br i1 %58, label %59, label %56

59:                                               ; preds = %56
  %60 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) monotonic, align 8
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %64, label %62

62:                                               ; preds = %59
  %63 = inttoptr i64 %60 to %"struct.base::PartitionRoot"*
  br label %65

64:                                               ; preds = %59
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0), align 8
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 1), align 1
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 2), align 2
  store i8 1, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 3), align 1
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 8) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 16), i8 0, i64 5120, i1 false) #13
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5176), align 8
  store i64 0, i64* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5392) to i64*), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5400) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5184), i8 0, i64 202, i1 false) #13
  tail call void @_ZN4base13PartitionRootILb1EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot"* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), i40 65793) #13
  store atomic i64 ptrtoint (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to i64), i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) release, align 8
  br label %65

65:                                               ; preds = %64, %62
  %66 = phi %"struct.base::PartitionRoot"* [ bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), %64 ], [ %63, %62 ]
  store atomic i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) release, align 8
  br label %67

67:                                               ; preds = %65, %52
  %68 = phi %"struct.base::PartitionRoot"* [ %54, %52 ], [ %66, %65 ]
  tail call void @_ZN4base8internal6PCScan21RegisterScannableRootEPNS_13PartitionRootILb1EEE(%"struct.base::PartitionRoot"* %68) #13
  br label %69

69:                                               ; preds = %49, %67
  %70 = tail call dereferenceable(24) %"class.base::internal::NonScannableAllocator"* @_ZN4base8internal21NonScannableAllocator8InstanceEv() #13
  tail call void @_ZN4base8internal21NonScannableAllocator12EnablePCScanEv(%"class.base::internal::NonScannableAllocator"* %70) #13
  ret void
}

declare void @_ZN4base8internal6PCScan10InitializeENS1_25WantedWriteProtectionModeE(i8 zeroext) local_unnamed_addr #2

declare void @_ZN4base8internal6PCScan21RegisterScannableRootEPNS_13PartitionRootILb1EEE(%"struct.base::PartitionRoot"*) local_unnamed_addr #2

declare dereferenceable(24) %"class.base::internal::NonScannableAllocator"* @_ZN4base8internal21NonScannableAllocator8InstanceEv() local_unnamed_addr #2

declare void @_ZN4base8internal21NonScannableAllocator12EnablePCScanEv(%"class.base::internal::NonScannableAllocator"*) local_unnamed_addr #2

; Function Attrs: noinline norecurse nounwind readnone ssp uwtable
define void @malloc_stats() local_unnamed_addr #5 {
  ret void
}

; Function Attrs: noinline norecurse nounwind readnone ssp uwtable
define i32 @mallopt(i32, i32) local_unnamed_addr #5 {
  ret i32 0
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mallinfo(%struct.mallinfo* noalias nocapture sret) local_unnamed_addr #6 {
  %2 = alloca %"class.base::SimplePartitionStatsDumper", align 8
  %3 = alloca %"class.base::SimplePartitionStatsDumper", align 8
  %4 = alloca %"class.base::SimplePartitionStatsDumper", align 8
  %5 = bitcast %"class.base::SimplePartitionStatsDumper"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4368, i8* nonnull %5) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 4368, i1 false)
  call void @_ZN4base26SimplePartitionStatsDumperC1Ev(%"class.base::SimplePartitionStatsDumper"* nonnull %2) #13
  %6 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) acquire, align 8
  %7 = inttoptr i64 %6 to %"struct.base::PartitionRoot"*
  %8 = icmp eq i64 %6, 0
  br i1 %8, label %9, label %20, !prof !2

9:                                                ; preds = %1, %9
  %10 = cmpxchg i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0), i8 0, i8 1 acquire acquire
  %11 = extractvalue { i8, i1 } %10, 1
  br i1 %11, label %12, label %9

12:                                               ; preds = %9
  %13 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) monotonic, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %12
  %16 = inttoptr i64 %13 to %"struct.base::PartitionRoot"*
  br label %18

17:                                               ; preds = %12
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0), align 8
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 1), align 1
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 2), align 2
  store i8 1, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 3), align 1
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 8) to i32*), align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 16), i8 0, i64 5120, i1 false) #13
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5176), align 8
  store i64 0, i64* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5392) to i64*), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5400) to i32*), align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5184), i8 0, i64 202, i1 false) #13
  call void @_ZN4base13PartitionRootILb1EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot"* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), i40 65793) #13
  store atomic i64 ptrtoint (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to i64), i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) release, align 8
  br label %18

18:                                               ; preds = %17, %15
  %19 = phi %"struct.base::PartitionRoot"* [ bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), %17 ], [ %16, %15 ]
  store atomic i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) release, align 8
  br label %20

20:                                               ; preds = %18, %1
  %21 = phi %"struct.base::PartitionRoot"* [ %7, %1 ], [ %19, %18 ]
  %22 = getelementptr inbounds %"class.base::SimplePartitionStatsDumper", %"class.base::SimplePartitionStatsDumper"* %2, i64 0, i32 0
  call void @_ZN4base13PartitionRootILb1EE9DumpStatsEPKcbPNS_20PartitionStatsDumperE(%"struct.base::PartitionRoot"* %21, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i1 zeroext true, %"class.base::PartitionStatsDumper"* nonnull %22) #13
  %23 = bitcast %"class.base::SimplePartitionStatsDumper"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4368, i8* nonnull %23) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 4368, i1 false)
  call void @_ZN4base26SimplePartitionStatsDumperC1Ev(%"class.base::SimplePartitionStatsDumper"* nonnull %3) #13
  %24 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) acquire, align 8
  %25 = inttoptr i64 %24 to %"struct.base::PartitionRoot"*
  %26 = icmp eq i64 %24, 0
  br i1 %26, label %27, label %38, !prof !2

27:                                               ; preds = %20, %27
  %28 = cmpxchg i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0), i8 0, i8 1 acquire acquire
  %29 = extractvalue { i8, i1 } %28, 1
  br i1 %29, label %30, label %27

30:                                               ; preds = %27
  %31 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) monotonic, align 8
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %35, label %33

33:                                               ; preds = %30
  %34 = inttoptr i64 %31 to %"struct.base::PartitionRoot"*
  br label %36

35:                                               ; preds = %30
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0), align 8
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 1), align 1
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 2), align 2
  store i8 1, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 3), align 1
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 8) to i32*), align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 16), i8 0, i64 5120, i1 false) #13
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5176), align 8
  store i64 0, i64* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5392) to i64*), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5400) to i32*), align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5184), i8 0, i64 202, i1 false) #13
  call void @_ZN4base13PartitionRootILb1EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot"* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), i40 65793) #13
  store atomic i64 ptrtoint (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to i64), i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) release, align 8
  br label %36

36:                                               ; preds = %35, %33
  %37 = phi %"struct.base::PartitionRoot"* [ bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), %35 ], [ %34, %33 ]
  store atomic i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) release, align 8
  br label %38

38:                                               ; preds = %36, %20
  %39 = phi %"struct.base::PartitionRoot"* [ %25, %20 ], [ %37, %36 ]
  %40 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) acquire, align 8
  %41 = inttoptr i64 %40 to %"struct.base::PartitionRoot"*
  %42 = icmp eq i64 %40, 0
  br i1 %42, label %43, label %54, !prof !2

43:                                               ; preds = %38, %43
  %44 = cmpxchg i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0), i8 0, i8 1 acquire acquire
  %45 = extractvalue { i8, i1 } %44, 1
  br i1 %45, label %46, label %43

46:                                               ; preds = %43
  %47 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) monotonic, align 8
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %51, label %49

49:                                               ; preds = %46
  %50 = inttoptr i64 %47 to %"struct.base::PartitionRoot"*
  br label %52

51:                                               ; preds = %46
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0), align 8
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 1), align 1
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 2), align 2
  store i8 1, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 3), align 1
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 8) to i32*), align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 16), i8 0, i64 5120, i1 false) #13
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5176), align 8
  store i64 0, i64* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5392) to i64*), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5400) to i32*), align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5184), i8 0, i64 202, i1 false) #13
  call void @_ZN4base13PartitionRootILb1EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot"* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), i40 65793) #13
  store atomic i64 ptrtoint (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to i64), i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) release, align 8
  br label %52

52:                                               ; preds = %51, %49
  %53 = phi %"struct.base::PartitionRoot"* [ bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), %51 ], [ %50, %49 ]
  store atomic i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) release, align 8
  br label %54

54:                                               ; preds = %52, %38
  %55 = phi %"struct.base::PartitionRoot"* [ %41, %38 ], [ %53, %52 ]
  %56 = icmp eq %"struct.base::PartitionRoot"* %39, %55
  br i1 %56, label %75, label %57

57:                                               ; preds = %54
  %58 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) acquire, align 8
  %59 = inttoptr i64 %58 to %"struct.base::PartitionRoot"*
  %60 = icmp eq i64 %58, 0
  br i1 %60, label %61, label %72, !prof !2

61:                                               ; preds = %57, %61
  %62 = cmpxchg i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0), i8 0, i8 1 acquire acquire
  %63 = extractvalue { i8, i1 } %62, 1
  br i1 %63, label %64, label %61

64:                                               ; preds = %61
  %65 = load atomic i64, i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) monotonic, align 8
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %69, label %67

67:                                               ; preds = %64
  %68 = inttoptr i64 %65 to %"struct.base::PartitionRoot"*
  br label %70

69:                                               ; preds = %64
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0), align 8
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 1), align 1
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 2), align 2
  store i8 1, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 3), align 1
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 8) to i32*), align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 16), i8 0, i64 5120, i1 false) #13
  store i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5176), align 8
  store i64 0, i64* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5392) to i64*), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5400) to i32*), align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 5184), i8 0, i64 202, i1 false) #13
  call void @_ZN4base13PartitionRootILb1EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot"* bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), i40 65793) #13
  store atomic i64 ptrtoint (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to i64), i64* bitcast (%"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE to i64*) release, align 8
  br label %70

70:                                               ; preds = %69, %67
  %71 = phi %"struct.base::PartitionRoot"* [ bitcast (i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 1, i64 0) to %"struct.base::PartitionRoot"*), %69 ], [ %68, %67 ]
  store atomic i8 0, i8* getelementptr inbounds (%"class.(anonymous namespace)::LeakySingleton", %"class.(anonymous namespace)::LeakySingleton"* @_ZN12_GLOBAL__N_16g_rootE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) release, align 8
  br label %72

72:                                               ; preds = %70, %57
  %73 = phi %"struct.base::PartitionRoot"* [ %59, %57 ], [ %71, %70 ]
  %74 = getelementptr inbounds %"class.base::SimplePartitionStatsDumper", %"class.base::SimplePartitionStatsDumper"* %3, i64 0, i32 0
  call void @_ZN4base13PartitionRootILb1EE9DumpStatsEPKcbPNS_20PartitionStatsDumperE(%"struct.base::PartitionRoot"* %73, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i1 zeroext true, %"class.base::PartitionStatsDumper"* nonnull %74) #13
  br label %75

75:                                               ; preds = %54, %72
  %76 = call dereferenceable(24) %"class.base::internal::NonScannableAllocator"* @_ZN4base8internal21NonScannableAllocator8InstanceEv() #13
  %77 = bitcast %"class.base::SimplePartitionStatsDumper"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4368, i8* nonnull %77) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %77, i8 -86, i64 4368, i1 false)
  call void @_ZN4base26SimplePartitionStatsDumperC1Ev(%"class.base::SimplePartitionStatsDumper"* nonnull %4) #13
  %78 = getelementptr inbounds %"class.base::internal::NonScannableAllocator", %"class.base::internal::NonScannableAllocator"* %76, i64 0, i32 0, i32 0, i32 0, i32 0
  %79 = load %"struct.base::internal::PartitionAllocator"*, %"struct.base::internal::PartitionAllocator"** %78, align 8
  %80 = icmp eq %"struct.base::internal::PartitionAllocator"* %79, null
  br i1 %80, label %84, label %81

81:                                               ; preds = %75
  %82 = getelementptr inbounds %"struct.base::internal::PartitionAllocator", %"struct.base::internal::PartitionAllocator"* %79, i64 0, i32 0
  %83 = getelementptr inbounds %"class.base::SimplePartitionStatsDumper", %"class.base::SimplePartitionStatsDumper"* %4, i64 0, i32 0
  call void @_ZN4base13PartitionRootILb1EE9DumpStatsEPKcbPNS_20PartitionStatsDumperE(%"struct.base::PartitionRoot"* nonnull %82, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i1 zeroext true, %"class.base::PartitionStatsDumper"* nonnull %83) #13
  br label %84

84:                                               ; preds = %75, %81
  %85 = getelementptr inbounds %"class.base::SimplePartitionStatsDumper", %"class.base::SimplePartitionStatsDumper"* %2, i64 0, i32 1, i32 0
  %86 = bitcast %struct.mallinfo* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %86, i8 0, i64 40, i1 false)
  %87 = load i64, i64* %85, align 8
  %88 = getelementptr inbounds %"class.base::SimplePartitionStatsDumper", %"class.base::SimplePartitionStatsDumper"* %3, i64 0, i32 1, i32 0
  %89 = load i64, i64* %88, align 8
  %90 = add i64 %89, %87
  %91 = getelementptr inbounds %"class.base::SimplePartitionStatsDumper", %"class.base::SimplePartitionStatsDumper"* %4, i64 0, i32 1, i32 0
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %90, %92
  %94 = trunc i64 %93 to i32
  %95 = getelementptr inbounds %struct.mallinfo, %struct.mallinfo* %0, i64 0, i32 3
  store i32 %94, i32* %95, align 4
  %96 = getelementptr inbounds %"class.base::SimplePartitionStatsDumper", %"class.base::SimplePartitionStatsDumper"* %2, i64 0, i32 1, i32 2
  %97 = load i64, i64* %96, align 8
  %98 = getelementptr inbounds %"class.base::SimplePartitionStatsDumper", %"class.base::SimplePartitionStatsDumper"* %3, i64 0, i32 1, i32 2
  %99 = load i64, i64* %98, align 8
  %100 = add i64 %99, %97
  %101 = getelementptr inbounds %"class.base::SimplePartitionStatsDumper", %"class.base::SimplePartitionStatsDumper"* %4, i64 0, i32 1, i32 2
  %102 = load i64, i64* %101, align 8
  %103 = add i64 %100, %102
  %104 = trunc i64 %103 to i32
  %105 = getelementptr inbounds %struct.mallinfo, %struct.mallinfo* %0, i64 0, i32 4
  store i32 %104, i32* %105, align 4
  %106 = getelementptr inbounds %"class.base::SimplePartitionStatsDumper", %"class.base::SimplePartitionStatsDumper"* %2, i64 0, i32 1, i32 3
  %107 = load i64, i64* %106, align 8
  %108 = getelementptr inbounds %"class.base::SimplePartitionStatsDumper", %"class.base::SimplePartitionStatsDumper"* %3, i64 0, i32 1, i32 3
  %109 = load i64, i64* %108, align 8
  %110 = add i64 %109, %107
  %111 = getelementptr inbounds %"class.base::SimplePartitionStatsDumper", %"class.base::SimplePartitionStatsDumper"* %4, i64 0, i32 1, i32 3
  %112 = load i64, i64* %111, align 8
  %113 = add i64 %110, %112
  %114 = trunc i64 %113 to i32
  %115 = getelementptr inbounds %struct.mallinfo, %struct.mallinfo* %0, i64 0, i32 7
  store i32 %114, i32* %115, align 4
  call void @llvm.lifetime.end.p0i8(i64 4368, i8* nonnull %77) #13
  call void @llvm.lifetime.end.p0i8(i64 4368, i8* nonnull %23) #13
  call void @llvm.lifetime.end.p0i8(i64 4368, i8* nonnull %5) #13
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN4base26SimplePartitionStatsDumperC1Ev(%"class.base::SimplePartitionStatsDumper"*) unnamed_addr #2

declare void @_ZN4base13PartitionRootILb1EE9DumpStatsEPKcbPNS_20PartitionStatsDumperE(%"struct.base::PartitionRoot"*, i8*, i1 zeroext, %"class.base::PartitionStatsDumper"*) local_unnamed_addr #2

declare void @_ZN4base13PartitionRootILb1EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot"*, i40) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #7

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

declare void @_ZN7logging8RawCheckEPKc(i8*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZN4base8internal32PartitionExcessiveAllocationSizeEm(i64) local_unnamed_addr #9

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #7

declare i8* @_ZN4base13PartitionRootILb1EE28MaybeInitThreadCacheAndAllocEtPm(%"struct.base::PartitionRoot"*, i16 zeroext, i64*) local_unnamed_addr #2

declare void @_ZN4base8internal6PCScan8JoinScanEv() local_unnamed_addr #2

; Function Attrs: nounwind
declare i8* @pthread_getspecific(i32) local_unnamed_addr #10

declare void @_ZN4base8internal11ThreadCache10FillBucketEm(%"class.base::internal::ThreadCache"*, i64) local_unnamed_addr #2

; Function Attrs: noinline noreturn nounwind ssp uwtable
define internal fastcc void @_ZN4base8internal12_GLOBAL__N_126FreelistCorruptionDetectedEv() unnamed_addr #11 {
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !11
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !12
  unreachable
}

; Function Attrs: inaccessiblemem_or_argmemonly nounwind
declare void @llvm.prefetch(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #12

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.bswap.i64(i64) #7

declare void @_ZN4base8internal13SpinningMutex8LockSlowEv(%"class.base::internal::SpinningMutex"*) local_unnamed_addr #2

declare i8* @_ZN4base8internal15PartitionBucketILb1EE13SlowPathAllocEPNS_13PartitionRootILb1EEEimmPb(%"struct.base::internal::PartitionBucket"*, %"struct.base::PartitionRoot"*, i32, i64, i64, i8*) local_unnamed_addr #2

declare void @_ZN4base8internal13SpinningMutex9FutexWakeEv(%"class.base::internal::SpinningMutex"*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZN4base8internal17DoubleFreeAttemptEv() local_unnamed_addr #9

declare void @_ZN4base8internal6PCScan11PerformScanENS1_14InvocationModeE(%"class.base::internal::PCScan"*, i32) local_unnamed_addr #2

declare void @_ZN4base8internal11ThreadCache11ClearBucketERNS1_6BucketEm(%"class.base::internal::ThreadCache"*, %"struct.base::internal::ThreadCache::Bucket"* dereferenceable(16), i64) local_unnamed_addr #2

declare void @_ZN4base8internal11ThreadCache13PurgeInternalEv(%"class.base::internal::ThreadCache"*) local_unnamed_addr #2

declare { i8*, i64 } @_ZN4base8internal16SlotSpanMetadataILb1EE12FreeSlowPathEv(%"struct.base::internal::SlotSpanMetadata"*) local_unnamed_addr #2

declare void @_ZN4base8internal13DeferredUnmap5UnmapEv(%"struct.base::internal::DeferredUnmap"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noinline noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { inaccessiblemem_or_argmemonly nounwind }
attributes #13 = { nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i64 0, i64 65}
!4 = !{i8 0, i8 2}
!5 = !{!"branch_weights", i32 4001, i32 4000000}
!6 = !{!"branch_weights", i32 2000, i32 1}
!7 = !{!"branch_weights", i32 2146410443, i32 1073205}
!8 = !{i32 -2142374446}
!9 = !{!"branch_weights", i32 1, i32 4001}
!10 = !{!"branch_weights", i32 4000000, i32 4001}
!11 = !{i32 -2142413019}
!12 = !{i32 -2142412998}
