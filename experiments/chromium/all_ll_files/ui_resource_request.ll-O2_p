; ModuleID = '../../cc/resources/ui_resource_request.cc'
source_filename = "../../cc/resources/ui_resource_request.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cc::UIResourceRequest" = type { i32, i32, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.cc::UIResourceBitmap"* }
%"class.cc::UIResourceBitmap" = type { %class.sk_sp, i32, %struct.SkImageInfo }
%class.sk_sp = type { %class.SkPixelRef* }
%class.SkPixelRef = type <{ %class.SkRefCnt.base, i32, i32, [4 x i8], i8*, i64, %"struct.std::__1::atomic.1", [4 x i8], %"class.SkIDChangeListener::List", %"struct.std::__1::atomic.11", i8, [6 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.6" }
%"struct.std::__1::atomic.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__atomic_base.8" }
%"struct.std::__1::__atomic_base.8" = type { %"struct.std::__1::__cxx_atomic_impl.9" }
%"struct.std::__1::__cxx_atomic_impl.9" = type { %"struct.std::__1::__cxx_atomic_base_impl.10" }
%"struct.std::__1::__cxx_atomic_base_impl.10" = type { i8 }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.11", [3 x i8] }
%"struct.std::__1::atomic.11" = type { %"struct.std::__1::__atomic_base.12" }
%"struct.std::__1::__atomic_base.12" = type { %"struct.std::__1::__cxx_atomic_impl.13" }
%"struct.std::__1::__cxx_atomic_impl.13" = type { %"struct.std::__1::__cxx_atomic_base_impl.14" }
%"struct.std::__1::__cxx_atomic_base_impl.14" = type { i8 }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.15, i32, i32 }
%class.sk_sp.15 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.SkISize = type { i32, i32 }

@_ZN2cc17UIResourceRequestC1ENS0_21UIResourceRequestTypeEi = hidden unnamed_addr alias void (%"class.cc::UIResourceRequest"*, i32, i32), void (%"class.cc::UIResourceRequest"*, i32, i32)* @_ZN2cc17UIResourceRequestC2ENS0_21UIResourceRequestTypeEi
@_ZN2cc17UIResourceRequestC1ENS0_21UIResourceRequestTypeEiRKNS_16UIResourceBitmapE = hidden unnamed_addr alias void (%"class.cc::UIResourceRequest"*, i32, i32, %"class.cc::UIResourceBitmap"*), void (%"class.cc::UIResourceRequest"*, i32, i32, %"class.cc::UIResourceBitmap"*)* @_ZN2cc17UIResourceRequestC2ENS0_21UIResourceRequestTypeEiRKNS_16UIResourceBitmapE
@_ZN2cc17UIResourceRequestC1ERKS0_ = hidden unnamed_addr alias void (%"class.cc::UIResourceRequest"*, %"class.cc::UIResourceRequest"*), void (%"class.cc::UIResourceRequest"*, %"class.cc::UIResourceRequest"*)* @_ZN2cc17UIResourceRequestC2ERKS0_
@_ZN2cc17UIResourceRequestD1Ev = hidden unnamed_addr alias void (%"class.cc::UIResourceRequest"*), void (%"class.cc::UIResourceRequest"*)* @_ZN2cc17UIResourceRequestD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2cc17UIResourceRequestC2ENS0_21UIResourceRequestTypeEi(%"class.cc::UIResourceRequest"* nocapture, i32, i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.cc::UIResourceRequest", %"class.cc::UIResourceRequest"* %0, i64 0, i32 0
  store i32 %1, i32* %4, align 8
  %5 = getelementptr inbounds %"class.cc::UIResourceRequest", %"class.cc::UIResourceRequest"* %0, i64 0, i32 1
  store i32 %2, i32* %5, align 4
  %6 = getelementptr inbounds %"class.cc::UIResourceRequest", %"class.cc::UIResourceRequest"* %0, i64 0, i32 2
  %7 = bitcast %"class.std::__1::unique_ptr"* %6 to i64*
  store i64 0, i64* %7, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc17UIResourceRequestC2ENS0_21UIResourceRequestTypeEiRKNS_16UIResourceBitmapE(%"class.cc::UIResourceRequest"* nocapture, i32, i32, %"class.cc::UIResourceBitmap"* dereferenceable(40)) unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.cc::UIResourceRequest", %"class.cc::UIResourceRequest"* %0, i64 0, i32 0
  store i32 %1, i32* %5, align 8
  %6 = getelementptr inbounds %"class.cc::UIResourceRequest", %"class.cc::UIResourceRequest"* %0, i64 0, i32 1
  store i32 %2, i32* %6, align 4
  %7 = getelementptr inbounds %"class.cc::UIResourceRequest", %"class.cc::UIResourceRequest"* %0, i64 0, i32 2
  %8 = tail call i8* @_Znwm(i64 40) #6
  %9 = bitcast i8* %8 to %"class.cc::UIResourceBitmap"*
  tail call void @_ZN2cc16UIResourceBitmapC1ERKS0_(%"class.cc::UIResourceBitmap"* nonnull %9, %"class.cc::UIResourceBitmap"* dereferenceable(40) %3) #7
  %10 = ptrtoint i8* %8 to i64
  %11 = bitcast %"class.std::__1::unique_ptr"* %7 to i64*
  store i64 %10, i64* %11, align 8
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

declare void @_ZN2cc16UIResourceBitmapC1ERKS0_(%"class.cc::UIResourceBitmap"*, %"class.cc::UIResourceBitmap"* dereferenceable(40)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc17UIResourceRequestC2ERKS0_(%"class.cc::UIResourceRequest"*, %"class.cc::UIResourceRequest"* nocapture readonly dereferenceable(16)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.cc::UIResourceRequest", %"class.cc::UIResourceRequest"* %0, i64 0, i32 2
  %4 = bitcast %"class.std::__1::unique_ptr"* %3 to i64*
  store i64 0, i64* %4, align 8
  %5 = tail call dereferenceable(16) %"class.cc::UIResourceRequest"* @_ZN2cc17UIResourceRequestaSERKS0_(%"class.cc::UIResourceRequest"* %0, %"class.cc::UIResourceRequest"* dereferenceable(16) %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(16) %"class.cc::UIResourceRequest"* @_ZN2cc17UIResourceRequestaSERKS0_(%"class.cc::UIResourceRequest"* returned, %"class.cc::UIResourceRequest"* nocapture readonly dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.cc::UIResourceRequest", %"class.cc::UIResourceRequest"* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.cc::UIResourceRequest", %"class.cc::UIResourceRequest"* %0, i64 0, i32 0
  store i32 %4, i32* %5, align 8
  %6 = getelementptr inbounds %"class.cc::UIResourceRequest", %"class.cc::UIResourceRequest"* %1, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.cc::UIResourceRequest", %"class.cc::UIResourceRequest"* %0, i64 0, i32 1
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds %"class.cc::UIResourceRequest", %"class.cc::UIResourceRequest"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %10 = load %"class.cc::UIResourceBitmap"*, %"class.cc::UIResourceBitmap"** %9, align 8
  %11 = icmp eq %"class.cc::UIResourceBitmap"* %10, null
  br i1 %11, label %23, label %12

12:                                               ; preds = %2
  %13 = tail call i8* @_Znwm(i64 40) #6
  %14 = bitcast i8* %13 to %"class.cc::UIResourceBitmap"*
  tail call void @_ZN2cc16UIResourceBitmapC1ERKS0_(%"class.cc::UIResourceBitmap"* nonnull %14, %"class.cc::UIResourceBitmap"* nonnull dereferenceable(40) %10) #7
  %15 = ptrtoint i8* %13 to i64
  %16 = getelementptr inbounds %"class.cc::UIResourceRequest", %"class.cc::UIResourceRequest"* %0, i64 0, i32 2
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %16, i64 0, i32 0, i32 0, i32 0
  %18 = load %"class.cc::UIResourceBitmap"*, %"class.cc::UIResourceBitmap"** %17, align 8
  %19 = bitcast %"class.std::__1::unique_ptr"* %16 to i64*
  store i64 %15, i64* %19, align 8
  %20 = icmp eq %"class.cc::UIResourceBitmap"* %18, null
  br i1 %20, label %29, label %21

21:                                               ; preds = %12
  tail call void @_ZN2cc16UIResourceBitmapD1Ev(%"class.cc::UIResourceBitmap"* nonnull %18) #7
  %22 = bitcast %"class.cc::UIResourceBitmap"* %18 to i8*
  tail call void @_ZdlPv(i8* %22) #6
  br label %29

23:                                               ; preds = %2
  %24 = getelementptr inbounds %"class.cc::UIResourceRequest", %"class.cc::UIResourceRequest"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %25 = load %"class.cc::UIResourceBitmap"*, %"class.cc::UIResourceBitmap"** %24, align 8
  store %"class.cc::UIResourceBitmap"* null, %"class.cc::UIResourceBitmap"** %24, align 8
  %26 = icmp eq %"class.cc::UIResourceBitmap"* %25, null
  br i1 %26, label %29, label %27

27:                                               ; preds = %23
  tail call void @_ZN2cc16UIResourceBitmapD1Ev(%"class.cc::UIResourceBitmap"* nonnull %25) #7
  %28 = bitcast %"class.cc::UIResourceBitmap"* %25 to i8*
  tail call void @_ZdlPv(i8* %28) #6
  br label %29

29:                                               ; preds = %27, %23, %12, %21
  ret %"class.cc::UIResourceRequest"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc17UIResourceRequestD2Ev(%"class.cc::UIResourceRequest"* nocapture) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.cc::UIResourceRequest", %"class.cc::UIResourceRequest"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load %"class.cc::UIResourceBitmap"*, %"class.cc::UIResourceBitmap"** %2, align 8
  store %"class.cc::UIResourceBitmap"* null, %"class.cc::UIResourceBitmap"** %2, align 8
  %4 = icmp eq %"class.cc::UIResourceBitmap"* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  tail call void @_ZN2cc16UIResourceBitmapD1Ev(%"class.cc::UIResourceBitmap"* nonnull %3) #7
  %6 = bitcast %"class.cc::UIResourceBitmap"* %3 to i8*
  tail call void @_ZdlPv(i8* %6) #6
  br label %7

7:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind
declare void @_ZN2cc16UIResourceBitmapD1Ev(%"class.cc::UIResourceBitmap"*) unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { builtin nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
