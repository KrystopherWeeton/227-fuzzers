; ModuleID = '../../services/network/public/cpp/bfcache_opt_in_parser.cc'
source_filename = "../../services/network/public/cpp/bfcache_opt_in_parser.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.net::structured_headers::ParameterizedMember"*, %"struct.net::structured_headers::ParameterizedMember"*, %"class.std::__1::__compressed_pair.16" }
%"struct.net::structured_headers::ParameterizedMember" = type { %"class.std::__1::vector.0", i8, %"class.std::__1::vector.4" }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { %"struct.net::structured_headers::ParameterizedItem"*, %"struct.net::structured_headers::ParameterizedItem"*, %"class.std::__1::__compressed_pair.11" }
%"struct.net::structured_headers::ParameterizedItem" = type { %"class.net::structured_headers::Item", %"class.std::__1::vector.4" }
%"class.net::structured_headers::Item" = type <{ i32, [4 x i8], i64, %"class.std::__1::basic_string", double, i8, [7 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.2 }
%union.anon.2 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"struct.net::structured_headers::ParameterizedItem"* }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.6" }
%"struct.std::__1::pair" = type { %"class.std::__1::basic_string", %"class.net::structured_headers::Item" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.std::__1::pair"* }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.net::structured_headers::ParameterizedMember"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@.str = private unnamed_addr constant [7 x i8] c"unload\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7network23ParseBFCacheOptInUnloadEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(i8*, i64) local_unnamed_addr #0 {
  %3 = alloca %"class.absl::optional", align 8
  %4 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 32, i1 false)
  call void @_ZN3net18structured_headers9ParseListEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.absl::optional"* nonnull sret %3, i8* %0, i64 %1) #5
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %69, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %9 = load %"struct.net::structured_headers::ParameterizedMember"*, %"struct.net::structured_headers::ParameterizedMember"** %8, align 8
  %10 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %11 = load %"struct.net::structured_headers::ParameterizedMember"*, %"struct.net::structured_headers::ParameterizedMember"** %10, align 8
  %12 = icmp eq %"struct.net::structured_headers::ParameterizedMember"* %9, %11
  br i1 %12, label %48, label %13

13:                                               ; preds = %7, %41
  %14 = phi %"struct.net::structured_headers::ParameterizedMember"* [ %42, %41 ], [ %9, %7 ]
  %15 = getelementptr inbounds %"struct.net::structured_headers::ParameterizedMember", %"struct.net::structured_headers::ParameterizedMember"* %14, i64 0, i32 0, i32 0, i32 1
  %16 = bitcast %"struct.net::structured_headers::ParameterizedItem"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"struct.net::structured_headers::ParameterizedMember"* %14 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %17, %19
  %21 = icmp eq i64 %20, 80
  %22 = inttoptr i64 %19 to %"struct.net::structured_headers::ParameterizedItem"*
  br i1 %21, label %23, label %41

23:                                               ; preds = %13
  %24 = getelementptr inbounds %"struct.net::structured_headers::ParameterizedItem", %"struct.net::structured_headers::ParameterizedItem"* %22, i64 0, i32 0, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = icmp eq i32 %25, 4
  br i1 %26, label %27, label %41

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"struct.net::structured_headers::ParameterizedItem", %"struct.net::structured_headers::ParameterizedItem"* %22, i64 0, i32 0, i32 3
  %29 = bitcast %"class.std::__1::basic_string"* %28 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %30 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %29, i64 0, i32 1, i32 0
  %31 = load i8, i8* %30, align 1
  %32 = icmp slt i8 %31, 0
  %33 = getelementptr inbounds %"struct.net::structured_headers::ParameterizedItem", %"struct.net::structured_headers::ParameterizedItem"* %22, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = zext i8 %31 to i64
  %36 = select i1 %32, i64 %34, i64 %35
  %37 = icmp eq i64 %36, 6
  br i1 %37, label %38, label %41

38:                                               ; preds = %27
  %39 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %28, i64 0, i64 -1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i64 6) #5
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %44, label %41

41:                                               ; preds = %27, %38, %23, %13
  %42 = getelementptr inbounds %"struct.net::structured_headers::ParameterizedMember", %"struct.net::structured_headers::ParameterizedMember"* %14, i64 1
  %43 = icmp eq %"struct.net::structured_headers::ParameterizedMember"* %42, %11
  br i1 %43, label %44, label %13

44:                                               ; preds = %38, %41
  %45 = phi i1 [ false, %41 ], [ true, %38 ]
  %46 = load i8, i8* %4, align 8, !range !2
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %69, label %48

48:                                               ; preds = %7, %44
  %49 = phi i1 [ %45, %44 ], [ false, %7 ]
  %50 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %51 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %50, i64 0, i32 0, i32 0
  %52 = load %"struct.net::structured_headers::ParameterizedMember"*, %"struct.net::structured_headers::ParameterizedMember"** %51, align 8
  %53 = icmp eq %"struct.net::structured_headers::ParameterizedMember"* %52, null
  br i1 %53, label %68, label %54

54:                                               ; preds = %48
  %55 = bitcast %"struct.net::structured_headers::ParameterizedMember"* %52 to i8*
  %56 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %57 = load %"struct.net::structured_headers::ParameterizedMember"*, %"struct.net::structured_headers::ParameterizedMember"** %56, align 8
  %58 = icmp eq %"struct.net::structured_headers::ParameterizedMember"* %57, %52
  br i1 %58, label %66, label %59

59:                                               ; preds = %54, %59
  %60 = phi %"struct.net::structured_headers::ParameterizedMember"* [ %61, %59 ], [ %57, %54 ]
  %61 = getelementptr inbounds %"struct.net::structured_headers::ParameterizedMember", %"struct.net::structured_headers::ParameterizedMember"* %60, i64 -1
  call void @_ZN3net18structured_headers19ParameterizedMemberD1Ev(%"struct.net::structured_headers::ParameterizedMember"* %61) #5
  %62 = icmp eq %"struct.net::structured_headers::ParameterizedMember"* %61, %52
  br i1 %62, label %63, label %59

63:                                               ; preds = %59
  %64 = bitcast %"class.std::__1::vector"* %50 to i8**
  %65 = load i8*, i8** %64, align 8
  br label %66

66:                                               ; preds = %63, %54
  %67 = phi i8* [ %65, %63 ], [ %55, %54 ]
  store %"struct.net::structured_headers::ParameterizedMember"* %52, %"struct.net::structured_headers::ParameterizedMember"** %56, align 8
  call void @_ZdlPv(i8* %67) #6
  br label %68

68:                                               ; preds = %66, %48
  store i8 0, i8* %4, align 8
  br label %69

69:                                               ; preds = %2, %44, %68
  %70 = phi i1 [ %45, %44 ], [ %49, %68 ], [ false, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #5
  ret i1 %70
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN3net18structured_headers9ParseListEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.absl::optional"* sret, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare void @_ZN3net18structured_headers19ParameterizedMemberD1Ev(%"struct.net::structured_headers::ParameterizedMember"*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

declare i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"*, i64, i64, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
