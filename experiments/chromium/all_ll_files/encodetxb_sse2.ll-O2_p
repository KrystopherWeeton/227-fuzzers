; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/x86/encodetxb_sse2.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/x86/encodetxb_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@tx_size_wide = internal unnamed_addr constant [19 x i32] [i32 4, i32 8, i32 16, i32 32, i32 64, i32 4, i32 8, i32 8, i32 16, i32 16, i32 32, i32 32, i32 64, i32 4, i32 16, i32 8, i32 32, i32 16, i32 64], align 16
@tx_size_high = internal unnamed_addr constant [19 x i32] [i32 4, i32 8, i32 16, i32 32, i32 64, i32 8, i32 4, i32 16, i32 8, i32 32, i32 16, i32 64, i32 32, i32 16, i32 4, i32 32, i32 8, i32 64, i32 16], align 16
@tx_size_wide_log2 = internal unnamed_addr constant [19 x i32] [i32 2, i32 3, i32 4, i32 5, i32 6, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 2, i32 4, i32 3, i32 5, i32 4, i32 6], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_get_nz_map_contexts_sse2(i8* nocapture readonly, i16* nocapture readonly, i16 zeroext, i8 zeroext, i8 zeroext, i8* nocapture) local_unnamed_addr #0 {
  %7 = zext i16 %2 to i32
  %8 = add nsw i32 %7, -1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %6
  store i8 0, i8* %5, align 1
  br label %1298

11:                                               ; preds = %6
  %12 = zext i8 %3 to i64
  %13 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide, i64 0, i64 %12
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high, i64 0, i64 %12
  %16 = load i32, i32* %15, align 4
  switch i8 %3, label %17 [
    i8 4, label %18
    i8 12, label %18
    i8 11, label %18
    i8 18, label %22
    i8 17, label %24
  ]

17:                                               ; preds = %11
  br label %18

18:                                               ; preds = %11, %11, %11, %17
  %19 = phi i64 [ %12, %17 ], [ 3, %11 ], [ 3, %11 ], [ 3, %11 ]
  %20 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide, i64 0, i64 %19
  %21 = load i32, i32* %20, align 4
  switch i8 %3, label %26 [
    i8 4, label %27
    i8 12, label %27
    i8 11, label %27
    i8 18, label %22
    i8 17, label %24
  ]

22:                                               ; preds = %11, %18
  %23 = phi i32 [ %21, %18 ], [ 32, %11 ]
  br label %27

24:                                               ; preds = %11, %18
  %25 = phi i32 [ %21, %18 ], [ 16, %11 ]
  br label %27

26:                                               ; preds = %18
  br label %27

27:                                               ; preds = %18, %18, %18, %22, %24, %26
  %28 = phi i32 [ %21, %26 ], [ %25, %24 ], [ %23, %22 ], [ %21, %18 ], [ %21, %18 ], [ %21, %18 ]
  %29 = phi i64 [ %12, %26 ], [ 9, %24 ], [ 10, %22 ], [ 3, %18 ], [ 3, %18 ], [ 3, %18 ]
  %30 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high, i64 0, i64 %29
  %31 = load i32, i32* %30, align 4
  %32 = add nsw i32 %28, 4
  switch i8 %4, label %837 [
    i8 0, label %33
    i8 1, label %553
  ]

33:                                               ; preds = %27
  %34 = add nsw i32 %28, 5
  %35 = sext i32 %34 to i64
  %36 = shl nsw i32 %32, 1
  %37 = sext i32 %36 to i64
  switch i32 %28, label %436 [
    i32 4, label %38
    i32 8, label %262
  ]

38:                                               ; preds = %33
  %39 = lshr i64 16449, %29
  %40 = and i64 %39, 1
  %41 = icmp eq i64 %40, 0
  %42 = select i1 %41, <2 x i64> <i64 795741901218843392, i64 1519143565175096838>, <2 x i64> <i64 1514904926122541312, i64 1519143565175096838>
  %43 = bitcast <2 x i64> %42 to <16 x i8>
  %44 = getelementptr inbounds i8, i8* %0, i64 1
  %45 = bitcast i8* %44 to i32*
  %46 = load i32, i32* %45, align 1
  %47 = getelementptr inbounds i8, i8* %0, i64 9
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 1
  %50 = getelementptr inbounds i8, i8* %0, i64 17
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = getelementptr inbounds i8, i8* %0, i64 25
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 1
  %56 = insertelement <4 x i32> undef, i32 %46, i32 0
  %57 = insertelement <4 x i32> %56, i32 %49, i32 1
  %58 = insertelement <4 x i32> %57, i32 %52, i32 2
  %59 = insertelement <4 x i32> %58, i32 %55, i32 3
  %60 = getelementptr inbounds i8, i8* %0, i64 8
  %61 = bitcast i8* %60 to i32*
  %62 = load i32, i32* %61, align 1
  %63 = getelementptr inbounds i8, i8* %0, i64 16
  %64 = bitcast i8* %63 to i32*
  %65 = load i32, i32* %64, align 1
  %66 = getelementptr inbounds i8, i8* %0, i64 24
  %67 = bitcast i8* %66 to i32*
  %68 = load i32, i32* %67, align 1
  %69 = getelementptr inbounds i8, i8* %0, i64 32
  %70 = bitcast i8* %69 to i32*
  %71 = load i32, i32* %70, align 1
  %72 = insertelement <4 x i32> undef, i32 %62, i32 0
  %73 = insertelement <4 x i32> %72, i32 %65, i32 1
  %74 = insertelement <4 x i32> %73, i32 %68, i32 2
  %75 = insertelement <4 x i32> %74, i32 %71, i32 3
  %76 = getelementptr inbounds i8, i8* %0, i64 2
  %77 = bitcast i8* %76 to i32*
  %78 = load i32, i32* %77, align 1
  %79 = getelementptr inbounds i8, i8* %0, i64 10
  %80 = bitcast i8* %79 to i32*
  %81 = load i32, i32* %80, align 1
  %82 = getelementptr inbounds i8, i8* %0, i64 18
  %83 = bitcast i8* %82 to i32*
  %84 = load i32, i32* %83, align 1
  %85 = getelementptr inbounds i8, i8* %0, i64 26
  %86 = bitcast i8* %85 to i32*
  %87 = load i32, i32* %86, align 1
  %88 = insertelement <4 x i32> undef, i32 %78, i32 0
  %89 = insertelement <4 x i32> %88, i32 %81, i32 1
  %90 = insertelement <4 x i32> %89, i32 %84, i32 2
  %91 = insertelement <4 x i32> %90, i32 %87, i32 3
  %92 = getelementptr inbounds i8, i8* %0, i64 %35
  %93 = bitcast i8* %92 to i32*
  %94 = load i32, i32* %93, align 1
  %95 = getelementptr inbounds i8, i8* %92, i64 8
  %96 = bitcast i8* %95 to i32*
  %97 = load i32, i32* %96, align 1
  %98 = getelementptr inbounds i8, i8* %92, i64 16
  %99 = bitcast i8* %98 to i32*
  %100 = load i32, i32* %99, align 1
  %101 = getelementptr inbounds i8, i8* %92, i64 24
  %102 = bitcast i8* %101 to i32*
  %103 = load i32, i32* %102, align 1
  %104 = insertelement <4 x i32> undef, i32 %94, i32 0
  %105 = insertelement <4 x i32> %104, i32 %97, i32 1
  %106 = insertelement <4 x i32> %105, i32 %100, i32 2
  %107 = insertelement <4 x i32> %106, i32 %103, i32 3
  %108 = getelementptr inbounds i8, i8* %0, i64 %37
  %109 = bitcast i8* %108 to i32*
  %110 = load i32, i32* %109, align 1
  %111 = getelementptr inbounds i8, i8* %108, i64 8
  %112 = bitcast i8* %111 to i32*
  %113 = load i32, i32* %112, align 1
  %114 = getelementptr inbounds i8, i8* %108, i64 16
  %115 = bitcast i8* %114 to i32*
  %116 = load i32, i32* %115, align 1
  %117 = getelementptr inbounds i8, i8* %108, i64 24
  %118 = bitcast i8* %117 to i32*
  %119 = load i32, i32* %118, align 1
  %120 = insertelement <4 x i32> undef, i32 %110, i32 0
  %121 = insertelement <4 x i32> %120, i32 %113, i32 1
  %122 = insertelement <4 x i32> %121, i32 %116, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast <4 x i32> %59 to <16 x i8>
  %125 = icmp ult <16 x i8> %124, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %126 = select <16 x i1> %125, <16 x i8> %124, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %127 = bitcast <4 x i32> %75 to <16 x i8>
  %128 = icmp ult <16 x i8> %127, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %129 = select <16 x i1> %128, <16 x i8> %127, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %130 = bitcast <4 x i32> %91 to <16 x i8>
  %131 = icmp ult <16 x i8> %130, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %132 = select <16 x i1> %131, <16 x i8> %130, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %133 = bitcast <4 x i32> %107 to <16 x i8>
  %134 = icmp ult <16 x i8> %133, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %135 = select <16 x i1> %134, <16 x i8> %133, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %136 = bitcast <4 x i32> %123 to <16 x i8>
  %137 = icmp ult <16 x i8> %136, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %138 = select <16 x i1> %137, <16 x i8> %136, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %139 = add nuw nsw <16 x i8> %129, %126
  %140 = add nuw nsw <16 x i8> %139, %132
  %141 = add nuw nsw <16 x i8> %140, %135
  %142 = add nuw nsw <16 x i8> %141, %138
  %143 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %142, <16 x i8> zeroinitializer) #2
  %144 = icmp ult <16 x i8> %143, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %145 = select <16 x i1> %144, <16 x i8> %143, <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %146 = add <16 x i8> %145, %43
  %147 = bitcast i8* %5 to <16 x i8>*
  store <16 x i8> %146, <16 x i8>* %147, align 16
  %148 = add nsw i32 %31, -4
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %261, label %150

150:                                              ; preds = %38, %150
  %151 = phi i8* [ %180, %150 ], [ %69, %38 ]
  %152 = phi i8* [ %154, %150 ], [ %5, %38 ]
  %153 = phi i32 [ %259, %150 ], [ %148, %38 ]
  %154 = getelementptr inbounds i8, i8* %152, i64 16
  %155 = getelementptr inbounds i8, i8* %151, i64 1
  %156 = bitcast i8* %155 to i32*
  %157 = load i32, i32* %156, align 1
  %158 = getelementptr inbounds i8, i8* %151, i64 9
  %159 = bitcast i8* %158 to i32*
  %160 = load i32, i32* %159, align 1
  %161 = getelementptr inbounds i8, i8* %151, i64 17
  %162 = bitcast i8* %161 to i32*
  %163 = load i32, i32* %162, align 1
  %164 = getelementptr inbounds i8, i8* %151, i64 25
  %165 = bitcast i8* %164 to i32*
  %166 = load i32, i32* %165, align 1
  %167 = insertelement <4 x i32> undef, i32 %157, i32 0
  %168 = insertelement <4 x i32> %167, i32 %160, i32 1
  %169 = insertelement <4 x i32> %168, i32 %163, i32 2
  %170 = insertelement <4 x i32> %169, i32 %166, i32 3
  %171 = getelementptr inbounds i8, i8* %151, i64 8
  %172 = bitcast i8* %171 to i32*
  %173 = load i32, i32* %172, align 1
  %174 = getelementptr inbounds i8, i8* %151, i64 16
  %175 = bitcast i8* %174 to i32*
  %176 = load i32, i32* %175, align 1
  %177 = getelementptr inbounds i8, i8* %151, i64 24
  %178 = bitcast i8* %177 to i32*
  %179 = load i32, i32* %178, align 1
  %180 = getelementptr inbounds i8, i8* %151, i64 32
  %181 = bitcast i8* %180 to i32*
  %182 = load i32, i32* %181, align 1
  %183 = insertelement <4 x i32> undef, i32 %173, i32 0
  %184 = insertelement <4 x i32> %183, i32 %176, i32 1
  %185 = insertelement <4 x i32> %184, i32 %179, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = getelementptr inbounds i8, i8* %151, i64 2
  %188 = bitcast i8* %187 to i32*
  %189 = load i32, i32* %188, align 1
  %190 = getelementptr inbounds i8, i8* %151, i64 10
  %191 = bitcast i8* %190 to i32*
  %192 = load i32, i32* %191, align 1
  %193 = getelementptr inbounds i8, i8* %151, i64 18
  %194 = bitcast i8* %193 to i32*
  %195 = load i32, i32* %194, align 1
  %196 = getelementptr inbounds i8, i8* %151, i64 26
  %197 = bitcast i8* %196 to i32*
  %198 = load i32, i32* %197, align 1
  %199 = insertelement <4 x i32> undef, i32 %189, i32 0
  %200 = insertelement <4 x i32> %199, i32 %192, i32 1
  %201 = insertelement <4 x i32> %200, i32 %195, i32 2
  %202 = insertelement <4 x i32> %201, i32 %198, i32 3
  %203 = getelementptr inbounds i8, i8* %151, i64 %35
  %204 = bitcast i8* %203 to i32*
  %205 = load i32, i32* %204, align 1
  %206 = getelementptr inbounds i8, i8* %203, i64 8
  %207 = bitcast i8* %206 to i32*
  %208 = load i32, i32* %207, align 1
  %209 = getelementptr inbounds i8, i8* %203, i64 16
  %210 = bitcast i8* %209 to i32*
  %211 = load i32, i32* %210, align 1
  %212 = getelementptr inbounds i8, i8* %203, i64 24
  %213 = bitcast i8* %212 to i32*
  %214 = load i32, i32* %213, align 1
  %215 = insertelement <4 x i32> undef, i32 %205, i32 0
  %216 = insertelement <4 x i32> %215, i32 %208, i32 1
  %217 = insertelement <4 x i32> %216, i32 %211, i32 2
  %218 = insertelement <4 x i32> %217, i32 %214, i32 3
  %219 = getelementptr inbounds i8, i8* %151, i64 %37
  %220 = bitcast i8* %219 to i32*
  %221 = load i32, i32* %220, align 1
  %222 = getelementptr inbounds i8, i8* %219, i64 8
  %223 = bitcast i8* %222 to i32*
  %224 = load i32, i32* %223, align 1
  %225 = getelementptr inbounds i8, i8* %219, i64 16
  %226 = bitcast i8* %225 to i32*
  %227 = load i32, i32* %226, align 1
  %228 = getelementptr inbounds i8, i8* %219, i64 24
  %229 = bitcast i8* %228 to i32*
  %230 = load i32, i32* %229, align 1
  %231 = insertelement <4 x i32> undef, i32 %221, i32 0
  %232 = insertelement <4 x i32> %231, i32 %224, i32 1
  %233 = insertelement <4 x i32> %232, i32 %227, i32 2
  %234 = insertelement <4 x i32> %233, i32 %230, i32 3
  %235 = bitcast <4 x i32> %170 to <16 x i8>
  %236 = icmp ult <16 x i8> %235, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %237 = select <16 x i1> %236, <16 x i8> %235, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %238 = bitcast <4 x i32> %186 to <16 x i8>
  %239 = icmp ult <16 x i8> %238, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %240 = select <16 x i1> %239, <16 x i8> %238, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %241 = bitcast <4 x i32> %202 to <16 x i8>
  %242 = icmp ult <16 x i8> %241, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %243 = select <16 x i1> %242, <16 x i8> %241, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %244 = bitcast <4 x i32> %218 to <16 x i8>
  %245 = icmp ult <16 x i8> %244, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %246 = select <16 x i1> %245, <16 x i8> %244, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %247 = bitcast <4 x i32> %234 to <16 x i8>
  %248 = icmp ult <16 x i8> %247, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %249 = select <16 x i1> %248, <16 x i8> %247, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %250 = add nuw nsw <16 x i8> %240, %237
  %251 = add nuw nsw <16 x i8> %250, %243
  %252 = add nuw nsw <16 x i8> %251, %246
  %253 = add nuw nsw <16 x i8> %252, %249
  %254 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %253, <16 x i8> zeroinitializer) #2
  %255 = icmp ult <16 x i8> %254, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %256 = select <16 x i1> %255, <16 x i8> %254, <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %257 = add nuw nsw <16 x i8> %256, <i8 21, i8 21, i8 21, i8 21, i8 21, i8 21, i8 21, i8 21, i8 21, i8 21, i8 21, i8 21, i8 21, i8 21, i8 21, i8 21>
  %258 = bitcast i8* %154 to <16 x i8>*
  store <16 x i8> %257, <16 x i8>* %258, align 16
  %259 = add nsw i32 %153, -4
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %261, label %150, !llvm.loop !2

261:                                              ; preds = %150, %38
  store i8 0, i8* %5, align 1
  br label %1274

262:                                              ; preds = %33
  %263 = lshr i64 65826, %29
  %264 = and i64 %263, 1
  %265 = icmp eq i64 %264, 0
  br i1 %265, label %266, label %273

266:                                              ; preds = %262
  %267 = lshr i64 16449, %29
  %268 = and i64 %267, 1
  %269 = icmp ne i64 %268, 0
  %270 = select i1 %269, <2 x i64> <i64 1519143629599608848, i64 1519143629599608848>, <2 x i64> <i64 1519143629599606278, i64 1519143629599610118>
  %271 = select i1 %269, <2 x i64> <i64 1519143629346967552, i64 1519143629598625808>, <2 x i64> <i64 795741901218843392, i64 795741901218843403>
  %272 = bitcast <2 x i64> %271 to <16 x i8>
  br label %273

273:                                              ; preds = %262, %266
  %274 = phi <2 x i64> [ %270, %266 ], [ <i64 1519143629599606278, i64 1519143629599610118>, %262 ]
  %275 = phi <16 x i8> [ %272, %266 ], [ <i8 0, i8 1, i8 6, i8 6, i8 21, i8 21, i8 21, i8 21, i8 1, i8 6, i8 6, i8 21, i8 21, i8 21, i8 21, i8 21>, %262 ]
  %276 = getelementptr inbounds i8, i8* %0, i64 1
  %277 = bitcast i8* %276 to i64*
  %278 = load i64, i64* %277, align 1
  %279 = insertelement <2 x i64> undef, i64 %278, i32 0
  %280 = getelementptr inbounds i8, i8* %0, i64 13
  %281 = bitcast <2 x i64> %279 to <4 x float>
  %282 = bitcast i8* %280 to <2 x float>*
  %283 = load <2 x float>, <2 x float>* %282, align 1
  %284 = shufflevector <2 x float> %283, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %285 = shufflevector <4 x float> %281, <4 x float> %284, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %286 = bitcast <4 x float> %285 to <16 x i8>
  %287 = getelementptr inbounds i8, i8* %0, i64 12
  %288 = bitcast i8* %287 to i64*
  %289 = load i64, i64* %288, align 1
  %290 = insertelement <2 x i64> undef, i64 %289, i32 0
  %291 = getelementptr inbounds i8, i8* %0, i64 24
  %292 = bitcast <2 x i64> %290 to <4 x float>
  %293 = bitcast i8* %291 to <2 x float>*
  %294 = load <2 x float>, <2 x float>* %293, align 1
  %295 = shufflevector <2 x float> %294, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %296 = shufflevector <4 x float> %292, <4 x float> %295, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %297 = bitcast <4 x float> %296 to <16 x i8>
  %298 = getelementptr inbounds i8, i8* %0, i64 2
  %299 = bitcast i8* %298 to i64*
  %300 = load i64, i64* %299, align 1
  %301 = insertelement <2 x i64> undef, i64 %300, i32 0
  %302 = getelementptr inbounds i8, i8* %0, i64 14
  %303 = bitcast <2 x i64> %301 to <4 x float>
  %304 = bitcast i8* %302 to <2 x float>*
  %305 = load <2 x float>, <2 x float>* %304, align 1
  %306 = shufflevector <2 x float> %305, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %307 = shufflevector <4 x float> %303, <4 x float> %306, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %308 = bitcast <4 x float> %307 to <16 x i8>
  %309 = getelementptr inbounds i8, i8* %0, i64 %35
  %310 = bitcast i8* %309 to i64*
  %311 = load i64, i64* %310, align 1
  %312 = insertelement <2 x i64> undef, i64 %311, i32 0
  %313 = getelementptr inbounds i8, i8* %309, i64 12
  %314 = bitcast <2 x i64> %312 to <4 x float>
  %315 = bitcast i8* %313 to <2 x float>*
  %316 = load <2 x float>, <2 x float>* %315, align 1
  %317 = shufflevector <2 x float> %316, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %318 = shufflevector <4 x float> %314, <4 x float> %317, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %319 = bitcast <4 x float> %318 to <16 x i8>
  %320 = getelementptr inbounds i8, i8* %0, i64 %37
  %321 = bitcast i8* %320 to i64*
  %322 = load i64, i64* %321, align 1
  %323 = insertelement <2 x i64> undef, i64 %322, i32 0
  %324 = getelementptr inbounds i8, i8* %320, i64 12
  %325 = bitcast <2 x i64> %323 to <4 x float>
  %326 = bitcast i8* %324 to <2 x float>*
  %327 = load <2 x float>, <2 x float>* %326, align 1
  %328 = shufflevector <2 x float> %327, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %329 = shufflevector <4 x float> %325, <4 x float> %328, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %330 = bitcast <4 x float> %329 to <16 x i8>
  %331 = icmp ult <16 x i8> %286, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %332 = select <16 x i1> %331, <16 x i8> %286, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %333 = icmp ult <16 x i8> %297, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %334 = select <16 x i1> %333, <16 x i8> %297, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %335 = icmp ult <16 x i8> %308, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %336 = select <16 x i1> %335, <16 x i8> %308, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %337 = icmp ult <16 x i8> %319, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %338 = select <16 x i1> %337, <16 x i8> %319, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %339 = icmp ult <16 x i8> %330, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %340 = select <16 x i1> %339, <16 x i8> %330, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %341 = add nuw nsw <16 x i8> %334, %332
  %342 = add nuw nsw <16 x i8> %341, %336
  %343 = add nuw nsw <16 x i8> %342, %338
  %344 = add nuw nsw <16 x i8> %343, %340
  %345 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %344, <16 x i8> zeroinitializer) #2
  %346 = icmp ult <16 x i8> %345, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %347 = select <16 x i1> %346, <16 x i8> %345, <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %348 = add <16 x i8> %347, %275
  %349 = bitcast i8* %5 to <16 x i8>*
  store <16 x i8> %348, <16 x i8>* %349, align 16
  %350 = add nsw i32 %31, -2
  %351 = icmp eq i32 %350, 0
  br i1 %351, label %435, label %352

352:                                              ; preds = %273, %352
  %353 = phi i8* [ %373, %352 ], [ %291, %273 ]
  %354 = phi i8* [ %357, %352 ], [ %5, %273 ]
  %355 = phi i32 [ %433, %352 ], [ %350, %273 ]
  %356 = phi <2 x i64> [ <i64 1519143629599610133, i64 1519143629599610133>, %352 ], [ %274, %273 ]
  %357 = getelementptr inbounds i8, i8* %354, i64 16
  %358 = getelementptr inbounds i8, i8* %353, i64 1
  %359 = bitcast i8* %358 to i64*
  %360 = load i64, i64* %359, align 1
  %361 = insertelement <2 x i64> undef, i64 %360, i32 0
  %362 = getelementptr inbounds i8, i8* %353, i64 13
  %363 = bitcast <2 x i64> %361 to <4 x float>
  %364 = bitcast i8* %362 to <2 x float>*
  %365 = load <2 x float>, <2 x float>* %364, align 1
  %366 = shufflevector <2 x float> %365, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %367 = shufflevector <4 x float> %363, <4 x float> %366, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %368 = bitcast <4 x float> %367 to <16 x i8>
  %369 = getelementptr inbounds i8, i8* %353, i64 12
  %370 = bitcast i8* %369 to i64*
  %371 = load i64, i64* %370, align 1
  %372 = insertelement <2 x i64> undef, i64 %371, i32 0
  %373 = getelementptr inbounds i8, i8* %353, i64 24
  %374 = bitcast <2 x i64> %372 to <4 x float>
  %375 = bitcast i8* %373 to <2 x float>*
  %376 = load <2 x float>, <2 x float>* %375, align 1
  %377 = shufflevector <2 x float> %376, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %378 = shufflevector <4 x float> %374, <4 x float> %377, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %379 = bitcast <4 x float> %378 to <16 x i8>
  %380 = getelementptr inbounds i8, i8* %353, i64 2
  %381 = bitcast i8* %380 to i64*
  %382 = load i64, i64* %381, align 1
  %383 = insertelement <2 x i64> undef, i64 %382, i32 0
  %384 = getelementptr inbounds i8, i8* %353, i64 14
  %385 = bitcast <2 x i64> %383 to <4 x float>
  %386 = bitcast i8* %384 to <2 x float>*
  %387 = load <2 x float>, <2 x float>* %386, align 1
  %388 = shufflevector <2 x float> %387, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %389 = shufflevector <4 x float> %385, <4 x float> %388, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %390 = bitcast <4 x float> %389 to <16 x i8>
  %391 = getelementptr inbounds i8, i8* %353, i64 %35
  %392 = bitcast i8* %391 to i64*
  %393 = load i64, i64* %392, align 1
  %394 = insertelement <2 x i64> undef, i64 %393, i32 0
  %395 = getelementptr inbounds i8, i8* %391, i64 12
  %396 = bitcast <2 x i64> %394 to <4 x float>
  %397 = bitcast i8* %395 to <2 x float>*
  %398 = load <2 x float>, <2 x float>* %397, align 1
  %399 = shufflevector <2 x float> %398, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %400 = shufflevector <4 x float> %396, <4 x float> %399, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %401 = bitcast <4 x float> %400 to <16 x i8>
  %402 = getelementptr inbounds i8, i8* %353, i64 %37
  %403 = bitcast i8* %402 to i64*
  %404 = load i64, i64* %403, align 1
  %405 = insertelement <2 x i64> undef, i64 %404, i32 0
  %406 = getelementptr inbounds i8, i8* %402, i64 12
  %407 = bitcast <2 x i64> %405 to <4 x float>
  %408 = bitcast i8* %406 to <2 x float>*
  %409 = load <2 x float>, <2 x float>* %408, align 1
  %410 = shufflevector <2 x float> %409, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %411 = shufflevector <4 x float> %407, <4 x float> %410, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %412 = bitcast <4 x float> %411 to <16 x i8>
  %413 = icmp ult <16 x i8> %368, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %414 = select <16 x i1> %413, <16 x i8> %368, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %415 = icmp ult <16 x i8> %379, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %416 = select <16 x i1> %415, <16 x i8> %379, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %417 = icmp ult <16 x i8> %390, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %418 = select <16 x i1> %417, <16 x i8> %390, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %419 = icmp ult <16 x i8> %401, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %420 = select <16 x i1> %419, <16 x i8> %401, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %421 = icmp ult <16 x i8> %412, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %422 = select <16 x i1> %421, <16 x i8> %412, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %423 = add nuw nsw <16 x i8> %416, %414
  %424 = add nuw nsw <16 x i8> %423, %418
  %425 = add nuw nsw <16 x i8> %424, %420
  %426 = add nuw nsw <16 x i8> %425, %422
  %427 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %426, <16 x i8> zeroinitializer) #2
  %428 = icmp ult <16 x i8> %427, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %429 = select <16 x i1> %428, <16 x i8> %427, <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %430 = bitcast <2 x i64> %356 to <16 x i8>
  %431 = add <16 x i8> %429, %430
  %432 = bitcast i8* %357 to <16 x i8>*
  store <16 x i8> %431, <16 x i8>* %432, align 16
  %433 = add nsw i32 %355, -2
  %434 = icmp eq i32 %433, 0
  br i1 %434, label %435, label %352, !llvm.loop !4

435:                                              ; preds = %352, %273
  store i8 0, i8* %5, align 1
  br label %1274

436:                                              ; preds = %33
  %437 = icmp eq i32 %14, %16
  br i1 %437, label %446, label %438

438:                                              ; preds = %436
  %439 = icmp sgt i32 %14, %16
  %440 = select i1 %439, <2 x i64> <i64 1519143629599608848, i64 1519143629599610133>, <2 x i64> <i64 1519143629599610133, i64 1519143629599610133>
  %441 = select i1 %439, <2 x i64> <i64 1519143629599608848, i64 1519143629599610133>, <2 x i64> <i64 1519143629599610118, i64 1519143629599610133>
  %442 = select i1 %439, <2 x i64> <i64 1519143629599608848, i64 1519143629599610133>, <2 x i64> <i64 1519143629599606278, i64 1519143629599610133>
  %443 = select i1 %439, <2 x i64> <i64 1519143629598625808, i64 1519143629599610133>, <2 x i64> <i64 795741901218843403, i64 795741901218843403>
  %444 = select i1 %439, <2 x i64> <i64 1519143629346967552, i64 1519143629599610133>, <2 x i64> <i64 795741901218843403, i64 795741901218843403>
  %445 = select i1 %439, <2 x i64> <i64 1519143629599610133, i64 1519143629599610133>, <2 x i64> <i64 795741901218843403, i64 795741901218843403>
  br label %446

446:                                              ; preds = %438, %436
  %447 = phi <2 x i64> [ <i64 1519143629599610133, i64 1519143629599610133>, %436 ], [ %440, %438 ]
  %448 = phi <2 x i64> [ <i64 1519143629599610118, i64 1519143629599610133>, %436 ], [ %441, %438 ]
  %449 = phi <2 x i64> [ <i64 1519143629599606278, i64 1519143629599610133>, %436 ], [ %442, %438 ]
  %450 = phi <2 x i64> [ <i64 1519143629598623233, i64 1519143629599610133>, %436 ], [ %443, %438 ]
  %451 = phi <2 x i64> [ <i64 1519143629346963712, i64 1519143629599610133>, %436 ], [ %444, %438 ]
  %452 = phi <2 x i64> [ <i64 1519143629599610133, i64 1519143629599610133>, %436 ], [ %445, %438 ]
  %453 = sext i32 %32 to i64
  %454 = add nsw i32 %28, -16
  %455 = icmp eq i32 %454, 0
  br label %456

456:                                              ; preds = %546, %446
  %457 = phi i8* [ %0, %446 ], [ %549, %546 ]
  %458 = phi i8* [ %5, %446 ], [ %548, %546 ]
  %459 = phi i32 [ %31, %446 ], [ %550, %546 ]
  %460 = phi <2 x i64> [ %448, %446 ], [ %447, %546 ]
  %461 = phi <2 x i64> [ %449, %446 ], [ %460, %546 ]
  %462 = phi <2 x i64> [ %450, %446 ], [ %461, %546 ]
  %463 = phi <2 x i64> [ %451, %446 ], [ %462, %546 ]
  %464 = phi <2 x i64> [ %452, %446 ], [ <i64 1519143629599610133, i64 1519143629599610133>, %546 ]
  %465 = phi <2 x i64> [ %452, %446 ], [ %464, %546 ]
  %466 = getelementptr inbounds i8, i8* %457, i64 1
  %467 = bitcast i8* %466 to <16 x i8>*
  %468 = load <16 x i8>, <16 x i8>* %467, align 1
  %469 = getelementptr inbounds i8, i8* %457, i64 %453
  %470 = bitcast i8* %469 to <16 x i8>*
  %471 = load <16 x i8>, <16 x i8>* %470, align 1
  %472 = getelementptr inbounds i8, i8* %457, i64 2
  %473 = bitcast i8* %472 to <16 x i8>*
  %474 = load <16 x i8>, <16 x i8>* %473, align 1
  %475 = getelementptr inbounds i8, i8* %457, i64 %35
  %476 = bitcast i8* %475 to <16 x i8>*
  %477 = load <16 x i8>, <16 x i8>* %476, align 1
  %478 = getelementptr inbounds i8, i8* %457, i64 %37
  %479 = bitcast i8* %478 to <16 x i8>*
  %480 = load <16 x i8>, <16 x i8>* %479, align 1
  %481 = icmp ult <16 x i8> %468, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %482 = select <16 x i1> %481, <16 x i8> %468, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %483 = icmp ult <16 x i8> %471, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %484 = select <16 x i1> %483, <16 x i8> %471, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %485 = icmp ult <16 x i8> %474, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %486 = select <16 x i1> %485, <16 x i8> %474, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %487 = icmp ult <16 x i8> %477, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %488 = select <16 x i1> %487, <16 x i8> %477, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %489 = icmp ult <16 x i8> %480, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %490 = select <16 x i1> %489, <16 x i8> %480, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %491 = add nuw nsw <16 x i8> %484, %482
  %492 = add nuw nsw <16 x i8> %491, %486
  %493 = add nuw nsw <16 x i8> %492, %488
  %494 = add nuw nsw <16 x i8> %493, %490
  %495 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %494, <16 x i8> zeroinitializer) #2
  %496 = icmp ult <16 x i8> %495, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %497 = select <16 x i1> %496, <16 x i8> %495, <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %498 = bitcast <2 x i64> %463 to <16 x i8>
  %499 = add <16 x i8> %497, %498
  %500 = bitcast i8* %458 to <16 x i8>*
  store <16 x i8> %499, <16 x i8>* %500, align 16
  %501 = getelementptr inbounds i8, i8* %458, i64 16
  br i1 %455, label %546, label %502

502:                                              ; preds = %456
  %503 = bitcast <2 x i64> %465 to <16 x i8>
  br label %504

504:                                              ; preds = %504, %502
  %505 = phi i8* [ %457, %502 ], [ %508, %504 ]
  %506 = phi i8* [ %501, %502 ], [ %543, %504 ]
  %507 = phi i32 [ %454, %502 ], [ %544, %504 ]
  %508 = getelementptr inbounds i8, i8* %505, i64 16
  %509 = getelementptr inbounds i8, i8* %505, i64 17
  %510 = bitcast i8* %509 to <16 x i8>*
  %511 = load <16 x i8>, <16 x i8>* %510, align 1
  %512 = getelementptr inbounds i8, i8* %508, i64 %453
  %513 = bitcast i8* %512 to <16 x i8>*
  %514 = load <16 x i8>, <16 x i8>* %513, align 1
  %515 = getelementptr inbounds i8, i8* %505, i64 18
  %516 = bitcast i8* %515 to <16 x i8>*
  %517 = load <16 x i8>, <16 x i8>* %516, align 1
  %518 = getelementptr inbounds i8, i8* %508, i64 %35
  %519 = bitcast i8* %518 to <16 x i8>*
  %520 = load <16 x i8>, <16 x i8>* %519, align 1
  %521 = getelementptr inbounds i8, i8* %508, i64 %37
  %522 = bitcast i8* %521 to <16 x i8>*
  %523 = load <16 x i8>, <16 x i8>* %522, align 1
  %524 = icmp ult <16 x i8> %511, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %525 = select <16 x i1> %524, <16 x i8> %511, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %526 = icmp ult <16 x i8> %514, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %527 = select <16 x i1> %526, <16 x i8> %514, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %528 = icmp ult <16 x i8> %517, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %529 = select <16 x i1> %528, <16 x i8> %517, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %530 = icmp ult <16 x i8> %520, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %531 = select <16 x i1> %530, <16 x i8> %520, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %532 = icmp ult <16 x i8> %523, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %533 = select <16 x i1> %532, <16 x i8> %523, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %534 = add nuw nsw <16 x i8> %527, %525
  %535 = add nuw nsw <16 x i8> %534, %529
  %536 = add nuw nsw <16 x i8> %535, %531
  %537 = add nuw nsw <16 x i8> %536, %533
  %538 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %537, <16 x i8> zeroinitializer) #2
  %539 = icmp ult <16 x i8> %538, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %540 = select <16 x i1> %539, <16 x i8> %538, <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %541 = add <16 x i8> %540, %503
  %542 = bitcast i8* %506 to <16 x i8>*
  store <16 x i8> %541, <16 x i8>* %542, align 16
  %543 = getelementptr inbounds i8, i8* %506, i64 16
  %544 = add nsw i32 %507, -16
  %545 = icmp eq i32 %544, 0
  br i1 %545, label %546, label %504, !llvm.loop !5

546:                                              ; preds = %504, %456
  %547 = phi i8* [ %457, %456 ], [ %508, %504 ]
  %548 = phi i8* [ %501, %456 ], [ %543, %504 ]
  %549 = getelementptr inbounds i8, i8* %547, i64 20
  %550 = add nsw i32 %459, -1
  %551 = icmp eq i32 %550, 0
  br i1 %551, label %552, label %456

552:                                              ; preds = %546
  store i8 0, i8* %5, align 1
  br label %1274

553:                                              ; preds = %27
  switch i32 %28, label %746 [
    i32 4, label %554
    i32 8, label %665
  ]

554:                                              ; preds = %553, %554
  %555 = phi i8* [ %662, %554 ], [ %5, %553 ]
  %556 = phi i8* [ %583, %554 ], [ %0, %553 ]
  %557 = phi i32 [ %663, %554 ], [ %31, %553 ]
  %558 = getelementptr inbounds i8, i8* %556, i64 1
  %559 = bitcast i8* %558 to i32*
  %560 = load i32, i32* %559, align 1
  %561 = getelementptr inbounds i8, i8* %556, i64 9
  %562 = bitcast i8* %561 to i32*
  %563 = load i32, i32* %562, align 1
  %564 = getelementptr inbounds i8, i8* %556, i64 17
  %565 = bitcast i8* %564 to i32*
  %566 = load i32, i32* %565, align 1
  %567 = getelementptr inbounds i8, i8* %556, i64 25
  %568 = bitcast i8* %567 to i32*
  %569 = load i32, i32* %568, align 1
  %570 = insertelement <4 x i32> undef, i32 %560, i32 0
  %571 = insertelement <4 x i32> %570, i32 %563, i32 1
  %572 = insertelement <4 x i32> %571, i32 %566, i32 2
  %573 = insertelement <4 x i32> %572, i32 %569, i32 3
  %574 = getelementptr inbounds i8, i8* %556, i64 8
  %575 = bitcast i8* %574 to i32*
  %576 = load i32, i32* %575, align 1
  %577 = getelementptr inbounds i8, i8* %556, i64 16
  %578 = bitcast i8* %577 to i32*
  %579 = load i32, i32* %578, align 1
  %580 = getelementptr inbounds i8, i8* %556, i64 24
  %581 = bitcast i8* %580 to i32*
  %582 = load i32, i32* %581, align 1
  %583 = getelementptr inbounds i8, i8* %556, i64 32
  %584 = bitcast i8* %583 to i32*
  %585 = load i32, i32* %584, align 1
  %586 = insertelement <4 x i32> undef, i32 %576, i32 0
  %587 = insertelement <4 x i32> %586, i32 %579, i32 1
  %588 = insertelement <4 x i32> %587, i32 %582, i32 2
  %589 = insertelement <4 x i32> %588, i32 %585, i32 3
  %590 = getelementptr inbounds i8, i8* %556, i64 2
  %591 = bitcast i8* %590 to i32*
  %592 = load i32, i32* %591, align 1
  %593 = getelementptr inbounds i8, i8* %556, i64 10
  %594 = bitcast i8* %593 to i32*
  %595 = load i32, i32* %594, align 1
  %596 = getelementptr inbounds i8, i8* %556, i64 18
  %597 = bitcast i8* %596 to i32*
  %598 = load i32, i32* %597, align 1
  %599 = getelementptr inbounds i8, i8* %556, i64 26
  %600 = bitcast i8* %599 to i32*
  %601 = load i32, i32* %600, align 1
  %602 = insertelement <4 x i32> undef, i32 %592, i32 0
  %603 = insertelement <4 x i32> %602, i32 %595, i32 1
  %604 = insertelement <4 x i32> %603, i32 %598, i32 2
  %605 = insertelement <4 x i32> %604, i32 %601, i32 3
  %606 = getelementptr inbounds i8, i8* %556, i64 3
  %607 = bitcast i8* %606 to i32*
  %608 = load i32, i32* %607, align 1
  %609 = getelementptr inbounds i8, i8* %556, i64 11
  %610 = bitcast i8* %609 to i32*
  %611 = load i32, i32* %610, align 1
  %612 = getelementptr inbounds i8, i8* %556, i64 19
  %613 = bitcast i8* %612 to i32*
  %614 = load i32, i32* %613, align 1
  %615 = getelementptr inbounds i8, i8* %556, i64 27
  %616 = bitcast i8* %615 to i32*
  %617 = load i32, i32* %616, align 1
  %618 = insertelement <4 x i32> undef, i32 %608, i32 0
  %619 = insertelement <4 x i32> %618, i32 %611, i32 1
  %620 = insertelement <4 x i32> %619, i32 %614, i32 2
  %621 = insertelement <4 x i32> %620, i32 %617, i32 3
  %622 = getelementptr inbounds i8, i8* %556, i64 4
  %623 = bitcast i8* %622 to i32*
  %624 = load i32, i32* %623, align 1
  %625 = getelementptr inbounds i8, i8* %556, i64 12
  %626 = bitcast i8* %625 to i32*
  %627 = load i32, i32* %626, align 1
  %628 = getelementptr inbounds i8, i8* %556, i64 20
  %629 = bitcast i8* %628 to i32*
  %630 = load i32, i32* %629, align 1
  %631 = getelementptr inbounds i8, i8* %556, i64 28
  %632 = bitcast i8* %631 to i32*
  %633 = load i32, i32* %632, align 1
  %634 = insertelement <4 x i32> undef, i32 %624, i32 0
  %635 = insertelement <4 x i32> %634, i32 %627, i32 1
  %636 = insertelement <4 x i32> %635, i32 %630, i32 2
  %637 = insertelement <4 x i32> %636, i32 %633, i32 3
  %638 = bitcast <4 x i32> %573 to <16 x i8>
  %639 = icmp ult <16 x i8> %638, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %640 = select <16 x i1> %639, <16 x i8> %638, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %641 = bitcast <4 x i32> %589 to <16 x i8>
  %642 = icmp ult <16 x i8> %641, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %643 = select <16 x i1> %642, <16 x i8> %641, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %644 = bitcast <4 x i32> %605 to <16 x i8>
  %645 = icmp ult <16 x i8> %644, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %646 = select <16 x i1> %645, <16 x i8> %644, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %647 = bitcast <4 x i32> %621 to <16 x i8>
  %648 = icmp ult <16 x i8> %647, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %649 = select <16 x i1> %648, <16 x i8> %647, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %650 = bitcast <4 x i32> %637 to <16 x i8>
  %651 = icmp ult <16 x i8> %650, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %652 = select <16 x i1> %651, <16 x i8> %650, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %653 = add nuw nsw <16 x i8> %643, %640
  %654 = add nuw nsw <16 x i8> %653, %646
  %655 = add nuw nsw <16 x i8> %654, %649
  %656 = add nuw nsw <16 x i8> %655, %652
  %657 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %656, <16 x i8> zeroinitializer) #2
  %658 = icmp ult <16 x i8> %657, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %659 = select <16 x i1> %658, <16 x i8> %657, <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %660 = add nuw nsw <16 x i8> %659, <i8 26, i8 31, i8 36, i8 36, i8 26, i8 31, i8 36, i8 36, i8 26, i8 31, i8 36, i8 36, i8 26, i8 31, i8 36, i8 36>
  %661 = bitcast i8* %555 to <16 x i8>*
  store <16 x i8> %660, <16 x i8>* %661, align 16
  %662 = getelementptr inbounds i8, i8* %555, i64 16
  %663 = add nsw i32 %557, -4
  %664 = icmp eq i32 %663, 0
  br i1 %664, label %1274, label %554

665:                                              ; preds = %553, %665
  %666 = phi i8* [ %743, %665 ], [ %5, %553 ]
  %667 = phi i8* [ %684, %665 ], [ %0, %553 ]
  %668 = phi i32 [ %744, %665 ], [ %31, %553 ]
  %669 = getelementptr inbounds i8, i8* %667, i64 1
  %670 = bitcast i8* %669 to i64*
  %671 = load i64, i64* %670, align 1
  %672 = insertelement <2 x i64> undef, i64 %671, i32 0
  %673 = getelementptr inbounds i8, i8* %667, i64 13
  %674 = bitcast <2 x i64> %672 to <4 x float>
  %675 = bitcast i8* %673 to <2 x float>*
  %676 = load <2 x float>, <2 x float>* %675, align 1
  %677 = shufflevector <2 x float> %676, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %678 = shufflevector <4 x float> %674, <4 x float> %677, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %679 = bitcast <4 x float> %678 to <16 x i8>
  %680 = getelementptr inbounds i8, i8* %667, i64 12
  %681 = bitcast i8* %680 to i64*
  %682 = load i64, i64* %681, align 1
  %683 = insertelement <2 x i64> undef, i64 %682, i32 0
  %684 = getelementptr inbounds i8, i8* %667, i64 24
  %685 = bitcast <2 x i64> %683 to <4 x float>
  %686 = bitcast i8* %684 to <2 x float>*
  %687 = load <2 x float>, <2 x float>* %686, align 1
  %688 = shufflevector <2 x float> %687, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %689 = shufflevector <4 x float> %685, <4 x float> %688, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %690 = bitcast <4 x float> %689 to <16 x i8>
  %691 = getelementptr inbounds i8, i8* %667, i64 2
  %692 = bitcast i8* %691 to i64*
  %693 = load i64, i64* %692, align 1
  %694 = insertelement <2 x i64> undef, i64 %693, i32 0
  %695 = getelementptr inbounds i8, i8* %667, i64 14
  %696 = bitcast <2 x i64> %694 to <4 x float>
  %697 = bitcast i8* %695 to <2 x float>*
  %698 = load <2 x float>, <2 x float>* %697, align 1
  %699 = shufflevector <2 x float> %698, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %700 = shufflevector <4 x float> %696, <4 x float> %699, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %701 = bitcast <4 x float> %700 to <16 x i8>
  %702 = getelementptr inbounds i8, i8* %667, i64 3
  %703 = bitcast i8* %702 to i64*
  %704 = load i64, i64* %703, align 1
  %705 = insertelement <2 x i64> undef, i64 %704, i32 0
  %706 = getelementptr inbounds i8, i8* %667, i64 15
  %707 = bitcast <2 x i64> %705 to <4 x float>
  %708 = bitcast i8* %706 to <2 x float>*
  %709 = load <2 x float>, <2 x float>* %708, align 1
  %710 = shufflevector <2 x float> %709, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %711 = shufflevector <4 x float> %707, <4 x float> %710, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %712 = bitcast <4 x float> %711 to <16 x i8>
  %713 = getelementptr inbounds i8, i8* %667, i64 4
  %714 = bitcast i8* %713 to i64*
  %715 = load i64, i64* %714, align 1
  %716 = insertelement <2 x i64> undef, i64 %715, i32 0
  %717 = getelementptr inbounds i8, i8* %667, i64 16
  %718 = bitcast <2 x i64> %716 to <4 x float>
  %719 = bitcast i8* %717 to <2 x float>*
  %720 = load <2 x float>, <2 x float>* %719, align 1
  %721 = shufflevector <2 x float> %720, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %722 = shufflevector <4 x float> %718, <4 x float> %721, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %723 = bitcast <4 x float> %722 to <16 x i8>
  %724 = icmp ult <16 x i8> %679, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %725 = select <16 x i1> %724, <16 x i8> %679, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %726 = icmp ult <16 x i8> %690, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %727 = select <16 x i1> %726, <16 x i8> %690, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %728 = icmp ult <16 x i8> %701, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %729 = select <16 x i1> %728, <16 x i8> %701, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %730 = icmp ult <16 x i8> %712, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %731 = select <16 x i1> %730, <16 x i8> %712, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %732 = icmp ult <16 x i8> %723, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %733 = select <16 x i1> %732, <16 x i8> %723, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %734 = add nuw nsw <16 x i8> %727, %725
  %735 = add nuw nsw <16 x i8> %734, %729
  %736 = add nuw nsw <16 x i8> %735, %731
  %737 = add nuw nsw <16 x i8> %736, %733
  %738 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %737, <16 x i8> zeroinitializer) #2
  %739 = icmp ult <16 x i8> %738, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %740 = select <16 x i1> %739, <16 x i8> %738, <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %741 = add nuw nsw <16 x i8> %740, <i8 26, i8 31, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 26, i8 31, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36>
  %742 = bitcast i8* %666 to <16 x i8>*
  store <16 x i8> %741, <16 x i8>* %742, align 16
  %743 = getelementptr inbounds i8, i8* %666, i64 16
  %744 = add nsw i32 %668, -2
  %745 = icmp eq i32 %744, 0
  br i1 %745, label %1274, label %665

746:                                              ; preds = %553
  %747 = sext i32 %32 to i64
  %748 = add nsw i32 %28, -16
  %749 = icmp eq i32 %748, 0
  br label %750

750:                                              ; preds = %831, %746
  %751 = phi i8* [ %0, %746 ], [ %834, %831 ]
  %752 = phi i8* [ %5, %746 ], [ %833, %831 ]
  %753 = phi i32 [ %31, %746 ], [ %835, %831 ]
  %754 = getelementptr inbounds i8, i8* %751, i64 1
  %755 = bitcast i8* %754 to <16 x i8>*
  %756 = load <16 x i8>, <16 x i8>* %755, align 1
  %757 = getelementptr inbounds i8, i8* %751, i64 %747
  %758 = bitcast i8* %757 to <16 x i8>*
  %759 = load <16 x i8>, <16 x i8>* %758, align 1
  %760 = getelementptr inbounds i8, i8* %751, i64 2
  %761 = bitcast i8* %760 to <16 x i8>*
  %762 = load <16 x i8>, <16 x i8>* %761, align 1
  %763 = getelementptr inbounds i8, i8* %751, i64 3
  %764 = bitcast i8* %763 to <16 x i8>*
  %765 = load <16 x i8>, <16 x i8>* %764, align 1
  %766 = getelementptr inbounds i8, i8* %751, i64 4
  %767 = bitcast i8* %766 to <16 x i8>*
  %768 = load <16 x i8>, <16 x i8>* %767, align 1
  %769 = icmp ult <16 x i8> %756, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %770 = select <16 x i1> %769, <16 x i8> %756, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %771 = icmp ult <16 x i8> %759, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %772 = select <16 x i1> %771, <16 x i8> %759, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %773 = icmp ult <16 x i8> %762, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %774 = select <16 x i1> %773, <16 x i8> %762, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %775 = icmp ult <16 x i8> %765, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %776 = select <16 x i1> %775, <16 x i8> %765, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %777 = icmp ult <16 x i8> %768, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %778 = select <16 x i1> %777, <16 x i8> %768, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %779 = add nuw nsw <16 x i8> %772, %770
  %780 = add nuw nsw <16 x i8> %779, %774
  %781 = add nuw nsw <16 x i8> %780, %776
  %782 = add nuw nsw <16 x i8> %781, %778
  %783 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %782, <16 x i8> zeroinitializer) #2
  %784 = icmp ult <16 x i8> %783, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %785 = select <16 x i1> %784, <16 x i8> %783, <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %786 = add nuw nsw <16 x i8> %785, <i8 26, i8 31, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36>
  %787 = bitcast i8* %752 to <16 x i8>*
  store <16 x i8> %786, <16 x i8>* %787, align 16
  %788 = getelementptr inbounds i8, i8* %752, i64 16
  br i1 %749, label %831, label %789

789:                                              ; preds = %750, %789
  %790 = phi i8* [ %793, %789 ], [ %751, %750 ]
  %791 = phi i8* [ %828, %789 ], [ %788, %750 ]
  %792 = phi i32 [ %829, %789 ], [ %748, %750 ]
  %793 = getelementptr inbounds i8, i8* %790, i64 16
  %794 = getelementptr inbounds i8, i8* %790, i64 17
  %795 = bitcast i8* %794 to <16 x i8>*
  %796 = load <16 x i8>, <16 x i8>* %795, align 1
  %797 = getelementptr inbounds i8, i8* %793, i64 %747
  %798 = bitcast i8* %797 to <16 x i8>*
  %799 = load <16 x i8>, <16 x i8>* %798, align 1
  %800 = getelementptr inbounds i8, i8* %790, i64 18
  %801 = bitcast i8* %800 to <16 x i8>*
  %802 = load <16 x i8>, <16 x i8>* %801, align 1
  %803 = getelementptr inbounds i8, i8* %790, i64 19
  %804 = bitcast i8* %803 to <16 x i8>*
  %805 = load <16 x i8>, <16 x i8>* %804, align 1
  %806 = getelementptr inbounds i8, i8* %790, i64 20
  %807 = bitcast i8* %806 to <16 x i8>*
  %808 = load <16 x i8>, <16 x i8>* %807, align 1
  %809 = icmp ult <16 x i8> %796, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %810 = select <16 x i1> %809, <16 x i8> %796, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %811 = icmp ult <16 x i8> %799, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %812 = select <16 x i1> %811, <16 x i8> %799, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %813 = icmp ult <16 x i8> %802, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %814 = select <16 x i1> %813, <16 x i8> %802, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %815 = icmp ult <16 x i8> %805, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %816 = select <16 x i1> %815, <16 x i8> %805, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %817 = icmp ult <16 x i8> %808, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %818 = select <16 x i1> %817, <16 x i8> %808, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %819 = add nuw nsw <16 x i8> %812, %810
  %820 = add nuw nsw <16 x i8> %819, %814
  %821 = add nuw nsw <16 x i8> %820, %816
  %822 = add nuw nsw <16 x i8> %821, %818
  %823 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %822, <16 x i8> zeroinitializer) #2
  %824 = icmp ult <16 x i8> %823, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %825 = select <16 x i1> %824, <16 x i8> %823, <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %826 = add nuw nsw <16 x i8> %825, <i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36>
  %827 = bitcast i8* %791 to <16 x i8>*
  store <16 x i8> %826, <16 x i8>* %827, align 16
  %828 = getelementptr inbounds i8, i8* %791, i64 16
  %829 = add nsw i32 %792, -16
  %830 = icmp eq i32 %829, 0
  br i1 %830, label %831, label %789, !llvm.loop !6

831:                                              ; preds = %789, %750
  %832 = phi i8* [ %751, %750 ], [ %793, %789 ]
  %833 = phi i8* [ %788, %750 ], [ %828, %789 ]
  %834 = getelementptr inbounds i8, i8* %832, i64 20
  %835 = add nsw i32 %753, -1
  %836 = icmp eq i32 %835, 0
  br i1 %836, label %1274, label %750

837:                                              ; preds = %27
  %838 = shl nsw i32 %32, 1
  %839 = sext i32 %838 to i64
  %840 = mul nsw i32 %32, 3
  %841 = sext i32 %840 to i64
  %842 = shl nsw i32 %32, 2
  %843 = sext i32 %842 to i64
  switch i32 %28, label %1220 [
    i32 4, label %921
    i32 8, label %844
  ]

844:                                              ; preds = %837
  %845 = getelementptr inbounds i8, i8* %0, i64 1
  %846 = bitcast i8* %845 to i64*
  %847 = load i64, i64* %846, align 1
  %848 = insertelement <2 x i64> undef, i64 %847, i32 0
  %849 = getelementptr inbounds i8, i8* %0, i64 13
  %850 = bitcast <2 x i64> %848 to <4 x float>
  %851 = bitcast i8* %849 to <2 x float>*
  %852 = load <2 x float>, <2 x float>* %851, align 1
  %853 = shufflevector <2 x float> %852, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %854 = shufflevector <4 x float> %850, <4 x float> %853, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %855 = bitcast <4 x float> %854 to <16 x i8>
  %856 = getelementptr inbounds i8, i8* %0, i64 12
  %857 = bitcast i8* %856 to i64*
  %858 = load i64, i64* %857, align 1
  %859 = insertelement <2 x i64> undef, i64 %858, i32 0
  %860 = getelementptr inbounds i8, i8* %0, i64 24
  %861 = bitcast <2 x i64> %859 to <4 x float>
  %862 = bitcast i8* %860 to <2 x float>*
  %863 = load <2 x float>, <2 x float>* %862, align 1
  %864 = shufflevector <2 x float> %863, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %865 = shufflevector <4 x float> %861, <4 x float> %864, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %866 = bitcast <4 x float> %865 to <16 x i8>
  %867 = getelementptr inbounds i8, i8* %0, i64 %839
  %868 = bitcast i8* %867 to i64*
  %869 = load i64, i64* %868, align 1
  %870 = insertelement <2 x i64> undef, i64 %869, i32 0
  %871 = getelementptr inbounds i8, i8* %867, i64 12
  %872 = bitcast <2 x i64> %870 to <4 x float>
  %873 = bitcast i8* %871 to <2 x float>*
  %874 = load <2 x float>, <2 x float>* %873, align 1
  %875 = shufflevector <2 x float> %874, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %876 = shufflevector <4 x float> %872, <4 x float> %875, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %877 = bitcast <4 x float> %876 to <16 x i8>
  %878 = getelementptr inbounds i8, i8* %0, i64 %841
  %879 = bitcast i8* %878 to i64*
  %880 = load i64, i64* %879, align 1
  %881 = insertelement <2 x i64> undef, i64 %880, i32 0
  %882 = getelementptr inbounds i8, i8* %878, i64 12
  %883 = bitcast <2 x i64> %881 to <4 x float>
  %884 = bitcast i8* %882 to <2 x float>*
  %885 = load <2 x float>, <2 x float>* %884, align 1
  %886 = shufflevector <2 x float> %885, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %887 = shufflevector <4 x float> %883, <4 x float> %886, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %888 = bitcast <4 x float> %887 to <16 x i8>
  %889 = getelementptr inbounds i8, i8* %0, i64 %843
  %890 = bitcast i8* %889 to i64*
  %891 = load i64, i64* %890, align 1
  %892 = insertelement <2 x i64> undef, i64 %891, i32 0
  %893 = getelementptr inbounds i8, i8* %889, i64 12
  %894 = bitcast <2 x i64> %892 to <4 x float>
  %895 = bitcast i8* %893 to <2 x float>*
  %896 = load <2 x float>, <2 x float>* %895, align 1
  %897 = shufflevector <2 x float> %896, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %898 = shufflevector <4 x float> %894, <4 x float> %897, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %899 = bitcast <4 x float> %898 to <16 x i8>
  %900 = icmp ult <16 x i8> %855, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %901 = select <16 x i1> %900, <16 x i8> %855, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %902 = icmp ult <16 x i8> %866, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %903 = select <16 x i1> %902, <16 x i8> %866, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %904 = icmp ult <16 x i8> %877, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %905 = select <16 x i1> %904, <16 x i8> %877, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %906 = icmp ult <16 x i8> %888, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %907 = select <16 x i1> %906, <16 x i8> %888, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %908 = icmp ult <16 x i8> %899, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %909 = select <16 x i1> %908, <16 x i8> %899, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %910 = add nuw nsw <16 x i8> %903, %901
  %911 = add nuw nsw <16 x i8> %910, %905
  %912 = add nuw nsw <16 x i8> %911, %907
  %913 = add nuw nsw <16 x i8> %912, %909
  %914 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %913, <16 x i8> zeroinitializer) #2
  %915 = icmp ult <16 x i8> %914, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %916 = select <16 x i1> %915, <16 x i8> %914, <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %917 = add nuw nsw <16 x i8> %916, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 31, i8 31, i8 31, i8 31, i8 31, i8 31, i8 31, i8 31>
  %918 = bitcast i8* %5 to <16 x i8>*
  store <16 x i8> %917, <16 x i8>* %918, align 16
  %919 = add nsw i32 %31, -2
  %920 = icmp eq i32 %919, 0
  br i1 %920, label %1274, label %1139

921:                                              ; preds = %837
  %922 = getelementptr inbounds i8, i8* %0, i64 1
  %923 = bitcast i8* %922 to i32*
  %924 = load i32, i32* %923, align 1
  %925 = getelementptr inbounds i8, i8* %0, i64 9
  %926 = bitcast i8* %925 to i32*
  %927 = load i32, i32* %926, align 1
  %928 = getelementptr inbounds i8, i8* %0, i64 17
  %929 = bitcast i8* %928 to i32*
  %930 = load i32, i32* %929, align 1
  %931 = getelementptr inbounds i8, i8* %0, i64 25
  %932 = bitcast i8* %931 to i32*
  %933 = load i32, i32* %932, align 1
  %934 = insertelement <4 x i32> undef, i32 %924, i32 0
  %935 = insertelement <4 x i32> %934, i32 %927, i32 1
  %936 = insertelement <4 x i32> %935, i32 %930, i32 2
  %937 = insertelement <4 x i32> %936, i32 %933, i32 3
  %938 = getelementptr inbounds i8, i8* %0, i64 8
  %939 = bitcast i8* %938 to i32*
  %940 = load i32, i32* %939, align 1
  %941 = getelementptr inbounds i8, i8* %0, i64 16
  %942 = bitcast i8* %941 to i32*
  %943 = load i32, i32* %942, align 1
  %944 = getelementptr inbounds i8, i8* %0, i64 24
  %945 = bitcast i8* %944 to i32*
  %946 = load i32, i32* %945, align 1
  %947 = getelementptr inbounds i8, i8* %0, i64 32
  %948 = bitcast i8* %947 to i32*
  %949 = load i32, i32* %948, align 1
  %950 = insertelement <4 x i32> undef, i32 %940, i32 0
  %951 = insertelement <4 x i32> %950, i32 %943, i32 1
  %952 = insertelement <4 x i32> %951, i32 %946, i32 2
  %953 = insertelement <4 x i32> %952, i32 %949, i32 3
  %954 = getelementptr inbounds i8, i8* %0, i64 %839
  %955 = bitcast i8* %954 to i32*
  %956 = load i32, i32* %955, align 1
  %957 = getelementptr inbounds i8, i8* %954, i64 8
  %958 = bitcast i8* %957 to i32*
  %959 = load i32, i32* %958, align 1
  %960 = getelementptr inbounds i8, i8* %954, i64 16
  %961 = bitcast i8* %960 to i32*
  %962 = load i32, i32* %961, align 1
  %963 = getelementptr inbounds i8, i8* %954, i64 24
  %964 = bitcast i8* %963 to i32*
  %965 = load i32, i32* %964, align 1
  %966 = insertelement <4 x i32> undef, i32 %956, i32 0
  %967 = insertelement <4 x i32> %966, i32 %959, i32 1
  %968 = insertelement <4 x i32> %967, i32 %962, i32 2
  %969 = insertelement <4 x i32> %968, i32 %965, i32 3
  %970 = getelementptr inbounds i8, i8* %0, i64 %841
  %971 = bitcast i8* %970 to i32*
  %972 = load i32, i32* %971, align 1
  %973 = getelementptr inbounds i8, i8* %970, i64 8
  %974 = bitcast i8* %973 to i32*
  %975 = load i32, i32* %974, align 1
  %976 = getelementptr inbounds i8, i8* %970, i64 16
  %977 = bitcast i8* %976 to i32*
  %978 = load i32, i32* %977, align 1
  %979 = getelementptr inbounds i8, i8* %970, i64 24
  %980 = bitcast i8* %979 to i32*
  %981 = load i32, i32* %980, align 1
  %982 = insertelement <4 x i32> undef, i32 %972, i32 0
  %983 = insertelement <4 x i32> %982, i32 %975, i32 1
  %984 = insertelement <4 x i32> %983, i32 %978, i32 2
  %985 = insertelement <4 x i32> %984, i32 %981, i32 3
  %986 = getelementptr inbounds i8, i8* %0, i64 %843
  %987 = bitcast i8* %986 to i32*
  %988 = load i32, i32* %987, align 1
  %989 = getelementptr inbounds i8, i8* %986, i64 8
  %990 = bitcast i8* %989 to i32*
  %991 = load i32, i32* %990, align 1
  %992 = getelementptr inbounds i8, i8* %986, i64 16
  %993 = bitcast i8* %992 to i32*
  %994 = load i32, i32* %993, align 1
  %995 = getelementptr inbounds i8, i8* %986, i64 24
  %996 = bitcast i8* %995 to i32*
  %997 = load i32, i32* %996, align 1
  %998 = insertelement <4 x i32> undef, i32 %988, i32 0
  %999 = insertelement <4 x i32> %998, i32 %991, i32 1
  %1000 = insertelement <4 x i32> %999, i32 %994, i32 2
  %1001 = insertelement <4 x i32> %1000, i32 %997, i32 3
  %1002 = bitcast <4 x i32> %937 to <16 x i8>
  %1003 = icmp ult <16 x i8> %1002, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1004 = select <16 x i1> %1003, <16 x i8> %1002, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1005 = bitcast <4 x i32> %953 to <16 x i8>
  %1006 = icmp ult <16 x i8> %1005, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1007 = select <16 x i1> %1006, <16 x i8> %1005, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1008 = bitcast <4 x i32> %969 to <16 x i8>
  %1009 = icmp ult <16 x i8> %1008, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1010 = select <16 x i1> %1009, <16 x i8> %1008, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1011 = bitcast <4 x i32> %985 to <16 x i8>
  %1012 = icmp ult <16 x i8> %1011, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1013 = select <16 x i1> %1012, <16 x i8> %1011, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1014 = bitcast <4 x i32> %1001 to <16 x i8>
  %1015 = icmp ult <16 x i8> %1014, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1016 = select <16 x i1> %1015, <16 x i8> %1014, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1017 = add nuw nsw <16 x i8> %1007, %1004
  %1018 = add nuw nsw <16 x i8> %1017, %1010
  %1019 = add nuw nsw <16 x i8> %1018, %1013
  %1020 = add nuw nsw <16 x i8> %1019, %1016
  %1021 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %1020, <16 x i8> zeroinitializer) #2
  %1022 = icmp ult <16 x i8> %1021, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %1023 = select <16 x i1> %1022, <16 x i8> %1021, <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %1024 = add nuw nsw <16 x i8> %1023, <i8 26, i8 26, i8 26, i8 26, i8 31, i8 31, i8 31, i8 31, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36>
  %1025 = bitcast i8* %5 to <16 x i8>*
  store <16 x i8> %1024, <16 x i8>* %1025, align 16
  %1026 = add nsw i32 %31, -4
  %1027 = icmp eq i32 %1026, 0
  br i1 %1027, label %1274, label %1028

1028:                                             ; preds = %921, %1028
  %1029 = phi i8* [ %1032, %1028 ], [ %5, %921 ]
  %1030 = phi i8* [ %1058, %1028 ], [ %947, %921 ]
  %1031 = phi i32 [ %1137, %1028 ], [ %1026, %921 ]
  %1032 = getelementptr inbounds i8, i8* %1029, i64 16
  %1033 = getelementptr inbounds i8, i8* %1030, i64 1
  %1034 = bitcast i8* %1033 to i32*
  %1035 = load i32, i32* %1034, align 1
  %1036 = getelementptr inbounds i8, i8* %1030, i64 9
  %1037 = bitcast i8* %1036 to i32*
  %1038 = load i32, i32* %1037, align 1
  %1039 = getelementptr inbounds i8, i8* %1030, i64 17
  %1040 = bitcast i8* %1039 to i32*
  %1041 = load i32, i32* %1040, align 1
  %1042 = getelementptr inbounds i8, i8* %1030, i64 25
  %1043 = bitcast i8* %1042 to i32*
  %1044 = load i32, i32* %1043, align 1
  %1045 = insertelement <4 x i32> undef, i32 %1035, i32 0
  %1046 = insertelement <4 x i32> %1045, i32 %1038, i32 1
  %1047 = insertelement <4 x i32> %1046, i32 %1041, i32 2
  %1048 = insertelement <4 x i32> %1047, i32 %1044, i32 3
  %1049 = getelementptr inbounds i8, i8* %1030, i64 8
  %1050 = bitcast i8* %1049 to i32*
  %1051 = load i32, i32* %1050, align 1
  %1052 = getelementptr inbounds i8, i8* %1030, i64 16
  %1053 = bitcast i8* %1052 to i32*
  %1054 = load i32, i32* %1053, align 1
  %1055 = getelementptr inbounds i8, i8* %1030, i64 24
  %1056 = bitcast i8* %1055 to i32*
  %1057 = load i32, i32* %1056, align 1
  %1058 = getelementptr inbounds i8, i8* %1030, i64 32
  %1059 = bitcast i8* %1058 to i32*
  %1060 = load i32, i32* %1059, align 1
  %1061 = insertelement <4 x i32> undef, i32 %1051, i32 0
  %1062 = insertelement <4 x i32> %1061, i32 %1054, i32 1
  %1063 = insertelement <4 x i32> %1062, i32 %1057, i32 2
  %1064 = insertelement <4 x i32> %1063, i32 %1060, i32 3
  %1065 = getelementptr inbounds i8, i8* %1030, i64 %839
  %1066 = bitcast i8* %1065 to i32*
  %1067 = load i32, i32* %1066, align 1
  %1068 = getelementptr inbounds i8, i8* %1065, i64 8
  %1069 = bitcast i8* %1068 to i32*
  %1070 = load i32, i32* %1069, align 1
  %1071 = getelementptr inbounds i8, i8* %1065, i64 16
  %1072 = bitcast i8* %1071 to i32*
  %1073 = load i32, i32* %1072, align 1
  %1074 = getelementptr inbounds i8, i8* %1065, i64 24
  %1075 = bitcast i8* %1074 to i32*
  %1076 = load i32, i32* %1075, align 1
  %1077 = insertelement <4 x i32> undef, i32 %1067, i32 0
  %1078 = insertelement <4 x i32> %1077, i32 %1070, i32 1
  %1079 = insertelement <4 x i32> %1078, i32 %1073, i32 2
  %1080 = insertelement <4 x i32> %1079, i32 %1076, i32 3
  %1081 = getelementptr inbounds i8, i8* %1030, i64 %841
  %1082 = bitcast i8* %1081 to i32*
  %1083 = load i32, i32* %1082, align 1
  %1084 = getelementptr inbounds i8, i8* %1081, i64 8
  %1085 = bitcast i8* %1084 to i32*
  %1086 = load i32, i32* %1085, align 1
  %1087 = getelementptr inbounds i8, i8* %1081, i64 16
  %1088 = bitcast i8* %1087 to i32*
  %1089 = load i32, i32* %1088, align 1
  %1090 = getelementptr inbounds i8, i8* %1081, i64 24
  %1091 = bitcast i8* %1090 to i32*
  %1092 = load i32, i32* %1091, align 1
  %1093 = insertelement <4 x i32> undef, i32 %1083, i32 0
  %1094 = insertelement <4 x i32> %1093, i32 %1086, i32 1
  %1095 = insertelement <4 x i32> %1094, i32 %1089, i32 2
  %1096 = insertelement <4 x i32> %1095, i32 %1092, i32 3
  %1097 = getelementptr inbounds i8, i8* %1030, i64 %843
  %1098 = bitcast i8* %1097 to i32*
  %1099 = load i32, i32* %1098, align 1
  %1100 = getelementptr inbounds i8, i8* %1097, i64 8
  %1101 = bitcast i8* %1100 to i32*
  %1102 = load i32, i32* %1101, align 1
  %1103 = getelementptr inbounds i8, i8* %1097, i64 16
  %1104 = bitcast i8* %1103 to i32*
  %1105 = load i32, i32* %1104, align 1
  %1106 = getelementptr inbounds i8, i8* %1097, i64 24
  %1107 = bitcast i8* %1106 to i32*
  %1108 = load i32, i32* %1107, align 1
  %1109 = insertelement <4 x i32> undef, i32 %1099, i32 0
  %1110 = insertelement <4 x i32> %1109, i32 %1102, i32 1
  %1111 = insertelement <4 x i32> %1110, i32 %1105, i32 2
  %1112 = insertelement <4 x i32> %1111, i32 %1108, i32 3
  %1113 = bitcast <4 x i32> %1048 to <16 x i8>
  %1114 = icmp ult <16 x i8> %1113, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1115 = select <16 x i1> %1114, <16 x i8> %1113, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1116 = bitcast <4 x i32> %1064 to <16 x i8>
  %1117 = icmp ult <16 x i8> %1116, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1118 = select <16 x i1> %1117, <16 x i8> %1116, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1119 = bitcast <4 x i32> %1080 to <16 x i8>
  %1120 = icmp ult <16 x i8> %1119, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1121 = select <16 x i1> %1120, <16 x i8> %1119, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1122 = bitcast <4 x i32> %1096 to <16 x i8>
  %1123 = icmp ult <16 x i8> %1122, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1124 = select <16 x i1> %1123, <16 x i8> %1122, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1125 = bitcast <4 x i32> %1112 to <16 x i8>
  %1126 = icmp ult <16 x i8> %1125, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1127 = select <16 x i1> %1126, <16 x i8> %1125, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1128 = add nuw nsw <16 x i8> %1118, %1115
  %1129 = add nuw nsw <16 x i8> %1128, %1121
  %1130 = add nuw nsw <16 x i8> %1129, %1124
  %1131 = add nuw nsw <16 x i8> %1130, %1127
  %1132 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %1131, <16 x i8> zeroinitializer) #2
  %1133 = icmp ult <16 x i8> %1132, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %1134 = select <16 x i1> %1133, <16 x i8> %1132, <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %1135 = add nuw nsw <16 x i8> %1134, <i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36>
  %1136 = bitcast i8* %1032 to <16 x i8>*
  store <16 x i8> %1135, <16 x i8>* %1136, align 16
  %1137 = add nsw i32 %1031, -4
  %1138 = icmp eq i32 %1137, 0
  br i1 %1138, label %1274, label %1028, !llvm.loop !7

1139:                                             ; preds = %844, %1139
  %1140 = phi i8* [ %1143, %1139 ], [ %5, %844 ]
  %1141 = phi i8* [ %1159, %1139 ], [ %860, %844 ]
  %1142 = phi i32 [ %1218, %1139 ], [ %919, %844 ]
  %1143 = getelementptr inbounds i8, i8* %1140, i64 16
  %1144 = getelementptr inbounds i8, i8* %1141, i64 1
  %1145 = bitcast i8* %1144 to i64*
  %1146 = load i64, i64* %1145, align 1
  %1147 = insertelement <2 x i64> undef, i64 %1146, i32 0
  %1148 = getelementptr inbounds i8, i8* %1141, i64 13
  %1149 = bitcast <2 x i64> %1147 to <4 x float>
  %1150 = bitcast i8* %1148 to <2 x float>*
  %1151 = load <2 x float>, <2 x float>* %1150, align 1
  %1152 = shufflevector <2 x float> %1151, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1153 = shufflevector <4 x float> %1149, <4 x float> %1152, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1154 = bitcast <4 x float> %1153 to <16 x i8>
  %1155 = getelementptr inbounds i8, i8* %1141, i64 12
  %1156 = bitcast i8* %1155 to i64*
  %1157 = load i64, i64* %1156, align 1
  %1158 = insertelement <2 x i64> undef, i64 %1157, i32 0
  %1159 = getelementptr inbounds i8, i8* %1141, i64 24
  %1160 = bitcast <2 x i64> %1158 to <4 x float>
  %1161 = bitcast i8* %1159 to <2 x float>*
  %1162 = load <2 x float>, <2 x float>* %1161, align 1
  %1163 = shufflevector <2 x float> %1162, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1164 = shufflevector <4 x float> %1160, <4 x float> %1163, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1165 = bitcast <4 x float> %1164 to <16 x i8>
  %1166 = getelementptr inbounds i8, i8* %1141, i64 %839
  %1167 = bitcast i8* %1166 to i64*
  %1168 = load i64, i64* %1167, align 1
  %1169 = insertelement <2 x i64> undef, i64 %1168, i32 0
  %1170 = getelementptr inbounds i8, i8* %1166, i64 12
  %1171 = bitcast <2 x i64> %1169 to <4 x float>
  %1172 = bitcast i8* %1170 to <2 x float>*
  %1173 = load <2 x float>, <2 x float>* %1172, align 1
  %1174 = shufflevector <2 x float> %1173, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1175 = shufflevector <4 x float> %1171, <4 x float> %1174, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1176 = bitcast <4 x float> %1175 to <16 x i8>
  %1177 = getelementptr inbounds i8, i8* %1141, i64 %841
  %1178 = bitcast i8* %1177 to i64*
  %1179 = load i64, i64* %1178, align 1
  %1180 = insertelement <2 x i64> undef, i64 %1179, i32 0
  %1181 = getelementptr inbounds i8, i8* %1177, i64 12
  %1182 = bitcast <2 x i64> %1180 to <4 x float>
  %1183 = bitcast i8* %1181 to <2 x float>*
  %1184 = load <2 x float>, <2 x float>* %1183, align 1
  %1185 = shufflevector <2 x float> %1184, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1186 = shufflevector <4 x float> %1182, <4 x float> %1185, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1187 = bitcast <4 x float> %1186 to <16 x i8>
  %1188 = getelementptr inbounds i8, i8* %1141, i64 %843
  %1189 = bitcast i8* %1188 to i64*
  %1190 = load i64, i64* %1189, align 1
  %1191 = insertelement <2 x i64> undef, i64 %1190, i32 0
  %1192 = getelementptr inbounds i8, i8* %1188, i64 12
  %1193 = bitcast <2 x i64> %1191 to <4 x float>
  %1194 = bitcast i8* %1192 to <2 x float>*
  %1195 = load <2 x float>, <2 x float>* %1194, align 1
  %1196 = shufflevector <2 x float> %1195, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1197 = shufflevector <4 x float> %1193, <4 x float> %1196, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1198 = bitcast <4 x float> %1197 to <16 x i8>
  %1199 = icmp ult <16 x i8> %1154, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1200 = select <16 x i1> %1199, <16 x i8> %1154, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1201 = icmp ult <16 x i8> %1165, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1202 = select <16 x i1> %1201, <16 x i8> %1165, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1203 = icmp ult <16 x i8> %1176, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1204 = select <16 x i1> %1203, <16 x i8> %1176, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1205 = icmp ult <16 x i8> %1187, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1206 = select <16 x i1> %1205, <16 x i8> %1187, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1207 = icmp ult <16 x i8> %1198, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1208 = select <16 x i1> %1207, <16 x i8> %1198, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1209 = add nuw nsw <16 x i8> %1202, %1200
  %1210 = add nuw nsw <16 x i8> %1209, %1204
  %1211 = add nuw nsw <16 x i8> %1210, %1206
  %1212 = add nuw nsw <16 x i8> %1211, %1208
  %1213 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %1212, <16 x i8> zeroinitializer) #2
  %1214 = icmp ult <16 x i8> %1213, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %1215 = select <16 x i1> %1214, <16 x i8> %1213, <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %1216 = add nuw nsw <16 x i8> %1215, <i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36>
  %1217 = bitcast i8* %1143 to <16 x i8>*
  store <16 x i8> %1216, <16 x i8>* %1217, align 16
  %1218 = add nsw i32 %1142, -2
  %1219 = icmp eq i32 %1218, 0
  br i1 %1219, label %1274, label %1139, !llvm.loop !8

1220:                                             ; preds = %837
  %1221 = sext i32 %32 to i64
  br label %1222

1222:                                             ; preds = %1270, %1220
  %1223 = phi i8* [ %0, %1220 ], [ %1271, %1270 ]
  %1224 = phi i8* [ %5, %1220 ], [ %1267, %1270 ]
  %1225 = phi <16 x i8> [ <i8 31, i8 31, i8 31, i8 31, i8 31, i8 31, i8 31, i8 31, i8 31, i8 31, i8 31, i8 31, i8 31, i8 31, i8 31, i8 31>, %1220 ], [ <i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36, i8 36>, %1270 ]
  %1226 = phi <16 x i8> [ <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>, %1220 ], [ %1225, %1270 ]
  %1227 = phi i32 [ %31, %1220 ], [ %1272, %1270 ]
  br label %1228

1228:                                             ; preds = %1228, %1222
  %1229 = phi i8* [ %1223, %1222 ], [ %1266, %1228 ]
  %1230 = phi i8* [ %1224, %1222 ], [ %1267, %1228 ]
  %1231 = phi i32 [ %28, %1222 ], [ %1268, %1228 ]
  %1232 = getelementptr inbounds i8, i8* %1229, i64 1
  %1233 = bitcast i8* %1232 to <16 x i8>*
  %1234 = load <16 x i8>, <16 x i8>* %1233, align 1
  %1235 = getelementptr inbounds i8, i8* %1229, i64 %1221
  %1236 = bitcast i8* %1235 to <16 x i8>*
  %1237 = load <16 x i8>, <16 x i8>* %1236, align 1
  %1238 = getelementptr inbounds i8, i8* %1229, i64 %839
  %1239 = bitcast i8* %1238 to <16 x i8>*
  %1240 = load <16 x i8>, <16 x i8>* %1239, align 1
  %1241 = getelementptr inbounds i8, i8* %1229, i64 %841
  %1242 = bitcast i8* %1241 to <16 x i8>*
  %1243 = load <16 x i8>, <16 x i8>* %1242, align 1
  %1244 = getelementptr inbounds i8, i8* %1229, i64 %843
  %1245 = bitcast i8* %1244 to <16 x i8>*
  %1246 = load <16 x i8>, <16 x i8>* %1245, align 1
  %1247 = icmp ult <16 x i8> %1234, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1248 = select <16 x i1> %1247, <16 x i8> %1234, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1249 = icmp ult <16 x i8> %1237, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1250 = select <16 x i1> %1249, <16 x i8> %1237, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1251 = icmp ult <16 x i8> %1240, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1252 = select <16 x i1> %1251, <16 x i8> %1240, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1253 = icmp ult <16 x i8> %1243, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1254 = select <16 x i1> %1253, <16 x i8> %1243, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1255 = icmp ult <16 x i8> %1246, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1256 = select <16 x i1> %1255, <16 x i8> %1246, <16 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %1257 = add nuw nsw <16 x i8> %1250, %1248
  %1258 = add nuw nsw <16 x i8> %1257, %1252
  %1259 = add nuw nsw <16 x i8> %1258, %1254
  %1260 = add nuw nsw <16 x i8> %1259, %1256
  %1261 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %1260, <16 x i8> zeroinitializer) #2
  %1262 = icmp ult <16 x i8> %1261, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %1263 = select <16 x i1> %1262, <16 x i8> %1261, <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %1264 = add nsw <16 x i8> %1263, %1226
  %1265 = bitcast i8* %1230 to <16 x i8>*
  store <16 x i8> %1264, <16 x i8>* %1265, align 16
  %1266 = getelementptr inbounds i8, i8* %1229, i64 16
  %1267 = getelementptr inbounds i8, i8* %1230, i64 16
  %1268 = add nsw i32 %1231, -16
  %1269 = icmp eq i32 %1268, 0
  br i1 %1269, label %1270, label %1228

1270:                                             ; preds = %1228
  %1271 = getelementptr inbounds i8, i8* %1229, i64 20
  %1272 = add nsw i32 %1227, -1
  %1273 = icmp eq i32 %1272, 0
  br i1 %1273, label %1274, label %1222

1274:                                             ; preds = %665, %554, %831, %844, %1139, %921, %1028, %1270, %261, %552, %435
  switch i8 %3, label %1277 [
    i8 4, label %1278
    i8 12, label %1278
    i8 11, label %1278
    i8 18, label %1275
    i8 17, label %1276
  ]

1275:                                             ; preds = %1274
  br label %1278

1276:                                             ; preds = %1274
  br label %1278

1277:                                             ; preds = %1274
  br label %1278

1278:                                             ; preds = %1274, %1274, %1274, %1275, %1276, %1277
  %1279 = phi i64 [ %12, %1277 ], [ 9, %1276 ], [ 10, %1275 ], [ 3, %1274 ], [ 3, %1274 ], [ 3, %1274 ]
  %1280 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_log2, i64 0, i64 %1279
  %1281 = load i32, i32* %1280, align 4
  %1282 = sext i32 %8 to i64
  %1283 = getelementptr inbounds i16, i16* %1, i64 %1282
  %1284 = load i16, i16* %1283, align 2
  %1285 = shl i32 %31, %1281
  %1286 = sdiv i32 %1285, 8
  %1287 = icmp sgt i32 %8, %1286
  br i1 %1287, label %1291, label %1288

1288:                                             ; preds = %1278
  %1289 = sext i16 %1284 to i64
  %1290 = getelementptr inbounds i8, i8* %5, i64 %1289
  store i8 1, i8* %1290, align 1
  br label %1298

1291:                                             ; preds = %1278
  %1292 = sdiv i32 %1285, 4
  %1293 = icmp sgt i32 %8, %1292
  %1294 = sext i16 %1284 to i64
  %1295 = getelementptr inbounds i8, i8* %5, i64 %1294
  br i1 %1293, label %1297, label %1296

1296:                                             ; preds = %1291
  store i8 2, i8* %1295, align 1
  br label %1298

1297:                                             ; preds = %1291
  store i8 3, i8* %1295, align 1
  br label %1298

1298:                                             ; preds = %1288, %1297, %1296, %10
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8>, <16 x i8>) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
