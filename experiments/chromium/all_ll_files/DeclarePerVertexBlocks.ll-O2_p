; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/vulkan/DeclarePerVertexBlocks.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/vulkan/DeclarePerVertexBlocks.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.sh::StaticType::Helpers::StaticMangledName" = type { [4 x i8] }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.22" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.23"*, i64, i32, %"class.std::__1::basic_string.29" }
%"class.sh::TVector.23" = type { %"class.std::__1::vector.24" }
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { %"class.sh::TField"**, %"class.sh::TField"**, %"class.std::__1::__compressed_pair.26" }
%"class.sh::TField" = type <{ %"class.sh::TType"*, %"class.sh::ImmutableString", %"struct.sh::TSourceLoc", i8, [7 x i8] }>
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.sh::TField"** }
%"class.std::__1::basic_string.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon.32 }
%union.anon.32 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::TCompiler" = type { %"class.sh::TShHandleBase", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"struct.sh::ValidateASTOptions", %"class.angle::BitSetT", i8, i8, i32, i32, i32, %"class.sh::CallDAG", %"class.std::__1::vector.66", %struct.ShBuiltInResources, %"class.std::__1::basic_string", %"class.sh::TSymbolTable", %"class.std::__1::map.97", %"class.sh::ArrayBoundsClamper", %"class.sh::BuiltInFunctionEmulator", i32, %"class.sh::TInfoSink", %"class.sh::TDiagnostics", i8*, i8, i8, i8, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.std::__1::map.131", %struct.TPragma, i64 }
%"class.sh::TShHandleBase" = type { i32 (...)**, %"class.angle::PoolAllocator" }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"*, %"class.std::__1::__compressed_pair.3" }
%"struct.sh::ShaderVariable" = type { i32, i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector.124", i8, i8, %"class.std::__1::vector.1", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, i32, i8, i32, i32, i32, i8, i8, i8, i32, i8, i32, i8, i8, i8, i8, i32 }
%"class.std::__1::vector.124" = type { %"class.std::__1::__vector_base.125" }
%"class.std::__1::__vector_base.125" = type { i32*, i32*, %"class.std::__1::__compressed_pair.126" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127" }
%"struct.std::__1::__compressed_pair_elem.127" = type { i32* }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.sh::ShaderVariable"* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.sh::InterfaceBlock"*, %"struct.sh::InterfaceBlock"*, %"class.std::__1::__compressed_pair.15" }
%"struct.sh::InterfaceBlock" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i32, i8, i32, i8, i8, i32, %"class.std::__1::vector.1" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.sh::InterfaceBlock"* }
%"struct.sh::ValidateASTOptions" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.angle::BitSetT" = type { i32 }
%"class.sh::CallDAG" = type { %"class.std::__1::vector.20", %"class.std::__1::map" }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"struct.sh::CallDAG::Record"*, %"struct.sh::CallDAG::Record"*, %"class.std::__1::__compressed_pair.53" }
%"struct.sh::CallDAG::Record" = type { %"class.sh::TIntermFunctionDefinition"*, %"class.std::__1::vector.46" }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TVector" = type opaque
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TConstantUnion" = type { %union.anon.37, i32 }
%union.anon.37 = type { i32 }
%"class.std::__1::vector.46" = type { %"class.std::__1::__vector_base.47" }
%"class.std::__1::__vector_base.47" = type { i32*, i32*, %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { i32* }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"struct.sh::CallDAG::Record"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.58", %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { i64 }
%"class.std::__1::vector.66" = type { %"class.std::__1::__vector_base.67" }
%"class.std::__1::__vector_base.67" = type { %"struct.sh::TCompiler::FunctionMetadata"*, %"struct.sh::TCompiler::FunctionMetadata"*, %"class.std::__1::__compressed_pair.68" }
%"struct.sh::TCompiler::FunctionMetadata" = type { i8 }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"struct.sh::TCompiler::FunctionMetadata"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector.73", %"class.std::__1::vector.80", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map.88", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.80" = type { %"class.std::__1::__vector_base.81" }
%"class.std::__1::__vector_base.81" = type { %"class.std::__1::unique_ptr.82"*, %"class.std::__1::unique_ptr.82"*, %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::unique_ptr.82" = type opaque
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"class.std::__1::unique_ptr.82"* }
%"class.std::__1::map.88" = type { %"class.std::__1::__tree.89" }
%"class.std::__1::__tree.89" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.90", %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"class.std::__1::map.97" = type { %"class.std::__1::__tree.98" }
%"class.std::__1::__tree.98" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.99", %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"class.sh::ArrayBoundsClamper" = type <{ i32, i8, [3 x i8] }>
%"class.sh::BuiltInFunctionEmulator" = type { %"class.std::__1::map.108", %"class.std::__1::map", %"class.std::__1::vector.46", %"class.std::__1::vector.117" }
%"class.std::__1::map.108" = type { %"class.std::__1::__tree.109" }
%"class.std::__1::__tree.109" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.110", %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"class.std::__1::vector.117" = type { %"class.std::__1::__vector_base.118" }
%"class.std::__1::__vector_base.118" = type { i8* (i32)**, i8* (i32)**, %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { i8* (i32)** }
%"class.sh::TInfoSink" = type { %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase" }
%"class.sh::TInfoSinkBase" = type { %"class.std::__1::basic_string", %"class.std::__1::vector.124" }
%"class.sh::TDiagnostics" = type { %"class.angle::pp::Diagnostics", %"class.sh::TInfoSinkBase"*, i32, i32 }
%"class.angle::pp::Diagnostics" = type { i32 (...)** }
%"class.std::__1::map.131" = type { %"class.std::__1::__tree.132" }
%"class.std::__1::__tree.132" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.133", %"class.std::__1::__compressed_pair.137" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%struct.TPragma = type { i8, i8, i8, %"struct.TPragma::STDGL" }
%"struct.TPragma::STDGL" = type { i8 }
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.38", i8, [7 x i8] }>
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector.38" = type { %"class.std::__1::vector.39" }
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"class.sh::TIntermNode"** }
%"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser" = type { %"class.sh::TIntermTraverser", i32, %struct.ShBuiltInResources*, %"class.sh::TVariable"*, %"class.sh::TVariable"*, i8, i8, %"class.absl::flat_hash_map" }
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector.142", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.149", %"class.std::__1::vector.156", %"class.sh::TVector.38", %"class.std::__1::vector.163" }
%"class.std::__1::vector.142" = type { %"class.std::__1::__vector_base.143" }
%"class.std::__1::__vector_base.143" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.144" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector.38" }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145" }
%"struct.std::__1::__compressed_pair_elem.145" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.std::__1::vector.149" = type { %"class.std::__1::__vector_base.150" }
%"class.std::__1::__vector_base.150" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.151" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector.38", %"class.sh::TVector.38" }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.158" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.std::__1::vector.163" = type { %"class.std::__1::__vector_base.164" }
%"class.std::__1::__vector_base.164" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.165" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.165" = type { %"struct.std::__1::__compressed_pair_elem.166" }
%"struct.std::__1::__compressed_pair_elem.166" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.absl::flat_hash_map" = type { %"class.absl::container_internal::raw_hash_map" }
%"class.absl::container_internal::raw_hash_map" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, %"union.absl::container_internal::map_slot_type"*, i64, i64, %"class.absl::container_internal::CompressedTuple" }
%"union.absl::container_internal::map_slot_type" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %"class.sh::TVariable"*, %"class.sh::TIntermTyped"* }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage" = type { i64 }
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.38" }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.177", i8, [7 x i8] }>
%"class.sh::TVector.177" = type { %"class.std::__1::vector.178" }
%"class.std::__1::vector.178" = type { %"class.std::__1::__vector_base.179" }
%"class.std::__1::__vector_base.179" = type { i32*, i32*, %"class.std::__1::__compressed_pair.180" }
%"class.std::__1::__compressed_pair.180" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.38", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE = comdat any

$_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE = comdat any

$_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE = comdat any

$_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE = comdat any

$_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE = comdat any

$_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE = comdat any

$_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE = comdat any

$_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE = comdat any

$_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE = comdat any

$_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE = comdat any

$_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE = comdat any

$_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE = comdat any

$_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE = comdat any

$_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE = comdat any

$_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE = comdat any

$_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE = comdat any

$_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE14prepare_insertEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE6resizeEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE27drop_deletes_without_resizeEv = comdat any

$_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = comdat any

@_ZTVN2sh12_GLOBAL__N_131DeclarePerVertexBlocksTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"*)* @_ZN2sh12_GLOBAL__N_131DeclarePerVertexBlocksTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"*)* @_ZN2sh12_GLOBAL__N_131DeclarePerVertexBlocksTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh12_GLOBAL__N_131DeclarePerVertexBlocksTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = linkonce_odr hidden constant [16 x i8] c"\FF\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80", comdat, align 16
@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"gl_out\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"gl_Position\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"gl_PointSize\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"gl_ClipDistance\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"gl_CullDistance\00", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c"gl_PerVertex\00", align 1
@_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh4ELh1EEE = internal constant %"struct.sh::StaticType::Helpers::StaticMangledName" { [4 x i8] c"30B\00" }, align 1
@_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh4ELh1EEE = internal global { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* } { i32 1, i32 0, i32 1, i8 0, i8 0, %"struct.sh::TMemoryQualifier" zeroinitializer, { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 } { i32 -1, i32 0, i32 0, i32 0, %"struct.sh::WorkGroupSize" { [3 x i32] [i32 -1, i32 -1, i32 -1] }, i32 -1, i32 -1, i32 0, i32 -1, i8 0, i8 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i8 0 }, i8 4, i8 1, %"class.sh::TSpan" zeroinitializer, %"class.sh::TVector.22"* null, %"class.sh::TInterfaceBlock"* null, %"class.sh::TStructure"* null, i8 0, i64 0, i8* getelementptr inbounds (%"struct.sh::StaticType::Helpers::StaticMangledName", %"struct.sh::StaticType::Helpers::StaticMangledName"* @_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh4ELh1EEE, i32 0, i32 0, i32 0) }, align 8
@_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE = internal constant %"struct.sh::StaticType::Helpers::StaticMangledName" { [4 x i8] c"00B\00" }, align 1
@_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE = internal global { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* } { i32 1, i32 0, i32 1, i8 0, i8 0, %"struct.sh::TMemoryQualifier" zeroinitializer, { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 } { i32 -1, i32 0, i32 0, i32 0, %"struct.sh::WorkGroupSize" { [3 x i32] [i32 -1, i32 -1, i32 -1] }, i32 -1, i32 -1, i32 0, i32 -1, i8 0, i8 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i8 0 }, i8 1, i8 1, %"class.sh::TSpan" zeroinitializer, %"class.sh::TVector.22"* null, %"class.sh::TInterfaceBlock"* null, %"class.sh::TStructure"* null, i8 0, i64 0, i8* getelementptr inbounds (%"struct.sh::StaticType::Helpers::StaticMangledName", %"struct.sh::StaticType::Helpers::StaticMangledName"* @_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE, i32 0, i32 0, i32 0) }, align 8
@.str.9 = private unnamed_addr constant [6 x i8] c"gl_in\00", align 1
@_ZN4absl13hash_internal15MixingHashState5kSeedE = external local_unnamed_addr constant i8*, align 8
@_ZTVN2sh18TIntermDeclarationE = external unnamed_addr constant { [31 x i8*], [6 x i8*] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh22DeclarePerVertexBlocksEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #0 {
  %4 = alloca %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", align 8
  %5 = getelementptr inbounds %"class.sh::TCompiler", %"class.sh::TCompiler"* %0, i64 0, i32 14
  %6 = load i32, i32* %5, align 4
  switch i32 %6, label %7 [
    i32 37305, label %43
    i32 35632, label %43
  ]

7:                                                ; preds = %3
  %8 = bitcast %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 232, i8* nonnull %8) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 232, i1 false)
  %9 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %4, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %9, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* %2) #6
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_131DeclarePerVertexBlocksTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %4, i64 0, i32 1
  %12 = load i32, i32* %5, align 4
  store i32 %12, i32* %11, align 8
  %13 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %4, i64 0, i32 2
  %14 = call dereferenceable(520) %struct.ShBuiltInResources* @_ZNK2sh9TCompiler12getResourcesEv(%"class.sh::TCompiler"* %0) #6
  store %struct.ShBuiltInResources* %14, %struct.ShBuiltInResources** %13, align 8
  %15 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %4, i64 0, i32 3
  %16 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %4, i64 0, i32 7, i32 0, i32 0, i32 0
  %17 = bitcast %"class.sh::TVariable"** %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 18, i1 false) #6
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %16, align 8
  %18 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %4, i64 0, i32 7, i32 0, i32 0, i32 1
  %19 = bitcast %"union.absl::container_internal::map_slot_type"** %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 32, i1 false) #6
  call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* %1, %"class.sh::TIntermTraverser"* nonnull %9) #6
  %20 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %1, i64 0, i32 0
  %21 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %9, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %20) #6
  br i1 %21, label %22, label %35

22:                                               ; preds = %7
  %23 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %4, i64 0, i32 6
  %24 = load i8, i8* %23, align 1, !range !2
  %25 = icmp eq i8 %24, 0
  %26 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %4, i64 0, i32 4
  %27 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %26, align 8
  %28 = select i1 %25, %"class.sh::TVariable"* null, %"class.sh::TVariable"* %27
  call fastcc void @_ZN2sh12_GLOBAL__N_116AddPerVertexDeclEPNS_12TIntermBlockEPKNS_9TVariableE(%"class.sh::TIntermBlock"* %1, %"class.sh::TVariable"* %28)
  %29 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %4, i64 0, i32 5
  %30 = load i8, i8* %29, align 8, !range !2
  %31 = icmp eq i8 %30, 0
  %32 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %15, align 8
  %33 = select i1 %31, %"class.sh::TVariable"* null, %"class.sh::TVariable"* %32
  call fastcc void @_ZN2sh12_GLOBAL__N_116AddPerVertexDeclEPNS_12TIntermBlockEPKNS_9TVariableE(%"class.sh::TIntermBlock"* %1, %"class.sh::TVariable"* %33)
  %34 = call zeroext i1 @_ZN2sh9TCompiler11validateASTEPNS_11TIntermNodeE(%"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %20) #6
  br label %35

35:                                               ; preds = %7, %22
  %36 = phi i1 [ %34, %22 ], [ false, %7 ]
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_131DeclarePerVertexBlocksTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %37 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %4, i64 0, i32 7, i32 0, i32 0, i32 3
  %38 = load i64, i64* %37, align 8
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %42, label %40

40:                                               ; preds = %35
  %41 = load i8*, i8** %16, align 8
  call void @_ZdlPv(i8* %41) #13
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %16, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 32, i1 false) #6
  br label %42

42:                                               ; preds = %35, %40
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 232, i8* nonnull %8) #6
  br label %43

43:                                               ; preds = %3, %3, %42
  %44 = phi i1 [ %36, %42 ], [ true, %3 ], [ true, %3 ]
  ret i1 %44
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermTraverser"*) unnamed_addr #2

declare zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2sh12_GLOBAL__N_116AddPerVertexDeclEPNS_12TIntermBlockEPKNS_9TVariableE(%"class.sh::TIntermBlock"*, %"class.sh::TVariable"*) unnamed_addr #0 {
  %3 = alloca %"class.sh::TVector.38", align 8
  %4 = icmp eq %"class.sh::TVariable"* %1, null
  br i1 %4, label %40, label %5

5:                                                ; preds = %2
  %6 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %7 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %6, i64 56) #6
  %8 = bitcast i8* %7 to %"class.sh::TIntermDeclaration"*
  %9 = bitcast i8* %7 to i32 (...)***
  %10 = getelementptr inbounds i8, i8* %7, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false) #6
  %11 = getelementptr inbounds i8, i8* %7, i64 24
  %12 = bitcast i8* %11 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  %13 = getelementptr inbounds i8, i8* %7, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 24, i1 false) #6
  %14 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %15 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %14, i64 32) #6
  %16 = bitcast i8* %15 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %16, %"class.sh::TVariable"* nonnull %1) #6
  %17 = bitcast i8* %15 to %"class.sh::TIntermTyped"*
  tail call void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"* %8, %"class.sh::TIntermTyped"* %17) #6
  %18 = tail call i64 @_ZN2sh32FindFirstFunctionDefinitionIndexEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"* %0) #6
  %19 = bitcast %"class.sh::TVector.38"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #6
  %20 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %21 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %20, i64 8) #6
  %22 = getelementptr inbounds %"class.sh::TVector.38", %"class.sh::TVector.38"* %3, i64 0, i32 0, i32 0, i32 1
  %23 = bitcast %"class.sh::TVector.38"* %3 to i8**
  store i8* %21, i8** %23, align 8
  %24 = getelementptr inbounds i8, i8* %21, i64 8
  %25 = getelementptr inbounds %"class.sh::TVector.38", %"class.sh::TVector.38"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %26 = bitcast %"class.sh::TIntermNode"*** %25 to i8**
  store i8* %24, i8** %26, align 8
  %27 = bitcast i8* %21 to i64*
  %28 = ptrtoint i8* %7 to i64
  store i64 %28, i64* %27, align 8
  %29 = getelementptr inbounds i8, i8* %21, i64 8
  %30 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 1
  %31 = bitcast %"class.sh::TIntermNode"*** %22 to i64*
  %32 = ptrtoint i8* %29 to i64
  store i64 %32, i64* %31, align 8
  %33 = call zeroext i1 @_ZN2sh20TIntermAggregateBase16insertChildNodesEmRKNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TIntermAggregateBase"* %30, i64 %18, %"class.sh::TVector.38"* nonnull dereferenceable(24) %3) #6
  %34 = getelementptr inbounds %"class.sh::TVector.38", %"class.sh::TVector.38"* %3, i64 0, i32 0, i32 0, i32 0
  %35 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %34, align 8
  %36 = icmp eq %"class.sh::TIntermNode"** %35, null
  br i1 %36, label %39, label %37

37:                                               ; preds = %5
  %38 = ptrtoint %"class.sh::TIntermNode"** %35 to i64
  store i64 %38, i64* %31, align 8
  br label %39

39:                                               ; preds = %5, %37
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #6
  br label %40

40:                                               ; preds = %2, %39
  ret void
}

declare zeroext i1 @_ZN2sh9TCompiler11validateASTEPNS_11TIntermNodeE(%"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_131DeclarePerVertexBlocksTraverserD2Ev(%"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_131DeclarePerVertexBlocksTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 7, i32 0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 7, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 7, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  tail call void @_ZdlPv(i8* %9) #13
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %8, align 8
  %10 = bitcast %"union.absl::container_internal::map_slot_type"** %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 32, i1 false) #6
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %12) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #2

declare dereferenceable(520) %struct.ShBuiltInResources* @_ZNK2sh9TCompiler12getResourcesEv(%"class.sh::TCompiler"*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_131DeclarePerVertexBlocksTraverserD0Ev(%"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_131DeclarePerVertexBlocksTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 7, i32 0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 7, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 7, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  tail call void @_ZdlPv(i8* %9) #13
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %8, align 8
  %10 = bitcast %"union.absl::container_internal::map_slot_type"** %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 32, i1 false) #6
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %12) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_131DeclarePerVertexBlocksTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"*, %"class.sh::TIntermSymbol"* nocapture readonly) unnamed_addr #4 align 2 {
  %3 = alloca %"class.sh::ImmutableString", align 8
  %4 = alloca %"class.sh::ImmutableString", align 8
  %5 = alloca %"class.sh::ImmutableString", align 8
  %6 = alloca %"class.sh::ImmutableString", align 8
  %7 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %1, i64 0, i32 1
  %8 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %7, align 8
  %9 = ptrtoint %"class.sh::TVariable"* %8 to i64
  %10 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %8, i64 0, i32 1
  %11 = load %"class.sh::TType"*, %"class.sh::TType"** %10, align 8
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 36488
  br i1 %14, label %15, label %44

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %11, i64 0, i32 2
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 84
  br i1 %18, label %19, label %45

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 4
  %21 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %20, align 8
  %22 = icmp eq %"class.sh::TVariable"* %21, null
  br i1 %22, label %23, label %33

23:                                               ; preds = %19
  %24 = bitcast %"class.sh::ImmutableString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #6
  %25 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %5, i64 0, i32 0
  %26 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %5, i64 0, i32 1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i8** %25, align 8
  store i64 6, i64* %26, align 8
  %27 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 2
  %28 = load %struct.ShBuiltInResources*, %struct.ShBuiltInResources** %27, align 8
  %29 = getelementptr inbounds %struct.ShBuiltInResources, %struct.ShBuiltInResources* %28, i64 0, i32 111
  %30 = load i32, i32* %29, align 8
  %31 = call fastcc %"class.sh::TVariable"* @_ZN2sh12_GLOBAL__N_131DeclarePerVertexBlocksTraverser16declarePerVertexENS_10TQualifierEjRNS_15ImmutableStringE(%"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i32 84, i32 %30, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %5) #6
  store %"class.sh::TVariable"* %31, %"class.sh::TVariable"** %20, align 8
  %32 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 6
  store i8 1, i8* %32, align 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #6
  br label %37

33:                                               ; preds = %19
  %34 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 6
  %35 = load i8, i8* %34, align 1, !range !2
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %288, label %37

37:                                               ; preds = %23, %33
  %38 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 0
  %39 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %40 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %39, i64 32) #6
  %41 = bitcast i8* %40 to %"class.sh::TIntermSymbol"*
  %42 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %20, align 8
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %41, %"class.sh::TVariable"* %42) #6
  %43 = bitcast i8* %40 to %"class.sh::TIntermNode"*
  call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %38, %"class.sh::TIntermNode"* %43, i32 1) #6
  br label %288

44:                                               ; preds = %2
  switch i32 %13, label %89 [
    i32 36313, label %45
    i32 36487, label %45
  ]

45:                                               ; preds = %44, %15, %44
  %46 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %11, i64 0, i32 2
  %47 = load i32, i32* %46, align 8
  %48 = icmp eq i32 %47, 74
  br i1 %48, label %49, label %89

49:                                               ; preds = %45
  %50 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 3
  %51 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %50, align 8
  %52 = icmp eq %"class.sh::TVariable"* %51, null
  br i1 %52, label %53, label %78

53:                                               ; preds = %49
  %54 = bitcast %"class.sh::ImmutableString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %54) #6
  %55 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %4, i64 0, i32 0
  %56 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %4, i64 0, i32 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0), i8** %55, align 8
  store i64 5, i64* %56, align 8
  %57 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 2
  %58 = load %struct.ShBuiltInResources*, %struct.ShBuiltInResources** %57, align 8
  %59 = getelementptr inbounds %struct.ShBuiltInResources, %struct.ShBuiltInResources* %58, i64 0, i32 111
  %60 = icmp eq i32 %13, 36313
  br i1 %60, label %61, label %73

61:                                               ; preds = %53
  %62 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 0, i32 8
  %63 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %62, align 8
  %64 = tail call %"class.sh::TVariable"* @_ZNK2sh12TSymbolTable28getGlInVariableWithArraySizeEv(%"class.sh::TSymbolTable"* %63) #6
  %65 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %64, i64 0, i32 1
  %66 = load %"class.sh::TType"*, %"class.sh::TType"** %65, align 8
  %67 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %66, i64 0, i32 10, i32 0
  %68 = load i32*, i32** %67, align 8
  %69 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %66, i64 0, i32 10, i32 1
  %70 = load i64, i64* %69, align 8
  %71 = add i64 %70, -1
  %72 = getelementptr inbounds i32, i32* %68, i64 %71
  br label %73

73:                                               ; preds = %61, %53
  %74 = phi i32* [ %72, %61 ], [ %59, %53 ]
  %75 = load i32, i32* %74, align 4
  %76 = call fastcc %"class.sh::TVariable"* @_ZN2sh12_GLOBAL__N_131DeclarePerVertexBlocksTraverser16declarePerVertexENS_10TQualifierEjRNS_15ImmutableStringE(%"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i32 74, i32 %75, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %4) #6
  store %"class.sh::TVariable"* %76, %"class.sh::TVariable"** %50, align 8
  %77 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 5
  store i8 1, i8* %77, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %54) #6
  br label %82

78:                                               ; preds = %49
  %79 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 5
  %80 = load i8, i8* %79, align 8, !range !2
  %81 = icmp eq i8 %80, 0
  br i1 %81, label %288, label %82

82:                                               ; preds = %73, %78
  %83 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 0
  %84 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %85 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %84, i64 32) #6
  %86 = bitcast i8* %85 to %"class.sh::TIntermSymbol"*
  %87 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %50, align 8
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %86, %"class.sh::TVariable"* %87) #6
  %88 = bitcast i8* %85 to %"class.sh::TIntermNode"*
  call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %83, %"class.sh::TIntermNode"* %88, i32 1) #6
  br label %288

89:                                               ; preds = %44, %45
  %90 = bitcast %"class.sh::TVariable"* %8 to %"class.sh::TSymbol"*
  %91 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %8, i64 0, i32 0, i32 2
  %92 = load i8, i8* %91, align 4
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %94, label %288

94:                                               ; preds = %89
  %95 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 7
  %96 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %97 = add i64 %96, %9
  %98 = zext i64 %97 to i128
  %99 = mul nuw i128 %98, 11376068507788127593
  %100 = lshr i128 %99, 64
  %101 = xor i128 %100, %99
  %102 = trunc i128 %101 to i64
  %103 = add i64 %102, %9
  %104 = zext i64 %103 to i128
  %105 = mul nuw i128 %104, 11376068507788127593
  %106 = lshr i128 %105, 64
  %107 = xor i128 %106, %105
  %108 = trunc i128 %107 to i64
  %109 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %95, i64 0, i32 0, i32 0, i32 0
  %110 = load i8*, i8** %109, align 8
  %111 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 7, i32 0, i32 0, i32 3
  %112 = load i64, i64* %111, align 8
  %113 = lshr i64 %108, 7
  %114 = ptrtoint i8* %110 to i64
  %115 = lshr i64 %114, 12
  %116 = xor i64 %113, %115
  %117 = trunc i128 %107 to i8
  %118 = and i8 %117, 127
  %119 = insertelement <16 x i8> undef, i8 %118, i32 0
  %120 = shufflevector <16 x i8> %119, <16 x i8> undef, <16 x i32> zeroinitializer
  %121 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 7, i32 0, i32 0, i32 1
  br label %122

122:                                              ; preds = %152, %94
  %123 = phi i64 [ %116, %94 ], [ %154, %152 ]
  %124 = phi i64 [ 0, %94 ], [ %153, %152 ]
  %125 = and i64 %123, %112
  %126 = getelementptr inbounds i8, i8* %110, i64 %125
  %127 = bitcast i8* %126 to <16 x i8>*
  %128 = load <16 x i8>, <16 x i8>* %127, align 1
  %129 = icmp eq <16 x i8> %120, %128
  %130 = bitcast <16 x i1> %129 to i16
  %131 = icmp eq i16 %130, 0
  br i1 %131, label %148, label %132

132:                                              ; preds = %122
  %133 = zext i16 %130 to i32
  %134 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %121, align 8
  br label %135

135:                                              ; preds = %144, %132
  %136 = phi i32 [ %133, %132 ], [ %146, %144 ]
  %137 = tail call i32 @llvm.cttz.i32(i32 %136, i1 false) #6, !range !3
  %138 = zext i32 %137 to i64
  %139 = add i64 %125, %138
  %140 = and i64 %139, %112
  %141 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %134, i64 %140, i32 0, i32 0
  %142 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %141, align 8
  %143 = icmp eq %"class.sh::TVariable"* %142, %8
  br i1 %143, label %155, label %144, !prof !4

144:                                              ; preds = %135
  %145 = add i32 %136, -1
  %146 = and i32 %145, %136
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %148, label %135

148:                                              ; preds = %144, %122
  %149 = icmp eq <16 x i8> %128, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %150 = bitcast <16 x i1> %149 to i16
  %151 = icmp eq i16 %150, 0
  br i1 %151, label %152, label %171, !prof !5

152:                                              ; preds = %148
  %153 = add i64 %124, 16
  %154 = add i64 %153, %125
  br label %122

155:                                              ; preds = %135
  %156 = getelementptr inbounds i8, i8* %110, i64 %140
  %157 = icmp ne i8* %156, null
  tail call void @llvm.assume(i1 %157) #6
  %158 = load i8, i8* %156, align 1
  %159 = icmp sgt i8 %158, -1
  br i1 %159, label %161, label %160, !prof !4

160:                                              ; preds = %155
  tail call void @llvm.trap() #6
  unreachable

161:                                              ; preds = %155
  %162 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 0
  %163 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %134, i64 %140, i32 0, i32 1
  %164 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %163, align 8
  %165 = bitcast %"class.sh::TIntermTyped"* %164 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %166 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %165, align 8
  %167 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %166, i64 23
  %168 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %167, align 8
  %169 = tail call %"class.sh::TIntermTyped"* %168(%"class.sh::TIntermTyped"* %164) #6
  %170 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %169, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %162, %"class.sh::TIntermNode"* %170, i32 1) #6
  br label %288

171:                                              ; preds = %148
  %172 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %11, i64 0, i32 2
  %173 = load i32, i32* %172, align 8
  %174 = icmp ne i32 %173, 20
  %175 = sext i1 %174 to i32
  %176 = icmp eq i32 %173, 21
  %177 = select i1 %176, i32 1, i32 %175
  %178 = icmp eq i32 %173, 35
  %179 = select i1 %178, i32 2, i32 %177
  %180 = icmp eq i32 %173, 36
  %181 = select i1 %180, i32 3, i32 %179
  %182 = icmp slt i32 %181, 0
  br i1 %182, label %288, label %183

183:                                              ; preds = %171
  %184 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 4
  %185 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %184, align 8
  %186 = icmp eq %"class.sh::TVariable"* %185, null
  br i1 %186, label %187, label %200

187:                                              ; preds = %183
  %188 = bitcast %"class.sh::ImmutableString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %188) #6
  %189 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %3, i64 0, i32 0
  %190 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %3, i64 0, i32 1
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i8** %189, align 8
  store i64 0, i64* %190, align 8
  br i1 %14, label %191, label %196

191:                                              ; preds = %187
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i8** %189, align 8
  store i64 6, i64* %190, align 8
  %192 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 2
  %193 = load %struct.ShBuiltInResources*, %struct.ShBuiltInResources** %192, align 8
  %194 = getelementptr inbounds %struct.ShBuiltInResources, %struct.ShBuiltInResources* %193, i64 0, i32 111
  %195 = load i32, i32* %194, align 8
  br label %196

196:                                              ; preds = %187, %191
  %197 = phi i32 [ %195, %191 ], [ 0, %187 ]
  %198 = call fastcc %"class.sh::TVariable"* @_ZN2sh12_GLOBAL__N_131DeclarePerVertexBlocksTraverser16declarePerVertexENS_10TQualifierEjRNS_15ImmutableStringE(%"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i32 84, i32 %197, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %3) #6
  store %"class.sh::TVariable"* %198, %"class.sh::TVariable"** %184, align 8
  %199 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 6
  store i8 1, i8* %199, align 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %188) #6
  br label %200

200:                                              ; preds = %196, %183
  %201 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %202 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %201, i64 184) #6
  %203 = bitcast i8* %202 to %"class.sh::TType"*
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %203, %"class.sh::TType"* dereferenceable(184) %11) #6
  %204 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %184, align 8
  %205 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %204, i64 0, i32 1
  %206 = load %"class.sh::TType"*, %"class.sh::TType"** %205, align 8
  %207 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %206, i64 0, i32 12
  %208 = load %"class.sh::TInterfaceBlock"*, %"class.sh::TInterfaceBlock"** %207, align 8
  %209 = sext i32 %181 to i64
  call void @_ZN2sh5TType22setInterfaceBlockFieldEPKNS_15TInterfaceBlockEm(%"class.sh::TType"* %203, %"class.sh::TInterfaceBlock"* %208, i64 %209) #6
  %210 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %211 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %210, i64 40) #6
  %212 = bitcast i8* %211 to %"class.sh::TVariable"*
  %213 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 0
  %214 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 0, i32 8
  %215 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %214, align 8
  %216 = bitcast %"class.sh::ImmutableString"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %216) #6
  %217 = call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %90) #6
  %218 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %6, i64 0, i32 0
  %219 = extractvalue { i8*, i64 } %217, 0
  store i8* %219, i8** %218, align 8
  %220 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %6, i64 0, i32 1
  %221 = extractvalue { i8*, i64 } %217, 1
  store i64 %221, i64* %220, align 8
  %222 = load i8, i8* %91, align 4
  %223 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %8, i64 0, i32 0, i32 3
  %224 = load i8, i8* %223, align 1
  call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %212, %"class.sh::TSymbolTable"* %215, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %6, %"class.sh::TType"* %203, i8 zeroext %222, i8 zeroext %224) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %216) #6
  %225 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %226 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %225, i64 32) #6
  %227 = bitcast i8* %226 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %227, %"class.sh::TVariable"* %212) #6
  %228 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %95, i64 0, i32 0, i32 0
  %229 = load i8*, i8** %109, align 8
  %230 = load i64, i64* %111, align 8
  %231 = ptrtoint i8* %229 to i64
  %232 = lshr i64 %231, 12
  %233 = xor i64 %232, %113
  br label %234

234:                                              ; preds = %264, %200
  %235 = phi i64 [ %233, %200 ], [ %266, %264 ]
  %236 = phi i64 [ 0, %200 ], [ %265, %264 ]
  %237 = and i64 %235, %230
  %238 = getelementptr inbounds i8, i8* %229, i64 %237
  %239 = bitcast i8* %238 to <16 x i8>*
  %240 = load <16 x i8>, <16 x i8>* %239, align 1
  %241 = icmp eq <16 x i8> %120, %240
  %242 = bitcast <16 x i1> %241 to i16
  %243 = icmp eq i16 %242, 0
  br i1 %243, label %260, label %244

244:                                              ; preds = %234
  %245 = zext i16 %242 to i32
  %246 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %121, align 8
  br label %247

247:                                              ; preds = %256, %244
  %248 = phi i32 [ %245, %244 ], [ %258, %256 ]
  %249 = call i32 @llvm.cttz.i32(i32 %248, i1 false) #6, !range !3
  %250 = zext i32 %249 to i64
  %251 = add i64 %237, %250
  %252 = and i64 %251, %230
  %253 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %246, i64 %252, i32 0, i32 0
  %254 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %253, align 8
  %255 = icmp eq %"class.sh::TVariable"* %254, %8
  br i1 %255, label %275, label %256, !prof !4

256:                                              ; preds = %247
  %257 = add i32 %248, -1
  %258 = and i32 %257, %248
  %259 = icmp eq i32 %258, 0
  br i1 %259, label %260, label %247

260:                                              ; preds = %256, %234
  %261 = icmp eq <16 x i8> %240, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %262 = bitcast <16 x i1> %261 to i16
  %263 = icmp eq i16 %262, 0
  br i1 %263, label %264, label %267, !prof !5

264:                                              ; preds = %260
  %265 = add i64 %236, 16
  %266 = add i64 %265, %237
  br label %234

267:                                              ; preds = %260
  %268 = call i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"* %228, i64 %108) #6
  %269 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %121, align 8, !noalias !6
  %270 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %269, i64 %268
  %271 = bitcast %"union.absl::container_internal::map_slot_type"* %270 to i64*
  store i64 %9, i64* %271, align 8, !noalias !6
  %272 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %269, i64 %268, i32 0, i32 1
  store %"class.sh::TIntermTyped"* null, %"class.sh::TIntermTyped"** %272, align 8, !noalias !6
  %273 = load i8*, i8** %109, align 8, !noalias !6
  %274 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %121, align 8, !noalias !6
  br label %275

275:                                              ; preds = %247, %267
  %276 = phi %"union.absl::container_internal::map_slot_type"* [ %274, %267 ], [ %246, %247 ]
  %277 = phi i8* [ %273, %267 ], [ %229, %247 ]
  %278 = phi i64 [ %268, %267 ], [ %252, %247 ]
  %279 = getelementptr inbounds i8, i8* %277, i64 %278
  %280 = icmp ne i8* %279, null
  call void @llvm.assume(i1 %280) #6, !noalias !6
  %281 = load i8, i8* %279, align 1
  %282 = icmp sgt i8 %281, -1
  br i1 %282, label %284, label %283, !prof !4

283:                                              ; preds = %275
  call void @llvm.trap() #6
  unreachable

284:                                              ; preds = %275
  %285 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %276, i64 %278, i32 0, i32 1
  %286 = bitcast %"class.sh::TIntermTyped"** %285 to i8**
  store i8* %226, i8** %286, align 8
  %287 = bitcast i8* %226 to %"class.sh::TIntermNode"*
  call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %213, %"class.sh::TIntermNode"* %287, i32 1) #6
  br label %288

288:                                              ; preds = %161, %171, %284, %89, %82, %78, %37, %33
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*, i32) local_unnamed_addr #2

declare void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"*, %"class.sh::TVariable"*) unnamed_addr #2

declare void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"*, %"class.sh::TType"* dereferenceable(184)) unnamed_addr #2

declare void @_ZN2sh5TType22setInterfaceBlockFieldEPKNS_15TInterfaceBlockEm(%"class.sh::TType"*, %"class.sh::TInterfaceBlock"*, i64) local_unnamed_addr #2

declare { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"*) local_unnamed_addr #2

declare void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"*, %"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::TType"*, i8 zeroext, i8 zeroext) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.sh::TVariable"* @_ZN2sh12_GLOBAL__N_131DeclarePerVertexBlocksTraverser16declarePerVertexENS_10TQualifierEjRNS_15ImmutableStringE(%"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* nocapture readonly, i32, i32, %"class.sh::ImmutableString"* dereferenceable(16)) unnamed_addr #0 align 2 {
  %5 = alloca %"class.sh::ImmutableString", align 8
  %6 = alloca %"struct.sh::TLayoutQualifier", align 16
  %7 = alloca %"struct.sh::TLayoutQualifier", align 16
  %8 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %9 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %8, i64 24) #6
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #6
  %10 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %11 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %10, i64 184) #6
  %12 = bitcast i8* %11 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %12, %"class.sh::TType"* dereferenceable(184) bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh4ELh1EEE to %"class.sh::TType"*)) #6
  %13 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %14 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %13, i64 184) #6
  %15 = bitcast i8* %14 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %15, %"class.sh::TType"* dereferenceable(184) bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*)) #6
  %16 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %17 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %16, i64 184) #6
  %18 = bitcast i8* %17 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %18, %"class.sh::TType"* dereferenceable(184) bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*)) #6
  %19 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %20 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %19, i64 184) #6
  %21 = bitcast i8* %20 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %21, %"class.sh::TType"* dereferenceable(184) bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*)) #6
  %22 = getelementptr inbounds i8, i8* %11, i64 8
  %23 = bitcast i8* %22 to i32*
  store i32 20, i32* %23, align 8
  %24 = getelementptr inbounds i8, i8* %14, i64 8
  %25 = bitcast i8* %24 to i32*
  store i32 21, i32* %25, align 8
  %26 = getelementptr inbounds i8, i8* %17, i64 8
  %27 = bitcast i8* %26 to i32*
  store i32 35, i32* %27, align 8
  %28 = getelementptr inbounds i8, i8* %20, i64 8
  %29 = bitcast i8* %28 to i32*
  store i32 36, i32* %29, align 8
  %30 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 2
  %31 = load %struct.ShBuiltInResources*, %struct.ShBuiltInResources** %30, align 8
  %32 = getelementptr inbounds %struct.ShBuiltInResources, %struct.ShBuiltInResources* %31, i64 0, i32 121
  %33 = load i32, i32* %32, align 8
  tail call void @_ZN2sh5TType9makeArrayEj(%"class.sh::TType"* %18, i32 %33) #6
  %34 = load %struct.ShBuiltInResources*, %struct.ShBuiltInResources** %30, align 8
  %35 = getelementptr inbounds %struct.ShBuiltInResources, %struct.ShBuiltInResources* %34, i64 0, i32 122
  %36 = load i32, i32* %35, align 4
  tail call void @_ZN2sh5TType9makeArrayEj(%"class.sh::TType"* %21, i32 %36) #6
  %37 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %38 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %37, i64 48) #6
  %39 = bitcast i8* %9 to %"class.sh::TVector.23"*
  %40 = bitcast i8* %38 to i8**
  store i8* %11, i8** %40, align 8
  %41 = getelementptr inbounds i8, i8* %38, i64 8
  %42 = bitcast i8* %41 to i8**
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i8** %42, align 8
  %43 = getelementptr inbounds i8, i8* %38, i64 16
  %44 = bitcast i8* %43 to i64*
  store i64 11, i64* %44, align 8
  %45 = getelementptr inbounds i8, i8* %38, i64 24
  call void @llvm.memset.p0i8.i64(i8* align 8 %45, i8 0, i64 16, i1 false)
  %46 = getelementptr inbounds i8, i8* %38, i64 40
  store i8 2, i8* %46, align 8
  %47 = ptrtoint i8* %38 to i64
  %48 = getelementptr inbounds i8, i8* %9, i64 8
  %49 = bitcast i8* %48 to %"class.sh::TField"***
  %50 = load %"class.sh::TField"**, %"class.sh::TField"*** %49, align 8
  %51 = getelementptr inbounds i8, i8* %9, i64 16
  %52 = bitcast i8* %51 to %"class.sh::TField"***
  %53 = load %"class.sh::TField"**, %"class.sh::TField"*** %52, align 8
  %54 = icmp ult %"class.sh::TField"** %50, %53
  %55 = ptrtoint %"class.sh::TField"** %53 to i64
  br i1 %54, label %56, label %61

56:                                               ; preds = %4
  %57 = bitcast %"class.sh::TField"** %50 to i64*
  store i64 %47, i64* %57, align 8
  %58 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %50, i64 1
  %59 = ptrtoint %"class.sh::TField"** %58 to i64
  %60 = bitcast i8* %48 to i64*
  store i64 %59, i64* %60, align 8
  br label %274

61:                                               ; preds = %4
  %62 = ptrtoint %"class.sh::TField"** %50 to i64
  %63 = bitcast i8* %48 to i64*
  %64 = bitcast i8* %9 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = sub i64 %62, %65
  %67 = ashr exact i64 %66, 3
  %68 = add nsw i64 %67, 1
  %69 = icmp ugt i64 %68, 2305843009213693951
  br i1 %69, label %70, label %72

70:                                               ; preds = %61
  %71 = bitcast i8* %9 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %71) #14
  unreachable

72:                                               ; preds = %61
  %73 = bitcast i8* %51 to i64*
  %74 = sub i64 %55, %65
  %75 = ashr exact i64 %74, 3
  %76 = icmp ult i64 %75, 1152921504606846975
  br i1 %76, label %77, label %82

77:                                               ; preds = %72
  %78 = ashr exact i64 %74, 2
  %79 = icmp ult i64 %78, %68
  %80 = select i1 %79, i64 %68, i64 %78
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %88, label %82

82:                                               ; preds = %77, %72
  %83 = phi i64 [ %80, %77 ], [ 2305843009213693951, %72 ]
  %84 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %85 = shl i64 %83, 3
  %86 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %84, i64 %85) #6
  %87 = bitcast i8* %86 to %"class.sh::TField"**
  br label %88

88:                                               ; preds = %82, %77
  %89 = phi i64 [ %83, %82 ], [ 0, %77 ]
  %90 = phi %"class.sh::TField"** [ %87, %82 ], [ null, %77 ]
  %91 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %90, i64 %67
  %92 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %90, i64 %89
  %93 = ptrtoint %"class.sh::TField"** %92 to i64
  %94 = bitcast %"class.sh::TField"** %91 to i64*
  store i64 %47, i64* %94, align 8
  %95 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %91, i64 1
  %96 = ptrtoint %"class.sh::TField"** %95 to i64
  %97 = bitcast i8* %9 to %"class.sh::TField"***
  %98 = load %"class.sh::TField"**, %"class.sh::TField"*** %97, align 8
  %99 = ptrtoint %"class.sh::TField"** %98 to i64
  %100 = load %"class.sh::TField"**, %"class.sh::TField"*** %49, align 8
  %101 = icmp eq %"class.sh::TField"** %100, %98
  br i1 %101, label %271, label %102

102:                                              ; preds = %88
  %103 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %100, i64 -1
  %104 = ptrtoint %"class.sh::TField"** %103 to i64
  %105 = sub i64 %104, %99
  %106 = lshr i64 %105, 3
  %107 = add nuw nsw i64 %106, 1
  %108 = icmp ult i64 %107, 4
  br i1 %108, label %201, label %109

109:                                              ; preds = %102
  %110 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %100, i64 -1
  %111 = ptrtoint %"class.sh::TField"** %110 to i64
  %112 = sub i64 %111, %99
  %113 = lshr i64 %112, 3
  %114 = xor i64 %113, -1
  %115 = add nsw i64 %67, %114
  %116 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %90, i64 %115
  %117 = xor i64 %113, -1
  %118 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %100, i64 %117
  %119 = icmp ult %"class.sh::TField"** %116, %100
  %120 = icmp ult %"class.sh::TField"** %118, %91
  %121 = and i1 %119, %120
  br i1 %121, label %201, label %122

122:                                              ; preds = %109
  %123 = and i64 %107, 4611686018427387900
  %124 = sub nsw i64 0, %123
  %125 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %91, i64 %124
  %126 = sub nsw i64 0, %123
  %127 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %100, i64 %126
  %128 = add nsw i64 %123, -4
  %129 = lshr exact i64 %128, 2
  %130 = add nuw nsw i64 %129, 1
  %131 = and i64 %130, 1
  %132 = icmp eq i64 %128, 0
  br i1 %132, label %177, label %133

133:                                              ; preds = %122
  %134 = sub nuw nsw i64 %130, %131
  %135 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %91, i64 -1
  %136 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %100, i64 -1
  %137 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %91, i64 -1
  %138 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %100, i64 -1
  br label %139

139:                                              ; preds = %139, %133
  %140 = phi i64 [ 0, %133 ], [ %174, %139 ]
  %141 = phi i64 [ %134, %133 ], [ %175, %139 ]
  %142 = sub i64 0, %140
  %143 = sub i64 0, %140
  %144 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %135, i64 %142
  %145 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %136, i64 %143
  %146 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %145, i64 -1
  %147 = bitcast %"class.sh::TField"** %146 to <2 x i64>*
  %148 = load <2 x i64>, <2 x i64>* %147, align 8, !alias.scope !11
  %149 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %145, i64 -2
  %150 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %149, i64 -1
  %151 = bitcast %"class.sh::TField"** %150 to <2 x i64>*
  %152 = load <2 x i64>, <2 x i64>* %151, align 8, !alias.scope !11
  %153 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %144, i64 -1
  %154 = bitcast %"class.sh::TField"** %153 to <2 x i64>*
  store <2 x i64> %148, <2 x i64>* %154, align 8, !alias.scope !14, !noalias !11
  %155 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %144, i64 -2
  %156 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %155, i64 -1
  %157 = bitcast %"class.sh::TField"** %156 to <2 x i64>*
  store <2 x i64> %152, <2 x i64>* %157, align 8, !alias.scope !14, !noalias !11
  %158 = sub nuw nsw i64 -4, %140
  %159 = sub nuw nsw i64 -4, %140
  %160 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %137, i64 %158
  %161 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %138, i64 %159
  %162 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %161, i64 -1
  %163 = bitcast %"class.sh::TField"** %162 to <2 x i64>*
  %164 = load <2 x i64>, <2 x i64>* %163, align 8, !alias.scope !11
  %165 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %161, i64 -2
  %166 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %165, i64 -1
  %167 = bitcast %"class.sh::TField"** %166 to <2 x i64>*
  %168 = load <2 x i64>, <2 x i64>* %167, align 8, !alias.scope !11
  %169 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %160, i64 -1
  %170 = bitcast %"class.sh::TField"** %169 to <2 x i64>*
  store <2 x i64> %164, <2 x i64>* %170, align 8, !alias.scope !14, !noalias !11
  %171 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %160, i64 -2
  %172 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %171, i64 -1
  %173 = bitcast %"class.sh::TField"** %172 to <2 x i64>*
  store <2 x i64> %168, <2 x i64>* %173, align 8, !alias.scope !14, !noalias !11
  %174 = add i64 %140, 8
  %175 = add i64 %141, -2
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %177, label %139, !llvm.loop !16

177:                                              ; preds = %139, %122
  %178 = phi i64 [ 0, %122 ], [ %174, %139 ]
  %179 = icmp eq i64 %131, 0
  br i1 %179, label %199, label %180

180:                                              ; preds = %177
  %181 = sub i64 0, %178
  %182 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %91, i64 -1
  %183 = sub i64 0, %178
  %184 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %100, i64 -1
  %185 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %182, i64 %181
  %186 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %184, i64 %183
  %187 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %186, i64 -1
  %188 = bitcast %"class.sh::TField"** %187 to <2 x i64>*
  %189 = load <2 x i64>, <2 x i64>* %188, align 8, !alias.scope !11
  %190 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %186, i64 -2
  %191 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %190, i64 -1
  %192 = bitcast %"class.sh::TField"** %191 to <2 x i64>*
  %193 = load <2 x i64>, <2 x i64>* %192, align 8, !alias.scope !11
  %194 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %185, i64 -1
  %195 = bitcast %"class.sh::TField"** %194 to <2 x i64>*
  store <2 x i64> %189, <2 x i64>* %195, align 8, !alias.scope !14, !noalias !11
  %196 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %185, i64 -2
  %197 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %196, i64 -1
  %198 = bitcast %"class.sh::TField"** %197 to <2 x i64>*
  store <2 x i64> %193, <2 x i64>* %198, align 8, !alias.scope !14, !noalias !11
  br label %199

199:                                              ; preds = %177, %180
  %200 = icmp eq i64 %107, %123
  br i1 %200, label %271, label %201

201:                                              ; preds = %199, %109, %102
  %202 = phi %"class.sh::TField"** [ %91, %109 ], [ %91, %102 ], [ %125, %199 ]
  %203 = phi %"class.sh::TField"** [ %100, %109 ], [ %100, %102 ], [ %127, %199 ]
  %204 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %203, i64 -1
  %205 = ptrtoint %"class.sh::TField"** %204 to i64
  %206 = sub i64 %205, %99
  %207 = lshr i64 %206, 3
  %208 = add nuw nsw i64 %207, 1
  %209 = and i64 %208, 7
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %222, label %211

211:                                              ; preds = %201, %211
  %212 = phi %"class.sh::TField"** [ %215, %211 ], [ %202, %201 ]
  %213 = phi %"class.sh::TField"** [ %216, %211 ], [ %203, %201 ]
  %214 = phi i64 [ %220, %211 ], [ %209, %201 ]
  %215 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %212, i64 -1
  %216 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %213, i64 -1
  %217 = bitcast %"class.sh::TField"** %216 to i64*
  %218 = load i64, i64* %217, align 8
  %219 = bitcast %"class.sh::TField"** %215 to i64*
  store i64 %218, i64* %219, align 8
  %220 = add i64 %214, -1
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %222, label %211, !llvm.loop !18

222:                                              ; preds = %211, %201
  %223 = phi %"class.sh::TField"** [ undef, %201 ], [ %215, %211 ]
  %224 = phi %"class.sh::TField"** [ %202, %201 ], [ %215, %211 ]
  %225 = phi %"class.sh::TField"** [ %203, %201 ], [ %216, %211 ]
  %226 = icmp ult i64 %206, 56
  br i1 %226, label %271, label %227

227:                                              ; preds = %222, %227
  %228 = phi %"class.sh::TField"** [ %265, %227 ], [ %224, %222 ]
  %229 = phi %"class.sh::TField"** [ %266, %227 ], [ %225, %222 ]
  %230 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %228, i64 -1
  %231 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %229, i64 -1
  %232 = bitcast %"class.sh::TField"** %231 to i64*
  %233 = load i64, i64* %232, align 8
  %234 = bitcast %"class.sh::TField"** %230 to i64*
  store i64 %233, i64* %234, align 8
  %235 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %228, i64 -2
  %236 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %229, i64 -2
  %237 = bitcast %"class.sh::TField"** %236 to i64*
  %238 = load i64, i64* %237, align 8
  %239 = bitcast %"class.sh::TField"** %235 to i64*
  store i64 %238, i64* %239, align 8
  %240 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %228, i64 -3
  %241 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %229, i64 -3
  %242 = bitcast %"class.sh::TField"** %241 to i64*
  %243 = load i64, i64* %242, align 8
  %244 = bitcast %"class.sh::TField"** %240 to i64*
  store i64 %243, i64* %244, align 8
  %245 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %228, i64 -4
  %246 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %229, i64 -4
  %247 = bitcast %"class.sh::TField"** %246 to i64*
  %248 = load i64, i64* %247, align 8
  %249 = bitcast %"class.sh::TField"** %245 to i64*
  store i64 %248, i64* %249, align 8
  %250 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %228, i64 -5
  %251 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %229, i64 -5
  %252 = bitcast %"class.sh::TField"** %251 to i64*
  %253 = load i64, i64* %252, align 8
  %254 = bitcast %"class.sh::TField"** %250 to i64*
  store i64 %253, i64* %254, align 8
  %255 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %228, i64 -6
  %256 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %229, i64 -6
  %257 = bitcast %"class.sh::TField"** %256 to i64*
  %258 = load i64, i64* %257, align 8
  %259 = bitcast %"class.sh::TField"** %255 to i64*
  store i64 %258, i64* %259, align 8
  %260 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %228, i64 -7
  %261 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %229, i64 -7
  %262 = bitcast %"class.sh::TField"** %261 to i64*
  %263 = load i64, i64* %262, align 8
  %264 = bitcast %"class.sh::TField"** %260 to i64*
  store i64 %263, i64* %264, align 8
  %265 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %228, i64 -8
  %266 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %229, i64 -8
  %267 = bitcast %"class.sh::TField"** %266 to i64*
  %268 = load i64, i64* %267, align 8
  %269 = bitcast %"class.sh::TField"** %265 to i64*
  store i64 %268, i64* %269, align 8
  %270 = icmp eq %"class.sh::TField"** %266, %98
  br i1 %270, label %271, label %227, !llvm.loop !20

271:                                              ; preds = %222, %227, %199, %88
  %272 = phi %"class.sh::TField"** [ %91, %88 ], [ %125, %199 ], [ %223, %222 ], [ %265, %227 ]
  %273 = ptrtoint %"class.sh::TField"** %272 to i64
  store i64 %273, i64* %64, align 8
  store i64 %96, i64* %63, align 8
  store i64 %93, i64* %73, align 8
  br label %274

274:                                              ; preds = %56, %271
  %275 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %276 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %275, i64 48) #6
  %277 = bitcast i8* %276 to i8**
  store i8* %14, i8** %277, align 8
  %278 = getelementptr inbounds i8, i8* %276, i64 8
  %279 = bitcast i8* %278 to i8**
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0), i8** %279, align 8
  %280 = getelementptr inbounds i8, i8* %276, i64 16
  %281 = bitcast i8* %280 to i64*
  store i64 12, i64* %281, align 8
  %282 = getelementptr inbounds i8, i8* %276, i64 24
  call void @llvm.memset.p0i8.i64(i8* align 8 %282, i8 0, i64 16, i1 false)
  %283 = getelementptr inbounds i8, i8* %276, i64 40
  store i8 2, i8* %283, align 8
  %284 = ptrtoint i8* %276 to i64
  %285 = load %"class.sh::TField"**, %"class.sh::TField"*** %49, align 8
  %286 = load %"class.sh::TField"**, %"class.sh::TField"*** %52, align 8
  %287 = icmp ult %"class.sh::TField"** %285, %286
  %288 = ptrtoint %"class.sh::TField"** %286 to i64
  br i1 %287, label %289, label %294

289:                                              ; preds = %274
  %290 = bitcast %"class.sh::TField"** %285 to i64*
  store i64 %284, i64* %290, align 8
  %291 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %285, i64 1
  %292 = ptrtoint %"class.sh::TField"** %291 to i64
  %293 = bitcast i8* %48 to i64*
  store i64 %292, i64* %293, align 8
  br label %507

294:                                              ; preds = %274
  %295 = ptrtoint %"class.sh::TField"** %285 to i64
  %296 = bitcast i8* %48 to i64*
  %297 = bitcast i8* %9 to i64*
  %298 = load i64, i64* %297, align 8
  %299 = sub i64 %295, %298
  %300 = ashr exact i64 %299, 3
  %301 = add nsw i64 %300, 1
  %302 = icmp ugt i64 %301, 2305843009213693951
  br i1 %302, label %303, label %305

303:                                              ; preds = %294
  %304 = bitcast i8* %9 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %304) #14
  unreachable

305:                                              ; preds = %294
  %306 = bitcast i8* %51 to i64*
  %307 = sub i64 %288, %298
  %308 = ashr exact i64 %307, 3
  %309 = icmp ult i64 %308, 1152921504606846975
  br i1 %309, label %310, label %315

310:                                              ; preds = %305
  %311 = ashr exact i64 %307, 2
  %312 = icmp ult i64 %311, %301
  %313 = select i1 %312, i64 %301, i64 %311
  %314 = icmp eq i64 %313, 0
  br i1 %314, label %321, label %315

315:                                              ; preds = %310, %305
  %316 = phi i64 [ %313, %310 ], [ 2305843009213693951, %305 ]
  %317 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %318 = shl i64 %316, 3
  %319 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %317, i64 %318) #6
  %320 = bitcast i8* %319 to %"class.sh::TField"**
  br label %321

321:                                              ; preds = %315, %310
  %322 = phi i64 [ %316, %315 ], [ 0, %310 ]
  %323 = phi %"class.sh::TField"** [ %320, %315 ], [ null, %310 ]
  %324 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %323, i64 %300
  %325 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %323, i64 %322
  %326 = ptrtoint %"class.sh::TField"** %325 to i64
  %327 = bitcast %"class.sh::TField"** %324 to i64*
  store i64 %284, i64* %327, align 8
  %328 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %324, i64 1
  %329 = ptrtoint %"class.sh::TField"** %328 to i64
  %330 = bitcast i8* %9 to %"class.sh::TField"***
  %331 = load %"class.sh::TField"**, %"class.sh::TField"*** %330, align 8
  %332 = ptrtoint %"class.sh::TField"** %331 to i64
  %333 = load %"class.sh::TField"**, %"class.sh::TField"*** %49, align 8
  %334 = icmp eq %"class.sh::TField"** %333, %331
  br i1 %334, label %504, label %335

335:                                              ; preds = %321
  %336 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %333, i64 -1
  %337 = ptrtoint %"class.sh::TField"** %336 to i64
  %338 = sub i64 %337, %332
  %339 = lshr i64 %338, 3
  %340 = add nuw nsw i64 %339, 1
  %341 = icmp ult i64 %340, 4
  br i1 %341, label %434, label %342

342:                                              ; preds = %335
  %343 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %333, i64 -1
  %344 = ptrtoint %"class.sh::TField"** %343 to i64
  %345 = sub i64 %344, %332
  %346 = lshr i64 %345, 3
  %347 = xor i64 %346, -1
  %348 = add nsw i64 %300, %347
  %349 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %323, i64 %348
  %350 = xor i64 %346, -1
  %351 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %333, i64 %350
  %352 = icmp ult %"class.sh::TField"** %349, %333
  %353 = icmp ult %"class.sh::TField"** %351, %324
  %354 = and i1 %352, %353
  br i1 %354, label %434, label %355

355:                                              ; preds = %342
  %356 = and i64 %340, 4611686018427387900
  %357 = sub nsw i64 0, %356
  %358 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %324, i64 %357
  %359 = sub nsw i64 0, %356
  %360 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %333, i64 %359
  %361 = add nsw i64 %356, -4
  %362 = lshr exact i64 %361, 2
  %363 = add nuw nsw i64 %362, 1
  %364 = and i64 %363, 1
  %365 = icmp eq i64 %361, 0
  br i1 %365, label %410, label %366

366:                                              ; preds = %355
  %367 = sub nuw nsw i64 %363, %364
  %368 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %324, i64 -1
  %369 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %333, i64 -1
  %370 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %324, i64 -1
  %371 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %333, i64 -1
  br label %372

372:                                              ; preds = %372, %366
  %373 = phi i64 [ 0, %366 ], [ %407, %372 ]
  %374 = phi i64 [ %367, %366 ], [ %408, %372 ]
  %375 = sub i64 0, %373
  %376 = sub i64 0, %373
  %377 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %368, i64 %375
  %378 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %369, i64 %376
  %379 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %378, i64 -1
  %380 = bitcast %"class.sh::TField"** %379 to <2 x i64>*
  %381 = load <2 x i64>, <2 x i64>* %380, align 8, !alias.scope !21
  %382 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %378, i64 -2
  %383 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %382, i64 -1
  %384 = bitcast %"class.sh::TField"** %383 to <2 x i64>*
  %385 = load <2 x i64>, <2 x i64>* %384, align 8, !alias.scope !21
  %386 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %377, i64 -1
  %387 = bitcast %"class.sh::TField"** %386 to <2 x i64>*
  store <2 x i64> %381, <2 x i64>* %387, align 8, !alias.scope !24, !noalias !21
  %388 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %377, i64 -2
  %389 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %388, i64 -1
  %390 = bitcast %"class.sh::TField"** %389 to <2 x i64>*
  store <2 x i64> %385, <2 x i64>* %390, align 8, !alias.scope !24, !noalias !21
  %391 = sub nuw nsw i64 -4, %373
  %392 = sub nuw nsw i64 -4, %373
  %393 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %370, i64 %391
  %394 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %371, i64 %392
  %395 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %394, i64 -1
  %396 = bitcast %"class.sh::TField"** %395 to <2 x i64>*
  %397 = load <2 x i64>, <2 x i64>* %396, align 8, !alias.scope !21
  %398 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %394, i64 -2
  %399 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %398, i64 -1
  %400 = bitcast %"class.sh::TField"** %399 to <2 x i64>*
  %401 = load <2 x i64>, <2 x i64>* %400, align 8, !alias.scope !21
  %402 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %393, i64 -1
  %403 = bitcast %"class.sh::TField"** %402 to <2 x i64>*
  store <2 x i64> %397, <2 x i64>* %403, align 8, !alias.scope !24, !noalias !21
  %404 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %393, i64 -2
  %405 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %404, i64 -1
  %406 = bitcast %"class.sh::TField"** %405 to <2 x i64>*
  store <2 x i64> %401, <2 x i64>* %406, align 8, !alias.scope !24, !noalias !21
  %407 = add i64 %373, 8
  %408 = add i64 %374, -2
  %409 = icmp eq i64 %408, 0
  br i1 %409, label %410, label %372, !llvm.loop !26

410:                                              ; preds = %372, %355
  %411 = phi i64 [ 0, %355 ], [ %407, %372 ]
  %412 = icmp eq i64 %364, 0
  br i1 %412, label %432, label %413

413:                                              ; preds = %410
  %414 = sub i64 0, %411
  %415 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %324, i64 -1
  %416 = sub i64 0, %411
  %417 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %333, i64 -1
  %418 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %415, i64 %414
  %419 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %417, i64 %416
  %420 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %419, i64 -1
  %421 = bitcast %"class.sh::TField"** %420 to <2 x i64>*
  %422 = load <2 x i64>, <2 x i64>* %421, align 8, !alias.scope !21
  %423 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %419, i64 -2
  %424 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %423, i64 -1
  %425 = bitcast %"class.sh::TField"** %424 to <2 x i64>*
  %426 = load <2 x i64>, <2 x i64>* %425, align 8, !alias.scope !21
  %427 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %418, i64 -1
  %428 = bitcast %"class.sh::TField"** %427 to <2 x i64>*
  store <2 x i64> %422, <2 x i64>* %428, align 8, !alias.scope !24, !noalias !21
  %429 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %418, i64 -2
  %430 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %429, i64 -1
  %431 = bitcast %"class.sh::TField"** %430 to <2 x i64>*
  store <2 x i64> %426, <2 x i64>* %431, align 8, !alias.scope !24, !noalias !21
  br label %432

432:                                              ; preds = %410, %413
  %433 = icmp eq i64 %340, %356
  br i1 %433, label %504, label %434

434:                                              ; preds = %432, %342, %335
  %435 = phi %"class.sh::TField"** [ %324, %342 ], [ %324, %335 ], [ %358, %432 ]
  %436 = phi %"class.sh::TField"** [ %333, %342 ], [ %333, %335 ], [ %360, %432 ]
  %437 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %436, i64 -1
  %438 = ptrtoint %"class.sh::TField"** %437 to i64
  %439 = sub i64 %438, %332
  %440 = lshr i64 %439, 3
  %441 = add nuw nsw i64 %440, 1
  %442 = and i64 %441, 7
  %443 = icmp eq i64 %442, 0
  br i1 %443, label %455, label %444

444:                                              ; preds = %434, %444
  %445 = phi %"class.sh::TField"** [ %448, %444 ], [ %435, %434 ]
  %446 = phi %"class.sh::TField"** [ %449, %444 ], [ %436, %434 ]
  %447 = phi i64 [ %453, %444 ], [ %442, %434 ]
  %448 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %445, i64 -1
  %449 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %446, i64 -1
  %450 = bitcast %"class.sh::TField"** %449 to i64*
  %451 = load i64, i64* %450, align 8
  %452 = bitcast %"class.sh::TField"** %448 to i64*
  store i64 %451, i64* %452, align 8
  %453 = add i64 %447, -1
  %454 = icmp eq i64 %453, 0
  br i1 %454, label %455, label %444, !llvm.loop !27

455:                                              ; preds = %444, %434
  %456 = phi %"class.sh::TField"** [ undef, %434 ], [ %448, %444 ]
  %457 = phi %"class.sh::TField"** [ %435, %434 ], [ %448, %444 ]
  %458 = phi %"class.sh::TField"** [ %436, %434 ], [ %449, %444 ]
  %459 = icmp ult i64 %439, 56
  br i1 %459, label %504, label %460

460:                                              ; preds = %455, %460
  %461 = phi %"class.sh::TField"** [ %498, %460 ], [ %457, %455 ]
  %462 = phi %"class.sh::TField"** [ %499, %460 ], [ %458, %455 ]
  %463 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %461, i64 -1
  %464 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %462, i64 -1
  %465 = bitcast %"class.sh::TField"** %464 to i64*
  %466 = load i64, i64* %465, align 8
  %467 = bitcast %"class.sh::TField"** %463 to i64*
  store i64 %466, i64* %467, align 8
  %468 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %461, i64 -2
  %469 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %462, i64 -2
  %470 = bitcast %"class.sh::TField"** %469 to i64*
  %471 = load i64, i64* %470, align 8
  %472 = bitcast %"class.sh::TField"** %468 to i64*
  store i64 %471, i64* %472, align 8
  %473 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %461, i64 -3
  %474 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %462, i64 -3
  %475 = bitcast %"class.sh::TField"** %474 to i64*
  %476 = load i64, i64* %475, align 8
  %477 = bitcast %"class.sh::TField"** %473 to i64*
  store i64 %476, i64* %477, align 8
  %478 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %461, i64 -4
  %479 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %462, i64 -4
  %480 = bitcast %"class.sh::TField"** %479 to i64*
  %481 = load i64, i64* %480, align 8
  %482 = bitcast %"class.sh::TField"** %478 to i64*
  store i64 %481, i64* %482, align 8
  %483 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %461, i64 -5
  %484 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %462, i64 -5
  %485 = bitcast %"class.sh::TField"** %484 to i64*
  %486 = load i64, i64* %485, align 8
  %487 = bitcast %"class.sh::TField"** %483 to i64*
  store i64 %486, i64* %487, align 8
  %488 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %461, i64 -6
  %489 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %462, i64 -6
  %490 = bitcast %"class.sh::TField"** %489 to i64*
  %491 = load i64, i64* %490, align 8
  %492 = bitcast %"class.sh::TField"** %488 to i64*
  store i64 %491, i64* %492, align 8
  %493 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %461, i64 -7
  %494 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %462, i64 -7
  %495 = bitcast %"class.sh::TField"** %494 to i64*
  %496 = load i64, i64* %495, align 8
  %497 = bitcast %"class.sh::TField"** %493 to i64*
  store i64 %496, i64* %497, align 8
  %498 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %461, i64 -8
  %499 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %462, i64 -8
  %500 = bitcast %"class.sh::TField"** %499 to i64*
  %501 = load i64, i64* %500, align 8
  %502 = bitcast %"class.sh::TField"** %498 to i64*
  store i64 %501, i64* %502, align 8
  %503 = icmp eq %"class.sh::TField"** %499, %331
  br i1 %503, label %504, label %460, !llvm.loop !28

504:                                              ; preds = %455, %460, %432, %321
  %505 = phi %"class.sh::TField"** [ %324, %321 ], [ %358, %432 ], [ %456, %455 ], [ %498, %460 ]
  %506 = ptrtoint %"class.sh::TField"** %505 to i64
  store i64 %506, i64* %297, align 8
  store i64 %329, i64* %296, align 8
  store i64 %326, i64* %306, align 8
  br label %507

507:                                              ; preds = %289, %504
  %508 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %509 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %508, i64 48) #6
  %510 = bitcast i8* %509 to i8**
  store i8* %17, i8** %510, align 8
  %511 = getelementptr inbounds i8, i8* %509, i64 8
  %512 = bitcast i8* %511 to i8**
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8** %512, align 8
  %513 = getelementptr inbounds i8, i8* %509, i64 16
  %514 = bitcast i8* %513 to i64*
  store i64 15, i64* %514, align 8
  %515 = getelementptr inbounds i8, i8* %509, i64 24
  call void @llvm.memset.p0i8.i64(i8* align 8 %515, i8 0, i64 16, i1 false)
  %516 = getelementptr inbounds i8, i8* %509, i64 40
  store i8 2, i8* %516, align 8
  %517 = ptrtoint i8* %509 to i64
  %518 = load %"class.sh::TField"**, %"class.sh::TField"*** %49, align 8
  %519 = load %"class.sh::TField"**, %"class.sh::TField"*** %52, align 8
  %520 = icmp ult %"class.sh::TField"** %518, %519
  %521 = ptrtoint %"class.sh::TField"** %519 to i64
  br i1 %520, label %522, label %527

522:                                              ; preds = %507
  %523 = bitcast %"class.sh::TField"** %518 to i64*
  store i64 %517, i64* %523, align 8
  %524 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %518, i64 1
  %525 = ptrtoint %"class.sh::TField"** %524 to i64
  %526 = bitcast i8* %48 to i64*
  store i64 %525, i64* %526, align 8
  br label %740

527:                                              ; preds = %507
  %528 = ptrtoint %"class.sh::TField"** %518 to i64
  %529 = bitcast i8* %48 to i64*
  %530 = bitcast i8* %9 to i64*
  %531 = load i64, i64* %530, align 8
  %532 = sub i64 %528, %531
  %533 = ashr exact i64 %532, 3
  %534 = add nsw i64 %533, 1
  %535 = icmp ugt i64 %534, 2305843009213693951
  br i1 %535, label %536, label %538

536:                                              ; preds = %527
  %537 = bitcast i8* %9 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %537) #14
  unreachable

538:                                              ; preds = %527
  %539 = bitcast i8* %51 to i64*
  %540 = sub i64 %521, %531
  %541 = ashr exact i64 %540, 3
  %542 = icmp ult i64 %541, 1152921504606846975
  br i1 %542, label %543, label %548

543:                                              ; preds = %538
  %544 = ashr exact i64 %540, 2
  %545 = icmp ult i64 %544, %534
  %546 = select i1 %545, i64 %534, i64 %544
  %547 = icmp eq i64 %546, 0
  br i1 %547, label %554, label %548

548:                                              ; preds = %543, %538
  %549 = phi i64 [ %546, %543 ], [ 2305843009213693951, %538 ]
  %550 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %551 = shl i64 %549, 3
  %552 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %550, i64 %551) #6
  %553 = bitcast i8* %552 to %"class.sh::TField"**
  br label %554

554:                                              ; preds = %548, %543
  %555 = phi i64 [ %549, %548 ], [ 0, %543 ]
  %556 = phi %"class.sh::TField"** [ %553, %548 ], [ null, %543 ]
  %557 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %556, i64 %533
  %558 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %556, i64 %555
  %559 = ptrtoint %"class.sh::TField"** %558 to i64
  %560 = bitcast %"class.sh::TField"** %557 to i64*
  store i64 %517, i64* %560, align 8
  %561 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %557, i64 1
  %562 = ptrtoint %"class.sh::TField"** %561 to i64
  %563 = bitcast i8* %9 to %"class.sh::TField"***
  %564 = load %"class.sh::TField"**, %"class.sh::TField"*** %563, align 8
  %565 = ptrtoint %"class.sh::TField"** %564 to i64
  %566 = load %"class.sh::TField"**, %"class.sh::TField"*** %49, align 8
  %567 = icmp eq %"class.sh::TField"** %566, %564
  br i1 %567, label %737, label %568

568:                                              ; preds = %554
  %569 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %566, i64 -1
  %570 = ptrtoint %"class.sh::TField"** %569 to i64
  %571 = sub i64 %570, %565
  %572 = lshr i64 %571, 3
  %573 = add nuw nsw i64 %572, 1
  %574 = icmp ult i64 %573, 4
  br i1 %574, label %667, label %575

575:                                              ; preds = %568
  %576 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %566, i64 -1
  %577 = ptrtoint %"class.sh::TField"** %576 to i64
  %578 = sub i64 %577, %565
  %579 = lshr i64 %578, 3
  %580 = xor i64 %579, -1
  %581 = add nsw i64 %533, %580
  %582 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %556, i64 %581
  %583 = xor i64 %579, -1
  %584 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %566, i64 %583
  %585 = icmp ult %"class.sh::TField"** %582, %566
  %586 = icmp ult %"class.sh::TField"** %584, %557
  %587 = and i1 %585, %586
  br i1 %587, label %667, label %588

588:                                              ; preds = %575
  %589 = and i64 %573, 4611686018427387900
  %590 = sub nsw i64 0, %589
  %591 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %557, i64 %590
  %592 = sub nsw i64 0, %589
  %593 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %566, i64 %592
  %594 = add nsw i64 %589, -4
  %595 = lshr exact i64 %594, 2
  %596 = add nuw nsw i64 %595, 1
  %597 = and i64 %596, 1
  %598 = icmp eq i64 %594, 0
  br i1 %598, label %643, label %599

599:                                              ; preds = %588
  %600 = sub nuw nsw i64 %596, %597
  %601 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %557, i64 -1
  %602 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %566, i64 -1
  %603 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %557, i64 -1
  %604 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %566, i64 -1
  br label %605

605:                                              ; preds = %605, %599
  %606 = phi i64 [ 0, %599 ], [ %640, %605 ]
  %607 = phi i64 [ %600, %599 ], [ %641, %605 ]
  %608 = sub i64 0, %606
  %609 = sub i64 0, %606
  %610 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %601, i64 %608
  %611 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %602, i64 %609
  %612 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %611, i64 -1
  %613 = bitcast %"class.sh::TField"** %612 to <2 x i64>*
  %614 = load <2 x i64>, <2 x i64>* %613, align 8, !alias.scope !29
  %615 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %611, i64 -2
  %616 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %615, i64 -1
  %617 = bitcast %"class.sh::TField"** %616 to <2 x i64>*
  %618 = load <2 x i64>, <2 x i64>* %617, align 8, !alias.scope !29
  %619 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %610, i64 -1
  %620 = bitcast %"class.sh::TField"** %619 to <2 x i64>*
  store <2 x i64> %614, <2 x i64>* %620, align 8, !alias.scope !32, !noalias !29
  %621 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %610, i64 -2
  %622 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %621, i64 -1
  %623 = bitcast %"class.sh::TField"** %622 to <2 x i64>*
  store <2 x i64> %618, <2 x i64>* %623, align 8, !alias.scope !32, !noalias !29
  %624 = sub nuw nsw i64 -4, %606
  %625 = sub nuw nsw i64 -4, %606
  %626 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %603, i64 %624
  %627 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %604, i64 %625
  %628 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %627, i64 -1
  %629 = bitcast %"class.sh::TField"** %628 to <2 x i64>*
  %630 = load <2 x i64>, <2 x i64>* %629, align 8, !alias.scope !29
  %631 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %627, i64 -2
  %632 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %631, i64 -1
  %633 = bitcast %"class.sh::TField"** %632 to <2 x i64>*
  %634 = load <2 x i64>, <2 x i64>* %633, align 8, !alias.scope !29
  %635 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %626, i64 -1
  %636 = bitcast %"class.sh::TField"** %635 to <2 x i64>*
  store <2 x i64> %630, <2 x i64>* %636, align 8, !alias.scope !32, !noalias !29
  %637 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %626, i64 -2
  %638 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %637, i64 -1
  %639 = bitcast %"class.sh::TField"** %638 to <2 x i64>*
  store <2 x i64> %634, <2 x i64>* %639, align 8, !alias.scope !32, !noalias !29
  %640 = add i64 %606, 8
  %641 = add i64 %607, -2
  %642 = icmp eq i64 %641, 0
  br i1 %642, label %643, label %605, !llvm.loop !34

643:                                              ; preds = %605, %588
  %644 = phi i64 [ 0, %588 ], [ %640, %605 ]
  %645 = icmp eq i64 %597, 0
  br i1 %645, label %665, label %646

646:                                              ; preds = %643
  %647 = sub i64 0, %644
  %648 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %557, i64 -1
  %649 = sub i64 0, %644
  %650 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %566, i64 -1
  %651 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %648, i64 %647
  %652 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %650, i64 %649
  %653 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %652, i64 -1
  %654 = bitcast %"class.sh::TField"** %653 to <2 x i64>*
  %655 = load <2 x i64>, <2 x i64>* %654, align 8, !alias.scope !29
  %656 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %652, i64 -2
  %657 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %656, i64 -1
  %658 = bitcast %"class.sh::TField"** %657 to <2 x i64>*
  %659 = load <2 x i64>, <2 x i64>* %658, align 8, !alias.scope !29
  %660 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %651, i64 -1
  %661 = bitcast %"class.sh::TField"** %660 to <2 x i64>*
  store <2 x i64> %655, <2 x i64>* %661, align 8, !alias.scope !32, !noalias !29
  %662 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %651, i64 -2
  %663 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %662, i64 -1
  %664 = bitcast %"class.sh::TField"** %663 to <2 x i64>*
  store <2 x i64> %659, <2 x i64>* %664, align 8, !alias.scope !32, !noalias !29
  br label %665

665:                                              ; preds = %643, %646
  %666 = icmp eq i64 %573, %589
  br i1 %666, label %737, label %667

667:                                              ; preds = %665, %575, %568
  %668 = phi %"class.sh::TField"** [ %557, %575 ], [ %557, %568 ], [ %591, %665 ]
  %669 = phi %"class.sh::TField"** [ %566, %575 ], [ %566, %568 ], [ %593, %665 ]
  %670 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %669, i64 -1
  %671 = ptrtoint %"class.sh::TField"** %670 to i64
  %672 = sub i64 %671, %565
  %673 = lshr i64 %672, 3
  %674 = add nuw nsw i64 %673, 1
  %675 = and i64 %674, 7
  %676 = icmp eq i64 %675, 0
  br i1 %676, label %688, label %677

677:                                              ; preds = %667, %677
  %678 = phi %"class.sh::TField"** [ %681, %677 ], [ %668, %667 ]
  %679 = phi %"class.sh::TField"** [ %682, %677 ], [ %669, %667 ]
  %680 = phi i64 [ %686, %677 ], [ %675, %667 ]
  %681 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %678, i64 -1
  %682 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %679, i64 -1
  %683 = bitcast %"class.sh::TField"** %682 to i64*
  %684 = load i64, i64* %683, align 8
  %685 = bitcast %"class.sh::TField"** %681 to i64*
  store i64 %684, i64* %685, align 8
  %686 = add i64 %680, -1
  %687 = icmp eq i64 %686, 0
  br i1 %687, label %688, label %677, !llvm.loop !35

688:                                              ; preds = %677, %667
  %689 = phi %"class.sh::TField"** [ undef, %667 ], [ %681, %677 ]
  %690 = phi %"class.sh::TField"** [ %668, %667 ], [ %681, %677 ]
  %691 = phi %"class.sh::TField"** [ %669, %667 ], [ %682, %677 ]
  %692 = icmp ult i64 %672, 56
  br i1 %692, label %737, label %693

693:                                              ; preds = %688, %693
  %694 = phi %"class.sh::TField"** [ %731, %693 ], [ %690, %688 ]
  %695 = phi %"class.sh::TField"** [ %732, %693 ], [ %691, %688 ]
  %696 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %694, i64 -1
  %697 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %695, i64 -1
  %698 = bitcast %"class.sh::TField"** %697 to i64*
  %699 = load i64, i64* %698, align 8
  %700 = bitcast %"class.sh::TField"** %696 to i64*
  store i64 %699, i64* %700, align 8
  %701 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %694, i64 -2
  %702 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %695, i64 -2
  %703 = bitcast %"class.sh::TField"** %702 to i64*
  %704 = load i64, i64* %703, align 8
  %705 = bitcast %"class.sh::TField"** %701 to i64*
  store i64 %704, i64* %705, align 8
  %706 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %694, i64 -3
  %707 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %695, i64 -3
  %708 = bitcast %"class.sh::TField"** %707 to i64*
  %709 = load i64, i64* %708, align 8
  %710 = bitcast %"class.sh::TField"** %706 to i64*
  store i64 %709, i64* %710, align 8
  %711 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %694, i64 -4
  %712 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %695, i64 -4
  %713 = bitcast %"class.sh::TField"** %712 to i64*
  %714 = load i64, i64* %713, align 8
  %715 = bitcast %"class.sh::TField"** %711 to i64*
  store i64 %714, i64* %715, align 8
  %716 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %694, i64 -5
  %717 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %695, i64 -5
  %718 = bitcast %"class.sh::TField"** %717 to i64*
  %719 = load i64, i64* %718, align 8
  %720 = bitcast %"class.sh::TField"** %716 to i64*
  store i64 %719, i64* %720, align 8
  %721 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %694, i64 -6
  %722 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %695, i64 -6
  %723 = bitcast %"class.sh::TField"** %722 to i64*
  %724 = load i64, i64* %723, align 8
  %725 = bitcast %"class.sh::TField"** %721 to i64*
  store i64 %724, i64* %725, align 8
  %726 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %694, i64 -7
  %727 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %695, i64 -7
  %728 = bitcast %"class.sh::TField"** %727 to i64*
  %729 = load i64, i64* %728, align 8
  %730 = bitcast %"class.sh::TField"** %726 to i64*
  store i64 %729, i64* %730, align 8
  %731 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %694, i64 -8
  %732 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %695, i64 -8
  %733 = bitcast %"class.sh::TField"** %732 to i64*
  %734 = load i64, i64* %733, align 8
  %735 = bitcast %"class.sh::TField"** %731 to i64*
  store i64 %734, i64* %735, align 8
  %736 = icmp eq %"class.sh::TField"** %732, %564
  br i1 %736, label %737, label %693, !llvm.loop !36

737:                                              ; preds = %688, %693, %665, %554
  %738 = phi %"class.sh::TField"** [ %557, %554 ], [ %591, %665 ], [ %689, %688 ], [ %731, %693 ]
  %739 = ptrtoint %"class.sh::TField"** %738 to i64
  store i64 %739, i64* %530, align 8
  store i64 %562, i64* %529, align 8
  store i64 %559, i64* %539, align 8
  br label %740

740:                                              ; preds = %522, %737
  %741 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %742 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %741, i64 48) #6
  %743 = bitcast i8* %742 to i8**
  store i8* %20, i8** %743, align 8
  %744 = getelementptr inbounds i8, i8* %742, i64 8
  %745 = bitcast i8* %744 to i8**
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0), i8** %745, align 8
  %746 = getelementptr inbounds i8, i8* %742, i64 16
  %747 = bitcast i8* %746 to i64*
  store i64 15, i64* %747, align 8
  %748 = getelementptr inbounds i8, i8* %742, i64 24
  call void @llvm.memset.p0i8.i64(i8* align 8 %748, i8 0, i64 16, i1 false)
  %749 = getelementptr inbounds i8, i8* %742, i64 40
  store i8 2, i8* %749, align 8
  %750 = ptrtoint i8* %742 to i64
  %751 = load %"class.sh::TField"**, %"class.sh::TField"*** %49, align 8
  %752 = load %"class.sh::TField"**, %"class.sh::TField"*** %52, align 8
  %753 = icmp ult %"class.sh::TField"** %751, %752
  %754 = ptrtoint %"class.sh::TField"** %752 to i64
  br i1 %753, label %755, label %760

755:                                              ; preds = %740
  %756 = bitcast %"class.sh::TField"** %751 to i64*
  store i64 %750, i64* %756, align 8
  %757 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %751, i64 1
  %758 = ptrtoint %"class.sh::TField"** %757 to i64
  %759 = bitcast i8* %48 to i64*
  store i64 %758, i64* %759, align 8
  br label %973

760:                                              ; preds = %740
  %761 = ptrtoint %"class.sh::TField"** %751 to i64
  %762 = bitcast i8* %48 to i64*
  %763 = bitcast i8* %9 to i64*
  %764 = load i64, i64* %763, align 8
  %765 = sub i64 %761, %764
  %766 = ashr exact i64 %765, 3
  %767 = add nsw i64 %766, 1
  %768 = icmp ugt i64 %767, 2305843009213693951
  br i1 %768, label %769, label %771

769:                                              ; preds = %760
  %770 = bitcast i8* %9 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %770) #14
  unreachable

771:                                              ; preds = %760
  %772 = bitcast i8* %51 to i64*
  %773 = sub i64 %754, %764
  %774 = ashr exact i64 %773, 3
  %775 = icmp ult i64 %774, 1152921504606846975
  br i1 %775, label %776, label %781

776:                                              ; preds = %771
  %777 = ashr exact i64 %773, 2
  %778 = icmp ult i64 %777, %767
  %779 = select i1 %778, i64 %767, i64 %777
  %780 = icmp eq i64 %779, 0
  br i1 %780, label %787, label %781

781:                                              ; preds = %776, %771
  %782 = phi i64 [ %779, %776 ], [ 2305843009213693951, %771 ]
  %783 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %784 = shl i64 %782, 3
  %785 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %783, i64 %784) #6
  %786 = bitcast i8* %785 to %"class.sh::TField"**
  br label %787

787:                                              ; preds = %781, %776
  %788 = phi i64 [ %782, %781 ], [ 0, %776 ]
  %789 = phi %"class.sh::TField"** [ %786, %781 ], [ null, %776 ]
  %790 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %789, i64 %766
  %791 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %789, i64 %788
  %792 = ptrtoint %"class.sh::TField"** %791 to i64
  %793 = bitcast %"class.sh::TField"** %790 to i64*
  store i64 %750, i64* %793, align 8
  %794 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %790, i64 1
  %795 = ptrtoint %"class.sh::TField"** %794 to i64
  %796 = bitcast i8* %9 to %"class.sh::TField"***
  %797 = load %"class.sh::TField"**, %"class.sh::TField"*** %796, align 8
  %798 = ptrtoint %"class.sh::TField"** %797 to i64
  %799 = load %"class.sh::TField"**, %"class.sh::TField"*** %49, align 8
  %800 = icmp eq %"class.sh::TField"** %799, %797
  br i1 %800, label %970, label %801

801:                                              ; preds = %787
  %802 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %799, i64 -1
  %803 = ptrtoint %"class.sh::TField"** %802 to i64
  %804 = sub i64 %803, %798
  %805 = lshr i64 %804, 3
  %806 = add nuw nsw i64 %805, 1
  %807 = icmp ult i64 %806, 4
  br i1 %807, label %900, label %808

808:                                              ; preds = %801
  %809 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %799, i64 -1
  %810 = ptrtoint %"class.sh::TField"** %809 to i64
  %811 = sub i64 %810, %798
  %812 = lshr i64 %811, 3
  %813 = xor i64 %812, -1
  %814 = add nsw i64 %766, %813
  %815 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %789, i64 %814
  %816 = xor i64 %812, -1
  %817 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %799, i64 %816
  %818 = icmp ult %"class.sh::TField"** %815, %799
  %819 = icmp ult %"class.sh::TField"** %817, %790
  %820 = and i1 %818, %819
  br i1 %820, label %900, label %821

821:                                              ; preds = %808
  %822 = and i64 %806, 4611686018427387900
  %823 = sub nsw i64 0, %822
  %824 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %790, i64 %823
  %825 = sub nsw i64 0, %822
  %826 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %799, i64 %825
  %827 = add nsw i64 %822, -4
  %828 = lshr exact i64 %827, 2
  %829 = add nuw nsw i64 %828, 1
  %830 = and i64 %829, 1
  %831 = icmp eq i64 %827, 0
  br i1 %831, label %878, label %832

832:                                              ; preds = %821
  %833 = sub nuw nsw i64 %829, %830
  %834 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %790, i64 -1
  %835 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %799, i64 -1
  %836 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %790, i64 -1
  %837 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %799, i64 -1
  br label %838

838:                                              ; preds = %838, %832
  %839 = phi i64 [ 0, %832 ], [ %873, %838 ]
  %840 = phi i64 [ %833, %832 ], [ %874, %838 ]
  %841 = sub i64 0, %839
  %842 = sub i64 0, %839
  %843 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %834, i64 %841
  %844 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %835, i64 %842
  %845 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %844, i64 -1
  %846 = bitcast %"class.sh::TField"** %845 to <2 x i64>*
  %847 = load <2 x i64>, <2 x i64>* %846, align 8, !alias.scope !37
  %848 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %844, i64 -2
  %849 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %848, i64 -1
  %850 = bitcast %"class.sh::TField"** %849 to <2 x i64>*
  %851 = load <2 x i64>, <2 x i64>* %850, align 8, !alias.scope !37
  %852 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %843, i64 -1
  %853 = bitcast %"class.sh::TField"** %852 to <2 x i64>*
  store <2 x i64> %847, <2 x i64>* %853, align 8, !alias.scope !40, !noalias !37
  %854 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %843, i64 -2
  %855 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %854, i64 -1
  %856 = bitcast %"class.sh::TField"** %855 to <2 x i64>*
  store <2 x i64> %851, <2 x i64>* %856, align 8, !alias.scope !40, !noalias !37
  %857 = sub nuw nsw i64 -4, %839
  %858 = sub nuw nsw i64 -4, %839
  %859 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %836, i64 %857
  %860 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %837, i64 %858
  %861 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %860, i64 -1
  %862 = bitcast %"class.sh::TField"** %861 to <2 x i64>*
  %863 = load <2 x i64>, <2 x i64>* %862, align 8, !alias.scope !37
  %864 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %860, i64 -2
  %865 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %864, i64 -1
  %866 = bitcast %"class.sh::TField"** %865 to <2 x i64>*
  %867 = load <2 x i64>, <2 x i64>* %866, align 8, !alias.scope !37
  %868 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %859, i64 -1
  %869 = bitcast %"class.sh::TField"** %868 to <2 x i64>*
  store <2 x i64> %863, <2 x i64>* %869, align 8, !alias.scope !40, !noalias !37
  %870 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %859, i64 -2
  %871 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %870, i64 -1
  %872 = bitcast %"class.sh::TField"** %871 to <2 x i64>*
  store <2 x i64> %867, <2 x i64>* %872, align 8, !alias.scope !40, !noalias !37
  %873 = add i64 %839, 8
  %874 = add i64 %840, -2
  %875 = icmp eq i64 %874, 0
  br i1 %875, label %876, label %838, !llvm.loop !42

876:                                              ; preds = %838
  %877 = sub nuw nsw i64 -8, %839
  br label %878

878:                                              ; preds = %876, %821
  %879 = phi i64 [ 0, %821 ], [ %877, %876 ]
  %880 = icmp eq i64 %830, 0
  br i1 %880, label %898, label %881

881:                                              ; preds = %878
  %882 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %790, i64 -1
  %883 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %799, i64 -1
  %884 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %882, i64 %879
  %885 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %883, i64 %879
  %886 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %885, i64 -1
  %887 = bitcast %"class.sh::TField"** %886 to <2 x i64>*
  %888 = load <2 x i64>, <2 x i64>* %887, align 8, !alias.scope !37
  %889 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %885, i64 -2
  %890 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %889, i64 -1
  %891 = bitcast %"class.sh::TField"** %890 to <2 x i64>*
  %892 = load <2 x i64>, <2 x i64>* %891, align 8, !alias.scope !37
  %893 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %884, i64 -1
  %894 = bitcast %"class.sh::TField"** %893 to <2 x i64>*
  store <2 x i64> %888, <2 x i64>* %894, align 8, !alias.scope !40, !noalias !37
  %895 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %884, i64 -2
  %896 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %895, i64 -1
  %897 = bitcast %"class.sh::TField"** %896 to <2 x i64>*
  store <2 x i64> %892, <2 x i64>* %897, align 8, !alias.scope !40, !noalias !37
  br label %898

898:                                              ; preds = %878, %881
  %899 = icmp eq i64 %806, %822
  br i1 %899, label %970, label %900

900:                                              ; preds = %898, %808, %801
  %901 = phi %"class.sh::TField"** [ %790, %808 ], [ %790, %801 ], [ %824, %898 ]
  %902 = phi %"class.sh::TField"** [ %799, %808 ], [ %799, %801 ], [ %826, %898 ]
  %903 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %902, i64 -1
  %904 = ptrtoint %"class.sh::TField"** %903 to i64
  %905 = sub i64 %904, %798
  %906 = lshr i64 %905, 3
  %907 = add nuw nsw i64 %906, 1
  %908 = and i64 %907, 7
  %909 = icmp eq i64 %908, 0
  br i1 %909, label %921, label %910

910:                                              ; preds = %900, %910
  %911 = phi %"class.sh::TField"** [ %914, %910 ], [ %901, %900 ]
  %912 = phi %"class.sh::TField"** [ %915, %910 ], [ %902, %900 ]
  %913 = phi i64 [ %919, %910 ], [ %908, %900 ]
  %914 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %911, i64 -1
  %915 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %912, i64 -1
  %916 = bitcast %"class.sh::TField"** %915 to i64*
  %917 = load i64, i64* %916, align 8
  %918 = bitcast %"class.sh::TField"** %914 to i64*
  store i64 %917, i64* %918, align 8
  %919 = add i64 %913, -1
  %920 = icmp eq i64 %919, 0
  br i1 %920, label %921, label %910, !llvm.loop !43

921:                                              ; preds = %910, %900
  %922 = phi %"class.sh::TField"** [ undef, %900 ], [ %914, %910 ]
  %923 = phi %"class.sh::TField"** [ %901, %900 ], [ %914, %910 ]
  %924 = phi %"class.sh::TField"** [ %902, %900 ], [ %915, %910 ]
  %925 = icmp ult i64 %905, 56
  br i1 %925, label %970, label %926

926:                                              ; preds = %921, %926
  %927 = phi %"class.sh::TField"** [ %964, %926 ], [ %923, %921 ]
  %928 = phi %"class.sh::TField"** [ %965, %926 ], [ %924, %921 ]
  %929 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %927, i64 -1
  %930 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %928, i64 -1
  %931 = bitcast %"class.sh::TField"** %930 to i64*
  %932 = load i64, i64* %931, align 8
  %933 = bitcast %"class.sh::TField"** %929 to i64*
  store i64 %932, i64* %933, align 8
  %934 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %927, i64 -2
  %935 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %928, i64 -2
  %936 = bitcast %"class.sh::TField"** %935 to i64*
  %937 = load i64, i64* %936, align 8
  %938 = bitcast %"class.sh::TField"** %934 to i64*
  store i64 %937, i64* %938, align 8
  %939 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %927, i64 -3
  %940 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %928, i64 -3
  %941 = bitcast %"class.sh::TField"** %940 to i64*
  %942 = load i64, i64* %941, align 8
  %943 = bitcast %"class.sh::TField"** %939 to i64*
  store i64 %942, i64* %943, align 8
  %944 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %927, i64 -4
  %945 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %928, i64 -4
  %946 = bitcast %"class.sh::TField"** %945 to i64*
  %947 = load i64, i64* %946, align 8
  %948 = bitcast %"class.sh::TField"** %944 to i64*
  store i64 %947, i64* %948, align 8
  %949 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %927, i64 -5
  %950 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %928, i64 -5
  %951 = bitcast %"class.sh::TField"** %950 to i64*
  %952 = load i64, i64* %951, align 8
  %953 = bitcast %"class.sh::TField"** %949 to i64*
  store i64 %952, i64* %953, align 8
  %954 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %927, i64 -6
  %955 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %928, i64 -6
  %956 = bitcast %"class.sh::TField"** %955 to i64*
  %957 = load i64, i64* %956, align 8
  %958 = bitcast %"class.sh::TField"** %954 to i64*
  store i64 %957, i64* %958, align 8
  %959 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %927, i64 -7
  %960 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %928, i64 -7
  %961 = bitcast %"class.sh::TField"** %960 to i64*
  %962 = load i64, i64* %961, align 8
  %963 = bitcast %"class.sh::TField"** %959 to i64*
  store i64 %962, i64* %963, align 8
  %964 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %927, i64 -8
  %965 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %928, i64 -8
  %966 = bitcast %"class.sh::TField"** %965 to i64*
  %967 = load i64, i64* %966, align 8
  %968 = bitcast %"class.sh::TField"** %964 to i64*
  store i64 %967, i64* %968, align 8
  %969 = icmp eq %"class.sh::TField"** %965, %797
  br i1 %969, label %970, label %926, !llvm.loop !44

970:                                              ; preds = %921, %926, %898, %787
  %971 = phi %"class.sh::TField"** [ %790, %787 ], [ %824, %898 ], [ %922, %921 ], [ %964, %926 ]
  %972 = ptrtoint %"class.sh::TField"** %971 to i64
  store i64 %972, i64* %763, align 8
  store i64 %795, i64* %762, align 8
  store i64 %792, i64* %772, align 8
  br label %973

973:                                              ; preds = %755, %970
  %974 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %975 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %974, i64 80) #6
  %976 = getelementptr inbounds %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser", %"class.sh::(anonymous namespace)::DeclarePerVertexBlocksTraverser"* %0, i64 0, i32 0, i32 8
  %977 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %976, align 8
  %978 = bitcast %"class.sh::ImmutableString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %978) #6
  %979 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %5, i64 0, i32 0
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i64 0, i64 0), i8** %979, align 8
  %980 = bitcast i8* %975 to %"class.sh::TInterfaceBlock"*
  %981 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %5, i64 0, i32 1
  store i64 12, i64* %981, align 8
  %982 = bitcast %"struct.sh::TLayoutQualifier"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 92, i8* nonnull %982) #6
  %983 = bitcast %"struct.sh::TLayoutQualifier"* %6 to <4 x i32>*
  store <4 x i32> <i32 -1, i32 0, i32 0, i32 0>, <4 x i32>* %983, align 16, !alias.scope !45
  %984 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %6, i64 0, i32 4, i32 0, i64 0
  %985 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %6, i64 0, i32 7
  %986 = bitcast i32* %984 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %986, i8 -1, i64 20, i1 false) #6, !alias.scope !45
  store i32 0, i32* %985, align 4, !alias.scope !45
  %987 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %6, i64 0, i32 8
  store i32 -1, i32* %987, align 8, !alias.scope !45
  %988 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %6, i64 0, i32 9
  store i8 0, i8* %988, align 4, !alias.scope !45
  %989 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %6, i64 0, i32 10
  store i8 0, i8* %989, align 1, !alias.scope !45
  %990 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %6, i64 0, i32 12
  store i32 0, i32* %990, align 16, !alias.scope !45
  %991 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %6, i64 0, i32 13
  store i32 0, i32* %991, align 4, !alias.scope !45
  %992 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %6, i64 0, i32 14
  store i32 -1, i32* %992, align 8, !alias.scope !45
  %993 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %6, i64 0, i32 15
  %994 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %6, i64 0, i32 20
  %995 = bitcast i32* %993 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %995, i8 0, i64 20, i1 false) #6, !alias.scope !45
  store i32 -1, i32* %994, align 16, !alias.scope !45
  %996 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %6, i64 0, i32 21
  store i32 -1, i32* %996, align 4, !alias.scope !45
  %997 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %6, i64 0, i32 22
  store i8 0, i8* %997, align 8, !alias.scope !45
  call void @_ZN2sh15TInterfaceBlockC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_7TVectorIPNS_6TFieldEEERKNS_16TLayoutQualifierENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TInterfaceBlock"* %980, %"class.sh::TSymbolTable"* %977, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %5, %"class.sh::TVector.23"* %39, %"struct.sh::TLayoutQualifier"* nonnull dereferenceable(92) %6, i8 zeroext 2, i8 zeroext 0) #6
  call void @llvm.lifetime.end.p0i8(i64 92, i8* nonnull %982) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %978) #6
  %998 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %999 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %998, i64 184) #6
  %1000 = bitcast i8* %999 to %"class.sh::TType"*
  %1001 = bitcast %"struct.sh::TLayoutQualifier"* %7 to <4 x i32>*
  store <4 x i32> <i32 -1, i32 0, i32 0, i32 0>, <4 x i32>* %1001, align 16, !alias.scope !48
  %1002 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %7, i64 0, i32 4, i32 0, i64 0
  %1003 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %7, i64 0, i32 7
  %1004 = bitcast i32* %1002 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %1004, i8 -1, i64 20, i1 false) #6, !alias.scope !48
  store i32 0, i32* %1003, align 4, !alias.scope !48
  %1005 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %7, i64 0, i32 8
  store i32 -1, i32* %1005, align 8, !alias.scope !48
  %1006 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %7, i64 0, i32 9
  store i8 0, i8* %1006, align 4, !alias.scope !48
  %1007 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %7, i64 0, i32 10
  store i8 0, i8* %1007, align 1, !alias.scope !48
  %1008 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %7, i64 0, i32 12
  store i32 0, i32* %1008, align 16, !alias.scope !48
  %1009 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %7, i64 0, i32 13
  store i32 0, i32* %1009, align 4, !alias.scope !48
  %1010 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %7, i64 0, i32 14
  store i32 -1, i32* %1010, align 8, !alias.scope !48
  %1011 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %7, i64 0, i32 15
  %1012 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %7, i64 0, i32 20
  %1013 = bitcast i32* %1011 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %1013, i8 0, i64 20, i1 false) #6, !alias.scope !48
  store i32 -1, i32* %1012, align 16, !alias.scope !48
  %1014 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %7, i64 0, i32 21
  store i32 -1, i32* %1014, align 4, !alias.scope !48
  %1015 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %7, i64 0, i32 22
  store i8 0, i8* %1015, align 8, !alias.scope !48
  call void @_ZN2sh5TTypeC1EPKNS_15TInterfaceBlockENS_10TQualifierENS_16TLayoutQualifierE(%"class.sh::TType"* %1000, %"class.sh::TInterfaceBlock"* %980, i32 %1, %"struct.sh::TLayoutQualifier"* nonnull byval(%"struct.sh::TLayoutQualifier") align 8 %7) #6
  %1016 = icmp eq i32 %2, 0
  br i1 %1016, label %1018, label %1017

1017:                                             ; preds = %973
  call void @_ZN2sh5TType9makeArrayEj(%"class.sh::TType"* %1000, i32 %2) #6
  br label %1018

1018:                                             ; preds = %973, %1017
  %1019 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %1020 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1019, i64 40) #6
  %1021 = bitcast i8* %1020 to %"class.sh::TVariable"*
  %1022 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %976, align 8
  %1023 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %3, i64 0, i32 1
  %1024 = load i64, i64* %1023, align 8
  %1025 = icmp eq i64 %1024, 0
  %1026 = select i1 %1025, i8 3, i8 2
  call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %1021, %"class.sh::TSymbolTable"* %1022, %"class.sh::ImmutableString"* dereferenceable(16) %3, %"class.sh::TType"* %1000, i8 zeroext %1026, i8 zeroext 0) #6
  ret %"class.sh::TVariable"* %1021
}

declare void @_ZN2sh5TType9makeArrayEj(%"class.sh::TType"*, i32) local_unnamed_addr #2

declare void @_ZN2sh15TInterfaceBlockC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_7TVectorIPNS_6TFieldEEERKNS_16TLayoutQualifierENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TInterfaceBlock"*, %"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::TVector.23"*, %"struct.sh::TLayoutQualifier"* dereferenceable(92), i8 zeroext, i8 zeroext) unnamed_addr #2

declare void @_ZN2sh5TTypeC1EPKNS_15TInterfaceBlockENS_10TQualifierENS_16TLayoutQualifierE(%"class.sh::TType"*, %"class.sh::TInterfaceBlock"*, i32, %"struct.sh::TLayoutQualifier"* byval(%"struct.sh::TLayoutQualifier") align 8) unnamed_addr #2

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

declare %"class.sh::TVariable"* @_ZNK2sh12TSymbolTable28getGlInVariableWithArraySizeEv(%"class.sh::TSymbolTable"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @llvm.assume(i1) #6

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #7

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"*, i64) local_unnamed_addr #9 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %1, 7
  %8 = ptrtoint i8* %4 to i64
  %9 = lshr i64 %8, 12
  %10 = xor i64 %9, %7
  %11 = and i64 %10, %6
  %12 = getelementptr inbounds i8, i8* %4, i64 %11
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  %15 = icmp slt <16 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %16 = bitcast <16 x i1> %15 to i16
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %2, %18
  %19 = phi i64 [ %23, %18 ], [ %11, %2 ]
  %20 = phi i64 [ %21, %18 ], [ 0, %2 ]
  %21 = add i64 %20, 16
  %22 = add i64 %21, %19
  %23 = and i64 %22, %6
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  %25 = bitcast i8* %24 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = icmp slt <16 x i8> %26, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %28 = bitcast <16 x i1> %27 to i16
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %18, label %30

30:                                               ; preds = %18, %2
  %31 = phi i64 [ %11, %2 ], [ %23, %18 ]
  %32 = phi i16 [ %16, %2 ], [ %28, %18 ]
  %33 = zext i16 %32 to i32
  %34 = tail call i32 @llvm.cttz.i32(i32 %33, i1 false) #6, !range !3
  %35 = zext i32 %34 to i64
  %36 = add i64 %31, %35
  %37 = and i64 %36, %6
  %38 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %93

41:                                               ; preds = %30
  %42 = getelementptr inbounds i8, i8* %4, i64 %37
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, -2
  br i1 %44, label %93, label %45, !prof !4

45:                                               ; preds = %41
  %46 = icmp eq i64 %6, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 1) #6
  br label %59

48:                                               ; preds = %45
  %49 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %50 = load i64, i64* %49, align 8
  %51 = lshr i64 %6, 3
  %52 = sub i64 %6, %51
  %53 = lshr i64 %52, 1
  %54 = icmp ugt i64 %50, %53
  br i1 %54, label %56, label %55

55:                                               ; preds = %48
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"* %0) #6
  br label %59

56:                                               ; preds = %48
  %57 = shl i64 %6, 1
  %58 = or i64 %57, 1
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 %58) #6
  br label %59

59:                                               ; preds = %47, %55, %56
  %60 = load i8*, i8** %3, align 8
  %61 = load i64, i64* %5, align 8
  %62 = ptrtoint i8* %60 to i64
  %63 = lshr i64 %62, 12
  %64 = xor i64 %63, %7
  %65 = and i64 %64, %61
  %66 = getelementptr inbounds i8, i8* %60, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = icmp slt <16 x i8> %68, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %59, %72
  %73 = phi i64 [ %77, %72 ], [ %65, %59 ]
  %74 = phi i64 [ %75, %72 ], [ 0, %59 ]
  %75 = add i64 %74, 16
  %76 = add i64 %75, %73
  %77 = and i64 %76, %61
  %78 = getelementptr inbounds i8, i8* %60, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = icmp slt <16 x i8> %80, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %82 = bitcast <16 x i1> %81 to i16
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %72, label %84

84:                                               ; preds = %72, %59
  %85 = phi i64 [ %65, %59 ], [ %77, %72 ]
  %86 = phi i16 [ %70, %59 ], [ %82, %72 ]
  %87 = zext i16 %86 to i32
  %88 = tail call i32 @llvm.cttz.i32(i32 %87, i1 false) #6, !range !3
  %89 = zext i32 %88 to i64
  %90 = add i64 %85, %89
  %91 = and i64 %90, %61
  %92 = load i64, i64* %38, align 8
  br label %93

93:                                               ; preds = %41, %30, %84
  %94 = phi i64 [ %92, %84 ], [ 0, %41 ], [ %39, %30 ]
  %95 = phi i8* [ %60, %84 ], [ %4, %41 ], [ %4, %30 ]
  %96 = phi i64 [ %91, %84 ], [ %37, %41 ], [ %37, %30 ]
  %97 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = getelementptr inbounds i8, i8* %95, i64 %96
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, -128
  %103 = zext i1 %102 to i64
  %104 = sub i64 %94, %103
  store i64 %104, i64* %38, align 8
  %105 = trunc i64 %1 to i8
  %106 = and i8 %105, 127
  store i8 %106, i8* %100, align 1
  %107 = load i8*, i8** %3, align 8
  %108 = add i64 %96, -15
  %109 = load i64, i64* %5, align 8
  %110 = and i64 %109, %108
  %111 = and i64 %109, 15
  %112 = add i64 %110, %111
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  store i8 %106, i8* %113, align 1
  ret i64 %96
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"*, i64) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %6 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %5, align 8
  %7 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  store i64 %1, i64* %7, align 8
  %9 = add i64 %1, 16
  %10 = add i64 %1, 23
  %11 = and i64 %10, -8
  %12 = shl i64 %1, 4
  %13 = add i64 %11, %12
  %14 = tail call i8* @_Znwm(i64 %13) #13
  store i8* %14, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %11
  %16 = bitcast %"union.absl::container_internal::map_slot_type"** %5 to i8**
  store i8* %15, i8** %16, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 -128, i64 %9, i1 false) #6
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  store i8 -1, i8* %17, align 1
  %18 = lshr i64 %1, 3
  %19 = sub i64 %1, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = icmp eq i64 %8, 0
  br i1 %24, label %100, label %25

25:                                               ; preds = %2
  %26 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %28

27:                                               ; preds = %96
  br i1 %24, label %100, label %99

28:                                               ; preds = %25, %96
  %29 = phi i64 [ 0, %25 ], [ %97, %96 ]
  %30 = getelementptr inbounds i8, i8* %4, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = icmp sgt i8 %31, -1
  br i1 %32, label %33, label %96

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29
  %35 = bitcast %"union.absl::container_internal::map_slot_type"* %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = add i64 %26, %36
  %38 = zext i64 %37 to i128
  %39 = mul nuw i128 %38, 11376068507788127593
  %40 = lshr i128 %39, 64
  %41 = xor i128 %40, %39
  %42 = trunc i128 %41 to i64
  %43 = add i64 %36, %42
  %44 = zext i64 %43 to i128
  %45 = mul nuw i128 %44, 11376068507788127593
  %46 = lshr i128 %45, 64
  %47 = xor i128 %46, %45
  %48 = trunc i128 %47 to i64
  %49 = load i8*, i8** %3, align 8
  %50 = load i64, i64* %7, align 8
  %51 = lshr i64 %48, 7
  %52 = ptrtoint i8* %49 to i64
  %53 = lshr i64 %52, 12
  %54 = xor i64 %51, %53
  %55 = and i64 %54, %50
  %56 = getelementptr inbounds i8, i8* %49, i64 %55
  %57 = bitcast i8* %56 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 1
  %59 = icmp slt <16 x i8> %58, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %60 = bitcast <16 x i1> %59 to i16
  %61 = icmp eq i16 %60, 0
  br i1 %61, label %62, label %74

62:                                               ; preds = %33, %62
  %63 = phi i64 [ %67, %62 ], [ %55, %33 ]
  %64 = phi i64 [ %65, %62 ], [ 0, %33 ]
  %65 = add i64 %64, 16
  %66 = add i64 %65, %63
  %67 = and i64 %66, %50
  %68 = getelementptr inbounds i8, i8* %49, i64 %67
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1
  %71 = icmp slt <16 x i8> %70, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %72 = bitcast <16 x i1> %71 to i16
  %73 = icmp eq i16 %72, 0
  br i1 %73, label %62, label %74

74:                                               ; preds = %62, %33
  %75 = phi i64 [ %55, %33 ], [ %67, %62 ]
  %76 = phi i16 [ %60, %33 ], [ %72, %62 ]
  %77 = zext i16 %76 to i32
  %78 = tail call i32 @llvm.cttz.i32(i32 %77, i1 false) #6, !range !3
  %79 = zext i32 %78 to i64
  %80 = add i64 %75, %79
  %81 = and i64 %80, %50
  %82 = trunc i128 %47 to i8
  %83 = and i8 %82, 127
  %84 = getelementptr inbounds i8, i8* %49, i64 %81
  store i8 %83, i8* %84, align 1
  %85 = load i8*, i8** %3, align 8
  %86 = add i64 %81, -15
  %87 = load i64, i64* %7, align 8
  %88 = and i64 %86, %87
  %89 = and i64 %87, 15
  %90 = add i64 %88, %89
  %91 = getelementptr inbounds i8, i8* %85, i64 %90
  store i8 %83, i8* %91, align 1
  %92 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %5, align 8
  %93 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %92, i64 %81
  %94 = bitcast %"union.absl::container_internal::map_slot_type"* %93 to i8*
  %95 = bitcast %"union.absl::container_internal::map_slot_type"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %95, i64 16, i1 false) #6
  br label %96

96:                                               ; preds = %28, %74
  %97 = add nuw i64 %29, 1
  %98 = icmp eq i64 %97, %8
  br i1 %98, label %27, label %28

99:                                               ; preds = %27
  tail call void @_ZdlPv(i8* %4) #13
  br label %100

100:                                              ; preds = %2, %27, %99
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"*) local_unnamed_addr #9 comdat align 2 {
  %2 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  tail call void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8* %3, i64 %5) #6
  %6 = load i64, i64* %4, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %10 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %19

11:                                               ; preds = %128, %1
  %12 = phi i64 [ 0, %1 ], [ %130, %128 ]
  %13 = lshr i64 %12, 3
  %14 = sub i64 %12, %13
  %15 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %17, i64* %18, align 8
  ret void

19:                                               ; preds = %8, %128
  %20 = phi i64 [ %6, %8 ], [ %131, %128 ]
  %21 = phi i64 [ 0, %8 ], [ %130, %128 ]
  %22 = load i8*, i8** %2, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 %21
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, -2
  br i1 %25, label %26, label %128

26:                                               ; preds = %19
  %27 = ptrtoint i8* %22 to i64
  %28 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %9, align 8
  %29 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %28, i64 %21, i32 0
  %30 = bitcast %"struct.std::__1::pair"* %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = add i64 %10, %31
  %33 = zext i64 %32 to i128
  %34 = mul nuw i128 %33, 11376068507788127593
  %35 = lshr i128 %34, 64
  %36 = xor i128 %35, %34
  %37 = trunc i128 %36 to i64
  %38 = add i64 %31, %37
  %39 = zext i64 %38 to i128
  %40 = mul nuw i128 %39, 11376068507788127593
  %41 = lshr i128 %40, 64
  %42 = xor i128 %41, %40
  %43 = trunc i128 %42 to i64
  %44 = lshr i64 %43, 7
  %45 = lshr i64 %27, 12
  %46 = xor i64 %44, %45
  %47 = and i64 %46, %20
  %48 = getelementptr inbounds i8, i8* %22, i64 %47
  %49 = bitcast i8* %48 to <16 x i8>*
  %50 = load <16 x i8>, <16 x i8>* %49, align 1
  %51 = icmp slt <16 x i8> %50, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %52 = bitcast <16 x i1> %51 to i16
  %53 = icmp eq i16 %52, 0
  br i1 %53, label %54, label %66

54:                                               ; preds = %26, %54
  %55 = phi i64 [ %59, %54 ], [ %47, %26 ]
  %56 = phi i64 [ %57, %54 ], [ 0, %26 ]
  %57 = add i64 %56, 16
  %58 = add i64 %57, %55
  %59 = and i64 %58, %20
  %60 = getelementptr inbounds i8, i8* %22, i64 %59
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1
  %63 = icmp slt <16 x i8> %62, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %64 = bitcast <16 x i1> %63 to i16
  %65 = icmp eq i16 %64, 0
  br i1 %65, label %54, label %66

66:                                               ; preds = %54, %26
  %67 = phi i64 [ %47, %26 ], [ %59, %54 ]
  %68 = phi i16 [ %52, %26 ], [ %64, %54 ]
  %69 = zext i16 %68 to i32
  %70 = tail call i32 @llvm.cttz.i32(i32 %69, i1 false) #6, !range !3
  %71 = zext i32 %70 to i64
  %72 = add i64 %67, %71
  %73 = and i64 %72, %20
  %74 = sub i64 %73, %47
  %75 = sub i64 %21, %47
  %76 = xor i64 %74, %75
  %77 = and i64 %76, %20
  %78 = icmp ult i64 %77, 16
  br i1 %78, label %79, label %89, !prof !4

79:                                               ; preds = %66
  %80 = trunc i128 %42 to i8
  %81 = and i8 %80, 127
  store i8 %81, i8* %23, align 1
  %82 = load i8*, i8** %2, align 8
  %83 = add i64 %21, -15
  %84 = load i64, i64* %4, align 8
  %85 = and i64 %84, %83
  %86 = and i64 %84, 15
  %87 = add i64 %85, %86
  %88 = getelementptr inbounds i8, i8* %82, i64 %87
  store i8 %81, i8* %88, align 1
  br label %128

89:                                               ; preds = %66
  %90 = getelementptr inbounds i8, i8* %22, i64 %73
  %91 = load i8, i8* %90, align 1
  %92 = icmp eq i8 %91, -128
  %93 = trunc i128 %42 to i8
  %94 = and i8 %93, 127
  store i8 %94, i8* %90, align 1
  %95 = load i8*, i8** %2, align 8
  %96 = add i64 %73, -15
  %97 = load i64, i64* %4, align 8
  %98 = and i64 %97, %96
  %99 = and i64 %97, 15
  %100 = add i64 %98, %99
  %101 = getelementptr inbounds i8, i8* %95, i64 %100
  store i8 %94, i8* %101, align 1
  %102 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %9, align 8
  br i1 %92, label %103, label %117

103:                                              ; preds = %89
  %104 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %73
  %105 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %21
  %106 = bitcast %"union.absl::container_internal::map_slot_type"* %104 to i8*
  %107 = bitcast %"union.absl::container_internal::map_slot_type"* %105 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %106, i8* align 8 %107, i64 16, i1 false) #6
  %108 = load i8*, i8** %2, align 8
  %109 = getelementptr inbounds i8, i8* %108, i64 %21
  store i8 -128, i8* %109, align 1
  %110 = load i8*, i8** %2, align 8
  %111 = add i64 %21, -15
  %112 = load i64, i64* %4, align 8
  %113 = and i64 %112, %111
  %114 = and i64 %112, 15
  %115 = add i64 %113, %114
  %116 = getelementptr inbounds i8, i8* %110, i64 %115
  store i8 -128, i8* %116, align 1
  br label %128

117:                                              ; preds = %89
  %118 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %21
  %119 = bitcast %"union.absl::container_internal::map_slot_type"* %118 to i8*
  %120 = bitcast %"union.absl::container_internal::map_slot_type"* %118 to <16 x i8>*
  %121 = load <16 x i8>, <16 x i8>* %120, align 8
  %122 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %73
  %123 = bitcast %"union.absl::container_internal::map_slot_type"* %122 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* align 8 %123, i64 16, i1 false) #6
  %124 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %9, align 8
  %125 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %124, i64 %73
  %126 = bitcast %"union.absl::container_internal::map_slot_type"* %125 to <16 x i8>*
  store <16 x i8> %121, <16 x i8>* %126, align 8
  %127 = add i64 %21, -1
  br label %128

128:                                              ; preds = %79, %117, %103, %19
  %129 = phi i64 [ %21, %19 ], [ %21, %79 ], [ %21, %103 ], [ %127, %117 ]
  %130 = add i64 %129, 1
  %131 = load i64, i64* %4, align 8
  %132 = icmp eq i64 %130, %131
  br i1 %132, label %11, label %19
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #11

declare void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8*, i64) local_unnamed_addr #2

declare void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #2

declare i64 @_ZN2sh32FindFirstFunctionDefinitionIndexEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"*) local_unnamed_addr #2

declare zeroext i1 @_ZN2sh20TIntermAggregateBase16insertChildNodesEmRKNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TIntermAggregateBase"*, i64, %"class.sh::TVector.38"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #12

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { builtin nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{i32 0, i32 33}
!4 = !{!"branch_weights", i32 2000, i32 1}
!5 = !{!"branch_weights", i32 1, i32 2000}
!6 = !{!7, !9}
!7 = distinct !{!7, !8, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE16try_emplace_implIRSI_JEEENSH_INS0_12raw_hash_setISA_SD_SE_SK_E8iteratorEbEEOT_DpOT0_: argument 0"}
!8 = distinct !{!8, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE16try_emplace_implIRSI_JEEENSH_INS0_12raw_hash_setISA_SD_SE_SK_E8iteratorEbEEOT_DpOT0_"}
!9 = distinct !{!9, !10, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE11try_emplaceIS6_JELi0EEENSH_INS0_12raw_hash_setISA_SD_SE_SK_E8iteratorEbEERKT_DpOT0_: argument 0"}
!10 = distinct !{!10, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE11try_emplaceIS6_JELi0EEENSH_INS0_12raw_hash_setISA_SD_SE_SK_E8iteratorEbEERKT_DpOT0_"}
!11 = !{!12}
!12 = distinct !{!12, !13}
!13 = distinct !{!13, !"LVerDomain"}
!14 = !{!15}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.isvectorized", i32 1}
!18 = distinct !{!18, !19}
!19 = !{!"llvm.loop.unroll.disable"}
!20 = distinct !{!20, !17}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !17}
!27 = distinct !{!27, !19}
!28 = distinct !{!28, !17}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = distinct !{!34, !17}
!35 = distinct !{!35, !19}
!36 = distinct !{!36, !17}
!37 = !{!38}
!38 = distinct !{!38, !39}
!39 = distinct !{!39, !"LVerDomain"}
!40 = !{!41}
!41 = distinct !{!41, !39}
!42 = distinct !{!42, !17}
!43 = distinct !{!43, !19}
!44 = distinct !{!44, !17}
!45 = !{!46}
!46 = distinct !{!46, !47, !"_ZN2sh16TLayoutQualifier6CreateEv: argument 0"}
!47 = distinct !{!47, !"_ZN2sh16TLayoutQualifier6CreateEv"}
!48 = !{!49}
!49 = distinct !{!49, !50, !"_ZN2sh16TLayoutQualifier6CreateEv: argument 0"}
!50 = distinct !{!50, !"_ZN2sh16TLayoutQualifier6CreateEv"}
