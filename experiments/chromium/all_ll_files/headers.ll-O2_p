; ModuleID = '../../third_party/unrar/src/headers.cpp'
source_filename = "../../third_party/unrar/src/headers.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%class.ErrorHandler = type <{ i32, i32, i8, i8, i8, i8, i8, i8, [2 x i8] }>
%struct.FileHeader = type { %struct.BlockHeader, i8, i32, i8, %union.anon, [2048 x i32], %class.Array, %class.RarTime, %class.RarTime, %class.RarTime, i64, i64, i64, %struct.HashValue, i32, i8, i8, i8, i8, i32, i8, [16 x i8], [16 x i8], i8, [8 x i8], i8, [32 x i8], i32, i8, i8, i8, i8, i64, i8, i8, i8, i32, i32, [2048 x i32], i8, i8, i8, i8, [256 x i8], [256 x i8], i32, i32 }
%struct.BlockHeader = type { %struct.BaseBlock, i32 }
%struct.BaseBlock = type { i32, i32, i32, i32, i8 }
%union.anon = type { i32 }
%class.Array = type <{ i8*, i64, i64, i64, i8, [7 x i8] }>
%class.RarTime = type { i64 }
%struct.HashValue = type { i32, %union.anon.0 }
%union.anon.0 = type { i32, [28 x i8] }
%struct.MainHeader = type { %struct.BaseBlock, i16, i32, i8, i8, i8, i64, i64, i64, i64 }

$_ZN5ArrayIhE3AddEm = comdat any

@ErrHandler = external global %class.ErrorHandler, align 4
@.str = private unnamed_addr constant [44 x i32] [i32 77, i32 97, i32 120, i32 105, i32 109, i32 117, i32 109, i32 32, i32 97, i32 108, i32 108, i32 111, i32 119, i32 101, i32 100, i32 32, i32 97, i32 114, i32 114, i32 97, i32 121, i32 32, i32 115, i32 105, i32 122, i32 101, i32 32, i32 40, i32 37, i32 117, i32 41, i32 32, i32 105, i32 115, i32 32, i32 101, i32 120, i32 99, i32 101, i32 101, i32 100, i32 101, i32 100, i32 0], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10FileHeader5ResetEm(%struct.FileHeader*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.FileHeader, %struct.FileHeader* %0, i64 0, i32 6, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = icmp ult i64 %4, %1
  %6 = getelementptr inbounds %struct.FileHeader, %struct.FileHeader* %0, i64 0, i32 6, i32 1
  br i1 %5, label %7, label %11

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.FileHeader, %struct.FileHeader* %0, i64 0, i32 6
  %9 = load i64, i64* %6, align 8
  %10 = sub i64 %1, %9
  tail call void @_ZN5ArrayIhE3AddEm(%class.Array* %8, i64 %10) #6
  br label %12

11:                                               ; preds = %2
  store i64 %1, i64* %6, align 8
  br label %12

12:                                               ; preds = %7, %11
  %13 = getelementptr inbounds %struct.FileHeader, %struct.FileHeader* %0, i64 0, i32 0, i32 0, i32 4
  store i8 0, i8* %13, align 4
  %14 = getelementptr inbounds %struct.FileHeader, %struct.FileHeader* %0, i64 0, i32 13
  tail call void @_ZN9HashValue4InitE9HASH_TYPE(%struct.HashValue* %14, i32 0) #6
  %15 = getelementptr inbounds %struct.FileHeader, %struct.FileHeader* %0, i64 0, i32 7, i32 0
  %16 = getelementptr inbounds %struct.FileHeader, %struct.FileHeader* %0, i64 0, i32 15
  %17 = getelementptr inbounds %struct.FileHeader, %struct.FileHeader* %0, i64 0, i32 4, i32 0
  store i32 0, i32* %17, align 4
  %18 = getelementptr inbounds %struct.FileHeader, %struct.FileHeader* %0, i64 0, i32 23
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.FileHeader, %struct.FileHeader* %0, i64 0, i32 25
  store i8 0, i8* %19, align 2
  %20 = getelementptr inbounds %struct.FileHeader, %struct.FileHeader* %0, i64 0, i32 27
  %21 = getelementptr inbounds %struct.FileHeader, %struct.FileHeader* %0, i64 0, i32 32
  %22 = getelementptr inbounds %struct.FileHeader, %struct.FileHeader* %0, i64 0, i32 37
  store i32 0, i32* %22, align 8
  %23 = getelementptr inbounds %struct.FileHeader, %struct.FileHeader* %0, i64 0, i32 39
  store i8 0, i8* %23, align 4
  %24 = getelementptr inbounds %struct.FileHeader, %struct.FileHeader* %0, i64 0, i32 40
  store i8 0, i8* %24, align 1
  %25 = bitcast i64* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 24, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 9, i1 false)
  %26 = bitcast i32* %20 to i64*
  store i64 0, i64* %26, align 4
  %27 = bitcast i64* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %27, i8 0, i64 11, i1 false)
  ret void
}

declare void @_ZN9HashValue4InitE9HASH_TYPE(%struct.HashValue*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(17192) %struct.FileHeader* @_ZN10FileHeaderaSERS_(%struct.FileHeader* returned, %struct.FileHeader* nocapture readonly dereferenceable(17192)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.FileHeader, %struct.FileHeader* %0, i64 0, i32 6
  %4 = getelementptr inbounds %class.Array, %class.Array* %3, i64 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  br i1 %6, label %8, label %7

7:                                                ; preds = %2
  tail call void @free(i8* nonnull %5) #6
  store i8* null, i8** %4, align 8
  br label %8

8:                                                ; preds = %7, %2
  %9 = getelementptr inbounds %struct.FileHeader, %struct.FileHeader* %0, i64 0, i32 6, i32 1
  %10 = bitcast i64* %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false) #6
  %11 = bitcast %struct.FileHeader* %0 to i8*
  %12 = bitcast %struct.FileHeader* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 17192, i1 false)
  %13 = bitcast %class.Array* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 33, i1 false) #6
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false) #6
  %14 = getelementptr inbounds %struct.FileHeader, %struct.FileHeader* %1, i64 0, i32 6, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %18, label %17

17:                                               ; preds = %8
  tail call void @_ZN5ArrayIhE3AddEm(%class.Array* %3, i64 %15) #6
  br label %19

18:                                               ; preds = %8
  store i64 0, i64* %9, align 8
  br label %19

19:                                               ; preds = %18, %17
  %20 = load i64, i64* %14, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %19
  %23 = load i8*, i8** %4, align 8
  %24 = getelementptr inbounds %struct.FileHeader, %struct.FileHeader* %1, i64 0, i32 6, i32 0
  %25 = load i8*, i8** %24, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* align 1 %25, i64 %20, i1 false) #6
  br label %26

26:                                               ; preds = %19, %22
  ret %struct.FileHeader* %0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN10MainHeader5ResetEv(%struct.MainHeader* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %struct.MainHeader, %struct.MainHeader* %0, i64 0, i32 1
  store i16 0, i16* %2, align 4
  %3 = getelementptr inbounds %struct.MainHeader, %struct.MainHeader* %0, i64 0, i32 2
  %4 = getelementptr inbounds %struct.MainHeader, %struct.MainHeader* %0, i64 0, i32 6
  %5 = bitcast i32* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 7, i1 false)
  %6 = bitcast i64* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5ArrayIhE3AddEm(%class.Array*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.Array, %class.Array* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, %1
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %class.Array, %class.Array* %0, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = icmp ugt i64 %5, %7
  br i1 %8, label %9, label %49

9:                                                ; preds = %2
  %10 = getelementptr inbounds %class.Array, %class.Array* %0, i64 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = icmp ne i64 %11, 0
  %13 = icmp ugt i64 %5, %11
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %18

15:                                               ; preds = %9
  tail call void (%class.ErrorHandler*, i32*, ...) @_ZN12ErrorHandler13GeneralErrMsgEPKwz(%class.ErrorHandler* nonnull @ErrHandler, i32* getelementptr inbounds ([44 x i32], [44 x i32]* @.str, i64 0, i64 0), i64 %11) #6
  tail call void @_ZN12ErrorHandler11MemoryErrorEv(%class.ErrorHandler* nonnull @ErrHandler) #6
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %3, align 8
  br label %18

18:                                               ; preds = %9, %15
  %19 = phi i64 [ %5, %9 ], [ %17, %15 ]
  %20 = phi i64 [ %7, %9 ], [ %16, %15 ]
  %21 = lshr i64 %20, 2
  %22 = add i64 %20, 32
  %23 = add i64 %22, %21
  %24 = icmp ugt i64 %19, %23
  %25 = select i1 %24, i64 %19, i64 %23
  %26 = getelementptr inbounds %class.Array, %class.Array* %0, i64 0, i32 4
  %27 = load i8, i8* %26, align 8, !range !2
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %40, label %29

29:                                               ; preds = %18
  %30 = tail call noalias i8* @malloc(i64 %25) #6
  %31 = icmp eq i8* %30, null
  br i1 %31, label %32, label %33

32:                                               ; preds = %29
  tail call void @_ZN12ErrorHandler11MemoryErrorEv(%class.ErrorHandler* nonnull @ErrHandler) #6
  br label %33

33:                                               ; preds = %32, %29
  %34 = getelementptr inbounds %class.Array, %class.Array* %0, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = icmp eq i8* %35, null
  br i1 %36, label %46, label %37

37:                                               ; preds = %33
  %38 = load i64, i64* %6, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* nonnull align 1 %35, i64 %38, i1 false)
  tail call void @_Z9cleandataPvm(i8* nonnull %35, i64 %38) #6
  %39 = load i8*, i8** %34, align 8
  tail call void @free(i8* %39) #6
  br label %46

40:                                               ; preds = %18
  %41 = getelementptr inbounds %class.Array, %class.Array* %0, i64 0, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = tail call i8* @realloc(i8* %42, i64 %25) #6
  %44 = icmp eq i8* %43, null
  br i1 %44, label %45, label %46

45:                                               ; preds = %40
  tail call void @_ZN12ErrorHandler11MemoryErrorEv(%class.ErrorHandler* nonnull @ErrHandler) #6
  br label %46

46:                                               ; preds = %33, %40, %45, %37
  %47 = phi i8* [ %30, %37 ], [ %30, %33 ], [ null, %45 ], [ %43, %40 ]
  %48 = getelementptr inbounds %class.Array, %class.Array* %0, i64 0, i32 0
  store i8* %47, i8** %48, align 8
  store i64 %25, i64* %6, align 8
  br label %49

49:                                               ; preds = %46, %2
  ret void
}

declare void @_ZN12ErrorHandler13GeneralErrMsgEPKwz(%class.ErrorHandler*, i32*, ...) local_unnamed_addr #1

declare void @_ZN12ErrorHandler11MemoryErrorEv(%class.ErrorHandler*) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

declare void @_Z9cleandataPvm(i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #5

; Function Attrs: nounwind
declare noalias i8* @realloc(i8* nocapture, i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
