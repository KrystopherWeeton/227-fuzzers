; ModuleID = '../../v8/src/libplatform/worker-thread.cc'
source_filename = "../../v8/src/libplatform/worker-thread.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.v8::platform::WorkerThread" = type { %"class.v8::base::Thread", %"class.v8::platform::TaskQueue"* }
%"class.v8::base::Thread" = type { i32 (...)**, %"class.v8::base::Thread::PlatformData"*, [16 x i8], i32, %"class.v8::base::Semaphore"* }
%"class.v8::base::Thread::PlatformData" = type opaque
%"class.v8::base::Semaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }
%"class.v8::platform::TaskQueue" = type <{ %"class.v8::base::Semaphore", %"class.v8::base::Mutex", %"class.std::__1::queue", i8, [7 x i8] }>
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.4" }
%"struct.std::__1::__split_buffer" = type { %"class.std::__1::unique_ptr"**, %"class.std::__1::unique_ptr"**, %"class.std::__1::unique_ptr"**, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::Task"* }
%"class.v8::Task" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.std::__1::unique_ptr"** }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { i64 }
%"class.v8::base::Thread::Options" = type <{ i8*, i32, [4 x i8] }>

@.str = private unnamed_addr constant [16 x i8] c"V8 WorkerThread\00", align 1
@_ZTVN2v88platform12WorkerThreadE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::platform::WorkerThread"*)* @_ZN2v88platform12WorkerThreadD2Ev to i8*), i8* bitcast (void (%"class.v8::platform::WorkerThread"*)* @_ZN2v88platform12WorkerThreadD0Ev to i8*), i8* bitcast (void (%"class.v8::platform::WorkerThread"*)* @_ZN2v88platform12WorkerThread3RunEv to i8*)] }, align 8
@.str.1 = private unnamed_addr constant [18 x i8] c"Check failed: %s.\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"Start()\00", align 1

@_ZN2v88platform12WorkerThreadC1EPNS0_9TaskQueueE = hidden unnamed_addr alias void (%"class.v8::platform::WorkerThread"*, %"class.v8::platform::TaskQueue"*), void (%"class.v8::platform::WorkerThread"*, %"class.v8::platform::TaskQueue"*)* @_ZN2v88platform12WorkerThreadC2EPNS0_9TaskQueueE
@_ZN2v88platform12WorkerThreadD1Ev = hidden unnamed_addr alias void (%"class.v8::platform::WorkerThread"*), void (%"class.v8::platform::WorkerThread"*)* @_ZN2v88platform12WorkerThreadD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88platform12WorkerThreadC2EPNS0_9TaskQueueE(%"class.v8::platform::WorkerThread"*, %"class.v8::platform::TaskQueue"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::base::Thread::Options", align 8
  %4 = getelementptr inbounds %"class.v8::platform::WorkerThread", %"class.v8::platform::WorkerThread"* %0, i64 0, i32 0
  %5 = bitcast %"class.v8::base::Thread::Options"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #6
  %6 = getelementptr inbounds %"class.v8::base::Thread::Options", %"class.v8::base::Thread::Options"* %3, i64 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i8** %6, align 8
  %7 = getelementptr inbounds %"class.v8::base::Thread::Options", %"class.v8::base::Thread::Options"* %3, i64 0, i32 1
  store i32 0, i32* %7, align 8
  call void @_ZN2v84base6ThreadC2ERKNS1_7OptionsE(%"class.v8::base::Thread"* %4, %"class.v8::base::Thread::Options"* nonnull dereferenceable(16) %3) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #6
  %8 = getelementptr inbounds %"class.v8::platform::WorkerThread", %"class.v8::platform::WorkerThread"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2v88platform12WorkerThreadE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %9 = getelementptr inbounds %"class.v8::platform::WorkerThread", %"class.v8::platform::WorkerThread"* %0, i64 0, i32 1
  store %"class.v8::platform::TaskQueue"* %1, %"class.v8::platform::TaskQueue"** %9, align 8
  %10 = call zeroext i1 @_ZN2v84base6Thread5StartEv(%"class.v8::base::Thread"* %4) #6
  br i1 %10, label %12, label %11, !prof !2

11:                                               ; preds = %2
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0)) #7
  unreachable

12:                                               ; preds = %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2v84base6ThreadC2ERKNS1_7OptionsE(%"class.v8::base::Thread"*, %"class.v8::base::Thread::Options"* dereferenceable(16)) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN2v84base6Thread5StartEv(%"class.v8::base::Thread"*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88platform12WorkerThreadD2Ev(%"class.v8::platform::WorkerThread"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::platform::WorkerThread", %"class.v8::platform::WorkerThread"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2v88platform12WorkerThreadE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.v8::platform::WorkerThread", %"class.v8::platform::WorkerThread"* %0, i64 0, i32 0
  tail call void @_ZN2v84base6Thread4JoinEv(%"class.v8::base::Thread"* %3) #6
  tail call void @_ZN2v84base6ThreadD2Ev(%"class.v8::base::Thread"* %3) #6
  ret void
}

declare void @_ZN2v84base6Thread4JoinEv(%"class.v8::base::Thread"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2v84base6ThreadD2Ev(%"class.v8::base::Thread"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88platform12WorkerThreadD0Ev(%"class.v8::platform::WorkerThread"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::platform::WorkerThread", %"class.v8::platform::WorkerThread"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2v88platform12WorkerThreadE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.v8::platform::WorkerThread", %"class.v8::platform::WorkerThread"* %0, i64 0, i32 0
  tail call void @_ZN2v84base6Thread4JoinEv(%"class.v8::base::Thread"* %3) #6
  tail call void @_ZN2v84base6ThreadD2Ev(%"class.v8::base::Thread"* %3) #6
  %4 = bitcast %"class.v8::platform::WorkerThread"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88platform12WorkerThread3RunEv(%"class.v8::platform::WorkerThread"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::platform::WorkerThread", %"class.v8::platform::WorkerThread"* %0, i64 0, i32 1
  %3 = load %"class.v8::platform::TaskQueue"*, %"class.v8::platform::TaskQueue"** %2, align 8
  %4 = tail call %"class.v8::Task"* @_ZN2v88platform9TaskQueue7GetNextEv(%"class.v8::platform::TaskQueue"* %3) #6
  %5 = icmp eq %"class.v8::Task"* %4, null
  br i1 %5, label %18, label %6

6:                                                ; preds = %1, %6
  %7 = phi %"class.v8::Task"* [ %16, %6 ], [ %4, %1 ]
  %8 = bitcast %"class.v8::Task"* %7 to void (%"class.v8::Task"*)***
  %9 = load void (%"class.v8::Task"*)**, void (%"class.v8::Task"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.v8::Task"*)*, void (%"class.v8::Task"*)** %9, i64 2
  %11 = load void (%"class.v8::Task"*)*, void (%"class.v8::Task"*)** %10, align 8
  tail call void %11(%"class.v8::Task"* nonnull %7) #6
  %12 = load void (%"class.v8::Task"*)**, void (%"class.v8::Task"*)*** %8, align 8
  %13 = getelementptr inbounds void (%"class.v8::Task"*)*, void (%"class.v8::Task"*)** %12, i64 1
  %14 = load void (%"class.v8::Task"*)*, void (%"class.v8::Task"*)** %13, align 8
  tail call void %14(%"class.v8::Task"* nonnull %7) #6
  %15 = load %"class.v8::platform::TaskQueue"*, %"class.v8::platform::TaskQueue"** %2, align 8
  %16 = tail call %"class.v8::Task"* @_ZN2v88platform9TaskQueue7GetNextEv(%"class.v8::platform::TaskQueue"* %15) #6
  %17 = icmp eq %"class.v8::Task"* %16, null
  br i1 %17, label %18, label %6

18:                                               ; preds = %6, %1
  ret void
}

declare %"class.v8::Task"* @_ZN2v88platform9TaskQueue7GetNextEv(%"class.v8::platform::TaskQueue"*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
