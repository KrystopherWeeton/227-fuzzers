; ModuleID = '../../third_party/skia/src/gpu/geometry/GrQuad.cpp'
source_filename = "../../third_party/skia/src/gpu/geometry/GrQuad.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.GrQuad = type { [4 x float], [4 x float], [4 x float], i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkPoint = type { float, float }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6GrQuad12MakeFromRectERK6SkRectRK8SkMatrix(%class.GrQuad* noalias nocapture sret, %struct.SkRect* nocapture readonly dereferenceable(16), %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = trunc i32 %5 to i8
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %3
  %9 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %2) #5
  %10 = zext i8 %9 to i32
  store i32 %10, i32* %4, align 4
  br label %11

11:                                               ; preds = %3, %8
  %12 = phi i32 [ %10, %8 ], [ %5, %3 ]
  %13 = and i32 %12, 12
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %74

15:                                               ; preds = %11
  %16 = trunc i32 %12 to i8
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %15
  %19 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %2) #5
  %20 = zext i8 %19 to i32
  store i32 %20, i32* %4, align 4
  br label %21

21:                                               ; preds = %18, %15
  %22 = phi i32 [ %20, %18 ], [ %12, %15 ]
  %23 = and i32 %22, 15
  %24 = bitcast %struct.SkRect* %1 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 1
  %26 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 2
  %27 = bitcast float* %26 to <2 x float>*
  %28 = load <2 x float>, <2 x float>* %27, align 1
  %29 = shufflevector <2 x float> %25, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %30 = shufflevector <2 x float> %28, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %31 = shufflevector <4 x float> %29, <4 x float> %30, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %32 = icmp eq i32 %23, 0
  br i1 %32, label %67, label %33

33:                                               ; preds = %21
  %34 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 2
  %35 = bitcast float* %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 5
  %38 = bitcast float* %37 to i32*
  %39 = load i32, i32* %38, align 4
  %40 = zext i32 %39 to i64
  %41 = shl nuw i64 %40, 32
  %42 = zext i32 %36 to i64
  %43 = or i64 %41, %42
  %44 = bitcast i64 %43 to <2 x float>
  %45 = shufflevector <2 x float> %44, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %46 = shufflevector <2 x float> %44, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %47 = shufflevector <4 x float> %45, <4 x float> %46, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %48 = icmp eq i32 %23, 1
  br i1 %48, label %49, label %51

49:                                               ; preds = %33
  %50 = fadd <4 x float> %31, %47
  br label %67

51:                                               ; preds = %33
  %52 = bitcast %class.SkMatrix* %2 to i32*
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 4
  %55 = bitcast float* %54 to i32*
  %56 = load i32, i32* %55, align 4
  %57 = zext i32 %56 to i64
  %58 = shl nuw i64 %57, 32
  %59 = zext i32 %53 to i64
  %60 = or i64 %58, %59
  %61 = bitcast i64 %60 to <2 x float>
  %62 = shufflevector <2 x float> %61, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %63 = shufflevector <2 x float> %61, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %64 = shufflevector <4 x float> %62, <4 x float> %63, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %65 = fmul <4 x float> %31, %64
  %66 = fadd <4 x float> %47, %65
  br label %67

67:                                               ; preds = %21, %49, %51
  %68 = phi <4 x float> [ %31, %21 ], [ %50, %49 ], [ %66, %51 ]
  %69 = shufflevector <4 x float> %68, <4 x float> undef, <2 x i32> zeroinitializer
  %70 = shufflevector <4 x float> %68, <4 x float> undef, <2 x i32> <i32 2, i32 2>
  %71 = shufflevector <4 x float> %68, <4 x float> undef, <4 x i32> <i32 1, i32 3, i32 1, i32 3>
  %72 = shufflevector <4 x float> %71, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %73 = shufflevector <4 x float> %71, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  br label %192

74:                                               ; preds = %11
  %75 = bitcast %struct.SkRect* %1 to i32*
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 2
  %78 = bitcast float* %77 to i32*
  %79 = load i32, i32* %78, align 4
  %80 = zext i32 %79 to i64
  %81 = shl nuw i64 %80, 32
  %82 = or i64 %81, %80
  %83 = zext i32 %76 to i64
  %84 = shl nuw i64 %83, 32
  %85 = or i64 %84, %83
  %86 = bitcast i64 %85 to <2 x float>
  %87 = shufflevector <2 x float> %86, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = bitcast i64 %82 to <2 x float>
  %89 = shufflevector <2 x float> %88, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %90 = shufflevector <4 x float> %87, <4 x float> %89, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %91 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 1
  %92 = bitcast float* %91 to i32*
  %93 = load i32, i32* %92, align 4
  %94 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 3
  %95 = bitcast float* %94 to i32*
  %96 = load i32, i32* %95, align 4
  %97 = zext i32 %93 to i64
  %98 = zext i32 %96 to i64
  %99 = shl nuw i64 %98, 32
  %100 = or i64 %99, %97
  %101 = bitcast i64 %100 to <2 x float>
  %102 = shufflevector <2 x float> %101, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %103 = shufflevector <2 x float> %101, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %104 = shufflevector <4 x float> %102, <4 x float> %103, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %105 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 0
  %106 = load float, float* %105, align 4
  %107 = insertelement <4 x float> undef, float %106, i32 0
  %108 = shufflevector <4 x float> %107, <4 x float> undef, <4 x i32> zeroinitializer
  %109 = fmul <4 x float> %108, %90
  %110 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 1
  %111 = load float, float* %110, align 4
  %112 = insertelement <4 x float> undef, float %111, i32 0
  %113 = shufflevector <4 x float> %112, <4 x float> undef, <4 x i32> zeroinitializer
  %114 = fmul <4 x float> %113, %104
  %115 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 2
  %116 = load float, float* %115, align 4
  %117 = insertelement <4 x float> undef, float %116, i32 0
  %118 = shufflevector <4 x float> %117, <4 x float> undef, <4 x i32> zeroinitializer
  %119 = fadd <4 x float> %118, %114
  %120 = fadd <4 x float> %109, %119
  %121 = shufflevector <4 x float> %120, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %122 = shufflevector <4 x float> %120, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %123 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 3
  %124 = load float, float* %123, align 4
  %125 = insertelement <4 x float> undef, float %124, i32 0
  %126 = shufflevector <4 x float> %125, <4 x float> undef, <4 x i32> zeroinitializer
  %127 = fmul <4 x float> %90, %126
  %128 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 4
  %129 = load float, float* %128, align 4
  %130 = insertelement <4 x float> undef, float %129, i32 0
  %131 = shufflevector <4 x float> %130, <4 x float> undef, <4 x i32> zeroinitializer
  %132 = fmul <4 x float> %104, %131
  %133 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 5
  %134 = load float, float* %133, align 4
  %135 = insertelement <4 x float> undef, float %134, i32 0
  %136 = shufflevector <4 x float> %135, <4 x float> undef, <4 x i32> zeroinitializer
  %137 = fadd <4 x float> %132, %136
  %138 = fadd <4 x float> %127, %137
  %139 = shufflevector <4 x float> %138, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %140 = shufflevector <4 x float> %138, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %141 = and i32 %12, 192
  %142 = icmp eq i32 %141, 128
  br i1 %142, label %143, label %146

143:                                              ; preds = %74
  %144 = tail call zeroext i8 @_ZNK8SkMatrix26computePerspectiveTypeMaskEv(%class.SkMatrix* %2) #5
  %145 = zext i8 %144 to i32
  store i32 %145, i32* %4, align 4
  br label %146

146:                                              ; preds = %143, %74
  %147 = phi i32 [ %145, %143 ], [ %12, %74 ]
  %148 = and i32 %147, 8
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %167, label %150

150:                                              ; preds = %146
  %151 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 6
  %152 = load float, float* %151, align 4
  %153 = insertelement <4 x float> undef, float %152, i32 0
  %154 = shufflevector <4 x float> %153, <4 x float> undef, <4 x i32> zeroinitializer
  %155 = fmul <4 x float> %90, %154
  %156 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 7
  %157 = load float, float* %156, align 4
  %158 = insertelement <4 x float> undef, float %157, i32 0
  %159 = shufflevector <4 x float> %158, <4 x float> undef, <4 x i32> zeroinitializer
  %160 = fmul <4 x float> %104, %159
  %161 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 8
  %162 = load float, float* %161, align 4
  %163 = insertelement <4 x float> undef, float %162, i32 0
  %164 = shufflevector <4 x float> %163, <4 x float> undef, <4 x i32> zeroinitializer
  %165 = fadd <4 x float> %160, %164
  %166 = fadd <4 x float> %155, %165
  br label %167

167:                                              ; preds = %146, %150
  %168 = phi <4 x float> [ %166, %150 ], [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %146 ]
  %169 = trunc i32 %147 to i8
  %170 = icmp slt i8 %169, 0
  br i1 %170, label %171, label %174

171:                                              ; preds = %167
  %172 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %2) #5
  %173 = zext i8 %172 to i32
  store i32 %173, i32* %4, align 4
  br label %174

174:                                              ; preds = %171, %167
  %175 = phi i32 [ %173, %171 ], [ %147, %167 ]
  %176 = and i32 %175, 16
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %178, label %192

178:                                              ; preds = %174
  %179 = tail call zeroext i1 @_ZNK8SkMatrix20preservesRightAnglesEf(%class.SkMatrix* %2, float 0x3F30000000000000) #5
  br i1 %179, label %192, label %180

180:                                              ; preds = %178
  %181 = load i32, i32* %4, align 4
  %182 = and i32 %181, 192
  %183 = icmp eq i32 %182, 128
  br i1 %183, label %184, label %187

184:                                              ; preds = %180
  %185 = tail call zeroext i8 @_ZNK8SkMatrix26computePerspectiveTypeMaskEv(%class.SkMatrix* %2) #5
  %186 = zext i8 %185 to i32
  store i32 %186, i32* %4, align 4
  br label %187

187:                                              ; preds = %184, %180
  %188 = phi i32 [ %186, %184 ], [ %181, %180 ]
  %189 = and i32 %188, 8
  %190 = icmp eq i32 %189, 0
  %191 = select i1 %190, i32 2, i32 3
  br label %192

192:                                              ; preds = %187, %178, %174, %67
  %193 = phi <4 x float> [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %67 ], [ %168, %174 ], [ %168, %178 ], [ %168, %187 ]
  %194 = phi <2 x float> [ %72, %67 ], [ %139, %174 ], [ %139, %178 ], [ %139, %187 ]
  %195 = phi <2 x float> [ %73, %67 ], [ %140, %174 ], [ %140, %178 ], [ %140, %187 ]
  %196 = phi <2 x float> [ %69, %67 ], [ %121, %174 ], [ %121, %178 ], [ %121, %187 ]
  %197 = phi <2 x float> [ %70, %67 ], [ %122, %174 ], [ %122, %178 ], [ %122, %187 ]
  %198 = phi i32 [ 0, %67 ], [ 0, %174 ], [ 1, %178 ], [ %191, %187 ]
  %199 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 3
  store i32 %198, i32* %199, align 4
  %200 = bitcast %class.GrQuad* %0 to <2 x float>*
  store <2 x float> %196, <2 x float>* %200, align 4
  %201 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 0, i64 2
  %202 = bitcast float* %201 to <2 x float>*
  store <2 x float> %197, <2 x float>* %202, align 4
  %203 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 1
  %204 = bitcast [4 x float]* %203 to <2 x float>*
  store <2 x float> %194, <2 x float>* %204, align 4
  %205 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 1, i64 2
  %206 = bitcast float* %205 to <2 x float>*
  store <2 x float> %195, <2 x float>* %206, align 4
  %207 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 2
  %208 = bitcast [4 x float]* %207 to <4 x float>*
  store <4 x float> %193, <4 x float>* %208, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6GrQuad14MakeFromSkQuadEPK7SkPointRK8SkMatrix(%class.GrQuad* noalias nocapture sret, %struct.SkPoint* nocapture readonly, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %4 = bitcast %struct.SkPoint* %1 to i32*
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3
  %7 = bitcast %struct.SkPoint* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %10 = bitcast %struct.SkPoint* %9 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2
  %13 = bitcast %struct.SkPoint* %12 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %11 to i64
  %16 = zext i32 %14 to i64
  %17 = shl nuw i64 %16, 32
  %18 = or i64 %17, %15
  %19 = zext i32 %8 to i64
  %20 = shl nuw i64 %19, 32
  %21 = zext i32 %5 to i64
  %22 = or i64 %20, %21
  %23 = bitcast i64 %22 to <2 x float>
  %24 = shufflevector <2 x float> %23, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %25 = bitcast i64 %18 to <2 x float>
  %26 = shufflevector <2 x float> %25, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %27 = shufflevector <4 x float> %24, <4 x float> %26, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %28 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %29 = bitcast float* %28 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3, i32 1
  %32 = bitcast float* %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1, i32 1
  %35 = bitcast float* %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2, i32 1
  %38 = bitcast float* %37 to i32*
  %39 = load i32, i32* %38, align 4
  %40 = zext i32 %36 to i64
  %41 = zext i32 %39 to i64
  %42 = shl nuw i64 %41, 32
  %43 = or i64 %42, %40
  %44 = zext i32 %33 to i64
  %45 = shl nuw i64 %44, 32
  %46 = zext i32 %30 to i64
  %47 = or i64 %45, %46
  %48 = bitcast i64 %47 to <2 x float>
  %49 = shufflevector <2 x float> %48, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %50 = bitcast i64 %43 to <2 x float>
  %51 = shufflevector <2 x float> %50, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %52 = shufflevector <4 x float> %49, <4 x float> %51, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %53 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = and i32 %54, 192
  %56 = icmp eq i32 %55, 128
  br i1 %56, label %57, label %60

57:                                               ; preds = %3
  %58 = tail call zeroext i8 @_ZNK8SkMatrix26computePerspectiveTypeMaskEv(%class.SkMatrix* %2) #5
  %59 = zext i8 %58 to i32
  store i32 %59, i32* %53, align 4
  br label %60

60:                                               ; preds = %57, %3
  %61 = phi i32 [ %59, %57 ], [ %54, %3 ]
  %62 = and i32 %61, 8
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %108

64:                                               ; preds = %60
  %65 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %66 = load float, float* %65, align 4
  %67 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3, i32 0
  %68 = load float, float* %67, align 4
  %69 = fcmp oeq float %66, %68
  br i1 %69, label %70, label %108

70:                                               ; preds = %64
  %71 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1, i32 0
  %72 = load float, float* %71, align 4
  %73 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2, i32 0
  %74 = load float, float* %73, align 4
  %75 = fcmp oeq float %72, %74
  br i1 %75, label %76, label %108

76:                                               ; preds = %70
  %77 = load float, float* %28, align 4
  %78 = load float, float* %34, align 4
  %79 = fcmp oeq float %77, %78
  br i1 %79, label %80, label %108

80:                                               ; preds = %76
  %81 = load float, float* %37, align 4
  %82 = load float, float* %31, align 4
  %83 = fcmp oeq float %81, %82
  br i1 %83, label %84, label %108

84:                                               ; preds = %80
  %85 = trunc i32 %61 to i8
  %86 = icmp slt i8 %85, 0
  br i1 %86, label %87, label %90

87:                                               ; preds = %84
  %88 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %2) #5
  %89 = zext i8 %88 to i32
  store i32 %89, i32* %53, align 4
  br label %90

90:                                               ; preds = %87, %84
  %91 = phi i32 [ %89, %87 ], [ %61, %84 ]
  %92 = and i32 %91, 16
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %108

94:                                               ; preds = %90
  %95 = tail call zeroext i1 @_ZNK8SkMatrix20preservesRightAnglesEf(%class.SkMatrix* %2, float 0x3F30000000000000) #5
  %96 = load i32, i32* %53, align 4
  br i1 %95, label %108, label %97

97:                                               ; preds = %94
  %98 = and i32 %96, 192
  %99 = icmp eq i32 %98, 128
  br i1 %99, label %100, label %103

100:                                              ; preds = %97
  %101 = tail call zeroext i8 @_ZNK8SkMatrix26computePerspectiveTypeMaskEv(%class.SkMatrix* %2) #5
  %102 = zext i8 %101 to i32
  store i32 %102, i32* %53, align 4
  br label %103

103:                                              ; preds = %100, %97
  %104 = phi i32 [ %102, %100 ], [ %96, %97 ]
  %105 = and i32 %104, 8
  %106 = icmp eq i32 %105, 0
  %107 = select i1 %106, i32 2, i32 3
  br label %108

108:                                              ; preds = %94, %60, %64, %70, %76, %80, %90, %103
  %109 = phi i32 [ %61, %60 ], [ %61, %80 ], [ %61, %76 ], [ %61, %70 ], [ %61, %64 ], [ %91, %90 ], [ %104, %103 ], [ %96, %94 ]
  %110 = phi i32 [ 3, %60 ], [ 2, %80 ], [ 2, %76 ], [ 2, %70 ], [ 2, %64 ], [ 0, %90 ], [ %107, %103 ], [ 1, %94 ]
  %111 = trunc i32 %109 to i8
  %112 = icmp slt i8 %111, 0
  br i1 %112, label %113, label %116

113:                                              ; preds = %108
  %114 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %2) #5
  %115 = zext i8 %114 to i32
  store i32 %115, i32* %53, align 4
  br label %116

116:                                              ; preds = %108, %113
  %117 = phi i32 [ %115, %113 ], [ %109, %108 ]
  %118 = and i32 %117, 15
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %127

120:                                              ; preds = %116
  %121 = getelementptr %class.GrQuad, %class.GrQuad* %0, i64 0, i32 2, i64 0
  %122 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 3
  store i32 %110, i32* %122, align 4
  %123 = bitcast %class.GrQuad* %0 to <4 x float>*
  store <4 x float> %27, <4 x float>* %123, align 4
  %124 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 1
  %125 = bitcast [4 x float]* %124 to <4 x float>*
  store <4 x float> %52, <4 x float>* %125, align 4
  %126 = bitcast float* %121 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %126, align 4
  br label %202

127:                                              ; preds = %116
  %128 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 0
  %129 = load float, float* %128, align 4
  %130 = insertelement <4 x float> undef, float %129, i32 0
  %131 = shufflevector <4 x float> %130, <4 x float> undef, <4 x i32> zeroinitializer
  %132 = fmul <4 x float> %27, %131
  %133 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 1
  %134 = load float, float* %133, align 4
  %135 = insertelement <4 x float> undef, float %134, i32 0
  %136 = shufflevector <4 x float> %135, <4 x float> undef, <4 x i32> zeroinitializer
  %137 = fmul <4 x float> %52, %136
  %138 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 2
  %139 = load float, float* %138, align 4
  %140 = insertelement <4 x float> undef, float %139, i32 0
  %141 = shufflevector <4 x float> %140, <4 x float> undef, <4 x i32> zeroinitializer
  %142 = fadd <4 x float> %137, %141
  %143 = fadd <4 x float> %132, %142
  %144 = shufflevector <4 x float> %143, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %145 = shufflevector <4 x float> %143, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %146 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 3
  %147 = load float, float* %146, align 4
  %148 = insertelement <4 x float> undef, float %147, i32 0
  %149 = shufflevector <4 x float> %148, <4 x float> undef, <4 x i32> zeroinitializer
  %150 = fmul <4 x float> %27, %149
  %151 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 4
  %152 = load float, float* %151, align 4
  %153 = insertelement <4 x float> undef, float %152, i32 0
  %154 = shufflevector <4 x float> %153, <4 x float> undef, <4 x i32> zeroinitializer
  %155 = fmul <4 x float> %52, %154
  %156 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 5
  %157 = load float, float* %156, align 4
  %158 = insertelement <4 x float> undef, float %157, i32 0
  %159 = shufflevector <4 x float> %158, <4 x float> undef, <4 x i32> zeroinitializer
  %160 = fadd <4 x float> %155, %159
  %161 = fadd <4 x float> %150, %160
  %162 = shufflevector <4 x float> %161, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %163 = shufflevector <4 x float> %161, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %164 = and i32 %117, 192
  %165 = icmp eq i32 %164, 128
  br i1 %165, label %166, label %169

166:                                              ; preds = %127
  %167 = tail call zeroext i8 @_ZNK8SkMatrix26computePerspectiveTypeMaskEv(%class.SkMatrix* %2) #5
  %168 = zext i8 %167 to i32
  store i32 %168, i32* %53, align 4
  br label %169

169:                                              ; preds = %166, %127
  %170 = phi i32 [ %168, %166 ], [ %117, %127 ]
  %171 = and i32 %170, 8
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %190, label %173

173:                                              ; preds = %169
  %174 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 6
  %175 = load float, float* %174, align 4
  %176 = insertelement <4 x float> undef, float %175, i32 0
  %177 = shufflevector <4 x float> %176, <4 x float> undef, <4 x i32> zeroinitializer
  %178 = fmul <4 x float> %27, %177
  %179 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 7
  %180 = load float, float* %179, align 4
  %181 = insertelement <4 x float> undef, float %180, i32 0
  %182 = shufflevector <4 x float> %181, <4 x float> undef, <4 x i32> zeroinitializer
  %183 = fmul <4 x float> %52, %182
  %184 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 8
  %185 = load float, float* %184, align 4
  %186 = insertelement <4 x float> undef, float %185, i32 0
  %187 = shufflevector <4 x float> %186, <4 x float> undef, <4 x i32> zeroinitializer
  %188 = fadd <4 x float> %183, %187
  %189 = fadd <4 x float> %178, %188
  br label %190

190:                                              ; preds = %169, %173
  %191 = phi <4 x float> [ %189, %173 ], [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %169 ]
  %192 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 3
  store i32 %110, i32* %192, align 4
  %193 = bitcast %class.GrQuad* %0 to <2 x float>*
  store <2 x float> %144, <2 x float>* %193, align 4
  %194 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 0, i64 2
  %195 = bitcast float* %194 to <2 x float>*
  store <2 x float> %145, <2 x float>* %195, align 4
  %196 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 1
  %197 = bitcast [4 x float]* %196 to <2 x float>*
  store <2 x float> %162, <2 x float>* %197, align 4
  %198 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 1, i64 2
  %199 = bitcast float* %198 to <2 x float>*
  store <2 x float> %163, <2 x float>* %199, align 4
  %200 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 2
  %201 = bitcast [4 x float]* %200 to <4 x float>*
  store <4 x float> %191, <4 x float>* %201, align 4
  br label %202

202:                                              ; preds = %190, %120
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK6GrQuad17aaHasEffectOnRectEv(%class.GrQuad* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 0, i64 0
  %3 = load float, float* %2, align 4
  %4 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 1, i64 0
  %5 = load float, float* %4, align 4
  %6 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 0, i64 3
  %7 = load float, float* %6, align 4
  %8 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 1, i64 3
  %9 = load float, float* %8, align 4
  %10 = tail call float @llvm.floor.f32(float %3) #5
  %11 = fcmp oeq float %10, %3
  %12 = tail call float @llvm.floor.f32(float %7) #5
  %13 = fcmp oeq float %12, %7
  %14 = and i1 %11, %13
  %15 = tail call float @llvm.floor.f32(float %5) #5
  %16 = fcmp oeq float %15, %5
  %17 = and i1 %16, %14
  br i1 %17, label %18, label %21

18:                                               ; preds = %1
  %19 = tail call float @llvm.floor.f32(float %9) #5
  %20 = fcmp une float %19, %9
  br label %21

21:                                               ; preds = %1, %18
  %22 = phi i1 [ true, %1 ], [ %20, %18 ]
  ret i1 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK6GrQuad6asRectEP6SkRect(%class.GrQuad*, %struct.SkRect* nocapture) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %59

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 0, i64 0
  %8 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 0, i64 1
  %9 = load float, float* %8, align 4
  %10 = load float, float* %7, align 4
  %11 = fcmp olt float %9, %10
  %12 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 0, i64 2
  %13 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 0, i64 3
  %14 = load float, float* %13, align 4
  %15 = load float, float* %12, align 4
  %16 = fcmp olt float %14, %15
  %17 = select i1 %16, float %14, float %15
  %18 = select i1 %11, float %9, float %10
  %19 = fcmp olt float %17, %18
  %20 = select i1 %19, float %17, float %18
  %21 = insertelement <2 x float> undef, float %20, i32 0
  %22 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 1, i64 0
  %23 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 1, i64 1
  %24 = load float, float* %23, align 4
  %25 = load float, float* %22, align 4
  %26 = fcmp olt float %24, %25
  %27 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 1, i64 2
  %28 = getelementptr inbounds %class.GrQuad, %class.GrQuad* %0, i64 0, i32 1, i64 3
  %29 = load float, float* %28, align 4
  %30 = load float, float* %27, align 4
  %31 = fcmp olt float %29, %30
  %32 = select i1 %31, float %29, float %30
  %33 = select i1 %26, float %24, float %25
  %34 = fcmp olt float %32, %33
  %35 = select i1 %34, float %32, float %33
  %36 = insertelement <2 x float> %21, float %35, i32 1
  %37 = fcmp olt float %10, %9
  %38 = fcmp olt float %15, %14
  %39 = select i1 %37, float %9, float %10
  %40 = select i1 %38, float %14, float %15
  %41 = fcmp olt float %39, %40
  %42 = select i1 %41, float %40, float %39
  %43 = insertelement <2 x float> undef, float %42, i32 0
  %44 = fcmp olt float %25, %24
  %45 = fcmp olt float %30, %29
  %46 = select i1 %44, float %24, float %25
  %47 = select i1 %45, float %29, float %30
  %48 = fcmp olt float %46, %47
  %49 = select i1 %48, float %47, float %46
  %50 = insertelement <2 x float> %43, float %49, i32 1
  %51 = bitcast %struct.SkRect* %1 to <2 x float>*
  store <2 x float> %36, <2 x float>* %51, align 4
  %52 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 2
  %53 = bitcast float* %52 to <2 x float>*
  store <2 x float> %50, <2 x float>* %53, align 4
  %54 = load float, float* %7, align 4
  %55 = fcmp oeq float %54, %20
  br i1 %55, label %56, label %59

56:                                               ; preds = %6
  %57 = load float, float* %22, align 4
  %58 = fcmp oeq float %57, %35
  br label %59

59:                                               ; preds = %6, %56, %2
  %60 = phi i1 [ false, %2 ], [ false, %6 ], [ %58, %56 ]
  ret i1 %60
}

declare zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix*) local_unnamed_addr #3

declare zeroext i1 @_ZNK8SkMatrix20preservesRightAnglesEf(%class.SkMatrix*, float) local_unnamed_addr #3

declare zeroext i8 @_ZNK8SkMatrix26computePerspectiveTypeMaskEv(%class.SkMatrix*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
