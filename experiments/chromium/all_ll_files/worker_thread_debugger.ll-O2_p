; ModuleID = '../../third_party/blink/renderer/core/inspector/worker_thread_debugger.cc'
source_filename = "../../third_party/blink/renderer/core/inspector/worker_thread_debugger.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.31" }
%"struct.std::__1::__atomic_base.31" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::WorkerThreadDebugger" = type { %"class.blink::ThreadDebugger", i32, [4 x i8], %"class.WTF::HashMap" }
%"class.blink::ThreadDebugger" = type { %"class.v8_inspector::V8InspectorClient", %"class.blink::V8PerIsolateData::Data", %"class.v8::Isolate"*, %"class.std::__1::unique_ptr", %"class.WTF::Vector", %"class.WTF::Vector.2", %"class.WTF::Vector.7" }
%"class.v8_inspector::V8InspectorClient" = type { i32 (...)** }
%"class.blink::V8PerIsolateData::Data" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8_inspector::V8Inspector"* }
%"class.v8_inspector::V8Inspector" = type { i32 (...)** }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.std::__1::unique_ptr.1"*, i32, i32 }
%"class.std::__1::unique_ptr.1" = type opaque
%"class.WTF::Vector.2" = type { %"class.WTF::VectorBuffer.3" }
%"class.WTF::VectorBuffer.3" = type { %"class.WTF::VectorBufferBase.4" }
%"class.WTF::VectorBufferBase.4" = type { void (i8*)**, i32, i32 }
%"class.WTF::Vector.7" = type { %"class.WTF::VectorBuffer.8" }
%"class.WTF::VectorBuffer.8" = type { %"class.WTF::VectorBufferBase.9" }
%"class.WTF::VectorBufferBase.9" = type { i8**, i32, i32 }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { i32, %"class.blink::WorkerThread"* }
%"class.blink::WorkerThread" = type { %"class.base::TaskObserver", %"class.base::TimeTicks", i32, i8, i32, i32, %"class.base::TimeDelta", %class.scoped_refptr.840, %"class.base::UnguessableToken", %"class.blink::InspectorIssueStorage", i32, %"class.blink::WorkerReportingProxy"*, %class.scoped_refptr.530, %"class.std::__1::unique_ptr.1061", %"class.WTF::HashMap.1086", %"class.WTF::Mutex", i32, %"class.blink::Platform::NestedMessageLoopRunner"*, %"class.blink::CrossThreadPersistent.1091", %"class.blink::CrossThreadPersistent.1099", %"class.blink::CrossThreadPersistent.1101", %class.scoped_refptr.1132, %"class.blink::TaskHandle", %"class.WTF::HashSet.1133", %"class.WTF::HashSet.1137" }
%"class.base::TaskObserver" = type { i32 (...)** }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::TimeDelta" = type { i64 }
%class.scoped_refptr.840 = type { %"class.blink::InspectorTaskRunner"* }
%"class.blink::InspectorTaskRunner" = type <{ %"class.WTF::ThreadSafeRefCounted", [4 x i8], %"class.WTF::Mutex", %class.scoped_refptr.530, %"class.v8::Isolate"*, %"class.WTF::Deque.842", i8, [7 x i8] }>
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe.841" }
%"class.base::RefCountedThreadSafe.841" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.531" }
%"struct.std::__1::atomic.531" = type { %"struct.std::__1::__atomic_base.532" }
%"struct.std::__1::__atomic_base.532" = type { %"struct.std::__1::__atomic_base.533" }
%"struct.std::__1::__atomic_base.533" = type { %"struct.std::__1::__cxx_atomic_impl.534" }
%"struct.std::__1::__cxx_atomic_impl.534" = type { %"struct.std::__1::__cxx_atomic_base_impl.535" }
%"struct.std::__1::__cxx_atomic_base_impl.535" = type { i32 }
%"class.WTF::Deque.842" = type { %"class.WTF::Deque<WTF::CrossThreadOnceFunction<void ()>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<WTF::CrossThreadOnceFunction<void ()>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.845" }
%"class.WTF::VectorBuffer.845" = type { %"class.WTF::VectorBufferBase.846" }
%"class.WTF::VectorBufferBase.846" = type { %"class.WTF::CrossThreadOnceFunction"*, i32, i32 }
%"class.WTF::CrossThreadOnceFunction" = type { %"class.base::OnceCallback" }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.847 }
%class.scoped_refptr.847 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.848", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.848" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::InspectorIssueStorage" = type { i32 (...)**, %"class.WTF::Deque.849" }
%"class.WTF::Deque.849" = type { %"class.WTF::Deque<std::__1::unique_ptr<blink::protocol::Audits::InspectorIssue, std::__1::default_delete<blink::protocol::Audits::InspectorIssue> >, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::unique_ptr<blink::protocol::Audits::InspectorIssue, std::__1::default_delete<blink::protocol::Audits::InspectorIssue> >, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.852" }
%"class.WTF::VectorBuffer.852" = type { %"class.WTF::VectorBufferBase.853" }
%"class.WTF::VectorBufferBase.853" = type { %"class.std::__1::unique_ptr.854"*, i32, i32 }
%"class.std::__1::unique_ptr.854" = type { %"class.std::__1::__compressed_pair.855" }
%"class.std::__1::__compressed_pair.855" = type { %"struct.std::__1::__compressed_pair_elem.856" }
%"struct.std::__1::__compressed_pair_elem.856" = type { %"class.blink::protocol::Audits::InspectorIssue"* }
%"class.blink::protocol::Audits::InspectorIssue" = type { %"class.crdtp::ProtocolObject", %"class.WTF::String", %"class.std::__1::unique_ptr.857" }
%"class.crdtp::ProtocolObject" = type { %"class.crdtp::Serializable" }
%"class.crdtp::Serializable" = type { i32 (...)** }
%"class.WTF::String" = type { %class.scoped_refptr.30 }
%class.scoped_refptr.30 = type { %"class.WTF::StringImpl"* }
%"class.std::__1::unique_ptr.857" = type { %"class.std::__1::__compressed_pair.858" }
%"class.std::__1::__compressed_pair.858" = type { %"struct.std::__1::__compressed_pair_elem.859" }
%"struct.std::__1::__compressed_pair_elem.859" = type { %"class.blink::protocol::Audits::InspectorIssueDetails"* }
%"class.blink::protocol::Audits::InspectorIssueDetails" = type { %"class.crdtp::ProtocolObject.860", %"class.crdtp::detail::PtrMaybe", %"class.crdtp::detail::PtrMaybe.905", %"class.crdtp::detail::PtrMaybe.925", %"class.crdtp::detail::PtrMaybe.935", %"class.crdtp::detail::PtrMaybe.945", %"class.crdtp::detail::PtrMaybe.966", %"class.crdtp::detail::PtrMaybe.976", %"class.crdtp::detail::PtrMaybe.986", %"class.crdtp::detail::PtrMaybe.996", %"class.crdtp::detail::PtrMaybe.1025", %"class.crdtp::detail::PtrMaybe.1035", %"class.crdtp::detail::PtrMaybe.1045" }
%"class.crdtp::ProtocolObject.860" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe" = type { %"class.std::__1::unique_ptr.863" }
%"class.std::__1::unique_ptr.863" = type { %"class.std::__1::__compressed_pair.864" }
%"class.std::__1::__compressed_pair.864" = type { %"struct.std::__1::__compressed_pair_elem.865" }
%"struct.std::__1::__compressed_pair_elem.865" = type { %"class.blink::protocol::Audits::SameSiteCookieIssueDetails"* }
%"class.blink::protocol::Audits::SameSiteCookieIssueDetails" = type { %"class.crdtp::ProtocolObject.866", %"class.crdtp::detail::PtrMaybe.869", %"class.crdtp::detail::ValueMaybe", %"class.std::__1::unique_ptr.879", %"class.std::__1::unique_ptr.879", %"class.WTF::String", %"class.crdtp::detail::ValueMaybe", %"class.crdtp::detail::ValueMaybe", %"class.crdtp::detail::PtrMaybe.892" }
%"class.crdtp::ProtocolObject.866" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.869" = type { %"class.std::__1::unique_ptr.870" }
%"class.std::__1::unique_ptr.870" = type { %"class.std::__1::__compressed_pair.871" }
%"class.std::__1::__compressed_pair.871" = type { %"struct.std::__1::__compressed_pair_elem.872" }
%"struct.std::__1::__compressed_pair_elem.872" = type { %"class.blink::protocol::Audits::AffectedCookie"* }
%"class.blink::protocol::Audits::AffectedCookie" = type { %"class.crdtp::ProtocolObject.873", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String" }
%"class.crdtp::ProtocolObject.873" = type { %"class.crdtp::Serializable" }
%"class.std::__1::unique_ptr.879" = type { %"class.std::__1::__compressed_pair.880" }
%"class.std::__1::__compressed_pair.880" = type { %"struct.std::__1::__compressed_pair_elem.881" }
%"struct.std::__1::__compressed_pair_elem.881" = type { %"class.std::__1::vector.882"* }
%"class.std::__1::vector.882" = type { %"class.std::__1::__vector_base.883" }
%"class.std::__1::__vector_base.883" = type { %"class.WTF::String"*, %"class.WTF::String"*, %"class.std::__1::__compressed_pair.884" }
%"class.std::__1::__compressed_pair.884" = type { %"struct.std::__1::__compressed_pair_elem.885" }
%"struct.std::__1::__compressed_pair_elem.885" = type { %"class.WTF::String"* }
%"class.crdtp::detail::ValueMaybe" = type { i8, %"class.WTF::String" }
%"class.crdtp::detail::PtrMaybe.892" = type { %"class.std::__1::unique_ptr.893" }
%"class.std::__1::unique_ptr.893" = type { %"class.std::__1::__compressed_pair.894" }
%"class.std::__1::__compressed_pair.894" = type { %"struct.std::__1::__compressed_pair_elem.895" }
%"struct.std::__1::__compressed_pair_elem.895" = type { %"class.blink::protocol::Audits::AffectedRequest"* }
%"class.blink::protocol::Audits::AffectedRequest" = type { %"class.crdtp::ProtocolObject.896", %"class.WTF::String", %"class.crdtp::detail::ValueMaybe" }
%"class.crdtp::ProtocolObject.896" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.905" = type { %"class.std::__1::unique_ptr.906" }
%"class.std::__1::unique_ptr.906" = type { %"class.std::__1::__compressed_pair.907" }
%"class.std::__1::__compressed_pair.907" = type { %"struct.std::__1::__compressed_pair_elem.908" }
%"struct.std::__1::__compressed_pair_elem.908" = type { %"class.blink::protocol::Audits::MixedContentIssueDetails"* }
%"class.blink::protocol::Audits::MixedContentIssueDetails" = type { %"class.crdtp::ProtocolObject.909", %"class.crdtp::detail::ValueMaybe", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.crdtp::detail::PtrMaybe.892", %"class.crdtp::detail::PtrMaybe.912" }
%"class.crdtp::ProtocolObject.909" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.912" = type { %"class.std::__1::unique_ptr.913" }
%"class.std::__1::unique_ptr.913" = type { %"class.std::__1::__compressed_pair.914" }
%"class.std::__1::__compressed_pair.914" = type { %"struct.std::__1::__compressed_pair_elem.915" }
%"struct.std::__1::__compressed_pair_elem.915" = type { %"class.blink::protocol::Audits::AffectedFrame"* }
%"class.blink::protocol::Audits::AffectedFrame" = type { %"class.crdtp::ProtocolObject.916", %"class.WTF::String" }
%"class.crdtp::ProtocolObject.916" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.925" = type { %"class.std::__1::unique_ptr.926" }
%"class.std::__1::unique_ptr.926" = type { %"class.std::__1::__compressed_pair.927" }
%"class.std::__1::__compressed_pair.927" = type { %"struct.std::__1::__compressed_pair_elem.928" }
%"struct.std::__1::__compressed_pair_elem.928" = type { %"class.blink::protocol::Audits::BlockedByResponseIssueDetails"* }
%"class.blink::protocol::Audits::BlockedByResponseIssueDetails" = type { %"class.crdtp::ProtocolObject.929", %"class.std::__1::unique_ptr.893", %"class.crdtp::detail::PtrMaybe.912", %"class.crdtp::detail::PtrMaybe.912", %"class.WTF::String" }
%"class.crdtp::ProtocolObject.929" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.935" = type { %"class.std::__1::unique_ptr.936" }
%"class.std::__1::unique_ptr.936" = type { %"class.std::__1::__compressed_pair.937" }
%"class.std::__1::__compressed_pair.937" = type { %"struct.std::__1::__compressed_pair_elem.938" }
%"struct.std::__1::__compressed_pair_elem.938" = type { %"class.blink::protocol::Audits::HeavyAdIssueDetails"* }
%"class.blink::protocol::Audits::HeavyAdIssueDetails" = type { %"class.crdtp::ProtocolObject.939", %"class.WTF::String", %"class.WTF::String", %"class.std::__1::unique_ptr.913" }
%"class.crdtp::ProtocolObject.939" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.945" = type { %"class.std::__1::unique_ptr.946" }
%"class.std::__1::unique_ptr.946" = type { %"class.std::__1::__compressed_pair.947" }
%"class.std::__1::__compressed_pair.947" = type { %"struct.std::__1::__compressed_pair_elem.948" }
%"struct.std::__1::__compressed_pair_elem.948" = type { %"class.blink::protocol::Audits::ContentSecurityPolicyIssueDetails"* }
%"class.blink::protocol::Audits::ContentSecurityPolicyIssueDetails" = type { %"class.crdtp::ProtocolObject.949", %"class.crdtp::detail::ValueMaybe", %"class.WTF::String", i8, %"class.WTF::String", %"class.crdtp::detail::PtrMaybe.912", %"class.crdtp::detail::PtrMaybe.952", %"class.crdtp::detail::ValueMaybe.962" }
%"class.crdtp::ProtocolObject.949" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.952" = type { %"class.std::__1::unique_ptr.953" }
%"class.std::__1::unique_ptr.953" = type { %"class.std::__1::__compressed_pair.954" }
%"class.std::__1::__compressed_pair.954" = type { %"struct.std::__1::__compressed_pair_elem.955" }
%"struct.std::__1::__compressed_pair_elem.955" = type { %"class.blink::protocol::Audits::SourceCodeLocation"* }
%"class.blink::protocol::Audits::SourceCodeLocation" = type { %"class.crdtp::ProtocolObject.956", %"class.crdtp::detail::ValueMaybe", %"class.WTF::String", i32, i32 }
%"class.crdtp::ProtocolObject.956" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::ValueMaybe.962" = type { i8, i32 }
%"class.crdtp::detail::PtrMaybe.966" = type { %"class.std::__1::unique_ptr.967" }
%"class.std::__1::unique_ptr.967" = type { %"class.std::__1::__compressed_pair.968" }
%"class.std::__1::__compressed_pair.968" = type { %"struct.std::__1::__compressed_pair_elem.969" }
%"struct.std::__1::__compressed_pair_elem.969" = type { %"class.blink::protocol::Audits::SharedArrayBufferIssueDetails"* }
%"class.blink::protocol::Audits::SharedArrayBufferIssueDetails" = type { %"class.crdtp::ProtocolObject.970", %"class.std::__1::unique_ptr.953", i8, %"class.WTF::String" }
%"class.crdtp::ProtocolObject.970" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.976" = type { %"class.std::__1::unique_ptr.977" }
%"class.std::__1::unique_ptr.977" = type { %"class.std::__1::__compressed_pair.978" }
%"class.std::__1::__compressed_pair.978" = type { %"struct.std::__1::__compressed_pair_elem.979" }
%"struct.std::__1::__compressed_pair_elem.979" = type { %"class.blink::protocol::Audits::TrustedWebActivityIssueDetails"* }
%"class.blink::protocol::Audits::TrustedWebActivityIssueDetails" = type { %"class.crdtp::ProtocolObject.980", %"class.WTF::String", %"class.WTF::String", %"class.crdtp::detail::ValueMaybe.962", %"class.crdtp::detail::ValueMaybe", %"class.crdtp::detail::ValueMaybe" }
%"class.crdtp::ProtocolObject.980" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.986" = type { %"class.std::__1::unique_ptr.987" }
%"class.std::__1::unique_ptr.987" = type { %"class.std::__1::__compressed_pair.988" }
%"class.std::__1::__compressed_pair.988" = type { %"struct.std::__1::__compressed_pair_elem.989" }
%"struct.std::__1::__compressed_pair_elem.989" = type { %"class.blink::protocol::Audits::LowTextContrastIssueDetails"* }
%"class.blink::protocol::Audits::LowTextContrastIssueDetails" = type { %"class.crdtp::ProtocolObject.990", i32, %"class.WTF::String", double, double, double, %"class.WTF::String", %"class.WTF::String" }
%"class.crdtp::ProtocolObject.990" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.996" = type { %"class.std::__1::unique_ptr.997" }
%"class.std::__1::unique_ptr.997" = type { %"class.std::__1::__compressed_pair.998" }
%"class.std::__1::__compressed_pair.998" = type { %"struct.std::__1::__compressed_pair_elem.999" }
%"struct.std::__1::__compressed_pair_elem.999" = type { %"class.blink::protocol::Audits::CorsIssueDetails"* }
%"class.blink::protocol::Audits::CorsIssueDetails" = type { %"class.crdtp::ProtocolObject.1000", %"class.std::__1::unique_ptr.1003", i8, %"class.std::__1::unique_ptr.893", %"class.crdtp::detail::PtrMaybe.952", %"class.crdtp::detail::ValueMaybe", %"class.crdtp::detail::ValueMaybe", %"class.crdtp::detail::PtrMaybe.1012" }
%"class.crdtp::ProtocolObject.1000" = type { %"class.crdtp::Serializable" }
%"class.std::__1::unique_ptr.1003" = type { %"class.std::__1::__compressed_pair.1004" }
%"class.std::__1::__compressed_pair.1004" = type { %"struct.std::__1::__compressed_pair_elem.1005" }
%"struct.std::__1::__compressed_pair_elem.1005" = type { %"class.blink::protocol::Network::CorsErrorStatus"* }
%"class.blink::protocol::Network::CorsErrorStatus" = type { %"class.crdtp::ProtocolObject.1006", %"class.WTF::String", %"class.WTF::String" }
%"class.crdtp::ProtocolObject.1006" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.1012" = type { %"class.std::__1::unique_ptr.1013" }
%"class.std::__1::unique_ptr.1013" = type { %"class.std::__1::__compressed_pair.1014" }
%"class.std::__1::__compressed_pair.1014" = type { %"struct.std::__1::__compressed_pair_elem.1015" }
%"struct.std::__1::__compressed_pair_elem.1015" = type { %"class.blink::protocol::Network::ClientSecurityState"* }
%"class.blink::protocol::Network::ClientSecurityState" = type { %"class.crdtp::ProtocolObject.1016", i8, %"class.WTF::String", %"class.WTF::String" }
%"class.crdtp::ProtocolObject.1016" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.1025" = type { %"class.std::__1::unique_ptr.1026" }
%"class.std::__1::unique_ptr.1026" = type { %"class.std::__1::__compressed_pair.1027" }
%"class.std::__1::__compressed_pair.1027" = type { %"struct.std::__1::__compressed_pair_elem.1028" }
%"struct.std::__1::__compressed_pair_elem.1028" = type { %"class.blink::protocol::Audits::AttributionReportingIssueDetails"* }
%"class.blink::protocol::Audits::AttributionReportingIssueDetails" = type { %"class.crdtp::ProtocolObject.1029", %"class.WTF::String", %"class.crdtp::detail::PtrMaybe.912", %"class.crdtp::detail::PtrMaybe.892", %"class.crdtp::detail::ValueMaybe.962", %"class.crdtp::detail::ValueMaybe" }
%"class.crdtp::ProtocolObject.1029" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.1035" = type { %"class.std::__1::unique_ptr.1036" }
%"class.std::__1::unique_ptr.1036" = type { %"class.std::__1::__compressed_pair.1037" }
%"class.std::__1::__compressed_pair.1037" = type { %"struct.std::__1::__compressed_pair_elem.1038" }
%"struct.std::__1::__compressed_pair_elem.1038" = type { %"class.blink::protocol::Audits::QuirksModeIssueDetails"* }
%"class.blink::protocol::Audits::QuirksModeIssueDetails" = type { %"class.crdtp::ProtocolObject.1039", i8, i32, %"class.WTF::String", %"class.WTF::String", %"class.WTF::String" }
%"class.crdtp::ProtocolObject.1039" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.1045" = type { %"class.std::__1::unique_ptr.1046" }
%"class.std::__1::unique_ptr.1046" = type { %"class.std::__1::__compressed_pair.1047" }
%"class.std::__1::__compressed_pair.1047" = type { %"struct.std::__1::__compressed_pair_elem.1048" }
%"struct.std::__1::__compressed_pair_elem.1048" = type { %"class.blink::protocol::Audits::NavigatorUserAgentIssueDetails"* }
%"class.blink::protocol::Audits::NavigatorUserAgentIssueDetails" = type { %"class.crdtp::ProtocolObject.1049", %"class.WTF::String", %"class.crdtp::detail::PtrMaybe.952" }
%"class.crdtp::ProtocolObject.1049" = type { %"class.crdtp::Serializable" }
%"class.blink::WorkerReportingProxy" = type { i32 (...)** }
%class.scoped_refptr.530 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::unique_ptr.1061" = type { %"class.std::__1::__compressed_pair.1062" }
%"class.std::__1::__compressed_pair.1062" = type { %"struct.std::__1::__compressed_pair_elem.1063" }
%"struct.std::__1::__compressed_pair_elem.1063" = type { %"class.blink::scheduler::WorkerScheduler"* }
%"class.blink::scheduler::WorkerScheduler" = type { %"class.blink::FrameOrWorkerScheduler", %class.scoped_refptr.1070, %class.scoped_refptr.1070, %class.scoped_refptr.1070, %"class.std::__1::map.1071", i32, %"class.blink::scheduler::WorkerThreadScheduler"*, i8, i32, %"class.base::WeakPtrFactory.1082" }
%"class.blink::FrameOrWorkerScheduler" = type { i32 (...)**, %"class.WTF::HashMap.1064", %"class.base::WeakPtrFactory.1069" }
%"class.WTF::HashMap.1064" = type { %"class.WTF::HashTable.1065" }
%"class.WTF::HashTable.1065" = type <{ %"struct.WTF::KeyValuePair.1068"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1068" = type opaque
%"class.base::WeakPtrFactory.1069" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.808 }
%class.scoped_refptr.808 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.594", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.594" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.595" }
%"struct.std::__1::atomic.595" = type { %"struct.std::__1::__atomic_base.596" }
%"struct.std::__1::__atomic_base.596" = type { %"struct.std::__1::__atomic_base.597" }
%"struct.std::__1::__atomic_base.597" = type { %"struct.std::__1::__cxx_atomic_impl.598" }
%"struct.std::__1::__cxx_atomic_impl.598" = type { %"struct.std::__1::__cxx_atomic_base_impl.599" }
%"struct.std::__1::__cxx_atomic_base_impl.599" = type { i8 }
%class.scoped_refptr.1070 = type { %"class.blink::scheduler::NonMainThreadTaskQueue"* }
%"class.blink::scheduler::NonMainThreadTaskQueue" = type opaque
%"class.std::__1::map.1071" = type { %"class.std::__1::__tree.1072" }
%"class.std::__1::__tree.1072" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1073", %"class.std::__1::__compressed_pair.1077" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.1073" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1077" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { i64 }
%"class.blink::scheduler::WorkerThreadScheduler" = type opaque
%"class.base::WeakPtrFactory.1082" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.WTF::HashMap.1086" = type { %"class.WTF::HashTable.1087" }
%"class.WTF::HashTable.1087" = type <{ %"struct.WTF::KeyValuePair.1090"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1090" = type opaque
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.blink::Platform::NestedMessageLoopRunner" = type { i32 (...)** }
%"class.blink::CrossThreadPersistent.1091" = type { %"class.blink::PersistentBase.1092" }
%"class.blink::PersistentBase.1092" = type { %"class.blink::ConsoleMessageStorage"*, %"class.blink::CrossThreadPersistentNodePtr" }
%"class.blink::ConsoleMessageStorage" = type { i32, %"class.blink::HeapDeque" }
%"class.blink::HeapDeque" = type { %"class.WTF::Deque.1097" }
%"class.WTF::Deque.1097" = type { %"class.WTF::Deque<blink::Member<blink::ConsoleMessage>, 0, blink::HeapAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<blink::Member<blink::ConsoleMessage>, 0, blink::HeapAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.374" }
%"class.WTF::VectorBuffer.374" = type { %"class.WTF::VectorBufferBase.375" }
%"class.WTF::VectorBufferBase.375" = type { %"class.blink::Member.376"*, i32, i32 }
%"class.blink::Member.376" = type { %"class.blink::MemberBase.377" }
%"class.blink::MemberBase.377" = type { %"class.blink::ConsoleMessage"* }
%"class.blink::ConsoleMessage" = type { i32, i32, %"class.WTF::String", %"class.std::__1::unique_ptr.93", %"class.WTF::String", double, %"class.WTF::String", %"class.blink::WeakMember.380", %"class.WTF::Vector.382" }
%"class.std::__1::unique_ptr.93" = type { %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"class.blink::SourceLocation"* }
%"class.blink::SourceLocation" = type <{ %"class.WTF::String", i32, i32, %"class.std::__1::unique_ptr.96", i32, [4 x i8] }>
%"class.std::__1::unique_ptr.96" = type { %"class.std::__1::__compressed_pair.97" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"struct.std::__1::__compressed_pair_elem.98" = type { %"class.v8_inspector::V8StackTrace"* }
%"class.v8_inspector::V8StackTrace" = type { i32 (...)** }
%"class.blink::WeakMember.380" = type { %"class.blink::MemberBase.381" }
%"class.blink::MemberBase.381" = type { %"class.blink::LocalFrame"* }
%"class.blink::LocalFrame" = type opaque
%"class.WTF::Vector.382" = type { %"class.WTF::VectorBuffer.383" }
%"class.WTF::VectorBuffer.383" = type { %"class.WTF::VectorBufferBase.384" }
%"class.WTF::VectorBufferBase.384" = type { i32*, i32, i32 }
%"class.blink::CrossThreadPersistentNodePtr" = type { %"struct.std::__1::atomic.425" }
%"struct.std::__1::atomic.425" = type { %"struct.std::__1::__atomic_base.426" }
%"struct.std::__1::__atomic_base.426" = type { %"struct.std::__1::__cxx_atomic_impl.427" }
%"struct.std::__1::__cxx_atomic_impl.427" = type { %"struct.std::__1::__cxx_atomic_base_impl.428" }
%"struct.std::__1::__cxx_atomic_base_impl.428" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.122", i32, [4 x i8], %"class.std::__1::unique_ptr.260", %"class.std::__1::unique_ptr.260", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.270", %"class.std::__1::unique_ptr.276", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.294", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.301", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.122" = type { %"class.std::__1::__compressed_pair.123" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.125", %"class.std::__1::unique_ptr.131", %"class.std::__1::unique_ptr.137", %"class.std::__1::unique_ptr.143", %"class.std::__1::unique_ptr.149", %"class.std::__1::unique_ptr.155", %"class.std::__1::unique_ptr.166", %"class.std::__1::unique_ptr.173", %"class.std::__1::unique_ptr.173", %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.187", %"class.std::__1::unique_ptr.194", %"class.std::__1::unique_ptr.194", %"class.std::__1::unique_ptr.201", %"class.std::__1::unique_ptr.208", %"class.std::__1::unique_ptr.215", %"class.std::__1::unique_ptr.240", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.125" = type { %"class.std::__1::__compressed_pair.126" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127" }
%"struct.std::__1::__compressed_pair_elem.127" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.131" = type { %"class.std::__1::__compressed_pair.132" }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.137" = type { %"class.std::__1::__compressed_pair.138" }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.143" = type { %"class.std::__1::__compressed_pair.144" }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145" }
%"struct.std::__1::__compressed_pair_elem.145" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.149" = type { %"class.std::__1::__compressed_pair.150" }
%"class.std::__1::__compressed_pair.150" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"struct.std::__1::__compressed_pair_elem.151" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.155" = type { %"class.std::__1::__compressed_pair.156" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.158" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%"struct.std::__1::atomic.158" = type { %"struct.std::__1::__atomic_base.159" }
%"struct.std::__1::__atomic_base.159" = type { %"struct.std::__1::__atomic_base.160" }
%"struct.std::__1::__atomic_base.160" = type { %"struct.std::__1::__cxx_atomic_impl.161" }
%"struct.std::__1::__cxx_atomic_impl.161" = type { %"struct.std::__1::__cxx_atomic_base_impl.162" }
%"struct.std::__1::__cxx_atomic_base_impl.162" = type { i64 }
%"class.std::__1::unique_ptr.166" = type { %"class.std::__1::__compressed_pair.167" }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %"class.blink::Worklist.169"* }
%"class.blink::Worklist.169" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.158" }
%"class.std::__1::unique_ptr.173" = type { %"class.std::__1::__compressed_pair.174" }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.175" }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"class.blink::Worklist.176"* }
%"class.blink::Worklist.176" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.158" }
%"class.std::__1::unique_ptr.180" = type { %"class.std::__1::__compressed_pair.181" }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"class.blink::Worklist.183"* }
%"class.blink::Worklist.183" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.158" }
%"class.std::__1::unique_ptr.187" = type { %"class.std::__1::__compressed_pair.188" }
%"class.std::__1::__compressed_pair.188" = type { %"struct.std::__1::__compressed_pair_elem.189" }
%"struct.std::__1::__compressed_pair_elem.189" = type { %"class.blink::Worklist.190"* }
%"class.blink::Worklist.190" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.158" }
%"class.std::__1::unique_ptr.194" = type { %"class.std::__1::__compressed_pair.195" }
%"class.std::__1::__compressed_pair.195" = type { %"struct.std::__1::__compressed_pair_elem.196" }
%"struct.std::__1::__compressed_pair_elem.196" = type { %"class.blink::Worklist.197"* }
%"class.blink::Worklist.197" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.158" }
%"class.std::__1::unique_ptr.201" = type { %"class.std::__1::__compressed_pair.202" }
%"class.std::__1::__compressed_pair.202" = type { %"struct.std::__1::__compressed_pair_elem.203" }
%"struct.std::__1::__compressed_pair_elem.203" = type { %"class.blink::Worklist.204"* }
%"class.blink::Worklist.204" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.158" }
%"class.std::__1::unique_ptr.208" = type { %"class.std::__1::__compressed_pair.209" }
%"class.std::__1::__compressed_pair.209" = type { %"struct.std::__1::__compressed_pair_elem.210" }
%"struct.std::__1::__compressed_pair_elem.210" = type { %"class.blink::Worklist.211"* }
%"class.blink::Worklist.211" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.158" }
%"class.std::__1::unique_ptr.215" = type { %"class.std::__1::__compressed_pair.216" }
%"class.std::__1::__compressed_pair.216" = type { %"struct.std::__1::__compressed_pair_elem.217" }
%"struct.std::__1::__compressed_pair_elem.217" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.218", %"class.std::__1::__compressed_pair.226", %"class.std::__1::__compressed_pair.231", %"class.std::__1::__compressed_pair.233", [4 x i8] }>
%"class.std::__1::unique_ptr.218" = type { %"class.std::__1::__compressed_pair.219" }
%"class.std::__1::__compressed_pair.219" = type { %"struct.std::__1::__compressed_pair_elem.220", %"struct.std::__1::__compressed_pair_elem.221" }
%"struct.std::__1::__compressed_pair_elem.220" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.221" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.222" }
%"class.std::__1::__compressed_pair.222" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::__compressed_pair.226" = type { %"struct.std::__1::__compressed_pair_elem.227" }
%"struct.std::__1::__compressed_pair_elem.227" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.231" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::__compressed_pair.233" = type { %"struct.std::__1::__compressed_pair_elem.234" }
%"struct.std::__1::__compressed_pair_elem.234" = type { float }
%"class.std::__1::unique_ptr.240" = type { %"class.std::__1::__compressed_pair.241" }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.242" }
%"struct.std::__1::__compressed_pair_elem.242" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.243", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.243" = type { %"class.std::__1::__compressed_pair.244" }
%"class.std::__1::__compressed_pair.244" = type { %"struct.std::__1::__compressed_pair_elem.245" }
%"struct.std::__1::__compressed_pair_elem.245" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.252" }
%"class.WTF::Vector.252" = type { %"class.WTF::VectorBuffer.253" }
%"class.WTF::VectorBuffer.253" = type { %"class.WTF::VectorBufferBase.254" }
%"class.WTF::VectorBufferBase.254" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.260" = type { %"class.std::__1::__compressed_pair.261" }
%"class.std::__1::__compressed_pair.261" = type { %"struct.std::__1::__compressed_pair_elem.262" }
%"struct.std::__1::__compressed_pair_elem.262" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.268" }
%"class.WTF::VectorBuffer.268" = type { %"class.WTF::VectorBufferBase.269" }
%"class.WTF::VectorBufferBase.269" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.270" = type { %"class.std::__1::__compressed_pair.271" }
%"class.std::__1::__compressed_pair.271" = type { %"struct.std::__1::__compressed_pair_elem.272" }
%"struct.std::__1::__compressed_pair_elem.272" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.276" = type { %"class.std::__1::__compressed_pair.277" }
%"class.std::__1::__compressed_pair.277" = type { %"struct.std::__1::__compressed_pair_elem.278" }
%"struct.std::__1::__compressed_pair_elem.278" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.282" }
%"class.std::__1::unique_ptr.282" = type { %"class.std::__1::__compressed_pair.283" }
%"class.std::__1::__compressed_pair.283" = type { %"struct.std::__1::__compressed_pair_elem.284" }
%"struct.std::__1::__compressed_pair_elem.284" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.169"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.176"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.183"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.190"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.197"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.388" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.388" = type { %"struct.std::__1::__compressed_pair_elem.389" }
%"struct.std::__1::__compressed_pair_elem.389" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.288" = type { %"class.std::__1::__compressed_pair.289" }
%"class.std::__1::__compressed_pair.289" = type { %"struct.std::__1::__compressed_pair_elem.290" }
%"struct.std::__1::__compressed_pair_elem.290" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.294" = type { %"class.std::__1::__compressed_pair.295" }
%"class.std::__1::__compressed_pair.295" = type { %"struct.std::__1::__compressed_pair_elem.296" }
%"struct.std::__1::__compressed_pair_elem.296" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.300 }
%class.scoped_refptr.300 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.301" = type { %"struct.std::__1::__atomic_base.302" }
%"struct.std::__1::__atomic_base.302" = type { %"struct.std::__1::__cxx_atomic_impl.303" }
%"struct.std::__1::__cxx_atomic_impl.303" = type { %"struct.std::__1::__cxx_atomic_base_impl.304" }
%"struct.std::__1::__cxx_atomic_base_impl.304" = type { i8 }
%"class.blink::CrossThreadPersistent.1099" = type { %"class.blink::PersistentBase.1100" }
%"class.blink::PersistentBase.1100" = type { %"class.blink::WorkerOrWorkletGlobalScope"*, %"class.blink::CrossThreadPersistentNodePtr" }
%"class.blink::WorkerOrWorkletGlobalScope" = type { %"class.blink::EventTargetWithInlineData", %"class.blink::ExecutionContext.base", i8, %"class.WTF::String", %"class.base::UnguessableToken", %"class.blink::CrossThreadPersistent", %"class.std::__1::unique_ptr.429", %"class.blink::Member.435", %"class.blink::HeapHashSet.437", %class.scoped_refptr.444, %"class.blink::Member.446", %"class.blink::Member.448", i32, %"class.WTF::Vector.330", %"class.blink::WorkerReportingProxy"*, %"class.std::__1::bitset", %"class.blink::Deprecation", %"class.blink::Member.516" }
%"class.blink::EventTargetWithInlineData" = type { %"class.blink::EventTarget", %"class.blink::EventTargetData" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::EventTargetData" = type { %"class.blink::EventListenerMap", %"class.std::__1::unique_ptr.407" }
%"class.blink::EventListenerMap" = type { %"class.blink::HeapVector.395" }
%"class.blink::HeapVector.395" = type { %"class.WTF::Vector.398" }
%"class.WTF::Vector.398" = type { %"class.WTF::VectorBuffer.399" }
%"class.WTF::VectorBuffer.399" = type { %"class.WTF::VectorBufferBase.400", [32 x i8] }
%"class.WTF::VectorBufferBase.400" = type { %"struct.std::__1::pair.401"*, i32, i32 }
%"struct.std::__1::pair.401" = type { %"class.WTF::AtomicString", %"class.blink::Member.402" }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.blink::Member.402" = type { %"class.blink::MemberBase.403" }
%"class.blink::MemberBase.403" = type { %"class.blink::HeapVector.404"* }
%"class.blink::HeapVector.404" = type opaque
%"class.std::__1::unique_ptr.407" = type { %"class.std::__1::__compressed_pair.408" }
%"class.std::__1::__compressed_pair.408" = type { %"struct.std::__1::__compressed_pair_elem.409" }
%"struct.std::__1::__compressed_pair_elem.409" = type { %"class.WTF::Vector.410"* }
%"class.WTF::Vector.410" = type opaque
%"class.blink::ExecutionContext.base" = type <{ %"class.blink::Supplementable", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.71", i32, i8, [3 x i8], %"class.blink::HeapVector", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.307", %"class.blink::Member.309", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.318", %"class.blink::Member.324", %"class.blink::Member.326", i8 }>
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap.14" }
%"class.WTF::HashMap.14" = type { %"class.WTF::HashTable.15" }
%"class.WTF::HashTable.15" = type <{ %"struct.WTF::KeyValuePair.17"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.17" = type opaque
%"class.blink::MojoBindingContext" = type { %"class.blink::ContextLifecycleNotifier", %"class.blink::Supplementable.22" }
%"class.blink::ContextLifecycleNotifier" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapObserverSet" }
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet" }
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable.20" }
%"class.WTF::HashTable.20" = type <{ %"class.blink::WeakMember"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember" = type opaque
%"class.blink::Supplementable.22" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.23" }
%"class.blink::HeapHashMap.23" = type { %"class.WTF::HashMap.26" }
%"class.WTF::HashMap.26" = type { %"class.WTF::HashTable.27" }
%"class.WTF::HashTable.27" = type <{ %"struct.WTF::KeyValuePair.29"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.29" = type { i8*, %"class.blink::Member.1678" }
%"class.blink::Member.1678" = type { %"class.blink::MemberBase.1679" }
%"class.blink::MemberBase.1679" = type { %"class.blink::Supplement"* }
%"class.blink::Supplement" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.1680" }
%"class.blink::Member.1680" = type { %"class.blink::MemberBase.1681" }
%"class.blink::MemberBase.1681" = type { %"class.blink::MojoBindingContext"* }
%"class.blink::ConsoleLogger" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::FeatureContext" = type { i32 (...)** }
%"class.blink::SecurityContext" = type { i32 (...)**, i32, %class.scoped_refptr, %"class.std::__1::unique_ptr.33", %"class.std::__1::unique_ptr.33", %"class.std::__1::unique_ptr.61", %"class.std::__1::unique_ptr.61", %"class.blink::Member", i32, [4 x i8], %"class.WTF::HashSet.67", i32, i32 }
%class.scoped_refptr = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type { %"class.WTF::RefCounted", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i16, %"class.absl::optional", i8, i8, i8, i8, i8, i8, %"class.base::UnguessableToken", %class.scoped_refptr.32 }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%class.scoped_refptr.32 = type { %"class.blink::SecurityOrigin"* }
%"class.std::__1::unique_ptr.33" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.blink::PermissionsPolicy"* }
%"class.blink::PermissionsPolicy" = type { %"class.url::Origin", %"class.std::__1::map", %"class.std::__1::map.48", %"class.std::__1::map.57"* }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.38 }
%union.anon.38 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.40", %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::map.48" = type { %"class.std::__1::__tree.49" }
%"class.std::__1::__tree.49" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.50", %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::map.57" = type opaque
%"class.std::__1::unique_ptr.61" = type { %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"class.blink::DocumentPolicy"* }
%"class.blink::DocumentPolicy" = type opaque
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::ExecutionContext"* }
%"class.blink::ExecutionContext" = type <{ %"class.blink::Supplementable", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.71", i32, i8, [3 x i8], %"class.blink::HeapVector", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.307", %"class.blink::Member.309", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.318", %"class.blink::Member.324", %"class.blink::Member.326", i8, [7 x i8] }>
%"class.WTF::HashSet.67" = type { %"class.WTF::HashTable.68" }
%"class.WTF::HashTable.68" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.71" = type { %"class.blink::MemberBase.72" }
%"class.blink::MemberBase.72" = type { %"class.blink::Agent"* }
%"class.blink::Agent" = type opaque
%"class.blink::HeapVector" = type { %"class.WTF::Vector.75" }
%"class.WTF::Vector.75" = type { %"class.WTF::VectorBuffer.76" }
%"class.WTF::VectorBuffer.76" = type { %"class.WTF::VectorBufferBase.77" }
%"class.WTF::VectorBufferBase.77" = type { %"class.blink::Member.78"*, i32, i32 }
%"class.blink::Member.78" = type { %"class.blink::MemberBase.79" }
%"class.blink::MemberBase.79" = type { %"class.blink::ErrorEvent"* }
%"class.blink::ErrorEvent" = type { %"class.blink::Event", %"class.WTF::String", %"class.WTF::String", %"class.std::__1::unique_ptr.93", %"class.blink::WorldSafeV8Reference", %class.scoped_refptr.305 }
%"class.blink::Event" = type { %"class.blink::ScriptWrappable", %"class.WTF::AtomicString", i16, i32, i8, %"class.blink::probe::AsyncTaskId", %"class.blink::Member.87", %"class.blink::Member.87", %"class.blink::Member.89", %"class.blink::Member.91", %"class.base::TimeTicks" }
%"class.blink::probe::AsyncTaskId" = type { i8, %"class.absl::optional.82" }
%"class.absl::optional.82" = type { %"class.absl::optional_internal::optional_data.83" }
%"class.absl::optional_internal::optional_data.83" = type { %"class.absl::optional_internal::optional_data_base.84" }
%"class.absl::optional_internal::optional_data_base.84" = type { %"class.absl::optional_internal::optional_data_dtor_base.85" }
%"class.absl::optional_internal::optional_data_dtor_base.85" = type { i8, %union.anon.86 }
%union.anon.86 = type { i64 }
%"class.blink::Member.87" = type { %"class.blink::MemberBase.88" }
%"class.blink::MemberBase.88" = type { %"class.blink::EventTarget"* }
%"class.blink::Member.89" = type { %"class.blink::MemberBase.90" }
%"class.blink::MemberBase.90" = type { %"class.blink::Event"* }
%"class.blink::Member.91" = type { %"class.blink::MemberBase.92" }
%"class.blink::MemberBase.92" = type { %"class.blink::EventPath"* }
%"class.blink::EventPath" = type opaque
%"class.blink::WorldSafeV8Reference" = type { %"class.blink::TraceWrapperV8Reference.105", %class.scoped_refptr.108 }
%"class.blink::TraceWrapperV8Reference.105" = type { %"class.v8::TracedReference.106" }
%"class.v8::TracedReference.106" = type { %"class.v8::BasicTracedReference.107" }
%"class.v8::BasicTracedReference.107" = type { %"class.v8::TracedReferenceBase" }
%class.scoped_refptr.108 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.109", i32, i32, %"class.blink::Persistent" }
%"class.WTF::RefCounted.109" = type { %"class.base::RefCounted.110" }
%"class.base::RefCounted.110" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap.113" }
%"class.blink::HeapHashMap.113" = type { %"class.WTF::HashMap.116" }
%"class.WTF::HashMap.116" = type { %"class.WTF::HashTable.117" }
%"class.WTF::HashTable.117" = type <{ %"struct.WTF::KeyValuePair.119"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.119" = type { %"class.blink::WeakMember.120", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember.120" = type { %"class.blink::MemberBase.121" }
%"class.blink::MemberBase.121" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%class.scoped_refptr.305 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::Member.307" = type { %"class.blink::MemberBase.308" }
%"class.blink::MemberBase.308" = type { %"class.blink::PublicURLManager"* }
%"class.blink::PublicURLManager" = type opaque
%"class.blink::Member.309" = type { %"class.blink::MemberBase.310" }
%"class.blink::MemberBase.310" = type { %"class.blink::ContentSecurityPolicyDelegate"* }
%"class.blink::ContentSecurityPolicyDelegate" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::DOMTimerCoordinator" = type { %"class.blink::HeapHashMap.311", i32, i32 }
%"class.blink::HeapHashMap.311" = type { %"class.WTF::HashMap.314" }
%"class.WTF::HashMap.314" = type { %"class.WTF::HashTable.315" }
%"class.WTF::HashTable.315" = type <{ %"struct.WTF::KeyValuePair.317"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.317" = type opaque
%"class.std::__1::unique_ptr.318" = type { %"class.std::__1::__compressed_pair.319" }
%"class.std::__1::__compressed_pair.319" = type { %"struct.std::__1::__compressed_pair_elem.320" }
%"struct.std::__1::__compressed_pair_elem.320" = type { %"class.blink::PolicyContainer"* }
%"class.blink::PolicyContainer" = type opaque
%"class.blink::Member.324" = type { %"class.blink::MemberBase.325" }
%"class.blink::MemberBase.325" = type { %"class.blink::OriginTrialContext"* }
%"class.blink::OriginTrialContext" = type opaque
%"class.blink::Member.326" = type { %"class.blink::MemberBase.327" }
%"class.blink::MemberBase.327" = type { %"class.blink::ContentSecurityPolicy"* }
%"class.blink::ContentSecurityPolicy" = type <{ %"class.blink::Member.309", i8, [7 x i8], %"class.WTF::Vector.330", %"class.blink::HeapVector.370", i8, [7 x i8], %"class.WTF::HashSet.67", i8, i8, [2 x i8], i32, i8, [7 x i8], %"class.WTF::String", i32, i8, [3 x i8] }>
%"class.blink::HeapVector.370" = type { %"class.WTF::Vector.373" }
%"class.WTF::Vector.373" = type { %"class.WTF::VectorBuffer.374" }
%"class.blink::CrossThreadPersistent" = type { %"class.blink::PersistentBase.414" }
%"class.blink::PersistentBase.414" = type { %"class.blink::WorkerClients"*, %"class.blink::CrossThreadPersistentNodePtr" }
%"class.blink::WorkerClients" = type { %"class.blink::Supplementable.417" }
%"class.blink::Supplementable.417" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.418" }
%"class.blink::HeapHashMap.418" = type { %"class.WTF::HashMap.421" }
%"class.WTF::HashMap.421" = type { %"class.WTF::HashTable.422" }
%"class.WTF::HashTable.422" = type <{ %"struct.WTF::KeyValuePair.424"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.424" = type { i8*, %"class.blink::Member.1714" }
%"class.blink::Member.1714" = type { %"class.blink::MemberBase.1715" }
%"class.blink::MemberBase.1715" = type { %"class.blink::Supplement.1716"* }
%"class.blink::Supplement.1716" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.1717" }
%"class.blink::Member.1717" = type { %"class.blink::MemberBase.1718" }
%"class.blink::MemberBase.1718" = type { %"class.blink::WorkerClients"* }
%"class.std::__1::unique_ptr.429" = type { %"class.std::__1::__compressed_pair.430" }
%"class.std::__1::__compressed_pair.430" = type { %"struct.std::__1::__compressed_pair_elem.431" }
%"struct.std::__1::__compressed_pair_elem.431" = type { %"class.blink::WebContentSettingsClient"* }
%"class.blink::WebContentSettingsClient" = type { i32 (...)** }
%"class.blink::Member.435" = type { %"class.blink::MemberBase.436" }
%"class.blink::MemberBase.436" = type { %"class.blink::ResourceFetcher"* }
%"class.blink::ResourceFetcher" = type { i32 (...)**, %"class.blink::ThreadState::PrefinalizerRegistration", %"class.blink::Member.522", %"class.blink::Member.524", %"class.blink::Member.528", %class.scoped_refptr.530, %class.scoped_refptr.530, %"class.blink::Member.536", %"class.blink::Member.538", %"class.blink::Member.544", %"class.blink::Member.548", %"class.blink::Member.606", %"class.blink::HeapHashMap.608", %"class.blink::HeapHashSet.615", %"class.blink::HeapHashSet.615", %"class.blink::HeapHashMap.791", %"class.blink::HeapVector.798", %"class.blink::Member.806", %"class.blink::HeapTaskRunnerTimer", %"class.blink::TaskHandle", %"class.blink::HeapHashMap.809", %"class.WTF::Vector.816", %"class.blink::HeapHashSet.822", %"class.blink::HeapHashSet.822", %"class.std::__1::unique_ptr.828", %"class.base::WeakPtr", %"class.blink::TaskHandle", i32, %"class.blink::HeapMojoRemote", %"class.blink::Member.837", i8, i8, %"class.base::WeakPtrFactory.839" }
%"class.blink::ThreadState::PrefinalizerRegistration" = type { i8 }
%"class.blink::Member.522" = type { %"class.blink::MemberBase.523" }
%"class.blink::MemberBase.523" = type { %"class.blink::DetachableResourceFetcherProperties"* }
%"class.blink::DetachableResourceFetcherProperties" = type opaque
%"class.blink::Member.524" = type { %"class.blink::MemberBase.525" }
%"class.blink::MemberBase.525" = type { %"class.blink::ResourceLoadObserver"* }
%"class.blink::ResourceLoadObserver" = type { i32 (...)** }
%"class.blink::Member.528" = type { %"class.blink::MemberBase.529" }
%"class.blink::MemberBase.529" = type { %"class.blink::FetchContext"* }
%"class.blink::FetchContext" = type opaque
%"class.blink::Member.536" = type { %"class.blink::MemberBase.537" }
%"class.blink::MemberBase.537" = type { %"class.blink::DetachableUseCounter"* }
%"class.blink::DetachableUseCounter" = type opaque
%"class.blink::Member.538" = type { %"class.blink::MemberBase.539" }
%"class.blink::MemberBase.539" = type { %"class.blink::DetachableConsoleLogger"* }
%"class.blink::DetachableConsoleLogger" = type { %"class.blink::ConsoleLogger", %"class.blink::Member.542" }
%"class.blink::Member.542" = type { %"class.blink::MemberBase.543" }
%"class.blink::MemberBase.543" = type { %"class.blink::ConsoleLogger"* }
%"class.blink::Member.544" = type { %"class.blink::MemberBase.545" }
%"class.blink::MemberBase.545" = type { %"class.blink::ResourceFetcher::LoaderFactory"* }
%"class.blink::ResourceFetcher::LoaderFactory" = type { i32 (...)** }
%"class.blink::Member.548" = type { %"class.blink::MemberBase.549" }
%"class.blink::MemberBase.549" = type { %"class.blink::ResourceLoadScheduler"* }
%"class.blink::ResourceLoadScheduler" = type <{ %"class.blink::FrameOrWorkerScheduler::Observer", %"class.blink::Member.552", i8, [3 x i8], i32, i64, i64, i64, i64, %"class.WTF::HashMap.554", %"class.WTF::HashSet.559", i8, [3 x i8], i32, %"class.blink::HeapHashMap.563", %"class.std::__1::map.570", %"class.std::__1::map.581", %"class.std::__1::unique_ptr.590", %"class.blink::Member.538", %"class.base::Clock"*, i32, i8, [3 x i8], i32, [4 x i8], %"class.blink::Member.603", %"class.mojo::InlinedStructPtr.605", [4 x i8] }>
%"class.blink::FrameOrWorkerScheduler::Observer" = type { i32 (...)** }
%"class.blink::Member.552" = type { %"class.blink::MemberBase.553" }
%"class.blink::MemberBase.553" = type { %"class.blink::DetachableResourceFetcherProperties"* }
%"class.WTF::HashMap.554" = type { %"class.WTF::HashTable.555" }
%"class.WTF::HashTable.555" = type <{ %"struct.WTF::KeyValuePair.558"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.558" = type <{ i64, i32, [4 x i8] }>
%"class.WTF::HashSet.559" = type { %"class.WTF::HashTable.560" }
%"class.WTF::HashTable.560" = type <{ i64*, i32, i32, i32, [4 x i8] }>
%"class.blink::HeapHashMap.563" = type { %"class.WTF::HashMap.566" }
%"class.WTF::HashMap.566" = type { %"class.WTF::HashTable.567" }
%"class.WTF::HashTable.567" = type <{ %"struct.WTF::KeyValuePair.569"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.569" = type opaque
%"class.std::__1::map.570" = type { %"class.std::__1::__tree.571" }
%"class.std::__1::__tree.571" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.572", %"class.std::__1::__compressed_pair.576" }
%"class.std::__1::__compressed_pair.572" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"class.std::__1::__compressed_pair.576" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::map.581" = type { %"class.std::__1::__tree.582" }
%"class.std::__1::__tree.582" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.583", %"class.std::__1::__compressed_pair.587" }
%"class.std::__1::__compressed_pair.583" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"class.std::__1::__compressed_pair.587" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::unique_ptr.590" = type { %"class.std::__1::__compressed_pair.591" }
%"class.std::__1::__compressed_pair.591" = type { %"struct.std::__1::__compressed_pair_elem.592" }
%"struct.std::__1::__compressed_pair_elem.592" = type { %"class.blink::FrameOrWorkerScheduler::LifecycleObserverHandle"* }
%"class.blink::FrameOrWorkerScheduler::LifecycleObserverHandle" = type { %"class.base::WeakPtr", %"class.blink::FrameOrWorkerScheduler::Observer"* }
%"class.base::Clock" = type opaque
%"class.blink::Member.603" = type { %"class.blink::MemberBase.604" }
%"class.blink::MemberBase.604" = type { %"class.blink::LoadingBehaviorObserver"* }
%"class.blink::LoadingBehaviorObserver" = type opaque
%"class.mojo::InlinedStructPtr.605" = type { %"class.blink::mojom::blink::DelayCompetingLowPriorityRequestsHints", i32 }
%"class.blink::mojom::blink::DelayCompetingLowPriorityRequestsHints" = type { i32, i32 }
%"class.blink::Member.606" = type { %"class.blink::MemberBase.607" }
%"class.blink::MemberBase.607" = type { %"class.blink::BackForwardCacheLoaderHelper"* }
%"class.blink::BackForwardCacheLoaderHelper" = type opaque
%"class.blink::HeapHashMap.608" = type { %"class.WTF::HashMap.611" }
%"class.WTF::HashMap.611" = type { %"class.WTF::HashTable.612" }
%"class.WTF::HashTable.612" = type <{ %"struct.WTF::KeyValuePair.614"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.614" = type opaque
%"class.blink::HeapHashSet.615" = type { %"class.WTF::HashSet.618" }
%"class.WTF::HashSet.618" = type { %"class.WTF::HashTable.619" }
%"class.WTF::HashTable.619" = type <{ %"class.blink::WeakMember.621"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.621" = type { %"class.blink::MemberBase.622" }
%"class.blink::MemberBase.622" = type { %"class.blink::Resource"* }
%"class.blink::Resource" = type { %"class.blink::MemoryPressureListener", i8, i8, %"class.absl::optional.625", %"class.base::TimeTicks", i64, i64, i64, %"class.WTF::String", i8, i8, i8, i8, i8, i8, i8, i8, %"class.blink::SubresourceIntegrity::ReportInfo", %"class.WTF::Vector.651", %"class.blink::HeapHashCountedSet", %"class.blink::HeapHashCountedSet", %"class.blink::HeapHashCountedSet", %"class.blink::HeapHashSet.748", %"struct.blink::ResourceLoaderOptions", %"class.base::Time", %"class.blink::TaskHandle", %"class.blink::ResourceRequestHead", i64, %"class.blink::Member.766", %"class.blink::ResourceResponse", %class.scoped_refptr.768, %"class.blink::WebScopedVirtualTimePauser", %"class.std::__1::set" }
%"class.blink::MemoryPressureListener" = type { %"class.blink::GarbageCollectedMixin" }
%"class.absl::optional.625" = type { %"class.absl::optional_internal::optional_data.626" }
%"class.absl::optional_internal::optional_data.626" = type { %"class.absl::optional_internal::optional_data_base.627" }
%"class.absl::optional_internal::optional_data_base.627" = type { %"class.absl::optional_internal::optional_data_dtor_base.628" }
%"class.absl::optional_internal::optional_data_dtor_base.628" = type { i8, %union.anon.629 }
%union.anon.629 = type { %"class.blink::ResourceError" }
%"class.blink::ResourceError" = type { i32, i32, %"struct.net::ResolveErrorInfo", %"class.blink::KURL", %"class.WTF::String", i8, i8, [6 x i8], %"class.absl::optional.636", i8, %"class.absl::optional.641", i32 }
%"struct.net::ResolveErrorInfo" = type <{ i32, i8, [3 x i8] }>
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr.630" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.630" = type { %"class.std::__1::__compressed_pair.631" }
%"class.std::__1::__compressed_pair.631" = type { %"struct.std::__1::__compressed_pair_elem.632" }
%"struct.std::__1::__compressed_pair_elem.632" = type { %"class.blink::KURL"* }
%"class.absl::optional.636" = type { %"class.absl::optional_internal::optional_data.637" }
%"class.absl::optional_internal::optional_data.637" = type { %"class.absl::optional_internal::optional_data_base.638" }
%"class.absl::optional_internal::optional_data_base.638" = type { %"class.absl::optional_internal::optional_data_dtor_base.639" }
%"class.absl::optional_internal::optional_data_dtor_base.639" = type { i8, [7 x i8], %union.anon.640 }
%union.anon.640 = type { %"struct.network::CorsErrorStatus" }
%"struct.network::CorsErrorStatus" = type <{ i32, [4 x i8], %"class.std::__1::basic_string", i32, i8, [3 x i8] }>
%"class.absl::optional.641" = type { %"class.absl::optional_internal::optional_data.642" }
%"class.absl::optional_internal::optional_data.642" = type { %"class.absl::optional_internal::optional_data_base.643" }
%"class.absl::optional_internal::optional_data_base.643" = type { %"class.absl::optional_internal::optional_data_dtor_base.644" }
%"class.absl::optional_internal::optional_data_dtor_base.644" = type { i8, %union.anon.645 }
%union.anon.645 = type { i32 }
%"class.blink::SubresourceIntegrity::ReportInfo" = type { %"class.WTF::Vector.646", %"class.WTF::Vector.353" }
%"class.WTF::Vector.646" = type { %"class.WTF::VectorBuffer.647" }
%"class.WTF::VectorBuffer.647" = type { %"class.WTF::VectorBufferBase.648" }
%"class.WTF::VectorBufferBase.648" = type { i32*, i32, i32 }
%"class.WTF::Vector.353" = type { %"class.WTF::VectorBuffer.354" }
%"class.WTF::VectorBuffer.354" = type { %"class.WTF::VectorBufferBase.355" }
%"class.WTF::VectorBufferBase.355" = type { %"class.WTF::String"*, i32, i32 }
%"class.WTF::Vector.651" = type { %"class.WTF::VectorBuffer.652" }
%"class.WTF::VectorBuffer.652" = type { %"class.WTF::VectorBufferBase.653" }
%"class.WTF::VectorBufferBase.653" = type { %"struct.blink::Resource::RedirectPair"*, i32, i32 }
%"struct.blink::Resource::RedirectPair" = type { %"class.blink::ResourceRequestHead", %"class.blink::ResourceResponse" }
%"class.blink::HeapHashCountedSet" = type { %"class.WTF::HashCountedSet" }
%"class.WTF::HashCountedSet" = type { %"class.WTF::HashMap.744" }
%"class.WTF::HashMap.744" = type { %"class.WTF::HashTable.745" }
%"class.WTF::HashTable.745" = type <{ %"struct.WTF::KeyValuePair.747"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.747" = type <{ %"class.blink::WeakMember.1719", i32, [4 x i8] }>
%"class.blink::WeakMember.1719" = type { %"class.blink::MemberBase.1720" }
%"class.blink::MemberBase.1720" = type { %"class.blink::ResourceClient"* }
%"class.blink::ResourceClient" = type <{ %"class.blink::GarbageCollectedMixin", %"class.blink::ThreadState::PrefinalizerRegistration.1721", [7 x i8], %"class.blink::Member.804", i8, [7 x i8] }>
%"class.blink::ThreadState::PrefinalizerRegistration.1721" = type { i8 }
%"class.blink::Member.804" = type { %"class.blink::MemberBase.622" }
%"class.blink::HeapHashSet.748" = type { %"class.WTF::HashSet.751" }
%"class.WTF::HashSet.751" = type { %"class.WTF::HashTable.752" }
%"class.WTF::HashTable.752" = type <{ %"class.blink::WeakMember.754"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.754" = type opaque
%"struct.blink::ResourceLoaderOptions" = type { %"struct.blink::FetchInitiatorInfo", i8, i32, i8, i8, %"class.base::StrongAlias.755", %"class.WTF::String", %"class.WTF::HashSet.756", i8, i8, %class.scoped_refptr.108, %class.scoped_refptr.761, %class.scoped_refptr.763 }
%"struct.blink::FetchInitiatorInfo" = type { %"class.WTF::AtomicString", %"class.WTF::TextPosition", i8, i8, %"class.WTF::String" }
%"class.WTF::TextPosition" = type { %"class.WTF::OrdinalNumber", %"class.WTF::OrdinalNumber" }
%"class.WTF::OrdinalNumber" = type { i32 }
%"class.base::StrongAlias.755" = type { i8 }
%"class.WTF::HashSet.756" = type { %"class.WTF::HashTable.757" }
%"class.WTF::HashTable.757" = type <{ %"struct.std::__1::pair.760"*, i32, i32, i32, [4 x i8] }>
%"struct.std::__1::pair.760" = type <{ %"class.WTF::String", i8, [7 x i8] }>
%class.scoped_refptr.761 = type { %"class.base::RefCountedData.762"* }
%"class.base::RefCountedData.762" = type opaque
%class.scoped_refptr.763 = type { %"class.base::RefCountedData.764"* }
%"class.base::RefCountedData.764" = type opaque
%"class.base::Time" = type { %"class.base::time_internal::TimeBase.707" }
%"class.base::time_internal::TimeBase.707" = type { i64 }
%"class.blink::ResourceRequestHead" = type { %"class.blink::KURL", %"class.base::TimeDelta", %"class.net::SiteForCookies", %class.scoped_refptr.32, %class.scoped_refptr.32, %class.scoped_refptr.32, %"class.WTF::AtomicString", %"class.blink::HTTPHeaderMap", i16, i32, i8, i32, i32, i32, %class.scoped_refptr.659, i32, i32, i32, i32, i32, i32, %"class.WTF::String", %"class.WTF::String", i32, i8, i32, %"class.absl::optional.671", %"class.absl::optional.676", %"class.absl::optional.686", %"struct.blink::CacheControlHeader", i8, i8, i8, i8, %"class.absl::optional.696", %"class.absl::optional.686", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.absl::optional.686", i64, %"class.base::UnguessableToken", i64, i8, i8, i8, i8, i8, i8, %"class.absl::optional.696", %"class.absl::optional.701", i8, %class.scoped_refptr.706 }
%"class.net::SiteForCookies" = type <{ %"class.net::SchemefulSite", i8, [7 x i8] }>
%"class.net::SchemefulSite" = type { %"class.url::Origin" }
%"class.blink::HTTPHeaderMap" = type { %"class.WTF::HashMap.654" }
%"class.WTF::HashMap.654" = type { %"class.WTF::HashTable.655" }
%"class.WTF::HashTable.655" = type <{ %"struct.WTF::KeyValuePair.658"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.658" = type { %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%class.scoped_refptr.659 = type { %"class.blink::WebURLRequestExtraData"* }
%"class.blink::WebURLRequestExtraData" = type { i32 (...)**, %"class.base::RefCounted.660", i8, i32, i8, i8, %"class.blink::WebString", %"class.blink::WebVector", %class.scoped_refptr.669, i8, %"class.url::Origin" }
%"class.base::RefCounted.660" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::WebString" = type { %class.scoped_refptr.30 }
%"class.blink::WebVector" = type { %"class.std::__1::vector.661" }
%"class.std::__1::vector.661" = type { %"class.std::__1::__vector_base.662" }
%"class.std::__1::__vector_base.662" = type { %"class.std::__1::unique_ptr.663"*, %"class.std::__1::unique_ptr.663"*, %"class.std::__1::__compressed_pair.664" }
%"class.std::__1::unique_ptr.663" = type { %"class.std::__1::__compressed_pair.1700" }
%"class.std::__1::__compressed_pair.1700" = type { %"struct.std::__1::__compressed_pair_elem.1701" }
%"struct.std::__1::__compressed_pair_elem.1701" = type { %"class.blink::URLLoaderThrottle"* }
%"class.blink::URLLoaderThrottle" = type { i32 (...)**, %"class.blink::URLLoaderThrottle::Delegate"* }
%"class.blink::URLLoaderThrottle::Delegate" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.664" = type { %"struct.std::__1::__compressed_pair_elem.665" }
%"struct.std::__1::__compressed_pair_elem.665" = type { %"class.std::__1::unique_ptr.663"* }
%class.scoped_refptr.669 = type { %"class.blink::WebFrameRequestBlocker"* }
%"class.blink::WebFrameRequestBlocker" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.670", [4 x i8] }>
%"class.base::RefCountedThreadSafe.670" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.absl::optional.671" = type { %"class.absl::optional_internal::optional_data.672" }
%"class.absl::optional_internal::optional_data.672" = type { %"class.absl::optional_internal::optional_data_base.673" }
%"class.absl::optional_internal::optional_data_base.673" = type { %"class.absl::optional_internal::optional_data_dtor_base.674" }
%"class.absl::optional_internal::optional_data_dtor_base.674" = type { i8, %union.anon.675 }
%union.anon.675 = type { %"struct.blink::ResourceRequestHead::RedirectInfo" }
%"struct.blink::ResourceRequestHead::RedirectInfo" = type { %"class.blink::KURL", %"class.blink::KURL" }
%"class.absl::optional.676" = type { %"class.absl::optional_internal::optional_data.677" }
%"class.absl::optional_internal::optional_data.677" = type { %"class.absl::optional_internal::optional_data_base.678" }
%"class.absl::optional_internal::optional_data_base.678" = type { %"class.absl::optional_internal::optional_data_dtor_base.679" }
%"class.absl::optional_internal::optional_data_dtor_base.679" = type { i8, %union.anon.680 }
%union.anon.680 = type { %"class.network::mojom::blink::TrustTokenParams" }
%"class.network::mojom::blink::TrustTokenParams" = type { i32, i32, i32, i8, %"class.WTF::Vector.681", %"class.WTF::Vector.353", %"class.WTF::String" }
%"class.WTF::Vector.681" = type { %"class.WTF::VectorBuffer.682" }
%"class.WTF::VectorBuffer.682" = type { %"class.WTF::VectorBufferBase.683" }
%"class.WTF::VectorBufferBase.683" = type { %class.scoped_refptr.32*, i32, i32 }
%"struct.blink::CacheControlHeader" = type { i8, %"class.absl::optional.691", %"class.absl::optional.691" }
%"class.absl::optional.691" = type { %"class.absl::optional_internal::optional_data.692" }
%"class.absl::optional_internal::optional_data.692" = type { %"class.absl::optional_internal::optional_data_base.693" }
%"class.absl::optional_internal::optional_data_base.693" = type { %"class.absl::optional_internal::optional_data_dtor_base.694" }
%"class.absl::optional_internal::optional_data_dtor_base.694" = type { i8, %union.anon.695 }
%union.anon.695 = type { %"class.base::TimeDelta" }
%"class.absl::optional.686" = type { %"class.absl::optional_internal::optional_data.687" }
%"class.absl::optional_internal::optional_data.687" = type { %"class.absl::optional_internal::optional_data_base.688" }
%"class.absl::optional_internal::optional_data_base.688" = type { %"class.absl::optional_internal::optional_data_dtor_base.689" }
%"class.absl::optional_internal::optional_data_dtor_base.689" = type { i8, %union.anon.690 }
%union.anon.690 = type { %"class.WTF::String" }
%"class.absl::optional.696" = type { %"class.absl::optional_internal::optional_data.697" }
%"class.absl::optional_internal::optional_data.697" = type { %"class.absl::optional_internal::optional_data_base.698" }
%"class.absl::optional_internal::optional_data_base.698" = type { %"class.absl::optional_internal::optional_data_dtor_base.699" }
%"class.absl::optional_internal::optional_data_dtor_base.699" = type { i8, %union.anon.700 }
%union.anon.700 = type { %"class.base::UnguessableToken" }
%"class.absl::optional.701" = type { %"class.absl::optional_internal::optional_data.702" }
%"class.absl::optional_internal::optional_data.702" = type { %"class.absl::optional_internal::optional_data_base.703" }
%"class.absl::optional_internal::optional_data_base.703" = type { %"class.absl::optional_internal::optional_data_dtor_base.704" }
%"class.absl::optional_internal::optional_data_dtor_base.704" = type { i8, %union.anon.705 }
%union.anon.705 = type { %"struct.blink::ResourceRequestHead::WebBundleTokenParams" }
%"struct.blink::ResourceRequestHead::WebBundleTokenParams" = type { %"class.blink::KURL", %"class.base::UnguessableToken", %"class.mojo::PendingRemote" }
%"class.mojo::PendingRemote" = type { %"struct.mojo::internal::PendingRemoteState" }
%"struct.mojo::internal::PendingRemoteState" = type { %"class.mojo::ScopedHandleBase", i32 }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessagePipeHandle" }
%"class.mojo::MessagePipeHandle" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%class.scoped_refptr.706 = type { %"class.base::RefCountedData"* }
%"class.base::RefCountedData" = type { %"class.base::RefCountedThreadSafe.1705", %"class.base::internal::flat_tree.1706" }
%"class.base::RefCountedThreadSafe.1705" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::internal::flat_tree.1706" = type { %"class.std::__1::vector.1707" }
%"class.std::__1::vector.1707" = type { %"class.std::__1::__vector_base.1708" }
%"class.std::__1::__vector_base.1708" = type { i32*, i32*, %"class.std::__1::__compressed_pair.1709" }
%"class.std::__1::__compressed_pair.1709" = type { %"struct.std::__1::__compressed_pair_elem.1710" }
%"struct.std::__1::__compressed_pair_elem.1710" = type { i32* }
%"class.blink::Member.766" = type { %"class.blink::MemberBase.767" }
%"class.blink::MemberBase.767" = type { %"class.blink::ResourceLoader"* }
%"class.blink::ResourceLoader" = type opaque
%"class.blink::ResourceResponse" = type { %"class.blink::KURL", %"class.WTF::AtomicString", i64, %"class.WTF::AtomicString", i32, i32, %"class.WTF::AtomicString", %"class.blink::HTTPHeaderMap", %"class.net::IPEndPoint", i32, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, %"class.base::Time", i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i64, i8, i32, i32, %"class.absl::optional.708", %class.scoped_refptr.723, %class.scoped_refptr.724, %"struct.blink::CacheControlHeader", %"class.absl::optional.691", %"class.absl::optional.725", %"class.absl::optional.725", %"class.absl::optional.725", i64, %"class.blink::KURL", %"class.WTF::Vector.730", %"class.WTF::String", %"class.WTF::Vector.353", %"class.base::Time", %"class.WTF::AtomicString", i32, i8, i64, i64, i64, %"class.absl::optional.696", %"class.WTF::Vector.353", %"class.blink::KURL", %"class.absl::optional.735" }
%"class.net::IPEndPoint" = type { %"class.net::IPAddress", i16 }
%"class.net::IPAddress" = type { %"class.net::IPAddressBytes" }
%"class.net::IPAddressBytes" = type { %"struct.std::__1::array", i8 }
%"struct.std::__1::array" = type { [16 x i8] }
%"class.absl::optional.708" = type { %"class.absl::optional_internal::optional_data.709" }
%"class.absl::optional_internal::optional_data.709" = type { %"class.absl::optional_internal::optional_data_base.710" }
%"class.absl::optional_internal::optional_data_base.710" = type { %"class.absl::optional_internal::optional_data_dtor_base.711" }
%"class.absl::optional_internal::optional_data_dtor_base.711" = type { i8, %union.anon.712 }
%union.anon.712 = type { %"struct.blink::ResourceResponse::SecurityDetails" }
%"struct.blink::ResourceResponse::SecurityDetails" = type { %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::Vector.353", %"class.WTF::String", i64, i64, %"class.WTF::Vector.713", %"class.WTF::Vector.718" }
%"class.WTF::Vector.713" = type { %"class.WTF::VectorBuffer.714" }
%"class.WTF::VectorBuffer.714" = type { %"class.WTF::VectorBufferBase.715" }
%"class.WTF::VectorBufferBase.715" = type { %"class.WTF::AtomicString"*, i32, i32 }
%"class.WTF::Vector.718" = type { %"class.WTF::VectorBuffer.719" }
%"class.WTF::VectorBuffer.719" = type { %"class.WTF::VectorBufferBase.720" }
%"class.WTF::VectorBufferBase.720" = type { %"class.blink::ResourceResponse::SignedCertificateTimestamp"*, i32, i32 }
%"class.blink::ResourceResponse::SignedCertificateTimestamp" = type { %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i64, %"class.WTF::String", %"class.WTF::String", %"class.WTF::String" }
%class.scoped_refptr.723 = type { %"class.blink::ResourceLoadTiming"* }
%"class.blink::ResourceLoadTiming" = type opaque
%class.scoped_refptr.724 = type { %"struct.blink::ResourceLoadInfo"* }
%"struct.blink::ResourceLoadInfo" = type opaque
%"class.absl::optional.725" = type { %"class.absl::optional_internal::optional_data.726" }
%"class.absl::optional_internal::optional_data.726" = type { %"class.absl::optional_internal::optional_data_base.727" }
%"class.absl::optional_internal::optional_data_base.727" = type { %"class.absl::optional_internal::optional_data_dtor_base.728" }
%"class.absl::optional_internal::optional_data_dtor_base.728" = type { i8, %union.anon.729 }
%union.anon.729 = type { %"class.base::Time" }
%"class.WTF::Vector.730" = type { %"class.WTF::VectorBuffer.731" }
%"class.WTF::VectorBuffer.731" = type { %"class.WTF::VectorBufferBase.732" }
%"class.WTF::VectorBufferBase.732" = type { %"class.blink::KURL"*, i32, i32 }
%"class.absl::optional.735" = type { %"class.absl::optional_internal::optional_data.736" }
%"class.absl::optional_internal::optional_data.736" = type { %"class.absl::optional_internal::optional_data_base.737" }
%"class.absl::optional_internal::optional_data_base.737" = type { %"class.absl::optional_internal::optional_data_dtor_base.738" }
%"class.absl::optional_internal::optional_data_dtor_base.738" = type { i8, %union.anon.739 }
%union.anon.739 = type { %"class.net::AuthChallengeInfo" }
%"class.net::AuthChallengeInfo" = type { i8, %"class.url::Origin", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%class.scoped_refptr.768 = type { %"class.WTF::SharedBuffer"* }
%"class.WTF::SharedBuffer" = type { %"class.WTF::RefCounted.769", i64, %"class.WTF::Vector.771", %"class.WTF::Vector.776" }
%"class.WTF::RefCounted.769" = type { %"class.base::RefCounted.770" }
%"class.base::RefCounted.770" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.771" = type { %"class.WTF::VectorBuffer.772" }
%"class.WTF::VectorBuffer.772" = type { %"class.WTF::VectorBufferBase.773" }
%"class.WTF::VectorBufferBase.773" = type { i8*, i32, i32 }
%"class.WTF::Vector.776" = type { %"class.WTF::VectorBuffer.777" }
%"class.WTF::VectorBuffer.777" = type { %"class.WTF::VectorBufferBase.778" }
%"class.WTF::VectorBufferBase.778" = type { %"class.std::__1::unique_ptr.779"*, i32, i32 }
%"class.std::__1::unique_ptr.779" = type opaque
%"class.blink::WebScopedVirtualTimePauser" = type { %"class.base::TimeTicks", i8, i8, i32, %"class.blink::scheduler::MainThreadSchedulerImpl"*, %"class.blink::WebString", i64 }
%"class.blink::scheduler::MainThreadSchedulerImpl" = type opaque
%"class.std::__1::set" = type { %"class.std::__1::__tree.782" }
%"class.std::__1::__tree.782" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.783", %"class.std::__1::__compressed_pair.787" }
%"class.std::__1::__compressed_pair.783" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"class.std::__1::__compressed_pair.787" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.blink::HeapHashMap.791" = type { %"class.WTF::HashMap.794" }
%"class.WTF::HashMap.794" = type { %"class.WTF::HashTable.795" }
%"class.WTF::HashTable.795" = type <{ %"struct.WTF::KeyValuePair.797"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.797" = type opaque
%"class.blink::HeapVector.798" = type { %"class.WTF::Vector.801" }
%"class.WTF::Vector.801" = type { %"class.WTF::VectorBuffer.802" }
%"class.WTF::VectorBuffer.802" = type { %"class.WTF::VectorBufferBase.803" }
%"class.WTF::VectorBufferBase.803" = type { %"class.blink::Member.804"*, i32, i32 }
%"class.blink::Member.806" = type { %"class.blink::MemberBase.807" }
%"class.blink::MemberBase.807" = type { %"class.blink::MHTMLArchive"* }
%"class.blink::MHTMLArchive" = type opaque
%"class.blink::HeapTaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.443", { i64, i64 } }
%"class.blink::TimerBase" = type { i32 (...)**, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::Location", %class.scoped_refptr.530, %"class.base::WeakPtrFactory" }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.blink::WeakMember.443" = type { %"class.blink::MemberBase.436" }
%"class.blink::HeapHashMap.809" = type { %"class.WTF::HashMap.812" }
%"class.WTF::HashMap.812" = type { %"class.WTF::HashTable.813" }
%"class.WTF::HashTable.813" = type <{ %"struct.WTF::KeyValuePair.815"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.815" = type opaque
%"class.WTF::Vector.816" = type { %"class.WTF::VectorBuffer.817" }
%"class.WTF::VectorBuffer.817" = type { %"class.WTF::VectorBufferBase.818" }
%"class.WTF::VectorBufferBase.818" = type { %class.scoped_refptr.819*, i32, i32 }
%class.scoped_refptr.819 = type { %"class.blink::ResourceTimingInfo"* }
%"class.blink::ResourceTimingInfo" = type opaque
%"class.blink::HeapHashSet.822" = type { %"class.WTF::HashSet.825" }
%"class.WTF::HashSet.825" = type { %"class.WTF::HashTable.826" }
%"class.WTF::HashTable.826" = type <{ %"class.blink::Member.766"*, i32, i32, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.828" = type { %"class.std::__1::__compressed_pair.829" }
%"class.std::__1::__compressed_pair.829" = type { %"struct.std::__1::__compressed_pair_elem.830" }
%"struct.std::__1::__compressed_pair_elem.830" = type { %"class.WTF::HashSet.831"* }
%"class.WTF::HashSet.831" = type opaque
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.593 }
%class.scoped_refptr.593 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.blink::HeapMojoRemote" = type { %"class.blink::Member.835" }
%"class.blink::Member.835" = type { %"class.blink::MemberBase.836" }
%"class.blink::MemberBase.836" = type { %"class.blink::HeapMojoRemote<blink::mojom::blink::BlobRegistry, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoRemote<blink::mojom::blink::BlobRegistry, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type opaque
%"class.blink::Member.837" = type { %"class.blink::MemberBase.838" }
%"class.blink::MemberBase.838" = type { %"class.blink::SubresourceWebBundleList"* }
%"class.blink::SubresourceWebBundleList" = type opaque
%"class.base::WeakPtrFactory.839" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.blink::HeapHashSet.437" = type { %"class.WTF::HashSet.440" }
%"class.WTF::HashSet.440" = type { %"class.WTF::HashTable.441" }
%"class.WTF::HashTable.441" = type <{ %"class.blink::WeakMember.443"*, i32, i32, i32, [4 x i8] }>
%class.scoped_refptr.444 = type { %"class.blink::WebWorkerFetchContext"* }
%"class.blink::WebWorkerFetchContext" = type <{ i32 (...)**, %"class.base::RefCounted.445", [4 x i8] }>
%"class.base::RefCounted.445" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Member.446" = type { %"class.blink::MemberBase.447" }
%"class.blink::MemberBase.447" = type { %"class.blink::SubresourceFilter"* }
%"class.blink::SubresourceFilter" = type opaque
%"class.blink::Member.448" = type { %"class.blink::MemberBase.449" }
%"class.blink::MemberBase.449" = type { %"class.blink::WorkerOrWorkletScriptController"* }
%"class.blink::WorkerOrWorkletScriptController" = type { i32 (...)**, %"class.blink::Member.452", %"class.v8::Isolate"*, %"class.blink::Member.454", %class.scoped_refptr.305, %"class.WTF::String", i8, i8, %class.scoped_refptr.505 }
%"class.blink::Member.452" = type { %"class.blink::MemberBase.453" }
%"class.blink::MemberBase.453" = type { %"class.blink::WorkerOrWorkletGlobalScope"* }
%"class.blink::Member.454" = type { %"class.blink::MemberBase.455" }
%"class.blink::MemberBase.455" = type { %"class.blink::ScriptState"* }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.305, %"class.blink::Member.458", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%"class.v8::Context" = type { i8 }
%"class.blink::Member.458" = type { %"class.blink::MemberBase.459" }
%"class.blink::MemberBase.459" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type { %"class.v8::Isolate"*, %"class.blink::HeapHashMap.462", %"class.blink::HeapHashMap.471", %"class.std::__1::unique_ptr.481", %"class.blink::ScopedPersistent", %"class.blink::ScopedPersistent.493", %"class.blink::V8DOMActivityLogger"*, %"class.blink::HeapHashMap.496" }
%"class.blink::HeapHashMap.462" = type { %"class.WTF::HashMap.465" }
%"class.WTF::HashMap.465" = type { %"class.WTF::HashTable.466" }
%"class.WTF::HashTable.466" = type <{ %"struct.WTF::KeyValuePair.468"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.468" = type { %"struct.blink::WrapperTypeInfo"*, %"class.blink::TraceWrapperV8Reference" }
%"struct.blink::WrapperTypeInfo" = type { i16, void (%"class.v8::Isolate"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Template"*)*, void (%"class.v8::Context"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Template"*, i64)*, i8*, %"struct.blink::WrapperTypeInfo"*, i8 }
%"class.v8::Template" = type { i8 }
%"class.v8::Object" = type { i8 }
%"class.blink::HeapHashMap.471" = type { %"class.WTF::HashMap.474" }
%"class.WTF::HashMap.474" = type { %"class.WTF::HashTable.475" }
%"class.WTF::HashTable.475" = type <{ %"struct.WTF::KeyValuePair.477"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.477" = type { %"struct.blink::WrapperTypeInfo"*, %"class.blink::TraceWrapperV8Reference.478" }
%"class.blink::TraceWrapperV8Reference.478" = type { %"class.v8::TracedReference.479" }
%"class.v8::TracedReference.479" = type { %"class.v8::BasicTracedReference.480" }
%"class.v8::BasicTracedReference.480" = type { %"class.v8::TracedReferenceBase" }
%"class.std::__1::unique_ptr.481" = type { %"class.std::__1::__compressed_pair.482" }
%"class.std::__1::__compressed_pair.482" = type { %"struct.std::__1::__compressed_pair_elem.483" }
%"struct.std::__1::__compressed_pair_elem.483" = type { %"class.gin::ContextHolder"* }
%"class.gin::ContextHolder" = type { %"class.v8::Isolate"*, %"class.v8::Global", %"class.std::__1::unique_ptr.484" }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.std::__1::unique_ptr.484" = type { %"class.std::__1::__compressed_pair.485" }
%"class.std::__1::__compressed_pair.485" = type { %"struct.std::__1::__compressed_pair_elem.486" }
%"struct.std::__1::__compressed_pair_elem.486" = type { %"class.gin::PerContextData"* }
%"class.gin::PerContextData" = type opaque
%"class.blink::ScopedPersistent.493" = type { %"class.v8::Persistent.494" }
%"class.v8::Persistent.494" = type { %"class.v8::PersistentBase.495" }
%"class.v8::PersistentBase.495" = type { %"class.v8::Private"* }
%"class.v8::Private" = type { i8 }
%"class.blink::V8DOMActivityLogger" = type opaque
%"class.blink::HeapHashMap.496" = type { %"class.WTF::HashMap.499" }
%"class.WTF::HashMap.499" = type { %"class.WTF::HashTable.500" }
%"class.WTF::HashTable.500" = type <{ %"struct.WTF::KeyValuePair.502"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.502" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent.503" }
%"class.blink::Persistent.503" = type { %"class.blink::PersistentBase.504" }
%"class.blink::PersistentBase.504" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%class.scoped_refptr.505 = type { %"class.blink::RejectedPromises"* }
%"class.blink::RejectedPromises" = type { %"class.WTF::RefCounted.506", %"class.WTF::Vector.508", %"class.WTF::Vector.508" }
%"class.WTF::RefCounted.506" = type { %"class.base::RefCounted.507" }
%"class.base::RefCounted.507" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.508" = type { %"class.WTF::VectorBuffer.509" }
%"class.WTF::VectorBuffer.509" = type { %"class.WTF::VectorBufferBase.510" }
%"class.WTF::VectorBufferBase.510" = type { %"class.std::__1::unique_ptr.511"*, i32, i32 }
%"class.std::__1::unique_ptr.511" = type opaque
%"class.WTF::Vector.330" = type { %"class.WTF::VectorBuffer.331" }
%"class.WTF::VectorBuffer.331" = type { %"class.WTF::VectorBufferBase.332" }
%"class.WTF::VectorBufferBase.332" = type { %"class.mojo::StructPtr"*, i32, i32 }
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr.333" }
%"class.std::__1::unique_ptr.333" = type { %"class.std::__1::__compressed_pair.334" }
%"class.std::__1::__compressed_pair.334" = type { %"struct.std::__1::__compressed_pair_elem.335" }
%"struct.std::__1::__compressed_pair_elem.335" = type { %"class.network::mojom::blink::ContentSecurityPolicy"* }
%"class.network::mojom::blink::ContentSecurityPolicy" = type { %"class.mojo::StructPtr.336", %"class.WTF::HashMap.343", %"class.WTF::HashMap.348", i8, i8, i8, i32, %"class.mojo::InlinedStructPtr", i8, %"class.WTF::Vector.353", i32, %"class.mojo::StructPtr.358", %"class.WTF::Vector.353" }
%"class.mojo::StructPtr.336" = type { %"class.std::__1::unique_ptr.337" }
%"class.std::__1::unique_ptr.337" = type { %"class.std::__1::__compressed_pair.338" }
%"class.std::__1::__compressed_pair.338" = type { %"struct.std::__1::__compressed_pair_elem.339" }
%"struct.std::__1::__compressed_pair_elem.339" = type { %"class.network::mojom::blink::CSPSource"* }
%"class.network::mojom::blink::CSPSource" = type <{ %"class.WTF::String", %"class.WTF::String", i32, [4 x i8], %"class.WTF::String", i8, i8, [6 x i8] }>
%"class.WTF::HashMap.343" = type { %"class.WTF::HashTable.344" }
%"class.WTF::HashTable.344" = type <{ %"struct.WTF::KeyValuePair.347"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.347" = type opaque
%"class.WTF::HashMap.348" = type { %"class.WTF::HashTable.349" }
%"class.WTF::HashTable.349" = type <{ %"struct.WTF::KeyValuePair.352"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.352" = type opaque
%"class.mojo::InlinedStructPtr" = type <{ %"class.network::mojom::blink::ContentSecurityPolicyHeader", i32, [4 x i8] }>
%"class.network::mojom::blink::ContentSecurityPolicyHeader" = type { %"class.WTF::String", i32, i32 }
%"class.mojo::StructPtr.358" = type { %"class.std::__1::unique_ptr.359" }
%"class.std::__1::unique_ptr.359" = type { %"class.std::__1::__compressed_pair.360" }
%"class.std::__1::__compressed_pair.360" = type { %"struct.std::__1::__compressed_pair_elem.361" }
%"struct.std::__1::__compressed_pair_elem.361" = type { %"class.network::mojom::blink::CSPTrustedTypes"* }
%"class.network::mojom::blink::CSPTrustedTypes" = type <{ %"class.WTF::Vector.353", i8, i8, [6 x i8] }>
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { [62 x i64] }
%"class.blink::Deprecation" = type <{ %"class.std::__1::bitset", %"class.std::__1::bitset.514", i32, [4 x i8] }>
%"class.std::__1::bitset.514" = type { %"class.std::__1::__bitset.515" }
%"class.std::__1::__bitset.515" = type { [25 x i64] }
%"class.blink::Member.516" = type { %"class.blink::MemberBase.517" }
%"class.blink::MemberBase.517" = type { %"class.blink::Modulator"* }
%"class.blink::Modulator" = type { %"class.blink::V8PerContextData::Data", %"class.blink::NameClient" }
%"class.blink::V8PerContextData::Data" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::CrossThreadPersistent.1101" = type { %"class.blink::PersistentBase.1102" }
%"class.blink::PersistentBase.1102" = type { %"class.blink::WorkerInspectorController"*, %"class.blink::CrossThreadPersistentNodePtr" }
%"class.blink::WorkerInspectorController" = type { %"class.base::trace_event::TraceLog::EnabledStateObserver", %"class.blink::DevToolsAgent::Client", %"class.base::TaskObserver", %"class.blink::Member.1105", %"class.blink::WorkerThreadDebugger"*, %"class.blink::WorkerThread"*, %"class.blink::Member.1116", %"class.blink::Member.1118", i32, i8, %"class.base::UnguessableToken", %"class.base::UnguessableToken", %"class.blink::KURL", i64 }
%"class.base::trace_event::TraceLog::EnabledStateObserver" = type { i32 (...)** }
%"class.blink::DevToolsAgent::Client" = type { i32 (...)** }
%"class.blink::Member.1105" = type { %"class.blink::MemberBase.1106" }
%"class.blink::MemberBase.1106" = type { %"class.blink::DevToolsAgent"* }
%"class.blink::DevToolsAgent" = type <{ %"class.blink::mojom::blink::DevToolsAgent", %"class.blink::DevToolsAgent::Client"*, %"class.blink::HeapMojoAssociatedReceiver", %"class.blink::HeapMojoRemote.1111", %"class.blink::HeapMojoAssociatedRemote", %"class.blink::Member.1116", %"class.blink::Member.1118", %"class.blink::HeapHashSet.1120", %class.scoped_refptr.840, %class.scoped_refptr.530, %"class.WTF::HashMap.1127", %"class.blink::DevToolsAgent::IOAgent"*, i8, i8, [6 x i8] }>
%"class.blink::mojom::blink::DevToolsAgent" = type { i32 (...)** }
%"class.blink::HeapMojoAssociatedReceiver" = type { %"class.blink::Member.1109" }
%"class.blink::Member.1109" = type { %"class.blink::MemberBase.1110" }
%"class.blink::MemberBase.1110" = type { %"class.blink::HeapMojoAssociatedReceiver<blink::mojom::blink::DevToolsAgent, blink::DevToolsAgent, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoAssociatedReceiver<blink::mojom::blink::DevToolsAgent, blink::DevToolsAgent, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type { %"class.blink::ContextLifecycleObserver", %"class.blink::ThreadState::PrefinalizerRegistration.1686", %"class.blink::Member.1105", %"class.mojo::AssociatedReceiver" }
%"class.blink::ContextLifecycleObserver" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::WeakMember.1684" }
%"class.blink::WeakMember.1684" = type { %"class.blink::MemberBase.1685" }
%"class.blink::MemberBase.1685" = type { %"class.blink::ContextLifecycleNotifier"* }
%"class.blink::ThreadState::PrefinalizerRegistration.1686" = type { i8 }
%"class.mojo::AssociatedReceiver" = type { %"class.mojo::internal::AssociatedReceiverBase", %"class.blink::mojom::blink::DevToolsAgentStub", %"class.base::WeakPtrFactory.1687" }
%"class.mojo::internal::AssociatedReceiverBase" = type { %"class.std::__1::unique_ptr.1317" }
%"class.std::__1::unique_ptr.1317" = type { %"class.std::__1::__compressed_pair.1318" }
%"class.std::__1::__compressed_pair.1318" = type { %"struct.std::__1::__compressed_pair_elem.1319" }
%"struct.std::__1::__compressed_pair_elem.1319" = type { %"class.mojo::InterfaceEndpointClient"* }
%"class.mojo::InterfaceEndpointClient" = type { %"class.mojo::MessageReceiverWithResponder", i8, %"class.base::RepeatingCallback.1320", %"class.base::OnceCallback.1321", %"class.absl::optional.691", %"class.absl::optional.1322", %"class.mojo::ConnectionGroup::Ref", i32, %"class.mojo::ScopedInterfaceEndpointHandle", %"class.std::__1::unique_ptr.1329", %"class.mojo::InterfaceEndpointController"*, %"class.mojo::MessageReceiverWithResponderStatus"*, %"class.mojo::InterfaceEndpointClient::HandleIncomingMessageThunk", %"class.mojo::MessageDispatcher", %"class.std::__1::map.1337", %"class.std::__1::map.1348", i64, %"class.base::OnceCallback", %"class.base::OnceCallback.1357", i8, %class.scoped_refptr.1207, %"class.mojo::internal::ControlMessageProxy", %"class.mojo::internal::ControlMessageHandler", i8*, %"class.base::WeakPtrFactory.1358" }
%"class.mojo::MessageReceiverWithResponder" = type { %"class.mojo::MessageReceiver" }
%"class.mojo::MessageReceiver" = type { i32 (...)** }
%"class.base::RepeatingCallback.1320" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::OnceCallback.1321" = type { %"class.base::internal::CallbackBase" }
%"class.absl::optional.1322" = type { %"class.absl::optional_internal::optional_data.1323" }
%"class.absl::optional_internal::optional_data.1323" = type { %"class.absl::optional_internal::optional_data_base.1324" }
%"class.absl::optional_internal::optional_data_base.1324" = type { %"class.absl::optional_internal::optional_data_dtor_base.1325" }
%"class.absl::optional_internal::optional_data_dtor_base.1325" = type { i8, %union.anon.1326 }
%union.anon.1326 = type { %"class.base::OneShotTimer" }
%"class.base::OneShotTimer" = type { %"class.base::internal::TimerBase", %"class.base::OnceCallback" }
%"class.base::internal::TimerBase" = type { i32 (...)**, %class.scoped_refptr.1207, %"class.base::SequenceCheckerDoNothing", %"class.base::internal::TaskDestructionDetector"*, %"class.base::Location", %"class.base::TimeDelta", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TickClock"*, i8, %"class.base::WeakPtrFactory.1327" }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.base::internal::TaskDestructionDetector" = type opaque
%"class.base::TickClock" = type opaque
%"class.base::WeakPtrFactory.1327" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.mojo::ConnectionGroup::Ref" = type { i32, %class.scoped_refptr.1280 }
%class.scoped_refptr.1280 = type { %"class.mojo::ConnectionGroup"* }
%"class.mojo::ConnectionGroup" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.1668", [4 x i8], %"class.base::RepeatingCallback.1320", %class.scoped_refptr.1207, %"class.mojo::ConnectionGroup::Ref", %"struct.std::__1::atomic", [4 x i8] }>
%"class.base::RefCountedThreadSafe.1668" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.mojo::ScopedInterfaceEndpointHandle" = type { %class.scoped_refptr.1328 }
%class.scoped_refptr.1328 = type { %"class.mojo::ScopedInterfaceEndpointHandle::State"* }
%"class.mojo::ScopedInterfaceEndpointHandle::State" = type opaque
%"class.std::__1::unique_ptr.1329" = type { %"class.std::__1::__compressed_pair.1330" }
%"class.std::__1::__compressed_pair.1330" = type { %"struct.std::__1::__compressed_pair_elem.1331" }
%"struct.std::__1::__compressed_pair_elem.1331" = type { %"class.mojo::AssociatedGroup"* }
%"class.mojo::AssociatedGroup" = type { %"class.base::RepeatingCallback.1332", %class.scoped_refptr.1333 }
%"class.base::RepeatingCallback.1332" = type { %"class.base::internal::CallbackBaseCopyable" }
%class.scoped_refptr.1333 = type { %"class.mojo::AssociatedGroupController"* }
%"class.mojo::AssociatedGroupController" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.1206", [4 x i8] }>
%"class.base::RefCountedThreadSafe.1206" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.mojo::InterfaceEndpointController" = type opaque
%"class.mojo::MessageReceiverWithResponderStatus" = type { %"class.mojo::MessageReceiver" }
%"class.mojo::InterfaceEndpointClient::HandleIncomingMessageThunk" = type { %"class.mojo::MessageReceiver", %"class.mojo::InterfaceEndpointClient"* }
%"class.mojo::MessageDispatcher" = type { %"class.mojo::MessageReceiver", %"class.std::__1::unique_ptr.1208", %"class.std::__1::unique_ptr.1214", %"class.mojo::MessageReceiver"*, %"class.base::WeakPtrFactory.1220" }
%"class.std::__1::unique_ptr.1208" = type { %"class.std::__1::__compressed_pair.1209" }
%"class.std::__1::__compressed_pair.1209" = type { %"struct.std::__1::__compressed_pair_elem.1210" }
%"struct.std::__1::__compressed_pair_elem.1210" = type { %"class.mojo::MessageReceiver"* }
%"class.std::__1::unique_ptr.1214" = type { %"class.std::__1::__compressed_pair.1215" }
%"class.std::__1::__compressed_pair.1215" = type { %"struct.std::__1::__compressed_pair_elem.1216" }
%"struct.std::__1::__compressed_pair_elem.1216" = type { %"class.mojo::MessageFilter"* }
%"class.mojo::MessageFilter" = type { i32 (...)** }
%"class.base::WeakPtrFactory.1220" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.std::__1::map.1337" = type { %"class.std::__1::__tree.1338" }
%"class.std::__1::__tree.1338" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1339", %"class.std::__1::__compressed_pair.1343" }
%"class.std::__1::__compressed_pair.1339" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"class.std::__1::__compressed_pair.1343" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::map.1348" = type { %"class.std::__1::__tree.1349" }
%"class.std::__1::__tree.1349" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1350", %"class.std::__1::__compressed_pair.1354" }
%"class.std::__1::__compressed_pair.1350" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"class.std::__1::__compressed_pair.1354" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.base::OnceCallback.1357" = type { %"class.base::internal::CallbackBase" }
%class.scoped_refptr.1207 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.mojo::internal::ControlMessageProxy" = type { %"class.mojo::InterfaceEndpointClient"*, i8, %"class.base::OnceCallback" }
%"class.mojo::internal::ControlMessageHandler" = type <{ %"class.mojo::MessageReceiverWithResponderStatus", %"class.mojo::InterfaceEndpointClient"*, i32, [4 x i8] }>
%"class.base::WeakPtrFactory.1358" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.blink::mojom::blink::DevToolsAgentStub" = type { %"class.mojo::MessageReceiverWithResponderStatus", %"class.blink::mojom::blink::DevToolsAgent"* }
%"class.base::WeakPtrFactory.1687" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.blink::HeapMojoRemote.1111" = type { %"class.blink::Member.1112" }
%"class.blink::Member.1112" = type { %"class.blink::MemberBase.1113" }
%"class.blink::MemberBase.1113" = type { %"class.blink::HeapMojoRemote<blink::mojom::blink::DevToolsAgentHost, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoRemote<blink::mojom::blink::DevToolsAgentHost, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type { %"class.blink::ContextLifecycleObserver", %"class.mojo::Remote.1690" }
%"class.mojo::Remote.1690" = type { %"class.mojo::internal::InterfacePtrState.1691" }
%"class.mojo::internal::InterfacePtrState.1691" = type { %"class.mojo::internal::InterfacePtrStateBase.base", %"class.std::__1::unique_ptr.1692" }
%"class.mojo::internal::InterfacePtrStateBase.base" = type <{ %class.scoped_refptr.1205, %"class.std::__1::unique_ptr.1317", %"class.mojo::ScopedHandleBase", [4 x i8], %class.scoped_refptr.1207, i32 }>
%class.scoped_refptr.1205 = type { %"class.mojo::internal::MultiplexRouter"* }
%"class.mojo::internal::MultiplexRouter" = type <{ %"class.mojo::MessageReceiver", %"class.mojo::AssociatedGroupController.base", [4 x i8], %"class.mojo::PipeControlMessageHandlerDelegate", i32, i8, [3 x i8], %class.scoped_refptr.1207, %"class.mojo::MessageHeaderValidator"*, %"class.mojo::MessageDispatcher", %"class.mojo::Connector", %"class.mojo::ScopedHandleBase", [4 x i8], %"class.absl::optional.1283", %"class.absl::optional.1288", %"class.absl::optional.1240", %"class.mojo::PipeControlMessageHandler", %"class.mojo::PipeControlMessageProxy", %"class.base::small_map", i32, [4 x i8], %"class.base::circular_deque", %"class.std::__1::map.1308", i8, [7 x i8], %class.scoped_refptr.1207, i8, i8, i8, i8, i8, [3 x i8] }>
%"class.mojo::AssociatedGroupController.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.1206" }>
%"class.mojo::PipeControlMessageHandlerDelegate" = type { i32 (...)** }
%"class.mojo::MessageHeaderValidator" = type { %"class.mojo::MessageReceiver", %"class.std::__1::basic_string" }
%"class.mojo::Connector" = type { %"class.mojo::MessageReceiver", %"class.base::OnceCallback", %"class.mojo::ScopedHandleBase", %"class.mojo::MessageReceiver"*, %class.scoped_refptr.1207, %"class.std::__1::unique_ptr.1221", %"class.absl::optional.1230", %"struct.std::__1::atomic.301", i8, i8, i8, i8, i32, i32, %"class.absl::optional.1240", %"class.std::__1::unique_ptr.1245", i8, i64, %class.scoped_refptr.1279, %"class.base::Lock", i8, i8*, %"class.mojo::Connector::RunLoopNestingObserver"*, i8, i64, %"class.mojo::ConnectionGroup::Ref", %"class.base::WeakPtr.1281", %"class.base::WeakPtrFactory.1282" }
%"class.std::__1::unique_ptr.1221" = type { %"class.std::__1::__compressed_pair.1222" }
%"class.std::__1::__compressed_pair.1222" = type { %"struct.std::__1::__compressed_pair_elem.1223" }
%"struct.std::__1::__compressed_pair_elem.1223" = type { %"class.mojo::SimpleWatcher"* }
%"class.mojo::SimpleWatcher" = type { i32, %class.scoped_refptr.1207, i8, %"class.mojo::ScopedHandleBase.1224", %class.scoped_refptr.1225, %"class.mojo::Handle", i32, %"class.base::RepeatingCallback", i8*, %"class.base::WeakPtrFactory.1226" }
%"class.mojo::ScopedHandleBase.1224" = type { %"class.mojo::TrapHandle" }
%"class.mojo::TrapHandle" = type { %"class.mojo::Handle" }
%class.scoped_refptr.1225 = type { %"class.mojo::SimpleWatcher::Context"* }
%"class.mojo::SimpleWatcher::Context" = type opaque
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::WeakPtrFactory.1226" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.absl::optional.1230" = type { %"class.absl::optional_internal::optional_data.1231" }
%"class.absl::optional_internal::optional_data.1231" = type { %"class.absl::optional_internal::optional_data_base.1232" }
%"class.absl::optional_internal::optional_data_base.1232" = type { %"class.absl::optional_internal::optional_data_dtor_base.1233" }
%"class.absl::optional_internal::optional_data_dtor_base.1233" = type { i8, %union.anon.1234 }
%union.anon.1234 = type { %"class.mojo::HandleSignalTracker" }
%"class.mojo::HandleSignalTracker" = type { %"class.base::RepeatingCallback.1235", %"struct.mojo::HandleSignalsState", %"class.mojo::SimpleWatcher", %"class.mojo::SimpleWatcher" }
%"class.base::RepeatingCallback.1235" = type { %"class.base::internal::CallbackBaseCopyable" }
%"struct.mojo::HandleSignalsState" = type { %struct.MojoHandleSignalsState }
%struct.MojoHandleSignalsState = type { i32, i32 }
%"class.std::__1::unique_ptr.1245" = type { %"class.std::__1::__compressed_pair.1246" }
%"class.std::__1::__compressed_pair.1246" = type { %"struct.std::__1::__compressed_pair_elem.1247" }
%"struct.std::__1::__compressed_pair_elem.1247" = type { %"class.mojo::SyncHandleWatcher"* }
%"class.mojo::SyncHandleWatcher" = type { %"class.mojo::Handle", i32, %"class.base::RepeatingCallback.1248", i8, i64, %class.scoped_refptr.1249, %class.scoped_refptr.1274 }
%"class.base::RepeatingCallback.1248" = type { %"class.base::internal::CallbackBaseCopyable" }
%class.scoped_refptr.1249 = type { %"class.mojo::SyncHandleRegistry"* }
%"class.mojo::SyncHandleRegistry" = type <{ %"class.base::RefCounted.1250", [4 x i8], %"class.mojo::WaitSet", %"class.std::__1::map.1252", %"class.std::__1::map.1263", i8, [7 x i8] }>
%"class.base::RefCounted.1250" = type { %"class.base::subtle::RefCountedBase" }
%"class.mojo::WaitSet" = type { %class.scoped_refptr.1251 }
%class.scoped_refptr.1251 = type { %"class.mojo::WaitSet::State"* }
%"class.mojo::WaitSet::State" = type opaque
%"class.std::__1::map.1252" = type { %"class.std::__1::__tree.1253" }
%"class.std::__1::__tree.1253" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1254", %"class.std::__1::__compressed_pair.1258" }
%"class.std::__1::__compressed_pair.1254" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"class.std::__1::__compressed_pair.1258" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::map.1263" = type { %"class.std::__1::__tree.1264" }
%"class.std::__1::__tree.1264" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1265", %"class.std::__1::__compressed_pair.1269" }
%"class.std::__1::__compressed_pair.1265" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"class.std::__1::__compressed_pair.1269" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%class.scoped_refptr.1274 = type { %"class.base::RefCountedData.1275"* }
%"class.base::RefCountedData.1275" = type opaque
%class.scoped_refptr.1279 = type { %"class.mojo::internal::MessageQuotaChecker"* }
%"class.mojo::internal::MessageQuotaChecker" = type opaque
%"class.mojo::Connector::RunLoopNestingObserver" = type opaque
%"class.base::WeakPtr.1281" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::WeakPtrFactory.1282" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.absl::optional.1283" = type { %"class.absl::optional_internal::optional_data.1284" }
%"class.absl::optional_internal::optional_data.1284" = type { %"class.absl::optional_internal::optional_data_base.1285" }
%"class.absl::optional_internal::optional_data_base.1285" = type { %"class.absl::optional_internal::optional_data_dtor_base.1286" }
%"class.absl::optional_internal::optional_data_dtor_base.1286" = type { i8, %union.anon.1287 }
%union.anon.1287 = type { %"class.mojo::SimpleWatcher" }
%"class.absl::optional.1288" = type { %"class.absl::optional_internal::optional_data.1289" }
%"class.absl::optional_internal::optional_data.1289" = type { %"class.absl::optional_internal::optional_data_base.1290" }
%"class.absl::optional_internal::optional_data_base.1290" = type { %"class.absl::optional_internal::optional_data_dtor_base.1291" }
%"class.absl::optional_internal::optional_data_dtor_base.1291" = type { i8, [7 x i8], %union.anon.1292 }
%union.anon.1292 = type { %"struct.mojo::internal::MultiplexRouter::ExclusiveSyncWaitInfo" }
%"struct.mojo::internal::MultiplexRouter::ExclusiveSyncWaitInfo" = type <{ i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.absl::optional.1240" = type { %"class.absl::optional_internal::optional_data.1241" }
%"class.absl::optional_internal::optional_data.1241" = type { %"class.absl::optional_internal::optional_data_base.1242" }
%"class.absl::optional_internal::optional_data_base.1242" = type { %"class.absl::optional_internal::optional_data_dtor_base.1243" }
%"class.absl::optional_internal::optional_data_dtor_base.1243" = type { i8, %union.anon.1244 }
%union.anon.1244 = type { %"class.base::Lock" }
%"class.mojo::PipeControlMessageHandler" = type { %"class.mojo::MessageReceiver", %"class.std::__1::basic_string", %"class.mojo::PipeControlMessageHandlerDelegate"* }
%"class.mojo::PipeControlMessageProxy" = type { %"class.mojo::MessageReceiver"* }
%"class.base::small_map" = type { i64, %"class.base::internal::small_map_default_init", %union.anon.1293 }
%"class.base::internal::small_map_default_init" = type { i8 }
%union.anon.1293 = type { %"class.std::__1::map.1296" }
%"class.std::__1::map.1296" = type { %"class.std::__1::__tree.1297" }
%"class.std::__1::__tree.1297" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1298", %"class.std::__1::__compressed_pair.1302" }
%"class.std::__1::__compressed_pair.1298" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"class.std::__1::__compressed_pair.1302" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"class.std::__1::unique_ptr.1307"*, i64 }
%"class.std::__1::unique_ptr.1307" = type opaque
%"class.std::__1::map.1308" = type { %"class.std::__1::__tree.1309" }
%"class.std::__1::__tree.1309" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1310", %"class.std::__1::__compressed_pair.1314" }
%"class.std::__1::__compressed_pair.1310" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"class.std::__1::__compressed_pair.1314" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::unique_ptr.1692" = type { %"class.std::__1::__compressed_pair.1693" }
%"class.std::__1::__compressed_pair.1693" = type { %"struct.std::__1::__compressed_pair_elem.1694" }
%"struct.std::__1::__compressed_pair_elem.1694" = type { %"class.blink::mojom::blink::DevToolsAgentHostProxy"* }
%"class.blink::mojom::blink::DevToolsAgentHostProxy" = type { %"class.blink::mojom::blink::DevToolsAgentHost", %"class.mojo::MessageReceiverWithResponder"* }
%"class.blink::mojom::blink::DevToolsAgentHost" = type { i32 (...)** }
%"class.blink::HeapMojoAssociatedRemote" = type { %"class.blink::Member.1114" }
%"class.blink::Member.1114" = type { %"class.blink::MemberBase.1115" }
%"class.blink::MemberBase.1115" = type { %"class.blink::HeapMojoAssociatedRemote<blink::mojom::blink::DevToolsAgentHost, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoAssociatedRemote<blink::mojom::blink::DevToolsAgentHost, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type { %"class.blink::ContextLifecycleObserver", %"class.mojo::AssociatedRemote" }
%"class.mojo::AssociatedRemote" = type { %"class.mojo::internal::AssociatedInterfacePtrState" }
%"class.mojo::internal::AssociatedInterfacePtrState" = type { %"class.mojo::internal::AssociatedInterfacePtrStateBase.base", %"class.std::__1::unique_ptr.1692" }
%"class.mojo::internal::AssociatedInterfacePtrStateBase.base" = type <{ %"class.std::__1::unique_ptr.1317", i32 }>
%"class.blink::HeapHashSet.1120" = type { %"class.WTF::HashSet.1123" }
%"class.WTF::HashSet.1123" = type { %"class.WTF::HashTable.1124" }
%"class.WTF::HashTable.1124" = type <{ %"class.blink::Member.1126"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1126" = type opaque
%"class.WTF::HashMap.1127" = type { %"class.WTF::HashTable.1128" }
%"class.WTF::HashTable.1128" = type <{ %"struct.WTF::KeyValuePair.1131"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1131" = type opaque
%"class.blink::DevToolsAgent::IOAgent" = type opaque
%"class.blink::Member.1116" = type { %"class.blink::MemberBase.1117" }
%"class.blink::MemberBase.1117" = type { %"class.blink::InspectedFrames"* }
%"class.blink::InspectedFrames" = type opaque
%"class.blink::Member.1118" = type { %"class.blink::MemberBase.1119" }
%"class.blink::MemberBase.1119" = type { %"class.blink::CoreProbeSink"* }
%"class.blink::CoreProbeSink" = type opaque
%class.scoped_refptr.1132 = type { %"class.blink::WorkerThread::RefCountedWaitableEvent"* }
%"class.blink::WorkerThread::RefCountedWaitableEvent" = type opaque
%"class.blink::TaskHandle" = type { %class.scoped_refptr.765 }
%class.scoped_refptr.765 = type { %"class.blink::TaskHandle::Runner"* }
%"class.blink::TaskHandle::Runner" = type opaque
%"class.WTF::HashSet.1133" = type { %"class.WTF::HashTable.1134" }
%"class.WTF::HashTable.1134" = type <{ %"class.blink::WorkerThread"**, i32, i32, i32, [4 x i8] }>
%"class.WTF::HashSet.1137" = type { %"class.WTF::HashTable.1138" }
%"class.WTF::HashTable.1138" = type <{ %"class.std::__1::unique_ptr.1141"*, i32, i32, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.1141" = type opaque
%"class.v8::Isolate" = type { i8 }
%"class.v8_inspector::V8ContextInfo" = type <{ %"class.v8::Local.469", i32, [4 x i8], %"class.v8_inspector::StringView", %"class.v8_inspector::StringView", %"class.v8_inspector::StringView", i8, [7 x i8] }>
%"class.v8::Local.469" = type { %"class.v8::Context"* }
%"class.v8_inspector::StringView" = type { i8, i64, %union.anon.1669 }
%union.anon.1669 = type { i8* }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.blink::DedicatedWorkerGlobalScope" = type { %"class.blink::WorkerGlobalScope", %"class.util::TokenType.1621", %"class.blink::MultiToken", i8, i8, %"class.blink::Member.1623", %"class.base::StrongAlias.755", %"class.blink::HeapMojoRemote.1665" }
%"class.blink::WorkerGlobalScope" = type { %"class.blink::WorkerOrWorkletGlobalScope", %"class.blink::ActiveScriptWrappable", %"class.blink::Supplementable.1142", %"class.blink::KURL", i32, %"class.WTF::String", %"struct.blink::UserAgentMetadata", %"class.std::__1::unique_ptr.1157", %"class.blink::Member.1175", %"class.blink::Member.1177", %"class.blink::Member.1188", %"class.blink::WorkerThread"*, i8, %"class.base::TimeTicks", %"class.blink::HeapHashMap.1190", i32, %"class.blink::Member.1197", %"class.std::__1::unique_ptr.1199", %"class.blink::BrowserInterfaceBrokerProxy", i32, %"class.blink::Member.1379", %"class.absl::optional.1383", i32, %"class.std::__1::unique_ptr.1389", %"class.std::__1::unique_ptr.1395", i64 }
%"class.blink::ActiveScriptWrappable" = type { %"class.blink::ActiveScriptWrappableBase" }
%"class.blink::ActiveScriptWrappableBase" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Supplementable.1142" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.1143" }
%"class.blink::HeapHashMap.1143" = type { %"class.WTF::HashMap.1146" }
%"class.WTF::HashMap.1146" = type { %"class.WTF::HashTable.1147" }
%"class.WTF::HashTable.1147" = type <{ %"struct.WTF::KeyValuePair.1149"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1149" = type opaque
%"struct.blink::UserAgentMetadata" = type <{ %"class.std::__1::vector.1150", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, [7 x i8] }>
%"class.std::__1::vector.1150" = type { %"class.std::__1::__vector_base.1151" }
%"class.std::__1::__vector_base.1151" = type { %"struct.blink::UserAgentBrandVersion"*, %"struct.blink::UserAgentBrandVersion"*, %"class.std::__1::__compressed_pair.1152" }
%"struct.blink::UserAgentBrandVersion" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.1152" = type { %"struct.std::__1::__compressed_pair_elem.1153" }
%"struct.std::__1::__compressed_pair_elem.1153" = type { %"struct.blink::UserAgentBrandVersion"* }
%"class.std::__1::unique_ptr.1157" = type { %"class.std::__1::__compressed_pair.1158" }
%"class.std::__1::__compressed_pair.1158" = type { %"struct.std::__1::__compressed_pair_elem.1159" }
%"struct.std::__1::__compressed_pair_elem.1159" = type { %"class.blink::WorkerSettings"* }
%"class.blink::WorkerSettings" = type { i8, i8, i8, i8, %"class.blink::GenericFontFamilySettings" }
%"class.blink::GenericFontFamilySettings" = type { %"class.WTF::HashMap.1160", %"class.WTF::HashMap.1160", %"class.WTF::HashMap.1160", %"class.WTF::HashMap.1160", %"class.WTF::HashMap.1160", %"class.WTF::HashMap.1160", %"class.WTF::HashMap.1160", %"class.std::__1::unique_ptr.1165" }
%"class.WTF::HashMap.1160" = type { %"class.WTF::HashTable.1161" }
%"class.WTF::HashTable.1161" = type <{ %"struct.WTF::KeyValuePair.1164"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1164" = type opaque
%"class.std::__1::unique_ptr.1165" = type { %"class.std::__1::__compressed_pair.1166" }
%"class.std::__1::__compressed_pair.1166" = type { %"struct.std::__1::__compressed_pair_elem.1167" }
%"struct.std::__1::__compressed_pair_elem.1167" = type { %"class.WTF::Vector.1168"* }
%"class.WTF::Vector.1168" = type opaque
%"class.blink::Member.1175" = type { %"class.blink::MemberBase.1176" }
%"class.blink::MemberBase.1176" = type { %"class.blink::WorkerLocation"* }
%"class.blink::WorkerLocation" = type opaque
%"class.blink::Member.1177" = type { %"class.blink::MemberBase.1178" }
%"class.blink::MemberBase.1178" = type { %"class.blink::WorkerNavigator"* }
%"class.blink::WorkerNavigator" = type { %"class.blink::NavigatorBase", %"class.blink::AcceptLanguagesWatcher" }
%"class.blink::NavigatorBase" = type { %"class.blink::ScriptWrappable", %"class.blink::NavigatorID", %"class.blink::NavigatorLanguage.base", %"class.blink::NavigatorUA", %"class.blink::ExecutionContextClient", %"class.blink::Supplementable.1180" }
%"class.blink::NavigatorID" = type { i32 (...)** }
%"class.blink::NavigatorLanguage.base" = type <{ %"class.blink::GarbageCollectedMixin", %"class.blink::WeakMember.1179", %"class.WTF::Vector.353", i8 }>
%"class.blink::WeakMember.1179" = type { %"class.blink::MemberBase" }
%"class.blink::NavigatorUA" = type { i32 (...)** }
%"class.blink::ExecutionContextClient" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::WeakMember.1179" }
%"class.blink::Supplementable.1180" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.1181" }
%"class.blink::HeapHashMap.1181" = type { %"class.WTF::HashMap.1184" }
%"class.WTF::HashMap.1184" = type { %"class.WTF::HashTable.1185" }
%"class.WTF::HashTable.1185" = type <{ %"struct.WTF::KeyValuePair.1187"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1187" = type { i8*, %"class.blink::Member.1723" }
%"class.blink::Member.1723" = type { %"class.blink::MemberBase.1724" }
%"class.blink::MemberBase.1724" = type { %"class.blink::Supplement.1725"* }
%"class.blink::Supplement.1725" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.1726" }
%"class.blink::Member.1726" = type { %"class.blink::MemberBase.1727" }
%"class.blink::MemberBase.1727" = type { %"class.blink::NavigatorBase"* }
%"class.blink::AcceptLanguagesWatcher" = type { i32 (...)** }
%"class.blink::Member.1188" = type { %"class.blink::MemberBase.1189" }
%"class.blink::MemberBase.1189" = type { %"class.blink::TrustedTypePolicyFactory"* }
%"class.blink::TrustedTypePolicyFactory" = type opaque
%"class.blink::HeapHashMap.1190" = type { %"class.WTF::HashMap.1193" }
%"class.WTF::HashMap.1193" = type { %"class.WTF::HashTable.1194" }
%"class.WTF::HashTable.1194" = type <{ %"struct.WTF::KeyValuePair.1196"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1196" = type opaque
%"class.blink::Member.1197" = type { %"class.blink::MemberBase.1198" }
%"class.blink::MemberBase.1198" = type { %"class.blink::OffscreenFontSelector"* }
%"class.blink::OffscreenFontSelector" = type opaque
%"class.std::__1::unique_ptr.1199" = type { %"class.std::__1::__compressed_pair.1200" }
%"class.std::__1::__compressed_pair.1200" = type { %"struct.std::__1::__compressed_pair_elem.1201" }
%"struct.std::__1::__compressed_pair_elem.1201" = type { %"class.blink::FontMatchingMetrics"* }
%"class.blink::FontMatchingMetrics" = type opaque
%"class.blink::BrowserInterfaceBrokerProxy" = type { %"class.mojo::Remote", %"class.std::__1::map.1368" }
%"class.mojo::Remote" = type { %"class.mojo::internal::InterfacePtrState" }
%"class.mojo::internal::InterfacePtrState" = type { %"class.mojo::internal::InterfacePtrStateBase.base", %"class.std::__1::unique_ptr.1362" }
%"class.std::__1::unique_ptr.1362" = type { %"class.std::__1::__compressed_pair.1363" }
%"class.std::__1::__compressed_pair.1363" = type { %"struct.std::__1::__compressed_pair_elem.1364" }
%"struct.std::__1::__compressed_pair_elem.1364" = type { %"class.blink::mojom::BrowserInterfaceBrokerProxy"* }
%"class.blink::mojom::BrowserInterfaceBrokerProxy" = type { %"class.blink::mojom::BrowserInterfaceBroker", %"class.mojo::MessageReceiverWithResponder"* }
%"class.blink::mojom::BrowserInterfaceBroker" = type { i32 (...)** }
%"class.std::__1::map.1368" = type { %"class.std::__1::__tree.1369" }
%"class.std::__1::__tree.1369" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1370", %"class.std::__1::__compressed_pair.1374" }
%"class.std::__1::__compressed_pair.1370" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"class.std::__1::__compressed_pair.1374" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.blink::Member.1379" = type { %"class.blink::MemberBase.1380" }
%"class.blink::MemberBase.1380" = type { %"class.blink::Script"* }
%"class.blink::Script" = type { i32 (...)**, %"class.blink::ScriptFetchOptions", %"class.blink::KURL" }
%"class.blink::ScriptFetchOptions" = type <{ %"class.WTF::String", %"class.WTF::HashSet.756", %"class.WTF::String", i8, [3 x i8], i32, i32, i32, i8, %"class.base::StrongAlias.755", [6 x i8] }>
%"class.absl::optional.1383" = type { %"class.absl::optional_internal::optional_data.1384" }
%"class.absl::optional_internal::optional_data.1384" = type { %"class.absl::optional_internal::optional_data_base.1385" }
%"class.absl::optional_internal::optional_data_base.1385" = type { %"class.absl::optional_internal::optional_data_dtor_base.1386" }
%"class.absl::optional_internal::optional_data_dtor_base.1386" = type { i8, [7 x i8], %union.anon.1387 }
%union.anon.1387 = type { %"struct.v8_inspector::V8StackTraceId" }
%"struct.v8_inspector::V8StackTraceId" = type <{ i64, %"struct.std::__1::pair.1388", i8, [7 x i8] }>
%"struct.std::__1::pair.1388" = type { i64, i64 }
%"class.std::__1::unique_ptr.1389" = type { %"class.std::__1::__compressed_pair.1390" }
%"class.std::__1::__compressed_pair.1390" = type { %"struct.std::__1::__compressed_pair_elem.1391" }
%"struct.std::__1::__compressed_pair_elem.1391" = type { %"class.ukm::UkmRecorder"* }
%"class.ukm::UkmRecorder" = type opaque
%"class.std::__1::unique_ptr.1395" = type { %"class.std::__1::__compressed_pair.1396" }
%"class.std::__1::__compressed_pair.1396" = type { %"struct.std::__1::__compressed_pair_elem.1397" }
%"struct.std::__1::__compressed_pair_elem.1397" = type { %"struct.blink::WorkerMainScriptLoadParameters"* }
%"struct.blink::WorkerMainScriptLoadParameters" = type { i32, %"class.mojo::StructPtr.1398", %"class.mojo::ScopedHandleBase.1595", %"class.mojo::StructPtr.1596", %"class.std::__1::vector.1604", %"class.std::__1::vector.1611" }
%"class.mojo::StructPtr.1398" = type { %"class.std::__1::unique_ptr.1399" }
%"class.std::__1::unique_ptr.1399" = type { %"class.std::__1::__compressed_pair.1400" }
%"class.std::__1::__compressed_pair.1400" = type { %"struct.std::__1::__compressed_pair_elem.1401" }
%"struct.std::__1::__compressed_pair_elem.1401" = type { %"class.network::mojom::URLResponseHead"* }
%"class.network::mojom::URLResponseHead" = type <{ %"class.base::Time", %"class.base::Time", %class.scoped_refptr.1402, %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, [4 x i8], i64, i64, i64, i8, [7 x i8], i64, %class.GURL, %"struct.net::LoadTimingInfo", %"class.mojo::StructPtr.1417", i8, i8, i8, i8, i32, %"class.std::__1::basic_string", %"class.net::IPEndPoint", i8, i8, [2 x i8], %"class.net::ProxyServer", i8, [3 x i8], i32, %"class.std::__1::vector.1433", i32, [4 x i8], i64, %"class.std::__1::basic_string", i32, [4 x i8], %"class.absl::optional.1439", %"class.std::__1::vector.1446", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [5 x i8], %"class.absl::optional.735", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.mojo::StructPtr.1481", %"class.absl::optional.1581", %"class.absl::optional.696", %"class.std::__1::vector.1446", %class.GURL, i8, [7 x i8] }>
%class.scoped_refptr.1402 = type { %"class.net::HttpResponseHeaders"* }
%"class.net::HttpResponseHeaders" = type { %"class.base::RefCountedThreadSafe.1403", %"class.std::__1::vector.1404", %"class.std::__1::basic_string", i32, %"class.net::HttpVersion" }
%"class.base::RefCountedThreadSafe.1403" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::vector.1404" = type { %"class.std::__1::__vector_base.1405" }
%"class.std::__1::__vector_base.1405" = type { %"struct.net::HttpResponseHeaders::ParsedHeader"*, %"struct.net::HttpResponseHeaders::ParsedHeader"*, %"class.std::__1::__compressed_pair.1406" }
%"struct.net::HttpResponseHeaders::ParsedHeader" = type opaque
%"class.std::__1::__compressed_pair.1406" = type { %"struct.std::__1::__compressed_pair_elem.1407" }
%"struct.std::__1::__compressed_pair_elem.1407" = type { %"struct.net::HttpResponseHeaders::ParsedHeader"* }
%"class.net::HttpVersion" = type { i32 }
%"struct.net::LoadTimingInfo" = type { i8, i32, %"class.base::Time", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"struct.net::LoadTimingInfo::ConnectTiming", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks" }
%"struct.net::LoadTimingInfo::ConnectTiming" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks" }
%"class.mojo::StructPtr.1417" = type { %"class.std::__1::unique_ptr.1418" }
%"class.std::__1::unique_ptr.1418" = type { %"class.std::__1::__compressed_pair.1419" }
%"class.std::__1::__compressed_pair.1419" = type { %"struct.std::__1::__compressed_pair_elem.1420" }
%"struct.std::__1::__compressed_pair_elem.1420" = type { %"class.network::mojom::HttpRawRequestResponseInfo"* }
%"class.network::mojom::HttpRawRequestResponseInfo" = type { i32, %"class.std::__1::basic_string", %"class.std::__1::vector.1421", %"class.std::__1::vector.1421", %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::vector.1421" = type { %"class.std::__1::__vector_base.1422" }
%"class.std::__1::__vector_base.1422" = type { %"class.mojo::InlinedStructPtr.1423"*, %"class.mojo::InlinedStructPtr.1423"*, %"class.std::__1::__compressed_pair.1425" }
%"class.mojo::InlinedStructPtr.1423" = type <{ %"class.network::mojom::HttpRawHeaderPair", i32, [4 x i8] }>
%"class.network::mojom::HttpRawHeaderPair" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.1425" = type { %"struct.std::__1::__compressed_pair_elem.1426" }
%"struct.std::__1::__compressed_pair_elem.1426" = type { %"class.mojo::InlinedStructPtr.1423"* }
%"class.net::ProxyServer" = type { i32, [4 x i8], %"class.net::HostPortPair" }
%"class.net::HostPortPair" = type <{ %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.std::__1::vector.1433" = type { %"class.std::__1::__vector_base.1434" }
%"class.std::__1::__vector_base.1434" = type { %class.GURL*, %class.GURL*, %"class.std::__1::__compressed_pair.1435" }
%"class.std::__1::__compressed_pair.1435" = type { %"struct.std::__1::__compressed_pair_elem.1413" }
%"struct.std::__1::__compressed_pair_elem.1413" = type { %class.GURL* }
%"class.absl::optional.1439" = type { %"class.absl::optional_internal::optional_data.1440" }
%"class.absl::optional_internal::optional_data.1440" = type { %"class.absl::optional_internal::optional_data_base.1441" }
%"class.absl::optional_internal::optional_data_base.1441" = type { %"class.absl::optional_internal::optional_data_dtor_base.1442" }
%"class.absl::optional_internal::optional_data_dtor_base.1442" = type { i8, [7 x i8], %union.anon.1443 }
%union.anon.1443 = type { %"class.net::SSLInfo" }
%"class.net::SSLInfo" = type <{ %class.scoped_refptr.1444, %class.scoped_refptr.1444, i32, i16, i16, i32, i8, i8, i8, i8, i32, [4 x i8], %"class.std::__1::vector.1464", %"class.std::__1::basic_string", %"class.std::__1::vector.1472", i32, %"struct.net::OCSPVerifyResult", i8, [3 x i8] }>
%class.scoped_refptr.1444 = type { %"class.net::X509Certificate"* }
%"class.net::X509Certificate" = type { %"class.base::RefCountedThreadSafe.1445", %"struct.net::CertPrincipal", %"struct.net::CertPrincipal", %"class.base::Time", %"class.base::Time", %"class.std::__1::basic_string", %"class.std::__1::unique_ptr.1453", %"class.std::__1::vector.1457" }
%"class.base::RefCountedThreadSafe.1445" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.net::CertPrincipal" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector.1446", %"class.std::__1::vector.1446", %"class.std::__1::vector.1446", %"class.std::__1::vector.1446" }
%"class.std::__1::unique_ptr.1453" = type { %"class.std::__1::__compressed_pair.1454" }
%"class.std::__1::__compressed_pair.1454" = type { %"struct.std::__1::__compressed_pair_elem.1455" }
%"struct.std::__1::__compressed_pair_elem.1455" = type { %struct.crypto_buffer_st* }
%struct.crypto_buffer_st = type opaque
%"class.std::__1::vector.1457" = type { %"class.std::__1::__vector_base.1458" }
%"class.std::__1::__vector_base.1458" = type { %"class.std::__1::unique_ptr.1453"*, %"class.std::__1::unique_ptr.1453"*, %"class.std::__1::__compressed_pair.1459" }
%"class.std::__1::__compressed_pair.1459" = type { %"struct.std::__1::__compressed_pair_elem.1460" }
%"struct.std::__1::__compressed_pair_elem.1460" = type { %"class.std::__1::unique_ptr.1453"* }
%"class.std::__1::vector.1464" = type { %"class.std::__1::__vector_base.1465" }
%"class.std::__1::__vector_base.1465" = type { %"class.net::HashValue"*, %"class.net::HashValue"*, %"class.std::__1::__compressed_pair.1467" }
%"class.net::HashValue" = type { i32, %union.anon.1466 }
%union.anon.1466 = type { %"struct.net::SHA256HashValue" }
%"struct.net::SHA256HashValue" = type { [32 x i8] }
%"class.std::__1::__compressed_pair.1467" = type { %"struct.std::__1::__compressed_pair_elem.1468" }
%"struct.std::__1::__compressed_pair_elem.1468" = type { %"class.net::HashValue"* }
%"class.std::__1::vector.1472" = type { %"class.std::__1::__vector_base.1473" }
%"class.std::__1::__vector_base.1473" = type { %"struct.net::SignedCertificateTimestampAndStatus"*, %"struct.net::SignedCertificateTimestampAndStatus"*, %"class.std::__1::__compressed_pair.1476" }
%"struct.net::SignedCertificateTimestampAndStatus" = type <{ %class.scoped_refptr.1474, i32, [4 x i8] }>
%class.scoped_refptr.1474 = type { %"struct.net::ct::SignedCertificateTimestamp"* }
%"struct.net::ct::SignedCertificateTimestamp" = type { %"class.base::RefCountedThreadSafe.1475", i32, %"class.std::__1::basic_string", %"class.base::Time", %"class.std::__1::basic_string", %"struct.net::ct::DigitallySigned", i32, %"class.std::__1::basic_string" }
%"class.base::RefCountedThreadSafe.1475" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.net::ct::DigitallySigned" = type { i32, i32, %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.1476" = type { %"struct.std::__1::__compressed_pair_elem.1477" }
%"struct.std::__1::__compressed_pair_elem.1477" = type { %"struct.net::SignedCertificateTimestampAndStatus"* }
%"struct.net::OCSPVerifyResult" = type { i32, i32 }
%"class.mojo::StructPtr.1481" = type { %"class.std::__1::unique_ptr.1482" }
%"class.std::__1::unique_ptr.1482" = type { %"class.std::__1::__compressed_pair.1483" }
%"class.std::__1::__compressed_pair.1483" = type { %"struct.std::__1::__compressed_pair_elem.1484" }
%"struct.std::__1::__compressed_pair_elem.1484" = type { %"class.network::mojom::ParsedHeaders"* }
%"class.network::mojom::ParsedHeaders" = type <{ %"class.std::__1::vector.1485", %"class.mojo::StructPtr.1533", %"struct.network::CrossOriginEmbedderPolicy", %"struct.network::CrossOriginOpenerPolicy", i8, [7 x i8], %"class.absl::optional.1545", %"class.base::TimeDelta", %"class.absl::optional.1545", i32, [4 x i8], %"class.std::__1::vector.1557", %"class.mojo::StructPtr.1571", i8, [7 x i8] }>
%"class.std::__1::vector.1485" = type { %"class.std::__1::__vector_base.1486" }
%"class.std::__1::__vector_base.1486" = type { %"class.mojo::StructPtr.1487"*, %"class.mojo::StructPtr.1487"*, %"class.std::__1::__compressed_pair.1528" }
%"class.mojo::StructPtr.1487" = type { %"class.std::__1::unique_ptr.1488" }
%"class.std::__1::unique_ptr.1488" = type { %"class.std::__1::__compressed_pair.1489" }
%"class.std::__1::__compressed_pair.1489" = type { %"struct.std::__1::__compressed_pair_elem.1490" }
%"struct.std::__1::__compressed_pair_elem.1490" = type { %"class.network::mojom::ContentSecurityPolicy"* }
%"class.network::mojom::ContentSecurityPolicy" = type { %"class.mojo::StructPtr.1491", %"class.base::flat_map", %"class.base::flat_map.1506", i8, i8, i8, i32, %"class.mojo::InlinedStructPtr.1516", i8, %"class.std::__1::vector.1446", i32, %"class.mojo::StructPtr.1518", %"class.std::__1::vector.1446" }
%"class.mojo::StructPtr.1491" = type { %"class.std::__1::unique_ptr.1492" }
%"class.std::__1::unique_ptr.1492" = type { %"class.std::__1::__compressed_pair.1493" }
%"class.std::__1::__compressed_pair.1493" = type { %"struct.std::__1::__compressed_pair_elem.1494" }
%"struct.std::__1::__compressed_pair_elem.1494" = type { %"class.network::mojom::CSPSource"* }
%"class.network::mojom::CSPSource" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, [4 x i8], %"class.std::__1::basic_string", i8, i8, [6 x i8] }>
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.1498" }
%"class.std::__1::vector.1498" = type { %"class.std::__1::__vector_base.1499" }
%"class.std::__1::__vector_base.1499" = type { %"struct.std::__1::pair.1500"*, %"struct.std::__1::pair.1500"*, %"class.std::__1::__compressed_pair.1501" }
%"struct.std::__1::pair.1500" = type opaque
%"class.std::__1::__compressed_pair.1501" = type { %"struct.std::__1::__compressed_pair_elem.1502" }
%"struct.std::__1::__compressed_pair_elem.1502" = type { %"struct.std::__1::pair.1500"* }
%"class.base::flat_map.1506" = type { %"class.base::internal::flat_tree.1507" }
%"class.base::internal::flat_tree.1507" = type { %"class.std::__1::vector.1508" }
%"class.std::__1::vector.1508" = type { %"class.std::__1::__vector_base.1509" }
%"class.std::__1::__vector_base.1509" = type { %"struct.std::__1::pair.1510"*, %"struct.std::__1::pair.1510"*, %"class.std::__1::__compressed_pair.1511" }
%"struct.std::__1::pair.1510" = type opaque
%"class.std::__1::__compressed_pair.1511" = type { %"struct.std::__1::__compressed_pair_elem.1512" }
%"struct.std::__1::__compressed_pair_elem.1512" = type { %"struct.std::__1::pair.1510"* }
%"class.mojo::InlinedStructPtr.1516" = type <{ %"class.network::mojom::ContentSecurityPolicyHeader", i32, [4 x i8] }>
%"class.network::mojom::ContentSecurityPolicyHeader" = type { %"class.std::__1::basic_string", i32, i32 }
%"class.mojo::StructPtr.1518" = type { %"class.std::__1::unique_ptr.1519" }
%"class.std::__1::unique_ptr.1519" = type { %"class.std::__1::__compressed_pair.1520" }
%"class.std::__1::__compressed_pair.1520" = type { %"struct.std::__1::__compressed_pair_elem.1521" }
%"struct.std::__1::__compressed_pair_elem.1521" = type { %"class.network::mojom::CSPTrustedTypes"* }
%"class.network::mojom::CSPTrustedTypes" = type <{ %"class.std::__1::vector.1446", i8, i8, [6 x i8] }>
%"class.std::__1::__compressed_pair.1528" = type { %"struct.std::__1::__compressed_pair_elem.1529" }
%"struct.std::__1::__compressed_pair_elem.1529" = type { %"class.mojo::StructPtr.1487"* }
%"class.mojo::StructPtr.1533" = type { %"class.std::__1::unique_ptr.1534" }
%"class.std::__1::unique_ptr.1534" = type { %"class.std::__1::__compressed_pair.1535" }
%"class.std::__1::__compressed_pair.1535" = type { %"struct.std::__1::__compressed_pair_elem.1536" }
%"struct.std::__1::__compressed_pair_elem.1536" = type { %"class.network::mojom::AllowCSPFromHeaderValue"* }
%"class.network::mojom::AllowCSPFromHeaderValue" = type { i32, %"union.network::mojom::AllowCSPFromHeaderValue::Union_" }
%"union.network::mojom::AllowCSPFromHeaderValue::Union_" = type { %"class.url::Origin"* }
%"struct.network::CrossOriginEmbedderPolicy" = type { i32, %"class.absl::optional.1540", i32, %"class.absl::optional.1540" }
%"class.absl::optional.1540" = type { %"class.absl::optional_internal::optional_data.1541" }
%"class.absl::optional_internal::optional_data.1541" = type { %"class.absl::optional_internal::optional_data_base.1542" }
%"class.absl::optional_internal::optional_data_base.1542" = type { %"class.absl::optional_internal::optional_data_dtor_base.1543" }
%"class.absl::optional_internal::optional_data_dtor_base.1543" = type { i8, %union.anon.1544 }
%union.anon.1544 = type { %"class.std::__1::basic_string" }
%"struct.network::CrossOriginOpenerPolicy" = type { i32, %"class.absl::optional.1540", i32, %"class.absl::optional.1540" }
%"class.absl::optional.1545" = type { %"class.absl::optional_internal::optional_data.1546" }
%"class.absl::optional_internal::optional_data.1546" = type { %"class.absl::optional_internal::optional_data_base.1547" }
%"class.absl::optional_internal::optional_data_base.1547" = type { %"class.absl::optional_internal::optional_data_dtor_base.1548" }
%"class.absl::optional_internal::optional_data_dtor_base.1548" = type { i8, %union.anon.1549 }
%union.anon.1549 = type { %"class.std::__1::vector.1550" }
%"class.std::__1::vector.1550" = type { %"class.std::__1::__vector_base.1551" }
%"class.std::__1::__vector_base.1551" = type { i32*, i32*, %"class.std::__1::__compressed_pair.1552" }
%"class.std::__1::__compressed_pair.1552" = type { %"struct.std::__1::__compressed_pair_elem.1553" }
%"struct.std::__1::__compressed_pair_elem.1553" = type { i32* }
%"class.std::__1::vector.1557" = type { %"class.std::__1::__vector_base.1558" }
%"class.std::__1::__vector_base.1558" = type { %"class.mojo::StructPtr.1559"*, %"class.mojo::StructPtr.1559"*, %"class.std::__1::__compressed_pair.1566" }
%"class.mojo::StructPtr.1559" = type { %"class.std::__1::unique_ptr.1560" }
%"class.std::__1::unique_ptr.1560" = type { %"class.std::__1::__compressed_pair.1561" }
%"class.std::__1::__compressed_pair.1561" = type { %"struct.std::__1::__compressed_pair_elem.1562" }
%"struct.std::__1::__compressed_pair_elem.1562" = type { %"class.network::mojom::LinkHeader"* }
%"class.network::mojom::LinkHeader" = type { %class.GURL, i32, i32, i32, %"class.absl::optional.1540" }
%"class.std::__1::__compressed_pair.1566" = type { %"struct.std::__1::__compressed_pair_elem.1567" }
%"struct.std::__1::__compressed_pair_elem.1567" = type { %"class.mojo::StructPtr.1559"* }
%"class.mojo::StructPtr.1571" = type { %"class.std::__1::unique_ptr.1572" }
%"class.std::__1::unique_ptr.1572" = type { %"class.std::__1::__compressed_pair.1573" }
%"class.std::__1::__compressed_pair.1573" = type { %"struct.std::__1::__compressed_pair_elem.1574" }
%"struct.std::__1::__compressed_pair_elem.1574" = type { %"class.network::mojom::TimingAllowOrigin"* }
%"class.network::mojom::TimingAllowOrigin" = type { i32, %"union.network::mojom::TimingAllowOrigin::Union_" }
%"union.network::mojom::TimingAllowOrigin::Union_" = type { %"class.std::__1::vector.1446"* }
%"class.absl::optional.1581" = type { %"class.absl::optional_internal::optional_data.1582" }
%"class.absl::optional_internal::optional_data.1582" = type { %"class.absl::optional_internal::optional_data_base.1583" }
%"class.absl::optional_internal::optional_data_base.1583" = type { %"class.absl::optional_internal::optional_data_dtor_base.1584" }
%"class.absl::optional_internal::optional_data_dtor_base.1584" = type { i8, %union.anon.1585 }
%union.anon.1585 = type { %"struct.network::OriginPolicy" }
%"struct.network::OriginPolicy" = type { i32, %class.GURL, %"class.std::__1::unique_ptr.1586" }
%"class.std::__1::unique_ptr.1586" = type { %"class.std::__1::__compressed_pair.1587" }
%"class.std::__1::__compressed_pair.1587" = type { %"struct.std::__1::__compressed_pair_elem.1588" }
%"struct.std::__1::__compressed_pair_elem.1588" = type { %"struct.network::OriginPolicyContents"* }
%"struct.network::OriginPolicyContents" = type { %"class.std::__1::vector.1446", %"class.absl::optional.1540", %"class.std::__1::vector.1446", %"class.std::__1::vector.1446" }
%"class.std::__1::vector.1446" = type { %"class.std::__1::__vector_base.1447" }
%"class.std::__1::__vector_base.1447" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.1448" }
%"class.std::__1::__compressed_pair.1448" = type { %"struct.std::__1::__compressed_pair_elem.1449" }
%"struct.std::__1::__compressed_pair_elem.1449" = type { %"class.std::__1::basic_string"* }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr.1411" }
%"class.std::__1::unique_ptr.1411" = type { %"class.std::__1::__compressed_pair.1412" }
%"class.std::__1::__compressed_pair.1412" = type { %"struct.std::__1::__compressed_pair_elem.1413" }
%"class.mojo::ScopedHandleBase.1595" = type { %"class.mojo::DataPipeConsumerHandle" }
%"class.mojo::DataPipeConsumerHandle" = type { %"class.mojo::Handle" }
%"class.mojo::StructPtr.1596" = type { %"class.std::__1::unique_ptr.1597" }
%"class.std::__1::unique_ptr.1597" = type { %"class.std::__1::__compressed_pair.1598" }
%"class.std::__1::__compressed_pair.1598" = type { %"struct.std::__1::__compressed_pair_elem.1599" }
%"struct.std::__1::__compressed_pair_elem.1599" = type { %"class.network::mojom::URLLoaderClientEndpoints"* }
%"class.network::mojom::URLLoaderClientEndpoints" = type { %"class.mojo::PendingRemote.1600", %"class.mojo::PendingReceiver" }
%"class.mojo::PendingRemote.1600" = type { %"struct.mojo::internal::PendingRemoteState" }
%"class.mojo::PendingReceiver" = type { %"struct.mojo::internal::PendingReceiverState" }
%"struct.mojo::internal::PendingReceiverState" = type { %"class.mojo::ScopedHandleBase", %"class.mojo::ConnectionGroup::Ref" }
%"class.std::__1::vector.1604" = type { %"class.std::__1::__vector_base.1605" }
%"class.std::__1::__vector_base.1605" = type { %"struct.net::RedirectInfo"*, %"struct.net::RedirectInfo"*, %"class.std::__1::__compressed_pair.1606" }
%"struct.net::RedirectInfo" = type { i32, %"class.std::__1::basic_string", %class.GURL, %"class.net::SiteForCookies", %"class.std::__1::basic_string", i8, i8, i32 }
%"class.std::__1::__compressed_pair.1606" = type { %"struct.std::__1::__compressed_pair_elem.1607" }
%"struct.std::__1::__compressed_pair_elem.1607" = type { %"struct.net::RedirectInfo"* }
%"class.std::__1::vector.1611" = type { %"class.std::__1::__vector_base.1612" }
%"class.std::__1::__vector_base.1612" = type { %"class.mojo::StructPtr.1398"*, %"class.mojo::StructPtr.1398"*, %"class.std::__1::__compressed_pair.1613" }
%"class.std::__1::__compressed_pair.1613" = type { %"struct.std::__1::__compressed_pair_elem.1614" }
%"struct.std::__1::__compressed_pair_elem.1614" = type { %"class.mojo::StructPtr.1398"* }
%"class.util::TokenType.1621" = type { %"class.base::StrongAlias.1622" }
%"class.base::StrongAlias.1622" = type { %"class.base::UnguessableToken" }
%"class.blink::MultiToken" = type <{ %"class.base::UnguessableToken", i32, [4 x i8] }>
%"class.blink::Member.1623" = type { %"class.blink::MemberBase.1624" }
%"class.blink::MemberBase.1624" = type { %"class.blink::WorkerAnimationFrameProvider"* }
%"class.blink::WorkerAnimationFrameProvider" = type { %"class.blink::BeginFrameProviderClient", %"class.blink::Member.1627", %"class.blink::FrameRequestCallbackCollection", %"class.blink::HeapLinkedHashSet", %"class.blink::Member" }
%"class.blink::BeginFrameProviderClient" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Member.1627" = type { %"class.blink::MemberBase.1628" }
%"class.blink::MemberBase.1628" = type { %"class.blink::BeginFrameProvider"* }
%"class.blink::BeginFrameProvider" = type { %"class.viz::mojom::blink::CompositorFrameSinkClient", %"class.blink::mojom::blink::EmbeddedFrameSinkClient", i8, i8, %"class.blink::HeapMojoReceiver", %"class.blink::HeapMojoReceiver.1633", %"class.viz::FrameSinkId", %"class.viz::FrameSinkId", %"class.blink::HeapMojoRemote.1636", %"class.blink::Member.1639", %"class.std::__1::unique_ptr.1641" }
%"class.viz::mojom::blink::CompositorFrameSinkClient" = type { i32 (...)** }
%"class.blink::mojom::blink::EmbeddedFrameSinkClient" = type { i32 (...)** }
%"class.blink::HeapMojoReceiver" = type { %"class.blink::Member.1631" }
%"class.blink::Member.1631" = type { %"class.blink::MemberBase.1632" }
%"class.blink::MemberBase.1632" = type { %"class.blink::HeapMojoReceiver<viz::mojom::blink::CompositorFrameSinkClient, blink::BeginFrameProvider, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoReceiver<viz::mojom::blink::CompositorFrameSinkClient, blink::BeginFrameProvider, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type opaque
%"class.blink::HeapMojoReceiver.1633" = type { %"class.blink::Member.1634" }
%"class.blink::Member.1634" = type { %"class.blink::MemberBase.1635" }
%"class.blink::MemberBase.1635" = type { %"class.blink::HeapMojoReceiver<blink::mojom::blink::EmbeddedFrameSinkClient, blink::BeginFrameProvider, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoReceiver<blink::mojom::blink::EmbeddedFrameSinkClient, blink::BeginFrameProvider, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type opaque
%"class.viz::FrameSinkId" = type { i32, i32 }
%"class.blink::HeapMojoRemote.1636" = type { %"class.blink::Member.1637" }
%"class.blink::Member.1637" = type { %"class.blink::MemberBase.1638" }
%"class.blink::MemberBase.1638" = type { %"class.blink::HeapMojoRemote<viz::mojom::blink::CompositorFrameSink, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoRemote<viz::mojom::blink::CompositorFrameSink, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type opaque
%"class.blink::Member.1639" = type { %"class.blink::MemberBase.1640" }
%"class.blink::MemberBase.1640" = type { %"class.blink::BeginFrameProviderClient"* }
%"class.std::__1::unique_ptr.1641" = type { %"class.std::__1::__compressed_pair.1642" }
%"class.std::__1::__compressed_pair.1642" = type { %"struct.std::__1::__compressed_pair_elem.1643" }
%"struct.std::__1::__compressed_pair_elem.1643" = type { %"class.power_scheduler::PowerModeVoter"* }
%"class.power_scheduler::PowerModeVoter" = type { %"class.power_scheduler::PowerModeVoter::Delegate"* }
%"class.power_scheduler::PowerModeVoter::Delegate" = type { i32 (...)** }
%"class.blink::FrameRequestCallbackCollection" = type { %"class.blink::NameClient", %"class.blink::HeapVector.1647", %"class.blink::HeapVector.1647", i32, %"class.blink::Member" }
%"class.blink::HeapVector.1647" = type { %"class.WTF::Vector.1650" }
%"class.WTF::Vector.1650" = type { %"class.WTF::VectorBuffer.1651" }
%"class.WTF::VectorBuffer.1651" = type { %"class.WTF::VectorBufferBase.1652" }
%"class.WTF::VectorBufferBase.1652" = type { %"class.blink::Member.1653"*, i32, i32 }
%"class.blink::Member.1653" = type opaque
%"class.blink::HeapLinkedHashSet" = type { %"class.WTF::LinkedHashSet" }
%"class.WTF::LinkedHashSet" = type { %"class.WTF::HashMap.1657", %"class.WTF::VectorBackedLinkedList" }
%"class.WTF::HashMap.1657" = type { %"class.WTF::HashTable.1658" }
%"class.WTF::HashTable.1658" = type <{ %"struct.WTF::KeyValuePair.1660"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1660" = type opaque
%"class.WTF::VectorBackedLinkedList" = type { %"class.WTF::Vector.1661", i32, i32 }
%"class.WTF::Vector.1661" = type { %"class.WTF::VectorBuffer.1662" }
%"class.WTF::VectorBuffer.1662" = type { %"class.WTF::VectorBufferBase.1663" }
%"class.WTF::VectorBufferBase.1663" = type { %"class.WTF::VectorBackedLinkedListNode"*, i32, i32 }
%"class.WTF::VectorBackedLinkedListNode" = type opaque
%"class.blink::HeapMojoRemote.1665" = type { %"class.blink::Member.1666" }
%"class.blink::Member.1666" = type { %"class.blink::MemberBase.1667" }
%"class.blink::MemberBase.1667" = type { %"class.blink::HeapMojoRemote<blink::mojom::blink::DedicatedWorkerHost, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoRemote<blink::mojom::blink::DedicatedWorkerHost, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type { %"class.blink::ContextLifecycleObserver", %"class.mojo::Remote.1730" }
%"class.mojo::Remote.1730" = type { %"class.mojo::internal::InterfacePtrState.1731" }
%"class.mojo::internal::InterfacePtrState.1731" = type { %"class.mojo::internal::InterfacePtrStateBase.base", %"class.std::__1::unique_ptr.1732" }
%"class.std::__1::unique_ptr.1732" = type { %"class.std::__1::__compressed_pair.1733" }
%"class.std::__1::__compressed_pair.1733" = type { %"struct.std::__1::__compressed_pair_elem.1734" }
%"struct.std::__1::__compressed_pair_elem.1734" = type { %"class.blink::mojom::blink::DedicatedWorkerHostProxy"* }
%"class.blink::mojom::blink::DedicatedWorkerHostProxy" = type { %"class.blink::mojom::blink::DedicatedWorkerHost", %"class.mojo::MessageReceiverWithResponder"* }
%"class.blink::mojom::blink::DedicatedWorkerHost" = type { i32 (...)** }
%"class.blink::ScriptState::Scope" = type { %"class.v8::HandleScope", %"class.v8::Local.469" }
%"class.v8::HandleScope" = type { %"class.v8::internal::Isolate"*, i64*, i64* }
%"class.v8::internal::Isolate" = type opaque
%"class.blink::ScriptValue" = type { %"class.v8::Isolate"*, %"class.blink::WorldSafeV8Reference" }
%"class.v8::Value" = type { i8 }
%"class.v8_inspector::StringBuffer" = type { i32 (...)** }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN3WTF7HashMapIiPN5blink12WorkerThreadENS_7IntHashIiEENS_10HashTraitsIiEENS6_IS3_EENS_18PartitionAllocatorEE5eraseERKi = comdat any

$_ZN12v8_inspector17V8InspectorClient14endUserGestureEv = comdat any

$_ZN12v8_inspector17V8InspectorClient29maxAsyncCallStackDepthChangedEi = comdat any

$_ZN12v8_inspector17V8InspectorClient17resourceNameToUrlERKNS_10StringViewE = comdat any

$_ZN5blink20WorkerThreadDebugger8IsWorkerEv = comdat any

$_ZN3WTF9HashTableIiNS_12KeyValuePairIiPN5blink12WorkerThreadEEENS_24KeyValuePairKeyExtractorENS_7IntHashIiEENS_18HashMapValueTraitsINS_10HashTraitsIiEENSA_IS4_EEEESB_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISD_S8_SE_EERiRS4_EENS_18HashTableAddResultISF_S5_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableIiNS_12KeyValuePairIiPN5blink12WorkerThreadEEENS_24KeyValuePairKeyExtractorENS_7IntHashIiEENS_18HashMapValueTraitsINS_10HashTraitsIiEENSA_IS4_EEEESB_NS_18PartitionAllocatorEE6ExpandEPS5_ = comdat any

$_ZN3WTF9HashTableIiNS_12KeyValuePairIiPN5blink12WorkerThreadEEENS_24KeyValuePairKeyExtractorENS_7IntHashIiEENS_18HashMapValueTraitsINS_10HashTraitsIiEENSA_IS4_EEEESB_NS_18PartitionAllocatorEE8RehashToEPS5_jSG_ = comdat any

@_ZTVN5blink20WorkerThreadDebuggerE = hidden unnamed_addr constant { [35 x i8*], [4 x i8*] } { [35 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::WorkerThreadDebugger"*)* @_ZN5blink20WorkerThreadDebuggerD2Ev to i8*), i8* bitcast (void (%"class.blink::WorkerThreadDebugger"*)* @_ZN5blink20WorkerThreadDebuggerD0Ev to i8*), i8* bitcast (void (%"class.blink::WorkerThreadDebugger"*, i32)* @_ZN5blink20WorkerThreadDebugger21runMessageLoopOnPauseEi to i8*), i8* bitcast (void (%"class.blink::WorkerThreadDebugger"*)* @_ZN5blink20WorkerThreadDebugger22quitMessageLoopOnPauseEv to i8*), i8* bitcast (void (%"class.blink::WorkerThreadDebugger"*, i32)* @_ZN5blink20WorkerThreadDebugger23runIfWaitingForDebuggerEi to i8*), i8* bitcast (void (%"class.blink::WorkerThreadDebugger"*, i32)* @_ZN5blink20WorkerThreadDebugger11muteMetricsEi to i8*), i8* bitcast (void (%"class.blink::WorkerThreadDebugger"*, i32)* @_ZN5blink20WorkerThreadDebugger13unmuteMetricsEi to i8*), i8* bitcast (void (%"class.blink::ThreadDebugger"*)* @_ZN5blink14ThreadDebugger16beginUserGestureEv to i8*), i8* bitcast (void (%"class.v8_inspector::V8InspectorClient"*)* @_ZN12v8_inspector17V8InspectorClient14endUserGestureEv to i8*), i8* bitcast (%"class.v8_inspector::StringBuffer"* (%"class.blink::ThreadDebugger"*, %"class.v8::Value"*)* @_ZN5blink14ThreadDebugger12valueSubtypeEN2v85LocalINS1_5ValueEEE to i8*), i8* bitcast (%"class.v8_inspector::StringBuffer"* (%"class.blink::ThreadDebugger"*, %"class.v8::Context"*, %"class.v8::Value"*)* @_ZN5blink14ThreadDebugger26descriptionForValueSubtypeEN2v85LocalINS1_7ContextEEENS2_INS1_5ValueEEE to i8*), i8* bitcast (i1 (%"class.blink::ThreadDebugger"*, %"class.v8::Value"*)* @_ZN5blink14ThreadDebugger27formatAccessorsAsPropertiesEN2v85LocalINS1_5ValueEEE to i8*), i8* bitcast (i1 (%"class.blink::ThreadDebugger"*, %"class.v8::Object"*)* @_ZN5blink14ThreadDebugger23isInspectableHeapObjectEN2v85LocalINS1_6ObjectEEE to i8*), i8* bitcast (%"class.v8::Context"* (%"class.blink::WorkerThreadDebugger"*, i32)* @_ZN5blink20WorkerThreadDebugger27ensureDefaultContextInGroupEi to i8*), i8* bitcast (void (%"class.blink::WorkerThreadDebugger"*, i32)* @_ZN5blink20WorkerThreadDebugger29beginEnsureAllContextsInGroupEi to i8*), i8* bitcast (void (%"class.blink::WorkerThreadDebugger"*, i32)* @_ZN5blink20WorkerThreadDebugger27endEnsureAllContextsInGroupEi to i8*), i8* bitcast (void (%"class.blink::ThreadDebugger"*, %"class.v8::Context"*, %"class.v8::Object"*)* @_ZN5blink14ThreadDebugger31installAdditionalCommandLineAPIEN2v85LocalINS1_7ContextEEENS2_INS1_6ObjectEEE to i8*), i8* bitcast (void (%"class.blink::WorkerThreadDebugger"*, i32, i32, %"class.v8_inspector::StringView"*, %"class.v8_inspector::StringView"*, i32, i32, %"class.v8_inspector::V8StackTrace"*)* @_ZN5blink20WorkerThreadDebugger17consoleAPIMessageEiN2v87Isolate17MessageErrorLevelERKN12v8_inspector10StringViewES7_jjPNS4_12V8StackTraceE to i8*), i8* bitcast (%"class.v8::Value"* (%"class.blink::WorkerThreadDebugger"*, %"class.v8::Isolate"*, %"class.v8::Context"*)* @_ZN5blink20WorkerThreadDebugger10memoryInfoEPN2v87IsolateENS1_5LocalINS1_7ContextEEE to i8*), i8* bitcast (void (%"class.blink::ThreadDebugger"*, %"class.v8_inspector::StringView"*)* @_ZN5blink14ThreadDebugger11consoleTimeERKN12v8_inspector10StringViewE to i8*), i8* bitcast (void (%"class.blink::ThreadDebugger"*, %"class.v8_inspector::StringView"*)* @_ZN5blink14ThreadDebugger14consoleTimeEndERKN12v8_inspector10StringViewE to i8*), i8* bitcast (void (%"class.blink::ThreadDebugger"*, %"class.v8_inspector::StringView"*)* @_ZN5blink14ThreadDebugger16consoleTimeStampERKN12v8_inspector10StringViewE to i8*), i8* bitcast (void (%"class.blink::WorkerThreadDebugger"*, i32)* @_ZN5blink20WorkerThreadDebugger12consoleClearEi to i8*), i8* bitcast (double (%"class.blink::ThreadDebugger"*)* @_ZN5blink14ThreadDebugger13currentTimeMSEv to i8*), i8* bitcast (void (%"class.blink::ThreadDebugger"*, double, void (i8*)*, i8*)* @_ZN5blink14ThreadDebugger19startRepeatingTimerEdPFvPvES1_ to i8*), i8* bitcast (void (%"class.blink::ThreadDebugger"*, i8*)* @_ZN5blink14ThreadDebugger11cancelTimerEPv to i8*), i8* bitcast (i1 (%"class.blink::WorkerThreadDebugger"*, i32)* @_ZN5blink20WorkerThreadDebugger17canExecuteScriptsEi to i8*), i8* bitcast (void (%"class.v8_inspector::V8InspectorClient"*, i32)* @_ZN12v8_inspector17V8InspectorClient29maxAsyncCallStackDepthChangedEi to i8*), i8* bitcast (%"class.v8_inspector::StringBuffer"* (%"class.v8_inspector::V8InspectorClient"*, %"class.v8_inspector::StringView"*)* @_ZN12v8_inspector17V8InspectorClient17resourceNameToUrlERKNS_10StringViewE to i8*), i8* bitcast (i64 (%"class.blink::ThreadDebugger"*)* @_ZN5blink14ThreadDebugger16generateUniqueIdEv to i8*), i8* bitcast (i1 (%"class.blink::WorkerThreadDebugger"*)* @_ZN5blink20WorkerThreadDebugger8IsWorkerEv to i8*), i8* bitcast (i32 (%"class.blink::WorkerThreadDebugger"*, %"class.blink::ExecutionContext"*)* @_ZN5blink20WorkerThreadDebugger14ContextGroupIdEPNS_16ExecutionContextE to i8*), i8* bitcast (void (%"class.blink::WorkerThreadDebugger"*, %"class.blink::ExecutionContext"*, i32, i32, %"class.WTF::String"*, %"class.blink::SourceLocation"*)* @_ZN5blink20WorkerThreadDebugger20ReportConsoleMessageEPNS_16ExecutionContextENS_5mojom20ConsoleMessageSourceENS3_19ConsoleMessageLevelERKN3WTF6StringEPNS_14SourceLocationE to i8*)], [4 x i8*] [i8* inttoptr (i64 -8 to i8*), i8* null, i8* bitcast (void (%"class.blink::WorkerThreadDebugger"*)* @_ZThn8_N5blink20WorkerThreadDebuggerD1Ev to i8*), i8* bitcast (void (%"class.blink::WorkerThreadDebugger"*)* @_ZThn8_N5blink20WorkerThreadDebuggerD0Ev to i8*)] }, align 8
@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"Uncaught\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.2 = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@.str.3 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIiPN5blink12WorkerThreadEEEEEPKcv = private unnamed_addr constant [93 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::KeyValuePair<int, blink::WorkerThread *>]\00", align 1

@_ZN5blink20WorkerThreadDebuggerC1EPN2v87IsolateE = hidden unnamed_addr alias void (%"class.blink::WorkerThreadDebugger"*, %"class.v8::Isolate"*), void (%"class.blink::WorkerThreadDebugger"*, %"class.v8::Isolate"*)* @_ZN5blink20WorkerThreadDebuggerC2EPN2v87IsolateE
@_ZN5blink20WorkerThreadDebuggerD1Ev = hidden unnamed_addr alias void (%"class.blink::WorkerThreadDebugger"*), void (%"class.blink::WorkerThreadDebugger"*)* @_ZN5blink20WorkerThreadDebuggerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::WorkerThreadDebugger"* @_ZN5blink20WorkerThreadDebugger4FromEPN2v87IsolateE(%"class.v8::Isolate"*) local_unnamed_addr #0 align 2 {
  %2 = tail call %"class.blink::ThreadDebugger"* @_ZN5blink14ThreadDebugger4FromEPN2v87IsolateE(%"class.v8::Isolate"* %0) #11
  %3 = bitcast %"class.blink::ThreadDebugger"* %2 to %"class.blink::WorkerThreadDebugger"*
  ret %"class.blink::WorkerThreadDebugger"* %3
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.blink::ThreadDebugger"* @_ZN5blink14ThreadDebugger4FromEPN2v87IsolateE(%"class.v8::Isolate"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20WorkerThreadDebuggerC2EPN2v87IsolateE(%"class.blink::WorkerThreadDebugger"*, %"class.v8::Isolate"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 0
  tail call void @_ZN5blink14ThreadDebuggerC2EPN2v87IsolateE(%"class.blink::ThreadDebugger"* %3, %"class.v8::Isolate"* %1) #11
  %4 = bitcast %"class.blink::WorkerThreadDebugger"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [35 x i8*], [4 x i8*] }, { [35 x i8*], [4 x i8*] }* @_ZTVN5blink20WorkerThreadDebuggerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [35 x i8*], [4 x i8*] }, { [35 x i8*], [4 x i8*] }* @_ZTVN5blink20WorkerThreadDebuggerE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %4, align 8
  %5 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 1
  store i32 0, i32* %5, align 8
  %6 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 3
  %7 = bitcast %"class.WTF::HashMap"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 20, i1 false) #11
  ret void
}

declare void @_ZN5blink14ThreadDebuggerC2EPN2v87IsolateE(%"class.blink::ThreadDebugger"*, %"class.v8::Isolate"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20WorkerThreadDebuggerD2Ev(%"class.blink::WorkerThreadDebugger"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.blink::WorkerThreadDebugger"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [35 x i8*], [4 x i8*] }, { [35 x i8*], [4 x i8*] }* @_ZTVN5blink20WorkerThreadDebuggerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [35 x i8*], [4 x i8*] }, { [35 x i8*], [4 x i8*] }* @_ZTVN5blink20WorkerThreadDebuggerE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %2, align 8
  %3 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 3, i32 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %3, align 8
  %5 = icmp eq %"struct.WTF::KeyValuePair"* %4, null
  br i1 %5, label %8, label %6, !prof !2

6:                                                ; preds = %1
  %7 = bitcast %"struct.WTF::KeyValuePair"* %4 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %7) #11
  store %"struct.WTF::KeyValuePair"* null, %"struct.WTF::KeyValuePair"** %3, align 8
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 0
  tail call void @_ZN5blink14ThreadDebuggerD2Ev(%"class.blink::ThreadDebugger"* %9) #11
  ret void
}

; Function Attrs: nounwind
declare void @_ZN5blink14ThreadDebuggerD2Ev(%"class.blink::ThreadDebugger"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZThn8_N5blink20WorkerThreadDebuggerD1Ev(%"class.blink::WorkerThreadDebugger"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 -1, i32 3, i32 0, i32 3
  %3 = bitcast i32* %2 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [35 x i8*], [4 x i8*] }, { [35 x i8*], [4 x i8*] }* @_ZTVN5blink20WorkerThreadDebuggerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [35 x i8*], [4 x i8*] }, { [35 x i8*], [4 x i8*] }* @_ZTVN5blink20WorkerThreadDebuggerE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %3, align 8
  %4 = getelementptr inbounds i32, i32* %2, i64 22
  %5 = bitcast i32* %4 to %"struct.WTF::KeyValuePair"**
  %6 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %5, align 8
  %7 = icmp eq %"struct.WTF::KeyValuePair"* %6, null
  br i1 %7, label %10, label %8, !prof !2

8:                                                ; preds = %1
  %9 = bitcast %"struct.WTF::KeyValuePair"* %6 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %9) #11
  store %"struct.WTF::KeyValuePair"* null, %"struct.WTF::KeyValuePair"** %5, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = bitcast i32* %2 to %"class.blink::ThreadDebugger"*
  tail call void @_ZN5blink14ThreadDebuggerD2Ev(%"class.blink::ThreadDebugger"* %11) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20WorkerThreadDebuggerD0Ev(%"class.blink::WorkerThreadDebugger"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.blink::WorkerThreadDebugger"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [35 x i8*], [4 x i8*] }, { [35 x i8*], [4 x i8*] }* @_ZTVN5blink20WorkerThreadDebuggerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [35 x i8*], [4 x i8*] }, { [35 x i8*], [4 x i8*] }* @_ZTVN5blink20WorkerThreadDebuggerE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %2, align 8
  %3 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 3, i32 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %3, align 8
  %5 = icmp eq %"struct.WTF::KeyValuePair"* %4, null
  br i1 %5, label %8, label %6, !prof !2

6:                                                ; preds = %1
  %7 = bitcast %"struct.WTF::KeyValuePair"* %4 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %7) #11
  store %"struct.WTF::KeyValuePair"* null, %"struct.WTF::KeyValuePair"** %3, align 8
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 0
  tail call void @_ZN5blink14ThreadDebuggerD2Ev(%"class.blink::ThreadDebugger"* %9) #11
  %10 = bitcast %"class.blink::WorkerThreadDebugger"* %0 to i8*
  tail call void @_ZdlPv(i8* %10) #12
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZThn8_N5blink20WorkerThreadDebuggerD0Ev(%"class.blink::WorkerThreadDebugger"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 -1, i32 3, i32 0, i32 3
  %3 = bitcast i32* %2 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [35 x i8*], [4 x i8*] }, { [35 x i8*], [4 x i8*] }* @_ZTVN5blink20WorkerThreadDebuggerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [35 x i8*], [4 x i8*] }, { [35 x i8*], [4 x i8*] }* @_ZTVN5blink20WorkerThreadDebuggerE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %3, align 8
  %4 = getelementptr inbounds i32, i32* %2, i64 22
  %5 = bitcast i32* %4 to %"struct.WTF::KeyValuePair"**
  %6 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %5, align 8
  %7 = icmp eq %"struct.WTF::KeyValuePair"* %6, null
  br i1 %7, label %10, label %8, !prof !2

8:                                                ; preds = %1
  %9 = bitcast %"struct.WTF::KeyValuePair"* %6 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %9) #11
  store %"struct.WTF::KeyValuePair"* null, %"struct.WTF::KeyValuePair"** %5, align 8
  br label %10

10:                                               ; preds = %1, %8
  %11 = bitcast i32* %2 to %"class.blink::ThreadDebugger"*
  tail call void @_ZN5blink14ThreadDebuggerD2Ev(%"class.blink::ThreadDebugger"* %11) #11
  %12 = bitcast i32* %2 to i8*
  tail call void @_ZdlPv(i8* %12) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20WorkerThreadDebugger20ReportConsoleMessageEPNS_16ExecutionContextENS_5mojom20ConsoleMessageSourceENS3_19ConsoleMessageLevelERKN3WTF6StringEPNS_14SourceLocationE(%"class.blink::WorkerThreadDebugger"* nocapture readnone, %"class.blink::ExecutionContext"*, i32, i32, %"class.WTF::String"* dereferenceable(8), %"class.blink::SourceLocation"*) unnamed_addr #0 align 2 {
  %7 = icmp eq %"class.blink::ExecutionContext"* %1, null
  br i1 %7, label %22, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds %"class.blink::ExecutionContext", %"class.blink::ExecutionContext"* %1, i64 -1, i32 22
  %10 = bitcast %"class.blink::DOMTimerCoordinator"* %9 to %"class.blink::WorkerOrWorkletGlobalScope"*
  %11 = bitcast %"class.blink::DOMTimerCoordinator"* %9 to %"class.blink::WorkerThread"* (%"class.blink::WorkerOrWorkletGlobalScope"*)***
  %12 = load %"class.blink::WorkerThread"* (%"class.blink::WorkerOrWorkletGlobalScope"*)**, %"class.blink::WorkerThread"* (%"class.blink::WorkerOrWorkletGlobalScope"*)*** %11, align 8
  %13 = getelementptr inbounds %"class.blink::WorkerThread"* (%"class.blink::WorkerOrWorkletGlobalScope"*)*, %"class.blink::WorkerThread"* (%"class.blink::WorkerOrWorkletGlobalScope"*)** %12, i64 34
  %14 = load %"class.blink::WorkerThread"* (%"class.blink::WorkerOrWorkletGlobalScope"*)*, %"class.blink::WorkerThread"* (%"class.blink::WorkerOrWorkletGlobalScope"*)** %13, align 8
  %15 = tail call %"class.blink::WorkerThread"* %14(%"class.blink::WorkerOrWorkletGlobalScope"* %10) #11
  %16 = getelementptr inbounds %"class.blink::WorkerThread", %"class.blink::WorkerThread"* %15, i64 0, i32 11
  %17 = load %"class.blink::WorkerReportingProxy"*, %"class.blink::WorkerReportingProxy"** %16, align 8
  %18 = bitcast %"class.blink::WorkerReportingProxy"* %17 to void (%"class.blink::WorkerReportingProxy"*, i32, i32, %"class.WTF::String"*, %"class.blink::SourceLocation"*)***
  %19 = load void (%"class.blink::WorkerReportingProxy"*, i32, i32, %"class.WTF::String"*, %"class.blink::SourceLocation"*)**, void (%"class.blink::WorkerReportingProxy"*, i32, i32, %"class.WTF::String"*, %"class.blink::SourceLocation"*)*** %18, align 8
  %20 = getelementptr inbounds void (%"class.blink::WorkerReportingProxy"*, i32, i32, %"class.WTF::String"*, %"class.blink::SourceLocation"*)*, void (%"class.blink::WorkerReportingProxy"*, i32, i32, %"class.WTF::String"*, %"class.blink::SourceLocation"*)** %19, i64 4
  %21 = load void (%"class.blink::WorkerReportingProxy"*, i32, i32, %"class.WTF::String"*, %"class.blink::SourceLocation"*)*, void (%"class.blink::WorkerReportingProxy"*, i32, i32, %"class.WTF::String"*, %"class.blink::SourceLocation"*)** %20, align 8
  tail call void %21(%"class.blink::WorkerReportingProxy"* %17, i32 %2, i32 %3, %"class.WTF::String"* dereferenceable(8) %4, %"class.blink::SourceLocation"* %5) #11
  br label %22

22:                                               ; preds = %6, %8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN5blink20WorkerThreadDebugger14ContextGroupIdEPNS_12WorkerThreadE(%"class.blink::WorkerThreadDebugger"* nocapture readnone, %"class.blink::WorkerThread"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.blink::WorkerThread", %"class.blink::WorkerThread"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20WorkerThreadDebugger19WorkerThreadCreatedEPNS_12WorkerThreadE(%"class.blink::WorkerThreadDebugger"*, %"class.blink::WorkerThread"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::WorkerThread"*, align 8
  %4 = alloca i32, align 4
  store %"class.blink::WorkerThread"* %1, %"class.blink::WorkerThread"** %3, align 8
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"class.blink::WorkerThread", %"class.blink::WorkerThread"* %1, i64 0, i32 2
  %7 = load i32, i32* %6, align 8
  store i32 %7, i32* %4, align 4
  %8 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 3, i32 0
  %9 = call { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableIiNS_12KeyValuePairIiPN5blink12WorkerThreadEEENS_24KeyValuePairKeyExtractorENS_7IntHashIiEENS_18HashMapValueTraitsINS_10HashTraitsIiEENSA_IS4_EEEESB_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISD_S8_SE_EERiRS4_EENS_18HashTableAddResultISF_S5_EEOT0_OT1_(%"class.WTF::HashTable"* %8, i32* nonnull dereferenceable(4) %4, %"class.blink::WorkerThread"** nonnull dereferenceable(8) %3) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20WorkerThreadDebugger21WorkerThreadDestroyedEPNS_12WorkerThreadE(%"class.blink::WorkerThreadDebugger"*, %"class.blink::WorkerThread"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #11
  %5 = getelementptr inbounds %"class.blink::WorkerThread", %"class.blink::WorkerThread"* %1, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  store i32 %6, i32* %3, align 4
  %7 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 3
  call void @_ZN3WTF7HashMapIiPN5blink12WorkerThreadENS_7IntHashIiEENS_10HashTraitsIiEENS6_IS3_EENS_18PartitionAllocatorEE5eraseERKi(%"class.WTF::HashMap"* %7, i32* nonnull dereferenceable(4) %3)
  %8 = load i32, i32* %3, align 4
  %9 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %8, %10
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  store i32 0, i32* %9, align 8
  br label %13

13:                                               ; preds = %12, %2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #11
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF7HashMapIiPN5blink12WorkerThreadENS_7IntHashIiEENS_10HashTraitsIiEENS6_IS3_EENS_18PartitionAllocatorEE5eraseERKi(%"class.WTF::HashMap"*, i32* dereferenceable(4)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %0, i64 0, i32 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %3, align 8
  %5 = icmp eq %"struct.WTF::KeyValuePair"* %4, null
  %6 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %0, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  br i1 %5, label %64, label %8

8:                                                ; preds = %2
  %9 = add i32 %7, -1
  %10 = zext i32 %9 to i64
  %11 = load i32, i32* %1, align 4
  %12 = shl i32 %11, 15
  %13 = xor i32 %12, -1
  %14 = add i32 %11, %13
  %15 = lshr i32 %14, 10
  %16 = xor i32 %15, %14
  %17 = mul i32 %16, 9
  %18 = lshr i32 %17, 6
  %19 = xor i32 %18, %17
  %20 = shl i32 %19, 11
  %21 = xor i32 %20, -1
  %22 = add i32 %19, %21
  %23 = lshr i32 %22, 16
  %24 = xor i32 %23, %22
  %25 = and i32 %24, %9
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %26
  %28 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %27, i64 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, %11
  br i1 %30, label %59, label %31

31:                                               ; preds = %8
  %32 = xor i32 %24, -1
  %33 = lshr i32 %22, 23
  %34 = add i32 %33, %32
  %35 = shl i32 %34, 12
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 7
  %38 = xor i32 %37, %36
  %39 = shl i32 %38, 2
  %40 = xor i32 %39, %38
  %41 = lshr i32 %40, 20
  %42 = xor i32 %41, %40
  %43 = or i32 %42, 1
  %44 = zext i32 %43 to i64
  br label %45

45:                                               ; preds = %50, %31
  %46 = phi i32 [ %29, %31 ], [ %57, %50 ]
  %47 = phi i64 [ %26, %31 ], [ %54, %50 ]
  %48 = phi i64 [ 0, %31 ], [ %52, %50 ]
  %49 = icmp eq i32 %46, 0
  br i1 %49, label %64, label %50

50:                                               ; preds = %45
  %51 = icmp eq i64 %48, 0
  %52 = select i1 %51, i64 %44, i64 %48
  %53 = add i64 %52, %47
  %54 = and i64 %53, %10
  %55 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %54
  %56 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %55, i64 0, i32 0
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %57, %11
  br i1 %58, label %59, label %45

59:                                               ; preds = %50, %8
  %60 = phi %"struct.WTF::KeyValuePair"* [ %27, %8 ], [ %55, %50 ]
  %61 = icmp eq %"struct.WTF::KeyValuePair"* %60, null
  br i1 %61, label %64, label %62

62:                                               ; preds = %59
  %63 = zext i32 %7 to i64
  br label %67

64:                                               ; preds = %45, %59, %2
  %65 = zext i32 %7 to i64
  %66 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %65
  br label %67

67:                                               ; preds = %62, %64
  %68 = phi i64 [ %63, %62 ], [ %65, %64 ]
  %69 = phi %"struct.WTF::KeyValuePair"* [ %60, %62 ], [ %66, %64 ]
  %70 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %0, i64 0, i32 0
  %71 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %68
  %72 = icmp eq %"struct.WTF::KeyValuePair"* %71, %69
  br i1 %72, label %96, label %73

73:                                               ; preds = %67
  %74 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %69, i64 0, i32 0
  store i32 -1, i32* %74, align 4
  %75 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %0, i64 0, i32 0, i32 3
  %76 = load i32, i32* %75, align 8
  %77 = add i32 %76, 1
  %78 = and i32 %77, 2147483647
  %79 = and i32 %76, -2147483648
  %80 = or i32 %78, %79
  store i32 %80, i32* %75, align 8
  %81 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %0, i64 0, i32 0, i32 2
  %82 = load i32, i32* %81, align 4
  %83 = add i32 %82, -1
  store i32 %83, i32* %81, align 4
  %84 = mul i32 %83, 6
  %85 = load i32, i32* %6, align 8
  %86 = icmp ult i32 %84, %85
  %87 = icmp ugt i32 %85, 8
  %88 = and i1 %86, %87
  br i1 %88, label %89, label %96

89:                                               ; preds = %73
  %90 = lshr i32 %85, 1
  %91 = zext i32 %90 to i64
  %92 = shl nuw nsw i64 %91, 4
  %93 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %92, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIiPN5blink12WorkerThreadEEEEEPKcv, i64 0, i64 0)) #11
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %93, i8 0, i64 %92, i1 false) #11
  %94 = bitcast i8* %93 to %"struct.WTF::KeyValuePair"*
  %95 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIiNS_12KeyValuePairIiPN5blink12WorkerThreadEEENS_24KeyValuePairKeyExtractorENS_7IntHashIiEENS_18HashMapValueTraitsINS_10HashTraitsIiEENSA_IS4_EEEESB_NS_18PartitionAllocatorEE8RehashToEPS5_jSG_(%"class.WTF::HashTable"* %70, %"struct.WTF::KeyValuePair"* %94, i32 %90, %"struct.WTF::KeyValuePair"* null) #11
  br label %96

96:                                               ; preds = %67, %73, %89
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20WorkerThreadDebugger14ContextCreatedEPNS_12WorkerThreadERKNS_4KURLEN2v85LocalINS6_7ContextEEE(%"class.blink::WorkerThreadDebugger"* nocapture readonly, %"class.blink::WorkerThread"*, %"class.blink::KURL"* nocapture readonly dereferenceable(112), %"class.v8::Context"*) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.WTF::String", align 8
  %6 = alloca %"class.v8_inspector::V8ContextInfo", align 8
  %7 = alloca %"class.v8_inspector::StringView", align 8
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = alloca %"class.v8_inspector::StringView", align 8
  %10 = alloca %"class.WTF::StringView", align 8
  %11 = getelementptr inbounds %"class.blink::WorkerThread", %"class.blink::WorkerThread"* %1, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 3, i32 0, i32 0
  %14 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %13, align 8
  %15 = icmp eq %"struct.WTF::KeyValuePair"* %14, null
  br i1 %15, label %242, label %16

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 3, i32 0, i32 1
  %18 = load i32, i32* %17, align 8
  %19 = add i32 %18, -1
  %20 = zext i32 %19 to i64
  %21 = shl i32 %12, 15
  %22 = xor i32 %21, -1
  %23 = add i32 %12, %22
  %24 = lshr i32 %23, 10
  %25 = xor i32 %24, %23
  %26 = mul i32 %25, 9
  %27 = lshr i32 %26, 6
  %28 = xor i32 %27, %26
  %29 = shl i32 %28, 11
  %30 = xor i32 %29, -1
  %31 = add i32 %28, %30
  %32 = lshr i32 %31, 16
  %33 = xor i32 %32, %31
  %34 = and i32 %19, %33
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %14, i64 %35
  %37 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 0, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, %12
  br i1 %39, label %68, label %40

40:                                               ; preds = %16
  %41 = xor i32 %33, -1
  %42 = lshr i32 %31, 23
  %43 = add i32 %42, %41
  %44 = shl i32 %43, 12
  %45 = xor i32 %44, %43
  %46 = lshr i32 %45, 7
  %47 = xor i32 %46, %45
  %48 = shl i32 %47, 2
  %49 = xor i32 %48, %47
  %50 = lshr i32 %49, 20
  %51 = xor i32 %50, %49
  %52 = or i32 %51, 1
  %53 = zext i32 %52 to i64
  br label %54

54:                                               ; preds = %59, %40
  %55 = phi i32 [ %38, %40 ], [ %66, %59 ]
  %56 = phi i64 [ %35, %40 ], [ %63, %59 ]
  %57 = phi i64 [ 0, %40 ], [ %61, %59 ]
  %58 = icmp eq i32 %55, 0
  br i1 %58, label %242, label %59

59:                                               ; preds = %54
  %60 = icmp eq i64 %57, 0
  %61 = select i1 %60, i64 %53, i64 %57
  %62 = add i64 %61, %56
  %63 = and i64 %62, %20
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %14, i64 %63
  %65 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %64, i64 0, i32 0
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, %12
  br i1 %67, label %68, label %54

68:                                               ; preds = %59, %16
  %69 = phi %"struct.WTF::KeyValuePair"* [ %36, %16 ], [ %64, %59 ]
  %70 = icmp eq %"struct.WTF::KeyValuePair"* %69, null
  br i1 %70, label %242, label %71

71:                                               ; preds = %68
  %72 = bitcast %"class.WTF::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %72) #11
  %73 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %73, align 8
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %5, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i64 0) #11
  %74 = call %"class.blink::WorkerOrWorkletGlobalScope"* @_ZN5blink12WorkerThread11GlobalScopeEv(%"class.blink::WorkerThread"* %1) #11
  %75 = icmp eq %"class.blink::WorkerOrWorkletGlobalScope"* %74, null
  br i1 %75, label %137, label %76

76:                                               ; preds = %71
  %77 = getelementptr inbounds %"class.blink::WorkerOrWorkletGlobalScope", %"class.blink::WorkerOrWorkletGlobalScope"* %74, i64 0, i32 1
  %78 = bitcast %"class.blink::ExecutionContext.base"* %77 to %"class.blink::ExecutionContext"*
  %79 = bitcast %"class.blink::ExecutionContext.base"* %77 to i1 (%"class.blink::ExecutionContext"*)***
  %80 = load i1 (%"class.blink::ExecutionContext"*)**, i1 (%"class.blink::ExecutionContext"*)*** %79, align 8
  %81 = getelementptr inbounds i1 (%"class.blink::ExecutionContext"*)*, i1 (%"class.blink::ExecutionContext"*)** %80, i64 6
  %82 = load i1 (%"class.blink::ExecutionContext"*)*, i1 (%"class.blink::ExecutionContext"*)** %81, align 8
  %83 = call zeroext i1 %82(%"class.blink::ExecutionContext"* %78) #11
  br i1 %83, label %84, label %137

84:                                               ; preds = %76
  %85 = bitcast %"class.blink::WorkerOrWorkletGlobalScope"* %74 to %"class.blink::DedicatedWorkerGlobalScope"*
  %86 = call %"class.WTF::StringImpl"* @_ZNK5blink26DedicatedWorkerGlobalScope4nameEv(%"class.blink::DedicatedWorkerGlobalScope"* nonnull %85) #11
  %87 = icmp eq %"class.WTF::StringImpl"* %86, null
  br i1 %87, label %105, label %88

88:                                               ; preds = %84
  %89 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %90 = load atomic i32, i32* %89 monotonic, align 4
  %91 = and i32 %90, 2
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %105

93:                                               ; preds = %88
  %94 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 0
  %95 = load i32, i32* %94, align 4
  %96 = zext i32 %95 to i33
  %97 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %96, i33 1) #11
  %98 = extractvalue { i33, i1 } %97, 1
  %99 = extractvalue { i33, i1 } %97, 0
  %100 = icmp slt i33 %99, 0
  %101 = or i1 %98, %100
  br i1 %101, label %102, label %103, !prof !3

102:                                              ; preds = %93
  call void @llvm.trap() #11
  unreachable

103:                                              ; preds = %93
  %104 = trunc i33 %99 to i32
  store i32 %104, i32* %94, align 4
  br label %105

105:                                              ; preds = %103, %88, %84
  %106 = ptrtoint %"class.WTF::StringImpl"* %86 to i64
  %107 = bitcast %"class.WTF::String"* %5 to i64*
  %108 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %73, align 8
  store i64 %106, i64* %107, align 8
  %109 = icmp eq %"class.WTF::StringImpl"* %108, null
  br i1 %109, label %123, label %110

110:                                              ; preds = %105
  %111 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %108, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %112 = load atomic i32, i32* %111 monotonic, align 4
  %113 = and i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %108, i64 0, i32 0
  %116 = load i32, i32* %115, align 4
  br i1 %114, label %117, label %119

117:                                              ; preds = %110
  %118 = add i32 %116, -1
  store i32 %118, i32* %115, align 4
  br label %119

119:                                              ; preds = %117, %110
  %120 = phi i32 [ %118, %117 ], [ %116, %110 ]
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %123

122:                                              ; preds = %119
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %108) #11
  br label %123

123:                                              ; preds = %105, %119, %122
  br i1 %87, label %137, label %124

124:                                              ; preds = %123
  %125 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %126 = load atomic i32, i32* %125 monotonic, align 4
  %127 = and i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 0
  %130 = load i32, i32* %129, align 4
  br i1 %128, label %131, label %133

131:                                              ; preds = %124
  %132 = add i32 %130, -1
  store i32 %132, i32* %129, align 4
  br label %133

133:                                              ; preds = %131, %124
  %134 = phi i32 [ %132, %131 ], [ %130, %124 ]
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %137

136:                                              ; preds = %133
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %86) #11
  br label %137

137:                                              ; preds = %76, %71, %136, %133, %123
  %138 = bitcast %"class.v8_inspector::V8ContextInfo"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %138) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %138, i8 -86, i64 96, i1 false)
  %139 = bitcast %"class.WTF::StringView"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %139) #11
  %140 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %73, align 8
  %141 = icmp eq %"class.WTF::StringImpl"* %140, null
  br i1 %141, label %142, label %146

142:                                              ; preds = %137
  %143 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  store i8* null, i8** %143, align 8
  %144 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %145 = bitcast %"class.WTF::StringView"* %8 to i64*
  store i64 %144, i64* %145, align 8
  br label %153

146:                                              ; preds = %137
  %147 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 0
  store %"class.WTF::StringImpl"* %140, %"class.WTF::StringImpl"** %147, align 8
  %148 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %140, i64 0, i32 1
  %149 = load i32, i32* %148, align 4
  %150 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %140, i64 1
  %151 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  %152 = bitcast i8** %151 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %150, %"class.WTF::StringImpl"** %152, align 8
  br label %153

153:                                              ; preds = %142, %146
  %154 = phi i32 [ %149, %146 ], [ 0, %142 ]
  %155 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  store i32 %154, i32* %155, align 8
  call void @_ZN5blink23ToV8InspectorStringViewERKN3WTF10StringViewE(%"class.v8_inspector::StringView"* nonnull sret %7, %"class.WTF::StringView"* nonnull dereferenceable(24) %8) #11
  %156 = getelementptr inbounds %"class.v8_inspector::StringView", %"class.v8_inspector::StringView"* %7, i64 0, i32 0
  %157 = getelementptr inbounds %"class.v8_inspector::V8ContextInfo", %"class.v8_inspector::V8ContextInfo"* %6, i64 0, i32 0, i32 0
  store %"class.v8::Context"* %3, %"class.v8::Context"** %157, align 8
  %158 = getelementptr inbounds %"class.v8_inspector::V8ContextInfo", %"class.v8_inspector::V8ContextInfo"* %6, i64 0, i32 1
  store i32 %12, i32* %158, align 8
  %159 = getelementptr inbounds %"class.v8_inspector::V8ContextInfo", %"class.v8_inspector::V8ContextInfo"* %6, i64 0, i32 3, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %159, i8* nonnull align 8 %156, i64 24, i1 false)
  %160 = getelementptr inbounds %"class.v8_inspector::V8ContextInfo", %"class.v8_inspector::V8ContextInfo"* %6, i64 0, i32 4, i32 0
  store i8 1, i8* %160, align 8
  %161 = getelementptr inbounds %"class.v8_inspector::V8ContextInfo", %"class.v8_inspector::V8ContextInfo"* %6, i64 0, i32 4, i32 1
  %162 = bitcast i64* %161 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %162, i8 0, i64 16, i1 false) #11
  %163 = getelementptr inbounds %"class.v8_inspector::V8ContextInfo", %"class.v8_inspector::V8ContextInfo"* %6, i64 0, i32 5, i32 0
  store i8 1, i8* %163, align 8
  %164 = getelementptr inbounds %"class.v8_inspector::V8ContextInfo", %"class.v8_inspector::V8ContextInfo"* %6, i64 0, i32 5, i32 1
  %165 = bitcast i64* %164 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %165, i8 0, i64 17, i1 false) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %139) #11
  %166 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %2, i64 0, i32 4, i32 0, i32 0
  %167 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %166, align 8
  %168 = icmp eq %"class.WTF::StringImpl"* %167, null
  br i1 %168, label %186, label %169

169:                                              ; preds = %153
  %170 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %167, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %171 = load atomic i32, i32* %170 monotonic, align 4
  %172 = and i32 %171, 2
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %174, label %192

174:                                              ; preds = %169
  %175 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %167, i64 0, i32 0
  %176 = load i32, i32* %175, align 4
  %177 = zext i32 %176 to i33
  %178 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %177, i33 1) #11
  %179 = extractvalue { i33, i1 } %178, 1
  %180 = extractvalue { i33, i1 } %178, 0
  %181 = icmp slt i33 %180, 0
  %182 = or i1 %179, %181
  br i1 %182, label %183, label %184, !prof !3

183:                                              ; preds = %174
  call void @llvm.trap() #11
  unreachable

184:                                              ; preds = %174
  %185 = trunc i33 %180 to i32
  store i32 %185, i32* %175, align 4
  br label %192

186:                                              ; preds = %153
  %187 = getelementptr inbounds %"class.v8_inspector::StringView", %"class.v8_inspector::StringView"* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %187) #11
  %188 = bitcast %"class.WTF::StringView"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %188) #11
  %189 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  store i8* null, i8** %189, align 8
  %190 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %191 = bitcast %"class.WTF::StringView"* %10 to i64*
  store i64 %190, i64* %191, align 8
  br label %201

192:                                              ; preds = %169, %184
  %193 = getelementptr inbounds %"class.v8_inspector::StringView", %"class.v8_inspector::StringView"* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %193) #11
  %194 = bitcast %"class.WTF::StringView"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %194) #11
  %195 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 0
  store %"class.WTF::StringImpl"* %167, %"class.WTF::StringImpl"** %195, align 8
  %196 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %167, i64 0, i32 1
  %197 = load i32, i32* %196, align 4
  %198 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %167, i64 1
  %199 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  %200 = bitcast i8** %199 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %198, %"class.WTF::StringImpl"** %200, align 8
  br label %201

201:                                              ; preds = %186, %192
  %202 = phi i8* [ %194, %192 ], [ %188, %186 ]
  %203 = phi i8* [ %193, %192 ], [ %187, %186 ]
  %204 = phi i32 [ %197, %192 ], [ 0, %186 ]
  %205 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 2
  store i32 %204, i32* %205, align 8
  call void @_ZN5blink23ToV8InspectorStringViewERKN3WTF10StringViewE(%"class.v8_inspector::StringView"* nonnull sret %9, %"class.WTF::StringView"* nonnull dereferenceable(24) %10) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %160, i8* align 8 %203, i64 24, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %202) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %203) #11
  %206 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0
  %207 = load %"class.v8_inspector::V8Inspector"*, %"class.v8_inspector::V8Inspector"** %206, align 8
  %208 = bitcast %"class.v8_inspector::V8Inspector"* %207 to void (%"class.v8_inspector::V8Inspector"*, %"class.v8_inspector::V8ContextInfo"*)***
  %209 = load void (%"class.v8_inspector::V8Inspector"*, %"class.v8_inspector::V8ContextInfo"*)**, void (%"class.v8_inspector::V8Inspector"*, %"class.v8_inspector::V8ContextInfo"*)*** %208, align 8
  %210 = getelementptr inbounds void (%"class.v8_inspector::V8Inspector"*, %"class.v8_inspector::V8ContextInfo"*)*, void (%"class.v8_inspector::V8Inspector"*, %"class.v8_inspector::V8ContextInfo"*)** %209, i64 2
  %211 = load void (%"class.v8_inspector::V8Inspector"*, %"class.v8_inspector::V8ContextInfo"*)*, void (%"class.v8_inspector::V8Inspector"*, %"class.v8_inspector::V8ContextInfo"*)** %210, align 8
  call void %211(%"class.v8_inspector::V8Inspector"* %207, %"class.v8_inspector::V8ContextInfo"* nonnull dereferenceable(96) %6) #11
  br i1 %168, label %225, label %212

212:                                              ; preds = %201
  %213 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %167, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %214 = load atomic i32, i32* %213 monotonic, align 4
  %215 = and i32 %214, 2
  %216 = icmp eq i32 %215, 0
  %217 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %167, i64 0, i32 0
  %218 = load i32, i32* %217, align 4
  br i1 %216, label %219, label %221

219:                                              ; preds = %212
  %220 = add i32 %218, -1
  store i32 %220, i32* %217, align 4
  br label %221

221:                                              ; preds = %219, %212
  %222 = phi i32 [ %220, %219 ], [ %218, %212 ]
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %224, label %225

224:                                              ; preds = %221
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %167) #11
  br label %225

225:                                              ; preds = %201, %221, %224
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %138) #11
  %226 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %73, align 8
  %227 = icmp eq %"class.WTF::StringImpl"* %226, null
  br i1 %227, label %241, label %228

228:                                              ; preds = %225
  %229 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %226, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %230 = load atomic i32, i32* %229 monotonic, align 4
  %231 = and i32 %230, 2
  %232 = icmp eq i32 %231, 0
  %233 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %226, i64 0, i32 0
  %234 = load i32, i32* %233, align 4
  br i1 %232, label %235, label %237

235:                                              ; preds = %228
  %236 = add i32 %234, -1
  store i32 %236, i32* %233, align 4
  br label %237

237:                                              ; preds = %235, %228
  %238 = phi i32 [ %236, %235 ], [ %234, %228 ]
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %240, label %241

240:                                              ; preds = %237
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %226) #11
  br label %241

241:                                              ; preds = %225, %237, %240
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %72) #11
  br label %242

242:                                              ; preds = %54, %68, %4, %241
  ret void
}

declare %"class.blink::WorkerOrWorkletGlobalScope"* @_ZN5blink12WorkerThread11GlobalScopeEv(%"class.blink::WorkerThread"*) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZNK5blink26DedicatedWorkerGlobalScope4nameEv(%"class.blink::DedicatedWorkerGlobalScope"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN5blink23ToV8InspectorStringViewERKN3WTF10StringViewE(%"class.v8_inspector::StringView"* sret, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20WorkerThreadDebugger22ContextWillBeDestroyedEPNS_12WorkerThreadEN2v85LocalINS3_7ContextEEE(%"class.blink::WorkerThreadDebugger"* nocapture readonly, %"class.blink::WorkerThread"* nocapture readnone, %"class.v8::Context"*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0
  %5 = load %"class.v8_inspector::V8Inspector"*, %"class.v8_inspector::V8Inspector"** %4, align 8
  %6 = bitcast %"class.v8_inspector::V8Inspector"* %5 to void (%"class.v8_inspector::V8Inspector"*, %"class.v8::Context"*)***
  %7 = load void (%"class.v8_inspector::V8Inspector"*, %"class.v8::Context"*)**, void (%"class.v8_inspector::V8Inspector"*, %"class.v8::Context"*)*** %6, align 8
  %8 = getelementptr inbounds void (%"class.v8_inspector::V8Inspector"*, %"class.v8::Context"*)*, void (%"class.v8_inspector::V8Inspector"*, %"class.v8::Context"*)** %7, i64 3
  %9 = load void (%"class.v8_inspector::V8Inspector"*, %"class.v8::Context"*)*, void (%"class.v8_inspector::V8Inspector"*, %"class.v8::Context"*)** %8, align 8
  tail call void %9(%"class.v8_inspector::V8Inspector"* %5, %"class.v8::Context"* %2) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20WorkerThreadDebugger15ExceptionThrownEPNS_12WorkerThreadEPNS_10ErrorEventE(%"class.blink::WorkerThreadDebugger"* nocapture readonly, %"class.blink::WorkerThread"*, %"class.blink::ErrorEvent"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::String", align 8
  %5 = alloca %"class.blink::ScriptState::Scope", align 8
  %6 = alloca %"class.blink::ScriptValue", align 8
  %7 = alloca %"class.v8_inspector::StringView", align 8
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = alloca %"class.v8_inspector::StringView", align 8
  %10 = alloca %"class.WTF::StringView", align 8
  %11 = alloca %"class.v8_inspector::StringView", align 8
  %12 = alloca %"class.WTF::StringView", align 8
  %13 = getelementptr inbounds %"class.blink::WorkerThread", %"class.blink::WorkerThread"* %1, i64 0, i32 11
  %14 = load %"class.blink::WorkerReportingProxy"*, %"class.blink::WorkerReportingProxy"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ErrorEvent", %"class.blink::ErrorEvent"* %2, i64 0, i32 1
  %16 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %15, i64 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = icmp eq %"class.WTF::StringImpl"* %17, null
  br i1 %18, label %23, label %19

19:                                               ; preds = %3
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %25

23:                                               ; preds = %19, %3
  %24 = getelementptr inbounds %"class.blink::ErrorEvent", %"class.blink::ErrorEvent"* %2, i64 0, i32 2
  br label %25

25:                                               ; preds = %19, %23
  %26 = phi %"class.WTF::String"* [ %24, %23 ], [ %15, %19 ]
  %27 = getelementptr inbounds %"class.blink::ErrorEvent", %"class.blink::ErrorEvent"* %2, i64 0, i32 3, i32 0, i32 0, i32 0
  %28 = load %"class.blink::SourceLocation"*, %"class.blink::SourceLocation"** %27, align 8
  %29 = bitcast %"class.blink::WorkerReportingProxy"* %14 to void (%"class.blink::WorkerReportingProxy"*, i32, i32, %"class.WTF::String"*, %"class.blink::SourceLocation"*)***
  %30 = load void (%"class.blink::WorkerReportingProxy"*, i32, i32, %"class.WTF::String"*, %"class.blink::SourceLocation"*)**, void (%"class.blink::WorkerReportingProxy"*, i32, i32, %"class.WTF::String"*, %"class.blink::SourceLocation"*)*** %29, align 8
  %31 = getelementptr inbounds void (%"class.blink::WorkerReportingProxy"*, i32, i32, %"class.WTF::String"*, %"class.blink::SourceLocation"*)*, void (%"class.blink::WorkerReportingProxy"*, i32, i32, %"class.WTF::String"*, %"class.blink::SourceLocation"*)** %30, i64 4
  %32 = load void (%"class.blink::WorkerReportingProxy"*, i32, i32, %"class.WTF::String"*, %"class.blink::SourceLocation"*)*, void (%"class.blink::WorkerReportingProxy"*, i32, i32, %"class.WTF::String"*, %"class.blink::SourceLocation"*)** %31, align 8
  tail call void %32(%"class.blink::WorkerReportingProxy"* %14, i32 1, i32 3, %"class.WTF::String"* dereferenceable(8) %26, %"class.blink::SourceLocation"* %28) #11
  %33 = bitcast %"class.WTF::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #11
  %34 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %34, align 8
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 8) #11
  %35 = call %"class.blink::WorkerOrWorkletGlobalScope"* @_ZN5blink12WorkerThread11GlobalScopeEv(%"class.blink::WorkerThread"* %1) #11
  %36 = getelementptr inbounds %"class.blink::WorkerOrWorkletGlobalScope", %"class.blink::WorkerOrWorkletGlobalScope"* %35, i64 0, i32 11, i32 0, i32 0
  %37 = load %"class.blink::WorkerOrWorkletScriptController"*, %"class.blink::WorkerOrWorkletScriptController"** %36, align 8
  %38 = getelementptr inbounds %"class.blink::WorkerOrWorkletScriptController", %"class.blink::WorkerOrWorkletScriptController"* %37, i64 0, i32 3, i32 0, i32 0
  %39 = load %"class.blink::ScriptState"*, %"class.blink::ScriptState"** %38, align 8
  %40 = icmp eq %"class.blink::ScriptState"* %39, null
  br i1 %40, label %247, label %41

41:                                               ; preds = %25
  %42 = getelementptr inbounds %"class.blink::ScriptState", %"class.blink::ScriptState"* %39, i64 0, i32 1, i32 0, i32 0, i32 0
  %43 = load %"class.v8::Context"*, %"class.v8::Context"** %42, align 8
  %44 = icmp eq %"class.v8::Context"* %43, null
  br i1 %44, label %247, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.blink::ScriptState", %"class.blink::ScriptState"* %39, i64 0, i32 3, i32 0, i32 0
  %47 = load %"class.blink::V8PerContextData"*, %"class.blink::V8PerContextData"** %46, align 8
  %48 = icmp eq %"class.blink::V8PerContextData"* %47, null
  br i1 %48, label %247, label %49

49:                                               ; preds = %45
  %50 = bitcast %"class.blink::ScriptState::Scope"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %50) #11
  %51 = getelementptr inbounds %"class.blink::ScriptState::Scope", %"class.blink::ScriptState::Scope"* %5, i64 0, i32 1, i32 0
  %52 = getelementptr inbounds %"class.blink::ScriptState::Scope", %"class.blink::ScriptState::Scope"* %5, i64 0, i32 0
  %53 = getelementptr inbounds %"class.blink::ScriptState", %"class.blink::ScriptState"* %39, i64 0, i32 0
  %54 = bitcast %"class.blink::ScriptState::Scope"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %54, i8 -86, i64 32, i1 false)
  %55 = load %"class.v8::Isolate"*, %"class.v8::Isolate"** %53, align 8
  call void @_ZN2v811HandleScopeC1EPNS_7IsolateE(%"class.v8::HandleScope"* nonnull %52, %"class.v8::Isolate"* %55) #11
  %56 = load %"class.v8::Context"*, %"class.v8::Context"** %42, align 8
  %57 = icmp eq %"class.v8::Context"* %56, null
  br i1 %57, label %65, label %58

58:                                               ; preds = %49
  %59 = bitcast %"class.blink::ScriptState"* %39 to %"class.v8::internal::Isolate"**
  %60 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %59, align 8
  %61 = bitcast %"class.v8::Context"* %56 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = call i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"* %60, i64 %62) #11
  %64 = bitcast i64* %63 to %"class.v8::Context"*
  br label %65

65:                                               ; preds = %49, %58
  %66 = phi %"class.v8::Context"* [ %64, %58 ], [ null, %49 ]
  store %"class.v8::Context"* %66, %"class.v8::Context"** %51, align 8
  call void @_ZN2v87Context5EnterEv(%"class.v8::Context"* %66) #11
  %67 = bitcast %"class.blink::ScriptValue"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %67) #11
  %68 = getelementptr inbounds %"class.blink::ScriptValue", %"class.blink::ScriptValue"* %6, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = getelementptr inbounds %"class.blink::ScriptValue", %"class.blink::ScriptValue"* %6, i64 0, i32 1, i32 1, i32 0
  %70 = bitcast %"class.blink::ScriptValue"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %70, i8 -86, i64 24, i1 false)
  call void @_ZNK5blink10ErrorEvent5errorEPNS_11ScriptStateE(%"class.blink::ScriptValue"* nonnull sret %6, %"class.blink::ErrorEvent"* %2, %"class.blink::ScriptState"* nonnull %39) #11
  %71 = load i64*, i64** %68, align 8
  %72 = icmp eq i64* %71, null
  br i1 %72, label %73, label %78

73:                                               ; preds = %65
  %74 = bitcast %"class.blink::ScriptState"* %39 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, 176
  %77 = inttoptr i64 %76 to %"class.v8::Value"*
  br label %80

78:                                               ; preds = %65
  %79 = call %"class.v8::Value"* @_ZNK5blink11ScriptValue7V8ValueEv(%"class.blink::ScriptValue"* nonnull %6) #11
  br label %80

80:                                               ; preds = %78, %73
  %81 = phi %"class.v8::Value"* [ %77, %73 ], [ %79, %78 ]
  %82 = load %"class.blink::SourceLocation"*, %"class.blink::SourceLocation"** %27, align 8
  %83 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %84 = icmp eq %"class.WTF::StringImpl"* %83, null
  br i1 %84, label %89, label %85

85:                                               ; preds = %80
  %86 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %83, i64 0, i32 1
  %87 = load i32, i32* %86, align 4
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %93

89:                                               ; preds = %80, %85
  %90 = getelementptr inbounds %"class.blink::ErrorEvent", %"class.blink::ErrorEvent"* %2, i64 0, i32 2, i32 0, i32 0
  %91 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %90, align 8
  %92 = icmp eq %"class.WTF::StringImpl"* %91, null
  br i1 %92, label %111, label %93

93:                                               ; preds = %85, %89
  %94 = phi %"class.WTF::StringImpl"* [ %91, %89 ], [ %83, %85 ]
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %94, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %96 = load atomic i32, i32* %95 monotonic, align 4
  %97 = and i32 %96, 2
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %111

99:                                               ; preds = %93
  %100 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %94, i64 0, i32 0
  %101 = load i32, i32* %100, align 4
  %102 = zext i32 %101 to i33
  %103 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %102, i33 1) #11
  %104 = extractvalue { i33, i1 } %103, 1
  %105 = extractvalue { i33, i1 } %103, 0
  %106 = icmp slt i33 %105, 0
  %107 = or i1 %104, %106
  br i1 %107, label %108, label %109, !prof !3

108:                                              ; preds = %99
  call void @llvm.trap() #11
  unreachable

109:                                              ; preds = %99
  %110 = trunc i33 %105 to i32
  store i32 %110, i32* %100, align 4
  br label %111

111:                                              ; preds = %89, %93, %109
  %112 = phi i1 [ true, %89 ], [ false, %93 ], [ false, %109 ]
  %113 = phi %"class.WTF::StringImpl"* [ null, %89 ], [ %94, %93 ], [ %94, %109 ]
  %114 = getelementptr inbounds %"class.blink::SourceLocation", %"class.blink::SourceLocation"* %82, i64 0, i32 0, i32 0, i32 0
  %115 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %114, align 8
  %116 = icmp eq %"class.WTF::StringImpl"* %115, null
  br i1 %116, label %134, label %117

117:                                              ; preds = %111
  %118 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %115, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %119 = load atomic i32, i32* %118 monotonic, align 4
  %120 = and i32 %119, 2
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %134

122:                                              ; preds = %117
  %123 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %115, i64 0, i32 0
  %124 = load i32, i32* %123, align 4
  %125 = zext i32 %124 to i33
  %126 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %125, i33 1) #11
  %127 = extractvalue { i33, i1 } %126, 1
  %128 = extractvalue { i33, i1 } %126, 0
  %129 = icmp slt i33 %128, 0
  %130 = or i1 %127, %129
  br i1 %130, label %131, label %132, !prof !3

131:                                              ; preds = %122
  call void @llvm.trap() #11
  unreachable

132:                                              ; preds = %122
  %133 = trunc i33 %128 to i32
  store i32 %133, i32* %123, align 4
  br label %134

134:                                              ; preds = %111, %117, %132
  %135 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0
  %136 = load %"class.v8_inspector::V8Inspector"*, %"class.v8_inspector::V8Inspector"** %135, align 8
  %137 = load %"class.v8::Context"*, %"class.v8::Context"** %42, align 8
  %138 = icmp eq %"class.v8::Context"* %137, null
  br i1 %138, label %146, label %139

139:                                              ; preds = %134
  %140 = bitcast %"class.blink::ScriptState"* %39 to %"class.v8::internal::Isolate"**
  %141 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %140, align 8
  %142 = bitcast %"class.v8::Context"* %137 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = call i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"* %141, i64 %143) #11
  %145 = bitcast i64* %144 to %"class.v8::Context"*
  br label %146

146:                                              ; preds = %134, %139
  %147 = phi %"class.v8::Context"* [ %145, %139 ], [ null, %134 ]
  %148 = bitcast %"class.WTF::StringView"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %148) #11
  %149 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %150 = icmp eq %"class.WTF::StringImpl"* %149, null
  br i1 %150, label %151, label %155

151:                                              ; preds = %146
  %152 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  store i8* null, i8** %152, align 8
  %153 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %154 = bitcast %"class.WTF::StringView"* %8 to i64*
  store i64 %153, i64* %154, align 8
  br label %162

155:                                              ; preds = %146
  %156 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 0
  store %"class.WTF::StringImpl"* %149, %"class.WTF::StringImpl"** %156, align 8
  %157 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %149, i64 0, i32 1
  %158 = load i32, i32* %157, align 4
  %159 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %149, i64 1
  %160 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  %161 = bitcast i8** %160 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %159, %"class.WTF::StringImpl"** %161, align 8
  br label %162

162:                                              ; preds = %151, %155
  %163 = phi i32 [ %158, %155 ], [ 0, %151 ]
  %164 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  store i32 %163, i32* %164, align 8
  call void @_ZN5blink23ToV8InspectorStringViewERKN3WTF10StringViewE(%"class.v8_inspector::StringView"* nonnull sret %7, %"class.WTF::StringView"* nonnull dereferenceable(24) %8) #11
  %165 = bitcast %"class.WTF::StringView"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %165) #11
  br i1 %112, label %166, label %170

166:                                              ; preds = %162
  %167 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  store i8* null, i8** %167, align 8
  %168 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %169 = bitcast %"class.WTF::StringView"* %10 to i64*
  store i64 %168, i64* %169, align 8
  br label %177

170:                                              ; preds = %162
  %171 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 0
  store %"class.WTF::StringImpl"* %113, %"class.WTF::StringImpl"** %171, align 8
  %172 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %113, i64 0, i32 1
  %173 = load i32, i32* %172, align 4
  %174 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %113, i64 1
  %175 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  %176 = bitcast i8** %175 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %174, %"class.WTF::StringImpl"** %176, align 8
  br label %177

177:                                              ; preds = %166, %170
  %178 = phi i32 [ %173, %170 ], [ 0, %166 ]
  %179 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 2
  store i32 %178, i32* %179, align 8
  call void @_ZN5blink23ToV8InspectorStringViewERKN3WTF10StringViewE(%"class.v8_inspector::StringView"* nonnull sret %9, %"class.WTF::StringView"* nonnull dereferenceable(24) %10) #11
  %180 = bitcast %"class.WTF::StringView"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %180) #11
  br i1 %116, label %181, label %185

181:                                              ; preds = %177
  %182 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 1
  store i8* null, i8** %182, align 8
  %183 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %184 = bitcast %"class.WTF::StringView"* %12 to i64*
  store i64 %183, i64* %184, align 8
  br label %192

185:                                              ; preds = %177
  %186 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 0
  store %"class.WTF::StringImpl"* %115, %"class.WTF::StringImpl"** %186, align 8
  %187 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %115, i64 0, i32 1
  %188 = load i32, i32* %187, align 4
  %189 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %115, i64 1
  %190 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 1
  %191 = bitcast i8** %190 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %189, %"class.WTF::StringImpl"** %191, align 8
  br label %192

192:                                              ; preds = %181, %185
  %193 = phi i32 [ %188, %185 ], [ 0, %181 ]
  %194 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 2
  store i32 %193, i32* %194, align 8
  call void @_ZN5blink23ToV8InspectorStringViewERKN3WTF10StringViewE(%"class.v8_inspector::StringView"* nonnull sret %11, %"class.WTF::StringView"* nonnull dereferenceable(24) %12) #11
  %195 = getelementptr inbounds %"class.blink::SourceLocation", %"class.blink::SourceLocation"* %82, i64 0, i32 1
  %196 = load i32, i32* %195, align 8
  %197 = getelementptr inbounds %"class.blink::SourceLocation", %"class.blink::SourceLocation"* %82, i64 0, i32 2
  %198 = load i32, i32* %197, align 4
  %199 = getelementptr inbounds %"class.blink::SourceLocation", %"class.blink::SourceLocation"* %82, i64 0, i32 3, i32 0, i32 0, i32 0
  %200 = load %"class.v8_inspector::V8StackTrace"*, %"class.v8_inspector::V8StackTrace"** %199, align 8
  store %"class.v8_inspector::V8StackTrace"* null, %"class.v8_inspector::V8StackTrace"** %199, align 8
  %201 = getelementptr inbounds %"class.blink::SourceLocation", %"class.blink::SourceLocation"* %82, i64 0, i32 4
  %202 = load i32, i32* %201, align 8
  %203 = bitcast %"class.v8_inspector::V8Inspector"* %136 to i32 (%"class.v8_inspector::V8Inspector"*, %"class.v8::Context"*, %"class.v8_inspector::StringView"*, %"class.v8::Value"*, %"class.v8_inspector::StringView"*, %"class.v8_inspector::StringView"*, i32, i32, %"class.v8_inspector::V8StackTrace"*, i32)***
  %204 = load i32 (%"class.v8_inspector::V8Inspector"*, %"class.v8::Context"*, %"class.v8_inspector::StringView"*, %"class.v8::Value"*, %"class.v8_inspector::StringView"*, %"class.v8_inspector::StringView"*, i32, i32, %"class.v8_inspector::V8StackTrace"*, i32)**, i32 (%"class.v8_inspector::V8Inspector"*, %"class.v8::Context"*, %"class.v8_inspector::StringView"*, %"class.v8::Value"*, %"class.v8_inspector::StringView"*, %"class.v8_inspector::StringView"*, i32, i32, %"class.v8_inspector::V8StackTrace"*, i32)*** %203, align 8
  %205 = getelementptr inbounds i32 (%"class.v8_inspector::V8Inspector"*, %"class.v8::Context"*, %"class.v8_inspector::StringView"*, %"class.v8::Value"*, %"class.v8_inspector::StringView"*, %"class.v8_inspector::StringView"*, i32, i32, %"class.v8_inspector::V8StackTrace"*, i32)*, i32 (%"class.v8_inspector::V8Inspector"*, %"class.v8::Context"*, %"class.v8_inspector::StringView"*, %"class.v8::Value"*, %"class.v8_inspector::StringView"*, %"class.v8_inspector::StringView"*, i32, i32, %"class.v8_inspector::V8StackTrace"*, i32)** %204, i64 16
  %206 = load i32 (%"class.v8_inspector::V8Inspector"*, %"class.v8::Context"*, %"class.v8_inspector::StringView"*, %"class.v8::Value"*, %"class.v8_inspector::StringView"*, %"class.v8_inspector::StringView"*, i32, i32, %"class.v8_inspector::V8StackTrace"*, i32)*, i32 (%"class.v8_inspector::V8Inspector"*, %"class.v8::Context"*, %"class.v8_inspector::StringView"*, %"class.v8::Value"*, %"class.v8_inspector::StringView"*, %"class.v8_inspector::StringView"*, i32, i32, %"class.v8_inspector::V8StackTrace"*, i32)** %205, align 8
  %207 = call i32 %206(%"class.v8_inspector::V8Inspector"* %136, %"class.v8::Context"* %147, %"class.v8_inspector::StringView"* nonnull byval(%"class.v8_inspector::StringView") align 8 %7, %"class.v8::Value"* %81, %"class.v8_inspector::StringView"* nonnull byval(%"class.v8_inspector::StringView") align 8 %9, %"class.v8_inspector::StringView"* nonnull byval(%"class.v8_inspector::StringView") align 8 %11, i32 %196, i32 %198, %"class.v8_inspector::V8StackTrace"* %200, i32 %202) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %180) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %165) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %148) #11
  br i1 %116, label %221, label %208

208:                                              ; preds = %192
  %209 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %115, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %210 = load atomic i32, i32* %209 monotonic, align 4
  %211 = and i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %115, i64 0, i32 0
  %214 = load i32, i32* %213, align 4
  br i1 %212, label %215, label %217

215:                                              ; preds = %208
  %216 = add i32 %214, -1
  store i32 %216, i32* %213, align 4
  br label %217

217:                                              ; preds = %215, %208
  %218 = phi i32 [ %216, %215 ], [ %214, %208 ]
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %220, label %221

220:                                              ; preds = %217
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %115) #11
  br label %221

221:                                              ; preds = %192, %217, %220
  br i1 %112, label %235, label %222

222:                                              ; preds = %221
  %223 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %113, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %224 = load atomic i32, i32* %223 monotonic, align 4
  %225 = and i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %113, i64 0, i32 0
  %228 = load i32, i32* %227, align 4
  br i1 %226, label %229, label %231

229:                                              ; preds = %222
  %230 = add i32 %228, -1
  store i32 %230, i32* %227, align 4
  br label %231

231:                                              ; preds = %229, %222
  %232 = phi i32 [ %230, %229 ], [ %228, %222 ]
  %233 = icmp eq i32 %232, 0
  br i1 %233, label %234, label %235

234:                                              ; preds = %231
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %113) #11
  br label %235

235:                                              ; preds = %221, %231, %234
  %236 = load %"class.blink::DOMWrapperWorld"*, %"class.blink::DOMWrapperWorld"** %69, align 8
  %237 = icmp eq %"class.blink::DOMWrapperWorld"* %236, null
  br i1 %237, label %245, label %238

238:                                              ; preds = %235
  %239 = getelementptr inbounds %"class.blink::DOMWrapperWorld", %"class.blink::DOMWrapperWorld"* %236, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %239) #11
  %240 = getelementptr inbounds %"class.blink::DOMWrapperWorld", %"class.blink::DOMWrapperWorld"* %236, i64 0, i32 0, i32 0, i32 0, i32 0
  %241 = load i32, i32* %240, align 4
  %242 = icmp eq i32 %241, 0
  br i1 %242, label %243, label %245

243:                                              ; preds = %238
  call void @_ZN5blink15DOMWrapperWorldD1Ev(%"class.blink::DOMWrapperWorld"* nonnull %236) #11
  %244 = bitcast %"class.blink::DOMWrapperWorld"* %236 to i8*
  call void @free(i8* %244) #11
  br label %245

245:                                              ; preds = %235, %238, %243
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %67) #11
  %246 = load %"class.v8::Context"*, %"class.v8::Context"** %51, align 8
  call void @_ZN2v87Context4ExitEv(%"class.v8::Context"* %246) #11
  call void @_ZN2v811HandleScopeD1Ev(%"class.v8::HandleScope"* nonnull %52) #11
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %50) #11
  br label %247

247:                                              ; preds = %45, %41, %25, %245
  %248 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %249 = icmp eq %"class.WTF::StringImpl"* %248, null
  br i1 %249, label %263, label %250

250:                                              ; preds = %247
  %251 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %248, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %252 = load atomic i32, i32* %251 monotonic, align 4
  %253 = and i32 %252, 2
  %254 = icmp eq i32 %253, 0
  %255 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %248, i64 0, i32 0
  %256 = load i32, i32* %255, align 4
  br i1 %254, label %257, label %259

257:                                              ; preds = %250
  %258 = add i32 %256, -1
  store i32 %258, i32* %255, align 4
  br label %259

259:                                              ; preds = %257, %250
  %260 = phi i32 [ %258, %257 ], [ %256, %250 ]
  %261 = icmp eq i32 %260, 0
  br i1 %261, label %262, label %263

262:                                              ; preds = %259
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %248) #11
  br label %263

263:                                              ; preds = %247, %259, %262
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #11
  ret void
}

declare void @_ZNK5blink10ErrorEvent5errorEPNS_11ScriptStateE(%"class.blink::ScriptValue"* sret, %"class.blink::ErrorEvent"*, %"class.blink::ScriptState"*) local_unnamed_addr #2

declare %"class.v8::Value"* @_ZNK5blink11ScriptValue7V8ValueEv(%"class.blink::ScriptValue"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink20WorkerThreadDebugger14ContextGroupIdEPNS_16ExecutionContextE(%"class.blink::WorkerThreadDebugger"* nocapture readnone, %"class.blink::ExecutionContext"*) unnamed_addr #0 align 2 {
  %3 = icmp eq %"class.blink::ExecutionContext"* %1, null
  %4 = getelementptr inbounds %"class.blink::ExecutionContext", %"class.blink::ExecutionContext"* %1, i64 -1, i32 22
  %5 = bitcast %"class.blink::DOMTimerCoordinator"* %4 to %"class.blink::WorkerOrWorkletGlobalScope"*
  %6 = select i1 %3, %"class.blink::WorkerOrWorkletGlobalScope"* null, %"class.blink::WorkerOrWorkletGlobalScope"* %5
  %7 = bitcast %"class.blink::WorkerOrWorkletGlobalScope"* %6 to %"class.blink::WorkerThread"* (%"class.blink::WorkerOrWorkletGlobalScope"*)***
  %8 = load %"class.blink::WorkerThread"* (%"class.blink::WorkerOrWorkletGlobalScope"*)**, %"class.blink::WorkerThread"* (%"class.blink::WorkerOrWorkletGlobalScope"*)*** %7, align 8
  %9 = getelementptr inbounds %"class.blink::WorkerThread"* (%"class.blink::WorkerOrWorkletGlobalScope"*)*, %"class.blink::WorkerThread"* (%"class.blink::WorkerOrWorkletGlobalScope"*)** %8, i64 34
  %10 = load %"class.blink::WorkerThread"* (%"class.blink::WorkerOrWorkletGlobalScope"*)*, %"class.blink::WorkerThread"* (%"class.blink::WorkerOrWorkletGlobalScope"*)** %9, align 8
  %11 = tail call %"class.blink::WorkerThread"* %10(%"class.blink::WorkerOrWorkletGlobalScope"* %6) #11
  %12 = getelementptr inbounds %"class.blink::WorkerThread", %"class.blink::WorkerThread"* %11, i64 0, i32 2
  %13 = load i32, i32* %12, align 8
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20WorkerThreadDebugger18PauseWorkerOnStartEPNS_12WorkerThreadE(%"class.blink::WorkerThreadDebugger"* nocapture, %"class.blink::WorkerThread"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::WorkerThread", %"class.blink::WorkerThread"* %1, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  tail call void @_ZN5blink20WorkerThreadDebugger21runMessageLoopOnPauseEi(%"class.blink::WorkerThreadDebugger"* %0, i32 %8)
  br label %9

9:                                                ; preds = %6, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20WorkerThreadDebugger21runMessageLoopOnPauseEi(%"class.blink::WorkerThreadDebugger"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 3, i32 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %3, align 8
  %5 = icmp eq %"struct.WTF::KeyValuePair"* %4, null
  br i1 %5, label %102, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 3, i32 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %8, -1
  %10 = zext i32 %9 to i64
  %11 = shl i32 %1, 15
  %12 = xor i32 %11, -1
  %13 = add i32 %12, %1
  %14 = lshr i32 %13, 10
  %15 = xor i32 %14, %13
  %16 = mul i32 %15, 9
  %17 = lshr i32 %16, 6
  %18 = xor i32 %17, %16
  %19 = shl i32 %18, 11
  %20 = xor i32 %19, -1
  %21 = add i32 %18, %20
  %22 = lshr i32 %21, 16
  %23 = xor i32 %22, %21
  %24 = and i32 %9, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %25
  %27 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %26, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, %1
  br i1 %29, label %58, label %30

30:                                               ; preds = %6
  %31 = xor i32 %23, -1
  %32 = lshr i32 %21, 23
  %33 = add i32 %32, %31
  %34 = shl i32 %33, 12
  %35 = xor i32 %34, %33
  %36 = lshr i32 %35, 7
  %37 = xor i32 %36, %35
  %38 = shl i32 %37, 2
  %39 = xor i32 %38, %37
  %40 = lshr i32 %39, 20
  %41 = xor i32 %40, %39
  %42 = or i32 %41, 1
  %43 = zext i32 %42 to i64
  br label %44

44:                                               ; preds = %49, %30
  %45 = phi i32 [ %28, %30 ], [ %56, %49 ]
  %46 = phi i64 [ %25, %30 ], [ %53, %49 ]
  %47 = phi i64 [ 0, %30 ], [ %51, %49 ]
  %48 = icmp eq i32 %45, 0
  br i1 %48, label %102, label %49

49:                                               ; preds = %44
  %50 = icmp eq i64 %47, 0
  %51 = select i1 %50, i64 %43, i64 %47
  %52 = add i64 %51, %46
  %53 = and i64 %52, %10
  %54 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %53
  %55 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %54, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, %1
  br i1 %57, label %58, label %44

58:                                               ; preds = %49, %6
  %59 = phi %"struct.WTF::KeyValuePair"* [ %26, %6 ], [ %54, %49 ]
  %60 = icmp eq %"struct.WTF::KeyValuePair"* %59, null
  br i1 %60, label %102, label %61

61:                                               ; preds = %58
  %62 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 1
  store i32 %1, i32* %62, align 8
  %63 = load i32, i32* %27, align 4
  %64 = icmp eq i32 %63, %1
  br i1 %64, label %93, label %65

65:                                               ; preds = %61
  %66 = xor i32 %23, -1
  %67 = lshr i32 %21, 23
  %68 = add i32 %67, %66
  %69 = shl i32 %68, 12
  %70 = xor i32 %69, %68
  %71 = lshr i32 %70, 7
  %72 = xor i32 %71, %70
  %73 = shl i32 %72, 2
  %74 = xor i32 %73, %72
  %75 = lshr i32 %74, 20
  %76 = xor i32 %75, %74
  %77 = or i32 %76, 1
  %78 = zext i32 %77 to i64
  br label %79

79:                                               ; preds = %84, %65
  %80 = phi i32 [ %63, %65 ], [ %91, %84 ]
  %81 = phi i64 [ %25, %65 ], [ %88, %84 ]
  %82 = phi i64 [ 0, %65 ], [ %86, %84 ]
  %83 = icmp eq i32 %80, 0
  br i1 %83, label %99, label %84

84:                                               ; preds = %79
  %85 = icmp eq i64 %82, 0
  %86 = select i1 %85, i64 %78, i64 %82
  %87 = add i64 %86, %81
  %88 = and i64 %87, %10
  %89 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %88
  %90 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %89, i64 0, i32 0
  %91 = load i32, i32* %90, align 4
  %92 = icmp eq i32 %91, %1
  br i1 %92, label %93, label %79

93:                                               ; preds = %84, %61
  %94 = phi %"struct.WTF::KeyValuePair"* [ %26, %61 ], [ %89, %84 ]
  %95 = icmp eq %"struct.WTF::KeyValuePair"* %94, null
  br i1 %95, label %99, label %96

96:                                               ; preds = %93
  %97 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %94, i64 0, i32 1
  %98 = load %"class.blink::WorkerThread"*, %"class.blink::WorkerThread"** %97, align 8
  br label %99

99:                                               ; preds = %79, %93, %96
  %100 = phi %"class.blink::WorkerThread"* [ %98, %96 ], [ null, %93 ], [ null, %79 ]
  %101 = tail call %"class.blink::WorkerInspectorController"* @_ZN5blink12WorkerThread28GetWorkerInspectorControllerEv(%"class.blink::WorkerThread"* %100) #11
  tail call void @_ZN5blink25WorkerInspectorController26FlushProtocolNotificationsEv(%"class.blink::WorkerInspectorController"* %101) #11
  tail call void @_ZN5blink12WorkerThread5PauseEv(%"class.blink::WorkerThread"* %100) #11
  br label %102

102:                                              ; preds = %44, %58, %2, %99
  ret void
}

declare %"class.blink::WorkerInspectorController"* @_ZN5blink12WorkerThread28GetWorkerInspectorControllerEv(%"class.blink::WorkerThread"*) local_unnamed_addr #2

declare void @_ZN5blink25WorkerInspectorController26FlushProtocolNotificationsEv(%"class.blink::WorkerInspectorController"*) local_unnamed_addr #2

declare void @_ZN5blink12WorkerThread5PauseEv(%"class.blink::WorkerThread"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20WorkerThreadDebugger22quitMessageLoopOnPauseEv(%"class.blink::WorkerThreadDebugger"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 1
  %3 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 3, i32 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %3, align 8
  %5 = icmp eq %"struct.WTF::KeyValuePair"* %4, null
  br i1 %5, label %65, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 3, i32 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %8, -1
  %10 = zext i32 %9 to i64
  %11 = load i32, i32* %2, align 4
  %12 = shl i32 %11, 15
  %13 = xor i32 %12, -1
  %14 = add i32 %11, %13
  %15 = lshr i32 %14, 10
  %16 = xor i32 %15, %14
  %17 = mul i32 %16, 9
  %18 = lshr i32 %17, 6
  %19 = xor i32 %18, %17
  %20 = shl i32 %19, 11
  %21 = xor i32 %20, -1
  %22 = add i32 %19, %21
  %23 = lshr i32 %22, 16
  %24 = xor i32 %23, %22
  %25 = and i32 %24, %9
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %26
  %28 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %27, i64 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, %11
  br i1 %30, label %59, label %31

31:                                               ; preds = %6
  %32 = xor i32 %24, -1
  %33 = lshr i32 %22, 23
  %34 = add i32 %33, %32
  %35 = shl i32 %34, 12
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 7
  %38 = xor i32 %37, %36
  %39 = shl i32 %38, 2
  %40 = xor i32 %39, %38
  %41 = lshr i32 %40, 20
  %42 = xor i32 %41, %40
  %43 = or i32 %42, 1
  %44 = zext i32 %43 to i64
  br label %45

45:                                               ; preds = %50, %31
  %46 = phi i32 [ %29, %31 ], [ %57, %50 ]
  %47 = phi i64 [ %26, %31 ], [ %54, %50 ]
  %48 = phi i64 [ 0, %31 ], [ %52, %50 ]
  %49 = icmp eq i32 %46, 0
  br i1 %49, label %65, label %50

50:                                               ; preds = %45
  %51 = icmp eq i64 %48, 0
  %52 = select i1 %51, i64 %44, i64 %48
  %53 = add i64 %52, %47
  %54 = and i64 %53, %10
  %55 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %54
  %56 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %55, i64 0, i32 0
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %57, %11
  br i1 %58, label %59, label %45

59:                                               ; preds = %50, %6
  %60 = phi %"struct.WTF::KeyValuePair"* [ %27, %6 ], [ %55, %50 ]
  %61 = icmp eq %"struct.WTF::KeyValuePair"* %60, null
  br i1 %61, label %65, label %62

62:                                               ; preds = %59
  %63 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %60, i64 0, i32 1
  %64 = load %"class.blink::WorkerThread"*, %"class.blink::WorkerThread"** %63, align 8
  br label %65

65:                                               ; preds = %45, %1, %59, %62
  %66 = phi %"class.blink::WorkerThread"* [ %64, %62 ], [ null, %59 ], [ null, %1 ], [ null, %45 ]
  store i32 0, i32* %2, align 8
  tail call void @_ZN5blink12WorkerThread6ResumeEv(%"class.blink::WorkerThread"* %66) #11
  ret void
}

declare void @_ZN5blink12WorkerThread6ResumeEv(%"class.blink::WorkerThread"*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink20WorkerThreadDebugger11muteMetricsEi(%"class.blink::WorkerThreadDebugger"* nocapture, i32) unnamed_addr #7 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink20WorkerThreadDebugger13unmuteMetricsEi(%"class.blink::WorkerThreadDebugger"* nocapture, i32) unnamed_addr #7 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::Context"* @_ZN5blink20WorkerThreadDebugger27ensureDefaultContextInGroupEi(%"class.blink::WorkerThreadDebugger"* nocapture readonly, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 3, i32 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %3, align 8
  %5 = icmp eq %"struct.WTF::KeyValuePair"* %4, null
  br i1 %5, label %115, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 3, i32 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %8, -1
  %10 = zext i32 %9 to i64
  %11 = shl i32 %1, 15
  %12 = xor i32 %11, -1
  %13 = add i32 %12, %1
  %14 = lshr i32 %13, 10
  %15 = xor i32 %14, %13
  %16 = mul i32 %15, 9
  %17 = lshr i32 %16, 6
  %18 = xor i32 %17, %16
  %19 = shl i32 %18, 11
  %20 = xor i32 %19, -1
  %21 = add i32 %18, %20
  %22 = lshr i32 %21, 16
  %23 = xor i32 %22, %21
  %24 = and i32 %9, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %25
  %27 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %26, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, %1
  br i1 %29, label %58, label %30

30:                                               ; preds = %6
  %31 = xor i32 %23, -1
  %32 = lshr i32 %21, 23
  %33 = add i32 %32, %31
  %34 = shl i32 %33, 12
  %35 = xor i32 %34, %33
  %36 = lshr i32 %35, 7
  %37 = xor i32 %36, %35
  %38 = shl i32 %37, 2
  %39 = xor i32 %38, %37
  %40 = lshr i32 %39, 20
  %41 = xor i32 %40, %39
  %42 = or i32 %41, 1
  %43 = zext i32 %42 to i64
  br label %44

44:                                               ; preds = %49, %30
  %45 = phi i32 [ %28, %30 ], [ %56, %49 ]
  %46 = phi i64 [ %25, %30 ], [ %53, %49 ]
  %47 = phi i64 [ 0, %30 ], [ %51, %49 ]
  %48 = icmp eq i32 %45, 0
  br i1 %48, label %115, label %49

49:                                               ; preds = %44
  %50 = icmp eq i64 %47, 0
  %51 = select i1 %50, i64 %43, i64 %47
  %52 = add i64 %51, %46
  %53 = and i64 %52, %10
  %54 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %53
  %55 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %54, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, %1
  br i1 %57, label %58, label %44

58:                                               ; preds = %49, %6
  %59 = phi %"struct.WTF::KeyValuePair"* [ %26, %6 ], [ %54, %49 ]
  %60 = icmp eq %"struct.WTF::KeyValuePair"* %59, null
  br i1 %60, label %115, label %61

61:                                               ; preds = %58
  br i1 %29, label %90, label %62

62:                                               ; preds = %61
  %63 = xor i32 %23, -1
  %64 = lshr i32 %21, 23
  %65 = add i32 %64, %63
  %66 = shl i32 %65, 12
  %67 = xor i32 %66, %65
  %68 = lshr i32 %67, 7
  %69 = xor i32 %68, %67
  %70 = shl i32 %69, 2
  %71 = xor i32 %70, %69
  %72 = lshr i32 %71, 20
  %73 = xor i32 %72, %71
  %74 = or i32 %73, 1
  %75 = zext i32 %74 to i64
  br label %76

76:                                               ; preds = %81, %62
  %77 = phi i32 [ %28, %62 ], [ %88, %81 ]
  %78 = phi i64 [ %25, %62 ], [ %85, %81 ]
  %79 = phi i64 [ 0, %62 ], [ %83, %81 ]
  %80 = icmp eq i32 %77, 0
  br i1 %80, label %96, label %81

81:                                               ; preds = %76
  %82 = icmp eq i64 %79, 0
  %83 = select i1 %82, i64 %75, i64 %79
  %84 = add i64 %83, %78
  %85 = and i64 %84, %10
  %86 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %85
  %87 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %86, i64 0, i32 0
  %88 = load i32, i32* %87, align 4
  %89 = icmp eq i32 %88, %1
  br i1 %89, label %90, label %76

90:                                               ; preds = %81, %61
  %91 = phi %"struct.WTF::KeyValuePair"* [ %26, %61 ], [ %86, %81 ]
  %92 = icmp eq %"struct.WTF::KeyValuePair"* %91, null
  br i1 %92, label %96, label %93

93:                                               ; preds = %90
  %94 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %91, i64 0, i32 1
  %95 = load %"class.blink::WorkerThread"*, %"class.blink::WorkerThread"** %94, align 8
  br label %96

96:                                               ; preds = %76, %90, %93
  %97 = phi %"class.blink::WorkerThread"* [ %95, %93 ], [ null, %90 ], [ null, %76 ]
  %98 = tail call %"class.blink::WorkerOrWorkletGlobalScope"* @_ZN5blink12WorkerThread11GlobalScopeEv(%"class.blink::WorkerThread"* %97) #11
  %99 = getelementptr inbounds %"class.blink::WorkerOrWorkletGlobalScope", %"class.blink::WorkerOrWorkletGlobalScope"* %98, i64 0, i32 11, i32 0, i32 0
  %100 = load %"class.blink::WorkerOrWorkletScriptController"*, %"class.blink::WorkerOrWorkletScriptController"** %99, align 8
  %101 = getelementptr inbounds %"class.blink::WorkerOrWorkletScriptController", %"class.blink::WorkerOrWorkletScriptController"* %100, i64 0, i32 3, i32 0, i32 0
  %102 = load %"class.blink::ScriptState"*, %"class.blink::ScriptState"** %101, align 8
  %103 = icmp eq %"class.blink::ScriptState"* %102, null
  br i1 %103, label %115, label %104

104:                                              ; preds = %96
  %105 = getelementptr inbounds %"class.blink::ScriptState", %"class.blink::ScriptState"* %102, i64 0, i32 1, i32 0, i32 0, i32 0
  %106 = load %"class.v8::Context"*, %"class.v8::Context"** %105, align 8
  %107 = icmp eq %"class.v8::Context"* %106, null
  br i1 %107, label %115, label %108

108:                                              ; preds = %104
  %109 = bitcast %"class.blink::ScriptState"* %102 to %"class.v8::internal::Isolate"**
  %110 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %109, align 8
  %111 = bitcast %"class.v8::Context"* %106 to i64*
  %112 = load i64, i64* %111, align 8
  %113 = tail call i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"* %110, i64 %112) #11
  %114 = bitcast i64* %113 to %"class.v8::Context"*
  br label %115

115:                                              ; preds = %44, %58, %2, %96, %108, %104
  %116 = phi %"class.v8::Context"* [ null, %58 ], [ %114, %108 ], [ null, %104 ], [ null, %96 ], [ null, %2 ], [ null, %44 ]
  ret %"class.v8::Context"* %116
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink20WorkerThreadDebugger29beginEnsureAllContextsInGroupEi(%"class.blink::WorkerThreadDebugger"* nocapture, i32) unnamed_addr #7 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink20WorkerThreadDebugger27endEnsureAllContextsInGroupEi(%"class.blink::WorkerThreadDebugger"* nocapture, i32) unnamed_addr #7 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN5blink20WorkerThreadDebugger17canExecuteScriptsEi(%"class.blink::WorkerThreadDebugger"* nocapture readnone, i32) unnamed_addr #7 align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20WorkerThreadDebugger23runIfWaitingForDebuggerEi(%"class.blink::WorkerThreadDebugger"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, %1
  br i1 %5, label %6, label %7

6:                                                ; preds = %2
  tail call void @_ZN5blink20WorkerThreadDebugger22quitMessageLoopOnPauseEv(%"class.blink::WorkerThreadDebugger"* %0)
  br label %7

7:                                                ; preds = %6, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20WorkerThreadDebugger17consoleAPIMessageEiN2v87Isolate17MessageErrorLevelERKN12v8_inspector10StringViewES7_jjPNS4_12V8StackTraceE(%"class.blink::WorkerThreadDebugger"* nocapture readonly, i32, i32, %"class.v8_inspector::StringView"* dereferenceable(24), %"class.v8_inspector::StringView"* dereferenceable(24), i32, i32, %"class.v8_inspector::V8StackTrace"*) unnamed_addr #0 align 2 {
  %9 = alloca %"class.WTF::String", align 8
  %10 = alloca %"class.WTF::String", align 8
  %11 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 3, i32 0, i32 0
  %12 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %11, align 8
  %13 = icmp eq %"struct.WTF::KeyValuePair"* %12, null
  br i1 %13, label %164, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 3, i32 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = add i32 %16, -1
  %18 = zext i32 %17 to i64
  %19 = shl i32 %1, 15
  %20 = xor i32 %19, -1
  %21 = add i32 %20, %1
  %22 = lshr i32 %21, 10
  %23 = xor i32 %22, %21
  %24 = mul i32 %23, 9
  %25 = lshr i32 %24, 6
  %26 = xor i32 %25, %24
  %27 = shl i32 %26, 11
  %28 = xor i32 %27, -1
  %29 = add i32 %26, %28
  %30 = lshr i32 %29, 16
  %31 = xor i32 %30, %29
  %32 = and i32 %17, %31
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %12, i64 %33
  %35 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %34, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, %1
  br i1 %37, label %66, label %38

38:                                               ; preds = %14
  %39 = xor i32 %31, -1
  %40 = lshr i32 %29, 23
  %41 = add i32 %40, %39
  %42 = shl i32 %41, 12
  %43 = xor i32 %42, %41
  %44 = lshr i32 %43, 7
  %45 = xor i32 %44, %43
  %46 = shl i32 %45, 2
  %47 = xor i32 %46, %45
  %48 = lshr i32 %47, 20
  %49 = xor i32 %48, %47
  %50 = or i32 %49, 1
  %51 = zext i32 %50 to i64
  br label %52

52:                                               ; preds = %57, %38
  %53 = phi i32 [ %36, %38 ], [ %64, %57 ]
  %54 = phi i64 [ %33, %38 ], [ %61, %57 ]
  %55 = phi i64 [ 0, %38 ], [ %59, %57 ]
  %56 = icmp eq i32 %53, 0
  br i1 %56, label %164, label %57

57:                                               ; preds = %52
  %58 = icmp eq i64 %55, 0
  %59 = select i1 %58, i64 %51, i64 %55
  %60 = add i64 %59, %54
  %61 = and i64 %60, %18
  %62 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %12, i64 %61
  %63 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %62, i64 0, i32 0
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %64, %1
  br i1 %65, label %66, label %52

66:                                               ; preds = %57, %14
  %67 = phi %"struct.WTF::KeyValuePair"* [ %34, %14 ], [ %62, %57 ]
  %68 = icmp eq %"struct.WTF::KeyValuePair"* %67, null
  br i1 %68, label %164, label %69

69:                                               ; preds = %66
  br i1 %37, label %98, label %70

70:                                               ; preds = %69
  %71 = xor i32 %31, -1
  %72 = lshr i32 %29, 23
  %73 = add i32 %72, %71
  %74 = shl i32 %73, 12
  %75 = xor i32 %74, %73
  %76 = lshr i32 %75, 7
  %77 = xor i32 %76, %75
  %78 = shl i32 %77, 2
  %79 = xor i32 %78, %77
  %80 = lshr i32 %79, 20
  %81 = xor i32 %80, %79
  %82 = or i32 %81, 1
  %83 = zext i32 %82 to i64
  br label %84

84:                                               ; preds = %89, %70
  %85 = phi i32 [ %36, %70 ], [ %96, %89 ]
  %86 = phi i64 [ %33, %70 ], [ %93, %89 ]
  %87 = phi i64 [ 0, %70 ], [ %91, %89 ]
  %88 = icmp eq i32 %85, 0
  br i1 %88, label %104, label %89

89:                                               ; preds = %84
  %90 = icmp eq i64 %87, 0
  %91 = select i1 %90, i64 %83, i64 %87
  %92 = add i64 %91, %86
  %93 = and i64 %92, %18
  %94 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %12, i64 %93
  %95 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %94, i64 0, i32 0
  %96 = load i32, i32* %95, align 4
  %97 = icmp eq i32 %96, %1
  br i1 %97, label %98, label %84

98:                                               ; preds = %89, %69
  %99 = phi %"struct.WTF::KeyValuePair"* [ %34, %69 ], [ %94, %89 ]
  %100 = icmp eq %"struct.WTF::KeyValuePair"* %99, null
  br i1 %100, label %104, label %101

101:                                              ; preds = %98
  %102 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %99, i64 0, i32 1
  %103 = load %"class.blink::WorkerThread"*, %"class.blink::WorkerThread"** %102, align 8
  br label %104

104:                                              ; preds = %84, %98, %101
  %105 = phi %"class.blink::WorkerThread"* [ %103, %101 ], [ null, %98 ], [ null, %84 ]
  %106 = bitcast %"class.WTF::String"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %106) #11
  %107 = tail call %"class.WTF::StringImpl"* @_ZN5blink12ToCoreStringERKN12v8_inspector10StringViewE(%"class.v8_inspector::StringView"* dereferenceable(24) %4) #11
  %108 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %9, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %107, %"class.WTF::StringImpl"** %108, align 8
  %109 = icmp eq %"class.v8_inspector::V8StackTrace"* %7, null
  br i1 %109, label %116, label %110

110:                                              ; preds = %104
  %111 = bitcast %"class.v8_inspector::V8StackTrace"* %7 to %"class.v8_inspector::V8StackTrace"* (%"class.v8_inspector::V8StackTrace"*)***
  %112 = load %"class.v8_inspector::V8StackTrace"* (%"class.v8_inspector::V8StackTrace"*)**, %"class.v8_inspector::V8StackTrace"* (%"class.v8_inspector::V8StackTrace"*)*** %111, align 8
  %113 = getelementptr inbounds %"class.v8_inspector::V8StackTrace"* (%"class.v8_inspector::V8StackTrace"*)*, %"class.v8_inspector::V8StackTrace"* (%"class.v8_inspector::V8StackTrace"*)** %112, i64 12
  %114 = load %"class.v8_inspector::V8StackTrace"* (%"class.v8_inspector::V8StackTrace"*)*, %"class.v8_inspector::V8StackTrace"* (%"class.v8_inspector::V8StackTrace"*)** %113, align 8
  %115 = tail call %"class.v8_inspector::V8StackTrace"* %114(%"class.v8_inspector::V8StackTrace"* nonnull %7) #11
  br label %116

116:                                              ; preds = %110, %104
  %117 = phi %"class.v8_inspector::V8StackTrace"* [ %115, %110 ], [ null, %104 ]
  %118 = tail call noalias i8* @malloc(i64 32) #11
  %119 = bitcast i8* %118 to %"class.blink::SourceLocation"*
  call void @_ZN5blink14SourceLocationC1ERKN3WTF6StringEjjNSt3__110unique_ptrIN12v8_inspector12V8StackTraceENS5_14default_deleteIS8_EEEEi(%"class.blink::SourceLocation"* %119, %"class.WTF::String"* nonnull dereferenceable(8) %9, i32 %5, i32 %6, %"class.v8_inspector::V8StackTrace"* %117, i32 0) #11
  %120 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %108, align 8
  %121 = icmp eq %"class.WTF::StringImpl"* %120, null
  br i1 %121, label %135, label %122

122:                                              ; preds = %116
  %123 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %120, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %124 = load atomic i32, i32* %123 monotonic, align 4
  %125 = and i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %120, i64 0, i32 0
  %128 = load i32, i32* %127, align 4
  br i1 %126, label %129, label %131

129:                                              ; preds = %122
  %130 = add i32 %128, -1
  store i32 %130, i32* %127, align 4
  br label %131

131:                                              ; preds = %129, %122
  %132 = phi i32 [ %130, %129 ], [ %128, %122 ]
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %135

134:                                              ; preds = %131
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %120) #11
  br label %135

135:                                              ; preds = %116, %131, %134
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %106) #11
  %136 = getelementptr inbounds %"class.blink::WorkerThread", %"class.blink::WorkerThread"* %105, i64 0, i32 11
  %137 = load %"class.blink::WorkerReportingProxy"*, %"class.blink::WorkerReportingProxy"** %136, align 8
  %138 = call i32 @_ZN5blink14ThreadDebugger28V8MessageLevelToMessageLevelEN2v87Isolate17MessageErrorLevelE(i32 %2) #11
  %139 = bitcast %"class.WTF::String"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %139) #11
  %140 = call %"class.WTF::StringImpl"* @_ZN5blink12ToCoreStringERKN12v8_inspector10StringViewE(%"class.v8_inspector::StringView"* dereferenceable(24) %3) #11
  %141 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %10, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %140, %"class.WTF::StringImpl"** %141, align 8
  %142 = bitcast %"class.blink::WorkerReportingProxy"* %137 to void (%"class.blink::WorkerReportingProxy"*, i32, i32, %"class.WTF::String"*, %"class.blink::SourceLocation"*)***
  %143 = load void (%"class.blink::WorkerReportingProxy"*, i32, i32, %"class.WTF::String"*, %"class.blink::SourceLocation"*)**, void (%"class.blink::WorkerReportingProxy"*, i32, i32, %"class.WTF::String"*, %"class.blink::SourceLocation"*)*** %142, align 8
  %144 = getelementptr inbounds void (%"class.blink::WorkerReportingProxy"*, i32, i32, %"class.WTF::String"*, %"class.blink::SourceLocation"*)*, void (%"class.blink::WorkerReportingProxy"*, i32, i32, %"class.WTF::String"*, %"class.blink::SourceLocation"*)** %143, i64 4
  %145 = load void (%"class.blink::WorkerReportingProxy"*, i32, i32, %"class.WTF::String"*, %"class.blink::SourceLocation"*)*, void (%"class.blink::WorkerReportingProxy"*, i32, i32, %"class.WTF::String"*, %"class.blink::SourceLocation"*)** %144, align 8
  call void %145(%"class.blink::WorkerReportingProxy"* %137, i32 3, i32 %138, %"class.WTF::String"* nonnull dereferenceable(8) %10, %"class.blink::SourceLocation"* %119) #11
  %146 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %141, align 8
  %147 = icmp eq %"class.WTF::StringImpl"* %146, null
  br i1 %147, label %161, label %148

148:                                              ; preds = %135
  %149 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %146, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %150 = load atomic i32, i32* %149 monotonic, align 4
  %151 = and i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %146, i64 0, i32 0
  %154 = load i32, i32* %153, align 4
  br i1 %152, label %155, label %157

155:                                              ; preds = %148
  %156 = add i32 %154, -1
  store i32 %156, i32* %153, align 4
  br label %157

157:                                              ; preds = %155, %148
  %158 = phi i32 [ %156, %155 ], [ %154, %148 ]
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %160, label %161

160:                                              ; preds = %157
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %146) #11
  br label %161

161:                                              ; preds = %135, %157, %160
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %139) #11
  %162 = icmp eq i8* %118, null
  br i1 %162, label %164, label %163

163:                                              ; preds = %161
  call void @_ZN5blink14SourceLocationD1Ev(%"class.blink::SourceLocation"* nonnull %119) #11
  call void @free(i8* nonnull %118) #11
  br label %164

164:                                              ; preds = %52, %66, %8, %163, %161
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN5blink12ToCoreStringERKN12v8_inspector10StringViewE(%"class.v8_inspector::StringView"* dereferenceable(24)) local_unnamed_addr #2

declare i32 @_ZN5blink14ThreadDebugger28V8MessageLevelToMessageLevelEN2v87Isolate17MessageErrorLevelE(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20WorkerThreadDebugger12consoleClearEi(%"class.blink::WorkerThreadDebugger"* nocapture readonly, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 3, i32 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %3, align 8
  %5 = icmp eq %"struct.WTF::KeyValuePair"* %4, null
  br i1 %5, label %100, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::WorkerThreadDebugger", %"class.blink::WorkerThreadDebugger"* %0, i64 0, i32 3, i32 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %8, -1
  %10 = zext i32 %9 to i64
  %11 = shl i32 %1, 15
  %12 = xor i32 %11, -1
  %13 = add i32 %12, %1
  %14 = lshr i32 %13, 10
  %15 = xor i32 %14, %13
  %16 = mul i32 %15, 9
  %17 = lshr i32 %16, 6
  %18 = xor i32 %17, %16
  %19 = shl i32 %18, 11
  %20 = xor i32 %19, -1
  %21 = add i32 %18, %20
  %22 = lshr i32 %21, 16
  %23 = xor i32 %22, %21
  %24 = and i32 %9, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %25
  %27 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %26, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, %1
  br i1 %29, label %58, label %30

30:                                               ; preds = %6
  %31 = xor i32 %23, -1
  %32 = lshr i32 %21, 23
  %33 = add i32 %32, %31
  %34 = shl i32 %33, 12
  %35 = xor i32 %34, %33
  %36 = lshr i32 %35, 7
  %37 = xor i32 %36, %35
  %38 = shl i32 %37, 2
  %39 = xor i32 %38, %37
  %40 = lshr i32 %39, 20
  %41 = xor i32 %40, %39
  %42 = or i32 %41, 1
  %43 = zext i32 %42 to i64
  br label %44

44:                                               ; preds = %49, %30
  %45 = phi i32 [ %28, %30 ], [ %56, %49 ]
  %46 = phi i64 [ %25, %30 ], [ %53, %49 ]
  %47 = phi i64 [ 0, %30 ], [ %51, %49 ]
  %48 = icmp eq i32 %45, 0
  br i1 %48, label %100, label %49

49:                                               ; preds = %44
  %50 = icmp eq i64 %47, 0
  %51 = select i1 %50, i64 %43, i64 %47
  %52 = add i64 %51, %46
  %53 = and i64 %52, %10
  %54 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %53
  %55 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %54, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, %1
  br i1 %57, label %58, label %44

58:                                               ; preds = %49, %6
  %59 = phi %"struct.WTF::KeyValuePair"* [ %26, %6 ], [ %54, %49 ]
  %60 = icmp eq %"struct.WTF::KeyValuePair"* %59, null
  br i1 %60, label %100, label %61

61:                                               ; preds = %58
  br i1 %29, label %90, label %62

62:                                               ; preds = %61
  %63 = xor i32 %23, -1
  %64 = lshr i32 %21, 23
  %65 = add i32 %64, %63
  %66 = shl i32 %65, 12
  %67 = xor i32 %66, %65
  %68 = lshr i32 %67, 7
  %69 = xor i32 %68, %67
  %70 = shl i32 %69, 2
  %71 = xor i32 %70, %69
  %72 = lshr i32 %71, 20
  %73 = xor i32 %72, %71
  %74 = or i32 %73, 1
  %75 = zext i32 %74 to i64
  br label %76

76:                                               ; preds = %81, %62
  %77 = phi i32 [ %28, %62 ], [ %88, %81 ]
  %78 = phi i64 [ %25, %62 ], [ %85, %81 ]
  %79 = phi i64 [ 0, %62 ], [ %83, %81 ]
  %80 = icmp eq i32 %77, 0
  br i1 %80, label %96, label %81

81:                                               ; preds = %76
  %82 = icmp eq i64 %79, 0
  %83 = select i1 %82, i64 %75, i64 %79
  %84 = add i64 %83, %78
  %85 = and i64 %84, %10
  %86 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %85
  %87 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %86, i64 0, i32 0
  %88 = load i32, i32* %87, align 4
  %89 = icmp eq i32 %88, %1
  br i1 %89, label %90, label %76

90:                                               ; preds = %81, %61
  %91 = phi %"struct.WTF::KeyValuePair"* [ %26, %61 ], [ %86, %81 ]
  %92 = icmp eq %"struct.WTF::KeyValuePair"* %91, null
  br i1 %92, label %96, label %93

93:                                               ; preds = %90
  %94 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %91, i64 0, i32 1
  %95 = load %"class.blink::WorkerThread"*, %"class.blink::WorkerThread"** %94, align 8
  br label %96

96:                                               ; preds = %76, %90, %93
  %97 = phi %"class.blink::WorkerThread"* [ %95, %93 ], [ null, %90 ], [ null, %76 ]
  %98 = getelementptr inbounds %"class.blink::WorkerThread", %"class.blink::WorkerThread"* %97, i64 0, i32 18, i32 0, i32 0
  %99 = load %"class.blink::ConsoleMessageStorage"*, %"class.blink::ConsoleMessageStorage"** %98, align 8
  tail call void @_ZN5blink21ConsoleMessageStorage5ClearEv(%"class.blink::ConsoleMessageStorage"* %99) #11
  br label %100

100:                                              ; preds = %44, %58, %2, %96
  ret void
}

declare void @_ZN5blink21ConsoleMessageStorage5ClearEv(%"class.blink::ConsoleMessageStorage"*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %"class.v8::Value"* @_ZN5blink20WorkerThreadDebugger10memoryInfoEPN2v87IsolateENS1_5LocalINS1_7ContextEEE(%"class.blink::WorkerThreadDebugger"* nocapture readnone, %"class.v8::Isolate"* nocapture readnone, %"class.v8::Context"* nocapture readnone) unnamed_addr #7 align 2 {
  ret %"class.v8::Value"* null
}

declare void @_ZN5blink14ThreadDebugger16beginUserGestureEv(%"class.blink::ThreadDebugger"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12v8_inspector17V8InspectorClient14endUserGestureEv(%"class.v8_inspector::V8InspectorClient"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare %"class.v8_inspector::StringBuffer"* @_ZN5blink14ThreadDebugger12valueSubtypeEN2v85LocalINS1_5ValueEEE(%"class.blink::ThreadDebugger"*, %"class.v8::Value"*) unnamed_addr #2

declare %"class.v8_inspector::StringBuffer"* @_ZN5blink14ThreadDebugger26descriptionForValueSubtypeEN2v85LocalINS1_7ContextEEENS2_INS1_5ValueEEE(%"class.blink::ThreadDebugger"*, %"class.v8::Context"*, %"class.v8::Value"*) unnamed_addr #2

declare zeroext i1 @_ZN5blink14ThreadDebugger27formatAccessorsAsPropertiesEN2v85LocalINS1_5ValueEEE(%"class.blink::ThreadDebugger"*, %"class.v8::Value"*) unnamed_addr #2

declare zeroext i1 @_ZN5blink14ThreadDebugger23isInspectableHeapObjectEN2v85LocalINS1_6ObjectEEE(%"class.blink::ThreadDebugger"*, %"class.v8::Object"*) unnamed_addr #2

declare void @_ZN5blink14ThreadDebugger31installAdditionalCommandLineAPIEN2v85LocalINS1_7ContextEEENS2_INS1_6ObjectEEE(%"class.blink::ThreadDebugger"*, %"class.v8::Context"*, %"class.v8::Object"*) unnamed_addr #2

declare void @_ZN5blink14ThreadDebugger11consoleTimeERKN12v8_inspector10StringViewE(%"class.blink::ThreadDebugger"*, %"class.v8_inspector::StringView"* dereferenceable(24)) unnamed_addr #2

declare void @_ZN5blink14ThreadDebugger14consoleTimeEndERKN12v8_inspector10StringViewE(%"class.blink::ThreadDebugger"*, %"class.v8_inspector::StringView"* dereferenceable(24)) unnamed_addr #2

declare void @_ZN5blink14ThreadDebugger16consoleTimeStampERKN12v8_inspector10StringViewE(%"class.blink::ThreadDebugger"*, %"class.v8_inspector::StringView"* dereferenceable(24)) unnamed_addr #2

declare double @_ZN5blink14ThreadDebugger13currentTimeMSEv(%"class.blink::ThreadDebugger"*) unnamed_addr #2

declare void @_ZN5blink14ThreadDebugger19startRepeatingTimerEdPFvPvES1_(%"class.blink::ThreadDebugger"*, double, void (i8*)*, i8*) unnamed_addr #2

declare void @_ZN5blink14ThreadDebugger11cancelTimerEPv(%"class.blink::ThreadDebugger"*, i8*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12v8_inspector17V8InspectorClient29maxAsyncCallStackDepthChangedEi(%"class.v8_inspector::V8InspectorClient"*, i32) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.v8_inspector::StringBuffer"* @_ZN12v8_inspector17V8InspectorClient17resourceNameToUrlERKNS_10StringViewE(%"class.v8_inspector::V8InspectorClient"*, %"class.v8_inspector::StringView"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  ret %"class.v8_inspector::StringBuffer"* null
}

declare i64 @_ZN5blink14ThreadDebugger16generateUniqueIdEv(%"class.blink::ThreadDebugger"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink20WorkerThreadDebugger8IsWorkerEv(%"class.blink::WorkerThreadDebugger"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #2

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #8

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

declare void @_ZN2v811HandleScopeC1EPNS_7IsolateE(%"class.v8::HandleScope"*, %"class.v8::Isolate"*) unnamed_addr #2

declare void @_ZN2v87Context5EnterEv(%"class.v8::Context"*) local_unnamed_addr #2

declare i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"*, i64) local_unnamed_addr #2

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5blink15DOMWrapperWorldD1Ev(%"class.blink::DOMWrapperWorld"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

declare void @_ZN2v87Context4ExitEv(%"class.v8::Context"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2v811HandleScopeD1Ev(%"class.v8::HandleScope"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN5blink14SourceLocationD1Ev(%"class.blink::SourceLocation"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableIiNS_12KeyValuePairIiPN5blink12WorkerThreadEEENS_24KeyValuePairKeyExtractorENS_7IntHashIiEENS_18HashMapValueTraitsINS_10HashTraitsIiEENSA_IS4_EEEESB_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISD_S8_SE_EERiRS4_EENS_18HashTableAddResultISF_S5_EEOT0_OT1_(%"class.WTF::HashTable"*, i32* dereferenceable(4), %"class.blink::WorkerThread"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIiNS_12KeyValuePairIiPN5blink12WorkerThreadEEENS_24KeyValuePairKeyExtractorENS_7IntHashIiEENS_18HashMapValueTraitsINS_10HashTraitsIiEENSA_IS4_EEEESB_NS_18PartitionAllocatorEE6ExpandEPS5_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* null)
  %9 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = load i32, i32* %1, align 4
  %17 = shl i32 %16, 15
  %18 = xor i32 %17, -1
  %19 = add i32 %16, %18
  %20 = lshr i32 %19, 10
  %21 = xor i32 %20, %19
  %22 = mul i32 %21, 9
  %23 = lshr i32 %22, 6
  %24 = xor i32 %23, %22
  %25 = shl i32 %24, 11
  %26 = xor i32 %25, -1
  %27 = add i32 %24, %26
  %28 = lshr i32 %27, 16
  %29 = xor i32 %28, %27
  %30 = and i32 %29, %14
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %31
  %33 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %32, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %79, label %36

36:                                               ; preds = %10
  %37 = xor i32 %29, -1
  %38 = lshr i32 %27, 23
  %39 = add i32 %38, %37
  %40 = shl i32 %39, 12
  %41 = xor i32 %40, %39
  %42 = lshr i32 %41, 7
  %43 = xor i32 %42, %41
  %44 = shl i32 %43, 2
  %45 = xor i32 %44, %43
  %46 = lshr i32 %45, 20
  %47 = xor i32 %46, %45
  %48 = or i32 %47, 1
  %49 = zext i32 %48 to i64
  br label %50

50:                                               ; preds = %36, %57
  %51 = phi i32 [ %34, %36 ], [ %66, %57 ]
  %52 = phi %"struct.WTF::KeyValuePair"* [ %32, %36 ], [ %64, %57 ]
  %53 = phi %"struct.WTF::KeyValuePair"* [ null, %36 ], [ %59, %57 ]
  %54 = phi i64 [ %31, %36 ], [ %63, %57 ]
  %55 = phi i64 [ 0, %36 ], [ %61, %57 ]
  %56 = icmp eq i32 %51, %16
  br i1 %56, label %98, label %57

57:                                               ; preds = %50
  %58 = icmp eq i32 %51, -1
  %59 = select i1 %58, %"struct.WTF::KeyValuePair"* %52, %"struct.WTF::KeyValuePair"* %53
  %60 = icmp eq i64 %55, 0
  %61 = select i1 %60, i64 %49, i64 %55
  %62 = add i64 %61, %54
  %63 = and i64 %62, %15
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %63
  %65 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %64, i64 0, i32 0
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %50

68:                                               ; preds = %57
  %69 = icmp eq %"struct.WTF::KeyValuePair"* %59, null
  br i1 %69, label %79, label %70

70:                                               ; preds = %68
  %71 = bitcast %"struct.WTF::KeyValuePair"* %59 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %71, i8 0, i64 16, i1 false) #11
  %72 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %73 = load i32, i32* %72, align 8
  %74 = add i32 %73, 2147483647
  %75 = and i32 %74, 2147483647
  %76 = and i32 %73, -2147483648
  %77 = or i32 %75, %76
  store i32 %77, i32* %72, align 8
  %78 = load i32, i32* %1, align 4
  br label %79

79:                                               ; preds = %10, %68, %70
  %80 = phi i32 [ %78, %70 ], [ %16, %68 ], [ %16, %10 ]
  %81 = phi %"struct.WTF::KeyValuePair"* [ %59, %70 ], [ %64, %68 ], [ %32, %10 ]
  %82 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %81, i64 0, i32 0
  store i32 %80, i32* %82, align 8
  %83 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %81, i64 0, i32 1
  %84 = bitcast %"class.blink::WorkerThread"** %2 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = bitcast %"class.blink::WorkerThread"** %83 to i64*
  store i64 %85, i64* %86, align 8
  %87 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %88 = load i32, i32* %87, align 4
  %89 = add i32 %88, 1
  store i32 %89, i32* %87, align 4
  %90 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %91 = load i32, i32* %90, align 8
  %92 = add i32 %91, %89
  %93 = shl i32 %92, 1
  %94 = load i32, i32* %12, align 8
  %95 = icmp ult i32 %93, %94
  br i1 %95, label %98, label %96

96:                                               ; preds = %79
  %97 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIiNS_12KeyValuePairIiPN5blink12WorkerThreadEEENS_24KeyValuePairKeyExtractorENS_7IntHashIiEENS_18HashMapValueTraitsINS_10HashTraitsIiEENSA_IS4_EEEESB_NS_18PartitionAllocatorEE6ExpandEPS5_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* %81)
  br label %98

98:                                               ; preds = %50, %79, %96
  %99 = phi i8 [ 1, %79 ], [ 1, %96 ], [ 0, %50 ]
  %100 = phi %"struct.WTF::KeyValuePair"* [ %81, %79 ], [ %97, %96 ], [ %52, %50 ]
  %101 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } undef, %"struct.WTF::KeyValuePair"* %100, 0
  %102 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } %101, i8 %99, 1
  ret { %"struct.WTF::KeyValuePair"*, i8 } %102
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIiNS_12KeyValuePairIiPN5blink12WorkerThreadEEENS_24KeyValuePairKeyExtractorENS_7IntHashIiEENS_18HashMapValueTraitsINS_10HashTraitsIiEENSA_IS4_EEEESB_NS_18PartitionAllocatorEE6ExpandEPS5_(%"class.WTF::HashTable"*, %"struct.WTF::KeyValuePair"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #11
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #11
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* %22, i8* %23) #11
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.3, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #11
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #11
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #11
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 4
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIiPN5blink12WorkerThreadEEEEEPKcv, i64 0, i64 0)) #11
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #11
  %36 = bitcast i8* %35 to %"struct.WTF::KeyValuePair"*
  %37 = call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIiNS_12KeyValuePairIiPN5blink12WorkerThreadEEENS_24KeyValuePairKeyExtractorENS_7IntHashIiEENS_18HashMapValueTraitsINS_10HashTraitsIiEENSA_IS4_EEEESB_NS_18PartitionAllocatorEE8RehashToEPS5_jSG_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* %36, i32 %32, %"struct.WTF::KeyValuePair"* %1) #11
  ret %"struct.WTF::KeyValuePair"* %37
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIiNS_12KeyValuePairIiPN5blink12WorkerThreadEEENS_24KeyValuePairKeyExtractorENS_7IntHashIiEENS_18HashMapValueTraitsINS_10HashTraitsIiEENSA_IS4_EEEESB_NS_18PartitionAllocatorEE8RehashToEPS5_jSG_(%"class.WTF::HashTable"*, %"struct.WTF::KeyValuePair"*, i32, %"struct.WTF::KeyValuePair"*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"struct.WTF::KeyValuePair"* %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  br i1 %8, label %10, label %13

10:                                               ; preds = %4
  %11 = bitcast %"class.WTF::HashTable"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  br label %20

13:                                               ; preds = %4
  %14 = add i32 %2, -1
  %15 = zext i32 %14 to i64
  %16 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %9, align 8
  %17 = ptrtoint %"struct.WTF::KeyValuePair"* %16 to i64
  br label %31

18:                                               ; preds = %117
  %19 = bitcast %"class.WTF::HashTable"* %0 to i64*
  br label %20

20:                                               ; preds = %10, %18
  %21 = phi i64* [ %11, %10 ], [ %19, %18 ]
  %22 = phi i64 [ %12, %10 ], [ %118, %18 ]
  %23 = phi %"struct.WTF::KeyValuePair"* [ null, %10 ], [ %121, %18 ]
  store atomic i64 %5, i64* %21 monotonic, align 8
  store i32 %2, i32* %6, align 8
  %24 = icmp eq i64 %22, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %20
  %26 = inttoptr i64 %22 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %26) #11
  br label %27

27:                                               ; preds = %20, %25
  %28 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %29 = load i32, i32* %28, align 8
  %30 = and i32 %29, -2147483648
  store i32 %30, i32* %28, align 8
  ret %"struct.WTF::KeyValuePair"* %23

31:                                               ; preds = %13, %117
  %32 = phi i64 [ %17, %13 ], [ %118, %117 ]
  %33 = phi i32 [ %7, %13 ], [ %119, %117 ]
  %34 = phi %"struct.WTF::KeyValuePair"* [ %16, %13 ], [ %120, %117 ]
  %35 = phi %"struct.WTF::KeyValuePair"* [ null, %13 ], [ %121, %117 ]
  %36 = phi i32 [ 0, %13 ], [ %122, %117 ]
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %34, i64 %37
  %39 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %38, i64 0, i32 0
  %40 = load i32, i32* %39, align 4
  %41 = add i32 %40, 1
  %42 = icmp ult i32 %41, 2
  br i1 %42, label %117, label %43

43:                                               ; preds = %31
  %44 = shl i32 %40, 15
  %45 = xor i32 %44, -1
  %46 = add i32 %40, %45
  %47 = lshr i32 %46, 10
  %48 = xor i32 %47, %46
  %49 = mul i32 %48, 9
  %50 = lshr i32 %49, 6
  %51 = xor i32 %50, %49
  %52 = shl i32 %51, 11
  %53 = xor i32 %52, -1
  %54 = add i32 %51, %53
  %55 = lshr i32 %54, 16
  %56 = xor i32 %55, %54
  %57 = and i32 %56, %14
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 %58
  %60 = ptrtoint %"struct.WTF::KeyValuePair"* %59 to i64
  %61 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %59, i64 0, i32 0
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %81, label %64

64:                                               ; preds = %43
  %65 = xor i32 %56, -1
  %66 = lshr i32 %54, 23
  %67 = add i32 %66, %65
  %68 = shl i32 %67, 12
  %69 = xor i32 %68, %67
  %70 = lshr i32 %69, 7
  %71 = xor i32 %70, %69
  %72 = shl i32 %71, 2
  %73 = xor i32 %72, %71
  %74 = lshr i32 %73, 20
  %75 = xor i32 %74, %73
  %76 = or i32 %75, 1
  %77 = zext i32 %76 to i64
  br label %87

78:                                               ; preds = %94
  %79 = ptrtoint %"struct.WTF::KeyValuePair"* %101 to i64
  %80 = inttoptr i64 %96 to %"struct.WTF::KeyValuePair"*
  br label %81

81:                                               ; preds = %78, %43
  %82 = phi i64 [ %79, %78 ], [ %60, %43 ]
  %83 = phi %"struct.WTF::KeyValuePair"* [ %80, %78 ], [ null, %43 ]
  %84 = icmp eq %"struct.WTF::KeyValuePair"* %83, null
  %85 = ptrtoint %"struct.WTF::KeyValuePair"* %83 to i64
  %86 = select i1 %84, i64 %82, i64 %85
  br label %106

87:                                               ; preds = %94, %64
  %88 = phi i64 [ 0, %64 ], [ %96, %94 ]
  %89 = phi i32 [ %62, %64 ], [ %104, %94 ]
  %90 = phi i64 [ %60, %64 ], [ %102, %94 ]
  %91 = phi i64 [ %58, %64 ], [ %100, %94 ]
  %92 = phi i64 [ 0, %64 ], [ %98, %94 ]
  %93 = icmp eq i32 %89, %40
  br i1 %93, label %106, label %94

94:                                               ; preds = %87
  %95 = icmp eq i32 %89, -1
  %96 = select i1 %95, i64 %90, i64 %88
  %97 = icmp eq i64 %92, 0
  %98 = select i1 %97, i64 %77, i64 %92
  %99 = add i64 %98, %91
  %100 = and i64 %99, %15
  %101 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 %100
  %102 = ptrtoint %"struct.WTF::KeyValuePair"* %101 to i64
  %103 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %101, i64 0, i32 0
  %104 = load i32, i32* %103, align 4
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %78, label %87

106:                                              ; preds = %87, %81
  %107 = phi i64 [ %86, %81 ], [ %90, %87 ]
  %108 = inttoptr i64 %107 to %"struct.WTF::KeyValuePair"*
  %109 = inttoptr i64 %107 to i8*
  %110 = bitcast %"struct.WTF::KeyValuePair"* %38 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %109, i8* align 8 %110, i64 16, i1 false) #11
  %111 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %9, align 8
  %112 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %111, i64 %37
  %113 = icmp eq %"struct.WTF::KeyValuePair"* %112, %3
  %114 = select i1 %113, %"struct.WTF::KeyValuePair"* %108, %"struct.WTF::KeyValuePair"* %35
  %115 = load i32, i32* %6, align 8
  %116 = ptrtoint %"struct.WTF::KeyValuePair"* %111 to i64
  br label %117

117:                                              ; preds = %31, %106
  %118 = phi i64 [ %32, %31 ], [ %116, %106 ]
  %119 = phi i32 [ %33, %31 ], [ %115, %106 ]
  %120 = phi %"struct.WTF::KeyValuePair"* [ %34, %31 ], [ %111, %106 ]
  %121 = phi %"struct.WTF::KeyValuePair"* [ %35, %31 ], [ %114, %106 ]
  %122 = add i32 %36, 1
  %123 = icmp eq i32 %122, %119
  br i1 %123, label %18, label %31
}

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

declare void @_ZN5blink14SourceLocationC1ERKN3WTF6StringEjjNSt3__110unique_ptrIN12v8_inspector12V8StackTraceENS5_14default_deleteIS8_EEEEi(%"class.blink::SourceLocation"*, %"class.WTF::String"* dereferenceable(8), i32, i32, %"class.v8_inspector::V8StackTrace"*, i32) unnamed_addr #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #10

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
