; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/scatter_nd.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/scatter_nd.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, i32 (%struct.TfLiteContext*, %struct.TfLiteRegistration*, %struct.TfLiteIntArray*, %struct.TfLiteDelegate*)*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteRegistration = type { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, {}*, {}*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%"class.tflite::RuntimeShape" = type { i32, %union.anon }
%union.anon = type { i32*, [16 x i8] }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN6tflite3ops7builtin10scatter_nd11CheckShapesIiEE12TfLiteStatusP13TfLiteContextRKNS_12RuntimeShapeES9_S9_PKT_ = comdat any

$_ZN6tflite3ops7builtin10scatter_nd13EvalScatterNdIiEE12TfLiteStatusP13TfLiteContextPK12TfLiteTensorS9_S9_PS7_ = comdat any

$_ZN6tflite3ops7builtin10scatter_nd9ScatterNdIifEE12TfLiteStatusPK12TfLiteTensorS7_PS5_ = comdat any

$_ZN6tflite3ops7builtin10scatter_nd9ScatterNdIihEE12TfLiteStatusPK12TfLiteTensorS7_PS5_ = comdat any

$_ZN6tflite3ops7builtin10scatter_nd9ScatterNdIiaEE12TfLiteStatusPK12TfLiteTensorS7_PS5_ = comdat any

$_ZN6tflite3ops7builtin10scatter_nd9ScatterNdIiiEE12TfLiteStatusPK12TfLiteTensorS7_PS5_ = comdat any

$_ZN6tflite3ops7builtin10scatter_nd9ScatterNdIilEE12TfLiteStatusPK12TfLiteTensorS7_PS5_ = comdat any

$_ZN6tflite13reference_ops9ScatterNdIifEEvRKNS_12RuntimeShapeEPKT_S4_PKT0_S4_PS8_ = comdat any

$_ZN6tflite13reference_ops9ScatterNdIihEEvRKNS_12RuntimeShapeEPKT_S4_PKT0_S4_PS8_ = comdat any

$_ZN6tflite13reference_ops9ScatterNdIiaEEvRKNS_12RuntimeShapeEPKT_S4_PKT0_S4_PS8_ = comdat any

$_ZN6tflite13reference_ops9ScatterNdIiiEEvRKNS_12RuntimeShapeEPKT_S4_PKT0_S4_PS8_ = comdat any

$_ZN6tflite13reference_ops9ScatterNdIilEEvRKNS_12RuntimeShapeEPKT_S4_PKT0_S4_PS8_ = comdat any

@.str = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%d != %d)\00", align 1
@.str.3 = private unnamed_addr constant [67 x i8] c"../../third_party/tflite/src/tensorflow/lite/kernels/scatter_nd.cc\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"NumInputs(node)\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"3\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"NumOutputs(node)\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.8 = private unnamed_addr constant [54 x i8] c"Updates of type '%s' are not supported by scatter_nd.\00", align 1
@.str.9 = private unnamed_addr constant [43 x i8] c"Indices and shape must have the same type.\00", align 1
@.str.10 = private unnamed_addr constant [54 x i8] c"Indices of type '%s' are not supported by scatter_nd.\00", align 1
@_ZZN6tflite3ops7builtin19Register_SCATTER_NDEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* null, void (%struct.TfLiteContext*, i8*)* null, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin10scatter_nd7PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin10scatter_nd4EvalEP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@.str.12 = private unnamed_addr constant [23 x i8] c"%s:%d %s was not true.\00", align 1
@.str.13 = private unnamed_addr constant [109 x i8] c"(indices.DimensionsCount() >= 1) && (updates.DimensionsCount() >= 1) && (shape_shape.DimensionsCount() == 1)\00", align 1
@.str.14 = private unnamed_addr constant [16 x i8] c"indices.Dims(i)\00", align 1
@.str.15 = private unnamed_addr constant [16 x i8] c"updates.Dims(i)\00", align 1
@.str.16 = private unnamed_addr constant [39 x i8] c"updates.DimensionsCount() - outer_dims\00", align 1
@.str.17 = private unnamed_addr constant [25 x i8] c"shape_shape.Dims(0) - ix\00", align 1
@.str.18 = private unnamed_addr constant [29 x i8] c"updates.Dims(i + outer_dims)\00", align 1
@.str.19 = private unnamed_addr constant [19 x i8] c"shape_data[ix + i]\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin10scatter_nd7PrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %7 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %6, align 8
  %8 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %7, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 3
  br i1 %10, label %14, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %13 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %12, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %13(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.3, i64 0, i64 0), i32 74, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %9, i32 3) #8
  br label %371

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %16 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %15, align 8
  %17 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %16, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %22 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %21, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %22(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.3, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0), i32 %18, i32 1) #8
  br label %371

23:                                               ; preds = %14
  %24 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %7, i64 0, i32 1, i64 0
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %32, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %29 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %28, align 8
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %29, i64 %30
  br label %32

32:                                               ; preds = %23, %27
  %33 = phi %struct.TfLiteTensor* [ %31, %27 ], [ null, %23 ]
  %34 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %7, i64 0, i32 1, i64 1
  %35 = load i32, i32* %34, align 4
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %42, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %39 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %38, align 8
  %40 = sext i32 %35 to i64
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %39, i64 %40
  br label %42

42:                                               ; preds = %32, %37
  %43 = phi %struct.TfLiteTensor* [ %41, %37 ], [ null, %32 ]
  %44 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %7, i64 0, i32 1, i64 2
  %45 = load i32, i32* %44, align 4
  %46 = icmp slt i32 %45, 0
  br i1 %46, label %52, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %49 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %48, align 8
  %50 = sext i32 %45 to i64
  %51 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %49, i64 %50
  br label %52

52:                                               ; preds = %42, %47
  %53 = phi %struct.TfLiteTensor* [ %51, %47 ], [ null, %42 ]
  %54 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 0, i32 0
  %55 = load i32, i32* %54, align 8
  switch i32 %55, label %56 [
    i32 1, label %60
    i32 3, label %60
    i32 9, label %60
    i32 4, label %60
    i32 2, label %60
  ]

56:                                               ; preds = %52
  %57 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %58 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %57, align 8
  %59 = tail call i8* @TfLiteTypeGetName(i32 %55) #8
  tail call void (%struct.TfLiteContext*, i8*, ...) %58(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.8, i64 0, i64 0), i8* %59) #8
  br label %371

60:                                               ; preds = %52, %52, %52, %52, %52
  %61 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 0
  %62 = load i32, i32* %61, align 8
  %63 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %53, i64 0, i32 0
  %64 = load i32, i32* %63, align 8
  %65 = icmp eq i32 %62, %64
  br i1 %65, label %69, label %66

66:                                               ; preds = %60
  %67 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %68 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %67, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %68(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.9, i64 0, i64 0)) #8
  br label %371

69:                                               ; preds = %60
  %70 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %16, i64 0, i32 1, i64 0
  %71 = load i32, i32* %70, align 4
  %72 = icmp slt i32 %71, 0
  br i1 %72, label %78, label %73

73:                                               ; preds = %69
  %74 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %75 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %74, align 8
  %76 = sext i32 %71 to i64
  %77 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %75, i64 %76
  br label %78

78:                                               ; preds = %69, %73
  %79 = phi %struct.TfLiteTensor* [ %77, %73 ], [ null, %69 ]
  %80 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %79, i64 0, i32 0
  store i32 %55, i32* %80, align 8
  %81 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %53, i64 0, i32 4
  %82 = load i32, i32* %81, align 8
  %83 = icmp eq i32 %82, 1
  br i1 %83, label %84, label %364

84:                                               ; preds = %78
  %85 = load i32, i32* %61, align 8
  %86 = icmp eq i32 %85, 2
  br i1 %86, label %87, label %360

87:                                               ; preds = %84
  %88 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %88) #8
  %89 = icmp eq %struct.TfLiteTensor* %33, null
  br i1 %89, label %90, label %92

90:                                               ; preds = %87
  %91 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %91, align 8, !alias.scope !2
  br label %117

92:                                               ; preds = %87
  %93 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 2
  %94 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %93, align 8, !noalias !2
  %95 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %94, i64 0, i32 0
  %96 = load i32, i32* %95, align 4, !noalias !2
  %97 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %94, i64 0, i32 1, i64 0
  %98 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %96, i32* %98, align 8, !alias.scope !2
  %99 = icmp sgt i32 %96, 5
  br i1 %99, label %100, label %107

100:                                              ; preds = %92
  %101 = sext i32 %96 to i64
  %102 = shl nsw i64 %101, 2
  %103 = tail call i8* @_Znam(i64 %102) #9, !noalias !2
  %104 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %105 = bitcast i32** %104 to i8**
  store i8* %103, i8** %105, align 8, !alias.scope !2
  %106 = bitcast i8* %103 to i32*
  br label %112

107:                                              ; preds = %92
  %108 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %109 = bitcast %union.anon* %108 to i32*
  %110 = sext i32 %96 to i64
  %111 = shl nsw i64 %110, 2
  br label %112

112:                                              ; preds = %107, %100
  %113 = phi i64 [ %102, %100 ], [ %111, %107 ]
  %114 = phi i32* [ %106, %100 ], [ %109, %107 ]
  %115 = bitcast i32* %114 to i8*
  %116 = bitcast i32* %97 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %115, i8* align 4 %116, i64 %113, i1 false) #8
  br label %117

117:                                              ; preds = %90, %112
  %118 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %118) #8
  %119 = icmp eq %struct.TfLiteTensor* %43, null
  br i1 %119, label %120, label %122

120:                                              ; preds = %117
  %121 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %121, align 8, !alias.scope !5
  br label %147

122:                                              ; preds = %117
  %123 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 0, i32 2
  %124 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %123, align 8, !noalias !5
  %125 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %124, i64 0, i32 0
  %126 = load i32, i32* %125, align 4, !noalias !5
  %127 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %124, i64 0, i32 1, i64 0
  %128 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %126, i32* %128, align 8, !alias.scope !5
  %129 = icmp sgt i32 %126, 5
  br i1 %129, label %130, label %137

130:                                              ; preds = %122
  %131 = sext i32 %126 to i64
  %132 = shl nsw i64 %131, 2
  %133 = tail call i8* @_Znam(i64 %132) #9, !noalias !5
  %134 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %135 = bitcast i32** %134 to i8**
  store i8* %133, i8** %135, align 8, !alias.scope !5
  %136 = bitcast i8* %133 to i32*
  br label %142

137:                                              ; preds = %122
  %138 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %139 = bitcast %union.anon* %138 to i32*
  %140 = sext i32 %126 to i64
  %141 = shl nsw i64 %140, 2
  br label %142

142:                                              ; preds = %137, %130
  %143 = phi i64 [ %132, %130 ], [ %141, %137 ]
  %144 = phi i32* [ %136, %130 ], [ %139, %137 ]
  %145 = bitcast i32* %144 to i8*
  %146 = bitcast i32* %127 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %145, i8* align 4 %146, i64 %143, i1 false) #8
  br label %147

147:                                              ; preds = %120, %142
  %148 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %148) #8
  %149 = icmp eq %struct.TfLiteTensor* %53, null
  br i1 %149, label %150, label %152

150:                                              ; preds = %147
  %151 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %151, align 8, !alias.scope !8
  br label %179

152:                                              ; preds = %147
  %153 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %53, i64 0, i32 2
  %154 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %153, align 8, !noalias !8
  %155 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %154, i64 0, i32 0
  %156 = load i32, i32* %155, align 4, !noalias !8
  %157 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %154, i64 0, i32 1, i64 0
  %158 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %156, i32* %158, align 8, !alias.scope !8
  %159 = icmp sgt i32 %156, 5
  br i1 %159, label %160, label %167

160:                                              ; preds = %152
  %161 = sext i32 %156 to i64
  %162 = shl nsw i64 %161, 2
  %163 = tail call i8* @_Znam(i64 %162) #9, !noalias !8
  %164 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %165 = bitcast i32** %164 to i8**
  store i8* %163, i8** %165, align 8, !alias.scope !8
  %166 = bitcast i8* %163 to i32*
  br label %172

167:                                              ; preds = %152
  %168 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %169 = bitcast %union.anon* %168 to i32*
  %170 = sext i32 %156 to i64
  %171 = shl nsw i64 %170, 2
  br label %172

172:                                              ; preds = %167, %160
  %173 = phi i64 [ %162, %160 ], [ %171, %167 ]
  %174 = phi i32* [ %166, %160 ], [ %169, %167 ]
  %175 = bitcast i32* %174 to i8*
  %176 = bitcast i32* %157 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %175, i8* align 4 %176, i64 %173, i1 false) #8
  %177 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %53, i64 0, i32 1, i32 0
  %178 = load i32*, i32** %177, align 8
  br label %179

179:                                              ; preds = %150, %172
  %180 = phi i32* [ %178, %172 ], [ null, %150 ]
  %181 = call i32 @_ZN6tflite3ops7builtin10scatter_nd11CheckShapesIiEE12TfLiteStatusP13TfLiteContextRKNS_12RuntimeShapeES9_S9_PKT_(%struct.TfLiteContext* %0, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %3, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %4, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %5, i32* %180)
  %182 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %183 = load i32, i32* %182, align 8
  %184 = icmp sgt i32 %183, 5
  br i1 %184, label %185, label %191

185:                                              ; preds = %179
  %186 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %187 = load i32*, i32** %186, align 8
  %188 = icmp eq i32* %187, null
  br i1 %188, label %191, label %189

189:                                              ; preds = %185
  %190 = bitcast i32* %187 to i8*
  call void @_ZdaPv(i8* %190) #9
  br label %191

191:                                              ; preds = %179, %185, %189
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %148) #8
  %192 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  %193 = load i32, i32* %192, align 8
  %194 = icmp sgt i32 %193, 5
  br i1 %194, label %195, label %201

195:                                              ; preds = %191
  %196 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %197 = load i32*, i32** %196, align 8
  %198 = icmp eq i32* %197, null
  br i1 %198, label %201, label %199

199:                                              ; preds = %195
  %200 = bitcast i32* %197 to i8*
  call void @_ZdaPv(i8* %200) #9
  br label %201

201:                                              ; preds = %191, %195, %199
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %118) #8
  %202 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %203 = load i32, i32* %202, align 8
  %204 = icmp sgt i32 %203, 5
  br i1 %204, label %205, label %211

205:                                              ; preds = %201
  %206 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %207 = load i32*, i32** %206, align 8
  %208 = icmp eq i32* %207, null
  br i1 %208, label %211, label %209

209:                                              ; preds = %205
  %210 = bitcast i32* %207 to i8*
  call void @_ZdaPv(i8* %210) #9
  br label %211

211:                                              ; preds = %201, %205, %209
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %88) #8
  %212 = icmp eq i32 %181, 0
  br i1 %212, label %213, label %371

213:                                              ; preds = %211
  %214 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %53, i64 0, i32 2
  %215 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %214, align 8
  %216 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %215, i64 0, i32 1, i64 0
  %217 = load i32, i32* %216, align 4
  %218 = call %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32 %217) #8
  br i1 %149, label %223, label %219

219:                                              ; preds = %213
  %220 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %53, i64 0, i32 1, i32 0
  %221 = load i32*, i32** %220, align 8
  %222 = bitcast i32* %221 to i8*
  br label %223

223:                                              ; preds = %219, %213
  %224 = phi i8* [ %222, %219 ], [ null, %213 ]
  %225 = phi i32* [ %221, %219 ], [ null, %213 ]
  %226 = icmp sgt i32 %217, 0
  br i1 %226, label %227, label %356

227:                                              ; preds = %223
  %228 = zext i32 %217 to i64
  %229 = icmp ult i32 %217, 8
  br i1 %229, label %319, label %230

230:                                              ; preds = %227
  %231 = getelementptr %struct.TfLiteIntArray, %struct.TfLiteIntArray* %218, i64 1
  %232 = add nuw nsw i64 %228, 1
  %233 = getelementptr %struct.TfLiteIntArray, %struct.TfLiteIntArray* %218, i64 %232
  %234 = bitcast %struct.TfLiteIntArray* %233 to i8*
  %235 = getelementptr i32, i32* %225, i64 %228
  %236 = bitcast i32* %235 to %struct.TfLiteIntArray*
  %237 = icmp ult %struct.TfLiteIntArray* %231, %236
  %238 = icmp ult i8* %224, %234
  %239 = and i1 %237, %238
  br i1 %239, label %319, label %240

240:                                              ; preds = %230
  %241 = and i64 %228, 4294967288
  %242 = add nsw i64 %241, -8
  %243 = lshr exact i64 %242, 3
  %244 = add nuw nsw i64 %243, 1
  %245 = and i64 %244, 3
  %246 = icmp ult i64 %242, 24
  br i1 %246, label %298, label %247

247:                                              ; preds = %240
  %248 = sub nsw i64 %244, %245
  br label %249

249:                                              ; preds = %249, %247
  %250 = phi i64 [ 0, %247 ], [ %295, %249 ]
  %251 = phi i64 [ %248, %247 ], [ %296, %249 ]
  %252 = getelementptr inbounds i32, i32* %225, i64 %250
  %253 = bitcast i32* %252 to <4 x i32>*
  %254 = load <4 x i32>, <4 x i32>* %253, align 4, !alias.scope !11
  %255 = getelementptr inbounds i32, i32* %252, i64 4
  %256 = bitcast i32* %255 to <4 x i32>*
  %257 = load <4 x i32>, <4 x i32>* %256, align 4, !alias.scope !11
  %258 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %218, i64 0, i32 1, i64 %250
  %259 = bitcast i32* %258 to <4 x i32>*
  store <4 x i32> %254, <4 x i32>* %259, align 4, !alias.scope !14, !noalias !11
  %260 = getelementptr inbounds i32, i32* %258, i64 4
  %261 = bitcast i32* %260 to <4 x i32>*
  store <4 x i32> %257, <4 x i32>* %261, align 4, !alias.scope !14, !noalias !11
  %262 = or i64 %250, 8
  %263 = getelementptr inbounds i32, i32* %225, i64 %262
  %264 = bitcast i32* %263 to <4 x i32>*
  %265 = load <4 x i32>, <4 x i32>* %264, align 4, !alias.scope !11
  %266 = getelementptr inbounds i32, i32* %263, i64 4
  %267 = bitcast i32* %266 to <4 x i32>*
  %268 = load <4 x i32>, <4 x i32>* %267, align 4, !alias.scope !11
  %269 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %218, i64 0, i32 1, i64 %262
  %270 = bitcast i32* %269 to <4 x i32>*
  store <4 x i32> %265, <4 x i32>* %270, align 4, !alias.scope !14, !noalias !11
  %271 = getelementptr inbounds i32, i32* %269, i64 4
  %272 = bitcast i32* %271 to <4 x i32>*
  store <4 x i32> %268, <4 x i32>* %272, align 4, !alias.scope !14, !noalias !11
  %273 = or i64 %250, 16
  %274 = getelementptr inbounds i32, i32* %225, i64 %273
  %275 = bitcast i32* %274 to <4 x i32>*
  %276 = load <4 x i32>, <4 x i32>* %275, align 4, !alias.scope !11
  %277 = getelementptr inbounds i32, i32* %274, i64 4
  %278 = bitcast i32* %277 to <4 x i32>*
  %279 = load <4 x i32>, <4 x i32>* %278, align 4, !alias.scope !11
  %280 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %218, i64 0, i32 1, i64 %273
  %281 = bitcast i32* %280 to <4 x i32>*
  store <4 x i32> %276, <4 x i32>* %281, align 4, !alias.scope !14, !noalias !11
  %282 = getelementptr inbounds i32, i32* %280, i64 4
  %283 = bitcast i32* %282 to <4 x i32>*
  store <4 x i32> %279, <4 x i32>* %283, align 4, !alias.scope !14, !noalias !11
  %284 = or i64 %250, 24
  %285 = getelementptr inbounds i32, i32* %225, i64 %284
  %286 = bitcast i32* %285 to <4 x i32>*
  %287 = load <4 x i32>, <4 x i32>* %286, align 4, !alias.scope !11
  %288 = getelementptr inbounds i32, i32* %285, i64 4
  %289 = bitcast i32* %288 to <4 x i32>*
  %290 = load <4 x i32>, <4 x i32>* %289, align 4, !alias.scope !11
  %291 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %218, i64 0, i32 1, i64 %284
  %292 = bitcast i32* %291 to <4 x i32>*
  store <4 x i32> %287, <4 x i32>* %292, align 4, !alias.scope !14, !noalias !11
  %293 = getelementptr inbounds i32, i32* %291, i64 4
  %294 = bitcast i32* %293 to <4 x i32>*
  store <4 x i32> %290, <4 x i32>* %294, align 4, !alias.scope !14, !noalias !11
  %295 = add i64 %250, 32
  %296 = add i64 %251, -4
  %297 = icmp eq i64 %296, 0
  br i1 %297, label %298, label %249, !llvm.loop !16

298:                                              ; preds = %249, %240
  %299 = phi i64 [ 0, %240 ], [ %295, %249 ]
  %300 = icmp eq i64 %245, 0
  br i1 %300, label %317, label %301

301:                                              ; preds = %298, %301
  %302 = phi i64 [ %314, %301 ], [ %299, %298 ]
  %303 = phi i64 [ %315, %301 ], [ %245, %298 ]
  %304 = getelementptr inbounds i32, i32* %225, i64 %302
  %305 = bitcast i32* %304 to <4 x i32>*
  %306 = load <4 x i32>, <4 x i32>* %305, align 4, !alias.scope !11
  %307 = getelementptr inbounds i32, i32* %304, i64 4
  %308 = bitcast i32* %307 to <4 x i32>*
  %309 = load <4 x i32>, <4 x i32>* %308, align 4, !alias.scope !11
  %310 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %218, i64 0, i32 1, i64 %302
  %311 = bitcast i32* %310 to <4 x i32>*
  store <4 x i32> %306, <4 x i32>* %311, align 4, !alias.scope !14, !noalias !11
  %312 = getelementptr inbounds i32, i32* %310, i64 4
  %313 = bitcast i32* %312 to <4 x i32>*
  store <4 x i32> %309, <4 x i32>* %313, align 4, !alias.scope !14, !noalias !11
  %314 = add i64 %302, 8
  %315 = add i64 %303, -1
  %316 = icmp eq i64 %315, 0
  br i1 %316, label %317, label %301, !llvm.loop !18

317:                                              ; preds = %301, %298
  %318 = icmp eq i64 %241, %228
  br i1 %318, label %356, label %319

319:                                              ; preds = %317, %230, %227
  %320 = phi i64 [ 0, %230 ], [ 0, %227 ], [ %241, %317 ]
  %321 = xor i64 %320, -1
  %322 = add nsw i64 %321, %228
  %323 = and i64 %228, 3
  %324 = icmp eq i64 %323, 0
  br i1 %324, label %334, label %325

325:                                              ; preds = %319, %325
  %326 = phi i64 [ %331, %325 ], [ %320, %319 ]
  %327 = phi i64 [ %332, %325 ], [ %323, %319 ]
  %328 = getelementptr inbounds i32, i32* %225, i64 %326
  %329 = load i32, i32* %328, align 4
  %330 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %218, i64 0, i32 1, i64 %326
  store i32 %329, i32* %330, align 4
  %331 = add nuw nsw i64 %326, 1
  %332 = add i64 %327, -1
  %333 = icmp eq i64 %332, 0
  br i1 %333, label %334, label %325, !llvm.loop !20

334:                                              ; preds = %325, %319
  %335 = phi i64 [ %320, %319 ], [ %331, %325 ]
  %336 = icmp ult i64 %322, 3
  br i1 %336, label %356, label %337

337:                                              ; preds = %334, %337
  %338 = phi i64 [ %354, %337 ], [ %335, %334 ]
  %339 = getelementptr inbounds i32, i32* %225, i64 %338
  %340 = load i32, i32* %339, align 4
  %341 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %218, i64 0, i32 1, i64 %338
  store i32 %340, i32* %341, align 4
  %342 = add nuw nsw i64 %338, 1
  %343 = getelementptr inbounds i32, i32* %225, i64 %342
  %344 = load i32, i32* %343, align 4
  %345 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %218, i64 0, i32 1, i64 %342
  store i32 %344, i32* %345, align 4
  %346 = add nuw nsw i64 %338, 2
  %347 = getelementptr inbounds i32, i32* %225, i64 %346
  %348 = load i32, i32* %347, align 4
  %349 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %218, i64 0, i32 1, i64 %346
  store i32 %348, i32* %349, align 4
  %350 = add nuw nsw i64 %338, 3
  %351 = getelementptr inbounds i32, i32* %225, i64 %350
  %352 = load i32, i32* %351, align 4
  %353 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %218, i64 0, i32 1, i64 %350
  store i32 %352, i32* %353, align 4
  %354 = add nuw nsw i64 %338, 4
  %355 = icmp eq i64 %354, %228
  br i1 %355, label %356, label %337, !llvm.loop !21

356:                                              ; preds = %334, %337, %317, %223
  %357 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %358 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %357, align 8
  %359 = call i32 %358(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %79, %struct.TfLiteIntArray* %218) #8
  br label %371

360:                                              ; preds = %84
  %361 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %362 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %361, align 8
  %363 = tail call i8* @TfLiteTypeGetName(i32 %85) #8
  tail call void (%struct.TfLiteContext*, i8*, ...) %362(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.10, i64 0, i64 0), i8* %363) #8
  br label %371

364:                                              ; preds = %78
  %365 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %79, i64 0, i32 4
  %366 = load i32, i32* %365, align 8
  %367 = icmp eq i32 %366, 4
  br i1 %367, label %371, label %368

368:                                              ; preds = %364
  store i32 4, i32* %365, align 8
  %369 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %79, i64 0, i32 1
  %370 = bitcast %union.TfLitePtrUnion* %369 to i8**
  store i8* null, i8** %370, align 8
  br label %371

371:                                              ; preds = %368, %364, %56, %66, %211, %360, %356, %20, %11
  %372 = phi i32 [ 1, %11 ], [ 1, %20 ], [ 1, %56 ], [ 1, %66 ], [ %359, %356 ], [ %181, %211 ], [ 1, %360 ], [ 0, %364 ], [ 0, %368 ]
  ret i32 %372
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @TfLiteTypeGetName(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin10scatter_nd11CheckShapesIiEE12TfLiteStatusP13TfLiteContextRKNS_12RuntimeShapeES9_S9_PKT_(%struct.TfLiteContext*, %"class.tflite::RuntimeShape"* dereferenceable(32), %"class.tflite::RuntimeShape"* dereferenceable(32), %"class.tflite::RuntimeShape"* dereferenceable(32), i32*) local_unnamed_addr #0 comdat {
  %6 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %17

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %2, i64 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %17

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %20, label %17

17:                                               ; preds = %5, %9, %13
  %18 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %19 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %18, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %19(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.3, i64 0, i64 0), i32 56, i8* getelementptr inbounds ([109 x i8], [109 x i8]* @.str.13, i64 0, i64 0)) #8
  br label %108

20:                                               ; preds = %13
  %21 = add nsw i32 %7, -1
  %22 = icmp sgt i32 %21, 0
  %23 = icmp sgt i32 %7, 5
  %24 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %25 = getelementptr inbounds %union.anon, %union.anon* %24, i64 0, i32 0
  %26 = load i32*, i32** %25, align 8
  %27 = bitcast %union.anon* %24 to [5 x i32]*
  br i1 %22, label %28, label %61

28:                                               ; preds = %20
  %29 = icmp sgt i32 %11, 5
  %30 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %2, i64 0, i32 1
  %31 = getelementptr inbounds %union.anon, %union.anon* %30, i64 0, i32 0
  %32 = load i32*, i32** %31, align 8
  %33 = bitcast %union.anon* %30 to [5 x i32]*
  %34 = zext i32 %21 to i64
  br label %35

35:                                               ; preds = %58, %28
  %36 = phi i64 [ 0, %28 ], [ %59, %58 ]
  %37 = getelementptr inbounds i32, i32* %26, i64 %36
  %38 = getelementptr inbounds [5 x i32], [5 x i32]* %27, i64 0, i64 %36
  %39 = select i1 %23, i32* %37, i32* %38
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds i32, i32* %32, i64 %36
  %42 = getelementptr inbounds [5 x i32], [5 x i32]* %33, i64 0, i64 %36
  %43 = select i1 %29, i32* %41, i32* %42
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %40, %44
  br i1 %45, label %58, label %46

46:                                               ; preds = %35
  %47 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %48 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %47, align 8
  %49 = and i64 %36, 4294967295
  %50 = getelementptr inbounds i32, i32* %26, i64 %49
  %51 = getelementptr inbounds [5 x i32], [5 x i32]* %27, i64 0, i64 %49
  %52 = select i1 %23, i32* %50, i32* %51
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds i32, i32* %32, i64 %49
  %55 = getelementptr inbounds [5 x i32], [5 x i32]* %33, i64 0, i64 %49
  %56 = select i1 %29, i32* %54, i32* %55
  %57 = load i32, i32* %56, align 4
  tail call void (%struct.TfLiteContext*, i8*, ...) %48(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.3, i64 0, i64 0), i32 60, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i64 0, i64 0), i32 %53, i32 %57) #8
  br label %108

58:                                               ; preds = %35
  %59 = add nuw nsw i64 %36, 1
  %60 = icmp eq i64 %59, %34
  br i1 %60, label %61, label %35

61:                                               ; preds = %58, %20
  %62 = sext i32 %21 to i64
  %63 = getelementptr inbounds i32, i32* %26, i64 %62
  %64 = getelementptr inbounds [5 x i32], [5 x i32]* %27, i64 0, i64 %62
  %65 = select i1 %23, i32* %63, i32* %64
  %66 = load i32, i32* %65, align 4
  %67 = sub nsw i32 %11, %21
  %68 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %69 = bitcast i32** %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = trunc i64 %70 to i32
  %72 = sub nsw i32 %71, %66
  %73 = icmp eq i32 %67, %72
  br i1 %73, label %74, label %85

74:                                               ; preds = %61
  %75 = icmp slt i32 %11, %7
  br i1 %75, label %108, label %76

76:                                               ; preds = %74
  %77 = icmp sgt i32 %11, 5
  %78 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %2, i64 0, i32 1
  %79 = getelementptr inbounds %union.anon, %union.anon* %78, i64 0, i32 0
  %80 = load i32*, i32** %79, align 8
  %81 = bitcast %union.anon* %78 to [5 x i32]*
  %82 = sext i32 %66 to i64
  %83 = sext i32 %7 to i64
  %84 = sext i32 %11 to i64
  br label %93

85:                                               ; preds = %61
  %86 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %87 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %86, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %87(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.3, i64 0, i64 0), i32 65, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.17, i64 0, i64 0), i32 %67, i32 %72) #8
  br label %108

88:                                               ; preds = %93
  %89 = add nuw nsw i64 %94, 1
  %90 = add nsw i64 %94, %83
  %91 = icmp slt i64 %90, %84
  %92 = trunc i64 %90 to i32
  br i1 %91, label %93, label %108

93:                                               ; preds = %76, %88
  %94 = phi i64 [ 0, %76 ], [ %89, %88 ]
  %95 = phi i32 [ %21, %76 ], [ %92, %88 ]
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i32, i32* %80, i64 %96
  %98 = getelementptr inbounds [5 x i32], [5 x i32]* %81, i64 0, i64 %96
  %99 = select i1 %77, i32* %97, i32* %98
  %100 = load i32, i32* %99, align 4
  %101 = add nsw i64 %94, %82
  %102 = getelementptr inbounds i32, i32* %4, i64 %101
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %100, %103
  br i1 %104, label %88, label %105

105:                                              ; preds = %93
  %106 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %107 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %106, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %107(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.3, i64 0, i64 0), i32 68, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.19, i64 0, i64 0), i32 %100, i32 %103) #8
  br label %108

108:                                              ; preds = %88, %74, %17, %85, %46, %105
  %109 = phi i32 [ 1, %105 ], [ 1, %46 ], [ 1, %85 ], [ 1, %17 ], [ 0, %74 ], [ 0, %88 ]
  ret i32 %109
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin10scatter_nd4EvalEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %4 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %3, align 8
  %5 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %13, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %10 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %9, align 8
  %11 = sext i32 %6 to i64
  %12 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %10, i64 %11
  br label %13

13:                                               ; preds = %2, %8
  %14 = phi %struct.TfLiteTensor* [ %12, %8 ], [ null, %2 ]
  %15 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 1
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %20 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %19, align 8
  %21 = sext i32 %16 to i64
  %22 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %20, i64 %21
  br label %23

23:                                               ; preds = %13, %18
  %24 = phi %struct.TfLiteTensor* [ %22, %18 ], [ null, %13 ]
  %25 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 2
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %23
  %29 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %30 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %29, align 8
  %31 = sext i32 %26 to i64
  %32 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 %31
  br label %33

33:                                               ; preds = %23, %28
  %34 = phi %struct.TfLiteTensor* [ %32, %28 ], [ null, %23 ]
  %35 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %36 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %35, align 8
  %37 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %36, i64 0, i32 1, i64 0
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %45, label %40

40:                                               ; preds = %33
  %41 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %42 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %41, align 8
  %43 = sext i32 %38 to i64
  %44 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 %43
  br label %45

45:                                               ; preds = %33, %40
  %46 = phi %struct.TfLiteTensor* [ %44, %40 ], [ null, %33 ]
  %47 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %14, i64 0, i32 0
  %48 = load i32, i32* %47, align 8
  %49 = icmp eq i32 %48, 2
  br i1 %49, label %50, label %52

50:                                               ; preds = %45
  %51 = tail call i32 @_ZN6tflite3ops7builtin10scatter_nd13EvalScatterNdIiEE12TfLiteStatusP13TfLiteContextPK12TfLiteTensorS9_S9_PS7_(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %14, %struct.TfLiteTensor* %24, %struct.TfLiteTensor* %34, %struct.TfLiteTensor* %46)
  br label %56

52:                                               ; preds = %45
  %53 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %54 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %53, align 8
  %55 = tail call i8* @TfLiteTypeGetName(i32 %48) #8
  tail call void (%struct.TfLiteContext*, i8*, ...) %54(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.10, i64 0, i64 0), i8* %55) #8
  br label %56

56:                                               ; preds = %52, %50
  %57 = phi i32 [ %51, %50 ], [ 1, %52 ]
  ret i32 %57
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin10scatter_nd13EvalScatterNdIiEE12TfLiteStatusP13TfLiteContextPK12TfLiteTensorS9_S9_PS7_(%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #0 comdat {
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 4
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 4
  br i1 %11, label %12, label %286

12:                                               ; preds = %5
  %13 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #8
  %14 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %14, label %15, label %17

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %16, align 8, !alias.scope !22
  br label %42

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %19 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %18, align 8, !noalias !22
  %20 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %19, i64 0, i32 0
  %21 = load i32, i32* %20, align 4, !noalias !22
  %22 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %19, i64 0, i32 1, i64 0
  %23 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %21, i32* %23, align 8, !alias.scope !22
  %24 = icmp sgt i32 %21, 5
  br i1 %24, label %25, label %32

25:                                               ; preds = %17
  %26 = sext i32 %21 to i64
  %27 = shl nsw i64 %26, 2
  %28 = tail call i8* @_Znam(i64 %27) #9, !noalias !22
  %29 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %30 = bitcast i32** %29 to i8**
  store i8* %28, i8** %30, align 8, !alias.scope !22
  %31 = bitcast i8* %28 to i32*
  br label %37

32:                                               ; preds = %17
  %33 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %34 = bitcast %union.anon* %33 to i32*
  %35 = sext i32 %21 to i64
  %36 = shl nsw i64 %35, 2
  br label %37

37:                                               ; preds = %32, %25
  %38 = phi i64 [ %27, %25 ], [ %36, %32 ]
  %39 = phi i32* [ %31, %25 ], [ %34, %32 ]
  %40 = bitcast i32* %39 to i8*
  %41 = bitcast i32* %22 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 %38, i1 false) #8
  br label %42

42:                                               ; preds = %15, %37
  %43 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %43) #8
  %44 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %44, label %45, label %47

45:                                               ; preds = %42
  %46 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %46, align 8, !alias.scope !25
  br label %72

47:                                               ; preds = %42
  %48 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %49 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %48, align 8, !noalias !25
  %50 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %49, i64 0, i32 0
  %51 = load i32, i32* %50, align 4, !noalias !25
  %52 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %49, i64 0, i32 1, i64 0
  %53 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %51, i32* %53, align 8, !alias.scope !25
  %54 = icmp sgt i32 %51, 5
  br i1 %54, label %55, label %62

55:                                               ; preds = %47
  %56 = sext i32 %51 to i64
  %57 = shl nsw i64 %56, 2
  %58 = tail call i8* @_Znam(i64 %57) #9, !noalias !25
  %59 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %60 = bitcast i32** %59 to i8**
  store i8* %58, i8** %60, align 8, !alias.scope !25
  %61 = bitcast i8* %58 to i32*
  br label %67

62:                                               ; preds = %47
  %63 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %64 = bitcast %union.anon* %63 to i32*
  %65 = sext i32 %51 to i64
  %66 = shl nsw i64 %65, 2
  br label %67

67:                                               ; preds = %62, %55
  %68 = phi i64 [ %57, %55 ], [ %66, %62 ]
  %69 = phi i32* [ %61, %55 ], [ %64, %62 ]
  %70 = bitcast i32* %69 to i8*
  %71 = bitcast i32* %52 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %70, i8* align 4 %71, i64 %68, i1 false) #8
  br label %72

72:                                               ; preds = %45, %67
  %73 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %73) #8
  %74 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %74, label %75, label %77

75:                                               ; preds = %72
  %76 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %76, align 8, !alias.scope !28
  br label %104

77:                                               ; preds = %72
  %78 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %79 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %78, align 8, !noalias !28
  %80 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %79, i64 0, i32 0
  %81 = load i32, i32* %80, align 4, !noalias !28
  %82 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %79, i64 0, i32 1, i64 0
  %83 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %81, i32* %83, align 8, !alias.scope !28
  %84 = icmp sgt i32 %81, 5
  br i1 %84, label %85, label %92

85:                                               ; preds = %77
  %86 = sext i32 %81 to i64
  %87 = shl nsw i64 %86, 2
  %88 = tail call i8* @_Znam(i64 %87) #9, !noalias !28
  %89 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %90 = bitcast i32** %89 to i8**
  store i8* %88, i8** %90, align 8, !alias.scope !28
  %91 = bitcast i8* %88 to i32*
  br label %97

92:                                               ; preds = %77
  %93 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %94 = bitcast %union.anon* %93 to i32*
  %95 = sext i32 %81 to i64
  %96 = shl nsw i64 %95, 2
  br label %97

97:                                               ; preds = %92, %85
  %98 = phi i64 [ %87, %85 ], [ %96, %92 ]
  %99 = phi i32* [ %91, %85 ], [ %94, %92 ]
  %100 = bitcast i32* %99 to i8*
  %101 = bitcast i32* %82 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %100, i8* align 4 %101, i64 %98, i1 false) #8
  %102 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1, i32 0
  %103 = load i32*, i32** %102, align 8
  br label %104

104:                                              ; preds = %75, %97
  %105 = phi i32* [ %103, %97 ], [ null, %75 ]
  %106 = call i32 @_ZN6tflite3ops7builtin10scatter_nd11CheckShapesIiEE12TfLiteStatusP13TfLiteContextRKNS_12RuntimeShapeES9_S9_PKT_(%struct.TfLiteContext* %0, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %6, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %7, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %8, i32* %105)
  %107 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  %108 = load i32, i32* %107, align 8
  %109 = icmp sgt i32 %108, 5
  br i1 %109, label %110, label %116

110:                                              ; preds = %104
  %111 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %112 = load i32*, i32** %111, align 8
  %113 = icmp eq i32* %112, null
  br i1 %113, label %116, label %114

114:                                              ; preds = %110
  %115 = bitcast i32* %112 to i8*
  call void @_ZdaPv(i8* %115) #9
  br label %116

116:                                              ; preds = %104, %110, %114
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %73) #8
  %117 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  %118 = load i32, i32* %117, align 8
  %119 = icmp sgt i32 %118, 5
  br i1 %119, label %120, label %126

120:                                              ; preds = %116
  %121 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %122 = load i32*, i32** %121, align 8
  %123 = icmp eq i32* %122, null
  br i1 %123, label %126, label %124

124:                                              ; preds = %120
  %125 = bitcast i32* %122 to i8*
  call void @_ZdaPv(i8* %125) #9
  br label %126

126:                                              ; preds = %116, %120, %124
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %43) #8
  %127 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  %128 = load i32, i32* %127, align 8
  %129 = icmp sgt i32 %128, 5
  br i1 %129, label %130, label %136

130:                                              ; preds = %126
  %131 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %132 = load i32*, i32** %131, align 8
  %133 = icmp eq i32* %132, null
  br i1 %133, label %136, label %134

134:                                              ; preds = %130
  %135 = bitcast i32* %132 to i8*
  call void @_ZdaPv(i8* %135) #9
  br label %136

136:                                              ; preds = %126, %130, %134
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #8
  %137 = icmp eq i32 %106, 0
  br i1 %137, label %138, label %303

138:                                              ; preds = %136
  %139 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %140 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %139, align 8
  %141 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %140, i64 0, i32 1, i64 0
  %142 = load i32, i32* %141, align 4
  %143 = call %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32 %142) #8
  br i1 %74, label %148, label %144

144:                                              ; preds = %138
  %145 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1, i32 0
  %146 = load i32*, i32** %145, align 8
  %147 = bitcast i32* %146 to i8*
  br label %148

148:                                              ; preds = %144, %138
  %149 = phi i8* [ %147, %144 ], [ null, %138 ]
  %150 = phi i32* [ %146, %144 ], [ null, %138 ]
  %151 = icmp sgt i32 %142, 0
  br i1 %151, label %152, label %281

152:                                              ; preds = %148
  %153 = zext i32 %142 to i64
  %154 = icmp ult i32 %142, 8
  br i1 %154, label %244, label %155

155:                                              ; preds = %152
  %156 = getelementptr %struct.TfLiteIntArray, %struct.TfLiteIntArray* %143, i64 1
  %157 = add nuw nsw i64 %153, 1
  %158 = getelementptr %struct.TfLiteIntArray, %struct.TfLiteIntArray* %143, i64 %157
  %159 = bitcast %struct.TfLiteIntArray* %158 to i8*
  %160 = getelementptr i32, i32* %150, i64 %153
  %161 = bitcast i32* %160 to %struct.TfLiteIntArray*
  %162 = icmp ult %struct.TfLiteIntArray* %156, %161
  %163 = icmp ult i8* %149, %159
  %164 = and i1 %162, %163
  br i1 %164, label %244, label %165

165:                                              ; preds = %155
  %166 = and i64 %153, 4294967288
  %167 = add nsw i64 %166, -8
  %168 = lshr exact i64 %167, 3
  %169 = add nuw nsw i64 %168, 1
  %170 = and i64 %169, 3
  %171 = icmp ult i64 %167, 24
  br i1 %171, label %223, label %172

172:                                              ; preds = %165
  %173 = sub nsw i64 %169, %170
  br label %174

174:                                              ; preds = %174, %172
  %175 = phi i64 [ 0, %172 ], [ %220, %174 ]
  %176 = phi i64 [ %173, %172 ], [ %221, %174 ]
  %177 = getelementptr inbounds i32, i32* %150, i64 %175
  %178 = bitcast i32* %177 to <4 x i32>*
  %179 = load <4 x i32>, <4 x i32>* %178, align 4, !alias.scope !31
  %180 = getelementptr inbounds i32, i32* %177, i64 4
  %181 = bitcast i32* %180 to <4 x i32>*
  %182 = load <4 x i32>, <4 x i32>* %181, align 4, !alias.scope !31
  %183 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %143, i64 0, i32 1, i64 %175
  %184 = bitcast i32* %183 to <4 x i32>*
  store <4 x i32> %179, <4 x i32>* %184, align 4, !alias.scope !34, !noalias !31
  %185 = getelementptr inbounds i32, i32* %183, i64 4
  %186 = bitcast i32* %185 to <4 x i32>*
  store <4 x i32> %182, <4 x i32>* %186, align 4, !alias.scope !34, !noalias !31
  %187 = or i64 %175, 8
  %188 = getelementptr inbounds i32, i32* %150, i64 %187
  %189 = bitcast i32* %188 to <4 x i32>*
  %190 = load <4 x i32>, <4 x i32>* %189, align 4, !alias.scope !31
  %191 = getelementptr inbounds i32, i32* %188, i64 4
  %192 = bitcast i32* %191 to <4 x i32>*
  %193 = load <4 x i32>, <4 x i32>* %192, align 4, !alias.scope !31
  %194 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %143, i64 0, i32 1, i64 %187
  %195 = bitcast i32* %194 to <4 x i32>*
  store <4 x i32> %190, <4 x i32>* %195, align 4, !alias.scope !34, !noalias !31
  %196 = getelementptr inbounds i32, i32* %194, i64 4
  %197 = bitcast i32* %196 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %197, align 4, !alias.scope !34, !noalias !31
  %198 = or i64 %175, 16
  %199 = getelementptr inbounds i32, i32* %150, i64 %198
  %200 = bitcast i32* %199 to <4 x i32>*
  %201 = load <4 x i32>, <4 x i32>* %200, align 4, !alias.scope !31
  %202 = getelementptr inbounds i32, i32* %199, i64 4
  %203 = bitcast i32* %202 to <4 x i32>*
  %204 = load <4 x i32>, <4 x i32>* %203, align 4, !alias.scope !31
  %205 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %143, i64 0, i32 1, i64 %198
  %206 = bitcast i32* %205 to <4 x i32>*
  store <4 x i32> %201, <4 x i32>* %206, align 4, !alias.scope !34, !noalias !31
  %207 = getelementptr inbounds i32, i32* %205, i64 4
  %208 = bitcast i32* %207 to <4 x i32>*
  store <4 x i32> %204, <4 x i32>* %208, align 4, !alias.scope !34, !noalias !31
  %209 = or i64 %175, 24
  %210 = getelementptr inbounds i32, i32* %150, i64 %209
  %211 = bitcast i32* %210 to <4 x i32>*
  %212 = load <4 x i32>, <4 x i32>* %211, align 4, !alias.scope !31
  %213 = getelementptr inbounds i32, i32* %210, i64 4
  %214 = bitcast i32* %213 to <4 x i32>*
  %215 = load <4 x i32>, <4 x i32>* %214, align 4, !alias.scope !31
  %216 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %143, i64 0, i32 1, i64 %209
  %217 = bitcast i32* %216 to <4 x i32>*
  store <4 x i32> %212, <4 x i32>* %217, align 4, !alias.scope !34, !noalias !31
  %218 = getelementptr inbounds i32, i32* %216, i64 4
  %219 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %215, <4 x i32>* %219, align 4, !alias.scope !34, !noalias !31
  %220 = add i64 %175, 32
  %221 = add i64 %176, -4
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %223, label %174, !llvm.loop !36

223:                                              ; preds = %174, %165
  %224 = phi i64 [ 0, %165 ], [ %220, %174 ]
  %225 = icmp eq i64 %170, 0
  br i1 %225, label %242, label %226

226:                                              ; preds = %223, %226
  %227 = phi i64 [ %239, %226 ], [ %224, %223 ]
  %228 = phi i64 [ %240, %226 ], [ %170, %223 ]
  %229 = getelementptr inbounds i32, i32* %150, i64 %227
  %230 = bitcast i32* %229 to <4 x i32>*
  %231 = load <4 x i32>, <4 x i32>* %230, align 4, !alias.scope !31
  %232 = getelementptr inbounds i32, i32* %229, i64 4
  %233 = bitcast i32* %232 to <4 x i32>*
  %234 = load <4 x i32>, <4 x i32>* %233, align 4, !alias.scope !31
  %235 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %143, i64 0, i32 1, i64 %227
  %236 = bitcast i32* %235 to <4 x i32>*
  store <4 x i32> %231, <4 x i32>* %236, align 4, !alias.scope !34, !noalias !31
  %237 = getelementptr inbounds i32, i32* %235, i64 4
  %238 = bitcast i32* %237 to <4 x i32>*
  store <4 x i32> %234, <4 x i32>* %238, align 4, !alias.scope !34, !noalias !31
  %239 = add i64 %227, 8
  %240 = add i64 %228, -1
  %241 = icmp eq i64 %240, 0
  br i1 %241, label %242, label %226, !llvm.loop !37

242:                                              ; preds = %226, %223
  %243 = icmp eq i64 %166, %153
  br i1 %243, label %281, label %244

244:                                              ; preds = %242, %155, %152
  %245 = phi i64 [ 0, %155 ], [ 0, %152 ], [ %166, %242 ]
  %246 = xor i64 %245, -1
  %247 = add nsw i64 %246, %153
  %248 = and i64 %153, 3
  %249 = icmp eq i64 %248, 0
  br i1 %249, label %259, label %250

250:                                              ; preds = %244, %250
  %251 = phi i64 [ %256, %250 ], [ %245, %244 ]
  %252 = phi i64 [ %257, %250 ], [ %248, %244 ]
  %253 = getelementptr inbounds i32, i32* %150, i64 %251
  %254 = load i32, i32* %253, align 4
  %255 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %143, i64 0, i32 1, i64 %251
  store i32 %254, i32* %255, align 4
  %256 = add nuw nsw i64 %251, 1
  %257 = add i64 %252, -1
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %259, label %250, !llvm.loop !38

259:                                              ; preds = %250, %244
  %260 = phi i64 [ %245, %244 ], [ %256, %250 ]
  %261 = icmp ult i64 %247, 3
  br i1 %261, label %281, label %262

262:                                              ; preds = %259, %262
  %263 = phi i64 [ %279, %262 ], [ %260, %259 ]
  %264 = getelementptr inbounds i32, i32* %150, i64 %263
  %265 = load i32, i32* %264, align 4
  %266 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %143, i64 0, i32 1, i64 %263
  store i32 %265, i32* %266, align 4
  %267 = add nuw nsw i64 %263, 1
  %268 = getelementptr inbounds i32, i32* %150, i64 %267
  %269 = load i32, i32* %268, align 4
  %270 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %143, i64 0, i32 1, i64 %267
  store i32 %269, i32* %270, align 4
  %271 = add nuw nsw i64 %263, 2
  %272 = getelementptr inbounds i32, i32* %150, i64 %271
  %273 = load i32, i32* %272, align 4
  %274 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %143, i64 0, i32 1, i64 %271
  store i32 %273, i32* %274, align 4
  %275 = add nuw nsw i64 %263, 3
  %276 = getelementptr inbounds i32, i32* %150, i64 %275
  %277 = load i32, i32* %276, align 4
  %278 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %143, i64 0, i32 1, i64 %275
  store i32 %277, i32* %278, align 4
  %279 = add nuw nsw i64 %263, 4
  %280 = icmp eq i64 %279, %153
  br i1 %280, label %281, label %262, !llvm.loop !39

281:                                              ; preds = %259, %262, %242, %148
  %282 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %283 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %282, align 8
  %284 = call i32 %283(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %4, %struct.TfLiteIntArray* %143) #8
  %285 = icmp eq i32 %284, 0
  br i1 %285, label %286, label %303

286:                                              ; preds = %281, %5
  %287 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 0
  %288 = load i32, i32* %287, align 8
  switch i32 %288, label %299 [
    i32 1, label %289
    i32 3, label %291
    i32 9, label %293
    i32 2, label %295
    i32 4, label %297
  ]

289:                                              ; preds = %286
  %290 = call i32 @_ZN6tflite3ops7builtin10scatter_nd9ScatterNdIifEE12TfLiteStatusPK12TfLiteTensorS7_PS5_(%struct.TfLiteTensor* %1, %struct.TfLiteTensor* %2, %struct.TfLiteTensor* %4)
  br label %303

291:                                              ; preds = %286
  %292 = call i32 @_ZN6tflite3ops7builtin10scatter_nd9ScatterNdIihEE12TfLiteStatusPK12TfLiteTensorS7_PS5_(%struct.TfLiteTensor* %1, %struct.TfLiteTensor* %2, %struct.TfLiteTensor* %4)
  br label %303

293:                                              ; preds = %286
  %294 = call i32 @_ZN6tflite3ops7builtin10scatter_nd9ScatterNdIiaEE12TfLiteStatusPK12TfLiteTensorS7_PS5_(%struct.TfLiteTensor* %1, %struct.TfLiteTensor* %2, %struct.TfLiteTensor* %4)
  br label %303

295:                                              ; preds = %286
  %296 = call i32 @_ZN6tflite3ops7builtin10scatter_nd9ScatterNdIiiEE12TfLiteStatusPK12TfLiteTensorS7_PS5_(%struct.TfLiteTensor* %1, %struct.TfLiteTensor* %2, %struct.TfLiteTensor* %4)
  br label %303

297:                                              ; preds = %286
  %298 = call i32 @_ZN6tflite3ops7builtin10scatter_nd9ScatterNdIilEE12TfLiteStatusPK12TfLiteTensorS7_PS5_(%struct.TfLiteTensor* %1, %struct.TfLiteTensor* %2, %struct.TfLiteTensor* %4)
  br label %303

299:                                              ; preds = %286
  %300 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %301 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %300, align 8
  %302 = call i8* @TfLiteTypeGetName(i32 %288) #8
  call void (%struct.TfLiteContext*, i8*, ...) %301(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.8, i64 0, i64 0), i8* %302) #8
  br label %303

303:                                              ; preds = %281, %136, %299, %297, %295, %293, %291, %289
  %304 = phi i32 [ 1, %299 ], [ %298, %297 ], [ %296, %295 ], [ %294, %293 ], [ %292, %291 ], [ %290, %289 ], [ %284, %281 ], [ %106, %136 ]
  ret i32 %304
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin19Register_SCATTER_NDEv() local_unnamed_addr #3 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin19Register_SCATTER_NDEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #5

declare %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin10scatter_nd9ScatterNdIifEE12TfLiteStatusPK12TfLiteTensorS7_PS5_(%struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #8
  %8 = icmp eq %struct.TfLiteTensor* %0, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %10, align 8, !alias.scope !40
  br label %38

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 2
  %13 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %12, align 8, !noalias !40
  %14 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 0
  %15 = load i32, i32* %14, align 4, !noalias !40
  %16 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 1, i64 0
  %17 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %15, i32* %17, align 8, !alias.scope !40
  %18 = icmp sgt i32 %15, 5
  br i1 %18, label %19, label %26

19:                                               ; preds = %11
  %20 = sext i32 %15 to i64
  %21 = shl nsw i64 %20, 2
  %22 = tail call i8* @_Znam(i64 %21) #9, !noalias !40
  %23 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %24 = bitcast i32** %23 to i8**
  store i8* %22, i8** %24, align 8, !alias.scope !40
  %25 = bitcast i8* %22 to i32*
  br label %31

26:                                               ; preds = %11
  %27 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %28 = bitcast %union.anon* %27 to i32*
  %29 = sext i32 %15 to i64
  %30 = shl nsw i64 %29, 2
  br label %31

31:                                               ; preds = %26, %19
  %32 = phi i64 [ %21, %19 ], [ %30, %26 ]
  %33 = phi i32* [ %25, %19 ], [ %28, %26 ]
  %34 = bitcast i32* %33 to i8*
  %35 = bitcast i32* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %34, i8* align 4 %35, i64 %32, i1 false) #8
  %36 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 1, i32 0
  %37 = load i32*, i32** %36, align 8
  br label %38

38:                                               ; preds = %9, %31
  %39 = phi i32* [ %37, %31 ], [ null, %9 ]
  %40 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %40) #8
  %41 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %41, label %42, label %44

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %43, align 8, !alias.scope !43
  br label %72

44:                                               ; preds = %38
  %45 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %46 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %45, align 8, !noalias !43
  %47 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %46, i64 0, i32 0
  %48 = load i32, i32* %47, align 4, !noalias !43
  %49 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %46, i64 0, i32 1, i64 0
  %50 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %48, i32* %50, align 8, !alias.scope !43
  %51 = icmp sgt i32 %48, 5
  br i1 %51, label %52, label %59

52:                                               ; preds = %44
  %53 = sext i32 %48 to i64
  %54 = shl nsw i64 %53, 2
  %55 = tail call i8* @_Znam(i64 %54) #9, !noalias !43
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %57 = bitcast i32** %56 to i8**
  store i8* %55, i8** %57, align 8, !alias.scope !43
  %58 = bitcast i8* %55 to i32*
  br label %64

59:                                               ; preds = %44
  %60 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %61 = bitcast %union.anon* %60 to i32*
  %62 = sext i32 %48 to i64
  %63 = shl nsw i64 %62, 2
  br label %64

64:                                               ; preds = %59, %52
  %65 = phi i64 [ %54, %52 ], [ %63, %59 ]
  %66 = phi i32* [ %58, %52 ], [ %61, %59 ]
  %67 = bitcast i32* %66 to i8*
  %68 = bitcast i32* %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %67, i8* align 4 %68, i64 %65, i1 false) #8
  %69 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %70 = bitcast %union.TfLitePtrUnion* %69 to float**
  %71 = load float*, float** %70, align 8
  br label %72

72:                                               ; preds = %42, %64
  %73 = phi float* [ %71, %64 ], [ null, %42 ]
  %74 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %74) #8
  %75 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %75, label %76, label %78

76:                                               ; preds = %72
  %77 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %77, align 8, !alias.scope !46
  br label %106

78:                                               ; preds = %72
  %79 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %80 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %79, align 8, !noalias !46
  %81 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %80, i64 0, i32 0
  %82 = load i32, i32* %81, align 4, !noalias !46
  %83 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %80, i64 0, i32 1, i64 0
  %84 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %82, i32* %84, align 8, !alias.scope !46
  %85 = icmp sgt i32 %82, 5
  br i1 %85, label %86, label %93

86:                                               ; preds = %78
  %87 = sext i32 %82 to i64
  %88 = shl nsw i64 %87, 2
  %89 = tail call i8* @_Znam(i64 %88) #9, !noalias !46
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %91 = bitcast i32** %90 to i8**
  store i8* %89, i8** %91, align 8, !alias.scope !46
  %92 = bitcast i8* %89 to i32*
  br label %98

93:                                               ; preds = %78
  %94 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %95 = bitcast %union.anon* %94 to i32*
  %96 = sext i32 %82 to i64
  %97 = shl nsw i64 %96, 2
  br label %98

98:                                               ; preds = %93, %86
  %99 = phi i64 [ %88, %86 ], [ %97, %93 ]
  %100 = phi i32* [ %92, %86 ], [ %95, %93 ]
  %101 = bitcast i32* %100 to i8*
  %102 = bitcast i32* %83 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %101, i8* align 4 %102, i64 %99, i1 false) #8
  %103 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %104 = bitcast %union.TfLitePtrUnion* %103 to float**
  %105 = load float*, float** %104, align 8
  br label %106

106:                                              ; preds = %76, %98
  %107 = phi float* [ %105, %98 ], [ null, %76 ]
  call void @_ZN6tflite13reference_ops9ScatterNdIifEEvRKNS_12RuntimeShapeEPKT_S4_PKT0_S4_PS8_(%"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %4, i32* %39, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %5, float* %73, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %6, float* %107)
  %108 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  %109 = load i32, i32* %108, align 8
  %110 = icmp sgt i32 %109, 5
  br i1 %110, label %111, label %117

111:                                              ; preds = %106
  %112 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %113 = load i32*, i32** %112, align 8
  %114 = icmp eq i32* %113, null
  br i1 %114, label %117, label %115

115:                                              ; preds = %111
  %116 = bitcast i32* %113 to i8*
  call void @_ZdaPv(i8* %116) #9
  br label %117

117:                                              ; preds = %106, %111, %115
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %74) #8
  %118 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %119 = load i32, i32* %118, align 8
  %120 = icmp sgt i32 %119, 5
  br i1 %120, label %121, label %127

121:                                              ; preds = %117
  %122 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %123 = load i32*, i32** %122, align 8
  %124 = icmp eq i32* %123, null
  br i1 %124, label %127, label %125

125:                                              ; preds = %121
  %126 = bitcast i32* %123 to i8*
  call void @_ZdaPv(i8* %126) #9
  br label %127

127:                                              ; preds = %117, %121, %125
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %40) #8
  %128 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  %129 = load i32, i32* %128, align 8
  %130 = icmp sgt i32 %129, 5
  br i1 %130, label %131, label %137

131:                                              ; preds = %127
  %132 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %133 = load i32*, i32** %132, align 8
  %134 = icmp eq i32* %133, null
  br i1 %134, label %137, label %135

135:                                              ; preds = %131
  %136 = bitcast i32* %133 to i8*
  call void @_ZdaPv(i8* %136) #9
  br label %137

137:                                              ; preds = %127, %131, %135
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin10scatter_nd9ScatterNdIihEE12TfLiteStatusPK12TfLiteTensorS7_PS5_(%struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #8
  %8 = icmp eq %struct.TfLiteTensor* %0, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %10, align 8, !alias.scope !49
  br label %38

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 2
  %13 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %12, align 8, !noalias !49
  %14 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 0
  %15 = load i32, i32* %14, align 4, !noalias !49
  %16 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 1, i64 0
  %17 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %15, i32* %17, align 8, !alias.scope !49
  %18 = icmp sgt i32 %15, 5
  br i1 %18, label %19, label %26

19:                                               ; preds = %11
  %20 = sext i32 %15 to i64
  %21 = shl nsw i64 %20, 2
  %22 = tail call i8* @_Znam(i64 %21) #9, !noalias !49
  %23 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %24 = bitcast i32** %23 to i8**
  store i8* %22, i8** %24, align 8, !alias.scope !49
  %25 = bitcast i8* %22 to i32*
  br label %31

26:                                               ; preds = %11
  %27 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %28 = bitcast %union.anon* %27 to i32*
  %29 = sext i32 %15 to i64
  %30 = shl nsw i64 %29, 2
  br label %31

31:                                               ; preds = %26, %19
  %32 = phi i64 [ %21, %19 ], [ %30, %26 ]
  %33 = phi i32* [ %25, %19 ], [ %28, %26 ]
  %34 = bitcast i32* %33 to i8*
  %35 = bitcast i32* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %34, i8* align 4 %35, i64 %32, i1 false) #8
  %36 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 1, i32 0
  %37 = load i32*, i32** %36, align 8
  br label %38

38:                                               ; preds = %9, %31
  %39 = phi i32* [ %37, %31 ], [ null, %9 ]
  %40 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %40) #8
  %41 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %41, label %42, label %44

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %43, align 8, !alias.scope !52
  br label %72

44:                                               ; preds = %38
  %45 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %46 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %45, align 8, !noalias !52
  %47 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %46, i64 0, i32 0
  %48 = load i32, i32* %47, align 4, !noalias !52
  %49 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %46, i64 0, i32 1, i64 0
  %50 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %48, i32* %50, align 8, !alias.scope !52
  %51 = icmp sgt i32 %48, 5
  br i1 %51, label %52, label %59

52:                                               ; preds = %44
  %53 = sext i32 %48 to i64
  %54 = shl nsw i64 %53, 2
  %55 = tail call i8* @_Znam(i64 %54) #9, !noalias !52
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %57 = bitcast i32** %56 to i8**
  store i8* %55, i8** %57, align 8, !alias.scope !52
  %58 = bitcast i8* %55 to i32*
  br label %64

59:                                               ; preds = %44
  %60 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %61 = bitcast %union.anon* %60 to i32*
  %62 = sext i32 %48 to i64
  %63 = shl nsw i64 %62, 2
  br label %64

64:                                               ; preds = %59, %52
  %65 = phi i64 [ %54, %52 ], [ %63, %59 ]
  %66 = phi i32* [ %58, %52 ], [ %61, %59 ]
  %67 = bitcast i32* %66 to i8*
  %68 = bitcast i32* %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %67, i8* align 4 %68, i64 %65, i1 false) #8
  %69 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %70 = bitcast %union.TfLitePtrUnion* %69 to i8**
  %71 = load i8*, i8** %70, align 8
  br label %72

72:                                               ; preds = %42, %64
  %73 = phi i8* [ %71, %64 ], [ null, %42 ]
  %74 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %74) #8
  %75 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %75, label %76, label %78

76:                                               ; preds = %72
  %77 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %77, align 8, !alias.scope !55
  br label %106

78:                                               ; preds = %72
  %79 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %80 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %79, align 8, !noalias !55
  %81 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %80, i64 0, i32 0
  %82 = load i32, i32* %81, align 4, !noalias !55
  %83 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %80, i64 0, i32 1, i64 0
  %84 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %82, i32* %84, align 8, !alias.scope !55
  %85 = icmp sgt i32 %82, 5
  br i1 %85, label %86, label %93

86:                                               ; preds = %78
  %87 = sext i32 %82 to i64
  %88 = shl nsw i64 %87, 2
  %89 = tail call i8* @_Znam(i64 %88) #9, !noalias !55
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %91 = bitcast i32** %90 to i8**
  store i8* %89, i8** %91, align 8, !alias.scope !55
  %92 = bitcast i8* %89 to i32*
  br label %98

93:                                               ; preds = %78
  %94 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %95 = bitcast %union.anon* %94 to i32*
  %96 = sext i32 %82 to i64
  %97 = shl nsw i64 %96, 2
  br label %98

98:                                               ; preds = %93, %86
  %99 = phi i64 [ %88, %86 ], [ %97, %93 ]
  %100 = phi i32* [ %92, %86 ], [ %95, %93 ]
  %101 = bitcast i32* %100 to i8*
  %102 = bitcast i32* %83 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %101, i8* align 4 %102, i64 %99, i1 false) #8
  %103 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %104 = bitcast %union.TfLitePtrUnion* %103 to i8**
  %105 = load i8*, i8** %104, align 8
  br label %106

106:                                              ; preds = %76, %98
  %107 = phi i8* [ %105, %98 ], [ null, %76 ]
  call void @_ZN6tflite13reference_ops9ScatterNdIihEEvRKNS_12RuntimeShapeEPKT_S4_PKT0_S4_PS8_(%"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %4, i32* %39, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %5, i8* %73, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %6, i8* %107)
  %108 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  %109 = load i32, i32* %108, align 8
  %110 = icmp sgt i32 %109, 5
  br i1 %110, label %111, label %117

111:                                              ; preds = %106
  %112 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %113 = load i32*, i32** %112, align 8
  %114 = icmp eq i32* %113, null
  br i1 %114, label %117, label %115

115:                                              ; preds = %111
  %116 = bitcast i32* %113 to i8*
  call void @_ZdaPv(i8* %116) #9
  br label %117

117:                                              ; preds = %106, %111, %115
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %74) #8
  %118 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %119 = load i32, i32* %118, align 8
  %120 = icmp sgt i32 %119, 5
  br i1 %120, label %121, label %127

121:                                              ; preds = %117
  %122 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %123 = load i32*, i32** %122, align 8
  %124 = icmp eq i32* %123, null
  br i1 %124, label %127, label %125

125:                                              ; preds = %121
  %126 = bitcast i32* %123 to i8*
  call void @_ZdaPv(i8* %126) #9
  br label %127

127:                                              ; preds = %117, %121, %125
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %40) #8
  %128 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  %129 = load i32, i32* %128, align 8
  %130 = icmp sgt i32 %129, 5
  br i1 %130, label %131, label %137

131:                                              ; preds = %127
  %132 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %133 = load i32*, i32** %132, align 8
  %134 = icmp eq i32* %133, null
  br i1 %134, label %137, label %135

135:                                              ; preds = %131
  %136 = bitcast i32* %133 to i8*
  call void @_ZdaPv(i8* %136) #9
  br label %137

137:                                              ; preds = %127, %131, %135
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin10scatter_nd9ScatterNdIiaEE12TfLiteStatusPK12TfLiteTensorS7_PS5_(%struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #8
  %8 = icmp eq %struct.TfLiteTensor* %0, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %10, align 8, !alias.scope !58
  br label %38

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 2
  %13 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %12, align 8, !noalias !58
  %14 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 0
  %15 = load i32, i32* %14, align 4, !noalias !58
  %16 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 1, i64 0
  %17 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %15, i32* %17, align 8, !alias.scope !58
  %18 = icmp sgt i32 %15, 5
  br i1 %18, label %19, label %26

19:                                               ; preds = %11
  %20 = sext i32 %15 to i64
  %21 = shl nsw i64 %20, 2
  %22 = tail call i8* @_Znam(i64 %21) #9, !noalias !58
  %23 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %24 = bitcast i32** %23 to i8**
  store i8* %22, i8** %24, align 8, !alias.scope !58
  %25 = bitcast i8* %22 to i32*
  br label %31

26:                                               ; preds = %11
  %27 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %28 = bitcast %union.anon* %27 to i32*
  %29 = sext i32 %15 to i64
  %30 = shl nsw i64 %29, 2
  br label %31

31:                                               ; preds = %26, %19
  %32 = phi i64 [ %21, %19 ], [ %30, %26 ]
  %33 = phi i32* [ %25, %19 ], [ %28, %26 ]
  %34 = bitcast i32* %33 to i8*
  %35 = bitcast i32* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %34, i8* align 4 %35, i64 %32, i1 false) #8
  %36 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 1, i32 0
  %37 = load i32*, i32** %36, align 8
  br label %38

38:                                               ; preds = %9, %31
  %39 = phi i32* [ %37, %31 ], [ null, %9 ]
  %40 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %40) #8
  %41 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %41, label %42, label %44

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %43, align 8, !alias.scope !61
  br label %72

44:                                               ; preds = %38
  %45 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %46 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %45, align 8, !noalias !61
  %47 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %46, i64 0, i32 0
  %48 = load i32, i32* %47, align 4, !noalias !61
  %49 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %46, i64 0, i32 1, i64 0
  %50 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %48, i32* %50, align 8, !alias.scope !61
  %51 = icmp sgt i32 %48, 5
  br i1 %51, label %52, label %59

52:                                               ; preds = %44
  %53 = sext i32 %48 to i64
  %54 = shl nsw i64 %53, 2
  %55 = tail call i8* @_Znam(i64 %54) #9, !noalias !61
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %57 = bitcast i32** %56 to i8**
  store i8* %55, i8** %57, align 8, !alias.scope !61
  %58 = bitcast i8* %55 to i32*
  br label %64

59:                                               ; preds = %44
  %60 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %61 = bitcast %union.anon* %60 to i32*
  %62 = sext i32 %48 to i64
  %63 = shl nsw i64 %62, 2
  br label %64

64:                                               ; preds = %59, %52
  %65 = phi i64 [ %54, %52 ], [ %63, %59 ]
  %66 = phi i32* [ %58, %52 ], [ %61, %59 ]
  %67 = bitcast i32* %66 to i8*
  %68 = bitcast i32* %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %67, i8* align 4 %68, i64 %65, i1 false) #8
  %69 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %70 = bitcast %union.TfLitePtrUnion* %69 to i8**
  %71 = load i8*, i8** %70, align 8
  br label %72

72:                                               ; preds = %42, %64
  %73 = phi i8* [ %71, %64 ], [ null, %42 ]
  %74 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %74) #8
  %75 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %75, label %76, label %78

76:                                               ; preds = %72
  %77 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %77, align 8, !alias.scope !64
  br label %106

78:                                               ; preds = %72
  %79 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %80 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %79, align 8, !noalias !64
  %81 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %80, i64 0, i32 0
  %82 = load i32, i32* %81, align 4, !noalias !64
  %83 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %80, i64 0, i32 1, i64 0
  %84 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %82, i32* %84, align 8, !alias.scope !64
  %85 = icmp sgt i32 %82, 5
  br i1 %85, label %86, label %93

86:                                               ; preds = %78
  %87 = sext i32 %82 to i64
  %88 = shl nsw i64 %87, 2
  %89 = tail call i8* @_Znam(i64 %88) #9, !noalias !64
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %91 = bitcast i32** %90 to i8**
  store i8* %89, i8** %91, align 8, !alias.scope !64
  %92 = bitcast i8* %89 to i32*
  br label %98

93:                                               ; preds = %78
  %94 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %95 = bitcast %union.anon* %94 to i32*
  %96 = sext i32 %82 to i64
  %97 = shl nsw i64 %96, 2
  br label %98

98:                                               ; preds = %93, %86
  %99 = phi i64 [ %88, %86 ], [ %97, %93 ]
  %100 = phi i32* [ %92, %86 ], [ %95, %93 ]
  %101 = bitcast i32* %100 to i8*
  %102 = bitcast i32* %83 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %101, i8* align 4 %102, i64 %99, i1 false) #8
  %103 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %104 = bitcast %union.TfLitePtrUnion* %103 to i8**
  %105 = load i8*, i8** %104, align 8
  br label %106

106:                                              ; preds = %76, %98
  %107 = phi i8* [ %105, %98 ], [ null, %76 ]
  call void @_ZN6tflite13reference_ops9ScatterNdIiaEEvRKNS_12RuntimeShapeEPKT_S4_PKT0_S4_PS8_(%"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %4, i32* %39, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %5, i8* %73, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %6, i8* %107)
  %108 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  %109 = load i32, i32* %108, align 8
  %110 = icmp sgt i32 %109, 5
  br i1 %110, label %111, label %117

111:                                              ; preds = %106
  %112 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %113 = load i32*, i32** %112, align 8
  %114 = icmp eq i32* %113, null
  br i1 %114, label %117, label %115

115:                                              ; preds = %111
  %116 = bitcast i32* %113 to i8*
  call void @_ZdaPv(i8* %116) #9
  br label %117

117:                                              ; preds = %106, %111, %115
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %74) #8
  %118 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %119 = load i32, i32* %118, align 8
  %120 = icmp sgt i32 %119, 5
  br i1 %120, label %121, label %127

121:                                              ; preds = %117
  %122 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %123 = load i32*, i32** %122, align 8
  %124 = icmp eq i32* %123, null
  br i1 %124, label %127, label %125

125:                                              ; preds = %121
  %126 = bitcast i32* %123 to i8*
  call void @_ZdaPv(i8* %126) #9
  br label %127

127:                                              ; preds = %117, %121, %125
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %40) #8
  %128 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  %129 = load i32, i32* %128, align 8
  %130 = icmp sgt i32 %129, 5
  br i1 %130, label %131, label %137

131:                                              ; preds = %127
  %132 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %133 = load i32*, i32** %132, align 8
  %134 = icmp eq i32* %133, null
  br i1 %134, label %137, label %135

135:                                              ; preds = %131
  %136 = bitcast i32* %133 to i8*
  call void @_ZdaPv(i8* %136) #9
  br label %137

137:                                              ; preds = %127, %131, %135
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin10scatter_nd9ScatterNdIiiEE12TfLiteStatusPK12TfLiteTensorS7_PS5_(%struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #8
  %8 = icmp eq %struct.TfLiteTensor* %0, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %10, align 8, !alias.scope !67
  br label %38

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 2
  %13 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %12, align 8, !noalias !67
  %14 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 0
  %15 = load i32, i32* %14, align 4, !noalias !67
  %16 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 1, i64 0
  %17 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %15, i32* %17, align 8, !alias.scope !67
  %18 = icmp sgt i32 %15, 5
  br i1 %18, label %19, label %26

19:                                               ; preds = %11
  %20 = sext i32 %15 to i64
  %21 = shl nsw i64 %20, 2
  %22 = tail call i8* @_Znam(i64 %21) #9, !noalias !67
  %23 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %24 = bitcast i32** %23 to i8**
  store i8* %22, i8** %24, align 8, !alias.scope !67
  %25 = bitcast i8* %22 to i32*
  br label %31

26:                                               ; preds = %11
  %27 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %28 = bitcast %union.anon* %27 to i32*
  %29 = sext i32 %15 to i64
  %30 = shl nsw i64 %29, 2
  br label %31

31:                                               ; preds = %26, %19
  %32 = phi i64 [ %21, %19 ], [ %30, %26 ]
  %33 = phi i32* [ %25, %19 ], [ %28, %26 ]
  %34 = bitcast i32* %33 to i8*
  %35 = bitcast i32* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %34, i8* align 4 %35, i64 %32, i1 false) #8
  %36 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 1, i32 0
  %37 = load i32*, i32** %36, align 8
  br label %38

38:                                               ; preds = %9, %31
  %39 = phi i32* [ %37, %31 ], [ null, %9 ]
  %40 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %40) #8
  %41 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %41, label %42, label %44

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %43, align 8, !alias.scope !70
  br label %71

44:                                               ; preds = %38
  %45 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %46 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %45, align 8, !noalias !70
  %47 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %46, i64 0, i32 0
  %48 = load i32, i32* %47, align 4, !noalias !70
  %49 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %46, i64 0, i32 1, i64 0
  %50 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %48, i32* %50, align 8, !alias.scope !70
  %51 = icmp sgt i32 %48, 5
  br i1 %51, label %52, label %59

52:                                               ; preds = %44
  %53 = sext i32 %48 to i64
  %54 = shl nsw i64 %53, 2
  %55 = tail call i8* @_Znam(i64 %54) #9, !noalias !70
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %57 = bitcast i32** %56 to i8**
  store i8* %55, i8** %57, align 8, !alias.scope !70
  %58 = bitcast i8* %55 to i32*
  br label %64

59:                                               ; preds = %44
  %60 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %61 = bitcast %union.anon* %60 to i32*
  %62 = sext i32 %48 to i64
  %63 = shl nsw i64 %62, 2
  br label %64

64:                                               ; preds = %59, %52
  %65 = phi i64 [ %54, %52 ], [ %63, %59 ]
  %66 = phi i32* [ %58, %52 ], [ %61, %59 ]
  %67 = bitcast i32* %66 to i8*
  %68 = bitcast i32* %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %67, i8* align 4 %68, i64 %65, i1 false) #8
  %69 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1, i32 0
  %70 = load i32*, i32** %69, align 8
  br label %71

71:                                               ; preds = %42, %64
  %72 = phi i32* [ %70, %64 ], [ null, %42 ]
  %73 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %73) #8
  %74 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %74, label %75, label %77

75:                                               ; preds = %71
  %76 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %76, align 8, !alias.scope !73
  br label %104

77:                                               ; preds = %71
  %78 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %79 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %78, align 8, !noalias !73
  %80 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %79, i64 0, i32 0
  %81 = load i32, i32* %80, align 4, !noalias !73
  %82 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %79, i64 0, i32 1, i64 0
  %83 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %81, i32* %83, align 8, !alias.scope !73
  %84 = icmp sgt i32 %81, 5
  br i1 %84, label %85, label %92

85:                                               ; preds = %77
  %86 = sext i32 %81 to i64
  %87 = shl nsw i64 %86, 2
  %88 = tail call i8* @_Znam(i64 %87) #9, !noalias !73
  %89 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %90 = bitcast i32** %89 to i8**
  store i8* %88, i8** %90, align 8, !alias.scope !73
  %91 = bitcast i8* %88 to i32*
  br label %97

92:                                               ; preds = %77
  %93 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %94 = bitcast %union.anon* %93 to i32*
  %95 = sext i32 %81 to i64
  %96 = shl nsw i64 %95, 2
  br label %97

97:                                               ; preds = %92, %85
  %98 = phi i64 [ %87, %85 ], [ %96, %92 ]
  %99 = phi i32* [ %91, %85 ], [ %94, %92 ]
  %100 = bitcast i32* %99 to i8*
  %101 = bitcast i32* %82 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %100, i8* align 4 %101, i64 %98, i1 false) #8
  %102 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1, i32 0
  %103 = load i32*, i32** %102, align 8
  br label %104

104:                                              ; preds = %75, %97
  %105 = phi i32* [ %103, %97 ], [ null, %75 ]
  call void @_ZN6tflite13reference_ops9ScatterNdIiiEEvRKNS_12RuntimeShapeEPKT_S4_PKT0_S4_PS8_(%"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %4, i32* %39, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %5, i32* %72, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %6, i32* %105)
  %106 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  %107 = load i32, i32* %106, align 8
  %108 = icmp sgt i32 %107, 5
  br i1 %108, label %109, label %115

109:                                              ; preds = %104
  %110 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %111 = load i32*, i32** %110, align 8
  %112 = icmp eq i32* %111, null
  br i1 %112, label %115, label %113

113:                                              ; preds = %109
  %114 = bitcast i32* %111 to i8*
  call void @_ZdaPv(i8* %114) #9
  br label %115

115:                                              ; preds = %104, %109, %113
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %73) #8
  %116 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %117 = load i32, i32* %116, align 8
  %118 = icmp sgt i32 %117, 5
  br i1 %118, label %119, label %125

119:                                              ; preds = %115
  %120 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %121 = load i32*, i32** %120, align 8
  %122 = icmp eq i32* %121, null
  br i1 %122, label %125, label %123

123:                                              ; preds = %119
  %124 = bitcast i32* %121 to i8*
  call void @_ZdaPv(i8* %124) #9
  br label %125

125:                                              ; preds = %115, %119, %123
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %40) #8
  %126 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  %127 = load i32, i32* %126, align 8
  %128 = icmp sgt i32 %127, 5
  br i1 %128, label %129, label %135

129:                                              ; preds = %125
  %130 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %131 = load i32*, i32** %130, align 8
  %132 = icmp eq i32* %131, null
  br i1 %132, label %135, label %133

133:                                              ; preds = %129
  %134 = bitcast i32* %131 to i8*
  call void @_ZdaPv(i8* %134) #9
  br label %135

135:                                              ; preds = %125, %129, %133
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin10scatter_nd9ScatterNdIilEE12TfLiteStatusPK12TfLiteTensorS7_PS5_(%struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #8
  %8 = icmp eq %struct.TfLiteTensor* %0, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %10, align 8, !alias.scope !76
  br label %38

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 2
  %13 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %12, align 8, !noalias !76
  %14 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 0
  %15 = load i32, i32* %14, align 4, !noalias !76
  %16 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 1, i64 0
  %17 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %15, i32* %17, align 8, !alias.scope !76
  %18 = icmp sgt i32 %15, 5
  br i1 %18, label %19, label %26

19:                                               ; preds = %11
  %20 = sext i32 %15 to i64
  %21 = shl nsw i64 %20, 2
  %22 = tail call i8* @_Znam(i64 %21) #9, !noalias !76
  %23 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %24 = bitcast i32** %23 to i8**
  store i8* %22, i8** %24, align 8, !alias.scope !76
  %25 = bitcast i8* %22 to i32*
  br label %31

26:                                               ; preds = %11
  %27 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %28 = bitcast %union.anon* %27 to i32*
  %29 = sext i32 %15 to i64
  %30 = shl nsw i64 %29, 2
  br label %31

31:                                               ; preds = %26, %19
  %32 = phi i64 [ %21, %19 ], [ %30, %26 ]
  %33 = phi i32* [ %25, %19 ], [ %28, %26 ]
  %34 = bitcast i32* %33 to i8*
  %35 = bitcast i32* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %34, i8* align 4 %35, i64 %32, i1 false) #8
  %36 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 1, i32 0
  %37 = load i32*, i32** %36, align 8
  br label %38

38:                                               ; preds = %9, %31
  %39 = phi i32* [ %37, %31 ], [ null, %9 ]
  %40 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %40) #8
  %41 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %41, label %42, label %44

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %43, align 8, !alias.scope !79
  br label %72

44:                                               ; preds = %38
  %45 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %46 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %45, align 8, !noalias !79
  %47 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %46, i64 0, i32 0
  %48 = load i32, i32* %47, align 4, !noalias !79
  %49 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %46, i64 0, i32 1, i64 0
  %50 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %48, i32* %50, align 8, !alias.scope !79
  %51 = icmp sgt i32 %48, 5
  br i1 %51, label %52, label %59

52:                                               ; preds = %44
  %53 = sext i32 %48 to i64
  %54 = shl nsw i64 %53, 2
  %55 = tail call i8* @_Znam(i64 %54) #9, !noalias !79
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %57 = bitcast i32** %56 to i8**
  store i8* %55, i8** %57, align 8, !alias.scope !79
  %58 = bitcast i8* %55 to i32*
  br label %64

59:                                               ; preds = %44
  %60 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %61 = bitcast %union.anon* %60 to i32*
  %62 = sext i32 %48 to i64
  %63 = shl nsw i64 %62, 2
  br label %64

64:                                               ; preds = %59, %52
  %65 = phi i64 [ %54, %52 ], [ %63, %59 ]
  %66 = phi i32* [ %58, %52 ], [ %61, %59 ]
  %67 = bitcast i32* %66 to i8*
  %68 = bitcast i32* %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %67, i8* align 4 %68, i64 %65, i1 false) #8
  %69 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %70 = bitcast %union.TfLitePtrUnion* %69 to i64**
  %71 = load i64*, i64** %70, align 8
  br label %72

72:                                               ; preds = %42, %64
  %73 = phi i64* [ %71, %64 ], [ null, %42 ]
  %74 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %74) #8
  %75 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %75, label %76, label %78

76:                                               ; preds = %72
  %77 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %77, align 8, !alias.scope !82
  br label %106

78:                                               ; preds = %72
  %79 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %80 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %79, align 8, !noalias !82
  %81 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %80, i64 0, i32 0
  %82 = load i32, i32* %81, align 4, !noalias !82
  %83 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %80, i64 0, i32 1, i64 0
  %84 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %82, i32* %84, align 8, !alias.scope !82
  %85 = icmp sgt i32 %82, 5
  br i1 %85, label %86, label %93

86:                                               ; preds = %78
  %87 = sext i32 %82 to i64
  %88 = shl nsw i64 %87, 2
  %89 = tail call i8* @_Znam(i64 %88) #9, !noalias !82
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %91 = bitcast i32** %90 to i8**
  store i8* %89, i8** %91, align 8, !alias.scope !82
  %92 = bitcast i8* %89 to i32*
  br label %98

93:                                               ; preds = %78
  %94 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %95 = bitcast %union.anon* %94 to i32*
  %96 = sext i32 %82 to i64
  %97 = shl nsw i64 %96, 2
  br label %98

98:                                               ; preds = %93, %86
  %99 = phi i64 [ %88, %86 ], [ %97, %93 ]
  %100 = phi i32* [ %92, %86 ], [ %95, %93 ]
  %101 = bitcast i32* %100 to i8*
  %102 = bitcast i32* %83 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %101, i8* align 4 %102, i64 %99, i1 false) #8
  %103 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %104 = bitcast %union.TfLitePtrUnion* %103 to i64**
  %105 = load i64*, i64** %104, align 8
  br label %106

106:                                              ; preds = %76, %98
  %107 = phi i64* [ %105, %98 ], [ null, %76 ]
  call void @_ZN6tflite13reference_ops9ScatterNdIilEEvRKNS_12RuntimeShapeEPKT_S4_PKT0_S4_PS8_(%"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %4, i32* %39, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %5, i64* %73, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %6, i64* %107)
  %108 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  %109 = load i32, i32* %108, align 8
  %110 = icmp sgt i32 %109, 5
  br i1 %110, label %111, label %117

111:                                              ; preds = %106
  %112 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %113 = load i32*, i32** %112, align 8
  %114 = icmp eq i32* %113, null
  br i1 %114, label %117, label %115

115:                                              ; preds = %111
  %116 = bitcast i32* %113 to i8*
  call void @_ZdaPv(i8* %116) #9
  br label %117

117:                                              ; preds = %106, %111, %115
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %74) #8
  %118 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %119 = load i32, i32* %118, align 8
  %120 = icmp sgt i32 %119, 5
  br i1 %120, label %121, label %127

121:                                              ; preds = %117
  %122 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %123 = load i32*, i32** %122, align 8
  %124 = icmp eq i32* %123, null
  br i1 %124, label %127, label %125

125:                                              ; preds = %121
  %126 = bitcast i32* %123 to i8*
  call void @_ZdaPv(i8* %126) #9
  br label %127

127:                                              ; preds = %117, %121, %125
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %40) #8
  %128 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  %129 = load i32, i32* %128, align 8
  %130 = icmp sgt i32 %129, 5
  br i1 %130, label %131, label %137

131:                                              ; preds = %127
  %132 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %133 = load i32*, i32** %132, align 8
  %134 = icmp eq i32* %133, null
  br i1 %134, label %137, label %135

135:                                              ; preds = %131
  %136 = bitcast i32* %133 to i8*
  call void @_ZdaPv(i8* %136) #9
  br label %137

137:                                              ; preds = %127, %131, %135
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #8
  ret i32 0
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops9ScatterNdIifEEvRKNS_12RuntimeShapeEPKT_S4_PKT0_S4_PS8_(%"class.tflite::RuntimeShape"* dereferenceable(32), i32*, %"class.tflite::RuntimeShape"* dereferenceable(32), float*, %"class.tflite::RuntimeShape"* dereferenceable(32), float*) local_unnamed_addr #6 comdat {
  %7 = alloca %"class.std::__1::vector", align 8
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = add i32 %9, -1
  %11 = icmp sgt i32 %9, 5
  %12 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %0, i64 0, i32 1
  %13 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %14 = load i32*, i32** %13, align 8
  %15 = sext i32 %10 to i64
  %16 = getelementptr inbounds i32, i32* %14, i64 %15
  %17 = bitcast %union.anon* %12 to [5 x i32]*
  %18 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %15
  %19 = select i1 %11, i32* %16, i32* %18
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %2, i64 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = icmp sgt i32 %10, 0
  br i1 %23, label %24, label %48

24:                                               ; preds = %6
  %25 = zext i32 %10 to i64
  %26 = add nsw i64 %25, -1
  %27 = and i64 %25, 3
  %28 = icmp ult i64 %26, 3
  br i1 %28, label %31, label %29

29:                                               ; preds = %24
  %30 = sub nsw i64 %25, %27
  br label %58

31:                                               ; preds = %58, %24
  %32 = phi i32 [ undef, %24 ], [ %84, %58 ]
  %33 = phi i64 [ 0, %24 ], [ %85, %58 ]
  %34 = phi i32 [ 1, %24 ], [ %84, %58 ]
  %35 = icmp eq i64 %27, 0
  br i1 %35, label %48, label %36

36:                                               ; preds = %31, %36
  %37 = phi i64 [ %45, %36 ], [ %33, %31 ]
  %38 = phi i32 [ %44, %36 ], [ %34, %31 ]
  %39 = phi i64 [ %46, %36 ], [ %27, %31 ]
  %40 = getelementptr inbounds i32, i32* %14, i64 %37
  %41 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %37
  %42 = select i1 %11, i32* %40, i32* %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %43, %38
  %45 = add nuw nsw i64 %37, 1
  %46 = add i64 %39, -1
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %36, !llvm.loop !85

48:                                               ; preds = %31, %36, %6
  %49 = phi i32 [ 1, %6 ], [ %32, %31 ], [ %44, %36 ]
  %50 = icmp sgt i32 %9, %22
  br i1 %50, label %88, label %51

51:                                               ; preds = %48
  %52 = icmp sgt i32 %22, 5
  %53 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %2, i64 0, i32 1
  %54 = getelementptr inbounds %union.anon, %union.anon* %53, i64 0, i32 0
  %55 = load i32*, i32** %54, align 8
  %56 = bitcast %union.anon* %53 to [5 x i32]*
  %57 = sext i32 %22 to i64
  br label %231

58:                                               ; preds = %58, %29
  %59 = phi i64 [ 0, %29 ], [ %85, %58 ]
  %60 = phi i32 [ 1, %29 ], [ %84, %58 ]
  %61 = phi i64 [ %30, %29 ], [ %86, %58 ]
  %62 = getelementptr inbounds i32, i32* %14, i64 %59
  %63 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %59
  %64 = select i1 %11, i32* %62, i32* %63
  %65 = load i32, i32* %64, align 4
  %66 = mul nsw i32 %65, %60
  %67 = or i64 %59, 1
  %68 = getelementptr inbounds i32, i32* %14, i64 %67
  %69 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %67
  %70 = select i1 %11, i32* %68, i32* %69
  %71 = load i32, i32* %70, align 4
  %72 = mul nsw i32 %71, %66
  %73 = or i64 %59, 2
  %74 = getelementptr inbounds i32, i32* %14, i64 %73
  %75 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %73
  %76 = select i1 %11, i32* %74, i32* %75
  %77 = load i32, i32* %76, align 4
  %78 = mul nsw i32 %77, %72
  %79 = or i64 %59, 3
  %80 = getelementptr inbounds i32, i32* %14, i64 %79
  %81 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %79
  %82 = select i1 %11, i32* %80, i32* %81
  %83 = load i32, i32* %82, align 4
  %84 = mul nsw i32 %83, %78
  %85 = add nuw nsw i64 %59, 4
  %86 = add i64 %61, -4
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %31, label %58

88:                                               ; preds = %231, %48
  %89 = phi i32 [ 1, %48 ], [ %238, %231 ]
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  %91 = load i32, i32* %90, align 8
  %92 = icmp sgt i32 %91, 5
  %93 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  br i1 %92, label %94, label %97

94:                                               ; preds = %88
  %95 = getelementptr inbounds %union.anon, %union.anon* %93, i64 0, i32 0
  %96 = load i32*, i32** %95, align 8
  br label %100

97:                                               ; preds = %88
  %98 = bitcast %union.anon* %93 to i32*
  %99 = icmp sgt i32 %91, 0
  br i1 %99, label %100, label %200

100:                                              ; preds = %97, %94
  %101 = phi i32* [ %96, %94 ], [ %98, %97 ]
  %102 = zext i32 %91 to i64
  %103 = icmp ult i32 %91, 8
  br i1 %103, label %189, label %104

104:                                              ; preds = %100
  %105 = and i64 %102, 4294967288
  %106 = add nsw i64 %105, -8
  %107 = lshr exact i64 %106, 3
  %108 = add nuw nsw i64 %107, 1
  %109 = and i64 %108, 3
  %110 = icmp ult i64 %106, 24
  br i1 %110, label %156, label %111

111:                                              ; preds = %104
  %112 = sub nsw i64 %108, %109
  br label %113

113:                                              ; preds = %113, %111
  %114 = phi i64 [ 0, %111 ], [ %153, %113 ]
  %115 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %111 ], [ %151, %113 ]
  %116 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %111 ], [ %152, %113 ]
  %117 = phi i64 [ %112, %111 ], [ %154, %113 ]
  %118 = getelementptr inbounds i32, i32* %101, i64 %114
  %119 = bitcast i32* %118 to <4 x i32>*
  %120 = load <4 x i32>, <4 x i32>* %119, align 4
  %121 = getelementptr inbounds i32, i32* %118, i64 4
  %122 = bitcast i32* %121 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 4
  %124 = mul nsw <4 x i32> %120, %115
  %125 = mul nsw <4 x i32> %123, %116
  %126 = or i64 %114, 8
  %127 = getelementptr inbounds i32, i32* %101, i64 %126
  %128 = bitcast i32* %127 to <4 x i32>*
  %129 = load <4 x i32>, <4 x i32>* %128, align 4
  %130 = getelementptr inbounds i32, i32* %127, i64 4
  %131 = bitcast i32* %130 to <4 x i32>*
  %132 = load <4 x i32>, <4 x i32>* %131, align 4
  %133 = mul nsw <4 x i32> %129, %124
  %134 = mul nsw <4 x i32> %132, %125
  %135 = or i64 %114, 16
  %136 = getelementptr inbounds i32, i32* %101, i64 %135
  %137 = bitcast i32* %136 to <4 x i32>*
  %138 = load <4 x i32>, <4 x i32>* %137, align 4
  %139 = getelementptr inbounds i32, i32* %136, i64 4
  %140 = bitcast i32* %139 to <4 x i32>*
  %141 = load <4 x i32>, <4 x i32>* %140, align 4
  %142 = mul nsw <4 x i32> %138, %133
  %143 = mul nsw <4 x i32> %141, %134
  %144 = or i64 %114, 24
  %145 = getelementptr inbounds i32, i32* %101, i64 %144
  %146 = bitcast i32* %145 to <4 x i32>*
  %147 = load <4 x i32>, <4 x i32>* %146, align 4
  %148 = getelementptr inbounds i32, i32* %145, i64 4
  %149 = bitcast i32* %148 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 4
  %151 = mul nsw <4 x i32> %147, %142
  %152 = mul nsw <4 x i32> %150, %143
  %153 = add i64 %114, 32
  %154 = add i64 %117, -4
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %113, !llvm.loop !86

156:                                              ; preds = %113, %104
  %157 = phi <4 x i32> [ undef, %104 ], [ %151, %113 ]
  %158 = phi <4 x i32> [ undef, %104 ], [ %152, %113 ]
  %159 = phi i64 [ 0, %104 ], [ %153, %113 ]
  %160 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %104 ], [ %151, %113 ]
  %161 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %104 ], [ %152, %113 ]
  %162 = icmp eq i64 %109, 0
  br i1 %162, label %179, label %163

163:                                              ; preds = %156, %163
  %164 = phi i64 [ %176, %163 ], [ %159, %156 ]
  %165 = phi <4 x i32> [ %174, %163 ], [ %160, %156 ]
  %166 = phi <4 x i32> [ %175, %163 ], [ %161, %156 ]
  %167 = phi i64 [ %177, %163 ], [ %109, %156 ]
  %168 = getelementptr inbounds i32, i32* %101, i64 %164
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 4
  %171 = getelementptr inbounds i32, i32* %168, i64 4
  %172 = bitcast i32* %171 to <4 x i32>*
  %173 = load <4 x i32>, <4 x i32>* %172, align 4
  %174 = mul nsw <4 x i32> %170, %165
  %175 = mul nsw <4 x i32> %173, %166
  %176 = add i64 %164, 8
  %177 = add i64 %167, -1
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %179, label %163, !llvm.loop !87

179:                                              ; preds = %163, %156
  %180 = phi <4 x i32> [ %157, %156 ], [ %174, %163 ]
  %181 = phi <4 x i32> [ %158, %156 ], [ %175, %163 ]
  %182 = mul <4 x i32> %181, %180
  %183 = shufflevector <4 x i32> %182, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %184 = mul <4 x i32> %182, %183
  %185 = shufflevector <4 x i32> %184, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %186 = mul <4 x i32> %184, %185
  %187 = extractelement <4 x i32> %186, i32 0
  %188 = icmp eq i64 %105, %102
  br i1 %188, label %200, label %189

189:                                              ; preds = %179, %100
  %190 = phi i64 [ 0, %100 ], [ %105, %179 ]
  %191 = phi i32 [ 1, %100 ], [ %187, %179 ]
  br label %192

192:                                              ; preds = %189, %192
  %193 = phi i64 [ %198, %192 ], [ %190, %189 ]
  %194 = phi i32 [ %197, %192 ], [ %191, %189 ]
  %195 = getelementptr inbounds i32, i32* %101, i64 %193
  %196 = load i32, i32* %195, align 4
  %197 = mul nsw i32 %196, %194
  %198 = add nuw nsw i64 %193, 1
  %199 = icmp eq i64 %198, %102
  br i1 %199, label %200, label %192, !llvm.loop !88

200:                                              ; preds = %192, %179, %97
  %201 = phi i32 [ 1, %97 ], [ %187, %179 ], [ %197, %192 ]
  %202 = bitcast %"class.std::__1::vector"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %202) #8
  %203 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %204 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 1
  %205 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  %206 = sext i32 %20 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %202, i8 0, i64 24, i1 false) #8
  %207 = icmp eq i32 %20, 0
  br i1 %207, label %241, label %208

208:                                              ; preds = %200
  %209 = icmp slt i32 %20, 0
  br i1 %209, label %210, label %212

210:                                              ; preds = %208
  %211 = bitcast %"class.std::__1::vector"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %211) #10
  unreachable

212:                                              ; preds = %208
  %213 = shl nsw i64 %206, 2
  %214 = tail call i8* @_Znwm(i64 %213) #9
  %215 = bitcast i8* %214 to i32*
  %216 = bitcast %"class.std::__1::vector"* %7 to i8**
  store i8* %214, i8** %216, align 8
  %217 = getelementptr inbounds i32, i32* %215, i64 %206
  store i32* %217, i32** %205, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %214, i8 0, i64 %213, i1 false)
  %218 = bitcast i32** %204 to i64*
  %219 = ptrtoint i32* %217 to i64
  store i64 %219, i64* %218, align 8
  %220 = getelementptr inbounds %union.anon, %union.anon* %93, i64 0, i32 0
  %221 = bitcast %union.anon* %93 to [5 x i32]*
  %222 = zext i32 %20 to i64
  %223 = icmp sgt i32 %91, 5
  %224 = load i32*, i32** %220, align 8
  %225 = bitcast %union.anon* %93 to i32*
  %226 = select i1 %223, i32* %224, i32* %225
  %227 = load i32, i32* %226, align 4
  %228 = sdiv i32 %201, %227
  store i32 %228, i32* %215, align 4
  %229 = load i32*, i32** %203, align 8
  %230 = icmp eq i32 %20, 1
  br i1 %230, label %241, label %280

231:                                              ; preds = %51, %231
  %232 = phi i64 [ %15, %51 ], [ %239, %231 ]
  %233 = phi i32 [ 1, %51 ], [ %238, %231 ]
  %234 = getelementptr inbounds i32, i32* %55, i64 %232
  %235 = getelementptr inbounds [5 x i32], [5 x i32]* %56, i64 0, i64 %232
  %236 = select i1 %52, i32* %234, i32* %235
  %237 = load i32, i32* %236, align 4
  %238 = mul nsw i32 %237, %233
  %239 = add nsw i64 %232, 1
  %240 = icmp slt i64 %239, %57
  br i1 %240, label %231, label %88

241:                                              ; preds = %280, %212, %200
  %242 = phi i1 [ false, %200 ], [ true, %212 ], [ true, %280 ]
  %243 = phi i32* [ null, %200 ], [ %229, %212 ], [ %295, %280 ]
  %244 = bitcast float* %5 to i8*
  %245 = sext i32 %201 to i64
  %246 = shl nsw i64 %245, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %244, i8 0, i64 %246, i1 false)
  %247 = icmp sgt i32 %49, 0
  br i1 %247, label %248, label %386

248:                                              ; preds = %241
  %249 = icmp sgt i32 %89, 0
  %250 = sext i32 %89 to i64
  %251 = zext i32 %49 to i64
  %252 = zext i32 %20 to i64
  %253 = zext i32 %89 to i64
  %254 = getelementptr float, float* %5, i64 %253
  %255 = and i64 %252, 4294967288
  %256 = add nsw i64 %255, -8
  %257 = lshr exact i64 %256, 3
  %258 = add nuw nsw i64 %257, 1
  %259 = and i64 %253, 4294967288
  %260 = add nsw i64 %259, -8
  %261 = lshr exact i64 %260, 3
  %262 = add nuw nsw i64 %261, 1
  %263 = icmp ult i32 %20, 8
  %264 = and i64 %252, 4294967288
  %265 = and i64 %258, 1
  %266 = icmp eq i64 %256, 0
  %267 = sub nuw nsw i64 %258, %265
  %268 = icmp eq i64 %265, 0
  %269 = icmp eq i64 %264, %252
  %270 = icmp ult i32 %89, 8
  %271 = and i64 %253, 4294967288
  %272 = and i64 %262, 1
  %273 = icmp eq i64 %260, 0
  %274 = sub nuw nsw i64 %262, %272
  %275 = icmp eq i64 %272, 0
  %276 = icmp eq i64 %271, %253
  %277 = and i64 %253, 1
  %278 = icmp eq i64 %277, 0
  %279 = sub nsw i64 0, %253
  br label %298

280:                                              ; preds = %212, %280
  %281 = phi i64 [ %296, %280 ], [ 1, %212 ]
  %282 = phi i32* [ %295, %280 ], [ %229, %212 ]
  %283 = phi i64 [ %281, %280 ], [ 0, %212 ]
  %284 = getelementptr inbounds i32, i32* %282, i64 %283
  %285 = load i32, i32* %284, align 4
  %286 = load i32, i32* %90, align 8
  %287 = icmp sgt i32 %286, 5
  %288 = load i32*, i32** %220, align 8
  %289 = getelementptr inbounds i32, i32* %288, i64 %281
  %290 = getelementptr inbounds [5 x i32], [5 x i32]* %221, i64 0, i64 %281
  %291 = select i1 %287, i32* %289, i32* %290
  %292 = load i32, i32* %291, align 4
  %293 = sdiv i32 %285, %292
  %294 = getelementptr inbounds i32, i32* %282, i64 %281
  store i32 %293, i32* %294, align 4
  %295 = load i32*, i32** %203, align 8
  %296 = add nuw nsw i64 %281, 1
  %297 = icmp eq i64 %296, %222
  br i1 %297, label %241, label %280

298:                                              ; preds = %497, %248
  %299 = phi i64 [ 0, %248 ], [ %498, %497 ]
  %300 = mul i64 %299, %250
  %301 = getelementptr float, float* %3, i64 %300
  %302 = add i64 %300, %253
  %303 = getelementptr float, float* %3, i64 %302
  br i1 %242, label %304, label %393

304:                                              ; preds = %298
  %305 = mul nsw i64 %299, %206
  br i1 %263, label %306, label %309

306:                                              ; preds = %377, %304
  %307 = phi i64 [ 0, %304 ], [ %264, %377 ]
  %308 = phi i32 [ 0, %304 ], [ %385, %377 ]
  br label %485

309:                                              ; preds = %304
  br i1 %266, label %353, label %310

310:                                              ; preds = %309, %310
  %311 = phi i64 [ %350, %310 ], [ 0, %309 ]
  %312 = phi <4 x i32> [ %348, %310 ], [ zeroinitializer, %309 ]
  %313 = phi <4 x i32> [ %349, %310 ], [ zeroinitializer, %309 ]
  %314 = phi i64 [ %351, %310 ], [ %267, %309 ]
  %315 = add nsw i64 %311, %305
  %316 = getelementptr inbounds i32, i32* %1, i64 %315
  %317 = bitcast i32* %316 to <4 x i32>*
  %318 = load <4 x i32>, <4 x i32>* %317, align 4
  %319 = getelementptr inbounds i32, i32* %316, i64 4
  %320 = bitcast i32* %319 to <4 x i32>*
  %321 = load <4 x i32>, <4 x i32>* %320, align 4
  %322 = getelementptr inbounds i32, i32* %243, i64 %311
  %323 = bitcast i32* %322 to <4 x i32>*
  %324 = load <4 x i32>, <4 x i32>* %323, align 4
  %325 = getelementptr inbounds i32, i32* %322, i64 4
  %326 = bitcast i32* %325 to <4 x i32>*
  %327 = load <4 x i32>, <4 x i32>* %326, align 4
  %328 = mul nsw <4 x i32> %324, %318
  %329 = mul nsw <4 x i32> %327, %321
  %330 = add nsw <4 x i32> %328, %312
  %331 = add nsw <4 x i32> %329, %313
  %332 = or i64 %311, 8
  %333 = add nsw i64 %332, %305
  %334 = getelementptr inbounds i32, i32* %1, i64 %333
  %335 = bitcast i32* %334 to <4 x i32>*
  %336 = load <4 x i32>, <4 x i32>* %335, align 4
  %337 = getelementptr inbounds i32, i32* %334, i64 4
  %338 = bitcast i32* %337 to <4 x i32>*
  %339 = load <4 x i32>, <4 x i32>* %338, align 4
  %340 = getelementptr inbounds i32, i32* %243, i64 %332
  %341 = bitcast i32* %340 to <4 x i32>*
  %342 = load <4 x i32>, <4 x i32>* %341, align 4
  %343 = getelementptr inbounds i32, i32* %340, i64 4
  %344 = bitcast i32* %343 to <4 x i32>*
  %345 = load <4 x i32>, <4 x i32>* %344, align 4
  %346 = mul nsw <4 x i32> %342, %336
  %347 = mul nsw <4 x i32> %345, %339
  %348 = add nsw <4 x i32> %346, %330
  %349 = add nsw <4 x i32> %347, %331
  %350 = add i64 %311, 16
  %351 = add i64 %314, -2
  %352 = icmp eq i64 %351, 0
  br i1 %352, label %353, label %310, !llvm.loop !90

353:                                              ; preds = %310, %309
  %354 = phi <4 x i32> [ undef, %309 ], [ %348, %310 ]
  %355 = phi <4 x i32> [ undef, %309 ], [ %349, %310 ]
  %356 = phi i64 [ 0, %309 ], [ %350, %310 ]
  %357 = phi <4 x i32> [ zeroinitializer, %309 ], [ %348, %310 ]
  %358 = phi <4 x i32> [ zeroinitializer, %309 ], [ %349, %310 ]
  br i1 %268, label %377, label %359

359:                                              ; preds = %353
  %360 = add nsw i64 %356, %305
  %361 = getelementptr inbounds i32, i32* %1, i64 %360
  %362 = getelementptr inbounds i32, i32* %243, i64 %356
  %363 = getelementptr inbounds i32, i32* %362, i64 4
  %364 = bitcast i32* %363 to <4 x i32>*
  %365 = load <4 x i32>, <4 x i32>* %364, align 4
  %366 = getelementptr inbounds i32, i32* %361, i64 4
  %367 = bitcast i32* %366 to <4 x i32>*
  %368 = load <4 x i32>, <4 x i32>* %367, align 4
  %369 = mul nsw <4 x i32> %365, %368
  %370 = add nsw <4 x i32> %369, %358
  %371 = bitcast i32* %362 to <4 x i32>*
  %372 = load <4 x i32>, <4 x i32>* %371, align 4
  %373 = bitcast i32* %361 to <4 x i32>*
  %374 = load <4 x i32>, <4 x i32>* %373, align 4
  %375 = mul nsw <4 x i32> %372, %374
  %376 = add nsw <4 x i32> %375, %357
  br label %377

377:                                              ; preds = %353, %359
  %378 = phi <4 x i32> [ %354, %353 ], [ %376, %359 ]
  %379 = phi <4 x i32> [ %355, %353 ], [ %370, %359 ]
  %380 = add <4 x i32> %379, %378
  %381 = shufflevector <4 x i32> %380, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %382 = add <4 x i32> %380, %381
  %383 = shufflevector <4 x i32> %382, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %384 = add <4 x i32> %382, %383
  %385 = extractelement <4 x i32> %384, i32 0
  br i1 %269, label %393, label %306

386:                                              ; preds = %497, %241
  %387 = icmp eq i32* %243, null
  br i1 %387, label %392, label %388

388:                                              ; preds = %386
  %389 = ptrtoint i32* %243 to i64
  %390 = bitcast i32** %204 to i64*
  store i64 %389, i64* %390, align 8
  %391 = bitcast i32* %243 to i8*
  tail call void @_ZdlPv(i8* %391) #9
  br label %392

392:                                              ; preds = %386, %388
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %202) #8
  ret void

393:                                              ; preds = %485, %377, %298
  %394 = phi i32 [ 0, %298 ], [ %385, %377 ], [ %494, %485 ]
  br i1 %249, label %395, label %497

395:                                              ; preds = %393
  %396 = mul nsw i64 %299, %250
  %397 = sext i32 %394 to i64
  br i1 %270, label %398, label %413

398:                                              ; preds = %484, %413, %395
  %399 = phi i64 [ 0, %413 ], [ 0, %395 ], [ %271, %484 ]
  %400 = xor i64 %399, -1
  br i1 %278, label %410, label %401

401:                                              ; preds = %398
  %402 = add nsw i64 %399, %396
  %403 = getelementptr inbounds float, float* %3, i64 %402
  %404 = load float, float* %403, align 4
  %405 = add nsw i64 %399, %397
  %406 = getelementptr inbounds float, float* %5, i64 %405
  %407 = load float, float* %406, align 4
  %408 = fadd float %404, %407
  store float %408, float* %406, align 4
  %409 = or i64 %399, 1
  br label %410

410:                                              ; preds = %401, %398
  %411 = phi i64 [ %409, %401 ], [ %399, %398 ]
  %412 = icmp eq i64 %400, %279
  br i1 %412, label %497, label %500

413:                                              ; preds = %395
  %414 = getelementptr float, float* %5, i64 %397
  %415 = getelementptr float, float* %254, i64 %397
  %416 = icmp ult float* %414, %303
  %417 = icmp ult float* %301, %415
  %418 = and i1 %416, %417
  br i1 %418, label %398, label %419

419:                                              ; preds = %413
  br i1 %273, label %463, label %420

420:                                              ; preds = %419, %420
  %421 = phi i64 [ %460, %420 ], [ 0, %419 ]
  %422 = phi i64 [ %461, %420 ], [ %274, %419 ]
  %423 = add nsw i64 %421, %396
  %424 = getelementptr inbounds float, float* %3, i64 %423
  %425 = bitcast float* %424 to <4 x float>*
  %426 = load <4 x float>, <4 x float>* %425, align 4, !alias.scope !91
  %427 = getelementptr inbounds float, float* %424, i64 4
  %428 = bitcast float* %427 to <4 x float>*
  %429 = load <4 x float>, <4 x float>* %428, align 4, !alias.scope !91
  %430 = add nsw i64 %421, %397
  %431 = getelementptr inbounds float, float* %5, i64 %430
  %432 = bitcast float* %431 to <4 x float>*
  %433 = load <4 x float>, <4 x float>* %432, align 4, !alias.scope !94, !noalias !91
  %434 = getelementptr inbounds float, float* %431, i64 4
  %435 = bitcast float* %434 to <4 x float>*
  %436 = load <4 x float>, <4 x float>* %435, align 4, !alias.scope !94, !noalias !91
  %437 = fadd <4 x float> %426, %433
  %438 = fadd <4 x float> %429, %436
  %439 = bitcast float* %431 to <4 x float>*
  store <4 x float> %437, <4 x float>* %439, align 4, !alias.scope !94, !noalias !91
  %440 = bitcast float* %434 to <4 x float>*
  store <4 x float> %438, <4 x float>* %440, align 4, !alias.scope !94, !noalias !91
  %441 = or i64 %421, 8
  %442 = add nsw i64 %441, %396
  %443 = getelementptr inbounds float, float* %3, i64 %442
  %444 = bitcast float* %443 to <4 x float>*
  %445 = load <4 x float>, <4 x float>* %444, align 4, !alias.scope !91
  %446 = getelementptr inbounds float, float* %443, i64 4
  %447 = bitcast float* %446 to <4 x float>*
  %448 = load <4 x float>, <4 x float>* %447, align 4, !alias.scope !91
  %449 = add nsw i64 %441, %397
  %450 = getelementptr inbounds float, float* %5, i64 %449
  %451 = bitcast float* %450 to <4 x float>*
  %452 = load <4 x float>, <4 x float>* %451, align 4, !alias.scope !94, !noalias !91
  %453 = getelementptr inbounds float, float* %450, i64 4
  %454 = bitcast float* %453 to <4 x float>*
  %455 = load <4 x float>, <4 x float>* %454, align 4, !alias.scope !94, !noalias !91
  %456 = fadd <4 x float> %445, %452
  %457 = fadd <4 x float> %448, %455
  %458 = bitcast float* %450 to <4 x float>*
  store <4 x float> %456, <4 x float>* %458, align 4, !alias.scope !94, !noalias !91
  %459 = bitcast float* %453 to <4 x float>*
  store <4 x float> %457, <4 x float>* %459, align 4, !alias.scope !94, !noalias !91
  %460 = add i64 %421, 16
  %461 = add i64 %422, -2
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %463, label %420, !llvm.loop !96

463:                                              ; preds = %420, %419
  %464 = phi i64 [ 0, %419 ], [ %460, %420 ]
  br i1 %275, label %484, label %465

465:                                              ; preds = %463
  %466 = add nsw i64 %464, %396
  %467 = getelementptr inbounds float, float* %3, i64 %466
  %468 = bitcast float* %467 to <4 x float>*
  %469 = load <4 x float>, <4 x float>* %468, align 4, !alias.scope !91
  %470 = getelementptr inbounds float, float* %467, i64 4
  %471 = bitcast float* %470 to <4 x float>*
  %472 = load <4 x float>, <4 x float>* %471, align 4, !alias.scope !91
  %473 = add nsw i64 %464, %397
  %474 = getelementptr inbounds float, float* %5, i64 %473
  %475 = bitcast float* %474 to <4 x float>*
  %476 = load <4 x float>, <4 x float>* %475, align 4, !alias.scope !94, !noalias !91
  %477 = getelementptr inbounds float, float* %474, i64 4
  %478 = bitcast float* %477 to <4 x float>*
  %479 = load <4 x float>, <4 x float>* %478, align 4, !alias.scope !94, !noalias !91
  %480 = fadd <4 x float> %469, %476
  %481 = fadd <4 x float> %472, %479
  %482 = bitcast float* %474 to <4 x float>*
  store <4 x float> %480, <4 x float>* %482, align 4, !alias.scope !94, !noalias !91
  %483 = bitcast float* %477 to <4 x float>*
  store <4 x float> %481, <4 x float>* %483, align 4, !alias.scope !94, !noalias !91
  br label %484

484:                                              ; preds = %463, %465
  br i1 %276, label %497, label %398

485:                                              ; preds = %306, %485
  %486 = phi i64 [ %495, %485 ], [ %307, %306 ]
  %487 = phi i32 [ %494, %485 ], [ %308, %306 ]
  %488 = add nsw i64 %486, %305
  %489 = getelementptr inbounds i32, i32* %1, i64 %488
  %490 = load i32, i32* %489, align 4
  %491 = getelementptr inbounds i32, i32* %243, i64 %486
  %492 = load i32, i32* %491, align 4
  %493 = mul nsw i32 %492, %490
  %494 = add nsw i32 %493, %487
  %495 = add nuw nsw i64 %486, 1
  %496 = icmp eq i64 %495, %252
  br i1 %496, label %393, label %485, !llvm.loop !97

497:                                              ; preds = %410, %500, %484, %393
  %498 = add nuw nsw i64 %299, 1
  %499 = icmp eq i64 %498, %251
  br i1 %499, label %386, label %298

500:                                              ; preds = %410, %500
  %501 = phi i64 [ %517, %500 ], [ %411, %410 ]
  %502 = add nsw i64 %501, %396
  %503 = getelementptr inbounds float, float* %3, i64 %502
  %504 = load float, float* %503, align 4
  %505 = add nsw i64 %501, %397
  %506 = getelementptr inbounds float, float* %5, i64 %505
  %507 = load float, float* %506, align 4
  %508 = fadd float %504, %507
  store float %508, float* %506, align 4
  %509 = add nuw nsw i64 %501, 1
  %510 = add nsw i64 %509, %396
  %511 = getelementptr inbounds float, float* %3, i64 %510
  %512 = load float, float* %511, align 4
  %513 = add nsw i64 %509, %397
  %514 = getelementptr inbounds float, float* %5, i64 %513
  %515 = load float, float* %514, align 4
  %516 = fadd float %512, %515
  store float %516, float* %514, align 4
  %517 = add nuw nsw i64 %501, 2
  %518 = icmp eq i64 %517, %253
  br i1 %518, label %497, label %500, !llvm.loop !98
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops9ScatterNdIihEEvRKNS_12RuntimeShapeEPKT_S4_PKT0_S4_PS8_(%"class.tflite::RuntimeShape"* dereferenceable(32), i32*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*) local_unnamed_addr #6 comdat {
  %7 = alloca %"class.std::__1::vector", align 8
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = add i32 %9, -1
  %11 = icmp sgt i32 %9, 5
  %12 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %0, i64 0, i32 1
  %13 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %14 = load i32*, i32** %13, align 8
  %15 = sext i32 %10 to i64
  %16 = getelementptr inbounds i32, i32* %14, i64 %15
  %17 = bitcast %union.anon* %12 to [5 x i32]*
  %18 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %15
  %19 = select i1 %11, i32* %16, i32* %18
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %2, i64 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = icmp sgt i32 %10, 0
  br i1 %23, label %24, label %48

24:                                               ; preds = %6
  %25 = zext i32 %10 to i64
  %26 = add nsw i64 %25, -1
  %27 = and i64 %25, 3
  %28 = icmp ult i64 %26, 3
  br i1 %28, label %31, label %29

29:                                               ; preds = %24
  %30 = sub nsw i64 %25, %27
  br label %58

31:                                               ; preds = %58, %24
  %32 = phi i32 [ undef, %24 ], [ %84, %58 ]
  %33 = phi i64 [ 0, %24 ], [ %85, %58 ]
  %34 = phi i32 [ 1, %24 ], [ %84, %58 ]
  %35 = icmp eq i64 %27, 0
  br i1 %35, label %48, label %36

36:                                               ; preds = %31, %36
  %37 = phi i64 [ %45, %36 ], [ %33, %31 ]
  %38 = phi i32 [ %44, %36 ], [ %34, %31 ]
  %39 = phi i64 [ %46, %36 ], [ %27, %31 ]
  %40 = getelementptr inbounds i32, i32* %14, i64 %37
  %41 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %37
  %42 = select i1 %11, i32* %40, i32* %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %43, %38
  %45 = add nuw nsw i64 %37, 1
  %46 = add i64 %39, -1
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %36, !llvm.loop !99

48:                                               ; preds = %31, %36, %6
  %49 = phi i32 [ 1, %6 ], [ %32, %31 ], [ %44, %36 ]
  %50 = icmp sgt i32 %9, %22
  br i1 %50, label %88, label %51

51:                                               ; preds = %48
  %52 = icmp sgt i32 %22, 5
  %53 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %2, i64 0, i32 1
  %54 = getelementptr inbounds %union.anon, %union.anon* %53, i64 0, i32 0
  %55 = load i32*, i32** %54, align 8
  %56 = bitcast %union.anon* %53 to [5 x i32]*
  %57 = sext i32 %22 to i64
  br label %231

58:                                               ; preds = %58, %29
  %59 = phi i64 [ 0, %29 ], [ %85, %58 ]
  %60 = phi i32 [ 1, %29 ], [ %84, %58 ]
  %61 = phi i64 [ %30, %29 ], [ %86, %58 ]
  %62 = getelementptr inbounds i32, i32* %14, i64 %59
  %63 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %59
  %64 = select i1 %11, i32* %62, i32* %63
  %65 = load i32, i32* %64, align 4
  %66 = mul nsw i32 %65, %60
  %67 = or i64 %59, 1
  %68 = getelementptr inbounds i32, i32* %14, i64 %67
  %69 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %67
  %70 = select i1 %11, i32* %68, i32* %69
  %71 = load i32, i32* %70, align 4
  %72 = mul nsw i32 %71, %66
  %73 = or i64 %59, 2
  %74 = getelementptr inbounds i32, i32* %14, i64 %73
  %75 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %73
  %76 = select i1 %11, i32* %74, i32* %75
  %77 = load i32, i32* %76, align 4
  %78 = mul nsw i32 %77, %72
  %79 = or i64 %59, 3
  %80 = getelementptr inbounds i32, i32* %14, i64 %79
  %81 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %79
  %82 = select i1 %11, i32* %80, i32* %81
  %83 = load i32, i32* %82, align 4
  %84 = mul nsw i32 %83, %78
  %85 = add nuw nsw i64 %59, 4
  %86 = add i64 %61, -4
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %31, label %58

88:                                               ; preds = %231, %48
  %89 = phi i32 [ 1, %48 ], [ %238, %231 ]
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  %91 = load i32, i32* %90, align 8
  %92 = icmp sgt i32 %91, 5
  %93 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  br i1 %92, label %94, label %97

94:                                               ; preds = %88
  %95 = getelementptr inbounds %union.anon, %union.anon* %93, i64 0, i32 0
  %96 = load i32*, i32** %95, align 8
  br label %100

97:                                               ; preds = %88
  %98 = bitcast %union.anon* %93 to i32*
  %99 = icmp sgt i32 %91, 0
  br i1 %99, label %100, label %200

100:                                              ; preds = %97, %94
  %101 = phi i32* [ %96, %94 ], [ %98, %97 ]
  %102 = zext i32 %91 to i64
  %103 = icmp ult i32 %91, 8
  br i1 %103, label %189, label %104

104:                                              ; preds = %100
  %105 = and i64 %102, 4294967288
  %106 = add nsw i64 %105, -8
  %107 = lshr exact i64 %106, 3
  %108 = add nuw nsw i64 %107, 1
  %109 = and i64 %108, 3
  %110 = icmp ult i64 %106, 24
  br i1 %110, label %156, label %111

111:                                              ; preds = %104
  %112 = sub nsw i64 %108, %109
  br label %113

113:                                              ; preds = %113, %111
  %114 = phi i64 [ 0, %111 ], [ %153, %113 ]
  %115 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %111 ], [ %151, %113 ]
  %116 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %111 ], [ %152, %113 ]
  %117 = phi i64 [ %112, %111 ], [ %154, %113 ]
  %118 = getelementptr inbounds i32, i32* %101, i64 %114
  %119 = bitcast i32* %118 to <4 x i32>*
  %120 = load <4 x i32>, <4 x i32>* %119, align 4
  %121 = getelementptr inbounds i32, i32* %118, i64 4
  %122 = bitcast i32* %121 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 4
  %124 = mul nsw <4 x i32> %120, %115
  %125 = mul nsw <4 x i32> %123, %116
  %126 = or i64 %114, 8
  %127 = getelementptr inbounds i32, i32* %101, i64 %126
  %128 = bitcast i32* %127 to <4 x i32>*
  %129 = load <4 x i32>, <4 x i32>* %128, align 4
  %130 = getelementptr inbounds i32, i32* %127, i64 4
  %131 = bitcast i32* %130 to <4 x i32>*
  %132 = load <4 x i32>, <4 x i32>* %131, align 4
  %133 = mul nsw <4 x i32> %129, %124
  %134 = mul nsw <4 x i32> %132, %125
  %135 = or i64 %114, 16
  %136 = getelementptr inbounds i32, i32* %101, i64 %135
  %137 = bitcast i32* %136 to <4 x i32>*
  %138 = load <4 x i32>, <4 x i32>* %137, align 4
  %139 = getelementptr inbounds i32, i32* %136, i64 4
  %140 = bitcast i32* %139 to <4 x i32>*
  %141 = load <4 x i32>, <4 x i32>* %140, align 4
  %142 = mul nsw <4 x i32> %138, %133
  %143 = mul nsw <4 x i32> %141, %134
  %144 = or i64 %114, 24
  %145 = getelementptr inbounds i32, i32* %101, i64 %144
  %146 = bitcast i32* %145 to <4 x i32>*
  %147 = load <4 x i32>, <4 x i32>* %146, align 4
  %148 = getelementptr inbounds i32, i32* %145, i64 4
  %149 = bitcast i32* %148 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 4
  %151 = mul nsw <4 x i32> %147, %142
  %152 = mul nsw <4 x i32> %150, %143
  %153 = add i64 %114, 32
  %154 = add i64 %117, -4
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %113, !llvm.loop !100

156:                                              ; preds = %113, %104
  %157 = phi <4 x i32> [ undef, %104 ], [ %151, %113 ]
  %158 = phi <4 x i32> [ undef, %104 ], [ %152, %113 ]
  %159 = phi i64 [ 0, %104 ], [ %153, %113 ]
  %160 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %104 ], [ %151, %113 ]
  %161 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %104 ], [ %152, %113 ]
  %162 = icmp eq i64 %109, 0
  br i1 %162, label %179, label %163

163:                                              ; preds = %156, %163
  %164 = phi i64 [ %176, %163 ], [ %159, %156 ]
  %165 = phi <4 x i32> [ %174, %163 ], [ %160, %156 ]
  %166 = phi <4 x i32> [ %175, %163 ], [ %161, %156 ]
  %167 = phi i64 [ %177, %163 ], [ %109, %156 ]
  %168 = getelementptr inbounds i32, i32* %101, i64 %164
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 4
  %171 = getelementptr inbounds i32, i32* %168, i64 4
  %172 = bitcast i32* %171 to <4 x i32>*
  %173 = load <4 x i32>, <4 x i32>* %172, align 4
  %174 = mul nsw <4 x i32> %170, %165
  %175 = mul nsw <4 x i32> %173, %166
  %176 = add i64 %164, 8
  %177 = add i64 %167, -1
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %179, label %163, !llvm.loop !101

179:                                              ; preds = %163, %156
  %180 = phi <4 x i32> [ %157, %156 ], [ %174, %163 ]
  %181 = phi <4 x i32> [ %158, %156 ], [ %175, %163 ]
  %182 = mul <4 x i32> %181, %180
  %183 = shufflevector <4 x i32> %182, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %184 = mul <4 x i32> %182, %183
  %185 = shufflevector <4 x i32> %184, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %186 = mul <4 x i32> %184, %185
  %187 = extractelement <4 x i32> %186, i32 0
  %188 = icmp eq i64 %105, %102
  br i1 %188, label %200, label %189

189:                                              ; preds = %179, %100
  %190 = phi i64 [ 0, %100 ], [ %105, %179 ]
  %191 = phi i32 [ 1, %100 ], [ %187, %179 ]
  br label %192

192:                                              ; preds = %189, %192
  %193 = phi i64 [ %198, %192 ], [ %190, %189 ]
  %194 = phi i32 [ %197, %192 ], [ %191, %189 ]
  %195 = getelementptr inbounds i32, i32* %101, i64 %193
  %196 = load i32, i32* %195, align 4
  %197 = mul nsw i32 %196, %194
  %198 = add nuw nsw i64 %193, 1
  %199 = icmp eq i64 %198, %102
  br i1 %199, label %200, label %192, !llvm.loop !102

200:                                              ; preds = %192, %179, %97
  %201 = phi i32 [ 1, %97 ], [ %187, %179 ], [ %197, %192 ]
  %202 = bitcast %"class.std::__1::vector"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %202) #8
  %203 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %204 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 1
  %205 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  %206 = sext i32 %20 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %202, i8 0, i64 24, i1 false) #8
  %207 = icmp eq i32 %20, 0
  br i1 %207, label %241, label %208

208:                                              ; preds = %200
  %209 = icmp slt i32 %20, 0
  br i1 %209, label %210, label %212

210:                                              ; preds = %208
  %211 = bitcast %"class.std::__1::vector"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %211) #10
  unreachable

212:                                              ; preds = %208
  %213 = shl nsw i64 %206, 2
  %214 = tail call i8* @_Znwm(i64 %213) #9
  %215 = bitcast i8* %214 to i32*
  %216 = bitcast %"class.std::__1::vector"* %7 to i8**
  store i8* %214, i8** %216, align 8
  %217 = getelementptr inbounds i32, i32* %215, i64 %206
  store i32* %217, i32** %205, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %214, i8 0, i64 %213, i1 false)
  %218 = bitcast i32** %204 to i64*
  %219 = ptrtoint i32* %217 to i64
  store i64 %219, i64* %218, align 8
  %220 = getelementptr inbounds %union.anon, %union.anon* %93, i64 0, i32 0
  %221 = bitcast %union.anon* %93 to [5 x i32]*
  %222 = zext i32 %20 to i64
  %223 = icmp sgt i32 %91, 5
  %224 = load i32*, i32** %220, align 8
  %225 = bitcast %union.anon* %93 to i32*
  %226 = select i1 %223, i32* %224, i32* %225
  %227 = load i32, i32* %226, align 4
  %228 = sdiv i32 %201, %227
  store i32 %228, i32* %215, align 4
  %229 = load i32*, i32** %203, align 8
  %230 = icmp eq i32 %20, 1
  br i1 %230, label %241, label %278

231:                                              ; preds = %51, %231
  %232 = phi i64 [ %15, %51 ], [ %239, %231 ]
  %233 = phi i32 [ 1, %51 ], [ %238, %231 ]
  %234 = getelementptr inbounds i32, i32* %55, i64 %232
  %235 = getelementptr inbounds [5 x i32], [5 x i32]* %56, i64 0, i64 %232
  %236 = select i1 %52, i32* %234, i32* %235
  %237 = load i32, i32* %236, align 4
  %238 = mul nsw i32 %237, %233
  %239 = add nsw i64 %232, 1
  %240 = icmp slt i64 %239, %57
  br i1 %240, label %231, label %88

241:                                              ; preds = %278, %212, %200
  %242 = phi i1 [ false, %200 ], [ true, %212 ], [ true, %278 ]
  %243 = phi i32* [ null, %200 ], [ %229, %212 ], [ %293, %278 ]
  %244 = sext i32 %201 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %5, i8 0, i64 %244, i1 false)
  %245 = icmp sgt i32 %49, 0
  br i1 %245, label %246, label %384

246:                                              ; preds = %241
  %247 = icmp sgt i32 %89, 0
  %248 = sext i32 %89 to i64
  %249 = zext i32 %49 to i64
  %250 = zext i32 %20 to i64
  %251 = zext i32 %89 to i64
  %252 = getelementptr i8, i8* %5, i64 %251
  %253 = and i64 %250, 4294967288
  %254 = add nsw i64 %253, -8
  %255 = lshr exact i64 %254, 3
  %256 = add nuw nsw i64 %255, 1
  %257 = and i64 %251, 4294967264
  %258 = add nsw i64 %257, -32
  %259 = lshr exact i64 %258, 5
  %260 = add nuw nsw i64 %259, 1
  %261 = icmp ult i32 %20, 8
  %262 = and i64 %250, 4294967288
  %263 = and i64 %256, 1
  %264 = icmp eq i64 %254, 0
  %265 = sub nuw nsw i64 %256, %263
  %266 = icmp eq i64 %263, 0
  %267 = icmp eq i64 %262, %250
  %268 = icmp ult i32 %89, 32
  %269 = and i64 %251, 4294967264
  %270 = and i64 %260, 1
  %271 = icmp eq i64 %258, 0
  %272 = sub nuw nsw i64 %260, %270
  %273 = icmp eq i64 %270, 0
  %274 = icmp eq i64 %269, %251
  %275 = and i64 %251, 1
  %276 = icmp eq i64 %275, 0
  %277 = sub nsw i64 0, %251
  br label %296

278:                                              ; preds = %212, %278
  %279 = phi i64 [ %294, %278 ], [ 1, %212 ]
  %280 = phi i32* [ %293, %278 ], [ %229, %212 ]
  %281 = phi i64 [ %279, %278 ], [ 0, %212 ]
  %282 = getelementptr inbounds i32, i32* %280, i64 %281
  %283 = load i32, i32* %282, align 4
  %284 = load i32, i32* %90, align 8
  %285 = icmp sgt i32 %284, 5
  %286 = load i32*, i32** %220, align 8
  %287 = getelementptr inbounds i32, i32* %286, i64 %279
  %288 = getelementptr inbounds [5 x i32], [5 x i32]* %221, i64 0, i64 %279
  %289 = select i1 %285, i32* %287, i32* %288
  %290 = load i32, i32* %289, align 4
  %291 = sdiv i32 %283, %290
  %292 = getelementptr inbounds i32, i32* %280, i64 %279
  store i32 %291, i32* %292, align 4
  %293 = load i32*, i32** %203, align 8
  %294 = add nuw nsw i64 %279, 1
  %295 = icmp eq i64 %294, %222
  br i1 %295, label %241, label %278

296:                                              ; preds = %495, %246
  %297 = phi i64 [ 0, %246 ], [ %496, %495 ]
  %298 = mul i64 %297, %248
  %299 = getelementptr i8, i8* %3, i64 %298
  %300 = add i64 %298, %251
  %301 = getelementptr i8, i8* %3, i64 %300
  br i1 %242, label %302, label %391

302:                                              ; preds = %296
  %303 = mul nsw i64 %297, %206
  br i1 %261, label %304, label %307

304:                                              ; preds = %375, %302
  %305 = phi i64 [ 0, %302 ], [ %262, %375 ]
  %306 = phi i32 [ 0, %302 ], [ %383, %375 ]
  br label %483

307:                                              ; preds = %302
  br i1 %264, label %351, label %308

308:                                              ; preds = %307, %308
  %309 = phi i64 [ %348, %308 ], [ 0, %307 ]
  %310 = phi <4 x i32> [ %346, %308 ], [ zeroinitializer, %307 ]
  %311 = phi <4 x i32> [ %347, %308 ], [ zeroinitializer, %307 ]
  %312 = phi i64 [ %349, %308 ], [ %265, %307 ]
  %313 = add nsw i64 %309, %303
  %314 = getelementptr inbounds i32, i32* %1, i64 %313
  %315 = bitcast i32* %314 to <4 x i32>*
  %316 = load <4 x i32>, <4 x i32>* %315, align 4
  %317 = getelementptr inbounds i32, i32* %314, i64 4
  %318 = bitcast i32* %317 to <4 x i32>*
  %319 = load <4 x i32>, <4 x i32>* %318, align 4
  %320 = getelementptr inbounds i32, i32* %243, i64 %309
  %321 = bitcast i32* %320 to <4 x i32>*
  %322 = load <4 x i32>, <4 x i32>* %321, align 4
  %323 = getelementptr inbounds i32, i32* %320, i64 4
  %324 = bitcast i32* %323 to <4 x i32>*
  %325 = load <4 x i32>, <4 x i32>* %324, align 4
  %326 = mul nsw <4 x i32> %322, %316
  %327 = mul nsw <4 x i32> %325, %319
  %328 = add nsw <4 x i32> %326, %310
  %329 = add nsw <4 x i32> %327, %311
  %330 = or i64 %309, 8
  %331 = add nsw i64 %330, %303
  %332 = getelementptr inbounds i32, i32* %1, i64 %331
  %333 = bitcast i32* %332 to <4 x i32>*
  %334 = load <4 x i32>, <4 x i32>* %333, align 4
  %335 = getelementptr inbounds i32, i32* %332, i64 4
  %336 = bitcast i32* %335 to <4 x i32>*
  %337 = load <4 x i32>, <4 x i32>* %336, align 4
  %338 = getelementptr inbounds i32, i32* %243, i64 %330
  %339 = bitcast i32* %338 to <4 x i32>*
  %340 = load <4 x i32>, <4 x i32>* %339, align 4
  %341 = getelementptr inbounds i32, i32* %338, i64 4
  %342 = bitcast i32* %341 to <4 x i32>*
  %343 = load <4 x i32>, <4 x i32>* %342, align 4
  %344 = mul nsw <4 x i32> %340, %334
  %345 = mul nsw <4 x i32> %343, %337
  %346 = add nsw <4 x i32> %344, %328
  %347 = add nsw <4 x i32> %345, %329
  %348 = add i64 %309, 16
  %349 = add i64 %312, -2
  %350 = icmp eq i64 %349, 0
  br i1 %350, label %351, label %308, !llvm.loop !103

351:                                              ; preds = %308, %307
  %352 = phi <4 x i32> [ undef, %307 ], [ %346, %308 ]
  %353 = phi <4 x i32> [ undef, %307 ], [ %347, %308 ]
  %354 = phi i64 [ 0, %307 ], [ %348, %308 ]
  %355 = phi <4 x i32> [ zeroinitializer, %307 ], [ %346, %308 ]
  %356 = phi <4 x i32> [ zeroinitializer, %307 ], [ %347, %308 ]
  br i1 %266, label %375, label %357

357:                                              ; preds = %351
  %358 = add nsw i64 %354, %303
  %359 = getelementptr inbounds i32, i32* %1, i64 %358
  %360 = getelementptr inbounds i32, i32* %243, i64 %354
  %361 = getelementptr inbounds i32, i32* %360, i64 4
  %362 = bitcast i32* %361 to <4 x i32>*
  %363 = load <4 x i32>, <4 x i32>* %362, align 4
  %364 = getelementptr inbounds i32, i32* %359, i64 4
  %365 = bitcast i32* %364 to <4 x i32>*
  %366 = load <4 x i32>, <4 x i32>* %365, align 4
  %367 = mul nsw <4 x i32> %363, %366
  %368 = add nsw <4 x i32> %367, %356
  %369 = bitcast i32* %360 to <4 x i32>*
  %370 = load <4 x i32>, <4 x i32>* %369, align 4
  %371 = bitcast i32* %359 to <4 x i32>*
  %372 = load <4 x i32>, <4 x i32>* %371, align 4
  %373 = mul nsw <4 x i32> %370, %372
  %374 = add nsw <4 x i32> %373, %355
  br label %375

375:                                              ; preds = %351, %357
  %376 = phi <4 x i32> [ %352, %351 ], [ %374, %357 ]
  %377 = phi <4 x i32> [ %353, %351 ], [ %368, %357 ]
  %378 = add <4 x i32> %377, %376
  %379 = shufflevector <4 x i32> %378, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %380 = add <4 x i32> %378, %379
  %381 = shufflevector <4 x i32> %380, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %382 = add <4 x i32> %380, %381
  %383 = extractelement <4 x i32> %382, i32 0
  br i1 %267, label %391, label %304

384:                                              ; preds = %495, %241
  %385 = icmp eq i32* %243, null
  br i1 %385, label %390, label %386

386:                                              ; preds = %384
  %387 = ptrtoint i32* %243 to i64
  %388 = bitcast i32** %204 to i64*
  store i64 %387, i64* %388, align 8
  %389 = bitcast i32* %243 to i8*
  tail call void @_ZdlPv(i8* %389) #9
  br label %390

390:                                              ; preds = %384, %386
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %202) #8
  ret void

391:                                              ; preds = %483, %375, %296
  %392 = phi i32 [ 0, %296 ], [ %383, %375 ], [ %492, %483 ]
  br i1 %247, label %393, label %495

393:                                              ; preds = %391
  %394 = mul nsw i64 %297, %248
  %395 = sext i32 %392 to i64
  br i1 %268, label %396, label %411

396:                                              ; preds = %482, %411, %393
  %397 = phi i64 [ 0, %411 ], [ 0, %393 ], [ %269, %482 ]
  %398 = xor i64 %397, -1
  br i1 %276, label %408, label %399

399:                                              ; preds = %396
  %400 = add nsw i64 %397, %394
  %401 = getelementptr inbounds i8, i8* %3, i64 %400
  %402 = load i8, i8* %401, align 1
  %403 = add nsw i64 %397, %395
  %404 = getelementptr inbounds i8, i8* %5, i64 %403
  %405 = load i8, i8* %404, align 1
  %406 = add i8 %405, %402
  store i8 %406, i8* %404, align 1
  %407 = or i64 %397, 1
  br label %408

408:                                              ; preds = %399, %396
  %409 = phi i64 [ %407, %399 ], [ %397, %396 ]
  %410 = icmp eq i64 %398, %277
  br i1 %410, label %495, label %498

411:                                              ; preds = %393
  %412 = getelementptr i8, i8* %5, i64 %395
  %413 = getelementptr i8, i8* %252, i64 %395
  %414 = icmp ult i8* %412, %301
  %415 = icmp ult i8* %299, %413
  %416 = and i1 %414, %415
  br i1 %416, label %396, label %417

417:                                              ; preds = %411
  br i1 %271, label %461, label %418

418:                                              ; preds = %417, %418
  %419 = phi i64 [ %458, %418 ], [ 0, %417 ]
  %420 = phi i64 [ %459, %418 ], [ %272, %417 ]
  %421 = add nsw i64 %419, %394
  %422 = getelementptr inbounds i8, i8* %3, i64 %421
  %423 = bitcast i8* %422 to <16 x i8>*
  %424 = load <16 x i8>, <16 x i8>* %423, align 1, !alias.scope !104
  %425 = getelementptr inbounds i8, i8* %422, i64 16
  %426 = bitcast i8* %425 to <16 x i8>*
  %427 = load <16 x i8>, <16 x i8>* %426, align 1, !alias.scope !104
  %428 = add nsw i64 %419, %395
  %429 = getelementptr inbounds i8, i8* %5, i64 %428
  %430 = bitcast i8* %429 to <16 x i8>*
  %431 = load <16 x i8>, <16 x i8>* %430, align 1, !alias.scope !107, !noalias !104
  %432 = getelementptr inbounds i8, i8* %429, i64 16
  %433 = bitcast i8* %432 to <16 x i8>*
  %434 = load <16 x i8>, <16 x i8>* %433, align 1, !alias.scope !107, !noalias !104
  %435 = add <16 x i8> %431, %424
  %436 = add <16 x i8> %434, %427
  %437 = bitcast i8* %429 to <16 x i8>*
  store <16 x i8> %435, <16 x i8>* %437, align 1, !alias.scope !107, !noalias !104
  %438 = bitcast i8* %432 to <16 x i8>*
  store <16 x i8> %436, <16 x i8>* %438, align 1, !alias.scope !107, !noalias !104
  %439 = or i64 %419, 32
  %440 = add nsw i64 %439, %394
  %441 = getelementptr inbounds i8, i8* %3, i64 %440
  %442 = bitcast i8* %441 to <16 x i8>*
  %443 = load <16 x i8>, <16 x i8>* %442, align 1, !alias.scope !104
  %444 = getelementptr inbounds i8, i8* %441, i64 16
  %445 = bitcast i8* %444 to <16 x i8>*
  %446 = load <16 x i8>, <16 x i8>* %445, align 1, !alias.scope !104
  %447 = add nsw i64 %439, %395
  %448 = getelementptr inbounds i8, i8* %5, i64 %447
  %449 = bitcast i8* %448 to <16 x i8>*
  %450 = load <16 x i8>, <16 x i8>* %449, align 1, !alias.scope !107, !noalias !104
  %451 = getelementptr inbounds i8, i8* %448, i64 16
  %452 = bitcast i8* %451 to <16 x i8>*
  %453 = load <16 x i8>, <16 x i8>* %452, align 1, !alias.scope !107, !noalias !104
  %454 = add <16 x i8> %450, %443
  %455 = add <16 x i8> %453, %446
  %456 = bitcast i8* %448 to <16 x i8>*
  store <16 x i8> %454, <16 x i8>* %456, align 1, !alias.scope !107, !noalias !104
  %457 = bitcast i8* %451 to <16 x i8>*
  store <16 x i8> %455, <16 x i8>* %457, align 1, !alias.scope !107, !noalias !104
  %458 = add i64 %419, 64
  %459 = add i64 %420, -2
  %460 = icmp eq i64 %459, 0
  br i1 %460, label %461, label %418, !llvm.loop !109

461:                                              ; preds = %418, %417
  %462 = phi i64 [ 0, %417 ], [ %458, %418 ]
  br i1 %273, label %482, label %463

463:                                              ; preds = %461
  %464 = add nsw i64 %462, %394
  %465 = getelementptr inbounds i8, i8* %3, i64 %464
  %466 = bitcast i8* %465 to <16 x i8>*
  %467 = load <16 x i8>, <16 x i8>* %466, align 1, !alias.scope !104
  %468 = getelementptr inbounds i8, i8* %465, i64 16
  %469 = bitcast i8* %468 to <16 x i8>*
  %470 = load <16 x i8>, <16 x i8>* %469, align 1, !alias.scope !104
  %471 = add nsw i64 %462, %395
  %472 = getelementptr inbounds i8, i8* %5, i64 %471
  %473 = bitcast i8* %472 to <16 x i8>*
  %474 = load <16 x i8>, <16 x i8>* %473, align 1, !alias.scope !107, !noalias !104
  %475 = getelementptr inbounds i8, i8* %472, i64 16
  %476 = bitcast i8* %475 to <16 x i8>*
  %477 = load <16 x i8>, <16 x i8>* %476, align 1, !alias.scope !107, !noalias !104
  %478 = add <16 x i8> %474, %467
  %479 = add <16 x i8> %477, %470
  %480 = bitcast i8* %472 to <16 x i8>*
  store <16 x i8> %478, <16 x i8>* %480, align 1, !alias.scope !107, !noalias !104
  %481 = bitcast i8* %475 to <16 x i8>*
  store <16 x i8> %479, <16 x i8>* %481, align 1, !alias.scope !107, !noalias !104
  br label %482

482:                                              ; preds = %461, %463
  br i1 %274, label %495, label %396

483:                                              ; preds = %304, %483
  %484 = phi i64 [ %493, %483 ], [ %305, %304 ]
  %485 = phi i32 [ %492, %483 ], [ %306, %304 ]
  %486 = add nsw i64 %484, %303
  %487 = getelementptr inbounds i32, i32* %1, i64 %486
  %488 = load i32, i32* %487, align 4
  %489 = getelementptr inbounds i32, i32* %243, i64 %484
  %490 = load i32, i32* %489, align 4
  %491 = mul nsw i32 %490, %488
  %492 = add nsw i32 %491, %485
  %493 = add nuw nsw i64 %484, 1
  %494 = icmp eq i64 %493, %250
  br i1 %494, label %391, label %483, !llvm.loop !110

495:                                              ; preds = %408, %498, %482, %391
  %496 = add nuw nsw i64 %297, 1
  %497 = icmp eq i64 %496, %249
  br i1 %497, label %384, label %296

498:                                              ; preds = %408, %498
  %499 = phi i64 [ %515, %498 ], [ %409, %408 ]
  %500 = add nsw i64 %499, %394
  %501 = getelementptr inbounds i8, i8* %3, i64 %500
  %502 = load i8, i8* %501, align 1
  %503 = add nsw i64 %499, %395
  %504 = getelementptr inbounds i8, i8* %5, i64 %503
  %505 = load i8, i8* %504, align 1
  %506 = add i8 %505, %502
  store i8 %506, i8* %504, align 1
  %507 = add nuw nsw i64 %499, 1
  %508 = add nsw i64 %507, %394
  %509 = getelementptr inbounds i8, i8* %3, i64 %508
  %510 = load i8, i8* %509, align 1
  %511 = add nsw i64 %507, %395
  %512 = getelementptr inbounds i8, i8* %5, i64 %511
  %513 = load i8, i8* %512, align 1
  %514 = add i8 %513, %510
  store i8 %514, i8* %512, align 1
  %515 = add nuw nsw i64 %499, 2
  %516 = icmp eq i64 %515, %251
  br i1 %516, label %495, label %498, !llvm.loop !111
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops9ScatterNdIiaEEvRKNS_12RuntimeShapeEPKT_S4_PKT0_S4_PS8_(%"class.tflite::RuntimeShape"* dereferenceable(32), i32*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*) local_unnamed_addr #6 comdat {
  %7 = alloca %"class.std::__1::vector", align 8
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = add i32 %9, -1
  %11 = icmp sgt i32 %9, 5
  %12 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %0, i64 0, i32 1
  %13 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %14 = load i32*, i32** %13, align 8
  %15 = sext i32 %10 to i64
  %16 = getelementptr inbounds i32, i32* %14, i64 %15
  %17 = bitcast %union.anon* %12 to [5 x i32]*
  %18 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %15
  %19 = select i1 %11, i32* %16, i32* %18
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %2, i64 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = icmp sgt i32 %10, 0
  br i1 %23, label %24, label %48

24:                                               ; preds = %6
  %25 = zext i32 %10 to i64
  %26 = add nsw i64 %25, -1
  %27 = and i64 %25, 3
  %28 = icmp ult i64 %26, 3
  br i1 %28, label %31, label %29

29:                                               ; preds = %24
  %30 = sub nsw i64 %25, %27
  br label %58

31:                                               ; preds = %58, %24
  %32 = phi i32 [ undef, %24 ], [ %84, %58 ]
  %33 = phi i64 [ 0, %24 ], [ %85, %58 ]
  %34 = phi i32 [ 1, %24 ], [ %84, %58 ]
  %35 = icmp eq i64 %27, 0
  br i1 %35, label %48, label %36

36:                                               ; preds = %31, %36
  %37 = phi i64 [ %45, %36 ], [ %33, %31 ]
  %38 = phi i32 [ %44, %36 ], [ %34, %31 ]
  %39 = phi i64 [ %46, %36 ], [ %27, %31 ]
  %40 = getelementptr inbounds i32, i32* %14, i64 %37
  %41 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %37
  %42 = select i1 %11, i32* %40, i32* %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %43, %38
  %45 = add nuw nsw i64 %37, 1
  %46 = add i64 %39, -1
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %36, !llvm.loop !112

48:                                               ; preds = %31, %36, %6
  %49 = phi i32 [ 1, %6 ], [ %32, %31 ], [ %44, %36 ]
  %50 = icmp sgt i32 %9, %22
  br i1 %50, label %88, label %51

51:                                               ; preds = %48
  %52 = icmp sgt i32 %22, 5
  %53 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %2, i64 0, i32 1
  %54 = getelementptr inbounds %union.anon, %union.anon* %53, i64 0, i32 0
  %55 = load i32*, i32** %54, align 8
  %56 = bitcast %union.anon* %53 to [5 x i32]*
  %57 = sext i32 %22 to i64
  br label %231

58:                                               ; preds = %58, %29
  %59 = phi i64 [ 0, %29 ], [ %85, %58 ]
  %60 = phi i32 [ 1, %29 ], [ %84, %58 ]
  %61 = phi i64 [ %30, %29 ], [ %86, %58 ]
  %62 = getelementptr inbounds i32, i32* %14, i64 %59
  %63 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %59
  %64 = select i1 %11, i32* %62, i32* %63
  %65 = load i32, i32* %64, align 4
  %66 = mul nsw i32 %65, %60
  %67 = or i64 %59, 1
  %68 = getelementptr inbounds i32, i32* %14, i64 %67
  %69 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %67
  %70 = select i1 %11, i32* %68, i32* %69
  %71 = load i32, i32* %70, align 4
  %72 = mul nsw i32 %71, %66
  %73 = or i64 %59, 2
  %74 = getelementptr inbounds i32, i32* %14, i64 %73
  %75 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %73
  %76 = select i1 %11, i32* %74, i32* %75
  %77 = load i32, i32* %76, align 4
  %78 = mul nsw i32 %77, %72
  %79 = or i64 %59, 3
  %80 = getelementptr inbounds i32, i32* %14, i64 %79
  %81 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %79
  %82 = select i1 %11, i32* %80, i32* %81
  %83 = load i32, i32* %82, align 4
  %84 = mul nsw i32 %83, %78
  %85 = add nuw nsw i64 %59, 4
  %86 = add i64 %61, -4
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %31, label %58

88:                                               ; preds = %231, %48
  %89 = phi i32 [ 1, %48 ], [ %238, %231 ]
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  %91 = load i32, i32* %90, align 8
  %92 = icmp sgt i32 %91, 5
  %93 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  br i1 %92, label %94, label %97

94:                                               ; preds = %88
  %95 = getelementptr inbounds %union.anon, %union.anon* %93, i64 0, i32 0
  %96 = load i32*, i32** %95, align 8
  br label %100

97:                                               ; preds = %88
  %98 = bitcast %union.anon* %93 to i32*
  %99 = icmp sgt i32 %91, 0
  br i1 %99, label %100, label %200

100:                                              ; preds = %97, %94
  %101 = phi i32* [ %96, %94 ], [ %98, %97 ]
  %102 = zext i32 %91 to i64
  %103 = icmp ult i32 %91, 8
  br i1 %103, label %189, label %104

104:                                              ; preds = %100
  %105 = and i64 %102, 4294967288
  %106 = add nsw i64 %105, -8
  %107 = lshr exact i64 %106, 3
  %108 = add nuw nsw i64 %107, 1
  %109 = and i64 %108, 3
  %110 = icmp ult i64 %106, 24
  br i1 %110, label %156, label %111

111:                                              ; preds = %104
  %112 = sub nsw i64 %108, %109
  br label %113

113:                                              ; preds = %113, %111
  %114 = phi i64 [ 0, %111 ], [ %153, %113 ]
  %115 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %111 ], [ %151, %113 ]
  %116 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %111 ], [ %152, %113 ]
  %117 = phi i64 [ %112, %111 ], [ %154, %113 ]
  %118 = getelementptr inbounds i32, i32* %101, i64 %114
  %119 = bitcast i32* %118 to <4 x i32>*
  %120 = load <4 x i32>, <4 x i32>* %119, align 4
  %121 = getelementptr inbounds i32, i32* %118, i64 4
  %122 = bitcast i32* %121 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 4
  %124 = mul nsw <4 x i32> %120, %115
  %125 = mul nsw <4 x i32> %123, %116
  %126 = or i64 %114, 8
  %127 = getelementptr inbounds i32, i32* %101, i64 %126
  %128 = bitcast i32* %127 to <4 x i32>*
  %129 = load <4 x i32>, <4 x i32>* %128, align 4
  %130 = getelementptr inbounds i32, i32* %127, i64 4
  %131 = bitcast i32* %130 to <4 x i32>*
  %132 = load <4 x i32>, <4 x i32>* %131, align 4
  %133 = mul nsw <4 x i32> %129, %124
  %134 = mul nsw <4 x i32> %132, %125
  %135 = or i64 %114, 16
  %136 = getelementptr inbounds i32, i32* %101, i64 %135
  %137 = bitcast i32* %136 to <4 x i32>*
  %138 = load <4 x i32>, <4 x i32>* %137, align 4
  %139 = getelementptr inbounds i32, i32* %136, i64 4
  %140 = bitcast i32* %139 to <4 x i32>*
  %141 = load <4 x i32>, <4 x i32>* %140, align 4
  %142 = mul nsw <4 x i32> %138, %133
  %143 = mul nsw <4 x i32> %141, %134
  %144 = or i64 %114, 24
  %145 = getelementptr inbounds i32, i32* %101, i64 %144
  %146 = bitcast i32* %145 to <4 x i32>*
  %147 = load <4 x i32>, <4 x i32>* %146, align 4
  %148 = getelementptr inbounds i32, i32* %145, i64 4
  %149 = bitcast i32* %148 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 4
  %151 = mul nsw <4 x i32> %147, %142
  %152 = mul nsw <4 x i32> %150, %143
  %153 = add i64 %114, 32
  %154 = add i64 %117, -4
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %113, !llvm.loop !113

156:                                              ; preds = %113, %104
  %157 = phi <4 x i32> [ undef, %104 ], [ %151, %113 ]
  %158 = phi <4 x i32> [ undef, %104 ], [ %152, %113 ]
  %159 = phi i64 [ 0, %104 ], [ %153, %113 ]
  %160 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %104 ], [ %151, %113 ]
  %161 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %104 ], [ %152, %113 ]
  %162 = icmp eq i64 %109, 0
  br i1 %162, label %179, label %163

163:                                              ; preds = %156, %163
  %164 = phi i64 [ %176, %163 ], [ %159, %156 ]
  %165 = phi <4 x i32> [ %174, %163 ], [ %160, %156 ]
  %166 = phi <4 x i32> [ %175, %163 ], [ %161, %156 ]
  %167 = phi i64 [ %177, %163 ], [ %109, %156 ]
  %168 = getelementptr inbounds i32, i32* %101, i64 %164
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 4
  %171 = getelementptr inbounds i32, i32* %168, i64 4
  %172 = bitcast i32* %171 to <4 x i32>*
  %173 = load <4 x i32>, <4 x i32>* %172, align 4
  %174 = mul nsw <4 x i32> %170, %165
  %175 = mul nsw <4 x i32> %173, %166
  %176 = add i64 %164, 8
  %177 = add i64 %167, -1
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %179, label %163, !llvm.loop !114

179:                                              ; preds = %163, %156
  %180 = phi <4 x i32> [ %157, %156 ], [ %174, %163 ]
  %181 = phi <4 x i32> [ %158, %156 ], [ %175, %163 ]
  %182 = mul <4 x i32> %181, %180
  %183 = shufflevector <4 x i32> %182, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %184 = mul <4 x i32> %182, %183
  %185 = shufflevector <4 x i32> %184, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %186 = mul <4 x i32> %184, %185
  %187 = extractelement <4 x i32> %186, i32 0
  %188 = icmp eq i64 %105, %102
  br i1 %188, label %200, label %189

189:                                              ; preds = %179, %100
  %190 = phi i64 [ 0, %100 ], [ %105, %179 ]
  %191 = phi i32 [ 1, %100 ], [ %187, %179 ]
  br label %192

192:                                              ; preds = %189, %192
  %193 = phi i64 [ %198, %192 ], [ %190, %189 ]
  %194 = phi i32 [ %197, %192 ], [ %191, %189 ]
  %195 = getelementptr inbounds i32, i32* %101, i64 %193
  %196 = load i32, i32* %195, align 4
  %197 = mul nsw i32 %196, %194
  %198 = add nuw nsw i64 %193, 1
  %199 = icmp eq i64 %198, %102
  br i1 %199, label %200, label %192, !llvm.loop !115

200:                                              ; preds = %192, %179, %97
  %201 = phi i32 [ 1, %97 ], [ %187, %179 ], [ %197, %192 ]
  %202 = bitcast %"class.std::__1::vector"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %202) #8
  %203 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %204 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 1
  %205 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  %206 = sext i32 %20 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %202, i8 0, i64 24, i1 false) #8
  %207 = icmp eq i32 %20, 0
  br i1 %207, label %241, label %208

208:                                              ; preds = %200
  %209 = icmp slt i32 %20, 0
  br i1 %209, label %210, label %212

210:                                              ; preds = %208
  %211 = bitcast %"class.std::__1::vector"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %211) #10
  unreachable

212:                                              ; preds = %208
  %213 = shl nsw i64 %206, 2
  %214 = tail call i8* @_Znwm(i64 %213) #9
  %215 = bitcast i8* %214 to i32*
  %216 = bitcast %"class.std::__1::vector"* %7 to i8**
  store i8* %214, i8** %216, align 8
  %217 = getelementptr inbounds i32, i32* %215, i64 %206
  store i32* %217, i32** %205, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %214, i8 0, i64 %213, i1 false)
  %218 = bitcast i32** %204 to i64*
  %219 = ptrtoint i32* %217 to i64
  store i64 %219, i64* %218, align 8
  %220 = getelementptr inbounds %union.anon, %union.anon* %93, i64 0, i32 0
  %221 = bitcast %union.anon* %93 to [5 x i32]*
  %222 = zext i32 %20 to i64
  %223 = icmp sgt i32 %91, 5
  %224 = load i32*, i32** %220, align 8
  %225 = bitcast %union.anon* %93 to i32*
  %226 = select i1 %223, i32* %224, i32* %225
  %227 = load i32, i32* %226, align 4
  %228 = sdiv i32 %201, %227
  store i32 %228, i32* %215, align 4
  %229 = load i32*, i32** %203, align 8
  %230 = icmp eq i32 %20, 1
  br i1 %230, label %241, label %278

231:                                              ; preds = %51, %231
  %232 = phi i64 [ %15, %51 ], [ %239, %231 ]
  %233 = phi i32 [ 1, %51 ], [ %238, %231 ]
  %234 = getelementptr inbounds i32, i32* %55, i64 %232
  %235 = getelementptr inbounds [5 x i32], [5 x i32]* %56, i64 0, i64 %232
  %236 = select i1 %52, i32* %234, i32* %235
  %237 = load i32, i32* %236, align 4
  %238 = mul nsw i32 %237, %233
  %239 = add nsw i64 %232, 1
  %240 = icmp slt i64 %239, %57
  br i1 %240, label %231, label %88

241:                                              ; preds = %278, %212, %200
  %242 = phi i1 [ false, %200 ], [ true, %212 ], [ true, %278 ]
  %243 = phi i32* [ null, %200 ], [ %229, %212 ], [ %293, %278 ]
  %244 = sext i32 %201 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %5, i8 0, i64 %244, i1 false)
  %245 = icmp sgt i32 %49, 0
  br i1 %245, label %246, label %384

246:                                              ; preds = %241
  %247 = icmp sgt i32 %89, 0
  %248 = sext i32 %89 to i64
  %249 = zext i32 %49 to i64
  %250 = zext i32 %20 to i64
  %251 = zext i32 %89 to i64
  %252 = getelementptr i8, i8* %5, i64 %251
  %253 = and i64 %250, 4294967288
  %254 = add nsw i64 %253, -8
  %255 = lshr exact i64 %254, 3
  %256 = add nuw nsw i64 %255, 1
  %257 = and i64 %251, 4294967264
  %258 = add nsw i64 %257, -32
  %259 = lshr exact i64 %258, 5
  %260 = add nuw nsw i64 %259, 1
  %261 = icmp ult i32 %20, 8
  %262 = and i64 %250, 4294967288
  %263 = and i64 %256, 1
  %264 = icmp eq i64 %254, 0
  %265 = sub nuw nsw i64 %256, %263
  %266 = icmp eq i64 %263, 0
  %267 = icmp eq i64 %262, %250
  %268 = icmp ult i32 %89, 32
  %269 = and i64 %251, 4294967264
  %270 = and i64 %260, 1
  %271 = icmp eq i64 %258, 0
  %272 = sub nuw nsw i64 %260, %270
  %273 = icmp eq i64 %270, 0
  %274 = icmp eq i64 %269, %251
  %275 = and i64 %251, 1
  %276 = icmp eq i64 %275, 0
  %277 = sub nsw i64 0, %251
  br label %296

278:                                              ; preds = %212, %278
  %279 = phi i64 [ %294, %278 ], [ 1, %212 ]
  %280 = phi i32* [ %293, %278 ], [ %229, %212 ]
  %281 = phi i64 [ %279, %278 ], [ 0, %212 ]
  %282 = getelementptr inbounds i32, i32* %280, i64 %281
  %283 = load i32, i32* %282, align 4
  %284 = load i32, i32* %90, align 8
  %285 = icmp sgt i32 %284, 5
  %286 = load i32*, i32** %220, align 8
  %287 = getelementptr inbounds i32, i32* %286, i64 %279
  %288 = getelementptr inbounds [5 x i32], [5 x i32]* %221, i64 0, i64 %279
  %289 = select i1 %285, i32* %287, i32* %288
  %290 = load i32, i32* %289, align 4
  %291 = sdiv i32 %283, %290
  %292 = getelementptr inbounds i32, i32* %280, i64 %279
  store i32 %291, i32* %292, align 4
  %293 = load i32*, i32** %203, align 8
  %294 = add nuw nsw i64 %279, 1
  %295 = icmp eq i64 %294, %222
  br i1 %295, label %241, label %278

296:                                              ; preds = %495, %246
  %297 = phi i64 [ 0, %246 ], [ %496, %495 ]
  %298 = mul i64 %297, %248
  %299 = getelementptr i8, i8* %3, i64 %298
  %300 = add i64 %298, %251
  %301 = getelementptr i8, i8* %3, i64 %300
  br i1 %242, label %302, label %391

302:                                              ; preds = %296
  %303 = mul nsw i64 %297, %206
  br i1 %261, label %304, label %307

304:                                              ; preds = %375, %302
  %305 = phi i64 [ 0, %302 ], [ %262, %375 ]
  %306 = phi i32 [ 0, %302 ], [ %383, %375 ]
  br label %483

307:                                              ; preds = %302
  br i1 %264, label %351, label %308

308:                                              ; preds = %307, %308
  %309 = phi i64 [ %348, %308 ], [ 0, %307 ]
  %310 = phi <4 x i32> [ %346, %308 ], [ zeroinitializer, %307 ]
  %311 = phi <4 x i32> [ %347, %308 ], [ zeroinitializer, %307 ]
  %312 = phi i64 [ %349, %308 ], [ %265, %307 ]
  %313 = add nsw i64 %309, %303
  %314 = getelementptr inbounds i32, i32* %1, i64 %313
  %315 = bitcast i32* %314 to <4 x i32>*
  %316 = load <4 x i32>, <4 x i32>* %315, align 4
  %317 = getelementptr inbounds i32, i32* %314, i64 4
  %318 = bitcast i32* %317 to <4 x i32>*
  %319 = load <4 x i32>, <4 x i32>* %318, align 4
  %320 = getelementptr inbounds i32, i32* %243, i64 %309
  %321 = bitcast i32* %320 to <4 x i32>*
  %322 = load <4 x i32>, <4 x i32>* %321, align 4
  %323 = getelementptr inbounds i32, i32* %320, i64 4
  %324 = bitcast i32* %323 to <4 x i32>*
  %325 = load <4 x i32>, <4 x i32>* %324, align 4
  %326 = mul nsw <4 x i32> %322, %316
  %327 = mul nsw <4 x i32> %325, %319
  %328 = add nsw <4 x i32> %326, %310
  %329 = add nsw <4 x i32> %327, %311
  %330 = or i64 %309, 8
  %331 = add nsw i64 %330, %303
  %332 = getelementptr inbounds i32, i32* %1, i64 %331
  %333 = bitcast i32* %332 to <4 x i32>*
  %334 = load <4 x i32>, <4 x i32>* %333, align 4
  %335 = getelementptr inbounds i32, i32* %332, i64 4
  %336 = bitcast i32* %335 to <4 x i32>*
  %337 = load <4 x i32>, <4 x i32>* %336, align 4
  %338 = getelementptr inbounds i32, i32* %243, i64 %330
  %339 = bitcast i32* %338 to <4 x i32>*
  %340 = load <4 x i32>, <4 x i32>* %339, align 4
  %341 = getelementptr inbounds i32, i32* %338, i64 4
  %342 = bitcast i32* %341 to <4 x i32>*
  %343 = load <4 x i32>, <4 x i32>* %342, align 4
  %344 = mul nsw <4 x i32> %340, %334
  %345 = mul nsw <4 x i32> %343, %337
  %346 = add nsw <4 x i32> %344, %328
  %347 = add nsw <4 x i32> %345, %329
  %348 = add i64 %309, 16
  %349 = add i64 %312, -2
  %350 = icmp eq i64 %349, 0
  br i1 %350, label %351, label %308, !llvm.loop !116

351:                                              ; preds = %308, %307
  %352 = phi <4 x i32> [ undef, %307 ], [ %346, %308 ]
  %353 = phi <4 x i32> [ undef, %307 ], [ %347, %308 ]
  %354 = phi i64 [ 0, %307 ], [ %348, %308 ]
  %355 = phi <4 x i32> [ zeroinitializer, %307 ], [ %346, %308 ]
  %356 = phi <4 x i32> [ zeroinitializer, %307 ], [ %347, %308 ]
  br i1 %266, label %375, label %357

357:                                              ; preds = %351
  %358 = add nsw i64 %354, %303
  %359 = getelementptr inbounds i32, i32* %1, i64 %358
  %360 = getelementptr inbounds i32, i32* %243, i64 %354
  %361 = getelementptr inbounds i32, i32* %360, i64 4
  %362 = bitcast i32* %361 to <4 x i32>*
  %363 = load <4 x i32>, <4 x i32>* %362, align 4
  %364 = getelementptr inbounds i32, i32* %359, i64 4
  %365 = bitcast i32* %364 to <4 x i32>*
  %366 = load <4 x i32>, <4 x i32>* %365, align 4
  %367 = mul nsw <4 x i32> %363, %366
  %368 = add nsw <4 x i32> %367, %356
  %369 = bitcast i32* %360 to <4 x i32>*
  %370 = load <4 x i32>, <4 x i32>* %369, align 4
  %371 = bitcast i32* %359 to <4 x i32>*
  %372 = load <4 x i32>, <4 x i32>* %371, align 4
  %373 = mul nsw <4 x i32> %370, %372
  %374 = add nsw <4 x i32> %373, %355
  br label %375

375:                                              ; preds = %351, %357
  %376 = phi <4 x i32> [ %352, %351 ], [ %374, %357 ]
  %377 = phi <4 x i32> [ %353, %351 ], [ %368, %357 ]
  %378 = add <4 x i32> %377, %376
  %379 = shufflevector <4 x i32> %378, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %380 = add <4 x i32> %378, %379
  %381 = shufflevector <4 x i32> %380, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %382 = add <4 x i32> %380, %381
  %383 = extractelement <4 x i32> %382, i32 0
  br i1 %267, label %391, label %304

384:                                              ; preds = %495, %241
  %385 = icmp eq i32* %243, null
  br i1 %385, label %390, label %386

386:                                              ; preds = %384
  %387 = ptrtoint i32* %243 to i64
  %388 = bitcast i32** %204 to i64*
  store i64 %387, i64* %388, align 8
  %389 = bitcast i32* %243 to i8*
  tail call void @_ZdlPv(i8* %389) #9
  br label %390

390:                                              ; preds = %384, %386
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %202) #8
  ret void

391:                                              ; preds = %483, %375, %296
  %392 = phi i32 [ 0, %296 ], [ %383, %375 ], [ %492, %483 ]
  br i1 %247, label %393, label %495

393:                                              ; preds = %391
  %394 = mul nsw i64 %297, %248
  %395 = sext i32 %392 to i64
  br i1 %268, label %396, label %411

396:                                              ; preds = %482, %411, %393
  %397 = phi i64 [ 0, %411 ], [ 0, %393 ], [ %269, %482 ]
  %398 = xor i64 %397, -1
  br i1 %276, label %408, label %399

399:                                              ; preds = %396
  %400 = add nsw i64 %397, %394
  %401 = getelementptr inbounds i8, i8* %3, i64 %400
  %402 = load i8, i8* %401, align 1
  %403 = add nsw i64 %397, %395
  %404 = getelementptr inbounds i8, i8* %5, i64 %403
  %405 = load i8, i8* %404, align 1
  %406 = add i8 %405, %402
  store i8 %406, i8* %404, align 1
  %407 = or i64 %397, 1
  br label %408

408:                                              ; preds = %399, %396
  %409 = phi i64 [ %407, %399 ], [ %397, %396 ]
  %410 = icmp eq i64 %398, %277
  br i1 %410, label %495, label %498

411:                                              ; preds = %393
  %412 = getelementptr i8, i8* %5, i64 %395
  %413 = getelementptr i8, i8* %252, i64 %395
  %414 = icmp ult i8* %412, %301
  %415 = icmp ult i8* %299, %413
  %416 = and i1 %414, %415
  br i1 %416, label %396, label %417

417:                                              ; preds = %411
  br i1 %271, label %461, label %418

418:                                              ; preds = %417, %418
  %419 = phi i64 [ %458, %418 ], [ 0, %417 ]
  %420 = phi i64 [ %459, %418 ], [ %272, %417 ]
  %421 = add nsw i64 %419, %394
  %422 = getelementptr inbounds i8, i8* %3, i64 %421
  %423 = bitcast i8* %422 to <16 x i8>*
  %424 = load <16 x i8>, <16 x i8>* %423, align 1, !alias.scope !117
  %425 = getelementptr inbounds i8, i8* %422, i64 16
  %426 = bitcast i8* %425 to <16 x i8>*
  %427 = load <16 x i8>, <16 x i8>* %426, align 1, !alias.scope !117
  %428 = add nsw i64 %419, %395
  %429 = getelementptr inbounds i8, i8* %5, i64 %428
  %430 = bitcast i8* %429 to <16 x i8>*
  %431 = load <16 x i8>, <16 x i8>* %430, align 1, !alias.scope !120, !noalias !117
  %432 = getelementptr inbounds i8, i8* %429, i64 16
  %433 = bitcast i8* %432 to <16 x i8>*
  %434 = load <16 x i8>, <16 x i8>* %433, align 1, !alias.scope !120, !noalias !117
  %435 = add <16 x i8> %431, %424
  %436 = add <16 x i8> %434, %427
  %437 = bitcast i8* %429 to <16 x i8>*
  store <16 x i8> %435, <16 x i8>* %437, align 1, !alias.scope !120, !noalias !117
  %438 = bitcast i8* %432 to <16 x i8>*
  store <16 x i8> %436, <16 x i8>* %438, align 1, !alias.scope !120, !noalias !117
  %439 = or i64 %419, 32
  %440 = add nsw i64 %439, %394
  %441 = getelementptr inbounds i8, i8* %3, i64 %440
  %442 = bitcast i8* %441 to <16 x i8>*
  %443 = load <16 x i8>, <16 x i8>* %442, align 1, !alias.scope !117
  %444 = getelementptr inbounds i8, i8* %441, i64 16
  %445 = bitcast i8* %444 to <16 x i8>*
  %446 = load <16 x i8>, <16 x i8>* %445, align 1, !alias.scope !117
  %447 = add nsw i64 %439, %395
  %448 = getelementptr inbounds i8, i8* %5, i64 %447
  %449 = bitcast i8* %448 to <16 x i8>*
  %450 = load <16 x i8>, <16 x i8>* %449, align 1, !alias.scope !120, !noalias !117
  %451 = getelementptr inbounds i8, i8* %448, i64 16
  %452 = bitcast i8* %451 to <16 x i8>*
  %453 = load <16 x i8>, <16 x i8>* %452, align 1, !alias.scope !120, !noalias !117
  %454 = add <16 x i8> %450, %443
  %455 = add <16 x i8> %453, %446
  %456 = bitcast i8* %448 to <16 x i8>*
  store <16 x i8> %454, <16 x i8>* %456, align 1, !alias.scope !120, !noalias !117
  %457 = bitcast i8* %451 to <16 x i8>*
  store <16 x i8> %455, <16 x i8>* %457, align 1, !alias.scope !120, !noalias !117
  %458 = add i64 %419, 64
  %459 = add i64 %420, -2
  %460 = icmp eq i64 %459, 0
  br i1 %460, label %461, label %418, !llvm.loop !122

461:                                              ; preds = %418, %417
  %462 = phi i64 [ 0, %417 ], [ %458, %418 ]
  br i1 %273, label %482, label %463

463:                                              ; preds = %461
  %464 = add nsw i64 %462, %394
  %465 = getelementptr inbounds i8, i8* %3, i64 %464
  %466 = bitcast i8* %465 to <16 x i8>*
  %467 = load <16 x i8>, <16 x i8>* %466, align 1, !alias.scope !117
  %468 = getelementptr inbounds i8, i8* %465, i64 16
  %469 = bitcast i8* %468 to <16 x i8>*
  %470 = load <16 x i8>, <16 x i8>* %469, align 1, !alias.scope !117
  %471 = add nsw i64 %462, %395
  %472 = getelementptr inbounds i8, i8* %5, i64 %471
  %473 = bitcast i8* %472 to <16 x i8>*
  %474 = load <16 x i8>, <16 x i8>* %473, align 1, !alias.scope !120, !noalias !117
  %475 = getelementptr inbounds i8, i8* %472, i64 16
  %476 = bitcast i8* %475 to <16 x i8>*
  %477 = load <16 x i8>, <16 x i8>* %476, align 1, !alias.scope !120, !noalias !117
  %478 = add <16 x i8> %474, %467
  %479 = add <16 x i8> %477, %470
  %480 = bitcast i8* %472 to <16 x i8>*
  store <16 x i8> %478, <16 x i8>* %480, align 1, !alias.scope !120, !noalias !117
  %481 = bitcast i8* %475 to <16 x i8>*
  store <16 x i8> %479, <16 x i8>* %481, align 1, !alias.scope !120, !noalias !117
  br label %482

482:                                              ; preds = %461, %463
  br i1 %274, label %495, label %396

483:                                              ; preds = %304, %483
  %484 = phi i64 [ %493, %483 ], [ %305, %304 ]
  %485 = phi i32 [ %492, %483 ], [ %306, %304 ]
  %486 = add nsw i64 %484, %303
  %487 = getelementptr inbounds i32, i32* %1, i64 %486
  %488 = load i32, i32* %487, align 4
  %489 = getelementptr inbounds i32, i32* %243, i64 %484
  %490 = load i32, i32* %489, align 4
  %491 = mul nsw i32 %490, %488
  %492 = add nsw i32 %491, %485
  %493 = add nuw nsw i64 %484, 1
  %494 = icmp eq i64 %493, %250
  br i1 %494, label %391, label %483, !llvm.loop !123

495:                                              ; preds = %408, %498, %482, %391
  %496 = add nuw nsw i64 %297, 1
  %497 = icmp eq i64 %496, %249
  br i1 %497, label %384, label %296

498:                                              ; preds = %408, %498
  %499 = phi i64 [ %515, %498 ], [ %409, %408 ]
  %500 = add nsw i64 %499, %394
  %501 = getelementptr inbounds i8, i8* %3, i64 %500
  %502 = load i8, i8* %501, align 1
  %503 = add nsw i64 %499, %395
  %504 = getelementptr inbounds i8, i8* %5, i64 %503
  %505 = load i8, i8* %504, align 1
  %506 = add i8 %505, %502
  store i8 %506, i8* %504, align 1
  %507 = add nuw nsw i64 %499, 1
  %508 = add nsw i64 %507, %394
  %509 = getelementptr inbounds i8, i8* %3, i64 %508
  %510 = load i8, i8* %509, align 1
  %511 = add nsw i64 %507, %395
  %512 = getelementptr inbounds i8, i8* %5, i64 %511
  %513 = load i8, i8* %512, align 1
  %514 = add i8 %513, %510
  store i8 %514, i8* %512, align 1
  %515 = add nuw nsw i64 %499, 2
  %516 = icmp eq i64 %515, %251
  br i1 %516, label %495, label %498, !llvm.loop !124
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops9ScatterNdIiiEEvRKNS_12RuntimeShapeEPKT_S4_PKT0_S4_PS8_(%"class.tflite::RuntimeShape"* dereferenceable(32), i32*, %"class.tflite::RuntimeShape"* dereferenceable(32), i32*, %"class.tflite::RuntimeShape"* dereferenceable(32), i32*) local_unnamed_addr #6 comdat {
  %7 = alloca %"class.std::__1::vector", align 8
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = add i32 %9, -1
  %11 = icmp sgt i32 %9, 5
  %12 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %0, i64 0, i32 1
  %13 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %14 = load i32*, i32** %13, align 8
  %15 = sext i32 %10 to i64
  %16 = getelementptr inbounds i32, i32* %14, i64 %15
  %17 = bitcast %union.anon* %12 to [5 x i32]*
  %18 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %15
  %19 = select i1 %11, i32* %16, i32* %18
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %2, i64 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = icmp sgt i32 %10, 0
  br i1 %23, label %24, label %48

24:                                               ; preds = %6
  %25 = zext i32 %10 to i64
  %26 = add nsw i64 %25, -1
  %27 = and i64 %25, 3
  %28 = icmp ult i64 %26, 3
  br i1 %28, label %31, label %29

29:                                               ; preds = %24
  %30 = sub nsw i64 %25, %27
  br label %58

31:                                               ; preds = %58, %24
  %32 = phi i32 [ undef, %24 ], [ %84, %58 ]
  %33 = phi i64 [ 0, %24 ], [ %85, %58 ]
  %34 = phi i32 [ 1, %24 ], [ %84, %58 ]
  %35 = icmp eq i64 %27, 0
  br i1 %35, label %48, label %36

36:                                               ; preds = %31, %36
  %37 = phi i64 [ %45, %36 ], [ %33, %31 ]
  %38 = phi i32 [ %44, %36 ], [ %34, %31 ]
  %39 = phi i64 [ %46, %36 ], [ %27, %31 ]
  %40 = getelementptr inbounds i32, i32* %14, i64 %37
  %41 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %37
  %42 = select i1 %11, i32* %40, i32* %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %43, %38
  %45 = add nuw nsw i64 %37, 1
  %46 = add i64 %39, -1
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %36, !llvm.loop !125

48:                                               ; preds = %31, %36, %6
  %49 = phi i32 [ 1, %6 ], [ %32, %31 ], [ %44, %36 ]
  %50 = icmp sgt i32 %9, %22
  br i1 %50, label %88, label %51

51:                                               ; preds = %48
  %52 = icmp sgt i32 %22, 5
  %53 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %2, i64 0, i32 1
  %54 = getelementptr inbounds %union.anon, %union.anon* %53, i64 0, i32 0
  %55 = load i32*, i32** %54, align 8
  %56 = bitcast %union.anon* %53 to [5 x i32]*
  %57 = sext i32 %22 to i64
  br label %231

58:                                               ; preds = %58, %29
  %59 = phi i64 [ 0, %29 ], [ %85, %58 ]
  %60 = phi i32 [ 1, %29 ], [ %84, %58 ]
  %61 = phi i64 [ %30, %29 ], [ %86, %58 ]
  %62 = getelementptr inbounds i32, i32* %14, i64 %59
  %63 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %59
  %64 = select i1 %11, i32* %62, i32* %63
  %65 = load i32, i32* %64, align 4
  %66 = mul nsw i32 %65, %60
  %67 = or i64 %59, 1
  %68 = getelementptr inbounds i32, i32* %14, i64 %67
  %69 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %67
  %70 = select i1 %11, i32* %68, i32* %69
  %71 = load i32, i32* %70, align 4
  %72 = mul nsw i32 %71, %66
  %73 = or i64 %59, 2
  %74 = getelementptr inbounds i32, i32* %14, i64 %73
  %75 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %73
  %76 = select i1 %11, i32* %74, i32* %75
  %77 = load i32, i32* %76, align 4
  %78 = mul nsw i32 %77, %72
  %79 = or i64 %59, 3
  %80 = getelementptr inbounds i32, i32* %14, i64 %79
  %81 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %79
  %82 = select i1 %11, i32* %80, i32* %81
  %83 = load i32, i32* %82, align 4
  %84 = mul nsw i32 %83, %78
  %85 = add nuw nsw i64 %59, 4
  %86 = add i64 %61, -4
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %31, label %58

88:                                               ; preds = %231, %48
  %89 = phi i32 [ 1, %48 ], [ %238, %231 ]
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  %91 = load i32, i32* %90, align 8
  %92 = icmp sgt i32 %91, 5
  %93 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  br i1 %92, label %94, label %97

94:                                               ; preds = %88
  %95 = getelementptr inbounds %union.anon, %union.anon* %93, i64 0, i32 0
  %96 = load i32*, i32** %95, align 8
  br label %100

97:                                               ; preds = %88
  %98 = bitcast %union.anon* %93 to i32*
  %99 = icmp sgt i32 %91, 0
  br i1 %99, label %100, label %200

100:                                              ; preds = %97, %94
  %101 = phi i32* [ %96, %94 ], [ %98, %97 ]
  %102 = zext i32 %91 to i64
  %103 = icmp ult i32 %91, 8
  br i1 %103, label %189, label %104

104:                                              ; preds = %100
  %105 = and i64 %102, 4294967288
  %106 = add nsw i64 %105, -8
  %107 = lshr exact i64 %106, 3
  %108 = add nuw nsw i64 %107, 1
  %109 = and i64 %108, 3
  %110 = icmp ult i64 %106, 24
  br i1 %110, label %156, label %111

111:                                              ; preds = %104
  %112 = sub nsw i64 %108, %109
  br label %113

113:                                              ; preds = %113, %111
  %114 = phi i64 [ 0, %111 ], [ %153, %113 ]
  %115 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %111 ], [ %151, %113 ]
  %116 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %111 ], [ %152, %113 ]
  %117 = phi i64 [ %112, %111 ], [ %154, %113 ]
  %118 = getelementptr inbounds i32, i32* %101, i64 %114
  %119 = bitcast i32* %118 to <4 x i32>*
  %120 = load <4 x i32>, <4 x i32>* %119, align 4
  %121 = getelementptr inbounds i32, i32* %118, i64 4
  %122 = bitcast i32* %121 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 4
  %124 = mul nsw <4 x i32> %120, %115
  %125 = mul nsw <4 x i32> %123, %116
  %126 = or i64 %114, 8
  %127 = getelementptr inbounds i32, i32* %101, i64 %126
  %128 = bitcast i32* %127 to <4 x i32>*
  %129 = load <4 x i32>, <4 x i32>* %128, align 4
  %130 = getelementptr inbounds i32, i32* %127, i64 4
  %131 = bitcast i32* %130 to <4 x i32>*
  %132 = load <4 x i32>, <4 x i32>* %131, align 4
  %133 = mul nsw <4 x i32> %129, %124
  %134 = mul nsw <4 x i32> %132, %125
  %135 = or i64 %114, 16
  %136 = getelementptr inbounds i32, i32* %101, i64 %135
  %137 = bitcast i32* %136 to <4 x i32>*
  %138 = load <4 x i32>, <4 x i32>* %137, align 4
  %139 = getelementptr inbounds i32, i32* %136, i64 4
  %140 = bitcast i32* %139 to <4 x i32>*
  %141 = load <4 x i32>, <4 x i32>* %140, align 4
  %142 = mul nsw <4 x i32> %138, %133
  %143 = mul nsw <4 x i32> %141, %134
  %144 = or i64 %114, 24
  %145 = getelementptr inbounds i32, i32* %101, i64 %144
  %146 = bitcast i32* %145 to <4 x i32>*
  %147 = load <4 x i32>, <4 x i32>* %146, align 4
  %148 = getelementptr inbounds i32, i32* %145, i64 4
  %149 = bitcast i32* %148 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 4
  %151 = mul nsw <4 x i32> %147, %142
  %152 = mul nsw <4 x i32> %150, %143
  %153 = add i64 %114, 32
  %154 = add i64 %117, -4
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %113, !llvm.loop !126

156:                                              ; preds = %113, %104
  %157 = phi <4 x i32> [ undef, %104 ], [ %151, %113 ]
  %158 = phi <4 x i32> [ undef, %104 ], [ %152, %113 ]
  %159 = phi i64 [ 0, %104 ], [ %153, %113 ]
  %160 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %104 ], [ %151, %113 ]
  %161 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %104 ], [ %152, %113 ]
  %162 = icmp eq i64 %109, 0
  br i1 %162, label %179, label %163

163:                                              ; preds = %156, %163
  %164 = phi i64 [ %176, %163 ], [ %159, %156 ]
  %165 = phi <4 x i32> [ %174, %163 ], [ %160, %156 ]
  %166 = phi <4 x i32> [ %175, %163 ], [ %161, %156 ]
  %167 = phi i64 [ %177, %163 ], [ %109, %156 ]
  %168 = getelementptr inbounds i32, i32* %101, i64 %164
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 4
  %171 = getelementptr inbounds i32, i32* %168, i64 4
  %172 = bitcast i32* %171 to <4 x i32>*
  %173 = load <4 x i32>, <4 x i32>* %172, align 4
  %174 = mul nsw <4 x i32> %170, %165
  %175 = mul nsw <4 x i32> %173, %166
  %176 = add i64 %164, 8
  %177 = add i64 %167, -1
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %179, label %163, !llvm.loop !127

179:                                              ; preds = %163, %156
  %180 = phi <4 x i32> [ %157, %156 ], [ %174, %163 ]
  %181 = phi <4 x i32> [ %158, %156 ], [ %175, %163 ]
  %182 = mul <4 x i32> %181, %180
  %183 = shufflevector <4 x i32> %182, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %184 = mul <4 x i32> %182, %183
  %185 = shufflevector <4 x i32> %184, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %186 = mul <4 x i32> %184, %185
  %187 = extractelement <4 x i32> %186, i32 0
  %188 = icmp eq i64 %105, %102
  br i1 %188, label %200, label %189

189:                                              ; preds = %179, %100
  %190 = phi i64 [ 0, %100 ], [ %105, %179 ]
  %191 = phi i32 [ 1, %100 ], [ %187, %179 ]
  br label %192

192:                                              ; preds = %189, %192
  %193 = phi i64 [ %198, %192 ], [ %190, %189 ]
  %194 = phi i32 [ %197, %192 ], [ %191, %189 ]
  %195 = getelementptr inbounds i32, i32* %101, i64 %193
  %196 = load i32, i32* %195, align 4
  %197 = mul nsw i32 %196, %194
  %198 = add nuw nsw i64 %193, 1
  %199 = icmp eq i64 %198, %102
  br i1 %199, label %200, label %192, !llvm.loop !128

200:                                              ; preds = %192, %179, %97
  %201 = phi i32 [ 1, %97 ], [ %187, %179 ], [ %197, %192 ]
  %202 = bitcast %"class.std::__1::vector"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %202) #8
  %203 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %204 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 1
  %205 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  %206 = sext i32 %20 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %202, i8 0, i64 24, i1 false) #8
  %207 = icmp eq i32 %20, 0
  br i1 %207, label %241, label %208

208:                                              ; preds = %200
  %209 = icmp slt i32 %20, 0
  br i1 %209, label %210, label %212

210:                                              ; preds = %208
  %211 = bitcast %"class.std::__1::vector"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %211) #10
  unreachable

212:                                              ; preds = %208
  %213 = shl nsw i64 %206, 2
  %214 = tail call i8* @_Znwm(i64 %213) #9
  %215 = bitcast i8* %214 to i32*
  %216 = bitcast %"class.std::__1::vector"* %7 to i8**
  store i8* %214, i8** %216, align 8
  %217 = getelementptr inbounds i32, i32* %215, i64 %206
  store i32* %217, i32** %205, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %214, i8 0, i64 %213, i1 false)
  %218 = bitcast i32** %204 to i64*
  %219 = ptrtoint i32* %217 to i64
  store i64 %219, i64* %218, align 8
  %220 = getelementptr inbounds %union.anon, %union.anon* %93, i64 0, i32 0
  %221 = bitcast %union.anon* %93 to [5 x i32]*
  %222 = zext i32 %20 to i64
  %223 = icmp sgt i32 %91, 5
  %224 = load i32*, i32** %220, align 8
  %225 = bitcast %union.anon* %93 to i32*
  %226 = select i1 %223, i32* %224, i32* %225
  %227 = load i32, i32* %226, align 4
  %228 = sdiv i32 %201, %227
  store i32 %228, i32* %215, align 4
  %229 = load i32*, i32** %203, align 8
  %230 = icmp eq i32 %20, 1
  br i1 %230, label %241, label %280

231:                                              ; preds = %51, %231
  %232 = phi i64 [ %15, %51 ], [ %239, %231 ]
  %233 = phi i32 [ 1, %51 ], [ %238, %231 ]
  %234 = getelementptr inbounds i32, i32* %55, i64 %232
  %235 = getelementptr inbounds [5 x i32], [5 x i32]* %56, i64 0, i64 %232
  %236 = select i1 %52, i32* %234, i32* %235
  %237 = load i32, i32* %236, align 4
  %238 = mul nsw i32 %237, %233
  %239 = add nsw i64 %232, 1
  %240 = icmp slt i64 %239, %57
  br i1 %240, label %231, label %88

241:                                              ; preds = %280, %212, %200
  %242 = phi i1 [ false, %200 ], [ true, %212 ], [ true, %280 ]
  %243 = phi i32* [ null, %200 ], [ %229, %212 ], [ %295, %280 ]
  %244 = bitcast i32* %5 to i8*
  %245 = sext i32 %201 to i64
  %246 = shl nsw i64 %245, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %244, i8 0, i64 %246, i1 false)
  %247 = icmp sgt i32 %49, 0
  br i1 %247, label %248, label %386

248:                                              ; preds = %241
  %249 = icmp sgt i32 %89, 0
  %250 = sext i32 %89 to i64
  %251 = zext i32 %49 to i64
  %252 = zext i32 %20 to i64
  %253 = zext i32 %89 to i64
  %254 = getelementptr i32, i32* %5, i64 %253
  %255 = and i64 %252, 4294967288
  %256 = add nsw i64 %255, -8
  %257 = lshr exact i64 %256, 3
  %258 = add nuw nsw i64 %257, 1
  %259 = and i64 %253, 4294967288
  %260 = add nsw i64 %259, -8
  %261 = lshr exact i64 %260, 3
  %262 = add nuw nsw i64 %261, 1
  %263 = icmp ult i32 %20, 8
  %264 = and i64 %252, 4294967288
  %265 = and i64 %258, 1
  %266 = icmp eq i64 %256, 0
  %267 = sub nuw nsw i64 %258, %265
  %268 = icmp eq i64 %265, 0
  %269 = icmp eq i64 %264, %252
  %270 = icmp ult i32 %89, 8
  %271 = and i64 %253, 4294967288
  %272 = and i64 %262, 1
  %273 = icmp eq i64 %260, 0
  %274 = sub nuw nsw i64 %262, %272
  %275 = icmp eq i64 %272, 0
  %276 = icmp eq i64 %271, %253
  %277 = and i64 %253, 1
  %278 = icmp eq i64 %277, 0
  %279 = sub nsw i64 0, %253
  br label %298

280:                                              ; preds = %212, %280
  %281 = phi i64 [ %296, %280 ], [ 1, %212 ]
  %282 = phi i32* [ %295, %280 ], [ %229, %212 ]
  %283 = phi i64 [ %281, %280 ], [ 0, %212 ]
  %284 = getelementptr inbounds i32, i32* %282, i64 %283
  %285 = load i32, i32* %284, align 4
  %286 = load i32, i32* %90, align 8
  %287 = icmp sgt i32 %286, 5
  %288 = load i32*, i32** %220, align 8
  %289 = getelementptr inbounds i32, i32* %288, i64 %281
  %290 = getelementptr inbounds [5 x i32], [5 x i32]* %221, i64 0, i64 %281
  %291 = select i1 %287, i32* %289, i32* %290
  %292 = load i32, i32* %291, align 4
  %293 = sdiv i32 %285, %292
  %294 = getelementptr inbounds i32, i32* %282, i64 %281
  store i32 %293, i32* %294, align 4
  %295 = load i32*, i32** %203, align 8
  %296 = add nuw nsw i64 %281, 1
  %297 = icmp eq i64 %296, %222
  br i1 %297, label %241, label %280

298:                                              ; preds = %497, %248
  %299 = phi i64 [ 0, %248 ], [ %498, %497 ]
  %300 = mul i64 %299, %250
  %301 = getelementptr i32, i32* %3, i64 %300
  %302 = add i64 %300, %253
  %303 = getelementptr i32, i32* %3, i64 %302
  br i1 %242, label %304, label %393

304:                                              ; preds = %298
  %305 = mul nsw i64 %299, %206
  br i1 %263, label %306, label %309

306:                                              ; preds = %377, %304
  %307 = phi i64 [ 0, %304 ], [ %264, %377 ]
  %308 = phi i32 [ 0, %304 ], [ %385, %377 ]
  br label %485

309:                                              ; preds = %304
  br i1 %266, label %353, label %310

310:                                              ; preds = %309, %310
  %311 = phi i64 [ %350, %310 ], [ 0, %309 ]
  %312 = phi <4 x i32> [ %348, %310 ], [ zeroinitializer, %309 ]
  %313 = phi <4 x i32> [ %349, %310 ], [ zeroinitializer, %309 ]
  %314 = phi i64 [ %351, %310 ], [ %267, %309 ]
  %315 = add nsw i64 %311, %305
  %316 = getelementptr inbounds i32, i32* %1, i64 %315
  %317 = bitcast i32* %316 to <4 x i32>*
  %318 = load <4 x i32>, <4 x i32>* %317, align 4
  %319 = getelementptr inbounds i32, i32* %316, i64 4
  %320 = bitcast i32* %319 to <4 x i32>*
  %321 = load <4 x i32>, <4 x i32>* %320, align 4
  %322 = getelementptr inbounds i32, i32* %243, i64 %311
  %323 = bitcast i32* %322 to <4 x i32>*
  %324 = load <4 x i32>, <4 x i32>* %323, align 4
  %325 = getelementptr inbounds i32, i32* %322, i64 4
  %326 = bitcast i32* %325 to <4 x i32>*
  %327 = load <4 x i32>, <4 x i32>* %326, align 4
  %328 = mul nsw <4 x i32> %324, %318
  %329 = mul nsw <4 x i32> %327, %321
  %330 = add nsw <4 x i32> %328, %312
  %331 = add nsw <4 x i32> %329, %313
  %332 = or i64 %311, 8
  %333 = add nsw i64 %332, %305
  %334 = getelementptr inbounds i32, i32* %1, i64 %333
  %335 = bitcast i32* %334 to <4 x i32>*
  %336 = load <4 x i32>, <4 x i32>* %335, align 4
  %337 = getelementptr inbounds i32, i32* %334, i64 4
  %338 = bitcast i32* %337 to <4 x i32>*
  %339 = load <4 x i32>, <4 x i32>* %338, align 4
  %340 = getelementptr inbounds i32, i32* %243, i64 %332
  %341 = bitcast i32* %340 to <4 x i32>*
  %342 = load <4 x i32>, <4 x i32>* %341, align 4
  %343 = getelementptr inbounds i32, i32* %340, i64 4
  %344 = bitcast i32* %343 to <4 x i32>*
  %345 = load <4 x i32>, <4 x i32>* %344, align 4
  %346 = mul nsw <4 x i32> %342, %336
  %347 = mul nsw <4 x i32> %345, %339
  %348 = add nsw <4 x i32> %346, %330
  %349 = add nsw <4 x i32> %347, %331
  %350 = add i64 %311, 16
  %351 = add i64 %314, -2
  %352 = icmp eq i64 %351, 0
  br i1 %352, label %353, label %310, !llvm.loop !129

353:                                              ; preds = %310, %309
  %354 = phi <4 x i32> [ undef, %309 ], [ %348, %310 ]
  %355 = phi <4 x i32> [ undef, %309 ], [ %349, %310 ]
  %356 = phi i64 [ 0, %309 ], [ %350, %310 ]
  %357 = phi <4 x i32> [ zeroinitializer, %309 ], [ %348, %310 ]
  %358 = phi <4 x i32> [ zeroinitializer, %309 ], [ %349, %310 ]
  br i1 %268, label %377, label %359

359:                                              ; preds = %353
  %360 = add nsw i64 %356, %305
  %361 = getelementptr inbounds i32, i32* %1, i64 %360
  %362 = getelementptr inbounds i32, i32* %243, i64 %356
  %363 = getelementptr inbounds i32, i32* %362, i64 4
  %364 = bitcast i32* %363 to <4 x i32>*
  %365 = load <4 x i32>, <4 x i32>* %364, align 4
  %366 = getelementptr inbounds i32, i32* %361, i64 4
  %367 = bitcast i32* %366 to <4 x i32>*
  %368 = load <4 x i32>, <4 x i32>* %367, align 4
  %369 = mul nsw <4 x i32> %365, %368
  %370 = add nsw <4 x i32> %369, %358
  %371 = bitcast i32* %362 to <4 x i32>*
  %372 = load <4 x i32>, <4 x i32>* %371, align 4
  %373 = bitcast i32* %361 to <4 x i32>*
  %374 = load <4 x i32>, <4 x i32>* %373, align 4
  %375 = mul nsw <4 x i32> %372, %374
  %376 = add nsw <4 x i32> %375, %357
  br label %377

377:                                              ; preds = %353, %359
  %378 = phi <4 x i32> [ %354, %353 ], [ %376, %359 ]
  %379 = phi <4 x i32> [ %355, %353 ], [ %370, %359 ]
  %380 = add <4 x i32> %379, %378
  %381 = shufflevector <4 x i32> %380, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %382 = add <4 x i32> %380, %381
  %383 = shufflevector <4 x i32> %382, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %384 = add <4 x i32> %382, %383
  %385 = extractelement <4 x i32> %384, i32 0
  br i1 %269, label %393, label %306

386:                                              ; preds = %497, %241
  %387 = icmp eq i32* %243, null
  br i1 %387, label %392, label %388

388:                                              ; preds = %386
  %389 = ptrtoint i32* %243 to i64
  %390 = bitcast i32** %204 to i64*
  store i64 %389, i64* %390, align 8
  %391 = bitcast i32* %243 to i8*
  tail call void @_ZdlPv(i8* %391) #9
  br label %392

392:                                              ; preds = %386, %388
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %202) #8
  ret void

393:                                              ; preds = %485, %377, %298
  %394 = phi i32 [ 0, %298 ], [ %385, %377 ], [ %494, %485 ]
  br i1 %249, label %395, label %497

395:                                              ; preds = %393
  %396 = mul nsw i64 %299, %250
  %397 = sext i32 %394 to i64
  br i1 %270, label %398, label %413

398:                                              ; preds = %484, %413, %395
  %399 = phi i64 [ 0, %413 ], [ 0, %395 ], [ %271, %484 ]
  %400 = xor i64 %399, -1
  br i1 %278, label %410, label %401

401:                                              ; preds = %398
  %402 = add nsw i64 %399, %396
  %403 = getelementptr inbounds i32, i32* %3, i64 %402
  %404 = load i32, i32* %403, align 4
  %405 = add nsw i64 %399, %397
  %406 = getelementptr inbounds i32, i32* %5, i64 %405
  %407 = load i32, i32* %406, align 4
  %408 = add nsw i32 %407, %404
  store i32 %408, i32* %406, align 4
  %409 = or i64 %399, 1
  br label %410

410:                                              ; preds = %401, %398
  %411 = phi i64 [ %409, %401 ], [ %399, %398 ]
  %412 = icmp eq i64 %400, %279
  br i1 %412, label %497, label %500

413:                                              ; preds = %395
  %414 = getelementptr i32, i32* %5, i64 %397
  %415 = getelementptr i32, i32* %254, i64 %397
  %416 = icmp ult i32* %414, %303
  %417 = icmp ult i32* %301, %415
  %418 = and i1 %416, %417
  br i1 %418, label %398, label %419

419:                                              ; preds = %413
  br i1 %273, label %463, label %420

420:                                              ; preds = %419, %420
  %421 = phi i64 [ %460, %420 ], [ 0, %419 ]
  %422 = phi i64 [ %461, %420 ], [ %274, %419 ]
  %423 = add nsw i64 %421, %396
  %424 = getelementptr inbounds i32, i32* %3, i64 %423
  %425 = bitcast i32* %424 to <4 x i32>*
  %426 = load <4 x i32>, <4 x i32>* %425, align 4, !alias.scope !130
  %427 = getelementptr inbounds i32, i32* %424, i64 4
  %428 = bitcast i32* %427 to <4 x i32>*
  %429 = load <4 x i32>, <4 x i32>* %428, align 4, !alias.scope !130
  %430 = add nsw i64 %421, %397
  %431 = getelementptr inbounds i32, i32* %5, i64 %430
  %432 = bitcast i32* %431 to <4 x i32>*
  %433 = load <4 x i32>, <4 x i32>* %432, align 4, !alias.scope !133, !noalias !130
  %434 = getelementptr inbounds i32, i32* %431, i64 4
  %435 = bitcast i32* %434 to <4 x i32>*
  %436 = load <4 x i32>, <4 x i32>* %435, align 4, !alias.scope !133, !noalias !130
  %437 = add nsw <4 x i32> %433, %426
  %438 = add nsw <4 x i32> %436, %429
  %439 = bitcast i32* %431 to <4 x i32>*
  store <4 x i32> %437, <4 x i32>* %439, align 4, !alias.scope !133, !noalias !130
  %440 = bitcast i32* %434 to <4 x i32>*
  store <4 x i32> %438, <4 x i32>* %440, align 4, !alias.scope !133, !noalias !130
  %441 = or i64 %421, 8
  %442 = add nsw i64 %441, %396
  %443 = getelementptr inbounds i32, i32* %3, i64 %442
  %444 = bitcast i32* %443 to <4 x i32>*
  %445 = load <4 x i32>, <4 x i32>* %444, align 4, !alias.scope !130
  %446 = getelementptr inbounds i32, i32* %443, i64 4
  %447 = bitcast i32* %446 to <4 x i32>*
  %448 = load <4 x i32>, <4 x i32>* %447, align 4, !alias.scope !130
  %449 = add nsw i64 %441, %397
  %450 = getelementptr inbounds i32, i32* %5, i64 %449
  %451 = bitcast i32* %450 to <4 x i32>*
  %452 = load <4 x i32>, <4 x i32>* %451, align 4, !alias.scope !133, !noalias !130
  %453 = getelementptr inbounds i32, i32* %450, i64 4
  %454 = bitcast i32* %453 to <4 x i32>*
  %455 = load <4 x i32>, <4 x i32>* %454, align 4, !alias.scope !133, !noalias !130
  %456 = add nsw <4 x i32> %452, %445
  %457 = add nsw <4 x i32> %455, %448
  %458 = bitcast i32* %450 to <4 x i32>*
  store <4 x i32> %456, <4 x i32>* %458, align 4, !alias.scope !133, !noalias !130
  %459 = bitcast i32* %453 to <4 x i32>*
  store <4 x i32> %457, <4 x i32>* %459, align 4, !alias.scope !133, !noalias !130
  %460 = add i64 %421, 16
  %461 = add i64 %422, -2
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %463, label %420, !llvm.loop !135

463:                                              ; preds = %420, %419
  %464 = phi i64 [ 0, %419 ], [ %460, %420 ]
  br i1 %275, label %484, label %465

465:                                              ; preds = %463
  %466 = add nsw i64 %464, %396
  %467 = getelementptr inbounds i32, i32* %3, i64 %466
  %468 = bitcast i32* %467 to <4 x i32>*
  %469 = load <4 x i32>, <4 x i32>* %468, align 4, !alias.scope !130
  %470 = getelementptr inbounds i32, i32* %467, i64 4
  %471 = bitcast i32* %470 to <4 x i32>*
  %472 = load <4 x i32>, <4 x i32>* %471, align 4, !alias.scope !130
  %473 = add nsw i64 %464, %397
  %474 = getelementptr inbounds i32, i32* %5, i64 %473
  %475 = bitcast i32* %474 to <4 x i32>*
  %476 = load <4 x i32>, <4 x i32>* %475, align 4, !alias.scope !133, !noalias !130
  %477 = getelementptr inbounds i32, i32* %474, i64 4
  %478 = bitcast i32* %477 to <4 x i32>*
  %479 = load <4 x i32>, <4 x i32>* %478, align 4, !alias.scope !133, !noalias !130
  %480 = add nsw <4 x i32> %476, %469
  %481 = add nsw <4 x i32> %479, %472
  %482 = bitcast i32* %474 to <4 x i32>*
  store <4 x i32> %480, <4 x i32>* %482, align 4, !alias.scope !133, !noalias !130
  %483 = bitcast i32* %477 to <4 x i32>*
  store <4 x i32> %481, <4 x i32>* %483, align 4, !alias.scope !133, !noalias !130
  br label %484

484:                                              ; preds = %463, %465
  br i1 %276, label %497, label %398

485:                                              ; preds = %306, %485
  %486 = phi i64 [ %495, %485 ], [ %307, %306 ]
  %487 = phi i32 [ %494, %485 ], [ %308, %306 ]
  %488 = add nsw i64 %486, %305
  %489 = getelementptr inbounds i32, i32* %1, i64 %488
  %490 = load i32, i32* %489, align 4
  %491 = getelementptr inbounds i32, i32* %243, i64 %486
  %492 = load i32, i32* %491, align 4
  %493 = mul nsw i32 %492, %490
  %494 = add nsw i32 %493, %487
  %495 = add nuw nsw i64 %486, 1
  %496 = icmp eq i64 %495, %252
  br i1 %496, label %393, label %485, !llvm.loop !136

497:                                              ; preds = %410, %500, %484, %393
  %498 = add nuw nsw i64 %299, 1
  %499 = icmp eq i64 %498, %251
  br i1 %499, label %386, label %298

500:                                              ; preds = %410, %500
  %501 = phi i64 [ %517, %500 ], [ %411, %410 ]
  %502 = add nsw i64 %501, %396
  %503 = getelementptr inbounds i32, i32* %3, i64 %502
  %504 = load i32, i32* %503, align 4
  %505 = add nsw i64 %501, %397
  %506 = getelementptr inbounds i32, i32* %5, i64 %505
  %507 = load i32, i32* %506, align 4
  %508 = add nsw i32 %507, %504
  store i32 %508, i32* %506, align 4
  %509 = add nuw nsw i64 %501, 1
  %510 = add nsw i64 %509, %396
  %511 = getelementptr inbounds i32, i32* %3, i64 %510
  %512 = load i32, i32* %511, align 4
  %513 = add nsw i64 %509, %397
  %514 = getelementptr inbounds i32, i32* %5, i64 %513
  %515 = load i32, i32* %514, align 4
  %516 = add nsw i32 %515, %512
  store i32 %516, i32* %514, align 4
  %517 = add nuw nsw i64 %501, 2
  %518 = icmp eq i64 %517, %253
  br i1 %518, label %497, label %500, !llvm.loop !137
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops9ScatterNdIilEEvRKNS_12RuntimeShapeEPKT_S4_PKT0_S4_PS8_(%"class.tflite::RuntimeShape"* dereferenceable(32), i32*, %"class.tflite::RuntimeShape"* dereferenceable(32), i64*, %"class.tflite::RuntimeShape"* dereferenceable(32), i64*) local_unnamed_addr #6 comdat {
  %7 = alloca %"class.std::__1::vector", align 8
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = add i32 %9, -1
  %11 = icmp sgt i32 %9, 5
  %12 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %0, i64 0, i32 1
  %13 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %14 = load i32*, i32** %13, align 8
  %15 = sext i32 %10 to i64
  %16 = getelementptr inbounds i32, i32* %14, i64 %15
  %17 = bitcast %union.anon* %12 to [5 x i32]*
  %18 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %15
  %19 = select i1 %11, i32* %16, i32* %18
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %2, i64 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = icmp sgt i32 %10, 0
  br i1 %23, label %24, label %48

24:                                               ; preds = %6
  %25 = zext i32 %10 to i64
  %26 = add nsw i64 %25, -1
  %27 = and i64 %25, 3
  %28 = icmp ult i64 %26, 3
  br i1 %28, label %31, label %29

29:                                               ; preds = %24
  %30 = sub nsw i64 %25, %27
  br label %58

31:                                               ; preds = %58, %24
  %32 = phi i32 [ undef, %24 ], [ %84, %58 ]
  %33 = phi i64 [ 0, %24 ], [ %85, %58 ]
  %34 = phi i32 [ 1, %24 ], [ %84, %58 ]
  %35 = icmp eq i64 %27, 0
  br i1 %35, label %48, label %36

36:                                               ; preds = %31, %36
  %37 = phi i64 [ %45, %36 ], [ %33, %31 ]
  %38 = phi i32 [ %44, %36 ], [ %34, %31 ]
  %39 = phi i64 [ %46, %36 ], [ %27, %31 ]
  %40 = getelementptr inbounds i32, i32* %14, i64 %37
  %41 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %37
  %42 = select i1 %11, i32* %40, i32* %41
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i32 %43, %38
  %45 = add nuw nsw i64 %37, 1
  %46 = add i64 %39, -1
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %36, !llvm.loop !138

48:                                               ; preds = %31, %36, %6
  %49 = phi i32 [ 1, %6 ], [ %32, %31 ], [ %44, %36 ]
  %50 = icmp sgt i32 %9, %22
  br i1 %50, label %88, label %51

51:                                               ; preds = %48
  %52 = icmp sgt i32 %22, 5
  %53 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %2, i64 0, i32 1
  %54 = getelementptr inbounds %union.anon, %union.anon* %53, i64 0, i32 0
  %55 = load i32*, i32** %54, align 8
  %56 = bitcast %union.anon* %53 to [5 x i32]*
  %57 = sext i32 %22 to i64
  br label %231

58:                                               ; preds = %58, %29
  %59 = phi i64 [ 0, %29 ], [ %85, %58 ]
  %60 = phi i32 [ 1, %29 ], [ %84, %58 ]
  %61 = phi i64 [ %30, %29 ], [ %86, %58 ]
  %62 = getelementptr inbounds i32, i32* %14, i64 %59
  %63 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %59
  %64 = select i1 %11, i32* %62, i32* %63
  %65 = load i32, i32* %64, align 4
  %66 = mul nsw i32 %65, %60
  %67 = or i64 %59, 1
  %68 = getelementptr inbounds i32, i32* %14, i64 %67
  %69 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %67
  %70 = select i1 %11, i32* %68, i32* %69
  %71 = load i32, i32* %70, align 4
  %72 = mul nsw i32 %71, %66
  %73 = or i64 %59, 2
  %74 = getelementptr inbounds i32, i32* %14, i64 %73
  %75 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %73
  %76 = select i1 %11, i32* %74, i32* %75
  %77 = load i32, i32* %76, align 4
  %78 = mul nsw i32 %77, %72
  %79 = or i64 %59, 3
  %80 = getelementptr inbounds i32, i32* %14, i64 %79
  %81 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %79
  %82 = select i1 %11, i32* %80, i32* %81
  %83 = load i32, i32* %82, align 4
  %84 = mul nsw i32 %83, %78
  %85 = add nuw nsw i64 %59, 4
  %86 = add i64 %61, -4
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %31, label %58

88:                                               ; preds = %231, %48
  %89 = phi i32 [ 1, %48 ], [ %238, %231 ]
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  %91 = load i32, i32* %90, align 8
  %92 = icmp sgt i32 %91, 5
  %93 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  br i1 %92, label %94, label %97

94:                                               ; preds = %88
  %95 = getelementptr inbounds %union.anon, %union.anon* %93, i64 0, i32 0
  %96 = load i32*, i32** %95, align 8
  br label %100

97:                                               ; preds = %88
  %98 = bitcast %union.anon* %93 to i32*
  %99 = icmp sgt i32 %91, 0
  br i1 %99, label %100, label %200

100:                                              ; preds = %97, %94
  %101 = phi i32* [ %96, %94 ], [ %98, %97 ]
  %102 = zext i32 %91 to i64
  %103 = icmp ult i32 %91, 8
  br i1 %103, label %189, label %104

104:                                              ; preds = %100
  %105 = and i64 %102, 4294967288
  %106 = add nsw i64 %105, -8
  %107 = lshr exact i64 %106, 3
  %108 = add nuw nsw i64 %107, 1
  %109 = and i64 %108, 3
  %110 = icmp ult i64 %106, 24
  br i1 %110, label %156, label %111

111:                                              ; preds = %104
  %112 = sub nsw i64 %108, %109
  br label %113

113:                                              ; preds = %113, %111
  %114 = phi i64 [ 0, %111 ], [ %153, %113 ]
  %115 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %111 ], [ %151, %113 ]
  %116 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %111 ], [ %152, %113 ]
  %117 = phi i64 [ %112, %111 ], [ %154, %113 ]
  %118 = getelementptr inbounds i32, i32* %101, i64 %114
  %119 = bitcast i32* %118 to <4 x i32>*
  %120 = load <4 x i32>, <4 x i32>* %119, align 4
  %121 = getelementptr inbounds i32, i32* %118, i64 4
  %122 = bitcast i32* %121 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 4
  %124 = mul nsw <4 x i32> %120, %115
  %125 = mul nsw <4 x i32> %123, %116
  %126 = or i64 %114, 8
  %127 = getelementptr inbounds i32, i32* %101, i64 %126
  %128 = bitcast i32* %127 to <4 x i32>*
  %129 = load <4 x i32>, <4 x i32>* %128, align 4
  %130 = getelementptr inbounds i32, i32* %127, i64 4
  %131 = bitcast i32* %130 to <4 x i32>*
  %132 = load <4 x i32>, <4 x i32>* %131, align 4
  %133 = mul nsw <4 x i32> %129, %124
  %134 = mul nsw <4 x i32> %132, %125
  %135 = or i64 %114, 16
  %136 = getelementptr inbounds i32, i32* %101, i64 %135
  %137 = bitcast i32* %136 to <4 x i32>*
  %138 = load <4 x i32>, <4 x i32>* %137, align 4
  %139 = getelementptr inbounds i32, i32* %136, i64 4
  %140 = bitcast i32* %139 to <4 x i32>*
  %141 = load <4 x i32>, <4 x i32>* %140, align 4
  %142 = mul nsw <4 x i32> %138, %133
  %143 = mul nsw <4 x i32> %141, %134
  %144 = or i64 %114, 24
  %145 = getelementptr inbounds i32, i32* %101, i64 %144
  %146 = bitcast i32* %145 to <4 x i32>*
  %147 = load <4 x i32>, <4 x i32>* %146, align 4
  %148 = getelementptr inbounds i32, i32* %145, i64 4
  %149 = bitcast i32* %148 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 4
  %151 = mul nsw <4 x i32> %147, %142
  %152 = mul nsw <4 x i32> %150, %143
  %153 = add i64 %114, 32
  %154 = add i64 %117, -4
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %113, !llvm.loop !139

156:                                              ; preds = %113, %104
  %157 = phi <4 x i32> [ undef, %104 ], [ %151, %113 ]
  %158 = phi <4 x i32> [ undef, %104 ], [ %152, %113 ]
  %159 = phi i64 [ 0, %104 ], [ %153, %113 ]
  %160 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %104 ], [ %151, %113 ]
  %161 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %104 ], [ %152, %113 ]
  %162 = icmp eq i64 %109, 0
  br i1 %162, label %179, label %163

163:                                              ; preds = %156, %163
  %164 = phi i64 [ %176, %163 ], [ %159, %156 ]
  %165 = phi <4 x i32> [ %174, %163 ], [ %160, %156 ]
  %166 = phi <4 x i32> [ %175, %163 ], [ %161, %156 ]
  %167 = phi i64 [ %177, %163 ], [ %109, %156 ]
  %168 = getelementptr inbounds i32, i32* %101, i64 %164
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 4
  %171 = getelementptr inbounds i32, i32* %168, i64 4
  %172 = bitcast i32* %171 to <4 x i32>*
  %173 = load <4 x i32>, <4 x i32>* %172, align 4
  %174 = mul nsw <4 x i32> %170, %165
  %175 = mul nsw <4 x i32> %173, %166
  %176 = add i64 %164, 8
  %177 = add i64 %167, -1
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %179, label %163, !llvm.loop !140

179:                                              ; preds = %163, %156
  %180 = phi <4 x i32> [ %157, %156 ], [ %174, %163 ]
  %181 = phi <4 x i32> [ %158, %156 ], [ %175, %163 ]
  %182 = mul <4 x i32> %181, %180
  %183 = shufflevector <4 x i32> %182, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %184 = mul <4 x i32> %182, %183
  %185 = shufflevector <4 x i32> %184, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %186 = mul <4 x i32> %184, %185
  %187 = extractelement <4 x i32> %186, i32 0
  %188 = icmp eq i64 %105, %102
  br i1 %188, label %200, label %189

189:                                              ; preds = %179, %100
  %190 = phi i64 [ 0, %100 ], [ %105, %179 ]
  %191 = phi i32 [ 1, %100 ], [ %187, %179 ]
  br label %192

192:                                              ; preds = %189, %192
  %193 = phi i64 [ %198, %192 ], [ %190, %189 ]
  %194 = phi i32 [ %197, %192 ], [ %191, %189 ]
  %195 = getelementptr inbounds i32, i32* %101, i64 %193
  %196 = load i32, i32* %195, align 4
  %197 = mul nsw i32 %196, %194
  %198 = add nuw nsw i64 %193, 1
  %199 = icmp eq i64 %198, %102
  br i1 %199, label %200, label %192, !llvm.loop !141

200:                                              ; preds = %192, %179, %97
  %201 = phi i32 [ 1, %97 ], [ %187, %179 ], [ %197, %192 ]
  %202 = bitcast %"class.std::__1::vector"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %202) #8
  %203 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %204 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 1
  %205 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  %206 = sext i32 %20 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %202, i8 0, i64 24, i1 false) #8
  %207 = icmp eq i32 %20, 0
  br i1 %207, label %241, label %208

208:                                              ; preds = %200
  %209 = icmp slt i32 %20, 0
  br i1 %209, label %210, label %212

210:                                              ; preds = %208
  %211 = bitcast %"class.std::__1::vector"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %211) #10
  unreachable

212:                                              ; preds = %208
  %213 = shl nsw i64 %206, 2
  %214 = tail call i8* @_Znwm(i64 %213) #9
  %215 = bitcast i8* %214 to i32*
  %216 = bitcast %"class.std::__1::vector"* %7 to i8**
  store i8* %214, i8** %216, align 8
  %217 = getelementptr inbounds i32, i32* %215, i64 %206
  store i32* %217, i32** %205, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %214, i8 0, i64 %213, i1 false)
  %218 = bitcast i32** %204 to i64*
  %219 = ptrtoint i32* %217 to i64
  store i64 %219, i64* %218, align 8
  %220 = getelementptr inbounds %union.anon, %union.anon* %93, i64 0, i32 0
  %221 = bitcast %union.anon* %93 to [5 x i32]*
  %222 = zext i32 %20 to i64
  %223 = icmp sgt i32 %91, 5
  %224 = load i32*, i32** %220, align 8
  %225 = bitcast %union.anon* %93 to i32*
  %226 = select i1 %223, i32* %224, i32* %225
  %227 = load i32, i32* %226, align 4
  %228 = sdiv i32 %201, %227
  store i32 %228, i32* %215, align 4
  %229 = load i32*, i32** %203, align 8
  %230 = icmp eq i32 %20, 1
  br i1 %230, label %241, label %280

231:                                              ; preds = %51, %231
  %232 = phi i64 [ %15, %51 ], [ %239, %231 ]
  %233 = phi i32 [ 1, %51 ], [ %238, %231 ]
  %234 = getelementptr inbounds i32, i32* %55, i64 %232
  %235 = getelementptr inbounds [5 x i32], [5 x i32]* %56, i64 0, i64 %232
  %236 = select i1 %52, i32* %234, i32* %235
  %237 = load i32, i32* %236, align 4
  %238 = mul nsw i32 %237, %233
  %239 = add nsw i64 %232, 1
  %240 = icmp slt i64 %239, %57
  br i1 %240, label %231, label %88

241:                                              ; preds = %280, %212, %200
  %242 = phi i1 [ false, %200 ], [ true, %212 ], [ true, %280 ]
  %243 = phi i32* [ null, %200 ], [ %229, %212 ], [ %295, %280 ]
  %244 = bitcast i64* %5 to i8*
  %245 = sext i32 %201 to i64
  %246 = shl nsw i64 %245, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %244, i8 0, i64 %246, i1 false)
  %247 = icmp sgt i32 %49, 0
  br i1 %247, label %248, label %386

248:                                              ; preds = %241
  %249 = icmp sgt i32 %89, 0
  %250 = sext i32 %89 to i64
  %251 = zext i32 %49 to i64
  %252 = zext i32 %20 to i64
  %253 = zext i32 %89 to i64
  %254 = getelementptr i64, i64* %5, i64 %253
  %255 = and i64 %252, 4294967288
  %256 = add nsw i64 %255, -8
  %257 = lshr exact i64 %256, 3
  %258 = add nuw nsw i64 %257, 1
  %259 = and i64 %253, 4294967292
  %260 = add nsw i64 %259, -4
  %261 = lshr exact i64 %260, 2
  %262 = add nuw nsw i64 %261, 1
  %263 = icmp ult i32 %20, 8
  %264 = and i64 %252, 4294967288
  %265 = and i64 %258, 1
  %266 = icmp eq i64 %256, 0
  %267 = sub nuw nsw i64 %258, %265
  %268 = icmp eq i64 %265, 0
  %269 = icmp eq i64 %264, %252
  %270 = icmp ult i32 %89, 4
  %271 = and i64 %253, 4294967292
  %272 = and i64 %262, 1
  %273 = icmp eq i64 %260, 0
  %274 = sub nuw nsw i64 %262, %272
  %275 = icmp eq i64 %272, 0
  %276 = icmp eq i64 %271, %253
  %277 = and i64 %253, 1
  %278 = icmp eq i64 %277, 0
  %279 = sub nsw i64 0, %253
  br label %298

280:                                              ; preds = %212, %280
  %281 = phi i64 [ %296, %280 ], [ 1, %212 ]
  %282 = phi i32* [ %295, %280 ], [ %229, %212 ]
  %283 = phi i64 [ %281, %280 ], [ 0, %212 ]
  %284 = getelementptr inbounds i32, i32* %282, i64 %283
  %285 = load i32, i32* %284, align 4
  %286 = load i32, i32* %90, align 8
  %287 = icmp sgt i32 %286, 5
  %288 = load i32*, i32** %220, align 8
  %289 = getelementptr inbounds i32, i32* %288, i64 %281
  %290 = getelementptr inbounds [5 x i32], [5 x i32]* %221, i64 0, i64 %281
  %291 = select i1 %287, i32* %289, i32* %290
  %292 = load i32, i32* %291, align 4
  %293 = sdiv i32 %285, %292
  %294 = getelementptr inbounds i32, i32* %282, i64 %281
  store i32 %293, i32* %294, align 4
  %295 = load i32*, i32** %203, align 8
  %296 = add nuw nsw i64 %281, 1
  %297 = icmp eq i64 %296, %222
  br i1 %297, label %241, label %280

298:                                              ; preds = %497, %248
  %299 = phi i64 [ 0, %248 ], [ %498, %497 ]
  %300 = mul i64 %299, %250
  %301 = getelementptr i64, i64* %3, i64 %300
  %302 = add i64 %300, %253
  %303 = getelementptr i64, i64* %3, i64 %302
  br i1 %242, label %304, label %393

304:                                              ; preds = %298
  %305 = mul nsw i64 %299, %206
  br i1 %263, label %306, label %309

306:                                              ; preds = %377, %304
  %307 = phi i64 [ 0, %304 ], [ %264, %377 ]
  %308 = phi i32 [ 0, %304 ], [ %385, %377 ]
  br label %485

309:                                              ; preds = %304
  br i1 %266, label %353, label %310

310:                                              ; preds = %309, %310
  %311 = phi i64 [ %350, %310 ], [ 0, %309 ]
  %312 = phi <4 x i32> [ %348, %310 ], [ zeroinitializer, %309 ]
  %313 = phi <4 x i32> [ %349, %310 ], [ zeroinitializer, %309 ]
  %314 = phi i64 [ %351, %310 ], [ %267, %309 ]
  %315 = add nsw i64 %311, %305
  %316 = getelementptr inbounds i32, i32* %1, i64 %315
  %317 = bitcast i32* %316 to <4 x i32>*
  %318 = load <4 x i32>, <4 x i32>* %317, align 4
  %319 = getelementptr inbounds i32, i32* %316, i64 4
  %320 = bitcast i32* %319 to <4 x i32>*
  %321 = load <4 x i32>, <4 x i32>* %320, align 4
  %322 = getelementptr inbounds i32, i32* %243, i64 %311
  %323 = bitcast i32* %322 to <4 x i32>*
  %324 = load <4 x i32>, <4 x i32>* %323, align 4
  %325 = getelementptr inbounds i32, i32* %322, i64 4
  %326 = bitcast i32* %325 to <4 x i32>*
  %327 = load <4 x i32>, <4 x i32>* %326, align 4
  %328 = mul nsw <4 x i32> %324, %318
  %329 = mul nsw <4 x i32> %327, %321
  %330 = add nsw <4 x i32> %328, %312
  %331 = add nsw <4 x i32> %329, %313
  %332 = or i64 %311, 8
  %333 = add nsw i64 %332, %305
  %334 = getelementptr inbounds i32, i32* %1, i64 %333
  %335 = bitcast i32* %334 to <4 x i32>*
  %336 = load <4 x i32>, <4 x i32>* %335, align 4
  %337 = getelementptr inbounds i32, i32* %334, i64 4
  %338 = bitcast i32* %337 to <4 x i32>*
  %339 = load <4 x i32>, <4 x i32>* %338, align 4
  %340 = getelementptr inbounds i32, i32* %243, i64 %332
  %341 = bitcast i32* %340 to <4 x i32>*
  %342 = load <4 x i32>, <4 x i32>* %341, align 4
  %343 = getelementptr inbounds i32, i32* %340, i64 4
  %344 = bitcast i32* %343 to <4 x i32>*
  %345 = load <4 x i32>, <4 x i32>* %344, align 4
  %346 = mul nsw <4 x i32> %342, %336
  %347 = mul nsw <4 x i32> %345, %339
  %348 = add nsw <4 x i32> %346, %330
  %349 = add nsw <4 x i32> %347, %331
  %350 = add i64 %311, 16
  %351 = add i64 %314, -2
  %352 = icmp eq i64 %351, 0
  br i1 %352, label %353, label %310, !llvm.loop !142

353:                                              ; preds = %310, %309
  %354 = phi <4 x i32> [ undef, %309 ], [ %348, %310 ]
  %355 = phi <4 x i32> [ undef, %309 ], [ %349, %310 ]
  %356 = phi i64 [ 0, %309 ], [ %350, %310 ]
  %357 = phi <4 x i32> [ zeroinitializer, %309 ], [ %348, %310 ]
  %358 = phi <4 x i32> [ zeroinitializer, %309 ], [ %349, %310 ]
  br i1 %268, label %377, label %359

359:                                              ; preds = %353
  %360 = add nsw i64 %356, %305
  %361 = getelementptr inbounds i32, i32* %1, i64 %360
  %362 = getelementptr inbounds i32, i32* %243, i64 %356
  %363 = getelementptr inbounds i32, i32* %362, i64 4
  %364 = bitcast i32* %363 to <4 x i32>*
  %365 = load <4 x i32>, <4 x i32>* %364, align 4
  %366 = getelementptr inbounds i32, i32* %361, i64 4
  %367 = bitcast i32* %366 to <4 x i32>*
  %368 = load <4 x i32>, <4 x i32>* %367, align 4
  %369 = mul nsw <4 x i32> %365, %368
  %370 = add nsw <4 x i32> %369, %358
  %371 = bitcast i32* %362 to <4 x i32>*
  %372 = load <4 x i32>, <4 x i32>* %371, align 4
  %373 = bitcast i32* %361 to <4 x i32>*
  %374 = load <4 x i32>, <4 x i32>* %373, align 4
  %375 = mul nsw <4 x i32> %372, %374
  %376 = add nsw <4 x i32> %375, %357
  br label %377

377:                                              ; preds = %353, %359
  %378 = phi <4 x i32> [ %354, %353 ], [ %376, %359 ]
  %379 = phi <4 x i32> [ %355, %353 ], [ %370, %359 ]
  %380 = add <4 x i32> %379, %378
  %381 = shufflevector <4 x i32> %380, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %382 = add <4 x i32> %380, %381
  %383 = shufflevector <4 x i32> %382, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %384 = add <4 x i32> %382, %383
  %385 = extractelement <4 x i32> %384, i32 0
  br i1 %269, label %393, label %306

386:                                              ; preds = %497, %241
  %387 = icmp eq i32* %243, null
  br i1 %387, label %392, label %388

388:                                              ; preds = %386
  %389 = ptrtoint i32* %243 to i64
  %390 = bitcast i32** %204 to i64*
  store i64 %389, i64* %390, align 8
  %391 = bitcast i32* %243 to i8*
  tail call void @_ZdlPv(i8* %391) #9
  br label %392

392:                                              ; preds = %386, %388
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %202) #8
  ret void

393:                                              ; preds = %485, %377, %298
  %394 = phi i32 [ 0, %298 ], [ %385, %377 ], [ %494, %485 ]
  br i1 %249, label %395, label %497

395:                                              ; preds = %393
  %396 = mul nsw i64 %299, %250
  %397 = sext i32 %394 to i64
  br i1 %270, label %398, label %413

398:                                              ; preds = %484, %413, %395
  %399 = phi i64 [ 0, %413 ], [ 0, %395 ], [ %271, %484 ]
  %400 = xor i64 %399, -1
  br i1 %278, label %410, label %401

401:                                              ; preds = %398
  %402 = add nsw i64 %399, %396
  %403 = getelementptr inbounds i64, i64* %3, i64 %402
  %404 = load i64, i64* %403, align 8
  %405 = add nsw i64 %399, %397
  %406 = getelementptr inbounds i64, i64* %5, i64 %405
  %407 = load i64, i64* %406, align 8
  %408 = add nsw i64 %407, %404
  store i64 %408, i64* %406, align 8
  %409 = or i64 %399, 1
  br label %410

410:                                              ; preds = %401, %398
  %411 = phi i64 [ %409, %401 ], [ %399, %398 ]
  %412 = icmp eq i64 %400, %279
  br i1 %412, label %497, label %500

413:                                              ; preds = %395
  %414 = getelementptr i64, i64* %5, i64 %397
  %415 = getelementptr i64, i64* %254, i64 %397
  %416 = icmp ult i64* %414, %303
  %417 = icmp ult i64* %301, %415
  %418 = and i1 %416, %417
  br i1 %418, label %398, label %419

419:                                              ; preds = %413
  br i1 %273, label %463, label %420

420:                                              ; preds = %419, %420
  %421 = phi i64 [ %460, %420 ], [ 0, %419 ]
  %422 = phi i64 [ %461, %420 ], [ %274, %419 ]
  %423 = add nsw i64 %421, %396
  %424 = getelementptr inbounds i64, i64* %3, i64 %423
  %425 = bitcast i64* %424 to <2 x i64>*
  %426 = load <2 x i64>, <2 x i64>* %425, align 8, !alias.scope !143
  %427 = getelementptr inbounds i64, i64* %424, i64 2
  %428 = bitcast i64* %427 to <2 x i64>*
  %429 = load <2 x i64>, <2 x i64>* %428, align 8, !alias.scope !143
  %430 = add nsw i64 %421, %397
  %431 = getelementptr inbounds i64, i64* %5, i64 %430
  %432 = bitcast i64* %431 to <2 x i64>*
  %433 = load <2 x i64>, <2 x i64>* %432, align 8, !alias.scope !146, !noalias !143
  %434 = getelementptr inbounds i64, i64* %431, i64 2
  %435 = bitcast i64* %434 to <2 x i64>*
  %436 = load <2 x i64>, <2 x i64>* %435, align 8, !alias.scope !146, !noalias !143
  %437 = add nsw <2 x i64> %433, %426
  %438 = add nsw <2 x i64> %436, %429
  %439 = bitcast i64* %431 to <2 x i64>*
  store <2 x i64> %437, <2 x i64>* %439, align 8, !alias.scope !146, !noalias !143
  %440 = bitcast i64* %434 to <2 x i64>*
  store <2 x i64> %438, <2 x i64>* %440, align 8, !alias.scope !146, !noalias !143
  %441 = or i64 %421, 4
  %442 = add nsw i64 %441, %396
  %443 = getelementptr inbounds i64, i64* %3, i64 %442
  %444 = bitcast i64* %443 to <2 x i64>*
  %445 = load <2 x i64>, <2 x i64>* %444, align 8, !alias.scope !143
  %446 = getelementptr inbounds i64, i64* %443, i64 2
  %447 = bitcast i64* %446 to <2 x i64>*
  %448 = load <2 x i64>, <2 x i64>* %447, align 8, !alias.scope !143
  %449 = add nsw i64 %441, %397
  %450 = getelementptr inbounds i64, i64* %5, i64 %449
  %451 = bitcast i64* %450 to <2 x i64>*
  %452 = load <2 x i64>, <2 x i64>* %451, align 8, !alias.scope !146, !noalias !143
  %453 = getelementptr inbounds i64, i64* %450, i64 2
  %454 = bitcast i64* %453 to <2 x i64>*
  %455 = load <2 x i64>, <2 x i64>* %454, align 8, !alias.scope !146, !noalias !143
  %456 = add nsw <2 x i64> %452, %445
  %457 = add nsw <2 x i64> %455, %448
  %458 = bitcast i64* %450 to <2 x i64>*
  store <2 x i64> %456, <2 x i64>* %458, align 8, !alias.scope !146, !noalias !143
  %459 = bitcast i64* %453 to <2 x i64>*
  store <2 x i64> %457, <2 x i64>* %459, align 8, !alias.scope !146, !noalias !143
  %460 = add i64 %421, 8
  %461 = add i64 %422, -2
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %463, label %420, !llvm.loop !148

463:                                              ; preds = %420, %419
  %464 = phi i64 [ 0, %419 ], [ %460, %420 ]
  br i1 %275, label %484, label %465

465:                                              ; preds = %463
  %466 = add nsw i64 %464, %396
  %467 = getelementptr inbounds i64, i64* %3, i64 %466
  %468 = bitcast i64* %467 to <2 x i64>*
  %469 = load <2 x i64>, <2 x i64>* %468, align 8, !alias.scope !143
  %470 = getelementptr inbounds i64, i64* %467, i64 2
  %471 = bitcast i64* %470 to <2 x i64>*
  %472 = load <2 x i64>, <2 x i64>* %471, align 8, !alias.scope !143
  %473 = add nsw i64 %464, %397
  %474 = getelementptr inbounds i64, i64* %5, i64 %473
  %475 = bitcast i64* %474 to <2 x i64>*
  %476 = load <2 x i64>, <2 x i64>* %475, align 8, !alias.scope !146, !noalias !143
  %477 = getelementptr inbounds i64, i64* %474, i64 2
  %478 = bitcast i64* %477 to <2 x i64>*
  %479 = load <2 x i64>, <2 x i64>* %478, align 8, !alias.scope !146, !noalias !143
  %480 = add nsw <2 x i64> %476, %469
  %481 = add nsw <2 x i64> %479, %472
  %482 = bitcast i64* %474 to <2 x i64>*
  store <2 x i64> %480, <2 x i64>* %482, align 8, !alias.scope !146, !noalias !143
  %483 = bitcast i64* %477 to <2 x i64>*
  store <2 x i64> %481, <2 x i64>* %483, align 8, !alias.scope !146, !noalias !143
  br label %484

484:                                              ; preds = %463, %465
  br i1 %276, label %497, label %398

485:                                              ; preds = %306, %485
  %486 = phi i64 [ %495, %485 ], [ %307, %306 ]
  %487 = phi i32 [ %494, %485 ], [ %308, %306 ]
  %488 = add nsw i64 %486, %305
  %489 = getelementptr inbounds i32, i32* %1, i64 %488
  %490 = load i32, i32* %489, align 4
  %491 = getelementptr inbounds i32, i32* %243, i64 %486
  %492 = load i32, i32* %491, align 4
  %493 = mul nsw i32 %492, %490
  %494 = add nsw i32 %493, %487
  %495 = add nuw nsw i64 %486, 1
  %496 = icmp eq i64 %495, %252
  br i1 %496, label %393, label %485, !llvm.loop !149

497:                                              ; preds = %410, %500, %484, %393
  %498 = add nuw nsw i64 %299, 1
  %499 = icmp eq i64 %498, %251
  br i1 %499, label %386, label %298

500:                                              ; preds = %410, %500
  %501 = phi i64 [ %517, %500 ], [ %411, %410 ]
  %502 = add nsw i64 %501, %396
  %503 = getelementptr inbounds i64, i64* %3, i64 %502
  %504 = load i64, i64* %503, align 8
  %505 = add nsw i64 %501, %397
  %506 = getelementptr inbounds i64, i64* %5, i64 %505
  %507 = load i64, i64* %506, align 8
  %508 = add nsw i64 %507, %504
  store i64 %508, i64* %506, align 8
  %509 = add nuw nsw i64 %501, 1
  %510 = add nsw i64 %509, %396
  %511 = getelementptr inbounds i64, i64* %3, i64 %510
  %512 = load i64, i64* %511, align 8
  %513 = add nsw i64 %509, %397
  %514 = getelementptr inbounds i64, i64* %5, i64 %513
  %515 = load i64, i64* %514, align 8
  %516 = add nsw i64 %515, %512
  store i64 %516, i64* %514, align 8
  %517 = add nuw nsw i64 %501, 2
  %518 = icmp eq i64 %517, %253
  br i1 %518, label %497, label %500, !llvm.loop !150
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!4 = distinct !{!4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!7 = distinct !{!7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!10 = distinct !{!10, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!11 = !{!12}
!12 = distinct !{!12, !13}
!13 = distinct !{!13, !"LVerDomain"}
!14 = !{!15}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.isvectorized", i32 1}
!18 = distinct !{!18, !19}
!19 = !{!"llvm.loop.unroll.disable"}
!20 = distinct !{!20, !19}
!21 = distinct !{!21, !17}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!24 = distinct !{!24, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!27 = distinct !{!27, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!28 = !{!29}
!29 = distinct !{!29, !30, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!30 = distinct !{!30, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!31 = !{!32}
!32 = distinct !{!32, !33}
!33 = distinct !{!33, !"LVerDomain"}
!34 = !{!35}
!35 = distinct !{!35, !33}
!36 = distinct !{!36, !17}
!37 = distinct !{!37, !19}
!38 = distinct !{!38, !19}
!39 = distinct !{!39, !17}
!40 = !{!41}
!41 = distinct !{!41, !42, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!42 = distinct !{!42, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!43 = !{!44}
!44 = distinct !{!44, !45, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!45 = distinct !{!45, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!46 = !{!47}
!47 = distinct !{!47, !48, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!48 = distinct !{!48, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!49 = !{!50}
!50 = distinct !{!50, !51, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!51 = distinct !{!51, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!52 = !{!53}
!53 = distinct !{!53, !54, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!54 = distinct !{!54, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!55 = !{!56}
!56 = distinct !{!56, !57, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!57 = distinct !{!57, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!58 = !{!59}
!59 = distinct !{!59, !60, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!60 = distinct !{!60, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!61 = !{!62}
!62 = distinct !{!62, !63, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!63 = distinct !{!63, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!64 = !{!65}
!65 = distinct !{!65, !66, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!66 = distinct !{!66, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!67 = !{!68}
!68 = distinct !{!68, !69, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!69 = distinct !{!69, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!70 = !{!71}
!71 = distinct !{!71, !72, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!72 = distinct !{!72, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!73 = !{!74}
!74 = distinct !{!74, !75, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!75 = distinct !{!75, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!76 = !{!77}
!77 = distinct !{!77, !78, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!78 = distinct !{!78, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!79 = !{!80}
!80 = distinct !{!80, !81, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!81 = distinct !{!81, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!82 = !{!83}
!83 = distinct !{!83, !84, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!84 = distinct !{!84, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!85 = distinct !{!85, !19}
!86 = distinct !{!86, !17}
!87 = distinct !{!87, !19}
!88 = distinct !{!88, !89, !17}
!89 = !{!"llvm.loop.unroll.runtime.disable"}
!90 = distinct !{!90, !17}
!91 = !{!92}
!92 = distinct !{!92, !93}
!93 = distinct !{!93, !"LVerDomain"}
!94 = !{!95}
!95 = distinct !{!95, !93}
!96 = distinct !{!96, !17}
!97 = distinct !{!97, !89, !17}
!98 = distinct !{!98, !17}
!99 = distinct !{!99, !19}
!100 = distinct !{!100, !17}
!101 = distinct !{!101, !19}
!102 = distinct !{!102, !89, !17}
!103 = distinct !{!103, !17}
!104 = !{!105}
!105 = distinct !{!105, !106}
!106 = distinct !{!106, !"LVerDomain"}
!107 = !{!108}
!108 = distinct !{!108, !106}
!109 = distinct !{!109, !17}
!110 = distinct !{!110, !89, !17}
!111 = distinct !{!111, !17}
!112 = distinct !{!112, !19}
!113 = distinct !{!113, !17}
!114 = distinct !{!114, !19}
!115 = distinct !{!115, !89, !17}
!116 = distinct !{!116, !17}
!117 = !{!118}
!118 = distinct !{!118, !119}
!119 = distinct !{!119, !"LVerDomain"}
!120 = !{!121}
!121 = distinct !{!121, !119}
!122 = distinct !{!122, !17}
!123 = distinct !{!123, !89, !17}
!124 = distinct !{!124, !17}
!125 = distinct !{!125, !19}
!126 = distinct !{!126, !17}
!127 = distinct !{!127, !19}
!128 = distinct !{!128, !89, !17}
!129 = distinct !{!129, !17}
!130 = !{!131}
!131 = distinct !{!131, !132}
!132 = distinct !{!132, !"LVerDomain"}
!133 = !{!134}
!134 = distinct !{!134, !132}
!135 = distinct !{!135, !17}
!136 = distinct !{!136, !89, !17}
!137 = distinct !{!137, !17}
!138 = distinct !{!138, !19}
!139 = distinct !{!139, !17}
!140 = distinct !{!140, !19}
!141 = distinct !{!141, !89, !17}
!142 = distinct !{!142, !17}
!143 = !{!144}
!144 = distinct !{!144, !145}
!145 = distinct !{!145, !"LVerDomain"}
!146 = !{!147}
!147 = distinct !{!147, !145}
!148 = distinct !{!148, !17}
!149 = distinct !{!149, !89, !17}
!150 = distinct !{!150, !17}
