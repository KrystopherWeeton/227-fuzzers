; ModuleID = '../../buildtools/third_party/libc++/trunk/src/barrier.cpp'
source_filename = "../../buildtools/third_party/libc++/trunk/src/barrier.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::__barrier_algorithm_base" = type { i64*, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::__barrier_algorithm_base::__state_t"* }
%"struct.std::__1::__barrier_algorithm_base::__state_t" = type { [64 x %struct.anon] }
%struct.anon = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i8 }

; Function Attrs: ssp uwtable
define hidden nonnull %"class.std::__1::__barrier_algorithm_base"* @_ZNSt3__134__construct_barrier_algorithm_baseERl(i64* dereferenceable(8)) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = tail call i8* @_Znwm(i64 16) #8
  %3 = bitcast i8* %2 to %"class.std::__1::__barrier_algorithm_base"*
  %4 = bitcast i8* %2 to i64**
  store i64* %0, i64** %4, align 8, !tbaa !2
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to i64*
  store i64 0, i64* %6, align 8, !tbaa !6
  %7 = load i64, i64* %0, align 8, !tbaa !8
  %8 = add nsw i64 %7, 1
  %9 = ashr i64 %8, 1
  %10 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %9, i64 64)
  %11 = extractvalue { i64, i1 } %10, 1
  %12 = extractvalue { i64, i1 } %10, 0
  %13 = select i1 %11, i64 -1, i64 %12
  %14 = invoke i8* @_Znam(i64 %13) #8
          to label %15 unwind label %19

15:                                               ; preds = %1
  %16 = icmp eq i64 %9, 0
  br i1 %16, label %21, label %17

17:                                               ; preds = %15
  %18 = shl nsw i64 %9, 6
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 0, i64 %18, i1 false)
  br label %21

19:                                               ; preds = %1
  %20 = landingpad { i8*, i32 }
          cleanup
  tail call void @_ZdlPv(i8* nonnull %2) #9
  resume { i8*, i32 } %20

21:                                               ; preds = %17, %15
  %22 = ptrtoint i8* %14 to i64
  store i64 %22, i64* %6, align 8, !tbaa !2
  ret %"class.std::__1::__barrier_algorithm_base"* %3
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

declare i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZNSt3__131__arrive_barrier_algorithm_baseEPNS_24__barrier_algorithm_baseEh(%"class.std::__1::__barrier_algorithm_base"* nocapture readonly, i8 zeroext) local_unnamed_addr #3 personality i32 (...)* @__gxx_personality_v0 {
  %3 = add i8 %1, 1
  %4 = add i8 %1, 2
  %5 = getelementptr inbounds %"class.std::__1::__barrier_algorithm_base", %"class.std::__1::__barrier_algorithm_base"* %0, i64 0, i32 0
  %6 = load i64*, i64** %5, align 8, !tbaa !10
  %7 = load i64, i64* %6, align 8, !tbaa !8
  %8 = icmp ult i64 %7, 2
  br i1 %8, label %53, label %9

9:                                                ; preds = %2
  %10 = tail call i64 @pthread_self() #10
  %11 = add nsw i64 %7, 1
  %12 = ashr i64 %11, 1
  %13 = urem i64 %10, %12
  %14 = getelementptr inbounds %"class.std::__1::__barrier_algorithm_base", %"class.std::__1::__barrier_algorithm_base"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  br label %15

15:                                               ; preds = %48, %9
  %16 = phi i64 [ 0, %9 ], [ %51, %48 ]
  %17 = phi i64 [ %13, %9 ], [ %50, %48 ]
  %18 = phi i64 [ %7, %9 ], [ %20, %48 ]
  %19 = add i64 %18, 1
  %20 = lshr i64 %19, 1
  %21 = add nsw i64 %20, -1
  %22 = and i64 %18, 1
  %23 = icmp eq i64 %22, 0
  br label %24

24:                                               ; preds = %46, %15
  %25 = phi i64 [ %17, %15 ], [ %47, %46 ]
  %26 = icmp eq i64 %25, %20
  %27 = select i1 %26, i64 0, i64 %25
  %28 = icmp ne i64 %27, %21
  %29 = or i1 %23, %28
  %30 = load %"struct.std::__1::__barrier_algorithm_base::__state_t"*, %"struct.std::__1::__barrier_algorithm_base::__state_t"** %14, align 8, !tbaa !2
  %31 = getelementptr inbounds %"struct.std::__1::__barrier_algorithm_base::__state_t", %"struct.std::__1::__barrier_algorithm_base::__state_t"* %30, i64 %27, i32 0, i64 %16, i32 0, i32 0, i32 0, i32 0, i32 0
  br i1 %29, label %35, label %32

32:                                               ; preds = %24
  %33 = cmpxchg i8* %31, i8 %1, i8 %4 acq_rel monotonic
  %34 = extractvalue { i8, i1 } %33, 1
  br i1 %34, label %48, label %46

35:                                               ; preds = %24
  %36 = cmpxchg i8* %31, i8 %1, i8 %3 acq_rel monotonic
  %37 = extractvalue { i8, i1 } %36, 1
  br i1 %37, label %53, label %38

38:                                               ; preds = %35
  %39 = extractvalue { i8, i1 } %36, 0
  %40 = icmp eq i8 %39, %3
  br i1 %40, label %41, label %46

41:                                               ; preds = %38
  %42 = load %"struct.std::__1::__barrier_algorithm_base::__state_t"*, %"struct.std::__1::__barrier_algorithm_base::__state_t"** %14, align 8, !tbaa !2
  %43 = getelementptr inbounds %"struct.std::__1::__barrier_algorithm_base::__state_t", %"struct.std::__1::__barrier_algorithm_base::__state_t"* %42, i64 %27, i32 0, i64 %16, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = cmpxchg i8* %43, i8 %3, i8 %4 acq_rel monotonic
  %45 = extractvalue { i8, i1 } %44, 1
  br i1 %45, label %48, label %46

46:                                               ; preds = %41, %38, %32
  %47 = add i64 %27, 1
  br label %24

48:                                               ; preds = %41, %32
  %49 = phi i64 [ %27, %41 ], [ %21, %32 ]
  %50 = lshr i64 %49, 1
  %51 = add nuw i64 %16, 1
  %52 = icmp ult i64 %19, 4
  br i1 %52, label %53, label %15

53:                                               ; preds = %48, %35, %2
  %54 = phi i1 [ true, %2 ], [ false, %35 ], [ true, %48 ]
  ret i1 %54
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNSt3__132__destroy_barrier_algorithm_baseEPNS_24__barrier_algorithm_baseE(%"class.std::__1::__barrier_algorithm_base"*) local_unnamed_addr #4 {
  %2 = icmp eq %"class.std::__1::__barrier_algorithm_base"* %0, null
  br i1 %2, label %11, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.std::__1::__barrier_algorithm_base", %"class.std::__1::__barrier_algorithm_base"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %5 = load %"struct.std::__1::__barrier_algorithm_base::__state_t"*, %"struct.std::__1::__barrier_algorithm_base::__state_t"** %4, align 8, !tbaa !2
  store %"struct.std::__1::__barrier_algorithm_base::__state_t"* null, %"struct.std::__1::__barrier_algorithm_base::__state_t"** %4, align 8, !tbaa !2
  %6 = icmp eq %"struct.std::__1::__barrier_algorithm_base::__state_t"* %5, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"struct.std::__1::__barrier_algorithm_base::__state_t", %"struct.std::__1::__barrier_algorithm_base::__state_t"* %5, i64 0, i32 0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZdaPv(i8* %8) #9
  br label %9

9:                                                ; preds = %3, %7
  %10 = bitcast %"class.std::__1::__barrier_algorithm_base"* %0 to i8*
  tail call void @_ZdlPv(i8* %10) #9
  br label %11

11:                                               ; preds = %9, %1
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare i64 @pthread_self() local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

attributes #0 = { ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind }
attributes #8 = { builtin }
attributes #9 = { builtin nounwind }
attributes #10 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !3, i64 0}
!3 = !{!"any pointer", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C++ TBAA"}
!6 = !{!7, !3, i64 0}
!7 = !{!"_ZTSNSt3__122__compressed_pair_elemIPNS_24__barrier_algorithm_base9__state_tELi0ELb0EEE", !3, i64 0}
!8 = !{!9, !9, i64 0}
!9 = !{!"long", !4, i64 0}
!10 = !{!11, !3, i64 0}
!11 = !{!"_ZTSNSt3__124__barrier_algorithm_baseE", !3, i64 0, !12, i64 8}
!12 = !{!"_ZTSNSt3__110unique_ptrIA_NS_24__barrier_algorithm_base9__state_tENS_14default_deleteIS3_EEEE", !13, i64 0}
!13 = !{!"_ZTSNSt3__117__compressed_pairIPNS_24__barrier_algorithm_base9__state_tENS_14default_deleteIA_S2_EEEE"}
