; ModuleID = '../../third_party/skia/src/core/SkStringUtils.cpp'
source_filename = "../../third_party/skia/src/core/SkStringUtils.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkString = type { %class.sk_sp }
%class.sk_sp = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }

@.str = private unnamed_addr constant [21 x i8] c"SkBits2Float(0x%08x)\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%g\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\09\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z14SkAppendScalarP8SkStringf20SkScalarAsStringType(%class.SkString*, float, i32) local_unnamed_addr #0 {
  %4 = alloca [2 x i8], align 1
  %5 = alloca %class.SkString, align 8
  switch i32 %2, label %32 [
    i32 1, label %6
    i32 0, label %8
  ]

6:                                                ; preds = %3
  %7 = bitcast float %1 to i32
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i32 %7) #6
  br label %32

8:                                                ; preds = %3
  %9 = bitcast %class.SkString* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #6
  %10 = getelementptr inbounds %class.SkString, %class.SkString* %5, i64 0, i32 0, i32 0
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %10, align 8
  call void @_ZN8SkStringC1Ev(%class.SkString* nonnull %5) #6
  %11 = fpext float %1 to double
  call void (%class.SkString*, i8*, ...) @_ZN8SkString6printfEPKcz(%class.SkString* nonnull %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), double %11) #6
  %12 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %10, align 8
  %13 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %12, i64 0, i32 2
  %14 = getelementptr inbounds [2 x i8], [2 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %14) #6
  %15 = getelementptr inbounds [2 x i8], [2 x i8]* %4, i64 0, i64 1
  store i8 46, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %16 = call i8* @strstr(i8* %13, i8* nonnull %14) #7
  %17 = icmp ne i8* %16, null
  %18 = ptrtoint i8* %16 to i64
  %19 = ptrtoint i8* %13 to i64
  %20 = sub i64 %18, %19
  %21 = trunc i64 %20 to i32
  %22 = icmp ne i32 %21, -1
  %23 = and i1 %17, %22
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %14) #6
  br i1 %23, label %24, label %26

24:                                               ; preds = %8
  call void @_ZN8SkString13insertUnicharEmi(%class.SkString* nonnull %5, i64 -1, i32 102) #6
  %25 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %10, align 8
  br label %26

26:                                               ; preds = %24, %8
  %27 = phi %"struct.SkString::Rec"* [ %25, %24 ], [ %12, %8 ]
  %28 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %27, i64 0, i32 2
  %29 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %27, i64 0, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = zext i32 %30 to i64
  call void @_ZN8SkString6insertEmPKcm(%class.SkString* %0, i64 -1, i8* %28, i64 %31) #6
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #6
  br label %32

32:                                               ; preds = %3, %26, %6
  ret void
}

declare void @_ZN8SkString7appendfEPKcz(%class.SkString*, i8*, ...) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN8SkStringC1Ev(%class.SkString*) unnamed_addr #1

declare void @_ZN8SkString6printfEPKcz(%class.SkString*, i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN8SkStringD1Ev(%class.SkString*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z11SkTabStringRK8SkStringi(%class.SkString* noalias sret, %class.SkString* dereferenceable(8), i32) local_unnamed_addr #0 {
  %4 = alloca %class.SkString, align 8
  %5 = alloca %class.SkString, align 8
  %6 = icmp slt i32 %2, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  tail call void @_ZN8SkStringC1ERKS_(%class.SkString* %0, %class.SkString* dereferenceable(8) %1) #6
  br label %62

8:                                                ; preds = %3
  %9 = bitcast %class.SkString* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #6
  %10 = getelementptr inbounds %class.SkString, %class.SkString* %4, i64 0, i32 0, i32 0
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %10, align 8
  call void @_ZN8SkStringC1Ev(%class.SkString* nonnull %4) #6
  br label %25

11:                                               ; preds = %25
  %12 = bitcast %class.SkString* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #6
  %13 = getelementptr inbounds %class.SkString, %class.SkString* %5, i64 0, i32 0, i32 0
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %13, align 8
  call void @_ZN8SkStringC1Ev(%class.SkString* nonnull %5) #6
  %14 = getelementptr inbounds %class.SkString, %class.SkString* %1, i64 0, i32 0, i32 0
  %15 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %14, align 8
  %16 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %15, i64 0, i32 2
  %17 = call i8* @strchr(i8* %16, i32 10)
  %18 = icmp eq i8* %17, null
  %19 = ptrtoint i8* %17 to i64
  %20 = ptrtoint i8* %16 to i64
  %21 = sub i64 %19, %20
  %22 = trunc i64 %21 to i32
  %23 = select i1 %18, i32 -1, i32 %22
  %24 = icmp sgt i32 %23, -1
  br i1 %24, label %29, label %51

25:                                               ; preds = %25, %8
  %26 = phi i32 [ %27, %25 ], [ 0, %8 ]
  call void @_ZN8SkString6insertEmPKc(%class.SkString* nonnull %4, i64 -1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)) #6
  %27 = add nuw nsw i32 %26, 1
  %28 = icmp eq i32 %27, %2
  br i1 %28, label %11, label %25

29:                                               ; preds = %11, %39
  %30 = phi i32 [ %49, %39 ], [ %23, %11 ]
  %31 = phi i8* [ %42, %39 ], [ %16, %11 ]
  %32 = icmp eq i32 %30, 0
  br i1 %32, label %39, label %33

33:                                               ; preds = %29
  %34 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %10, align 8
  %35 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %34, i64 0, i32 2
  %36 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %34, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i64
  call void @_ZN8SkString6insertEmPKcm(%class.SkString* nonnull %5, i64 -1, i8* %35, i64 %38) #6
  br label %39

39:                                               ; preds = %29, %33
  %40 = add nuw nsw i32 %30, 1
  %41 = sext i32 %40 to i64
  call void @_ZN8SkString6insertEmPKcm(%class.SkString* nonnull %5, i64 -1, i8* %31, i64 %41) #6
  %42 = getelementptr inbounds i8, i8* %31, i64 %41
  %43 = call i8* @strchr(i8* %42, i32 10)
  %44 = icmp eq i8* %43, null
  %45 = ptrtoint i8* %43 to i64
  %46 = ptrtoint i8* %42 to i64
  %47 = sub i64 %45, %46
  %48 = trunc i64 %47 to i32
  %49 = select i1 %44, i32 -1, i32 %48
  %50 = icmp sgt i32 %49, -1
  br i1 %50, label %29, label %51

51:                                               ; preds = %39, %11
  %52 = phi i8* [ %16, %11 ], [ %42, %39 ]
  %53 = load i8, i8* %52, align 1
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %61, label %55

55:                                               ; preds = %51
  %56 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %10, align 8
  %57 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %56, i64 0, i32 2
  %58 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %56, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  %60 = zext i32 %59 to i64
  call void @_ZN8SkString6insertEmPKcm(%class.SkString* nonnull %5, i64 -1, i8* %57, i64 %60) #6
  call void @_ZN8SkString6insertEmPKc(%class.SkString* nonnull %5, i64 -1, i8* %52) #6
  br label %61

61:                                               ; preds = %51, %55
  call void @_ZN8SkStringC1EOS_(%class.SkString* %0, %class.SkString* nonnull dereferenceable(8) %5) #6
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #6
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #6
  br label %62

62:                                               ; preds = %61, %7
  ret void
}

declare void @_ZN8SkStringC1ERKS_(%class.SkString*, %class.SkString* dereferenceable(8)) unnamed_addr #1

declare void @_ZN8SkStringC1EOS_(%class.SkString*, %class.SkString* dereferenceable(8)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z17SkStringFromUTF16PKtm(%class.SkString* noalias sret, i16*, i64) local_unnamed_addr #0 {
  %4 = alloca i16*, align 8
  %5 = alloca %class.SkString, align 8
  %6 = alloca i16*, align 8
  %7 = getelementptr inbounds %class.SkString, %class.SkString* %0, i64 0, i32 0, i32 0
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %7, align 8
  tail call void @_ZN8SkStringC1Ev(%class.SkString* %0) #6
  %8 = getelementptr inbounds i16, i16* %1, i64 %2
  %9 = icmp eq i64 %2, 0
  br i1 %9, label %41, label %10

10:                                               ; preds = %3
  %11 = bitcast i16** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #6
  store i16* %1, i16** %4, align 8
  %12 = icmp sgt i64 %2, 0
  br i1 %12, label %13, label %25

13:                                               ; preds = %10, %22
  %14 = phi i64 [ %21, %22 ], [ 0, %10 ]
  %15 = phi i16* [ %23, %22 ], [ %1, %10 ]
  %16 = call i32 @_ZN5SkUTF9NextUTF16EPPKtS1_(i16** nonnull %4, i16* %8) #6
  %17 = call i64 @_ZN5SkUTF6ToUTF8EiPc(i32 %16, i8* null) #6
  %18 = sub i64 4294967295, %17
  %19 = icmp ugt i64 %14, %18
  %20 = select i1 %19, i64 0, i64 %17
  %21 = add i64 %20, %14
  br i1 %19, label %25, label %22

22:                                               ; preds = %13
  %23 = load i16*, i16** %4, align 8
  %24 = icmp ult i16* %23, %8
  br i1 %24, label %13, label %25

25:                                               ; preds = %22, %13, %10
  %26 = phi i64 [ 0, %10 ], [ %21, %13 ], [ %21, %22 ]
  %27 = phi i16* [ %8, %10 ], [ %8, %22 ], [ %15, %13 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #6
  %28 = bitcast %class.SkString* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #6
  call void @_ZN8SkStringC1Em(%class.SkString* nonnull %5, i64 %26) #6
  %29 = call dereferenceable(8) %class.SkString* @_ZN8SkStringaSEOS_(%class.SkString* %0, %class.SkString* nonnull dereferenceable(8) %5) #6
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #6
  %30 = call i8* @_ZN8SkString12writable_strEv(%class.SkString* %0) #6
  %31 = bitcast i16** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #6
  store i16* %1, i16** %6, align 8
  %32 = icmp ugt i16* %27, %1
  br i1 %32, label %34, label %33

33:                                               ; preds = %34, %25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #6
  br label %41

34:                                               ; preds = %25, %34
  %35 = phi i8* [ %38, %34 ], [ %30, %25 ]
  %36 = call i32 @_ZN5SkUTF9NextUTF16EPPKtS1_(i16** nonnull %6, i16* %8) #6
  %37 = call i64 @_ZN5SkUTF6ToUTF8EiPc(i32 %36, i8* %35) #6
  %38 = getelementptr inbounds i8, i8* %35, i64 %37
  %39 = load i16*, i16** %6, align 8
  %40 = icmp ult i16* %39, %27
  br i1 %40, label %34, label %33

41:                                               ; preds = %33, %3
  ret void
}

declare i32 @_ZN5SkUTF9NextUTF16EPPKtS1_(i16**, i16*) local_unnamed_addr #1

declare i64 @_ZN5SkUTF6ToUTF8EiPc(i32, i8*) local_unnamed_addr #1

declare void @_ZN8SkStringC1Em(%class.SkString*, i64) unnamed_addr #1

declare dereferenceable(8) %class.SkString* @_ZN8SkStringaSEOS_(%class.SkString*, %class.SkString* dereferenceable(8)) local_unnamed_addr #1

declare i8* @_ZN8SkString12writable_strEv(%class.SkString*) local_unnamed_addr #1

declare void @_ZN8SkString13insertUnicharEmi(%class.SkString*, i64, i32) local_unnamed_addr #1

declare void @_ZN8SkString6insertEmPKcm(%class.SkString*, i64, i8*, i64) local_unnamed_addr #1

declare void @_ZN8SkString6insertEmPKc(%class.SkString*, i64, i8*) local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i8* @strstr(i8*, i8* nocapture) local_unnamed_addr #4

; Function Attrs: nofree nounwind readonly
declare i8* @strchr(i8*, i32) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
