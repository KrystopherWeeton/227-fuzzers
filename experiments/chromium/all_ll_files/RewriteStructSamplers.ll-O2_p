; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/vulkan/RewriteStructSamplers.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/vulkan/RewriteStructSamplers.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.sh::TCompiler" = type opaque
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, [7 x i8] }>
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sh::TIntermNode"** }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector.1", %"class.std::__1::vector.6", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"class.std::__1::unique_ptr.8"*, %"class.std::__1::unique_ptr.8"*, %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::unique_ptr.8" = type opaque
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.std::__1::unique_ptr.8"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { i64 }
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.22" = type { %"class.std::__1::vector.23" }
%"class.std::__1::vector.23" = type { %"class.std::__1::__vector_base.24" }
%"class.std::__1::__vector_base.24" = type { i32*, i32*, %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { i32* }
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.30"*, i64, i32, %"class.std::__1::basic_string" }
%"class.sh::TVector.30" = type { %"class.std::__1::vector.31" }
%"class.std::__1::vector.31" = type { %"class.std::__1::__vector_base.32" }
%"class.std::__1::__vector_base.32" = type { %"class.sh::TField"**, %"class.sh::TField"**, %"class.std::__1::__compressed_pair.33" }
%"class.sh::TField" = type <{ %"class.sh::TType"*, %"class.sh::ImmutableString", %"struct.sh::TSourceLoc", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"class.sh::TField"** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::TConstantUnion" = type { %union.anon.43, i32 }
%union.anon.43 = type { i32 }
%"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser" = type { %"class.sh::TIntermTraverser", %"class.sh::TCompiler"*, i32, %"class.absl::flat_hash_map", %"class.absl::flat_hash_map.78", %"class.absl::flat_hash_map.89", %"class.sh::TVector.22" }
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector.44", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.51", %"class.std::__1::vector.58", %"class.sh::TVector", %"class.std::__1::vector.65" }
%"class.std::__1::vector.44" = type { %"class.std::__1::__vector_base.45" }
%"class.std::__1::__vector_base.45" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.46" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.std::__1::vector.51" = type { %"class.std::__1::__vector_base.52" }
%"class.std::__1::__vector_base.52" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.53" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector", %"class.sh::TVector" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.58" = type { %"class.std::__1::__vector_base.59" }
%"class.std::__1::__vector_base.59" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.60" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.std::__1::vector.65" = type { %"class.std::__1::__vector_base.66" }
%"class.std::__1::__vector_base.66" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.67" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.absl::flat_hash_map" = type { %"class.absl::container_internal::raw_hash_map" }
%"class.absl::container_internal::raw_hash_map" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, %"union.absl::container_internal::map_slot_type"*, i64, i64, %"class.absl::container_internal::CompressedTuple" }
%"union.absl::container_internal::map_slot_type" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %"class.sh::TStructure"*, %"struct.sh::(anonymous namespace)::StructureData" }
%"struct.sh::(anonymous namespace)::StructureData" = type { %"class.sh::TStructure"*, %"class.sh::TVector.100" }
%"class.sh::TVector.100" = type { %"class.std::__1::vector.101" }
%"class.std::__1::vector.101" = type { %"class.std::__1::__vector_base.102" }
%"class.std::__1::__vector_base.102" = type { i32*, i32*, %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { i32* }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage" = type { i64 }
%"class.absl::flat_hash_map.78" = type { %"class.absl::container_internal::raw_hash_map.79" }
%"class.absl::container_internal::raw_hash_map.79" = type { %"class.absl::container_internal::raw_hash_set.80" }
%"class.absl::container_internal::raw_hash_set.80" = type { i8*, %"union.absl::container_internal::map_slot_type.81"*, i64, i64, %"class.absl::container_internal::CompressedTuple.82" }
%"union.absl::container_internal::map_slot_type.81" = type { %"struct.std::__1::pair.109" }
%"struct.std::__1::pair.109" = type { %"class.sh::TVariable"*, %"class.sh::TVariable"* }
%"class.absl::container_internal::CompressedTuple.82" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.83" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.83" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.absl::flat_hash_map.89" = type { %"class.absl::container_internal::raw_hash_map.90" }
%"class.absl::container_internal::raw_hash_map.90" = type { %"class.absl::container_internal::raw_hash_set.91" }
%"class.absl::container_internal::raw_hash_set.91" = type { i8*, %"union.absl::container_internal::map_slot_type.92"*, i64, i64, %"class.absl::container_internal::CompressedTuple.93" }
%"union.absl::container_internal::map_slot_type.92" = type { %"struct.std::__1::pair.111" }
%"struct.std::__1::pair.111" = type { %"class.std::__1::basic_string.112", %"class.sh::TVariable"* }
%"class.std::__1::basic_string.112" = type { %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.115 }
%union.anon.115 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.absl::container_internal::CompressedTuple.93" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.94" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.94" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon.116 }
%struct.anon.116 = type { i8 }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.100", i8, [7 x i8] }>
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector.121"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TVector.121" = type opaque
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector" }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector.141", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector.141" = type { %"class.std::__1::__vector_base.142" }
%"class.std::__1::__vector_base.142" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair.143" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }
%"class.sh::(anonymous namespace)::RewriteExpressionTraverser" = type { %"class.sh::TIntermTraverser", %"class.sh::TCompiler"*, %"class.absl::flat_hash_map"*, %"class.absl::flat_hash_map.78"*, %"class.absl::flat_hash_map.89"* }
%"class.sh::TVector.131" = type { %"class.std::__1::vector.132" }
%"class.std::__1::vector.132" = type { %"class.std::__1::__vector_base.133" }
%"class.std::__1::__vector_base.133" = type { %"class.sh::TIntermBinary"**, %"class.sh::TIntermBinary"**, %"class.std::__1::__compressed_pair.134" }
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.135" }
%"struct.std::__1::__compressed_pair_elem.135" = type { %"class.sh::TIntermBinary"** }
%"class.sh::ImmutableStringBuilder" = type { i64, i64, i8* }

$_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE = comdat any

$_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE = comdat any

$_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE = comdat any

$_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE = comdat any

$_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE = comdat any

$_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE = comdat any

$_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE = comdat any

$_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE = comdat any

$_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE = comdat any

$_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE = comdat any

$_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE = comdat any

$_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE = comdat any

$_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE = comdat any

$_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE = comdat any

$_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE = comdat any

$_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm = comdat any

$_ZNK4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE2atIS6_S7_EEDTclsrT0_5valueclL_ZNSC_9addressofIKSG_EEPT_RSN_EclL_ZNSC_7declvalIRSM_EEDTclsr3std3__1E9__declvalISN_ELi0EEEvEEEEERKSN_ = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN2sh9TVariableEEENS0_10StringHashENS0_12StringHashEq2EqENS7_INS3_4pairIKS9_SD_EEEEE4findIS9_EENSM_8iteratorERKT_m = comdat any

$_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE = comdat any

$_ZNSt3__16vectorIi14pool_allocatorIiEE8__appendEmRKi = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN2sh9TVariableEEENS0_10StringHashENS0_12StringHashEq2EqENS7_INS3_4pairIKS9_SD_EEEEE22find_or_prepare_insertIS9_EENSI_ImbEERKT_ = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN2sh9TVariableEEENS0_10StringHashENS0_12StringHashEq2EqENS7_INS3_4pairIKS9_SD_EEEEE14prepare_insertEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN2sh9TVariableEEENS0_10StringHashENS0_12StringHashEq2EqENS7_INS3_4pairIKS9_SD_EEEEE6resizeEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN2sh9TVariableEEENS0_10StringHashENS0_12StringHashEq2EqENS7_INS3_4pairIKS9_SD_EEEEE27drop_deletes_without_resizeEv = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE14prepare_insertEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE6resizeEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE27drop_deletes_without_resizeEv = comdat any

$_ZNSt3__16vectorIj14pool_allocatorIjEE8__appendEm = comdat any

$_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJPNS1_12TIntermBlockERPNS1_18TIntermDeclarationENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_ = comdat any

$_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = comdat any

@_ZTVN2sh12_GLOBAL__N_130RewriteStructSamplersTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"*)* @_ZN2sh12_GLOBAL__N_130RewriteStructSamplersTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"*)* @_ZN2sh12_GLOBAL__N_130RewriteStructSamplersTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh12_GLOBAL__N_130RewriteStructSamplersTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh12_GLOBAL__N_130RewriteStructSamplersTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh12_GLOBAL__N_130RewriteStructSamplersTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = linkonce_odr hidden constant [16 x i8] c"\FF\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80", comdat, align 16
@_ZN4absl13hash_internal15MixingHashState5kSeedE = external local_unnamed_addr constant i8*, align 8
@.str.1 = private unnamed_addr constant [2 x i8] c"_\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [45 x i8] c"absl::container_internal::raw_hash_map<>::at\00", align 1
@_ZTVN2sh12_GLOBAL__N_126RewriteExpressionTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::RewriteExpressionTraverser"*)* @_ZN2sh12_GLOBAL__N_126RewriteExpressionTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::RewriteExpressionTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh12_GLOBAL__N_126RewriteExpressionTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::RewriteExpressionTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh12_GLOBAL__N_126RewriteExpressionTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@_ZN2shL21kEmptyImmutableStringE = internal constant %"class.sh::ImmutableString" { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0), i64 0 }, align 8
@_ZTVN2sh18TIntermDeclarationE = external unnamed_addr constant { [31 x i8*], [6 x i8*] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh21RewriteStructSamplersEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEPi(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*, i32* nocapture) local_unnamed_addr #0 {
  %5 = alloca %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", align 8
  %6 = bitcast %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 312, i8* nonnull %6) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 312, i1 false)
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %5, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %7, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* %2) #7
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %5, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_130RewriteStructSamplersTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %9 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %5, i64 0, i32 1
  store %"class.sh::TCompiler"* %0, %"class.sh::TCompiler"** %9, align 8
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %5, i64 0, i32 2
  store i32 0, i32* %10, align 8
  %11 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %5, i64 0, i32 3, i32 0, i32 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %11, align 8
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %5, i64 0, i32 3, i32 0, i32 0, i32 1
  %13 = bitcast %"union.absl::container_internal::map_slot_type"** %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 32, i1 false) #7
  %14 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %5, i64 0, i32 4, i32 0, i32 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %14, align 8
  %15 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %5, i64 0, i32 4, i32 0, i32 0, i32 1
  %16 = bitcast %"union.absl::container_internal::map_slot_type.81"** %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 32, i1 false) #7
  %17 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %5, i64 0, i32 5, i32 0, i32 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %17, align 8
  %18 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %5, i64 0, i32 5, i32 0, i32 0, i32 1
  %19 = bitcast %"union.absl::container_internal::map_slot_type.92"** %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 56, i1 false) #7
  call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* %1, %"class.sh::TIntermTraverser"* nonnull %7) #7
  %20 = load i32, i32* %10, align 8
  store i32 %20, i32* %3, align 4
  %21 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %1, i64 0, i32 0
  %22 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %7, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %21) #7
  call void @_ZN2sh12_GLOBAL__N_130RewriteStructSamplersTraverserD2Ev(%"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 312, i8* nonnull %6) #7
  ret i1 %22
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermTraverser"*) unnamed_addr #2

declare zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_130RewriteStructSamplersTraverserD2Ev(%"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_130RewriteStructSamplersTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 6, i32 0, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  br label %10

10:                                               ; preds = %1, %6
  %11 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 5, i32 0, i32 0, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %42, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  br label %20

17:                                               ; preds = %38
  %18 = load i8*, i8** %15, align 8
  tail call void @_ZdlPv(i8* %18) #16
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %15, align 8
  %19 = bitcast %"union.absl::container_internal::map_slot_type.92"** %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 32, i1 false) #7
  br label %42

20:                                               ; preds = %38, %14
  %21 = phi i64 [ %12, %14 ], [ %39, %38 ]
  %22 = phi i64 [ 0, %14 ], [ %40, %38 ]
  %23 = load i8*, i8** %15, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 %22
  %25 = load i8, i8* %24, align 1
  %26 = icmp sgt i8 %25, -1
  br i1 %26, label %27, label %38

27:                                               ; preds = %20
  %28 = load %"union.absl::container_internal::map_slot_type.92"*, %"union.absl::container_internal::map_slot_type.92"** %16, align 8
  %29 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %28, i64 %22
  %30 = bitcast %"union.absl::container_internal::map_slot_type.92"* %29 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %31 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %30, i64 0, i32 1, i32 0
  %32 = load i8, i8* %31, align 1
  %33 = icmp slt i8 %32, 0
  br i1 %33, label %34, label %38

34:                                               ; preds = %27
  %35 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %29, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  tail call void @_ZdlPv(i8* %36) #16
  %37 = load i64, i64* %11, align 8
  br label %38

38:                                               ; preds = %34, %27, %20
  %39 = phi i64 [ %37, %34 ], [ %21, %27 ], [ %21, %20 ]
  %40 = add i64 %22, 1
  %41 = icmp eq i64 %40, %39
  br i1 %41, label %17, label %20

42:                                               ; preds = %10, %17
  %43 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 4, i32 0, i32 0, i32 3
  %44 = load i64, i64* %43, align 8
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %51, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %48 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  tail call void @_ZdlPv(i8* %49) #16
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %48, align 8
  %50 = bitcast %"union.absl::container_internal::map_slot_type.81"** %47 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %50, i8 0, i64 32, i1 false) #7
  br label %51

51:                                               ; preds = %42, %46
  %52 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 3, i32 0, i32 0, i32 3
  %53 = load i64, i64* %52, align 8
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %82, label %55

55:                                               ; preds = %51
  %56 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %57 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  br label %61

58:                                               ; preds = %78
  %59 = load i8*, i8** %56, align 8
  tail call void @_ZdlPv(i8* %59) #16
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %56, align 8
  %60 = bitcast %"union.absl::container_internal::map_slot_type"** %57 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %60, i8 0, i64 32, i1 false) #7
  br label %82

61:                                               ; preds = %78, %55
  %62 = phi i64 [ %53, %55 ], [ %79, %78 ]
  %63 = phi i64 [ 0, %55 ], [ %80, %78 ]
  %64 = load i8*, i8** %56, align 8
  %65 = getelementptr inbounds i8, i8* %64, i64 %63
  %66 = load i8, i8* %65, align 1
  %67 = icmp sgt i8 %66, -1
  br i1 %67, label %68, label %78

68:                                               ; preds = %61
  %69 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %57, align 8
  %70 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %69, i64 %63, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %71 = load i32*, i32** %70, align 8
  %72 = icmp eq i32* %71, null
  br i1 %72, label %78, label %73

73:                                               ; preds = %68
  %74 = ptrtoint i32* %71 to i64
  %75 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %69, i64 %63, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1
  %76 = bitcast i32** %75 to i64*
  store i64 %74, i64* %76, align 8
  %77 = load i64, i64* %52, align 8
  br label %78

78:                                               ; preds = %73, %68, %61
  %79 = phi i64 [ %77, %73 ], [ %62, %68 ], [ %62, %61 ]
  %80 = add i64 %63, 1
  %81 = icmp eq i64 %80, %79
  br i1 %81, label %58, label %61

82:                                               ; preds = %51, %58
  %83 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %83) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_130RewriteStructSamplersTraverserD0Ev(%"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"*) unnamed_addr #3 align 2 {
  tail call void @_ZN2sh12_GLOBAL__N_130RewriteStructSamplersTraverserD2Ev(%"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0) #7
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_130RewriteStructSamplersTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* nocapture, %"class.sh::TIntermSymbol"* nocapture) unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_130RewriteStructSamplersTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 1
  %5 = load %"class.sh::TCompiler"*, %"class.sh::TCompiler"** %4, align 8
  %6 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 3
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 4
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 5
  %9 = tail call fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_134RewriteExpressionVisitBinaryHelperEPNS_9TCompilerEPNS_13TIntermBinaryERKN4absl13flat_hash_mapIPKNS_10TStructureENS0_13StructureDataENS5_18container_internal6HashEqIS9_vE4HashENSD_2EqENSt3__19allocatorINSG_4pairIKS9_SA_EEEEEERKNS6_IPKNS_9TVariableESR_NSC_ISR_vE4HashENSS_2EqENSH_INSI_IKSR_SR_EEEEEERKNS6_INSG_12basic_stringIcNSG_11char_traitsIcEENSH_IcEEEESR_NSB_10StringHashENSB_12StringHashEq2EqENSH_INSI_IKS15_SR_EEEEEE(%"class.sh::TCompiler"* %5, %"class.sh::TIntermBinary"* %2, %"class.absl::flat_hash_map"* dereferenceable(40) %6, %"class.absl::flat_hash_map.78"* dereferenceable(40) %7, %"class.absl::flat_hash_map.89"* dereferenceable(40) %8)
  %10 = icmp eq %"class.sh::TIntermTyped"* %9, null
  br i1 %10, label %14, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 0
  %13 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %9, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %12, %"class.sh::TIntermNode"* %13, i32 1) #7
  br label %14

14:                                               ; preds = %3, %11
  %15 = phi i1 [ false, %11 ], [ true, %3 ]
  ret i1 %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_130RewriteStructSamplersTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #5 align 2 {
  %4 = alloca %"class.sh::TStructure"*, align 8
  %5 = alloca %"class.std::__1::basic_string.112", align 8
  %6 = alloca %"class.sh::ImmutableString", align 8
  %7 = alloca %"class.sh::TIntermDeclaration"*, align 8
  %8 = alloca %"class.sh::TVector", align 16
  %9 = alloca %"class.sh::TIntermBlock"*, align 8
  store %"class.sh::TIntermDeclaration"* %2, %"class.sh::TIntermDeclaration"** %7, align 8
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 0, i32 6
  %11 = load i8, i8* %10, align 4, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %602, label %13

13:                                               ; preds = %3
  %14 = bitcast %"class.sh::TIntermDeclaration"* %2 to %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)***
  %15 = load %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)**, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*** %14, align 8
  %16 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)** %15, i64 27
  %17 = load %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)** %16, align 8
  %18 = tail call %"class.sh::TVector"* %17(%"class.sh::TIntermDeclaration"* %2) #7
  %19 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %18, i64 0, i32 0, i32 0, i32 0
  %20 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %19, align 8
  %21 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %20, align 8
  %22 = bitcast %"class.sh::TIntermNode"* %21 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %23 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %22, align 8
  %24 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %23, i64 4
  %25 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %24, align 8
  %26 = tail call %"class.sh::TIntermTyped"* %25(%"class.sh::TIntermNode"* %21) #7
  %27 = bitcast %"class.sh::TIntermTyped"* %26 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %28 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %27, align 8
  %29 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %28, i64 31
  %30 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %29, align 8
  %31 = tail call dereferenceable(184) %"class.sh::TType"* %30(%"class.sh::TIntermTyped"* %26) #7
  %32 = tail call zeroext i1 @_ZNK2sh5TType29isStructureContainingSamplersEv(%"class.sh::TType"* %31) #7
  br i1 %32, label %33, label %602

33:                                               ; preds = %13
  %34 = bitcast %"class.sh::TVector"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %34) #7
  %35 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %8, i64 0, i32 0, i32 0, i32 0
  %36 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %8, i64 0, i32 0, i32 0, i32 1
  %37 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %8, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %34, i8 0, i64 24, i1 false) #7
  %38 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %31, i64 0, i32 14
  %39 = load i8, i8* %38, align 8, !range !2
  %40 = icmp eq i8 %39, 0
  %41 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %31, i64 0, i32 13
  %42 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %41, align 8
  br i1 %40, label %44, label %43

43:                                               ; preds = %33
  call fastcc void @_ZN2sh12_GLOBAL__N_130RewriteStructSamplersTraverser28stripStructSpecifierSamplersEPKNS_10TStructureEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, %"class.sh::TStructure"* %42, %"class.sh::TVector"* nonnull %8)
  br label %545

44:                                               ; preds = %33
  %45 = ptrtoint %"class.sh::TStructure"* %42 to i64
  %46 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %47 = add i64 %46, %45
  %48 = zext i64 %47 to i128
  %49 = mul nuw i128 %48, 11376068507788127593
  %50 = lshr i128 %49, 64
  %51 = xor i128 %50, %49
  %52 = trunc i128 %51 to i64
  %53 = add i64 %52, %45
  %54 = zext i64 %53 to i128
  %55 = mul nuw i128 %54, 11376068507788127593
  %56 = lshr i128 %55, 64
  %57 = xor i128 %56, %55
  %58 = trunc i128 %57 to i64
  %59 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 3, i32 0, i32 0, i32 3
  %62 = load i64, i64* %61, align 8
  %63 = lshr i64 %58, 7
  %64 = ptrtoint i8* %60 to i64
  %65 = lshr i64 %64, 12
  %66 = xor i64 %63, %65
  %67 = trunc i128 %57 to i8
  %68 = and i8 %67, 127
  %69 = insertelement <16 x i8> undef, i8 %68, i32 0
  %70 = shufflevector <16 x i8> %69, <16 x i8> undef, <16 x i32> zeroinitializer
  %71 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  br label %72

72:                                               ; preds = %102, %44
  %73 = phi i64 [ %66, %44 ], [ %104, %102 ]
  %74 = phi i64 [ 0, %44 ], [ %103, %102 ]
  %75 = and i64 %73, %62
  %76 = getelementptr inbounds i8, i8* %60, i64 %75
  %77 = bitcast i8* %76 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 1
  %79 = icmp eq <16 x i8> %70, %78
  %80 = bitcast <16 x i1> %79 to i16
  %81 = icmp eq i16 %80, 0
  br i1 %81, label %98, label %82

82:                                               ; preds = %72
  %83 = zext i16 %80 to i32
  %84 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %71, align 8
  br label %85

85:                                               ; preds = %94, %82
  %86 = phi i32 [ %83, %82 ], [ %96, %94 ]
  %87 = tail call i32 @llvm.cttz.i32(i32 %86, i1 false) #7, !range !3
  %88 = zext i32 %87 to i64
  %89 = add i64 %75, %88
  %90 = and i64 %89, %62
  %91 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %84, i64 %90, i32 0, i32 0
  %92 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %91, align 8
  %93 = icmp eq %"class.sh::TStructure"* %92, %42
  br i1 %93, label %105, label %94, !prof !4

94:                                               ; preds = %85
  %95 = add i32 %86, -1
  %96 = and i32 %95, %86
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %85

98:                                               ; preds = %94, %72
  %99 = icmp eq <16 x i8> %78, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %100 = bitcast <16 x i1> %99 to i16
  %101 = icmp eq i16 %100, 0
  br i1 %101, label %102, label %111, !prof !5

102:                                              ; preds = %98
  %103 = add i64 %74, 16
  %104 = add i64 %103, %75
  br label %72

105:                                              ; preds = %85
  %106 = getelementptr inbounds i8, i8* %60, i64 %90
  %107 = icmp ne i8* %106, null
  tail call void @llvm.assume(i1 %107) #7
  %108 = load i8, i8* %106, align 1
  %109 = icmp sgt i8 %108, -1
  br i1 %109, label %112, label %110, !prof !4

110:                                              ; preds = %105
  tail call void @llvm.trap() #7
  unreachable

111:                                              ; preds = %98
  call fastcc void @_ZN2sh12_GLOBAL__N_130RewriteStructSamplersTraverser28stripStructSpecifierSamplersEPKNS_10TStructureEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, %"class.sh::TStructure"* %42, %"class.sh::TVector"* nonnull %8)
  br label %112

112:                                              ; preds = %105, %111
  %113 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %26, i64 0, i32 0
  %114 = bitcast %"class.sh::TIntermTyped"* %26 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %115 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %114, align 8
  %116 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %115, i64 19
  %117 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %116, align 8
  %118 = call %"class.sh::TIntermSymbol"* %117(%"class.sh::TIntermNode"* %113) #7
  %119 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %118, i64 0, i32 1
  %120 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %119, align 8
  %121 = bitcast %"class.sh::TStructure"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %121)
  store %"class.sh::TStructure"* %42, %"class.sh::TStructure"** %4, align 8
  %122 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %120, i64 0, i32 1
  %123 = load %"class.sh::TType"*, %"class.sh::TType"** %122, align 8
  call fastcc void @_ZN2sh12_GLOBAL__N_130RewriteStructSamplersTraverser10enterArrayERKNS_5TTypeE(%"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, %"class.sh::TType"* dereferenceable(184) %123) #7
  %124 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %42, i64 0, i32 2, i32 0
  %125 = load %"class.sh::TVector.30"*, %"class.sh::TVector.30"** %124, align 8
  %126 = getelementptr inbounds %"class.sh::TVector.30", %"class.sh::TVector.30"* %125, i64 0, i32 0, i32 0, i32 0
  %127 = load %"class.sh::TField"**, %"class.sh::TField"*** %126, align 8
  %128 = getelementptr inbounds %"class.sh::TVector.30", %"class.sh::TVector.30"* %125, i64 0, i32 0, i32 0, i32 1
  %129 = load %"class.sh::TField"**, %"class.sh::TField"*** %128, align 8
  %130 = icmp eq %"class.sh::TField"** %127, %129
  br i1 %130, label %139, label %131

131:                                              ; preds = %112
  %132 = bitcast %"class.std::__1::basic_string.112"* %5 to i8*
  %133 = bitcast %"class.sh::TVariable"* %120 to %"class.sh::TSymbol"*
  %134 = getelementptr inbounds %"class.std::__1::basic_string.112", %"class.std::__1::basic_string.112"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %135 = getelementptr inbounds %"class.std::__1::basic_string.112", %"class.std::__1::basic_string.112"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %136 = getelementptr inbounds %"class.std::__1::basic_string.112", %"class.std::__1::basic_string.112"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %137 = bitcast %"class.std::__1::basic_string.112"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %138 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %137, i64 0, i32 1, i32 0
  br label %145

139:                                              ; preds = %175, %112
  %140 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 3, i32 0
  %141 = call fastcc dereferenceable(32) %"struct.sh::(anonymous namespace)::StructureData"* @_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh10TStructureENS3_12_GLOBAL__N_113StructureDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEEixIS6_S9_EEDTclsrT0_5valueclL_ZNSE_9addressofISI_EEPT_RSO_EclL_ZNSE_7declvalIRSI_EEDTclsr3std3__1E9__declvalISO_ELi0EEEvEEEEERKSO_(%"class.absl::container_internal::raw_hash_map"* %140, %"class.sh::TStructure"** nonnull dereferenceable(8) %4) #7
  %142 = getelementptr inbounds %"struct.sh::(anonymous namespace)::StructureData", %"struct.sh::(anonymous namespace)::StructureData"* %141, i64 0, i32 0
  %143 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %142, align 8
  %144 = icmp eq %"class.sh::TStructure"* %143, null
  br i1 %144, label %520, label %178

145:                                              ; preds = %175, %131
  %146 = phi %"class.sh::TField"** [ %127, %131 ], [ %176, %175 ]
  %147 = load %"class.sh::TField"*, %"class.sh::TField"** %146, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %132) #7
  %148 = call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %133) #7
  %149 = extractvalue { i8*, i64 } %148, 0
  %150 = icmp eq i8* %149, null
  %151 = select i1 %150, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i64 0, i64 0), i8* %149
  %152 = call i64 @strlen(i8* %151) #7
  %153 = icmp ugt i64 %152, -17
  br i1 %153, label %154, label %156

154:                                              ; preds = %145
  %155 = bitcast %"class.std::__1::basic_string.112"* %5 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %155) #17
  unreachable

156:                                              ; preds = %145
  %157 = icmp ult i64 %152, 23
  br i1 %157, label %163, label %158

158:                                              ; preds = %156
  %159 = add nuw i64 %152, 16
  %160 = and i64 %159, -16
  %161 = call i8* @_Znwm(i64 %160) #16
  store i8* %161, i8** %134, align 8
  %162 = or i64 %160, -9223372036854775808
  store i64 %162, i64* %135, align 8
  store i64 %152, i64* %136, align 8
  br label %166

163:                                              ; preds = %156
  %164 = trunc i64 %152 to i8
  store i8 %164, i8* %138, align 1
  %165 = icmp eq i64 %152, 0
  br i1 %165, label %168, label %166

166:                                              ; preds = %163, %158
  %167 = phi i8* [ %161, %158 ], [ %132, %163 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %167, i8* align 1 %151, i64 %152, i1 false) #7
  br label %168

168:                                              ; preds = %166, %163
  %169 = phi i8* [ %132, %163 ], [ %167, %166 ]
  %170 = getelementptr inbounds i8, i8* %169, i64 %152
  store i8 0, i8* %170, align 1
  call fastcc void @_ZN2sh12_GLOBAL__N_130RewriteStructSamplersTraverser20extractFieldSamplersERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKNS_6TFieldEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, %"class.std::__1::basic_string.112"* nonnull dereferenceable(24) %5, %"class.sh::TField"* %147, %"class.sh::TVector"* nonnull %8) #7
  %171 = load i8, i8* %138, align 1
  %172 = icmp slt i8 %171, 0
  br i1 %172, label %173, label %175

173:                                              ; preds = %168
  %174 = load i8*, i8** %134, align 8
  call void @_ZdlPv(i8* %174) #16
  br label %175

175:                                              ; preds = %173, %168
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %132) #7
  %176 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %146, i64 1
  %177 = icmp eq %"class.sh::TField"** %176, %129
  br i1 %177, label %139, label %145

178:                                              ; preds = %139
  %179 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %180 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %179, i64 184) #7
  %181 = bitcast i8* %180 to %"class.sh::TType"*
  call void @_ZN2sh5TTypeC1EPKNS_10TStructureEb(%"class.sh::TType"* %181, %"class.sh::TStructure"* nonnull %143, i1 zeroext false) #7
  %182 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %123, i64 0, i32 10, i32 1
  %183 = load i64, i64* %182, align 8
  %184 = icmp eq i64 %183, 0
  br i1 %184, label %187, label %185

185:                                              ; preds = %178
  %186 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %123, i64 0, i32 10
  call void @_ZN2sh5TType10makeArraysERKNS_5TSpanIKjEE(%"class.sh::TType"* %181, %"class.sh::TSpan"* dereferenceable(16) %186) #7
  br label %187

187:                                              ; preds = %185, %178
  %188 = getelementptr inbounds i8, i8* %180, i64 8
  %189 = bitcast i8* %188 to i32*
  store i32 6, i32* %189, align 8
  %190 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %191 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %190, i64 40) #7
  %192 = bitcast i8* %191 to %"class.sh::TVariable"*
  %193 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 0, i32 8
  %194 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %193, align 8
  %195 = bitcast %"class.sh::ImmutableString"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %195) #7
  %196 = bitcast %"class.sh::TVariable"* %120 to %"class.sh::TSymbol"*
  %197 = call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %196) #7
  %198 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %6, i64 0, i32 0
  %199 = extractvalue { i8*, i64 } %197, 0
  store i8* %199, i8** %198, align 8
  %200 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %6, i64 0, i32 1
  %201 = extractvalue { i8*, i64 } %197, 1
  store i64 %201, i64* %200, align 8
  %202 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %120, i64 0, i32 0, i32 2
  %203 = load i8, i8* %202, align 4
  call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %192, %"class.sh::TSymbolTable"* %194, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %6, %"class.sh::TType"* %181, i8 zeroext %203, i8 zeroext 0) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %195) #7
  %204 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %205 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %204, i64 56) #7
  %206 = bitcast i8* %205 to %"class.sh::TIntermDeclaration"*
  %207 = bitcast i8* %205 to i32 (...)***
  %208 = getelementptr inbounds i8, i8* %205, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %208, i8 0, i64 16, i1 false) #7
  %209 = getelementptr inbounds i8, i8* %205, i64 24
  %210 = bitcast i8* %209 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %207, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %210, align 8
  %211 = getelementptr inbounds i8, i8* %205, i64 32
  call void @llvm.memset.p0i8.i64(i8* align 8 %211, i8 0, i64 24, i1 false) #7
  %212 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %213 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %212, i64 32) #7
  %214 = bitcast i8* %213 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %214, %"class.sh::TVariable"* %192) #7
  %215 = bitcast i8* %213 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"* %206, %"class.sh::TIntermTyped"* %215) #7
  %216 = ptrtoint i8* %205 to i64
  %217 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %36, align 8
  %218 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %37, align 16
  %219 = icmp ult %"class.sh::TIntermNode"** %217, %218
  %220 = ptrtoint %"class.sh::TIntermNode"** %218 to i64
  br i1 %219, label %221, label %226

221:                                              ; preds = %187
  %222 = bitcast %"class.sh::TIntermNode"** %217 to i64*
  store i64 %216, i64* %222, align 8
  %223 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %217, i64 1
  %224 = ptrtoint %"class.sh::TIntermNode"** %223 to i64
  %225 = bitcast %"class.sh::TIntermNode"*** %36 to i64*
  store i64 %224, i64* %225, align 8
  br label %438

226:                                              ; preds = %187
  %227 = ptrtoint %"class.sh::TIntermNode"** %217 to i64
  %228 = bitcast %"class.sh::TIntermNode"*** %36 to i64*
  %229 = bitcast %"class.sh::TVector"* %8 to i64*
  %230 = load i64, i64* %229, align 16
  %231 = sub i64 %227, %230
  %232 = ashr exact i64 %231, 3
  %233 = add nsw i64 %232, 1
  %234 = icmp ugt i64 %233, 2305843009213693951
  br i1 %234, label %235, label %237

235:                                              ; preds = %226
  %236 = bitcast %"class.sh::TVector"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %236) #17
  unreachable

237:                                              ; preds = %226
  %238 = bitcast %"class.sh::TIntermNode"*** %37 to i64*
  %239 = sub i64 %220, %230
  %240 = ashr exact i64 %239, 3
  %241 = icmp ult i64 %240, 1152921504606846975
  br i1 %241, label %242, label %247

242:                                              ; preds = %237
  %243 = ashr exact i64 %239, 2
  %244 = icmp ult i64 %243, %233
  %245 = select i1 %244, i64 %233, i64 %243
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %253, label %247

247:                                              ; preds = %242, %237
  %248 = phi i64 [ %245, %242 ], [ 2305843009213693951, %237 ]
  %249 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %250 = shl i64 %248, 3
  %251 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %249, i64 %250) #7
  %252 = bitcast i8* %251 to %"class.sh::TIntermNode"**
  br label %253

253:                                              ; preds = %247, %242
  %254 = phi i64 [ %248, %247 ], [ 0, %242 ]
  %255 = phi %"class.sh::TIntermNode"** [ %252, %247 ], [ null, %242 ]
  %256 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 %232
  %257 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 %254
  %258 = ptrtoint %"class.sh::TIntermNode"** %257 to i64
  %259 = bitcast %"class.sh::TIntermNode"** %256 to i64*
  store i64 %216, i64* %259, align 8
  %260 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %256, i64 1
  %261 = ptrtoint %"class.sh::TIntermNode"** %260 to i64
  %262 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %35, align 16
  %263 = ptrtoint %"class.sh::TIntermNode"** %262 to i64
  %264 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %36, align 8
  %265 = icmp eq %"class.sh::TIntermNode"** %264, %262
  br i1 %265, label %435, label %266

266:                                              ; preds = %253
  %267 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %264, i64 -1
  %268 = ptrtoint %"class.sh::TIntermNode"** %267 to i64
  %269 = sub i64 %268, %263
  %270 = lshr i64 %269, 3
  %271 = add nuw nsw i64 %270, 1
  %272 = icmp ult i64 %271, 4
  br i1 %272, label %365, label %273

273:                                              ; preds = %266
  %274 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %264, i64 -1
  %275 = ptrtoint %"class.sh::TIntermNode"** %274 to i64
  %276 = sub i64 %275, %263
  %277 = lshr i64 %276, 3
  %278 = xor i64 %277, -1
  %279 = add nsw i64 %232, %278
  %280 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 %279
  %281 = xor i64 %277, -1
  %282 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %264, i64 %281
  %283 = icmp ult %"class.sh::TIntermNode"** %280, %264
  %284 = icmp ult %"class.sh::TIntermNode"** %282, %256
  %285 = and i1 %283, %284
  br i1 %285, label %365, label %286

286:                                              ; preds = %273
  %287 = and i64 %271, 4611686018427387900
  %288 = sub nsw i64 0, %287
  %289 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %256, i64 %288
  %290 = sub nsw i64 0, %287
  %291 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %264, i64 %290
  %292 = add nsw i64 %287, -4
  %293 = lshr exact i64 %292, 2
  %294 = add nuw nsw i64 %293, 1
  %295 = and i64 %294, 1
  %296 = icmp eq i64 %292, 0
  br i1 %296, label %341, label %297

297:                                              ; preds = %286
  %298 = sub nuw nsw i64 %294, %295
  %299 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %256, i64 -1
  %300 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %264, i64 -1
  %301 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %256, i64 -1
  %302 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %264, i64 -1
  br label %303

303:                                              ; preds = %303, %297
  %304 = phi i64 [ 0, %297 ], [ %338, %303 ]
  %305 = phi i64 [ %298, %297 ], [ %339, %303 ]
  %306 = sub i64 0, %304
  %307 = sub i64 0, %304
  %308 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %299, i64 %306
  %309 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %300, i64 %307
  %310 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %309, i64 -1
  %311 = bitcast %"class.sh::TIntermNode"** %310 to <2 x i64>*
  %312 = load <2 x i64>, <2 x i64>* %311, align 8, !alias.scope !6
  %313 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %309, i64 -2
  %314 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %313, i64 -1
  %315 = bitcast %"class.sh::TIntermNode"** %314 to <2 x i64>*
  %316 = load <2 x i64>, <2 x i64>* %315, align 8, !alias.scope !6
  %317 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %308, i64 -1
  %318 = bitcast %"class.sh::TIntermNode"** %317 to <2 x i64>*
  store <2 x i64> %312, <2 x i64>* %318, align 8, !alias.scope !9, !noalias !6
  %319 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %308, i64 -2
  %320 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %319, i64 -1
  %321 = bitcast %"class.sh::TIntermNode"** %320 to <2 x i64>*
  store <2 x i64> %316, <2 x i64>* %321, align 8, !alias.scope !9, !noalias !6
  %322 = sub nuw nsw i64 -4, %304
  %323 = sub nuw nsw i64 -4, %304
  %324 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %301, i64 %322
  %325 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %302, i64 %323
  %326 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %325, i64 -1
  %327 = bitcast %"class.sh::TIntermNode"** %326 to <2 x i64>*
  %328 = load <2 x i64>, <2 x i64>* %327, align 8, !alias.scope !6
  %329 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %325, i64 -2
  %330 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %329, i64 -1
  %331 = bitcast %"class.sh::TIntermNode"** %330 to <2 x i64>*
  %332 = load <2 x i64>, <2 x i64>* %331, align 8, !alias.scope !6
  %333 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %324, i64 -1
  %334 = bitcast %"class.sh::TIntermNode"** %333 to <2 x i64>*
  store <2 x i64> %328, <2 x i64>* %334, align 8, !alias.scope !9, !noalias !6
  %335 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %324, i64 -2
  %336 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %335, i64 -1
  %337 = bitcast %"class.sh::TIntermNode"** %336 to <2 x i64>*
  store <2 x i64> %332, <2 x i64>* %337, align 8, !alias.scope !9, !noalias !6
  %338 = add i64 %304, 8
  %339 = add i64 %305, -2
  %340 = icmp eq i64 %339, 0
  br i1 %340, label %341, label %303, !llvm.loop !11

341:                                              ; preds = %303, %286
  %342 = phi i64 [ 0, %286 ], [ %338, %303 ]
  %343 = icmp eq i64 %295, 0
  br i1 %343, label %363, label %344

344:                                              ; preds = %341
  %345 = sub i64 0, %342
  %346 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %256, i64 -1
  %347 = sub i64 0, %342
  %348 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %264, i64 -1
  %349 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %346, i64 %345
  %350 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %348, i64 %347
  %351 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %350, i64 -1
  %352 = bitcast %"class.sh::TIntermNode"** %351 to <2 x i64>*
  %353 = load <2 x i64>, <2 x i64>* %352, align 8, !alias.scope !6
  %354 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %350, i64 -2
  %355 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %354, i64 -1
  %356 = bitcast %"class.sh::TIntermNode"** %355 to <2 x i64>*
  %357 = load <2 x i64>, <2 x i64>* %356, align 8, !alias.scope !6
  %358 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %349, i64 -1
  %359 = bitcast %"class.sh::TIntermNode"** %358 to <2 x i64>*
  store <2 x i64> %353, <2 x i64>* %359, align 8, !alias.scope !9, !noalias !6
  %360 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %349, i64 -2
  %361 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %360, i64 -1
  %362 = bitcast %"class.sh::TIntermNode"** %361 to <2 x i64>*
  store <2 x i64> %357, <2 x i64>* %362, align 8, !alias.scope !9, !noalias !6
  br label %363

363:                                              ; preds = %341, %344
  %364 = icmp eq i64 %271, %287
  br i1 %364, label %435, label %365

365:                                              ; preds = %363, %273, %266
  %366 = phi %"class.sh::TIntermNode"** [ %256, %273 ], [ %256, %266 ], [ %289, %363 ]
  %367 = phi %"class.sh::TIntermNode"** [ %264, %273 ], [ %264, %266 ], [ %291, %363 ]
  %368 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %367, i64 -1
  %369 = ptrtoint %"class.sh::TIntermNode"** %368 to i64
  %370 = sub i64 %369, %263
  %371 = lshr i64 %370, 3
  %372 = add nuw nsw i64 %371, 1
  %373 = and i64 %372, 7
  %374 = icmp eq i64 %373, 0
  br i1 %374, label %386, label %375

375:                                              ; preds = %365, %375
  %376 = phi %"class.sh::TIntermNode"** [ %379, %375 ], [ %366, %365 ]
  %377 = phi %"class.sh::TIntermNode"** [ %380, %375 ], [ %367, %365 ]
  %378 = phi i64 [ %384, %375 ], [ %373, %365 ]
  %379 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %376, i64 -1
  %380 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %377, i64 -1
  %381 = bitcast %"class.sh::TIntermNode"** %380 to i64*
  %382 = load i64, i64* %381, align 8
  %383 = bitcast %"class.sh::TIntermNode"** %379 to i64*
  store i64 %382, i64* %383, align 8
  %384 = add i64 %378, -1
  %385 = icmp eq i64 %384, 0
  br i1 %385, label %386, label %375, !llvm.loop !13

386:                                              ; preds = %375, %365
  %387 = phi %"class.sh::TIntermNode"** [ undef, %365 ], [ %379, %375 ]
  %388 = phi %"class.sh::TIntermNode"** [ %366, %365 ], [ %379, %375 ]
  %389 = phi %"class.sh::TIntermNode"** [ %367, %365 ], [ %380, %375 ]
  %390 = icmp ult i64 %370, 56
  br i1 %390, label %435, label %391

391:                                              ; preds = %386, %391
  %392 = phi %"class.sh::TIntermNode"** [ %429, %391 ], [ %388, %386 ]
  %393 = phi %"class.sh::TIntermNode"** [ %430, %391 ], [ %389, %386 ]
  %394 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 -1
  %395 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 -1
  %396 = bitcast %"class.sh::TIntermNode"** %395 to i64*
  %397 = load i64, i64* %396, align 8
  %398 = bitcast %"class.sh::TIntermNode"** %394 to i64*
  store i64 %397, i64* %398, align 8
  %399 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 -2
  %400 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 -2
  %401 = bitcast %"class.sh::TIntermNode"** %400 to i64*
  %402 = load i64, i64* %401, align 8
  %403 = bitcast %"class.sh::TIntermNode"** %399 to i64*
  store i64 %402, i64* %403, align 8
  %404 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 -3
  %405 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 -3
  %406 = bitcast %"class.sh::TIntermNode"** %405 to i64*
  %407 = load i64, i64* %406, align 8
  %408 = bitcast %"class.sh::TIntermNode"** %404 to i64*
  store i64 %407, i64* %408, align 8
  %409 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 -4
  %410 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 -4
  %411 = bitcast %"class.sh::TIntermNode"** %410 to i64*
  %412 = load i64, i64* %411, align 8
  %413 = bitcast %"class.sh::TIntermNode"** %409 to i64*
  store i64 %412, i64* %413, align 8
  %414 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 -5
  %415 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 -5
  %416 = bitcast %"class.sh::TIntermNode"** %415 to i64*
  %417 = load i64, i64* %416, align 8
  %418 = bitcast %"class.sh::TIntermNode"** %414 to i64*
  store i64 %417, i64* %418, align 8
  %419 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 -6
  %420 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 -6
  %421 = bitcast %"class.sh::TIntermNode"** %420 to i64*
  %422 = load i64, i64* %421, align 8
  %423 = bitcast %"class.sh::TIntermNode"** %419 to i64*
  store i64 %422, i64* %423, align 8
  %424 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 -7
  %425 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 -7
  %426 = bitcast %"class.sh::TIntermNode"** %425 to i64*
  %427 = load i64, i64* %426, align 8
  %428 = bitcast %"class.sh::TIntermNode"** %424 to i64*
  store i64 %427, i64* %428, align 8
  %429 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 -8
  %430 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 -8
  %431 = bitcast %"class.sh::TIntermNode"** %430 to i64*
  %432 = load i64, i64* %431, align 8
  %433 = bitcast %"class.sh::TIntermNode"** %429 to i64*
  store i64 %432, i64* %433, align 8
  %434 = icmp eq %"class.sh::TIntermNode"** %430, %262
  br i1 %434, label %435, label %391, !llvm.loop !15

435:                                              ; preds = %386, %391, %363, %253
  %436 = phi %"class.sh::TIntermNode"** [ %256, %253 ], [ %289, %363 ], [ %387, %386 ], [ %429, %391 ]
  %437 = ptrtoint %"class.sh::TIntermNode"** %436 to i64
  store i64 %437, i64* %229, align 16
  store i64 %261, i64* %228, align 8
  store i64 %258, i64* %238, align 16
  br label %438

438:                                              ; preds = %435, %221
  %439 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 4, i32 0
  %440 = ptrtoint %"class.sh::TVariable"* %120 to i64
  %441 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map.79", %"class.absl::container_internal::raw_hash_map.79"* %439, i64 0, i32 0
  %442 = add i64 %46, %440
  %443 = zext i64 %442 to i128
  %444 = mul nuw i128 %443, 11376068507788127593
  %445 = lshr i128 %444, 64
  %446 = xor i128 %445, %444
  %447 = trunc i128 %446 to i64
  %448 = add i64 %447, %440
  %449 = zext i64 %448 to i128
  %450 = mul nuw i128 %449, 11376068507788127593
  %451 = lshr i128 %450, 64
  %452 = xor i128 %451, %450
  %453 = trunc i128 %452 to i64
  %454 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map.79", %"class.absl::container_internal::raw_hash_map.79"* %439, i64 0, i32 0, i32 0
  %455 = load i8*, i8** %454, align 8
  %456 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 4, i32 0, i32 0, i32 3
  %457 = load i64, i64* %456, align 8
  %458 = lshr i64 %453, 7
  %459 = ptrtoint i8* %455 to i64
  %460 = lshr i64 %459, 12
  %461 = xor i64 %460, %458
  %462 = trunc i128 %452 to i8
  %463 = and i8 %462, 127
  %464 = insertelement <16 x i8> undef, i8 %463, i32 0
  %465 = shufflevector <16 x i8> %464, <16 x i8> undef, <16 x i32> zeroinitializer
  %466 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  br label %467

467:                                              ; preds = %497, %438
  %468 = phi i64 [ %461, %438 ], [ %499, %497 ]
  %469 = phi i64 [ 0, %438 ], [ %498, %497 ]
  %470 = and i64 %468, %457
  %471 = getelementptr inbounds i8, i8* %455, i64 %470
  %472 = bitcast i8* %471 to <16 x i8>*
  %473 = load <16 x i8>, <16 x i8>* %472, align 1
  %474 = icmp eq <16 x i8> %465, %473
  %475 = bitcast <16 x i1> %474 to i16
  %476 = icmp eq i16 %475, 0
  br i1 %476, label %493, label %477

477:                                              ; preds = %467
  %478 = zext i16 %475 to i32
  %479 = load %"union.absl::container_internal::map_slot_type.81"*, %"union.absl::container_internal::map_slot_type.81"** %466, align 8
  br label %480

480:                                              ; preds = %489, %477
  %481 = phi i32 [ %478, %477 ], [ %491, %489 ]
  %482 = call i32 @llvm.cttz.i32(i32 %481, i1 false) #7, !range !3
  %483 = zext i32 %482 to i64
  %484 = add i64 %470, %483
  %485 = and i64 %484, %457
  %486 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.81", %"union.absl::container_internal::map_slot_type.81"* %479, i64 %485, i32 0, i32 0
  %487 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %486, align 8
  %488 = icmp eq %"class.sh::TVariable"* %487, %120
  br i1 %488, label %508, label %489, !prof !4

489:                                              ; preds = %480
  %490 = add i32 %481, -1
  %491 = and i32 %490, %481
  %492 = icmp eq i32 %491, 0
  br i1 %492, label %493, label %480

493:                                              ; preds = %489, %467
  %494 = icmp eq <16 x i8> %473, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %495 = bitcast <16 x i1> %494 to i16
  %496 = icmp eq i16 %495, 0
  br i1 %496, label %497, label %500, !prof !5

497:                                              ; preds = %493
  %498 = add i64 %469, 16
  %499 = add i64 %498, %470
  br label %467

500:                                              ; preds = %493
  %501 = call i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set.80"* %441, i64 %453) #7
  %502 = load %"union.absl::container_internal::map_slot_type.81"*, %"union.absl::container_internal::map_slot_type.81"** %466, align 8, !noalias !16
  %503 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.81", %"union.absl::container_internal::map_slot_type.81"* %502, i64 %501
  %504 = bitcast %"union.absl::container_internal::map_slot_type.81"* %503 to i64*
  store i64 %440, i64* %504, align 8, !noalias !16
  %505 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.81", %"union.absl::container_internal::map_slot_type.81"* %502, i64 %501, i32 0, i32 1
  store %"class.sh::TVariable"* null, %"class.sh::TVariable"** %505, align 8, !noalias !16
  %506 = load i8*, i8** %454, align 8, !noalias !16
  %507 = load %"union.absl::container_internal::map_slot_type.81"*, %"union.absl::container_internal::map_slot_type.81"** %466, align 8, !noalias !16
  br label %508

508:                                              ; preds = %480, %500
  %509 = phi %"union.absl::container_internal::map_slot_type.81"* [ %507, %500 ], [ %479, %480 ]
  %510 = phi i8* [ %506, %500 ], [ %455, %480 ]
  %511 = phi i64 [ %501, %500 ], [ %485, %480 ]
  %512 = getelementptr inbounds i8, i8* %510, i64 %511
  %513 = icmp ne i8* %512, null
  call void @llvm.assume(i1 %513) #7, !noalias !16
  %514 = load i8, i8* %512, align 1
  %515 = icmp sgt i8 %514, -1
  br i1 %515, label %517, label %516, !prof !4

516:                                              ; preds = %508
  call void @llvm.trap() #7
  unreachable

517:                                              ; preds = %508
  %518 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.81", %"union.absl::container_internal::map_slot_type.81"* %509, i64 %511, i32 0, i32 1
  %519 = bitcast %"class.sh::TVariable"** %518 to i8**
  store i8* %191, i8** %519, align 8
  br label %524

520:                                              ; preds = %139
  %521 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 2
  %522 = load i32, i32* %521, align 8
  %523 = add nsw i32 %522, 1
  store i32 %523, i32* %521, align 8
  br label %524

524:                                              ; preds = %520, %517
  %525 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 6, i32 0
  %526 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 6, i32 0, i32 0, i32 1
  %527 = bitcast i32** %526 to i64*
  %528 = load i64, i64* %527, align 8
  %529 = bitcast %"class.std::__1::vector.23"* %525 to i64*
  %530 = load i64, i64* %529, align 8
  %531 = sub i64 %528, %530
  %532 = ashr exact i64 %531, 2
  %533 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %123, i64 0, i32 10, i32 1
  %534 = load i64, i64* %533, align 8
  %535 = sub i64 %532, %534
  %536 = icmp ult i64 %532, %534
  %537 = inttoptr i64 %530 to i32*
  br i1 %536, label %538, label %540

538:                                              ; preds = %524
  %539 = sub i64 0, %534
  call void @_ZNSt3__16vectorIj14pool_allocatorIjEE8__appendEm(%"class.std::__1::vector.23"* %525, i64 %539) #7
  br label %544

540:                                              ; preds = %524
  %541 = icmp ult i64 %535, %532
  br i1 %541, label %542, label %544

542:                                              ; preds = %540
  %543 = getelementptr inbounds i32, i32* %537, i64 %535
  store i32* %543, i32** %526, align 8
  br label %544

544:                                              ; preds = %538, %540, %542
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %121)
  br label %545

545:                                              ; preds = %544, %43
  %546 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 0, i32 7
  %547 = bitcast %"class.sh::TIntermBlock"** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %547) #7
  %548 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 0, i32 11, i32 0
  %549 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 0, i32 11, i32 0, i32 0, i32 1
  %550 = bitcast %"class.sh::TIntermNode"*** %549 to i64*
  %551 = load i64, i64* %550, align 8
  %552 = bitcast %"class.std::__1::vector"* %548 to i64*
  %553 = load i64, i64* %552, align 8
  %554 = sub i64 %551, %553
  %555 = ashr exact i64 %554, 3
  %556 = icmp ult i64 %555, 2
  br i1 %556, label %563, label %557

557:                                              ; preds = %545
  %558 = inttoptr i64 %553 to %"class.sh::TIntermNode"**
  %559 = add nsw i64 %555, -2
  %560 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %558, i64 %559
  %561 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %560, align 8
  %562 = bitcast %"class.sh::TIntermNode"* %561 to %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)***
  br label %563

563:                                              ; preds = %545, %557
  %564 = phi %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*** [ %562, %557 ], [ null, %545 ]
  %565 = phi %"class.sh::TIntermNode"* [ %561, %557 ], [ null, %545 ]
  %566 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*** %564, align 8
  %567 = getelementptr inbounds %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %566, i64 8
  %568 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %567, align 8
  %569 = call %"class.sh::TIntermBlock"* %568(%"class.sh::TIntermNode"* %565) #7
  store %"class.sh::TIntermBlock"* %569, %"class.sh::TIntermBlock"** %9, align 8
  %570 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 0, i32 7, i32 0, i32 1
  %571 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %570, align 8
  %572 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 0, i32 7, i32 0, i32 2, i32 0, i32 0
  %573 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %572, align 8
  %574 = icmp ult %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %571, %573
  br i1 %574, label %575, label %595

575:                                              ; preds = %563
  %576 = icmp eq %"class.sh::TIntermBlock"* %569, null
  %577 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %569, i64 0, i32 1
  %578 = select i1 %576, %"class.sh::TIntermAggregateBase"* null, %"class.sh::TIntermAggregateBase"* %577
  %579 = bitcast %"class.sh::TIntermDeclaration"** %7 to i64*
  %580 = load i64, i64* %579, align 8
  %581 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %571, i64 0, i32 0
  store %"class.sh::TIntermAggregateBase"* %578, %"class.sh::TIntermAggregateBase"** %581, align 8
  %582 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %571, i64 0, i32 1
  %583 = bitcast %"class.sh::TIntermNode"** %582 to i64*
  store i64 %580, i64* %583, align 8
  %584 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %571, i64 0, i32 2
  %585 = bitcast %"class.sh::TVector"* %8 to <2 x i64>*
  %586 = load <2 x i64>, <2 x i64>* %585, align 16
  %587 = bitcast %"class.sh::TVector"* %584 to <2 x i64>*
  store <2 x i64> %586, <2 x i64>* %587, align 8
  %588 = bitcast %"class.sh::TIntermNode"*** %37 to i64*
  %589 = load i64, i64* %588, align 16
  %590 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %571, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %591 = bitcast %"class.sh::TIntermNode"*** %590 to i64*
  store i64 %589, i64* %591, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %34, i8 0, i64 24, i1 false) #7
  %592 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %571, i64 1
  %593 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %592 to i64
  %594 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %570 to i64*
  store i64 %593, i64* %594, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %547) #7
  br label %601

595:                                              ; preds = %563
  call void @_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJPNS1_12TIntermBlockERPNS1_18TIntermDeclarationENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_(%"class.std::__1::vector.44"* %546, %"class.sh::TIntermBlock"** nonnull dereferenceable(8) %9, %"class.sh::TIntermDeclaration"** nonnull dereferenceable(8) %7, %"class.sh::TVector"* nonnull dereferenceable(24) %8) #7
  %596 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %35, align 16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %547) #7
  %597 = icmp eq %"class.sh::TIntermNode"** %596, null
  br i1 %597, label %601, label %598

598:                                              ; preds = %595
  %599 = ptrtoint %"class.sh::TIntermNode"** %596 to i64
  %600 = bitcast %"class.sh::TIntermNode"*** %36 to i64*
  store i64 %599, i64* %600, align 8
  br label %601

601:                                              ; preds = %575, %595, %598
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %34) #7
  br label %602

602:                                              ; preds = %601, %13, %3
  %603 = phi i1 [ true, %3 ], [ false, %13 ], [ false, %601 ]
  ret i1 %603
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_134RewriteExpressionVisitBinaryHelperEPNS_9TCompilerEPNS_13TIntermBinaryERKN4absl13flat_hash_mapIPKNS_10TStructureENS0_13StructureDataENS5_18container_internal6HashEqIS9_vE4HashENSD_2EqENSt3__19allocatorINSG_4pairIKS9_SA_EEEEEERKNS6_IPKNS_9TVariableESR_NSC_ISR_vE4HashENSS_2EqENSH_INSI_IKSR_SR_EEEEEERKNS6_INSG_12basic_stringIcNSG_11char_traitsIcEENSH_IcEEEESR_NSB_10StringHashENSB_12StringHashEq2EqENSH_INSI_IKS15_SR_EEEEEE(%"class.sh::TCompiler"*, %"class.sh::TIntermBinary"*, %"class.absl::flat_hash_map"* dereferenceable(40), %"class.absl::flat_hash_map.78"* dereferenceable(40), %"class.absl::flat_hash_map.89"* dereferenceable(40)) unnamed_addr #5 {
  %6 = alloca %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", align 8
  %7 = alloca %"class.std::__1::basic_string.112", align 8
  %8 = alloca %"class.sh::TVector.131", align 8
  %9 = alloca %"class.sh::TVariable"*, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1, i64 0, i32 0, i32 1
  %11 = load i8, i8* %10, align 8
  %12 = icmp eq i8 %11, 46
  br i1 %12, label %13, label %600

13:                                               ; preds = %5
  %14 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1, i64 0, i32 2
  %15 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %14, align 8
  %16 = bitcast %"class.sh::TIntermTyped"* %15 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %17 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %16, align 8
  %18 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %17, i64 31
  %19 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %18, align 8
  %20 = tail call dereferenceable(184) %"class.sh::TType"* %19(%"class.sh::TIntermTyped"* %15) #7
  %21 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %20, i64 0, i32 13
  %22 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %21, align 8
  %23 = ptrtoint %"class.sh::TStructure"* %22 to i64
  %24 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1, i64 0, i32 0, i32 0
  %25 = bitcast %"class.sh::TIntermBinary"* %1 to %"class.sh::TType"* (%"class.sh::TIntermExpression"*)***
  %26 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %25, align 8
  %27 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %26, i64 31
  %28 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %27, align 8
  %29 = tail call dereferenceable(184) %"class.sh::TType"* %28(%"class.sh::TIntermExpression"* %24) #7
  %30 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %29, i64 0, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = add i32 %31, -8
  %33 = icmp ult i32 %32, 43
  br i1 %33, label %100, label %34

34:                                               ; preds = %13
  %35 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %36 = add i64 %35, %23
  %37 = zext i64 %36 to i128
  %38 = mul nuw i128 %37, 11376068507788127593
  %39 = lshr i128 %38, 64
  %40 = xor i128 %39, %38
  %41 = trunc i128 %40 to i64
  %42 = add i64 %41, %23
  %43 = zext i64 %42 to i128
  %44 = mul nuw i128 %43, 11376068507788127593
  %45 = lshr i128 %44, 64
  %46 = xor i128 %45, %44
  %47 = trunc i128 %46 to i64
  %48 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %2, i64 0, i32 0, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %2, i64 0, i32 0, i32 0, i32 3
  %51 = load i64, i64* %50, align 8
  %52 = lshr i64 %47, 7
  %53 = ptrtoint i8* %49 to i64
  %54 = lshr i64 %53, 12
  %55 = xor i64 %52, %54
  %56 = trunc i128 %46 to i8
  %57 = and i8 %56, 127
  %58 = insertelement <16 x i8> undef, i8 %57, i32 0
  %59 = shufflevector <16 x i8> %58, <16 x i8> undef, <16 x i32> zeroinitializer
  %60 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %2, i64 0, i32 0, i32 0, i32 1
  %61 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %60, align 8
  br label %62

62:                                               ; preds = %91, %34
  %63 = phi i64 [ %55, %34 ], [ %93, %91 ]
  %64 = phi i64 [ 0, %34 ], [ %92, %91 ]
  %65 = and i64 %63, %51
  %66 = getelementptr inbounds i8, i8* %49, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = icmp eq <16 x i8> %59, %68
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %87, label %72

72:                                               ; preds = %62
  %73 = zext i16 %70 to i32
  br label %74

74:                                               ; preds = %83, %72
  %75 = phi i32 [ %73, %72 ], [ %85, %83 ]
  %76 = tail call i32 @llvm.cttz.i32(i32 %75, i1 false) #7, !range !3
  %77 = zext i32 %76 to i64
  %78 = add i64 %65, %77
  %79 = and i64 %78, %51
  %80 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %61, i64 %79, i32 0, i32 0
  %81 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %80, align 8
  %82 = icmp eq %"class.sh::TStructure"* %81, %22
  br i1 %82, label %94, label %83, !prof !4

83:                                               ; preds = %74
  %84 = add i32 %75, -1
  %85 = and i32 %84, %75
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %74

87:                                               ; preds = %83, %62
  %88 = icmp eq <16 x i8> %68, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %89 = bitcast <16 x i1> %88 to i16
  %90 = icmp eq i16 %89, 0
  br i1 %90, label %91, label %600, !prof !5

91:                                               ; preds = %87
  %92 = add i64 %64, 16
  %93 = add i64 %92, %65
  br label %62

94:                                               ; preds = %74
  %95 = getelementptr inbounds i8, i8* %49, i64 %79
  %96 = icmp ne i8* %95, null
  tail call void @llvm.assume(i1 %96) #7
  %97 = load i8, i8* %95, align 1
  %98 = icmp sgt i8 %97, -1
  br i1 %98, label %100, label %99, !prof !4

99:                                               ; preds = %94
  tail call void @llvm.trap() #7
  unreachable

100:                                              ; preds = %13, %94
  %101 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %25, align 8
  %102 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %101, i64 31
  %103 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %102, align 8
  %104 = tail call dereferenceable(184) %"class.sh::TType"* %103(%"class.sh::TIntermExpression"* %24) #7
  %105 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %104, i64 0, i32 0
  %106 = load i32, i32* %105, align 8
  %107 = add i32 %106, -8
  %108 = icmp ult i32 %107, 43
  %109 = bitcast %"class.std::__1::basic_string.112"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %109) #7
  %110 = getelementptr inbounds %"class.std::__1::basic_string.112", %"class.std::__1::basic_string.112"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %111 = getelementptr inbounds %"class.std::__1::basic_string.112", %"class.std::__1::basic_string.112"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %109, i8 0, i64 24, i1 false) #7
  %112 = bitcast %"class.sh::TVector.131"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %112) #7
  %113 = getelementptr inbounds %"class.sh::TVector.131", %"class.sh::TVector.131"* %8, i64 0, i32 0, i32 0, i32 0
  %114 = getelementptr inbounds %"class.sh::TVector.131", %"class.sh::TVector.131"* %8, i64 0, i32 0, i32 0, i32 1
  %115 = getelementptr inbounds %"class.sh::TVector.131", %"class.sh::TVector.131"* %8, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %112, i8 0, i64 24, i1 false) #7
  %116 = bitcast %"class.sh::TIntermBinary"*** %114 to i64*
  %117 = bitcast %"class.sh::TVector.131"* %8 to i64*
  %118 = bitcast %"class.sh::TIntermBinary"*** %115 to i64*
  br label %119

119:                                              ; preds = %378, %100
  %120 = phi %"class.sh::TIntermBinary"** [ null, %100 ], [ %380, %378 ]
  %121 = phi %"class.sh::TIntermBinary"** [ null, %100 ], [ %379, %378 ]
  %122 = phi %"class.sh::TIntermBinary"* [ %1, %100 ], [ %376, %378 ]
  %123 = ptrtoint %"class.sh::TIntermBinary"* %122 to i64
  %124 = icmp eq %"class.sh::TIntermBinary"** %121, %120
  br i1 %124, label %129, label %125

125:                                              ; preds = %119
  %126 = bitcast %"class.sh::TIntermBinary"** %121 to i64*
  store i64 %123, i64* %126, align 8
  %127 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %121, i64 1
  %128 = ptrtoint %"class.sh::TIntermBinary"** %127 to i64
  store i64 %128, i64* %116, align 8
  br label %337

129:                                              ; preds = %119
  %130 = ptrtoint %"class.sh::TIntermBinary"** %120 to i64
  %131 = load i64, i64* %117, align 8
  %132 = sub i64 %130, %131
  %133 = ashr exact i64 %132, 3
  %134 = add nsw i64 %133, 1
  %135 = icmp ugt i64 %134, 2305843009213693951
  br i1 %135, label %136, label %138

136:                                              ; preds = %129
  %137 = bitcast %"class.sh::TVector.131"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %137) #17
  unreachable

138:                                              ; preds = %129
  %139 = icmp ult i64 %133, 1152921504606846975
  br i1 %139, label %140, label %145

140:                                              ; preds = %138
  %141 = ashr exact i64 %132, 2
  %142 = icmp ult i64 %141, %134
  %143 = select i1 %142, i64 %134, i64 %141
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %151, label %145

145:                                              ; preds = %140, %138
  %146 = phi i64 [ %143, %140 ], [ 2305843009213693951, %138 ]
  %147 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %148 = shl i64 %146, 3
  %149 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %147, i64 %148) #7
  %150 = bitcast i8* %149 to %"class.sh::TIntermBinary"**
  br label %151

151:                                              ; preds = %145, %140
  %152 = phi i64 [ %146, %145 ], [ 0, %140 ]
  %153 = phi %"class.sh::TIntermBinary"** [ %150, %145 ], [ null, %140 ]
  %154 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %153, i64 %133
  %155 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %153, i64 %152
  %156 = ptrtoint %"class.sh::TIntermBinary"** %155 to i64
  %157 = bitcast %"class.sh::TIntermBinary"** %154 to i64*
  store i64 %123, i64* %157, align 8
  %158 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %154, i64 1
  %159 = ptrtoint %"class.sh::TIntermBinary"** %158 to i64
  %160 = load %"class.sh::TIntermBinary"**, %"class.sh::TIntermBinary"*** %113, align 8
  %161 = ptrtoint %"class.sh::TIntermBinary"** %160 to i64
  %162 = load %"class.sh::TIntermBinary"**, %"class.sh::TIntermBinary"*** %114, align 8
  %163 = icmp eq %"class.sh::TIntermBinary"** %162, %160
  br i1 %163, label %334, label %164

164:                                              ; preds = %151
  %165 = getelementptr %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %162, i64 -1
  %166 = ptrtoint %"class.sh::TIntermBinary"** %165 to i64
  %167 = sub i64 %166, %161
  %168 = lshr i64 %167, 3
  %169 = add nuw nsw i64 %168, 1
  %170 = icmp ult i64 %169, 4
  br i1 %170, label %264, label %171

171:                                              ; preds = %164
  %172 = getelementptr %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %153, i64 -1
  %173 = getelementptr %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %162, i64 -1
  %174 = ptrtoint %"class.sh::TIntermBinary"** %173 to i64
  %175 = sub i64 %174, %161
  %176 = lshr i64 %175, 3
  %177 = sub nsw i64 %133, %176
  %178 = getelementptr %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %172, i64 %177
  %179 = getelementptr %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %162, i64 -1
  %180 = sub nsw i64 0, %176
  %181 = getelementptr %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %179, i64 %180
  %182 = icmp ult %"class.sh::TIntermBinary"** %178, %162
  %183 = icmp ult %"class.sh::TIntermBinary"** %181, %154
  %184 = and i1 %182, %183
  br i1 %184, label %264, label %185

185:                                              ; preds = %171
  %186 = and i64 %169, 4611686018427387900
  %187 = sub nsw i64 0, %186
  %188 = getelementptr %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %154, i64 %187
  %189 = sub nsw i64 0, %186
  %190 = getelementptr %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %162, i64 %189
  %191 = add nsw i64 %186, -4
  %192 = lshr exact i64 %191, 2
  %193 = add nuw nsw i64 %192, 1
  %194 = and i64 %193, 1
  %195 = icmp eq i64 %191, 0
  br i1 %195, label %240, label %196

196:                                              ; preds = %185
  %197 = sub nuw nsw i64 %193, %194
  %198 = getelementptr %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %154, i64 -1
  %199 = getelementptr %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %162, i64 -1
  %200 = getelementptr %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %154, i64 -1
  %201 = getelementptr %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %162, i64 -1
  br label %202

202:                                              ; preds = %202, %196
  %203 = phi i64 [ 0, %196 ], [ %237, %202 ]
  %204 = phi i64 [ %197, %196 ], [ %238, %202 ]
  %205 = sub i64 0, %203
  %206 = sub i64 0, %203
  %207 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %198, i64 %205
  %208 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %199, i64 %206
  %209 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %208, i64 -1
  %210 = bitcast %"class.sh::TIntermBinary"** %209 to <2 x i64>*
  %211 = load <2 x i64>, <2 x i64>* %210, align 8, !alias.scope !21
  %212 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %208, i64 -2
  %213 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %212, i64 -1
  %214 = bitcast %"class.sh::TIntermBinary"** %213 to <2 x i64>*
  %215 = load <2 x i64>, <2 x i64>* %214, align 8, !alias.scope !21
  %216 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %207, i64 -1
  %217 = bitcast %"class.sh::TIntermBinary"** %216 to <2 x i64>*
  store <2 x i64> %211, <2 x i64>* %217, align 8, !alias.scope !24, !noalias !21
  %218 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %207, i64 -2
  %219 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %218, i64 -1
  %220 = bitcast %"class.sh::TIntermBinary"** %219 to <2 x i64>*
  store <2 x i64> %215, <2 x i64>* %220, align 8, !alias.scope !24, !noalias !21
  %221 = sub nuw nsw i64 -4, %203
  %222 = sub nuw nsw i64 -4, %203
  %223 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %200, i64 %221
  %224 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %201, i64 %222
  %225 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %224, i64 -1
  %226 = bitcast %"class.sh::TIntermBinary"** %225 to <2 x i64>*
  %227 = load <2 x i64>, <2 x i64>* %226, align 8, !alias.scope !21
  %228 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %224, i64 -2
  %229 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %228, i64 -1
  %230 = bitcast %"class.sh::TIntermBinary"** %229 to <2 x i64>*
  %231 = load <2 x i64>, <2 x i64>* %230, align 8, !alias.scope !21
  %232 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %223, i64 -1
  %233 = bitcast %"class.sh::TIntermBinary"** %232 to <2 x i64>*
  store <2 x i64> %227, <2 x i64>* %233, align 8, !alias.scope !24, !noalias !21
  %234 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %223, i64 -2
  %235 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %234, i64 -1
  %236 = bitcast %"class.sh::TIntermBinary"** %235 to <2 x i64>*
  store <2 x i64> %231, <2 x i64>* %236, align 8, !alias.scope !24, !noalias !21
  %237 = add i64 %203, 8
  %238 = add i64 %204, -2
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %240, label %202, !llvm.loop !26

240:                                              ; preds = %202, %185
  %241 = phi i64 [ 0, %185 ], [ %237, %202 ]
  %242 = icmp eq i64 %194, 0
  br i1 %242, label %262, label %243

243:                                              ; preds = %240
  %244 = sub i64 0, %241
  %245 = getelementptr %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %154, i64 -1
  %246 = sub i64 0, %241
  %247 = getelementptr %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %162, i64 -1
  %248 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %245, i64 %244
  %249 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %247, i64 %246
  %250 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %249, i64 -1
  %251 = bitcast %"class.sh::TIntermBinary"** %250 to <2 x i64>*
  %252 = load <2 x i64>, <2 x i64>* %251, align 8, !alias.scope !21
  %253 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %249, i64 -2
  %254 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %253, i64 -1
  %255 = bitcast %"class.sh::TIntermBinary"** %254 to <2 x i64>*
  %256 = load <2 x i64>, <2 x i64>* %255, align 8, !alias.scope !21
  %257 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %248, i64 -1
  %258 = bitcast %"class.sh::TIntermBinary"** %257 to <2 x i64>*
  store <2 x i64> %252, <2 x i64>* %258, align 8, !alias.scope !24, !noalias !21
  %259 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %248, i64 -2
  %260 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %259, i64 -1
  %261 = bitcast %"class.sh::TIntermBinary"** %260 to <2 x i64>*
  store <2 x i64> %256, <2 x i64>* %261, align 8, !alias.scope !24, !noalias !21
  br label %262

262:                                              ; preds = %240, %243
  %263 = icmp eq i64 %169, %186
  br i1 %263, label %334, label %264

264:                                              ; preds = %262, %171, %164
  %265 = phi %"class.sh::TIntermBinary"** [ %154, %171 ], [ %154, %164 ], [ %188, %262 ]
  %266 = phi %"class.sh::TIntermBinary"** [ %162, %171 ], [ %162, %164 ], [ %190, %262 ]
  %267 = getelementptr %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %266, i64 -1
  %268 = ptrtoint %"class.sh::TIntermBinary"** %267 to i64
  %269 = sub i64 %268, %161
  %270 = lshr i64 %269, 3
  %271 = add nuw nsw i64 %270, 1
  %272 = and i64 %271, 7
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %285, label %274

274:                                              ; preds = %264, %274
  %275 = phi %"class.sh::TIntermBinary"** [ %278, %274 ], [ %265, %264 ]
  %276 = phi %"class.sh::TIntermBinary"** [ %279, %274 ], [ %266, %264 ]
  %277 = phi i64 [ %283, %274 ], [ %272, %264 ]
  %278 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %275, i64 -1
  %279 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %276, i64 -1
  %280 = bitcast %"class.sh::TIntermBinary"** %279 to i64*
  %281 = load i64, i64* %280, align 8
  %282 = bitcast %"class.sh::TIntermBinary"** %278 to i64*
  store i64 %281, i64* %282, align 8
  %283 = add i64 %277, -1
  %284 = icmp eq i64 %283, 0
  br i1 %284, label %285, label %274, !llvm.loop !27

285:                                              ; preds = %274, %264
  %286 = phi %"class.sh::TIntermBinary"** [ undef, %264 ], [ %278, %274 ]
  %287 = phi %"class.sh::TIntermBinary"** [ %265, %264 ], [ %278, %274 ]
  %288 = phi %"class.sh::TIntermBinary"** [ %266, %264 ], [ %279, %274 ]
  %289 = icmp ult i64 %269, 56
  br i1 %289, label %334, label %290

290:                                              ; preds = %285, %290
  %291 = phi %"class.sh::TIntermBinary"** [ %328, %290 ], [ %287, %285 ]
  %292 = phi %"class.sh::TIntermBinary"** [ %329, %290 ], [ %288, %285 ]
  %293 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %291, i64 -1
  %294 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %292, i64 -1
  %295 = bitcast %"class.sh::TIntermBinary"** %294 to i64*
  %296 = load i64, i64* %295, align 8
  %297 = bitcast %"class.sh::TIntermBinary"** %293 to i64*
  store i64 %296, i64* %297, align 8
  %298 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %291, i64 -2
  %299 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %292, i64 -2
  %300 = bitcast %"class.sh::TIntermBinary"** %299 to i64*
  %301 = load i64, i64* %300, align 8
  %302 = bitcast %"class.sh::TIntermBinary"** %298 to i64*
  store i64 %301, i64* %302, align 8
  %303 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %291, i64 -3
  %304 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %292, i64 -3
  %305 = bitcast %"class.sh::TIntermBinary"** %304 to i64*
  %306 = load i64, i64* %305, align 8
  %307 = bitcast %"class.sh::TIntermBinary"** %303 to i64*
  store i64 %306, i64* %307, align 8
  %308 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %291, i64 -4
  %309 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %292, i64 -4
  %310 = bitcast %"class.sh::TIntermBinary"** %309 to i64*
  %311 = load i64, i64* %310, align 8
  %312 = bitcast %"class.sh::TIntermBinary"** %308 to i64*
  store i64 %311, i64* %312, align 8
  %313 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %291, i64 -5
  %314 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %292, i64 -5
  %315 = bitcast %"class.sh::TIntermBinary"** %314 to i64*
  %316 = load i64, i64* %315, align 8
  %317 = bitcast %"class.sh::TIntermBinary"** %313 to i64*
  store i64 %316, i64* %317, align 8
  %318 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %291, i64 -6
  %319 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %292, i64 -6
  %320 = bitcast %"class.sh::TIntermBinary"** %319 to i64*
  %321 = load i64, i64* %320, align 8
  %322 = bitcast %"class.sh::TIntermBinary"** %318 to i64*
  store i64 %321, i64* %322, align 8
  %323 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %291, i64 -7
  %324 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %292, i64 -7
  %325 = bitcast %"class.sh::TIntermBinary"** %324 to i64*
  %326 = load i64, i64* %325, align 8
  %327 = bitcast %"class.sh::TIntermBinary"** %323 to i64*
  store i64 %326, i64* %327, align 8
  %328 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %291, i64 -8
  %329 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %292, i64 -8
  %330 = bitcast %"class.sh::TIntermBinary"** %329 to i64*
  %331 = load i64, i64* %330, align 8
  %332 = bitcast %"class.sh::TIntermBinary"** %328 to i64*
  store i64 %331, i64* %332, align 8
  %333 = icmp eq %"class.sh::TIntermBinary"** %329, %160
  br i1 %333, label %334, label %290, !llvm.loop !28

334:                                              ; preds = %285, %290, %262, %151
  %335 = phi %"class.sh::TIntermBinary"** [ %154, %151 ], [ %188, %262 ], [ %286, %285 ], [ %328, %290 ]
  %336 = ptrtoint %"class.sh::TIntermBinary"** %335 to i64
  store i64 %336, i64* %117, align 8
  store i64 %159, i64* %116, align 8
  store i64 %156, i64* %118, align 8
  br label %337

337:                                              ; preds = %334, %125
  %338 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %122, i64 0, i32 2
  %339 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %338, align 8
  %340 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %339, i64 0, i32 0
  %341 = bitcast %"class.sh::TIntermTyped"* %339 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %342 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %341, align 8
  %343 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %342, i64 19
  %344 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %343, align 8
  %345 = call %"class.sh::TIntermSymbol"* %344(%"class.sh::TIntermNode"* %340) #7
  br i1 %108, label %346, label %369

346:                                              ; preds = %337
  %347 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %122, i64 0, i32 0, i32 1
  %348 = load i8, i8* %347, align 8
  %349 = icmp eq i8 %348, 46
  br i1 %349, label %350, label %358

350:                                              ; preds = %346
  %351 = call dereferenceable(16) %"class.sh::ImmutableString"* @_ZNK2sh13TIntermBinary23getIndexStructFieldNameEv(%"class.sh::TIntermBinary"* %122) #7
  %352 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %351, i64 0, i32 0
  %353 = load i8*, i8** %352, align 8
  %354 = icmp eq i8* %353, null
  %355 = select i1 %354, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i64 0, i64 0), i8* %353
  %356 = call dereferenceable(24) %"class.std::__1::basic_string.112"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc(%"class.std::__1::basic_string.112"* nonnull %7, i64 0, i8* %355) #7
  %357 = call dereferenceable(24) %"class.std::__1::basic_string.112"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc(%"class.std::__1::basic_string.112"* nonnull %7, i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #7
  br label %358

358:                                              ; preds = %350, %346
  %359 = icmp eq %"class.sh::TIntermSymbol"* %345, null
  br i1 %359, label %369, label %360

360:                                              ; preds = %358
  %361 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %345, i64 0, i32 1
  %362 = bitcast %"class.sh::TVariable"** %361 to %"class.sh::TSymbol"**
  %363 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %362, align 8
  %364 = call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %363) #7
  %365 = extractvalue { i8*, i64 } %364, 0
  %366 = icmp eq i8* %365, null
  %367 = select i1 %366, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i64 0, i64 0), i8* %365
  %368 = call dereferenceable(24) %"class.std::__1::basic_string.112"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc(%"class.std::__1::basic_string.112"* nonnull %7, i64 0, i8* %367) #7
  br label %369

369:                                              ; preds = %360, %358, %337
  %370 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %338, align 8
  %371 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %370, i64 0, i32 0
  %372 = bitcast %"class.sh::TIntermTyped"* %370 to %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)***
  %373 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %372, align 8
  %374 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %373, i64 13
  %375 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %374, align 8
  %376 = call %"class.sh::TIntermBinary"* %375(%"class.sh::TIntermNode"* %371) #7
  %377 = icmp eq %"class.sh::TIntermSymbol"* %345, null
  br i1 %377, label %378, label %381

378:                                              ; preds = %369
  %379 = load %"class.sh::TIntermBinary"**, %"class.sh::TIntermBinary"*** %114, align 8
  %380 = load %"class.sh::TIntermBinary"**, %"class.sh::TIntermBinary"*** %115, align 8
  br label %119

381:                                              ; preds = %369
  br i1 %108, label %382, label %424

382:                                              ; preds = %381
  %383 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %384 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %383, i64 32) #7
  %385 = bitcast i8* %384 to %"class.sh::TIntermSymbol"*
  %386 = getelementptr inbounds %"class.absl::flat_hash_map.89", %"class.absl::flat_hash_map.89"* %4, i64 0, i32 0, i32 0
  %387 = bitcast %"class.std::__1::basic_string.112"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %388 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %387, i64 0, i32 1, i32 0
  %389 = load i8, i8* %388, align 1
  %390 = icmp slt i8 %389, 0
  br i1 %390, label %394, label %391

391:                                              ; preds = %382
  %392 = zext i8 %389 to i64
  %393 = ptrtoint %"class.std::__1::basic_string.112"* %7 to i64
  br label %400

394:                                              ; preds = %382
  %395 = bitcast %"class.std::__1::basic_string.112"* %7 to i64*
  %396 = load i64, i64* %395, align 8
  %397 = load i64, i64* %111, align 8
  %398 = icmp sgt i64 %397, -1
  br i1 %398, label %400, label %399, !prof !4

399:                                              ; preds = %394
  call void @llvm.trap() #7
  unreachable

400:                                              ; preds = %394, %391
  %401 = phi i64 [ %396, %394 ], [ %393, %391 ]
  %402 = phi i64 [ %397, %394 ], [ %392, %391 ]
  %403 = inttoptr i64 %401 to i8*
  %404 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %405 = call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %404, i8* %403, i64 %402) #7
  %406 = add i64 %405, %402
  %407 = zext i64 %406 to i128
  %408 = mul nuw i128 %407, 11376068507788127593
  %409 = lshr i128 %408, 64
  %410 = xor i128 %409, %408
  %411 = trunc i128 %410 to i64
  %412 = call { i8*, %"union.absl::container_internal::map_slot_type.92"* } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN2sh9TVariableEEENS0_10StringHashENS0_12StringHashEq2EqENS7_INS3_4pairIKS9_SD_EEEEE4findIS9_EENSM_8iteratorERKT_m(%"class.absl::container_internal::raw_hash_set.91"* %386, %"class.std::__1::basic_string.112"* nonnull dereferenceable(24) %7, i64 %411) #7
  %413 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type.92"* } %412, 0
  %414 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type.92"* } %412, 1
  %415 = icmp eq i8* %413, null
  br i1 %415, label %420, label %416

416:                                              ; preds = %400
  %417 = load i8, i8* %413, align 1
  %418 = icmp sgt i8 %417, -1
  br i1 %418, label %421, label %419, !prof !4

419:                                              ; preds = %416
  call void @llvm.trap() #7
  unreachable

420:                                              ; preds = %400
  call void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i64 0, i64 0)) #17
  unreachable

421:                                              ; preds = %416
  %422 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %414, i64 0, i32 0, i32 1
  %423 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %422, align 8
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %385, %"class.sh::TVariable"* %423) #7
  br label %436

424:                                              ; preds = %381
  %425 = bitcast %"class.sh::TVariable"** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %425) #7
  %426 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %345, i64 0, i32 1
  %427 = bitcast %"class.sh::TVariable"** %426 to i64*
  %428 = load i64, i64* %427, align 8
  %429 = bitcast %"class.sh::TVariable"** %9 to i64*
  store i64 %428, i64* %429, align 8
  %430 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %431 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %430, i64 32) #7
  %432 = bitcast i8* %431 to %"class.sh::TIntermSymbol"*
  %433 = getelementptr inbounds %"class.absl::flat_hash_map.78", %"class.absl::flat_hash_map.78"* %3, i64 0, i32 0
  %434 = call dereferenceable(8) %"class.sh::TVariable"** @_ZNK4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE2atIS6_S7_EEDTclsrT0_5valueclL_ZNSC_9addressofIKSG_EEPT_RSN_EclL_ZNSC_7declvalIRSM_EEDTclsr3std3__1E9__declvalISN_ELi0EEEvEEEEERKSN_(%"class.absl::container_internal::raw_hash_map.79"* %433, %"class.sh::TVariable"** nonnull dereferenceable(8) %9) #7
  %435 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %434, align 8
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %432, %"class.sh::TVariable"* %435) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %425) #7
  br label %436

436:                                              ; preds = %424, %421
  %437 = phi i8* [ %384, %421 ], [ %431, %424 ]
  %438 = bitcast i8* %437 to %"class.sh::TIntermTyped"*
  %439 = load %"class.sh::TIntermBinary"**, %"class.sh::TIntermBinary"*** %114, align 8
  %440 = load %"class.sh::TIntermBinary"**, %"class.sh::TIntermBinary"*** %113, align 8
  %441 = icmp eq %"class.sh::TIntermBinary"** %439, %440
  br i1 %441, label %454, label %442

442:                                              ; preds = %436
  %443 = bitcast %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %6 to i8*
  %444 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %6, i64 0, i32 0
  %445 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %6, i64 0, i32 0, i32 0
  %446 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %6, i64 0, i32 1
  %447 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %6, i64 0, i32 2
  %448 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %6, i64 0, i32 3
  %449 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %6, i64 0, i32 4
  %450 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %451 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %2, i64 0, i32 0, i32 0, i32 0
  %452 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %2, i64 0, i32 0, i32 0, i32 3
  %453 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %2, i64 0, i32 0, i32 0, i32 1
  br label %467

454:                                              ; preds = %595, %436
  %455 = phi %"class.sh::TIntermTyped"* [ %438, %436 ], [ %596, %595 ]
  %456 = phi %"class.sh::TIntermBinary"** [ %439, %436 ], [ %470, %595 ]
  %457 = icmp eq %"class.sh::TIntermBinary"** %456, null
  br i1 %457, label %460, label %458

458:                                              ; preds = %454
  %459 = ptrtoint %"class.sh::TIntermBinary"** %456 to i64
  store i64 %459, i64* %116, align 8
  br label %460

460:                                              ; preds = %458, %454
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %112) #7
  %461 = bitcast %"class.std::__1::basic_string.112"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %462 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %461, i64 0, i32 1, i32 0
  %463 = load i8, i8* %462, align 1
  %464 = icmp slt i8 %463, 0
  br i1 %464, label %465, label %599

465:                                              ; preds = %460
  %466 = load i8*, i8** %110, align 8
  call void @_ZdlPv(i8* %466) #16
  br label %599

467:                                              ; preds = %595, %442
  %468 = phi %"class.sh::TIntermTyped"* [ %438, %442 ], [ %596, %595 ]
  %469 = phi %"class.sh::TIntermBinary"** [ %439, %442 ], [ %470, %595 ]
  %470 = getelementptr inbounds %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %469, i64 -1
  %471 = load %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %470, align 8
  %472 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %471, i64 0, i32 0, i32 1
  %473 = load i8, i8* %472, align 8
  switch i8 %473, label %595 [
    i8 46, label %474
    i8 44, label %575
    i8 45, label %582
  ]

474:                                              ; preds = %467
  br i1 %108, label %595, label %475

475:                                              ; preds = %474
  %476 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %471, i64 0, i32 2
  %477 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %476, align 8
  %478 = bitcast %"class.sh::TIntermTyped"* %477 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %479 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %478, align 8
  %480 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %479, i64 31
  %481 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %480, align 8
  %482 = call dereferenceable(184) %"class.sh::TType"* %481(%"class.sh::TIntermTyped"* %477) #7
  %483 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %482, i64 0, i32 13
  %484 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %483, align 8
  %485 = ptrtoint %"class.sh::TStructure"* %484 to i64
  %486 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %471, i64 0, i32 3
  %487 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %486, align 8
  %488 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %487, i64 0, i32 0
  %489 = bitcast %"class.sh::TIntermTyped"* %487 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %490 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %489, align 8
  %491 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %490, i64 5
  %492 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %491, align 8
  %493 = call %"class.sh::TIntermConstantUnion"* %492(%"class.sh::TIntermNode"* %488) #7
  %494 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %493, i64 0, i32 1
  %495 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %494, align 8
  %496 = icmp eq %"class.sh::TConstantUnion"* %495, null
  br i1 %496, label %499, label %497

497:                                              ; preds = %475
  %498 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* nonnull %495) #7
  br label %499

499:                                              ; preds = %497, %475
  %500 = phi i32 [ %498, %497 ], [ 0, %475 ]
  %501 = add i64 %450, %485
  %502 = zext i64 %501 to i128
  %503 = mul nuw i128 %502, 11376068507788127593
  %504 = lshr i128 %503, 64
  %505 = xor i128 %504, %503
  %506 = trunc i128 %505 to i64
  %507 = add i64 %506, %485
  %508 = zext i64 %507 to i128
  %509 = mul nuw i128 %508, 11376068507788127593
  %510 = lshr i128 %509, 64
  %511 = xor i128 %510, %509
  %512 = trunc i128 %511 to i64
  %513 = load i8*, i8** %451, align 8
  %514 = load i64, i64* %452, align 8
  %515 = lshr i64 %512, 7
  %516 = ptrtoint i8* %513 to i64
  %517 = lshr i64 %516, 12
  %518 = xor i64 %517, %515
  %519 = trunc i128 %511 to i8
  %520 = and i8 %519, 127
  %521 = insertelement <16 x i8> undef, i8 %520, i32 0
  %522 = shufflevector <16 x i8> %521, <16 x i8> undef, <16 x i32> zeroinitializer
  %523 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %453, align 8
  br label %524

524:                                              ; preds = %553, %499
  %525 = phi i64 [ %518, %499 ], [ %555, %553 ]
  %526 = phi i64 [ 0, %499 ], [ %554, %553 ]
  %527 = and i64 %525, %514
  %528 = getelementptr inbounds i8, i8* %513, i64 %527
  %529 = bitcast i8* %528 to <16 x i8>*
  %530 = load <16 x i8>, <16 x i8>* %529, align 1
  %531 = icmp eq <16 x i8> %522, %530
  %532 = bitcast <16 x i1> %531 to i16
  %533 = icmp eq i16 %532, 0
  br i1 %533, label %549, label %534

534:                                              ; preds = %524
  %535 = zext i16 %532 to i32
  br label %536

536:                                              ; preds = %545, %534
  %537 = phi i32 [ %535, %534 ], [ %547, %545 ]
  %538 = call i32 @llvm.cttz.i32(i32 %537, i1 false) #7, !range !3
  %539 = zext i32 %538 to i64
  %540 = add i64 %527, %539
  %541 = and i64 %540, %514
  %542 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %523, i64 %541, i32 0, i32 0
  %543 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %542, align 8
  %544 = icmp eq %"class.sh::TStructure"* %543, %484
  br i1 %544, label %556, label %545, !prof !4

545:                                              ; preds = %536
  %546 = add i32 %537, -1
  %547 = and i32 %546, %537
  %548 = icmp eq i32 %547, 0
  br i1 %548, label %549, label %536

549:                                              ; preds = %545, %524
  %550 = icmp eq <16 x i8> %530, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %551 = bitcast <16 x i1> %550 to i16
  %552 = icmp eq i16 %551, 0
  br i1 %552, label %553, label %562, !prof !5

553:                                              ; preds = %549
  %554 = add i64 %526, 16
  %555 = add i64 %554, %527
  br label %524

556:                                              ; preds = %536
  %557 = getelementptr inbounds i8, i8* %513, i64 %541
  %558 = icmp ne i8* %557, null
  call void @llvm.assume(i1 %558) #7
  %559 = load i8, i8* %557, align 1
  %560 = icmp sgt i8 %559, -1
  br i1 %560, label %563, label %561, !prof !4

561:                                              ; preds = %556
  call void @llvm.trap() #7
  unreachable

562:                                              ; preds = %549
  call void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i64 0, i64 0)) #17
  unreachable

563:                                              ; preds = %556
  %564 = sext i32 %500 to i64
  %565 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %523, i64 %541, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %566 = load i32*, i32** %565, align 8
  %567 = getelementptr inbounds i32, i32* %566, i64 %564
  %568 = load i32, i32* %567, align 4
  %569 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %570 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %569, i64 240) #7
  %571 = bitcast i8* %570 to %"class.sh::TIntermBinary"*
  %572 = call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32 %568) #7
  %573 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %572, i64 0, i32 0, i32 0
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %571, i8 zeroext 46, %"class.sh::TIntermTyped"* %468, %"class.sh::TIntermTyped"* %573) #7
  %574 = bitcast i8* %570 to %"class.sh::TIntermTyped"*
  br label %595

575:                                              ; preds = %467
  %576 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %577 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %576, i64 240) #7
  %578 = bitcast i8* %577 to %"class.sh::TIntermBinary"*
  %579 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %471, i64 0, i32 3
  %580 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %579, align 8
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %578, i8 zeroext 44, %"class.sh::TIntermTyped"* %468, %"class.sh::TIntermTyped"* %580) #7
  %581 = bitcast i8* %577 to %"class.sh::TIntermTyped"*
  br label %595

582:                                              ; preds = %467
  %583 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %471, i64 0, i32 3
  %584 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %583, align 8
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %443) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %443, i8 -86, i64 184, i1 false) #7
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %444, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* null) #7
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_126RewriteExpressionTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %445, align 8
  store %"class.sh::TCompiler"* %0, %"class.sh::TCompiler"** %446, align 8
  store %"class.absl::flat_hash_map"* %2, %"class.absl::flat_hash_map"** %447, align 8
  store %"class.absl::flat_hash_map.78"* %3, %"class.absl::flat_hash_map.78"** %448, align 8
  store %"class.absl::flat_hash_map.89"* %4, %"class.absl::flat_hash_map.89"** %449, align 8
  %585 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %584, i64 0, i32 0
  %586 = bitcast %"class.sh::TIntermTyped"* %584 to void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)***
  %587 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)**, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*** %586, align 8
  %588 = getelementptr inbounds void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %587, i64 2
  %589 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %588, align 8
  call void %589(%"class.sh::TIntermNode"* %585, %"class.sh::TIntermTraverser"* nonnull %444) #7
  %590 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %444, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %585) #7
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %444) #7
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %443) #7
  %591 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %592 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %591, i64 240) #7
  %593 = bitcast i8* %592 to %"class.sh::TIntermBinary"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %593, i8 zeroext 45, %"class.sh::TIntermTyped"* %468, %"class.sh::TIntermTyped"* %584) #7
  %594 = bitcast i8* %592 to %"class.sh::TIntermTyped"*
  br label %595

595:                                              ; preds = %582, %575, %563, %474, %467
  %596 = phi %"class.sh::TIntermTyped"* [ %468, %467 ], [ %594, %582 ], [ %581, %575 ], [ %468, %474 ], [ %574, %563 ]
  %597 = load %"class.sh::TIntermBinary"**, %"class.sh::TIntermBinary"*** %113, align 8
  %598 = icmp eq %"class.sh::TIntermBinary"** %470, %597
  br i1 %598, label %454, label %467

599:                                              ; preds = %460, %465
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %109) #7
  br label %600

600:                                              ; preds = %87, %599, %5
  %601 = phi %"class.sh::TIntermTyped"* [ null, %5 ], [ %455, %599 ], [ null, %87 ]
  ret %"class.sh::TIntermTyped"* %601
}

declare void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*, i32) local_unnamed_addr #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind
declare void @llvm.assume(i1) #7

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64, i8*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = icmp ugt i64 %2, 16
  br i1 %4, label %5, label %11

5:                                                ; preds = %3
  %6 = icmp ugt i64 %2, 1024
  br i1 %6, label %7, label %9, !prof !5

7:                                                ; preds = %5
  %8 = tail call i64 @_ZN4absl13hash_internal15MixingHashState28CombineLargeContiguousImpl64EmPKhm(i64 %0, i8* %1, i64 %2) #7
  br label %75

9:                                                ; preds = %5
  %10 = tail call i64 @_ZN4absl13hash_internal15MixingHashState10WyhashImplEPKhm(i8* %1, i64 %2) #7
  br label %66

11:                                               ; preds = %3
  %12 = icmp ugt i64 %2, 8
  br i1 %12, label %13, label %29

13:                                               ; preds = %11
  %14 = bitcast i8* %1 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds i8, i8* %1, i64 %2
  %17 = getelementptr inbounds i8, i8* %16, i64 -8
  %18 = bitcast i8* %17 to i64*
  %19 = load i64, i64* %18, align 1
  %20 = shl i64 %2, 3
  %21 = sub nuw nsw i64 128, %20
  %22 = lshr i64 %19, %21
  %23 = add i64 %15, %0
  %24 = zext i64 %23 to i128
  %25 = mul nuw i128 %24, 11376068507788127593
  %26 = lshr i128 %25, 64
  %27 = xor i128 %26, %25
  %28 = trunc i128 %27 to i64
  br label %66

29:                                               ; preds = %11
  %30 = icmp ugt i64 %2, 3
  br i1 %30, label %31, label %44

31:                                               ; preds = %29
  %32 = bitcast i8* %1 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = getelementptr inbounds i8, i8* %1, i64 %2
  %35 = getelementptr inbounds i8, i8* %34, i64 -4
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 1
  %38 = zext i32 %37 to i64
  %39 = shl i64 %2, 3
  %40 = add nsw i64 %39, -32
  %41 = shl i64 %38, %40
  %42 = zext i32 %33 to i64
  %43 = or i64 %41, %42
  br label %66

44:                                               ; preds = %29
  %45 = icmp eq i64 %2, 0
  br i1 %45, label %75, label %46

46:                                               ; preds = %44
  %47 = load i8, i8* %1, align 1
  %48 = lshr i64 %2, 1
  %49 = getelementptr inbounds i8, i8* %1, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = add nsw i64 %2, -1
  %52 = getelementptr inbounds i8, i8* %1, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %47 to i32
  %55 = zext i8 %50 to i32
  %56 = shl i64 %48, 3
  %57 = trunc i64 %56 to i32
  %58 = shl i32 %55, %57
  %59 = or i32 %58, %54
  %60 = zext i8 %53 to i32
  %61 = trunc i64 %51 to i32
  %62 = shl i32 %61, 3
  %63 = shl i32 %60, %62
  %64 = or i32 %59, %63
  %65 = zext i32 %64 to i64
  br label %66

66:                                               ; preds = %46, %31, %13, %9
  %67 = phi i64 [ %10, %9 ], [ %22, %13 ], [ %43, %31 ], [ %65, %46 ]
  %68 = phi i64 [ %0, %9 ], [ %28, %13 ], [ %0, %31 ], [ %0, %46 ]
  %69 = add i64 %68, %67
  %70 = zext i64 %69 to i128
  %71 = mul nuw i128 %70, 11376068507788127593
  %72 = lshr i128 %71, 64
  %73 = xor i128 %72, %71
  %74 = trunc i128 %73 to i64
  br label %75

75:                                               ; preds = %7, %44, %66
  %76 = phi i64 [ %8, %7 ], [ %74, %66 ], [ %0, %44 ]
  ret i64 %76
}

declare i64 @_ZN4absl13hash_internal15MixingHashState28CombineLargeContiguousImpl64EmPKhm(i64, i8*, i64) local_unnamed_addr #2

declare i64 @_ZN4absl13hash_internal15MixingHashState10WyhashImplEPKhm(i8*, i64) local_unnamed_addr #2

declare dereferenceable(24) %"class.std::__1::basic_string.112"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc(%"class.std::__1::basic_string.112"*, i64, i8*) local_unnamed_addr #2

declare dereferenceable(16) %"class.sh::ImmutableString"* @_ZNK2sh13TIntermBinary23getIndexStructFieldNameEv(%"class.sh::TIntermBinary"*) local_unnamed_addr #2

declare { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"*) local_unnamed_addr #2

declare void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"*, %"class.sh::TVariable"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.sh::TVariable"** @_ZNK4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE2atIS6_S7_EEDTclsrT0_5valueclL_ZNSC_9addressofIKSG_EEPT_RSN_EclL_ZNSC_7declvalIRSM_EEDTclsr3std3__1E9__declvalISN_ELi0EEEvEEEEERKSN_(%"class.absl::container_internal::raw_hash_map.79"*, %"class.sh::TVariable"** dereferenceable(8)) local_unnamed_addr #5 comdat align 2 {
  %3 = bitcast %"class.sh::TVariable"** %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %6 = add i64 %5, %4
  %7 = zext i64 %6 to i128
  %8 = mul nuw i128 %7, 11376068507788127593
  %9 = lshr i128 %8, 64
  %10 = xor i128 %9, %8
  %11 = trunc i128 %10 to i64
  %12 = add i64 %4, %11
  %13 = zext i64 %12 to i128
  %14 = mul nuw i128 %13, 11376068507788127593
  %15 = lshr i128 %14, 64
  %16 = xor i128 %15, %14
  %17 = trunc i128 %16 to i64
  %18 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map.79", %"class.absl::container_internal::raw_hash_map.79"* %0, i64 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map.79", %"class.absl::container_internal::raw_hash_map.79"* %0, i64 0, i32 0, i32 3
  %21 = load i64, i64* %20, align 8
  %22 = lshr i64 %17, 7
  %23 = ptrtoint i8* %19 to i64
  %24 = lshr i64 %23, 12
  %25 = xor i64 %22, %24
  %26 = trunc i128 %16 to i8
  %27 = and i8 %26, 127
  %28 = insertelement <16 x i8> undef, i8 %27, i32 0
  %29 = shufflevector <16 x i8> %28, <16 x i8> undef, <16 x i32> zeroinitializer
  %30 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map.79", %"class.absl::container_internal::raw_hash_map.79"* %0, i64 0, i32 0, i32 1
  %31 = inttoptr i64 %4 to %"class.sh::TVariable"*
  br label %32

32:                                               ; preds = %62, %2
  %33 = phi i64 [ %25, %2 ], [ %64, %62 ]
  %34 = phi i64 [ 0, %2 ], [ %63, %62 ]
  %35 = and i64 %33, %21
  %36 = getelementptr inbounds i8, i8* %19, i64 %35
  %37 = bitcast i8* %36 to <16 x i8>*
  %38 = load <16 x i8>, <16 x i8>* %37, align 1
  %39 = icmp eq <16 x i8> %29, %38
  %40 = bitcast <16 x i1> %39 to i16
  %41 = icmp eq i16 %40, 0
  br i1 %41, label %58, label %42

42:                                               ; preds = %32
  %43 = zext i16 %40 to i32
  %44 = load %"union.absl::container_internal::map_slot_type.81"*, %"union.absl::container_internal::map_slot_type.81"** %30, align 8
  br label %45

45:                                               ; preds = %54, %42
  %46 = phi i32 [ %43, %42 ], [ %56, %54 ]
  %47 = tail call i32 @llvm.cttz.i32(i32 %46, i1 false) #7, !range !3
  %48 = zext i32 %47 to i64
  %49 = add i64 %35, %48
  %50 = and i64 %49, %21
  %51 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.81", %"union.absl::container_internal::map_slot_type.81"* %44, i64 %50, i32 0, i32 0
  %52 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %51, align 8
  %53 = icmp eq %"class.sh::TVariable"* %52, %31
  br i1 %53, label %65, label %54, !prof !4

54:                                               ; preds = %45
  %55 = add i32 %46, -1
  %56 = and i32 %55, %46
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %45

58:                                               ; preds = %54, %32
  %59 = icmp eq <16 x i8> %38, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %60 = bitcast <16 x i1> %59 to i16
  %61 = icmp eq i16 %60, 0
  br i1 %61, label %62, label %71, !prof !5

62:                                               ; preds = %58
  %63 = add i64 %34, 16
  %64 = add i64 %63, %35
  br label %32

65:                                               ; preds = %45
  %66 = getelementptr inbounds i8, i8* %19, i64 %50
  %67 = icmp ne i8* %66, null
  tail call void @llvm.assume(i1 %67) #7
  %68 = load i8, i8* %66, align 1
  %69 = icmp sgt i8 %68, -1
  br i1 %69, label %72, label %70, !prof !4

70:                                               ; preds = %65
  tail call void @llvm.trap() #7
  unreachable

71:                                               ; preds = %58
  tail call void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i64 0, i64 0)) #17
  unreachable

72:                                               ; preds = %65
  %73 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.81", %"union.absl::container_internal::map_slot_type.81"* %44, i64 %50, i32 0, i32 1
  ret %"class.sh::TVariable"** %73
}

declare %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32) local_unnamed_addr #2

declare void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #9

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8*) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, %"union.absl::container_internal::map_slot_type.92"* } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN2sh9TVariableEEENS0_10StringHashENS0_12StringHashEq2EqENS7_INS3_4pairIKS9_SD_EEEEE4findIS9_EENSM_8iteratorERKT_m(%"class.absl::container_internal::raw_hash_set.91"*, %"class.std::__1::basic_string.112"* dereferenceable(24), i64) local_unnamed_addr #5 comdat align 2 {
  %4 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.91", %"class.absl::container_internal::raw_hash_set.91"* %0, i64 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.91", %"class.absl::container_internal::raw_hash_set.91"* %0, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = lshr i64 %2, 7
  %9 = ptrtoint i8* %5 to i64
  %10 = lshr i64 %9, 12
  %11 = xor i64 %10, %8
  %12 = trunc i64 %2 to i8
  %13 = and i8 %12, 127
  %14 = insertelement <16 x i8> undef, i8 %13, i32 0
  %15 = shufflevector <16 x i8> %14, <16 x i8> undef, <16 x i32> zeroinitializer
  %16 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.91", %"class.absl::container_internal::raw_hash_set.91"* %0, i64 0, i32 1
  %17 = bitcast %"class.std::__1::basic_string.112"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %17, i64 0, i32 1, i32 0
  %19 = load i8, i8* %18, align 1
  %20 = icmp sgt i8 %19, -1
  %21 = zext i8 %19 to i64
  %22 = ptrtoint %"class.std::__1::basic_string.112"* %1 to i64
  %23 = bitcast %"class.std::__1::basic_string.112"* %1 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"class.std::__1::basic_string.112", %"class.std::__1::basic_string.112"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = icmp sgt i64 %26, -1
  %28 = or i1 %20, %27
  %29 = select i1 %20, i64 %21, i64 %26
  %30 = select i1 %20, i64 %22, i64 %24
  %31 = inttoptr i64 %30 to i8*
  br label %32

32:                                               ; preds = %89, %3
  %33 = phi i64 [ %11, %3 ], [ %91, %89 ]
  %34 = phi i64 [ 0, %3 ], [ %90, %89 ]
  %35 = and i64 %33, %7
  %36 = getelementptr inbounds i8, i8* %5, i64 %35
  %37 = bitcast i8* %36 to <16 x i8>*
  %38 = load <16 x i8>, <16 x i8>* %37, align 1
  %39 = icmp eq <16 x i8> %15, %38
  %40 = bitcast <16 x i1> %39 to i16
  %41 = icmp eq i16 %40, 0
  br i1 %41, label %85, label %42

42:                                               ; preds = %32
  %43 = zext i16 %40 to i32
  %44 = load %"union.absl::container_internal::map_slot_type.92"*, %"union.absl::container_internal::map_slot_type.92"** %16, align 8
  br label %45

45:                                               ; preds = %42, %78
  %46 = phi i32 [ %43, %42 ], [ %80, %78 ]
  %47 = tail call i32 @llvm.cttz.i32(i32 %46, i1 false) #7, !range !3
  %48 = zext i32 %47 to i64
  %49 = add i64 %35, %48
  %50 = and i64 %49, %7
  %51 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %44, i64 %50
  %52 = bitcast %"union.absl::container_internal::map_slot_type.92"* %51 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %53 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %52, i64 0, i32 1, i32 0
  %54 = load i8, i8* %53, align 1
  %55 = icmp slt i8 %54, 0
  br i1 %55, label %59, label %56

56:                                               ; preds = %45
  %57 = zext i8 %54 to i64
  %58 = ptrtoint %"union.absl::container_internal::map_slot_type.92"* %51 to i64
  br label %66

59:                                               ; preds = %45
  %60 = bitcast %"union.absl::container_internal::map_slot_type.92"* %51 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %44, i64 %50, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %63 = load i64, i64* %62, align 8
  %64 = icmp sgt i64 %63, -1
  br i1 %64, label %66, label %65, !prof !4

65:                                               ; preds = %59
  tail call void @llvm.trap() #7
  unreachable

66:                                               ; preds = %59, %56
  %67 = phi i64 [ %61, %59 ], [ %58, %56 ]
  %68 = phi i64 [ %63, %59 ], [ %57, %56 ]
  br i1 %28, label %70, label %69, !prof !29

69:                                               ; preds = %66
  tail call void @llvm.trap() #7
  unreachable

70:                                               ; preds = %66
  %71 = inttoptr i64 %67 to i8*
  %72 = icmp eq i64 %68, %29
  br i1 %72, label %73, label %78, !prof !30

73:                                               ; preds = %70
  %74 = icmp eq i64 %68, 0
  br i1 %74, label %82, label %75

75:                                               ; preds = %73
  %76 = tail call i32 @bcmp(i8* %71, i8* %31, i64 %68) #7
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %82, label %78, !prof !4

78:                                               ; preds = %70, %75
  %79 = add i32 %46, -1
  %80 = and i32 %79, %46
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %85, label %45

82:                                               ; preds = %73, %75
  %83 = getelementptr inbounds i8, i8* %5, i64 %50
  %84 = icmp ne i8* %83, null
  tail call void @llvm.assume(i1 %84) #7
  br label %92

85:                                               ; preds = %78, %32
  %86 = icmp eq <16 x i8> %38, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %87 = bitcast <16 x i1> %86 to i16
  %88 = icmp eq i16 %87, 0
  br i1 %88, label %89, label %92, !prof !5

89:                                               ; preds = %85
  %90 = add i64 %34, 16
  %91 = add i64 %90, %35
  br label %32

92:                                               ; preds = %85, %82
  %93 = phi %"union.absl::container_internal::map_slot_type.92"* [ %51, %82 ], [ undef, %85 ]
  %94 = phi i8* [ %83, %82 ], [ null, %85 ]
  %95 = insertvalue { i8*, %"union.absl::container_internal::map_slot_type.92"* } undef, i8* %94, 0
  %96 = insertvalue { i8*, %"union.absl::container_internal::map_slot_type.92"* } %95, %"union.absl::container_internal::map_slot_type.92"* %93, 1
  ret { i8*, %"union.absl::container_internal::map_slot_type.92"* } %96
}

declare i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #10

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_126RewriteExpressionTraverserD0Ev(%"class.sh::(anonymous namespace)::RewriteExpressionTraverser"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %2) #7
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_126RewriteExpressionTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* nocapture, %"class.sh::TIntermSymbol"* nocapture) unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_126RewriteExpressionTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::(anonymous namespace)::RewriteExpressionTraverser"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %0, i64 0, i32 1
  %5 = load %"class.sh::TCompiler"*, %"class.sh::TCompiler"** %4, align 8
  %6 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %0, i64 0, i32 2
  %7 = load %"class.absl::flat_hash_map"*, %"class.absl::flat_hash_map"** %6, align 8
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %0, i64 0, i32 3
  %9 = load %"class.absl::flat_hash_map.78"*, %"class.absl::flat_hash_map.78"** %8, align 8
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %0, i64 0, i32 4
  %11 = load %"class.absl::flat_hash_map.89"*, %"class.absl::flat_hash_map.89"** %10, align 8
  %12 = tail call fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_134RewriteExpressionVisitBinaryHelperEPNS_9TCompilerEPNS_13TIntermBinaryERKN4absl13flat_hash_mapIPKNS_10TStructureENS0_13StructureDataENS5_18container_internal6HashEqIS9_vE4HashENSD_2EqENSt3__19allocatorINSG_4pairIKS9_SA_EEEEEERKNS6_IPKNS_9TVariableESR_NSC_ISR_vE4HashENSS_2EqENSH_INSI_IKSR_SR_EEEEEERKNS6_INSG_12basic_stringIcNSG_11char_traitsIcEENSH_IcEEEESR_NSB_10StringHashENSB_12StringHashEq2EqENSH_INSI_IKS15_SR_EEEEEE(%"class.sh::TCompiler"* %5, %"class.sh::TIntermBinary"* %2, %"class.absl::flat_hash_map"* dereferenceable(40) %7, %"class.absl::flat_hash_map.78"* dereferenceable(40) %9, %"class.absl::flat_hash_map.89"* dereferenceable(40) %11)
  %13 = icmp eq %"class.sh::TIntermTyped"* %12, null
  br i1 %13, label %17, label %14

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %0, i64 0, i32 0
  %16 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %12, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %15, %"class.sh::TIntermNode"* %16, i32 1) #7
  br label %17

17:                                               ; preds = %3, %14
  %18 = phi i1 [ false, %14 ], [ true, %3 ]
  ret i1 %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #11

declare zeroext i1 @_ZNK2sh5TType29isStructureContainingSamplersEv(%"class.sh::TType"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2sh12_GLOBAL__N_130RewriteStructSamplersTraverser28stripStructSpecifierSamplersEPKNS_10TStructureEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"*, %"class.sh::TStructure"*, %"class.sh::TVector"*) unnamed_addr #5 align 2 {
  %4 = alloca %"class.sh::TStructure"*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %"class.sh::TStructure"*, align 8
  %7 = alloca %"class.sh::ImmutableString", align 8
  store %"class.sh::TStructure"* %1, %"class.sh::TStructure"** %4, align 8
  %8 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %9 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %8, i64 24) #7
  %10 = bitcast i8* %9 to %"class.sh::TVector.30"*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #7
  %11 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 3, i32 0
  %12 = call fastcc dereferenceable(32) %"struct.sh::(anonymous namespace)::StructureData"* @_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh10TStructureENS3_12_GLOBAL__N_113StructureDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEEixIS6_S9_EEDTclsrT0_5valueclL_ZNSE_9addressofISI_EEPT_RSO_EclL_ZNSE_7declvalIRSI_EEDTclsr3std3__1E9__declvalISO_ELi0EEEvEEEEERKSO_(%"class.absl::container_internal::raw_hash_map"* %11, %"class.sh::TStructure"** nonnull dereferenceable(8) %4)
  %13 = getelementptr inbounds %"struct.sh::(anonymous namespace)::StructureData", %"struct.sh::(anonymous namespace)::StructureData"* %12, i64 0, i32 0
  store %"class.sh::TStructure"* null, %"class.sh::TStructure"** %13, align 8
  %14 = getelementptr inbounds %"struct.sh::(anonymous namespace)::StructureData", %"struct.sh::(anonymous namespace)::StructureData"* %12, i64 0, i32 1, i32 0
  %15 = bitcast %"class.sh::TStructure"** %4 to i8**
  %16 = bitcast %"class.sh::TStructure"* %1 to i8*
  %17 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %1, i64 0, i32 2, i32 0
  %18 = load %"class.sh::TVector.30"*, %"class.sh::TVector.30"** %17, align 8
  %19 = getelementptr inbounds %"class.sh::TVector.30", %"class.sh::TVector.30"* %18, i64 0, i32 0, i32 0, i32 1
  %20 = bitcast %"class.sh::TField"*** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.sh::TVector.30"* %18 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = sub i64 %21, %23
  %25 = ashr exact i64 %24, 3
  %26 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %26) #7
  store i32 2147483647, i32* %5, align 4
  %27 = getelementptr inbounds %"struct.sh::(anonymous namespace)::StructureData", %"struct.sh::(anonymous namespace)::StructureData"* %12, i64 0, i32 1, i32 0, i32 0, i32 1
  %28 = bitcast i32** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast %"class.std::__1::vector.101"* %14 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %29, %31
  %33 = ashr exact i64 %32, 2
  %34 = icmp ugt i64 %25, %33
  %35 = inttoptr i64 %31 to i32*
  %36 = bitcast %"class.sh::TStructure"* %1 to %"class.sh::TSymbol"*
  br i1 %34, label %37, label %39

37:                                               ; preds = %3
  %38 = sub nsw i64 %25, %33
  call void @_ZNSt3__16vectorIi14pool_allocatorIiEE8__appendEmRKi(%"class.std::__1::vector.101"* %14, i64 %38, i32* nonnull dereferenceable(4) %5) #7
  br label %43

39:                                               ; preds = %3
  %40 = icmp ult i64 %25, %33
  br i1 %40, label %41, label %43

41:                                               ; preds = %39
  %42 = getelementptr inbounds i32, i32* %35, i64 %25
  store i32* %42, i32** %27, align 8
  br label %43

43:                                               ; preds = %37, %39, %41
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %26) #7
  %44 = load %"class.sh::TVector.30"*, %"class.sh::TVector.30"** %17, align 8
  %45 = getelementptr inbounds %"class.sh::TVector.30", %"class.sh::TVector.30"* %44, i64 0, i32 0, i32 0, i32 1
  %46 = bitcast %"class.sh::TField"*** %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = bitcast %"class.sh::TVector.30"* %44 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = icmp eq i64 %47, %49
  br i1 %50, label %51, label %53

51:                                               ; preds = %43
  %52 = bitcast i8* %9 to %"class.sh::TField"***
  br label %69

53:                                               ; preds = %43
  %54 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %55 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %56 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 3, i32 0, i32 0, i32 3
  %57 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %58 = bitcast %"class.sh::TStructure"** %6 to i8*
  %59 = bitcast %"class.sh::TStructure"** %6 to i64*
  %60 = getelementptr inbounds i8, i8* %9, i64 8
  %61 = bitcast i8* %60 to %"class.sh::TField"***
  %62 = bitcast i8* %60 to i64*
  %63 = bitcast i8* %9 to i64*
  %64 = getelementptr inbounds %"class.std::__1::vector.101", %"class.std::__1::vector.101"* %14, i64 0, i32 0, i32 0
  %65 = getelementptr inbounds i8, i8* %9, i64 16
  %66 = bitcast i8* %65 to %"class.sh::TField"***
  %67 = bitcast i8* %65 to i64*
  %68 = bitcast i8* %9 to %"class.sh::TField"***
  br label %77

69:                                               ; preds = %430, %51
  %70 = phi %"class.sh::TField"*** [ %52, %51 ], [ %68, %430 ]
  %71 = phi %"class.sh::TSymbol"* [ %36, %51 ], [ %432, %430 ]
  %72 = load %"class.sh::TField"**, %"class.sh::TField"*** %70, align 8
  %73 = getelementptr inbounds i8, i8* %9, i64 8
  %74 = bitcast i8* %73 to %"class.sh::TField"***
  %75 = load %"class.sh::TField"**, %"class.sh::TField"*** %74, align 8
  %76 = icmp eq %"class.sh::TField"** %72, %75
  br i1 %76, label %706, label %446

77:                                               ; preds = %53, %430
  %78 = phi i8* [ %16, %53 ], [ %431, %430 ]
  %79 = phi %"class.sh::TSymbol"* [ %36, %53 ], [ %432, %430 ]
  %80 = phi i8* [ %16, %53 ], [ %433, %430 ]
  %81 = phi %"class.sh::TVector.30"* [ %44, %53 ], [ %437, %430 ]
  %82 = phi i64 [ 0, %53 ], [ %434, %430 ]
  %83 = getelementptr inbounds %"class.sh::TVector.30", %"class.sh::TVector.30"* %81, i64 0, i32 0, i32 0, i32 0
  %84 = load %"class.sh::TField"**, %"class.sh::TField"*** %83, align 8
  %85 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %84, i64 %82
  %86 = load %"class.sh::TField"*, %"class.sh::TField"** %85, align 8
  %87 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %86, i64 0, i32 0
  %88 = load %"class.sh::TType"*, %"class.sh::TType"** %87, align 8
  %89 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %88, i64 0, i32 0
  %90 = load i32, i32* %89, align 8
  %91 = add i32 %90, -8
  %92 = icmp ult i32 %91, 43
  br i1 %92, label %430, label %93

93:                                               ; preds = %77
  %94 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %88, i64 0, i32 13
  %95 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %94, align 8
  %96 = ptrtoint %"class.sh::TStructure"* %95 to i64
  %97 = icmp eq %"class.sh::TStructure"* %95, null
  br i1 %97, label %164, label %98

98:                                               ; preds = %93
  %99 = add i64 %54, %96
  %100 = zext i64 %99 to i128
  %101 = mul nuw i128 %100, 11376068507788127593
  %102 = lshr i128 %101, 64
  %103 = xor i128 %102, %101
  %104 = trunc i128 %103 to i64
  %105 = add i64 %104, %96
  %106 = zext i64 %105 to i128
  %107 = mul nuw i128 %106, 11376068507788127593
  %108 = lshr i128 %107, 64
  %109 = xor i128 %108, %107
  %110 = trunc i128 %109 to i64
  %111 = load i8*, i8** %55, align 8
  %112 = load i64, i64* %56, align 8
  %113 = lshr i64 %110, 7
  %114 = ptrtoint i8* %111 to i64
  %115 = lshr i64 %114, 12
  %116 = xor i64 %113, %115
  %117 = trunc i128 %109 to i8
  %118 = and i8 %117, 127
  %119 = insertelement <16 x i8> undef, i8 %118, i32 0
  %120 = shufflevector <16 x i8> %119, <16 x i8> undef, <16 x i32> zeroinitializer
  br label %121

121:                                              ; preds = %151, %98
  %122 = phi i64 [ %116, %98 ], [ %153, %151 ]
  %123 = phi i64 [ 0, %98 ], [ %152, %151 ]
  %124 = and i64 %122, %112
  %125 = getelementptr inbounds i8, i8* %111, i64 %124
  %126 = bitcast i8* %125 to <16 x i8>*
  %127 = load <16 x i8>, <16 x i8>* %126, align 1
  %128 = icmp eq <16 x i8> %120, %127
  %129 = bitcast <16 x i1> %128 to i16
  %130 = icmp eq i16 %129, 0
  br i1 %130, label %147, label %131

131:                                              ; preds = %121
  %132 = zext i16 %129 to i32
  %133 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %57, align 8
  br label %134

134:                                              ; preds = %143, %131
  %135 = phi i32 [ %132, %131 ], [ %145, %143 ]
  %136 = call i32 @llvm.cttz.i32(i32 %135, i1 false) #7, !range !3
  %137 = zext i32 %136 to i64
  %138 = add i64 %124, %137
  %139 = and i64 %138, %112
  %140 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %133, i64 %139, i32 0, i32 0
  %141 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %140, align 8
  %142 = icmp eq %"class.sh::TStructure"* %141, %95
  br i1 %142, label %154, label %143, !prof !4

143:                                              ; preds = %134
  %144 = add i32 %135, -1
  %145 = and i32 %144, %135
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %134

147:                                              ; preds = %143, %121
  %148 = icmp eq <16 x i8> %127, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %149 = bitcast <16 x i1> %148 to i16
  %150 = icmp eq i16 %149, 0
  br i1 %150, label %151, label %164, !prof !5

151:                                              ; preds = %147
  %152 = add i64 %123, 16
  %153 = add i64 %152, %124
  br label %121

154:                                              ; preds = %134
  %155 = getelementptr inbounds i8, i8* %111, i64 %139
  %156 = icmp ne i8* %155, null
  call void @llvm.assume(i1 %156) #7
  %157 = load i8, i8* %155, align 1
  %158 = icmp sgt i8 %157, -1
  br i1 %158, label %160, label %159, !prof !4

159:                                              ; preds = %154
  call void @llvm.trap() #7
  unreachable

160:                                              ; preds = %154
  %161 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %133, i64 %139, i32 0, i32 1, i32 0
  %162 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %161, align 8
  %163 = icmp eq %"class.sh::TStructure"* %162, null
  br i1 %163, label %430, label %164

164:                                              ; preds = %147, %93, %160
  %165 = call zeroext i1 @_ZNK2sh5TType29isStructureContainingSamplersEv(%"class.sh::TType"* %88) #7
  br i1 %165, label %166, label %181

166:                                              ; preds = %164
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %58) #7
  %167 = bitcast %"class.sh::TStructure"** %94 to i64*
  %168 = load i64, i64* %167, align 8
  store i64 %168, i64* %59, align 8
  %169 = call fastcc dereferenceable(32) %"struct.sh::(anonymous namespace)::StructureData"* @_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh10TStructureENS3_12_GLOBAL__N_113StructureDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEEixIS6_S9_EEDTclsrT0_5valueclL_ZNSE_9addressofISI_EEPT_RSO_EclL_ZNSE_7declvalIRSI_EEDTclsr3std3__1E9__declvalISO_ELi0EEEvEEEEERKSO_(%"class.absl::container_internal::raw_hash_map"* %11, %"class.sh::TStructure"** nonnull dereferenceable(8) %6)
  %170 = getelementptr inbounds %"struct.sh::(anonymous namespace)::StructureData", %"struct.sh::(anonymous namespace)::StructureData"* %169, i64 0, i32 0
  %171 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %170, align 8
  %172 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %173 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %172, i64 184) #7
  %174 = bitcast i8* %173 to %"class.sh::TType"*
  call void @_ZN2sh5TTypeC1EPKNS_10TStructureEb(%"class.sh::TType"* %174, %"class.sh::TStructure"* %171, i1 zeroext true) #7
  %175 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %88, i64 0, i32 10, i32 1
  %176 = load i64, i64* %175, align 8
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %180, label %178

178:                                              ; preds = %166
  %179 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %88, i64 0, i32 10
  call void @_ZN2sh5TType10makeArraysERKNS_5TSpanIKjEE(%"class.sh::TType"* %174, %"class.sh::TSpan"* dereferenceable(16) %179) #7
  br label %180

180:                                              ; preds = %166, %178
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %58) #7
  br label %185

181:                                              ; preds = %164
  %182 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %183 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %182, i64 184) #7
  %184 = bitcast i8* %183 to %"class.sh::TType"*
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %184, %"class.sh::TType"* dereferenceable(184) %88) #7
  br label %185

185:                                              ; preds = %181, %180
  %186 = phi %"class.sh::TType"* [ %174, %180 ], [ %184, %181 ]
  %187 = load i64, i64* %62, align 8
  %188 = load i64, i64* %63, align 8
  %189 = sub i64 %187, %188
  %190 = lshr exact i64 %189, 3
  %191 = trunc i64 %190 to i32
  %192 = load i32*, i32** %64, align 8
  %193 = getelementptr inbounds i32, i32* %192, i64 %82
  store i32 %191, i32* %193, align 4
  %194 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %195 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %194, i64 48) #7
  %196 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %86, i64 0, i32 1
  %197 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %86, i64 0, i32 2
  %198 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %86, i64 0, i32 3
  %199 = load i8, i8* %198, align 8
  %200 = bitcast i8* %195 to %"class.sh::TType"**
  store %"class.sh::TType"* %186, %"class.sh::TType"** %200, align 8
  %201 = getelementptr inbounds i8, i8* %195, i64 8
  %202 = bitcast %"class.sh::ImmutableString"* %196 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %201, i8* align 8 %202, i64 16, i1 false) #7
  %203 = getelementptr inbounds i8, i8* %195, i64 24
  %204 = bitcast %"struct.sh::TSourceLoc"* %197 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %203, i8* align 4 %204, i64 16, i1 false) #7
  %205 = getelementptr inbounds i8, i8* %195, i64 40
  store i8 %199, i8* %205, align 8
  %206 = ptrtoint i8* %195 to i64
  %207 = load %"class.sh::TField"**, %"class.sh::TField"*** %61, align 8
  %208 = load %"class.sh::TField"**, %"class.sh::TField"*** %66, align 8
  %209 = icmp eq %"class.sh::TField"** %207, %208
  %210 = ptrtoint %"class.sh::TField"** %208 to i64
  br i1 %209, label %215, label %211

211:                                              ; preds = %185
  %212 = bitcast %"class.sh::TField"** %207 to i64*
  store i64 %206, i64* %212, align 8
  %213 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %207, i64 1
  %214 = ptrtoint %"class.sh::TField"** %213 to i64
  store i64 %214, i64* %62, align 8
  br label %430

215:                                              ; preds = %185
  %216 = ptrtoint %"class.sh::TField"** %207 to i64
  %217 = load i64, i64* %63, align 8
  %218 = sub i64 %216, %217
  %219 = ashr exact i64 %218, 3
  %220 = add nsw i64 %219, 1
  %221 = icmp ugt i64 %220, 2305843009213693951
  br i1 %221, label %222, label %224

222:                                              ; preds = %215
  %223 = bitcast i8* %9 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %223) #17
  unreachable

224:                                              ; preds = %215
  %225 = sub i64 %210, %217
  %226 = ashr exact i64 %225, 3
  %227 = icmp ult i64 %226, 1152921504606846975
  br i1 %227, label %228, label %233

228:                                              ; preds = %224
  %229 = ashr exact i64 %225, 2
  %230 = icmp ult i64 %229, %220
  %231 = select i1 %230, i64 %220, i64 %229
  %232 = icmp eq i64 %231, 0
  br i1 %232, label %239, label %233

233:                                              ; preds = %228, %224
  %234 = phi i64 [ %231, %228 ], [ 2305843009213693951, %224 ]
  %235 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %236 = shl i64 %234, 3
  %237 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %235, i64 %236) #7
  %238 = bitcast i8* %237 to %"class.sh::TField"**
  br label %239

239:                                              ; preds = %233, %228
  %240 = phi i64 [ %234, %233 ], [ 0, %228 ]
  %241 = phi %"class.sh::TField"** [ %238, %233 ], [ null, %228 ]
  %242 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %241, i64 %219
  %243 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %241, i64 %240
  %244 = ptrtoint %"class.sh::TField"** %243 to i64
  %245 = bitcast %"class.sh::TField"** %242 to i64*
  store i64 %206, i64* %245, align 8
  %246 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %242, i64 1
  %247 = ptrtoint %"class.sh::TField"** %246 to i64
  %248 = load %"class.sh::TField"**, %"class.sh::TField"*** %68, align 8
  %249 = ptrtoint %"class.sh::TField"** %248 to i64
  %250 = load %"class.sh::TField"**, %"class.sh::TField"*** %61, align 8
  %251 = icmp eq %"class.sh::TField"** %250, %248
  br i1 %251, label %425, label %252

252:                                              ; preds = %239
  %253 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %250, i64 -1
  %254 = ptrtoint %"class.sh::TField"** %253 to i64
  %255 = sub i64 %254, %249
  %256 = lshr i64 %255, 3
  %257 = add nuw nsw i64 %256, 1
  %258 = icmp ult i64 %257, 4
  br i1 %258, label %352, label %259

259:                                              ; preds = %252
  %260 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %241, i64 -1
  %261 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %250, i64 -1
  %262 = ptrtoint %"class.sh::TField"** %261 to i64
  %263 = sub i64 %262, %249
  %264 = lshr i64 %263, 3
  %265 = sub nsw i64 %219, %264
  %266 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %260, i64 %265
  %267 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %250, i64 -1
  %268 = sub nsw i64 0, %264
  %269 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %267, i64 %268
  %270 = icmp ult %"class.sh::TField"** %266, %250
  %271 = icmp ult %"class.sh::TField"** %269, %242
  %272 = and i1 %270, %271
  br i1 %272, label %352, label %273

273:                                              ; preds = %259
  %274 = and i64 %257, 4611686018427387900
  %275 = sub nsw i64 0, %274
  %276 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %242, i64 %275
  %277 = sub nsw i64 0, %274
  %278 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %250, i64 %277
  %279 = add nsw i64 %274, -4
  %280 = lshr exact i64 %279, 2
  %281 = add nuw nsw i64 %280, 1
  %282 = and i64 %281, 1
  %283 = icmp eq i64 %279, 0
  br i1 %283, label %328, label %284

284:                                              ; preds = %273
  %285 = sub nuw nsw i64 %281, %282
  %286 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %242, i64 -1
  %287 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %250, i64 -1
  %288 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %242, i64 -1
  %289 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %250, i64 -1
  br label %290

290:                                              ; preds = %290, %284
  %291 = phi i64 [ 0, %284 ], [ %325, %290 ]
  %292 = phi i64 [ %285, %284 ], [ %326, %290 ]
  %293 = sub i64 0, %291
  %294 = sub i64 0, %291
  %295 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %286, i64 %293
  %296 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %287, i64 %294
  %297 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %296, i64 -1
  %298 = bitcast %"class.sh::TField"** %297 to <2 x i64>*
  %299 = load <2 x i64>, <2 x i64>* %298, align 8, !alias.scope !31
  %300 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %296, i64 -2
  %301 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %300, i64 -1
  %302 = bitcast %"class.sh::TField"** %301 to <2 x i64>*
  %303 = load <2 x i64>, <2 x i64>* %302, align 8, !alias.scope !31
  %304 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %295, i64 -1
  %305 = bitcast %"class.sh::TField"** %304 to <2 x i64>*
  store <2 x i64> %299, <2 x i64>* %305, align 8, !alias.scope !34, !noalias !31
  %306 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %295, i64 -2
  %307 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %306, i64 -1
  %308 = bitcast %"class.sh::TField"** %307 to <2 x i64>*
  store <2 x i64> %303, <2 x i64>* %308, align 8, !alias.scope !34, !noalias !31
  %309 = sub nuw nsw i64 -4, %291
  %310 = sub nuw nsw i64 -4, %291
  %311 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %288, i64 %309
  %312 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %289, i64 %310
  %313 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %312, i64 -1
  %314 = bitcast %"class.sh::TField"** %313 to <2 x i64>*
  %315 = load <2 x i64>, <2 x i64>* %314, align 8, !alias.scope !31
  %316 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %312, i64 -2
  %317 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %316, i64 -1
  %318 = bitcast %"class.sh::TField"** %317 to <2 x i64>*
  %319 = load <2 x i64>, <2 x i64>* %318, align 8, !alias.scope !31
  %320 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %311, i64 -1
  %321 = bitcast %"class.sh::TField"** %320 to <2 x i64>*
  store <2 x i64> %315, <2 x i64>* %321, align 8, !alias.scope !34, !noalias !31
  %322 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %311, i64 -2
  %323 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %322, i64 -1
  %324 = bitcast %"class.sh::TField"** %323 to <2 x i64>*
  store <2 x i64> %319, <2 x i64>* %324, align 8, !alias.scope !34, !noalias !31
  %325 = add i64 %291, 8
  %326 = add i64 %292, -2
  %327 = icmp eq i64 %326, 0
  br i1 %327, label %328, label %290, !llvm.loop !36

328:                                              ; preds = %290, %273
  %329 = phi i64 [ 0, %273 ], [ %325, %290 ]
  %330 = icmp eq i64 %282, 0
  br i1 %330, label %350, label %331

331:                                              ; preds = %328
  %332 = sub i64 0, %329
  %333 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %242, i64 -1
  %334 = sub i64 0, %329
  %335 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %250, i64 -1
  %336 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %333, i64 %332
  %337 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %335, i64 %334
  %338 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %337, i64 -1
  %339 = bitcast %"class.sh::TField"** %338 to <2 x i64>*
  %340 = load <2 x i64>, <2 x i64>* %339, align 8, !alias.scope !31
  %341 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %337, i64 -2
  %342 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %341, i64 -1
  %343 = bitcast %"class.sh::TField"** %342 to <2 x i64>*
  %344 = load <2 x i64>, <2 x i64>* %343, align 8, !alias.scope !31
  %345 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %336, i64 -1
  %346 = bitcast %"class.sh::TField"** %345 to <2 x i64>*
  store <2 x i64> %340, <2 x i64>* %346, align 8, !alias.scope !34, !noalias !31
  %347 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %336, i64 -2
  %348 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %347, i64 -1
  %349 = bitcast %"class.sh::TField"** %348 to <2 x i64>*
  store <2 x i64> %344, <2 x i64>* %349, align 8, !alias.scope !34, !noalias !31
  br label %350

350:                                              ; preds = %328, %331
  %351 = icmp eq i64 %257, %274
  br i1 %351, label %422, label %352

352:                                              ; preds = %350, %259, %252
  %353 = phi %"class.sh::TField"** [ %242, %259 ], [ %242, %252 ], [ %276, %350 ]
  %354 = phi %"class.sh::TField"** [ %250, %259 ], [ %250, %252 ], [ %278, %350 ]
  %355 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %354, i64 -1
  %356 = ptrtoint %"class.sh::TField"** %355 to i64
  %357 = sub i64 %356, %249
  %358 = lshr i64 %357, 3
  %359 = add nuw nsw i64 %358, 1
  %360 = and i64 %359, 7
  %361 = icmp eq i64 %360, 0
  br i1 %361, label %373, label %362

362:                                              ; preds = %352, %362
  %363 = phi %"class.sh::TField"** [ %366, %362 ], [ %353, %352 ]
  %364 = phi %"class.sh::TField"** [ %367, %362 ], [ %354, %352 ]
  %365 = phi i64 [ %371, %362 ], [ %360, %352 ]
  %366 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %363, i64 -1
  %367 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %364, i64 -1
  %368 = bitcast %"class.sh::TField"** %367 to i64*
  %369 = load i64, i64* %368, align 8
  %370 = bitcast %"class.sh::TField"** %366 to i64*
  store i64 %369, i64* %370, align 8
  %371 = add i64 %365, -1
  %372 = icmp eq i64 %371, 0
  br i1 %372, label %373, label %362, !llvm.loop !37

373:                                              ; preds = %362, %352
  %374 = phi %"class.sh::TField"** [ undef, %352 ], [ %366, %362 ]
  %375 = phi %"class.sh::TField"** [ %353, %352 ], [ %366, %362 ]
  %376 = phi %"class.sh::TField"** [ %354, %352 ], [ %367, %362 ]
  %377 = icmp ult i64 %357, 56
  br i1 %377, label %422, label %378

378:                                              ; preds = %373, %378
  %379 = phi %"class.sh::TField"** [ %416, %378 ], [ %375, %373 ]
  %380 = phi %"class.sh::TField"** [ %417, %378 ], [ %376, %373 ]
  %381 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %379, i64 -1
  %382 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %380, i64 -1
  %383 = bitcast %"class.sh::TField"** %382 to i64*
  %384 = load i64, i64* %383, align 8
  %385 = bitcast %"class.sh::TField"** %381 to i64*
  store i64 %384, i64* %385, align 8
  %386 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %379, i64 -2
  %387 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %380, i64 -2
  %388 = bitcast %"class.sh::TField"** %387 to i64*
  %389 = load i64, i64* %388, align 8
  %390 = bitcast %"class.sh::TField"** %386 to i64*
  store i64 %389, i64* %390, align 8
  %391 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %379, i64 -3
  %392 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %380, i64 -3
  %393 = bitcast %"class.sh::TField"** %392 to i64*
  %394 = load i64, i64* %393, align 8
  %395 = bitcast %"class.sh::TField"** %391 to i64*
  store i64 %394, i64* %395, align 8
  %396 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %379, i64 -4
  %397 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %380, i64 -4
  %398 = bitcast %"class.sh::TField"** %397 to i64*
  %399 = load i64, i64* %398, align 8
  %400 = bitcast %"class.sh::TField"** %396 to i64*
  store i64 %399, i64* %400, align 8
  %401 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %379, i64 -5
  %402 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %380, i64 -5
  %403 = bitcast %"class.sh::TField"** %402 to i64*
  %404 = load i64, i64* %403, align 8
  %405 = bitcast %"class.sh::TField"** %401 to i64*
  store i64 %404, i64* %405, align 8
  %406 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %379, i64 -6
  %407 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %380, i64 -6
  %408 = bitcast %"class.sh::TField"** %407 to i64*
  %409 = load i64, i64* %408, align 8
  %410 = bitcast %"class.sh::TField"** %406 to i64*
  store i64 %409, i64* %410, align 8
  %411 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %379, i64 -7
  %412 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %380, i64 -7
  %413 = bitcast %"class.sh::TField"** %412 to i64*
  %414 = load i64, i64* %413, align 8
  %415 = bitcast %"class.sh::TField"** %411 to i64*
  store i64 %414, i64* %415, align 8
  %416 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %379, i64 -8
  %417 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %380, i64 -8
  %418 = bitcast %"class.sh::TField"** %417 to i64*
  %419 = load i64, i64* %418, align 8
  %420 = bitcast %"class.sh::TField"** %416 to i64*
  store i64 %419, i64* %420, align 8
  %421 = icmp eq %"class.sh::TField"** %417, %248
  br i1 %421, label %422, label %378, !llvm.loop !38

422:                                              ; preds = %373, %378, %350
  %423 = phi %"class.sh::TField"** [ %276, %350 ], [ %374, %373 ], [ %416, %378 ]
  %424 = load i8*, i8** %15, align 8
  br label %425

425:                                              ; preds = %422, %239
  %426 = phi i8* [ %78, %239 ], [ %424, %422 ]
  %427 = phi %"class.sh::TField"** [ %242, %239 ], [ %423, %422 ]
  %428 = ptrtoint %"class.sh::TField"** %427 to i64
  store i64 %428, i64* %63, align 8
  store i64 %247, i64* %62, align 8
  store i64 %244, i64* %67, align 8
  %429 = bitcast i8* %426 to %"class.sh::TSymbol"*
  br label %430

430:                                              ; preds = %425, %211, %160, %77
  %431 = phi i8* [ %426, %425 ], [ %78, %211 ], [ %78, %160 ], [ %78, %77 ]
  %432 = phi %"class.sh::TSymbol"* [ %429, %425 ], [ %79, %211 ], [ %79, %160 ], [ %79, %77 ]
  %433 = phi i8* [ %426, %425 ], [ %80, %211 ], [ %80, %160 ], [ %80, %77 ]
  %434 = add nuw i64 %82, 1
  %435 = getelementptr inbounds i8, i8* %433, i64 24
  %436 = bitcast i8* %435 to %"class.sh::TVector.30"**
  %437 = load %"class.sh::TVector.30"*, %"class.sh::TVector.30"** %436, align 8
  %438 = getelementptr inbounds %"class.sh::TVector.30", %"class.sh::TVector.30"* %437, i64 0, i32 0, i32 0, i32 1
  %439 = bitcast %"class.sh::TField"*** %438 to i64*
  %440 = load i64, i64* %439, align 8
  %441 = bitcast %"class.sh::TVector.30"* %437 to i64*
  %442 = load i64, i64* %441, align 8
  %443 = sub i64 %440, %442
  %444 = ashr exact i64 %443, 3
  %445 = icmp ult i64 %434, %444
  br i1 %445, label %77, label %69

446:                                              ; preds = %69
  %447 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %448 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %447, i64 80) #7
  %449 = bitcast i8* %448 to %"class.sh::TStructure"*
  %450 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 0, i32 8
  %451 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %450, align 8
  %452 = bitcast %"class.sh::ImmutableString"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %452) #7
  %453 = call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %71) #7
  %454 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %7, i64 0, i32 0
  %455 = extractvalue { i8*, i64 } %453, 0
  store i8* %455, i8** %454, align 8
  %456 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %7, i64 0, i32 1
  %457 = extractvalue { i8*, i64 } %453, 1
  store i64 %457, i64* %456, align 8
  %458 = getelementptr inbounds %"class.sh::TSymbol", %"class.sh::TSymbol"* %71, i64 0, i32 2
  %459 = load i8, i8* %458, align 4
  call void @_ZN2sh10TStructureC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_7TVectorIPNS_6TFieldEEENS_10SymbolTypeE(%"class.sh::TStructure"* %449, %"class.sh::TSymbolTable"* %451, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %7, %"class.sh::TVector.30"* %10, i8 zeroext %459) #7
  %460 = bitcast %"struct.sh::(anonymous namespace)::StructureData"* %12 to i8**
  store i8* %448, i8** %460, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %452) #7
  %461 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %462 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %461, i64 184) #7
  %463 = bitcast i8* %462 to %"class.sh::TType"*
  %464 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %13, align 8
  call void @_ZN2sh5TTypeC1EPKNS_10TStructureEb(%"class.sh::TType"* %463, %"class.sh::TStructure"* %464, i1 zeroext true) #7
  %465 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %466 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %465, i64 40) #7
  %467 = bitcast i8* %466 to %"class.sh::TVariable"*
  %468 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %450, align 8
  call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %467, %"class.sh::TSymbolTable"* %468, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2shL21kEmptyImmutableStringE, %"class.sh::TType"* %463, i8 zeroext 3, i8 zeroext 0) #7
  %469 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %470 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %469, i64 32) #7
  %471 = bitcast i8* %470 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %471, %"class.sh::TVariable"* %467) #7
  %472 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %473 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %472, i64 56) #7
  %474 = bitcast i8* %473 to %"class.sh::TIntermDeclaration"*
  %475 = bitcast i8* %473 to i32 (...)***
  %476 = getelementptr inbounds i8, i8* %473, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %476, i8 0, i64 16, i1 false) #7
  %477 = getelementptr inbounds i8, i8* %473, i64 24
  %478 = bitcast i8* %477 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %475, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %478, align 8
  %479 = getelementptr inbounds i8, i8* %473, i64 32
  call void @llvm.memset.p0i8.i64(i8* align 8 %479, i8 0, i64 24, i1 false) #7
  %480 = bitcast i8* %470 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"* %474, %"class.sh::TIntermTyped"* %480) #7
  %481 = ptrtoint i8* %473 to i64
  %482 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %2, i64 0, i32 0, i32 0, i32 1
  %483 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %482, align 8
  %484 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %2, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %485 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %484, align 8
  %486 = icmp ult %"class.sh::TIntermNode"** %483, %485
  %487 = ptrtoint %"class.sh::TIntermNode"** %485 to i64
  br i1 %486, label %488, label %493

488:                                              ; preds = %446
  %489 = bitcast %"class.sh::TIntermNode"** %483 to i64*
  store i64 %481, i64* %489, align 8
  %490 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %483, i64 1
  %491 = ptrtoint %"class.sh::TIntermNode"** %490 to i64
  %492 = bitcast %"class.sh::TIntermNode"*** %482 to i64*
  store i64 %491, i64* %492, align 8
  br label %706

493:                                              ; preds = %446
  %494 = ptrtoint %"class.sh::TIntermNode"** %483 to i64
  %495 = bitcast %"class.sh::TIntermNode"*** %482 to i64*
  %496 = bitcast %"class.sh::TVector"* %2 to i64*
  %497 = load i64, i64* %496, align 8
  %498 = sub i64 %494, %497
  %499 = ashr exact i64 %498, 3
  %500 = add nsw i64 %499, 1
  %501 = icmp ugt i64 %500, 2305843009213693951
  br i1 %501, label %502, label %504

502:                                              ; preds = %493
  %503 = bitcast %"class.sh::TVector"* %2 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %503) #17
  unreachable

504:                                              ; preds = %493
  %505 = bitcast %"class.sh::TIntermNode"*** %484 to i64*
  %506 = sub i64 %487, %497
  %507 = ashr exact i64 %506, 3
  %508 = icmp ult i64 %507, 1152921504606846975
  br i1 %508, label %509, label %514

509:                                              ; preds = %504
  %510 = ashr exact i64 %506, 2
  %511 = icmp ult i64 %510, %500
  %512 = select i1 %511, i64 %500, i64 %510
  %513 = icmp eq i64 %512, 0
  br i1 %513, label %520, label %514

514:                                              ; preds = %509, %504
  %515 = phi i64 [ %512, %509 ], [ 2305843009213693951, %504 ]
  %516 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %517 = shl i64 %515, 3
  %518 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %516, i64 %517) #7
  %519 = bitcast i8* %518 to %"class.sh::TIntermNode"**
  br label %520

520:                                              ; preds = %514, %509
  %521 = phi i64 [ %515, %514 ], [ 0, %509 ]
  %522 = phi %"class.sh::TIntermNode"** [ %519, %514 ], [ null, %509 ]
  %523 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %522, i64 %499
  %524 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %522, i64 %521
  %525 = ptrtoint %"class.sh::TIntermNode"** %524 to i64
  %526 = bitcast %"class.sh::TIntermNode"** %523 to i64*
  store i64 %481, i64* %526, align 8
  %527 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %523, i64 1
  %528 = ptrtoint %"class.sh::TIntermNode"** %527 to i64
  %529 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %2, i64 0, i32 0, i32 0, i32 0
  %530 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %529, align 8
  %531 = ptrtoint %"class.sh::TIntermNode"** %530 to i64
  %532 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %482, align 8
  %533 = icmp eq %"class.sh::TIntermNode"** %532, %530
  br i1 %533, label %703, label %534

534:                                              ; preds = %520
  %535 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 -1
  %536 = ptrtoint %"class.sh::TIntermNode"** %535 to i64
  %537 = sub i64 %536, %531
  %538 = lshr i64 %537, 3
  %539 = add nuw nsw i64 %538, 1
  %540 = icmp ult i64 %539, 4
  br i1 %540, label %633, label %541

541:                                              ; preds = %534
  %542 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 -1
  %543 = ptrtoint %"class.sh::TIntermNode"** %542 to i64
  %544 = sub i64 %543, %531
  %545 = lshr i64 %544, 3
  %546 = xor i64 %545, -1
  %547 = add nsw i64 %499, %546
  %548 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %522, i64 %547
  %549 = xor i64 %545, -1
  %550 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 %549
  %551 = icmp ult %"class.sh::TIntermNode"** %548, %532
  %552 = icmp ult %"class.sh::TIntermNode"** %550, %523
  %553 = and i1 %551, %552
  br i1 %553, label %633, label %554

554:                                              ; preds = %541
  %555 = and i64 %539, 4611686018427387900
  %556 = sub nsw i64 0, %555
  %557 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %523, i64 %556
  %558 = sub nsw i64 0, %555
  %559 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 %558
  %560 = add nsw i64 %555, -4
  %561 = lshr exact i64 %560, 2
  %562 = add nuw nsw i64 %561, 1
  %563 = and i64 %562, 1
  %564 = icmp eq i64 %560, 0
  br i1 %564, label %611, label %565

565:                                              ; preds = %554
  %566 = sub nuw nsw i64 %562, %563
  %567 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %523, i64 -1
  %568 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 -1
  %569 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %523, i64 -1
  %570 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 -1
  br label %571

571:                                              ; preds = %571, %565
  %572 = phi i64 [ 0, %565 ], [ %606, %571 ]
  %573 = phi i64 [ %566, %565 ], [ %607, %571 ]
  %574 = sub i64 0, %572
  %575 = sub i64 0, %572
  %576 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %567, i64 %574
  %577 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %568, i64 %575
  %578 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %577, i64 -1
  %579 = bitcast %"class.sh::TIntermNode"** %578 to <2 x i64>*
  %580 = load <2 x i64>, <2 x i64>* %579, align 8, !alias.scope !39
  %581 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %577, i64 -2
  %582 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %581, i64 -1
  %583 = bitcast %"class.sh::TIntermNode"** %582 to <2 x i64>*
  %584 = load <2 x i64>, <2 x i64>* %583, align 8, !alias.scope !39
  %585 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %576, i64 -1
  %586 = bitcast %"class.sh::TIntermNode"** %585 to <2 x i64>*
  store <2 x i64> %580, <2 x i64>* %586, align 8, !alias.scope !42, !noalias !39
  %587 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %576, i64 -2
  %588 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %587, i64 -1
  %589 = bitcast %"class.sh::TIntermNode"** %588 to <2 x i64>*
  store <2 x i64> %584, <2 x i64>* %589, align 8, !alias.scope !42, !noalias !39
  %590 = sub nuw nsw i64 -4, %572
  %591 = sub nuw nsw i64 -4, %572
  %592 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %569, i64 %590
  %593 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %570, i64 %591
  %594 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %593, i64 -1
  %595 = bitcast %"class.sh::TIntermNode"** %594 to <2 x i64>*
  %596 = load <2 x i64>, <2 x i64>* %595, align 8, !alias.scope !39
  %597 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %593, i64 -2
  %598 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %597, i64 -1
  %599 = bitcast %"class.sh::TIntermNode"** %598 to <2 x i64>*
  %600 = load <2 x i64>, <2 x i64>* %599, align 8, !alias.scope !39
  %601 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %592, i64 -1
  %602 = bitcast %"class.sh::TIntermNode"** %601 to <2 x i64>*
  store <2 x i64> %596, <2 x i64>* %602, align 8, !alias.scope !42, !noalias !39
  %603 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %592, i64 -2
  %604 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %603, i64 -1
  %605 = bitcast %"class.sh::TIntermNode"** %604 to <2 x i64>*
  store <2 x i64> %600, <2 x i64>* %605, align 8, !alias.scope !42, !noalias !39
  %606 = add i64 %572, 8
  %607 = add i64 %573, -2
  %608 = icmp eq i64 %607, 0
  br i1 %608, label %609, label %571, !llvm.loop !44

609:                                              ; preds = %571
  %610 = sub nuw nsw i64 -8, %572
  br label %611

611:                                              ; preds = %609, %554
  %612 = phi i64 [ 0, %554 ], [ %610, %609 ]
  %613 = icmp eq i64 %563, 0
  br i1 %613, label %631, label %614

614:                                              ; preds = %611
  %615 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %523, i64 -1
  %616 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 -1
  %617 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %615, i64 %612
  %618 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %616, i64 %612
  %619 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %618, i64 -1
  %620 = bitcast %"class.sh::TIntermNode"** %619 to <2 x i64>*
  %621 = load <2 x i64>, <2 x i64>* %620, align 8, !alias.scope !39
  %622 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %618, i64 -2
  %623 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %622, i64 -1
  %624 = bitcast %"class.sh::TIntermNode"** %623 to <2 x i64>*
  %625 = load <2 x i64>, <2 x i64>* %624, align 8, !alias.scope !39
  %626 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %617, i64 -1
  %627 = bitcast %"class.sh::TIntermNode"** %626 to <2 x i64>*
  store <2 x i64> %621, <2 x i64>* %627, align 8, !alias.scope !42, !noalias !39
  %628 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %617, i64 -2
  %629 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %628, i64 -1
  %630 = bitcast %"class.sh::TIntermNode"** %629 to <2 x i64>*
  store <2 x i64> %625, <2 x i64>* %630, align 8, !alias.scope !42, !noalias !39
  br label %631

631:                                              ; preds = %611, %614
  %632 = icmp eq i64 %539, %555
  br i1 %632, label %703, label %633

633:                                              ; preds = %631, %541, %534
  %634 = phi %"class.sh::TIntermNode"** [ %523, %541 ], [ %523, %534 ], [ %557, %631 ]
  %635 = phi %"class.sh::TIntermNode"** [ %532, %541 ], [ %532, %534 ], [ %559, %631 ]
  %636 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %635, i64 -1
  %637 = ptrtoint %"class.sh::TIntermNode"** %636 to i64
  %638 = sub i64 %637, %531
  %639 = lshr i64 %638, 3
  %640 = add nuw nsw i64 %639, 1
  %641 = and i64 %640, 7
  %642 = icmp eq i64 %641, 0
  br i1 %642, label %654, label %643

643:                                              ; preds = %633, %643
  %644 = phi %"class.sh::TIntermNode"** [ %647, %643 ], [ %634, %633 ]
  %645 = phi %"class.sh::TIntermNode"** [ %648, %643 ], [ %635, %633 ]
  %646 = phi i64 [ %652, %643 ], [ %641, %633 ]
  %647 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %644, i64 -1
  %648 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %645, i64 -1
  %649 = bitcast %"class.sh::TIntermNode"** %648 to i64*
  %650 = load i64, i64* %649, align 8
  %651 = bitcast %"class.sh::TIntermNode"** %647 to i64*
  store i64 %650, i64* %651, align 8
  %652 = add i64 %646, -1
  %653 = icmp eq i64 %652, 0
  br i1 %653, label %654, label %643, !llvm.loop !45

654:                                              ; preds = %643, %633
  %655 = phi %"class.sh::TIntermNode"** [ undef, %633 ], [ %647, %643 ]
  %656 = phi %"class.sh::TIntermNode"** [ %634, %633 ], [ %647, %643 ]
  %657 = phi %"class.sh::TIntermNode"** [ %635, %633 ], [ %648, %643 ]
  %658 = icmp ult i64 %638, 56
  br i1 %658, label %703, label %659

659:                                              ; preds = %654, %659
  %660 = phi %"class.sh::TIntermNode"** [ %697, %659 ], [ %656, %654 ]
  %661 = phi %"class.sh::TIntermNode"** [ %698, %659 ], [ %657, %654 ]
  %662 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %660, i64 -1
  %663 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %661, i64 -1
  %664 = bitcast %"class.sh::TIntermNode"** %663 to i64*
  %665 = load i64, i64* %664, align 8
  %666 = bitcast %"class.sh::TIntermNode"** %662 to i64*
  store i64 %665, i64* %666, align 8
  %667 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %660, i64 -2
  %668 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %661, i64 -2
  %669 = bitcast %"class.sh::TIntermNode"** %668 to i64*
  %670 = load i64, i64* %669, align 8
  %671 = bitcast %"class.sh::TIntermNode"** %667 to i64*
  store i64 %670, i64* %671, align 8
  %672 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %660, i64 -3
  %673 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %661, i64 -3
  %674 = bitcast %"class.sh::TIntermNode"** %673 to i64*
  %675 = load i64, i64* %674, align 8
  %676 = bitcast %"class.sh::TIntermNode"** %672 to i64*
  store i64 %675, i64* %676, align 8
  %677 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %660, i64 -4
  %678 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %661, i64 -4
  %679 = bitcast %"class.sh::TIntermNode"** %678 to i64*
  %680 = load i64, i64* %679, align 8
  %681 = bitcast %"class.sh::TIntermNode"** %677 to i64*
  store i64 %680, i64* %681, align 8
  %682 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %660, i64 -5
  %683 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %661, i64 -5
  %684 = bitcast %"class.sh::TIntermNode"** %683 to i64*
  %685 = load i64, i64* %684, align 8
  %686 = bitcast %"class.sh::TIntermNode"** %682 to i64*
  store i64 %685, i64* %686, align 8
  %687 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %660, i64 -6
  %688 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %661, i64 -6
  %689 = bitcast %"class.sh::TIntermNode"** %688 to i64*
  %690 = load i64, i64* %689, align 8
  %691 = bitcast %"class.sh::TIntermNode"** %687 to i64*
  store i64 %690, i64* %691, align 8
  %692 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %660, i64 -7
  %693 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %661, i64 -7
  %694 = bitcast %"class.sh::TIntermNode"** %693 to i64*
  %695 = load i64, i64* %694, align 8
  %696 = bitcast %"class.sh::TIntermNode"** %692 to i64*
  store i64 %695, i64* %696, align 8
  %697 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %660, i64 -8
  %698 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %661, i64 -8
  %699 = bitcast %"class.sh::TIntermNode"** %698 to i64*
  %700 = load i64, i64* %699, align 8
  %701 = bitcast %"class.sh::TIntermNode"** %697 to i64*
  store i64 %700, i64* %701, align 8
  %702 = icmp eq %"class.sh::TIntermNode"** %698, %530
  br i1 %702, label %703, label %659, !llvm.loop !46

703:                                              ; preds = %654, %659, %631, %520
  %704 = phi %"class.sh::TIntermNode"** [ %523, %520 ], [ %557, %631 ], [ %655, %654 ], [ %697, %659 ]
  %705 = ptrtoint %"class.sh::TIntermNode"** %704 to i64
  store i64 %705, i64* %496, align 8
  store i64 %528, i64* %495, align 8
  store i64 %525, i64* %505, align 8
  br label %706

706:                                              ; preds = %703, %488, %69
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc dereferenceable(32) %"struct.sh::(anonymous namespace)::StructureData"* @_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh10TStructureENS3_12_GLOBAL__N_113StructureDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEEixIS6_S9_EEDTclsrT0_5valueclL_ZNSE_9addressofISI_EEPT_RSO_EclL_ZNSE_7declvalIRSI_EEDTclsr3std3__1E9__declvalISO_ELi0EEEvEEEEERKSO_(%"class.absl::container_internal::raw_hash_map"*, %"class.sh::TStructure"** nocapture readonly dereferenceable(8)) unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0
  %4 = bitcast %"class.sh::TStructure"** %1 to i64*
  %5 = load i64, i64* %4, align 8, !noalias !47
  %6 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8, !noalias !47
  %7 = add i64 %6, %5
  %8 = zext i64 %7 to i128
  %9 = mul nuw i128 %8, 11376068507788127593
  %10 = lshr i128 %9, 64
  %11 = xor i128 %10, %9
  %12 = trunc i128 %11 to i64
  %13 = add i64 %5, %12
  %14 = zext i64 %13 to i128
  %15 = mul nuw i128 %14, 11376068507788127593
  %16 = lshr i128 %15, 64
  %17 = xor i128 %16, %15
  %18 = trunc i128 %17 to i64
  %19 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8, !noalias !47
  %21 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0, i32 3
  %22 = load i64, i64* %21, align 8, !noalias !47
  %23 = lshr i64 %18, 7
  %24 = ptrtoint i8* %20 to i64
  %25 = lshr i64 %24, 12
  %26 = xor i64 %23, %25
  %27 = trunc i128 %17 to i8
  %28 = and i8 %27, 127
  %29 = insertelement <16 x i8> undef, i8 %28, i32 0
  %30 = shufflevector <16 x i8> %29, <16 x i8> undef, <16 x i32> zeroinitializer
  %31 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0, i32 1
  %32 = inttoptr i64 %5 to %"class.sh::TStructure"*
  br label %33

33:                                               ; preds = %63, %2
  %34 = phi i64 [ %26, %2 ], [ %65, %63 ]
  %35 = phi i64 [ 0, %2 ], [ %64, %63 ]
  %36 = and i64 %34, %22
  %37 = getelementptr inbounds i8, i8* %20, i64 %36
  %38 = bitcast i8* %37 to <16 x i8>*
  %39 = load <16 x i8>, <16 x i8>* %38, align 1, !noalias !47
  %40 = icmp eq <16 x i8> %30, %39
  %41 = bitcast <16 x i1> %40 to i16
  %42 = icmp eq i16 %41, 0
  br i1 %42, label %59, label %43

43:                                               ; preds = %33
  %44 = zext i16 %41 to i32
  %45 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %31, align 8, !noalias !47
  br label %46

46:                                               ; preds = %55, %43
  %47 = phi i32 [ %44, %43 ], [ %57, %55 ]
  %48 = tail call i32 @llvm.cttz.i32(i32 %47, i1 false) #7, !range !3
  %49 = zext i32 %48 to i64
  %50 = add i64 %36, %49
  %51 = and i64 %50, %22
  %52 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %45, i64 %51, i32 0, i32 0
  %53 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %52, align 8, !noalias !47
  %54 = icmp eq %"class.sh::TStructure"* %53, %32
  br i1 %54, label %76, label %55, !prof !4

55:                                               ; preds = %46
  %56 = add i32 %47, -1
  %57 = and i32 %56, %47
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %46

59:                                               ; preds = %55, %33
  %60 = icmp eq <16 x i8> %39, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %61 = bitcast <16 x i1> %60 to i16
  %62 = icmp eq i16 %61, 0
  br i1 %62, label %63, label %66, !prof !5

63:                                               ; preds = %59
  %64 = add i64 %35, 16
  %65 = add i64 %64, %36
  br label %33

66:                                               ; preds = %59
  %67 = tail call fastcc i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh10TStructureENS3_12_GLOBAL__N_113StructureDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"* %3, i64 %18) #7, !noalias !47
  %68 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %31, align 8, !noalias !47
  %69 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %68, i64 %67
  %70 = load i64, i64* %4, align 8, !noalias !47
  %71 = bitcast %"union.absl::container_internal::map_slot_type"* %69 to i64*
  store i64 %70, i64* %71, align 8, !noalias !47
  %72 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %68, i64 %67, i32 0, i32 1
  %73 = bitcast %"struct.sh::(anonymous namespace)::StructureData"* %72 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %73, i8 0, i64 32, i1 false) #7, !noalias !47
  %74 = load i8*, i8** %19, align 8, !noalias !47
  %75 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %31, align 8, !noalias !47
  br label %76

76:                                               ; preds = %46, %66
  %77 = phi %"union.absl::container_internal::map_slot_type"* [ %75, %66 ], [ %45, %46 ]
  %78 = phi i8* [ %74, %66 ], [ %20, %46 ]
  %79 = phi i64 [ %67, %66 ], [ %51, %46 ]
  %80 = getelementptr inbounds i8, i8* %78, i64 %79
  %81 = icmp ne i8* %80, null
  tail call void @llvm.assume(i1 %81) #7, !noalias !47
  %82 = load i8, i8* %80, align 1
  %83 = icmp sgt i8 %82, -1
  br i1 %83, label %85, label %84, !prof !4

84:                                               ; preds = %76
  tail call void @llvm.trap() #7
  unreachable

85:                                               ; preds = %76
  %86 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %77, i64 %79, i32 0, i32 1
  ret %"struct.sh::(anonymous namespace)::StructureData"* %86
}

declare void @_ZN2sh5TTypeC1EPKNS_10TStructureEb(%"class.sh::TType"*, %"class.sh::TStructure"*, i1 zeroext) unnamed_addr #2

declare void @_ZN2sh5TType10makeArraysERKNS_5TSpanIKjEE(%"class.sh::TType"*, %"class.sh::TSpan"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"*, %"class.sh::TType"* dereferenceable(184)) unnamed_addr #2

declare void @_ZN2sh10TStructureC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_7TVectorIPNS_6TFieldEEENS_10SymbolTypeE(%"class.sh::TStructure"*, %"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::TVector.30"*, i8 zeroext) unnamed_addr #2

declare void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"*, %"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::TType"*, i8 zeroext, i8 zeroext) unnamed_addr #2

declare void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh10TStructureENS3_12_GLOBAL__N_113StructureDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"*, i64) unnamed_addr #12 align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %1, 7
  %8 = ptrtoint i8* %4 to i64
  %9 = lshr i64 %8, 12
  %10 = xor i64 %9, %7
  %11 = and i64 %10, %6
  %12 = getelementptr inbounds i8, i8* %4, i64 %11
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  %15 = icmp slt <16 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %16 = bitcast <16 x i1> %15 to i16
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %2, %18
  %19 = phi i64 [ %23, %18 ], [ %11, %2 ]
  %20 = phi i64 [ %21, %18 ], [ 0, %2 ]
  %21 = add i64 %20, 16
  %22 = add i64 %21, %19
  %23 = and i64 %22, %6
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  %25 = bitcast i8* %24 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = icmp slt <16 x i8> %26, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %28 = bitcast <16 x i1> %27 to i16
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %18, label %30

30:                                               ; preds = %18, %2
  %31 = phi i64 [ %11, %2 ], [ %23, %18 ]
  %32 = phi i16 [ %16, %2 ], [ %28, %18 ]
  %33 = zext i16 %32 to i32
  %34 = tail call i32 @llvm.cttz.i32(i32 %33, i1 false) #7, !range !3
  %35 = zext i32 %34 to i64
  %36 = add i64 %31, %35
  %37 = and i64 %36, %6
  %38 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %93

41:                                               ; preds = %30
  %42 = getelementptr inbounds i8, i8* %4, i64 %37
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, -2
  br i1 %44, label %93, label %45, !prof !4

45:                                               ; preds = %41
  %46 = icmp eq i64 %6, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call fastcc void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh10TStructureENS3_12_GLOBAL__N_113StructureDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 1) #7
  br label %59

48:                                               ; preds = %45
  %49 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %50 = load i64, i64* %49, align 8
  %51 = lshr i64 %6, 3
  %52 = sub i64 %6, %51
  %53 = lshr i64 %52, 1
  %54 = icmp ugt i64 %50, %53
  br i1 %54, label %56, label %55

55:                                               ; preds = %48
  tail call fastcc void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh10TStructureENS3_12_GLOBAL__N_113StructureDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"* %0) #7
  br label %59

56:                                               ; preds = %48
  %57 = shl i64 %6, 1
  %58 = or i64 %57, 1
  tail call fastcc void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh10TStructureENS3_12_GLOBAL__N_113StructureDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 %58) #7
  br label %59

59:                                               ; preds = %47, %55, %56
  %60 = load i8*, i8** %3, align 8
  %61 = load i64, i64* %5, align 8
  %62 = ptrtoint i8* %60 to i64
  %63 = lshr i64 %62, 12
  %64 = xor i64 %63, %7
  %65 = and i64 %64, %61
  %66 = getelementptr inbounds i8, i8* %60, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = icmp slt <16 x i8> %68, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %59, %72
  %73 = phi i64 [ %77, %72 ], [ %65, %59 ]
  %74 = phi i64 [ %75, %72 ], [ 0, %59 ]
  %75 = add i64 %74, 16
  %76 = add i64 %75, %73
  %77 = and i64 %76, %61
  %78 = getelementptr inbounds i8, i8* %60, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = icmp slt <16 x i8> %80, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %82 = bitcast <16 x i1> %81 to i16
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %72, label %84

84:                                               ; preds = %72, %59
  %85 = phi i64 [ %65, %59 ], [ %77, %72 ]
  %86 = phi i16 [ %70, %59 ], [ %82, %72 ]
  %87 = zext i16 %86 to i32
  %88 = tail call i32 @llvm.cttz.i32(i32 %87, i1 false) #7, !range !3
  %89 = zext i32 %88 to i64
  %90 = add i64 %85, %89
  %91 = and i64 %90, %61
  %92 = load i64, i64* %38, align 8
  br label %93

93:                                               ; preds = %41, %30, %84
  %94 = phi i64 [ %92, %84 ], [ 0, %41 ], [ %39, %30 ]
  %95 = phi i8* [ %60, %84 ], [ %4, %41 ], [ %4, %30 ]
  %96 = phi i64 [ %91, %84 ], [ %37, %41 ], [ %37, %30 ]
  %97 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = getelementptr inbounds i8, i8* %95, i64 %96
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, -128
  %103 = zext i1 %102 to i64
  %104 = sub i64 %94, %103
  store i64 %104, i64* %38, align 8
  %105 = trunc i64 %1 to i8
  %106 = and i8 %105, 127
  store i8 %106, i8* %100, align 1
  %107 = load i8*, i8** %3, align 8
  %108 = add i64 %96, -15
  %109 = load i64, i64* %5, align 8
  %110 = and i64 %109, %108
  %111 = and i64 %109, 15
  %112 = add i64 %110, %111
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  store i8 %106, i8* %113, align 1
  ret i64 %96
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh10TStructureENS3_12_GLOBAL__N_113StructureDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"*, i64) unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %6 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %5, align 8
  %7 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  store i64 %1, i64* %7, align 8
  %9 = add i64 %1, 16
  %10 = add i64 %1, 23
  %11 = and i64 %10, -8
  %12 = mul i64 %1, 40
  %13 = add i64 %11, %12
  %14 = tail call i8* @_Znwm(i64 %13) #16
  store i8* %14, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %11
  %16 = bitcast %"union.absl::container_internal::map_slot_type"** %5 to i8**
  store i8* %15, i8** %16, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 -128, i64 %9, i1 false) #7
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  store i8 -1, i8* %17, align 1
  %18 = lshr i64 %1, 3
  %19 = sub i64 %1, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = icmp eq i64 %8, 0
  br i1 %24, label %122, label %25

25:                                               ; preds = %2
  %26 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %28

27:                                               ; preds = %118
  br i1 %24, label %122, label %121

28:                                               ; preds = %25, %118
  %29 = phi i64 [ 0, %25 ], [ %119, %118 ]
  %30 = getelementptr inbounds i8, i8* %4, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = icmp sgt i8 %31, -1
  br i1 %32, label %33, label %118

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29
  %35 = bitcast %"union.absl::container_internal::map_slot_type"* %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = add i64 %26, %36
  %38 = zext i64 %37 to i128
  %39 = mul nuw i128 %38, 11376068507788127593
  %40 = lshr i128 %39, 64
  %41 = xor i128 %40, %39
  %42 = trunc i128 %41 to i64
  %43 = add i64 %36, %42
  %44 = zext i64 %43 to i128
  %45 = mul nuw i128 %44, 11376068507788127593
  %46 = lshr i128 %45, 64
  %47 = xor i128 %46, %45
  %48 = trunc i128 %47 to i64
  %49 = load i8*, i8** %3, align 8
  %50 = load i64, i64* %7, align 8
  %51 = lshr i64 %48, 7
  %52 = ptrtoint i8* %49 to i64
  %53 = lshr i64 %52, 12
  %54 = xor i64 %51, %53
  %55 = and i64 %54, %50
  %56 = getelementptr inbounds i8, i8* %49, i64 %55
  %57 = bitcast i8* %56 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 1
  %59 = icmp slt <16 x i8> %58, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %60 = bitcast <16 x i1> %59 to i16
  %61 = icmp eq i16 %60, 0
  br i1 %61, label %62, label %74

62:                                               ; preds = %33, %62
  %63 = phi i64 [ %67, %62 ], [ %55, %33 ]
  %64 = phi i64 [ %65, %62 ], [ 0, %33 ]
  %65 = add i64 %64, 16
  %66 = add i64 %65, %63
  %67 = and i64 %66, %50
  %68 = getelementptr inbounds i8, i8* %49, i64 %67
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1
  %71 = icmp slt <16 x i8> %70, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %72 = bitcast <16 x i1> %71 to i16
  %73 = icmp eq i16 %72, 0
  br i1 %73, label %62, label %74

74:                                               ; preds = %62, %33
  %75 = phi i64 [ %55, %33 ], [ %67, %62 ]
  %76 = phi i16 [ %60, %33 ], [ %72, %62 ]
  %77 = zext i16 %76 to i32
  %78 = tail call i32 @llvm.cttz.i32(i32 %77, i1 false) #7, !range !3
  %79 = zext i32 %78 to i64
  %80 = add i64 %75, %79
  %81 = and i64 %80, %50
  %82 = trunc i128 %47 to i8
  %83 = and i8 %82, 127
  %84 = getelementptr inbounds i8, i8* %49, i64 %81
  store i8 %83, i8* %84, align 1
  %85 = load i8*, i8** %3, align 8
  %86 = add i64 %81, -15
  %87 = load i64, i64* %7, align 8
  %88 = and i64 %86, %87
  %89 = and i64 %87, 15
  %90 = add i64 %88, %89
  %91 = getelementptr inbounds i8, i8* %85, i64 %90
  store i8 %83, i8* %91, align 1
  %92 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %5, align 8
  %93 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %92, i64 %81
  %94 = load i64, i64* %35, align 8
  %95 = bitcast %"union.absl::container_internal::map_slot_type"* %93 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %92, i64 %81, i32 0, i32 1
  %97 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29, i32 0, i32 1
  %98 = bitcast %"struct.sh::(anonymous namespace)::StructureData"* %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %"struct.sh::(anonymous namespace)::StructureData"* %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %92, i64 %81, i32 0, i32 1, i32 1
  %102 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29, i32 0, i32 1, i32 1
  %103 = bitcast %"class.sh::TVector.100"* %101 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %103, i8 0, i64 24, i1 false) #7
  %104 = bitcast %"class.sh::TVector.100"* %102 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = bitcast %"class.sh::TVector.100"* %101 to i64*
  store i64 %105, i64* %106, align 8
  %107 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1
  %108 = bitcast i32** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %92, i64 %81, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1
  %111 = bitcast i32** %110 to i64*
  store i64 %109, i64* %111, align 8
  %112 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29, i32 0, i32 1, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %113 = bitcast i32** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %92, i64 %81, i32 0, i32 1, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %116 = bitcast i32** %115 to i64*
  store i64 %114, i64* %116, align 8
  %117 = bitcast %"class.sh::TVector.100"* %102 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %117, i8 0, i64 24, i1 false) #7
  br label %118

118:                                              ; preds = %28, %74
  %119 = add nuw i64 %29, 1
  %120 = icmp eq i64 %119, %8
  br i1 %120, label %27, label %28

121:                                              ; preds = %27
  tail call void @_ZdlPv(i8* %4) #16
  br label %122

122:                                              ; preds = %2, %27, %121
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh10TStructureENS3_12_GLOBAL__N_113StructureDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"*) unnamed_addr #12 align 2 {
  %2 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  tail call void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8* %3, i64 %5) #7
  %6 = load i64, i64* %4, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %10 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %19

11:                                               ; preds = %189, %1
  %12 = phi i64 [ 0, %1 ], [ %191, %189 ]
  %13 = lshr i64 %12, 3
  %14 = sub i64 %12, %13
  %15 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %17, i64* %18, align 8
  ret void

19:                                               ; preds = %8, %189
  %20 = phi i64 [ %6, %8 ], [ %192, %189 ]
  %21 = phi i64 [ 0, %8 ], [ %191, %189 ]
  %22 = load i8*, i8** %2, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 %21
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, -2
  br i1 %25, label %26, label %189

26:                                               ; preds = %19
  %27 = ptrtoint i8* %22 to i64
  %28 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %9, align 8
  %29 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %28, i64 %21, i32 0
  %30 = bitcast %"struct.std::__1::pair"* %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = add i64 %10, %31
  %33 = zext i64 %32 to i128
  %34 = mul nuw i128 %33, 11376068507788127593
  %35 = lshr i128 %34, 64
  %36 = xor i128 %35, %34
  %37 = trunc i128 %36 to i64
  %38 = add i64 %31, %37
  %39 = zext i64 %38 to i128
  %40 = mul nuw i128 %39, 11376068507788127593
  %41 = lshr i128 %40, 64
  %42 = xor i128 %41, %40
  %43 = trunc i128 %42 to i64
  %44 = lshr i64 %43, 7
  %45 = lshr i64 %27, 12
  %46 = xor i64 %44, %45
  %47 = and i64 %46, %20
  %48 = getelementptr inbounds i8, i8* %22, i64 %47
  %49 = bitcast i8* %48 to <16 x i8>*
  %50 = load <16 x i8>, <16 x i8>* %49, align 1
  %51 = icmp slt <16 x i8> %50, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %52 = bitcast <16 x i1> %51 to i16
  %53 = icmp eq i16 %52, 0
  br i1 %53, label %54, label %66

54:                                               ; preds = %26, %54
  %55 = phi i64 [ %59, %54 ], [ %47, %26 ]
  %56 = phi i64 [ %57, %54 ], [ 0, %26 ]
  %57 = add i64 %56, 16
  %58 = add i64 %57, %55
  %59 = and i64 %58, %20
  %60 = getelementptr inbounds i8, i8* %22, i64 %59
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1
  %63 = icmp slt <16 x i8> %62, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %64 = bitcast <16 x i1> %63 to i16
  %65 = icmp eq i16 %64, 0
  br i1 %65, label %54, label %66

66:                                               ; preds = %54, %26
  %67 = phi i64 [ %47, %26 ], [ %59, %54 ]
  %68 = phi i16 [ %52, %26 ], [ %64, %54 ]
  %69 = zext i16 %68 to i32
  %70 = tail call i32 @llvm.cttz.i32(i32 %69, i1 false) #7, !range !3
  %71 = zext i32 %70 to i64
  %72 = add i64 %67, %71
  %73 = and i64 %72, %20
  %74 = sub i64 %73, %47
  %75 = sub i64 %21, %47
  %76 = xor i64 %74, %75
  %77 = and i64 %76, %20
  %78 = icmp ult i64 %77, 16
  br i1 %78, label %79, label %89, !prof !4

79:                                               ; preds = %66
  %80 = trunc i128 %42 to i8
  %81 = and i8 %80, 127
  store i8 %81, i8* %23, align 1
  %82 = load i8*, i8** %2, align 8
  %83 = add i64 %21, -15
  %84 = load i64, i64* %4, align 8
  %85 = and i64 %84, %83
  %86 = and i64 %84, 15
  %87 = add i64 %85, %86
  %88 = getelementptr inbounds i8, i8* %82, i64 %87
  store i8 %81, i8* %88, align 1
  br label %189

89:                                               ; preds = %66
  %90 = getelementptr inbounds i8, i8* %22, i64 %73
  %91 = load i8, i8* %90, align 1
  %92 = icmp eq i8 %91, -128
  %93 = trunc i128 %42 to i8
  %94 = and i8 %93, 127
  store i8 %94, i8* %90, align 1
  %95 = load i8*, i8** %2, align 8
  %96 = add i64 %73, -15
  %97 = load i64, i64* %4, align 8
  %98 = and i64 %97, %96
  %99 = and i64 %97, 15
  %100 = add i64 %98, %99
  %101 = getelementptr inbounds i8, i8* %95, i64 %100
  store i8 %94, i8* %101, align 1
  %102 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %9, align 8
  br i1 %92, label %103, label %140

103:                                              ; preds = %89
  %104 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %73
  %105 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %21
  %106 = bitcast %"union.absl::container_internal::map_slot_type"* %105 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %"union.absl::container_internal::map_slot_type"* %104 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %73, i32 0, i32 1
  %110 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %21, i32 0, i32 1
  %111 = bitcast %"struct.sh::(anonymous namespace)::StructureData"* %110 to i64*
  %112 = load i64, i64* %111, align 8
  %113 = bitcast %"struct.sh::(anonymous namespace)::StructureData"* %109 to i64*
  store i64 %112, i64* %113, align 8
  %114 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %73, i32 0, i32 1, i32 1
  %115 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %21, i32 0, i32 1, i32 1
  %116 = bitcast %"class.sh::TVector.100"* %114 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %116, i8 0, i64 24, i1 false) #7
  %117 = bitcast %"class.sh::TVector.100"* %115 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"class.sh::TVector.100"* %114 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %21, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1
  %121 = bitcast i32** %120 to i64*
  %122 = load i64, i64* %121, align 8
  %123 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %73, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1
  %124 = bitcast i32** %123 to i64*
  store i64 %122, i64* %124, align 8
  %125 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %21, i32 0, i32 1, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %126 = bitcast i32** %125 to i64*
  %127 = load i64, i64* %126, align 8
  %128 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %73, i32 0, i32 1, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %129 = bitcast i32** %128 to i64*
  store i64 %127, i64* %129, align 8
  %130 = bitcast %"class.sh::TVector.100"* %115 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %130, i8 0, i64 24, i1 false) #7
  %131 = load i8*, i8** %2, align 8
  %132 = getelementptr inbounds i8, i8* %131, i64 %21
  store i8 -128, i8* %132, align 1
  %133 = load i8*, i8** %2, align 8
  %134 = add i64 %21, -15
  %135 = load i64, i64* %4, align 8
  %136 = and i64 %135, %134
  %137 = and i64 %135, 15
  %138 = add i64 %136, %137
  %139 = getelementptr inbounds i8, i8* %133, i64 %138
  store i8 -128, i8* %139, align 1
  br label %189

140:                                              ; preds = %89
  %141 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %21
  %142 = bitcast %"union.absl::container_internal::map_slot_type"* %141 to <2 x i64>*
  %143 = load <2 x i64>, <2 x i64>* %142, align 8
  %144 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %21, i32 0, i32 1, i32 1
  %145 = bitcast %"class.sh::TVector.100"* %144 to <2 x i64>*
  %146 = load <2 x i64>, <2 x i64>* %145, align 8
  %147 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %21, i32 0, i32 1, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %148 = bitcast i32** %147 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = bitcast %"class.sh::TVector.100"* %144 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %150, i8 0, i64 24, i1 false) #7
  %151 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %9, align 8
  %152 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %151, i64 %21
  %153 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %151, i64 %73
  %154 = bitcast %"union.absl::container_internal::map_slot_type"* %153 to i64*
  %155 = load i64, i64* %154, align 8
  %156 = bitcast %"union.absl::container_internal::map_slot_type"* %152 to i64*
  store i64 %155, i64* %156, align 8
  %157 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %151, i64 %21, i32 0, i32 1
  %158 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %151, i64 %73, i32 0, i32 1
  %159 = bitcast %"struct.sh::(anonymous namespace)::StructureData"* %158 to i64*
  %160 = load i64, i64* %159, align 8
  %161 = bitcast %"struct.sh::(anonymous namespace)::StructureData"* %157 to i64*
  store i64 %160, i64* %161, align 8
  %162 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %151, i64 %21, i32 0, i32 1, i32 1
  %163 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %151, i64 %73, i32 0, i32 1, i32 1
  %164 = bitcast %"class.sh::TVector.100"* %162 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %164, i8 0, i64 24, i1 false) #7
  %165 = bitcast %"class.sh::TVector.100"* %163 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = bitcast %"class.sh::TVector.100"* %162 to i64*
  store i64 %166, i64* %167, align 8
  %168 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %151, i64 %73, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1
  %169 = bitcast i32** %168 to i64*
  %170 = load i64, i64* %169, align 8
  %171 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %151, i64 %21, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1
  %172 = bitcast i32** %171 to i64*
  store i64 %170, i64* %172, align 8
  %173 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %151, i64 %73, i32 0, i32 1, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %174 = bitcast i32** %173 to i64*
  %175 = load i64, i64* %174, align 8
  %176 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %151, i64 %21, i32 0, i32 1, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %177 = bitcast i32** %176 to i64*
  store i64 %175, i64* %177, align 8
  %178 = bitcast %"class.sh::TVector.100"* %163 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %178, i8 0, i64 24, i1 false) #7
  %179 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %9, align 8
  %180 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %179, i64 %73
  %181 = bitcast %"union.absl::container_internal::map_slot_type"* %180 to <2 x i64>*
  store <2 x i64> %143, <2 x i64>* %181, align 8
  %182 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %179, i64 %73, i32 0, i32 1, i32 1
  %183 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %179, i64 %73, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1
  %184 = bitcast i32** %183 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %184, i8 0, i64 16, i1 false) #7
  %185 = bitcast %"class.sh::TVector.100"* %182 to <2 x i64>*
  store <2 x i64> %146, <2 x i64>* %185, align 8
  %186 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %179, i64 %73, i32 0, i32 1, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %187 = bitcast i32** %186 to i64*
  store i64 %149, i64* %187, align 8
  %188 = add i64 %21, -1
  br label %189

189:                                              ; preds = %79, %140, %103, %19
  %190 = phi i64 [ %21, %19 ], [ %21, %79 ], [ %21, %103 ], [ %188, %140 ]
  %191 = add i64 %190, 1
  %192 = load i64, i64* %4, align 8
  %193 = icmp eq i64 %191, %192
  br i1 %193, label %11, label %19
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #13

declare void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIi14pool_allocatorIiEE8__appendEmRKi(%"class.std::__1::vector.101"*, i64, i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast i32* %2 to i8*
  %5 = bitcast i32* %2 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector.101", %"class.std::__1::vector.101"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.101", %"class.std::__1::vector.101"* %0, i64 0, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %8, %11
  %13 = ashr exact i64 %12, 2
  %14 = icmp ult i64 %13, %1
  br i1 %14, label %130, label %15

15:                                               ; preds = %3
  %16 = inttoptr i64 %11 to i32*
  %17 = inttoptr i64 %11 to i8*
  %18 = getelementptr inbounds i32, i32* %16, i64 %1
  %19 = icmp eq i64 %1, 0
  br i1 %19, label %128, label %20

20:                                               ; preds = %15
  %21 = shl nsw i64 %1, 2
  %22 = add i64 %21, -4
  %23 = lshr exact i64 %22, 2
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %24, 8
  br i1 %25, label %26, label %47

26:                                               ; preds = %105, %47, %20
  %27 = phi i32* [ %16, %47 ], [ %16, %20 ], [ %59, %105 ]
  %28 = ptrtoint i32* %27 to i64
  %29 = add i64 %1, -1
  %30 = getelementptr i32, i32* %16, i64 %29
  %31 = ptrtoint i32* %30 to i64
  %32 = sub i64 %31, %28
  %33 = lshr i64 %32, 2
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 7
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %44, label %37

37:                                               ; preds = %26, %37
  %38 = phi i32* [ %41, %37 ], [ %27, %26 ]
  %39 = phi i64 [ %42, %37 ], [ %35, %26 ]
  %40 = load i32, i32* %2, align 4
  store i32 %40, i32* %38, align 4
  %41 = getelementptr inbounds i32, i32* %38, i64 1
  %42 = add i64 %39, -1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %37, !llvm.loop !52

44:                                               ; preds = %37, %26
  %45 = phi i32* [ %27, %26 ], [ %41, %37 ]
  %46 = icmp ult i64 %32, 28
  br i1 %46, label %107, label %109

47:                                               ; preds = %20
  %48 = shl nsw i64 %1, 2
  %49 = add i64 %48, -4
  %50 = lshr exact i64 %49, 2
  %51 = add nuw nsw i64 %50, 1
  %52 = getelementptr i32, i32* %16, i64 %51
  %53 = getelementptr i8, i8* %5, i64 1
  %54 = icmp ugt i8* %53, %17
  %55 = icmp ugt i32* %52, %2
  %56 = and i1 %54, %55
  br i1 %56, label %26, label %57

57:                                               ; preds = %47
  %58 = and i64 %24, 9223372036854775800
  %59 = getelementptr i32, i32* %16, i64 %58
  %60 = add nsw i64 %58, -8
  %61 = lshr exact i64 %60, 3
  %62 = add nuw nsw i64 %61, 1
  %63 = and i64 %62, 1
  %64 = icmp eq i64 %60, 0
  br i1 %64, label %92, label %65

65:                                               ; preds = %57
  %66 = sub nuw nsw i64 %62, %63
  %67 = load i32, i32* %2, align 4, !alias.scope !53
  %68 = insertelement <4 x i32> undef, i32 %67, i32 0
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> zeroinitializer
  %70 = insertelement <4 x i32> undef, i32 %67, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = load i32, i32* %2, align 4, !alias.scope !53
  %73 = insertelement <4 x i32> undef, i32 %72, i32 0
  %74 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> zeroinitializer
  %75 = insertelement <4 x i32> undef, i32 %72, i32 0
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %77

77:                                               ; preds = %77, %65
  %78 = phi i64 [ 0, %65 ], [ %89, %77 ]
  %79 = phi i64 [ %66, %65 ], [ %90, %77 ]
  %80 = getelementptr i32, i32* %16, i64 %78
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %81, align 4, !alias.scope !56, !noalias !53
  %82 = getelementptr i32, i32* %80, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %83, align 4, !alias.scope !56, !noalias !53
  %84 = or i64 %78, 8
  %85 = getelementptr i32, i32* %16, i64 %84
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %86, align 4, !alias.scope !56, !noalias !53
  %87 = getelementptr i32, i32* %85, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %88, align 4, !alias.scope !56, !noalias !53
  %89 = add i64 %78, 16
  %90 = add i64 %79, -2
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %77, !llvm.loop !58

92:                                               ; preds = %77, %57
  %93 = phi i64 [ 0, %57 ], [ %89, %77 ]
  %94 = icmp eq i64 %63, 0
  br i1 %94, label %105, label %95

95:                                               ; preds = %92
  %96 = getelementptr i32, i32* %16, i64 %93
  %97 = load i32, i32* %2, align 4, !alias.scope !53
  %98 = insertelement <4 x i32> undef, i32 %97, i32 0
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i32> undef, i32 %97, i32 0
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> zeroinitializer
  %102 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %102, align 4, !alias.scope !56, !noalias !53
  %103 = getelementptr i32, i32* %96, i64 4
  %104 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %104, align 4, !alias.scope !56, !noalias !53
  br label %105

105:                                              ; preds = %92, %95
  %106 = icmp eq i64 %24, %58
  br i1 %106, label %107, label %26

107:                                              ; preds = %44, %109, %105
  %108 = ptrtoint i32* %18 to i64
  br label %128

109:                                              ; preds = %44, %109
  %110 = phi i32* [ %126, %109 ], [ %45, %44 ]
  %111 = load i32, i32* %2, align 4
  store i32 %111, i32* %110, align 4
  %112 = getelementptr inbounds i32, i32* %110, i64 1
  %113 = load i32, i32* %2, align 4
  store i32 %113, i32* %112, align 4
  %114 = getelementptr inbounds i32, i32* %110, i64 2
  %115 = load i32, i32* %2, align 4
  store i32 %115, i32* %114, align 4
  %116 = getelementptr inbounds i32, i32* %110, i64 3
  %117 = load i32, i32* %2, align 4
  store i32 %117, i32* %116, align 4
  %118 = getelementptr inbounds i32, i32* %110, i64 4
  %119 = load i32, i32* %2, align 4
  store i32 %119, i32* %118, align 4
  %120 = getelementptr inbounds i32, i32* %110, i64 5
  %121 = load i32, i32* %2, align 4
  store i32 %121, i32* %120, align 4
  %122 = getelementptr inbounds i32, i32* %110, i64 6
  %123 = load i32, i32* %2, align 4
  store i32 %123, i32* %122, align 4
  %124 = getelementptr inbounds i32, i32* %110, i64 7
  %125 = load i32, i32* %2, align 4
  store i32 %125, i32* %124, align 4
  %126 = getelementptr inbounds i32, i32* %110, i64 8
  %127 = icmp eq i32* %126, %18
  br i1 %127, label %107, label %109, !llvm.loop !59

128:                                              ; preds = %15, %107
  %129 = phi i64 [ %108, %107 ], [ %11, %15 ]
  store i64 %129, i64* %10, align 8
  ret void

130:                                              ; preds = %3
  %131 = bitcast %"class.std::__1::vector.101"* %0 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = sub i64 %11, %132
  %134 = ashr exact i64 %133, 2
  %135 = add i64 %134, %1
  %136 = icmp ugt i64 %135, 4611686018427387903
  br i1 %136, label %137, label %139

137:                                              ; preds = %130
  %138 = bitcast %"class.std::__1::vector.101"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %138) #17
  unreachable

139:                                              ; preds = %130
  %140 = sub i64 %8, %132
  %141 = ashr exact i64 %140, 2
  %142 = icmp ult i64 %141, 2305843009213693951
  br i1 %142, label %143, label %148

143:                                              ; preds = %139
  %144 = ashr exact i64 %140, 1
  %145 = icmp ult i64 %144, %135
  %146 = select i1 %145, i64 %135, i64 %144
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %154, label %148

148:                                              ; preds = %139, %143
  %149 = phi i64 [ %146, %143 ], [ 4611686018427387903, %139 ]
  %150 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %151 = shl i64 %149, 2
  %152 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %150, i64 %151) #7
  %153 = bitcast i8* %152 to i32*
  br label %154

154:                                              ; preds = %143, %148
  %155 = phi i64 [ %149, %148 ], [ 0, %143 ]
  %156 = phi i32* [ %153, %148 ], [ null, %143 ]
  %157 = getelementptr inbounds i32, i32* %156, i64 %134
  %158 = getelementptr inbounds i32, i32* %156, i64 %155
  %159 = getelementptr inbounds i32, i32* %157, i64 %1
  %160 = shl nsw i64 %1, 2
  %161 = add i64 %160, -4
  %162 = lshr exact i64 %161, 2
  %163 = add nuw nsw i64 %162, 1
  %164 = icmp ult i64 %163, 8
  br i1 %164, label %227, label %165

165:                                              ; preds = %154
  %166 = bitcast i32* %157 to i8*
  %167 = shl nsw i64 %1, 2
  %168 = add i64 %167, -4
  %169 = lshr exact i64 %168, 2
  %170 = add nsw i64 %134, %169
  %171 = add i64 %170, 1
  %172 = getelementptr i32, i32* %156, i64 %171
  %173 = getelementptr i8, i8* %4, i64 1
  %174 = icmp ugt i8* %173, %166
  %175 = icmp ugt i32* %172, %2
  %176 = and i1 %174, %175
  br i1 %176, label %227, label %177

177:                                              ; preds = %165
  %178 = and i64 %163, 9223372036854775800
  %179 = getelementptr i32, i32* %157, i64 %178
  %180 = add nsw i64 %178, -8
  %181 = lshr exact i64 %180, 3
  %182 = add nuw nsw i64 %181, 1
  %183 = and i64 %182, 1
  %184 = icmp eq i64 %180, 0
  br i1 %184, label %212, label %185

185:                                              ; preds = %177
  %186 = sub nuw nsw i64 %182, %183
  %187 = load i32, i32* %2, align 4, !alias.scope !60
  %188 = insertelement <4 x i32> undef, i32 %187, i32 0
  %189 = shufflevector <4 x i32> %188, <4 x i32> undef, <4 x i32> zeroinitializer
  %190 = insertelement <4 x i32> undef, i32 %187, i32 0
  %191 = shufflevector <4 x i32> %190, <4 x i32> undef, <4 x i32> zeroinitializer
  %192 = load i32, i32* %2, align 4, !alias.scope !60
  %193 = insertelement <4 x i32> undef, i32 %192, i32 0
  %194 = shufflevector <4 x i32> %193, <4 x i32> undef, <4 x i32> zeroinitializer
  %195 = insertelement <4 x i32> undef, i32 %192, i32 0
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %197

197:                                              ; preds = %197, %185
  %198 = phi i64 [ 0, %185 ], [ %209, %197 ]
  %199 = phi i64 [ %186, %185 ], [ %210, %197 ]
  %200 = getelementptr i32, i32* %157, i64 %198
  %201 = bitcast i32* %200 to <4 x i32>*
  store <4 x i32> %189, <4 x i32>* %201, align 4, !alias.scope !63, !noalias !60
  %202 = getelementptr i32, i32* %200, i64 4
  %203 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %191, <4 x i32>* %203, align 4, !alias.scope !63, !noalias !60
  %204 = or i64 %198, 8
  %205 = getelementptr i32, i32* %157, i64 %204
  %206 = bitcast i32* %205 to <4 x i32>*
  store <4 x i32> %194, <4 x i32>* %206, align 4, !alias.scope !63, !noalias !60
  %207 = getelementptr i32, i32* %205, i64 4
  %208 = bitcast i32* %207 to <4 x i32>*
  store <4 x i32> %196, <4 x i32>* %208, align 4, !alias.scope !63, !noalias !60
  %209 = add i64 %198, 16
  %210 = add i64 %199, -2
  %211 = icmp eq i64 %210, 0
  br i1 %211, label %212, label %197, !llvm.loop !65

212:                                              ; preds = %197, %177
  %213 = phi i64 [ 0, %177 ], [ %209, %197 ]
  %214 = icmp eq i64 %183, 0
  br i1 %214, label %225, label %215

215:                                              ; preds = %212
  %216 = getelementptr i32, i32* %157, i64 %213
  %217 = load i32, i32* %2, align 4, !alias.scope !60
  %218 = insertelement <4 x i32> undef, i32 %217, i32 0
  %219 = shufflevector <4 x i32> %218, <4 x i32> undef, <4 x i32> zeroinitializer
  %220 = insertelement <4 x i32> undef, i32 %217, i32 0
  %221 = shufflevector <4 x i32> %220, <4 x i32> undef, <4 x i32> zeroinitializer
  %222 = bitcast i32* %216 to <4 x i32>*
  store <4 x i32> %219, <4 x i32>* %222, align 4, !alias.scope !63, !noalias !60
  %223 = getelementptr i32, i32* %216, i64 4
  %224 = bitcast i32* %223 to <4 x i32>*
  store <4 x i32> %221, <4 x i32>* %224, align 4, !alias.scope !63, !noalias !60
  br label %225

225:                                              ; preds = %212, %215
  %226 = icmp eq i64 %163, %178
  br i1 %226, label %268, label %227

227:                                              ; preds = %225, %165, %154
  %228 = phi i32* [ %157, %165 ], [ %157, %154 ], [ %179, %225 ]
  %229 = ptrtoint i32* %228 to i64
  %230 = add i64 %134, %1
  %231 = add i64 %230, -1
  %232 = getelementptr i32, i32* %156, i64 %231
  %233 = ptrtoint i32* %232 to i64
  %234 = sub i64 %233, %229
  %235 = lshr i64 %234, 2
  %236 = add nuw nsw i64 %235, 1
  %237 = and i64 %236, 7
  %238 = icmp eq i64 %237, 0
  br i1 %238, label %246, label %239

239:                                              ; preds = %227, %239
  %240 = phi i32* [ %243, %239 ], [ %228, %227 ]
  %241 = phi i64 [ %244, %239 ], [ %237, %227 ]
  %242 = load i32, i32* %2, align 4
  store i32 %242, i32* %240, align 4
  %243 = getelementptr inbounds i32, i32* %240, i64 1
  %244 = add i64 %241, -1
  %245 = icmp eq i64 %244, 0
  br i1 %245, label %246, label %239, !llvm.loop !66

246:                                              ; preds = %239, %227
  %247 = phi i32* [ %228, %227 ], [ %243, %239 ]
  %248 = icmp ult i64 %234, 28
  br i1 %248, label %268, label %249

249:                                              ; preds = %246, %249
  %250 = phi i32* [ %266, %249 ], [ %247, %246 ]
  %251 = load i32, i32* %2, align 4
  store i32 %251, i32* %250, align 4
  %252 = getelementptr inbounds i32, i32* %250, i64 1
  %253 = load i32, i32* %2, align 4
  store i32 %253, i32* %252, align 4
  %254 = getelementptr inbounds i32, i32* %250, i64 2
  %255 = load i32, i32* %2, align 4
  store i32 %255, i32* %254, align 4
  %256 = getelementptr inbounds i32, i32* %250, i64 3
  %257 = load i32, i32* %2, align 4
  store i32 %257, i32* %256, align 4
  %258 = getelementptr inbounds i32, i32* %250, i64 4
  %259 = load i32, i32* %2, align 4
  store i32 %259, i32* %258, align 4
  %260 = getelementptr inbounds i32, i32* %250, i64 5
  %261 = load i32, i32* %2, align 4
  store i32 %261, i32* %260, align 4
  %262 = getelementptr inbounds i32, i32* %250, i64 6
  %263 = load i32, i32* %2, align 4
  store i32 %263, i32* %262, align 4
  %264 = getelementptr inbounds i32, i32* %250, i64 7
  %265 = load i32, i32* %2, align 4
  store i32 %265, i32* %264, align 4
  %266 = getelementptr inbounds i32, i32* %250, i64 8
  %267 = icmp eq i32* %159, %266
  br i1 %267, label %268, label %249, !llvm.loop !67

268:                                              ; preds = %246, %249, %225
  %269 = ptrtoint i32* %158 to i64
  %270 = ptrtoint i32* %159 to i64
  %271 = getelementptr inbounds %"class.std::__1::vector.101", %"class.std::__1::vector.101"* %0, i64 0, i32 0, i32 0
  %272 = load i32*, i32** %271, align 8
  %273 = ptrtoint i32* %272 to i64
  %274 = load i32*, i32** %9, align 8
  %275 = icmp eq i32* %274, %272
  br i1 %275, label %427, label %276

276:                                              ; preds = %268
  %277 = getelementptr i32, i32* %274, i64 -1
  %278 = ptrtoint i32* %277 to i64
  %279 = sub i64 %278, %273
  %280 = lshr i64 %279, 2
  %281 = add nuw nsw i64 %280, 1
  %282 = icmp ult i64 %281, 8
  br i1 %282, label %375, label %283

283:                                              ; preds = %276
  %284 = getelementptr i32, i32* %274, i64 -1
  %285 = ptrtoint i32* %284 to i64
  %286 = sub i64 %285, %273
  %287 = lshr i64 %286, 2
  %288 = xor i64 %287, -1
  %289 = add nsw i64 %134, %288
  %290 = getelementptr i32, i32* %156, i64 %289
  %291 = xor i64 %287, -1
  %292 = getelementptr i32, i32* %274, i64 %291
  %293 = icmp ult i32* %290, %274
  %294 = icmp ult i32* %292, %157
  %295 = and i1 %293, %294
  br i1 %295, label %375, label %296

296:                                              ; preds = %283
  %297 = and i64 %281, 9223372036854775800
  %298 = sub nsw i64 0, %297
  %299 = getelementptr i32, i32* %157, i64 %298
  %300 = sub nsw i64 0, %297
  %301 = getelementptr i32, i32* %274, i64 %300
  %302 = add nsw i64 %297, -8
  %303 = lshr exact i64 %302, 3
  %304 = add nuw nsw i64 %303, 1
  %305 = and i64 %304, 1
  %306 = icmp eq i64 %302, 0
  br i1 %306, label %353, label %307

307:                                              ; preds = %296
  %308 = sub nuw nsw i64 %304, %305
  %309 = getelementptr i32, i32* %157, i64 -1
  %310 = getelementptr i32, i32* %274, i64 -1
  %311 = getelementptr i32, i32* %157, i64 -1
  %312 = getelementptr i32, i32* %274, i64 -1
  br label %313

313:                                              ; preds = %313, %307
  %314 = phi i64 [ 0, %307 ], [ %348, %313 ]
  %315 = phi i64 [ %308, %307 ], [ %349, %313 ]
  %316 = sub i64 0, %314
  %317 = sub i64 0, %314
  %318 = getelementptr inbounds i32, i32* %309, i64 %316
  %319 = getelementptr inbounds i32, i32* %310, i64 %317
  %320 = getelementptr inbounds i32, i32* %319, i64 -3
  %321 = bitcast i32* %320 to <4 x i32>*
  %322 = load <4 x i32>, <4 x i32>* %321, align 4, !alias.scope !68
  %323 = getelementptr inbounds i32, i32* %319, i64 -4
  %324 = getelementptr inbounds i32, i32* %323, i64 -3
  %325 = bitcast i32* %324 to <4 x i32>*
  %326 = load <4 x i32>, <4 x i32>* %325, align 4, !alias.scope !68
  %327 = getelementptr inbounds i32, i32* %318, i64 -3
  %328 = bitcast i32* %327 to <4 x i32>*
  store <4 x i32> %322, <4 x i32>* %328, align 4, !alias.scope !71, !noalias !68
  %329 = getelementptr inbounds i32, i32* %318, i64 -4
  %330 = getelementptr inbounds i32, i32* %329, i64 -3
  %331 = bitcast i32* %330 to <4 x i32>*
  store <4 x i32> %326, <4 x i32>* %331, align 4, !alias.scope !71, !noalias !68
  %332 = sub nuw nsw i64 -8, %314
  %333 = sub nuw nsw i64 -8, %314
  %334 = getelementptr inbounds i32, i32* %311, i64 %332
  %335 = getelementptr inbounds i32, i32* %312, i64 %333
  %336 = getelementptr inbounds i32, i32* %335, i64 -3
  %337 = bitcast i32* %336 to <4 x i32>*
  %338 = load <4 x i32>, <4 x i32>* %337, align 4, !alias.scope !68
  %339 = getelementptr inbounds i32, i32* %335, i64 -4
  %340 = getelementptr inbounds i32, i32* %339, i64 -3
  %341 = bitcast i32* %340 to <4 x i32>*
  %342 = load <4 x i32>, <4 x i32>* %341, align 4, !alias.scope !68
  %343 = getelementptr inbounds i32, i32* %334, i64 -3
  %344 = bitcast i32* %343 to <4 x i32>*
  store <4 x i32> %338, <4 x i32>* %344, align 4, !alias.scope !71, !noalias !68
  %345 = getelementptr inbounds i32, i32* %334, i64 -4
  %346 = getelementptr inbounds i32, i32* %345, i64 -3
  %347 = bitcast i32* %346 to <4 x i32>*
  store <4 x i32> %342, <4 x i32>* %347, align 4, !alias.scope !71, !noalias !68
  %348 = add i64 %314, 16
  %349 = add i64 %315, -2
  %350 = icmp eq i64 %349, 0
  br i1 %350, label %351, label %313, !llvm.loop !73

351:                                              ; preds = %313
  %352 = sub nuw nsw i64 -16, %314
  br label %353

353:                                              ; preds = %351, %296
  %354 = phi i64 [ 0, %296 ], [ %352, %351 ]
  %355 = icmp eq i64 %305, 0
  br i1 %355, label %373, label %356

356:                                              ; preds = %353
  %357 = getelementptr i32, i32* %157, i64 -1
  %358 = getelementptr i32, i32* %274, i64 -1
  %359 = getelementptr inbounds i32, i32* %357, i64 %354
  %360 = getelementptr inbounds i32, i32* %358, i64 %354
  %361 = getelementptr inbounds i32, i32* %360, i64 -3
  %362 = bitcast i32* %361 to <4 x i32>*
  %363 = load <4 x i32>, <4 x i32>* %362, align 4, !alias.scope !68
  %364 = getelementptr inbounds i32, i32* %360, i64 -4
  %365 = getelementptr inbounds i32, i32* %364, i64 -3
  %366 = bitcast i32* %365 to <4 x i32>*
  %367 = load <4 x i32>, <4 x i32>* %366, align 4, !alias.scope !68
  %368 = getelementptr inbounds i32, i32* %359, i64 -3
  %369 = bitcast i32* %368 to <4 x i32>*
  store <4 x i32> %363, <4 x i32>* %369, align 4, !alias.scope !71, !noalias !68
  %370 = getelementptr inbounds i32, i32* %359, i64 -4
  %371 = getelementptr inbounds i32, i32* %370, i64 -3
  %372 = bitcast i32* %371 to <4 x i32>*
  store <4 x i32> %367, <4 x i32>* %372, align 4, !alias.scope !71, !noalias !68
  br label %373

373:                                              ; preds = %353, %356
  %374 = icmp eq i64 %281, %297
  br i1 %374, label %427, label %375

375:                                              ; preds = %373, %283, %276
  %376 = phi i32* [ %157, %283 ], [ %157, %276 ], [ %299, %373 ]
  %377 = phi i32* [ %274, %283 ], [ %274, %276 ], [ %301, %373 ]
  %378 = getelementptr i32, i32* %377, i64 -1
  %379 = ptrtoint i32* %378 to i64
  %380 = sub i64 %379, %273
  %381 = lshr i64 %380, 2
  %382 = add nuw nsw i64 %381, 1
  %383 = and i64 %382, 7
  %384 = icmp eq i64 %383, 0
  br i1 %384, label %394, label %385

385:                                              ; preds = %375, %385
  %386 = phi i32* [ %389, %385 ], [ %376, %375 ]
  %387 = phi i32* [ %390, %385 ], [ %377, %375 ]
  %388 = phi i64 [ %392, %385 ], [ %383, %375 ]
  %389 = getelementptr inbounds i32, i32* %386, i64 -1
  %390 = getelementptr inbounds i32, i32* %387, i64 -1
  %391 = load i32, i32* %390, align 4
  store i32 %391, i32* %389, align 4
  %392 = add i64 %388, -1
  %393 = icmp eq i64 %392, 0
  br i1 %393, label %394, label %385, !llvm.loop !74

394:                                              ; preds = %385, %375
  %395 = phi i32* [ undef, %375 ], [ %389, %385 ]
  %396 = phi i32* [ %376, %375 ], [ %389, %385 ]
  %397 = phi i32* [ %377, %375 ], [ %390, %385 ]
  %398 = icmp ult i64 %380, 28
  br i1 %398, label %427, label %399

399:                                              ; preds = %394, %399
  %400 = phi i32* [ %423, %399 ], [ %396, %394 ]
  %401 = phi i32* [ %424, %399 ], [ %397, %394 ]
  %402 = getelementptr inbounds i32, i32* %400, i64 -1
  %403 = getelementptr inbounds i32, i32* %401, i64 -1
  %404 = load i32, i32* %403, align 4
  store i32 %404, i32* %402, align 4
  %405 = getelementptr inbounds i32, i32* %400, i64 -2
  %406 = getelementptr inbounds i32, i32* %401, i64 -2
  %407 = load i32, i32* %406, align 4
  store i32 %407, i32* %405, align 4
  %408 = getelementptr inbounds i32, i32* %400, i64 -3
  %409 = getelementptr inbounds i32, i32* %401, i64 -3
  %410 = load i32, i32* %409, align 4
  store i32 %410, i32* %408, align 4
  %411 = getelementptr inbounds i32, i32* %400, i64 -4
  %412 = getelementptr inbounds i32, i32* %401, i64 -4
  %413 = load i32, i32* %412, align 4
  store i32 %413, i32* %411, align 4
  %414 = getelementptr inbounds i32, i32* %400, i64 -5
  %415 = getelementptr inbounds i32, i32* %401, i64 -5
  %416 = load i32, i32* %415, align 4
  store i32 %416, i32* %414, align 4
  %417 = getelementptr inbounds i32, i32* %400, i64 -6
  %418 = getelementptr inbounds i32, i32* %401, i64 -6
  %419 = load i32, i32* %418, align 4
  store i32 %419, i32* %417, align 4
  %420 = getelementptr inbounds i32, i32* %400, i64 -7
  %421 = getelementptr inbounds i32, i32* %401, i64 -7
  %422 = load i32, i32* %421, align 4
  store i32 %422, i32* %420, align 4
  %423 = getelementptr inbounds i32, i32* %400, i64 -8
  %424 = getelementptr inbounds i32, i32* %401, i64 -8
  %425 = load i32, i32* %424, align 4
  store i32 %425, i32* %423, align 4
  %426 = icmp eq i32* %424, %272
  br i1 %426, label %427, label %399, !llvm.loop !75

427:                                              ; preds = %394, %399, %373, %268
  %428 = phi i32* [ %157, %268 ], [ %299, %373 ], [ %395, %394 ], [ %423, %399 ]
  %429 = ptrtoint i32* %428 to i64
  store i64 %429, i64* %131, align 8
  store i64 %270, i64* %10, align 8
  store i64 %269, i64* %7, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2sh12_GLOBAL__N_130RewriteStructSamplersTraverser10enterArrayERKNS_5TTypeE(%"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"*, %"class.sh::TType"* nocapture readonly dereferenceable(184)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 10, i32 0
  %4 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 10, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %18, label %7

7:                                                ; preds = %2
  %8 = load i32*, i32** %3, align 8
  %9 = getelementptr inbounds i32, i32* %8, i64 %5
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 6, i32 0
  %11 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 6, i32 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 6, i32 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast i32** %11 to i64*
  %14 = bitcast %"class.std::__1::vector.23"* %10 to i64*
  %15 = bitcast i32** %12 to i64*
  %16 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %10, i64 0, i32 0, i32 0
  %17 = load i32*, i32** %11, align 8
  br label %19

18:                                               ; preds = %218, %2
  ret void

19:                                               ; preds = %7, %218
  %20 = phi i32* [ %17, %7 ], [ %219, %218 ]
  %21 = phi i32* [ %9, %7 ], [ %22, %218 ]
  %22 = getelementptr inbounds i32, i32* %21, i64 -1
  %23 = load i32, i32* %22, align 4
  %24 = load i32*, i32** %12, align 8
  %25 = icmp eq i32* %20, %24
  br i1 %25, label %29, label %26

26:                                               ; preds = %19
  store i32 %23, i32* %20, align 4
  %27 = getelementptr inbounds i32, i32* %20, i64 1
  %28 = ptrtoint i32* %27 to i64
  store i64 %28, i64* %13, align 8
  br label %218

29:                                               ; preds = %19
  %30 = ptrtoint i32* %24 to i64
  %31 = load i64, i64* %14, align 8
  %32 = sub i64 %30, %31
  %33 = ashr exact i64 %32, 2
  %34 = add nsw i64 %33, 1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.23"* %10 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #17
  unreachable

38:                                               ; preds = %29
  %39 = icmp ult i64 %33, 2305843009213693951
  br i1 %39, label %40, label %45

40:                                               ; preds = %38
  %41 = ashr exact i64 %32, 1
  %42 = icmp ult i64 %41, %34
  %43 = select i1 %42, i64 %34, i64 %41
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %51, label %45

45:                                               ; preds = %40, %38
  %46 = phi i64 [ %43, %40 ], [ 4611686018427387903, %38 ]
  %47 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %48 = shl i64 %46, 2
  %49 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %47, i64 %48) #7
  %50 = bitcast i8* %49 to i32*
  br label %51

51:                                               ; preds = %45, %40
  %52 = phi i64 [ %46, %45 ], [ 0, %40 ]
  %53 = phi i32* [ %50, %45 ], [ null, %40 ]
  %54 = getelementptr inbounds i32, i32* %53, i64 %33
  %55 = getelementptr inbounds i32, i32* %53, i64 %52
  %56 = ptrtoint i32* %55 to i64
  store i32 %23, i32* %54, align 4
  %57 = getelementptr inbounds i32, i32* %54, i64 1
  %58 = ptrtoint i32* %57 to i64
  %59 = load i32*, i32** %16, align 8
  %60 = ptrtoint i32* %59 to i64
  %61 = load i32*, i32** %11, align 8
  %62 = icmp eq i32* %61, %59
  br i1 %62, label %215, label %63

63:                                               ; preds = %51
  %64 = getelementptr i32, i32* %61, i64 -1
  %65 = ptrtoint i32* %64 to i64
  %66 = sub i64 %65, %60
  %67 = lshr i64 %66, 2
  %68 = add nuw nsw i64 %67, 1
  %69 = icmp ult i64 %68, 8
  br i1 %69, label %163, label %70

70:                                               ; preds = %63
  %71 = getelementptr i32, i32* %53, i64 -1
  %72 = getelementptr i32, i32* %61, i64 -1
  %73 = ptrtoint i32* %72 to i64
  %74 = sub i64 %73, %60
  %75 = lshr i64 %74, 2
  %76 = sub nsw i64 %33, %75
  %77 = getelementptr i32, i32* %71, i64 %76
  %78 = getelementptr i32, i32* %61, i64 -1
  %79 = sub nsw i64 0, %75
  %80 = getelementptr i32, i32* %78, i64 %79
  %81 = icmp ult i32* %77, %61
  %82 = icmp ult i32* %80, %54
  %83 = and i1 %81, %82
  br i1 %83, label %163, label %84

84:                                               ; preds = %70
  %85 = and i64 %68, 9223372036854775800
  %86 = sub nsw i64 0, %85
  %87 = getelementptr i32, i32* %54, i64 %86
  %88 = sub nsw i64 0, %85
  %89 = getelementptr i32, i32* %61, i64 %88
  %90 = add nsw i64 %85, -8
  %91 = lshr exact i64 %90, 3
  %92 = add nuw nsw i64 %91, 1
  %93 = and i64 %92, 1
  %94 = icmp eq i64 %90, 0
  br i1 %94, label %139, label %95

95:                                               ; preds = %84
  %96 = sub nuw nsw i64 %92, %93
  %97 = getelementptr i32, i32* %54, i64 -1
  %98 = getelementptr i32, i32* %61, i64 -1
  %99 = getelementptr i32, i32* %54, i64 -1
  %100 = getelementptr i32, i32* %61, i64 -1
  br label %101

101:                                              ; preds = %101, %95
  %102 = phi i64 [ 0, %95 ], [ %136, %101 ]
  %103 = phi i64 [ %96, %95 ], [ %137, %101 ]
  %104 = sub i64 0, %102
  %105 = sub i64 0, %102
  %106 = getelementptr inbounds i32, i32* %97, i64 %104
  %107 = getelementptr inbounds i32, i32* %98, i64 %105
  %108 = getelementptr inbounds i32, i32* %107, i64 -3
  %109 = bitcast i32* %108 to <4 x i32>*
  %110 = load <4 x i32>, <4 x i32>* %109, align 4, !alias.scope !76
  %111 = getelementptr inbounds i32, i32* %107, i64 -4
  %112 = getelementptr inbounds i32, i32* %111, i64 -3
  %113 = bitcast i32* %112 to <4 x i32>*
  %114 = load <4 x i32>, <4 x i32>* %113, align 4, !alias.scope !76
  %115 = getelementptr inbounds i32, i32* %106, i64 -3
  %116 = bitcast i32* %115 to <4 x i32>*
  store <4 x i32> %110, <4 x i32>* %116, align 4, !alias.scope !79, !noalias !76
  %117 = getelementptr inbounds i32, i32* %106, i64 -4
  %118 = getelementptr inbounds i32, i32* %117, i64 -3
  %119 = bitcast i32* %118 to <4 x i32>*
  store <4 x i32> %114, <4 x i32>* %119, align 4, !alias.scope !79, !noalias !76
  %120 = sub nuw nsw i64 -8, %102
  %121 = sub nuw nsw i64 -8, %102
  %122 = getelementptr inbounds i32, i32* %99, i64 %120
  %123 = getelementptr inbounds i32, i32* %100, i64 %121
  %124 = getelementptr inbounds i32, i32* %123, i64 -3
  %125 = bitcast i32* %124 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 4, !alias.scope !76
  %127 = getelementptr inbounds i32, i32* %123, i64 -4
  %128 = getelementptr inbounds i32, i32* %127, i64 -3
  %129 = bitcast i32* %128 to <4 x i32>*
  %130 = load <4 x i32>, <4 x i32>* %129, align 4, !alias.scope !76
  %131 = getelementptr inbounds i32, i32* %122, i64 -3
  %132 = bitcast i32* %131 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %132, align 4, !alias.scope !79, !noalias !76
  %133 = getelementptr inbounds i32, i32* %122, i64 -4
  %134 = getelementptr inbounds i32, i32* %133, i64 -3
  %135 = bitcast i32* %134 to <4 x i32>*
  store <4 x i32> %130, <4 x i32>* %135, align 4, !alias.scope !79, !noalias !76
  %136 = add i64 %102, 16
  %137 = add i64 %103, -2
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %101, !llvm.loop !81

139:                                              ; preds = %101, %84
  %140 = phi i64 [ 0, %84 ], [ %136, %101 ]
  %141 = icmp eq i64 %93, 0
  br i1 %141, label %161, label %142

142:                                              ; preds = %139
  %143 = sub i64 0, %140
  %144 = getelementptr i32, i32* %54, i64 -1
  %145 = sub i64 0, %140
  %146 = getelementptr i32, i32* %61, i64 -1
  %147 = getelementptr inbounds i32, i32* %144, i64 %143
  %148 = getelementptr inbounds i32, i32* %146, i64 %145
  %149 = getelementptr inbounds i32, i32* %148, i64 -3
  %150 = bitcast i32* %149 to <4 x i32>*
  %151 = load <4 x i32>, <4 x i32>* %150, align 4, !alias.scope !76
  %152 = getelementptr inbounds i32, i32* %148, i64 -4
  %153 = getelementptr inbounds i32, i32* %152, i64 -3
  %154 = bitcast i32* %153 to <4 x i32>*
  %155 = load <4 x i32>, <4 x i32>* %154, align 4, !alias.scope !76
  %156 = getelementptr inbounds i32, i32* %147, i64 -3
  %157 = bitcast i32* %156 to <4 x i32>*
  store <4 x i32> %151, <4 x i32>* %157, align 4, !alias.scope !79, !noalias !76
  %158 = getelementptr inbounds i32, i32* %147, i64 -4
  %159 = getelementptr inbounds i32, i32* %158, i64 -3
  %160 = bitcast i32* %159 to <4 x i32>*
  store <4 x i32> %155, <4 x i32>* %160, align 4, !alias.scope !79, !noalias !76
  br label %161

161:                                              ; preds = %139, %142
  %162 = icmp eq i64 %68, %85
  br i1 %162, label %215, label %163

163:                                              ; preds = %161, %70, %63
  %164 = phi i32* [ %54, %70 ], [ %54, %63 ], [ %87, %161 ]
  %165 = phi i32* [ %61, %70 ], [ %61, %63 ], [ %89, %161 ]
  %166 = getelementptr i32, i32* %165, i64 -1
  %167 = ptrtoint i32* %166 to i64
  %168 = sub i64 %167, %60
  %169 = lshr i64 %168, 2
  %170 = add nuw nsw i64 %169, 1
  %171 = and i64 %170, 7
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %182, label %173

173:                                              ; preds = %163, %173
  %174 = phi i32* [ %177, %173 ], [ %164, %163 ]
  %175 = phi i32* [ %178, %173 ], [ %165, %163 ]
  %176 = phi i64 [ %180, %173 ], [ %171, %163 ]
  %177 = getelementptr inbounds i32, i32* %174, i64 -1
  %178 = getelementptr inbounds i32, i32* %175, i64 -1
  %179 = load i32, i32* %178, align 4
  store i32 %179, i32* %177, align 4
  %180 = add i64 %176, -1
  %181 = icmp eq i64 %180, 0
  br i1 %181, label %182, label %173, !llvm.loop !82

182:                                              ; preds = %173, %163
  %183 = phi i32* [ undef, %163 ], [ %177, %173 ]
  %184 = phi i32* [ %164, %163 ], [ %177, %173 ]
  %185 = phi i32* [ %165, %163 ], [ %178, %173 ]
  %186 = icmp ult i64 %168, 28
  br i1 %186, label %215, label %187

187:                                              ; preds = %182, %187
  %188 = phi i32* [ %211, %187 ], [ %184, %182 ]
  %189 = phi i32* [ %212, %187 ], [ %185, %182 ]
  %190 = getelementptr inbounds i32, i32* %188, i64 -1
  %191 = getelementptr inbounds i32, i32* %189, i64 -1
  %192 = load i32, i32* %191, align 4
  store i32 %192, i32* %190, align 4
  %193 = getelementptr inbounds i32, i32* %188, i64 -2
  %194 = getelementptr inbounds i32, i32* %189, i64 -2
  %195 = load i32, i32* %194, align 4
  store i32 %195, i32* %193, align 4
  %196 = getelementptr inbounds i32, i32* %188, i64 -3
  %197 = getelementptr inbounds i32, i32* %189, i64 -3
  %198 = load i32, i32* %197, align 4
  store i32 %198, i32* %196, align 4
  %199 = getelementptr inbounds i32, i32* %188, i64 -4
  %200 = getelementptr inbounds i32, i32* %189, i64 -4
  %201 = load i32, i32* %200, align 4
  store i32 %201, i32* %199, align 4
  %202 = getelementptr inbounds i32, i32* %188, i64 -5
  %203 = getelementptr inbounds i32, i32* %189, i64 -5
  %204 = load i32, i32* %203, align 4
  store i32 %204, i32* %202, align 4
  %205 = getelementptr inbounds i32, i32* %188, i64 -6
  %206 = getelementptr inbounds i32, i32* %189, i64 -6
  %207 = load i32, i32* %206, align 4
  store i32 %207, i32* %205, align 4
  %208 = getelementptr inbounds i32, i32* %188, i64 -7
  %209 = getelementptr inbounds i32, i32* %189, i64 -7
  %210 = load i32, i32* %209, align 4
  store i32 %210, i32* %208, align 4
  %211 = getelementptr inbounds i32, i32* %188, i64 -8
  %212 = getelementptr inbounds i32, i32* %189, i64 -8
  %213 = load i32, i32* %212, align 4
  store i32 %213, i32* %211, align 4
  %214 = icmp eq i32* %212, %59
  br i1 %214, label %215, label %187, !llvm.loop !83

215:                                              ; preds = %182, %187, %161, %51
  %216 = phi i32* [ %54, %51 ], [ %87, %161 ], [ %183, %182 ], [ %211, %187 ]
  %217 = ptrtoint i32* %216 to i64
  store i64 %217, i64* %14, align 8
  store i64 %58, i64* %13, align 8
  store i64 %56, i64* %15, align 8
  br label %218

218:                                              ; preds = %26, %215
  %219 = phi i32* [ %27, %26 ], [ %57, %215 ]
  %220 = load i32*, i32** %3, align 8
  %221 = icmp eq i32* %22, %220
  br i1 %221, label %18, label %19
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2sh12_GLOBAL__N_130RewriteStructSamplersTraverser20extractFieldSamplersERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKNS_6TFieldEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"*, %"class.std::__1::basic_string.112"* nocapture readonly dereferenceable(24), %"class.sh::TField"* nocapture readonly, %"class.sh::TVector"*) unnamed_addr #0 align 2 {
  %5 = alloca %"class.sh::TVector.22", align 8
  %6 = alloca %"class.sh::TSpan", align 8
  %7 = alloca %"class.sh::ImmutableStringBuilder", align 8
  %8 = alloca %"class.sh::ImmutableString", align 8
  %9 = alloca %"class.sh::ImmutableString", align 8
  %10 = alloca %"class.std::__1::basic_string.112", align 8
  %11 = alloca %"class.std::__1::basic_string.112", align 8
  %12 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %2, i64 0, i32 0
  %13 = load %"class.sh::TType"*, %"class.sh::TType"** %12, align 8
  %14 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %13, i64 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = add i32 %15, -8
  %17 = icmp ult i32 %16, 43
  br i1 %17, label %20, label %18

18:                                               ; preds = %4
  %19 = tail call zeroext i1 @_ZNK2sh5TType29isStructureContainingSamplersEv(%"class.sh::TType"* %13) #7
  br i1 %19, label %20, label %700

20:                                               ; preds = %18, %4
  %21 = bitcast %"class.std::__1::basic_string.112"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21) #7
  %22 = getelementptr inbounds %"class.std::__1::basic_string.112", %"class.std::__1::basic_string.112"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = getelementptr inbounds %"class.std::__1::basic_string.112", %"class.std::__1::basic_string.112"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %24 = bitcast %"class.std::__1::basic_string.112"* %11 to i8*
  %25 = bitcast %"class.std::__1::basic_string.112"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %24) #7
  %26 = getelementptr inbounds %"class.std::__1::basic_string.112", %"class.std::__1::basic_string.112"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = getelementptr inbounds %"class.std::__1::basic_string.112", %"class.std::__1::basic_string.112"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %28 = getelementptr inbounds %"class.std::__1::basic_string.112", %"class.std::__1::basic_string.112"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 0, i64 24, i1 false) #7, !alias.scope !84
  %29 = bitcast %"class.std::__1::basic_string.112"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %30 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %29, i64 0, i32 1, i32 0
  %31 = load i8, i8* %30, align 1, !noalias !84
  %32 = icmp slt i8 %31, 0
  %33 = getelementptr inbounds %"class.std::__1::basic_string.112", %"class.std::__1::basic_string.112"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %"class.std::__1::basic_string.112", %"class.std::__1::basic_string.112"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = zext i8 %31 to i64
  %38 = bitcast %"class.std::__1::basic_string.112"* %1 to i8*
  %39 = select i1 %32, i64 %34, i64 %37
  %40 = select i1 %32, i8* %36, i8* %38
  %41 = add i64 %39, 1
  %42 = icmp ugt i64 %41, -17
  br i1 %42, label %43, label %45

43:                                               ; preds = %20
  %44 = bitcast %"class.std::__1::basic_string.112"* %11 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %44) #17
  unreachable

45:                                               ; preds = %20
  %46 = icmp ult i64 %41, 23
  br i1 %46, label %52, label %47

47:                                               ; preds = %45
  %48 = add nuw i64 %39, 17
  %49 = and i64 %48, -16
  %50 = tail call i8* @_Znwm(i64 %49) #16
  store i8* %50, i8** %26, align 8, !alias.scope !84
  %51 = or i64 %49, -9223372036854775808
  store i64 %51, i64* %28, align 8, !alias.scope !84
  store i64 %39, i64* %27, align 8, !alias.scope !84
  br label %57

52:                                               ; preds = %45
  %53 = trunc i64 %39 to i8
  %54 = bitcast %"class.std::__1::basic_string.112"* %11 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %55 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %54, i64 0, i32 1, i32 0
  store i8 %53, i8* %55, align 1, !alias.scope !84
  %56 = icmp eq i64 %39, 0
  br i1 %56, label %59, label %57

57:                                               ; preds = %47, %52
  %58 = phi i8* [ %50, %47 ], [ %24, %52 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %58, i8* align 1 %40, i64 %39, i1 false) #7
  br label %59

59:                                               ; preds = %52, %57
  %60 = phi i8* [ %24, %52 ], [ %58, %57 ]
  %61 = getelementptr inbounds i8, i8* %60, i64 %39
  store i8 0, i8* %61, align 1
  %62 = call dereferenceable(24) %"class.std::__1::basic_string.112"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string.112"* nonnull %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i64 1) #7
  %63 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %2, i64 0, i32 1, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = icmp eq i8* %64, null
  %66 = select i1 %65, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i64 0, i64 0), i8* %64
  %67 = call dereferenceable(24) %"class.std::__1::basic_string.112"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.112"* nonnull %11, i8* %66) #7, !noalias !87
  %68 = bitcast %"class.std::__1::basic_string.112"* %67 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %21, i8* align 8 %68, i64 24, i1 false) #7
  call void @llvm.memset.p0i8.i64(i8* align 8 %68, i8 0, i64 24, i1 false) #7, !noalias !87
  %69 = bitcast %"class.std::__1::basic_string.112"* %11 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %70 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %69, i64 0, i32 1, i32 0
  %71 = load i8, i8* %70, align 1
  %72 = icmp slt i8 %71, 0
  br i1 %72, label %73, label %75

73:                                               ; preds = %59
  %74 = load i8*, i8** %26, align 8
  call void @_ZdlPv(i8* %74) #16
  br label %75

75:                                               ; preds = %59, %73
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %24) #7
  %76 = load i32, i32* %14, align 8
  %77 = add i32 %76, -8
  %78 = icmp ult i32 %77, 43
  br i1 %78, label %79, label %657

79:                                               ; preds = %75
  %80 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %81 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %80, i64 184) #7
  %82 = bitcast i8* %81 to %"class.sh::TType"*
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %82, %"class.sh::TType"* dereferenceable(184) %13) #7
  %83 = bitcast %"class.sh::TVector.22"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %83) #7
  %84 = getelementptr inbounds %"class.sh::TVector.22", %"class.sh::TVector.22"* %5, i64 0, i32 0, i32 0, i32 0
  %85 = getelementptr inbounds %"class.sh::TVector.22", %"class.sh::TVector.22"* %5, i64 0, i32 0, i32 0, i32 1
  %86 = getelementptr inbounds %"class.sh::TVector.22", %"class.sh::TVector.22"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %83, i8 0, i64 24, i1 false) #7
  %87 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 6, i32 0
  %88 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 6, i32 0, i32 0, i32 1
  %89 = bitcast i32** %88 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = bitcast %"class.std::__1::vector.23"* %87 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = sub i64 %90, %92
  %94 = bitcast i32** %86 to i64*
  %95 = bitcast %"class.sh::TVector.22"* %5 to i64*
  %96 = icmp eq i64 %93, 0
  br i1 %96, label %97, label %101

97:                                               ; preds = %79
  %98 = inttoptr i64 %92 to i32*
  %99 = inttoptr i64 %90 to i32*
  %100 = bitcast i32** %85 to i64*
  br label %113

101:                                              ; preds = %79
  %102 = ashr exact i64 %93, 2
  %103 = bitcast i32** %85 to i64*
  %104 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %105 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %104, i64 %93) #7
  %106 = bitcast i8* %105 to i32*
  %107 = ptrtoint i8* %105 to i64
  %108 = getelementptr inbounds i32, i32* %106, i64 %102
  %109 = ptrtoint i32* %108 to i64
  %110 = load i32*, i32** %88, align 8
  %111 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %87, i64 0, i32 0, i32 0
  %112 = load i32*, i32** %111, align 8
  store i64 %107, i64* %95, align 8
  store i64 %107, i64* %103, align 8
  store i64 %109, i64* %94, align 8
  br label %113

113:                                              ; preds = %97, %101
  %114 = phi i64* [ %100, %97 ], [ %103, %101 ]
  %115 = phi i64 [ 0, %97 ], [ %107, %101 ]
  %116 = phi i32* [ null, %97 ], [ %106, %101 ]
  %117 = phi i32* [ null, %97 ], [ %108, %101 ]
  %118 = phi i32* [ %98, %97 ], [ %112, %101 ]
  %119 = phi i32* [ %99, %97 ], [ %110, %101 ]
  %120 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %87, i64 0, i32 0, i32 0
  %121 = icmp eq i32* %119, %118
  br i1 %121, label %331, label %122

122:                                              ; preds = %113, %327
  %123 = phi i32* [ %328, %327 ], [ %117, %113 ]
  %124 = phi i32* [ %324, %327 ], [ %116, %113 ]
  %125 = phi i32* [ %126, %327 ], [ %119, %113 ]
  %126 = getelementptr inbounds i32, i32* %125, i64 -1
  %127 = icmp eq i32* %124, %123
  br i1 %127, label %132, label %128

128:                                              ; preds = %122
  %129 = load i32, i32* %126, align 4
  store i32 %129, i32* %124, align 4
  %130 = getelementptr inbounds i32, i32* %124, i64 1
  %131 = ptrtoint i32* %130 to i64
  store i64 %131, i64* %114, align 8
  br label %322

132:                                              ; preds = %122
  %133 = ptrtoint i32* %123 to i64
  %134 = load i64, i64* %95, align 8
  %135 = sub i64 %133, %134
  %136 = ashr exact i64 %135, 2
  %137 = add nsw i64 %136, 1
  %138 = icmp ugt i64 %137, 4611686018427387903
  br i1 %138, label %139, label %141

139:                                              ; preds = %132
  %140 = bitcast %"class.sh::TVector.22"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %140) #17
  unreachable

141:                                              ; preds = %132
  %142 = icmp ult i64 %136, 2305843009213693951
  br i1 %142, label %143, label %148

143:                                              ; preds = %141
  %144 = ashr exact i64 %135, 1
  %145 = icmp ult i64 %144, %137
  %146 = select i1 %145, i64 %137, i64 %144
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %154, label %148

148:                                              ; preds = %143, %141
  %149 = phi i64 [ %146, %143 ], [ 4611686018427387903, %141 ]
  %150 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %151 = shl i64 %149, 2
  %152 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %150, i64 %151) #7
  %153 = bitcast i8* %152 to i32*
  br label %154

154:                                              ; preds = %148, %143
  %155 = phi i64 [ %149, %148 ], [ 0, %143 ]
  %156 = phi i32* [ %153, %148 ], [ null, %143 ]
  %157 = getelementptr inbounds i32, i32* %156, i64 %136
  %158 = getelementptr inbounds i32, i32* %156, i64 %155
  %159 = ptrtoint i32* %158 to i64
  %160 = load i32, i32* %126, align 4
  store i32 %160, i32* %157, align 4
  %161 = getelementptr inbounds i32, i32* %157, i64 1
  %162 = ptrtoint i32* %161 to i64
  %163 = load i32*, i32** %84, align 8
  %164 = ptrtoint i32* %163 to i64
  %165 = load i32*, i32** %85, align 8
  %166 = icmp eq i32* %165, %163
  br i1 %166, label %319, label %167

167:                                              ; preds = %154
  %168 = getelementptr i32, i32* %165, i64 -1
  %169 = ptrtoint i32* %168 to i64
  %170 = sub i64 %169, %164
  %171 = lshr i64 %170, 2
  %172 = add nuw nsw i64 %171, 1
  %173 = icmp ult i64 %172, 8
  br i1 %173, label %267, label %174

174:                                              ; preds = %167
  %175 = getelementptr i32, i32* %156, i64 -1
  %176 = getelementptr i32, i32* %165, i64 -1
  %177 = ptrtoint i32* %176 to i64
  %178 = sub i64 %177, %164
  %179 = lshr i64 %178, 2
  %180 = sub nsw i64 %136, %179
  %181 = getelementptr i32, i32* %175, i64 %180
  %182 = getelementptr i32, i32* %165, i64 -1
  %183 = sub nsw i64 0, %179
  %184 = getelementptr i32, i32* %182, i64 %183
  %185 = icmp ult i32* %181, %165
  %186 = icmp ult i32* %184, %157
  %187 = and i1 %185, %186
  br i1 %187, label %267, label %188

188:                                              ; preds = %174
  %189 = and i64 %172, 9223372036854775800
  %190 = sub nsw i64 0, %189
  %191 = getelementptr i32, i32* %157, i64 %190
  %192 = sub nsw i64 0, %189
  %193 = getelementptr i32, i32* %165, i64 %192
  %194 = add nsw i64 %189, -8
  %195 = lshr exact i64 %194, 3
  %196 = add nuw nsw i64 %195, 1
  %197 = and i64 %196, 1
  %198 = icmp eq i64 %194, 0
  br i1 %198, label %243, label %199

199:                                              ; preds = %188
  %200 = sub nuw nsw i64 %196, %197
  %201 = getelementptr i32, i32* %157, i64 -1
  %202 = getelementptr i32, i32* %165, i64 -1
  %203 = getelementptr i32, i32* %157, i64 -1
  %204 = getelementptr i32, i32* %165, i64 -1
  br label %205

205:                                              ; preds = %205, %199
  %206 = phi i64 [ 0, %199 ], [ %240, %205 ]
  %207 = phi i64 [ %200, %199 ], [ %241, %205 ]
  %208 = sub i64 0, %206
  %209 = sub i64 0, %206
  %210 = getelementptr inbounds i32, i32* %201, i64 %208
  %211 = getelementptr inbounds i32, i32* %202, i64 %209
  %212 = getelementptr inbounds i32, i32* %211, i64 -3
  %213 = bitcast i32* %212 to <4 x i32>*
  %214 = load <4 x i32>, <4 x i32>* %213, align 4, !alias.scope !90
  %215 = getelementptr inbounds i32, i32* %211, i64 -4
  %216 = getelementptr inbounds i32, i32* %215, i64 -3
  %217 = bitcast i32* %216 to <4 x i32>*
  %218 = load <4 x i32>, <4 x i32>* %217, align 4, !alias.scope !90
  %219 = getelementptr inbounds i32, i32* %210, i64 -3
  %220 = bitcast i32* %219 to <4 x i32>*
  store <4 x i32> %214, <4 x i32>* %220, align 4, !alias.scope !93, !noalias !90
  %221 = getelementptr inbounds i32, i32* %210, i64 -4
  %222 = getelementptr inbounds i32, i32* %221, i64 -3
  %223 = bitcast i32* %222 to <4 x i32>*
  store <4 x i32> %218, <4 x i32>* %223, align 4, !alias.scope !93, !noalias !90
  %224 = sub nuw nsw i64 -8, %206
  %225 = sub nuw nsw i64 -8, %206
  %226 = getelementptr inbounds i32, i32* %203, i64 %224
  %227 = getelementptr inbounds i32, i32* %204, i64 %225
  %228 = getelementptr inbounds i32, i32* %227, i64 -3
  %229 = bitcast i32* %228 to <4 x i32>*
  %230 = load <4 x i32>, <4 x i32>* %229, align 4, !alias.scope !90
  %231 = getelementptr inbounds i32, i32* %227, i64 -4
  %232 = getelementptr inbounds i32, i32* %231, i64 -3
  %233 = bitcast i32* %232 to <4 x i32>*
  %234 = load <4 x i32>, <4 x i32>* %233, align 4, !alias.scope !90
  %235 = getelementptr inbounds i32, i32* %226, i64 -3
  %236 = bitcast i32* %235 to <4 x i32>*
  store <4 x i32> %230, <4 x i32>* %236, align 4, !alias.scope !93, !noalias !90
  %237 = getelementptr inbounds i32, i32* %226, i64 -4
  %238 = getelementptr inbounds i32, i32* %237, i64 -3
  %239 = bitcast i32* %238 to <4 x i32>*
  store <4 x i32> %234, <4 x i32>* %239, align 4, !alias.scope !93, !noalias !90
  %240 = add i64 %206, 16
  %241 = add i64 %207, -2
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %243, label %205, !llvm.loop !95

243:                                              ; preds = %205, %188
  %244 = phi i64 [ 0, %188 ], [ %240, %205 ]
  %245 = icmp eq i64 %197, 0
  br i1 %245, label %265, label %246

246:                                              ; preds = %243
  %247 = sub i64 0, %244
  %248 = getelementptr i32, i32* %157, i64 -1
  %249 = sub i64 0, %244
  %250 = getelementptr i32, i32* %165, i64 -1
  %251 = getelementptr inbounds i32, i32* %248, i64 %247
  %252 = getelementptr inbounds i32, i32* %250, i64 %249
  %253 = getelementptr inbounds i32, i32* %252, i64 -3
  %254 = bitcast i32* %253 to <4 x i32>*
  %255 = load <4 x i32>, <4 x i32>* %254, align 4, !alias.scope !90
  %256 = getelementptr inbounds i32, i32* %252, i64 -4
  %257 = getelementptr inbounds i32, i32* %256, i64 -3
  %258 = bitcast i32* %257 to <4 x i32>*
  %259 = load <4 x i32>, <4 x i32>* %258, align 4, !alias.scope !90
  %260 = getelementptr inbounds i32, i32* %251, i64 -3
  %261 = bitcast i32* %260 to <4 x i32>*
  store <4 x i32> %255, <4 x i32>* %261, align 4, !alias.scope !93, !noalias !90
  %262 = getelementptr inbounds i32, i32* %251, i64 -4
  %263 = getelementptr inbounds i32, i32* %262, i64 -3
  %264 = bitcast i32* %263 to <4 x i32>*
  store <4 x i32> %259, <4 x i32>* %264, align 4, !alias.scope !93, !noalias !90
  br label %265

265:                                              ; preds = %243, %246
  %266 = icmp eq i64 %172, %189
  br i1 %266, label %319, label %267

267:                                              ; preds = %265, %174, %167
  %268 = phi i32* [ %157, %174 ], [ %157, %167 ], [ %191, %265 ]
  %269 = phi i32* [ %165, %174 ], [ %165, %167 ], [ %193, %265 ]
  %270 = getelementptr i32, i32* %269, i64 -1
  %271 = ptrtoint i32* %270 to i64
  %272 = sub i64 %271, %164
  %273 = lshr i64 %272, 2
  %274 = add nuw nsw i64 %273, 1
  %275 = and i64 %274, 7
  %276 = icmp eq i64 %275, 0
  br i1 %276, label %286, label %277

277:                                              ; preds = %267, %277
  %278 = phi i32* [ %281, %277 ], [ %268, %267 ]
  %279 = phi i32* [ %282, %277 ], [ %269, %267 ]
  %280 = phi i64 [ %284, %277 ], [ %275, %267 ]
  %281 = getelementptr inbounds i32, i32* %278, i64 -1
  %282 = getelementptr inbounds i32, i32* %279, i64 -1
  %283 = load i32, i32* %282, align 4
  store i32 %283, i32* %281, align 4
  %284 = add i64 %280, -1
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %286, label %277, !llvm.loop !96

286:                                              ; preds = %277, %267
  %287 = phi i32* [ undef, %267 ], [ %281, %277 ]
  %288 = phi i32* [ %268, %267 ], [ %281, %277 ]
  %289 = phi i32* [ %269, %267 ], [ %282, %277 ]
  %290 = icmp ult i64 %272, 28
  br i1 %290, label %319, label %291

291:                                              ; preds = %286, %291
  %292 = phi i32* [ %315, %291 ], [ %288, %286 ]
  %293 = phi i32* [ %316, %291 ], [ %289, %286 ]
  %294 = getelementptr inbounds i32, i32* %292, i64 -1
  %295 = getelementptr inbounds i32, i32* %293, i64 -1
  %296 = load i32, i32* %295, align 4
  store i32 %296, i32* %294, align 4
  %297 = getelementptr inbounds i32, i32* %292, i64 -2
  %298 = getelementptr inbounds i32, i32* %293, i64 -2
  %299 = load i32, i32* %298, align 4
  store i32 %299, i32* %297, align 4
  %300 = getelementptr inbounds i32, i32* %292, i64 -3
  %301 = getelementptr inbounds i32, i32* %293, i64 -3
  %302 = load i32, i32* %301, align 4
  store i32 %302, i32* %300, align 4
  %303 = getelementptr inbounds i32, i32* %292, i64 -4
  %304 = getelementptr inbounds i32, i32* %293, i64 -4
  %305 = load i32, i32* %304, align 4
  store i32 %305, i32* %303, align 4
  %306 = getelementptr inbounds i32, i32* %292, i64 -5
  %307 = getelementptr inbounds i32, i32* %293, i64 -5
  %308 = load i32, i32* %307, align 4
  store i32 %308, i32* %306, align 4
  %309 = getelementptr inbounds i32, i32* %292, i64 -6
  %310 = getelementptr inbounds i32, i32* %293, i64 -6
  %311 = load i32, i32* %310, align 4
  store i32 %311, i32* %309, align 4
  %312 = getelementptr inbounds i32, i32* %292, i64 -7
  %313 = getelementptr inbounds i32, i32* %293, i64 -7
  %314 = load i32, i32* %313, align 4
  store i32 %314, i32* %312, align 4
  %315 = getelementptr inbounds i32, i32* %292, i64 -8
  %316 = getelementptr inbounds i32, i32* %293, i64 -8
  %317 = load i32, i32* %316, align 4
  store i32 %317, i32* %315, align 4
  %318 = icmp eq i32* %316, %163
  br i1 %318, label %319, label %291, !llvm.loop !97

319:                                              ; preds = %286, %291, %265, %154
  %320 = phi i32* [ %157, %154 ], [ %191, %265 ], [ %287, %286 ], [ %315, %291 ]
  %321 = ptrtoint i32* %320 to i64
  store i64 %321, i64* %95, align 8
  store i64 %162, i64* %114, align 8
  store i64 %159, i64* %94, align 8
  br label %322

322:                                              ; preds = %319, %128
  %323 = phi i64 [ %131, %128 ], [ %162, %319 ]
  %324 = phi i32* [ %130, %128 ], [ %161, %319 ]
  %325 = load i32*, i32** %120, align 8
  %326 = icmp eq i32* %126, %325
  br i1 %326, label %329, label %327

327:                                              ; preds = %322
  %328 = load i32*, i32** %86, align 8
  br label %122

329:                                              ; preds = %322
  %330 = load i64, i64* %95, align 8
  br label %331

331:                                              ; preds = %329, %113
  %332 = phi i64 [ %323, %329 ], [ %115, %113 ]
  %333 = phi i64 [ %330, %329 ], [ %115, %113 ]
  %334 = bitcast %"class.sh::TSpan"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %334) #7
  %335 = bitcast %"class.sh::TSpan"* %6 to i64*
  store i64 %333, i64* %335, align 8
  %336 = getelementptr inbounds %"class.sh::TSpan", %"class.sh::TSpan"* %6, i64 0, i32 1
  %337 = sub i64 %332, %333
  %338 = ashr exact i64 %337, 2
  store i64 %338, i64* %336, align 8
  call void @_ZN2sh5TType10makeArraysERKNS_5TSpanIKjEE(%"class.sh::TType"* %82, %"class.sh::TSpan"* nonnull dereferenceable(16) %6) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %334) #7
  %339 = bitcast %"class.sh::ImmutableStringBuilder"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %339) #7
  %340 = getelementptr inbounds %"class.sh::ImmutableStringBuilder", %"class.sh::ImmutableStringBuilder"* %7, i64 0, i32 0
  %341 = getelementptr inbounds %"class.sh::ImmutableStringBuilder", %"class.sh::ImmutableStringBuilder"* %7, i64 0, i32 1
  %342 = getelementptr inbounds %"class.sh::ImmutableStringBuilder", %"class.sh::ImmutableStringBuilder"* %7, i64 0, i32 2
  %343 = bitcast %"class.std::__1::basic_string.112"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %344 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %343, i64 0, i32 1, i32 0
  %345 = load i8, i8* %344, align 1
  %346 = icmp slt i8 %345, 0
  %347 = load i64, i64* %23, align 8
  %348 = zext i8 %345 to i64
  %349 = select i1 %346, i64 %347, i64 %348
  %350 = add i64 %349, 1
  store i64 0, i64* %340, align 8
  store i64 %350, i64* %341, align 8
  %351 = add i64 %349, 2
  %352 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %353 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %352, i64 %351) #7
  store i8* %353, i8** %342, align 8
  %354 = bitcast %"class.sh::ImmutableString"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %354) #7
  %355 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %8, i64 0, i32 0
  %356 = load i8*, i8** %22, align 8
  %357 = select i1 %346, i8* %356, i8* %21
  %358 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %359 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %358, i64 %350) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %359, i8* align 1 %357, i64 %350, i1 false) #7
  store i8* %359, i8** %355, align 8
  %360 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %8, i64 0, i32 1
  %361 = load i8, i8* %344, align 1
  %362 = icmp slt i8 %361, 0
  %363 = load i64, i64* %23, align 8
  %364 = zext i8 %361 to i64
  %365 = select i1 %362, i64 %363, i64 %364
  store i64 %365, i64* %360, align 8
  %366 = call dereferenceable(24) %"class.sh::ImmutableStringBuilder"* @_ZN2sh22ImmutableStringBuilderlsERKNS_15ImmutableStringE(%"class.sh::ImmutableStringBuilder"* nonnull %7, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %8) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %354) #7
  %367 = getelementptr inbounds i8, i8* %81, i64 8
  %368 = bitcast i8* %367 to i32*
  store i32 6, i32* %368, align 8
  %369 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %370 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %369, i64 40) #7
  %371 = bitcast i8* %370 to %"class.sh::TVariable"*
  %372 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 0, i32 8
  %373 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %372, align 8
  %374 = bitcast %"class.sh::ImmutableString"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %374) #7
  %375 = call { i8*, i64 } @_ZN2sh22ImmutableStringBuildercvNS_15ImmutableStringEEv(%"class.sh::ImmutableStringBuilder"* nonnull %7) #7
  %376 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %9, i64 0, i32 0
  %377 = extractvalue { i8*, i64 } %375, 0
  store i8* %377, i8** %376, align 8
  %378 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %9, i64 0, i32 1
  %379 = extractvalue { i8*, i64 } %375, 1
  store i64 %379, i64* %378, align 8
  call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %371, %"class.sh::TSymbolTable"* %373, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %9, %"class.sh::TType"* %82, i8 zeroext 2, i8 zeroext 0) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %374) #7
  %380 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %381 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %380, i64 32) #7
  %382 = bitcast i8* %381 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %382, %"class.sh::TVariable"* %371) #7
  %383 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %384 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %383, i64 56) #7
  %385 = bitcast i8* %384 to %"class.sh::TIntermDeclaration"*
  %386 = bitcast i8* %384 to i32 (...)***
  %387 = getelementptr inbounds i8, i8* %384, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %387, i8 0, i64 16, i1 false) #7
  %388 = getelementptr inbounds i8, i8* %384, i64 24
  %389 = bitcast i8* %388 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %386, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %389, align 8
  %390 = getelementptr inbounds i8, i8* %384, i64 32
  call void @llvm.memset.p0i8.i64(i8* align 8 %390, i8 0, i64 24, i1 false) #7
  %391 = bitcast i8* %381 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"* %385, %"class.sh::TIntermTyped"* %391) #7
  %392 = ptrtoint i8* %384 to i64
  %393 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 1
  %394 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %393, align 8
  %395 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %396 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %395, align 8
  %397 = icmp ult %"class.sh::TIntermNode"** %394, %396
  %398 = ptrtoint %"class.sh::TIntermNode"** %396 to i64
  br i1 %397, label %399, label %404

399:                                              ; preds = %331
  %400 = bitcast %"class.sh::TIntermNode"** %394 to i64*
  store i64 %392, i64* %400, align 8
  %401 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %394, i64 1
  %402 = ptrtoint %"class.sh::TIntermNode"** %401 to i64
  %403 = bitcast %"class.sh::TIntermNode"*** %393 to i64*
  store i64 %402, i64* %403, align 8
  br label %617

404:                                              ; preds = %331
  %405 = ptrtoint %"class.sh::TIntermNode"** %394 to i64
  %406 = bitcast %"class.sh::TIntermNode"*** %393 to i64*
  %407 = bitcast %"class.sh::TVector"* %3 to i64*
  %408 = load i64, i64* %407, align 8
  %409 = sub i64 %405, %408
  %410 = ashr exact i64 %409, 3
  %411 = add nsw i64 %410, 1
  %412 = icmp ugt i64 %411, 2305843009213693951
  br i1 %412, label %413, label %415

413:                                              ; preds = %404
  %414 = bitcast %"class.sh::TVector"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %414) #17
  unreachable

415:                                              ; preds = %404
  %416 = bitcast %"class.sh::TIntermNode"*** %395 to i64*
  %417 = sub i64 %398, %408
  %418 = ashr exact i64 %417, 3
  %419 = icmp ult i64 %418, 1152921504606846975
  br i1 %419, label %420, label %425

420:                                              ; preds = %415
  %421 = ashr exact i64 %417, 2
  %422 = icmp ult i64 %421, %411
  %423 = select i1 %422, i64 %411, i64 %421
  %424 = icmp eq i64 %423, 0
  br i1 %424, label %431, label %425

425:                                              ; preds = %420, %415
  %426 = phi i64 [ %423, %420 ], [ 2305843009213693951, %415 ]
  %427 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %428 = shl i64 %426, 3
  %429 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %427, i64 %428) #7
  %430 = bitcast i8* %429 to %"class.sh::TIntermNode"**
  br label %431

431:                                              ; preds = %425, %420
  %432 = phi i64 [ %426, %425 ], [ 0, %420 ]
  %433 = phi %"class.sh::TIntermNode"** [ %430, %425 ], [ null, %420 ]
  %434 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %433, i64 %410
  %435 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %433, i64 %432
  %436 = ptrtoint %"class.sh::TIntermNode"** %435 to i64
  %437 = bitcast %"class.sh::TIntermNode"** %434 to i64*
  store i64 %392, i64* %437, align 8
  %438 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %434, i64 1
  %439 = ptrtoint %"class.sh::TIntermNode"** %438 to i64
  %440 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 0
  %441 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %440, align 8
  %442 = ptrtoint %"class.sh::TIntermNode"** %441 to i64
  %443 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %393, align 8
  %444 = icmp eq %"class.sh::TIntermNode"** %443, %441
  br i1 %444, label %614, label %445

445:                                              ; preds = %431
  %446 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %443, i64 -1
  %447 = ptrtoint %"class.sh::TIntermNode"** %446 to i64
  %448 = sub i64 %447, %442
  %449 = lshr i64 %448, 3
  %450 = add nuw nsw i64 %449, 1
  %451 = icmp ult i64 %450, 4
  br i1 %451, label %544, label %452

452:                                              ; preds = %445
  %453 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %443, i64 -1
  %454 = ptrtoint %"class.sh::TIntermNode"** %453 to i64
  %455 = sub i64 %454, %442
  %456 = lshr i64 %455, 3
  %457 = xor i64 %456, -1
  %458 = add nsw i64 %410, %457
  %459 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %433, i64 %458
  %460 = xor i64 %456, -1
  %461 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %443, i64 %460
  %462 = icmp ult %"class.sh::TIntermNode"** %459, %443
  %463 = icmp ult %"class.sh::TIntermNode"** %461, %434
  %464 = and i1 %462, %463
  br i1 %464, label %544, label %465

465:                                              ; preds = %452
  %466 = and i64 %450, 4611686018427387900
  %467 = sub nsw i64 0, %466
  %468 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %434, i64 %467
  %469 = sub nsw i64 0, %466
  %470 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %443, i64 %469
  %471 = add nsw i64 %466, -4
  %472 = lshr exact i64 %471, 2
  %473 = add nuw nsw i64 %472, 1
  %474 = and i64 %473, 1
  %475 = icmp eq i64 %471, 0
  br i1 %475, label %522, label %476

476:                                              ; preds = %465
  %477 = sub nuw nsw i64 %473, %474
  %478 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %434, i64 -1
  %479 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %443, i64 -1
  %480 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %434, i64 -1
  %481 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %443, i64 -1
  br label %482

482:                                              ; preds = %482, %476
  %483 = phi i64 [ 0, %476 ], [ %517, %482 ]
  %484 = phi i64 [ %477, %476 ], [ %518, %482 ]
  %485 = sub i64 0, %483
  %486 = sub i64 0, %483
  %487 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %478, i64 %485
  %488 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %479, i64 %486
  %489 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %488, i64 -1
  %490 = bitcast %"class.sh::TIntermNode"** %489 to <2 x i64>*
  %491 = load <2 x i64>, <2 x i64>* %490, align 8, !alias.scope !98
  %492 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %488, i64 -2
  %493 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %492, i64 -1
  %494 = bitcast %"class.sh::TIntermNode"** %493 to <2 x i64>*
  %495 = load <2 x i64>, <2 x i64>* %494, align 8, !alias.scope !98
  %496 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %487, i64 -1
  %497 = bitcast %"class.sh::TIntermNode"** %496 to <2 x i64>*
  store <2 x i64> %491, <2 x i64>* %497, align 8, !alias.scope !101, !noalias !98
  %498 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %487, i64 -2
  %499 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %498, i64 -1
  %500 = bitcast %"class.sh::TIntermNode"** %499 to <2 x i64>*
  store <2 x i64> %495, <2 x i64>* %500, align 8, !alias.scope !101, !noalias !98
  %501 = sub nuw nsw i64 -4, %483
  %502 = sub nuw nsw i64 -4, %483
  %503 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %480, i64 %501
  %504 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %481, i64 %502
  %505 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %504, i64 -1
  %506 = bitcast %"class.sh::TIntermNode"** %505 to <2 x i64>*
  %507 = load <2 x i64>, <2 x i64>* %506, align 8, !alias.scope !98
  %508 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %504, i64 -2
  %509 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %508, i64 -1
  %510 = bitcast %"class.sh::TIntermNode"** %509 to <2 x i64>*
  %511 = load <2 x i64>, <2 x i64>* %510, align 8, !alias.scope !98
  %512 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %503, i64 -1
  %513 = bitcast %"class.sh::TIntermNode"** %512 to <2 x i64>*
  store <2 x i64> %507, <2 x i64>* %513, align 8, !alias.scope !101, !noalias !98
  %514 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %503, i64 -2
  %515 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %514, i64 -1
  %516 = bitcast %"class.sh::TIntermNode"** %515 to <2 x i64>*
  store <2 x i64> %511, <2 x i64>* %516, align 8, !alias.scope !101, !noalias !98
  %517 = add i64 %483, 8
  %518 = add i64 %484, -2
  %519 = icmp eq i64 %518, 0
  br i1 %519, label %520, label %482, !llvm.loop !103

520:                                              ; preds = %482
  %521 = sub nuw nsw i64 -8, %483
  br label %522

522:                                              ; preds = %520, %465
  %523 = phi i64 [ 0, %465 ], [ %521, %520 ]
  %524 = icmp eq i64 %474, 0
  br i1 %524, label %542, label %525

525:                                              ; preds = %522
  %526 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %434, i64 -1
  %527 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %443, i64 -1
  %528 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %526, i64 %523
  %529 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %527, i64 %523
  %530 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %529, i64 -1
  %531 = bitcast %"class.sh::TIntermNode"** %530 to <2 x i64>*
  %532 = load <2 x i64>, <2 x i64>* %531, align 8, !alias.scope !98
  %533 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %529, i64 -2
  %534 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %533, i64 -1
  %535 = bitcast %"class.sh::TIntermNode"** %534 to <2 x i64>*
  %536 = load <2 x i64>, <2 x i64>* %535, align 8, !alias.scope !98
  %537 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %528, i64 -1
  %538 = bitcast %"class.sh::TIntermNode"** %537 to <2 x i64>*
  store <2 x i64> %532, <2 x i64>* %538, align 8, !alias.scope !101, !noalias !98
  %539 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %528, i64 -2
  %540 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %539, i64 -1
  %541 = bitcast %"class.sh::TIntermNode"** %540 to <2 x i64>*
  store <2 x i64> %536, <2 x i64>* %541, align 8, !alias.scope !101, !noalias !98
  br label %542

542:                                              ; preds = %522, %525
  %543 = icmp eq i64 %450, %466
  br i1 %543, label %614, label %544

544:                                              ; preds = %542, %452, %445
  %545 = phi %"class.sh::TIntermNode"** [ %434, %452 ], [ %434, %445 ], [ %468, %542 ]
  %546 = phi %"class.sh::TIntermNode"** [ %443, %452 ], [ %443, %445 ], [ %470, %542 ]
  %547 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %546, i64 -1
  %548 = ptrtoint %"class.sh::TIntermNode"** %547 to i64
  %549 = sub i64 %548, %442
  %550 = lshr i64 %549, 3
  %551 = add nuw nsw i64 %550, 1
  %552 = and i64 %551, 7
  %553 = icmp eq i64 %552, 0
  br i1 %553, label %565, label %554

554:                                              ; preds = %544, %554
  %555 = phi %"class.sh::TIntermNode"** [ %558, %554 ], [ %545, %544 ]
  %556 = phi %"class.sh::TIntermNode"** [ %559, %554 ], [ %546, %544 ]
  %557 = phi i64 [ %563, %554 ], [ %552, %544 ]
  %558 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %555, i64 -1
  %559 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %556, i64 -1
  %560 = bitcast %"class.sh::TIntermNode"** %559 to i64*
  %561 = load i64, i64* %560, align 8
  %562 = bitcast %"class.sh::TIntermNode"** %558 to i64*
  store i64 %561, i64* %562, align 8
  %563 = add i64 %557, -1
  %564 = icmp eq i64 %563, 0
  br i1 %564, label %565, label %554, !llvm.loop !104

565:                                              ; preds = %554, %544
  %566 = phi %"class.sh::TIntermNode"** [ undef, %544 ], [ %558, %554 ]
  %567 = phi %"class.sh::TIntermNode"** [ %545, %544 ], [ %558, %554 ]
  %568 = phi %"class.sh::TIntermNode"** [ %546, %544 ], [ %559, %554 ]
  %569 = icmp ult i64 %549, 56
  br i1 %569, label %614, label %570

570:                                              ; preds = %565, %570
  %571 = phi %"class.sh::TIntermNode"** [ %608, %570 ], [ %567, %565 ]
  %572 = phi %"class.sh::TIntermNode"** [ %609, %570 ], [ %568, %565 ]
  %573 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %571, i64 -1
  %574 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %572, i64 -1
  %575 = bitcast %"class.sh::TIntermNode"** %574 to i64*
  %576 = load i64, i64* %575, align 8
  %577 = bitcast %"class.sh::TIntermNode"** %573 to i64*
  store i64 %576, i64* %577, align 8
  %578 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %571, i64 -2
  %579 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %572, i64 -2
  %580 = bitcast %"class.sh::TIntermNode"** %579 to i64*
  %581 = load i64, i64* %580, align 8
  %582 = bitcast %"class.sh::TIntermNode"** %578 to i64*
  store i64 %581, i64* %582, align 8
  %583 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %571, i64 -3
  %584 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %572, i64 -3
  %585 = bitcast %"class.sh::TIntermNode"** %584 to i64*
  %586 = load i64, i64* %585, align 8
  %587 = bitcast %"class.sh::TIntermNode"** %583 to i64*
  store i64 %586, i64* %587, align 8
  %588 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %571, i64 -4
  %589 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %572, i64 -4
  %590 = bitcast %"class.sh::TIntermNode"** %589 to i64*
  %591 = load i64, i64* %590, align 8
  %592 = bitcast %"class.sh::TIntermNode"** %588 to i64*
  store i64 %591, i64* %592, align 8
  %593 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %571, i64 -5
  %594 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %572, i64 -5
  %595 = bitcast %"class.sh::TIntermNode"** %594 to i64*
  %596 = load i64, i64* %595, align 8
  %597 = bitcast %"class.sh::TIntermNode"** %593 to i64*
  store i64 %596, i64* %597, align 8
  %598 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %571, i64 -6
  %599 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %572, i64 -6
  %600 = bitcast %"class.sh::TIntermNode"** %599 to i64*
  %601 = load i64, i64* %600, align 8
  %602 = bitcast %"class.sh::TIntermNode"** %598 to i64*
  store i64 %601, i64* %602, align 8
  %603 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %571, i64 -7
  %604 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %572, i64 -7
  %605 = bitcast %"class.sh::TIntermNode"** %604 to i64*
  %606 = load i64, i64* %605, align 8
  %607 = bitcast %"class.sh::TIntermNode"** %603 to i64*
  store i64 %606, i64* %607, align 8
  %608 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %571, i64 -8
  %609 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %572, i64 -8
  %610 = bitcast %"class.sh::TIntermNode"** %609 to i64*
  %611 = load i64, i64* %610, align 8
  %612 = bitcast %"class.sh::TIntermNode"** %608 to i64*
  store i64 %611, i64* %612, align 8
  %613 = icmp eq %"class.sh::TIntermNode"** %609, %441
  br i1 %613, label %614, label %570, !llvm.loop !105

614:                                              ; preds = %565, %570, %542, %431
  %615 = phi %"class.sh::TIntermNode"** [ %434, %431 ], [ %468, %542 ], [ %566, %565 ], [ %608, %570 ]
  %616 = ptrtoint %"class.sh::TIntermNode"** %615 to i64
  store i64 %616, i64* %407, align 8
  store i64 %439, i64* %406, align 8
  store i64 %436, i64* %416, align 8
  br label %617

617:                                              ; preds = %614, %399
  %618 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 5, i32 0
  %619 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map.90", %"class.absl::container_internal::raw_hash_map.90"* %618, i64 0, i32 0
  %620 = call { i64, i8 } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN2sh9TVariableEEENS0_10StringHashENS0_12StringHashEq2EqENS7_INS3_4pairIKS9_SD_EEEEE22find_or_prepare_insertIS9_EENSI_ImbEERKT_(%"class.absl::container_internal::raw_hash_set.91"* %619, %"class.std::__1::basic_string.112"* nonnull dereferenceable(24) %10) #7, !noalias !106
  %621 = extractvalue { i64, i8 } %620, 0
  %622 = extractvalue { i64, i8 } %620, 1
  %623 = and i8 %622, 1
  %624 = icmp eq i8 %623, 0
  br i1 %624, label %639, label %625

625:                                              ; preds = %617
  %626 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %627 = load %"union.absl::container_internal::map_slot_type.92"*, %"union.absl::container_internal::map_slot_type.92"** %626, align 8, !noalias !106
  %628 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %627, i64 %621
  %629 = load i8, i8* %344, align 1, !noalias !106
  %630 = icmp slt i8 %629, 0
  br i1 %630, label %633, label %631

631:                                              ; preds = %625
  %632 = bitcast %"union.absl::container_internal::map_slot_type.92"* %628 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %632, i8* nonnull align 8 %21, i64 24, i1 false) #7, !noalias !106
  br label %637

633:                                              ; preds = %625
  %634 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %628, i64 0, i32 0, i32 0
  %635 = load i8*, i8** %22, align 8, !noalias !106
  %636 = load i64, i64* %23, align 8, !noalias !106
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string.112"* %634, i8* %635, i64 %636) #7, !noalias !106
  br label %637

637:                                              ; preds = %633, %631
  %638 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %627, i64 %621, i32 0, i32 1
  store %"class.sh::TVariable"* null, %"class.sh::TVariable"** %638, align 8, !noalias !106
  br label %639

639:                                              ; preds = %637, %617
  %640 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map.90", %"class.absl::container_internal::raw_hash_map.90"* %618, i64 0, i32 0, i32 0
  %641 = load i8*, i8** %640, align 8, !noalias !106
  %642 = getelementptr inbounds i8, i8* %641, i64 %621
  %643 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %644 = load %"union.absl::container_internal::map_slot_type.92"*, %"union.absl::container_internal::map_slot_type.92"** %643, align 8, !noalias !106
  %645 = icmp ne i8* %642, null
  call void @llvm.assume(i1 %645) #7, !noalias !106
  %646 = load i8, i8* %642, align 1
  %647 = icmp sgt i8 %646, -1
  br i1 %647, label %649, label %648, !prof !4

648:                                              ; preds = %639
  call void @llvm.trap() #7
  unreachable

649:                                              ; preds = %639
  %650 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %644, i64 %621, i32 0, i32 1
  %651 = bitcast %"class.sh::TVariable"** %650 to i8**
  store i8* %370, i8** %651, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %339) #7
  %652 = load i32*, i32** %84, align 8
  %653 = icmp eq i32* %652, null
  br i1 %653, label %656, label %654

654:                                              ; preds = %649
  %655 = ptrtoint i32* %652 to i64
  store i64 %655, i64* %114, align 8
  br label %656

656:                                              ; preds = %649, %654
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %83) #7
  br label %692

657:                                              ; preds = %75
  call fastcc void @_ZN2sh12_GLOBAL__N_130RewriteStructSamplersTraverser10enterArrayERKNS_5TTypeE(%"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, %"class.sh::TType"* dereferenceable(184) %13)
  %658 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %13, i64 0, i32 13
  %659 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %658, align 8
  %660 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %659, i64 0, i32 2, i32 0
  %661 = load %"class.sh::TVector.30"*, %"class.sh::TVector.30"** %660, align 8
  %662 = getelementptr inbounds %"class.sh::TVector.30", %"class.sh::TVector.30"* %661, i64 0, i32 0, i32 0, i32 0
  %663 = load %"class.sh::TField"**, %"class.sh::TField"*** %662, align 8
  %664 = getelementptr inbounds %"class.sh::TVector.30", %"class.sh::TVector.30"* %661, i64 0, i32 0, i32 0, i32 1
  %665 = load %"class.sh::TField"**, %"class.sh::TField"*** %664, align 8
  %666 = icmp eq %"class.sh::TField"** %663, %665
  br i1 %666, label %667, label %687

667:                                              ; preds = %687, %657
  %668 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 6, i32 0
  %669 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser", %"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, i64 0, i32 6, i32 0, i32 0, i32 1
  %670 = bitcast i32** %669 to i64*
  %671 = load i64, i64* %670, align 8
  %672 = bitcast %"class.std::__1::vector.23"* %668 to i64*
  %673 = load i64, i64* %672, align 8
  %674 = sub i64 %671, %673
  %675 = ashr exact i64 %674, 2
  %676 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %13, i64 0, i32 10, i32 1
  %677 = load i64, i64* %676, align 8
  %678 = sub i64 %675, %677
  %679 = icmp ult i64 %675, %677
  %680 = inttoptr i64 %673 to i32*
  br i1 %679, label %681, label %683

681:                                              ; preds = %667
  %682 = sub i64 0, %677
  call void @_ZNSt3__16vectorIj14pool_allocatorIjEE8__appendEm(%"class.std::__1::vector.23"* %668, i64 %682) #7
  br label %692

683:                                              ; preds = %667
  %684 = icmp ult i64 %678, %675
  br i1 %684, label %685, label %692

685:                                              ; preds = %683
  %686 = getelementptr inbounds i32, i32* %680, i64 %678
  store i32* %686, i32** %669, align 8
  br label %692

687:                                              ; preds = %657, %687
  %688 = phi %"class.sh::TField"** [ %690, %687 ], [ %663, %657 ]
  %689 = load %"class.sh::TField"*, %"class.sh::TField"** %688, align 8
  call fastcc void @_ZN2sh12_GLOBAL__N_130RewriteStructSamplersTraverser20extractFieldSamplersERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKNS_6TFieldEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::(anonymous namespace)::RewriteStructSamplersTraverser"* %0, %"class.std::__1::basic_string.112"* nonnull dereferenceable(24) %10, %"class.sh::TField"* %689, %"class.sh::TVector"* %3)
  %690 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %688, i64 1
  %691 = icmp eq %"class.sh::TField"** %690, %665
  br i1 %691, label %667, label %687

692:                                              ; preds = %685, %683, %681, %656
  %693 = bitcast %"class.std::__1::basic_string.112"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %694 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %693, i64 0, i32 1, i32 0
  %695 = load i8, i8* %694, align 1
  %696 = icmp slt i8 %695, 0
  br i1 %696, label %697, label %699

697:                                              ; preds = %692
  %698 = load i8*, i8** %22, align 8
  call void @_ZdlPv(i8* %698) #16
  br label %699

699:                                              ; preds = %692, %697
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21) #7
  br label %700

700:                                              ; preds = %699, %18
  ret void
}

declare dereferenceable(24) %"class.std::__1::basic_string.112"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.112"*, i8*) local_unnamed_addr #2

declare dereferenceable(24) %"class.std::__1::basic_string.112"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string.112"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #14

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #9

declare dereferenceable(24) %"class.sh::ImmutableStringBuilder"* @_ZN2sh22ImmutableStringBuilderlsERKNS_15ImmutableStringE(%"class.sh::ImmutableStringBuilder"*, %"class.sh::ImmutableString"* dereferenceable(16)) local_unnamed_addr #2

declare { i8*, i64 } @_ZN2sh22ImmutableStringBuildercvNS_15ImmutableStringEEv(%"class.sh::ImmutableStringBuilder"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i8 } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN2sh9TVariableEEENS0_10StringHashENS0_12StringHashEq2EqENS7_INS3_4pairIKS9_SD_EEEEE22find_or_prepare_insertIS9_EENSI_ImbEERKT_(%"class.absl::container_internal::raw_hash_set.91"*, %"class.std::__1::basic_string.112"* dereferenceable(24)) local_unnamed_addr #5 comdat align 2 {
  %3 = bitcast %"class.std::__1::basic_string.112"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %11, label %7

7:                                                ; preds = %2
  %8 = zext i8 %5 to i64
  %9 = ptrtoint %"class.std::__1::basic_string.112"* %1 to i64
  %10 = bitcast %"class.std::__1::basic_string.112"* %1 to i64*
  br label %20

11:                                               ; preds = %2
  %12 = bitcast %"class.std::__1::basic_string.112"* %1 to i64*
  %13 = getelementptr inbounds %"class.std::__1::basic_string.112", %"class.std::__1::basic_string.112"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, -1
  br i1 %15, label %16, label %19, !prof !4

16:                                               ; preds = %11
  %17 = load i64, i64* %12, align 8
  %18 = ptrtoint %"class.std::__1::basic_string.112"* %1 to i64
  br label %20

19:                                               ; preds = %11
  tail call void @llvm.trap() #7
  unreachable

20:                                               ; preds = %16, %7
  %21 = phi i64 [ %18, %16 ], [ %9, %7 ]
  %22 = phi i64* [ %12, %16 ], [ %10, %7 ]
  %23 = phi i64 [ %17, %16 ], [ %9, %7 ]
  %24 = phi i64 [ %14, %16 ], [ %8, %7 ]
  %25 = inttoptr i64 %23 to i8*
  %26 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %27 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %26, i8* %25, i64 %24) #7
  %28 = add i64 %27, %24
  %29 = zext i64 %28 to i128
  %30 = mul nuw i128 %29, 11376068507788127593
  %31 = lshr i128 %30, 64
  %32 = xor i128 %31, %30
  %33 = trunc i128 %32 to i64
  %34 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.91", %"class.absl::container_internal::raw_hash_set.91"* %0, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.91", %"class.absl::container_internal::raw_hash_set.91"* %0, i64 0, i32 3
  %37 = load i64, i64* %36, align 8
  %38 = lshr i64 %33, 7
  %39 = ptrtoint i8* %35 to i64
  %40 = lshr i64 %39, 12
  %41 = xor i64 %38, %40
  %42 = trunc i128 %32 to i8
  %43 = and i8 %42, 127
  %44 = insertelement <16 x i8> undef, i8 %43, i32 0
  %45 = shufflevector <16 x i8> %44, <16 x i8> undef, <16 x i32> zeroinitializer
  %46 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.91", %"class.absl::container_internal::raw_hash_set.91"* %0, i64 0, i32 1
  %47 = load i8, i8* %4, align 1
  %48 = icmp sgt i8 %47, -1
  %49 = zext i8 %47 to i64
  %50 = load i64, i64* %22, align 8
  %51 = getelementptr inbounds %"class.std::__1::basic_string.112", %"class.std::__1::basic_string.112"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = icmp sgt i64 %52, -1
  %54 = or i1 %48, %53
  %55 = select i1 %48, i64 %49, i64 %52
  %56 = select i1 %48, i64 %21, i64 %50
  %57 = inttoptr i64 %56 to i8*
  br label %58

58:                                               ; preds = %112, %20
  %59 = phi i64 [ %41, %20 ], [ %114, %112 ]
  %60 = phi i64 [ 0, %20 ], [ %113, %112 ]
  %61 = and i64 %59, %37
  %62 = getelementptr inbounds i8, i8* %35, i64 %61
  %63 = bitcast i8* %62 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 1
  %65 = icmp eq <16 x i8> %45, %64
  %66 = bitcast <16 x i1> %65 to i16
  %67 = icmp eq i16 %66, 0
  br i1 %67, label %108, label %68

68:                                               ; preds = %58
  %69 = zext i16 %66 to i32
  %70 = load %"union.absl::container_internal::map_slot_type.92"*, %"union.absl::container_internal::map_slot_type.92"** %46, align 8
  br label %71

71:                                               ; preds = %68, %104
  %72 = phi i32 [ %69, %68 ], [ %106, %104 ]
  %73 = tail call i32 @llvm.cttz.i32(i32 %72, i1 false) #7, !range !3
  %74 = zext i32 %73 to i64
  %75 = add i64 %61, %74
  %76 = and i64 %75, %37
  %77 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %70, i64 %76, i32 0
  %78 = bitcast %"struct.std::__1::pair.111"* %77 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %79 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %78, i64 0, i32 1, i32 0
  %80 = load i8, i8* %79, align 1
  %81 = icmp slt i8 %80, 0
  br i1 %81, label %85, label %82

82:                                               ; preds = %71
  %83 = zext i8 %80 to i64
  %84 = ptrtoint %"struct.std::__1::pair.111"* %77 to i64
  br label %92

85:                                               ; preds = %71
  %86 = bitcast %"struct.std::__1::pair.111"* %77 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %70, i64 %76, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %89 = load i64, i64* %88, align 8
  %90 = icmp sgt i64 %89, -1
  br i1 %90, label %92, label %91, !prof !4

91:                                               ; preds = %85
  tail call void @llvm.trap() #7
  unreachable

92:                                               ; preds = %85, %82
  %93 = phi i64 [ %87, %85 ], [ %84, %82 ]
  %94 = phi i64 [ %89, %85 ], [ %83, %82 ]
  br i1 %54, label %96, label %95, !prof !29

95:                                               ; preds = %92
  tail call void @llvm.trap() #7
  unreachable

96:                                               ; preds = %92
  %97 = inttoptr i64 %93 to i8*
  %98 = icmp eq i64 %94, %55
  br i1 %98, label %99, label %104, !prof !30

99:                                               ; preds = %96
  %100 = icmp eq i64 %94, 0
  br i1 %100, label %117, label %101

101:                                              ; preds = %99
  %102 = tail call i32 @bcmp(i8* %97, i8* %57, i64 %94) #7
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %117, label %104, !prof !4

104:                                              ; preds = %96, %101
  %105 = add i32 %72, -1
  %106 = and i32 %105, %72
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %71

108:                                              ; preds = %104, %58
  %109 = icmp eq <16 x i8> %64, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %110 = bitcast <16 x i1> %109 to i16
  %111 = icmp eq i16 %110, 0
  br i1 %111, label %112, label %115, !prof !5

112:                                              ; preds = %108
  %113 = add i64 %60, 16
  %114 = add i64 %113, %61
  br label %58

115:                                              ; preds = %108
  %116 = tail call i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN2sh9TVariableEEENS0_10StringHashENS0_12StringHashEq2EqENS7_INS3_4pairIKS9_SD_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set.91"* %0, i64 %33)
  br label %117

117:                                              ; preds = %101, %99, %115
  %118 = phi i64 [ %116, %115 ], [ %76, %99 ], [ %76, %101 ]
  %119 = phi i8 [ 1, %115 ], [ 0, %99 ], [ 0, %101 ]
  %120 = insertvalue { i64, i8 } undef, i64 %118, 0
  %121 = insertvalue { i64, i8 } %120, i8 %119, 1
  ret { i64, i8 } %121
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN2sh9TVariableEEENS0_10StringHashENS0_12StringHashEq2EqENS7_INS3_4pairIKS9_SD_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set.91"*, i64) local_unnamed_addr #12 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.91", %"class.absl::container_internal::raw_hash_set.91"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.91", %"class.absl::container_internal::raw_hash_set.91"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %1, 7
  %8 = ptrtoint i8* %4 to i64
  %9 = lshr i64 %8, 12
  %10 = xor i64 %9, %7
  %11 = and i64 %10, %6
  %12 = getelementptr inbounds i8, i8* %4, i64 %11
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  %15 = icmp slt <16 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %16 = bitcast <16 x i1> %15 to i16
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %2, %18
  %19 = phi i64 [ %23, %18 ], [ %11, %2 ]
  %20 = phi i64 [ %21, %18 ], [ 0, %2 ]
  %21 = add i64 %20, 16
  %22 = add i64 %21, %19
  %23 = and i64 %22, %6
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  %25 = bitcast i8* %24 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = icmp slt <16 x i8> %26, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %28 = bitcast <16 x i1> %27 to i16
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %18, label %30

30:                                               ; preds = %18, %2
  %31 = phi i64 [ %11, %2 ], [ %23, %18 ]
  %32 = phi i16 [ %16, %2 ], [ %28, %18 ]
  %33 = zext i16 %32 to i32
  %34 = tail call i32 @llvm.cttz.i32(i32 %33, i1 false) #7, !range !3
  %35 = zext i32 %34 to i64
  %36 = add i64 %31, %35
  %37 = and i64 %36, %6
  %38 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.91", %"class.absl::container_internal::raw_hash_set.91"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %93

41:                                               ; preds = %30
  %42 = getelementptr inbounds i8, i8* %4, i64 %37
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, -2
  br i1 %44, label %93, label %45, !prof !4

45:                                               ; preds = %41
  %46 = icmp eq i64 %6, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN2sh9TVariableEEENS0_10StringHashENS0_12StringHashEq2EqENS7_INS3_4pairIKS9_SD_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.91"* %0, i64 1) #7
  br label %59

48:                                               ; preds = %45
  %49 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.91", %"class.absl::container_internal::raw_hash_set.91"* %0, i64 0, i32 2
  %50 = load i64, i64* %49, align 8
  %51 = lshr i64 %6, 3
  %52 = sub i64 %6, %51
  %53 = lshr i64 %52, 1
  %54 = icmp ugt i64 %50, %53
  br i1 %54, label %56, label %55

55:                                               ; preds = %48
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN2sh9TVariableEEENS0_10StringHashENS0_12StringHashEq2EqENS7_INS3_4pairIKS9_SD_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set.91"* %0) #7
  br label %59

56:                                               ; preds = %48
  %57 = shl i64 %6, 1
  %58 = or i64 %57, 1
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN2sh9TVariableEEENS0_10StringHashENS0_12StringHashEq2EqENS7_INS3_4pairIKS9_SD_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.91"* %0, i64 %58) #7
  br label %59

59:                                               ; preds = %47, %55, %56
  %60 = load i8*, i8** %3, align 8
  %61 = load i64, i64* %5, align 8
  %62 = ptrtoint i8* %60 to i64
  %63 = lshr i64 %62, 12
  %64 = xor i64 %63, %7
  %65 = and i64 %64, %61
  %66 = getelementptr inbounds i8, i8* %60, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = icmp slt <16 x i8> %68, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %59, %72
  %73 = phi i64 [ %77, %72 ], [ %65, %59 ]
  %74 = phi i64 [ %75, %72 ], [ 0, %59 ]
  %75 = add i64 %74, 16
  %76 = add i64 %75, %73
  %77 = and i64 %76, %61
  %78 = getelementptr inbounds i8, i8* %60, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = icmp slt <16 x i8> %80, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %82 = bitcast <16 x i1> %81 to i16
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %72, label %84

84:                                               ; preds = %72, %59
  %85 = phi i64 [ %65, %59 ], [ %77, %72 ]
  %86 = phi i16 [ %70, %59 ], [ %82, %72 ]
  %87 = zext i16 %86 to i32
  %88 = tail call i32 @llvm.cttz.i32(i32 %87, i1 false) #7, !range !3
  %89 = zext i32 %88 to i64
  %90 = add i64 %85, %89
  %91 = and i64 %90, %61
  %92 = load i64, i64* %38, align 8
  br label %93

93:                                               ; preds = %41, %30, %84
  %94 = phi i64 [ %92, %84 ], [ 0, %41 ], [ %39, %30 ]
  %95 = phi i8* [ %60, %84 ], [ %4, %41 ], [ %4, %30 ]
  %96 = phi i64 [ %91, %84 ], [ %37, %41 ], [ %37, %30 ]
  %97 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.91", %"class.absl::container_internal::raw_hash_set.91"* %0, i64 0, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = getelementptr inbounds i8, i8* %95, i64 %96
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, -128
  %103 = zext i1 %102 to i64
  %104 = sub i64 %94, %103
  store i64 %104, i64* %38, align 8
  %105 = trunc i64 %1 to i8
  %106 = and i8 %105, 127
  store i8 %106, i8* %100, align 1
  %107 = load i8*, i8** %3, align 8
  %108 = add i64 %96, -15
  %109 = load i64, i64* %5, align 8
  %110 = and i64 %109, %108
  %111 = and i64 %109, 15
  %112 = add i64 %110, %111
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  store i8 %106, i8* %113, align 1
  ret i64 %96
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN2sh9TVariableEEENS0_10StringHashENS0_12StringHashEq2EqENS7_INS3_4pairIKS9_SD_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.91"*, i64) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.91", %"class.absl::container_internal::raw_hash_set.91"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.91", %"class.absl::container_internal::raw_hash_set.91"* %0, i64 0, i32 1
  %6 = load %"union.absl::container_internal::map_slot_type.92"*, %"union.absl::container_internal::map_slot_type.92"** %5, align 8
  %7 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.91", %"class.absl::container_internal::raw_hash_set.91"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  store i64 %1, i64* %7, align 8
  %9 = add i64 %1, 16
  %10 = add i64 %1, 23
  %11 = and i64 %10, -8
  %12 = shl i64 %1, 5
  %13 = add i64 %11, %12
  %14 = tail call i8* @_Znwm(i64 %13) #16
  store i8* %14, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %11
  %16 = bitcast %"union.absl::container_internal::map_slot_type.92"** %5 to i8**
  store i8* %15, i8** %16, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 -128, i64 %9, i1 false) #7
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  store i8 -1, i8* %17, align 1
  %18 = lshr i64 %1, 3
  %19 = sub i64 %1, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.91", %"class.absl::container_internal::raw_hash_set.91"* %0, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.91", %"class.absl::container_internal::raw_hash_set.91"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = icmp eq i64 %8, 0
  br i1 %24, label %121, label %25

25:                                               ; preds = %2
  %26 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %28

27:                                               ; preds = %117
  br i1 %24, label %121, label %120

28:                                               ; preds = %25, %117
  %29 = phi i64 [ 0, %25 ], [ %118, %117 ]
  %30 = getelementptr inbounds i8, i8* %4, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = icmp sgt i8 %31, -1
  br i1 %32, label %33, label %117

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %6, i64 %29
  %35 = bitcast %"union.absl::container_internal::map_slot_type.92"* %34 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %36 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %35, i64 0, i32 1, i32 0
  %37 = load i8, i8* %36, align 1
  %38 = icmp slt i8 %37, 0
  br i1 %38, label %42, label %39

39:                                               ; preds = %33
  %40 = zext i8 %37 to i64
  %41 = ptrtoint %"union.absl::container_internal::map_slot_type.92"* %34 to i64
  br label %49

42:                                               ; preds = %33
  %43 = bitcast %"union.absl::container_internal::map_slot_type.92"* %34 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %6, i64 %29, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %46 = load i64, i64* %45, align 8
  %47 = icmp sgt i64 %46, -1
  br i1 %47, label %49, label %48, !prof !4

48:                                               ; preds = %42
  tail call void @llvm.trap() #7
  unreachable

49:                                               ; preds = %39, %42
  %50 = phi i64 [ %44, %42 ], [ %41, %39 ]
  %51 = phi i64 [ %46, %42 ], [ %40, %39 ]
  %52 = inttoptr i64 %50 to i8*
  %53 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %26, i8* %52, i64 %51) #7
  %54 = add i64 %53, %51
  %55 = zext i64 %54 to i128
  %56 = mul nuw i128 %55, 11376068507788127593
  %57 = lshr i128 %56, 64
  %58 = xor i128 %57, %56
  %59 = trunc i128 %58 to i64
  %60 = load i8*, i8** %3, align 8
  %61 = load i64, i64* %7, align 8
  %62 = lshr i64 %59, 7
  %63 = ptrtoint i8* %60 to i64
  %64 = lshr i64 %63, 12
  %65 = xor i64 %62, %64
  %66 = and i64 %65, %61
  %67 = getelementptr inbounds i8, i8* %60, i64 %66
  %68 = bitcast i8* %67 to <16 x i8>*
  %69 = load <16 x i8>, <16 x i8>* %68, align 1
  %70 = icmp slt <16 x i8> %69, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %71 = bitcast <16 x i1> %70 to i16
  %72 = icmp eq i16 %71, 0
  br i1 %72, label %73, label %85

73:                                               ; preds = %49, %73
  %74 = phi i64 [ %78, %73 ], [ %66, %49 ]
  %75 = phi i64 [ %76, %73 ], [ 0, %49 ]
  %76 = add i64 %75, 16
  %77 = add i64 %76, %74
  %78 = and i64 %77, %61
  %79 = getelementptr inbounds i8, i8* %60, i64 %78
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1
  %82 = icmp slt <16 x i8> %81, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %83 = bitcast <16 x i1> %82 to i16
  %84 = icmp eq i16 %83, 0
  br i1 %84, label %73, label %85

85:                                               ; preds = %73, %49
  %86 = phi i64 [ %66, %49 ], [ %78, %73 ]
  %87 = phi i16 [ %71, %49 ], [ %83, %73 ]
  %88 = zext i16 %87 to i32
  %89 = tail call i32 @llvm.cttz.i32(i32 %88, i1 false) #7, !range !3
  %90 = zext i32 %89 to i64
  %91 = add i64 %86, %90
  %92 = and i64 %91, %61
  %93 = trunc i128 %58 to i8
  %94 = and i8 %93, 127
  %95 = getelementptr inbounds i8, i8* %60, i64 %92
  store i8 %94, i8* %95, align 1
  %96 = load i8*, i8** %3, align 8
  %97 = add i64 %92, -15
  %98 = load i64, i64* %7, align 8
  %99 = and i64 %97, %98
  %100 = and i64 %98, 15
  %101 = add i64 %99, %100
  %102 = getelementptr inbounds i8, i8* %96, i64 %101
  store i8 %94, i8* %102, align 1
  %103 = load %"union.absl::container_internal::map_slot_type.92"*, %"union.absl::container_internal::map_slot_type.92"** %5, align 8
  %104 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %103, i64 %92
  %105 = bitcast %"union.absl::container_internal::map_slot_type.92"* %104 to i8*
  %106 = bitcast %"union.absl::container_internal::map_slot_type.92"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %105, i8* align 8 %106, i64 24, i1 false) #7
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %106, i8 0, i64 24, i1 false) #7
  %107 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %103, i64 %92, i32 0, i32 1
  %108 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %6, i64 %29, i32 0, i32 1
  %109 = bitcast %"class.sh::TVariable"** %108 to i64*
  %110 = load i64, i64* %109, align 8
  %111 = bitcast %"class.sh::TVariable"** %107 to i64*
  store i64 %110, i64* %111, align 8
  %112 = load i8, i8* %36, align 1
  %113 = icmp slt i8 %112, 0
  br i1 %113, label %114, label %117

114:                                              ; preds = %85
  %115 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %34, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %116 = load i8*, i8** %115, align 8
  tail call void @_ZdlPv(i8* %116) #16
  br label %117

117:                                              ; preds = %114, %85, %28
  %118 = add nuw i64 %29, 1
  %119 = icmp eq i64 %118, %8
  br i1 %119, label %27, label %28

120:                                              ; preds = %27
  tail call void @_ZdlPv(i8* %4) #16
  br label %121

121:                                              ; preds = %2, %27, %120
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN2sh9TVariableEEENS0_10StringHashENS0_12StringHashEq2EqENS7_INS3_4pairIKS9_SD_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set.91"*) local_unnamed_addr #12 comdat align 2 {
  %2 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.91", %"class.absl::container_internal::raw_hash_set.91"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.91", %"class.absl::container_internal::raw_hash_set.91"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  tail call void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8* %3, i64 %5) #7
  %6 = load i64, i64* %4, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.91", %"class.absl::container_internal::raw_hash_set.91"* %0, i64 0, i32 1
  %10 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %19

11:                                               ; preds = %212, %1
  %12 = phi i64 [ 0, %1 ], [ %214, %212 ]
  %13 = lshr i64 %12, 3
  %14 = sub i64 %12, %13
  %15 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.91", %"class.absl::container_internal::raw_hash_set.91"* %0, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.91", %"class.absl::container_internal::raw_hash_set.91"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %17, i64* %18, align 8
  ret void

19:                                               ; preds = %8, %212
  %20 = phi i64 [ 0, %8 ], [ %214, %212 ]
  %21 = load i8*, i8** %2, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 %20
  %23 = load i8, i8* %22, align 1
  %24 = icmp eq i8 %23, -2
  br i1 %24, label %25, label %212

25:                                               ; preds = %19
  %26 = load %"union.absl::container_internal::map_slot_type.92"*, %"union.absl::container_internal::map_slot_type.92"** %9, align 8
  %27 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %26, i64 %20, i32 0
  %28 = bitcast %"struct.std::__1::pair.111"* %27 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %29 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %28, i64 0, i32 1, i32 0
  %30 = load i8, i8* %29, align 1
  %31 = icmp slt i8 %30, 0
  br i1 %31, label %35, label %32

32:                                               ; preds = %25
  %33 = zext i8 %30 to i64
  %34 = ptrtoint %"struct.std::__1::pair.111"* %27 to i64
  br label %42

35:                                               ; preds = %25
  %36 = bitcast %"struct.std::__1::pair.111"* %27 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %26, i64 %20, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %39 = load i64, i64* %38, align 8
  %40 = icmp sgt i64 %39, -1
  br i1 %40, label %42, label %41, !prof !4

41:                                               ; preds = %35
  tail call void @llvm.trap() #7
  unreachable

42:                                               ; preds = %32, %35
  %43 = phi i64 [ %37, %35 ], [ %34, %32 ]
  %44 = phi i64 [ %39, %35 ], [ %33, %32 ]
  %45 = inttoptr i64 %43 to i8*
  %46 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %10, i8* %45, i64 %44) #7
  %47 = add i64 %46, %44
  %48 = zext i64 %47 to i128
  %49 = mul nuw i128 %48, 11376068507788127593
  %50 = lshr i128 %49, 64
  %51 = xor i128 %50, %49
  %52 = trunc i128 %51 to i64
  %53 = load i8*, i8** %2, align 8
  %54 = load i64, i64* %4, align 8
  %55 = lshr i64 %52, 7
  %56 = ptrtoint i8* %53 to i64
  %57 = lshr i64 %56, 12
  %58 = xor i64 %55, %57
  %59 = and i64 %58, %54
  %60 = getelementptr inbounds i8, i8* %53, i64 %59
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1
  %63 = icmp slt <16 x i8> %62, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %64 = bitcast <16 x i1> %63 to i16
  %65 = icmp eq i16 %64, 0
  br i1 %65, label %66, label %78

66:                                               ; preds = %42, %66
  %67 = phi i64 [ %71, %66 ], [ %59, %42 ]
  %68 = phi i64 [ %69, %66 ], [ 0, %42 ]
  %69 = add i64 %68, 16
  %70 = add i64 %69, %67
  %71 = and i64 %70, %54
  %72 = getelementptr inbounds i8, i8* %53, i64 %71
  %73 = bitcast i8* %72 to <16 x i8>*
  %74 = load <16 x i8>, <16 x i8>* %73, align 1
  %75 = icmp slt <16 x i8> %74, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %76 = bitcast <16 x i1> %75 to i16
  %77 = icmp eq i16 %76, 0
  br i1 %77, label %66, label %78

78:                                               ; preds = %66, %42
  %79 = phi i64 [ %59, %42 ], [ %71, %66 ]
  %80 = phi i16 [ %64, %42 ], [ %76, %66 ]
  %81 = zext i16 %80 to i32
  %82 = tail call i32 @llvm.cttz.i32(i32 %81, i1 false) #7, !range !3
  %83 = zext i32 %82 to i64
  %84 = add i64 %79, %83
  %85 = and i64 %84, %54
  %86 = sub i64 %85, %59
  %87 = sub i64 %20, %59
  %88 = xor i64 %86, %87
  %89 = and i64 %88, %54
  %90 = icmp ult i64 %89, 16
  br i1 %90, label %91, label %102, !prof !4

91:                                               ; preds = %78
  %92 = trunc i128 %51 to i8
  %93 = and i8 %92, 127
  %94 = getelementptr inbounds i8, i8* %53, i64 %20
  store i8 %93, i8* %94, align 1
  %95 = load i8*, i8** %2, align 8
  %96 = add i64 %20, -15
  %97 = load i64, i64* %4, align 8
  %98 = and i64 %97, %96
  %99 = and i64 %97, 15
  %100 = add i64 %98, %99
  %101 = getelementptr inbounds i8, i8* %95, i64 %100
  store i8 %93, i8* %101, align 1
  br label %212

102:                                              ; preds = %78
  %103 = getelementptr inbounds i8, i8* %53, i64 %85
  %104 = load i8, i8* %103, align 1
  %105 = icmp eq i8 %104, -128
  %106 = trunc i128 %51 to i8
  %107 = and i8 %106, 127
  store i8 %107, i8* %103, align 1
  %108 = load i8*, i8** %2, align 8
  %109 = add i64 %85, -15
  %110 = load i64, i64* %4, align 8
  %111 = and i64 %110, %109
  %112 = and i64 %110, 15
  %113 = add i64 %111, %112
  %114 = getelementptr inbounds i8, i8* %108, i64 %113
  store i8 %107, i8* %114, align 1
  %115 = load %"union.absl::container_internal::map_slot_type.92"*, %"union.absl::container_internal::map_slot_type.92"** %9, align 8
  br i1 %105, label %116, label %135

116:                                              ; preds = %102
  %117 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %115, i64 %85
  %118 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %115, i64 %20
  %119 = bitcast %"union.absl::container_internal::map_slot_type.92"* %117 to i8*
  %120 = bitcast %"union.absl::container_internal::map_slot_type.92"* %118 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* align 8 %120, i64 24, i1 false) #7
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %120, i8 0, i64 24, i1 false) #7
  %121 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %115, i64 %85, i32 0, i32 1
  %122 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %115, i64 %20, i32 0, i32 1
  %123 = bitcast %"class.sh::TVariable"** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %"class.sh::TVariable"** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = load i8*, i8** %2, align 8
  %127 = getelementptr inbounds i8, i8* %126, i64 %20
  store i8 -128, i8* %127, align 1
  %128 = load i8*, i8** %2, align 8
  %129 = add i64 %20, -15
  %130 = load i64, i64* %4, align 8
  %131 = and i64 %130, %129
  %132 = and i64 %130, 15
  %133 = add i64 %131, %132
  %134 = getelementptr inbounds i8, i8* %128, i64 %133
  store i8 -128, i8* %134, align 1
  br label %212

135:                                              ; preds = %102
  %136 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %115, i64 %20
  %137 = bitcast %"union.absl::container_internal::map_slot_type.92"* %136 to i8*
  %138 = bitcast %"union.absl::container_internal::map_slot_type.92"* %136 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %115, i64 %20, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %141 = bitcast i64* %140 to i8*
  %142 = load i8, i8* %141, align 8
  %143 = getelementptr inbounds i8, i8* %137, i64 9
  %144 = load i8, i8* %143, align 1
  %145 = getelementptr inbounds i8, i8* %137, i64 10
  %146 = load i8, i8* %145, align 2
  %147 = getelementptr inbounds i8, i8* %137, i64 11
  %148 = load i8, i8* %147, align 1
  %149 = getelementptr inbounds i8, i8* %137, i64 12
  %150 = load i8, i8* %149, align 4
  %151 = getelementptr inbounds i8, i8* %137, i64 13
  %152 = load i8, i8* %151, align 1
  %153 = getelementptr inbounds i8, i8* %137, i64 14
  %154 = load i8, i8* %153, align 2
  %155 = getelementptr inbounds i8, i8* %137, i64 15
  %156 = load i8, i8* %155, align 1
  %157 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %115, i64 %20, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %158 = bitcast i64* %157 to i8*
  %159 = load i8, i8* %158, align 8
  %160 = getelementptr inbounds i8, i8* %137, i64 17
  %161 = load i8, i8* %160, align 1
  %162 = getelementptr inbounds i8, i8* %137, i64 18
  %163 = load i8, i8* %162, align 2
  %164 = getelementptr inbounds i8, i8* %137, i64 19
  %165 = load i8, i8* %164, align 1
  %166 = getelementptr inbounds i8, i8* %137, i64 20
  %167 = load i8, i8* %166, align 4
  %168 = getelementptr inbounds i8, i8* %137, i64 21
  %169 = load i8, i8* %168, align 1
  %170 = getelementptr inbounds i8, i8* %137, i64 22
  %171 = load i8, i8* %170, align 2
  %172 = getelementptr inbounds i8, i8* %137, i64 23
  %173 = load i8, i8* %172, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %137, i8 0, i64 24, i1 false) #7
  %174 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %115, i64 %20, i32 0, i32 1
  %175 = bitcast %"class.sh::TVariable"** %174 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = load %"union.absl::container_internal::map_slot_type.92"*, %"union.absl::container_internal::map_slot_type.92"** %9, align 8
  %178 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %177, i64 %85, i32 0, i32 1
  %179 = bitcast %"class.sh::TVariable"** %178 to i64*
  %180 = load i64, i64* %179, align 8
  %181 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %177, i64 %20
  %182 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %177, i64 %85
  %183 = bitcast %"union.absl::container_internal::map_slot_type.92"* %181 to i8*
  %184 = bitcast %"union.absl::container_internal::map_slot_type.92"* %182 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %183, i8* align 8 %184, i64 24, i1 false) #7
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %184, i8 0, i64 24, i1 false) #7
  %185 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %177, i64 %20, i32 0, i32 1
  %186 = bitcast %"class.sh::TVariable"** %185 to i64*
  store i64 %180, i64* %186, align 8
  %187 = load %"union.absl::container_internal::map_slot_type.92"*, %"union.absl::container_internal::map_slot_type.92"** %9, align 8
  %188 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %187, i64 %85
  %189 = bitcast %"union.absl::container_internal::map_slot_type.92"* %188 to i64*
  store i64 %139, i64* %189, align 8
  %190 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %187, i64 %85, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %191 = bitcast i64* %190 to i8*
  store i8 %142, i8* %191, align 8
  %192 = bitcast %"union.absl::container_internal::map_slot_type.92"* %188 to i8*
  %193 = getelementptr inbounds i8, i8* %192, i64 9
  store i8 %144, i8* %193, align 1
  %194 = getelementptr inbounds i8, i8* %192, i64 10
  store i8 %146, i8* %194, align 2
  %195 = getelementptr inbounds i8, i8* %192, i64 11
  store i8 %148, i8* %195, align 1
  %196 = getelementptr inbounds i8, i8* %192, i64 12
  store i8 %150, i8* %196, align 4
  %197 = getelementptr inbounds i8, i8* %192, i64 13
  store i8 %152, i8* %197, align 1
  %198 = getelementptr inbounds i8, i8* %192, i64 14
  store i8 %154, i8* %198, align 2
  %199 = getelementptr inbounds i8, i8* %192, i64 15
  store i8 %156, i8* %199, align 1
  %200 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %187, i64 %85, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %201 = bitcast i64* %200 to i8*
  store i8 %159, i8* %201, align 8
  %202 = getelementptr inbounds i8, i8* %192, i64 17
  store i8 %161, i8* %202, align 1
  %203 = getelementptr inbounds i8, i8* %192, i64 18
  store i8 %163, i8* %203, align 2
  %204 = getelementptr inbounds i8, i8* %192, i64 19
  store i8 %165, i8* %204, align 1
  %205 = getelementptr inbounds i8, i8* %192, i64 20
  store i8 %167, i8* %205, align 4
  %206 = getelementptr inbounds i8, i8* %192, i64 21
  store i8 %169, i8* %206, align 1
  %207 = getelementptr inbounds i8, i8* %192, i64 22
  store i8 %171, i8* %207, align 2
  %208 = getelementptr inbounds i8, i8* %192, i64 23
  store i8 %173, i8* %208, align 1
  %209 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.92", %"union.absl::container_internal::map_slot_type.92"* %187, i64 %85, i32 0, i32 1
  %210 = bitcast %"class.sh::TVariable"** %209 to i64*
  store i64 %176, i64* %210, align 8
  %211 = add i64 %20, -1
  br label %212

212:                                              ; preds = %91, %135, %116, %19
  %213 = phi i64 [ %20, %19 ], [ %20, %91 ], [ %20, %116 ], [ %211, %135 ]
  %214 = add i64 %213, 1
  %215 = load i64, i64* %4, align 8
  %216 = icmp eq i64 %214, %215
  br i1 %216, label %11, label %19
}

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string.112"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set.80"*, i64) local_unnamed_addr #12 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.80", %"class.absl::container_internal::raw_hash_set.80"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.80", %"class.absl::container_internal::raw_hash_set.80"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %1, 7
  %8 = ptrtoint i8* %4 to i64
  %9 = lshr i64 %8, 12
  %10 = xor i64 %9, %7
  %11 = and i64 %10, %6
  %12 = getelementptr inbounds i8, i8* %4, i64 %11
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  %15 = icmp slt <16 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %16 = bitcast <16 x i1> %15 to i16
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %2, %18
  %19 = phi i64 [ %23, %18 ], [ %11, %2 ]
  %20 = phi i64 [ %21, %18 ], [ 0, %2 ]
  %21 = add i64 %20, 16
  %22 = add i64 %21, %19
  %23 = and i64 %22, %6
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  %25 = bitcast i8* %24 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = icmp slt <16 x i8> %26, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %28 = bitcast <16 x i1> %27 to i16
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %18, label %30

30:                                               ; preds = %18, %2
  %31 = phi i64 [ %11, %2 ], [ %23, %18 ]
  %32 = phi i16 [ %16, %2 ], [ %28, %18 ]
  %33 = zext i16 %32 to i32
  %34 = tail call i32 @llvm.cttz.i32(i32 %33, i1 false) #7, !range !3
  %35 = zext i32 %34 to i64
  %36 = add i64 %31, %35
  %37 = and i64 %36, %6
  %38 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.80", %"class.absl::container_internal::raw_hash_set.80"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %93

41:                                               ; preds = %30
  %42 = getelementptr inbounds i8, i8* %4, i64 %37
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, -2
  br i1 %44, label %93, label %45, !prof !4

45:                                               ; preds = %41
  %46 = icmp eq i64 %6, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.80"* %0, i64 1) #7
  br label %59

48:                                               ; preds = %45
  %49 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.80", %"class.absl::container_internal::raw_hash_set.80"* %0, i64 0, i32 2
  %50 = load i64, i64* %49, align 8
  %51 = lshr i64 %6, 3
  %52 = sub i64 %6, %51
  %53 = lshr i64 %52, 1
  %54 = icmp ugt i64 %50, %53
  br i1 %54, label %56, label %55

55:                                               ; preds = %48
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set.80"* %0) #7
  br label %59

56:                                               ; preds = %48
  %57 = shl i64 %6, 1
  %58 = or i64 %57, 1
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.80"* %0, i64 %58) #7
  br label %59

59:                                               ; preds = %47, %55, %56
  %60 = load i8*, i8** %3, align 8
  %61 = load i64, i64* %5, align 8
  %62 = ptrtoint i8* %60 to i64
  %63 = lshr i64 %62, 12
  %64 = xor i64 %63, %7
  %65 = and i64 %64, %61
  %66 = getelementptr inbounds i8, i8* %60, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = icmp slt <16 x i8> %68, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %59, %72
  %73 = phi i64 [ %77, %72 ], [ %65, %59 ]
  %74 = phi i64 [ %75, %72 ], [ 0, %59 ]
  %75 = add i64 %74, 16
  %76 = add i64 %75, %73
  %77 = and i64 %76, %61
  %78 = getelementptr inbounds i8, i8* %60, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = icmp slt <16 x i8> %80, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %82 = bitcast <16 x i1> %81 to i16
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %72, label %84

84:                                               ; preds = %72, %59
  %85 = phi i64 [ %65, %59 ], [ %77, %72 ]
  %86 = phi i16 [ %70, %59 ], [ %82, %72 ]
  %87 = zext i16 %86 to i32
  %88 = tail call i32 @llvm.cttz.i32(i32 %87, i1 false) #7, !range !3
  %89 = zext i32 %88 to i64
  %90 = add i64 %85, %89
  %91 = and i64 %90, %61
  %92 = load i64, i64* %38, align 8
  br label %93

93:                                               ; preds = %41, %30, %84
  %94 = phi i64 [ %92, %84 ], [ 0, %41 ], [ %39, %30 ]
  %95 = phi i8* [ %60, %84 ], [ %4, %41 ], [ %4, %30 ]
  %96 = phi i64 [ %91, %84 ], [ %37, %41 ], [ %37, %30 ]
  %97 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.80", %"class.absl::container_internal::raw_hash_set.80"* %0, i64 0, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = getelementptr inbounds i8, i8* %95, i64 %96
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, -128
  %103 = zext i1 %102 to i64
  %104 = sub i64 %94, %103
  store i64 %104, i64* %38, align 8
  %105 = trunc i64 %1 to i8
  %106 = and i8 %105, 127
  store i8 %106, i8* %100, align 1
  %107 = load i8*, i8** %3, align 8
  %108 = add i64 %96, -15
  %109 = load i64, i64* %5, align 8
  %110 = and i64 %109, %108
  %111 = and i64 %109, 15
  %112 = add i64 %110, %111
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  store i8 %106, i8* %113, align 1
  ret i64 %96
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.80"*, i64) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.80", %"class.absl::container_internal::raw_hash_set.80"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.80", %"class.absl::container_internal::raw_hash_set.80"* %0, i64 0, i32 1
  %6 = load %"union.absl::container_internal::map_slot_type.81"*, %"union.absl::container_internal::map_slot_type.81"** %5, align 8
  %7 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.80", %"class.absl::container_internal::raw_hash_set.80"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  store i64 %1, i64* %7, align 8
  %9 = add i64 %1, 16
  %10 = add i64 %1, 23
  %11 = and i64 %10, -8
  %12 = shl i64 %1, 4
  %13 = add i64 %11, %12
  %14 = tail call i8* @_Znwm(i64 %13) #16
  store i8* %14, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %11
  %16 = bitcast %"union.absl::container_internal::map_slot_type.81"** %5 to i8**
  store i8* %15, i8** %16, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 -128, i64 %9, i1 false) #7
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  store i8 -1, i8* %17, align 1
  %18 = lshr i64 %1, 3
  %19 = sub i64 %1, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.80", %"class.absl::container_internal::raw_hash_set.80"* %0, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.80", %"class.absl::container_internal::raw_hash_set.80"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = icmp eq i64 %8, 0
  br i1 %24, label %100, label %25

25:                                               ; preds = %2
  %26 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %28

27:                                               ; preds = %96
  br i1 %24, label %100, label %99

28:                                               ; preds = %25, %96
  %29 = phi i64 [ 0, %25 ], [ %97, %96 ]
  %30 = getelementptr inbounds i8, i8* %4, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = icmp sgt i8 %31, -1
  br i1 %32, label %33, label %96

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.81", %"union.absl::container_internal::map_slot_type.81"* %6, i64 %29
  %35 = bitcast %"union.absl::container_internal::map_slot_type.81"* %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = add i64 %26, %36
  %38 = zext i64 %37 to i128
  %39 = mul nuw i128 %38, 11376068507788127593
  %40 = lshr i128 %39, 64
  %41 = xor i128 %40, %39
  %42 = trunc i128 %41 to i64
  %43 = add i64 %36, %42
  %44 = zext i64 %43 to i128
  %45 = mul nuw i128 %44, 11376068507788127593
  %46 = lshr i128 %45, 64
  %47 = xor i128 %46, %45
  %48 = trunc i128 %47 to i64
  %49 = load i8*, i8** %3, align 8
  %50 = load i64, i64* %7, align 8
  %51 = lshr i64 %48, 7
  %52 = ptrtoint i8* %49 to i64
  %53 = lshr i64 %52, 12
  %54 = xor i64 %51, %53
  %55 = and i64 %54, %50
  %56 = getelementptr inbounds i8, i8* %49, i64 %55
  %57 = bitcast i8* %56 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 1
  %59 = icmp slt <16 x i8> %58, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %60 = bitcast <16 x i1> %59 to i16
  %61 = icmp eq i16 %60, 0
  br i1 %61, label %62, label %74

62:                                               ; preds = %33, %62
  %63 = phi i64 [ %67, %62 ], [ %55, %33 ]
  %64 = phi i64 [ %65, %62 ], [ 0, %33 ]
  %65 = add i64 %64, 16
  %66 = add i64 %65, %63
  %67 = and i64 %66, %50
  %68 = getelementptr inbounds i8, i8* %49, i64 %67
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1
  %71 = icmp slt <16 x i8> %70, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %72 = bitcast <16 x i1> %71 to i16
  %73 = icmp eq i16 %72, 0
  br i1 %73, label %62, label %74

74:                                               ; preds = %62, %33
  %75 = phi i64 [ %55, %33 ], [ %67, %62 ]
  %76 = phi i16 [ %60, %33 ], [ %72, %62 ]
  %77 = zext i16 %76 to i32
  %78 = tail call i32 @llvm.cttz.i32(i32 %77, i1 false) #7, !range !3
  %79 = zext i32 %78 to i64
  %80 = add i64 %75, %79
  %81 = and i64 %80, %50
  %82 = trunc i128 %47 to i8
  %83 = and i8 %82, 127
  %84 = getelementptr inbounds i8, i8* %49, i64 %81
  store i8 %83, i8* %84, align 1
  %85 = load i8*, i8** %3, align 8
  %86 = add i64 %81, -15
  %87 = load i64, i64* %7, align 8
  %88 = and i64 %86, %87
  %89 = and i64 %87, 15
  %90 = add i64 %88, %89
  %91 = getelementptr inbounds i8, i8* %85, i64 %90
  store i8 %83, i8* %91, align 1
  %92 = load %"union.absl::container_internal::map_slot_type.81"*, %"union.absl::container_internal::map_slot_type.81"** %5, align 8
  %93 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.81", %"union.absl::container_internal::map_slot_type.81"* %92, i64 %81
  %94 = bitcast %"union.absl::container_internal::map_slot_type.81"* %93 to i8*
  %95 = bitcast %"union.absl::container_internal::map_slot_type.81"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %95, i64 16, i1 false) #7
  br label %96

96:                                               ; preds = %28, %74
  %97 = add nuw i64 %29, 1
  %98 = icmp eq i64 %97, %8
  br i1 %98, label %27, label %28

99:                                               ; preds = %27
  tail call void @_ZdlPv(i8* %4) #16
  br label %100

100:                                              ; preds = %2, %27, %99
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set.80"*) local_unnamed_addr #12 comdat align 2 {
  %2 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.80", %"class.absl::container_internal::raw_hash_set.80"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.80", %"class.absl::container_internal::raw_hash_set.80"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  tail call void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8* %3, i64 %5) #7
  %6 = load i64, i64* %4, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.80", %"class.absl::container_internal::raw_hash_set.80"* %0, i64 0, i32 1
  %10 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %19

11:                                               ; preds = %128, %1
  %12 = phi i64 [ 0, %1 ], [ %130, %128 ]
  %13 = lshr i64 %12, 3
  %14 = sub i64 %12, %13
  %15 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.80", %"class.absl::container_internal::raw_hash_set.80"* %0, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.80", %"class.absl::container_internal::raw_hash_set.80"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %17, i64* %18, align 8
  ret void

19:                                               ; preds = %8, %128
  %20 = phi i64 [ %6, %8 ], [ %131, %128 ]
  %21 = phi i64 [ 0, %8 ], [ %130, %128 ]
  %22 = load i8*, i8** %2, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 %21
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, -2
  br i1 %25, label %26, label %128

26:                                               ; preds = %19
  %27 = ptrtoint i8* %22 to i64
  %28 = load %"union.absl::container_internal::map_slot_type.81"*, %"union.absl::container_internal::map_slot_type.81"** %9, align 8
  %29 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.81", %"union.absl::container_internal::map_slot_type.81"* %28, i64 %21, i32 0
  %30 = bitcast %"struct.std::__1::pair.109"* %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = add i64 %10, %31
  %33 = zext i64 %32 to i128
  %34 = mul nuw i128 %33, 11376068507788127593
  %35 = lshr i128 %34, 64
  %36 = xor i128 %35, %34
  %37 = trunc i128 %36 to i64
  %38 = add i64 %31, %37
  %39 = zext i64 %38 to i128
  %40 = mul nuw i128 %39, 11376068507788127593
  %41 = lshr i128 %40, 64
  %42 = xor i128 %41, %40
  %43 = trunc i128 %42 to i64
  %44 = lshr i64 %43, 7
  %45 = lshr i64 %27, 12
  %46 = xor i64 %44, %45
  %47 = and i64 %46, %20
  %48 = getelementptr inbounds i8, i8* %22, i64 %47
  %49 = bitcast i8* %48 to <16 x i8>*
  %50 = load <16 x i8>, <16 x i8>* %49, align 1
  %51 = icmp slt <16 x i8> %50, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %52 = bitcast <16 x i1> %51 to i16
  %53 = icmp eq i16 %52, 0
  br i1 %53, label %54, label %66

54:                                               ; preds = %26, %54
  %55 = phi i64 [ %59, %54 ], [ %47, %26 ]
  %56 = phi i64 [ %57, %54 ], [ 0, %26 ]
  %57 = add i64 %56, 16
  %58 = add i64 %57, %55
  %59 = and i64 %58, %20
  %60 = getelementptr inbounds i8, i8* %22, i64 %59
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1
  %63 = icmp slt <16 x i8> %62, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %64 = bitcast <16 x i1> %63 to i16
  %65 = icmp eq i16 %64, 0
  br i1 %65, label %54, label %66

66:                                               ; preds = %54, %26
  %67 = phi i64 [ %47, %26 ], [ %59, %54 ]
  %68 = phi i16 [ %52, %26 ], [ %64, %54 ]
  %69 = zext i16 %68 to i32
  %70 = tail call i32 @llvm.cttz.i32(i32 %69, i1 false) #7, !range !3
  %71 = zext i32 %70 to i64
  %72 = add i64 %67, %71
  %73 = and i64 %72, %20
  %74 = sub i64 %73, %47
  %75 = sub i64 %21, %47
  %76 = xor i64 %74, %75
  %77 = and i64 %76, %20
  %78 = icmp ult i64 %77, 16
  br i1 %78, label %79, label %89, !prof !4

79:                                               ; preds = %66
  %80 = trunc i128 %42 to i8
  %81 = and i8 %80, 127
  store i8 %81, i8* %23, align 1
  %82 = load i8*, i8** %2, align 8
  %83 = add i64 %21, -15
  %84 = load i64, i64* %4, align 8
  %85 = and i64 %84, %83
  %86 = and i64 %84, 15
  %87 = add i64 %85, %86
  %88 = getelementptr inbounds i8, i8* %82, i64 %87
  store i8 %81, i8* %88, align 1
  br label %128

89:                                               ; preds = %66
  %90 = getelementptr inbounds i8, i8* %22, i64 %73
  %91 = load i8, i8* %90, align 1
  %92 = icmp eq i8 %91, -128
  %93 = trunc i128 %42 to i8
  %94 = and i8 %93, 127
  store i8 %94, i8* %90, align 1
  %95 = load i8*, i8** %2, align 8
  %96 = add i64 %73, -15
  %97 = load i64, i64* %4, align 8
  %98 = and i64 %97, %96
  %99 = and i64 %97, 15
  %100 = add i64 %98, %99
  %101 = getelementptr inbounds i8, i8* %95, i64 %100
  store i8 %94, i8* %101, align 1
  %102 = load %"union.absl::container_internal::map_slot_type.81"*, %"union.absl::container_internal::map_slot_type.81"** %9, align 8
  br i1 %92, label %103, label %117

103:                                              ; preds = %89
  %104 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.81", %"union.absl::container_internal::map_slot_type.81"* %102, i64 %73
  %105 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.81", %"union.absl::container_internal::map_slot_type.81"* %102, i64 %21
  %106 = bitcast %"union.absl::container_internal::map_slot_type.81"* %104 to i8*
  %107 = bitcast %"union.absl::container_internal::map_slot_type.81"* %105 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %106, i8* align 8 %107, i64 16, i1 false) #7
  %108 = load i8*, i8** %2, align 8
  %109 = getelementptr inbounds i8, i8* %108, i64 %21
  store i8 -128, i8* %109, align 1
  %110 = load i8*, i8** %2, align 8
  %111 = add i64 %21, -15
  %112 = load i64, i64* %4, align 8
  %113 = and i64 %112, %111
  %114 = and i64 %112, 15
  %115 = add i64 %113, %114
  %116 = getelementptr inbounds i8, i8* %110, i64 %115
  store i8 -128, i8* %116, align 1
  br label %128

117:                                              ; preds = %89
  %118 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.81", %"union.absl::container_internal::map_slot_type.81"* %102, i64 %21
  %119 = bitcast %"union.absl::container_internal::map_slot_type.81"* %118 to i8*
  %120 = bitcast %"union.absl::container_internal::map_slot_type.81"* %118 to <16 x i8>*
  %121 = load <16 x i8>, <16 x i8>* %120, align 8
  %122 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.81", %"union.absl::container_internal::map_slot_type.81"* %102, i64 %73
  %123 = bitcast %"union.absl::container_internal::map_slot_type.81"* %122 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* align 8 %123, i64 16, i1 false) #7
  %124 = load %"union.absl::container_internal::map_slot_type.81"*, %"union.absl::container_internal::map_slot_type.81"** %9, align 8
  %125 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.81", %"union.absl::container_internal::map_slot_type.81"* %124, i64 %73
  %126 = bitcast %"union.absl::container_internal::map_slot_type.81"* %125 to <16 x i8>*
  store <16 x i8> %121, <16 x i8>* %126, align 8
  %127 = add i64 %21, -1
  br label %128

128:                                              ; preds = %79, %117, %103, %19
  %129 = phi i64 [ %21, %19 ], [ %21, %79 ], [ %21, %103 ], [ %127, %117 ]
  %130 = add i64 %129, 1
  %131 = load i64, i64* %4, align 8
  %132 = icmp eq i64 %130, %131
  br i1 %132, label %11, label %19
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIj14pool_allocatorIjEE8__appendEm(%"class.std::__1::vector.23"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #7
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  ret void

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.23"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.23"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #17
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %47

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %53, label %47

47:                                               ; preds = %38, %42
  %48 = phi i64 [ %45, %42 ], [ 4611686018427387903, %38 ]
  %49 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %50 = shl i64 %48, 2
  %51 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %49, i64 %50) #7
  %52 = bitcast i8* %51 to i32*
  br label %53

53:                                               ; preds = %47, %42
  %54 = phi i64 [ %48, %47 ], [ 0, %42 ]
  %55 = phi i32* [ %52, %47 ], [ null, %42 ]
  %56 = getelementptr inbounds i32, i32* %55, i64 %33
  %57 = bitcast i32* %56 to i8*
  %58 = getelementptr inbounds i32, i32* %55, i64 %54
  %59 = getelementptr inbounds i32, i32* %56, i64 %1
  %60 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %57, i8 0, i64 %60, i1 false) #7
  %61 = ptrtoint i32* %58 to i64
  %62 = ptrtoint i32* %59 to i64
  %63 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %0, i64 0, i32 0, i32 0
  %64 = load i32*, i32** %63, align 8
  %65 = ptrtoint i32* %64 to i64
  %66 = load i32*, i32** %6, align 8
  %67 = icmp eq i32* %66, %64
  br i1 %67, label %219, label %68

68:                                               ; preds = %53
  %69 = getelementptr i32, i32* %66, i64 -1
  %70 = ptrtoint i32* %69 to i64
  %71 = sub i64 %70, %65
  %72 = lshr i64 %71, 2
  %73 = add nuw nsw i64 %72, 1
  %74 = icmp ult i64 %73, 8
  br i1 %74, label %167, label %75

75:                                               ; preds = %68
  %76 = getelementptr i32, i32* %66, i64 -1
  %77 = ptrtoint i32* %76 to i64
  %78 = sub i64 %77, %65
  %79 = lshr i64 %78, 2
  %80 = xor i64 %79, -1
  %81 = add nsw i64 %33, %80
  %82 = getelementptr i32, i32* %55, i64 %81
  %83 = xor i64 %79, -1
  %84 = getelementptr i32, i32* %66, i64 %83
  %85 = icmp ult i32* %82, %66
  %86 = icmp ult i32* %84, %56
  %87 = and i1 %85, %86
  br i1 %87, label %167, label %88

88:                                               ; preds = %75
  %89 = and i64 %73, 9223372036854775800
  %90 = sub nsw i64 0, %89
  %91 = getelementptr i32, i32* %56, i64 %90
  %92 = sub nsw i64 0, %89
  %93 = getelementptr i32, i32* %66, i64 %92
  %94 = add nsw i64 %89, -8
  %95 = lshr exact i64 %94, 3
  %96 = add nuw nsw i64 %95, 1
  %97 = and i64 %96, 1
  %98 = icmp eq i64 %94, 0
  br i1 %98, label %145, label %99

99:                                               ; preds = %88
  %100 = sub nuw nsw i64 %96, %97
  %101 = getelementptr i32, i32* %56, i64 -1
  %102 = getelementptr i32, i32* %66, i64 -1
  %103 = getelementptr i32, i32* %56, i64 -1
  %104 = getelementptr i32, i32* %66, i64 -1
  br label %105

105:                                              ; preds = %105, %99
  %106 = phi i64 [ 0, %99 ], [ %140, %105 ]
  %107 = phi i64 [ %100, %99 ], [ %141, %105 ]
  %108 = sub i64 0, %106
  %109 = sub i64 0, %106
  %110 = getelementptr inbounds i32, i32* %101, i64 %108
  %111 = getelementptr inbounds i32, i32* %102, i64 %109
  %112 = getelementptr inbounds i32, i32* %111, i64 -3
  %113 = bitcast i32* %112 to <4 x i32>*
  %114 = load <4 x i32>, <4 x i32>* %113, align 4, !alias.scope !111
  %115 = getelementptr inbounds i32, i32* %111, i64 -4
  %116 = getelementptr inbounds i32, i32* %115, i64 -3
  %117 = bitcast i32* %116 to <4 x i32>*
  %118 = load <4 x i32>, <4 x i32>* %117, align 4, !alias.scope !111
  %119 = getelementptr inbounds i32, i32* %110, i64 -3
  %120 = bitcast i32* %119 to <4 x i32>*
  store <4 x i32> %114, <4 x i32>* %120, align 4, !alias.scope !114, !noalias !111
  %121 = getelementptr inbounds i32, i32* %110, i64 -4
  %122 = getelementptr inbounds i32, i32* %121, i64 -3
  %123 = bitcast i32* %122 to <4 x i32>*
  store <4 x i32> %118, <4 x i32>* %123, align 4, !alias.scope !114, !noalias !111
  %124 = sub nuw nsw i64 -8, %106
  %125 = sub nuw nsw i64 -8, %106
  %126 = getelementptr inbounds i32, i32* %103, i64 %124
  %127 = getelementptr inbounds i32, i32* %104, i64 %125
  %128 = getelementptr inbounds i32, i32* %127, i64 -3
  %129 = bitcast i32* %128 to <4 x i32>*
  %130 = load <4 x i32>, <4 x i32>* %129, align 4, !alias.scope !111
  %131 = getelementptr inbounds i32, i32* %127, i64 -4
  %132 = getelementptr inbounds i32, i32* %131, i64 -3
  %133 = bitcast i32* %132 to <4 x i32>*
  %134 = load <4 x i32>, <4 x i32>* %133, align 4, !alias.scope !111
  %135 = getelementptr inbounds i32, i32* %126, i64 -3
  %136 = bitcast i32* %135 to <4 x i32>*
  store <4 x i32> %130, <4 x i32>* %136, align 4, !alias.scope !114, !noalias !111
  %137 = getelementptr inbounds i32, i32* %126, i64 -4
  %138 = getelementptr inbounds i32, i32* %137, i64 -3
  %139 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> %134, <4 x i32>* %139, align 4, !alias.scope !114, !noalias !111
  %140 = add i64 %106, 16
  %141 = add i64 %107, -2
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %105, !llvm.loop !116

143:                                              ; preds = %105
  %144 = sub nuw nsw i64 -16, %106
  br label %145

145:                                              ; preds = %143, %88
  %146 = phi i64 [ 0, %88 ], [ %144, %143 ]
  %147 = icmp eq i64 %97, 0
  br i1 %147, label %165, label %148

148:                                              ; preds = %145
  %149 = getelementptr i32, i32* %56, i64 -1
  %150 = getelementptr i32, i32* %66, i64 -1
  %151 = getelementptr inbounds i32, i32* %149, i64 %146
  %152 = getelementptr inbounds i32, i32* %150, i64 %146
  %153 = getelementptr inbounds i32, i32* %152, i64 -3
  %154 = bitcast i32* %153 to <4 x i32>*
  %155 = load <4 x i32>, <4 x i32>* %154, align 4, !alias.scope !111
  %156 = getelementptr inbounds i32, i32* %152, i64 -4
  %157 = getelementptr inbounds i32, i32* %156, i64 -3
  %158 = bitcast i32* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 4, !alias.scope !111
  %160 = getelementptr inbounds i32, i32* %151, i64 -3
  %161 = bitcast i32* %160 to <4 x i32>*
  store <4 x i32> %155, <4 x i32>* %161, align 4, !alias.scope !114, !noalias !111
  %162 = getelementptr inbounds i32, i32* %151, i64 -4
  %163 = getelementptr inbounds i32, i32* %162, i64 -3
  %164 = bitcast i32* %163 to <4 x i32>*
  store <4 x i32> %159, <4 x i32>* %164, align 4, !alias.scope !114, !noalias !111
  br label %165

165:                                              ; preds = %145, %148
  %166 = icmp eq i64 %73, %89
  br i1 %166, label %219, label %167

167:                                              ; preds = %165, %75, %68
  %168 = phi i32* [ %56, %75 ], [ %56, %68 ], [ %91, %165 ]
  %169 = phi i32* [ %66, %75 ], [ %66, %68 ], [ %93, %165 ]
  %170 = getelementptr i32, i32* %169, i64 -1
  %171 = ptrtoint i32* %170 to i64
  %172 = sub i64 %171, %65
  %173 = lshr i64 %172, 2
  %174 = add nuw nsw i64 %173, 1
  %175 = and i64 %174, 7
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %186, label %177

177:                                              ; preds = %167, %177
  %178 = phi i32* [ %181, %177 ], [ %168, %167 ]
  %179 = phi i32* [ %182, %177 ], [ %169, %167 ]
  %180 = phi i64 [ %184, %177 ], [ %175, %167 ]
  %181 = getelementptr inbounds i32, i32* %178, i64 -1
  %182 = getelementptr inbounds i32, i32* %179, i64 -1
  %183 = load i32, i32* %182, align 4
  store i32 %183, i32* %181, align 4
  %184 = add i64 %180, -1
  %185 = icmp eq i64 %184, 0
  br i1 %185, label %186, label %177, !llvm.loop !117

186:                                              ; preds = %177, %167
  %187 = phi i32* [ undef, %167 ], [ %181, %177 ]
  %188 = phi i32* [ %168, %167 ], [ %181, %177 ]
  %189 = phi i32* [ %169, %167 ], [ %182, %177 ]
  %190 = icmp ult i64 %172, 28
  br i1 %190, label %219, label %191

191:                                              ; preds = %186, %191
  %192 = phi i32* [ %215, %191 ], [ %188, %186 ]
  %193 = phi i32* [ %216, %191 ], [ %189, %186 ]
  %194 = getelementptr inbounds i32, i32* %192, i64 -1
  %195 = getelementptr inbounds i32, i32* %193, i64 -1
  %196 = load i32, i32* %195, align 4
  store i32 %196, i32* %194, align 4
  %197 = getelementptr inbounds i32, i32* %192, i64 -2
  %198 = getelementptr inbounds i32, i32* %193, i64 -2
  %199 = load i32, i32* %198, align 4
  store i32 %199, i32* %197, align 4
  %200 = getelementptr inbounds i32, i32* %192, i64 -3
  %201 = getelementptr inbounds i32, i32* %193, i64 -3
  %202 = load i32, i32* %201, align 4
  store i32 %202, i32* %200, align 4
  %203 = getelementptr inbounds i32, i32* %192, i64 -4
  %204 = getelementptr inbounds i32, i32* %193, i64 -4
  %205 = load i32, i32* %204, align 4
  store i32 %205, i32* %203, align 4
  %206 = getelementptr inbounds i32, i32* %192, i64 -5
  %207 = getelementptr inbounds i32, i32* %193, i64 -5
  %208 = load i32, i32* %207, align 4
  store i32 %208, i32* %206, align 4
  %209 = getelementptr inbounds i32, i32* %192, i64 -6
  %210 = getelementptr inbounds i32, i32* %193, i64 -6
  %211 = load i32, i32* %210, align 4
  store i32 %211, i32* %209, align 4
  %212 = getelementptr inbounds i32, i32* %192, i64 -7
  %213 = getelementptr inbounds i32, i32* %193, i64 -7
  %214 = load i32, i32* %213, align 4
  store i32 %214, i32* %212, align 4
  %215 = getelementptr inbounds i32, i32* %192, i64 -8
  %216 = getelementptr inbounds i32, i32* %193, i64 -8
  %217 = load i32, i32* %216, align 4
  store i32 %217, i32* %215, align 4
  %218 = icmp eq i32* %216, %64
  br i1 %218, label %219, label %191, !llvm.loop !118

219:                                              ; preds = %186, %191, %165, %53
  %220 = phi i32* [ %56, %53 ], [ %91, %165 ], [ %187, %186 ], [ %215, %191 ]
  %221 = ptrtoint i32* %220 to i64
  store i64 %221, i64* %30, align 8
  store i64 %62, i64* %7, align 8
  store i64 %61, i64* %4, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJPNS1_12TIntermBlockERPNS1_18TIntermDeclarationENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_(%"class.std::__1::vector.44"*, %"class.sh::TIntermBlock"** dereferenceable(8), %"class.sh::TIntermDeclaration"** dereferenceable(8), %"class.sh::TVector"* dereferenceable(24)) local_unnamed_addr #3 comdat align 2 {
  %5 = getelementptr inbounds %"class.std::__1::vector.44", %"class.std::__1::vector.44"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.44"* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = sdiv exact i64 %10, 40
  %12 = add nsw i64 %11, 1
  %13 = icmp ugt i64 %12, 461168601842738790
  br i1 %13, label %14, label %16

14:                                               ; preds = %4
  %15 = bitcast %"class.std::__1::vector.44"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #17
  unreachable

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.std::__1::vector.44", %"class.std::__1::vector.44"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %9
  %21 = sdiv exact i64 %20, 40
  %22 = icmp ult i64 %21, 230584300921369395
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = shl nsw i64 %21, 1
  %25 = icmp ult i64 %24, %12
  %26 = select i1 %25, i64 %12, i64 %24
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %16, %23
  %29 = phi i64 [ %26, %23 ], [ 461168601842738790, %16 ]
  %30 = mul i64 %29, 40
  %31 = tail call i8* @_Znwm(i64 %30) #16
  %32 = bitcast i8* %31 to %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*
  br label %33

33:                                               ; preds = %23, %28
  %34 = phi i64 [ %29, %28 ], [ 0, %23 ]
  %35 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %32, %28 ], [ null, %23 ]
  %36 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11
  %37 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %34
  %38 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %37 to i64
  %39 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %1, align 8
  %40 = icmp eq %"class.sh::TIntermBlock"* %39, null
  %41 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %39, i64 0, i32 1
  %42 = select i1 %40, %"class.sh::TIntermAggregateBase"* null, %"class.sh::TIntermAggregateBase"* %41
  %43 = bitcast %"class.sh::TIntermDeclaration"** %2 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %36, i64 0, i32 0
  store %"class.sh::TIntermAggregateBase"* %42, %"class.sh::TIntermAggregateBase"** %45, align 8
  %46 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 1
  %47 = bitcast %"class.sh::TIntermNode"** %46 to i64*
  store i64 %44, i64* %47, align 8
  %48 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2
  %49 = bitcast %"class.sh::TVector"* %48 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 24, i1 false) #7
  %50 = bitcast %"class.sh::TVector"* %3 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = bitcast %"class.sh::TVector"* %48 to i64*
  store i64 %51, i64* %52, align 8
  %53 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 1
  %54 = bitcast %"class.sh::TIntermNode"*** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2, i32 0, i32 0, i32 1
  %57 = bitcast %"class.sh::TIntermNode"*** %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %59 = bitcast %"class.sh::TIntermNode"*** %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %62 = bitcast %"class.sh::TIntermNode"*** %61 to i64*
  store i64 %60, i64* %62, align 8
  %63 = bitcast %"class.sh::TVector"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #7
  %64 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %36, i64 1
  %65 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %64 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector.44", %"class.std::__1::vector.44"* %0, i64 0, i32 0, i32 0
  %67 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %66, align 8
  %68 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5, align 8
  %69 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %68, %67
  br i1 %69, label %70, label %72

70:                                               ; preds = %33
  %71 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %67 to i64
  br label %100

72:                                               ; preds = %33, %72
  %73 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %75, %72 ], [ %36, %33 ]
  %74 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %76, %72 ], [ %68, %33 ]
  %75 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1
  %76 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1
  %77 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %75 to i8*
  %78 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %78, i64 16, i1 false) #7
  %79 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2
  %80 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2
  %81 = bitcast %"class.sh::TVector"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #7
  %82 = bitcast %"class.sh::TVector"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.sh::TVector"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2, i32 0, i32 0, i32 1
  %86 = bitcast %"class.sh::TIntermNode"*** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2, i32 0, i32 0, i32 1
  %89 = bitcast %"class.sh::TIntermNode"*** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast %"class.sh::TIntermNode"*** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast %"class.sh::TIntermNode"*** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.sh::TVector"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #7
  %96 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %76, %67
  br i1 %96, label %97, label %72

97:                                               ; preds = %72
  %98 = load i64, i64* %8, align 8
  %99 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5, align 8
  br label %100

100:                                              ; preds = %70, %97
  %101 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %67, %70 ], [ %99, %97 ]
  %102 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %36, %70 ], [ %75, %97 ]
  %103 = phi i64 [ %71, %70 ], [ %98, %97 ]
  %104 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %102 to i64
  store i64 %104, i64* %8, align 8
  store i64 %65, i64* %6, align 8
  store i64 %38, i64* %18, align 8
  %105 = inttoptr i64 %103 to %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*
  %106 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %101, %105
  br i1 %106, label %119, label %107

107:                                              ; preds = %100, %117
  %108 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %109, %117 ], [ %101, %100 ]
  %109 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1
  %110 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1, i32 2, i32 0, i32 0, i32 0
  %111 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %110, align 8
  %112 = icmp eq %"class.sh::TIntermNode"** %111, null
  br i1 %112, label %117, label %113

113:                                              ; preds = %107
  %114 = ptrtoint %"class.sh::TIntermNode"** %111 to i64
  %115 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1, i32 2, i32 0, i32 0, i32 1
  %116 = bitcast %"class.sh::TIntermNode"*** %115 to i64*
  store i64 %114, i64* %116, align 8
  br label %117

117:                                              ; preds = %113, %107
  %118 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %109, %105
  br i1 %118, label %119, label %107

119:                                              ; preds = %117, %100
  %120 = icmp eq i64 %103, 0
  br i1 %120, label %123, label %121

121:                                              ; preds = %119
  %122 = inttoptr i64 %103 to i8*
  tail call void @_ZdlPv(i8* %122) #16
  br label %123

123:                                              ; preds = %119, %121
  ret void
}

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #15

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { nofree nounwind readonly }
attributes #16 = { builtin nounwind }
attributes #17 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{i32 0, i32 33}
!4 = !{!"branch_weights", i32 2000, i32 1}
!5 = !{!"branch_weights", i32 1, i32 2000}
!6 = !{!7}
!7 = distinct !{!7, !8}
!8 = distinct !{!8, !"LVerDomain"}
!9 = !{!10}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.isvectorized", i32 1}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.unroll.disable"}
!15 = distinct !{!15, !12}
!16 = !{!17, !19}
!17 = distinct !{!17, !18, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE16try_emplace_implIS6_JEEENSE_INS0_12raw_hash_setIS7_SA_SB_SH_E8iteratorEbEEOT_DpOT0_: argument 0"}
!18 = distinct !{!18, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE16try_emplace_implIS6_JEEENSE_INS0_12raw_hash_setIS7_SA_SB_SH_E8iteratorEbEEOT_DpOT0_"}
!19 = distinct !{!19, !20, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE11try_emplaceIS6_JELi0ELPS6_0EEENSE_INS0_12raw_hash_setIS7_SA_SB_SH_E8iteratorEbEEOT_DpOT0_: argument 0"}
!20 = distinct !{!20, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE11try_emplaceIS6_JELi0ELPS6_0EEENSE_INS0_12raw_hash_setIS7_SA_SB_SH_E8iteratorEbEEOT_DpOT0_"}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !12}
!27 = distinct !{!27, !14}
!28 = distinct !{!28, !12}
!29 = !{!"branch_weights", i32 4001, i32 1}
!30 = !{!"branch_weights", i32 2146410443, i32 1073205}
!31 = !{!32}
!32 = distinct !{!32, !33}
!33 = distinct !{!33, !"LVerDomain"}
!34 = !{!35}
!35 = distinct !{!35, !33}
!36 = distinct !{!36, !12}
!37 = distinct !{!37, !14}
!38 = distinct !{!38, !12}
!39 = !{!40}
!40 = distinct !{!40, !41}
!41 = distinct !{!41, !"LVerDomain"}
!42 = !{!43}
!43 = distinct !{!43, !41}
!44 = distinct !{!44, !12}
!45 = distinct !{!45, !14}
!46 = distinct !{!46, !12}
!47 = !{!48, !50}
!48 = distinct !{!48, !49, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh10TStructureENS3_12_GLOBAL__N_113StructureDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE16try_emplace_implIRSH_JEEENSG_INS0_12raw_hash_setIS9_SC_SD_SJ_E8iteratorEbEEOT_DpOT0_: argument 0"}
!49 = distinct !{!49, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh10TStructureENS3_12_GLOBAL__N_113StructureDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE16try_emplace_implIRSH_JEEENSG_INS0_12raw_hash_setIS9_SC_SD_SJ_E8iteratorEbEEOT_DpOT0_"}
!50 = distinct !{!50, !51, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh10TStructureENS3_12_GLOBAL__N_113StructureDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE11try_emplaceIS6_JELi0EEENSG_INS0_12raw_hash_setIS9_SC_SD_SJ_E8iteratorEbEERKT_DpOT0_: argument 0"}
!51 = distinct !{!51, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh10TStructureENS3_12_GLOBAL__N_113StructureDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE11try_emplaceIS6_JELi0EEENSG_INS0_12raw_hash_setIS9_SC_SD_SJ_E8iteratorEbEERKT_DpOT0_"}
!52 = distinct !{!52, !14}
!53 = !{!54}
!54 = distinct !{!54, !55}
!55 = distinct !{!55, !"LVerDomain"}
!56 = !{!57}
!57 = distinct !{!57, !55}
!58 = distinct !{!58, !12}
!59 = distinct !{!59, !12}
!60 = !{!61}
!61 = distinct !{!61, !62}
!62 = distinct !{!62, !"LVerDomain"}
!63 = !{!64}
!64 = distinct !{!64, !62}
!65 = distinct !{!65, !12}
!66 = distinct !{!66, !14}
!67 = distinct !{!67, !12}
!68 = !{!69}
!69 = distinct !{!69, !70}
!70 = distinct !{!70, !"LVerDomain"}
!71 = !{!72}
!72 = distinct !{!72, !70}
!73 = distinct !{!73, !12}
!74 = distinct !{!74, !14}
!75 = distinct !{!75, !12}
!76 = !{!77}
!77 = distinct !{!77, !78}
!78 = distinct !{!78, !"LVerDomain"}
!79 = !{!80}
!80 = distinct !{!80, !78}
!81 = distinct !{!81, !12}
!82 = distinct !{!82, !14}
!83 = distinct !{!83, !12}
!84 = !{!85}
!85 = distinct !{!85, !86, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_: argument 0"}
!86 = distinct !{!86, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_"}
!87 = !{!88}
!88 = distinct !{!88, !89, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_: argument 0"}
!89 = distinct !{!89, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_"}
!90 = !{!91}
!91 = distinct !{!91, !92}
!92 = distinct !{!92, !"LVerDomain"}
!93 = !{!94}
!94 = distinct !{!94, !92}
!95 = distinct !{!95, !12}
!96 = distinct !{!96, !14}
!97 = distinct !{!97, !12}
!98 = !{!99}
!99 = distinct !{!99, !100}
!100 = distinct !{!100, !"LVerDomain"}
!101 = !{!102}
!102 = distinct !{!102, !100}
!103 = distinct !{!103, !12}
!104 = distinct !{!104, !14}
!105 = distinct !{!105, !12}
!106 = !{!107, !109}
!107 = distinct !{!107, !108, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN2sh9TVariableEEENS0_10StringHashENS0_12StringHashEq2EqENS7_INS3_4pairIKS9_SD_EEEEE16try_emplace_implIRSJ_JEEENSI_INS0_12raw_hash_setISE_SF_SH_SL_E8iteratorEbEEOT_DpOT0_: argument 0"}
!108 = distinct !{!108, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN2sh9TVariableEEENS0_10StringHashENS0_12StringHashEq2EqENS7_INS3_4pairIKS9_SD_EEEEE16try_emplace_implIRSJ_JEEENSI_INS0_12raw_hash_setISE_SF_SH_SL_E8iteratorEbEEOT_DpOT0_"}
!109 = distinct !{!109, !110, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN2sh9TVariableEEENS0_10StringHashENS0_12StringHashEq2EqENS7_INS3_4pairIKS9_SD_EEEEE11try_emplaceIS9_JELi0EEENSI_INS0_12raw_hash_setISE_SF_SH_SL_E8iteratorEbEERKT_DpOT0_: argument 0"}
!110 = distinct !{!110, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN2sh9TVariableEEENS0_10StringHashENS0_12StringHashEq2EqENS7_INS3_4pairIKS9_SD_EEEEE11try_emplaceIS9_JELi0EEENSI_INS0_12raw_hash_setISE_SF_SH_SL_E8iteratorEbEERKT_DpOT0_"}
!111 = !{!112}
!112 = distinct !{!112, !113}
!113 = distinct !{!113, !"LVerDomain"}
!114 = !{!115}
!115 = distinct !{!115, !113}
!116 = distinct !{!116, !12}
!117 = distinct !{!117, !14}
!118 = distinct !{!118, !12}
