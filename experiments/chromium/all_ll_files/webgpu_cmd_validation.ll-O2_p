; ModuleID = '../../gpu/command_buffer/service/webgpu_cmd_validation.cc'
source_filename = "../../gpu/command_buffer/service/webgpu_cmd_validation.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.gpu::webgpu::Validators" = type { %"class.gpu::ValueValidator" }
%"class.gpu::ValueValidator" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZN3gpu6webgpuL28valid_power_preference_tableE = internal unnamed_addr constant [3 x i32] [i32 2, i32 1, i32 0], align 4

@_ZN3gpu6webgpu10ValidatorsC1Ev = hidden unnamed_addr alias void (%"struct.gpu::webgpu::Validators"*), void (%"struct.gpu::webgpu::Validators"*)* @_ZN3gpu6webgpu10ValidatorsC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gpu6webgpu10ValidatorsC2Ev(%"struct.gpu::webgpu::Validators"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"struct.gpu::webgpu::Validators"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 24, i1 false) #6
  %3 = getelementptr inbounds %"struct.gpu::webgpu::Validators", %"struct.gpu::webgpu::Validators"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"struct.gpu::webgpu::Validators", %"struct.gpu::webgpu::Validators"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = getelementptr inbounds %"struct.gpu::webgpu::Validators", %"struct.gpu::webgpu::Validators"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %6 = bitcast i32** %4 to i64*
  %7 = bitcast %"struct.gpu::webgpu::Validators"* %0 to i64*
  %8 = bitcast i32** %5 to i64*
  br label %9

9:                                                ; preds = %87, %1
  %10 = phi i64 [ 0, %1 ], [ %90, %87 ]
  %11 = phi i32* [ null, %1 ], [ %89, %87 ]
  %12 = phi i32* [ null, %1 ], [ %88, %87 ]
  %13 = phi i64 [ 0, %1 ], [ %85, %87 ]
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* @_ZN3gpu6webgpuL28valid_power_preference_tableE, i64 0, i64 %13
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32* %12, %11
  br i1 %16, label %26, label %17

17:                                               ; preds = %9, %21
  %18 = phi i32* [ %22, %21 ], [ %12, %9 ]
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, %15
  br i1 %20, label %24, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds i32, i32* %18, i64 1
  %23 = icmp eq i32* %22, %11
  br i1 %23, label %26, label %17

24:                                               ; preds = %17
  %25 = icmp eq i32* %18, %11
  br i1 %25, label %26, label %84

26:                                               ; preds = %21, %24, %9
  %27 = load i32*, i32** %5, align 8
  %28 = icmp eq i32* %11, %27
  %29 = ptrtoint i32* %27 to i64
  br i1 %28, label %33, label %30

30:                                               ; preds = %26
  store i32 %15, i32* %11, align 4
  %31 = getelementptr inbounds i32, i32* %11, i64 1
  %32 = ptrtoint i32* %31 to i64
  store i64 %32, i64* %6, align 8
  br label %84

33:                                               ; preds = %26
  %34 = ptrtoint i32* %11 to i64
  %35 = sub i64 %34, %10
  %36 = ashr exact i64 %35, 2
  %37 = add nsw i64 %36, 1
  %38 = icmp ugt i64 %37, 4611686018427387903
  br i1 %38, label %39, label %41

39:                                               ; preds = %33
  %40 = bitcast %"struct.gpu::webgpu::Validators"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %40) #7
  unreachable

41:                                               ; preds = %33
  %42 = sub i64 %29, %10
  %43 = ashr exact i64 %42, 2
  %44 = icmp ult i64 %43, 2305843009213693951
  br i1 %44, label %45, label %53

45:                                               ; preds = %41
  %46 = ashr exact i64 %42, 1
  %47 = icmp ult i64 %46, %37
  %48 = select i1 %47, i64 %37, i64 %46
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %58, label %50

50:                                               ; preds = %45
  %51 = icmp ugt i64 %48, 4611686018427387903
  br i1 %51, label %52, label %53

52:                                               ; preds = %50
  tail call void @abort() #7
  unreachable

53:                                               ; preds = %50, %41
  %54 = phi i64 [ %48, %50 ], [ 4611686018427387903, %41 ]
  %55 = shl i64 %54, 2
  %56 = tail call i8* @_Znwm(i64 %55) #8
  %57 = bitcast i8* %56 to i32*
  br label %58

58:                                               ; preds = %53, %45
  %59 = phi i64 [ %54, %53 ], [ 0, %45 ]
  %60 = phi i32* [ %57, %53 ], [ null, %45 ]
  %61 = getelementptr inbounds i32, i32* %60, i64 %36
  %62 = getelementptr inbounds i32, i32* %60, i64 %59
  %63 = ptrtoint i32* %62 to i64
  store i32 %15, i32* %61, align 4
  %64 = getelementptr inbounds i32, i32* %61, i64 1
  %65 = ptrtoint i32* %64 to i64
  %66 = load i32*, i32** %3, align 8
  %67 = load i64, i64* %6, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %61, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %58
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #6
  %78 = load i32*, i32** %3, align 8
  br label %79

79:                                               ; preds = %75, %58
  %80 = phi i32* [ %66, %58 ], [ %78, %75 ]
  store i64 %73, i64* %7, align 8
  store i64 %65, i64* %6, align 8
  store i64 %63, i64* %8, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #8
  br label %84

84:                                               ; preds = %82, %79, %30, %24
  %85 = add nuw nsw i64 %13, 1
  %86 = icmp eq i64 %85, 3
  br i1 %86, label %91, label %87

87:                                               ; preds = %84
  %88 = load i32*, i32** %3, align 8
  %89 = load i32*, i32** %4, align 8
  %90 = ptrtoint i32* %88 to i64
  br label %9

91:                                               ; preds = %84
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
