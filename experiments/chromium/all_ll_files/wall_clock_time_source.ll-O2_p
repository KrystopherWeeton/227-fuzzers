; ModuleID = '../../media/base/wall_clock_time_source.cc'
source_filename = "../../media/base/wall_clock_time_source.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.media::WallClockTimeSource" = type { %"class.media::TimeSource", %"class.base::TickClock"*, i8, double, %"class.base::TimeDelta", %"class.base::TimeTicks", %"class.base::Lock" }
%"class.media::TimeSource" = type { i32 (...)** }
%"class.base::TickClock" = type { i32 (...)** }
%"class.base::TimeDelta" = type { i64 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.base::DefaultTickClock" = type { %"class.base::TickClock" }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::TimeDelta"*, %"class.base::TimeDelta"*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.base::TimeDelta"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"class.base::TimeTicks"*, %"class.base::TimeTicks"*, %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.base::TimeTicks"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZNK4base9TimeDeltamiES0_ = comdat any

@_ZTVN5media19WallClockTimeSourceE = hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.media::WallClockTimeSource"*)* @_ZN5media19WallClockTimeSourceD2Ev to i8*), i8* bitcast (void (%"class.media::WallClockTimeSource"*)* @_ZN5media19WallClockTimeSourceD0Ev to i8*), i8* bitcast (void (%"class.media::WallClockTimeSource"*)* @_ZN5media19WallClockTimeSource12StartTickingEv to i8*), i8* bitcast (void (%"class.media::WallClockTimeSource"*)* @_ZN5media19WallClockTimeSource11StopTickingEv to i8*), i8* bitcast (void (%"class.media::WallClockTimeSource"*, double)* @_ZN5media19WallClockTimeSource15SetPlaybackRateEd to i8*), i8* bitcast (void (%"class.media::WallClockTimeSource"*, i64)* @_ZN5media19WallClockTimeSource12SetMediaTimeEN4base9TimeDeltaE to i8*), i8* bitcast (i64 (%"class.media::WallClockTimeSource"*)* @_ZN5media19WallClockTimeSource16CurrentMediaTimeEv to i8*), i8* bitcast (i1 (%"class.media::WallClockTimeSource"*, %"class.std::__1::vector"*, %"class.std::__1::vector.6"*)* @_ZN5media19WallClockTimeSource17GetWallClockTimesERKNSt3__16vectorIN4base9TimeDeltaENS1_9allocatorIS4_EEEEPNS2_INS3_9TimeTicksENS5_ISA_EEEE to i8*)] }, align 8
@.str = private unnamed_addr constant [43 x i8] c"../../media/base/wall_clock_time_source.cc\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"!ticking_\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"delta_ != other.delta_\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"../../base/time/time.h\00", align 1
@.str.4 = private unnamed_addr constant [38 x i8] c"!is_inf() || (delta_ == other.delta_)\00", align 1

@_ZN5media19WallClockTimeSourceC1Ev = hidden unnamed_addr alias void (%"class.media::WallClockTimeSource"*), void (%"class.media::WallClockTimeSource"*)* @_ZN5media19WallClockTimeSourceC2Ev
@_ZN5media19WallClockTimeSourceD1Ev = hidden unnamed_addr alias void (%"class.media::WallClockTimeSource"*), void (%"class.media::WallClockTimeSource"*)* @_ZN5media19WallClockTimeSourceD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media19WallClockTimeSourceC2Ev(%"class.media::WallClockTimeSource"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN5media19WallClockTimeSourceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 1
  %4 = tail call %"class.base::DefaultTickClock"* @_ZN4base16DefaultTickClock11GetInstanceEv() #9
  %5 = getelementptr inbounds %"class.base::DefaultTickClock", %"class.base::DefaultTickClock"* %4, i64 0, i32 0
  store %"class.base::TickClock"* %5, %"class.base::TickClock"** %3, align 8
  %6 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 2
  store i8 0, i8* %6, align 8
  %7 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 3
  store double 1.000000e+00, double* %7, align 8
  %8 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 4, i32 0
  %9 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 6, i32 0
  %10 = bitcast i64* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false)
  tail call void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"* %9) #9
  ret void
}

declare %"class.base::DefaultTickClock"* @_ZN4base16DefaultTickClock11GetInstanceEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media19WallClockTimeSourceD2Ev(%"class.media::WallClockTimeSource"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN5media19WallClockTimeSourceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 6, i32 0
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %3) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media19WallClockTimeSourceD0Ev(%"class.media::WallClockTimeSource"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN5media19WallClockTimeSourceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 6, i32 0
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %3) #9
  %4 = bitcast %"class.media::WallClockTimeSource"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media19WallClockTimeSource12StartTickingEv(%"class.media::WallClockTimeSource"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 6
  %3 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %2, i64 0, i32 0, i32 0
  %4 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %3) #9
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6, !prof !2

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %2, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %7) #9
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 2
  store i8 1, i8* %9, align 8
  %10 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 1
  %11 = load %"class.base::TickClock"*, %"class.base::TickClock"** %10, align 8
  %12 = bitcast %"class.base::TickClock"* %11 to i64 (%"class.base::TickClock"*)***
  %13 = load i64 (%"class.base::TickClock"*)**, i64 (%"class.base::TickClock"*)*** %12, align 8
  %14 = getelementptr inbounds i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %13, i64 2
  %15 = load i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %14, align 8
  %16 = tail call i64 %15(%"class.base::TickClock"* %11) #9
  %17 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 5, i32 0, i32 0
  store i64 %16, i64* %17, align 8
  %18 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %3) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media19WallClockTimeSource11StopTickingEv(%"class.media::WallClockTimeSource"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 6
  %3 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %2, i64 0, i32 0, i32 0
  %4 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %3) #9
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6, !prof !2

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %2, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %7) #9
  br label %8

8:                                                ; preds = %1, %6
  %9 = tail call i64 @_ZN5media19WallClockTimeSource23CurrentMediaTime_LockedEv(%"class.media::WallClockTimeSource"* %0)
  %10 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 4, i32 0
  store i64 %9, i64* %10, align 8
  %11 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 2
  store i8 0, i8* %11, align 8
  %12 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 1
  %13 = load %"class.base::TickClock"*, %"class.base::TickClock"** %12, align 8
  %14 = bitcast %"class.base::TickClock"* %13 to i64 (%"class.base::TickClock"*)***
  %15 = load i64 (%"class.base::TickClock"*)**, i64 (%"class.base::TickClock"*)*** %14, align 8
  %16 = getelementptr inbounds i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %15, i64 2
  %17 = load i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %16, align 8
  %18 = tail call i64 %17(%"class.base::TickClock"* %13) #9
  %19 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 5, i32 0, i32 0
  store i64 %18, i64* %19, align 8
  %20 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %3) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN5media19WallClockTimeSource23CurrentMediaTime_LockedEv(%"class.media::WallClockTimeSource"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 2
  %4 = load i8, i8* %3, align 8, !range !3
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 3
  %8 = load double, double* %7, align 8
  %9 = fcmp une double %8, 0.000000e+00
  br i1 %9, label %13, label %10

10:                                               ; preds = %1, %6
  %11 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 4, i32 0
  %12 = load i64, i64* %11, align 8
  br label %47

13:                                               ; preds = %6
  %14 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 1
  %15 = load %"class.base::TickClock"*, %"class.base::TickClock"** %14, align 8
  %16 = bitcast %"class.base::TickClock"* %15 to i64 (%"class.base::TickClock"*)***
  %17 = load i64 (%"class.base::TickClock"*)**, i64 (%"class.base::TickClock"*)*** %16, align 8
  %18 = getelementptr inbounds i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %17, i64 2
  %19 = load i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %18, align 8
  %20 = tail call i64 %19(%"class.base::TickClock"* %15) #9
  %21 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 5, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = sub nsw i64 %20, %22
  %24 = sitofp i64 %23 to double
  %25 = load double, double* %7, align 8
  %26 = fmul double %25, %24
  %27 = fptosi double %26 to i64
  %28 = add i64 %27, -9223372036854775807
  %29 = icmp ult i64 %28, 2
  %30 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 4, i32 0
  %31 = load i64, i64* %30, align 8
  br i1 %29, label %39, label %32

32:                                               ; preds = %13
  %33 = icmp slt i64 %27, 0
  %34 = select i1 %33, i64 -9223372036854775808, i64 9223372036854775807
  %35 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %31, i64 %27) #9
  %36 = extractvalue { i64, i1 } %35, 1
  %37 = extractvalue { i64, i1 } %35, 0
  %38 = select i1 %36, i64 %34, i64 %37, !prof !4
  br label %47

39:                                               ; preds = %13
  %40 = add i64 %31, -9223372036854775807
  %41 = icmp ugt i64 %40, 1
  %42 = icmp eq i64 %31, %27
  %43 = or i1 %41, %42
  br i1 %43, label %47, label %44

44:                                               ; preds = %39
  %45 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0)) #9
  %46 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45) #9
  br label %47

47:                                               ; preds = %44, %39, %32, %10
  %48 = phi i64 [ %12, %10 ], [ %38, %32 ], [ %27, %39 ], [ %27, %44 ]
  ret i64 %48
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media19WallClockTimeSource15SetPlaybackRateEd(%"class.media::WallClockTimeSource"*, double) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 6
  %4 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %3, i64 0, i32 0, i32 0
  %5 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %4) #9
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7, !prof !2

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %3, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %8) #9
  br label %9

9:                                                ; preds = %2, %7
  %10 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 2
  %11 = load i8, i8* %10, align 8, !range !3
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %24, label %13

13:                                               ; preds = %9
  %14 = tail call i64 @_ZN5media19WallClockTimeSource23CurrentMediaTime_LockedEv(%"class.media::WallClockTimeSource"* %0)
  %15 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 4, i32 0
  store i64 %14, i64* %15, align 8
  %16 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 1
  %17 = load %"class.base::TickClock"*, %"class.base::TickClock"** %16, align 8
  %18 = bitcast %"class.base::TickClock"* %17 to i64 (%"class.base::TickClock"*)***
  %19 = load i64 (%"class.base::TickClock"*)**, i64 (%"class.base::TickClock"*)*** %18, align 8
  %20 = getelementptr inbounds i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %19, i64 2
  %21 = load i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %20, align 8
  %22 = tail call i64 %21(%"class.base::TickClock"* %17) #9
  %23 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 5, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  br label %24

24:                                               ; preds = %9, %13
  %25 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 3
  store double %1, double* %25, align 8
  %26 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %4) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media19WallClockTimeSource12SetMediaTimeEN4base9TimeDeltaE(%"class.media::WallClockTimeSource"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 6
  %5 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %4, i64 0, i32 0, i32 0
  %6 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %5) #9
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %10, label %8, !prof !2

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %4, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %9) #9
  br label %10

10:                                               ; preds = %2, %8
  %11 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 2
  %12 = load i8, i8* %11, align 8, !range !3
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %10
  %15 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0), i32 51, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0)) #9
  %16 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #9
  br label %17

17:                                               ; preds = %10, %14
  %18 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 4, i32 0
  store i64 %1, i64* %18, align 8
  %19 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 5, i32 0, i32 0
  store i64 0, i64* %19, align 8
  %20 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %5) #9
  ret void
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN5media19WallClockTimeSource16CurrentMediaTimeEv(%"class.media::WallClockTimeSource"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 6
  %3 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %2, i64 0, i32 0, i32 0
  %4 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %3) #9
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6, !prof !2

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %2, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %7) #9
  br label %8

8:                                                ; preds = %1, %6
  %9 = tail call i64 @_ZN5media19WallClockTimeSource23CurrentMediaTime_LockedEv(%"class.media::WallClockTimeSource"* %0)
  %10 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %3) #9
  ret i64 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5media19WallClockTimeSource17GetWallClockTimesERKNSt3__16vectorIN4base9TimeDeltaENS1_9allocatorIS4_EEEEPNS2_INS3_9TimeTicksENS5_ISA_EEEE(%"class.media::WallClockTimeSource"*, %"class.std::__1::vector"* nocapture readonly dereferenceable(24), %"class.std::__1::vector.6"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 6
  %6 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %5, i64 0, i32 0, i32 0
  %7 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %6) #9
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %11, label %9, !prof !2

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %5, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %10) #9
  br label %11

11:                                               ; preds = %3, %9
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %13 = load %"class.base::TimeDelta"*, %"class.base::TimeDelta"** %12, align 8
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %15 = load %"class.base::TimeDelta"*, %"class.base::TimeDelta"** %14, align 8
  %16 = icmp eq %"class.base::TimeDelta"* %13, %15
  br i1 %16, label %17, label %91

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 5
  %19 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %2, i64 0, i32 0, i32 1
  %20 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %19, align 8
  %21 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %22 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %21, align 8
  %23 = icmp eq %"class.base::TimeTicks"* %20, %22
  %24 = ptrtoint %"class.base::TimeTicks"* %22 to i64
  br i1 %23, label %32, label %25

25:                                               ; preds = %17
  %26 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %18, i64 0, i32 0, i32 0
  %27 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %20, i64 0, i32 0, i32 0
  %28 = load i64, i64* %26, align 8
  store i64 %28, i64* %27, align 8
  %29 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %20, i64 1
  %30 = ptrtoint %"class.base::TimeTicks"* %29 to i64
  %31 = bitcast %"class.base::TimeTicks"** %19 to i64*
  store i64 %30, i64* %31, align 8
  br label %244

32:                                               ; preds = %17
  %33 = ptrtoint %"class.base::TimeTicks"* %20 to i64
  %34 = bitcast %"class.base::TimeTicks"** %19 to i64*
  %35 = bitcast %"class.std::__1::vector.6"* %2 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = sub i64 %33, %36
  %38 = ashr exact i64 %37, 3
  %39 = add nsw i64 %38, 1
  %40 = icmp ugt i64 %39, 2305843009213693951
  br i1 %40, label %41, label %43

41:                                               ; preds = %32
  %42 = bitcast %"class.std::__1::vector.6"* %2 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %42) #11
  unreachable

43:                                               ; preds = %32
  %44 = bitcast %"class.base::TimeTicks"** %21 to i64*
  %45 = sub i64 %24, %36
  %46 = ashr exact i64 %45, 3
  %47 = icmp ult i64 %46, 1152921504606846975
  br i1 %47, label %48, label %56

48:                                               ; preds = %43
  %49 = ashr exact i64 %45, 2
  %50 = icmp ult i64 %49, %39
  %51 = select i1 %50, i64 %39, i64 %49
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %61, label %53

53:                                               ; preds = %48
  %54 = icmp ugt i64 %51, 2305843009213693951
  br i1 %54, label %55, label %56

55:                                               ; preds = %53
  tail call void @abort() #11
  unreachable

56:                                               ; preds = %53, %43
  %57 = phi i64 [ %51, %53 ], [ 2305843009213693951, %43 ]
  %58 = shl i64 %57, 3
  %59 = tail call i8* @_Znwm(i64 %58) #10
  %60 = bitcast i8* %59 to %"class.base::TimeTicks"*
  br label %61

61:                                               ; preds = %56, %48
  %62 = phi i64 [ %57, %56 ], [ 0, %48 ]
  %63 = phi %"class.base::TimeTicks"* [ %60, %56 ], [ null, %48 ]
  %64 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %63, i64 %38
  %65 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %63, i64 %62
  %66 = ptrtoint %"class.base::TimeTicks"* %65 to i64
  %67 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %18, i64 0, i32 0, i32 0
  %68 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %64, i64 0, i32 0, i32 0
  %69 = load i64, i64* %67, align 8
  store i64 %69, i64* %68, align 8
  %70 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %64, i64 1
  %71 = ptrtoint %"class.base::TimeTicks"* %70 to i64
  %72 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %2, i64 0, i32 0, i32 0
  %73 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %72, align 8
  %74 = load i64, i64* %34, align 8
  %75 = ptrtoint %"class.base::TimeTicks"* %73 to i64
  %76 = sub i64 %74, %75
  %77 = ashr exact i64 %76, 3
  %78 = sub nsw i64 0, %77
  %79 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %64, i64 %78
  %80 = ptrtoint %"class.base::TimeTicks"* %79 to i64
  %81 = icmp sgt i64 %76, 0
  br i1 %81, label %82, label %86

82:                                               ; preds = %61
  %83 = bitcast %"class.base::TimeTicks"* %79 to i8*
  %84 = bitcast %"class.base::TimeTicks"* %73 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %83, i8* align 8 %84, i64 %76, i1 false) #9
  %85 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %72, align 8
  br label %86

86:                                               ; preds = %82, %61
  %87 = phi %"class.base::TimeTicks"* [ %73, %61 ], [ %85, %82 ]
  store i64 %80, i64* %35, align 8
  store i64 %71, i64* %34, align 8
  store i64 %66, i64* %44, align 8
  %88 = icmp eq %"class.base::TimeTicks"* %87, null
  br i1 %88, label %244, label %89

89:                                               ; preds = %86
  %90 = bitcast %"class.base::TimeTicks"* %87 to i8*
  tail call void @_ZdlPv(i8* %90) #10
  br label %244

91:                                               ; preds = %11
  %92 = ptrtoint %"class.base::TimeDelta"* %13 to i64
  %93 = ptrtoint %"class.base::TimeDelta"* %15 to i64
  %94 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 3
  %95 = load double, double* %94, align 8
  %96 = fcmp une double %95, 0.000000e+00
  %97 = select i1 %96, double %95, double 1.000000e+00
  %98 = sub i64 %93, %92
  %99 = ashr exact i64 %98, 3
  %100 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %101 = bitcast %"class.base::TimeTicks"** %100 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = bitcast %"class.std::__1::vector.6"* %2 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = sub i64 %102, %104
  %106 = ashr exact i64 %105, 3
  %107 = icmp ult i64 %106, %99
  br i1 %107, label %108, label %131

108:                                              ; preds = %91
  %109 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %2, i64 0, i32 0, i32 1
  %110 = bitcast %"class.base::TimeTicks"** %109 to i64*
  %111 = icmp ugt i64 %99, 2305843009213693951
  br i1 %111, label %112, label %113

112:                                              ; preds = %108
  tail call void @abort() #11
  unreachable

113:                                              ; preds = %108
  %114 = load i64, i64* %110, align 8
  %115 = sub i64 %114, %104
  %116 = ashr exact i64 %115, 3
  %117 = tail call i8* @_Znwm(i64 %98) #10
  %118 = bitcast i8* %117 to %"class.base::TimeTicks"*
  %119 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %118, i64 %116
  %120 = ptrtoint %"class.base::TimeTicks"* %119 to i64
  %121 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %118, i64 %99
  %122 = ptrtoint %"class.base::TimeTicks"* %121 to i64
  %123 = ptrtoint i8* %117 to i64
  %124 = icmp sgt i64 %115, 0
  br i1 %124, label %125, label %127

125:                                              ; preds = %113
  %126 = inttoptr i64 %104 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %117, i8* align 8 %126, i64 %115, i1 false) #9
  br label %127

127:                                              ; preds = %125, %113
  store i64 %123, i64* %103, align 8
  store i64 %120, i64* %110, align 8
  store i64 %122, i64* %101, align 8
  %128 = icmp eq i64 %104, 0
  br i1 %128, label %131, label %129

129:                                              ; preds = %127
  %130 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %130) #10
  br label %131

131:                                              ; preds = %91, %127, %129
  %132 = load %"class.base::TimeDelta"*, %"class.base::TimeDelta"** %12, align 8
  %133 = load %"class.base::TimeDelta"*, %"class.base::TimeDelta"** %14, align 8
  %134 = icmp eq %"class.base::TimeDelta"* %132, %133
  br i1 %134, label %244, label %135

135:                                              ; preds = %131
  %136 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 4, i32 0
  %137 = fcmp olt double %97, 0.000000e+00
  %138 = zext i1 %137 to i32
  %139 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 5, i32 0, i32 0
  %140 = bitcast %"class.logging::CheckError"* %4 to i8*
  %141 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %2, i64 0, i32 0, i32 1
  %142 = bitcast %"class.base::TimeTicks"** %141 to i64*
  %143 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %2, i64 0, i32 0, i32 0
  br label %144

144:                                              ; preds = %135, %241
  %145 = phi %"class.base::TimeDelta"* [ %132, %135 ], [ %242, %241 ]
  %146 = load i64, i64* %136, align 8
  %147 = call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* %145, i64 %146)
  %148 = sitofp i64 %147 to double
  %149 = fdiv double %148, %97
  %150 = fcmp oge double %149, 0xC3E0000000000000
  %151 = fcmp ole double %149, 0x43DFFFFFFFFFFFFF
  %152 = and i1 %151, %150
  %153 = fptosi double %149 to i64
  br i1 %152, label %159, label %154

154:                                              ; preds = %144
  %155 = lshr i64 %147, 63
  %156 = trunc i64 %155 to i32
  %157 = icmp eq i32 %156, %138
  %158 = select i1 %157, i64 9223372036854775807, i64 -9223372036854775808
  br label %159

159:                                              ; preds = %144, %154
  %160 = phi i64 [ %153, %144 ], [ %158, %154 ]
  %161 = load i64, i64* %139, align 8
  %162 = add i64 %160, -9223372036854775807
  %163 = icmp ult i64 %162, 2
  br i1 %163, label %171, label %164

164:                                              ; preds = %159
  %165 = icmp slt i64 %160, 0
  %166 = select i1 %165, i64 -9223372036854775808, i64 9223372036854775807
  %167 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %161, i64 %160) #9
  %168 = extractvalue { i64, i1 } %167, 1
  %169 = extractvalue { i64, i1 } %167, 0
  %170 = select i1 %168, i64 %166, i64 %169, !prof !4
  br label %178

171:                                              ; preds = %159
  %172 = add i64 %161, -9223372036854775807
  %173 = icmp ugt i64 %172, 1
  %174 = icmp eq i64 %161, %160
  %175 = or i1 %174, %173
  br i1 %175, label %178, label %176

176:                                              ; preds = %171
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %140) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0)) #9
  %177 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %140) #9
  br label %178

178:                                              ; preds = %164, %171, %176
  %179 = phi i64 [ %170, %164 ], [ %160, %171 ], [ %160, %176 ]
  %180 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %141, align 8
  %181 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %100, align 8
  %182 = icmp ult %"class.base::TimeTicks"* %180, %181
  %183 = ptrtoint %"class.base::TimeTicks"* %181 to i64
  br i1 %182, label %184, label %188

184:                                              ; preds = %178
  %185 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %180, i64 0, i32 0, i32 0
  store i64 %179, i64* %185, align 8
  %186 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %180, i64 1
  %187 = ptrtoint %"class.base::TimeTicks"* %186 to i64
  store i64 %187, i64* %142, align 8
  br label %241

188:                                              ; preds = %178
  %189 = ptrtoint %"class.base::TimeTicks"* %180 to i64
  %190 = load i64, i64* %103, align 8
  %191 = sub i64 %189, %190
  %192 = ashr exact i64 %191, 3
  %193 = add nsw i64 %192, 1
  %194 = icmp ugt i64 %193, 2305843009213693951
  br i1 %194, label %195, label %197

195:                                              ; preds = %188
  %196 = bitcast %"class.std::__1::vector.6"* %2 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %196) #11
  unreachable

197:                                              ; preds = %188
  %198 = sub i64 %183, %190
  %199 = ashr exact i64 %198, 3
  %200 = icmp ult i64 %199, 1152921504606846975
  br i1 %200, label %201, label %209

201:                                              ; preds = %197
  %202 = ashr exact i64 %198, 2
  %203 = icmp ult i64 %202, %193
  %204 = select i1 %203, i64 %193, i64 %202
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %214, label %206

206:                                              ; preds = %201
  %207 = icmp ugt i64 %204, 2305843009213693951
  br i1 %207, label %208, label %209

208:                                              ; preds = %206
  call void @abort() #11
  unreachable

209:                                              ; preds = %206, %197
  %210 = phi i64 [ %204, %206 ], [ 2305843009213693951, %197 ]
  %211 = shl i64 %210, 3
  %212 = call i8* @_Znwm(i64 %211) #10
  %213 = bitcast i8* %212 to %"class.base::TimeTicks"*
  br label %214

214:                                              ; preds = %209, %201
  %215 = phi i64 [ %210, %209 ], [ 0, %201 ]
  %216 = phi %"class.base::TimeTicks"* [ %213, %209 ], [ null, %201 ]
  %217 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %216, i64 %192
  %218 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %216, i64 %215
  %219 = ptrtoint %"class.base::TimeTicks"* %218 to i64
  %220 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %217, i64 0, i32 0, i32 0
  store i64 %179, i64* %220, align 8
  %221 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %217, i64 1
  %222 = ptrtoint %"class.base::TimeTicks"* %221 to i64
  %223 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %143, align 8
  %224 = load i64, i64* %142, align 8
  %225 = ptrtoint %"class.base::TimeTicks"* %223 to i64
  %226 = sub i64 %224, %225
  %227 = ashr exact i64 %226, 3
  %228 = sub nsw i64 0, %227
  %229 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %217, i64 %228
  %230 = ptrtoint %"class.base::TimeTicks"* %229 to i64
  %231 = icmp sgt i64 %226, 0
  br i1 %231, label %232, label %236

232:                                              ; preds = %214
  %233 = bitcast %"class.base::TimeTicks"* %229 to i8*
  %234 = bitcast %"class.base::TimeTicks"* %223 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %233, i8* align 8 %234, i64 %226, i1 false) #9
  %235 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %143, align 8
  br label %236

236:                                              ; preds = %232, %214
  %237 = phi %"class.base::TimeTicks"* [ %223, %214 ], [ %235, %232 ]
  store i64 %230, i64* %103, align 8
  store i64 %222, i64* %142, align 8
  store i64 %219, i64* %101, align 8
  %238 = icmp eq %"class.base::TimeTicks"* %237, null
  br i1 %238, label %241, label %239

239:                                              ; preds = %236
  %240 = bitcast %"class.base::TimeTicks"* %237 to i8*
  call void @_ZdlPv(i8* %240) #10
  br label %241

241:                                              ; preds = %184, %236, %239
  %242 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %145, i64 1
  %243 = icmp eq %"class.base::TimeDelta"* %242, %133
  br i1 %243, label %244, label %144

244:                                              ; preds = %241, %131, %89, %86, %25
  %245 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 3
  %246 = load double, double* %245, align 8
  %247 = fcmp une double %246, 0.000000e+00
  br i1 %247, label %248, label %252

248:                                              ; preds = %244
  %249 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 2
  %250 = load i8, i8* %249, align 8, !range !3
  %251 = icmp ne i8 %250, 0
  br label %252

252:                                              ; preds = %248, %244
  %253 = phi i1 [ false, %244 ], [ %251, %248 ]
  %254 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %6) #9
  ret i1 %253
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = add i64 %1, -9223372036854775807
  %7 = icmp ult i64 %6, 2
  br i1 %7, label %17, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp sgt i64 %1, -1
  %12 = select i1 %11, i64 -9223372036854775808, i64 9223372036854775807
  %13 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %10, i64 %1) #9
  %14 = extractvalue { i64, i1 } %13, 1
  %15 = extractvalue { i64, i1 } %13, 0
  %16 = select i1 %14, i64 %12, i64 %15, !prof !4
  ret i64 %16

17:                                               ; preds = %2
  %18 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #9
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = icmp eq i64 %21, %1
  br i1 %23, label %25, label %24

24:                                               ; preds = %17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* null, i8** %19, align 8
  br label %34

25:                                               ; preds = %17
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %1) #9
  %27 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %1) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* %26, i8* %27) #9
  %28 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* %29, i8** %19, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 387, %"class.logging::CheckOpResult"* nonnull %4) #9
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #9
  br label %34

34:                                               ; preds = %24, %25, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #9
  %35 = icmp slt i64 %1, 0
  %36 = select i1 %35, i64 9223372036854775807, i64 -9223372036854775808
  ret i64 %36
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media19WallClockTimeSource22SetTickClockForTestingEPKN4base9TickClockE(%"class.media::WallClockTimeSource"*, %"class.base::TickClock"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 6
  %4 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %3, i64 0, i32 0, i32 0
  %5 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %4) #9
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7, !prof !2

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %3, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %8) #9
  br label %9

9:                                                ; preds = %2, %7
  %10 = getelementptr inbounds %"class.media::WallClockTimeSource", %"class.media::WallClockTimeSource"* %0, i64 0, i32 1
  store %"class.base::TickClock"* %1, %"class.base::TickClock"** %10, align 8
  %11 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %4) #9
  ret void
}

declare void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #4

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #5

declare i8* @_ZN7logging15CheckOpValueStrEl(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #5

declare void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare i32 @pthread_mutex_trylock(%union.pthread_mutex_t*) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i8 0, i8 2}
!4 = !{!"branch_weights", i32 1, i32 2000}
