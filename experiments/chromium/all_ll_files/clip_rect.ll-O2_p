; ModuleID = '../../third_party/blink/renderer/core/paint/clip_rect.cc'
source_filename = "../../third_party/blink/renderer/core/paint/clip_rect.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::IntRect" = type { %"class.blink::IntPoint", %"class.blink::IntSize" }
%"class.blink::IntPoint" = type { i32, i32 }
%"class.blink::IntSize" = type { i32, i32 }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::ClipRect" = type <{ %"struct.blink::PhysicalRect", i8, [3 x i8] }>
%"struct.blink::PhysicalRect" = type { %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalSize" }
%"struct.blink::PhysicalOffset" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutUnit" = type { i32 }
%"struct.blink::PhysicalSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::FloatClipRect" = type <{ %"class.blink::FloatRect", i8, [3 x i8] }>
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::FloatSize" = type { float, float }
%"class.blink::HitTestLocation" = type <{ %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalRect", %"class.blink::FloatPoint", %"class.blink::FloatQuad", i32, i8, i8, [2 x i8] }>
%"class.blink::FloatQuad" = type { %"class.blink::FloatPoint", %"class.blink::FloatPoint", %"class.blink::FloatPoint", %"class.blink::FloatPoint" }
%"class.WTF::StringAppend" = type { %"class.WTF::StringAppend.1", i8* }
%"class.WTF::StringAppend.1" = type { %"class.WTF::String", i8* }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringTypeAdapter.2" = type <{ i8*, i32, [4 x i8] }>
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.WTF::StringTypeAdapter.3" = type { %"class.WTF::StringTypeAdapter.4" }
%"class.WTF::StringTypeAdapter.4" = type { %"class.WTF::StringView" }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>

$_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES3_EcvS1_Ev = comdat any

$_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES3_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES3_E7WriteToEPh = comdat any

$_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES3_E7WriteToEPDs = comdat any

$_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv = comdat any

$_ZZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect = comdat any

$_ZGVZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect = comdat any

@.str = private unnamed_addr constant [11 x i8] c" hasRadius\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c" noRadius\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c" isInfinite\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c" notInfinite\00", align 1
@_ZZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect = linkonce_odr hidden local_unnamed_addr global %"class.blink::IntRect" zeroinitializer, comdat, align 4
@_ZGVZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect = linkonce_odr hidden global i64 0, comdat, align 8
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.4 = private unnamed_addr constant [27 x i8] c"total >= adapter1.length()\00", align 1
@.str.5 = private unnamed_addr constant [70 x i8] c"../../third_party/blink/renderer/platform/wtf/text/string_operators.h\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c"total >= adapter2.length()\00", align 1

@_ZN5blink8ClipRectC1Ev = hidden unnamed_addr alias void (%"class.blink::ClipRect"*), void (%"class.blink::ClipRect"*)* @_ZN5blink8ClipRectC2Ev
@_ZN5blink8ClipRectC1ERKNS_13FloatClipRectE = hidden unnamed_addr alias void (%"class.blink::ClipRect"*, %"class.blink::FloatClipRect"*), void (%"class.blink::ClipRect"*, %"class.blink::FloatClipRect"*)* @_ZN5blink8ClipRectC2ERKNS_13FloatClipRectE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8ClipRectC2Ev(%"class.blink::ClipRect"* nocapture) unnamed_addr #0 align 2 {
  %2 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect to i8*) acquire, align 8
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %4, label %8, !prof !2

4:                                                ; preds = %1
  %5 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect) #8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %4
  store <4 x i32> <i32 -16777215, i32 -16777215, i32 33554431, i32 33554431>, <4 x i32>* bitcast (%"class.blink::IntRect"* @_ZZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect to <4 x i32>*), align 4
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect) #8
  br label %8

8:                                                ; preds = %1, %4, %7
  %9 = load i64, i64* bitcast (%"class.blink::IntRect"* @_ZZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect to i64*), align 4
  %10 = load i64, i64* bitcast (%"class.blink::IntSize"* getelementptr inbounds (%"class.blink::IntRect", %"class.blink::IntRect"* @_ZZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect, i64 0, i32 1) to i64*), align 4
  %11 = trunc i64 %9 to i32
  %12 = lshr i64 %9, 32
  %13 = trunc i64 %12 to i32
  %14 = icmp sgt i32 %11, 33554431
  br i1 %14, label %19, label %15

15:                                               ; preds = %8
  %16 = icmp slt i32 %11, -33554432
  %17 = shl i32 %11, 6
  %18 = select i1 %16, i32 -2147483648, i32 %17
  br label %19

19:                                               ; preds = %15, %8
  %20 = phi i32 [ 2147483647, %8 ], [ %18, %15 ]
  %21 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 %20, i32* %21, align 4
  %22 = icmp sgt i32 %13, 33554431
  br i1 %22, label %28, label %23

23:                                               ; preds = %19
  %24 = icmp slt i32 %13, -33554432
  br i1 %24, label %28, label %25

25:                                               ; preds = %23
  %26 = shl nuw nsw i64 %12, 6
  %27 = trunc i64 %26 to i32
  br label %28

28:                                               ; preds = %23, %19, %25
  %29 = phi i32 [ %27, %25 ], [ 2147483647, %19 ], [ -2147483648, %23 ]
  %30 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  store i32 %29, i32* %30, align 4
  %31 = trunc i64 %10 to i32
  %32 = lshr i64 %10, 32
  %33 = trunc i64 %32 to i32
  %34 = icmp sgt i32 %31, 33554431
  br i1 %34, label %39, label %35

35:                                               ; preds = %28
  %36 = icmp slt i32 %31, -33554432
  %37 = shl i32 %31, 6
  %38 = select i1 %36, i32 -2147483648, i32 %37
  br label %39

39:                                               ; preds = %35, %28
  %40 = phi i32 [ 2147483647, %28 ], [ %38, %35 ]
  %41 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  store i32 %40, i32* %41, align 4
  %42 = icmp sgt i32 %33, 33554431
  br i1 %42, label %48, label %43

43:                                               ; preds = %39
  %44 = icmp slt i32 %33, -33554432
  br i1 %44, label %48, label %45

45:                                               ; preds = %43
  %46 = shl nuw nsw i64 %32, 6
  %47 = trunc i64 %46 to i32
  br label %48

48:                                               ; preds = %43, %39, %45
  %49 = phi i32 [ %47, %45 ], [ 2147483647, %39 ], [ -2147483648, %43 ]
  %50 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 0, i32 1, i32 1, i32 0
  store i32 %49, i32* %50, align 4
  %51 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 1
  %52 = load i8, i8* %51, align 4
  %53 = and i8 %52, -4
  %54 = or i8 %53, 2
  store i8 %54, i8* %51, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8ClipRectC2ERKNS_13FloatClipRectE(%"class.blink::ClipRect"* nocapture, %"class.blink::FloatClipRect"* nocapture readonly dereferenceable(20)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::ClipRect"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %3, i8 0, i64 16, i1 false) #8
  %4 = getelementptr inbounds %"class.blink::FloatClipRect", %"class.blink::FloatClipRect"* %1, i64 0, i32 1
  %5 = load i8, i8* %4, align 4
  %6 = and i8 %5, 1
  %7 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 1
  %8 = load i8, i8* %7, align 4
  %9 = and i8 %8, -2
  %10 = or i8 %9, %6
  store i8 %10, i8* %7, align 4
  %11 = load i8, i8* %4, align 4
  %12 = lshr i8 %11, 1
  %13 = and i8 %12, 2
  %14 = and i8 %10, -3
  %15 = or i8 %13, %14
  store i8 %15, i8* %7, align 4
  %16 = getelementptr inbounds %"class.blink::FloatClipRect", %"class.blink::FloatClipRect"* %1, i64 0, i32 0, i32 0, i32 0
  %17 = load float, float* %16, align 4
  %18 = fmul float %17, 6.400000e+01
  %19 = fcmp ult float %18, 0xC1E0000000000000
  %20 = fcmp ugt float %18, 0x41DFFFFFE0000000
  %21 = fcmp ogt float %18, 0xC1E0000000000000
  %22 = select i1 %21, float %18, float 0xC1E0000000000000
  %23 = fptosi float %22 to i32
  %24 = select i1 %19, i32 0, i32 2147483647
  %25 = select i1 %20, i32 %24, i32 %23
  %26 = getelementptr inbounds %"class.blink::FloatClipRect", %"class.blink::FloatClipRect"* %1, i64 0, i32 0, i32 0, i32 1
  %27 = load float, float* %26, align 4
  %28 = fmul float %27, 6.400000e+01
  %29 = fcmp ult float %28, 0xC1E0000000000000
  %30 = fcmp ugt float %28, 0x41DFFFFFE0000000
  %31 = fcmp ogt float %28, 0xC1E0000000000000
  %32 = select i1 %31, float %28, float 0xC1E0000000000000
  %33 = fptosi float %32 to i32
  %34 = select i1 %29, i32 0, i32 2147483647
  %35 = select i1 %30, i32 %34, i32 %33
  %36 = getelementptr inbounds %"class.blink::FloatClipRect", %"class.blink::FloatClipRect"* %1, i64 0, i32 0, i32 1, i32 0
  %37 = load float, float* %36, align 4
  %38 = fmul float %37, 6.400000e+01
  %39 = fcmp ult float %38, 0xC1E0000000000000
  %40 = fcmp ugt float %38, 0x41DFFFFFE0000000
  %41 = fcmp ogt float %38, 0xC1E0000000000000
  %42 = select i1 %41, float %38, float 0xC1E0000000000000
  %43 = fptosi float %42 to i32
  %44 = select i1 %39, i32 0, i32 2147483647
  %45 = select i1 %40, i32 %44, i32 %43
  %46 = getelementptr inbounds %"class.blink::FloatClipRect", %"class.blink::FloatClipRect"* %1, i64 0, i32 0, i32 1, i32 1
  %47 = load float, float* %46, align 4
  %48 = fmul float %47, 6.400000e+01
  %49 = fcmp ult float %48, 0xC1E0000000000000
  %50 = fcmp ugt float %48, 0x41DFFFFFE0000000
  %51 = fcmp ogt float %48, 0xC1E0000000000000
  %52 = select i1 %51, float %48, float 0xC1E0000000000000
  %53 = fptosi float %52 to i32
  %54 = select i1 %49, i32 0, i32 2147483647
  %55 = select i1 %50, i32 %54, i32 %53
  %56 = zext i32 %35 to i64
  %57 = shl nuw i64 %56, 32
  %58 = zext i32 %25 to i64
  %59 = or i64 %57, %58
  %60 = zext i32 %55 to i64
  %61 = shl nuw i64 %60, 32
  %62 = zext i32 %45 to i64
  %63 = or i64 %61, %62
  %64 = bitcast %"class.blink::ClipRect"* %0 to i64*
  store i64 %59, i64* %64, align 4
  %65 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 0, i32 1
  %66 = bitcast %"struct.blink::PhysicalSize"* %65 to i64*
  store i64 %63, i64* %66, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink8ClipRect15SetRectInternalERKNS_13FloatClipRectE(%"class.blink::ClipRect"* nocapture, %"class.blink::FloatClipRect"* nocapture readonly dereferenceable(20)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::FloatClipRect", %"class.blink::FloatClipRect"* %1, i64 0, i32 1
  %4 = load i8, i8* %3, align 4
  %5 = and i8 %4, 1
  %6 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 1
  %7 = load i8, i8* %6, align 4
  %8 = and i8 %7, -2
  %9 = or i8 %8, %5
  store i8 %9, i8* %6, align 4
  %10 = load i8, i8* %3, align 4
  %11 = lshr i8 %10, 1
  %12 = and i8 %11, 2
  %13 = and i8 %9, -3
  %14 = or i8 %12, %13
  store i8 %14, i8* %6, align 4
  %15 = getelementptr inbounds %"class.blink::FloatClipRect", %"class.blink::FloatClipRect"* %1, i64 0, i32 0, i32 0, i32 0
  %16 = load float, float* %15, align 4
  %17 = fmul float %16, 6.400000e+01
  %18 = fcmp ult float %17, 0xC1E0000000000000
  %19 = fcmp ugt float %17, 0x41DFFFFFE0000000
  %20 = fcmp ogt float %17, 0xC1E0000000000000
  %21 = select i1 %20, float %17, float 0xC1E0000000000000
  %22 = fptosi float %21 to i32
  %23 = select i1 %18, i32 0, i32 2147483647
  %24 = select i1 %19, i32 %23, i32 %22
  %25 = getelementptr inbounds %"class.blink::FloatClipRect", %"class.blink::FloatClipRect"* %1, i64 0, i32 0, i32 0, i32 1
  %26 = load float, float* %25, align 4
  %27 = fmul float %26, 6.400000e+01
  %28 = fcmp ult float %27, 0xC1E0000000000000
  %29 = fcmp ugt float %27, 0x41DFFFFFE0000000
  %30 = fcmp ogt float %27, 0xC1E0000000000000
  %31 = select i1 %30, float %27, float 0xC1E0000000000000
  %32 = fptosi float %31 to i32
  %33 = select i1 %28, i32 0, i32 2147483647
  %34 = select i1 %29, i32 %33, i32 %32
  %35 = getelementptr inbounds %"class.blink::FloatClipRect", %"class.blink::FloatClipRect"* %1, i64 0, i32 0, i32 1, i32 0
  %36 = load float, float* %35, align 4
  %37 = fmul float %36, 6.400000e+01
  %38 = fcmp ult float %37, 0xC1E0000000000000
  %39 = fcmp ugt float %37, 0x41DFFFFFE0000000
  %40 = fcmp ogt float %37, 0xC1E0000000000000
  %41 = select i1 %40, float %37, float 0xC1E0000000000000
  %42 = fptosi float %41 to i32
  %43 = select i1 %38, i32 0, i32 2147483647
  %44 = select i1 %39, i32 %43, i32 %42
  %45 = getelementptr inbounds %"class.blink::FloatClipRect", %"class.blink::FloatClipRect"* %1, i64 0, i32 0, i32 1, i32 1
  %46 = load float, float* %45, align 4
  %47 = fmul float %46, 6.400000e+01
  %48 = fcmp ult float %47, 0xC1E0000000000000
  %49 = fcmp ugt float %47, 0x41DFFFFFE0000000
  %50 = fcmp ogt float %47, 0xC1E0000000000000
  %51 = select i1 %50, float %47, float 0xC1E0000000000000
  %52 = fptosi float %51 to i32
  %53 = select i1 %48, i32 0, i32 2147483647
  %54 = select i1 %49, i32 %53, i32 %52
  %55 = zext i32 %34 to i64
  %56 = shl nuw i64 %55, 32
  %57 = zext i32 %24 to i64
  %58 = or i64 %56, %57
  %59 = zext i32 %54 to i64
  %60 = shl nuw i64 %59, 32
  %61 = zext i32 %44 to i64
  %62 = or i64 %60, %61
  %63 = bitcast %"class.blink::ClipRect"* %0 to i64*
  store i64 %58, i64* %63, align 4
  %64 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 0, i32 1
  %65 = bitcast %"struct.blink::PhysicalSize"* %64 to i64*
  store i64 %62, i64* %65, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink8ClipRect7SetRectERKNS_13FloatClipRectE(%"class.blink::ClipRect"* nocapture, %"class.blink::FloatClipRect"* nocapture readonly dereferenceable(20)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::FloatClipRect", %"class.blink::FloatClipRect"* %1, i64 0, i32 1
  %4 = load i8, i8* %3, align 4
  %5 = and i8 %4, 4
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 1
  %8 = load i8, i8* %7, align 4
  %9 = and i8 %8, 2
  %10 = icmp eq i8 %9, 0
  %11 = or i1 %6, %10
  br i1 %11, label %12, label %73

12:                                               ; preds = %2
  %13 = and i8 %4, 1
  %14 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 1
  %15 = and i8 %8, -2
  %16 = or i8 %15, %13
  store i8 %16, i8* %14, align 4
  %17 = load i8, i8* %3, align 4
  %18 = lshr i8 %17, 1
  %19 = and i8 %18, 2
  %20 = and i8 %16, -3
  %21 = or i8 %19, %20
  store i8 %21, i8* %14, align 4
  %22 = getelementptr inbounds %"class.blink::FloatClipRect", %"class.blink::FloatClipRect"* %1, i64 0, i32 0, i32 0, i32 0
  %23 = load float, float* %22, align 4
  %24 = fmul float %23, 6.400000e+01
  %25 = fcmp ult float %24, 0xC1E0000000000000
  %26 = fcmp ugt float %24, 0x41DFFFFFE0000000
  %27 = fcmp ogt float %24, 0xC1E0000000000000
  %28 = select i1 %27, float %24, float 0xC1E0000000000000
  %29 = fptosi float %28 to i32
  %30 = select i1 %25, i32 0, i32 2147483647
  %31 = select i1 %26, i32 %30, i32 %29
  %32 = getelementptr inbounds %"class.blink::FloatClipRect", %"class.blink::FloatClipRect"* %1, i64 0, i32 0, i32 0, i32 1
  %33 = load float, float* %32, align 4
  %34 = fmul float %33, 6.400000e+01
  %35 = fcmp ult float %34, 0xC1E0000000000000
  %36 = fcmp ugt float %34, 0x41DFFFFFE0000000
  %37 = fcmp ogt float %34, 0xC1E0000000000000
  %38 = select i1 %37, float %34, float 0xC1E0000000000000
  %39 = fptosi float %38 to i32
  %40 = select i1 %35, i32 0, i32 2147483647
  %41 = select i1 %36, i32 %40, i32 %39
  %42 = getelementptr inbounds %"class.blink::FloatClipRect", %"class.blink::FloatClipRect"* %1, i64 0, i32 0, i32 1, i32 0
  %43 = load float, float* %42, align 4
  %44 = fmul float %43, 6.400000e+01
  %45 = fcmp ult float %44, 0xC1E0000000000000
  %46 = fcmp ugt float %44, 0x41DFFFFFE0000000
  %47 = fcmp ogt float %44, 0xC1E0000000000000
  %48 = select i1 %47, float %44, float 0xC1E0000000000000
  %49 = fptosi float %48 to i32
  %50 = select i1 %45, i32 0, i32 2147483647
  %51 = select i1 %46, i32 %50, i32 %49
  %52 = getelementptr inbounds %"class.blink::FloatClipRect", %"class.blink::FloatClipRect"* %1, i64 0, i32 0, i32 1, i32 1
  %53 = load float, float* %52, align 4
  %54 = fmul float %53, 6.400000e+01
  %55 = fcmp ult float %54, 0xC1E0000000000000
  %56 = fcmp ugt float %54, 0x41DFFFFFE0000000
  %57 = fcmp ogt float %54, 0xC1E0000000000000
  %58 = select i1 %57, float %54, float 0xC1E0000000000000
  %59 = fptosi float %58 to i32
  %60 = select i1 %55, i32 0, i32 2147483647
  %61 = select i1 %56, i32 %60, i32 %59
  %62 = zext i32 %41 to i64
  %63 = shl nuw i64 %62, 32
  %64 = zext i32 %31 to i64
  %65 = or i64 %63, %64
  %66 = zext i32 %61 to i64
  %67 = shl nuw i64 %66, 32
  %68 = zext i32 %51 to i64
  %69 = or i64 %67, %68
  %70 = bitcast %"class.blink::ClipRect"* %0 to i64*
  store i64 %65, i64* %70, align 4
  %71 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 0, i32 1
  %72 = bitcast %"struct.blink::PhysicalSize"* %71 to i64*
  store i64 %69, i64* %72, align 4
  br label %73

73:                                               ; preds = %2, %12
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8ClipRect7SetRectERKNS_12PhysicalRectE(%"class.blink::ClipRect"* nocapture, %"struct.blink::PhysicalRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::ClipRect"* %0 to i8*
  %4 = bitcast %"struct.blink::PhysicalRect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %4, i64 16, i1 false)
  %5 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 1
  %6 = load i8, i8* %5, align 4
  %7 = and i8 %6, -4
  store i8 %7, i8* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8ClipRect9IntersectERKNS_12PhysicalRectE(%"class.blink::ClipRect"*, %"struct.blink::PhysicalRect"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 1
  %4 = load i8, i8* %3, align 4
  %5 = and i8 %4, 2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %11, label %7

7:                                                ; preds = %2
  %8 = bitcast %"class.blink::ClipRect"* %0 to i8*
  %9 = bitcast %"struct.blink::PhysicalRect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %8, i8* align 4 %9, i64 16, i1 false)
  %10 = and i8 %4, -3
  store i8 %10, i8* %3, align 4
  br label %13

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 0
  tail call void @_ZN5blink12PhysicalRect9IntersectERKS0_(%"struct.blink::PhysicalRect"* %12, %"struct.blink::PhysicalRect"* dereferenceable(16) %1) #8
  br label %13

13:                                               ; preds = %11, %7
  ret void
}

declare void @_ZN5blink12PhysicalRect9IntersectERKS0_(%"struct.blink::PhysicalRect"*, %"struct.blink::PhysicalRect"* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8ClipRect9IntersectERKS0_(%"class.blink::ClipRect"*, %"class.blink::ClipRect"* dereferenceable(20)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %1, i64 0, i32 1
  %4 = load i8, i8* %3, align 4
  %5 = and i8 %4, 2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %26

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 1
  %9 = load i8, i8* %8, align 4
  %10 = and i8 %9, 2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %16, label %12

12:                                               ; preds = %7
  %13 = bitcast %"class.blink::ClipRect"* %0 to i8*
  %14 = bitcast %"class.blink::ClipRect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %13, i8* align 4 %14, i64 16, i1 false) #8
  %15 = and i8 %9, -3
  store i8 %15, i8* %8, align 4
  br label %19

16:                                               ; preds = %7
  %17 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %1, i64 0, i32 0
  %18 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 0
  tail call void @_ZN5blink12PhysicalRect9IntersectERKS0_(%"struct.blink::PhysicalRect"* %18, %"struct.blink::PhysicalRect"* dereferenceable(16) %17) #8
  br label %19

19:                                               ; preds = %12, %16
  %20 = load i8, i8* %3, align 4
  %21 = and i8 %20, 1
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %19
  %24 = load i8, i8* %8, align 4
  %25 = or i8 %24, 1
  store i8 %25, i8* %8, align 4
  br label %26

26:                                               ; preds = %19, %2, %23
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink8ClipRect10IntersectsERKNS_15HitTestLocationE(%"class.blink::ClipRect"*, %"class.blink::HitTestLocation"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 1
  %4 = load i8, i8* %3, align 4
  %5 = and i8 %4, 2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 0
  %9 = tail call zeroext i1 @_ZNK5blink15HitTestLocation10IntersectsERKNS_12PhysicalRectE(%"class.blink::HitTestLocation"* %1, %"struct.blink::PhysicalRect"* dereferenceable(16) %8) #8
  br label %10

10:                                               ; preds = %2, %7
  %11 = phi i1 [ %9, %7 ], [ true, %2 ]
  ret i1 %11
}

declare zeroext i1 @_ZNK5blink15HitTestLocation10IntersectsERKNS_12PhysicalRectE(%"class.blink::HitTestLocation"*, %"struct.blink::PhysicalRect"* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8ClipRect5ResetEv(%"class.blink::ClipRect"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 1
  %3 = load i8, i8* %2, align 4
  %4 = and i8 %3, 2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %57

6:                                                ; preds = %1
  %7 = or i8 %3, 3
  store i8 %7, i8* %2, align 4
  %8 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect to i8*) acquire, align 8
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %14, !prof !2

10:                                               ; preds = %6
  %11 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect) #8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %10
  store <4 x i32> <i32 -16777215, i32 -16777215, i32 33554431, i32 33554431>, <4 x i32>* bitcast (%"class.blink::IntRect"* @_ZZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect to <4 x i32>*), align 4
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect) #8
  br label %14

14:                                               ; preds = %6, %10, %13
  %15 = load i64, i64* bitcast (%"class.blink::IntRect"* @_ZZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect to i64*), align 4
  %16 = load i64, i64* bitcast (%"class.blink::IntSize"* getelementptr inbounds (%"class.blink::IntRect", %"class.blink::IntRect"* @_ZZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect, i64 0, i32 1) to i64*), align 4
  %17 = trunc i64 %15 to i32
  %18 = lshr i64 %15, 32
  %19 = trunc i64 %18 to i32
  %20 = icmp sgt i32 %17, 33554431
  br i1 %20, label %25, label %21

21:                                               ; preds = %14
  %22 = icmp slt i32 %17, -33554432
  %23 = shl i32 %17, 6
  %24 = select i1 %22, i32 -2147483648, i32 %23
  br label %25

25:                                               ; preds = %21, %14
  %26 = phi i32 [ 2147483647, %14 ], [ %24, %21 ]
  %27 = icmp sgt i32 %19, 33554431
  br i1 %27, label %33, label %28

28:                                               ; preds = %25
  %29 = icmp slt i32 %19, -33554432
  br i1 %29, label %33, label %30

30:                                               ; preds = %28
  %31 = shl nuw nsw i64 %18, 6
  %32 = trunc i64 %31 to i32
  br label %33

33:                                               ; preds = %28, %25, %30
  %34 = phi i32 [ %32, %30 ], [ 2147483647, %25 ], [ -2147483648, %28 ]
  %35 = trunc i64 %16 to i32
  %36 = lshr i64 %16, 32
  %37 = trunc i64 %36 to i32
  %38 = icmp sgt i32 %35, 33554431
  br i1 %38, label %43, label %39

39:                                               ; preds = %33
  %40 = icmp slt i32 %35, -33554432
  %41 = shl i32 %35, 6
  %42 = select i1 %40, i32 -2147483648, i32 %41
  br label %43

43:                                               ; preds = %39, %33
  %44 = phi i32 [ 2147483647, %33 ], [ %42, %39 ]
  %45 = icmp sgt i32 %37, 33554431
  br i1 %45, label %51, label %46

46:                                               ; preds = %43
  %47 = icmp slt i32 %37, -33554432
  br i1 %47, label %51, label %48

48:                                               ; preds = %46
  %49 = shl nuw nsw i64 %36, 6
  %50 = trunc i64 %49 to i32
  br label %51

51:                                               ; preds = %46, %43, %48
  %52 = phi i32 [ %50, %48 ], [ 2147483647, %43 ], [ -2147483648, %46 ]
  %53 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 %26, i32* %53, align 4
  %54 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  store i32 %34, i32* %54, align 4
  %55 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  store i32 %44, i32* %55, align 4
  %56 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 0, i32 1, i32 1, i32 0
  store i32 %52, i32* %56, align 4
  br label %57

57:                                               ; preds = %1, %51
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink8ClipRect8ToStringEv(%"class.blink::ClipRect"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::StringAppend", align 8
  %3 = bitcast %"class.WTF::StringAppend"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3) #8
  %4 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 0
  %5 = tail call %"class.WTF::StringImpl"* @_ZNK5blink12PhysicalRect8ToStringEv(%"struct.blink::PhysicalRect"* %4) #8
  %6 = getelementptr inbounds %"class.blink::ClipRect", %"class.blink::ClipRect"* %0, i64 0, i32 1
  %7 = load i8, i8* %6, align 4
  %8 = and i8 %7, 1
  %9 = icmp eq i8 %8, 0
  %10 = select i1 %9, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0)
  %11 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %11, label %92, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  br i1 %16, label %19, label %29

19:                                               ; preds = %12
  %20 = zext i32 %18 to i33
  %21 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %20, i33 1) #8
  %22 = extractvalue { i33, i1 } %21, 1
  %23 = extractvalue { i33, i1 } %21, 0
  %24 = icmp slt i33 %23, 0
  %25 = or i1 %22, %24
  br i1 %25, label %26, label %27, !prof !3

26:                                               ; preds = %19
  tail call void @llvm.trap() #8
  unreachable

27:                                               ; preds = %19
  %28 = trunc i33 %23 to i32
  store i32 %28, i32* %17, align 4
  br label %29

29:                                               ; preds = %12, %27
  %30 = phi i32 [ %28, %27 ], [ %18, %12 ]
  %31 = load atomic i32, i32* %13 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  br i1 %33, label %35, label %45

35:                                               ; preds = %29
  %36 = zext i32 %30 to i33
  %37 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %36, i33 1) #8
  %38 = extractvalue { i33, i1 } %37, 1
  %39 = extractvalue { i33, i1 } %37, 0
  %40 = icmp slt i33 %39, 0
  %41 = or i1 %38, %40
  br i1 %41, label %42, label %43, !prof !3

42:                                               ; preds = %35
  tail call void @llvm.trap() #8
  unreachable

43:                                               ; preds = %35
  %44 = trunc i33 %39 to i32
  store i32 %44, i32* %34, align 4
  br label %45

45:                                               ; preds = %43, %29
  %46 = phi i32 [ %44, %43 ], [ %30, %29 ]
  %47 = load atomic i32, i32* %13 monotonic, align 4
  %48 = and i32 %47, 2
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %45
  %51 = add i32 %46, -1
  store i32 %51, i32* %34, align 4
  br label %52

52:                                               ; preds = %50, %45
  %53 = phi i32 [ %51, %50 ], [ %46, %45 ]
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %56

55:                                               ; preds = %52
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %5) #8
  br label %56

56:                                               ; preds = %52, %55
  %57 = load i8, i8* %6, align 4
  %58 = and i8 %57, 2
  %59 = icmp eq i8 %58, 0
  %60 = select i1 %59, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0)
  %61 = load atomic i32, i32* %13 monotonic, align 4
  %62 = and i32 %61, 2
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %75

64:                                               ; preds = %56
  %65 = load i32, i32* %34, align 4
  %66 = zext i32 %65 to i33
  %67 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %66, i33 1) #8
  %68 = extractvalue { i33, i1 } %67, 1
  %69 = extractvalue { i33, i1 } %67, 0
  %70 = icmp slt i33 %69, 0
  %71 = or i1 %68, %70
  br i1 %71, label %72, label %73, !prof !3

72:                                               ; preds = %64
  tail call void @llvm.trap() #8
  unreachable

73:                                               ; preds = %64
  %74 = trunc i33 %69 to i32
  store i32 %74, i32* %34, align 4
  br label %75

75:                                               ; preds = %56, %73
  %76 = ptrtoint i8* %10 to i64
  %77 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"** %77, align 8
  %78 = load atomic i32, i32* %13 monotonic, align 4
  %79 = and i32 %78, 2
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %101

81:                                               ; preds = %75
  %82 = load i32, i32* %34, align 4
  %83 = zext i32 %82 to i33
  %84 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %83, i33 1) #8
  %85 = extractvalue { i33, i1 } %84, 1
  %86 = extractvalue { i33, i1 } %84, 0
  %87 = icmp slt i33 %86, 0
  %88 = or i1 %85, %87
  br i1 %88, label %89, label %90, !prof !3

89:                                               ; preds = %81
  tail call void @llvm.trap() #8
  unreachable

90:                                               ; preds = %81
  %91 = trunc i33 %86 to i32
  store i32 %91, i32* %34, align 4
  br label %101

92:                                               ; preds = %1
  %93 = and i8 %7, 2
  %94 = icmp eq i8 %93, 0
  %95 = select i1 %94, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0)
  %96 = ptrtoint i8* %10 to i64
  %97 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %97, align 8
  %98 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %2, i64 0, i32 0, i32 1
  %99 = bitcast i8** %98 to i64*
  store i64 %96, i64* %99, align 8
  %100 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %2, i64 0, i32 1
  store i8* %95, i8** %100, align 8
  br label %115

101:                                              ; preds = %90, %75
  %102 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %2, i64 0, i32 0, i32 1
  %103 = bitcast i8** %102 to i64*
  store i64 %76, i64* %103, align 8
  %104 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %2, i64 0, i32 1
  store i8* %60, i8** %104, align 8
  %105 = load atomic i32, i32* %13 monotonic, align 4
  %106 = and i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = load i32, i32* %34, align 4
  br i1 %107, label %109, label %111

109:                                              ; preds = %101
  %110 = add i32 %108, -1
  store i32 %110, i32* %34, align 4
  br label %111

111:                                              ; preds = %109, %101
  %112 = phi i32 [ %110, %109 ], [ %108, %101 ]
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %115

114:                                              ; preds = %111
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %5) #8
  br label %115

115:                                              ; preds = %92, %111, %114
  %116 = phi %"class.WTF::StringImpl"** [ %97, %92 ], [ %77, %111 ], [ %77, %114 ]
  %117 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES3_EcvS1_Ev(%"class.WTF::StringAppend"* nonnull %2)
  %118 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %116, align 8
  %119 = icmp eq %"class.WTF::StringImpl"* %118, null
  br i1 %119, label %133, label %120

120:                                              ; preds = %115
  %121 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %118, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %122 = load atomic i32, i32* %121 monotonic, align 4
  %123 = and i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %118, i64 0, i32 0
  %126 = load i32, i32* %125, align 4
  br i1 %124, label %127, label %129

127:                                              ; preds = %120
  %128 = add i32 %126, -1
  store i32 %128, i32* %125, align 4
  br label %129

129:                                              ; preds = %127, %120
  %130 = phi i32 [ %128, %127 ], [ %126, %120 ]
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %132, label %133

132:                                              ; preds = %129
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %118) #8
  br label %133

133:                                              ; preds = %115, %129, %132
  br i1 %11, label %159, label %134

134:                                              ; preds = %133
  %135 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %136 = load atomic i32, i32* %135 monotonic, align 4
  %137 = and i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %140 = load i32, i32* %139, align 4
  br i1 %138, label %141, label %143

141:                                              ; preds = %134
  %142 = add i32 %140, -1
  store i32 %142, i32* %139, align 4
  br label %143

143:                                              ; preds = %141, %134
  %144 = phi i32 [ %142, %141 ], [ %140, %134 ]
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %148

146:                                              ; preds = %143
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %5) #8
  %147 = load i32, i32* %139, align 4
  br label %148

148:                                              ; preds = %143, %146
  %149 = phi i32 [ %144, %143 ], [ %147, %146 ]
  %150 = load atomic i32, i32* %135 monotonic, align 4
  %151 = and i32 %150, 2
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %155

153:                                              ; preds = %148
  %154 = add i32 %149, -1
  store i32 %154, i32* %139, align 4
  br label %155

155:                                              ; preds = %153, %148
  %156 = phi i32 [ %154, %153 ], [ %149, %148 ]
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %158, label %159

158:                                              ; preds = %155
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %5) #8
  br label %159

159:                                              ; preds = %133, %155, %158
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3) #8
  ret %"class.WTF::StringImpl"* %117
}

declare %"class.WTF::StringImpl"* @_ZNK5blink12PhysicalRect8ToStringEv(%"struct.blink::PhysicalRect"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES3_EcvS1_Ev(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.WTF::StringTypeAdapter.2", align 8
  %3 = alloca %"class.WTF::StringTypeAdapter.2", align 8
  %4 = alloca i8*, align 8
  %5 = alloca i16*, align 8
  %6 = bitcast %"class.WTF::StringTypeAdapter.2"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #8
  %7 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false) #8
  %8 = load i8*, i8** %7, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.2"* nonnull %3, i8* %8) #8
  %9 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %13 = select i1 %11, %"class.WTF::StringImpl"* %12, %"class.WTF::StringImpl"* %10
  %14 = bitcast %"class.WTF::StringTypeAdapter.2"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #8
  %15 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 16, i1 false) #8
  %16 = load i8*, i8** %15, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.2"* nonnull %2, i8* %16) #8
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #8
  br i1 %20, label %57, label %21

21:                                               ; preds = %1
  %22 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #8
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  %23 = call i32 @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES3_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %24 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %23, i8** nonnull dereferenceable(8) %4) #8
  %25 = load i8*, i8** %4, align 8
  call void @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES3_E7WriteToEPh(%"class.WTF::StringAppend"* %0, i8* %25)
  %26 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %26, label %93, label %27

27:                                               ; preds = %21
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = and i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %33 = load i32, i32* %32, align 4
  br i1 %31, label %34, label %44

34:                                               ; preds = %27
  %35 = zext i32 %33 to i33
  %36 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %35, i33 1) #8
  %37 = extractvalue { i33, i1 } %36, 1
  %38 = extractvalue { i33, i1 } %36, 0
  %39 = icmp slt i33 %38, 0
  %40 = or i1 %37, %39
  br i1 %40, label %41, label %42, !prof !3

41:                                               ; preds = %34
  call void @llvm.trap() #8
  unreachable

42:                                               ; preds = %34
  %43 = trunc i33 %38 to i32
  store i32 %43, i32* %32, align 4
  br label %44

44:                                               ; preds = %27, %42
  %45 = phi i32 [ %43, %42 ], [ %33, %27 ]
  %46 = ptrtoint %"class.WTF::StringImpl"* %24 to i64
  %47 = load atomic i32, i32* %28 monotonic, align 4
  %48 = and i32 %47, 2
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %44
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %52 = add i32 %45, -1
  store i32 %52, i32* %51, align 4
  br label %53

53:                                               ; preds = %50, %44
  %54 = phi i32 [ %52, %50 ], [ %45, %44 ]
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %93

56:                                               ; preds = %53
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %24) #8
  br label %93

57:                                               ; preds = %1
  %58 = bitcast i16** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %58) #8
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %5, align 8
  %59 = call i32 @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES3_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %60 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %59, i16** nonnull dereferenceable(8) %5) #8
  %61 = load i16*, i16** %5, align 8
  call void @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES3_E7WriteToEPDs(%"class.WTF::StringAppend"* %0, i16* %61)
  %62 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %62, label %93, label %63

63:                                               ; preds = %57
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = and i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %69 = load i32, i32* %68, align 4
  br i1 %67, label %70, label %80

70:                                               ; preds = %63
  %71 = zext i32 %69 to i33
  %72 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %71, i33 1) #8
  %73 = extractvalue { i33, i1 } %72, 1
  %74 = extractvalue { i33, i1 } %72, 0
  %75 = icmp slt i33 %74, 0
  %76 = or i1 %73, %75
  br i1 %76, label %77, label %78, !prof !3

77:                                               ; preds = %70
  call void @llvm.trap() #8
  unreachable

78:                                               ; preds = %70
  %79 = trunc i33 %74 to i32
  store i32 %79, i32* %68, align 4
  br label %80

80:                                               ; preds = %63, %78
  %81 = phi i32 [ %79, %78 ], [ %69, %63 ]
  %82 = ptrtoint %"class.WTF::StringImpl"* %60 to i64
  %83 = load atomic i32, i32* %64 monotonic, align 4
  %84 = and i32 %83, 2
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %89

86:                                               ; preds = %80
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %88 = add i32 %81, -1
  store i32 %88, i32* %87, align 4
  br label %89

89:                                               ; preds = %86, %80
  %90 = phi i32 [ %88, %86 ], [ %81, %80 ]
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %93

92:                                               ; preds = %89
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %60) #8
  br label %93

93:                                               ; preds = %92, %89, %57, %56, %53, %21
  %94 = phi i8* [ %22, %21 ], [ %22, %53 ], [ %22, %56 ], [ %58, %57 ], [ %58, %89 ], [ %58, %92 ]
  %95 = phi i64 [ 0, %21 ], [ %46, %53 ], [ %46, %56 ], [ 0, %57 ], [ %82, %89 ], [ %82, %92 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #8
  %96 = inttoptr i64 %95 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %96
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN5blinklsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_8ClipRectE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.blink::ClipRect"* dereferenceable(20)) local_unnamed_addr #0 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #8
  %5 = tail call %"class.WTF::StringImpl"* @_ZNK5blink8ClipRect8ToStringEv(%"class.blink::ClipRect"* %1)
  %6 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"** %6, align 8
  %7 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, %"class.WTF::String"* nonnull dereferenceable(8) %3) #8
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %23, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  br i1 %14, label %17, label %19

17:                                               ; preds = %10
  %18 = add i32 %16, -1
  store i32 %18, i32* %15, align 4
  br label %19

19:                                               ; preds = %17, %10
  %20 = phi i32 [ %18, %17 ], [ %16, %10 ]
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #8
  br label %23

23:                                               ; preds = %2, %19, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #8
  ret %"class.std::__1::basic_ostream"* %7
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #5

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #6

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32, i8** dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES3_E6lengthEv(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.2", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %10 = bitcast %"class.WTF::StringTypeAdapter.2"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #8
  %11 = getelementptr inbounds %"class.WTF::StringTypeAdapter.2", %"class.WTF::StringTypeAdapter.2"* %4, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %13 = bitcast %"class.WTF::StringTypeAdapter.2"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false)
  %14 = load i8*, i8** %12, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.2"* nonnull %4, i8* %14) #8
  %15 = call i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.1"* %9) #8
  %16 = load i32, i32* %11, align 8
  %17 = add i32 %16, %15
  %18 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #8
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = call i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.1"* %9) #8
  %21 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  %22 = icmp ult i32 %17, %20
  br i1 %22, label %24, label %23

23:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* null, i8** %19, align 8
  br label %33

24:                                               ; preds = %1
  %25 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #8
  %26 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %20) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.4, i64 0, i64 0), i8* %25, i8* %26) #8
  %27 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* %28, i8** %19, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.5, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #8
  %32 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #8
  br label %33

33:                                               ; preds = %23, %24, %30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #8
  %34 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #8
  %35 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %35, align 8
  %36 = load i32, i32* %11, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %17, %36
  br i1 %38, label %40, label %39

39:                                               ; preds = %33
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %35, align 8
  br label %49

40:                                               ; preds = %33
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #8
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %36) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0), i8* %41, i8* %42) #8
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %35, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.5, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #8
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #8
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #8
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES3_E7WriteToEPh(%"class.WTF::StringAppend"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.3", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.2", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.2", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.2"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #8
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %9 = bitcast %"class.WTF::StringTypeAdapter.2"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  %10 = load i8*, i8** %8, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.2"* nonnull %5, i8* %10) #8
  %11 = bitcast %"class.WTF::StringTypeAdapter.3"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #8
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.3", %"class.WTF::StringTypeAdapter.3"* %3, i64 0, i32 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringTypeAdapter.3", %"class.WTF::StringTypeAdapter.3"* %3, i64 0, i32 0, i32 0, i32 2
  %14 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false) #8
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %17, label %19

17:                                               ; preds = %2
  %18 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %25

19:                                               ; preds = %2
  %20 = ptrtoint %"class.WTF::StringImpl"* %15 to i64
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 1
  %24 = bitcast %"class.WTF::StringImpl"* %23 to i8*
  br label %25

25:                                               ; preds = %17, %19
  %26 = phi i8* [ null, %17 ], [ %24, %19 ]
  %27 = phi i64 [ %18, %17 ], [ %20, %19 ]
  %28 = phi i32 [ 0, %17 ], [ %22, %19 ]
  %29 = bitcast %"class.WTF::StringTypeAdapter.3"* %3 to i64*
  store i64 %27, i64* %29, align 8
  store i8* %26, i8** %12, align 8
  store i32 %28, i32* %13, align 8
  %30 = bitcast %"class.WTF::StringTypeAdapter.2"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %30) #8
  %31 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 -86, i64 16, i1 false) #8
  %32 = load i8*, i8** %31, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.2"* nonnull %4, i8* %32) #8
  %33 = getelementptr inbounds %"class.WTF::StringTypeAdapter.3", %"class.WTF::StringTypeAdapter.3"* %3, i64 0, i32 0
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.4"* nonnull %33, i8* %1) #8
  %34 = load i32, i32* %13, align 8
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %1, i64 %35
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.2"* nonnull %4, i8* %36) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %30) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #8
  %37 = call i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.1"* %6) #8
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds i8, i8* %1, i64 %38
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.2"* nonnull %5, i8* %39) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #8
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32, i16** dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES3_E7WriteToEPDs(%"class.WTF::StringAppend"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.3", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.2", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.2", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.2"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #8
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %9 = bitcast %"class.WTF::StringTypeAdapter.2"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  %10 = load i8*, i8** %8, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.2"* nonnull %5, i8* %10) #8
  %11 = bitcast %"class.WTF::StringTypeAdapter.3"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #8
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.3", %"class.WTF::StringTypeAdapter.3"* %3, i64 0, i32 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringTypeAdapter.3", %"class.WTF::StringTypeAdapter.3"* %3, i64 0, i32 0, i32 0, i32 2
  %14 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false) #8
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %17, label %19

17:                                               ; preds = %2
  %18 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %25

19:                                               ; preds = %2
  %20 = ptrtoint %"class.WTF::StringImpl"* %15 to i64
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 1
  %24 = bitcast %"class.WTF::StringImpl"* %23 to i8*
  br label %25

25:                                               ; preds = %17, %19
  %26 = phi i8* [ null, %17 ], [ %24, %19 ]
  %27 = phi i64 [ %18, %17 ], [ %20, %19 ]
  %28 = phi i32 [ 0, %17 ], [ %22, %19 ]
  %29 = bitcast %"class.WTF::StringTypeAdapter.3"* %3 to i64*
  store i64 %27, i64* %29, align 8
  store i8* %26, i8** %12, align 8
  store i32 %28, i32* %13, align 8
  %30 = bitcast %"class.WTF::StringTypeAdapter.2"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %30) #8
  %31 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 -86, i64 16, i1 false) #8
  %32 = load i8*, i8** %31, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.2"* nonnull %4, i8* %32) #8
  %33 = getelementptr inbounds %"class.WTF::StringTypeAdapter.3", %"class.WTF::StringTypeAdapter.3"* %3, i64 0, i32 0
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.4"* nonnull %33, i16* %1) #8
  %34 = load i32, i32* %13, align 8
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i16, i16* %1, i64 %35
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.2"* nonnull %4, i16* %36) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %30) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #8
  %37 = call i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.1"* %6) #8
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds i16, i16* %1, i64 %38
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.2"* nonnull %5, i16* %39) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #8
  ret void
}

declare void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.2"*, i8*) unnamed_addr #3

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.1"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.2", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %0, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  br label %15

15:                                               ; preds = %1, %12
  %16 = phi i32 [ %14, %12 ], [ 0, %1 ]
  %17 = bitcast %"class.WTF::StringTypeAdapter.2"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #8
  %18 = getelementptr inbounds %"class.WTF::StringTypeAdapter.2", %"class.WTF::StringTypeAdapter.2"* %4, i64 0, i32 1
  %19 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %0, i64 0, i32 1
  %20 = bitcast %"class.WTF::StringTypeAdapter.2"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 16, i1 false)
  %21 = load i8*, i8** %19, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.2"* nonnull %4, i8* %21) #8
  %22 = load i32, i32* %18, align 8
  %23 = add i32 %22, %16
  %24 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #8
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %25, align 8
  %26 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26)
  %27 = icmp ult i32 %23, %16
  br i1 %27, label %29, label %28

28:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* null, i8** %25, align 8
  br label %38

29:                                               ; preds = %15
  %30 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #8
  %31 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %16) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.4, i64 0, i64 0), i8* %30, i8* %31) #8
  %32 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* %33, i8** %25, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %29
  %36 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.5, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #8
  %37 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #8
  br label %38

38:                                               ; preds = %28, %29, %35
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #8
  %39 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #8
  %40 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %40, align 8
  %41 = load i32, i32* %18, align 8
  %42 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42)
  %43 = icmp ult i32 %23, %41
  br i1 %43, label %45, label %44

44:                                               ; preds = %38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42)
  store i8* null, i8** %40, align 8
  br label %54

45:                                               ; preds = %38
  %46 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #8
  %47 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %41) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0), i8* %46, i8* %47) #8
  %48 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42)
  store i8* %49, i8** %40, align 8
  %50 = icmp eq i8* %49, null
  br i1 %50, label %54, label %51

51:                                               ; preds = %45
  %52 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.5, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #8
  %53 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #8
  br label %54

54:                                               ; preds = %44, %45, %51
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #8
  ret i32 %23
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.2"*, i8*) local_unnamed_addr #3

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.4"*, i8*) local_unnamed_addr #3

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.2"*, i16*) local_unnamed_addr #3

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.4"*, i16*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nofree nounwind }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = !{!"branch_weights", i32 1, i32 2000}
