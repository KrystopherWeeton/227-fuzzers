; ModuleID = '../../third_party/boringssl/src/crypto/x509v3/v3_akey.c'
source_filename = "../../third_party/boringssl/src/crypto/x509v3/v3_akey.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ASN1_ITEM_st = type { i8, i64, %struct.ASN1_TEMPLATE_st*, i64, i8*, i64, i8* }
%struct.ASN1_TEMPLATE_st = type { i64, i64, i64, i8*, %struct.ASN1_ITEM_st* }
%struct.v3_ext_method = type { i32, i32, %struct.ASN1_ITEM_st*, i8* ()*, void (i8*)*, i8* (i8*, i8**, i64)*, i32 (i8*, i8**)*, {}*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)*, i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, i8* }
%struct.stack_st_CONF_VALUE = type opaque
%struct.v3_ext_ctx = type { i32, %struct.x509_st*, %struct.x509_st*, %struct.X509_req_st*, %struct.X509_crl_st*, %struct.X509V3_CONF_METHOD_st*, i8* }
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon }
%union.anon = type { i8* }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type { %struct.asn1_string_st*, %struct.stack_st_GENERAL_NAME*, %struct.asn1_string_st* }
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type { %struct.stack_st_GENERAL_SUBTREE*, %struct.stack_st_GENERAL_SUBTREE* }
%struct.stack_st_GENERAL_SUBTREE = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.X509_req_st = type opaque
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.stack_st_X509_REVOKED = type opaque
%struct.ISSUING_DIST_POINT_st = type { %struct.DIST_POINT_NAME_st*, i32, i32, %struct.asn1_string_st*, i32, i32 }
%struct.DIST_POINT_NAME_st = type { i32, %union.anon.0, %struct.X509_name_st* }
%union.anon.0 = type { %struct.stack_st_GENERAL_NAME* }
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_crl_method_st = type opaque
%struct.X509V3_CONF_METHOD_st = type { i8* (i8*, i8*, i8*)*, %struct.stack_st_CONF_VALUE* (i8*, i8*)*, void (i8*, i8*)*, void (i8*, %struct.stack_st_CONF_VALUE*)* }
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }
%struct.X509_extension_st = type { %struct.asn1_object_st*, i32, %struct.asn1_string_st* }
%struct.GENERAL_NAME_st = type { i32, %union.anon.1 }
%union.anon.1 = type { i8* }

@AUTHORITY_KEYID_it = external constant %struct.ASN1_ITEM_st, align 8
@v3_akey_id = hidden local_unnamed_addr constant { i32, i32, %struct.ASN1_ITEM_st*, i8* ()*, void (i8*)*, i8* (i8*, i8**, i64)*, i32 (i8*, i8**)*, i8* (%struct.v3_ext_method*, i8*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)*, i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, i8* } { i32 90, i32 4, %struct.ASN1_ITEM_st* @AUTHORITY_KEYID_it, i8* ()* null, void (i8*)* null, i8* (i8*, i8**, i64)* null, i32 (i8*, i8**)* null, i8* (%struct.v3_ext_method*, i8*)* null, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)* null, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)* bitcast (%struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, %struct.AUTHORITY_KEYID_st*, %struct.stack_st_CONF_VALUE*)* @i2v_AUTHORITY_KEYID to %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)*), i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)* bitcast (%struct.AUTHORITY_KEYID_st* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)* @v2i_AUTHORITY_KEYID to i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)*), i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)* null, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)* null, i8* null }, align 8
@.str = private unnamed_addr constant [6 x i8] c"keyid\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"serial\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"always\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"issuer\00", align 1
@.str.4 = private unnamed_addr constant [56 x i8] c"../../third_party/boringssl/src/crypto/x509v3/v3_akey.c\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"name=\00", align 1

; Function Attrs: nounwind ssp uwtable
define internal %struct.stack_st_CONF_VALUE* @i2v_AUTHORITY_KEYID(%struct.v3_ext_method* nocapture readnone, %struct.AUTHORITY_KEYID_st* nocapture readonly, %struct.stack_st_CONF_VALUE*) #0 {
  %4 = alloca %struct.stack_st_CONF_VALUE*, align 8
  store %struct.stack_st_CONF_VALUE* %2, %struct.stack_st_CONF_VALUE** %4, align 8
  %5 = getelementptr inbounds %struct.AUTHORITY_KEYID_st, %struct.AUTHORITY_KEYID_st* %1, i64 0, i32 0
  %6 = load %struct.asn1_string_st*, %struct.asn1_string_st** %5, align 8
  %7 = icmp eq %struct.asn1_string_st* %6, null
  br i1 %7, label %16, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %6, i64 0, i32 2
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %6, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = sext i32 %12 to i64
  %14 = tail call i8* @x509v3_bytes_to_hex(i8* %10, i64 %13) #3
  %15 = call i32 @X509V3_add_value(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8* %14, %struct.stack_st_CONF_VALUE** nonnull %4) #3
  call void @OPENSSL_free(i8* %14) #3
  br label %16

16:                                               ; preds = %3, %8
  %17 = getelementptr inbounds %struct.AUTHORITY_KEYID_st, %struct.AUTHORITY_KEYID_st* %1, i64 0, i32 1
  %18 = load %struct.stack_st_GENERAL_NAME*, %struct.stack_st_GENERAL_NAME** %17, align 8
  %19 = icmp eq %struct.stack_st_GENERAL_NAME* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %16
  %21 = load %struct.stack_st_CONF_VALUE*, %struct.stack_st_CONF_VALUE** %4, align 8
  %22 = call %struct.stack_st_CONF_VALUE* @i2v_GENERAL_NAMES(%struct.v3_ext_method* null, %struct.stack_st_GENERAL_NAME* nonnull %18, %struct.stack_st_CONF_VALUE* %21) #3
  store %struct.stack_st_CONF_VALUE* %22, %struct.stack_st_CONF_VALUE** %4, align 8
  br label %23

23:                                               ; preds = %16, %20
  %24 = getelementptr inbounds %struct.AUTHORITY_KEYID_st, %struct.AUTHORITY_KEYID_st* %1, i64 0, i32 2
  %25 = load %struct.asn1_string_st*, %struct.asn1_string_st** %24, align 8
  %26 = icmp eq %struct.asn1_string_st* %25, null
  br i1 %26, label %35, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %25, i64 0, i32 2
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %25, i64 0, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = sext i32 %31 to i64
  %33 = call i8* @x509v3_bytes_to_hex(i8* %29, i64 %32) #3
  %34 = call i32 @X509V3_add_value(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i8* %33, %struct.stack_st_CONF_VALUE** nonnull %4) #3
  call void @OPENSSL_free(i8* %33) #3
  br label %35

35:                                               ; preds = %23, %27
  %36 = load %struct.stack_st_CONF_VALUE*, %struct.stack_st_CONF_VALUE** %4, align 8
  ret %struct.stack_st_CONF_VALUE* %36
}

; Function Attrs: nounwind ssp uwtable
define internal %struct.AUTHORITY_KEYID_st* @v2i_AUTHORITY_KEYID(%struct.v3_ext_method* nocapture readnone, %struct.v3_ext_ctx* readonly, %struct.stack_st_CONF_VALUE*) #0 {
  %4 = bitcast %struct.stack_st_CONF_VALUE* %2 to %struct.stack_st*
  %5 = tail call i64 @sk_num(%struct.stack_st* %4) #3
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %47, label %7

7:                                                ; preds = %3, %41
  %8 = phi i64 [ %44, %41 ], [ 0, %3 ]
  %9 = phi i8 [ %43, %41 ], [ 0, %3 ]
  %10 = phi i8 [ %42, %41 ], [ 0, %3 ]
  %11 = tail call i8* @sk_value(%struct.stack_st* %4, i64 %8) #3
  %12 = getelementptr inbounds i8, i8* %11, i64 8
  %13 = bitcast i8* %12 to i8**
  %14 = load i8*, i8** %13, align 8
  %15 = tail call i32 @strcmp(i8* %14, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0)) #4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %26

17:                                               ; preds = %7
  %18 = getelementptr inbounds i8, i8* %11, i64 16
  %19 = bitcast i8* %18 to i8**
  %20 = load i8*, i8** %19, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %41, label %22

22:                                               ; preds = %17
  %23 = tail call i32 @strcmp(i8* nonnull %20, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0)) #4
  %24 = icmp eq i32 %23, 0
  %25 = select i1 %24, i8 2, i8 1
  br label %41

26:                                               ; preds = %7
  %27 = tail call i32 @strcmp(i8* %14, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0)) #4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %38

29:                                               ; preds = %26
  %30 = getelementptr inbounds i8, i8* %11, i64 16
  %31 = bitcast i8* %30 to i8**
  %32 = load i8*, i8** %31, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %41, label %34

34:                                               ; preds = %29
  %35 = tail call i32 @strcmp(i8* nonnull %32, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0)) #4
  %36 = icmp eq i32 %35, 0
  %37 = select i1 %36, i8 2, i8 1
  br label %41

38:                                               ; preds = %26
  %39 = bitcast i8* %12 to i8**
  tail call void @ERR_put_error(i32 20, i32 0, i32 159, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.4, i64 0, i64 0), i32 148) #3
  %40 = load i8*, i8** %39, align 8
  tail call void (i32, ...) @ERR_add_error_data(i32 2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), i8* %40) #3
  br label %126

41:                                               ; preds = %34, %22, %29, %17
  %42 = phi i8 [ %10, %29 ], [ 1, %17 ], [ %25, %22 ], [ %10, %34 ]
  %43 = phi i8 [ 1, %29 ], [ %9, %17 ], [ %9, %22 ], [ %37, %34 ]
  %44 = add nuw i64 %8, 1
  %45 = tail call i64 @sk_num(%struct.stack_st* %4) #3
  %46 = icmp ult i64 %44, %45
  br i1 %46, label %7, label %47

47:                                               ; preds = %41, %3
  %48 = phi i8 [ 0, %3 ], [ %42, %41 ]
  %49 = phi i8 [ 0, %3 ], [ %43, %41 ]
  %50 = icmp eq %struct.v3_ext_ctx* %1, null
  br i1 %50, label %61, label %51

51:                                               ; preds = %47
  %52 = getelementptr inbounds %struct.v3_ext_ctx, %struct.v3_ext_ctx* %1, i64 0, i32 1
  %53 = load %struct.x509_st*, %struct.x509_st** %52, align 8
  %54 = icmp eq %struct.x509_st* %53, null
  br i1 %54, label %55, label %62

55:                                               ; preds = %51
  %56 = getelementptr inbounds %struct.v3_ext_ctx, %struct.v3_ext_ctx* %1, i64 0, i32 0
  %57 = load i32, i32* %56, align 8
  %58 = icmp eq i32 %57, 1
  br i1 %58, label %59, label %61

59:                                               ; preds = %55
  %60 = tail call %struct.AUTHORITY_KEYID_st* @AUTHORITY_KEYID_new() #3
  br label %126

61:                                               ; preds = %47, %55
  tail call void @ERR_put_error(i32 20, i32 0, i32 140, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.4, i64 0, i64 0), i32 157) #3
  br label %126

62:                                               ; preds = %51
  %63 = icmp eq i8 %48, 0
  br i1 %63, label %79, label %64

64:                                               ; preds = %62
  %65 = tail call i32 @X509_get_ext_by_NID(%struct.x509_st* nonnull %53, i32 82, i32 -1) #3
  %66 = icmp sgt i32 %65, -1
  br i1 %66, label %67, label %73

67:                                               ; preds = %64
  %68 = tail call %struct.X509_extension_st* @X509_get_ext(%struct.x509_st* nonnull %53, i32 %65) #3
  %69 = icmp eq %struct.X509_extension_st* %68, null
  br i1 %69, label %73, label %70

70:                                               ; preds = %67
  %71 = tail call i8* @X509V3_EXT_d2i(%struct.X509_extension_st* nonnull %68) #3
  %72 = bitcast i8* %71 to %struct.asn1_string_st*
  br label %73

73:                                               ; preds = %67, %70, %64
  %74 = phi %struct.asn1_string_st* [ %72, %70 ], [ null, %67 ], [ null, %64 ]
  %75 = icmp ne i8 %48, 2
  %76 = icmp ne %struct.asn1_string_st* %74, null
  %77 = or i1 %75, %76
  br i1 %77, label %79, label %78

78:                                               ; preds = %73
  tail call void @ERR_put_error(i32 20, i32 0, i32 155, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.4, i64 0, i64 0), i32 168) #3
  br label %126

79:                                               ; preds = %62, %73
  %80 = phi %struct.asn1_string_st* [ %74, %73 ], [ null, %62 ]
  %81 = icmp ne i8 %49, 0
  %82 = icmp eq %struct.asn1_string_st* %80, null
  %83 = and i1 %81, %82
  %84 = icmp eq i8 %49, 2
  %85 = or i1 %84, %83
  br i1 %85, label %86, label %95

86:                                               ; preds = %79
  %87 = tail call %struct.X509_name_st* @X509_get_issuer_name(%struct.x509_st* nonnull %53) #3
  %88 = tail call %struct.X509_name_st* @X509_NAME_dup(%struct.X509_name_st* %87) #3
  %89 = tail call %struct.asn1_string_st* @X509_get_serialNumber(%struct.x509_st* nonnull %53) #3
  %90 = tail call %struct.asn1_string_st* @ASN1_INTEGER_dup(%struct.asn1_string_st* %89) #3
  %91 = icmp ne %struct.X509_name_st* %88, null
  %92 = icmp ne %struct.asn1_string_st* %90, null
  %93 = and i1 %91, %92
  br i1 %93, label %95, label %94

94:                                               ; preds = %86
  tail call void @ERR_put_error(i32 20, i32 0, i32 154, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.4, i64 0, i64 0), i32 177) #3
  br label %123

95:                                               ; preds = %79, %86
  %96 = phi %struct.X509_name_st* [ %88, %86 ], [ null, %79 ]
  %97 = phi %struct.asn1_string_st* [ %90, %86 ], [ null, %79 ]
  %98 = tail call %struct.AUTHORITY_KEYID_st* @AUTHORITY_KEYID_new() #3
  %99 = icmp eq %struct.AUTHORITY_KEYID_st* %98, null
  br i1 %99, label %123, label %100

100:                                              ; preds = %95
  %101 = icmp eq %struct.X509_name_st* %96, null
  br i1 %101, label %118, label %102

102:                                              ; preds = %100
  %103 = tail call %struct.stack_st* @sk_new_null() #3
  %104 = bitcast %struct.stack_st* %103 to %struct.stack_st_GENERAL_NAME*
  %105 = icmp eq %struct.stack_st* %103, null
  br i1 %105, label %113, label %106

106:                                              ; preds = %102
  %107 = tail call %struct.GENERAL_NAME_st* @GENERAL_NAME_new() #3
  %108 = icmp eq %struct.GENERAL_NAME_st* %107, null
  br i1 %108, label %113, label %109

109:                                              ; preds = %106
  %110 = bitcast %struct.GENERAL_NAME_st* %107 to i8*
  %111 = tail call i64 @sk_push(%struct.stack_st* nonnull %103, i8* nonnull %110) #3
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %114

113:                                              ; preds = %109, %106, %102
  tail call void @ERR_put_error(i32 20, i32 0, i32 65, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.4, i64 0, i64 0), i32 189) #3
  br label %123

114:                                              ; preds = %109
  %115 = getelementptr inbounds %struct.GENERAL_NAME_st, %struct.GENERAL_NAME_st* %107, i64 0, i32 0
  store i32 4, i32* %115, align 8
  %116 = getelementptr inbounds %struct.GENERAL_NAME_st, %struct.GENERAL_NAME_st* %107, i64 0, i32 1
  %117 = bitcast %union.anon.1* %116 to %struct.X509_name_st**
  store %struct.X509_name_st* %96, %struct.X509_name_st** %117, align 8
  br label %118

118:                                              ; preds = %100, %114
  %119 = phi %struct.stack_st_GENERAL_NAME* [ %104, %114 ], [ null, %100 ]
  %120 = getelementptr inbounds %struct.AUTHORITY_KEYID_st, %struct.AUTHORITY_KEYID_st* %98, i64 0, i32 1
  store %struct.stack_st_GENERAL_NAME* %119, %struct.stack_st_GENERAL_NAME** %120, align 8
  %121 = getelementptr inbounds %struct.AUTHORITY_KEYID_st, %struct.AUTHORITY_KEYID_st* %98, i64 0, i32 2
  store %struct.asn1_string_st* %97, %struct.asn1_string_st** %121, align 8
  %122 = getelementptr inbounds %struct.AUTHORITY_KEYID_st, %struct.AUTHORITY_KEYID_st* %98, i64 0, i32 0
  store %struct.asn1_string_st* %80, %struct.asn1_string_st** %122, align 8
  br label %126

123:                                              ; preds = %95, %113, %94
  %124 = phi %struct.X509_name_st* [ %96, %113 ], [ %96, %95 ], [ %88, %94 ]
  %125 = phi %struct.asn1_string_st* [ %97, %113 ], [ %97, %95 ], [ %90, %94 ]
  tail call void @X509_NAME_free(%struct.X509_name_st* %124) #3
  tail call void @ASN1_INTEGER_free(%struct.asn1_string_st* %125) #3
  tail call void @ASN1_OCTET_STRING_free(%struct.asn1_string_st* %80) #3
  br label %126

126:                                              ; preds = %123, %118, %78, %61, %59, %38
  %127 = phi %struct.AUTHORITY_KEYID_st* [ null, %38 ], [ %98, %118 ], [ null, %123 ], [ null, %78 ], [ %60, %59 ], [ null, %61 ]
  ret %struct.AUTHORITY_KEYID_st* %127
}

declare i8* @x509v3_bytes_to_hex(i8*, i64) local_unnamed_addr #1

declare i32 @X509V3_add_value(i8*, i8*, %struct.stack_st_CONF_VALUE**) local_unnamed_addr #1

declare void @OPENSSL_free(i8*) local_unnamed_addr #1

declare %struct.stack_st_CONF_VALUE* @i2v_GENERAL_NAMES(%struct.v3_ext_method*, %struct.stack_st_GENERAL_NAME*, %struct.stack_st_CONF_VALUE*) local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #2

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

declare void @ERR_add_error_data(i32, ...) local_unnamed_addr #1

declare %struct.AUTHORITY_KEYID_st* @AUTHORITY_KEYID_new() local_unnamed_addr #1

declare i32 @X509_get_ext_by_NID(%struct.x509_st*, i32, i32) local_unnamed_addr #1

declare %struct.X509_extension_st* @X509_get_ext(%struct.x509_st*, i32) local_unnamed_addr #1

declare i8* @X509V3_EXT_d2i(%struct.X509_extension_st*) local_unnamed_addr #1

declare %struct.X509_name_st* @X509_NAME_dup(%struct.X509_name_st*) local_unnamed_addr #1

declare %struct.X509_name_st* @X509_get_issuer_name(%struct.x509_st*) local_unnamed_addr #1

declare %struct.asn1_string_st* @ASN1_INTEGER_dup(%struct.asn1_string_st*) local_unnamed_addr #1

declare %struct.asn1_string_st* @X509_get_serialNumber(%struct.x509_st*) local_unnamed_addr #1

declare %struct.GENERAL_NAME_st* @GENERAL_NAME_new() local_unnamed_addr #1

declare void @X509_NAME_free(%struct.X509_name_st*) local_unnamed_addr #1

declare void @ASN1_INTEGER_free(%struct.asn1_string_st*) local_unnamed_addr #1

declare void @ASN1_OCTET_STRING_free(%struct.asn1_string_st*) local_unnamed_addr #1

declare i64 @sk_num(%struct.stack_st*) local_unnamed_addr #1

declare i8* @sk_value(%struct.stack_st*, i64) local_unnamed_addr #1

declare %struct.stack_st* @sk_new_null() local_unnamed_addr #1

declare i64 @sk_push(%struct.stack_st*, i8*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
