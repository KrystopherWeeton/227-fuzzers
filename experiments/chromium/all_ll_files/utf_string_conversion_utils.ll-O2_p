; ModuleID = '../../base/strings/utf_string_conversion_utils.cc'
source_filename = "../../base/strings/utf_string_conversion_utils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::basic_string.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__rep" }
%"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__rep" = type { %union.anon.4 }
%union.anon.4 = type { %"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__long" }
%"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__long" = type { i32*, i64, i64 }
%"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__short" = type { [5 x i32], %struct.anon.5 }
%struct.anon.5 = type { %"struct.std::__1::__padding.6", i8 }
%"struct.std::__1::__padding.6" = type { [3 x i8] }
%"class.std::__1::basic_string.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon.13 }
%union.anon.13 = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon.14 }
%struct.anon.14 = type { %"struct.std::__1::__padding.15", i8 }
%"struct.std::__1::__padding.15" = type { [1 x i8] }
%"class.std::__1::__basic_string_common" = type { i8 }

$_ZN4base20PrepareForUTF8OutputIwEEvPKT_mPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE = comdat any

$_ZN4base20PrepareForUTF8OutputIDsEEvPKT_mPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE = comdat any

$_ZN4base25PrepareForUTF16Or32OutputINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEEEvPKcmPT_ = comdat any

$_ZN4base25PrepareForUTF16Or32OutputINSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEEEEvPKcmPT_ = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE7reserveEm = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm = comdat any

@.str = private unnamed_addr constant [17 x i8] c" 000000000000\1000\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"\00\00\00\00\00\00\00\00\1E\0F\0F\0F\00\00\00\00\00", align 1

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base20PrepareForUTF8OutputIwEEvPKT_mPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(i32*, i64, %"class.std::__1::basic_string"*) local_unnamed_addr #0 comdat {
  %4 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %11, align 8
  br label %14

12:                                               ; preds = %3
  %13 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  store i8 0, i8* %13, align 1
  store i8 0, i8* %5, align 1
  br label %14

14:                                               ; preds = %8, %12
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %21, label %16

16:                                               ; preds = %14
  %17 = load i32, i32* %0, align 4
  %18 = icmp slt i32 %17, 128
  %19 = mul i64 %1, 3
  %20 = select i1 %18, i64 %1, i64 %19
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(%"class.std::__1::basic_string"* %2, i64 %20) #7
  br label %21

21:                                               ; preds = %16, %14
  ret void
}

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(%"class.std::__1::basic_string"*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base20PrepareForUTF8OutputIDsEEvPKT_mPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(i16*, i64, %"class.std::__1::basic_string"*) local_unnamed_addr #0 comdat {
  %4 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %11, align 8
  br label %14

12:                                               ; preds = %3
  %13 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  store i8 0, i8* %13, align 1
  store i8 0, i8* %5, align 1
  br label %14

14:                                               ; preds = %8, %12
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %21, label %16

16:                                               ; preds = %14
  %17 = load i16, i16* %0, align 2
  %18 = icmp ult i16 %17, 128
  %19 = mul i64 %1, 3
  %20 = select i1 %18, i64 %1, i64 %19
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(%"class.std::__1::basic_string"* %2, i64 %20) #7
  br label %21

21:                                               ; preds = %16, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base25PrepareForUTF16Or32OutputINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEEEvPKcmPT_(i8*, i64, %"class.std::__1::basic_string.1"*) local_unnamed_addr #0 comdat {
  %4 = bitcast %"class.std::__1::basic_string.1"* %2 to %"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__short", %"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__short"* %4, i64 0, i32 1, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i32*, i32** %9, align 8
  store i32 0, i32* %10, align 4
  %11 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %11, align 8
  br label %14

12:                                               ; preds = %3
  %13 = bitcast %"class.std::__1::basic_string.1"* %2 to i32*
  store i32 0, i32* %13, align 4
  store i8 0, i8* %5, align 1
  br label %14

14:                                               ; preds = %8, %12
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %21, label %16

16:                                               ; preds = %14
  %17 = load i8, i8* %0, align 1
  %18 = lshr i8 %17, 7
  %19 = zext i8 %18 to i64
  %20 = lshr i64 %1, %19
  tail call void @_ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm(%"class.std::__1::basic_string.1"* %2, i64 %20) #7
  br label %21

21:                                               ; preds = %16, %14
  ret void
}

declare void @_ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm(%"class.std::__1::basic_string.1"*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base25PrepareForUTF16Or32OutputINSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEEEEvPKcmPT_(i8*, i64, %"class.std::__1::basic_string.10"*) local_unnamed_addr #0 comdat {
  %4 = bitcast %"class.std::__1::basic_string.10"* %2 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %4, i64 0, i32 1, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i16*, i16** %9, align 8
  store i16 0, i16* %10, align 2
  %11 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %11, align 8
  br label %14

12:                                               ; preds = %3
  %13 = bitcast %"class.std::__1::basic_string.10"* %2 to i16*
  store i16 0, i16* %13, align 2
  store i8 0, i8* %5, align 1
  br label %14

14:                                               ; preds = %8, %12
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %21, label %16

16:                                               ; preds = %14
  %17 = load i8, i8* %0, align 1
  %18 = lshr i8 %17, 7
  %19 = zext i8 %18 to i64
  %20 = lshr i64 %1, %19
  tail call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE7reserveEm(%"class.std::__1::basic_string.10"* %2, i64 %20)
  br label %21

21:                                               ; preds = %16, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE7reserveEm(%"class.std::__1::basic_string.10"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp ugt i64 %1, 9223372036854775791
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::basic_string.10"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %5) #8
  unreachable

6:                                                ; preds = %2
  %7 = bitcast %"class.std::__1::basic_string.10"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %7, i64 0, i32 1, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp slt i8 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  br label %16

14:                                               ; preds = %6
  %15 = zext i8 %9 to i64
  br label %16

16:                                               ; preds = %11, %14
  %17 = phi i64 [ %13, %11 ], [ %15, %14 ]
  %18 = icmp ugt i64 %17, %1
  %19 = select i1 %18, i64 %17, i64 %1
  %20 = icmp ult i64 %19, 11
  br i1 %20, label %25, label %21

21:                                               ; preds = %16
  %22 = add i64 %19, 8
  %23 = and i64 %22, -8
  %24 = add i64 %23, -1
  br label %25

25:                                               ; preds = %16, %21
  %26 = phi i64 [ %24, %21 ], [ 10, %16 ]
  br i1 %10, label %27, label %32

27:                                               ; preds = %25
  %28 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %29 = load i64, i64* %28, align 8
  %30 = and i64 %29, 9223372036854775807
  %31 = add nsw i64 %30, -1
  br label %32

32:                                               ; preds = %25, %27
  %33 = phi i64 [ %31, %27 ], [ 10, %25 ]
  %34 = icmp eq i64 %26, %33
  br i1 %34, label %236, label %35

35:                                               ; preds = %32
  br i1 %10, label %36, label %39

36:                                               ; preds = %35
  %37 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  br label %41

39:                                               ; preds = %35
  %40 = zext i8 %9 to i64
  br label %41

41:                                               ; preds = %39, %36
  %42 = phi i64 [ %38, %36 ], [ %40, %39 ]
  %43 = icmp eq i64 %26, 10
  br i1 %43, label %57, label %44

44:                                               ; preds = %41
  %45 = add i64 %26, 1
  %46 = icmp slt i64 %45, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %44
  tail call void @abort() #8
  unreachable

48:                                               ; preds = %44
  %49 = shl i64 %45, 1
  %50 = tail call i8* @_Znwm(i64 %49) #9
  %51 = bitcast i8* %50 to i16*
  br i1 %10, label %52, label %55

52:                                               ; preds = %48
  %53 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i16*, i16** %53, align 8
  br label %61

55:                                               ; preds = %48
  %56 = bitcast %"class.std::__1::basic_string.10"* %0 to i16*
  br label %67

57:                                               ; preds = %41
  %58 = bitcast %"class.std::__1::basic_string.10"* %0 to i16*
  %59 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %60 = load i16*, i16** %59, align 8
  br i1 %10, label %61, label %67

61:                                               ; preds = %57, %52
  %62 = phi i1 [ true, %52 ], [ false, %57 ]
  %63 = phi i16* [ %54, %52 ], [ %60, %57 ]
  %64 = phi i16* [ %51, %52 ], [ %58, %57 ]
  %65 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %66 = load i64, i64* %65, align 8
  br label %73

67:                                               ; preds = %57, %55
  %68 = phi i1 [ true, %55 ], [ false, %57 ]
  %69 = phi i1 [ false, %55 ], [ true, %57 ]
  %70 = phi i16* [ %56, %55 ], [ %60, %57 ]
  %71 = phi i16* [ %51, %55 ], [ %58, %57 ]
  %72 = zext i8 %9 to i64
  br label %73

73:                                               ; preds = %67, %61
  %74 = phi i1 [ %62, %61 ], [ %68, %67 ]
  %75 = phi i1 [ true, %61 ], [ %69, %67 ]
  %76 = phi i16* [ %63, %61 ], [ %70, %67 ]
  %77 = phi i16* [ %64, %61 ], [ %71, %67 ]
  %78 = phi i64 [ %66, %61 ], [ %72, %67 ]
  %79 = bitcast i16* %76 to i8*
  %80 = add i64 %78, 1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %225, label %82

82:                                               ; preds = %73
  %83 = icmp ult i64 %80, 16
  br i1 %83, label %172, label %84

84:                                               ; preds = %82
  %85 = getelementptr i16, i16* %77, i64 %80
  %86 = getelementptr i16, i16* %76, i64 %80
  %87 = icmp ult i16* %77, %86
  %88 = icmp ult i16* %76, %85
  %89 = and i1 %87, %88
  br i1 %89, label %172, label %90

90:                                               ; preds = %84
  %91 = and i64 %80, -16
  %92 = sub i64 %80, %91
  %93 = getelementptr i16, i16* %76, i64 %91
  %94 = getelementptr i16, i16* %77, i64 %91
  %95 = add i64 %91, -16
  %96 = lshr exact i64 %95, 4
  %97 = add nuw nsw i64 %96, 1
  %98 = and i64 %97, 3
  %99 = icmp ult i64 %95, 48
  br i1 %99, label %151, label %100

100:                                              ; preds = %90
  %101 = sub nsw i64 %97, %98
  br label %102

102:                                              ; preds = %102, %100
  %103 = phi i64 [ 0, %100 ], [ %148, %102 ]
  %104 = phi i64 [ %101, %100 ], [ %149, %102 ]
  %105 = getelementptr i16, i16* %76, i64 %103
  %106 = getelementptr i16, i16* %77, i64 %103
  %107 = bitcast i16* %105 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !2
  %109 = getelementptr i16, i16* %105, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2, !alias.scope !2
  %112 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %112, align 2, !alias.scope !5, !noalias !2
  %113 = getelementptr i16, i16* %106, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %114, align 2, !alias.scope !5, !noalias !2
  %115 = or i64 %103, 16
  %116 = getelementptr i16, i16* %76, i64 %115
  %117 = getelementptr i16, i16* %77, i64 %115
  %118 = bitcast i16* %116 to <8 x i16>*
  %119 = load <8 x i16>, <8 x i16>* %118, align 2, !alias.scope !2
  %120 = getelementptr i16, i16* %116, i64 8
  %121 = bitcast i16* %120 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 2, !alias.scope !2
  %123 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %123, align 2, !alias.scope !5, !noalias !2
  %124 = getelementptr i16, i16* %117, i64 8
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %122, <8 x i16>* %125, align 2, !alias.scope !5, !noalias !2
  %126 = or i64 %103, 32
  %127 = getelementptr i16, i16* %76, i64 %126
  %128 = getelementptr i16, i16* %77, i64 %126
  %129 = bitcast i16* %127 to <8 x i16>*
  %130 = load <8 x i16>, <8 x i16>* %129, align 2, !alias.scope !2
  %131 = getelementptr i16, i16* %127, i64 8
  %132 = bitcast i16* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 2, !alias.scope !2
  %134 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %130, <8 x i16>* %134, align 2, !alias.scope !5, !noalias !2
  %135 = getelementptr i16, i16* %128, i64 8
  %136 = bitcast i16* %135 to <8 x i16>*
  store <8 x i16> %133, <8 x i16>* %136, align 2, !alias.scope !5, !noalias !2
  %137 = or i64 %103, 48
  %138 = getelementptr i16, i16* %76, i64 %137
  %139 = getelementptr i16, i16* %77, i64 %137
  %140 = bitcast i16* %138 to <8 x i16>*
  %141 = load <8 x i16>, <8 x i16>* %140, align 2, !alias.scope !2
  %142 = getelementptr i16, i16* %138, i64 8
  %143 = bitcast i16* %142 to <8 x i16>*
  %144 = load <8 x i16>, <8 x i16>* %143, align 2, !alias.scope !2
  %145 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %145, align 2, !alias.scope !5, !noalias !2
  %146 = getelementptr i16, i16* %139, i64 8
  %147 = bitcast i16* %146 to <8 x i16>*
  store <8 x i16> %144, <8 x i16>* %147, align 2, !alias.scope !5, !noalias !2
  %148 = add i64 %103, 64
  %149 = add i64 %104, -4
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %151, label %102, !llvm.loop !7

151:                                              ; preds = %102, %90
  %152 = phi i64 [ 0, %90 ], [ %148, %102 ]
  %153 = icmp eq i64 %98, 0
  br i1 %153, label %170, label %154

154:                                              ; preds = %151, %154
  %155 = phi i64 [ %167, %154 ], [ %152, %151 ]
  %156 = phi i64 [ %168, %154 ], [ %98, %151 ]
  %157 = getelementptr i16, i16* %76, i64 %155
  %158 = getelementptr i16, i16* %77, i64 %155
  %159 = bitcast i16* %157 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 2, !alias.scope !2
  %161 = getelementptr i16, i16* %157, i64 8
  %162 = bitcast i16* %161 to <8 x i16>*
  %163 = load <8 x i16>, <8 x i16>* %162, align 2, !alias.scope !2
  %164 = bitcast i16* %158 to <8 x i16>*
  store <8 x i16> %160, <8 x i16>* %164, align 2, !alias.scope !5, !noalias !2
  %165 = getelementptr i16, i16* %158, i64 8
  %166 = bitcast i16* %165 to <8 x i16>*
  store <8 x i16> %163, <8 x i16>* %166, align 2, !alias.scope !5, !noalias !2
  %167 = add i64 %155, 16
  %168 = add i64 %156, -1
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %170, label %154, !llvm.loop !9

170:                                              ; preds = %154, %151
  %171 = icmp eq i64 %80, %91
  br i1 %171, label %225, label %172

172:                                              ; preds = %170, %84, %82
  %173 = phi i64 [ %80, %84 ], [ %80, %82 ], [ %92, %170 ]
  %174 = phi i16* [ %76, %84 ], [ %76, %82 ], [ %93, %170 ]
  %175 = phi i16* [ %77, %84 ], [ %77, %82 ], [ %94, %170 ]
  %176 = add i64 %173, -1
  %177 = and i64 %173, 7
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %190, label %179

179:                                              ; preds = %172, %179
  %180 = phi i64 [ %185, %179 ], [ %173, %172 ]
  %181 = phi i16* [ %187, %179 ], [ %174, %172 ]
  %182 = phi i16* [ %186, %179 ], [ %175, %172 ]
  %183 = phi i64 [ %188, %179 ], [ %177, %172 ]
  %184 = load i16, i16* %181, align 2
  store i16 %184, i16* %182, align 2
  %185 = add i64 %180, -1
  %186 = getelementptr inbounds i16, i16* %182, i64 1
  %187 = getelementptr inbounds i16, i16* %181, i64 1
  %188 = add i64 %183, -1
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %190, label %179, !llvm.loop !11

190:                                              ; preds = %179, %172
  %191 = phi i64 [ %173, %172 ], [ %185, %179 ]
  %192 = phi i16* [ %174, %172 ], [ %187, %179 ]
  %193 = phi i16* [ %175, %172 ], [ %186, %179 ]
  %194 = icmp ult i64 %176, 7
  br i1 %194, label %225, label %195

195:                                              ; preds = %190, %195
  %196 = phi i64 [ %221, %195 ], [ %191, %190 ]
  %197 = phi i16* [ %223, %195 ], [ %192, %190 ]
  %198 = phi i16* [ %222, %195 ], [ %193, %190 ]
  %199 = load i16, i16* %197, align 2
  store i16 %199, i16* %198, align 2
  %200 = getelementptr inbounds i16, i16* %198, i64 1
  %201 = getelementptr inbounds i16, i16* %197, i64 1
  %202 = load i16, i16* %201, align 2
  store i16 %202, i16* %200, align 2
  %203 = getelementptr inbounds i16, i16* %198, i64 2
  %204 = getelementptr inbounds i16, i16* %197, i64 2
  %205 = load i16, i16* %204, align 2
  store i16 %205, i16* %203, align 2
  %206 = getelementptr inbounds i16, i16* %198, i64 3
  %207 = getelementptr inbounds i16, i16* %197, i64 3
  %208 = load i16, i16* %207, align 2
  store i16 %208, i16* %206, align 2
  %209 = getelementptr inbounds i16, i16* %198, i64 4
  %210 = getelementptr inbounds i16, i16* %197, i64 4
  %211 = load i16, i16* %210, align 2
  store i16 %211, i16* %209, align 2
  %212 = getelementptr inbounds i16, i16* %198, i64 5
  %213 = getelementptr inbounds i16, i16* %197, i64 5
  %214 = load i16, i16* %213, align 2
  store i16 %214, i16* %212, align 2
  %215 = getelementptr inbounds i16, i16* %198, i64 6
  %216 = getelementptr inbounds i16, i16* %197, i64 6
  %217 = load i16, i16* %216, align 2
  store i16 %217, i16* %215, align 2
  %218 = getelementptr inbounds i16, i16* %198, i64 7
  %219 = getelementptr inbounds i16, i16* %197, i64 7
  %220 = load i16, i16* %219, align 2
  store i16 %220, i16* %218, align 2
  %221 = add i64 %196, -8
  %222 = getelementptr inbounds i16, i16* %198, i64 8
  %223 = getelementptr inbounds i16, i16* %197, i64 8
  %224 = icmp eq i64 %221, 0
  br i1 %224, label %225, label %195, !llvm.loop !12

225:                                              ; preds = %190, %195, %170, %73
  br i1 %75, label %226, label %227

226:                                              ; preds = %225
  tail call void @_ZdlPv(i8* %79) #9
  br label %227

227:                                              ; preds = %226, %225
  br i1 %74, label %228, label %234

228:                                              ; preds = %227
  %229 = add i64 %26, 1
  %230 = or i64 %229, -9223372036854775808
  %231 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %230, i64* %231, align 8
  %232 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %42, i64* %232, align 8
  %233 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i16* %77, i16** %233, align 8
  br label %236

234:                                              ; preds = %227
  %235 = trunc i64 %42 to i8
  store i8 %235, i8* %8, align 1
  br label %236

236:                                              ; preds = %234, %228, %32
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base20ReadUnicodeCharacterEPKciPiPj(i8* nocapture readonly, i32, i32* nocapture, i32* nocapture) local_unnamed_addr #2 {
  %5 = load i32, i32* %2, align 4
  %6 = add nsw i32 %5, 1
  store i32 %6, i32* %2, align 4
  %7 = sext i32 %5 to i64
  %8 = getelementptr inbounds i8, i8* %0, i64 %7
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = icmp sgt i8 %9, -1
  br i1 %11, label %88, label %12

12:                                               ; preds = %4
  %13 = icmp eq i32 %6, %1
  br i1 %13, label %88, label %14

14:                                               ; preds = %12
  %15 = icmp ugt i8 %9, -33
  br i1 %15, label %16, label %71

16:                                               ; preds = %14
  %17 = icmp ult i8 %9, -16
  br i1 %17, label %18, label %34

18:                                               ; preds = %16
  %19 = and i32 %10, 15
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = sext i8 %22 to i32
  %24 = sext i32 %6 to i64
  %25 = getelementptr inbounds i8, i8* %0, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = lshr i8 %26, 5
  %28 = zext i8 %27 to i32
  %29 = shl i32 1, %28
  %30 = and i32 %29, %23
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %88, label %32

32:                                               ; preds = %18
  %33 = and i8 %26, 63
  br label %62

34:                                               ; preds = %16
  %35 = add nsw i32 %10, -240
  %36 = icmp slt i32 %35, 5
  br i1 %36, label %37, label %88

37:                                               ; preds = %34
  %38 = sext i32 %6 to i64
  %39 = getelementptr inbounds i8, i8* %0, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = lshr i32 %41, 4
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.1, i64 0, i64 %43
  %45 = load i8, i8* %44, align 1
  %46 = sext i8 %45 to i32
  %47 = shl i32 1, %35
  %48 = and i32 %47, %46
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %88, label %50

50:                                               ; preds = %37
  %51 = add nsw i32 %5, 2
  store i32 %51, i32* %2, align 4
  %52 = icmp eq i32 %51, %1
  br i1 %52, label %88, label %53

53:                                               ; preds = %50
  %54 = shl nsw i32 %35, 6
  %55 = and i32 %41, 63
  %56 = or i32 %55, %54
  %57 = sext i32 %51 to i64
  %58 = getelementptr inbounds i8, i8* %0, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = xor i8 %59, -128
  %61 = icmp ult i8 %60, 64
  br i1 %61, label %62, label %88

62:                                               ; preds = %32, %53
  %63 = phi i32 [ %6, %32 ], [ %51, %53 ]
  %64 = phi i32 [ %19, %32 ], [ %56, %53 ]
  %65 = phi i8 [ %33, %32 ], [ %60, %53 ]
  %66 = shl nsw i32 %64, 6
  %67 = zext i8 %65 to i32
  %68 = or i32 %66, %67
  %69 = add nsw i32 %63, 1
  store i32 %69, i32* %2, align 4
  %70 = icmp eq i32 %69, %1
  br i1 %70, label %88, label %75

71:                                               ; preds = %14
  %72 = icmp ugt i8 %9, -63
  br i1 %72, label %73, label %88

73:                                               ; preds = %71
  %74 = and i32 %10, 31
  br label %75

75:                                               ; preds = %62, %73
  %76 = phi i32 [ %69, %62 ], [ %6, %73 ]
  %77 = phi i32 [ %68, %62 ], [ %74, %73 ]
  %78 = sext i32 %76 to i64
  %79 = getelementptr inbounds i8, i8* %0, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = xor i8 %80, -128
  %82 = icmp ult i8 %81, 64
  br i1 %82, label %83, label %88

83:                                               ; preds = %75
  %84 = zext i8 %81 to i32
  %85 = shl i32 %77, 6
  %86 = or i32 %85, %84
  %87 = add nsw i32 %76, 1
  store i32 %87, i32* %2, align 4
  br label %88

88:                                               ; preds = %83, %18, %62, %50, %37, %12, %75, %71, %53, %34, %4
  %89 = phi i32 [ %10, %4 ], [ %86, %83 ], [ -1, %18 ], [ -1, %62 ], [ -1, %50 ], [ -1, %37 ], [ -1, %12 ], [ -1, %75 ], [ -1, %71 ], [ -1, %53 ], [ -1, %34 ]
  store i32 %89, i32* %3, align 4
  %90 = load i32, i32* %2, align 4
  %91 = add nsw i32 %90, -1
  store i32 %91, i32* %2, align 4
  %92 = icmp ult i32 %89, 55296
  %93 = add i32 %89, -57344
  %94 = icmp ult i32 %93, 1056768
  %95 = or i1 %92, %94
  ret i1 %95
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base20ReadUnicodeCharacterEPKDsiPiPj(i16* nocapture readonly, i32, i32* nocapture, i32* nocapture) local_unnamed_addr #2 {
  %5 = load i32, i32* %2, align 4
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds i16, i16* %0, i64 %6
  %8 = load i16, i16* %7, align 2
  %9 = zext i16 %8 to i32
  %10 = and i32 %9, 63488
  %11 = icmp eq i32 %10, 55296
  br i1 %11, label %12, label %32

12:                                               ; preds = %4
  %13 = and i32 %9, 1024
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %39

15:                                               ; preds = %12
  %16 = add nsw i32 %5, 1
  %17 = icmp slt i32 %16, %1
  br i1 %17, label %18, label %39

18:                                               ; preds = %15
  %19 = sext i32 %16 to i64
  %20 = getelementptr inbounds i16, i16* %0, i64 %19
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = and i32 %22, 64512
  %24 = icmp eq i32 %23, 56320
  br i1 %24, label %25, label %39

25:                                               ; preds = %18
  %26 = shl nuw nsw i32 %9, 10
  %27 = add nsw i32 %26, -56613888
  %28 = add nsw i32 %27, %22
  store i32 %28, i32* %3, align 4
  %29 = load i32, i32* %2, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %2, align 4
  %31 = load i32, i32* %3, align 4
  br label %33

32:                                               ; preds = %4
  store i32 %9, i32* %3, align 4
  br label %33

33:                                               ; preds = %32, %25
  %34 = phi i32 [ %9, %32 ], [ %31, %25 ]
  %35 = icmp ult i32 %34, 55296
  %36 = add i32 %34, -57344
  %37 = icmp ult i32 %36, 1056768
  %38 = or i1 %35, %37
  br label %39

39:                                               ; preds = %12, %18, %15, %33
  %40 = phi i1 [ %38, %33 ], [ false, %15 ], [ false, %18 ], [ false, %12 ]
  ret i1 %40
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base20ReadUnicodeCharacterEPKwiPiPj(i32* nocapture readonly, i32, i32* nocapture readonly, i32* nocapture) local_unnamed_addr #2 {
  %5 = load i32, i32* %2, align 4
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds i32, i32* %0, i64 %6
  %8 = load i32, i32* %7, align 4
  store i32 %8, i32* %3, align 4
  %9 = icmp ult i32 %8, 55296
  %10 = add i32 %8, -57344
  %11 = icmp ult i32 %10, 1056768
  %12 = or i1 %9, %11
  ret i1 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4base21WriteUnicodeCharacterEjPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i32, %"class.std::__1::basic_string"*) local_unnamed_addr #0 {
  %3 = icmp ult i32 %0, 128
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = trunc i32 %0 to i8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %1, i8 signext %5) #7
  br label %119

6:                                                ; preds = %2
  %7 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %7, i64 0, i32 1, i32 0
  %9 = load i8, i8* %8, align 1
  %10 = icmp slt i8 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  br label %16

14:                                               ; preds = %6
  %15 = zext i8 %9 to i64
  br label %16

16:                                               ; preds = %11, %14
  %17 = phi i64 [ %13, %11 ], [ %15, %14 ]
  %18 = add i64 %17, 4
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* %1, i64 %18, i8 signext 0) #7
  %19 = icmp ult i32 %0, 2048
  br i1 %19, label %20, label %34

20:                                               ; preds = %16
  %21 = lshr i32 %0, 6
  %22 = trunc i32 %21 to i8
  %23 = or i8 %22, -64
  %24 = load i8, i8* %8, align 1
  %25 = icmp slt i8 %24, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %20
  %27 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  br label %31

29:                                               ; preds = %20
  %30 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  br label %31

31:                                               ; preds = %26, %29
  %32 = phi i8* [ %28, %26 ], [ %30, %29 ]
  %33 = getelementptr inbounds i8, i8* %32, i64 %17
  br label %99

34:                                               ; preds = %16
  %35 = icmp ult i32 %0, 65536
  br i1 %35, label %36, label %51

36:                                               ; preds = %34
  %37 = lshr i32 %0, 12
  %38 = trunc i32 %37 to i8
  %39 = or i8 %38, -32
  %40 = load i8, i8* %8, align 1
  %41 = icmp slt i8 %40, 0
  br i1 %41, label %42, label %45

42:                                               ; preds = %36
  %43 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  br label %47

45:                                               ; preds = %36
  %46 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  br label %47

47:                                               ; preds = %42, %45
  %48 = phi i8* [ %44, %42 ], [ %46, %45 ]
  %49 = add i64 %17, 1
  %50 = getelementptr inbounds i8, i8* %48, i64 %17
  br label %81

51:                                               ; preds = %34
  %52 = lshr i32 %0, 18
  %53 = trunc i32 %52 to i8
  %54 = or i8 %53, -16
  %55 = load i8, i8* %8, align 1
  %56 = icmp slt i8 %55, 0
  br i1 %56, label %57, label %60

57:                                               ; preds = %51
  %58 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load i8*, i8** %58, align 8
  br label %62

60:                                               ; preds = %51
  %61 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  br label %62

62:                                               ; preds = %57, %60
  %63 = phi i8* [ %59, %57 ], [ %61, %60 ]
  %64 = add i64 %17, 1
  %65 = getelementptr inbounds i8, i8* %63, i64 %17
  store i8 %54, i8* %65, align 1
  %66 = lshr i32 %0, 12
  %67 = trunc i32 %66 to i8
  %68 = and i8 %67, 63
  %69 = or i8 %68, -128
  %70 = load i8, i8* %8, align 1
  %71 = icmp slt i8 %70, 0
  br i1 %71, label %72, label %75

72:                                               ; preds = %62
  %73 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = load i8*, i8** %73, align 8
  br label %77

75:                                               ; preds = %62
  %76 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  br label %77

77:                                               ; preds = %72, %75
  %78 = phi i8* [ %74, %72 ], [ %76, %75 ]
  %79 = add i64 %17, 2
  %80 = getelementptr inbounds i8, i8* %78, i64 %64
  br label %81

81:                                               ; preds = %77, %47
  %82 = phi i8* [ %80, %77 ], [ %50, %47 ]
  %83 = phi i8 [ %69, %77 ], [ %39, %47 ]
  %84 = phi i64 [ %79, %77 ], [ %49, %47 ]
  store i8 %83, i8* %82, align 1
  %85 = lshr i32 %0, 6
  %86 = trunc i32 %85 to i8
  %87 = and i8 %86, 63
  %88 = or i8 %87, -128
  %89 = load i8, i8* %8, align 1
  %90 = icmp slt i8 %89, 0
  br i1 %90, label %91, label %94

91:                                               ; preds = %81
  %92 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %93 = load i8*, i8** %92, align 8
  br label %96

94:                                               ; preds = %81
  %95 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  br label %96

96:                                               ; preds = %91, %94
  %97 = phi i8* [ %93, %91 ], [ %95, %94 ]
  %98 = getelementptr inbounds i8, i8* %97, i64 %84
  br label %99

99:                                               ; preds = %96, %31
  %100 = phi i8* [ %98, %96 ], [ %33, %31 ]
  %101 = phi i8 [ %88, %96 ], [ %23, %31 ]
  %102 = phi i64 [ %84, %96 ], [ %17, %31 ]
  store i8 %101, i8* %100, align 1
  %103 = add i64 %102, 1
  %104 = trunc i32 %0 to i8
  %105 = and i8 %104, 63
  %106 = or i8 %105, -128
  %107 = load i8, i8* %8, align 1
  %108 = icmp slt i8 %107, 0
  br i1 %108, label %109, label %112

109:                                              ; preds = %99
  %110 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %111 = load i8*, i8** %110, align 8
  br label %114

112:                                              ; preds = %99
  %113 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  br label %114

114:                                              ; preds = %109, %112
  %115 = phi i8* [ %111, %109 ], [ %113, %112 ]
  %116 = add i64 %102, 2
  %117 = getelementptr inbounds i8, i8* %115, i64 %103
  store i8 %106, i8* %117, align 1
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* %1, i64 %116, i8 signext 0) #7
  %118 = sub i64 %116, %17
  br label %119

119:                                              ; preds = %114, %4
  %120 = phi i64 [ 1, %4 ], [ %118, %114 ]
  ret i64 %120
}

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"*, i8 signext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4base21WriteUnicodeCharacterEjPNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEE(i32, %"class.std::__1::basic_string.10"*) local_unnamed_addr #0 {
  %3 = icmp ult i32 %0, 65536
  br i1 %3, label %4, label %40

4:                                                ; preds = %2
  %5 = trunc i32 %0 to i16
  %6 = bitcast %"class.std::__1::basic_string.10"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %4
  %11 = zext i8 %8 to i64
  br label %19

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %14 = load i64, i64* %13, align 8
  %15 = and i64 %14, 9223372036854775807
  %16 = add nsw i64 %15, -1
  %17 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  br label %19

19:                                               ; preds = %12, %10
  %20 = phi i64 [ 10, %10 ], [ %16, %12 ]
  %21 = phi i64 [ %11, %10 ], [ %18, %12 ]
  %22 = icmp eq i64 %21, %20
  br i1 %22, label %23, label %26

23:                                               ; preds = %19
  tail call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string.10"* %1, i64 %20, i64 1, i64 %20, i64 %20, i64 0, i64 0) #7
  %24 = load i8, i8* %7, align 1
  %25 = icmp slt i8 %24, 0
  br i1 %25, label %31, label %27

26:                                               ; preds = %19
  br i1 %9, label %31, label %27

27:                                               ; preds = %26, %23
  %28 = bitcast %"class.std::__1::basic_string.10"* %1 to i16*
  %29 = trunc i64 %21 to i8
  %30 = add i8 %29, 1
  store i8 %30, i8* %7, align 1
  br label %36

31:                                               ; preds = %26, %23
  %32 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load i16*, i16** %32, align 8
  %34 = add i64 %21, 1
  %35 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %34, i64* %35, align 8
  br label %36

36:                                               ; preds = %27, %31
  %37 = phi i16* [ %28, %27 ], [ %33, %31 ]
  %38 = getelementptr inbounds i16, i16* %37, i64 %21
  store i16 %5, i16* %38, align 2
  %39 = getelementptr inbounds i16, i16* %38, i64 1
  br label %134

40:                                               ; preds = %2
  %41 = bitcast %"class.std::__1::basic_string.10"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %42 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %41, i64 0, i32 1, i32 1
  %43 = load i8, i8* %42, align 1
  %44 = icmp slt i8 %43, 0
  br i1 %44, label %45, label %48

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  br label %50

48:                                               ; preds = %40
  %49 = zext i8 %43 to i64
  br label %50

50:                                               ; preds = %48, %45
  %51 = phi i64 [ %47, %45 ], [ %49, %48 ]
  %52 = add i64 %51, 2
  %53 = icmp ult i64 %51, -2
  br i1 %53, label %54, label %94

54:                                               ; preds = %50
  br i1 %44, label %55, label %62

55:                                               ; preds = %54
  %56 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %57 = load i64, i64* %56, align 8
  %58 = and i64 %57, 9223372036854775807
  %59 = add nsw i64 %58, -1
  %60 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %61 = load i64, i64* %60, align 8
  br label %64

62:                                               ; preds = %54
  %63 = zext i8 %43 to i64
  br label %64

64:                                               ; preds = %62, %55
  %65 = phi i64 [ %59, %55 ], [ 10, %62 ]
  %66 = phi i64 [ %61, %55 ], [ %63, %62 ]
  %67 = sub i64 %65, %66
  %68 = icmp ult i64 %67, 2
  br i1 %68, label %69, label %73

69:                                               ; preds = %64
  %70 = add i64 %66, 2
  %71 = sub i64 %70, %65
  tail call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string.10"* %1, i64 %65, i64 %71, i64 %66, i64 %66, i64 0, i64 0) #7
  %72 = load i8, i8* %42, align 1
  br label %73

73:                                               ; preds = %69, %64
  %74 = phi i8 [ %72, %69 ], [ %43, %64 ]
  %75 = icmp slt i8 %74, 0
  br i1 %75, label %76, label %79

76:                                               ; preds = %73
  %77 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = load i16*, i16** %77, align 8
  br label %81

79:                                               ; preds = %73
  %80 = bitcast %"class.std::__1::basic_string.10"* %1 to i16*
  br label %81

81:                                               ; preds = %79, %76
  %82 = phi i16* [ %78, %76 ], [ %80, %79 ]
  %83 = getelementptr inbounds i16, i16* %82, i64 %66
  %84 = bitcast i16* %83 to i32*
  store i32 0, i32* %84, align 2
  %85 = add i64 %66, 2
  %86 = load i8, i8* %42, align 1
  %87 = icmp slt i8 %86, 0
  br i1 %87, label %88, label %90

88:                                               ; preds = %81
  %89 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %85, i64* %89, align 8
  br label %92

90:                                               ; preds = %81
  %91 = trunc i64 %85 to i8
  store i8 %91, i8* %42, align 1
  br label %92

92:                                               ; preds = %90, %88
  %93 = getelementptr inbounds i16, i16* %82, i64 %85
  store i16 0, i16* %93, align 2
  br label %104

94:                                               ; preds = %50
  br i1 %44, label %95, label %100

95:                                               ; preds = %94
  %96 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %97 = load i16*, i16** %96, align 8
  %98 = getelementptr inbounds i16, i16* %97, i64 %52
  store i16 0, i16* %98, align 2
  %99 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %52, i64* %99, align 8
  br label %104

100:                                              ; preds = %94
  %101 = bitcast %"class.std::__1::basic_string.10"* %1 to i16*
  %102 = getelementptr inbounds i16, i16* %101, i64 %52
  store i16 0, i16* %102, align 2
  %103 = trunc i64 %52 to i8
  store i8 %103, i8* %42, align 1
  br label %106

104:                                              ; preds = %95, %92
  %105 = load i8, i8* %42, align 1
  br label %106

106:                                              ; preds = %104, %100
  %107 = phi i8 [ %105, %104 ], [ %103, %100 ]
  %108 = lshr i32 %0, 10
  %109 = trunc i32 %108 to i16
  %110 = add i16 %109, -10304
  %111 = icmp slt i8 %107, 0
  br i1 %111, label %112, label %115

112:                                              ; preds = %106
  %113 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %114 = load i16*, i16** %113, align 8
  br label %117

115:                                              ; preds = %106
  %116 = bitcast %"class.std::__1::basic_string.10"* %1 to i16*
  br label %117

117:                                              ; preds = %112, %115
  %118 = phi i16* [ %114, %112 ], [ %116, %115 ]
  %119 = add i64 %51, 1
  %120 = getelementptr inbounds i16, i16* %118, i64 %51
  store i16 %110, i16* %120, align 2
  %121 = trunc i32 %0 to i16
  %122 = and i16 %121, 1023
  %123 = or i16 %122, -9216
  %124 = load i8, i8* %42, align 1
  %125 = icmp slt i8 %124, 0
  br i1 %125, label %126, label %129

126:                                              ; preds = %117
  %127 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %128 = load i16*, i16** %127, align 8
  br label %131

129:                                              ; preds = %117
  %130 = bitcast %"class.std::__1::basic_string.10"* %1 to i16*
  br label %131

131:                                              ; preds = %126, %129
  %132 = phi i16* [ %128, %126 ], [ %130, %129 ]
  %133 = getelementptr inbounds i16, i16* %132, i64 %119
  br label %134

134:                                              ; preds = %131, %36
  %135 = phi i16* [ %133, %131 ], [ %39, %36 ]
  %136 = phi i16 [ %123, %131 ], [ 0, %36 ]
  %137 = phi i64 [ 2, %131 ], [ 1, %36 ]
  store i16 %136, i16* %135, align 2
  ret i64 %137
}

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"*, i64, i8 signext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string.10"*, i64, i64, i64, i64, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %8 = sub i64 9223372036854775791, %1
  %9 = icmp ult i64 %8, %2
  br i1 %9, label %10, label %12

10:                                               ; preds = %7
  %11 = bitcast %"class.std::__1::basic_string.10"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %11) #8
  unreachable

12:                                               ; preds = %7
  %13 = bitcast %"class.std::__1::basic_string.10"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %14 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %13, i64 0, i32 1, i32 1
  %15 = load i8, i8* %14, align 1
  %16 = icmp slt i8 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i16*, i16** %18, align 8
  br label %22

20:                                               ; preds = %12
  %21 = bitcast %"class.std::__1::basic_string.10"* %0 to i16*
  br label %22

22:                                               ; preds = %17, %20
  %23 = phi i16* [ %19, %17 ], [ %21, %20 ]
  %24 = bitcast i16* %23 to i8*
  %25 = icmp ult i64 %1, 4611686018427387879
  br i1 %25, label %26, label %37

26:                                               ; preds = %22
  %27 = add i64 %2, %1
  %28 = shl i64 %1, 1
  %29 = icmp ult i64 %27, %28
  %30 = select i1 %29, i64 %28, i64 %27
  %31 = icmp ult i64 %30, 11
  br i1 %31, label %37, label %32

32:                                               ; preds = %26
  %33 = add i64 %30, 8
  %34 = and i64 %33, -8
  %35 = icmp slt i64 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %32
  tail call void @abort() #8
  unreachable

37:                                               ; preds = %22, %26, %32
  %38 = phi i64 [ %34, %32 ], [ 9223372036854775791, %22 ], [ 11, %26 ]
  %39 = shl i64 %38, 1
  %40 = tail call i8* @_Znwm(i64 %39) #9
  %41 = bitcast i8* %40 to i16*
  %42 = icmp eq i64 %4, 0
  br i1 %42, label %188, label %43

43:                                               ; preds = %37
  %44 = icmp ult i64 %4, 16
  br i1 %44, label %135, label %45

45:                                               ; preds = %43
  %46 = shl i64 %4, 1
  %47 = getelementptr i8, i8* %40, i64 %46
  %48 = getelementptr i16, i16* %23, i64 %4
  %49 = bitcast i16* %48 to i8*
  %50 = icmp ult i8* %40, %49
  %51 = icmp ugt i8* %47, %24
  %52 = and i1 %50, %51
  br i1 %52, label %135, label %53

53:                                               ; preds = %45
  %54 = and i64 %4, -16
  %55 = sub i64 %4, %54
  %56 = getelementptr i16, i16* %23, i64 %54
  %57 = getelementptr i16, i16* %41, i64 %54
  %58 = add i64 %54, -16
  %59 = lshr exact i64 %58, 4
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 3
  %62 = icmp ult i64 %58, 48
  br i1 %62, label %114, label %63

63:                                               ; preds = %53
  %64 = sub nsw i64 %60, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 0, %63 ], [ %111, %65 ]
  %67 = phi i64 [ %64, %63 ], [ %112, %65 ]
  %68 = getelementptr i16, i16* %23, i64 %66
  %69 = getelementptr i16, i16* %41, i64 %66
  %70 = bitcast i16* %68 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2, !alias.scope !13
  %72 = getelementptr i16, i16* %68, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2, !alias.scope !13
  %75 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %75, align 2, !alias.scope !16, !noalias !13
  %76 = getelementptr i16, i16* %69, i64 8
  %77 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %77, align 2, !alias.scope !16, !noalias !13
  %78 = or i64 %66, 16
  %79 = getelementptr i16, i16* %23, i64 %78
  %80 = getelementptr i16, i16* %41, i64 %78
  %81 = bitcast i16* %79 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !13
  %83 = getelementptr i16, i16* %79, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2, !alias.scope !13
  %86 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %86, align 2, !alias.scope !16, !noalias !13
  %87 = getelementptr i16, i16* %80, i64 8
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %85, <8 x i16>* %88, align 2, !alias.scope !16, !noalias !13
  %89 = or i64 %66, 32
  %90 = getelementptr i16, i16* %23, i64 %89
  %91 = getelementptr i16, i16* %41, i64 %89
  %92 = bitcast i16* %90 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !13
  %94 = getelementptr i16, i16* %90, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2, !alias.scope !13
  %97 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %97, align 2, !alias.scope !16, !noalias !13
  %98 = getelementptr i16, i16* %91, i64 8
  %99 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %99, align 2, !alias.scope !16, !noalias !13
  %100 = or i64 %66, 48
  %101 = getelementptr i16, i16* %23, i64 %100
  %102 = getelementptr i16, i16* %41, i64 %100
  %103 = bitcast i16* %101 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !13
  %105 = getelementptr i16, i16* %101, i64 8
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 2, !alias.scope !13
  %108 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %108, align 2, !alias.scope !16, !noalias !13
  %109 = getelementptr i16, i16* %102, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %110, align 2, !alias.scope !16, !noalias !13
  %111 = add i64 %66, 64
  %112 = add i64 %67, -4
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %65, !llvm.loop !18

114:                                              ; preds = %65, %53
  %115 = phi i64 [ 0, %53 ], [ %111, %65 ]
  %116 = icmp eq i64 %61, 0
  br i1 %116, label %133, label %117

117:                                              ; preds = %114, %117
  %118 = phi i64 [ %130, %117 ], [ %115, %114 ]
  %119 = phi i64 [ %131, %117 ], [ %61, %114 ]
  %120 = getelementptr i16, i16* %23, i64 %118
  %121 = getelementptr i16, i16* %41, i64 %118
  %122 = bitcast i16* %120 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2, !alias.scope !13
  %124 = getelementptr i16, i16* %120, i64 8
  %125 = bitcast i16* %124 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 2, !alias.scope !13
  %127 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %127, align 2, !alias.scope !16, !noalias !13
  %128 = getelementptr i16, i16* %121, i64 8
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %126, <8 x i16>* %129, align 2, !alias.scope !16, !noalias !13
  %130 = add i64 %118, 16
  %131 = add i64 %119, -1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %117, !llvm.loop !19

133:                                              ; preds = %117, %114
  %134 = icmp eq i64 %54, %4
  br i1 %134, label %188, label %135

135:                                              ; preds = %133, %45, %43
  %136 = phi i64 [ %4, %45 ], [ %4, %43 ], [ %55, %133 ]
  %137 = phi i16* [ %23, %45 ], [ %23, %43 ], [ %56, %133 ]
  %138 = phi i16* [ %41, %45 ], [ %41, %43 ], [ %57, %133 ]
  %139 = add i64 %136, -1
  %140 = and i64 %136, 7
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %153, label %142

142:                                              ; preds = %135, %142
  %143 = phi i64 [ %148, %142 ], [ %136, %135 ]
  %144 = phi i16* [ %150, %142 ], [ %137, %135 ]
  %145 = phi i16* [ %149, %142 ], [ %138, %135 ]
  %146 = phi i64 [ %151, %142 ], [ %140, %135 ]
  %147 = load i16, i16* %144, align 2
  store i16 %147, i16* %145, align 2
  %148 = add i64 %143, -1
  %149 = getelementptr inbounds i16, i16* %145, i64 1
  %150 = getelementptr inbounds i16, i16* %144, i64 1
  %151 = add i64 %146, -1
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %153, label %142, !llvm.loop !20

153:                                              ; preds = %142, %135
  %154 = phi i64 [ %136, %135 ], [ %148, %142 ]
  %155 = phi i16* [ %137, %135 ], [ %150, %142 ]
  %156 = phi i16* [ %138, %135 ], [ %149, %142 ]
  %157 = icmp ult i64 %139, 7
  br i1 %157, label %188, label %158

158:                                              ; preds = %153, %158
  %159 = phi i64 [ %184, %158 ], [ %154, %153 ]
  %160 = phi i16* [ %186, %158 ], [ %155, %153 ]
  %161 = phi i16* [ %185, %158 ], [ %156, %153 ]
  %162 = load i16, i16* %160, align 2
  store i16 %162, i16* %161, align 2
  %163 = getelementptr inbounds i16, i16* %161, i64 1
  %164 = getelementptr inbounds i16, i16* %160, i64 1
  %165 = load i16, i16* %164, align 2
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds i16, i16* %161, i64 2
  %167 = getelementptr inbounds i16, i16* %160, i64 2
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %166, align 2
  %169 = getelementptr inbounds i16, i16* %161, i64 3
  %170 = getelementptr inbounds i16, i16* %160, i64 3
  %171 = load i16, i16* %170, align 2
  store i16 %171, i16* %169, align 2
  %172 = getelementptr inbounds i16, i16* %161, i64 4
  %173 = getelementptr inbounds i16, i16* %160, i64 4
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %172, align 2
  %175 = getelementptr inbounds i16, i16* %161, i64 5
  %176 = getelementptr inbounds i16, i16* %160, i64 5
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %161, i64 6
  %179 = getelementptr inbounds i16, i16* %160, i64 6
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = getelementptr inbounds i16, i16* %161, i64 7
  %182 = getelementptr inbounds i16, i16* %160, i64 7
  %183 = load i16, i16* %182, align 2
  store i16 %183, i16* %181, align 2
  %184 = add i64 %159, -8
  %185 = getelementptr inbounds i16, i16* %161, i64 8
  %186 = getelementptr inbounds i16, i16* %160, i64 8
  %187 = icmp eq i64 %184, 0
  br i1 %187, label %188, label %158, !llvm.loop !21

188:                                              ; preds = %153, %158, %133, %37
  %189 = sub i64 %3, %5
  %190 = sub i64 %189, %4
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %347, label %192

192:                                              ; preds = %188
  %193 = getelementptr inbounds i16, i16* %41, i64 %4
  %194 = getelementptr inbounds i16, i16* %193, i64 %6
  %195 = getelementptr inbounds i16, i16* %23, i64 %4
  %196 = getelementptr inbounds i16, i16* %195, i64 %5
  %197 = icmp ult i64 %190, 16
  br i1 %197, label %294, label %198

198:                                              ; preds = %192
  %199 = bitcast i16* %196 to i8*
  %200 = add i64 %6, %4
  %201 = shl i64 %200, 1
  %202 = getelementptr i8, i8* %40, i64 %201
  %203 = add i64 %6, %3
  %204 = sub i64 %203, %5
  %205 = shl i64 %204, 1
  %206 = getelementptr i8, i8* %40, i64 %205
  %207 = getelementptr i16, i16* %23, i64 %3
  %208 = bitcast i16* %207 to i8*
  %209 = icmp ult i8* %202, %208
  %210 = icmp ugt i8* %206, %199
  %211 = and i1 %209, %210
  br i1 %211, label %294, label %212

212:                                              ; preds = %198
  %213 = and i64 %190, -16
  %214 = sub i64 %190, %213
  %215 = getelementptr i16, i16* %196, i64 %213
  %216 = getelementptr i16, i16* %194, i64 %213
  %217 = add i64 %213, -16
  %218 = lshr exact i64 %217, 4
  %219 = add nuw nsw i64 %218, 1
  %220 = and i64 %219, 3
  %221 = icmp ult i64 %217, 48
  br i1 %221, label %273, label %222

222:                                              ; preds = %212
  %223 = sub nsw i64 %219, %220
  br label %224

224:                                              ; preds = %224, %222
  %225 = phi i64 [ 0, %222 ], [ %270, %224 ]
  %226 = phi i64 [ %223, %222 ], [ %271, %224 ]
  %227 = getelementptr i16, i16* %196, i64 %225
  %228 = getelementptr i16, i16* %194, i64 %225
  %229 = bitcast i16* %227 to <8 x i16>*
  %230 = load <8 x i16>, <8 x i16>* %229, align 2, !alias.scope !22
  %231 = getelementptr i16, i16* %227, i64 8
  %232 = bitcast i16* %231 to <8 x i16>*
  %233 = load <8 x i16>, <8 x i16>* %232, align 2, !alias.scope !22
  %234 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %230, <8 x i16>* %234, align 2, !alias.scope !25, !noalias !22
  %235 = getelementptr i16, i16* %228, i64 8
  %236 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %236, align 2, !alias.scope !25, !noalias !22
  %237 = or i64 %225, 16
  %238 = getelementptr i16, i16* %196, i64 %237
  %239 = getelementptr i16, i16* %194, i64 %237
  %240 = bitcast i16* %238 to <8 x i16>*
  %241 = load <8 x i16>, <8 x i16>* %240, align 2, !alias.scope !22
  %242 = getelementptr i16, i16* %238, i64 8
  %243 = bitcast i16* %242 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 2, !alias.scope !22
  %245 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %241, <8 x i16>* %245, align 2, !alias.scope !25, !noalias !22
  %246 = getelementptr i16, i16* %239, i64 8
  %247 = bitcast i16* %246 to <8 x i16>*
  store <8 x i16> %244, <8 x i16>* %247, align 2, !alias.scope !25, !noalias !22
  %248 = or i64 %225, 32
  %249 = getelementptr i16, i16* %196, i64 %248
  %250 = getelementptr i16, i16* %194, i64 %248
  %251 = bitcast i16* %249 to <8 x i16>*
  %252 = load <8 x i16>, <8 x i16>* %251, align 2, !alias.scope !22
  %253 = getelementptr i16, i16* %249, i64 8
  %254 = bitcast i16* %253 to <8 x i16>*
  %255 = load <8 x i16>, <8 x i16>* %254, align 2, !alias.scope !22
  %256 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %256, align 2, !alias.scope !25, !noalias !22
  %257 = getelementptr i16, i16* %250, i64 8
  %258 = bitcast i16* %257 to <8 x i16>*
  store <8 x i16> %255, <8 x i16>* %258, align 2, !alias.scope !25, !noalias !22
  %259 = or i64 %225, 48
  %260 = getelementptr i16, i16* %196, i64 %259
  %261 = getelementptr i16, i16* %194, i64 %259
  %262 = bitcast i16* %260 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 2, !alias.scope !22
  %264 = getelementptr i16, i16* %260, i64 8
  %265 = bitcast i16* %264 to <8 x i16>*
  %266 = load <8 x i16>, <8 x i16>* %265, align 2, !alias.scope !22
  %267 = bitcast i16* %261 to <8 x i16>*
  store <8 x i16> %263, <8 x i16>* %267, align 2, !alias.scope !25, !noalias !22
  %268 = getelementptr i16, i16* %261, i64 8
  %269 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %266, <8 x i16>* %269, align 2, !alias.scope !25, !noalias !22
  %270 = add i64 %225, 64
  %271 = add i64 %226, -4
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %273, label %224, !llvm.loop !27

273:                                              ; preds = %224, %212
  %274 = phi i64 [ 0, %212 ], [ %270, %224 ]
  %275 = icmp eq i64 %220, 0
  br i1 %275, label %292, label %276

276:                                              ; preds = %273, %276
  %277 = phi i64 [ %289, %276 ], [ %274, %273 ]
  %278 = phi i64 [ %290, %276 ], [ %220, %273 ]
  %279 = getelementptr i16, i16* %196, i64 %277
  %280 = getelementptr i16, i16* %194, i64 %277
  %281 = bitcast i16* %279 to <8 x i16>*
  %282 = load <8 x i16>, <8 x i16>* %281, align 2, !alias.scope !22
  %283 = getelementptr i16, i16* %279, i64 8
  %284 = bitcast i16* %283 to <8 x i16>*
  %285 = load <8 x i16>, <8 x i16>* %284, align 2, !alias.scope !22
  %286 = bitcast i16* %280 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %286, align 2, !alias.scope !25, !noalias !22
  %287 = getelementptr i16, i16* %280, i64 8
  %288 = bitcast i16* %287 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %288, align 2, !alias.scope !25, !noalias !22
  %289 = add i64 %277, 16
  %290 = add i64 %278, -1
  %291 = icmp eq i64 %290, 0
  br i1 %291, label %292, label %276, !llvm.loop !28

292:                                              ; preds = %276, %273
  %293 = icmp eq i64 %190, %213
  br i1 %293, label %347, label %294

294:                                              ; preds = %292, %198, %192
  %295 = phi i64 [ %190, %198 ], [ %190, %192 ], [ %214, %292 ]
  %296 = phi i16* [ %196, %198 ], [ %196, %192 ], [ %215, %292 ]
  %297 = phi i16* [ %194, %198 ], [ %194, %192 ], [ %216, %292 ]
  %298 = add i64 %295, -1
  %299 = and i64 %295, 7
  %300 = icmp eq i64 %299, 0
  br i1 %300, label %312, label %301

301:                                              ; preds = %294, %301
  %302 = phi i64 [ %307, %301 ], [ %295, %294 ]
  %303 = phi i16* [ %309, %301 ], [ %296, %294 ]
  %304 = phi i16* [ %308, %301 ], [ %297, %294 ]
  %305 = phi i64 [ %310, %301 ], [ %299, %294 ]
  %306 = load i16, i16* %303, align 2
  store i16 %306, i16* %304, align 2
  %307 = add i64 %302, -1
  %308 = getelementptr inbounds i16, i16* %304, i64 1
  %309 = getelementptr inbounds i16, i16* %303, i64 1
  %310 = add i64 %305, -1
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %312, label %301, !llvm.loop !29

312:                                              ; preds = %301, %294
  %313 = phi i64 [ %295, %294 ], [ %307, %301 ]
  %314 = phi i16* [ %296, %294 ], [ %309, %301 ]
  %315 = phi i16* [ %297, %294 ], [ %308, %301 ]
  %316 = icmp ult i64 %298, 7
  br i1 %316, label %347, label %317

317:                                              ; preds = %312, %317
  %318 = phi i64 [ %343, %317 ], [ %313, %312 ]
  %319 = phi i16* [ %345, %317 ], [ %314, %312 ]
  %320 = phi i16* [ %344, %317 ], [ %315, %312 ]
  %321 = load i16, i16* %319, align 2
  store i16 %321, i16* %320, align 2
  %322 = getelementptr inbounds i16, i16* %320, i64 1
  %323 = getelementptr inbounds i16, i16* %319, i64 1
  %324 = load i16, i16* %323, align 2
  store i16 %324, i16* %322, align 2
  %325 = getelementptr inbounds i16, i16* %320, i64 2
  %326 = getelementptr inbounds i16, i16* %319, i64 2
  %327 = load i16, i16* %326, align 2
  store i16 %327, i16* %325, align 2
  %328 = getelementptr inbounds i16, i16* %320, i64 3
  %329 = getelementptr inbounds i16, i16* %319, i64 3
  %330 = load i16, i16* %329, align 2
  store i16 %330, i16* %328, align 2
  %331 = getelementptr inbounds i16, i16* %320, i64 4
  %332 = getelementptr inbounds i16, i16* %319, i64 4
  %333 = load i16, i16* %332, align 2
  store i16 %333, i16* %331, align 2
  %334 = getelementptr inbounds i16, i16* %320, i64 5
  %335 = getelementptr inbounds i16, i16* %319, i64 5
  %336 = load i16, i16* %335, align 2
  store i16 %336, i16* %334, align 2
  %337 = getelementptr inbounds i16, i16* %320, i64 6
  %338 = getelementptr inbounds i16, i16* %319, i64 6
  %339 = load i16, i16* %338, align 2
  store i16 %339, i16* %337, align 2
  %340 = getelementptr inbounds i16, i16* %320, i64 7
  %341 = getelementptr inbounds i16, i16* %319, i64 7
  %342 = load i16, i16* %341, align 2
  store i16 %342, i16* %340, align 2
  %343 = add i64 %318, -8
  %344 = getelementptr inbounds i16, i16* %320, i64 8
  %345 = getelementptr inbounds i16, i16* %319, i64 8
  %346 = icmp eq i64 %343, 0
  br i1 %346, label %347, label %317, !llvm.loop !30

347:                                              ; preds = %312, %317, %292, %188
  %348 = icmp eq i64 %1, 10
  br i1 %348, label %350, label %349

349:                                              ; preds = %347
  tail call void @_ZdlPv(i8* %24) #9
  br label %350

350:                                              ; preds = %347, %349
  %351 = bitcast %"class.std::__1::basic_string.10"* %0 to i8**
  store i8* %40, i8** %351, align 8
  %352 = or i64 %38, -9223372036854775808
  %353 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %352, i64* %353, align 8
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !8}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !10}
!21 = distinct !{!21, !8}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !8}
!28 = distinct !{!28, !10}
!29 = distinct !{!29, !10}
!30 = distinct !{!30, !8}
