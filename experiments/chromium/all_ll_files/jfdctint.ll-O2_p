; ModuleID = '../../third_party/libjpeg_turbo/jfdctint.c'
source_filename = "../../third_party/libjpeg_turbo/jfdctint.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @jpeg_fdct_islow(i16* nocapture) local_unnamed_addr #0 {
  br label %2

2:                                                ; preds = %2, %1
  %3 = phi i32 [ 7, %1 ], [ %100, %2 ]
  %4 = phi i16* [ %0, %1 ], [ %99, %2 ]
  %5 = load i16, i16* %4, align 2
  %6 = sext i16 %5 to i32
  %7 = getelementptr inbounds i16, i16* %4, i64 7
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i32
  %10 = add nsw i32 %9, %6
  %11 = sext i32 %10 to i64
  %12 = sub nsw i32 %6, %9
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i16, i16* %4, i64 1
  %15 = load i16, i16* %14, align 2
  %16 = sext i16 %15 to i32
  %17 = getelementptr inbounds i16, i16* %4, i64 6
  %18 = load i16, i16* %17, align 2
  %19 = sext i16 %18 to i32
  %20 = add nsw i32 %19, %16
  %21 = sext i32 %20 to i64
  %22 = sub nsw i32 %16, %19
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i16, i16* %4, i64 2
  %25 = load i16, i16* %24, align 2
  %26 = sext i16 %25 to i32
  %27 = getelementptr inbounds i16, i16* %4, i64 5
  %28 = load i16, i16* %27, align 2
  %29 = sext i16 %28 to i32
  %30 = add nsw i32 %29, %26
  %31 = sext i32 %30 to i64
  %32 = sub nsw i32 %26, %29
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i16, i16* %4, i64 3
  %35 = load i16, i16* %34, align 2
  %36 = sext i16 %35 to i32
  %37 = getelementptr inbounds i16, i16* %4, i64 4
  %38 = load i16, i16* %37, align 2
  %39 = sext i16 %38 to i32
  %40 = add nsw i32 %39, %36
  %41 = sext i32 %40 to i64
  %42 = sub nsw i32 %36, %39
  %43 = sext i32 %42 to i64
  %44 = add nsw i64 %41, %11
  %45 = sub nsw i64 %11, %41
  %46 = add nsw i64 %31, %21
  %47 = sub nsw i64 %21, %31
  %48 = add nsw i64 %44, %46
  %49 = trunc i64 %48 to i16
  %50 = shl i16 %49, 2
  store i16 %50, i16* %4, align 2
  %51 = sub nsw i64 %44, %46
  %52 = trunc i64 %51 to i16
  %53 = shl i16 %52, 2
  store i16 %53, i16* %37, align 2
  %54 = add nsw i64 %45, %47
  %55 = mul nsw i64 %54, 4433
  %56 = mul nsw i64 %45, 6270
  %57 = add nsw i64 %55, 1024
  %58 = add nsw i64 %57, %56
  %59 = lshr i64 %58, 11
  %60 = trunc i64 %59 to i16
  store i16 %60, i16* %24, align 2
  %61 = mul nsw i64 %47, -15137
  %62 = add nsw i64 %57, %61
  %63 = lshr i64 %62, 11
  %64 = trunc i64 %63 to i16
  store i16 %64, i16* %17, align 2
  %65 = add nsw i64 %43, %13
  %66 = add nsw i64 %33, %23
  %67 = add nsw i64 %43, %23
  %68 = add nsw i64 %33, %13
  %69 = add nsw i64 %67, %68
  %70 = mul nsw i64 %69, 9633
  %71 = mul nsw i64 %43, 2446
  %72 = mul nsw i64 %33, 16819
  %73 = mul nsw i64 %23, 25172
  %74 = mul nsw i64 %13, 12299
  %75 = mul nsw i64 %65, -7373
  %76 = mul nsw i64 %66, -20995
  %77 = mul nsw i64 %67, -16069
  %78 = mul nsw i64 %68, -3196
  %79 = add nsw i64 %70, %77
  %80 = add nsw i64 %70, %78
  %81 = add nsw i64 %75, 1024
  %82 = add nsw i64 %81, %71
  %83 = add nsw i64 %82, %79
  %84 = lshr i64 %83, 11
  %85 = trunc i64 %84 to i16
  store i16 %85, i16* %7, align 2
  %86 = add nsw i64 %76, 1024
  %87 = add nsw i64 %86, %72
  %88 = add nsw i64 %87, %80
  %89 = lshr i64 %88, 11
  %90 = trunc i64 %89 to i16
  store i16 %90, i16* %27, align 2
  %91 = add nsw i64 %86, %73
  %92 = add nsw i64 %91, %79
  %93 = lshr i64 %92, 11
  %94 = trunc i64 %93 to i16
  store i16 %94, i16* %34, align 2
  %95 = add nsw i64 %81, %74
  %96 = add nsw i64 %95, %80
  %97 = lshr i64 %96, 11
  %98 = trunc i64 %97 to i16
  store i16 %98, i16* %14, align 2
  %99 = getelementptr inbounds i16, i16* %4, i64 8
  %100 = add nsw i32 %3, -1
  %101 = icmp eq i32 %3, 0
  br i1 %101, label %102, label %2

102:                                              ; preds = %2, %102
  %103 = phi i32 [ %202, %102 ], [ 7, %2 ]
  %104 = phi i16* [ %201, %102 ], [ %0, %2 ]
  %105 = load i16, i16* %104, align 2
  %106 = sext i16 %105 to i32
  %107 = getelementptr inbounds i16, i16* %104, i64 56
  %108 = load i16, i16* %107, align 2
  %109 = sext i16 %108 to i32
  %110 = add nsw i32 %109, %106
  %111 = sext i32 %110 to i64
  %112 = sub nsw i32 %106, %109
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i16, i16* %104, i64 8
  %115 = load i16, i16* %114, align 2
  %116 = sext i16 %115 to i32
  %117 = getelementptr inbounds i16, i16* %104, i64 48
  %118 = load i16, i16* %117, align 2
  %119 = sext i16 %118 to i32
  %120 = add nsw i32 %119, %116
  %121 = sext i32 %120 to i64
  %122 = sub nsw i32 %116, %119
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds i16, i16* %104, i64 16
  %125 = load i16, i16* %124, align 2
  %126 = sext i16 %125 to i32
  %127 = getelementptr inbounds i16, i16* %104, i64 40
  %128 = load i16, i16* %127, align 2
  %129 = sext i16 %128 to i32
  %130 = add nsw i32 %129, %126
  %131 = sext i32 %130 to i64
  %132 = sub nsw i32 %126, %129
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds i16, i16* %104, i64 24
  %135 = load i16, i16* %134, align 2
  %136 = sext i16 %135 to i32
  %137 = getelementptr inbounds i16, i16* %104, i64 32
  %138 = load i16, i16* %137, align 2
  %139 = sext i16 %138 to i32
  %140 = add nsw i32 %139, %136
  %141 = sext i32 %140 to i64
  %142 = sub nsw i32 %136, %139
  %143 = sext i32 %142 to i64
  %144 = add nsw i64 %141, %111
  %145 = sub nsw i64 %111, %141
  %146 = add nsw i64 %131, %121
  %147 = sub nsw i64 %121, %131
  %148 = add nsw i64 %146, 2
  %149 = add nsw i64 %148, %144
  %150 = lshr i64 %149, 2
  %151 = trunc i64 %150 to i16
  store i16 %151, i16* %104, align 2
  %152 = sub nsw i64 2, %146
  %153 = add nsw i64 %152, %144
  %154 = lshr i64 %153, 2
  %155 = trunc i64 %154 to i16
  store i16 %155, i16* %137, align 2
  %156 = add nsw i64 %145, %147
  %157 = mul nsw i64 %156, 4433
  %158 = mul nsw i64 %145, 6270
  %159 = add nsw i64 %157, 16384
  %160 = add nsw i64 %159, %158
  %161 = lshr i64 %160, 15
  %162 = trunc i64 %161 to i16
  store i16 %162, i16* %124, align 2
  %163 = mul nsw i64 %147, -15137
  %164 = add nsw i64 %159, %163
  %165 = lshr i64 %164, 15
  %166 = trunc i64 %165 to i16
  store i16 %166, i16* %117, align 2
  %167 = add nsw i64 %143, %113
  %168 = add nsw i64 %133, %123
  %169 = add nsw i64 %143, %123
  %170 = add nsw i64 %133, %113
  %171 = add nsw i64 %169, %170
  %172 = mul nsw i64 %171, 9633
  %173 = mul nsw i64 %143, 2446
  %174 = mul nsw i64 %133, 16819
  %175 = mul nsw i64 %123, 25172
  %176 = mul nsw i64 %113, 12299
  %177 = mul nsw i64 %167, -7373
  %178 = mul nsw i64 %168, -20995
  %179 = mul nsw i64 %169, -16069
  %180 = mul nsw i64 %170, -3196
  %181 = add nsw i64 %172, %179
  %182 = add nsw i64 %172, %180
  %183 = add nsw i64 %177, 16384
  %184 = add nsw i64 %183, %173
  %185 = add nsw i64 %184, %181
  %186 = lshr i64 %185, 15
  %187 = trunc i64 %186 to i16
  store i16 %187, i16* %107, align 2
  %188 = add nsw i64 %178, 16384
  %189 = add nsw i64 %188, %174
  %190 = add nsw i64 %189, %182
  %191 = lshr i64 %190, 15
  %192 = trunc i64 %191 to i16
  store i16 %192, i16* %127, align 2
  %193 = add nsw i64 %188, %175
  %194 = add nsw i64 %193, %181
  %195 = lshr i64 %194, 15
  %196 = trunc i64 %195 to i16
  store i16 %196, i16* %134, align 2
  %197 = add nsw i64 %183, %176
  %198 = add nsw i64 %197, %182
  %199 = lshr i64 %198, 15
  %200 = trunc i64 %199 to i16
  store i16 %200, i16* %114, align 2
  %201 = getelementptr inbounds i16, i16* %104, i64 1
  %202 = add nsw i32 %103, -1
  %203 = icmp eq i32 %103, 0
  br i1 %203, label %204, label %102

204:                                              ; preds = %102
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
