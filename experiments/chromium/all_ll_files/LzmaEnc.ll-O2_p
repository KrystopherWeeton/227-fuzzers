; ModuleID = '../../third_party/lzma_sdk/LzmaEnc.c'
source_filename = "../../third_party/lzma_sdk/LzmaEnc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._CLzmaEncProps = type { i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.CLzmaEnc = type { i8*, %struct._IMatchFinder, i32, i32, i32, i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32*, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, %struct.CRangeEnc, %struct._CMatchFinder, [4096 x %struct.COptimal], [8192 x i8], [128 x i32], [549 x i32], [4 x [64 x i32]], [4 x [128 x i32]], [16 x i32], [12 x [16 x i32]], [12 x i32], [12 x i32], [12 x i32], [12 x i32], [12 x [16 x i32]], [4 x [64 x i32]], [114 x i32], [16 x i32], %struct.CLenPriceEnc, %struct.CLenPriceEnc, %struct.CSaveState }
%struct._IMatchFinder = type { void (i8*)*, i32 (i8*)*, i8* (i8*)*, i32 (i8*, i32*)*, void (i8*, i32)* }
%struct.CRangeEnc = type { i32, i8, i64, i64, i8*, i8*, i8*, %struct.ISeqOutStream*, i64, i32 }
%struct.ISeqOutStream = type { i64 (i8*, i8*, i64)* }
%struct._CMatchFinder = type { i8*, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i32, i32*, i32*, i32, i32, i8*, %struct.ISeqInStream*, i32, i32, i32, i32, i64, i32, i32, i32, i32, [256 x i32], i64 }
%struct.ISeqInStream = type { i32 (i8*, i8*, i64*)* }
%struct.COptimal = type { i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32] }
%struct.CLenPriceEnc = type { %struct.CLenEnc, i32, [16 x [272 x i32]], [16 x i32] }
%struct.CLenEnc = type { i32, i32, [128 x i32], [128 x i32], [256 x i32] }
%struct.CSaveState = type { i32*, i32, [4 x i32], [12 x [16 x i32]], [12 x i32], [12 x i32], [12 x i32], [12 x i32], [12 x [16 x i32]], [4 x [64 x i32]], [114 x i32], [16 x i32], %struct.CLenPriceEnc, %struct.CLenPriceEnc }
%struct.ISzAlloc = type { i8* (i8*, i64)*, void (i8*, i8*)* }
%struct.CSeqOutStreamBuf = type { %struct.ISeqOutStream, i8*, i64, i32 }
%struct.ICompressProgress = type { i32 (i8*, i64, i64)* }

@kLiteralNextStates = internal unnamed_addr constant [12 x i32] [i32 0, i32 0, i32 0, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 4, i32 5], align 16
@kShortRepNextStates = internal unnamed_addr constant [12 x i32] [i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 11, i32 11, i32 11, i32 11, i32 11], align 16
@kRepNextStates = internal unnamed_addr constant [12 x i32] [i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 11, i32 11, i32 11, i32 11, i32 11], align 16
@kMatchNextStates = internal unnamed_addr constant [12 x i32] [i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 10, i32 10, i32 10, i32 10, i32 10], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @LzmaEncProps_Init(%struct._CLzmaEncProps* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %0, i64 0, i32 0
  store i32 5, i32* %2, align 8
  %3 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %0, i64 0, i32 10
  store i32 0, i32* %3, align 4
  %4 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %0, i64 0, i32 1
  store i32 0, i32* %4, align 4
  %5 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %0, i64 0, i32 2
  %6 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %0, i64 0, i32 12
  store i32 -1, i32* %6, align 4
  %7 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %0, i64 0, i32 11
  %8 = bitcast i64* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 -1, i64 36, i1 false)
  store i32 0, i32* %7, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @LzmaEncProps_Normalize(%struct._CLzmaEncProps* nocapture) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp slt i32 %3, 0
  %5 = select i1 %4, i32 5, i32 %3
  store i32 %5, i32* %2, align 8
  %6 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %20

9:                                                ; preds = %1
  %10 = icmp slt i32 %5, 6
  br i1 %10, label %11, label %15

11:                                               ; preds = %9
  %12 = shl i32 %5, 1
  %13 = add nsw i32 %12, 14
  %14 = shl i32 1, %13
  br label %18

15:                                               ; preds = %9
  %16 = icmp eq i32 %5, 6
  %17 = select i1 %16, i32 33554432, i32 67108864
  br label %18

18:                                               ; preds = %15, %11
  %19 = phi i32 [ %14, %11 ], [ %17, %15 ]
  store i32 %19, i32* %6, align 4
  br label %20

20:                                               ; preds = %18, %1
  %21 = phi i32 [ %19, %18 ], [ %7, %1 ]
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %0, i64 0, i32 2
  %24 = load i64, i64* %23, align 8
  %25 = icmp ult i64 %24, %22
  br i1 %25, label %26, label %37

26:                                               ; preds = %20
  %27 = trunc i64 %24 to i32
  %28 = icmp ugt i32 %27, 4096
  br i1 %28, label %33, label %31

29:                                               ; preds = %33
  %30 = icmp ugt i32 %27, 8192
  br i1 %30, label %97, label %31

31:                                               ; preds = %167, %163, %159, %155, %151, %147, %143, %139, %135, %131, %127, %123, %119, %115, %111, %107, %103, %99, %29, %26
  %32 = phi i32 [ 4096, %26 ], [ 8192, %29 ], [ 16384, %99 ], [ 32768, %103 ], [ 65536, %107 ], [ 131072, %111 ], [ 262144, %115 ], [ 524288, %119 ], [ 1048576, %123 ], [ 2097152, %127 ], [ 4194304, %131 ], [ 8388608, %135 ], [ 16777216, %139 ], [ 33554432, %143 ], [ 67108864, %147 ], [ 134217728, %151 ], [ 268435456, %155 ], [ 536870912, %159 ], [ 1073741824, %163 ], [ -2147483648, %167 ]
  store i32 %32, i32* %6, align 4
  br label %37

33:                                               ; preds = %26
  %34 = icmp ugt i32 %27, 6144
  br i1 %34, label %29, label %35

35:                                               ; preds = %169, %165, %161, %157, %153, %149, %145, %141, %137, %133, %129, %125, %121, %117, %113, %109, %105, %101, %97, %33
  %36 = phi i32 [ 6144, %33 ], [ 12288, %97 ], [ 24576, %101 ], [ 49152, %105 ], [ 98304, %109 ], [ 196608, %113 ], [ 393216, %117 ], [ 786432, %121 ], [ 1572864, %125 ], [ 3145728, %129 ], [ 6291456, %133 ], [ 12582912, %137 ], [ 25165824, %141 ], [ 50331648, %145 ], [ 100663296, %149 ], [ 201326592, %153 ], [ 402653184, %157 ], [ 805306368, %161 ], [ 1610612736, %165 ], [ -1073741824, %169 ]
  store i32 %36, i32* %6, align 4
  br label %37

37:                                               ; preds = %169, %31, %35, %20
  %38 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %0, i64 0, i32 3
  %39 = load i32, i32* %38, align 8
  %40 = icmp slt i32 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %37
  store i32 3, i32* %38, align 8
  br label %42

42:                                               ; preds = %41, %37
  %43 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %0, i64 0, i32 4
  %44 = load i32, i32* %43, align 4
  %45 = icmp slt i32 %44, 0
  br i1 %45, label %46, label %47

46:                                               ; preds = %42
  store i32 0, i32* %43, align 4
  br label %47

47:                                               ; preds = %46, %42
  %48 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %0, i64 0, i32 5
  %49 = load i32, i32* %48, align 8
  %50 = icmp slt i32 %49, 0
  br i1 %50, label %51, label %52

51:                                               ; preds = %47
  store i32 2, i32* %48, align 8
  br label %52

52:                                               ; preds = %51, %47
  %53 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %0, i64 0, i32 6
  %54 = load i32, i32* %53, align 4
  %55 = icmp slt i32 %54, 0
  br i1 %55, label %56, label %59

56:                                               ; preds = %52
  %57 = icmp sgt i32 %5, 4
  %58 = zext i1 %57 to i32
  store i32 %58, i32* %53, align 4
  br label %59

59:                                               ; preds = %56, %52
  %60 = phi i32 [ %58, %56 ], [ %54, %52 ]
  %61 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %0, i64 0, i32 7
  %62 = load i32, i32* %61, align 8
  %63 = icmp slt i32 %62, 0
  br i1 %63, label %64, label %67

64:                                               ; preds = %59
  %65 = icmp slt i32 %5, 7
  %66 = select i1 %65, i32 32, i32 64
  store i32 %66, i32* %61, align 8
  br label %67

67:                                               ; preds = %64, %59
  %68 = phi i32 [ %66, %64 ], [ %62, %59 ]
  %69 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %0, i64 0, i32 8
  %70 = load i32, i32* %69, align 4
  %71 = icmp slt i32 %70, 0
  br i1 %71, label %72, label %75

72:                                               ; preds = %67
  %73 = icmp ne i32 %60, 0
  %74 = zext i1 %73 to i32
  store i32 %74, i32* %69, align 4
  br label %75

75:                                               ; preds = %72, %67
  %76 = phi i32 [ %74, %72 ], [ %70, %67 ]
  %77 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %0, i64 0, i32 9
  %78 = load i32, i32* %77, align 8
  %79 = icmp slt i32 %78, 0
  br i1 %79, label %80, label %81

80:                                               ; preds = %75
  store i32 4, i32* %77, align 8
  br label %81

81:                                               ; preds = %80, %75
  %82 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %0, i64 0, i32 10
  %83 = load i32, i32* %82, align 4
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %91

85:                                               ; preds = %81
  %86 = lshr i32 %68, 1
  %87 = add nuw nsw i32 %86, 16
  %88 = icmp eq i32 %76, 0
  %89 = zext i1 %88 to i32
  %90 = lshr i32 %87, %89
  store i32 %90, i32* %82, align 4
  br label %91

91:                                               ; preds = %85, %81
  %92 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %0, i64 0, i32 12
  %93 = load i32, i32* %92, align 4
  %94 = icmp slt i32 %93, 0
  br i1 %94, label %95, label %96

95:                                               ; preds = %91
  store i32 1, i32* %92, align 4
  br label %96

96:                                               ; preds = %95, %91
  ret void

97:                                               ; preds = %29
  %98 = icmp ugt i32 %27, 12288
  br i1 %98, label %99, label %35

99:                                               ; preds = %97
  %100 = icmp ugt i32 %27, 16384
  br i1 %100, label %101, label %31

101:                                              ; preds = %99
  %102 = icmp ugt i32 %27, 24576
  br i1 %102, label %103, label %35

103:                                              ; preds = %101
  %104 = icmp ugt i32 %27, 32768
  br i1 %104, label %105, label %31

105:                                              ; preds = %103
  %106 = icmp ugt i32 %27, 49152
  br i1 %106, label %107, label %35

107:                                              ; preds = %105
  %108 = icmp ugt i32 %27, 65536
  br i1 %108, label %109, label %31

109:                                              ; preds = %107
  %110 = icmp ugt i32 %27, 98304
  br i1 %110, label %111, label %35

111:                                              ; preds = %109
  %112 = icmp ugt i32 %27, 131072
  br i1 %112, label %113, label %31

113:                                              ; preds = %111
  %114 = icmp ugt i32 %27, 196608
  br i1 %114, label %115, label %35

115:                                              ; preds = %113
  %116 = icmp ugt i32 %27, 262144
  br i1 %116, label %117, label %31

117:                                              ; preds = %115
  %118 = icmp ugt i32 %27, 393216
  br i1 %118, label %119, label %35

119:                                              ; preds = %117
  %120 = icmp ugt i32 %27, 524288
  br i1 %120, label %121, label %31

121:                                              ; preds = %119
  %122 = icmp ugt i32 %27, 786432
  br i1 %122, label %123, label %35

123:                                              ; preds = %121
  %124 = icmp ugt i32 %27, 1048576
  br i1 %124, label %125, label %31

125:                                              ; preds = %123
  %126 = icmp ugt i32 %27, 1572864
  br i1 %126, label %127, label %35

127:                                              ; preds = %125
  %128 = icmp ugt i32 %27, 2097152
  br i1 %128, label %129, label %31

129:                                              ; preds = %127
  %130 = icmp ugt i32 %27, 3145728
  br i1 %130, label %131, label %35

131:                                              ; preds = %129
  %132 = icmp ugt i32 %27, 4194304
  br i1 %132, label %133, label %31

133:                                              ; preds = %131
  %134 = icmp ugt i32 %27, 6291456
  br i1 %134, label %135, label %35

135:                                              ; preds = %133
  %136 = icmp ugt i32 %27, 8388608
  br i1 %136, label %137, label %31

137:                                              ; preds = %135
  %138 = icmp ugt i32 %27, 12582912
  br i1 %138, label %139, label %35

139:                                              ; preds = %137
  %140 = icmp ugt i32 %27, 16777216
  br i1 %140, label %141, label %31

141:                                              ; preds = %139
  %142 = icmp ugt i32 %27, 25165824
  br i1 %142, label %143, label %35

143:                                              ; preds = %141
  %144 = icmp ugt i32 %27, 33554432
  br i1 %144, label %145, label %31

145:                                              ; preds = %143
  %146 = icmp ugt i32 %27, 50331648
  br i1 %146, label %147, label %35

147:                                              ; preds = %145
  %148 = icmp ugt i32 %27, 67108864
  br i1 %148, label %149, label %31

149:                                              ; preds = %147
  %150 = icmp ugt i32 %27, 100663296
  br i1 %150, label %151, label %35

151:                                              ; preds = %149
  %152 = icmp ugt i32 %27, 134217728
  br i1 %152, label %153, label %31

153:                                              ; preds = %151
  %154 = icmp ugt i32 %27, 201326592
  br i1 %154, label %155, label %35

155:                                              ; preds = %153
  %156 = icmp ugt i32 %27, 268435456
  br i1 %156, label %157, label %31

157:                                              ; preds = %155
  %158 = icmp ugt i32 %27, 402653184
  br i1 %158, label %159, label %35

159:                                              ; preds = %157
  %160 = icmp ugt i32 %27, 536870912
  br i1 %160, label %161, label %31

161:                                              ; preds = %159
  %162 = icmp ugt i32 %27, 805306368
  br i1 %162, label %163, label %35

163:                                              ; preds = %161
  %164 = icmp ugt i32 %27, 1073741824
  br i1 %164, label %165, label %31

165:                                              ; preds = %163
  %166 = icmp ugt i32 %27, 1610612736
  br i1 %166, label %167, label %35

167:                                              ; preds = %165
  %168 = icmp ugt i32 %27, -2147483648
  br i1 %168, label %169, label %31

169:                                              ; preds = %167
  %170 = icmp ugt i32 %27, -1073741824
  br i1 %170, label %37, label %35
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @LzmaEncProps_GetDictSize(%struct._CLzmaEncProps* nocapture readonly) local_unnamed_addr #3 {
  %2 = alloca %struct._CLzmaEncProps, align 8
  %3 = bitcast %struct._CLzmaEncProps* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %3) #6
  %4 = bitcast %struct._CLzmaEncProps* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %3, i8* align 8 %4, i64 56, i1 false)
  call void @LzmaEncProps_Normalize(%struct._CLzmaEncProps* nonnull %2)
  %5 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %2, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %3) #6
  ret i32 %6
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @LzmaEnc_SaveState(i8*) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i8, i8* %0, i64 257692
  %3 = getelementptr inbounds i8, i8* %0, i64 215324
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2, i8* align 4 %3, i64 19532, i1 false)
  %4 = getelementptr inbounds i8, i8* %0, i64 277224
  %5 = getelementptr inbounds i8, i8* %0, i64 234856
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 19532, i1 false)
  %6 = getelementptr inbounds i8, i8* %0, i64 92
  %7 = bitcast i8* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds i8, i8* %0, i64 254400
  %10 = bitcast i8* %9 to i32*
  store i32 %8, i32* %10, align 8
  %11 = getelementptr inbounds i8, i8* %0, i64 254420
  %12 = bitcast i8* %11 to [12 x [16 x i32]]*
  %13 = getelementptr inbounds i8, i8* %0, i64 212052
  %14 = bitcast i8* %13 to [12 x [16 x i32]]*
  %15 = getelementptr inbounds i8, i8* %0, i64 255380
  %16 = bitcast i8* %15 to [12 x [16 x i32]]*
  %17 = getelementptr inbounds i8, i8* %0, i64 213012
  %18 = bitcast i8* %17 to [12 x [16 x i32]]*
  br label %54

19:                                               ; preds = %54
  %20 = getelementptr inbounds i8, i8* %0, i64 254392
  %21 = getelementptr inbounds i8, i8* %0, i64 256148
  %22 = getelementptr inbounds i8, i8* %0, i64 213780
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %21, i8* align 4 %22, i64 256, i1 false)
  %23 = getelementptr inbounds i8, i8* %0, i64 256404
  %24 = getelementptr inbounds i8, i8* %0, i64 214036
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %23, i8* align 4 %24, i64 256, i1 false)
  %25 = getelementptr inbounds i8, i8* %0, i64 256660
  %26 = getelementptr inbounds i8, i8* %0, i64 214292
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %25, i8* align 4 %26, i64 256, i1 false)
  %27 = getelementptr inbounds i8, i8* %0, i64 256916
  %28 = getelementptr inbounds i8, i8* %0, i64 214548
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %27, i8* align 4 %28, i64 256, i1 false)
  %29 = getelementptr inbounds i8, i8* %0, i64 255188
  %30 = getelementptr inbounds i8, i8* %0, i64 212820
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %29, i8* align 4 %30, i64 48, i1 false)
  %31 = getelementptr inbounds i8, i8* %0, i64 255236
  %32 = getelementptr inbounds i8, i8* %0, i64 212868
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 48, i1 false)
  %33 = getelementptr inbounds i8, i8* %0, i64 255284
  %34 = getelementptr inbounds i8, i8* %0, i64 212916
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %33, i8* align 4 %34, i64 48, i1 false)
  %35 = getelementptr inbounds i8, i8* %0, i64 255332
  %36 = getelementptr inbounds i8, i8* %0, i64 212964
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %35, i8* align 4 %36, i64 48, i1 false)
  %37 = getelementptr inbounds i8, i8* %0, i64 257172
  %38 = getelementptr inbounds i8, i8* %0, i64 214804
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %37, i8* align 4 %38, i64 456, i1 false)
  %39 = getelementptr inbounds i8, i8* %0, i64 257628
  %40 = getelementptr inbounds i8, i8* %0, i64 215260
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %39, i8* align 4 %40, i64 64, i1 false)
  %41 = getelementptr inbounds i8, i8* %0, i64 254404
  %42 = getelementptr inbounds i8, i8* %0, i64 76
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %42, i64 16, i1 false)
  %43 = bitcast i8* %20 to i8**
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds i8, i8* %0, i64 120
  %46 = bitcast i8* %45 to i8**
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds i8, i8* %0, i64 116
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %49, align 4
  %51 = shl i32 768, %50
  %52 = zext i32 %51 to i64
  %53 = shl nuw nsw i64 %52, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %44, i8* align 4 %47, i64 %53, i1 false)
  ret void

54:                                               ; preds = %54, %1
  %55 = phi i64 [ 0, %1 ], [ %73, %54 ]
  %56 = getelementptr inbounds [12 x [16 x i32]], [12 x [16 x i32]]* %12, i64 0, i64 %55, i64 0
  %57 = bitcast i32* %56 to i8*
  %58 = getelementptr inbounds [12 x [16 x i32]], [12 x [16 x i32]]* %14, i64 0, i64 %55, i64 0
  %59 = bitcast i32* %58 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %57, i8* align 4 %59, i64 64, i1 false)
  %60 = getelementptr inbounds [12 x [16 x i32]], [12 x [16 x i32]]* %16, i64 0, i64 %55, i64 0
  %61 = bitcast i32* %60 to i8*
  %62 = getelementptr inbounds [12 x [16 x i32]], [12 x [16 x i32]]* %18, i64 0, i64 %55, i64 0
  %63 = bitcast i32* %62 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %61, i8* align 4 %63, i64 64, i1 false)
  %64 = or i64 %55, 1
  %65 = getelementptr inbounds [12 x [16 x i32]], [12 x [16 x i32]]* %12, i64 0, i64 %64, i64 0
  %66 = bitcast i32* %65 to i8*
  %67 = getelementptr inbounds [12 x [16 x i32]], [12 x [16 x i32]]* %14, i64 0, i64 %64, i64 0
  %68 = bitcast i32* %67 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %66, i8* align 4 %68, i64 64, i1 false)
  %69 = getelementptr inbounds [12 x [16 x i32]], [12 x [16 x i32]]* %16, i64 0, i64 %64, i64 0
  %70 = bitcast i32* %69 to i8*
  %71 = getelementptr inbounds [12 x [16 x i32]], [12 x [16 x i32]]* %18, i64 0, i64 %64, i64 0
  %72 = bitcast i32* %71 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %70, i8* align 4 %72, i64 64, i1 false)
  %73 = add nuw nsw i64 %55, 2
  %74 = icmp eq i64 %73, 12
  br i1 %74, label %19, label %54
}

; Function Attrs: nounwind ssp uwtable
define hidden void @LzmaEnc_RestoreState(i8*) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i8, i8* %0, i64 215324
  %3 = getelementptr inbounds i8, i8* %0, i64 257692
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2, i8* align 4 %3, i64 19532, i1 false)
  %4 = getelementptr inbounds i8, i8* %0, i64 234856
  %5 = getelementptr inbounds i8, i8* %0, i64 277224
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 19532, i1 false)
  %6 = getelementptr inbounds i8, i8* %0, i64 254400
  %7 = bitcast i8* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds i8, i8* %0, i64 92
  %10 = bitcast i8* %9 to i32*
  store i32 %8, i32* %10, align 4
  %11 = getelementptr inbounds i8, i8* %0, i64 212052
  %12 = bitcast i8* %11 to [12 x [16 x i32]]*
  %13 = getelementptr inbounds i8, i8* %0, i64 254420
  %14 = bitcast i8* %13 to [12 x [16 x i32]]*
  %15 = getelementptr inbounds i8, i8* %0, i64 213012
  %16 = bitcast i8* %15 to [12 x [16 x i32]]*
  %17 = getelementptr inbounds i8, i8* %0, i64 255380
  %18 = bitcast i8* %17 to [12 x [16 x i32]]*
  br label %54

19:                                               ; preds = %54
  %20 = getelementptr inbounds i8, i8* %0, i64 254392
  %21 = getelementptr inbounds i8, i8* %0, i64 213780
  %22 = getelementptr inbounds i8, i8* %0, i64 256148
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %21, i8* align 4 %22, i64 256, i1 false)
  %23 = getelementptr inbounds i8, i8* %0, i64 214036
  %24 = getelementptr inbounds i8, i8* %0, i64 256404
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %23, i8* align 4 %24, i64 256, i1 false)
  %25 = getelementptr inbounds i8, i8* %0, i64 214292
  %26 = getelementptr inbounds i8, i8* %0, i64 256660
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %25, i8* align 4 %26, i64 256, i1 false)
  %27 = getelementptr inbounds i8, i8* %0, i64 214548
  %28 = getelementptr inbounds i8, i8* %0, i64 256916
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %27, i8* align 4 %28, i64 256, i1 false)
  %29 = getelementptr inbounds i8, i8* %0, i64 212820
  %30 = getelementptr inbounds i8, i8* %0, i64 255188
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %29, i8* align 4 %30, i64 48, i1 false)
  %31 = getelementptr inbounds i8, i8* %0, i64 212868
  %32 = getelementptr inbounds i8, i8* %0, i64 255236
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 48, i1 false)
  %33 = getelementptr inbounds i8, i8* %0, i64 212916
  %34 = getelementptr inbounds i8, i8* %0, i64 255284
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %33, i8* align 4 %34, i64 48, i1 false)
  %35 = getelementptr inbounds i8, i8* %0, i64 212964
  %36 = getelementptr inbounds i8, i8* %0, i64 255332
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %35, i8* align 4 %36, i64 48, i1 false)
  %37 = getelementptr inbounds i8, i8* %0, i64 214804
  %38 = getelementptr inbounds i8, i8* %0, i64 257172
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %37, i8* align 4 %38, i64 456, i1 false)
  %39 = getelementptr inbounds i8, i8* %0, i64 215260
  %40 = getelementptr inbounds i8, i8* %0, i64 257628
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %39, i8* align 4 %40, i64 64, i1 false)
  %41 = getelementptr inbounds i8, i8* %0, i64 76
  %42 = getelementptr inbounds i8, i8* %0, i64 254404
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %42, i64 16, i1 false)
  %43 = getelementptr inbounds i8, i8* %0, i64 120
  %44 = bitcast i8* %43 to i8**
  %45 = load i8*, i8** %44, align 8
  %46 = bitcast i8* %20 to i8**
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds i8, i8* %0, i64 116
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %49, align 4
  %51 = shl i32 768, %50
  %52 = zext i32 %51 to i64
  %53 = shl nuw nsw i64 %52, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %45, i8* align 4 %47, i64 %53, i1 false)
  ret void

54:                                               ; preds = %54, %1
  %55 = phi i64 [ 0, %1 ], [ %73, %54 ]
  %56 = getelementptr inbounds [12 x [16 x i32]], [12 x [16 x i32]]* %12, i64 0, i64 %55, i64 0
  %57 = bitcast i32* %56 to i8*
  %58 = getelementptr inbounds [12 x [16 x i32]], [12 x [16 x i32]]* %14, i64 0, i64 %55, i64 0
  %59 = bitcast i32* %58 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %57, i8* align 4 %59, i64 64, i1 false)
  %60 = getelementptr inbounds [12 x [16 x i32]], [12 x [16 x i32]]* %16, i64 0, i64 %55, i64 0
  %61 = bitcast i32* %60 to i8*
  %62 = getelementptr inbounds [12 x [16 x i32]], [12 x [16 x i32]]* %18, i64 0, i64 %55, i64 0
  %63 = bitcast i32* %62 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %61, i8* align 4 %63, i64 64, i1 false)
  %64 = or i64 %55, 1
  %65 = getelementptr inbounds [12 x [16 x i32]], [12 x [16 x i32]]* %12, i64 0, i64 %64, i64 0
  %66 = bitcast i32* %65 to i8*
  %67 = getelementptr inbounds [12 x [16 x i32]], [12 x [16 x i32]]* %14, i64 0, i64 %64, i64 0
  %68 = bitcast i32* %67 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %66, i8* align 4 %68, i64 64, i1 false)
  %69 = getelementptr inbounds [12 x [16 x i32]], [12 x [16 x i32]]* %16, i64 0, i64 %64, i64 0
  %70 = bitcast i32* %69 to i8*
  %71 = getelementptr inbounds [12 x [16 x i32]], [12 x [16 x i32]]* %18, i64 0, i64 %64, i64 0
  %72 = bitcast i32* %71 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %70, i8* align 4 %72, i64 64, i1 false)
  %73 = add nuw nsw i64 %55, 2
  %74 = icmp eq i64 %73, 12
  br i1 %74, label %19, label %54
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @LzmaEnc_SetProps(i8* nocapture, %struct._CLzmaEncProps* nocapture readonly) local_unnamed_addr #3 {
  %3 = alloca %struct._CLzmaEncProps, align 8
  %4 = bitcast %struct._CLzmaEncProps* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %4) #6
  %5 = bitcast %struct._CLzmaEncProps* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %5, i64 56, i1 false)
  call void @LzmaEncProps_Normalize(%struct._CLzmaEncProps* nonnull %3)
  %6 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %3, i64 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = icmp sgt i32 %7, 8
  br i1 %8, label %69, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %3, i64 0, i32 4
  %11 = load i32, i32* %10, align 4
  %12 = icmp sgt i32 %11, 4
  br i1 %12, label %69, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %3, i64 0, i32 5
  %15 = load i32, i32* %14, align 8
  %16 = icmp sgt i32 %15, 4
  br i1 %16, label %69, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %3, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = icmp ugt i32 %19, 1610612736
  br i1 %20, label %69, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds i8, i8* %0, i64 172
  %23 = bitcast i8* %22 to i32*
  store i32 %19, i32* %23, align 4
  %24 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %3, i64 0, i32 7
  %25 = load i32, i32* %24, align 8
  %26 = icmp ugt i32 %25, 5
  %27 = select i1 %26, i32 %25, i32 5
  %28 = icmp ult i32 %27, 273
  %29 = select i1 %28, i32 %27, i32 273
  %30 = getelementptr inbounds i8, i8* %0, i64 68
  %31 = bitcast i8* %30 to i32*
  store i32 %29, i32* %31, align 4
  %32 = getelementptr inbounds i8, i8* %0, i64 96
  %33 = bitcast i8* %32 to i32*
  store i32 %7, i32* %33, align 8
  %34 = getelementptr inbounds i8, i8* %0, i64 100
  %35 = bitcast i8* %34 to i32*
  store i32 %11, i32* %35, align 4
  %36 = getelementptr inbounds i8, i8* %0, i64 104
  %37 = bitcast i8* %36 to i32*
  store i32 %15, i32* %37, align 8
  %38 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %3, i64 0, i32 6
  %39 = load i32, i32* %38, align 4
  %40 = icmp eq i32 %39, 0
  %41 = zext i1 %40 to i32
  %42 = getelementptr inbounds i8, i8* %0, i64 128
  %43 = bitcast i8* %42 to i32*
  store i32 %41, i32* %43, align 8
  %44 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %3, i64 0, i32 8
  %45 = load i32, i32* %44, align 4
  %46 = icmp ne i32 %45, 0
  %47 = zext i1 %46 to i8
  %48 = getelementptr inbounds i8, i8* %0, i64 289
  store i8 %47, i8* %48, align 1
  %49 = icmp eq i32 %45, 0
  br i1 %49, label %57, label %50

50:                                               ; preds = %21
  %51 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %3, i64 0, i32 9
  %52 = load i32, i32* %51, align 8
  %53 = icmp slt i32 %52, 2
  br i1 %53, label %57, label %54

54:                                               ; preds = %50
  %55 = icmp slt i32 %52, 4
  %56 = select i1 %55, i32 %52, i32 4
  br label %57

57:                                               ; preds = %54, %50, %21
  %58 = phi i32 [ 4, %21 ], [ 2, %50 ], [ %56, %54 ]
  %59 = getelementptr inbounds i8, i8* %0, i64 348
  %60 = bitcast i8* %59 to i32*
  store i32 %58, i32* %60, align 4
  %61 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %3, i64 0, i32 10
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds i8, i8* %0, i64 316
  %64 = bitcast i8* %63 to i32*
  store i32 %62, i32* %64, align 4
  %65 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %3, i64 0, i32 11
  %66 = load i32, i32* %65, align 8
  %67 = getelementptr inbounds i8, i8* %0, i64 132
  %68 = bitcast i8* %67 to i32*
  store i32 %66, i32* %68, align 4
  br label %69

69:                                               ; preds = %2, %9, %13, %17, %57
  %70 = phi i32 [ 0, %57 ], [ 5, %17 ], [ 5, %13 ], [ 5, %9 ], [ 5, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %4) #6
  ret i32 %70
}

; Function Attrs: nounwind ssp uwtable
define hidden void @LzmaEnc_Construct(%struct.CLzmaEnc*) local_unnamed_addr #3 {
  %2 = alloca %struct._CLzmaEncProps, align 8
  %3 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 6
  %4 = bitcast i8** %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 16, i1 false) #6
  %5 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 30
  tail call void @MatchFinder_Construct(%struct._CMatchFinder* %5) #6
  %6 = bitcast %struct._CLzmaEncProps* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %6) #6
  %7 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %2, i64 0, i32 0
  store i32 5, i32* %7, align 8
  %8 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %2, i64 0, i32 1
  store i32 0, i32* %8, align 4
  %9 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %2, i64 0, i32 2
  %10 = bitcast i64* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 -1, i64 36, i1 false)
  %11 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %2, i64 0, i32 10
  store i32 0, i32* %11, align 4
  %12 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %2, i64 0, i32 11
  store i32 0, i32* %12, align 8
  %13 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %2, i64 0, i32 12
  store i32 -1, i32* %13, align 4
  call void @LzmaEncProps_Normalize(%struct._CLzmaEncProps* nonnull %2) #6
  %14 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %2, i64 0, i32 3
  %15 = load i32, i32* %14, align 8
  %16 = icmp sgt i32 %15, 8
  br i1 %16, label %65, label %17

17:                                               ; preds = %1
  %18 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %2, i64 0, i32 4
  %19 = load i32, i32* %18, align 4
  %20 = icmp sgt i32 %19, 4
  br i1 %20, label %65, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %2, i64 0, i32 5
  %23 = load i32, i32* %22, align 8
  %24 = icmp sgt i32 %23, 4
  br i1 %24, label %65, label %25

25:                                               ; preds = %21
  %26 = load i32, i32* %8, align 4
  %27 = icmp ugt i32 %26, 1610612736
  br i1 %27, label %65, label %28

28:                                               ; preds = %25
  %29 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 27
  store i32 %26, i32* %29, align 4
  %30 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %2, i64 0, i32 7
  %31 = load i32, i32* %30, align 8
  %32 = icmp ugt i32 %31, 5
  %33 = select i1 %32, i32 %31, i32 5
  %34 = icmp ult i32 %33, 273
  %35 = select i1 %34, i32 %33, i32 273
  %36 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 7
  store i32 %35, i32* %36, align 4
  %37 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 11
  store i32 %15, i32* %37, align 8
  %38 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 12
  store i32 %19, i32* %38, align 4
  %39 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 13
  store i32 %23, i32* %39, align 8
  %40 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %2, i64 0, i32 6
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, 0
  %43 = zext i1 %42 to i32
  %44 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 18
  store i32 %43, i32* %44, align 8
  %45 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %2, i64 0, i32 8
  %46 = load i32, i32* %45, align 4
  %47 = icmp ne i32 %46, 0
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 30, i32 8
  store i8 %48, i8* %49, align 1
  %50 = icmp eq i32 %46, 0
  br i1 %50, label %58, label %51

51:                                               ; preds = %28
  %52 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %2, i64 0, i32 9
  %53 = load i32, i32* %52, align 8
  %54 = icmp slt i32 %53, 2
  br i1 %54, label %58, label %55

55:                                               ; preds = %51
  %56 = icmp slt i32 %53, 4
  %57 = select i1 %56, i32 %53, i32 4
  br label %58

58:                                               ; preds = %55, %51, %28
  %59 = phi i32 [ 4, %28 ], [ 2, %51 ], [ %57, %55 ]
  %60 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 30, i32 21
  store i32 %59, i32* %60, align 4
  %61 = load i32, i32* %11, align 4
  %62 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 30, i32 15
  store i32 %61, i32* %62, align 4
  %63 = load i32, i32* %12, align 8
  %64 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 19
  store i32 %63, i32* %64, align 4
  br label %65

65:                                               ; preds = %1, %17, %21, %25, %58
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %6) #6
  %66 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 32, i64 0
  store i8 0, i8* %66, align 1
  %67 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 32, i64 1
  store i8 1, i8* %67, align 1
  %68 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 32, i64 2
  br label %69

69:                                               ; preds = %69, %65
  %70 = phi i32 [ 2, %65 ], [ %98, %69 ]
  %71 = phi i8* [ %68, %65 ], [ %97, %69 ]
  %72 = lshr i32 %70, 1
  %73 = add nsw i32 %72, -1
  %74 = zext i32 %73 to i64
  %75 = shl i64 1, %74
  %76 = trunc i32 %70 to i8
  %77 = icmp ugt i64 %75, 1
  %78 = select i1 %77, i64 %75, i64 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %71, i8 %76, i64 %78, i1 false) #6
  %79 = getelementptr inbounds i8, i8* %71, i64 %75
  %80 = add nuw nsw i32 %70, 1
  %81 = lshr i32 %80, 1
  %82 = add nsw i32 %81, -1
  %83 = zext i32 %82 to i64
  %84 = shl i64 1, %83
  %85 = trunc i32 %80 to i8
  %86 = icmp ugt i64 %84, 1
  %87 = select i1 %86, i64 %84, i64 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %79, i8 %85, i64 %87, i1 false) #6
  %88 = getelementptr inbounds i8, i8* %79, i64 %84
  %89 = add nuw nsw i32 %70, 2
  %90 = lshr i32 %89, 1
  %91 = add nsw i32 %90, -1
  %92 = zext i32 %91 to i64
  %93 = shl i64 1, %92
  %94 = trunc i32 %89 to i8
  %95 = icmp ugt i64 %93, 1
  %96 = select i1 %95, i64 %93, i64 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %88, i8 %94, i64 %96, i1 false) #6
  %97 = getelementptr inbounds i8, i8* %88, i64 %93
  %98 = add nuw nsw i32 %70, 3
  %99 = icmp eq i32 %98, 26
  br i1 %99, label %100, label %69

100:                                              ; preds = %69, %147
  %101 = phi i64 [ %152, %147 ], [ 8, %69 ]
  %102 = trunc i64 %101 to i32
  %103 = mul i32 %102, %102
  %104 = icmp ugt i32 %103, 65535
  br i1 %104, label %105, label %111

105:                                              ; preds = %100, %105
  %106 = phi i32 [ %109, %105 ], [ 0, %100 ]
  %107 = phi i32 [ %108, %105 ], [ %103, %100 ]
  %108 = lshr i32 %107, 1
  %109 = add nuw nsw i32 %106, 1
  %110 = icmp ugt i32 %107, 131071
  br i1 %110, label %105, label %111

111:                                              ; preds = %105, %100
  %112 = phi i32 [ %103, %100 ], [ %108, %105 ]
  %113 = phi i32 [ 0, %100 ], [ %109, %105 ]
  %114 = mul i32 %112, %112
  %115 = shl i32 %113, 1
  %116 = icmp ugt i32 %114, 65535
  br i1 %116, label %117, label %123

117:                                              ; preds = %111, %117
  %118 = phi i32 [ %121, %117 ], [ %115, %111 ]
  %119 = phi i32 [ %120, %117 ], [ %114, %111 ]
  %120 = lshr i32 %119, 1
  %121 = add nuw nsw i32 %118, 1
  %122 = icmp ugt i32 %119, 131071
  br i1 %122, label %117, label %123

123:                                              ; preds = %117, %111
  %124 = phi i32 [ %114, %111 ], [ %120, %117 ]
  %125 = phi i32 [ %115, %111 ], [ %121, %117 ]
  %126 = mul i32 %124, %124
  %127 = shl i32 %125, 1
  %128 = icmp ugt i32 %126, 65535
  br i1 %128, label %129, label %135

129:                                              ; preds = %123, %129
  %130 = phi i32 [ %133, %129 ], [ %127, %123 ]
  %131 = phi i32 [ %132, %129 ], [ %126, %123 ]
  %132 = lshr i32 %131, 1
  %133 = add nuw nsw i32 %130, 1
  %134 = icmp ugt i32 %131, 131071
  br i1 %134, label %129, label %135

135:                                              ; preds = %129, %123
  %136 = phi i32 [ %126, %123 ], [ %132, %129 ]
  %137 = phi i32 [ %127, %123 ], [ %133, %129 ]
  %138 = mul i32 %136, %136
  %139 = shl i32 %137, 1
  %140 = icmp ugt i32 %138, 65535
  br i1 %140, label %141, label %147

141:                                              ; preds = %135, %141
  %142 = phi i32 [ %145, %141 ], [ %139, %135 ]
  %143 = phi i32 [ %144, %141 ], [ %138, %135 ]
  %144 = lshr i32 %143, 1
  %145 = add nuw nsw i32 %142, 1
  %146 = icmp ugt i32 %143, 131071
  br i1 %146, label %141, label %147

147:                                              ; preds = %141, %135
  %148 = phi i32 [ %139, %135 ], [ %145, %141 ]
  %149 = sub i32 161, %148
  %150 = lshr i64 %101, 4
  %151 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %150
  store i32 %149, i32* %151, align 4
  %152 = add nuw nsw i64 %101, 16
  %153 = icmp ult i64 %152, 2048
  br i1 %153, label %100, label %154

154:                                              ; preds = %147
  %155 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 17
  store i32* null, i32** %155, align 8
  %156 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 49, i32 0
  store i32* null, i32** %156, align 8
  ret void
}

declare void @MatchFinder_Construct(%struct._CMatchFinder*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i8* @LzmaEnc_Create(%struct.ISzAlloc*) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %0, i64 0, i32 0
  %3 = load i8* (i8*, i64)*, i8* (i8*, i64)** %2, align 8
  %4 = bitcast %struct.ISzAlloc* %0 to i8*
  %5 = tail call i8* %3(i8* %4, i64 296760) #6
  %6 = icmp eq i8* %5, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %1
  %8 = bitcast i8* %5 to %struct.CLzmaEnc*
  tail call void @LzmaEnc_Construct(%struct.CLzmaEnc* nonnull %8)
  br label %9

9:                                                ; preds = %1, %7
  ret i8* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden void @LzmaEnc_FreeLits(%struct.CLzmaEnc* nocapture, %struct.ISzAlloc*) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %1, i64 0, i32 1
  %4 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %5 = bitcast %struct.ISzAlloc* %1 to i8*
  %6 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 17
  %7 = bitcast i32** %6 to i8**
  %8 = load i8*, i8** %7, align 8
  tail call void %4(i8* %5, i8* %8) #6
  %9 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %10 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 49, i32 0
  %11 = bitcast i32** %10 to i8**
  %12 = load i8*, i8** %11, align 8
  tail call void %9(i8* %5, i8* %12) #6
  store i32* null, i32** %6, align 8
  store i32* null, i32** %10, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @LzmaEnc_Destruct(%struct.CLzmaEnc*, %struct.ISzAlloc*, %struct.ISzAlloc*) local_unnamed_addr #3 {
  %4 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 30
  tail call void @MatchFinder_Free(%struct._CMatchFinder* %4, %struct.ISzAlloc* %2) #6
  %5 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %1, i64 0, i32 1
  %6 = load void (i8*, i8*)*, void (i8*, i8*)** %5, align 8
  %7 = bitcast %struct.ISzAlloc* %1 to i8*
  %8 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 17
  %9 = bitcast i32** %8 to i8**
  %10 = load i8*, i8** %9, align 8
  tail call void %6(i8* %7, i8* %10) #6
  %11 = load void (i8*, i8*)*, void (i8*, i8*)** %5, align 8
  %12 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 49, i32 0
  %13 = bitcast i32** %12 to i8**
  %14 = load i8*, i8** %13, align 8
  tail call void %11(i8* %7, i8* %14) #6
  store i32* null, i32** %8, align 8
  store i32* null, i32** %12, align 8
  %15 = load void (i8*, i8*)*, void (i8*, i8*)** %5, align 8
  %16 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 6
  %17 = load i8*, i8** %16, align 8
  tail call void %15(i8* %7, i8* %17) #6
  store i8* null, i8** %16, align 8
  ret void
}

declare void @MatchFinder_Free(%struct._CMatchFinder*, %struct.ISzAlloc*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @LzmaEnc_Destroy(i8*, %struct.ISzAlloc*, %struct.ISzAlloc*) local_unnamed_addr #3 {
  %4 = getelementptr inbounds i8, i8* %0, i64 256
  %5 = bitcast i8* %4 to %struct._CMatchFinder*
  tail call void @MatchFinder_Free(%struct._CMatchFinder* %5, %struct.ISzAlloc* %2) #6
  %6 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %1, i64 0, i32 1
  %7 = load void (i8*, i8*)*, void (i8*, i8*)** %6, align 8
  %8 = bitcast %struct.ISzAlloc* %1 to i8*
  %9 = getelementptr inbounds i8, i8* %0, i64 120
  %10 = bitcast i8* %9 to i32**
  %11 = bitcast i8* %9 to i8**
  %12 = load i8*, i8** %11, align 8
  tail call void %7(i8* %8, i8* %12) #6
  %13 = load void (i8*, i8*)*, void (i8*, i8*)** %6, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 254392
  %15 = bitcast i8* %14 to i32**
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  tail call void %13(i8* %8, i8* %17) #6
  store i32* null, i32** %10, align 8
  store i32* null, i32** %15, align 8
  %18 = load void (i8*, i8*)*, void (i8*, i8*)** %6, align 8
  %19 = getelementptr inbounds i8, i8* %0, i64 224
  %20 = bitcast i8* %19 to i8**
  %21 = load i8*, i8** %20, align 8
  tail call void %18(i8* %8, i8* %21) #6
  store i8* null, i8** %20, align 8
  %22 = load void (i8*, i8*)*, void (i8*, i8*)** %6, align 8
  tail call void %22(i8* %8, i8* %0) #6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @LzmaEnc_Init(%struct.CLzmaEnc*) local_unnamed_addr #1 {
  %2 = getelementptr %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 9, i64 0
  %3 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 2
  store i64 0, i64* %3, align 8
  %4 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 0
  %5 = bitcast i32* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 20, i1 false)
  store i32 -1, i32* %4, align 8
  %6 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 3
  store i64 1, i64* %6, align 8
  %7 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 1
  store i8 0, i8* %7, align 4
  %8 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 6
  %9 = bitcast i8** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 4
  %12 = bitcast i8** %11 to i64*
  store i64 %10, i64* %12, align 8
  %13 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 8
  store i64 0, i64* %13, align 8
  %14 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 9
  store i32 0, i32* %14, align 8
  br label %15

15:                                               ; preds = %15, %1
  %16 = phi i64 [ 0, %1 ], [ %37, %15 ]
  %17 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 38, i64 %16, i64 0
  %18 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 43, i64 %16, i64 0
  %19 = bitcast i32* %17 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %19, align 4
  %20 = bitcast i32* %18 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %20, align 4
  %21 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 38, i64 %16, i64 4
  %22 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 43, i64 %16, i64 4
  %23 = bitcast i32* %21 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %23, align 4
  %24 = bitcast i32* %22 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %24, align 4
  %25 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 38, i64 %16, i64 8
  %26 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 43, i64 %16, i64 8
  %27 = bitcast i32* %25 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %27, align 4
  %28 = bitcast i32* %26 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %28, align 4
  %29 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 38, i64 %16, i64 12
  %30 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 43, i64 %16, i64 12
  %31 = bitcast i32* %29 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %31, align 4
  %32 = bitcast i32* %30 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %32, align 4
  %33 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 39, i64 %16
  store i32 1024, i32* %33, align 4
  %34 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 40, i64 %16
  store i32 1024, i32* %34, align 4
  %35 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 41, i64 %16
  store i32 1024, i32* %35, align 4
  %36 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 42, i64 %16
  store i32 1024, i32* %36, align 4
  %37 = add nuw nsw i64 %16, 1
  %38 = icmp eq i64 %37, 12
  br i1 %38, label %39, label %15

39:                                               ; preds = %15
  %40 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 12
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 11
  %43 = load i32, i32* %42, align 8
  %44 = add i32 %43, %41
  %45 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 17
  %46 = load i32*, i32** %45, align 8
  %47 = icmp ult i32 %44, 24
  br i1 %47, label %48, label %125

48:                                               ; preds = %39
  %49 = shl i32 768, %44
  %50 = zext i32 %49 to i64
  %51 = icmp ugt i64 %50, 1
  %52 = select i1 %51, i64 %50, i64 1
  %53 = icmp ult i64 %52, 8
  br i1 %53, label %54, label %56

54:                                               ; preds = %123, %48
  %55 = phi i64 [ 0, %48 ], [ %57, %123 ]
  br label %848

56:                                               ; preds = %48
  %57 = and i64 %52, 4294967288
  %58 = add nsw i64 %57, -8
  %59 = lshr exact i64 %58, 3
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 7
  %62 = icmp ult i64 %58, 56
  br i1 %62, label %110, label %63

63:                                               ; preds = %56
  %64 = sub nsw i64 %60, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 0, %63 ], [ %107, %65 ]
  %67 = phi i64 [ %64, %63 ], [ %108, %65 ]
  %68 = getelementptr inbounds i32, i32* %46, i64 %66
  %69 = bitcast i32* %68 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %69, align 4
  %70 = getelementptr inbounds i32, i32* %68, i64 4
  %71 = bitcast i32* %70 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %71, align 4
  %72 = or i64 %66, 8
  %73 = getelementptr inbounds i32, i32* %46, i64 %72
  %74 = bitcast i32* %73 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %74, align 4
  %75 = getelementptr inbounds i32, i32* %73, i64 4
  %76 = bitcast i32* %75 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %76, align 4
  %77 = or i64 %66, 16
  %78 = getelementptr inbounds i32, i32* %46, i64 %77
  %79 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %79, align 4
  %80 = getelementptr inbounds i32, i32* %78, i64 4
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %81, align 4
  %82 = or i64 %66, 24
  %83 = getelementptr inbounds i32, i32* %46, i64 %82
  %84 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %84, align 4
  %85 = getelementptr inbounds i32, i32* %83, i64 4
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %86, align 4
  %87 = or i64 %66, 32
  %88 = getelementptr inbounds i32, i32* %46, i64 %87
  %89 = bitcast i32* %88 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %89, align 4
  %90 = getelementptr inbounds i32, i32* %88, i64 4
  %91 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %91, align 4
  %92 = or i64 %66, 40
  %93 = getelementptr inbounds i32, i32* %46, i64 %92
  %94 = bitcast i32* %93 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %94, align 4
  %95 = getelementptr inbounds i32, i32* %93, i64 4
  %96 = bitcast i32* %95 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %96, align 4
  %97 = or i64 %66, 48
  %98 = getelementptr inbounds i32, i32* %46, i64 %97
  %99 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %99, align 4
  %100 = getelementptr inbounds i32, i32* %98, i64 4
  %101 = bitcast i32* %100 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %101, align 4
  %102 = or i64 %66, 56
  %103 = getelementptr inbounds i32, i32* %46, i64 %102
  %104 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %104, align 4
  %105 = getelementptr inbounds i32, i32* %103, i64 4
  %106 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %106, align 4
  %107 = add i64 %66, 64
  %108 = add i64 %67, -8
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %65, !llvm.loop !2

110:                                              ; preds = %65, %56
  %111 = phi i64 [ 0, %56 ], [ %107, %65 ]
  %112 = icmp eq i64 %61, 0
  br i1 %112, label %123, label %113

113:                                              ; preds = %110, %113
  %114 = phi i64 [ %120, %113 ], [ %111, %110 ]
  %115 = phi i64 [ %121, %113 ], [ %61, %110 ]
  %116 = getelementptr inbounds i32, i32* %46, i64 %114
  %117 = bitcast i32* %116 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %117, align 4
  %118 = getelementptr inbounds i32, i32* %116, i64 4
  %119 = bitcast i32* %118 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %119, align 4
  %120 = add i64 %114, 8
  %121 = add i64 %115, -1
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %123, label %113, !llvm.loop !4

123:                                              ; preds = %113, %110
  %124 = icmp eq i64 %52, %57
  br i1 %124, label %125, label %54

125:                                              ; preds = %123, %39, %848
  %126 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 0, i64 0
  %127 = bitcast i32* %126 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %127, align 4
  %128 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 0, i64 4
  %129 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %129, align 4
  %130 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 0, i64 8
  %131 = bitcast i32* %130 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %131, align 4
  %132 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 0, i64 12
  %133 = bitcast i32* %132 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %133, align 4
  %134 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 0, i64 16
  %135 = bitcast i32* %134 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %135, align 4
  %136 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 0, i64 20
  %137 = bitcast i32* %136 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %137, align 4
  %138 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 0, i64 24
  %139 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %139, align 4
  %140 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 0, i64 28
  %141 = bitcast i32* %140 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %141, align 4
  %142 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 0, i64 32
  %143 = bitcast i32* %142 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %143, align 4
  %144 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 0, i64 36
  %145 = bitcast i32* %144 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %145, align 4
  %146 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 0, i64 40
  %147 = bitcast i32* %146 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %147, align 4
  %148 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 0, i64 44
  %149 = bitcast i32* %148 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %149, align 4
  %150 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 0, i64 48
  %151 = bitcast i32* %150 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %151, align 4
  %152 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 0, i64 52
  %153 = bitcast i32* %152 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %153, align 4
  %154 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 0, i64 56
  %155 = bitcast i32* %154 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %155, align 4
  %156 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 0, i64 60
  %157 = bitcast i32* %156 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %157, align 4
  %158 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 1, i64 0
  %159 = bitcast i32* %158 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %159, align 4
  %160 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 1, i64 4
  %161 = bitcast i32* %160 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %161, align 4
  %162 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 1, i64 8
  %163 = bitcast i32* %162 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %163, align 4
  %164 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 1, i64 12
  %165 = bitcast i32* %164 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %165, align 4
  %166 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 1, i64 16
  %167 = bitcast i32* %166 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %167, align 4
  %168 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 1, i64 20
  %169 = bitcast i32* %168 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %169, align 4
  %170 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 1, i64 24
  %171 = bitcast i32* %170 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %171, align 4
  %172 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 1, i64 28
  %173 = bitcast i32* %172 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %173, align 4
  %174 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 1, i64 32
  %175 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %175, align 4
  %176 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 1, i64 36
  %177 = bitcast i32* %176 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %177, align 4
  %178 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 1, i64 40
  %179 = bitcast i32* %178 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %179, align 4
  %180 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 1, i64 44
  %181 = bitcast i32* %180 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %181, align 4
  %182 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 1, i64 48
  %183 = bitcast i32* %182 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %183, align 4
  %184 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 1, i64 52
  %185 = bitcast i32* %184 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %185, align 4
  %186 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 1, i64 56
  %187 = bitcast i32* %186 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %187, align 4
  %188 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 1, i64 60
  %189 = bitcast i32* %188 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %189, align 4
  %190 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 2, i64 0
  %191 = bitcast i32* %190 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %191, align 4
  %192 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 2, i64 4
  %193 = bitcast i32* %192 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %193, align 4
  %194 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 2, i64 8
  %195 = bitcast i32* %194 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %195, align 4
  %196 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 2, i64 12
  %197 = bitcast i32* %196 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %197, align 4
  %198 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 2, i64 16
  %199 = bitcast i32* %198 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %199, align 4
  %200 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 2, i64 20
  %201 = bitcast i32* %200 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %201, align 4
  %202 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 2, i64 24
  %203 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %203, align 4
  %204 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 2, i64 28
  %205 = bitcast i32* %204 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %205, align 4
  %206 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 2, i64 32
  %207 = bitcast i32* %206 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %207, align 4
  %208 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 2, i64 36
  %209 = bitcast i32* %208 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %209, align 4
  %210 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 2, i64 40
  %211 = bitcast i32* %210 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %211, align 4
  %212 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 2, i64 44
  %213 = bitcast i32* %212 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %213, align 4
  %214 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 2, i64 48
  %215 = bitcast i32* %214 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %215, align 4
  %216 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 2, i64 52
  %217 = bitcast i32* %216 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %217, align 4
  %218 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 2, i64 56
  %219 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %219, align 4
  %220 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 2, i64 60
  %221 = bitcast i32* %220 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %221, align 4
  %222 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 3, i64 0
  %223 = bitcast i32* %222 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %223, align 4
  %224 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 3, i64 4
  %225 = bitcast i32* %224 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %225, align 4
  %226 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 3, i64 8
  %227 = bitcast i32* %226 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %227, align 4
  %228 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 3, i64 12
  %229 = bitcast i32* %228 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %229, align 4
  %230 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 3, i64 16
  %231 = bitcast i32* %230 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %231, align 4
  %232 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 3, i64 20
  %233 = bitcast i32* %232 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %233, align 4
  %234 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 3, i64 24
  %235 = bitcast i32* %234 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %235, align 4
  %236 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 3, i64 28
  %237 = bitcast i32* %236 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %237, align 4
  %238 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 3, i64 32
  %239 = bitcast i32* %238 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %239, align 4
  %240 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 3, i64 36
  %241 = bitcast i32* %240 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %241, align 4
  %242 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 3, i64 40
  %243 = bitcast i32* %242 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %243, align 4
  %244 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 3, i64 44
  %245 = bitcast i32* %244 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %245, align 4
  %246 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 3, i64 48
  %247 = bitcast i32* %246 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %247, align 4
  %248 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 3, i64 52
  %249 = bitcast i32* %248 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %249, align 4
  %250 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 3, i64 56
  %251 = bitcast i32* %250 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %251, align 4
  %252 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 3, i64 60
  %253 = bitcast i32* %252 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %253, align 4
  %254 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 0
  %255 = bitcast i32* %254 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %255, align 4
  %256 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 4
  %257 = bitcast i32* %256 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %257, align 4
  %258 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 8
  %259 = bitcast i32* %258 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %259, align 4
  %260 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 12
  %261 = bitcast i32* %260 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %261, align 4
  %262 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 16
  %263 = bitcast i32* %262 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %263, align 4
  %264 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 20
  %265 = bitcast i32* %264 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %265, align 4
  %266 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 24
  %267 = bitcast i32* %266 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %267, align 4
  %268 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 28
  %269 = bitcast i32* %268 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %269, align 4
  %270 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 32
  %271 = bitcast i32* %270 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %271, align 4
  %272 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 36
  %273 = bitcast i32* %272 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %273, align 4
  %274 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 40
  %275 = bitcast i32* %274 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %275, align 4
  %276 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 44
  %277 = bitcast i32* %276 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %277, align 4
  %278 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 48
  %279 = bitcast i32* %278 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %279, align 4
  %280 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 52
  %281 = bitcast i32* %280 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %281, align 4
  %282 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 56
  %283 = bitcast i32* %282 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %283, align 4
  %284 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 60
  %285 = bitcast i32* %284 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %285, align 4
  %286 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 64
  %287 = bitcast i32* %286 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %287, align 4
  %288 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 68
  %289 = bitcast i32* %288 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %289, align 4
  %290 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 72
  %291 = bitcast i32* %290 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %291, align 4
  %292 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 76
  %293 = bitcast i32* %292 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %293, align 4
  %294 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 80
  %295 = bitcast i32* %294 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %295, align 4
  %296 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 84
  %297 = bitcast i32* %296 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %297, align 4
  %298 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 88
  %299 = bitcast i32* %298 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %299, align 4
  %300 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 92
  %301 = bitcast i32* %300 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %301, align 4
  %302 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 96
  %303 = bitcast i32* %302 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %303, align 4
  %304 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 100
  %305 = bitcast i32* %304 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %305, align 4
  %306 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 104
  %307 = bitcast i32* %306 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %307, align 4
  %308 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 108
  %309 = bitcast i32* %308 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %309, align 4
  %310 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 112
  store i32 1024, i32* %310, align 4
  %311 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 113
  store i32 1024, i32* %311, align 4
  %312 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 1
  store i32 1024, i32* %312, align 4
  %313 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 0
  store i32 1024, i32* %313, align 4
  %314 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 0
  %315 = bitcast i32* %314 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %315, align 4
  %316 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 4
  %317 = bitcast i32* %316 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %317, align 4
  %318 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 8
  %319 = bitcast i32* %318 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %319, align 4
  %320 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 12
  %321 = bitcast i32* %320 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %321, align 4
  %322 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 16
  %323 = bitcast i32* %322 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %323, align 4
  %324 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 20
  %325 = bitcast i32* %324 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %325, align 4
  %326 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 24
  %327 = bitcast i32* %326 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %327, align 4
  %328 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 28
  %329 = bitcast i32* %328 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %329, align 4
  %330 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 32
  %331 = bitcast i32* %330 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %331, align 4
  %332 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 36
  %333 = bitcast i32* %332 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %333, align 4
  %334 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 40
  %335 = bitcast i32* %334 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %335, align 4
  %336 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 44
  %337 = bitcast i32* %336 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %337, align 4
  %338 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 48
  %339 = bitcast i32* %338 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %339, align 4
  %340 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 52
  %341 = bitcast i32* %340 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %341, align 4
  %342 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 56
  %343 = bitcast i32* %342 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %343, align 4
  %344 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 60
  %345 = bitcast i32* %344 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %345, align 4
  %346 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 64
  %347 = bitcast i32* %346 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %347, align 4
  %348 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 68
  %349 = bitcast i32* %348 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %349, align 4
  %350 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 72
  %351 = bitcast i32* %350 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %351, align 4
  %352 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 76
  %353 = bitcast i32* %352 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %353, align 4
  %354 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 80
  %355 = bitcast i32* %354 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %355, align 4
  %356 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 84
  %357 = bitcast i32* %356 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %357, align 4
  %358 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 88
  %359 = bitcast i32* %358 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %359, align 4
  %360 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 92
  %361 = bitcast i32* %360 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %361, align 4
  %362 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 96
  %363 = bitcast i32* %362 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %363, align 4
  %364 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 100
  %365 = bitcast i32* %364 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %365, align 4
  %366 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 104
  %367 = bitcast i32* %366 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %367, align 4
  %368 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 108
  %369 = bitcast i32* %368 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %369, align 4
  %370 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 112
  %371 = bitcast i32* %370 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %371, align 4
  %372 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 116
  %373 = bitcast i32* %372 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %373, align 4
  %374 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 120
  %375 = bitcast i32* %374 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %375, align 4
  %376 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 2, i64 124
  %377 = bitcast i32* %376 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %377, align 4
  %378 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 0
  %379 = bitcast i32* %378 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %379, align 4
  %380 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 4
  %381 = bitcast i32* %380 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %381, align 4
  %382 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 8
  %383 = bitcast i32* %382 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %383, align 4
  %384 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 12
  %385 = bitcast i32* %384 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %385, align 4
  %386 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 16
  %387 = bitcast i32* %386 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %387, align 4
  %388 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 20
  %389 = bitcast i32* %388 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %389, align 4
  %390 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 24
  %391 = bitcast i32* %390 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %391, align 4
  %392 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 28
  %393 = bitcast i32* %392 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %393, align 4
  %394 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 32
  %395 = bitcast i32* %394 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %395, align 4
  %396 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 36
  %397 = bitcast i32* %396 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %397, align 4
  %398 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 40
  %399 = bitcast i32* %398 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %399, align 4
  %400 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 44
  %401 = bitcast i32* %400 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %401, align 4
  %402 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 48
  %403 = bitcast i32* %402 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %403, align 4
  %404 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 52
  %405 = bitcast i32* %404 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %405, align 4
  %406 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 56
  %407 = bitcast i32* %406 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %407, align 4
  %408 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 60
  %409 = bitcast i32* %408 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %409, align 4
  %410 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 64
  %411 = bitcast i32* %410 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %411, align 4
  %412 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 68
  %413 = bitcast i32* %412 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %413, align 4
  %414 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 72
  %415 = bitcast i32* %414 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %415, align 4
  %416 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 76
  %417 = bitcast i32* %416 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %417, align 4
  %418 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 80
  %419 = bitcast i32* %418 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %419, align 4
  %420 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 84
  %421 = bitcast i32* %420 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %421, align 4
  %422 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 88
  %423 = bitcast i32* %422 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %423, align 4
  %424 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 92
  %425 = bitcast i32* %424 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %425, align 4
  %426 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 96
  %427 = bitcast i32* %426 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %427, align 4
  %428 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 100
  %429 = bitcast i32* %428 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %429, align 4
  %430 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 104
  %431 = bitcast i32* %430 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %431, align 4
  %432 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 108
  %433 = bitcast i32* %432 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %433, align 4
  %434 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 112
  %435 = bitcast i32* %434 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %435, align 4
  %436 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 116
  %437 = bitcast i32* %436 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %437, align 4
  %438 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 120
  %439 = bitcast i32* %438 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %439, align 4
  %440 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 3, i64 124
  %441 = bitcast i32* %440 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %441, align 4
  %442 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 0
  %443 = bitcast i32* %442 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %443, align 4
  %444 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 4
  %445 = bitcast i32* %444 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %445, align 4
  %446 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 8
  %447 = bitcast i32* %446 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %447, align 4
  %448 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 12
  %449 = bitcast i32* %448 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %449, align 4
  %450 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 16
  %451 = bitcast i32* %450 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %451, align 4
  %452 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 20
  %453 = bitcast i32* %452 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %453, align 4
  %454 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 24
  %455 = bitcast i32* %454 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %455, align 4
  %456 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 28
  %457 = bitcast i32* %456 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %457, align 4
  %458 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 32
  %459 = bitcast i32* %458 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %459, align 4
  %460 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 36
  %461 = bitcast i32* %460 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %461, align 4
  %462 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 40
  %463 = bitcast i32* %462 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %463, align 4
  %464 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 44
  %465 = bitcast i32* %464 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %465, align 4
  %466 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 48
  %467 = bitcast i32* %466 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %467, align 4
  %468 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 52
  %469 = bitcast i32* %468 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %469, align 4
  %470 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 56
  %471 = bitcast i32* %470 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %471, align 4
  %472 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 60
  %473 = bitcast i32* %472 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %473, align 4
  %474 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 64
  %475 = bitcast i32* %474 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %475, align 4
  %476 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 68
  %477 = bitcast i32* %476 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %477, align 4
  %478 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 72
  %479 = bitcast i32* %478 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %479, align 4
  %480 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 76
  %481 = bitcast i32* %480 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %481, align 4
  %482 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 80
  %483 = bitcast i32* %482 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %483, align 4
  %484 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 84
  %485 = bitcast i32* %484 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %485, align 4
  %486 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 88
  %487 = bitcast i32* %486 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %487, align 4
  %488 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 92
  %489 = bitcast i32* %488 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %489, align 4
  %490 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 96
  %491 = bitcast i32* %490 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %491, align 4
  %492 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 100
  %493 = bitcast i32* %492 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %493, align 4
  %494 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 104
  %495 = bitcast i32* %494 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %495, align 4
  %496 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 108
  %497 = bitcast i32* %496 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %497, align 4
  %498 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 112
  %499 = bitcast i32* %498 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %499, align 4
  %500 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 116
  %501 = bitcast i32* %500 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %501, align 4
  %502 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 120
  %503 = bitcast i32* %502 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %503, align 4
  %504 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 124
  %505 = bitcast i32* %504 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %505, align 4
  %506 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 128
  %507 = bitcast i32* %506 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %507, align 4
  %508 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 132
  %509 = bitcast i32* %508 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %509, align 4
  %510 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 136
  %511 = bitcast i32* %510 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %511, align 4
  %512 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 140
  %513 = bitcast i32* %512 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %513, align 4
  %514 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 144
  %515 = bitcast i32* %514 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %515, align 4
  %516 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 148
  %517 = bitcast i32* %516 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %517, align 4
  %518 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 152
  %519 = bitcast i32* %518 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %519, align 4
  %520 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 156
  %521 = bitcast i32* %520 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %521, align 4
  %522 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 160
  %523 = bitcast i32* %522 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %523, align 4
  %524 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 164
  %525 = bitcast i32* %524 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %525, align 4
  %526 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 168
  %527 = bitcast i32* %526 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %527, align 4
  %528 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 172
  %529 = bitcast i32* %528 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %529, align 4
  %530 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 176
  %531 = bitcast i32* %530 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %531, align 4
  %532 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 180
  %533 = bitcast i32* %532 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %533, align 4
  %534 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 184
  %535 = bitcast i32* %534 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %535, align 4
  %536 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 188
  %537 = bitcast i32* %536 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %537, align 4
  %538 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 192
  %539 = bitcast i32* %538 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %539, align 4
  %540 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 196
  %541 = bitcast i32* %540 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %541, align 4
  %542 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 200
  %543 = bitcast i32* %542 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %543, align 4
  %544 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 204
  %545 = bitcast i32* %544 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %545, align 4
  %546 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 208
  %547 = bitcast i32* %546 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %547, align 4
  %548 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 212
  %549 = bitcast i32* %548 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %549, align 4
  %550 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 216
  %551 = bitcast i32* %550 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %551, align 4
  %552 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 220
  %553 = bitcast i32* %552 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %553, align 4
  %554 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 224
  %555 = bitcast i32* %554 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %555, align 4
  %556 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 228
  %557 = bitcast i32* %556 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %557, align 4
  %558 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 232
  %559 = bitcast i32* %558 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %559, align 4
  %560 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 236
  %561 = bitcast i32* %560 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %561, align 4
  %562 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 240
  %563 = bitcast i32* %562 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %563, align 4
  %564 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 244
  %565 = bitcast i32* %564 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %565, align 4
  %566 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 248
  %567 = bitcast i32* %566 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %567, align 4
  %568 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 0, i32 4, i64 252
  %569 = bitcast i32* %568 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %569, align 4
  %570 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 1
  store i32 1024, i32* %570, align 4
  %571 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 0
  store i32 1024, i32* %571, align 4
  %572 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 0
  %573 = bitcast i32* %572 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %573, align 4
  %574 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 4
  %575 = bitcast i32* %574 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %575, align 4
  %576 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 8
  %577 = bitcast i32* %576 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %577, align 4
  %578 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 12
  %579 = bitcast i32* %578 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %579, align 4
  %580 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 16
  %581 = bitcast i32* %580 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %581, align 4
  %582 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 20
  %583 = bitcast i32* %582 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %583, align 4
  %584 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 24
  %585 = bitcast i32* %584 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %585, align 4
  %586 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 28
  %587 = bitcast i32* %586 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %587, align 4
  %588 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 32
  %589 = bitcast i32* %588 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %589, align 4
  %590 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 36
  %591 = bitcast i32* %590 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %591, align 4
  %592 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 40
  %593 = bitcast i32* %592 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %593, align 4
  %594 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 44
  %595 = bitcast i32* %594 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %595, align 4
  %596 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 48
  %597 = bitcast i32* %596 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %597, align 4
  %598 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 52
  %599 = bitcast i32* %598 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %599, align 4
  %600 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 56
  %601 = bitcast i32* %600 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %601, align 4
  %602 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 60
  %603 = bitcast i32* %602 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %603, align 4
  %604 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 64
  %605 = bitcast i32* %604 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %605, align 4
  %606 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 68
  %607 = bitcast i32* %606 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %607, align 4
  %608 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 72
  %609 = bitcast i32* %608 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %609, align 4
  %610 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 76
  %611 = bitcast i32* %610 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %611, align 4
  %612 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 80
  %613 = bitcast i32* %612 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %613, align 4
  %614 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 84
  %615 = bitcast i32* %614 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %615, align 4
  %616 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 88
  %617 = bitcast i32* %616 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %617, align 4
  %618 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 92
  %619 = bitcast i32* %618 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %619, align 4
  %620 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 96
  %621 = bitcast i32* %620 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %621, align 4
  %622 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 100
  %623 = bitcast i32* %622 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %623, align 4
  %624 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 104
  %625 = bitcast i32* %624 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %625, align 4
  %626 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 108
  %627 = bitcast i32* %626 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %627, align 4
  %628 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 112
  %629 = bitcast i32* %628 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %629, align 4
  %630 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 116
  %631 = bitcast i32* %630 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %631, align 4
  %632 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 120
  %633 = bitcast i32* %632 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %633, align 4
  %634 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 2, i64 124
  %635 = bitcast i32* %634 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %635, align 4
  %636 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 0
  %637 = bitcast i32* %636 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %637, align 4
  %638 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 4
  %639 = bitcast i32* %638 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %639, align 4
  %640 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 8
  %641 = bitcast i32* %640 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %641, align 4
  %642 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 12
  %643 = bitcast i32* %642 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %643, align 4
  %644 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 16
  %645 = bitcast i32* %644 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %645, align 4
  %646 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 20
  %647 = bitcast i32* %646 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %647, align 4
  %648 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 24
  %649 = bitcast i32* %648 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %649, align 4
  %650 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 28
  %651 = bitcast i32* %650 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %651, align 4
  %652 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 32
  %653 = bitcast i32* %652 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %653, align 4
  %654 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 36
  %655 = bitcast i32* %654 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %655, align 4
  %656 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 40
  %657 = bitcast i32* %656 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %657, align 4
  %658 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 44
  %659 = bitcast i32* %658 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %659, align 4
  %660 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 48
  %661 = bitcast i32* %660 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %661, align 4
  %662 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 52
  %663 = bitcast i32* %662 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %663, align 4
  %664 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 56
  %665 = bitcast i32* %664 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %665, align 4
  %666 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 60
  %667 = bitcast i32* %666 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %667, align 4
  %668 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 64
  %669 = bitcast i32* %668 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %669, align 4
  %670 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 68
  %671 = bitcast i32* %670 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %671, align 4
  %672 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 72
  %673 = bitcast i32* %672 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %673, align 4
  %674 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 76
  %675 = bitcast i32* %674 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %675, align 4
  %676 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 80
  %677 = bitcast i32* %676 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %677, align 4
  %678 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 84
  %679 = bitcast i32* %678 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %679, align 4
  %680 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 88
  %681 = bitcast i32* %680 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %681, align 4
  %682 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 92
  %683 = bitcast i32* %682 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %683, align 4
  %684 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 96
  %685 = bitcast i32* %684 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %685, align 4
  %686 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 100
  %687 = bitcast i32* %686 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %687, align 4
  %688 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 104
  %689 = bitcast i32* %688 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %689, align 4
  %690 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 108
  %691 = bitcast i32* %690 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %691, align 4
  %692 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 112
  %693 = bitcast i32* %692 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %693, align 4
  %694 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 116
  %695 = bitcast i32* %694 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %695, align 4
  %696 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 120
  %697 = bitcast i32* %696 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %697, align 4
  %698 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 3, i64 124
  %699 = bitcast i32* %698 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %699, align 4
  %700 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 0
  %701 = bitcast i32* %700 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %701, align 4
  %702 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 4
  %703 = bitcast i32* %702 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %703, align 4
  %704 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 8
  %705 = bitcast i32* %704 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %705, align 4
  %706 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 12
  %707 = bitcast i32* %706 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %707, align 4
  %708 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 16
  %709 = bitcast i32* %708 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %709, align 4
  %710 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 20
  %711 = bitcast i32* %710 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %711, align 4
  %712 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 24
  %713 = bitcast i32* %712 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %713, align 4
  %714 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 28
  %715 = bitcast i32* %714 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %715, align 4
  %716 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 32
  %717 = bitcast i32* %716 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %717, align 4
  %718 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 36
  %719 = bitcast i32* %718 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %719, align 4
  %720 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 40
  %721 = bitcast i32* %720 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %721, align 4
  %722 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 44
  %723 = bitcast i32* %722 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %723, align 4
  %724 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 48
  %725 = bitcast i32* %724 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %725, align 4
  %726 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 52
  %727 = bitcast i32* %726 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %727, align 4
  %728 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 56
  %729 = bitcast i32* %728 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %729, align 4
  %730 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 60
  %731 = bitcast i32* %730 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %731, align 4
  %732 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 64
  %733 = bitcast i32* %732 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %733, align 4
  %734 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 68
  %735 = bitcast i32* %734 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %735, align 4
  %736 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 72
  %737 = bitcast i32* %736 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %737, align 4
  %738 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 76
  %739 = bitcast i32* %738 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %739, align 4
  %740 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 80
  %741 = bitcast i32* %740 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %741, align 4
  %742 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 84
  %743 = bitcast i32* %742 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %743, align 4
  %744 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 88
  %745 = bitcast i32* %744 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %745, align 4
  %746 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 92
  %747 = bitcast i32* %746 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %747, align 4
  %748 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 96
  %749 = bitcast i32* %748 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %749, align 4
  %750 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 100
  %751 = bitcast i32* %750 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %751, align 4
  %752 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 104
  %753 = bitcast i32* %752 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %753, align 4
  %754 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 108
  %755 = bitcast i32* %754 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %755, align 4
  %756 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 112
  %757 = bitcast i32* %756 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %757, align 4
  %758 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 116
  %759 = bitcast i32* %758 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %759, align 4
  %760 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 120
  %761 = bitcast i32* %760 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %761, align 4
  %762 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 124
  %763 = bitcast i32* %762 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %763, align 4
  %764 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 128
  %765 = bitcast i32* %764 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %765, align 4
  %766 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 132
  %767 = bitcast i32* %766 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %767, align 4
  %768 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 136
  %769 = bitcast i32* %768 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %769, align 4
  %770 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 140
  %771 = bitcast i32* %770 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %771, align 4
  %772 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 144
  %773 = bitcast i32* %772 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %773, align 4
  %774 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 148
  %775 = bitcast i32* %774 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %775, align 4
  %776 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 152
  %777 = bitcast i32* %776 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %777, align 4
  %778 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 156
  %779 = bitcast i32* %778 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %779, align 4
  %780 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 160
  %781 = bitcast i32* %780 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %781, align 4
  %782 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 164
  %783 = bitcast i32* %782 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %783, align 4
  %784 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 168
  %785 = bitcast i32* %784 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %785, align 4
  %786 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 172
  %787 = bitcast i32* %786 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %787, align 4
  %788 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 176
  %789 = bitcast i32* %788 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %789, align 4
  %790 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 180
  %791 = bitcast i32* %790 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %791, align 4
  %792 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 184
  %793 = bitcast i32* %792 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %793, align 4
  %794 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 188
  %795 = bitcast i32* %794 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %795, align 4
  %796 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 192
  %797 = bitcast i32* %796 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %797, align 4
  %798 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 196
  %799 = bitcast i32* %798 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %799, align 4
  %800 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 200
  %801 = bitcast i32* %800 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %801, align 4
  %802 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 204
  %803 = bitcast i32* %802 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %803, align 4
  %804 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 208
  %805 = bitcast i32* %804 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %805, align 4
  %806 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 212
  %807 = bitcast i32* %806 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %807, align 4
  %808 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 216
  %809 = bitcast i32* %808 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %809, align 4
  %810 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 220
  %811 = bitcast i32* %810 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %811, align 4
  %812 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 224
  %813 = bitcast i32* %812 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %813, align 4
  %814 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 228
  %815 = bitcast i32* %814 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %815, align 4
  %816 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 232
  %817 = bitcast i32* %816 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %817, align 4
  %818 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 236
  %819 = bitcast i32* %818 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %819, align 4
  %820 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 240
  %821 = bitcast i32* %820 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %821, align 4
  %822 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 244
  %823 = bitcast i32* %822 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %823, align 4
  %824 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 248
  %825 = bitcast i32* %824 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %825, align 4
  %826 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 0, i32 4, i64 252
  %827 = bitcast i32* %826 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %827, align 4
  %828 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 46, i64 0
  %829 = bitcast i32* %828 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %829, align 4
  %830 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 46, i64 4
  %831 = bitcast i32* %830 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %831, align 4
  %832 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 46, i64 8
  %833 = bitcast i32* %832 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %833, align 4
  %834 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 46, i64 12
  %835 = bitcast i32* %834 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, <4 x i32>* %835, align 4
  %836 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 2
  store i32 0, i32* %836, align 8
  %837 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 3
  store i32 0, i32* %837, align 4
  %838 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 8
  store i32 0, i32* %838, align 8
  %839 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 13
  %840 = load i32, i32* %839, align 8
  %841 = shl nsw i32 -1, %840
  %842 = xor i32 %841, -1
  %843 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 15
  store i32 %842, i32* %843, align 8
  %844 = load i32, i32* %40, align 4
  %845 = shl nsw i32 -1, %844
  %846 = xor i32 %845, -1
  %847 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 14
  store i32 %846, i32* %847, align 4
  ret void

848:                                              ; preds = %54, %848
  %849 = phi i64 [ %851, %848 ], [ %55, %54 ]
  %850 = getelementptr inbounds i32, i32* %46, i64 %849
  store i32 1024, i32* %850, align 4
  %851 = add nuw nsw i64 %849, 1
  %852 = icmp ult i64 %851, %50
  br i1 %852, label %848, label %125, !llvm.loop !6
}

; Function Attrs: nounwind ssp uwtable
define hidden void @LzmaEnc_InitPrices(%struct.CLzmaEnc* nocapture) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 18
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %68

5:                                                ; preds = %1
  tail call fastcc void @FillDistancesPrices(%struct.CLzmaEnc* %0)
  %6 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 46, i64 1
  br label %7

7:                                                ; preds = %7, %5
  %8 = phi i64 [ 0, %5 ], [ %64, %7 ]
  %9 = trunc i64 %8 to i32
  %10 = and i32 %9, 1
  %11 = lshr i32 %9, 1
  %12 = load i32, i32* %6, align 4
  %13 = sub nsw i32 0, %10
  %14 = and i32 %13, 2032
  %15 = xor i32 %14, %12
  %16 = lshr i32 %15, 4
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %17
  %19 = load i32, i32* %18, align 4
  %20 = or i32 %10, 2
  %21 = and i32 %11, 1
  %22 = lshr i32 %9, 2
  %23 = zext i32 %20 to i64
  %24 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 46, i64 %23
  %25 = load i32, i32* %24, align 4
  %26 = sub nsw i32 0, %21
  %27 = and i32 %26, 2032
  %28 = xor i32 %27, %25
  %29 = lshr i32 %28, 4
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %30
  %32 = load i32, i32* %31, align 4
  %33 = add i32 %32, %19
  %34 = shl nuw nsw i32 %20, 1
  %35 = or i32 %34, %21
  %36 = and i32 %22, 1
  %37 = lshr i32 %9, 3
  %38 = zext i32 %35 to i64
  %39 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 46, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = sub nsw i32 0, %36
  %42 = and i32 %41, 2032
  %43 = xor i32 %40, %42
  %44 = lshr i32 %43, 4
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %45
  %47 = load i32, i32* %46, align 4
  %48 = add i32 %33, %47
  %49 = shl nuw nsw i32 %35, 1
  %50 = or i32 %49, %36
  %51 = and i32 %37, 1
  %52 = zext i32 %50 to i64
  %53 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 46, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = sub nsw i32 0, %51
  %56 = and i32 %55, 2032
  %57 = xor i32 %54, %56
  %58 = lshr i32 %57, 4
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %59
  %61 = load i32, i32* %60, align 4
  %62 = add i32 %48, %61
  %63 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 37, i64 %8
  store i32 %62, i32* %63, align 4
  %64 = add nuw nsw i64 %8, 1
  %65 = icmp eq i64 %64, 16
  br i1 %65, label %66, label %7

66:                                               ; preds = %7
  %67 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 25
  store i32 0, i32* %67, align 4
  br label %68

68:                                               ; preds = %1, %66
  %69 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 7
  %70 = load i32, i32* %69, align 4
  %71 = add i32 %70, -1
  %72 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 1
  store i32 %71, i32* %72, align 8
  %73 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47
  %74 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 1
  store i32 %71, i32* %74, align 4
  %75 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 13
  %76 = load i32, i32* %75, align 8
  %77 = shl i32 1, %76
  %78 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 0
  br label %79

79:                                               ; preds = %79, %68
  %80 = phi i32 [ %81, %79 ], [ 0, %68 ]
  tail call fastcc void @LenPriceEnc_UpdateTable(%struct.CLenPriceEnc* %73, i32 %80, i32* %78) #6
  %81 = add nuw i32 %80, 1
  %82 = icmp eq i32 %81, %77
  br i1 %82, label %83, label %79

83:                                               ; preds = %79
  %84 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48
  %85 = load i32, i32* %75, align 8
  %86 = shl i32 1, %85
  br label %87

87:                                               ; preds = %87, %83
  %88 = phi i32 [ %89, %87 ], [ 0, %83 ]
  tail call fastcc void @LenPriceEnc_UpdateTable(%struct.CLenPriceEnc* %84, i32 %88, i32* %78) #6
  %89 = add nuw i32 %88, 1
  %90 = icmp eq i32 %89, %86
  br i1 %90, label %91, label %87

91:                                               ; preds = %87
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @FillDistancesPrices(%struct.CLzmaEnc* nocapture) unnamed_addr #3 {
  %2 = alloca [128 x i32], align 16
  %3 = bitcast [128 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %3) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3, i8 -86, i64 512, i1 false)
  br label %15

4:                                                ; preds = %95
  %5 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 26
  %6 = load i32, i32* %5, align 8
  %7 = zext i32 %6 to i64
  %8 = icmp ugt i32 %6, 14
  %9 = zext i32 %6 to i64
  %10 = add nsw i64 %9, -14
  %11 = icmp ult i64 %10, 8
  %12 = and i64 %10, -8
  %13 = add nsw i64 %12, 14
  %14 = icmp eq i64 %10, %12
  br label %100

15:                                               ; preds = %95, %1
  %16 = phi i64 [ 4, %1 ], [ %98, %95 ]
  %17 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 32, i64 %16
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = lshr i32 %19, 1
  %21 = add nsw i32 %20, -1
  %22 = and i32 %19, 1
  %23 = or i32 %22, 2
  %24 = shl i32 %23, %21
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 %25
  %27 = zext i8 %18 to i64
  %28 = sub nsw i64 0, %27
  %29 = getelementptr inbounds i32, i32* %26, i64 -1
  %30 = getelementptr inbounds i32, i32* %29, i64 %28
  %31 = icmp eq i32 %21, 0
  br i1 %31, label %95, label %32

32:                                               ; preds = %15
  %33 = trunc i64 %16 to i32
  %34 = sub i32 %33, %24
  %35 = and i32 %21, 1
  %36 = icmp eq i32 %20, 2
  br i1 %36, label %76, label %37

37:                                               ; preds = %32
  %38 = sub nsw i32 %21, %35
  br label %39

39:                                               ; preds = %39, %37
  %40 = phi i32 [ %34, %37 ], [ %60, %39 ]
  %41 = phi i32 [ 1, %37 ], [ %73, %39 ]
  %42 = phi i32 [ 0, %37 ], [ %71, %39 ]
  %43 = phi i32 [ %38, %37 ], [ %74, %39 ]
  %44 = and i32 %40, 1
  %45 = lshr i32 %40, 1
  %46 = zext i32 %41 to i64
  %47 = getelementptr inbounds i32, i32* %30, i64 %46
  %48 = load i32, i32* %47, align 4
  %49 = sub nsw i32 0, %44
  %50 = and i32 %49, 2032
  %51 = xor i32 %48, %50
  %52 = lshr i32 %51, 4
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %53
  %55 = load i32, i32* %54, align 4
  %56 = add i32 %55, %42
  %57 = shl i32 %41, 1
  %58 = or i32 %57, %44
  %59 = and i32 %45, 1
  %60 = lshr i32 %40, 2
  %61 = zext i32 %58 to i64
  %62 = getelementptr inbounds i32, i32* %30, i64 %61
  %63 = load i32, i32* %62, align 4
  %64 = sub nsw i32 0, %59
  %65 = and i32 %64, 2032
  %66 = xor i32 %63, %65
  %67 = lshr i32 %66, 4
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = add i32 %70, %56
  %72 = shl i32 %58, 1
  %73 = or i32 %72, %59
  %74 = add i32 %43, -2
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %39

76:                                               ; preds = %39, %32
  %77 = phi i32 [ undef, %32 ], [ %71, %39 ]
  %78 = phi i32 [ %34, %32 ], [ %60, %39 ]
  %79 = phi i32 [ 1, %32 ], [ %73, %39 ]
  %80 = phi i32 [ 0, %32 ], [ %71, %39 ]
  %81 = icmp eq i32 %35, 0
  br i1 %81, label %95, label %82

82:                                               ; preds = %76
  %83 = zext i32 %79 to i64
  %84 = getelementptr inbounds i32, i32* %30, i64 %83
  %85 = load i32, i32* %84, align 4
  %86 = and i32 %78, 1
  %87 = sub nsw i32 0, %86
  %88 = and i32 %87, 2032
  %89 = xor i32 %85, %88
  %90 = lshr i32 %89, 4
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %91
  %93 = load i32, i32* %92, align 4
  %94 = add i32 %93, %80
  br label %95

95:                                               ; preds = %82, %76, %15
  %96 = phi i32 [ 0, %15 ], [ %77, %76 ], [ %94, %82 ]
  %97 = getelementptr inbounds [128 x i32], [128 x i32]* %2, i64 0, i64 %16
  store i32 %96, i32* %97, align 4
  %98 = add nuw nsw i64 %16, 1
  %99 = icmp eq i64 %98, 128
  br i1 %99, label %4, label %15

100:                                              ; preds = %199, %4
  %101 = phi i32 [ %6, %4 ], [ %170, %199 ]
  %102 = phi i64 [ 0, %4 ], [ %200, %199 ]
  %103 = icmp eq i32 %101, 0
  br i1 %103, label %169, label %133

104:                                              ; preds = %154
  br i1 %8, label %105, label %169

105:                                              ; preds = %104
  br i1 %11, label %106, label %108

106:                                              ; preds = %132, %105
  %107 = phi i64 [ 14, %105 ], [ %13, %132 ]
  br label %158

108:                                              ; preds = %105, %108
  %109 = phi i64 [ %129, %108 ], [ 0, %105 ]
  %110 = phi <4 x i32> [ %130, %108 ], [ <i32 14, i32 15, i32 16, i32 17>, %105 ]
  %111 = add i64 %109, 14
  %112 = add <4 x i32> %110, <i32 4, i32 4, i32 4, i32 4>
  %113 = lshr <4 x i32> %110, <i32 1, i32 1, i32 1, i32 1>
  %114 = lshr <4 x i32> %112, <i32 1, i32 1, i32 1, i32 1>
  %115 = shl <4 x i32> %113, <i32 4, i32 4, i32 4, i32 4>
  %116 = shl <4 x i32> %114, <i32 4, i32 4, i32 4, i32 4>
  %117 = add <4 x i32> %115, <i32 -80, i32 -80, i32 -80, i32 -80>
  %118 = add <4 x i32> %116, <i32 -80, i32 -80, i32 -80, i32 -80>
  %119 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 35, i64 %102, i64 %111
  %120 = bitcast i32* %119 to <4 x i32>*
  %121 = load <4 x i32>, <4 x i32>* %120, align 4
  %122 = getelementptr inbounds i32, i32* %119, i64 4
  %123 = bitcast i32* %122 to <4 x i32>*
  %124 = load <4 x i32>, <4 x i32>* %123, align 4
  %125 = add <4 x i32> %117, %121
  %126 = add <4 x i32> %118, %124
  %127 = bitcast i32* %119 to <4 x i32>*
  store <4 x i32> %125, <4 x i32>* %127, align 4
  %128 = bitcast i32* %122 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %128, align 4
  %129 = add i64 %109, 8
  %130 = add <4 x i32> %110, <i32 8, i32 8, i32 8, i32 8>
  %131 = icmp eq i64 %129, %12
  br i1 %131, label %132, label %108, !llvm.loop !8

132:                                              ; preds = %108
  br i1 %14, label %169, label %106

133:                                              ; preds = %100, %154
  %134 = phi i64 [ %156, %154 ], [ 0, %100 ]
  %135 = trunc i64 %134 to i32
  %136 = or i32 %135, 64
  br label %137

137:                                              ; preds = %137, %133
  %138 = phi i32 [ %152, %137 ], [ 0, %133 ]
  %139 = phi i32 [ %140, %137 ], [ %136, %133 ]
  %140 = lshr i32 %139, 1
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 %102, i64 %141
  %143 = load i32, i32* %142, align 4
  %144 = and i32 %139, 1
  %145 = sub nsw i32 0, %144
  %146 = and i32 %145, 2032
  %147 = xor i32 %146, %143
  %148 = lshr i32 %147, 4
  %149 = zext i32 %148 to i64
  %150 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %149
  %151 = load i32, i32* %150, align 4
  %152 = add i32 %151, %138
  %153 = icmp eq i32 %140, 1
  br i1 %153, label %154, label %137

154:                                              ; preds = %137
  %155 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 35, i64 %102, i64 %134
  store i32 %152, i32* %155, align 4
  %156 = add nuw nsw i64 %134, 1
  %157 = icmp ult i64 %156, %7
  br i1 %157, label %133, label %104

158:                                              ; preds = %106, %158
  %159 = phi i64 [ %167, %158 ], [ %107, %106 ]
  %160 = trunc i64 %159 to i32
  %161 = lshr i32 %160, 1
  %162 = shl i32 %161, 4
  %163 = add i32 %162, -80
  %164 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 35, i64 %102, i64 %159
  %165 = load i32, i32* %164, align 4
  %166 = add i32 %163, %165
  store i32 %166, i32* %164, align 4
  %167 = add nuw nsw i64 %159, 1
  %168 = icmp eq i64 %167, %9
  br i1 %168, label %169, label %158, !llvm.loop !9

169:                                              ; preds = %158, %132, %100, %104
  %170 = phi i32 [ %6, %104 ], [ 0, %100 ], [ %6, %132 ], [ %6, %158 ]
  %171 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 35, i64 %102, i64 0
  %172 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 36, i64 %102, i64 0
  %173 = bitcast i32* %171 to <4 x i32>*
  %174 = load <4 x i32>, <4 x i32>* %173, align 4
  %175 = bitcast i32* %172 to <4 x i32>*
  store <4 x i32> %174, <4 x i32>* %175, align 4
  br label %176

176:                                              ; preds = %176, %169
  %177 = phi i64 [ 4, %169 ], [ %197, %176 ]
  %178 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 32, i64 %177
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i64
  %181 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 35, i64 %102, i64 %180
  %182 = load i32, i32* %181, align 4
  %183 = getelementptr inbounds [128 x i32], [128 x i32]* %2, i64 0, i64 %177
  %184 = load i32, i32* %183, align 8
  %185 = add i32 %184, %182
  %186 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 36, i64 %102, i64 %177
  store i32 %185, i32* %186, align 4
  %187 = or i64 %177, 1
  %188 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 32, i64 %187
  %189 = load i8, i8* %188, align 1
  %190 = zext i8 %189 to i64
  %191 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 35, i64 %102, i64 %190
  %192 = load i32, i32* %191, align 4
  %193 = getelementptr inbounds [128 x i32], [128 x i32]* %2, i64 0, i64 %187
  %194 = load i32, i32* %193, align 4
  %195 = add i32 %194, %192
  %196 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 36, i64 %102, i64 %187
  store i32 %195, i32* %196, align 4
  %197 = add nuw nsw i64 %177, 2
  %198 = icmp eq i64 %197, 128
  br i1 %198, label %199, label %176

199:                                              ; preds = %176
  %200 = add nuw nsw i64 %102, 1
  %201 = icmp eq i64 %200, 4
  br i1 %201, label %202, label %100

202:                                              ; preds = %199
  %203 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 24
  store i32 0, i32* %203, align 8
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %3) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @LzmaEnc_PrepareForLzma2(i8*, %struct.ISeqInStream*, i32, %struct.ISzAlloc*, %struct.ISzAlloc*) local_unnamed_addr #3 {
  %6 = bitcast i8* %0 to %struct.CLzmaEnc*
  %7 = getelementptr inbounds i8, i8* %0, i64 328
  %8 = bitcast i8* %7 to %struct.ISeqInStream**
  store %struct.ISeqInStream* %1, %struct.ISeqInStream** %8, align 8
  %9 = getelementptr inbounds i8, i8* %0, i64 144
  %10 = bitcast i8* %9 to i32*
  store i32 1, i32* %10, align 8
  %11 = tail call fastcc i32 @LzmaEnc_AllocAndInit(%struct.CLzmaEnc* %6, i32 %2, %struct.ISzAlloc* %3, %struct.ISzAlloc* %4)
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @LzmaEnc_AllocAndInit(%struct.CLzmaEnc*, i32, %struct.ISzAlloc*, %struct.ISzAlloc*) unnamed_addr #3 {
  %5 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 27
  %6 = load i32, i32* %5, align 4
  %7 = icmp ugt i32 %6, 1
  br i1 %7, label %8, label %10

8:                                                ; preds = %4
  %9 = icmp eq i32 %6, 2
  br i1 %9, label %10, label %93

10:                                               ; preds = %149, %8, %147, %145, %143, %141, %139, %137, %135, %133, %131, %129, %127, %125, %123, %121, %119, %117, %115, %113, %111, %109, %107, %105, %103, %101, %99, %97, %95, %93, %4
  %11 = phi i32 [ 0, %4 ], [ 2, %8 ], [ 4, %93 ], [ 6, %95 ], [ 8, %97 ], [ 10, %99 ], [ 12, %101 ], [ 14, %103 ], [ 16, %105 ], [ 18, %107 ], [ 20, %109 ], [ 22, %111 ], [ 24, %113 ], [ 26, %115 ], [ 28, %117 ], [ 30, %119 ], [ 32, %121 ], [ 34, %123 ], [ 36, %125 ], [ 38, %127 ], [ 40, %129 ], [ 42, %131 ], [ 44, %133 ], [ 46, %135 ], [ 48, %137 ], [ 50, %139 ], [ 52, %141 ], [ 54, %143 ], [ 56, %145 ], [ 58, %147 ], [ %151, %149 ]
  %12 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 26
  store i32 %11, i32* %12, align 8
  %13 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 20
  store i32 0, i32* %13, align 8
  %14 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 28
  store i32 0, i32* %14, align 8
  %15 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 6
  %16 = load i8*, i8** %15, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %18, label %27

18:                                               ; preds = %10
  %19 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %2, i64 0, i32 0
  %20 = load i8* (i8*, i64)*, i8* (i8*, i64)** %19, align 8
  %21 = bitcast %struct.ISzAlloc* %2 to i8*
  %22 = tail call i8* %20(i8* %21, i64 65536) #6
  store i8* %22, i8** %15, align 8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %91, label %24

24:                                               ; preds = %18
  %25 = getelementptr inbounds i8, i8* %22, i64 65536
  %26 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 5
  store i8* %25, i8** %26, align 8
  br label %27

27:                                               ; preds = %24, %10
  %28 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 11
  %29 = load i32, i32* %28, align 8
  %30 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 12
  %31 = load i32, i32* %30, align 4
  %32 = add i32 %31, %29
  %33 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 17
  %34 = load i32*, i32** %33, align 8
  %35 = icmp eq i32* %34, null
  %36 = bitcast i32* %34 to i8*
  br i1 %35, label %45, label %37

37:                                               ; preds = %27
  %38 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 49, i32 0
  %39 = load i32*, i32** %38, align 8
  %40 = icmp eq i32* %39, null
  br i1 %40, label %45, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 16
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, %32
  br i1 %44, label %73, label %45

45:                                               ; preds = %41, %37, %27
  %46 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %2, i64 0, i32 1
  %47 = load void (i8*, i8*)*, void (i8*, i8*)** %46, align 8
  %48 = bitcast %struct.ISzAlloc* %2 to i8*
  %49 = bitcast i32** %33 to i8**
  tail call void %47(i8* %48, i8* %36) #6
  %50 = load void (i8*, i8*)*, void (i8*, i8*)** %46, align 8
  %51 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 49, i32 0
  %52 = bitcast i32** %51 to i8**
  %53 = load i8*, i8** %52, align 8
  tail call void %50(i8* %48, i8* %53) #6
  store i32* null, i32** %33, align 8
  store i32* null, i32** %51, align 8
  %54 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %2, i64 0, i32 0
  %55 = load i8* (i8*, i64)*, i8* (i8*, i64)** %54, align 8
  %56 = shl i32 768, %32
  %57 = zext i32 %56 to i64
  %58 = shl nuw nsw i64 %57, 2
  %59 = tail call i8* %55(i8* %48, i64 %58) #6
  store i8* %59, i8** %49, align 8
  %60 = load i8* (i8*, i64)*, i8* (i8*, i64)** %54, align 8
  %61 = tail call i8* %60(i8* %48, i64 %58) #6
  store i8* %61, i8** %52, align 8
  %62 = load i32*, i32** %33, align 8
  %63 = icmp eq i32* %62, null
  %64 = icmp eq i8* %61, null
  %65 = or i1 %64, %63
  br i1 %65, label %66, label %71

66:                                               ; preds = %45
  %67 = bitcast i32* %62 to i8*
  %68 = load void (i8*, i8*)*, void (i8*, i8*)** %46, align 8
  tail call void %68(i8* %48, i8* %67) #6
  %69 = load void (i8*, i8*)*, void (i8*, i8*)** %46, align 8
  %70 = load i8*, i8** %52, align 8
  tail call void %69(i8* %48, i8* %70) #6
  store i32* null, i32** %33, align 8
  store i32* null, i32** %51, align 8
  br label %91

71:                                               ; preds = %45
  %72 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 16
  store i32 %32, i32* %72, align 4
  br label %73

73:                                               ; preds = %71, %41
  %74 = load i32, i32* %5, align 4
  %75 = icmp ugt i32 %74, 16777216
  %76 = zext i1 %75 to i8
  %77 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 30
  %78 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 30, i32 9
  store i8 %76, i8* %78, align 2
  %79 = add i32 %74, 4096
  %80 = icmp ult i32 %79, %1
  %81 = sub i32 %1, %74
  %82 = select i1 %80, i32 %81, i32 4096
  %83 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 7
  %84 = load i32, i32* %83, align 4
  %85 = tail call i32 @MatchFinder_Create(%struct._CMatchFinder* %77, i32 %74, i32 %82, i32 %84, i32 273, %struct.ISzAlloc* %3) #6
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %91, label %87

87:                                               ; preds = %73
  %88 = bitcast %struct.CLzmaEnc* %0 to %struct._CMatchFinder**
  store %struct._CMatchFinder* %77, %struct._CMatchFinder** %88, align 8
  %89 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 1
  tail call void @MatchFinder_CreateVTable(%struct._CMatchFinder* %77, %struct._IMatchFinder* %89) #6
  tail call void @LzmaEnc_Init(%struct.CLzmaEnc* %0)
  tail call void @LzmaEnc_InitPrices(%struct.CLzmaEnc* %0)
  %90 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 23
  store i64 0, i64* %90, align 8
  br label %91

91:                                               ; preds = %18, %73, %66, %87
  %92 = phi i32 [ 0, %87 ], [ 2, %66 ], [ 2, %73 ], [ 2, %18 ]
  ret i32 %92

93:                                               ; preds = %8
  %94 = icmp ugt i32 %6, 4
  br i1 %94, label %95, label %10

95:                                               ; preds = %93
  %96 = icmp ugt i32 %6, 8
  br i1 %96, label %97, label %10

97:                                               ; preds = %95
  %98 = icmp ugt i32 %6, 16
  br i1 %98, label %99, label %10

99:                                               ; preds = %97
  %100 = icmp ugt i32 %6, 32
  br i1 %100, label %101, label %10

101:                                              ; preds = %99
  %102 = icmp ugt i32 %6, 64
  br i1 %102, label %103, label %10

103:                                              ; preds = %101
  %104 = icmp ugt i32 %6, 128
  br i1 %104, label %105, label %10

105:                                              ; preds = %103
  %106 = icmp ugt i32 %6, 256
  br i1 %106, label %107, label %10

107:                                              ; preds = %105
  %108 = icmp ugt i32 %6, 512
  br i1 %108, label %109, label %10

109:                                              ; preds = %107
  %110 = icmp ugt i32 %6, 1024
  br i1 %110, label %111, label %10

111:                                              ; preds = %109
  %112 = icmp ugt i32 %6, 2048
  br i1 %112, label %113, label %10

113:                                              ; preds = %111
  %114 = icmp ugt i32 %6, 4096
  br i1 %114, label %115, label %10

115:                                              ; preds = %113
  %116 = icmp ugt i32 %6, 8192
  br i1 %116, label %117, label %10

117:                                              ; preds = %115
  %118 = icmp ugt i32 %6, 16384
  br i1 %118, label %119, label %10

119:                                              ; preds = %117
  %120 = icmp ugt i32 %6, 32768
  br i1 %120, label %121, label %10

121:                                              ; preds = %119
  %122 = icmp ugt i32 %6, 65536
  br i1 %122, label %123, label %10

123:                                              ; preds = %121
  %124 = icmp ugt i32 %6, 131072
  br i1 %124, label %125, label %10

125:                                              ; preds = %123
  %126 = icmp ugt i32 %6, 262144
  br i1 %126, label %127, label %10

127:                                              ; preds = %125
  %128 = icmp ugt i32 %6, 524288
  br i1 %128, label %129, label %10

129:                                              ; preds = %127
  %130 = icmp ugt i32 %6, 1048576
  br i1 %130, label %131, label %10

131:                                              ; preds = %129
  %132 = icmp ugt i32 %6, 2097152
  br i1 %132, label %133, label %10

133:                                              ; preds = %131
  %134 = icmp ugt i32 %6, 4194304
  br i1 %134, label %135, label %10

135:                                              ; preds = %133
  %136 = icmp ugt i32 %6, 8388608
  br i1 %136, label %137, label %10

137:                                              ; preds = %135
  %138 = icmp ugt i32 %6, 16777216
  br i1 %138, label %139, label %10

139:                                              ; preds = %137
  %140 = icmp ugt i32 %6, 33554432
  br i1 %140, label %141, label %10

141:                                              ; preds = %139
  %142 = icmp ugt i32 %6, 67108864
  br i1 %142, label %143, label %10

143:                                              ; preds = %141
  %144 = icmp ugt i32 %6, 134217728
  br i1 %144, label %145, label %10

145:                                              ; preds = %143
  %146 = icmp ugt i32 %6, 268435456
  br i1 %146, label %147, label %10

147:                                              ; preds = %145
  %148 = icmp ugt i32 %6, 536870912
  br i1 %148, label %149, label %10

149:                                              ; preds = %147
  %150 = icmp ugt i32 %6, 1073741824
  %151 = select i1 %150, i32 62, i32 60
  br label %10
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @LzmaEnc_MemPrepare(i8*, i8*, i64, i32, %struct.ISzAlloc*, %struct.ISzAlloc*) local_unnamed_addr #3 {
  %7 = bitcast i8* %0 to %struct.CLzmaEnc*
  %8 = getelementptr inbounds i8, i8* %0, i64 291
  store i8 1, i8* %8, align 1
  %9 = getelementptr inbounds i8, i8* %0, i64 320
  %10 = bitcast i8* %9 to i8**
  store i8* %1, i8** %10, align 8
  %11 = getelementptr inbounds i8, i8* %0, i64 352
  %12 = bitcast i8* %11 to i64*
  store i64 %2, i64* %12, align 8
  %13 = getelementptr inbounds i8, i8* %0, i64 144
  %14 = bitcast i8* %13 to i32*
  store i32 1, i32* %14, align 8
  %15 = tail call fastcc i32 @LzmaEnc_AllocAndInit(%struct.CLzmaEnc* %7, i32 %3, %struct.ISzAlloc* %4, %struct.ISzAlloc* %5)
  ret i32 %15
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @LzmaEnc_Finish(i8* nocapture) local_unnamed_addr #5 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @LzmaEnc_GetNumAvailableBytes(i8* nocapture readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i8, i8* %0, i64 16
  %3 = bitcast i8* %2 to i32 (i8*)**
  %4 = load i32 (i8*)*, i32 (i8*)** %3, align 8
  %5 = bitcast i8* %0 to i8**
  %6 = load i8*, i8** %5, align 8
  %7 = tail call i32 %4(i8* %6) #6
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @LzmaEnc_GetCurBuf(i8* nocapture readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i8, i8* %0, i64 24
  %3 = bitcast i8* %2 to i8* (i8*)**
  %4 = load i8* (i8*)*, i8* (i8*)** %3, align 8
  %5 = bitcast i8* %0 to i8**
  %6 = load i8*, i8** %5, align 8
  %7 = tail call i8* %4(i8* %6) #6
  %8 = getelementptr inbounds i8, i8* %0, i64 72
  %9 = bitcast i8* %8 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = zext i32 %10 to i64
  %12 = sub nsw i64 0, %11
  %13 = getelementptr inbounds i8, i8* %7, i64 %12
  ret i8* %13
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @LzmaEnc_CodeOneMemBlock(i8*, i32, i8*, i64* nocapture, i32, i32* nocapture) local_unnamed_addr #3 {
  %7 = alloca %struct.CSeqOutStreamBuf, align 8
  %8 = bitcast i8* %0 to %struct.CLzmaEnc*
  %9 = bitcast %struct.CSeqOutStreamBuf* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 32, i1 false)
  %10 = getelementptr inbounds %struct.CSeqOutStreamBuf, %struct.CSeqOutStreamBuf* %7, i64 0, i32 0
  %11 = getelementptr inbounds %struct.CSeqOutStreamBuf, %struct.CSeqOutStreamBuf* %7, i64 0, i32 0, i32 0
  store i64 (i8*, i8*, i64)* @MyWrite, i64 (i8*, i8*, i64)** %11, align 8
  %12 = getelementptr inbounds %struct.CSeqOutStreamBuf, %struct.CSeqOutStreamBuf* %7, i64 0, i32 1
  store i8* %2, i8** %12, align 8
  %13 = load i64, i64* %3, align 8
  %14 = getelementptr inbounds %struct.CSeqOutStreamBuf, %struct.CSeqOutStreamBuf* %7, i64 0, i32 2
  store i64 %13, i64* %14, align 8
  %15 = getelementptr inbounds %struct.CSeqOutStreamBuf, %struct.CSeqOutStreamBuf* %7, i64 0, i32 3
  store i32 0, i32* %15, align 8
  %16 = getelementptr inbounds i8, i8* %0, i64 132
  %17 = bitcast i8* %16 to i32*
  store i32 0, i32* %17, align 4
  %18 = getelementptr inbounds i8, i8* %0, i64 136
  %19 = bitcast i8* %18 to i32*
  store i32 0, i32* %19, align 8
  %20 = getelementptr inbounds i8, i8* %0, i64 176
  %21 = bitcast i8* %20 to i32*
  store i32 0, i32* %21, align 8
  %22 = icmp eq i32 %1, 0
  br i1 %22, label %24, label %23

23:                                               ; preds = %6
  tail call void @LzmaEnc_Init(%struct.CLzmaEnc* %8)
  br label %24

24:                                               ; preds = %6, %23
  tail call void @LzmaEnc_InitPrices(%struct.CLzmaEnc* %8)
  %25 = getelementptr inbounds i8, i8* %0, i64 152
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds i8, i8* %0, i64 184
  %29 = getelementptr inbounds i8, i8* %0, i64 192
  %30 = bitcast i8* %28 to i32*
  store i32 -1, i32* %30, align 8
  %31 = bitcast i8* %29 to <2 x i64>*
  store <2 x i64> <i64 0, i64 1>, <2 x i64>* %31, align 8
  %32 = getelementptr inbounds i8, i8* %0, i64 188
  store i8 0, i8* %32, align 4
  %33 = getelementptr inbounds i8, i8* %0, i64 224
  %34 = bitcast i8* %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds i8, i8* %0, i64 208
  %37 = bitcast i8* %36 to i64*
  store i64 %35, i64* %37, align 8
  %38 = getelementptr inbounds i8, i8* %0, i64 240
  %39 = bitcast i8* %38 to i64*
  store i64 0, i64* %39, align 8
  %40 = getelementptr inbounds i8, i8* %0, i64 248
  %41 = bitcast i8* %40 to i32*
  store i32 0, i32* %41, align 8
  %42 = getelementptr inbounds i8, i8* %0, i64 232
  %43 = bitcast i8* %42 to %struct.ISeqOutStream**
  store %struct.ISeqOutStream* %10, %struct.ISeqOutStream** %43, align 8
  %44 = load i32, i32* %5, align 4
  %45 = call fastcc i32 @LzmaEnc_CodeOneBlock(%struct.CLzmaEnc* %8, i32 1, i32 %4, i32 %44)
  %46 = load i64, i64* %26, align 8
  %47 = sub i64 %46, %27
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %5, align 4
  %49 = load i64, i64* %14, align 8
  %50 = load i64, i64* %3, align 8
  %51 = sub i64 %50, %49
  store i64 %51, i64* %3, align 8
  %52 = load i32, i32* %15, align 8
  %53 = icmp eq i32 %52, 0
  %54 = select i1 %53, i32 %45, i32 7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #6
  ret i32 %54
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @MyWrite(i8* nocapture, i8* nocapture readonly, i64) #3 {
  %4 = getelementptr inbounds i8, i8* %0, i64 16
  %5 = bitcast i8* %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = icmp ult i64 %6, %2
  br i1 %7, label %8, label %11

8:                                                ; preds = %3
  %9 = getelementptr inbounds i8, i8* %0, i64 24
  %10 = bitcast i8* %9 to i32*
  store i32 1, i32* %10, align 8
  br label %11

11:                                               ; preds = %8, %3
  %12 = phi i64 [ %6, %8 ], [ %2, %3 ]
  %13 = getelementptr inbounds i8, i8* %0, i64 8
  %14 = bitcast i8* %13 to i8**
  %15 = load i8*, i8** %14, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 %1, i64 %12, i1 false)
  %16 = load i64, i64* %5, align 8
  %17 = sub i64 %16, %12
  store i64 %17, i64* %5, align 8
  %18 = load i8*, i8** %14, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 %12
  store i8* %19, i8** %14, align 8
  ret i64 %12
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @LzmaEnc_CodeOneBlock(%struct.CLzmaEnc*, i32, i32, i32) unnamed_addr #3 {
  %5 = alloca <4 x i32>, align 16
  %6 = alloca [4 x i32], align 16
  %7 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 22
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %15, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 1, i32 0
  %12 = load void (i8*)*, void (i8*)** %11, align 8
  %13 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  tail call void %12(i8* %14) #6
  store i32 0, i32* %7, align 8
  br label %15

15:                                               ; preds = %4, %10
  %16 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 20
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 28
  %19 = load i32, i32* %18, align 8
  %20 = or i32 %19, %17
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %4779

22:                                               ; preds = %15
  %23 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 9
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %27, label %26

26:                                               ; preds = %22
  store i32 9, i32* %18, align 8
  br label %27

27:                                               ; preds = %26, %22
  %28 = phi i32 [ 0, %22 ], [ 9, %26 ]
  %29 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 30, i32 26
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %33, label %32

32:                                               ; preds = %27
  store i32 8, i32* %18, align 8
  br label %35

33:                                               ; preds = %27
  %34 = icmp eq i32 %28, 0
  br i1 %34, label %37, label %35

35:                                               ; preds = %33, %32
  %36 = phi i32 [ 8, %32 ], [ %28, %33 ]
  store i32 1, i32* %16, align 8
  br label %4779

37:                                               ; preds = %33
  %38 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 23
  %39 = load i64, i64* %38, align 8
  %40 = trunc i64 %39 to i32
  %41 = icmp eq i64 %39, 0
  br i1 %41, label %42, label %347

42:                                               ; preds = %37
  %43 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 1, i32 1
  %44 = load i32 (i8*)*, i32 (i8*)** %43, align 8
  %45 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = tail call i32 %44(i8* %46) #6
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %345, label %49

49:                                               ; preds = %42
  %50 = load i32 (i8*)*, i32 (i8*)** %43, align 8
  %51 = load i8*, i8** %45, align 8
  %52 = tail call i32 %50(i8* %51) #6
  %53 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 6
  store i32 %52, i32* %53, align 8
  %54 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 1, i32 3
  %55 = load i32 (i8*, i32*)*, i32 (i8*, i32*)** %54, align 8
  %56 = load i8*, i8** %45, align 8
  %57 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 0
  %58 = tail call i32 %55(i8* %56, i32* %57) #6
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %73, label %60

60:                                               ; preds = %49
  %61 = add i32 %58, -2
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 %62
  %64 = load i32, i32* %63, align 4
  %65 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 7
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %64, %66
  br i1 %67, label %68, label %73

68:                                               ; preds = %60
  %69 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 1, i32 2
  %70 = load i8* (i8*)*, i8* (i8*)** %69, align 8
  %71 = load i8*, i8** %45, align 8
  %72 = tail call i8* %70(i8* %71) #6
  br label %73

73:                                               ; preds = %68, %49, %60
  %74 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 8
  %75 = load i32, i32* %74, align 8
  %76 = add i32 %75, 1
  store i32 %76, i32* %74, align 8
  %77 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 10
  %78 = load i32, i32* %77, align 4
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 38, i64 %79, i64 0
  %81 = load i32, i32* %80, align 4
  %82 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 0
  %83 = load i32, i32* %82, align 8
  %84 = lshr i32 %83, 11
  %85 = mul i32 %84, %81
  store i32 %85, i32* %82, align 8
  %86 = sub i32 2048, %81
  %87 = lshr i32 %86, 5
  %88 = add i32 %87, %81
  store i32 %88, i32* %80, align 4
  %89 = icmp ult i32 %85, 16777216
  br i1 %89, label %90, label %195

90:                                               ; preds = %73
  %91 = shl i32 %85, 8
  store i32 %91, i32* %82, align 8
  %92 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 2
  %93 = load i64, i64* %92, align 8
  %94 = trunc i64 %93 to i32
  %95 = icmp ult i32 %94, -16777216
  %96 = icmp ugt i64 %93, 4294967295
  %97 = or i1 %96, %95
  br i1 %97, label %102, label %98

98:                                               ; preds = %90
  %99 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 3
  %100 = load i64, i64* %99, align 8
  %101 = add i64 %100, 1
  br label %188

102:                                              ; preds = %90
  %103 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 1
  %104 = load i8, i8* %103, align 4
  %105 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 4
  %106 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 5
  %107 = bitcast i8** %105 to i64*
  %108 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 6
  %109 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 7
  %110 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 8
  %111 = bitcast i8** %108 to i64*
  %112 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 3
  %113 = load i8*, i8** %105, align 8
  %114 = lshr i64 %93, 32
  %115 = trunc i64 %114 to i8
  %116 = add i8 %104, %115
  %117 = getelementptr inbounds i8, i8* %113, i64 1
  store i8 %116, i8* %113, align 1
  store i8* %117, i8** %105, align 8
  %118 = load i8*, i8** %106, align 8
  %119 = icmp eq i8* %117, %118
  %120 = ptrtoint i8* %117 to i64
  br i1 %119, label %121, label %140

121:                                              ; preds = %102
  %122 = load i32, i32* %23, align 8
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %140

124:                                              ; preds = %121
  %125 = load i8*, i8** %108, align 8
  %126 = ptrtoint i8* %125 to i64
  %127 = sub i64 %120, %126
  %128 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %109, align 8
  %129 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %128, i64 0, i32 0
  %130 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %129, align 8
  %131 = bitcast %struct.ISeqOutStream* %128 to i8*
  %132 = tail call i64 %130(i8* %131, i8* %125, i64 %127) #6
  %133 = icmp eq i64 %127, %132
  br i1 %133, label %135, label %134

134:                                              ; preds = %124
  store i32 9, i32* %23, align 8
  br label %135

135:                                              ; preds = %134, %124
  %136 = load i64, i64* %110, align 8
  %137 = add i64 %136, %127
  store i64 %137, i64* %110, align 8
  %138 = load i64, i64* %111, align 8
  store i64 %138, i64* %107, align 8
  %139 = inttoptr i64 %138 to i8*
  br label %140

140:                                              ; preds = %135, %121, %102
  %141 = phi i8* [ %139, %135 ], [ %117, %121 ], [ %117, %102 ]
  %142 = load i64, i64* %112, align 8
  %143 = add i64 %142, -1
  store i64 %143, i64* %112, align 8
  %144 = icmp eq i64 %143, 0
  %145 = load i64, i64* %92, align 8
  br i1 %144, label %181, label %146

146:                                              ; preds = %140, %175
  %147 = phi i64 [ %180, %175 ], [ %145, %140 ]
  %148 = phi i8* [ %176, %175 ], [ %141, %140 ]
  %149 = lshr i64 %147, 32
  %150 = trunc i64 %149 to i8
  %151 = add i8 %150, -1
  %152 = getelementptr inbounds i8, i8* %148, i64 1
  store i8 %151, i8* %148, align 1
  store i8* %152, i8** %105, align 8
  %153 = load i8*, i8** %106, align 8
  %154 = icmp eq i8* %152, %153
  %155 = ptrtoint i8* %152 to i64
  br i1 %154, label %156, label %175

156:                                              ; preds = %146
  %157 = load i32, i32* %23, align 8
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %159, label %175

159:                                              ; preds = %156
  %160 = load i8*, i8** %108, align 8
  %161 = ptrtoint i8* %160 to i64
  %162 = sub i64 %155, %161
  %163 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %109, align 8
  %164 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %163, i64 0, i32 0
  %165 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %164, align 8
  %166 = bitcast %struct.ISeqOutStream* %163 to i8*
  %167 = tail call i64 %165(i8* %166, i8* %160, i64 %162) #6
  %168 = icmp eq i64 %162, %167
  br i1 %168, label %170, label %169

169:                                              ; preds = %159
  store i32 9, i32* %23, align 8
  br label %170

170:                                              ; preds = %169, %159
  %171 = load i64, i64* %110, align 8
  %172 = add i64 %171, %162
  store i64 %172, i64* %110, align 8
  %173 = load i64, i64* %111, align 8
  store i64 %173, i64* %107, align 8
  %174 = inttoptr i64 %173 to i8*
  br label %175

175:                                              ; preds = %170, %156, %146
  %176 = phi i8* [ %174, %170 ], [ %152, %156 ], [ %152, %146 ]
  %177 = load i64, i64* %112, align 8
  %178 = add i64 %177, -1
  store i64 %178, i64* %112, align 8
  %179 = icmp eq i64 %178, 0
  %180 = load i64, i64* %92, align 8
  br i1 %179, label %181, label %146, !llvm.loop !10

181:                                              ; preds = %175, %140
  %182 = phi i64 [ %145, %140 ], [ %180, %175 ]
  %183 = trunc i64 %182 to i32
  %184 = lshr i32 %183, 24
  %185 = trunc i32 %184 to i8
  store i8 %185, i8* %103, align 4
  %186 = load i32, i32* %77, align 4
  %187 = zext i32 %186 to i64
  br label %188

188:                                              ; preds = %98, %181
  %189 = phi i64 [ %79, %98 ], [ %187, %181 ]
  %190 = phi i64 [ %93, %98 ], [ %182, %181 ]
  %191 = phi i64 [ %101, %98 ], [ 1, %181 ]
  %192 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 3
  store i64 %191, i64* %192, align 8
  %193 = shl i64 %190, 8
  %194 = and i64 %193, 4294967040
  store i64 %194, i64* %92, align 8
  br label %195

195:                                              ; preds = %73, %188
  %196 = phi i64 [ %79, %73 ], [ %189, %188 ]
  %197 = getelementptr inbounds [12 x i32], [12 x i32]* @kLiteralNextStates, i64 0, i64 %196
  %198 = load i32, i32* %197, align 4
  store i32 %198, i32* %77, align 4
  %199 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 1, i32 2
  %200 = load i8* (i8*)*, i8* (i8*)** %199, align 8
  %201 = load i8*, i8** %45, align 8
  %202 = tail call i8* %200(i8* %201) #6
  %203 = load i32, i32* %74, align 8
  %204 = zext i32 %203 to i64
  %205 = sub nsw i64 0, %204
  %206 = getelementptr inbounds i8, i8* %202, i64 %205
  %207 = load i8, i8* %206, align 1
  %208 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 17
  %209 = load i32*, i32** %208, align 8
  %210 = zext i8 %207 to i32
  %211 = or i32 %210, 256
  %212 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 2
  %213 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 3
  %214 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 1
  %215 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 4
  %216 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 5
  %217 = bitcast i8** %215 to i64*
  %218 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 6
  %219 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 7
  %220 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 8
  %221 = bitcast i8** %218 to i64*
  br label %222

222:                                              ; preds = %338, %195
  %223 = phi i32 [ %211, %195 ], [ %339, %338 ]
  %224 = lshr i32 %223, 8
  %225 = zext i32 %224 to i64
  %226 = getelementptr inbounds i32, i32* %209, i64 %225
  %227 = load i32, i32* %226, align 4
  %228 = load i32, i32* %82, align 8
  %229 = lshr i32 %228, 11
  %230 = mul i32 %229, %227
  %231 = trunc i32 %223 to i8
  %232 = icmp sgt i8 %231, -1
  br i1 %232, label %233, label %237

233:                                              ; preds = %222
  store i32 %230, i32* %82, align 8
  %234 = sub i32 2048, %227
  %235 = lshr i32 %234, 5
  %236 = add i32 %235, %227
  br label %244

237:                                              ; preds = %222
  %238 = zext i32 %230 to i64
  %239 = load i64, i64* %212, align 8
  %240 = add i64 %239, %238
  store i64 %240, i64* %212, align 8
  %241 = sub i32 %228, %230
  store i32 %241, i32* %82, align 8
  %242 = lshr i32 %227, 5
  %243 = sub i32 %227, %242
  br label %244

244:                                              ; preds = %237, %233
  %245 = phi i32 [ %236, %233 ], [ %243, %237 ]
  store i32 %245, i32* %226, align 4
  %246 = load i32, i32* %82, align 8
  %247 = icmp ult i32 %246, 16777216
  br i1 %247, label %248, label %338

248:                                              ; preds = %244
  %249 = shl i32 %246, 8
  store i32 %249, i32* %82, align 8
  %250 = load i64, i64* %212, align 8
  %251 = trunc i64 %250 to i32
  %252 = icmp ult i32 %251, -16777216
  %253 = icmp ugt i64 %250, 4294967295
  %254 = or i1 %253, %252
  br i1 %254, label %258, label %255

255:                                              ; preds = %248
  %256 = load i64, i64* %213, align 8
  %257 = add i64 %256, 1
  br label %333

258:                                              ; preds = %248
  %259 = load i8, i8* %214, align 4
  %260 = load i8*, i8** %215, align 8
  %261 = lshr i64 %250, 32
  %262 = trunc i64 %261 to i8
  %263 = add i8 %259, %262
  %264 = getelementptr inbounds i8, i8* %260, i64 1
  store i8 %263, i8* %260, align 1
  store i8* %264, i8** %215, align 8
  %265 = load i8*, i8** %216, align 8
  %266 = icmp eq i8* %264, %265
  %267 = ptrtoint i8* %264 to i64
  br i1 %266, label %268, label %287

268:                                              ; preds = %258
  %269 = load i32, i32* %23, align 8
  %270 = icmp eq i32 %269, 0
  br i1 %270, label %271, label %287

271:                                              ; preds = %268
  %272 = load i8*, i8** %218, align 8
  %273 = ptrtoint i8* %272 to i64
  %274 = sub i64 %267, %273
  %275 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %219, align 8
  %276 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %275, i64 0, i32 0
  %277 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %276, align 8
  %278 = bitcast %struct.ISeqOutStream* %275 to i8*
  %279 = tail call i64 %277(i8* %278, i8* %272, i64 %274) #6
  %280 = icmp eq i64 %274, %279
  br i1 %280, label %282, label %281

281:                                              ; preds = %271
  store i32 9, i32* %23, align 8
  br label %282

282:                                              ; preds = %281, %271
  %283 = load i64, i64* %220, align 8
  %284 = add i64 %283, %274
  store i64 %284, i64* %220, align 8
  %285 = load i64, i64* %221, align 8
  store i64 %285, i64* %217, align 8
  %286 = inttoptr i64 %285 to i8*
  br label %287

287:                                              ; preds = %282, %268, %258
  %288 = phi i8* [ %286, %282 ], [ %264, %268 ], [ %264, %258 ]
  %289 = load i64, i64* %213, align 8
  %290 = add i64 %289, -1
  store i64 %290, i64* %213, align 8
  %291 = icmp eq i64 %290, 0
  %292 = load i64, i64* %212, align 8
  br i1 %291, label %328, label %293

293:                                              ; preds = %287, %322
  %294 = phi i64 [ %327, %322 ], [ %292, %287 ]
  %295 = phi i8* [ %323, %322 ], [ %288, %287 ]
  %296 = lshr i64 %294, 32
  %297 = trunc i64 %296 to i8
  %298 = add i8 %297, -1
  %299 = getelementptr inbounds i8, i8* %295, i64 1
  store i8 %298, i8* %295, align 1
  store i8* %299, i8** %215, align 8
  %300 = load i8*, i8** %216, align 8
  %301 = icmp eq i8* %299, %300
  %302 = ptrtoint i8* %299 to i64
  br i1 %301, label %303, label %322

303:                                              ; preds = %293
  %304 = load i32, i32* %23, align 8
  %305 = icmp eq i32 %304, 0
  br i1 %305, label %306, label %322

306:                                              ; preds = %303
  %307 = load i8*, i8** %218, align 8
  %308 = ptrtoint i8* %307 to i64
  %309 = sub i64 %302, %308
  %310 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %219, align 8
  %311 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %310, i64 0, i32 0
  %312 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %311, align 8
  %313 = bitcast %struct.ISeqOutStream* %310 to i8*
  %314 = tail call i64 %312(i8* %313, i8* %307, i64 %309) #6
  %315 = icmp eq i64 %309, %314
  br i1 %315, label %317, label %316

316:                                              ; preds = %306
  store i32 9, i32* %23, align 8
  br label %317

317:                                              ; preds = %316, %306
  %318 = load i64, i64* %220, align 8
  %319 = add i64 %318, %309
  store i64 %319, i64* %220, align 8
  %320 = load i64, i64* %221, align 8
  store i64 %320, i64* %217, align 8
  %321 = inttoptr i64 %320 to i8*
  br label %322

322:                                              ; preds = %317, %303, %293
  %323 = phi i8* [ %321, %317 ], [ %299, %303 ], [ %299, %293 ]
  %324 = load i64, i64* %213, align 8
  %325 = add i64 %324, -1
  store i64 %325, i64* %213, align 8
  %326 = icmp eq i64 %325, 0
  %327 = load i64, i64* %212, align 8
  br i1 %326, label %328, label %293, !llvm.loop !11

328:                                              ; preds = %322, %287
  %329 = phi i64 [ %292, %287 ], [ %327, %322 ]
  %330 = trunc i64 %329 to i32
  %331 = lshr i32 %330, 24
  %332 = trunc i32 %331 to i8
  store i8 %332, i8* %214, align 4
  br label %333

333:                                              ; preds = %255, %328
  %334 = phi i64 [ %250, %255 ], [ %329, %328 ]
  %335 = phi i64 [ %257, %255 ], [ 1, %328 ]
  store i64 %335, i64* %213, align 8
  %336 = shl i64 %334, 8
  %337 = and i64 %336, 4294967040
  store i64 %337, i64* %212, align 8
  br label %338

338:                                              ; preds = %333, %244
  %339 = shl i32 %223, 1
  %340 = icmp ult i32 %339, 65536
  br i1 %340, label %222, label %341

341:                                              ; preds = %338
  %342 = load i32, i32* %74, align 8
  %343 = add i32 %342, -1
  store i32 %343, i32* %74, align 8
  %344 = add i32 %40, 1
  br label %347

345:                                              ; preds = %42
  %346 = tail call fastcc i32 @Flush(%struct.CLzmaEnc* %0, i32 %40)
  br label %4779

347:                                              ; preds = %341, %37
  %348 = phi i32 [ %40, %37 ], [ %344, %341 ]
  %349 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 1, i32 1
  %350 = load i32 (i8*)*, i32 (i8*)** %349, align 8
  %351 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 0
  %352 = load i8*, i8** %351, align 8
  %353 = tail call i32 %350(i8* %352) #6
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %4772, label %355

355:                                              ; preds = %347
  %356 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 18
  %357 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 8
  %358 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 4
  %359 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 5
  %360 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 6
  %361 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 1, i32 3
  %362 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 0
  %363 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 7
  %364 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 1, i32 2
  %365 = getelementptr %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 9, i64 0
  %366 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 9, i64 1
  %367 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 9, i64 2
  %368 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 9, i64 3
  %369 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 1, i32 4
  %370 = bitcast <4 x i32>* %5 to i8*
  %371 = getelementptr inbounds <4 x i32>, <4 x i32>* %5, i64 0, i64 0
  %372 = getelementptr inbounds <4 x i32>, <4 x i32>* %5, i64 0, i64 1
  %373 = bitcast [4 x i32]* %6 to i8*
  %374 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 0
  %375 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %376 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 2
  %377 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %378 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 2
  %379 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 3
  %380 = bitcast i32* %365 to i8*
  %381 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 10
  %382 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 0, i32 1
  %383 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 15
  %384 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 17
  %385 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 14
  %386 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 11
  %387 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 1, i32 0
  %388 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 1, i32 7
  %389 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 1, i32 2
  %390 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 1, i32 6
  %391 = getelementptr %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 0, i32 8, i64 0
  %392 = bitcast i32* %391 to i8*
  %393 = bitcast i32* %372 to i8*
  %394 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 0, i32 7
  %395 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 0, i32 6
  %396 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29
  %397 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %396, i64 0, i32 0
  %398 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 2
  %399 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 3
  %400 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 1
  %401 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 4
  %402 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 5
  %403 = bitcast i8** %401 to i64*
  %404 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 6
  %405 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 7
  %406 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 8
  %407 = bitcast i8** %404 to i64*
  %408 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47
  %409 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 0
  %410 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 25
  %411 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 24
  %412 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48
  %413 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 46, i64 1
  %414 = icmp eq i32 %1, 0
  %415 = zext i32 %2 to i64
  br label %416

416:                                              ; preds = %355, %4769
  %417 = phi i32 [ %4653, %4769 ], [ %348, %355 ]
  %418 = phi i32 [ %4771, %4769 ], [ 0, %355 ]
  %419 = load i32, i32* %356, align 8
  %420 = icmp eq i32 %419, 0
  br i1 %420, label %928, label %421

421:                                              ; preds = %416
  %422 = load i32, i32* %357, align 8
  %423 = icmp eq i32 %422, 0
  br i1 %423, label %424, label %477

424:                                              ; preds = %421
  %425 = load i32 (i8*)*, i32 (i8*)** %349, align 8
  %426 = load i8*, i8** %351, align 8
  %427 = tail call i32 %425(i8* %426) #6
  store i32 %427, i32* %360, align 8
  %428 = load i32 (i8*, i32*)*, i32 (i8*, i32*)** %361, align 8
  %429 = load i8*, i8** %351, align 8
  %430 = tail call i32 %428(i8* %429, i32* %362) #6
  %431 = icmp eq i32 %430, 0
  br i1 %431, label %473, label %432

432:                                              ; preds = %424
  %433 = add i32 %430, -2
  %434 = zext i32 %433 to i64
  %435 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 %434
  %436 = load i32, i32* %435, align 4
  %437 = load i32, i32* %363, align 4
  %438 = icmp eq i32 %436, %437
  br i1 %438, label %439, label %473

439:                                              ; preds = %432
  %440 = load i32, i32* %360, align 8
  %441 = icmp ult i32 %440, 273
  %442 = select i1 %441, i32 %440, i32 273
  %443 = load i8* (i8*)*, i8* (i8*)** %364, align 8
  %444 = load i8*, i8** %351, align 8
  %445 = tail call i8* %443(i8* %444) #6
  %446 = getelementptr inbounds i8, i8* %445, i64 -1
  %447 = zext i32 %436 to i64
  %448 = getelementptr inbounds i8, i8* %446, i64 %447
  %449 = add i32 %430, -1
  %450 = zext i32 %449 to i64
  %451 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 %450
  %452 = load i32, i32* %451, align 4
  %453 = zext i32 %452 to i64
  %454 = xor i64 %453, -1
  %455 = zext i32 %442 to i64
  %456 = getelementptr inbounds i8, i8* %446, i64 %455
  %457 = icmp eq i32 %436, %442
  br i1 %457, label %467, label %458

458:                                              ; preds = %439, %464
  %459 = phi i8* [ %465, %464 ], [ %448, %439 ]
  %460 = load i8, i8* %459, align 1
  %461 = getelementptr inbounds i8, i8* %459, i64 %454
  %462 = load i8, i8* %461, align 1
  %463 = icmp eq i8 %460, %462
  br i1 %463, label %464, label %467

464:                                              ; preds = %458
  %465 = getelementptr inbounds i8, i8* %459, i64 1
  %466 = icmp eq i8* %465, %456
  br i1 %466, label %467, label %458

467:                                              ; preds = %464, %458, %439
  %468 = phi i8* [ %448, %439 ], [ %456, %464 ], [ %459, %458 ]
  %469 = ptrtoint i8* %468 to i64
  %470 = ptrtoint i8* %446 to i64
  %471 = sub i64 %469, %470
  %472 = trunc i64 %471 to i32
  br label %473

473:                                              ; preds = %467, %432, %424
  %474 = phi i32 [ %472, %467 ], [ %436, %432 ], [ 0, %424 ]
  %475 = load i32, i32* %357, align 8
  %476 = add i32 %475, 1
  store i32 %476, i32* %357, align 8
  br label %480

477:                                              ; preds = %421
  %478 = load i32, i32* %358, align 8
  %479 = load i32, i32* %359, align 4
  br label %480

480:                                              ; preds = %477, %473
  %481 = phi i32 [ %430, %473 ], [ %479, %477 ]
  %482 = phi i32 [ %474, %473 ], [ %478, %477 ]
  %483 = load i32, i32* %360, align 8
  %484 = icmp ult i32 %483, 2
  br i1 %484, label %2739, label %485

485:                                              ; preds = %480
  %486 = icmp ult i32 %483, 273
  %487 = select i1 %486, i32 %483, i32 273
  %488 = load i8* (i8*)*, i8* (i8*)** %364, align 8
  %489 = load i8*, i8** %351, align 8
  %490 = tail call i8* %488(i8* %489) #6
  %491 = getelementptr inbounds i8, i8* %490, i64 -1
  %492 = getelementptr inbounds i8, i8* %490, i64 -2
  %493 = load i8, i8* %491, align 1
  %494 = icmp ugt i32 %487, 2
  %495 = zext i32 %487 to i64
  %496 = load i32, i32* %365, align 4
  %497 = zext i32 %496 to i64
  %498 = sub nsw i64 0, %497
  %499 = getelementptr inbounds i8, i8* %492, i64 %498
  %500 = load i8, i8* %499, align 1
  %501 = icmp eq i8 %493, %500
  br i1 %501, label %502, label %536

502:                                              ; preds = %485
  %503 = load i8, i8* %490, align 1
  %504 = getelementptr inbounds i8, i8* %499, i64 1
  %505 = load i8, i8* %504, align 1
  %506 = icmp eq i8 %503, %505
  br i1 %506, label %507, label %536

507:                                              ; preds = %502
  br i1 %494, label %508, label %522

508:                                              ; preds = %507, %516
  %509 = phi i64 [ %517, %516 ], [ 2, %507 ]
  %510 = phi i32 [ %518, %516 ], [ 2, %507 ]
  %511 = getelementptr inbounds i8, i8* %491, i64 %509
  %512 = load i8, i8* %511, align 1
  %513 = getelementptr inbounds i8, i8* %499, i64 %509
  %514 = load i8, i8* %513, align 1
  %515 = icmp eq i8 %512, %514
  br i1 %515, label %516, label %520

516:                                              ; preds = %508
  %517 = add nuw nsw i64 %509, 1
  %518 = add nuw i32 %510, 1
  %519 = icmp ult i64 %517, %495
  br i1 %519, label %508, label %522

520:                                              ; preds = %508
  %521 = trunc i64 %509 to i32
  br label %522

522:                                              ; preds = %516, %520, %507
  %523 = phi i32 [ 2, %507 ], [ %521, %520 ], [ %518, %516 ]
  %524 = load i32, i32* %363, align 4
  %525 = icmp ult i32 %523, %524
  br i1 %525, label %536, label %526

526:                                              ; preds = %915, %878, %841, %522
  %527 = phi i32 [ 0, %522 ], [ 1, %841 ], [ 2, %878 ], [ 3, %915 ]
  %528 = phi i32 [ %523, %522 ], [ %842, %841 ], [ %879, %878 ], [ %916, %915 ]
  %529 = add i32 %528, -1
  %530 = icmp eq i32 %529, 0
  br i1 %530, label %2739, label %531

531:                                              ; preds = %526
  %532 = load i32, i32* %357, align 8
  %533 = add i32 %532, %529
  store i32 %533, i32* %357, align 8
  %534 = load void (i8*, i32)*, void (i8*, i32)** %369, align 8
  %535 = load i8*, i8** %351, align 8
  tail call void %534(i8* %535, i32 %529) #6
  br label %2739

536:                                              ; preds = %522, %502, %485
  %537 = phi i32 [ 0, %485 ], [ 0, %502 ], [ %523, %522 ]
  %538 = load i32, i32* %366, align 4
  %539 = zext i32 %538 to i64
  %540 = sub nsw i64 0, %539
  %541 = getelementptr inbounds i8, i8* %492, i64 %540
  %542 = load i8, i8* %541, align 1
  %543 = icmp eq i8 %493, %542
  br i1 %543, label %821, label %849

544:                                              ; preds = %923
  %545 = add i32 %481, -1
  %546 = zext i32 %545 to i64
  %547 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 %546
  %548 = load i32, i32* %547, align 4
  %549 = add i32 %548, 4
  %550 = add i32 %482, -1
  %551 = icmp eq i32 %550, 0
  br i1 %551, label %2739, label %552

552:                                              ; preds = %544
  %553 = load i32, i32* %357, align 8
  %554 = add i32 %553, %550
  store i32 %554, i32* %357, align 8
  %555 = load void (i8*, i32)*, void (i8*, i32)** %369, align 8
  %556 = load i8*, i8** %351, align 8
  tail call void %555(i8* %556, i32 %550) #6
  br label %2739

557:                                              ; preds = %923
  %558 = icmp ugt i32 %482, 1
  br i1 %558, label %559, label %596

559:                                              ; preds = %557
  %560 = add i32 %481, -1
  %561 = zext i32 %560 to i64
  %562 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 %561
  %563 = load i32, i32* %562, align 4
  %564 = icmp ugt i32 %481, 2
  br i1 %564, label %565, label %589

565:                                              ; preds = %559
  %566 = zext i32 %481 to i64
  br label %572

567:                                              ; preds = %582
  %568 = trunc i64 %573 to i32
  %569 = add i32 %568, -2
  %570 = icmp ugt i32 %569, 2
  %571 = add nsw i64 %573, -2
  br i1 %570, label %572, label %589

572:                                              ; preds = %567, %565
  %573 = phi i64 [ %566, %565 ], [ %571, %567 ]
  %574 = phi i32 [ %563, %565 ], [ %587, %567 ]
  %575 = phi i32 [ %482, %565 ], [ %579, %567 ]
  %576 = add nsw i64 %573, 4294967292
  %577 = and i64 %576, 4294967295
  %578 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 %577
  %579 = load i32, i32* %578, align 4
  %580 = add i32 %579, 1
  %581 = icmp eq i32 %575, %580
  br i1 %581, label %582, label %589

582:                                              ; preds = %572
  %583 = lshr i32 %574, 7
  %584 = add nsw i64 %573, 4294967293
  %585 = and i64 %584, 4294967295
  %586 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 %585
  %587 = load i32, i32* %586, align 4
  %588 = icmp ugt i32 %583, %587
  br i1 %588, label %567, label %589

589:                                              ; preds = %582, %572, %567, %559
  %590 = phi i32 [ %482, %559 ], [ %575, %572 ], [ %575, %582 ], [ %579, %567 ]
  %591 = phi i32 [ %563, %559 ], [ %574, %572 ], [ %574, %582 ], [ %587, %567 ]
  %592 = icmp eq i32 %590, 2
  %593 = icmp ugt i32 %591, 127
  %594 = and i1 %592, %593
  %595 = select i1 %594, i32 1, i32 %590
  br label %596

596:                                              ; preds = %589, %557
  %597 = phi i32 [ %482, %557 ], [ %595, %589 ]
  %598 = phi i32 [ 0, %557 ], [ %591, %589 ]
  %599 = icmp ugt i32 %925, 1
  br i1 %599, label %600, label %619

600:                                              ; preds = %596
  %601 = add i32 %925, 1
  %602 = icmp ult i32 %601, %597
  br i1 %602, label %603, label %613

603:                                              ; preds = %600
  %604 = add i32 %925, 2
  %605 = icmp uge i32 %604, %597
  %606 = icmp ugt i32 %598, 511
  %607 = and i1 %605, %606
  br i1 %607, label %613, label %608

608:                                              ; preds = %603
  %609 = add i32 %925, 3
  %610 = icmp uge i32 %609, %597
  %611 = icmp ugt i32 %598, 32767
  %612 = and i1 %610, %611
  br i1 %612, label %613, label %619

613:                                              ; preds = %608, %603, %600
  %614 = add i32 %925, -1
  %615 = load i32, i32* %357, align 8
  %616 = add i32 %615, %614
  store i32 %616, i32* %357, align 8
  %617 = load void (i8*, i32)*, void (i8*, i32)** %369, align 8
  %618 = load i8*, i8** %351, align 8
  tail call void %617(i8* %618, i32 %614) #6
  br label %2739

619:                                              ; preds = %608, %596
  %620 = icmp ult i32 %597, 2
  %621 = icmp ult i32 %487, 3
  %622 = or i1 %621, %620
  br i1 %622, label %2739, label %623

623:                                              ; preds = %619
  %624 = load i32 (i8*)*, i32 (i8*)** %349, align 8
  %625 = load i8*, i8** %351, align 8
  %626 = tail call i32 %624(i8* %625) #6
  store i32 %626, i32* %360, align 8
  %627 = load i32 (i8*, i32*)*, i32 (i8*, i32*)** %361, align 8
  %628 = load i8*, i8** %351, align 8
  %629 = tail call i32 %627(i8* %628, i32* %362) #6
  %630 = icmp eq i32 %629, 0
  br i1 %630, label %631, label %634

631:                                              ; preds = %623
  %632 = load i32, i32* %357, align 8
  %633 = add i32 %632, 1
  store i32 %633, i32* %357, align 8
  store i32 %629, i32* %359, align 4
  store i32 0, i32* %358, align 8
  br label %704

634:                                              ; preds = %623
  %635 = add i32 %629, -2
  %636 = zext i32 %635 to i64
  %637 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 %636
  %638 = load i32, i32* %637, align 4
  %639 = load i32, i32* %363, align 4
  %640 = icmp eq i32 %638, %639
  br i1 %640, label %641, label %675

641:                                              ; preds = %634
  %642 = load i32, i32* %360, align 8
  %643 = icmp ult i32 %642, 273
  %644 = select i1 %643, i32 %642, i32 273
  %645 = load i8* (i8*)*, i8* (i8*)** %364, align 8
  %646 = load i8*, i8** %351, align 8
  %647 = tail call i8* %645(i8* %646) #6
  %648 = getelementptr inbounds i8, i8* %647, i64 -1
  %649 = zext i32 %638 to i64
  %650 = getelementptr inbounds i8, i8* %648, i64 %649
  %651 = add i32 %629, -1
  %652 = zext i32 %651 to i64
  %653 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 %652
  %654 = load i32, i32* %653, align 4
  %655 = zext i32 %654 to i64
  %656 = xor i64 %655, -1
  %657 = zext i32 %644 to i64
  %658 = getelementptr inbounds i8, i8* %648, i64 %657
  %659 = icmp eq i32 %638, %644
  br i1 %659, label %669, label %660

660:                                              ; preds = %641, %666
  %661 = phi i8* [ %667, %666 ], [ %650, %641 ]
  %662 = load i8, i8* %661, align 1
  %663 = getelementptr inbounds i8, i8* %661, i64 %656
  %664 = load i8, i8* %663, align 1
  %665 = icmp eq i8 %662, %664
  br i1 %665, label %666, label %669

666:                                              ; preds = %660
  %667 = getelementptr inbounds i8, i8* %661, i64 1
  %668 = icmp eq i8* %667, %658
  br i1 %668, label %669, label %660

669:                                              ; preds = %666, %660, %641
  %670 = phi i8* [ %650, %641 ], [ %658, %666 ], [ %661, %660 ]
  %671 = ptrtoint i8* %670 to i64
  %672 = ptrtoint i8* %648 to i64
  %673 = sub i64 %671, %672
  %674 = trunc i64 %673 to i32
  br label %675

675:                                              ; preds = %669, %634
  %676 = phi i32 [ %674, %669 ], [ %638, %634 ]
  %677 = load i32, i32* %357, align 8
  %678 = add i32 %677, 1
  store i32 %678, i32* %357, align 8
  store i32 %629, i32* %359, align 4
  store i32 %676, i32* %358, align 8
  %679 = icmp ugt i32 %676, 1
  br i1 %679, label %680, label %704

680:                                              ; preds = %675
  %681 = add i32 %629, -1
  %682 = zext i32 %681 to i64
  %683 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 %682
  %684 = load i32, i32* %683, align 4
  %685 = icmp uge i32 %676, %597
  %686 = icmp ult i32 %684, %598
  %687 = and i1 %685, %686
  br i1 %687, label %2739, label %688

688:                                              ; preds = %680
  %689 = add i32 %597, 1
  %690 = icmp eq i32 %676, %689
  %691 = lshr i32 %684, 7
  %692 = icmp ule i32 %691, %598
  %693 = and i1 %690, %692
  %694 = icmp ugt i32 %676, %689
  %695 = or i1 %694, %693
  br i1 %695, label %2739, label %696

696:                                              ; preds = %688
  %697 = add i32 %676, 1
  %698 = icmp uge i32 %697, %597
  %699 = icmp ugt i32 %597, 2
  %700 = and i1 %699, %698
  %701 = lshr i32 %598, 7
  %702 = icmp ugt i32 %701, %684
  %703 = and i1 %700, %702
  br i1 %703, label %2739, label %704

704:                                              ; preds = %631, %696, %675
  %705 = load i8* (i8*)*, i8* (i8*)** %364, align 8
  %706 = load i8*, i8** %351, align 8
  %707 = tail call i8* %705(i8* %706) #6
  %708 = getelementptr inbounds i8, i8* %707, i64 -1
  %709 = getelementptr inbounds i8, i8* %707, i64 -2
  %710 = load i8, i8* %708, align 1
  %711 = add i32 %597, -1
  %712 = icmp ugt i32 %711, 2
  %713 = load i32, i32* %365, align 4
  %714 = zext i32 %713 to i64
  %715 = sub nsw i64 0, %714
  %716 = getelementptr inbounds i8, i8* %709, i64 %715
  %717 = load i8, i8* %716, align 1
  %718 = icmp eq i8 %710, %717
  br i1 %718, label %719, label %737

719:                                              ; preds = %704
  %720 = load i8, i8* %707, align 1
  %721 = getelementptr inbounds i8, i8* %716, i64 1
  %722 = load i8, i8* %721, align 1
  %723 = icmp eq i8 %720, %722
  br i1 %723, label %724, label %737

724:                                              ; preds = %719
  br i1 %712, label %725, label %2739

725:                                              ; preds = %724
  %726 = zext i32 %711 to i64
  br label %729

727:                                              ; preds = %729
  %728 = icmp eq i64 %736, %726
  br i1 %728, label %2739, label %729

729:                                              ; preds = %727, %725
  %730 = phi i64 [ 2, %725 ], [ %736, %727 ]
  %731 = getelementptr inbounds i8, i8* %708, i64 %730
  %732 = load i8, i8* %731, align 1
  %733 = getelementptr inbounds i8, i8* %716, i64 %730
  %734 = load i8, i8* %733, align 1
  %735 = icmp eq i8 %732, %734
  %736 = add nuw nsw i64 %730, 1
  br i1 %735, label %727, label %737

737:                                              ; preds = %729, %719, %704
  %738 = load i32, i32* %366, align 4
  %739 = zext i32 %738 to i64
  %740 = sub nsw i64 0, %739
  %741 = getelementptr inbounds i8, i8* %709, i64 %740
  %742 = load i8, i8* %741, align 1
  %743 = icmp eq i8 %710, %742
  br i1 %743, label %749, label %765

744:                                              ; preds = %815
  %745 = load i32, i32* %357, align 8
  %746 = add i32 %745, %817
  store i32 %746, i32* %357, align 8
  %747 = load void (i8*, i32)*, void (i8*, i32)** %369, align 8
  %748 = load i8*, i8** %351, align 8
  tail call void %747(i8* %748, i32 %817) #6
  br label %2739

749:                                              ; preds = %737
  %750 = load i8, i8* %707, align 1
  %751 = getelementptr inbounds i8, i8* %741, i64 1
  %752 = load i8, i8* %751, align 1
  %753 = icmp eq i8 %750, %752
  br i1 %753, label %754, label %765

754:                                              ; preds = %749
  br i1 %712, label %755, label %2739

755:                                              ; preds = %754
  %756 = zext i32 %711 to i64
  br label %757

757:                                              ; preds = %772, %755
  %758 = phi i64 [ 2, %755 ], [ %764, %772 ]
  %759 = getelementptr inbounds i8, i8* %708, i64 %758
  %760 = load i8, i8* %759, align 1
  %761 = getelementptr inbounds i8, i8* %741, i64 %758
  %762 = load i8, i8* %761, align 1
  %763 = icmp eq i8 %760, %762
  %764 = add nuw nsw i64 %758, 1
  br i1 %763, label %772, label %765

765:                                              ; preds = %757, %749, %737
  %766 = load i32, i32* %367, align 4
  %767 = zext i32 %766 to i64
  %768 = sub nsw i64 0, %767
  %769 = getelementptr inbounds i8, i8* %709, i64 %768
  %770 = load i8, i8* %769, align 1
  %771 = icmp eq i8 %710, %770
  br i1 %771, label %774, label %790

772:                                              ; preds = %757
  %773 = icmp eq i64 %764, %756
  br i1 %773, label %2739, label %757

774:                                              ; preds = %765
  %775 = load i8, i8* %707, align 1
  %776 = getelementptr inbounds i8, i8* %769, i64 1
  %777 = load i8, i8* %776, align 1
  %778 = icmp eq i8 %775, %777
  br i1 %778, label %779, label %790

779:                                              ; preds = %774
  br i1 %712, label %780, label %2739

780:                                              ; preds = %779
  %781 = zext i32 %711 to i64
  br label %782

782:                                              ; preds = %797, %780
  %783 = phi i64 [ 2, %780 ], [ %789, %797 ]
  %784 = getelementptr inbounds i8, i8* %708, i64 %783
  %785 = load i8, i8* %784, align 1
  %786 = getelementptr inbounds i8, i8* %769, i64 %783
  %787 = load i8, i8* %786, align 1
  %788 = icmp eq i8 %785, %787
  %789 = add nuw nsw i64 %783, 1
  br i1 %788, label %797, label %790

790:                                              ; preds = %782, %774, %765
  %791 = load i32, i32* %368, align 4
  %792 = zext i32 %791 to i64
  %793 = sub nsw i64 0, %792
  %794 = getelementptr inbounds i8, i8* %709, i64 %793
  %795 = load i8, i8* %794, align 1
  %796 = icmp eq i8 %710, %795
  br i1 %796, label %799, label %815

797:                                              ; preds = %782
  %798 = icmp eq i64 %789, %781
  br i1 %798, label %2739, label %782

799:                                              ; preds = %790
  %800 = load i8, i8* %707, align 1
  %801 = getelementptr inbounds i8, i8* %794, i64 1
  %802 = load i8, i8* %801, align 1
  %803 = icmp eq i8 %800, %802
  br i1 %803, label %804, label %815

804:                                              ; preds = %799
  br i1 %712, label %805, label %2739

805:                                              ; preds = %804
  %806 = zext i32 %711 to i64
  br label %807

807:                                              ; preds = %819, %805
  %808 = phi i64 [ 2, %805 ], [ %814, %819 ]
  %809 = getelementptr inbounds i8, i8* %708, i64 %808
  %810 = load i8, i8* %809, align 1
  %811 = getelementptr inbounds i8, i8* %794, i64 %808
  %812 = load i8, i8* %811, align 1
  %813 = icmp eq i8 %810, %812
  %814 = add nuw nsw i64 %808, 1
  br i1 %813, label %819, label %815

815:                                              ; preds = %807, %799, %790
  %816 = add i32 %598, 4
  %817 = add i32 %597, -2
  %818 = icmp eq i32 %817, 0
  br i1 %818, label %2739, label %744

819:                                              ; preds = %807
  %820 = icmp eq i64 %814, %806
  br i1 %820, label %2739, label %807

821:                                              ; preds = %536
  %822 = load i8, i8* %490, align 1
  %823 = getelementptr inbounds i8, i8* %541, i64 1
  %824 = load i8, i8* %823, align 1
  %825 = icmp eq i8 %822, %824
  br i1 %825, label %826, label %849

826:                                              ; preds = %821
  br i1 %494, label %827, label %841

827:                                              ; preds = %826, %835
  %828 = phi i64 [ %836, %835 ], [ 2, %826 ]
  %829 = phi i32 [ %837, %835 ], [ 2, %826 ]
  %830 = getelementptr inbounds i8, i8* %491, i64 %828
  %831 = load i8, i8* %830, align 1
  %832 = getelementptr inbounds i8, i8* %541, i64 %828
  %833 = load i8, i8* %832, align 1
  %834 = icmp eq i8 %831, %833
  br i1 %834, label %835, label %839

835:                                              ; preds = %827
  %836 = add nuw nsw i64 %828, 1
  %837 = add nuw i32 %829, 1
  %838 = icmp ult i64 %836, %495
  br i1 %838, label %827, label %841

839:                                              ; preds = %827
  %840 = trunc i64 %828 to i32
  br label %841

841:                                              ; preds = %835, %839, %826
  %842 = phi i32 [ 2, %826 ], [ %840, %839 ], [ %837, %835 ]
  %843 = load i32, i32* %363, align 4
  %844 = icmp ult i32 %842, %843
  br i1 %844, label %845, label %526

845:                                              ; preds = %841
  %846 = icmp ugt i32 %842, %537
  %847 = zext i1 %846 to i32
  %848 = select i1 %846, i32 %842, i32 %537
  br label %849

849:                                              ; preds = %845, %821, %536
  %850 = phi i32 [ 0, %536 ], [ 0, %821 ], [ %847, %845 ]
  %851 = phi i32 [ %537, %536 ], [ %537, %821 ], [ %848, %845 ]
  %852 = load i32, i32* %367, align 4
  %853 = zext i32 %852 to i64
  %854 = sub nsw i64 0, %853
  %855 = getelementptr inbounds i8, i8* %492, i64 %854
  %856 = load i8, i8* %855, align 1
  %857 = icmp eq i8 %493, %856
  br i1 %857, label %858, label %886

858:                                              ; preds = %849
  %859 = load i8, i8* %490, align 1
  %860 = getelementptr inbounds i8, i8* %855, i64 1
  %861 = load i8, i8* %860, align 1
  %862 = icmp eq i8 %859, %861
  br i1 %862, label %863, label %886

863:                                              ; preds = %858
  br i1 %494, label %864, label %878

864:                                              ; preds = %863, %872
  %865 = phi i64 [ %873, %872 ], [ 2, %863 ]
  %866 = phi i32 [ %874, %872 ], [ 2, %863 ]
  %867 = getelementptr inbounds i8, i8* %491, i64 %865
  %868 = load i8, i8* %867, align 1
  %869 = getelementptr inbounds i8, i8* %855, i64 %865
  %870 = load i8, i8* %869, align 1
  %871 = icmp eq i8 %868, %870
  br i1 %871, label %872, label %876

872:                                              ; preds = %864
  %873 = add nuw nsw i64 %865, 1
  %874 = add nuw i32 %866, 1
  %875 = icmp ult i64 %873, %495
  br i1 %875, label %864, label %878

876:                                              ; preds = %864
  %877 = trunc i64 %865 to i32
  br label %878

878:                                              ; preds = %872, %876, %863
  %879 = phi i32 [ 2, %863 ], [ %877, %876 ], [ %874, %872 ]
  %880 = load i32, i32* %363, align 4
  %881 = icmp ult i32 %879, %880
  br i1 %881, label %882, label %526

882:                                              ; preds = %878
  %883 = icmp ugt i32 %879, %851
  %884 = select i1 %883, i32 2, i32 %850
  %885 = select i1 %883, i32 %879, i32 %851
  br label %886

886:                                              ; preds = %882, %858, %849
  %887 = phi i32 [ %850, %849 ], [ %850, %858 ], [ %884, %882 ]
  %888 = phi i32 [ %851, %849 ], [ %851, %858 ], [ %885, %882 ]
  %889 = load i32, i32* %368, align 4
  %890 = zext i32 %889 to i64
  %891 = sub nsw i64 0, %890
  %892 = getelementptr inbounds i8, i8* %492, i64 %891
  %893 = load i8, i8* %892, align 1
  %894 = icmp eq i8 %493, %893
  br i1 %894, label %895, label %923

895:                                              ; preds = %886
  %896 = load i8, i8* %490, align 1
  %897 = getelementptr inbounds i8, i8* %892, i64 1
  %898 = load i8, i8* %897, align 1
  %899 = icmp eq i8 %896, %898
  br i1 %899, label %900, label %923

900:                                              ; preds = %895
  br i1 %494, label %901, label %915

901:                                              ; preds = %900, %909
  %902 = phi i64 [ %910, %909 ], [ 2, %900 ]
  %903 = phi i32 [ %911, %909 ], [ 2, %900 ]
  %904 = getelementptr inbounds i8, i8* %491, i64 %902
  %905 = load i8, i8* %904, align 1
  %906 = getelementptr inbounds i8, i8* %892, i64 %902
  %907 = load i8, i8* %906, align 1
  %908 = icmp eq i8 %905, %907
  br i1 %908, label %909, label %913

909:                                              ; preds = %901
  %910 = add nuw nsw i64 %902, 1
  %911 = add nuw i32 %903, 1
  %912 = icmp ult i64 %910, %495
  br i1 %912, label %901, label %915

913:                                              ; preds = %901
  %914 = trunc i64 %902 to i32
  br label %915

915:                                              ; preds = %909, %913, %900
  %916 = phi i32 [ 2, %900 ], [ %914, %913 ], [ %911, %909 ]
  %917 = load i32, i32* %363, align 4
  %918 = icmp ult i32 %916, %917
  br i1 %918, label %919, label %526

919:                                              ; preds = %915
  %920 = icmp ugt i32 %916, %888
  %921 = select i1 %920, i32 3, i32 %887
  %922 = select i1 %920, i32 %916, i32 %888
  br label %923

923:                                              ; preds = %919, %895, %886
  %924 = phi i32 [ %887, %886 ], [ %887, %895 ], [ %921, %919 ]
  %925 = phi i32 [ %888, %886 ], [ %888, %895 ], [ %922, %919 ]
  %926 = load i32, i32* %363, align 4
  %927 = icmp ult i32 %482, %926
  br i1 %927, label %557, label %544

928:                                              ; preds = %416
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %370) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %370, i8 -86, i64 16, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %373) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %373, i8 -86, i64 16, i1 false) #6
  %929 = load i32, i32* %378, align 8
  %930 = load i32, i32* %379, align 4
  %931 = icmp eq i32 %929, %930
  br i1 %931, label %939, label %932

932:                                              ; preds = %928
  %933 = zext i32 %930 to i64
  %934 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %933, i32 6
  %935 = load i32, i32* %934, align 4
  %936 = sub i32 %935, %930
  %937 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %933, i32 7
  %938 = load i32, i32* %937, align 4
  store i32 %935, i32* %379, align 4
  br label %2736

939:                                              ; preds = %928
  store i32 0, i32* %378, align 8
  store i32 0, i32* %379, align 4
  %940 = load i32, i32* %357, align 8
  %941 = icmp eq i32 %940, 0
  br i1 %941, label %942, label %995

942:                                              ; preds = %939
  %943 = load i32 (i8*)*, i32 (i8*)** %349, align 8
  %944 = load i8*, i8** %351, align 8
  %945 = tail call i32 %943(i8* %944) #6
  store i32 %945, i32* %360, align 8
  %946 = load i32 (i8*, i32*)*, i32 (i8*, i32*)** %361, align 8
  %947 = load i8*, i8** %351, align 8
  %948 = tail call i32 %946(i8* %947, i32* %362) #6
  %949 = icmp eq i32 %948, 0
  br i1 %949, label %991, label %950

950:                                              ; preds = %942
  %951 = add i32 %948, -2
  %952 = zext i32 %951 to i64
  %953 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 %952
  %954 = load i32, i32* %953, align 4
  %955 = load i32, i32* %363, align 4
  %956 = icmp eq i32 %954, %955
  br i1 %956, label %957, label %991

957:                                              ; preds = %950
  %958 = load i32, i32* %360, align 8
  %959 = icmp ult i32 %958, 273
  %960 = select i1 %959, i32 %958, i32 273
  %961 = load i8* (i8*)*, i8* (i8*)** %364, align 8
  %962 = load i8*, i8** %351, align 8
  %963 = tail call i8* %961(i8* %962) #6
  %964 = getelementptr inbounds i8, i8* %963, i64 -1
  %965 = zext i32 %954 to i64
  %966 = getelementptr inbounds i8, i8* %964, i64 %965
  %967 = add i32 %948, -1
  %968 = zext i32 %967 to i64
  %969 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 %968
  %970 = load i32, i32* %969, align 4
  %971 = zext i32 %970 to i64
  %972 = xor i64 %971, -1
  %973 = zext i32 %960 to i64
  %974 = getelementptr inbounds i8, i8* %964, i64 %973
  %975 = icmp eq i32 %954, %960
  br i1 %975, label %985, label %976

976:                                              ; preds = %957, %982
  %977 = phi i8* [ %983, %982 ], [ %966, %957 ]
  %978 = load i8, i8* %977, align 1
  %979 = getelementptr inbounds i8, i8* %977, i64 %972
  %980 = load i8, i8* %979, align 1
  %981 = icmp eq i8 %978, %980
  br i1 %981, label %982, label %985

982:                                              ; preds = %976
  %983 = getelementptr inbounds i8, i8* %977, i64 1
  %984 = icmp eq i8* %983, %974
  br i1 %984, label %985, label %976

985:                                              ; preds = %982, %976, %957
  %986 = phi i8* [ %966, %957 ], [ %974, %982 ], [ %977, %976 ]
  %987 = ptrtoint i8* %986 to i64
  %988 = ptrtoint i8* %964 to i64
  %989 = sub i64 %987, %988
  %990 = trunc i64 %989 to i32
  br label %991

991:                                              ; preds = %985, %950, %942
  %992 = phi i32 [ %990, %985 ], [ %954, %950 ], [ 0, %942 ]
  %993 = load i32, i32* %357, align 8
  %994 = add i32 %993, 1
  store i32 %994, i32* %357, align 8
  br label %998

995:                                              ; preds = %939
  %996 = load i32, i32* %358, align 8
  %997 = load i32, i32* %359, align 4
  br label %998

998:                                              ; preds = %995, %991
  %999 = phi i32 [ %948, %991 ], [ %997, %995 ]
  %1000 = phi i32 [ %992, %991 ], [ %996, %995 ]
  %1001 = load i32, i32* %360, align 8
  %1002 = icmp ult i32 %1001, 2
  br i1 %1002, label %2736, label %1003

1003:                                             ; preds = %998
  %1004 = icmp ult i32 %1001, 273
  %1005 = select i1 %1004, i32 %1001, i32 273
  %1006 = load i8* (i8*)*, i8* (i8*)** %364, align 8
  %1007 = load i8*, i8** %351, align 8
  %1008 = tail call i8* %1006(i8* %1007) #6
  %1009 = getelementptr inbounds i8, i8* %1008, i64 -1
  %1010 = getelementptr inbounds i8, i8* %1008, i64 -2
  %1011 = load i8, i8* %1009, align 1
  %1012 = icmp ugt i32 %1005, 2
  %1013 = zext i32 %1005 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %370, i8* align 4 %380, i64 16, i1 false) #6
  %1014 = load i32, i32* %365, align 4
  %1015 = zext i32 %1014 to i64
  %1016 = sub nsw i64 0, %1015
  %1017 = getelementptr inbounds i8, i8* %1010, i64 %1016
  %1018 = load i8, i8* %1017, align 1
  %1019 = icmp eq i8 %1011, %1018
  br i1 %1019, label %1020, label %1042

1020:                                             ; preds = %1003
  %1021 = load i8, i8* %1008, align 1
  %1022 = getelementptr inbounds i8, i8* %1017, i64 1
  %1023 = load i8, i8* %1022, align 1
  %1024 = icmp ne i8 %1021, %1023
  %1025 = xor i1 %1012, true
  %1026 = or i1 %1024, %1025
  %1027 = select i1 %1024, i32 0, i32 2
  br i1 %1026, label %1042, label %1028

1028:                                             ; preds = %1020, %1036
  %1029 = phi i64 [ %1037, %1036 ], [ 2, %1020 ]
  %1030 = phi i32 [ %1038, %1036 ], [ 2, %1020 ]
  %1031 = getelementptr inbounds i8, i8* %1009, i64 %1029
  %1032 = load i8, i8* %1031, align 1
  %1033 = getelementptr inbounds i8, i8* %1017, i64 %1029
  %1034 = load i8, i8* %1033, align 1
  %1035 = icmp eq i8 %1032, %1034
  br i1 %1035, label %1036, label %1040

1036:                                             ; preds = %1028
  %1037 = add nuw nsw i64 %1029, 1
  %1038 = add nuw i32 %1030, 1
  %1039 = icmp ult i64 %1037, %1013
  br i1 %1039, label %1028, label %1042

1040:                                             ; preds = %1028
  %1041 = trunc i64 %1029 to i32
  br label %1042

1042:                                             ; preds = %1036, %1040, %1020, %1003
  %1043 = phi i32 [ %1027, %1020 ], [ 0, %1003 ], [ %1041, %1040 ], [ %1038, %1036 ]
  store i32 %1043, i32* %374, align 16
  %1044 = load i32, i32* %366, align 4
  %1045 = zext i32 %1044 to i64
  %1046 = sub nsw i64 0, %1045
  %1047 = getelementptr inbounds i8, i8* %1010, i64 %1046
  %1048 = load i8, i8* %1047, align 1
  %1049 = icmp eq i8 %1011, %1048
  br i1 %1049, label %2632, label %2637

1050:                                             ; preds = %2729
  %1051 = add i32 %2733, -1
  %1052 = icmp eq i32 %1051, 0
  br i1 %1052, label %2736, label %1053

1053:                                             ; preds = %1050
  %1054 = load i32, i32* %357, align 8
  %1055 = add i32 %1054, %1051
  store i32 %1055, i32* %357, align 8
  %1056 = load void (i8*, i32)*, void (i8*, i32)** %369, align 8
  %1057 = load i8*, i8** %351, align 8
  tail call void %1056(i8* %1057, i32 %1051) #6
  br label %2736

1058:                                             ; preds = %2729
  %1059 = icmp ult i32 %1000, %2734
  br i1 %1059, label %1073, label %1060

1060:                                             ; preds = %1058
  %1061 = add i32 %999, -1
  %1062 = zext i32 %1061 to i64
  %1063 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 %1062
  %1064 = load i32, i32* %1063, align 4
  %1065 = add i32 %1064, 4
  %1066 = add i32 %1000, -1
  %1067 = icmp eq i32 %1066, 0
  br i1 %1067, label %2736, label %1068

1068:                                             ; preds = %1060
  %1069 = load i32, i32* %357, align 8
  %1070 = add i32 %1069, %1066
  store i32 %1070, i32* %357, align 8
  %1071 = load void (i8*, i32)*, void (i8*, i32)** %369, align 8
  %1072 = load i8*, i8** %351, align 8
  tail call void %1071(i8* %1072, i32 %1066) #6
  br label %2736

1073:                                             ; preds = %1058
  %1074 = load i32, i32* %371, align 16
  %1075 = add i32 %1074, 1
  %1076 = zext i32 %1075 to i64
  %1077 = sub nsw i64 0, %1076
  %1078 = getelementptr inbounds i8, i8* %1009, i64 %1077
  %1079 = load i8, i8* %1078, align 1
  %1080 = icmp ugt i32 %1000, 1
  %1081 = icmp eq i8 %1011, %1079
  %1082 = or i1 %1080, %1081
  %1083 = xor i1 %1082, true
  %1084 = icmp ult i32 %2733, 2
  %1085 = and i1 %1084, %1083
  br i1 %1085, label %2736, label %1086

1086:                                             ; preds = %1073
  %1087 = load i32, i32* %381, align 4
  store i32 %1087, i32* %382, align 4
  %1088 = load i32, i32* %383, align 8
  %1089 = and i32 %1088, %417
  %1090 = load i32*, i32** %384, align 8
  %1091 = load i32, i32* %385, align 4
  %1092 = and i32 %1091, %417
  %1093 = load i32, i32* %386, align 8
  %1094 = shl i32 %1092, %1093
  %1095 = load i8, i8* %1010, align 1
  %1096 = zext i8 %1095 to i32
  %1097 = sub i32 8, %1093
  %1098 = lshr i32 %1096, %1097
  %1099 = add i32 %1098, %1094
  %1100 = mul i32 %1099, 768
  %1101 = zext i32 %1100 to i64
  %1102 = getelementptr inbounds i32, i32* %1090, i64 %1101
  %1103 = zext i32 %1087 to i64
  %1104 = zext i32 %1089 to i64
  %1105 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 38, i64 %1103, i64 %1104
  %1106 = load i32, i32* %1105, align 4
  %1107 = lshr i32 %1106, 4
  %1108 = zext i32 %1107 to i64
  %1109 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %1108
  %1110 = load i32, i32* %1109, align 4
  %1111 = icmp ult i32 %1087, 7
  %1112 = zext i8 %1011 to i32
  br i1 %1111, label %1144, label %1113

1113:                                             ; preds = %1086
  %1114 = zext i8 %1079 to i32
  %1115 = or i32 %1112, 256
  br label %1116

1116:                                             ; preds = %1116, %1113
  %1117 = phi i32 [ %1114, %1113 ], [ %1121, %1116 ]
  %1118 = phi i32 [ %1115, %1113 ], [ %1139, %1116 ]
  %1119 = phi i32 [ 0, %1113 ], [ %1138, %1116 ]
  %1120 = phi i32 [ 256, %1113 ], [ %1142, %1116 ]
  %1121 = shl i32 %1117, 1
  %1122 = and i32 %1120, %1121
  %1123 = lshr i32 %1118, 8
  %1124 = add i32 %1120, %1123
  %1125 = add i32 %1124, %1122
  %1126 = zext i32 %1125 to i64
  %1127 = getelementptr inbounds i32, i32* %1102, i64 %1126
  %1128 = load i32, i32* %1127, align 4
  %1129 = lshr i32 %1118, 7
  %1130 = and i32 %1129, 1
  %1131 = sub nsw i32 0, %1130
  %1132 = and i32 %1131, 2032
  %1133 = xor i32 %1128, %1132
  %1134 = lshr i32 %1133, 4
  %1135 = zext i32 %1134 to i64
  %1136 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %1135
  %1137 = load i32, i32* %1136, align 4
  %1138 = add i32 %1137, %1119
  %1139 = shl i32 %1118, 1
  %1140 = xor i32 %1121, -1
  %1141 = xor i32 %1139, %1140
  %1142 = and i32 %1120, %1141
  %1143 = icmp ult i32 %1139, 65536
  br i1 %1143, label %1116, label %1165

1144:                                             ; preds = %1086
  %1145 = or i32 %1112, 256
  br label %1146

1146:                                             ; preds = %1146, %1144
  %1147 = phi i32 [ %1145, %1144 ], [ %1163, %1146 ]
  %1148 = phi i32 [ 0, %1144 ], [ %1162, %1146 ]
  %1149 = lshr i32 %1147, 8
  %1150 = zext i32 %1149 to i64
  %1151 = getelementptr inbounds i32, i32* %1102, i64 %1150
  %1152 = load i32, i32* %1151, align 4
  %1153 = lshr i32 %1147, 7
  %1154 = and i32 %1153, 1
  %1155 = sub nsw i32 0, %1154
  %1156 = and i32 %1155, 2032
  %1157 = xor i32 %1156, %1152
  %1158 = lshr i32 %1157, 4
  %1159 = zext i32 %1158 to i64
  %1160 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %1159
  %1161 = load i32, i32* %1160, align 4
  %1162 = add i32 %1161, %1148
  %1163 = shl i32 %1147, 1
  %1164 = icmp ult i32 %1163, 65536
  br i1 %1164, label %1146, label %1165

1165:                                             ; preds = %1116, %1146
  %1166 = phi i32 [ %1162, %1146 ], [ %1138, %1116 ]
  %1167 = add i32 %1166, %1110
  store i32 %1167, i32* %387, align 8
  store i32 -1, i32* %388, align 4
  store i32 0, i32* %389, align 8
  %1168 = load i32, i32* %1105, align 4
  %1169 = lshr i32 %1168, 4
  %1170 = xor i32 %1169, 127
  %1171 = zext i32 %1170 to i64
  %1172 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %1171
  %1173 = load i32, i32* %1172, align 4
  %1174 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 39, i64 %1103
  %1175 = load i32, i32* %1174, align 4
  %1176 = lshr i32 %1175, 4
  %1177 = xor i32 %1176, 127
  %1178 = zext i32 %1177 to i64
  %1179 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %1178
  %1180 = load i32, i32* %1179, align 4
  %1181 = add i32 %1180, %1173
  br i1 %1081, label %1182, label %1199

1182:                                             ; preds = %1165
  %1183 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 40, i64 %1103
  %1184 = load i32, i32* %1183, align 4
  %1185 = lshr i32 %1184, 4
  %1186 = zext i32 %1185 to i64
  %1187 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %1186
  %1188 = load i32, i32* %1187, align 4
  %1189 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 43, i64 %1103, i64 %1104
  %1190 = load i32, i32* %1189, align 4
  %1191 = lshr i32 %1190, 4
  %1192 = zext i32 %1191 to i64
  %1193 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %1192
  %1194 = load i32, i32* %1193, align 4
  %1195 = add i32 %1188, %1181
  %1196 = add i32 %1195, %1194
  %1197 = icmp ult i32 %1196, %1167
  br i1 %1197, label %1198, label %1199

1198:                                             ; preds = %1182
  store i32 %1196, i32* %387, align 8
  store i32 0, i32* %388, align 4
  store i32 0, i32* %389, align 8
  br label %1199

1199:                                             ; preds = %1198, %1182, %1165
  %1200 = phi i32 [ -1, %1182 ], [ 0, %1198 ], [ -1, %1165 ]
  %1201 = icmp ult i32 %1000, %2733
  %1202 = select i1 %1201, i32 %2733, i32 %1000
  %1203 = icmp ult i32 %1202, 2
  br i1 %1203, label %2736, label %1204

1204:                                             ; preds = %1199
  store i32 0, i32* %390, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %392, i8* nonnull align 16 %370, i64 16, i1 false) #6
  %1205 = zext i32 %1202 to i64
  %1206 = add i32 %1202, 3
  %1207 = add i32 %1202, -2
  %1208 = and i32 %1206, 3
  %1209 = icmp eq i32 %1208, 0
  br i1 %1209, label %1217, label %1210

1210:                                             ; preds = %1204, %1210
  %1211 = phi i64 [ %1214, %1210 ], [ %1205, %1204 ]
  %1212 = phi i32 [ %1215, %1210 ], [ %1208, %1204 ]
  %1213 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1211, i32 0
  store i32 1073741824, i32* %1213, align 8
  %1214 = add nsw i64 %1211, -1
  %1215 = add i32 %1212, -1
  %1216 = icmp eq i32 %1215, 0
  br i1 %1216, label %1217, label %1210, !llvm.loop !12

1217:                                             ; preds = %1210, %1204
  %1218 = phi i64 [ %1205, %1204 ], [ %1214, %1210 ]
  %1219 = icmp ult i32 %1207, 3
  br i1 %1219, label %1233, label %1220

1220:                                             ; preds = %1217, %1220
  %1221 = phi i64 [ %1232, %1220 ], [ %1218, %1217 ]
  %1222 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1221, i32 0
  store i32 1073741824, i32* %1222, align 8
  %1223 = add nsw i64 %1221, -1
  %1224 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1223, i32 0
  store i32 1073741824, i32* %1224, align 8
  %1225 = add nsw i64 %1221, -2
  %1226 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1225, i32 0
  store i32 1073741824, i32* %1226, align 8
  %1227 = add nsw i64 %1221, -3
  %1228 = trunc i64 %1227 to i32
  %1229 = add i32 %1228, -1
  %1230 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1227, i32 0
  store i32 1073741824, i32* %1230, align 8
  %1231 = icmp ugt i32 %1229, 1
  %1232 = add nsw i64 %1221, -4
  br i1 %1231, label %1220, label %1233

1233:                                             ; preds = %1220, %1217
  %1234 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 40, i64 %1103
  %1235 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 41, i64 %1103
  %1236 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 42, i64 %1103
  %1237 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 43, i64 %1103, i64 %1104
  br label %1238

1238:                                             ; preds = %1310, %1233
  %1239 = phi i32 [ %1043, %1233 ], [ %1312, %1310 ]
  %1240 = phi i64 [ 0, %1233 ], [ %1308, %1310 ]
  %1241 = icmp ult i32 %1239, 2
  br i1 %1241, label %1307, label %1242

1242:                                             ; preds = %1238
  %1243 = icmp eq i64 %1240, 0
  %1244 = load i32, i32* %1234, align 4
  %1245 = lshr i32 %1244, 4
  br i1 %1243, label %1246, label %1256

1246:                                             ; preds = %1242
  %1247 = zext i32 %1245 to i64
  %1248 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %1247
  %1249 = load i32, i32* %1248, align 4
  %1250 = load i32, i32* %1237, align 4
  %1251 = lshr i32 %1250, 4
  %1252 = xor i32 %1251, 127
  %1253 = zext i32 %1252 to i64
  %1254 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %1253
  %1255 = load i32, i32* %1254, align 4
  br label %1283

1256:                                             ; preds = %1242
  %1257 = xor i32 %1245, 127
  %1258 = zext i32 %1257 to i64
  %1259 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %1258
  %1260 = load i32, i32* %1259, align 4
  %1261 = icmp eq i64 %1240, 1
  %1262 = load i32, i32* %1235, align 4
  %1263 = lshr i32 %1262, 4
  br i1 %1261, label %1264, label %1268

1264:                                             ; preds = %1256
  %1265 = zext i32 %1263 to i64
  %1266 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %1265
  %1267 = load i32, i32* %1266, align 4
  br label %1283

1268:                                             ; preds = %1256
  %1269 = xor i32 %1263, 127
  %1270 = zext i32 %1269 to i64
  %1271 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %1270
  %1272 = load i32, i32* %1271, align 4
  %1273 = add i32 %1272, %1260
  %1274 = load i32, i32* %1236, align 4
  %1275 = trunc i64 %1240 to i32
  %1276 = sub i32 2, %1275
  %1277 = and i32 %1276, 2032
  %1278 = xor i32 %1274, %1277
  %1279 = lshr i32 %1278, 4
  %1280 = zext i32 %1279 to i64
  %1281 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %1280
  %1282 = load i32, i32* %1281, align 4
  br label %1283

1283:                                             ; preds = %1268, %1264, %1246
  %1284 = phi i32 [ %1282, %1268 ], [ %1260, %1264 ], [ %1249, %1246 ]
  %1285 = phi i32 [ %1273, %1268 ], [ %1267, %1264 ], [ %1255, %1246 ]
  %1286 = add i32 %1285, %1284
  %1287 = add i32 %1286, %1181
  %1288 = trunc i64 %1240 to i32
  br label %1289

1289:                                             ; preds = %1304, %1283
  %1290 = phi i32 [ %1239, %1283 ], [ %1305, %1304 ]
  %1291 = add i32 %1290, -2
  %1292 = zext i32 %1291 to i64
  %1293 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 2, i64 %1104, i64 %1292
  %1294 = load i32, i32* %1293, align 4
  %1295 = add i32 %1287, %1294
  %1296 = zext i32 %1290 to i64
  %1297 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1296, i32 0
  %1298 = load i32, i32* %1297, align 4
  %1299 = icmp ult i32 %1295, %1298
  br i1 %1299, label %1300, label %1304

1300:                                             ; preds = %1289
  store i32 %1295, i32* %1297, align 4
  %1301 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1296, i32 6
  store i32 0, i32* %1301, align 4
  %1302 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1296, i32 7
  store i32 %1288, i32* %1302, align 4
  %1303 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1296, i32 2
  store i32 0, i32* %1303, align 4
  br label %1304

1304:                                             ; preds = %1300, %1289
  %1305 = add i32 %1290, -1
  %1306 = icmp ugt i32 %1305, 1
  br i1 %1306, label %1289, label %1307

1307:                                             ; preds = %1304, %1238
  %1308 = add nuw nsw i64 %1240, 1
  %1309 = icmp eq i64 %1308, 4
  br i1 %1309, label %1313, label %1310

1310:                                             ; preds = %1307
  %1311 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %1308
  %1312 = load i32, i32* %1311, align 4
  br label %1238

1313:                                             ; preds = %1307
  %1314 = load i32, i32* %1174, align 4
  %1315 = lshr i32 %1314, 4
  %1316 = zext i32 %1315 to i64
  %1317 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %1316
  %1318 = load i32, i32* %1317, align 4
  %1319 = add i32 %1318, %1173
  %1320 = icmp ugt i32 %1043, 1
  %1321 = add i32 %1043, 1
  %1322 = select i1 %1320, i32 %1321, i32 2
  %1323 = icmp ugt i32 %1322, %1000
  br i1 %1323, label %1393, label %1324

1324:                                             ; preds = %1313, %1324
  %1325 = phi i32 [ %1330, %1324 ], [ 0, %1313 ]
  %1326 = zext i32 %1325 to i64
  %1327 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 %1326
  %1328 = load i32, i32* %1327, align 4
  %1329 = icmp ugt i32 %1322, %1328
  %1330 = add i32 %1325, 2
  br i1 %1329, label %1324, label %1331

1331:                                             ; preds = %1324, %1390
  %1332 = phi i32 [ %1392, %1390 ], [ %1322, %1324 ]
  %1333 = phi i32 [ %1391, %1390 ], [ %1325, %1324 ]
  %1334 = add i32 %1333, 1
  %1335 = zext i32 %1334 to i64
  %1336 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 %1335
  %1337 = load i32, i32* %1336, align 4
  %1338 = add i32 %1332, -2
  %1339 = zext i32 %1338 to i64
  %1340 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 2, i64 %1104, i64 %1339
  %1341 = load i32, i32* %1340, align 4
  %1342 = add i32 %1319, %1341
  %1343 = icmp ult i32 %1332, 5
  %1344 = select i1 %1343, i32 %1338, i32 3
  %1345 = icmp ult i32 %1337, 128
  br i1 %1345, label %1346, label %1351

1346:                                             ; preds = %1331
  %1347 = zext i32 %1344 to i64
  %1348 = zext i32 %1337 to i64
  %1349 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 36, i64 %1347, i64 %1348
  %1350 = load i32, i32* %1349, align 4
  br label %1370

1351:                                             ; preds = %1331
  %1352 = icmp ult i32 %1337, 524288
  %1353 = select i1 %1352, i32 6, i32 18
  %1354 = lshr i32 %1337, %1353
  %1355 = zext i32 %1354 to i64
  %1356 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 32, i64 %1355
  %1357 = load i8, i8* %1356, align 1
  %1358 = zext i8 %1357 to i32
  %1359 = shl nuw nsw i32 %1353, 1
  %1360 = add nuw nsw i32 %1359, %1358
  %1361 = and i32 %1337, 15
  %1362 = zext i32 %1361 to i64
  %1363 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 37, i64 %1362
  %1364 = load i32, i32* %1363, align 4
  %1365 = zext i32 %1344 to i64
  %1366 = zext i32 %1360 to i64
  %1367 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 35, i64 %1365, i64 %1366
  %1368 = load i32, i32* %1367, align 4
  %1369 = add i32 %1368, %1364
  br label %1370

1370:                                             ; preds = %1351, %1346
  %1371 = phi i32 [ %1350, %1346 ], [ %1369, %1351 ]
  %1372 = add i32 %1342, %1371
  %1373 = zext i32 %1332 to i64
  %1374 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1373, i32 0
  %1375 = load i32, i32* %1374, align 4
  %1376 = icmp ult i32 %1372, %1375
  br i1 %1376, label %1377, label %1382

1377:                                             ; preds = %1370
  store i32 %1372, i32* %1374, align 4
  %1378 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1373, i32 6
  store i32 0, i32* %1378, align 4
  %1379 = add i32 %1337, 4
  %1380 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1373, i32 7
  store i32 %1379, i32* %1380, align 4
  %1381 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1373, i32 2
  store i32 0, i32* %1381, align 4
  br label %1382

1382:                                             ; preds = %1377, %1370
  %1383 = zext i32 %1333 to i64
  %1384 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 %1383
  %1385 = load i32, i32* %1384, align 4
  %1386 = icmp eq i32 %1332, %1385
  br i1 %1386, label %1387, label %1390

1387:                                             ; preds = %1382
  %1388 = add i32 %1333, 2
  %1389 = icmp eq i32 %1388, %999
  br i1 %1389, label %1393, label %1390

1390:                                             ; preds = %1387, %1382
  %1391 = phi i32 [ %1388, %1387 ], [ %1333, %1382 ]
  %1392 = add i32 %1332, 1
  br label %1331

1393:                                             ; preds = %1387, %1313
  %1394 = icmp eq i32 %1202, 1
  br i1 %1394, label %1395, label %1440

1395:                                             ; preds = %2628, %1393
  %1396 = phi i32 [ 1, %1393 ], [ %2629, %2628 ]
  %1397 = zext i32 %1396 to i64
  %1398 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1397, i32 6
  %1399 = load i32, i32* %1398, align 8
  %1400 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1397, i32 7
  %1401 = load i32, i32* %1400, align 4
  store i32 %1396, i32* %378, align 8
  br label %1402

1402:                                             ; preds = %1432, %1395
  %1403 = phi i32 [ %1401, %1395 ], [ %1434, %1432 ]
  %1404 = phi i32 [ %1399, %1395 ], [ %1433, %1432 ]
  %1405 = phi i32 [ %1396, %1395 ], [ %1404, %1432 ]
  %1406 = zext i32 %1405 to i64
  %1407 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1406, i32 2
  %1408 = load i32, i32* %1407, align 8
  %1409 = icmp eq i32 %1408, 0
  %1410 = zext i32 %1404 to i64
  %1411 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1410, i32 7
  br i1 %1409, label %1412, label %1416

1412:                                             ; preds = %1402
  %1413 = load i32, i32* %1411, align 4
  %1414 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1410, i32 6
  %1415 = load i32, i32* %1414, align 8
  br label %1432

1416:                                             ; preds = %1402
  store i32 -1, i32* %1411, align 4
  %1417 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1410, i32 2
  store i32 0, i32* %1417, align 8
  %1418 = add i32 %1404, -1
  %1419 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1410, i32 6
  store i32 %1418, i32* %1419, align 8
  %1420 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1406, i32 3
  %1421 = load i32, i32* %1420, align 4
  %1422 = icmp eq i32 %1421, 0
  br i1 %1422, label %1432, label %1423

1423:                                             ; preds = %1416
  %1424 = zext i32 %1418 to i64
  %1425 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1424, i32 2
  store i32 0, i32* %1425, align 8
  %1426 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1406, i32 4
  %1427 = load i32, i32* %1426, align 8
  %1428 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1424, i32 6
  store i32 %1427, i32* %1428, align 8
  %1429 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1406, i32 5
  %1430 = load i32, i32* %1429, align 4
  %1431 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1424, i32 7
  store i32 %1430, i32* %1431, align 4
  br label %1432

1432:                                             ; preds = %1423, %1416, %1412
  %1433 = phi i32 [ %1415, %1412 ], [ %1418, %1416 ], [ %1418, %1423 ]
  %1434 = phi i32 [ %1413, %1412 ], [ -1, %1416 ], [ -1, %1423 ]
  %1435 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1410, i32 6
  store i32 %1403, i32* %1411, align 4
  store i32 %1405, i32* %1435, align 8
  %1436 = icmp eq i32 %1404, 0
  br i1 %1436, label %1437, label %1402

1437:                                             ; preds = %1432
  %1438 = load i32, i32* %394, align 4
  %1439 = load i32, i32* %395, align 8
  store i32 %1439, i32* %379, align 4
  br label %2736

1440:                                             ; preds = %1393, %2628
  %1441 = phi i32 [ %2630, %2628 ], [ 1, %1393 ]
  %1442 = phi i32 [ %1544, %2628 ], [ %417, %1393 ]
  %1443 = phi i32 [ %2629, %2628 ], [ %1202, %1393 ]
  %1444 = phi i32 [ %1441, %2628 ], [ 0, %1393 ]
  %1445 = load i32 (i8*)*, i32 (i8*)** %349, align 8
  %1446 = load i8*, i8** %351, align 8
  %1447 = tail call i32 %1445(i8* %1446) #6
  store i32 %1447, i32* %360, align 8
  %1448 = load i32 (i8*, i32*)*, i32 (i8*, i32*)** %361, align 8
  %1449 = load i8*, i8** %351, align 8
  %1450 = tail call i32 %1448(i8* %1449, i32* %362) #6
  %1451 = icmp eq i32 %1450, 0
  br i1 %1451, label %1493, label %1452

1452:                                             ; preds = %1440
  %1453 = add i32 %1450, -2
  %1454 = zext i32 %1453 to i64
  %1455 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 %1454
  %1456 = load i32, i32* %1455, align 4
  %1457 = load i32, i32* %363, align 4
  %1458 = icmp eq i32 %1456, %1457
  br i1 %1458, label %1459, label %1493

1459:                                             ; preds = %1452
  %1460 = load i32, i32* %360, align 8
  %1461 = icmp ult i32 %1460, 273
  %1462 = select i1 %1461, i32 %1460, i32 273
  %1463 = load i8* (i8*)*, i8* (i8*)** %364, align 8
  %1464 = load i8*, i8** %351, align 8
  %1465 = tail call i8* %1463(i8* %1464) #6
  %1466 = getelementptr inbounds i8, i8* %1465, i64 -1
  %1467 = zext i32 %1456 to i64
  %1468 = getelementptr inbounds i8, i8* %1466, i64 %1467
  %1469 = add i32 %1450, -1
  %1470 = zext i32 %1469 to i64
  %1471 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 %1470
  %1472 = load i32, i32* %1471, align 4
  %1473 = zext i32 %1472 to i64
  %1474 = xor i64 %1473, -1
  %1475 = zext i32 %1462 to i64
  %1476 = getelementptr inbounds i8, i8* %1466, i64 %1475
  %1477 = icmp eq i32 %1456, %1462
  br i1 %1477, label %1487, label %1478

1478:                                             ; preds = %1459, %1484
  %1479 = phi i8* [ %1485, %1484 ], [ %1468, %1459 ]
  %1480 = load i8, i8* %1479, align 1
  %1481 = getelementptr inbounds i8, i8* %1479, i64 %1474
  %1482 = load i8, i8* %1481, align 1
  %1483 = icmp eq i8 %1480, %1482
  br i1 %1483, label %1484, label %1487

1484:                                             ; preds = %1478
  %1485 = getelementptr inbounds i8, i8* %1479, i64 1
  %1486 = icmp eq i8* %1485, %1476
  br i1 %1486, label %1487, label %1478

1487:                                             ; preds = %1484, %1478, %1459
  %1488 = phi i8* [ %1468, %1459 ], [ %1476, %1484 ], [ %1479, %1478 ]
  %1489 = ptrtoint i8* %1488 to i64
  %1490 = ptrtoint i8* %1466 to i64
  %1491 = sub i64 %1489, %1490
  %1492 = trunc i64 %1491 to i32
  br label %1493

1493:                                             ; preds = %1487, %1452, %1440
  %1494 = phi i32 [ %1492, %1487 ], [ %1456, %1452 ], [ 0, %1440 ]
  %1495 = load i32, i32* %357, align 8
  %1496 = add i32 %1495, 1
  store i32 %1496, i32* %357, align 8
  %1497 = load i32, i32* %363, align 4
  %1498 = icmp ult i32 %1494, %1497
  br i1 %1498, label %1543, label %1499

1499:                                             ; preds = %1493
  store i32 %1450, i32* %359, align 4
  store i32 %1494, i32* %358, align 8
  %1500 = zext i32 %1441 to i64
  %1501 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1500, i32 6
  %1502 = load i32, i32* %1501, align 8
  %1503 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1500, i32 7
  %1504 = load i32, i32* %1503, align 4
  store i32 %1441, i32* %378, align 8
  br label %1505

1505:                                             ; preds = %1535, %1499
  %1506 = phi i32 [ %1504, %1499 ], [ %1537, %1535 ]
  %1507 = phi i32 [ %1502, %1499 ], [ %1536, %1535 ]
  %1508 = phi i32 [ %1441, %1499 ], [ %1507, %1535 ]
  %1509 = zext i32 %1508 to i64
  %1510 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1509, i32 2
  %1511 = load i32, i32* %1510, align 8
  %1512 = icmp eq i32 %1511, 0
  %1513 = zext i32 %1507 to i64
  %1514 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1513, i32 7
  br i1 %1512, label %1515, label %1519

1515:                                             ; preds = %1505
  %1516 = load i32, i32* %1514, align 4
  %1517 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1513, i32 6
  %1518 = load i32, i32* %1517, align 8
  br label %1535

1519:                                             ; preds = %1505
  store i32 -1, i32* %1514, align 4
  %1520 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1513, i32 2
  store i32 0, i32* %1520, align 8
  %1521 = add i32 %1507, -1
  %1522 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1513, i32 6
  store i32 %1521, i32* %1522, align 8
  %1523 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1509, i32 3
  %1524 = load i32, i32* %1523, align 4
  %1525 = icmp eq i32 %1524, 0
  br i1 %1525, label %1535, label %1526

1526:                                             ; preds = %1519
  %1527 = zext i32 %1521 to i64
  %1528 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1527, i32 2
  store i32 0, i32* %1528, align 8
  %1529 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1509, i32 4
  %1530 = load i32, i32* %1529, align 8
  %1531 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1527, i32 6
  store i32 %1530, i32* %1531, align 8
  %1532 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1509, i32 5
  %1533 = load i32, i32* %1532, align 4
  %1534 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1527, i32 7
  store i32 %1533, i32* %1534, align 4
  br label %1535

1535:                                             ; preds = %1526, %1519, %1515
  %1536 = phi i32 [ %1518, %1515 ], [ %1521, %1519 ], [ %1521, %1526 ]
  %1537 = phi i32 [ %1516, %1515 ], [ -1, %1519 ], [ -1, %1526 ]
  %1538 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1513, i32 6
  store i32 %1506, i32* %1514, align 4
  store i32 %1508, i32* %1538, align 8
  %1539 = icmp eq i32 %1507, 0
  br i1 %1539, label %1540, label %1505

1540:                                             ; preds = %1535
  %1541 = load i32, i32* %394, align 4
  %1542 = load i32, i32* %395, align 8
  store i32 %1542, i32* %379, align 4
  br label %2736

1543:                                             ; preds = %1493
  %1544 = add i32 %1442, 1
  %1545 = zext i32 %1441 to i64
  %1546 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1545, i32 6
  %1547 = load i32, i32* %1546, align 4
  %1548 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1545, i32 2
  %1549 = load i32, i32* %1548, align 4
  %1550 = icmp eq i32 %1549, 0
  br i1 %1550, label %1578, label %1551

1551:                                             ; preds = %1543
  %1552 = add i32 %1547, -1
  %1553 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1545, i32 3
  %1554 = load i32, i32* %1553, align 4
  %1555 = icmp eq i32 %1554, 0
  br i1 %1555, label %1570, label %1556

1556:                                             ; preds = %1551
  %1557 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1545, i32 4
  %1558 = load i32, i32* %1557, align 4
  %1559 = zext i32 %1558 to i64
  %1560 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1559, i32 1
  %1561 = load i32, i32* %1560, align 4
  %1562 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1545, i32 5
  %1563 = load i32, i32* %1562, align 4
  %1564 = icmp ult i32 %1563, 4
  %1565 = zext i32 %1561 to i64
  br i1 %1564, label %1566, label %1568

1566:                                             ; preds = %1556
  %1567 = getelementptr inbounds [12 x i32], [12 x i32]* @kRepNextStates, i64 0, i64 %1565
  br label %1573

1568:                                             ; preds = %1556
  %1569 = getelementptr inbounds [12 x i32], [12 x i32]* @kMatchNextStates, i64 0, i64 %1565
  br label %1573

1570:                                             ; preds = %1551
  %1571 = zext i32 %1552 to i64
  %1572 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1571, i32 1
  br label %1573

1573:                                             ; preds = %1570, %1568, %1566
  %1574 = phi i32* [ %1567, %1566 ], [ %1569, %1568 ], [ %1572, %1570 ]
  %1575 = load i32, i32* %1574, align 4
  %1576 = zext i32 %1575 to i64
  %1577 = getelementptr inbounds [12 x i32], [12 x i32]* @kLiteralNextStates, i64 0, i64 %1576
  br label %1581

1578:                                             ; preds = %1543
  %1579 = zext i32 %1547 to i64
  %1580 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1579, i32 1
  br label %1581

1581:                                             ; preds = %1578, %1573
  %1582 = phi i32 [ %1552, %1573 ], [ %1547, %1578 ]
  %1583 = phi i32* [ %1577, %1573 ], [ %1580, %1578 ]
  %1584 = load i32, i32* %1583, align 4
  %1585 = icmp eq i32 %1582, %1444
  br i1 %1585, label %1586, label %1597

1586:                                             ; preds = %1581
  %1587 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1545, i32 7
  %1588 = load i32, i32* %1587, align 4
  %1589 = icmp eq i32 %1588, 0
  %1590 = zext i32 %1584 to i64
  br i1 %1589, label %1591, label %1594

1591:                                             ; preds = %1586
  %1592 = getelementptr inbounds [12 x i32], [12 x i32]* @kShortRepNextStates, i64 0, i64 %1590
  %1593 = load i32, i32* %1592, align 4
  br label %1666

1594:                                             ; preds = %1586
  %1595 = getelementptr inbounds [12 x i32], [12 x i32]* @kLiteralNextStates, i64 0, i64 %1590
  %1596 = load i32, i32* %1595, align 4
  br label %1666

1597:                                             ; preds = %1581
  br i1 %1550, label %1602, label %1598

1598:                                             ; preds = %1597
  %1599 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1545, i32 3
  %1600 = load i32, i32* %1599, align 4
  %1601 = icmp eq i32 %1600, 0
  br i1 %1601, label %1602, label %1615

1602:                                             ; preds = %1598, %1597
  %1603 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1545, i32 7
  %1604 = load i32, i32* %1603, align 4
  %1605 = icmp ult i32 %1604, 4
  %1606 = zext i32 %1584 to i64
  br i1 %1605, label %1607, label %1611

1607:                                             ; preds = %1602
  %1608 = getelementptr inbounds [12 x i32], [12 x i32]* @kRepNextStates, i64 0, i64 %1606
  %1609 = load i32, i32* %1608, align 4
  %1610 = zext i32 %1582 to i64
  br label %1625

1611:                                             ; preds = %1602
  %1612 = getelementptr inbounds [12 x i32], [12 x i32]* @kMatchNextStates, i64 0, i64 %1606
  %1613 = load i32, i32* %1612, align 4
  %1614 = zext i32 %1582 to i64
  br label %1658

1615:                                             ; preds = %1598
  %1616 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1545, i32 4
  %1617 = load i32, i32* %1616, align 4
  %1618 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1545, i32 5
  %1619 = load i32, i32* %1618, align 4
  %1620 = zext i32 %1584 to i64
  %1621 = getelementptr inbounds [12 x i32], [12 x i32]* @kRepNextStates, i64 0, i64 %1620
  %1622 = load i32, i32* %1621, align 4
  %1623 = zext i32 %1617 to i64
  %1624 = icmp ult i32 %1619, 4
  br i1 %1624, label %1625, label %1658

1625:                                             ; preds = %1615, %1607
  %1626 = phi i64 [ %1610, %1607 ], [ %1623, %1615 ]
  %1627 = phi i32 [ %1609, %1607 ], [ %1622, %1615 ]
  %1628 = phi i32 [ %1604, %1607 ], [ %1619, %1615 ]
  %1629 = zext i32 %1628 to i64
  %1630 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1626, i32 8, i64 %1629
  %1631 = load i32, i32* %1630, align 4
  store i32 %1631, i32* %371, align 16
  %1632 = icmp eq i32 %1628, 0
  br i1 %1632, label %1635, label %1648

1633:                                             ; preds = %1648
  %1634 = icmp ult i32 %1656, 4
  br i1 %1634, label %1635, label %1666

1635:                                             ; preds = %1633, %1625
  %1636 = phi i32 [ %1656, %1633 ], [ 1, %1625 ]
  %1637 = zext i32 %1636 to i64
  %1638 = getelementptr <4 x i32>, <4 x i32>* %5, i64 0, i64 %1637
  %1639 = bitcast i32* %1638 to i8*
  %1640 = mul nuw nsw i64 %1626, 12
  %1641 = add nuw nsw i64 %1640, %1637
  %1642 = getelementptr %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 0, i32 8, i64 %1641
  %1643 = bitcast i32* %1642 to i8*
  %1644 = sub nuw nsw i32 3, %1636
  %1645 = zext i32 %1644 to i64
  %1646 = shl nuw nsw i64 %1645, 2
  %1647 = add nuw nsw i64 %1646, 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1639, i8* align 4 %1643, i64 %1647, i1 false) #6
  br label %1666

1648:                                             ; preds = %1625, %1648
  %1649 = phi i32 [ %1656, %1648 ], [ 1, %1625 ]
  %1650 = add i32 %1649, -1
  %1651 = zext i32 %1650 to i64
  %1652 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1626, i32 8, i64 %1651
  %1653 = load i32, i32* %1652, align 4
  %1654 = zext i32 %1649 to i64
  %1655 = getelementptr inbounds <4 x i32>, <4 x i32>* %5, i64 0, i64 %1654
  store i32 %1653, i32* %1655, align 4
  %1656 = add i32 %1649, 1
  %1657 = icmp ugt i32 %1656, %1628
  br i1 %1657, label %1633, label %1648

1658:                                             ; preds = %1615, %1611
  %1659 = phi i64 [ %1614, %1611 ], [ %1623, %1615 ]
  %1660 = phi i32 [ %1613, %1611 ], [ %1622, %1615 ]
  %1661 = phi i32 [ %1604, %1611 ], [ %1619, %1615 ]
  %1662 = add i32 %1661, -4
  store i32 %1662, i32* %371, align 16
  %1663 = mul nuw nsw i64 %1659, 12
  %1664 = getelementptr %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 0, i32 8, i64 %1663
  %1665 = bitcast i32* %1664 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %393, i8* align 4 %1665, i64 12, i1 false) #6
  br label %1666

1666:                                             ; preds = %1658, %1635, %1633, %1594, %1591
  %1667 = phi i32 [ %1593, %1591 ], [ %1596, %1594 ], [ %1627, %1633 ], [ %1627, %1635 ], [ %1660, %1658 ]
  %1668 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1545, i32 1
  store i32 %1667, i32* %1668, align 4
  %1669 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1545, i32 8, i64 0
  %1670 = load <4 x i32>, <4 x i32>* %5, align 16
  %1671 = bitcast i32* %1669 to <4 x i32>*
  store <4 x i32> %1670, <4 x i32>* %1671, align 4
  %1672 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1545, i32 0
  %1673 = load i32, i32* %1672, align 4
  %1674 = load i8* (i8*)*, i8* (i8*)** %364, align 8
  %1675 = load i8*, i8** %351, align 8
  %1676 = tail call i8* %1674(i8* %1675) #6
  %1677 = getelementptr inbounds i8, i8* %1676, i64 -1
  %1678 = load i8, i8* %1677, align 1
  %1679 = extractelement <4 x i32> %1670, i32 0
  %1680 = add i32 %1679, 1
  %1681 = zext i32 %1680 to i64
  %1682 = sub nsw i64 0, %1681
  %1683 = getelementptr inbounds i8, i8* %1677, i64 %1682
  %1684 = load i8, i8* %1683, align 1
  %1685 = load i32, i32* %383, align 8
  %1686 = and i32 %1685, %1544
  %1687 = zext i32 %1667 to i64
  %1688 = zext i32 %1686 to i64
  %1689 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 38, i64 %1687, i64 %1688
  %1690 = load i32, i32* %1689, align 4
  %1691 = lshr i32 %1690, 4
  %1692 = zext i32 %1691 to i64
  %1693 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %1692
  %1694 = load i32, i32* %1693, align 4
  %1695 = add i32 %1694, %1673
  %1696 = load i32*, i32** %384, align 8
  %1697 = load i32, i32* %385, align 4
  %1698 = and i32 %1697, %1544
  %1699 = load i32, i32* %386, align 8
  %1700 = shl i32 %1698, %1699
  %1701 = getelementptr inbounds i8, i8* %1676, i64 -2
  %1702 = load i8, i8* %1701, align 1
  %1703 = zext i8 %1702 to i32
  %1704 = sub i32 8, %1699
  %1705 = lshr i32 %1703, %1704
  %1706 = add i32 %1705, %1700
  %1707 = mul i32 %1706, 768
  %1708 = zext i32 %1707 to i64
  %1709 = getelementptr inbounds i32, i32* %1696, i64 %1708
  %1710 = icmp ult i32 %1667, 7
  %1711 = zext i8 %1678 to i32
  br i1 %1710, label %1743, label %1712

1712:                                             ; preds = %1666
  %1713 = zext i8 %1684 to i32
  %1714 = or i32 %1711, 256
  br label %1715

1715:                                             ; preds = %1715, %1712
  %1716 = phi i32 [ %1713, %1712 ], [ %1720, %1715 ]
  %1717 = phi i32 [ %1714, %1712 ], [ %1738, %1715 ]
  %1718 = phi i32 [ 0, %1712 ], [ %1737, %1715 ]
  %1719 = phi i32 [ 256, %1712 ], [ %1741, %1715 ]
  %1720 = shl i32 %1716, 1
  %1721 = and i32 %1719, %1720
  %1722 = lshr i32 %1717, 8
  %1723 = add i32 %1719, %1722
  %1724 = add i32 %1723, %1721
  %1725 = zext i32 %1724 to i64
  %1726 = getelementptr inbounds i32, i32* %1709, i64 %1725
  %1727 = load i32, i32* %1726, align 4
  %1728 = lshr i32 %1717, 7
  %1729 = and i32 %1728, 1
  %1730 = sub nsw i32 0, %1729
  %1731 = and i32 %1730, 2032
  %1732 = xor i32 %1727, %1731
  %1733 = lshr i32 %1732, 4
  %1734 = zext i32 %1733 to i64
  %1735 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %1734
  %1736 = load i32, i32* %1735, align 4
  %1737 = add i32 %1736, %1718
  %1738 = shl i32 %1717, 1
  %1739 = xor i32 %1720, -1
  %1740 = xor i32 %1738, %1739
  %1741 = and i32 %1719, %1740
  %1742 = icmp ult i32 %1738, 65536
  br i1 %1742, label %1715, label %1764

1743:                                             ; preds = %1666
  %1744 = or i32 %1711, 256
  br label %1745

1745:                                             ; preds = %1745, %1743
  %1746 = phi i32 [ %1744, %1743 ], [ %1762, %1745 ]
  %1747 = phi i32 [ 0, %1743 ], [ %1761, %1745 ]
  %1748 = lshr i32 %1746, 8
  %1749 = zext i32 %1748 to i64
  %1750 = getelementptr inbounds i32, i32* %1709, i64 %1749
  %1751 = load i32, i32* %1750, align 4
  %1752 = lshr i32 %1746, 7
  %1753 = and i32 %1752, 1
  %1754 = sub nsw i32 0, %1753
  %1755 = and i32 %1754, 2032
  %1756 = xor i32 %1755, %1751
  %1757 = lshr i32 %1756, 4
  %1758 = zext i32 %1757 to i64
  %1759 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %1758
  %1760 = load i32, i32* %1759, align 4
  %1761 = add i32 %1760, %1747
  %1762 = shl i32 %1746, 1
  %1763 = icmp ult i32 %1762, 65536
  br i1 %1763, label %1745, label %1764

1764:                                             ; preds = %1715, %1745
  %1765 = phi i32 [ %1761, %1745 ], [ %1737, %1715 ]
  %1766 = add i32 %1695, %1765
  %1767 = add i32 %1444, 2
  %1768 = zext i32 %1767 to i64
  %1769 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1768, i32 0
  %1770 = load i32, i32* %1769, align 4
  %1771 = icmp ult i32 %1766, %1770
  br i1 %1771, label %1772, label %1778

1772:                                             ; preds = %1764
  store i32 %1766, i32* %1769, align 4
  %1773 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1768, i32 6
  store i32 %1441, i32* %1773, align 4
  %1774 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1768, i32 7
  store i32 -1, i32* %1774, align 4
  %1775 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1768, i32 2
  store i32 0, i32* %1775, align 4
  %1776 = load i32, i32* %1689, align 4
  %1777 = lshr i32 %1776, 4
  br label %1778

1778:                                             ; preds = %1772, %1764
  %1779 = phi i32 [ %1777, %1772 ], [ %1691, %1764 ]
  %1780 = phi i32 [ %1766, %1772 ], [ %1770, %1764 ]
  %1781 = phi i32 [ 1, %1772 ], [ 0, %1764 ]
  %1782 = xor i32 %1779, 127
  %1783 = zext i32 %1782 to i64
  %1784 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %1783
  %1785 = load i32, i32* %1784, align 4
  %1786 = add i32 %1785, %1673
  %1787 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 39, i64 %1687
  %1788 = load i32, i32* %1787, align 4
  %1789 = lshr i32 %1788, 4
  %1790 = xor i32 %1789, 127
  %1791 = zext i32 %1790 to i64
  %1792 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %1791
  %1793 = load i32, i32* %1792, align 4
  %1794 = add i32 %1793, %1786
  %1795 = icmp eq i8 %1684, %1678
  br i1 %1795, label %1796, label %1823

1796:                                             ; preds = %1778
  %1797 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1768, i32 6
  %1798 = load i32, i32* %1797, align 4
  %1799 = icmp ult i32 %1798, %1441
  br i1 %1799, label %1800, label %1804

1800:                                             ; preds = %1796
  %1801 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1768, i32 7
  %1802 = load i32, i32* %1801, align 4
  %1803 = icmp eq i32 %1802, 0
  br i1 %1803, label %1823, label %1804

1804:                                             ; preds = %1800, %1796
  %1805 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 40, i64 %1687
  %1806 = load i32, i32* %1805, align 4
  %1807 = lshr i32 %1806, 4
  %1808 = zext i32 %1807 to i64
  %1809 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %1808
  %1810 = load i32, i32* %1809, align 4
  %1811 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 43, i64 %1687, i64 %1688
  %1812 = load i32, i32* %1811, align 4
  %1813 = lshr i32 %1812, 4
  %1814 = zext i32 %1813 to i64
  %1815 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %1814
  %1816 = load i32, i32* %1815, align 4
  %1817 = add i32 %1810, %1794
  %1818 = add i32 %1817, %1816
  %1819 = icmp ugt i32 %1818, %1780
  br i1 %1819, label %1823, label %1820

1820:                                             ; preds = %1804
  store i32 %1818, i32* %1769, align 4
  store i32 %1441, i32* %1797, align 4
  %1821 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1768, i32 7
  store i32 0, i32* %1821, align 4
  %1822 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1768, i32 2
  store i32 0, i32* %1822, align 4
  br label %1823

1823:                                             ; preds = %1820, %1804, %1800, %1778
  %1824 = phi i32 [ %1781, %1800 ], [ %1781, %1778 ], [ 1, %1820 ], [ %1781, %1804 ]
  %1825 = load i32, i32* %360, align 8
  %1826 = sub i32 4094, %1444
  %1827 = icmp ult i32 %1826, %1825
  %1828 = select i1 %1827, i32 %1826, i32 %1825
  %1829 = icmp ult i32 %1828, 2
  br i1 %1829, label %2628, label %1830

1830:                                             ; preds = %1823
  %1831 = load i32, i32* %363, align 4
  %1832 = icmp ugt i32 %1828, %1831
  %1833 = select i1 %1832, i32 %1831, i32 %1828
  %1834 = icmp ne i32 %1824, 0
  %1835 = or i1 %1795, %1834
  br i1 %1835, label %1950, label %1836

1836:                                             ; preds = %1830
  %1837 = zext i32 %1679 to i64
  %1838 = sub nsw i64 0, %1837
  %1839 = getelementptr inbounds i8, i8* %1701, i64 %1838
  %1840 = add i32 %1831, 1
  %1841 = icmp ugt i32 %1840, %1828
  %1842 = select i1 %1841, i32 %1828, i32 %1840
  %1843 = icmp ugt i32 %1842, 1
  br i1 %1843, label %1844, label %1950

1844:                                             ; preds = %1836
  %1845 = zext i32 %1842 to i64
  br label %1846

1846:                                             ; preds = %1854, %1844
  %1847 = phi i64 [ 1, %1844 ], [ %1855, %1854 ]
  %1848 = phi i32 [ 1, %1844 ], [ %1856, %1854 ]
  %1849 = getelementptr inbounds i8, i8* %1677, i64 %1847
  %1850 = load i8, i8* %1849, align 1
  %1851 = getelementptr inbounds i8, i8* %1839, i64 %1847
  %1852 = load i8, i8* %1851, align 1
  %1853 = icmp eq i8 %1850, %1852
  br i1 %1853, label %1854, label %1858

1854:                                             ; preds = %1846
  %1855 = add nuw nsw i64 %1847, 1
  %1856 = add nuw i32 %1848, 1
  %1857 = icmp ult i64 %1855, %1845
  br i1 %1857, label %1846, label %1860

1858:                                             ; preds = %1846
  %1859 = trunc i64 %1847 to i32
  br label %1860

1860:                                             ; preds = %1854, %1858
  %1861 = phi i32 [ %1859, %1858 ], [ %1856, %1854 ]
  %1862 = add i32 %1861, -1
  %1863 = icmp ugt i32 %1862, 1
  br i1 %1863, label %1864, label %1950

1864:                                             ; preds = %1860
  %1865 = getelementptr inbounds [12 x i32], [12 x i32]* @kLiteralNextStates, i64 0, i64 %1687
  %1866 = load i32, i32* %1865, align 4
  %1867 = add i32 %1442, 2
  %1868 = and i32 %1685, %1867
  %1869 = zext i32 %1866 to i64
  %1870 = zext i32 %1868 to i64
  %1871 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 38, i64 %1869, i64 %1870
  %1872 = load i32, i32* %1871, align 4
  %1873 = lshr i32 %1872, 4
  %1874 = xor i32 %1873, 127
  %1875 = zext i32 %1874 to i64
  %1876 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %1875
  %1877 = load i32, i32* %1876, align 4
  %1878 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 39, i64 %1869
  %1879 = load i32, i32* %1878, align 4
  %1880 = lshr i32 %1879, 4
  %1881 = xor i32 %1880, 127
  %1882 = zext i32 %1881 to i64
  %1883 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %1882
  %1884 = load i32, i32* %1883, align 4
  %1885 = add i32 %1862, %1767
  %1886 = icmp ult i32 %1443, %1885
  br i1 %1886, label %1887, label %1917

1887:                                             ; preds = %1864
  %1888 = zext i32 %1443 to i64
  %1889 = add i32 %1861, %1441
  %1890 = zext i32 %1889 to i64
  %1891 = sub nsw i64 %1890, %1888
  %1892 = xor i64 %1888, -1
  %1893 = add nsw i64 %1892, %1890
  %1894 = and i64 %1891, 3
  %1895 = icmp eq i64 %1894, 0
  br i1 %1895, label %1903, label %1896

1896:                                             ; preds = %1887, %1896
  %1897 = phi i64 [ %1899, %1896 ], [ %1888, %1887 ]
  %1898 = phi i64 [ %1901, %1896 ], [ %1894, %1887 ]
  %1899 = add nuw nsw i64 %1897, 1
  %1900 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1899, i32 0
  store i32 1073741824, i32* %1900, align 8
  %1901 = add i64 %1898, -1
  %1902 = icmp eq i64 %1901, 0
  br i1 %1902, label %1903, label %1896, !llvm.loop !13

1903:                                             ; preds = %1896, %1887
  %1904 = phi i64 [ %1888, %1887 ], [ %1899, %1896 ]
  %1905 = icmp ult i64 %1893, 3
  br i1 %1905, label %1917, label %1906

1906:                                             ; preds = %1903, %1906
  %1907 = phi i64 [ %1914, %1906 ], [ %1904, %1903 ]
  %1908 = add nuw nsw i64 %1907, 1
  %1909 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1908, i32 0
  store i32 1073741824, i32* %1909, align 8
  %1910 = add nuw nsw i64 %1907, 2
  %1911 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1910, i32 0
  store i32 1073741824, i32* %1911, align 8
  %1912 = add nuw nsw i64 %1907, 3
  %1913 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1912, i32 0
  store i32 1073741824, i32* %1913, align 8
  %1914 = add nuw nsw i64 %1907, 4
  %1915 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1914, i32 0
  store i32 1073741824, i32* %1915, align 8
  %1916 = icmp eq i64 %1914, %1890
  br i1 %1916, label %1917, label %1906

1917:                                             ; preds = %1903, %1906, %1864
  %1918 = phi i32 [ %1443, %1864 ], [ %1889, %1906 ], [ %1889, %1903 ]
  %1919 = add i32 %1861, -3
  %1920 = zext i32 %1919 to i64
  %1921 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 2, i64 %1870, i64 %1920
  %1922 = load i32, i32* %1921, align 4
  %1923 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 40, i64 %1869
  %1924 = load i32, i32* %1923, align 4
  %1925 = lshr i32 %1924, 4
  %1926 = zext i32 %1925 to i64
  %1927 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %1926
  %1928 = load i32, i32* %1927, align 4
  %1929 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 43, i64 %1869, i64 %1870
  %1930 = load i32, i32* %1929, align 4
  %1931 = lshr i32 %1930, 4
  %1932 = xor i32 %1931, 127
  %1933 = zext i32 %1932 to i64
  %1934 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %1933
  %1935 = load i32, i32* %1934, align 4
  %1936 = add i32 %1877, %1766
  %1937 = add i32 %1936, %1884
  %1938 = add i32 %1937, %1922
  %1939 = add i32 %1938, %1928
  %1940 = add i32 %1939, %1935
  %1941 = zext i32 %1885 to i64
  %1942 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1941, i32 0
  %1943 = load i32, i32* %1942, align 4
  %1944 = icmp ult i32 %1940, %1943
  br i1 %1944, label %1945, label %1950

1945:                                             ; preds = %1917
  store i32 %1940, i32* %1942, align 4
  %1946 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1941, i32 6
  store i32 %1767, i32* %1946, align 4
  %1947 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1941, i32 7
  store i32 0, i32* %1947, align 4
  %1948 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1941, i32 2
  store i32 1, i32* %1948, align 4
  %1949 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %1941, i32 3
  store i32 0, i32* %1949, align 4
  br label %1950

1950:                                             ; preds = %1945, %1917, %1860, %1836, %1830
  %1951 = phi i32 [ %1443, %1830 ], [ %1443, %1860 ], [ %1918, %1945 ], [ %1918, %1917 ], [ %1443, %1836 ]
  %1952 = icmp ugt i32 %1833, 2
  %1953 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 40, i64 %1687
  %1954 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 41, i64 %1687
  %1955 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 42, i64 %1687
  %1956 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 43, i64 %1687, i64 %1688
  %1957 = getelementptr inbounds [12 x i32], [12 x i32]* @kRepNextStates, i64 0, i64 %1687
  %1958 = zext i32 %1833 to i64
  br label %1959

1959:                                             ; preds = %2282, %1950
  %1960 = phi i32 [ %1679, %1950 ], [ %2284, %2282 ]
  %1961 = phi i64 [ 0, %1950 ], [ %2280, %2282 ]
  %1962 = phi i32 [ 2, %1950 ], [ %2279, %2282 ]
  %1963 = phi i32 [ %1951, %1950 ], [ %2278, %2282 ]
  %1964 = zext i32 %1960 to i64
  %1965 = sub nsw i64 0, %1964
  %1966 = getelementptr inbounds i8, i8* %1701, i64 %1965
  %1967 = load i8, i8* %1677, align 1
  %1968 = load i8, i8* %1966, align 1
  %1969 = icmp eq i8 %1967, %1968
  br i1 %1969, label %1970, label %2277

1970:                                             ; preds = %1959
  %1971 = load i8, i8* %1676, align 1
  %1972 = getelementptr inbounds i8, i8* %1966, i64 1
  %1973 = load i8, i8* %1972, align 1
  %1974 = icmp eq i8 %1971, %1973
  br i1 %1974, label %1975, label %2277

1975:                                             ; preds = %1970
  br i1 %1952, label %1976, label %1990

1976:                                             ; preds = %1975, %1984
  %1977 = phi i64 [ %1985, %1984 ], [ 2, %1975 ]
  %1978 = phi i32 [ %1986, %1984 ], [ 2, %1975 ]
  %1979 = getelementptr inbounds i8, i8* %1677, i64 %1977
  %1980 = load i8, i8* %1979, align 1
  %1981 = getelementptr inbounds i8, i8* %1966, i64 %1977
  %1982 = load i8, i8* %1981, align 1
  %1983 = icmp eq i8 %1980, %1982
  br i1 %1983, label %1984, label %1988

1984:                                             ; preds = %1976
  %1985 = add nuw nsw i64 %1977, 1
  %1986 = add nuw i32 %1978, 1
  %1987 = icmp ult i64 %1985, %1958
  br i1 %1987, label %1976, label %1990

1988:                                             ; preds = %1976
  %1989 = trunc i64 %1977 to i32
  br label %1990

1990:                                             ; preds = %1984, %1988, %1975
  %1991 = phi i32 [ 2, %1975 ], [ %1989, %1988 ], [ %1986, %1984 ]
  %1992 = add i32 %1991, %1441
  %1993 = icmp ult i32 %1963, %1992
  br i1 %1993, label %1994, label %2023

1994:                                             ; preds = %1990
  %1995 = zext i32 %1963 to i64
  %1996 = zext i32 %1992 to i64
  %1997 = sub nsw i64 %1996, %1995
  %1998 = xor i64 %1995, -1
  %1999 = add nsw i64 %1998, %1996
  %2000 = and i64 %1997, 3
  %2001 = icmp eq i64 %2000, 0
  br i1 %2001, label %2009, label %2002

2002:                                             ; preds = %1994, %2002
  %2003 = phi i64 [ %2005, %2002 ], [ %1995, %1994 ]
  %2004 = phi i64 [ %2007, %2002 ], [ %2000, %1994 ]
  %2005 = add nuw nsw i64 %2003, 1
  %2006 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2005, i32 0
  store i32 1073741824, i32* %2006, align 8
  %2007 = add i64 %2004, -1
  %2008 = icmp eq i64 %2007, 0
  br i1 %2008, label %2009, label %2002, !llvm.loop !14

2009:                                             ; preds = %2002, %1994
  %2010 = phi i64 [ %1995, %1994 ], [ %2005, %2002 ]
  %2011 = icmp ult i64 %1999, 3
  br i1 %2011, label %2023, label %2012

2012:                                             ; preds = %2009, %2012
  %2013 = phi i64 [ %2020, %2012 ], [ %2010, %2009 ]
  %2014 = add nuw nsw i64 %2013, 1
  %2015 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2014, i32 0
  store i32 1073741824, i32* %2015, align 8
  %2016 = add nuw nsw i64 %2013, 2
  %2017 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2016, i32 0
  store i32 1073741824, i32* %2017, align 8
  %2018 = add nuw nsw i64 %2013, 3
  %2019 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2018, i32 0
  store i32 1073741824, i32* %2019, align 8
  %2020 = add nuw nsw i64 %2013, 4
  %2021 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2020, i32 0
  store i32 1073741824, i32* %2021, align 8
  %2022 = icmp eq i64 %2020, %1996
  br i1 %2022, label %2023, label %2012

2023:                                             ; preds = %2009, %2012, %1990
  %2024 = phi i32 [ %1963, %1990 ], [ %1992, %2012 ], [ %1992, %2009 ]
  %2025 = icmp eq i64 %1961, 0
  %2026 = load i32, i32* %1953, align 4
  %2027 = lshr i32 %2026, 4
  br i1 %2025, label %2028, label %2038

2028:                                             ; preds = %2023
  %2029 = zext i32 %2027 to i64
  %2030 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %2029
  %2031 = load i32, i32* %2030, align 4
  %2032 = load i32, i32* %1956, align 4
  %2033 = lshr i32 %2032, 4
  %2034 = xor i32 %2033, 127
  %2035 = zext i32 %2034 to i64
  %2036 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %2035
  %2037 = load i32, i32* %2036, align 4
  br label %2065

2038:                                             ; preds = %2023
  %2039 = xor i32 %2027, 127
  %2040 = zext i32 %2039 to i64
  %2041 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %2040
  %2042 = load i32, i32* %2041, align 4
  %2043 = icmp eq i64 %1961, 1
  %2044 = load i32, i32* %1954, align 4
  %2045 = lshr i32 %2044, 4
  br i1 %2043, label %2046, label %2050

2046:                                             ; preds = %2038
  %2047 = zext i32 %2045 to i64
  %2048 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %2047
  %2049 = load i32, i32* %2048, align 4
  br label %2065

2050:                                             ; preds = %2038
  %2051 = xor i32 %2045, 127
  %2052 = zext i32 %2051 to i64
  %2053 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %2052
  %2054 = load i32, i32* %2053, align 4
  %2055 = add i32 %2054, %2042
  %2056 = load i32, i32* %1955, align 4
  %2057 = trunc i64 %1961 to i32
  %2058 = sub i32 2, %2057
  %2059 = and i32 %2058, 2032
  %2060 = xor i32 %2056, %2059
  %2061 = lshr i32 %2060, 4
  %2062 = zext i32 %2061 to i64
  %2063 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %2062
  %2064 = load i32, i32* %2063, align 4
  br label %2065

2065:                                             ; preds = %2050, %2046, %2028
  %2066 = phi i32 [ %2064, %2050 ], [ %2042, %2046 ], [ %2031, %2028 ]
  %2067 = phi i32 [ %2055, %2050 ], [ %2049, %2046 ], [ %2037, %2028 ]
  %2068 = add i32 %2067, %2066
  %2069 = add i32 %2068, %1794
  %2070 = zext i32 %1991 to i64
  %2071 = trunc i64 %1961 to i32
  br label %2072

2072:                                             ; preds = %2090, %2065
  %2073 = phi i64 [ %2093, %2090 ], [ %2070, %2065 ]
  %2074 = phi i32 [ %2091, %2090 ], [ %1991, %2065 ]
  %2075 = add i32 %2074, -2
  %2076 = zext i32 %2075 to i64
  %2077 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 2, i64 %1688, i64 %2076
  %2078 = load i32, i32* %2077, align 4
  %2079 = add i32 %2078, %2069
  %2080 = trunc i64 %2073 to i32
  %2081 = add i32 %1441, %2080
  %2082 = zext i32 %2081 to i64
  %2083 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2082, i32 0
  %2084 = load i32, i32* %2083, align 4
  %2085 = icmp ult i32 %2079, %2084
  br i1 %2085, label %2086, label %2090

2086:                                             ; preds = %2072
  store i32 %2079, i32* %2083, align 4
  %2087 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2082, i32 6
  store i32 %1441, i32* %2087, align 4
  %2088 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2082, i32 7
  store i32 %2071, i32* %2088, align 4
  %2089 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2082, i32 2
  store i32 0, i32* %2089, align 4
  br label %2090

2090:                                             ; preds = %2086, %2072
  %2091 = add i32 %2080, -1
  %2092 = icmp ugt i32 %2091, 1
  %2093 = add nsw i64 %2073, -1
  br i1 %2092, label %2072, label %2094

2094:                                             ; preds = %2090
  %2095 = add i32 %1991, 1
  %2096 = select i1 %2025, i32 %2095, i32 %1962
  %2097 = add i32 %2095, %1831
  %2098 = icmp ugt i32 %2097, %1828
  %2099 = select i1 %2098, i32 %1828, i32 %2097
  %2100 = icmp ult i32 %2095, %2099
  br i1 %2100, label %2101, label %2118

2101:                                             ; preds = %2094
  %2102 = zext i32 %2095 to i64
  %2103 = zext i32 %2099 to i64
  br label %2104

2104:                                             ; preds = %2112, %2101
  %2105 = phi i64 [ %2102, %2101 ], [ %2113, %2112 ]
  %2106 = phi i32 [ %2095, %2101 ], [ %2114, %2112 ]
  %2107 = getelementptr inbounds i8, i8* %1677, i64 %2105
  %2108 = load i8, i8* %2107, align 1
  %2109 = getelementptr inbounds i8, i8* %1966, i64 %2105
  %2110 = load i8, i8* %2109, align 1
  %2111 = icmp eq i8 %2108, %2110
  br i1 %2111, label %2112, label %2116

2112:                                             ; preds = %2104
  %2113 = add nuw nsw i64 %2105, 1
  %2114 = add nuw i32 %2106, 1
  %2115 = icmp ult i64 %2113, %2103
  br i1 %2115, label %2104, label %2118

2116:                                             ; preds = %2104
  %2117 = trunc i64 %2105 to i32
  br label %2118

2118:                                             ; preds = %2112, %2116, %2094
  %2119 = phi i32 [ %2095, %2094 ], [ %2117, %2116 ], [ %2114, %2112 ]
  %2120 = sub i32 %2119, %2095
  %2121 = icmp ugt i32 %2120, 1
  br i1 %2121, label %2122, label %2277

2122:                                             ; preds = %2118
  %2123 = load i32, i32* %1957, align 4
  %2124 = add i32 %1991, %1544
  %2125 = and i32 %2124, %1685
  %2126 = add i32 %1991, -2
  %2127 = zext i32 %2126 to i64
  %2128 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 2, i64 %1688, i64 %2127
  %2129 = load i32, i32* %2128, align 4
  %2130 = zext i32 %2123 to i64
  %2131 = zext i32 %2125 to i64
  %2132 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 38, i64 %2130, i64 %2131
  %2133 = load i32, i32* %2132, align 4
  %2134 = lshr i32 %2133, 4
  %2135 = zext i32 %2134 to i64
  %2136 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %2135
  %2137 = load i32, i32* %2136, align 4
  %2138 = and i32 %2124, %1697
  %2139 = shl i32 %2138, %1699
  %2140 = add i32 %1991, -1
  %2141 = zext i32 %2140 to i64
  %2142 = getelementptr inbounds i8, i8* %1677, i64 %2141
  %2143 = load i8, i8* %2142, align 1
  %2144 = zext i8 %2143 to i32
  %2145 = lshr i32 %2144, %1704
  %2146 = add i32 %2145, %2139
  %2147 = mul i32 %2146, 768
  %2148 = zext i32 %2147 to i64
  %2149 = getelementptr inbounds i32, i32* %1696, i64 %2148
  %2150 = getelementptr inbounds i8, i8* %1677, i64 %2070
  %2151 = load i8, i8* %2150, align 1
  %2152 = zext i8 %2151 to i32
  %2153 = getelementptr inbounds i8, i8* %1966, i64 %2070
  %2154 = load i8, i8* %2153, align 1
  %2155 = zext i8 %2154 to i32
  %2156 = or i32 %2152, 256
  br label %2157

2157:                                             ; preds = %2157, %2122
  %2158 = phi i32 [ %2155, %2122 ], [ %2162, %2157 ]
  %2159 = phi i32 [ %2156, %2122 ], [ %2180, %2157 ]
  %2160 = phi i32 [ 0, %2122 ], [ %2179, %2157 ]
  %2161 = phi i32 [ 256, %2122 ], [ %2183, %2157 ]
  %2162 = shl i32 %2158, 1
  %2163 = and i32 %2161, %2162
  %2164 = lshr i32 %2159, 8
  %2165 = add i32 %2161, %2164
  %2166 = add i32 %2165, %2163
  %2167 = zext i32 %2166 to i64
  %2168 = getelementptr inbounds i32, i32* %2149, i64 %2167
  %2169 = load i32, i32* %2168, align 4
  %2170 = lshr i32 %2159, 7
  %2171 = and i32 %2170, 1
  %2172 = sub nsw i32 0, %2171
  %2173 = and i32 %2172, 2032
  %2174 = xor i32 %2169, %2173
  %2175 = lshr i32 %2174, 4
  %2176 = zext i32 %2175 to i64
  %2177 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %2176
  %2178 = load i32, i32* %2177, align 4
  %2179 = add i32 %2178, %2160
  %2180 = shl i32 %2159, 1
  %2181 = xor i32 %2162, -1
  %2182 = xor i32 %2180, %2181
  %2183 = and i32 %2161, %2182
  %2184 = icmp ult i32 %2180, 65536
  br i1 %2184, label %2157, label %2185

2185:                                             ; preds = %2157
  %2186 = getelementptr inbounds [12 x i32], [12 x i32]* @kLiteralNextStates, i64 0, i64 %2130
  %2187 = load i32, i32* %2186, align 4
  %2188 = add i32 %2124, 1
  %2189 = and i32 %2188, %1685
  %2190 = zext i32 %2187 to i64
  %2191 = zext i32 %2189 to i64
  %2192 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 38, i64 %2190, i64 %2191
  %2193 = load i32, i32* %2192, align 4
  %2194 = lshr i32 %2193, 4
  %2195 = xor i32 %2194, 127
  %2196 = zext i32 %2195 to i64
  %2197 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %2196
  %2198 = load i32, i32* %2197, align 4
  %2199 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 39, i64 %2190
  %2200 = load i32, i32* %2199, align 4
  %2201 = lshr i32 %2200, 4
  %2202 = xor i32 %2201, 127
  %2203 = zext i32 %2202 to i64
  %2204 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %2203
  %2205 = load i32, i32* %2204, align 4
  %2206 = add i32 %1992, 1
  %2207 = add i32 %2120, %2206
  %2208 = icmp ult i32 %2024, %2207
  br i1 %2208, label %2209, label %2239

2209:                                             ; preds = %2185
  %2210 = zext i32 %2024 to i64
  %2211 = add i32 %2119, %1441
  %2212 = zext i32 %2211 to i64
  %2213 = sub nsw i64 %2212, %2210
  %2214 = xor i64 %2210, -1
  %2215 = add nsw i64 %2214, %2212
  %2216 = and i64 %2213, 3
  %2217 = icmp eq i64 %2216, 0
  br i1 %2217, label %2225, label %2218

2218:                                             ; preds = %2209, %2218
  %2219 = phi i64 [ %2221, %2218 ], [ %2210, %2209 ]
  %2220 = phi i64 [ %2223, %2218 ], [ %2216, %2209 ]
  %2221 = add nuw nsw i64 %2219, 1
  %2222 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2221, i32 0
  store i32 1073741824, i32* %2222, align 8
  %2223 = add i64 %2220, -1
  %2224 = icmp eq i64 %2223, 0
  br i1 %2224, label %2225, label %2218, !llvm.loop !15

2225:                                             ; preds = %2218, %2209
  %2226 = phi i64 [ %2210, %2209 ], [ %2221, %2218 ]
  %2227 = icmp ult i64 %2215, 3
  br i1 %2227, label %2239, label %2228

2228:                                             ; preds = %2225, %2228
  %2229 = phi i64 [ %2236, %2228 ], [ %2226, %2225 ]
  %2230 = add nuw nsw i64 %2229, 1
  %2231 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2230, i32 0
  store i32 1073741824, i32* %2231, align 8
  %2232 = add nuw nsw i64 %2229, 2
  %2233 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2232, i32 0
  store i32 1073741824, i32* %2233, align 8
  %2234 = add nuw nsw i64 %2229, 3
  %2235 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2234, i32 0
  store i32 1073741824, i32* %2235, align 8
  %2236 = add nuw nsw i64 %2229, 4
  %2237 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2236, i32 0
  store i32 1073741824, i32* %2237, align 8
  %2238 = icmp eq i64 %2236, %2212
  br i1 %2238, label %2239, label %2228

2239:                                             ; preds = %2225, %2228, %2185
  %2240 = phi i32 [ %2024, %2185 ], [ %2211, %2228 ], [ %2211, %2225 ]
  %2241 = add i32 %2120, -2
  %2242 = zext i32 %2241 to i64
  %2243 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 2, i64 %2191, i64 %2242
  %2244 = load i32, i32* %2243, align 4
  %2245 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 40, i64 %2190
  %2246 = load i32, i32* %2245, align 4
  %2247 = lshr i32 %2246, 4
  %2248 = zext i32 %2247 to i64
  %2249 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %2248
  %2250 = load i32, i32* %2249, align 4
  %2251 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 43, i64 %2190, i64 %2191
  %2252 = load i32, i32* %2251, align 4
  %2253 = lshr i32 %2252, 4
  %2254 = xor i32 %2253, 127
  %2255 = zext i32 %2254 to i64
  %2256 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %2255
  %2257 = load i32, i32* %2256, align 4
  %2258 = add i32 %2129, %2069
  %2259 = add i32 %2258, %2137
  %2260 = add i32 %2259, %2179
  %2261 = add i32 %2260, %2198
  %2262 = add i32 %2261, %2205
  %2263 = add i32 %2262, %2244
  %2264 = add i32 %2263, %2250
  %2265 = add i32 %2264, %2257
  %2266 = zext i32 %2207 to i64
  %2267 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2266, i32 0
  %2268 = load i32, i32* %2267, align 4
  %2269 = icmp ult i32 %2265, %2268
  br i1 %2269, label %2270, label %2277

2270:                                             ; preds = %2239
  store i32 %2265, i32* %2267, align 4
  %2271 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2266, i32 6
  store i32 %2206, i32* %2271, align 4
  %2272 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2266, i32 7
  store i32 0, i32* %2272, align 4
  %2273 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2266, i32 2
  store i32 1, i32* %2273, align 4
  %2274 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2266, i32 3
  store i32 1, i32* %2274, align 4
  %2275 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2266, i32 4
  store i32 %1441, i32* %2275, align 4
  %2276 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2266, i32 5
  store i32 %2071, i32* %2276, align 4
  br label %2277

2277:                                             ; preds = %2270, %2239, %2118, %1970, %1959
  %2278 = phi i32 [ %1963, %1970 ], [ %1963, %1959 ], [ %2024, %2118 ], [ %2240, %2270 ], [ %2240, %2239 ]
  %2279 = phi i32 [ %1962, %1970 ], [ %1962, %1959 ], [ %2096, %2118 ], [ %2096, %2270 ], [ %2096, %2239 ]
  %2280 = add nuw nsw i64 %1961, 1
  %2281 = icmp eq i64 %2280, 4
  br i1 %2281, label %2285, label %2282

2282:                                             ; preds = %2277
  %2283 = getelementptr inbounds <4 x i32>, <4 x i32>* %5, i64 0, i64 %2280
  %2284 = load i32, i32* %2283, align 4
  br label %1959

2285:                                             ; preds = %2277
  %2286 = icmp ugt i32 %1494, %1833
  br i1 %2286, label %2287, label %2297

2287:                                             ; preds = %2285, %2287
  %2288 = phi i32 [ %2293, %2287 ], [ 0, %2285 ]
  %2289 = zext i32 %2288 to i64
  %2290 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 %2289
  %2291 = load i32, i32* %2290, align 4
  %2292 = icmp ugt i32 %1833, %2291
  %2293 = add i32 %2288, 2
  br i1 %2292, label %2287, label %2294

2294:                                             ; preds = %2287
  %2295 = zext i32 %2288 to i64
  %2296 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 %2295
  store i32 %1833, i32* %2296, align 4
  br label %2297

2297:                                             ; preds = %2294, %2285
  %2298 = phi i32 [ %2293, %2294 ], [ %1450, %2285 ]
  %2299 = phi i32 [ %1833, %2294 ], [ %1494, %2285 ]
  %2300 = icmp ult i32 %2299, %2279
  br i1 %2300, label %2628, label %2301

2301:                                             ; preds = %2297
  %2302 = load i32, i32* %1787, align 4
  %2303 = lshr i32 %2302, 4
  %2304 = zext i32 %2303 to i64
  %2305 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %2304
  %2306 = load i32, i32* %2305, align 4
  %2307 = add i32 %2306, %1786
  %2308 = add i32 %2299, %1441
  %2309 = icmp ult i32 %2278, %2308
  br i1 %2309, label %2310, label %2332

2310:                                             ; preds = %2301
  %2311 = zext i32 %2278 to i64
  %2312 = zext i32 %2308 to i64
  %2313 = sub nsw i64 %2312, %2311
  %2314 = xor i64 %2311, -1
  %2315 = add nsw i64 %2314, %2312
  %2316 = and i64 %2313, 3
  %2317 = icmp eq i64 %2316, 0
  br i1 %2317, label %2325, label %2318

2318:                                             ; preds = %2310, %2318
  %2319 = phi i64 [ %2321, %2318 ], [ %2311, %2310 ]
  %2320 = phi i64 [ %2323, %2318 ], [ %2316, %2310 ]
  %2321 = add nuw nsw i64 %2319, 1
  %2322 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2321, i32 0
  store i32 1073741824, i32* %2322, align 8
  %2323 = add i64 %2320, -1
  %2324 = icmp eq i64 %2323, 0
  br i1 %2324, label %2325, label %2318, !llvm.loop !16

2325:                                             ; preds = %2318, %2310
  %2326 = phi i64 [ %2311, %2310 ], [ %2321, %2318 ]
  %2327 = phi i64 [ undef, %2310 ], [ %2321, %2318 ]
  %2328 = icmp ult i64 %2315, 3
  br i1 %2328, label %2329, label %2334

2329:                                             ; preds = %2334, %2325
  %2330 = phi i64 [ %2327, %2325 ], [ %2342, %2334 ]
  %2331 = trunc i64 %2330 to i32
  br label %2332

2332:                                             ; preds = %2329, %2301
  %2333 = phi i32 [ %2278, %2301 ], [ %2331, %2329 ]
  br label %2345

2334:                                             ; preds = %2325, %2334
  %2335 = phi i64 [ %2342, %2334 ], [ %2326, %2325 ]
  %2336 = add nuw nsw i64 %2335, 1
  %2337 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2336, i32 0
  store i32 1073741824, i32* %2337, align 8
  %2338 = add nuw nsw i64 %2335, 2
  %2339 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2338, i32 0
  store i32 1073741824, i32* %2339, align 8
  %2340 = add nuw nsw i64 %2335, 3
  %2341 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2340, i32 0
  store i32 1073741824, i32* %2341, align 8
  %2342 = add nuw nsw i64 %2335, 4
  %2343 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2342, i32 0
  store i32 1073741824, i32* %2343, align 8
  %2344 = icmp ult i64 %2342, %2312
  br i1 %2344, label %2334, label %2329

2345:                                             ; preds = %2345, %2332
  %2346 = phi i32 [ %2351, %2345 ], [ 0, %2332 ]
  %2347 = zext i32 %2346 to i64
  %2348 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 %2347
  %2349 = load i32, i32* %2348, align 4
  %2350 = icmp ugt i32 %2279, %2349
  %2351 = add i32 %2346, 2
  br i1 %2350, label %2345, label %2352

2352:                                             ; preds = %2345
  %2353 = or i32 %2346, 1
  %2354 = zext i32 %2353 to i64
  %2355 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 %2354
  %2356 = load i32, i32* %2355, align 4
  %2357 = icmp ult i32 %2356, 524288
  %2358 = select i1 %2357, i32 6, i32 18
  %2359 = lshr i32 %2356, %2358
  %2360 = zext i32 %2359 to i64
  %2361 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 32, i64 %2360
  %2362 = load i8, i8* %2361, align 1
  %2363 = zext i8 %2362 to i32
  %2364 = shl nuw nsw i32 %2358, 1
  %2365 = add nuw nsw i32 %2364, %2363
  %2366 = getelementptr inbounds [12 x i32], [12 x i32]* @kMatchNextStates, i64 0, i64 %1687
  br label %2367

2367:                                             ; preds = %2352, %2618
  %2368 = phi i32 [ %2279, %2352 ], [ %2392, %2618 ]
  %2369 = phi i32 [ %2333, %2352 ], [ %2609, %2618 ]
  %2370 = phi i32 [ %2346, %2352 ], [ %2610, %2618 ]
  %2371 = phi i32 [ %2356, %2352 ], [ %2616, %2618 ]
  %2372 = phi i32 [ %2365, %2352 ], [ %2627, %2618 ]
  %2373 = phi i32 [ %2279, %2352 ], [ %2431, %2618 ]
  %2374 = zext i32 %2372 to i64
  br label %2375

2375:                                             ; preds = %2367, %2612
  %2376 = phi i32 [ %2392, %2612 ], [ %2368, %2367 ]
  %2377 = phi i32 [ %2609, %2612 ], [ %2369, %2367 ]
  %2378 = phi i32 [ %2610, %2612 ], [ %2370, %2367 ]
  %2379 = phi i32 [ %2616, %2612 ], [ %2371, %2367 ]
  %2380 = phi i32 [ %2431, %2612 ], [ %2373, %2367 ]
  %2381 = icmp ult i32 %2379, 128
  %2382 = and i32 %2379, 15
  %2383 = zext i32 %2382 to i64
  %2384 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 37, i64 %2383
  %2385 = zext i32 %2379 to i64
  %2386 = add i32 %2379, 4
  %2387 = zext i32 %2378 to i64
  %2388 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 %2387
  br label %2389

2389:                                             ; preds = %2375, %2424
  %2390 = phi i32 [ %2392, %2424 ], [ %2376, %2375 ]
  %2391 = phi i32 [ %2425, %2424 ], [ %2380, %2375 ]
  %2392 = add i32 %2390, 1
  %2393 = add i32 %2391, -2
  %2394 = zext i32 %2393 to i64
  %2395 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47, i32 2, i64 %1688, i64 %2394
  %2396 = load i32, i32* %2395, align 4
  %2397 = add i32 %2307, %2396
  %2398 = icmp ult i32 %2391, 5
  %2399 = select i1 %2398, i32 %2393, i32 3
  %2400 = zext i32 %2399 to i64
  br i1 %2381, label %2401, label %2404

2401:                                             ; preds = %2389
  %2402 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 36, i64 %2400, i64 %2385
  %2403 = load i32, i32* %2402, align 4
  br label %2409

2404:                                             ; preds = %2389
  %2405 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 35, i64 %2400, i64 %2374
  %2406 = load i32, i32* %2405, align 4
  %2407 = load i32, i32* %2384, align 4
  %2408 = add i32 %2407, %2406
  br label %2409

2409:                                             ; preds = %2404, %2401
  %2410 = phi i32 [ %2403, %2401 ], [ %2408, %2404 ]
  %2411 = add i32 %2397, %2410
  %2412 = add i32 %2391, %1441
  %2413 = zext i32 %2412 to i64
  %2414 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2413, i32 0
  %2415 = load i32, i32* %2414, align 4
  %2416 = icmp ult i32 %2411, %2415
  br i1 %2416, label %2417, label %2421

2417:                                             ; preds = %2409
  store i32 %2411, i32* %2414, align 4
  %2418 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2413, i32 6
  store i32 %1441, i32* %2418, align 4
  %2419 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2413, i32 7
  store i32 %2386, i32* %2419, align 4
  %2420 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2413, i32 2
  store i32 0, i32* %2420, align 4
  br label %2421

2421:                                             ; preds = %2417, %2409
  %2422 = load i32, i32* %2388, align 4
  %2423 = icmp eq i32 %2391, %2422
  br i1 %2423, label %2426, label %2424

2424:                                             ; preds = %2421
  %2425 = add i32 %2391, 1
  br label %2389

2426:                                             ; preds = %2421
  %2427 = zext i32 %2392 to i64
  %2428 = zext i32 %2379 to i64
  %2429 = sub nsw i64 0, %2428
  %2430 = getelementptr inbounds i8, i8* %1701, i64 %2429
  %2431 = add i32 %2391, 1
  %2432 = add i32 %2431, %1831
  %2433 = icmp ugt i32 %2432, %1828
  %2434 = select i1 %2433, i32 %1828, i32 %2432
  %2435 = icmp ult i32 %2431, %2434
  br i1 %2435, label %2436, label %2452

2436:                                             ; preds = %2426
  %2437 = zext i32 %2434 to i64
  br label %2438

2438:                                             ; preds = %2446, %2436
  %2439 = phi i64 [ %2427, %2436 ], [ %2447, %2446 ]
  %2440 = phi i32 [ %2431, %2436 ], [ %2448, %2446 ]
  %2441 = getelementptr inbounds i8, i8* %1677, i64 %2439
  %2442 = load i8, i8* %2441, align 1
  %2443 = getelementptr inbounds i8, i8* %2430, i64 %2439
  %2444 = load i8, i8* %2443, align 1
  %2445 = icmp eq i8 %2442, %2444
  br i1 %2445, label %2446, label %2450

2446:                                             ; preds = %2438
  %2447 = add nuw nsw i64 %2439, 1
  %2448 = add nuw i32 %2440, 1
  %2449 = icmp ult i64 %2447, %2437
  br i1 %2449, label %2438, label %2452

2450:                                             ; preds = %2438
  %2451 = trunc i64 %2439 to i32
  br label %2452

2452:                                             ; preds = %2446, %2450, %2426
  %2453 = phi i32 [ %2431, %2426 ], [ %2451, %2450 ], [ %2448, %2446 ]
  %2454 = sub i32 %2453, %2431
  %2455 = icmp ugt i32 %2454, 1
  br i1 %2455, label %2456, label %2608

2456:                                             ; preds = %2452
  %2457 = load i32, i32* %2366, align 4
  %2458 = add i32 %2391, %1544
  %2459 = and i32 %2458, %1685
  %2460 = zext i32 %2457 to i64
  %2461 = zext i32 %2459 to i64
  %2462 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 38, i64 %2460, i64 %2461
  %2463 = load i32, i32* %2462, align 4
  %2464 = lshr i32 %2463, 4
  %2465 = zext i32 %2464 to i64
  %2466 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %2465
  %2467 = load i32, i32* %2466, align 4
  %2468 = and i32 %2458, %1697
  %2469 = shl i32 %2468, %1699
  %2470 = add i32 %2391, -1
  %2471 = zext i32 %2470 to i64
  %2472 = getelementptr inbounds i8, i8* %1677, i64 %2471
  %2473 = load i8, i8* %2472, align 1
  %2474 = zext i8 %2473 to i32
  %2475 = lshr i32 %2474, %1704
  %2476 = add i32 %2475, %2469
  %2477 = mul i32 %2476, 768
  %2478 = zext i32 %2477 to i64
  %2479 = getelementptr inbounds i32, i32* %1696, i64 %2478
  %2480 = zext i32 %2391 to i64
  %2481 = getelementptr inbounds i8, i8* %1677, i64 %2480
  %2482 = load i8, i8* %2481, align 1
  %2483 = zext i8 %2482 to i32
  %2484 = getelementptr inbounds i8, i8* %2430, i64 %2480
  %2485 = load i8, i8* %2484, align 1
  %2486 = zext i8 %2485 to i32
  %2487 = or i32 %2483, 256
  br label %2488

2488:                                             ; preds = %2488, %2456
  %2489 = phi i32 [ %2486, %2456 ], [ %2493, %2488 ]
  %2490 = phi i32 [ %2487, %2456 ], [ %2511, %2488 ]
  %2491 = phi i32 [ 0, %2456 ], [ %2510, %2488 ]
  %2492 = phi i32 [ 256, %2456 ], [ %2514, %2488 ]
  %2493 = shl i32 %2489, 1
  %2494 = and i32 %2492, %2493
  %2495 = lshr i32 %2490, 8
  %2496 = add i32 %2492, %2495
  %2497 = add i32 %2496, %2494
  %2498 = zext i32 %2497 to i64
  %2499 = getelementptr inbounds i32, i32* %2479, i64 %2498
  %2500 = load i32, i32* %2499, align 4
  %2501 = lshr i32 %2490, 7
  %2502 = and i32 %2501, 1
  %2503 = sub nsw i32 0, %2502
  %2504 = and i32 %2503, 2032
  %2505 = xor i32 %2500, %2504
  %2506 = lshr i32 %2505, 4
  %2507 = zext i32 %2506 to i64
  %2508 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %2507
  %2509 = load i32, i32* %2508, align 4
  %2510 = add i32 %2509, %2491
  %2511 = shl i32 %2490, 1
  %2512 = xor i32 %2493, -1
  %2513 = xor i32 %2511, %2512
  %2514 = and i32 %2492, %2513
  %2515 = icmp ult i32 %2511, 65536
  br i1 %2515, label %2488, label %2516

2516:                                             ; preds = %2488
  %2517 = getelementptr inbounds [12 x i32], [12 x i32]* @kLiteralNextStates, i64 0, i64 %2460
  %2518 = load i32, i32* %2517, align 4
  %2519 = add i32 %2459, 1
  %2520 = and i32 %2519, %1685
  %2521 = zext i32 %2518 to i64
  %2522 = zext i32 %2520 to i64
  %2523 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 38, i64 %2521, i64 %2522
  %2524 = load i32, i32* %2523, align 4
  %2525 = lshr i32 %2524, 4
  %2526 = xor i32 %2525, 127
  %2527 = zext i32 %2526 to i64
  %2528 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %2527
  %2529 = load i32, i32* %2528, align 4
  %2530 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 39, i64 %2521
  %2531 = load i32, i32* %2530, align 4
  %2532 = lshr i32 %2531, 4
  %2533 = xor i32 %2532, 127
  %2534 = zext i32 %2533 to i64
  %2535 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %2534
  %2536 = load i32, i32* %2535, align 4
  %2537 = add i32 %2412, 1
  %2538 = add i32 %2454, %2537
  %2539 = icmp ult i32 %2377, %2538
  br i1 %2539, label %2540, label %2570

2540:                                             ; preds = %2516
  %2541 = zext i32 %2377 to i64
  %2542 = add i32 %2453, %1441
  %2543 = zext i32 %2542 to i64
  %2544 = sub nsw i64 %2543, %2541
  %2545 = xor i64 %2541, -1
  %2546 = add nsw i64 %2545, %2543
  %2547 = and i64 %2544, 3
  %2548 = icmp eq i64 %2547, 0
  br i1 %2548, label %2556, label %2549

2549:                                             ; preds = %2540, %2549
  %2550 = phi i64 [ %2552, %2549 ], [ %2541, %2540 ]
  %2551 = phi i64 [ %2554, %2549 ], [ %2547, %2540 ]
  %2552 = add nuw nsw i64 %2550, 1
  %2553 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2552, i32 0
  store i32 1073741824, i32* %2553, align 8
  %2554 = add i64 %2551, -1
  %2555 = icmp eq i64 %2554, 0
  br i1 %2555, label %2556, label %2549, !llvm.loop !17

2556:                                             ; preds = %2549, %2540
  %2557 = phi i64 [ %2541, %2540 ], [ %2552, %2549 ]
  %2558 = icmp ult i64 %2546, 3
  br i1 %2558, label %2570, label %2559

2559:                                             ; preds = %2556, %2559
  %2560 = phi i64 [ %2567, %2559 ], [ %2557, %2556 ]
  %2561 = add nuw nsw i64 %2560, 1
  %2562 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2561, i32 0
  store i32 1073741824, i32* %2562, align 8
  %2563 = add nuw nsw i64 %2560, 2
  %2564 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2563, i32 0
  store i32 1073741824, i32* %2564, align 8
  %2565 = add nuw nsw i64 %2560, 3
  %2566 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2565, i32 0
  store i32 1073741824, i32* %2566, align 8
  %2567 = add nuw nsw i64 %2560, 4
  %2568 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2567, i32 0
  store i32 1073741824, i32* %2568, align 8
  %2569 = icmp eq i64 %2567, %2543
  br i1 %2569, label %2570, label %2559

2570:                                             ; preds = %2556, %2559, %2516
  %2571 = phi i32 [ %2377, %2516 ], [ %2542, %2559 ], [ %2542, %2556 ]
  %2572 = add i32 %2454, -2
  %2573 = zext i32 %2572 to i64
  %2574 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 48, i32 2, i64 %2522, i64 %2573
  %2575 = load i32, i32* %2574, align 4
  %2576 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 40, i64 %2521
  %2577 = load i32, i32* %2576, align 4
  %2578 = lshr i32 %2577, 4
  %2579 = zext i32 %2578 to i64
  %2580 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %2579
  %2581 = load i32, i32* %2580, align 4
  %2582 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 43, i64 %2521, i64 %2522
  %2583 = load i32, i32* %2582, align 4
  %2584 = lshr i32 %2583, 4
  %2585 = xor i32 %2584, 127
  %2586 = zext i32 %2585 to i64
  %2587 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %2586
  %2588 = load i32, i32* %2587, align 4
  %2589 = add i32 %2467, %2411
  %2590 = add i32 %2589, %2510
  %2591 = add i32 %2590, %2529
  %2592 = add i32 %2591, %2536
  %2593 = add i32 %2592, %2575
  %2594 = add i32 %2593, %2581
  %2595 = add i32 %2594, %2588
  %2596 = zext i32 %2538 to i64
  %2597 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2596, i32 0
  %2598 = load i32, i32* %2597, align 4
  %2599 = icmp ult i32 %2595, %2598
  br i1 %2599, label %2600, label %2608

2600:                                             ; preds = %2570
  store i32 %2595, i32* %2597, align 4
  %2601 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2596, i32 6
  store i32 %2537, i32* %2601, align 4
  %2602 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2596, i32 7
  store i32 0, i32* %2602, align 4
  %2603 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2596, i32 2
  store i32 1, i32* %2603, align 4
  %2604 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2596, i32 3
  store i32 1, i32* %2604, align 4
  %2605 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2596, i32 4
  store i32 %1441, i32* %2605, align 4
  %2606 = add i32 %2379, 4
  %2607 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 31, i64 %2596, i32 5
  store i32 %2606, i32* %2607, align 4
  br label %2608

2608:                                             ; preds = %2600, %2570, %2452
  %2609 = phi i32 [ %2377, %2452 ], [ %2571, %2600 ], [ %2571, %2570 ]
  %2610 = add i32 %2378, 2
  %2611 = icmp eq i32 %2610, %2298
  br i1 %2611, label %2628, label %2612

2612:                                             ; preds = %2608
  %2613 = add i32 %2378, 3
  %2614 = zext i32 %2613 to i64
  %2615 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 34, i64 %2614
  %2616 = load i32, i32* %2615, align 4
  %2617 = icmp ugt i32 %2616, 127
  br i1 %2617, label %2618, label %2375

2618:                                             ; preds = %2612
  %2619 = icmp ult i32 %2616, 524288
  %2620 = select i1 %2619, i32 6, i32 18
  %2621 = lshr i32 %2616, %2620
  %2622 = zext i32 %2621 to i64
  %2623 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 32, i64 %2622
  %2624 = load i8, i8* %2623, align 1
  %2625 = zext i8 %2624 to i32
  %2626 = shl nuw nsw i32 %2620, 1
  %2627 = add nuw nsw i32 %2626, %2625
  br label %2367

2628:                                             ; preds = %2608, %2297, %1823
  %2629 = phi i32 [ %1443, %1823 ], [ %2278, %2297 ], [ %2609, %2608 ]
  %2630 = add i32 %1441, 1
  %2631 = icmp eq i32 %2630, %2629
  br i1 %2631, label %1395, label %1440

2632:                                             ; preds = %1042
  %2633 = load i8, i8* %1008, align 1
  %2634 = getelementptr inbounds i8, i8* %1047, i64 1
  %2635 = load i8, i8* %2634, align 1
  %2636 = icmp eq i8 %2633, %2635
  br i1 %2636, label %2638, label %2637

2637:                                             ; preds = %2632, %1042
  store i32 0, i32* %375, align 4
  br label %2657

2638:                                             ; preds = %2632
  br i1 %1012, label %2639, label %2653

2639:                                             ; preds = %2638, %2647
  %2640 = phi i64 [ %2648, %2647 ], [ 2, %2638 ]
  %2641 = phi i32 [ %2649, %2647 ], [ 2, %2638 ]
  %2642 = getelementptr inbounds i8, i8* %1009, i64 %2640
  %2643 = load i8, i8* %2642, align 1
  %2644 = getelementptr inbounds i8, i8* %1047, i64 %2640
  %2645 = load i8, i8* %2644, align 1
  %2646 = icmp eq i8 %2643, %2645
  br i1 %2646, label %2647, label %2651

2647:                                             ; preds = %2639
  %2648 = add nuw nsw i64 %2640, 1
  %2649 = add nuw i32 %2641, 1
  %2650 = icmp ult i64 %2648, %1013
  br i1 %2650, label %2639, label %2653

2651:                                             ; preds = %2639
  %2652 = trunc i64 %2640 to i32
  br label %2653

2653:                                             ; preds = %2647, %2651, %2638
  %2654 = phi i32 [ 2, %2638 ], [ %2652, %2651 ], [ %2649, %2647 ]
  store i32 %2654, i32* %375, align 4
  %2655 = icmp ugt i32 %2654, %1043
  %2656 = zext i1 %2655 to i32
  br label %2657

2657:                                             ; preds = %2653, %2637
  %2658 = phi i32 [ 0, %2637 ], [ %2656, %2653 ]
  %2659 = load i32, i32* %367, align 4
  %2660 = zext i32 %2659 to i64
  %2661 = sub nsw i64 0, %2660
  %2662 = getelementptr inbounds i8, i8* %1010, i64 %2661
  %2663 = load i8, i8* %2662, align 1
  %2664 = icmp eq i8 %1011, %2663
  br i1 %2664, label %2665, label %2670

2665:                                             ; preds = %2657
  %2666 = load i8, i8* %1008, align 1
  %2667 = getelementptr inbounds i8, i8* %2662, i64 1
  %2668 = load i8, i8* %2667, align 1
  %2669 = icmp eq i8 %2666, %2668
  br i1 %2669, label %2671, label %2670

2670:                                             ; preds = %2665, %2657
  store i32 0, i32* %376, align 8
  br label %2693

2671:                                             ; preds = %2665
  br i1 %1012, label %2672, label %2686

2672:                                             ; preds = %2671, %2680
  %2673 = phi i64 [ %2681, %2680 ], [ 2, %2671 ]
  %2674 = phi i32 [ %2682, %2680 ], [ 2, %2671 ]
  %2675 = getelementptr inbounds i8, i8* %1009, i64 %2673
  %2676 = load i8, i8* %2675, align 1
  %2677 = getelementptr inbounds i8, i8* %2662, i64 %2673
  %2678 = load i8, i8* %2677, align 1
  %2679 = icmp eq i8 %2676, %2678
  br i1 %2679, label %2680, label %2684

2680:                                             ; preds = %2672
  %2681 = add nuw nsw i64 %2673, 1
  %2682 = add nuw i32 %2674, 1
  %2683 = icmp ult i64 %2681, %1013
  br i1 %2683, label %2672, label %2686

2684:                                             ; preds = %2672
  %2685 = trunc i64 %2673 to i32
  br label %2686

2686:                                             ; preds = %2680, %2684, %2671
  %2687 = phi i32 [ 2, %2671 ], [ %2685, %2684 ], [ %2682, %2680 ]
  store i32 %2687, i32* %376, align 8
  %2688 = zext i32 %2658 to i64
  %2689 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %2688
  %2690 = load i32, i32* %2689, align 4
  %2691 = icmp ugt i32 %2687, %2690
  %2692 = select i1 %2691, i32 2, i32 %2658
  br label %2693

2693:                                             ; preds = %2686, %2670
  %2694 = phi i32 [ %2658, %2670 ], [ %2692, %2686 ]
  %2695 = load i32, i32* %368, align 4
  %2696 = zext i32 %2695 to i64
  %2697 = sub nsw i64 0, %2696
  %2698 = getelementptr inbounds i8, i8* %1010, i64 %2697
  %2699 = load i8, i8* %2698, align 1
  %2700 = icmp eq i8 %1011, %2699
  br i1 %2700, label %2701, label %2706

2701:                                             ; preds = %2693
  %2702 = load i8, i8* %1008, align 1
  %2703 = getelementptr inbounds i8, i8* %2698, i64 1
  %2704 = load i8, i8* %2703, align 1
  %2705 = icmp eq i8 %2702, %2704
  br i1 %2705, label %2707, label %2706

2706:                                             ; preds = %2701, %2693
  store i32 0, i32* %377, align 4
  br label %2729

2707:                                             ; preds = %2701
  br i1 %1012, label %2708, label %2722

2708:                                             ; preds = %2707, %2716
  %2709 = phi i64 [ %2717, %2716 ], [ 2, %2707 ]
  %2710 = phi i32 [ %2718, %2716 ], [ 2, %2707 ]
  %2711 = getelementptr inbounds i8, i8* %1009, i64 %2709
  %2712 = load i8, i8* %2711, align 1
  %2713 = getelementptr inbounds i8, i8* %2698, i64 %2709
  %2714 = load i8, i8* %2713, align 1
  %2715 = icmp eq i8 %2712, %2714
  br i1 %2715, label %2716, label %2720

2716:                                             ; preds = %2708
  %2717 = add nuw nsw i64 %2709, 1
  %2718 = add nuw i32 %2710, 1
  %2719 = icmp ult i64 %2717, %1013
  br i1 %2719, label %2708, label %2722

2720:                                             ; preds = %2708
  %2721 = trunc i64 %2709 to i32
  br label %2722

2722:                                             ; preds = %2716, %2720, %2707
  %2723 = phi i32 [ 2, %2707 ], [ %2721, %2720 ], [ %2718, %2716 ]
  store i32 %2723, i32* %377, align 4
  %2724 = zext i32 %2694 to i64
  %2725 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %2724
  %2726 = load i32, i32* %2725, align 4
  %2727 = icmp ugt i32 %2723, %2726
  %2728 = select i1 %2727, i32 3, i32 %2694
  br label %2729

2729:                                             ; preds = %2722, %2706
  %2730 = phi i32 [ %2694, %2706 ], [ %2728, %2722 ]
  %2731 = zext i32 %2730 to i64
  %2732 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %2731
  %2733 = load i32, i32* %2732, align 4
  %2734 = load i32, i32* %363, align 4
  %2735 = icmp ult i32 %2733, %2734
  br i1 %2735, label %1058, label %1050

2736:                                             ; preds = %1199, %1073, %998, %932, %1050, %1053, %1060, %1068, %1437, %1540
  %2737 = phi i32 [ %1438, %1437 ], [ %1541, %1540 ], [ %1065, %1060 ], [ %1065, %1068 ], [ %2730, %1050 ], [ %2730, %1053 ], [ %938, %932 ], [ -1, %998 ], [ -1, %1073 ], [ %1200, %1199 ]
  %2738 = phi i32 [ %1439, %1437 ], [ %1542, %1540 ], [ 1, %1060 ], [ %1000, %1068 ], [ 1, %1050 ], [ %2733, %1053 ], [ %936, %932 ], [ 1, %998 ], [ 1, %1073 ], [ 1, %1199 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %373) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %370) #6
  br label %2739

2739:                                             ; preds = %727, %772, %797, %819, %815, %804, %779, %754, %744, %724, %696, %688, %680, %619, %613, %552, %544, %531, %526, %480, %2736
  %2740 = phi i32 [ %2737, %2736 ], [ -1, %480 ], [ %924, %613 ], [ -1, %619 ], [ -1, %680 ], [ -1, %688 ], [ -1, %696 ], [ %816, %815 ], [ %816, %744 ], [ -1, %804 ], [ -1, %779 ], [ -1, %754 ], [ -1, %724 ], [ %549, %544 ], [ %549, %552 ], [ %527, %526 ], [ %527, %531 ], [ -1, %819 ], [ -1, %797 ], [ -1, %772 ], [ -1, %727 ]
  %2741 = phi i32 [ %2738, %2736 ], [ 1, %480 ], [ %925, %613 ], [ 1, %619 ], [ 1, %680 ], [ 1, %688 ], [ 1, %696 ], [ 2, %815 ], [ %597, %744 ], [ 1, %804 ], [ 1, %779 ], [ 1, %754 ], [ 1, %724 ], [ 1, %544 ], [ %482, %552 ], [ 1, %526 ], [ %528, %531 ], [ 1, %819 ], [ 1, %797 ], [ 1, %772 ], [ 1, %727 ]
  %2742 = load i32, i32* %383, align 8
  %2743 = and i32 %2742, %417
  %2744 = icmp eq i32 %2741, 1
  %2745 = icmp eq i32 %2740, -1
  %2746 = and i1 %2745, %2744
  %2747 = load i32, i32* %381, align 4
  %2748 = zext i32 %2747 to i64
  %2749 = zext i32 %2743 to i64
  %2750 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 38, i64 %2748, i64 %2749
  %2751 = load i32, i32* %2750, align 4
  %2752 = load i32, i32* %397, align 8
  %2753 = lshr i32 %2752, 11
  %2754 = mul i32 %2753, %2751
  br i1 %2746, label %2755, label %3138

2755:                                             ; preds = %2739
  store i32 %2754, i32* %397, align 8
  %2756 = sub i32 2048, %2751
  %2757 = lshr i32 %2756, 5
  %2758 = add i32 %2757, %2751
  store i32 %2758, i32* %2750, align 4
  %2759 = icmp ult i32 %2754, 16777216
  br i1 %2759, label %2760, label %2850

2760:                                             ; preds = %2755
  %2761 = shl i32 %2754, 8
  store i32 %2761, i32* %397, align 8
  %2762 = load i64, i64* %398, align 8
  %2763 = trunc i64 %2762 to i32
  %2764 = icmp ult i32 %2763, -16777216
  %2765 = icmp ugt i64 %2762, 4294967295
  %2766 = or i1 %2765, %2764
  br i1 %2766, label %2770, label %2767

2767:                                             ; preds = %2760
  %2768 = load i64, i64* %399, align 8
  %2769 = add i64 %2768, 1
  br label %2845

2770:                                             ; preds = %2760
  %2771 = load i8, i8* %400, align 4
  %2772 = load i8*, i8** %401, align 8
  %2773 = lshr i64 %2762, 32
  %2774 = trunc i64 %2773 to i8
  %2775 = add i8 %2771, %2774
  %2776 = getelementptr inbounds i8, i8* %2772, i64 1
  store i8 %2775, i8* %2772, align 1
  store i8* %2776, i8** %401, align 8
  %2777 = load i8*, i8** %402, align 8
  %2778 = icmp eq i8* %2776, %2777
  %2779 = ptrtoint i8* %2776 to i64
  br i1 %2778, label %2780, label %2799

2780:                                             ; preds = %2770
  %2781 = load i32, i32* %23, align 8
  %2782 = icmp eq i32 %2781, 0
  br i1 %2782, label %2783, label %2799

2783:                                             ; preds = %2780
  %2784 = load i8*, i8** %404, align 8
  %2785 = ptrtoint i8* %2784 to i64
  %2786 = sub i64 %2779, %2785
  %2787 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %2788 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %2787, i64 0, i32 0
  %2789 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %2788, align 8
  %2790 = bitcast %struct.ISeqOutStream* %2787 to i8*
  %2791 = tail call i64 %2789(i8* %2790, i8* %2784, i64 %2786) #6
  %2792 = icmp eq i64 %2786, %2791
  br i1 %2792, label %2794, label %2793

2793:                                             ; preds = %2783
  store i32 9, i32* %23, align 8
  br label %2794

2794:                                             ; preds = %2793, %2783
  %2795 = load i64, i64* %406, align 8
  %2796 = add i64 %2795, %2786
  store i64 %2796, i64* %406, align 8
  %2797 = load i64, i64* %407, align 8
  store i64 %2797, i64* %403, align 8
  %2798 = inttoptr i64 %2797 to i8*
  br label %2799

2799:                                             ; preds = %2794, %2780, %2770
  %2800 = phi i8* [ %2798, %2794 ], [ %2776, %2780 ], [ %2776, %2770 ]
  %2801 = load i64, i64* %399, align 8
  %2802 = add i64 %2801, -1
  store i64 %2802, i64* %399, align 8
  %2803 = icmp eq i64 %2802, 0
  %2804 = load i64, i64* %398, align 8
  br i1 %2803, label %2840, label %2805

2805:                                             ; preds = %2799, %2834
  %2806 = phi i64 [ %2839, %2834 ], [ %2804, %2799 ]
  %2807 = phi i8* [ %2835, %2834 ], [ %2800, %2799 ]
  %2808 = lshr i64 %2806, 32
  %2809 = trunc i64 %2808 to i8
  %2810 = add i8 %2809, -1
  %2811 = getelementptr inbounds i8, i8* %2807, i64 1
  store i8 %2810, i8* %2807, align 1
  store i8* %2811, i8** %401, align 8
  %2812 = load i8*, i8** %402, align 8
  %2813 = icmp eq i8* %2811, %2812
  %2814 = ptrtoint i8* %2811 to i64
  br i1 %2813, label %2815, label %2834

2815:                                             ; preds = %2805
  %2816 = load i32, i32* %23, align 8
  %2817 = icmp eq i32 %2816, 0
  br i1 %2817, label %2818, label %2834

2818:                                             ; preds = %2815
  %2819 = load i8*, i8** %404, align 8
  %2820 = ptrtoint i8* %2819 to i64
  %2821 = sub i64 %2814, %2820
  %2822 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %2823 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %2822, i64 0, i32 0
  %2824 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %2823, align 8
  %2825 = bitcast %struct.ISeqOutStream* %2822 to i8*
  %2826 = tail call i64 %2824(i8* %2825, i8* %2819, i64 %2821) #6
  %2827 = icmp eq i64 %2821, %2826
  br i1 %2827, label %2829, label %2828

2828:                                             ; preds = %2818
  store i32 9, i32* %23, align 8
  br label %2829

2829:                                             ; preds = %2828, %2818
  %2830 = load i64, i64* %406, align 8
  %2831 = add i64 %2830, %2821
  store i64 %2831, i64* %406, align 8
  %2832 = load i64, i64* %407, align 8
  store i64 %2832, i64* %403, align 8
  %2833 = inttoptr i64 %2832 to i8*
  br label %2834

2834:                                             ; preds = %2829, %2815, %2805
  %2835 = phi i8* [ %2833, %2829 ], [ %2811, %2815 ], [ %2811, %2805 ]
  %2836 = load i64, i64* %399, align 8
  %2837 = add i64 %2836, -1
  store i64 %2837, i64* %399, align 8
  %2838 = icmp eq i64 %2837, 0
  %2839 = load i64, i64* %398, align 8
  br i1 %2838, label %2840, label %2805, !llvm.loop !18

2840:                                             ; preds = %2834, %2799
  %2841 = phi i64 [ %2804, %2799 ], [ %2839, %2834 ]
  %2842 = trunc i64 %2841 to i32
  %2843 = lshr i32 %2842, 24
  %2844 = trunc i32 %2843 to i8
  store i8 %2844, i8* %400, align 4
  br label %2845

2845:                                             ; preds = %2767, %2840
  %2846 = phi i64 [ %2762, %2767 ], [ %2841, %2840 ]
  %2847 = phi i64 [ %2769, %2767 ], [ 1, %2840 ]
  store i64 %2847, i64* %399, align 8
  %2848 = shl i64 %2846, 8
  %2849 = and i64 %2848, 4294967040
  store i64 %2849, i64* %398, align 8
  br label %2850

2850:                                             ; preds = %2755, %2845
  %2851 = load i8* (i8*)*, i8* (i8*)** %364, align 8
  %2852 = load i8*, i8** %351, align 8
  %2853 = tail call i8* %2851(i8* %2852) #6
  %2854 = load i32, i32* %357, align 8
  %2855 = zext i32 %2854 to i64
  %2856 = sub nsw i64 0, %2855
  %2857 = getelementptr inbounds i8, i8* %2853, i64 %2856
  %2858 = load i8, i8* %2857, align 1
  %2859 = load i32*, i32** %384, align 8
  %2860 = load i32, i32* %385, align 4
  %2861 = and i32 %2860, %417
  %2862 = load i32, i32* %386, align 8
  %2863 = shl i32 %2861, %2862
  %2864 = getelementptr inbounds i8, i8* %2857, i64 -1
  %2865 = load i8, i8* %2864, align 1
  %2866 = zext i8 %2865 to i32
  %2867 = sub i32 8, %2862
  %2868 = lshr i32 %2866, %2867
  %2869 = add i32 %2868, %2863
  %2870 = mul i32 %2869, 768
  %2871 = zext i32 %2870 to i64
  %2872 = getelementptr inbounds i32, i32* %2859, i64 %2871
  %2873 = load i32, i32* %381, align 4
  %2874 = icmp ult i32 %2873, 7
  %2875 = zext i8 %2858 to i32
  br i1 %2874, label %2876, label %2997

2876:                                             ; preds = %2850
  %2877 = or i32 %2875, 256
  br label %2878

2878:                                             ; preds = %2994, %2876
  %2879 = phi i32 [ %2877, %2876 ], [ %2995, %2994 ]
  %2880 = lshr i32 %2879, 8
  %2881 = zext i32 %2880 to i64
  %2882 = getelementptr inbounds i32, i32* %2872, i64 %2881
  %2883 = load i32, i32* %2882, align 4
  %2884 = load i32, i32* %397, align 8
  %2885 = lshr i32 %2884, 11
  %2886 = mul i32 %2885, %2883
  %2887 = trunc i32 %2879 to i8
  %2888 = icmp sgt i8 %2887, -1
  br i1 %2888, label %2889, label %2893

2889:                                             ; preds = %2878
  store i32 %2886, i32* %397, align 8
  %2890 = sub i32 2048, %2883
  %2891 = lshr i32 %2890, 5
  %2892 = add i32 %2891, %2883
  br label %2900

2893:                                             ; preds = %2878
  %2894 = zext i32 %2886 to i64
  %2895 = load i64, i64* %398, align 8
  %2896 = add i64 %2895, %2894
  store i64 %2896, i64* %398, align 8
  %2897 = sub i32 %2884, %2886
  store i32 %2897, i32* %397, align 8
  %2898 = lshr i32 %2883, 5
  %2899 = sub i32 %2883, %2898
  br label %2900

2900:                                             ; preds = %2893, %2889
  %2901 = phi i32 [ %2892, %2889 ], [ %2899, %2893 ]
  store i32 %2901, i32* %2882, align 4
  %2902 = load i32, i32* %397, align 8
  %2903 = icmp ult i32 %2902, 16777216
  br i1 %2903, label %2904, label %2994

2904:                                             ; preds = %2900
  %2905 = shl i32 %2902, 8
  store i32 %2905, i32* %397, align 8
  %2906 = load i64, i64* %398, align 8
  %2907 = trunc i64 %2906 to i32
  %2908 = icmp ult i32 %2907, -16777216
  %2909 = icmp ugt i64 %2906, 4294967295
  %2910 = or i1 %2909, %2908
  br i1 %2910, label %2914, label %2911

2911:                                             ; preds = %2904
  %2912 = load i64, i64* %399, align 8
  %2913 = add i64 %2912, 1
  br label %2989

2914:                                             ; preds = %2904
  %2915 = load i8, i8* %400, align 4
  %2916 = load i8*, i8** %401, align 8
  %2917 = lshr i64 %2906, 32
  %2918 = trunc i64 %2917 to i8
  %2919 = add i8 %2915, %2918
  %2920 = getelementptr inbounds i8, i8* %2916, i64 1
  store i8 %2919, i8* %2916, align 1
  store i8* %2920, i8** %401, align 8
  %2921 = load i8*, i8** %402, align 8
  %2922 = icmp eq i8* %2920, %2921
  %2923 = ptrtoint i8* %2920 to i64
  br i1 %2922, label %2924, label %2943

2924:                                             ; preds = %2914
  %2925 = load i32, i32* %23, align 8
  %2926 = icmp eq i32 %2925, 0
  br i1 %2926, label %2927, label %2943

2927:                                             ; preds = %2924
  %2928 = load i8*, i8** %404, align 8
  %2929 = ptrtoint i8* %2928 to i64
  %2930 = sub i64 %2923, %2929
  %2931 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %2932 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %2931, i64 0, i32 0
  %2933 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %2932, align 8
  %2934 = bitcast %struct.ISeqOutStream* %2931 to i8*
  %2935 = tail call i64 %2933(i8* %2934, i8* %2928, i64 %2930) #6
  %2936 = icmp eq i64 %2930, %2935
  br i1 %2936, label %2938, label %2937

2937:                                             ; preds = %2927
  store i32 9, i32* %23, align 8
  br label %2938

2938:                                             ; preds = %2937, %2927
  %2939 = load i64, i64* %406, align 8
  %2940 = add i64 %2939, %2930
  store i64 %2940, i64* %406, align 8
  %2941 = load i64, i64* %407, align 8
  store i64 %2941, i64* %403, align 8
  %2942 = inttoptr i64 %2941 to i8*
  br label %2943

2943:                                             ; preds = %2938, %2924, %2914
  %2944 = phi i8* [ %2942, %2938 ], [ %2920, %2924 ], [ %2920, %2914 ]
  %2945 = load i64, i64* %399, align 8
  %2946 = add i64 %2945, -1
  store i64 %2946, i64* %399, align 8
  %2947 = icmp eq i64 %2946, 0
  %2948 = load i64, i64* %398, align 8
  br i1 %2947, label %2984, label %2949

2949:                                             ; preds = %2943, %2978
  %2950 = phi i64 [ %2983, %2978 ], [ %2948, %2943 ]
  %2951 = phi i8* [ %2979, %2978 ], [ %2944, %2943 ]
  %2952 = lshr i64 %2950, 32
  %2953 = trunc i64 %2952 to i8
  %2954 = add i8 %2953, -1
  %2955 = getelementptr inbounds i8, i8* %2951, i64 1
  store i8 %2954, i8* %2951, align 1
  store i8* %2955, i8** %401, align 8
  %2956 = load i8*, i8** %402, align 8
  %2957 = icmp eq i8* %2955, %2956
  %2958 = ptrtoint i8* %2955 to i64
  br i1 %2957, label %2959, label %2978

2959:                                             ; preds = %2949
  %2960 = load i32, i32* %23, align 8
  %2961 = icmp eq i32 %2960, 0
  br i1 %2961, label %2962, label %2978

2962:                                             ; preds = %2959
  %2963 = load i8*, i8** %404, align 8
  %2964 = ptrtoint i8* %2963 to i64
  %2965 = sub i64 %2958, %2964
  %2966 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %2967 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %2966, i64 0, i32 0
  %2968 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %2967, align 8
  %2969 = bitcast %struct.ISeqOutStream* %2966 to i8*
  %2970 = tail call i64 %2968(i8* %2969, i8* %2963, i64 %2965) #6
  %2971 = icmp eq i64 %2965, %2970
  br i1 %2971, label %2973, label %2972

2972:                                             ; preds = %2962
  store i32 9, i32* %23, align 8
  br label %2973

2973:                                             ; preds = %2972, %2962
  %2974 = load i64, i64* %406, align 8
  %2975 = add i64 %2974, %2965
  store i64 %2975, i64* %406, align 8
  %2976 = load i64, i64* %407, align 8
  store i64 %2976, i64* %403, align 8
  %2977 = inttoptr i64 %2976 to i8*
  br label %2978

2978:                                             ; preds = %2973, %2959, %2949
  %2979 = phi i8* [ %2977, %2973 ], [ %2955, %2959 ], [ %2955, %2949 ]
  %2980 = load i64, i64* %399, align 8
  %2981 = add i64 %2980, -1
  store i64 %2981, i64* %399, align 8
  %2982 = icmp eq i64 %2981, 0
  %2983 = load i64, i64* %398, align 8
  br i1 %2982, label %2984, label %2949, !llvm.loop !19

2984:                                             ; preds = %2978, %2943
  %2985 = phi i64 [ %2948, %2943 ], [ %2983, %2978 ]
  %2986 = trunc i64 %2985 to i32
  %2987 = lshr i32 %2986, 24
  %2988 = trunc i32 %2987 to i8
  store i8 %2988, i8* %400, align 4
  br label %2989

2989:                                             ; preds = %2911, %2984
  %2990 = phi i64 [ %2906, %2911 ], [ %2985, %2984 ]
  %2991 = phi i64 [ %2913, %2911 ], [ 1, %2984 ]
  store i64 %2991, i64* %399, align 8
  %2992 = shl i64 %2990, 8
  %2993 = and i64 %2992, 4294967040
  store i64 %2993, i64* %398, align 8
  br label %2994

2994:                                             ; preds = %2989, %2900
  %2995 = shl i32 %2879, 1
  %2996 = icmp ult i32 %2995, 65536
  br i1 %2996, label %2878, label %3133

2997:                                             ; preds = %2850
  %2998 = load i32, i32* %365, align 4
  %2999 = zext i32 %2998 to i64
  %3000 = sub nsw i64 0, %2999
  %3001 = getelementptr inbounds i8, i8* %2864, i64 %3000
  %3002 = load i8, i8* %3001, align 1
  %3003 = zext i8 %3002 to i32
  %3004 = or i32 %2875, 256
  br label %3005

3005:                                             ; preds = %3127, %2997
  %3006 = phi i32 [ %3004, %2997 ], [ %3128, %3127 ]
  %3007 = phi i32 [ %3003, %2997 ], [ %3009, %3127 ]
  %3008 = phi i32 [ 256, %2997 ], [ %3131, %3127 ]
  %3009 = shl i32 %3007, 1
  %3010 = and i32 %3009, %3008
  %3011 = lshr i32 %3006, 8
  %3012 = add i32 %3008, %3011
  %3013 = add i32 %3012, %3010
  %3014 = zext i32 %3013 to i64
  %3015 = getelementptr inbounds i32, i32* %2872, i64 %3014
  %3016 = load i32, i32* %3015, align 4
  %3017 = load i32, i32* %397, align 8
  %3018 = lshr i32 %3017, 11
  %3019 = mul i32 %3018, %3016
  %3020 = trunc i32 %3006 to i8
  %3021 = icmp sgt i8 %3020, -1
  br i1 %3021, label %3022, label %3026

3022:                                             ; preds = %3005
  store i32 %3019, i32* %397, align 8
  %3023 = sub i32 2048, %3016
  %3024 = lshr i32 %3023, 5
  %3025 = add i32 %3024, %3016
  br label %3033

3026:                                             ; preds = %3005
  %3027 = zext i32 %3019 to i64
  %3028 = load i64, i64* %398, align 8
  %3029 = add i64 %3028, %3027
  store i64 %3029, i64* %398, align 8
  %3030 = sub i32 %3017, %3019
  store i32 %3030, i32* %397, align 8
  %3031 = lshr i32 %3016, 5
  %3032 = sub i32 %3016, %3031
  br label %3033

3033:                                             ; preds = %3026, %3022
  %3034 = phi i32 [ %3025, %3022 ], [ %3032, %3026 ]
  store i32 %3034, i32* %3015, align 4
  %3035 = load i32, i32* %397, align 8
  %3036 = icmp ult i32 %3035, 16777216
  br i1 %3036, label %3037, label %3127

3037:                                             ; preds = %3033
  %3038 = shl i32 %3035, 8
  store i32 %3038, i32* %397, align 8
  %3039 = load i64, i64* %398, align 8
  %3040 = trunc i64 %3039 to i32
  %3041 = icmp ult i32 %3040, -16777216
  %3042 = icmp ugt i64 %3039, 4294967295
  %3043 = or i1 %3042, %3041
  br i1 %3043, label %3047, label %3044

3044:                                             ; preds = %3037
  %3045 = load i64, i64* %399, align 8
  %3046 = add i64 %3045, 1
  br label %3122

3047:                                             ; preds = %3037
  %3048 = load i8, i8* %400, align 4
  %3049 = load i8*, i8** %401, align 8
  %3050 = lshr i64 %3039, 32
  %3051 = trunc i64 %3050 to i8
  %3052 = add i8 %3048, %3051
  %3053 = getelementptr inbounds i8, i8* %3049, i64 1
  store i8 %3052, i8* %3049, align 1
  store i8* %3053, i8** %401, align 8
  %3054 = load i8*, i8** %402, align 8
  %3055 = icmp eq i8* %3053, %3054
  %3056 = ptrtoint i8* %3053 to i64
  br i1 %3055, label %3057, label %3076

3057:                                             ; preds = %3047
  %3058 = load i32, i32* %23, align 8
  %3059 = icmp eq i32 %3058, 0
  br i1 %3059, label %3060, label %3076

3060:                                             ; preds = %3057
  %3061 = load i8*, i8** %404, align 8
  %3062 = ptrtoint i8* %3061 to i64
  %3063 = sub i64 %3056, %3062
  %3064 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %3065 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %3064, i64 0, i32 0
  %3066 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %3065, align 8
  %3067 = bitcast %struct.ISeqOutStream* %3064 to i8*
  %3068 = tail call i64 %3066(i8* %3067, i8* %3061, i64 %3063) #6
  %3069 = icmp eq i64 %3063, %3068
  br i1 %3069, label %3071, label %3070

3070:                                             ; preds = %3060
  store i32 9, i32* %23, align 8
  br label %3071

3071:                                             ; preds = %3070, %3060
  %3072 = load i64, i64* %406, align 8
  %3073 = add i64 %3072, %3063
  store i64 %3073, i64* %406, align 8
  %3074 = load i64, i64* %407, align 8
  store i64 %3074, i64* %403, align 8
  %3075 = inttoptr i64 %3074 to i8*
  br label %3076

3076:                                             ; preds = %3071, %3057, %3047
  %3077 = phi i8* [ %3075, %3071 ], [ %3053, %3057 ], [ %3053, %3047 ]
  %3078 = load i64, i64* %399, align 8
  %3079 = add i64 %3078, -1
  store i64 %3079, i64* %399, align 8
  %3080 = icmp eq i64 %3079, 0
  %3081 = load i64, i64* %398, align 8
  br i1 %3080, label %3117, label %3082

3082:                                             ; preds = %3076, %3111
  %3083 = phi i64 [ %3116, %3111 ], [ %3081, %3076 ]
  %3084 = phi i8* [ %3112, %3111 ], [ %3077, %3076 ]
  %3085 = lshr i64 %3083, 32
  %3086 = trunc i64 %3085 to i8
  %3087 = add i8 %3086, -1
  %3088 = getelementptr inbounds i8, i8* %3084, i64 1
  store i8 %3087, i8* %3084, align 1
  store i8* %3088, i8** %401, align 8
  %3089 = load i8*, i8** %402, align 8
  %3090 = icmp eq i8* %3088, %3089
  %3091 = ptrtoint i8* %3088 to i64
  br i1 %3090, label %3092, label %3111

3092:                                             ; preds = %3082
  %3093 = load i32, i32* %23, align 8
  %3094 = icmp eq i32 %3093, 0
  br i1 %3094, label %3095, label %3111

3095:                                             ; preds = %3092
  %3096 = load i8*, i8** %404, align 8
  %3097 = ptrtoint i8* %3096 to i64
  %3098 = sub i64 %3091, %3097
  %3099 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %3100 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %3099, i64 0, i32 0
  %3101 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %3100, align 8
  %3102 = bitcast %struct.ISeqOutStream* %3099 to i8*
  %3103 = tail call i64 %3101(i8* %3102, i8* %3096, i64 %3098) #6
  %3104 = icmp eq i64 %3098, %3103
  br i1 %3104, label %3106, label %3105

3105:                                             ; preds = %3095
  store i32 9, i32* %23, align 8
  br label %3106

3106:                                             ; preds = %3105, %3095
  %3107 = load i64, i64* %406, align 8
  %3108 = add i64 %3107, %3098
  store i64 %3108, i64* %406, align 8
  %3109 = load i64, i64* %407, align 8
  store i64 %3109, i64* %403, align 8
  %3110 = inttoptr i64 %3109 to i8*
  br label %3111

3111:                                             ; preds = %3106, %3092, %3082
  %3112 = phi i8* [ %3110, %3106 ], [ %3088, %3092 ], [ %3088, %3082 ]
  %3113 = load i64, i64* %399, align 8
  %3114 = add i64 %3113, -1
  store i64 %3114, i64* %399, align 8
  %3115 = icmp eq i64 %3114, 0
  %3116 = load i64, i64* %398, align 8
  br i1 %3115, label %3117, label %3082, !llvm.loop !20

3117:                                             ; preds = %3111, %3076
  %3118 = phi i64 [ %3081, %3076 ], [ %3116, %3111 ]
  %3119 = trunc i64 %3118 to i32
  %3120 = lshr i32 %3119, 24
  %3121 = trunc i32 %3120 to i8
  store i8 %3121, i8* %400, align 4
  br label %3122

3122:                                             ; preds = %3117, %3044
  %3123 = phi i64 [ %3039, %3044 ], [ %3118, %3117 ]
  %3124 = phi i64 [ %3046, %3044 ], [ 1, %3117 ]
  store i64 %3124, i64* %399, align 8
  %3125 = shl i64 %3123, 8
  %3126 = and i64 %3125, 4294967040
  store i64 %3126, i64* %398, align 8
  br label %3127

3127:                                             ; preds = %3122, %3033
  %3128 = shl i32 %3006, 1
  %3129 = xor i32 %3128, -1
  %3130 = xor i32 %3009, %3129
  %3131 = and i32 %3130, %3008
  %3132 = icmp ult i32 %3128, 65536
  br i1 %3132, label %3005, label %3133

3133:                                             ; preds = %3127, %2994
  %3134 = load i32, i32* %381, align 4
  %3135 = zext i32 %3134 to i64
  %3136 = getelementptr inbounds [12 x i32], [12 x i32]* @kLiteralNextStates, i64 0, i64 %3135
  %3137 = load i32, i32* %3136, align 4
  store i32 %3137, i32* %381, align 4
  br label %4650

3138:                                             ; preds = %2739
  %3139 = zext i32 %2754 to i64
  %3140 = load i64, i64* %398, align 8
  %3141 = add i64 %3140, %3139
  store i64 %3141, i64* %398, align 8
  %3142 = sub i32 %2752, %2754
  store i32 %3142, i32* %397, align 8
  %3143 = lshr i32 %2751, 5
  %3144 = sub i32 %2751, %3143
  store i32 %3144, i32* %2750, align 4
  %3145 = icmp ult i32 %3142, 16777216
  br i1 %3145, label %3146, label %3240

3146:                                             ; preds = %3138
  %3147 = shl i32 %3142, 8
  store i32 %3147, i32* %397, align 8
  %3148 = trunc i64 %3141 to i32
  %3149 = icmp ult i32 %3148, -16777216
  %3150 = icmp ugt i64 %3141, 4294967295
  %3151 = or i1 %3150, %3149
  br i1 %3151, label %3155, label %3152

3152:                                             ; preds = %3146
  %3153 = load i64, i64* %399, align 8
  %3154 = add i64 %3153, 1
  br label %3233

3155:                                             ; preds = %3146
  %3156 = load i8, i8* %400, align 4
  %3157 = load i8*, i8** %401, align 8
  %3158 = lshr i64 %3141, 32
  %3159 = trunc i64 %3158 to i8
  %3160 = add i8 %3156, %3159
  %3161 = getelementptr inbounds i8, i8* %3157, i64 1
  store i8 %3160, i8* %3157, align 1
  store i8* %3161, i8** %401, align 8
  %3162 = load i8*, i8** %402, align 8
  %3163 = icmp eq i8* %3161, %3162
  %3164 = ptrtoint i8* %3161 to i64
  br i1 %3163, label %3165, label %3184

3165:                                             ; preds = %3155
  %3166 = load i32, i32* %23, align 8
  %3167 = icmp eq i32 %3166, 0
  br i1 %3167, label %3168, label %3184

3168:                                             ; preds = %3165
  %3169 = load i8*, i8** %404, align 8
  %3170 = ptrtoint i8* %3169 to i64
  %3171 = sub i64 %3164, %3170
  %3172 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %3173 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %3172, i64 0, i32 0
  %3174 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %3173, align 8
  %3175 = bitcast %struct.ISeqOutStream* %3172 to i8*
  %3176 = tail call i64 %3174(i8* %3175, i8* %3169, i64 %3171) #6
  %3177 = icmp eq i64 %3171, %3176
  br i1 %3177, label %3179, label %3178

3178:                                             ; preds = %3168
  store i32 9, i32* %23, align 8
  br label %3179

3179:                                             ; preds = %3178, %3168
  %3180 = load i64, i64* %406, align 8
  %3181 = add i64 %3180, %3171
  store i64 %3181, i64* %406, align 8
  %3182 = load i64, i64* %407, align 8
  store i64 %3182, i64* %403, align 8
  %3183 = inttoptr i64 %3182 to i8*
  br label %3184

3184:                                             ; preds = %3179, %3165, %3155
  %3185 = phi i8* [ %3183, %3179 ], [ %3161, %3165 ], [ %3161, %3155 ]
  %3186 = load i64, i64* %399, align 8
  %3187 = add i64 %3186, -1
  store i64 %3187, i64* %399, align 8
  %3188 = icmp eq i64 %3187, 0
  %3189 = load i64, i64* %398, align 8
  br i1 %3188, label %3225, label %3190

3190:                                             ; preds = %3184, %3219
  %3191 = phi i64 [ %3224, %3219 ], [ %3189, %3184 ]
  %3192 = phi i8* [ %3220, %3219 ], [ %3185, %3184 ]
  %3193 = lshr i64 %3191, 32
  %3194 = trunc i64 %3193 to i8
  %3195 = add i8 %3194, -1
  %3196 = getelementptr inbounds i8, i8* %3192, i64 1
  store i8 %3195, i8* %3192, align 1
  store i8* %3196, i8** %401, align 8
  %3197 = load i8*, i8** %402, align 8
  %3198 = icmp eq i8* %3196, %3197
  %3199 = ptrtoint i8* %3196 to i64
  br i1 %3198, label %3200, label %3219

3200:                                             ; preds = %3190
  %3201 = load i32, i32* %23, align 8
  %3202 = icmp eq i32 %3201, 0
  br i1 %3202, label %3203, label %3219

3203:                                             ; preds = %3200
  %3204 = load i8*, i8** %404, align 8
  %3205 = ptrtoint i8* %3204 to i64
  %3206 = sub i64 %3199, %3205
  %3207 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %3208 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %3207, i64 0, i32 0
  %3209 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %3208, align 8
  %3210 = bitcast %struct.ISeqOutStream* %3207 to i8*
  %3211 = tail call i64 %3209(i8* %3210, i8* %3204, i64 %3206) #6
  %3212 = icmp eq i64 %3206, %3211
  br i1 %3212, label %3214, label %3213

3213:                                             ; preds = %3203
  store i32 9, i32* %23, align 8
  br label %3214

3214:                                             ; preds = %3213, %3203
  %3215 = load i64, i64* %406, align 8
  %3216 = add i64 %3215, %3206
  store i64 %3216, i64* %406, align 8
  %3217 = load i64, i64* %407, align 8
  store i64 %3217, i64* %403, align 8
  %3218 = inttoptr i64 %3217 to i8*
  br label %3219

3219:                                             ; preds = %3214, %3200, %3190
  %3220 = phi i8* [ %3218, %3214 ], [ %3196, %3200 ], [ %3196, %3190 ]
  %3221 = load i64, i64* %399, align 8
  %3222 = add i64 %3221, -1
  store i64 %3222, i64* %399, align 8
  %3223 = icmp eq i64 %3222, 0
  %3224 = load i64, i64* %398, align 8
  br i1 %3223, label %3225, label %3190, !llvm.loop !21

3225:                                             ; preds = %3219, %3184
  %3226 = phi i64 [ %3189, %3184 ], [ %3224, %3219 ]
  %3227 = trunc i64 %3226 to i32
  %3228 = lshr i32 %3227, 24
  %3229 = trunc i32 %3228 to i8
  store i8 %3229, i8* %400, align 4
  %3230 = load i32, i32* %381, align 4
  %3231 = load i32, i32* %397, align 8
  %3232 = zext i32 %3230 to i64
  br label %3233

3233:                                             ; preds = %3152, %3225
  %3234 = phi i64 [ %2748, %3152 ], [ %3232, %3225 ]
  %3235 = phi i32 [ %3147, %3152 ], [ %3231, %3225 ]
  %3236 = phi i64 [ %3141, %3152 ], [ %3226, %3225 ]
  %3237 = phi i64 [ %3154, %3152 ], [ 1, %3225 ]
  store i64 %3237, i64* %399, align 8
  %3238 = shl i64 %3236, 8
  %3239 = and i64 %3238, 4294967040
  store i64 %3239, i64* %398, align 8
  br label %3240

3240:                                             ; preds = %3138, %3233
  %3241 = phi i64 [ %2748, %3138 ], [ %3234, %3233 ]
  %3242 = phi i64 [ %3141, %3138 ], [ %3239, %3233 ]
  %3243 = phi i32 [ %3142, %3138 ], [ %3235, %3233 ]
  %3244 = icmp ult i32 %2740, 4
  %3245 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 39, i64 %3241
  %3246 = load i32, i32* %3245, align 4
  %3247 = lshr i32 %3243, 11
  %3248 = mul i32 %3247, %3246
  br i1 %3244, label %3249, label %4017

3249:                                             ; preds = %3240
  %3250 = zext i32 %3248 to i64
  %3251 = add i64 %3242, %3250
  store i64 %3251, i64* %398, align 8
  %3252 = sub i32 %3243, %3248
  store i32 %3252, i32* %397, align 8
  %3253 = lshr i32 %3246, 5
  %3254 = sub i32 %3246, %3253
  store i32 %3254, i32* %3245, align 4
  %3255 = icmp ult i32 %3252, 16777216
  br i1 %3255, label %3256, label %3345

3256:                                             ; preds = %3249
  %3257 = shl i32 %3252, 8
  store i32 %3257, i32* %397, align 8
  %3258 = trunc i64 %3251 to i32
  %3259 = icmp ult i32 %3258, -16777216
  %3260 = icmp ugt i64 %3251, 4294967295
  %3261 = or i1 %3260, %3259
  br i1 %3261, label %3265, label %3262

3262:                                             ; preds = %3256
  %3263 = load i64, i64* %399, align 8
  %3264 = add i64 %3263, 1
  br label %3340

3265:                                             ; preds = %3256
  %3266 = load i8, i8* %400, align 4
  %3267 = load i8*, i8** %401, align 8
  %3268 = lshr i64 %3251, 32
  %3269 = trunc i64 %3268 to i8
  %3270 = add i8 %3266, %3269
  %3271 = getelementptr inbounds i8, i8* %3267, i64 1
  store i8 %3270, i8* %3267, align 1
  store i8* %3271, i8** %401, align 8
  %3272 = load i8*, i8** %402, align 8
  %3273 = icmp eq i8* %3271, %3272
  %3274 = ptrtoint i8* %3271 to i64
  br i1 %3273, label %3275, label %3294

3275:                                             ; preds = %3265
  %3276 = load i32, i32* %23, align 8
  %3277 = icmp eq i32 %3276, 0
  br i1 %3277, label %3278, label %3294

3278:                                             ; preds = %3275
  %3279 = load i8*, i8** %404, align 8
  %3280 = ptrtoint i8* %3279 to i64
  %3281 = sub i64 %3274, %3280
  %3282 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %3283 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %3282, i64 0, i32 0
  %3284 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %3283, align 8
  %3285 = bitcast %struct.ISeqOutStream* %3282 to i8*
  %3286 = tail call i64 %3284(i8* %3285, i8* %3279, i64 %3281) #6
  %3287 = icmp eq i64 %3281, %3286
  br i1 %3287, label %3289, label %3288

3288:                                             ; preds = %3278
  store i32 9, i32* %23, align 8
  br label %3289

3289:                                             ; preds = %3288, %3278
  %3290 = load i64, i64* %406, align 8
  %3291 = add i64 %3290, %3281
  store i64 %3291, i64* %406, align 8
  %3292 = load i64, i64* %407, align 8
  store i64 %3292, i64* %403, align 8
  %3293 = inttoptr i64 %3292 to i8*
  br label %3294

3294:                                             ; preds = %3289, %3275, %3265
  %3295 = phi i8* [ %3293, %3289 ], [ %3271, %3275 ], [ %3271, %3265 ]
  %3296 = load i64, i64* %399, align 8
  %3297 = add i64 %3296, -1
  store i64 %3297, i64* %399, align 8
  %3298 = icmp eq i64 %3297, 0
  %3299 = load i64, i64* %398, align 8
  br i1 %3298, label %3335, label %3300

3300:                                             ; preds = %3294, %3329
  %3301 = phi i64 [ %3334, %3329 ], [ %3299, %3294 ]
  %3302 = phi i8* [ %3330, %3329 ], [ %3295, %3294 ]
  %3303 = lshr i64 %3301, 32
  %3304 = trunc i64 %3303 to i8
  %3305 = add i8 %3304, -1
  %3306 = getelementptr inbounds i8, i8* %3302, i64 1
  store i8 %3305, i8* %3302, align 1
  store i8* %3306, i8** %401, align 8
  %3307 = load i8*, i8** %402, align 8
  %3308 = icmp eq i8* %3306, %3307
  %3309 = ptrtoint i8* %3306 to i64
  br i1 %3308, label %3310, label %3329

3310:                                             ; preds = %3300
  %3311 = load i32, i32* %23, align 8
  %3312 = icmp eq i32 %3311, 0
  br i1 %3312, label %3313, label %3329

3313:                                             ; preds = %3310
  %3314 = load i8*, i8** %404, align 8
  %3315 = ptrtoint i8* %3314 to i64
  %3316 = sub i64 %3309, %3315
  %3317 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %3318 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %3317, i64 0, i32 0
  %3319 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %3318, align 8
  %3320 = bitcast %struct.ISeqOutStream* %3317 to i8*
  %3321 = tail call i64 %3319(i8* %3320, i8* %3314, i64 %3316) #6
  %3322 = icmp eq i64 %3316, %3321
  br i1 %3322, label %3324, label %3323

3323:                                             ; preds = %3313
  store i32 9, i32* %23, align 8
  br label %3324

3324:                                             ; preds = %3323, %3313
  %3325 = load i64, i64* %406, align 8
  %3326 = add i64 %3325, %3316
  store i64 %3326, i64* %406, align 8
  %3327 = load i64, i64* %407, align 8
  store i64 %3327, i64* %403, align 8
  %3328 = inttoptr i64 %3327 to i8*
  br label %3329

3329:                                             ; preds = %3324, %3310, %3300
  %3330 = phi i8* [ %3328, %3324 ], [ %3306, %3310 ], [ %3306, %3300 ]
  %3331 = load i64, i64* %399, align 8
  %3332 = add i64 %3331, -1
  store i64 %3332, i64* %399, align 8
  %3333 = icmp eq i64 %3332, 0
  %3334 = load i64, i64* %398, align 8
  br i1 %3333, label %3335, label %3300, !llvm.loop !22

3335:                                             ; preds = %3329, %3294
  %3336 = phi i64 [ %3299, %3294 ], [ %3334, %3329 ]
  %3337 = trunc i64 %3336 to i32
  %3338 = lshr i32 %3337, 24
  %3339 = trunc i32 %3338 to i8
  store i8 %3339, i8* %400, align 4
  br label %3340

3340:                                             ; preds = %3262, %3335
  %3341 = phi i64 [ %3251, %3262 ], [ %3336, %3335 ]
  %3342 = phi i64 [ %3264, %3262 ], [ 1, %3335 ]
  store i64 %3342, i64* %399, align 8
  %3343 = shl i64 %3341, 8
  %3344 = and i64 %3343, 4294967040
  store i64 %3344, i64* %398, align 8
  br label %3345

3345:                                             ; preds = %3249, %3340
  %3346 = phi i64 [ %3251, %3249 ], [ %3344, %3340 ]
  %3347 = icmp eq i32 %2740, 0
  br i1 %3347, label %3348, label %3566

3348:                                             ; preds = %3345
  %3349 = load i32, i32* %381, align 4
  %3350 = zext i32 %3349 to i64
  %3351 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 40, i64 %3350
  %3352 = load i32, i32* %3351, align 4
  %3353 = load i32, i32* %397, align 8
  %3354 = lshr i32 %3353, 11
  %3355 = mul i32 %3354, %3352
  store i32 %3355, i32* %397, align 8
  %3356 = sub i32 2048, %3352
  %3357 = lshr i32 %3356, 5
  %3358 = add i32 %3357, %3352
  store i32 %3358, i32* %3351, align 4
  %3359 = icmp ult i32 %3355, 16777216
  br i1 %3359, label %3360, label %3454

3360:                                             ; preds = %3348
  %3361 = shl i32 %3355, 8
  store i32 %3361, i32* %397, align 8
  %3362 = trunc i64 %3346 to i32
  %3363 = icmp ult i32 %3362, -16777216
  %3364 = icmp ugt i64 %3346, 4294967295
  %3365 = or i1 %3364, %3363
  br i1 %3365, label %3369, label %3366

3366:                                             ; preds = %3360
  %3367 = load i64, i64* %399, align 8
  %3368 = add i64 %3367, 1
  br label %3447

3369:                                             ; preds = %3360
  %3370 = load i8, i8* %400, align 4
  %3371 = load i8*, i8** %401, align 8
  %3372 = lshr i64 %3346, 32
  %3373 = trunc i64 %3372 to i8
  %3374 = add i8 %3370, %3373
  %3375 = getelementptr inbounds i8, i8* %3371, i64 1
  store i8 %3374, i8* %3371, align 1
  store i8* %3375, i8** %401, align 8
  %3376 = load i8*, i8** %402, align 8
  %3377 = icmp eq i8* %3375, %3376
  %3378 = ptrtoint i8* %3375 to i64
  br i1 %3377, label %3379, label %3398

3379:                                             ; preds = %3369
  %3380 = load i32, i32* %23, align 8
  %3381 = icmp eq i32 %3380, 0
  br i1 %3381, label %3382, label %3398

3382:                                             ; preds = %3379
  %3383 = load i8*, i8** %404, align 8
  %3384 = ptrtoint i8* %3383 to i64
  %3385 = sub i64 %3378, %3384
  %3386 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %3387 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %3386, i64 0, i32 0
  %3388 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %3387, align 8
  %3389 = bitcast %struct.ISeqOutStream* %3386 to i8*
  %3390 = tail call i64 %3388(i8* %3389, i8* %3383, i64 %3385) #6
  %3391 = icmp eq i64 %3385, %3390
  br i1 %3391, label %3393, label %3392

3392:                                             ; preds = %3382
  store i32 9, i32* %23, align 8
  br label %3393

3393:                                             ; preds = %3392, %3382
  %3394 = load i64, i64* %406, align 8
  %3395 = add i64 %3394, %3385
  store i64 %3395, i64* %406, align 8
  %3396 = load i64, i64* %407, align 8
  store i64 %3396, i64* %403, align 8
  %3397 = inttoptr i64 %3396 to i8*
  br label %3398

3398:                                             ; preds = %3393, %3379, %3369
  %3399 = phi i8* [ %3397, %3393 ], [ %3375, %3379 ], [ %3375, %3369 ]
  %3400 = load i64, i64* %399, align 8
  %3401 = add i64 %3400, -1
  store i64 %3401, i64* %399, align 8
  %3402 = icmp eq i64 %3401, 0
  %3403 = load i64, i64* %398, align 8
  br i1 %3402, label %3439, label %3404

3404:                                             ; preds = %3398, %3433
  %3405 = phi i64 [ %3438, %3433 ], [ %3403, %3398 ]
  %3406 = phi i8* [ %3434, %3433 ], [ %3399, %3398 ]
  %3407 = lshr i64 %3405, 32
  %3408 = trunc i64 %3407 to i8
  %3409 = add i8 %3408, -1
  %3410 = getelementptr inbounds i8, i8* %3406, i64 1
  store i8 %3409, i8* %3406, align 1
  store i8* %3410, i8** %401, align 8
  %3411 = load i8*, i8** %402, align 8
  %3412 = icmp eq i8* %3410, %3411
  %3413 = ptrtoint i8* %3410 to i64
  br i1 %3412, label %3414, label %3433

3414:                                             ; preds = %3404
  %3415 = load i32, i32* %23, align 8
  %3416 = icmp eq i32 %3415, 0
  br i1 %3416, label %3417, label %3433

3417:                                             ; preds = %3414
  %3418 = load i8*, i8** %404, align 8
  %3419 = ptrtoint i8* %3418 to i64
  %3420 = sub i64 %3413, %3419
  %3421 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %3422 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %3421, i64 0, i32 0
  %3423 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %3422, align 8
  %3424 = bitcast %struct.ISeqOutStream* %3421 to i8*
  %3425 = tail call i64 %3423(i8* %3424, i8* %3418, i64 %3420) #6
  %3426 = icmp eq i64 %3420, %3425
  br i1 %3426, label %3428, label %3427

3427:                                             ; preds = %3417
  store i32 9, i32* %23, align 8
  br label %3428

3428:                                             ; preds = %3427, %3417
  %3429 = load i64, i64* %406, align 8
  %3430 = add i64 %3429, %3420
  store i64 %3430, i64* %406, align 8
  %3431 = load i64, i64* %407, align 8
  store i64 %3431, i64* %403, align 8
  %3432 = inttoptr i64 %3431 to i8*
  br label %3433

3433:                                             ; preds = %3428, %3414, %3404
  %3434 = phi i8* [ %3432, %3428 ], [ %3410, %3414 ], [ %3410, %3404 ]
  %3435 = load i64, i64* %399, align 8
  %3436 = add i64 %3435, -1
  store i64 %3436, i64* %399, align 8
  %3437 = icmp eq i64 %3436, 0
  %3438 = load i64, i64* %398, align 8
  br i1 %3437, label %3439, label %3404, !llvm.loop !23

3439:                                             ; preds = %3433, %3398
  %3440 = phi i64 [ %3403, %3398 ], [ %3438, %3433 ]
  %3441 = trunc i64 %3440 to i32
  %3442 = lshr i32 %3441, 24
  %3443 = trunc i32 %3442 to i8
  store i8 %3443, i8* %400, align 4
  %3444 = load i32, i32* %381, align 4
  %3445 = load i32, i32* %397, align 8
  %3446 = zext i32 %3444 to i64
  br label %3447

3447:                                             ; preds = %3366, %3439
  %3448 = phi i64 [ %3350, %3366 ], [ %3446, %3439 ]
  %3449 = phi i32 [ %3361, %3366 ], [ %3445, %3439 ]
  %3450 = phi i64 [ %3346, %3366 ], [ %3440, %3439 ]
  %3451 = phi i64 [ %3368, %3366 ], [ 1, %3439 ]
  store i64 %3451, i64* %399, align 8
  %3452 = shl i64 %3450, 8
  %3453 = and i64 %3452, 4294967040
  store i64 %3453, i64* %398, align 8
  br label %3454

3454:                                             ; preds = %3348, %3447
  %3455 = phi i64 [ %3350, %3348 ], [ %3448, %3447 ]
  %3456 = phi i64 [ %3346, %3348 ], [ %3453, %3447 ]
  %3457 = phi i32 [ %3355, %3348 ], [ %3449, %3447 ]
  %3458 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 43, i64 %3455, i64 %2749
  %3459 = load i32, i32* %3458, align 4
  %3460 = lshr i32 %3457, 11
  %3461 = mul i32 %3460, %3459
  br i1 %2744, label %3462, label %3466

3462:                                             ; preds = %3454
  store i32 %3461, i32* %397, align 8
  %3463 = sub i32 2048, %3459
  %3464 = lshr i32 %3463, 5
  %3465 = add i32 %3464, %3459
  br label %3472

3466:                                             ; preds = %3454
  %3467 = zext i32 %3461 to i64
  %3468 = add i64 %3456, %3467
  store i64 %3468, i64* %398, align 8
  %3469 = sub i32 %3457, %3461
  store i32 %3469, i32* %397, align 8
  %3470 = lshr i32 %3459, 5
  %3471 = sub i32 %3459, %3470
  br label %3472

3472:                                             ; preds = %3466, %3462
  %3473 = phi i64 [ %3468, %3466 ], [ %3456, %3462 ]
  %3474 = phi i32 [ %3469, %3466 ], [ %3461, %3462 ]
  %3475 = phi i32 [ %3471, %3466 ], [ %3465, %3462 ]
  store i32 %3475, i32* %3458, align 4
  %3476 = icmp ult i32 %3474, 16777216
  br i1 %3476, label %3477, label %4002

3477:                                             ; preds = %3472
  %3478 = shl i32 %3474, 8
  store i32 %3478, i32* %397, align 8
  %3479 = trunc i64 %3473 to i32
  %3480 = icmp ult i32 %3479, -16777216
  %3481 = icmp ugt i64 %3473, 4294967295
  %3482 = or i1 %3481, %3480
  br i1 %3482, label %3486, label %3483

3483:                                             ; preds = %3477
  %3484 = load i64, i64* %399, align 8
  %3485 = add i64 %3484, 1
  br label %3561

3486:                                             ; preds = %3477
  %3487 = load i8, i8* %400, align 4
  %3488 = load i8*, i8** %401, align 8
  %3489 = lshr i64 %3473, 32
  %3490 = trunc i64 %3489 to i8
  %3491 = add i8 %3487, %3490
  %3492 = getelementptr inbounds i8, i8* %3488, i64 1
  store i8 %3491, i8* %3488, align 1
  store i8* %3492, i8** %401, align 8
  %3493 = load i8*, i8** %402, align 8
  %3494 = icmp eq i8* %3492, %3493
  %3495 = ptrtoint i8* %3492 to i64
  br i1 %3494, label %3496, label %3515

3496:                                             ; preds = %3486
  %3497 = load i32, i32* %23, align 8
  %3498 = icmp eq i32 %3497, 0
  br i1 %3498, label %3499, label %3515

3499:                                             ; preds = %3496
  %3500 = load i8*, i8** %404, align 8
  %3501 = ptrtoint i8* %3500 to i64
  %3502 = sub i64 %3495, %3501
  %3503 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %3504 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %3503, i64 0, i32 0
  %3505 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %3504, align 8
  %3506 = bitcast %struct.ISeqOutStream* %3503 to i8*
  %3507 = tail call i64 %3505(i8* %3506, i8* %3500, i64 %3502) #6
  %3508 = icmp eq i64 %3502, %3507
  br i1 %3508, label %3510, label %3509

3509:                                             ; preds = %3499
  store i32 9, i32* %23, align 8
  br label %3510

3510:                                             ; preds = %3509, %3499
  %3511 = load i64, i64* %406, align 8
  %3512 = add i64 %3511, %3502
  store i64 %3512, i64* %406, align 8
  %3513 = load i64, i64* %407, align 8
  store i64 %3513, i64* %403, align 8
  %3514 = inttoptr i64 %3513 to i8*
  br label %3515

3515:                                             ; preds = %3510, %3496, %3486
  %3516 = phi i8* [ %3514, %3510 ], [ %3492, %3496 ], [ %3492, %3486 ]
  %3517 = load i64, i64* %399, align 8
  %3518 = add i64 %3517, -1
  store i64 %3518, i64* %399, align 8
  %3519 = icmp eq i64 %3518, 0
  %3520 = load i64, i64* %398, align 8
  br i1 %3519, label %3556, label %3521

3521:                                             ; preds = %3515, %3550
  %3522 = phi i64 [ %3555, %3550 ], [ %3520, %3515 ]
  %3523 = phi i8* [ %3551, %3550 ], [ %3516, %3515 ]
  %3524 = lshr i64 %3522, 32
  %3525 = trunc i64 %3524 to i8
  %3526 = add i8 %3525, -1
  %3527 = getelementptr inbounds i8, i8* %3523, i64 1
  store i8 %3526, i8* %3523, align 1
  store i8* %3527, i8** %401, align 8
  %3528 = load i8*, i8** %402, align 8
  %3529 = icmp eq i8* %3527, %3528
  %3530 = ptrtoint i8* %3527 to i64
  br i1 %3529, label %3531, label %3550

3531:                                             ; preds = %3521
  %3532 = load i32, i32* %23, align 8
  %3533 = icmp eq i32 %3532, 0
  br i1 %3533, label %3534, label %3550

3534:                                             ; preds = %3531
  %3535 = load i8*, i8** %404, align 8
  %3536 = ptrtoint i8* %3535 to i64
  %3537 = sub i64 %3530, %3536
  %3538 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %3539 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %3538, i64 0, i32 0
  %3540 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %3539, align 8
  %3541 = bitcast %struct.ISeqOutStream* %3538 to i8*
  %3542 = tail call i64 %3540(i8* %3541, i8* %3535, i64 %3537) #6
  %3543 = icmp eq i64 %3537, %3542
  br i1 %3543, label %3545, label %3544

3544:                                             ; preds = %3534
  store i32 9, i32* %23, align 8
  br label %3545

3545:                                             ; preds = %3544, %3534
  %3546 = load i64, i64* %406, align 8
  %3547 = add i64 %3546, %3537
  store i64 %3547, i64* %406, align 8
  %3548 = load i64, i64* %407, align 8
  store i64 %3548, i64* %403, align 8
  %3549 = inttoptr i64 %3548 to i8*
  br label %3550

3550:                                             ; preds = %3545, %3531, %3521
  %3551 = phi i8* [ %3549, %3545 ], [ %3527, %3531 ], [ %3527, %3521 ]
  %3552 = load i64, i64* %399, align 8
  %3553 = add i64 %3552, -1
  store i64 %3553, i64* %399, align 8
  %3554 = icmp eq i64 %3553, 0
  %3555 = load i64, i64* %398, align 8
  br i1 %3554, label %3556, label %3521, !llvm.loop !24

3556:                                             ; preds = %3550, %3515
  %3557 = phi i64 [ %3520, %3515 ], [ %3555, %3550 ]
  %3558 = trunc i64 %3557 to i32
  %3559 = lshr i32 %3558, 24
  %3560 = trunc i32 %3559 to i8
  store i8 %3560, i8* %400, align 4
  br label %3561

3561:                                             ; preds = %3483, %3556
  %3562 = phi i64 [ %3473, %3483 ], [ %3557, %3556 ]
  %3563 = phi i64 [ %3485, %3483 ], [ 1, %3556 ]
  store i64 %3563, i64* %399, align 8
  %3564 = shl i64 %3562, 8
  %3565 = and i64 %3564, 4294967040
  store i64 %3565, i64* %398, align 8
  br label %4002

3566:                                             ; preds = %3345
  %3567 = zext i32 %2740 to i64
  %3568 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 9, i64 %3567
  %3569 = load i32, i32* %3568, align 4
  %3570 = load i32, i32* %381, align 4
  %3571 = zext i32 %3570 to i64
  %3572 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 40, i64 %3571
  %3573 = load i32, i32* %3572, align 4
  %3574 = load i32, i32* %397, align 8
  %3575 = lshr i32 %3574, 11
  %3576 = mul i32 %3575, %3573
  %3577 = zext i32 %3576 to i64
  %3578 = add i64 %3346, %3577
  store i64 %3578, i64* %398, align 8
  %3579 = sub i32 %3574, %3576
  store i32 %3579, i32* %397, align 8
  %3580 = lshr i32 %3573, 5
  %3581 = sub i32 %3573, %3580
  store i32 %3581, i32* %3572, align 4
  %3582 = icmp ult i32 %3579, 16777216
  br i1 %3582, label %3583, label %3677

3583:                                             ; preds = %3566
  %3584 = shl i32 %3579, 8
  store i32 %3584, i32* %397, align 8
  %3585 = trunc i64 %3578 to i32
  %3586 = icmp ult i32 %3585, -16777216
  %3587 = icmp ugt i64 %3578, 4294967295
  %3588 = or i1 %3587, %3586
  br i1 %3588, label %3592, label %3589

3589:                                             ; preds = %3583
  %3590 = load i64, i64* %399, align 8
  %3591 = add i64 %3590, 1
  br label %3670

3592:                                             ; preds = %3583
  %3593 = load i8, i8* %400, align 4
  %3594 = load i8*, i8** %401, align 8
  %3595 = lshr i64 %3578, 32
  %3596 = trunc i64 %3595 to i8
  %3597 = add i8 %3593, %3596
  %3598 = getelementptr inbounds i8, i8* %3594, i64 1
  store i8 %3597, i8* %3594, align 1
  store i8* %3598, i8** %401, align 8
  %3599 = load i8*, i8** %402, align 8
  %3600 = icmp eq i8* %3598, %3599
  %3601 = ptrtoint i8* %3598 to i64
  br i1 %3600, label %3602, label %3621

3602:                                             ; preds = %3592
  %3603 = load i32, i32* %23, align 8
  %3604 = icmp eq i32 %3603, 0
  br i1 %3604, label %3605, label %3621

3605:                                             ; preds = %3602
  %3606 = load i8*, i8** %404, align 8
  %3607 = ptrtoint i8* %3606 to i64
  %3608 = sub i64 %3601, %3607
  %3609 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %3610 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %3609, i64 0, i32 0
  %3611 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %3610, align 8
  %3612 = bitcast %struct.ISeqOutStream* %3609 to i8*
  %3613 = tail call i64 %3611(i8* %3612, i8* %3606, i64 %3608) #6
  %3614 = icmp eq i64 %3608, %3613
  br i1 %3614, label %3616, label %3615

3615:                                             ; preds = %3605
  store i32 9, i32* %23, align 8
  br label %3616

3616:                                             ; preds = %3615, %3605
  %3617 = load i64, i64* %406, align 8
  %3618 = add i64 %3617, %3608
  store i64 %3618, i64* %406, align 8
  %3619 = load i64, i64* %407, align 8
  store i64 %3619, i64* %403, align 8
  %3620 = inttoptr i64 %3619 to i8*
  br label %3621

3621:                                             ; preds = %3616, %3602, %3592
  %3622 = phi i8* [ %3620, %3616 ], [ %3598, %3602 ], [ %3598, %3592 ]
  %3623 = load i64, i64* %399, align 8
  %3624 = add i64 %3623, -1
  store i64 %3624, i64* %399, align 8
  %3625 = icmp eq i64 %3624, 0
  %3626 = load i64, i64* %398, align 8
  br i1 %3625, label %3662, label %3627

3627:                                             ; preds = %3621, %3656
  %3628 = phi i64 [ %3661, %3656 ], [ %3626, %3621 ]
  %3629 = phi i8* [ %3657, %3656 ], [ %3622, %3621 ]
  %3630 = lshr i64 %3628, 32
  %3631 = trunc i64 %3630 to i8
  %3632 = add i8 %3631, -1
  %3633 = getelementptr inbounds i8, i8* %3629, i64 1
  store i8 %3632, i8* %3629, align 1
  store i8* %3633, i8** %401, align 8
  %3634 = load i8*, i8** %402, align 8
  %3635 = icmp eq i8* %3633, %3634
  %3636 = ptrtoint i8* %3633 to i64
  br i1 %3635, label %3637, label %3656

3637:                                             ; preds = %3627
  %3638 = load i32, i32* %23, align 8
  %3639 = icmp eq i32 %3638, 0
  br i1 %3639, label %3640, label %3656

3640:                                             ; preds = %3637
  %3641 = load i8*, i8** %404, align 8
  %3642 = ptrtoint i8* %3641 to i64
  %3643 = sub i64 %3636, %3642
  %3644 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %3645 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %3644, i64 0, i32 0
  %3646 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %3645, align 8
  %3647 = bitcast %struct.ISeqOutStream* %3644 to i8*
  %3648 = tail call i64 %3646(i8* %3647, i8* %3641, i64 %3643) #6
  %3649 = icmp eq i64 %3643, %3648
  br i1 %3649, label %3651, label %3650

3650:                                             ; preds = %3640
  store i32 9, i32* %23, align 8
  br label %3651

3651:                                             ; preds = %3650, %3640
  %3652 = load i64, i64* %406, align 8
  %3653 = add i64 %3652, %3643
  store i64 %3653, i64* %406, align 8
  %3654 = load i64, i64* %407, align 8
  store i64 %3654, i64* %403, align 8
  %3655 = inttoptr i64 %3654 to i8*
  br label %3656

3656:                                             ; preds = %3651, %3637, %3627
  %3657 = phi i8* [ %3655, %3651 ], [ %3633, %3637 ], [ %3633, %3627 ]
  %3658 = load i64, i64* %399, align 8
  %3659 = add i64 %3658, -1
  store i64 %3659, i64* %399, align 8
  %3660 = icmp eq i64 %3659, 0
  %3661 = load i64, i64* %398, align 8
  br i1 %3660, label %3662, label %3627, !llvm.loop !25

3662:                                             ; preds = %3656, %3621
  %3663 = phi i64 [ %3626, %3621 ], [ %3661, %3656 ]
  %3664 = trunc i64 %3663 to i32
  %3665 = lshr i32 %3664, 24
  %3666 = trunc i32 %3665 to i8
  store i8 %3666, i8* %400, align 4
  %3667 = load i32, i32* %381, align 4
  %3668 = load i32, i32* %397, align 8
  %3669 = zext i32 %3667 to i64
  br label %3670

3670:                                             ; preds = %3589, %3662
  %3671 = phi i64 [ %3571, %3589 ], [ %3669, %3662 ]
  %3672 = phi i32 [ %3584, %3589 ], [ %3668, %3662 ]
  %3673 = phi i64 [ %3578, %3589 ], [ %3663, %3662 ]
  %3674 = phi i64 [ %3591, %3589 ], [ 1, %3662 ]
  store i64 %3674, i64* %399, align 8
  %3675 = shl i64 %3673, 8
  %3676 = and i64 %3675, 4294967040
  store i64 %3676, i64* %398, align 8
  br label %3677

3677:                                             ; preds = %3566, %3670
  %3678 = phi i64 [ %3571, %3566 ], [ %3671, %3670 ]
  %3679 = phi i64 [ %3578, %3566 ], [ %3676, %3670 ]
  %3680 = phi i32 [ %3579, %3566 ], [ %3672, %3670 ]
  %3681 = icmp eq i32 %2740, 1
  %3682 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 41, i64 %3678
  %3683 = load i32, i32* %3682, align 4
  %3684 = lshr i32 %3680, 11
  %3685 = mul i32 %3684, %3683
  br i1 %3681, label %3686, label %3780

3686:                                             ; preds = %3677
  store i32 %3685, i32* %397, align 8
  %3687 = sub i32 2048, %3683
  %3688 = lshr i32 %3687, 5
  %3689 = add i32 %3688, %3683
  store i32 %3689, i32* %3682, align 4
  %3690 = icmp ult i32 %3685, 16777216
  br i1 %3690, label %3691, label %4000

3691:                                             ; preds = %3686
  %3692 = shl i32 %3685, 8
  store i32 %3692, i32* %397, align 8
  %3693 = trunc i64 %3679 to i32
  %3694 = icmp ult i32 %3693, -16777216
  %3695 = icmp ugt i64 %3679, 4294967295
  %3696 = or i1 %3695, %3694
  br i1 %3696, label %3700, label %3697

3697:                                             ; preds = %3691
  %3698 = load i64, i64* %399, align 8
  %3699 = add i64 %3698, 1
  br label %3775

3700:                                             ; preds = %3691
  %3701 = load i8, i8* %400, align 4
  %3702 = load i8*, i8** %401, align 8
  %3703 = lshr i64 %3679, 32
  %3704 = trunc i64 %3703 to i8
  %3705 = add i8 %3701, %3704
  %3706 = getelementptr inbounds i8, i8* %3702, i64 1
  store i8 %3705, i8* %3702, align 1
  store i8* %3706, i8** %401, align 8
  %3707 = load i8*, i8** %402, align 8
  %3708 = icmp eq i8* %3706, %3707
  %3709 = ptrtoint i8* %3706 to i64
  br i1 %3708, label %3710, label %3729

3710:                                             ; preds = %3700
  %3711 = load i32, i32* %23, align 8
  %3712 = icmp eq i32 %3711, 0
  br i1 %3712, label %3713, label %3729

3713:                                             ; preds = %3710
  %3714 = load i8*, i8** %404, align 8
  %3715 = ptrtoint i8* %3714 to i64
  %3716 = sub i64 %3709, %3715
  %3717 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %3718 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %3717, i64 0, i32 0
  %3719 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %3718, align 8
  %3720 = bitcast %struct.ISeqOutStream* %3717 to i8*
  %3721 = tail call i64 %3719(i8* %3720, i8* %3714, i64 %3716) #6
  %3722 = icmp eq i64 %3716, %3721
  br i1 %3722, label %3724, label %3723

3723:                                             ; preds = %3713
  store i32 9, i32* %23, align 8
  br label %3724

3724:                                             ; preds = %3723, %3713
  %3725 = load i64, i64* %406, align 8
  %3726 = add i64 %3725, %3716
  store i64 %3726, i64* %406, align 8
  %3727 = load i64, i64* %407, align 8
  store i64 %3727, i64* %403, align 8
  %3728 = inttoptr i64 %3727 to i8*
  br label %3729

3729:                                             ; preds = %3724, %3710, %3700
  %3730 = phi i8* [ %3728, %3724 ], [ %3706, %3710 ], [ %3706, %3700 ]
  %3731 = load i64, i64* %399, align 8
  %3732 = add i64 %3731, -1
  store i64 %3732, i64* %399, align 8
  %3733 = icmp eq i64 %3732, 0
  %3734 = load i64, i64* %398, align 8
  br i1 %3733, label %3770, label %3735

3735:                                             ; preds = %3729, %3764
  %3736 = phi i64 [ %3769, %3764 ], [ %3734, %3729 ]
  %3737 = phi i8* [ %3765, %3764 ], [ %3730, %3729 ]
  %3738 = lshr i64 %3736, 32
  %3739 = trunc i64 %3738 to i8
  %3740 = add i8 %3739, -1
  %3741 = getelementptr inbounds i8, i8* %3737, i64 1
  store i8 %3740, i8* %3737, align 1
  store i8* %3741, i8** %401, align 8
  %3742 = load i8*, i8** %402, align 8
  %3743 = icmp eq i8* %3741, %3742
  %3744 = ptrtoint i8* %3741 to i64
  br i1 %3743, label %3745, label %3764

3745:                                             ; preds = %3735
  %3746 = load i32, i32* %23, align 8
  %3747 = icmp eq i32 %3746, 0
  br i1 %3747, label %3748, label %3764

3748:                                             ; preds = %3745
  %3749 = load i8*, i8** %404, align 8
  %3750 = ptrtoint i8* %3749 to i64
  %3751 = sub i64 %3744, %3750
  %3752 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %3753 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %3752, i64 0, i32 0
  %3754 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %3753, align 8
  %3755 = bitcast %struct.ISeqOutStream* %3752 to i8*
  %3756 = tail call i64 %3754(i8* %3755, i8* %3749, i64 %3751) #6
  %3757 = icmp eq i64 %3751, %3756
  br i1 %3757, label %3759, label %3758

3758:                                             ; preds = %3748
  store i32 9, i32* %23, align 8
  br label %3759

3759:                                             ; preds = %3758, %3748
  %3760 = load i64, i64* %406, align 8
  %3761 = add i64 %3760, %3751
  store i64 %3761, i64* %406, align 8
  %3762 = load i64, i64* %407, align 8
  store i64 %3762, i64* %403, align 8
  %3763 = inttoptr i64 %3762 to i8*
  br label %3764

3764:                                             ; preds = %3759, %3745, %3735
  %3765 = phi i8* [ %3763, %3759 ], [ %3741, %3745 ], [ %3741, %3735 ]
  %3766 = load i64, i64* %399, align 8
  %3767 = add i64 %3766, -1
  store i64 %3767, i64* %399, align 8
  %3768 = icmp eq i64 %3767, 0
  %3769 = load i64, i64* %398, align 8
  br i1 %3768, label %3770, label %3735, !llvm.loop !26

3770:                                             ; preds = %3764, %3729
  %3771 = phi i64 [ %3734, %3729 ], [ %3769, %3764 ]
  %3772 = trunc i64 %3771 to i32
  %3773 = lshr i32 %3772, 24
  %3774 = trunc i32 %3773 to i8
  store i8 %3774, i8* %400, align 4
  br label %3775

3775:                                             ; preds = %3697, %3770
  %3776 = phi i64 [ %3679, %3697 ], [ %3771, %3770 ]
  %3777 = phi i64 [ %3699, %3697 ], [ 1, %3770 ]
  store i64 %3777, i64* %399, align 8
  %3778 = shl i64 %3776, 8
  %3779 = and i64 %3778, 4294967040
  store i64 %3779, i64* %398, align 8
  br label %4000

3780:                                             ; preds = %3677
  %3781 = zext i32 %3685 to i64
  %3782 = add i64 %3679, %3781
  store i64 %3782, i64* %398, align 8
  %3783 = sub i32 %3680, %3685
  store i32 %3783, i32* %397, align 8
  %3784 = lshr i32 %3683, 5
  %3785 = sub i32 %3683, %3784
  store i32 %3785, i32* %3682, align 4
  %3786 = icmp ult i32 %3783, 16777216
  br i1 %3786, label %3787, label %3881

3787:                                             ; preds = %3780
  %3788 = shl i32 %3783, 8
  store i32 %3788, i32* %397, align 8
  %3789 = trunc i64 %3782 to i32
  %3790 = icmp ult i32 %3789, -16777216
  %3791 = icmp ugt i64 %3782, 4294967295
  %3792 = or i1 %3791, %3790
  br i1 %3792, label %3796, label %3793

3793:                                             ; preds = %3787
  %3794 = load i64, i64* %399, align 8
  %3795 = add i64 %3794, 1
  br label %3874

3796:                                             ; preds = %3787
  %3797 = load i8, i8* %400, align 4
  %3798 = load i8*, i8** %401, align 8
  %3799 = lshr i64 %3782, 32
  %3800 = trunc i64 %3799 to i8
  %3801 = add i8 %3797, %3800
  %3802 = getelementptr inbounds i8, i8* %3798, i64 1
  store i8 %3801, i8* %3798, align 1
  store i8* %3802, i8** %401, align 8
  %3803 = load i8*, i8** %402, align 8
  %3804 = icmp eq i8* %3802, %3803
  %3805 = ptrtoint i8* %3802 to i64
  br i1 %3804, label %3806, label %3825

3806:                                             ; preds = %3796
  %3807 = load i32, i32* %23, align 8
  %3808 = icmp eq i32 %3807, 0
  br i1 %3808, label %3809, label %3825

3809:                                             ; preds = %3806
  %3810 = load i8*, i8** %404, align 8
  %3811 = ptrtoint i8* %3810 to i64
  %3812 = sub i64 %3805, %3811
  %3813 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %3814 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %3813, i64 0, i32 0
  %3815 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %3814, align 8
  %3816 = bitcast %struct.ISeqOutStream* %3813 to i8*
  %3817 = tail call i64 %3815(i8* %3816, i8* %3810, i64 %3812) #6
  %3818 = icmp eq i64 %3812, %3817
  br i1 %3818, label %3820, label %3819

3819:                                             ; preds = %3809
  store i32 9, i32* %23, align 8
  br label %3820

3820:                                             ; preds = %3819, %3809
  %3821 = load i64, i64* %406, align 8
  %3822 = add i64 %3821, %3812
  store i64 %3822, i64* %406, align 8
  %3823 = load i64, i64* %407, align 8
  store i64 %3823, i64* %403, align 8
  %3824 = inttoptr i64 %3823 to i8*
  br label %3825

3825:                                             ; preds = %3820, %3806, %3796
  %3826 = phi i8* [ %3824, %3820 ], [ %3802, %3806 ], [ %3802, %3796 ]
  %3827 = load i64, i64* %399, align 8
  %3828 = add i64 %3827, -1
  store i64 %3828, i64* %399, align 8
  %3829 = icmp eq i64 %3828, 0
  %3830 = load i64, i64* %398, align 8
  br i1 %3829, label %3866, label %3831

3831:                                             ; preds = %3825, %3860
  %3832 = phi i64 [ %3865, %3860 ], [ %3830, %3825 ]
  %3833 = phi i8* [ %3861, %3860 ], [ %3826, %3825 ]
  %3834 = lshr i64 %3832, 32
  %3835 = trunc i64 %3834 to i8
  %3836 = add i8 %3835, -1
  %3837 = getelementptr inbounds i8, i8* %3833, i64 1
  store i8 %3836, i8* %3833, align 1
  store i8* %3837, i8** %401, align 8
  %3838 = load i8*, i8** %402, align 8
  %3839 = icmp eq i8* %3837, %3838
  %3840 = ptrtoint i8* %3837 to i64
  br i1 %3839, label %3841, label %3860

3841:                                             ; preds = %3831
  %3842 = load i32, i32* %23, align 8
  %3843 = icmp eq i32 %3842, 0
  br i1 %3843, label %3844, label %3860

3844:                                             ; preds = %3841
  %3845 = load i8*, i8** %404, align 8
  %3846 = ptrtoint i8* %3845 to i64
  %3847 = sub i64 %3840, %3846
  %3848 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %3849 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %3848, i64 0, i32 0
  %3850 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %3849, align 8
  %3851 = bitcast %struct.ISeqOutStream* %3848 to i8*
  %3852 = tail call i64 %3850(i8* %3851, i8* %3845, i64 %3847) #6
  %3853 = icmp eq i64 %3847, %3852
  br i1 %3853, label %3855, label %3854

3854:                                             ; preds = %3844
  store i32 9, i32* %23, align 8
  br label %3855

3855:                                             ; preds = %3854, %3844
  %3856 = load i64, i64* %406, align 8
  %3857 = add i64 %3856, %3847
  store i64 %3857, i64* %406, align 8
  %3858 = load i64, i64* %407, align 8
  store i64 %3858, i64* %403, align 8
  %3859 = inttoptr i64 %3858 to i8*
  br label %3860

3860:                                             ; preds = %3855, %3841, %3831
  %3861 = phi i8* [ %3859, %3855 ], [ %3837, %3841 ], [ %3837, %3831 ]
  %3862 = load i64, i64* %399, align 8
  %3863 = add i64 %3862, -1
  store i64 %3863, i64* %399, align 8
  %3864 = icmp eq i64 %3863, 0
  %3865 = load i64, i64* %398, align 8
  br i1 %3864, label %3866, label %3831, !llvm.loop !27

3866:                                             ; preds = %3860, %3825
  %3867 = phi i64 [ %3830, %3825 ], [ %3865, %3860 ]
  %3868 = trunc i64 %3867 to i32
  %3869 = lshr i32 %3868, 24
  %3870 = trunc i32 %3869 to i8
  store i8 %3870, i8* %400, align 4
  %3871 = load i32, i32* %381, align 4
  %3872 = load i32, i32* %397, align 8
  %3873 = zext i32 %3871 to i64
  br label %3874

3874:                                             ; preds = %3793, %3866
  %3875 = phi i64 [ %3678, %3793 ], [ %3873, %3866 ]
  %3876 = phi i32 [ %3788, %3793 ], [ %3872, %3866 ]
  %3877 = phi i64 [ %3782, %3793 ], [ %3867, %3866 ]
  %3878 = phi i64 [ %3795, %3793 ], [ 1, %3866 ]
  store i64 %3878, i64* %399, align 8
  %3879 = shl i64 %3877, 8
  %3880 = and i64 %3879, 4294967040
  store i64 %3880, i64* %398, align 8
  br label %3881

3881:                                             ; preds = %3780, %3874
  %3882 = phi i64 [ %3678, %3780 ], [ %3875, %3874 ]
  %3883 = phi i64 [ %3782, %3780 ], [ %3880, %3874 ]
  %3884 = phi i32 [ %3783, %3780 ], [ %3876, %3874 ]
  %3885 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 42, i64 %3882
  %3886 = load i32, i32* %3885, align 4
  %3887 = lshr i32 %3884, 11
  %3888 = mul i32 %3887, %3886
  %3889 = icmp eq i32 %2740, 2
  br i1 %3889, label %3890, label %3894

3890:                                             ; preds = %3881
  store i32 %3888, i32* %397, align 8
  %3891 = sub i32 2048, %3886
  %3892 = lshr i32 %3891, 5
  %3893 = add i32 %3892, %3886
  br label %3900

3894:                                             ; preds = %3881
  %3895 = zext i32 %3888 to i64
  %3896 = add i64 %3883, %3895
  store i64 %3896, i64* %398, align 8
  %3897 = sub i32 %3884, %3888
  store i32 %3897, i32* %397, align 8
  %3898 = lshr i32 %3886, 5
  %3899 = sub i32 %3886, %3898
  br label %3900

3900:                                             ; preds = %3894, %3890
  %3901 = phi i64 [ %3896, %3894 ], [ %3883, %3890 ]
  %3902 = phi i32 [ %3897, %3894 ], [ %3888, %3890 ]
  %3903 = phi i32 [ %3899, %3894 ], [ %3893, %3890 ]
  store i32 %3903, i32* %3885, align 4
  %3904 = icmp ult i32 %3902, 16777216
  br i1 %3904, label %3905, label %3994

3905:                                             ; preds = %3900
  %3906 = shl i32 %3902, 8
  store i32 %3906, i32* %397, align 8
  %3907 = trunc i64 %3901 to i32
  %3908 = icmp ult i32 %3907, -16777216
  %3909 = icmp ugt i64 %3901, 4294967295
  %3910 = or i1 %3909, %3908
  br i1 %3910, label %3914, label %3911

3911:                                             ; preds = %3905
  %3912 = load i64, i64* %399, align 8
  %3913 = add i64 %3912, 1
  br label %3989

3914:                                             ; preds = %3905
  %3915 = load i8, i8* %400, align 4
  %3916 = load i8*, i8** %401, align 8
  %3917 = lshr i64 %3901, 32
  %3918 = trunc i64 %3917 to i8
  %3919 = add i8 %3915, %3918
  %3920 = getelementptr inbounds i8, i8* %3916, i64 1
  store i8 %3919, i8* %3916, align 1
  store i8* %3920, i8** %401, align 8
  %3921 = load i8*, i8** %402, align 8
  %3922 = icmp eq i8* %3920, %3921
  %3923 = ptrtoint i8* %3920 to i64
  br i1 %3922, label %3924, label %3943

3924:                                             ; preds = %3914
  %3925 = load i32, i32* %23, align 8
  %3926 = icmp eq i32 %3925, 0
  br i1 %3926, label %3927, label %3943

3927:                                             ; preds = %3924
  %3928 = load i8*, i8** %404, align 8
  %3929 = ptrtoint i8* %3928 to i64
  %3930 = sub i64 %3923, %3929
  %3931 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %3932 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %3931, i64 0, i32 0
  %3933 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %3932, align 8
  %3934 = bitcast %struct.ISeqOutStream* %3931 to i8*
  %3935 = tail call i64 %3933(i8* %3934, i8* %3928, i64 %3930) #6
  %3936 = icmp eq i64 %3930, %3935
  br i1 %3936, label %3938, label %3937

3937:                                             ; preds = %3927
  store i32 9, i32* %23, align 8
  br label %3938

3938:                                             ; preds = %3937, %3927
  %3939 = load i64, i64* %406, align 8
  %3940 = add i64 %3939, %3930
  store i64 %3940, i64* %406, align 8
  %3941 = load i64, i64* %407, align 8
  store i64 %3941, i64* %403, align 8
  %3942 = inttoptr i64 %3941 to i8*
  br label %3943

3943:                                             ; preds = %3938, %3924, %3914
  %3944 = phi i8* [ %3942, %3938 ], [ %3920, %3924 ], [ %3920, %3914 ]
  %3945 = load i64, i64* %399, align 8
  %3946 = add i64 %3945, -1
  store i64 %3946, i64* %399, align 8
  %3947 = icmp eq i64 %3946, 0
  %3948 = load i64, i64* %398, align 8
  br i1 %3947, label %3984, label %3949

3949:                                             ; preds = %3943, %3978
  %3950 = phi i64 [ %3983, %3978 ], [ %3948, %3943 ]
  %3951 = phi i8* [ %3979, %3978 ], [ %3944, %3943 ]
  %3952 = lshr i64 %3950, 32
  %3953 = trunc i64 %3952 to i8
  %3954 = add i8 %3953, -1
  %3955 = getelementptr inbounds i8, i8* %3951, i64 1
  store i8 %3954, i8* %3951, align 1
  store i8* %3955, i8** %401, align 8
  %3956 = load i8*, i8** %402, align 8
  %3957 = icmp eq i8* %3955, %3956
  %3958 = ptrtoint i8* %3955 to i64
  br i1 %3957, label %3959, label %3978

3959:                                             ; preds = %3949
  %3960 = load i32, i32* %23, align 8
  %3961 = icmp eq i32 %3960, 0
  br i1 %3961, label %3962, label %3978

3962:                                             ; preds = %3959
  %3963 = load i8*, i8** %404, align 8
  %3964 = ptrtoint i8* %3963 to i64
  %3965 = sub i64 %3958, %3964
  %3966 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %3967 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %3966, i64 0, i32 0
  %3968 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %3967, align 8
  %3969 = bitcast %struct.ISeqOutStream* %3966 to i8*
  %3970 = tail call i64 %3968(i8* %3969, i8* %3963, i64 %3965) #6
  %3971 = icmp eq i64 %3965, %3970
  br i1 %3971, label %3973, label %3972

3972:                                             ; preds = %3962
  store i32 9, i32* %23, align 8
  br label %3973

3973:                                             ; preds = %3972, %3962
  %3974 = load i64, i64* %406, align 8
  %3975 = add i64 %3974, %3965
  store i64 %3975, i64* %406, align 8
  %3976 = load i64, i64* %407, align 8
  store i64 %3976, i64* %403, align 8
  %3977 = inttoptr i64 %3976 to i8*
  br label %3978

3978:                                             ; preds = %3973, %3959, %3949
  %3979 = phi i8* [ %3977, %3973 ], [ %3955, %3959 ], [ %3955, %3949 ]
  %3980 = load i64, i64* %399, align 8
  %3981 = add i64 %3980, -1
  store i64 %3981, i64* %399, align 8
  %3982 = icmp eq i64 %3981, 0
  %3983 = load i64, i64* %398, align 8
  br i1 %3982, label %3984, label %3949, !llvm.loop !28

3984:                                             ; preds = %3978, %3943
  %3985 = phi i64 [ %3948, %3943 ], [ %3983, %3978 ]
  %3986 = trunc i64 %3985 to i32
  %3987 = lshr i32 %3986, 24
  %3988 = trunc i32 %3987 to i8
  store i8 %3988, i8* %400, align 4
  br label %3989

3989:                                             ; preds = %3911, %3984
  %3990 = phi i64 [ %3901, %3911 ], [ %3985, %3984 ]
  %3991 = phi i64 [ %3913, %3911 ], [ 1, %3984 ]
  store i64 %3991, i64* %399, align 8
  %3992 = shl i64 %3990, 8
  %3993 = and i64 %3992, 4294967040
  store i64 %3993, i64* %398, align 8
  br label %3994

3994:                                             ; preds = %3900, %3989
  %3995 = icmp eq i32 %2740, 3
  br i1 %3995, label %3996, label %3998

3996:                                             ; preds = %3994
  %3997 = load i32, i32* %367, align 4
  store i32 %3997, i32* %368, align 4
  br label %3998

3998:                                             ; preds = %3996, %3994
  %3999 = load i32, i32* %366, align 4
  store i32 %3999, i32* %367, align 4
  br label %4000

4000:                                             ; preds = %3775, %3686, %3998
  %4001 = load i32, i32* %365, align 4
  store i32 %4001, i32* %366, align 4
  store i32 %3569, i32* %365, align 4
  br label %4002

4002:                                             ; preds = %3561, %3472, %4000
  br i1 %2744, label %4003, label %4008

4003:                                             ; preds = %4002
  %4004 = load i32, i32* %381, align 4
  %4005 = zext i32 %4004 to i64
  %4006 = getelementptr inbounds [12 x i32], [12 x i32]* @kShortRepNextStates, i64 0, i64 %4005
  %4007 = load i32, i32* %4006, align 4
  store i32 %4007, i32* %381, align 4
  br label %4650

4008:                                             ; preds = %4002
  %4009 = add i32 %2741, -2
  %4010 = load i32, i32* %356, align 8
  %4011 = icmp eq i32 %4010, 0
  %4012 = zext i1 %4011 to i32
  tail call fastcc void @LenEnc_Encode2(%struct.CLenPriceEnc* %412, %struct.CRangeEnc* %396, i32 %4009, i32 %2743, i32 %4012, i32* %409)
  %4013 = load i32, i32* %381, align 4
  %4014 = zext i32 %4013 to i64
  %4015 = getelementptr inbounds [12 x i32], [12 x i32]* @kRepNextStates, i64 0, i64 %4014
  %4016 = load i32, i32* %4015, align 4
  store i32 %4016, i32* %381, align 4
  br label %4650

4017:                                             ; preds = %3240
  store i32 %3248, i32* %397, align 8
  %4018 = sub i32 2048, %3246
  %4019 = lshr i32 %4018, 5
  %4020 = add i32 %4019, %3246
  store i32 %4020, i32* %3245, align 4
  %4021 = icmp ult i32 %3248, 16777216
  br i1 %4021, label %4022, label %4114

4022:                                             ; preds = %4017
  %4023 = shl i32 %3248, 8
  store i32 %4023, i32* %397, align 8
  %4024 = trunc i64 %3242 to i32
  %4025 = icmp ult i32 %4024, -16777216
  %4026 = icmp ugt i64 %3242, 4294967295
  %4027 = or i1 %4026, %4025
  br i1 %4027, label %4031, label %4028

4028:                                             ; preds = %4022
  %4029 = load i64, i64* %399, align 8
  %4030 = add i64 %4029, 1
  br label %4108

4031:                                             ; preds = %4022
  %4032 = load i8, i8* %400, align 4
  %4033 = load i8*, i8** %401, align 8
  %4034 = lshr i64 %3242, 32
  %4035 = trunc i64 %4034 to i8
  %4036 = add i8 %4032, %4035
  %4037 = getelementptr inbounds i8, i8* %4033, i64 1
  store i8 %4036, i8* %4033, align 1
  store i8* %4037, i8** %401, align 8
  %4038 = load i8*, i8** %402, align 8
  %4039 = icmp eq i8* %4037, %4038
  %4040 = ptrtoint i8* %4037 to i64
  br i1 %4039, label %4041, label %4060

4041:                                             ; preds = %4031
  %4042 = load i32, i32* %23, align 8
  %4043 = icmp eq i32 %4042, 0
  br i1 %4043, label %4044, label %4060

4044:                                             ; preds = %4041
  %4045 = load i8*, i8** %404, align 8
  %4046 = ptrtoint i8* %4045 to i64
  %4047 = sub i64 %4040, %4046
  %4048 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %4049 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %4048, i64 0, i32 0
  %4050 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %4049, align 8
  %4051 = bitcast %struct.ISeqOutStream* %4048 to i8*
  %4052 = tail call i64 %4050(i8* %4051, i8* %4045, i64 %4047) #6
  %4053 = icmp eq i64 %4047, %4052
  br i1 %4053, label %4055, label %4054

4054:                                             ; preds = %4044
  store i32 9, i32* %23, align 8
  br label %4055

4055:                                             ; preds = %4054, %4044
  %4056 = load i64, i64* %406, align 8
  %4057 = add i64 %4056, %4047
  store i64 %4057, i64* %406, align 8
  %4058 = load i64, i64* %407, align 8
  store i64 %4058, i64* %403, align 8
  %4059 = inttoptr i64 %4058 to i8*
  br label %4060

4060:                                             ; preds = %4055, %4041, %4031
  %4061 = phi i8* [ %4059, %4055 ], [ %4037, %4041 ], [ %4037, %4031 ]
  %4062 = load i64, i64* %399, align 8
  %4063 = add i64 %4062, -1
  store i64 %4063, i64* %399, align 8
  %4064 = icmp eq i64 %4063, 0
  %4065 = load i64, i64* %398, align 8
  br i1 %4064, label %4101, label %4066

4066:                                             ; preds = %4060, %4095
  %4067 = phi i64 [ %4100, %4095 ], [ %4065, %4060 ]
  %4068 = phi i8* [ %4096, %4095 ], [ %4061, %4060 ]
  %4069 = lshr i64 %4067, 32
  %4070 = trunc i64 %4069 to i8
  %4071 = add i8 %4070, -1
  %4072 = getelementptr inbounds i8, i8* %4068, i64 1
  store i8 %4071, i8* %4068, align 1
  store i8* %4072, i8** %401, align 8
  %4073 = load i8*, i8** %402, align 8
  %4074 = icmp eq i8* %4072, %4073
  %4075 = ptrtoint i8* %4072 to i64
  br i1 %4074, label %4076, label %4095

4076:                                             ; preds = %4066
  %4077 = load i32, i32* %23, align 8
  %4078 = icmp eq i32 %4077, 0
  br i1 %4078, label %4079, label %4095

4079:                                             ; preds = %4076
  %4080 = load i8*, i8** %404, align 8
  %4081 = ptrtoint i8* %4080 to i64
  %4082 = sub i64 %4075, %4081
  %4083 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %4084 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %4083, i64 0, i32 0
  %4085 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %4084, align 8
  %4086 = bitcast %struct.ISeqOutStream* %4083 to i8*
  %4087 = tail call i64 %4085(i8* %4086, i8* %4080, i64 %4082) #6
  %4088 = icmp eq i64 %4082, %4087
  br i1 %4088, label %4090, label %4089

4089:                                             ; preds = %4079
  store i32 9, i32* %23, align 8
  br label %4090

4090:                                             ; preds = %4089, %4079
  %4091 = load i64, i64* %406, align 8
  %4092 = add i64 %4091, %4082
  store i64 %4092, i64* %406, align 8
  %4093 = load i64, i64* %407, align 8
  store i64 %4093, i64* %403, align 8
  %4094 = inttoptr i64 %4093 to i8*
  br label %4095

4095:                                             ; preds = %4090, %4076, %4066
  %4096 = phi i8* [ %4094, %4090 ], [ %4072, %4076 ], [ %4072, %4066 ]
  %4097 = load i64, i64* %399, align 8
  %4098 = add i64 %4097, -1
  store i64 %4098, i64* %399, align 8
  %4099 = icmp eq i64 %4098, 0
  %4100 = load i64, i64* %398, align 8
  br i1 %4099, label %4101, label %4066, !llvm.loop !29

4101:                                             ; preds = %4095, %4060
  %4102 = phi i64 [ %4065, %4060 ], [ %4100, %4095 ]
  %4103 = trunc i64 %4102 to i32
  %4104 = lshr i32 %4103, 24
  %4105 = trunc i32 %4104 to i8
  store i8 %4105, i8* %400, align 4
  %4106 = load i32, i32* %381, align 4
  %4107 = zext i32 %4106 to i64
  br label %4108

4108:                                             ; preds = %4028, %4101
  %4109 = phi i64 [ %3241, %4028 ], [ %4107, %4101 ]
  %4110 = phi i64 [ %3242, %4028 ], [ %4102, %4101 ]
  %4111 = phi i64 [ %4030, %4028 ], [ 1, %4101 ]
  store i64 %4111, i64* %399, align 8
  %4112 = shl i64 %4110, 8
  %4113 = and i64 %4112, 4294967040
  store i64 %4113, i64* %398, align 8
  br label %4114

4114:                                             ; preds = %4017, %4108
  %4115 = phi i64 [ %3241, %4017 ], [ %4109, %4108 ]
  %4116 = getelementptr inbounds [12 x i32], [12 x i32]* @kMatchNextStates, i64 0, i64 %4115
  %4117 = load i32, i32* %4116, align 4
  store i32 %4117, i32* %381, align 4
  %4118 = add i32 %2741, -2
  %4119 = load i32, i32* %356, align 8
  %4120 = icmp eq i32 %4119, 0
  %4121 = zext i1 %4120 to i32
  tail call fastcc void @LenEnc_Encode2(%struct.CLenPriceEnc* %408, %struct.CRangeEnc* %396, i32 %4118, i32 %2743, i32 %4121, i32* %409)
  %4122 = add i32 %2740, -4
  %4123 = icmp ult i32 %4122, 128
  br i1 %4123, label %4124, label %4129

4124:                                             ; preds = %4114
  %4125 = zext i32 %4122 to i64
  %4126 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 32, i64 %4125
  %4127 = load i8, i8* %4126, align 1
  %4128 = zext i8 %4127 to i32
  br label %4139

4129:                                             ; preds = %4114
  %4130 = icmp ult i32 %4122, 524288
  %4131 = select i1 %4130, i32 6, i32 18
  %4132 = lshr i32 %4122, %4131
  %4133 = zext i32 %4132 to i64
  %4134 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 32, i64 %4133
  %4135 = load i8, i8* %4134, align 1
  %4136 = zext i8 %4135 to i32
  %4137 = shl nuw nsw i32 %4131, 1
  %4138 = add nuw nsw i32 %4137, %4136
  br label %4139

4139:                                             ; preds = %4129, %4124
  %4140 = phi i32 [ %4128, %4124 ], [ %4138, %4129 ]
  %4141 = icmp ult i32 %2741, 5
  %4142 = select i1 %4141, i32 %4118, i32 3
  %4143 = zext i32 %4142 to i64
  br label %4144

4144:                                             ; preds = %4262, %4139
  %4145 = phi i32 [ 1, %4139 ], [ %4264, %4262 ]
  %4146 = phi i32 [ 6, %4139 ], [ %4147, %4262 ]
  %4147 = add nsw i32 %4146, -1
  %4148 = lshr i32 %4140, %4147
  %4149 = and i32 %4148, 1
  %4150 = zext i32 %4145 to i64
  %4151 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 %4143, i64 %4150
  %4152 = load i32, i32* %4151, align 4
  %4153 = load i32, i32* %397, align 8
  %4154 = lshr i32 %4153, 11
  %4155 = mul i32 %4154, %4152
  %4156 = icmp eq i32 %4149, 0
  br i1 %4156, label %4157, label %4161

4157:                                             ; preds = %4144
  store i32 %4155, i32* %397, align 8
  %4158 = sub i32 2048, %4152
  %4159 = lshr i32 %4158, 5
  %4160 = add i32 %4159, %4152
  br label %4168

4161:                                             ; preds = %4144
  %4162 = zext i32 %4155 to i64
  %4163 = load i64, i64* %398, align 8
  %4164 = add i64 %4163, %4162
  store i64 %4164, i64* %398, align 8
  %4165 = sub i32 %4153, %4155
  store i32 %4165, i32* %397, align 8
  %4166 = lshr i32 %4152, 5
  %4167 = sub i32 %4152, %4166
  br label %4168

4168:                                             ; preds = %4161, %4157
  %4169 = phi i32 [ %4165, %4161 ], [ %4155, %4157 ]
  %4170 = phi i32 [ %4167, %4161 ], [ %4160, %4157 ]
  store i32 %4170, i32* %4151, align 4
  %4171 = icmp ult i32 %4169, 16777216
  br i1 %4171, label %4172, label %4262

4172:                                             ; preds = %4168
  %4173 = shl i32 %4169, 8
  store i32 %4173, i32* %397, align 8
  %4174 = load i64, i64* %398, align 8
  %4175 = trunc i64 %4174 to i32
  %4176 = icmp ult i32 %4175, -16777216
  %4177 = icmp ugt i64 %4174, 4294967295
  %4178 = or i1 %4177, %4176
  br i1 %4178, label %4182, label %4179

4179:                                             ; preds = %4172
  %4180 = load i64, i64* %399, align 8
  %4181 = add i64 %4180, 1
  br label %4257

4182:                                             ; preds = %4172
  %4183 = load i8, i8* %400, align 4
  %4184 = load i8*, i8** %401, align 8
  %4185 = lshr i64 %4174, 32
  %4186 = trunc i64 %4185 to i8
  %4187 = add i8 %4183, %4186
  %4188 = getelementptr inbounds i8, i8* %4184, i64 1
  store i8 %4187, i8* %4184, align 1
  store i8* %4188, i8** %401, align 8
  %4189 = load i8*, i8** %402, align 8
  %4190 = icmp eq i8* %4188, %4189
  %4191 = ptrtoint i8* %4188 to i64
  br i1 %4190, label %4192, label %4211

4192:                                             ; preds = %4182
  %4193 = load i32, i32* %23, align 8
  %4194 = icmp eq i32 %4193, 0
  br i1 %4194, label %4195, label %4211

4195:                                             ; preds = %4192
  %4196 = load i8*, i8** %404, align 8
  %4197 = ptrtoint i8* %4196 to i64
  %4198 = sub i64 %4191, %4197
  %4199 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %4200 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %4199, i64 0, i32 0
  %4201 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %4200, align 8
  %4202 = bitcast %struct.ISeqOutStream* %4199 to i8*
  %4203 = tail call i64 %4201(i8* %4202, i8* %4196, i64 %4198) #6
  %4204 = icmp eq i64 %4198, %4203
  br i1 %4204, label %4206, label %4205

4205:                                             ; preds = %4195
  store i32 9, i32* %23, align 8
  br label %4206

4206:                                             ; preds = %4205, %4195
  %4207 = load i64, i64* %406, align 8
  %4208 = add i64 %4207, %4198
  store i64 %4208, i64* %406, align 8
  %4209 = load i64, i64* %407, align 8
  store i64 %4209, i64* %403, align 8
  %4210 = inttoptr i64 %4209 to i8*
  br label %4211

4211:                                             ; preds = %4206, %4192, %4182
  %4212 = phi i8* [ %4210, %4206 ], [ %4188, %4192 ], [ %4188, %4182 ]
  %4213 = load i64, i64* %399, align 8
  %4214 = add i64 %4213, -1
  store i64 %4214, i64* %399, align 8
  %4215 = icmp eq i64 %4214, 0
  %4216 = load i64, i64* %398, align 8
  br i1 %4215, label %4252, label %4217

4217:                                             ; preds = %4211, %4246
  %4218 = phi i64 [ %4251, %4246 ], [ %4216, %4211 ]
  %4219 = phi i8* [ %4247, %4246 ], [ %4212, %4211 ]
  %4220 = lshr i64 %4218, 32
  %4221 = trunc i64 %4220 to i8
  %4222 = add i8 %4221, -1
  %4223 = getelementptr inbounds i8, i8* %4219, i64 1
  store i8 %4222, i8* %4219, align 1
  store i8* %4223, i8** %401, align 8
  %4224 = load i8*, i8** %402, align 8
  %4225 = icmp eq i8* %4223, %4224
  %4226 = ptrtoint i8* %4223 to i64
  br i1 %4225, label %4227, label %4246

4227:                                             ; preds = %4217
  %4228 = load i32, i32* %23, align 8
  %4229 = icmp eq i32 %4228, 0
  br i1 %4229, label %4230, label %4246

4230:                                             ; preds = %4227
  %4231 = load i8*, i8** %404, align 8
  %4232 = ptrtoint i8* %4231 to i64
  %4233 = sub i64 %4226, %4232
  %4234 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %4235 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %4234, i64 0, i32 0
  %4236 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %4235, align 8
  %4237 = bitcast %struct.ISeqOutStream* %4234 to i8*
  %4238 = tail call i64 %4236(i8* %4237, i8* %4231, i64 %4233) #6
  %4239 = icmp eq i64 %4233, %4238
  br i1 %4239, label %4241, label %4240

4240:                                             ; preds = %4230
  store i32 9, i32* %23, align 8
  br label %4241

4241:                                             ; preds = %4240, %4230
  %4242 = load i64, i64* %406, align 8
  %4243 = add i64 %4242, %4233
  store i64 %4243, i64* %406, align 8
  %4244 = load i64, i64* %407, align 8
  store i64 %4244, i64* %403, align 8
  %4245 = inttoptr i64 %4244 to i8*
  br label %4246

4246:                                             ; preds = %4241, %4227, %4217
  %4247 = phi i8* [ %4245, %4241 ], [ %4223, %4227 ], [ %4223, %4217 ]
  %4248 = load i64, i64* %399, align 8
  %4249 = add i64 %4248, -1
  store i64 %4249, i64* %399, align 8
  %4250 = icmp eq i64 %4249, 0
  %4251 = load i64, i64* %398, align 8
  br i1 %4250, label %4252, label %4217, !llvm.loop !30

4252:                                             ; preds = %4246, %4211
  %4253 = phi i64 [ %4216, %4211 ], [ %4251, %4246 ]
  %4254 = trunc i64 %4253 to i32
  %4255 = lshr i32 %4254, 24
  %4256 = trunc i32 %4255 to i8
  store i8 %4256, i8* %400, align 4
  br label %4257

4257:                                             ; preds = %4179, %4252
  %4258 = phi i64 [ %4174, %4179 ], [ %4253, %4252 ]
  %4259 = phi i64 [ %4181, %4179 ], [ 1, %4252 ]
  store i64 %4259, i64* %399, align 8
  %4260 = shl i64 %4258, 8
  %4261 = and i64 %4260, 4294967040
  store i64 %4261, i64* %398, align 8
  br label %4262

4262:                                             ; preds = %4257, %4168
  %4263 = shl i32 %4145, 1
  %4264 = or i32 %4149, %4263
  %4265 = icmp eq i32 %4147, 0
  br i1 %4265, label %4266, label %4144

4266:                                             ; preds = %4262
  %4267 = icmp ugt i32 %4140, 3
  br i1 %4267, label %4268, label %4644

4268:                                             ; preds = %4266
  %4269 = lshr i32 %4140, 1
  %4270 = add nsw i32 %4269, -1
  %4271 = and i32 %4140, 1
  %4272 = or i32 %4271, 2
  %4273 = shl i32 %4272, %4270
  %4274 = sub i32 %4122, %4273
  %4275 = icmp ult i32 %4140, 14
  br i1 %4275, label %4276, label %4406

4276:                                             ; preds = %4268
  %4277 = zext i32 %4273 to i64
  %4278 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 45, i64 %4277
  %4279 = zext i32 %4140 to i64
  %4280 = sub nsw i64 0, %4279
  %4281 = getelementptr inbounds i32, i32* %4278, i64 -1
  %4282 = getelementptr inbounds i32, i32* %4281, i64 %4280
  br label %4283

4283:                                             ; preds = %4400, %4276
  %4284 = phi i32 [ %4274, %4276 ], [ %4403, %4400 ]
  %4285 = phi i32 [ 0, %4276 ], [ %4404, %4400 ]
  %4286 = phi i32 [ 1, %4276 ], [ %4402, %4400 ]
  %4287 = and i32 %4284, 1
  %4288 = zext i32 %4286 to i64
  %4289 = getelementptr inbounds i32, i32* %4282, i64 %4288
  %4290 = load i32, i32* %4289, align 4
  %4291 = load i32, i32* %397, align 8
  %4292 = lshr i32 %4291, 11
  %4293 = mul i32 %4292, %4290
  %4294 = icmp eq i32 %4287, 0
  br i1 %4294, label %4295, label %4299

4295:                                             ; preds = %4283
  store i32 %4293, i32* %397, align 8
  %4296 = sub i32 2048, %4290
  %4297 = lshr i32 %4296, 5
  %4298 = add i32 %4297, %4290
  br label %4306

4299:                                             ; preds = %4283
  %4300 = zext i32 %4293 to i64
  %4301 = load i64, i64* %398, align 8
  %4302 = add i64 %4301, %4300
  store i64 %4302, i64* %398, align 8
  %4303 = sub i32 %4291, %4293
  store i32 %4303, i32* %397, align 8
  %4304 = lshr i32 %4290, 5
  %4305 = sub i32 %4290, %4304
  br label %4306

4306:                                             ; preds = %4299, %4295
  %4307 = phi i32 [ %4298, %4295 ], [ %4305, %4299 ]
  store i32 %4307, i32* %4289, align 4
  %4308 = load i32, i32* %397, align 8
  %4309 = icmp ult i32 %4308, 16777216
  br i1 %4309, label %4310, label %4400

4310:                                             ; preds = %4306
  %4311 = shl i32 %4308, 8
  store i32 %4311, i32* %397, align 8
  %4312 = load i64, i64* %398, align 8
  %4313 = trunc i64 %4312 to i32
  %4314 = icmp ult i32 %4313, -16777216
  %4315 = icmp ugt i64 %4312, 4294967295
  %4316 = or i1 %4315, %4314
  br i1 %4316, label %4320, label %4317

4317:                                             ; preds = %4310
  %4318 = load i64, i64* %399, align 8
  %4319 = add i64 %4318, 1
  br label %4395

4320:                                             ; preds = %4310
  %4321 = load i8, i8* %400, align 4
  %4322 = load i8*, i8** %401, align 8
  %4323 = lshr i64 %4312, 32
  %4324 = trunc i64 %4323 to i8
  %4325 = add i8 %4321, %4324
  %4326 = getelementptr inbounds i8, i8* %4322, i64 1
  store i8 %4325, i8* %4322, align 1
  store i8* %4326, i8** %401, align 8
  %4327 = load i8*, i8** %402, align 8
  %4328 = icmp eq i8* %4326, %4327
  %4329 = ptrtoint i8* %4326 to i64
  br i1 %4328, label %4330, label %4349

4330:                                             ; preds = %4320
  %4331 = load i32, i32* %23, align 8
  %4332 = icmp eq i32 %4331, 0
  br i1 %4332, label %4333, label %4349

4333:                                             ; preds = %4330
  %4334 = load i8*, i8** %404, align 8
  %4335 = ptrtoint i8* %4334 to i64
  %4336 = sub i64 %4329, %4335
  %4337 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %4338 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %4337, i64 0, i32 0
  %4339 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %4338, align 8
  %4340 = bitcast %struct.ISeqOutStream* %4337 to i8*
  %4341 = tail call i64 %4339(i8* %4340, i8* %4334, i64 %4336) #6
  %4342 = icmp eq i64 %4336, %4341
  br i1 %4342, label %4344, label %4343

4343:                                             ; preds = %4333
  store i32 9, i32* %23, align 8
  br label %4344

4344:                                             ; preds = %4343, %4333
  %4345 = load i64, i64* %406, align 8
  %4346 = add i64 %4345, %4336
  store i64 %4346, i64* %406, align 8
  %4347 = load i64, i64* %407, align 8
  store i64 %4347, i64* %403, align 8
  %4348 = inttoptr i64 %4347 to i8*
  br label %4349

4349:                                             ; preds = %4344, %4330, %4320
  %4350 = phi i8* [ %4348, %4344 ], [ %4326, %4330 ], [ %4326, %4320 ]
  %4351 = load i64, i64* %399, align 8
  %4352 = add i64 %4351, -1
  store i64 %4352, i64* %399, align 8
  %4353 = icmp eq i64 %4352, 0
  %4354 = load i64, i64* %398, align 8
  br i1 %4353, label %4390, label %4355

4355:                                             ; preds = %4349, %4384
  %4356 = phi i64 [ %4389, %4384 ], [ %4354, %4349 ]
  %4357 = phi i8* [ %4385, %4384 ], [ %4350, %4349 ]
  %4358 = lshr i64 %4356, 32
  %4359 = trunc i64 %4358 to i8
  %4360 = add i8 %4359, -1
  %4361 = getelementptr inbounds i8, i8* %4357, i64 1
  store i8 %4360, i8* %4357, align 1
  store i8* %4361, i8** %401, align 8
  %4362 = load i8*, i8** %402, align 8
  %4363 = icmp eq i8* %4361, %4362
  %4364 = ptrtoint i8* %4361 to i64
  br i1 %4363, label %4365, label %4384

4365:                                             ; preds = %4355
  %4366 = load i32, i32* %23, align 8
  %4367 = icmp eq i32 %4366, 0
  br i1 %4367, label %4368, label %4384

4368:                                             ; preds = %4365
  %4369 = load i8*, i8** %404, align 8
  %4370 = ptrtoint i8* %4369 to i64
  %4371 = sub i64 %4364, %4370
  %4372 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %4373 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %4372, i64 0, i32 0
  %4374 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %4373, align 8
  %4375 = bitcast %struct.ISeqOutStream* %4372 to i8*
  %4376 = tail call i64 %4374(i8* %4375, i8* %4369, i64 %4371) #6
  %4377 = icmp eq i64 %4371, %4376
  br i1 %4377, label %4379, label %4378

4378:                                             ; preds = %4368
  store i32 9, i32* %23, align 8
  br label %4379

4379:                                             ; preds = %4378, %4368
  %4380 = load i64, i64* %406, align 8
  %4381 = add i64 %4380, %4371
  store i64 %4381, i64* %406, align 8
  %4382 = load i64, i64* %407, align 8
  store i64 %4382, i64* %403, align 8
  %4383 = inttoptr i64 %4382 to i8*
  br label %4384

4384:                                             ; preds = %4379, %4365, %4355
  %4385 = phi i8* [ %4383, %4379 ], [ %4361, %4365 ], [ %4361, %4355 ]
  %4386 = load i64, i64* %399, align 8
  %4387 = add i64 %4386, -1
  store i64 %4387, i64* %399, align 8
  %4388 = icmp eq i64 %4387, 0
  %4389 = load i64, i64* %398, align 8
  br i1 %4388, label %4390, label %4355, !llvm.loop !31

4390:                                             ; preds = %4384, %4349
  %4391 = phi i64 [ %4354, %4349 ], [ %4389, %4384 ]
  %4392 = trunc i64 %4391 to i32
  %4393 = lshr i32 %4392, 24
  %4394 = trunc i32 %4393 to i8
  store i8 %4394, i8* %400, align 4
  br label %4395

4395:                                             ; preds = %4317, %4390
  %4396 = phi i64 [ %4312, %4317 ], [ %4391, %4390 ]
  %4397 = phi i64 [ %4319, %4317 ], [ 1, %4390 ]
  store i64 %4397, i64* %399, align 8
  %4398 = shl i64 %4396, 8
  %4399 = and i64 %4398, 4294967040
  store i64 %4399, i64* %398, align 8
  br label %4400

4400:                                             ; preds = %4395, %4306
  %4401 = shl i32 %4286, 1
  %4402 = or i32 %4401, %4287
  %4403 = lshr i32 %4284, 1
  %4404 = add nuw nsw i32 %4285, 1
  %4405 = icmp eq i32 %4404, %4270
  br i1 %4405, label %4644, label %4283

4406:                                             ; preds = %4268
  %4407 = lshr i32 %4274, 4
  %4408 = add nsw i32 %4269, -5
  %4409 = load i64, i64* %398, align 8
  br label %4410

4410:                                             ; preds = %4512, %4406
  %4411 = phi i64 [ %4409, %4406 ], [ %4513, %4512 ]
  %4412 = phi i32 [ %4408, %4406 ], [ %4415, %4512 ]
  %4413 = load i32, i32* %397, align 8
  %4414 = lshr i32 %4413, 1
  store i32 %4414, i32* %397, align 8
  %4415 = add i32 %4412, -1
  %4416 = lshr i32 %4407, %4415
  %4417 = and i32 %4416, 1
  %4418 = sub nsw i32 0, %4417
  %4419 = and i32 %4414, %4418
  %4420 = zext i32 %4419 to i64
  %4421 = add i64 %4411, %4420
  store i64 %4421, i64* %398, align 8
  %4422 = icmp ult i32 %4413, 33554432
  br i1 %4422, label %4423, label %4512

4423:                                             ; preds = %4410
  %4424 = shl i32 %4414, 8
  store i32 %4424, i32* %397, align 8
  %4425 = trunc i64 %4421 to i32
  %4426 = icmp ult i32 %4425, -16777216
  %4427 = icmp ugt i64 %4421, 4294967295
  %4428 = or i1 %4427, %4426
  br i1 %4428, label %4432, label %4429

4429:                                             ; preds = %4423
  %4430 = load i64, i64* %399, align 8
  %4431 = add i64 %4430, 1
  br label %4507

4432:                                             ; preds = %4423
  %4433 = load i8, i8* %400, align 4
  %4434 = load i8*, i8** %401, align 8
  %4435 = lshr i64 %4421, 32
  %4436 = trunc i64 %4435 to i8
  %4437 = add i8 %4433, %4436
  %4438 = getelementptr inbounds i8, i8* %4434, i64 1
  store i8 %4437, i8* %4434, align 1
  store i8* %4438, i8** %401, align 8
  %4439 = load i8*, i8** %402, align 8
  %4440 = icmp eq i8* %4438, %4439
  %4441 = ptrtoint i8* %4438 to i64
  br i1 %4440, label %4442, label %4461

4442:                                             ; preds = %4432
  %4443 = load i32, i32* %23, align 8
  %4444 = icmp eq i32 %4443, 0
  br i1 %4444, label %4445, label %4461

4445:                                             ; preds = %4442
  %4446 = load i8*, i8** %404, align 8
  %4447 = ptrtoint i8* %4446 to i64
  %4448 = sub i64 %4441, %4447
  %4449 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %4450 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %4449, i64 0, i32 0
  %4451 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %4450, align 8
  %4452 = bitcast %struct.ISeqOutStream* %4449 to i8*
  %4453 = tail call i64 %4451(i8* %4452, i8* %4446, i64 %4448) #6
  %4454 = icmp eq i64 %4448, %4453
  br i1 %4454, label %4456, label %4455

4455:                                             ; preds = %4445
  store i32 9, i32* %23, align 8
  br label %4456

4456:                                             ; preds = %4455, %4445
  %4457 = load i64, i64* %406, align 8
  %4458 = add i64 %4457, %4448
  store i64 %4458, i64* %406, align 8
  %4459 = load i64, i64* %407, align 8
  store i64 %4459, i64* %403, align 8
  %4460 = inttoptr i64 %4459 to i8*
  br label %4461

4461:                                             ; preds = %4456, %4442, %4432
  %4462 = phi i8* [ %4460, %4456 ], [ %4438, %4442 ], [ %4438, %4432 ]
  %4463 = load i64, i64* %399, align 8
  %4464 = add i64 %4463, -1
  store i64 %4464, i64* %399, align 8
  %4465 = icmp eq i64 %4464, 0
  %4466 = load i64, i64* %398, align 8
  br i1 %4465, label %4502, label %4467

4467:                                             ; preds = %4461, %4496
  %4468 = phi i64 [ %4501, %4496 ], [ %4466, %4461 ]
  %4469 = phi i8* [ %4497, %4496 ], [ %4462, %4461 ]
  %4470 = lshr i64 %4468, 32
  %4471 = trunc i64 %4470 to i8
  %4472 = add i8 %4471, -1
  %4473 = getelementptr inbounds i8, i8* %4469, i64 1
  store i8 %4472, i8* %4469, align 1
  store i8* %4473, i8** %401, align 8
  %4474 = load i8*, i8** %402, align 8
  %4475 = icmp eq i8* %4473, %4474
  %4476 = ptrtoint i8* %4473 to i64
  br i1 %4475, label %4477, label %4496

4477:                                             ; preds = %4467
  %4478 = load i32, i32* %23, align 8
  %4479 = icmp eq i32 %4478, 0
  br i1 %4479, label %4480, label %4496

4480:                                             ; preds = %4477
  %4481 = load i8*, i8** %404, align 8
  %4482 = ptrtoint i8* %4481 to i64
  %4483 = sub i64 %4476, %4482
  %4484 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %4485 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %4484, i64 0, i32 0
  %4486 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %4485, align 8
  %4487 = bitcast %struct.ISeqOutStream* %4484 to i8*
  %4488 = tail call i64 %4486(i8* %4487, i8* %4481, i64 %4483) #6
  %4489 = icmp eq i64 %4483, %4488
  br i1 %4489, label %4491, label %4490

4490:                                             ; preds = %4480
  store i32 9, i32* %23, align 8
  br label %4491

4491:                                             ; preds = %4490, %4480
  %4492 = load i64, i64* %406, align 8
  %4493 = add i64 %4492, %4483
  store i64 %4493, i64* %406, align 8
  %4494 = load i64, i64* %407, align 8
  store i64 %4494, i64* %403, align 8
  %4495 = inttoptr i64 %4494 to i8*
  br label %4496

4496:                                             ; preds = %4491, %4477, %4467
  %4497 = phi i8* [ %4495, %4491 ], [ %4473, %4477 ], [ %4473, %4467 ]
  %4498 = load i64, i64* %399, align 8
  %4499 = add i64 %4498, -1
  store i64 %4499, i64* %399, align 8
  %4500 = icmp eq i64 %4499, 0
  %4501 = load i64, i64* %398, align 8
  br i1 %4500, label %4502, label %4467, !llvm.loop !32

4502:                                             ; preds = %4496, %4461
  %4503 = phi i64 [ %4466, %4461 ], [ %4501, %4496 ]
  %4504 = trunc i64 %4503 to i32
  %4505 = lshr i32 %4504, 24
  %4506 = trunc i32 %4505 to i8
  store i8 %4506, i8* %400, align 4
  br label %4507

4507:                                             ; preds = %4429, %4502
  %4508 = phi i64 [ %4421, %4429 ], [ %4503, %4502 ]
  %4509 = phi i64 [ %4431, %4429 ], [ 1, %4502 ]
  store i64 %4509, i64* %399, align 8
  %4510 = shl i64 %4508, 8
  %4511 = and i64 %4510, 4294967040
  store i64 %4511, i64* %398, align 8
  br label %4512

4512:                                             ; preds = %4507, %4410
  %4513 = phi i64 [ %4511, %4507 ], [ %4421, %4410 ]
  %4514 = icmp eq i32 %4415, 0
  br i1 %4514, label %4515, label %4410

4515:                                             ; preds = %4512
  %4516 = and i32 %4274, 15
  br label %4517

4517:                                             ; preds = %4634, %4515
  %4518 = phi i64 [ %4513, %4515 ], [ %4635, %4634 ]
  %4519 = phi i32 [ %4516, %4515 ], [ %4638, %4634 ]
  %4520 = phi i32 [ 0, %4515 ], [ %4639, %4634 ]
  %4521 = phi i32 [ 1, %4515 ], [ %4637, %4634 ]
  %4522 = and i32 %4519, 1
  %4523 = zext i32 %4521 to i64
  %4524 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 46, i64 %4523
  %4525 = load i32, i32* %4524, align 4
  %4526 = load i32, i32* %397, align 8
  %4527 = lshr i32 %4526, 11
  %4528 = mul i32 %4527, %4525
  %4529 = icmp eq i32 %4522, 0
  br i1 %4529, label %4530, label %4534

4530:                                             ; preds = %4517
  store i32 %4528, i32* %397, align 8
  %4531 = sub i32 2048, %4525
  %4532 = lshr i32 %4531, 5
  %4533 = add i32 %4532, %4525
  br label %4540

4534:                                             ; preds = %4517
  %4535 = zext i32 %4528 to i64
  %4536 = add i64 %4518, %4535
  store i64 %4536, i64* %398, align 8
  %4537 = sub i32 %4526, %4528
  store i32 %4537, i32* %397, align 8
  %4538 = lshr i32 %4525, 5
  %4539 = sub i32 %4525, %4538
  br label %4540

4540:                                             ; preds = %4534, %4530
  %4541 = phi i64 [ %4536, %4534 ], [ %4518, %4530 ]
  %4542 = phi i32 [ %4537, %4534 ], [ %4528, %4530 ]
  %4543 = phi i32 [ %4539, %4534 ], [ %4533, %4530 ]
  store i32 %4543, i32* %4524, align 4
  %4544 = icmp ult i32 %4542, 16777216
  br i1 %4544, label %4545, label %4634

4545:                                             ; preds = %4540
  %4546 = shl i32 %4542, 8
  store i32 %4546, i32* %397, align 8
  %4547 = trunc i64 %4541 to i32
  %4548 = icmp ult i32 %4547, -16777216
  %4549 = icmp ugt i64 %4541, 4294967295
  %4550 = or i1 %4549, %4548
  br i1 %4550, label %4554, label %4551

4551:                                             ; preds = %4545
  %4552 = load i64, i64* %399, align 8
  %4553 = add i64 %4552, 1
  br label %4629

4554:                                             ; preds = %4545
  %4555 = load i8, i8* %400, align 4
  %4556 = load i8*, i8** %401, align 8
  %4557 = lshr i64 %4541, 32
  %4558 = trunc i64 %4557 to i8
  %4559 = add i8 %4555, %4558
  %4560 = getelementptr inbounds i8, i8* %4556, i64 1
  store i8 %4559, i8* %4556, align 1
  store i8* %4560, i8** %401, align 8
  %4561 = load i8*, i8** %402, align 8
  %4562 = icmp eq i8* %4560, %4561
  %4563 = ptrtoint i8* %4560 to i64
  br i1 %4562, label %4564, label %4583

4564:                                             ; preds = %4554
  %4565 = load i32, i32* %23, align 8
  %4566 = icmp eq i32 %4565, 0
  br i1 %4566, label %4567, label %4583

4567:                                             ; preds = %4564
  %4568 = load i8*, i8** %404, align 8
  %4569 = ptrtoint i8* %4568 to i64
  %4570 = sub i64 %4563, %4569
  %4571 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %4572 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %4571, i64 0, i32 0
  %4573 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %4572, align 8
  %4574 = bitcast %struct.ISeqOutStream* %4571 to i8*
  %4575 = tail call i64 %4573(i8* %4574, i8* %4568, i64 %4570) #6
  %4576 = icmp eq i64 %4570, %4575
  br i1 %4576, label %4578, label %4577

4577:                                             ; preds = %4567
  store i32 9, i32* %23, align 8
  br label %4578

4578:                                             ; preds = %4577, %4567
  %4579 = load i64, i64* %406, align 8
  %4580 = add i64 %4579, %4570
  store i64 %4580, i64* %406, align 8
  %4581 = load i64, i64* %407, align 8
  store i64 %4581, i64* %403, align 8
  %4582 = inttoptr i64 %4581 to i8*
  br label %4583

4583:                                             ; preds = %4578, %4564, %4554
  %4584 = phi i8* [ %4582, %4578 ], [ %4560, %4564 ], [ %4560, %4554 ]
  %4585 = load i64, i64* %399, align 8
  %4586 = add i64 %4585, -1
  store i64 %4586, i64* %399, align 8
  %4587 = icmp eq i64 %4586, 0
  %4588 = load i64, i64* %398, align 8
  br i1 %4587, label %4624, label %4589

4589:                                             ; preds = %4583, %4618
  %4590 = phi i64 [ %4623, %4618 ], [ %4588, %4583 ]
  %4591 = phi i8* [ %4619, %4618 ], [ %4584, %4583 ]
  %4592 = lshr i64 %4590, 32
  %4593 = trunc i64 %4592 to i8
  %4594 = add i8 %4593, -1
  %4595 = getelementptr inbounds i8, i8* %4591, i64 1
  store i8 %4594, i8* %4591, align 1
  store i8* %4595, i8** %401, align 8
  %4596 = load i8*, i8** %402, align 8
  %4597 = icmp eq i8* %4595, %4596
  %4598 = ptrtoint i8* %4595 to i64
  br i1 %4597, label %4599, label %4618

4599:                                             ; preds = %4589
  %4600 = load i32, i32* %23, align 8
  %4601 = icmp eq i32 %4600, 0
  br i1 %4601, label %4602, label %4618

4602:                                             ; preds = %4599
  %4603 = load i8*, i8** %404, align 8
  %4604 = ptrtoint i8* %4603 to i64
  %4605 = sub i64 %4598, %4604
  %4606 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %405, align 8
  %4607 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %4606, i64 0, i32 0
  %4608 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %4607, align 8
  %4609 = bitcast %struct.ISeqOutStream* %4606 to i8*
  %4610 = tail call i64 %4608(i8* %4609, i8* %4603, i64 %4605) #6
  %4611 = icmp eq i64 %4605, %4610
  br i1 %4611, label %4613, label %4612

4612:                                             ; preds = %4602
  store i32 9, i32* %23, align 8
  br label %4613

4613:                                             ; preds = %4612, %4602
  %4614 = load i64, i64* %406, align 8
  %4615 = add i64 %4614, %4605
  store i64 %4615, i64* %406, align 8
  %4616 = load i64, i64* %407, align 8
  store i64 %4616, i64* %403, align 8
  %4617 = inttoptr i64 %4616 to i8*
  br label %4618

4618:                                             ; preds = %4613, %4599, %4589
  %4619 = phi i8* [ %4617, %4613 ], [ %4595, %4599 ], [ %4595, %4589 ]
  %4620 = load i64, i64* %399, align 8
  %4621 = add i64 %4620, -1
  store i64 %4621, i64* %399, align 8
  %4622 = icmp eq i64 %4621, 0
  %4623 = load i64, i64* %398, align 8
  br i1 %4622, label %4624, label %4589, !llvm.loop !33

4624:                                             ; preds = %4618, %4583
  %4625 = phi i64 [ %4588, %4583 ], [ %4623, %4618 ]
  %4626 = trunc i64 %4625 to i32
  %4627 = lshr i32 %4626, 24
  %4628 = trunc i32 %4627 to i8
  store i8 %4628, i8* %400, align 4
  br label %4629

4629:                                             ; preds = %4551, %4624
  %4630 = phi i64 [ %4541, %4551 ], [ %4625, %4624 ]
  %4631 = phi i64 [ %4553, %4551 ], [ 1, %4624 ]
  store i64 %4631, i64* %399, align 8
  %4632 = shl i64 %4630, 8
  %4633 = and i64 %4632, 4294967040
  store i64 %4633, i64* %398, align 8
  br label %4634

4634:                                             ; preds = %4629, %4540
  %4635 = phi i64 [ %4633, %4629 ], [ %4541, %4540 ]
  %4636 = shl i32 %4521, 1
  %4637 = or i32 %4636, %4522
  %4638 = lshr i32 %4519, 1
  %4639 = add nuw nsw i32 %4520, 1
  %4640 = icmp eq i32 %4639, 4
  br i1 %4640, label %4641, label %4517

4641:                                             ; preds = %4634
  %4642 = load i32, i32* %410, align 4
  %4643 = add i32 %4642, 1
  store i32 %4643, i32* %410, align 4
  br label %4644

4644:                                             ; preds = %4400, %4641, %4266
  %4645 = load i32, i32* %367, align 4
  store i32 %4645, i32* %368, align 4
  %4646 = load i32, i32* %366, align 4
  store i32 %4646, i32* %367, align 4
  %4647 = load i32, i32* %365, align 4
  store i32 %4647, i32* %366, align 4
  store i32 %4122, i32* %365, align 4
  %4648 = load i32, i32* %411, align 8
  %4649 = add i32 %4648, 1
  store i32 %4649, i32* %411, align 8
  br label %4650

4650:                                             ; preds = %4644, %4008, %4003, %3133
  %4651 = load i32, i32* %357, align 8
  %4652 = sub i32 %4651, %2741
  store i32 %4652, i32* %357, align 8
  %4653 = add i32 %2741, %417
  %4654 = icmp eq i32 %4652, 0
  br i1 %4654, label %4655, label %4769

4655:                                             ; preds = %4650
  %4656 = load i32, i32* %356, align 8
  %4657 = icmp eq i32 %4656, 0
  br i1 %4657, label %4658, label %4725

4658:                                             ; preds = %4655
  %4659 = load i32, i32* %411, align 8
  %4660 = icmp ugt i32 %4659, 127
  br i1 %4660, label %4661, label %4662

4661:                                             ; preds = %4658
  tail call fastcc void @FillDistancesPrices(%struct.CLzmaEnc* %0)
  br label %4662

4662:                                             ; preds = %4661, %4658
  %4663 = load i32, i32* %410, align 4
  %4664 = icmp ugt i32 %4663, 15
  br i1 %4664, label %4665, label %4725

4665:                                             ; preds = %4662, %4665
  %4666 = phi i64 [ %4722, %4665 ], [ 0, %4662 ]
  %4667 = trunc i64 %4666 to i32
  %4668 = and i32 %4667, 1
  %4669 = lshr i32 %4667, 1
  %4670 = load i32, i32* %413, align 4
  %4671 = sub nsw i32 0, %4668
  %4672 = and i32 %4671, 2032
  %4673 = xor i32 %4672, %4670
  %4674 = lshr i32 %4673, 4
  %4675 = zext i32 %4674 to i64
  %4676 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %4675
  %4677 = load i32, i32* %4676, align 4
  %4678 = or i32 %4668, 2
  %4679 = and i32 %4669, 1
  %4680 = lshr i32 %4667, 2
  %4681 = zext i32 %4678 to i64
  %4682 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 46, i64 %4681
  %4683 = load i32, i32* %4682, align 4
  %4684 = sub nsw i32 0, %4679
  %4685 = and i32 %4684, 2032
  %4686 = xor i32 %4685, %4683
  %4687 = lshr i32 %4686, 4
  %4688 = zext i32 %4687 to i64
  %4689 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %4688
  %4690 = load i32, i32* %4689, align 4
  %4691 = add i32 %4690, %4677
  %4692 = shl nuw nsw i32 %4678, 1
  %4693 = or i32 %4692, %4679
  %4694 = and i32 %4680, 1
  %4695 = lshr i32 %4667, 3
  %4696 = zext i32 %4693 to i64
  %4697 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 46, i64 %4696
  %4698 = load i32, i32* %4697, align 4
  %4699 = sub nsw i32 0, %4694
  %4700 = and i32 %4699, 2032
  %4701 = xor i32 %4698, %4700
  %4702 = lshr i32 %4701, 4
  %4703 = zext i32 %4702 to i64
  %4704 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %4703
  %4705 = load i32, i32* %4704, align 4
  %4706 = add i32 %4691, %4705
  %4707 = shl nuw nsw i32 %4693, 1
  %4708 = or i32 %4707, %4694
  %4709 = and i32 %4695, 1
  %4710 = zext i32 %4708 to i64
  %4711 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 46, i64 %4710
  %4712 = load i32, i32* %4711, align 4
  %4713 = sub nsw i32 0, %4709
  %4714 = and i32 %4713, 2032
  %4715 = xor i32 %4712, %4714
  %4716 = lshr i32 %4715, 4
  %4717 = zext i32 %4716 to i64
  %4718 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 %4717
  %4719 = load i32, i32* %4718, align 4
  %4720 = add i32 %4706, %4719
  %4721 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 37, i64 %4666
  store i32 %4720, i32* %4721, align 4
  %4722 = add nuw nsw i64 %4666, 1
  %4723 = icmp eq i64 %4722, 16
  br i1 %4723, label %4724, label %4665

4724:                                             ; preds = %4665
  store i32 0, i32* %410, align 4
  br label %4725

4725:                                             ; preds = %4655, %4662, %4724
  %4726 = load i32 (i8*)*, i32 (i8*)** %349, align 8
  %4727 = load i8*, i8** %351, align 8
  %4728 = tail call i32 %4726(i8* %4727) #6
  %4729 = icmp eq i32 %4728, 0
  br i1 %4729, label %4766, label %4730

4730:                                             ; preds = %4725
  %4731 = sub i32 %4653, %40
  br i1 %414, label %4745, label %4732

4732:                                             ; preds = %4730
  %4733 = add i32 %4731, 4396
  %4734 = icmp ult i32 %4733, %3
  br i1 %4734, label %4735, label %4766

4735:                                             ; preds = %4732
  %4736 = load i64, i64* %406, align 8
  %4737 = load i64, i64* %403, align 8
  %4738 = load i64, i64* %407, align 8
  %4739 = load i64, i64* %399, align 8
  %4740 = add i64 %4736, 8192
  %4741 = add i64 %4740, %4737
  %4742 = sub i64 %4741, %4738
  %4743 = add i64 %4742, %4739
  %4744 = icmp ult i64 %4743, %415
  br i1 %4744, label %4769, label %4766

4745:                                             ; preds = %4730
  %4746 = icmp ugt i32 %4731, 131071
  br i1 %4746, label %4747, label %4769

4747:                                             ; preds = %4745
  %4748 = zext i32 %4731 to i64
  %4749 = load i64, i64* %38, align 8
  %4750 = add i64 %4749, %4748
  store i64 %4750, i64* %38, align 8
  %4751 = load i32, i32* %18, align 8
  %4752 = icmp eq i32 %4751, 0
  br i1 %4752, label %4753, label %4766

4753:                                             ; preds = %4747
  %4754 = load i32, i32* %23, align 8
  %4755 = icmp eq i32 %4754, 0
  br i1 %4755, label %4757, label %4756

4756:                                             ; preds = %4753
  store i32 9, i32* %18, align 8
  br label %4757

4757:                                             ; preds = %4756, %4753
  %4758 = phi i32 [ 0, %4753 ], [ 9, %4756 ]
  %4759 = load i32, i32* %29, align 4
  %4760 = icmp eq i32 %4759, 0
  br i1 %4760, label %4762, label %4761

4761:                                             ; preds = %4757
  store i32 8, i32* %18, align 8
  br label %4764

4762:                                             ; preds = %4757
  %4763 = icmp eq i32 %4758, 0
  br i1 %4763, label %4766, label %4764

4764:                                             ; preds = %4762, %4761
  %4765 = phi i32 [ 8, %4761 ], [ %4758, %4762 ]
  store i32 1, i32* %16, align 8
  br label %4766

4766:                                             ; preds = %4725, %4735, %4732, %4747, %4762, %4764
  %4767 = phi i32 [ 1, %4764 ], [ 1, %4762 ], [ 1, %4747 ], [ 2, %4732 ], [ 2, %4735 ], [ 2, %4725 ]
  %4768 = phi i32 [ %4765, %4764 ], [ 0, %4762 ], [ %4751, %4747 ], [ %418, %4732 ], [ %418, %4735 ], [ %418, %4725 ]
  br label %4769

4769:                                             ; preds = %4650, %4745, %4735, %4766
  %4770 = phi i32 [ %4767, %4766 ], [ 0, %4735 ], [ 0, %4745 ], [ 0, %4650 ]
  %4771 = phi i32 [ %4768, %4766 ], [ %418, %4735 ], [ %418, %4745 ], [ %418, %4650 ]
  switch i32 %4770, label %4779 [
    i32 0, label %416
    i32 2, label %4772
  ]

4772:                                             ; preds = %4769, %347
  %4773 = phi i32 [ %348, %347 ], [ %4653, %4769 ]
  %4774 = sub i32 %4773, %40
  %4775 = zext i32 %4774 to i64
  %4776 = load i64, i64* %38, align 8
  %4777 = add i64 %4776, %4775
  store i64 %4777, i64* %38, align 8
  %4778 = tail call fastcc i32 @Flush(%struct.CLzmaEnc* %0, i32 %4773)
  br label %4779

4779:                                             ; preds = %4769, %15, %345, %35, %4772
  %4780 = phi i32 [ %4778, %4772 ], [ %346, %345 ], [ %36, %35 ], [ %19, %15 ], [ %4771, %4769 ]
  ret i32 %4780
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @LzmaEnc_Encode(i8*, %struct.ISeqOutStream*, %struct.ISeqInStream*, %struct.ICompressProgress*, %struct.ISzAlloc*, %struct.ISzAlloc*) local_unnamed_addr #3 {
  %7 = bitcast i8* %0 to %struct.CLzmaEnc*
  %8 = getelementptr inbounds i8, i8* %0, i64 328
  %9 = bitcast i8* %8 to %struct.ISeqInStream**
  store %struct.ISeqInStream* %2, %struct.ISeqInStream** %9, align 8
  %10 = getelementptr inbounds i8, i8* %0, i64 144
  %11 = bitcast i8* %10 to i32*
  store i32 1, i32* %11, align 8
  %12 = getelementptr inbounds i8, i8* %0, i64 232
  %13 = bitcast i8* %12 to %struct.ISeqOutStream**
  store %struct.ISeqOutStream* %1, %struct.ISeqOutStream** %13, align 8
  %14 = tail call fastcc i32 @LzmaEnc_AllocAndInit(%struct.CLzmaEnc* %7, i32 0, %struct.ISzAlloc* %4, %struct.ISzAlloc* %5) #6
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %54

16:                                               ; preds = %6
  %17 = getelementptr inbounds i8, i8* %0, i64 136
  %18 = bitcast i8* %17 to i32*
  %19 = getelementptr inbounds %struct.ICompressProgress, %struct.ICompressProgress* %3, i64 0, i32 0
  %20 = tail call fastcc i32 @LzmaEnc_CodeOneBlock(%struct.CLzmaEnc* %7, i32 0, i32 0, i32 0) #6
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %54

22:                                               ; preds = %16
  %23 = icmp eq %struct.ICompressProgress* %3, null
  %24 = bitcast %struct.ICompressProgress* %3 to i8*
  %25 = getelementptr inbounds i8, i8* %0, i64 152
  %26 = bitcast i8* %25 to i64*
  %27 = getelementptr inbounds i8, i8* %0, i64 240
  %28 = bitcast i8* %27 to i64*
  %29 = getelementptr inbounds i8, i8* %0, i64 208
  %30 = bitcast i8* %29 to i64*
  %31 = getelementptr inbounds i8, i8* %0, i64 224
  %32 = bitcast i8* %31 to i64*
  %33 = getelementptr inbounds i8, i8* %0, i64 200
  %34 = bitcast i8* %33 to i64*
  br label %35

35:                                               ; preds = %51, %22
  %36 = load i32, i32* %18, align 8
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %54

38:                                               ; preds = %35
  br i1 %23, label %51, label %39

39:                                               ; preds = %38
  %40 = load i32 (i8*, i64, i64)*, i32 (i8*, i64, i64)** %19, align 8
  %41 = load i64, i64* %26, align 8
  %42 = load i64, i64* %28, align 8
  %43 = load i64, i64* %30, align 8
  %44 = load i64, i64* %32, align 8
  %45 = load i64, i64* %34, align 8
  %46 = add i64 %43, %42
  %47 = sub i64 %46, %44
  %48 = add i64 %47, %45
  %49 = tail call i32 %40(i8* nonnull %24, i64 %41, i64 %48) #6
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %39, %38
  %52 = tail call fastcc i32 @LzmaEnc_CodeOneBlock(%struct.CLzmaEnc* %7, i32 0, i32 0, i32 0) #6
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %35, label %54

54:                                               ; preds = %51, %39, %35, %16, %6
  %55 = phi i32 [ %14, %6 ], [ %20, %16 ], [ %52, %51 ], [ 0, %35 ], [ 10, %39 ]
  ret i32 %55
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @LzmaEnc_WriteProperties(i8* nocapture readonly, i8* nocapture, i64* nocapture) local_unnamed_addr #1 {
  %4 = getelementptr inbounds i8, i8* %0, i64 172
  %5 = bitcast i8* %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = load i64, i64* %2, align 8
  %8 = icmp ult i64 %7, 5
  br i1 %8, label %49, label %9

9:                                                ; preds = %3
  store i64 5, i64* %2, align 8
  %10 = getelementptr inbounds i8, i8* %0, i64 104
  %11 = bitcast i8* %10 to i32*
  %12 = load i32, i32* %11, align 8
  %13 = mul i32 %12, 5
  %14 = getelementptr inbounds i8, i8* %0, i64 100
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = add i32 %13, %16
  %18 = mul i32 %17, 9
  %19 = getelementptr inbounds i8, i8* %0, i64 96
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 8
  %22 = add i32 %18, %21
  %23 = trunc i32 %22 to i8
  store i8 %23, i8* %1, align 1
  %24 = icmp ugt i32 %6, 4194303
  br i1 %24, label %27, label %25

25:                                               ; preds = %9
  %26 = icmp ugt i32 %6, 4096
  br i1 %26, label %34, label %36

27:                                               ; preds = %9
  %28 = icmp ult i32 %6, -1048576
  %29 = add i32 %6, 1048575
  %30 = and i32 %29, -1048576
  %31 = select i1 %28, i32 %30, i32 %6
  br label %36

32:                                               ; preds = %34
  %33 = icmp ugt i32 %6, 8192
  br i1 %33, label %51, label %36

34:                                               ; preds = %25
  %35 = icmp ugt i32 %6, 6144
  br i1 %35, label %32, label %36

36:                                               ; preds = %83, %34, %25, %32, %51, %53, %55, %57, %59, %61, %63, %65, %67, %69, %71, %73, %75, %77, %79, %81, %27
  %37 = phi i32 [ %31, %27 ], [ 4096, %25 ], [ 6144, %34 ], [ 8192, %32 ], [ 12288, %51 ], [ 16384, %53 ], [ 24576, %55 ], [ 32768, %57 ], [ 49152, %59 ], [ 65536, %61 ], [ 98304, %63 ], [ 131072, %65 ], [ 196608, %67 ], [ 262144, %69 ], [ 393216, %71 ], [ 524288, %73 ], [ 786432, %75 ], [ 1048576, %77 ], [ 1572864, %79 ], [ 2097152, %81 ], [ %85, %83 ]
  %38 = trunc i32 %37 to i8
  %39 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %38, i8* %39, align 1
  %40 = lshr i32 %37, 8
  %41 = trunc i32 %40 to i8
  %42 = getelementptr inbounds i8, i8* %1, i64 2
  store i8 %41, i8* %42, align 1
  %43 = lshr i32 %37, 16
  %44 = trunc i32 %43 to i8
  %45 = getelementptr inbounds i8, i8* %1, i64 3
  store i8 %44, i8* %45, align 1
  %46 = lshr i32 %37, 24
  %47 = trunc i32 %46 to i8
  %48 = getelementptr inbounds i8, i8* %1, i64 4
  store i8 %47, i8* %48, align 1
  br label %49

49:                                               ; preds = %36, %3
  %50 = phi i32 [ 5, %3 ], [ 0, %36 ]
  ret i32 %50

51:                                               ; preds = %32
  %52 = icmp ugt i32 %6, 12288
  br i1 %52, label %53, label %36

53:                                               ; preds = %51
  %54 = icmp ugt i32 %6, 16384
  br i1 %54, label %55, label %36

55:                                               ; preds = %53
  %56 = icmp ugt i32 %6, 24576
  br i1 %56, label %57, label %36

57:                                               ; preds = %55
  %58 = icmp ugt i32 %6, 32768
  br i1 %58, label %59, label %36

59:                                               ; preds = %57
  %60 = icmp ugt i32 %6, 49152
  br i1 %60, label %61, label %36

61:                                               ; preds = %59
  %62 = icmp ugt i32 %6, 65536
  br i1 %62, label %63, label %36

63:                                               ; preds = %61
  %64 = icmp ugt i32 %6, 98304
  br i1 %64, label %65, label %36

65:                                               ; preds = %63
  %66 = icmp ugt i32 %6, 131072
  br i1 %66, label %67, label %36

67:                                               ; preds = %65
  %68 = icmp ugt i32 %6, 196608
  br i1 %68, label %69, label %36

69:                                               ; preds = %67
  %70 = icmp ugt i32 %6, 262144
  br i1 %70, label %71, label %36

71:                                               ; preds = %69
  %72 = icmp ugt i32 %6, 393216
  br i1 %72, label %73, label %36

73:                                               ; preds = %71
  %74 = icmp ugt i32 %6, 524288
  br i1 %74, label %75, label %36

75:                                               ; preds = %73
  %76 = icmp ugt i32 %6, 786432
  br i1 %76, label %77, label %36

77:                                               ; preds = %75
  %78 = icmp ugt i32 %6, 1048576
  br i1 %78, label %79, label %36

79:                                               ; preds = %77
  %80 = icmp ugt i32 %6, 1572864
  br i1 %80, label %81, label %36

81:                                               ; preds = %79
  %82 = icmp ugt i32 %6, 2097152
  br i1 %82, label %83, label %36

83:                                               ; preds = %81
  %84 = icmp ugt i32 %6, 3145728
  %85 = select i1 %84, i32 4194304, i32 3145728
  br label %36
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @LzmaEnc_MemEncode(i8*, i8*, i64* nocapture, i8*, i64, i32, %struct.ICompressProgress*, %struct.ISzAlloc*, %struct.ISzAlloc*) local_unnamed_addr #3 {
  %10 = alloca %struct.CSeqOutStreamBuf, align 8
  %11 = bitcast %struct.CSeqOutStreamBuf* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 32, i1 false)
  %12 = getelementptr inbounds %struct.CSeqOutStreamBuf, %struct.CSeqOutStreamBuf* %10, i64 0, i32 0
  %13 = getelementptr inbounds %struct.CSeqOutStreamBuf, %struct.CSeqOutStreamBuf* %10, i64 0, i32 0, i32 0
  store i64 (i8*, i8*, i64)* @MyWrite, i64 (i8*, i8*, i64)** %13, align 8
  %14 = getelementptr inbounds %struct.CSeqOutStreamBuf, %struct.CSeqOutStreamBuf* %10, i64 0, i32 1
  store i8* %1, i8** %14, align 8
  %15 = load i64, i64* %2, align 8
  %16 = getelementptr inbounds %struct.CSeqOutStreamBuf, %struct.CSeqOutStreamBuf* %10, i64 0, i32 2
  store i64 %15, i64* %16, align 8
  %17 = getelementptr inbounds %struct.CSeqOutStreamBuf, %struct.CSeqOutStreamBuf* %10, i64 0, i32 3
  store i32 0, i32* %17, align 8
  %18 = getelementptr inbounds i8, i8* %0, i64 132
  %19 = bitcast i8* %18 to i32*
  store i32 %5, i32* %19, align 4
  %20 = getelementptr inbounds i8, i8* %0, i64 232
  %21 = bitcast i8* %20 to %struct.ISeqOutStream**
  store %struct.ISeqOutStream* %12, %struct.ISeqOutStream** %21, align 8
  %22 = bitcast i8* %0 to %struct.CLzmaEnc*
  %23 = getelementptr inbounds i8, i8* %0, i64 291
  store i8 1, i8* %23, align 1
  %24 = getelementptr inbounds i8, i8* %0, i64 320
  %25 = bitcast i8* %24 to i8**
  store i8* %3, i8** %25, align 8
  %26 = getelementptr inbounds i8, i8* %0, i64 352
  %27 = bitcast i8* %26 to i64*
  store i64 %4, i64* %27, align 8
  %28 = getelementptr inbounds i8, i8* %0, i64 144
  %29 = bitcast i8* %28 to i32*
  store i32 1, i32* %29, align 8
  %30 = call fastcc i32 @LzmaEnc_AllocAndInit(%struct.CLzmaEnc* %22, i32 0, %struct.ISzAlloc* %7, %struct.ISzAlloc* %8) #6
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %74

32:                                               ; preds = %9
  %33 = getelementptr inbounds i8, i8* %0, i64 136
  %34 = bitcast i8* %33 to i32*
  %35 = getelementptr inbounds %struct.ICompressProgress, %struct.ICompressProgress* %6, i64 0, i32 0
  %36 = call fastcc i32 @LzmaEnc_CodeOneBlock(%struct.CLzmaEnc* %22, i32 0, i32 0, i32 0) #6
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %74

38:                                               ; preds = %32
  %39 = icmp eq %struct.ICompressProgress* %6, null
  %40 = bitcast %struct.ICompressProgress* %6 to i8*
  %41 = getelementptr inbounds i8, i8* %0, i64 152
  %42 = bitcast i8* %41 to i64*
  %43 = getelementptr inbounds i8, i8* %0, i64 240
  %44 = bitcast i8* %43 to i64*
  %45 = getelementptr inbounds i8, i8* %0, i64 208
  %46 = bitcast i8* %45 to i64*
  %47 = getelementptr inbounds i8, i8* %0, i64 224
  %48 = bitcast i8* %47 to i64*
  %49 = getelementptr inbounds i8, i8* %0, i64 200
  %50 = bitcast i8* %49 to i64*
  br label %51

51:                                               ; preds = %67, %38
  %52 = load i32, i32* %34, align 8
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %70

54:                                               ; preds = %51
  br i1 %39, label %67, label %55

55:                                               ; preds = %54
  %56 = load i32 (i8*, i64, i64)*, i32 (i8*, i64, i64)** %35, align 8
  %57 = load i64, i64* %42, align 8
  %58 = load i64, i64* %44, align 8
  %59 = load i64, i64* %46, align 8
  %60 = load i64, i64* %48, align 8
  %61 = load i64, i64* %50, align 8
  %62 = add i64 %59, %58
  %63 = sub i64 %62, %60
  %64 = add i64 %63, %61
  %65 = call i32 %56(i8* nonnull %40, i64 %57, i64 %64) #6
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %74

67:                                               ; preds = %55, %54
  %68 = call fastcc i32 @LzmaEnc_CodeOneBlock(%struct.CLzmaEnc* %22, i32 0, i32 0, i32 0) #6
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %51, label %74

70:                                               ; preds = %51
  %71 = load i64, i64* %42, align 8
  %72 = icmp eq i64 %71, %4
  %73 = select i1 %72, i32 0, i32 11
  br label %74

74:                                               ; preds = %67, %55, %32, %70, %9
  %75 = phi i32 [ %30, %9 ], [ %73, %70 ], [ %36, %32 ], [ 10, %55 ], [ %68, %67 ]
  %76 = load i64, i64* %16, align 8
  %77 = load i64, i64* %2, align 8
  %78 = sub i64 %77, %76
  store i64 %78, i64* %2, align 8
  %79 = load i32, i32* %17, align 8
  %80 = icmp eq i32 %79, 0
  %81 = select i1 %80, i32 %75, i32 7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  ret i32 %81
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @LzmaEncode(i8*, i64* nocapture, i8*, i64, %struct._CLzmaEncProps* nocapture readonly, i8* nocapture, i64* nocapture, i32, %struct.ICompressProgress*, %struct.ISzAlloc*, %struct.ISzAlloc*) local_unnamed_addr #3 {
  %12 = alloca %struct._CLzmaEncProps, align 8
  %13 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %9, i64 0, i32 0
  %14 = load i8* (i8*, i64)*, i8* (i8*, i64)** %13, align 8
  %15 = bitcast %struct.ISzAlloc* %9 to i8*
  %16 = tail call i8* %14(i8* %15, i64 296760) #6
  %17 = icmp eq i8* %16, null
  br i1 %17, label %110, label %18

18:                                               ; preds = %11
  %19 = bitcast i8* %16 to %struct.CLzmaEnc*
  tail call void @LzmaEnc_Construct(%struct.CLzmaEnc* nonnull %19) #6
  %20 = bitcast %struct._CLzmaEncProps* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %20) #6
  %21 = bitcast %struct._CLzmaEncProps* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %20, i8* align 8 %21, i64 56, i1 false) #6
  call void @LzmaEncProps_Normalize(%struct._CLzmaEncProps* nonnull %12) #6
  %22 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %12, i64 0, i32 3
  %23 = load i32, i32* %22, align 8
  %24 = icmp sgt i32 %23, 8
  br i1 %24, label %73, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %12, i64 0, i32 4
  %27 = load i32, i32* %26, align 4
  %28 = icmp sgt i32 %27, 4
  br i1 %28, label %73, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %12, i64 0, i32 5
  %31 = load i32, i32* %30, align 8
  %32 = icmp sgt i32 %31, 4
  br i1 %32, label %73, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %12, i64 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = icmp ugt i32 %35, 1610612736
  br i1 %36, label %73, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds i8, i8* %16, i64 172
  %39 = bitcast i8* %38 to i32*
  store i32 %35, i32* %39, align 4
  %40 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %12, i64 0, i32 7
  %41 = load i32, i32* %40, align 8
  %42 = icmp ugt i32 %41, 5
  %43 = select i1 %42, i32 %41, i32 5
  %44 = icmp ult i32 %43, 273
  %45 = select i1 %44, i32 %43, i32 273
  %46 = getelementptr inbounds i8, i8* %16, i64 68
  %47 = bitcast i8* %46 to i32*
  store i32 %45, i32* %47, align 4
  %48 = getelementptr inbounds i8, i8* %16, i64 96
  %49 = bitcast i8* %48 to i32*
  store i32 %23, i32* %49, align 8
  %50 = getelementptr inbounds i8, i8* %16, i64 100
  %51 = bitcast i8* %50 to i32*
  store i32 %27, i32* %51, align 4
  %52 = getelementptr inbounds i8, i8* %16, i64 104
  %53 = bitcast i8* %52 to i32*
  store i32 %31, i32* %53, align 8
  %54 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %12, i64 0, i32 6
  %55 = load i32, i32* %54, align 4
  %56 = icmp eq i32 %55, 0
  %57 = zext i1 %56 to i32
  %58 = getelementptr inbounds i8, i8* %16, i64 128
  %59 = bitcast i8* %58 to i32*
  store i32 %57, i32* %59, align 8
  %60 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %12, i64 0, i32 8
  %61 = load i32, i32* %60, align 4
  %62 = icmp ne i32 %61, 0
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds i8, i8* %16, i64 289
  store i8 %63, i8* %64, align 1
  %65 = icmp eq i32 %61, 0
  br i1 %65, label %74, label %66

66:                                               ; preds = %37
  %67 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %12, i64 0, i32 9
  %68 = load i32, i32* %67, align 8
  %69 = icmp slt i32 %68, 2
  br i1 %69, label %74, label %70

70:                                               ; preds = %66
  %71 = icmp slt i32 %68, 4
  %72 = select i1 %71, i32 %68, i32 4
  br label %74

73:                                               ; preds = %33, %29, %25, %18
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %20) #6
  br label %90

74:                                               ; preds = %70, %66, %37
  %75 = phi i32 [ 4, %37 ], [ 2, %66 ], [ %72, %70 ]
  %76 = getelementptr inbounds i8, i8* %16, i64 348
  %77 = bitcast i8* %76 to i32*
  store i32 %75, i32* %77, align 4
  %78 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %12, i64 0, i32 10
  %79 = load i32, i32* %78, align 4
  %80 = getelementptr inbounds i8, i8* %16, i64 316
  %81 = bitcast i8* %80 to i32*
  store i32 %79, i32* %81, align 4
  %82 = getelementptr inbounds %struct._CLzmaEncProps, %struct._CLzmaEncProps* %12, i64 0, i32 11
  %83 = load i32, i32* %82, align 8
  %84 = getelementptr inbounds i8, i8* %16, i64 132
  %85 = bitcast i8* %84 to i32*
  store i32 %83, i32* %85, align 4
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %20) #6
  %86 = tail call i32 @LzmaEnc_WriteProperties(i8* nonnull %16, i8* %5, i64* %6)
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %90

88:                                               ; preds = %74
  %89 = tail call i32 @LzmaEnc_MemEncode(i8* nonnull %16, i8* %0, i64* %1, i8* %2, i64 %3, i32 %7, %struct.ICompressProgress* %8, %struct.ISzAlloc* %9, %struct.ISzAlloc* %10)
  br label %90

90:                                               ; preds = %73, %74, %88
  %91 = phi i32 [ %89, %88 ], [ %86, %74 ], [ 5, %73 ]
  %92 = getelementptr inbounds i8, i8* %16, i64 256
  %93 = bitcast i8* %92 to %struct._CMatchFinder*
  tail call void @MatchFinder_Free(%struct._CMatchFinder* %93, %struct.ISzAlloc* %10) #6
  %94 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %9, i64 0, i32 1
  %95 = load void (i8*, i8*)*, void (i8*, i8*)** %94, align 8
  %96 = getelementptr inbounds i8, i8* %16, i64 120
  %97 = bitcast i8* %96 to i32**
  %98 = bitcast i8* %96 to i8**
  %99 = load i8*, i8** %98, align 8
  tail call void %95(i8* %15, i8* %99) #6
  %100 = load void (i8*, i8*)*, void (i8*, i8*)** %94, align 8
  %101 = getelementptr inbounds i8, i8* %16, i64 254392
  %102 = bitcast i8* %101 to i32**
  %103 = bitcast i8* %101 to i8**
  %104 = load i8*, i8** %103, align 8
  tail call void %100(i8* %15, i8* %104) #6
  store i32* null, i32** %97, align 8
  store i32* null, i32** %102, align 8
  %105 = load void (i8*, i8*)*, void (i8*, i8*)** %94, align 8
  %106 = getelementptr inbounds i8, i8* %16, i64 224
  %107 = bitcast i8* %106 to i8**
  %108 = load i8*, i8** %107, align 8
  tail call void %105(i8* %15, i8* %108) #6
  store i8* null, i8** %107, align 8
  %109 = load void (i8*, i8*)*, void (i8*, i8*)** %94, align 8
  tail call void %109(i8* %15, i8* nonnull %16) #6
  br label %110

110:                                              ; preds = %11, %90
  %111 = phi i32 [ %91, %90 ], [ 2, %11 ]
  ret i32 %111
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @LenPriceEnc_UpdateTable(%struct.CLenPriceEnc* nocapture, i32, i32* nocapture readonly) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.CLenPriceEnc, %struct.CLenPriceEnc* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = zext i32 %1 to i64
  %7 = getelementptr inbounds %struct.CLenPriceEnc, %struct.CLenPriceEnc* %0, i64 0, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = lshr i32 %8, 4
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds i32, i32* %2, i64 %10
  %12 = load i32, i32* %11, align 4
  %13 = xor i32 %9, 127
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds i32, i32* %2, i64 %14
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.CLenPriceEnc, %struct.CLenPriceEnc* %0, i64 0, i32 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = lshr i32 %18, 4
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %2, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = add i32 %22, %16
  %24 = xor i32 %19, 127
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i32, i32* %2, i64 %25
  %27 = load i32, i32* %26, align 4
  %28 = add i32 %27, %16
  %29 = shl i32 %1, 3
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds %struct.CLenPriceEnc, %struct.CLenPriceEnc* %0, i64 0, i32 0, i32 2, i64 %30
  %32 = zext i32 %5 to i64
  br label %35

33:                                               ; preds = %58
  %34 = getelementptr inbounds %struct.CLenPriceEnc, %struct.CLenPriceEnc* %0, i64 0, i32 0, i32 3, i64 %30
  br label %65

35:                                               ; preds = %58, %3
  %36 = phi i64 [ 0, %3 ], [ %61, %58 ]
  %37 = icmp eq i64 %36, %32
  br i1 %37, label %121, label %38

38:                                               ; preds = %35
  %39 = trunc i64 %36 to i32
  %40 = or i32 %39, 8
  br label %41

41:                                               ; preds = %41, %38
  %42 = phi i32 [ %56, %41 ], [ 0, %38 ]
  %43 = phi i32 [ %44, %41 ], [ %40, %38 ]
  %44 = lshr i32 %43, 1
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds i32, i32* %31, i64 %45
  %47 = load i32, i32* %46, align 4
  %48 = and i32 %43, 1
  %49 = sub nsw i32 0, %48
  %50 = and i32 %49, 2032
  %51 = xor i32 %50, %47
  %52 = lshr i32 %51, 4
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i32, i32* %2, i64 %53
  %55 = load i32, i32* %54, align 4
  %56 = add i32 %55, %42
  %57 = icmp eq i32 %44, 1
  br i1 %57, label %58, label %41

58:                                               ; preds = %41
  %59 = add i32 %56, %12
  %60 = getelementptr inbounds %struct.CLenPriceEnc, %struct.CLenPriceEnc* %0, i64 0, i32 2, i64 %6, i64 %36
  store i32 %59, i32* %60, align 4
  %61 = add nuw nsw i64 %36, 1
  %62 = icmp eq i64 %61, 8
  br i1 %62, label %33, label %35

63:                                               ; preds = %89
  %64 = icmp ugt i32 %5, 16
  br i1 %64, label %94, label %121

65:                                               ; preds = %89, %33
  %66 = phi i64 [ 8, %33 ], [ %92, %89 ]
  %67 = icmp ult i64 %66, %32
  br i1 %67, label %68, label %121

68:                                               ; preds = %65
  %69 = trunc i64 %66 to i32
  %70 = add i32 %69, -8
  %71 = or i32 %70, 8
  br label %72

72:                                               ; preds = %72, %68
  %73 = phi i32 [ %87, %72 ], [ 0, %68 ]
  %74 = phi i32 [ %75, %72 ], [ %71, %68 ]
  %75 = lshr i32 %74, 1
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds i32, i32* %34, i64 %76
  %78 = load i32, i32* %77, align 4
  %79 = and i32 %74, 1
  %80 = sub nsw i32 0, %79
  %81 = and i32 %80, 2032
  %82 = xor i32 %81, %78
  %83 = lshr i32 %82, 4
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds i32, i32* %2, i64 %84
  %86 = load i32, i32* %85, align 4
  %87 = add i32 %86, %73
  %88 = icmp eq i32 %75, 1
  br i1 %88, label %89, label %72

89:                                               ; preds = %72
  %90 = add i32 %23, %87
  %91 = getelementptr inbounds %struct.CLenPriceEnc, %struct.CLenPriceEnc* %0, i64 0, i32 2, i64 %6, i64 %66
  store i32 %90, i32* %91, align 4
  %92 = add nuw nsw i64 %66, 1
  %93 = icmp eq i64 %92, 16
  br i1 %93, label %63, label %65

94:                                               ; preds = %63, %116
  %95 = phi i64 [ %119, %116 ], [ 16, %63 ]
  %96 = trunc i64 %95 to i32
  %97 = add i32 %96, -16
  %98 = or i32 %97, 256
  br label %99

99:                                               ; preds = %99, %94
  %100 = phi i32 [ %114, %99 ], [ 0, %94 ]
  %101 = phi i32 [ %102, %99 ], [ %98, %94 ]
  %102 = lshr i32 %101, 1
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %struct.CLenPriceEnc, %struct.CLenPriceEnc* %0, i64 0, i32 0, i32 4, i64 %103
  %105 = load i32, i32* %104, align 4
  %106 = and i32 %101, 1
  %107 = sub nsw i32 0, %106
  %108 = and i32 %107, 2032
  %109 = xor i32 %108, %105
  %110 = lshr i32 %109, 4
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds i32, i32* %2, i64 %111
  %113 = load i32, i32* %112, align 4
  %114 = add i32 %113, %100
  %115 = icmp eq i32 %102, 1
  br i1 %115, label %116, label %99

116:                                              ; preds = %99
  %117 = add i32 %28, %114
  %118 = getelementptr inbounds %struct.CLenPriceEnc, %struct.CLenPriceEnc* %0, i64 0, i32 2, i64 %6, i64 %95
  store i32 %117, i32* %118, align 4
  %119 = add nuw nsw i64 %95, 1
  %120 = icmp eq i64 %119, %32
  br i1 %120, label %121, label %94

121:                                              ; preds = %35, %65, %116, %63
  %122 = getelementptr inbounds %struct.CLenPriceEnc, %struct.CLenPriceEnc* %0, i64 0, i32 3, i64 %6
  store i32 %5, i32* %122, align 4
  ret void
}

declare i32 @MatchFinder_Create(%struct._CMatchFinder*, i32, i32, i32, i32, %struct.ISzAlloc*) local_unnamed_addr #4

declare void @MatchFinder_CreateVTable(%struct._CMatchFinder*, %struct._IMatchFinder*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @Flush(%struct.CLzmaEnc*, i32) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 20
  store i32 1, i32* %3, align 8
  %4 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 19
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 2
  %9 = load i64, i64* %8, align 8
  br label %626

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 15
  %12 = load i32, i32* %11, align 8
  %13 = and i32 %12, %1
  %14 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29
  %15 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 10
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i64
  %18 = zext i32 %13 to i64
  %19 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 38, i64 %17, i64 %18
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %14, i64 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = lshr i32 %22, 11
  %24 = mul i32 %23, %20
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 2
  %27 = load i64, i64* %26, align 8
  %28 = add i64 %27, %25
  store i64 %28, i64* %26, align 8
  %29 = sub i32 %22, %24
  store i32 %29, i32* %21, align 8
  %30 = lshr i32 %20, 5
  %31 = sub i32 %20, %30
  store i32 %31, i32* %19, align 4
  %32 = icmp ult i32 %29, 16777216
  br i1 %32, label %33, label %139

33:                                               ; preds = %10
  %34 = shl i32 %29, 8
  store i32 %34, i32* %21, align 8
  %35 = trunc i64 %28 to i32
  %36 = icmp ult i32 %35, -16777216
  %37 = icmp ugt i64 %28, 4294967295
  %38 = or i1 %37, %36
  br i1 %38, label %43, label %39

39:                                               ; preds = %33
  %40 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 3
  %41 = load i64, i64* %40, align 8
  %42 = add i64 %41, 1
  br label %131

43:                                               ; preds = %33
  %44 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 1
  %45 = load i8, i8* %44, align 4
  %46 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 4
  %47 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 5
  %48 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 9
  %49 = bitcast i8** %46 to i64*
  %50 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 6
  %51 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 7
  %52 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 8
  %53 = bitcast i8** %50 to i64*
  %54 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 3
  %55 = load i8*, i8** %46, align 8
  %56 = lshr i64 %28, 32
  %57 = trunc i64 %56 to i8
  %58 = add i8 %45, %57
  %59 = getelementptr inbounds i8, i8* %55, i64 1
  store i8 %58, i8* %55, align 1
  store i8* %59, i8** %46, align 8
  %60 = load i8*, i8** %47, align 8
  %61 = icmp eq i8* %59, %60
  %62 = ptrtoint i8* %59 to i64
  br i1 %61, label %63, label %82

63:                                               ; preds = %43
  %64 = load i32, i32* %48, align 8
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %82

66:                                               ; preds = %63
  %67 = load i8*, i8** %50, align 8
  %68 = ptrtoint i8* %67 to i64
  %69 = sub i64 %62, %68
  %70 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %51, align 8
  %71 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %70, i64 0, i32 0
  %72 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %71, align 8
  %73 = bitcast %struct.ISeqOutStream* %70 to i8*
  %74 = tail call i64 %72(i8* %73, i8* %67, i64 %69) #6
  %75 = icmp eq i64 %69, %74
  br i1 %75, label %77, label %76

76:                                               ; preds = %66
  store i32 9, i32* %48, align 8
  br label %77

77:                                               ; preds = %76, %66
  %78 = load i64, i64* %52, align 8
  %79 = add i64 %78, %69
  store i64 %79, i64* %52, align 8
  %80 = load i64, i64* %53, align 8
  store i64 %80, i64* %49, align 8
  %81 = inttoptr i64 %80 to i8*
  br label %82

82:                                               ; preds = %77, %63, %43
  %83 = phi i8* [ %81, %77 ], [ %59, %63 ], [ %59, %43 ]
  %84 = load i64, i64* %54, align 8
  %85 = add i64 %84, -1
  store i64 %85, i64* %54, align 8
  %86 = icmp eq i64 %85, 0
  %87 = load i64, i64* %26, align 8
  br i1 %86, label %123, label %88

88:                                               ; preds = %82, %117
  %89 = phi i64 [ %122, %117 ], [ %87, %82 ]
  %90 = phi i8* [ %118, %117 ], [ %83, %82 ]
  %91 = lshr i64 %89, 32
  %92 = trunc i64 %91 to i8
  %93 = add i8 %92, -1
  %94 = getelementptr inbounds i8, i8* %90, i64 1
  store i8 %93, i8* %90, align 1
  store i8* %94, i8** %46, align 8
  %95 = load i8*, i8** %47, align 8
  %96 = icmp eq i8* %94, %95
  %97 = ptrtoint i8* %94 to i64
  br i1 %96, label %98, label %117

98:                                               ; preds = %88
  %99 = load i32, i32* %48, align 8
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %117

101:                                              ; preds = %98
  %102 = load i8*, i8** %50, align 8
  %103 = ptrtoint i8* %102 to i64
  %104 = sub i64 %97, %103
  %105 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %51, align 8
  %106 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %105, i64 0, i32 0
  %107 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %106, align 8
  %108 = bitcast %struct.ISeqOutStream* %105 to i8*
  %109 = tail call i64 %107(i8* %108, i8* %102, i64 %104) #6
  %110 = icmp eq i64 %104, %109
  br i1 %110, label %112, label %111

111:                                              ; preds = %101
  store i32 9, i32* %48, align 8
  br label %112

112:                                              ; preds = %111, %101
  %113 = load i64, i64* %52, align 8
  %114 = add i64 %113, %104
  store i64 %114, i64* %52, align 8
  %115 = load i64, i64* %53, align 8
  store i64 %115, i64* %49, align 8
  %116 = inttoptr i64 %115 to i8*
  br label %117

117:                                              ; preds = %112, %98, %88
  %118 = phi i8* [ %116, %112 ], [ %94, %98 ], [ %94, %88 ]
  %119 = load i64, i64* %54, align 8
  %120 = add i64 %119, -1
  store i64 %120, i64* %54, align 8
  %121 = icmp eq i64 %120, 0
  %122 = load i64, i64* %26, align 8
  br i1 %121, label %123, label %88, !llvm.loop !34

123:                                              ; preds = %117, %82
  %124 = phi i64 [ %87, %82 ], [ %122, %117 ]
  %125 = trunc i64 %124 to i32
  %126 = lshr i32 %125, 24
  %127 = trunc i32 %126 to i8
  store i8 %127, i8* %44, align 4
  %128 = load i32, i32* %15, align 4
  %129 = load i32, i32* %21, align 8
  %130 = zext i32 %128 to i64
  br label %131

131:                                              ; preds = %123, %39
  %132 = phi i64 [ %17, %39 ], [ %130, %123 ]
  %133 = phi i32 [ %34, %39 ], [ %129, %123 ]
  %134 = phi i64 [ %28, %39 ], [ %124, %123 ]
  %135 = phi i64 [ %42, %39 ], [ 1, %123 ]
  %136 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 3
  store i64 %135, i64* %136, align 8
  %137 = shl i64 %134, 8
  %138 = and i64 %137, 4294967040
  store i64 %138, i64* %26, align 8
  br label %139

139:                                              ; preds = %131, %10
  %140 = phi i64 [ %17, %10 ], [ %132, %131 ]
  %141 = phi i64 [ %28, %10 ], [ %138, %131 ]
  %142 = phi i32 [ %29, %10 ], [ %133, %131 ]
  %143 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 39, i64 %140
  %144 = load i32, i32* %143, align 4
  %145 = lshr i32 %142, 11
  %146 = mul i32 %145, %144
  store i32 %146, i32* %21, align 8
  %147 = sub i32 2048, %144
  %148 = lshr i32 %147, 5
  %149 = add i32 %148, %144
  store i32 %149, i32* %143, align 4
  %150 = icmp ult i32 %146, 16777216
  br i1 %150, label %151, label %255

151:                                              ; preds = %139
  %152 = shl i32 %146, 8
  store i32 %152, i32* %21, align 8
  %153 = trunc i64 %141 to i32
  %154 = icmp ult i32 %153, -16777216
  %155 = icmp ugt i64 %141, 4294967295
  %156 = or i1 %155, %154
  br i1 %156, label %161, label %157

157:                                              ; preds = %151
  %158 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 3
  %159 = load i64, i64* %158, align 8
  %160 = add i64 %159, 1
  br label %248

161:                                              ; preds = %151
  %162 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 1
  %163 = load i8, i8* %162, align 4
  %164 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 4
  %165 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 5
  %166 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 9
  %167 = bitcast i8** %164 to i64*
  %168 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 6
  %169 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 7
  %170 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 8
  %171 = bitcast i8** %168 to i64*
  %172 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 3
  %173 = load i8*, i8** %164, align 8
  %174 = lshr i64 %141, 32
  %175 = trunc i64 %174 to i8
  %176 = add i8 %163, %175
  %177 = getelementptr inbounds i8, i8* %173, i64 1
  store i8 %176, i8* %173, align 1
  store i8* %177, i8** %164, align 8
  %178 = load i8*, i8** %165, align 8
  %179 = icmp eq i8* %177, %178
  %180 = ptrtoint i8* %177 to i64
  br i1 %179, label %181, label %200

181:                                              ; preds = %161
  %182 = load i32, i32* %166, align 8
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %200

184:                                              ; preds = %181
  %185 = load i8*, i8** %168, align 8
  %186 = ptrtoint i8* %185 to i64
  %187 = sub i64 %180, %186
  %188 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %169, align 8
  %189 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %188, i64 0, i32 0
  %190 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %189, align 8
  %191 = bitcast %struct.ISeqOutStream* %188 to i8*
  %192 = tail call i64 %190(i8* %191, i8* %185, i64 %187) #6
  %193 = icmp eq i64 %187, %192
  br i1 %193, label %195, label %194

194:                                              ; preds = %184
  store i32 9, i32* %166, align 8
  br label %195

195:                                              ; preds = %194, %184
  %196 = load i64, i64* %170, align 8
  %197 = add i64 %196, %187
  store i64 %197, i64* %170, align 8
  %198 = load i64, i64* %171, align 8
  store i64 %198, i64* %167, align 8
  %199 = inttoptr i64 %198 to i8*
  br label %200

200:                                              ; preds = %195, %181, %161
  %201 = phi i8* [ %199, %195 ], [ %177, %181 ], [ %177, %161 ]
  %202 = load i64, i64* %172, align 8
  %203 = add i64 %202, -1
  store i64 %203, i64* %172, align 8
  %204 = icmp eq i64 %203, 0
  %205 = load i64, i64* %26, align 8
  br i1 %204, label %241, label %206

206:                                              ; preds = %200, %235
  %207 = phi i64 [ %240, %235 ], [ %205, %200 ]
  %208 = phi i8* [ %236, %235 ], [ %201, %200 ]
  %209 = lshr i64 %207, 32
  %210 = trunc i64 %209 to i8
  %211 = add i8 %210, -1
  %212 = getelementptr inbounds i8, i8* %208, i64 1
  store i8 %211, i8* %208, align 1
  store i8* %212, i8** %164, align 8
  %213 = load i8*, i8** %165, align 8
  %214 = icmp eq i8* %212, %213
  %215 = ptrtoint i8* %212 to i64
  br i1 %214, label %216, label %235

216:                                              ; preds = %206
  %217 = load i32, i32* %166, align 8
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %219, label %235

219:                                              ; preds = %216
  %220 = load i8*, i8** %168, align 8
  %221 = ptrtoint i8* %220 to i64
  %222 = sub i64 %215, %221
  %223 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %169, align 8
  %224 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %223, i64 0, i32 0
  %225 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %224, align 8
  %226 = bitcast %struct.ISeqOutStream* %223 to i8*
  %227 = tail call i64 %225(i8* %226, i8* %220, i64 %222) #6
  %228 = icmp eq i64 %222, %227
  br i1 %228, label %230, label %229

229:                                              ; preds = %219
  store i32 9, i32* %166, align 8
  br label %230

230:                                              ; preds = %229, %219
  %231 = load i64, i64* %170, align 8
  %232 = add i64 %231, %222
  store i64 %232, i64* %170, align 8
  %233 = load i64, i64* %171, align 8
  store i64 %233, i64* %167, align 8
  %234 = inttoptr i64 %233 to i8*
  br label %235

235:                                              ; preds = %230, %216, %206
  %236 = phi i8* [ %234, %230 ], [ %212, %216 ], [ %212, %206 ]
  %237 = load i64, i64* %172, align 8
  %238 = add i64 %237, -1
  store i64 %238, i64* %172, align 8
  %239 = icmp eq i64 %238, 0
  %240 = load i64, i64* %26, align 8
  br i1 %239, label %241, label %206, !llvm.loop !35

241:                                              ; preds = %235, %200
  %242 = phi i64 [ %205, %200 ], [ %240, %235 ]
  %243 = trunc i64 %242 to i32
  %244 = lshr i32 %243, 24
  %245 = trunc i32 %244 to i8
  store i8 %245, i8* %162, align 4
  %246 = load i32, i32* %15, align 4
  %247 = zext i32 %246 to i64
  br label %248

248:                                              ; preds = %241, %157
  %249 = phi i64 [ %140, %157 ], [ %247, %241 ]
  %250 = phi i64 [ %141, %157 ], [ %242, %241 ]
  %251 = phi i64 [ %160, %157 ], [ 1, %241 ]
  %252 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 3
  store i64 %251, i64* %252, align 8
  %253 = shl i64 %250, 8
  %254 = and i64 %253, 4294967040
  store i64 %254, i64* %26, align 8
  br label %255

255:                                              ; preds = %248, %139
  %256 = phi i64 [ %140, %139 ], [ %249, %248 ]
  %257 = getelementptr inbounds [12 x i32], [12 x i32]* @kMatchNextStates, i64 0, i64 %256
  %258 = load i32, i32* %257, align 4
  store i32 %258, i32* %15, align 4
  %259 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 47
  %260 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 18
  %261 = load i32, i32* %260, align 8
  %262 = icmp eq i32 %261, 0
  %263 = zext i1 %262 to i32
  %264 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 33, i64 0
  tail call fastcc void @LenEnc_Encode2(%struct.CLenPriceEnc* %259, %struct.CRangeEnc* %14, i32 0, i32 %13, i32 %263, i32* %264) #6
  %265 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 3
  %266 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 1
  %267 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 4
  %268 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 5
  %269 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 9
  %270 = bitcast i8** %267 to i64*
  %271 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 6
  %272 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 7
  %273 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 8
  %274 = bitcast i8** %271 to i64*
  br label %275

275:                                              ; preds = %393, %255
  %276 = phi i32 [ 1, %255 ], [ %395, %393 ]
  %277 = phi i32 [ 6, %255 ], [ %278, %393 ]
  %278 = add nsw i32 %277, -1
  %279 = lshr i32 63, %278
  %280 = and i32 %279, 1
  %281 = zext i32 %276 to i64
  %282 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 44, i64 0, i64 %281
  %283 = load i32, i32* %282, align 4
  %284 = load i32, i32* %21, align 8
  %285 = lshr i32 %284, 11
  %286 = mul i32 %285, %283
  %287 = icmp eq i32 %280, 0
  br i1 %287, label %288, label %292

288:                                              ; preds = %275
  store i32 %286, i32* %21, align 8
  %289 = sub i32 2048, %283
  %290 = lshr i32 %289, 5
  %291 = add i32 %290, %283
  br label %299

292:                                              ; preds = %275
  %293 = zext i32 %286 to i64
  %294 = load i64, i64* %26, align 8
  %295 = add i64 %294, %293
  store i64 %295, i64* %26, align 8
  %296 = sub i32 %284, %286
  store i32 %296, i32* %21, align 8
  %297 = lshr i32 %283, 5
  %298 = sub i32 %283, %297
  br label %299

299:                                              ; preds = %292, %288
  %300 = phi i32 [ %296, %292 ], [ %286, %288 ]
  %301 = phi i32 [ %298, %292 ], [ %291, %288 ]
  store i32 %301, i32* %282, align 4
  %302 = icmp ult i32 %300, 16777216
  br i1 %302, label %303, label %393

303:                                              ; preds = %299
  %304 = shl i32 %300, 8
  store i32 %304, i32* %21, align 8
  %305 = load i64, i64* %26, align 8
  %306 = trunc i64 %305 to i32
  %307 = icmp ult i32 %306, -16777216
  %308 = icmp ugt i64 %305, 4294967295
  %309 = or i1 %308, %307
  br i1 %309, label %313, label %310

310:                                              ; preds = %303
  %311 = load i64, i64* %265, align 8
  %312 = add i64 %311, 1
  br label %388

313:                                              ; preds = %303
  %314 = load i8, i8* %266, align 4
  %315 = load i8*, i8** %267, align 8
  %316 = lshr i64 %305, 32
  %317 = trunc i64 %316 to i8
  %318 = add i8 %314, %317
  %319 = getelementptr inbounds i8, i8* %315, i64 1
  store i8 %318, i8* %315, align 1
  store i8* %319, i8** %267, align 8
  %320 = load i8*, i8** %268, align 8
  %321 = icmp eq i8* %319, %320
  %322 = ptrtoint i8* %319 to i64
  br i1 %321, label %323, label %342

323:                                              ; preds = %313
  %324 = load i32, i32* %269, align 8
  %325 = icmp eq i32 %324, 0
  br i1 %325, label %326, label %342

326:                                              ; preds = %323
  %327 = load i8*, i8** %271, align 8
  %328 = ptrtoint i8* %327 to i64
  %329 = sub i64 %322, %328
  %330 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %272, align 8
  %331 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %330, i64 0, i32 0
  %332 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %331, align 8
  %333 = bitcast %struct.ISeqOutStream* %330 to i8*
  %334 = tail call i64 %332(i8* %333, i8* %327, i64 %329) #6
  %335 = icmp eq i64 %329, %334
  br i1 %335, label %337, label %336

336:                                              ; preds = %326
  store i32 9, i32* %269, align 8
  br label %337

337:                                              ; preds = %336, %326
  %338 = load i64, i64* %273, align 8
  %339 = add i64 %338, %329
  store i64 %339, i64* %273, align 8
  %340 = load i64, i64* %274, align 8
  store i64 %340, i64* %270, align 8
  %341 = inttoptr i64 %340 to i8*
  br label %342

342:                                              ; preds = %337, %323, %313
  %343 = phi i8* [ %341, %337 ], [ %319, %323 ], [ %319, %313 ]
  %344 = load i64, i64* %265, align 8
  %345 = add i64 %344, -1
  store i64 %345, i64* %265, align 8
  %346 = icmp eq i64 %345, 0
  %347 = load i64, i64* %26, align 8
  br i1 %346, label %383, label %348

348:                                              ; preds = %342, %377
  %349 = phi i64 [ %382, %377 ], [ %347, %342 ]
  %350 = phi i8* [ %378, %377 ], [ %343, %342 ]
  %351 = lshr i64 %349, 32
  %352 = trunc i64 %351 to i8
  %353 = add i8 %352, -1
  %354 = getelementptr inbounds i8, i8* %350, i64 1
  store i8 %353, i8* %350, align 1
  store i8* %354, i8** %267, align 8
  %355 = load i8*, i8** %268, align 8
  %356 = icmp eq i8* %354, %355
  %357 = ptrtoint i8* %354 to i64
  br i1 %356, label %358, label %377

358:                                              ; preds = %348
  %359 = load i32, i32* %269, align 8
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %361, label %377

361:                                              ; preds = %358
  %362 = load i8*, i8** %271, align 8
  %363 = ptrtoint i8* %362 to i64
  %364 = sub i64 %357, %363
  %365 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %272, align 8
  %366 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %365, i64 0, i32 0
  %367 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %366, align 8
  %368 = bitcast %struct.ISeqOutStream* %365 to i8*
  %369 = tail call i64 %367(i8* %368, i8* %362, i64 %364) #6
  %370 = icmp eq i64 %364, %369
  br i1 %370, label %372, label %371

371:                                              ; preds = %361
  store i32 9, i32* %269, align 8
  br label %372

372:                                              ; preds = %371, %361
  %373 = load i64, i64* %273, align 8
  %374 = add i64 %373, %364
  store i64 %374, i64* %273, align 8
  %375 = load i64, i64* %274, align 8
  store i64 %375, i64* %270, align 8
  %376 = inttoptr i64 %375 to i8*
  br label %377

377:                                              ; preds = %372, %358, %348
  %378 = phi i8* [ %376, %372 ], [ %354, %358 ], [ %354, %348 ]
  %379 = load i64, i64* %265, align 8
  %380 = add i64 %379, -1
  store i64 %380, i64* %265, align 8
  %381 = icmp eq i64 %380, 0
  %382 = load i64, i64* %26, align 8
  br i1 %381, label %383, label %348, !llvm.loop !36

383:                                              ; preds = %377, %342
  %384 = phi i64 [ %347, %342 ], [ %382, %377 ]
  %385 = trunc i64 %384 to i32
  %386 = lshr i32 %385, 24
  %387 = trunc i32 %386 to i8
  store i8 %387, i8* %266, align 4
  br label %388

388:                                              ; preds = %383, %310
  %389 = phi i64 [ %305, %310 ], [ %384, %383 ]
  %390 = phi i64 [ %312, %310 ], [ 1, %383 ]
  store i64 %390, i64* %265, align 8
  %391 = shl i64 %389, 8
  %392 = and i64 %391, 4294967040
  store i64 %392, i64* %26, align 8
  br label %393

393:                                              ; preds = %388, %299
  %394 = shl i32 %276, 1
  %395 = or i32 %280, %394
  %396 = icmp eq i32 %278, 0
  br i1 %396, label %397, label %275

397:                                              ; preds = %393, %499
  %398 = phi i32 [ %401, %499 ], [ 26, %393 ]
  %399 = load i32, i32* %21, align 8
  %400 = lshr i32 %399, 1
  store i32 %400, i32* %21, align 8
  %401 = add nsw i32 %398, -1
  %402 = lshr i32 67108863, %401
  %403 = and i32 %402, 1
  %404 = sub nsw i32 0, %403
  %405 = and i32 %400, %404
  %406 = zext i32 %405 to i64
  %407 = load i64, i64* %26, align 8
  %408 = add i64 %407, %406
  store i64 %408, i64* %26, align 8
  %409 = icmp ult i32 %399, 33554432
  br i1 %409, label %410, label %499

410:                                              ; preds = %397
  %411 = shl i32 %400, 8
  store i32 %411, i32* %21, align 8
  %412 = trunc i64 %408 to i32
  %413 = icmp ult i32 %412, -16777216
  %414 = icmp ugt i64 %408, 4294967295
  %415 = or i1 %414, %413
  br i1 %415, label %419, label %416

416:                                              ; preds = %410
  %417 = load i64, i64* %265, align 8
  %418 = add i64 %417, 1
  br label %494

419:                                              ; preds = %410
  %420 = load i8, i8* %266, align 4
  %421 = load i8*, i8** %267, align 8
  %422 = lshr i64 %408, 32
  %423 = trunc i64 %422 to i8
  %424 = add i8 %420, %423
  %425 = getelementptr inbounds i8, i8* %421, i64 1
  store i8 %424, i8* %421, align 1
  store i8* %425, i8** %267, align 8
  %426 = load i8*, i8** %268, align 8
  %427 = icmp eq i8* %425, %426
  %428 = ptrtoint i8* %425 to i64
  br i1 %427, label %429, label %448

429:                                              ; preds = %419
  %430 = load i32, i32* %269, align 8
  %431 = icmp eq i32 %430, 0
  br i1 %431, label %432, label %448

432:                                              ; preds = %429
  %433 = load i8*, i8** %271, align 8
  %434 = ptrtoint i8* %433 to i64
  %435 = sub i64 %428, %434
  %436 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %272, align 8
  %437 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %436, i64 0, i32 0
  %438 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %437, align 8
  %439 = bitcast %struct.ISeqOutStream* %436 to i8*
  %440 = tail call i64 %438(i8* %439, i8* %433, i64 %435) #6
  %441 = icmp eq i64 %435, %440
  br i1 %441, label %443, label %442

442:                                              ; preds = %432
  store i32 9, i32* %269, align 8
  br label %443

443:                                              ; preds = %442, %432
  %444 = load i64, i64* %273, align 8
  %445 = add i64 %444, %435
  store i64 %445, i64* %273, align 8
  %446 = load i64, i64* %274, align 8
  store i64 %446, i64* %270, align 8
  %447 = inttoptr i64 %446 to i8*
  br label %448

448:                                              ; preds = %443, %429, %419
  %449 = phi i8* [ %447, %443 ], [ %425, %429 ], [ %425, %419 ]
  %450 = load i64, i64* %265, align 8
  %451 = add i64 %450, -1
  store i64 %451, i64* %265, align 8
  %452 = icmp eq i64 %451, 0
  %453 = load i64, i64* %26, align 8
  br i1 %452, label %489, label %454

454:                                              ; preds = %448, %483
  %455 = phi i64 [ %488, %483 ], [ %453, %448 ]
  %456 = phi i8* [ %484, %483 ], [ %449, %448 ]
  %457 = lshr i64 %455, 32
  %458 = trunc i64 %457 to i8
  %459 = add i8 %458, -1
  %460 = getelementptr inbounds i8, i8* %456, i64 1
  store i8 %459, i8* %456, align 1
  store i8* %460, i8** %267, align 8
  %461 = load i8*, i8** %268, align 8
  %462 = icmp eq i8* %460, %461
  %463 = ptrtoint i8* %460 to i64
  br i1 %462, label %464, label %483

464:                                              ; preds = %454
  %465 = load i32, i32* %269, align 8
  %466 = icmp eq i32 %465, 0
  br i1 %466, label %467, label %483

467:                                              ; preds = %464
  %468 = load i8*, i8** %271, align 8
  %469 = ptrtoint i8* %468 to i64
  %470 = sub i64 %463, %469
  %471 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %272, align 8
  %472 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %471, i64 0, i32 0
  %473 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %472, align 8
  %474 = bitcast %struct.ISeqOutStream* %471 to i8*
  %475 = tail call i64 %473(i8* %474, i8* %468, i64 %470) #6
  %476 = icmp eq i64 %470, %475
  br i1 %476, label %478, label %477

477:                                              ; preds = %467
  store i32 9, i32* %269, align 8
  br label %478

478:                                              ; preds = %477, %467
  %479 = load i64, i64* %273, align 8
  %480 = add i64 %479, %470
  store i64 %480, i64* %273, align 8
  %481 = load i64, i64* %274, align 8
  store i64 %481, i64* %270, align 8
  %482 = inttoptr i64 %481 to i8*
  br label %483

483:                                              ; preds = %478, %464, %454
  %484 = phi i8* [ %482, %478 ], [ %460, %464 ], [ %460, %454 ]
  %485 = load i64, i64* %265, align 8
  %486 = add i64 %485, -1
  store i64 %486, i64* %265, align 8
  %487 = icmp eq i64 %486, 0
  %488 = load i64, i64* %26, align 8
  br i1 %487, label %489, label %454, !llvm.loop !37

489:                                              ; preds = %483, %448
  %490 = phi i64 [ %453, %448 ], [ %488, %483 ]
  %491 = trunc i64 %490 to i32
  %492 = lshr i32 %491, 24
  %493 = trunc i32 %492 to i8
  store i8 %493, i8* %266, align 4
  br label %494

494:                                              ; preds = %489, %416
  %495 = phi i64 [ %408, %416 ], [ %490, %489 ]
  %496 = phi i64 [ %418, %416 ], [ 1, %489 ]
  store i64 %496, i64* %265, align 8
  %497 = shl i64 %495, 8
  %498 = and i64 %497, 4294967040
  store i64 %498, i64* %26, align 8
  br label %499

499:                                              ; preds = %494, %397
  %500 = phi i64 [ %498, %494 ], [ %408, %397 ]
  %501 = icmp eq i32 %401, 0
  br i1 %501, label %502, label %397

502:                                              ; preds = %499, %619
  %503 = phi i64 [ %620, %619 ], [ %500, %499 ]
  %504 = phi i32 [ %623, %619 ], [ 15, %499 ]
  %505 = phi i32 [ %624, %619 ], [ 0, %499 ]
  %506 = phi i32 [ %622, %619 ], [ 1, %499 ]
  %507 = and i32 %504, 1
  %508 = zext i32 %506 to i64
  %509 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 46, i64 %508
  %510 = load i32, i32* %509, align 4
  %511 = load i32, i32* %21, align 8
  %512 = lshr i32 %511, 11
  %513 = mul i32 %512, %510
  %514 = icmp eq i32 %507, 0
  br i1 %514, label %515, label %519

515:                                              ; preds = %502
  store i32 %513, i32* %21, align 8
  %516 = sub i32 2048, %510
  %517 = lshr i32 %516, 5
  %518 = add i32 %517, %510
  br label %525

519:                                              ; preds = %502
  %520 = zext i32 %513 to i64
  %521 = add i64 %503, %520
  store i64 %521, i64* %26, align 8
  %522 = sub i32 %511, %513
  store i32 %522, i32* %21, align 8
  %523 = lshr i32 %510, 5
  %524 = sub i32 %510, %523
  br label %525

525:                                              ; preds = %519, %515
  %526 = phi i64 [ %521, %519 ], [ %503, %515 ]
  %527 = phi i32 [ %522, %519 ], [ %513, %515 ]
  %528 = phi i32 [ %524, %519 ], [ %518, %515 ]
  store i32 %528, i32* %509, align 4
  %529 = icmp ult i32 %527, 16777216
  br i1 %529, label %530, label %619

530:                                              ; preds = %525
  %531 = shl i32 %527, 8
  store i32 %531, i32* %21, align 8
  %532 = trunc i64 %526 to i32
  %533 = icmp ult i32 %532, -16777216
  %534 = icmp ugt i64 %526, 4294967295
  %535 = or i1 %534, %533
  br i1 %535, label %539, label %536

536:                                              ; preds = %530
  %537 = load i64, i64* %265, align 8
  %538 = add i64 %537, 1
  br label %614

539:                                              ; preds = %530
  %540 = load i8, i8* %266, align 4
  %541 = load i8*, i8** %267, align 8
  %542 = lshr i64 %526, 32
  %543 = trunc i64 %542 to i8
  %544 = add i8 %540, %543
  %545 = getelementptr inbounds i8, i8* %541, i64 1
  store i8 %544, i8* %541, align 1
  store i8* %545, i8** %267, align 8
  %546 = load i8*, i8** %268, align 8
  %547 = icmp eq i8* %545, %546
  %548 = ptrtoint i8* %545 to i64
  br i1 %547, label %549, label %568

549:                                              ; preds = %539
  %550 = load i32, i32* %269, align 8
  %551 = icmp eq i32 %550, 0
  br i1 %551, label %552, label %568

552:                                              ; preds = %549
  %553 = load i8*, i8** %271, align 8
  %554 = ptrtoint i8* %553 to i64
  %555 = sub i64 %548, %554
  %556 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %272, align 8
  %557 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %556, i64 0, i32 0
  %558 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %557, align 8
  %559 = bitcast %struct.ISeqOutStream* %556 to i8*
  %560 = tail call i64 %558(i8* %559, i8* %553, i64 %555) #6
  %561 = icmp eq i64 %555, %560
  br i1 %561, label %563, label %562

562:                                              ; preds = %552
  store i32 9, i32* %269, align 8
  br label %563

563:                                              ; preds = %562, %552
  %564 = load i64, i64* %273, align 8
  %565 = add i64 %564, %555
  store i64 %565, i64* %273, align 8
  %566 = load i64, i64* %274, align 8
  store i64 %566, i64* %270, align 8
  %567 = inttoptr i64 %566 to i8*
  br label %568

568:                                              ; preds = %563, %549, %539
  %569 = phi i8* [ %567, %563 ], [ %545, %549 ], [ %545, %539 ]
  %570 = load i64, i64* %265, align 8
  %571 = add i64 %570, -1
  store i64 %571, i64* %265, align 8
  %572 = icmp eq i64 %571, 0
  %573 = load i64, i64* %26, align 8
  br i1 %572, label %609, label %574

574:                                              ; preds = %568, %603
  %575 = phi i64 [ %608, %603 ], [ %573, %568 ]
  %576 = phi i8* [ %604, %603 ], [ %569, %568 ]
  %577 = lshr i64 %575, 32
  %578 = trunc i64 %577 to i8
  %579 = add i8 %578, -1
  %580 = getelementptr inbounds i8, i8* %576, i64 1
  store i8 %579, i8* %576, align 1
  store i8* %580, i8** %267, align 8
  %581 = load i8*, i8** %268, align 8
  %582 = icmp eq i8* %580, %581
  %583 = ptrtoint i8* %580 to i64
  br i1 %582, label %584, label %603

584:                                              ; preds = %574
  %585 = load i32, i32* %269, align 8
  %586 = icmp eq i32 %585, 0
  br i1 %586, label %587, label %603

587:                                              ; preds = %584
  %588 = load i8*, i8** %271, align 8
  %589 = ptrtoint i8* %588 to i64
  %590 = sub i64 %583, %589
  %591 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %272, align 8
  %592 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %591, i64 0, i32 0
  %593 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %592, align 8
  %594 = bitcast %struct.ISeqOutStream* %591 to i8*
  %595 = tail call i64 %593(i8* %594, i8* %588, i64 %590) #6
  %596 = icmp eq i64 %590, %595
  br i1 %596, label %598, label %597

597:                                              ; preds = %587
  store i32 9, i32* %269, align 8
  br label %598

598:                                              ; preds = %597, %587
  %599 = load i64, i64* %273, align 8
  %600 = add i64 %599, %590
  store i64 %600, i64* %273, align 8
  %601 = load i64, i64* %274, align 8
  store i64 %601, i64* %270, align 8
  %602 = inttoptr i64 %601 to i8*
  br label %603

603:                                              ; preds = %598, %584, %574
  %604 = phi i8* [ %602, %598 ], [ %580, %584 ], [ %580, %574 ]
  %605 = load i64, i64* %265, align 8
  %606 = add i64 %605, -1
  store i64 %606, i64* %265, align 8
  %607 = icmp eq i64 %606, 0
  %608 = load i64, i64* %26, align 8
  br i1 %607, label %609, label %574, !llvm.loop !38

609:                                              ; preds = %603, %568
  %610 = phi i64 [ %573, %568 ], [ %608, %603 ]
  %611 = trunc i64 %610 to i32
  %612 = lshr i32 %611, 24
  %613 = trunc i32 %612 to i8
  store i8 %613, i8* %266, align 4
  br label %614

614:                                              ; preds = %609, %536
  %615 = phi i64 [ %526, %536 ], [ %610, %609 ]
  %616 = phi i64 [ %538, %536 ], [ 1, %609 ]
  store i64 %616, i64* %265, align 8
  %617 = shl i64 %615, 8
  %618 = and i64 %617, 4294967040
  store i64 %618, i64* %26, align 8
  br label %619

619:                                              ; preds = %614, %525
  %620 = phi i64 [ %618, %614 ], [ %526, %525 ]
  %621 = shl i32 %506, 1
  %622 = or i32 %621, %507
  %623 = lshr i32 %504, 1
  %624 = add nuw nsw i32 %505, 1
  %625 = icmp eq i32 %624, 4
  br i1 %625, label %626, label %502

626:                                              ; preds = %619, %7
  %627 = phi i64 [ %9, %7 ], [ %620, %619 ]
  %628 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 2
  %629 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 3
  %630 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 1
  %631 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 4
  %632 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 5
  %633 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 9
  %634 = bitcast i8** %631 to i64*
  %635 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 6
  %636 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 7
  %637 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 29, i32 8
  %638 = bitcast i8** %635 to i64*
  br label %639

639:                                              ; preds = %724, %626
  %640 = phi i64 [ %627, %626 ], [ %728, %724 ]
  %641 = phi i32 [ 0, %626 ], [ %729, %724 ]
  %642 = trunc i64 %640 to i32
  %643 = icmp ult i32 %642, -16777216
  %644 = icmp ugt i64 %640, 4294967295
  %645 = or i1 %644, %643
  br i1 %645, label %649, label %646

646:                                              ; preds = %639
  %647 = load i64, i64* %629, align 8
  %648 = add i64 %647, 1
  br label %724

649:                                              ; preds = %639
  %650 = load i8, i8* %630, align 4
  %651 = load i8*, i8** %631, align 8
  %652 = lshr i64 %640, 32
  %653 = trunc i64 %652 to i8
  %654 = add i8 %650, %653
  %655 = getelementptr inbounds i8, i8* %651, i64 1
  store i8 %654, i8* %651, align 1
  store i8* %655, i8** %631, align 8
  %656 = load i8*, i8** %632, align 8
  %657 = icmp eq i8* %655, %656
  %658 = ptrtoint i8* %655 to i64
  br i1 %657, label %659, label %678

659:                                              ; preds = %649
  %660 = load i32, i32* %633, align 8
  %661 = icmp eq i32 %660, 0
  br i1 %661, label %662, label %678

662:                                              ; preds = %659
  %663 = load i8*, i8** %635, align 8
  %664 = ptrtoint i8* %663 to i64
  %665 = sub i64 %658, %664
  %666 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %636, align 8
  %667 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %666, i64 0, i32 0
  %668 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %667, align 8
  %669 = bitcast %struct.ISeqOutStream* %666 to i8*
  %670 = tail call i64 %668(i8* %669, i8* %663, i64 %665) #6
  %671 = icmp eq i64 %665, %670
  br i1 %671, label %673, label %672

672:                                              ; preds = %662
  store i32 9, i32* %633, align 8
  br label %673

673:                                              ; preds = %672, %662
  %674 = load i64, i64* %637, align 8
  %675 = add i64 %674, %665
  store i64 %675, i64* %637, align 8
  %676 = load i64, i64* %638, align 8
  store i64 %676, i64* %634, align 8
  %677 = inttoptr i64 %676 to i8*
  br label %678

678:                                              ; preds = %673, %659, %649
  %679 = phi i8* [ %677, %673 ], [ %655, %659 ], [ %655, %649 ]
  %680 = load i64, i64* %629, align 8
  %681 = add i64 %680, -1
  store i64 %681, i64* %629, align 8
  %682 = icmp eq i64 %681, 0
  %683 = load i64, i64* %628, align 8
  br i1 %682, label %719, label %684

684:                                              ; preds = %678, %713
  %685 = phi i64 [ %718, %713 ], [ %683, %678 ]
  %686 = phi i8* [ %714, %713 ], [ %679, %678 ]
  %687 = lshr i64 %685, 32
  %688 = trunc i64 %687 to i8
  %689 = add i8 %688, -1
  %690 = getelementptr inbounds i8, i8* %686, i64 1
  store i8 %689, i8* %686, align 1
  store i8* %690, i8** %631, align 8
  %691 = load i8*, i8** %632, align 8
  %692 = icmp eq i8* %690, %691
  %693 = ptrtoint i8* %690 to i64
  br i1 %692, label %694, label %713

694:                                              ; preds = %684
  %695 = load i32, i32* %633, align 8
  %696 = icmp eq i32 %695, 0
  br i1 %696, label %697, label %713

697:                                              ; preds = %694
  %698 = load i8*, i8** %635, align 8
  %699 = ptrtoint i8* %698 to i64
  %700 = sub i64 %693, %699
  %701 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %636, align 8
  %702 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %701, i64 0, i32 0
  %703 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %702, align 8
  %704 = bitcast %struct.ISeqOutStream* %701 to i8*
  %705 = tail call i64 %703(i8* %704, i8* %698, i64 %700) #6
  %706 = icmp eq i64 %700, %705
  br i1 %706, label %708, label %707

707:                                              ; preds = %697
  store i32 9, i32* %633, align 8
  br label %708

708:                                              ; preds = %707, %697
  %709 = load i64, i64* %637, align 8
  %710 = add i64 %709, %700
  store i64 %710, i64* %637, align 8
  %711 = load i64, i64* %638, align 8
  store i64 %711, i64* %634, align 8
  %712 = inttoptr i64 %711 to i8*
  br label %713

713:                                              ; preds = %708, %694, %684
  %714 = phi i8* [ %712, %708 ], [ %690, %694 ], [ %690, %684 ]
  %715 = load i64, i64* %629, align 8
  %716 = add i64 %715, -1
  store i64 %716, i64* %629, align 8
  %717 = icmp eq i64 %716, 0
  %718 = load i64, i64* %628, align 8
  br i1 %717, label %719, label %684, !llvm.loop !39

719:                                              ; preds = %713, %678
  %720 = phi i64 [ %683, %678 ], [ %718, %713 ]
  %721 = trunc i64 %720 to i32
  %722 = lshr i32 %721, 24
  %723 = trunc i32 %722 to i8
  store i8 %723, i8* %630, align 4
  br label %724

724:                                              ; preds = %719, %646
  %725 = phi i64 [ %640, %646 ], [ %720, %719 ]
  %726 = phi i64 [ %648, %646 ], [ 1, %719 ]
  store i64 %726, i64* %629, align 8
  %727 = shl i64 %725, 8
  %728 = and i64 %727, 4294967040
  store i64 %728, i64* %628, align 8
  %729 = add nuw nsw i32 %641, 1
  %730 = icmp eq i32 %729, 5
  br i1 %730, label %731, label %639

731:                                              ; preds = %724
  %732 = load i32, i32* %633, align 8
  %733 = icmp eq i32 %732, 0
  br i1 %733, label %734, label %750

734:                                              ; preds = %731
  %735 = load i64, i64* %634, align 8
  %736 = load i8*, i8** %635, align 8
  %737 = ptrtoint i8* %736 to i64
  %738 = sub i64 %735, %737
  %739 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %636, align 8
  %740 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %739, i64 0, i32 0
  %741 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %740, align 8
  %742 = bitcast %struct.ISeqOutStream* %739 to i8*
  %743 = tail call i64 %741(i8* %742, i8* %736, i64 %738) #6
  %744 = icmp eq i64 %738, %743
  br i1 %744, label %746, label %745

745:                                              ; preds = %734
  store i32 9, i32* %633, align 8
  br label %746

746:                                              ; preds = %745, %734
  %747 = load i64, i64* %637, align 8
  %748 = add i64 %747, %738
  store i64 %748, i64* %637, align 8
  %749 = load i64, i64* %638, align 8
  store i64 %749, i64* %634, align 8
  br label %750

750:                                              ; preds = %731, %746
  %751 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 28
  %752 = load i32, i32* %751, align 8
  %753 = icmp eq i32 %752, 0
  br i1 %753, label %754, label %768

754:                                              ; preds = %750
  %755 = load i32, i32* %633, align 8
  %756 = icmp eq i32 %755, 0
  br i1 %756, label %758, label %757

757:                                              ; preds = %754
  store i32 9, i32* %751, align 8
  br label %758

758:                                              ; preds = %757, %754
  %759 = phi i32 [ 0, %754 ], [ 9, %757 ]
  %760 = getelementptr inbounds %struct.CLzmaEnc, %struct.CLzmaEnc* %0, i64 0, i32 30, i32 26
  %761 = load i32, i32* %760, align 4
  %762 = icmp eq i32 %761, 0
  br i1 %762, label %764, label %763

763:                                              ; preds = %758
  store i32 8, i32* %751, align 8
  br label %766

764:                                              ; preds = %758
  %765 = icmp eq i32 %759, 0
  br i1 %765, label %768, label %766

766:                                              ; preds = %764, %763
  %767 = phi i32 [ 8, %763 ], [ %759, %764 ]
  store i32 1, i32* %3, align 8
  br label %768

768:                                              ; preds = %750, %764, %766
  %769 = phi i32 [ %752, %750 ], [ 0, %764 ], [ %767, %766 ]
  ret i32 %769
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @LenEnc_Encode2(%struct.CLenPriceEnc* nocapture, %struct.CRangeEnc*, i32, i32, i32, i32* nocapture readonly) unnamed_addr #3 {
  %7 = icmp ult i32 %2, 8
  %8 = getelementptr inbounds %struct.CLenPriceEnc, %struct.CLenPriceEnc* %0, i64 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = lshr i32 %11, 11
  %13 = mul i32 %12, %9
  br i1 %7, label %14, label %260

14:                                               ; preds = %6
  store i32 %13, i32* %10, align 8
  %15 = sub i32 2048, %9
  %16 = lshr i32 %15, 5
  %17 = add i32 %16, %9
  store i32 %17, i32* %8, align 4
  %18 = load i32, i32* %10, align 8
  %19 = icmp ult i32 %18, 16777216
  br i1 %19, label %20, label %123

20:                                               ; preds = %14
  %21 = shl i32 %18, 8
  store i32 %21, i32* %10, align 8
  %22 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = trunc i64 %23 to i32
  %25 = icmp ult i32 %24, -16777216
  %26 = icmp ugt i64 %23, 4294967295
  %27 = or i1 %26, %25
  br i1 %27, label %32, label %28

28:                                               ; preds = %20
  %29 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 3
  %30 = load i64, i64* %29, align 8
  %31 = add i64 %30, 1
  br label %117

32:                                               ; preds = %20
  %33 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 1
  %34 = load i8, i8* %33, align 4
  %35 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 4
  %36 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 5
  %37 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 9
  %38 = bitcast i8** %35 to i64*
  %39 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 6
  %40 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 7
  %41 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 8
  %42 = bitcast i8** %39 to i64*
  %43 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 3
  %44 = load i8*, i8** %35, align 8
  %45 = lshr i64 %23, 32
  %46 = trunc i64 %45 to i8
  %47 = add i8 %34, %46
  %48 = getelementptr inbounds i8, i8* %44, i64 1
  store i8 %47, i8* %44, align 1
  store i8* %48, i8** %35, align 8
  %49 = load i8*, i8** %36, align 8
  %50 = icmp eq i8* %48, %49
  %51 = ptrtoint i8* %48 to i64
  br i1 %50, label %52, label %71

52:                                               ; preds = %32
  %53 = load i32, i32* %37, align 8
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %71

55:                                               ; preds = %52
  %56 = load i8*, i8** %39, align 8
  %57 = ptrtoint i8* %56 to i64
  %58 = sub i64 %51, %57
  %59 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %40, align 8
  %60 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %59, i64 0, i32 0
  %61 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %60, align 8
  %62 = bitcast %struct.ISeqOutStream* %59 to i8*
  %63 = tail call i64 %61(i8* %62, i8* %56, i64 %58) #6
  %64 = icmp eq i64 %58, %63
  br i1 %64, label %66, label %65

65:                                               ; preds = %55
  store i32 9, i32* %37, align 8
  br label %66

66:                                               ; preds = %65, %55
  %67 = load i64, i64* %41, align 8
  %68 = add i64 %67, %58
  store i64 %68, i64* %41, align 8
  %69 = load i64, i64* %42, align 8
  store i64 %69, i64* %38, align 8
  %70 = inttoptr i64 %69 to i8*
  br label %71

71:                                               ; preds = %66, %52, %32
  %72 = phi i8* [ %70, %66 ], [ %48, %52 ], [ %48, %32 ]
  %73 = load i64, i64* %43, align 8
  %74 = add i64 %73, -1
  store i64 %74, i64* %43, align 8
  %75 = icmp eq i64 %74, 0
  %76 = load i64, i64* %22, align 8
  br i1 %75, label %112, label %77

77:                                               ; preds = %71, %106
  %78 = phi i64 [ %111, %106 ], [ %76, %71 ]
  %79 = phi i8* [ %107, %106 ], [ %72, %71 ]
  %80 = lshr i64 %78, 32
  %81 = trunc i64 %80 to i8
  %82 = add i8 %81, -1
  %83 = getelementptr inbounds i8, i8* %79, i64 1
  store i8 %82, i8* %79, align 1
  store i8* %83, i8** %35, align 8
  %84 = load i8*, i8** %36, align 8
  %85 = icmp eq i8* %83, %84
  %86 = ptrtoint i8* %83 to i64
  br i1 %85, label %87, label %106

87:                                               ; preds = %77
  %88 = load i32, i32* %37, align 8
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %106

90:                                               ; preds = %87
  %91 = load i8*, i8** %39, align 8
  %92 = ptrtoint i8* %91 to i64
  %93 = sub i64 %86, %92
  %94 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %40, align 8
  %95 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %94, i64 0, i32 0
  %96 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %95, align 8
  %97 = bitcast %struct.ISeqOutStream* %94 to i8*
  %98 = tail call i64 %96(i8* %97, i8* %91, i64 %93) #6
  %99 = icmp eq i64 %93, %98
  br i1 %99, label %101, label %100

100:                                              ; preds = %90
  store i32 9, i32* %37, align 8
  br label %101

101:                                              ; preds = %100, %90
  %102 = load i64, i64* %41, align 8
  %103 = add i64 %102, %93
  store i64 %103, i64* %41, align 8
  %104 = load i64, i64* %42, align 8
  store i64 %104, i64* %38, align 8
  %105 = inttoptr i64 %104 to i8*
  br label %106

106:                                              ; preds = %101, %87, %77
  %107 = phi i8* [ %105, %101 ], [ %83, %87 ], [ %83, %77 ]
  %108 = load i64, i64* %43, align 8
  %109 = add i64 %108, -1
  store i64 %109, i64* %43, align 8
  %110 = icmp eq i64 %109, 0
  %111 = load i64, i64* %22, align 8
  br i1 %110, label %112, label %77, !llvm.loop !40

112:                                              ; preds = %106, %71
  %113 = phi i64 [ %76, %71 ], [ %111, %106 ]
  %114 = trunc i64 %113 to i32
  %115 = lshr i32 %114, 24
  %116 = trunc i32 %115 to i8
  store i8 %116, i8* %33, align 4
  br label %117

117:                                              ; preds = %112, %28
  %118 = phi i64 [ %23, %28 ], [ %113, %112 ]
  %119 = phi i64 [ %31, %28 ], [ 1, %112 ]
  %120 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 3
  store i64 %119, i64* %120, align 8
  %121 = shl i64 %118, 8
  %122 = and i64 %121, 4294967040
  store i64 %122, i64* %22, align 8
  br label %123

123:                                              ; preds = %117, %14
  %124 = shl i32 %3, 3
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds %struct.CLenPriceEnc, %struct.CLenPriceEnc* %0, i64 0, i32 0, i32 2, i64 %125
  %127 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 2
  %128 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 3
  %129 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 1
  %130 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 4
  %131 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 5
  %132 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 9
  %133 = bitcast i8** %130 to i64*
  %134 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 6
  %135 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 7
  %136 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 8
  %137 = bitcast i8** %134 to i64*
  br label %138

138:                                              ; preds = %256, %123
  %139 = phi i32 [ 1, %123 ], [ %258, %256 ]
  %140 = phi i32 [ 3, %123 ], [ %141, %256 ]
  %141 = add nsw i32 %140, -1
  %142 = lshr i32 %2, %141
  %143 = and i32 %142, 1
  %144 = zext i32 %139 to i64
  %145 = getelementptr inbounds i32, i32* %126, i64 %144
  %146 = load i32, i32* %145, align 4
  %147 = load i32, i32* %10, align 8
  %148 = lshr i32 %147, 11
  %149 = mul i32 %148, %146
  %150 = icmp eq i32 %143, 0
  br i1 %150, label %151, label %155

151:                                              ; preds = %138
  store i32 %149, i32* %10, align 8
  %152 = sub i32 2048, %146
  %153 = lshr i32 %152, 5
  %154 = add i32 %153, %146
  br label %162

155:                                              ; preds = %138
  %156 = zext i32 %149 to i64
  %157 = load i64, i64* %127, align 8
  %158 = add i64 %157, %156
  store i64 %158, i64* %127, align 8
  %159 = sub i32 %147, %149
  store i32 %159, i32* %10, align 8
  %160 = lshr i32 %146, 5
  %161 = sub i32 %146, %160
  br label %162

162:                                              ; preds = %155, %151
  %163 = phi i32 [ %154, %151 ], [ %161, %155 ]
  store i32 %163, i32* %145, align 4
  %164 = load i32, i32* %10, align 8
  %165 = icmp ult i32 %164, 16777216
  br i1 %165, label %166, label %256

166:                                              ; preds = %162
  %167 = shl i32 %164, 8
  store i32 %167, i32* %10, align 8
  %168 = load i64, i64* %127, align 8
  %169 = trunc i64 %168 to i32
  %170 = icmp ult i32 %169, -16777216
  %171 = icmp ugt i64 %168, 4294967295
  %172 = or i1 %171, %170
  br i1 %172, label %176, label %173

173:                                              ; preds = %166
  %174 = load i64, i64* %128, align 8
  %175 = add i64 %174, 1
  br label %251

176:                                              ; preds = %166
  %177 = load i8, i8* %129, align 4
  %178 = load i8*, i8** %130, align 8
  %179 = lshr i64 %168, 32
  %180 = trunc i64 %179 to i8
  %181 = add i8 %177, %180
  %182 = getelementptr inbounds i8, i8* %178, i64 1
  store i8 %181, i8* %178, align 1
  store i8* %182, i8** %130, align 8
  %183 = load i8*, i8** %131, align 8
  %184 = icmp eq i8* %182, %183
  %185 = ptrtoint i8* %182 to i64
  br i1 %184, label %186, label %205

186:                                              ; preds = %176
  %187 = load i32, i32* %132, align 8
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %189, label %205

189:                                              ; preds = %186
  %190 = load i8*, i8** %134, align 8
  %191 = ptrtoint i8* %190 to i64
  %192 = sub i64 %185, %191
  %193 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %135, align 8
  %194 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %193, i64 0, i32 0
  %195 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %194, align 8
  %196 = bitcast %struct.ISeqOutStream* %193 to i8*
  %197 = tail call i64 %195(i8* %196, i8* %190, i64 %192) #6
  %198 = icmp eq i64 %192, %197
  br i1 %198, label %200, label %199

199:                                              ; preds = %189
  store i32 9, i32* %132, align 8
  br label %200

200:                                              ; preds = %199, %189
  %201 = load i64, i64* %136, align 8
  %202 = add i64 %201, %192
  store i64 %202, i64* %136, align 8
  %203 = load i64, i64* %137, align 8
  store i64 %203, i64* %133, align 8
  %204 = inttoptr i64 %203 to i8*
  br label %205

205:                                              ; preds = %200, %186, %176
  %206 = phi i8* [ %204, %200 ], [ %182, %186 ], [ %182, %176 ]
  %207 = load i64, i64* %128, align 8
  %208 = add i64 %207, -1
  store i64 %208, i64* %128, align 8
  %209 = icmp eq i64 %208, 0
  %210 = load i64, i64* %127, align 8
  br i1 %209, label %246, label %211

211:                                              ; preds = %205, %240
  %212 = phi i64 [ %245, %240 ], [ %210, %205 ]
  %213 = phi i8* [ %241, %240 ], [ %206, %205 ]
  %214 = lshr i64 %212, 32
  %215 = trunc i64 %214 to i8
  %216 = add i8 %215, -1
  %217 = getelementptr inbounds i8, i8* %213, i64 1
  store i8 %216, i8* %213, align 1
  store i8* %217, i8** %130, align 8
  %218 = load i8*, i8** %131, align 8
  %219 = icmp eq i8* %217, %218
  %220 = ptrtoint i8* %217 to i64
  br i1 %219, label %221, label %240

221:                                              ; preds = %211
  %222 = load i32, i32* %132, align 8
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %224, label %240

224:                                              ; preds = %221
  %225 = load i8*, i8** %134, align 8
  %226 = ptrtoint i8* %225 to i64
  %227 = sub i64 %220, %226
  %228 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %135, align 8
  %229 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %228, i64 0, i32 0
  %230 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %229, align 8
  %231 = bitcast %struct.ISeqOutStream* %228 to i8*
  %232 = tail call i64 %230(i8* %231, i8* %225, i64 %227) #6
  %233 = icmp eq i64 %227, %232
  br i1 %233, label %235, label %234

234:                                              ; preds = %224
  store i32 9, i32* %132, align 8
  br label %235

235:                                              ; preds = %234, %224
  %236 = load i64, i64* %136, align 8
  %237 = add i64 %236, %227
  store i64 %237, i64* %136, align 8
  %238 = load i64, i64* %137, align 8
  store i64 %238, i64* %133, align 8
  %239 = inttoptr i64 %238 to i8*
  br label %240

240:                                              ; preds = %235, %221, %211
  %241 = phi i8* [ %239, %235 ], [ %217, %221 ], [ %217, %211 ]
  %242 = load i64, i64* %128, align 8
  %243 = add i64 %242, -1
  store i64 %243, i64* %128, align 8
  %244 = icmp eq i64 %243, 0
  %245 = load i64, i64* %127, align 8
  br i1 %244, label %246, label %211, !llvm.loop !41

246:                                              ; preds = %240, %205
  %247 = phi i64 [ %210, %205 ], [ %245, %240 ]
  %248 = trunc i64 %247 to i32
  %249 = lshr i32 %248, 24
  %250 = trunc i32 %249 to i8
  store i8 %250, i8* %129, align 4
  br label %251

251:                                              ; preds = %246, %173
  %252 = phi i64 [ %168, %173 ], [ %247, %246 ]
  %253 = phi i64 [ %175, %173 ], [ 1, %246 ]
  store i64 %253, i64* %128, align 8
  %254 = shl i64 %252, 8
  %255 = and i64 %254, 4294967040
  store i64 %255, i64* %127, align 8
  br label %256

256:                                              ; preds = %251, %162
  %257 = shl i32 %139, 1
  %258 = or i32 %143, %257
  %259 = icmp eq i32 %141, 0
  br i1 %259, label %871, label %138

260:                                              ; preds = %6
  %261 = zext i32 %13 to i64
  %262 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 2
  %263 = load i64, i64* %262, align 8
  %264 = add i64 %263, %261
  store i64 %264, i64* %262, align 8
  %265 = sub i32 %11, %13
  store i32 %265, i32* %10, align 8
  %266 = lshr i32 %9, 5
  %267 = sub i32 %9, %266
  store i32 %267, i32* %8, align 4
  %268 = load i32, i32* %10, align 8
  %269 = icmp ult i32 %268, 16777216
  br i1 %269, label %270, label %374

270:                                              ; preds = %260
  %271 = shl i32 %268, 8
  store i32 %271, i32* %10, align 8
  %272 = load i64, i64* %262, align 8
  %273 = trunc i64 %272 to i32
  %274 = icmp ult i32 %273, -16777216
  %275 = icmp ugt i64 %272, 4294967295
  %276 = or i1 %275, %274
  br i1 %276, label %281, label %277

277:                                              ; preds = %270
  %278 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 3
  %279 = load i64, i64* %278, align 8
  %280 = add i64 %279, 1
  br label %367

281:                                              ; preds = %270
  %282 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 1
  %283 = load i8, i8* %282, align 4
  %284 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 4
  %285 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 5
  %286 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 9
  %287 = bitcast i8** %284 to i64*
  %288 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 6
  %289 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 7
  %290 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 8
  %291 = bitcast i8** %288 to i64*
  %292 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 3
  %293 = load i8*, i8** %284, align 8
  %294 = lshr i64 %272, 32
  %295 = trunc i64 %294 to i8
  %296 = add i8 %283, %295
  %297 = getelementptr inbounds i8, i8* %293, i64 1
  store i8 %296, i8* %293, align 1
  store i8* %297, i8** %284, align 8
  %298 = load i8*, i8** %285, align 8
  %299 = icmp eq i8* %297, %298
  %300 = ptrtoint i8* %297 to i64
  br i1 %299, label %301, label %320

301:                                              ; preds = %281
  %302 = load i32, i32* %286, align 8
  %303 = icmp eq i32 %302, 0
  br i1 %303, label %304, label %320

304:                                              ; preds = %301
  %305 = load i8*, i8** %288, align 8
  %306 = ptrtoint i8* %305 to i64
  %307 = sub i64 %300, %306
  %308 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %289, align 8
  %309 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %308, i64 0, i32 0
  %310 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %309, align 8
  %311 = bitcast %struct.ISeqOutStream* %308 to i8*
  %312 = tail call i64 %310(i8* %311, i8* %305, i64 %307) #6
  %313 = icmp eq i64 %307, %312
  br i1 %313, label %315, label %314

314:                                              ; preds = %304
  store i32 9, i32* %286, align 8
  br label %315

315:                                              ; preds = %314, %304
  %316 = load i64, i64* %290, align 8
  %317 = add i64 %316, %307
  store i64 %317, i64* %290, align 8
  %318 = load i64, i64* %291, align 8
  store i64 %318, i64* %287, align 8
  %319 = inttoptr i64 %318 to i8*
  br label %320

320:                                              ; preds = %315, %301, %281
  %321 = phi i8* [ %319, %315 ], [ %297, %301 ], [ %297, %281 ]
  %322 = load i64, i64* %292, align 8
  %323 = add i64 %322, -1
  store i64 %323, i64* %292, align 8
  %324 = icmp eq i64 %323, 0
  %325 = load i64, i64* %262, align 8
  br i1 %324, label %361, label %326

326:                                              ; preds = %320, %355
  %327 = phi i64 [ %360, %355 ], [ %325, %320 ]
  %328 = phi i8* [ %356, %355 ], [ %321, %320 ]
  %329 = lshr i64 %327, 32
  %330 = trunc i64 %329 to i8
  %331 = add i8 %330, -1
  %332 = getelementptr inbounds i8, i8* %328, i64 1
  store i8 %331, i8* %328, align 1
  store i8* %332, i8** %284, align 8
  %333 = load i8*, i8** %285, align 8
  %334 = icmp eq i8* %332, %333
  %335 = ptrtoint i8* %332 to i64
  br i1 %334, label %336, label %355

336:                                              ; preds = %326
  %337 = load i32, i32* %286, align 8
  %338 = icmp eq i32 %337, 0
  br i1 %338, label %339, label %355

339:                                              ; preds = %336
  %340 = load i8*, i8** %288, align 8
  %341 = ptrtoint i8* %340 to i64
  %342 = sub i64 %335, %341
  %343 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %289, align 8
  %344 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %343, i64 0, i32 0
  %345 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %344, align 8
  %346 = bitcast %struct.ISeqOutStream* %343 to i8*
  %347 = tail call i64 %345(i8* %346, i8* %340, i64 %342) #6
  %348 = icmp eq i64 %342, %347
  br i1 %348, label %350, label %349

349:                                              ; preds = %339
  store i32 9, i32* %286, align 8
  br label %350

350:                                              ; preds = %349, %339
  %351 = load i64, i64* %290, align 8
  %352 = add i64 %351, %342
  store i64 %352, i64* %290, align 8
  %353 = load i64, i64* %291, align 8
  store i64 %353, i64* %287, align 8
  %354 = inttoptr i64 %353 to i8*
  br label %355

355:                                              ; preds = %350, %336, %326
  %356 = phi i8* [ %354, %350 ], [ %332, %336 ], [ %332, %326 ]
  %357 = load i64, i64* %292, align 8
  %358 = add i64 %357, -1
  store i64 %358, i64* %292, align 8
  %359 = icmp eq i64 %358, 0
  %360 = load i64, i64* %262, align 8
  br i1 %359, label %361, label %326, !llvm.loop !42

361:                                              ; preds = %355, %320
  %362 = phi i64 [ %325, %320 ], [ %360, %355 ]
  %363 = trunc i64 %362 to i32
  %364 = lshr i32 %363, 24
  %365 = trunc i32 %364 to i8
  store i8 %365, i8* %282, align 4
  %366 = load i32, i32* %10, align 8
  br label %367

367:                                              ; preds = %361, %277
  %368 = phi i32 [ %271, %277 ], [ %366, %361 ]
  %369 = phi i64 [ %272, %277 ], [ %362, %361 ]
  %370 = phi i64 [ %280, %277 ], [ 1, %361 ]
  %371 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 3
  store i64 %370, i64* %371, align 8
  %372 = shl i64 %369, 8
  %373 = and i64 %372, 4294967040
  store i64 %373, i64* %262, align 8
  br label %374

374:                                              ; preds = %367, %260
  %375 = phi i32 [ %268, %260 ], [ %368, %367 ]
  %376 = icmp ult i32 %2, 16
  %377 = getelementptr inbounds %struct.CLenPriceEnc, %struct.CLenPriceEnc* %0, i64 0, i32 0, i32 1
  %378 = load i32, i32* %377, align 4
  %379 = lshr i32 %375, 11
  %380 = mul i32 %379, %378
  br i1 %376, label %381, label %626

381:                                              ; preds = %374
  store i32 %380, i32* %10, align 8
  %382 = sub i32 2048, %378
  %383 = lshr i32 %382, 5
  %384 = add i32 %383, %378
  store i32 %384, i32* %377, align 4
  %385 = load i32, i32* %10, align 8
  %386 = icmp ult i32 %385, 16777216
  br i1 %386, label %387, label %489

387:                                              ; preds = %381
  %388 = shl i32 %385, 8
  store i32 %388, i32* %10, align 8
  %389 = load i64, i64* %262, align 8
  %390 = trunc i64 %389 to i32
  %391 = icmp ult i32 %390, -16777216
  %392 = icmp ugt i64 %389, 4294967295
  %393 = or i1 %392, %391
  br i1 %393, label %398, label %394

394:                                              ; preds = %387
  %395 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 3
  %396 = load i64, i64* %395, align 8
  %397 = add i64 %396, 1
  br label %483

398:                                              ; preds = %387
  %399 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 1
  %400 = load i8, i8* %399, align 4
  %401 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 4
  %402 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 5
  %403 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 9
  %404 = bitcast i8** %401 to i64*
  %405 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 6
  %406 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 7
  %407 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 8
  %408 = bitcast i8** %405 to i64*
  %409 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 3
  %410 = load i8*, i8** %401, align 8
  %411 = lshr i64 %389, 32
  %412 = trunc i64 %411 to i8
  %413 = add i8 %400, %412
  %414 = getelementptr inbounds i8, i8* %410, i64 1
  store i8 %413, i8* %410, align 1
  store i8* %414, i8** %401, align 8
  %415 = load i8*, i8** %402, align 8
  %416 = icmp eq i8* %414, %415
  %417 = ptrtoint i8* %414 to i64
  br i1 %416, label %418, label %437

418:                                              ; preds = %398
  %419 = load i32, i32* %403, align 8
  %420 = icmp eq i32 %419, 0
  br i1 %420, label %421, label %437

421:                                              ; preds = %418
  %422 = load i8*, i8** %405, align 8
  %423 = ptrtoint i8* %422 to i64
  %424 = sub i64 %417, %423
  %425 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %406, align 8
  %426 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %425, i64 0, i32 0
  %427 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %426, align 8
  %428 = bitcast %struct.ISeqOutStream* %425 to i8*
  %429 = tail call i64 %427(i8* %428, i8* %422, i64 %424) #6
  %430 = icmp eq i64 %424, %429
  br i1 %430, label %432, label %431

431:                                              ; preds = %421
  store i32 9, i32* %403, align 8
  br label %432

432:                                              ; preds = %431, %421
  %433 = load i64, i64* %407, align 8
  %434 = add i64 %433, %424
  store i64 %434, i64* %407, align 8
  %435 = load i64, i64* %408, align 8
  store i64 %435, i64* %404, align 8
  %436 = inttoptr i64 %435 to i8*
  br label %437

437:                                              ; preds = %432, %418, %398
  %438 = phi i8* [ %436, %432 ], [ %414, %418 ], [ %414, %398 ]
  %439 = load i64, i64* %409, align 8
  %440 = add i64 %439, -1
  store i64 %440, i64* %409, align 8
  %441 = icmp eq i64 %440, 0
  %442 = load i64, i64* %262, align 8
  br i1 %441, label %478, label %443

443:                                              ; preds = %437, %472
  %444 = phi i64 [ %477, %472 ], [ %442, %437 ]
  %445 = phi i8* [ %473, %472 ], [ %438, %437 ]
  %446 = lshr i64 %444, 32
  %447 = trunc i64 %446 to i8
  %448 = add i8 %447, -1
  %449 = getelementptr inbounds i8, i8* %445, i64 1
  store i8 %448, i8* %445, align 1
  store i8* %449, i8** %401, align 8
  %450 = load i8*, i8** %402, align 8
  %451 = icmp eq i8* %449, %450
  %452 = ptrtoint i8* %449 to i64
  br i1 %451, label %453, label %472

453:                                              ; preds = %443
  %454 = load i32, i32* %403, align 8
  %455 = icmp eq i32 %454, 0
  br i1 %455, label %456, label %472

456:                                              ; preds = %453
  %457 = load i8*, i8** %405, align 8
  %458 = ptrtoint i8* %457 to i64
  %459 = sub i64 %452, %458
  %460 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %406, align 8
  %461 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %460, i64 0, i32 0
  %462 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %461, align 8
  %463 = bitcast %struct.ISeqOutStream* %460 to i8*
  %464 = tail call i64 %462(i8* %463, i8* %457, i64 %459) #6
  %465 = icmp eq i64 %459, %464
  br i1 %465, label %467, label %466

466:                                              ; preds = %456
  store i32 9, i32* %403, align 8
  br label %467

467:                                              ; preds = %466, %456
  %468 = load i64, i64* %407, align 8
  %469 = add i64 %468, %459
  store i64 %469, i64* %407, align 8
  %470 = load i64, i64* %408, align 8
  store i64 %470, i64* %404, align 8
  %471 = inttoptr i64 %470 to i8*
  br label %472

472:                                              ; preds = %467, %453, %443
  %473 = phi i8* [ %471, %467 ], [ %449, %453 ], [ %449, %443 ]
  %474 = load i64, i64* %409, align 8
  %475 = add i64 %474, -1
  store i64 %475, i64* %409, align 8
  %476 = icmp eq i64 %475, 0
  %477 = load i64, i64* %262, align 8
  br i1 %476, label %478, label %443, !llvm.loop !43

478:                                              ; preds = %472, %437
  %479 = phi i64 [ %442, %437 ], [ %477, %472 ]
  %480 = trunc i64 %479 to i32
  %481 = lshr i32 %480, 24
  %482 = trunc i32 %481 to i8
  store i8 %482, i8* %399, align 4
  br label %483

483:                                              ; preds = %478, %394
  %484 = phi i64 [ %389, %394 ], [ %479, %478 ]
  %485 = phi i64 [ %397, %394 ], [ 1, %478 ]
  %486 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 3
  store i64 %485, i64* %486, align 8
  %487 = shl i64 %484, 8
  %488 = and i64 %487, 4294967040
  store i64 %488, i64* %262, align 8
  br label %489

489:                                              ; preds = %483, %381
  %490 = shl i32 %3, 3
  %491 = zext i32 %490 to i64
  %492 = getelementptr inbounds %struct.CLenPriceEnc, %struct.CLenPriceEnc* %0, i64 0, i32 0, i32 3, i64 %491
  %493 = add i32 %2, -8
  %494 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 3
  %495 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 1
  %496 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 4
  %497 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 5
  %498 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 9
  %499 = bitcast i8** %496 to i64*
  %500 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 6
  %501 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 7
  %502 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 8
  %503 = bitcast i8** %500 to i64*
  br label %504

504:                                              ; preds = %622, %489
  %505 = phi i32 [ 1, %489 ], [ %624, %622 ]
  %506 = phi i32 [ 3, %489 ], [ %507, %622 ]
  %507 = add nsw i32 %506, -1
  %508 = lshr i32 %493, %507
  %509 = and i32 %508, 1
  %510 = zext i32 %505 to i64
  %511 = getelementptr inbounds i32, i32* %492, i64 %510
  %512 = load i32, i32* %511, align 4
  %513 = load i32, i32* %10, align 8
  %514 = lshr i32 %513, 11
  %515 = mul i32 %514, %512
  %516 = icmp eq i32 %509, 0
  br i1 %516, label %517, label %521

517:                                              ; preds = %504
  store i32 %515, i32* %10, align 8
  %518 = sub i32 2048, %512
  %519 = lshr i32 %518, 5
  %520 = add i32 %519, %512
  br label %528

521:                                              ; preds = %504
  %522 = zext i32 %515 to i64
  %523 = load i64, i64* %262, align 8
  %524 = add i64 %523, %522
  store i64 %524, i64* %262, align 8
  %525 = sub i32 %513, %515
  store i32 %525, i32* %10, align 8
  %526 = lshr i32 %512, 5
  %527 = sub i32 %512, %526
  br label %528

528:                                              ; preds = %521, %517
  %529 = phi i32 [ %520, %517 ], [ %527, %521 ]
  store i32 %529, i32* %511, align 4
  %530 = load i32, i32* %10, align 8
  %531 = icmp ult i32 %530, 16777216
  br i1 %531, label %532, label %622

532:                                              ; preds = %528
  %533 = shl i32 %530, 8
  store i32 %533, i32* %10, align 8
  %534 = load i64, i64* %262, align 8
  %535 = trunc i64 %534 to i32
  %536 = icmp ult i32 %535, -16777216
  %537 = icmp ugt i64 %534, 4294967295
  %538 = or i1 %537, %536
  br i1 %538, label %542, label %539

539:                                              ; preds = %532
  %540 = load i64, i64* %494, align 8
  %541 = add i64 %540, 1
  br label %617

542:                                              ; preds = %532
  %543 = load i8, i8* %495, align 4
  %544 = load i8*, i8** %496, align 8
  %545 = lshr i64 %534, 32
  %546 = trunc i64 %545 to i8
  %547 = add i8 %543, %546
  %548 = getelementptr inbounds i8, i8* %544, i64 1
  store i8 %547, i8* %544, align 1
  store i8* %548, i8** %496, align 8
  %549 = load i8*, i8** %497, align 8
  %550 = icmp eq i8* %548, %549
  %551 = ptrtoint i8* %548 to i64
  br i1 %550, label %552, label %571

552:                                              ; preds = %542
  %553 = load i32, i32* %498, align 8
  %554 = icmp eq i32 %553, 0
  br i1 %554, label %555, label %571

555:                                              ; preds = %552
  %556 = load i8*, i8** %500, align 8
  %557 = ptrtoint i8* %556 to i64
  %558 = sub i64 %551, %557
  %559 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %501, align 8
  %560 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %559, i64 0, i32 0
  %561 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %560, align 8
  %562 = bitcast %struct.ISeqOutStream* %559 to i8*
  %563 = tail call i64 %561(i8* %562, i8* %556, i64 %558) #6
  %564 = icmp eq i64 %558, %563
  br i1 %564, label %566, label %565

565:                                              ; preds = %555
  store i32 9, i32* %498, align 8
  br label %566

566:                                              ; preds = %565, %555
  %567 = load i64, i64* %502, align 8
  %568 = add i64 %567, %558
  store i64 %568, i64* %502, align 8
  %569 = load i64, i64* %503, align 8
  store i64 %569, i64* %499, align 8
  %570 = inttoptr i64 %569 to i8*
  br label %571

571:                                              ; preds = %566, %552, %542
  %572 = phi i8* [ %570, %566 ], [ %548, %552 ], [ %548, %542 ]
  %573 = load i64, i64* %494, align 8
  %574 = add i64 %573, -1
  store i64 %574, i64* %494, align 8
  %575 = icmp eq i64 %574, 0
  %576 = load i64, i64* %262, align 8
  br i1 %575, label %612, label %577

577:                                              ; preds = %571, %606
  %578 = phi i64 [ %611, %606 ], [ %576, %571 ]
  %579 = phi i8* [ %607, %606 ], [ %572, %571 ]
  %580 = lshr i64 %578, 32
  %581 = trunc i64 %580 to i8
  %582 = add i8 %581, -1
  %583 = getelementptr inbounds i8, i8* %579, i64 1
  store i8 %582, i8* %579, align 1
  store i8* %583, i8** %496, align 8
  %584 = load i8*, i8** %497, align 8
  %585 = icmp eq i8* %583, %584
  %586 = ptrtoint i8* %583 to i64
  br i1 %585, label %587, label %606

587:                                              ; preds = %577
  %588 = load i32, i32* %498, align 8
  %589 = icmp eq i32 %588, 0
  br i1 %589, label %590, label %606

590:                                              ; preds = %587
  %591 = load i8*, i8** %500, align 8
  %592 = ptrtoint i8* %591 to i64
  %593 = sub i64 %586, %592
  %594 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %501, align 8
  %595 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %594, i64 0, i32 0
  %596 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %595, align 8
  %597 = bitcast %struct.ISeqOutStream* %594 to i8*
  %598 = tail call i64 %596(i8* %597, i8* %591, i64 %593) #6
  %599 = icmp eq i64 %593, %598
  br i1 %599, label %601, label %600

600:                                              ; preds = %590
  store i32 9, i32* %498, align 8
  br label %601

601:                                              ; preds = %600, %590
  %602 = load i64, i64* %502, align 8
  %603 = add i64 %602, %593
  store i64 %603, i64* %502, align 8
  %604 = load i64, i64* %503, align 8
  store i64 %604, i64* %499, align 8
  %605 = inttoptr i64 %604 to i8*
  br label %606

606:                                              ; preds = %601, %587, %577
  %607 = phi i8* [ %605, %601 ], [ %583, %587 ], [ %583, %577 ]
  %608 = load i64, i64* %494, align 8
  %609 = add i64 %608, -1
  store i64 %609, i64* %494, align 8
  %610 = icmp eq i64 %609, 0
  %611 = load i64, i64* %262, align 8
  br i1 %610, label %612, label %577, !llvm.loop !44

612:                                              ; preds = %606, %571
  %613 = phi i64 [ %576, %571 ], [ %611, %606 ]
  %614 = trunc i64 %613 to i32
  %615 = lshr i32 %614, 24
  %616 = trunc i32 %615 to i8
  store i8 %616, i8* %495, align 4
  br label %617

617:                                              ; preds = %612, %539
  %618 = phi i64 [ %534, %539 ], [ %613, %612 ]
  %619 = phi i64 [ %541, %539 ], [ 1, %612 ]
  store i64 %619, i64* %494, align 8
  %620 = shl i64 %618, 8
  %621 = and i64 %620, 4294967040
  store i64 %621, i64* %262, align 8
  br label %622

622:                                              ; preds = %617, %528
  %623 = shl i32 %505, 1
  %624 = or i32 %509, %623
  %625 = icmp eq i32 %507, 0
  br i1 %625, label %871, label %504

626:                                              ; preds = %374
  %627 = zext i32 %380 to i64
  %628 = load i64, i64* %262, align 8
  %629 = add i64 %628, %627
  store i64 %629, i64* %262, align 8
  %630 = sub i32 %375, %380
  store i32 %630, i32* %10, align 8
  %631 = lshr i32 %378, 5
  %632 = sub i32 %378, %631
  store i32 %632, i32* %377, align 4
  %633 = load i32, i32* %10, align 8
  %634 = icmp ult i32 %633, 16777216
  br i1 %634, label %635, label %737

635:                                              ; preds = %626
  %636 = shl i32 %633, 8
  store i32 %636, i32* %10, align 8
  %637 = load i64, i64* %262, align 8
  %638 = trunc i64 %637 to i32
  %639 = icmp ult i32 %638, -16777216
  %640 = icmp ugt i64 %637, 4294967295
  %641 = or i1 %640, %639
  br i1 %641, label %646, label %642

642:                                              ; preds = %635
  %643 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 3
  %644 = load i64, i64* %643, align 8
  %645 = add i64 %644, 1
  br label %731

646:                                              ; preds = %635
  %647 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 1
  %648 = load i8, i8* %647, align 4
  %649 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 4
  %650 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 5
  %651 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 9
  %652 = bitcast i8** %649 to i64*
  %653 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 6
  %654 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 7
  %655 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 8
  %656 = bitcast i8** %653 to i64*
  %657 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 3
  %658 = load i8*, i8** %649, align 8
  %659 = lshr i64 %637, 32
  %660 = trunc i64 %659 to i8
  %661 = add i8 %648, %660
  %662 = getelementptr inbounds i8, i8* %658, i64 1
  store i8 %661, i8* %658, align 1
  store i8* %662, i8** %649, align 8
  %663 = load i8*, i8** %650, align 8
  %664 = icmp eq i8* %662, %663
  %665 = ptrtoint i8* %662 to i64
  br i1 %664, label %666, label %685

666:                                              ; preds = %646
  %667 = load i32, i32* %651, align 8
  %668 = icmp eq i32 %667, 0
  br i1 %668, label %669, label %685

669:                                              ; preds = %666
  %670 = load i8*, i8** %653, align 8
  %671 = ptrtoint i8* %670 to i64
  %672 = sub i64 %665, %671
  %673 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %654, align 8
  %674 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %673, i64 0, i32 0
  %675 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %674, align 8
  %676 = bitcast %struct.ISeqOutStream* %673 to i8*
  %677 = tail call i64 %675(i8* %676, i8* %670, i64 %672) #6
  %678 = icmp eq i64 %672, %677
  br i1 %678, label %680, label %679

679:                                              ; preds = %669
  store i32 9, i32* %651, align 8
  br label %680

680:                                              ; preds = %679, %669
  %681 = load i64, i64* %655, align 8
  %682 = add i64 %681, %672
  store i64 %682, i64* %655, align 8
  %683 = load i64, i64* %656, align 8
  store i64 %683, i64* %652, align 8
  %684 = inttoptr i64 %683 to i8*
  br label %685

685:                                              ; preds = %680, %666, %646
  %686 = phi i8* [ %684, %680 ], [ %662, %666 ], [ %662, %646 ]
  %687 = load i64, i64* %657, align 8
  %688 = add i64 %687, -1
  store i64 %688, i64* %657, align 8
  %689 = icmp eq i64 %688, 0
  %690 = load i64, i64* %262, align 8
  br i1 %689, label %726, label %691

691:                                              ; preds = %685, %720
  %692 = phi i64 [ %725, %720 ], [ %690, %685 ]
  %693 = phi i8* [ %721, %720 ], [ %686, %685 ]
  %694 = lshr i64 %692, 32
  %695 = trunc i64 %694 to i8
  %696 = add i8 %695, -1
  %697 = getelementptr inbounds i8, i8* %693, i64 1
  store i8 %696, i8* %693, align 1
  store i8* %697, i8** %649, align 8
  %698 = load i8*, i8** %650, align 8
  %699 = icmp eq i8* %697, %698
  %700 = ptrtoint i8* %697 to i64
  br i1 %699, label %701, label %720

701:                                              ; preds = %691
  %702 = load i32, i32* %651, align 8
  %703 = icmp eq i32 %702, 0
  br i1 %703, label %704, label %720

704:                                              ; preds = %701
  %705 = load i8*, i8** %653, align 8
  %706 = ptrtoint i8* %705 to i64
  %707 = sub i64 %700, %706
  %708 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %654, align 8
  %709 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %708, i64 0, i32 0
  %710 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %709, align 8
  %711 = bitcast %struct.ISeqOutStream* %708 to i8*
  %712 = tail call i64 %710(i8* %711, i8* %705, i64 %707) #6
  %713 = icmp eq i64 %707, %712
  br i1 %713, label %715, label %714

714:                                              ; preds = %704
  store i32 9, i32* %651, align 8
  br label %715

715:                                              ; preds = %714, %704
  %716 = load i64, i64* %655, align 8
  %717 = add i64 %716, %707
  store i64 %717, i64* %655, align 8
  %718 = load i64, i64* %656, align 8
  store i64 %718, i64* %652, align 8
  %719 = inttoptr i64 %718 to i8*
  br label %720

720:                                              ; preds = %715, %701, %691
  %721 = phi i8* [ %719, %715 ], [ %697, %701 ], [ %697, %691 ]
  %722 = load i64, i64* %657, align 8
  %723 = add i64 %722, -1
  store i64 %723, i64* %657, align 8
  %724 = icmp eq i64 %723, 0
  %725 = load i64, i64* %262, align 8
  br i1 %724, label %726, label %691, !llvm.loop !45

726:                                              ; preds = %720, %685
  %727 = phi i64 [ %690, %685 ], [ %725, %720 ]
  %728 = trunc i64 %727 to i32
  %729 = lshr i32 %728, 24
  %730 = trunc i32 %729 to i8
  store i8 %730, i8* %647, align 4
  br label %731

731:                                              ; preds = %726, %642
  %732 = phi i64 [ %637, %642 ], [ %727, %726 ]
  %733 = phi i64 [ %645, %642 ], [ 1, %726 ]
  %734 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 3
  store i64 %733, i64* %734, align 8
  %735 = shl i64 %732, 8
  %736 = and i64 %735, 4294967040
  store i64 %736, i64* %262, align 8
  br label %737

737:                                              ; preds = %731, %626
  %738 = add i32 %2, -16
  %739 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 3
  %740 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 1
  %741 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 4
  %742 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 5
  %743 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 9
  %744 = bitcast i8** %741 to i64*
  %745 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 6
  %746 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 7
  %747 = getelementptr inbounds %struct.CRangeEnc, %struct.CRangeEnc* %1, i64 0, i32 8
  %748 = bitcast i8** %745 to i64*
  br label %749

749:                                              ; preds = %867, %737
  %750 = phi i32 [ 1, %737 ], [ %869, %867 ]
  %751 = phi i32 [ 8, %737 ], [ %752, %867 ]
  %752 = add nsw i32 %751, -1
  %753 = lshr i32 %738, %752
  %754 = and i32 %753, 1
  %755 = zext i32 %750 to i64
  %756 = getelementptr inbounds %struct.CLenPriceEnc, %struct.CLenPriceEnc* %0, i64 0, i32 0, i32 4, i64 %755
  %757 = load i32, i32* %756, align 4
  %758 = load i32, i32* %10, align 8
  %759 = lshr i32 %758, 11
  %760 = mul i32 %759, %757
  %761 = icmp eq i32 %754, 0
  br i1 %761, label %762, label %766

762:                                              ; preds = %749
  store i32 %760, i32* %10, align 8
  %763 = sub i32 2048, %757
  %764 = lshr i32 %763, 5
  %765 = add i32 %764, %757
  br label %773

766:                                              ; preds = %749
  %767 = zext i32 %760 to i64
  %768 = load i64, i64* %262, align 8
  %769 = add i64 %768, %767
  store i64 %769, i64* %262, align 8
  %770 = sub i32 %758, %760
  store i32 %770, i32* %10, align 8
  %771 = lshr i32 %757, 5
  %772 = sub i32 %757, %771
  br label %773

773:                                              ; preds = %766, %762
  %774 = phi i32 [ %765, %762 ], [ %772, %766 ]
  store i32 %774, i32* %756, align 4
  %775 = load i32, i32* %10, align 8
  %776 = icmp ult i32 %775, 16777216
  br i1 %776, label %777, label %867

777:                                              ; preds = %773
  %778 = shl i32 %775, 8
  store i32 %778, i32* %10, align 8
  %779 = load i64, i64* %262, align 8
  %780 = trunc i64 %779 to i32
  %781 = icmp ult i32 %780, -16777216
  %782 = icmp ugt i64 %779, 4294967295
  %783 = or i1 %782, %781
  br i1 %783, label %787, label %784

784:                                              ; preds = %777
  %785 = load i64, i64* %739, align 8
  %786 = add i64 %785, 1
  br label %862

787:                                              ; preds = %777
  %788 = load i8, i8* %740, align 4
  %789 = load i8*, i8** %741, align 8
  %790 = lshr i64 %779, 32
  %791 = trunc i64 %790 to i8
  %792 = add i8 %788, %791
  %793 = getelementptr inbounds i8, i8* %789, i64 1
  store i8 %792, i8* %789, align 1
  store i8* %793, i8** %741, align 8
  %794 = load i8*, i8** %742, align 8
  %795 = icmp eq i8* %793, %794
  %796 = ptrtoint i8* %793 to i64
  br i1 %795, label %797, label %816

797:                                              ; preds = %787
  %798 = load i32, i32* %743, align 8
  %799 = icmp eq i32 %798, 0
  br i1 %799, label %800, label %816

800:                                              ; preds = %797
  %801 = load i8*, i8** %745, align 8
  %802 = ptrtoint i8* %801 to i64
  %803 = sub i64 %796, %802
  %804 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %746, align 8
  %805 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %804, i64 0, i32 0
  %806 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %805, align 8
  %807 = bitcast %struct.ISeqOutStream* %804 to i8*
  %808 = tail call i64 %806(i8* %807, i8* %801, i64 %803) #6
  %809 = icmp eq i64 %803, %808
  br i1 %809, label %811, label %810

810:                                              ; preds = %800
  store i32 9, i32* %743, align 8
  br label %811

811:                                              ; preds = %810, %800
  %812 = load i64, i64* %747, align 8
  %813 = add i64 %812, %803
  store i64 %813, i64* %747, align 8
  %814 = load i64, i64* %748, align 8
  store i64 %814, i64* %744, align 8
  %815 = inttoptr i64 %814 to i8*
  br label %816

816:                                              ; preds = %811, %797, %787
  %817 = phi i8* [ %815, %811 ], [ %793, %797 ], [ %793, %787 ]
  %818 = load i64, i64* %739, align 8
  %819 = add i64 %818, -1
  store i64 %819, i64* %739, align 8
  %820 = icmp eq i64 %819, 0
  %821 = load i64, i64* %262, align 8
  br i1 %820, label %857, label %822

822:                                              ; preds = %816, %851
  %823 = phi i64 [ %856, %851 ], [ %821, %816 ]
  %824 = phi i8* [ %852, %851 ], [ %817, %816 ]
  %825 = lshr i64 %823, 32
  %826 = trunc i64 %825 to i8
  %827 = add i8 %826, -1
  %828 = getelementptr inbounds i8, i8* %824, i64 1
  store i8 %827, i8* %824, align 1
  store i8* %828, i8** %741, align 8
  %829 = load i8*, i8** %742, align 8
  %830 = icmp eq i8* %828, %829
  %831 = ptrtoint i8* %828 to i64
  br i1 %830, label %832, label %851

832:                                              ; preds = %822
  %833 = load i32, i32* %743, align 8
  %834 = icmp eq i32 %833, 0
  br i1 %834, label %835, label %851

835:                                              ; preds = %832
  %836 = load i8*, i8** %745, align 8
  %837 = ptrtoint i8* %836 to i64
  %838 = sub i64 %831, %837
  %839 = load %struct.ISeqOutStream*, %struct.ISeqOutStream** %746, align 8
  %840 = getelementptr inbounds %struct.ISeqOutStream, %struct.ISeqOutStream* %839, i64 0, i32 0
  %841 = load i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)** %840, align 8
  %842 = bitcast %struct.ISeqOutStream* %839 to i8*
  %843 = tail call i64 %841(i8* %842, i8* %836, i64 %838) #6
  %844 = icmp eq i64 %838, %843
  br i1 %844, label %846, label %845

845:                                              ; preds = %835
  store i32 9, i32* %743, align 8
  br label %846

846:                                              ; preds = %845, %835
  %847 = load i64, i64* %747, align 8
  %848 = add i64 %847, %838
  store i64 %848, i64* %747, align 8
  %849 = load i64, i64* %748, align 8
  store i64 %849, i64* %744, align 8
  %850 = inttoptr i64 %849 to i8*
  br label %851

851:                                              ; preds = %846, %832, %822
  %852 = phi i8* [ %850, %846 ], [ %828, %832 ], [ %828, %822 ]
  %853 = load i64, i64* %739, align 8
  %854 = add i64 %853, -1
  store i64 %854, i64* %739, align 8
  %855 = icmp eq i64 %854, 0
  %856 = load i64, i64* %262, align 8
  br i1 %855, label %857, label %822, !llvm.loop !46

857:                                              ; preds = %851, %816
  %858 = phi i64 [ %821, %816 ], [ %856, %851 ]
  %859 = trunc i64 %858 to i32
  %860 = lshr i32 %859, 24
  %861 = trunc i32 %860 to i8
  store i8 %861, i8* %740, align 4
  br label %862

862:                                              ; preds = %857, %784
  %863 = phi i64 [ %779, %784 ], [ %858, %857 ]
  %864 = phi i64 [ %786, %784 ], [ 1, %857 ]
  store i64 %864, i64* %739, align 8
  %865 = shl i64 %863, 8
  %866 = and i64 %865, 4294967040
  store i64 %866, i64* %262, align 8
  br label %867

867:                                              ; preds = %862, %773
  %868 = shl i32 %750, 1
  %869 = or i32 %754, %868
  %870 = icmp eq i32 %752, 0
  br i1 %870, label %871, label %749

871:                                              ; preds = %867, %622, %256
  %872 = icmp eq i32 %4, 0
  br i1 %872, label %880, label %873

873:                                              ; preds = %871
  %874 = zext i32 %3 to i64
  %875 = getelementptr inbounds %struct.CLenPriceEnc, %struct.CLenPriceEnc* %0, i64 0, i32 3, i64 %874
  %876 = load i32, i32* %875, align 4
  %877 = add i32 %876, -1
  store i32 %877, i32* %875, align 4
  %878 = icmp eq i32 %877, 0
  br i1 %878, label %879, label %880

879:                                              ; preds = %873
  tail call fastcc void @LenPriceEnc_UpdateTable(%struct.CLenPriceEnc* %0, i32 %3, i32* %5)
  br label %880

880:                                              ; preds = %871, %873, %879
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !7, !3}
!10 = distinct !{!10, !5}
!11 = distinct !{!11, !5}
!12 = distinct !{!12, !5}
!13 = distinct !{!13, !5}
!14 = distinct !{!14, !5}
!15 = distinct !{!15, !5}
!16 = distinct !{!16, !5}
!17 = distinct !{!17, !5}
!18 = distinct !{!18, !5}
!19 = distinct !{!19, !5}
!20 = distinct !{!20, !5}
!21 = distinct !{!21, !5}
!22 = distinct !{!22, !5}
!23 = distinct !{!23, !5}
!24 = distinct !{!24, !5}
!25 = distinct !{!25, !5}
!26 = distinct !{!26, !5}
!27 = distinct !{!27, !5}
!28 = distinct !{!28, !5}
!29 = distinct !{!29, !5}
!30 = distinct !{!30, !5}
!31 = distinct !{!31, !5}
!32 = distinct !{!32, !5}
!33 = distinct !{!33, !5}
!34 = distinct !{!34, !5}
!35 = distinct !{!35, !5}
!36 = distinct !{!36, !5}
!37 = distinct !{!37, !5}
!38 = distinct !{!38, !5}
!39 = distinct !{!39, !5}
!40 = distinct !{!40, !5}
!41 = distinct !{!41, !5}
!42 = distinct !{!42, !5}
!43 = distinct !{!43, !5}
!44 = distinct !{!44, !5}
!45 = distinct !{!45, !5}
!46 = distinct !{!46, !5}
