; ModuleID = '../../net/http/http_chunked_decoder.cc'
source_filename = "../../net/http/http_chunked_decoder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.net::HttpChunkedDecoder" = type { i64, %"class.std::__1::basic_string", i8, i8, i8, i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@_ZN3net18HttpChunkedDecoder14kMaxLineBufLenE = hidden local_unnamed_addr constant i64 16384, align 8
@.str = private unnamed_addr constant [23 x i8] c"0123456789abcdefABCDEF\00", align 1

@_ZN3net18HttpChunkedDecoderC1Ev = hidden unnamed_addr alias void (%"class.net::HttpChunkedDecoder"*), void (%"class.net::HttpChunkedDecoder"*)* @_ZN3net18HttpChunkedDecoderC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net18HttpChunkedDecoderC2Ev(%"class.net::HttpChunkedDecoder"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::HttpChunkedDecoder", %"class.net::HttpChunkedDecoder"* %0, i64 0, i32 5
  store i32 0, i32* %2, align 4
  %3 = bitcast %"class.net::HttpChunkedDecoder"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 35, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3net18HttpChunkedDecoder9FilterBufEPci(%"class.net::HttpChunkedDecoder"*, i8*, i32) local_unnamed_addr #0 align 2 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %52

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.net::HttpChunkedDecoder", %"class.net::HttpChunkedDecoder"* %0, i64 0, i32 0
  %7 = getelementptr inbounds %"class.net::HttpChunkedDecoder", %"class.net::HttpChunkedDecoder"* %0, i64 0, i32 4
  %8 = getelementptr inbounds %"class.net::HttpChunkedDecoder", %"class.net::HttpChunkedDecoder"* %0, i64 0, i32 2
  br label %9

9:                                                ; preds = %5, %30
  %10 = phi i32 [ 0, %5 ], [ %26, %30 ]
  %11 = phi i32 [ %2, %5 ], [ %22, %30 ]
  %12 = phi i8* [ %1, %5 ], [ %27, %30 ]
  %13 = load i64, i64* %6, align 8
  %14 = icmp sgt i64 %13, 0
  br i1 %14, label %15, label %32

15:                                               ; preds = %46, %9
  %16 = phi i32 [ %11, %9 ], [ %44, %46 ]
  %17 = phi i64 [ %13, %9 ], [ %50, %46 ]
  %18 = sext i32 %16 to i64
  %19 = icmp sgt i64 %17, %18
  %20 = select i1 %19, i64 %18, i64 %17
  %21 = trunc i64 %20 to i32
  %22 = sub nsw i32 %16, %21
  %23 = shl i64 %20, 32
  %24 = ashr exact i64 %23, 32
  %25 = sub nsw i64 %17, %24
  store i64 %25, i64* %6, align 8
  %26 = add nsw i32 %10, %21
  %27 = getelementptr inbounds i8, i8* %12, i64 %24
  %28 = icmp eq i64 %25, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %15
  store i8 1, i8* %8, align 8
  br label %30

30:                                               ; preds = %29, %15
  %31 = icmp sgt i32 %22, 0
  br i1 %31, label %9, label %52

32:                                               ; preds = %9, %46
  %33 = phi i32 [ %44, %46 ], [ %11, %9 ]
  %34 = load i8, i8* %7, align 2, !range !2
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %40, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"class.net::HttpChunkedDecoder", %"class.net::HttpChunkedDecoder"* %0, i64 0, i32 5
  %38 = load i32, i32* %37, align 4
  %39 = add nsw i32 %38, %33
  store i32 %39, i32* %37, align 4
  br label %52

40:                                               ; preds = %32
  %41 = tail call i32 @_ZN3net18HttpChunkedDecoder21ScanForChunkRemainingEPKci(%"class.net::HttpChunkedDecoder"* %0, i8* %12, i32 %33)
  %42 = icmp slt i32 %41, 0
  br i1 %42, label %52, label %43

43:                                               ; preds = %40
  %44 = sub nsw i32 %33, %41
  %45 = icmp sgt i32 %44, 0
  br i1 %45, label %46, label %52

46:                                               ; preds = %43
  %47 = sext i32 %41 to i64
  %48 = getelementptr inbounds i8, i8* %12, i64 %47
  %49 = sext i32 %44 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %48, i64 %49, i1 false)
  %50 = load i64, i64* %6, align 8
  %51 = icmp sgt i64 %50, 0
  br i1 %51, label %15, label %32

52:                                               ; preds = %30, %43, %40, %3, %36
  %53 = phi i32 [ %10, %36 ], [ 0, %3 ], [ %10, %43 ], [ %41, %40 ], [ %26, %30 ]
  ret i32 %53
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3net18HttpChunkedDecoder21ScanForChunkRemainingEPKci(%"class.net::HttpChunkedDecoder"*, i8*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca i64, align 8
  %5 = icmp eq i32 %2, 0
  br i1 %5, label %125, label %6

6:                                                ; preds = %3
  %7 = sext i32 %2 to i64
  %8 = tail call i8* @memchr(i8* %1, i32 10, i64 %7) #4
  %9 = icmp eq i8* %8, null
  br i1 %9, label %125, label %10

10:                                               ; preds = %6
  %11 = ptrtoint i8* %8 to i64
  %12 = ptrtoint i8* %1 to i64
  %13 = sub i64 %11, %12
  %14 = icmp eq i64 %13, -1
  br i1 %14, label %125, label %15

15:                                               ; preds = %10
  %16 = trunc i64 %13 to i32
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %27, label %18

18:                                               ; preds = %15
  %19 = shl i64 %13, 32
  %20 = add i64 %19, -4294967296
  %21 = ashr exact i64 %20, 32
  %22 = getelementptr inbounds i8, i8* %1, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = icmp eq i8 %23, 13
  %25 = zext i1 %24 to i32
  %26 = sub nuw i32 %16, %25
  br label %27

27:                                               ; preds = %18, %15
  %28 = phi i32 [ 0, %15 ], [ %26, %18 ]
  %29 = add nsw i32 %16, 1
  %30 = getelementptr inbounds %"class.net::HttpChunkedDecoder", %"class.net::HttpChunkedDecoder"* %0, i64 0, i32 1
  %31 = bitcast %"class.std::__1::basic_string"* %30 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %32 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %31, i64 0, i32 1, i32 0
  %33 = load i8, i8* %32, align 1
  %34 = icmp slt i8 %33, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %27
  %36 = getelementptr inbounds %"class.net::HttpChunkedDecoder", %"class.net::HttpChunkedDecoder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  br label %40

38:                                               ; preds = %27
  %39 = zext i8 %33 to i64
  br label %40

40:                                               ; preds = %35, %38
  %41 = phi i64 [ %37, %35 ], [ %39, %38 ]
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %60, label %43

43:                                               ; preds = %40
  %44 = sext i32 %28 to i64
  %45 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %30, i8* %1, i64 %44) #4
  %46 = load i8, i8* %32, align 1
  %47 = icmp slt i8 %46, 0
  br i1 %47, label %48, label %53

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %30, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  %51 = getelementptr inbounds %"class.net::HttpChunkedDecoder", %"class.net::HttpChunkedDecoder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %52 = load i64, i64* %51, align 8
  br label %56

53:                                               ; preds = %43
  %54 = bitcast %"class.std::__1::basic_string"* %30 to i8*
  %55 = zext i8 %46 to i64
  br label %56

56:                                               ; preds = %48, %53
  %57 = phi i8* [ %50, %48 ], [ %54, %53 ]
  %58 = phi i64 [ %52, %48 ], [ %55, %53 ]
  %59 = trunc i64 %58 to i32
  br label %60

60:                                               ; preds = %56, %40
  %61 = phi i8* [ %1, %40 ], [ %57, %56 ]
  %62 = phi i32 [ %28, %40 ], [ %59, %56 ]
  %63 = getelementptr inbounds %"class.net::HttpChunkedDecoder", %"class.net::HttpChunkedDecoder"* %0, i64 0, i32 3
  %64 = load i8, i8* %63, align 1, !range !2
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %70, label %66

66:                                               ; preds = %60
  %67 = icmp sgt i32 %62, 0
  br i1 %67, label %116, label %68

68:                                               ; preds = %66
  %69 = getelementptr inbounds %"class.net::HttpChunkedDecoder", %"class.net::HttpChunkedDecoder"* %0, i64 0, i32 4
  store i8 1, i8* %69, align 2
  br label %116

70:                                               ; preds = %60
  %71 = getelementptr inbounds %"class.net::HttpChunkedDecoder", %"class.net::HttpChunkedDecoder"* %0, i64 0, i32 2
  %72 = load i8, i8* %71, align 8, !range !2
  %73 = icmp eq i8 %72, 0
  %74 = icmp sgt i32 %62, 0
  br i1 %73, label %77, label %75

75:                                               ; preds = %70
  br i1 %74, label %149, label %76

76:                                               ; preds = %75
  store i8 0, i8* %71, align 8
  br label %116

77:                                               ; preds = %70
  br i1 %74, label %78, label %149

78:                                               ; preds = %77
  %79 = sext i32 %62 to i64
  %80 = tail call i8* @memchr(i8* %61, i32 59, i64 %79) #4
  %81 = icmp eq i8* %80, null
  br i1 %81, label %90, label %82

82:                                               ; preds = %78
  %83 = ptrtoint i8* %80 to i64
  %84 = ptrtoint i8* %61 to i64
  %85 = sub i64 %83, %84
  %86 = icmp eq i64 %85, -1
  br i1 %86, label %90, label %87

87:                                               ; preds = %82
  %88 = shl i64 %85, 32
  %89 = ashr exact i64 %88, 32
  br label %90

90:                                               ; preds = %82, %78, %87
  %91 = phi i64 [ %89, %87 ], [ %79, %78 ], [ %79, %82 ]
  %92 = getelementptr inbounds %"class.net::HttpChunkedDecoder", %"class.net::HttpChunkedDecoder"* %0, i64 0, i32 0
  br label %93

93:                                               ; preds = %96, %90
  %94 = phi i64 [ %97, %96 ], [ %91, %90 ]
  %95 = icmp sgt i64 %94, 0
  br i1 %95, label %96, label %101

96:                                               ; preds = %93
  %97 = add nsw i64 %94, -1
  %98 = getelementptr inbounds i8, i8* %61, i64 %97
  %99 = load i8, i8* %98, align 1
  %100 = icmp eq i8 %99, 32
  br i1 %100, label %93, label %101

101:                                              ; preds = %96, %93
  %102 = shl i64 %94, 32
  %103 = ashr exact i64 %102, 32
  %104 = tail call i64 @_ZN4base8internal17find_first_not_ofENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES5_m(i8* %61, i64 %103, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i64 22, i64 0) #4
  %105 = icmp eq i64 %104, -1
  br i1 %105, label %106, label %149

106:                                              ; preds = %101
  %107 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %107) #4
  store i64 -6148914691236517206, i64* %4, align 8
  %108 = call zeroext i1 @_ZN4base16HexStringToInt64ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPl(i8* %61, i64 %103, i64* nonnull %4) #4
  %109 = load i64, i64* %4, align 8
  %110 = icmp sgt i64 %109, -1
  %111 = and i1 %108, %110
  br i1 %111, label %113, label %112

112:                                              ; preds = %106
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %107) #4
  br label %149

113:                                              ; preds = %106
  store i64 %109, i64* %92, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %107) #4
  %114 = icmp eq i64 %109, 0
  br i1 %114, label %115, label %116

115:                                              ; preds = %113
  store i8 1, i8* %63, align 1
  br label %116

116:                                              ; preds = %115, %113, %76, %68, %66
  %117 = load i8, i8* %32, align 1
  %118 = icmp slt i8 %117, 0
  br i1 %118, label %119, label %123

119:                                              ; preds = %116
  %120 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %30, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %121 = load i8*, i8** %120, align 8
  store i8 0, i8* %121, align 1
  %122 = getelementptr inbounds %"class.net::HttpChunkedDecoder", %"class.net::HttpChunkedDecoder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %122, align 8
  br label %149

123:                                              ; preds = %116
  %124 = bitcast %"class.std::__1::basic_string"* %30 to i8*
  store i8 0, i8* %124, align 1
  store i8 0, i8* %32, align 1
  br label %149

125:                                              ; preds = %3, %6, %10
  %126 = add nsw i32 %2, -1
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds i8, i8* %1, i64 %127
  %129 = load i8, i8* %128, align 1
  %130 = icmp eq i8 %129, 13
  %131 = select i1 %130, i32 %126, i32 %2
  %132 = getelementptr inbounds %"class.net::HttpChunkedDecoder", %"class.net::HttpChunkedDecoder"* %0, i64 0, i32 1
  %133 = bitcast %"class.std::__1::basic_string"* %132 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %134 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %133, i64 0, i32 1, i32 0
  %135 = load i8, i8* %134, align 1
  %136 = icmp slt i8 %135, 0
  br i1 %136, label %137, label %140

137:                                              ; preds = %125
  %138 = getelementptr inbounds %"class.net::HttpChunkedDecoder", %"class.net::HttpChunkedDecoder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %139 = load i64, i64* %138, align 8
  br label %142

140:                                              ; preds = %125
  %141 = zext i8 %135 to i64
  br label %142

142:                                              ; preds = %137, %140
  %143 = phi i64 [ %139, %137 ], [ %141, %140 ]
  %144 = sext i32 %131 to i64
  %145 = add i64 %143, %144
  %146 = icmp ugt i64 %145, 16384
  br i1 %146, label %149, label %147

147:                                              ; preds = %142
  %148 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %132, i8* %1, i64 %144) #4
  br label %149

149:                                              ; preds = %101, %123, %119, %112, %147, %142, %77, %75
  %150 = phi i32 [ -321, %75 ], [ -321, %77 ], [ -321, %142 ], [ %2, %147 ], [ -321, %112 ], [ %29, %119 ], [ %29, %123 ], [ -321, %101 ]
  ret i32 %150
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3net18HttpChunkedDecoder14ParseChunkSizeEPKciPl(i8*, i32, i64* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca i64, align 8
  %5 = sext i32 %1 to i64
  br label %6

6:                                                ; preds = %9, %3
  %7 = phi i64 [ %10, %9 ], [ %5, %3 ]
  %8 = icmp sgt i64 %7, 0
  br i1 %8, label %9, label %14

9:                                                ; preds = %6
  %10 = add nsw i64 %7, -1
  %11 = getelementptr inbounds i8, i8* %0, i64 %10
  %12 = load i8, i8* %11, align 1
  %13 = icmp eq i8 %12, 32
  br i1 %13, label %6, label %14

14:                                               ; preds = %6, %9
  %15 = shl i64 %7, 32
  %16 = ashr exact i64 %15, 32
  %17 = tail call i64 @_ZN4base8internal17find_first_not_ofENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES5_m(i8* %0, i64 %16, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i64 22, i64 0) #4
  %18 = icmp eq i64 %17, -1
  br i1 %18, label %19, label %28

19:                                               ; preds = %14
  %20 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #4
  store i64 -6148914691236517206, i64* %4, align 8
  %21 = call zeroext i1 @_ZN4base16HexStringToInt64ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPl(i8* %0, i64 %16, i64* nonnull %4) #4
  %22 = load i64, i64* %4, align 8
  %23 = icmp sgt i64 %22, -1
  %24 = and i1 %21, %23
  br i1 %24, label %25, label %26

25:                                               ; preds = %19
  store i64 %22, i64* %2, align 8
  br label %26

26:                                               ; preds = %19, %25
  %27 = phi i1 [ true, %25 ], [ false, %19 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #4
  br label %28

28:                                               ; preds = %14, %26
  %29 = phi i1 [ %27, %26 ], [ false, %14 ]
  ret i1 %29
}

declare zeroext i1 @_ZN4base16HexStringToInt64ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPl(i8*, i64, i64*) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #3

declare i64 @_ZN4base8internal17find_first_not_ofENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES5_m(i8*, i64, i8*, i64, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
