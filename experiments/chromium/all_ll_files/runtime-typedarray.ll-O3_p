; ModuleID = '../../v8/src/runtime/runtime-typedarray.cc'
source_filename = "../../v8/src/runtime/runtime-typedarray.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::__1::atomic.1133" = type { %"struct.std::__1::__atomic_base.1134" }
%"struct.std::__1::__atomic_base.1134" = type { %"struct.std::__1::__atomic_base.1135" }
%"struct.std::__1::__atomic_base.1135" = type { %"struct.std::__1::__cxx_atomic_impl.1136" }
%"struct.std::__1::__cxx_atomic_impl.1136" = type { %"struct.std::__1::__cxx_atomic_base_impl.1137" }
%"struct.std::__1::__cxx_atomic_base_impl.1137" = type { i32 }
%"class.v8::internal::ElementsAccessor" = type { i32 (...)** }
%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.645", %"class.std::__1::unique_ptr.666", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.676", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.815", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.828", {}*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.838", {}*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.849", %"struct.std::__1::atomic.152", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.924", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.967"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.975", i32, i8, i8, i32, i32, %"class.std::__1::vector.981", %"class.std::__1::vector.981", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.988", i64, %"class.std::__1::unordered_map.989", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.541", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.160", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.1045", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.1083", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, {}*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.1117", %"class.std::__1::vector.1121", %"class.std::__1::vector.1121", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map", %"struct.std::__1::atomic.19", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic.19", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic.19", i64, i64, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.29", %"class.std::__1::vector", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.146", %"class.std::__1::unique_ptr.146", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.161", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic.19", i64, i8, %"struct.std::__1::atomic.19", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.165", %"class.std::__1::vector.165", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.172", %"class.std::__1::unique_ptr.178", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.308", %"class.std::__1::unique_ptr.314", %"class.std::__1::unique_ptr.320", %"class.std::__1::unique_ptr.359", %"class.std::__1::unique_ptr.398", %"class.std::__1::unique_ptr.428", %"class.std::__1::unique_ptr.434", %"class.std::__1::unique_ptr.444", %"class.std::__1::unique_ptr.450", %"class.std::__1::unique_ptr.450", %"class.std::__1::unique_ptr.456", %"class.std::__1::unique_ptr.462", %"class.std::__1::unique_ptr.462", %"class.std::__1::unique_ptr.468", %"class.std::__1::unique_ptr.474", %"class.std::__1::shared_ptr.480", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.503", %"class.std::__1::unique_ptr.529", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.535", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.548", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set.330", i8, [7 x i8], %"class.std::__1::unordered_map.554", %"class.std::__1::unordered_map.580", %"class.std::__1::unordered_map.554", %"class.std::__1::unordered_map.604", %"class.std::__1::vector.632", i8, %"class.std::__1::unique_ptr.639", i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.2", %"class.std::__1::__compressed_pair.9", %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.16", [4 x i8] }>
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4", %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i64 }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { float }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.24" }
%"struct.std::__1::atomic.24" = type { %"struct.std::__1::__atomic_base.25" }
%"struct.std::__1::__atomic_base.25" = type { %"struct.std::__1::__atomic_base.26" }
%"struct.std::__1::__atomic_base.26" = type { %"struct.std::__1::__cxx_atomic_impl.27" }
%"struct.std::__1::__cxx_atomic_impl.27" = type { %"struct.std::__1::__cxx_atomic_base_impl.28" }
%"struct.std::__1::__cxx_atomic_base_impl.28" = type { i64 }
%"struct.std::__1::atomic.29" = type { %"struct.std::__1::__atomic_base.30" }
%"struct.std::__1::__atomic_base.30" = type { %"struct.std::__1::__cxx_atomic_impl.31" }
%"struct.std::__1::__cxx_atomic_impl.31" = type { %"struct.std::__1::__cxx_atomic_base_impl.32" }
%"struct.std::__1::__cxx_atomic_base_impl.32" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.33" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"struct.std::__1::pair"* }
%"class.v8::internal::NewSpace" = type { %"class.v8::internal::SpaceWithLinearArea", %"class.v8::base::Mutex", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.v8::internal::SemiSpace", %"class.v8::internal::SemiSpace", %"class.v8::internal::VirtualMemory", %"class.std::__1::vector.103" }
%"class.v8::internal::SpaceWithLinearArea" = type { %"class.v8::internal::Space", %"class.v8::internal::LinearAllocationArea", [3 x i64] }
%"class.v8::internal::Space" = type { %"class.v8::internal::BaseSpace", %"class.v8::internal::AllocationCounter", %"class.v8::internal::heap::List", %"struct.std::__1::atomic.19"*, %"class.std::__1::unique_ptr.97" }
%"class.v8::internal::BaseSpace" = type { i32 (...)**, %"class.v8::internal::Heap"*, i32, %"struct.std::__1::atomic.19", i64 }
%"class.v8::internal::AllocationCounter" = type <{ %"class.std::__1::vector.38", %"class.std::__1::vector.38", %"class.std::__1::unordered_set", i8, [7 x i8], i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.38" = type { %"class.std::__1::__vector_base.39" }
%"class.std::__1::__vector_base.39" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"class.std::__1::__compressed_pair.40" }
%"struct.v8::internal::AllocationCounter::AllocationObserverCounter" = type { %"class.v8::internal::AllocationObserver"*, i64, i64 }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.45" }
%"class.std::__1::__hash_table.45" = type <{ %"class.std::__1::unique_ptr.46", %"class.std::__1::__compressed_pair.56", %"class.std::__1::__compressed_pair.61", %"class.std::__1::__compressed_pair.63", [4 x i8] }>
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48", %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"struct.std::__1::__hash_node_base.49"** }
%"struct.std::__1::__hash_node_base.49" = type { %"struct.std::__1::__hash_node_base.49"* }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.std::__1::__bucket_list_deallocator.51" }
%"class.std::__1::__bucket_list_deallocator.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"struct.std::__1::__hash_node_base.49" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::heap::List" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::MemoryChunk" = type { %"class.v8::internal::BasicMemoryChunk", [2 x %"class.v8::internal::SlotSet"*], %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.24", %"class.v8::internal::SlotSet"*, [2 x %"class.v8::internal::TypedSlotSet"*], [2 x %"class.std::__1::set"*], %"class.v8::base::Mutex"*, %"struct.std::__1::atomic.86", %"class.v8::base::Mutex"*, i64, [2 x %"struct.std::__1::atomic.19"], %"class.v8::internal::heap::ListNode", %"class.v8::internal::FreeListCategory"**, %"struct.std::__1::atomic.24", %"class.v8::internal::Bitmap"*, %"class.v8::internal::CodeObjectRegistry"*, %"class.v8::internal::PossiblyEmptyBuckets" }
%"class.v8::internal::BasicMemoryChunk" = type { i64, i64, %"class.v8::internal::Heap"*, i64, i64, i64, i64, %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.68", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.68" = type { %"struct.std::__1::__atomic_base.69" }
%"struct.std::__1::__atomic_base.69" = type { %"struct.std::__1::__cxx_atomic_impl.70" }
%"struct.std::__1::__cxx_atomic_impl.70" = type { %"struct.std::__1::__cxx_atomic_base_impl.71" }
%"struct.std::__1::__cxx_atomic_base_impl.71" = type { %"class.v8::internal::BaseSpace"* }
%"class.v8::internal::SlotSet" = type { i8 }
%"class.v8::internal::TypedSlotSet" = type { %"class.v8::internal::TypedSlots", i64 }
%"class.v8::internal::TypedSlots" = type { i32 (...)**, %"struct.v8::internal::TypedSlots::Chunk"*, %"struct.v8::internal::TypedSlots::Chunk"* }
%"struct.v8::internal::TypedSlots::Chunk" = type { %"struct.v8::internal::TypedSlots::Chunk"*, %"class.std::__1::vector.72" }
%"class.std::__1::vector.72" = type { %"class.std::__1::__vector_base.73" }
%"class.std::__1::__vector_base.73" = type { %"struct.v8::internal::TypedSlots::TypedSlot"*, %"struct.v8::internal::TypedSlots::TypedSlot"*, %"class.std::__1::__compressed_pair.74" }
%"struct.v8::internal::TypedSlots::TypedSlot" = type { i32 }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"struct.v8::internal::TypedSlots::TypedSlot"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.79", %"class.std::__1::__compressed_pair.84" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::atomic.86" = type { %"struct.std::__1::__atomic_base.87" }
%"struct.std::__1::__atomic_base.87" = type { %"struct.std::__1::__cxx_atomic_impl.88" }
%"struct.std::__1::__cxx_atomic_impl.88" = type { %"struct.std::__1::__cxx_atomic_base_impl.89" }
%"struct.std::__1::__cxx_atomic_base_impl.89" = type { i64 }
%"class.v8::internal::heap::ListNode" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::FreeListCategory" = type { i32, i32, %"class.v8::internal::FreeSpace", %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"* }
%"class.v8::internal::FreeSpace" = type { %"class.v8::internal::TorqueGeneratedFreeSpace" }
%"class.v8::internal::TorqueGeneratedFreeSpace" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Bitmap" = type { i8 }
%"class.v8::internal::CodeObjectRegistry" = type <{ %"class.std::__1::vector.90", i8, [7 x i8] }>
%"class.std::__1::vector.90" = type { %"class.std::__1::__vector_base.91" }
%"class.std::__1::__vector_base.91" = type { i64*, i64*, %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { i64* }
%"class.v8::internal::PossiblyEmptyBuckets" = type { i64 }
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"class.v8::internal::FreeList"* }
%"class.v8::internal::FreeList" = type { i32 (...)**, i32, i32, i64, %"struct.std::__1::atomic.19", %"class.v8::internal::FreeListCategory"**, i64 }
%"class.v8::internal::LinearAllocationArea" = type { i64, i64, i64 }
%"class.v8::internal::SemiSpace" = type { %"class.v8::internal::Space", i64, i64, i64, i64, i64, i32, %"class.v8::internal::Page"* }
%"class.v8::internal::Page" = type { %"class.v8::internal::MemoryChunk" }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::vector.103" = type { %"class.std::__1::__vector_base.104" }
%"class.std::__1::__vector_base.104" = type { %"struct.std::__1::pair.105"*, %"struct.std::__1::pair.105"*, %"class.std::__1::__compressed_pair.106" }
%"struct.std::__1::pair.105" = type { i32, i64 }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"struct.std::__1::pair.105"* }
%"class.v8::internal::CodeSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::PagedSpace" = type { %"class.v8::internal::SpaceWithLinearArea", i32, i32, i64, %"class.v8::internal::AllocationStats", %"class.v8::base::Mutex", i64, i64 }
%"class.v8::internal::AllocationStats" = type { %"struct.std::__1::atomic.19", i64, %"struct.std::__1::atomic.19" }
%"class.v8::internal::OldLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace" }
%"class.v8::internal::LargeObjectSpace" = type { %"class.v8::internal::Space", %"struct.std::__1::atomic.19", i32, %"struct.std::__1::atomic.19", %"class.v8::base::Mutex", %"struct.std::__1::atomic.19" }
%"class.v8::internal::CodeLargeObjectSpace" = type { %"class.v8::internal::OldLargeObjectSpace", %"class.std::__1::unordered_map.111" }
%"class.std::__1::unordered_map.111" = type { %"class.std::__1::__hash_table.112" }
%"class.std::__1::__hash_table.112" = type <{ %"class.std::__1::unique_ptr.113", %"class.std::__1::__compressed_pair.123", %"class.std::__1::__compressed_pair.128", %"class.std::__1::__compressed_pair.133", [4 x i8] }>
%"class.std::__1::unique_ptr.113" = type { %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115", %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"struct.std::__1::__hash_node_base.116"** }
%"struct.std::__1::__hash_node_base.116" = type { %"struct.std::__1::__hash_node_base.116"* }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.std::__1::__bucket_list_deallocator.118" }
%"class.std::__1::__bucket_list_deallocator.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"struct.std::__1::__hash_node_base.116" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::NewLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace", i64 }
%"class.v8::internal::ReadOnlySpace" = type { %"class.v8::internal::BaseSpace", i8, %"class.v8::internal::AllocationStats", %"class.std::__1::vector.139", i64, i64, i8, i64, i64 }
%"class.std::__1::vector.139" = type { %"class.std::__1::__vector_base.140" }
%"class.std::__1::__vector_base.140" = type { %"class.v8::internal::ReadOnlyPage"**, %"class.v8::internal::ReadOnlyPage"**, %"class.std::__1::__compressed_pair.141" }
%"class.v8::internal::ReadOnlyPage" = type { %"class.v8::internal::BasicMemoryChunk" }
%"class.std::__1::__compressed_pair.141" = type { %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.142" = type { %"class.v8::internal::ReadOnlyPage"** }
%"class.v8::internal::OldSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::MapSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.std::__1::unique_ptr.146" = type { %"class.std::__1::__compressed_pair.147" }
%"class.std::__1::__compressed_pair.147" = type { %"struct.std::__1::__compressed_pair_elem.148" }
%"struct.std::__1::__compressed_pair_elem.148" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ConcurrentAllocator" = type { %"class.v8::internal::LocalHeap"*, %"class.v8::internal::PagedSpace"*, %"class.v8::internal::LocalAllocationBuffer" }
%"class.v8::internal::LocalAllocationBuffer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea" }
%"class.v8::internal::LocalHeap" = type { %"class.v8::internal::Heap"*, i8, %"struct.std::__1::atomic.1050", i8, i8, %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"*, %"class.std::__1::unique_ptr.1054", %"class.std::__1::unique_ptr.1060", %"class.std::__1::unique_ptr.474", %"class.std::__1::vector.1066", %"class.v8::internal::ConcurrentAllocator" }
%"struct.std::__1::atomic.1050" = type { %"struct.std::__1::__atomic_base.1051" }
%"struct.std::__1::__atomic_base.1051" = type { %"struct.std::__1::__cxx_atomic_impl.1052" }
%"struct.std::__1::__cxx_atomic_impl.1052" = type { %"struct.std::__1::__cxx_atomic_base_impl.1053" }
%"struct.std::__1::__cxx_atomic_base_impl.1053" = type { i32 }
%"class.std::__1::unique_ptr.1054" = type { %"class.std::__1::__compressed_pair.1055" }
%"class.std::__1::__compressed_pair.1055" = type { %"struct.std::__1::__compressed_pair_elem.1056" }
%"struct.std::__1::__compressed_pair_elem.1056" = type { %"class.v8::internal::LocalHandles"* }
%"class.v8::internal::LocalHandles" = type { %"struct.v8::internal::HandleScopeData", %"class.std::__1::vector.808" }
%"class.std::__1::vector.808" = type { %"class.std::__1::__vector_base.809" }
%"class.std::__1::__vector_base.809" = type { i64**, i64**, %"class.std::__1::__compressed_pair.810" }
%"class.std::__1::__compressed_pair.810" = type { %"struct.std::__1::__compressed_pair_elem.811" }
%"struct.std::__1::__compressed_pair_elem.811" = type { i64** }
%"class.std::__1::unique_ptr.1060" = type { %"class.std::__1::__compressed_pair.1061" }
%"class.std::__1::__compressed_pair.1061" = type { %"struct.std::__1::__compressed_pair_elem.1062" }
%"struct.std::__1::__compressed_pair_elem.1062" = type { %"class.v8::internal::PersistentHandles"* }
%"class.v8::internal::PersistentHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::vector.808", i64*, i64*, %"class.v8::internal::PersistentHandles"*, %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1066" = type { %"class.std::__1::__vector_base.1067" }
%"class.std::__1::__vector_base.1067" = type { %"struct.std::__1::pair.1068"*, %"struct.std::__1::pair.1068"*, %"class.std::__1::__compressed_pair.1069" }
%"struct.std::__1::pair.1068" = type opaque
%"class.std::__1::__compressed_pair.1069" = type { %"struct.std::__1::__compressed_pair_elem.1070" }
%"struct.std::__1::__compressed_pair_elem.1070" = type { %"struct.std::__1::pair.1068"* }
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.152", %"struct.std::__1::atomic.156", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic.19" }
%"struct.std::__1::atomic.156" = type { %"struct.std::__1::__atomic_base.157" }
%"struct.std::__1::__atomic_base.157" = type { %"struct.std::__1::__cxx_atomic_impl.158" }
%"struct.std::__1::__cxx_atomic_impl.158" = type { %"struct.std::__1::__cxx_atomic_base_impl.159" }
%"struct.std::__1::__cxx_atomic_base_impl.159" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic.19", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.160" }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"struct.std::__1::atomic.161" = type { %"struct.std::__1::__atomic_base.162" }
%"struct.std::__1::__atomic_base.162" = type { %"struct.std::__1::__cxx_atomic_impl.163" }
%"struct.std::__1::__cxx_atomic_impl.163" = type { %"struct.std::__1::__cxx_atomic_base_impl.164" }
%"struct.std::__1::__cxx_atomic_base_impl.164" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"struct.std::__1::atomic.19" = type { %"struct.std::__1::__atomic_base.20" }
%"struct.std::__1::__atomic_base.20" = type { %"struct.std::__1::__atomic_base.21" }
%"struct.std::__1::__atomic_base.21" = type { %"struct.std::__1::__cxx_atomic_impl.22" }
%"struct.std::__1::__cxx_atomic_impl.22" = type { %"struct.std::__1::__cxx_atomic_base_impl.23" }
%"struct.std::__1::__cxx_atomic_base_impl.23" = type { i64 }
%"class.std::__1::vector.165" = type { %"class.std::__1::__vector_base.166" }
%"class.std::__1::__vector_base.166" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.167" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type opaque
%"class.std::__1::unique_ptr.178" = type { %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::base::Mutex", %"class.v8::base::Semaphore", i8, i8, i8, i8, i8, i8, [2 x i8], %"class.v8::internal::MarkingWorklists", %"class.v8::internal::WeakObjects", %"struct.v8::internal::EphemeronMarking", %"class.std::__1::unique_ptr.220", %"class.std::__1::unique_ptr.226", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.std::__1::vector.287", %"class.v8::internal::Sweeper"*, %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", [2 x i8], i32, i32, [4 x i8] }>
%"class.v8::internal::MarkCompactCollectorBase" = type { i32 (...)**, %"class.v8::internal::Heap"* }
%"class.v8::base::Semaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }
%"class.v8::internal::MarkingWorklists" = type { %"class.heap::base::Worklist", %"class.heap::base::Worklist", %"class.heap::base::Worklist.181", %"class.std::__1::vector.182", %"class.std::__1::vector.189", %"class.heap::base::Worklist" }
%"class.heap::base::Worklist.181" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment" = type opaque
%"class.std::__1::vector.182" = type { %"class.std::__1::__vector_base.183" }
%"class.std::__1::__vector_base.183" = type { %"struct.v8::internal::ContextWorklistPair"*, %"struct.v8::internal::ContextWorklistPair"*, %"class.std::__1::__compressed_pair.184" }
%"struct.v8::internal::ContextWorklistPair" = type { i64, %"class.heap::base::Worklist"* }
%"class.std::__1::__compressed_pair.184" = type { %"struct.std::__1::__compressed_pair_elem.185" }
%"struct.std::__1::__compressed_pair_elem.185" = type { %"struct.v8::internal::ContextWorklistPair"* }
%"class.std::__1::vector.189" = type { %"class.std::__1::__vector_base.190" }
%"class.std::__1::__vector_base.190" = type { %"class.std::__1::unique_ptr.191"*, %"class.std::__1::unique_ptr.191"*, %"class.std::__1::__compressed_pair.192" }
%"class.std::__1::unique_ptr.191" = type opaque
%"class.std::__1::__compressed_pair.192" = type { %"struct.std::__1::__compressed_pair_elem.193" }
%"struct.std::__1::__compressed_pair_elem.193" = type { %"class.std::__1::unique_ptr.191"* }
%"class.heap::base::Worklist" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment" = type opaque
%"class.v8::internal::WeakObjects" = type { %"class.v8::internal::Worklist", %"class.v8::internal::Worklist.197", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.201", %"class.v8::internal::Worklist.203", %"class.v8::internal::Worklist.205", %"class.v8::internal::Worklist.207", %"class.v8::internal::Worklist.209", %"class.v8::internal::Worklist.211" }
%"class.v8::internal::Worklist" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.197" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.199" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.201" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.203" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.205" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.207" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.209" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.211" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"struct.v8::internal::EphemeronMarking" = type { %"class.std::__1::vector.213", i8, i64 }
%"class.std::__1::vector.213" = type { %"class.std::__1::__vector_base.214" }
%"class.std::__1::__vector_base.214" = type { %"class.v8::internal::HeapObject"*, %"class.v8::internal::HeapObject"*, %"class.std::__1::__compressed_pair.215" }
%"class.std::__1::__compressed_pair.215" = type { %"struct.std::__1::__compressed_pair_elem.216" }
%"struct.std::__1::__compressed_pair_elem.216" = type { %"class.v8::internal::HeapObject"* }
%"class.std::__1::unique_ptr.220" = type { %"class.std::__1::__compressed_pair.221" }
%"class.std::__1::__compressed_pair.221" = type { %"struct.std::__1::__compressed_pair_elem.222" }
%"struct.std::__1::__compressed_pair_elem.222" = type { %"class.v8::internal::MainMarkingVisitor"* }
%"class.v8::internal::MainMarkingVisitor" = type opaque
%"class.std::__1::unique_ptr.226" = type { %"class.std::__1::__compressed_pair.227" }
%"class.std::__1::__compressed_pair.227" = type { %"struct.std::__1::__compressed_pair_elem.228" }
%"struct.std::__1::__compressed_pair_elem.228" = type { %"class.v8::internal::MarkingWorklists::Local"* }
%"class.v8::internal::MarkingWorklists::Local" = type { %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", i64, %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local"*, i8, [7 x i8], %"class.std::__1::unordered_map.229" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local" = type { %"class.heap::base::Worklist.181"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.heap::base::internal::SegmentBase" = type { i16, i16 }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local" = type { %"class.heap::base::Worklist"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.std::__1::unordered_map.229" = type { %"class.std::__1::__hash_table.230" }
%"class.std::__1::__hash_table.230" = type <{ %"class.std::__1::unique_ptr.231", %"class.std::__1::__compressed_pair.241", %"class.std::__1::__compressed_pair.246", %"class.std::__1::__compressed_pair.249", [4 x i8] }>
%"class.std::__1::unique_ptr.231" = type { %"class.std::__1::__compressed_pair.232" }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.233", %"struct.std::__1::__compressed_pair_elem.235" }
%"struct.std::__1::__compressed_pair_elem.233" = type { %"struct.std::__1::__hash_node_base.234"** }
%"struct.std::__1::__hash_node_base.234" = type { %"struct.std::__1::__hash_node_base.234"* }
%"struct.std::__1::__compressed_pair_elem.235" = type { %"class.std::__1::__bucket_list_deallocator.236" }
%"class.std::__1::__bucket_list_deallocator.236" = type { %"class.std::__1::__compressed_pair.237" }
%"class.std::__1::__compressed_pair.237" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.242" }
%"struct.std::__1::__compressed_pair_elem.242" = type { %"struct.std::__1::__hash_node_base.234" }
%"class.std::__1::__compressed_pair.246" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.249" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::NativeContextInferrer" = type { i8 }
%"class.v8::internal::NativeContextStats" = type { %"class.std::__1::unordered_map.256" }
%"class.std::__1::unordered_map.256" = type { %"class.std::__1::__hash_table.257" }
%"class.std::__1::__hash_table.257" = type <{ %"class.std::__1::unique_ptr.258", %"class.std::__1::__compressed_pair.268", %"class.std::__1::__compressed_pair.273", %"class.std::__1::__compressed_pair.276", [4 x i8] }>
%"class.std::__1::unique_ptr.258" = type { %"class.std::__1::__compressed_pair.259" }
%"class.std::__1::__compressed_pair.259" = type { %"struct.std::__1::__compressed_pair_elem.260", %"struct.std::__1::__compressed_pair_elem.262" }
%"struct.std::__1::__compressed_pair_elem.260" = type { %"struct.std::__1::__hash_node_base.261"** }
%"struct.std::__1::__hash_node_base.261" = type { %"struct.std::__1::__hash_node_base.261"* }
%"struct.std::__1::__compressed_pair_elem.262" = type { %"class.std::__1::__bucket_list_deallocator.263" }
%"class.std::__1::__bucket_list_deallocator.263" = type { %"class.std::__1::__compressed_pair.264" }
%"class.std::__1::__compressed_pair.264" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.268" = type { %"struct.std::__1::__compressed_pair_elem.269" }
%"struct.std::__1::__compressed_pair_elem.269" = type { %"struct.std::__1::__hash_node_base.261" }
%"class.std::__1::__compressed_pair.273" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.276" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::vector.280" = type { %"class.std::__1::__vector_base.281" }
%"class.std::__1::__vector_base.281" = type { %"class.v8::internal::Page"**, %"class.v8::internal::Page"**, %"class.std::__1::__compressed_pair.282" }
%"class.std::__1::__compressed_pair.282" = type { %"struct.std::__1::__compressed_pair_elem.283" }
%"struct.std::__1::__compressed_pair_elem.283" = type { %"class.v8::internal::Page"** }
%"class.std::__1::vector.287" = type { %"class.std::__1::__vector_base.288" }
%"class.std::__1::__vector_base.288" = type { %"struct.std::__1::pair.289"*, %"struct.std::__1::pair.289"*, %"class.std::__1::__compressed_pair.290" }
%"struct.std::__1::pair.289" = type opaque
%"class.std::__1::__compressed_pair.290" = type { %"struct.std::__1::__compressed_pair_elem.291" }
%"struct.std::__1::__compressed_pair_elem.291" = type { %"struct.std::__1::pair.289"* }
%"class.v8::internal::Sweeper" = type <{ %"class.v8::internal::Heap"*, %"class.v8::internal::MajorNonAtomicMarkingState"*, %"class.std::__1::unique_ptr.295", %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.280"], [3 x %"class.std::__1::vector.280"], i8, %"struct.std::__1::atomic.152", [6 x i8], %"class.std::__1::vector.280", i64, %"class.v8::base::Semaphore", i8, i8, i8, [5 x i8] }>
%"class.std::__1::unique_ptr.295" = type { %"class.std::__1::__compressed_pair.296" }
%"class.std::__1::__compressed_pair.296" = type { %"struct.std::__1::__compressed_pair_elem.297" }
%"struct.std::__1::__compressed_pair_elem.297" = type { %"class.v8::JobHandle"* }
%"class.v8::JobHandle" = type { i32 (...)** }
%"class.v8::internal::MajorMarkingState" = type { i8 }
%"class.v8::internal::MajorNonAtomicMarkingState" = type { i8 }
%"class.v8::internal::MinorMarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::internal::Worklist.305"*, %"class.v8::internal::YoungGenerationMarkingVisitor"*, %"class.v8::base::Semaphore", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.v8::internal::MinorMarkingState", %"class.v8::internal::MinorNonAtomicMarkingState", [6 x i8] }>
%"class.v8::internal::Worklist.305" = type opaque
%"class.v8::internal::YoungGenerationMarkingVisitor" = type opaque
%"class.v8::internal::MinorMarkingState" = type { i8 }
%"class.v8::internal::MinorNonAtomicMarkingState" = type { i8 }
%"class.std::__1::unique_ptr.308" = type { %"class.std::__1::__compressed_pair.309" }
%"class.std::__1::__compressed_pair.309" = type { %"struct.std::__1::__compressed_pair_elem.310" }
%"struct.std::__1::__compressed_pair_elem.310" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.314" = type { %"class.std::__1::__compressed_pair.315" }
%"class.std::__1::__compressed_pair.315" = type { %"struct.std::__1::__compressed_pair_elem.316" }
%"struct.std::__1::__compressed_pair_elem.316" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.320" = type { %"class.std::__1::__compressed_pair.321" }
%"class.std::__1::__compressed_pair.321" = type { %"struct.std::__1::__compressed_pair_elem.322" }
%"struct.std::__1::__compressed_pair_elem.322" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type { %"class.v8::internal::Isolate"*, %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"*, i64, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.v8::internal::VirtualMemory", %"class.v8::internal::MemoryAllocator::Unmapper", %"class.std::__1::unordered_set.330", %"class.v8::base::Mutex" }
%"class.v8::internal::MemoryAllocator::Unmapper" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MemoryAllocator"*, %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.323"], %"class.std::__1::unique_ptr.295" }
%"class.std::__1::vector.323" = type { %"class.std::__1::__vector_base.324" }
%"class.std::__1::__vector_base.324" = type { %"class.v8::internal::MemoryChunk"**, %"class.v8::internal::MemoryChunk"**, %"class.std::__1::__compressed_pair.325" }
%"class.std::__1::__compressed_pair.325" = type { %"struct.std::__1::__compressed_pair_elem.326" }
%"struct.std::__1::__compressed_pair_elem.326" = type { %"class.v8::internal::MemoryChunk"** }
%"class.std::__1::unique_ptr.359" = type { %"class.std::__1::__compressed_pair.360" }
%"class.std::__1::__compressed_pair.360" = type { %"struct.std::__1::__compressed_pair_elem.361" }
%"struct.std::__1::__compressed_pair_elem.361" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::WeakObjects"*, double, double, i64, i64, i64, i64, double, i64, %"struct.std::__1::atomic.362", i8, i8, i8, i8, [3 x i8], %"class.v8::internal::IncrementalMarkingJob", %"struct.std::__1::atomic.366", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorAtomicMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", %"class.v8::base::Mutex", %"class.std::__1::unordered_map.371" }
%"struct.std::__1::atomic.362" = type { %"struct.std::__1::__atomic_base.363" }
%"struct.std::__1::__atomic_base.363" = type { %"struct.std::__1::__cxx_atomic_impl.364" }
%"struct.std::__1::__cxx_atomic_impl.364" = type { %"struct.std::__1::__cxx_atomic_base_impl.365" }
%"struct.std::__1::__cxx_atomic_base_impl.365" = type { i8 }
%"class.v8::internal::IncrementalMarkingJob" = type <{ %"class.v8::base::Mutex", double, i8, i8, [6 x i8] }>
%"struct.std::__1::atomic.366" = type { %"struct.std::__1::__atomic_base.367" }
%"struct.std::__1::__atomic_base.367" = type { %"struct.std::__1::__cxx_atomic_impl.368" }
%"struct.std::__1::__cxx_atomic_impl.368" = type { %"struct.std::__1::__cxx_atomic_base_impl.369" }
%"struct.std::__1::__cxx_atomic_base_impl.369" = type { i32 }
%"class.v8::internal::IncrementalMarking::Observer" = type { %"class.v8::internal::AllocationObserver", %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::MajorAtomicMarkingState" = type { i8 }
%"class.std::__1::unordered_map.371" = type { %"class.std::__1::__hash_table.372" }
%"class.std::__1::__hash_table.372" = type <{ %"class.std::__1::unique_ptr.373", %"class.std::__1::__compressed_pair.383", %"class.std::__1::__compressed_pair.388", %"class.std::__1::__compressed_pair.391", [4 x i8] }>
%"class.std::__1::unique_ptr.373" = type { %"class.std::__1::__compressed_pair.374" }
%"class.std::__1::__compressed_pair.374" = type { %"struct.std::__1::__compressed_pair_elem.375", %"struct.std::__1::__compressed_pair_elem.377" }
%"struct.std::__1::__compressed_pair_elem.375" = type { %"struct.std::__1::__hash_node_base.376"** }
%"struct.std::__1::__hash_node_base.376" = type { %"struct.std::__1::__hash_node_base.376"* }
%"struct.std::__1::__compressed_pair_elem.377" = type { %"class.std::__1::__bucket_list_deallocator.378" }
%"class.std::__1::__bucket_list_deallocator.378" = type { %"class.std::__1::__compressed_pair.379" }
%"class.std::__1::__compressed_pair.379" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.383" = type { %"struct.std::__1::__compressed_pair_elem.384" }
%"struct.std::__1::__compressed_pair_elem.384" = type { %"struct.std::__1::__hash_node_base.376" }
%"class.std::__1::__compressed_pair.388" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.391" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.398" = type { %"class.std::__1::__compressed_pair.399" }
%"class.std::__1::__compressed_pair.399" = type { %"struct.std::__1::__compressed_pair_elem.400" }
%"struct.std::__1::__compressed_pair_elem.400" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type <{ %"class.std::__1::unique_ptr.295", %"class.v8::internal::Heap"*, %"class.v8::internal::MarkingWorklists"*, %"class.v8::internal::WeakObjects"*, [8 x %"struct.v8::internal::ConcurrentMarking::TaskState"], %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.152", [7 x i8] }>
%"struct.v8::internal::ConcurrentMarking::TaskState" = type { i64, %"class.std::__1::unordered_map.401", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", [64 x i8] }
%"class.std::__1::unordered_map.401" = type { %"class.std::__1::__hash_table.402" }
%"class.std::__1::__hash_table.402" = type <{ %"class.std::__1::unique_ptr.403", %"class.std::__1::__compressed_pair.413", %"class.std::__1::__compressed_pair.418", %"class.std::__1::__compressed_pair.421", [4 x i8] }>
%"class.std::__1::unique_ptr.403" = type { %"class.std::__1::__compressed_pair.404" }
%"class.std::__1::__compressed_pair.404" = type { %"struct.std::__1::__compressed_pair_elem.405", %"struct.std::__1::__compressed_pair_elem.407" }
%"struct.std::__1::__compressed_pair_elem.405" = type { %"struct.std::__1::__hash_node_base.406"** }
%"struct.std::__1::__hash_node_base.406" = type { %"struct.std::__1::__hash_node_base.406"* }
%"struct.std::__1::__compressed_pair_elem.407" = type { %"class.std::__1::__bucket_list_deallocator.408" }
%"class.std::__1::__bucket_list_deallocator.408" = type { %"class.std::__1::__compressed_pair.409" }
%"class.std::__1::__compressed_pair.409" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.413" = type { %"struct.std::__1::__compressed_pair_elem.414" }
%"struct.std::__1::__compressed_pair_elem.414" = type { %"struct.std::__1::__hash_node_base.406" }
%"class.std::__1::__compressed_pair.418" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.421" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.428" = type { %"class.std::__1::__compressed_pair.429" }
%"class.std::__1::__compressed_pair.429" = type { %"struct.std::__1::__compressed_pair_elem.430" }
%"struct.std::__1::__compressed_pair_elem.430" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.434" = type { %"class.std::__1::__compressed_pair.435" }
%"class.std::__1::__compressed_pair.435" = type { %"struct.std::__1::__compressed_pair_elem.436" }
%"struct.std::__1::__compressed_pair_elem.436" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type { %"class.std::__1::list", %"class.std::__1::list", %"class.std::__1::list", %"class.v8::internal::Isolate"*, i8, i8, i8, %"class.v8::base::RandomNumberGenerator" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.437" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.437" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::base::RandomNumberGenerator" = type { i64, i64, i64 }
%"class.std::__1::unique_ptr.444" = type { %"class.std::__1::__compressed_pair.445" }
%"class.std::__1::__compressed_pair.445" = type { %"struct.std::__1::__compressed_pair_elem.446" }
%"struct.std::__1::__compressed_pair_elem.446" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.450" = type { %"class.std::__1::__compressed_pair.451" }
%"class.std::__1::__compressed_pair.451" = type { %"struct.std::__1::__compressed_pair_elem.452" }
%"struct.std::__1::__compressed_pair_elem.452" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.456" = type { %"class.std::__1::__compressed_pair.457" }
%"class.std::__1::__compressed_pair.457" = type { %"struct.std::__1::__compressed_pair_elem.458" }
%"struct.std::__1::__compressed_pair_elem.458" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.462" = type { %"class.std::__1::__compressed_pair.463" }
%"class.std::__1::__compressed_pair.463" = type { %"struct.std::__1::__compressed_pair_elem.464" }
%"struct.std::__1::__compressed_pair_elem.464" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.468" = type { %"class.std::__1::__compressed_pair.469" }
%"class.std::__1::__compressed_pair.469" = type { %"struct.std::__1::__compressed_pair_elem.470" }
%"struct.std::__1::__compressed_pair_elem.470" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type opaque
%"class.std::__1::unique_ptr.474" = type { %"class.std::__1::__compressed_pair.475" }
%"class.std::__1::__compressed_pair.475" = type { %"struct.std::__1::__compressed_pair_elem.476" }
%"struct.std::__1::__compressed_pair_elem.476" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.480" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type { %"class.v8::internal::VirtualMemoryCage", %"struct.std::__1::atomic.499", %"class.v8::base::Mutex" }
%"class.v8::internal::VirtualMemoryCage" = type { i32 (...)**, i64, %"class.std::__1::unique_ptr.481", %"class.v8::internal::VirtualMemory" }
%"class.std::__1::unique_ptr.481" = type { %"class.std::__1::__compressed_pair.482" }
%"class.std::__1::__compressed_pair.482" = type { %"struct.std::__1::__compressed_pair_elem.483" }
%"struct.std::__1::__compressed_pair_elem.483" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set.484", %"class.std::__1::set.492" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set.484" = type { %"class.std::__1::__tree.485" }
%"class.std::__1::__tree.485" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.486", %"class.std::__1::__compressed_pair.490" }
%"class.std::__1::__compressed_pair.486" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"class.std::__1::__compressed_pair.490" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::set.492" = type { %"class.std::__1::__tree.493" }
%"class.std::__1::__tree.493" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.486", %"class.std::__1::__compressed_pair.494" }
%"class.std::__1::__compressed_pair.494" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::atomic.499" = type { %"struct.std::__1::__atomic_base.500" }
%"struct.std::__1::__atomic_base.500" = type { %"struct.std::__1::__cxx_atomic_impl.501" }
%"struct.std::__1::__cxx_atomic_impl.501" = type { %"struct.std::__1::__cxx_atomic_base_impl.502" }
%"struct.std::__1::__cxx_atomic_base_impl.502" = type { i8* }
%"class.v8::CppHeap" = type opaque
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.503" = type { %"class.std::__1::__hash_table.504" }
%"class.std::__1::__hash_table.504" = type <{ %"class.std::__1::unique_ptr.505", %"class.std::__1::__compressed_pair.515", %"class.std::__1::__compressed_pair.520", %"class.std::__1::__compressed_pair.523", [4 x i8] }>
%"class.std::__1::unique_ptr.505" = type { %"class.std::__1::__compressed_pair.506" }
%"class.std::__1::__compressed_pair.506" = type { %"struct.std::__1::__compressed_pair_elem.507", %"struct.std::__1::__compressed_pair_elem.509" }
%"struct.std::__1::__compressed_pair_elem.507" = type { %"struct.std::__1::__hash_node_base.508"** }
%"struct.std::__1::__hash_node_base.508" = type { %"struct.std::__1::__hash_node_base.508"* }
%"struct.std::__1::__compressed_pair_elem.509" = type { %"class.std::__1::__bucket_list_deallocator.510" }
%"class.std::__1::__bucket_list_deallocator.510" = type { %"class.std::__1::__compressed_pair.511" }
%"class.std::__1::__compressed_pair.511" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.515" = type { %"struct.std::__1::__compressed_pair_elem.516" }
%"struct.std::__1::__compressed_pair_elem.516" = type { %"struct.std::__1::__hash_node_base.508" }
%"class.std::__1::__compressed_pair.520" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.523" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.529" = type { %"class.std::__1::__compressed_pair.530" }
%"class.std::__1::__compressed_pair.530" = type { %"struct.std::__1::__compressed_pair_elem.531" }
%"struct.std::__1::__compressed_pair_elem.531" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.535" = type { %"class.std::__1::__compressed_pair.536" }
%"class.std::__1::__compressed_pair.536" = type { %"struct.std::__1::__compressed_pair_elem.537" }
%"struct.std::__1::__compressed_pair_elem.537" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.541", %"class.std::__1::vector.541" }
%"class.std::__1::unique_ptr.548" = type { %"class.std::__1::__compressed_pair.549" }
%"class.std::__1::__compressed_pair.549" = type { %"struct.std::__1::__compressed_pair_elem.550" }
%"struct.std::__1::__compressed_pair_elem.550" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.std::__1::unordered_set.330" = type { %"class.std::__1::__hash_table.331" }
%"class.std::__1::__hash_table.331" = type <{ %"class.std::__1::unique_ptr.332", %"class.std::__1::__compressed_pair.342", %"class.std::__1::__compressed_pair.347", %"class.std::__1::__compressed_pair.351", [4 x i8] }>
%"class.std::__1::unique_ptr.332" = type { %"class.std::__1::__compressed_pair.333" }
%"class.std::__1::__compressed_pair.333" = type { %"struct.std::__1::__compressed_pair_elem.334", %"struct.std::__1::__compressed_pair_elem.336" }
%"struct.std::__1::__compressed_pair_elem.334" = type { %"struct.std::__1::__hash_node_base.335"** }
%"struct.std::__1::__hash_node_base.335" = type { %"struct.std::__1::__hash_node_base.335"* }
%"struct.std::__1::__compressed_pair_elem.336" = type { %"class.std::__1::__bucket_list_deallocator.337" }
%"class.std::__1::__bucket_list_deallocator.337" = type { %"class.std::__1::__compressed_pair.338" }
%"class.std::__1::__compressed_pair.338" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.342" = type { %"struct.std::__1::__compressed_pair_elem.343" }
%"struct.std::__1::__compressed_pair_elem.343" = type { %"struct.std::__1::__hash_node_base.335" }
%"class.std::__1::__compressed_pair.347" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.351" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.580" = type { %"class.std::__1::__hash_table.581" }
%"class.std::__1::__hash_table.581" = type <{ %"class.std::__1::unique_ptr.582", %"class.std::__1::__compressed_pair.592", %"class.std::__1::__compressed_pair.597", %"class.std::__1::__compressed_pair.600", [4 x i8] }>
%"class.std::__1::unique_ptr.582" = type { %"class.std::__1::__compressed_pair.583" }
%"class.std::__1::__compressed_pair.583" = type { %"struct.std::__1::__compressed_pair_elem.584", %"struct.std::__1::__compressed_pair_elem.586" }
%"struct.std::__1::__compressed_pair_elem.584" = type { %"struct.std::__1::__hash_node_base.585"** }
%"struct.std::__1::__hash_node_base.585" = type { %"struct.std::__1::__hash_node_base.585"* }
%"struct.std::__1::__compressed_pair_elem.586" = type { %"class.std::__1::__bucket_list_deallocator.587" }
%"class.std::__1::__bucket_list_deallocator.587" = type { %"class.std::__1::__compressed_pair.588" }
%"class.std::__1::__compressed_pair.588" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.592" = type { %"struct.std::__1::__compressed_pair_elem.593" }
%"struct.std::__1::__compressed_pair_elem.593" = type { %"struct.std::__1::__hash_node_base.585" }
%"class.std::__1::__compressed_pair.597" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.600" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.554" = type { %"class.std::__1::__hash_table.555" }
%"class.std::__1::__hash_table.555" = type <{ %"class.std::__1::unique_ptr.556", %"class.std::__1::__compressed_pair.566", %"class.std::__1::__compressed_pair.571", %"class.std::__1::__compressed_pair.574", [4 x i8] }>
%"class.std::__1::unique_ptr.556" = type { %"class.std::__1::__compressed_pair.557" }
%"class.std::__1::__compressed_pair.557" = type { %"struct.std::__1::__compressed_pair_elem.558", %"struct.std::__1::__compressed_pair_elem.560" }
%"struct.std::__1::__compressed_pair_elem.558" = type { %"struct.std::__1::__hash_node_base.559"** }
%"struct.std::__1::__hash_node_base.559" = type { %"struct.std::__1::__hash_node_base.559"* }
%"struct.std::__1::__compressed_pair_elem.560" = type { %"class.std::__1::__bucket_list_deallocator.561" }
%"class.std::__1::__bucket_list_deallocator.561" = type { %"class.std::__1::__compressed_pair.562" }
%"class.std::__1::__compressed_pair.562" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.566" = type { %"struct.std::__1::__compressed_pair_elem.567" }
%"struct.std::__1::__compressed_pair_elem.567" = type { %"struct.std::__1::__hash_node_base.559" }
%"class.std::__1::__compressed_pair.571" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.574" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.604" = type { %"class.std::__1::__hash_table.605" }
%"class.std::__1::__hash_table.605" = type <{ %"class.std::__1::unique_ptr.606", %"class.std::__1::__compressed_pair.616", %"class.std::__1::__compressed_pair.621", %"class.std::__1::__compressed_pair.626", [4 x i8] }>
%"class.std::__1::unique_ptr.606" = type { %"class.std::__1::__compressed_pair.607" }
%"class.std::__1::__compressed_pair.607" = type { %"struct.std::__1::__compressed_pair_elem.608", %"struct.std::__1::__compressed_pair_elem.610" }
%"struct.std::__1::__compressed_pair_elem.608" = type { %"struct.std::__1::__hash_node_base.609"** }
%"struct.std::__1::__hash_node_base.609" = type { %"struct.std::__1::__hash_node_base.609"* }
%"struct.std::__1::__compressed_pair_elem.610" = type { %"class.std::__1::__bucket_list_deallocator.611" }
%"class.std::__1::__bucket_list_deallocator.611" = type { %"class.std::__1::__compressed_pair.612" }
%"class.std::__1::__compressed_pair.612" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.616" = type { %"struct.std::__1::__compressed_pair_elem.617" }
%"struct.std::__1::__compressed_pair_elem.617" = type { %"struct.std::__1::__hash_node_base.609" }
%"class.std::__1::__compressed_pair.621" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.626" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::vector.632" = type { %"class.std::__1::__vector_base.633" }
%"class.std::__1::__vector_base.633" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.634" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.634" = type { %"struct.std::__1::__compressed_pair_elem.635" }
%"struct.std::__1::__compressed_pair_elem.635" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.639" = type { %"class.std::__1::__compressed_pair.640" }
%"class.std::__1::__compressed_pair.640" = type { %"struct.std::__1::__compressed_pair_elem.641" }
%"struct.std::__1::__compressed_pair_elem.641" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type { i8 }
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.541" }
%"class.std::__1::shared_ptr.645" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type { i32 (...)**, %"class.std::__1::vector.139", %"class.v8::internal::AllocationStats", %"class.std::__1::unique_ptr.646", %"class.std::__1::unique_ptr.660" }
%"class.std::__1::unique_ptr.646" = type { %"class.std::__1::__compressed_pair.647" }
%"class.std::__1::__compressed_pair.647" = type { %"struct.std::__1::__compressed_pair_elem.648" }
%"struct.std::__1::__compressed_pair_elem.648" = type { %"class.v8::internal::SharedReadOnlySpace"* }
%"class.v8::internal::SharedReadOnlySpace" = type { %"class.v8::internal::ReadOnlySpace", %"class.std::__1::vector.649" }
%"class.std::__1::vector.649" = type { %"class.std::__1::__vector_base.650" }
%"class.std::__1::__vector_base.650" = type { %"class.std::__1::unique_ptr.651"*, %"class.std::__1::unique_ptr.651"*, %"class.std::__1::__compressed_pair.652" }
%"class.std::__1::unique_ptr.651" = type { %"class.std::__1::__compressed_pair.1128" }
%"class.std::__1::__compressed_pair.1128" = type { %"struct.std::__1::__compressed_pair_elem.1129" }
%"struct.std::__1::__compressed_pair_elem.1129" = type { %"class.v8::PageAllocator::SharedMemoryMapping"* }
%"class.v8::PageAllocator::SharedMemoryMapping" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.652" = type { %"struct.std::__1::__compressed_pair_elem.653" }
%"struct.std::__1::__compressed_pair_elem.653" = type { %"class.std::__1::unique_ptr.651"* }
%"class.std::__1::unique_ptr.660" = type { %"class.std::__1::__compressed_pair.661" }
%"class.std::__1::__compressed_pair.661" = type { %"struct.std::__1::__compressed_pair_elem.662" }
%"struct.std::__1::__compressed_pair_elem.662" = type { %"class.v8::internal::ReadOnlyHeap"* }
%"class.std::__1::unique_ptr.666" = type { %"class.std::__1::__compressed_pair.667" }
%"class.std::__1::__compressed_pair.667" = type { %"struct.std::__1::__compressed_pair_elem.668" }
%"struct.std::__1::__compressed_pair_elem.668" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type { %"struct.std::__1::atomic.669", %"class.v8::base::Mutex" }
%"struct.std::__1::atomic.669" = type { %"struct.std::__1::__atomic_base.670" }
%"struct.std::__1::__atomic_base.670" = type { %"struct.std::__1::__cxx_atomic_impl.671" }
%"struct.std::__1::__cxx_atomic_impl.671" = type { %"struct.std::__1::__cxx_atomic_base_impl.672" }
%"struct.std::__1::__cxx_atomic_base_impl.672" = type { %"class.v8::internal::StringTable::Data"* }
%"class.v8::internal::StringTable::Data" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::SourceCodeCache" }
%"class.v8::internal::SourceCodeCache" = type { i32, %"class.v8::internal::FixedArray" }
%"class.v8::internal::FixedArray" = type { %"class.v8::internal::TorqueGeneratedFixedArray" }
%"class.v8::internal::TorqueGeneratedFixedArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::FixedArrayBase" = type { %"class.v8::internal::TorqueGeneratedFixedArrayBase" }
%"class.v8::internal::TorqueGeneratedFixedArrayBase" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.676" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type { %"class.std::__1::enable_shared_from_this", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::AggregatableHistogramTimer", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::RuntimeCallStats", %"class.v8::internal::WorkerThreadRuntimeCallStats", %"class.v8::internal::Isolate"*, %"class.v8::internal::StatsTable" }
%"class.std::__1::enable_shared_from_this" = type { %"class.std::__1::weak_ptr" }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::HistogramTimer" = type { %"class.v8::internal::TimedHistogram.base", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::TimedHistogram.base" = type <{ %"class.v8::internal::Histogram", i32 }>
%"class.v8::base::ElapsedTimer" = type { %"class.v8::base::TimeTicks" }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::TimedHistogram" = type <{ %"class.v8::internal::Histogram", i32, [4 x i8] }>
%"class.v8::internal::AggregatableHistogramTimer" = type { %"class.v8::internal::Histogram", %"class.v8::base::TimeDelta" }
%"class.v8::base::TimeDelta" = type { i64 }
%"class.v8::internal::Histogram" = type { i8*, i32, i32, i32, i8*, %"class.v8::internal::Counters"* }
%"class.v8::internal::StatsCounterThreadSafe" = type { %"class.v8::internal::StatsCounterBase", %"class.v8::base::Mutex" }
%"class.v8::internal::StatsCounterBase" = type { %"class.v8::internal::Counters"*, i8*, i32* }
%"class.v8::internal::StatsCounter" = type <{ %"class.v8::internal::StatsCounterBase", i8, [7 x i8] }>
%"class.v8::internal::RuntimeCallStats" = type { %"class.v8::base::AtomicValue", %"class.v8::base::AtomicValue.677", i8, i32, %"class.v8::internal::ThreadId", [1370 x %"class.v8::internal::RuntimeCallCounter"] }
%"class.v8::base::AtomicValue" = type { i64 }
%"class.v8::base::AtomicValue.677" = type { i64 }
%"class.v8::internal::RuntimeCallCounter" = type { i8*, i64, i64 }
%"class.v8::internal::WorkerThreadRuntimeCallStats" = type <{ %"class.v8::base::Mutex", %"class.std::__1::vector.678", %"class.v8::base::Optional", %"class.v8::internal::ThreadId", [4 x i8] }>
%"class.std::__1::vector.678" = type { %"class.std::__1::__vector_base.679" }
%"class.std::__1::__vector_base.679" = type { %"class.std::__1::unique_ptr.680"*, %"class.std::__1::unique_ptr.680"*, %"class.std::__1::__compressed_pair.681" }
%"class.std::__1::unique_ptr.680" = type opaque
%"class.std::__1::__compressed_pair.681" = type { %"struct.std::__1::__compressed_pair_elem.682" }
%"struct.std::__1::__compressed_pair_elem.682" = type { %"class.std::__1::unique_ptr.680"* }
%"class.v8::base::Optional" = type { %"class.v8::base::internal::OptionalBase" }
%"class.v8::base::internal::OptionalBase" = type { %"struct.v8::base::internal::OptionalStorage" }
%"struct.v8::base::internal::OptionalStorage" = type { %"struct.v8::base::internal::OptionalStorageBase" }
%"struct.v8::base::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.v8::internal::StatsTable" = type { i32* (i8*)*, i8* (i8*, i32, i32, i64)*, void (i8*, i32)* }
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::internal::Logger" = type { %"class.v8::internal::CodeEventListener", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.686", %"class.std::__1::unique_ptr.692", %"struct.std::__1::atomic.152", %"class.std::__1::unique_ptr.698", %"class.std::__1::unique_ptr.704", %"class.std::__1::unique_ptr.710", %"class.std::__1::unique_ptr.716", %"class.std::__1::unique_ptr.722", %"class.std::__1::set.728", i32, i8, %"class.v8::internal::ExistingCodeLogger", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::CodeEventListener" = type { i32 (...)** }
%"class.std::__1::unique_ptr.686" = type { %"class.std::__1::__compressed_pair.687" }
%"class.std::__1::__compressed_pair.687" = type { %"struct.std::__1::__compressed_pair_elem.688" }
%"struct.std::__1::__compressed_pair_elem.688" = type { %"class.v8::internal::Ticker"* }
%"class.v8::internal::Ticker" = type opaque
%"class.std::__1::unique_ptr.692" = type { %"class.std::__1::__compressed_pair.693" }
%"class.std::__1::__compressed_pair.693" = type { %"struct.std::__1::__compressed_pair_elem.694" }
%"struct.std::__1::__compressed_pair_elem.694" = type { %"class.v8::internal::Profiler"* }
%"class.v8::internal::Profiler" = type opaque
%"class.std::__1::unique_ptr.698" = type { %"class.std::__1::__compressed_pair.699" }
%"class.std::__1::__compressed_pair.699" = type { %"struct.std::__1::__compressed_pair_elem.700" }
%"struct.std::__1::__compressed_pair_elem.700" = type { %"class.v8::internal::Log"* }
%"class.v8::internal::Log" = type opaque
%"class.std::__1::unique_ptr.704" = type { %"class.std::__1::__compressed_pair.705" }
%"class.std::__1::__compressed_pair.705" = type { %"struct.std::__1::__compressed_pair_elem.706" }
%"struct.std::__1::__compressed_pair_elem.706" = type { %"class.v8::internal::PerfBasicLogger"* }
%"class.v8::internal::PerfBasicLogger" = type opaque
%"class.std::__1::unique_ptr.710" = type { %"class.std::__1::__compressed_pair.711" }
%"class.std::__1::__compressed_pair.711" = type { %"struct.std::__1::__compressed_pair_elem.712" }
%"struct.std::__1::__compressed_pair_elem.712" = type { %"class.v8::internal::PerfJitLogger"* }
%"class.v8::internal::PerfJitLogger" = type opaque
%"class.std::__1::unique_ptr.716" = type { %"class.std::__1::__compressed_pair.717" }
%"class.std::__1::__compressed_pair.717" = type { %"struct.std::__1::__compressed_pair_elem.718" }
%"struct.std::__1::__compressed_pair_elem.718" = type { %"class.v8::internal::LowLevelLogger"* }
%"class.v8::internal::LowLevelLogger" = type opaque
%"class.std::__1::unique_ptr.722" = type { %"class.std::__1::__compressed_pair.723" }
%"class.std::__1::__compressed_pair.723" = type { %"struct.std::__1::__compressed_pair_elem.724" }
%"struct.std::__1::__compressed_pair_elem.724" = type { %"class.v8::internal::JitLogger"* }
%"class.v8::internal::JitLogger" = type opaque
%"class.std::__1::set.728" = type { %"class.std::__1::__tree.729" }
%"class.std::__1::__tree.729" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.730", %"class.std::__1::__compressed_pair.734" }
%"class.std::__1::__compressed_pair.730" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"class.std::__1::__compressed_pair.734" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::internal::ExistingCodeLogger" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::CodeEventListener"* }
%"class.v8::internal::StubCache" = type { [2048 x %"struct.v8::internal::StubCache::Entry"], [512 x %"struct.v8::internal::StubCache::Entry"], %"class.v8::internal::Isolate"* }
%"struct.v8::internal::StubCache::Entry" = type { %"class.v8::internal::StrongTaggedValue", %"class.v8::internal::TaggedValue", %"class.v8::internal::StrongTaggedValue" }
%"class.v8::internal::TaggedValue" = type { %"class.v8::internal::TaggedImpl.737" }
%"class.v8::internal::TaggedImpl.737" = type { i32 }
%"class.v8::internal::StrongTaggedValue" = type { %"class.v8::internal::TaggedImpl.736" }
%"class.v8::internal::TaggedImpl.736" = type { i32 }
%"class.v8::internal::Deoptimizer" = type opaque
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type { [64 x %"struct.v8::internal::DescriptorLookupCache::Key"], [64 x i32] }
%"struct.v8::internal::DescriptorLookupCache::Key" = type { %"class.v8::internal::Map", %"class.v8::internal::Name" }
%"class.v8::internal::Map" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Name" = type { %"class.v8::internal::TorqueGeneratedName" }
%"class.v8::internal::TorqueGeneratedName" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::internal::PrimitiveHeapObject" = type { %"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" }
%"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.744", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.744" = type { %"class.std::__1::__compressed_pair.745" }
%"class.std::__1::__compressed_pair.745" = type { %"struct.std::__1::__compressed_pair_elem.746" }
%"struct.std::__1::__compressed_pair_elem.746" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.750", %"class.v8::internal::DetachableVector.751", %"class.v8::internal::DetachableVector.750", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.751" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.750" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.std::__1::unique_ptr.738", %"class.std::__1::unique_ptr.481" }
%"class.std::__1::unique_ptr.738" = type { %"class.std::__1::__compressed_pair.739" }
%"class.std::__1::__compressed_pair.739" = type { %"struct.std::__1::__compressed_pair_elem.740" }
%"struct.std::__1::__compressed_pair_elem.740" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.752", %"class.std::__1::vector.758", %"class.std::__1::unique_ptr.765", %"class.std::__1::vector.772", %"class.std::__1::unique_ptr.779", i64, %"class.std::__1::vector.785", %"class.std::__1::vector.793", %"class.std::__1::vector.801", i8, i8, i32 }
%"class.std::__1::unique_ptr.752" = type { %"class.std::__1::__compressed_pair.753" }
%"class.std::__1::__compressed_pair.753" = type { %"struct.std::__1::__compressed_pair_elem.754" }
%"struct.std::__1::__compressed_pair_elem.754" = type { %"class.v8::internal::GlobalHandles::NodeSpace"* }
%"class.v8::internal::GlobalHandles::NodeSpace" = type opaque
%"class.std::__1::vector.758" = type { %"class.std::__1::__vector_base.759" }
%"class.std::__1::__vector_base.759" = type { %"class.v8::internal::GlobalHandles::Node"**, %"class.v8::internal::GlobalHandles::Node"**, %"class.std::__1::__compressed_pair.760" }
%"class.v8::internal::GlobalHandles::Node" = type opaque
%"class.std::__1::__compressed_pair.760" = type { %"struct.std::__1::__compressed_pair_elem.761" }
%"struct.std::__1::__compressed_pair_elem.761" = type { %"class.v8::internal::GlobalHandles::Node"** }
%"class.std::__1::unique_ptr.765" = type { %"class.std::__1::__compressed_pair.766" }
%"class.std::__1::__compressed_pair.766" = type { %"struct.std::__1::__compressed_pair_elem.767" }
%"struct.std::__1::__compressed_pair_elem.767" = type { %"class.v8::internal::GlobalHandles::NodeSpace.768"* }
%"class.v8::internal::GlobalHandles::NodeSpace.768" = type opaque
%"class.std::__1::vector.772" = type { %"class.std::__1::__vector_base.773" }
%"class.std::__1::__vector_base.773" = type { %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.std::__1::__compressed_pair.774" }
%"class.v8::internal::GlobalHandles::TracedNode" = type opaque
%"class.std::__1::__compressed_pair.774" = type { %"struct.std::__1::__compressed_pair_elem.775" }
%"struct.std::__1::__compressed_pair_elem.775" = type { %"class.v8::internal::GlobalHandles::TracedNode"** }
%"class.std::__1::unique_ptr.779" = type { %"class.std::__1::__compressed_pair.780" }
%"class.std::__1::__compressed_pair.780" = type { %"struct.std::__1::__compressed_pair_elem.781" }
%"struct.std::__1::__compressed_pair_elem.781" = type { %"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace"* }
%"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace" = type opaque
%"class.std::__1::vector.785" = type { %"class.std::__1::__vector_base.786" }
%"class.std::__1::__vector_base.786" = type { %"struct.std::__1::pair.787"*, %"struct.std::__1::pair.787"*, %"class.std::__1::__compressed_pair.788" }
%"struct.std::__1::pair.787" = type opaque
%"class.std::__1::__compressed_pair.788" = type { %"struct.std::__1::__compressed_pair_elem.789" }
%"struct.std::__1::__compressed_pair_elem.789" = type { %"struct.std::__1::pair.787"* }
%"class.std::__1::vector.793" = type { %"class.std::__1::__vector_base.794" }
%"class.std::__1::__vector_base.794" = type { %"struct.std::__1::pair.795"*, %"struct.std::__1::pair.795"*, %"class.std::__1::__compressed_pair.796" }
%"struct.std::__1::pair.795" = type opaque
%"class.std::__1::__compressed_pair.796" = type { %"struct.std::__1::__compressed_pair_elem.797" }
%"struct.std::__1::__compressed_pair_elem.797" = type { %"struct.std::__1::pair.795"* }
%"class.std::__1::vector.801" = type { %"class.std::__1::__vector_base.802" }
%"class.std::__1::__vector_base.802" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.std::__1::__compressed_pair.803" }
%"class.v8::internal::GlobalHandles::PendingPhantomCallback" = type { void (%"class.v8::WeakCallbackInfo"*)*, i8*, [2 x i8*] }
%"class.v8::WeakCallbackInfo" = type { %"class.v8::Isolate"*, i8*, {}**, [2 x i8*] }
%"class.std::__1::__compressed_pair.803" = type { %"struct.std::__1::__compressed_pair_elem.804" }
%"struct.std::__1::__compressed_pair_elem.804" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"* }
%"class.v8::internal::EternalHandles" = type { i32, %"class.std::__1::vector.808", %"class.std::__1::vector.815" }
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.822" }
%"class.std::__1::unique_ptr.822" = type { %"class.std::__1::__compressed_pair.823" }
%"class.std::__1::__compressed_pair.823" = type { %"struct.std::__1::__compressed_pair_elem.824" }
%"struct.std::__1::__compressed_pair_elem.824" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.815" = type { %"class.std::__1::__vector_base.816" }
%"class.std::__1::__vector_base.816" = type { i32*, i32*, %"class.std::__1::__compressed_pair.817" }
%"class.std::__1::__compressed_pair.817" = type { %"struct.std::__1::__compressed_pair_elem.818" }
%"struct.std::__1::__compressed_pair_elem.818" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"struct.std::__1::atomic.828" = type { %"struct.std::__1::__atomic_base.829" }
%"struct.std::__1::__atomic_base.829" = type { %"struct.std::__1::__cxx_atomic_impl.830" }
%"struct.std::__1::__cxx_atomic_impl.830" = type { %"struct.std::__1::__cxx_atomic_base_impl.831" }
%"struct.std::__1::__cxx_atomic_base_impl.831" = type { i32 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.838" = type { %"struct.std::__1::__atomic_base.839" }
%"struct.std::__1::__atomic_base.839" = type { %"struct.std::__1::__cxx_atomic_impl.840" }
%"struct.std::__1::__cxx_atomic_impl.840" = type { %"struct.std::__1::__cxx_atomic_base_impl.841" }
%"struct.std::__1::__cxx_atomic_base_impl.841" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.843" }
%"class.std::__1::__compressed_pair.843" = type { %"struct.std::__1::__compressed_pair_elem.844" }
%"struct.std::__1::__compressed_pair_elem.844" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.845 }
%union.anon.845 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.849" = type { %"class.std::__1::__hash_table.850" }
%"class.std::__1::__hash_table.850" = type <{ %"class.std::__1::unique_ptr.851", %"class.std::__1::__compressed_pair.861", %"class.std::__1::__compressed_pair.866", %"class.std::__1::__compressed_pair.869", [4 x i8] }>
%"class.std::__1::unique_ptr.851" = type { %"class.std::__1::__compressed_pair.852" }
%"class.std::__1::__compressed_pair.852" = type { %"struct.std::__1::__compressed_pair_elem.853", %"struct.std::__1::__compressed_pair_elem.855" }
%"struct.std::__1::__compressed_pair_elem.853" = type { %"struct.std::__1::__hash_node_base.854"** }
%"struct.std::__1::__hash_node_base.854" = type { %"struct.std::__1::__hash_node_base.854"* }
%"struct.std::__1::__compressed_pair_elem.855" = type { %"class.std::__1::__bucket_list_deallocator.856" }
%"class.std::__1::__bucket_list_deallocator.856" = type { %"class.std::__1::__compressed_pair.857" }
%"class.std::__1::__compressed_pair.857" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.861" = type { %"struct.std::__1::__compressed_pair_elem.862" }
%"struct.std::__1::__compressed_pair_elem.862" = type { %"struct.std::__1::__hash_node_base.854" }
%"class.std::__1::__compressed_pair.866" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.869" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::atomic.152" = type { %"struct.std::__1::__atomic_base.153" }
%"struct.std::__1::__atomic_base.153" = type { %"struct.std::__1::__cxx_atomic_impl.154" }
%"struct.std::__1::__cxx_atomic_impl.154" = type { %"struct.std::__1::__cxx_atomic_base_impl.155" }
%"struct.std::__1::__cxx_atomic_base_impl.155" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.875", %"class.v8::internal::Handle.881", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.882", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.875" = type { %"class.std::__1::__compressed_pair.876" }
%"class.std::__1::__compressed_pair.876" = type { %"struct.std::__1::__compressed_pair_elem.877" }
%"struct.std::__1::__compressed_pair_elem.877" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.881" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.882" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type { %"class.v8::internal::HeapObjectAllocationTracker", %"class.std::__1::unique_ptr.883", %"class.std::__1::vector.889", %"class.std::__1::unique_ptr.897", %"class.std::__1::unique_ptr.903", i8, i8, %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.909", %"class.std::__1::vector.915", %"struct.std::__1::pair.923" }
%"class.std::__1::unique_ptr.883" = type { %"class.std::__1::__compressed_pair.884" }
%"class.std::__1::__compressed_pair.884" = type { %"struct.std::__1::__compressed_pair_elem.885" }
%"struct.std::__1::__compressed_pair_elem.885" = type { %"class.v8::internal::HeapObjectsMap"* }
%"class.v8::internal::HeapObjectsMap" = type opaque
%"class.std::__1::vector.889" = type { %"class.std::__1::__vector_base.890" }
%"class.std::__1::__vector_base.890" = type { %"class.std::__1::unique_ptr.891"*, %"class.std::__1::unique_ptr.891"*, %"class.std::__1::__compressed_pair.892" }
%"class.std::__1::unique_ptr.891" = type opaque
%"class.std::__1::__compressed_pair.892" = type { %"struct.std::__1::__compressed_pair_elem.893" }
%"struct.std::__1::__compressed_pair_elem.893" = type { %"class.std::__1::unique_ptr.891"* }
%"class.std::__1::unique_ptr.897" = type { %"class.std::__1::__compressed_pair.898" }
%"class.std::__1::__compressed_pair.898" = type { %"struct.std::__1::__compressed_pair_elem.899" }
%"struct.std::__1::__compressed_pair_elem.899" = type { %"class.v8::internal::StringsStorage"* }
%"class.v8::internal::StringsStorage" = type opaque
%"class.std::__1::unique_ptr.903" = type { %"class.std::__1::__compressed_pair.904" }
%"class.std::__1::__compressed_pair.904" = type { %"struct.std::__1::__compressed_pair_elem.905" }
%"struct.std::__1::__compressed_pair_elem.905" = type { %"class.v8::internal::AllocationTracker"* }
%"class.v8::internal::AllocationTracker" = type opaque
%"class.std::__1::unique_ptr.909" = type { %"class.std::__1::__compressed_pair.910" }
%"class.std::__1::__compressed_pair.910" = type { %"struct.std::__1::__compressed_pair_elem.911" }
%"struct.std::__1::__compressed_pair_elem.911" = type { %"class.v8::internal::SamplingHeapProfiler"* }
%"class.v8::internal::SamplingHeapProfiler" = type opaque
%"class.std::__1::vector.915" = type { %"class.std::__1::__vector_base.916" }
%"class.std::__1::__vector_base.916" = type { %"struct.std::__1::pair.917"*, %"struct.std::__1::pair.917"*, %"class.std::__1::__compressed_pair.918" }
%"struct.std::__1::pair.917" = type opaque
%"class.std::__1::__compressed_pair.918" = type { %"struct.std::__1::__compressed_pair_elem.919" }
%"struct.std::__1::__compressed_pair_elem.919" = type { %"struct.std::__1::pair.917"* }
%"struct.std::__1::pair.923" = type { i8 (%"class.v8::Isolate"*, %"class.v8::Local.0"*, i16, i8*)*, i8* }
%"class.v8::Local.0" = type { %"class.v8::Value"* }
%"class.std::__1::unique_ptr.924" = type { %"class.std::__1::__compressed_pair.925" }
%"class.std::__1::__compressed_pair.925" = type { %"struct.std::__1::__compressed_pair_elem.926" }
%"struct.std::__1::__compressed_pair_elem.926" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type { %"class.v8::internal::CodeEventListener", %"class.std::__1::unordered_set.927", %"class.v8::base::Mutex" }
%"class.std::__1::unordered_set.927" = type { %"class.std::__1::__hash_table.928" }
%"class.std::__1::__hash_table.928" = type <{ %"class.std::__1::unique_ptr.929", %"class.std::__1::__compressed_pair.939", %"class.std::__1::__compressed_pair.944", %"class.std::__1::__compressed_pair.948", [4 x i8] }>
%"class.std::__1::unique_ptr.929" = type { %"class.std::__1::__compressed_pair.930" }
%"class.std::__1::__compressed_pair.930" = type { %"struct.std::__1::__compressed_pair_elem.931", %"struct.std::__1::__compressed_pair_elem.933" }
%"struct.std::__1::__compressed_pair_elem.931" = type { %"struct.std::__1::__hash_node_base.932"** }
%"struct.std::__1::__hash_node_base.932" = type { %"struct.std::__1::__hash_node_base.932"* }
%"struct.std::__1::__compressed_pair_elem.933" = type { %"class.std::__1::__bucket_list_deallocator.934" }
%"class.std::__1::__bucket_list_deallocator.934" = type { %"class.std::__1::__compressed_pair.935" }
%"class.std::__1::__compressed_pair.935" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.939" = type { %"struct.std::__1::__compressed_pair_elem.940" }
%"struct.std::__1::__compressed_pair_elem.940" = type { %"struct.std::__1::__hash_node_base.932" }
%"class.std::__1::__compressed_pair.944" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.948" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::AstStringConstants" = type opaque
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.962" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.956"**, %"struct.std::__1::pair.956"**, %"struct.std::__1::pair.956"**, %"class.std::__1::__compressed_pair.957" }
%"struct.std::__1::pair.956" = type opaque
%"class.std::__1::__compressed_pair.957" = type { %"struct.std::__1::__compressed_pair_elem.958" }
%"struct.std::__1::__compressed_pair_elem.958" = type { %"struct.std::__1::pair.956"** }
%"class.std::__1::__compressed_pair.962" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::String" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.std::__1::vector.967" = type { %"class.std::__1::__vector_base.968" }
%"class.std::__1::__vector_base.968" = type { %"class.v8::internal::Handle.969"*, %"class.v8::internal::Handle.969"*, %"class.std::__1::__compressed_pair.970" }
%"class.v8::internal::Handle.969" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.970" = type { %"struct.std::__1::__compressed_pair_elem.971" }
%"struct.std::__1::__compressed_pair_elem.971" = type { %"class.v8::internal::Handle.969"* }
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type opaque
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type <{ %"class.v8::internal::EmbeddedVector", %struct._IO_FILE*, i32, [4 x i8] }>
%"class.v8::internal::EmbeddedVector" = type { %"class.v8::internal::Vector", [128 x i8] }
%"class.v8::internal::Vector" = type { i8*, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.833", i32, %"class.v8::Local.0" }
%"class.v8::Local.833" = type { %"class.v8::Promise"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.975" = type { %"class.std::__1::__compressed_pair.976" }
%"class.std::__1::__compressed_pair.976" = type { %"struct.std::__1::__compressed_pair_elem.977" }
%"struct.std::__1::__compressed_pair_elem.977" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type { %"class.v8::base::Mutex", %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.981" = type { %"class.std::__1::__vector_base.982" }
%"class.std::__1::__vector_base.982" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.983" }
%"class.std::__1::__compressed_pair.983" = type { %"struct.std::__1::__compressed_pair_elem.984" }
%"struct.std::__1::__compressed_pair_elem.984" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.988" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.989" = type { %"class.std::__1::__hash_table.990" }
%"class.std::__1::__hash_table.990" = type <{ %"class.std::__1::unique_ptr.991", %"class.std::__1::__compressed_pair.1001", %"class.std::__1::__compressed_pair.1006", %"class.std::__1::__compressed_pair.1009", [4 x i8] }>
%"class.std::__1::unique_ptr.991" = type { %"class.std::__1::__compressed_pair.992" }
%"class.std::__1::__compressed_pair.992" = type { %"struct.std::__1::__compressed_pair_elem.993", %"struct.std::__1::__compressed_pair_elem.995" }
%"struct.std::__1::__compressed_pair_elem.993" = type { %"struct.std::__1::__hash_node_base.994"** }
%"struct.std::__1::__hash_node_base.994" = type { %"struct.std::__1::__hash_node_base.994"* }
%"struct.std::__1::__compressed_pair_elem.995" = type { %"class.std::__1::__bucket_list_deallocator.996" }
%"class.std::__1::__bucket_list_deallocator.996" = type { %"class.std::__1::__compressed_pair.997" }
%"class.std::__1::__compressed_pair.997" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1001" = type { %"struct.std::__1::__compressed_pair_elem.1002" }
%"struct.std::__1::__compressed_pair_elem.1002" = type { %"struct.std::__1::__hash_node_base.994" }
%"class.std::__1::__compressed_pair.1006" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1009" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.std::__1::vector.541" = type { %"class.std::__1::__vector_base.542" }
%"class.std::__1::__vector_base.542" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.543" }
%"class.std::__1::__compressed_pair.543" = type { %"struct.std::__1::__compressed_pair_elem.544" }
%"struct.std::__1::__compressed_pair_elem.544" = type { %"class.v8::internal::Object"* }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.160" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.1013", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr.1042", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.1043", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.1013" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.1038, %union.anon.1040, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.1038 = type { i64 }
%union.anon.1040 = type { i64 }
%"class.std::__1::weak_ptr.1042" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.1043" = type { %"class.v8::PersistentBase.1044" }
%"class.v8::PersistentBase.1044" = type { %"class.v8::Context"* }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.1014", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.1014" = type { %"class.std::__1::__hash_table.1015" }
%"class.std::__1::__hash_table.1015" = type <{ %"class.std::__1::unique_ptr.1016", %"class.std::__1::__compressed_pair.1026", %"class.std::__1::__compressed_pair.1031", %"class.std::__1::__compressed_pair.1034", [4 x i8] }>
%"class.std::__1::unique_ptr.1016" = type { %"class.std::__1::__compressed_pair.1017" }
%"class.std::__1::__compressed_pair.1017" = type { %"struct.std::__1::__compressed_pair_elem.1018", %"struct.std::__1::__compressed_pair_elem.1020" }
%"struct.std::__1::__compressed_pair_elem.1018" = type { %"struct.std::__1::__hash_node_base.1019"** }
%"struct.std::__1::__hash_node_base.1019" = type { %"struct.std::__1::__hash_node_base.1019"* }
%"struct.std::__1::__compressed_pair_elem.1020" = type { %"class.std::__1::__bucket_list_deallocator.1021" }
%"class.std::__1::__bucket_list_deallocator.1021" = type { %"class.std::__1::__compressed_pair.1022" }
%"class.std::__1::__compressed_pair.1022" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1026" = type { %"struct.std::__1::__compressed_pair_elem.1027" }
%"struct.std::__1::__compressed_pair_elem.1027" = type { %"struct.std::__1::__hash_node_base.1019" }
%"class.std::__1::__compressed_pair.1031" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1034" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1045" = type { %"class.std::__1::__compressed_pair.1046" }
%"class.std::__1::__compressed_pair.1046" = type { %"struct.std::__1::__compressed_pair_elem.1047" }
%"struct.std::__1::__compressed_pair_elem.1047" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type { %"class.v8::internal::HiddenLocalFactory", %"class.v8::internal::LocalHeap", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.1074", %"class.v8::internal::ThreadId", i64, %"class.v8::internal::RuntimeCallStats"* }
%"class.v8::internal::HiddenLocalFactory" = type { %"class.v8::internal::LocalFactory" }
%"class.v8::internal::LocalFactory" = type { %"class.v8::internal::ReadOnlyRoots" }
%"class.v8::internal::ReadOnlyRoots" = type { i64* }
%"class.std::__1::unique_ptr.1074" = type { %"class.std::__1::__compressed_pair.1075" }
%"class.std::__1::__compressed_pair.1075" = type { %"struct.std::__1::__compressed_pair_elem.1076" }
%"struct.std::__1::__compressed_pair_elem.1076" = type { %"class.v8::internal::LocalLogger"* }
%"class.v8::internal::LocalLogger" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type { i64, %"struct.v8::internal::ManagedPtrDestructor"*, %"struct.v8::internal::ManagedPtrDestructor"*, i8*, void (i8*)*, i64* }
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.1083" = type { %"class.std::__1::__compressed_pair.1084" }
%"class.std::__1::__compressed_pair.1084" = type { %"struct.std::__1::__compressed_pair_elem.1085" }
%"struct.std::__1::__compressed_pair_elem.1085" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.834", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.834" = type { %"class.v8::Context"* }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.1091" }
%"class.std::__1::unordered_map.1091" = type { %"class.std::__1::__hash_table.1092" }
%"class.std::__1::__hash_table.1092" = type <{ %"class.std::__1::unique_ptr.1093", %"class.std::__1::__compressed_pair.1103", %"class.std::__1::__compressed_pair.1108", %"class.std::__1::__compressed_pair.1111", [4 x i8] }>
%"class.std::__1::unique_ptr.1093" = type { %"class.std::__1::__compressed_pair.1094" }
%"class.std::__1::__compressed_pair.1094" = type { %"struct.std::__1::__compressed_pair_elem.1095", %"struct.std::__1::__compressed_pair_elem.1097" }
%"struct.std::__1::__compressed_pair_elem.1095" = type { %"struct.std::__1::__hash_node_base.1096"** }
%"struct.std::__1::__hash_node_base.1096" = type { %"struct.std::__1::__hash_node_base.1096"* }
%"struct.std::__1::__compressed_pair_elem.1097" = type { %"class.std::__1::__bucket_list_deallocator.1098" }
%"class.std::__1::__bucket_list_deallocator.1098" = type { %"class.std::__1::__compressed_pair.1099" }
%"class.std::__1::__compressed_pair.1099" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1103" = type { %"struct.std::__1::__compressed_pair_elem.1104" }
%"struct.std::__1::__compressed_pair_elem.1104" = type { %"struct.std::__1::__hash_node_base.1096" }
%"class.std::__1::__compressed_pair.1108" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1111" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%"struct.std::__1::atomic.1117" = type { %"struct.std::__1::__atomic_base.1118" }
%"struct.std::__1::__atomic_base.1118" = type { %"struct.std::__1::__cxx_atomic_impl.1119" }
%"struct.std::__1::__cxx_atomic_impl.1119" = type { %"struct.std::__1::__cxx_atomic_base_impl.1120" }
%"struct.std::__1::__cxx_atomic_base_impl.1120" = type { %"class.std::__1::vector.1121"* }
%"class.std::__1::vector.1121" = type { %"class.std::__1::__vector_base.1122" }
%"class.std::__1::__vector_base.1122" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.1123" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.1123" = type { %"struct.std::__1::__compressed_pair_elem.1124" }
%"struct.std::__1::__compressed_pair_elem.1124" = type { %"struct.v8::MemoryRange"* }
%"class.v8::internal::Handle<v8::internal::JSArrayBuffer>::ObjectRef" = type { %"class.v8::internal::JSArrayBuffer" }
%"class.v8::internal::JSArrayBuffer" = type { %"class.v8::internal::TorqueGeneratedJSArrayBuffer" }
%"class.v8::internal::TorqueGeneratedJSArrayBuffer" = type { %"class.v8::internal::JSObject" }
%"class.v8::internal::JSObject" = type { %"class.v8::internal::TorqueGeneratedJSObject" }
%"class.v8::internal::TorqueGeneratedJSObject" = type { %"class.v8::internal::JSReceiver" }
%"class.v8::internal::JSReceiver" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Factory" = type { i8 }
%"class.v8::internal::MessageLocation" = type { %"class.v8::internal::Handle.1161", i32, i32, i32, %"class.v8::internal::Handle.1162" }
%"class.v8::internal::Handle.1161" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::Handle.1162" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::unique_ptr.1143" = type { %"class.std::__1::__compressed_pair.1144" }
%"class.std::__1::__compressed_pair.1144" = type { %"struct.std::__1::__compressed_pair_elem.1145" }
%"struct.std::__1::__compressed_pair_elem.1145" = type { %"class.v8::ConvertableToTraceFormat"* }
%"class.v8::ConvertableToTraceFormat" = type { i32 (...)** }
%"class.v8::internal::RuntimeCallTimerScope" = type { %"class.v8::internal::RuntimeCallStats"*, %"class.v8::internal::RuntimeCallTimer" }
%"class.v8::internal::RuntimeCallTimer" = type { %"class.v8::internal::RuntimeCallCounter"*, %"class.v8::base::AtomicValue", %"class.v8::base::TimeTicks", %"class.v8::base::TimeDelta" }
%"class.v8::internal::tracing::ScopedTracer" = type { %"struct.v8::internal::tracing::ScopedTracer::Data"*, %"struct.v8::internal::tracing::ScopedTracer::Data" }
%"struct.v8::internal::tracing::ScopedTracer::Data" = type { i8*, i8*, i64 }
%"class.v8::TracingController" = type { i32 (...)** }
%"class.v8::internal::Handle<v8::internal::JSTypedArray>::ObjectRef" = type { %"class.v8::internal::JSTypedArray" }
%"class.v8::internal::JSTypedArray" = type { %"class.v8::internal::TorqueGeneratedJSTypedArray" }
%"class.v8::internal::TorqueGeneratedJSTypedArray" = type { %"class.v8::internal::JSArrayBufferView" }
%"class.v8::internal::JSArrayBufferView" = type { %"class.v8::internal::TorqueGeneratedJSArrayBufferView" }
%"class.v8::internal::TorqueGeneratedJSArrayBufferView" = type { %"class.v8::internal::JSObject" }
%"class.v8::internal::FactoryBase" = type { i8 }
%"struct.std::__1::__less.1185" = type { i8 }
%"struct.std::__1::__less.1186" = type { i8 }
%"struct.std::__1::__less.1187" = type { i8 }
%"struct.std::__1::__less.1188" = type { i8 }
%"struct.std::__1::__less.1189" = type { i8 }
%"struct.std::__1::__less.1190" = type { i8 }
%"struct.std::__1::__less" = type { i8 }
%"struct.std::__1::__less.1191" = type { i8 }
%"class.std::__1::vector.1167" = type { %"class.std::__1::__vector_base.1168" }
%"class.std::__1::__vector_base.1168" = type { i8*, i8*, %"class.std::__1::__compressed_pair.1169" }
%"class.std::__1::__compressed_pair.1169" = type { %"struct.std::__1::__compressed_pair_elem.1170" }
%"struct.std::__1::__compressed_pair_elem.1170" = type { i8* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

$_ZNSt3__16__sortIRPFbffEPfEEvT0_S5_T_ = comdat any

$_ZNSt3__17__sort4IRPFbffEPfEEjT0_S5_S5_S5_T_ = comdat any

$_ZNSt3__118__insertion_sort_3IRPFbffEPfEEvT0_S5_T_ = comdat any

$_ZNSt3__127__insertion_sort_incompleteIRPFbffEPfEEbT0_S5_T_ = comdat any

$_ZNSt3__16__sortIRPFbddEN2v88internal13UnalignedSlotIdEEEEvT0_S8_T_ = comdat any

$_ZNSt3__17__sort4IRPFbddEN2v88internal13UnalignedSlotIdEEEEjT0_S8_S8_S8_T_ = comdat any

$_ZNSt3__118__insertion_sort_3IRPFbddEN2v88internal13UnalignedSlotIdEEEEvT0_S8_T_ = comdat any

$_ZNSt3__127__insertion_sort_incompleteIRPFbddEN2v88internal13UnalignedSlotIdEEEEbT0_S8_T_ = comdat any

$_ZNSt3__16__sortIRNS_6__lessImmEEN2v88internal13UnalignedSlotImEEEEvT0_S8_T_ = comdat any

$_ZNSt3__17__sort5IRNS_6__lessImmEEN2v88internal13UnalignedSlotImEEEEjT0_S8_S8_S8_S8_T_ = comdat any

$_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessImmEEN2v88internal13UnalignedSlotImEEEEbT0_S8_T_ = comdat any

$_ZNSt3__16__sortIRNS_6__lessIllEEN2v88internal13UnalignedSlotIlEEEEvT0_S8_T_ = comdat any

$_ZNSt3__17__sort5IRNS_6__lessIllEEN2v88internal13UnalignedSlotIlEEEEjT0_S8_S8_S8_S8_T_ = comdat any

$_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessIllEEN2v88internal13UnalignedSlotIlEEEEbT0_S8_T_ = comdat any

@_ZN2v88internal12TracingFlags13runtime_statsE = external local_unnamed_addr global %"struct.std::__1::atomic.1133", align 4
@_ZZN2v88internalL31Stats_Runtime_ArrayBufferDetachEiPmPNS0_7IsolateEE27trace_event_unique_atomic20 = internal global i64 0, align 8
@.str = private unnamed_addr constant [31 x i8] c"disabled-by-default-v8.runtime\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c"V8.Runtime_Runtime_ArrayBufferDetach\00", align 1
@_ZZN2v88internalL36Stats_Runtime_TypedArrayCopyElementsEiPmPNS0_7IsolateEE27trace_event_unique_atomic35 = internal global i64 0, align 8
@.str.2 = private unnamed_addr constant [42 x i8] c"V8.Runtime_Runtime_TypedArrayCopyElements\00", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c"Check failed: %s.\00", align 1
@.str.4 = private unnamed_addr constant [25 x i8] c"args[0].IsJSTypedArray()\00", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c"args[2].IsNumber()\00", align 1
@.str.7 = private unnamed_addr constant [38 x i8] c"TryNumberToSize(*length_obj, &length)\00", align 1
@_ZN2v88internal16ElementsAccessor19elements_accessors_E = external local_unnamed_addr global %"class.v8::internal::ElementsAccessor"**, align 8
@_ZZN2v88internalL33Stats_Runtime_TypedArrayGetBufferEiPmPNS0_7IsolateEE27trace_event_unique_atomic49 = internal global i64 0, align 8
@.str.8 = private unnamed_addr constant [39 x i8] c"V8.Runtime_Runtime_TypedArrayGetBuffer\00", align 1
@_ZZN2v88internalL49Stats_Runtime_GrowableSharedArrayBufferByteLengthEiPmPNS0_7IsolateEE27trace_event_unique_atomic56 = internal global i64 0, align 8
@.str.9 = private unnamed_addr constant [55 x i8] c"V8.Runtime_Runtime_GrowableSharedArrayBufferByteLength\00", align 1
@.str.10 = private unnamed_addr constant [26 x i8] c"args[0].IsJSArrayBuffer()\00", align 1
@.str.11 = private unnamed_addr constant [33 x i8] c"0 == array_buffer->byte_length()\00", align 1
@_ZZN2v88internalL32Stats_Runtime_TypedArraySortFastEiPmPNS0_7IsolateEE27trace_event_unique_atomic89 = internal global i64 0, align 8
@.str.12 = private unnamed_addr constant [38 x i8] c"V8.Runtime_Runtime_TypedArraySortFast\00", align 1
@_ZN2v88internal32FLAG_multi_mapped_mock_allocatorE = external local_unnamed_addr global i8, align 1
@.str.13 = private unnamed_addr constant [34 x i8] c"array->buffer().IsJSArrayBuffer()\00", align 1
@_ZZN2v88internalL27Stats_Runtime_TypedArraySetEiPmPNS0_7IsolateEE28trace_event_unique_atomic176 = internal global i64 0, align 8
@.str.15 = private unnamed_addr constant [33 x i8] c"V8.Runtime_Runtime_TypedArraySet\00", align 1
@.str.16 = private unnamed_addr constant [19 x i8] c"args[3].IsNumber()\00", align 1
@.str.17 = private unnamed_addr constant [38 x i8] c"TryNumberToSize(*offset_obj, &offset)\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2v88internal25Runtime_ArrayBufferDetachEiPmPNS0_7IsolateE(i32, i64*, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 {
  %4 = alloca %"class.v8::internal::Handle<v8::internal::JSArrayBuffer>::ObjectRef", align 8
  %5 = load atomic i32, i32* getelementptr inbounds (%"struct.std::__1::atomic.1133", %"struct.std::__1::atomic.1133"* @_ZN2v88internal12TracingFlags13runtime_statsE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7, !prof !2

7:                                                ; preds = %3
  %8 = tail call fastcc i64 @_ZN2v88internalL31Stats_Runtime_ArrayBufferDetachEiPmPNS0_7IsolateE(i32 %0, i64* %1, %"class.v8::internal::Isolate"* %2)
  br label %59

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31
  %11 = bitcast %"struct.v8::internal::HandleScopeData"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 1
  %14 = load i64*, i64** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %15, align 8
  %18 = load i64, i64* %1, align 8
  %19 = and i64 %18, 1
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %32, label %21

21:                                               ; preds = %9
  %22 = and i64 %18, -4294967296
  %23 = add i64 %18, -1
  %24 = inttoptr i64 %23 to i32*
  %25 = load atomic i32, i32* %24 monotonic, align 4
  %26 = zext i32 %25 to i64
  %27 = or i64 %22, %26
  %28 = add i64 %27, 7
  %29 = inttoptr i64 %28 to i16*
  %30 = load atomic i16, i16* %29 monotonic, align 2
  %31 = icmp eq i16 %30, 1086
  br i1 %31, label %37, label %32

32:                                               ; preds = %21, %9
  %33 = bitcast %"class.v8::internal::Isolate"* %2 to %"class.v8::internal::Factory"*
  %34 = tail call i64* @_ZN2v88internal7Factory12NewTypeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %33, i32 105, i64* null, i64* null, i64* null) #9
  %35 = load i64, i64* %34, align 8
  %36 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %2, i64 %35, %"class.v8::internal::MessageLocation"* null) #9
  br label %43

37:                                               ; preds = %21
  %38 = bitcast %"class.v8::internal::Handle<v8::internal::JSArrayBuffer>::ObjectRef"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #9
  %39 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSArrayBuffer>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSArrayBuffer>::ObjectRef"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %18, i64* %39, align 8
  %40 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSArrayBuffer>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSArrayBuffer>::ObjectRef"* %4, i64 0, i32 0
  call void @_ZN2v88internal13JSArrayBuffer6DetachEb(%"class.v8::internal::JSArrayBuffer"* nonnull %40, i1 zeroext false) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #9
  %41 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 0, i32 7, i32 0, i64 4
  %42 = load i64, i64* %41, align 8
  br label %43

43:                                               ; preds = %37, %32
  %44 = phi i64 [ %36, %32 ], [ %42, %37 ]
  %45 = icmp eq %"class.v8::internal::Isolate"* %2, null
  br i1 %45, label %59, label %46

46:                                               ; preds = %43
  %47 = inttoptr i64 %12 to i64*
  %48 = getelementptr inbounds %"struct.v8::internal::HandleScopeData", %"struct.v8::internal::HandleScopeData"* %10, i64 0, i32 0
  %49 = load i64*, i64** %48, align 8
  store i64 %12, i64* %11, align 8
  %50 = load i32, i32* %15, align 8
  %51 = add nsw i32 %50, -1
  store i32 %51, i32* %15, align 8
  %52 = load i64*, i64** %13, align 8
  %53 = icmp eq i64* %52, %14
  br i1 %53, label %56, label %54

54:                                               ; preds = %46
  store i64* %14, i64** %13, align 8
  call void @_ZN2v88internal11HandleScope16DeleteExtensionsEPNS0_7IsolateE(%"class.v8::internal::Isolate"* nonnull %2) #9
  %55 = load i64*, i64** %48, align 8
  br label %56

56:                                               ; preds = %54, %46
  %57 = phi i64* [ %55, %54 ], [ %47, %46 ]
  %58 = phi i64* [ %14, %54 ], [ %49, %46 ]
  call void @_ZN2v88internal11HandleScope8ZapRangeEPmS2_(i64* %57, i64* %58) #9
  br label %59

59:                                               ; preds = %56, %43, %7
  %60 = phi i64 [ %8, %7 ], [ %44, %43 ], [ %44, %56 ]
  ret i64 %60
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @_ZN2v88internalL31Stats_Runtime_ArrayBufferDetachEiPmPNS0_7IsolateE(i32, i64*, %"class.v8::internal::Isolate"*) unnamed_addr #1 {
  %4 = alloca [2 x %"class.std::__1::unique_ptr.1143"], align 16
  %5 = alloca %"class.v8::internal::Handle<v8::internal::JSArrayBuffer>::ObjectRef", align 8
  %6 = alloca %"class.v8::internal::RuntimeCallTimerScope", align 8
  %7 = alloca %"class.v8::internal::tracing::ScopedTracer", align 8
  %8 = bitcast %"class.v8::internal::RuntimeCallTimerScope"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %8) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 40, i1 false) #9
  %9 = load atomic i32, i32* getelementptr inbounds (%"struct.std::__1::atomic.1133", %"struct.std::__1::atomic.1133"* @_ZN2v88internal12TracingFlags13runtime_statsE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %17, label %11, !prof !2

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %6, i64 0, i32 0
  %13 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %6, i64 0, i32 1
  %14 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 14, i32 0
  %15 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %15, i64 0, i32 757
  store %"class.v8::internal::RuntimeCallStats"* %16, %"class.v8::internal::RuntimeCallStats"** %12, align 8
  call void @_ZN2v88internal16RuntimeCallStats5EnterEPNS0_16RuntimeCallTimerENS0_20RuntimeCallCounterIdE(%"class.v8::internal::RuntimeCallStats"* %16, %"class.v8::internal::RuntimeCallTimer"* %13, i32 689) #9
  br label %17

17:                                               ; preds = %3, %11
  %18 = load atomic i64, i64* @_ZZN2v88internalL31Stats_Runtime_ArrayBufferDetachEiPmPNS0_7IsolateEE27trace_event_unique_atomic20 monotonic, align 8
  %19 = inttoptr i64 %18 to i8*
  %20 = icmp eq i64 %18, 0
  br i1 %20, label %21, label %29

21:                                               ; preds = %17
  %22 = call %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() #9
  %23 = bitcast %"class.v8::TracingController"* %22 to i8* (%"class.v8::TracingController"*, i8*)***
  %24 = load i8* (%"class.v8::TracingController"*, i8*)**, i8* (%"class.v8::TracingController"*, i8*)*** %23, align 8
  %25 = getelementptr inbounds i8* (%"class.v8::TracingController"*, i8*)*, i8* (%"class.v8::TracingController"*, i8*)** %24, i64 2
  %26 = load i8* (%"class.v8::TracingController"*, i8*)*, i8* (%"class.v8::TracingController"*, i8*)** %25, align 8
  %27 = call i8* %26(%"class.v8::TracingController"* %22, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0)) #9
  %28 = ptrtoint i8* %27 to i64
  store atomic volatile i64 %28, i64* @_ZZN2v88internalL31Stats_Runtime_ArrayBufferDetachEiPmPNS0_7IsolateEE27trace_event_unique_atomic20 monotonic, align 8
  br label %29

29:                                               ; preds = %17, %21
  %30 = phi i8* [ %19, %17 ], [ %27, %21 ]
  %31 = bitcast %"class.v8::internal::tracing::ScopedTracer"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %31) #9
  %32 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %7, i64 0, i32 0
  store %"struct.v8::internal::tracing::ScopedTracer::Data"* null, %"struct.v8::internal::tracing::ScopedTracer::Data"** %32, align 8
  %33 = load atomic i8, i8* %30 monotonic, align 1
  %34 = and i8 %33, 5
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %67, label %36

36:                                               ; preds = %29
  %37 = bitcast [2 x %"class.std::__1::unique_ptr.1143"]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #9
  %38 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1143"], [2 x %"class.std::__1::unique_ptr.1143"]* %4, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 16, i1 false) #9
  %39 = call %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() #9
  %40 = bitcast %"class.v8::TracingController"* %39 to i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)***
  %41 = load i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)**, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)*** %40, align 8
  %42 = getelementptr inbounds i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)*, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)** %41, i64 3
  %43 = load i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)*, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)** %42, align 8
  %44 = call i64 %43(%"class.v8::TracingController"* %39, i8 signext 88, i8* %30, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i8* null, i64 0, i64 0, i32 0, i8** null, i8* null, i64* null, %"class.std::__1::unique_ptr.1143"* nonnull %38, i32 0) #9
  %45 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1143"], [2 x %"class.std::__1::unique_ptr.1143"]* %4, i64 0, i64 1, i32 0, i32 0, i32 0
  %46 = load %"class.v8::ConvertableToTraceFormat"*, %"class.v8::ConvertableToTraceFormat"** %45, align 8
  store %"class.v8::ConvertableToTraceFormat"* null, %"class.v8::ConvertableToTraceFormat"** %45, align 8
  %47 = icmp eq %"class.v8::ConvertableToTraceFormat"* %46, null
  br i1 %47, label %53, label %48

48:                                               ; preds = %36
  %49 = bitcast %"class.v8::ConvertableToTraceFormat"* %46 to void (%"class.v8::ConvertableToTraceFormat"*)***
  %50 = load void (%"class.v8::ConvertableToTraceFormat"*)**, void (%"class.v8::ConvertableToTraceFormat"*)*** %49, align 8
  %51 = getelementptr inbounds void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %50, i64 1
  %52 = load void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %51, align 8
  call void %52(%"class.v8::ConvertableToTraceFormat"* nonnull %46) #9
  br label %53

53:                                               ; preds = %48, %36
  %54 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1143"], [2 x %"class.std::__1::unique_ptr.1143"]* %4, i64 0, i64 0, i32 0, i32 0, i32 0
  %55 = load %"class.v8::ConvertableToTraceFormat"*, %"class.v8::ConvertableToTraceFormat"** %54, align 16
  store %"class.v8::ConvertableToTraceFormat"* null, %"class.v8::ConvertableToTraceFormat"** %54, align 16
  %56 = icmp eq %"class.v8::ConvertableToTraceFormat"* %55, null
  br i1 %56, label %62, label %57

57:                                               ; preds = %53
  %58 = bitcast %"class.v8::ConvertableToTraceFormat"* %55 to void (%"class.v8::ConvertableToTraceFormat"*)***
  %59 = load void (%"class.v8::ConvertableToTraceFormat"*)**, void (%"class.v8::ConvertableToTraceFormat"*)*** %58, align 8
  %60 = getelementptr inbounds void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %59, i64 1
  %61 = load void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %60, align 8
  call void %61(%"class.v8::ConvertableToTraceFormat"* nonnull %55) #9
  br label %62

62:                                               ; preds = %53, %57
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %37) #9
  %63 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %7, i64 0, i32 1
  %64 = getelementptr inbounds %"struct.v8::internal::tracing::ScopedTracer::Data", %"struct.v8::internal::tracing::ScopedTracer::Data"* %63, i64 0, i32 0
  store i8* %30, i8** %64, align 8
  %65 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %7, i64 0, i32 1, i32 1
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i8** %65, align 8
  %66 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %7, i64 0, i32 1, i32 2
  store i64 %44, i64* %66, align 8
  store %"struct.v8::internal::tracing::ScopedTracer::Data"* %63, %"struct.v8::internal::tracing::ScopedTracer::Data"** %32, align 8
  br label %67

67:                                               ; preds = %29, %62
  %68 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31
  %69 = bitcast %"struct.v8::internal::HandleScopeData"* %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 1
  %72 = load i64*, i64** %71, align 8
  %73 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 2
  %74 = load i32, i32* %73, align 8
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* %73, align 8
  %76 = load i64, i64* %1, align 8
  %77 = and i64 %76, 1
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %90, label %79

79:                                               ; preds = %67
  %80 = and i64 %76, -4294967296
  %81 = add i64 %76, -1
  %82 = inttoptr i64 %81 to i32*
  %83 = load atomic i32, i32* %82 monotonic, align 4
  %84 = zext i32 %83 to i64
  %85 = or i64 %80, %84
  %86 = add i64 %85, 7
  %87 = inttoptr i64 %86 to i16*
  %88 = load atomic i16, i16* %87 monotonic, align 2
  %89 = icmp eq i16 %88, 1086
  br i1 %89, label %95, label %90

90:                                               ; preds = %79, %67
  %91 = bitcast %"class.v8::internal::Isolate"* %2 to %"class.v8::internal::Factory"*
  %92 = call i64* @_ZN2v88internal7Factory12NewTypeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %91, i32 105, i64* null, i64* null, i64* null) #9
  %93 = load i64, i64* %92, align 8
  %94 = call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %2, i64 %93, %"class.v8::internal::MessageLocation"* null) #9
  br label %101

95:                                               ; preds = %79
  %96 = bitcast %"class.v8::internal::Handle<v8::internal::JSArrayBuffer>::ObjectRef"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %96) #9
  %97 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSArrayBuffer>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSArrayBuffer>::ObjectRef"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %76, i64* %97, align 8
  %98 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSArrayBuffer>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSArrayBuffer>::ObjectRef"* %5, i64 0, i32 0
  call void @_ZN2v88internal13JSArrayBuffer6DetachEb(%"class.v8::internal::JSArrayBuffer"* nonnull %98, i1 zeroext false) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %96) #9
  %99 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 0, i32 7, i32 0, i64 4
  %100 = load i64, i64* %99, align 8
  br label %101

101:                                              ; preds = %95, %90
  %102 = phi i64 [ %94, %90 ], [ %100, %95 ]
  %103 = icmp eq %"class.v8::internal::Isolate"* %2, null
  br i1 %103, label %117, label %104

104:                                              ; preds = %101
  %105 = inttoptr i64 %70 to i64*
  %106 = getelementptr inbounds %"struct.v8::internal::HandleScopeData", %"struct.v8::internal::HandleScopeData"* %68, i64 0, i32 0
  %107 = load i64*, i64** %106, align 8
  store i64 %70, i64* %69, align 8
  %108 = load i32, i32* %73, align 8
  %109 = add nsw i32 %108, -1
  store i32 %109, i32* %73, align 8
  %110 = load i64*, i64** %71, align 8
  %111 = icmp eq i64* %110, %72
  br i1 %111, label %114, label %112

112:                                              ; preds = %104
  store i64* %72, i64** %71, align 8
  call void @_ZN2v88internal11HandleScope16DeleteExtensionsEPNS0_7IsolateE(%"class.v8::internal::Isolate"* nonnull %2) #9
  %113 = load i64*, i64** %106, align 8
  br label %114

114:                                              ; preds = %112, %104
  %115 = phi i64* [ %113, %112 ], [ %105, %104 ]
  %116 = phi i64* [ %72, %112 ], [ %107, %104 ]
  call void @_ZN2v88internal11HandleScope8ZapRangeEPmS2_(i64* %115, i64* %116) #9
  br label %117

117:                                              ; preds = %101, %114
  %118 = load %"struct.v8::internal::tracing::ScopedTracer::Data"*, %"struct.v8::internal::tracing::ScopedTracer::Data"** %32, align 8
  %119 = icmp eq %"struct.v8::internal::tracing::ScopedTracer::Data"* %118, null
  br i1 %119, label %136, label %120

120:                                              ; preds = %117
  %121 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %7, i64 0, i32 1, i32 0
  %122 = load i8*, i8** %121, align 8
  %123 = load atomic i8, i8* %122 monotonic, align 1
  %124 = icmp eq i8 %123, 0
  br i1 %124, label %136, label %125

125:                                              ; preds = %120
  %126 = call %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() #9
  %127 = load i8*, i8** %121, align 8
  %128 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %7, i64 0, i32 1, i32 1
  %129 = load i8*, i8** %128, align 8
  %130 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %7, i64 0, i32 1, i32 2
  %131 = load i64, i64* %130, align 8
  %132 = bitcast %"class.v8::TracingController"* %126 to void (%"class.v8::TracingController"*, i8*, i8*, i64)***
  %133 = load void (%"class.v8::TracingController"*, i8*, i8*, i64)**, void (%"class.v8::TracingController"*, i8*, i8*, i64)*** %132, align 8
  %134 = getelementptr inbounds void (%"class.v8::TracingController"*, i8*, i8*, i64)*, void (%"class.v8::TracingController"*, i8*, i8*, i64)** %133, i64 5
  %135 = load void (%"class.v8::TracingController"*, i8*, i8*, i64)*, void (%"class.v8::TracingController"*, i8*, i8*, i64)** %134, align 8
  call void %135(%"class.v8::TracingController"* %126, i8* %127, i8* %129, i64 %131) #9
  br label %136

136:                                              ; preds = %117, %120, %125
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %31) #9
  %137 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %6, i64 0, i32 0
  %138 = load %"class.v8::internal::RuntimeCallStats"*, %"class.v8::internal::RuntimeCallStats"** %137, align 8
  %139 = icmp eq %"class.v8::internal::RuntimeCallStats"* %138, null
  br i1 %139, label %142, label %140, !prof !2

140:                                              ; preds = %136
  %141 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %6, i64 0, i32 1
  call void @_ZN2v88internal16RuntimeCallStats5LeaveEPNS0_16RuntimeCallTimerE(%"class.v8::internal::RuntimeCallStats"* nonnull %138, %"class.v8::internal::RuntimeCallTimer"* %141) #9
  br label %142

142:                                              ; preds = %136, %140
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %8) #9
  ret i64 %102
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2v88internal30Runtime_TypedArrayCopyElementsEiPmPNS0_7IsolateE(i32, i64*, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 {
  %4 = load atomic i32, i32* getelementptr inbounds (%"struct.std::__1::atomic.1133", %"struct.std::__1::atomic.1133"* @_ZN2v88internal12TracingFlags13runtime_statsE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6, !prof !2

6:                                                ; preds = %3
  %7 = tail call fastcc i64 @_ZN2v88internalL36Stats_Runtime_TypedArrayCopyElementsEiPmPNS0_7IsolateE(i32 %0, i64* %1, %"class.v8::internal::Isolate"* %2)
  br label %101

8:                                                ; preds = %3
  %9 = ptrtoint i64* %1 to i64
  %10 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31
  %11 = bitcast %"struct.v8::internal::HandleScopeData"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 1
  %14 = load i64*, i64** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %15, align 8
  %18 = load i64, i64* %1, align 8
  %19 = and i64 %18, 1
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %32, label %21, !prof !3

21:                                               ; preds = %8
  %22 = and i64 %18, -4294967296
  %23 = add i64 %18, -1
  %24 = inttoptr i64 %23 to i32*
  %25 = load atomic i32, i32* %24 monotonic, align 4
  %26 = zext i32 %25 to i64
  %27 = or i64 %22, %26
  %28 = add i64 %27, 7
  %29 = inttoptr i64 %28 to i16*
  %30 = load atomic i16, i16* %29 monotonic, align 2
  %31 = icmp eq i16 %30, 1080
  br i1 %31, label %33, label %32, !prof !2

32:                                               ; preds = %21, %8
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0)) #10
  unreachable

33:                                               ; preds = %21
  %34 = add i64 %9, -8
  %35 = inttoptr i64 %34 to i64*
  %36 = add i64 %9, -16
  %37 = inttoptr i64 %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = and i64 %38, 1
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %53, label %41

41:                                               ; preds = %33
  %42 = and i64 %38, -4294967296
  %43 = add i64 %38, -1
  %44 = inttoptr i64 %43 to i32*
  %45 = load atomic i32, i32* %44 monotonic, align 4
  %46 = zext i32 %45 to i64
  %47 = or i64 %42, %46
  %48 = add i64 %47, 7
  %49 = inttoptr i64 %48 to i16*
  %50 = load atomic i16, i16* %49 monotonic, align 2
  %51 = icmp eq i16 %50, 66
  br i1 %51, label %59, label %52, !prof !2

52:                                               ; preds = %41
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0)) #10
  unreachable

53:                                               ; preds = %33
  %54 = trunc i64 %38 to i32
  %55 = icmp sgt i32 %54, -1
  br i1 %55, label %56, label %68, !prof !4

56:                                               ; preds = %53
  %57 = lshr i64 %38, 1
  %58 = and i64 %57, 2147483647
  br label %69

59:                                               ; preds = %41
  %60 = add i64 %38, 3
  %61 = inttoptr i64 %60 to double*
  %62 = load double, double* %61, align 1
  %63 = fcmp oge double %62, 0.000000e+00
  %64 = fcmp olt double %62, 0x43F0000000000000
  %65 = and i1 %63, %64
  br i1 %65, label %66, label %68, !prof !4

66:                                               ; preds = %59
  %67 = fptoui double %62 to i64
  br label %69

68:                                               ; preds = %59, %53
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7, i64 0, i64 0)) #10
  unreachable

69:                                               ; preds = %66, %56
  %70 = phi i64 [ %67, %66 ], [ %58, %56 ]
  %71 = load atomic i32, i32* %24 monotonic, align 4
  %72 = zext i32 %71 to i64
  %73 = or i64 %22, %72
  %74 = add i64 %73, 10
  %75 = inttoptr i64 %74 to i8*
  %76 = load i8, i8* %75, align 1
  %77 = lshr i8 %76, 2
  %78 = load %"class.v8::internal::ElementsAccessor"**, %"class.v8::internal::ElementsAccessor"*** @_ZN2v88internal16ElementsAccessor19elements_accessors_E, align 8
  %79 = zext i8 %77 to i64
  %80 = getelementptr inbounds %"class.v8::internal::ElementsAccessor"*, %"class.v8::internal::ElementsAccessor"** %78, i64 %79
  %81 = load %"class.v8::internal::ElementsAccessor"*, %"class.v8::internal::ElementsAccessor"** %80, align 8
  %82 = bitcast %"class.v8::internal::ElementsAccessor"* %81 to i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)***
  %83 = load i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)**, i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)*** %82, align 8
  %84 = getelementptr inbounds i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)*, i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)** %83, i64 30
  %85 = load i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)*, i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)** %84, align 8
  %86 = tail call i64 %85(%"class.v8::internal::ElementsAccessor"* %81, i64* %35, i64* %1, i64 %70, i64 0) #9
  %87 = icmp eq %"class.v8::internal::Isolate"* %2, null
  br i1 %87, label %101, label %88

88:                                               ; preds = %69
  %89 = inttoptr i64 %12 to i64*
  %90 = getelementptr inbounds %"struct.v8::internal::HandleScopeData", %"struct.v8::internal::HandleScopeData"* %10, i64 0, i32 0
  %91 = load i64*, i64** %90, align 8
  store i64 %12, i64* %11, align 8
  %92 = load i32, i32* %15, align 8
  %93 = add nsw i32 %92, -1
  store i32 %93, i32* %15, align 8
  %94 = load i64*, i64** %13, align 8
  %95 = icmp eq i64* %94, %14
  br i1 %95, label %98, label %96

96:                                               ; preds = %88
  store i64* %14, i64** %13, align 8
  tail call void @_ZN2v88internal11HandleScope16DeleteExtensionsEPNS0_7IsolateE(%"class.v8::internal::Isolate"* nonnull %2) #9
  %97 = load i64*, i64** %90, align 8
  br label %98

98:                                               ; preds = %96, %88
  %99 = phi i64* [ %97, %96 ], [ %89, %88 ]
  %100 = phi i64* [ %14, %96 ], [ %91, %88 ]
  tail call void @_ZN2v88internal11HandleScope8ZapRangeEPmS2_(i64* %99, i64* %100) #9
  br label %101

101:                                              ; preds = %98, %69, %6
  %102 = phi i64 [ %7, %6 ], [ %86, %69 ], [ %86, %98 ]
  ret i64 %102
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @_ZN2v88internalL36Stats_Runtime_TypedArrayCopyElementsEiPmPNS0_7IsolateE(i32, i64*, %"class.v8::internal::Isolate"*) unnamed_addr #1 {
  %4 = alloca [2 x %"class.std::__1::unique_ptr.1143"], align 16
  %5 = alloca %"class.v8::internal::RuntimeCallTimerScope", align 8
  %6 = alloca %"class.v8::internal::tracing::ScopedTracer", align 8
  %7 = bitcast %"class.v8::internal::RuntimeCallTimerScope"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %7) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 40, i1 false) #9
  %8 = load atomic i32, i32* getelementptr inbounds (%"struct.std::__1::atomic.1133", %"struct.std::__1::atomic.1133"* @_ZN2v88internal12TracingFlags13runtime_statsE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %16, label %10, !prof !2

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %5, i64 0, i32 0
  %12 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %5, i64 0, i32 1
  %13 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 14, i32 0
  %14 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %14, i64 0, i32 757
  store %"class.v8::internal::RuntimeCallStats"* %15, %"class.v8::internal::RuntimeCallStats"** %11, align 8
  call void @_ZN2v88internal16RuntimeCallStats5EnterEPNS0_16RuntimeCallTimerENS0_20RuntimeCallCounterIdE(%"class.v8::internal::RuntimeCallStats"* %15, %"class.v8::internal::RuntimeCallTimer"* %12, i32 691) #9
  br label %16

16:                                               ; preds = %3, %10
  %17 = load atomic i64, i64* @_ZZN2v88internalL36Stats_Runtime_TypedArrayCopyElementsEiPmPNS0_7IsolateEE27trace_event_unique_atomic35 monotonic, align 8
  %18 = inttoptr i64 %17 to i8*
  %19 = icmp eq i64 %17, 0
  br i1 %19, label %20, label %28

20:                                               ; preds = %16
  %21 = call %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() #9
  %22 = bitcast %"class.v8::TracingController"* %21 to i8* (%"class.v8::TracingController"*, i8*)***
  %23 = load i8* (%"class.v8::TracingController"*, i8*)**, i8* (%"class.v8::TracingController"*, i8*)*** %22, align 8
  %24 = getelementptr inbounds i8* (%"class.v8::TracingController"*, i8*)*, i8* (%"class.v8::TracingController"*, i8*)** %23, i64 2
  %25 = load i8* (%"class.v8::TracingController"*, i8*)*, i8* (%"class.v8::TracingController"*, i8*)** %24, align 8
  %26 = call i8* %25(%"class.v8::TracingController"* %21, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0)) #9
  %27 = ptrtoint i8* %26 to i64
  store atomic volatile i64 %27, i64* @_ZZN2v88internalL36Stats_Runtime_TypedArrayCopyElementsEiPmPNS0_7IsolateEE27trace_event_unique_atomic35 monotonic, align 8
  br label %28

28:                                               ; preds = %16, %20
  %29 = phi i8* [ %18, %16 ], [ %26, %20 ]
  %30 = bitcast %"class.v8::internal::tracing::ScopedTracer"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %30) #9
  %31 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %6, i64 0, i32 0
  store %"struct.v8::internal::tracing::ScopedTracer::Data"* null, %"struct.v8::internal::tracing::ScopedTracer::Data"** %31, align 8
  %32 = load atomic i8, i8* %29 monotonic, align 1
  %33 = and i8 %32, 5
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %66, label %35

35:                                               ; preds = %28
  %36 = bitcast [2 x %"class.std::__1::unique_ptr.1143"]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %36) #9
  %37 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1143"], [2 x %"class.std::__1::unique_ptr.1143"]* %4, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 0, i64 16, i1 false) #9
  %38 = call %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() #9
  %39 = bitcast %"class.v8::TracingController"* %38 to i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)***
  %40 = load i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)**, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)*** %39, align 8
  %41 = getelementptr inbounds i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)*, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)** %40, i64 3
  %42 = load i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)*, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)** %41, align 8
  %43 = call i64 %42(%"class.v8::TracingController"* %38, i8 signext 88, i8* %29, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.2, i64 0, i64 0), i8* null, i64 0, i64 0, i32 0, i8** null, i8* null, i64* null, %"class.std::__1::unique_ptr.1143"* nonnull %37, i32 0) #9
  %44 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1143"], [2 x %"class.std::__1::unique_ptr.1143"]* %4, i64 0, i64 1, i32 0, i32 0, i32 0
  %45 = load %"class.v8::ConvertableToTraceFormat"*, %"class.v8::ConvertableToTraceFormat"** %44, align 8
  store %"class.v8::ConvertableToTraceFormat"* null, %"class.v8::ConvertableToTraceFormat"** %44, align 8
  %46 = icmp eq %"class.v8::ConvertableToTraceFormat"* %45, null
  br i1 %46, label %52, label %47

47:                                               ; preds = %35
  %48 = bitcast %"class.v8::ConvertableToTraceFormat"* %45 to void (%"class.v8::ConvertableToTraceFormat"*)***
  %49 = load void (%"class.v8::ConvertableToTraceFormat"*)**, void (%"class.v8::ConvertableToTraceFormat"*)*** %48, align 8
  %50 = getelementptr inbounds void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %49, i64 1
  %51 = load void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %50, align 8
  call void %51(%"class.v8::ConvertableToTraceFormat"* nonnull %45) #9
  br label %52

52:                                               ; preds = %47, %35
  %53 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1143"], [2 x %"class.std::__1::unique_ptr.1143"]* %4, i64 0, i64 0, i32 0, i32 0, i32 0
  %54 = load %"class.v8::ConvertableToTraceFormat"*, %"class.v8::ConvertableToTraceFormat"** %53, align 16
  store %"class.v8::ConvertableToTraceFormat"* null, %"class.v8::ConvertableToTraceFormat"** %53, align 16
  %55 = icmp eq %"class.v8::ConvertableToTraceFormat"* %54, null
  br i1 %55, label %61, label %56

56:                                               ; preds = %52
  %57 = bitcast %"class.v8::ConvertableToTraceFormat"* %54 to void (%"class.v8::ConvertableToTraceFormat"*)***
  %58 = load void (%"class.v8::ConvertableToTraceFormat"*)**, void (%"class.v8::ConvertableToTraceFormat"*)*** %57, align 8
  %59 = getelementptr inbounds void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %58, i64 1
  %60 = load void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %59, align 8
  call void %60(%"class.v8::ConvertableToTraceFormat"* nonnull %54) #9
  br label %61

61:                                               ; preds = %52, %56
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %36) #9
  %62 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %6, i64 0, i32 1
  %63 = getelementptr inbounds %"struct.v8::internal::tracing::ScopedTracer::Data", %"struct.v8::internal::tracing::ScopedTracer::Data"* %62, i64 0, i32 0
  store i8* %29, i8** %63, align 8
  %64 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %6, i64 0, i32 1, i32 1
  store i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.2, i64 0, i64 0), i8** %64, align 8
  %65 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %6, i64 0, i32 1, i32 2
  store i64 %43, i64* %65, align 8
  store %"struct.v8::internal::tracing::ScopedTracer::Data"* %62, %"struct.v8::internal::tracing::ScopedTracer::Data"** %31, align 8
  br label %66

66:                                               ; preds = %28, %61
  %67 = ptrtoint i64* %1 to i64
  %68 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31
  %69 = bitcast %"struct.v8::internal::HandleScopeData"* %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 1
  %72 = load i64*, i64** %71, align 8
  %73 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 2
  %74 = load i32, i32* %73, align 8
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* %73, align 8
  %76 = load i64, i64* %1, align 8
  %77 = and i64 %76, 1
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %90, label %79, !prof !3

79:                                               ; preds = %66
  %80 = and i64 %76, -4294967296
  %81 = add i64 %76, -1
  %82 = inttoptr i64 %81 to i32*
  %83 = load atomic i32, i32* %82 monotonic, align 4
  %84 = zext i32 %83 to i64
  %85 = or i64 %80, %84
  %86 = add i64 %85, 7
  %87 = inttoptr i64 %86 to i16*
  %88 = load atomic i16, i16* %87 monotonic, align 2
  %89 = icmp eq i16 %88, 1080
  br i1 %89, label %91, label %90, !prof !2

90:                                               ; preds = %79, %66
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0)) #10
  unreachable

91:                                               ; preds = %79
  %92 = add i64 %67, -8
  %93 = inttoptr i64 %92 to i64*
  %94 = add i64 %67, -16
  %95 = inttoptr i64 %94 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = and i64 %96, 1
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %111, label %99

99:                                               ; preds = %91
  %100 = and i64 %96, -4294967296
  %101 = add i64 %96, -1
  %102 = inttoptr i64 %101 to i32*
  %103 = load atomic i32, i32* %102 monotonic, align 4
  %104 = zext i32 %103 to i64
  %105 = or i64 %100, %104
  %106 = add i64 %105, 7
  %107 = inttoptr i64 %106 to i16*
  %108 = load atomic i16, i16* %107 monotonic, align 2
  %109 = icmp eq i16 %108, 66
  br i1 %109, label %117, label %110, !prof !2

110:                                              ; preds = %99
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0)) #10
  unreachable

111:                                              ; preds = %91
  %112 = trunc i64 %96 to i32
  %113 = icmp sgt i32 %112, -1
  br i1 %113, label %114, label %126, !prof !4

114:                                              ; preds = %111
  %115 = lshr i64 %96, 1
  %116 = and i64 %115, 2147483647
  br label %127

117:                                              ; preds = %99
  %118 = add i64 %96, 3
  %119 = inttoptr i64 %118 to double*
  %120 = load double, double* %119, align 1
  %121 = fcmp oge double %120, 0.000000e+00
  %122 = fcmp olt double %120, 0x43F0000000000000
  %123 = and i1 %121, %122
  br i1 %123, label %124, label %126, !prof !4

124:                                              ; preds = %117
  %125 = fptoui double %120 to i64
  br label %127

126:                                              ; preds = %117, %111
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7, i64 0, i64 0)) #10
  unreachable

127:                                              ; preds = %124, %114
  %128 = phi i64 [ %125, %124 ], [ %116, %114 ]
  %129 = load atomic i32, i32* %82 monotonic, align 4
  %130 = zext i32 %129 to i64
  %131 = or i64 %80, %130
  %132 = add i64 %131, 10
  %133 = inttoptr i64 %132 to i8*
  %134 = load i8, i8* %133, align 1
  %135 = lshr i8 %134, 2
  %136 = load %"class.v8::internal::ElementsAccessor"**, %"class.v8::internal::ElementsAccessor"*** @_ZN2v88internal16ElementsAccessor19elements_accessors_E, align 8
  %137 = zext i8 %135 to i64
  %138 = getelementptr inbounds %"class.v8::internal::ElementsAccessor"*, %"class.v8::internal::ElementsAccessor"** %136, i64 %137
  %139 = load %"class.v8::internal::ElementsAccessor"*, %"class.v8::internal::ElementsAccessor"** %138, align 8
  %140 = bitcast %"class.v8::internal::ElementsAccessor"* %139 to i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)***
  %141 = load i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)**, i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)*** %140, align 8
  %142 = getelementptr inbounds i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)*, i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)** %141, i64 30
  %143 = load i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)*, i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)** %142, align 8
  %144 = call i64 %143(%"class.v8::internal::ElementsAccessor"* %139, i64* %93, i64* %1, i64 %128, i64 0) #9
  %145 = icmp eq %"class.v8::internal::Isolate"* %2, null
  br i1 %145, label %159, label %146

146:                                              ; preds = %127
  %147 = inttoptr i64 %70 to i64*
  %148 = getelementptr inbounds %"struct.v8::internal::HandleScopeData", %"struct.v8::internal::HandleScopeData"* %68, i64 0, i32 0
  %149 = load i64*, i64** %148, align 8
  store i64 %70, i64* %69, align 8
  %150 = load i32, i32* %73, align 8
  %151 = add nsw i32 %150, -1
  store i32 %151, i32* %73, align 8
  %152 = load i64*, i64** %71, align 8
  %153 = icmp eq i64* %152, %72
  br i1 %153, label %156, label %154

154:                                              ; preds = %146
  store i64* %72, i64** %71, align 8
  call void @_ZN2v88internal11HandleScope16DeleteExtensionsEPNS0_7IsolateE(%"class.v8::internal::Isolate"* nonnull %2) #9
  %155 = load i64*, i64** %148, align 8
  br label %156

156:                                              ; preds = %154, %146
  %157 = phi i64* [ %155, %154 ], [ %147, %146 ]
  %158 = phi i64* [ %72, %154 ], [ %149, %146 ]
  call void @_ZN2v88internal11HandleScope8ZapRangeEPmS2_(i64* %157, i64* %158) #9
  br label %159

159:                                              ; preds = %127, %156
  %160 = load %"struct.v8::internal::tracing::ScopedTracer::Data"*, %"struct.v8::internal::tracing::ScopedTracer::Data"** %31, align 8
  %161 = icmp eq %"struct.v8::internal::tracing::ScopedTracer::Data"* %160, null
  br i1 %161, label %178, label %162

162:                                              ; preds = %159
  %163 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %6, i64 0, i32 1, i32 0
  %164 = load i8*, i8** %163, align 8
  %165 = load atomic i8, i8* %164 monotonic, align 1
  %166 = icmp eq i8 %165, 0
  br i1 %166, label %178, label %167

167:                                              ; preds = %162
  %168 = call %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() #9
  %169 = load i8*, i8** %163, align 8
  %170 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %6, i64 0, i32 1, i32 1
  %171 = load i8*, i8** %170, align 8
  %172 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %6, i64 0, i32 1, i32 2
  %173 = load i64, i64* %172, align 8
  %174 = bitcast %"class.v8::TracingController"* %168 to void (%"class.v8::TracingController"*, i8*, i8*, i64)***
  %175 = load void (%"class.v8::TracingController"*, i8*, i8*, i64)**, void (%"class.v8::TracingController"*, i8*, i8*, i64)*** %174, align 8
  %176 = getelementptr inbounds void (%"class.v8::TracingController"*, i8*, i8*, i64)*, void (%"class.v8::TracingController"*, i8*, i8*, i64)** %175, i64 5
  %177 = load void (%"class.v8::TracingController"*, i8*, i8*, i64)*, void (%"class.v8::TracingController"*, i8*, i8*, i64)** %176, align 8
  call void %177(%"class.v8::TracingController"* %168, i8* %169, i8* %171, i64 %173) #9
  br label %178

178:                                              ; preds = %159, %162, %167
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %30) #9
  %179 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %5, i64 0, i32 0
  %180 = load %"class.v8::internal::RuntimeCallStats"*, %"class.v8::internal::RuntimeCallStats"** %179, align 8
  %181 = icmp eq %"class.v8::internal::RuntimeCallStats"* %180, null
  br i1 %181, label %184, label %182, !prof !2

182:                                              ; preds = %178
  %183 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %5, i64 0, i32 1
  call void @_ZN2v88internal16RuntimeCallStats5LeaveEPNS0_16RuntimeCallTimerE(%"class.v8::internal::RuntimeCallStats"* nonnull %180, %"class.v8::internal::RuntimeCallTimer"* %183) #9
  br label %184

184:                                              ; preds = %178, %182
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %7) #9
  ret i64 %144
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2v88internal27Runtime_TypedArrayGetBufferEiPmPNS0_7IsolateE(i32, i64*, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 {
  %4 = alloca %"class.v8::internal::Handle<v8::internal::JSTypedArray>::ObjectRef", align 8
  %5 = load atomic i32, i32* getelementptr inbounds (%"struct.std::__1::atomic.1133", %"struct.std::__1::atomic.1133"* @_ZN2v88internal12TracingFlags13runtime_statsE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7, !prof !2

7:                                                ; preds = %3
  %8 = tail call fastcc i64 @_ZN2v88internalL33Stats_Runtime_TypedArrayGetBufferEiPmPNS0_7IsolateE(i32 %0, i64* %1, %"class.v8::internal::Isolate"* %2)
  br label %53

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31
  %11 = bitcast %"struct.v8::internal::HandleScopeData"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 1
  %14 = load i64*, i64** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %15, align 8
  %18 = load i64, i64* %1, align 8
  %19 = and i64 %18, 1
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %32, label %21, !prof !3

21:                                               ; preds = %9
  %22 = and i64 %18, -4294967296
  %23 = add i64 %18, -1
  %24 = inttoptr i64 %23 to i32*
  %25 = load atomic i32, i32* %24 monotonic, align 4
  %26 = zext i32 %25 to i64
  %27 = or i64 %22, %26
  %28 = add i64 %27, 7
  %29 = inttoptr i64 %28 to i16*
  %30 = load atomic i16, i16* %29 monotonic, align 2
  %31 = icmp eq i16 %30, 1080
  br i1 %31, label %33, label %32, !prof !2

32:                                               ; preds = %21, %9
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0)) #10
  unreachable

33:                                               ; preds = %21
  %34 = bitcast %"class.v8::internal::Handle<v8::internal::JSTypedArray>::ObjectRef"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #9
  %35 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSTypedArray>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSTypedArray>::ObjectRef"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %18, i64* %35, align 8
  %36 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSTypedArray>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSTypedArray>::ObjectRef"* %4, i64 0, i32 0
  %37 = call i64* @_ZN2v88internal12JSTypedArray9GetBufferEv(%"class.v8::internal::JSTypedArray"* nonnull %36) #9
  %38 = load i64, i64* %37, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #9
  %39 = icmp eq %"class.v8::internal::Isolate"* %2, null
  br i1 %39, label %53, label %40

40:                                               ; preds = %33
  %41 = inttoptr i64 %12 to i64*
  %42 = getelementptr inbounds %"struct.v8::internal::HandleScopeData", %"struct.v8::internal::HandleScopeData"* %10, i64 0, i32 0
  %43 = load i64*, i64** %42, align 8
  store i64 %12, i64* %11, align 8
  %44 = load i32, i32* %15, align 8
  %45 = add nsw i32 %44, -1
  store i32 %45, i32* %15, align 8
  %46 = load i64*, i64** %13, align 8
  %47 = icmp eq i64* %46, %14
  br i1 %47, label %50, label %48

48:                                               ; preds = %40
  store i64* %14, i64** %13, align 8
  call void @_ZN2v88internal11HandleScope16DeleteExtensionsEPNS0_7IsolateE(%"class.v8::internal::Isolate"* nonnull %2) #9
  %49 = load i64*, i64** %42, align 8
  br label %50

50:                                               ; preds = %48, %40
  %51 = phi i64* [ %49, %48 ], [ %41, %40 ]
  %52 = phi i64* [ %14, %48 ], [ %43, %40 ]
  call void @_ZN2v88internal11HandleScope8ZapRangeEPmS2_(i64* %51, i64* %52) #9
  br label %53

53:                                               ; preds = %50, %33, %7
  %54 = phi i64 [ %8, %7 ], [ %38, %33 ], [ %38, %50 ]
  ret i64 %54
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @_ZN2v88internalL33Stats_Runtime_TypedArrayGetBufferEiPmPNS0_7IsolateE(i32, i64*, %"class.v8::internal::Isolate"*) unnamed_addr #1 {
  %4 = alloca [2 x %"class.std::__1::unique_ptr.1143"], align 16
  %5 = alloca %"class.v8::internal::Handle<v8::internal::JSTypedArray>::ObjectRef", align 8
  %6 = alloca %"class.v8::internal::RuntimeCallTimerScope", align 8
  %7 = alloca %"class.v8::internal::tracing::ScopedTracer", align 8
  %8 = bitcast %"class.v8::internal::RuntimeCallTimerScope"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %8) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 40, i1 false) #9
  %9 = load atomic i32, i32* getelementptr inbounds (%"struct.std::__1::atomic.1133", %"struct.std::__1::atomic.1133"* @_ZN2v88internal12TracingFlags13runtime_statsE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %17, label %11, !prof !2

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %6, i64 0, i32 0
  %13 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %6, i64 0, i32 1
  %14 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 14, i32 0
  %15 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %15, i64 0, i32 757
  store %"class.v8::internal::RuntimeCallStats"* %16, %"class.v8::internal::RuntimeCallStats"** %12, align 8
  call void @_ZN2v88internal16RuntimeCallStats5EnterEPNS0_16RuntimeCallTimerENS0_20RuntimeCallCounterIdE(%"class.v8::internal::RuntimeCallStats"* %16, %"class.v8::internal::RuntimeCallTimer"* %13, i32 692) #9
  br label %17

17:                                               ; preds = %3, %11
  %18 = load atomic i64, i64* @_ZZN2v88internalL33Stats_Runtime_TypedArrayGetBufferEiPmPNS0_7IsolateEE27trace_event_unique_atomic49 monotonic, align 8
  %19 = inttoptr i64 %18 to i8*
  %20 = icmp eq i64 %18, 0
  br i1 %20, label %21, label %29

21:                                               ; preds = %17
  %22 = call %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() #9
  %23 = bitcast %"class.v8::TracingController"* %22 to i8* (%"class.v8::TracingController"*, i8*)***
  %24 = load i8* (%"class.v8::TracingController"*, i8*)**, i8* (%"class.v8::TracingController"*, i8*)*** %23, align 8
  %25 = getelementptr inbounds i8* (%"class.v8::TracingController"*, i8*)*, i8* (%"class.v8::TracingController"*, i8*)** %24, i64 2
  %26 = load i8* (%"class.v8::TracingController"*, i8*)*, i8* (%"class.v8::TracingController"*, i8*)** %25, align 8
  %27 = call i8* %26(%"class.v8::TracingController"* %22, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0)) #9
  %28 = ptrtoint i8* %27 to i64
  store atomic volatile i64 %28, i64* @_ZZN2v88internalL33Stats_Runtime_TypedArrayGetBufferEiPmPNS0_7IsolateEE27trace_event_unique_atomic49 monotonic, align 8
  br label %29

29:                                               ; preds = %17, %21
  %30 = phi i8* [ %19, %17 ], [ %27, %21 ]
  %31 = bitcast %"class.v8::internal::tracing::ScopedTracer"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %31) #9
  %32 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %7, i64 0, i32 0
  store %"struct.v8::internal::tracing::ScopedTracer::Data"* null, %"struct.v8::internal::tracing::ScopedTracer::Data"** %32, align 8
  %33 = load atomic i8, i8* %30 monotonic, align 1
  %34 = and i8 %33, 5
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %67, label %36

36:                                               ; preds = %29
  %37 = bitcast [2 x %"class.std::__1::unique_ptr.1143"]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #9
  %38 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1143"], [2 x %"class.std::__1::unique_ptr.1143"]* %4, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 16, i1 false) #9
  %39 = call %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() #9
  %40 = bitcast %"class.v8::TracingController"* %39 to i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)***
  %41 = load i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)**, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)*** %40, align 8
  %42 = getelementptr inbounds i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)*, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)** %41, i64 3
  %43 = load i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)*, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)** %42, align 8
  %44 = call i64 %43(%"class.v8::TracingController"* %39, i8 signext 88, i8* %30, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.8, i64 0, i64 0), i8* null, i64 0, i64 0, i32 0, i8** null, i8* null, i64* null, %"class.std::__1::unique_ptr.1143"* nonnull %38, i32 0) #9
  %45 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1143"], [2 x %"class.std::__1::unique_ptr.1143"]* %4, i64 0, i64 1, i32 0, i32 0, i32 0
  %46 = load %"class.v8::ConvertableToTraceFormat"*, %"class.v8::ConvertableToTraceFormat"** %45, align 8
  store %"class.v8::ConvertableToTraceFormat"* null, %"class.v8::ConvertableToTraceFormat"** %45, align 8
  %47 = icmp eq %"class.v8::ConvertableToTraceFormat"* %46, null
  br i1 %47, label %53, label %48

48:                                               ; preds = %36
  %49 = bitcast %"class.v8::ConvertableToTraceFormat"* %46 to void (%"class.v8::ConvertableToTraceFormat"*)***
  %50 = load void (%"class.v8::ConvertableToTraceFormat"*)**, void (%"class.v8::ConvertableToTraceFormat"*)*** %49, align 8
  %51 = getelementptr inbounds void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %50, i64 1
  %52 = load void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %51, align 8
  call void %52(%"class.v8::ConvertableToTraceFormat"* nonnull %46) #9
  br label %53

53:                                               ; preds = %48, %36
  %54 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1143"], [2 x %"class.std::__1::unique_ptr.1143"]* %4, i64 0, i64 0, i32 0, i32 0, i32 0
  %55 = load %"class.v8::ConvertableToTraceFormat"*, %"class.v8::ConvertableToTraceFormat"** %54, align 16
  store %"class.v8::ConvertableToTraceFormat"* null, %"class.v8::ConvertableToTraceFormat"** %54, align 16
  %56 = icmp eq %"class.v8::ConvertableToTraceFormat"* %55, null
  br i1 %56, label %62, label %57

57:                                               ; preds = %53
  %58 = bitcast %"class.v8::ConvertableToTraceFormat"* %55 to void (%"class.v8::ConvertableToTraceFormat"*)***
  %59 = load void (%"class.v8::ConvertableToTraceFormat"*)**, void (%"class.v8::ConvertableToTraceFormat"*)*** %58, align 8
  %60 = getelementptr inbounds void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %59, i64 1
  %61 = load void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %60, align 8
  call void %61(%"class.v8::ConvertableToTraceFormat"* nonnull %55) #9
  br label %62

62:                                               ; preds = %53, %57
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %37) #9
  %63 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %7, i64 0, i32 1
  %64 = getelementptr inbounds %"struct.v8::internal::tracing::ScopedTracer::Data", %"struct.v8::internal::tracing::ScopedTracer::Data"* %63, i64 0, i32 0
  store i8* %30, i8** %64, align 8
  %65 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %7, i64 0, i32 1, i32 1
  store i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.8, i64 0, i64 0), i8** %65, align 8
  %66 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %7, i64 0, i32 1, i32 2
  store i64 %44, i64* %66, align 8
  store %"struct.v8::internal::tracing::ScopedTracer::Data"* %63, %"struct.v8::internal::tracing::ScopedTracer::Data"** %32, align 8
  br label %67

67:                                               ; preds = %29, %62
  %68 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31
  %69 = bitcast %"struct.v8::internal::HandleScopeData"* %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 1
  %72 = load i64*, i64** %71, align 8
  %73 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 2
  %74 = load i32, i32* %73, align 8
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* %73, align 8
  %76 = load i64, i64* %1, align 8
  %77 = and i64 %76, 1
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %90, label %79, !prof !3

79:                                               ; preds = %67
  %80 = and i64 %76, -4294967296
  %81 = add i64 %76, -1
  %82 = inttoptr i64 %81 to i32*
  %83 = load atomic i32, i32* %82 monotonic, align 4
  %84 = zext i32 %83 to i64
  %85 = or i64 %80, %84
  %86 = add i64 %85, 7
  %87 = inttoptr i64 %86 to i16*
  %88 = load atomic i16, i16* %87 monotonic, align 2
  %89 = icmp eq i16 %88, 1080
  br i1 %89, label %91, label %90, !prof !2

90:                                               ; preds = %79, %67
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0)) #10
  unreachable

91:                                               ; preds = %79
  %92 = bitcast %"class.v8::internal::Handle<v8::internal::JSTypedArray>::ObjectRef"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %92) #9
  %93 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSTypedArray>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSTypedArray>::ObjectRef"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %76, i64* %93, align 8
  %94 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSTypedArray>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSTypedArray>::ObjectRef"* %5, i64 0, i32 0
  %95 = call i64* @_ZN2v88internal12JSTypedArray9GetBufferEv(%"class.v8::internal::JSTypedArray"* nonnull %94) #9
  %96 = load i64, i64* %95, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92) #9
  %97 = icmp eq %"class.v8::internal::Isolate"* %2, null
  br i1 %97, label %111, label %98

98:                                               ; preds = %91
  %99 = inttoptr i64 %70 to i64*
  %100 = getelementptr inbounds %"struct.v8::internal::HandleScopeData", %"struct.v8::internal::HandleScopeData"* %68, i64 0, i32 0
  %101 = load i64*, i64** %100, align 8
  store i64 %70, i64* %69, align 8
  %102 = load i32, i32* %73, align 8
  %103 = add nsw i32 %102, -1
  store i32 %103, i32* %73, align 8
  %104 = load i64*, i64** %71, align 8
  %105 = icmp eq i64* %104, %72
  br i1 %105, label %108, label %106

106:                                              ; preds = %98
  store i64* %72, i64** %71, align 8
  call void @_ZN2v88internal11HandleScope16DeleteExtensionsEPNS0_7IsolateE(%"class.v8::internal::Isolate"* nonnull %2) #9
  %107 = load i64*, i64** %100, align 8
  br label %108

108:                                              ; preds = %106, %98
  %109 = phi i64* [ %107, %106 ], [ %99, %98 ]
  %110 = phi i64* [ %72, %106 ], [ %101, %98 ]
  call void @_ZN2v88internal11HandleScope8ZapRangeEPmS2_(i64* %109, i64* %110) #9
  br label %111

111:                                              ; preds = %91, %108
  %112 = load %"struct.v8::internal::tracing::ScopedTracer::Data"*, %"struct.v8::internal::tracing::ScopedTracer::Data"** %32, align 8
  %113 = icmp eq %"struct.v8::internal::tracing::ScopedTracer::Data"* %112, null
  br i1 %113, label %130, label %114

114:                                              ; preds = %111
  %115 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %7, i64 0, i32 1, i32 0
  %116 = load i8*, i8** %115, align 8
  %117 = load atomic i8, i8* %116 monotonic, align 1
  %118 = icmp eq i8 %117, 0
  br i1 %118, label %130, label %119

119:                                              ; preds = %114
  %120 = call %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() #9
  %121 = load i8*, i8** %115, align 8
  %122 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %7, i64 0, i32 1, i32 1
  %123 = load i8*, i8** %122, align 8
  %124 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %7, i64 0, i32 1, i32 2
  %125 = load i64, i64* %124, align 8
  %126 = bitcast %"class.v8::TracingController"* %120 to void (%"class.v8::TracingController"*, i8*, i8*, i64)***
  %127 = load void (%"class.v8::TracingController"*, i8*, i8*, i64)**, void (%"class.v8::TracingController"*, i8*, i8*, i64)*** %126, align 8
  %128 = getelementptr inbounds void (%"class.v8::TracingController"*, i8*, i8*, i64)*, void (%"class.v8::TracingController"*, i8*, i8*, i64)** %127, i64 5
  %129 = load void (%"class.v8::TracingController"*, i8*, i8*, i64)*, void (%"class.v8::TracingController"*, i8*, i8*, i64)** %128, align 8
  call void %129(%"class.v8::TracingController"* %120, i8* %121, i8* %123, i64 %125) #9
  br label %130

130:                                              ; preds = %111, %114, %119
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %31) #9
  %131 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %6, i64 0, i32 0
  %132 = load %"class.v8::internal::RuntimeCallStats"*, %"class.v8::internal::RuntimeCallStats"** %131, align 8
  %133 = icmp eq %"class.v8::internal::RuntimeCallStats"* %132, null
  br i1 %133, label %136, label %134, !prof !2

134:                                              ; preds = %130
  %135 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %6, i64 0, i32 1
  call void @_ZN2v88internal16RuntimeCallStats5LeaveEPNS0_16RuntimeCallTimerE(%"class.v8::internal::RuntimeCallStats"* nonnull %132, %"class.v8::internal::RuntimeCallTimer"* %135) #9
  br label %136

136:                                              ; preds = %130, %134
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %8) #9
  ret i64 %96
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2v88internal43Runtime_GrowableSharedArrayBufferByteLengthEiPmPNS0_7IsolateE(i32, i64*, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 {
  %4 = alloca %"class.v8::internal::Handle<v8::internal::JSArrayBuffer>::ObjectRef", align 8
  %5 = load atomic i32, i32* getelementptr inbounds (%"struct.std::__1::atomic.1133", %"struct.std::__1::atomic.1133"* @_ZN2v88internal12TracingFlags13runtime_statsE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7, !prof !2

7:                                                ; preds = %3
  %8 = tail call fastcc i64 @_ZN2v88internalL49Stats_Runtime_GrowableSharedArrayBufferByteLengthEiPmPNS0_7IsolateE(i32 %0, i64* %1, %"class.v8::internal::Isolate"* %2)
  br label %104

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31
  %11 = bitcast %"struct.v8::internal::HandleScopeData"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 1
  %14 = load i64*, i64** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %15, align 8
  %18 = load i64, i64* %1, align 8
  %19 = and i64 %18, 1
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %32, label %21, !prof !3

21:                                               ; preds = %9
  %22 = and i64 %18, -4294967296
  %23 = add i64 %18, -1
  %24 = inttoptr i64 %23 to i32*
  %25 = load atomic i32, i32* %24 monotonic, align 4
  %26 = zext i32 %25 to i64
  %27 = or i64 %22, %26
  %28 = add i64 %27, 7
  %29 = inttoptr i64 %28 to i16*
  %30 = load atomic i16, i16* %29 monotonic, align 2
  %31 = icmp eq i16 %30, 1086
  br i1 %31, label %33, label %32, !prof !2

32:                                               ; preds = %21, %9
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i64 0, i64 0)) #10
  unreachable

33:                                               ; preds = %21
  %34 = add i64 %18, 11
  %35 = inttoptr i64 %34 to i64*
  %36 = load i64, i64* %35, align 1
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %39, label %38, !prof !2

38:                                               ; preds = %33
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.11, i64 0, i64 0)) #10
  unreachable

39:                                               ; preds = %33
  %40 = bitcast %"class.v8::internal::Handle<v8::internal::JSArrayBuffer>::ObjectRef"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #9
  %41 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSArrayBuffer>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSArrayBuffer>::ObjectRef"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %18, i64* %41, align 8
  %42 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSArrayBuffer>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSArrayBuffer>::ObjectRef"* %4, i64 0, i32 0
  %43 = call { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* } @_ZN2v88internal13JSArrayBuffer15GetBackingStoreEv(%"class.v8::internal::JSArrayBuffer"* nonnull %42) #9
  %44 = extractvalue { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* } %43, 0
  %45 = extractvalue { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* } %43, 1
  %46 = getelementptr inbounds %"class.v8::internal::BackingStore", %"class.v8::internal::BackingStore"* %44, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load atomic i64, i64* %46 monotonic, align 8
  %48 = icmp eq %"class.std::__1::__shared_weak_count"* %45, null
  br i1 %48, label %59, label %49

49:                                               ; preds = %39
  %50 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %45, i64 0, i32 0, i32 1
  %51 = atomicrmw add i64* %50, i64 -1 acq_rel
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %53, label %59

53:                                               ; preds = %49
  %54 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %45, i64 0, i32 0
  %55 = bitcast %"class.std::__1::__shared_weak_count"* %45 to void (%"class.std::__1::__shared_count"*)***
  %56 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %55, align 8
  %57 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %56, i64 2
  %58 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %57, align 8
  call void %58(%"class.std::__1::__shared_count"* %54) #9
  call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %45) #9
  br label %59

59:                                               ; preds = %53, %49, %39
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #9
  %60 = icmp ult i64 %47, 1073741824
  br i1 %60, label %61, label %80

61:                                               ; preds = %59
  %62 = shl i64 %47, 1
  %63 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 4
  %64 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %63, align 8
  %65 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %64, null
  br i1 %65, label %68, label %66

66:                                               ; preds = %61
  %67 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %64, i64 %62) #9
  br label %87

68:                                               ; preds = %61
  %69 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 0
  %70 = load i64*, i64** %69, align 8
  %71 = load i64*, i64** %13, align 8
  %72 = icmp eq i64* %70, %71
  br i1 %72, label %73, label %75

73:                                               ; preds = %68
  %74 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %2) #9
  br label %75

75:                                               ; preds = %73, %68
  %76 = phi i64* [ %74, %73 ], [ %70, %68 ]
  %77 = ptrtoint i64* %76 to i64
  %78 = add i64 %77, 8
  %79 = inttoptr i64 %78 to i64*
  store i64* %79, i64** %69, align 8
  store i64 %62, i64* %76, align 8
  br label %87

80:                                               ; preds = %59
  %81 = bitcast %"class.v8::internal::Isolate"* %2 to %"class.v8::internal::FactoryBase"*
  %82 = uitofp i64 %47 to double
  %83 = call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewHeapNumberILNS0_14AllocationTypeE0EEENS0_6HandleINS0_10HeapNumberEEEv(%"class.v8::internal::FactoryBase"* %81) #9
  %84 = load i64, i64* %83, align 8
  %85 = add i64 %84, 3
  %86 = inttoptr i64 %85 to double*
  store double %82, double* %86, align 1
  br label %87

87:                                               ; preds = %80, %75, %66
  %88 = phi i64* [ %83, %80 ], [ %67, %66 ], [ %76, %75 ]
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq %"class.v8::internal::Isolate"* %2, null
  br i1 %90, label %104, label %91

91:                                               ; preds = %87
  %92 = inttoptr i64 %12 to i64*
  %93 = getelementptr inbounds %"struct.v8::internal::HandleScopeData", %"struct.v8::internal::HandleScopeData"* %10, i64 0, i32 0
  %94 = load i64*, i64** %93, align 8
  store i64 %12, i64* %11, align 8
  %95 = load i32, i32* %15, align 8
  %96 = add nsw i32 %95, -1
  store i32 %96, i32* %15, align 8
  %97 = load i64*, i64** %13, align 8
  %98 = icmp eq i64* %97, %14
  br i1 %98, label %101, label %99

99:                                               ; preds = %91
  store i64* %14, i64** %13, align 8
  call void @_ZN2v88internal11HandleScope16DeleteExtensionsEPNS0_7IsolateE(%"class.v8::internal::Isolate"* nonnull %2) #9
  %100 = load i64*, i64** %93, align 8
  br label %101

101:                                              ; preds = %99, %91
  %102 = phi i64* [ %100, %99 ], [ %92, %91 ]
  %103 = phi i64* [ %14, %99 ], [ %94, %91 ]
  call void @_ZN2v88internal11HandleScope8ZapRangeEPmS2_(i64* %102, i64* %103) #9
  br label %104

104:                                              ; preds = %101, %87, %7
  %105 = phi i64 [ %8, %7 ], [ %89, %87 ], [ %89, %101 ]
  ret i64 %105
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @_ZN2v88internalL49Stats_Runtime_GrowableSharedArrayBufferByteLengthEiPmPNS0_7IsolateE(i32, i64*, %"class.v8::internal::Isolate"*) unnamed_addr #1 {
  %4 = alloca [2 x %"class.std::__1::unique_ptr.1143"], align 16
  %5 = alloca %"class.v8::internal::Handle<v8::internal::JSArrayBuffer>::ObjectRef", align 8
  %6 = alloca %"class.v8::internal::RuntimeCallTimerScope", align 8
  %7 = alloca %"class.v8::internal::tracing::ScopedTracer", align 8
  %8 = bitcast %"class.v8::internal::RuntimeCallTimerScope"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %8) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 40, i1 false) #9
  %9 = load atomic i32, i32* getelementptr inbounds (%"struct.std::__1::atomic.1133", %"struct.std::__1::atomic.1133"* @_ZN2v88internal12TracingFlags13runtime_statsE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %17, label %11, !prof !2

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %6, i64 0, i32 0
  %13 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %6, i64 0, i32 1
  %14 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 14, i32 0
  %15 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %15, i64 0, i32 757
  store %"class.v8::internal::RuntimeCallStats"* %16, %"class.v8::internal::RuntimeCallStats"** %12, align 8
  call void @_ZN2v88internal16RuntimeCallStats5EnterEPNS0_16RuntimeCallTimerENS0_20RuntimeCallCounterIdE(%"class.v8::internal::RuntimeCallStats"* %16, %"class.v8::internal::RuntimeCallTimer"* %13, i32 690) #9
  br label %17

17:                                               ; preds = %3, %11
  %18 = load atomic i64, i64* @_ZZN2v88internalL49Stats_Runtime_GrowableSharedArrayBufferByteLengthEiPmPNS0_7IsolateEE27trace_event_unique_atomic56 monotonic, align 8
  %19 = inttoptr i64 %18 to i8*
  %20 = icmp eq i64 %18, 0
  br i1 %20, label %21, label %29

21:                                               ; preds = %17
  %22 = call %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() #9
  %23 = bitcast %"class.v8::TracingController"* %22 to i8* (%"class.v8::TracingController"*, i8*)***
  %24 = load i8* (%"class.v8::TracingController"*, i8*)**, i8* (%"class.v8::TracingController"*, i8*)*** %23, align 8
  %25 = getelementptr inbounds i8* (%"class.v8::TracingController"*, i8*)*, i8* (%"class.v8::TracingController"*, i8*)** %24, i64 2
  %26 = load i8* (%"class.v8::TracingController"*, i8*)*, i8* (%"class.v8::TracingController"*, i8*)** %25, align 8
  %27 = call i8* %26(%"class.v8::TracingController"* %22, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0)) #9
  %28 = ptrtoint i8* %27 to i64
  store atomic volatile i64 %28, i64* @_ZZN2v88internalL49Stats_Runtime_GrowableSharedArrayBufferByteLengthEiPmPNS0_7IsolateEE27trace_event_unique_atomic56 monotonic, align 8
  br label %29

29:                                               ; preds = %17, %21
  %30 = phi i8* [ %19, %17 ], [ %27, %21 ]
  %31 = bitcast %"class.v8::internal::tracing::ScopedTracer"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %31) #9
  %32 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %7, i64 0, i32 0
  store %"struct.v8::internal::tracing::ScopedTracer::Data"* null, %"struct.v8::internal::tracing::ScopedTracer::Data"** %32, align 8
  %33 = load atomic i8, i8* %30 monotonic, align 1
  %34 = and i8 %33, 5
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %67, label %36

36:                                               ; preds = %29
  %37 = bitcast [2 x %"class.std::__1::unique_ptr.1143"]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #9
  %38 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1143"], [2 x %"class.std::__1::unique_ptr.1143"]* %4, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 16, i1 false) #9
  %39 = call %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() #9
  %40 = bitcast %"class.v8::TracingController"* %39 to i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)***
  %41 = load i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)**, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)*** %40, align 8
  %42 = getelementptr inbounds i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)*, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)** %41, i64 3
  %43 = load i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)*, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)** %42, align 8
  %44 = call i64 %43(%"class.v8::TracingController"* %39, i8 signext 88, i8* %30, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.9, i64 0, i64 0), i8* null, i64 0, i64 0, i32 0, i8** null, i8* null, i64* null, %"class.std::__1::unique_ptr.1143"* nonnull %38, i32 0) #9
  %45 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1143"], [2 x %"class.std::__1::unique_ptr.1143"]* %4, i64 0, i64 1, i32 0, i32 0, i32 0
  %46 = load %"class.v8::ConvertableToTraceFormat"*, %"class.v8::ConvertableToTraceFormat"** %45, align 8
  store %"class.v8::ConvertableToTraceFormat"* null, %"class.v8::ConvertableToTraceFormat"** %45, align 8
  %47 = icmp eq %"class.v8::ConvertableToTraceFormat"* %46, null
  br i1 %47, label %53, label %48

48:                                               ; preds = %36
  %49 = bitcast %"class.v8::ConvertableToTraceFormat"* %46 to void (%"class.v8::ConvertableToTraceFormat"*)***
  %50 = load void (%"class.v8::ConvertableToTraceFormat"*)**, void (%"class.v8::ConvertableToTraceFormat"*)*** %49, align 8
  %51 = getelementptr inbounds void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %50, i64 1
  %52 = load void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %51, align 8
  call void %52(%"class.v8::ConvertableToTraceFormat"* nonnull %46) #9
  br label %53

53:                                               ; preds = %48, %36
  %54 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1143"], [2 x %"class.std::__1::unique_ptr.1143"]* %4, i64 0, i64 0, i32 0, i32 0, i32 0
  %55 = load %"class.v8::ConvertableToTraceFormat"*, %"class.v8::ConvertableToTraceFormat"** %54, align 16
  store %"class.v8::ConvertableToTraceFormat"* null, %"class.v8::ConvertableToTraceFormat"** %54, align 16
  %56 = icmp eq %"class.v8::ConvertableToTraceFormat"* %55, null
  br i1 %56, label %62, label %57

57:                                               ; preds = %53
  %58 = bitcast %"class.v8::ConvertableToTraceFormat"* %55 to void (%"class.v8::ConvertableToTraceFormat"*)***
  %59 = load void (%"class.v8::ConvertableToTraceFormat"*)**, void (%"class.v8::ConvertableToTraceFormat"*)*** %58, align 8
  %60 = getelementptr inbounds void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %59, i64 1
  %61 = load void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %60, align 8
  call void %61(%"class.v8::ConvertableToTraceFormat"* nonnull %55) #9
  br label %62

62:                                               ; preds = %53, %57
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %37) #9
  %63 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %7, i64 0, i32 1
  %64 = getelementptr inbounds %"struct.v8::internal::tracing::ScopedTracer::Data", %"struct.v8::internal::tracing::ScopedTracer::Data"* %63, i64 0, i32 0
  store i8* %30, i8** %64, align 8
  %65 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %7, i64 0, i32 1, i32 1
  store i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.9, i64 0, i64 0), i8** %65, align 8
  %66 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %7, i64 0, i32 1, i32 2
  store i64 %44, i64* %66, align 8
  store %"struct.v8::internal::tracing::ScopedTracer::Data"* %63, %"struct.v8::internal::tracing::ScopedTracer::Data"** %32, align 8
  br label %67

67:                                               ; preds = %29, %62
  %68 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31
  %69 = bitcast %"struct.v8::internal::HandleScopeData"* %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 1
  %72 = load i64*, i64** %71, align 8
  %73 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 2
  %74 = load i32, i32* %73, align 8
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* %73, align 8
  %76 = load i64, i64* %1, align 8
  %77 = and i64 %76, 1
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %90, label %79, !prof !3

79:                                               ; preds = %67
  %80 = and i64 %76, -4294967296
  %81 = add i64 %76, -1
  %82 = inttoptr i64 %81 to i32*
  %83 = load atomic i32, i32* %82 monotonic, align 4
  %84 = zext i32 %83 to i64
  %85 = or i64 %80, %84
  %86 = add i64 %85, 7
  %87 = inttoptr i64 %86 to i16*
  %88 = load atomic i16, i16* %87 monotonic, align 2
  %89 = icmp eq i16 %88, 1086
  br i1 %89, label %91, label %90, !prof !2

90:                                               ; preds = %79, %67
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i64 0, i64 0)) #10
  unreachable

91:                                               ; preds = %79
  %92 = add i64 %76, 11
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93, align 1
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %97, label %96, !prof !2

96:                                               ; preds = %91
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.11, i64 0, i64 0)) #10
  unreachable

97:                                               ; preds = %91
  %98 = bitcast %"class.v8::internal::Handle<v8::internal::JSArrayBuffer>::ObjectRef"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %98) #9
  %99 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSArrayBuffer>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSArrayBuffer>::ObjectRef"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %76, i64* %99, align 8
  %100 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSArrayBuffer>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSArrayBuffer>::ObjectRef"* %5, i64 0, i32 0
  %101 = call { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* } @_ZN2v88internal13JSArrayBuffer15GetBackingStoreEv(%"class.v8::internal::JSArrayBuffer"* nonnull %100) #9
  %102 = extractvalue { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* } %101, 0
  %103 = extractvalue { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* } %101, 1
  %104 = getelementptr inbounds %"class.v8::internal::BackingStore", %"class.v8::internal::BackingStore"* %102, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %105 = load atomic i64, i64* %104 monotonic, align 8
  %106 = icmp eq %"class.std::__1::__shared_weak_count"* %103, null
  br i1 %106, label %117, label %107

107:                                              ; preds = %97
  %108 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %103, i64 0, i32 0, i32 1
  %109 = atomicrmw add i64* %108, i64 -1 acq_rel
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %117

111:                                              ; preds = %107
  %112 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %103, i64 0, i32 0
  %113 = bitcast %"class.std::__1::__shared_weak_count"* %103 to void (%"class.std::__1::__shared_count"*)***
  %114 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %113, align 8
  %115 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %114, i64 2
  %116 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %115, align 8
  call void %116(%"class.std::__1::__shared_count"* %112) #9
  call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %103) #9
  br label %117

117:                                              ; preds = %111, %107, %97
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %98) #9
  %118 = icmp ult i64 %105, 1073741824
  br i1 %118, label %119, label %138

119:                                              ; preds = %117
  %120 = shl i64 %105, 1
  %121 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 4
  %122 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %121, align 8
  %123 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %122, null
  br i1 %123, label %126, label %124

124:                                              ; preds = %119
  %125 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %122, i64 %120) #9
  br label %145

126:                                              ; preds = %119
  %127 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 0
  %128 = load i64*, i64** %127, align 8
  %129 = load i64*, i64** %71, align 8
  %130 = icmp eq i64* %128, %129
  br i1 %130, label %131, label %133

131:                                              ; preds = %126
  %132 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %2) #9
  br label %133

133:                                              ; preds = %131, %126
  %134 = phi i64* [ %132, %131 ], [ %128, %126 ]
  %135 = ptrtoint i64* %134 to i64
  %136 = add i64 %135, 8
  %137 = inttoptr i64 %136 to i64*
  store i64* %137, i64** %127, align 8
  store i64 %120, i64* %134, align 8
  br label %145

138:                                              ; preds = %117
  %139 = bitcast %"class.v8::internal::Isolate"* %2 to %"class.v8::internal::FactoryBase"*
  %140 = uitofp i64 %105 to double
  %141 = call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewHeapNumberILNS0_14AllocationTypeE0EEENS0_6HandleINS0_10HeapNumberEEEv(%"class.v8::internal::FactoryBase"* %139) #9
  %142 = load i64, i64* %141, align 8
  %143 = add i64 %142, 3
  %144 = inttoptr i64 %143 to double*
  store double %140, double* %144, align 1
  br label %145

145:                                              ; preds = %138, %133, %124
  %146 = phi i64* [ %141, %138 ], [ %125, %124 ], [ %134, %133 ]
  %147 = load i64, i64* %146, align 8
  %148 = icmp eq %"class.v8::internal::Isolate"* %2, null
  br i1 %148, label %162, label %149

149:                                              ; preds = %145
  %150 = inttoptr i64 %70 to i64*
  %151 = getelementptr inbounds %"struct.v8::internal::HandleScopeData", %"struct.v8::internal::HandleScopeData"* %68, i64 0, i32 0
  %152 = load i64*, i64** %151, align 8
  store i64 %70, i64* %69, align 8
  %153 = load i32, i32* %73, align 8
  %154 = add nsw i32 %153, -1
  store i32 %154, i32* %73, align 8
  %155 = load i64*, i64** %71, align 8
  %156 = icmp eq i64* %155, %72
  br i1 %156, label %159, label %157

157:                                              ; preds = %149
  store i64* %72, i64** %71, align 8
  call void @_ZN2v88internal11HandleScope16DeleteExtensionsEPNS0_7IsolateE(%"class.v8::internal::Isolate"* nonnull %2) #9
  %158 = load i64*, i64** %151, align 8
  br label %159

159:                                              ; preds = %157, %149
  %160 = phi i64* [ %158, %157 ], [ %150, %149 ]
  %161 = phi i64* [ %72, %157 ], [ %152, %149 ]
  call void @_ZN2v88internal11HandleScope8ZapRangeEPmS2_(i64* %160, i64* %161) #9
  br label %162

162:                                              ; preds = %145, %159
  %163 = load %"struct.v8::internal::tracing::ScopedTracer::Data"*, %"struct.v8::internal::tracing::ScopedTracer::Data"** %32, align 8
  %164 = icmp eq %"struct.v8::internal::tracing::ScopedTracer::Data"* %163, null
  br i1 %164, label %181, label %165

165:                                              ; preds = %162
  %166 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %7, i64 0, i32 1, i32 0
  %167 = load i8*, i8** %166, align 8
  %168 = load atomic i8, i8* %167 monotonic, align 1
  %169 = icmp eq i8 %168, 0
  br i1 %169, label %181, label %170

170:                                              ; preds = %165
  %171 = call %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() #9
  %172 = load i8*, i8** %166, align 8
  %173 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %7, i64 0, i32 1, i32 1
  %174 = load i8*, i8** %173, align 8
  %175 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %7, i64 0, i32 1, i32 2
  %176 = load i64, i64* %175, align 8
  %177 = bitcast %"class.v8::TracingController"* %171 to void (%"class.v8::TracingController"*, i8*, i8*, i64)***
  %178 = load void (%"class.v8::TracingController"*, i8*, i8*, i64)**, void (%"class.v8::TracingController"*, i8*, i8*, i64)*** %177, align 8
  %179 = getelementptr inbounds void (%"class.v8::TracingController"*, i8*, i8*, i64)*, void (%"class.v8::TracingController"*, i8*, i8*, i64)** %178, i64 5
  %180 = load void (%"class.v8::TracingController"*, i8*, i8*, i64)*, void (%"class.v8::TracingController"*, i8*, i8*, i64)** %179, align 8
  call void %180(%"class.v8::TracingController"* %171, i8* %172, i8* %174, i64 %176) #9
  br label %181

181:                                              ; preds = %162, %165, %170
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %31) #9
  %182 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %6, i64 0, i32 0
  %183 = load %"class.v8::internal::RuntimeCallStats"*, %"class.v8::internal::RuntimeCallStats"** %182, align 8
  %184 = icmp eq %"class.v8::internal::RuntimeCallStats"* %183, null
  br i1 %184, label %187, label %185, !prof !2

185:                                              ; preds = %181
  %186 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %6, i64 0, i32 1
  call void @_ZN2v88internal16RuntimeCallStats5LeaveEPNS0_16RuntimeCallTimerE(%"class.v8::internal::RuntimeCallStats"* nonnull %183, %"class.v8::internal::RuntimeCallTimer"* %186) #9
  br label %187

187:                                              ; preds = %181, %185
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %8) #9
  ret i64 %147
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2v88internal26Runtime_TypedArraySortFastEiPmPNS0_7IsolateE(i32, i64*, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 {
  %4 = alloca %"struct.std::__1::__less.1185", align 1
  %5 = alloca %"struct.std::__1::__less.1186", align 1
  %6 = alloca %"struct.std::__1::__less.1187", align 1
  %7 = alloca %"struct.std::__1::__less.1188", align 1
  %8 = alloca %"struct.std::__1::__less.1189", align 1
  %9 = alloca %"struct.std::__1::__less.1190", align 1
  %10 = alloca i1 (float, float)*, align 8
  %11 = alloca i1 (double, double)*, align 8
  %12 = alloca %"struct.std::__1::__less.1185", align 1
  %13 = alloca %"struct.std::__1::__less", align 1
  %14 = alloca %"struct.std::__1::__less.1191", align 1
  %15 = alloca %"class.std::__1::vector.1167", align 8
  %16 = alloca %"class.v8::internal::Handle<v8::internal::JSTypedArray>::ObjectRef", align 8
  %17 = load atomic i32, i32* getelementptr inbounds (%"struct.std::__1::atomic.1133", %"struct.std::__1::atomic.1133"* @_ZN2v88internal12TracingFlags13runtime_statsE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %21, label %19, !prof !2

19:                                               ; preds = %3
  %20 = tail call fastcc i64 @_ZN2v88internalL32Stats_Runtime_TypedArraySortFastEiPmPNS0_7IsolateE(i32 %0, i64* %1, %"class.v8::internal::Isolate"* %2)
  br label %674

21:                                               ; preds = %3
  %22 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31
  %23 = bitcast %"struct.v8::internal::HandleScopeData"* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 1
  %26 = load i64*, i64** %25, align 8
  %27 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 2
  %28 = load i32, i32* %27, align 8
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %27, align 8
  %30 = load i64, i64* %1, align 8
  %31 = and i64 %30, 1
  %32 = icmp eq i64 %31, 0
  %33 = inttoptr i64 %24 to i64*
  br i1 %32, label %45, label %34, !prof !3

34:                                               ; preds = %21
  %35 = and i64 %30, -4294967296
  %36 = add i64 %30, -1
  %37 = inttoptr i64 %36 to i32*
  %38 = load atomic i32, i32* %37 monotonic, align 4
  %39 = zext i32 %38 to i64
  %40 = or i64 %35, %39
  %41 = add i64 %40, 7
  %42 = inttoptr i64 %41 to i16*
  %43 = load atomic i16, i16* %42 monotonic, align 2
  %44 = icmp eq i16 %43, 1080
  br i1 %44, label %46, label %45, !prof !2

45:                                               ; preds = %34, %21
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0)) #10
  unreachable

46:                                               ; preds = %34
  %47 = load i8, i8* @_ZN2v88internal32FLAG_multi_mapped_mock_allocatorE, align 1, !range !5
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %49, label %659

49:                                               ; preds = %46
  %50 = add i64 %30, 31
  %51 = inttoptr i64 %50 to i64*
  %52 = load i64, i64* %51, align 1
  %53 = add i64 %30, 11
  %54 = inttoptr i64 %53 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = zext i32 %55 to i64
  %57 = or i64 %35, %56
  %58 = add i64 %57, -1
  %59 = inttoptr i64 %58 to i32*
  %60 = load atomic i32, i32* %59 monotonic, align 4
  %61 = zext i32 %60 to i64
  %62 = or i64 %35, %61
  %63 = add i64 %62, 7
  %64 = inttoptr i64 %63 to i16*
  %65 = load atomic i16, i16* %64 monotonic, align 2
  %66 = icmp eq i16 %65, 1086
  br i1 %66, label %68, label %67, !prof !2

67:                                               ; preds = %49
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.13, i64 0, i64 0)) #10
  unreachable

68:                                               ; preds = %49
  %69 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 4
  %70 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %69, align 8
  %71 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %70, null
  br i1 %71, label %75, label %72

72:                                               ; preds = %68
  %73 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %70, i64 %57) #9
  %74 = load i64, i64* %73, align 8
  br label %85

75:                                               ; preds = %68
  %76 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 0
  %77 = icmp eq i64* %26, %33
  br i1 %77, label %78, label %80

78:                                               ; preds = %75
  %79 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %2) #9
  br label %80

80:                                               ; preds = %78, %75
  %81 = phi i64* [ %79, %78 ], [ %33, %75 ]
  %82 = ptrtoint i64* %81 to i64
  %83 = add i64 %82, 8
  %84 = inttoptr i64 %83 to i64*
  store i64* %84, i64** %76, align 8
  store i64 %57, i64* %81, align 8
  br label %85

85:                                               ; preds = %80, %72
  %86 = phi i64 [ %74, %72 ], [ %57, %80 ]
  %87 = add i64 %86, 43
  %88 = inttoptr i64 %87 to i32*
  %89 = load atomic i32, i32* %88 monotonic, align 4
  %90 = and i32 %89, 16
  %91 = icmp ne i32 %90, 0
  %92 = bitcast %"class.std::__1::vector.1167"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %92) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %92, i8 0, i64 24, i1 false) #9
  br i1 %91, label %93, label %279

93:                                               ; preds = %85
  %94 = load i64, i64* %1, align 8
  %95 = add i64 %94, 23
  %96 = inttoptr i64 %95 to i64*
  %97 = load i64, i64* %96, align 1
  %98 = icmp ugt i64 %97, 131064
  br i1 %98, label %106, label %99

99:                                               ; preds = %93
  %100 = bitcast %"class.v8::internal::Isolate"* %2 to %"class.v8::internal::FactoryBase"*
  %101 = trunc i64 %97 to i32
  %102 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE12NewByteArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %100, i32 %101, i8 zeroext 0) #9
  %103 = load i64, i64* %102, align 8
  %104 = add i64 %103, 7
  %105 = inttoptr i64 %104 to i8*
  br label %109

106:                                              ; preds = %93
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.1167"* nonnull %15, i64 %97) #9
  %107 = getelementptr inbounds %"class.std::__1::vector.1167", %"class.std::__1::vector.1167"* %15, i64 0, i32 0, i32 0
  %108 = load i8*, i8** %107, align 8
  br label %109

109:                                              ; preds = %106, %99
  %110 = phi i8* [ %105, %99 ], [ %108, %106 ]
  %111 = load i64, i64* %1, align 8
  %112 = add i64 %111, 39
  %113 = inttoptr i64 %112 to i64*
  %114 = load i64, i64* %113, align 1
  %115 = add i64 %111, 47
  %116 = inttoptr i64 %115 to i32*
  %117 = load i32, i32* %116, align 4
  %118 = zext i32 %117 to i64
  %119 = add i64 %114, %118
  %120 = inttoptr i64 %119 to i8*
  %121 = icmp eq i64 %97, 0
  br i1 %121, label %135, label %122

122:                                              ; preds = %109, %129
  %123 = phi i8* [ %130, %129 ], [ %110, %109 ]
  %124 = phi i64 [ %133, %129 ], [ %97, %109 ]
  %125 = phi i8* [ %131, %129 ], [ %120, %109 ]
  %126 = ptrtoint i8* %123 to i64
  %127 = and i64 %126, 7
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %135, label %129

129:                                              ; preds = %122
  %130 = getelementptr inbounds i8, i8* %123, i64 1
  %131 = getelementptr inbounds i8, i8* %125, i64 1
  %132 = load atomic i8, i8* %125 monotonic, align 1
  store atomic volatile i8 %132, i8* %123 monotonic, align 1
  %133 = add i64 %124, -1
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %135, label %122

135:                                              ; preds = %129, %122, %109
  %136 = phi i8* [ %120, %109 ], [ %125, %122 ], [ %131, %129 ]
  %137 = phi i64 [ 0, %109 ], [ %124, %122 ], [ 0, %129 ]
  %138 = phi i8* [ %110, %109 ], [ %123, %122 ], [ %130, %129 ]
  %139 = ptrtoint i8* %136 to i64
  %140 = and i64 %139, 7
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %142, label %224

142:                                              ; preds = %135
  %143 = ptrtoint i8* %138 to i64
  %144 = and i64 %143, 7
  %145 = icmp eq i64 %144, 0
  %146 = icmp ugt i64 %137, 7
  %147 = and i1 %146, %145
  br i1 %147, label %148, label %224

148:                                              ; preds = %142
  %149 = add i64 %137, -8
  %150 = lshr i64 %149, 3
  %151 = add nuw nsw i64 %150, 1
  %152 = and i64 %151, 7
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %167, label %154

154:                                              ; preds = %148, %154
  %155 = phi i8* [ %162, %154 ], [ %138, %148 ]
  %156 = phi i64 [ %164, %154 ], [ %137, %148 ]
  %157 = phi i8* [ %163, %154 ], [ %136, %148 ]
  %158 = phi i64 [ %165, %154 ], [ %152, %148 ]
  %159 = bitcast i8* %155 to i64*
  %160 = bitcast i8* %157 to i64*
  %161 = load atomic i64, i64* %160 monotonic, align 8
  store atomic volatile i64 %161, i64* %159 monotonic, align 8
  %162 = getelementptr inbounds i8, i8* %155, i64 8
  %163 = getelementptr inbounds i8, i8* %157, i64 8
  %164 = add i64 %156, -8
  %165 = add i64 %158, -1
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %167, label %154, !llvm.loop !6

167:                                              ; preds = %154, %148
  %168 = phi i8* [ %138, %148 ], [ %162, %154 ]
  %169 = phi i64 [ %137, %148 ], [ %164, %154 ]
  %170 = phi i8* [ %136, %148 ], [ %163, %154 ]
  %171 = phi i8* [ undef, %148 ], [ %162, %154 ]
  %172 = phi i8* [ undef, %148 ], [ %163, %154 ]
  %173 = icmp ult i64 %149, 56
  br i1 %173, label %220, label %174

174:                                              ; preds = %167, %174
  %175 = phi i8* [ %216, %174 ], [ %168, %167 ]
  %176 = phi i64 [ %218, %174 ], [ %169, %167 ]
  %177 = phi i8* [ %217, %174 ], [ %170, %167 ]
  %178 = bitcast i8* %175 to i64*
  %179 = bitcast i8* %177 to i64*
  %180 = load atomic i64, i64* %179 monotonic, align 8
  store atomic volatile i64 %180, i64* %178 monotonic, align 8
  %181 = getelementptr inbounds i8, i8* %175, i64 8
  %182 = getelementptr inbounds i8, i8* %177, i64 8
  %183 = bitcast i8* %181 to i64*
  %184 = bitcast i8* %182 to i64*
  %185 = load atomic i64, i64* %184 monotonic, align 8
  store atomic volatile i64 %185, i64* %183 monotonic, align 8
  %186 = getelementptr inbounds i8, i8* %175, i64 16
  %187 = getelementptr inbounds i8, i8* %177, i64 16
  %188 = bitcast i8* %186 to i64*
  %189 = bitcast i8* %187 to i64*
  %190 = load atomic i64, i64* %189 monotonic, align 8
  store atomic volatile i64 %190, i64* %188 monotonic, align 8
  %191 = getelementptr inbounds i8, i8* %175, i64 24
  %192 = getelementptr inbounds i8, i8* %177, i64 24
  %193 = bitcast i8* %191 to i64*
  %194 = bitcast i8* %192 to i64*
  %195 = load atomic i64, i64* %194 monotonic, align 8
  store atomic volatile i64 %195, i64* %193 monotonic, align 8
  %196 = getelementptr inbounds i8, i8* %175, i64 32
  %197 = getelementptr inbounds i8, i8* %177, i64 32
  %198 = bitcast i8* %196 to i64*
  %199 = bitcast i8* %197 to i64*
  %200 = load atomic i64, i64* %199 monotonic, align 8
  store atomic volatile i64 %200, i64* %198 monotonic, align 8
  %201 = getelementptr inbounds i8, i8* %175, i64 40
  %202 = getelementptr inbounds i8, i8* %177, i64 40
  %203 = bitcast i8* %201 to i64*
  %204 = bitcast i8* %202 to i64*
  %205 = load atomic i64, i64* %204 monotonic, align 8
  store atomic volatile i64 %205, i64* %203 monotonic, align 8
  %206 = getelementptr inbounds i8, i8* %175, i64 48
  %207 = getelementptr inbounds i8, i8* %177, i64 48
  %208 = bitcast i8* %206 to i64*
  %209 = bitcast i8* %207 to i64*
  %210 = load atomic i64, i64* %209 monotonic, align 8
  store atomic volatile i64 %210, i64* %208 monotonic, align 8
  %211 = getelementptr inbounds i8, i8* %175, i64 56
  %212 = getelementptr inbounds i8, i8* %177, i64 56
  %213 = bitcast i8* %211 to i64*
  %214 = bitcast i8* %212 to i64*
  %215 = load atomic i64, i64* %214 monotonic, align 8
  store atomic volatile i64 %215, i64* %213 monotonic, align 8
  %216 = getelementptr inbounds i8, i8* %175, i64 64
  %217 = getelementptr inbounds i8, i8* %177, i64 64
  %218 = add i64 %176, -64
  %219 = icmp ugt i64 %218, 7
  br i1 %219, label %174, label %220

220:                                              ; preds = %174, %167
  %221 = phi i8* [ %171, %167 ], [ %216, %174 ]
  %222 = phi i8* [ %172, %167 ], [ %217, %174 ]
  %223 = and i64 %137, 7
  br label %224

224:                                              ; preds = %220, %142, %135
  %225 = phi i8* [ %136, %142 ], [ %136, %135 ], [ %222, %220 ]
  %226 = phi i64 [ %137, %142 ], [ %137, %135 ], [ %223, %220 ]
  %227 = phi i8* [ %138, %142 ], [ %138, %135 ], [ %221, %220 ]
  %228 = icmp eq i64 %226, 0
  br i1 %228, label %279, label %229

229:                                              ; preds = %224
  %230 = add i64 %226, -1
  %231 = and i64 %226, 7
  %232 = icmp eq i64 %231, 0
  br i1 %232, label %244, label %233

233:                                              ; preds = %229, %233
  %234 = phi i8* [ %238, %233 ], [ %227, %229 ]
  %235 = phi i64 [ %241, %233 ], [ %226, %229 ]
  %236 = phi i8* [ %239, %233 ], [ %225, %229 ]
  %237 = phi i64 [ %242, %233 ], [ %231, %229 ]
  %238 = getelementptr inbounds i8, i8* %234, i64 1
  %239 = getelementptr inbounds i8, i8* %236, i64 1
  %240 = load atomic i8, i8* %236 monotonic, align 1
  store atomic volatile i8 %240, i8* %234 monotonic, align 1
  %241 = add i64 %235, -1
  %242 = add i64 %237, -1
  %243 = icmp eq i64 %242, 0
  br i1 %243, label %244, label %233, !llvm.loop !8

244:                                              ; preds = %233, %229
  %245 = phi i8* [ %227, %229 ], [ %238, %233 ]
  %246 = phi i64 [ %226, %229 ], [ %241, %233 ]
  %247 = phi i8* [ %225, %229 ], [ %239, %233 ]
  %248 = icmp ult i64 %230, 7
  br i1 %248, label %279, label %249

249:                                              ; preds = %244, %249
  %250 = phi i8* [ %274, %249 ], [ %245, %244 ]
  %251 = phi i64 [ %277, %249 ], [ %246, %244 ]
  %252 = phi i8* [ %275, %249 ], [ %247, %244 ]
  %253 = getelementptr inbounds i8, i8* %250, i64 1
  %254 = getelementptr inbounds i8, i8* %252, i64 1
  %255 = load atomic i8, i8* %252 monotonic, align 1
  store atomic volatile i8 %255, i8* %250 monotonic, align 1
  %256 = getelementptr inbounds i8, i8* %250, i64 2
  %257 = getelementptr inbounds i8, i8* %252, i64 2
  %258 = load atomic i8, i8* %254 monotonic, align 1
  store atomic volatile i8 %258, i8* %253 monotonic, align 1
  %259 = getelementptr inbounds i8, i8* %250, i64 3
  %260 = getelementptr inbounds i8, i8* %252, i64 3
  %261 = load atomic i8, i8* %257 monotonic, align 1
  store atomic volatile i8 %261, i8* %256 monotonic, align 1
  %262 = getelementptr inbounds i8, i8* %250, i64 4
  %263 = getelementptr inbounds i8, i8* %252, i64 4
  %264 = load atomic i8, i8* %260 monotonic, align 1
  store atomic volatile i8 %264, i8* %259 monotonic, align 1
  %265 = getelementptr inbounds i8, i8* %250, i64 5
  %266 = getelementptr inbounds i8, i8* %252, i64 5
  %267 = load atomic i8, i8* %263 monotonic, align 1
  store atomic volatile i8 %267, i8* %262 monotonic, align 1
  %268 = getelementptr inbounds i8, i8* %250, i64 6
  %269 = getelementptr inbounds i8, i8* %252, i64 6
  %270 = load atomic i8, i8* %266 monotonic, align 1
  store atomic volatile i8 %270, i8* %265 monotonic, align 1
  %271 = getelementptr inbounds i8, i8* %250, i64 7
  %272 = getelementptr inbounds i8, i8* %252, i64 7
  %273 = load atomic i8, i8* %269 monotonic, align 1
  store atomic volatile i8 %273, i8* %268 monotonic, align 1
  %274 = getelementptr inbounds i8, i8* %250, i64 8
  %275 = getelementptr inbounds i8, i8* %252, i64 8
  %276 = load atomic i8, i8* %272 monotonic, align 1
  store atomic volatile i8 %276, i8* %271 monotonic, align 1
  %277 = add i64 %251, -8
  %278 = icmp eq i64 %277, 0
  br i1 %278, label %279, label %249

279:                                              ; preds = %244, %249, %224, %85
  %280 = phi i8* [ null, %85 ], [ %110, %224 ], [ %110, %249 ], [ %110, %244 ]
  %281 = bitcast %"class.v8::internal::Handle<v8::internal::JSTypedArray>::ObjectRef"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %281) #9
  %282 = load i64, i64* %1, align 8
  %283 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSTypedArray>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSTypedArray>::ObjectRef"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %282, i64* %283, align 8
  %284 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSTypedArray>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSTypedArray>::ObjectRef"* %16, i64 0, i32 0
  %285 = call i32 @_ZN2v88internal12JSTypedArray4typeEv(%"class.v8::internal::JSTypedArray"* nonnull %284) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %281) #9
  switch i32 %285, label %476 [
    i32 2, label %286
    i32 1, label %302
    i32 4, label %318
    i32 3, label %335
    i32 6, label %352
    i32 5, label %369
    i32 7, label %386
    i32 8, label %403
    i32 9, label %422
    i32 11, label %438
    i32 10, label %457
  ]

286:                                              ; preds = %279
  br i1 %91, label %298, label %287

287:                                              ; preds = %286
  %288 = load i64, i64* %1, align 8
  %289 = add i64 %288, 39
  %290 = inttoptr i64 %289 to i64*
  %291 = load i64, i64* %290, align 1
  %292 = add i64 %288, 47
  %293 = inttoptr i64 %292 to i32*
  %294 = load i32, i32* %293, align 4
  %295 = zext i32 %294 to i64
  %296 = add i64 %291, %295
  %297 = inttoptr i64 %296 to i8*
  br label %298

298:                                              ; preds = %287, %286
  %299 = phi i8* [ %297, %287 ], [ %280, %286 ]
  %300 = getelementptr inbounds i8, i8* %299, i64 %52
  %301 = getelementptr inbounds %"struct.std::__1::__less.1185", %"struct.std::__1::__less.1185"* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %301) #9
  call void @_ZNSt3__16__sortIRNS_6__lessIhhEEPhEEvT0_S5_T_(i8* %299, i8* %300, %"struct.std::__1::__less.1185"* nonnull dereferenceable(1) %4) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %301) #9
  br label %476

302:                                              ; preds = %279
  br i1 %91, label %314, label %303

303:                                              ; preds = %302
  %304 = load i64, i64* %1, align 8
  %305 = add i64 %304, 39
  %306 = inttoptr i64 %305 to i64*
  %307 = load i64, i64* %306, align 1
  %308 = add i64 %304, 47
  %309 = inttoptr i64 %308 to i32*
  %310 = load i32, i32* %309, align 4
  %311 = zext i32 %310 to i64
  %312 = add i64 %307, %311
  %313 = inttoptr i64 %312 to i8*
  br label %314

314:                                              ; preds = %303, %302
  %315 = phi i8* [ %313, %303 ], [ %280, %302 ]
  %316 = getelementptr inbounds i8, i8* %315, i64 %52
  %317 = getelementptr inbounds %"struct.std::__1::__less.1186", %"struct.std::__1::__less.1186"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %317) #9
  call void @_ZNSt3__16__sortIRNS_6__lessIaaEEPaEEvT0_S5_T_(i8* %315, i8* %316, %"struct.std::__1::__less.1186"* nonnull dereferenceable(1) %5) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %317) #9
  br label %476

318:                                              ; preds = %279
  br i1 %91, label %330, label %319

319:                                              ; preds = %318
  %320 = load i64, i64* %1, align 8
  %321 = add i64 %320, 39
  %322 = inttoptr i64 %321 to i64*
  %323 = load i64, i64* %322, align 1
  %324 = add i64 %320, 47
  %325 = inttoptr i64 %324 to i32*
  %326 = load i32, i32* %325, align 4
  %327 = zext i32 %326 to i64
  %328 = add i64 %323, %327
  %329 = inttoptr i64 %328 to i8*
  br label %330

330:                                              ; preds = %319, %318
  %331 = phi i8* [ %329, %319 ], [ %280, %318 ]
  %332 = bitcast i8* %331 to i16*
  %333 = getelementptr inbounds i16, i16* %332, i64 %52
  %334 = getelementptr inbounds %"struct.std::__1::__less.1187", %"struct.std::__1::__less.1187"* %6, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %334) #9
  call void @_ZNSt3__16__sortIRNS_6__lessIttEEPtEEvT0_S5_T_(i16* %332, i16* %333, %"struct.std::__1::__less.1187"* nonnull dereferenceable(1) %6) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %334) #9
  br label %476

335:                                              ; preds = %279
  br i1 %91, label %347, label %336

336:                                              ; preds = %335
  %337 = load i64, i64* %1, align 8
  %338 = add i64 %337, 39
  %339 = inttoptr i64 %338 to i64*
  %340 = load i64, i64* %339, align 1
  %341 = add i64 %337, 47
  %342 = inttoptr i64 %341 to i32*
  %343 = load i32, i32* %342, align 4
  %344 = zext i32 %343 to i64
  %345 = add i64 %340, %344
  %346 = inttoptr i64 %345 to i8*
  br label %347

347:                                              ; preds = %336, %335
  %348 = phi i8* [ %346, %336 ], [ %280, %335 ]
  %349 = bitcast i8* %348 to i16*
  %350 = getelementptr inbounds i16, i16* %349, i64 %52
  %351 = getelementptr inbounds %"struct.std::__1::__less.1188", %"struct.std::__1::__less.1188"* %7, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %351) #9
  call void @_ZNSt3__16__sortIRNS_6__lessIssEEPsEEvT0_S5_T_(i16* %349, i16* %350, %"struct.std::__1::__less.1188"* nonnull dereferenceable(1) %7) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %351) #9
  br label %476

352:                                              ; preds = %279
  br i1 %91, label %364, label %353

353:                                              ; preds = %352
  %354 = load i64, i64* %1, align 8
  %355 = add i64 %354, 39
  %356 = inttoptr i64 %355 to i64*
  %357 = load i64, i64* %356, align 1
  %358 = add i64 %354, 47
  %359 = inttoptr i64 %358 to i32*
  %360 = load i32, i32* %359, align 4
  %361 = zext i32 %360 to i64
  %362 = add i64 %357, %361
  %363 = inttoptr i64 %362 to i8*
  br label %364

364:                                              ; preds = %353, %352
  %365 = phi i8* [ %363, %353 ], [ %280, %352 ]
  %366 = bitcast i8* %365 to i32*
  %367 = getelementptr inbounds i32, i32* %366, i64 %52
  %368 = getelementptr inbounds %"struct.std::__1::__less.1189", %"struct.std::__1::__less.1189"* %8, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %368) #9
  call void @_ZNSt3__16__sortIRNS_6__lessIjjEEPjEEvT0_S5_T_(i32* %366, i32* %367, %"struct.std::__1::__less.1189"* nonnull dereferenceable(1) %8) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %368) #9
  br label %476

369:                                              ; preds = %279
  br i1 %91, label %381, label %370

370:                                              ; preds = %369
  %371 = load i64, i64* %1, align 8
  %372 = add i64 %371, 39
  %373 = inttoptr i64 %372 to i64*
  %374 = load i64, i64* %373, align 1
  %375 = add i64 %371, 47
  %376 = inttoptr i64 %375 to i32*
  %377 = load i32, i32* %376, align 4
  %378 = zext i32 %377 to i64
  %379 = add i64 %374, %378
  %380 = inttoptr i64 %379 to i8*
  br label %381

381:                                              ; preds = %370, %369
  %382 = phi i8* [ %380, %370 ], [ %280, %369 ]
  %383 = bitcast i8* %382 to i32*
  %384 = getelementptr inbounds i32, i32* %383, i64 %52
  %385 = getelementptr inbounds %"struct.std::__1::__less.1190", %"struct.std::__1::__less.1190"* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %385) #9
  call void @_ZNSt3__16__sortIRNS_6__lessIiiEEPiEEvT0_S5_T_(i32* %383, i32* %384, %"struct.std::__1::__less.1190"* nonnull dereferenceable(1) %9) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %385) #9
  br label %476

386:                                              ; preds = %279
  br i1 %91, label %398, label %387

387:                                              ; preds = %386
  %388 = load i64, i64* %1, align 8
  %389 = add i64 %388, 39
  %390 = inttoptr i64 %389 to i64*
  %391 = load i64, i64* %390, align 1
  %392 = add i64 %388, 47
  %393 = inttoptr i64 %392 to i32*
  %394 = load i32, i32* %393, align 4
  %395 = zext i32 %394 to i64
  %396 = add i64 %391, %395
  %397 = inttoptr i64 %396 to i8*
  br label %398

398:                                              ; preds = %387, %386
  %399 = phi i8* [ %397, %387 ], [ %280, %386 ]
  %400 = bitcast i8* %399 to float*
  %401 = getelementptr inbounds float, float* %400, i64 %52
  %402 = bitcast i1 (float, float)** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %402) #9
  store i1 (float, float)* @_ZN2v88internal12_GLOBAL__N_110CompareNumIfEEbT_S3_, i1 (float, float)** %10, align 8
  call void @_ZNSt3__16__sortIRPFbffEPfEEvT0_S5_T_(float* %400, float* %401, i1 (float, float)** nonnull dereferenceable(8) %10) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %402) #9
  br label %476

403:                                              ; preds = %279
  br i1 %91, label %415, label %404

404:                                              ; preds = %403
  %405 = load i64, i64* %1, align 8
  %406 = add i64 %405, 39
  %407 = inttoptr i64 %406 to i64*
  %408 = load i64, i64* %407, align 1
  %409 = add i64 %405, 47
  %410 = inttoptr i64 %409 to i32*
  %411 = load i32, i32* %410, align 4
  %412 = zext i32 %411 to i64
  %413 = add i64 %408, %412
  %414 = inttoptr i64 %413 to i8*
  br label %415

415:                                              ; preds = %404, %403
  %416 = phi i8* [ %414, %404 ], [ %280, %403 ]
  %417 = bitcast i8* %416 to double*
  %418 = ptrtoint i8* %416 to i64
  %419 = getelementptr inbounds double, double* %417, i64 %52
  %420 = ptrtoint double* %419 to i64
  %421 = bitcast i1 (double, double)** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %421) #9
  store i1 (double, double)* @_ZN2v88internal12_GLOBAL__N_110CompareNumIdEEbT_S3_, i1 (double, double)** %11, align 8
  call void @_ZNSt3__16__sortIRPFbddEN2v88internal13UnalignedSlotIdEEEEvT0_S8_T_(i64 %418, i64 %420, i1 (double, double)** nonnull dereferenceable(8) %11) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %421) #9
  br label %476

422:                                              ; preds = %279
  br i1 %91, label %434, label %423

423:                                              ; preds = %422
  %424 = load i64, i64* %1, align 8
  %425 = add i64 %424, 39
  %426 = inttoptr i64 %425 to i64*
  %427 = load i64, i64* %426, align 1
  %428 = add i64 %424, 47
  %429 = inttoptr i64 %428 to i32*
  %430 = load i32, i32* %429, align 4
  %431 = zext i32 %430 to i64
  %432 = add i64 %427, %431
  %433 = inttoptr i64 %432 to i8*
  br label %434

434:                                              ; preds = %423, %422
  %435 = phi i8* [ %433, %423 ], [ %280, %422 ]
  %436 = getelementptr inbounds i8, i8* %435, i64 %52
  %437 = getelementptr inbounds %"struct.std::__1::__less.1185", %"struct.std::__1::__less.1185"* %12, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %437) #9
  call void @_ZNSt3__16__sortIRNS_6__lessIhhEEPhEEvT0_S5_T_(i8* %435, i8* %436, %"struct.std::__1::__less.1185"* nonnull dereferenceable(1) %12) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %437) #9
  br label %476

438:                                              ; preds = %279
  br i1 %91, label %450, label %439

439:                                              ; preds = %438
  %440 = load i64, i64* %1, align 8
  %441 = add i64 %440, 39
  %442 = inttoptr i64 %441 to i64*
  %443 = load i64, i64* %442, align 1
  %444 = add i64 %440, 47
  %445 = inttoptr i64 %444 to i32*
  %446 = load i32, i32* %445, align 4
  %447 = zext i32 %446 to i64
  %448 = add i64 %443, %447
  %449 = inttoptr i64 %448 to i8*
  br label %450

450:                                              ; preds = %439, %438
  %451 = phi i8* [ %449, %439 ], [ %280, %438 ]
  %452 = bitcast i8* %451 to i64*
  %453 = ptrtoint i8* %451 to i64
  %454 = getelementptr inbounds i64, i64* %452, i64 %52
  %455 = ptrtoint i64* %454 to i64
  %456 = getelementptr inbounds %"struct.std::__1::__less", %"struct.std::__1::__less"* %13, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %456) #9
  call void @_ZNSt3__16__sortIRNS_6__lessImmEEN2v88internal13UnalignedSlotImEEEEvT0_S8_T_(i64 %453, i64 %455, %"struct.std::__1::__less"* nonnull dereferenceable(1) %13) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %456) #9
  br label %476

457:                                              ; preds = %279
  br i1 %91, label %469, label %458

458:                                              ; preds = %457
  %459 = load i64, i64* %1, align 8
  %460 = add i64 %459, 39
  %461 = inttoptr i64 %460 to i64*
  %462 = load i64, i64* %461, align 1
  %463 = add i64 %459, 47
  %464 = inttoptr i64 %463 to i32*
  %465 = load i32, i32* %464, align 4
  %466 = zext i32 %465 to i64
  %467 = add i64 %462, %466
  %468 = inttoptr i64 %467 to i8*
  br label %469

469:                                              ; preds = %458, %457
  %470 = phi i8* [ %468, %458 ], [ %280, %457 ]
  %471 = bitcast i8* %470 to i64*
  %472 = ptrtoint i8* %470 to i64
  %473 = getelementptr inbounds i64, i64* %471, i64 %52
  %474 = ptrtoint i64* %473 to i64
  %475 = getelementptr inbounds %"struct.std::__1::__less.1191", %"struct.std::__1::__less.1191"* %14, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %475) #9
  call void @_ZNSt3__16__sortIRNS_6__lessIllEEN2v88internal13UnalignedSlotIlEEEEvT0_S8_T_(i64 %472, i64 %474, %"struct.std::__1::__less.1191"* nonnull dereferenceable(1) %14) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %475) #9
  br label %476

476:                                              ; preds = %469, %450, %434, %415, %398, %381, %364, %347, %330, %314, %298, %279
  br i1 %91, label %477, label %649

477:                                              ; preds = %476
  %478 = load i64, i64* %1, align 8
  %479 = add i64 %478, 23
  %480 = inttoptr i64 %479 to i64*
  %481 = load i64, i64* %480, align 1
  %482 = add i64 %478, 39
  %483 = inttoptr i64 %482 to i64*
  %484 = load i64, i64* %483, align 1
  %485 = add i64 %478, 47
  %486 = inttoptr i64 %485 to i32*
  %487 = load i32, i32* %486, align 4
  %488 = zext i32 %487 to i64
  %489 = add i64 %484, %488
  %490 = inttoptr i64 %489 to i8*
  %491 = icmp eq i64 %481, 0
  br i1 %491, label %505, label %492

492:                                              ; preds = %477, %499
  %493 = phi i8* [ %500, %499 ], [ %490, %477 ]
  %494 = phi i64 [ %503, %499 ], [ %481, %477 ]
  %495 = phi i8* [ %501, %499 ], [ %280, %477 ]
  %496 = ptrtoint i8* %493 to i64
  %497 = and i64 %496, 7
  %498 = icmp eq i64 %497, 0
  br i1 %498, label %505, label %499

499:                                              ; preds = %492
  %500 = getelementptr inbounds i8, i8* %493, i64 1
  %501 = getelementptr inbounds i8, i8* %495, i64 1
  %502 = load atomic i8, i8* %495 monotonic, align 1
  store atomic volatile i8 %502, i8* %493 monotonic, align 1
  %503 = add i64 %494, -1
  %504 = icmp eq i64 %503, 0
  br i1 %504, label %505, label %492

505:                                              ; preds = %499, %492, %477
  %506 = phi i8* [ %280, %477 ], [ %495, %492 ], [ %501, %499 ]
  %507 = phi i64 [ 0, %477 ], [ %494, %492 ], [ 0, %499 ]
  %508 = phi i8* [ %490, %477 ], [ %493, %492 ], [ %500, %499 ]
  %509 = ptrtoint i8* %506 to i64
  %510 = and i64 %509, 7
  %511 = icmp eq i64 %510, 0
  br i1 %511, label %512, label %594

512:                                              ; preds = %505
  %513 = ptrtoint i8* %508 to i64
  %514 = and i64 %513, 7
  %515 = icmp eq i64 %514, 0
  %516 = icmp ugt i64 %507, 7
  %517 = and i1 %516, %515
  br i1 %517, label %518, label %594

518:                                              ; preds = %512
  %519 = add i64 %507, -8
  %520 = lshr i64 %519, 3
  %521 = add nuw nsw i64 %520, 1
  %522 = and i64 %521, 7
  %523 = icmp eq i64 %522, 0
  br i1 %523, label %537, label %524

524:                                              ; preds = %518, %524
  %525 = phi i8* [ %532, %524 ], [ %508, %518 ]
  %526 = phi i64 [ %534, %524 ], [ %507, %518 ]
  %527 = phi i8* [ %533, %524 ], [ %506, %518 ]
  %528 = phi i64 [ %535, %524 ], [ %522, %518 ]
  %529 = bitcast i8* %525 to i64*
  %530 = bitcast i8* %527 to i64*
  %531 = load atomic i64, i64* %530 monotonic, align 8
  store atomic volatile i64 %531, i64* %529 monotonic, align 8
  %532 = getelementptr inbounds i8, i8* %525, i64 8
  %533 = getelementptr inbounds i8, i8* %527, i64 8
  %534 = add i64 %526, -8
  %535 = add i64 %528, -1
  %536 = icmp eq i64 %535, 0
  br i1 %536, label %537, label %524, !llvm.loop !9

537:                                              ; preds = %524, %518
  %538 = phi i8* [ %508, %518 ], [ %532, %524 ]
  %539 = phi i64 [ %507, %518 ], [ %534, %524 ]
  %540 = phi i8* [ %506, %518 ], [ %533, %524 ]
  %541 = phi i8* [ undef, %518 ], [ %532, %524 ]
  %542 = phi i8* [ undef, %518 ], [ %533, %524 ]
  %543 = icmp ult i64 %519, 56
  br i1 %543, label %590, label %544

544:                                              ; preds = %537, %544
  %545 = phi i8* [ %586, %544 ], [ %538, %537 ]
  %546 = phi i64 [ %588, %544 ], [ %539, %537 ]
  %547 = phi i8* [ %587, %544 ], [ %540, %537 ]
  %548 = bitcast i8* %545 to i64*
  %549 = bitcast i8* %547 to i64*
  %550 = load atomic i64, i64* %549 monotonic, align 8
  store atomic volatile i64 %550, i64* %548 monotonic, align 8
  %551 = getelementptr inbounds i8, i8* %545, i64 8
  %552 = getelementptr inbounds i8, i8* %547, i64 8
  %553 = bitcast i8* %551 to i64*
  %554 = bitcast i8* %552 to i64*
  %555 = load atomic i64, i64* %554 monotonic, align 8
  store atomic volatile i64 %555, i64* %553 monotonic, align 8
  %556 = getelementptr inbounds i8, i8* %545, i64 16
  %557 = getelementptr inbounds i8, i8* %547, i64 16
  %558 = bitcast i8* %556 to i64*
  %559 = bitcast i8* %557 to i64*
  %560 = load atomic i64, i64* %559 monotonic, align 8
  store atomic volatile i64 %560, i64* %558 monotonic, align 8
  %561 = getelementptr inbounds i8, i8* %545, i64 24
  %562 = getelementptr inbounds i8, i8* %547, i64 24
  %563 = bitcast i8* %561 to i64*
  %564 = bitcast i8* %562 to i64*
  %565 = load atomic i64, i64* %564 monotonic, align 8
  store atomic volatile i64 %565, i64* %563 monotonic, align 8
  %566 = getelementptr inbounds i8, i8* %545, i64 32
  %567 = getelementptr inbounds i8, i8* %547, i64 32
  %568 = bitcast i8* %566 to i64*
  %569 = bitcast i8* %567 to i64*
  %570 = load atomic i64, i64* %569 monotonic, align 8
  store atomic volatile i64 %570, i64* %568 monotonic, align 8
  %571 = getelementptr inbounds i8, i8* %545, i64 40
  %572 = getelementptr inbounds i8, i8* %547, i64 40
  %573 = bitcast i8* %571 to i64*
  %574 = bitcast i8* %572 to i64*
  %575 = load atomic i64, i64* %574 monotonic, align 8
  store atomic volatile i64 %575, i64* %573 monotonic, align 8
  %576 = getelementptr inbounds i8, i8* %545, i64 48
  %577 = getelementptr inbounds i8, i8* %547, i64 48
  %578 = bitcast i8* %576 to i64*
  %579 = bitcast i8* %577 to i64*
  %580 = load atomic i64, i64* %579 monotonic, align 8
  store atomic volatile i64 %580, i64* %578 monotonic, align 8
  %581 = getelementptr inbounds i8, i8* %545, i64 56
  %582 = getelementptr inbounds i8, i8* %547, i64 56
  %583 = bitcast i8* %581 to i64*
  %584 = bitcast i8* %582 to i64*
  %585 = load atomic i64, i64* %584 monotonic, align 8
  store atomic volatile i64 %585, i64* %583 monotonic, align 8
  %586 = getelementptr inbounds i8, i8* %545, i64 64
  %587 = getelementptr inbounds i8, i8* %547, i64 64
  %588 = add i64 %546, -64
  %589 = icmp ugt i64 %588, 7
  br i1 %589, label %544, label %590

590:                                              ; preds = %544, %537
  %591 = phi i8* [ %541, %537 ], [ %586, %544 ]
  %592 = phi i8* [ %542, %537 ], [ %587, %544 ]
  %593 = and i64 %507, 7
  br label %594

594:                                              ; preds = %590, %512, %505
  %595 = phi i8* [ %506, %512 ], [ %506, %505 ], [ %592, %590 ]
  %596 = phi i64 [ %507, %512 ], [ %507, %505 ], [ %593, %590 ]
  %597 = phi i8* [ %508, %512 ], [ %508, %505 ], [ %591, %590 ]
  %598 = icmp eq i64 %596, 0
  br i1 %598, label %649, label %599

599:                                              ; preds = %594
  %600 = add i64 %596, -1
  %601 = and i64 %596, 7
  %602 = icmp eq i64 %601, 0
  br i1 %602, label %614, label %603

603:                                              ; preds = %599, %603
  %604 = phi i8* [ %608, %603 ], [ %597, %599 ]
  %605 = phi i64 [ %611, %603 ], [ %596, %599 ]
  %606 = phi i8* [ %609, %603 ], [ %595, %599 ]
  %607 = phi i64 [ %612, %603 ], [ %601, %599 ]
  %608 = getelementptr inbounds i8, i8* %604, i64 1
  %609 = getelementptr inbounds i8, i8* %606, i64 1
  %610 = load atomic i8, i8* %606 monotonic, align 1
  store atomic volatile i8 %610, i8* %604 monotonic, align 1
  %611 = add i64 %605, -1
  %612 = add i64 %607, -1
  %613 = icmp eq i64 %612, 0
  br i1 %613, label %614, label %603, !llvm.loop !10

614:                                              ; preds = %603, %599
  %615 = phi i8* [ %597, %599 ], [ %608, %603 ]
  %616 = phi i64 [ %596, %599 ], [ %611, %603 ]
  %617 = phi i8* [ %595, %599 ], [ %609, %603 ]
  %618 = icmp ult i64 %600, 7
  br i1 %618, label %649, label %619

619:                                              ; preds = %614, %619
  %620 = phi i8* [ %644, %619 ], [ %615, %614 ]
  %621 = phi i64 [ %647, %619 ], [ %616, %614 ]
  %622 = phi i8* [ %645, %619 ], [ %617, %614 ]
  %623 = getelementptr inbounds i8, i8* %620, i64 1
  %624 = getelementptr inbounds i8, i8* %622, i64 1
  %625 = load atomic i8, i8* %622 monotonic, align 1
  store atomic volatile i8 %625, i8* %620 monotonic, align 1
  %626 = getelementptr inbounds i8, i8* %620, i64 2
  %627 = getelementptr inbounds i8, i8* %622, i64 2
  %628 = load atomic i8, i8* %624 monotonic, align 1
  store atomic volatile i8 %628, i8* %623 monotonic, align 1
  %629 = getelementptr inbounds i8, i8* %620, i64 3
  %630 = getelementptr inbounds i8, i8* %622, i64 3
  %631 = load atomic i8, i8* %627 monotonic, align 1
  store atomic volatile i8 %631, i8* %626 monotonic, align 1
  %632 = getelementptr inbounds i8, i8* %620, i64 4
  %633 = getelementptr inbounds i8, i8* %622, i64 4
  %634 = load atomic i8, i8* %630 monotonic, align 1
  store atomic volatile i8 %634, i8* %629 monotonic, align 1
  %635 = getelementptr inbounds i8, i8* %620, i64 5
  %636 = getelementptr inbounds i8, i8* %622, i64 5
  %637 = load atomic i8, i8* %633 monotonic, align 1
  store atomic volatile i8 %637, i8* %632 monotonic, align 1
  %638 = getelementptr inbounds i8, i8* %620, i64 6
  %639 = getelementptr inbounds i8, i8* %622, i64 6
  %640 = load atomic i8, i8* %636 monotonic, align 1
  store atomic volatile i8 %640, i8* %635 monotonic, align 1
  %641 = getelementptr inbounds i8, i8* %620, i64 7
  %642 = getelementptr inbounds i8, i8* %622, i64 7
  %643 = load atomic i8, i8* %639 monotonic, align 1
  store atomic volatile i8 %643, i8* %638 monotonic, align 1
  %644 = getelementptr inbounds i8, i8* %620, i64 8
  %645 = getelementptr inbounds i8, i8* %622, i64 8
  %646 = load atomic i8, i8* %642 monotonic, align 1
  store atomic volatile i8 %646, i8* %641 monotonic, align 1
  %647 = add i64 %621, -8
  %648 = icmp eq i64 %647, 0
  br i1 %648, label %649, label %619

649:                                              ; preds = %614, %619, %594, %476
  %650 = load i64, i64* %1, align 8
  %651 = getelementptr inbounds %"class.std::__1::vector.1167", %"class.std::__1::vector.1167"* %15, i64 0, i32 0, i32 0
  %652 = load i8*, i8** %651, align 8
  %653 = icmp eq i8* %652, null
  br i1 %653, label %658, label %654

654:                                              ; preds = %649
  %655 = ptrtoint i8* %652 to i64
  %656 = getelementptr inbounds %"class.std::__1::vector.1167", %"class.std::__1::vector.1167"* %15, i64 0, i32 0, i32 1
  %657 = bitcast i8** %656 to i64*
  store i64 %655, i64* %657, align 8
  call void @_ZdlPv(i8* nonnull %652) #11
  br label %658

658:                                              ; preds = %654, %649
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %92) #9
  br label %659

659:                                              ; preds = %658, %46
  %660 = phi i64 [ %650, %658 ], [ %30, %46 ]
  %661 = icmp eq %"class.v8::internal::Isolate"* %2, null
  br i1 %661, label %674, label %662

662:                                              ; preds = %659
  %663 = getelementptr inbounds %"struct.v8::internal::HandleScopeData", %"struct.v8::internal::HandleScopeData"* %22, i64 0, i32 0
  %664 = load i64*, i64** %663, align 8
  store i64 %24, i64* %23, align 8
  %665 = load i32, i32* %27, align 8
  %666 = add nsw i32 %665, -1
  store i32 %666, i32* %27, align 8
  %667 = load i64*, i64** %25, align 8
  %668 = icmp eq i64* %667, %26
  br i1 %668, label %671, label %669

669:                                              ; preds = %662
  store i64* %26, i64** %25, align 8
  call void @_ZN2v88internal11HandleScope16DeleteExtensionsEPNS0_7IsolateE(%"class.v8::internal::Isolate"* nonnull %2) #9
  %670 = load i64*, i64** %663, align 8
  br label %671

671:                                              ; preds = %669, %662
  %672 = phi i64* [ %670, %669 ], [ %33, %662 ]
  %673 = phi i64* [ %26, %669 ], [ %664, %662 ]
  call void @_ZN2v88internal11HandleScope8ZapRangeEPmS2_(i64* %672, i64* %673) #9
  br label %674

674:                                              ; preds = %671, %659, %19
  %675 = phi i64 [ %20, %19 ], [ %660, %659 ], [ %660, %671 ]
  ret i64 %675
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @_ZN2v88internalL32Stats_Runtime_TypedArraySortFastEiPmPNS0_7IsolateE(i32, i64*, %"class.v8::internal::Isolate"*) unnamed_addr #1 {
  %4 = alloca [2 x %"class.std::__1::unique_ptr.1143"], align 16
  %5 = alloca %"struct.std::__1::__less.1185", align 1
  %6 = alloca %"struct.std::__1::__less.1186", align 1
  %7 = alloca %"struct.std::__1::__less.1187", align 1
  %8 = alloca %"struct.std::__1::__less.1188", align 1
  %9 = alloca %"struct.std::__1::__less.1189", align 1
  %10 = alloca %"struct.std::__1::__less.1190", align 1
  %11 = alloca i1 (float, float)*, align 8
  %12 = alloca i1 (double, double)*, align 8
  %13 = alloca %"struct.std::__1::__less.1185", align 1
  %14 = alloca %"struct.std::__1::__less", align 1
  %15 = alloca %"struct.std::__1::__less.1191", align 1
  %16 = alloca %"class.std::__1::vector.1167", align 8
  %17 = alloca %"class.v8::internal::Handle<v8::internal::JSTypedArray>::ObjectRef", align 8
  %18 = alloca %"class.v8::internal::RuntimeCallTimerScope", align 8
  %19 = alloca %"class.v8::internal::tracing::ScopedTracer", align 8
  %20 = bitcast %"class.v8::internal::RuntimeCallTimerScope"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %20) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 40, i1 false) #9
  %21 = load atomic i32, i32* getelementptr inbounds (%"struct.std::__1::atomic.1133", %"struct.std::__1::atomic.1133"* @_ZN2v88internal12TracingFlags13runtime_statsE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %29, label %23, !prof !2

23:                                               ; preds = %3
  %24 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %18, i64 0, i32 0
  %25 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %18, i64 0, i32 1
  %26 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 14, i32 0
  %27 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %27, i64 0, i32 757
  store %"class.v8::internal::RuntimeCallStats"* %28, %"class.v8::internal::RuntimeCallStats"** %24, align 8
  call void @_ZN2v88internal16RuntimeCallStats5EnterEPNS0_16RuntimeCallTimerENS0_20RuntimeCallCounterIdE(%"class.v8::internal::RuntimeCallStats"* %28, %"class.v8::internal::RuntimeCallTimer"* %25, i32 694) #9
  br label %29

29:                                               ; preds = %3, %23
  %30 = load atomic i64, i64* @_ZZN2v88internalL32Stats_Runtime_TypedArraySortFastEiPmPNS0_7IsolateEE27trace_event_unique_atomic89 monotonic, align 8
  %31 = inttoptr i64 %30 to i8*
  %32 = icmp eq i64 %30, 0
  br i1 %32, label %33, label %41

33:                                               ; preds = %29
  %34 = call %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() #9
  %35 = bitcast %"class.v8::TracingController"* %34 to i8* (%"class.v8::TracingController"*, i8*)***
  %36 = load i8* (%"class.v8::TracingController"*, i8*)**, i8* (%"class.v8::TracingController"*, i8*)*** %35, align 8
  %37 = getelementptr inbounds i8* (%"class.v8::TracingController"*, i8*)*, i8* (%"class.v8::TracingController"*, i8*)** %36, i64 2
  %38 = load i8* (%"class.v8::TracingController"*, i8*)*, i8* (%"class.v8::TracingController"*, i8*)** %37, align 8
  %39 = call i8* %38(%"class.v8::TracingController"* %34, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0)) #9
  %40 = ptrtoint i8* %39 to i64
  store atomic volatile i64 %40, i64* @_ZZN2v88internalL32Stats_Runtime_TypedArraySortFastEiPmPNS0_7IsolateEE27trace_event_unique_atomic89 monotonic, align 8
  br label %41

41:                                               ; preds = %29, %33
  %42 = phi i8* [ %31, %29 ], [ %39, %33 ]
  %43 = bitcast %"class.v8::internal::tracing::ScopedTracer"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %43) #9
  %44 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %19, i64 0, i32 0
  store %"struct.v8::internal::tracing::ScopedTracer::Data"* null, %"struct.v8::internal::tracing::ScopedTracer::Data"** %44, align 8
  %45 = load atomic i8, i8* %42 monotonic, align 1
  %46 = and i8 %45, 5
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %79, label %48

48:                                               ; preds = %41
  %49 = bitcast [2 x %"class.std::__1::unique_ptr.1143"]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %49) #9
  %50 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1143"], [2 x %"class.std::__1::unique_ptr.1143"]* %4, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %49, i8 0, i64 16, i1 false) #9
  %51 = call %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() #9
  %52 = bitcast %"class.v8::TracingController"* %51 to i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)***
  %53 = load i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)**, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)*** %52, align 8
  %54 = getelementptr inbounds i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)*, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)** %53, i64 3
  %55 = load i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)*, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)** %54, align 8
  %56 = call i64 %55(%"class.v8::TracingController"* %51, i8 signext 88, i8* %42, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.12, i64 0, i64 0), i8* null, i64 0, i64 0, i32 0, i8** null, i8* null, i64* null, %"class.std::__1::unique_ptr.1143"* nonnull %50, i32 0) #9
  %57 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1143"], [2 x %"class.std::__1::unique_ptr.1143"]* %4, i64 0, i64 1, i32 0, i32 0, i32 0
  %58 = load %"class.v8::ConvertableToTraceFormat"*, %"class.v8::ConvertableToTraceFormat"** %57, align 8
  store %"class.v8::ConvertableToTraceFormat"* null, %"class.v8::ConvertableToTraceFormat"** %57, align 8
  %59 = icmp eq %"class.v8::ConvertableToTraceFormat"* %58, null
  br i1 %59, label %65, label %60

60:                                               ; preds = %48
  %61 = bitcast %"class.v8::ConvertableToTraceFormat"* %58 to void (%"class.v8::ConvertableToTraceFormat"*)***
  %62 = load void (%"class.v8::ConvertableToTraceFormat"*)**, void (%"class.v8::ConvertableToTraceFormat"*)*** %61, align 8
  %63 = getelementptr inbounds void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %62, i64 1
  %64 = load void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %63, align 8
  call void %64(%"class.v8::ConvertableToTraceFormat"* nonnull %58) #9
  br label %65

65:                                               ; preds = %60, %48
  %66 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1143"], [2 x %"class.std::__1::unique_ptr.1143"]* %4, i64 0, i64 0, i32 0, i32 0, i32 0
  %67 = load %"class.v8::ConvertableToTraceFormat"*, %"class.v8::ConvertableToTraceFormat"** %66, align 16
  store %"class.v8::ConvertableToTraceFormat"* null, %"class.v8::ConvertableToTraceFormat"** %66, align 16
  %68 = icmp eq %"class.v8::ConvertableToTraceFormat"* %67, null
  br i1 %68, label %74, label %69

69:                                               ; preds = %65
  %70 = bitcast %"class.v8::ConvertableToTraceFormat"* %67 to void (%"class.v8::ConvertableToTraceFormat"*)***
  %71 = load void (%"class.v8::ConvertableToTraceFormat"*)**, void (%"class.v8::ConvertableToTraceFormat"*)*** %70, align 8
  %72 = getelementptr inbounds void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %71, i64 1
  %73 = load void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %72, align 8
  call void %73(%"class.v8::ConvertableToTraceFormat"* nonnull %67) #9
  br label %74

74:                                               ; preds = %65, %69
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %49) #9
  %75 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %19, i64 0, i32 1
  %76 = getelementptr inbounds %"struct.v8::internal::tracing::ScopedTracer::Data", %"struct.v8::internal::tracing::ScopedTracer::Data"* %75, i64 0, i32 0
  store i8* %42, i8** %76, align 8
  %77 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %19, i64 0, i32 1, i32 1
  store i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.12, i64 0, i64 0), i8** %77, align 8
  %78 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %19, i64 0, i32 1, i32 2
  store i64 %56, i64* %78, align 8
  store %"struct.v8::internal::tracing::ScopedTracer::Data"* %75, %"struct.v8::internal::tracing::ScopedTracer::Data"** %44, align 8
  br label %79

79:                                               ; preds = %41, %74
  %80 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31
  %81 = bitcast %"struct.v8::internal::HandleScopeData"* %80 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 1
  %84 = load i64*, i64** %83, align 8
  %85 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 2
  %86 = load i32, i32* %85, align 8
  %87 = add nsw i32 %86, 1
  store i32 %87, i32* %85, align 8
  %88 = load i64, i64* %1, align 8
  %89 = and i64 %88, 1
  %90 = icmp eq i64 %89, 0
  %91 = inttoptr i64 %82 to i64*
  br i1 %90, label %103, label %92, !prof !3

92:                                               ; preds = %79
  %93 = and i64 %88, -4294967296
  %94 = add i64 %88, -1
  %95 = inttoptr i64 %94 to i32*
  %96 = load atomic i32, i32* %95 monotonic, align 4
  %97 = zext i32 %96 to i64
  %98 = or i64 %93, %97
  %99 = add i64 %98, 7
  %100 = inttoptr i64 %99 to i16*
  %101 = load atomic i16, i16* %100 monotonic, align 2
  %102 = icmp eq i16 %101, 1080
  br i1 %102, label %104, label %103, !prof !2

103:                                              ; preds = %92, %79
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0)) #10
  unreachable

104:                                              ; preds = %92
  %105 = load i8, i8* @_ZN2v88internal32FLAG_multi_mapped_mock_allocatorE, align 1, !range !5
  %106 = icmp eq i8 %105, 0
  br i1 %106, label %107, label %717

107:                                              ; preds = %104
  %108 = add i64 %88, 31
  %109 = inttoptr i64 %108 to i64*
  %110 = load i64, i64* %109, align 1
  %111 = add i64 %88, 11
  %112 = inttoptr i64 %111 to i32*
  %113 = load i32, i32* %112, align 4
  %114 = zext i32 %113 to i64
  %115 = or i64 %93, %114
  %116 = add i64 %115, -1
  %117 = inttoptr i64 %116 to i32*
  %118 = load atomic i32, i32* %117 monotonic, align 4
  %119 = zext i32 %118 to i64
  %120 = or i64 %93, %119
  %121 = add i64 %120, 7
  %122 = inttoptr i64 %121 to i16*
  %123 = load atomic i16, i16* %122 monotonic, align 2
  %124 = icmp eq i16 %123, 1086
  br i1 %124, label %126, label %125, !prof !2

125:                                              ; preds = %107
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.13, i64 0, i64 0)) #10
  unreachable

126:                                              ; preds = %107
  %127 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 4
  %128 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %127, align 8
  %129 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %128, null
  br i1 %129, label %133, label %130

130:                                              ; preds = %126
  %131 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %128, i64 %115) #9
  %132 = load i64, i64* %131, align 8
  br label %143

133:                                              ; preds = %126
  %134 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 0
  %135 = icmp eq i64* %84, %91
  br i1 %135, label %136, label %138

136:                                              ; preds = %133
  %137 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %2) #9
  br label %138

138:                                              ; preds = %136, %133
  %139 = phi i64* [ %137, %136 ], [ %91, %133 ]
  %140 = ptrtoint i64* %139 to i64
  %141 = add i64 %140, 8
  %142 = inttoptr i64 %141 to i64*
  store i64* %142, i64** %134, align 8
  store i64 %115, i64* %139, align 8
  br label %143

143:                                              ; preds = %138, %130
  %144 = phi i64 [ %132, %130 ], [ %115, %138 ]
  %145 = add i64 %144, 43
  %146 = inttoptr i64 %145 to i32*
  %147 = load atomic i32, i32* %146 monotonic, align 4
  %148 = and i32 %147, 16
  %149 = icmp ne i32 %148, 0
  %150 = bitcast %"class.std::__1::vector.1167"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %150) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %150, i8 0, i64 24, i1 false) #9
  br i1 %149, label %151, label %337

151:                                              ; preds = %143
  %152 = load i64, i64* %1, align 8
  %153 = add i64 %152, 23
  %154 = inttoptr i64 %153 to i64*
  %155 = load i64, i64* %154, align 1
  %156 = icmp ugt i64 %155, 131064
  br i1 %156, label %164, label %157

157:                                              ; preds = %151
  %158 = bitcast %"class.v8::internal::Isolate"* %2 to %"class.v8::internal::FactoryBase"*
  %159 = trunc i64 %155 to i32
  %160 = call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE12NewByteArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %158, i32 %159, i8 zeroext 0) #9
  %161 = load i64, i64* %160, align 8
  %162 = add i64 %161, 7
  %163 = inttoptr i64 %162 to i8*
  br label %167

164:                                              ; preds = %151
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.1167"* nonnull %16, i64 %155) #9
  %165 = getelementptr inbounds %"class.std::__1::vector.1167", %"class.std::__1::vector.1167"* %16, i64 0, i32 0, i32 0
  %166 = load i8*, i8** %165, align 8
  br label %167

167:                                              ; preds = %164, %157
  %168 = phi i8* [ %163, %157 ], [ %166, %164 ]
  %169 = load i64, i64* %1, align 8
  %170 = add i64 %169, 39
  %171 = inttoptr i64 %170 to i64*
  %172 = load i64, i64* %171, align 1
  %173 = add i64 %169, 47
  %174 = inttoptr i64 %173 to i32*
  %175 = load i32, i32* %174, align 4
  %176 = zext i32 %175 to i64
  %177 = add i64 %172, %176
  %178 = inttoptr i64 %177 to i8*
  %179 = icmp eq i64 %155, 0
  br i1 %179, label %193, label %180

180:                                              ; preds = %167, %187
  %181 = phi i8* [ %188, %187 ], [ %168, %167 ]
  %182 = phi i64 [ %191, %187 ], [ %155, %167 ]
  %183 = phi i8* [ %189, %187 ], [ %178, %167 ]
  %184 = ptrtoint i8* %181 to i64
  %185 = and i64 %184, 7
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %193, label %187

187:                                              ; preds = %180
  %188 = getelementptr inbounds i8, i8* %181, i64 1
  %189 = getelementptr inbounds i8, i8* %183, i64 1
  %190 = load atomic i8, i8* %183 monotonic, align 1
  store atomic volatile i8 %190, i8* %181 monotonic, align 1
  %191 = add i64 %182, -1
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %193, label %180

193:                                              ; preds = %187, %180, %167
  %194 = phi i8* [ %178, %167 ], [ %183, %180 ], [ %189, %187 ]
  %195 = phi i64 [ 0, %167 ], [ %182, %180 ], [ 0, %187 ]
  %196 = phi i8* [ %168, %167 ], [ %181, %180 ], [ %188, %187 ]
  %197 = ptrtoint i8* %194 to i64
  %198 = and i64 %197, 7
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %200, label %282

200:                                              ; preds = %193
  %201 = ptrtoint i8* %196 to i64
  %202 = and i64 %201, 7
  %203 = icmp eq i64 %202, 0
  %204 = icmp ugt i64 %195, 7
  %205 = and i1 %204, %203
  br i1 %205, label %206, label %282

206:                                              ; preds = %200
  %207 = add i64 %195, -8
  %208 = lshr i64 %207, 3
  %209 = add nuw nsw i64 %208, 1
  %210 = and i64 %209, 7
  %211 = icmp eq i64 %210, 0
  br i1 %211, label %225, label %212

212:                                              ; preds = %206, %212
  %213 = phi i8* [ %220, %212 ], [ %196, %206 ]
  %214 = phi i64 [ %222, %212 ], [ %195, %206 ]
  %215 = phi i8* [ %221, %212 ], [ %194, %206 ]
  %216 = phi i64 [ %223, %212 ], [ %210, %206 ]
  %217 = bitcast i8* %213 to i64*
  %218 = bitcast i8* %215 to i64*
  %219 = load atomic i64, i64* %218 monotonic, align 8
  store atomic volatile i64 %219, i64* %217 monotonic, align 8
  %220 = getelementptr inbounds i8, i8* %213, i64 8
  %221 = getelementptr inbounds i8, i8* %215, i64 8
  %222 = add i64 %214, -8
  %223 = add i64 %216, -1
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %225, label %212, !llvm.loop !11

225:                                              ; preds = %212, %206
  %226 = phi i8* [ %196, %206 ], [ %220, %212 ]
  %227 = phi i64 [ %195, %206 ], [ %222, %212 ]
  %228 = phi i8* [ %194, %206 ], [ %221, %212 ]
  %229 = phi i8* [ undef, %206 ], [ %220, %212 ]
  %230 = phi i8* [ undef, %206 ], [ %221, %212 ]
  %231 = icmp ult i64 %207, 56
  br i1 %231, label %278, label %232

232:                                              ; preds = %225, %232
  %233 = phi i8* [ %274, %232 ], [ %226, %225 ]
  %234 = phi i64 [ %276, %232 ], [ %227, %225 ]
  %235 = phi i8* [ %275, %232 ], [ %228, %225 ]
  %236 = bitcast i8* %233 to i64*
  %237 = bitcast i8* %235 to i64*
  %238 = load atomic i64, i64* %237 monotonic, align 8
  store atomic volatile i64 %238, i64* %236 monotonic, align 8
  %239 = getelementptr inbounds i8, i8* %233, i64 8
  %240 = getelementptr inbounds i8, i8* %235, i64 8
  %241 = bitcast i8* %239 to i64*
  %242 = bitcast i8* %240 to i64*
  %243 = load atomic i64, i64* %242 monotonic, align 8
  store atomic volatile i64 %243, i64* %241 monotonic, align 8
  %244 = getelementptr inbounds i8, i8* %233, i64 16
  %245 = getelementptr inbounds i8, i8* %235, i64 16
  %246 = bitcast i8* %244 to i64*
  %247 = bitcast i8* %245 to i64*
  %248 = load atomic i64, i64* %247 monotonic, align 8
  store atomic volatile i64 %248, i64* %246 monotonic, align 8
  %249 = getelementptr inbounds i8, i8* %233, i64 24
  %250 = getelementptr inbounds i8, i8* %235, i64 24
  %251 = bitcast i8* %249 to i64*
  %252 = bitcast i8* %250 to i64*
  %253 = load atomic i64, i64* %252 monotonic, align 8
  store atomic volatile i64 %253, i64* %251 monotonic, align 8
  %254 = getelementptr inbounds i8, i8* %233, i64 32
  %255 = getelementptr inbounds i8, i8* %235, i64 32
  %256 = bitcast i8* %254 to i64*
  %257 = bitcast i8* %255 to i64*
  %258 = load atomic i64, i64* %257 monotonic, align 8
  store atomic volatile i64 %258, i64* %256 monotonic, align 8
  %259 = getelementptr inbounds i8, i8* %233, i64 40
  %260 = getelementptr inbounds i8, i8* %235, i64 40
  %261 = bitcast i8* %259 to i64*
  %262 = bitcast i8* %260 to i64*
  %263 = load atomic i64, i64* %262 monotonic, align 8
  store atomic volatile i64 %263, i64* %261 monotonic, align 8
  %264 = getelementptr inbounds i8, i8* %233, i64 48
  %265 = getelementptr inbounds i8, i8* %235, i64 48
  %266 = bitcast i8* %264 to i64*
  %267 = bitcast i8* %265 to i64*
  %268 = load atomic i64, i64* %267 monotonic, align 8
  store atomic volatile i64 %268, i64* %266 monotonic, align 8
  %269 = getelementptr inbounds i8, i8* %233, i64 56
  %270 = getelementptr inbounds i8, i8* %235, i64 56
  %271 = bitcast i8* %269 to i64*
  %272 = bitcast i8* %270 to i64*
  %273 = load atomic i64, i64* %272 monotonic, align 8
  store atomic volatile i64 %273, i64* %271 monotonic, align 8
  %274 = getelementptr inbounds i8, i8* %233, i64 64
  %275 = getelementptr inbounds i8, i8* %235, i64 64
  %276 = add i64 %234, -64
  %277 = icmp ugt i64 %276, 7
  br i1 %277, label %232, label %278

278:                                              ; preds = %232, %225
  %279 = phi i8* [ %229, %225 ], [ %274, %232 ]
  %280 = phi i8* [ %230, %225 ], [ %275, %232 ]
  %281 = and i64 %195, 7
  br label %282

282:                                              ; preds = %278, %200, %193
  %283 = phi i8* [ %194, %200 ], [ %194, %193 ], [ %280, %278 ]
  %284 = phi i64 [ %195, %200 ], [ %195, %193 ], [ %281, %278 ]
  %285 = phi i8* [ %196, %200 ], [ %196, %193 ], [ %279, %278 ]
  %286 = icmp eq i64 %284, 0
  br i1 %286, label %337, label %287

287:                                              ; preds = %282
  %288 = add i64 %284, -1
  %289 = and i64 %284, 7
  %290 = icmp eq i64 %289, 0
  br i1 %290, label %302, label %291

291:                                              ; preds = %287, %291
  %292 = phi i8* [ %296, %291 ], [ %285, %287 ]
  %293 = phi i64 [ %299, %291 ], [ %284, %287 ]
  %294 = phi i8* [ %297, %291 ], [ %283, %287 ]
  %295 = phi i64 [ %300, %291 ], [ %289, %287 ]
  %296 = getelementptr inbounds i8, i8* %292, i64 1
  %297 = getelementptr inbounds i8, i8* %294, i64 1
  %298 = load atomic i8, i8* %294 monotonic, align 1
  store atomic volatile i8 %298, i8* %292 monotonic, align 1
  %299 = add i64 %293, -1
  %300 = add i64 %295, -1
  %301 = icmp eq i64 %300, 0
  br i1 %301, label %302, label %291, !llvm.loop !12

302:                                              ; preds = %291, %287
  %303 = phi i8* [ %285, %287 ], [ %296, %291 ]
  %304 = phi i64 [ %284, %287 ], [ %299, %291 ]
  %305 = phi i8* [ %283, %287 ], [ %297, %291 ]
  %306 = icmp ult i64 %288, 7
  br i1 %306, label %337, label %307

307:                                              ; preds = %302, %307
  %308 = phi i8* [ %332, %307 ], [ %303, %302 ]
  %309 = phi i64 [ %335, %307 ], [ %304, %302 ]
  %310 = phi i8* [ %333, %307 ], [ %305, %302 ]
  %311 = getelementptr inbounds i8, i8* %308, i64 1
  %312 = getelementptr inbounds i8, i8* %310, i64 1
  %313 = load atomic i8, i8* %310 monotonic, align 1
  store atomic volatile i8 %313, i8* %308 monotonic, align 1
  %314 = getelementptr inbounds i8, i8* %308, i64 2
  %315 = getelementptr inbounds i8, i8* %310, i64 2
  %316 = load atomic i8, i8* %312 monotonic, align 1
  store atomic volatile i8 %316, i8* %311 monotonic, align 1
  %317 = getelementptr inbounds i8, i8* %308, i64 3
  %318 = getelementptr inbounds i8, i8* %310, i64 3
  %319 = load atomic i8, i8* %315 monotonic, align 1
  store atomic volatile i8 %319, i8* %314 monotonic, align 1
  %320 = getelementptr inbounds i8, i8* %308, i64 4
  %321 = getelementptr inbounds i8, i8* %310, i64 4
  %322 = load atomic i8, i8* %318 monotonic, align 1
  store atomic volatile i8 %322, i8* %317 monotonic, align 1
  %323 = getelementptr inbounds i8, i8* %308, i64 5
  %324 = getelementptr inbounds i8, i8* %310, i64 5
  %325 = load atomic i8, i8* %321 monotonic, align 1
  store atomic volatile i8 %325, i8* %320 monotonic, align 1
  %326 = getelementptr inbounds i8, i8* %308, i64 6
  %327 = getelementptr inbounds i8, i8* %310, i64 6
  %328 = load atomic i8, i8* %324 monotonic, align 1
  store atomic volatile i8 %328, i8* %323 monotonic, align 1
  %329 = getelementptr inbounds i8, i8* %308, i64 7
  %330 = getelementptr inbounds i8, i8* %310, i64 7
  %331 = load atomic i8, i8* %327 monotonic, align 1
  store atomic volatile i8 %331, i8* %326 monotonic, align 1
  %332 = getelementptr inbounds i8, i8* %308, i64 8
  %333 = getelementptr inbounds i8, i8* %310, i64 8
  %334 = load atomic i8, i8* %330 monotonic, align 1
  store atomic volatile i8 %334, i8* %329 monotonic, align 1
  %335 = add i64 %309, -8
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %337, label %307

337:                                              ; preds = %302, %307, %282, %143
  %338 = phi i8* [ null, %143 ], [ %168, %282 ], [ %168, %307 ], [ %168, %302 ]
  %339 = bitcast %"class.v8::internal::Handle<v8::internal::JSTypedArray>::ObjectRef"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %339) #9
  %340 = load i64, i64* %1, align 8
  %341 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSTypedArray>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSTypedArray>::ObjectRef"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %340, i64* %341, align 8
  %342 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSTypedArray>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSTypedArray>::ObjectRef"* %17, i64 0, i32 0
  %343 = call i32 @_ZN2v88internal12JSTypedArray4typeEv(%"class.v8::internal::JSTypedArray"* nonnull %342) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %339) #9
  switch i32 %343, label %534 [
    i32 2, label %344
    i32 1, label %360
    i32 4, label %376
    i32 3, label %393
    i32 6, label %410
    i32 5, label %427
    i32 7, label %444
    i32 8, label %461
    i32 9, label %480
    i32 11, label %496
    i32 10, label %515
  ]

344:                                              ; preds = %337
  br i1 %149, label %356, label %345

345:                                              ; preds = %344
  %346 = load i64, i64* %1, align 8
  %347 = add i64 %346, 39
  %348 = inttoptr i64 %347 to i64*
  %349 = load i64, i64* %348, align 1
  %350 = add i64 %346, 47
  %351 = inttoptr i64 %350 to i32*
  %352 = load i32, i32* %351, align 4
  %353 = zext i32 %352 to i64
  %354 = add i64 %349, %353
  %355 = inttoptr i64 %354 to i8*
  br label %356

356:                                              ; preds = %345, %344
  %357 = phi i8* [ %355, %345 ], [ %338, %344 ]
  %358 = getelementptr inbounds i8, i8* %357, i64 %110
  %359 = getelementptr inbounds %"struct.std::__1::__less.1185", %"struct.std::__1::__less.1185"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %359) #9
  call void @_ZNSt3__16__sortIRNS_6__lessIhhEEPhEEvT0_S5_T_(i8* %357, i8* %358, %"struct.std::__1::__less.1185"* nonnull dereferenceable(1) %5) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %359) #9
  br label %534

360:                                              ; preds = %337
  br i1 %149, label %372, label %361

361:                                              ; preds = %360
  %362 = load i64, i64* %1, align 8
  %363 = add i64 %362, 39
  %364 = inttoptr i64 %363 to i64*
  %365 = load i64, i64* %364, align 1
  %366 = add i64 %362, 47
  %367 = inttoptr i64 %366 to i32*
  %368 = load i32, i32* %367, align 4
  %369 = zext i32 %368 to i64
  %370 = add i64 %365, %369
  %371 = inttoptr i64 %370 to i8*
  br label %372

372:                                              ; preds = %361, %360
  %373 = phi i8* [ %371, %361 ], [ %338, %360 ]
  %374 = getelementptr inbounds i8, i8* %373, i64 %110
  %375 = getelementptr inbounds %"struct.std::__1::__less.1186", %"struct.std::__1::__less.1186"* %6, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %375) #9
  call void @_ZNSt3__16__sortIRNS_6__lessIaaEEPaEEvT0_S5_T_(i8* %373, i8* %374, %"struct.std::__1::__less.1186"* nonnull dereferenceable(1) %6) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %375) #9
  br label %534

376:                                              ; preds = %337
  br i1 %149, label %388, label %377

377:                                              ; preds = %376
  %378 = load i64, i64* %1, align 8
  %379 = add i64 %378, 39
  %380 = inttoptr i64 %379 to i64*
  %381 = load i64, i64* %380, align 1
  %382 = add i64 %378, 47
  %383 = inttoptr i64 %382 to i32*
  %384 = load i32, i32* %383, align 4
  %385 = zext i32 %384 to i64
  %386 = add i64 %381, %385
  %387 = inttoptr i64 %386 to i8*
  br label %388

388:                                              ; preds = %377, %376
  %389 = phi i8* [ %387, %377 ], [ %338, %376 ]
  %390 = bitcast i8* %389 to i16*
  %391 = getelementptr inbounds i16, i16* %390, i64 %110
  %392 = getelementptr inbounds %"struct.std::__1::__less.1187", %"struct.std::__1::__less.1187"* %7, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %392) #9
  call void @_ZNSt3__16__sortIRNS_6__lessIttEEPtEEvT0_S5_T_(i16* %390, i16* %391, %"struct.std::__1::__less.1187"* nonnull dereferenceable(1) %7) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %392) #9
  br label %534

393:                                              ; preds = %337
  br i1 %149, label %405, label %394

394:                                              ; preds = %393
  %395 = load i64, i64* %1, align 8
  %396 = add i64 %395, 39
  %397 = inttoptr i64 %396 to i64*
  %398 = load i64, i64* %397, align 1
  %399 = add i64 %395, 47
  %400 = inttoptr i64 %399 to i32*
  %401 = load i32, i32* %400, align 4
  %402 = zext i32 %401 to i64
  %403 = add i64 %398, %402
  %404 = inttoptr i64 %403 to i8*
  br label %405

405:                                              ; preds = %394, %393
  %406 = phi i8* [ %404, %394 ], [ %338, %393 ]
  %407 = bitcast i8* %406 to i16*
  %408 = getelementptr inbounds i16, i16* %407, i64 %110
  %409 = getelementptr inbounds %"struct.std::__1::__less.1188", %"struct.std::__1::__less.1188"* %8, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %409) #9
  call void @_ZNSt3__16__sortIRNS_6__lessIssEEPsEEvT0_S5_T_(i16* %407, i16* %408, %"struct.std::__1::__less.1188"* nonnull dereferenceable(1) %8) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %409) #9
  br label %534

410:                                              ; preds = %337
  br i1 %149, label %422, label %411

411:                                              ; preds = %410
  %412 = load i64, i64* %1, align 8
  %413 = add i64 %412, 39
  %414 = inttoptr i64 %413 to i64*
  %415 = load i64, i64* %414, align 1
  %416 = add i64 %412, 47
  %417 = inttoptr i64 %416 to i32*
  %418 = load i32, i32* %417, align 4
  %419 = zext i32 %418 to i64
  %420 = add i64 %415, %419
  %421 = inttoptr i64 %420 to i8*
  br label %422

422:                                              ; preds = %411, %410
  %423 = phi i8* [ %421, %411 ], [ %338, %410 ]
  %424 = bitcast i8* %423 to i32*
  %425 = getelementptr inbounds i32, i32* %424, i64 %110
  %426 = getelementptr inbounds %"struct.std::__1::__less.1189", %"struct.std::__1::__less.1189"* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %426) #9
  call void @_ZNSt3__16__sortIRNS_6__lessIjjEEPjEEvT0_S5_T_(i32* %424, i32* %425, %"struct.std::__1::__less.1189"* nonnull dereferenceable(1) %9) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %426) #9
  br label %534

427:                                              ; preds = %337
  br i1 %149, label %439, label %428

428:                                              ; preds = %427
  %429 = load i64, i64* %1, align 8
  %430 = add i64 %429, 39
  %431 = inttoptr i64 %430 to i64*
  %432 = load i64, i64* %431, align 1
  %433 = add i64 %429, 47
  %434 = inttoptr i64 %433 to i32*
  %435 = load i32, i32* %434, align 4
  %436 = zext i32 %435 to i64
  %437 = add i64 %432, %436
  %438 = inttoptr i64 %437 to i8*
  br label %439

439:                                              ; preds = %428, %427
  %440 = phi i8* [ %438, %428 ], [ %338, %427 ]
  %441 = bitcast i8* %440 to i32*
  %442 = getelementptr inbounds i32, i32* %441, i64 %110
  %443 = getelementptr inbounds %"struct.std::__1::__less.1190", %"struct.std::__1::__less.1190"* %10, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %443) #9
  call void @_ZNSt3__16__sortIRNS_6__lessIiiEEPiEEvT0_S5_T_(i32* %441, i32* %442, %"struct.std::__1::__less.1190"* nonnull dereferenceable(1) %10) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %443) #9
  br label %534

444:                                              ; preds = %337
  br i1 %149, label %456, label %445

445:                                              ; preds = %444
  %446 = load i64, i64* %1, align 8
  %447 = add i64 %446, 39
  %448 = inttoptr i64 %447 to i64*
  %449 = load i64, i64* %448, align 1
  %450 = add i64 %446, 47
  %451 = inttoptr i64 %450 to i32*
  %452 = load i32, i32* %451, align 4
  %453 = zext i32 %452 to i64
  %454 = add i64 %449, %453
  %455 = inttoptr i64 %454 to i8*
  br label %456

456:                                              ; preds = %445, %444
  %457 = phi i8* [ %455, %445 ], [ %338, %444 ]
  %458 = bitcast i8* %457 to float*
  %459 = getelementptr inbounds float, float* %458, i64 %110
  %460 = bitcast i1 (float, float)** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %460) #9
  store i1 (float, float)* @_ZN2v88internal12_GLOBAL__N_110CompareNumIfEEbT_S3_, i1 (float, float)** %11, align 8
  call void @_ZNSt3__16__sortIRPFbffEPfEEvT0_S5_T_(float* %458, float* %459, i1 (float, float)** nonnull dereferenceable(8) %11) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %460) #9
  br label %534

461:                                              ; preds = %337
  br i1 %149, label %473, label %462

462:                                              ; preds = %461
  %463 = load i64, i64* %1, align 8
  %464 = add i64 %463, 39
  %465 = inttoptr i64 %464 to i64*
  %466 = load i64, i64* %465, align 1
  %467 = add i64 %463, 47
  %468 = inttoptr i64 %467 to i32*
  %469 = load i32, i32* %468, align 4
  %470 = zext i32 %469 to i64
  %471 = add i64 %466, %470
  %472 = inttoptr i64 %471 to i8*
  br label %473

473:                                              ; preds = %462, %461
  %474 = phi i8* [ %472, %462 ], [ %338, %461 ]
  %475 = bitcast i8* %474 to double*
  %476 = ptrtoint i8* %474 to i64
  %477 = getelementptr inbounds double, double* %475, i64 %110
  %478 = ptrtoint double* %477 to i64
  %479 = bitcast i1 (double, double)** %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %479) #9
  store i1 (double, double)* @_ZN2v88internal12_GLOBAL__N_110CompareNumIdEEbT_S3_, i1 (double, double)** %12, align 8
  call void @_ZNSt3__16__sortIRPFbddEN2v88internal13UnalignedSlotIdEEEEvT0_S8_T_(i64 %476, i64 %478, i1 (double, double)** nonnull dereferenceable(8) %12) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %479) #9
  br label %534

480:                                              ; preds = %337
  br i1 %149, label %492, label %481

481:                                              ; preds = %480
  %482 = load i64, i64* %1, align 8
  %483 = add i64 %482, 39
  %484 = inttoptr i64 %483 to i64*
  %485 = load i64, i64* %484, align 1
  %486 = add i64 %482, 47
  %487 = inttoptr i64 %486 to i32*
  %488 = load i32, i32* %487, align 4
  %489 = zext i32 %488 to i64
  %490 = add i64 %485, %489
  %491 = inttoptr i64 %490 to i8*
  br label %492

492:                                              ; preds = %481, %480
  %493 = phi i8* [ %491, %481 ], [ %338, %480 ]
  %494 = getelementptr inbounds i8, i8* %493, i64 %110
  %495 = getelementptr inbounds %"struct.std::__1::__less.1185", %"struct.std::__1::__less.1185"* %13, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %495) #9
  call void @_ZNSt3__16__sortIRNS_6__lessIhhEEPhEEvT0_S5_T_(i8* %493, i8* %494, %"struct.std::__1::__less.1185"* nonnull dereferenceable(1) %13) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %495) #9
  br label %534

496:                                              ; preds = %337
  br i1 %149, label %508, label %497

497:                                              ; preds = %496
  %498 = load i64, i64* %1, align 8
  %499 = add i64 %498, 39
  %500 = inttoptr i64 %499 to i64*
  %501 = load i64, i64* %500, align 1
  %502 = add i64 %498, 47
  %503 = inttoptr i64 %502 to i32*
  %504 = load i32, i32* %503, align 4
  %505 = zext i32 %504 to i64
  %506 = add i64 %501, %505
  %507 = inttoptr i64 %506 to i8*
  br label %508

508:                                              ; preds = %497, %496
  %509 = phi i8* [ %507, %497 ], [ %338, %496 ]
  %510 = bitcast i8* %509 to i64*
  %511 = ptrtoint i8* %509 to i64
  %512 = getelementptr inbounds i64, i64* %510, i64 %110
  %513 = ptrtoint i64* %512 to i64
  %514 = getelementptr inbounds %"struct.std::__1::__less", %"struct.std::__1::__less"* %14, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %514) #9
  call void @_ZNSt3__16__sortIRNS_6__lessImmEEN2v88internal13UnalignedSlotImEEEEvT0_S8_T_(i64 %511, i64 %513, %"struct.std::__1::__less"* nonnull dereferenceable(1) %14) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %514) #9
  br label %534

515:                                              ; preds = %337
  br i1 %149, label %527, label %516

516:                                              ; preds = %515
  %517 = load i64, i64* %1, align 8
  %518 = add i64 %517, 39
  %519 = inttoptr i64 %518 to i64*
  %520 = load i64, i64* %519, align 1
  %521 = add i64 %517, 47
  %522 = inttoptr i64 %521 to i32*
  %523 = load i32, i32* %522, align 4
  %524 = zext i32 %523 to i64
  %525 = add i64 %520, %524
  %526 = inttoptr i64 %525 to i8*
  br label %527

527:                                              ; preds = %516, %515
  %528 = phi i8* [ %526, %516 ], [ %338, %515 ]
  %529 = bitcast i8* %528 to i64*
  %530 = ptrtoint i8* %528 to i64
  %531 = getelementptr inbounds i64, i64* %529, i64 %110
  %532 = ptrtoint i64* %531 to i64
  %533 = getelementptr inbounds %"struct.std::__1::__less.1191", %"struct.std::__1::__less.1191"* %15, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %533) #9
  call void @_ZNSt3__16__sortIRNS_6__lessIllEEN2v88internal13UnalignedSlotIlEEEEvT0_S8_T_(i64 %530, i64 %532, %"struct.std::__1::__less.1191"* nonnull dereferenceable(1) %15) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %533) #9
  br label %534

534:                                              ; preds = %527, %508, %492, %473, %456, %439, %422, %405, %388, %372, %356, %337
  br i1 %149, label %535, label %707

535:                                              ; preds = %534
  %536 = load i64, i64* %1, align 8
  %537 = add i64 %536, 23
  %538 = inttoptr i64 %537 to i64*
  %539 = load i64, i64* %538, align 1
  %540 = add i64 %536, 39
  %541 = inttoptr i64 %540 to i64*
  %542 = load i64, i64* %541, align 1
  %543 = add i64 %536, 47
  %544 = inttoptr i64 %543 to i32*
  %545 = load i32, i32* %544, align 4
  %546 = zext i32 %545 to i64
  %547 = add i64 %542, %546
  %548 = inttoptr i64 %547 to i8*
  %549 = icmp eq i64 %539, 0
  br i1 %549, label %563, label %550

550:                                              ; preds = %535, %557
  %551 = phi i8* [ %558, %557 ], [ %548, %535 ]
  %552 = phi i64 [ %561, %557 ], [ %539, %535 ]
  %553 = phi i8* [ %559, %557 ], [ %338, %535 ]
  %554 = ptrtoint i8* %551 to i64
  %555 = and i64 %554, 7
  %556 = icmp eq i64 %555, 0
  br i1 %556, label %563, label %557

557:                                              ; preds = %550
  %558 = getelementptr inbounds i8, i8* %551, i64 1
  %559 = getelementptr inbounds i8, i8* %553, i64 1
  %560 = load atomic i8, i8* %553 monotonic, align 1
  store atomic volatile i8 %560, i8* %551 monotonic, align 1
  %561 = add i64 %552, -1
  %562 = icmp eq i64 %561, 0
  br i1 %562, label %563, label %550

563:                                              ; preds = %557, %550, %535
  %564 = phi i8* [ %338, %535 ], [ %553, %550 ], [ %559, %557 ]
  %565 = phi i64 [ 0, %535 ], [ %552, %550 ], [ 0, %557 ]
  %566 = phi i8* [ %548, %535 ], [ %551, %550 ], [ %558, %557 ]
  %567 = ptrtoint i8* %564 to i64
  %568 = and i64 %567, 7
  %569 = icmp eq i64 %568, 0
  br i1 %569, label %570, label %652

570:                                              ; preds = %563
  %571 = ptrtoint i8* %566 to i64
  %572 = and i64 %571, 7
  %573 = icmp eq i64 %572, 0
  %574 = icmp ugt i64 %565, 7
  %575 = and i1 %574, %573
  br i1 %575, label %576, label %652

576:                                              ; preds = %570
  %577 = add i64 %565, -8
  %578 = lshr i64 %577, 3
  %579 = add nuw nsw i64 %578, 1
  %580 = and i64 %579, 7
  %581 = icmp eq i64 %580, 0
  br i1 %581, label %595, label %582

582:                                              ; preds = %576, %582
  %583 = phi i8* [ %590, %582 ], [ %566, %576 ]
  %584 = phi i64 [ %592, %582 ], [ %565, %576 ]
  %585 = phi i8* [ %591, %582 ], [ %564, %576 ]
  %586 = phi i64 [ %593, %582 ], [ %580, %576 ]
  %587 = bitcast i8* %583 to i64*
  %588 = bitcast i8* %585 to i64*
  %589 = load atomic i64, i64* %588 monotonic, align 8
  store atomic volatile i64 %589, i64* %587 monotonic, align 8
  %590 = getelementptr inbounds i8, i8* %583, i64 8
  %591 = getelementptr inbounds i8, i8* %585, i64 8
  %592 = add i64 %584, -8
  %593 = add i64 %586, -1
  %594 = icmp eq i64 %593, 0
  br i1 %594, label %595, label %582, !llvm.loop !13

595:                                              ; preds = %582, %576
  %596 = phi i8* [ %566, %576 ], [ %590, %582 ]
  %597 = phi i64 [ %565, %576 ], [ %592, %582 ]
  %598 = phi i8* [ %564, %576 ], [ %591, %582 ]
  %599 = phi i8* [ undef, %576 ], [ %590, %582 ]
  %600 = phi i8* [ undef, %576 ], [ %591, %582 ]
  %601 = icmp ult i64 %577, 56
  br i1 %601, label %648, label %602

602:                                              ; preds = %595, %602
  %603 = phi i8* [ %644, %602 ], [ %596, %595 ]
  %604 = phi i64 [ %646, %602 ], [ %597, %595 ]
  %605 = phi i8* [ %645, %602 ], [ %598, %595 ]
  %606 = bitcast i8* %603 to i64*
  %607 = bitcast i8* %605 to i64*
  %608 = load atomic i64, i64* %607 monotonic, align 8
  store atomic volatile i64 %608, i64* %606 monotonic, align 8
  %609 = getelementptr inbounds i8, i8* %603, i64 8
  %610 = getelementptr inbounds i8, i8* %605, i64 8
  %611 = bitcast i8* %609 to i64*
  %612 = bitcast i8* %610 to i64*
  %613 = load atomic i64, i64* %612 monotonic, align 8
  store atomic volatile i64 %613, i64* %611 monotonic, align 8
  %614 = getelementptr inbounds i8, i8* %603, i64 16
  %615 = getelementptr inbounds i8, i8* %605, i64 16
  %616 = bitcast i8* %614 to i64*
  %617 = bitcast i8* %615 to i64*
  %618 = load atomic i64, i64* %617 monotonic, align 8
  store atomic volatile i64 %618, i64* %616 monotonic, align 8
  %619 = getelementptr inbounds i8, i8* %603, i64 24
  %620 = getelementptr inbounds i8, i8* %605, i64 24
  %621 = bitcast i8* %619 to i64*
  %622 = bitcast i8* %620 to i64*
  %623 = load atomic i64, i64* %622 monotonic, align 8
  store atomic volatile i64 %623, i64* %621 monotonic, align 8
  %624 = getelementptr inbounds i8, i8* %603, i64 32
  %625 = getelementptr inbounds i8, i8* %605, i64 32
  %626 = bitcast i8* %624 to i64*
  %627 = bitcast i8* %625 to i64*
  %628 = load atomic i64, i64* %627 monotonic, align 8
  store atomic volatile i64 %628, i64* %626 monotonic, align 8
  %629 = getelementptr inbounds i8, i8* %603, i64 40
  %630 = getelementptr inbounds i8, i8* %605, i64 40
  %631 = bitcast i8* %629 to i64*
  %632 = bitcast i8* %630 to i64*
  %633 = load atomic i64, i64* %632 monotonic, align 8
  store atomic volatile i64 %633, i64* %631 monotonic, align 8
  %634 = getelementptr inbounds i8, i8* %603, i64 48
  %635 = getelementptr inbounds i8, i8* %605, i64 48
  %636 = bitcast i8* %634 to i64*
  %637 = bitcast i8* %635 to i64*
  %638 = load atomic i64, i64* %637 monotonic, align 8
  store atomic volatile i64 %638, i64* %636 monotonic, align 8
  %639 = getelementptr inbounds i8, i8* %603, i64 56
  %640 = getelementptr inbounds i8, i8* %605, i64 56
  %641 = bitcast i8* %639 to i64*
  %642 = bitcast i8* %640 to i64*
  %643 = load atomic i64, i64* %642 monotonic, align 8
  store atomic volatile i64 %643, i64* %641 monotonic, align 8
  %644 = getelementptr inbounds i8, i8* %603, i64 64
  %645 = getelementptr inbounds i8, i8* %605, i64 64
  %646 = add i64 %604, -64
  %647 = icmp ugt i64 %646, 7
  br i1 %647, label %602, label %648

648:                                              ; preds = %602, %595
  %649 = phi i8* [ %599, %595 ], [ %644, %602 ]
  %650 = phi i8* [ %600, %595 ], [ %645, %602 ]
  %651 = and i64 %565, 7
  br label %652

652:                                              ; preds = %648, %570, %563
  %653 = phi i8* [ %564, %570 ], [ %564, %563 ], [ %650, %648 ]
  %654 = phi i64 [ %565, %570 ], [ %565, %563 ], [ %651, %648 ]
  %655 = phi i8* [ %566, %570 ], [ %566, %563 ], [ %649, %648 ]
  %656 = icmp eq i64 %654, 0
  br i1 %656, label %707, label %657

657:                                              ; preds = %652
  %658 = add i64 %654, -1
  %659 = and i64 %654, 7
  %660 = icmp eq i64 %659, 0
  br i1 %660, label %672, label %661

661:                                              ; preds = %657, %661
  %662 = phi i8* [ %666, %661 ], [ %655, %657 ]
  %663 = phi i64 [ %669, %661 ], [ %654, %657 ]
  %664 = phi i8* [ %667, %661 ], [ %653, %657 ]
  %665 = phi i64 [ %670, %661 ], [ %659, %657 ]
  %666 = getelementptr inbounds i8, i8* %662, i64 1
  %667 = getelementptr inbounds i8, i8* %664, i64 1
  %668 = load atomic i8, i8* %664 monotonic, align 1
  store atomic volatile i8 %668, i8* %662 monotonic, align 1
  %669 = add i64 %663, -1
  %670 = add i64 %665, -1
  %671 = icmp eq i64 %670, 0
  br i1 %671, label %672, label %661, !llvm.loop !14

672:                                              ; preds = %661, %657
  %673 = phi i8* [ %655, %657 ], [ %666, %661 ]
  %674 = phi i64 [ %654, %657 ], [ %669, %661 ]
  %675 = phi i8* [ %653, %657 ], [ %667, %661 ]
  %676 = icmp ult i64 %658, 7
  br i1 %676, label %707, label %677

677:                                              ; preds = %672, %677
  %678 = phi i8* [ %702, %677 ], [ %673, %672 ]
  %679 = phi i64 [ %705, %677 ], [ %674, %672 ]
  %680 = phi i8* [ %703, %677 ], [ %675, %672 ]
  %681 = getelementptr inbounds i8, i8* %678, i64 1
  %682 = getelementptr inbounds i8, i8* %680, i64 1
  %683 = load atomic i8, i8* %680 monotonic, align 1
  store atomic volatile i8 %683, i8* %678 monotonic, align 1
  %684 = getelementptr inbounds i8, i8* %678, i64 2
  %685 = getelementptr inbounds i8, i8* %680, i64 2
  %686 = load atomic i8, i8* %682 monotonic, align 1
  store atomic volatile i8 %686, i8* %681 monotonic, align 1
  %687 = getelementptr inbounds i8, i8* %678, i64 3
  %688 = getelementptr inbounds i8, i8* %680, i64 3
  %689 = load atomic i8, i8* %685 monotonic, align 1
  store atomic volatile i8 %689, i8* %684 monotonic, align 1
  %690 = getelementptr inbounds i8, i8* %678, i64 4
  %691 = getelementptr inbounds i8, i8* %680, i64 4
  %692 = load atomic i8, i8* %688 monotonic, align 1
  store atomic volatile i8 %692, i8* %687 monotonic, align 1
  %693 = getelementptr inbounds i8, i8* %678, i64 5
  %694 = getelementptr inbounds i8, i8* %680, i64 5
  %695 = load atomic i8, i8* %691 monotonic, align 1
  store atomic volatile i8 %695, i8* %690 monotonic, align 1
  %696 = getelementptr inbounds i8, i8* %678, i64 6
  %697 = getelementptr inbounds i8, i8* %680, i64 6
  %698 = load atomic i8, i8* %694 monotonic, align 1
  store atomic volatile i8 %698, i8* %693 monotonic, align 1
  %699 = getelementptr inbounds i8, i8* %678, i64 7
  %700 = getelementptr inbounds i8, i8* %680, i64 7
  %701 = load atomic i8, i8* %697 monotonic, align 1
  store atomic volatile i8 %701, i8* %696 monotonic, align 1
  %702 = getelementptr inbounds i8, i8* %678, i64 8
  %703 = getelementptr inbounds i8, i8* %680, i64 8
  %704 = load atomic i8, i8* %700 monotonic, align 1
  store atomic volatile i8 %704, i8* %699 monotonic, align 1
  %705 = add i64 %679, -8
  %706 = icmp eq i64 %705, 0
  br i1 %706, label %707, label %677

707:                                              ; preds = %672, %677, %652, %534
  %708 = load i64, i64* %1, align 8
  %709 = getelementptr inbounds %"class.std::__1::vector.1167", %"class.std::__1::vector.1167"* %16, i64 0, i32 0, i32 0
  %710 = load i8*, i8** %709, align 8
  %711 = icmp eq i8* %710, null
  br i1 %711, label %716, label %712

712:                                              ; preds = %707
  %713 = ptrtoint i8* %710 to i64
  %714 = getelementptr inbounds %"class.std::__1::vector.1167", %"class.std::__1::vector.1167"* %16, i64 0, i32 0, i32 1
  %715 = bitcast i8** %714 to i64*
  store i64 %713, i64* %715, align 8
  call void @_ZdlPv(i8* nonnull %710) #11
  br label %716

716:                                              ; preds = %712, %707
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %150) #9
  br label %717

717:                                              ; preds = %716, %104
  %718 = phi i64 [ %708, %716 ], [ %88, %104 ]
  %719 = icmp eq %"class.v8::internal::Isolate"* %2, null
  br i1 %719, label %732, label %720

720:                                              ; preds = %717
  %721 = getelementptr inbounds %"struct.v8::internal::HandleScopeData", %"struct.v8::internal::HandleScopeData"* %80, i64 0, i32 0
  %722 = load i64*, i64** %721, align 8
  store i64 %82, i64* %81, align 8
  %723 = load i32, i32* %85, align 8
  %724 = add nsw i32 %723, -1
  store i32 %724, i32* %85, align 8
  %725 = load i64*, i64** %83, align 8
  %726 = icmp eq i64* %725, %84
  br i1 %726, label %729, label %727

727:                                              ; preds = %720
  store i64* %84, i64** %83, align 8
  call void @_ZN2v88internal11HandleScope16DeleteExtensionsEPNS0_7IsolateE(%"class.v8::internal::Isolate"* nonnull %2) #9
  %728 = load i64*, i64** %721, align 8
  br label %729

729:                                              ; preds = %727, %720
  %730 = phi i64* [ %728, %727 ], [ %91, %720 ]
  %731 = phi i64* [ %84, %727 ], [ %722, %720 ]
  call void @_ZN2v88internal11HandleScope8ZapRangeEPmS2_(i64* %730, i64* %731) #9
  br label %732

732:                                              ; preds = %717, %729
  %733 = load %"struct.v8::internal::tracing::ScopedTracer::Data"*, %"struct.v8::internal::tracing::ScopedTracer::Data"** %44, align 8
  %734 = icmp eq %"struct.v8::internal::tracing::ScopedTracer::Data"* %733, null
  br i1 %734, label %751, label %735

735:                                              ; preds = %732
  %736 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %19, i64 0, i32 1, i32 0
  %737 = load i8*, i8** %736, align 8
  %738 = load atomic i8, i8* %737 monotonic, align 1
  %739 = icmp eq i8 %738, 0
  br i1 %739, label %751, label %740

740:                                              ; preds = %735
  %741 = call %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() #9
  %742 = load i8*, i8** %736, align 8
  %743 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %19, i64 0, i32 1, i32 1
  %744 = load i8*, i8** %743, align 8
  %745 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %19, i64 0, i32 1, i32 2
  %746 = load i64, i64* %745, align 8
  %747 = bitcast %"class.v8::TracingController"* %741 to void (%"class.v8::TracingController"*, i8*, i8*, i64)***
  %748 = load void (%"class.v8::TracingController"*, i8*, i8*, i64)**, void (%"class.v8::TracingController"*, i8*, i8*, i64)*** %747, align 8
  %749 = getelementptr inbounds void (%"class.v8::TracingController"*, i8*, i8*, i64)*, void (%"class.v8::TracingController"*, i8*, i8*, i64)** %748, i64 5
  %750 = load void (%"class.v8::TracingController"*, i8*, i8*, i64)*, void (%"class.v8::TracingController"*, i8*, i8*, i64)** %749, align 8
  call void %750(%"class.v8::TracingController"* %741, i8* %742, i8* %744, i64 %746) #9
  br label %751

751:                                              ; preds = %732, %735, %740
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %43) #9
  %752 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %18, i64 0, i32 0
  %753 = load %"class.v8::internal::RuntimeCallStats"*, %"class.v8::internal::RuntimeCallStats"** %752, align 8
  %754 = icmp eq %"class.v8::internal::RuntimeCallStats"* %753, null
  br i1 %754, label %757, label %755, !prof !2

755:                                              ; preds = %751
  %756 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %18, i64 0, i32 1
  call void @_ZN2v88internal16RuntimeCallStats5LeaveEPNS0_16RuntimeCallTimerE(%"class.v8::internal::RuntimeCallStats"* nonnull %753, %"class.v8::internal::RuntimeCallTimer"* %756) #9
  br label %757

757:                                              ; preds = %751, %755
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %20) #9
  ret i64 %718
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2v88internal21Runtime_TypedArraySetEiPmPNS0_7IsolateE(i32, i64*, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 {
  %4 = load atomic i32, i32* getelementptr inbounds (%"struct.std::__1::atomic.1133", %"struct.std::__1::atomic.1133"* @_ZN2v88internal12TracingFlags13runtime_statsE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6, !prof !2

6:                                                ; preds = %3
  %7 = tail call fastcc i64 @_ZN2v88internalL27Stats_Runtime_TypedArraySetEiPmPNS0_7IsolateE(i32 %0, i64* %1, %"class.v8::internal::Isolate"* %2)
  br label %138

8:                                                ; preds = %3
  %9 = ptrtoint i64* %1 to i64
  %10 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31
  %11 = bitcast %"struct.v8::internal::HandleScopeData"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 1
  %14 = load i64*, i64** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %15, align 8
  %18 = load i64, i64* %1, align 8
  %19 = and i64 %18, 1
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %32, label %21, !prof !3

21:                                               ; preds = %8
  %22 = and i64 %18, -4294967296
  %23 = add i64 %18, -1
  %24 = inttoptr i64 %23 to i32*
  %25 = load atomic i32, i32* %24 monotonic, align 4
  %26 = zext i32 %25 to i64
  %27 = or i64 %22, %26
  %28 = add i64 %27, 7
  %29 = inttoptr i64 %28 to i16*
  %30 = load atomic i16, i16* %29 monotonic, align 2
  %31 = icmp eq i16 %30, 1080
  br i1 %31, label %33, label %32, !prof !2

32:                                               ; preds = %21, %8
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0)) #10
  unreachable

33:                                               ; preds = %21
  %34 = add i64 %9, -8
  %35 = inttoptr i64 %34 to i64*
  %36 = add i64 %9, -16
  %37 = inttoptr i64 %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = and i64 %38, 1
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %53, label %41

41:                                               ; preds = %33
  %42 = and i64 %38, -4294967296
  %43 = add i64 %38, -1
  %44 = inttoptr i64 %43 to i32*
  %45 = load atomic i32, i32* %44 monotonic, align 4
  %46 = zext i32 %45 to i64
  %47 = or i64 %42, %46
  %48 = add i64 %47, 7
  %49 = inttoptr i64 %48 to i16*
  %50 = load atomic i16, i16* %49 monotonic, align 2
  %51 = icmp eq i16 %50, 66
  br i1 %51, label %53, label %52, !prof !2

52:                                               ; preds = %41
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0)) #10
  unreachable

53:                                               ; preds = %41, %33
  %54 = add i64 %9, -24
  %55 = inttoptr i64 %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = and i64 %56, 1
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %53
  %60 = and i64 %56, -4294967296
  %61 = add i64 %56, -1
  %62 = inttoptr i64 %61 to i32*
  %63 = load atomic i32, i32* %62 monotonic, align 4
  %64 = zext i32 %63 to i64
  %65 = or i64 %60, %64
  %66 = add i64 %65, 7
  %67 = inttoptr i64 %66 to i16*
  %68 = load atomic i16, i16* %67 monotonic, align 2
  %69 = icmp eq i16 %68, 66
  br i1 %69, label %71, label %70, !prof !2

70:                                               ; preds = %59
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16, i64 0, i64 0)) #10
  unreachable

71:                                               ; preds = %59, %53
  br i1 %40, label %72, label %78

72:                                               ; preds = %71
  %73 = trunc i64 %38 to i32
  %74 = icmp sgt i32 %73, -1
  br i1 %74, label %75, label %87, !prof !4

75:                                               ; preds = %72
  %76 = lshr i64 %38, 1
  %77 = and i64 %76, 2147483647
  br label %88

78:                                               ; preds = %71
  %79 = add i64 %38, 3
  %80 = inttoptr i64 %79 to double*
  %81 = load double, double* %80, align 1
  %82 = fcmp oge double %81, 0.000000e+00
  %83 = fcmp olt double %81, 0x43F0000000000000
  %84 = and i1 %82, %83
  br i1 %84, label %85, label %87, !prof !4

85:                                               ; preds = %78
  %86 = fptoui double %81 to i64
  br label %88

87:                                               ; preds = %78, %72
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7, i64 0, i64 0)) #10
  unreachable

88:                                               ; preds = %85, %75
  %89 = phi i64 [ %86, %85 ], [ %77, %75 ]
  br i1 %58, label %90, label %96

90:                                               ; preds = %88
  %91 = trunc i64 %56 to i32
  %92 = icmp sgt i32 %91, -1
  br i1 %92, label %93, label %105, !prof !4

93:                                               ; preds = %90
  %94 = lshr i64 %56, 1
  %95 = and i64 %94, 2147483647
  br label %106

96:                                               ; preds = %88
  %97 = add i64 %56, 3
  %98 = inttoptr i64 %97 to double*
  %99 = load double, double* %98, align 1
  %100 = fcmp oge double %99, 0.000000e+00
  %101 = fcmp olt double %99, 0x43F0000000000000
  %102 = and i1 %100, %101
  br i1 %102, label %103, label %105, !prof !4

103:                                              ; preds = %96
  %104 = fptoui double %99 to i64
  br label %106

105:                                              ; preds = %96, %90
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.17, i64 0, i64 0)) #10
  unreachable

106:                                              ; preds = %103, %93
  %107 = phi i64 [ %104, %103 ], [ %95, %93 ]
  %108 = load atomic i32, i32* %24 monotonic, align 4
  %109 = zext i32 %108 to i64
  %110 = or i64 %22, %109
  %111 = add i64 %110, 10
  %112 = inttoptr i64 %111 to i8*
  %113 = load i8, i8* %112, align 1
  %114 = lshr i8 %113, 2
  %115 = load %"class.v8::internal::ElementsAccessor"**, %"class.v8::internal::ElementsAccessor"*** @_ZN2v88internal16ElementsAccessor19elements_accessors_E, align 8
  %116 = zext i8 %114 to i64
  %117 = getelementptr inbounds %"class.v8::internal::ElementsAccessor"*, %"class.v8::internal::ElementsAccessor"** %115, i64 %116
  %118 = load %"class.v8::internal::ElementsAccessor"*, %"class.v8::internal::ElementsAccessor"** %117, align 8
  %119 = bitcast %"class.v8::internal::ElementsAccessor"* %118 to i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)***
  %120 = load i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)**, i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)*** %119, align 8
  %121 = getelementptr inbounds i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)*, i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)** %120, i64 30
  %122 = load i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)*, i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)** %121, align 8
  %123 = tail call i64 %122(%"class.v8::internal::ElementsAccessor"* %118, i64* %35, i64* %1, i64 %89, i64 %107) #9
  %124 = icmp eq %"class.v8::internal::Isolate"* %2, null
  br i1 %124, label %138, label %125

125:                                              ; preds = %106
  %126 = inttoptr i64 %12 to i64*
  %127 = getelementptr inbounds %"struct.v8::internal::HandleScopeData", %"struct.v8::internal::HandleScopeData"* %10, i64 0, i32 0
  %128 = load i64*, i64** %127, align 8
  store i64 %12, i64* %11, align 8
  %129 = load i32, i32* %15, align 8
  %130 = add nsw i32 %129, -1
  store i32 %130, i32* %15, align 8
  %131 = load i64*, i64** %13, align 8
  %132 = icmp eq i64* %131, %14
  br i1 %132, label %135, label %133

133:                                              ; preds = %125
  store i64* %14, i64** %13, align 8
  tail call void @_ZN2v88internal11HandleScope16DeleteExtensionsEPNS0_7IsolateE(%"class.v8::internal::Isolate"* nonnull %2) #9
  %134 = load i64*, i64** %127, align 8
  br label %135

135:                                              ; preds = %133, %125
  %136 = phi i64* [ %134, %133 ], [ %126, %125 ]
  %137 = phi i64* [ %14, %133 ], [ %128, %125 ]
  tail call void @_ZN2v88internal11HandleScope8ZapRangeEPmS2_(i64* %136, i64* %137) #9
  br label %138

138:                                              ; preds = %135, %106, %6
  %139 = phi i64 [ %7, %6 ], [ %123, %106 ], [ %123, %135 ]
  ret i64 %139
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @_ZN2v88internalL27Stats_Runtime_TypedArraySetEiPmPNS0_7IsolateE(i32, i64*, %"class.v8::internal::Isolate"*) unnamed_addr #1 {
  %4 = alloca [2 x %"class.std::__1::unique_ptr.1143"], align 16
  %5 = alloca %"class.v8::internal::RuntimeCallTimerScope", align 8
  %6 = alloca %"class.v8::internal::tracing::ScopedTracer", align 8
  %7 = bitcast %"class.v8::internal::RuntimeCallTimerScope"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %7) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 40, i1 false) #9
  %8 = load atomic i32, i32* getelementptr inbounds (%"struct.std::__1::atomic.1133", %"struct.std::__1::atomic.1133"* @_ZN2v88internal12TracingFlags13runtime_statsE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %16, label %10, !prof !2

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %5, i64 0, i32 0
  %12 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %5, i64 0, i32 1
  %13 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 14, i32 0
  %14 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %14, i64 0, i32 757
  store %"class.v8::internal::RuntimeCallStats"* %15, %"class.v8::internal::RuntimeCallStats"** %11, align 8
  call void @_ZN2v88internal16RuntimeCallStats5EnterEPNS0_16RuntimeCallTimerENS0_20RuntimeCallCounterIdE(%"class.v8::internal::RuntimeCallStats"* %15, %"class.v8::internal::RuntimeCallTimer"* %12, i32 693) #9
  br label %16

16:                                               ; preds = %3, %10
  %17 = load atomic i64, i64* @_ZZN2v88internalL27Stats_Runtime_TypedArraySetEiPmPNS0_7IsolateEE28trace_event_unique_atomic176 monotonic, align 8
  %18 = inttoptr i64 %17 to i8*
  %19 = icmp eq i64 %17, 0
  br i1 %19, label %20, label %28

20:                                               ; preds = %16
  %21 = call %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() #9
  %22 = bitcast %"class.v8::TracingController"* %21 to i8* (%"class.v8::TracingController"*, i8*)***
  %23 = load i8* (%"class.v8::TracingController"*, i8*)**, i8* (%"class.v8::TracingController"*, i8*)*** %22, align 8
  %24 = getelementptr inbounds i8* (%"class.v8::TracingController"*, i8*)*, i8* (%"class.v8::TracingController"*, i8*)** %23, i64 2
  %25 = load i8* (%"class.v8::TracingController"*, i8*)*, i8* (%"class.v8::TracingController"*, i8*)** %24, align 8
  %26 = call i8* %25(%"class.v8::TracingController"* %21, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0)) #9
  %27 = ptrtoint i8* %26 to i64
  store atomic volatile i64 %27, i64* @_ZZN2v88internalL27Stats_Runtime_TypedArraySetEiPmPNS0_7IsolateEE28trace_event_unique_atomic176 monotonic, align 8
  br label %28

28:                                               ; preds = %16, %20
  %29 = phi i8* [ %18, %16 ], [ %26, %20 ]
  %30 = bitcast %"class.v8::internal::tracing::ScopedTracer"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %30) #9
  %31 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %6, i64 0, i32 0
  store %"struct.v8::internal::tracing::ScopedTracer::Data"* null, %"struct.v8::internal::tracing::ScopedTracer::Data"** %31, align 8
  %32 = load atomic i8, i8* %29 monotonic, align 1
  %33 = and i8 %32, 5
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %66, label %35

35:                                               ; preds = %28
  %36 = bitcast [2 x %"class.std::__1::unique_ptr.1143"]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %36) #9
  %37 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1143"], [2 x %"class.std::__1::unique_ptr.1143"]* %4, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 0, i64 16, i1 false) #9
  %38 = call %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() #9
  %39 = bitcast %"class.v8::TracingController"* %38 to i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)***
  %40 = load i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)**, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)*** %39, align 8
  %41 = getelementptr inbounds i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)*, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)** %40, i64 3
  %42 = load i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)*, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1143"*, i32)** %41, align 8
  %43 = call i64 %42(%"class.v8::TracingController"* %38, i8 signext 88, i8* %29, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.15, i64 0, i64 0), i8* null, i64 0, i64 0, i32 0, i8** null, i8* null, i64* null, %"class.std::__1::unique_ptr.1143"* nonnull %37, i32 0) #9
  %44 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1143"], [2 x %"class.std::__1::unique_ptr.1143"]* %4, i64 0, i64 1, i32 0, i32 0, i32 0
  %45 = load %"class.v8::ConvertableToTraceFormat"*, %"class.v8::ConvertableToTraceFormat"** %44, align 8
  store %"class.v8::ConvertableToTraceFormat"* null, %"class.v8::ConvertableToTraceFormat"** %44, align 8
  %46 = icmp eq %"class.v8::ConvertableToTraceFormat"* %45, null
  br i1 %46, label %52, label %47

47:                                               ; preds = %35
  %48 = bitcast %"class.v8::ConvertableToTraceFormat"* %45 to void (%"class.v8::ConvertableToTraceFormat"*)***
  %49 = load void (%"class.v8::ConvertableToTraceFormat"*)**, void (%"class.v8::ConvertableToTraceFormat"*)*** %48, align 8
  %50 = getelementptr inbounds void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %49, i64 1
  %51 = load void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %50, align 8
  call void %51(%"class.v8::ConvertableToTraceFormat"* nonnull %45) #9
  br label %52

52:                                               ; preds = %47, %35
  %53 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1143"], [2 x %"class.std::__1::unique_ptr.1143"]* %4, i64 0, i64 0, i32 0, i32 0, i32 0
  %54 = load %"class.v8::ConvertableToTraceFormat"*, %"class.v8::ConvertableToTraceFormat"** %53, align 16
  store %"class.v8::ConvertableToTraceFormat"* null, %"class.v8::ConvertableToTraceFormat"** %53, align 16
  %55 = icmp eq %"class.v8::ConvertableToTraceFormat"* %54, null
  br i1 %55, label %61, label %56

56:                                               ; preds = %52
  %57 = bitcast %"class.v8::ConvertableToTraceFormat"* %54 to void (%"class.v8::ConvertableToTraceFormat"*)***
  %58 = load void (%"class.v8::ConvertableToTraceFormat"*)**, void (%"class.v8::ConvertableToTraceFormat"*)*** %57, align 8
  %59 = getelementptr inbounds void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %58, i64 1
  %60 = load void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %59, align 8
  call void %60(%"class.v8::ConvertableToTraceFormat"* nonnull %54) #9
  br label %61

61:                                               ; preds = %52, %56
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %36) #9
  %62 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %6, i64 0, i32 1
  %63 = getelementptr inbounds %"struct.v8::internal::tracing::ScopedTracer::Data", %"struct.v8::internal::tracing::ScopedTracer::Data"* %62, i64 0, i32 0
  store i8* %29, i8** %63, align 8
  %64 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %6, i64 0, i32 1, i32 1
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.15, i64 0, i64 0), i8** %64, align 8
  %65 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %6, i64 0, i32 1, i32 2
  store i64 %43, i64* %65, align 8
  store %"struct.v8::internal::tracing::ScopedTracer::Data"* %62, %"struct.v8::internal::tracing::ScopedTracer::Data"** %31, align 8
  br label %66

66:                                               ; preds = %28, %61
  %67 = ptrtoint i64* %1 to i64
  %68 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31
  %69 = bitcast %"struct.v8::internal::HandleScopeData"* %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 1
  %72 = load i64*, i64** %71, align 8
  %73 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 2
  %74 = load i32, i32* %73, align 8
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* %73, align 8
  %76 = load i64, i64* %1, align 8
  %77 = and i64 %76, 1
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %90, label %79, !prof !3

79:                                               ; preds = %66
  %80 = and i64 %76, -4294967296
  %81 = add i64 %76, -1
  %82 = inttoptr i64 %81 to i32*
  %83 = load atomic i32, i32* %82 monotonic, align 4
  %84 = zext i32 %83 to i64
  %85 = or i64 %80, %84
  %86 = add i64 %85, 7
  %87 = inttoptr i64 %86 to i16*
  %88 = load atomic i16, i16* %87 monotonic, align 2
  %89 = icmp eq i16 %88, 1080
  br i1 %89, label %91, label %90, !prof !2

90:                                               ; preds = %79, %66
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0)) #10
  unreachable

91:                                               ; preds = %79
  %92 = add i64 %67, -8
  %93 = inttoptr i64 %92 to i64*
  %94 = add i64 %67, -16
  %95 = inttoptr i64 %94 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = and i64 %96, 1
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %111, label %99

99:                                               ; preds = %91
  %100 = and i64 %96, -4294967296
  %101 = add i64 %96, -1
  %102 = inttoptr i64 %101 to i32*
  %103 = load atomic i32, i32* %102 monotonic, align 4
  %104 = zext i32 %103 to i64
  %105 = or i64 %100, %104
  %106 = add i64 %105, 7
  %107 = inttoptr i64 %106 to i16*
  %108 = load atomic i16, i16* %107 monotonic, align 2
  %109 = icmp eq i16 %108, 66
  br i1 %109, label %111, label %110, !prof !2

110:                                              ; preds = %99
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0)) #10
  unreachable

111:                                              ; preds = %99, %91
  %112 = add i64 %67, -24
  %113 = inttoptr i64 %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = and i64 %114, 1
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %129, label %117

117:                                              ; preds = %111
  %118 = and i64 %114, -4294967296
  %119 = add i64 %114, -1
  %120 = inttoptr i64 %119 to i32*
  %121 = load atomic i32, i32* %120 monotonic, align 4
  %122 = zext i32 %121 to i64
  %123 = or i64 %118, %122
  %124 = add i64 %123, 7
  %125 = inttoptr i64 %124 to i16*
  %126 = load atomic i16, i16* %125 monotonic, align 2
  %127 = icmp eq i16 %126, 66
  br i1 %127, label %129, label %128, !prof !2

128:                                              ; preds = %117
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16, i64 0, i64 0)) #10
  unreachable

129:                                              ; preds = %117, %111
  br i1 %98, label %130, label %136

130:                                              ; preds = %129
  %131 = trunc i64 %96 to i32
  %132 = icmp sgt i32 %131, -1
  br i1 %132, label %133, label %145, !prof !4

133:                                              ; preds = %130
  %134 = lshr i64 %96, 1
  %135 = and i64 %134, 2147483647
  br label %146

136:                                              ; preds = %129
  %137 = add i64 %96, 3
  %138 = inttoptr i64 %137 to double*
  %139 = load double, double* %138, align 1
  %140 = fcmp oge double %139, 0.000000e+00
  %141 = fcmp olt double %139, 0x43F0000000000000
  %142 = and i1 %140, %141
  br i1 %142, label %143, label %145, !prof !4

143:                                              ; preds = %136
  %144 = fptoui double %139 to i64
  br label %146

145:                                              ; preds = %136, %130
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7, i64 0, i64 0)) #10
  unreachable

146:                                              ; preds = %143, %133
  %147 = phi i64 [ %144, %143 ], [ %135, %133 ]
  br i1 %116, label %148, label %154

148:                                              ; preds = %146
  %149 = trunc i64 %114 to i32
  %150 = icmp sgt i32 %149, -1
  br i1 %150, label %151, label %163, !prof !4

151:                                              ; preds = %148
  %152 = lshr i64 %114, 1
  %153 = and i64 %152, 2147483647
  br label %164

154:                                              ; preds = %146
  %155 = add i64 %114, 3
  %156 = inttoptr i64 %155 to double*
  %157 = load double, double* %156, align 1
  %158 = fcmp oge double %157, 0.000000e+00
  %159 = fcmp olt double %157, 0x43F0000000000000
  %160 = and i1 %158, %159
  br i1 %160, label %161, label %163, !prof !4

161:                                              ; preds = %154
  %162 = fptoui double %157 to i64
  br label %164

163:                                              ; preds = %154, %148
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.17, i64 0, i64 0)) #10
  unreachable

164:                                              ; preds = %161, %151
  %165 = phi i64 [ %162, %161 ], [ %153, %151 ]
  %166 = load atomic i32, i32* %82 monotonic, align 4
  %167 = zext i32 %166 to i64
  %168 = or i64 %80, %167
  %169 = add i64 %168, 10
  %170 = inttoptr i64 %169 to i8*
  %171 = load i8, i8* %170, align 1
  %172 = lshr i8 %171, 2
  %173 = load %"class.v8::internal::ElementsAccessor"**, %"class.v8::internal::ElementsAccessor"*** @_ZN2v88internal16ElementsAccessor19elements_accessors_E, align 8
  %174 = zext i8 %172 to i64
  %175 = getelementptr inbounds %"class.v8::internal::ElementsAccessor"*, %"class.v8::internal::ElementsAccessor"** %173, i64 %174
  %176 = load %"class.v8::internal::ElementsAccessor"*, %"class.v8::internal::ElementsAccessor"** %175, align 8
  %177 = bitcast %"class.v8::internal::ElementsAccessor"* %176 to i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)***
  %178 = load i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)**, i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)*** %177, align 8
  %179 = getelementptr inbounds i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)*, i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)** %178, i64 30
  %180 = load i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)*, i64 (%"class.v8::internal::ElementsAccessor"*, i64*, i64*, i64, i64)** %179, align 8
  %181 = call i64 %180(%"class.v8::internal::ElementsAccessor"* %176, i64* %93, i64* %1, i64 %147, i64 %165) #9
  %182 = icmp eq %"class.v8::internal::Isolate"* %2, null
  br i1 %182, label %196, label %183

183:                                              ; preds = %164
  %184 = inttoptr i64 %70 to i64*
  %185 = getelementptr inbounds %"struct.v8::internal::HandleScopeData", %"struct.v8::internal::HandleScopeData"* %68, i64 0, i32 0
  %186 = load i64*, i64** %185, align 8
  store i64 %70, i64* %69, align 8
  %187 = load i32, i32* %73, align 8
  %188 = add nsw i32 %187, -1
  store i32 %188, i32* %73, align 8
  %189 = load i64*, i64** %71, align 8
  %190 = icmp eq i64* %189, %72
  br i1 %190, label %193, label %191

191:                                              ; preds = %183
  store i64* %72, i64** %71, align 8
  call void @_ZN2v88internal11HandleScope16DeleteExtensionsEPNS0_7IsolateE(%"class.v8::internal::Isolate"* nonnull %2) #9
  %192 = load i64*, i64** %185, align 8
  br label %193

193:                                              ; preds = %191, %183
  %194 = phi i64* [ %192, %191 ], [ %184, %183 ]
  %195 = phi i64* [ %72, %191 ], [ %186, %183 ]
  call void @_ZN2v88internal11HandleScope8ZapRangeEPmS2_(i64* %194, i64* %195) #9
  br label %196

196:                                              ; preds = %164, %193
  %197 = load %"struct.v8::internal::tracing::ScopedTracer::Data"*, %"struct.v8::internal::tracing::ScopedTracer::Data"** %31, align 8
  %198 = icmp eq %"struct.v8::internal::tracing::ScopedTracer::Data"* %197, null
  br i1 %198, label %215, label %199

199:                                              ; preds = %196
  %200 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %6, i64 0, i32 1, i32 0
  %201 = load i8*, i8** %200, align 8
  %202 = load atomic i8, i8* %201 monotonic, align 1
  %203 = icmp eq i8 %202, 0
  br i1 %203, label %215, label %204

204:                                              ; preds = %199
  %205 = call %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() #9
  %206 = load i8*, i8** %200, align 8
  %207 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %6, i64 0, i32 1, i32 1
  %208 = load i8*, i8** %207, align 8
  %209 = getelementptr inbounds %"class.v8::internal::tracing::ScopedTracer", %"class.v8::internal::tracing::ScopedTracer"* %6, i64 0, i32 1, i32 2
  %210 = load i64, i64* %209, align 8
  %211 = bitcast %"class.v8::TracingController"* %205 to void (%"class.v8::TracingController"*, i8*, i8*, i64)***
  %212 = load void (%"class.v8::TracingController"*, i8*, i8*, i64)**, void (%"class.v8::TracingController"*, i8*, i8*, i64)*** %211, align 8
  %213 = getelementptr inbounds void (%"class.v8::TracingController"*, i8*, i8*, i64)*, void (%"class.v8::TracingController"*, i8*, i8*, i64)** %212, i64 5
  %214 = load void (%"class.v8::TracingController"*, i8*, i8*, i64)*, void (%"class.v8::TracingController"*, i8*, i8*, i64)** %213, align 8
  call void %214(%"class.v8::TracingController"* %205, i8* %206, i8* %208, i64 %210) #9
  br label %215

215:                                              ; preds = %196, %199, %204
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %30) #9
  %216 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %5, i64 0, i32 0
  %217 = load %"class.v8::internal::RuntimeCallStats"*, %"class.v8::internal::RuntimeCallStats"** %216, align 8
  %218 = icmp eq %"class.v8::internal::RuntimeCallStats"* %217, null
  br i1 %218, label %221, label %219, !prof !2

219:                                              ; preds = %215
  %220 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %5, i64 0, i32 1
  call void @_ZN2v88internal16RuntimeCallStats5LeaveEPNS0_16RuntimeCallTimerE(%"class.v8::internal::RuntimeCallStats"* nonnull %217, %"class.v8::internal::RuntimeCallTimer"* %220) #9
  br label %221

221:                                              ; preds = %215, %219
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %7) #9
  ret i64 %181
}

declare %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() local_unnamed_addr #3

declare void @_ZN2v88internal16RuntimeCallStats5EnterEPNS0_16RuntimeCallTimerENS0_20RuntimeCallCounterIdE(%"class.v8::internal::RuntimeCallStats"*, %"class.v8::internal::RuntimeCallTimer"*, i32) local_unnamed_addr #3

declare void @_ZN2v88internal16RuntimeCallStats5LeaveEPNS0_16RuntimeCallTimerE(%"class.v8::internal::RuntimeCallStats"*, %"class.v8::internal::RuntimeCallTimer"*) local_unnamed_addr #3

declare i64* @_ZN2v88internal7Factory12NewTypeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"*, i32, i64*, i64*, i64*) local_unnamed_addr #3

declare void @_ZN2v88internal13JSArrayBuffer6DetachEb(%"class.v8::internal::JSArrayBuffer"*, i1 zeroext) local_unnamed_addr #3

declare i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"*, i64, %"class.v8::internal::MessageLocation"*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN2v88internal11HandleScope16DeleteExtensionsEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #3

declare void @_ZN2v88internal11HandleScope8ZapRangeEPmS2_(i64*, i64*) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #4

declare i64* @_ZN2v88internal12JSTypedArray9GetBufferEv(%"class.v8::internal::JSTypedArray"*) local_unnamed_addr #3

declare { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* } @_ZN2v88internal13JSArrayBuffer15GetBackingStoreEv(%"class.v8::internal::JSArrayBuffer"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"*) local_unnamed_addr #5

declare i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"*, i64) local_unnamed_addr #3

declare i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #3

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewHeapNumberILNS0_14AllocationTypeE0EEENS0_6HandleINS0_10HeapNumberEEEv(%"class.v8::internal::FactoryBase"*) local_unnamed_addr #3

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE12NewByteArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"*, i32, i8 zeroext) local_unnamed_addr #3

declare i32 @_ZN2v88internal12JSTypedArray4typeEv(%"class.v8::internal::JSTypedArray"*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZN2v88internal12_GLOBAL__N_110CompareNumIfEEbT_S3_(float, float) #6 {
  %3 = fcmp olt float %0, %1
  br i1 %3, label %24, label %4

4:                                                ; preds = %2
  %5 = fcmp ogt float %0, %1
  br i1 %5, label %24, label %6

6:                                                ; preds = %4
  %7 = fpext float %1 to double
  %8 = fcmp oeq float %0, 0.000000e+00
  %9 = fcmp oeq float %0, %1
  %10 = and i1 %8, %9
  br i1 %10, label %11, label %18

11:                                               ; preds = %6
  %12 = fpext float %0 to double
  %13 = bitcast double %12 to i64
  %14 = icmp slt i64 %13, 0
  br i1 %14, label %15, label %22

15:                                               ; preds = %11
  %16 = bitcast double %7 to i64
  %17 = icmp sgt i64 %16, -1
  br label %22

18:                                               ; preds = %6
  %19 = fcmp ord float %0, 0.000000e+00
  %20 = fcmp uno float %1, 0.000000e+00
  %21 = and i1 %19, %20
  br i1 %21, label %22, label %24

22:                                               ; preds = %18, %15, %11
  %23 = phi i1 [ %17, %15 ], [ false, %11 ], [ true, %18 ]
  br label %24

24:                                               ; preds = %2, %4, %18, %22
  %25 = phi i1 [ %23, %22 ], [ false, %18 ], [ true, %2 ], [ false, %4 ]
  ret i1 %25
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZN2v88internal12_GLOBAL__N_110CompareNumIdEEbT_S3_(double, double) #6 {
  %3 = fcmp olt double %0, %1
  br i1 %3, label %22, label %4

4:                                                ; preds = %2
  %5 = fcmp ogt double %0, %1
  br i1 %5, label %22, label %6

6:                                                ; preds = %4
  %7 = fcmp oeq double %0, 0.000000e+00
  %8 = fcmp oeq double %0, %1
  %9 = and i1 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast double %0 to i64
  %12 = icmp slt i64 %11, 0
  br i1 %12, label %13, label %20

13:                                               ; preds = %10
  %14 = bitcast double %1 to i64
  %15 = icmp sgt i64 %14, -1
  br label %20

16:                                               ; preds = %6
  %17 = fcmp ord double %0, 0.000000e+00
  %18 = fcmp uno double %1, 0.000000e+00
  %19 = and i1 %17, %18
  br i1 %19, label %20, label %22

20:                                               ; preds = %16, %13, %10
  %21 = phi i1 [ %15, %13 ], [ false, %10 ], [ true, %16 ]
  br label %22

22:                                               ; preds = %2, %4, %16, %20
  %23 = phi i1 [ %21, %20 ], [ false, %16 ], [ true, %2 ], [ false, %4 ]
  ret i1 %23
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.1167"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.1167", %"class.std::__1::vector.1167"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.1167", %"class.std::__1::vector.1167"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #9
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector.1167"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector.1167"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #10
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #11
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #9
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector.1167", %"class.std::__1::vector.1167"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #9
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #11
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

declare void @_ZNSt3__16__sortIRNS_6__lessIhhEEPhEEvT0_S5_T_(i8*, i8*, %"struct.std::__1::__less.1185"* dereferenceable(1)) local_unnamed_addr #3

declare void @_ZNSt3__16__sortIRNS_6__lessIaaEEPaEEvT0_S5_T_(i8*, i8*, %"struct.std::__1::__less.1186"* dereferenceable(1)) local_unnamed_addr #3

declare void @_ZNSt3__16__sortIRNS_6__lessIttEEPtEEvT0_S5_T_(i16*, i16*, %"struct.std::__1::__less.1187"* dereferenceable(1)) local_unnamed_addr #3

declare void @_ZNSt3__16__sortIRNS_6__lessIssEEPsEEvT0_S5_T_(i16*, i16*, %"struct.std::__1::__less.1188"* dereferenceable(1)) local_unnamed_addr #3

declare void @_ZNSt3__16__sortIRNS_6__lessIjjEEPjEEvT0_S5_T_(i32*, i32*, %"struct.std::__1::__less.1189"* dereferenceable(1)) local_unnamed_addr #3

declare void @_ZNSt3__16__sortIRNS_6__lessIiiEEPiEEvT0_S5_T_(i32*, i32*, %"struct.std::__1::__less.1190"* dereferenceable(1)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__sortIRPFbffEPfEEvT0_S5_T_(float*, float*, i1 (float, float)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  br label %4

4:                                                ; preds = %333, %3
  %5 = phi float* [ %1, %3 ], [ %312, %333 ]
  %6 = phi float* [ %0, %3 ], [ %18, %333 ]
  %7 = ptrtoint float* %5 to i64
  %8 = getelementptr inbounds float, float* %5, i64 -1
  %9 = bitcast float* %8 to i32*
  %10 = bitcast float* %8 to i32*
  %11 = bitcast float* %8 to i32*
  %12 = bitcast float* %8 to i32*
  %13 = bitcast float* %8 to i32*
  %14 = ptrtoint float* %5 to i64
  br label %15

15:                                               ; preds = %342, %4
  %16 = phi float* [ %6, %4 ], [ %343, %342 ]
  br label %17

17:                                               ; preds = %256, %15
  %18 = phi float* [ %16, %15 ], [ %243, %256 ]
  %19 = ptrtoint float* %18 to i64
  %20 = sub i64 %7, %19
  %21 = ashr exact i64 %20, 2
  switch i64 %21, label %119 [
    i64 0, label %346
    i64 1, label %346
    i64 2, label %22
    i64 3, label %33
    i64 4, label %75
    i64 5, label %80
  ]

22:                                               ; preds = %17
  %23 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %24 = getelementptr inbounds float, float* %5, i64 -1
  %25 = load float, float* %24, align 4
  %26 = load float, float* %18, align 4
  %27 = tail call zeroext i1 %23(float %25, float %26) #9
  br i1 %27, label %28, label %346

28:                                               ; preds = %22
  %29 = bitcast float* %18 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = bitcast float* %24 to i32*
  %32 = load i32, i32* %31, align 4
  store i32 %32, i32* %29, align 4
  store i32 %30, i32* %31, align 4
  br label %346

33:                                               ; preds = %17
  %34 = getelementptr inbounds float, float* %18, i64 1
  %35 = getelementptr inbounds float, float* %5, i64 -1
  %36 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %37 = load float, float* %34, align 4
  %38 = load float, float* %18, align 4
  %39 = tail call zeroext i1 %36(float %37, float %38) #9
  %40 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %41 = load float, float* %35, align 4
  %42 = load float, float* %34, align 4
  %43 = tail call zeroext i1 %40(float %41, float %42) #9
  br i1 %39, label %58, label %44

44:                                               ; preds = %33
  br i1 %43, label %45, label %346

45:                                               ; preds = %44
  %46 = bitcast float* %34 to i32*
  %47 = load i32, i32* %46, align 4
  %48 = bitcast float* %35 to i32*
  %49 = load i32, i32* %48, align 4
  store i32 %49, i32* %46, align 4
  store i32 %47, i32* %48, align 4
  %50 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %51 = load float, float* %34, align 4
  %52 = load float, float* %18, align 4
  %53 = tail call zeroext i1 %50(float %51, float %52) #9
  br i1 %53, label %54, label %346

54:                                               ; preds = %45
  %55 = bitcast float* %18 to i32*
  %56 = load i32, i32* %55, align 4
  %57 = load i32, i32* %46, align 4
  store i32 %57, i32* %55, align 4
  store i32 %56, i32* %46, align 4
  br label %346

58:                                               ; preds = %33
  %59 = bitcast float* %18 to i32*
  %60 = load i32, i32* %59, align 4
  br i1 %43, label %61, label %64

61:                                               ; preds = %58
  %62 = bitcast float* %35 to i32*
  %63 = load i32, i32* %62, align 4
  store i32 %63, i32* %59, align 4
  store i32 %60, i32* %62, align 4
  br label %346

64:                                               ; preds = %58
  %65 = bitcast float* %34 to i32*
  %66 = load i32, i32* %65, align 4
  store i32 %66, i32* %59, align 4
  store i32 %60, i32* %65, align 4
  %67 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %68 = load float, float* %35, align 4
  %69 = bitcast i32 %60 to float
  %70 = tail call zeroext i1 %67(float %68, float %69) #9
  br i1 %70, label %71, label %346

71:                                               ; preds = %64
  %72 = load i32, i32* %65, align 4
  %73 = bitcast float* %35 to i32*
  %74 = load i32, i32* %73, align 4
  store i32 %74, i32* %65, align 4
  store i32 %72, i32* %73, align 4
  br label %346

75:                                               ; preds = %17
  %76 = getelementptr inbounds float, float* %18, i64 1
  %77 = getelementptr inbounds float, float* %18, i64 2
  %78 = getelementptr inbounds float, float* %5, i64 -1
  %79 = tail call i32 @_ZNSt3__17__sort4IRPFbffEPfEEjT0_S5_S5_S5_T_(float* %18, float* %76, float* %77, float* %78, i1 (float, float)** dereferenceable(8) %2)
  br label %346

80:                                               ; preds = %17
  %81 = getelementptr inbounds float, float* %18, i64 1
  %82 = getelementptr inbounds float, float* %18, i64 2
  %83 = getelementptr inbounds float, float* %18, i64 3
  %84 = getelementptr inbounds float, float* %5, i64 -1
  %85 = tail call i32 @_ZNSt3__17__sort4IRPFbffEPfEEjT0_S5_S5_S5_T_(float* %18, float* %81, float* %82, float* %83, i1 (float, float)** dereferenceable(8) %2) #9
  %86 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %87 = load float, float* %84, align 4
  %88 = load float, float* %83, align 4
  %89 = tail call zeroext i1 %86(float %87, float %88) #9
  br i1 %89, label %90, label %346

90:                                               ; preds = %80
  %91 = bitcast float* %83 to i32*
  %92 = load i32, i32* %91, align 4
  %93 = bitcast float* %84 to i32*
  %94 = load i32, i32* %93, align 4
  store i32 %94, i32* %91, align 4
  store i32 %92, i32* %93, align 4
  %95 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %96 = load float, float* %83, align 4
  %97 = load float, float* %82, align 4
  %98 = tail call zeroext i1 %95(float %96, float %97) #9
  br i1 %98, label %99, label %346

99:                                               ; preds = %90
  %100 = bitcast float* %82 to i32*
  %101 = load i32, i32* %100, align 4
  %102 = load i32, i32* %91, align 4
  store i32 %102, i32* %100, align 4
  store i32 %101, i32* %91, align 4
  %103 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %104 = bitcast i32 %102 to float
  %105 = load float, float* %81, align 4
  %106 = tail call zeroext i1 %103(float %104, float %105) #9
  br i1 %106, label %107, label %346

107:                                              ; preds = %99
  %108 = bitcast float* %81 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = load i32, i32* %100, align 4
  store i32 %110, i32* %108, align 4
  store i32 %109, i32* %100, align 4
  %111 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %112 = bitcast i32 %110 to float
  %113 = load float, float* %18, align 4
  %114 = tail call zeroext i1 %111(float %112, float %113) #9
  br i1 %114, label %115, label %346

115:                                              ; preds = %107
  %116 = bitcast float* %18 to i32*
  %117 = load i32, i32* %116, align 4
  %118 = load i32, i32* %108, align 4
  store i32 %118, i32* %116, align 4
  store i32 %117, i32* %108, align 4
  br label %346

119:                                              ; preds = %17
  %120 = icmp slt i64 %20, 124
  br i1 %120, label %121, label %122

121:                                              ; preds = %119
  tail call void @_ZNSt3__118__insertion_sort_3IRPFbffEPfEEvT0_S5_T_(float* %18, float* %5, i1 (float, float)** dereferenceable(8) %2)
  br label %346

122:                                              ; preds = %119
  %123 = icmp sgt i64 %20, 3996
  %124 = sdiv i64 %21, 2
  %125 = getelementptr inbounds float, float* %18, i64 %124
  br i1 %123, label %126, label %167

126:                                              ; preds = %122
  %127 = sdiv i64 %21, 4
  %128 = getelementptr inbounds float, float* %18, i64 %127
  %129 = getelementptr inbounds float, float* %125, i64 %127
  %130 = tail call i32 @_ZNSt3__17__sort4IRPFbffEPfEEjT0_S5_S5_S5_T_(float* %18, float* %128, float* %125, float* %129, i1 (float, float)** dereferenceable(8) %2) #9
  %131 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %132 = load float, float* %8, align 4
  %133 = load float, float* %129, align 4
  %134 = tail call zeroext i1 %131(float %132, float %133) #9
  br i1 %134, label %135, label %204

135:                                              ; preds = %126
  %136 = bitcast float* %129 to i32*
  %137 = load i32, i32* %136, align 4
  %138 = load i32, i32* %12, align 4
  store i32 %138, i32* %136, align 4
  store i32 %137, i32* %12, align 4
  %139 = add i32 %130, 1
  %140 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %141 = load float, float* %129, align 4
  %142 = load float, float* %125, align 4
  %143 = tail call zeroext i1 %140(float %141, float %142) #9
  br i1 %143, label %144, label %204

144:                                              ; preds = %135
  %145 = bitcast float* %125 to i32*
  %146 = load i32, i32* %145, align 4
  %147 = load i32, i32* %136, align 4
  store i32 %147, i32* %145, align 4
  store i32 %146, i32* %136, align 4
  %148 = add i32 %130, 2
  %149 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %150 = load float, float* %125, align 4
  %151 = load float, float* %128, align 4
  %152 = tail call zeroext i1 %149(float %150, float %151) #9
  br i1 %152, label %153, label %204

153:                                              ; preds = %144
  %154 = bitcast float* %128 to i32*
  %155 = load i32, i32* %154, align 4
  %156 = load i32, i32* %145, align 4
  store i32 %156, i32* %154, align 4
  store i32 %155, i32* %145, align 4
  %157 = add i32 %130, 3
  %158 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %159 = load float, float* %128, align 4
  %160 = load float, float* %18, align 4
  %161 = tail call zeroext i1 %158(float %159, float %160) #9
  br i1 %161, label %162, label %204

162:                                              ; preds = %153
  %163 = bitcast float* %18 to i32*
  %164 = load i32, i32* %163, align 4
  %165 = load i32, i32* %154, align 4
  store i32 %165, i32* %163, align 4
  store i32 %164, i32* %154, align 4
  %166 = add i32 %130, 4
  br label %204

167:                                              ; preds = %122
  %168 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %169 = load float, float* %125, align 4
  %170 = load float, float* %18, align 4
  %171 = tail call zeroext i1 %168(float %169, float %170) #9
  %172 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %173 = load float, float* %8, align 4
  %174 = load float, float* %125, align 4
  %175 = tail call zeroext i1 %172(float %173, float %174) #9
  br i1 %171, label %189, label %176

176:                                              ; preds = %167
  br i1 %175, label %177, label %204

177:                                              ; preds = %176
  %178 = bitcast float* %125 to i32*
  %179 = load i32, i32* %178, align 4
  %180 = load i32, i32* %9, align 4
  store i32 %180, i32* %178, align 4
  store i32 %179, i32* %9, align 4
  %181 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %182 = load float, float* %125, align 4
  %183 = load float, float* %18, align 4
  %184 = tail call zeroext i1 %181(float %182, float %183) #9
  br i1 %184, label %185, label %204

185:                                              ; preds = %177
  %186 = bitcast float* %18 to i32*
  %187 = load i32, i32* %186, align 4
  %188 = load i32, i32* %178, align 4
  store i32 %188, i32* %186, align 4
  store i32 %187, i32* %178, align 4
  br label %204

189:                                              ; preds = %167
  %190 = bitcast float* %18 to i32*
  %191 = load i32, i32* %190, align 4
  br i1 %175, label %192, label %194

192:                                              ; preds = %189
  %193 = load i32, i32* %11, align 4
  store i32 %193, i32* %190, align 4
  store i32 %191, i32* %11, align 4
  br label %204

194:                                              ; preds = %189
  %195 = bitcast float* %125 to i32*
  %196 = load i32, i32* %195, align 4
  store i32 %196, i32* %190, align 4
  store i32 %191, i32* %195, align 4
  %197 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %198 = load float, float* %8, align 4
  %199 = bitcast i32 %191 to float
  %200 = tail call zeroext i1 %197(float %198, float %199) #9
  br i1 %200, label %201, label %204

201:                                              ; preds = %194
  %202 = load i32, i32* %195, align 4
  %203 = load i32, i32* %10, align 4
  store i32 %203, i32* %195, align 4
  store i32 %202, i32* %10, align 4
  br label %204

204:                                              ; preds = %201, %194, %192, %185, %177, %176, %162, %153, %144, %135, %126
  %205 = phi i32 [ %166, %162 ], [ %157, %153 ], [ %148, %144 ], [ %139, %135 ], [ %130, %126 ], [ 1, %192 ], [ 0, %176 ], [ 2, %185 ], [ 1, %177 ], [ 2, %201 ], [ 1, %194 ]
  %206 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %207 = load float, float* %18, align 4
  %208 = load float, float* %125, align 4
  %209 = tail call zeroext i1 %206(float %207, float %208) #9
  br i1 %209, label %274, label %210

210:                                              ; preds = %204, %263
  %211 = phi float* [ %212, %263 ], [ %8, %204 ]
  %212 = getelementptr inbounds float, float* %211, i64 -1
  %213 = icmp eq float* %18, %212
  br i1 %213, label %214, label %263

214:                                              ; preds = %210
  %215 = getelementptr inbounds float, float* %18, i64 1
  %216 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %217 = load float, float* %18, align 4
  %218 = load float, float* %8, align 4
  %219 = tail call zeroext i1 %216(float %217, float %218) #9
  br i1 %219, label %236, label %220

220:                                              ; preds = %214
  %221 = icmp eq float* %215, %8
  br i1 %221, label %346, label %222

222:                                              ; preds = %220, %233
  %223 = phi float* [ %234, %233 ], [ %215, %220 ]
  %224 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %225 = load float, float* %18, align 4
  %226 = load float, float* %223, align 4
  %227 = tail call zeroext i1 %224(float %225, float %226) #9
  br i1 %227, label %228, label %233

228:                                              ; preds = %222
  %229 = bitcast float* %223 to i32*
  %230 = load i32, i32* %229, align 4
  %231 = load i32, i32* %13, align 4
  store i32 %231, i32* %229, align 4
  store i32 %230, i32* %13, align 4
  %232 = getelementptr inbounds float, float* %223, i64 1
  br label %236

233:                                              ; preds = %222
  %234 = getelementptr inbounds float, float* %223, i64 1
  %235 = icmp eq float* %234, %8
  br i1 %235, label %346, label %222

236:                                              ; preds = %228, %214
  %237 = phi float* [ %215, %214 ], [ %232, %228 ]
  %238 = icmp eq float* %237, %8
  br i1 %238, label %346, label %239

239:                                              ; preds = %236, %258
  %240 = phi float* [ %248, %258 ], [ %237, %236 ]
  %241 = phi float* [ %253, %258 ], [ %8, %236 ]
  br label %242

242:                                              ; preds = %242, %239
  %243 = phi float* [ %240, %239 ], [ %248, %242 ]
  %244 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %245 = load float, float* %18, align 4
  %246 = load float, float* %243, align 4
  %247 = tail call zeroext i1 %244(float %245, float %246) #9
  %248 = getelementptr inbounds float, float* %243, i64 1
  br i1 %247, label %249, label %242

249:                                              ; preds = %242, %249
  %250 = phi float* [ %253, %249 ], [ %241, %242 ]
  %251 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %252 = load float, float* %18, align 4
  %253 = getelementptr inbounds float, float* %250, i64 -1
  %254 = load float, float* %253, align 4
  %255 = tail call zeroext i1 %251(float %252, float %254) #9
  br i1 %255, label %249, label %256

256:                                              ; preds = %249
  %257 = icmp ult float* %243, %253
  br i1 %257, label %258, label %17

258:                                              ; preds = %256
  %259 = bitcast float* %243 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = bitcast float* %253 to i32*
  %262 = load i32, i32* %261, align 4
  store i32 %262, i32* %259, align 4
  store i32 %260, i32* %261, align 4
  br label %239

263:                                              ; preds = %210
  %264 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %265 = load float, float* %212, align 4
  %266 = load float, float* %125, align 4
  %267 = tail call zeroext i1 %264(float %265, float %266) #9
  br i1 %267, label %268, label %210

268:                                              ; preds = %263
  %269 = bitcast float* %18 to i32*
  %270 = load i32, i32* %269, align 4
  %271 = bitcast float* %212 to i32*
  %272 = load i32, i32* %271, align 4
  store i32 %272, i32* %269, align 4
  store i32 %270, i32* %271, align 4
  %273 = add i32 %205, 1
  br label %274

274:                                              ; preds = %204, %268
  %275 = phi i32 [ %273, %268 ], [ %205, %204 ]
  %276 = phi float* [ %212, %268 ], [ %8, %204 ]
  %277 = ptrtoint float* %18 to i64
  %278 = getelementptr inbounds float, float* %18, i64 1
  %279 = icmp ult float* %278, %276
  br i1 %279, label %280, label %309

280:                                              ; preds = %274, %301
  %281 = phi float* [ %308, %301 ], [ %125, %274 ]
  %282 = phi i32 [ %306, %301 ], [ %275, %274 ]
  %283 = phi float* [ %291, %301 ], [ %278, %274 ]
  %284 = phi float* [ %295, %301 ], [ %276, %274 ]
  br label %285

285:                                              ; preds = %285, %280
  %286 = phi float* [ %283, %280 ], [ %291, %285 ]
  %287 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %288 = load float, float* %286, align 4
  %289 = load float, float* %281, align 4
  %290 = tail call zeroext i1 %287(float %288, float %289) #9
  %291 = getelementptr inbounds float, float* %286, i64 1
  br i1 %290, label %285, label %292

292:                                              ; preds = %285, %292
  %293 = phi float* [ %295, %292 ], [ %284, %285 ]
  %294 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %295 = getelementptr inbounds float, float* %293, i64 -1
  %296 = load float, float* %295, align 4
  %297 = load float, float* %281, align 4
  %298 = tail call zeroext i1 %294(float %296, float %297) #9
  br i1 %298, label %299, label %292

299:                                              ; preds = %292
  %300 = icmp ugt float* %286, %295
  br i1 %300, label %309, label %301

301:                                              ; preds = %299
  %302 = bitcast float* %286 to i32*
  %303 = load i32, i32* %302, align 4
  %304 = bitcast float* %295 to i32*
  %305 = load i32, i32* %304, align 4
  store i32 %305, i32* %302, align 4
  store i32 %303, i32* %304, align 4
  %306 = add i32 %282, 1
  %307 = icmp eq float* %281, %286
  %308 = select i1 %307, float* %295, float* %281
  br label %280

309:                                              ; preds = %299, %274
  %310 = phi float* [ %125, %274 ], [ %281, %299 ]
  %311 = phi i32 [ %275, %274 ], [ %282, %299 ]
  %312 = phi float* [ %278, %274 ], [ %286, %299 ]
  %313 = icmp eq float* %312, %310
  br i1 %313, label %325, label %314

314:                                              ; preds = %309
  %315 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %316 = load float, float* %310, align 4
  %317 = load float, float* %312, align 4
  %318 = tail call zeroext i1 %315(float %316, float %317) #9
  br i1 %318, label %319, label %325

319:                                              ; preds = %314
  %320 = bitcast float* %312 to i32*
  %321 = load i32, i32* %320, align 4
  %322 = bitcast float* %310 to i32*
  %323 = load i32, i32* %322, align 4
  store i32 %323, i32* %320, align 4
  store i32 %321, i32* %322, align 4
  %324 = add i32 %311, 1
  br label %325

325:                                              ; preds = %309, %319, %314
  %326 = phi i32 [ %324, %319 ], [ %311, %314 ], [ %311, %309 ]
  %327 = icmp eq i32 %326, 0
  br i1 %327, label %328, label %335

328:                                              ; preds = %325
  %329 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRPFbffEPfEEbT0_S5_T_(float* %18, float* %312, i1 (float, float)** dereferenceable(8) %2)
  %330 = getelementptr inbounds float, float* %312, i64 1
  %331 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRPFbffEPfEEbT0_S5_T_(float* %330, float* %5, i1 (float, float)** dereferenceable(8) %2)
  br i1 %331, label %332, label %334

332:                                              ; preds = %328
  br i1 %329, label %346, label %333

333:                                              ; preds = %332, %344
  br label %4

334:                                              ; preds = %328
  br i1 %329, label %342, label %335

335:                                              ; preds = %334, %325
  %336 = ptrtoint float* %312 to i64
  %337 = sub i64 %336, %277
  %338 = sub i64 %14, %336
  %339 = icmp slt i64 %337, %338
  br i1 %339, label %340, label %344

340:                                              ; preds = %335
  tail call void @_ZNSt3__16__sortIRPFbffEPfEEvT0_S5_T_(float* %18, float* %312, i1 (float, float)** dereferenceable(8) %2)
  %341 = getelementptr inbounds float, float* %312, i64 1
  br label %342

342:                                              ; preds = %340, %334
  %343 = phi float* [ %330, %334 ], [ %341, %340 ]
  br label %15

344:                                              ; preds = %335
  %345 = getelementptr inbounds float, float* %312, i64 1
  tail call void @_ZNSt3__16__sortIRPFbffEPfEEvT0_S5_T_(float* %345, float* %5, i1 (float, float)** dereferenceable(8) %2)
  br label %333

346:                                              ; preds = %332, %236, %17, %17, %220, %233, %115, %107, %99, %90, %80, %71, %64, %61, %54, %45, %44, %22, %28, %75, %121
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort4IRPFbffEPfEEjT0_S5_S5_S5_T_(float*, float*, float*, float*, i1 (float, float)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %6 = load i1 (float, float)*, i1 (float, float)** %4, align 8
  %7 = load float, float* %1, align 4
  %8 = load float, float* %0, align 4
  %9 = tail call zeroext i1 %6(float %7, float %8) #9
  %10 = load i1 (float, float)*, i1 (float, float)** %4, align 8
  %11 = load float, float* %2, align 4
  %12 = load float, float* %1, align 4
  %13 = tail call zeroext i1 %10(float %11, float %12) #9
  br i1 %9, label %28, label %14

14:                                               ; preds = %5
  br i1 %13, label %15, label %45

15:                                               ; preds = %14
  %16 = bitcast float* %1 to i32*
  %17 = load i32, i32* %16, align 4
  %18 = bitcast float* %2 to i32*
  %19 = load i32, i32* %18, align 4
  store i32 %19, i32* %16, align 4
  store i32 %17, i32* %18, align 4
  %20 = load i1 (float, float)*, i1 (float, float)** %4, align 8
  %21 = load float, float* %1, align 4
  %22 = load float, float* %0, align 4
  %23 = tail call zeroext i1 %20(float %21, float %22) #9
  br i1 %23, label %24, label %45

24:                                               ; preds = %15
  %25 = bitcast float* %0 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = load i32, i32* %16, align 4
  store i32 %27, i32* %25, align 4
  store i32 %26, i32* %16, align 4
  br label %45

28:                                               ; preds = %5
  %29 = bitcast float* %0 to i32*
  %30 = load i32, i32* %29, align 4
  br i1 %13, label %31, label %34

31:                                               ; preds = %28
  %32 = bitcast float* %2 to i32*
  %33 = load i32, i32* %32, align 4
  store i32 %33, i32* %29, align 4
  store i32 %30, i32* %32, align 4
  br label %45

34:                                               ; preds = %28
  %35 = bitcast float* %1 to i32*
  %36 = load i32, i32* %35, align 4
  store i32 %36, i32* %29, align 4
  store i32 %30, i32* %35, align 4
  %37 = load i1 (float, float)*, i1 (float, float)** %4, align 8
  %38 = load float, float* %2, align 4
  %39 = bitcast i32 %30 to float
  %40 = tail call zeroext i1 %37(float %38, float %39) #9
  br i1 %40, label %41, label %45

41:                                               ; preds = %34
  %42 = load i32, i32* %35, align 4
  %43 = bitcast float* %2 to i32*
  %44 = load i32, i32* %43, align 4
  store i32 %44, i32* %35, align 4
  store i32 %42, i32* %43, align 4
  br label %45

45:                                               ; preds = %14, %15, %24, %31, %34, %41
  %46 = phi i32 [ 1, %31 ], [ 0, %14 ], [ 2, %24 ], [ 1, %15 ], [ 2, %41 ], [ 1, %34 ]
  %47 = load i1 (float, float)*, i1 (float, float)** %4, align 8
  %48 = load float, float* %3, align 4
  %49 = load float, float* %2, align 4
  %50 = tail call zeroext i1 %47(float %48, float %49) #9
  br i1 %50, label %51, label %75

51:                                               ; preds = %45
  %52 = bitcast float* %2 to i32*
  %53 = load i32, i32* %52, align 4
  %54 = bitcast float* %3 to i32*
  %55 = load i32, i32* %54, align 4
  store i32 %55, i32* %52, align 4
  store i32 %53, i32* %54, align 4
  %56 = add nuw nsw i32 %46, 1
  %57 = load i1 (float, float)*, i1 (float, float)** %4, align 8
  %58 = load float, float* %2, align 4
  %59 = load float, float* %1, align 4
  %60 = tail call zeroext i1 %57(float %58, float %59) #9
  br i1 %60, label %61, label %75

61:                                               ; preds = %51
  %62 = bitcast float* %1 to i32*
  %63 = load i32, i32* %62, align 4
  %64 = load i32, i32* %52, align 4
  store i32 %64, i32* %62, align 4
  store i32 %63, i32* %52, align 4
  %65 = add nuw nsw i32 %46, 2
  %66 = load i1 (float, float)*, i1 (float, float)** %4, align 8
  %67 = load float, float* %1, align 4
  %68 = load float, float* %0, align 4
  %69 = tail call zeroext i1 %66(float %67, float %68) #9
  br i1 %69, label %70, label %75

70:                                               ; preds = %61
  %71 = bitcast float* %0 to i32*
  %72 = load i32, i32* %71, align 4
  %73 = load i32, i32* %62, align 4
  store i32 %73, i32* %71, align 4
  store i32 %72, i32* %62, align 4
  %74 = add nuw nsw i32 %46, 3
  br label %75

75:                                               ; preds = %51, %70, %61, %45
  %76 = phi i32 [ %74, %70 ], [ %65, %61 ], [ %56, %51 ], [ %46, %45 ]
  ret i32 %76
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__118__insertion_sort_3IRPFbffEPfEEvT0_S5_T_(float*, float*, i1 (float, float)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %4 = getelementptr inbounds float, float* %0, i64 2
  %5 = getelementptr inbounds float, float* %0, i64 1
  %6 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %7 = load float, float* %5, align 4
  %8 = load float, float* %0, align 4
  %9 = tail call zeroext i1 %6(float %7, float %8) #9
  %10 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %11 = load float, float* %4, align 4
  %12 = load float, float* %5, align 4
  %13 = tail call zeroext i1 %10(float %11, float %12) #9
  br i1 %9, label %28, label %14

14:                                               ; preds = %3
  br i1 %13, label %15, label %45

15:                                               ; preds = %14
  %16 = bitcast float* %5 to i32*
  %17 = load i32, i32* %16, align 4
  %18 = bitcast float* %4 to i32*
  %19 = load i32, i32* %18, align 4
  store i32 %19, i32* %16, align 4
  store i32 %17, i32* %18, align 4
  %20 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %21 = bitcast i32 %19 to float
  %22 = load float, float* %0, align 4
  %23 = tail call zeroext i1 %20(float %21, float %22) #9
  br i1 %23, label %24, label %45

24:                                               ; preds = %15
  %25 = bitcast float* %0 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = load i32, i32* %16, align 4
  store i32 %27, i32* %25, align 4
  store i32 %26, i32* %16, align 4
  br label %45

28:                                               ; preds = %3
  %29 = bitcast float* %0 to i32*
  %30 = load i32, i32* %29, align 4
  br i1 %13, label %31, label %34

31:                                               ; preds = %28
  %32 = bitcast float* %4 to i32*
  %33 = load i32, i32* %32, align 4
  store i32 %33, i32* %29, align 4
  store i32 %30, i32* %32, align 4
  br label %45

34:                                               ; preds = %28
  %35 = bitcast float* %5 to i32*
  %36 = load i32, i32* %35, align 4
  store i32 %36, i32* %29, align 4
  store i32 %30, i32* %35, align 4
  %37 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %38 = load float, float* %4, align 4
  %39 = bitcast i32 %30 to float
  %40 = tail call zeroext i1 %37(float %38, float %39) #9
  br i1 %40, label %41, label %45

41:                                               ; preds = %34
  %42 = load i32, i32* %35, align 4
  %43 = bitcast float* %4 to i32*
  %44 = load i32, i32* %43, align 4
  store i32 %44, i32* %35, align 4
  store i32 %42, i32* %43, align 4
  br label %45

45:                                               ; preds = %14, %15, %24, %31, %34, %41
  %46 = getelementptr inbounds float, float* %0, i64 3
  %47 = icmp eq float* %46, %1
  br i1 %47, label %48, label %49

48:                                               ; preds = %75, %45
  ret void

49:                                               ; preds = %45, %75
  %50 = phi float* [ %76, %75 ], [ %46, %45 ]
  %51 = phi float* [ %50, %75 ], [ %4, %45 ]
  %52 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %53 = load float, float* %50, align 4
  %54 = load float, float* %51, align 4
  %55 = tail call zeroext i1 %52(float %53, float %54) #9
  br i1 %55, label %56, label %75

56:                                               ; preds = %49
  %57 = bitcast float* %50 to i32*
  %58 = load i32, i32* %57, align 4
  %59 = bitcast i32 %58 to float
  br label %60

60:                                               ; preds = %67, %56
  %61 = phi float* [ %50, %56 ], [ %62, %67 ]
  %62 = phi float* [ %51, %56 ], [ %69, %67 ]
  %63 = bitcast float* %62 to i32*
  %64 = load i32, i32* %63, align 4
  %65 = bitcast float* %61 to i32*
  store i32 %64, i32* %65, align 4
  %66 = icmp eq float* %62, %0
  br i1 %66, label %72, label %67

67:                                               ; preds = %60
  %68 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %69 = getelementptr inbounds float, float* %62, i64 -1
  %70 = load float, float* %69, align 4
  %71 = tail call zeroext i1 %68(float %59, float %70) #9
  br i1 %71, label %60, label %72

72:                                               ; preds = %60, %67
  %73 = phi float* [ %62, %67 ], [ %0, %60 ]
  %74 = bitcast float* %73 to i32*
  store i32 %58, i32* %74, align 4
  br label %75

75:                                               ; preds = %72, %49
  %76 = getelementptr inbounds float, float* %50, i64 1
  %77 = icmp eq float* %76, %1
  br i1 %77, label %48, label %49
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRPFbffEPfEEbT0_S5_T_(float*, float*, i1 (float, float)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %4 = ptrtoint float* %1 to i64
  %5 = ptrtoint float* %0 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 2
  switch i64 %7, label %105 [
    i64 0, label %186
    i64 1, label %186
    i64 2, label %8
    i64 3, label %19
    i64 4, label %61
    i64 5, label %66
  ]

8:                                                ; preds = %3
  %9 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %10 = getelementptr inbounds float, float* %1, i64 -1
  %11 = load float, float* %10, align 4
  %12 = load float, float* %0, align 4
  %13 = tail call zeroext i1 %9(float %11, float %12) #9
  br i1 %13, label %14, label %186

14:                                               ; preds = %8
  %15 = bitcast float* %0 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = bitcast float* %10 to i32*
  %18 = load i32, i32* %17, align 4
  store i32 %18, i32* %15, align 4
  store i32 %16, i32* %17, align 4
  br label %186

19:                                               ; preds = %3
  %20 = getelementptr inbounds float, float* %0, i64 1
  %21 = getelementptr inbounds float, float* %1, i64 -1
  %22 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %23 = load float, float* %20, align 4
  %24 = load float, float* %0, align 4
  %25 = tail call zeroext i1 %22(float %23, float %24) #9
  %26 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %27 = load float, float* %21, align 4
  %28 = load float, float* %20, align 4
  %29 = tail call zeroext i1 %26(float %27, float %28) #9
  br i1 %25, label %44, label %30

30:                                               ; preds = %19
  br i1 %29, label %31, label %186

31:                                               ; preds = %30
  %32 = bitcast float* %20 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = bitcast float* %21 to i32*
  %35 = load i32, i32* %34, align 4
  store i32 %35, i32* %32, align 4
  store i32 %33, i32* %34, align 4
  %36 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %37 = load float, float* %20, align 4
  %38 = load float, float* %0, align 4
  %39 = tail call zeroext i1 %36(float %37, float %38) #9
  br i1 %39, label %40, label %186

40:                                               ; preds = %31
  %41 = bitcast float* %0 to i32*
  %42 = load i32, i32* %41, align 4
  %43 = load i32, i32* %32, align 4
  store i32 %43, i32* %41, align 4
  store i32 %42, i32* %32, align 4
  br label %186

44:                                               ; preds = %19
  %45 = bitcast float* %0 to i32*
  %46 = load i32, i32* %45, align 4
  br i1 %29, label %47, label %50

47:                                               ; preds = %44
  %48 = bitcast float* %21 to i32*
  %49 = load i32, i32* %48, align 4
  store i32 %49, i32* %45, align 4
  store i32 %46, i32* %48, align 4
  br label %186

50:                                               ; preds = %44
  %51 = bitcast float* %20 to i32*
  %52 = load i32, i32* %51, align 4
  store i32 %52, i32* %45, align 4
  store i32 %46, i32* %51, align 4
  %53 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %54 = load float, float* %21, align 4
  %55 = bitcast i32 %46 to float
  %56 = tail call zeroext i1 %53(float %54, float %55) #9
  br i1 %56, label %57, label %186

57:                                               ; preds = %50
  %58 = load i32, i32* %51, align 4
  %59 = bitcast float* %21 to i32*
  %60 = load i32, i32* %59, align 4
  store i32 %60, i32* %51, align 4
  store i32 %58, i32* %59, align 4
  br label %186

61:                                               ; preds = %3
  %62 = getelementptr inbounds float, float* %0, i64 1
  %63 = getelementptr inbounds float, float* %0, i64 2
  %64 = getelementptr inbounds float, float* %1, i64 -1
  %65 = tail call i32 @_ZNSt3__17__sort4IRPFbffEPfEEjT0_S5_S5_S5_T_(float* %0, float* %62, float* %63, float* %64, i1 (float, float)** dereferenceable(8) %2)
  br label %186

66:                                               ; preds = %3
  %67 = getelementptr inbounds float, float* %0, i64 1
  %68 = getelementptr inbounds float, float* %0, i64 2
  %69 = getelementptr inbounds float, float* %0, i64 3
  %70 = getelementptr inbounds float, float* %1, i64 -1
  %71 = tail call i32 @_ZNSt3__17__sort4IRPFbffEPfEEjT0_S5_S5_S5_T_(float* %0, float* %67, float* %68, float* %69, i1 (float, float)** dereferenceable(8) %2) #9
  %72 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %73 = load float, float* %70, align 4
  %74 = load float, float* %69, align 4
  %75 = tail call zeroext i1 %72(float %73, float %74) #9
  br i1 %75, label %76, label %186

76:                                               ; preds = %66
  %77 = bitcast float* %69 to i32*
  %78 = load i32, i32* %77, align 4
  %79 = bitcast float* %70 to i32*
  %80 = load i32, i32* %79, align 4
  store i32 %80, i32* %77, align 4
  store i32 %78, i32* %79, align 4
  %81 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %82 = load float, float* %69, align 4
  %83 = load float, float* %68, align 4
  %84 = tail call zeroext i1 %81(float %82, float %83) #9
  br i1 %84, label %85, label %186

85:                                               ; preds = %76
  %86 = bitcast float* %68 to i32*
  %87 = load i32, i32* %86, align 4
  %88 = load i32, i32* %77, align 4
  store i32 %88, i32* %86, align 4
  store i32 %87, i32* %77, align 4
  %89 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %90 = bitcast i32 %88 to float
  %91 = load float, float* %67, align 4
  %92 = tail call zeroext i1 %89(float %90, float %91) #9
  br i1 %92, label %93, label %186

93:                                               ; preds = %85
  %94 = bitcast float* %67 to i32*
  %95 = load i32, i32* %94, align 4
  %96 = load i32, i32* %86, align 4
  store i32 %96, i32* %94, align 4
  store i32 %95, i32* %86, align 4
  %97 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %98 = bitcast i32 %96 to float
  %99 = load float, float* %0, align 4
  %100 = tail call zeroext i1 %97(float %98, float %99) #9
  br i1 %100, label %101, label %186

101:                                              ; preds = %93
  %102 = bitcast float* %0 to i32*
  %103 = load i32, i32* %102, align 4
  %104 = load i32, i32* %94, align 4
  store i32 %104, i32* %102, align 4
  store i32 %103, i32* %94, align 4
  br label %186

105:                                              ; preds = %3
  %106 = getelementptr inbounds float, float* %0, i64 2
  %107 = getelementptr inbounds float, float* %0, i64 1
  %108 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %109 = load float, float* %107, align 4
  %110 = load float, float* %0, align 4
  %111 = tail call zeroext i1 %108(float %109, float %110) #9
  %112 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %113 = load float, float* %106, align 4
  %114 = load float, float* %107, align 4
  %115 = tail call zeroext i1 %112(float %113, float %114) #9
  br i1 %111, label %130, label %116

116:                                              ; preds = %105
  br i1 %115, label %117, label %147

117:                                              ; preds = %116
  %118 = bitcast float* %107 to i32*
  %119 = load i32, i32* %118, align 4
  %120 = bitcast float* %106 to i32*
  %121 = load i32, i32* %120, align 4
  store i32 %121, i32* %118, align 4
  store i32 %119, i32* %120, align 4
  %122 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %123 = bitcast i32 %121 to float
  %124 = load float, float* %0, align 4
  %125 = tail call zeroext i1 %122(float %123, float %124) #9
  br i1 %125, label %126, label %147

126:                                              ; preds = %117
  %127 = bitcast float* %0 to i32*
  %128 = load i32, i32* %127, align 4
  %129 = load i32, i32* %118, align 4
  store i32 %129, i32* %127, align 4
  store i32 %128, i32* %118, align 4
  br label %147

130:                                              ; preds = %105
  %131 = bitcast float* %0 to i32*
  %132 = load i32, i32* %131, align 4
  br i1 %115, label %133, label %136

133:                                              ; preds = %130
  %134 = bitcast float* %106 to i32*
  %135 = load i32, i32* %134, align 4
  store i32 %135, i32* %131, align 4
  store i32 %132, i32* %134, align 4
  br label %147

136:                                              ; preds = %130
  %137 = bitcast float* %107 to i32*
  %138 = load i32, i32* %137, align 4
  store i32 %138, i32* %131, align 4
  store i32 %132, i32* %137, align 4
  %139 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %140 = load float, float* %106, align 4
  %141 = bitcast i32 %132 to float
  %142 = tail call zeroext i1 %139(float %140, float %141) #9
  br i1 %142, label %143, label %147

143:                                              ; preds = %136
  %144 = load i32, i32* %137, align 4
  %145 = bitcast float* %106 to i32*
  %146 = load i32, i32* %145, align 4
  store i32 %146, i32* %137, align 4
  store i32 %144, i32* %145, align 4
  br label %147

147:                                              ; preds = %116, %117, %126, %133, %136, %143
  %148 = getelementptr inbounds float, float* %0, i64 3
  %149 = icmp eq float* %148, %1
  br i1 %149, label %186, label %150

150:                                              ; preds = %147, %179
  %151 = phi float* [ %181, %179 ], [ %148, %147 ]
  %152 = phi i32 [ %180, %179 ], [ 0, %147 ]
  %153 = phi float* [ %151, %179 ], [ %106, %147 ]
  %154 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %155 = load float, float* %151, align 4
  %156 = load float, float* %153, align 4
  %157 = tail call zeroext i1 %154(float %155, float %156) #9
  br i1 %157, label %158, label %179

158:                                              ; preds = %150
  %159 = bitcast float* %151 to i32*
  %160 = load i32, i32* %159, align 4
  %161 = bitcast i32 %160 to float
  br label %162

162:                                              ; preds = %169, %158
  %163 = phi float* [ %151, %158 ], [ %164, %169 ]
  %164 = phi float* [ %153, %158 ], [ %171, %169 ]
  %165 = bitcast float* %164 to i32*
  %166 = load i32, i32* %165, align 4
  %167 = bitcast float* %163 to i32*
  store i32 %166, i32* %167, align 4
  %168 = icmp eq float* %164, %0
  br i1 %168, label %174, label %169

169:                                              ; preds = %162
  %170 = load i1 (float, float)*, i1 (float, float)** %2, align 8
  %171 = getelementptr inbounds float, float* %164, i64 -1
  %172 = load float, float* %171, align 4
  %173 = tail call zeroext i1 %170(float %161, float %172) #9
  br i1 %173, label %162, label %174

174:                                              ; preds = %162, %169
  %175 = phi float* [ %164, %169 ], [ %0, %162 ]
  %176 = bitcast float* %175 to i32*
  store i32 %160, i32* %176, align 4
  %177 = add i32 %152, 1
  %178 = icmp eq i32 %177, 8
  br i1 %178, label %183, label %179

179:                                              ; preds = %174, %150
  %180 = phi i32 [ %177, %174 ], [ %152, %150 ]
  %181 = getelementptr inbounds float, float* %151, i64 1
  %182 = icmp eq float* %181, %1
  br i1 %182, label %186, label %150

183:                                              ; preds = %174
  %184 = getelementptr inbounds float, float* %151, i64 1
  %185 = icmp eq float* %184, %1
  br label %186

186:                                              ; preds = %179, %183, %147, %101, %93, %85, %76, %66, %57, %50, %47, %40, %31, %30, %8, %14, %3, %3, %61
  %187 = phi i1 [ true, %61 ], [ true, %3 ], [ true, %3 ], [ true, %14 ], [ true, %8 ], [ true, %30 ], [ true, %31 ], [ true, %40 ], [ true, %47 ], [ true, %50 ], [ true, %57 ], [ true, %66 ], [ true, %76 ], [ true, %85 ], [ true, %93 ], [ true, %101 ], [ true, %147 ], [ %185, %183 ], [ true, %179 ]
  ret i1 %187
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__sortIRPFbddEN2v88internal13UnalignedSlotIdEEEEvT0_S8_T_(i64, i64, i1 (double, double)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  br label %4

4:                                                ; preds = %366, %3
  %5 = phi i64 [ %1, %3 ], [ %341, %366 ]
  %6 = phi i64 [ %0, %3 ], [ %19, %366 ]
  %7 = add i64 %5, -8
  %8 = inttoptr i64 %7 to double*
  %9 = inttoptr i64 %7 to i64*
  %10 = inttoptr i64 %7 to i64*
  %11 = inttoptr i64 %7 to i64*
  %12 = inttoptr i64 %7 to double*
  %13 = inttoptr i64 %7 to i64*
  %14 = inttoptr i64 %7 to double*
  %15 = inttoptr i64 %7 to i64*
  br label %16

16:                                               ; preds = %382, %4
  %17 = phi i64 [ %6, %4 ], [ %383, %382 ]
  br label %18

18:                                               ; preds = %284, %16
  %19 = phi i64 [ %17, %16 ], [ %269, %284 ]
  %20 = sub i64 %5, %19
  %21 = shl i64 %20, 32
  %22 = ashr exact i64 %21, 32
  %23 = lshr i64 %22, 3
  %24 = trunc i64 %23 to i32
  switch i32 %24, label %132 [
    i32 0, label %386
    i32 1, label %386
    i32 2, label %25
    i32 3, label %38
    i32 4, label %83
    i32 5, label %88
  ]

25:                                               ; preds = %18
  %26 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %27 = add i64 %5, -8
  %28 = inttoptr i64 %27 to double*
  %29 = load double, double* %28, align 1
  %30 = inttoptr i64 %19 to double*
  %31 = load double, double* %30, align 1
  %32 = tail call zeroext i1 %26(double %29, double %31) #9
  br i1 %32, label %33, label %386

33:                                               ; preds = %25
  %34 = inttoptr i64 %19 to i64*
  %35 = load i64, i64* %34, align 1
  %36 = inttoptr i64 %27 to i64*
  %37 = load i64, i64* %36, align 1
  store i64 %37, i64* %34, align 1
  store i64 %35, i64* %36, align 1
  br label %386

38:                                               ; preds = %18
  %39 = add i64 %19, 8
  %40 = add i64 %5, -8
  %41 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %42 = inttoptr i64 %39 to double*
  %43 = load double, double* %42, align 1
  %44 = inttoptr i64 %19 to double*
  %45 = load double, double* %44, align 1
  %46 = tail call zeroext i1 %41(double %43, double %45) #9
  %47 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %48 = inttoptr i64 %40 to double*
  %49 = load double, double* %48, align 1
  %50 = load double, double* %42, align 1
  %51 = tail call zeroext i1 %47(double %49, double %50) #9
  br i1 %46, label %66, label %52

52:                                               ; preds = %38
  br i1 %51, label %53, label %386

53:                                               ; preds = %52
  %54 = inttoptr i64 %39 to i64*
  %55 = load i64, i64* %54, align 1
  %56 = inttoptr i64 %40 to i64*
  %57 = load i64, i64* %56, align 1
  store i64 %57, i64* %54, align 1
  store i64 %55, i64* %56, align 1
  %58 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %59 = load double, double* %42, align 1
  %60 = load double, double* %44, align 1
  %61 = tail call zeroext i1 %58(double %59, double %60) #9
  br i1 %61, label %62, label %386

62:                                               ; preds = %53
  %63 = inttoptr i64 %19 to i64*
  %64 = load i64, i64* %63, align 1
  %65 = load i64, i64* %54, align 1
  store i64 %65, i64* %63, align 1
  store i64 %64, i64* %54, align 1
  br label %386

66:                                               ; preds = %38
  %67 = inttoptr i64 %19 to i64*
  %68 = load i64, i64* %67, align 1
  br i1 %51, label %69, label %72

69:                                               ; preds = %66
  %70 = inttoptr i64 %40 to i64*
  %71 = load i64, i64* %70, align 1
  store i64 %71, i64* %67, align 1
  store i64 %68, i64* %70, align 1
  br label %386

72:                                               ; preds = %66
  %73 = inttoptr i64 %39 to i64*
  %74 = load i64, i64* %73, align 1
  store i64 %74, i64* %67, align 1
  store i64 %68, i64* %73, align 1
  %75 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %76 = load double, double* %48, align 1
  %77 = load double, double* %42, align 1
  %78 = tail call zeroext i1 %75(double %76, double %77) #9
  br i1 %78, label %79, label %386

79:                                               ; preds = %72
  %80 = load i64, i64* %73, align 1
  %81 = inttoptr i64 %40 to i64*
  %82 = load i64, i64* %81, align 1
  store i64 %82, i64* %73, align 1
  store i64 %80, i64* %81, align 1
  br label %386

83:                                               ; preds = %18
  %84 = add i64 %19, 8
  %85 = add i64 %19, 16
  %86 = add i64 %5, -8
  %87 = tail call i32 @_ZNSt3__17__sort4IRPFbddEN2v88internal13UnalignedSlotIdEEEEjT0_S8_S8_S8_T_(i64 %19, i64 %84, i64 %85, i64 %86, i1 (double, double)** dereferenceable(8) %2)
  br label %386

88:                                               ; preds = %18
  %89 = add i64 %19, 8
  %90 = add i64 %19, 16
  %91 = add i64 %19, 24
  %92 = add i64 %5, -8
  %93 = tail call i32 @_ZNSt3__17__sort4IRPFbddEN2v88internal13UnalignedSlotIdEEEEjT0_S8_S8_S8_T_(i64 %19, i64 %89, i64 %90, i64 %91, i1 (double, double)** dereferenceable(8) %2) #9
  %94 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %95 = inttoptr i64 %92 to double*
  %96 = load double, double* %95, align 1
  %97 = inttoptr i64 %91 to double*
  %98 = load double, double* %97, align 1
  %99 = tail call zeroext i1 %94(double %96, double %98) #9
  br i1 %99, label %100, label %386

100:                                              ; preds = %88
  %101 = inttoptr i64 %91 to i64*
  %102 = load i64, i64* %101, align 1
  %103 = inttoptr i64 %92 to i64*
  %104 = load i64, i64* %103, align 1
  store i64 %104, i64* %101, align 1
  store i64 %102, i64* %103, align 1
  %105 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %106 = load double, double* %97, align 1
  %107 = inttoptr i64 %90 to double*
  %108 = load double, double* %107, align 1
  %109 = tail call zeroext i1 %105(double %106, double %108) #9
  br i1 %109, label %110, label %386

110:                                              ; preds = %100
  %111 = inttoptr i64 %90 to i64*
  %112 = load i64, i64* %111, align 1
  %113 = load i64, i64* %101, align 1
  store i64 %113, i64* %111, align 1
  store i64 %112, i64* %101, align 1
  %114 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %115 = load double, double* %107, align 1
  %116 = inttoptr i64 %89 to double*
  %117 = load double, double* %116, align 1
  %118 = tail call zeroext i1 %114(double %115, double %117) #9
  br i1 %118, label %119, label %386

119:                                              ; preds = %110
  %120 = inttoptr i64 %89 to i64*
  %121 = load i64, i64* %120, align 1
  %122 = load i64, i64* %111, align 1
  store i64 %122, i64* %120, align 1
  store i64 %121, i64* %111, align 1
  %123 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %124 = load double, double* %116, align 1
  %125 = inttoptr i64 %19 to double*
  %126 = load double, double* %125, align 1
  %127 = tail call zeroext i1 %123(double %124, double %126) #9
  br i1 %127, label %128, label %386

128:                                              ; preds = %119
  %129 = inttoptr i64 %19 to i64*
  %130 = load i64, i64* %129, align 1
  %131 = load i64, i64* %120, align 1
  store i64 %131, i64* %129, align 1
  store i64 %130, i64* %120, align 1
  br label %386

132:                                              ; preds = %18
  %133 = icmp slt i32 %24, 31
  br i1 %133, label %134, label %135

134:                                              ; preds = %132
  tail call void @_ZNSt3__118__insertion_sort_3IRPFbddEN2v88internal13UnalignedSlotIdEEEEvT0_S8_T_(i64 %19, i64 %5, i1 (double, double)** dereferenceable(8) %2)
  br label %386

135:                                              ; preds = %132
  %136 = icmp sgt i32 %24, 999
  %137 = lshr i64 %22, 1
  %138 = and i64 %137, 17179869176
  %139 = add i64 %138, %19
  br i1 %136, label %140, label %188

140:                                              ; preds = %135
  %141 = lshr i64 %22, 2
  %142 = and i64 %141, 8589934584
  %143 = add i64 %142, %19
  %144 = add i64 %139, %142
  %145 = tail call i32 @_ZNSt3__17__sort4IRPFbddEN2v88internal13UnalignedSlotIdEEEEjT0_S8_S8_S8_T_(i64 %19, i64 %143, i64 %139, i64 %144, i1 (double, double)** dereferenceable(8) %2) #9
  %146 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %147 = load double, double* %12, align 1
  %148 = inttoptr i64 %144 to double*
  %149 = load double, double* %148, align 1
  %150 = tail call zeroext i1 %146(double %147, double %149) #9
  br i1 %150, label %153, label %151

151:                                              ; preds = %140
  %152 = inttoptr i64 %139 to double*
  br label %227

153:                                              ; preds = %140
  %154 = inttoptr i64 %144 to i64*
  %155 = load i64, i64* %154, align 1
  %156 = load i64, i64* %13, align 1
  store i64 %156, i64* %154, align 1
  store i64 %155, i64* %13, align 1
  %157 = add i32 %145, 1
  %158 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %159 = load double, double* %148, align 1
  %160 = inttoptr i64 %139 to double*
  %161 = load double, double* %160, align 1
  %162 = tail call zeroext i1 %158(double %159, double %161) #9
  br i1 %162, label %163, label %227

163:                                              ; preds = %153
  %164 = inttoptr i64 %139 to i64*
  %165 = load i64, i64* %164, align 1
  %166 = load i64, i64* %154, align 1
  store i64 %166, i64* %164, align 1
  store i64 %165, i64* %154, align 1
  %167 = add i32 %145, 2
  %168 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %169 = load double, double* %160, align 1
  %170 = inttoptr i64 %143 to double*
  %171 = load double, double* %170, align 1
  %172 = tail call zeroext i1 %168(double %169, double %171) #9
  br i1 %172, label %173, label %227

173:                                              ; preds = %163
  %174 = inttoptr i64 %143 to i64*
  %175 = load i64, i64* %174, align 1
  %176 = load i64, i64* %164, align 1
  store i64 %176, i64* %174, align 1
  store i64 %175, i64* %164, align 1
  %177 = add i32 %145, 3
  %178 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %179 = load double, double* %170, align 1
  %180 = inttoptr i64 %19 to double*
  %181 = load double, double* %180, align 1
  %182 = tail call zeroext i1 %178(double %179, double %181) #9
  br i1 %182, label %183, label %227

183:                                              ; preds = %173
  %184 = inttoptr i64 %19 to i64*
  %185 = load i64, i64* %184, align 1
  %186 = load i64, i64* %174, align 1
  store i64 %186, i64* %184, align 1
  store i64 %185, i64* %174, align 1
  %187 = add i32 %145, 4
  br label %227

188:                                              ; preds = %135
  %189 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %190 = inttoptr i64 %139 to double*
  %191 = load double, double* %190, align 1
  %192 = inttoptr i64 %19 to double*
  %193 = load double, double* %192, align 1
  %194 = tail call zeroext i1 %189(double %191, double %193) #9
  %195 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %196 = load double, double* %8, align 1
  %197 = load double, double* %190, align 1
  %198 = tail call zeroext i1 %195(double %196, double %197) #9
  br i1 %194, label %212, label %199

199:                                              ; preds = %188
  br i1 %198, label %200, label %227

200:                                              ; preds = %199
  %201 = inttoptr i64 %139 to i64*
  %202 = load i64, i64* %201, align 1
  %203 = load i64, i64* %9, align 1
  store i64 %203, i64* %201, align 1
  store i64 %202, i64* %9, align 1
  %204 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %205 = load double, double* %190, align 1
  %206 = load double, double* %192, align 1
  %207 = tail call zeroext i1 %204(double %205, double %206) #9
  br i1 %207, label %208, label %227

208:                                              ; preds = %200
  %209 = inttoptr i64 %19 to i64*
  %210 = load i64, i64* %209, align 1
  %211 = load i64, i64* %201, align 1
  store i64 %211, i64* %209, align 1
  store i64 %210, i64* %201, align 1
  br label %227

212:                                              ; preds = %188
  %213 = inttoptr i64 %19 to i64*
  %214 = load i64, i64* %213, align 1
  br i1 %198, label %215, label %217

215:                                              ; preds = %212
  %216 = load i64, i64* %11, align 1
  store i64 %216, i64* %213, align 1
  store i64 %214, i64* %11, align 1
  br label %227

217:                                              ; preds = %212
  %218 = inttoptr i64 %139 to i64*
  %219 = load i64, i64* %218, align 1
  store i64 %219, i64* %213, align 1
  store i64 %214, i64* %218, align 1
  %220 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %221 = load double, double* %8, align 1
  %222 = load double, double* %190, align 1
  %223 = tail call zeroext i1 %220(double %221, double %222) #9
  br i1 %223, label %224, label %227

224:                                              ; preds = %217
  %225 = load i64, i64* %218, align 1
  %226 = load i64, i64* %10, align 1
  store i64 %226, i64* %218, align 1
  store i64 %225, i64* %10, align 1
  br label %227

227:                                              ; preds = %151, %224, %217, %215, %208, %200, %199, %183, %173, %163, %153
  %228 = phi double* [ %152, %151 ], [ %190, %224 ], [ %190, %217 ], [ %190, %215 ], [ %190, %208 ], [ %190, %200 ], [ %190, %199 ], [ %160, %183 ], [ %160, %173 ], [ %160, %163 ], [ %160, %153 ]
  %229 = phi i32 [ %145, %151 ], [ 2, %224 ], [ 1, %217 ], [ 1, %215 ], [ 2, %208 ], [ 1, %200 ], [ 0, %199 ], [ %187, %183 ], [ %177, %173 ], [ %167, %163 ], [ %157, %153 ]
  %230 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %231 = inttoptr i64 %19 to double*
  %232 = load double, double* %231, align 1
  %233 = load double, double* %228, align 1
  %234 = tail call zeroext i1 %230(double %232, double %233) #9
  br i1 %234, label %303, label %235

235:                                              ; preds = %227, %291
  %236 = phi i64 [ %237, %291 ], [ %7, %227 ]
  %237 = add i64 %236, -8
  %238 = icmp eq i64 %19, %237
  br i1 %238, label %239, label %291

239:                                              ; preds = %235
  %240 = add i64 %19, 8
  %241 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %242 = load double, double* %231, align 1
  %243 = load double, double* %14, align 1
  %244 = tail call zeroext i1 %241(double %242, double %243) #9
  br i1 %244, label %262, label %245

245:                                              ; preds = %239
  %246 = icmp eq i64 %240, %7
  br i1 %246, label %386, label %247

247:                                              ; preds = %245, %259
  %248 = phi i64 [ %260, %259 ], [ %240, %245 ]
  %249 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %250 = load double, double* %231, align 1
  %251 = inttoptr i64 %248 to double*
  %252 = load double, double* %251, align 1
  %253 = tail call zeroext i1 %249(double %250, double %252) #9
  br i1 %253, label %254, label %259

254:                                              ; preds = %247
  %255 = inttoptr i64 %248 to i64*
  %256 = load i64, i64* %255, align 1
  %257 = load i64, i64* %15, align 1
  store i64 %257, i64* %255, align 1
  store i64 %256, i64* %15, align 1
  %258 = add i64 %248, 8
  br label %262

259:                                              ; preds = %247
  %260 = add i64 %248, 8
  %261 = icmp eq i64 %260, %7
  br i1 %261, label %386, label %247

262:                                              ; preds = %239, %254
  %263 = phi i64 [ %240, %239 ], [ %258, %254 ]
  %264 = icmp eq i64 %263, %7
  br i1 %264, label %386, label %265

265:                                              ; preds = %262, %286
  %266 = phi i64 [ %280, %286 ], [ %7, %262 ]
  %267 = phi i64 [ %275, %286 ], [ %263, %262 ]
  br label %268

268:                                              ; preds = %268, %265
  %269 = phi i64 [ %267, %265 ], [ %275, %268 ]
  %270 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %271 = load double, double* %231, align 1
  %272 = inttoptr i64 %269 to double*
  %273 = load double, double* %272, align 1
  %274 = tail call zeroext i1 %270(double %271, double %273) #9
  %275 = add i64 %269, 8
  br i1 %274, label %276, label %268

276:                                              ; preds = %268, %276
  %277 = phi i64 [ %280, %276 ], [ %266, %268 ]
  %278 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %279 = load double, double* %231, align 1
  %280 = add i64 %277, -8
  %281 = inttoptr i64 %280 to double*
  %282 = load double, double* %281, align 1
  %283 = tail call zeroext i1 %278(double %279, double %282) #9
  br i1 %283, label %276, label %284

284:                                              ; preds = %276
  %285 = icmp ult i64 %269, %280
  br i1 %285, label %286, label %18

286:                                              ; preds = %284
  %287 = inttoptr i64 %269 to i64*
  %288 = load i64, i64* %287, align 1
  %289 = inttoptr i64 %280 to i64*
  %290 = load i64, i64* %289, align 1
  store i64 %290, i64* %287, align 1
  store i64 %288, i64* %289, align 1
  br label %265

291:                                              ; preds = %235
  %292 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %293 = inttoptr i64 %237 to double*
  %294 = load double, double* %293, align 1
  %295 = load double, double* %228, align 1
  %296 = tail call zeroext i1 %292(double %294, double %295) #9
  br i1 %296, label %297, label %235

297:                                              ; preds = %291
  %298 = inttoptr i64 %19 to i64*
  %299 = load i64, i64* %298, align 1
  %300 = inttoptr i64 %237 to i64*
  %301 = load i64, i64* %300, align 1
  store i64 %301, i64* %298, align 1
  store i64 %299, i64* %300, align 1
  %302 = add i32 %229, 1
  br label %303

303:                                              ; preds = %227, %297
  %304 = phi i64 [ %237, %297 ], [ %7, %227 ]
  %305 = phi i32 [ %302, %297 ], [ %229, %227 ]
  %306 = add i64 %19, 8
  %307 = icmp ult i64 %306, %304
  br i1 %307, label %308, label %340

308:                                              ; preds = %303, %332
  %309 = phi i64 [ %325, %332 ], [ %304, %303 ]
  %310 = phi i64 [ %321, %332 ], [ %306, %303 ]
  %311 = phi i64 [ %339, %332 ], [ %139, %303 ]
  %312 = phi i32 [ %337, %332 ], [ %305, %303 ]
  %313 = inttoptr i64 %311 to double*
  br label %314

314:                                              ; preds = %314, %308
  %315 = phi i64 [ %310, %308 ], [ %321, %314 ]
  %316 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %317 = inttoptr i64 %315 to double*
  %318 = load double, double* %317, align 1
  %319 = load double, double* %313, align 1
  %320 = tail call zeroext i1 %316(double %318, double %319) #9
  %321 = add i64 %315, 8
  br i1 %320, label %314, label %322

322:                                              ; preds = %314, %322
  %323 = phi i64 [ %325, %322 ], [ %309, %314 ]
  %324 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %325 = add i64 %323, -8
  %326 = inttoptr i64 %325 to double*
  %327 = load double, double* %326, align 1
  %328 = load double, double* %313, align 1
  %329 = tail call zeroext i1 %324(double %327, double %328) #9
  br i1 %329, label %330, label %322

330:                                              ; preds = %322
  %331 = icmp ugt i64 %315, %325
  br i1 %331, label %340, label %332

332:                                              ; preds = %330
  %333 = inttoptr i64 %315 to i64*
  %334 = load i64, i64* %333, align 1
  %335 = inttoptr i64 %325 to i64*
  %336 = load i64, i64* %335, align 1
  store i64 %336, i64* %333, align 1
  store i64 %334, i64* %335, align 1
  %337 = add i32 %312, 1
  %338 = icmp eq i64 %311, %315
  %339 = select i1 %338, i64 %325, i64 %311
  br label %308

340:                                              ; preds = %330, %303
  %341 = phi i64 [ %306, %303 ], [ %315, %330 ]
  %342 = phi i64 [ %139, %303 ], [ %311, %330 ]
  %343 = phi i32 [ %305, %303 ], [ %312, %330 ]
  %344 = icmp eq i64 %341, %342
  br i1 %344, label %358, label %345

345:                                              ; preds = %340
  %346 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %347 = inttoptr i64 %342 to double*
  %348 = load double, double* %347, align 1
  %349 = inttoptr i64 %341 to double*
  %350 = load double, double* %349, align 1
  %351 = tail call zeroext i1 %346(double %348, double %350) #9
  br i1 %351, label %352, label %358

352:                                              ; preds = %345
  %353 = inttoptr i64 %341 to i64*
  %354 = load i64, i64* %353, align 1
  %355 = inttoptr i64 %342 to i64*
  %356 = load i64, i64* %355, align 1
  store i64 %356, i64* %353, align 1
  store i64 %354, i64* %355, align 1
  %357 = add i32 %343, 1
  br label %358

358:                                              ; preds = %340, %352, %345
  %359 = phi i32 [ %357, %352 ], [ %343, %345 ], [ %343, %340 ]
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %361, label %368

361:                                              ; preds = %358
  %362 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRPFbddEN2v88internal13UnalignedSlotIdEEEEbT0_S8_T_(i64 %19, i64 %341, i1 (double, double)** dereferenceable(8) %2)
  %363 = add i64 %341, 8
  %364 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRPFbddEN2v88internal13UnalignedSlotIdEEEEbT0_S8_T_(i64 %363, i64 %5, i1 (double, double)** dereferenceable(8) %2)
  br i1 %364, label %365, label %367

365:                                              ; preds = %361
  br i1 %362, label %386, label %366

366:                                              ; preds = %365, %384
  br label %4

367:                                              ; preds = %361
  br i1 %362, label %382, label %368

368:                                              ; preds = %367, %358
  %369 = sub i64 %341, %19
  %370 = shl i64 %369, 32
  %371 = ashr exact i64 %370, 32
  %372 = lshr i64 %371, 3
  %373 = trunc i64 %372 to i32
  %374 = sub i64 %5, %341
  %375 = shl i64 %374, 32
  %376 = ashr exact i64 %375, 32
  %377 = lshr i64 %376, 3
  %378 = trunc i64 %377 to i32
  %379 = icmp slt i32 %373, %378
  br i1 %379, label %380, label %384

380:                                              ; preds = %368
  tail call void @_ZNSt3__16__sortIRPFbddEN2v88internal13UnalignedSlotIdEEEEvT0_S8_T_(i64 %19, i64 %341, i1 (double, double)** dereferenceable(8) %2)
  %381 = add i64 %341, 8
  br label %382

382:                                              ; preds = %380, %367
  %383 = phi i64 [ %363, %367 ], [ %381, %380 ]
  br label %16

384:                                              ; preds = %368
  %385 = add i64 %341, 8
  tail call void @_ZNSt3__16__sortIRPFbddEN2v88internal13UnalignedSlotIdEEEEvT0_S8_T_(i64 %385, i64 %5, i1 (double, double)** dereferenceable(8) %2)
  br label %366

386:                                              ; preds = %365, %262, %18, %18, %245, %259, %128, %119, %110, %100, %88, %79, %72, %69, %62, %53, %52, %25, %33, %83, %134
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort4IRPFbddEN2v88internal13UnalignedSlotIdEEEEjT0_S8_S8_S8_T_(i64, i64, i64, i64, i1 (double, double)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %6 = load i1 (double, double)*, i1 (double, double)** %4, align 8
  %7 = inttoptr i64 %1 to double*
  %8 = load double, double* %7, align 1
  %9 = inttoptr i64 %0 to double*
  %10 = load double, double* %9, align 1
  %11 = tail call zeroext i1 %6(double %8, double %10) #9
  %12 = load i1 (double, double)*, i1 (double, double)** %4, align 8
  %13 = inttoptr i64 %2 to double*
  %14 = load double, double* %13, align 1
  %15 = load double, double* %7, align 1
  %16 = tail call zeroext i1 %12(double %14, double %15) #9
  br i1 %11, label %31, label %17

17:                                               ; preds = %5
  br i1 %16, label %18, label %48

18:                                               ; preds = %17
  %19 = inttoptr i64 %1 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = inttoptr i64 %2 to i64*
  %22 = load i64, i64* %21, align 1
  store i64 %22, i64* %19, align 1
  store i64 %20, i64* %21, align 1
  %23 = load i1 (double, double)*, i1 (double, double)** %4, align 8
  %24 = load double, double* %7, align 1
  %25 = load double, double* %9, align 1
  %26 = tail call zeroext i1 %23(double %24, double %25) #9
  br i1 %26, label %27, label %48

27:                                               ; preds = %18
  %28 = inttoptr i64 %0 to i64*
  %29 = load i64, i64* %28, align 1
  %30 = load i64, i64* %19, align 1
  store i64 %30, i64* %28, align 1
  store i64 %29, i64* %19, align 1
  br label %48

31:                                               ; preds = %5
  %32 = inttoptr i64 %0 to i64*
  %33 = load i64, i64* %32, align 1
  br i1 %16, label %34, label %37

34:                                               ; preds = %31
  %35 = inttoptr i64 %2 to i64*
  %36 = load i64, i64* %35, align 1
  store i64 %36, i64* %32, align 1
  store i64 %33, i64* %35, align 1
  br label %48

37:                                               ; preds = %31
  %38 = inttoptr i64 %1 to i64*
  %39 = load i64, i64* %38, align 1
  store i64 %39, i64* %32, align 1
  store i64 %33, i64* %38, align 1
  %40 = load i1 (double, double)*, i1 (double, double)** %4, align 8
  %41 = load double, double* %13, align 1
  %42 = load double, double* %7, align 1
  %43 = tail call zeroext i1 %40(double %41, double %42) #9
  br i1 %43, label %44, label %48

44:                                               ; preds = %37
  %45 = load i64, i64* %38, align 1
  %46 = inttoptr i64 %2 to i64*
  %47 = load i64, i64* %46, align 1
  store i64 %47, i64* %38, align 1
  store i64 %45, i64* %46, align 1
  br label %48

48:                                               ; preds = %17, %18, %27, %34, %37, %44
  %49 = phi i32 [ 1, %34 ], [ 0, %17 ], [ 2, %27 ], [ 1, %18 ], [ 2, %44 ], [ 1, %37 ]
  %50 = load i1 (double, double)*, i1 (double, double)** %4, align 8
  %51 = inttoptr i64 %3 to double*
  %52 = load double, double* %51, align 1
  %53 = load double, double* %13, align 1
  %54 = tail call zeroext i1 %50(double %52, double %53) #9
  br i1 %54, label %55, label %79

55:                                               ; preds = %48
  %56 = inttoptr i64 %2 to i64*
  %57 = load i64, i64* %56, align 1
  %58 = inttoptr i64 %3 to i64*
  %59 = load i64, i64* %58, align 1
  store i64 %59, i64* %56, align 1
  store i64 %57, i64* %58, align 1
  %60 = add nuw nsw i32 %49, 1
  %61 = load i1 (double, double)*, i1 (double, double)** %4, align 8
  %62 = load double, double* %13, align 1
  %63 = load double, double* %7, align 1
  %64 = tail call zeroext i1 %61(double %62, double %63) #9
  br i1 %64, label %65, label %79

65:                                               ; preds = %55
  %66 = inttoptr i64 %1 to i64*
  %67 = load i64, i64* %66, align 1
  %68 = load i64, i64* %56, align 1
  store i64 %68, i64* %66, align 1
  store i64 %67, i64* %56, align 1
  %69 = add nuw nsw i32 %49, 2
  %70 = load i1 (double, double)*, i1 (double, double)** %4, align 8
  %71 = load double, double* %7, align 1
  %72 = load double, double* %9, align 1
  %73 = tail call zeroext i1 %70(double %71, double %72) #9
  br i1 %73, label %74, label %79

74:                                               ; preds = %65
  %75 = inttoptr i64 %0 to i64*
  %76 = load i64, i64* %75, align 1
  %77 = load i64, i64* %66, align 1
  store i64 %77, i64* %75, align 1
  store i64 %76, i64* %66, align 1
  %78 = add nuw nsw i32 %49, 3
  br label %79

79:                                               ; preds = %55, %74, %65, %48
  %80 = phi i32 [ %78, %74 ], [ %69, %65 ], [ %60, %55 ], [ %49, %48 ]
  ret i32 %80
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__118__insertion_sort_3IRPFbddEN2v88internal13UnalignedSlotIdEEEEvT0_S8_T_(i64, i64, i1 (double, double)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %4 = add i64 %0, 16
  %5 = add i64 %0, 8
  %6 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %7 = inttoptr i64 %5 to double*
  %8 = load double, double* %7, align 1
  %9 = inttoptr i64 %0 to double*
  %10 = load double, double* %9, align 1
  %11 = tail call zeroext i1 %6(double %8, double %10) #9
  %12 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %13 = inttoptr i64 %4 to double*
  %14 = load double, double* %13, align 1
  %15 = load double, double* %7, align 1
  %16 = tail call zeroext i1 %12(double %14, double %15) #9
  br i1 %11, label %31, label %17

17:                                               ; preds = %3
  br i1 %16, label %18, label %48

18:                                               ; preds = %17
  %19 = inttoptr i64 %5 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = inttoptr i64 %4 to i64*
  %22 = load i64, i64* %21, align 1
  store i64 %22, i64* %19, align 1
  store i64 %20, i64* %21, align 1
  %23 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %24 = load double, double* %7, align 1
  %25 = load double, double* %9, align 1
  %26 = tail call zeroext i1 %23(double %24, double %25) #9
  br i1 %26, label %27, label %48

27:                                               ; preds = %18
  %28 = inttoptr i64 %0 to i64*
  %29 = load i64, i64* %28, align 1
  %30 = load i64, i64* %19, align 1
  store i64 %30, i64* %28, align 1
  store i64 %29, i64* %19, align 1
  br label %48

31:                                               ; preds = %3
  %32 = inttoptr i64 %0 to i64*
  %33 = load i64, i64* %32, align 1
  br i1 %16, label %34, label %37

34:                                               ; preds = %31
  %35 = inttoptr i64 %4 to i64*
  %36 = load i64, i64* %35, align 1
  store i64 %36, i64* %32, align 1
  store i64 %33, i64* %35, align 1
  br label %48

37:                                               ; preds = %31
  %38 = inttoptr i64 %5 to i64*
  %39 = load i64, i64* %38, align 1
  store i64 %39, i64* %32, align 1
  store i64 %33, i64* %38, align 1
  %40 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %41 = load double, double* %13, align 1
  %42 = load double, double* %7, align 1
  %43 = tail call zeroext i1 %40(double %41, double %42) #9
  br i1 %43, label %44, label %48

44:                                               ; preds = %37
  %45 = load i64, i64* %38, align 1
  %46 = inttoptr i64 %4 to i64*
  %47 = load i64, i64* %46, align 1
  store i64 %47, i64* %38, align 1
  store i64 %45, i64* %46, align 1
  br label %48

48:                                               ; preds = %17, %18, %27, %34, %37, %44
  %49 = add i64 %0, 24
  %50 = icmp eq i64 %49, %1
  br i1 %50, label %51, label %52

51:                                               ; preds = %80, %48
  ret void

52:                                               ; preds = %48, %80
  %53 = phi i64 [ %54, %80 ], [ %4, %48 ]
  %54 = phi i64 [ %81, %80 ], [ %49, %48 ]
  %55 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %56 = inttoptr i64 %54 to double*
  %57 = load double, double* %56, align 1
  %58 = inttoptr i64 %53 to double*
  %59 = load double, double* %58, align 1
  %60 = tail call zeroext i1 %55(double %57, double %59) #9
  br i1 %60, label %61, label %80

61:                                               ; preds = %52
  %62 = load double, double* %56, align 1
  br label %63

63:                                               ; preds = %70, %61
  %64 = phi i64 [ %53, %61 ], [ %72, %70 ]
  %65 = phi i64 [ %54, %61 ], [ %64, %70 ]
  %66 = inttoptr i64 %65 to i64*
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67, align 1
  store i64 %68, i64* %66, align 1
  %69 = icmp eq i64 %64, %0
  br i1 %69, label %78, label %70

70:                                               ; preds = %63
  %71 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %72 = add i64 %64, -8
  %73 = inttoptr i64 %72 to double*
  %74 = load double, double* %73, align 1
  %75 = tail call zeroext i1 %71(double %62, double %74) #9
  br i1 %75, label %63, label %76

76:                                               ; preds = %70
  %77 = inttoptr i64 %64 to double*
  br label %78

78:                                               ; preds = %63, %76
  %79 = phi double* [ %77, %76 ], [ %9, %63 ]
  store double %62, double* %79, align 1
  br label %80

80:                                               ; preds = %78, %52
  %81 = add i64 %54, 8
  %82 = icmp eq i64 %81, %1
  br i1 %82, label %51, label %52
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRPFbddEN2v88internal13UnalignedSlotIdEEEEbT0_S8_T_(i64, i64, i1 (double, double)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %4 = sub i64 %1, %0
  %5 = shl i64 %4, 32
  %6 = ashr exact i64 %5, 32
  %7 = lshr i64 %6, 3
  %8 = trunc i64 %7 to i32
  switch i32 %8, label %116 [
    i32 0, label %202
    i32 1, label %202
    i32 2, label %9
    i32 3, label %22
    i32 4, label %67
    i32 5, label %72
  ]

9:                                                ; preds = %3
  %10 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %11 = add i64 %1, -8
  %12 = inttoptr i64 %11 to double*
  %13 = load double, double* %12, align 1
  %14 = inttoptr i64 %0 to double*
  %15 = load double, double* %14, align 1
  %16 = tail call zeroext i1 %10(double %13, double %15) #9
  br i1 %16, label %17, label %202

17:                                               ; preds = %9
  %18 = inttoptr i64 %0 to i64*
  %19 = load i64, i64* %18, align 1
  %20 = inttoptr i64 %11 to i64*
  %21 = load i64, i64* %20, align 1
  store i64 %21, i64* %18, align 1
  store i64 %19, i64* %20, align 1
  br label %202

22:                                               ; preds = %3
  %23 = add i64 %0, 8
  %24 = add i64 %1, -8
  %25 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %26 = inttoptr i64 %23 to double*
  %27 = load double, double* %26, align 1
  %28 = inttoptr i64 %0 to double*
  %29 = load double, double* %28, align 1
  %30 = tail call zeroext i1 %25(double %27, double %29) #9
  %31 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %32 = inttoptr i64 %24 to double*
  %33 = load double, double* %32, align 1
  %34 = load double, double* %26, align 1
  %35 = tail call zeroext i1 %31(double %33, double %34) #9
  br i1 %30, label %50, label %36

36:                                               ; preds = %22
  br i1 %35, label %37, label %202

37:                                               ; preds = %36
  %38 = inttoptr i64 %23 to i64*
  %39 = load i64, i64* %38, align 1
  %40 = inttoptr i64 %24 to i64*
  %41 = load i64, i64* %40, align 1
  store i64 %41, i64* %38, align 1
  store i64 %39, i64* %40, align 1
  %42 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %43 = load double, double* %26, align 1
  %44 = load double, double* %28, align 1
  %45 = tail call zeroext i1 %42(double %43, double %44) #9
  br i1 %45, label %46, label %202

46:                                               ; preds = %37
  %47 = inttoptr i64 %0 to i64*
  %48 = load i64, i64* %47, align 1
  %49 = load i64, i64* %38, align 1
  store i64 %49, i64* %47, align 1
  store i64 %48, i64* %38, align 1
  br label %202

50:                                               ; preds = %22
  %51 = inttoptr i64 %0 to i64*
  %52 = load i64, i64* %51, align 1
  br i1 %35, label %53, label %56

53:                                               ; preds = %50
  %54 = inttoptr i64 %24 to i64*
  %55 = load i64, i64* %54, align 1
  store i64 %55, i64* %51, align 1
  store i64 %52, i64* %54, align 1
  br label %202

56:                                               ; preds = %50
  %57 = inttoptr i64 %23 to i64*
  %58 = load i64, i64* %57, align 1
  store i64 %58, i64* %51, align 1
  store i64 %52, i64* %57, align 1
  %59 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %60 = load double, double* %32, align 1
  %61 = load double, double* %26, align 1
  %62 = tail call zeroext i1 %59(double %60, double %61) #9
  br i1 %62, label %63, label %202

63:                                               ; preds = %56
  %64 = load i64, i64* %57, align 1
  %65 = inttoptr i64 %24 to i64*
  %66 = load i64, i64* %65, align 1
  store i64 %66, i64* %57, align 1
  store i64 %64, i64* %65, align 1
  br label %202

67:                                               ; preds = %3
  %68 = add i64 %0, 8
  %69 = add i64 %0, 16
  %70 = add i64 %1, -8
  %71 = tail call i32 @_ZNSt3__17__sort4IRPFbddEN2v88internal13UnalignedSlotIdEEEEjT0_S8_S8_S8_T_(i64 %0, i64 %68, i64 %69, i64 %70, i1 (double, double)** dereferenceable(8) %2)
  br label %202

72:                                               ; preds = %3
  %73 = add i64 %0, 8
  %74 = add i64 %0, 16
  %75 = add i64 %0, 24
  %76 = add i64 %1, -8
  %77 = tail call i32 @_ZNSt3__17__sort4IRPFbddEN2v88internal13UnalignedSlotIdEEEEjT0_S8_S8_S8_T_(i64 %0, i64 %73, i64 %74, i64 %75, i1 (double, double)** dereferenceable(8) %2) #9
  %78 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %79 = inttoptr i64 %76 to double*
  %80 = load double, double* %79, align 1
  %81 = inttoptr i64 %75 to double*
  %82 = load double, double* %81, align 1
  %83 = tail call zeroext i1 %78(double %80, double %82) #9
  br i1 %83, label %84, label %202

84:                                               ; preds = %72
  %85 = inttoptr i64 %75 to i64*
  %86 = load i64, i64* %85, align 1
  %87 = inttoptr i64 %76 to i64*
  %88 = load i64, i64* %87, align 1
  store i64 %88, i64* %85, align 1
  store i64 %86, i64* %87, align 1
  %89 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %90 = load double, double* %81, align 1
  %91 = inttoptr i64 %74 to double*
  %92 = load double, double* %91, align 1
  %93 = tail call zeroext i1 %89(double %90, double %92) #9
  br i1 %93, label %94, label %202

94:                                               ; preds = %84
  %95 = inttoptr i64 %74 to i64*
  %96 = load i64, i64* %95, align 1
  %97 = load i64, i64* %85, align 1
  store i64 %97, i64* %95, align 1
  store i64 %96, i64* %85, align 1
  %98 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %99 = load double, double* %91, align 1
  %100 = inttoptr i64 %73 to double*
  %101 = load double, double* %100, align 1
  %102 = tail call zeroext i1 %98(double %99, double %101) #9
  br i1 %102, label %103, label %202

103:                                              ; preds = %94
  %104 = inttoptr i64 %73 to i64*
  %105 = load i64, i64* %104, align 1
  %106 = load i64, i64* %95, align 1
  store i64 %106, i64* %104, align 1
  store i64 %105, i64* %95, align 1
  %107 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %108 = load double, double* %100, align 1
  %109 = inttoptr i64 %0 to double*
  %110 = load double, double* %109, align 1
  %111 = tail call zeroext i1 %107(double %108, double %110) #9
  br i1 %111, label %112, label %202

112:                                              ; preds = %103
  %113 = inttoptr i64 %0 to i64*
  %114 = load i64, i64* %113, align 1
  %115 = load i64, i64* %104, align 1
  store i64 %115, i64* %113, align 1
  store i64 %114, i64* %104, align 1
  br label %202

116:                                              ; preds = %3
  %117 = add i64 %0, 16
  %118 = add i64 %0, 8
  %119 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %120 = inttoptr i64 %118 to double*
  %121 = load double, double* %120, align 1
  %122 = inttoptr i64 %0 to double*
  %123 = load double, double* %122, align 1
  %124 = tail call zeroext i1 %119(double %121, double %123) #9
  %125 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %126 = inttoptr i64 %117 to double*
  %127 = load double, double* %126, align 1
  %128 = load double, double* %120, align 1
  %129 = tail call zeroext i1 %125(double %127, double %128) #9
  br i1 %124, label %144, label %130

130:                                              ; preds = %116
  br i1 %129, label %131, label %161

131:                                              ; preds = %130
  %132 = inttoptr i64 %118 to i64*
  %133 = load i64, i64* %132, align 1
  %134 = inttoptr i64 %117 to i64*
  %135 = load i64, i64* %134, align 1
  store i64 %135, i64* %132, align 1
  store i64 %133, i64* %134, align 1
  %136 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %137 = load double, double* %120, align 1
  %138 = load double, double* %122, align 1
  %139 = tail call zeroext i1 %136(double %137, double %138) #9
  br i1 %139, label %140, label %161

140:                                              ; preds = %131
  %141 = inttoptr i64 %0 to i64*
  %142 = load i64, i64* %141, align 1
  %143 = load i64, i64* %132, align 1
  store i64 %143, i64* %141, align 1
  store i64 %142, i64* %132, align 1
  br label %161

144:                                              ; preds = %116
  %145 = inttoptr i64 %0 to i64*
  %146 = load i64, i64* %145, align 1
  br i1 %129, label %147, label %150

147:                                              ; preds = %144
  %148 = inttoptr i64 %117 to i64*
  %149 = load i64, i64* %148, align 1
  store i64 %149, i64* %145, align 1
  store i64 %146, i64* %148, align 1
  br label %161

150:                                              ; preds = %144
  %151 = inttoptr i64 %118 to i64*
  %152 = load i64, i64* %151, align 1
  store i64 %152, i64* %145, align 1
  store i64 %146, i64* %151, align 1
  %153 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %154 = load double, double* %126, align 1
  %155 = load double, double* %120, align 1
  %156 = tail call zeroext i1 %153(double %154, double %155) #9
  br i1 %156, label %157, label %161

157:                                              ; preds = %150
  %158 = load i64, i64* %151, align 1
  %159 = inttoptr i64 %117 to i64*
  %160 = load i64, i64* %159, align 1
  store i64 %160, i64* %151, align 1
  store i64 %158, i64* %159, align 1
  br label %161

161:                                              ; preds = %130, %131, %140, %147, %150, %157
  %162 = add i64 %0, 24
  %163 = icmp eq i64 %162, %1
  br i1 %163, label %202, label %164

164:                                              ; preds = %161, %195
  %165 = phi i32 [ %196, %195 ], [ 0, %161 ]
  %166 = phi i64 [ %167, %195 ], [ %117, %161 ]
  %167 = phi i64 [ %197, %195 ], [ %162, %161 ]
  %168 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %169 = inttoptr i64 %167 to double*
  %170 = load double, double* %169, align 1
  %171 = inttoptr i64 %166 to double*
  %172 = load double, double* %171, align 1
  %173 = tail call zeroext i1 %168(double %170, double %172) #9
  br i1 %173, label %174, label %195

174:                                              ; preds = %164
  %175 = load double, double* %169, align 1
  br label %176

176:                                              ; preds = %183, %174
  %177 = phi i64 [ %166, %174 ], [ %185, %183 ]
  %178 = phi i64 [ %167, %174 ], [ %177, %183 ]
  %179 = inttoptr i64 %178 to i64*
  %180 = inttoptr i64 %177 to i64*
  %181 = load i64, i64* %180, align 1
  store i64 %181, i64* %179, align 1
  %182 = icmp eq i64 %177, %0
  br i1 %182, label %191, label %183

183:                                              ; preds = %176
  %184 = load i1 (double, double)*, i1 (double, double)** %2, align 8
  %185 = add i64 %177, -8
  %186 = inttoptr i64 %185 to double*
  %187 = load double, double* %186, align 1
  %188 = tail call zeroext i1 %184(double %175, double %187) #9
  br i1 %188, label %176, label %189

189:                                              ; preds = %183
  %190 = inttoptr i64 %177 to double*
  br label %191

191:                                              ; preds = %176, %189
  %192 = phi double* [ %190, %189 ], [ %122, %176 ]
  store double %175, double* %192, align 1
  %193 = add i32 %165, 1
  %194 = icmp eq i32 %193, 8
  br i1 %194, label %199, label %195

195:                                              ; preds = %191, %164
  %196 = phi i32 [ %165, %164 ], [ %193, %191 ]
  %197 = add i64 %167, 8
  %198 = icmp eq i64 %197, %1
  br i1 %198, label %202, label %164

199:                                              ; preds = %191
  %200 = add i64 %167, 8
  %201 = icmp eq i64 %200, %1
  br label %202

202:                                              ; preds = %195, %161, %199, %112, %103, %94, %84, %72, %63, %56, %53, %46, %37, %36, %9, %17, %3, %3, %67
  %203 = phi i1 [ true, %67 ], [ true, %3 ], [ true, %3 ], [ true, %17 ], [ true, %9 ], [ true, %36 ], [ true, %37 ], [ true, %46 ], [ true, %53 ], [ true, %56 ], [ true, %63 ], [ true, %72 ], [ true, %84 ], [ true, %94 ], [ true, %103 ], [ true, %112 ], [ %201, %199 ], [ true, %161 ], [ true, %195 ]
  ret i1 %203
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__sortIRNS_6__lessImmEEN2v88internal13UnalignedSlotImEEEEvT0_S8_T_(i64, i64, %"struct.std::__1::__less"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  br label %4

4:                                                ; preds = %296, %3
  %5 = phi i64 [ %1, %3 ], [ %276, %296 ]
  %6 = phi i64 [ %0, %3 ], [ %13, %296 ]
  %7 = add i64 %5, -8
  %8 = inttoptr i64 %7 to i64*
  %9 = inttoptr i64 %7 to i64*
  br label %10

10:                                               ; preds = %312, %4
  %11 = phi i64 [ %6, %4 ], [ %313, %312 ]
  br label %12

12:                                               ; preds = %231, %10
  %13 = phi i64 [ %11, %10 ], [ %218, %231 ]
  %14 = sub i64 %5, %13
  %15 = shl i64 %14, 32
  %16 = ashr exact i64 %15, 32
  %17 = lshr i64 %16, 3
  %18 = trunc i64 %17 to i32
  switch i32 %18, label %95 [
    i32 0, label %316
    i32 1, label %316
    i32 2, label %19
    i32 3, label %27
    i32 4, label %50
    i32 5, label %89
  ]

19:                                               ; preds = %12
  %20 = add i64 %5, -8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21, align 1
  %23 = inttoptr i64 %13 to i64*
  %24 = load i64, i64* %23, align 1
  %25 = icmp ult i64 %22, %24
  br i1 %25, label %26, label %316

26:                                               ; preds = %19
  store i64 %22, i64* %23, align 1
  store i64 %24, i64* %21, align 1
  br label %316

27:                                               ; preds = %12
  %28 = add i64 %13, 8
  %29 = add i64 %5, -8
  %30 = inttoptr i64 %28 to i64*
  %31 = load i64, i64* %30, align 1
  %32 = inttoptr i64 %13 to i64*
  %33 = load i64, i64* %32, align 1
  %34 = icmp ult i64 %31, %33
  %35 = inttoptr i64 %29 to i64*
  %36 = load i64, i64* %35, align 1
  %37 = icmp ult i64 %36, %31
  br i1 %34, label %44, label %38

38:                                               ; preds = %27
  br i1 %37, label %39, label %316

39:                                               ; preds = %38
  store i64 %36, i64* %30, align 1
  store i64 %31, i64* %35, align 1
  %40 = load i64, i64* %30, align 1
  %41 = load i64, i64* %32, align 1
  %42 = icmp ult i64 %40, %41
  br i1 %42, label %43, label %316

43:                                               ; preds = %39
  store i64 %40, i64* %32, align 1
  store i64 %41, i64* %30, align 1
  br label %316

44:                                               ; preds = %27
  br i1 %37, label %45, label %46

45:                                               ; preds = %44
  store i64 %36, i64* %32, align 1
  store i64 %33, i64* %35, align 1
  br label %316

46:                                               ; preds = %44
  store i64 %31, i64* %32, align 1
  store i64 %33, i64* %30, align 1
  %47 = load i64, i64* %35, align 1
  %48 = icmp ult i64 %47, %33
  br i1 %48, label %49, label %316

49:                                               ; preds = %46
  store i64 %47, i64* %30, align 1
  store i64 %33, i64* %35, align 1
  br label %316

50:                                               ; preds = %12
  %51 = add i64 %13, 8
  %52 = add i64 %13, 16
  %53 = add i64 %5, -8
  %54 = inttoptr i64 %51 to i64*
  %55 = load i64, i64* %54, align 1
  %56 = inttoptr i64 %13 to i64*
  %57 = load i64, i64* %56, align 1
  %58 = icmp ult i64 %55, %57
  %59 = inttoptr i64 %52 to i64*
  %60 = load i64, i64* %59, align 1
  %61 = icmp ult i64 %60, %55
  br i1 %58, label %69, label %62

62:                                               ; preds = %50
  br i1 %61, label %63, label %75

63:                                               ; preds = %62
  store i64 %60, i64* %54, align 1
  store i64 %55, i64* %59, align 1
  %64 = load i64, i64* %54, align 1
  %65 = load i64, i64* %56, align 1
  %66 = icmp ult i64 %64, %65
  br i1 %66, label %67, label %75

67:                                               ; preds = %63
  store i64 %64, i64* %56, align 1
  store i64 %65, i64* %54, align 1
  %68 = load i64, i64* %59, align 1
  br label %75

69:                                               ; preds = %50
  br i1 %61, label %70, label %71

70:                                               ; preds = %69
  store i64 %60, i64* %56, align 1
  store i64 %57, i64* %59, align 1
  br label %75

71:                                               ; preds = %69
  store i64 %55, i64* %56, align 1
  store i64 %57, i64* %54, align 1
  %72 = load i64, i64* %59, align 1
  %73 = icmp ult i64 %72, %57
  br i1 %73, label %74, label %75

74:                                               ; preds = %71
  store i64 %72, i64* %54, align 1
  store i64 %57, i64* %59, align 1
  br label %75

75:                                               ; preds = %74, %71, %70, %67, %63, %62
  %76 = phi i64 [ %57, %70 ], [ %60, %62 ], [ %68, %67 ], [ %55, %63 ], [ %57, %74 ], [ %72, %71 ]
  %77 = inttoptr i64 %53 to i64*
  %78 = load i64, i64* %77, align 1
  %79 = icmp ult i64 %78, %76
  br i1 %79, label %80, label %316

80:                                               ; preds = %75
  store i64 %78, i64* %59, align 1
  store i64 %76, i64* %77, align 1
  %81 = load i64, i64* %59, align 1
  %82 = load i64, i64* %54, align 1
  %83 = icmp ult i64 %81, %82
  br i1 %83, label %84, label %316

84:                                               ; preds = %80
  store i64 %81, i64* %54, align 1
  store i64 %82, i64* %59, align 1
  %85 = load i64, i64* %54, align 1
  %86 = load i64, i64* %56, align 1
  %87 = icmp ult i64 %85, %86
  br i1 %87, label %88, label %316

88:                                               ; preds = %84
  store i64 %85, i64* %56, align 1
  store i64 %86, i64* %54, align 1
  br label %316

89:                                               ; preds = %12
  %90 = add i64 %13, 8
  %91 = add i64 %13, 16
  %92 = add i64 %13, 24
  %93 = add i64 %5, -8
  %94 = tail call i32 @_ZNSt3__17__sort5IRNS_6__lessImmEEN2v88internal13UnalignedSlotImEEEEjT0_S8_S8_S8_S8_T_(i64 %13, i64 %90, i64 %91, i64 %92, i64 %93, %"struct.std::__1::__less"* dereferenceable(1) %2)
  br label %316

95:                                               ; preds = %12
  %96 = icmp slt i32 %18, 31
  br i1 %96, label %97, label %149

97:                                               ; preds = %95
  %98 = add i64 %13, 16
  %99 = add i64 %13, 8
  %100 = inttoptr i64 %99 to i64*
  %101 = load i64, i64* %100, align 1
  %102 = inttoptr i64 %13 to i64*
  %103 = load i64, i64* %102, align 1
  %104 = icmp ult i64 %101, %103
  %105 = inttoptr i64 %98 to i64*
  %106 = load i64, i64* %105, align 1
  %107 = icmp ult i64 %106, %101
  br i1 %104, label %114, label %108

108:                                              ; preds = %97
  br i1 %107, label %109, label %120

109:                                              ; preds = %108
  store i64 %106, i64* %100, align 1
  store i64 %101, i64* %105, align 1
  %110 = load i64, i64* %100, align 1
  %111 = load i64, i64* %102, align 1
  %112 = icmp ult i64 %110, %111
  br i1 %112, label %113, label %120

113:                                              ; preds = %109
  store i64 %110, i64* %102, align 1
  store i64 %111, i64* %100, align 1
  br label %120

114:                                              ; preds = %97
  br i1 %107, label %115, label %116

115:                                              ; preds = %114
  store i64 %106, i64* %102, align 1
  store i64 %103, i64* %105, align 1
  br label %120

116:                                              ; preds = %114
  store i64 %101, i64* %102, align 1
  store i64 %103, i64* %100, align 1
  %117 = load i64, i64* %105, align 1
  %118 = icmp ult i64 %117, %103
  br i1 %118, label %119, label %120

119:                                              ; preds = %116
  store i64 %117, i64* %100, align 1
  store i64 %103, i64* %105, align 1
  br label %120

120:                                              ; preds = %119, %116, %115, %113, %109, %108
  %121 = add i64 %13, 24
  %122 = icmp eq i64 %121, %5
  br i1 %122, label %316, label %123

123:                                              ; preds = %120, %146
  %124 = phi i64 [ %125, %146 ], [ %98, %120 ]
  %125 = phi i64 [ %147, %146 ], [ %121, %120 ]
  %126 = inttoptr i64 %125 to i64*
  %127 = load i64, i64* %126, align 1
  %128 = inttoptr i64 %124 to i64*
  %129 = load i64, i64* %128, align 1
  %130 = icmp ult i64 %127, %129
  br i1 %130, label %131, label %146

131:                                              ; preds = %123, %137
  %132 = phi i64 [ %140, %137 ], [ %129, %123 ]
  %133 = phi i64 [ %138, %137 ], [ %124, %123 ]
  %134 = phi i64 [ %133, %137 ], [ %125, %123 ]
  %135 = inttoptr i64 %134 to i64*
  store i64 %132, i64* %135, align 1
  %136 = icmp eq i64 %133, %13
  br i1 %136, label %144, label %137

137:                                              ; preds = %131
  %138 = add i64 %133, -8
  %139 = inttoptr i64 %138 to i64*
  %140 = load i64, i64* %139, align 1
  %141 = icmp ult i64 %127, %140
  br i1 %141, label %131, label %142

142:                                              ; preds = %137
  %143 = inttoptr i64 %133 to i64*
  br label %144

144:                                              ; preds = %131, %142
  %145 = phi i64* [ %143, %142 ], [ %102, %131 ]
  store i64 %127, i64* %145, align 1
  br label %146

146:                                              ; preds = %144, %123
  %147 = add i64 %125, 8
  %148 = icmp eq i64 %147, %5
  br i1 %148, label %316, label %123

149:                                              ; preds = %95
  %150 = icmp sgt i32 %18, 999
  %151 = lshr i64 %16, 1
  %152 = and i64 %151, 17179869176
  %153 = add i64 %152, %13
  br i1 %150, label %154, label %162

154:                                              ; preds = %149
  %155 = lshr i64 %16, 2
  %156 = and i64 %155, 8589934584
  %157 = add i64 %156, %13
  %158 = add i64 %153, %156
  %159 = tail call i32 @_ZNSt3__17__sort5IRNS_6__lessImmEEN2v88internal13UnalignedSlotImEEEEjT0_S8_S8_S8_S8_T_(i64 %13, i64 %157, i64 %153, i64 %158, i64 %7, %"struct.std::__1::__less"* dereferenceable(1) %2)
  %160 = inttoptr i64 %13 to i64*
  %161 = inttoptr i64 %153 to i64*
  br label %182

162:                                              ; preds = %149
  %163 = inttoptr i64 %153 to i64*
  %164 = load i64, i64* %163, align 1
  %165 = inttoptr i64 %13 to i64*
  %166 = load i64, i64* %165, align 1
  %167 = icmp ult i64 %164, %166
  %168 = load i64, i64* %8, align 1
  %169 = icmp ult i64 %168, %164
  br i1 %167, label %176, label %170

170:                                              ; preds = %162
  br i1 %169, label %171, label %182

171:                                              ; preds = %170
  store i64 %168, i64* %163, align 1
  store i64 %164, i64* %8, align 1
  %172 = load i64, i64* %163, align 1
  %173 = load i64, i64* %165, align 1
  %174 = icmp ult i64 %172, %173
  br i1 %174, label %175, label %182

175:                                              ; preds = %171
  store i64 %172, i64* %165, align 1
  store i64 %173, i64* %163, align 1
  br label %182

176:                                              ; preds = %162
  br i1 %169, label %177, label %178

177:                                              ; preds = %176
  store i64 %168, i64* %165, align 1
  store i64 %166, i64* %8, align 1
  br label %182

178:                                              ; preds = %176
  store i64 %164, i64* %165, align 1
  store i64 %166, i64* %163, align 1
  %179 = load i64, i64* %8, align 1
  %180 = icmp ult i64 %179, %166
  br i1 %180, label %181, label %182

181:                                              ; preds = %178
  store i64 %179, i64* %163, align 1
  store i64 %166, i64* %8, align 1
  br label %182

182:                                              ; preds = %181, %178, %177, %175, %171, %170, %154
  %183 = phi i64* [ %163, %181 ], [ %163, %178 ], [ %163, %177 ], [ %163, %175 ], [ %163, %171 ], [ %163, %170 ], [ %161, %154 ]
  %184 = phi i64* [ %165, %181 ], [ %165, %178 ], [ %165, %177 ], [ %165, %175 ], [ %165, %171 ], [ %165, %170 ], [ %160, %154 ]
  %185 = phi i32 [ 2, %181 ], [ 1, %178 ], [ 1, %177 ], [ 2, %175 ], [ 1, %171 ], [ 0, %170 ], [ %159, %154 ]
  %186 = load i64, i64* %184, align 1
  %187 = load i64, i64* %183, align 1
  %188 = icmp ult i64 %186, %187
  br i1 %188, label %242, label %189

189:                                              ; preds = %182, %235
  %190 = phi i64 [ %191, %235 ], [ %7, %182 ]
  %191 = add i64 %190, -8
  %192 = icmp eq i64 %13, %191
  br i1 %192, label %193, label %235

193:                                              ; preds = %189
  %194 = add i64 %13, 8
  %195 = load i64, i64* %9, align 1
  %196 = icmp ult i64 %186, %195
  br i1 %196, label %210, label %197

197:                                              ; preds = %193
  %198 = icmp eq i64 %194, %7
  br i1 %198, label %316, label %199

199:                                              ; preds = %197, %207
  %200 = phi i64 [ %208, %207 ], [ %194, %197 ]
  %201 = inttoptr i64 %200 to i64*
  %202 = load i64, i64* %201, align 1
  %203 = icmp ult i64 %186, %202
  br i1 %203, label %204, label %207

204:                                              ; preds = %199
  %205 = inttoptr i64 %200 to i64*
  store i64 %195, i64* %205, align 1
  store i64 %202, i64* %9, align 1
  %206 = add i64 %200, 8
  br label %210

207:                                              ; preds = %199
  %208 = add i64 %200, 8
  %209 = icmp eq i64 %208, %7
  br i1 %209, label %316, label %199

210:                                              ; preds = %193, %204
  %211 = phi i64 [ %194, %193 ], [ %206, %204 ]
  %212 = icmp eq i64 %211, %7
  br i1 %212, label %316, label %213

213:                                              ; preds = %210, %233
  %214 = phi i64 [ %227, %233 ], [ %7, %210 ]
  %215 = phi i64 [ %222, %233 ], [ %211, %210 ]
  %216 = load i64, i64* %184, align 1
  br label %217

217:                                              ; preds = %217, %213
  %218 = phi i64 [ %215, %213 ], [ %222, %217 ]
  %219 = inttoptr i64 %218 to i64*
  %220 = load i64, i64* %219, align 1
  %221 = icmp ult i64 %216, %220
  %222 = add i64 %218, 8
  br i1 %221, label %223, label %217

223:                                              ; preds = %217
  %224 = inttoptr i64 %218 to i64*
  br label %225

225:                                              ; preds = %223, %225
  %226 = phi i64 [ %227, %225 ], [ %214, %223 ]
  %227 = add i64 %226, -8
  %228 = inttoptr i64 %227 to i64*
  %229 = load i64, i64* %228, align 1
  %230 = icmp ult i64 %216, %229
  br i1 %230, label %225, label %231

231:                                              ; preds = %225
  %232 = icmp ult i64 %218, %227
  br i1 %232, label %233, label %12

233:                                              ; preds = %231
  %234 = inttoptr i64 %227 to i64*
  store i64 %229, i64* %224, align 1
  store i64 %220, i64* %234, align 1
  br label %213

235:                                              ; preds = %189
  %236 = inttoptr i64 %191 to i64*
  %237 = load i64, i64* %236, align 1
  %238 = icmp ult i64 %237, %187
  br i1 %238, label %239, label %189

239:                                              ; preds = %235
  %240 = inttoptr i64 %191 to i64*
  store i64 %237, i64* %184, align 1
  store i64 %186, i64* %240, align 1
  %241 = add i32 %185, 1
  br label %242

242:                                              ; preds = %182, %239
  %243 = phi i64 [ %191, %239 ], [ %7, %182 ]
  %244 = phi i32 [ %241, %239 ], [ %185, %182 ]
  %245 = add i64 %13, 8
  %246 = icmp ult i64 %245, %243
  br i1 %246, label %247, label %275

247:                                              ; preds = %242, %270
  %248 = phi i64 [ %264, %270 ], [ %243, %242 ]
  %249 = phi i64 [ %259, %270 ], [ %245, %242 ]
  %250 = phi i64 [ %274, %270 ], [ %153, %242 ]
  %251 = phi i32 [ %272, %270 ], [ %244, %242 ]
  %252 = inttoptr i64 %250 to i64*
  %253 = load i64, i64* %252, align 1
  br label %254

254:                                              ; preds = %254, %247
  %255 = phi i64 [ %249, %247 ], [ %259, %254 ]
  %256 = inttoptr i64 %255 to i64*
  %257 = load i64, i64* %256, align 1
  %258 = icmp ult i64 %257, %253
  %259 = add i64 %255, 8
  br i1 %258, label %254, label %260

260:                                              ; preds = %254
  %261 = inttoptr i64 %255 to i64*
  br label %262

262:                                              ; preds = %260, %262
  %263 = phi i64 [ %264, %262 ], [ %248, %260 ]
  %264 = add i64 %263, -8
  %265 = inttoptr i64 %264 to i64*
  %266 = load i64, i64* %265, align 1
  %267 = icmp ult i64 %266, %253
  br i1 %267, label %268, label %262

268:                                              ; preds = %262
  %269 = icmp ugt i64 %255, %264
  br i1 %269, label %275, label %270

270:                                              ; preds = %268
  %271 = inttoptr i64 %264 to i64*
  store i64 %266, i64* %261, align 1
  store i64 %257, i64* %271, align 1
  %272 = add i32 %251, 1
  %273 = icmp eq i64 %250, %255
  %274 = select i1 %273, i64 %264, i64 %250
  br label %247

275:                                              ; preds = %268, %242
  %276 = phi i64 [ %245, %242 ], [ %255, %268 ]
  %277 = phi i64 [ %153, %242 ], [ %250, %268 ]
  %278 = phi i32 [ %244, %242 ], [ %251, %268 ]
  %279 = icmp eq i64 %276, %277
  br i1 %279, label %288, label %280

280:                                              ; preds = %275
  %281 = inttoptr i64 %277 to i64*
  %282 = load i64, i64* %281, align 1
  %283 = inttoptr i64 %276 to i64*
  %284 = load i64, i64* %283, align 1
  %285 = icmp ult i64 %282, %284
  br i1 %285, label %286, label %288

286:                                              ; preds = %280
  store i64 %282, i64* %283, align 1
  store i64 %284, i64* %281, align 1
  %287 = add i32 %278, 1
  br label %288

288:                                              ; preds = %275, %286, %280
  %289 = phi i32 [ %287, %286 ], [ %278, %280 ], [ %278, %275 ]
  %290 = icmp eq i32 %289, 0
  br i1 %290, label %291, label %298

291:                                              ; preds = %288
  %292 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessImmEEN2v88internal13UnalignedSlotImEEEEbT0_S8_T_(i64 %13, i64 %276, %"struct.std::__1::__less"* dereferenceable(1) %2)
  %293 = add i64 %276, 8
  %294 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessImmEEN2v88internal13UnalignedSlotImEEEEbT0_S8_T_(i64 %293, i64 %5, %"struct.std::__1::__less"* dereferenceable(1) %2)
  br i1 %294, label %295, label %297

295:                                              ; preds = %291
  br i1 %292, label %316, label %296

296:                                              ; preds = %295, %314
  br label %4

297:                                              ; preds = %291
  br i1 %292, label %312, label %298

298:                                              ; preds = %297, %288
  %299 = sub i64 %276, %13
  %300 = shl i64 %299, 32
  %301 = ashr exact i64 %300, 32
  %302 = lshr i64 %301, 3
  %303 = trunc i64 %302 to i32
  %304 = sub i64 %5, %276
  %305 = shl i64 %304, 32
  %306 = ashr exact i64 %305, 32
  %307 = lshr i64 %306, 3
  %308 = trunc i64 %307 to i32
  %309 = icmp slt i32 %303, %308
  br i1 %309, label %310, label %314

310:                                              ; preds = %298
  tail call void @_ZNSt3__16__sortIRNS_6__lessImmEEN2v88internal13UnalignedSlotImEEEEvT0_S8_T_(i64 %13, i64 %276, %"struct.std::__1::__less"* dereferenceable(1) %2)
  %311 = add i64 %276, 8
  br label %312

312:                                              ; preds = %310, %297
  %313 = phi i64 [ %293, %297 ], [ %311, %310 ]
  br label %10

314:                                              ; preds = %298
  %315 = add i64 %276, 8
  tail call void @_ZNSt3__16__sortIRNS_6__lessImmEEN2v88internal13UnalignedSlotImEEEEvT0_S8_T_(i64 %315, i64 %5, %"struct.std::__1::__less"* dereferenceable(1) %2)
  br label %296

316:                                              ; preds = %295, %210, %12, %12, %197, %207, %146, %120, %88, %84, %80, %75, %49, %46, %45, %43, %39, %38, %19, %26, %89
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort5IRNS_6__lessImmEEN2v88internal13UnalignedSlotImEEEEjT0_S8_S8_S8_S8_T_(i64, i64, i64, i64, i64, %"struct.std::__1::__less"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %7 = inttoptr i64 %1 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %0 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = icmp ult i64 %8, %10
  %12 = inttoptr i64 %2 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = icmp ult i64 %13, %8
  br i1 %11, label %22, label %15

15:                                               ; preds = %6
  br i1 %14, label %16, label %28

16:                                               ; preds = %15
  store i64 %13, i64* %7, align 1
  store i64 %8, i64* %12, align 1
  %17 = load i64, i64* %7, align 1
  %18 = load i64, i64* %9, align 1
  %19 = icmp ult i64 %17, %18
  br i1 %19, label %20, label %28

20:                                               ; preds = %16
  store i64 %17, i64* %9, align 1
  store i64 %18, i64* %7, align 1
  %21 = load i64, i64* %12, align 1
  br label %28

22:                                               ; preds = %6
  br i1 %14, label %23, label %24

23:                                               ; preds = %22
  store i64 %13, i64* %9, align 1
  store i64 %10, i64* %12, align 1
  br label %28

24:                                               ; preds = %22
  store i64 %8, i64* %9, align 1
  store i64 %10, i64* %7, align 1
  %25 = load i64, i64* %12, align 1
  %26 = icmp ult i64 %25, %10
  br i1 %26, label %27, label %28

27:                                               ; preds = %24
  store i64 %25, i64* %7, align 1
  store i64 %10, i64* %12, align 1
  br label %28

28:                                               ; preds = %27, %24, %23, %20, %16, %15
  %29 = phi i64 [ %10, %23 ], [ %13, %15 ], [ %21, %20 ], [ %8, %16 ], [ %10, %27 ], [ %25, %24 ]
  %30 = phi i32 [ 1, %23 ], [ 0, %15 ], [ 2, %20 ], [ 1, %16 ], [ 2, %27 ], [ 1, %24 ]
  %31 = inttoptr i64 %3 to i64*
  %32 = load i64, i64* %31, align 1
  %33 = icmp ult i64 %32, %29
  br i1 %33, label %34, label %46

34:                                               ; preds = %28
  store i64 %32, i64* %12, align 1
  store i64 %29, i64* %31, align 1
  %35 = add nuw nsw i32 %30, 1
  %36 = load i64, i64* %12, align 1
  %37 = load i64, i64* %7, align 1
  %38 = icmp ult i64 %36, %37
  br i1 %38, label %39, label %46

39:                                               ; preds = %34
  store i64 %36, i64* %7, align 1
  store i64 %37, i64* %12, align 1
  %40 = add nuw nsw i32 %30, 2
  %41 = load i64, i64* %7, align 1
  %42 = load i64, i64* %9, align 1
  %43 = icmp ult i64 %41, %42
  br i1 %43, label %44, label %46

44:                                               ; preds = %39
  store i64 %41, i64* %9, align 1
  store i64 %42, i64* %7, align 1
  %45 = add nuw nsw i32 %30, 3
  br label %46

46:                                               ; preds = %28, %34, %39, %44
  %47 = phi i32 [ %45, %44 ], [ %40, %39 ], [ %35, %34 ], [ %30, %28 ]
  %48 = inttoptr i64 %4 to i64*
  %49 = load i64, i64* %48, align 1
  %50 = load i64, i64* %31, align 1
  %51 = icmp ult i64 %49, %50
  br i1 %51, label %52, label %69

52:                                               ; preds = %46
  store i64 %49, i64* %31, align 1
  store i64 %50, i64* %48, align 1
  %53 = add nuw nsw i32 %47, 1
  %54 = load i64, i64* %31, align 1
  %55 = load i64, i64* %12, align 1
  %56 = icmp ult i64 %54, %55
  br i1 %56, label %57, label %69

57:                                               ; preds = %52
  store i64 %54, i64* %12, align 1
  store i64 %55, i64* %31, align 1
  %58 = add nuw nsw i32 %47, 2
  %59 = load i64, i64* %12, align 1
  %60 = load i64, i64* %7, align 1
  %61 = icmp ult i64 %59, %60
  br i1 %61, label %62, label %69

62:                                               ; preds = %57
  store i64 %59, i64* %7, align 1
  store i64 %60, i64* %12, align 1
  %63 = add nuw nsw i32 %47, 3
  %64 = load i64, i64* %7, align 1
  %65 = load i64, i64* %9, align 1
  %66 = icmp ult i64 %64, %65
  br i1 %66, label %67, label %69

67:                                               ; preds = %62
  store i64 %64, i64* %9, align 1
  store i64 %65, i64* %7, align 1
  %68 = add nuw nsw i32 %47, 4
  br label %69

69:                                               ; preds = %52, %62, %67, %57, %46
  %70 = phi i32 [ %68, %67 ], [ %63, %62 ], [ %58, %57 ], [ %53, %52 ], [ %47, %46 ]
  ret i32 %70
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessImmEEN2v88internal13UnalignedSlotImEEEEbT0_S8_T_(i64, i64, %"struct.std::__1::__less"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %4 = sub i64 %1, %0
  %5 = shl i64 %4, 32
  %6 = ashr exact i64 %5, 32
  %7 = lshr i64 %6, 3
  %8 = trunc i64 %7 to i32
  switch i32 %8, label %85 [
    i32 0, label %144
    i32 1, label %144
    i32 2, label %9
    i32 3, label %17
    i32 4, label %40
    i32 5, label %79
  ]

9:                                                ; preds = %3
  %10 = add i64 %1, -8
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = inttoptr i64 %0 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = icmp ult i64 %12, %14
  br i1 %15, label %16, label %144

16:                                               ; preds = %9
  store i64 %12, i64* %13, align 1
  store i64 %14, i64* %11, align 1
  br label %144

17:                                               ; preds = %3
  %18 = add i64 %0, 8
  %19 = add i64 %1, -8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 1
  %22 = inttoptr i64 %0 to i64*
  %23 = load i64, i64* %22, align 1
  %24 = icmp ult i64 %21, %23
  %25 = inttoptr i64 %19 to i64*
  %26 = load i64, i64* %25, align 1
  %27 = icmp ult i64 %26, %21
  br i1 %24, label %34, label %28

28:                                               ; preds = %17
  br i1 %27, label %29, label %144

29:                                               ; preds = %28
  store i64 %26, i64* %20, align 1
  store i64 %21, i64* %25, align 1
  %30 = load i64, i64* %20, align 1
  %31 = load i64, i64* %22, align 1
  %32 = icmp ult i64 %30, %31
  br i1 %32, label %33, label %144

33:                                               ; preds = %29
  store i64 %30, i64* %22, align 1
  store i64 %31, i64* %20, align 1
  br label %144

34:                                               ; preds = %17
  br i1 %27, label %35, label %36

35:                                               ; preds = %34
  store i64 %26, i64* %22, align 1
  store i64 %23, i64* %25, align 1
  br label %144

36:                                               ; preds = %34
  store i64 %21, i64* %22, align 1
  store i64 %23, i64* %20, align 1
  %37 = load i64, i64* %25, align 1
  %38 = icmp ult i64 %37, %23
  br i1 %38, label %39, label %144

39:                                               ; preds = %36
  store i64 %37, i64* %20, align 1
  store i64 %23, i64* %25, align 1
  br label %144

40:                                               ; preds = %3
  %41 = add i64 %0, 8
  %42 = add i64 %0, 16
  %43 = add i64 %1, -8
  %44 = inttoptr i64 %41 to i64*
  %45 = load i64, i64* %44, align 1
  %46 = inttoptr i64 %0 to i64*
  %47 = load i64, i64* %46, align 1
  %48 = icmp ult i64 %45, %47
  %49 = inttoptr i64 %42 to i64*
  %50 = load i64, i64* %49, align 1
  %51 = icmp ult i64 %50, %45
  br i1 %48, label %59, label %52

52:                                               ; preds = %40
  br i1 %51, label %53, label %65

53:                                               ; preds = %52
  store i64 %50, i64* %44, align 1
  store i64 %45, i64* %49, align 1
  %54 = load i64, i64* %44, align 1
  %55 = load i64, i64* %46, align 1
  %56 = icmp ult i64 %54, %55
  br i1 %56, label %57, label %65

57:                                               ; preds = %53
  store i64 %54, i64* %46, align 1
  store i64 %55, i64* %44, align 1
  %58 = load i64, i64* %49, align 1
  br label %65

59:                                               ; preds = %40
  br i1 %51, label %60, label %61

60:                                               ; preds = %59
  store i64 %50, i64* %46, align 1
  store i64 %47, i64* %49, align 1
  br label %65

61:                                               ; preds = %59
  store i64 %45, i64* %46, align 1
  store i64 %47, i64* %44, align 1
  %62 = load i64, i64* %49, align 1
  %63 = icmp ult i64 %62, %47
  br i1 %63, label %64, label %65

64:                                               ; preds = %61
  store i64 %62, i64* %44, align 1
  store i64 %47, i64* %49, align 1
  br label %65

65:                                               ; preds = %64, %61, %60, %57, %53, %52
  %66 = phi i64 [ %47, %60 ], [ %50, %52 ], [ %58, %57 ], [ %45, %53 ], [ %47, %64 ], [ %62, %61 ]
  %67 = inttoptr i64 %43 to i64*
  %68 = load i64, i64* %67, align 1
  %69 = icmp ult i64 %68, %66
  br i1 %69, label %70, label %144

70:                                               ; preds = %65
  store i64 %68, i64* %49, align 1
  store i64 %66, i64* %67, align 1
  %71 = load i64, i64* %49, align 1
  %72 = load i64, i64* %44, align 1
  %73 = icmp ult i64 %71, %72
  br i1 %73, label %74, label %144

74:                                               ; preds = %70
  store i64 %71, i64* %44, align 1
  store i64 %72, i64* %49, align 1
  %75 = load i64, i64* %44, align 1
  %76 = load i64, i64* %46, align 1
  %77 = icmp ult i64 %75, %76
  br i1 %77, label %78, label %144

78:                                               ; preds = %74
  store i64 %75, i64* %46, align 1
  store i64 %76, i64* %44, align 1
  br label %144

79:                                               ; preds = %3
  %80 = add i64 %0, 8
  %81 = add i64 %0, 16
  %82 = add i64 %0, 24
  %83 = add i64 %1, -8
  %84 = tail call i32 @_ZNSt3__17__sort5IRNS_6__lessImmEEN2v88internal13UnalignedSlotImEEEEjT0_S8_S8_S8_S8_T_(i64 %0, i64 %80, i64 %81, i64 %82, i64 %83, %"struct.std::__1::__less"* dereferenceable(1) %2)
  br label %144

85:                                               ; preds = %3
  %86 = add i64 %0, 16
  %87 = add i64 %0, 8
  %88 = inttoptr i64 %87 to i64*
  %89 = load i64, i64* %88, align 1
  %90 = inttoptr i64 %0 to i64*
  %91 = load i64, i64* %90, align 1
  %92 = icmp ult i64 %89, %91
  %93 = inttoptr i64 %86 to i64*
  %94 = load i64, i64* %93, align 1
  %95 = icmp ult i64 %94, %89
  br i1 %92, label %102, label %96

96:                                               ; preds = %85
  br i1 %95, label %97, label %108

97:                                               ; preds = %96
  store i64 %94, i64* %88, align 1
  store i64 %89, i64* %93, align 1
  %98 = load i64, i64* %88, align 1
  %99 = load i64, i64* %90, align 1
  %100 = icmp ult i64 %98, %99
  br i1 %100, label %101, label %108

101:                                              ; preds = %97
  store i64 %98, i64* %90, align 1
  store i64 %99, i64* %88, align 1
  br label %108

102:                                              ; preds = %85
  br i1 %95, label %103, label %104

103:                                              ; preds = %102
  store i64 %94, i64* %90, align 1
  store i64 %91, i64* %93, align 1
  br label %108

104:                                              ; preds = %102
  store i64 %89, i64* %90, align 1
  store i64 %91, i64* %88, align 1
  %105 = load i64, i64* %93, align 1
  %106 = icmp ult i64 %105, %91
  br i1 %106, label %107, label %108

107:                                              ; preds = %104
  store i64 %105, i64* %88, align 1
  store i64 %91, i64* %93, align 1
  br label %108

108:                                              ; preds = %96, %97, %101, %103, %104, %107
  %109 = add i64 %0, 24
  %110 = icmp eq i64 %109, %1
  br i1 %110, label %144, label %111

111:                                              ; preds = %108, %137
  %112 = phi i32 [ %138, %137 ], [ 0, %108 ]
  %113 = phi i64 [ %114, %137 ], [ %86, %108 ]
  %114 = phi i64 [ %139, %137 ], [ %109, %108 ]
  %115 = inttoptr i64 %114 to i64*
  %116 = load i64, i64* %115, align 1
  %117 = inttoptr i64 %113 to i64*
  %118 = load i64, i64* %117, align 1
  %119 = icmp ult i64 %116, %118
  br i1 %119, label %120, label %137

120:                                              ; preds = %111, %126
  %121 = phi i64 [ %129, %126 ], [ %118, %111 ]
  %122 = phi i64 [ %127, %126 ], [ %113, %111 ]
  %123 = phi i64 [ %122, %126 ], [ %114, %111 ]
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 1
  %125 = icmp eq i64 %122, %0
  br i1 %125, label %133, label %126

126:                                              ; preds = %120
  %127 = add i64 %122, -8
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128, align 1
  %130 = icmp ult i64 %116, %129
  br i1 %130, label %120, label %131

131:                                              ; preds = %126
  %132 = inttoptr i64 %122 to i64*
  br label %133

133:                                              ; preds = %120, %131
  %134 = phi i64* [ %132, %131 ], [ %90, %120 ]
  store i64 %116, i64* %134, align 1
  %135 = add i32 %112, 1
  %136 = icmp eq i32 %135, 8
  br i1 %136, label %141, label %137

137:                                              ; preds = %133, %111
  %138 = phi i32 [ %112, %111 ], [ %135, %133 ]
  %139 = add i64 %114, 8
  %140 = icmp eq i64 %139, %1
  br i1 %140, label %144, label %111

141:                                              ; preds = %133
  %142 = add i64 %114, 8
  %143 = icmp eq i64 %142, %1
  br label %144

144:                                              ; preds = %137, %108, %141, %78, %74, %70, %65, %39, %36, %35, %33, %29, %28, %9, %16, %3, %3, %79
  %145 = phi i1 [ true, %79 ], [ true, %3 ], [ true, %3 ], [ true, %16 ], [ true, %9 ], [ true, %28 ], [ true, %29 ], [ true, %33 ], [ true, %35 ], [ true, %36 ], [ true, %39 ], [ true, %65 ], [ true, %70 ], [ true, %74 ], [ true, %78 ], [ %143, %141 ], [ true, %108 ], [ true, %137 ]
  ret i1 %145
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__sortIRNS_6__lessIllEEN2v88internal13UnalignedSlotIlEEEEvT0_S8_T_(i64, i64, %"struct.std::__1::__less.1191"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  br label %4

4:                                                ; preds = %296, %3
  %5 = phi i64 [ %1, %3 ], [ %276, %296 ]
  %6 = phi i64 [ %0, %3 ], [ %13, %296 ]
  %7 = add i64 %5, -8
  %8 = inttoptr i64 %7 to i64*
  %9 = inttoptr i64 %7 to i64*
  br label %10

10:                                               ; preds = %312, %4
  %11 = phi i64 [ %6, %4 ], [ %313, %312 ]
  br label %12

12:                                               ; preds = %231, %10
  %13 = phi i64 [ %11, %10 ], [ %218, %231 ]
  %14 = sub i64 %5, %13
  %15 = shl i64 %14, 32
  %16 = ashr exact i64 %15, 32
  %17 = lshr i64 %16, 3
  %18 = trunc i64 %17 to i32
  switch i32 %18, label %95 [
    i32 0, label %316
    i32 1, label %316
    i32 2, label %19
    i32 3, label %27
    i32 4, label %50
    i32 5, label %89
  ]

19:                                               ; preds = %12
  %20 = add i64 %5, -8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21, align 1
  %23 = inttoptr i64 %13 to i64*
  %24 = load i64, i64* %23, align 1
  %25 = icmp slt i64 %22, %24
  br i1 %25, label %26, label %316

26:                                               ; preds = %19
  store i64 %22, i64* %23, align 1
  store i64 %24, i64* %21, align 1
  br label %316

27:                                               ; preds = %12
  %28 = add i64 %13, 8
  %29 = add i64 %5, -8
  %30 = inttoptr i64 %28 to i64*
  %31 = load i64, i64* %30, align 1
  %32 = inttoptr i64 %13 to i64*
  %33 = load i64, i64* %32, align 1
  %34 = icmp slt i64 %31, %33
  %35 = inttoptr i64 %29 to i64*
  %36 = load i64, i64* %35, align 1
  %37 = icmp slt i64 %36, %31
  br i1 %34, label %44, label %38

38:                                               ; preds = %27
  br i1 %37, label %39, label %316

39:                                               ; preds = %38
  store i64 %36, i64* %30, align 1
  store i64 %31, i64* %35, align 1
  %40 = load i64, i64* %30, align 1
  %41 = load i64, i64* %32, align 1
  %42 = icmp slt i64 %40, %41
  br i1 %42, label %43, label %316

43:                                               ; preds = %39
  store i64 %40, i64* %32, align 1
  store i64 %41, i64* %30, align 1
  br label %316

44:                                               ; preds = %27
  br i1 %37, label %45, label %46

45:                                               ; preds = %44
  store i64 %36, i64* %32, align 1
  store i64 %33, i64* %35, align 1
  br label %316

46:                                               ; preds = %44
  store i64 %31, i64* %32, align 1
  store i64 %33, i64* %30, align 1
  %47 = load i64, i64* %35, align 1
  %48 = icmp slt i64 %47, %33
  br i1 %48, label %49, label %316

49:                                               ; preds = %46
  store i64 %47, i64* %30, align 1
  store i64 %33, i64* %35, align 1
  br label %316

50:                                               ; preds = %12
  %51 = add i64 %13, 8
  %52 = add i64 %13, 16
  %53 = add i64 %5, -8
  %54 = inttoptr i64 %51 to i64*
  %55 = load i64, i64* %54, align 1
  %56 = inttoptr i64 %13 to i64*
  %57 = load i64, i64* %56, align 1
  %58 = icmp slt i64 %55, %57
  %59 = inttoptr i64 %52 to i64*
  %60 = load i64, i64* %59, align 1
  %61 = icmp slt i64 %60, %55
  br i1 %58, label %69, label %62

62:                                               ; preds = %50
  br i1 %61, label %63, label %75

63:                                               ; preds = %62
  store i64 %60, i64* %54, align 1
  store i64 %55, i64* %59, align 1
  %64 = load i64, i64* %54, align 1
  %65 = load i64, i64* %56, align 1
  %66 = icmp slt i64 %64, %65
  br i1 %66, label %67, label %75

67:                                               ; preds = %63
  store i64 %64, i64* %56, align 1
  store i64 %65, i64* %54, align 1
  %68 = load i64, i64* %59, align 1
  br label %75

69:                                               ; preds = %50
  br i1 %61, label %70, label %71

70:                                               ; preds = %69
  store i64 %60, i64* %56, align 1
  store i64 %57, i64* %59, align 1
  br label %75

71:                                               ; preds = %69
  store i64 %55, i64* %56, align 1
  store i64 %57, i64* %54, align 1
  %72 = load i64, i64* %59, align 1
  %73 = icmp slt i64 %72, %57
  br i1 %73, label %74, label %75

74:                                               ; preds = %71
  store i64 %72, i64* %54, align 1
  store i64 %57, i64* %59, align 1
  br label %75

75:                                               ; preds = %74, %71, %70, %67, %63, %62
  %76 = phi i64 [ %57, %70 ], [ %60, %62 ], [ %68, %67 ], [ %55, %63 ], [ %57, %74 ], [ %72, %71 ]
  %77 = inttoptr i64 %53 to i64*
  %78 = load i64, i64* %77, align 1
  %79 = icmp slt i64 %78, %76
  br i1 %79, label %80, label %316

80:                                               ; preds = %75
  store i64 %78, i64* %59, align 1
  store i64 %76, i64* %77, align 1
  %81 = load i64, i64* %59, align 1
  %82 = load i64, i64* %54, align 1
  %83 = icmp slt i64 %81, %82
  br i1 %83, label %84, label %316

84:                                               ; preds = %80
  store i64 %81, i64* %54, align 1
  store i64 %82, i64* %59, align 1
  %85 = load i64, i64* %54, align 1
  %86 = load i64, i64* %56, align 1
  %87 = icmp slt i64 %85, %86
  br i1 %87, label %88, label %316

88:                                               ; preds = %84
  store i64 %85, i64* %56, align 1
  store i64 %86, i64* %54, align 1
  br label %316

89:                                               ; preds = %12
  %90 = add i64 %13, 8
  %91 = add i64 %13, 16
  %92 = add i64 %13, 24
  %93 = add i64 %5, -8
  %94 = tail call i32 @_ZNSt3__17__sort5IRNS_6__lessIllEEN2v88internal13UnalignedSlotIlEEEEjT0_S8_S8_S8_S8_T_(i64 %13, i64 %90, i64 %91, i64 %92, i64 %93, %"struct.std::__1::__less.1191"* dereferenceable(1) %2)
  br label %316

95:                                               ; preds = %12
  %96 = icmp slt i32 %18, 31
  br i1 %96, label %97, label %149

97:                                               ; preds = %95
  %98 = add i64 %13, 16
  %99 = add i64 %13, 8
  %100 = inttoptr i64 %99 to i64*
  %101 = load i64, i64* %100, align 1
  %102 = inttoptr i64 %13 to i64*
  %103 = load i64, i64* %102, align 1
  %104 = icmp slt i64 %101, %103
  %105 = inttoptr i64 %98 to i64*
  %106 = load i64, i64* %105, align 1
  %107 = icmp slt i64 %106, %101
  br i1 %104, label %114, label %108

108:                                              ; preds = %97
  br i1 %107, label %109, label %120

109:                                              ; preds = %108
  store i64 %106, i64* %100, align 1
  store i64 %101, i64* %105, align 1
  %110 = load i64, i64* %100, align 1
  %111 = load i64, i64* %102, align 1
  %112 = icmp slt i64 %110, %111
  br i1 %112, label %113, label %120

113:                                              ; preds = %109
  store i64 %110, i64* %102, align 1
  store i64 %111, i64* %100, align 1
  br label %120

114:                                              ; preds = %97
  br i1 %107, label %115, label %116

115:                                              ; preds = %114
  store i64 %106, i64* %102, align 1
  store i64 %103, i64* %105, align 1
  br label %120

116:                                              ; preds = %114
  store i64 %101, i64* %102, align 1
  store i64 %103, i64* %100, align 1
  %117 = load i64, i64* %105, align 1
  %118 = icmp slt i64 %117, %103
  br i1 %118, label %119, label %120

119:                                              ; preds = %116
  store i64 %117, i64* %100, align 1
  store i64 %103, i64* %105, align 1
  br label %120

120:                                              ; preds = %119, %116, %115, %113, %109, %108
  %121 = add i64 %13, 24
  %122 = icmp eq i64 %121, %5
  br i1 %122, label %316, label %123

123:                                              ; preds = %120, %146
  %124 = phi i64 [ %125, %146 ], [ %98, %120 ]
  %125 = phi i64 [ %147, %146 ], [ %121, %120 ]
  %126 = inttoptr i64 %125 to i64*
  %127 = load i64, i64* %126, align 1
  %128 = inttoptr i64 %124 to i64*
  %129 = load i64, i64* %128, align 1
  %130 = icmp slt i64 %127, %129
  br i1 %130, label %131, label %146

131:                                              ; preds = %123, %137
  %132 = phi i64 [ %140, %137 ], [ %129, %123 ]
  %133 = phi i64 [ %138, %137 ], [ %124, %123 ]
  %134 = phi i64 [ %133, %137 ], [ %125, %123 ]
  %135 = inttoptr i64 %134 to i64*
  store i64 %132, i64* %135, align 1
  %136 = icmp eq i64 %133, %13
  br i1 %136, label %144, label %137

137:                                              ; preds = %131
  %138 = add i64 %133, -8
  %139 = inttoptr i64 %138 to i64*
  %140 = load i64, i64* %139, align 1
  %141 = icmp slt i64 %127, %140
  br i1 %141, label %131, label %142

142:                                              ; preds = %137
  %143 = inttoptr i64 %133 to i64*
  br label %144

144:                                              ; preds = %131, %142
  %145 = phi i64* [ %143, %142 ], [ %102, %131 ]
  store i64 %127, i64* %145, align 1
  br label %146

146:                                              ; preds = %144, %123
  %147 = add i64 %125, 8
  %148 = icmp eq i64 %147, %5
  br i1 %148, label %316, label %123

149:                                              ; preds = %95
  %150 = icmp sgt i32 %18, 999
  %151 = lshr i64 %16, 1
  %152 = and i64 %151, 17179869176
  %153 = add i64 %152, %13
  br i1 %150, label %154, label %162

154:                                              ; preds = %149
  %155 = lshr i64 %16, 2
  %156 = and i64 %155, 8589934584
  %157 = add i64 %156, %13
  %158 = add i64 %153, %156
  %159 = tail call i32 @_ZNSt3__17__sort5IRNS_6__lessIllEEN2v88internal13UnalignedSlotIlEEEEjT0_S8_S8_S8_S8_T_(i64 %13, i64 %157, i64 %153, i64 %158, i64 %7, %"struct.std::__1::__less.1191"* dereferenceable(1) %2)
  %160 = inttoptr i64 %13 to i64*
  %161 = inttoptr i64 %153 to i64*
  br label %182

162:                                              ; preds = %149
  %163 = inttoptr i64 %153 to i64*
  %164 = load i64, i64* %163, align 1
  %165 = inttoptr i64 %13 to i64*
  %166 = load i64, i64* %165, align 1
  %167 = icmp slt i64 %164, %166
  %168 = load i64, i64* %8, align 1
  %169 = icmp slt i64 %168, %164
  br i1 %167, label %176, label %170

170:                                              ; preds = %162
  br i1 %169, label %171, label %182

171:                                              ; preds = %170
  store i64 %168, i64* %163, align 1
  store i64 %164, i64* %8, align 1
  %172 = load i64, i64* %163, align 1
  %173 = load i64, i64* %165, align 1
  %174 = icmp slt i64 %172, %173
  br i1 %174, label %175, label %182

175:                                              ; preds = %171
  store i64 %172, i64* %165, align 1
  store i64 %173, i64* %163, align 1
  br label %182

176:                                              ; preds = %162
  br i1 %169, label %177, label %178

177:                                              ; preds = %176
  store i64 %168, i64* %165, align 1
  store i64 %166, i64* %8, align 1
  br label %182

178:                                              ; preds = %176
  store i64 %164, i64* %165, align 1
  store i64 %166, i64* %163, align 1
  %179 = load i64, i64* %8, align 1
  %180 = icmp slt i64 %179, %166
  br i1 %180, label %181, label %182

181:                                              ; preds = %178
  store i64 %179, i64* %163, align 1
  store i64 %166, i64* %8, align 1
  br label %182

182:                                              ; preds = %181, %178, %177, %175, %171, %170, %154
  %183 = phi i64* [ %163, %181 ], [ %163, %178 ], [ %163, %177 ], [ %163, %175 ], [ %163, %171 ], [ %163, %170 ], [ %161, %154 ]
  %184 = phi i64* [ %165, %181 ], [ %165, %178 ], [ %165, %177 ], [ %165, %175 ], [ %165, %171 ], [ %165, %170 ], [ %160, %154 ]
  %185 = phi i32 [ 2, %181 ], [ 1, %178 ], [ 1, %177 ], [ 2, %175 ], [ 1, %171 ], [ 0, %170 ], [ %159, %154 ]
  %186 = load i64, i64* %184, align 1
  %187 = load i64, i64* %183, align 1
  %188 = icmp slt i64 %186, %187
  br i1 %188, label %242, label %189

189:                                              ; preds = %182, %235
  %190 = phi i64 [ %191, %235 ], [ %7, %182 ]
  %191 = add i64 %190, -8
  %192 = icmp eq i64 %13, %191
  br i1 %192, label %193, label %235

193:                                              ; preds = %189
  %194 = add i64 %13, 8
  %195 = load i64, i64* %9, align 1
  %196 = icmp slt i64 %186, %195
  br i1 %196, label %210, label %197

197:                                              ; preds = %193
  %198 = icmp eq i64 %194, %7
  br i1 %198, label %316, label %199

199:                                              ; preds = %197, %207
  %200 = phi i64 [ %208, %207 ], [ %194, %197 ]
  %201 = inttoptr i64 %200 to i64*
  %202 = load i64, i64* %201, align 1
  %203 = icmp slt i64 %186, %202
  br i1 %203, label %204, label %207

204:                                              ; preds = %199
  %205 = inttoptr i64 %200 to i64*
  store i64 %195, i64* %205, align 1
  store i64 %202, i64* %9, align 1
  %206 = add i64 %200, 8
  br label %210

207:                                              ; preds = %199
  %208 = add i64 %200, 8
  %209 = icmp eq i64 %208, %7
  br i1 %209, label %316, label %199

210:                                              ; preds = %193, %204
  %211 = phi i64 [ %194, %193 ], [ %206, %204 ]
  %212 = icmp eq i64 %211, %7
  br i1 %212, label %316, label %213

213:                                              ; preds = %210, %233
  %214 = phi i64 [ %227, %233 ], [ %7, %210 ]
  %215 = phi i64 [ %222, %233 ], [ %211, %210 ]
  %216 = load i64, i64* %184, align 1
  br label %217

217:                                              ; preds = %217, %213
  %218 = phi i64 [ %215, %213 ], [ %222, %217 ]
  %219 = inttoptr i64 %218 to i64*
  %220 = load i64, i64* %219, align 1
  %221 = icmp slt i64 %216, %220
  %222 = add i64 %218, 8
  br i1 %221, label %223, label %217

223:                                              ; preds = %217
  %224 = inttoptr i64 %218 to i64*
  br label %225

225:                                              ; preds = %223, %225
  %226 = phi i64 [ %227, %225 ], [ %214, %223 ]
  %227 = add i64 %226, -8
  %228 = inttoptr i64 %227 to i64*
  %229 = load i64, i64* %228, align 1
  %230 = icmp slt i64 %216, %229
  br i1 %230, label %225, label %231

231:                                              ; preds = %225
  %232 = icmp ult i64 %218, %227
  br i1 %232, label %233, label %12

233:                                              ; preds = %231
  %234 = inttoptr i64 %227 to i64*
  store i64 %229, i64* %224, align 1
  store i64 %220, i64* %234, align 1
  br label %213

235:                                              ; preds = %189
  %236 = inttoptr i64 %191 to i64*
  %237 = load i64, i64* %236, align 1
  %238 = icmp slt i64 %237, %187
  br i1 %238, label %239, label %189

239:                                              ; preds = %235
  %240 = inttoptr i64 %191 to i64*
  store i64 %237, i64* %184, align 1
  store i64 %186, i64* %240, align 1
  %241 = add i32 %185, 1
  br label %242

242:                                              ; preds = %182, %239
  %243 = phi i64 [ %191, %239 ], [ %7, %182 ]
  %244 = phi i32 [ %241, %239 ], [ %185, %182 ]
  %245 = add i64 %13, 8
  %246 = icmp ult i64 %245, %243
  br i1 %246, label %247, label %275

247:                                              ; preds = %242, %270
  %248 = phi i64 [ %264, %270 ], [ %243, %242 ]
  %249 = phi i64 [ %259, %270 ], [ %245, %242 ]
  %250 = phi i64 [ %274, %270 ], [ %153, %242 ]
  %251 = phi i32 [ %272, %270 ], [ %244, %242 ]
  %252 = inttoptr i64 %250 to i64*
  %253 = load i64, i64* %252, align 1
  br label %254

254:                                              ; preds = %254, %247
  %255 = phi i64 [ %249, %247 ], [ %259, %254 ]
  %256 = inttoptr i64 %255 to i64*
  %257 = load i64, i64* %256, align 1
  %258 = icmp slt i64 %257, %253
  %259 = add i64 %255, 8
  br i1 %258, label %254, label %260

260:                                              ; preds = %254
  %261 = inttoptr i64 %255 to i64*
  br label %262

262:                                              ; preds = %260, %262
  %263 = phi i64 [ %264, %262 ], [ %248, %260 ]
  %264 = add i64 %263, -8
  %265 = inttoptr i64 %264 to i64*
  %266 = load i64, i64* %265, align 1
  %267 = icmp slt i64 %266, %253
  br i1 %267, label %268, label %262

268:                                              ; preds = %262
  %269 = icmp ugt i64 %255, %264
  br i1 %269, label %275, label %270

270:                                              ; preds = %268
  %271 = inttoptr i64 %264 to i64*
  store i64 %266, i64* %261, align 1
  store i64 %257, i64* %271, align 1
  %272 = add i32 %251, 1
  %273 = icmp eq i64 %250, %255
  %274 = select i1 %273, i64 %264, i64 %250
  br label %247

275:                                              ; preds = %268, %242
  %276 = phi i64 [ %245, %242 ], [ %255, %268 ]
  %277 = phi i64 [ %153, %242 ], [ %250, %268 ]
  %278 = phi i32 [ %244, %242 ], [ %251, %268 ]
  %279 = icmp eq i64 %276, %277
  br i1 %279, label %288, label %280

280:                                              ; preds = %275
  %281 = inttoptr i64 %277 to i64*
  %282 = load i64, i64* %281, align 1
  %283 = inttoptr i64 %276 to i64*
  %284 = load i64, i64* %283, align 1
  %285 = icmp slt i64 %282, %284
  br i1 %285, label %286, label %288

286:                                              ; preds = %280
  store i64 %282, i64* %283, align 1
  store i64 %284, i64* %281, align 1
  %287 = add i32 %278, 1
  br label %288

288:                                              ; preds = %275, %286, %280
  %289 = phi i32 [ %287, %286 ], [ %278, %280 ], [ %278, %275 ]
  %290 = icmp eq i32 %289, 0
  br i1 %290, label %291, label %298

291:                                              ; preds = %288
  %292 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessIllEEN2v88internal13UnalignedSlotIlEEEEbT0_S8_T_(i64 %13, i64 %276, %"struct.std::__1::__less.1191"* dereferenceable(1) %2)
  %293 = add i64 %276, 8
  %294 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessIllEEN2v88internal13UnalignedSlotIlEEEEbT0_S8_T_(i64 %293, i64 %5, %"struct.std::__1::__less.1191"* dereferenceable(1) %2)
  br i1 %294, label %295, label %297

295:                                              ; preds = %291
  br i1 %292, label %316, label %296

296:                                              ; preds = %295, %314
  br label %4

297:                                              ; preds = %291
  br i1 %292, label %312, label %298

298:                                              ; preds = %297, %288
  %299 = sub i64 %276, %13
  %300 = shl i64 %299, 32
  %301 = ashr exact i64 %300, 32
  %302 = lshr i64 %301, 3
  %303 = trunc i64 %302 to i32
  %304 = sub i64 %5, %276
  %305 = shl i64 %304, 32
  %306 = ashr exact i64 %305, 32
  %307 = lshr i64 %306, 3
  %308 = trunc i64 %307 to i32
  %309 = icmp slt i32 %303, %308
  br i1 %309, label %310, label %314

310:                                              ; preds = %298
  tail call void @_ZNSt3__16__sortIRNS_6__lessIllEEN2v88internal13UnalignedSlotIlEEEEvT0_S8_T_(i64 %13, i64 %276, %"struct.std::__1::__less.1191"* dereferenceable(1) %2)
  %311 = add i64 %276, 8
  br label %312

312:                                              ; preds = %310, %297
  %313 = phi i64 [ %293, %297 ], [ %311, %310 ]
  br label %10

314:                                              ; preds = %298
  %315 = add i64 %276, 8
  tail call void @_ZNSt3__16__sortIRNS_6__lessIllEEN2v88internal13UnalignedSlotIlEEEEvT0_S8_T_(i64 %315, i64 %5, %"struct.std::__1::__less.1191"* dereferenceable(1) %2)
  br label %296

316:                                              ; preds = %295, %210, %12, %12, %197, %207, %146, %120, %88, %84, %80, %75, %49, %46, %45, %43, %39, %38, %19, %26, %89
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort5IRNS_6__lessIllEEN2v88internal13UnalignedSlotIlEEEEjT0_S8_S8_S8_S8_T_(i64, i64, i64, i64, i64, %"struct.std::__1::__less.1191"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %7 = inttoptr i64 %1 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %0 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = icmp slt i64 %8, %10
  %12 = inttoptr i64 %2 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = icmp slt i64 %13, %8
  br i1 %11, label %22, label %15

15:                                               ; preds = %6
  br i1 %14, label %16, label %28

16:                                               ; preds = %15
  store i64 %13, i64* %7, align 1
  store i64 %8, i64* %12, align 1
  %17 = load i64, i64* %7, align 1
  %18 = load i64, i64* %9, align 1
  %19 = icmp slt i64 %17, %18
  br i1 %19, label %20, label %28

20:                                               ; preds = %16
  store i64 %17, i64* %9, align 1
  store i64 %18, i64* %7, align 1
  %21 = load i64, i64* %12, align 1
  br label %28

22:                                               ; preds = %6
  br i1 %14, label %23, label %24

23:                                               ; preds = %22
  store i64 %13, i64* %9, align 1
  store i64 %10, i64* %12, align 1
  br label %28

24:                                               ; preds = %22
  store i64 %8, i64* %9, align 1
  store i64 %10, i64* %7, align 1
  %25 = load i64, i64* %12, align 1
  %26 = icmp slt i64 %25, %10
  br i1 %26, label %27, label %28

27:                                               ; preds = %24
  store i64 %25, i64* %7, align 1
  store i64 %10, i64* %12, align 1
  br label %28

28:                                               ; preds = %27, %24, %23, %20, %16, %15
  %29 = phi i64 [ %10, %23 ], [ %13, %15 ], [ %21, %20 ], [ %8, %16 ], [ %10, %27 ], [ %25, %24 ]
  %30 = phi i32 [ 1, %23 ], [ 0, %15 ], [ 2, %20 ], [ 1, %16 ], [ 2, %27 ], [ 1, %24 ]
  %31 = inttoptr i64 %3 to i64*
  %32 = load i64, i64* %31, align 1
  %33 = icmp slt i64 %32, %29
  br i1 %33, label %34, label %46

34:                                               ; preds = %28
  store i64 %32, i64* %12, align 1
  store i64 %29, i64* %31, align 1
  %35 = add nuw nsw i32 %30, 1
  %36 = load i64, i64* %12, align 1
  %37 = load i64, i64* %7, align 1
  %38 = icmp slt i64 %36, %37
  br i1 %38, label %39, label %46

39:                                               ; preds = %34
  store i64 %36, i64* %7, align 1
  store i64 %37, i64* %12, align 1
  %40 = add nuw nsw i32 %30, 2
  %41 = load i64, i64* %7, align 1
  %42 = load i64, i64* %9, align 1
  %43 = icmp slt i64 %41, %42
  br i1 %43, label %44, label %46

44:                                               ; preds = %39
  store i64 %41, i64* %9, align 1
  store i64 %42, i64* %7, align 1
  %45 = add nuw nsw i32 %30, 3
  br label %46

46:                                               ; preds = %28, %34, %39, %44
  %47 = phi i32 [ %45, %44 ], [ %40, %39 ], [ %35, %34 ], [ %30, %28 ]
  %48 = inttoptr i64 %4 to i64*
  %49 = load i64, i64* %48, align 1
  %50 = load i64, i64* %31, align 1
  %51 = icmp slt i64 %49, %50
  br i1 %51, label %52, label %69

52:                                               ; preds = %46
  store i64 %49, i64* %31, align 1
  store i64 %50, i64* %48, align 1
  %53 = add nuw nsw i32 %47, 1
  %54 = load i64, i64* %31, align 1
  %55 = load i64, i64* %12, align 1
  %56 = icmp slt i64 %54, %55
  br i1 %56, label %57, label %69

57:                                               ; preds = %52
  store i64 %54, i64* %12, align 1
  store i64 %55, i64* %31, align 1
  %58 = add nuw nsw i32 %47, 2
  %59 = load i64, i64* %12, align 1
  %60 = load i64, i64* %7, align 1
  %61 = icmp slt i64 %59, %60
  br i1 %61, label %62, label %69

62:                                               ; preds = %57
  store i64 %59, i64* %7, align 1
  store i64 %60, i64* %12, align 1
  %63 = add nuw nsw i32 %47, 3
  %64 = load i64, i64* %7, align 1
  %65 = load i64, i64* %9, align 1
  %66 = icmp slt i64 %64, %65
  br i1 %66, label %67, label %69

67:                                               ; preds = %62
  store i64 %64, i64* %9, align 1
  store i64 %65, i64* %7, align 1
  %68 = add nuw nsw i32 %47, 4
  br label %69

69:                                               ; preds = %52, %62, %67, %57, %46
  %70 = phi i32 [ %68, %67 ], [ %63, %62 ], [ %58, %57 ], [ %53, %52 ], [ %47, %46 ]
  ret i32 %70
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessIllEEN2v88internal13UnalignedSlotIlEEEEbT0_S8_T_(i64, i64, %"struct.std::__1::__less.1191"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %4 = sub i64 %1, %0
  %5 = shl i64 %4, 32
  %6 = ashr exact i64 %5, 32
  %7 = lshr i64 %6, 3
  %8 = trunc i64 %7 to i32
  switch i32 %8, label %85 [
    i32 0, label %144
    i32 1, label %144
    i32 2, label %9
    i32 3, label %17
    i32 4, label %40
    i32 5, label %79
  ]

9:                                                ; preds = %3
  %10 = add i64 %1, -8
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = inttoptr i64 %0 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = icmp slt i64 %12, %14
  br i1 %15, label %16, label %144

16:                                               ; preds = %9
  store i64 %12, i64* %13, align 1
  store i64 %14, i64* %11, align 1
  br label %144

17:                                               ; preds = %3
  %18 = add i64 %0, 8
  %19 = add i64 %1, -8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 1
  %22 = inttoptr i64 %0 to i64*
  %23 = load i64, i64* %22, align 1
  %24 = icmp slt i64 %21, %23
  %25 = inttoptr i64 %19 to i64*
  %26 = load i64, i64* %25, align 1
  %27 = icmp slt i64 %26, %21
  br i1 %24, label %34, label %28

28:                                               ; preds = %17
  br i1 %27, label %29, label %144

29:                                               ; preds = %28
  store i64 %26, i64* %20, align 1
  store i64 %21, i64* %25, align 1
  %30 = load i64, i64* %20, align 1
  %31 = load i64, i64* %22, align 1
  %32 = icmp slt i64 %30, %31
  br i1 %32, label %33, label %144

33:                                               ; preds = %29
  store i64 %30, i64* %22, align 1
  store i64 %31, i64* %20, align 1
  br label %144

34:                                               ; preds = %17
  br i1 %27, label %35, label %36

35:                                               ; preds = %34
  store i64 %26, i64* %22, align 1
  store i64 %23, i64* %25, align 1
  br label %144

36:                                               ; preds = %34
  store i64 %21, i64* %22, align 1
  store i64 %23, i64* %20, align 1
  %37 = load i64, i64* %25, align 1
  %38 = icmp slt i64 %37, %23
  br i1 %38, label %39, label %144

39:                                               ; preds = %36
  store i64 %37, i64* %20, align 1
  store i64 %23, i64* %25, align 1
  br label %144

40:                                               ; preds = %3
  %41 = add i64 %0, 8
  %42 = add i64 %0, 16
  %43 = add i64 %1, -8
  %44 = inttoptr i64 %41 to i64*
  %45 = load i64, i64* %44, align 1
  %46 = inttoptr i64 %0 to i64*
  %47 = load i64, i64* %46, align 1
  %48 = icmp slt i64 %45, %47
  %49 = inttoptr i64 %42 to i64*
  %50 = load i64, i64* %49, align 1
  %51 = icmp slt i64 %50, %45
  br i1 %48, label %59, label %52

52:                                               ; preds = %40
  br i1 %51, label %53, label %65

53:                                               ; preds = %52
  store i64 %50, i64* %44, align 1
  store i64 %45, i64* %49, align 1
  %54 = load i64, i64* %44, align 1
  %55 = load i64, i64* %46, align 1
  %56 = icmp slt i64 %54, %55
  br i1 %56, label %57, label %65

57:                                               ; preds = %53
  store i64 %54, i64* %46, align 1
  store i64 %55, i64* %44, align 1
  %58 = load i64, i64* %49, align 1
  br label %65

59:                                               ; preds = %40
  br i1 %51, label %60, label %61

60:                                               ; preds = %59
  store i64 %50, i64* %46, align 1
  store i64 %47, i64* %49, align 1
  br label %65

61:                                               ; preds = %59
  store i64 %45, i64* %46, align 1
  store i64 %47, i64* %44, align 1
  %62 = load i64, i64* %49, align 1
  %63 = icmp slt i64 %62, %47
  br i1 %63, label %64, label %65

64:                                               ; preds = %61
  store i64 %62, i64* %44, align 1
  store i64 %47, i64* %49, align 1
  br label %65

65:                                               ; preds = %64, %61, %60, %57, %53, %52
  %66 = phi i64 [ %47, %60 ], [ %50, %52 ], [ %58, %57 ], [ %45, %53 ], [ %47, %64 ], [ %62, %61 ]
  %67 = inttoptr i64 %43 to i64*
  %68 = load i64, i64* %67, align 1
  %69 = icmp slt i64 %68, %66
  br i1 %69, label %70, label %144

70:                                               ; preds = %65
  store i64 %68, i64* %49, align 1
  store i64 %66, i64* %67, align 1
  %71 = load i64, i64* %49, align 1
  %72 = load i64, i64* %44, align 1
  %73 = icmp slt i64 %71, %72
  br i1 %73, label %74, label %144

74:                                               ; preds = %70
  store i64 %71, i64* %44, align 1
  store i64 %72, i64* %49, align 1
  %75 = load i64, i64* %44, align 1
  %76 = load i64, i64* %46, align 1
  %77 = icmp slt i64 %75, %76
  br i1 %77, label %78, label %144

78:                                               ; preds = %74
  store i64 %75, i64* %46, align 1
  store i64 %76, i64* %44, align 1
  br label %144

79:                                               ; preds = %3
  %80 = add i64 %0, 8
  %81 = add i64 %0, 16
  %82 = add i64 %0, 24
  %83 = add i64 %1, -8
  %84 = tail call i32 @_ZNSt3__17__sort5IRNS_6__lessIllEEN2v88internal13UnalignedSlotIlEEEEjT0_S8_S8_S8_S8_T_(i64 %0, i64 %80, i64 %81, i64 %82, i64 %83, %"struct.std::__1::__less.1191"* dereferenceable(1) %2)
  br label %144

85:                                               ; preds = %3
  %86 = add i64 %0, 16
  %87 = add i64 %0, 8
  %88 = inttoptr i64 %87 to i64*
  %89 = load i64, i64* %88, align 1
  %90 = inttoptr i64 %0 to i64*
  %91 = load i64, i64* %90, align 1
  %92 = icmp slt i64 %89, %91
  %93 = inttoptr i64 %86 to i64*
  %94 = load i64, i64* %93, align 1
  %95 = icmp slt i64 %94, %89
  br i1 %92, label %102, label %96

96:                                               ; preds = %85
  br i1 %95, label %97, label %108

97:                                               ; preds = %96
  store i64 %94, i64* %88, align 1
  store i64 %89, i64* %93, align 1
  %98 = load i64, i64* %88, align 1
  %99 = load i64, i64* %90, align 1
  %100 = icmp slt i64 %98, %99
  br i1 %100, label %101, label %108

101:                                              ; preds = %97
  store i64 %98, i64* %90, align 1
  store i64 %99, i64* %88, align 1
  br label %108

102:                                              ; preds = %85
  br i1 %95, label %103, label %104

103:                                              ; preds = %102
  store i64 %94, i64* %90, align 1
  store i64 %91, i64* %93, align 1
  br label %108

104:                                              ; preds = %102
  store i64 %89, i64* %90, align 1
  store i64 %91, i64* %88, align 1
  %105 = load i64, i64* %93, align 1
  %106 = icmp slt i64 %105, %91
  br i1 %106, label %107, label %108

107:                                              ; preds = %104
  store i64 %105, i64* %88, align 1
  store i64 %91, i64* %93, align 1
  br label %108

108:                                              ; preds = %96, %97, %101, %103, %104, %107
  %109 = add i64 %0, 24
  %110 = icmp eq i64 %109, %1
  br i1 %110, label %144, label %111

111:                                              ; preds = %108, %137
  %112 = phi i32 [ %138, %137 ], [ 0, %108 ]
  %113 = phi i64 [ %114, %137 ], [ %86, %108 ]
  %114 = phi i64 [ %139, %137 ], [ %109, %108 ]
  %115 = inttoptr i64 %114 to i64*
  %116 = load i64, i64* %115, align 1
  %117 = inttoptr i64 %113 to i64*
  %118 = load i64, i64* %117, align 1
  %119 = icmp slt i64 %116, %118
  br i1 %119, label %120, label %137

120:                                              ; preds = %111, %126
  %121 = phi i64 [ %129, %126 ], [ %118, %111 ]
  %122 = phi i64 [ %127, %126 ], [ %113, %111 ]
  %123 = phi i64 [ %122, %126 ], [ %114, %111 ]
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 1
  %125 = icmp eq i64 %122, %0
  br i1 %125, label %133, label %126

126:                                              ; preds = %120
  %127 = add i64 %122, -8
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128, align 1
  %130 = icmp slt i64 %116, %129
  br i1 %130, label %120, label %131

131:                                              ; preds = %126
  %132 = inttoptr i64 %122 to i64*
  br label %133

133:                                              ; preds = %120, %131
  %134 = phi i64* [ %132, %131 ], [ %90, %120 ]
  store i64 %116, i64* %134, align 1
  %135 = add i32 %112, 1
  %136 = icmp eq i32 %135, 8
  br i1 %136, label %141, label %137

137:                                              ; preds = %133, %111
  %138 = phi i32 [ %112, %111 ], [ %135, %133 ]
  %139 = add i64 %114, 8
  %140 = icmp eq i64 %139, %1
  br i1 %140, label %144, label %111

141:                                              ; preds = %133
  %142 = add i64 %114, 8
  %143 = icmp eq i64 %142, %1
  br label %144

144:                                              ; preds = %137, %108, %141, %78, %74, %70, %65, %39, %36, %35, %33, %29, %28, %9, %16, %3, %3, %79
  %145 = phi i1 [ true, %79 ], [ true, %3 ], [ true, %3 ], [ true, %16 ], [ true, %9 ], [ true, %28 ], [ true, %29 ], [ true, %33 ], [ true, %35 ], [ true, %36 ], [ true, %39 ], [ true, %65 ], [ true, %70 ], [ true, %74 ], [ true, %78 ], [ %143, %141 ], [ true, %108 ], [ true, %137 ]
  ret i1 %145
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1073205, i32 2146410443}
!4 = !{!"branch_weights", i32 2146410443, i32 1073205}
!5 = !{i8 0, i8 2}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.unroll.disable"}
!8 = distinct !{!8, !7}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !7}
!11 = distinct !{!11, !7}
!12 = distinct !{!12, !7}
!13 = distinct !{!13, !7}
!14 = distinct !{!14, !7}
