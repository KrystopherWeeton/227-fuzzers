; ModuleID = '../../ui/base/x/x11_gl_egl_utility.cc'
source_filename = "../../ui/base/x/x11_gl_egl_utility.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i64*, i64*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.ui::XVisualManager" = type { %"class.std::__1::unordered_map", i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr", %"class.std::__1::__compressed_pair.9", %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.16", [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2", %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { i64 }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { float }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui30GetPlatformExtraDisplayAttribsEjPNSt3__16vectorIlNS0_9allocatorIlEEEE(i32, %"class.std::__1::vector"*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %4 = load i64*, i64** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %6 = load i64*, i64** %5, align 8
  %7 = icmp ult i64* %4, %6
  %8 = ptrtoint i64* %6 to i64
  br i1 %7, label %9, label %13

9:                                                ; preds = %2
  store i64 13455, i64* %4, align 8
  %10 = getelementptr inbounds i64, i64* %4, i64 1
  %11 = ptrtoint i64* %10 to i64
  %12 = bitcast i64** %3 to i64*
  store i64 %11, i64* %12, align 8
  br label %70

13:                                               ; preds = %2
  %14 = ptrtoint i64* %4 to i64
  %15 = bitcast i64** %3 to i64*
  %16 = bitcast %"class.std::__1::vector"* %1 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %14, %17
  %19 = ashr exact i64 %18, 3
  %20 = add nsw i64 %19, 1
  %21 = icmp ugt i64 %20, 2305843009213693951
  br i1 %21, label %22, label %24

22:                                               ; preds = %13
  %23 = bitcast %"class.std::__1::vector"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %23) #7
  unreachable

24:                                               ; preds = %13
  %25 = bitcast i64** %5 to i64*
  %26 = sub i64 %8, %17
  %27 = ashr exact i64 %26, 3
  %28 = icmp ult i64 %27, 1152921504606846975
  br i1 %28, label %29, label %37

29:                                               ; preds = %24
  %30 = ashr exact i64 %26, 2
  %31 = icmp ult i64 %30, %20
  %32 = select i1 %31, i64 %20, i64 %30
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %42, label %34

34:                                               ; preds = %29
  %35 = icmp ugt i64 %32, 2305843009213693951
  br i1 %35, label %36, label %37

36:                                               ; preds = %34
  tail call void @abort() #7
  unreachable

37:                                               ; preds = %34, %24
  %38 = phi i64 [ %32, %34 ], [ 2305843009213693951, %24 ]
  %39 = shl i64 %38, 3
  %40 = tail call i8* @_Znwm(i64 %39) #8
  %41 = bitcast i8* %40 to i64*
  br label %42

42:                                               ; preds = %37, %29
  %43 = phi i64 [ %38, %37 ], [ 0, %29 ]
  %44 = phi i64* [ %41, %37 ], [ null, %29 ]
  %45 = getelementptr inbounds i64, i64* %44, i64 %19
  %46 = getelementptr inbounds i64, i64* %44, i64 %43
  %47 = ptrtoint i64* %46 to i64
  store i64 13455, i64* %45, align 8
  %48 = getelementptr inbounds i64, i64* %45, i64 1
  %49 = ptrtoint i64* %48 to i64
  %50 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %51 = load i64*, i64** %50, align 8
  %52 = load i64, i64* %15, align 8
  %53 = ptrtoint i64* %51 to i64
  %54 = sub i64 %52, %53
  %55 = ashr exact i64 %54, 3
  %56 = sub nsw i64 0, %55
  %57 = getelementptr inbounds i64, i64* %45, i64 %56
  %58 = ptrtoint i64* %57 to i64
  %59 = icmp sgt i64 %54, 0
  br i1 %59, label %60, label %64

60:                                               ; preds = %42
  %61 = bitcast i64* %57 to i8*
  %62 = bitcast i64* %51 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %62, i64 %54, i1 false) #9
  %63 = load i64*, i64** %50, align 8
  br label %64

64:                                               ; preds = %60, %42
  %65 = phi i64* [ %51, %42 ], [ %63, %60 ]
  store i64 %58, i64* %16, align 8
  store i64 %49, i64* %15, align 8
  store i64 %47, i64* %25, align 8
  %66 = icmp eq i64* %65, null
  br i1 %66, label %70, label %67

67:                                               ; preds = %64
  %68 = bitcast i64* %65 to i8*
  tail call void @_ZdlPv(i8* %68) #8
  %69 = load i64*, i64** %3, align 8
  br label %70

70:                                               ; preds = %9, %64, %67
  %71 = phi i64* [ %10, %9 ], [ %48, %64 ], [ %69, %67 ]
  %72 = load i64*, i64** %5, align 8
  %73 = icmp ult i64* %71, %72
  %74 = ptrtoint i64* %72 to i64
  br i1 %73, label %75, label %79

75:                                               ; preds = %70
  store i64 12757, i64* %71, align 8
  %76 = getelementptr inbounds i64, i64* %71, i64 1
  %77 = ptrtoint i64* %76 to i64
  %78 = bitcast i64** %3 to i64*
  store i64 %77, i64* %78, align 8
  br label %135

79:                                               ; preds = %70
  %80 = ptrtoint i64* %71 to i64
  %81 = bitcast i64** %3 to i64*
  %82 = bitcast %"class.std::__1::vector"* %1 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = sub i64 %80, %83
  %85 = ashr exact i64 %84, 3
  %86 = add nsw i64 %85, 1
  %87 = icmp ugt i64 %86, 2305843009213693951
  br i1 %87, label %88, label %90

88:                                               ; preds = %79
  %89 = bitcast %"class.std::__1::vector"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %89) #7
  unreachable

90:                                               ; preds = %79
  %91 = bitcast i64** %5 to i64*
  %92 = sub i64 %74, %83
  %93 = ashr exact i64 %92, 3
  %94 = icmp ult i64 %93, 1152921504606846975
  br i1 %94, label %95, label %103

95:                                               ; preds = %90
  %96 = ashr exact i64 %92, 2
  %97 = icmp ult i64 %96, %86
  %98 = select i1 %97, i64 %86, i64 %96
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %108, label %100

100:                                              ; preds = %95
  %101 = icmp ugt i64 %98, 2305843009213693951
  br i1 %101, label %102, label %103

102:                                              ; preds = %100
  tail call void @abort() #7
  unreachable

103:                                              ; preds = %100, %90
  %104 = phi i64 [ %98, %100 ], [ 2305843009213693951, %90 ]
  %105 = shl i64 %104, 3
  %106 = tail call i8* @_Znwm(i64 %105) #8
  %107 = bitcast i8* %106 to i64*
  br label %108

108:                                              ; preds = %103, %95
  %109 = phi i64 [ %104, %103 ], [ 0, %95 ]
  %110 = phi i64* [ %107, %103 ], [ null, %95 ]
  %111 = getelementptr inbounds i64, i64* %110, i64 %85
  %112 = getelementptr inbounds i64, i64* %110, i64 %109
  %113 = ptrtoint i64* %112 to i64
  store i64 12757, i64* %111, align 8
  %114 = getelementptr inbounds i64, i64* %111, i64 1
  %115 = ptrtoint i64* %114 to i64
  %116 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %117 = load i64*, i64** %116, align 8
  %118 = load i64, i64* %81, align 8
  %119 = ptrtoint i64* %117 to i64
  %120 = sub i64 %118, %119
  %121 = ashr exact i64 %120, 3
  %122 = sub nsw i64 0, %121
  %123 = getelementptr inbounds i64, i64* %111, i64 %122
  %124 = ptrtoint i64* %123 to i64
  %125 = icmp sgt i64 %120, 0
  br i1 %125, label %126, label %130

126:                                              ; preds = %108
  %127 = bitcast i64* %123 to i8*
  %128 = bitcast i64* %117 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %127, i8* align 8 %128, i64 %120, i1 false) #9
  %129 = load i64*, i64** %116, align 8
  br label %130

130:                                              ; preds = %126, %108
  %131 = phi i64* [ %117, %108 ], [ %129, %126 ]
  store i64 %124, i64* %82, align 8
  store i64 %115, i64* %81, align 8
  store i64 %113, i64* %91, align 8
  %132 = icmp eq i64* %131, null
  br i1 %132, label %135, label %133

133:                                              ; preds = %130
  %134 = bitcast i64* %131 to i8*
  tail call void @_ZdlPv(i8* %134) #8
  br label %135

135:                                              ; preds = %75, %130, %133
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui38ChoosePlatformCustomAlphaAndBufferSizeEPiS0_(i32* nocapture, i32* nocapture) local_unnamed_addr #0 {
  %3 = alloca i8, align 1
  %4 = tail call i64 @_ZN2gl12GLSurfaceEGL16GetNativeDisplayEv() #9
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #9
  store i8 -86, i8* %3, align 1
  %7 = tail call %"class.ui::XVisualManager"* @_ZN2ui14XVisualManager11GetInstanceEv() #9
  call void @_ZN2ui14XVisualManager21ChooseVisualForWindowEbPN3x118VisualIdEPhPNS1_8ColorMapEPb(%"class.ui::XVisualManager"* %7, i1 zeroext true, i32* null, i8* nonnull %3, i32* null, i8* null) #9
  %8 = load i8, i8* %3, align 1
  %9 = zext i8 %8 to i32
  store i32 %9, i32* %1, align 4
  %10 = icmp eq i8 %8, 32
  %11 = select i1 %10, i32 8, i32 0
  store i32 %11, i32* %0, align 4
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #9
  br label %12

12:                                               ; preds = %2, %6
  ret void
}

declare i64 @_ZN2gl12GLSurfaceEGL16GetNativeDisplayEv() local_unnamed_addr #2

declare %"class.ui::XVisualManager"* @_ZN2ui14XVisualManager11GetInstanceEv() local_unnamed_addr #2

declare void @_ZN2ui14XVisualManager21ChooseVisualForWindowEbPN3x118VisualIdEPhPNS1_8ColorMapEPb(%"class.ui::XVisualManager"*, i1 zeroext, i32*, i8*, i32*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2ui32IsTransparentBackgroundSupportedEv() local_unnamed_addr #0 {
  %1 = tail call %"class.ui::XVisualManager"* @_ZN2ui14XVisualManager11GetInstanceEv() #9
  %2 = tail call zeroext i1 @_ZNK2ui14XVisualManager19ArgbVisualAvailableEv(%"class.ui::XVisualManager"* %1) #9
  ret i1 %2
}

declare zeroext i1 @_ZNK2ui14XVisualManager19ArgbVisualAvailableEv(%"class.ui::XVisualManager"*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
