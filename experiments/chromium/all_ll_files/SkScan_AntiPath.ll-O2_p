; ModuleID = '../../third_party/skia/src/core/SkScan_AntiPath.cpp'
source_filename = "../../third_party/skia/src/core/SkScan_AntiPath.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkIRect = type { i32, i32, i32, i32 }
%"struct.std::__1::atomic.10" = type { %"struct.std::__1::__atomic_base.11" }
%"struct.std::__1::__atomic_base.11" = type { %"struct.std::__1::__cxx_atomic_impl.12" }
%"struct.std::__1::__cxx_atomic_impl.12" = type { %"struct.std::__1::__cxx_atomic_base_impl.13" }
%"struct.std::__1::__cxx_atomic_base_impl.13" = type { i8 }
%class.SuperBlitter = type <{ %class.BaseSuperBlitter, i32, [4 x i8], i8*, i32, [4 x i8], %class.SkAlphaRuns, i32, [4 x i8] }>
%class.BaseSuperBlitter = type { %class.SkBlitter, %class.SkBlitter*, i32, i32, i32, i32, i32, i32, %struct.SkIRect }
%class.SkBlitter = type { i32 (...)**, %class.SkAutoMalloc }
%class.SkAutoMalloc = type { %"class.std::__1::unique_ptr", i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%class.SkAlphaRuns = type { i16*, i8* }
%class.MaskSuperBlitter = type <{ %class.BaseSuperBlitter, %struct.SkMask, %struct.SkIRect, [257 x i32], [4 x i8] }>
%struct.SkMask = type <{ i8*, %struct.SkIRect, i32, i8, [3 x i8] }>
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.4", %"struct.std::__1::atomic.4", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.2, %class.SkTDArray.3, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.2 = type { i8*, i32, i32 }
%class.SkTDArray.3 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.9 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.4" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.9 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.10", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__cxx_atomic_impl.7" }
%"struct.std::__1::__cxx_atomic_impl.7" = type { %"struct.std::__1::__cxx_atomic_base_impl.8" }
%"struct.std::__1::__cxx_atomic_base_impl.8" = type { i8 }
%class.SkRegion = type { %struct.SkIRect, %"struct.SkRegion::RunHead"* }
%"struct.SkRegion::RunHead" = type opaque
%class.SkScanClipper = type { %class.SkRectClipBlitter, %class.SkRgnClipBlitter, %class.SkBlitter*, %struct.SkIRect* }
%class.SkRectClipBlitter = type { %class.SkBlitter, %class.SkBlitter*, %struct.SkIRect }
%class.SkRgnClipBlitter = type { %class.SkBlitter, %class.SkBlitter*, %class.SkRegion* }
%class.SkRasterClip = type { %class.SkRegion, %class.SkAAClip, i8, i8, i8, %struct.SkIRect*, %class.sk_sp.14 }
%class.SkAAClip = type { %struct.SkIRect, %"struct.SkAAClip::RunHead"* }
%"struct.SkAAClip::RunHead" = type opaque
%class.sk_sp.14 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkAAClipBlitter = type { %class.SkBlitter, %class.SkBlitter*, %class.SkAAClip*, %struct.SkIRect, i16*, i8*, %class.SkAutoSMalloc, i8* }
%class.SkAutoSMalloc = type { i8*, i64, [256 x i32] }
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.15, i32, i32 }
%class.sk_sp.15 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt.16, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt.16 = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.SkISize = type { i32, i32 }

$_ZN16MaskSuperBlitterD2Ev = comdat any

$_ZN12SuperBlitterD2Ev = comdat any

$_ZN12SuperBlitterD0Ev = comdat any

$_ZN16BaseSuperBlitter9blitAntiHEiiPKhPKs = comdat any

$_ZN16BaseSuperBlitter5blitVEiiih = comdat any

$_ZN9SkBlitter10blitAntiH2Eiijj = comdat any

$_ZN9SkBlitter10blitAntiV2Eiijj = comdat any

$_ZNK9SkBlitter20requestRowsPreservedEv = comdat any

$_ZN9SkBlitter15allocBlitMemoryEm = comdat any

$_ZN16MaskSuperBlitterD0Ev = comdat any

$_ZN16BaseSuperBlitterD0Ev = comdat any

$_ZTV16BaseSuperBlitter = comdat any

@_ZTV16BaseSuperBlitter = linkonce_odr hidden unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkBlitter*)* @_ZN9SkBlitterD2Ev to i8*), i8* bitcast (void (%class.BaseSuperBlitter*)* @_ZN16BaseSuperBlitterD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%class.BaseSuperBlitter*, i32, i32, i8*, i16*)* @_ZN16BaseSuperBlitter9blitAntiHEiiPKhPKs to i8*), i8* bitcast (void (%class.BaseSuperBlitter*, i32, i32, i32, i8)* @_ZN16BaseSuperBlitter5blitVEiiih to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32)* @_ZN9SkBlitter8blitRectEiiii to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32, i8, i8)* @_ZN9SkBlitter12blitAntiRectEiiiihh to i8*), i8* bitcast (void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)* @_ZN9SkBlitter8blitMaskERK6SkMaskRK7SkIRect to i8*), i8* bitcast (%class.SkPixmap* (%class.SkBlitter*, i32*)* @_ZN9SkBlitter17justAnOpaqueColorEPj to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32)* @_ZN9SkBlitter10blitAntiH2Eiijj to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32)* @_ZN9SkBlitter10blitAntiV2Eiijj to i8*), i8* bitcast (i1 (%class.SkBlitter*)* @_ZNK9SkBlitter13isNullBlitterEv to i8*), i8* bitcast (i32 (%class.SkBlitter*)* @_ZNK9SkBlitter20requestRowsPreservedEv to i8*), i8* bitcast (i8* (%class.SkBlitter*, i64)* @_ZN9SkBlitter15allocBlitMemoryEm to i8*)] }, comdat, align 8
@_ZTV12SuperBlitter = hidden unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SuperBlitter*)* @_ZN12SuperBlitterD2Ev to i8*), i8* bitcast (void (%class.SuperBlitter*)* @_ZN12SuperBlitterD0Ev to i8*), i8* bitcast (void (%class.SuperBlitter*, i32, i32, i32)* @_ZN12SuperBlitter5blitHEiii to i8*), i8* bitcast (void (%class.BaseSuperBlitter*, i32, i32, i8*, i16*)* @_ZN16BaseSuperBlitter9blitAntiHEiiPKhPKs to i8*), i8* bitcast (void (%class.BaseSuperBlitter*, i32, i32, i32, i8)* @_ZN16BaseSuperBlitter5blitVEiiih to i8*), i8* bitcast (void (%class.SuperBlitter*, i32, i32, i32, i32)* @_ZN12SuperBlitter8blitRectEiiii to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32, i8, i8)* @_ZN9SkBlitter12blitAntiRectEiiiihh to i8*), i8* bitcast (void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)* @_ZN9SkBlitter8blitMaskERK6SkMaskRK7SkIRect to i8*), i8* bitcast (%class.SkPixmap* (%class.SkBlitter*, i32*)* @_ZN9SkBlitter17justAnOpaqueColorEPj to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32)* @_ZN9SkBlitter10blitAntiH2Eiijj to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32)* @_ZN9SkBlitter10blitAntiV2Eiijj to i8*), i8* bitcast (i1 (%class.SkBlitter*)* @_ZNK9SkBlitter13isNullBlitterEv to i8*), i8* bitcast (i32 (%class.SkBlitter*)* @_ZNK9SkBlitter20requestRowsPreservedEv to i8*), i8* bitcast (i8* (%class.SkBlitter*, i64)* @_ZN9SkBlitter15allocBlitMemoryEm to i8*)] }, align 8
@_ZTV16MaskSuperBlitter = hidden unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.MaskSuperBlitter*)* @_ZN16MaskSuperBlitterD2Ev to i8*), i8* bitcast (void (%class.MaskSuperBlitter*)* @_ZN16MaskSuperBlitterD0Ev to i8*), i8* bitcast (void (%class.MaskSuperBlitter*, i32, i32, i32)* @_ZN16MaskSuperBlitter5blitHEiii to i8*), i8* bitcast (void (%class.BaseSuperBlitter*, i32, i32, i8*, i16*)* @_ZN16BaseSuperBlitter9blitAntiHEiiPKhPKs to i8*), i8* bitcast (void (%class.BaseSuperBlitter*, i32, i32, i32, i8)* @_ZN16BaseSuperBlitter5blitVEiiih to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32)* @_ZN9SkBlitter8blitRectEiiii to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32, i8, i8)* @_ZN9SkBlitter12blitAntiRectEiiiihh to i8*), i8* bitcast (void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)* @_ZN9SkBlitter8blitMaskERK6SkMaskRK7SkIRect to i8*), i8* bitcast (%class.SkPixmap* (%class.SkBlitter*, i32*)* @_ZN9SkBlitter17justAnOpaqueColorEPj to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32)* @_ZN9SkBlitter10blitAntiH2Eiijj to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32)* @_ZN9SkBlitter10blitAntiV2Eiijj to i8*), i8* bitcast (i1 (%class.SkBlitter*)* @_ZNK9SkBlitter13isNullBlitterEv to i8*), i8* bitcast (i32 (%class.SkBlitter*)* @_ZNK9SkBlitter20requestRowsPreservedEv to i8*), i8* bitcast (i8* (%class.SkBlitter*, i64)* @_ZN9SkBlitter15allocBlitMemoryEm to i8*)] }, align 8
@__const._ZN6SkScan12AntiFillPathERK6SkPathRK8SkRegionP9SkBlitterb.limit = private unnamed_addr constant %struct.SkIRect { i32 0, i32 0, i32 32767, i32 32767 }, align 4
@.ref.tmp = private constant %struct.SkIRect { i32 -536870911, i32 -536870911, i32 536870911, i32 536870911 }, align 4
@gSkForceAnalyticAA = external local_unnamed_addr global %"struct.std::__1::atomic.10", align 1
@gSkUseAnalyticAA = external local_unnamed_addr global %"struct.std::__1::atomic.10", align 1
@_ZTV15SkAAClipBlitter = external unnamed_addr constant { [16 x i8*] }, align 8

@_ZN12SuperBlitterC1EP9SkBlitterRK7SkIRectS4_b = hidden unnamed_addr alias void (%class.SuperBlitter*, %class.SkBlitter*, %struct.SkIRect*, %struct.SkIRect*, i1), void (%class.SuperBlitter*, %class.SkBlitter*, %struct.SkIRect*, %struct.SkIRect*, i1)* @_ZN12SuperBlitterC2EP9SkBlitterRK7SkIRectS4_b
@_ZN16MaskSuperBlitterC1EP9SkBlitterRK7SkIRectS4_b = hidden unnamed_addr alias void (%class.MaskSuperBlitter*, %class.SkBlitter*, %struct.SkIRect*, %struct.SkIRect*, i1), void (%class.MaskSuperBlitter*, %class.SkBlitter*, %struct.SkIRect*, %struct.SkIRect*, i1)* @_ZN16MaskSuperBlitterC2EP9SkBlitterRK7SkIRectS4_b

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16BaseSuperBlitterC2EP9SkBlitterRK7SkIRectS4_b(%class.BaseSuperBlitter* nocapture, %class.SkBlitter*, %struct.SkIRect* dereferenceable(16), %struct.SkIRect* dereferenceable(16), i1 zeroext) unnamed_addr #0 align 2 {
  %6 = alloca %struct.SkIRect, align 4
  %7 = getelementptr inbounds %class.BaseSuperBlitter, %class.BaseSuperBlitter* %0, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %class.BaseSuperBlitter, %class.BaseSuperBlitter* %0, i64 0, i32 0, i32 1
  %9 = bitcast %class.SkAutoMalloc* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 16, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV16BaseSuperBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %10 = getelementptr inbounds %class.BaseSuperBlitter, %class.BaseSuperBlitter* %0, i64 0, i32 1
  store %class.SkBlitter* %1, %class.SkBlitter** %10, align 8
  %11 = bitcast %struct.SkIRect* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #10
  %12 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %6, i64 0, i32 0
  %13 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %6, i64 0, i32 1
  %14 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %6, i64 0, i32 2
  %15 = bitcast %struct.SkIRect* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %15, i8 -86, i64 16, i1 false)
  br i1 %4, label %16, label %18

16:                                               ; preds = %5
  %17 = bitcast %struct.SkIRect* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %11, i8* align 4 %17, i64 16, i1 false)
  br label %21

18:                                               ; preds = %5
  %19 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %6, %struct.SkIRect* dereferenceable(16) %2, %struct.SkIRect* dereferenceable(16) %3) #10
  br i1 %19, label %21, label %20

20:                                               ; preds = %18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %11, i8 0, i64 16, i1 false) #10
  br label %21

21:                                               ; preds = %18, %20, %16
  %22 = load i32, i32* %12, align 4
  %23 = load i32, i32* %14, align 4
  %24 = getelementptr inbounds %class.BaseSuperBlitter, %class.BaseSuperBlitter* %0, i64 0, i32 4
  store i32 %22, i32* %24, align 8
  %25 = shl i32 %22, 2
  %26 = getelementptr inbounds %class.BaseSuperBlitter, %class.BaseSuperBlitter* %0, i64 0, i32 5
  store i32 %25, i32* %26, align 4
  %27 = sub nsw i32 %23, %22
  %28 = getelementptr inbounds %class.BaseSuperBlitter, %class.BaseSuperBlitter* %0, i64 0, i32 3
  store i32 %27, i32* %28, align 4
  %29 = load i32, i32* %13, align 4
  %30 = getelementptr inbounds %class.BaseSuperBlitter, %class.BaseSuperBlitter* %0, i64 0, i32 7
  store i32 %29, i32* %30, align 4
  %31 = add nsw i32 %29, -1
  %32 = getelementptr inbounds %class.BaseSuperBlitter, %class.BaseSuperBlitter* %0, i64 0, i32 2
  store i32 %31, i32* %32, align 8
  %33 = shl i32 %29, 2
  %34 = add nsw i32 %33, -1
  %35 = getelementptr inbounds %class.BaseSuperBlitter, %class.BaseSuperBlitter* %0, i64 0, i32 6
  store i32 %34, i32* %35, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect*, %struct.SkIRect* dereferenceable(16), %struct.SkIRect* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SuperBlitterC2EP9SkBlitterRK7SkIRectS4_b(%class.SuperBlitter*, %class.SkBlitter*, %struct.SkIRect* dereferenceable(16), %struct.SkIRect* dereferenceable(16), i1 zeroext) unnamed_addr #0 align 2 {
  %6 = alloca %struct.SkIRect, align 4
  %7 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 0, i32 1
  %9 = bitcast %class.SkAutoMalloc* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 16, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV16BaseSuperBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %10 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 1
  store %class.SkBlitter* %1, %class.SkBlitter** %10, align 8
  %11 = bitcast %struct.SkIRect* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #10
  %12 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %6, i64 0, i32 0
  %13 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %6, i64 0, i32 1
  %14 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %6, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %11, i8 -86, i64 16, i1 false) #10
  br i1 %4, label %15, label %17

15:                                               ; preds = %5
  %16 = bitcast %struct.SkIRect* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %11, i8* align 4 %16, i64 16, i1 false) #10
  br label %20

17:                                               ; preds = %5
  %18 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %6, %struct.SkIRect* dereferenceable(16) %2, %struct.SkIRect* dereferenceable(16) %3) #10
  br i1 %18, label %20, label %19

19:                                               ; preds = %17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %11, i8 0, i64 16, i1 false) #10
  br label %20

20:                                               ; preds = %15, %17, %19
  %21 = load i32, i32* %12, align 4
  %22 = load i32, i32* %14, align 4
  %23 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 4
  store i32 %21, i32* %23, align 8
  %24 = shl i32 %21, 2
  %25 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 5
  store i32 %24, i32* %25, align 4
  %26 = sub nsw i32 %22, %21
  %27 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 3
  store i32 %26, i32* %27, align 4
  %28 = load i32, i32* %13, align 4
  %29 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 7
  store i32 %28, i32* %29, align 4
  %30 = add nsw i32 %28, -1
  %31 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 2
  store i32 %30, i32* %31, align 8
  %32 = shl i32 %28, 2
  %33 = add nsw i32 %32, -1
  %34 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 6
  store i32 %33, i32* %34, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV12SuperBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %35 = bitcast %class.SkBlitter* %1 to i32 (%class.SkBlitter*)***
  %36 = load i32 (%class.SkBlitter*)**, i32 (%class.SkBlitter*)*** %35, align 8
  %37 = getelementptr inbounds i32 (%class.SkBlitter*)*, i32 (%class.SkBlitter*)** %36, i64 12
  %38 = load i32 (%class.SkBlitter*)*, i32 (%class.SkBlitter*)** %37, align 8
  %39 = call i32 %38(%class.SkBlitter* %1) #10
  %40 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 1
  store i32 %39, i32* %40, align 8
  %41 = load i32, i32* %27, align 4
  %42 = add nsw i32 %41, 1
  %43 = add nsw i32 %41, 2
  %44 = sdiv i32 %43, 2
  %45 = add nsw i32 %42, %44
  %46 = shl i32 %39, 1
  %47 = mul i32 %46, %45
  %48 = sext i32 %47 to i64
  %49 = bitcast %class.SkBlitter* %1 to i8* (%class.SkBlitter*, i64)***
  %50 = load i8* (%class.SkBlitter*, i64)**, i8* (%class.SkBlitter*, i64)*** %49, align 8
  %51 = getelementptr inbounds i8* (%class.SkBlitter*, i64)*, i8* (%class.SkBlitter*, i64)** %50, i64 13
  %52 = load i8* (%class.SkBlitter*, i64)*, i8* (%class.SkBlitter*, i64)** %51, align 8
  %53 = call i8* %52(%class.SkBlitter* %1, i64 %48) #10
  %54 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 3
  store i8* %53, i8** %54, align 8
  %55 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 4
  %56 = load i32, i32* %27, align 4
  store i32 0, i32* %55, align 8
  %57 = bitcast i8* %53 to i16*
  %58 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 6
  %59 = bitcast %class.SkAlphaRuns* %58 to i8**
  store i8* %53, i8** %59, align 8
  %60 = sext i32 %56 to i64
  %61 = getelementptr inbounds i16, i16* %57, i64 %60
  %62 = getelementptr inbounds i16, i16* %61, i64 1
  %63 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 6, i32 1
  %64 = bitcast i8** %63 to i16**
  store i16* %62, i16** %64, align 8
  call void @_ZN11SkAlphaRuns5resetEi(%class.SkAlphaRuns* %58, i32 %56) #10
  %65 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 7
  store i32 0, i32* %65, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SuperBlitter5flushEv(%class.SuperBlitter*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 2
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 7
  %5 = load i32, i32* %4, align 4
  %6 = icmp slt i32 %3, %5
  br i1 %6, label %60, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 6
  %9 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 6, i32 1
  %10 = load i8*, i8** %9, align 8
  %11 = load i8, i8* %10, align 1
  %12 = icmp eq i8 %11, 0
  %13 = getelementptr inbounds %class.SkAlphaRuns, %class.SkAlphaRuns* %8, i64 0, i32 0
  %14 = load i16*, i16** %13, align 8
  br i1 %12, label %15, label %21

15:                                               ; preds = %7
  %16 = load i16, i16* %14, align 2
  %17 = sext i16 %16 to i64
  %18 = getelementptr inbounds i16, i16* %14, i64 %17
  %19 = load i16, i16* %18, align 2
  %20 = icmp eq i16 %19, 0
  br i1 %20, label %57, label %21

21:                                               ; preds = %7, %15
  %22 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 1
  %23 = load %class.SkBlitter*, %class.SkBlitter** %22, align 8
  %24 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 4
  %25 = load i32, i32* %24, align 8
  %26 = bitcast %class.SkBlitter* %23 to void (%class.SkBlitter*, i32, i32, i8*, i16*)***
  %27 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)**, void (%class.SkBlitter*, i32, i32, i8*, i16*)*** %26, align 8
  %28 = getelementptr inbounds void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %27, i64 3
  %29 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %28, align 8
  tail call void %29(%class.SkBlitter* %23, i32 %25, i32 %3, i8* %10, i16* %14) #10
  %30 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 3
  %31 = load i32, i32* %30, align 4
  %32 = add nsw i32 %31, 1
  %33 = add nsw i32 %31, 2
  %34 = sdiv i32 %33, 2
  %35 = add nsw i32 %32, %34
  %36 = shl i32 %35, 1
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 4
  %39 = load i32, i32* %38, align 8
  %40 = add nsw i32 %39, 1
  %41 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 1
  %42 = load i32, i32* %41, align 8
  %43 = srem i32 %40, %42
  store i32 %43, i32* %38, align 8
  %44 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 3
  %45 = load i8*, i8** %44, align 8
  %46 = sext i32 %43 to i64
  %47 = mul nsw i64 %37, %46
  %48 = getelementptr inbounds i8, i8* %45, i64 %47
  %49 = bitcast i8* %48 to i16*
  %50 = bitcast %class.SkAlphaRuns* %8 to i8**
  store i8* %48, i8** %50, align 8
  %51 = sext i32 %31 to i64
  %52 = getelementptr inbounds i16, i16* %49, i64 %51
  %53 = getelementptr inbounds i16, i16* %52, i64 1
  %54 = bitcast i8** %9 to i16**
  store i16* %53, i16** %54, align 8
  tail call void @_ZN11SkAlphaRuns5resetEi(%class.SkAlphaRuns* %8, i32 %31) #10
  %55 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 7
  store i32 0, i32* %55, align 8
  %56 = load i32, i32* %4, align 4
  br label %57

57:                                               ; preds = %21, %15
  %58 = phi i32 [ %56, %21 ], [ %5, %15 ]
  %59 = add nsw i32 %58, -1
  store i32 %59, i32* %2, align 8
  br label %60

60:                                               ; preds = %1, %57
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SuperBlitter5blitHEiii(%class.SuperBlitter*, i32, i32, i32) unnamed_addr #0 align 2 {
  %5 = ashr i32 %2, 2
  %6 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 5
  %7 = load i32, i32* %6, align 4
  %8 = sub nsw i32 %1, %7
  %9 = icmp slt i32 %8, 0
  %10 = select i1 %9, i32 %8, i32 0
  %11 = add nsw i32 %10, %3
  %12 = select i1 %9, i32 0, i32 %8
  %13 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 6
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, %2
  br i1 %15, label %18, label %16

16:                                               ; preds = %4
  %17 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 7
  store i32 0, i32* %17, align 8
  store i32 %2, i32* %13, align 8
  br label %18

18:                                               ; preds = %4, %16
  %19 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 2
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %5, %20
  br i1 %21, label %23, label %22

22:                                               ; preds = %18
  tail call void @_ZN12SuperBlitter5flushEv(%class.SuperBlitter* %0)
  store i32 %5, i32* %19, align 8
  br label %23

23:                                               ; preds = %18, %22
  %24 = add nsw i32 %11, %12
  %25 = and i32 %12, 3
  %26 = and i32 %24, 3
  %27 = ashr i32 %24, 2
  %28 = lshr i32 %12, 2
  %29 = sub nsw i32 %27, %28
  %30 = icmp slt i32 %29, 1
  br i1 %30, label %31, label %33

31:                                               ; preds = %23
  %32 = sub nsw i32 %26, %25
  br label %41

33:                                               ; preds = %23
  %34 = icmp eq i32 %25, 0
  %35 = sub nuw nsw i32 4, %25
  %36 = xor i1 %34, true
  %37 = zext i1 %36 to i32
  %38 = sub nuw nsw i32 %29, %37
  %39 = shl nuw nsw i32 %26, 4
  %40 = select i1 %34, i32 0, i32 %35
  br label %41

41:                                               ; preds = %33, %31
  %42 = phi i32 [ %32, %31 ], [ %40, %33 ]
  %43 = phi i32 [ 0, %31 ], [ %39, %33 ]
  %44 = phi i32 [ 0, %31 ], [ %38, %33 ]
  %45 = shl nsw i32 %42, 4
  %46 = and i32 %2, 3
  %47 = add nuw nsw i32 %46, 1
  %48 = lshr i32 %47, 2
  %49 = sub nuw nsw i32 64, %48
  %50 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 7
  %51 = load i32, i32* %50, align 8
  %52 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 6, i32 0
  %53 = load i16*, i16** %52, align 8
  %54 = sext i32 %51 to i64
  %55 = getelementptr inbounds i16, i16* %53, i64 %54
  %56 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 6, i32 1
  %57 = load i8*, i8** %56, align 8
  %58 = getelementptr inbounds i8, i8* %57, i64 %54
  %59 = sub nsw i32 %28, %51
  %60 = icmp eq i32 %42, 0
  br i1 %60, label %128, label %61

61:                                               ; preds = %41
  %62 = sext i32 %59 to i64
  %63 = getelementptr inbounds i16, i16* %55, i64 %62
  %64 = getelementptr inbounds i8, i8* %58, i64 %62
  %65 = icmp sgt i32 %59, 0
  br i1 %65, label %66, label %86

66:                                               ; preds = %61, %80
  %67 = phi i16* [ %82, %80 ], [ %55, %61 ]
  %68 = phi i32 [ %84, %80 ], [ %59, %61 ]
  %69 = phi i8* [ %83, %80 ], [ %58, %61 ]
  %70 = load i16, i16* %67, align 2
  %71 = sext i16 %70 to i32
  %72 = icmp slt i32 %68, %71
  br i1 %72, label %73, label %80

73:                                               ; preds = %66
  %74 = load i8, i8* %69, align 1
  %75 = sext i32 %68 to i64
  %76 = getelementptr inbounds i8, i8* %69, i64 %75
  store i8 %74, i8* %76, align 1
  %77 = trunc i32 %68 to i16
  store i16 %77, i16* %67, align 2
  %78 = sub i16 %70, %77
  %79 = getelementptr inbounds i16, i16* %67, i64 %75
  store i16 %78, i16* %79, align 2
  br label %86

80:                                               ; preds = %66
  %81 = sext i16 %70 to i64
  %82 = getelementptr inbounds i16, i16* %67, i64 %81
  %83 = getelementptr inbounds i8, i8* %69, i64 %81
  %84 = sub nsw i32 %68, %71
  %85 = icmp sgt i32 %84, 0
  br i1 %85, label %66, label %86

86:                                               ; preds = %80, %73, %61
  %87 = load i16, i16* %63, align 2
  %88 = icmp sgt i16 %87, 1
  br i1 %88, label %91, label %89

89:                                               ; preds = %86
  %90 = sext i16 %87 to i32
  br label %102

91:                                               ; preds = %110, %86
  %92 = phi i8* [ %64, %86 ], [ %113, %110 ]
  %93 = phi i32 [ 1, %86 ], [ %108, %110 ]
  %94 = phi i16* [ %63, %86 ], [ %112, %110 ]
  %95 = phi i16 [ %87, %86 ], [ %114, %110 ]
  %96 = load i8, i8* %92, align 1
  %97 = sext i32 %93 to i64
  %98 = getelementptr inbounds i8, i8* %92, i64 %97
  store i8 %96, i8* %98, align 1
  %99 = trunc i32 %93 to i16
  store i16 %99, i16* %94, align 2
  %100 = sub i16 %95, %99
  %101 = getelementptr inbounds i16, i16* %94, i64 %97
  store i16 %100, i16* %101, align 2
  br label %117

102:                                              ; preds = %110, %89
  %103 = phi i32 [ %115, %110 ], [ %90, %89 ]
  %104 = phi i16 [ %114, %110 ], [ %87, %89 ]
  %105 = phi i16* [ %112, %110 ], [ %63, %89 ]
  %106 = phi i32 [ %108, %110 ], [ 1, %89 ]
  %107 = phi i8* [ %113, %110 ], [ %64, %89 ]
  %108 = sub nsw i32 %106, %103
  %109 = icmp slt i32 %108, 1
  br i1 %109, label %117, label %110

110:                                              ; preds = %102
  %111 = sext i16 %104 to i64
  %112 = getelementptr inbounds i16, i16* %105, i64 %111
  %113 = getelementptr inbounds i8, i8* %107, i64 %111
  %114 = load i16, i16* %112, align 2
  %115 = sext i16 %114 to i32
  %116 = icmp slt i32 %108, %115
  br i1 %116, label %91, label %102

117:                                              ; preds = %102, %91
  %118 = load i8, i8* %64, align 1
  %119 = zext i8 %118 to i32
  %120 = add nsw i32 %45, %119
  %121 = lshr i32 %120, 8
  %122 = sub nsw i32 %120, %121
  %123 = trunc i32 %122 to i8
  store i8 %123, i8* %64, align 1
  %124 = add nsw i32 %59, 1
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds i16, i16* %55, i64 %125
  %127 = getelementptr inbounds i8, i8* %58, i64 %125
  br label %128

128:                                              ; preds = %117, %41
  %129 = phi i16* [ %126, %117 ], [ %55, %41 ]
  %130 = phi i8* [ %127, %117 ], [ %58, %41 ]
  %131 = phi i32 [ 0, %117 ], [ %59, %41 ]
  %132 = icmp eq i32 %44, 0
  br i1 %132, label %206, label %133

133:                                              ; preds = %128
  %134 = sext i32 %131 to i64
  %135 = getelementptr inbounds i16, i16* %129, i64 %134
  %136 = getelementptr inbounds i8, i8* %130, i64 %134
  %137 = icmp sgt i32 %131, 0
  br i1 %137, label %138, label %158

138:                                              ; preds = %133, %152
  %139 = phi i16* [ %154, %152 ], [ %129, %133 ]
  %140 = phi i32 [ %156, %152 ], [ %131, %133 ]
  %141 = phi i8* [ %155, %152 ], [ %130, %133 ]
  %142 = load i16, i16* %139, align 2
  %143 = sext i16 %142 to i32
  %144 = icmp slt i32 %140, %143
  br i1 %144, label %145, label %152

145:                                              ; preds = %138
  %146 = load i8, i8* %141, align 1
  %147 = sext i32 %140 to i64
  %148 = getelementptr inbounds i8, i8* %141, i64 %147
  store i8 %146, i8* %148, align 1
  %149 = trunc i32 %140 to i16
  store i16 %149, i16* %139, align 2
  %150 = sub i16 %142, %149
  %151 = getelementptr inbounds i16, i16* %139, i64 %147
  store i16 %150, i16* %151, align 2
  br label %158

152:                                              ; preds = %138
  %153 = sext i16 %142 to i64
  %154 = getelementptr inbounds i16, i16* %139, i64 %153
  %155 = getelementptr inbounds i8, i8* %141, i64 %153
  %156 = sub nsw i32 %140, %143
  %157 = icmp sgt i32 %156, 0
  br i1 %157, label %138, label %158

158:                                              ; preds = %152, %145, %133
  %159 = load i16, i16* %135, align 2
  %160 = sext i16 %159 to i32
  %161 = icmp slt i32 %44, %160
  br i1 %161, label %162, label %174

162:                                              ; preds = %182, %158
  %163 = phi i8* [ %136, %158 ], [ %185, %182 ]
  %164 = phi i32 [ %44, %158 ], [ %180, %182 ]
  %165 = phi i16* [ %135, %158 ], [ %184, %182 ]
  %166 = phi i16 [ %159, %158 ], [ %186, %182 ]
  %167 = load i8, i8* %163, align 1
  %168 = sext i32 %164 to i64
  %169 = getelementptr inbounds i8, i8* %163, i64 %168
  store i8 %167, i8* %169, align 1
  %170 = trunc i32 %164 to i16
  store i16 %170, i16* %165, align 2
  %171 = sub i16 %166, %170
  %172 = getelementptr inbounds i16, i16* %165, i64 %168
  store i16 %171, i16* %172, align 2
  br label %173

173:                                              ; preds = %174, %162
  br label %189

174:                                              ; preds = %158, %182
  %175 = phi i32 [ %187, %182 ], [ %160, %158 ]
  %176 = phi i16 [ %186, %182 ], [ %159, %158 ]
  %177 = phi i16* [ %184, %182 ], [ %135, %158 ]
  %178 = phi i32 [ %180, %182 ], [ %44, %158 ]
  %179 = phi i8* [ %185, %182 ], [ %136, %158 ]
  %180 = sub nsw i32 %178, %175
  %181 = icmp slt i32 %180, 1
  br i1 %181, label %173, label %182

182:                                              ; preds = %174
  %183 = sext i16 %176 to i64
  %184 = getelementptr inbounds i16, i16* %177, i64 %183
  %185 = getelementptr inbounds i8, i8* %179, i64 %183
  %186 = load i16, i16* %184, align 2
  %187 = sext i16 %186 to i32
  %188 = icmp slt i32 %180, %187
  br i1 %188, label %162, label %174

189:                                              ; preds = %173, %189
  %190 = phi i16* [ %203, %189 ], [ %135, %173 ]
  %191 = phi i8* [ %202, %189 ], [ %136, %173 ]
  %192 = phi i32 [ %204, %189 ], [ %44, %173 ]
  %193 = load i8, i8* %191, align 1
  %194 = zext i8 %193 to i32
  %195 = add nuw nsw i32 %49, %194
  %196 = lshr i32 %195, 8
  %197 = sub nsw i32 %195, %196
  %198 = trunc i32 %197 to i8
  store i8 %198, i8* %191, align 1
  %199 = load i16, i16* %190, align 2
  %200 = sext i16 %199 to i32
  %201 = sext i16 %199 to i64
  %202 = getelementptr inbounds i8, i8* %191, i64 %201
  %203 = getelementptr inbounds i16, i16* %190, i64 %201
  %204 = sub nsw i32 %192, %200
  %205 = icmp sgt i32 %204, 0
  br i1 %205, label %189, label %206

206:                                              ; preds = %189, %128
  %207 = phi i16* [ %129, %128 ], [ %203, %189 ]
  %208 = phi i8* [ %130, %128 ], [ %202, %189 ]
  %209 = phi i8* [ %58, %128 ], [ %202, %189 ]
  %210 = phi i32 [ %131, %128 ], [ 0, %189 ]
  %211 = icmp eq i32 %43, 0
  br i1 %211, label %272, label %212

212:                                              ; preds = %206
  %213 = sext i32 %210 to i64
  %214 = getelementptr inbounds i16, i16* %207, i64 %213
  %215 = getelementptr inbounds i8, i8* %208, i64 %213
  %216 = icmp sgt i32 %210, 0
  br i1 %216, label %217, label %237

217:                                              ; preds = %212, %231
  %218 = phi i16* [ %233, %231 ], [ %207, %212 ]
  %219 = phi i32 [ %235, %231 ], [ %210, %212 ]
  %220 = phi i8* [ %234, %231 ], [ %208, %212 ]
  %221 = load i16, i16* %218, align 2
  %222 = sext i16 %221 to i32
  %223 = icmp slt i32 %219, %222
  br i1 %223, label %224, label %231

224:                                              ; preds = %217
  %225 = load i8, i8* %220, align 1
  %226 = sext i32 %219 to i64
  %227 = getelementptr inbounds i8, i8* %220, i64 %226
  store i8 %225, i8* %227, align 1
  %228 = trunc i32 %219 to i16
  store i16 %228, i16* %218, align 2
  %229 = sub i16 %221, %228
  %230 = getelementptr inbounds i16, i16* %218, i64 %226
  store i16 %229, i16* %230, align 2
  br label %237

231:                                              ; preds = %217
  %232 = sext i16 %221 to i64
  %233 = getelementptr inbounds i16, i16* %218, i64 %232
  %234 = getelementptr inbounds i8, i8* %220, i64 %232
  %235 = sub nsw i32 %219, %222
  %236 = icmp sgt i32 %235, 0
  br i1 %236, label %217, label %237

237:                                              ; preds = %231, %224, %212
  %238 = load i16, i16* %214, align 2
  %239 = icmp sgt i16 %238, 1
  br i1 %239, label %242, label %240

240:                                              ; preds = %237
  %241 = sext i16 %238 to i32
  br label %253

242:                                              ; preds = %261, %237
  %243 = phi i8* [ %215, %237 ], [ %264, %261 ]
  %244 = phi i32 [ 1, %237 ], [ %259, %261 ]
  %245 = phi i16* [ %214, %237 ], [ %263, %261 ]
  %246 = phi i16 [ %238, %237 ], [ %265, %261 ]
  %247 = load i8, i8* %243, align 1
  %248 = sext i32 %244 to i64
  %249 = getelementptr inbounds i8, i8* %243, i64 %248
  store i8 %247, i8* %249, align 1
  %250 = trunc i32 %244 to i16
  store i16 %250, i16* %245, align 2
  %251 = sub i16 %246, %250
  %252 = getelementptr inbounds i16, i16* %245, i64 %248
  store i16 %251, i16* %252, align 2
  br label %268

253:                                              ; preds = %261, %240
  %254 = phi i32 [ %266, %261 ], [ %241, %240 ]
  %255 = phi i16 [ %265, %261 ], [ %238, %240 ]
  %256 = phi i16* [ %263, %261 ], [ %214, %240 ]
  %257 = phi i32 [ %259, %261 ], [ 1, %240 ]
  %258 = phi i8* [ %264, %261 ], [ %215, %240 ]
  %259 = sub nsw i32 %257, %254
  %260 = icmp slt i32 %259, 1
  br i1 %260, label %268, label %261

261:                                              ; preds = %253
  %262 = sext i16 %255 to i64
  %263 = getelementptr inbounds i16, i16* %256, i64 %262
  %264 = getelementptr inbounds i8, i8* %258, i64 %262
  %265 = load i16, i16* %263, align 2
  %266 = sext i16 %265 to i32
  %267 = icmp slt i32 %259, %266
  br i1 %267, label %242, label %253

268:                                              ; preds = %253, %242
  %269 = load i8, i8* %215, align 1
  %270 = trunc i32 %43 to i8
  %271 = add i8 %269, %270
  store i8 %271, i8* %215, align 1
  br label %272

272:                                              ; preds = %206, %268
  %273 = phi i8* [ %215, %268 ], [ %209, %206 ]
  %274 = bitcast i8** %56 to i64*
  %275 = load i64, i64* %274, align 8
  %276 = ptrtoint i8* %273 to i64
  %277 = sub i64 %276, %275
  %278 = trunc i64 %277 to i32
  store i32 %278, i32* %50, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SuperBlitter8blitRectEiiii(%class.SuperBlitter*, i32, i32, i32, i32) unnamed_addr #0 align 2 {
  %6 = bitcast %class.SuperBlitter* %0 to void (%class.SuperBlitter*, i32, i32, i32)***
  br label %7

7:                                                ; preds = %12, %5
  %8 = phi i32 [ %4, %5 ], [ %17, %12 ]
  %9 = phi i32 [ %2, %5 ], [ %13, %12 ]
  %10 = and i32 %9, 3
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %19, label %12

12:                                               ; preds = %7
  %13 = add nsw i32 %9, 1
  %14 = load void (%class.SuperBlitter*, i32, i32, i32)**, void (%class.SuperBlitter*, i32, i32, i32)*** %6, align 8
  %15 = getelementptr inbounds void (%class.SuperBlitter*, i32, i32, i32)*, void (%class.SuperBlitter*, i32, i32, i32)** %14, i64 2
  %16 = load void (%class.SuperBlitter*, i32, i32, i32)*, void (%class.SuperBlitter*, i32, i32, i32)** %15, align 8
  tail call void %16(%class.SuperBlitter* %0, i32 %1, i32 %9, i32 %3) #10
  %17 = add nsw i32 %8, -1
  %18 = icmp slt i32 %8, 2
  br i1 %18, label %105, label %7

19:                                               ; preds = %7
  %20 = ashr i32 %9, 2
  %21 = add nsw i32 %9, %8
  %22 = ashr i32 %21, 2
  %23 = sub nsw i32 %22, %20
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %25, label %91

25:                                               ; preds = %19
  %26 = shl i32 %23, 2
  %27 = add nsw i32 %26, %9
  %28 = sub nsw i32 %8, %26
  %29 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 5
  %30 = load i32, i32* %29, align 4
  %31 = sub nsw i32 %1, %30
  %32 = icmp slt i32 %31, 0
  %33 = select i1 %32, i32 %31, i32 0
  %34 = add nsw i32 %33, %3
  %35 = select i1 %32, i32 0, i32 %31
  %36 = lshr i32 %35, 2
  %37 = and i32 %35, 3
  %38 = add nsw i32 %34, %35
  %39 = ashr i32 %38, 2
  %40 = and i32 %38, 3
  %41 = icmp eq i32 %40, 0
  %42 = zext i1 %41 to i32
  %43 = sub nsw i32 %39, %42
  %44 = select i1 %41, i32 4, i32 %40
  tail call void @_ZN12SuperBlitter5flushEv(%class.SuperBlitter* %0)
  %45 = xor i32 %36, -1
  %46 = add nsw i32 %43, %45
  %47 = icmp slt i32 %46, 0
  br i1 %47, label %48, label %63

48:                                               ; preds = %25
  %49 = sub nsw i32 %44, %37
  %50 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 1
  %51 = load %class.SkBlitter*, %class.SkBlitter** %50, align 8
  %52 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 4
  %53 = load i32, i32* %52, align 8
  %54 = add nsw i32 %53, %36
  %55 = shl nsw i32 %49, 6
  %56 = ashr i32 %49, 2
  %57 = sub nsw i32 %55, %56
  %58 = trunc i32 %57 to i8
  %59 = bitcast %class.SkBlitter* %51 to void (%class.SkBlitter*, i32, i32, i32, i8)***
  %60 = load void (%class.SkBlitter*, i32, i32, i32, i8)**, void (%class.SkBlitter*, i32, i32, i32, i8)*** %59, align 8
  %61 = getelementptr inbounds void (%class.SkBlitter*, i32, i32, i32, i8)*, void (%class.SkBlitter*, i32, i32, i32, i8)** %60, i64 4
  %62 = load void (%class.SkBlitter*, i32, i32, i32, i8)*, void (%class.SkBlitter*, i32, i32, i32, i8)** %61, align 8
  tail call void %62(%class.SkBlitter* %51, i32 %54, i32 %20, i32 %23, i8 zeroext %58) #10
  br label %82

63:                                               ; preds = %25
  %64 = sub nuw nsw i32 4, %37
  %65 = shl nuw nsw i32 %64, 6
  %66 = lshr i32 %64, 2
  %67 = sub nuw nsw i32 %65, %66
  %68 = shl nuw nsw i32 %44, 6
  %69 = lshr i32 %44, 2
  %70 = sub nuw nsw i32 %68, %69
  %71 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 1
  %72 = load %class.SkBlitter*, %class.SkBlitter** %71, align 8
  %73 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 4
  %74 = load i32, i32* %73, align 8
  %75 = add nsw i32 %74, %36
  %76 = trunc i32 %67 to i8
  %77 = trunc i32 %70 to i8
  %78 = bitcast %class.SkBlitter* %72 to void (%class.SkBlitter*, i32, i32, i32, i32, i8, i8)***
  %79 = load void (%class.SkBlitter*, i32, i32, i32, i32, i8, i8)**, void (%class.SkBlitter*, i32, i32, i32, i32, i8, i8)*** %78, align 8
  %80 = getelementptr inbounds void (%class.SkBlitter*, i32, i32, i32, i32, i8, i8)*, void (%class.SkBlitter*, i32, i32, i32, i32, i8, i8)** %79, i64 6
  %81 = load void (%class.SkBlitter*, i32, i32, i32, i32, i8, i8)*, void (%class.SkBlitter*, i32, i32, i32, i32, i8, i8)** %80, align 8
  tail call void %81(%class.SkBlitter* %72, i32 %75, i32 %20, i32 %46, i32 %23, i8 zeroext %76, i8 zeroext %77) #10
  br label %82

82:                                               ; preds = %63, %48
  %83 = add nsw i32 %22, -1
  %84 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 2
  store i32 %83, i32* %84, align 8
  %85 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 7
  store i32 0, i32* %85, align 8
  %86 = add nsw i32 %27, -1
  %87 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 6
  store i32 %86, i32* %87, align 8
  %88 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 6
  %89 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 3
  %90 = load i32, i32* %89, align 4
  tail call void @_ZN11SkAlphaRuns5resetEi(%class.SkAlphaRuns* %88, i32 %90) #10
  br label %91

91:                                               ; preds = %82, %19
  %92 = phi i32 [ %34, %82 ], [ %3, %19 ]
  %93 = phi i32 [ %28, %82 ], [ %8, %19 ]
  %94 = phi i32 [ %27, %82 ], [ %9, %19 ]
  %95 = icmp sgt i32 %93, 0
  br i1 %95, label %96, label %105

96:                                               ; preds = %91, %96
  %97 = phi i32 [ %100, %96 ], [ %94, %91 ]
  %98 = phi i32 [ %99, %96 ], [ %93, %91 ]
  %99 = add nsw i32 %98, -1
  %100 = add nsw i32 %97, 1
  %101 = load void (%class.SuperBlitter*, i32, i32, i32)**, void (%class.SuperBlitter*, i32, i32, i32)*** %6, align 8
  %102 = getelementptr inbounds void (%class.SuperBlitter*, i32, i32, i32)*, void (%class.SuperBlitter*, i32, i32, i32)** %101, i64 2
  %103 = load void (%class.SuperBlitter*, i32, i32, i32)*, void (%class.SuperBlitter*, i32, i32, i32)** %102, align 8
  tail call void %103(%class.SuperBlitter* %0, i32 %1, i32 %97, i32 %92) #10
  %104 = icmp sgt i32 %99, 0
  br i1 %104, label %96, label %105

105:                                              ; preds = %12, %96, %91
  ret void
}

declare void @_ZN11SkAlphaRuns5resetEi(%class.SkAlphaRuns*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16MaskSuperBlitterC2EP9SkBlitterRK7SkIRectS4_b(%class.MaskSuperBlitter*, %class.SkBlitter*, %struct.SkIRect* dereferenceable(16), %struct.SkIRect* dereferenceable(16), i1 zeroext) unnamed_addr #0 align 2 {
  %6 = alloca %struct.SkIRect, align 4
  %7 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 0, i32 0, i32 1
  %9 = bitcast %class.SkAutoMalloc* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 16, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV16BaseSuperBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %10 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 0, i32 1
  store %class.SkBlitter* %1, %class.SkBlitter** %10, align 8
  %11 = bitcast %struct.SkIRect* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #10
  %12 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %6, i64 0, i32 0
  %13 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %6, i64 0, i32 1
  %14 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %6, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %11, i8 -86, i64 16, i1 false) #10
  br i1 %4, label %15, label %17

15:                                               ; preds = %5
  %16 = bitcast %struct.SkIRect* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %11, i8* align 4 %16, i64 16, i1 false) #10
  br label %20

17:                                               ; preds = %5
  %18 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %6, %struct.SkIRect* dereferenceable(16) %2, %struct.SkIRect* dereferenceable(16) %3) #10
  br i1 %18, label %20, label %19

19:                                               ; preds = %17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %11, i8 0, i64 16, i1 false) #10
  br label %20

20:                                               ; preds = %15, %17, %19
  %21 = load i32, i32* %12, align 4
  %22 = load i32, i32* %14, align 4
  %23 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 0, i32 4
  store i32 %21, i32* %23, align 8
  %24 = shl i32 %21, 2
  %25 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 0, i32 5
  store i32 %24, i32* %25, align 4
  %26 = sub nsw i32 %22, %21
  %27 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 0, i32 3
  store i32 %26, i32* %27, align 4
  %28 = load i32, i32* %13, align 4
  %29 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 0, i32 7
  store i32 %28, i32* %29, align 4
  %30 = add nsw i32 %28, -1
  %31 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 0, i32 2
  store i32 %30, i32* %31, align 8
  %32 = shl i32 %28, 2
  %33 = add nsw i32 %32, -1
  %34 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 0, i32 6
  store i32 %33, i32* %34, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV16MaskSuperBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %35 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 1
  %36 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 3, i64 0
  %37 = bitcast i32* %36 to i8*
  %38 = bitcast %struct.SkMask* %35 to i32**
  store i32* %36, i32** %38, align 8
  %39 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 1, i32 1
  %40 = bitcast %struct.SkIRect* %39 to i8*
  %41 = bitcast %struct.SkIRect* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 4 %41, i64 16, i1 false)
  %42 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 2
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = sub i32 %43, %45
  %47 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 1, i32 2
  store i32 %46, i32* %47, align 8
  %48 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 1, i32 3
  store i8 1, i8* %48, align 4
  %49 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 2
  %50 = bitcast %struct.SkIRect* %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 4 %41, i64 16, i1 false)
  %51 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* %49, %struct.SkIRect* dereferenceable(16) %49, %struct.SkIRect* dereferenceable(16) %3) #10
  br i1 %51, label %53, label %52

52:                                               ; preds = %20
  call void @llvm.memset.p0i8.i64(i8* align 4 %50, i8 0, i64 16, i1 false) #10
  br label %53

53:                                               ; preds = %52, %20
  %54 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 1, i32 1, i32 3
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 1, i32 1, i32 1
  %57 = load i32, i32* %56, align 4
  %58 = sub i32 %55, %57
  %59 = load i32, i32* %47, align 8
  %60 = mul i32 %58, %59
  %61 = add i32 %60, 1
  %62 = zext i32 %61 to i64
  call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 %62, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN16MaskSuperBlitter5blitHEiii(%class.MaskSuperBlitter* nocapture readonly, i32, i32, i32) unnamed_addr #3 align 2 {
  %5 = ashr i32 %2, 2
  %6 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 1, i32 1, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = sub nsw i32 %5, %7
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %249, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 1, i32 1, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = shl i32 %12, 2
  %14 = sub nsw i32 %1, %13
  %15 = icmp slt i32 %14, 0
  %16 = select i1 %15, i32 %14, i32 0
  %17 = add nsw i32 %16, %3
  %18 = select i1 %15, i32 0, i32 %14
  %19 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 1, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 1, i32 2
  %22 = load i32, i32* %21, align 8
  %23 = mul i32 %22, %8
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %20, i64 %24
  %26 = lshr i32 %18, 2
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %25, i64 %27
  %29 = add nsw i32 %17, %18
  %30 = and i32 %18, 3
  %31 = and i32 %29, 3
  %32 = ashr i32 %29, 2
  %33 = xor i32 %26, -1
  %34 = add nsw i32 %32, %33
  %35 = icmp slt i32 %34, 0
  br i1 %35, label %36, label %39

36:                                               ; preds = %10
  %37 = sub nsw i32 %31, %30
  %38 = shl nsw i32 %37, 4
  br label %240

39:                                               ; preds = %10
  %40 = shl nuw nsw i32 %30, 4
  %41 = sub nuw nsw i32 64, %40
  %42 = shl nuw nsw i32 %31, 4
  %43 = and i32 %2, 3
  %44 = add nuw nsw i32 %43, 1
  %45 = lshr i32 %44, 2
  %46 = sub nuw nsw i32 64, %45
  %47 = load i8, i8* %28, align 1
  %48 = zext i8 %47 to i32
  %49 = add nuw nsw i32 %41, %48
  %50 = lshr i32 %49, 8
  %51 = sub nuw nsw i32 %49, %50
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %28, align 1
  %53 = getelementptr inbounds i8, i8* %28, i64 1
  %54 = icmp sgt i32 %34, 15
  br i1 %54, label %55, label %160

55:                                               ; preds = %39
  %56 = ptrtoint i8* %53 to i64
  %57 = and i64 %56, 3
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %55
  %60 = trunc i32 %46 to i8
  br label %61

61:                                               ; preds = %61, %59
  %62 = phi i8* [ %53, %59 ], [ %66, %61 ]
  %63 = phi i32 [ %34, %59 ], [ %67, %61 ]
  %64 = load i8, i8* %62, align 1
  %65 = add i8 %64, %60
  store i8 %65, i8* %62, align 1
  %66 = getelementptr inbounds i8, i8* %62, i64 1
  %67 = add nsw i32 %63, -1
  %68 = ptrtoint i8* %66 to i64
  %69 = and i64 %68, 3
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %61

71:                                               ; preds = %61, %55
  %72 = phi i32 [ %34, %55 ], [ %67, %61 ]
  %73 = phi i8* [ %53, %55 ], [ %66, %61 ]
  %74 = ashr i32 %72, 2
  %75 = bitcast i8* %73 to i32*
  %76 = shl nuw nsw i32 %46, 8
  %77 = or i32 %76, %46
  %78 = shl nuw nsw i32 %77, 16
  %79 = or i32 %78, %77
  %80 = icmp slt i32 %74, 1
  %81 = select i1 %80, i32 %74, i32 1
  %82 = sub nsw i32 %74, %81
  %83 = zext i32 %82 to i64
  %84 = add nuw nsw i64 %83, 1
  %85 = icmp ult i64 %84, 8
  br i1 %85, label %145, label %86

86:                                               ; preds = %71
  %87 = and i64 %84, 8589934584
  %88 = trunc i64 %87 to i32
  %89 = sub i32 %74, %88
  %90 = getelementptr i32, i32* %75, i64 %87
  %91 = insertelement <4 x i32> undef, i32 %79, i32 0
  %92 = shufflevector <4 x i32> %91, <4 x i32> undef, <4 x i32> zeroinitializer
  %93 = insertelement <4 x i32> undef, i32 %79, i32 0
  %94 = shufflevector <4 x i32> %93, <4 x i32> undef, <4 x i32> zeroinitializer
  %95 = add nsw i64 %87, -8
  %96 = lshr exact i64 %95, 3
  %97 = add nuw nsw i64 %96, 1
  %98 = and i64 %97, 1
  %99 = icmp eq i64 %95, 0
  br i1 %99, label %129, label %100

100:                                              ; preds = %86
  %101 = sub nuw nsw i64 %97, %98
  br label %102

102:                                              ; preds = %102, %100
  %103 = phi i64 [ 0, %100 ], [ %126, %102 ]
  %104 = phi i64 [ %101, %100 ], [ %127, %102 ]
  %105 = getelementptr i32, i32* %75, i64 %103
  %106 = bitcast i32* %105 to <4 x i32>*
  %107 = load <4 x i32>, <4 x i32>* %106, align 4
  %108 = getelementptr i32, i32* %105, i64 4
  %109 = bitcast i32* %108 to <4 x i32>*
  %110 = load <4 x i32>, <4 x i32>* %109, align 4
  %111 = add <4 x i32> %107, %92
  %112 = add <4 x i32> %110, %94
  %113 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> %111, <4 x i32>* %113, align 4
  %114 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %112, <4 x i32>* %114, align 4
  %115 = or i64 %103, 8
  %116 = getelementptr i32, i32* %75, i64 %115
  %117 = bitcast i32* %116 to <4 x i32>*
  %118 = load <4 x i32>, <4 x i32>* %117, align 4
  %119 = getelementptr i32, i32* %116, i64 4
  %120 = bitcast i32* %119 to <4 x i32>*
  %121 = load <4 x i32>, <4 x i32>* %120, align 4
  %122 = add <4 x i32> %118, %92
  %123 = add <4 x i32> %121, %94
  %124 = bitcast i32* %116 to <4 x i32>*
  store <4 x i32> %122, <4 x i32>* %124, align 4
  %125 = bitcast i32* %119 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %125, align 4
  %126 = add i64 %103, 16
  %127 = add i64 %104, -2
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %102, !llvm.loop !2

129:                                              ; preds = %102, %86
  %130 = phi i64 [ 0, %86 ], [ %126, %102 ]
  %131 = icmp eq i64 %98, 0
  br i1 %131, label %143, label %132

132:                                              ; preds = %129
  %133 = getelementptr i32, i32* %75, i64 %130
  %134 = bitcast i32* %133 to <4 x i32>*
  %135 = load <4 x i32>, <4 x i32>* %134, align 4
  %136 = getelementptr i32, i32* %133, i64 4
  %137 = bitcast i32* %136 to <4 x i32>*
  %138 = load <4 x i32>, <4 x i32>* %137, align 4
  %139 = add <4 x i32> %135, %92
  %140 = add <4 x i32> %138, %94
  %141 = bitcast i32* %133 to <4 x i32>*
  store <4 x i32> %139, <4 x i32>* %141, align 4
  %142 = bitcast i32* %136 to <4 x i32>*
  store <4 x i32> %140, <4 x i32>* %142, align 4
  br label %143

143:                                              ; preds = %129, %132
  %144 = icmp eq i64 %84, %87
  br i1 %144, label %156, label %145

145:                                              ; preds = %143, %71
  %146 = phi i32 [ %74, %71 ], [ %89, %143 ]
  %147 = phi i32* [ %75, %71 ], [ %90, %143 ]
  br label %148

148:                                              ; preds = %145, %148
  %149 = phi i32 [ %154, %148 ], [ %146, %145 ]
  %150 = phi i32* [ %151, %148 ], [ %147, %145 ]
  %151 = getelementptr inbounds i32, i32* %150, i64 1
  %152 = load i32, i32* %150, align 4
  %153 = add i32 %152, %79
  store i32 %153, i32* %150, align 4
  %154 = add nsw i32 %149, -1
  %155 = icmp sgt i32 %154, 0
  br i1 %155, label %148, label %156, !llvm.loop !4

156:                                              ; preds = %148, %143
  %157 = phi i32* [ %90, %143 ], [ %151, %148 ]
  %158 = and i32 %72, 3
  %159 = bitcast i32* %157 to i8*
  br label %160

160:                                              ; preds = %156, %39
  %161 = phi i32 [ %158, %156 ], [ %34, %39 ]
  %162 = phi i8* [ %159, %156 ], [ %53, %39 ]
  %163 = icmp sgt i32 %161, 0
  br i1 %163, label %164, label %240

164:                                              ; preds = %160
  %165 = trunc i32 %46 to i8
  %166 = add nsw i32 %161, -1
  %167 = zext i32 %166 to i64
  %168 = add nuw nsw i64 %167, 1
  %169 = icmp ult i64 %168, 32
  br i1 %169, label %229, label %170

170:                                              ; preds = %164
  %171 = and i64 %168, 8589934560
  %172 = getelementptr i8, i8* %162, i64 %171
  %173 = trunc i64 %171 to i32
  %174 = sub i32 %161, %173
  %175 = insertelement <16 x i8> undef, i8 %165, i32 0
  %176 = shufflevector <16 x i8> %175, <16 x i8> undef, <16 x i32> zeroinitializer
  %177 = insertelement <16 x i8> undef, i8 %165, i32 0
  %178 = shufflevector <16 x i8> %177, <16 x i8> undef, <16 x i32> zeroinitializer
  %179 = add nsw i64 %171, -32
  %180 = lshr exact i64 %179, 5
  %181 = add nuw nsw i64 %180, 1
  %182 = and i64 %181, 1
  %183 = icmp eq i64 %179, 0
  br i1 %183, label %213, label %184

184:                                              ; preds = %170
  %185 = sub nuw nsw i64 %181, %182
  br label %186

186:                                              ; preds = %186, %184
  %187 = phi i64 [ 0, %184 ], [ %210, %186 ]
  %188 = phi i64 [ %185, %184 ], [ %211, %186 ]
  %189 = getelementptr i8, i8* %162, i64 %187
  %190 = bitcast i8* %189 to <16 x i8>*
  %191 = load <16 x i8>, <16 x i8>* %190, align 1
  %192 = getelementptr i8, i8* %189, i64 16
  %193 = bitcast i8* %192 to <16 x i8>*
  %194 = load <16 x i8>, <16 x i8>* %193, align 1
  %195 = add <16 x i8> %191, %176
  %196 = add <16 x i8> %194, %178
  %197 = bitcast i8* %189 to <16 x i8>*
  store <16 x i8> %195, <16 x i8>* %197, align 1
  %198 = bitcast i8* %192 to <16 x i8>*
  store <16 x i8> %196, <16 x i8>* %198, align 1
  %199 = or i64 %187, 32
  %200 = getelementptr i8, i8* %162, i64 %199
  %201 = bitcast i8* %200 to <16 x i8>*
  %202 = load <16 x i8>, <16 x i8>* %201, align 1
  %203 = getelementptr i8, i8* %200, i64 16
  %204 = bitcast i8* %203 to <16 x i8>*
  %205 = load <16 x i8>, <16 x i8>* %204, align 1
  %206 = add <16 x i8> %202, %176
  %207 = add <16 x i8> %205, %178
  %208 = bitcast i8* %200 to <16 x i8>*
  store <16 x i8> %206, <16 x i8>* %208, align 1
  %209 = bitcast i8* %203 to <16 x i8>*
  store <16 x i8> %207, <16 x i8>* %209, align 1
  %210 = add i64 %187, 64
  %211 = add i64 %188, -2
  %212 = icmp eq i64 %211, 0
  br i1 %212, label %213, label %186, !llvm.loop !6

213:                                              ; preds = %186, %170
  %214 = phi i64 [ 0, %170 ], [ %210, %186 ]
  %215 = icmp eq i64 %182, 0
  br i1 %215, label %227, label %216

216:                                              ; preds = %213
  %217 = getelementptr i8, i8* %162, i64 %214
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1
  %220 = getelementptr i8, i8* %217, i64 16
  %221 = bitcast i8* %220 to <16 x i8>*
  %222 = load <16 x i8>, <16 x i8>* %221, align 1
  %223 = add <16 x i8> %219, %176
  %224 = add <16 x i8> %222, %178
  %225 = bitcast i8* %217 to <16 x i8>*
  store <16 x i8> %223, <16 x i8>* %225, align 1
  %226 = bitcast i8* %220 to <16 x i8>*
  store <16 x i8> %224, <16 x i8>* %226, align 1
  br label %227

227:                                              ; preds = %213, %216
  %228 = icmp eq i64 %168, %171
  br i1 %228, label %240, label %229

229:                                              ; preds = %227, %164
  %230 = phi i8* [ %162, %164 ], [ %172, %227 ]
  %231 = phi i32 [ %161, %164 ], [ %174, %227 ]
  br label %232

232:                                              ; preds = %229, %232
  %233 = phi i8* [ %238, %232 ], [ %230, %229 ]
  %234 = phi i32 [ %235, %232 ], [ %231, %229 ]
  %235 = add nsw i32 %234, -1
  %236 = load i8, i8* %233, align 1
  %237 = add i8 %236, %165
  store i8 %237, i8* %233, align 1
  %238 = getelementptr inbounds i8, i8* %233, i64 1
  %239 = icmp sgt i32 %235, 0
  br i1 %239, label %232, label %240, !llvm.loop !7

240:                                              ; preds = %232, %160, %227, %36
  %241 = phi i8* [ %28, %36 ], [ %162, %160 ], [ %172, %227 ], [ %238, %232 ]
  %242 = phi i32 [ %38, %36 ], [ %42, %160 ], [ %42, %227 ], [ %42, %232 ]
  %243 = load i8, i8* %241, align 1
  %244 = zext i8 %243 to i32
  %245 = add nsw i32 %242, %244
  %246 = lshr i32 %245, 8
  %247 = sub nsw i32 %245, %246
  %248 = trunc i32 %247 to i8
  store i8 %248, i8* %241, align 1
  br label %249

249:                                              ; preds = %240, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6SkScan11SAAFillPathERK6SkPathP9SkBlitterRK7SkIRectS7_b(%class.SkPath* dereferenceable(16), %class.SkBlitter*, %struct.SkIRect* dereferenceable(16), %struct.SkIRect* dereferenceable(16), i1 zeroext) local_unnamed_addr #0 align 2 {
  %6 = alloca %class.MaskSuperBlitter, align 8
  %7 = alloca %class.SuperBlitter, align 8
  %8 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = sext i32 %12 to i64
  %14 = sub nsw i64 %10, %13
  %15 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = sext i32 %19 to i64
  %21 = sub nsw i64 %17, %20
  %22 = icmp slt i64 %14, 1
  %23 = icmp slt i64 %21, 1
  %24 = or i1 %22, %23
  br i1 %24, label %60, label %25

25:                                               ; preds = %5
  %26 = or i64 %21, %14
  %27 = add nsw i64 %26, 2147483648
  %28 = icmp ugt i64 %27, 4294967295
  br i1 %28, label %60, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %3, i64 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %3, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = sext i32 %34 to i64
  %36 = sub nsw i64 %32, %35
  %37 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %3, i64 0, i32 3
  %38 = load i32, i32* %37, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %3, i64 0, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = sext i32 %41 to i64
  %43 = sub nsw i64 %39, %42
  %44 = icmp slt i64 %36, 1
  %45 = icmp slt i64 %43, 1
  %46 = or i1 %44, %45
  br i1 %46, label %60, label %47

47:                                               ; preds = %29
  %48 = or i64 %43, %36
  %49 = add nsw i64 %48, 2147483648
  %50 = icmp ugt i64 %49, 4294967295
  %51 = icmp sgt i32 %34, %12
  %52 = or i1 %51, %50
  %53 = icmp sgt i32 %41, %19
  %54 = or i1 %53, %52
  %55 = icmp slt i32 %31, %9
  %56 = or i1 %55, %54
  %57 = icmp sge i32 %38, %16
  %58 = xor i1 %56, true
  %59 = and i1 %57, %58
  br label %60

60:                                               ; preds = %5, %25, %29, %47
  %61 = phi i1 [ %59, %47 ], [ false, %29 ], [ false, %25 ], [ false, %5 ]
  %62 = getelementptr inbounds %class.SkPath, %class.SkPath* %0, i64 0, i32 4
  %63 = load i8, i8* %62, align 2
  %64 = and i8 %63, 2
  %65 = icmp ne i8 %64, 0
  br i1 %65, label %92, label %66

66:                                               ; preds = %60
  %67 = sub i32 %9, %12
  %68 = add nsw i32 %67, 3
  %69 = and i32 %68, -4
  %70 = sext i32 %69 to i64
  %71 = sub i32 %16, %19
  %72 = sext i32 %71 to i64
  %73 = mul nsw i64 %70, %72
  %74 = icmp sgt i32 %67, 32
  %75 = icmp sgt i64 %73, 1024
  %76 = or i1 %74, %75
  %77 = or i1 %76, %4
  br i1 %77, label %92, label %78

78:                                               ; preds = %66
  %79 = bitcast %class.MaskSuperBlitter* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1152, i8* nonnull %79) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %79, i8 -86, i64 1152, i1 false)
  call void @_ZN16MaskSuperBlitterC2EP9SkBlitterRK7SkIRectS4_b(%class.MaskSuperBlitter* nonnull %6, %class.SkBlitter* %1, %struct.SkIRect* dereferenceable(16) %2, %struct.SkIRect* dereferenceable(16) %3, i1 zeroext false)
  %80 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %6, i64 0, i32 0, i32 0
  %81 = load i32, i32* %18, align 4
  %82 = load i32, i32* %15, align 4
  call void @_Z12sk_fill_pathRK6SkPathRK7SkIRectP9SkBlitteriiib(%class.SkPath* dereferenceable(16) %0, %struct.SkIRect* dereferenceable(16) %3, %class.SkBlitter* nonnull %80, i32 %81, i32 %82, i32 2, i1 zeroext %61) #10
  %83 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %6, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV16MaskSuperBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %83, align 8
  %84 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %6, i64 0, i32 0, i32 1
  %85 = load %class.SkBlitter*, %class.SkBlitter** %84, align 8
  %86 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %6, i64 0, i32 1
  %87 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %6, i64 0, i32 2
  %88 = bitcast %class.SkBlitter* %85 to void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)***
  %89 = load void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)**, void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)*** %88, align 8
  %90 = getelementptr inbounds void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)*, void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)** %89, i64 7
  %91 = load void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)*, void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)** %90, align 8
  call void %91(%class.SkBlitter* %85, %struct.SkMask* dereferenceable(32) %86, %struct.SkIRect* dereferenceable(16) %87) #10
  call void @_ZN9SkBlitterD2Ev(%class.SkBlitter* nonnull %80) #10
  call void @llvm.lifetime.end.p0i8(i64 1152, i8* nonnull %79) #10
  br label %98

92:                                               ; preds = %66, %60
  %93 = bitcast %class.SuperBlitter* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %93) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %93, i8 -86, i64 120, i1 false)
  call void @_ZN12SuperBlitterC2EP9SkBlitterRK7SkIRectS4_b(%class.SuperBlitter* nonnull %7, %class.SkBlitter* %1, %struct.SkIRect* dereferenceable(16) %2, %struct.SkIRect* dereferenceable(16) %3, i1 zeroext %65)
  %94 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %7, i64 0, i32 0, i32 0
  %95 = load i32, i32* %18, align 4
  %96 = load i32, i32* %15, align 4
  call void @_Z12sk_fill_pathRK6SkPathRK7SkIRectP9SkBlitteriiib(%class.SkPath* dereferenceable(16) %0, %struct.SkIRect* dereferenceable(16) %3, %class.SkBlitter* nonnull %94, i32 %95, i32 %96, i32 2, i1 zeroext %61) #10
  %97 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %7, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV12SuperBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %97, align 8
  call void @_ZN12SuperBlitter5flushEv(%class.SuperBlitter* nonnull %7) #10
  call void @_ZN9SkBlitterD2Ev(%class.SkBlitter* nonnull %94) #10
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %93) #10
  br label %98

98:                                               ; preds = %92, %78
  ret void
}

declare void @_Z12sk_fill_pathRK6SkPathRK7SkIRectP9SkBlitteriiib(%class.SkPath* dereferenceable(16), %struct.SkIRect* dereferenceable(16), %class.SkBlitter*, i32, i32, i32, i1 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN16MaskSuperBlitterD2Ev(%class.MaskSuperBlitter*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV16MaskSuperBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 0, i32 1
  %4 = load %class.SkBlitter*, %class.SkBlitter** %3, align 8
  %5 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 1
  %6 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 2
  %7 = bitcast %class.SkBlitter* %4 to void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)***
  %8 = load void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)**, void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)*** %7, align 8
  %9 = getelementptr inbounds void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)*, void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)** %8, i64 7
  %10 = load void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)*, void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)** %9, align 8
  tail call void %10(%class.SkBlitter* %4, %struct.SkMask* dereferenceable(32) %5, %struct.SkIRect* dereferenceable(16) %6) #10
  %11 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 0, i32 0
  tail call void @_ZN9SkBlitterD2Ev(%class.SkBlitter* %11) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12SuperBlitterD2Ev(%class.SuperBlitter*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV12SuperBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  tail call void @_ZN12SuperBlitter5flushEv(%class.SuperBlitter* %0)
  %3 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 0
  tail call void @_ZN9SkBlitterD2Ev(%class.SkBlitter* %3) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6SkScan12AntiFillPathERK6SkPathRK8SkRegionP9SkBlitterb(%class.SkPath* dereferenceable(16), %class.SkRegion* dereferenceable(24), %class.SkBlitter*, i1 zeroext) local_unnamed_addr #4 align 2 {
  %5 = alloca { i64, i64 }, align 8
  %6 = alloca { i64, i64 }, align 8
  %7 = bitcast { i64, i64 }* %6 to %struct.SkIRect*
  %8 = alloca %struct.SkIRect, align 8
  %9 = alloca %class.SkRegion, align 8
  %10 = alloca %struct.SkIRect, align 4
  %11 = alloca %class.SkScanClipper, align 8
  %12 = getelementptr inbounds %class.SkRegion, %class.SkRegion* %1, i64 0, i32 1
  %13 = load %"struct.SkRegion::RunHead"*, %"struct.SkRegion::RunHead"** %12, align 8
  %14 = icmp eq %"struct.SkRegion::RunHead"* %13, inttoptr (i64 -1 to %"struct.SkRegion::RunHead"*)
  br i1 %14, label %337, label %15

15:                                               ; preds = %4
  %16 = getelementptr inbounds %class.SkPath, %class.SkPath* %0, i64 0, i32 4
  %17 = load i8, i8* %16, align 2
  %18 = and i8 %17, 2
  %19 = icmp ne i8 %18, 0
  %20 = bitcast { i64, i64 }* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %20) #10
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %22 = getelementptr inbounds %class.SkPath, %class.SkPath* %0, i64 0, i32 0, i32 0
  %23 = bitcast { i64, i64 }* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 16, i1 false)
  %24 = load %class.SkPathRef*, %class.SkPathRef** %22, align 8
  %25 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %24, i64 0, i32 9
  %26 = load i8, i8* %25, align 8
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %37, label %28

28:                                               ; preds = %15
  %29 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %24, i64 0, i32 1
  %30 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %24, i64 0, i32 3, i32 0
  %31 = load %struct.SkPoint*, %struct.SkPoint** %30, align 8
  %32 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %24, i64 0, i32 3, i32 2
  %33 = load i32, i32* %32, align 4
  %34 = tail call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %29, %struct.SkPoint* %31, i32 %33) #10
  %35 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %24, i64 0, i32 10
  %36 = zext i1 %34 to i8
  store i8 %36, i8* %35, align 1
  store i8 0, i8* %25, align 8
  br label %37

37:                                               ; preds = %15, %28
  %38 = bitcast { i64, i64 }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38)
  %39 = bitcast { i64, i64 }* %5 to %struct.SkIRect*
  %40 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 1
  %41 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %24, i64 0, i32 1, i32 0
  %42 = load float, float* %41, align 4
  %43 = tail call float @llvm.floor.f32(float %42) #10
  %44 = fcmp olt float %43, 0x41DFFFFFE0000000
  %45 = select i1 %44, float %43, float 0x41DFFFFFE0000000
  %46 = fcmp ogt float %45, 0xC1DFFFFFE0000000
  %47 = select i1 %46, float %45, float 0xC1DFFFFFE0000000
  %48 = fptosi float %47 to i32
  %49 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %24, i64 0, i32 1, i32 1
  %50 = load float, float* %49, align 4
  %51 = tail call float @llvm.floor.f32(float %50) #10
  %52 = fcmp olt float %51, 0x41DFFFFFE0000000
  %53 = select i1 %52, float %51, float 0x41DFFFFFE0000000
  %54 = fcmp ogt float %53, 0xC1DFFFFFE0000000
  %55 = select i1 %54, float %53, float 0xC1DFFFFFE0000000
  %56 = fptosi float %55 to i32
  %57 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %24, i64 0, i32 1, i32 2
  %58 = load float, float* %57, align 4
  %59 = tail call float @llvm.ceil.f32(float %58) #10
  %60 = fcmp olt float %59, 0x41DFFFFFE0000000
  %61 = select i1 %60, float %59, float 0x41DFFFFFE0000000
  %62 = fcmp ogt float %61, 0xC1DFFFFFE0000000
  %63 = select i1 %62, float %61, float 0xC1DFFFFFE0000000
  %64 = fptosi float %63 to i32
  %65 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %24, i64 0, i32 1, i32 3
  %66 = load float, float* %65, align 4
  %67 = tail call float @llvm.ceil.f32(float %66) #10
  %68 = fcmp olt float %67, 0x41DFFFFFE0000000
  %69 = select i1 %68, float %67, float 0x41DFFFFFE0000000
  %70 = fcmp ogt float %69, 0xC1DFFFFFE0000000
  %71 = select i1 %70, float %69, float 0xC1DFFFFFE0000000
  %72 = fptosi float %71 to i32
  %73 = zext i32 %56 to i64
  %74 = shl nuw i64 %73, 32
  %75 = zext i32 %48 to i64
  %76 = or i64 %74, %75
  %77 = zext i32 %72 to i64
  %78 = shl nuw i64 %77, 32
  %79 = zext i32 %64 to i64
  %80 = or i64 %78, %79
  %81 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 0
  store i64 %76, i64* %81, align 8
  store i64 %80, i64* %40, align 8
  %82 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %39, %struct.SkIRect* nonnull dereferenceable(16) %39, %struct.SkIRect* nonnull dereferenceable(16) @.ref.tmp) #10
  %83 = load i64, i64* %81, align 8
  %84 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38)
  %85 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 0
  store i64 %83, i64* %85, align 8
  store i64 %84, i64* %21, align 8
  %86 = shl i64 %84, 32
  %87 = ashr exact i64 %86, 32
  %88 = shl i64 %83, 32
  %89 = ashr exact i64 %88, 32
  %90 = sub nsw i64 %87, %89
  %91 = ashr i64 %84, 32
  %92 = ashr i64 %83, 32
  %93 = sub nsw i64 %91, %92
  %94 = icmp slt i64 %90, 1
  %95 = icmp slt i64 %93, 1
  %96 = or i1 %94, %95
  br i1 %96, label %101, label %97

97:                                               ; preds = %37
  %98 = or i64 %93, %90
  %99 = add nsw i64 %98, 2147483648
  %100 = icmp ugt i64 %99, 4294967295
  br i1 %100, label %101, label %103

101:                                              ; preds = %37, %97
  br i1 %19, label %102, label %336

102:                                              ; preds = %101
  call void @_ZN9SkBlitter10blitRegionERK8SkRegion(%class.SkBlitter* %2, %class.SkRegion* dereferenceable(24) %1) #10
  br label %336

103:                                              ; preds = %97
  %104 = bitcast %struct.SkIRect* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %104) #10
  %105 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %8, i64 0, i32 2
  %106 = bitcast %struct.SkIRect* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %106, i8 -86, i64 16, i1 false)
  br i1 %19, label %107, label %109

107:                                              ; preds = %103
  %108 = bitcast %class.SkRegion* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %104, i8* align 4 %108, i64 16, i1 false)
  br label %112

109:                                              ; preds = %103
  %110 = getelementptr inbounds %class.SkRegion, %class.SkRegion* %1, i64 0, i32 0
  %111 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %8, %struct.SkIRect* nonnull dereferenceable(16) %7, %struct.SkIRect* dereferenceable(16) %110) #10
  br i1 %111, label %112, label %335

112:                                              ; preds = %109, %107
  %113 = bitcast %struct.SkIRect* %8 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast i32* %105 to i64*
  %116 = load i64, i64* %115, align 8
  %117 = trunc i64 %114 to i32
  %118 = lshr i64 %114, 32
  %119 = trunc i64 %118 to i32
  %120 = trunc i64 %116 to i32
  %121 = lshr i64 %116, 32
  %122 = trunc i64 %121 to i32
  %123 = shl i32 %117, 18
  %124 = ashr exact i32 %123, 18
  %125 = sub nsw i32 %124, %117
  %126 = shl i32 %120, 18
  %127 = ashr exact i32 %126, 18
  %128 = sub nsw i32 %127, %120
  %129 = or i32 %128, %125
  %130 = shl nuw nsw i64 %118, 18
  %131 = trunc i64 %130 to i32
  %132 = ashr exact i32 %131, 18
  %133 = sub nsw i32 %132, %119
  %134 = or i32 %129, %133
  %135 = shl nuw nsw i64 %121, 18
  %136 = trunc i64 %135 to i32
  %137 = ashr exact i32 %136, 18
  %138 = sub nsw i32 %137, %122
  %139 = or i32 %134, %138
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %142, label %141

141:                                              ; preds = %112
  call void @_ZN6SkScan8FillPathERK6SkPathRK8SkRegionP9SkBlitter(%class.SkPath* dereferenceable(16) %0, %class.SkRegion* dereferenceable(24) %1, %class.SkBlitter* %2) #10
  br label %335

142:                                              ; preds = %112
  %143 = bitcast %class.SkRegion* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %143) #10
  %144 = bitcast %class.SkRegion* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %144, i8 -86, i64 24, i1 false)
  call void @_ZN8SkRegionC1Ev(%class.SkRegion* nonnull %9) #10
  %145 = getelementptr inbounds %class.SkRegion, %class.SkRegion* %1, i64 0, i32 0, i32 2
  %146 = load i32, i32* %145, align 4
  %147 = icmp sgt i32 %146, 32767
  br i1 %147, label %152, label %148

148:                                              ; preds = %142
  %149 = getelementptr inbounds %class.SkRegion, %class.SkRegion* %1, i64 0, i32 0, i32 3
  %150 = load i32, i32* %149, align 4
  %151 = icmp sgt i32 %150, 32767
  br i1 %151, label %152, label %155

152:                                              ; preds = %148, %142
  %153 = bitcast %struct.SkIRect* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %153) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %153, i8* align 4 bitcast (%struct.SkIRect* @__const._ZN6SkScan12AntiFillPathERK6SkPathRK8SkRegionP9SkBlitterb.limit to i8*), i64 16, i1 false)
  %154 = call zeroext i1 @_ZN8SkRegion2opERKS_RK7SkIRectNS_2OpE(%class.SkRegion* nonnull %9, %class.SkRegion* dereferenceable(24) %1, %struct.SkIRect* nonnull dereferenceable(16) %10, i32 1) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %153) #10
  br label %155

155:                                              ; preds = %152, %148
  %156 = phi %class.SkRegion* [ %9, %152 ], [ %1, %148 ]
  %157 = bitcast %class.SkScanClipper* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %157) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %157, i8 -86, i64 104, i1 false)
  call void @_ZN13SkScanClipperC1EP9SkBlitterPK8SkRegionRK7SkIRectbb(%class.SkScanClipper* nonnull %11, %class.SkBlitter* %2, %class.SkRegion* %156, %struct.SkIRect* nonnull dereferenceable(16) %7, i1 zeroext false, i1 zeroext false) #10
  %158 = getelementptr inbounds %class.SkScanClipper, %class.SkScanClipper* %11, i64 0, i32 2
  %159 = load %class.SkBlitter*, %class.SkBlitter** %158, align 8
  %160 = icmp eq %class.SkBlitter* %159, null
  br i1 %160, label %161, label %163

161:                                              ; preds = %155
  br i1 %19, label %162, label %332

162:                                              ; preds = %161
  call void @_ZN9SkBlitter10blitRegionERK8SkRegion(%class.SkBlitter* %2, %class.SkRegion* dereferenceable(24) %156) #10
  br label %332

163:                                              ; preds = %155
  br i1 %19, label %164, label %165

164:                                              ; preds = %163
  call void @_Z13sk_blit_aboveP9SkBlitterRK7SkIRectRK8SkRegion(%class.SkBlitter* nonnull %159, %struct.SkIRect* nonnull dereferenceable(16) %7, %class.SkRegion* dereferenceable(24) %156) #10
  br label %165

165:                                              ; preds = %164, %163
  %166 = call i32 @_ZNK6SkPath11countPointsEv(%class.SkPath* %0) #10
  %167 = icmp slt i32 %166, 8
  br i1 %167, label %280, label %168

168:                                              ; preds = %165
  %169 = load %class.SkPathRef*, %class.SkPathRef** %22, align 8
  %170 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %169, i64 0, i32 9
  %171 = load i8, i8* %170, align 8
  %172 = icmp eq i8 %171, 0
  br i1 %172, label %182, label %173

173:                                              ; preds = %168
  %174 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %169, i64 0, i32 1
  %175 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %169, i64 0, i32 3, i32 0
  %176 = load %struct.SkPoint*, %struct.SkPoint** %175, align 8
  %177 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %169, i64 0, i32 3, i32 2
  %178 = load i32, i32* %177, align 4
  %179 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %174, %struct.SkPoint* %176, i32 %178) #10
  %180 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %169, i64 0, i32 10
  %181 = zext i1 %179 to i8
  store i8 %181, i8* %180, align 1
  store i8 0, i8* %170, align 8
  br label %182

182:                                              ; preds = %173, %168
  %183 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %169, i64 0, i32 1, i32 0
  %184 = load float, float* %183, align 4
  %185 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %169, i64 0, i32 1, i32 2
  %186 = load float, float* %185, align 4
  %187 = fcmp olt float %184, %186
  br i1 %187, label %188, label %280

188:                                              ; preds = %182
  %189 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %169, i64 0, i32 1, i32 1
  %190 = load float, float* %189, align 4
  %191 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %169, i64 0, i32 1, i32 3
  %192 = load float, float* %191, align 4
  %193 = fcmp uge float %190, %192
  br i1 %193, label %280, label %194

194:                                              ; preds = %188
  %195 = call <2 x float> @_ZNK6SkPath8getPointEi(%class.SkPath* %0, i32 0) #10
  %196 = call <2 x float> @_ZNK6SkPath8getPointEi(%class.SkPath* %0, i32 1) #10
  %197 = extractelement <2 x float> %195, i32 0
  %198 = extractelement <2 x float> %196, i32 0
  %199 = fsub float %197, %198
  %200 = extractelement <2 x float> %195, i32 1
  %201 = extractelement <2 x float> %196, i32 1
  %202 = fsub float %200, %201
  %203 = call float @_ZN7SkPoint6LengthEff(float %199, float %202) #10
  %204 = call <2 x float> @_ZNK6SkPath8getPointEi(%class.SkPath* %0, i32 2) #10
  %205 = extractelement <2 x float> %204, i32 0
  %206 = fsub float %198, %205
  %207 = extractelement <2 x float> %204, i32 1
  %208 = fsub float %201, %207
  %209 = call float @_ZN7SkPoint6LengthEff(float %206, float %208) #10
  %210 = call <2 x float> @_ZNK6SkPath8getPointEi(%class.SkPath* %0, i32 3) #10
  %211 = extractelement <2 x float> %210, i32 0
  %212 = fsub float %205, %211
  %213 = extractelement <2 x float> %210, i32 1
  %214 = fsub float %207, %213
  %215 = call float @_ZN7SkPoint6LengthEff(float %212, float %214) #10
  %216 = call <2 x float> @_ZNK6SkPath8getPointEi(%class.SkPath* %0, i32 4) #10
  %217 = extractelement <2 x float> %216, i32 0
  %218 = fsub float %211, %217
  %219 = extractelement <2 x float> %216, i32 1
  %220 = fsub float %213, %219
  %221 = call float @_ZN7SkPoint6LengthEff(float %218, float %220) #10
  %222 = call <2 x float> @_ZNK6SkPath8getPointEi(%class.SkPath* %0, i32 5) #10
  %223 = extractelement <2 x float> %222, i32 0
  %224 = fsub float %217, %223
  %225 = extractelement <2 x float> %222, i32 1
  %226 = fsub float %219, %225
  %227 = call float @_ZN7SkPoint6LengthEff(float %224, float %226) #10
  %228 = call <2 x float> @_ZNK6SkPath8getPointEi(%class.SkPath* %0, i32 6) #10
  %229 = extractelement <2 x float> %228, i32 0
  %230 = fsub float %223, %229
  %231 = extractelement <2 x float> %228, i32 1
  %232 = fsub float %225, %231
  %233 = call float @_ZN7SkPoint6LengthEff(float %230, float %232) #10
  %234 = call <2 x float> @_ZNK6SkPath8getPointEi(%class.SkPath* %0, i32 7) #10
  %235 = extractelement <2 x float> %234, i32 0
  %236 = fsub float %229, %235
  %237 = extractelement <2 x float> %234, i32 1
  %238 = fsub float %231, %237
  %239 = call float @_ZN7SkPoint6LengthEff(float %236, float %238) #10
  %240 = load %class.SkPathRef*, %class.SkPathRef** %22, align 8
  %241 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %240, i64 0, i32 9
  %242 = load i8, i8* %241, align 8
  %243 = icmp eq i8 %242, 0
  br i1 %243, label %280, label %244

244:                                              ; preds = %194
  %245 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %240, i64 0, i32 1
  %246 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %240, i64 0, i32 3, i32 0
  %247 = load %struct.SkPoint*, %struct.SkPoint** %246, align 8
  %248 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %240, i64 0, i32 3, i32 2
  %249 = load i32, i32* %248, align 4
  %250 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %245, %struct.SkPoint* %247, i32 %249) #10
  %251 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %240, i64 0, i32 10
  %252 = zext i1 %250 to i8
  store i8 %252, i8* %251, align 1
  store i8 0, i8* %241, align 8
  %253 = load %class.SkPathRef*, %class.SkPathRef** %22, align 8
  %254 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %253, i64 0, i32 9
  %255 = load i8, i8* %254, align 8
  %256 = icmp eq i8 %255, 0
  br i1 %256, label %280, label %257

257:                                              ; preds = %244
  %258 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %253, i64 0, i32 1
  %259 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %253, i64 0, i32 3, i32 0
  %260 = load %struct.SkPoint*, %struct.SkPoint** %259, align 8
  %261 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %253, i64 0, i32 3, i32 2
  %262 = load i32, i32* %261, align 4
  %263 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %258, %struct.SkPoint* %260, i32 %262) #10
  %264 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %253, i64 0, i32 10
  %265 = zext i1 %263 to i8
  store i8 %265, i8* %264, align 1
  store i8 0, i8* %254, align 8
  %266 = load %class.SkPathRef*, %class.SkPathRef** %22, align 8
  %267 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %266, i64 0, i32 9
  %268 = load i8, i8* %267, align 8
  %269 = icmp eq i8 %268, 0
  br i1 %269, label %280, label %270

270:                                              ; preds = %257
  %271 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %266, i64 0, i32 9
  %272 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %266, i64 0, i32 1
  %273 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %266, i64 0, i32 3, i32 0
  %274 = load %struct.SkPoint*, %struct.SkPoint** %273, align 8
  %275 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %266, i64 0, i32 3, i32 2
  %276 = load i32, i32* %275, align 4
  %277 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %272, %struct.SkPoint* %274, i32 %276) #10
  %278 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %266, i64 0, i32 10
  %279 = zext i1 %277 to i8
  store i8 %279, i8* %278, align 1
  store i8 0, i8* %271, align 8
  br label %280

280:                                              ; preds = %194, %244, %257, %270, %165, %182, %188
  %281 = load atomic i8, i8* getelementptr inbounds (%"struct.std::__1::atomic.10", %"struct.std::__1::atomic.10"* @gSkForceAnalyticAA, i64 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 1
  %282 = and i8 %281, 1
  %283 = icmp eq i8 %282, 0
  br i1 %283, label %284, label %306

284:                                              ; preds = %280
  %285 = load atomic i8, i8* getelementptr inbounds (%"struct.std::__1::atomic.10", %"struct.std::__1::atomic.10"* @gSkUseAnalyticAA, i64 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 1
  %286 = and i8 %285, 1
  %287 = icmp eq i8 %286, 0
  br i1 %287, label %288, label %290

288:                                              ; preds = %284
  %289 = getelementptr inbounds %class.SkRegion, %class.SkRegion* %156, i64 0, i32 0
  br label %328

290:                                              ; preds = %284
  %291 = call zeroext i1 @_ZNK6SkPath6isRectEP6SkRectPbP15SkPathDirection(%class.SkPath* %0, %struct.SkRect* null, i8* null, i32* null) #10
  br i1 %291, label %306, label %292

292:                                              ; preds = %290
  %293 = load %class.SkPathRef*, %class.SkPathRef** %22, align 8
  %294 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %293, i64 0, i32 9
  %295 = load i8, i8* %294, align 8
  %296 = icmp eq i8 %295, 0
  br i1 %296, label %308, label %297

297:                                              ; preds = %292
  %298 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %293, i64 0, i32 1
  %299 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %293, i64 0, i32 3, i32 0
  %300 = load %struct.SkPoint*, %struct.SkPoint** %299, align 8
  %301 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %293, i64 0, i32 3, i32 2
  %302 = load i32, i32* %301, align 4
  %303 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %298, %struct.SkPoint* %300, i32 %302) #10
  %304 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %293, i64 0, i32 10
  %305 = zext i1 %303 to i8
  store i8 %305, i8* %304, align 1
  store i8 0, i8* %294, align 8
  br label %308

306:                                              ; preds = %280, %290
  %307 = getelementptr inbounds %class.SkRegion, %class.SkRegion* %156, i64 0, i32 0
  br label %326

308:                                              ; preds = %292, %297
  %309 = call i32 @_ZNK6SkPath11countPointsEv(%class.SkPath* %0) #10
  %310 = sitofp i32 %309 to float
  %311 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %293, i64 0, i32 1, i32 2
  %312 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %293, i64 0, i32 1, i32 0
  %313 = bitcast float* %311 to <2 x float>*
  %314 = load <2 x float>, <2 x float>* %313, align 4
  %315 = bitcast float* %312 to <2 x float>*
  %316 = load <2 x float>, <2 x float>* %315, align 4
  %317 = fsub <2 x float> %314, %316
  %318 = extractelement <2 x float> %317, i32 0
  %319 = extractelement <2 x float> %317, i32 1
  %320 = fcmp olt float %318, %319
  %321 = select i1 %320, float %319, float %318
  %322 = fmul float %321, 5.000000e-01
  %323 = fadd float %322, -1.000000e+01
  %324 = fcmp ogt float %323, %310
  %325 = getelementptr inbounds %class.SkRegion, %class.SkRegion* %156, i64 0, i32 0
  br i1 %324, label %326, label %328

326:                                              ; preds = %306, %308
  %327 = phi %struct.SkIRect* [ %307, %306 ], [ %325, %308 ]
  call void @_ZN6SkScan11AAAFillPathERK6SkPathP9SkBlitterRK7SkIRectS7_b(%class.SkPath* dereferenceable(16) %0, %class.SkBlitter* nonnull %159, %struct.SkIRect* nonnull dereferenceable(16) %7, %struct.SkIRect* dereferenceable(16) %327, i1 zeroext %3) #10
  br label %330

328:                                              ; preds = %288, %308
  %329 = phi %struct.SkIRect* [ %289, %288 ], [ %325, %308 ]
  call void @_ZN6SkScan11SAAFillPathERK6SkPathP9SkBlitterRK7SkIRectS7_b(%class.SkPath* dereferenceable(16) %0, %class.SkBlitter* nonnull %159, %struct.SkIRect* nonnull dereferenceable(16) %7, %struct.SkIRect* dereferenceable(16) %329, i1 zeroext %3)
  br label %330

330:                                              ; preds = %328, %326
  br i1 %19, label %331, label %332

331:                                              ; preds = %330
  call void @_Z13sk_blit_belowP9SkBlitterRK7SkIRectRK8SkRegion(%class.SkBlitter* nonnull %159, %struct.SkIRect* nonnull dereferenceable(16) %7, %class.SkRegion* dereferenceable(24) %156) #10
  br label %332

332:                                              ; preds = %330, %331, %161, %162
  %333 = getelementptr inbounds %class.SkScanClipper, %class.SkScanClipper* %11, i64 0, i32 1, i32 0
  call void @_ZN9SkBlitterD2Ev(%class.SkBlitter* %333) #10
  %334 = getelementptr inbounds %class.SkScanClipper, %class.SkScanClipper* %11, i64 0, i32 0, i32 0
  call void @_ZN9SkBlitterD2Ev(%class.SkBlitter* nonnull %334) #10
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %157) #10
  call void @_ZN8SkRegionD1Ev(%class.SkRegion* nonnull %9) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %143) #10
  br label %335

335:                                              ; preds = %109, %332, %141
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %104) #10
  br label %336

336:                                              ; preds = %101, %102, %335
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %20) #10
  br label %337

337:                                              ; preds = %4, %336
  ret void
}

declare void @_ZN9SkBlitter10blitRegionERK8SkRegion(%class.SkBlitter*, %class.SkRegion* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZN6SkScan8FillPathERK6SkPathRK8SkRegionP9SkBlitter(%class.SkPath* dereferenceable(16), %class.SkRegion* dereferenceable(24), %class.SkBlitter*) local_unnamed_addr #2

declare void @_ZN8SkRegionC1Ev(%class.SkRegion*) unnamed_addr #2

declare zeroext i1 @_ZN8SkRegion2opERKS_RK7SkIRectNS_2OpE(%class.SkRegion*, %class.SkRegion* dereferenceable(24), %struct.SkIRect* dereferenceable(16), i32) local_unnamed_addr #2

declare void @_ZN13SkScanClipperC1EP9SkBlitterPK8SkRegionRK7SkIRectbb(%class.SkScanClipper*, %class.SkBlitter*, %class.SkRegion*, %struct.SkIRect* dereferenceable(16), i1 zeroext, i1 zeroext) unnamed_addr #2

declare void @_Z13sk_blit_aboveP9SkBlitterRK7SkIRectRK8SkRegion(%class.SkBlitter*, %struct.SkIRect* dereferenceable(16), %class.SkRegion* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZN6SkScan11AAAFillPathERK6SkPathP9SkBlitterRK7SkIRectS7_b(%class.SkPath* dereferenceable(16), %class.SkBlitter*, %struct.SkIRect* dereferenceable(16), %struct.SkIRect* dereferenceable(16), i1 zeroext) local_unnamed_addr #2

declare void @_Z13sk_blit_belowP9SkBlitterRK7SkIRectRK8SkRegion(%class.SkBlitter*, %struct.SkIRect* dereferenceable(16), %class.SkRegion* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN8SkRegionD1Ev(%class.SkRegion*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6SkScan8FillPathERK6SkPathRK12SkRasterClipP9SkBlitter(%class.SkPath* dereferenceable(16), %class.SkRasterClip* dereferenceable(72), %class.SkBlitter*) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkRegion, align 8
  %5 = alloca %class.SkAAClipBlitter, align 8
  %6 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %1, i64 0, i32 3
  %7 = load i8, i8* %6, align 1, !range !8
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %59

9:                                                ; preds = %3
  %10 = getelementptr inbounds %class.SkPath, %class.SkPath* %0, i64 0, i32 0, i32 0
  %11 = load %class.SkPathRef*, %class.SkPathRef** %10, align 8
  %12 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %11, i64 0, i32 9
  %13 = load i8, i8* %12, align 8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %9
  %16 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %11, i64 0, i32 10
  %17 = load i8, i8* %16, align 1, !range !8
  br label %27

18:                                               ; preds = %9
  %19 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %11, i64 0, i32 1
  %20 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %11, i64 0, i32 3, i32 0
  %21 = load %struct.SkPoint*, %struct.SkPoint** %20, align 8
  %22 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %11, i64 0, i32 3, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = tail call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %19, %struct.SkPoint* %21, i32 %23) #10
  %25 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %11, i64 0, i32 10
  %26 = zext i1 %24 to i8
  store i8 %26, i8* %25, align 1
  store i8 0, i8* %12, align 8
  br label %27

27:                                               ; preds = %15, %18
  %28 = phi i8 [ %17, %15 ], [ %26, %18 ]
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %59, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %1, i64 0, i32 2
  %32 = load i8, i8* %31, align 8, !range !8
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %36, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %1, i64 0, i32 0
  tail call void @_ZN6SkScan8FillPathERK6SkPathRK8SkRegionP9SkBlitter(%class.SkPath* dereferenceable(16) %0, %class.SkRegion* dereferenceable(24) %35, %class.SkBlitter* %2) #10
  br label %59

36:                                               ; preds = %30
  %37 = bitcast %class.SkRegion* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %37) #10
  %38 = bitcast %class.SkRegion* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %38, i8 -86, i64 24, i1 false)
  call void @_ZN8SkRegionC1Ev(%class.SkRegion* nonnull %4) #10
  %39 = bitcast %class.SkAAClipBlitter* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1120, i8* nonnull %39) #10
  %40 = getelementptr inbounds %class.SkAAClipBlitter, %class.SkAAClipBlitter* %5, i64 0, i32 1
  %41 = bitcast %class.SkBlitter** %40 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %41, i8 -86, i64 1088, i1 false)
  %42 = getelementptr inbounds %class.SkAAClipBlitter, %class.SkAAClipBlitter* %5, i64 0, i32 0, i32 0
  %43 = getelementptr inbounds %class.SkAAClipBlitter, %class.SkAAClipBlitter* %5, i64 0, i32 0, i32 1
  %44 = bitcast %class.SkAutoMalloc* %43 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 16, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV15SkAAClipBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %42, align 8
  %45 = getelementptr inbounds %class.SkAAClipBlitter, %class.SkAAClipBlitter* %5, i64 0, i32 6
  %46 = getelementptr inbounds %class.SkAAClipBlitter, %class.SkAAClipBlitter* %5, i64 0, i32 6, i32 2, i64 0
  %47 = bitcast %class.SkAutoSMalloc* %45 to i32**
  store i32* %46, i32** %47, align 8
  %48 = getelementptr inbounds %class.SkAAClipBlitter, %class.SkAAClipBlitter* %5, i64 0, i32 6, i32 1
  store i64 1024, i64* %48, align 8
  %49 = getelementptr inbounds %class.SkAAClipBlitter, %class.SkAAClipBlitter* %5, i64 0, i32 7
  store i8* null, i8** %49, align 8
  %50 = call dereferenceable(16) %struct.SkIRect* @_ZNK12SkRasterClip9getBoundsEv(%class.SkRasterClip* %1) #10
  %51 = call zeroext i1 @_ZN8SkRegion7setRectERK7SkIRect(%class.SkRegion* nonnull %4, %struct.SkIRect* dereferenceable(16) %50) #10
  %52 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %1, i64 0, i32 1
  %53 = getelementptr inbounds %class.SkAAClipBlitter, %class.SkAAClipBlitter* %5, i64 0, i32 1
  store %class.SkBlitter* %2, %class.SkBlitter** %53, align 8
  %54 = getelementptr inbounds %class.SkAAClipBlitter, %class.SkAAClipBlitter* %5, i64 0, i32 2
  store %class.SkAAClip* %52, %class.SkAAClip** %54, align 8
  %55 = getelementptr inbounds %class.SkAAClipBlitter, %class.SkAAClipBlitter* %5, i64 0, i32 3
  %56 = bitcast %struct.SkIRect* %55 to i8*
  %57 = bitcast %class.SkAAClip* %52 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 4 %57, i64 16, i1 false) #10
  %58 = getelementptr inbounds %class.SkAAClipBlitter, %class.SkAAClipBlitter* %5, i64 0, i32 0
  call void @_ZN6SkScan8FillPathERK6SkPathRK8SkRegionP9SkBlitter(%class.SkPath* dereferenceable(16) %0, %class.SkRegion* nonnull dereferenceable(24) %4, %class.SkBlitter* nonnull %58) #10
  call void @_ZN15SkAAClipBlitterD1Ev(%class.SkAAClipBlitter* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 1120, i8* nonnull %39) #10
  call void @_ZN8SkRegionD1Ev(%class.SkRegion* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %37) #10
  br label %59

59:                                               ; preds = %27, %3, %36, %34
  ret void
}

declare zeroext i1 @_ZN8SkRegion7setRectERK7SkIRect(%class.SkRegion*, %struct.SkIRect* dereferenceable(16)) local_unnamed_addr #2

declare dereferenceable(16) %struct.SkIRect* @_ZNK12SkRasterClip9getBoundsEv(%class.SkRasterClip*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN15SkAAClipBlitterD1Ev(%class.SkAAClipBlitter*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6SkScan12AntiFillPathERK6SkPathRK12SkRasterClipP9SkBlitter(%class.SkPath* dereferenceable(16), %class.SkRasterClip* dereferenceable(72), %class.SkBlitter*) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkRegion, align 8
  %5 = alloca %class.SkAAClipBlitter, align 8
  %6 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %1, i64 0, i32 3
  %7 = load i8, i8* %6, align 1, !range !8
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %59

9:                                                ; preds = %3
  %10 = getelementptr inbounds %class.SkPath, %class.SkPath* %0, i64 0, i32 0, i32 0
  %11 = load %class.SkPathRef*, %class.SkPathRef** %10, align 8
  %12 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %11, i64 0, i32 9
  %13 = load i8, i8* %12, align 8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %9
  %16 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %11, i64 0, i32 10
  %17 = load i8, i8* %16, align 1, !range !8
  br label %27

18:                                               ; preds = %9
  %19 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %11, i64 0, i32 1
  %20 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %11, i64 0, i32 3, i32 0
  %21 = load %struct.SkPoint*, %struct.SkPoint** %20, align 8
  %22 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %11, i64 0, i32 3, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = tail call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %19, %struct.SkPoint* %21, i32 %23) #10
  %25 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %11, i64 0, i32 10
  %26 = zext i1 %24 to i8
  store i8 %26, i8* %25, align 1
  store i8 0, i8* %12, align 8
  br label %27

27:                                               ; preds = %15, %18
  %28 = phi i8 [ %17, %15 ], [ %26, %18 ]
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %59, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %1, i64 0, i32 2
  %32 = load i8, i8* %31, align 8, !range !8
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %36, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %1, i64 0, i32 0
  tail call void @_ZN6SkScan12AntiFillPathERK6SkPathRK8SkRegionP9SkBlitterb(%class.SkPath* dereferenceable(16) %0, %class.SkRegion* dereferenceable(24) %35, %class.SkBlitter* %2, i1 zeroext false)
  br label %59

36:                                               ; preds = %30
  %37 = bitcast %class.SkRegion* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %37) #10
  %38 = bitcast %class.SkRegion* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %38, i8 -86, i64 24, i1 false)
  call void @_ZN8SkRegionC1Ev(%class.SkRegion* nonnull %4) #10
  %39 = bitcast %class.SkAAClipBlitter* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1120, i8* nonnull %39) #10
  %40 = getelementptr inbounds %class.SkAAClipBlitter, %class.SkAAClipBlitter* %5, i64 0, i32 1
  %41 = bitcast %class.SkBlitter** %40 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %41, i8 -86, i64 1088, i1 false)
  %42 = getelementptr inbounds %class.SkAAClipBlitter, %class.SkAAClipBlitter* %5, i64 0, i32 0, i32 0
  %43 = getelementptr inbounds %class.SkAAClipBlitter, %class.SkAAClipBlitter* %5, i64 0, i32 0, i32 1
  %44 = bitcast %class.SkAutoMalloc* %43 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 16, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV15SkAAClipBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %42, align 8
  %45 = getelementptr inbounds %class.SkAAClipBlitter, %class.SkAAClipBlitter* %5, i64 0, i32 6
  %46 = getelementptr inbounds %class.SkAAClipBlitter, %class.SkAAClipBlitter* %5, i64 0, i32 6, i32 2, i64 0
  %47 = bitcast %class.SkAutoSMalloc* %45 to i32**
  store i32* %46, i32** %47, align 8
  %48 = getelementptr inbounds %class.SkAAClipBlitter, %class.SkAAClipBlitter* %5, i64 0, i32 6, i32 1
  store i64 1024, i64* %48, align 8
  %49 = getelementptr inbounds %class.SkAAClipBlitter, %class.SkAAClipBlitter* %5, i64 0, i32 7
  store i8* null, i8** %49, align 8
  %50 = call dereferenceable(16) %struct.SkIRect* @_ZNK12SkRasterClip9getBoundsEv(%class.SkRasterClip* %1) #10
  %51 = call zeroext i1 @_ZN8SkRegion7setRectERK7SkIRect(%class.SkRegion* nonnull %4, %struct.SkIRect* dereferenceable(16) %50) #10
  %52 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %1, i64 0, i32 1
  %53 = getelementptr inbounds %class.SkAAClipBlitter, %class.SkAAClipBlitter* %5, i64 0, i32 1
  store %class.SkBlitter* %2, %class.SkBlitter** %53, align 8
  %54 = getelementptr inbounds %class.SkAAClipBlitter, %class.SkAAClipBlitter* %5, i64 0, i32 2
  store %class.SkAAClip* %52, %class.SkAAClip** %54, align 8
  %55 = getelementptr inbounds %class.SkAAClipBlitter, %class.SkAAClipBlitter* %5, i64 0, i32 3
  %56 = bitcast %struct.SkIRect* %55 to i8*
  %57 = bitcast %class.SkAAClip* %52 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 4 %57, i64 16, i1 false) #10
  %58 = getelementptr inbounds %class.SkAAClipBlitter, %class.SkAAClipBlitter* %5, i64 0, i32 0
  call void @_ZN6SkScan12AntiFillPathERK6SkPathRK8SkRegionP9SkBlitterb(%class.SkPath* dereferenceable(16) %0, %class.SkRegion* nonnull dereferenceable(24) %4, %class.SkBlitter* nonnull %58, i1 zeroext true)
  call void @_ZN15SkAAClipBlitterD1Ev(%class.SkAAClipBlitter* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 1120, i8* nonnull %39) #10
  call void @_ZN8SkRegionD1Ev(%class.SkRegion* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %37) #10
  br label %59

59:                                               ; preds = %27, %3, %36, %34
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12SuperBlitterD0Ev(%class.SuperBlitter*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV12SuperBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  tail call void @_ZN12SuperBlitter5flushEv(%class.SuperBlitter* %0) #10
  %3 = getelementptr inbounds %class.SuperBlitter, %class.SuperBlitter* %0, i64 0, i32 0, i32 0
  tail call void @_ZN9SkBlitterD2Ev(%class.SkBlitter* %3) #10
  %4 = bitcast %class.SuperBlitter* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN16BaseSuperBlitter9blitAntiHEiiPKhPKs(%class.BaseSuperBlitter*, i32, i32, i8*, i16*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN16BaseSuperBlitter5blitVEiiih(%class.BaseSuperBlitter*, i32, i32, i32, i8 zeroext) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN9SkBlitter12blitAntiRectEiiiihh(%class.SkBlitter*, i32, i32, i32, i32, i8 zeroext, i8 zeroext) unnamed_addr #2

declare void @_ZN9SkBlitter8blitMaskERK6SkMaskRK7SkIRect(%class.SkBlitter*, %struct.SkMask* dereferenceable(32), %struct.SkIRect* dereferenceable(16)) unnamed_addr #2

declare %class.SkPixmap* @_ZN9SkBlitter17justAnOpaqueColorEPj(%class.SkBlitter*, i32*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9SkBlitter10blitAntiH2Eiijj(%class.SkBlitter*, i32, i32, i32, i32) unnamed_addr #0 comdat align 2 {
  %6 = alloca [3 x i16], align 2
  %7 = alloca [2 x i8], align 1
  %8 = bitcast [3 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 6, i8* nonnull %8) #10
  %9 = getelementptr inbounds [3 x i16], [3 x i16]* %6, i64 0, i64 0
  %10 = getelementptr inbounds [3 x i16], [3 x i16]* %6, i64 0, i64 1
  %11 = getelementptr inbounds [3 x i16], [3 x i16]* %6, i64 0, i64 2
  %12 = getelementptr inbounds [2 x i8], [2 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %12) #10
  %13 = getelementptr inbounds [2 x i8], [2 x i8]* %7, i64 0, i64 1
  store i16 1, i16* %9, align 2
  store i16 1, i16* %10, align 2
  store i16 0, i16* %11, align 2
  %14 = trunc i32 %3 to i8
  store i8 %14, i8* %12, align 1
  %15 = trunc i32 %4 to i8
  store i8 %15, i8* %13, align 1
  %16 = bitcast %class.SkBlitter* %0 to void (%class.SkBlitter*, i32, i32, i8*, i16*)***
  %17 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)**, void (%class.SkBlitter*, i32, i32, i8*, i16*)*** %16, align 8
  %18 = getelementptr inbounds void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %17, i64 3
  %19 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %18, align 8
  call void %19(%class.SkBlitter* %0, i32 %1, i32 %2, i8* nonnull %12, i16* nonnull %9) #10
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %12) #10
  call void @llvm.lifetime.end.p0i8(i64 6, i8* nonnull %8) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9SkBlitter10blitAntiV2Eiijj(%class.SkBlitter*, i32, i32, i32, i32) unnamed_addr #0 comdat align 2 {
  %6 = alloca [2 x i16], align 2
  %7 = alloca [1 x i8], align 1
  %8 = bitcast [2 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #10
  %9 = getelementptr inbounds [2 x i16], [2 x i16]* %6, i64 0, i64 0
  %10 = getelementptr inbounds [2 x i16], [2 x i16]* %6, i64 0, i64 1
  %11 = getelementptr inbounds [1 x i8], [1 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %11) #10
  store i16 1, i16* %9, align 2
  store i16 0, i16* %10, align 2
  %12 = trunc i32 %3 to i8
  store i8 %12, i8* %11, align 1
  %13 = bitcast %class.SkBlitter* %0 to void (%class.SkBlitter*, i32, i32, i8*, i16*)***
  %14 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)**, void (%class.SkBlitter*, i32, i32, i8*, i16*)*** %13, align 8
  %15 = getelementptr inbounds void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %14, i64 3
  %16 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %15, align 8
  call void %16(%class.SkBlitter* %0, i32 %1, i32 %2, i8* nonnull %11, i16* nonnull %9) #10
  store i16 1, i16* %9, align 2
  store i16 0, i16* %10, align 2
  %17 = trunc i32 %4 to i8
  store i8 %17, i8* %11, align 1
  %18 = add nsw i32 %2, 1
  %19 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)**, void (%class.SkBlitter*, i32, i32, i8*, i16*)*** %13, align 8
  %20 = getelementptr inbounds void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %19, i64 3
  %21 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %20, align 8
  call void %21(%class.SkBlitter* %0, i32 %1, i32 %18, i8* nonnull %11, i16* nonnull %9) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %11) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #10
  ret void
}

declare zeroext i1 @_ZNK9SkBlitter13isNullBlitterEv(%class.SkBlitter*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK9SkBlitter20requestRowsPreservedEv(%class.SkBlitter*) unnamed_addr #0 comdat align 2 {
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN9SkBlitter15allocBlitMemoryEm(%class.SkBlitter*, i64) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.SkBlitter, %class.SkBlitter* %0, i64 0, i32 1
  %4 = getelementptr inbounds %class.SkBlitter, %class.SkBlitter* %0, i64 0, i32 1, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %1
  br i1 %6, label %7, label %14

7:                                                ; preds = %2
  %8 = tail call i8* @_Z15sk_malloc_flagsmj(i64 %1, i32 2) #10
  %9 = getelementptr inbounds %class.SkAutoMalloc, %class.SkAutoMalloc* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  store i8* %8, i8** %9, align 8
  %11 = icmp eq i8* %10, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %7
  tail call void @_Z7sk_freePv(i8* nonnull %10) #10
  br label %13

13:                                               ; preds = %12, %7
  store i64 %1, i64* %4, align 8
  br label %14

14:                                               ; preds = %2, %13
  %15 = getelementptr inbounds %class.SkAutoMalloc, %class.SkAutoMalloc* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  ret i8* %16
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN16MaskSuperBlitterD0Ev(%class.MaskSuperBlitter*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV16MaskSuperBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 0, i32 1
  %4 = load %class.SkBlitter*, %class.SkBlitter** %3, align 8
  %5 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 1
  %6 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 2
  %7 = bitcast %class.SkBlitter* %4 to void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)***
  %8 = load void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)**, void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)*** %7, align 8
  %9 = getelementptr inbounds void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)*, void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)** %8, i64 7
  %10 = load void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)*, void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)** %9, align 8
  tail call void %10(%class.SkBlitter* %4, %struct.SkMask* dereferenceable(32) %5, %struct.SkIRect* dereferenceable(16) %6) #10
  %11 = getelementptr inbounds %class.MaskSuperBlitter, %class.MaskSuperBlitter* %0, i64 0, i32 0, i32 0
  tail call void @_ZN9SkBlitterD2Ev(%class.SkBlitter* %11) #10
  %12 = bitcast %class.MaskSuperBlitter* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #11
  ret void
}

declare void @_ZN9SkBlitter8blitRectEiiii(%class.SkBlitter*, i32, i32, i32, i32) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN9SkBlitterD2Ev(%class.SkBlitter*) unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN16BaseSuperBlitterD0Ev(%class.BaseSuperBlitter*) unnamed_addr #6 comdat align 2 {
  tail call void @llvm.trap() #12
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

declare i8* @_Z15sk_malloc_flagsmj(i64, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #7

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #7

declare zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect*, %struct.SkPoint*, i32) local_unnamed_addr #2

declare i32 @_ZNK6SkPath11countPointsEv(%class.SkPath*) local_unnamed_addr #2

declare <2 x float> @_ZNK6SkPath8getPointEi(%class.SkPath*, i32) local_unnamed_addr #2

declare float @_ZN7SkPoint6LengthEff(float, float) local_unnamed_addr #2

declare zeroext i1 @_ZNK6SkPath6isRectEP6SkRectPbP15SkPathDirection(%class.SkPath*, %struct.SkRect*, i8*, i32*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5, !3}
!8 = !{i8 0, i8 2}
