; ModuleID = '../../chrome/browser/extensions/install_prompt_permissions.cc'
source_filename = "../../chrome/browser/extensions/install_prompt_permissions.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.extensions::InstallPromptPermissions" = type { %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector.6" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::vector.6" = type { i64*, i64, %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { i64 }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon }
%struct.anon = type { %"struct.std::__1::__padding", i8 }
%"struct.std::__1::__padding" = type { [1 x i8] }
%"class.extensions::PermissionSet" = type { %"class.extensions::APIPermissionSet", %"class.extensions::ManifestPermissionSet", %"class.extensions::URLPatternSet", %"class.extensions::URLPatternSet", %"class.extensions::URLPatternSet", i32, i32 }
%"class.extensions::APIPermissionSet" = type { %"class.extensions::BaseSetOperators" }
%"class.extensions::BaseSetOperators" = type { %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.12", %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.extensions::ManifestPermissionSet" = type { %"class.extensions::BaseSetOperators.19" }
%"class.extensions::BaseSetOperators.19" = type { %"class.std::__1::map.20" }
%"class.std::__1::map.20" = type { %"class.std::__1::__tree.21" }
%"class.std::__1::__tree.21" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.22", %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.extensions::URLPatternSet" = type { %"class.std::__1::set" }
%"class.std::__1::set" = type { %"class.std::__1::__tree.31" }
%"class.std::__1::__tree.31" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.32", %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::vector.40" = type { %"class.std::__1::__vector_base.41" }
%"class.std::__1::__vector_base.41" = type { %"class.extensions::PermissionMessage"*, %"class.extensions::PermissionMessage"*, %"class.std::__1::__compressed_pair.52" }
%"class.extensions::PermissionMessage" = type { i32 (...)**, %"class.std::__1::basic_string", %"class.extensions::PermissionIDSet", %"class.std::__1::vector" }
%"class.extensions::PermissionIDSet" = type { i32 (...)**, %"class.std::__1::set.42" }
%"class.std::__1::set.42" = type { %"class.std::__1::__tree.43" }
%"class.std::__1::__tree.43" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.44", %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %"class.extensions::PermissionMessage"* }
%"class.extensions::PermissionMessageProvider" = type { i32 (...)** }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::__bit_iterator" = type <{ i64*, i32, [4 x i8] }>

$_ZNSt3__1plIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_ = comdat any

$_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_ = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs = comdat any

$_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_ = comdat any

$_ZNSt3__16vectorIbNS_9allocatorIbEEE7reserveEm = comdat any

$_ZNSt3__16vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb0ELm0EEEEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES8_S8_ = comdat any

$_ZNSt3__116__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_ = comdat any

@.str = private unnamed_addr constant [3 x i16] [i16 45, i16 32, i16 0], align 2
@.str.1 = private unnamed_addr constant [2 x i16] [i16 10, i16 0], align 2

@_ZN10extensions24InstallPromptPermissionsC1Ev = hidden unnamed_addr alias void (%"struct.extensions::InstallPromptPermissions"*), void (%"struct.extensions::InstallPromptPermissions"*)* @_ZN10extensions24InstallPromptPermissionsC2Ev
@_ZN10extensions24InstallPromptPermissionsD1Ev = hidden unnamed_addr alias void (%"struct.extensions::InstallPromptPermissions"*), void (%"struct.extensions::InstallPromptPermissions"*)* @_ZN10extensions24InstallPromptPermissionsD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions24InstallPromptPermissionsC2Ev(%"struct.extensions::InstallPromptPermissions"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"struct.extensions::InstallPromptPermissions"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 72, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions24InstallPromptPermissionsD2Ev(%"struct.extensions::InstallPromptPermissions"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.extensions::InstallPromptPermissions", %"struct.extensions::InstallPromptPermissions"* %0, i64 0, i32 2, i32 0
  %3 = load i64*, i64** %2, align 8
  %4 = icmp eq i64* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = bitcast i64* %3 to i8*
  tail call void @_ZdlPv(i8* %6) #9
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %"struct.extensions::InstallPromptPermissions", %"struct.extensions::InstallPromptPermissions"* %0, i64 0, i32 1
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 0
  %10 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %9, align 8
  %11 = icmp eq %"class.std::__1::basic_string"* %10, null
  br i1 %11, label %34, label %12

12:                                               ; preds = %7
  %13 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  %14 = getelementptr inbounds %"struct.extensions::InstallPromptPermissions", %"struct.extensions::InstallPromptPermissions"* %0, i64 0, i32 1, i32 0, i32 1
  %15 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %14, align 8
  %16 = icmp eq %"class.std::__1::basic_string"* %15, %10
  br i1 %16, label %32, label %17

17:                                               ; preds = %12, %27
  %18 = phi %"class.std::__1::basic_string"* [ %19, %27 ], [ %15, %12 ]
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %18, i64 -1
  %20 = bitcast %"class.std::__1::basic_string"* %19 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %20, i64 0, i32 1, i32 1
  %22 = load i8, i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %17
  %25 = bitcast %"class.std::__1::basic_string"* %19 to i8**
  %26 = load i8*, i8** %25, align 8
  tail call void @_ZdlPv(i8* %26) #9
  br label %27

27:                                               ; preds = %24, %17
  %28 = icmp eq %"class.std::__1::basic_string"* %19, %10
  br i1 %28, label %29, label %17

29:                                               ; preds = %27
  %30 = bitcast %"class.std::__1::vector"* %8 to i8**
  %31 = load i8*, i8** %30, align 8
  br label %32

32:                                               ; preds = %29, %12
  %33 = phi i8* [ %31, %29 ], [ %13, %12 ]
  store %"class.std::__1::basic_string"* %10, %"class.std::__1::basic_string"** %14, align 8
  tail call void @_ZdlPv(i8* %33) #9
  br label %34

34:                                               ; preds = %7, %32
  %35 = getelementptr inbounds %"struct.extensions::InstallPromptPermissions", %"struct.extensions::InstallPromptPermissions"* %0, i64 0, i32 0, i32 0, i32 0
  %36 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %35, align 8
  %37 = icmp eq %"class.std::__1::basic_string"* %36, null
  br i1 %37, label %60, label %38

38:                                               ; preds = %34
  %39 = bitcast %"class.std::__1::basic_string"* %36 to i8*
  %40 = getelementptr inbounds %"struct.extensions::InstallPromptPermissions", %"struct.extensions::InstallPromptPermissions"* %0, i64 0, i32 0, i32 0, i32 1
  %41 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %40, align 8
  %42 = icmp eq %"class.std::__1::basic_string"* %41, %36
  br i1 %42, label %58, label %43

43:                                               ; preds = %38, %53
  %44 = phi %"class.std::__1::basic_string"* [ %45, %53 ], [ %41, %38 ]
  %45 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %44, i64 -1
  %46 = bitcast %"class.std::__1::basic_string"* %45 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %47 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %46, i64 0, i32 1, i32 1
  %48 = load i8, i8* %47, align 1
  %49 = icmp slt i8 %48, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %43
  %51 = bitcast %"class.std::__1::basic_string"* %45 to i8**
  %52 = load i8*, i8** %51, align 8
  tail call void @_ZdlPv(i8* %52) #9
  br label %53

53:                                               ; preds = %50, %43
  %54 = icmp eq %"class.std::__1::basic_string"* %45, %36
  br i1 %54, label %55, label %43

55:                                               ; preds = %53
  %56 = bitcast %"struct.extensions::InstallPromptPermissions"* %0 to i8**
  %57 = load i8*, i8** %56, align 8
  br label %58

58:                                               ; preds = %55, %38
  %59 = phi i8* [ %57, %55 ], [ %39, %38 ]
  store %"class.std::__1::basic_string"* %36, %"class.std::__1::basic_string"** %40, align 8
  tail call void @_ZdlPv(i8* %59) #9
  br label %60

60:                                               ; preds = %34, %58
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions24InstallPromptPermissions21LoadFromPermissionSetEPKNS_13PermissionSetENS_8Manifest4TypeE(%"struct.extensions::InstallPromptPermissions"*, %"class.extensions::PermissionSet"*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::vector.40", align 8
  %5 = alloca %"class.extensions::PermissionIDSet", align 8
  %6 = tail call %"class.extensions::PermissionMessageProvider"* @_ZN10extensions25PermissionMessageProvider3GetEv() #10
  %7 = bitcast %"class.std::__1::vector.40"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #10
  %8 = bitcast %"class.extensions::PermissionIDSet"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #10
  %9 = bitcast %"class.extensions::PermissionMessageProvider"* %6 to void (%"class.extensions::PermissionIDSet"*, %"class.extensions::PermissionMessageProvider"*, %"class.extensions::PermissionSet"*, i32)***
  %10 = load void (%"class.extensions::PermissionIDSet"*, %"class.extensions::PermissionMessageProvider"*, %"class.extensions::PermissionSet"*, i32)**, void (%"class.extensions::PermissionIDSet"*, %"class.extensions::PermissionMessageProvider"*, %"class.extensions::PermissionSet"*, i32)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.extensions::PermissionIDSet"*, %"class.extensions::PermissionMessageProvider"*, %"class.extensions::PermissionSet"*, i32)*, void (%"class.extensions::PermissionIDSet"*, %"class.extensions::PermissionMessageProvider"*, %"class.extensions::PermissionSet"*, i32)** %10, i64 4
  %12 = load void (%"class.extensions::PermissionIDSet"*, %"class.extensions::PermissionMessageProvider"*, %"class.extensions::PermissionSet"*, i32)*, void (%"class.extensions::PermissionIDSet"*, %"class.extensions::PermissionMessageProvider"*, %"class.extensions::PermissionSet"*, i32)** %11, align 8
  call void %12(%"class.extensions::PermissionIDSet"* nonnull sret %5, %"class.extensions::PermissionMessageProvider"* %6, %"class.extensions::PermissionSet"* dereferenceable(128) %1, i32 %2) #10
  %13 = bitcast %"class.extensions::PermissionMessageProvider"* %6 to void (%"class.std::__1::vector.40"*, %"class.extensions::PermissionMessageProvider"*, %"class.extensions::PermissionIDSet"*)***
  %14 = load void (%"class.std::__1::vector.40"*, %"class.extensions::PermissionMessageProvider"*, %"class.extensions::PermissionIDSet"*)**, void (%"class.std::__1::vector.40"*, %"class.extensions::PermissionMessageProvider"*, %"class.extensions::PermissionIDSet"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.std::__1::vector.40"*, %"class.extensions::PermissionMessageProvider"*, %"class.extensions::PermissionIDSet"*)*, void (%"class.std::__1::vector.40"*, %"class.extensions::PermissionMessageProvider"*, %"class.extensions::PermissionIDSet"*)** %14, i64 2
  %16 = load void (%"class.std::__1::vector.40"*, %"class.extensions::PermissionMessageProvider"*, %"class.extensions::PermissionIDSet"*)*, void (%"class.std::__1::vector.40"*, %"class.extensions::PermissionMessageProvider"*, %"class.extensions::PermissionIDSet"*)** %15, align 8
  call void %16(%"class.std::__1::vector.40"* nonnull sret %4, %"class.extensions::PermissionMessageProvider"* %6, %"class.extensions::PermissionIDSet"* nonnull dereferenceable(32) %5) #10
  call void @_ZN10extensions15PermissionIDSetD1Ev(%"class.extensions::PermissionIDSet"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #10
  call void @_ZN10extensions24InstallPromptPermissions21AddPermissionMessagesERKNSt3__16vectorINS_17PermissionMessageENS1_9allocatorIS3_EEEE(%"struct.extensions::InstallPromptPermissions"* %0, %"class.std::__1::vector.40"* nonnull dereferenceable(24) %4)
  %17 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %4, i64 0, i32 0, i32 0
  %18 = load %"class.extensions::PermissionMessage"*, %"class.extensions::PermissionMessage"** %17, align 8
  %19 = icmp eq %"class.extensions::PermissionMessage"* %18, null
  br i1 %19, label %37, label %20

20:                                               ; preds = %3
  %21 = bitcast %"class.extensions::PermissionMessage"* %18 to i8*
  %22 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %4, i64 0, i32 0, i32 1
  %23 = load %"class.extensions::PermissionMessage"*, %"class.extensions::PermissionMessage"** %22, align 8
  %24 = icmp eq %"class.extensions::PermissionMessage"* %23, %18
  br i1 %24, label %35, label %25

25:                                               ; preds = %20, %25
  %26 = phi %"class.extensions::PermissionMessage"* [ %27, %25 ], [ %23, %20 ]
  %27 = getelementptr inbounds %"class.extensions::PermissionMessage", %"class.extensions::PermissionMessage"* %26, i64 -1
  %28 = bitcast %"class.extensions::PermissionMessage"* %27 to void (%"class.extensions::PermissionMessage"*)***
  %29 = load void (%"class.extensions::PermissionMessage"*)**, void (%"class.extensions::PermissionMessage"*)*** %28, align 8
  %30 = load void (%"class.extensions::PermissionMessage"*)*, void (%"class.extensions::PermissionMessage"*)** %29, align 8
  call void %30(%"class.extensions::PermissionMessage"* %27) #10
  %31 = icmp eq %"class.extensions::PermissionMessage"* %27, %18
  br i1 %31, label %32, label %25

32:                                               ; preds = %25
  %33 = bitcast %"class.std::__1::vector.40"* %4 to i8**
  %34 = load i8*, i8** %33, align 8
  br label %35

35:                                               ; preds = %32, %20
  %36 = phi i8* [ %34, %32 ], [ %21, %20 ]
  store %"class.extensions::PermissionMessage"* %18, %"class.extensions::PermissionMessage"** %22, align 8
  call void @_ZdlPv(i8* %36) #9
  br label %37

37:                                               ; preds = %3, %35
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.extensions::PermissionMessageProvider"* @_ZN10extensions25PermissionMessageProvider3GetEv() local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN10extensions15PermissionIDSetD1Ev(%"class.extensions::PermissionIDSet"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions24InstallPromptPermissions21AddPermissionMessagesERKNSt3__16vectorINS_17PermissionMessageENS1_9allocatorIS3_EEEE(%"struct.extensions::InstallPromptPermissions"*, %"class.std::__1::vector.40"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %1, i64 0, i32 0, i32 0
  %8 = load %"class.extensions::PermissionMessage"*, %"class.extensions::PermissionMessage"** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %1, i64 0, i32 0, i32 1
  %10 = load %"class.extensions::PermissionMessage"*, %"class.extensions::PermissionMessage"** %9, align 8
  %11 = icmp eq %"class.extensions::PermissionMessage"* %8, %10
  br i1 %11, label %43, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"struct.extensions::InstallPromptPermissions", %"struct.extensions::InstallPromptPermissions"* %0, i64 0, i32 0, i32 0, i32 1
  %14 = getelementptr inbounds %"struct.extensions::InstallPromptPermissions", %"struct.extensions::InstallPromptPermissions"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %15 = bitcast %"class.std::__1::basic_string"** %13 to i64*
  %16 = getelementptr inbounds %"struct.extensions::InstallPromptPermissions", %"struct.extensions::InstallPromptPermissions"* %0, i64 0, i32 0
  %17 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %20 = bitcast %"class.std::__1::vector"* %4 to i8*
  %21 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %23 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %24 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  %25 = bitcast %"class.std::__1::basic_string"** %22 to i64*
  %26 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %27 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %26, i64 0, i32 1, i32 1
  %28 = bitcast %"class.std::__1::basic_string"* %5 to i8**
  %29 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  %30 = bitcast %"class.std::__1::vector"* %4 to i64*
  %31 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %32 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %31, i64 0, i32 1, i32 1
  %33 = bitcast %"class.std::__1::basic_string"* %3 to i8**
  %34 = bitcast %"class.std::__1::vector"* %4 to i8**
  %35 = getelementptr inbounds %"struct.extensions::InstallPromptPermissions", %"struct.extensions::InstallPromptPermissions"* %0, i64 0, i32 1, i32 0, i32 1
  %36 = getelementptr inbounds %"struct.extensions::InstallPromptPermissions", %"struct.extensions::InstallPromptPermissions"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %37 = bitcast %"class.std::__1::basic_string"** %35 to i64*
  %38 = getelementptr inbounds %"struct.extensions::InstallPromptPermissions", %"struct.extensions::InstallPromptPermissions"* %0, i64 0, i32 1
  %39 = getelementptr inbounds %"struct.extensions::InstallPromptPermissions", %"struct.extensions::InstallPromptPermissions"* %0, i64 0, i32 2
  %40 = getelementptr inbounds %"struct.extensions::InstallPromptPermissions", %"struct.extensions::InstallPromptPermissions"* %0, i64 0, i32 2, i32 1
  %41 = getelementptr inbounds %"struct.extensions::InstallPromptPermissions", %"struct.extensions::InstallPromptPermissions"* %0, i64 0, i32 2, i32 2, i32 0, i32 0
  %42 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %39, i64 0, i32 0
  br label %44

43:                                               ; preds = %519, %2
  ret void

44:                                               ; preds = %12, %519
  %45 = phi %"class.extensions::PermissionMessage"* [ %8, %12 ], [ %520, %519 ]
  %46 = getelementptr inbounds %"class.extensions::PermissionMessage", %"class.extensions::PermissionMessage"* %45, i64 0, i32 1
  %47 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %13, align 8
  %48 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %14, align 8
  %49 = icmp eq %"class.std::__1::basic_string"* %47, %48
  br i1 %49, label %237, label %50

50:                                               ; preds = %44
  %51 = bitcast %"class.std::__1::basic_string"* %46 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %52 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %51, i64 0, i32 1, i32 1
  %53 = load i8, i8* %52, align 1
  %54 = icmp slt i8 %53, 0
  br i1 %54, label %58, label %55

55:                                               ; preds = %50
  %56 = bitcast %"class.std::__1::basic_string"* %47 to i8*
  %57 = bitcast %"class.std::__1::basic_string"* %46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 24, i1 false) #10
  br label %234

58:                                               ; preds = %50
  %59 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %46, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %60 = load i16*, i16** %59, align 8
  %61 = getelementptr inbounds %"class.extensions::PermissionMessage", %"class.extensions::PermissionMessage"* %45, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %62 = load i64, i64* %61, align 8
  %63 = icmp ult i64 %62, 11
  br i1 %63, label %64, label %69

64:                                               ; preds = %58
  %65 = bitcast %"class.std::__1::basic_string"* %47 to i16*
  %66 = trunc i64 %62 to i8
  %67 = bitcast %"class.std::__1::basic_string"* %47 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %68 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %67, i64 0, i32 1, i32 1
  store i8 %66, i8* %68, align 1
  br label %86

69:                                               ; preds = %58
  %70 = icmp ugt i64 %62, 9223372036854775791
  br i1 %70, label %71, label %73

71:                                               ; preds = %69
  %72 = bitcast %"class.std::__1::basic_string"* %47 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %72) #11
  unreachable

73:                                               ; preds = %69
  %74 = add nuw nsw i64 %62, 8
  %75 = and i64 %74, -8
  %76 = icmp slt i64 %75, 0
  br i1 %76, label %77, label %78

77:                                               ; preds = %73
  call void @abort() #11
  unreachable

78:                                               ; preds = %73
  %79 = shl i64 %75, 1
  %80 = call i8* @_Znwm(i64 %79) #9
  %81 = bitcast i8* %80 to i16*
  %82 = bitcast %"class.std::__1::basic_string"* %47 to i8**
  store i8* %80, i8** %82, align 8
  %83 = or i64 %75, -9223372036854775808
  %84 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %47, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %47, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %62, i64* %85, align 8
  br label %86

86:                                               ; preds = %78, %64
  %87 = phi i16* [ %65, %64 ], [ %81, %78 ]
  %88 = add nuw nsw i64 %62, 1
  %89 = add i64 %62, 1
  %90 = icmp ult i64 %89, 16
  br i1 %90, label %181, label %91

91:                                               ; preds = %86
  %92 = getelementptr i16, i16* %87, i64 1
  %93 = getelementptr i16, i16* %92, i64 %62
  %94 = getelementptr i16, i16* %60, i64 1
  %95 = getelementptr i16, i16* %94, i64 %62
  %96 = icmp ult i16* %87, %95
  %97 = icmp ult i16* %60, %93
  %98 = and i1 %96, %97
  br i1 %98, label %181, label %99

99:                                               ; preds = %91
  %100 = and i64 %89, -16
  %101 = sub i64 %88, %100
  %102 = getelementptr i16, i16* %60, i64 %100
  %103 = getelementptr i16, i16* %87, i64 %100
  %104 = add i64 %100, -16
  %105 = lshr exact i64 %104, 4
  %106 = add nuw nsw i64 %105, 1
  %107 = and i64 %106, 3
  %108 = icmp ult i64 %104, 48
  br i1 %108, label %160, label %109

109:                                              ; preds = %99
  %110 = sub nsw i64 %106, %107
  br label %111

111:                                              ; preds = %111, %109
  %112 = phi i64 [ 0, %109 ], [ %157, %111 ]
  %113 = phi i64 [ %110, %109 ], [ %158, %111 ]
  %114 = getelementptr i16, i16* %60, i64 %112
  %115 = getelementptr i16, i16* %87, i64 %112
  %116 = bitcast i16* %114 to <8 x i16>*
  %117 = load <8 x i16>, <8 x i16>* %116, align 2, !alias.scope !2
  %118 = getelementptr i16, i16* %114, i64 8
  %119 = bitcast i16* %118 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 2, !alias.scope !2
  %121 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %117, <8 x i16>* %121, align 2, !alias.scope !5, !noalias !2
  %122 = getelementptr i16, i16* %115, i64 8
  %123 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %120, <8 x i16>* %123, align 2, !alias.scope !5, !noalias !2
  %124 = or i64 %112, 16
  %125 = getelementptr i16, i16* %60, i64 %124
  %126 = getelementptr i16, i16* %87, i64 %124
  %127 = bitcast i16* %125 to <8 x i16>*
  %128 = load <8 x i16>, <8 x i16>* %127, align 2, !alias.scope !2
  %129 = getelementptr i16, i16* %125, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  %131 = load <8 x i16>, <8 x i16>* %130, align 2, !alias.scope !2
  %132 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> %128, <8 x i16>* %132, align 2, !alias.scope !5, !noalias !2
  %133 = getelementptr i16, i16* %126, i64 8
  %134 = bitcast i16* %133 to <8 x i16>*
  store <8 x i16> %131, <8 x i16>* %134, align 2, !alias.scope !5, !noalias !2
  %135 = or i64 %112, 32
  %136 = getelementptr i16, i16* %60, i64 %135
  %137 = getelementptr i16, i16* %87, i64 %135
  %138 = bitcast i16* %136 to <8 x i16>*
  %139 = load <8 x i16>, <8 x i16>* %138, align 2, !alias.scope !2
  %140 = getelementptr i16, i16* %136, i64 8
  %141 = bitcast i16* %140 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 2, !alias.scope !2
  %143 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %139, <8 x i16>* %143, align 2, !alias.scope !5, !noalias !2
  %144 = getelementptr i16, i16* %137, i64 8
  %145 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %145, align 2, !alias.scope !5, !noalias !2
  %146 = or i64 %112, 48
  %147 = getelementptr i16, i16* %60, i64 %146
  %148 = getelementptr i16, i16* %87, i64 %146
  %149 = bitcast i16* %147 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 2, !alias.scope !2
  %151 = getelementptr i16, i16* %147, i64 8
  %152 = bitcast i16* %151 to <8 x i16>*
  %153 = load <8 x i16>, <8 x i16>* %152, align 2, !alias.scope !2
  %154 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %150, <8 x i16>* %154, align 2, !alias.scope !5, !noalias !2
  %155 = getelementptr i16, i16* %148, i64 8
  %156 = bitcast i16* %155 to <8 x i16>*
  store <8 x i16> %153, <8 x i16>* %156, align 2, !alias.scope !5, !noalias !2
  %157 = add i64 %112, 64
  %158 = add i64 %113, -4
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %160, label %111, !llvm.loop !7

160:                                              ; preds = %111, %99
  %161 = phi i64 [ 0, %99 ], [ %157, %111 ]
  %162 = icmp eq i64 %107, 0
  br i1 %162, label %179, label %163

163:                                              ; preds = %160, %163
  %164 = phi i64 [ %176, %163 ], [ %161, %160 ]
  %165 = phi i64 [ %177, %163 ], [ %107, %160 ]
  %166 = getelementptr i16, i16* %60, i64 %164
  %167 = getelementptr i16, i16* %87, i64 %164
  %168 = bitcast i16* %166 to <8 x i16>*
  %169 = load <8 x i16>, <8 x i16>* %168, align 2, !alias.scope !2
  %170 = getelementptr i16, i16* %166, i64 8
  %171 = bitcast i16* %170 to <8 x i16>*
  %172 = load <8 x i16>, <8 x i16>* %171, align 2, !alias.scope !2
  %173 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %173, align 2, !alias.scope !5, !noalias !2
  %174 = getelementptr i16, i16* %167, i64 8
  %175 = bitcast i16* %174 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %175, align 2, !alias.scope !5, !noalias !2
  %176 = add i64 %164, 16
  %177 = add i64 %165, -1
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %179, label %163, !llvm.loop !9

179:                                              ; preds = %163, %160
  %180 = icmp eq i64 %89, %100
  br i1 %180, label %234, label %181

181:                                              ; preds = %179, %91, %86
  %182 = phi i64 [ %88, %91 ], [ %88, %86 ], [ %101, %179 ]
  %183 = phi i16* [ %60, %91 ], [ %60, %86 ], [ %102, %179 ]
  %184 = phi i16* [ %87, %91 ], [ %87, %86 ], [ %103, %179 ]
  %185 = add i64 %182, -1
  %186 = and i64 %182, 7
  %187 = icmp eq i64 %186, 0
  br i1 %187, label %199, label %188

188:                                              ; preds = %181, %188
  %189 = phi i64 [ %194, %188 ], [ %182, %181 ]
  %190 = phi i16* [ %196, %188 ], [ %183, %181 ]
  %191 = phi i16* [ %195, %188 ], [ %184, %181 ]
  %192 = phi i64 [ %197, %188 ], [ %186, %181 ]
  %193 = load i16, i16* %190, align 2
  store i16 %193, i16* %191, align 2
  %194 = add i64 %189, -1
  %195 = getelementptr inbounds i16, i16* %191, i64 1
  %196 = getelementptr inbounds i16, i16* %190, i64 1
  %197 = add i64 %192, -1
  %198 = icmp eq i64 %197, 0
  br i1 %198, label %199, label %188, !llvm.loop !11

199:                                              ; preds = %188, %181
  %200 = phi i64 [ %182, %181 ], [ %194, %188 ]
  %201 = phi i16* [ %183, %181 ], [ %196, %188 ]
  %202 = phi i16* [ %184, %181 ], [ %195, %188 ]
  %203 = icmp ult i64 %185, 7
  br i1 %203, label %234, label %204

204:                                              ; preds = %199, %204
  %205 = phi i64 [ %230, %204 ], [ %200, %199 ]
  %206 = phi i16* [ %232, %204 ], [ %201, %199 ]
  %207 = phi i16* [ %231, %204 ], [ %202, %199 ]
  %208 = load i16, i16* %206, align 2
  store i16 %208, i16* %207, align 2
  %209 = getelementptr inbounds i16, i16* %207, i64 1
  %210 = getelementptr inbounds i16, i16* %206, i64 1
  %211 = load i16, i16* %210, align 2
  store i16 %211, i16* %209, align 2
  %212 = getelementptr inbounds i16, i16* %207, i64 2
  %213 = getelementptr inbounds i16, i16* %206, i64 2
  %214 = load i16, i16* %213, align 2
  store i16 %214, i16* %212, align 2
  %215 = getelementptr inbounds i16, i16* %207, i64 3
  %216 = getelementptr inbounds i16, i16* %206, i64 3
  %217 = load i16, i16* %216, align 2
  store i16 %217, i16* %215, align 2
  %218 = getelementptr inbounds i16, i16* %207, i64 4
  %219 = getelementptr inbounds i16, i16* %206, i64 4
  %220 = load i16, i16* %219, align 2
  store i16 %220, i16* %218, align 2
  %221 = getelementptr inbounds i16, i16* %207, i64 5
  %222 = getelementptr inbounds i16, i16* %206, i64 5
  %223 = load i16, i16* %222, align 2
  store i16 %223, i16* %221, align 2
  %224 = getelementptr inbounds i16, i16* %207, i64 6
  %225 = getelementptr inbounds i16, i16* %206, i64 6
  %226 = load i16, i16* %225, align 2
  store i16 %226, i16* %224, align 2
  %227 = getelementptr inbounds i16, i16* %207, i64 7
  %228 = getelementptr inbounds i16, i16* %206, i64 7
  %229 = load i16, i16* %228, align 2
  store i16 %229, i16* %227, align 2
  %230 = add i64 %205, -8
  %231 = getelementptr inbounds i16, i16* %207, i64 8
  %232 = getelementptr inbounds i16, i16* %206, i64 8
  %233 = icmp eq i64 %230, 0
  br i1 %233, label %234, label %204, !llvm.loop !12

234:                                              ; preds = %199, %204, %179, %55
  %235 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %47, i64 1
  %236 = ptrtoint %"class.std::__1::basic_string"* %235 to i64
  store i64 %236, i64* %15, align 8
  br label %238

237:                                              ; preds = %44
  call void @_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_(%"class.std::__1::vector"* %16, %"class.std::__1::basic_string"* dereferenceable(24) %46) #10
  br label %238

238:                                              ; preds = %234, %237
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 0, i64 24, i1 false) #10
  %239 = getelementptr inbounds %"class.extensions::PermissionMessage", %"class.extensions::PermissionMessage"* %45, i64 0, i32 3, i32 0, i32 0
  %240 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %239, align 8
  %241 = getelementptr inbounds %"class.extensions::PermissionMessage", %"class.extensions::PermissionMessage"* %45, i64 0, i32 3, i32 0, i32 1
  %242 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %241, align 8
  %243 = icmp eq %"class.std::__1::basic_string"* %240, %242
  br i1 %243, label %296, label %244

244:                                              ; preds = %238
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 24, i1 false) #10
  br label %279

245:                                              ; preds = %293
  %246 = load i64, i64* %30, align 8
  %247 = load i64, i64* %25, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %29) #10
  %248 = sub i64 %247, %246
  %249 = sdiv exact i64 %248, 24
  %250 = inttoptr i64 %246 to %"class.std::__1::basic_string"*
  call void @_ZN4base10JoinStringENS_4spanIKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEELm18446744073709551615EEENS_16BasicStringPieceIDsS4_EE(%"class.std::__1::basic_string"* nonnull sret %6, i64 %249, %"class.std::__1::basic_string"* %250, i16* getelementptr inbounds ([2 x i16], [2 x i16]* @.str.1, i64 0, i64 0), i64 1) #10
  %251 = load i8, i8* %32, align 1
  %252 = icmp slt i8 %251, 0
  br i1 %252, label %253, label %255

253:                                              ; preds = %245
  %254 = load i8*, i8** %33, align 8
  call void @_ZdlPv(i8* %254) #9
  br label %255

255:                                              ; preds = %253, %245
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %17, i8* nonnull align 8 %29, i64 24, i1 false) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %29) #10
  %256 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %21, align 8
  %257 = icmp eq %"class.std::__1::basic_string"* %256, null
  br i1 %257, label %278, label %258

258:                                              ; preds = %255
  %259 = bitcast %"class.std::__1::basic_string"* %256 to i8*
  %260 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %261 = icmp eq %"class.std::__1::basic_string"* %260, %256
  br i1 %261, label %276, label %262

262:                                              ; preds = %258, %272
  %263 = phi %"class.std::__1::basic_string"* [ %264, %272 ], [ %260, %258 ]
  %264 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %263, i64 -1
  %265 = bitcast %"class.std::__1::basic_string"* %264 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %266 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %265, i64 0, i32 1, i32 1
  %267 = load i8, i8* %266, align 1
  %268 = icmp slt i8 %267, 0
  br i1 %268, label %269, label %272

269:                                              ; preds = %262
  %270 = bitcast %"class.std::__1::basic_string"* %264 to i8**
  %271 = load i8*, i8** %270, align 8
  call void @_ZdlPv(i8* %271) #9
  br label %272

272:                                              ; preds = %269, %262
  %273 = icmp eq %"class.std::__1::basic_string"* %264, %256
  br i1 %273, label %274, label %262

274:                                              ; preds = %272
  %275 = load i8*, i8** %34, align 8
  br label %276

276:                                              ; preds = %274, %258
  %277 = phi i8* [ %275, %274 ], [ %259, %258 ]
  store %"class.std::__1::basic_string"* %256, %"class.std::__1::basic_string"** %22, align 8
  call void @_ZdlPv(i8* %277) #9
  br label %278

278:                                              ; preds = %255, %276
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #10
  br label %296

279:                                              ; preds = %244, %293
  %280 = phi %"class.std::__1::basic_string"* [ %294, %293 ], [ %240, %244 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %24) #10
  call void @_ZNSt3__1plIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_(%"class.std::__1::basic_string"* nonnull sret %5, i16* getelementptr inbounds ([3 x i16], [3 x i16]* @.str, i64 0, i64 0), %"class.std::__1::basic_string"* dereferenceable(24) %280)
  %281 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %22, align 8
  %282 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %23, align 8
  %283 = icmp ult %"class.std::__1::basic_string"* %281, %282
  br i1 %283, label %284, label %288

284:                                              ; preds = %279
  %285 = bitcast %"class.std::__1::basic_string"* %281 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %285, i8* nonnull align 8 %24, i64 24, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 0, i64 24, i1 false) #10
  %286 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %281, i64 1
  %287 = ptrtoint %"class.std::__1::basic_string"* %286 to i64
  store i64 %287, i64* %25, align 8
  br label %293

288:                                              ; preds = %279
  call void @_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_(%"class.std::__1::vector"* nonnull %4, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %5) #10
  %289 = load i8, i8* %27, align 1
  %290 = icmp slt i8 %289, 0
  br i1 %290, label %291, label %293

291:                                              ; preds = %288
  %292 = load i8*, i8** %28, align 8
  call void @_ZdlPv(i8* %292) #9
  br label %293

293:                                              ; preds = %284, %288, %291
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %24) #10
  %294 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %280, i64 1
  %295 = icmp eq %"class.std::__1::basic_string"* %294, %242
  br i1 %295, label %245, label %279

296:                                              ; preds = %278, %238
  %297 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %35, align 8
  %298 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %36, align 8
  %299 = icmp eq %"class.std::__1::basic_string"* %297, %298
  br i1 %299, label %482, label %300

300:                                              ; preds = %296
  %301 = load i8, i8* %32, align 1
  %302 = icmp slt i8 %301, 0
  br i1 %302, label %305, label %303

303:                                              ; preds = %300
  %304 = bitcast %"class.std::__1::basic_string"* %297 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %304, i8* nonnull align 8 %17, i64 24, i1 false) #10
  br label %479

305:                                              ; preds = %300
  %306 = load i16*, i16** %18, align 8
  %307 = load i64, i64* %19, align 8
  %308 = icmp ult i64 %307, 11
  br i1 %308, label %309, label %314

309:                                              ; preds = %305
  %310 = bitcast %"class.std::__1::basic_string"* %297 to i16*
  %311 = trunc i64 %307 to i8
  %312 = bitcast %"class.std::__1::basic_string"* %297 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %313 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %312, i64 0, i32 1, i32 1
  store i8 %311, i8* %313, align 1
  br label %331

314:                                              ; preds = %305
  %315 = icmp ugt i64 %307, 9223372036854775791
  br i1 %315, label %316, label %318

316:                                              ; preds = %314
  %317 = bitcast %"class.std::__1::basic_string"* %297 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %317) #11
  unreachable

318:                                              ; preds = %314
  %319 = add nuw nsw i64 %307, 8
  %320 = and i64 %319, -8
  %321 = icmp slt i64 %320, 0
  br i1 %321, label %322, label %323

322:                                              ; preds = %318
  call void @abort() #11
  unreachable

323:                                              ; preds = %318
  %324 = shl i64 %320, 1
  %325 = call i8* @_Znwm(i64 %324) #9
  %326 = bitcast i8* %325 to i16*
  %327 = bitcast %"class.std::__1::basic_string"* %297 to i8**
  store i8* %325, i8** %327, align 8
  %328 = or i64 %320, -9223372036854775808
  %329 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %297, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %328, i64* %329, align 8
  %330 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %297, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %307, i64* %330, align 8
  br label %331

331:                                              ; preds = %323, %309
  %332 = phi i16* [ %310, %309 ], [ %326, %323 ]
  %333 = add nuw nsw i64 %307, 1
  %334 = add i64 %307, 1
  %335 = icmp ult i64 %334, 16
  br i1 %335, label %426, label %336

336:                                              ; preds = %331
  %337 = getelementptr i16, i16* %332, i64 1
  %338 = getelementptr i16, i16* %337, i64 %307
  %339 = getelementptr i16, i16* %306, i64 1
  %340 = getelementptr i16, i16* %339, i64 %307
  %341 = icmp ult i16* %332, %340
  %342 = icmp ult i16* %306, %338
  %343 = and i1 %341, %342
  br i1 %343, label %426, label %344

344:                                              ; preds = %336
  %345 = and i64 %334, -16
  %346 = sub i64 %333, %345
  %347 = getelementptr i16, i16* %306, i64 %345
  %348 = getelementptr i16, i16* %332, i64 %345
  %349 = add i64 %345, -16
  %350 = lshr exact i64 %349, 4
  %351 = add nuw nsw i64 %350, 1
  %352 = and i64 %351, 3
  %353 = icmp ult i64 %349, 48
  br i1 %353, label %405, label %354

354:                                              ; preds = %344
  %355 = sub nsw i64 %351, %352
  br label %356

356:                                              ; preds = %356, %354
  %357 = phi i64 [ 0, %354 ], [ %402, %356 ]
  %358 = phi i64 [ %355, %354 ], [ %403, %356 ]
  %359 = getelementptr i16, i16* %306, i64 %357
  %360 = getelementptr i16, i16* %332, i64 %357
  %361 = bitcast i16* %359 to <8 x i16>*
  %362 = load <8 x i16>, <8 x i16>* %361, align 2, !alias.scope !13
  %363 = getelementptr i16, i16* %359, i64 8
  %364 = bitcast i16* %363 to <8 x i16>*
  %365 = load <8 x i16>, <8 x i16>* %364, align 2, !alias.scope !13
  %366 = bitcast i16* %360 to <8 x i16>*
  store <8 x i16> %362, <8 x i16>* %366, align 2, !alias.scope !16, !noalias !13
  %367 = getelementptr i16, i16* %360, i64 8
  %368 = bitcast i16* %367 to <8 x i16>*
  store <8 x i16> %365, <8 x i16>* %368, align 2, !alias.scope !16, !noalias !13
  %369 = or i64 %357, 16
  %370 = getelementptr i16, i16* %306, i64 %369
  %371 = getelementptr i16, i16* %332, i64 %369
  %372 = bitcast i16* %370 to <8 x i16>*
  %373 = load <8 x i16>, <8 x i16>* %372, align 2, !alias.scope !13
  %374 = getelementptr i16, i16* %370, i64 8
  %375 = bitcast i16* %374 to <8 x i16>*
  %376 = load <8 x i16>, <8 x i16>* %375, align 2, !alias.scope !13
  %377 = bitcast i16* %371 to <8 x i16>*
  store <8 x i16> %373, <8 x i16>* %377, align 2, !alias.scope !16, !noalias !13
  %378 = getelementptr i16, i16* %371, i64 8
  %379 = bitcast i16* %378 to <8 x i16>*
  store <8 x i16> %376, <8 x i16>* %379, align 2, !alias.scope !16, !noalias !13
  %380 = or i64 %357, 32
  %381 = getelementptr i16, i16* %306, i64 %380
  %382 = getelementptr i16, i16* %332, i64 %380
  %383 = bitcast i16* %381 to <8 x i16>*
  %384 = load <8 x i16>, <8 x i16>* %383, align 2, !alias.scope !13
  %385 = getelementptr i16, i16* %381, i64 8
  %386 = bitcast i16* %385 to <8 x i16>*
  %387 = load <8 x i16>, <8 x i16>* %386, align 2, !alias.scope !13
  %388 = bitcast i16* %382 to <8 x i16>*
  store <8 x i16> %384, <8 x i16>* %388, align 2, !alias.scope !16, !noalias !13
  %389 = getelementptr i16, i16* %382, i64 8
  %390 = bitcast i16* %389 to <8 x i16>*
  store <8 x i16> %387, <8 x i16>* %390, align 2, !alias.scope !16, !noalias !13
  %391 = or i64 %357, 48
  %392 = getelementptr i16, i16* %306, i64 %391
  %393 = getelementptr i16, i16* %332, i64 %391
  %394 = bitcast i16* %392 to <8 x i16>*
  %395 = load <8 x i16>, <8 x i16>* %394, align 2, !alias.scope !13
  %396 = getelementptr i16, i16* %392, i64 8
  %397 = bitcast i16* %396 to <8 x i16>*
  %398 = load <8 x i16>, <8 x i16>* %397, align 2, !alias.scope !13
  %399 = bitcast i16* %393 to <8 x i16>*
  store <8 x i16> %395, <8 x i16>* %399, align 2, !alias.scope !16, !noalias !13
  %400 = getelementptr i16, i16* %393, i64 8
  %401 = bitcast i16* %400 to <8 x i16>*
  store <8 x i16> %398, <8 x i16>* %401, align 2, !alias.scope !16, !noalias !13
  %402 = add i64 %357, 64
  %403 = add i64 %358, -4
  %404 = icmp eq i64 %403, 0
  br i1 %404, label %405, label %356, !llvm.loop !18

405:                                              ; preds = %356, %344
  %406 = phi i64 [ 0, %344 ], [ %402, %356 ]
  %407 = icmp eq i64 %352, 0
  br i1 %407, label %424, label %408

408:                                              ; preds = %405, %408
  %409 = phi i64 [ %421, %408 ], [ %406, %405 ]
  %410 = phi i64 [ %422, %408 ], [ %352, %405 ]
  %411 = getelementptr i16, i16* %306, i64 %409
  %412 = getelementptr i16, i16* %332, i64 %409
  %413 = bitcast i16* %411 to <8 x i16>*
  %414 = load <8 x i16>, <8 x i16>* %413, align 2, !alias.scope !13
  %415 = getelementptr i16, i16* %411, i64 8
  %416 = bitcast i16* %415 to <8 x i16>*
  %417 = load <8 x i16>, <8 x i16>* %416, align 2, !alias.scope !13
  %418 = bitcast i16* %412 to <8 x i16>*
  store <8 x i16> %414, <8 x i16>* %418, align 2, !alias.scope !16, !noalias !13
  %419 = getelementptr i16, i16* %412, i64 8
  %420 = bitcast i16* %419 to <8 x i16>*
  store <8 x i16> %417, <8 x i16>* %420, align 2, !alias.scope !16, !noalias !13
  %421 = add i64 %409, 16
  %422 = add i64 %410, -1
  %423 = icmp eq i64 %422, 0
  br i1 %423, label %424, label %408, !llvm.loop !19

424:                                              ; preds = %408, %405
  %425 = icmp eq i64 %334, %345
  br i1 %425, label %479, label %426

426:                                              ; preds = %424, %336, %331
  %427 = phi i64 [ %333, %336 ], [ %333, %331 ], [ %346, %424 ]
  %428 = phi i16* [ %306, %336 ], [ %306, %331 ], [ %347, %424 ]
  %429 = phi i16* [ %332, %336 ], [ %332, %331 ], [ %348, %424 ]
  %430 = add i64 %427, -1
  %431 = and i64 %427, 7
  %432 = icmp eq i64 %431, 0
  br i1 %432, label %444, label %433

433:                                              ; preds = %426, %433
  %434 = phi i64 [ %439, %433 ], [ %427, %426 ]
  %435 = phi i16* [ %441, %433 ], [ %428, %426 ]
  %436 = phi i16* [ %440, %433 ], [ %429, %426 ]
  %437 = phi i64 [ %442, %433 ], [ %431, %426 ]
  %438 = load i16, i16* %435, align 2
  store i16 %438, i16* %436, align 2
  %439 = add i64 %434, -1
  %440 = getelementptr inbounds i16, i16* %436, i64 1
  %441 = getelementptr inbounds i16, i16* %435, i64 1
  %442 = add i64 %437, -1
  %443 = icmp eq i64 %442, 0
  br i1 %443, label %444, label %433, !llvm.loop !20

444:                                              ; preds = %433, %426
  %445 = phi i64 [ %427, %426 ], [ %439, %433 ]
  %446 = phi i16* [ %428, %426 ], [ %441, %433 ]
  %447 = phi i16* [ %429, %426 ], [ %440, %433 ]
  %448 = icmp ult i64 %430, 7
  br i1 %448, label %479, label %449

449:                                              ; preds = %444, %449
  %450 = phi i64 [ %475, %449 ], [ %445, %444 ]
  %451 = phi i16* [ %477, %449 ], [ %446, %444 ]
  %452 = phi i16* [ %476, %449 ], [ %447, %444 ]
  %453 = load i16, i16* %451, align 2
  store i16 %453, i16* %452, align 2
  %454 = getelementptr inbounds i16, i16* %452, i64 1
  %455 = getelementptr inbounds i16, i16* %451, i64 1
  %456 = load i16, i16* %455, align 2
  store i16 %456, i16* %454, align 2
  %457 = getelementptr inbounds i16, i16* %452, i64 2
  %458 = getelementptr inbounds i16, i16* %451, i64 2
  %459 = load i16, i16* %458, align 2
  store i16 %459, i16* %457, align 2
  %460 = getelementptr inbounds i16, i16* %452, i64 3
  %461 = getelementptr inbounds i16, i16* %451, i64 3
  %462 = load i16, i16* %461, align 2
  store i16 %462, i16* %460, align 2
  %463 = getelementptr inbounds i16, i16* %452, i64 4
  %464 = getelementptr inbounds i16, i16* %451, i64 4
  %465 = load i16, i16* %464, align 2
  store i16 %465, i16* %463, align 2
  %466 = getelementptr inbounds i16, i16* %452, i64 5
  %467 = getelementptr inbounds i16, i16* %451, i64 5
  %468 = load i16, i16* %467, align 2
  store i16 %468, i16* %466, align 2
  %469 = getelementptr inbounds i16, i16* %452, i64 6
  %470 = getelementptr inbounds i16, i16* %451, i64 6
  %471 = load i16, i16* %470, align 2
  store i16 %471, i16* %469, align 2
  %472 = getelementptr inbounds i16, i16* %452, i64 7
  %473 = getelementptr inbounds i16, i16* %451, i64 7
  %474 = load i16, i16* %473, align 2
  store i16 %474, i16* %472, align 2
  %475 = add i64 %450, -8
  %476 = getelementptr inbounds i16, i16* %452, i64 8
  %477 = getelementptr inbounds i16, i16* %451, i64 8
  %478 = icmp eq i64 %475, 0
  br i1 %478, label %479, label %449, !llvm.loop !21

479:                                              ; preds = %444, %449, %424, %303
  %480 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %297, i64 1
  %481 = ptrtoint %"class.std::__1::basic_string"* %480 to i64
  store i64 %481, i64* %37, align 8
  br label %483

482:                                              ; preds = %296
  call void @_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_(%"class.std::__1::vector"* %38, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %3) #10
  br label %483

483:                                              ; preds = %479, %482
  %484 = load i64, i64* %40, align 8
  %485 = load i64, i64* %41, align 8
  %486 = shl i64 %485, 6
  %487 = icmp eq i64 %484, %486
  br i1 %487, label %488, label %504

488:                                              ; preds = %483
  %489 = add i64 %484, 1
  %490 = icmp slt i64 %489, 0
  br i1 %490, label %491, label %493

491:                                              ; preds = %488
  %492 = bitcast %"class.std::__1::vector.6"* %39 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %492) #11
  unreachable

493:                                              ; preds = %488
  %494 = icmp ult i64 %484, 4611686018427387903
  br i1 %494, label %495, label %501

495:                                              ; preds = %493
  %496 = shl i64 %485, 7
  %497 = add nuw nsw i64 %484, 64
  %498 = and i64 %497, -64
  %499 = icmp ult i64 %496, %498
  %500 = select i1 %499, i64 %498, i64 %496
  br label %501

501:                                              ; preds = %495, %493
  %502 = phi i64 [ %500, %495 ], [ 9223372036854775807, %493 ]
  call void @_ZNSt3__16vectorIbNS_9allocatorIbEEE7reserveEm(%"class.std::__1::vector.6"* %39, i64 %502) #10
  %503 = load i64, i64* %40, align 8
  br label %504

504:                                              ; preds = %501, %483
  %505 = phi i64 [ %503, %501 ], [ %484, %483 ]
  %506 = add i64 %505, 1
  store i64 %506, i64* %40, align 8
  %507 = load i64*, i64** %42, align 8
  %508 = lshr i64 %505, 6
  %509 = getelementptr inbounds i64, i64* %507, i64 %508
  %510 = and i64 %505, 63
  %511 = shl i64 1, %510
  %512 = xor i64 %511, -1
  %513 = load i64, i64* %509, align 8
  %514 = and i64 %513, %512
  store i64 %514, i64* %509, align 8
  %515 = load i8, i8* %32, align 1
  %516 = icmp slt i8 %515, 0
  br i1 %516, label %517, label %519

517:                                              ; preds = %504
  %518 = load i8*, i8** %33, align 8
  call void @_ZdlPv(i8* %518) #9
  br label %519

519:                                              ; preds = %504, %517
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #10
  %520 = getelementptr inbounds %"class.extensions::PermissionMessage", %"class.extensions::PermissionMessage"* %45, i64 1
  %521 = icmp eq %"class.extensions::PermissionMessage"* %520, %10
  br i1 %521, label %43, label %44
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__1plIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_(%"class.std::__1::basic_string"* noalias sret, i16*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 comdat {
  %4 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %7 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #10
  %8 = load i16, i16* %1, align 2
  %9 = icmp eq i16 %8, 0
  br i1 %9, label %17, label %10

10:                                               ; preds = %3, %10
  %11 = phi i64 [ %13, %10 ], [ 0, %3 ]
  %12 = phi i16* [ %14, %10 ], [ %1, %3 ]
  %13 = add i64 %11, 1
  %14 = getelementptr inbounds i16, i16* %12, i64 1
  %15 = load i16, i16* %14, align 2
  %16 = icmp eq i16 %15, 0
  br i1 %16, label %17, label %10

17:                                               ; preds = %10, %3
  %18 = phi i64 [ 0, %3 ], [ %13, %10 ]
  %19 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %19, i64 0, i32 1, i32 1
  %21 = load i8, i8* %20, align 1
  %22 = icmp slt i8 %21, 0
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = zext i8 %21 to i64
  %26 = select i1 %22, i64 %24, i64 %25
  %27 = add i64 %26, %18
  %28 = icmp ugt i64 %27, 9223372036854775791
  br i1 %28, label %29, label %31

29:                                               ; preds = %17
  %30 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %30) #11
  unreachable

31:                                               ; preds = %17
  %32 = icmp ult i64 %27, 11
  br i1 %32, label %33, label %38

33:                                               ; preds = %31
  %34 = trunc i64 %18 to i8
  %35 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %36 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %35, i64 0, i32 1, i32 1
  store i8 %34, i8* %36, align 1
  %37 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  br label %49

38:                                               ; preds = %31
  %39 = add nuw nsw i64 %27, 8
  %40 = and i64 %39, -8
  %41 = icmp slt i64 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %38
  tail call void @abort() #11
  unreachable

43:                                               ; preds = %38
  %44 = shl i64 %40, 1
  %45 = tail call i8* @_Znwm(i64 %44) #9
  %46 = bitcast i8* %45 to i16*
  %47 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %45, i8** %47, align 8
  %48 = or i64 %40, -9223372036854775808
  store i64 %48, i64* %6, align 8
  store i64 %18, i64* %5, align 8
  br label %49

49:                                               ; preds = %43, %33
  %50 = phi i16* [ %37, %33 ], [ %46, %43 ]
  %51 = icmp eq i64 %18, 0
  br i1 %51, label %208, label %52

52:                                               ; preds = %49
  store i16 %8, i16* %50, align 2
  %53 = add i64 %18, -1
  %54 = getelementptr inbounds i16, i16* %1, i64 1
  %55 = icmp eq i64 %53, 0
  br i1 %55, label %206, label %56

56:                                               ; preds = %52
  %57 = icmp ult i64 %53, 16
  br i1 %57, label %153, label %58

58:                                               ; preds = %56
  %59 = getelementptr i16, i16* %50, i64 1
  %60 = getelementptr i16, i16* %50, i64 %18
  %61 = getelementptr i16, i16* %1, i64 %18
  %62 = icmp ult i16* %59, %61
  %63 = icmp ult i16* %54, %60
  %64 = and i1 %62, %63
  br i1 %64, label %153, label %65

65:                                               ; preds = %58
  %66 = and i64 %53, -16
  %67 = getelementptr i16, i16* %54, i64 %66
  %68 = sub i64 %53, %66
  %69 = getelementptr i16, i16* %50, i64 %66
  %70 = add i64 %66, -16
  %71 = lshr exact i64 %70, 4
  %72 = add nuw nsw i64 %71, 1
  %73 = and i64 %72, 3
  %74 = icmp ult i64 %70, 48
  br i1 %74, label %130, label %75

75:                                               ; preds = %65
  %76 = sub nsw i64 %72, %73
  %77 = getelementptr i16, i16* %50, i64 1
  %78 = getelementptr i16, i16* %50, i64 1
  %79 = getelementptr i16, i16* %50, i64 1
  %80 = getelementptr i16, i16* %50, i64 1
  br label %81

81:                                               ; preds = %81, %75
  %82 = phi i64 [ 0, %75 ], [ %127, %81 ]
  %83 = phi i64 [ %76, %75 ], [ %128, %81 ]
  %84 = getelementptr i16, i16* %54, i64 %82
  %85 = getelementptr inbounds i16, i16* %77, i64 %82
  %86 = bitcast i16* %84 to <8 x i16>*
  %87 = load <8 x i16>, <8 x i16>* %86, align 2, !alias.scope !22
  %88 = getelementptr i16, i16* %84, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2, !alias.scope !22
  %91 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %91, align 2, !alias.scope !25, !noalias !22
  %92 = getelementptr inbounds i16, i16* %85, i64 8
  %93 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %93, align 2, !alias.scope !25, !noalias !22
  %94 = or i64 %82, 16
  %95 = getelementptr i16, i16* %54, i64 %94
  %96 = getelementptr inbounds i16, i16* %78, i64 %94
  %97 = bitcast i16* %95 to <8 x i16>*
  %98 = load <8 x i16>, <8 x i16>* %97, align 2, !alias.scope !22
  %99 = getelementptr i16, i16* %95, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2, !alias.scope !22
  %102 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %98, <8 x i16>* %102, align 2, !alias.scope !25, !noalias !22
  %103 = getelementptr inbounds i16, i16* %96, i64 8
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %104, align 2, !alias.scope !25, !noalias !22
  %105 = or i64 %82, 32
  %106 = getelementptr i16, i16* %54, i64 %105
  %107 = getelementptr inbounds i16, i16* %79, i64 %105
  %108 = bitcast i16* %106 to <8 x i16>*
  %109 = load <8 x i16>, <8 x i16>* %108, align 2, !alias.scope !22
  %110 = getelementptr i16, i16* %106, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 2, !alias.scope !22
  %113 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %113, align 2, !alias.scope !25, !noalias !22
  %114 = getelementptr inbounds i16, i16* %107, i64 8
  %115 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %112, <8 x i16>* %115, align 2, !alias.scope !25, !noalias !22
  %116 = or i64 %82, 48
  %117 = getelementptr i16, i16* %54, i64 %116
  %118 = getelementptr inbounds i16, i16* %80, i64 %116
  %119 = bitcast i16* %117 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 2, !alias.scope !22
  %121 = getelementptr i16, i16* %117, i64 8
  %122 = bitcast i16* %121 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2, !alias.scope !22
  %124 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %120, <8 x i16>* %124, align 2, !alias.scope !25, !noalias !22
  %125 = getelementptr inbounds i16, i16* %118, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %126, align 2, !alias.scope !25, !noalias !22
  %127 = add i64 %82, 64
  %128 = add i64 %83, -4
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %130, label %81, !llvm.loop !27

130:                                              ; preds = %81, %65
  %131 = phi i64 [ 0, %65 ], [ %127, %81 ]
  %132 = icmp eq i64 %73, 0
  br i1 %132, label %151, label %133

133:                                              ; preds = %130
  %134 = getelementptr i16, i16* %50, i64 1
  br label %135

135:                                              ; preds = %135, %133
  %136 = phi i64 [ %131, %133 ], [ %148, %135 ]
  %137 = phi i64 [ %73, %133 ], [ %149, %135 ]
  %138 = getelementptr i16, i16* %54, i64 %136
  %139 = getelementptr inbounds i16, i16* %134, i64 %136
  %140 = bitcast i16* %138 to <8 x i16>*
  %141 = load <8 x i16>, <8 x i16>* %140, align 2, !alias.scope !22
  %142 = getelementptr i16, i16* %138, i64 8
  %143 = bitcast i16* %142 to <8 x i16>*
  %144 = load <8 x i16>, <8 x i16>* %143, align 2, !alias.scope !22
  %145 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %145, align 2, !alias.scope !25, !noalias !22
  %146 = getelementptr inbounds i16, i16* %139, i64 8
  %147 = bitcast i16* %146 to <8 x i16>*
  store <8 x i16> %144, <8 x i16>* %147, align 2, !alias.scope !25, !noalias !22
  %148 = add i64 %136, 16
  %149 = add i64 %137, -1
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %151, label %135, !llvm.loop !28

151:                                              ; preds = %135, %130
  %152 = icmp eq i64 %53, %66
  br i1 %152, label %206, label %153

153:                                              ; preds = %151, %58, %56
  %154 = phi i16* [ %54, %58 ], [ %54, %56 ], [ %67, %151 ]
  %155 = phi i64 [ %53, %58 ], [ %53, %56 ], [ %68, %151 ]
  %156 = phi i16* [ %50, %58 ], [ %50, %56 ], [ %69, %151 ]
  %157 = add i64 %155, -1
  %158 = and i64 %155, 7
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %171, label %160

160:                                              ; preds = %153, %160
  %161 = phi i16* [ %168, %160 ], [ %154, %153 ]
  %162 = phi i64 [ %167, %160 ], [ %155, %153 ]
  %163 = phi i16* [ %165, %160 ], [ %156, %153 ]
  %164 = phi i64 [ %169, %160 ], [ %158, %153 ]
  %165 = getelementptr inbounds i16, i16* %163, i64 1
  %166 = load i16, i16* %161, align 2
  store i16 %166, i16* %165, align 2
  %167 = add i64 %162, -1
  %168 = getelementptr inbounds i16, i16* %161, i64 1
  %169 = add i64 %164, -1
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %171, label %160, !llvm.loop !29

171:                                              ; preds = %160, %153
  %172 = phi i16* [ %154, %153 ], [ %168, %160 ]
  %173 = phi i64 [ %155, %153 ], [ %167, %160 ]
  %174 = phi i16* [ %156, %153 ], [ %165, %160 ]
  %175 = icmp ult i64 %157, 7
  br i1 %175, label %206, label %176

176:                                              ; preds = %171, %176
  %177 = phi i16* [ %204, %176 ], [ %172, %171 ]
  %178 = phi i64 [ %203, %176 ], [ %173, %171 ]
  %179 = phi i16* [ %201, %176 ], [ %174, %171 ]
  %180 = getelementptr inbounds i16, i16* %179, i64 1
  %181 = load i16, i16* %177, align 2
  store i16 %181, i16* %180, align 2
  %182 = getelementptr inbounds i16, i16* %177, i64 1
  %183 = getelementptr inbounds i16, i16* %179, i64 2
  %184 = load i16, i16* %182, align 2
  store i16 %184, i16* %183, align 2
  %185 = getelementptr inbounds i16, i16* %177, i64 2
  %186 = getelementptr inbounds i16, i16* %179, i64 3
  %187 = load i16, i16* %185, align 2
  store i16 %187, i16* %186, align 2
  %188 = getelementptr inbounds i16, i16* %177, i64 3
  %189 = getelementptr inbounds i16, i16* %179, i64 4
  %190 = load i16, i16* %188, align 2
  store i16 %190, i16* %189, align 2
  %191 = getelementptr inbounds i16, i16* %177, i64 4
  %192 = getelementptr inbounds i16, i16* %179, i64 5
  %193 = load i16, i16* %191, align 2
  store i16 %193, i16* %192, align 2
  %194 = getelementptr inbounds i16, i16* %177, i64 5
  %195 = getelementptr inbounds i16, i16* %179, i64 6
  %196 = load i16, i16* %194, align 2
  store i16 %196, i16* %195, align 2
  %197 = getelementptr inbounds i16, i16* %177, i64 6
  %198 = getelementptr inbounds i16, i16* %179, i64 7
  %199 = load i16, i16* %197, align 2
  store i16 %199, i16* %198, align 2
  %200 = getelementptr inbounds i16, i16* %177, i64 7
  %201 = getelementptr inbounds i16, i16* %179, i64 8
  %202 = load i16, i16* %200, align 2
  store i16 %202, i16* %201, align 2
  %203 = add i64 %178, -8
  %204 = getelementptr inbounds i16, i16* %177, i64 8
  %205 = icmp eq i64 %203, 0
  br i1 %205, label %206, label %176, !llvm.loop !30

206:                                              ; preds = %171, %176, %151, %52
  %207 = load i8, i8* %20, align 1
  br label %208

208:                                              ; preds = %206, %49
  %209 = phi i8 [ %207, %206 ], [ %21, %49 ]
  %210 = getelementptr inbounds i16, i16* %50, i64 %18
  store i16 0, i16* %210, align 2
  %211 = icmp slt i8 %209, 0
  %212 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %213 = load i16*, i16** %212, align 8
  %214 = bitcast %"class.std::__1::basic_string"* %2 to i16*
  %215 = select i1 %211, i16* %213, i16* %214
  %216 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %217 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %216, i64 0, i32 1, i32 1
  %218 = load i8, i8* %217, align 1
  %219 = icmp slt i8 %218, 0
  br i1 %219, label %220, label %225

220:                                              ; preds = %208
  %221 = load i64, i64* %6, align 8
  %222 = and i64 %221, 9223372036854775807
  %223 = add nsw i64 %222, -1
  %224 = load i64, i64* %5, align 8
  br label %227

225:                                              ; preds = %208
  %226 = zext i8 %218 to i64
  br label %227

227:                                              ; preds = %225, %220
  %228 = phi i64 [ %223, %220 ], [ 10, %225 ]
  %229 = phi i64 [ %224, %220 ], [ %226, %225 ]
  %230 = sub i64 %228, %229
  %231 = icmp ult i64 %230, %26
  br i1 %231, label %391, label %232

232:                                              ; preds = %227
  %233 = icmp eq i64 %26, 0
  br i1 %233, label %394, label %234

234:                                              ; preds = %232
  %235 = load i16*, i16** %4, align 8
  %236 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  %237 = select i1 %219, i16* %235, i16* %236
  %238 = getelementptr inbounds i16, i16* %237, i64 %229
  %239 = icmp ult i64 %26, 16
  br i1 %239, label %329, label %240

240:                                              ; preds = %234
  %241 = add i64 %26, %229
  %242 = getelementptr i16, i16* %237, i64 %241
  %243 = getelementptr i16, i16* %215, i64 %26
  %244 = icmp ult i16* %238, %243
  %245 = icmp ult i16* %215, %242
  %246 = and i1 %244, %245
  br i1 %246, label %329, label %247

247:                                              ; preds = %240
  %248 = and i64 %26, -16
  %249 = sub i64 %26, %248
  %250 = getelementptr i16, i16* %215, i64 %248
  %251 = getelementptr i16, i16* %238, i64 %248
  %252 = add i64 %248, -16
  %253 = lshr exact i64 %252, 4
  %254 = add nuw nsw i64 %253, 1
  %255 = and i64 %254, 3
  %256 = icmp ult i64 %252, 48
  br i1 %256, label %308, label %257

257:                                              ; preds = %247
  %258 = sub nsw i64 %254, %255
  br label %259

259:                                              ; preds = %259, %257
  %260 = phi i64 [ 0, %257 ], [ %305, %259 ]
  %261 = phi i64 [ %258, %257 ], [ %306, %259 ]
  %262 = getelementptr i16, i16* %215, i64 %260
  %263 = getelementptr i16, i16* %238, i64 %260
  %264 = bitcast i16* %262 to <8 x i16>*
  %265 = load <8 x i16>, <8 x i16>* %264, align 2, !alias.scope !31
  %266 = getelementptr i16, i16* %262, i64 8
  %267 = bitcast i16* %266 to <8 x i16>*
  %268 = load <8 x i16>, <8 x i16>* %267, align 2, !alias.scope !31
  %269 = bitcast i16* %263 to <8 x i16>*
  store <8 x i16> %265, <8 x i16>* %269, align 2, !alias.scope !34, !noalias !31
  %270 = getelementptr i16, i16* %263, i64 8
  %271 = bitcast i16* %270 to <8 x i16>*
  store <8 x i16> %268, <8 x i16>* %271, align 2, !alias.scope !34, !noalias !31
  %272 = or i64 %260, 16
  %273 = getelementptr i16, i16* %215, i64 %272
  %274 = getelementptr i16, i16* %238, i64 %272
  %275 = bitcast i16* %273 to <8 x i16>*
  %276 = load <8 x i16>, <8 x i16>* %275, align 2, !alias.scope !31
  %277 = getelementptr i16, i16* %273, i64 8
  %278 = bitcast i16* %277 to <8 x i16>*
  %279 = load <8 x i16>, <8 x i16>* %278, align 2, !alias.scope !31
  %280 = bitcast i16* %274 to <8 x i16>*
  store <8 x i16> %276, <8 x i16>* %280, align 2, !alias.scope !34, !noalias !31
  %281 = getelementptr i16, i16* %274, i64 8
  %282 = bitcast i16* %281 to <8 x i16>*
  store <8 x i16> %279, <8 x i16>* %282, align 2, !alias.scope !34, !noalias !31
  %283 = or i64 %260, 32
  %284 = getelementptr i16, i16* %215, i64 %283
  %285 = getelementptr i16, i16* %238, i64 %283
  %286 = bitcast i16* %284 to <8 x i16>*
  %287 = load <8 x i16>, <8 x i16>* %286, align 2, !alias.scope !31
  %288 = getelementptr i16, i16* %284, i64 8
  %289 = bitcast i16* %288 to <8 x i16>*
  %290 = load <8 x i16>, <8 x i16>* %289, align 2, !alias.scope !31
  %291 = bitcast i16* %285 to <8 x i16>*
  store <8 x i16> %287, <8 x i16>* %291, align 2, !alias.scope !34, !noalias !31
  %292 = getelementptr i16, i16* %285, i64 8
  %293 = bitcast i16* %292 to <8 x i16>*
  store <8 x i16> %290, <8 x i16>* %293, align 2, !alias.scope !34, !noalias !31
  %294 = or i64 %260, 48
  %295 = getelementptr i16, i16* %215, i64 %294
  %296 = getelementptr i16, i16* %238, i64 %294
  %297 = bitcast i16* %295 to <8 x i16>*
  %298 = load <8 x i16>, <8 x i16>* %297, align 2, !alias.scope !31
  %299 = getelementptr i16, i16* %295, i64 8
  %300 = bitcast i16* %299 to <8 x i16>*
  %301 = load <8 x i16>, <8 x i16>* %300, align 2, !alias.scope !31
  %302 = bitcast i16* %296 to <8 x i16>*
  store <8 x i16> %298, <8 x i16>* %302, align 2, !alias.scope !34, !noalias !31
  %303 = getelementptr i16, i16* %296, i64 8
  %304 = bitcast i16* %303 to <8 x i16>*
  store <8 x i16> %301, <8 x i16>* %304, align 2, !alias.scope !34, !noalias !31
  %305 = add i64 %260, 64
  %306 = add i64 %261, -4
  %307 = icmp eq i64 %306, 0
  br i1 %307, label %308, label %259, !llvm.loop !36

308:                                              ; preds = %259, %247
  %309 = phi i64 [ 0, %247 ], [ %305, %259 ]
  %310 = icmp eq i64 %255, 0
  br i1 %310, label %327, label %311

311:                                              ; preds = %308, %311
  %312 = phi i64 [ %324, %311 ], [ %309, %308 ]
  %313 = phi i64 [ %325, %311 ], [ %255, %308 ]
  %314 = getelementptr i16, i16* %215, i64 %312
  %315 = getelementptr i16, i16* %238, i64 %312
  %316 = bitcast i16* %314 to <8 x i16>*
  %317 = load <8 x i16>, <8 x i16>* %316, align 2, !alias.scope !31
  %318 = getelementptr i16, i16* %314, i64 8
  %319 = bitcast i16* %318 to <8 x i16>*
  %320 = load <8 x i16>, <8 x i16>* %319, align 2, !alias.scope !31
  %321 = bitcast i16* %315 to <8 x i16>*
  store <8 x i16> %317, <8 x i16>* %321, align 2, !alias.scope !34, !noalias !31
  %322 = getelementptr i16, i16* %315, i64 8
  %323 = bitcast i16* %322 to <8 x i16>*
  store <8 x i16> %320, <8 x i16>* %323, align 2, !alias.scope !34, !noalias !31
  %324 = add i64 %312, 16
  %325 = add i64 %313, -1
  %326 = icmp eq i64 %325, 0
  br i1 %326, label %327, label %311, !llvm.loop !37

327:                                              ; preds = %311, %308
  %328 = icmp eq i64 %26, %248
  br i1 %328, label %382, label %329

329:                                              ; preds = %327, %240, %234
  %330 = phi i64 [ %26, %240 ], [ %26, %234 ], [ %249, %327 ]
  %331 = phi i16* [ %215, %240 ], [ %215, %234 ], [ %250, %327 ]
  %332 = phi i16* [ %238, %240 ], [ %238, %234 ], [ %251, %327 ]
  %333 = add i64 %330, -1
  %334 = and i64 %330, 7
  %335 = icmp eq i64 %334, 0
  br i1 %335, label %347, label %336

336:                                              ; preds = %329, %336
  %337 = phi i64 [ %342, %336 ], [ %330, %329 ]
  %338 = phi i16* [ %344, %336 ], [ %331, %329 ]
  %339 = phi i16* [ %343, %336 ], [ %332, %329 ]
  %340 = phi i64 [ %345, %336 ], [ %334, %329 ]
  %341 = load i16, i16* %338, align 2
  store i16 %341, i16* %339, align 2
  %342 = add i64 %337, -1
  %343 = getelementptr inbounds i16, i16* %339, i64 1
  %344 = getelementptr inbounds i16, i16* %338, i64 1
  %345 = add i64 %340, -1
  %346 = icmp eq i64 %345, 0
  br i1 %346, label %347, label %336, !llvm.loop !38

347:                                              ; preds = %336, %329
  %348 = phi i64 [ %330, %329 ], [ %342, %336 ]
  %349 = phi i16* [ %331, %329 ], [ %344, %336 ]
  %350 = phi i16* [ %332, %329 ], [ %343, %336 ]
  %351 = icmp ult i64 %333, 7
  br i1 %351, label %382, label %352

352:                                              ; preds = %347, %352
  %353 = phi i64 [ %378, %352 ], [ %348, %347 ]
  %354 = phi i16* [ %380, %352 ], [ %349, %347 ]
  %355 = phi i16* [ %379, %352 ], [ %350, %347 ]
  %356 = load i16, i16* %354, align 2
  store i16 %356, i16* %355, align 2
  %357 = getelementptr inbounds i16, i16* %355, i64 1
  %358 = getelementptr inbounds i16, i16* %354, i64 1
  %359 = load i16, i16* %358, align 2
  store i16 %359, i16* %357, align 2
  %360 = getelementptr inbounds i16, i16* %355, i64 2
  %361 = getelementptr inbounds i16, i16* %354, i64 2
  %362 = load i16, i16* %361, align 2
  store i16 %362, i16* %360, align 2
  %363 = getelementptr inbounds i16, i16* %355, i64 3
  %364 = getelementptr inbounds i16, i16* %354, i64 3
  %365 = load i16, i16* %364, align 2
  store i16 %365, i16* %363, align 2
  %366 = getelementptr inbounds i16, i16* %355, i64 4
  %367 = getelementptr inbounds i16, i16* %354, i64 4
  %368 = load i16, i16* %367, align 2
  store i16 %368, i16* %366, align 2
  %369 = getelementptr inbounds i16, i16* %355, i64 5
  %370 = getelementptr inbounds i16, i16* %354, i64 5
  %371 = load i16, i16* %370, align 2
  store i16 %371, i16* %369, align 2
  %372 = getelementptr inbounds i16, i16* %355, i64 6
  %373 = getelementptr inbounds i16, i16* %354, i64 6
  %374 = load i16, i16* %373, align 2
  store i16 %374, i16* %372, align 2
  %375 = getelementptr inbounds i16, i16* %355, i64 7
  %376 = getelementptr inbounds i16, i16* %354, i64 7
  %377 = load i16, i16* %376, align 2
  store i16 %377, i16* %375, align 2
  %378 = add i64 %353, -8
  %379 = getelementptr inbounds i16, i16* %355, i64 8
  %380 = getelementptr inbounds i16, i16* %354, i64 8
  %381 = icmp eq i64 %378, 0
  br i1 %381, label %382, label %352, !llvm.loop !39

382:                                              ; preds = %347, %352, %327
  %383 = add i64 %229, %26
  %384 = load i8, i8* %217, align 1
  %385 = icmp slt i8 %384, 0
  br i1 %385, label %386, label %387

386:                                              ; preds = %382
  store i64 %383, i64* %5, align 8
  br label %389

387:                                              ; preds = %382
  %388 = trunc i64 %383 to i8
  store i8 %388, i8* %217, align 1
  br label %389

389:                                              ; preds = %387, %386
  %390 = getelementptr inbounds i16, i16* %237, i64 %383
  store i16 0, i16* %390, align 2
  br label %394

391:                                              ; preds = %227
  %392 = add i64 %229, %26
  %393 = sub i64 %392, %228
  tail call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string"* %0, i64 %228, i64 %393, i64 %229, i64 %229, i64 0, i64 %26, i16* %215) #10
  br label %394

394:                                              ; preds = %232, %389, %391
  ret void
}

declare void @_ZN4base10JoinStringENS_4spanIKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEELm18446744073709551615EEENS_16BasicStringPieceIDsS4_EE(%"class.std::__1::basic_string"* sret, i64, %"class.std::__1::basic_string"*, i16*, i64) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_(%"class.std::__1::vector"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::basic_string"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 24
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 768614336404564650
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #11
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::basic_string"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 24
  %20 = icmp ult i64 %19, 384307168202282325
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 768614336404564650, %14 ]
  %28 = mul i64 %27, 24
  %29 = tail call i8* @_Znwm(i64 %28) #9
  %30 = bitcast i8* %29 to %"class.std::__1::basic_string"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.std::__1::basic_string"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 %9
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 %32
  %36 = ptrtoint %"class.std::__1::basic_string"* %35 to i64
  %37 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %37, i64 0, i32 1, i32 1
  %39 = load i8, i8* %38, align 1
  %40 = icmp slt i8 %39, 0
  br i1 %40, label %44, label %41

41:                                               ; preds = %31
  %42 = bitcast %"class.std::__1::basic_string"* %34 to i8*
  %43 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 24, i1 false) #10
  br label %219

44:                                               ; preds = %31
  %45 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load i16*, i16** %45, align 8
  %47 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %48 = load i64, i64* %47, align 8
  %49 = icmp ult i64 %48, 11
  br i1 %49, label %50, label %55

50:                                               ; preds = %44
  %51 = bitcast %"class.std::__1::basic_string"* %34 to i16*
  %52 = trunc i64 %48 to i8
  %53 = bitcast %"class.std::__1::basic_string"* %34 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %54 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %53, i64 0, i32 1, i32 1
  store i8 %52, i8* %54, align 1
  br label %72

55:                                               ; preds = %44
  %56 = icmp ugt i64 %48, 9223372036854775791
  br i1 %56, label %57, label %59

57:                                               ; preds = %55
  %58 = bitcast %"class.std::__1::basic_string"* %34 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %58) #11
  unreachable

59:                                               ; preds = %55
  %60 = add nuw nsw i64 %48, 8
  %61 = and i64 %60, -8
  %62 = icmp slt i64 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %59
  tail call void @abort() #11
  unreachable

64:                                               ; preds = %59
  %65 = shl i64 %61, 1
  %66 = tail call i8* @_Znwm(i64 %65) #9
  %67 = bitcast i8* %66 to i16*
  %68 = bitcast %"class.std::__1::basic_string"* %34 to i8**
  store i8* %66, i8** %68, align 8
  %69 = or i64 %61, -9223372036854775808
  %70 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 %9, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %69, i64* %70, align 8
  %71 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 %9, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %48, i64* %71, align 8
  br label %72

72:                                               ; preds = %64, %50
  %73 = phi i16* [ %51, %50 ], [ %67, %64 ]
  %74 = add nuw nsw i64 %48, 1
  %75 = add i64 %48, 1
  %76 = icmp ult i64 %75, 16
  br i1 %76, label %166, label %77

77:                                               ; preds = %72
  %78 = add i64 %48, 1
  %79 = getelementptr i16, i16* %73, i64 %78
  %80 = getelementptr i16, i16* %46, i64 %78
  %81 = icmp ult i16* %73, %80
  %82 = icmp ult i16* %46, %79
  %83 = and i1 %81, %82
  br i1 %83, label %166, label %84

84:                                               ; preds = %77
  %85 = and i64 %75, -16
  %86 = sub i64 %74, %85
  %87 = getelementptr i16, i16* %46, i64 %85
  %88 = getelementptr i16, i16* %73, i64 %85
  %89 = add i64 %85, -16
  %90 = lshr exact i64 %89, 4
  %91 = add nuw nsw i64 %90, 1
  %92 = and i64 %91, 3
  %93 = icmp ult i64 %89, 48
  br i1 %93, label %145, label %94

94:                                               ; preds = %84
  %95 = sub nsw i64 %91, %92
  br label %96

96:                                               ; preds = %96, %94
  %97 = phi i64 [ 0, %94 ], [ %142, %96 ]
  %98 = phi i64 [ %95, %94 ], [ %143, %96 ]
  %99 = getelementptr i16, i16* %46, i64 %97
  %100 = getelementptr i16, i16* %73, i64 %97
  %101 = bitcast i16* %99 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 2, !alias.scope !40
  %103 = getelementptr i16, i16* %99, i64 8
  %104 = bitcast i16* %103 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !40
  %106 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %106, align 2, !alias.scope !43, !noalias !40
  %107 = getelementptr i16, i16* %100, i64 8
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %108, align 2, !alias.scope !43, !noalias !40
  %109 = or i64 %97, 16
  %110 = getelementptr i16, i16* %46, i64 %109
  %111 = getelementptr i16, i16* %73, i64 %109
  %112 = bitcast i16* %110 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2, !alias.scope !40
  %114 = getelementptr i16, i16* %110, i64 8
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2, !alias.scope !40
  %117 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %113, <8 x i16>* %117, align 2, !alias.scope !43, !noalias !40
  %118 = getelementptr i16, i16* %111, i64 8
  %119 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %119, align 2, !alias.scope !43, !noalias !40
  %120 = or i64 %97, 32
  %121 = getelementptr i16, i16* %46, i64 %120
  %122 = getelementptr i16, i16* %73, i64 %120
  %123 = bitcast i16* %121 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !40
  %125 = getelementptr i16, i16* %121, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !40
  %128 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %128, align 2, !alias.scope !43, !noalias !40
  %129 = getelementptr i16, i16* %122, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %130, align 2, !alias.scope !43, !noalias !40
  %131 = or i64 %97, 48
  %132 = getelementptr i16, i16* %46, i64 %131
  %133 = getelementptr i16, i16* %73, i64 %131
  %134 = bitcast i16* %132 to <8 x i16>*
  %135 = load <8 x i16>, <8 x i16>* %134, align 2, !alias.scope !40
  %136 = getelementptr i16, i16* %132, i64 8
  %137 = bitcast i16* %136 to <8 x i16>*
  %138 = load <8 x i16>, <8 x i16>* %137, align 2, !alias.scope !40
  %139 = bitcast i16* %133 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %139, align 2, !alias.scope !43, !noalias !40
  %140 = getelementptr i16, i16* %133, i64 8
  %141 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %141, align 2, !alias.scope !43, !noalias !40
  %142 = add i64 %97, 64
  %143 = add i64 %98, -4
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %96, !llvm.loop !45

145:                                              ; preds = %96, %84
  %146 = phi i64 [ 0, %84 ], [ %142, %96 ]
  %147 = icmp eq i64 %92, 0
  br i1 %147, label %164, label %148

148:                                              ; preds = %145, %148
  %149 = phi i64 [ %161, %148 ], [ %146, %145 ]
  %150 = phi i64 [ %162, %148 ], [ %92, %145 ]
  %151 = getelementptr i16, i16* %46, i64 %149
  %152 = getelementptr i16, i16* %73, i64 %149
  %153 = bitcast i16* %151 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 2, !alias.scope !40
  %155 = getelementptr i16, i16* %151, i64 8
  %156 = bitcast i16* %155 to <8 x i16>*
  %157 = load <8 x i16>, <8 x i16>* %156, align 2, !alias.scope !40
  %158 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %154, <8 x i16>* %158, align 2, !alias.scope !43, !noalias !40
  %159 = getelementptr i16, i16* %152, i64 8
  %160 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %157, <8 x i16>* %160, align 2, !alias.scope !43, !noalias !40
  %161 = add i64 %149, 16
  %162 = add i64 %150, -1
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %164, label %148, !llvm.loop !46

164:                                              ; preds = %148, %145
  %165 = icmp eq i64 %75, %85
  br i1 %165, label %219, label %166

166:                                              ; preds = %164, %77, %72
  %167 = phi i64 [ %74, %77 ], [ %74, %72 ], [ %86, %164 ]
  %168 = phi i16* [ %46, %77 ], [ %46, %72 ], [ %87, %164 ]
  %169 = phi i16* [ %73, %77 ], [ %73, %72 ], [ %88, %164 ]
  %170 = add i64 %167, -1
  %171 = and i64 %167, 7
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %184, label %173

173:                                              ; preds = %166, %173
  %174 = phi i64 [ %179, %173 ], [ %167, %166 ]
  %175 = phi i16* [ %181, %173 ], [ %168, %166 ]
  %176 = phi i16* [ %180, %173 ], [ %169, %166 ]
  %177 = phi i64 [ %182, %173 ], [ %171, %166 ]
  %178 = load i16, i16* %175, align 2
  store i16 %178, i16* %176, align 2
  %179 = add i64 %174, -1
  %180 = getelementptr inbounds i16, i16* %176, i64 1
  %181 = getelementptr inbounds i16, i16* %175, i64 1
  %182 = add i64 %177, -1
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %184, label %173, !llvm.loop !47

184:                                              ; preds = %173, %166
  %185 = phi i64 [ %167, %166 ], [ %179, %173 ]
  %186 = phi i16* [ %168, %166 ], [ %181, %173 ]
  %187 = phi i16* [ %169, %166 ], [ %180, %173 ]
  %188 = icmp ult i64 %170, 7
  br i1 %188, label %219, label %189

189:                                              ; preds = %184, %189
  %190 = phi i64 [ %215, %189 ], [ %185, %184 ]
  %191 = phi i16* [ %217, %189 ], [ %186, %184 ]
  %192 = phi i16* [ %216, %189 ], [ %187, %184 ]
  %193 = load i16, i16* %191, align 2
  store i16 %193, i16* %192, align 2
  %194 = getelementptr inbounds i16, i16* %192, i64 1
  %195 = getelementptr inbounds i16, i16* %191, i64 1
  %196 = load i16, i16* %195, align 2
  store i16 %196, i16* %194, align 2
  %197 = getelementptr inbounds i16, i16* %192, i64 2
  %198 = getelementptr inbounds i16, i16* %191, i64 2
  %199 = load i16, i16* %198, align 2
  store i16 %199, i16* %197, align 2
  %200 = getelementptr inbounds i16, i16* %192, i64 3
  %201 = getelementptr inbounds i16, i16* %191, i64 3
  %202 = load i16, i16* %201, align 2
  store i16 %202, i16* %200, align 2
  %203 = getelementptr inbounds i16, i16* %192, i64 4
  %204 = getelementptr inbounds i16, i16* %191, i64 4
  %205 = load i16, i16* %204, align 2
  store i16 %205, i16* %203, align 2
  %206 = getelementptr inbounds i16, i16* %192, i64 5
  %207 = getelementptr inbounds i16, i16* %191, i64 5
  %208 = load i16, i16* %207, align 2
  store i16 %208, i16* %206, align 2
  %209 = getelementptr inbounds i16, i16* %192, i64 6
  %210 = getelementptr inbounds i16, i16* %191, i64 6
  %211 = load i16, i16* %210, align 2
  store i16 %211, i16* %209, align 2
  %212 = getelementptr inbounds i16, i16* %192, i64 7
  %213 = getelementptr inbounds i16, i16* %191, i64 7
  %214 = load i16, i16* %213, align 2
  store i16 %214, i16* %212, align 2
  %215 = add i64 %190, -8
  %216 = getelementptr inbounds i16, i16* %192, i64 8
  %217 = getelementptr inbounds i16, i16* %191, i64 8
  %218 = icmp eq i64 %215, 0
  br i1 %218, label %219, label %189, !llvm.loop !48

219:                                              ; preds = %184, %189, %164, %41
  %220 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %34, i64 1
  %221 = ptrtoint %"class.std::__1::basic_string"* %220 to i64
  %222 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %223 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %222, align 8
  %224 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %3, align 8
  %225 = icmp eq %"class.std::__1::basic_string"* %224, %223
  br i1 %225, label %226, label %228

226:                                              ; preds = %219
  %227 = ptrtoint %"class.std::__1::basic_string"* %223 to i64
  br label %239

228:                                              ; preds = %219, %228
  %229 = phi %"class.std::__1::basic_string"* [ %231, %228 ], [ %34, %219 ]
  %230 = phi %"class.std::__1::basic_string"* [ %232, %228 ], [ %224, %219 ]
  %231 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %229, i64 -1
  %232 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %230, i64 -1
  %233 = bitcast %"class.std::__1::basic_string"* %231 to i8*
  %234 = bitcast %"class.std::__1::basic_string"* %232 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %233, i8* align 8 %234, i64 24, i1 false) #10
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %234, i8 0, i64 24, i1 false) #10
  %235 = icmp eq %"class.std::__1::basic_string"* %232, %223
  br i1 %235, label %236, label %228

236:                                              ; preds = %228
  %237 = load i64, i64* %6, align 8
  %238 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %3, align 8
  br label %239

239:                                              ; preds = %226, %236
  %240 = phi %"class.std::__1::basic_string"* [ %223, %226 ], [ %238, %236 ]
  %241 = phi %"class.std::__1::basic_string"* [ %34, %226 ], [ %231, %236 ]
  %242 = phi i64 [ %227, %226 ], [ %237, %236 ]
  %243 = ptrtoint %"class.std::__1::basic_string"* %241 to i64
  store i64 %243, i64* %6, align 8
  store i64 %221, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %244 = inttoptr i64 %242 to %"class.std::__1::basic_string"*
  %245 = icmp eq %"class.std::__1::basic_string"* %240, %244
  br i1 %245, label %258, label %246

246:                                              ; preds = %239, %256
  %247 = phi %"class.std::__1::basic_string"* [ %248, %256 ], [ %240, %239 ]
  %248 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %247, i64 -1
  %249 = bitcast %"class.std::__1::basic_string"* %248 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %250 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %249, i64 0, i32 1, i32 1
  %251 = load i8, i8* %250, align 1
  %252 = icmp slt i8 %251, 0
  br i1 %252, label %253, label %256

253:                                              ; preds = %246
  %254 = bitcast %"class.std::__1::basic_string"* %248 to i8**
  %255 = load i8*, i8** %254, align 8
  tail call void @_ZdlPv(i8* %255) #9
  br label %256

256:                                              ; preds = %253, %246
  %257 = icmp eq %"class.std::__1::basic_string"* %248, %244
  br i1 %257, label %258, label %246

258:                                              ; preds = %256, %239
  %259 = icmp eq i64 %242, 0
  br i1 %259, label %262, label %260

260:                                              ; preds = %258
  %261 = inttoptr i64 %242 to i8*
  tail call void @_ZdlPv(i8* %261) #9
  br label %262

262:                                              ; preds = %258, %260
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string"*, i64, i64, i64, i64, i64, i64, i16*) local_unnamed_addr #0 comdat align 2 {
  %9 = sub i64 9223372036854775790, %1
  %10 = icmp ult i64 %9, %2
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %12) #11
  unreachable

13:                                               ; preds = %8
  %14 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %14, i64 0, i32 1, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i16*, i16** %19, align 8
  br label %23

21:                                               ; preds = %13
  %22 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  br label %23

23:                                               ; preds = %18, %21
  %24 = phi i16* [ %20, %18 ], [ %22, %21 ]
  %25 = bitcast i16* %24 to i8*
  %26 = icmp ult i64 %1, 4611686018427387879
  br i1 %26, label %27, label %38

27:                                               ; preds = %23
  %28 = add i64 %2, %1
  %29 = shl i64 %1, 1
  %30 = icmp ult i64 %28, %29
  %31 = select i1 %30, i64 %29, i64 %28
  %32 = icmp ult i64 %31, 11
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = add i64 %31, 8
  %35 = and i64 %34, -8
  %36 = icmp slt i64 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %33
  tail call void @abort() #11
  unreachable

38:                                               ; preds = %23, %27, %33
  %39 = phi i64 [ %35, %33 ], [ 9223372036854775791, %23 ], [ 11, %27 ]
  %40 = shl i64 %39, 1
  %41 = tail call i8* @_Znwm(i64 %40) #9
  %42 = bitcast i8* %41 to i16*
  %43 = icmp eq i64 %4, 0
  br i1 %43, label %189, label %44

44:                                               ; preds = %38
  %45 = icmp ult i64 %4, 16
  br i1 %45, label %136, label %46

46:                                               ; preds = %44
  %47 = shl i64 %4, 1
  %48 = getelementptr i8, i8* %41, i64 %47
  %49 = getelementptr i16, i16* %24, i64 %4
  %50 = bitcast i16* %49 to i8*
  %51 = icmp ult i8* %41, %50
  %52 = icmp ugt i8* %48, %25
  %53 = and i1 %51, %52
  br i1 %53, label %136, label %54

54:                                               ; preds = %46
  %55 = and i64 %4, -16
  %56 = sub i64 %4, %55
  %57 = getelementptr i16, i16* %24, i64 %55
  %58 = getelementptr i16, i16* %42, i64 %55
  %59 = add i64 %55, -16
  %60 = lshr exact i64 %59, 4
  %61 = add nuw nsw i64 %60, 1
  %62 = and i64 %61, 3
  %63 = icmp ult i64 %59, 48
  br i1 %63, label %115, label %64

64:                                               ; preds = %54
  %65 = sub nsw i64 %61, %62
  br label %66

66:                                               ; preds = %66, %64
  %67 = phi i64 [ 0, %64 ], [ %112, %66 ]
  %68 = phi i64 [ %65, %64 ], [ %113, %66 ]
  %69 = getelementptr i16, i16* %24, i64 %67
  %70 = getelementptr i16, i16* %42, i64 %67
  %71 = bitcast i16* %69 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !49
  %73 = getelementptr i16, i16* %69, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2, !alias.scope !49
  %76 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %76, align 2, !alias.scope !52, !noalias !49
  %77 = getelementptr i16, i16* %70, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %78, align 2, !alias.scope !52, !noalias !49
  %79 = or i64 %67, 16
  %80 = getelementptr i16, i16* %24, i64 %79
  %81 = getelementptr i16, i16* %42, i64 %79
  %82 = bitcast i16* %80 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !49
  %84 = getelementptr i16, i16* %80, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !49
  %87 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %87, align 2, !alias.scope !52, !noalias !49
  %88 = getelementptr i16, i16* %81, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %89, align 2, !alias.scope !52, !noalias !49
  %90 = or i64 %67, 32
  %91 = getelementptr i16, i16* %24, i64 %90
  %92 = getelementptr i16, i16* %42, i64 %90
  %93 = bitcast i16* %91 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !49
  %95 = getelementptr i16, i16* %91, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !49
  %98 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %98, align 2, !alias.scope !52, !noalias !49
  %99 = getelementptr i16, i16* %92, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %100, align 2, !alias.scope !52, !noalias !49
  %101 = or i64 %67, 48
  %102 = getelementptr i16, i16* %24, i64 %101
  %103 = getelementptr i16, i16* %42, i64 %101
  %104 = bitcast i16* %102 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !49
  %106 = getelementptr i16, i16* %102, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !49
  %109 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %109, align 2, !alias.scope !52, !noalias !49
  %110 = getelementptr i16, i16* %103, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %111, align 2, !alias.scope !52, !noalias !49
  %112 = add i64 %67, 64
  %113 = add i64 %68, -4
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %66, !llvm.loop !54

115:                                              ; preds = %66, %54
  %116 = phi i64 [ 0, %54 ], [ %112, %66 ]
  %117 = icmp eq i64 %62, 0
  br i1 %117, label %134, label %118

118:                                              ; preds = %115, %118
  %119 = phi i64 [ %131, %118 ], [ %116, %115 ]
  %120 = phi i64 [ %132, %118 ], [ %62, %115 ]
  %121 = getelementptr i16, i16* %24, i64 %119
  %122 = getelementptr i16, i16* %42, i64 %119
  %123 = bitcast i16* %121 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !49
  %125 = getelementptr i16, i16* %121, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !49
  %128 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %128, align 2, !alias.scope !52, !noalias !49
  %129 = getelementptr i16, i16* %122, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %130, align 2, !alias.scope !52, !noalias !49
  %131 = add i64 %119, 16
  %132 = add i64 %120, -1
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %118, !llvm.loop !55

134:                                              ; preds = %118, %115
  %135 = icmp eq i64 %55, %4
  br i1 %135, label %189, label %136

136:                                              ; preds = %134, %46, %44
  %137 = phi i64 [ %4, %46 ], [ %4, %44 ], [ %56, %134 ]
  %138 = phi i16* [ %24, %46 ], [ %24, %44 ], [ %57, %134 ]
  %139 = phi i16* [ %42, %46 ], [ %42, %44 ], [ %58, %134 ]
  %140 = add i64 %137, -1
  %141 = and i64 %137, 7
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %154, label %143

143:                                              ; preds = %136, %143
  %144 = phi i64 [ %149, %143 ], [ %137, %136 ]
  %145 = phi i16* [ %151, %143 ], [ %138, %136 ]
  %146 = phi i16* [ %150, %143 ], [ %139, %136 ]
  %147 = phi i64 [ %152, %143 ], [ %141, %136 ]
  %148 = load i16, i16* %145, align 2
  store i16 %148, i16* %146, align 2
  %149 = add i64 %144, -1
  %150 = getelementptr inbounds i16, i16* %146, i64 1
  %151 = getelementptr inbounds i16, i16* %145, i64 1
  %152 = add i64 %147, -1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %143, !llvm.loop !56

154:                                              ; preds = %143, %136
  %155 = phi i64 [ %137, %136 ], [ %149, %143 ]
  %156 = phi i16* [ %138, %136 ], [ %151, %143 ]
  %157 = phi i16* [ %139, %136 ], [ %150, %143 ]
  %158 = icmp ult i64 %140, 7
  br i1 %158, label %189, label %159

159:                                              ; preds = %154, %159
  %160 = phi i64 [ %185, %159 ], [ %155, %154 ]
  %161 = phi i16* [ %187, %159 ], [ %156, %154 ]
  %162 = phi i16* [ %186, %159 ], [ %157, %154 ]
  %163 = load i16, i16* %161, align 2
  store i16 %163, i16* %162, align 2
  %164 = getelementptr inbounds i16, i16* %162, i64 1
  %165 = getelementptr inbounds i16, i16* %161, i64 1
  %166 = load i16, i16* %165, align 2
  store i16 %166, i16* %164, align 2
  %167 = getelementptr inbounds i16, i16* %162, i64 2
  %168 = getelementptr inbounds i16, i16* %161, i64 2
  %169 = load i16, i16* %168, align 2
  store i16 %169, i16* %167, align 2
  %170 = getelementptr inbounds i16, i16* %162, i64 3
  %171 = getelementptr inbounds i16, i16* %161, i64 3
  %172 = load i16, i16* %171, align 2
  store i16 %172, i16* %170, align 2
  %173 = getelementptr inbounds i16, i16* %162, i64 4
  %174 = getelementptr inbounds i16, i16* %161, i64 4
  %175 = load i16, i16* %174, align 2
  store i16 %175, i16* %173, align 2
  %176 = getelementptr inbounds i16, i16* %162, i64 5
  %177 = getelementptr inbounds i16, i16* %161, i64 5
  %178 = load i16, i16* %177, align 2
  store i16 %178, i16* %176, align 2
  %179 = getelementptr inbounds i16, i16* %162, i64 6
  %180 = getelementptr inbounds i16, i16* %161, i64 6
  %181 = load i16, i16* %180, align 2
  store i16 %181, i16* %179, align 2
  %182 = getelementptr inbounds i16, i16* %162, i64 7
  %183 = getelementptr inbounds i16, i16* %161, i64 7
  %184 = load i16, i16* %183, align 2
  store i16 %184, i16* %182, align 2
  %185 = add i64 %160, -8
  %186 = getelementptr inbounds i16, i16* %162, i64 8
  %187 = getelementptr inbounds i16, i16* %161, i64 8
  %188 = icmp eq i64 %185, 0
  br i1 %188, label %189, label %159, !llvm.loop !57

189:                                              ; preds = %154, %159, %134, %38
  %190 = icmp eq i64 %6, 0
  br i1 %190, label %289, label %191

191:                                              ; preds = %189
  %192 = getelementptr inbounds i16, i16* %42, i64 %4
  %193 = icmp ult i64 %6, 16
  br i1 %193, label %276, label %194

194:                                              ; preds = %191
  %195 = and i64 %6, -16
  %196 = sub i64 %6, %195
  %197 = getelementptr i16, i16* %7, i64 %195
  %198 = getelementptr i16, i16* %192, i64 %195
  %199 = add i64 %195, -16
  %200 = lshr exact i64 %199, 4
  %201 = add nuw nsw i64 %200, 1
  %202 = and i64 %201, 3
  %203 = icmp ult i64 %199, 48
  br i1 %203, label %255, label %204

204:                                              ; preds = %194
  %205 = sub nsw i64 %201, %202
  br label %206

206:                                              ; preds = %206, %204
  %207 = phi i64 [ 0, %204 ], [ %252, %206 ]
  %208 = phi i64 [ %205, %204 ], [ %253, %206 ]
  %209 = getelementptr i16, i16* %7, i64 %207
  %210 = getelementptr i16, i16* %192, i64 %207
  %211 = bitcast i16* %209 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 2
  %213 = getelementptr i16, i16* %209, i64 8
  %214 = bitcast i16* %213 to <8 x i16>*
  %215 = load <8 x i16>, <8 x i16>* %214, align 2
  %216 = bitcast i16* %210 to <8 x i16>*
  store <8 x i16> %212, <8 x i16>* %216, align 2
  %217 = getelementptr i16, i16* %210, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %218, align 2
  %219 = or i64 %207, 16
  %220 = getelementptr i16, i16* %7, i64 %219
  %221 = getelementptr i16, i16* %192, i64 %219
  %222 = bitcast i16* %220 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 2
  %224 = getelementptr i16, i16* %220, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 2
  %227 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %223, <8 x i16>* %227, align 2
  %228 = getelementptr i16, i16* %221, i64 8
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %226, <8 x i16>* %229, align 2
  %230 = or i64 %207, 32
  %231 = getelementptr i16, i16* %7, i64 %230
  %232 = getelementptr i16, i16* %192, i64 %230
  %233 = bitcast i16* %231 to <8 x i16>*
  %234 = load <8 x i16>, <8 x i16>* %233, align 2
  %235 = getelementptr i16, i16* %231, i64 8
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 2
  %238 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> %234, <8 x i16>* %238, align 2
  %239 = getelementptr i16, i16* %232, i64 8
  %240 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %237, <8 x i16>* %240, align 2
  %241 = or i64 %207, 48
  %242 = getelementptr i16, i16* %7, i64 %241
  %243 = getelementptr i16, i16* %192, i64 %241
  %244 = bitcast i16* %242 to <8 x i16>*
  %245 = load <8 x i16>, <8 x i16>* %244, align 2
  %246 = getelementptr i16, i16* %242, i64 8
  %247 = bitcast i16* %246 to <8 x i16>*
  %248 = load <8 x i16>, <8 x i16>* %247, align 2
  %249 = bitcast i16* %243 to <8 x i16>*
  store <8 x i16> %245, <8 x i16>* %249, align 2
  %250 = getelementptr i16, i16* %243, i64 8
  %251 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %248, <8 x i16>* %251, align 2
  %252 = add i64 %207, 64
  %253 = add i64 %208, -4
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %255, label %206, !llvm.loop !58

255:                                              ; preds = %206, %194
  %256 = phi i64 [ 0, %194 ], [ %252, %206 ]
  %257 = icmp eq i64 %202, 0
  br i1 %257, label %274, label %258

258:                                              ; preds = %255, %258
  %259 = phi i64 [ %271, %258 ], [ %256, %255 ]
  %260 = phi i64 [ %272, %258 ], [ %202, %255 ]
  %261 = getelementptr i16, i16* %7, i64 %259
  %262 = getelementptr i16, i16* %192, i64 %259
  %263 = bitcast i16* %261 to <8 x i16>*
  %264 = load <8 x i16>, <8 x i16>* %263, align 2
  %265 = getelementptr i16, i16* %261, i64 8
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2
  %268 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %264, <8 x i16>* %268, align 2
  %269 = getelementptr i16, i16* %262, i64 8
  %270 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %270, align 2
  %271 = add i64 %259, 16
  %272 = add i64 %260, -1
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %258, !llvm.loop !59

274:                                              ; preds = %258, %255
  %275 = icmp eq i64 %195, %6
  br i1 %275, label %289, label %276

276:                                              ; preds = %274, %191
  %277 = phi i64 [ %6, %191 ], [ %196, %274 ]
  %278 = phi i16* [ %7, %191 ], [ %197, %274 ]
  %279 = phi i16* [ %192, %191 ], [ %198, %274 ]
  br label %280

280:                                              ; preds = %276, %280
  %281 = phi i64 [ %285, %280 ], [ %277, %276 ]
  %282 = phi i16* [ %287, %280 ], [ %278, %276 ]
  %283 = phi i16* [ %286, %280 ], [ %279, %276 ]
  %284 = load i16, i16* %282, align 2
  store i16 %284, i16* %283, align 2
  %285 = add i64 %281, -1
  %286 = getelementptr inbounds i16, i16* %283, i64 1
  %287 = getelementptr inbounds i16, i16* %282, i64 1
  %288 = icmp eq i64 %285, 0
  br i1 %288, label %289, label %280, !llvm.loop !60

289:                                              ; preds = %280, %274, %189
  %290 = sub i64 %3, %5
  %291 = sub i64 %290, %4
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %448, label %293

293:                                              ; preds = %289
  %294 = getelementptr inbounds i16, i16* %42, i64 %4
  %295 = getelementptr inbounds i16, i16* %294, i64 %6
  %296 = getelementptr inbounds i16, i16* %24, i64 %4
  %297 = getelementptr inbounds i16, i16* %296, i64 %5
  %298 = icmp ult i64 %291, 16
  br i1 %298, label %395, label %299

299:                                              ; preds = %293
  %300 = bitcast i16* %297 to i8*
  %301 = add i64 %6, %4
  %302 = shl i64 %301, 1
  %303 = getelementptr i8, i8* %41, i64 %302
  %304 = add i64 %6, %3
  %305 = sub i64 %304, %5
  %306 = shl i64 %305, 1
  %307 = getelementptr i8, i8* %41, i64 %306
  %308 = getelementptr i16, i16* %24, i64 %3
  %309 = bitcast i16* %308 to i8*
  %310 = icmp ult i8* %303, %309
  %311 = icmp ugt i8* %307, %300
  %312 = and i1 %310, %311
  br i1 %312, label %395, label %313

313:                                              ; preds = %299
  %314 = and i64 %291, -16
  %315 = sub i64 %291, %314
  %316 = getelementptr i16, i16* %297, i64 %314
  %317 = getelementptr i16, i16* %295, i64 %314
  %318 = add i64 %314, -16
  %319 = lshr exact i64 %318, 4
  %320 = add nuw nsw i64 %319, 1
  %321 = and i64 %320, 3
  %322 = icmp ult i64 %318, 48
  br i1 %322, label %374, label %323

323:                                              ; preds = %313
  %324 = sub nsw i64 %320, %321
  br label %325

325:                                              ; preds = %325, %323
  %326 = phi i64 [ 0, %323 ], [ %371, %325 ]
  %327 = phi i64 [ %324, %323 ], [ %372, %325 ]
  %328 = getelementptr i16, i16* %297, i64 %326
  %329 = getelementptr i16, i16* %295, i64 %326
  %330 = bitcast i16* %328 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 2, !alias.scope !62
  %332 = getelementptr i16, i16* %328, i64 8
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 2, !alias.scope !62
  %335 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %335, align 2, !alias.scope !65, !noalias !62
  %336 = getelementptr i16, i16* %329, i64 8
  %337 = bitcast i16* %336 to <8 x i16>*
  store <8 x i16> %334, <8 x i16>* %337, align 2, !alias.scope !65, !noalias !62
  %338 = or i64 %326, 16
  %339 = getelementptr i16, i16* %297, i64 %338
  %340 = getelementptr i16, i16* %295, i64 %338
  %341 = bitcast i16* %339 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2, !alias.scope !62
  %343 = getelementptr i16, i16* %339, i64 8
  %344 = bitcast i16* %343 to <8 x i16>*
  %345 = load <8 x i16>, <8 x i16>* %344, align 2, !alias.scope !62
  %346 = bitcast i16* %340 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %346, align 2, !alias.scope !65, !noalias !62
  %347 = getelementptr i16, i16* %340, i64 8
  %348 = bitcast i16* %347 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %348, align 2, !alias.scope !65, !noalias !62
  %349 = or i64 %326, 32
  %350 = getelementptr i16, i16* %297, i64 %349
  %351 = getelementptr i16, i16* %295, i64 %349
  %352 = bitcast i16* %350 to <8 x i16>*
  %353 = load <8 x i16>, <8 x i16>* %352, align 2, !alias.scope !62
  %354 = getelementptr i16, i16* %350, i64 8
  %355 = bitcast i16* %354 to <8 x i16>*
  %356 = load <8 x i16>, <8 x i16>* %355, align 2, !alias.scope !62
  %357 = bitcast i16* %351 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %357, align 2, !alias.scope !65, !noalias !62
  %358 = getelementptr i16, i16* %351, i64 8
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %356, <8 x i16>* %359, align 2, !alias.scope !65, !noalias !62
  %360 = or i64 %326, 48
  %361 = getelementptr i16, i16* %297, i64 %360
  %362 = getelementptr i16, i16* %295, i64 %360
  %363 = bitcast i16* %361 to <8 x i16>*
  %364 = load <8 x i16>, <8 x i16>* %363, align 2, !alias.scope !62
  %365 = getelementptr i16, i16* %361, i64 8
  %366 = bitcast i16* %365 to <8 x i16>*
  %367 = load <8 x i16>, <8 x i16>* %366, align 2, !alias.scope !62
  %368 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %368, align 2, !alias.scope !65, !noalias !62
  %369 = getelementptr i16, i16* %362, i64 8
  %370 = bitcast i16* %369 to <8 x i16>*
  store <8 x i16> %367, <8 x i16>* %370, align 2, !alias.scope !65, !noalias !62
  %371 = add i64 %326, 64
  %372 = add i64 %327, -4
  %373 = icmp eq i64 %372, 0
  br i1 %373, label %374, label %325, !llvm.loop !67

374:                                              ; preds = %325, %313
  %375 = phi i64 [ 0, %313 ], [ %371, %325 ]
  %376 = icmp eq i64 %321, 0
  br i1 %376, label %393, label %377

377:                                              ; preds = %374, %377
  %378 = phi i64 [ %390, %377 ], [ %375, %374 ]
  %379 = phi i64 [ %391, %377 ], [ %321, %374 ]
  %380 = getelementptr i16, i16* %297, i64 %378
  %381 = getelementptr i16, i16* %295, i64 %378
  %382 = bitcast i16* %380 to <8 x i16>*
  %383 = load <8 x i16>, <8 x i16>* %382, align 2, !alias.scope !62
  %384 = getelementptr i16, i16* %380, i64 8
  %385 = bitcast i16* %384 to <8 x i16>*
  %386 = load <8 x i16>, <8 x i16>* %385, align 2, !alias.scope !62
  %387 = bitcast i16* %381 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %387, align 2, !alias.scope !65, !noalias !62
  %388 = getelementptr i16, i16* %381, i64 8
  %389 = bitcast i16* %388 to <8 x i16>*
  store <8 x i16> %386, <8 x i16>* %389, align 2, !alias.scope !65, !noalias !62
  %390 = add i64 %378, 16
  %391 = add i64 %379, -1
  %392 = icmp eq i64 %391, 0
  br i1 %392, label %393, label %377, !llvm.loop !68

393:                                              ; preds = %377, %374
  %394 = icmp eq i64 %291, %314
  br i1 %394, label %448, label %395

395:                                              ; preds = %393, %299, %293
  %396 = phi i64 [ %291, %299 ], [ %291, %293 ], [ %315, %393 ]
  %397 = phi i16* [ %297, %299 ], [ %297, %293 ], [ %316, %393 ]
  %398 = phi i16* [ %295, %299 ], [ %295, %293 ], [ %317, %393 ]
  %399 = add i64 %396, -1
  %400 = and i64 %396, 7
  %401 = icmp eq i64 %400, 0
  br i1 %401, label %413, label %402

402:                                              ; preds = %395, %402
  %403 = phi i64 [ %408, %402 ], [ %396, %395 ]
  %404 = phi i16* [ %410, %402 ], [ %397, %395 ]
  %405 = phi i16* [ %409, %402 ], [ %398, %395 ]
  %406 = phi i64 [ %411, %402 ], [ %400, %395 ]
  %407 = load i16, i16* %404, align 2
  store i16 %407, i16* %405, align 2
  %408 = add i64 %403, -1
  %409 = getelementptr inbounds i16, i16* %405, i64 1
  %410 = getelementptr inbounds i16, i16* %404, i64 1
  %411 = add i64 %406, -1
  %412 = icmp eq i64 %411, 0
  br i1 %412, label %413, label %402, !llvm.loop !69

413:                                              ; preds = %402, %395
  %414 = phi i64 [ %396, %395 ], [ %408, %402 ]
  %415 = phi i16* [ %397, %395 ], [ %410, %402 ]
  %416 = phi i16* [ %398, %395 ], [ %409, %402 ]
  %417 = icmp ult i64 %399, 7
  br i1 %417, label %448, label %418

418:                                              ; preds = %413, %418
  %419 = phi i64 [ %444, %418 ], [ %414, %413 ]
  %420 = phi i16* [ %446, %418 ], [ %415, %413 ]
  %421 = phi i16* [ %445, %418 ], [ %416, %413 ]
  %422 = load i16, i16* %420, align 2
  store i16 %422, i16* %421, align 2
  %423 = getelementptr inbounds i16, i16* %421, i64 1
  %424 = getelementptr inbounds i16, i16* %420, i64 1
  %425 = load i16, i16* %424, align 2
  store i16 %425, i16* %423, align 2
  %426 = getelementptr inbounds i16, i16* %421, i64 2
  %427 = getelementptr inbounds i16, i16* %420, i64 2
  %428 = load i16, i16* %427, align 2
  store i16 %428, i16* %426, align 2
  %429 = getelementptr inbounds i16, i16* %421, i64 3
  %430 = getelementptr inbounds i16, i16* %420, i64 3
  %431 = load i16, i16* %430, align 2
  store i16 %431, i16* %429, align 2
  %432 = getelementptr inbounds i16, i16* %421, i64 4
  %433 = getelementptr inbounds i16, i16* %420, i64 4
  %434 = load i16, i16* %433, align 2
  store i16 %434, i16* %432, align 2
  %435 = getelementptr inbounds i16, i16* %421, i64 5
  %436 = getelementptr inbounds i16, i16* %420, i64 5
  %437 = load i16, i16* %436, align 2
  store i16 %437, i16* %435, align 2
  %438 = getelementptr inbounds i16, i16* %421, i64 6
  %439 = getelementptr inbounds i16, i16* %420, i64 6
  %440 = load i16, i16* %439, align 2
  store i16 %440, i16* %438, align 2
  %441 = getelementptr inbounds i16, i16* %421, i64 7
  %442 = getelementptr inbounds i16, i16* %420, i64 7
  %443 = load i16, i16* %442, align 2
  store i16 %443, i16* %441, align 2
  %444 = add i64 %419, -8
  %445 = getelementptr inbounds i16, i16* %421, i64 8
  %446 = getelementptr inbounds i16, i16* %420, i64 8
  %447 = icmp eq i64 %444, 0
  br i1 %447, label %448, label %418, !llvm.loop !70

448:                                              ; preds = %413, %418, %393, %289
  %449 = icmp eq i64 %1, 10
  br i1 %449, label %451, label %450

450:                                              ; preds = %448
  tail call void @_ZdlPv(i8* %25) #9
  br label %451

451:                                              ; preds = %448, %450
  %452 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %41, i8** %452, align 8
  %453 = or i64 %39, -9223372036854775808
  %454 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %453, i64* %454, align 8
  %455 = add i64 %290, %6
  %456 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %455, i64* %456, align 8
  %457 = getelementptr inbounds i16, i16* %42, i64 %455
  store i16 0, i16* %457, align 2
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_(%"class.std::__1::vector"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::basic_string"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 24
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 768614336404564650
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #11
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::basic_string"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 24
  %20 = icmp ult i64 %19, 384307168202282325
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 768614336404564650, %14 ]
  %28 = mul i64 %27, 24
  %29 = tail call i8* @_Znwm(i64 %28) #9
  %30 = bitcast i8* %29 to %"class.std::__1::basic_string"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.std::__1::basic_string"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 %9
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 %32
  %36 = ptrtoint %"class.std::__1::basic_string"* %35 to i64
  %37 = bitcast %"class.std::__1::basic_string"* %34 to i8*
  %38 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false) #10
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 24, i1 false) #10
  %39 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %34, i64 1
  %40 = ptrtoint %"class.std::__1::basic_string"* %39 to i64
  %41 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %42 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %41, align 8
  %43 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %3, align 8
  %44 = icmp eq %"class.std::__1::basic_string"* %43, %42
  br i1 %44, label %45, label %47

45:                                               ; preds = %31
  %46 = ptrtoint %"class.std::__1::basic_string"* %42 to i64
  br label %58

47:                                               ; preds = %31, %47
  %48 = phi %"class.std::__1::basic_string"* [ %50, %47 ], [ %34, %31 ]
  %49 = phi %"class.std::__1::basic_string"* [ %51, %47 ], [ %43, %31 ]
  %50 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %48, i64 -1
  %51 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %49, i64 -1
  %52 = bitcast %"class.std::__1::basic_string"* %50 to i8*
  %53 = bitcast %"class.std::__1::basic_string"* %51 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 24, i1 false) #10
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 24, i1 false) #10
  %54 = icmp eq %"class.std::__1::basic_string"* %51, %42
  br i1 %54, label %55, label %47

55:                                               ; preds = %47
  %56 = load i64, i64* %6, align 8
  %57 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %3, align 8
  br label %58

58:                                               ; preds = %45, %55
  %59 = phi %"class.std::__1::basic_string"* [ %42, %45 ], [ %57, %55 ]
  %60 = phi %"class.std::__1::basic_string"* [ %34, %45 ], [ %50, %55 ]
  %61 = phi i64 [ %46, %45 ], [ %56, %55 ]
  %62 = ptrtoint %"class.std::__1::basic_string"* %60 to i64
  store i64 %62, i64* %6, align 8
  store i64 %40, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %63 = inttoptr i64 %61 to %"class.std::__1::basic_string"*
  %64 = icmp eq %"class.std::__1::basic_string"* %59, %63
  br i1 %64, label %77, label %65

65:                                               ; preds = %58, %75
  %66 = phi %"class.std::__1::basic_string"* [ %67, %75 ], [ %59, %58 ]
  %67 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %66, i64 -1
  %68 = bitcast %"class.std::__1::basic_string"* %67 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %69 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %68, i64 0, i32 1, i32 1
  %70 = load i8, i8* %69, align 1
  %71 = icmp slt i8 %70, 0
  br i1 %71, label %72, label %75

72:                                               ; preds = %65
  %73 = bitcast %"class.std::__1::basic_string"* %67 to i8**
  %74 = load i8*, i8** %73, align 8
  tail call void @_ZdlPv(i8* %74) #9
  br label %75

75:                                               ; preds = %72, %65
  %76 = icmp eq %"class.std::__1::basic_string"* %67, %63
  br i1 %76, label %77, label %65

77:                                               ; preds = %75, %58
  %78 = icmp eq i64 %61, 0
  br i1 %78, label %81, label %79

79:                                               ; preds = %77
  %80 = inttoptr i64 %61 to i8*
  tail call void @_ZdlPv(i8* %80) #9
  br label %81

81:                                               ; preds = %77, %79
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIbNS_9allocatorIbEEE7reserveEm(%"class.std::__1::vector.6"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.std::__1::vector.6", align 16
  %4 = alloca %"class.std::__1::__bit_iterator", align 8
  %5 = alloca %"class.std::__1::__bit_iterator", align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 2, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = shl i64 %7, 6
  %9 = icmp ult i64 %8, %1
  br i1 %9, label %10, label %49

10:                                               ; preds = %2
  %11 = bitcast %"class.std::__1::vector.6"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #10
  %12 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %3, i64 0, i32 1
  %13 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %3, i64 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 0, i64 24, i1 false) #10
  %14 = icmp slt i64 %1, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %10
  %16 = bitcast %"class.std::__1::vector.6"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %16) #11
  unreachable

17:                                               ; preds = %10
  %18 = add nsw i64 %1, -1
  %19 = lshr i64 %18, 6
  %20 = add nuw nsw i64 %19, 1
  %21 = shl nuw nsw i64 %20, 3
  %22 = tail call i8* @_Znwm(i64 %21) #9
  %23 = bitcast %"class.std::__1::vector.6"* %3 to i8**
  store i8* %22, i8** %23, align 16
  store i64 0, i64* %12, align 8
  store i64 %20, i64* %13, align 16
  %24 = bitcast %"class.std::__1::vector.6"* %0 to i64*
  %25 = load i64, i64* %24, align 8, !noalias !71
  %26 = bitcast %"class.std::__1::__bit_iterator"* %4 to i64*
  store i64 %25, i64* %26, align 8, !alias.scope !71
  %27 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %4, i64 0, i32 1
  store i32 0, i32* %27, align 8, !alias.scope !71
  %28 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 1
  %29 = load i64, i64* %28, align 8, !noalias !76
  %30 = inttoptr i64 %25 to i64*
  %31 = lshr i64 %29, 6
  %32 = getelementptr inbounds i64, i64* %30, i64 %31
  %33 = trunc i64 %29 to i32
  %34 = and i32 %33, 63
  %35 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %5, i64 0, i32 0
  store i64* %32, i64** %35, align 8, !alias.scope !79
  %36 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %5, i64 0, i32 1
  store i32 %34, i32* %36, align 8, !alias.scope !79
  call void @_ZNSt3__16vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb0ELm0EEEEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES8_S8_(%"class.std::__1::vector.6"* nonnull %3, %"class.std::__1::__bit_iterator"* nonnull %4, %"class.std::__1::__bit_iterator"* nonnull %5)
  %37 = load i64, i64* %24, align 8
  %38 = bitcast %"class.std::__1::vector.6"* %3 to i64*
  %39 = bitcast %"class.std::__1::vector.6"* %3 to <2 x i64>*
  %40 = load <2 x i64>, <2 x i64>* %39, align 16
  store i64 %37, i64* %38, align 16
  %41 = load i64, i64* %28, align 8
  %42 = bitcast %"class.std::__1::vector.6"* %0 to <2 x i64>*
  store <2 x i64> %40, <2 x i64>* %42, align 8
  store i64 %41, i64* %12, align 8
  %43 = load i64, i64* %6, align 8
  %44 = load i64, i64* %13, align 16
  store i64 %44, i64* %6, align 8
  store i64 %43, i64* %13, align 16
  %45 = icmp eq i64 %37, 0
  br i1 %45, label %48, label %46

46:                                               ; preds = %17
  %47 = inttoptr i64 %37 to i8*
  call void @_ZdlPv(i8* %47) #9
  br label %48

48:                                               ; preds = %17, %46
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #10
  br label %49

49:                                               ; preds = %48, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb0ELm0EEEEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES8_S8_(%"class.std::__1::vector.6"*, %"class.std::__1::__bit_iterator"*, %"class.std::__1::__bit_iterator"*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.std::__1::__bit_iterator", align 8
  %5 = alloca %"class.std::__1::__bit_iterator", align 8
  %6 = alloca %"class.std::__1::__bit_iterator", align 8
  %7 = alloca %"class.std::__1::__bit_iterator", align 8
  %8 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::__bit_iterator"* %1 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %1, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = bitcast %"class.std::__1::__bit_iterator"* %2 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %2, i64 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = sub i64 %15, %11
  %19 = shl i64 %18, 3
  %20 = zext i32 %17 to i64
  %21 = zext i32 %13 to i64
  %22 = sub i64 %9, %21
  %23 = add i64 %22, %20
  %24 = add i64 %23, %19
  store i64 %24, i64* %8, align 8
  %25 = icmp eq i64 %9, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %3
  %27 = add i64 %9, -1
  %28 = add i64 %24, -1
  %29 = xor i64 %28, %27
  %30 = icmp ugt i64 %29, 63
  br i1 %30, label %31, label %39

31:                                               ; preds = %26, %3
  %32 = icmp ult i64 %24, 65
  %33 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0
  %34 = load i64*, i64** %33, align 8
  %35 = add i64 %24, -1
  %36 = lshr i64 %35, 6
  %37 = getelementptr inbounds i64, i64* %34, i64 %36
  %38 = select i1 %32, i64* %34, i64* %37
  store i64 0, i64* %38, align 8
  br label %39

39:                                               ; preds = %31, %26
  %40 = load i64, i64* %10, align 8
  %41 = load i32, i32* %12, align 8
  %42 = load i64, i64* %14, align 8
  %43 = load i32, i32* %16, align 8
  %44 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0
  %45 = load i64*, i64** %44, align 8, !noalias !82
  %46 = lshr i64 %9, 6
  %47 = getelementptr inbounds i64, i64* %45, i64 %46
  %48 = trunc i64 %9 to i32
  %49 = and i32 %48, 63
  %50 = ptrtoint i64* %47 to i64
  %51 = bitcast %"class.std::__1::__bit_iterator"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %51) #10
  %52 = bitcast %"class.std::__1::__bit_iterator"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52)
  %53 = bitcast %"class.std::__1::__bit_iterator"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %53)
  %54 = bitcast %"class.std::__1::__bit_iterator"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %54)
  %55 = icmp eq i32 %41, %49
  br i1 %55, label %56, label %123

56:                                               ; preds = %39
  %57 = sub i64 %42, %40
  %58 = shl i64 %57, 3
  %59 = zext i32 %43 to i64
  %60 = zext i32 %41 to i64
  %61 = sub nsw i64 %59, %60
  %62 = add i64 %61, %58
  %63 = icmp sgt i64 %62, 0
  %64 = inttoptr i64 %40 to i64*
  br i1 %63, label %65, label %118

65:                                               ; preds = %56
  %66 = inttoptr i64 %40 to i8*
  %67 = icmp eq i32 %41, 0
  br i1 %67, label %92, label %68

68:                                               ; preds = %65
  %69 = sub i32 64, %41
  %70 = zext i32 %69 to i64
  %71 = icmp slt i64 %62, %70
  %72 = select i1 %71, i64 %62, i64 %70
  %73 = sub nsw i64 %62, %72
  %74 = shl i64 -1, %60
  %75 = sub nsw i64 %70, %72
  %76 = lshr i64 -1, %75
  %77 = and i64 %76, %74
  %78 = load i64, i64* %64, align 8, !noalias !85
  %79 = and i64 %78, %77
  %80 = xor i64 %77, -1
  %81 = load i64, i64* %47, align 8, !noalias !85
  %82 = and i64 %81, %80
  %83 = or i64 %82, %79
  store i64 %83, i64* %47, align 8, !noalias !85
  %84 = add nuw nsw i64 %72, %60
  %85 = sdiv i64 %84, 64
  %86 = getelementptr inbounds i64, i64* %47, i64 %85
  %87 = ptrtoint i64* %86 to i64
  %88 = srem i64 %84, 64
  %89 = trunc i64 %88 to i32
  %90 = getelementptr inbounds i64, i64* %64, i64 1
  %91 = bitcast i64* %90 to i8*
  br label %92

92:                                               ; preds = %68, %65
  %93 = phi i64* [ %64, %65 ], [ %90, %68 ]
  %94 = phi i32 [ 0, %65 ], [ %89, %68 ]
  %95 = phi i64 [ %50, %65 ], [ %87, %68 ]
  %96 = phi i8* [ %66, %65 ], [ %91, %68 ]
  %97 = phi i64 [ %62, %65 ], [ %73, %68 ]
  %98 = sdiv i64 %97, 64
  %99 = inttoptr i64 %95 to i8*
  %100 = shl nsw i64 %98, 3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %96, i64 %100, i1 false) #10, !noalias !85
  %101 = shl nsw i64 %98, 6
  %102 = sub i64 %97, %101
  %103 = inttoptr i64 %95 to i64*
  %104 = getelementptr inbounds i64, i64* %103, i64 %98
  %105 = ptrtoint i64* %104 to i64
  %106 = icmp sgt i64 %102, 0
  br i1 %106, label %107, label %118

107:                                              ; preds = %92
  %108 = getelementptr inbounds i64, i64* %93, i64 %98
  %109 = sub nsw i64 64, %102
  %110 = lshr i64 -1, %109
  %111 = load i64, i64* %108, align 8, !noalias !85
  %112 = and i64 %111, %110
  %113 = xor i64 %110, -1
  %114 = load i64, i64* %104, align 8, !noalias !85
  %115 = and i64 %114, %113
  %116 = or i64 %115, %112
  store i64 %116, i64* %104, align 8, !noalias !85
  %117 = trunc i64 %102 to i32
  br label %118

118:                                              ; preds = %107, %92, %56
  %119 = phi i32 [ %117, %107 ], [ %94, %92 ], [ %41, %56 ]
  %120 = phi i64 [ %105, %107 ], [ %105, %92 ], [ %50, %56 ]
  %121 = bitcast %"class.std::__1::__bit_iterator"* %7 to i64*
  store i64 %120, i64* %121, align 8, !alias.scope !88
  %122 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %7, i64 0, i32 1
  store i32 %119, i32* %122, align 8, !alias.scope !88
  br label %130

123:                                              ; preds = %39
  %124 = bitcast %"class.std::__1::__bit_iterator"* %4 to i64*
  store i64 %40, i64* %124, align 8, !noalias !91
  %125 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %4, i64 0, i32 1
  store i32 %41, i32* %125, align 8, !noalias !91
  %126 = bitcast %"class.std::__1::__bit_iterator"* %5 to i64*
  store i64 %42, i64* %126, align 8, !noalias !91
  %127 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %5, i64 0, i32 1
  store i32 %43, i32* %127, align 8, !noalias !91
  %128 = bitcast %"class.std::__1::__bit_iterator"* %6 to i64*
  store i64 %50, i64* %128, align 8, !noalias !91
  %129 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %6, i64 0, i32 1
  store i32 %49, i32* %129, align 8, !noalias !91
  call void @_ZNSt3__116__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_(%"class.std::__1::__bit_iterator"* nonnull sret %7, %"class.std::__1::__bit_iterator"* nonnull %4, %"class.std::__1::__bit_iterator"* nonnull %5, %"class.std::__1::__bit_iterator"* nonnull %6) #10
  br label %130

130:                                              ; preds = %118, %123
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %52)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %53)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %54)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %51) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__116__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_(%"class.std::__1::__bit_iterator"* noalias sret, %"class.std::__1::__bit_iterator"*, %"class.std::__1::__bit_iterator"*, %"class.std::__1::__bit_iterator"*) local_unnamed_addr #0 comdat {
  %5 = bitcast %"class.std::__1::__bit_iterator"* %2 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::__bit_iterator"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = shl i64 %9, 3
  %11 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %2, i64 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = zext i32 %12 to i64
  %14 = add nsw i64 %10, %13
  %15 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %1, i64 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = zext i32 %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %18, 0
  %20 = inttoptr i64 %8 to i64*
  br i1 %19, label %21, label %185

21:                                               ; preds = %4
  %22 = icmp eq i32 %16, 0
  br i1 %22, label %93, label %23

23:                                               ; preds = %21
  %24 = sub i32 64, %16
  %25 = zext i32 %24 to i64
  %26 = icmp slt i64 %18, %25
  %27 = select i1 %26, i64 %18, i64 %25
  %28 = sub nsw i64 %18, %27
  %29 = shl i64 -1, %17
  %30 = sub nsw i64 %25, %27
  %31 = lshr i64 -1, %30
  %32 = and i64 %31, %29
  %33 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %1, i64 0, i32 0
  %34 = load i64, i64* %20, align 8
  %35 = and i64 %32, %34
  %36 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 1
  %37 = load i32, i32* %36, align 8
  %38 = sub i32 64, %37
  %39 = zext i32 %38 to i64
  %40 = icmp ugt i64 %27, %39
  %41 = select i1 %40, i64 %39, i64 %27
  %42 = zext i32 %37 to i64
  %43 = shl i64 -1, %42
  %44 = sub nsw i64 %39, %41
  %45 = lshr i64 -1, %44
  %46 = and i64 %45, %43
  %47 = xor i64 %46, -1
  %48 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 0
  %49 = load i64*, i64** %48, align 8
  %50 = load i64, i64* %49, align 8
  %51 = and i64 %50, %47
  store i64 %51, i64* %49, align 8
  %52 = load i32, i32* %36, align 8
  %53 = load i32, i32* %15, align 8
  %54 = icmp ugt i32 %52, %53
  %55 = sub i32 %53, %52
  %56 = zext i32 %55 to i64
  %57 = lshr i64 %35, %56
  %58 = sub i32 %52, %53
  %59 = zext i32 %58 to i64
  %60 = shl i64 %35, %59
  %61 = select i1 %54, i64 %60, i64 %57
  %62 = load i64*, i64** %48, align 8
  %63 = load i64, i64* %62, align 8
  %64 = or i64 %63, %61
  store i64 %64, i64* %62, align 8
  %65 = load i32, i32* %36, align 8
  %66 = zext i32 %65 to i64
  %67 = add nuw nsw i64 %41, %66
  %68 = lshr i64 %67, 6
  %69 = load i64*, i64** %48, align 8
  %70 = getelementptr inbounds i64, i64* %69, i64 %68
  store i64* %70, i64** %48, align 8
  %71 = trunc i64 %41 to i32
  %72 = add i32 %65, %71
  %73 = and i32 %72, 63
  store i32 %73, i32* %36, align 8
  %74 = sub i64 %27, %41
  %75 = icmp sgt i64 %74, 0
  br i1 %75, label %76, label %90

76:                                               ; preds = %23
  %77 = sub nsw i64 64, %74
  %78 = lshr i64 -1, %77
  %79 = xor i64 %78, -1
  %80 = load i64, i64* %70, align 8
  %81 = and i64 %80, %79
  store i64 %81, i64* %70, align 8
  %82 = load i32, i32* %15, align 8
  %83 = zext i32 %82 to i64
  %84 = add nuw nsw i64 %41, %83
  %85 = lshr i64 %35, %84
  %86 = load i64*, i64** %48, align 8
  %87 = load i64, i64* %86, align 8
  %88 = or i64 %85, %87
  store i64 %88, i64* %86, align 8
  %89 = trunc i64 %74 to i32
  store i32 %89, i32* %36, align 8
  br label %90

90:                                               ; preds = %76, %23
  %91 = load i64*, i64** %33, align 8
  %92 = getelementptr inbounds i64, i64* %91, i64 1
  store i64* %92, i64** %33, align 8
  br label %93

93:                                               ; preds = %21, %90
  %94 = phi i64* [ %20, %21 ], [ %92, %90 ]
  %95 = phi i64 [ %18, %21 ], [ %28, %90 ]
  %96 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 1
  %97 = load i32, i32* %96, align 8
  %98 = sub i32 64, %97
  %99 = zext i32 %97 to i64
  %100 = shl i64 -1, %99
  %101 = icmp sgt i64 %95, 63
  br i1 %101, label %102, label %134

102:                                              ; preds = %93
  %103 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %1, i64 0, i32 0
  %104 = xor i64 %100, -1
  %105 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 0
  %106 = zext i32 %98 to i64
  br label %107

107:                                              ; preds = %102, %107
  %108 = phi i64* [ %94, %102 ], [ %130, %107 ]
  %109 = phi i64 [ %95, %102 ], [ %128, %107 ]
  %110 = load i64, i64* %108, align 8
  %111 = load i64*, i64** %105, align 8
  %112 = load i64, i64* %111, align 8
  %113 = and i64 %112, %104
  store i64 %113, i64* %111, align 8
  %114 = load i32, i32* %96, align 8
  %115 = zext i32 %114 to i64
  %116 = shl i64 %110, %115
  %117 = load i64*, i64** %105, align 8
  %118 = load i64, i64* %117, align 8
  %119 = or i64 %118, %116
  store i64 %119, i64* %117, align 8
  %120 = load i64*, i64** %105, align 8
  %121 = getelementptr inbounds i64, i64* %120, i64 1
  store i64* %121, i64** %105, align 8
  %122 = load i64, i64* %121, align 8
  %123 = and i64 %122, %100
  store i64 %123, i64* %121, align 8
  %124 = lshr i64 %110, %106
  %125 = load i64*, i64** %105, align 8
  %126 = load i64, i64* %125, align 8
  %127 = or i64 %126, %124
  store i64 %127, i64* %125, align 8
  %128 = add nsw i64 %109, -64
  %129 = load i64*, i64** %103, align 8
  %130 = getelementptr inbounds i64, i64* %129, i64 1
  store i64* %130, i64** %103, align 8
  %131 = icmp sgt i64 %128, 63
  br i1 %131, label %107, label %132

132:                                              ; preds = %107
  %133 = and i64 %95, 63
  br label %134

134:                                              ; preds = %132, %93
  %135 = phi i64* [ %94, %93 ], [ %130, %132 ]
  %136 = phi i64 [ %95, %93 ], [ %133, %132 ]
  %137 = icmp sgt i64 %136, 0
  br i1 %137, label %138, label %185

138:                                              ; preds = %134
  %139 = sub nuw nsw i64 64, %136
  %140 = lshr i64 -1, %139
  %141 = load i64, i64* %135, align 8
  %142 = and i64 %141, %140
  %143 = zext i32 %98 to i64
  %144 = icmp sgt i64 %136, %143
  %145 = select i1 %144, i64 %143, i64 %136
  %146 = load i32, i32* %96, align 8
  %147 = zext i32 %146 to i64
  %148 = shl i64 -1, %147
  %149 = sub nsw i64 %143, %145
  %150 = lshr i64 -1, %149
  %151 = and i64 %148, %150
  %152 = xor i64 %151, -1
  %153 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 0
  %154 = load i64*, i64** %153, align 8
  %155 = load i64, i64* %154, align 8
  %156 = and i64 %155, %152
  store i64 %156, i64* %154, align 8
  %157 = load i32, i32* %96, align 8
  %158 = zext i32 %157 to i64
  %159 = shl i64 %142, %158
  %160 = load i64*, i64** %153, align 8
  %161 = load i64, i64* %160, align 8
  %162 = or i64 %161, %159
  store i64 %162, i64* %160, align 8
  %163 = load i32, i32* %96, align 8
  %164 = zext i32 %163 to i64
  %165 = add nuw nsw i64 %145, %164
  %166 = lshr i64 %165, 6
  %167 = load i64*, i64** %153, align 8
  %168 = getelementptr inbounds i64, i64* %167, i64 %166
  store i64* %168, i64** %153, align 8
  %169 = trunc i64 %145 to i32
  %170 = add i32 %163, %169
  %171 = and i32 %170, 63
  store i32 %171, i32* %96, align 8
  %172 = sub nsw i64 %136, %145
  %173 = icmp sgt i64 %172, 0
  br i1 %173, label %174, label %185

174:                                              ; preds = %138
  %175 = sub nuw nsw i64 64, %172
  %176 = lshr i64 -1, %175
  %177 = xor i64 %176, -1
  %178 = load i64, i64* %168, align 8
  %179 = and i64 %178, %177
  store i64 %179, i64* %168, align 8
  %180 = lshr i64 %142, %145
  %181 = load i64*, i64** %153, align 8
  %182 = load i64, i64* %181, align 8
  %183 = or i64 %182, %180
  store i64 %183, i64* %181, align 8
  %184 = trunc i64 %172 to i32
  store i32 %184, i32* %96, align 8
  br label %185

185:                                              ; preds = %134, %174, %138, %4
  %186 = bitcast %"class.std::__1::__bit_iterator"* %3 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = bitcast %"class.std::__1::__bit_iterator"* %0 to i64*
  store i64 %187, i64* %188, align 8
  %189 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %0, i64 0, i32 1
  %190 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 1
  %191 = load i32, i32* %190, align 8
  store i32 %191, i32* %189, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { builtin nounwind }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !8}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !10}
!21 = distinct !{!21, !8}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !8}
!28 = distinct !{!28, !10}
!29 = distinct !{!29, !10}
!30 = distinct !{!30, !8}
!31 = !{!32}
!32 = distinct !{!32, !33}
!33 = distinct !{!33, !"LVerDomain"}
!34 = !{!35}
!35 = distinct !{!35, !33}
!36 = distinct !{!36, !8}
!37 = distinct !{!37, !10}
!38 = distinct !{!38, !10}
!39 = distinct !{!39, !8}
!40 = !{!41}
!41 = distinct !{!41, !42}
!42 = distinct !{!42, !"LVerDomain"}
!43 = !{!44}
!44 = distinct !{!44, !42}
!45 = distinct !{!45, !8}
!46 = distinct !{!46, !10}
!47 = distinct !{!47, !10}
!48 = distinct !{!48, !8}
!49 = !{!50}
!50 = distinct !{!50, !51}
!51 = distinct !{!51, !"LVerDomain"}
!52 = !{!53}
!53 = distinct !{!53, !51}
!54 = distinct !{!54, !8}
!55 = distinct !{!55, !10}
!56 = distinct !{!56, !10}
!57 = distinct !{!57, !8}
!58 = distinct !{!58, !8}
!59 = distinct !{!59, !10}
!60 = distinct !{!60, !61, !8}
!61 = !{!"llvm.loop.unroll.runtime.disable"}
!62 = !{!63}
!63 = distinct !{!63, !64}
!64 = distinct !{!64, !"LVerDomain"}
!65 = !{!66}
!66 = distinct !{!66, !64}
!67 = distinct !{!67, !8}
!68 = distinct !{!68, !10}
!69 = distinct !{!69, !10}
!70 = distinct !{!70, !8}
!71 = !{!72, !74}
!72 = distinct !{!72, !73, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm: argument 0"}
!73 = distinct !{!73, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm"}
!74 = distinct !{!74, !75, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE5beginEv: argument 0"}
!75 = distinct !{!75, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE5beginEv"}
!76 = !{!77}
!77 = distinct !{!77, !78, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE3endEv: argument 0"}
!78 = distinct !{!78, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE3endEv"}
!79 = !{!80, !77}
!80 = distinct !{!80, !81, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm: argument 0"}
!81 = distinct !{!81, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm"}
!82 = !{!83}
!83 = distinct !{!83, !84, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm: argument 0"}
!84 = distinct !{!84, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm"}
!85 = !{!86}
!86 = distinct !{!86, !87, !"_ZNSt3__114__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_: argument 0"}
!87 = distinct !{!87, !"_ZNSt3__114__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_"}
!88 = !{!86, !89}
!89 = distinct !{!89, !90, !"_ZNSt3__14copyINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_: argument 0"}
!90 = distinct !{!90, !"_ZNSt3__14copyINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_"}
!91 = !{!89}
