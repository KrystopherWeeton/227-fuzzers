; ModuleID = '../../mojo/public/cpp/base/string16_mojom_traits.cc'
source_filename = "../../mojo/public/cpp/base/string16_mojom_traits.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.mojo_base::mojom::internal::String16_Data" = type { %"struct.mojo::internal::StructHeader", %"struct.mojo::internal::Pointer" }
%"struct.mojo::internal::StructHeader" = type { i32, i32 }
%"struct.mojo::internal::Pointer" = type { i64 }
%"class.mojo::Message" = type { %"class.mojo::ScopedHandleBase", %"class.mojo::internal::Buffer", %"class.std::__1::vector", %"class.std::__1::vector.2", %"class.mojo::ConnectionGroup::Ref"*, i8, i8, i8* }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessageHandle" }
%"class.mojo::MessageHandle" = type { i64 }
%"class.mojo::internal::Buffer" = type { %"class.mojo::MessageHandle", i64, i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.mojo::ScopedHandleBase.0"*, %"class.mojo::ScopedHandleBase.0"*, %"class.std::__1::__compressed_pair" }
%"class.mojo::ScopedHandleBase.0" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.mojo::ScopedHandleBase.0"* }
%"class.std::__1::vector.2" = type { %"class.std::__1::__vector_base.3" }
%"class.std::__1::__vector_base.3" = type { %"class.mojo::ScopedInterfaceEndpointHandle"*, %"class.mojo::ScopedInterfaceEndpointHandle"*, %"class.std::__1::__compressed_pair.4" }
%"class.mojo::ScopedInterfaceEndpointHandle" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.mojo::ScopedInterfaceEndpointHandle::State"* }
%"class.mojo::ScopedInterfaceEndpointHandle::State" = type opaque
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.mojo::ScopedInterfaceEndpointHandle"* }
%"class.mojo::ConnectionGroup::Ref" = type { i32, %class.scoped_refptr.9 }
%class.scoped_refptr.9 = type { %"class.mojo::ConnectionGroup"* }
%"class.mojo::ConnectionGroup" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8], %"class.base::RepeatingCallback", %class.scoped_refptr.13, %"class.mojo::ConnectionGroup::Ref", %"struct.std::__1::atomic.15", [4 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.11 }
%class.scoped_refptr.11 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.12", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.12" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%class.scoped_refptr.13 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.14" }>
%"class.base::RefCountedThreadSafe.14" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.std::__1::atomic.15" = type { %"struct.std::__1::__atomic_base.16" }
%"struct.std::__1::__atomic_base.16" = type { %"struct.std::__1::__atomic_base.17" }
%"struct.std::__1::__atomic_base.17" = type { %"struct.std::__1::__cxx_atomic_impl.18" }
%"struct.std::__1::__cxx_atomic_impl.18" = type { %"struct.std::__1::__cxx_atomic_base_impl.19" }
%"struct.std::__1::__cxx_atomic_base_impl.19" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"class.mojo::internal::Array_Data" = type { %"struct.mojo::internal::ArrayHeader" }
%"struct.mojo::internal::ArrayHeader" = type { i32, i32 }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon }
%struct.anon = type { %"struct.std::__1::__padding", i8 }
%"struct.std::__1::__padding" = type { [1 x i8] }
%"class.mojo_base::BigBuffer" = type { i32, %"class.std::__1::unique_ptr", i64, %"class.absl::optional" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { i8* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.28 }
%union.anon.28 = type { %"class.mojo_base::internal::BigBufferSharedMemoryRegion" }
%"class.mojo_base::internal::BigBufferSharedMemoryRegion" = type { i64, %"class.mojo::ScopedHandleBase.29", %"class.std::__1::unique_ptr.30" }
%"class.mojo::ScopedHandleBase.29" = type { %"class.mojo::SharedBufferHandle" }
%"class.mojo::SharedBufferHandle" = type { %"class.mojo::Handle" }
%"class.std::__1::unique_ptr.30" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { i8* }
%"class.mojo_base::mojom::internal::BigString16_Data" = type { %"struct.mojo::internal::StructHeader", %"class.mojo_base::mojom::internal::BigBuffer_Data" }
%"class.mojo_base::mojom::internal::BigBuffer_Data" = type { i32, i32, %"union.mojo_base::mojom::internal::BigBuffer_Data::Union_" }
%"union.mojo_base::mojom::internal::BigBuffer_Data::Union_" = type { %"struct.mojo::internal::Pointer.34" }
%"struct.mojo::internal::Pointer.34" = type { i64 }
%"class.std::__1::__basic_string_common" = type { i8 }

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4mojo12StructTraitsIN9mojo_base5mojom16String16DataViewENSt3__112basic_stringIDsNS4_11char_traitsIDsEENS4_9allocatorIDsEEEEE4ReadES3_PSA_(%"class.mojo_base::mojom::internal::String16_Data"*, %"class.mojo::Message"*, %"class.std::__1::basic_string"*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.mojo_base::mojom::internal::String16_Data", %"class.mojo_base::mojom::internal::String16_Data"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.mojo::internal::Pointer", %"struct.mojo::internal::Pointer"* %4, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  %8 = bitcast %"struct.mojo::internal::Pointer"* %4 to i8*
  %9 = getelementptr inbounds i8, i8* %8, i64 %6
  %10 = bitcast i8* %9 to %"class.mojo::internal::Array_Data"*
  %11 = select i1 %7, %"class.mojo::internal::Array_Data"* null, %"class.mojo::internal::Array_Data"* %10
  %12 = getelementptr inbounds %"class.mojo::internal::Array_Data", %"class.mojo::internal::Array_Data"* %11, i64 1
  %13 = bitcast %"class.mojo::internal::Array_Data"* %12 to i16*
  %14 = getelementptr inbounds %"class.mojo::internal::Array_Data", %"class.mojo::internal::Array_Data"* %11, i64 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 1
  %16 = zext i32 %15 to i64
  %17 = tail call i1 @llvm.is.constant.i64(i64 %16) #9
  %18 = icmp ult i32 %15, 11
  %19 = and i1 %18, %17
  %20 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %20, i64 0, i32 1, i32 1
  %22 = load i8, i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  br i1 %19, label %24, label %335

24:                                               ; preds = %3
  br i1 %23, label %25, label %29

25:                                               ; preds = %24
  %26 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %16, i64* %26, align 8
  %27 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load i16*, i16** %27, align 8
  br label %32

29:                                               ; preds = %24
  %30 = trunc i32 %15 to i8
  store i8 %30, i8* %21, align 1
  %31 = bitcast %"class.std::__1::basic_string"* %2 to i16*
  br label %32

32:                                               ; preds = %29, %25
  %33 = phi i16* [ %28, %25 ], [ %31, %29 ]
  %34 = bitcast i16* %33 to i8*
  %35 = icmp eq i32 %15, 0
  br i1 %35, label %333, label %36

36:                                               ; preds = %32
  %37 = icmp ult i16* %33, %13
  br i1 %37, label %38, label %185

38:                                               ; preds = %36
  %39 = icmp ult i32 %15, 16
  br i1 %39, label %132, label %40

40:                                               ; preds = %38
  %41 = getelementptr i16, i16* %33, i64 %16
  %42 = getelementptr %"class.mojo::internal::Array_Data", %"class.mojo::internal::Array_Data"* %11, i64 1, i32 0, i32 0
  %43 = bitcast i32* %42 to i8*
  %44 = shl nuw nsw i64 %16, 1
  %45 = getelementptr i8, i8* %43, i64 %44
  %46 = icmp ugt i8* %45, %34
  %47 = bitcast i16* %41 to %"class.mojo::internal::Array_Data"*
  %48 = icmp ult %"class.mojo::internal::Array_Data"* %12, %47
  %49 = and i1 %46, %48
  br i1 %49, label %132, label %50

50:                                               ; preds = %40
  %51 = and i64 %16, 4294967280
  %52 = sub nsw i64 %16, %51
  %53 = getelementptr i16, i16* %13, i64 %51
  %54 = getelementptr i16, i16* %33, i64 %51
  %55 = add nsw i64 %51, -16
  %56 = lshr exact i64 %55, 4
  %57 = add nuw nsw i64 %56, 1
  %58 = and i64 %57, 3
  %59 = icmp ult i64 %55, 48
  br i1 %59, label %111, label %60

60:                                               ; preds = %50
  %61 = sub nsw i64 %57, %58
  br label %62

62:                                               ; preds = %62, %60
  %63 = phi i64 [ 0, %60 ], [ %108, %62 ]
  %64 = phi i64 [ %61, %60 ], [ %109, %62 ]
  %65 = getelementptr i16, i16* %13, i64 %63
  %66 = getelementptr i16, i16* %33, i64 %63
  %67 = bitcast i16* %65 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !2
  %69 = getelementptr i16, i16* %65, i64 8
  %70 = bitcast i16* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2, !alias.scope !2
  %72 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %72, align 2, !alias.scope !5, !noalias !2
  %73 = getelementptr i16, i16* %66, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %74, align 2, !alias.scope !5, !noalias !2
  %75 = or i64 %63, 16
  %76 = getelementptr i16, i16* %13, i64 %75
  %77 = getelementptr i16, i16* %33, i64 %75
  %78 = bitcast i16* %76 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !2
  %80 = getelementptr i16, i16* %76, i64 8
  %81 = bitcast i16* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !2
  %83 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %79, <8 x i16>* %83, align 2, !alias.scope !5, !noalias !2
  %84 = getelementptr i16, i16* %77, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %85, align 2, !alias.scope !5, !noalias !2
  %86 = or i64 %63, 32
  %87 = getelementptr i16, i16* %13, i64 %86
  %88 = getelementptr i16, i16* %33, i64 %86
  %89 = bitcast i16* %87 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2, !alias.scope !2
  %91 = getelementptr i16, i16* %87, i64 8
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !2
  %94 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %94, align 2, !alias.scope !5, !noalias !2
  %95 = getelementptr i16, i16* %88, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %96, align 2, !alias.scope !5, !noalias !2
  %97 = or i64 %63, 48
  %98 = getelementptr i16, i16* %13, i64 %97
  %99 = getelementptr i16, i16* %33, i64 %97
  %100 = bitcast i16* %98 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2, !alias.scope !2
  %102 = getelementptr i16, i16* %98, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !2
  %105 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %105, align 2, !alias.scope !5, !noalias !2
  %106 = getelementptr i16, i16* %99, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %107, align 2, !alias.scope !5, !noalias !2
  %108 = add i64 %63, 64
  %109 = add i64 %64, -4
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %62, !llvm.loop !7

111:                                              ; preds = %62, %50
  %112 = phi i64 [ 0, %50 ], [ %108, %62 ]
  %113 = icmp eq i64 %58, 0
  br i1 %113, label %130, label %114

114:                                              ; preds = %111, %114
  %115 = phi i64 [ %127, %114 ], [ %112, %111 ]
  %116 = phi i64 [ %128, %114 ], [ %58, %111 ]
  %117 = getelementptr i16, i16* %13, i64 %115
  %118 = getelementptr i16, i16* %33, i64 %115
  %119 = bitcast i16* %117 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 2, !alias.scope !2
  %121 = getelementptr i16, i16* %117, i64 8
  %122 = bitcast i16* %121 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2, !alias.scope !2
  %124 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %120, <8 x i16>* %124, align 2, !alias.scope !5, !noalias !2
  %125 = getelementptr i16, i16* %118, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %126, align 2, !alias.scope !5, !noalias !2
  %127 = add i64 %115, 16
  %128 = add i64 %116, -1
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %130, label %114, !llvm.loop !9

130:                                              ; preds = %114, %111
  %131 = icmp eq i64 %51, %16
  br i1 %131, label %333, label %132

132:                                              ; preds = %130, %40, %38
  %133 = phi i64 [ %16, %40 ], [ %16, %38 ], [ %52, %130 ]
  %134 = phi i16* [ %13, %40 ], [ %13, %38 ], [ %53, %130 ]
  %135 = phi i16* [ %33, %40 ], [ %33, %38 ], [ %54, %130 ]
  %136 = add nsw i64 %133, -1
  %137 = and i64 %133, 7
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %150, label %139

139:                                              ; preds = %132, %139
  %140 = phi i64 [ %145, %139 ], [ %133, %132 ]
  %141 = phi i16* [ %147, %139 ], [ %134, %132 ]
  %142 = phi i16* [ %146, %139 ], [ %135, %132 ]
  %143 = phi i64 [ %148, %139 ], [ %137, %132 ]
  %144 = load i16, i16* %141, align 2
  store i16 %144, i16* %142, align 2
  %145 = add nsw i64 %140, -1
  %146 = getelementptr inbounds i16, i16* %142, i64 1
  %147 = getelementptr inbounds i16, i16* %141, i64 1
  %148 = add i64 %143, -1
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %150, label %139, !llvm.loop !11

150:                                              ; preds = %139, %132
  %151 = phi i64 [ %133, %132 ], [ %145, %139 ]
  %152 = phi i16* [ %134, %132 ], [ %147, %139 ]
  %153 = phi i16* [ %135, %132 ], [ %146, %139 ]
  %154 = icmp ult i64 %136, 7
  br i1 %154, label %333, label %155

155:                                              ; preds = %150, %155
  %156 = phi i64 [ %181, %155 ], [ %151, %150 ]
  %157 = phi i16* [ %183, %155 ], [ %152, %150 ]
  %158 = phi i16* [ %182, %155 ], [ %153, %150 ]
  %159 = load i16, i16* %157, align 2
  store i16 %159, i16* %158, align 2
  %160 = getelementptr inbounds i16, i16* %158, i64 1
  %161 = getelementptr inbounds i16, i16* %157, i64 1
  %162 = load i16, i16* %161, align 2
  store i16 %162, i16* %160, align 2
  %163 = getelementptr inbounds i16, i16* %158, i64 2
  %164 = getelementptr inbounds i16, i16* %157, i64 2
  %165 = load i16, i16* %164, align 2
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds i16, i16* %158, i64 3
  %167 = getelementptr inbounds i16, i16* %157, i64 3
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %166, align 2
  %169 = getelementptr inbounds i16, i16* %158, i64 4
  %170 = getelementptr inbounds i16, i16* %157, i64 4
  %171 = load i16, i16* %170, align 2
  store i16 %171, i16* %169, align 2
  %172 = getelementptr inbounds i16, i16* %158, i64 5
  %173 = getelementptr inbounds i16, i16* %157, i64 5
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %172, align 2
  %175 = getelementptr inbounds i16, i16* %158, i64 6
  %176 = getelementptr inbounds i16, i16* %157, i64 6
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %158, i64 7
  %179 = getelementptr inbounds i16, i16* %157, i64 7
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = add nsw i64 %156, -8
  %182 = getelementptr inbounds i16, i16* %158, i64 8
  %183 = getelementptr inbounds i16, i16* %157, i64 8
  %184 = icmp eq i64 %181, 0
  br i1 %184, label %333, label %155, !llvm.loop !12

185:                                              ; preds = %36
  %186 = icmp ugt i16* %33, %13
  br i1 %186, label %187, label %333

187:                                              ; preds = %185
  %188 = getelementptr inbounds i16, i16* %13, i64 %16
  %189 = getelementptr inbounds i16, i16* %33, i64 %16
  %190 = icmp ult i32 %15, 16
  br i1 %190, label %280, label %191

191:                                              ; preds = %187
  %192 = getelementptr %"class.mojo::internal::Array_Data", %"class.mojo::internal::Array_Data"* %11, i64 1, i32 0, i32 0
  %193 = bitcast i32* %192 to i8*
  %194 = shl nuw nsw i64 %16, 1
  %195 = getelementptr i8, i8* %193, i64 %194
  %196 = icmp ugt i8* %195, %34
  %197 = bitcast i16* %189 to %"class.mojo::internal::Array_Data"*
  %198 = icmp ult %"class.mojo::internal::Array_Data"* %12, %197
  %199 = and i1 %196, %198
  br i1 %199, label %280, label %200

200:                                              ; preds = %191
  %201 = and i64 %16, 4294967280
  %202 = sub nsw i64 %16, %201
  %203 = sub nsw i64 0, %201
  %204 = getelementptr i16, i16* %188, i64 %203
  %205 = sub nsw i64 0, %201
  %206 = getelementptr i16, i16* %189, i64 %205
  %207 = add nsw i64 %201, -16
  %208 = lshr exact i64 %207, 4
  %209 = add nuw nsw i64 %208, 1
  %210 = and i64 %209, 1
  %211 = icmp eq i64 %207, 0
  br i1 %211, label %258, label %212

212:                                              ; preds = %200
  %213 = sub nuw nsw i64 %209, %210
  %214 = getelementptr i16, i16* %188, i64 -1
  %215 = getelementptr i16, i16* %189, i64 -1
  %216 = getelementptr i16, i16* %188, i64 -1
  %217 = getelementptr i16, i16* %189, i64 -1
  br label %218

218:                                              ; preds = %218, %212
  %219 = phi i64 [ 0, %212 ], [ %253, %218 ]
  %220 = phi i64 [ %213, %212 ], [ %254, %218 ]
  %221 = sub i64 0, %219
  %222 = sub i64 0, %219
  %223 = getelementptr inbounds i16, i16* %215, i64 %222
  %224 = getelementptr inbounds i16, i16* %214, i64 %221
  %225 = getelementptr inbounds i16, i16* %224, i64 -7
  %226 = bitcast i16* %225 to <8 x i16>*
  %227 = load <8 x i16>, <8 x i16>* %226, align 2, !alias.scope !13
  %228 = getelementptr inbounds i16, i16* %224, i64 -8
  %229 = getelementptr inbounds i16, i16* %228, i64 -7
  %230 = bitcast i16* %229 to <8 x i16>*
  %231 = load <8 x i16>, <8 x i16>* %230, align 2, !alias.scope !13
  %232 = getelementptr inbounds i16, i16* %223, i64 -7
  %233 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> %227, <8 x i16>* %233, align 2, !alias.scope !16, !noalias !13
  %234 = getelementptr inbounds i16, i16* %223, i64 -8
  %235 = getelementptr inbounds i16, i16* %234, i64 -7
  %236 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %231, <8 x i16>* %236, align 2, !alias.scope !16, !noalias !13
  %237 = sub nuw nsw i64 -16, %219
  %238 = sub nuw nsw i64 -16, %219
  %239 = getelementptr inbounds i16, i16* %217, i64 %238
  %240 = getelementptr inbounds i16, i16* %216, i64 %237
  %241 = getelementptr inbounds i16, i16* %240, i64 -7
  %242 = bitcast i16* %241 to <8 x i16>*
  %243 = load <8 x i16>, <8 x i16>* %242, align 2, !alias.scope !13
  %244 = getelementptr inbounds i16, i16* %240, i64 -8
  %245 = getelementptr inbounds i16, i16* %244, i64 -7
  %246 = bitcast i16* %245 to <8 x i16>*
  %247 = load <8 x i16>, <8 x i16>* %246, align 2, !alias.scope !13
  %248 = getelementptr inbounds i16, i16* %239, i64 -7
  %249 = bitcast i16* %248 to <8 x i16>*
  store <8 x i16> %243, <8 x i16>* %249, align 2, !alias.scope !16, !noalias !13
  %250 = getelementptr inbounds i16, i16* %239, i64 -8
  %251 = getelementptr inbounds i16, i16* %250, i64 -7
  %252 = bitcast i16* %251 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %252, align 2, !alias.scope !16, !noalias !13
  %253 = add i64 %219, 32
  %254 = add i64 %220, -2
  %255 = icmp eq i64 %254, 0
  br i1 %255, label %256, label %218, !llvm.loop !18

256:                                              ; preds = %218
  %257 = sub nuw nsw i64 -32, %219
  br label %258

258:                                              ; preds = %256, %200
  %259 = phi i64 [ 0, %200 ], [ %257, %256 ]
  %260 = icmp eq i64 %210, 0
  br i1 %260, label %278, label %261

261:                                              ; preds = %258
  %262 = getelementptr i16, i16* %188, i64 -1
  %263 = getelementptr i16, i16* %189, i64 -1
  %264 = getelementptr inbounds i16, i16* %263, i64 %259
  %265 = getelementptr inbounds i16, i16* %262, i64 %259
  %266 = getelementptr inbounds i16, i16* %265, i64 -7
  %267 = bitcast i16* %266 to <8 x i16>*
  %268 = load <8 x i16>, <8 x i16>* %267, align 2, !alias.scope !13
  %269 = getelementptr inbounds i16, i16* %265, i64 -8
  %270 = getelementptr inbounds i16, i16* %269, i64 -7
  %271 = bitcast i16* %270 to <8 x i16>*
  %272 = load <8 x i16>, <8 x i16>* %271, align 2, !alias.scope !13
  %273 = getelementptr inbounds i16, i16* %264, i64 -7
  %274 = bitcast i16* %273 to <8 x i16>*
  store <8 x i16> %268, <8 x i16>* %274, align 2, !alias.scope !16, !noalias !13
  %275 = getelementptr inbounds i16, i16* %264, i64 -8
  %276 = getelementptr inbounds i16, i16* %275, i64 -7
  %277 = bitcast i16* %276 to <8 x i16>*
  store <8 x i16> %272, <8 x i16>* %277, align 2, !alias.scope !16, !noalias !13
  br label %278

278:                                              ; preds = %258, %261
  %279 = icmp eq i64 %201, %16
  br i1 %279, label %333, label %280

280:                                              ; preds = %278, %191, %187
  %281 = phi i64 [ %16, %191 ], [ %16, %187 ], [ %202, %278 ]
  %282 = phi i16* [ %188, %191 ], [ %188, %187 ], [ %204, %278 ]
  %283 = phi i16* [ %189, %191 ], [ %189, %187 ], [ %206, %278 ]
  %284 = add nsw i64 %281, -1
  %285 = and i64 %281, 7
  %286 = icmp eq i64 %285, 0
  br i1 %286, label %298, label %287

287:                                              ; preds = %280, %287
  %288 = phi i64 [ %295, %287 ], [ %281, %280 ]
  %289 = phi i16* [ %293, %287 ], [ %282, %280 ]
  %290 = phi i16* [ %292, %287 ], [ %283, %280 ]
  %291 = phi i64 [ %296, %287 ], [ %285, %280 ]
  %292 = getelementptr inbounds i16, i16* %290, i64 -1
  %293 = getelementptr inbounds i16, i16* %289, i64 -1
  %294 = load i16, i16* %293, align 2
  store i16 %294, i16* %292, align 2
  %295 = add nsw i64 %288, -1
  %296 = add i64 %291, -1
  %297 = icmp eq i64 %296, 0
  br i1 %297, label %298, label %287, !llvm.loop !19

298:                                              ; preds = %287, %280
  %299 = phi i64 [ %281, %280 ], [ %295, %287 ]
  %300 = phi i16* [ %282, %280 ], [ %293, %287 ]
  %301 = phi i16* [ %283, %280 ], [ %292, %287 ]
  %302 = icmp ult i64 %284, 7
  br i1 %302, label %333, label %303

303:                                              ; preds = %298, %303
  %304 = phi i64 [ %331, %303 ], [ %299, %298 ]
  %305 = phi i16* [ %329, %303 ], [ %300, %298 ]
  %306 = phi i16* [ %328, %303 ], [ %301, %298 ]
  %307 = getelementptr inbounds i16, i16* %306, i64 -1
  %308 = getelementptr inbounds i16, i16* %305, i64 -1
  %309 = load i16, i16* %308, align 2
  store i16 %309, i16* %307, align 2
  %310 = getelementptr inbounds i16, i16* %306, i64 -2
  %311 = getelementptr inbounds i16, i16* %305, i64 -2
  %312 = load i16, i16* %311, align 2
  store i16 %312, i16* %310, align 2
  %313 = getelementptr inbounds i16, i16* %306, i64 -3
  %314 = getelementptr inbounds i16, i16* %305, i64 -3
  %315 = load i16, i16* %314, align 2
  store i16 %315, i16* %313, align 2
  %316 = getelementptr inbounds i16, i16* %306, i64 -4
  %317 = getelementptr inbounds i16, i16* %305, i64 -4
  %318 = load i16, i16* %317, align 2
  store i16 %318, i16* %316, align 2
  %319 = getelementptr inbounds i16, i16* %306, i64 -5
  %320 = getelementptr inbounds i16, i16* %305, i64 -5
  %321 = load i16, i16* %320, align 2
  store i16 %321, i16* %319, align 2
  %322 = getelementptr inbounds i16, i16* %306, i64 -6
  %323 = getelementptr inbounds i16, i16* %305, i64 -6
  %324 = load i16, i16* %323, align 2
  store i16 %324, i16* %322, align 2
  %325 = getelementptr inbounds i16, i16* %306, i64 -7
  %326 = getelementptr inbounds i16, i16* %305, i64 -7
  %327 = load i16, i16* %326, align 2
  store i16 %327, i16* %325, align 2
  %328 = getelementptr inbounds i16, i16* %306, i64 -8
  %329 = getelementptr inbounds i16, i16* %305, i64 -8
  %330 = load i16, i16* %329, align 2
  store i16 %330, i16* %328, align 2
  %331 = add nsw i64 %304, -8
  %332 = icmp eq i64 %331, 0
  br i1 %332, label %333, label %303, !llvm.loop !20

333:                                              ; preds = %298, %303, %150, %155, %278, %130, %185, %32
  %334 = getelementptr inbounds i16, i16* %33, i64 %16
  store i16 0, i16* %334, align 2
  br label %668

335:                                              ; preds = %3
  br i1 %23, label %336, label %341

336:                                              ; preds = %335
  %337 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %338 = load i64, i64* %337, align 8
  %339 = and i64 %338, 9223372036854775807
  %340 = add nsw i64 %339, -1
  br label %341

341:                                              ; preds = %336, %335
  %342 = phi i64 [ %340, %336 ], [ 10, %335 ]
  %343 = icmp ult i64 %342, %16
  br i1 %343, label %659, label %344

344:                                              ; preds = %341
  br i1 %23, label %345, label %348

345:                                              ; preds = %344
  %346 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %347 = load i16*, i16** %346, align 8
  br label %350

348:                                              ; preds = %344
  %349 = bitcast %"class.std::__1::basic_string"* %2 to i16*
  br label %350

350:                                              ; preds = %348, %345
  %351 = phi i16* [ %347, %345 ], [ %349, %348 ]
  %352 = bitcast i16* %351 to i8*
  %353 = icmp eq i32 %15, 0
  br i1 %353, label %651, label %354

354:                                              ; preds = %350
  %355 = icmp ult i16* %351, %13
  br i1 %355, label %356, label %503

356:                                              ; preds = %354
  %357 = icmp ult i32 %15, 16
  br i1 %357, label %450, label %358

358:                                              ; preds = %356
  %359 = getelementptr i16, i16* %351, i64 %16
  %360 = getelementptr %"class.mojo::internal::Array_Data", %"class.mojo::internal::Array_Data"* %11, i64 1, i32 0, i32 0
  %361 = bitcast i32* %360 to i8*
  %362 = shl nuw nsw i64 %16, 1
  %363 = getelementptr i8, i8* %361, i64 %362
  %364 = icmp ugt i8* %363, %352
  %365 = bitcast i16* %359 to %"class.mojo::internal::Array_Data"*
  %366 = icmp ult %"class.mojo::internal::Array_Data"* %12, %365
  %367 = and i1 %364, %366
  br i1 %367, label %450, label %368

368:                                              ; preds = %358
  %369 = and i64 %16, 4294967280
  %370 = sub nsw i64 %16, %369
  %371 = getelementptr i16, i16* %13, i64 %369
  %372 = getelementptr i16, i16* %351, i64 %369
  %373 = add nsw i64 %369, -16
  %374 = lshr exact i64 %373, 4
  %375 = add nuw nsw i64 %374, 1
  %376 = and i64 %375, 3
  %377 = icmp ult i64 %373, 48
  br i1 %377, label %429, label %378

378:                                              ; preds = %368
  %379 = sub nsw i64 %375, %376
  br label %380

380:                                              ; preds = %380, %378
  %381 = phi i64 [ 0, %378 ], [ %426, %380 ]
  %382 = phi i64 [ %379, %378 ], [ %427, %380 ]
  %383 = getelementptr i16, i16* %13, i64 %381
  %384 = getelementptr i16, i16* %351, i64 %381
  %385 = bitcast i16* %383 to <8 x i16>*
  %386 = load <8 x i16>, <8 x i16>* %385, align 2, !alias.scope !21
  %387 = getelementptr i16, i16* %383, i64 8
  %388 = bitcast i16* %387 to <8 x i16>*
  %389 = load <8 x i16>, <8 x i16>* %388, align 2, !alias.scope !21
  %390 = bitcast i16* %384 to <8 x i16>*
  store <8 x i16> %386, <8 x i16>* %390, align 2, !alias.scope !24, !noalias !21
  %391 = getelementptr i16, i16* %384, i64 8
  %392 = bitcast i16* %391 to <8 x i16>*
  store <8 x i16> %389, <8 x i16>* %392, align 2, !alias.scope !24, !noalias !21
  %393 = or i64 %381, 16
  %394 = getelementptr i16, i16* %13, i64 %393
  %395 = getelementptr i16, i16* %351, i64 %393
  %396 = bitcast i16* %394 to <8 x i16>*
  %397 = load <8 x i16>, <8 x i16>* %396, align 2, !alias.scope !21
  %398 = getelementptr i16, i16* %394, i64 8
  %399 = bitcast i16* %398 to <8 x i16>*
  %400 = load <8 x i16>, <8 x i16>* %399, align 2, !alias.scope !21
  %401 = bitcast i16* %395 to <8 x i16>*
  store <8 x i16> %397, <8 x i16>* %401, align 2, !alias.scope !24, !noalias !21
  %402 = getelementptr i16, i16* %395, i64 8
  %403 = bitcast i16* %402 to <8 x i16>*
  store <8 x i16> %400, <8 x i16>* %403, align 2, !alias.scope !24, !noalias !21
  %404 = or i64 %381, 32
  %405 = getelementptr i16, i16* %13, i64 %404
  %406 = getelementptr i16, i16* %351, i64 %404
  %407 = bitcast i16* %405 to <8 x i16>*
  %408 = load <8 x i16>, <8 x i16>* %407, align 2, !alias.scope !21
  %409 = getelementptr i16, i16* %405, i64 8
  %410 = bitcast i16* %409 to <8 x i16>*
  %411 = load <8 x i16>, <8 x i16>* %410, align 2, !alias.scope !21
  %412 = bitcast i16* %406 to <8 x i16>*
  store <8 x i16> %408, <8 x i16>* %412, align 2, !alias.scope !24, !noalias !21
  %413 = getelementptr i16, i16* %406, i64 8
  %414 = bitcast i16* %413 to <8 x i16>*
  store <8 x i16> %411, <8 x i16>* %414, align 2, !alias.scope !24, !noalias !21
  %415 = or i64 %381, 48
  %416 = getelementptr i16, i16* %13, i64 %415
  %417 = getelementptr i16, i16* %351, i64 %415
  %418 = bitcast i16* %416 to <8 x i16>*
  %419 = load <8 x i16>, <8 x i16>* %418, align 2, !alias.scope !21
  %420 = getelementptr i16, i16* %416, i64 8
  %421 = bitcast i16* %420 to <8 x i16>*
  %422 = load <8 x i16>, <8 x i16>* %421, align 2, !alias.scope !21
  %423 = bitcast i16* %417 to <8 x i16>*
  store <8 x i16> %419, <8 x i16>* %423, align 2, !alias.scope !24, !noalias !21
  %424 = getelementptr i16, i16* %417, i64 8
  %425 = bitcast i16* %424 to <8 x i16>*
  store <8 x i16> %422, <8 x i16>* %425, align 2, !alias.scope !24, !noalias !21
  %426 = add i64 %381, 64
  %427 = add i64 %382, -4
  %428 = icmp eq i64 %427, 0
  br i1 %428, label %429, label %380, !llvm.loop !26

429:                                              ; preds = %380, %368
  %430 = phi i64 [ 0, %368 ], [ %426, %380 ]
  %431 = icmp eq i64 %376, 0
  br i1 %431, label %448, label %432

432:                                              ; preds = %429, %432
  %433 = phi i64 [ %445, %432 ], [ %430, %429 ]
  %434 = phi i64 [ %446, %432 ], [ %376, %429 ]
  %435 = getelementptr i16, i16* %13, i64 %433
  %436 = getelementptr i16, i16* %351, i64 %433
  %437 = bitcast i16* %435 to <8 x i16>*
  %438 = load <8 x i16>, <8 x i16>* %437, align 2, !alias.scope !21
  %439 = getelementptr i16, i16* %435, i64 8
  %440 = bitcast i16* %439 to <8 x i16>*
  %441 = load <8 x i16>, <8 x i16>* %440, align 2, !alias.scope !21
  %442 = bitcast i16* %436 to <8 x i16>*
  store <8 x i16> %438, <8 x i16>* %442, align 2, !alias.scope !24, !noalias !21
  %443 = getelementptr i16, i16* %436, i64 8
  %444 = bitcast i16* %443 to <8 x i16>*
  store <8 x i16> %441, <8 x i16>* %444, align 2, !alias.scope !24, !noalias !21
  %445 = add i64 %433, 16
  %446 = add i64 %434, -1
  %447 = icmp eq i64 %446, 0
  br i1 %447, label %448, label %432, !llvm.loop !27

448:                                              ; preds = %432, %429
  %449 = icmp eq i64 %369, %16
  br i1 %449, label %651, label %450

450:                                              ; preds = %448, %358, %356
  %451 = phi i64 [ %16, %358 ], [ %16, %356 ], [ %370, %448 ]
  %452 = phi i16* [ %13, %358 ], [ %13, %356 ], [ %371, %448 ]
  %453 = phi i16* [ %351, %358 ], [ %351, %356 ], [ %372, %448 ]
  %454 = add nsw i64 %451, -1
  %455 = and i64 %451, 7
  %456 = icmp eq i64 %455, 0
  br i1 %456, label %468, label %457

457:                                              ; preds = %450, %457
  %458 = phi i64 [ %463, %457 ], [ %451, %450 ]
  %459 = phi i16* [ %465, %457 ], [ %452, %450 ]
  %460 = phi i16* [ %464, %457 ], [ %453, %450 ]
  %461 = phi i64 [ %466, %457 ], [ %455, %450 ]
  %462 = load i16, i16* %459, align 2
  store i16 %462, i16* %460, align 2
  %463 = add nsw i64 %458, -1
  %464 = getelementptr inbounds i16, i16* %460, i64 1
  %465 = getelementptr inbounds i16, i16* %459, i64 1
  %466 = add i64 %461, -1
  %467 = icmp eq i64 %466, 0
  br i1 %467, label %468, label %457, !llvm.loop !28

468:                                              ; preds = %457, %450
  %469 = phi i64 [ %451, %450 ], [ %463, %457 ]
  %470 = phi i16* [ %452, %450 ], [ %465, %457 ]
  %471 = phi i16* [ %453, %450 ], [ %464, %457 ]
  %472 = icmp ult i64 %454, 7
  br i1 %472, label %651, label %473

473:                                              ; preds = %468, %473
  %474 = phi i64 [ %499, %473 ], [ %469, %468 ]
  %475 = phi i16* [ %501, %473 ], [ %470, %468 ]
  %476 = phi i16* [ %500, %473 ], [ %471, %468 ]
  %477 = load i16, i16* %475, align 2
  store i16 %477, i16* %476, align 2
  %478 = getelementptr inbounds i16, i16* %476, i64 1
  %479 = getelementptr inbounds i16, i16* %475, i64 1
  %480 = load i16, i16* %479, align 2
  store i16 %480, i16* %478, align 2
  %481 = getelementptr inbounds i16, i16* %476, i64 2
  %482 = getelementptr inbounds i16, i16* %475, i64 2
  %483 = load i16, i16* %482, align 2
  store i16 %483, i16* %481, align 2
  %484 = getelementptr inbounds i16, i16* %476, i64 3
  %485 = getelementptr inbounds i16, i16* %475, i64 3
  %486 = load i16, i16* %485, align 2
  store i16 %486, i16* %484, align 2
  %487 = getelementptr inbounds i16, i16* %476, i64 4
  %488 = getelementptr inbounds i16, i16* %475, i64 4
  %489 = load i16, i16* %488, align 2
  store i16 %489, i16* %487, align 2
  %490 = getelementptr inbounds i16, i16* %476, i64 5
  %491 = getelementptr inbounds i16, i16* %475, i64 5
  %492 = load i16, i16* %491, align 2
  store i16 %492, i16* %490, align 2
  %493 = getelementptr inbounds i16, i16* %476, i64 6
  %494 = getelementptr inbounds i16, i16* %475, i64 6
  %495 = load i16, i16* %494, align 2
  store i16 %495, i16* %493, align 2
  %496 = getelementptr inbounds i16, i16* %476, i64 7
  %497 = getelementptr inbounds i16, i16* %475, i64 7
  %498 = load i16, i16* %497, align 2
  store i16 %498, i16* %496, align 2
  %499 = add nsw i64 %474, -8
  %500 = getelementptr inbounds i16, i16* %476, i64 8
  %501 = getelementptr inbounds i16, i16* %475, i64 8
  %502 = icmp eq i64 %499, 0
  br i1 %502, label %651, label %473, !llvm.loop !29

503:                                              ; preds = %354
  %504 = icmp ugt i16* %351, %13
  br i1 %504, label %505, label %651

505:                                              ; preds = %503
  %506 = getelementptr inbounds i16, i16* %13, i64 %16
  %507 = getelementptr inbounds i16, i16* %351, i64 %16
  %508 = icmp ult i32 %15, 16
  br i1 %508, label %598, label %509

509:                                              ; preds = %505
  %510 = getelementptr %"class.mojo::internal::Array_Data", %"class.mojo::internal::Array_Data"* %11, i64 1, i32 0, i32 0
  %511 = bitcast i32* %510 to i8*
  %512 = shl nuw nsw i64 %16, 1
  %513 = getelementptr i8, i8* %511, i64 %512
  %514 = icmp ugt i8* %513, %352
  %515 = bitcast i16* %507 to %"class.mojo::internal::Array_Data"*
  %516 = icmp ult %"class.mojo::internal::Array_Data"* %12, %515
  %517 = and i1 %514, %516
  br i1 %517, label %598, label %518

518:                                              ; preds = %509
  %519 = and i64 %16, 4294967280
  %520 = sub nsw i64 %16, %519
  %521 = sub nsw i64 0, %519
  %522 = getelementptr i16, i16* %506, i64 %521
  %523 = sub nsw i64 0, %519
  %524 = getelementptr i16, i16* %507, i64 %523
  %525 = add nsw i64 %519, -16
  %526 = lshr exact i64 %525, 4
  %527 = add nuw nsw i64 %526, 1
  %528 = and i64 %527, 1
  %529 = icmp eq i64 %525, 0
  br i1 %529, label %576, label %530

530:                                              ; preds = %518
  %531 = sub nuw nsw i64 %527, %528
  %532 = getelementptr i16, i16* %506, i64 -1
  %533 = getelementptr i16, i16* %507, i64 -1
  %534 = getelementptr i16, i16* %506, i64 -1
  %535 = getelementptr i16, i16* %507, i64 -1
  br label %536

536:                                              ; preds = %536, %530
  %537 = phi i64 [ 0, %530 ], [ %571, %536 ]
  %538 = phi i64 [ %531, %530 ], [ %572, %536 ]
  %539 = sub i64 0, %537
  %540 = sub i64 0, %537
  %541 = getelementptr inbounds i16, i16* %533, i64 %540
  %542 = getelementptr inbounds i16, i16* %532, i64 %539
  %543 = getelementptr inbounds i16, i16* %542, i64 -7
  %544 = bitcast i16* %543 to <8 x i16>*
  %545 = load <8 x i16>, <8 x i16>* %544, align 2, !alias.scope !30
  %546 = getelementptr inbounds i16, i16* %542, i64 -8
  %547 = getelementptr inbounds i16, i16* %546, i64 -7
  %548 = bitcast i16* %547 to <8 x i16>*
  %549 = load <8 x i16>, <8 x i16>* %548, align 2, !alias.scope !30
  %550 = getelementptr inbounds i16, i16* %541, i64 -7
  %551 = bitcast i16* %550 to <8 x i16>*
  store <8 x i16> %545, <8 x i16>* %551, align 2, !alias.scope !33, !noalias !30
  %552 = getelementptr inbounds i16, i16* %541, i64 -8
  %553 = getelementptr inbounds i16, i16* %552, i64 -7
  %554 = bitcast i16* %553 to <8 x i16>*
  store <8 x i16> %549, <8 x i16>* %554, align 2, !alias.scope !33, !noalias !30
  %555 = sub nuw nsw i64 -16, %537
  %556 = sub nuw nsw i64 -16, %537
  %557 = getelementptr inbounds i16, i16* %535, i64 %556
  %558 = getelementptr inbounds i16, i16* %534, i64 %555
  %559 = getelementptr inbounds i16, i16* %558, i64 -7
  %560 = bitcast i16* %559 to <8 x i16>*
  %561 = load <8 x i16>, <8 x i16>* %560, align 2, !alias.scope !30
  %562 = getelementptr inbounds i16, i16* %558, i64 -8
  %563 = getelementptr inbounds i16, i16* %562, i64 -7
  %564 = bitcast i16* %563 to <8 x i16>*
  %565 = load <8 x i16>, <8 x i16>* %564, align 2, !alias.scope !30
  %566 = getelementptr inbounds i16, i16* %557, i64 -7
  %567 = bitcast i16* %566 to <8 x i16>*
  store <8 x i16> %561, <8 x i16>* %567, align 2, !alias.scope !33, !noalias !30
  %568 = getelementptr inbounds i16, i16* %557, i64 -8
  %569 = getelementptr inbounds i16, i16* %568, i64 -7
  %570 = bitcast i16* %569 to <8 x i16>*
  store <8 x i16> %565, <8 x i16>* %570, align 2, !alias.scope !33, !noalias !30
  %571 = add i64 %537, 32
  %572 = add i64 %538, -2
  %573 = icmp eq i64 %572, 0
  br i1 %573, label %574, label %536, !llvm.loop !35

574:                                              ; preds = %536
  %575 = sub nuw nsw i64 -32, %537
  br label %576

576:                                              ; preds = %574, %518
  %577 = phi i64 [ 0, %518 ], [ %575, %574 ]
  %578 = icmp eq i64 %528, 0
  br i1 %578, label %596, label %579

579:                                              ; preds = %576
  %580 = getelementptr i16, i16* %506, i64 -1
  %581 = getelementptr i16, i16* %507, i64 -1
  %582 = getelementptr inbounds i16, i16* %581, i64 %577
  %583 = getelementptr inbounds i16, i16* %580, i64 %577
  %584 = getelementptr inbounds i16, i16* %583, i64 -7
  %585 = bitcast i16* %584 to <8 x i16>*
  %586 = load <8 x i16>, <8 x i16>* %585, align 2, !alias.scope !30
  %587 = getelementptr inbounds i16, i16* %583, i64 -8
  %588 = getelementptr inbounds i16, i16* %587, i64 -7
  %589 = bitcast i16* %588 to <8 x i16>*
  %590 = load <8 x i16>, <8 x i16>* %589, align 2, !alias.scope !30
  %591 = getelementptr inbounds i16, i16* %582, i64 -7
  %592 = bitcast i16* %591 to <8 x i16>*
  store <8 x i16> %586, <8 x i16>* %592, align 2, !alias.scope !33, !noalias !30
  %593 = getelementptr inbounds i16, i16* %582, i64 -8
  %594 = getelementptr inbounds i16, i16* %593, i64 -7
  %595 = bitcast i16* %594 to <8 x i16>*
  store <8 x i16> %590, <8 x i16>* %595, align 2, !alias.scope !33, !noalias !30
  br label %596

596:                                              ; preds = %576, %579
  %597 = icmp eq i64 %519, %16
  br i1 %597, label %651, label %598

598:                                              ; preds = %596, %509, %505
  %599 = phi i64 [ %16, %509 ], [ %16, %505 ], [ %520, %596 ]
  %600 = phi i16* [ %506, %509 ], [ %506, %505 ], [ %522, %596 ]
  %601 = phi i16* [ %507, %509 ], [ %507, %505 ], [ %524, %596 ]
  %602 = add nsw i64 %599, -1
  %603 = and i64 %599, 7
  %604 = icmp eq i64 %603, 0
  br i1 %604, label %616, label %605

605:                                              ; preds = %598, %605
  %606 = phi i64 [ %613, %605 ], [ %599, %598 ]
  %607 = phi i16* [ %611, %605 ], [ %600, %598 ]
  %608 = phi i16* [ %610, %605 ], [ %601, %598 ]
  %609 = phi i64 [ %614, %605 ], [ %603, %598 ]
  %610 = getelementptr inbounds i16, i16* %608, i64 -1
  %611 = getelementptr inbounds i16, i16* %607, i64 -1
  %612 = load i16, i16* %611, align 2
  store i16 %612, i16* %610, align 2
  %613 = add nsw i64 %606, -1
  %614 = add i64 %609, -1
  %615 = icmp eq i64 %614, 0
  br i1 %615, label %616, label %605, !llvm.loop !36

616:                                              ; preds = %605, %598
  %617 = phi i64 [ %599, %598 ], [ %613, %605 ]
  %618 = phi i16* [ %600, %598 ], [ %611, %605 ]
  %619 = phi i16* [ %601, %598 ], [ %610, %605 ]
  %620 = icmp ult i64 %602, 7
  br i1 %620, label %651, label %621

621:                                              ; preds = %616, %621
  %622 = phi i64 [ %649, %621 ], [ %617, %616 ]
  %623 = phi i16* [ %647, %621 ], [ %618, %616 ]
  %624 = phi i16* [ %646, %621 ], [ %619, %616 ]
  %625 = getelementptr inbounds i16, i16* %624, i64 -1
  %626 = getelementptr inbounds i16, i16* %623, i64 -1
  %627 = load i16, i16* %626, align 2
  store i16 %627, i16* %625, align 2
  %628 = getelementptr inbounds i16, i16* %624, i64 -2
  %629 = getelementptr inbounds i16, i16* %623, i64 -2
  %630 = load i16, i16* %629, align 2
  store i16 %630, i16* %628, align 2
  %631 = getelementptr inbounds i16, i16* %624, i64 -3
  %632 = getelementptr inbounds i16, i16* %623, i64 -3
  %633 = load i16, i16* %632, align 2
  store i16 %633, i16* %631, align 2
  %634 = getelementptr inbounds i16, i16* %624, i64 -4
  %635 = getelementptr inbounds i16, i16* %623, i64 -4
  %636 = load i16, i16* %635, align 2
  store i16 %636, i16* %634, align 2
  %637 = getelementptr inbounds i16, i16* %624, i64 -5
  %638 = getelementptr inbounds i16, i16* %623, i64 -5
  %639 = load i16, i16* %638, align 2
  store i16 %639, i16* %637, align 2
  %640 = getelementptr inbounds i16, i16* %624, i64 -6
  %641 = getelementptr inbounds i16, i16* %623, i64 -6
  %642 = load i16, i16* %641, align 2
  store i16 %642, i16* %640, align 2
  %643 = getelementptr inbounds i16, i16* %624, i64 -7
  %644 = getelementptr inbounds i16, i16* %623, i64 -7
  %645 = load i16, i16* %644, align 2
  store i16 %645, i16* %643, align 2
  %646 = getelementptr inbounds i16, i16* %624, i64 -8
  %647 = getelementptr inbounds i16, i16* %623, i64 -8
  %648 = load i16, i16* %647, align 2
  store i16 %648, i16* %646, align 2
  %649 = add nsw i64 %622, -8
  %650 = icmp eq i64 %649, 0
  br i1 %650, label %651, label %621, !llvm.loop !37

651:                                              ; preds = %616, %621, %468, %473, %596, %448, %503, %350
  %652 = getelementptr inbounds i16, i16* %351, i64 %16
  store i16 0, i16* %652, align 2
  %653 = load i8, i8* %21, align 1
  %654 = icmp slt i8 %653, 0
  br i1 %654, label %655, label %657

655:                                              ; preds = %651
  %656 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %16, i64* %656, align 8
  br label %668

657:                                              ; preds = %651
  %658 = trunc i32 %15 to i8
  store i8 %658, i8* %21, align 1
  br label %668

659:                                              ; preds = %341
  br i1 %23, label %660, label %663

660:                                              ; preds = %659
  %661 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %662 = load i64, i64* %661, align 8
  br label %665

663:                                              ; preds = %659
  %664 = zext i8 %22 to i64
  br label %665

665:                                              ; preds = %663, %660
  %666 = phi i64 [ %662, %660 ], [ %664, %663 ]
  %667 = sub nsw i64 %16, %342
  tail call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string"* %2, i64 %342, i64 %667, i64 %666, i64 0, i64 %666, i64 %16, i16* %13) #9
  br label %668

668:                                              ; preds = %665, %657, %655, %333
  ret i1 true
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4mojo12StructTraitsIN9mojo_base5mojom19BigString16DataViewENSt3__112basic_stringIDsNS4_11char_traitsIDsEENS4_9allocatorIDsEEEEE4dataERKSA_(%"class.mojo_base::BigBuffer"* noalias sret, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %3, i64 0, i32 1, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  %7 = bitcast %"class.std::__1::basic_string"* %1 to i8**
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %12 = zext i8 %5 to i64
  %13 = select i1 %6, i8* %8, i8* %11
  %14 = select i1 %6, i64 %10, i64 %12
  %15 = shl i64 %14, 1
  tail call void @_ZN9mojo_base9BigBufferC1EN4base4spanIKhLm18446744073709551615EEE(%"class.mojo_base::BigBuffer"* %0, i64 %15, i8* %13) #9
  ret void
}

declare void @_ZN9mojo_base9BigBufferC1EN4base4spanIKhLm18446744073709551615EEE(%"class.mojo_base::BigBuffer"*, i64, i8*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4mojo12StructTraitsIN9mojo_base5mojom19BigString16DataViewENSt3__112basic_stringIDsNS4_11char_traitsIDsEENS4_9allocatorIDsEEEEE4ReadES3_PSA_(%"class.mojo_base::mojom::internal::BigString16_Data"*, %"class.mojo::Message"*, %"class.std::__1::basic_string"* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.mojo_base::BigBuffer", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = bitcast %"class.mojo_base::BigBuffer"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %6) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 56, i1 false)
  call void @_ZN9mojo_base9BigBufferC1Ev(%"class.mojo_base::BigBuffer"* nonnull %4) #9
  %7 = getelementptr inbounds %"class.mojo_base::mojom::internal::BigString16_Data", %"class.mojo_base::mojom::internal::BigString16_Data"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.mojo_base::mojom::internal::BigBuffer_Data", %"class.mojo_base::mojom::internal::BigBuffer_Data"* %7, i64 0, i32 0
  %9 = load i32, i32* %8, align 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %3
  %12 = call zeroext i1 @_ZN4mojo11UnionTraitsIN9mojo_base5mojom17BigBufferDataViewENS1_9BigBufferEE4ReadES3_PS4_(%"class.mojo_base::mojom::internal::BigBuffer_Data"* nonnull %7, %"class.mojo::Message"* %1, %"class.mojo_base::BigBuffer"* nonnull %4) #9
  br i1 %12, label %13, label %203

13:                                               ; preds = %3, %11
  %14 = call i64 @_ZNK9mojo_base9BigBuffer4sizeEv(%"class.mojo_base::BigBuffer"* nonnull %4) #9
  %15 = and i64 %14, 1
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %17, label %203

17:                                               ; preds = %13
  %18 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #9
  %19 = call i8* @_ZN9mojo_base9BigBuffer4dataEv(%"class.mojo_base::BigBuffer"* nonnull %4) #9
  %20 = bitcast i8* %19 to i16*
  %21 = call i64 @_ZNK9mojo_base9BigBuffer4sizeEv(%"class.mojo_base::BigBuffer"* nonnull %4) #9
  %22 = lshr i64 %21, 1
  %23 = icmp ugt i64 %21, -33
  br i1 %23, label %24, label %26

24:                                               ; preds = %17
  %25 = bitcast %"class.std::__1::basic_string"* %5 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %25) #10
  unreachable

26:                                               ; preds = %17
  %27 = icmp ult i64 %21, 22
  br i1 %27, label %38, label %28

28:                                               ; preds = %26
  %29 = add nuw nsw i64 %22, 8
  %30 = and i64 %29, 9223372036854775800
  %31 = shl nuw i64 %30, 1
  %32 = call i8* @_Znwm(i64 %31) #11
  %33 = bitcast i8* %32 to i16*
  %34 = bitcast %"class.std::__1::basic_string"* %5 to i8**
  store i8* %32, i8** %34, align 8
  %35 = or i64 %30, -9223372036854775808
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %35, i64* %36, align 8
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %22, i64* %37, align 8
  br label %44

38:                                               ; preds = %26
  %39 = trunc i64 %22 to i8
  %40 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %41 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %40, i64 0, i32 1, i32 1
  store i8 %39, i8* %41, align 1
  %42 = bitcast %"class.std::__1::basic_string"* %5 to i16*
  %43 = icmp eq i64 %22, 0
  br i1 %43, label %191, label %44

44:                                               ; preds = %38, %28
  %45 = phi i16* [ %33, %28 ], [ %42, %38 ]
  %46 = icmp ult i64 %21, 32
  br i1 %46, label %138, label %47

47:                                               ; preds = %44
  %48 = bitcast i16* %45 to i8*
  %49 = getelementptr i16, i16* %45, i64 %22
  %50 = bitcast i16* %49 to i8*
  %51 = and i64 %21, -2
  %52 = getelementptr i8, i8* %19, i64 %51
  %53 = icmp ugt i8* %52, %48
  %54 = icmp ult i8* %19, %50
  %55 = and i1 %53, %54
  br i1 %55, label %138, label %56

56:                                               ; preds = %47
  %57 = and i64 %22, 9223372036854775792
  %58 = sub nsw i64 %22, %57
  %59 = getelementptr i16, i16* %20, i64 %57
  %60 = getelementptr i16, i16* %45, i64 %57
  %61 = add nsw i64 %57, -16
  %62 = lshr exact i64 %61, 4
  %63 = add nuw nsw i64 %62, 1
  %64 = and i64 %63, 3
  %65 = icmp ult i64 %61, 48
  br i1 %65, label %117, label %66

66:                                               ; preds = %56
  %67 = sub nsw i64 %63, %64
  br label %68

68:                                               ; preds = %68, %66
  %69 = phi i64 [ 0, %66 ], [ %114, %68 ]
  %70 = phi i64 [ %67, %66 ], [ %115, %68 ]
  %71 = getelementptr i16, i16* %20, i64 %69
  %72 = getelementptr i16, i16* %45, i64 %69
  %73 = bitcast i16* %71 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2, !alias.scope !38
  %75 = getelementptr i16, i16* %71, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  %77 = load <8 x i16>, <8 x i16>* %76, align 2, !alias.scope !38
  %78 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %78, align 2, !alias.scope !41, !noalias !38
  %79 = getelementptr i16, i16* %72, i64 8
  %80 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %77, <8 x i16>* %80, align 2, !alias.scope !41, !noalias !38
  %81 = or i64 %69, 16
  %82 = getelementptr i16, i16* %20, i64 %81
  %83 = getelementptr i16, i16* %45, i64 %81
  %84 = bitcast i16* %82 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2, !alias.scope !38
  %86 = getelementptr i16, i16* %82, i64 8
  %87 = bitcast i16* %86 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 2, !alias.scope !38
  %89 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %85, <8 x i16>* %89, align 2, !alias.scope !41, !noalias !38
  %90 = getelementptr i16, i16* %83, i64 8
  %91 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %91, align 2, !alias.scope !41, !noalias !38
  %92 = or i64 %69, 32
  %93 = getelementptr i16, i16* %20, i64 %92
  %94 = getelementptr i16, i16* %45, i64 %92
  %95 = bitcast i16* %93 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2, !alias.scope !38
  %97 = getelementptr i16, i16* %93, i64 8
  %98 = bitcast i16* %97 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 2, !alias.scope !38
  %100 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %100, align 2, !alias.scope !41, !noalias !38
  %101 = getelementptr i16, i16* %94, i64 8
  %102 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %102, align 2, !alias.scope !41, !noalias !38
  %103 = or i64 %69, 48
  %104 = getelementptr i16, i16* %20, i64 %103
  %105 = getelementptr i16, i16* %45, i64 %103
  %106 = bitcast i16* %104 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 2, !alias.scope !38
  %108 = getelementptr i16, i16* %104, i64 8
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2, !alias.scope !38
  %111 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %111, align 2, !alias.scope !41, !noalias !38
  %112 = getelementptr i16, i16* %105, i64 8
  %113 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %113, align 2, !alias.scope !41, !noalias !38
  %114 = add i64 %69, 64
  %115 = add i64 %70, -4
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %117, label %68, !llvm.loop !43

117:                                              ; preds = %68, %56
  %118 = phi i64 [ 0, %56 ], [ %114, %68 ]
  %119 = icmp eq i64 %64, 0
  br i1 %119, label %136, label %120

120:                                              ; preds = %117, %120
  %121 = phi i64 [ %133, %120 ], [ %118, %117 ]
  %122 = phi i64 [ %134, %120 ], [ %64, %117 ]
  %123 = getelementptr i16, i16* %20, i64 %121
  %124 = getelementptr i16, i16* %45, i64 %121
  %125 = bitcast i16* %123 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 2, !alias.scope !38
  %127 = getelementptr i16, i16* %123, i64 8
  %128 = bitcast i16* %127 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 2, !alias.scope !38
  %130 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %126, <8 x i16>* %130, align 2, !alias.scope !41, !noalias !38
  %131 = getelementptr i16, i16* %124, i64 8
  %132 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %129, <8 x i16>* %132, align 2, !alias.scope !41, !noalias !38
  %133 = add i64 %121, 16
  %134 = add i64 %122, -1
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %136, label %120, !llvm.loop !44

136:                                              ; preds = %120, %117
  %137 = icmp eq i64 %22, %57
  br i1 %137, label %191, label %138

138:                                              ; preds = %136, %47, %44
  %139 = phi i64 [ %22, %47 ], [ %22, %44 ], [ %58, %136 ]
  %140 = phi i16* [ %20, %47 ], [ %20, %44 ], [ %59, %136 ]
  %141 = phi i16* [ %45, %47 ], [ %45, %44 ], [ %60, %136 ]
  %142 = add nsw i64 %139, -1
  %143 = and i64 %139, 7
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %156, label %145

145:                                              ; preds = %138, %145
  %146 = phi i64 [ %151, %145 ], [ %139, %138 ]
  %147 = phi i16* [ %153, %145 ], [ %140, %138 ]
  %148 = phi i16* [ %152, %145 ], [ %141, %138 ]
  %149 = phi i64 [ %154, %145 ], [ %143, %138 ]
  %150 = load i16, i16* %147, align 2
  store i16 %150, i16* %148, align 2
  %151 = add i64 %146, -1
  %152 = getelementptr inbounds i16, i16* %148, i64 1
  %153 = getelementptr inbounds i16, i16* %147, i64 1
  %154 = add i64 %149, -1
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %145, !llvm.loop !45

156:                                              ; preds = %145, %138
  %157 = phi i64 [ %139, %138 ], [ %151, %145 ]
  %158 = phi i16* [ %140, %138 ], [ %153, %145 ]
  %159 = phi i16* [ %141, %138 ], [ %152, %145 ]
  %160 = icmp ult i64 %142, 7
  br i1 %160, label %191, label %161

161:                                              ; preds = %156, %161
  %162 = phi i64 [ %187, %161 ], [ %157, %156 ]
  %163 = phi i16* [ %189, %161 ], [ %158, %156 ]
  %164 = phi i16* [ %188, %161 ], [ %159, %156 ]
  %165 = load i16, i16* %163, align 2
  store i16 %165, i16* %164, align 2
  %166 = getelementptr inbounds i16, i16* %164, i64 1
  %167 = getelementptr inbounds i16, i16* %163, i64 1
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %166, align 2
  %169 = getelementptr inbounds i16, i16* %164, i64 2
  %170 = getelementptr inbounds i16, i16* %163, i64 2
  %171 = load i16, i16* %170, align 2
  store i16 %171, i16* %169, align 2
  %172 = getelementptr inbounds i16, i16* %164, i64 3
  %173 = getelementptr inbounds i16, i16* %163, i64 3
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %172, align 2
  %175 = getelementptr inbounds i16, i16* %164, i64 4
  %176 = getelementptr inbounds i16, i16* %163, i64 4
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %164, i64 5
  %179 = getelementptr inbounds i16, i16* %163, i64 5
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = getelementptr inbounds i16, i16* %164, i64 6
  %182 = getelementptr inbounds i16, i16* %163, i64 6
  %183 = load i16, i16* %182, align 2
  store i16 %183, i16* %181, align 2
  %184 = getelementptr inbounds i16, i16* %164, i64 7
  %185 = getelementptr inbounds i16, i16* %163, i64 7
  %186 = load i16, i16* %185, align 2
  store i16 %186, i16* %184, align 2
  %187 = add i64 %162, -8
  %188 = getelementptr inbounds i16, i16* %164, i64 8
  %189 = getelementptr inbounds i16, i16* %163, i64 8
  %190 = icmp eq i64 %187, 0
  br i1 %190, label %191, label %161, !llvm.loop !46

191:                                              ; preds = %156, %161, %136, %38
  %192 = phi i16* [ %42, %38 ], [ %45, %136 ], [ %45, %161 ], [ %45, %156 ]
  %193 = getelementptr inbounds i16, i16* %192, i64 %22
  store i16 0, i16* %193, align 2
  %194 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %195 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %194, i64 0, i32 1, i32 1
  %196 = load i8, i8* %195, align 1
  %197 = icmp slt i8 %196, 0
  br i1 %197, label %198, label %201

198:                                              ; preds = %191
  %199 = bitcast %"class.std::__1::basic_string"* %2 to i8**
  %200 = load i8*, i8** %199, align 8
  call void @_ZdlPv(i8* %200) #11
  br label %201

201:                                              ; preds = %198, %191
  %202 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %202, i8* nonnull align 8 %18, i64 24, i1 false) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #9
  br label %203

203:                                              ; preds = %13, %11, %201
  %204 = phi i1 [ true, %201 ], [ false, %11 ], [ false, %13 ]
  call void @_ZN9mojo_base9BigBufferD1Ev(%"class.mojo_base::BigBuffer"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %6) #9
  ret i1 %204
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN9mojo_base9BigBufferC1Ev(%"class.mojo_base::BigBuffer"*) unnamed_addr #2

declare i64 @_ZNK9mojo_base9BigBuffer4sizeEv(%"class.mojo_base::BigBuffer"*) local_unnamed_addr #2

declare i8* @_ZN9mojo_base9BigBuffer4dataEv(%"class.mojo_base::BigBuffer"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN9mojo_base9BigBufferD1Ev(%"class.mojo_base::BigBuffer"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i64(i64) #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string"*, i64, i64, i64, i64, i64, i64, i16*) local_unnamed_addr #0 comdat align 2 {
  %9 = sub i64 9223372036854775790, %1
  %10 = icmp ult i64 %9, %2
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %12) #10
  unreachable

13:                                               ; preds = %8
  %14 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %14, i64 0, i32 1, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i16*, i16** %19, align 8
  br label %23

21:                                               ; preds = %13
  %22 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  br label %23

23:                                               ; preds = %18, %21
  %24 = phi i16* [ %20, %18 ], [ %22, %21 ]
  %25 = bitcast i16* %24 to i8*
  %26 = icmp ult i64 %1, 4611686018427387879
  br i1 %26, label %27, label %38

27:                                               ; preds = %23
  %28 = add i64 %2, %1
  %29 = shl i64 %1, 1
  %30 = icmp ult i64 %28, %29
  %31 = select i1 %30, i64 %29, i64 %28
  %32 = icmp ult i64 %31, 11
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = add i64 %31, 8
  %35 = and i64 %34, -8
  %36 = icmp slt i64 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %33
  tail call void @abort() #10
  unreachable

38:                                               ; preds = %23, %27, %33
  %39 = phi i64 [ %35, %33 ], [ 9223372036854775791, %23 ], [ 11, %27 ]
  %40 = shl i64 %39, 1
  %41 = tail call i8* @_Znwm(i64 %40) #11
  %42 = bitcast i8* %41 to i16*
  %43 = icmp eq i64 %4, 0
  br i1 %43, label %189, label %44

44:                                               ; preds = %38
  %45 = icmp ult i64 %4, 16
  br i1 %45, label %136, label %46

46:                                               ; preds = %44
  %47 = shl i64 %4, 1
  %48 = getelementptr i8, i8* %41, i64 %47
  %49 = getelementptr i16, i16* %24, i64 %4
  %50 = bitcast i16* %49 to i8*
  %51 = icmp ult i8* %41, %50
  %52 = icmp ugt i8* %48, %25
  %53 = and i1 %51, %52
  br i1 %53, label %136, label %54

54:                                               ; preds = %46
  %55 = and i64 %4, -16
  %56 = sub i64 %4, %55
  %57 = getelementptr i16, i16* %24, i64 %55
  %58 = getelementptr i16, i16* %42, i64 %55
  %59 = add i64 %55, -16
  %60 = lshr exact i64 %59, 4
  %61 = add nuw nsw i64 %60, 1
  %62 = and i64 %61, 3
  %63 = icmp ult i64 %59, 48
  br i1 %63, label %115, label %64

64:                                               ; preds = %54
  %65 = sub nsw i64 %61, %62
  br label %66

66:                                               ; preds = %66, %64
  %67 = phi i64 [ 0, %64 ], [ %112, %66 ]
  %68 = phi i64 [ %65, %64 ], [ %113, %66 ]
  %69 = getelementptr i16, i16* %24, i64 %67
  %70 = getelementptr i16, i16* %42, i64 %67
  %71 = bitcast i16* %69 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !47
  %73 = getelementptr i16, i16* %69, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2, !alias.scope !47
  %76 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %76, align 2, !alias.scope !50, !noalias !47
  %77 = getelementptr i16, i16* %70, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %78, align 2, !alias.scope !50, !noalias !47
  %79 = or i64 %67, 16
  %80 = getelementptr i16, i16* %24, i64 %79
  %81 = getelementptr i16, i16* %42, i64 %79
  %82 = bitcast i16* %80 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !47
  %84 = getelementptr i16, i16* %80, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !47
  %87 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %87, align 2, !alias.scope !50, !noalias !47
  %88 = getelementptr i16, i16* %81, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %89, align 2, !alias.scope !50, !noalias !47
  %90 = or i64 %67, 32
  %91 = getelementptr i16, i16* %24, i64 %90
  %92 = getelementptr i16, i16* %42, i64 %90
  %93 = bitcast i16* %91 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !47
  %95 = getelementptr i16, i16* %91, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !47
  %98 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %98, align 2, !alias.scope !50, !noalias !47
  %99 = getelementptr i16, i16* %92, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %100, align 2, !alias.scope !50, !noalias !47
  %101 = or i64 %67, 48
  %102 = getelementptr i16, i16* %24, i64 %101
  %103 = getelementptr i16, i16* %42, i64 %101
  %104 = bitcast i16* %102 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !47
  %106 = getelementptr i16, i16* %102, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !47
  %109 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %109, align 2, !alias.scope !50, !noalias !47
  %110 = getelementptr i16, i16* %103, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %111, align 2, !alias.scope !50, !noalias !47
  %112 = add i64 %67, 64
  %113 = add i64 %68, -4
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %66, !llvm.loop !52

115:                                              ; preds = %66, %54
  %116 = phi i64 [ 0, %54 ], [ %112, %66 ]
  %117 = icmp eq i64 %62, 0
  br i1 %117, label %134, label %118

118:                                              ; preds = %115, %118
  %119 = phi i64 [ %131, %118 ], [ %116, %115 ]
  %120 = phi i64 [ %132, %118 ], [ %62, %115 ]
  %121 = getelementptr i16, i16* %24, i64 %119
  %122 = getelementptr i16, i16* %42, i64 %119
  %123 = bitcast i16* %121 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !47
  %125 = getelementptr i16, i16* %121, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !47
  %128 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %128, align 2, !alias.scope !50, !noalias !47
  %129 = getelementptr i16, i16* %122, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %130, align 2, !alias.scope !50, !noalias !47
  %131 = add i64 %119, 16
  %132 = add i64 %120, -1
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %118, !llvm.loop !53

134:                                              ; preds = %118, %115
  %135 = icmp eq i64 %55, %4
  br i1 %135, label %189, label %136

136:                                              ; preds = %134, %46, %44
  %137 = phi i64 [ %4, %46 ], [ %4, %44 ], [ %56, %134 ]
  %138 = phi i16* [ %24, %46 ], [ %24, %44 ], [ %57, %134 ]
  %139 = phi i16* [ %42, %46 ], [ %42, %44 ], [ %58, %134 ]
  %140 = add i64 %137, -1
  %141 = and i64 %137, 7
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %154, label %143

143:                                              ; preds = %136, %143
  %144 = phi i64 [ %149, %143 ], [ %137, %136 ]
  %145 = phi i16* [ %151, %143 ], [ %138, %136 ]
  %146 = phi i16* [ %150, %143 ], [ %139, %136 ]
  %147 = phi i64 [ %152, %143 ], [ %141, %136 ]
  %148 = load i16, i16* %145, align 2
  store i16 %148, i16* %146, align 2
  %149 = add i64 %144, -1
  %150 = getelementptr inbounds i16, i16* %146, i64 1
  %151 = getelementptr inbounds i16, i16* %145, i64 1
  %152 = add i64 %147, -1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %143, !llvm.loop !54

154:                                              ; preds = %143, %136
  %155 = phi i64 [ %137, %136 ], [ %149, %143 ]
  %156 = phi i16* [ %138, %136 ], [ %151, %143 ]
  %157 = phi i16* [ %139, %136 ], [ %150, %143 ]
  %158 = icmp ult i64 %140, 7
  br i1 %158, label %189, label %159

159:                                              ; preds = %154, %159
  %160 = phi i64 [ %185, %159 ], [ %155, %154 ]
  %161 = phi i16* [ %187, %159 ], [ %156, %154 ]
  %162 = phi i16* [ %186, %159 ], [ %157, %154 ]
  %163 = load i16, i16* %161, align 2
  store i16 %163, i16* %162, align 2
  %164 = getelementptr inbounds i16, i16* %162, i64 1
  %165 = getelementptr inbounds i16, i16* %161, i64 1
  %166 = load i16, i16* %165, align 2
  store i16 %166, i16* %164, align 2
  %167 = getelementptr inbounds i16, i16* %162, i64 2
  %168 = getelementptr inbounds i16, i16* %161, i64 2
  %169 = load i16, i16* %168, align 2
  store i16 %169, i16* %167, align 2
  %170 = getelementptr inbounds i16, i16* %162, i64 3
  %171 = getelementptr inbounds i16, i16* %161, i64 3
  %172 = load i16, i16* %171, align 2
  store i16 %172, i16* %170, align 2
  %173 = getelementptr inbounds i16, i16* %162, i64 4
  %174 = getelementptr inbounds i16, i16* %161, i64 4
  %175 = load i16, i16* %174, align 2
  store i16 %175, i16* %173, align 2
  %176 = getelementptr inbounds i16, i16* %162, i64 5
  %177 = getelementptr inbounds i16, i16* %161, i64 5
  %178 = load i16, i16* %177, align 2
  store i16 %178, i16* %176, align 2
  %179 = getelementptr inbounds i16, i16* %162, i64 6
  %180 = getelementptr inbounds i16, i16* %161, i64 6
  %181 = load i16, i16* %180, align 2
  store i16 %181, i16* %179, align 2
  %182 = getelementptr inbounds i16, i16* %162, i64 7
  %183 = getelementptr inbounds i16, i16* %161, i64 7
  %184 = load i16, i16* %183, align 2
  store i16 %184, i16* %182, align 2
  %185 = add i64 %160, -8
  %186 = getelementptr inbounds i16, i16* %162, i64 8
  %187 = getelementptr inbounds i16, i16* %161, i64 8
  %188 = icmp eq i64 %185, 0
  br i1 %188, label %189, label %159, !llvm.loop !55

189:                                              ; preds = %154, %159, %134, %38
  %190 = icmp eq i64 %6, 0
  br i1 %190, label %289, label %191

191:                                              ; preds = %189
  %192 = getelementptr inbounds i16, i16* %42, i64 %4
  %193 = icmp ult i64 %6, 16
  br i1 %193, label %276, label %194

194:                                              ; preds = %191
  %195 = and i64 %6, -16
  %196 = sub i64 %6, %195
  %197 = getelementptr i16, i16* %7, i64 %195
  %198 = getelementptr i16, i16* %192, i64 %195
  %199 = add i64 %195, -16
  %200 = lshr exact i64 %199, 4
  %201 = add nuw nsw i64 %200, 1
  %202 = and i64 %201, 3
  %203 = icmp ult i64 %199, 48
  br i1 %203, label %255, label %204

204:                                              ; preds = %194
  %205 = sub nsw i64 %201, %202
  br label %206

206:                                              ; preds = %206, %204
  %207 = phi i64 [ 0, %204 ], [ %252, %206 ]
  %208 = phi i64 [ %205, %204 ], [ %253, %206 ]
  %209 = getelementptr i16, i16* %7, i64 %207
  %210 = getelementptr i16, i16* %192, i64 %207
  %211 = bitcast i16* %209 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 2
  %213 = getelementptr i16, i16* %209, i64 8
  %214 = bitcast i16* %213 to <8 x i16>*
  %215 = load <8 x i16>, <8 x i16>* %214, align 2
  %216 = bitcast i16* %210 to <8 x i16>*
  store <8 x i16> %212, <8 x i16>* %216, align 2
  %217 = getelementptr i16, i16* %210, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %218, align 2
  %219 = or i64 %207, 16
  %220 = getelementptr i16, i16* %7, i64 %219
  %221 = getelementptr i16, i16* %192, i64 %219
  %222 = bitcast i16* %220 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 2
  %224 = getelementptr i16, i16* %220, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 2
  %227 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %223, <8 x i16>* %227, align 2
  %228 = getelementptr i16, i16* %221, i64 8
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %226, <8 x i16>* %229, align 2
  %230 = or i64 %207, 32
  %231 = getelementptr i16, i16* %7, i64 %230
  %232 = getelementptr i16, i16* %192, i64 %230
  %233 = bitcast i16* %231 to <8 x i16>*
  %234 = load <8 x i16>, <8 x i16>* %233, align 2
  %235 = getelementptr i16, i16* %231, i64 8
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 2
  %238 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> %234, <8 x i16>* %238, align 2
  %239 = getelementptr i16, i16* %232, i64 8
  %240 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %237, <8 x i16>* %240, align 2
  %241 = or i64 %207, 48
  %242 = getelementptr i16, i16* %7, i64 %241
  %243 = getelementptr i16, i16* %192, i64 %241
  %244 = bitcast i16* %242 to <8 x i16>*
  %245 = load <8 x i16>, <8 x i16>* %244, align 2
  %246 = getelementptr i16, i16* %242, i64 8
  %247 = bitcast i16* %246 to <8 x i16>*
  %248 = load <8 x i16>, <8 x i16>* %247, align 2
  %249 = bitcast i16* %243 to <8 x i16>*
  store <8 x i16> %245, <8 x i16>* %249, align 2
  %250 = getelementptr i16, i16* %243, i64 8
  %251 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %248, <8 x i16>* %251, align 2
  %252 = add i64 %207, 64
  %253 = add i64 %208, -4
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %255, label %206, !llvm.loop !56

255:                                              ; preds = %206, %194
  %256 = phi i64 [ 0, %194 ], [ %252, %206 ]
  %257 = icmp eq i64 %202, 0
  br i1 %257, label %274, label %258

258:                                              ; preds = %255, %258
  %259 = phi i64 [ %271, %258 ], [ %256, %255 ]
  %260 = phi i64 [ %272, %258 ], [ %202, %255 ]
  %261 = getelementptr i16, i16* %7, i64 %259
  %262 = getelementptr i16, i16* %192, i64 %259
  %263 = bitcast i16* %261 to <8 x i16>*
  %264 = load <8 x i16>, <8 x i16>* %263, align 2
  %265 = getelementptr i16, i16* %261, i64 8
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2
  %268 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %264, <8 x i16>* %268, align 2
  %269 = getelementptr i16, i16* %262, i64 8
  %270 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %270, align 2
  %271 = add i64 %259, 16
  %272 = add i64 %260, -1
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %258, !llvm.loop !57

274:                                              ; preds = %258, %255
  %275 = icmp eq i64 %195, %6
  br i1 %275, label %289, label %276

276:                                              ; preds = %274, %191
  %277 = phi i64 [ %6, %191 ], [ %196, %274 ]
  %278 = phi i16* [ %7, %191 ], [ %197, %274 ]
  %279 = phi i16* [ %192, %191 ], [ %198, %274 ]
  br label %280

280:                                              ; preds = %276, %280
  %281 = phi i64 [ %285, %280 ], [ %277, %276 ]
  %282 = phi i16* [ %287, %280 ], [ %278, %276 ]
  %283 = phi i16* [ %286, %280 ], [ %279, %276 ]
  %284 = load i16, i16* %282, align 2
  store i16 %284, i16* %283, align 2
  %285 = add i64 %281, -1
  %286 = getelementptr inbounds i16, i16* %283, i64 1
  %287 = getelementptr inbounds i16, i16* %282, i64 1
  %288 = icmp eq i64 %285, 0
  br i1 %288, label %289, label %280, !llvm.loop !58

289:                                              ; preds = %280, %274, %189
  %290 = sub i64 %3, %5
  %291 = sub i64 %290, %4
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %448, label %293

293:                                              ; preds = %289
  %294 = getelementptr inbounds i16, i16* %42, i64 %4
  %295 = getelementptr inbounds i16, i16* %294, i64 %6
  %296 = getelementptr inbounds i16, i16* %24, i64 %4
  %297 = getelementptr inbounds i16, i16* %296, i64 %5
  %298 = icmp ult i64 %291, 16
  br i1 %298, label %395, label %299

299:                                              ; preds = %293
  %300 = bitcast i16* %297 to i8*
  %301 = add i64 %6, %4
  %302 = shl i64 %301, 1
  %303 = getelementptr i8, i8* %41, i64 %302
  %304 = add i64 %6, %3
  %305 = sub i64 %304, %5
  %306 = shl i64 %305, 1
  %307 = getelementptr i8, i8* %41, i64 %306
  %308 = getelementptr i16, i16* %24, i64 %3
  %309 = bitcast i16* %308 to i8*
  %310 = icmp ult i8* %303, %309
  %311 = icmp ugt i8* %307, %300
  %312 = and i1 %310, %311
  br i1 %312, label %395, label %313

313:                                              ; preds = %299
  %314 = and i64 %291, -16
  %315 = sub i64 %291, %314
  %316 = getelementptr i16, i16* %297, i64 %314
  %317 = getelementptr i16, i16* %295, i64 %314
  %318 = add i64 %314, -16
  %319 = lshr exact i64 %318, 4
  %320 = add nuw nsw i64 %319, 1
  %321 = and i64 %320, 3
  %322 = icmp ult i64 %318, 48
  br i1 %322, label %374, label %323

323:                                              ; preds = %313
  %324 = sub nsw i64 %320, %321
  br label %325

325:                                              ; preds = %325, %323
  %326 = phi i64 [ 0, %323 ], [ %371, %325 ]
  %327 = phi i64 [ %324, %323 ], [ %372, %325 ]
  %328 = getelementptr i16, i16* %297, i64 %326
  %329 = getelementptr i16, i16* %295, i64 %326
  %330 = bitcast i16* %328 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 2, !alias.scope !60
  %332 = getelementptr i16, i16* %328, i64 8
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 2, !alias.scope !60
  %335 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %335, align 2, !alias.scope !63, !noalias !60
  %336 = getelementptr i16, i16* %329, i64 8
  %337 = bitcast i16* %336 to <8 x i16>*
  store <8 x i16> %334, <8 x i16>* %337, align 2, !alias.scope !63, !noalias !60
  %338 = or i64 %326, 16
  %339 = getelementptr i16, i16* %297, i64 %338
  %340 = getelementptr i16, i16* %295, i64 %338
  %341 = bitcast i16* %339 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2, !alias.scope !60
  %343 = getelementptr i16, i16* %339, i64 8
  %344 = bitcast i16* %343 to <8 x i16>*
  %345 = load <8 x i16>, <8 x i16>* %344, align 2, !alias.scope !60
  %346 = bitcast i16* %340 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %346, align 2, !alias.scope !63, !noalias !60
  %347 = getelementptr i16, i16* %340, i64 8
  %348 = bitcast i16* %347 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %348, align 2, !alias.scope !63, !noalias !60
  %349 = or i64 %326, 32
  %350 = getelementptr i16, i16* %297, i64 %349
  %351 = getelementptr i16, i16* %295, i64 %349
  %352 = bitcast i16* %350 to <8 x i16>*
  %353 = load <8 x i16>, <8 x i16>* %352, align 2, !alias.scope !60
  %354 = getelementptr i16, i16* %350, i64 8
  %355 = bitcast i16* %354 to <8 x i16>*
  %356 = load <8 x i16>, <8 x i16>* %355, align 2, !alias.scope !60
  %357 = bitcast i16* %351 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %357, align 2, !alias.scope !63, !noalias !60
  %358 = getelementptr i16, i16* %351, i64 8
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %356, <8 x i16>* %359, align 2, !alias.scope !63, !noalias !60
  %360 = or i64 %326, 48
  %361 = getelementptr i16, i16* %297, i64 %360
  %362 = getelementptr i16, i16* %295, i64 %360
  %363 = bitcast i16* %361 to <8 x i16>*
  %364 = load <8 x i16>, <8 x i16>* %363, align 2, !alias.scope !60
  %365 = getelementptr i16, i16* %361, i64 8
  %366 = bitcast i16* %365 to <8 x i16>*
  %367 = load <8 x i16>, <8 x i16>* %366, align 2, !alias.scope !60
  %368 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %368, align 2, !alias.scope !63, !noalias !60
  %369 = getelementptr i16, i16* %362, i64 8
  %370 = bitcast i16* %369 to <8 x i16>*
  store <8 x i16> %367, <8 x i16>* %370, align 2, !alias.scope !63, !noalias !60
  %371 = add i64 %326, 64
  %372 = add i64 %327, -4
  %373 = icmp eq i64 %372, 0
  br i1 %373, label %374, label %325, !llvm.loop !65

374:                                              ; preds = %325, %313
  %375 = phi i64 [ 0, %313 ], [ %371, %325 ]
  %376 = icmp eq i64 %321, 0
  br i1 %376, label %393, label %377

377:                                              ; preds = %374, %377
  %378 = phi i64 [ %390, %377 ], [ %375, %374 ]
  %379 = phi i64 [ %391, %377 ], [ %321, %374 ]
  %380 = getelementptr i16, i16* %297, i64 %378
  %381 = getelementptr i16, i16* %295, i64 %378
  %382 = bitcast i16* %380 to <8 x i16>*
  %383 = load <8 x i16>, <8 x i16>* %382, align 2, !alias.scope !60
  %384 = getelementptr i16, i16* %380, i64 8
  %385 = bitcast i16* %384 to <8 x i16>*
  %386 = load <8 x i16>, <8 x i16>* %385, align 2, !alias.scope !60
  %387 = bitcast i16* %381 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %387, align 2, !alias.scope !63, !noalias !60
  %388 = getelementptr i16, i16* %381, i64 8
  %389 = bitcast i16* %388 to <8 x i16>*
  store <8 x i16> %386, <8 x i16>* %389, align 2, !alias.scope !63, !noalias !60
  %390 = add i64 %378, 16
  %391 = add i64 %379, -1
  %392 = icmp eq i64 %391, 0
  br i1 %392, label %393, label %377, !llvm.loop !66

393:                                              ; preds = %377, %374
  %394 = icmp eq i64 %291, %314
  br i1 %394, label %448, label %395

395:                                              ; preds = %393, %299, %293
  %396 = phi i64 [ %291, %299 ], [ %291, %293 ], [ %315, %393 ]
  %397 = phi i16* [ %297, %299 ], [ %297, %293 ], [ %316, %393 ]
  %398 = phi i16* [ %295, %299 ], [ %295, %293 ], [ %317, %393 ]
  %399 = add i64 %396, -1
  %400 = and i64 %396, 7
  %401 = icmp eq i64 %400, 0
  br i1 %401, label %413, label %402

402:                                              ; preds = %395, %402
  %403 = phi i64 [ %408, %402 ], [ %396, %395 ]
  %404 = phi i16* [ %410, %402 ], [ %397, %395 ]
  %405 = phi i16* [ %409, %402 ], [ %398, %395 ]
  %406 = phi i64 [ %411, %402 ], [ %400, %395 ]
  %407 = load i16, i16* %404, align 2
  store i16 %407, i16* %405, align 2
  %408 = add i64 %403, -1
  %409 = getelementptr inbounds i16, i16* %405, i64 1
  %410 = getelementptr inbounds i16, i16* %404, i64 1
  %411 = add i64 %406, -1
  %412 = icmp eq i64 %411, 0
  br i1 %412, label %413, label %402, !llvm.loop !67

413:                                              ; preds = %402, %395
  %414 = phi i64 [ %396, %395 ], [ %408, %402 ]
  %415 = phi i16* [ %397, %395 ], [ %410, %402 ]
  %416 = phi i16* [ %398, %395 ], [ %409, %402 ]
  %417 = icmp ult i64 %399, 7
  br i1 %417, label %448, label %418

418:                                              ; preds = %413, %418
  %419 = phi i64 [ %444, %418 ], [ %414, %413 ]
  %420 = phi i16* [ %446, %418 ], [ %415, %413 ]
  %421 = phi i16* [ %445, %418 ], [ %416, %413 ]
  %422 = load i16, i16* %420, align 2
  store i16 %422, i16* %421, align 2
  %423 = getelementptr inbounds i16, i16* %421, i64 1
  %424 = getelementptr inbounds i16, i16* %420, i64 1
  %425 = load i16, i16* %424, align 2
  store i16 %425, i16* %423, align 2
  %426 = getelementptr inbounds i16, i16* %421, i64 2
  %427 = getelementptr inbounds i16, i16* %420, i64 2
  %428 = load i16, i16* %427, align 2
  store i16 %428, i16* %426, align 2
  %429 = getelementptr inbounds i16, i16* %421, i64 3
  %430 = getelementptr inbounds i16, i16* %420, i64 3
  %431 = load i16, i16* %430, align 2
  store i16 %431, i16* %429, align 2
  %432 = getelementptr inbounds i16, i16* %421, i64 4
  %433 = getelementptr inbounds i16, i16* %420, i64 4
  %434 = load i16, i16* %433, align 2
  store i16 %434, i16* %432, align 2
  %435 = getelementptr inbounds i16, i16* %421, i64 5
  %436 = getelementptr inbounds i16, i16* %420, i64 5
  %437 = load i16, i16* %436, align 2
  store i16 %437, i16* %435, align 2
  %438 = getelementptr inbounds i16, i16* %421, i64 6
  %439 = getelementptr inbounds i16, i16* %420, i64 6
  %440 = load i16, i16* %439, align 2
  store i16 %440, i16* %438, align 2
  %441 = getelementptr inbounds i16, i16* %421, i64 7
  %442 = getelementptr inbounds i16, i16* %420, i64 7
  %443 = load i16, i16* %442, align 2
  store i16 %443, i16* %441, align 2
  %444 = add i64 %419, -8
  %445 = getelementptr inbounds i16, i16* %421, i64 8
  %446 = getelementptr inbounds i16, i16* %420, i64 8
  %447 = icmp eq i64 %444, 0
  br i1 %447, label %448, label %418, !llvm.loop !68

448:                                              ; preds = %413, %418, %393, %289
  %449 = icmp eq i64 %1, 10
  br i1 %449, label %451, label %450

450:                                              ; preds = %448
  tail call void @_ZdlPv(i8* %25) #11
  br label %451

451:                                              ; preds = %448, %450
  %452 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %41, i8** %452, align 8
  %453 = or i64 %39, -9223372036854775808
  %454 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %453, i64* %454, align 8
  %455 = add i64 %290, %6
  %456 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %455, i64* %456, align 8
  %457 = getelementptr inbounds i16, i16* %42, i64 %455
  store i16 0, i16* %457, align 2
  ret void
}

declare zeroext i1 @_ZN4mojo11UnionTraitsIN9mojo_base5mojom17BigBufferDataViewENS1_9BigBufferEE4ReadES3_PS4_(%"class.mojo_base::mojom::internal::BigBuffer_Data"*, %"class.mojo::Message"*, %"class.mojo_base::BigBuffer"*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !8}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !8}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !8}
!27 = distinct !{!27, !10}
!28 = distinct !{!28, !10}
!29 = distinct !{!29, !8}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = distinct !{!35, !8}
!36 = distinct !{!36, !10}
!37 = distinct !{!37, !8}
!38 = !{!39}
!39 = distinct !{!39, !40}
!40 = distinct !{!40, !"LVerDomain"}
!41 = !{!42}
!42 = distinct !{!42, !40}
!43 = distinct !{!43, !8}
!44 = distinct !{!44, !10}
!45 = distinct !{!45, !10}
!46 = distinct !{!46, !8}
!47 = !{!48}
!48 = distinct !{!48, !49}
!49 = distinct !{!49, !"LVerDomain"}
!50 = !{!51}
!51 = distinct !{!51, !49}
!52 = distinct !{!52, !8}
!53 = distinct !{!53, !10}
!54 = distinct !{!54, !10}
!55 = distinct !{!55, !8}
!56 = distinct !{!56, !8}
!57 = distinct !{!57, !10}
!58 = distinct !{!58, !59, !8}
!59 = !{!"llvm.loop.unroll.runtime.disable"}
!60 = !{!61}
!61 = distinct !{!61, !62}
!62 = distinct !{!62, !"LVerDomain"}
!63 = !{!64}
!64 = distinct !{!64, !62}
!65 = distinct !{!65, !8}
!66 = distinct !{!66, !10}
!67 = distinct !{!67, !10}
!68 = distinct !{!68, !8}
