; ModuleID = '../../third_party/libwebp/src/enc/iterator_enc.c'
source_filename = "../../third_party/libwebp/src/enc/iterator_enc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP8EncIterator = type { i32, i32, i8*, i8*, i8*, i8*, %struct.VP8Encoder*, %struct.VP8MBInfo*, %struct.VP8BitWriter*, i8*, i32*, [37 x i8], i8*, i32, [9 x i32], [9 x i32], [4 x [3 x i64]], i64, i64, [4 x [64 x double]]*, i32, i32, i32, i32, [2 x [2 x i8]], [2 x [2 x i8]]*, i8*, i8*, i8*, i8*, i8*, [88 x i8], [3359 x i8] }
%struct.VP8Encoder = type { %struct.WebPConfig*, %struct.WebPPicture*, %struct.VP8EncFilterHeader, %struct.VP8EncSegmentHeader, i32, i32, i32, i32, i32, %struct.VP8BitWriter, [8 x %struct.VP8BitWriter], %struct.VP8TBuffer, i32, i32, i8*, i32, %struct.WebPWorker, [4 x %struct.VP8SegmentInfo], i32, i32, i32, i32, i32, i32, i32, i32, %struct.VP8EncProba, [4 x i64], i64, i32, [3 x [4 x i32]], [3 x i32], i32, i32, i32, i32, i32, i32, i32, %struct.VP8MBInfo*, i8*, i32*, i8*, i8*, [4 x [64 x double]]*, [2 x [2 x i8]]* }
%struct.WebPConfig = type { i32, float, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.WebPPicture = type { i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i8*, i32, [2 x i32], i32*, i32, [3 x i32], i32 (i8*, i64, %struct.WebPPicture*)*, i8*, i32, i8*, %struct.WebPAuxStats*, i32, i32 (i32, %struct.WebPPicture*)*, i8*, [3 x i32], i8*, i8*, [8 x i32], i8*, i8*, [2 x i8*] }
%struct.WebPAuxStats = type { i32, [5 x float], [3 x i32], [2 x i32], [3 x [4 x i32]], [4 x i32], [4 x i32], [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32] }
%struct.VP8EncFilterHeader = type { i32, i32, i32, i32 }
%struct.VP8EncSegmentHeader = type { i32, i32, i32 }
%struct.VP8BitWriter = type { i32, i32, i32, i32, i8*, i64, i64, i32 }
%struct.VP8TBuffer = type { %struct.VP8Tokens*, %struct.VP8Tokens**, i16*, i32, i32, i32 }
%struct.VP8Tokens = type opaque
%struct.WebPWorker = type { i8*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VP8SegmentInfo = type { %struct.VP8Matrix, %struct.VP8Matrix, %struct.VP8Matrix, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 }
%struct.VP8Matrix = type { [16 x i16], [16 x i16], [16 x i32], [16 x i32], [16 x i16] }
%struct.VP8EncProba = type { [3 x i8], i8, [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i32]]]], [4 x [8 x [3 x [68 x i16]]]], [4 x [16 x [3 x i16*]]], i32, i32, i32 }
%struct.VP8MBInfo = type { i8, i8, [2 x i8] }

@VP8TopLeftI4 = internal unnamed_addr constant [16 x i8] c"\11\15\19\1D\0D\11\15\19\09\0D\11\15\05\09\0D\11", align 16
@VP8Scan = external local_unnamed_addr constant [16 x i16], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8IteratorSetRow(%struct.VP8EncIterator* nocapture, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 6
  %4 = load %struct.VP8Encoder*, %struct.VP8Encoder** %3, align 8
  %5 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 0
  store i32 0, i32* %5, align 8
  %6 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 1
  store i32 %1, i32* %6, align 4
  %7 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %4, i64 0, i32 8
  %8 = load i32, i32* %7, align 4
  %9 = add nsw i32 %8, -1
  %10 = and i32 %9, %1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %4, i64 0, i32 10, i64 %11
  %13 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 8
  store %struct.VP8BitWriter* %12, %struct.VP8BitWriter** %13, align 8
  %14 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %4, i64 0, i32 40
  %15 = load i8*, i8** %14, align 8
  %16 = shl i32 %1, 2
  %17 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %4, i64 0, i32 7
  %18 = load i32, i32* %17, align 8
  %19 = mul nsw i32 %16, %18
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %15, i64 %20
  %22 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 9
  store i8* %21, i8** %22, align 8
  %23 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %4, i64 0, i32 41
  %24 = bitcast i32** %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 10
  %27 = bitcast i32** %26 to i64*
  store i64 %25, i64* %27, align 8
  %28 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %4, i64 0, i32 39
  %29 = load %struct.VP8MBInfo*, %struct.VP8MBInfo** %28, align 8
  %30 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %4, i64 0, i32 5
  %31 = load i32, i32* %30, align 8
  %32 = mul nsw i32 %31, %1
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %29, i64 %33
  %35 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 7
  store %struct.VP8MBInfo* %34, %struct.VP8MBInfo** %35, align 8
  %36 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %4, i64 0, i32 42
  %37 = bitcast i8** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 29
  %40 = bitcast i8** %39 to i64*
  store i64 %38, i64* %40, align 8
  %41 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %4, i64 0, i32 43
  %42 = bitcast i8** %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 30
  %45 = bitcast i8** %44 to i64*
  store i64 %43, i64* %45, align 8
  %46 = icmp sgt i32 %1, 0
  %47 = select i1 %46, i8 -127, i8 127
  %48 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 28
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds i8, i8* %49, i64 -1
  store i8 %47, i8* %50, align 1
  %51 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 27
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds i8, i8* %52, i64 -1
  store i8 %47, i8* %53, align 1
  %54 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 26
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds i8, i8* %55, i64 -1
  store i8 %47, i8* %56, align 1
  %57 = load i8*, i8** %54, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %57, i8 -127, i64 16, i1 false) #6
  %58 = bitcast i8** %51 to i64**
  %59 = load i64*, i64** %58, align 8
  store i64 -9114861777597660799, i64* %59, align 1
  %60 = bitcast i8** %48 to i64**
  %61 = load i64*, i64** %60, align 8
  store i64 -9114861777597660799, i64* %61, align 1
  %62 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 15, i64 8
  store i32 0, i32* %62, align 8
  %63 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 25
  %64 = load [2 x [2 x i8]]*, [2 x [2 x i8]]** %63, align 8
  %65 = icmp eq [2 x [2 x i8]]* %64, null
  br i1 %65, label %69, label %66

66:                                               ; preds = %2
  %67 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 24, i64 0, i64 0
  %68 = bitcast i8* %67 to i32*
  store i32 0, i32* %68, align 8
  br label %69

69:                                               ; preds = %2, %66
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8IteratorReset(%struct.VP8EncIterator*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 6
  %3 = load %struct.VP8Encoder*, %struct.VP8Encoder** %2, align 8
  %4 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 0
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 1
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %3, i64 0, i32 10, i64 0
  %7 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 8
  store %struct.VP8BitWriter* %6, %struct.VP8BitWriter** %7, align 8
  %8 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %3, i64 0, i32 40
  %9 = bitcast i8** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 9
  %12 = bitcast i8** %11 to i64*
  store i64 %10, i64* %12, align 8
  %13 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %3, i64 0, i32 41
  %14 = bitcast i32** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 10
  %17 = bitcast i32** %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %3, i64 0, i32 39
  %19 = bitcast %struct.VP8MBInfo** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %3, i64 0, i32 5
  %22 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 7
  %23 = bitcast %struct.VP8MBInfo** %22 to i64*
  store i64 %20, i64* %23, align 8
  %24 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %3, i64 0, i32 42
  %25 = bitcast i8** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 29
  %28 = bitcast i8** %27 to i64*
  store i64 %26, i64* %28, align 8
  %29 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %3, i64 0, i32 43
  %30 = bitcast i8** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 30
  %33 = bitcast i8** %32 to i64*
  store i64 %31, i64* %33, align 8
  %34 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 28
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 -1
  store i8 127, i8* %36, align 1
  %37 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 27
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 -1
  store i8 127, i8* %39, align 1
  %40 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 26
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 -1
  store i8 127, i8* %42, align 1
  %43 = load i8*, i8** %40, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %43, i8 -127, i64 16, i1 false) #6
  %44 = bitcast i8** %37 to i64**
  %45 = load i64*, i64** %44, align 8
  store i64 -9114861777597660799, i64* %45, align 1
  %46 = bitcast i8** %34 to i64**
  %47 = load i64*, i64** %46, align 8
  store i64 -9114861777597660799, i64* %47, align 1
  %48 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 15, i64 8
  store i32 0, i32* %48, align 8
  %49 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 25
  %50 = load [2 x [2 x i8]]*, [2 x [2 x i8]]** %49, align 8
  %51 = icmp eq [2 x [2 x i8]]* %50, null
  br i1 %51, label %55, label %52

52:                                               ; preds = %1
  %53 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 24, i64 0, i64 0
  %54 = bitcast i8* %53 to i32*
  store i32 0, i32* %54, align 8
  br label %55

55:                                               ; preds = %1, %52
  %56 = load i32, i32* %21, align 8
  %57 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %3, i64 0, i32 6
  %58 = load i32, i32* %57, align 4
  %59 = mul nsw i32 %58, %56
  %60 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 22
  store i32 %59, i32* %60, align 8
  %61 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 21
  store i32 %59, i32* %61, align 4
  %62 = load %struct.VP8Encoder*, %struct.VP8Encoder** %2, align 8
  %63 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %62, i64 0, i32 5
  %64 = load i32, i32* %63, align 8
  %65 = shl nsw i32 %64, 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %62, i64 0, i32 42
  %68 = load i8*, i8** %67, align 8
  %69 = shl nsw i64 %66, 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %68, i8 127, i64 %69, i1 false) #6
  %70 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %62, i64 0, i32 41
  %71 = bitcast i32** %70 to i8**
  %72 = load i8*, i8** %71, align 8
  %73 = load i32, i32* %63, align 8
  %74 = sext i32 %73 to i64
  %75 = shl nsw i64 %74, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %72, i8 0, i64 %75, i1 false) #6
  %76 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %62, i64 0, i32 45
  %77 = load [2 x [2 x i8]]*, [2 x [2 x i8]]** %76, align 8
  %78 = icmp eq [2 x [2 x i8]]* %77, null
  br i1 %78, label %84, label %79

79:                                               ; preds = %55
  %80 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %77, i64 0, i64 0, i64 0
  %81 = load i32, i32* %63, align 8
  %82 = sext i32 %81 to i64
  %83 = shl nsw i64 %82, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %80, i8 0, i64 %83, i1 false) #6
  br label %84

84:                                               ; preds = %55, %79
  %85 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 16, i64 0
  %86 = bitcast [3 x i64]* %85 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %86, i8 0, i64 96, i1 false)
  %87 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 20
  store i32 0, i32* %87, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @VP8IteratorSetCountDown(%struct.VP8EncIterator* nocapture, i32) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 22
  store i32 %1, i32* %3, align 8
  %4 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 21
  store i32 %1, i32* %4, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @VP8IteratorIsDone(%struct.VP8EncIterator* nocapture readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 21
  %3 = load i32, i32* %2, align 4
  %4 = icmp slt i32 %3, 1
  %5 = zext i1 %4 to i32
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8IteratorInit(%struct.VP8Encoder*, %struct.VP8EncIterator*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %1, i64 0, i32 6
  store %struct.VP8Encoder* %0, %struct.VP8Encoder** %3, align 8
  %4 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %1, i64 0, i32 32, i64 0
  %5 = ptrtoint i8* %4 to i64
  %6 = add i64 %5, 31
  %7 = and i64 %6, -32
  %8 = inttoptr i64 %7 to i8*
  %9 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %1, i64 0, i32 2
  store i8* %8, i8** %9, align 8
  %10 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %1, i64 0, i32 3
  %11 = insertelement <2 x i8*> undef, i8* %8, i32 0
  %12 = shufflevector <2 x i8*> %11, <2 x i8*> undef, <2 x i32> zeroinitializer
  %13 = getelementptr i8, <2 x i8*> %12, <2 x i64> <i64 512, i64 1024>
  %14 = bitcast i8** %10 to <2 x i8*>*
  store <2 x i8*> %13, <2 x i8*>* %14, align 8
  %15 = getelementptr inbounds i8, i8* %8, i64 1536
  %16 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %1, i64 0, i32 5
  store i8* %15, i8** %16, align 8
  %17 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 44
  %18 = bitcast [4 x [64 x double]]** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %1, i64 0, i32 19
  %21 = bitcast [4 x [64 x double]]** %20 to i64*
  store i64 %19, i64* %21, align 8
  %22 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 12
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %1, i64 0, i32 23
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %1, i64 0, i32 31, i64 1
  %26 = ptrtoint i8* %25 to i64
  %27 = add i64 %26, 31
  %28 = and i64 %27, -32
  %29 = inttoptr i64 %28 to i8*
  %30 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %1, i64 0, i32 26
  store i8* %29, i8** %30, align 8
  %31 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %1, i64 0, i32 27
  %32 = insertelement <2 x i8*> undef, i8* %29, i32 0
  %33 = shufflevector <2 x i8*> %32, <2 x i8*> undef, <2 x i32> zeroinitializer
  %34 = getelementptr i8, <2 x i8*> %33, <2 x i64> <i64 32, i64 48>
  %35 = bitcast i8** %31 to <2 x i8*>*
  store <2 x i8*> %34, <2 x i8*>* %35, align 8
  %36 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 45
  %37 = bitcast [2 x [2 x i8]]** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %1, i64 0, i32 25
  %40 = bitcast [2 x [2 x i8]]** %39 to i64*
  store i64 %38, i64* %40, align 8
  tail call void @VP8IteratorReset(%struct.VP8EncIterator* %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8IteratorProgress(%struct.VP8EncIterator* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 6
  %4 = load %struct.VP8Encoder*, %struct.VP8Encoder** %3, align 8
  %5 = icmp eq i32 %1, 0
  br i1 %5, label %29, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %4, i64 0, i32 1
  %8 = load %struct.WebPPicture*, %struct.WebPPicture** %7, align 8
  %9 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %8, i64 0, i32 21
  %10 = load i32 (i32, %struct.WebPPicture*)*, i32 (i32, %struct.WebPPicture*)** %9, align 8
  %11 = icmp eq i32 (i32, %struct.WebPPicture*)* %10, null
  br i1 %11, label %29, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 22
  %14 = load i32, i32* %13, align 8
  %15 = icmp slt i32 %14, 1
  %16 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 23
  %17 = load i32, i32* %16, align 4
  br i1 %15, label %25, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 21
  %20 = load i32, i32* %19, align 4
  %21 = sub nsw i32 %14, %20
  %22 = mul nsw i32 %21, %1
  %23 = sdiv i32 %22, %14
  %24 = add nsw i32 %23, %17
  br label %25

25:                                               ; preds = %12, %18
  %26 = phi i32 [ %24, %18 ], [ %17, %12 ]
  %27 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %4, i64 0, i32 12
  %28 = tail call i32 @WebPReportProgress(%struct.WebPPicture* %8, i32 %26, i32* %27) #6
  br label %29

29:                                               ; preds = %2, %6, %25
  %30 = phi i32 [ %28, %25 ], [ 1, %6 ], [ 1, %2 ]
  ret i32 %30
}

declare i32 @WebPReportProgress(%struct.WebPPicture*, i32, i32*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8IteratorImport(%struct.VP8EncIterator*, i8*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 6
  %4 = load %struct.VP8Encoder*, %struct.VP8Encoder** %3, align 8
  %5 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %4, i64 0, i32 1
  %10 = load %struct.WebPPicture*, %struct.WebPPicture** %9, align 8
  %11 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %10, i64 0, i32 4
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %10, i64 0, i32 7
  %14 = load i32, i32* %13, align 8
  %15 = mul nsw i32 %14, %8
  %16 = add nsw i32 %15, %6
  %17 = shl nsw i32 %16, 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %12, i64 %18
  %20 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %10, i64 0, i32 5
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %10, i64 0, i32 8
  %23 = load i32, i32* %22, align 4
  %24 = mul nsw i32 %23, %8
  %25 = add nsw i32 %24, %6
  %26 = shl nsw i32 %25, 3
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %21, i64 %27
  %29 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %10, i64 0, i32 6
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 %27
  %32 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %10, i64 0, i32 2
  %33 = load i32, i32* %32, align 8
  %34 = shl nsw i32 %6, 4
  %35 = sub nsw i32 %33, %34
  %36 = icmp slt i32 %35, 16
  %37 = select i1 %36, i32 %35, i32 16
  %38 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %10, i64 0, i32 3
  %39 = load i32, i32* %38, align 4
  %40 = shl nsw i32 %8, 4
  %41 = sub nsw i32 %39, %40
  %42 = icmp slt i32 %41, 16
  %43 = select i1 %42, i32 %41, i32 16
  %44 = add nsw i32 %37, 1
  %45 = ashr i32 %44, 1
  %46 = add nsw i32 %43, 1
  %47 = ashr i32 %46, 1
  %48 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 2
  %49 = load i8*, i8** %48, align 8
  %50 = icmp sgt i32 %41, 0
  br i1 %50, label %51, label %74

51:                                               ; preds = %2
  %52 = sext i32 %37 to i64
  %53 = add nsw i32 %37, -1
  %54 = sext i32 %53 to i64
  %55 = sub nsw i32 16, %37
  %56 = sext i32 %55 to i64
  %57 = sext i32 %14 to i64
  %58 = and i32 %43, 1
  %59 = icmp eq i32 %43, 1
  br i1 %59, label %62, label %60

60:                                               ; preds = %51
  %61 = sub i32 %43, %58
  br label %96

62:                                               ; preds = %1177, %51
  %63 = phi i8* [ undef, %51 ], [ %1178, %1177 ]
  %64 = phi i8* [ %19, %51 ], [ %1179, %1177 ]
  %65 = phi i8* [ %49, %51 ], [ %1178, %1177 ]
  %66 = icmp eq i32 %58, 0
  br i1 %66, label %74, label %67

67:                                               ; preds = %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %65, i8* align 1 %64, i64 %52, i1 false) #6
  br i1 %36, label %68, label %72

68:                                               ; preds = %67
  %69 = getelementptr inbounds i8, i8* %65, i64 %52
  %70 = getelementptr inbounds i8, i8* %65, i64 %54
  %71 = load i8, i8* %70, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %69, i8 %71, i64 %56, i1 false) #6
  br label %72

72:                                               ; preds = %67, %68
  %73 = getelementptr inbounds i8, i8* %65, i64 32
  br label %74

74:                                               ; preds = %72, %62, %2
  %75 = phi i8* [ %49, %2 ], [ %63, %62 ], [ %73, %72 ]
  br i1 %42, label %76, label %119

76:                                               ; preds = %74
  %77 = shl i32 %8, 4
  %78 = sub i32 0, %39
  %79 = or i32 %77, 15
  %80 = sub i32 %79, %39
  %81 = and i32 %78, 3
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %92, label %83

83:                                               ; preds = %76, %83
  %84 = phi i32 [ %89, %83 ], [ %41, %76 ]
  %85 = phi i8* [ %88, %83 ], [ %75, %76 ]
  %86 = phi i32 [ %90, %83 ], [ %81, %76 ]
  %87 = getelementptr inbounds i8, i8* %85, i64 -32
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %85, i8* align 1 %87, i64 16, i1 false) #6
  %88 = getelementptr inbounds i8, i8* %85, i64 32
  %89 = add nsw i32 %84, 1
  %90 = add i32 %86, -1
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %83, !llvm.loop !2

92:                                               ; preds = %83, %76
  %93 = phi i32 [ %41, %76 ], [ %89, %83 ]
  %94 = phi i8* [ %75, %76 ], [ %88, %83 ]
  %95 = icmp ult i32 %80, 3
  br i1 %95, label %119, label %107

96:                                               ; preds = %1177, %60
  %97 = phi i8* [ %19, %60 ], [ %1179, %1177 ]
  %98 = phi i8* [ %49, %60 ], [ %1178, %1177 ]
  %99 = phi i32 [ %61, %60 ], [ %1180, %1177 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %98, i8* align 1 %97, i64 %52, i1 false) #6
  br i1 %36, label %100, label %104

100:                                              ; preds = %96
  %101 = getelementptr inbounds i8, i8* %98, i64 %52
  %102 = getelementptr inbounds i8, i8* %98, i64 %54
  %103 = load i8, i8* %102, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %101, i8 %103, i64 %56, i1 false) #6
  br label %104

104:                                              ; preds = %100, %96
  %105 = getelementptr inbounds i8, i8* %98, i64 32
  %106 = getelementptr inbounds i8, i8* %97, i64 %57
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %105, i8* align 1 %106, i64 %52, i1 false) #6
  br i1 %36, label %1173, label %1177

107:                                              ; preds = %92, %107
  %108 = phi i32 [ %117, %107 ], [ %93, %92 ]
  %109 = phi i8* [ %116, %107 ], [ %94, %92 ]
  %110 = getelementptr inbounds i8, i8* %109, i64 -32
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %109, i8* align 1 %110, i64 16, i1 false) #6
  %111 = getelementptr inbounds i8, i8* %109, i64 32
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %111, i8* align 1 %109, i64 16, i1 false) #6
  %112 = getelementptr inbounds i8, i8* %109, i64 64
  %113 = getelementptr inbounds i8, i8* %109, i64 32
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %112, i8* align 1 %113, i64 16, i1 false) #6
  %114 = getelementptr inbounds i8, i8* %109, i64 96
  %115 = getelementptr inbounds i8, i8* %109, i64 64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %114, i8* align 1 %115, i64 16, i1 false) #6
  %116 = getelementptr inbounds i8, i8* %109, i64 128
  %117 = add nsw i32 %108, 4
  %118 = icmp eq i32 %117, 16
  br i1 %118, label %119, label %107

119:                                              ; preds = %92, %107, %74
  %120 = load i8*, i8** %48, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 16
  br i1 %50, label %122, label %150

122:                                              ; preds = %119
  %123 = load i32, i32* %22, align 4
  %124 = sext i32 %45 to i64
  %125 = icmp slt i32 %44, 16
  %126 = add nsw i32 %45, -1
  %127 = sext i32 %126 to i64
  %128 = sub nsw i32 8, %45
  %129 = sext i32 %128 to i64
  %130 = sext i32 %123 to i64
  %131 = and i32 %47, 1
  %132 = icmp eq i32 %47, 1
  br i1 %132, label %135, label %133

133:                                              ; preds = %122
  %134 = sub nsw i32 %47, %131
  br label %172

135:                                              ; preds = %1168, %122
  %136 = phi i8* [ undef, %122 ], [ %1169, %1168 ]
  %137 = phi i8* [ %28, %122 ], [ %1170, %1168 ]
  %138 = phi i8* [ %121, %122 ], [ %1169, %1168 ]
  %139 = icmp eq i32 %131, 0
  br i1 %139, label %147, label %140

140:                                              ; preds = %135
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %138, i8* align 1 %137, i64 %124, i1 false) #6
  br i1 %125, label %141, label %145

141:                                              ; preds = %140
  %142 = getelementptr inbounds i8, i8* %138, i64 %124
  %143 = getelementptr inbounds i8, i8* %138, i64 %127
  %144 = load i8, i8* %143, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %142, i8 %144, i64 %129, i1 false) #6
  br label %145

145:                                              ; preds = %140, %141
  %146 = getelementptr inbounds i8, i8* %138, i64 32
  br label %147

147:                                              ; preds = %135, %145
  %148 = phi i8* [ %136, %135 ], [ %146, %145 ]
  %149 = icmp slt i32 %46, 16
  br i1 %149, label %150, label %207

150:                                              ; preds = %119, %147
  %151 = phi i8* [ %148, %147 ], [ %121, %119 ]
  %152 = sub nsw i32 0, %47
  %153 = sub nsw i32 7, %47
  %154 = and i32 %152, 7
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %168, label %156

156:                                              ; preds = %150, %156
  %157 = phi i32 [ %165, %156 ], [ %47, %150 ]
  %158 = phi i8* [ %164, %156 ], [ %151, %150 ]
  %159 = phi i32 [ %166, %156 ], [ %154, %150 ]
  %160 = getelementptr inbounds i8, i8* %158, i64 -32
  %161 = bitcast i8* %160 to i64*
  %162 = bitcast i8* %158 to i64*
  %163 = load i64, i64* %161, align 1
  store i64 %163, i64* %162, align 1
  %164 = getelementptr inbounds i8, i8* %158, i64 32
  %165 = add nsw i32 %157, 1
  %166 = add i32 %159, -1
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %168, label %156, !llvm.loop !4

168:                                              ; preds = %156, %150
  %169 = phi i32 [ %47, %150 ], [ %165, %156 ]
  %170 = phi i8* [ %151, %150 ], [ %164, %156 ]
  %171 = icmp ult i32 %153, 7
  br i1 %171, label %207, label %183

172:                                              ; preds = %1168, %133
  %173 = phi i8* [ %28, %133 ], [ %1170, %1168 ]
  %174 = phi i8* [ %121, %133 ], [ %1169, %1168 ]
  %175 = phi i32 [ %134, %133 ], [ %1171, %1168 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %174, i8* align 1 %173, i64 %124, i1 false) #6
  br i1 %125, label %176, label %180

176:                                              ; preds = %172
  %177 = getelementptr inbounds i8, i8* %174, i64 %124
  %178 = getelementptr inbounds i8, i8* %174, i64 %127
  %179 = load i8, i8* %178, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %177, i8 %179, i64 %129, i1 false) #6
  br label %180

180:                                              ; preds = %176, %172
  %181 = getelementptr inbounds i8, i8* %174, i64 32
  %182 = getelementptr inbounds i8, i8* %173, i64 %130
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %181, i8* align 1 %182, i64 %124, i1 false) #6
  br i1 %125, label %1164, label %1168

183:                                              ; preds = %168, %183
  %184 = phi i32 [ %205, %183 ], [ %169, %168 ]
  %185 = phi i8* [ %204, %183 ], [ %170, %168 ]
  %186 = getelementptr inbounds i8, i8* %185, i64 -32
  %187 = bitcast i8* %186 to i64*
  %188 = bitcast i8* %185 to i64*
  %189 = load i64, i64* %187, align 1
  store i64 %189, i64* %188, align 1
  %190 = getelementptr inbounds i8, i8* %185, i64 32
  %191 = bitcast i8* %190 to i64*
  store i64 %189, i64* %191, align 1
  %192 = getelementptr inbounds i8, i8* %185, i64 64
  %193 = bitcast i8* %192 to i64*
  store i64 %189, i64* %193, align 1
  %194 = getelementptr inbounds i8, i8* %185, i64 96
  %195 = bitcast i8* %194 to i64*
  store i64 %189, i64* %195, align 1
  %196 = getelementptr inbounds i8, i8* %185, i64 128
  %197 = bitcast i8* %196 to i64*
  store i64 %189, i64* %197, align 1
  %198 = getelementptr inbounds i8, i8* %185, i64 160
  %199 = bitcast i8* %198 to i64*
  store i64 %189, i64* %199, align 1
  %200 = getelementptr inbounds i8, i8* %185, i64 192
  %201 = bitcast i8* %200 to i64*
  store i64 %189, i64* %201, align 1
  %202 = getelementptr inbounds i8, i8* %185, i64 224
  %203 = bitcast i8* %202 to i64*
  store i64 %189, i64* %203, align 1
  %204 = getelementptr inbounds i8, i8* %185, i64 256
  %205 = add nsw i32 %184, 8
  %206 = icmp eq i32 %184, 0
  br i1 %206, label %207, label %183

207:                                              ; preds = %168, %183, %147
  %208 = phi i1 [ false, %147 ], [ true, %183 ], [ true, %168 ]
  %209 = load i8*, i8** %48, align 8
  %210 = getelementptr inbounds i8, i8* %209, i64 24
  br i1 %50, label %211, label %236

211:                                              ; preds = %207
  %212 = load i32, i32* %22, align 4
  %213 = sext i32 %45 to i64
  %214 = icmp slt i32 %44, 16
  %215 = add nsw i32 %45, -1
  %216 = sext i32 %215 to i64
  %217 = sub nsw i32 8, %45
  %218 = sext i32 %217 to i64
  %219 = sext i32 %212 to i64
  %220 = and i32 %47, 1
  %221 = icmp eq i32 %47, 1
  br i1 %221, label %224, label %222

222:                                              ; preds = %211
  %223 = sub nsw i32 %47, %220
  br label %259

224:                                              ; preds = %1159, %211
  %225 = phi i8* [ undef, %211 ], [ %1160, %1159 ]
  %226 = phi i8* [ %31, %211 ], [ %1161, %1159 ]
  %227 = phi i8* [ %210, %211 ], [ %1160, %1159 ]
  %228 = icmp eq i32 %220, 0
  br i1 %228, label %236, label %229

229:                                              ; preds = %224
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %227, i8* align 1 %226, i64 %213, i1 false) #6
  br i1 %214, label %230, label %234

230:                                              ; preds = %229
  %231 = getelementptr inbounds i8, i8* %227, i64 %213
  %232 = getelementptr inbounds i8, i8* %227, i64 %216
  %233 = load i8, i8* %232, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %231, i8 %233, i64 %218, i1 false) #6
  br label %234

234:                                              ; preds = %229, %230
  %235 = getelementptr inbounds i8, i8* %227, i64 32
  br label %236

236:                                              ; preds = %234, %224, %207
  %237 = phi i8* [ %210, %207 ], [ %225, %224 ], [ %235, %234 ]
  br i1 %208, label %238, label %294

238:                                              ; preds = %236
  %239 = sub nsw i32 0, %47
  %240 = sub nsw i32 7, %47
  %241 = and i32 %239, 7
  %242 = icmp eq i32 %241, 0
  br i1 %242, label %255, label %243

243:                                              ; preds = %238, %243
  %244 = phi i32 [ %252, %243 ], [ %47, %238 ]
  %245 = phi i8* [ %251, %243 ], [ %237, %238 ]
  %246 = phi i32 [ %253, %243 ], [ %241, %238 ]
  %247 = getelementptr inbounds i8, i8* %245, i64 -32
  %248 = bitcast i8* %247 to i64*
  %249 = bitcast i8* %245 to i64*
  %250 = load i64, i64* %248, align 1
  store i64 %250, i64* %249, align 1
  %251 = getelementptr inbounds i8, i8* %245, i64 32
  %252 = add nsw i32 %244, 1
  %253 = add i32 %246, -1
  %254 = icmp eq i32 %253, 0
  br i1 %254, label %255, label %243, !llvm.loop !5

255:                                              ; preds = %243, %238
  %256 = phi i32 [ %47, %238 ], [ %252, %243 ]
  %257 = phi i8* [ %237, %238 ], [ %251, %243 ]
  %258 = icmp ult i32 %240, 7
  br i1 %258, label %294, label %270

259:                                              ; preds = %1159, %222
  %260 = phi i8* [ %31, %222 ], [ %1161, %1159 ]
  %261 = phi i8* [ %210, %222 ], [ %1160, %1159 ]
  %262 = phi i32 [ %223, %222 ], [ %1162, %1159 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %261, i8* align 1 %260, i64 %213, i1 false) #6
  br i1 %214, label %263, label %267

263:                                              ; preds = %259
  %264 = getelementptr inbounds i8, i8* %261, i64 %213
  %265 = getelementptr inbounds i8, i8* %261, i64 %216
  %266 = load i8, i8* %265, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %264, i8 %266, i64 %218, i1 false) #6
  br label %267

267:                                              ; preds = %263, %259
  %268 = getelementptr inbounds i8, i8* %261, i64 32
  %269 = getelementptr inbounds i8, i8* %260, i64 %219
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %268, i8* align 1 %269, i64 %213, i1 false) #6
  br i1 %214, label %1155, label %1159

270:                                              ; preds = %255, %270
  %271 = phi i32 [ %292, %270 ], [ %256, %255 ]
  %272 = phi i8* [ %291, %270 ], [ %257, %255 ]
  %273 = getelementptr inbounds i8, i8* %272, i64 -32
  %274 = bitcast i8* %273 to i64*
  %275 = bitcast i8* %272 to i64*
  %276 = load i64, i64* %274, align 1
  store i64 %276, i64* %275, align 1
  %277 = getelementptr inbounds i8, i8* %272, i64 32
  %278 = bitcast i8* %277 to i64*
  store i64 %276, i64* %278, align 1
  %279 = getelementptr inbounds i8, i8* %272, i64 64
  %280 = bitcast i8* %279 to i64*
  store i64 %276, i64* %280, align 1
  %281 = getelementptr inbounds i8, i8* %272, i64 96
  %282 = bitcast i8* %281 to i64*
  store i64 %276, i64* %282, align 1
  %283 = getelementptr inbounds i8, i8* %272, i64 128
  %284 = bitcast i8* %283 to i64*
  store i64 %276, i64* %284, align 1
  %285 = getelementptr inbounds i8, i8* %272, i64 160
  %286 = bitcast i8* %285 to i64*
  store i64 %276, i64* %286, align 1
  %287 = getelementptr inbounds i8, i8* %272, i64 192
  %288 = bitcast i8* %287 to i64*
  store i64 %276, i64* %288, align 1
  %289 = getelementptr inbounds i8, i8* %272, i64 224
  %290 = bitcast i8* %289 to i64*
  store i64 %276, i64* %290, align 1
  %291 = getelementptr inbounds i8, i8* %272, i64 256
  %292 = add nsw i32 %271, 8
  %293 = icmp eq i32 %271, 0
  br i1 %293, label %294, label %270

294:                                              ; preds = %255, %270, %236
  %295 = icmp eq i8* %1, null
  br i1 %295, label %1154, label %296

296:                                              ; preds = %294
  %297 = icmp eq i32 %6, 0
  br i1 %297, label %298, label %323

298:                                              ; preds = %296
  %299 = load i32, i32* %7, align 4
  %300 = icmp sgt i32 %299, 0
  %301 = select i1 %300, i8 -127, i8 127
  %302 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 28
  %303 = load i8*, i8** %302, align 8
  %304 = getelementptr inbounds i8, i8* %303, i64 -1
  store i8 %301, i8* %304, align 1
  %305 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 27
  %306 = load i8*, i8** %305, align 8
  %307 = getelementptr inbounds i8, i8* %306, i64 -1
  store i8 %301, i8* %307, align 1
  %308 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 26
  %309 = load i8*, i8** %308, align 8
  %310 = getelementptr inbounds i8, i8* %309, i64 -1
  store i8 %301, i8* %310, align 1
  %311 = load i8*, i8** %308, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %311, i8 -127, i64 16, i1 false) #6
  %312 = bitcast i8** %305 to i64**
  %313 = load i64*, i64** %312, align 8
  store i64 -9114861777597660799, i64* %313, align 1
  %314 = bitcast i8** %302 to i64**
  %315 = load i64*, i64** %314, align 8
  store i64 -9114861777597660799, i64* %315, align 1
  %316 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 15, i64 8
  store i32 0, i32* %316, align 8
  %317 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 25
  %318 = load [2 x [2 x i8]]*, [2 x [2 x i8]]** %317, align 8
  %319 = icmp eq [2 x [2 x i8]]* %318, null
  br i1 %319, label %620, label %320

320:                                              ; preds = %298
  %321 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 24, i64 0, i64 0
  %322 = bitcast i8* %321 to i32*
  store i32 0, i32* %322, align 8
  br label %620

323:                                              ; preds = %296
  %324 = icmp eq i32 %8, 0
  br i1 %324, label %325, label %333

325:                                              ; preds = %323
  %326 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 28
  %327 = load i8*, i8** %326, align 8
  %328 = getelementptr inbounds i8, i8* %327, i64 -1
  store i8 127, i8* %328, align 1
  %329 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 27
  %330 = load i8*, i8** %329, align 8
  %331 = getelementptr inbounds i8, i8* %330, i64 -1
  store i8 127, i8* %331, align 1
  %332 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 26
  br label %356

333:                                              ; preds = %323
  %334 = load i32, i32* %13, align 8
  %335 = xor i32 %334, -1
  %336 = sext i32 %335 to i64
  %337 = getelementptr inbounds i8, i8* %19, i64 %336
  %338 = load i8, i8* %337, align 1
  %339 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 26
  %340 = load i8*, i8** %339, align 8
  %341 = getelementptr inbounds i8, i8* %340, i64 -1
  store i8 %338, i8* %341, align 1
  %342 = load i32, i32* %22, align 4
  %343 = xor i32 %342, -1
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds i8, i8* %28, i64 %344
  %346 = load i8, i8* %345, align 1
  %347 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 27
  %348 = load i8*, i8** %347, align 8
  %349 = getelementptr inbounds i8, i8* %348, i64 -1
  store i8 %346, i8* %349, align 1
  %350 = load i32, i32* %22, align 4
  %351 = xor i32 %350, -1
  %352 = sext i32 %351 to i64
  %353 = getelementptr inbounds i8, i8* %31, i64 %352
  %354 = load i8, i8* %353, align 1
  %355 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 28
  br label %356

356:                                              ; preds = %333, %325
  %357 = phi i8** [ %355, %333 ], [ %332, %325 ]
  %358 = phi i8 [ %354, %333 ], [ 127, %325 ]
  %359 = load i8*, i8** %357, align 8
  %360 = getelementptr inbounds i8, i8* %359, i64 -1
  store i8 %358, i8* %360, align 1
  %361 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 26
  %362 = load i8*, i8** %361, align 8
  br i1 %50, label %363, label %388

363:                                              ; preds = %356
  %364 = load i32, i32* %13, align 8
  %365 = getelementptr inbounds i8, i8* %19, i64 -1
  %366 = sext i32 %364 to i64
  %367 = zext i32 %43 to i64
  %368 = add nsw i64 %367, -1
  %369 = and i64 %367, 3
  %370 = icmp ult i64 %368, 3
  br i1 %370, label %373, label %371

371:                                              ; preds = %363
  %372 = sub nsw i64 %367, %369
  br label %409

373:                                              ; preds = %409, %363
  %374 = phi i64 [ 0, %363 ], [ %427, %409 ]
  %375 = phi i8* [ %365, %363 ], [ %428, %409 ]
  %376 = icmp eq i64 %369, 0
  br i1 %376, label %387, label %377

377:                                              ; preds = %373, %377
  %378 = phi i64 [ %383, %377 ], [ %374, %373 ]
  %379 = phi i8* [ %384, %377 ], [ %375, %373 ]
  %380 = phi i64 [ %385, %377 ], [ %369, %373 ]
  %381 = load i8, i8* %379, align 1
  %382 = getelementptr inbounds i8, i8* %362, i64 %378
  store i8 %381, i8* %382, align 1
  %383 = add nuw nsw i64 %378, 1
  %384 = getelementptr inbounds i8, i8* %379, i64 %366
  %385 = add i64 %380, -1
  %386 = icmp eq i64 %385, 0
  br i1 %386, label %387, label %377, !llvm.loop !6

387:                                              ; preds = %377, %373
  br i1 %42, label %388, label %446

388:                                              ; preds = %356, %387
  %389 = phi i32 [ %41, %387 ], [ 0, %356 ]
  %390 = add nsw i32 %43, -1
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds i8, i8* %362, i64 %391
  %393 = zext i32 %389 to i64
  %394 = sub nsw i64 0, %393
  %395 = sub nsw i64 15, %393
  %396 = and i64 %394, 3
  %397 = icmp eq i64 %396, 0
  br i1 %397, label %406, label %398

398:                                              ; preds = %388, %398
  %399 = phi i64 [ %403, %398 ], [ %393, %388 ]
  %400 = phi i64 [ %404, %398 ], [ %396, %388 ]
  %401 = load i8, i8* %392, align 1
  %402 = getelementptr inbounds i8, i8* %362, i64 %399
  store i8 %401, i8* %402, align 1
  %403 = add nuw nsw i64 %399, 1
  %404 = add i64 %400, -1
  %405 = icmp eq i64 %404, 0
  br i1 %405, label %406, label %398, !llvm.loop !7

406:                                              ; preds = %398, %388
  %407 = phi i64 [ %393, %388 ], [ %403, %398 ]
  %408 = icmp ult i64 %395, 3
  br i1 %408, label %446, label %431

409:                                              ; preds = %409, %371
  %410 = phi i64 [ 0, %371 ], [ %427, %409 ]
  %411 = phi i8* [ %365, %371 ], [ %428, %409 ]
  %412 = phi i64 [ %372, %371 ], [ %429, %409 ]
  %413 = load i8, i8* %411, align 1
  %414 = getelementptr inbounds i8, i8* %362, i64 %410
  store i8 %413, i8* %414, align 1
  %415 = or i64 %410, 1
  %416 = getelementptr inbounds i8, i8* %411, i64 %366
  %417 = load i8, i8* %416, align 1
  %418 = getelementptr inbounds i8, i8* %362, i64 %415
  store i8 %417, i8* %418, align 1
  %419 = or i64 %410, 2
  %420 = getelementptr inbounds i8, i8* %416, i64 %366
  %421 = load i8, i8* %420, align 1
  %422 = getelementptr inbounds i8, i8* %362, i64 %419
  store i8 %421, i8* %422, align 1
  %423 = or i64 %410, 3
  %424 = getelementptr inbounds i8, i8* %420, i64 %366
  %425 = load i8, i8* %424, align 1
  %426 = getelementptr inbounds i8, i8* %362, i64 %423
  store i8 %425, i8* %426, align 1
  %427 = add nuw nsw i64 %410, 4
  %428 = getelementptr inbounds i8, i8* %424, i64 %366
  %429 = add i64 %412, -4
  %430 = icmp eq i64 %429, 0
  br i1 %430, label %373, label %409

431:                                              ; preds = %406, %431
  %432 = phi i64 [ %444, %431 ], [ %407, %406 ]
  %433 = load i8, i8* %392, align 1
  %434 = getelementptr inbounds i8, i8* %362, i64 %432
  store i8 %433, i8* %434, align 1
  %435 = add nuw nsw i64 %432, 1
  %436 = load i8, i8* %392, align 1
  %437 = getelementptr inbounds i8, i8* %362, i64 %435
  store i8 %436, i8* %437, align 1
  %438 = add nuw nsw i64 %432, 2
  %439 = load i8, i8* %392, align 1
  %440 = getelementptr inbounds i8, i8* %362, i64 %438
  store i8 %439, i8* %440, align 1
  %441 = add nuw nsw i64 %432, 3
  %442 = load i8, i8* %392, align 1
  %443 = getelementptr inbounds i8, i8* %362, i64 %441
  store i8 %442, i8* %443, align 1
  %444 = add nuw nsw i64 %432, 4
  %445 = icmp eq i64 %444, 16
  br i1 %445, label %446, label %431

446:                                              ; preds = %406, %431, %387
  %447 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 27
  %448 = load i8*, i8** %447, align 8
  br i1 %50, label %449, label %475

449:                                              ; preds = %446
  %450 = load i32, i32* %22, align 4
  %451 = getelementptr inbounds i8, i8* %28, i64 -1
  %452 = sext i32 %450 to i64
  %453 = zext i32 %47 to i64
  %454 = add nsw i64 %453, -1
  %455 = and i64 %453, 3
  %456 = icmp ult i64 %454, 3
  br i1 %456, label %459, label %457

457:                                              ; preds = %449
  %458 = sub nsw i64 %453, %455
  br label %496

459:                                              ; preds = %496, %449
  %460 = phi i64 [ 0, %449 ], [ %514, %496 ]
  %461 = phi i8* [ %451, %449 ], [ %515, %496 ]
  %462 = icmp eq i64 %455, 0
  br i1 %462, label %473, label %463

463:                                              ; preds = %459, %463
  %464 = phi i64 [ %469, %463 ], [ %460, %459 ]
  %465 = phi i8* [ %470, %463 ], [ %461, %459 ]
  %466 = phi i64 [ %471, %463 ], [ %455, %459 ]
  %467 = load i8, i8* %465, align 1
  %468 = getelementptr inbounds i8, i8* %448, i64 %464
  store i8 %467, i8* %468, align 1
  %469 = add nuw nsw i64 %464, 1
  %470 = getelementptr inbounds i8, i8* %465, i64 %452
  %471 = add i64 %466, -1
  %472 = icmp eq i64 %471, 0
  br i1 %472, label %473, label %463, !llvm.loop !8

473:                                              ; preds = %463, %459
  %474 = icmp slt i32 %46, 16
  br i1 %474, label %475, label %533

475:                                              ; preds = %446, %473
  %476 = phi i32 [ %47, %473 ], [ 0, %446 ]
  %477 = add nsw i32 %47, -1
  %478 = sext i32 %477 to i64
  %479 = getelementptr inbounds i8, i8* %448, i64 %478
  %480 = zext i32 %476 to i64
  %481 = sub nsw i64 0, %480
  %482 = sub nsw i64 7, %480
  %483 = and i64 %481, 3
  %484 = icmp eq i64 %483, 0
  br i1 %484, label %493, label %485

485:                                              ; preds = %475, %485
  %486 = phi i64 [ %490, %485 ], [ %480, %475 ]
  %487 = phi i64 [ %491, %485 ], [ %483, %475 ]
  %488 = load i8, i8* %479, align 1
  %489 = getelementptr inbounds i8, i8* %448, i64 %486
  store i8 %488, i8* %489, align 1
  %490 = add nuw nsw i64 %486, 1
  %491 = add i64 %487, -1
  %492 = icmp eq i64 %491, 0
  br i1 %492, label %493, label %485, !llvm.loop !9

493:                                              ; preds = %485, %475
  %494 = phi i64 [ %480, %475 ], [ %490, %485 ]
  %495 = icmp ult i64 %482, 3
  br i1 %495, label %533, label %518

496:                                              ; preds = %496, %457
  %497 = phi i64 [ 0, %457 ], [ %514, %496 ]
  %498 = phi i8* [ %451, %457 ], [ %515, %496 ]
  %499 = phi i64 [ %458, %457 ], [ %516, %496 ]
  %500 = load i8, i8* %498, align 1
  %501 = getelementptr inbounds i8, i8* %448, i64 %497
  store i8 %500, i8* %501, align 1
  %502 = or i64 %497, 1
  %503 = getelementptr inbounds i8, i8* %498, i64 %452
  %504 = load i8, i8* %503, align 1
  %505 = getelementptr inbounds i8, i8* %448, i64 %502
  store i8 %504, i8* %505, align 1
  %506 = or i64 %497, 2
  %507 = getelementptr inbounds i8, i8* %503, i64 %452
  %508 = load i8, i8* %507, align 1
  %509 = getelementptr inbounds i8, i8* %448, i64 %506
  store i8 %508, i8* %509, align 1
  %510 = or i64 %497, 3
  %511 = getelementptr inbounds i8, i8* %507, i64 %452
  %512 = load i8, i8* %511, align 1
  %513 = getelementptr inbounds i8, i8* %448, i64 %510
  store i8 %512, i8* %513, align 1
  %514 = add nuw nsw i64 %497, 4
  %515 = getelementptr inbounds i8, i8* %511, i64 %452
  %516 = add i64 %499, -4
  %517 = icmp eq i64 %516, 0
  br i1 %517, label %459, label %496

518:                                              ; preds = %493, %518
  %519 = phi i64 [ %531, %518 ], [ %494, %493 ]
  %520 = load i8, i8* %479, align 1
  %521 = getelementptr inbounds i8, i8* %448, i64 %519
  store i8 %520, i8* %521, align 1
  %522 = add nuw nsw i64 %519, 1
  %523 = load i8, i8* %479, align 1
  %524 = getelementptr inbounds i8, i8* %448, i64 %522
  store i8 %523, i8* %524, align 1
  %525 = add nuw nsw i64 %519, 2
  %526 = load i8, i8* %479, align 1
  %527 = getelementptr inbounds i8, i8* %448, i64 %525
  store i8 %526, i8* %527, align 1
  %528 = add nuw nsw i64 %519, 3
  %529 = load i8, i8* %479, align 1
  %530 = getelementptr inbounds i8, i8* %448, i64 %528
  store i8 %529, i8* %530, align 1
  %531 = add nuw nsw i64 %519, 4
  %532 = icmp eq i64 %531, 8
  br i1 %532, label %533, label %518

533:                                              ; preds = %493, %518, %473
  %534 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 28
  %535 = load i8*, i8** %534, align 8
  br i1 %50, label %536, label %562

536:                                              ; preds = %533
  %537 = load i32, i32* %22, align 4
  %538 = getelementptr inbounds i8, i8* %31, i64 -1
  %539 = sext i32 %537 to i64
  %540 = zext i32 %47 to i64
  %541 = add nsw i64 %540, -1
  %542 = and i64 %540, 3
  %543 = icmp ult i64 %541, 3
  br i1 %543, label %546, label %544

544:                                              ; preds = %536
  %545 = sub nsw i64 %540, %542
  br label %583

546:                                              ; preds = %583, %536
  %547 = phi i64 [ 0, %536 ], [ %601, %583 ]
  %548 = phi i8* [ %538, %536 ], [ %602, %583 ]
  %549 = icmp eq i64 %542, 0
  br i1 %549, label %560, label %550

550:                                              ; preds = %546, %550
  %551 = phi i64 [ %556, %550 ], [ %547, %546 ]
  %552 = phi i8* [ %557, %550 ], [ %548, %546 ]
  %553 = phi i64 [ %558, %550 ], [ %542, %546 ]
  %554 = load i8, i8* %552, align 1
  %555 = getelementptr inbounds i8, i8* %535, i64 %551
  store i8 %554, i8* %555, align 1
  %556 = add nuw nsw i64 %551, 1
  %557 = getelementptr inbounds i8, i8* %552, i64 %539
  %558 = add i64 %553, -1
  %559 = icmp eq i64 %558, 0
  br i1 %559, label %560, label %550, !llvm.loop !10

560:                                              ; preds = %550, %546
  %561 = icmp slt i32 %46, 16
  br i1 %561, label %562, label %620

562:                                              ; preds = %533, %560
  %563 = phi i32 [ %47, %560 ], [ 0, %533 ]
  %564 = add nsw i32 %47, -1
  %565 = sext i32 %564 to i64
  %566 = getelementptr inbounds i8, i8* %535, i64 %565
  %567 = zext i32 %563 to i64
  %568 = sub nsw i64 0, %567
  %569 = sub nsw i64 7, %567
  %570 = and i64 %568, 3
  %571 = icmp eq i64 %570, 0
  br i1 %571, label %580, label %572

572:                                              ; preds = %562, %572
  %573 = phi i64 [ %577, %572 ], [ %567, %562 ]
  %574 = phi i64 [ %578, %572 ], [ %570, %562 ]
  %575 = load i8, i8* %566, align 1
  %576 = getelementptr inbounds i8, i8* %535, i64 %573
  store i8 %575, i8* %576, align 1
  %577 = add nuw nsw i64 %573, 1
  %578 = add i64 %574, -1
  %579 = icmp eq i64 %578, 0
  br i1 %579, label %580, label %572, !llvm.loop !11

580:                                              ; preds = %572, %562
  %581 = phi i64 [ %567, %562 ], [ %577, %572 ]
  %582 = icmp ult i64 %569, 3
  br i1 %582, label %620, label %605

583:                                              ; preds = %583, %544
  %584 = phi i64 [ 0, %544 ], [ %601, %583 ]
  %585 = phi i8* [ %538, %544 ], [ %602, %583 ]
  %586 = phi i64 [ %545, %544 ], [ %603, %583 ]
  %587 = load i8, i8* %585, align 1
  %588 = getelementptr inbounds i8, i8* %535, i64 %584
  store i8 %587, i8* %588, align 1
  %589 = or i64 %584, 1
  %590 = getelementptr inbounds i8, i8* %585, i64 %539
  %591 = load i8, i8* %590, align 1
  %592 = getelementptr inbounds i8, i8* %535, i64 %589
  store i8 %591, i8* %592, align 1
  %593 = or i64 %584, 2
  %594 = getelementptr inbounds i8, i8* %590, i64 %539
  %595 = load i8, i8* %594, align 1
  %596 = getelementptr inbounds i8, i8* %535, i64 %593
  store i8 %595, i8* %596, align 1
  %597 = or i64 %584, 3
  %598 = getelementptr inbounds i8, i8* %594, i64 %539
  %599 = load i8, i8* %598, align 1
  %600 = getelementptr inbounds i8, i8* %535, i64 %597
  store i8 %599, i8* %600, align 1
  %601 = add nuw nsw i64 %584, 4
  %602 = getelementptr inbounds i8, i8* %598, i64 %539
  %603 = add i64 %586, -4
  %604 = icmp eq i64 %603, 0
  br i1 %604, label %546, label %583

605:                                              ; preds = %580, %605
  %606 = phi i64 [ %618, %605 ], [ %581, %580 ]
  %607 = load i8, i8* %566, align 1
  %608 = getelementptr inbounds i8, i8* %535, i64 %606
  store i8 %607, i8* %608, align 1
  %609 = add nuw nsw i64 %606, 1
  %610 = load i8, i8* %566, align 1
  %611 = getelementptr inbounds i8, i8* %535, i64 %609
  store i8 %610, i8* %611, align 1
  %612 = add nuw nsw i64 %606, 2
  %613 = load i8, i8* %566, align 1
  %614 = getelementptr inbounds i8, i8* %535, i64 %612
  store i8 %613, i8* %614, align 1
  %615 = add nuw nsw i64 %606, 3
  %616 = load i8, i8* %566, align 1
  %617 = getelementptr inbounds i8, i8* %535, i64 %615
  store i8 %616, i8* %617, align 1
  %618 = add nuw nsw i64 %606, 4
  %619 = icmp eq i64 %618, 8
  br i1 %619, label %620, label %605

620:                                              ; preds = %580, %605, %560, %320, %298
  %621 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 29
  store i8* %1, i8** %621, align 8
  %622 = getelementptr inbounds i8, i8* %1, i64 16
  %623 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 30
  store i8* %622, i8** %623, align 8
  %624 = icmp eq i32 %8, 0
  br i1 %624, label %625, label %626

625:                                              ; preds = %620
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %1, i8 127, i64 32, i1 false)
  br label %1154

626:                                              ; preds = %620
  %627 = icmp sgt i32 %35, 0
  br i1 %627, label %628, label %745

628:                                              ; preds = %626
  %629 = load i32, i32* %13, align 8
  %630 = sext i32 %629 to i64
  %631 = sub nsw i64 0, %630
  %632 = getelementptr inbounds i8, i8* %19, i64 %631
  %633 = zext i32 %37 to i64
  %634 = icmp ult i32 %37, 32
  br i1 %634, label %635, label %656

635:                                              ; preds = %742, %656, %628
  %636 = phi i64 [ 0, %656 ], [ 0, %628 ], [ %665, %742 ]
  %637 = phi i8* [ %632, %656 ], [ %632, %628 ], [ %666, %742 ]
  %638 = xor i64 %636, -1
  %639 = add nsw i64 %638, %633
  %640 = and i64 %633, 3
  %641 = icmp eq i64 %640, 0
  br i1 %641, label %652, label %642

642:                                              ; preds = %635, %642
  %643 = phi i64 [ %648, %642 ], [ %636, %635 ]
  %644 = phi i8* [ %649, %642 ], [ %637, %635 ]
  %645 = phi i64 [ %650, %642 ], [ %640, %635 ]
  %646 = load i8, i8* %644, align 1
  %647 = getelementptr inbounds i8, i8* %1, i64 %643
  store i8 %646, i8* %647, align 1
  %648 = add nuw nsw i64 %643, 1
  %649 = getelementptr inbounds i8, i8* %644, i64 1
  %650 = add i64 %645, -1
  %651 = icmp eq i64 %650, 0
  br i1 %651, label %652, label %642, !llvm.loop !12

652:                                              ; preds = %642, %635
  %653 = phi i64 [ %636, %635 ], [ %648, %642 ]
  %654 = phi i8* [ %637, %635 ], [ %649, %642 ]
  %655 = icmp ult i64 %639, 3
  br i1 %655, label %744, label %766

656:                                              ; preds = %628
  %657 = getelementptr i8, i8* %1, i64 %633
  %658 = add nsw i64 %18, %633
  %659 = sub nsw i64 %658, %630
  %660 = getelementptr i8, i8* %12, i64 %659
  %661 = icmp ugt i8* %660, %1
  %662 = icmp ult i8* %632, %657
  %663 = and i1 %661, %662
  br i1 %663, label %635, label %664

664:                                              ; preds = %656
  %665 = and i64 %633, 4294967264
  %666 = getelementptr i8, i8* %632, i64 %665
  %667 = add nsw i64 %665, -32
  %668 = lshr exact i64 %667, 5
  %669 = add nuw nsw i64 %668, 1
  %670 = and i64 %669, 3
  %671 = icmp ult i64 %667, 96
  br i1 %671, label %723, label %672

672:                                              ; preds = %664
  %673 = sub nsw i64 %669, %670
  br label %674

674:                                              ; preds = %674, %672
  %675 = phi i64 [ 0, %672 ], [ %720, %674 ]
  %676 = phi i64 [ %673, %672 ], [ %721, %674 ]
  %677 = getelementptr i8, i8* %632, i64 %675
  %678 = bitcast i8* %677 to <16 x i8>*
  %679 = load <16 x i8>, <16 x i8>* %678, align 1, !alias.scope !13
  %680 = getelementptr i8, i8* %677, i64 16
  %681 = bitcast i8* %680 to <16 x i8>*
  %682 = load <16 x i8>, <16 x i8>* %681, align 1, !alias.scope !13
  %683 = getelementptr inbounds i8, i8* %1, i64 %675
  %684 = bitcast i8* %683 to <16 x i8>*
  store <16 x i8> %679, <16 x i8>* %684, align 1, !alias.scope !16, !noalias !13
  %685 = getelementptr inbounds i8, i8* %683, i64 16
  %686 = bitcast i8* %685 to <16 x i8>*
  store <16 x i8> %682, <16 x i8>* %686, align 1, !alias.scope !16, !noalias !13
  %687 = or i64 %675, 32
  %688 = getelementptr i8, i8* %632, i64 %687
  %689 = bitcast i8* %688 to <16 x i8>*
  %690 = load <16 x i8>, <16 x i8>* %689, align 1, !alias.scope !13
  %691 = getelementptr i8, i8* %688, i64 16
  %692 = bitcast i8* %691 to <16 x i8>*
  %693 = load <16 x i8>, <16 x i8>* %692, align 1, !alias.scope !13
  %694 = getelementptr inbounds i8, i8* %1, i64 %687
  %695 = bitcast i8* %694 to <16 x i8>*
  store <16 x i8> %690, <16 x i8>* %695, align 1, !alias.scope !16, !noalias !13
  %696 = getelementptr inbounds i8, i8* %694, i64 16
  %697 = bitcast i8* %696 to <16 x i8>*
  store <16 x i8> %693, <16 x i8>* %697, align 1, !alias.scope !16, !noalias !13
  %698 = or i64 %675, 64
  %699 = getelementptr i8, i8* %632, i64 %698
  %700 = bitcast i8* %699 to <16 x i8>*
  %701 = load <16 x i8>, <16 x i8>* %700, align 1, !alias.scope !13
  %702 = getelementptr i8, i8* %699, i64 16
  %703 = bitcast i8* %702 to <16 x i8>*
  %704 = load <16 x i8>, <16 x i8>* %703, align 1, !alias.scope !13
  %705 = getelementptr inbounds i8, i8* %1, i64 %698
  %706 = bitcast i8* %705 to <16 x i8>*
  store <16 x i8> %701, <16 x i8>* %706, align 1, !alias.scope !16, !noalias !13
  %707 = getelementptr inbounds i8, i8* %705, i64 16
  %708 = bitcast i8* %707 to <16 x i8>*
  store <16 x i8> %704, <16 x i8>* %708, align 1, !alias.scope !16, !noalias !13
  %709 = or i64 %675, 96
  %710 = getelementptr i8, i8* %632, i64 %709
  %711 = bitcast i8* %710 to <16 x i8>*
  %712 = load <16 x i8>, <16 x i8>* %711, align 1, !alias.scope !13
  %713 = getelementptr i8, i8* %710, i64 16
  %714 = bitcast i8* %713 to <16 x i8>*
  %715 = load <16 x i8>, <16 x i8>* %714, align 1, !alias.scope !13
  %716 = getelementptr inbounds i8, i8* %1, i64 %709
  %717 = bitcast i8* %716 to <16 x i8>*
  store <16 x i8> %712, <16 x i8>* %717, align 1, !alias.scope !16, !noalias !13
  %718 = getelementptr inbounds i8, i8* %716, i64 16
  %719 = bitcast i8* %718 to <16 x i8>*
  store <16 x i8> %715, <16 x i8>* %719, align 1, !alias.scope !16, !noalias !13
  %720 = add i64 %675, 128
  %721 = add i64 %676, -4
  %722 = icmp eq i64 %721, 0
  br i1 %722, label %723, label %674, !llvm.loop !18

723:                                              ; preds = %674, %664
  %724 = phi i64 [ 0, %664 ], [ %720, %674 ]
  %725 = icmp eq i64 %670, 0
  br i1 %725, label %742, label %726

726:                                              ; preds = %723, %726
  %727 = phi i64 [ %739, %726 ], [ %724, %723 ]
  %728 = phi i64 [ %740, %726 ], [ %670, %723 ]
  %729 = getelementptr i8, i8* %632, i64 %727
  %730 = bitcast i8* %729 to <16 x i8>*
  %731 = load <16 x i8>, <16 x i8>* %730, align 1, !alias.scope !13
  %732 = getelementptr i8, i8* %729, i64 16
  %733 = bitcast i8* %732 to <16 x i8>*
  %734 = load <16 x i8>, <16 x i8>* %733, align 1, !alias.scope !13
  %735 = getelementptr inbounds i8, i8* %1, i64 %727
  %736 = bitcast i8* %735 to <16 x i8>*
  store <16 x i8> %731, <16 x i8>* %736, align 1, !alias.scope !16, !noalias !13
  %737 = getelementptr inbounds i8, i8* %735, i64 16
  %738 = bitcast i8* %737 to <16 x i8>*
  store <16 x i8> %734, <16 x i8>* %738, align 1, !alias.scope !16, !noalias !13
  %739 = add i64 %727, 32
  %740 = add i64 %728, -1
  %741 = icmp eq i64 %740, 0
  br i1 %741, label %742, label %726, !llvm.loop !20

742:                                              ; preds = %726, %723
  %743 = icmp eq i64 %665, %633
  br i1 %743, label %744, label %635

744:                                              ; preds = %652, %766, %742
  br i1 %36, label %745, label %801

745:                                              ; preds = %626, %744
  %746 = phi i32 [ %35, %744 ], [ 0, %626 ]
  %747 = add nsw i32 %37, -1
  %748 = sext i32 %747 to i64
  %749 = getelementptr inbounds i8, i8* %1, i64 %748
  %750 = zext i32 %746 to i64
  %751 = sub nsw i64 0, %750
  %752 = sub nsw i64 15, %750
  %753 = and i64 %751, 3
  %754 = icmp eq i64 %753, 0
  br i1 %754, label %763, label %755

755:                                              ; preds = %745, %755
  %756 = phi i64 [ %760, %755 ], [ %750, %745 ]
  %757 = phi i64 [ %761, %755 ], [ %753, %745 ]
  %758 = load i8, i8* %749, align 1
  %759 = getelementptr inbounds i8, i8* %1, i64 %756
  store i8 %758, i8* %759, align 1
  %760 = add nuw nsw i64 %756, 1
  %761 = add i64 %757, -1
  %762 = icmp eq i64 %761, 0
  br i1 %762, label %763, label %755, !llvm.loop !21

763:                                              ; preds = %755, %745
  %764 = phi i64 [ %750, %745 ], [ %760, %755 ]
  %765 = icmp ult i64 %752, 3
  br i1 %765, label %801, label %786

766:                                              ; preds = %652, %766
  %767 = phi i64 [ %783, %766 ], [ %653, %652 ]
  %768 = phi i8* [ %784, %766 ], [ %654, %652 ]
  %769 = load i8, i8* %768, align 1
  %770 = getelementptr inbounds i8, i8* %1, i64 %767
  store i8 %769, i8* %770, align 1
  %771 = add nuw nsw i64 %767, 1
  %772 = getelementptr inbounds i8, i8* %768, i64 1
  %773 = load i8, i8* %772, align 1
  %774 = getelementptr inbounds i8, i8* %1, i64 %771
  store i8 %773, i8* %774, align 1
  %775 = add nuw nsw i64 %767, 2
  %776 = getelementptr inbounds i8, i8* %768, i64 2
  %777 = load i8, i8* %776, align 1
  %778 = getelementptr inbounds i8, i8* %1, i64 %775
  store i8 %777, i8* %778, align 1
  %779 = add nuw nsw i64 %767, 3
  %780 = getelementptr inbounds i8, i8* %768, i64 3
  %781 = load i8, i8* %780, align 1
  %782 = getelementptr inbounds i8, i8* %1, i64 %779
  store i8 %781, i8* %782, align 1
  %783 = add nuw nsw i64 %767, 4
  %784 = getelementptr inbounds i8, i8* %768, i64 4
  %785 = icmp eq i64 %783, %633
  br i1 %785, label %744, label %766, !llvm.loop !22

786:                                              ; preds = %763, %786
  %787 = phi i64 [ %799, %786 ], [ %764, %763 ]
  %788 = load i8, i8* %749, align 1
  %789 = getelementptr inbounds i8, i8* %1, i64 %787
  store i8 %788, i8* %789, align 1
  %790 = add nuw nsw i64 %787, 1
  %791 = load i8, i8* %749, align 1
  %792 = getelementptr inbounds i8, i8* %1, i64 %790
  store i8 %791, i8* %792, align 1
  %793 = add nuw nsw i64 %787, 2
  %794 = load i8, i8* %749, align 1
  %795 = getelementptr inbounds i8, i8* %1, i64 %793
  store i8 %794, i8* %795, align 1
  %796 = add nuw nsw i64 %787, 3
  %797 = load i8, i8* %749, align 1
  %798 = getelementptr inbounds i8, i8* %1, i64 %796
  store i8 %797, i8* %798, align 1
  %799 = add nuw nsw i64 %787, 4
  %800 = icmp eq i64 %799, 16
  br i1 %800, label %801, label %786

801:                                              ; preds = %763, %786, %744
  br i1 %627, label %802, label %921

802:                                              ; preds = %801
  %803 = load i32, i32* %22, align 4
  %804 = sext i32 %803 to i64
  %805 = sub nsw i64 0, %804
  %806 = getelementptr inbounds i8, i8* %28, i64 %805
  %807 = zext i32 %45 to i64
  %808 = icmp ult i32 %45, 32
  br i1 %808, label %809, label %830

809:                                              ; preds = %917, %830, %802
  %810 = phi i64 [ 0, %830 ], [ 0, %802 ], [ %840, %917 ]
  %811 = phi i8* [ %806, %830 ], [ %806, %802 ], [ %841, %917 ]
  %812 = xor i64 %810, -1
  %813 = add nsw i64 %812, %807
  %814 = and i64 %807, 3
  %815 = icmp eq i64 %814, 0
  br i1 %815, label %826, label %816

816:                                              ; preds = %809, %816
  %817 = phi i64 [ %822, %816 ], [ %810, %809 ]
  %818 = phi i8* [ %823, %816 ], [ %811, %809 ]
  %819 = phi i64 [ %824, %816 ], [ %814, %809 ]
  %820 = load i8, i8* %818, align 1
  %821 = getelementptr inbounds i8, i8* %622, i64 %817
  store i8 %820, i8* %821, align 1
  %822 = add nuw nsw i64 %817, 1
  %823 = getelementptr inbounds i8, i8* %818, i64 1
  %824 = add i64 %819, -1
  %825 = icmp eq i64 %824, 0
  br i1 %825, label %826, label %816, !llvm.loop !23

826:                                              ; preds = %816, %809
  %827 = phi i64 [ %810, %809 ], [ %822, %816 ]
  %828 = phi i8* [ %811, %809 ], [ %823, %816 ]
  %829 = icmp ult i64 %813, 3
  br i1 %829, label %919, label %942

830:                                              ; preds = %802
  %831 = add nuw nsw i64 %807, 16
  %832 = getelementptr i8, i8* %1, i64 %831
  %833 = add nsw i64 %27, %807
  %834 = sub nsw i64 %833, %804
  %835 = getelementptr i8, i8* %21, i64 %834
  %836 = icmp ult i8* %622, %835
  %837 = icmp ult i8* %806, %832
  %838 = and i1 %836, %837
  br i1 %838, label %809, label %839

839:                                              ; preds = %830
  %840 = and i64 %807, 4294967264
  %841 = getelementptr i8, i8* %806, i64 %840
  %842 = add nsw i64 %840, -32
  %843 = lshr exact i64 %842, 5
  %844 = add nuw nsw i64 %843, 1
  %845 = and i64 %844, 3
  %846 = icmp ult i64 %842, 96
  br i1 %846, label %898, label %847

847:                                              ; preds = %839
  %848 = sub nsw i64 %844, %845
  br label %849

849:                                              ; preds = %849, %847
  %850 = phi i64 [ 0, %847 ], [ %895, %849 ]
  %851 = phi i64 [ %848, %847 ], [ %896, %849 ]
  %852 = getelementptr i8, i8* %806, i64 %850
  %853 = bitcast i8* %852 to <16 x i8>*
  %854 = load <16 x i8>, <16 x i8>* %853, align 1, !alias.scope !24
  %855 = getelementptr i8, i8* %852, i64 16
  %856 = bitcast i8* %855 to <16 x i8>*
  %857 = load <16 x i8>, <16 x i8>* %856, align 1, !alias.scope !24
  %858 = getelementptr inbounds i8, i8* %622, i64 %850
  %859 = bitcast i8* %858 to <16 x i8>*
  store <16 x i8> %854, <16 x i8>* %859, align 1, !alias.scope !27, !noalias !24
  %860 = getelementptr inbounds i8, i8* %858, i64 16
  %861 = bitcast i8* %860 to <16 x i8>*
  store <16 x i8> %857, <16 x i8>* %861, align 1, !alias.scope !27, !noalias !24
  %862 = or i64 %850, 32
  %863 = getelementptr i8, i8* %806, i64 %862
  %864 = bitcast i8* %863 to <16 x i8>*
  %865 = load <16 x i8>, <16 x i8>* %864, align 1, !alias.scope !24
  %866 = getelementptr i8, i8* %863, i64 16
  %867 = bitcast i8* %866 to <16 x i8>*
  %868 = load <16 x i8>, <16 x i8>* %867, align 1, !alias.scope !24
  %869 = getelementptr inbounds i8, i8* %622, i64 %862
  %870 = bitcast i8* %869 to <16 x i8>*
  store <16 x i8> %865, <16 x i8>* %870, align 1, !alias.scope !27, !noalias !24
  %871 = getelementptr inbounds i8, i8* %869, i64 16
  %872 = bitcast i8* %871 to <16 x i8>*
  store <16 x i8> %868, <16 x i8>* %872, align 1, !alias.scope !27, !noalias !24
  %873 = or i64 %850, 64
  %874 = getelementptr i8, i8* %806, i64 %873
  %875 = bitcast i8* %874 to <16 x i8>*
  %876 = load <16 x i8>, <16 x i8>* %875, align 1, !alias.scope !24
  %877 = getelementptr i8, i8* %874, i64 16
  %878 = bitcast i8* %877 to <16 x i8>*
  %879 = load <16 x i8>, <16 x i8>* %878, align 1, !alias.scope !24
  %880 = getelementptr inbounds i8, i8* %622, i64 %873
  %881 = bitcast i8* %880 to <16 x i8>*
  store <16 x i8> %876, <16 x i8>* %881, align 1, !alias.scope !27, !noalias !24
  %882 = getelementptr inbounds i8, i8* %880, i64 16
  %883 = bitcast i8* %882 to <16 x i8>*
  store <16 x i8> %879, <16 x i8>* %883, align 1, !alias.scope !27, !noalias !24
  %884 = or i64 %850, 96
  %885 = getelementptr i8, i8* %806, i64 %884
  %886 = bitcast i8* %885 to <16 x i8>*
  %887 = load <16 x i8>, <16 x i8>* %886, align 1, !alias.scope !24
  %888 = getelementptr i8, i8* %885, i64 16
  %889 = bitcast i8* %888 to <16 x i8>*
  %890 = load <16 x i8>, <16 x i8>* %889, align 1, !alias.scope !24
  %891 = getelementptr inbounds i8, i8* %622, i64 %884
  %892 = bitcast i8* %891 to <16 x i8>*
  store <16 x i8> %887, <16 x i8>* %892, align 1, !alias.scope !27, !noalias !24
  %893 = getelementptr inbounds i8, i8* %891, i64 16
  %894 = bitcast i8* %893 to <16 x i8>*
  store <16 x i8> %890, <16 x i8>* %894, align 1, !alias.scope !27, !noalias !24
  %895 = add i64 %850, 128
  %896 = add i64 %851, -4
  %897 = icmp eq i64 %896, 0
  br i1 %897, label %898, label %849, !llvm.loop !29

898:                                              ; preds = %849, %839
  %899 = phi i64 [ 0, %839 ], [ %895, %849 ]
  %900 = icmp eq i64 %845, 0
  br i1 %900, label %917, label %901

901:                                              ; preds = %898, %901
  %902 = phi i64 [ %914, %901 ], [ %899, %898 ]
  %903 = phi i64 [ %915, %901 ], [ %845, %898 ]
  %904 = getelementptr i8, i8* %806, i64 %902
  %905 = bitcast i8* %904 to <16 x i8>*
  %906 = load <16 x i8>, <16 x i8>* %905, align 1, !alias.scope !24
  %907 = getelementptr i8, i8* %904, i64 16
  %908 = bitcast i8* %907 to <16 x i8>*
  %909 = load <16 x i8>, <16 x i8>* %908, align 1, !alias.scope !24
  %910 = getelementptr inbounds i8, i8* %622, i64 %902
  %911 = bitcast i8* %910 to <16 x i8>*
  store <16 x i8> %906, <16 x i8>* %911, align 1, !alias.scope !27, !noalias !24
  %912 = getelementptr inbounds i8, i8* %910, i64 16
  %913 = bitcast i8* %912 to <16 x i8>*
  store <16 x i8> %909, <16 x i8>* %913, align 1, !alias.scope !27, !noalias !24
  %914 = add i64 %902, 32
  %915 = add i64 %903, -1
  %916 = icmp eq i64 %915, 0
  br i1 %916, label %917, label %901, !llvm.loop !30

917:                                              ; preds = %901, %898
  %918 = icmp eq i64 %840, %807
  br i1 %918, label %919, label %809

919:                                              ; preds = %826, %942, %917
  %920 = icmp slt i32 %44, 16
  br i1 %920, label %921, label %977

921:                                              ; preds = %801, %919
  %922 = phi i32 [ %45, %919 ], [ 0, %801 ]
  %923 = add nsw i32 %45, -1
  %924 = sext i32 %923 to i64
  %925 = getelementptr inbounds i8, i8* %622, i64 %924
  %926 = zext i32 %922 to i64
  %927 = sub nsw i64 0, %926
  %928 = sub nsw i64 7, %926
  %929 = and i64 %927, 3
  %930 = icmp eq i64 %929, 0
  br i1 %930, label %939, label %931

931:                                              ; preds = %921, %931
  %932 = phi i64 [ %936, %931 ], [ %926, %921 ]
  %933 = phi i64 [ %937, %931 ], [ %929, %921 ]
  %934 = load i8, i8* %925, align 1
  %935 = getelementptr inbounds i8, i8* %622, i64 %932
  store i8 %934, i8* %935, align 1
  %936 = add nuw nsw i64 %932, 1
  %937 = add i64 %933, -1
  %938 = icmp eq i64 %937, 0
  br i1 %938, label %939, label %931, !llvm.loop !31

939:                                              ; preds = %931, %921
  %940 = phi i64 [ %926, %921 ], [ %936, %931 ]
  %941 = icmp ult i64 %928, 3
  br i1 %941, label %977, label %962

942:                                              ; preds = %826, %942
  %943 = phi i64 [ %959, %942 ], [ %827, %826 ]
  %944 = phi i8* [ %960, %942 ], [ %828, %826 ]
  %945 = load i8, i8* %944, align 1
  %946 = getelementptr inbounds i8, i8* %622, i64 %943
  store i8 %945, i8* %946, align 1
  %947 = add nuw nsw i64 %943, 1
  %948 = getelementptr inbounds i8, i8* %944, i64 1
  %949 = load i8, i8* %948, align 1
  %950 = getelementptr inbounds i8, i8* %622, i64 %947
  store i8 %949, i8* %950, align 1
  %951 = add nuw nsw i64 %943, 2
  %952 = getelementptr inbounds i8, i8* %944, i64 2
  %953 = load i8, i8* %952, align 1
  %954 = getelementptr inbounds i8, i8* %622, i64 %951
  store i8 %953, i8* %954, align 1
  %955 = add nuw nsw i64 %943, 3
  %956 = getelementptr inbounds i8, i8* %944, i64 3
  %957 = load i8, i8* %956, align 1
  %958 = getelementptr inbounds i8, i8* %622, i64 %955
  store i8 %957, i8* %958, align 1
  %959 = add nuw nsw i64 %943, 4
  %960 = getelementptr inbounds i8, i8* %944, i64 4
  %961 = icmp eq i64 %959, %807
  br i1 %961, label %919, label %942, !llvm.loop !32

962:                                              ; preds = %939, %962
  %963 = phi i64 [ %975, %962 ], [ %940, %939 ]
  %964 = load i8, i8* %925, align 1
  %965 = getelementptr inbounds i8, i8* %622, i64 %963
  store i8 %964, i8* %965, align 1
  %966 = add nuw nsw i64 %963, 1
  %967 = load i8, i8* %925, align 1
  %968 = getelementptr inbounds i8, i8* %622, i64 %966
  store i8 %967, i8* %968, align 1
  %969 = add nuw nsw i64 %963, 2
  %970 = load i8, i8* %925, align 1
  %971 = getelementptr inbounds i8, i8* %622, i64 %969
  store i8 %970, i8* %971, align 1
  %972 = add nuw nsw i64 %963, 3
  %973 = load i8, i8* %925, align 1
  %974 = getelementptr inbounds i8, i8* %622, i64 %972
  store i8 %973, i8* %974, align 1
  %975 = add nuw nsw i64 %963, 4
  %976 = icmp eq i64 %975, 8
  br i1 %976, label %977, label %962

977:                                              ; preds = %939, %962, %919
  %978 = getelementptr inbounds i8, i8* %1, i64 24
  br i1 %627, label %979, label %1098

979:                                              ; preds = %977
  %980 = load i32, i32* %22, align 4
  %981 = sext i32 %980 to i64
  %982 = sub nsw i64 0, %981
  %983 = getelementptr inbounds i8, i8* %31, i64 %982
  %984 = zext i32 %45 to i64
  %985 = icmp ult i32 %45, 32
  br i1 %985, label %986, label %1007

986:                                              ; preds = %1094, %1007, %979
  %987 = phi i64 [ 0, %1007 ], [ 0, %979 ], [ %1017, %1094 ]
  %988 = phi i8* [ %983, %1007 ], [ %983, %979 ], [ %1018, %1094 ]
  %989 = xor i64 %987, -1
  %990 = add nsw i64 %989, %984
  %991 = and i64 %984, 3
  %992 = icmp eq i64 %991, 0
  br i1 %992, label %1003, label %993

993:                                              ; preds = %986, %993
  %994 = phi i64 [ %999, %993 ], [ %987, %986 ]
  %995 = phi i8* [ %1000, %993 ], [ %988, %986 ]
  %996 = phi i64 [ %1001, %993 ], [ %991, %986 ]
  %997 = load i8, i8* %995, align 1
  %998 = getelementptr inbounds i8, i8* %978, i64 %994
  store i8 %997, i8* %998, align 1
  %999 = add nuw nsw i64 %994, 1
  %1000 = getelementptr inbounds i8, i8* %995, i64 1
  %1001 = add i64 %996, -1
  %1002 = icmp eq i64 %1001, 0
  br i1 %1002, label %1003, label %993, !llvm.loop !33

1003:                                             ; preds = %993, %986
  %1004 = phi i64 [ %987, %986 ], [ %999, %993 ]
  %1005 = phi i8* [ %988, %986 ], [ %1000, %993 ]
  %1006 = icmp ult i64 %990, 3
  br i1 %1006, label %1096, label %1119

1007:                                             ; preds = %979
  %1008 = add nuw nsw i64 %984, 24
  %1009 = getelementptr i8, i8* %1, i64 %1008
  %1010 = add nsw i64 %27, %984
  %1011 = sub nsw i64 %1010, %981
  %1012 = getelementptr i8, i8* %30, i64 %1011
  %1013 = icmp ult i8* %978, %1012
  %1014 = icmp ult i8* %983, %1009
  %1015 = and i1 %1013, %1014
  br i1 %1015, label %986, label %1016

1016:                                             ; preds = %1007
  %1017 = and i64 %984, 4294967264
  %1018 = getelementptr i8, i8* %983, i64 %1017
  %1019 = add nsw i64 %1017, -32
  %1020 = lshr exact i64 %1019, 5
  %1021 = add nuw nsw i64 %1020, 1
  %1022 = and i64 %1021, 3
  %1023 = icmp ult i64 %1019, 96
  br i1 %1023, label %1075, label %1024

1024:                                             ; preds = %1016
  %1025 = sub nsw i64 %1021, %1022
  br label %1026

1026:                                             ; preds = %1026, %1024
  %1027 = phi i64 [ 0, %1024 ], [ %1072, %1026 ]
  %1028 = phi i64 [ %1025, %1024 ], [ %1073, %1026 ]
  %1029 = getelementptr i8, i8* %983, i64 %1027
  %1030 = bitcast i8* %1029 to <16 x i8>*
  %1031 = load <16 x i8>, <16 x i8>* %1030, align 1, !alias.scope !34
  %1032 = getelementptr i8, i8* %1029, i64 16
  %1033 = bitcast i8* %1032 to <16 x i8>*
  %1034 = load <16 x i8>, <16 x i8>* %1033, align 1, !alias.scope !34
  %1035 = getelementptr inbounds i8, i8* %978, i64 %1027
  %1036 = bitcast i8* %1035 to <16 x i8>*
  store <16 x i8> %1031, <16 x i8>* %1036, align 1, !alias.scope !37, !noalias !34
  %1037 = getelementptr inbounds i8, i8* %1035, i64 16
  %1038 = bitcast i8* %1037 to <16 x i8>*
  store <16 x i8> %1034, <16 x i8>* %1038, align 1, !alias.scope !37, !noalias !34
  %1039 = or i64 %1027, 32
  %1040 = getelementptr i8, i8* %983, i64 %1039
  %1041 = bitcast i8* %1040 to <16 x i8>*
  %1042 = load <16 x i8>, <16 x i8>* %1041, align 1, !alias.scope !34
  %1043 = getelementptr i8, i8* %1040, i64 16
  %1044 = bitcast i8* %1043 to <16 x i8>*
  %1045 = load <16 x i8>, <16 x i8>* %1044, align 1, !alias.scope !34
  %1046 = getelementptr inbounds i8, i8* %978, i64 %1039
  %1047 = bitcast i8* %1046 to <16 x i8>*
  store <16 x i8> %1042, <16 x i8>* %1047, align 1, !alias.scope !37, !noalias !34
  %1048 = getelementptr inbounds i8, i8* %1046, i64 16
  %1049 = bitcast i8* %1048 to <16 x i8>*
  store <16 x i8> %1045, <16 x i8>* %1049, align 1, !alias.scope !37, !noalias !34
  %1050 = or i64 %1027, 64
  %1051 = getelementptr i8, i8* %983, i64 %1050
  %1052 = bitcast i8* %1051 to <16 x i8>*
  %1053 = load <16 x i8>, <16 x i8>* %1052, align 1, !alias.scope !34
  %1054 = getelementptr i8, i8* %1051, i64 16
  %1055 = bitcast i8* %1054 to <16 x i8>*
  %1056 = load <16 x i8>, <16 x i8>* %1055, align 1, !alias.scope !34
  %1057 = getelementptr inbounds i8, i8* %978, i64 %1050
  %1058 = bitcast i8* %1057 to <16 x i8>*
  store <16 x i8> %1053, <16 x i8>* %1058, align 1, !alias.scope !37, !noalias !34
  %1059 = getelementptr inbounds i8, i8* %1057, i64 16
  %1060 = bitcast i8* %1059 to <16 x i8>*
  store <16 x i8> %1056, <16 x i8>* %1060, align 1, !alias.scope !37, !noalias !34
  %1061 = or i64 %1027, 96
  %1062 = getelementptr i8, i8* %983, i64 %1061
  %1063 = bitcast i8* %1062 to <16 x i8>*
  %1064 = load <16 x i8>, <16 x i8>* %1063, align 1, !alias.scope !34
  %1065 = getelementptr i8, i8* %1062, i64 16
  %1066 = bitcast i8* %1065 to <16 x i8>*
  %1067 = load <16 x i8>, <16 x i8>* %1066, align 1, !alias.scope !34
  %1068 = getelementptr inbounds i8, i8* %978, i64 %1061
  %1069 = bitcast i8* %1068 to <16 x i8>*
  store <16 x i8> %1064, <16 x i8>* %1069, align 1, !alias.scope !37, !noalias !34
  %1070 = getelementptr inbounds i8, i8* %1068, i64 16
  %1071 = bitcast i8* %1070 to <16 x i8>*
  store <16 x i8> %1067, <16 x i8>* %1071, align 1, !alias.scope !37, !noalias !34
  %1072 = add i64 %1027, 128
  %1073 = add i64 %1028, -4
  %1074 = icmp eq i64 %1073, 0
  br i1 %1074, label %1075, label %1026, !llvm.loop !39

1075:                                             ; preds = %1026, %1016
  %1076 = phi i64 [ 0, %1016 ], [ %1072, %1026 ]
  %1077 = icmp eq i64 %1022, 0
  br i1 %1077, label %1094, label %1078

1078:                                             ; preds = %1075, %1078
  %1079 = phi i64 [ %1091, %1078 ], [ %1076, %1075 ]
  %1080 = phi i64 [ %1092, %1078 ], [ %1022, %1075 ]
  %1081 = getelementptr i8, i8* %983, i64 %1079
  %1082 = bitcast i8* %1081 to <16 x i8>*
  %1083 = load <16 x i8>, <16 x i8>* %1082, align 1, !alias.scope !34
  %1084 = getelementptr i8, i8* %1081, i64 16
  %1085 = bitcast i8* %1084 to <16 x i8>*
  %1086 = load <16 x i8>, <16 x i8>* %1085, align 1, !alias.scope !34
  %1087 = getelementptr inbounds i8, i8* %978, i64 %1079
  %1088 = bitcast i8* %1087 to <16 x i8>*
  store <16 x i8> %1083, <16 x i8>* %1088, align 1, !alias.scope !37, !noalias !34
  %1089 = getelementptr inbounds i8, i8* %1087, i64 16
  %1090 = bitcast i8* %1089 to <16 x i8>*
  store <16 x i8> %1086, <16 x i8>* %1090, align 1, !alias.scope !37, !noalias !34
  %1091 = add i64 %1079, 32
  %1092 = add i64 %1080, -1
  %1093 = icmp eq i64 %1092, 0
  br i1 %1093, label %1094, label %1078, !llvm.loop !40

1094:                                             ; preds = %1078, %1075
  %1095 = icmp eq i64 %1017, %984
  br i1 %1095, label %1096, label %986

1096:                                             ; preds = %1003, %1119, %1094
  %1097 = icmp slt i32 %44, 16
  br i1 %1097, label %1098, label %1154

1098:                                             ; preds = %977, %1096
  %1099 = phi i32 [ %45, %1096 ], [ 0, %977 ]
  %1100 = add nsw i32 %45, -1
  %1101 = sext i32 %1100 to i64
  %1102 = getelementptr inbounds i8, i8* %978, i64 %1101
  %1103 = zext i32 %1099 to i64
  %1104 = sub nsw i64 0, %1103
  %1105 = sub nsw i64 7, %1103
  %1106 = and i64 %1104, 3
  %1107 = icmp eq i64 %1106, 0
  br i1 %1107, label %1116, label %1108

1108:                                             ; preds = %1098, %1108
  %1109 = phi i64 [ %1113, %1108 ], [ %1103, %1098 ]
  %1110 = phi i64 [ %1114, %1108 ], [ %1106, %1098 ]
  %1111 = load i8, i8* %1102, align 1
  %1112 = getelementptr inbounds i8, i8* %978, i64 %1109
  store i8 %1111, i8* %1112, align 1
  %1113 = add nuw nsw i64 %1109, 1
  %1114 = add i64 %1110, -1
  %1115 = icmp eq i64 %1114, 0
  br i1 %1115, label %1116, label %1108, !llvm.loop !41

1116:                                             ; preds = %1108, %1098
  %1117 = phi i64 [ %1103, %1098 ], [ %1113, %1108 ]
  %1118 = icmp ult i64 %1105, 3
  br i1 %1118, label %1154, label %1139

1119:                                             ; preds = %1003, %1119
  %1120 = phi i64 [ %1136, %1119 ], [ %1004, %1003 ]
  %1121 = phi i8* [ %1137, %1119 ], [ %1005, %1003 ]
  %1122 = load i8, i8* %1121, align 1
  %1123 = getelementptr inbounds i8, i8* %978, i64 %1120
  store i8 %1122, i8* %1123, align 1
  %1124 = add nuw nsw i64 %1120, 1
  %1125 = getelementptr inbounds i8, i8* %1121, i64 1
  %1126 = load i8, i8* %1125, align 1
  %1127 = getelementptr inbounds i8, i8* %978, i64 %1124
  store i8 %1126, i8* %1127, align 1
  %1128 = add nuw nsw i64 %1120, 2
  %1129 = getelementptr inbounds i8, i8* %1121, i64 2
  %1130 = load i8, i8* %1129, align 1
  %1131 = getelementptr inbounds i8, i8* %978, i64 %1128
  store i8 %1130, i8* %1131, align 1
  %1132 = add nuw nsw i64 %1120, 3
  %1133 = getelementptr inbounds i8, i8* %1121, i64 3
  %1134 = load i8, i8* %1133, align 1
  %1135 = getelementptr inbounds i8, i8* %978, i64 %1132
  store i8 %1134, i8* %1135, align 1
  %1136 = add nuw nsw i64 %1120, 4
  %1137 = getelementptr inbounds i8, i8* %1121, i64 4
  %1138 = icmp eq i64 %1136, %984
  br i1 %1138, label %1096, label %1119, !llvm.loop !42

1139:                                             ; preds = %1116, %1139
  %1140 = phi i64 [ %1152, %1139 ], [ %1117, %1116 ]
  %1141 = load i8, i8* %1102, align 1
  %1142 = getelementptr inbounds i8, i8* %978, i64 %1140
  store i8 %1141, i8* %1142, align 1
  %1143 = add nuw nsw i64 %1140, 1
  %1144 = load i8, i8* %1102, align 1
  %1145 = getelementptr inbounds i8, i8* %978, i64 %1143
  store i8 %1144, i8* %1145, align 1
  %1146 = add nuw nsw i64 %1140, 2
  %1147 = load i8, i8* %1102, align 1
  %1148 = getelementptr inbounds i8, i8* %978, i64 %1146
  store i8 %1147, i8* %1148, align 1
  %1149 = add nuw nsw i64 %1140, 3
  %1150 = load i8, i8* %1102, align 1
  %1151 = getelementptr inbounds i8, i8* %978, i64 %1149
  store i8 %1150, i8* %1151, align 1
  %1152 = add nuw nsw i64 %1140, 4
  %1153 = icmp eq i64 %1152, 8
  br i1 %1153, label %1154, label %1139

1154:                                             ; preds = %1116, %1139, %1096, %625, %294
  ret void

1155:                                             ; preds = %267
  %1156 = getelementptr inbounds i8, i8* %268, i64 %213
  %1157 = getelementptr inbounds i8, i8* %268, i64 %216
  %1158 = load i8, i8* %1157, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1156, i8 %1158, i64 %218, i1 false) #6
  br label %1159

1159:                                             ; preds = %1155, %267
  %1160 = getelementptr inbounds i8, i8* %261, i64 64
  %1161 = getelementptr inbounds i8, i8* %269, i64 %219
  %1162 = add i32 %262, -2
  %1163 = icmp eq i32 %1162, 0
  br i1 %1163, label %224, label %259

1164:                                             ; preds = %180
  %1165 = getelementptr inbounds i8, i8* %181, i64 %124
  %1166 = getelementptr inbounds i8, i8* %181, i64 %127
  %1167 = load i8, i8* %1166, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1165, i8 %1167, i64 %129, i1 false) #6
  br label %1168

1168:                                             ; preds = %1164, %180
  %1169 = getelementptr inbounds i8, i8* %174, i64 64
  %1170 = getelementptr inbounds i8, i8* %182, i64 %130
  %1171 = add i32 %175, -2
  %1172 = icmp eq i32 %1171, 0
  br i1 %1172, label %135, label %172

1173:                                             ; preds = %104
  %1174 = getelementptr inbounds i8, i8* %105, i64 %52
  %1175 = getelementptr inbounds i8, i8* %105, i64 %54
  %1176 = load i8, i8* %1175, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1174, i8 %1176, i64 %56, i1 false) #6
  br label %1177

1177:                                             ; preds = %1173, %104
  %1178 = getelementptr inbounds i8, i8* %98, i64 64
  %1179 = getelementptr inbounds i8, i8* %106, i64 %57
  %1180 = add i32 %99, -2
  %1181 = icmp eq i32 %1180, 0
  br i1 %1181, label %62, label %96
}

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8IteratorExport(%struct.VP8EncIterator* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 6
  %3 = load %struct.VP8Encoder*, %struct.VP8Encoder** %2, align 8
  %4 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %3, i64 0, i32 0
  %5 = load %struct.WebPConfig*, %struct.WebPConfig** %4, align 8
  %6 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %5, i64 0, i32 16
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %93, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 3
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 16
  %17 = getelementptr inbounds i8, i8* %15, i64 24
  %18 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %3, i64 0, i32 1
  %19 = load %struct.WebPPicture*, %struct.WebPPicture** %18, align 8
  %20 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %19, i64 0, i32 7
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %19, i64 0, i32 5
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %19, i64 0, i32 8
  %25 = load i32, i32* %24, align 4
  %26 = mul nsw i32 %25, %13
  %27 = add nsw i32 %26, %11
  %28 = shl nsw i32 %27, 3
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %23, i64 %29
  %31 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %19, i64 0, i32 6
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 %29
  %34 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %19, i64 0, i32 2
  %35 = load i32, i32* %34, align 8
  %36 = shl nsw i32 %11, 4
  %37 = sub nsw i32 %35, %36
  %38 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %19, i64 0, i32 3
  %39 = load i32, i32* %38, align 4
  %40 = shl nsw i32 %13, 4
  %41 = sub nsw i32 %39, %40
  %42 = icmp slt i32 %37, 16
  %43 = select i1 %42, i32 %37, i32 16
  %44 = icmp slt i32 %41, 16
  %45 = select i1 %44, i32 %41, i32 16
  %46 = icmp sgt i32 %41, 0
  br i1 %46, label %47, label %93

47:                                               ; preds = %9
  %48 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %19, i64 0, i32 4
  %49 = load i8*, i8** %48, align 8
  %50 = mul nsw i32 %21, %13
  %51 = add nsw i32 %50, %11
  %52 = shl nsw i32 %51, 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %49, i64 %53
  %55 = sext i32 %43 to i64
  %56 = sext i32 %21 to i64
  br label %57

57:                                               ; preds = %57, %47
  %58 = phi i32 [ %45, %47 ], [ %61, %57 ]
  %59 = phi i8* [ %15, %47 ], [ %63, %57 ]
  %60 = phi i8* [ %54, %47 ], [ %62, %57 ]
  %61 = add nsw i32 %58, -1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %60, i8* align 1 %59, i64 %55, i1 false) #6
  %62 = getelementptr inbounds i8, i8* %60, i64 %56
  %63 = getelementptr inbounds i8, i8* %59, i64 32
  %64 = icmp sgt i32 %61, 0
  br i1 %64, label %57, label %65

65:                                               ; preds = %57
  %66 = add nsw i32 %45, 1
  %67 = ashr i32 %66, 1
  br i1 %46, label %68, label %93

68:                                               ; preds = %65
  %69 = add nsw i32 %43, 1
  %70 = ashr i32 %69, 1
  %71 = load i32, i32* %24, align 4
  %72 = sext i32 %70 to i64
  %73 = sext i32 %71 to i64
  br label %74

74:                                               ; preds = %74, %68
  %75 = phi i32 [ %67, %68 ], [ %78, %74 ]
  %76 = phi i8* [ %16, %68 ], [ %80, %74 ]
  %77 = phi i8* [ %30, %68 ], [ %79, %74 ]
  %78 = add nsw i32 %75, -1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %77, i8* align 1 %76, i64 %72, i1 false) #6
  %79 = getelementptr inbounds i8, i8* %77, i64 %73
  %80 = getelementptr inbounds i8, i8* %76, i64 32
  %81 = icmp sgt i32 %78, 0
  br i1 %81, label %74, label %82

82:                                               ; preds = %74
  %83 = load i32, i32* %24, align 4
  %84 = sext i32 %83 to i64
  br label %85

85:                                               ; preds = %85, %82
  %86 = phi i32 [ %67, %82 ], [ %89, %85 ]
  %87 = phi i8* [ %17, %82 ], [ %91, %85 ]
  %88 = phi i8* [ %33, %82 ], [ %90, %85 ]
  %89 = add nsw i32 %86, -1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %88, i8* align 1 %87, i64 %72, i1 false) #6
  %90 = getelementptr inbounds i8, i8* %88, i64 %84
  %91 = getelementptr inbounds i8, i8* %87, i64 32
  %92 = icmp sgt i32 %89, 0
  br i1 %92, label %85, label %93

93:                                               ; preds = %85, %9, %65, %1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @VP8IteratorNzToBytes(%struct.VP8EncIterator* nocapture) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 10
  %3 = load i32*, i32** %2, align 8
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds i32, i32* %3, i64 -1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 0
  %8 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 15, i64 0
  %9 = lshr i32 %4, 12
  %10 = and i32 %9, 1
  store i32 %10, i32* %7, align 4
  %11 = lshr i32 %4, 13
  %12 = and i32 %11, 1
  %13 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 1
  store i32 %12, i32* %13, align 4
  %14 = lshr i32 %4, 14
  %15 = and i32 %14, 1
  %16 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 2
  store i32 %15, i32* %16, align 4
  %17 = lshr i32 %4, 15
  %18 = and i32 %17, 1
  %19 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 3
  store i32 %18, i32* %19, align 4
  %20 = lshr i32 %4, 18
  %21 = and i32 %20, 1
  %22 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 4
  store i32 %21, i32* %22, align 4
  %23 = lshr i32 %4, 19
  %24 = and i32 %23, 1
  %25 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 5
  store i32 %24, i32* %25, align 4
  %26 = lshr i32 %4, 22
  %27 = and i32 %26, 1
  %28 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 6
  store i32 %27, i32* %28, align 4
  %29 = lshr i32 %4, 23
  %30 = and i32 %29, 1
  %31 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 7
  store i32 %30, i32* %31, align 4
  %32 = lshr i32 %4, 24
  %33 = and i32 %32, 1
  %34 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 8
  store i32 %33, i32* %34, align 4
  %35 = lshr i32 %6, 3
  %36 = and i32 %35, 1
  store i32 %36, i32* %8, align 4
  %37 = lshr i32 %6, 7
  %38 = and i32 %37, 1
  %39 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 15, i64 1
  store i32 %38, i32* %39, align 4
  %40 = lshr i32 %6, 11
  %41 = and i32 %40, 1
  %42 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 15, i64 2
  store i32 %41, i32* %42, align 4
  %43 = lshr i32 %6, 15
  %44 = and i32 %43, 1
  %45 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 15, i64 3
  store i32 %44, i32* %45, align 4
  %46 = lshr i32 %6, 17
  %47 = and i32 %46, 1
  %48 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 15, i64 4
  store i32 %47, i32* %48, align 4
  %49 = lshr i32 %6, 19
  %50 = and i32 %49, 1
  %51 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 15, i64 5
  store i32 %50, i32* %51, align 4
  %52 = lshr i32 %6, 21
  %53 = and i32 %52, 1
  %54 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 15, i64 6
  store i32 %53, i32* %54, align 4
  %55 = lshr i32 %6, 23
  %56 = and i32 %55, 1
  %57 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 15, i64 7
  store i32 %56, i32* %57, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @VP8IteratorBytesToNz(%struct.VP8EncIterator* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 0
  %3 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 15, i64 0
  %4 = load i32, i32* %2, align 4
  %5 = shl i32 %4, 12
  %6 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = shl i32 %7, 13
  %9 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = shl i32 %10, 14
  %12 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = shl i32 %13, 15
  %15 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = shl i32 %16, 18
  %18 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 5
  %19 = load i32, i32* %18, align 4
  %20 = shl i32 %19, 19
  %21 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 6
  %22 = load i32, i32* %21, align 4
  %23 = shl i32 %22, 22
  %24 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 7
  %25 = load i32, i32* %24, align 4
  %26 = shl i32 %25, 23
  %27 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 8
  %28 = load i32, i32* %27, align 4
  %29 = shl i32 %28, 24
  %30 = load i32, i32* %3, align 4
  %31 = shl i32 %30, 3
  %32 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 15, i64 1
  %33 = load i32, i32* %32, align 4
  %34 = shl i32 %33, 7
  %35 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 15, i64 2
  %36 = load i32, i32* %35, align 4
  %37 = shl i32 %36, 11
  %38 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 15, i64 4
  %39 = load i32, i32* %38, align 4
  %40 = shl i32 %39, 17
  %41 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 15, i64 6
  %42 = load i32, i32* %41, align 4
  %43 = shl i32 %42, 21
  %44 = or i32 %8, %5
  %45 = or i32 %44, %11
  %46 = or i32 %45, %14
  %47 = or i32 %46, %17
  %48 = or i32 %47, %20
  %49 = or i32 %48, %23
  %50 = or i32 %49, %26
  %51 = or i32 %50, %29
  %52 = or i32 %51, %31
  %53 = or i32 %52, %34
  %54 = or i32 %53, %37
  %55 = or i32 %54, %40
  %56 = or i32 %55, %43
  %57 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 10
  %58 = load i32*, i32** %57, align 8
  store i32 %56, i32* %58, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8IteratorSaveBoundary(%struct.VP8EncIterator* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 6
  %3 = load %struct.VP8Encoder*, %struct.VP8Encoder** %2, align 8
  %4 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 3
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %3, i64 0, i32 5
  %11 = load i32, i32* %10, align 8
  %12 = add nsw i32 %11, -1
  %13 = icmp slt i32 %5, %12
  br i1 %13, label %14, label %160

14:                                               ; preds = %1
  %15 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 26
  %16 = getelementptr inbounds i8, i8* %9, i64 15
  %17 = load i8, i8* %16, align 1
  %18 = load i8*, i8** %15, align 8
  store i8 %17, i8* %18, align 1
  %19 = getelementptr inbounds i8, i8* %9, i64 47
  %20 = load i8, i8* %19, align 1
  %21 = load i8*, i8** %15, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8 %20, i8* %22, align 1
  %23 = getelementptr inbounds i8, i8* %9, i64 79
  %24 = load i8, i8* %23, align 1
  %25 = load i8*, i8** %15, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 2
  store i8 %24, i8* %26, align 1
  %27 = getelementptr inbounds i8, i8* %9, i64 111
  %28 = load i8, i8* %27, align 1
  %29 = load i8*, i8** %15, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 3
  store i8 %28, i8* %30, align 1
  %31 = getelementptr inbounds i8, i8* %9, i64 143
  %32 = load i8, i8* %31, align 1
  %33 = load i8*, i8** %15, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 4
  store i8 %32, i8* %34, align 1
  %35 = getelementptr inbounds i8, i8* %9, i64 175
  %36 = load i8, i8* %35, align 1
  %37 = load i8*, i8** %15, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 5
  store i8 %36, i8* %38, align 1
  %39 = getelementptr inbounds i8, i8* %9, i64 207
  %40 = load i8, i8* %39, align 1
  %41 = load i8*, i8** %15, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 6
  store i8 %40, i8* %42, align 1
  %43 = getelementptr inbounds i8, i8* %9, i64 239
  %44 = load i8, i8* %43, align 1
  %45 = load i8*, i8** %15, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 7
  store i8 %44, i8* %46, align 1
  %47 = getelementptr inbounds i8, i8* %9, i64 271
  %48 = load i8, i8* %47, align 1
  %49 = load i8*, i8** %15, align 8
  %50 = getelementptr inbounds i8, i8* %49, i64 8
  store i8 %48, i8* %50, align 1
  %51 = getelementptr inbounds i8, i8* %9, i64 303
  %52 = load i8, i8* %51, align 1
  %53 = load i8*, i8** %15, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 9
  store i8 %52, i8* %54, align 1
  %55 = getelementptr inbounds i8, i8* %9, i64 335
  %56 = load i8, i8* %55, align 1
  %57 = load i8*, i8** %15, align 8
  %58 = getelementptr inbounds i8, i8* %57, i64 10
  store i8 %56, i8* %58, align 1
  %59 = getelementptr inbounds i8, i8* %9, i64 367
  %60 = load i8, i8* %59, align 1
  %61 = load i8*, i8** %15, align 8
  %62 = getelementptr inbounds i8, i8* %61, i64 11
  store i8 %60, i8* %62, align 1
  %63 = getelementptr inbounds i8, i8* %9, i64 399
  %64 = load i8, i8* %63, align 1
  %65 = load i8*, i8** %15, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 12
  store i8 %64, i8* %66, align 1
  %67 = getelementptr inbounds i8, i8* %9, i64 431
  %68 = load i8, i8* %67, align 1
  %69 = load i8*, i8** %15, align 8
  %70 = getelementptr inbounds i8, i8* %69, i64 13
  store i8 %68, i8* %70, align 1
  %71 = getelementptr inbounds i8, i8* %9, i64 463
  %72 = load i8, i8* %71, align 1
  %73 = load i8*, i8** %15, align 8
  %74 = getelementptr inbounds i8, i8* %73, i64 14
  store i8 %72, i8* %74, align 1
  %75 = getelementptr inbounds i8, i8* %9, i64 495
  %76 = load i8, i8* %75, align 1
  %77 = load i8*, i8** %15, align 8
  %78 = getelementptr inbounds i8, i8* %77, i64 15
  store i8 %76, i8* %78, align 1
  %79 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 27
  %80 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 28
  %81 = getelementptr inbounds i8, i8* %9, i64 23
  %82 = load i8, i8* %81, align 1
  %83 = load i8*, i8** %79, align 8
  store i8 %82, i8* %83, align 1
  %84 = getelementptr inbounds i8, i8* %9, i64 31
  %85 = load i8, i8* %84, align 1
  %86 = load i8*, i8** %80, align 8
  store i8 %85, i8* %86, align 1
  %87 = getelementptr inbounds i8, i8* %9, i64 55
  %88 = load i8, i8* %87, align 1
  %89 = load i8*, i8** %79, align 8
  %90 = getelementptr inbounds i8, i8* %89, i64 1
  store i8 %88, i8* %90, align 1
  %91 = getelementptr inbounds i8, i8* %9, i64 63
  %92 = load i8, i8* %91, align 1
  %93 = load i8*, i8** %80, align 8
  %94 = getelementptr inbounds i8, i8* %93, i64 1
  store i8 %92, i8* %94, align 1
  %95 = getelementptr inbounds i8, i8* %9, i64 87
  %96 = load i8, i8* %95, align 1
  %97 = load i8*, i8** %79, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 2
  store i8 %96, i8* %98, align 1
  %99 = getelementptr inbounds i8, i8* %9, i64 95
  %100 = load i8, i8* %99, align 1
  %101 = load i8*, i8** %80, align 8
  %102 = getelementptr inbounds i8, i8* %101, i64 2
  store i8 %100, i8* %102, align 1
  %103 = getelementptr inbounds i8, i8* %9, i64 119
  %104 = load i8, i8* %103, align 1
  %105 = load i8*, i8** %79, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 3
  store i8 %104, i8* %106, align 1
  %107 = getelementptr inbounds i8, i8* %9, i64 127
  %108 = load i8, i8* %107, align 1
  %109 = load i8*, i8** %80, align 8
  %110 = getelementptr inbounds i8, i8* %109, i64 3
  store i8 %108, i8* %110, align 1
  %111 = getelementptr inbounds i8, i8* %9, i64 151
  %112 = load i8, i8* %111, align 1
  %113 = load i8*, i8** %79, align 8
  %114 = getelementptr inbounds i8, i8* %113, i64 4
  store i8 %112, i8* %114, align 1
  %115 = getelementptr inbounds i8, i8* %9, i64 159
  %116 = load i8, i8* %115, align 1
  %117 = load i8*, i8** %80, align 8
  %118 = getelementptr inbounds i8, i8* %117, i64 4
  store i8 %116, i8* %118, align 1
  %119 = getelementptr inbounds i8, i8* %9, i64 183
  %120 = load i8, i8* %119, align 1
  %121 = load i8*, i8** %79, align 8
  %122 = getelementptr inbounds i8, i8* %121, i64 5
  store i8 %120, i8* %122, align 1
  %123 = getelementptr inbounds i8, i8* %9, i64 191
  %124 = load i8, i8* %123, align 1
  %125 = load i8*, i8** %80, align 8
  %126 = getelementptr inbounds i8, i8* %125, i64 5
  store i8 %124, i8* %126, align 1
  %127 = getelementptr inbounds i8, i8* %9, i64 215
  %128 = load i8, i8* %127, align 1
  %129 = load i8*, i8** %79, align 8
  %130 = getelementptr inbounds i8, i8* %129, i64 6
  store i8 %128, i8* %130, align 1
  %131 = getelementptr inbounds i8, i8* %9, i64 223
  %132 = load i8, i8* %131, align 1
  %133 = load i8*, i8** %80, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 6
  store i8 %132, i8* %134, align 1
  %135 = getelementptr inbounds i8, i8* %9, i64 247
  %136 = load i8, i8* %135, align 1
  %137 = load i8*, i8** %79, align 8
  %138 = getelementptr inbounds i8, i8* %137, i64 7
  store i8 %136, i8* %138, align 1
  %139 = getelementptr inbounds i8, i8* %9, i64 255
  %140 = load i8, i8* %139, align 1
  %141 = load i8*, i8** %80, align 8
  %142 = getelementptr inbounds i8, i8* %141, i64 7
  store i8 %140, i8* %142, align 1
  %143 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 29
  %144 = load i8*, i8** %143, align 8
  %145 = getelementptr inbounds i8, i8* %144, i64 15
  %146 = load i8, i8* %145, align 1
  %147 = load i8*, i8** %15, align 8
  %148 = getelementptr inbounds i8, i8* %147, i64 -1
  store i8 %146, i8* %148, align 1
  %149 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 30
  %150 = load i8*, i8** %149, align 8
  %151 = getelementptr inbounds i8, i8* %150, i64 7
  %152 = load i8, i8* %151, align 1
  %153 = load i8*, i8** %79, align 8
  %154 = getelementptr inbounds i8, i8* %153, i64 -1
  store i8 %152, i8* %154, align 1
  %155 = load i8*, i8** %149, align 8
  %156 = getelementptr inbounds i8, i8* %155, i64 15
  %157 = load i8, i8* %156, align 1
  %158 = load i8*, i8** %80, align 8
  %159 = getelementptr inbounds i8, i8* %158, i64 -1
  store i8 %157, i8* %159, align 1
  br label %160

160:                                              ; preds = %14, %1
  %161 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %3, i64 0, i32 6
  %162 = load i32, i32* %161, align 4
  %163 = add nsw i32 %162, -1
  %164 = icmp slt i32 %7, %163
  br i1 %164, label %165, label %172

165:                                              ; preds = %160
  %166 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 29
  %167 = load i8*, i8** %166, align 8
  %168 = getelementptr inbounds i8, i8* %9, i64 480
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %167, i8* align 1 %168, i64 16, i1 false)
  %169 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 30
  %170 = load i8*, i8** %169, align 8
  %171 = getelementptr inbounds i8, i8* %9, i64 240
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %170, i8* align 1 %171, i64 16, i1 false)
  br label %172

172:                                              ; preds = %165, %160
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8IteratorNext(%struct.VP8EncIterator*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = add nsw i32 %3, 1
  store i32 %4, i32* %2, align 8
  %5 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 6
  %6 = load %struct.VP8Encoder*, %struct.VP8Encoder** %5, align 8
  %7 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %6, i64 0, i32 5
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %4, %8
  br i1 %9, label %10, label %75

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = add nsw i32 %12, 1
  store i32 0, i32* %2, align 8
  store i32 %13, i32* %11, align 4
  %14 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %6, i64 0, i32 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %15, -1
  %17 = and i32 %16, %13
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %6, i64 0, i32 10, i64 %18
  %20 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 8
  store %struct.VP8BitWriter* %19, %struct.VP8BitWriter** %20, align 8
  %21 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %6, i64 0, i32 40
  %22 = load i8*, i8** %21, align 8
  %23 = shl i32 %13, 2
  %24 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %6, i64 0, i32 7
  %25 = load i32, i32* %24, align 8
  %26 = mul nsw i32 %23, %25
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %22, i64 %27
  %29 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 9
  store i8* %28, i8** %29, align 8
  %30 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %6, i64 0, i32 41
  %31 = bitcast i32** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 10
  %34 = bitcast i32** %33 to i64*
  store i64 %32, i64* %34, align 8
  %35 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %6, i64 0, i32 39
  %36 = load %struct.VP8MBInfo*, %struct.VP8MBInfo** %35, align 8
  %37 = load i32, i32* %7, align 8
  %38 = mul nsw i32 %37, %13
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %36, i64 %39
  %41 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 7
  store %struct.VP8MBInfo* %40, %struct.VP8MBInfo** %41, align 8
  %42 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %6, i64 0, i32 42
  %43 = bitcast i8** %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 29
  %46 = bitcast i8** %45 to i64*
  store i64 %44, i64* %46, align 8
  %47 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %6, i64 0, i32 43
  %48 = bitcast i8** %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 30
  %51 = bitcast i8** %50 to i64*
  store i64 %49, i64* %51, align 8
  %52 = icmp sgt i32 %12, -1
  %53 = select i1 %52, i8 -127, i8 127
  %54 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 28
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds i8, i8* %55, i64 -1
  store i8 %53, i8* %56, align 1
  %57 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 27
  %58 = load i8*, i8** %57, align 8
  %59 = getelementptr inbounds i8, i8* %58, i64 -1
  store i8 %53, i8* %59, align 1
  %60 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 26
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds i8, i8* %61, i64 -1
  store i8 %53, i8* %62, align 1
  %63 = load i8*, i8** %60, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %63, i8 -127, i64 16, i1 false) #6
  %64 = bitcast i8** %57 to i64**
  %65 = load i64*, i64** %64, align 8
  store i64 -9114861777597660799, i64* %65, align 1
  %66 = bitcast i8** %54 to i64**
  %67 = load i64*, i64** %66, align 8
  store i64 -9114861777597660799, i64* %67, align 1
  %68 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 15, i64 8
  store i32 0, i32* %68, align 8
  %69 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 25
  %70 = load [2 x [2 x i8]]*, [2 x [2 x i8]]** %69, align 8
  %71 = icmp eq [2 x [2 x i8]]* %70, null
  br i1 %71, label %90, label %72

72:                                               ; preds = %10
  %73 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 24, i64 0, i64 0
  %74 = bitcast i8* %73 to i32*
  store i32 0, i32* %74, align 8
  br label %90

75:                                               ; preds = %1
  %76 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 9
  %77 = load i8*, i8** %76, align 8
  %78 = getelementptr inbounds i8, i8* %77, i64 4
  store i8* %78, i8** %76, align 8
  %79 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 7
  %80 = load %struct.VP8MBInfo*, %struct.VP8MBInfo** %79, align 8
  %81 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %80, i64 1
  store %struct.VP8MBInfo* %81, %struct.VP8MBInfo** %79, align 8
  %82 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 10
  %83 = load i32*, i32** %82, align 8
  %84 = getelementptr inbounds i32, i32* %83, i64 1
  store i32* %84, i32** %82, align 8
  %85 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 29
  %86 = bitcast i8** %85 to <2 x i8*>*
  %87 = load <2 x i8*>, <2 x i8*>* %86, align 8
  %88 = getelementptr i8, <2 x i8*> %87, <2 x i64> <i64 16, i64 16>
  %89 = bitcast i8** %85 to <2 x i8*>*
  store <2 x i8*> %88, <2 x i8*>* %89, align 8
  br label %90

90:                                               ; preds = %72, %10, %75
  %91 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 21
  %92 = load i32, i32* %91, align 4
  %93 = add nsw i32 %92, -1
  store i32 %93, i32* %91, align 4
  %94 = icmp sgt i32 %93, 0
  %95 = zext i1 %94 to i32
  ret i32 %95
}

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8SetIntra16Mode(%struct.VP8EncIterator* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 9
  %4 = load i8*, i8** %3, align 8
  %5 = trunc i32 %1 to i8
  %6 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 6
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 %5, i64 4, i1 false)
  %7 = load %struct.VP8Encoder*, %struct.VP8Encoder** %6, align 8
  %8 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %7, i64 0, i32 7
  %9 = load i32, i32* %8, align 8
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i8, i8* %4, i64 %10
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %11, i8 %5, i64 4, i1 false)
  %12 = load %struct.VP8Encoder*, %struct.VP8Encoder** %6, align 8
  %13 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %12, i64 0, i32 7
  %14 = load i32, i32* %13, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i8, i8* %11, i64 %15
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %16, i8 %5, i64 4, i1 false)
  %17 = load %struct.VP8Encoder*, %struct.VP8Encoder** %6, align 8
  %18 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %17, i64 0, i32 7
  %19 = load i32, i32* %18, align 8
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %16, i64 %20
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %5, i64 4, i1 false)
  %22 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 7
  %23 = bitcast %struct.VP8MBInfo** %22 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = load i8, i8* %24, align 4
  %26 = and i8 %25, -4
  %27 = or i8 %26, 1
  store i8 %27, i8* %24, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @VP8SetIntra4Mode(%struct.VP8EncIterator* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 9
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 6
  %6 = bitcast i8* %1 to i32*
  %7 = bitcast i8* %4 to i32*
  %8 = load i32, i32* %6, align 1
  store i32 %8, i32* %7, align 1
  %9 = load %struct.VP8Encoder*, %struct.VP8Encoder** %5, align 8
  %10 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %9, i64 0, i32 7
  %11 = load i32, i32* %10, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i8, i8* %4, i64 %12
  %14 = getelementptr inbounds i8, i8* %1, i64 4
  %15 = bitcast i8* %14 to i32*
  %16 = bitcast i8* %13 to i32*
  %17 = load i32, i32* %15, align 1
  store i32 %17, i32* %16, align 1
  %18 = load %struct.VP8Encoder*, %struct.VP8Encoder** %5, align 8
  %19 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %18, i64 0, i32 7
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %13, i64 %21
  %23 = getelementptr inbounds i8, i8* %1, i64 8
  %24 = bitcast i8* %23 to i32*
  %25 = bitcast i8* %22 to i32*
  %26 = load i32, i32* %24, align 1
  store i32 %26, i32* %25, align 1
  %27 = load %struct.VP8Encoder*, %struct.VP8Encoder** %5, align 8
  %28 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %27, i64 0, i32 7
  %29 = load i32, i32* %28, align 8
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i8, i8* %22, i64 %30
  %32 = getelementptr inbounds i8, i8* %1, i64 12
  %33 = bitcast i8* %32 to i32*
  %34 = bitcast i8* %31 to i32*
  %35 = load i32, i32* %33, align 1
  store i32 %35, i32* %34, align 1
  %36 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 7
  %37 = bitcast %struct.VP8MBInfo** %36 to i8**
  %38 = load i8*, i8** %37, align 8
  %39 = load i8, i8* %38, align 4
  %40 = and i8 %39, -4
  store i8 %40, i8* %38, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @VP8SetIntraUVMode(%struct.VP8EncIterator* nocapture readonly, i32) local_unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 7
  %4 = bitcast %struct.VP8MBInfo** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  %6 = trunc i32 %1 to i8
  %7 = load i8, i8* %5, align 4
  %8 = shl i8 %6, 2
  %9 = and i8 %8, 12
  %10 = and i8 %7, -13
  %11 = or i8 %10, %9
  store i8 %11, i8* %5, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @VP8SetSkip(%struct.VP8EncIterator* nocapture readonly, i32) local_unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 7
  %4 = bitcast %struct.VP8MBInfo** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  %6 = trunc i32 %1 to i8
  %7 = load i8, i8* %5, align 4
  %8 = shl i8 %6, 4
  %9 = and i8 %8, 16
  %10 = and i8 %7, -17
  %11 = or i8 %10, %9
  store i8 %11, i8* %5, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @VP8SetSegment(%struct.VP8EncIterator* nocapture readonly, i32) local_unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 7
  %4 = bitcast %struct.VP8MBInfo** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  %6 = trunc i32 %1 to i8
  %7 = load i8, i8* %5, align 4
  %8 = shl i8 %6, 5
  %9 = and i8 %8, 96
  %10 = and i8 %7, -97
  %11 = or i8 %10, %9
  store i8 %11, i8* %5, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @VP8IteratorStartI4(%struct.VP8EncIterator*) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 6
  %3 = load %struct.VP8Encoder*, %struct.VP8Encoder** %2, align 8
  %4 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 13
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 17
  %6 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 12
  store i8* %5, i8** %6, align 8
  %7 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 26
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 15
  %10 = load i8, i8* %9, align 1
  %11 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 0
  store i8 %10, i8* %11, align 1
  %12 = getelementptr inbounds i8, i8* %8, i64 14
  %13 = load i8, i8* %12, align 1
  %14 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 1
  store i8 %13, i8* %14, align 1
  %15 = getelementptr inbounds i8, i8* %8, i64 13
  %16 = load i8, i8* %15, align 1
  %17 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 2
  store i8 %16, i8* %17, align 1
  %18 = getelementptr inbounds i8, i8* %8, i64 12
  %19 = load i8, i8* %18, align 1
  %20 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 3
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds i8, i8* %8, i64 11
  %22 = load i8, i8* %21, align 1
  %23 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 4
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds i8, i8* %8, i64 10
  %25 = load i8, i8* %24, align 1
  %26 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 5
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds i8, i8* %8, i64 9
  %28 = load i8, i8* %27, align 1
  %29 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 6
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds i8, i8* %8, i64 8
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 7
  store i8 %31, i8* %32, align 1
  %33 = getelementptr inbounds i8, i8* %8, i64 7
  %34 = load i8, i8* %33, align 1
  %35 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 8
  store i8 %34, i8* %35, align 1
  %36 = getelementptr inbounds i8, i8* %8, i64 6
  %37 = load i8, i8* %36, align 1
  %38 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 9
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds i8, i8* %8, i64 5
  %40 = load i8, i8* %39, align 1
  %41 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 10
  store i8 %40, i8* %41, align 1
  %42 = getelementptr inbounds i8, i8* %8, i64 4
  %43 = load i8, i8* %42, align 1
  %44 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 11
  store i8 %43, i8* %44, align 1
  %45 = getelementptr inbounds i8, i8* %8, i64 3
  %46 = load i8, i8* %45, align 1
  %47 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 12
  store i8 %46, i8* %47, align 1
  %48 = getelementptr inbounds i8, i8* %8, i64 2
  %49 = load i8, i8* %48, align 1
  %50 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 13
  store i8 %49, i8* %50, align 1
  %51 = getelementptr inbounds i8, i8* %8, i64 1
  %52 = load i8, i8* %51, align 1
  %53 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 14
  store i8 %52, i8* %53, align 1
  %54 = load i8, i8* %8, align 1
  %55 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 15
  store i8 %54, i8* %55, align 1
  %56 = getelementptr inbounds i8, i8* %8, i64 -1
  %57 = load i8, i8* %56, align 1
  %58 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 16
  store i8 %57, i8* %58, align 1
  %59 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 29
  %60 = load i8*, i8** %59, align 8
  %61 = load i8, i8* %60, align 1
  store i8 %61, i8* %5, align 1
  %62 = getelementptr inbounds i8, i8* %60, i64 1
  %63 = load i8, i8* %62, align 1
  %64 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 18
  store i8 %63, i8* %64, align 1
  %65 = getelementptr inbounds i8, i8* %60, i64 2
  %66 = load i8, i8* %65, align 1
  %67 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 19
  store i8 %66, i8* %67, align 1
  %68 = getelementptr inbounds i8, i8* %60, i64 3
  %69 = load i8, i8* %68, align 1
  %70 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 20
  store i8 %69, i8* %70, align 1
  %71 = getelementptr inbounds i8, i8* %60, i64 4
  %72 = load i8, i8* %71, align 1
  %73 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 21
  store i8 %72, i8* %73, align 1
  %74 = getelementptr inbounds i8, i8* %60, i64 5
  %75 = load i8, i8* %74, align 1
  %76 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 22
  store i8 %75, i8* %76, align 1
  %77 = getelementptr inbounds i8, i8* %60, i64 6
  %78 = load i8, i8* %77, align 1
  %79 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 23
  store i8 %78, i8* %79, align 1
  %80 = getelementptr inbounds i8, i8* %60, i64 7
  %81 = load i8, i8* %80, align 1
  %82 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 24
  store i8 %81, i8* %82, align 1
  %83 = getelementptr inbounds i8, i8* %60, i64 8
  %84 = load i8, i8* %83, align 1
  %85 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 25
  store i8 %84, i8* %85, align 1
  %86 = getelementptr inbounds i8, i8* %60, i64 9
  %87 = load i8, i8* %86, align 1
  %88 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 26
  store i8 %87, i8* %88, align 1
  %89 = getelementptr inbounds i8, i8* %60, i64 10
  %90 = load i8, i8* %89, align 1
  %91 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 27
  store i8 %90, i8* %91, align 1
  %92 = getelementptr inbounds i8, i8* %60, i64 11
  %93 = load i8, i8* %92, align 1
  %94 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 28
  store i8 %93, i8* %94, align 1
  %95 = getelementptr inbounds i8, i8* %60, i64 12
  %96 = load i8, i8* %95, align 1
  %97 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 29
  store i8 %96, i8* %97, align 1
  %98 = getelementptr inbounds i8, i8* %60, i64 13
  %99 = load i8, i8* %98, align 1
  %100 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 30
  store i8 %99, i8* %100, align 1
  %101 = getelementptr inbounds i8, i8* %60, i64 14
  %102 = load i8, i8* %101, align 1
  %103 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 31
  store i8 %102, i8* %103, align 1
  %104 = getelementptr inbounds i8, i8* %60, i64 15
  %105 = load i8, i8* %104, align 1
  %106 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 32
  store i8 %105, i8* %106, align 1
  %107 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 0
  %108 = load i32, i32* %107, align 8
  %109 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %3, i64 0, i32 5
  %110 = load i32, i32* %109, align 8
  %111 = add nsw i32 %110, -1
  %112 = icmp slt i32 %108, %111
  br i1 %112, label %115, label %113

113:                                              ; preds = %1
  %114 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 33
  call void @llvm.memset.p0i8.i64(i8* align 1 %114, i8 %105, i64 4, i1 false)
  br label %128

115:                                              ; preds = %1
  %116 = getelementptr inbounds i8, i8* %60, i64 16
  %117 = load i8, i8* %116, align 1
  %118 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 33
  store i8 %117, i8* %118, align 1
  %119 = getelementptr inbounds i8, i8* %60, i64 17
  %120 = load i8, i8* %119, align 1
  %121 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 34
  store i8 %120, i8* %121, align 1
  %122 = getelementptr inbounds i8, i8* %60, i64 18
  %123 = load i8, i8* %122, align 1
  %124 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 35
  store i8 %123, i8* %124, align 1
  %125 = getelementptr inbounds i8, i8* %60, i64 19
  %126 = load i8, i8* %125, align 1
  %127 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 36
  store i8 %126, i8* %127, align 1
  br label %128

128:                                              ; preds = %113, %115
  %129 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 10
  %130 = load i32*, i32** %129, align 8
  %131 = load i32, i32* %130, align 4
  %132 = getelementptr inbounds i32, i32* %130, i64 -1
  %133 = load i32, i32* %132, align 4
  %134 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 0
  %135 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 15, i64 0
  %136 = lshr i32 %131, 12
  %137 = and i32 %136, 1
  store i32 %137, i32* %134, align 4
  %138 = lshr i32 %131, 13
  %139 = and i32 %138, 1
  %140 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 1
  store i32 %139, i32* %140, align 4
  %141 = lshr i32 %131, 14
  %142 = and i32 %141, 1
  %143 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 2
  store i32 %142, i32* %143, align 4
  %144 = lshr i32 %131, 15
  %145 = and i32 %144, 1
  %146 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 3
  store i32 %145, i32* %146, align 4
  %147 = lshr i32 %131, 18
  %148 = and i32 %147, 1
  %149 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 4
  store i32 %148, i32* %149, align 4
  %150 = lshr i32 %131, 19
  %151 = and i32 %150, 1
  %152 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 5
  store i32 %151, i32* %152, align 4
  %153 = lshr i32 %131, 22
  %154 = and i32 %153, 1
  %155 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 6
  store i32 %154, i32* %155, align 4
  %156 = lshr i32 %131, 23
  %157 = and i32 %156, 1
  %158 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 7
  store i32 %157, i32* %158, align 4
  %159 = lshr i32 %131, 24
  %160 = and i32 %159, 1
  %161 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 14, i64 8
  store i32 %160, i32* %161, align 4
  %162 = lshr i32 %133, 3
  %163 = and i32 %162, 1
  store i32 %163, i32* %135, align 4
  %164 = lshr i32 %133, 7
  %165 = and i32 %164, 1
  %166 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 15, i64 1
  store i32 %165, i32* %166, align 4
  %167 = lshr i32 %133, 11
  %168 = and i32 %167, 1
  %169 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 15, i64 2
  store i32 %168, i32* %169, align 4
  %170 = lshr i32 %133, 15
  %171 = and i32 %170, 1
  %172 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 15, i64 3
  store i32 %171, i32* %172, align 4
  %173 = lshr i32 %133, 17
  %174 = and i32 %173, 1
  %175 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 15, i64 4
  store i32 %174, i32* %175, align 4
  %176 = lshr i32 %133, 19
  %177 = and i32 %176, 1
  %178 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 15, i64 5
  store i32 %177, i32* %178, align 4
  %179 = lshr i32 %133, 21
  %180 = and i32 %179, 1
  %181 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 15, i64 6
  store i32 %180, i32* %181, align 4
  %182 = lshr i32 %133, 23
  %183 = and i32 %182, 1
  %184 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 15, i64 7
  store i32 %183, i32* %184, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @VP8IteratorRotateI4(%struct.VP8EncIterator*, i8* nocapture readonly) local_unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 13
  %4 = load i32, i32* %3, align 8
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds [16 x i16], [16 x i16]* @VP8Scan, i64 0, i64 %5
  %7 = load i16, i16* %6, align 2
  %8 = zext i16 %7 to i64
  %9 = getelementptr inbounds i8, i8* %1, i64 %8
  %10 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 12
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %9, i64 96
  %13 = load i8, i8* %12, align 1
  %14 = getelementptr inbounds i8, i8* %11, i64 -4
  store i8 %13, i8* %14, align 1
  %15 = getelementptr inbounds i8, i8* %9, i64 97
  %16 = load i8, i8* %15, align 1
  %17 = getelementptr inbounds i8, i8* %11, i64 -3
  store i8 %16, i8* %17, align 1
  %18 = getelementptr inbounds i8, i8* %9, i64 98
  %19 = load i8, i8* %18, align 1
  %20 = getelementptr inbounds i8, i8* %11, i64 -2
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds i8, i8* %9, i64 99
  %22 = load i8, i8* %21, align 1
  %23 = getelementptr inbounds i8, i8* %11, i64 -1
  store i8 %22, i8* %23, align 1
  %24 = load i32, i32* %3, align 8
  %25 = and i32 %24, 3
  %26 = icmp eq i32 %25, 3
  br i1 %26, label %36, label %27

27:                                               ; preds = %2
  %28 = getelementptr inbounds i8, i8* %9, i64 67
  %29 = load i8, i8* %28, align 1
  store i8 %29, i8* %11, align 1
  %30 = getelementptr inbounds i8, i8* %9, i64 35
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds i8, i8* %11, i64 1
  store i8 %31, i8* %32, align 1
  %33 = getelementptr inbounds i8, i8* %9, i64 3
  %34 = load i8, i8* %33, align 1
  %35 = getelementptr inbounds i8, i8* %11, i64 2
  store i8 %34, i8* %35, align 1
  br label %41

36:                                               ; preds = %2
  %37 = getelementptr i8, i8* %11, i64 4
  %38 = bitcast i8* %37 to i32*
  %39 = bitcast i8* %11 to i32*
  %40 = load i32, i32* %38, align 1
  store i32 %40, i32* %39, align 1
  br label %41

41:                                               ; preds = %27, %36
  %42 = load i32, i32* %3, align 8
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* %3, align 8
  %44 = icmp eq i32 %43, 16
  br i1 %44, label %51, label %45

45:                                               ; preds = %41
  %46 = sext i32 %43 to i64
  %47 = getelementptr inbounds [16 x i8], [16 x i8]* @VP8TopLeftI4, i64 0, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i64
  %50 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %0, i64 0, i32 11, i64 %49
  store i8* %50, i8** %10, align 8
  br label %51

51:                                               ; preds = %41, %45
  %52 = phi i32 [ 1, %45 ], [ 0, %41 ]
  ret i32 %52
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !3}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !19}
!19 = !{!"llvm.loop.isvectorized", i32 1}
!20 = distinct !{!20, !3}
!21 = distinct !{!21, !3}
!22 = distinct !{!22, !19}
!23 = distinct !{!23, !3}
!24 = !{!25}
!25 = distinct !{!25, !26}
!26 = distinct !{!26, !"LVerDomain"}
!27 = !{!28}
!28 = distinct !{!28, !26}
!29 = distinct !{!29, !19}
!30 = distinct !{!30, !3}
!31 = distinct !{!31, !3}
!32 = distinct !{!32, !19}
!33 = distinct !{!33, !3}
!34 = !{!35}
!35 = distinct !{!35, !36}
!36 = distinct !{!36, !"LVerDomain"}
!37 = !{!38}
!38 = distinct !{!38, !36}
!39 = distinct !{!39, !19}
!40 = distinct !{!40, !3}
!41 = distinct !{!41, !3}
!42 = distinct !{!42, !19}
