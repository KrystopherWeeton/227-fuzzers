; ModuleID = '../../base/trace_event/memory_dump_scheduler.cc'
source_filename = "../../base/trace_event/memory_dump_scheduler.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::trace_event::MemoryDumpScheduler" = type { %class.scoped_refptr, i32, i32, i32, i32, i32, %"class.base::RepeatingCallback" }
%class.scoped_refptr = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.1 }
%class.scoped_refptr.1 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.2", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.2" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.base::trace_event::MemoryDumpScheduler::Config" = type { %"class.std::__1::vector", %"class.base::RepeatingCallback" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"*, %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"*, %"class.std::__1::__compressed_pair" }
%"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger" = type { i32, i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8] }>
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN4base8internal7InvokerINS0_9BindStateIMNS_11trace_event19MemoryDumpSchedulerEFvNS4_6ConfigEEJNS0_17UnretainedWrapperIS4_EES5_EEEFvvEE7RunOnceEPNS0_13BindStateBaseE = comdat any

$_ZN4base8internal9BindStateIMNS_11trace_event19MemoryDumpSchedulerEFvNS3_6ConfigEEJNS0_17UnretainedWrapperIS3_EES4_EE7DestroyEPKNS0_13BindStateBaseE = comdat any

$_ZN4base8internal7InvokerINS0_9BindStateIMNS_11trace_event19MemoryDumpSchedulerEFvvEJNS0_17UnretainedWrapperIS4_EEEEEFvvEE7RunOnceEPNS0_13BindStateBaseE = comdat any

$_ZN4base8internal9BindStateIMNS_11trace_event19MemoryDumpSchedulerEFvvEJNS0_17UnretainedWrapperIS3_EEEE7DestroyEPKNS0_13BindStateBaseE = comdat any

$_ZN4base8internal7InvokerINS0_9BindStateIMNS_11trace_event19MemoryDumpSchedulerEFvjEJNS0_17UnretainedWrapperIS4_EEjEEEFvvEE7RunOnceEPNS0_13BindStateBaseE = comdat any

$_ZN4base8internal9BindStateIMNS_11trace_event19MemoryDumpSchedulerEFvjEJNS0_17UnretainedWrapperIS3_EEjEE7DestroyEPKNS0_13BindStateBaseE = comdat any

@_ZZN4base11trace_event19MemoryDumpScheduler11GetInstanceEvE8instance = internal unnamed_addr global %"class.base::trace_event::MemoryDumpScheduler"* null, align 8
@_ZGVZN4base11trace_event19MemoryDumpScheduler11GetInstanceEvE8instance = internal global i64 0, align 8
@.str = private unnamed_addr constant [6 x i8] c"Start\00", align 1
@.str.1 = private unnamed_addr constant [48 x i8] c"../../base/trace_event/memory_dump_scheduler.cc\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"Stop\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"StartInternal\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"Tick\00", align 1

@_ZN4base11trace_event19MemoryDumpSchedulerC1Ev = hidden unnamed_addr alias void (%"class.base::trace_event::MemoryDumpScheduler"*), void (%"class.base::trace_event::MemoryDumpScheduler"*)* @_ZN4base11trace_event19MemoryDumpSchedulerC2Ev
@_ZN4base11trace_event19MemoryDumpSchedulerD1Ev = hidden unnamed_addr alias void (%"class.base::trace_event::MemoryDumpScheduler"*), void (%"class.base::trace_event::MemoryDumpScheduler"*)* @_ZN4base11trace_event19MemoryDumpSchedulerD2Ev
@_ZN4base11trace_event19MemoryDumpScheduler6ConfigC1Ev = hidden unnamed_addr alias void (%"struct.base::trace_event::MemoryDumpScheduler::Config"*), void (%"struct.base::trace_event::MemoryDumpScheduler::Config"*)* @_ZN4base11trace_event19MemoryDumpScheduler6ConfigC2Ev
@_ZN4base11trace_event19MemoryDumpScheduler6ConfigD1Ev = hidden unnamed_addr alias void (%"struct.base::trace_event::MemoryDumpScheduler::Config"*), void (%"struct.base::trace_event::MemoryDumpScheduler::Config"*)* @_ZN4base11trace_event19MemoryDumpScheduler6ConfigD2Ev
@_ZN4base11trace_event19MemoryDumpScheduler6ConfigC1ERKS2_ = hidden unnamed_addr alias void (%"struct.base::trace_event::MemoryDumpScheduler::Config"*, %"struct.base::trace_event::MemoryDumpScheduler::Config"*), void (%"struct.base::trace_event::MemoryDumpScheduler::Config"*, %"struct.base::trace_event::MemoryDumpScheduler::Config"*)* @_ZN4base11trace_event19MemoryDumpScheduler6ConfigC2ERKS2_

; Function Attrs: nounwind ssp uwtable
define hidden %"class.base::trace_event::MemoryDumpScheduler"* @_ZN4base11trace_event19MemoryDumpScheduler11GetInstanceEv() local_unnamed_addr #0 align 2 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN4base11trace_event19MemoryDumpScheduler11GetInstanceEvE8instance to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %10, !prof !2

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN4base11trace_event19MemoryDumpScheduler11GetInstanceEvE8instance) #9
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %10, label %6

6:                                                ; preds = %3
  %7 = tail call i8* @_Znwm(i64 40) #10
  %8 = getelementptr inbounds i8, i8* %7, i64 32
  %9 = bitcast i8* %8 to %"class.base::internal::BindStateBase"**
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %9, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 16, i1 false) #9
  store i8* %7, i8** bitcast (%"class.base::trace_event::MemoryDumpScheduler"** @_ZZN4base11trace_event19MemoryDumpScheduler11GetInstanceEvE8instance to i8**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN4base11trace_event19MemoryDumpScheduler11GetInstanceEvE8instance) #9
  br label %10

10:                                               ; preds = %3, %6, %0
  %11 = load %"class.base::trace_event::MemoryDumpScheduler"*, %"class.base::trace_event::MemoryDumpScheduler"** @_ZZN4base11trace_event19MemoryDumpScheduler11GetInstanceEvE8instance, align 8
  ret %"class.base::trace_event::MemoryDumpScheduler"* %11
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4base11trace_event19MemoryDumpSchedulerC2Ev(%"class.base::trace_event::MemoryDumpScheduler"* nocapture) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.base::trace_event::MemoryDumpScheduler", %"class.base::trace_event::MemoryDumpScheduler"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %2, align 8
  %3 = bitcast %"class.base::trace_event::MemoryDumpScheduler"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base11trace_event19MemoryDumpSchedulerD2Ev(%"class.base::trace_event::MemoryDumpScheduler"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::trace_event::MemoryDumpScheduler", %"class.base::trace_event::MemoryDumpScheduler"* %0, i64 0, i32 6, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %2) #9
  %3 = getelementptr inbounds %"class.base::trace_event::MemoryDumpScheduler", %"class.base::trace_event::MemoryDumpScheduler"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.base::SequencedTaskRunner"*, %"class.base::SequencedTaskRunner"** %3, align 8
  %5 = icmp eq %"class.base::SequencedTaskRunner"* %4, null
  br i1 %5, label %14, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::SequencedTaskRunner", %"class.base::SequencedTaskRunner"* %4, i64 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw sub i32* %8, i32 1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %14

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %7, i64 -2
  %13 = bitcast %"class.base::RefCountedThreadSafe"* %12 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %13) #9
  br label %14

14:                                               ; preds = %1, %6, %11
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base11trace_event19MemoryDumpScheduler5StartENS1_6ConfigE13scoped_refptrINS_19SequencedTaskRunnerEE(%"class.base::trace_event::MemoryDumpScheduler"*, %"struct.base::trace_event::MemoryDumpScheduler::Config"*, %"class.base::SequencedTaskRunner"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::Location", align 8
  %5 = alloca %"class.base::OnceCallback", align 8
  %6 = icmp eq %"class.base::SequencedTaskRunner"* %2, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.base::SequencedTaskRunner", %"class.base::SequencedTaskRunner"* %2, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 1 monotonic
  br label %10

10:                                               ; preds = %3, %7
  %11 = ptrtoint %"class.base::SequencedTaskRunner"* %2 to i64
  %12 = bitcast %"class.base::trace_event::MemoryDumpScheduler"* %0 to i64*
  %13 = getelementptr inbounds %"class.base::trace_event::MemoryDumpScheduler", %"class.base::trace_event::MemoryDumpScheduler"* %0, i64 0, i32 0, i32 0
  %14 = load %"class.base::SequencedTaskRunner"*, %"class.base::SequencedTaskRunner"** %13, align 8
  store i64 %11, i64* %12, align 8
  %15 = icmp eq %"class.base::SequencedTaskRunner"* %14, null
  br i1 %15, label %24, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.base::SequencedTaskRunner", %"class.base::SequencedTaskRunner"* %14, i64 0, i32 0, i32 1
  %18 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = atomicrmw sub i32* %18, i32 1 acq_rel
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %24

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %17, i64 -2
  %23 = bitcast %"class.base::RefCountedThreadSafe"* %22 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %23) #9
  br label %24

24:                                               ; preds = %10, %16, %21
  %25 = bitcast %"class.base::SequencedTaskRunner"* %2 to %"class.base::TaskRunner"*
  %26 = bitcast %"class.base::Location"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %26) #9
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 34) #9
  %27 = ptrtoint %"class.base::trace_event::MemoryDumpScheduler"* %0 to i64
  %28 = call i8* @_Znwm(i64 88) #10, !noalias !3
  %29 = bitcast i8* %28 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %29, void ()* bitcast (void (%"class.base::internal::BindStateBase"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMNS_11trace_event19MemoryDumpSchedulerEFvNS4_6ConfigEEJNS0_17UnretainedWrapperIS4_EES5_EEEFvvEE7RunOnceEPNS0_13BindStateBaseE to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMNS_11trace_event19MemoryDumpSchedulerEFvNS3_6ConfigEEJNS0_17UnretainedWrapperIS3_EES4_EE7DestroyEPKNS0_13BindStateBaseE) #9
  %30 = getelementptr inbounds i8, i8* %28, i64 32
  %31 = bitcast i8* %30 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (void (%"class.base::trace_event::MemoryDumpScheduler"*, %"struct.base::trace_event::MemoryDumpScheduler::Config"*)* @_ZN4base11trace_event19MemoryDumpScheduler13StartInternalENS1_6ConfigE to i64), i64 0>, <2 x i64>* %31, align 8
  %32 = getelementptr inbounds i8, i8* %28, i64 48
  %33 = bitcast i8* %32 to i64*
  store i64 %27, i64* %33, align 8
  %34 = getelementptr inbounds i8, i8* %28, i64 56
  call void @llvm.memset.p0i8.i64(i8* align 8 %34, i8 0, i64 24, i1 false) #9
  %35 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config", %"struct.base::trace_event::MemoryDumpScheduler::Config"* %1, i64 0, i32 0, i32 0, i32 1
  %36 = bitcast %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"** %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = bitcast %"struct.base::trace_event::MemoryDumpScheduler::Config"* %1 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = sub i64 %37, %39
  %41 = ashr exact i64 %40, 3
  %42 = icmp eq i64 %40, 0
  br i1 %42, label %66, label %43

43:                                               ; preds = %24
  %44 = icmp ugt i64 %41, 2305843009213693951
  br i1 %44, label %45, label %47

45:                                               ; preds = %43
  %46 = bitcast i8* %34 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %46) #11
  unreachable

47:                                               ; preds = %43
  %48 = call i8* @_Znwm(i64 %40) #10
  %49 = bitcast i8* %48 to %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"*
  %50 = getelementptr inbounds i8, i8* %28, i64 64
  %51 = bitcast i8* %50 to i8**
  store i8* %48, i8** %51, align 8
  %52 = bitcast i8* %34 to i8**
  store i8* %48, i8** %52, align 8
  %53 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger", %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %49, i64 %41
  %54 = getelementptr inbounds i8, i8* %28, i64 72
  %55 = bitcast i8* %54 to %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"**
  store %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %53, %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"** %55, align 8
  %56 = bitcast i8* %50 to i64*
  %57 = ptrtoint i8* %48 to i64
  %58 = icmp sgt i64 %40, 0
  br i1 %58, label %59, label %64

59:                                               ; preds = %47
  %60 = lshr exact i64 %40, 3
  %61 = inttoptr i64 %39 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* align 4 %61, i64 %40, i1 false) #9
  %62 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger", %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %49, i64 %60
  %63 = ptrtoint %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %62 to i64
  br label %64

64:                                               ; preds = %59, %47
  %65 = phi i64 [ %63, %59 ], [ %57, %47 ]
  store i64 %65, i64* %56, align 8
  br label %66

66:                                               ; preds = %24, %64
  %67 = getelementptr inbounds i8, i8* %28, i64 80
  %68 = bitcast i8* %67 to %"class.base::internal::CallbackBaseCopyable"*
  %69 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config", %"struct.base::trace_event::MemoryDumpScheduler::Config"* %1, i64 0, i32 1, i32 0
  call void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"* %68, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8) %69) #9
  %70 = bitcast %"class.base::OnceCallback"* %5 to i8**
  store i8* %28, i8** %70, align 8, !alias.scope !3
  %71 = call zeroext i1 @_ZN4base10TaskRunner8PostTaskERKNS_8LocationENS_12OnceCallbackIFvvEEE(%"class.base::TaskRunner"* %25, %"class.base::Location"* nonnull dereferenceable(32) %4, %"class.base::OnceCallback"* nonnull %5) #9
  %72 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %72) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %26) #9
  br i1 %6, label %81, label %73

73:                                               ; preds = %66
  %74 = getelementptr inbounds %"class.base::SequencedTaskRunner", %"class.base::SequencedTaskRunner"* %2, i64 0, i32 0, i32 1
  %75 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %74, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = atomicrmw sub i32* %75, i32 1 acq_rel
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %78, label %81

78:                                               ; preds = %73
  %79 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %74, i64 -2
  %80 = bitcast %"class.base::RefCountedThreadSafe"* %79 to %"class.base::TaskRunner"*
  call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %80) #9
  br label %81

81:                                               ; preds = %66, %73, %78
  ret void
}

declare zeroext i1 @_ZN4base10TaskRunner8PostTaskERKNS_8LocationENS_12OnceCallbackIFvvEEE(%"class.base::TaskRunner"*, %"class.base::Location"* dereferenceable(32), %"class.base::OnceCallback"*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #6

declare void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* sret, i8*, i8*, i32) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base11trace_event19MemoryDumpScheduler13StartInternalENS1_6ConfigE(%"class.base::trace_event::MemoryDumpScheduler"*, %"struct.base::trace_event::MemoryDumpScheduler::Config"*) #0 align 2 {
  %3 = alloca %"class.base::Location", align 8
  %4 = alloca %"class.base::OnceCallback", align 8
  %5 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config", %"struct.base::trace_event::MemoryDumpScheduler::Config"* %1, i64 0, i32 0, i32 0, i32 0
  %6 = load %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"*, %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"** %5, align 8
  %7 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config", %"struct.base::trace_event::MemoryDumpScheduler::Config"* %1, i64 0, i32 0, i32 0, i32 1
  %8 = load %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"*, %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"** %7, align 8
  %9 = icmp eq %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %6, %8
  br i1 %9, label %48, label %10

10:                                               ; preds = %2
  %11 = ptrtoint %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %6 to i64
  %12 = getelementptr %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger", %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %8, i64 -1, i32 0
  %13 = ptrtoint i32* %12 to i64
  %14 = sub i64 %13, %11
  %15 = lshr i64 %14, 3
  %16 = add nuw nsw i64 %15, 1
  %17 = and i64 %16, 1
  %18 = icmp eq i64 %15, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %10
  %20 = sub nuw nsw i64 %16, %17
  br label %85

21:                                               ; preds = %119, %10
  %22 = phi i32 [ undef, %10 ], [ %121, %119 ]
  %23 = phi i32 [ undef, %10 ], [ %122, %119 ]
  %24 = phi i32 [ undef, %10 ], [ %124, %119 ]
  %25 = phi i32 [ 0, %10 ], [ %122, %119 ]
  %26 = phi i32 [ 0, %10 ], [ %121, %119 ]
  %27 = phi i32 [ -1, %10 ], [ %124, %119 ]
  %28 = phi %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* [ %6, %10 ], [ %125, %119 ]
  %29 = icmp eq i64 %17, 0
  br i1 %29, label %48, label %30

30:                                               ; preds = %21
  %31 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger", %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %28, i64 0, i32 0
  %32 = load i32, i32* %31, align 4
  switch i32 %32, label %39 [
    i32 2, label %36
    i32 1, label %33
  ]

33:                                               ; preds = %30
  %34 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger", %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %28, i64 0, i32 1
  %35 = load i32, i32* %34, align 4
  br label %42

36:                                               ; preds = %30
  %37 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger", %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %28, i64 0, i32 1
  %38 = load i32, i32* %37, align 4
  br label %42

39:                                               ; preds = %30
  %40 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger", %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %28, i64 0, i32 1
  %41 = load i32, i32* %40, align 4
  br label %42

42:                                               ; preds = %33, %36, %39
  %43 = phi i32 [ %41, %39 ], [ %35, %33 ], [ %38, %36 ]
  %44 = phi i32 [ %26, %39 ], [ %26, %33 ], [ %38, %36 ]
  %45 = phi i32 [ %25, %39 ], [ %35, %33 ], [ %25, %36 ]
  %46 = icmp ult i32 %43, %27
  %47 = select i1 %46, i32 %43, i32 %27
  br label %48

48:                                               ; preds = %42, %21, %2
  %49 = phi i32 [ -1, %2 ], [ %24, %21 ], [ %47, %42 ]
  %50 = phi i32 [ 0, %2 ], [ %22, %21 ], [ %44, %42 ]
  %51 = phi i32 [ 0, %2 ], [ %23, %21 ], [ %45, %42 ]
  %52 = getelementptr inbounds %"class.base::trace_event::MemoryDumpScheduler", %"class.base::trace_event::MemoryDumpScheduler"* %0, i64 0, i32 6, i32 0
  %53 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config", %"struct.base::trace_event::MemoryDumpScheduler::Config"* %1, i64 0, i32 1, i32 0
  %54 = tail call dereferenceable(8) %"class.base::internal::CallbackBaseCopyable"* @_ZN4base8internal20CallbackBaseCopyableaSERKS1_(%"class.base::internal::CallbackBaseCopyable"* %52, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8) %53) #9
  %55 = getelementptr inbounds %"class.base::trace_event::MemoryDumpScheduler", %"class.base::trace_event::MemoryDumpScheduler"* %0, i64 0, i32 1
  store i32 %49, i32* %55, align 8
  %56 = getelementptr inbounds %"class.base::trace_event::MemoryDumpScheduler", %"class.base::trace_event::MemoryDumpScheduler"* %0, i64 0, i32 3
  store i32 0, i32* %56, align 8
  %57 = udiv i32 %51, %49
  %58 = getelementptr inbounds %"class.base::trace_event::MemoryDumpScheduler", %"class.base::trace_event::MemoryDumpScheduler"* %0, i64 0, i32 4
  store i32 %57, i32* %58, align 4
  %59 = udiv i32 %50, %49
  %60 = getelementptr inbounds %"class.base::trace_event::MemoryDumpScheduler", %"class.base::trace_event::MemoryDumpScheduler"* %0, i64 0, i32 5
  store i32 %59, i32* %60, align 8
  %61 = tail call dereferenceable(8) %class.scoped_refptr* @_ZN4base25SequencedTaskRunnerHandle3GetEv() #9
  %62 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %61, i64 0, i32 0
  %63 = load %"class.base::SequencedTaskRunner"*, %"class.base::SequencedTaskRunner"** %62, align 8
  %64 = bitcast %"class.base::SequencedTaskRunner"* %63 to %"class.base::TaskRunner"*
  %65 = bitcast %"class.base::Location"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %65) #9
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %3, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 81) #9
  %66 = ptrtoint %"class.base::trace_event::MemoryDumpScheduler"* %0 to i64
  %67 = getelementptr inbounds %"class.base::trace_event::MemoryDumpScheduler", %"class.base::trace_event::MemoryDumpScheduler"* %0, i64 0, i32 2
  %68 = load i32, i32* %67, align 4
  %69 = add i32 %68, 1
  store i32 %69, i32* %67, align 4
  %70 = call i8* @_Znwm(i64 64) #10, !noalias !8
  %71 = bitcast i8* %70 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %71, void ()* bitcast (void (%"class.base::internal::BindStateBase"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMNS_11trace_event19MemoryDumpSchedulerEFvjEJNS0_17UnretainedWrapperIS4_EEjEEEFvvEE7RunOnceEPNS0_13BindStateBaseE to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMNS_11trace_event19MemoryDumpSchedulerEFvjEJNS0_17UnretainedWrapperIS3_EEjEE7DestroyEPKNS0_13BindStateBaseE) #9, !noalias !8
  %72 = getelementptr inbounds i8, i8* %70, i64 32
  %73 = bitcast i8* %72 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (void (%"class.base::trace_event::MemoryDumpScheduler"*, i32)* @_ZN4base11trace_event19MemoryDumpScheduler4TickEj to i64), i64 0>, <2 x i64>* %73, align 8, !noalias !8
  %74 = getelementptr inbounds i8, i8* %70, i64 48
  %75 = bitcast i8* %74 to i64*
  store i64 %66, i64* %75, align 8, !noalias !8
  %76 = getelementptr inbounds i8, i8* %70, i64 56
  %77 = bitcast i8* %76 to i32*
  %78 = load i32, i32* %67, align 4, !noalias !8
  store i32 %78, i32* %77, align 4, !noalias !8
  %79 = bitcast %"class.base::OnceCallback"* %4 to i8**
  store i8* %70, i8** %79, align 8, !alias.scope !8
  %80 = bitcast %"class.base::SequencedTaskRunner"* %63 to i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)***
  %81 = load i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)**, i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)*** %80, align 8
  %82 = load i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)** %81, align 8
  %83 = call zeroext i1 %82(%"class.base::TaskRunner"* %64, %"class.base::Location"* nonnull dereferenceable(32) %3, %"class.base::OnceCallback"* nonnull %4, i64 200000) #9
  %84 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %84) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %65) #9
  ret void

85:                                               ; preds = %119, %19
  %86 = phi i32 [ 0, %19 ], [ %122, %119 ]
  %87 = phi i32 [ 0, %19 ], [ %121, %119 ]
  %88 = phi i32 [ -1, %19 ], [ %124, %119 ]
  %89 = phi %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* [ %6, %19 ], [ %125, %119 ]
  %90 = phi i64 [ %20, %19 ], [ %126, %119 ]
  %91 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger", %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %89, i64 0, i32 0
  %92 = load i32, i32* %91, align 4
  switch i32 %92, label %93 [
    i32 2, label %99
    i32 1, label %96
  ]

93:                                               ; preds = %85
  %94 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger", %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %89, i64 0, i32 1
  %95 = load i32, i32* %94, align 4
  br label %102

96:                                               ; preds = %85
  %97 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger", %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %89, i64 0, i32 1
  %98 = load i32, i32* %97, align 4
  br label %102

99:                                               ; preds = %85
  %100 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger", %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %89, i64 0, i32 1
  %101 = load i32, i32* %100, align 4
  br label %102

102:                                              ; preds = %93, %99, %96
  %103 = phi i32 [ %95, %93 ], [ %98, %96 ], [ %101, %99 ]
  %104 = phi i32 [ %87, %93 ], [ %87, %96 ], [ %101, %99 ]
  %105 = phi i32 [ %86, %93 ], [ %98, %96 ], [ %86, %99 ]
  %106 = icmp ult i32 %103, %88
  %107 = select i1 %106, i32 %103, i32 %88
  %108 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger", %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %89, i64 1, i32 0
  %109 = load i32, i32* %108, align 4
  switch i32 %109, label %116 [
    i32 2, label %113
    i32 1, label %110
  ]

110:                                              ; preds = %102
  %111 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger", %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %89, i64 1, i32 1
  %112 = load i32, i32* %111, align 4
  br label %119

113:                                              ; preds = %102
  %114 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger", %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %89, i64 1, i32 1
  %115 = load i32, i32* %114, align 4
  br label %119

116:                                              ; preds = %102
  %117 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger", %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %89, i64 1, i32 1
  %118 = load i32, i32* %117, align 4
  br label %119

119:                                              ; preds = %116, %113, %110
  %120 = phi i32 [ %118, %116 ], [ %112, %110 ], [ %115, %113 ]
  %121 = phi i32 [ %104, %116 ], [ %104, %110 ], [ %115, %113 ]
  %122 = phi i32 [ %105, %116 ], [ %112, %110 ], [ %105, %113 ]
  %123 = icmp ult i32 %120, %107
  %124 = select i1 %123, i32 %120, i32 %107
  %125 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger", %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %89, i64 2
  %126 = add i64 %90, -2
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %21, label %85
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base11trace_event19MemoryDumpScheduler4StopEv(%"class.base::trace_event::MemoryDumpScheduler"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::Location", align 8
  %3 = alloca %"class.base::OnceCallback", align 8
  %4 = getelementptr inbounds %"class.base::trace_event::MemoryDumpScheduler", %"class.base::trace_event::MemoryDumpScheduler"* %0, i64 0, i32 0, i32 0
  %5 = load %"class.base::SequencedTaskRunner"*, %"class.base::SequencedTaskRunner"** %4, align 8
  %6 = icmp eq %"class.base::SequencedTaskRunner"* %5, null
  br i1 %6, label %31, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.base::SequencedTaskRunner"* %5 to %"class.base::TaskRunner"*
  %9 = bitcast %"class.base::Location"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #9
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 41) #9
  %10 = ptrtoint %"class.base::trace_event::MemoryDumpScheduler"* %0 to i64
  %11 = call i8* @_Znwm(i64 56) #10, !noalias !13
  %12 = bitcast i8* %11 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %12, void ()* bitcast (void (%"class.base::internal::BindStateBase"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMNS_11trace_event19MemoryDumpSchedulerEFvvEJNS0_17UnretainedWrapperIS4_EEEEEFvvEE7RunOnceEPNS0_13BindStateBaseE to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMNS_11trace_event19MemoryDumpSchedulerEFvvEJNS0_17UnretainedWrapperIS3_EEEE7DestroyEPKNS0_13BindStateBaseE) #9, !noalias !13
  %13 = getelementptr inbounds i8, i8* %11, i64 32
  %14 = bitcast i8* %13 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (void (%"class.base::trace_event::MemoryDumpScheduler"*)* @_ZN4base11trace_event19MemoryDumpScheduler12StopInternalEv to i64), i64 0>, <2 x i64>* %14, align 8, !noalias !13
  %15 = getelementptr inbounds i8, i8* %11, i64 48
  %16 = bitcast i8* %15 to i64*
  store i64 %10, i64* %16, align 8, !noalias !13
  %17 = bitcast %"class.base::OnceCallback"* %3 to i8**
  store i8* %11, i8** %17, align 8, !alias.scope !13
  %18 = call zeroext i1 @_ZN4base10TaskRunner8PostTaskERKNS_8LocationENS_12OnceCallbackIFvvEEE(%"class.base::TaskRunner"* nonnull %8, %"class.base::Location"* nonnull dereferenceable(32) %2, %"class.base::OnceCallback"* nonnull %3) #9
  %19 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %19) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #9
  %20 = bitcast %"class.base::trace_event::MemoryDumpScheduler"* %0 to i64*
  %21 = load %"class.base::SequencedTaskRunner"*, %"class.base::SequencedTaskRunner"** %4, align 8
  store i64 0, i64* %20, align 8
  %22 = icmp eq %"class.base::SequencedTaskRunner"* %21, null
  br i1 %22, label %31, label %23

23:                                               ; preds = %7
  %24 = getelementptr inbounds %"class.base::SequencedTaskRunner", %"class.base::SequencedTaskRunner"* %21, i64 0, i32 0, i32 1
  %25 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = atomicrmw sub i32* %25, i32 1 acq_rel
  %27 = icmp eq i32 %26, 1
  br i1 %27, label %28, label %31

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %24, i64 -2
  %30 = bitcast %"class.base::RefCountedThreadSafe"* %29 to %"class.base::TaskRunner"*
  call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %30) #9
  br label %31

31:                                               ; preds = %1, %28, %23, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base11trace_event19MemoryDumpScheduler12StopInternalEv(%"class.base::trace_event::MemoryDumpScheduler"*) #0 align 2 {
  %2 = getelementptr inbounds %"class.base::trace_event::MemoryDumpScheduler", %"class.base::trace_event::MemoryDumpScheduler"* %0, i64 0, i32 1
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %"class.base::trace_event::MemoryDumpScheduler", %"class.base::trace_event::MemoryDumpScheduler"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  store i32 %5, i32* %3, align 4
  %6 = getelementptr inbounds %"class.base::trace_event::MemoryDumpScheduler", %"class.base::trace_event::MemoryDumpScheduler"* %0, i64 0, i32 6, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBase5ResetEv(%"class.base::internal::CallbackBase"* %6) #9
  ret void
}

declare dereferenceable(8) %class.scoped_refptr* @_ZN4base25SequencedTaskRunnerHandle3GetEv() local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base11trace_event19MemoryDumpScheduler4TickEj(%"class.base::trace_event::MemoryDumpScheduler"*, i32) #0 align 2 {
  %3 = alloca %"class.base::Location", align 8
  %4 = alloca %"class.base::OnceCallback", align 8
  %5 = getelementptr inbounds %"class.base::trace_event::MemoryDumpScheduler", %"class.base::trace_event::MemoryDumpScheduler"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %65, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.base::trace_event::MemoryDumpScheduler", %"class.base::trace_event::MemoryDumpScheduler"* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, %1
  br i1 %11, label %12, label %65

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.base::trace_event::MemoryDumpScheduler", %"class.base::trace_event::MemoryDumpScheduler"* %0, i64 0, i32 4
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %22, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.base::trace_event::MemoryDumpScheduler", %"class.base::trace_event::MemoryDumpScheduler"* %0, i64 0, i32 3
  %18 = load i32, i32* %17, align 8
  %19 = urem i32 %18, %14
  %20 = icmp eq i32 %19, 0
  %21 = zext i1 %20 to i32
  br label %22

22:                                               ; preds = %16, %12
  %23 = phi i32 [ 0, %12 ], [ %21, %16 ]
  %24 = getelementptr inbounds %"class.base::trace_event::MemoryDumpScheduler", %"class.base::trace_event::MemoryDumpScheduler"* %0, i64 0, i32 5
  %25 = load i32, i32* %24, align 8
  %26 = icmp eq i32 %25, 0
  %27 = getelementptr inbounds %"class.base::trace_event::MemoryDumpScheduler", %"class.base::trace_event::MemoryDumpScheduler"* %0, i64 0, i32 3
  %28 = load i32, i32* %27, align 8
  br i1 %26, label %33, label %29

29:                                               ; preds = %22
  %30 = urem i32 %28, %25
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, i32 2, i32 %23
  br label %33

33:                                               ; preds = %22, %29
  %34 = phi i32 [ %32, %29 ], [ %23, %22 ]
  %35 = getelementptr inbounds %"class.base::trace_event::MemoryDumpScheduler", %"class.base::trace_event::MemoryDumpScheduler"* %0, i64 0, i32 3
  %36 = add i32 %28, 1
  store i32 %36, i32* %35, align 8
  %37 = getelementptr inbounds %"class.base::trace_event::MemoryDumpScheduler", %"class.base::trace_event::MemoryDumpScheduler"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %38 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %37, align 8
  %39 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %38, i64 0, i32 1
  %40 = bitcast void ()** %39 to void (%"class.base::internal::BindStateBase"*, i32)**
  %41 = load void (%"class.base::internal::BindStateBase"*, i32)*, void (%"class.base::internal::BindStateBase"*, i32)** %40, align 8
  tail call void %41(%"class.base::internal::BindStateBase"* %38, i32 %34) #9
  %42 = tail call dereferenceable(8) %class.scoped_refptr* @_ZN4base25SequencedTaskRunnerHandle3GetEv() #9
  %43 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %42, i64 0, i32 0
  %44 = load %"class.base::SequencedTaskRunner"*, %"class.base::SequencedTaskRunner"** %43, align 8
  %45 = bitcast %"class.base::SequencedTaskRunner"* %44 to %"class.base::TaskRunner"*
  %46 = bitcast %"class.base::Location"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %46) #9
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 106) #9
  %47 = ptrtoint %"class.base::trace_event::MemoryDumpScheduler"* %0 to i64
  %48 = call i8* @_Znwm(i64 64) #10, !noalias !18
  %49 = bitcast i8* %48 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %49, void ()* bitcast (void (%"class.base::internal::BindStateBase"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMNS_11trace_event19MemoryDumpSchedulerEFvjEJNS0_17UnretainedWrapperIS4_EEjEEEFvvEE7RunOnceEPNS0_13BindStateBaseE to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMNS_11trace_event19MemoryDumpSchedulerEFvjEJNS0_17UnretainedWrapperIS3_EEjEE7DestroyEPKNS0_13BindStateBaseE) #9, !noalias !18
  %50 = getelementptr inbounds i8, i8* %48, i64 32
  %51 = bitcast i8* %50 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (void (%"class.base::trace_event::MemoryDumpScheduler"*, i32)* @_ZN4base11trace_event19MemoryDumpScheduler4TickEj to i64), i64 0>, <2 x i64>* %51, align 8, !noalias !18
  %52 = getelementptr inbounds i8, i8* %48, i64 48
  %53 = bitcast i8* %52 to i64*
  store i64 %47, i64* %53, align 8, !noalias !18
  %54 = getelementptr inbounds i8, i8* %48, i64 56
  %55 = bitcast i8* %54 to i32*
  store i32 %1, i32* %55, align 4, !noalias !18
  %56 = bitcast %"class.base::OnceCallback"* %4 to i8**
  store i8* %48, i8** %56, align 8, !alias.scope !18
  %57 = load i32, i32* %5, align 8
  %58 = zext i32 %57 to i64
  %59 = mul nuw nsw i64 %58, 1000
  %60 = bitcast %"class.base::SequencedTaskRunner"* %44 to i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)***
  %61 = load i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)**, i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)*** %60, align 8
  %62 = load i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)** %61, align 8
  %63 = call zeroext i1 %62(%"class.base::TaskRunner"* %45, %"class.base::Location"* nonnull dereferenceable(32) %3, %"class.base::OnceCallback"* nonnull %4, i64 %59) #9
  %64 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %64) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %46) #9
  br label %65

65:                                               ; preds = %8, %2, %33
  ret void
}

declare void @_ZN4base8internal12CallbackBase5ResetEv(%"class.base::internal::CallbackBase"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base11trace_event19MemoryDumpScheduler6ConfigC2Ev(%"struct.base::trace_event::MemoryDumpScheduler::Config"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"struct.base::trace_event::MemoryDumpScheduler::Config"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base11trace_event19MemoryDumpScheduler6ConfigD2Ev(%"struct.base::trace_event::MemoryDumpScheduler::Config"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config", %"struct.base::trace_event::MemoryDumpScheduler::Config"* %0, i64 0, i32 1, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %2) #9
  %3 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config", %"struct.base::trace_event::MemoryDumpScheduler::Config"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"*, %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"** %3, align 8
  %5 = icmp eq %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %4 to i64
  %8 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config", %"struct.base::trace_event::MemoryDumpScheduler::Config"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = bitcast %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base11trace_event19MemoryDumpScheduler6ConfigC2ERKS2_(%"struct.base::trace_event::MemoryDumpScheduler::Config"*, %"struct.base::trace_event::MemoryDumpScheduler::Config"* dereferenceable(32)) unnamed_addr #0 align 2 {
  %3 = bitcast %"struct.base::trace_event::MemoryDumpScheduler::Config"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #9
  %4 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config", %"struct.base::trace_event::MemoryDumpScheduler::Config"* %1, i64 0, i32 0, i32 0, i32 1
  %5 = bitcast %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"struct.base::trace_event::MemoryDumpScheduler::Config"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %39, label %12

12:                                               ; preds = %2
  %13 = icmp ugt i64 %10, 2305843009213693951
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = bitcast %"struct.base::trace_event::MemoryDumpScheduler::Config"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #11
  unreachable

16:                                               ; preds = %12
  %17 = tail call i8* @_Znwm(i64 %9) #10
  %18 = bitcast i8* %17 to %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"*
  %19 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config", %"struct.base::trace_event::MemoryDumpScheduler::Config"* %0, i64 0, i32 0, i32 0, i32 1
  %20 = bitcast %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"** %19 to i8**
  store i8* %17, i8** %20, align 8
  %21 = bitcast %"struct.base::trace_event::MemoryDumpScheduler::Config"* %0 to i8**
  store i8* %17, i8** %21, align 8
  %22 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger", %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %18, i64 %10
  %23 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config", %"struct.base::trace_event::MemoryDumpScheduler::Config"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %22, %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"** %23, align 8
  %24 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config", %"struct.base::trace_event::MemoryDumpScheduler::Config"* %1, i64 0, i32 0, i32 0, i32 0
  %25 = load %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"*, %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"** %24, align 8
  %26 = load i64, i64* %5, align 8
  %27 = bitcast %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"** %19 to i64*
  %28 = ptrtoint i8* %17 to i64
  %29 = ptrtoint %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %25 to i64
  %30 = sub i64 %26, %29
  %31 = icmp sgt i64 %30, 0
  br i1 %31, label %32, label %37

32:                                               ; preds = %16
  %33 = lshr exact i64 %30, 3
  %34 = bitcast %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %17, i8* align 4 %34, i64 %30, i1 false) #9
  %35 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger", %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %18, i64 %33
  %36 = ptrtoint %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %35 to i64
  br label %37

37:                                               ; preds = %32, %16
  %38 = phi i64 [ %36, %32 ], [ %28, %16 ]
  store i64 %38, i64* %27, align 8
  br label %39

39:                                               ; preds = %2, %37
  %40 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config", %"struct.base::trace_event::MemoryDumpScheduler::Config"* %0, i64 0, i32 1, i32 0
  %41 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config", %"struct.base::trace_event::MemoryDumpScheduler::Config"* %1, i64 0, i32 1, i32 0
  tail call void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"* %40, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8) %41) #9
  ret void
}

declare dereferenceable(8) %"class.base::internal::CallbackBaseCopyable"* @_ZN4base8internal20CallbackBaseCopyableaSERKS1_(%"class.base::internal::CallbackBaseCopyable"*, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8)) local_unnamed_addr #5

declare void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"*, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8)) unnamed_addr #5

declare void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal7InvokerINS0_9BindStateIMNS_11trace_event19MemoryDumpSchedulerEFvNS4_6ConfigEEJNS0_17UnretainedWrapperIS4_EES5_EEEFvvEE7RunOnceEPNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = alloca %"struct.base::trace_event::MemoryDumpScheduler::Config", align 8
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %5 = bitcast void (%"class.base::internal::BindStateBase"*)** %4 to i8**
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %4, i64 1
  %8 = bitcast %"class.base::internal::BindStateBase"* %3 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %11 = bitcast void ()** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"struct.base::trace_event::MemoryDumpScheduler::Config"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #9
  %14 = getelementptr inbounds i8, i8* %6, i64 %12
  %15 = bitcast i8* %14 to %"class.base::trace_event::MemoryDumpScheduler"*
  %16 = and i64 %9, 1
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %25, label %18

18:                                               ; preds = %1
  %19 = bitcast i8* %14 to i8**
  %20 = load i8*, i8** %19, align 8
  %21 = add i64 %9, -1
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = bitcast i8* %22 to void (%"class.base::trace_event::MemoryDumpScheduler"*, %"struct.base::trace_event::MemoryDumpScheduler::Config"*)**
  %24 = load void (%"class.base::trace_event::MemoryDumpScheduler"*, %"struct.base::trace_event::MemoryDumpScheduler::Config"*)*, void (%"class.base::trace_event::MemoryDumpScheduler"*, %"struct.base::trace_event::MemoryDumpScheduler::Config"*)** %23, align 8
  br label %27

25:                                               ; preds = %1
  %26 = inttoptr i64 %9 to void (%"class.base::trace_event::MemoryDumpScheduler"*, %"struct.base::trace_event::MemoryDumpScheduler::Config"*)*
  br label %27

27:                                               ; preds = %25, %18
  %28 = phi void (%"class.base::trace_event::MemoryDumpScheduler"*, %"struct.base::trace_event::MemoryDumpScheduler::Config"*)* [ %24, %18 ], [ %26, %25 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 24, i1 false) #9
  %29 = getelementptr inbounds void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %4, i64 2
  %30 = bitcast void (%"class.base::internal::BindStateBase"*)** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = bitcast void (%"class.base::internal::BindStateBase"*)** %7 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = sub i64 %31, %33
  %35 = ashr exact i64 %34, 3
  %36 = icmp eq i64 %34, 0
  br i1 %36, label %59, label %37

37:                                               ; preds = %27
  %38 = icmp ugt i64 %35, 2305843009213693951
  br i1 %38, label %39, label %41

39:                                               ; preds = %37
  %40 = bitcast %"struct.base::trace_event::MemoryDumpScheduler::Config"* %2 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %40) #11
  unreachable

41:                                               ; preds = %37
  %42 = tail call i8* @_Znwm(i64 %34) #10
  %43 = bitcast i8* %42 to %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"*
  %44 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config", %"struct.base::trace_event::MemoryDumpScheduler::Config"* %2, i64 0, i32 0, i32 0, i32 1
  %45 = bitcast %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"** %44 to i8**
  store i8* %42, i8** %45, align 8
  %46 = bitcast %"struct.base::trace_event::MemoryDumpScheduler::Config"* %2 to i8**
  store i8* %42, i8** %46, align 8
  %47 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger", %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %43, i64 %35
  %48 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config", %"struct.base::trace_event::MemoryDumpScheduler::Config"* %2, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %47, %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"** %48, align 8
  %49 = bitcast %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"** %44 to i64*
  %50 = ptrtoint i8* %42 to i64
  %51 = icmp sgt i64 %34, 0
  br i1 %51, label %52, label %57

52:                                               ; preds = %41
  %53 = lshr exact i64 %34, 3
  %54 = inttoptr i64 %33 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %42, i8* align 4 %54, i64 %34, i1 false) #9
  %55 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger", %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %43, i64 %53
  %56 = ptrtoint %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %55 to i64
  br label %57

57:                                               ; preds = %52, %41
  %58 = phi i64 [ %56, %52 ], [ %50, %41 ]
  store i64 %58, i64* %49, align 8
  br label %59

59:                                               ; preds = %57, %27
  %60 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config", %"struct.base::trace_event::MemoryDumpScheduler::Config"* %2, i64 0, i32 1, i32 0
  %61 = getelementptr inbounds void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %4, i64 4
  %62 = bitcast void (%"class.base::internal::BindStateBase"*)** %61 to %"class.base::internal::CallbackBaseCopyable"*
  call void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"* %60, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8) %62) #9
  call void %28(%"class.base::trace_event::MemoryDumpScheduler"* %15, %"struct.base::trace_event::MemoryDumpScheduler::Config"* nonnull %2) #9
  %63 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config", %"struct.base::trace_event::MemoryDumpScheduler::Config"* %2, i64 0, i32 1, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %63) #9
  %64 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config", %"struct.base::trace_event::MemoryDumpScheduler::Config"* %2, i64 0, i32 0, i32 0, i32 0
  %65 = load %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"*, %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"** %64, align 8
  %66 = icmp eq %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %65, null
  br i1 %66, label %72, label %67

67:                                               ; preds = %59
  %68 = ptrtoint %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %65 to i64
  %69 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpScheduler::Config", %"struct.base::trace_event::MemoryDumpScheduler::Config"* %2, i64 0, i32 0, i32 0, i32 1
  %70 = bitcast %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"** %69 to i64*
  store i64 %68, i64* %70, align 8
  %71 = bitcast %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %65 to i8*
  call void @_ZdlPv(i8* %71) #10
  br label %72

72:                                               ; preds = %59, %67
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9BindStateIMNS_11trace_event19MemoryDumpSchedulerEFvNS3_6ConfigEEJNS0_17UnretainedWrapperIS3_EES4_EE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %17, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 2, i32 2
  %5 = bitcast void (%"class.base::internal::BindStateBase"*)** %4 to %"class.base::internal::CallbackBase"*
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %5) #9
  %6 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 3
  %7 = bitcast i1 (%"class.base::internal::BindStateBase"*, i32)** %6 to %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"**
  %8 = load %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"*, %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"** %7, align 8
  %9 = icmp eq %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %3
  %11 = ptrtoint %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %8 to i64
  %12 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 2
  %13 = bitcast %"class.base::internal::BindStateBase"* %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = bitcast %"struct.base::trace_event::MemoryDumpScheduler::Config::Trigger"* %8 to i8*
  tail call void @_ZdlPv(i8* %14) #10
  br label %15

15:                                               ; preds = %3, %10
  %16 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %16) #10
  br label %17

17:                                               ; preds = %15, %1
  ret void
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*) unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal7InvokerINS0_9BindStateIMNS_11trace_event19MemoryDumpSchedulerEFvvEJNS0_17UnretainedWrapperIS4_EEEEEFvvEE7RunOnceEPNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %4 = bitcast void (%"class.base::internal::BindStateBase"*)** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast %"class.base::internal::BindStateBase"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %9 = bitcast void ()** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds i8, i8* %5, i64 %10
  %12 = bitcast i8* %11 to %"class.base::trace_event::MemoryDumpScheduler"*
  %13 = and i64 %7, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %22, label %15

15:                                               ; preds = %1
  %16 = bitcast i8* %11 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = add i64 %7, -1
  %19 = getelementptr i8, i8* %17, i64 %18
  %20 = bitcast i8* %19 to void (%"class.base::trace_event::MemoryDumpScheduler"*)**
  %21 = load void (%"class.base::trace_event::MemoryDumpScheduler"*)*, void (%"class.base::trace_event::MemoryDumpScheduler"*)** %20, align 8
  br label %24

22:                                               ; preds = %1
  %23 = inttoptr i64 %7 to void (%"class.base::trace_event::MemoryDumpScheduler"*)*
  br label %24

24:                                               ; preds = %15, %22
  %25 = phi void (%"class.base::trace_event::MemoryDumpScheduler"*)* [ %21, %15 ], [ %23, %22 ]
  tail call void %25(%"class.base::trace_event::MemoryDumpScheduler"* %12) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9BindStateIMNS_11trace_event19MemoryDumpSchedulerEFvvEJNS0_17UnretainedWrapperIS3_EEEE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #10
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal7InvokerINS0_9BindStateIMNS_11trace_event19MemoryDumpSchedulerEFvjEJNS0_17UnretainedWrapperIS4_EEjEEEFvvEE7RunOnceEPNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %4 = bitcast void (%"class.base::internal::BindStateBase"*)** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %3, i64 1
  %7 = bitcast void (%"class.base::internal::BindStateBase"*)** %6 to i32*
  %8 = bitcast %"class.base::internal::BindStateBase"* %2 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %11 = bitcast void ()** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds i8, i8* %5, i64 %12
  %14 = bitcast i8* %13 to %"class.base::trace_event::MemoryDumpScheduler"*
  %15 = and i64 %9, 1
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %24, label %17

17:                                               ; preds = %1
  %18 = bitcast i8* %13 to i8**
  %19 = load i8*, i8** %18, align 8
  %20 = add i64 %9, -1
  %21 = getelementptr i8, i8* %19, i64 %20
  %22 = bitcast i8* %21 to void (%"class.base::trace_event::MemoryDumpScheduler"*, i32)**
  %23 = load void (%"class.base::trace_event::MemoryDumpScheduler"*, i32)*, void (%"class.base::trace_event::MemoryDumpScheduler"*, i32)** %22, align 8
  br label %26

24:                                               ; preds = %1
  %25 = inttoptr i64 %9 to void (%"class.base::trace_event::MemoryDumpScheduler"*, i32)*
  br label %26

26:                                               ; preds = %17, %24
  %27 = phi void (%"class.base::trace_event::MemoryDumpScheduler"*, i32)* [ %23, %17 ], [ %25, %24 ]
  %28 = load i32, i32* %7, align 4
  tail call void %27(%"class.base::trace_event::MemoryDumpScheduler"* %14, i32 %28) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9BindStateIMNS_11trace_event19MemoryDumpSchedulerEFvjEJNS0_17UnretainedWrapperIS3_EEjEE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #10
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = !{!4, !6}
!4 = distinct !{!4, !5, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMNS_11trace_event19MemoryDumpSchedulerEFvNS4_6ConfigEEJNS0_17UnretainedWrapperIS4_EERS5_EEEDcOT0_DpOT1_: argument 0"}
!5 = distinct !{!5, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMNS_11trace_event19MemoryDumpSchedulerEFvNS4_6ConfigEEJNS0_17UnretainedWrapperIS4_EERS5_EEEDcOT0_DpOT1_"}
!6 = distinct !{!6, !7, !"_ZN4base8BindOnceIMNS_11trace_event19MemoryDumpSchedulerEFvNS2_6ConfigEEJNS_8internal17UnretainedWrapperIS2_EERS3_EEENS_12OnceCallbackINS6_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSC_DpOSD_: argument 0"}
!7 = distinct !{!7, !"_ZN4base8BindOnceIMNS_11trace_event19MemoryDumpSchedulerEFvNS2_6ConfigEEJNS_8internal17UnretainedWrapperIS2_EERS3_EEENS_12OnceCallbackINS6_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSC_DpOSD_"}
!8 = !{!9, !11}
!9 = distinct !{!9, !10, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMNS_11trace_event19MemoryDumpSchedulerEFvjEJNS0_17UnretainedWrapperIS4_EERjEEEDcOT0_DpOT1_: argument 0"}
!10 = distinct !{!10, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMNS_11trace_event19MemoryDumpSchedulerEFvjEJNS0_17UnretainedWrapperIS4_EERjEEEDcOT0_DpOT1_"}
!11 = distinct !{!11, !12, !"_ZN4base8BindOnceIMNS_11trace_event19MemoryDumpSchedulerEFvjEJNS_8internal17UnretainedWrapperIS2_EERjEEENS_12OnceCallbackINS5_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_: argument 0"}
!12 = distinct !{!12, !"_ZN4base8BindOnceIMNS_11trace_event19MemoryDumpSchedulerEFvjEJNS_8internal17UnretainedWrapperIS2_EERjEEENS_12OnceCallbackINS5_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_"}
!13 = !{!14, !16}
!14 = distinct !{!14, !15, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMNS_11trace_event19MemoryDumpSchedulerEFvvEJNS0_17UnretainedWrapperIS4_EEEEEDcOT0_DpOT1_: argument 0"}
!15 = distinct !{!15, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMNS_11trace_event19MemoryDumpSchedulerEFvvEJNS0_17UnretainedWrapperIS4_EEEEEDcOT0_DpOT1_"}
!16 = distinct !{!16, !17, !"_ZN4base8BindOnceIMNS_11trace_event19MemoryDumpSchedulerEFvvEJNS_8internal17UnretainedWrapperIS2_EEEEENS_12OnceCallbackINS5_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSA_DpOSB_: argument 0"}
!17 = distinct !{!17, !"_ZN4base8BindOnceIMNS_11trace_event19MemoryDumpSchedulerEFvvEJNS_8internal17UnretainedWrapperIS2_EEEEENS_12OnceCallbackINS5_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSA_DpOSB_"}
!18 = !{!19, !21}
!19 = distinct !{!19, !20, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMNS_11trace_event19MemoryDumpSchedulerEFvjEJNS0_17UnretainedWrapperIS4_EERjEEEDcOT0_DpOT1_: argument 0"}
!20 = distinct !{!20, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMNS_11trace_event19MemoryDumpSchedulerEFvjEJNS0_17UnretainedWrapperIS4_EERjEEEDcOT0_DpOT1_"}
!21 = distinct !{!21, !22, !"_ZN4base8BindOnceIMNS_11trace_event19MemoryDumpSchedulerEFvjEJNS_8internal17UnretainedWrapperIS2_EERjEEENS_12OnceCallbackINS5_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_: argument 0"}
!22 = distinct !{!22, !"_ZN4base8BindOnceIMNS_11trace_event19MemoryDumpSchedulerEFvjEJNS_8internal17UnretainedWrapperIS2_EERjEEENS_12OnceCallbackINS5_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_"}
