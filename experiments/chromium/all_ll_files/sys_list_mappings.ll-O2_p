; ModuleID = '../../native_client/src/trusted/service_runtime/sys_list_mappings.c'
source_filename = "../../native_client/src/trusted/service_runtime/sys_list_mappings.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.NaClAppThread = type { %struct.NaClThreadContext, %struct.NaClMutex, %struct.NaClApp*, i32, i32, %struct.NaClThread, %struct.NaClMutex, i32, %struct.NaClAppThreadSuspendedRegisters*, i32, i64, i8*, i32, i32, i32, %struct.NaClListNode, i32, %struct.NaClCondVar }
%struct.NaClThreadContext = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, i32, i16, i16, i64, i32, i32 }
%struct.NaClApp = type { i8, i64, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.NaClMutex, %struct.NaClCondVar, [151 x %struct.NaClSyscallTableEntry], %struct.NaClResourceNaClApp, i32, i32, %struct.NaClVmmap, %struct.NaClIntervalMultiset*, %struct.NaClDescEffector*, i32, i32, %struct.NaClDesc*, %struct.NaClMutex, i8*, %struct.NaClDynamicRegion*, i32, i32, i32, i32, i64, i32, i32, i32, %struct.NaClCPUFeaturesAbstract*, %struct.NaClValidationCache*, i32, i32, i32, i32, i32, i64, %struct.NaClMutex, %struct.DynArray, i32, %struct.NaClFastMutex, %struct.DynArray, %struct.NaClDebugCallbacks*, %struct.NaClDesc*, %struct.NaClDesc*, %struct.NaClMutex, i32, i32, i32, i32, i32, i32, i32, %struct.NaClValidatorInterface* }
%struct.NaClSyscallTableEntry = type { i32 (%struct.NaClAppThread*)* }
%struct.NaClResourceNaClApp = type { %struct.NaClResource, %struct.NaClApp* }
%struct.NaClResource = type { %struct.NaClResourceSchemes*, i64 }
%struct.NaClResourceSchemes = type { i8*, i32, %struct.NaClDesc* (%struct.NaClResource*, i8*, i32, i32, i32)* }
%struct.NaClVmmap = type { %struct.NaClVmmapEntry**, i64, i64, i32 }
%struct.NaClVmmapEntry = type { i64, i64, i32, i32, i32, %struct.NaClDesc*, i64, i64 }
%struct.NaClIntervalMultiset = type { %struct.NaClIntervalMultisetVtbl* }
%struct.NaClIntervalMultisetVtbl = type { void (%struct.NaClIntervalMultiset*)*, void (%struct.NaClIntervalMultiset*, i32, i32)*, void (%struct.NaClIntervalMultiset*, i32, i32)*, i32 (%struct.NaClIntervalMultiset*, i32, i32)* }
%struct.NaClDescEffector = type opaque
%struct.NaClDynamicRegion = type { i64, i64, i32, i32 }
%struct.NaClCPUFeaturesAbstract = type opaque
%struct.NaClValidationCache = type opaque
%struct.NaClFastMutex = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.DynArray = type { i64, i8**, i64, i32*, i64 }
%struct.NaClDebugCallbacks = type { void (%struct.NaClAppThread*)*, void (%struct.NaClAppThread*)*, void ()* }
%struct.NaClDesc = type { %struct.NaClRefCount, i32, i32, i32, i8* }
%struct.NaClRefCount = type { %struct.NaClRefCountVtbl*, %struct.NaClFastMutex, i64 }
%struct.NaClRefCountVtbl = type { void (%struct.NaClRefCount*)* }
%struct.NaClValidatorInterface = type { i32, i32, i32, i32 (i64, i8*, i64, i32, i32, i32, %struct.NaClCPUFeaturesAbstract*, %struct.NaClValidationMetadata*, %struct.NaClValidationCache*)*, i32 (i64, i8*, i8*, i64, %struct.NaClCPUFeaturesAbstract*, i32 (i8*, i8*, i8)*)*, i32 (i64, i8*, i8*, i64, %struct.NaClCPUFeaturesAbstract*)*, i64, void (%struct.NaClCPUFeaturesAbstract*)*, void (%struct.NaClCPUFeaturesAbstract*)*, i32 (i64, i64, i8*, i64, %struct.NaClCPUFeaturesAbstract*)* }
%struct.NaClValidationMetadata = type opaque
%struct.NaClThread = type { i64 }
%struct.NaClMutex = type { %union.pthread_mutex_t, i32 }
%struct.NaClAppThreadSuspendedRegisters = type opaque
%struct.NaClListNode = type { %struct.NaClListNode*, %struct.NaClListNode* }
%struct.NaClCondVar = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.0, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.0 = type { i64 }
%struct.NaClSysListMappingsState = type { %struct.NaClApp*, %struct.NaClMemMappingInfo*, i32, i32, i32 }
%struct.NaClMemMappingInfo = type { i32, i32, i32, i32, i32 }

@.str = private unnamed_addr constant [42 x i8] c"Out of memory while gathering memory map\0A\00", align 1
@.str.1 = private unnamed_addr constant [45 x i8] c"Illegal address for ListMappings at 0x%08lx\0A\00", align 1
@.str.2 = private unnamed_addr constant [71 x i8] c"NaClSysToUser: sysaddr 0x%08lx, mem_start 0x%08lx, addr space %d bits\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClSysListMappings(%struct.NaClAppThread* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %4 = alloca %struct.NaClSysListMappingsState, align 8
  %5 = getelementptr inbounds %struct.NaClAppThread, %struct.NaClAppThread* %0, i64 0, i32 2
  %6 = load %struct.NaClApp*, %struct.NaClApp** %5, align 8
  %7 = bitcast %struct.NaClSysListMappingsState* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 32, i1 false)
  %8 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %6, i64 0, i32 45
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %40, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.NaClSysListMappingsState, %struct.NaClSysListMappingsState* %4, i64 0, i32 0
  store %struct.NaClApp* %6, %struct.NaClApp** %12, align 8
  %13 = getelementptr inbounds %struct.NaClSysListMappingsState, %struct.NaClSysListMappingsState* %4, i64 0, i32 2
  %14 = getelementptr inbounds %struct.NaClSysListMappingsState, %struct.NaClSysListMappingsState* %4, i64 0, i32 4
  %15 = getelementptr inbounds %struct.NaClSysListMappingsState, %struct.NaClSysListMappingsState* %4, i64 0, i32 1
  %16 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %6, i64 0, i32 17
  %17 = bitcast %struct.NaClMemMappingInfo** %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 20, i1 false)
  tail call void @NaClXMutexLock(%struct.NaClMutex* %16) #6
  %18 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %6, i64 0, i32 23
  call void @NaClVmmapVisit(%struct.NaClVmmap* %18, void (i8*, %struct.NaClVmmapEntry*)* nonnull @NaClSysListMappingsVisit, i8* nonnull %7) #6
  call void @NaClDyncodeVisit(%struct.NaClApp* %6, void (i8*, %struct.NaClDynamicRegion*)* nonnull @NaClSysListMappingsDyncodeVisit, i8* nonnull %7) #6
  call void @NaClXMutexUnlock(%struct.NaClMutex* %16) #6
  %19 = load i32, i32* %14, align 8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %22, label %21

21:                                               ; preds = %11
  call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i64 0, i64 0)) #6
  br label %40

22:                                               ; preds = %11
  %23 = bitcast %struct.NaClMemMappingInfo** %15 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = load i32, i32* %13, align 8
  %26 = zext i32 %25 to i64
  call void @qsort(i8* %24, i64 %26, i64 20, i32 (i8*, i8*)* nonnull @NaClSysListMappingsOrder) #6
  %27 = load i32, i32* %13, align 8
  %28 = icmp ult i32 %27, %2
  %29 = select i1 %28, i32 %27, i32 %2
  %30 = zext i32 %1 to i64
  %31 = load i8*, i8** %23, align 8
  %32 = zext i32 %29 to i64
  %33 = mul nuw nsw i64 %32, 20
  %34 = call i32 @NaClCopyOutToUser(%struct.NaClApp* %6, i64 %30, i8* %31, i64 %33) #6
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %22
  call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.1, i64 0, i64 0), i64 %30) #6
  br label %40

37:                                               ; preds = %22
  %38 = load i8*, i8** %23, align 8
  call void @free(i8* %38) #6
  %39 = load i32, i32* %13, align 8
  br label %40

40:                                               ; preds = %3, %37, %36, %21
  %41 = phi i32 [ -12, %21 ], [ %39, %37 ], [ -14, %36 ], [ -38, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #6
  ret i32 %41
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @NaClXMutexLock(%struct.NaClMutex*) local_unnamed_addr #2

declare void @NaClVmmapVisit(%struct.NaClVmmap*, void (i8*, %struct.NaClVmmapEntry*)*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @NaClSysListMappingsVisit(i8* nocapture, %struct.NaClVmmapEntry*) #0 {
  %3 = getelementptr inbounds %struct.NaClVmmapEntry, %struct.NaClVmmapEntry* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = shl i32 %5, 12
  %7 = getelementptr inbounds %struct.NaClVmmapEntry, %struct.NaClVmmapEntry* %1, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = trunc i64 %8 to i32
  %10 = shl i32 %9, 12
  %11 = tail call i32 @NaClVmmapEntryMaxProt(%struct.NaClVmmapEntry* %1) #6
  %12 = bitcast i8* %0 to %struct.NaClApp**
  %13 = load %struct.NaClApp*, %struct.NaClApp** %12, align 8
  %14 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %13, i64 0, i32 8
  %15 = load i64, i64* %14, align 8
  %16 = zext i32 %6 to i64
  %17 = icmp eq i64 %15, %16
  br i1 %17, label %18, label %24

18:                                               ; preds = %2
  %19 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %13, i64 0, i32 9
  %20 = load i64, i64* %19, align 8
  %21 = add i32 %10, %6
  %22 = zext i32 %21 to i64
  %23 = icmp eq i64 %20, %22
  br i1 %23, label %78, label %24

24:                                               ; preds = %18, %2
  %25 = getelementptr inbounds %struct.NaClVmmapEntry, %struct.NaClVmmapEntry* %1, i64 0, i32 2
  %26 = load i32, i32* %25, align 8
  %27 = getelementptr inbounds %struct.NaClVmmapEntry, %struct.NaClVmmapEntry* %1, i64 0, i32 5
  %28 = load %struct.NaClDesc*, %struct.NaClDesc** %27, align 8
  %29 = icmp ne %struct.NaClDesc* %28, null
  %30 = zext i1 %29 to i32
  %31 = getelementptr inbounds i8, i8* %0, i64 24
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 8
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %78

35:                                               ; preds = %24
  %36 = getelementptr inbounds i8, i8* %0, i64 16
  %37 = bitcast i8* %36 to i32*
  %38 = load i32, i32* %37, align 8
  %39 = getelementptr inbounds i8, i8* %0, i64 20
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %38, %41
  br i1 %42, label %47, label %43

43:                                               ; preds = %35
  %44 = getelementptr inbounds i8, i8* %0, i64 8
  %45 = bitcast i8* %44 to %struct.NaClMemMappingInfo**
  %46 = load %struct.NaClMemMappingInfo*, %struct.NaClMemMappingInfo** %45, align 8
  br label %66

47:                                               ; preds = %35
  %48 = icmp eq i32 %38, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %47
  %50 = shl i32 %38, 1
  %51 = icmp ugt i32 %50, 214748364
  br i1 %51, label %52, label %53

52:                                               ; preds = %49
  store i32 1, i32* %32, align 8
  br label %78

53:                                               ; preds = %49, %47
  %54 = phi i32 [ %50, %49 ], [ 8, %47 ]
  %55 = getelementptr inbounds i8, i8* %0, i64 8
  %56 = bitcast i8* %55 to i8**
  %57 = load i8*, i8** %56, align 8
  %58 = zext i32 %54 to i64
  %59 = mul nuw nsw i64 %58, 20
  %60 = tail call i8* @realloc(i8* %57, i64 %59) #6
  %61 = icmp eq i8* %60, null
  br i1 %61, label %62, label %63

62:                                               ; preds = %53
  store i32 1, i32* %32, align 8
  br label %78

63:                                               ; preds = %53
  store i32 %54, i32* %40, align 4
  store i8* %60, i8** %56, align 8
  %64 = bitcast i8* %60 to %struct.NaClMemMappingInfo*
  %65 = load i32, i32* %37, align 8
  br label %66

66:                                               ; preds = %63, %43
  %67 = phi i32 [ %38, %43 ], [ %65, %63 ]
  %68 = phi %struct.NaClMemMappingInfo* [ %46, %43 ], [ %64, %63 ]
  %69 = zext i32 %67 to i64
  %70 = add i32 %67, 1
  store i32 %70, i32* %37, align 8
  %71 = getelementptr inbounds %struct.NaClMemMappingInfo, %struct.NaClMemMappingInfo* %68, i64 %69, i32 1
  %72 = getelementptr inbounds i32, i32* %71, i64 1
  %73 = bitcast i32* %72 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %73, i8 0, i64 12, i1 false) #6
  %74 = getelementptr inbounds %struct.NaClMemMappingInfo, %struct.NaClMemMappingInfo* %68, i64 %69, i32 0
  store i32 %6, i32* %74, align 4
  store i32 %10, i32* %71, align 4
  %75 = getelementptr inbounds %struct.NaClMemMappingInfo, %struct.NaClMemMappingInfo* %68, i64 %69, i32 2
  store i32 %26, i32* %75, align 4
  %76 = getelementptr inbounds %struct.NaClMemMappingInfo, %struct.NaClMemMappingInfo* %68, i64 %69, i32 3
  store i32 %11, i32* %76, align 4
  %77 = getelementptr inbounds %struct.NaClMemMappingInfo, %struct.NaClMemMappingInfo* %68, i64 %69, i32 4
  store i32 %30, i32* %77, align 4
  br label %78

78:                                               ; preds = %66, %62, %52, %24, %18
  ret void
}

declare void @NaClDyncodeVisit(%struct.NaClApp*, void (i8*, %struct.NaClDynamicRegion*)*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @NaClSysListMappingsDyncodeVisit(i8* nocapture, %struct.NaClDynamicRegion* nocapture readonly) #0 {
  %3 = bitcast i8* %0 to %struct.NaClApp**
  %4 = load %struct.NaClApp*, %struct.NaClApp** %3, align 8
  %5 = getelementptr inbounds %struct.NaClDynamicRegion, %struct.NaClDynamicRegion* %1, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %4, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  %9 = icmp ugt i64 %8, %6
  %10 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %4, i64 0, i32 0
  %11 = load i8, i8* %10, align 8
  br i1 %9, label %17, label %12

12:                                               ; preds = %2
  %13 = zext i8 %11 to i64
  %14 = shl i64 1, %13
  %15 = add i64 %14, %8
  %16 = icmp ugt i64 %15, %6
  br i1 %16, label %20, label %17

17:                                               ; preds = %12, %2
  %18 = zext i8 %11 to i32
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.2, i64 0, i64 0), i64 %6, i64 %8, i32 %18) #6
  %19 = load i64, i64* %7, align 8
  br label %20

20:                                               ; preds = %12, %17
  %21 = phi i64 [ %8, %12 ], [ %19, %17 ]
  %22 = sub i64 %6, %21
  %23 = trunc i64 %22 to i32
  %24 = getelementptr inbounds %struct.NaClDynamicRegion, %struct.NaClDynamicRegion* %1, i64 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = trunc i64 %25 to i32
  %27 = getelementptr inbounds i8, i8* %0, i64 24
  %28 = bitcast i8* %27 to i32*
  %29 = load i32, i32* %28, align 8
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %74

31:                                               ; preds = %20
  %32 = getelementptr inbounds i8, i8* %0, i64 16
  %33 = bitcast i8* %32 to i32*
  %34 = load i32, i32* %33, align 8
  %35 = getelementptr inbounds i8, i8* %0, i64 20
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 4
  %38 = icmp eq i32 %34, %37
  br i1 %38, label %43, label %39

39:                                               ; preds = %31
  %40 = getelementptr inbounds i8, i8* %0, i64 8
  %41 = bitcast i8* %40 to %struct.NaClMemMappingInfo**
  %42 = load %struct.NaClMemMappingInfo*, %struct.NaClMemMappingInfo** %41, align 8
  br label %62

43:                                               ; preds = %31
  %44 = icmp eq i32 %34, 0
  br i1 %44, label %49, label %45

45:                                               ; preds = %43
  %46 = shl i32 %34, 1
  %47 = icmp ugt i32 %46, 214748364
  br i1 %47, label %48, label %49

48:                                               ; preds = %45
  store i32 1, i32* %28, align 8
  br label %74

49:                                               ; preds = %45, %43
  %50 = phi i32 [ %46, %45 ], [ 8, %43 ]
  %51 = getelementptr inbounds i8, i8* %0, i64 8
  %52 = bitcast i8* %51 to i8**
  %53 = load i8*, i8** %52, align 8
  %54 = zext i32 %50 to i64
  %55 = mul nuw nsw i64 %54, 20
  %56 = tail call i8* @realloc(i8* %53, i64 %55) #6
  %57 = icmp eq i8* %56, null
  br i1 %57, label %58, label %59

58:                                               ; preds = %49
  store i32 1, i32* %28, align 8
  br label %74

59:                                               ; preds = %49
  store i32 %50, i32* %36, align 4
  store i8* %56, i8** %52, align 8
  %60 = bitcast i8* %56 to %struct.NaClMemMappingInfo*
  %61 = load i32, i32* %33, align 8
  br label %62

62:                                               ; preds = %59, %39
  %63 = phi i32 [ %34, %39 ], [ %61, %59 ]
  %64 = phi %struct.NaClMemMappingInfo* [ %42, %39 ], [ %60, %59 ]
  %65 = zext i32 %63 to i64
  %66 = add i32 %63, 1
  store i32 %66, i32* %33, align 8
  %67 = getelementptr inbounds %struct.NaClMemMappingInfo, %struct.NaClMemMappingInfo* %64, i64 %65, i32 1
  %68 = getelementptr inbounds i32, i32* %67, i64 1
  %69 = bitcast i32* %68 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %69, i8 0, i64 12, i1 false) #6
  %70 = getelementptr inbounds %struct.NaClMemMappingInfo, %struct.NaClMemMappingInfo* %64, i64 %65, i32 0
  store i32 %23, i32* %70, align 4
  store i32 %26, i32* %67, align 4
  %71 = getelementptr inbounds %struct.NaClMemMappingInfo, %struct.NaClMemMappingInfo* %64, i64 %65, i32 2
  store i32 5, i32* %71, align 4
  %72 = getelementptr inbounds %struct.NaClMemMappingInfo, %struct.NaClMemMappingInfo* %64, i64 %65, i32 3
  store i32 5, i32* %72, align 4
  %73 = getelementptr inbounds %struct.NaClMemMappingInfo, %struct.NaClMemMappingInfo* %64, i64 %65, i32 4
  store i32 0, i32* %73, align 4
  br label %74

74:                                               ; preds = %20, %48, %58, %62
  ret void
}

declare void @NaClXMutexUnlock(%struct.NaClMutex*) local_unnamed_addr #2

declare void @NaClLog(i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: nofree
declare void @qsort(i8*, i64, i64, i32 (i8*, i8*)* nocapture) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @NaClSysListMappingsOrder(i8* nocapture readonly, i8* nocapture readonly) #4 {
  %3 = bitcast i8* %0 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = bitcast i8* %1 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = icmp ult i32 %4, %6
  %8 = icmp ugt i32 %4, %6
  %9 = zext i1 %8 to i32
  %10 = select i1 %7, i32 -1, i32 %9
  ret i32 %10
}

declare i32 @NaClCopyOutToUser(%struct.NaClApp*, i64, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @NaClVmmapEntryMaxProt(%struct.NaClVmmapEntry*) local_unnamed_addr #2

; Function Attrs: nounwind
declare noalias i8* @realloc(i8* nocapture, i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
