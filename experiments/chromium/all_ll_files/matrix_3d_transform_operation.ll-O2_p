; ModuleID = '../../third_party/blink/renderer/platform/transforms/matrix_3d_transform_operation.cc'
source_filename = "../../third_party/blink/renderer/platform/transforms/matrix_3d_transform_operation.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::Matrix3DTransformOperation" = type { %"class.blink::TransformOperation.base", %"class.blink::TransformationMatrix" }
%"class.blink::TransformOperation.base" = type <{ i32 (...)**, %"class.WTF::RefCounted" }>
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::TransformationMatrix" = type { %"struct.blink::TransformationMatrix::Matrix4" }
%"struct.blink::TransformationMatrix::Matrix4" = type { [4 x [4 x double]] }
%"class.blink::TransformOperation" = type <{ i32 (...)**, %"class.WTF::RefCounted", [4 x i8] }>
%"struct.blink::TransformationMatrix::DecomposedType" = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%"class.blink::FloatSize" = type { float, float }

$_ZNK5blink26Matrix3DTransformOperation5ApplyERNS_20TransformationMatrixERKNS_9FloatSizeE = comdat any

$_ZN5blink18TransformOperationD2Ev = comdat any

$_ZN5blink26Matrix3DTransformOperationD0Ev = comdat any

$_ZNK5blink26Matrix3DTransformOperationeqERKNS_18TransformOperationE = comdat any

$_ZNK5blink26Matrix3DTransformOperation7GetTypeEv = comdat any

$_ZNK5blink18TransformOperation13PrimitiveTypeEv = comdat any

$_ZNK5blink26Matrix3DTransformOperation22PreservesAxisAlignmentEv = comdat any

$_ZNK5blink26Matrix3DTransformOperation23IsIdentityOrTranslationEv = comdat any

$_ZNK5blink18TransformOperation24HasNonTrivial3DComponentEv = comdat any

$_ZNK5blink18TransformOperation19BoxSizeDependenciesEv = comdat any

$_ZNK5blink20TransformationMatrixeqERKS0_ = comdat any

@_ZTVN5blink26Matrix3DTransformOperationE = hidden unnamed_addr constant { [15 x i8*] } { [15 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::TransformOperation"*)* @_ZN5blink18TransformOperationD2Ev to i8*), i8* bitcast (void (%"class.blink::Matrix3DTransformOperation"*)* @_ZN5blink26Matrix3DTransformOperationD0Ev to i8*), i8* bitcast (i1 (%"class.blink::Matrix3DTransformOperation"*, %"class.blink::TransformOperation"*)* @_ZNK5blink26Matrix3DTransformOperationeqERKNS_18TransformOperationE to i8*), i8* bitcast (void (%"class.blink::Matrix3DTransformOperation"*, %"class.blink::TransformationMatrix"*, %"class.blink::FloatSize"*)* @_ZNK5blink26Matrix3DTransformOperation5ApplyERNS_20TransformationMatrixERKNS_9FloatSizeE to i8*), i8* bitcast (%"class.blink::TransformOperation"* (%"class.blink::Matrix3DTransformOperation"*, %"class.blink::TransformOperation"*)* @_ZN5blink26Matrix3DTransformOperation10AccumulateERKNS_18TransformOperationE to i8*), i8* bitcast (%"class.blink::TransformOperation"* (%"class.blink::Matrix3DTransformOperation"*, %"class.blink::TransformOperation"*, double, i1)* @_ZN5blink26Matrix3DTransformOperation5BlendEPKNS_18TransformOperationEdb to i8*), i8* bitcast (%"class.blink::TransformOperation"* (%"class.blink::Matrix3DTransformOperation"*, double)* @_ZN5blink26Matrix3DTransformOperation4ZoomEd to i8*), i8* bitcast (i32 (%"class.blink::Matrix3DTransformOperation"*)* @_ZNK5blink26Matrix3DTransformOperation7GetTypeEv to i8*), i8* bitcast (i32 (%"class.blink::TransformOperation"*)* @_ZNK5blink18TransformOperation13PrimitiveTypeEv to i8*), i8* bitcast (i1 (%"class.blink::Matrix3DTransformOperation"*)* @_ZNK5blink26Matrix3DTransformOperation22PreservesAxisAlignmentEv to i8*), i8* bitcast (i1 (%"class.blink::Matrix3DTransformOperation"*)* @_ZNK5blink26Matrix3DTransformOperation23IsIdentityOrTranslationEv to i8*), i8* bitcast (i1 (%"class.blink::TransformOperation"*)* @_ZNK5blink18TransformOperation24HasNonTrivial3DComponentEv to i8*), i8* bitcast (i32 (%"class.blink::TransformOperation"*)* @_ZNK5blink18TransformOperation19BoxSizeDependenciesEv to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::TransformOperation"* @_ZN5blink26Matrix3DTransformOperation10AccumulateERKNS_18TransformOperationE(%"class.blink::Matrix3DTransformOperation"*, %"class.blink::TransformOperation"* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %"struct.blink::TransformationMatrix::DecomposedType", align 16
  %4 = alloca %"struct.blink::TransformationMatrix::DecomposedType", align 16
  %5 = alloca %"class.blink::TransformationMatrix", align 8
  %6 = getelementptr inbounds %"class.blink::Matrix3DTransformOperation", %"class.blink::Matrix3DTransformOperation"* %0, i64 0, i32 1
  %7 = tail call zeroext i1 @_ZNK5blink20TransformationMatrix12IsInvertibleEv(%"class.blink::TransformationMatrix"* %6) #6
  br i1 %7, label %8, label %149

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::TransformOperation", %"class.blink::TransformOperation"* %1, i64 1
  %10 = bitcast %"class.blink::TransformOperation"* %9 to %"class.blink::TransformationMatrix"*
  %11 = tail call zeroext i1 @_ZNK5blink20TransformationMatrix12IsInvertibleEv(%"class.blink::TransformationMatrix"* %10) #6
  br i1 %11, label %12, label %149

12:                                               ; preds = %8
  %13 = bitcast %"struct.blink::TransformationMatrix::DecomposedType"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %13) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -1, i64 136, i1 false)
  %14 = bitcast %"struct.blink::TransformationMatrix::DecomposedType"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %14) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -1, i64 136, i1 false)
  %15 = call zeroext i1 @_ZNK5blink20TransformationMatrix9DecomposeERNS0_14DecomposedTypeE(%"class.blink::TransformationMatrix"* %6, %"struct.blink::TransformationMatrix::DecomposedType"* nonnull dereferenceable(136) %3) #6
  br i1 %15, label %16, label %147

16:                                               ; preds = %12
  %17 = call zeroext i1 @_ZNK5blink20TransformationMatrix9DecomposeERNS0_14DecomposedTypeE(%"class.blink::TransformationMatrix"* %10, %"struct.blink::TransformationMatrix::DecomposedType"* nonnull dereferenceable(136) %4) #6
  br i1 %17, label %18, label %147

18:                                               ; preds = %16
  %19 = bitcast %"struct.blink::TransformationMatrix::DecomposedType"* %4 to <2 x double>*
  %20 = load <2 x double>, <2 x double>* %19, align 16
  %21 = fadd <2 x double> %20, <double -1.000000e+00, double -1.000000e+00>
  %22 = bitcast %"struct.blink::TransformationMatrix::DecomposedType"* %3 to <2 x double>*
  %23 = load <2 x double>, <2 x double>* %22, align 16
  %24 = fadd <2 x double> %23, %21
  %25 = bitcast %"struct.blink::TransformationMatrix::DecomposedType"* %3 to <2 x double>*
  store <2 x double> %24, <2 x double>* %25, align 16
  %26 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 2
  %27 = load double, double* %26, align 16
  %28 = fadd double %27, -1.000000e+00
  %29 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %3, i64 0, i32 2
  %30 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 3
  %31 = load double, double* %30, align 8
  %32 = bitcast double* %29 to <2 x double>*
  %33 = load <2 x double>, <2 x double>* %32, align 16
  %34 = insertelement <2 x double> undef, double %28, i32 0
  %35 = insertelement <2 x double> %34, double %31, i32 1
  %36 = fadd <2 x double> %33, %35
  %37 = bitcast double* %29 to <2 x double>*
  store <2 x double> %36, <2 x double>* %37, align 16
  %38 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 4
  %39 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %3, i64 0, i32 4
  %40 = bitcast double* %38 to <2 x double>*
  %41 = load <2 x double>, <2 x double>* %40, align 16
  %42 = bitcast double* %39 to <2 x double>*
  %43 = load <2 x double>, <2 x double>* %42, align 16
  %44 = fadd <2 x double> %41, %43
  %45 = bitcast double* %39 to <2 x double>*
  store <2 x double> %44, <2 x double>* %45, align 16
  %46 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %3, i64 0, i32 6
  %47 = load double, double* %46, align 16
  %48 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %3, i64 0, i32 7
  %49 = load double, double* %48, align 8
  %50 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %3, i64 0, i32 8
  %51 = load double, double* %50, align 16
  %52 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %3, i64 0, i32 9
  %53 = load double, double* %52, align 8
  %54 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 6
  %55 = bitcast double* %54 to <2 x double>*
  %56 = load <2 x double>, <2 x double>* %55, align 16
  %57 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 8
  %58 = bitcast double* %57 to <2 x double>*
  %59 = load <2 x double>, <2 x double>* %58, align 16
  %60 = insertelement <2 x double> undef, double %53, i32 0
  %61 = shufflevector <2 x double> %60, <2 x double> undef, <2 x i32> zeroinitializer
  %62 = fmul <2 x double> %61, %56
  %63 = insertelement <2 x double> undef, double %47, i32 0
  %64 = shufflevector <2 x double> %63, <2 x double> undef, <2 x i32> zeroinitializer
  %65 = shufflevector <2 x double> %59, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %66 = fmul <2 x double> %64, %65
  %67 = fadd <2 x double> %62, %66
  %68 = fsub <2 x double> %62, %66
  %69 = shufflevector <2 x double> %67, <2 x double> %68, <2 x i32> <i32 0, i32 3>
  %70 = insertelement <2 x double> undef, double %49, i32 0
  %71 = shufflevector <2 x double> %70, <2 x double> undef, <2 x i32> zeroinitializer
  %72 = fmul <2 x double> %71, %59
  %73 = fadd <2 x double> %72, %69
  %74 = insertelement <2 x double> undef, double %51, i32 0
  %75 = shufflevector <2 x double> %74, <2 x double> undef, <2 x i32> zeroinitializer
  %76 = shufflevector <2 x double> %56, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %77 = shufflevector <2 x double> %76, <2 x double> %56, <2 x i32> <i32 0, i32 2>
  %78 = fmul <2 x double> %75, %77
  %79 = fsub <2 x double> %73, %78
  %80 = fadd <2 x double> %73, %78
  %81 = shufflevector <2 x double> %79, <2 x double> %80, <2 x i32> <i32 0, i32 3>
  %82 = insertelement <2 x double> %63, double %53, i32 1
  %83 = shufflevector <2 x double> %76, <2 x double> %59, <2 x i32> <i32 0, i32 3>
  %84 = fmul <2 x double> %82, %83
  %85 = insertelement <2 x double> %60, double %47, i32 1
  %86 = shufflevector <2 x double> %59, <2 x double> %56, <2 x i32> <i32 0, i32 2>
  %87 = fmul <2 x double> %85, %86
  %88 = fadd <2 x double> %84, %87
  %89 = fsub <2 x double> %84, %87
  %90 = shufflevector <2 x double> %88, <2 x double> %89, <2 x i32> <i32 0, i32 3>
  %91 = fmul <2 x double> %71, %56
  %92 = fsub <2 x double> %90, %91
  %93 = shufflevector <2 x double> %59, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %94 = fmul <2 x double> %75, %93
  %95 = fadd <2 x double> %92, %94
  %96 = fsub <2 x double> %92, %94
  %97 = shufflevector <2 x double> %95, <2 x double> %96, <2 x i32> <i32 0, i32 3>
  %98 = bitcast double* %46 to <2 x double>*
  store <2 x double> %81, <2 x double>* %98, align 16
  %99 = bitcast double* %50 to <2 x double>*
  store <2 x double> %97, <2 x double>* %99, align 16
  %100 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 10
  %101 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %3, i64 0, i32 10
  %102 = bitcast double* %100 to <2 x double>*
  %103 = load <2 x double>, <2 x double>* %102, align 16
  %104 = bitcast double* %101 to <2 x double>*
  %105 = load <2 x double>, <2 x double>* %104, align 16
  %106 = fadd <2 x double> %103, %105
  %107 = bitcast double* %101 to <2 x double>*
  store <2 x double> %106, <2 x double>* %107, align 16
  %108 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 12
  %109 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %3, i64 0, i32 12
  %110 = bitcast double* %108 to <2 x double>*
  %111 = load <2 x double>, <2 x double>* %110, align 16
  %112 = bitcast double* %109 to <2 x double>*
  %113 = load <2 x double>, <2 x double>* %112, align 16
  %114 = fadd <2 x double> %111, %113
  %115 = bitcast double* %109 to <2 x double>*
  store <2 x double> %114, <2 x double>* %115, align 16
  %116 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 14
  %117 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %3, i64 0, i32 14
  %118 = bitcast double* %116 to <2 x double>*
  %119 = load <2 x double>, <2 x double>* %118, align 16
  %120 = bitcast double* %117 to <2 x double>*
  %121 = load <2 x double>, <2 x double>* %120, align 16
  %122 = fadd <2 x double> %119, %121
  %123 = bitcast double* %117 to <2 x double>*
  store <2 x double> %122, <2 x double>* %123, align 16
  %124 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %4, i64 0, i32 16
  %125 = load double, double* %124, align 16
  %126 = fadd double %125, -1.000000e+00
  %127 = getelementptr inbounds %"struct.blink::TransformationMatrix::DecomposedType", %"struct.blink::TransformationMatrix::DecomposedType"* %3, i64 0, i32 16
  %128 = load double, double* %127, align 16
  %129 = fadd double %128, %126
  store double %129, double* %127, align 16
  %130 = bitcast %"class.blink::TransformationMatrix"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %130) #6
  %131 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %5, i64 0, i32 0, i32 0, i64 0, i64 0
  store double 1.000000e+00, double* %131, align 8
  %132 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %5, i64 0, i32 0, i32 0, i64 0, i64 1
  %133 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %5, i64 0, i32 0, i32 0, i64 1, i64 1
  %134 = bitcast double* %132 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %134, i8 0, i64 32, i1 false) #6
  store double 1.000000e+00, double* %133, align 8
  %135 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %5, i64 0, i32 0, i32 0, i64 1, i64 2
  %136 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %5, i64 0, i32 0, i32 0, i64 2, i64 2
  %137 = bitcast double* %135 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %137, i8 0, i64 32, i1 false) #6
  store double 1.000000e+00, double* %136, align 8
  %138 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %5, i64 0, i32 0, i32 0, i64 2, i64 3
  %139 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %5, i64 0, i32 0, i32 0, i64 3, i64 3
  %140 = bitcast double* %138 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %140, i8 0, i64 32, i1 false) #6
  store double 1.000000e+00, double* %139, align 8
  call void @_ZN5blink20TransformationMatrix9RecomposeERKNS0_14DecomposedTypeE(%"class.blink::TransformationMatrix"* nonnull %5, %"struct.blink::TransformationMatrix::DecomposedType"* nonnull dereferenceable(136) %3) #6
  %141 = call noalias i8* @malloc(i64 144) #6
  %142 = getelementptr inbounds i8, i8* %141, i64 8
  %143 = bitcast i8* %142 to i32*
  store i32 1, i32* %143, align 4
  %144 = bitcast i8* %141 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN5blink26Matrix3DTransformOperationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %144, align 8
  %145 = getelementptr inbounds i8, i8* %141, i64 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %145, i8* nonnull align 8 %130, i64 128, i1 false) #6
  %146 = ptrtoint i8* %141 to i64
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %130) #6
  br label %147

147:                                              ; preds = %12, %16, %18
  %148 = phi i64 [ %146, %18 ], [ 0, %16 ], [ 0, %12 ]
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %14) #6
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %13) #6
  br label %149

149:                                              ; preds = %2, %8, %147
  %150 = phi i64 [ %148, %147 ], [ 0, %8 ], [ 0, %2 ]
  %151 = inttoptr i64 %150 to %"class.blink::TransformOperation"*
  ret %"class.blink::TransformOperation"* %151
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZNK5blink20TransformationMatrix12IsInvertibleEv(%"class.blink::TransformationMatrix"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZNK5blink20TransformationMatrix9DecomposeERNS0_14DecomposedTypeE(%"class.blink::TransformationMatrix"*, %"struct.blink::TransformationMatrix::DecomposedType"* dereferenceable(136)) local_unnamed_addr #2

declare void @_ZN5blink20TransformationMatrix9RecomposeERKNS0_14DecomposedTypeE(%"class.blink::TransformationMatrix"*, %"struct.blink::TransformationMatrix::DecomposedType"* dereferenceable(136)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::TransformOperation"* @_ZN5blink26Matrix3DTransformOperation5BlendEPKNS_18TransformOperationEdb(%"class.blink::Matrix3DTransformOperation"* nocapture readonly, %"class.blink::TransformOperation"*, double, i1 zeroext) unnamed_addr #0 align 2 {
  %5 = alloca %"class.blink::TransformationMatrix", align 8
  %6 = alloca [4 x [4 x double]], align 8
  %7 = alloca %"class.blink::FloatSize", align 4
  %8 = alloca %"class.blink::TransformationMatrix", align 8
  %9 = alloca %"class.blink::TransformationMatrix", align 8
  %10 = bitcast %"class.blink::FloatSize"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #6
  %11 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %7, i64 0, i32 0
  %12 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %7, i64 0, i32 1
  store float 0.000000e+00, float* %11, align 4
  store float 0.000000e+00, float* %12, align 4
  %13 = bitcast %"class.blink::TransformationMatrix"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %13) #6
  %14 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %8, i64 0, i32 0, i32 0, i64 0, i64 0
  store double 1.000000e+00, double* %14, align 8
  %15 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %8, i64 0, i32 0, i32 0, i64 0, i64 1
  %16 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %8, i64 0, i32 0, i32 0, i64 1, i64 1
  %17 = bitcast double* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 32, i1 false) #6
  store double 1.000000e+00, double* %16, align 8
  %18 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %8, i64 0, i32 0, i32 0, i64 1, i64 2
  %19 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %8, i64 0, i32 0, i32 0, i64 2, i64 2
  %20 = bitcast double* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 32, i1 false) #6
  store double 1.000000e+00, double* %19, align 8
  %21 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %8, i64 0, i32 0, i32 0, i64 2, i64 3
  %22 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %8, i64 0, i32 0, i32 0, i64 3, i64 3
  %23 = bitcast double* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 32, i1 false) #6
  store double 1.000000e+00, double* %22, align 8
  %24 = bitcast %"class.blink::TransformationMatrix"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %24) #6
  %25 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %9, i64 0, i32 0, i32 0, i64 0, i64 0
  store double 1.000000e+00, double* %25, align 8
  %26 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %9, i64 0, i32 0, i32 0, i64 0, i64 1
  %27 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %9, i64 0, i32 0, i32 0, i64 1, i64 1
  %28 = bitcast double* %26 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 0, i64 32, i1 false) #6
  store double 1.000000e+00, double* %27, align 8
  %29 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %9, i64 0, i32 0, i32 0, i64 1, i64 2
  %30 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %9, i64 0, i32 0, i32 0, i64 2, i64 2
  %31 = bitcast double* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 32, i1 false) #6
  store double 1.000000e+00, double* %30, align 8
  %32 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %9, i64 0, i32 0, i32 0, i64 2, i64 3
  %33 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %9, i64 0, i32 0, i32 0, i64 3, i64 3
  %34 = bitcast double* %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %34, i8 0, i64 32, i1 false) #6
  store double 1.000000e+00, double* %33, align 8
  %35 = icmp eq %"class.blink::TransformOperation"* %1, null
  br i1 %35, label %42, label %36

36:                                               ; preds = %4
  %37 = bitcast %"class.blink::TransformOperation"* %1 to void (%"class.blink::TransformOperation"*, %"class.blink::TransformationMatrix"*, %"class.blink::FloatSize"*)***
  %38 = load void (%"class.blink::TransformOperation"*, %"class.blink::TransformationMatrix"*, %"class.blink::FloatSize"*)**, void (%"class.blink::TransformOperation"*, %"class.blink::TransformationMatrix"*, %"class.blink::FloatSize"*)*** %37, align 8
  %39 = getelementptr inbounds void (%"class.blink::TransformOperation"*, %"class.blink::TransformationMatrix"*, %"class.blink::FloatSize"*)*, void (%"class.blink::TransformOperation"*, %"class.blink::TransformationMatrix"*, %"class.blink::FloatSize"*)** %38, i64 3
  %40 = load void (%"class.blink::TransformOperation"*, %"class.blink::TransformationMatrix"*, %"class.blink::FloatSize"*)*, void (%"class.blink::TransformOperation"*, %"class.blink::TransformationMatrix"*, %"class.blink::FloatSize"*)** %39, align 8
  call void %40(%"class.blink::TransformOperation"* nonnull %1, %"class.blink::TransformationMatrix"* nonnull dereferenceable(128) %8, %"class.blink::FloatSize"* nonnull dereferenceable(8) %7) #6
  %41 = call zeroext i1 @_ZNK5blink20TransformationMatrix12IsInvertibleEv(%"class.blink::TransformationMatrix"* nonnull %8) #6
  br i1 %41, label %42, label %58

42:                                               ; preds = %4, %36
  %43 = bitcast %"class.blink::TransformationMatrix"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %43) #6
  %44 = getelementptr inbounds %"class.blink::Matrix3DTransformOperation", %"class.blink::Matrix3DTransformOperation"* %0, i64 0, i32 1
  %45 = bitcast %"class.blink::TransformationMatrix"* %44 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %43, i8* align 8 %45, i64 128, i1 false) #6
  %46 = call dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix8MultiplyERKS0_(%"class.blink::TransformationMatrix"* nonnull %9, %"class.blink::TransformationMatrix"* nonnull dereferenceable(128) %5) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %43) #6
  %47 = call zeroext i1 @_ZNK5blink20TransformationMatrix12IsInvertibleEv(%"class.blink::TransformationMatrix"* nonnull %9) #6
  br i1 %47, label %48, label %58

48:                                               ; preds = %42
  br i1 %3, label %49, label %51

49:                                               ; preds = %48
  %50 = bitcast [4 x [4 x double]]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %50)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %50, i8* nonnull align 8 %13, i64 128, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %13, i8* nonnull align 8 %24, i64 128, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %24, i8* nonnull align 8 %50, i64 128, i1 false) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %50)
  br label %51

51:                                               ; preds = %48, %49
  call void @_ZN5blink20TransformationMatrix5BlendERKS0_d(%"class.blink::TransformationMatrix"* nonnull %9, %"class.blink::TransformationMatrix"* nonnull dereferenceable(128) %8, double %2) #6
  %52 = call noalias i8* @malloc(i64 144) #6
  %53 = getelementptr inbounds i8, i8* %52, i64 8
  %54 = bitcast i8* %53 to i32*
  store i32 1, i32* %54, align 4
  %55 = bitcast i8* %52 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN5blink26Matrix3DTransformOperationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %55, align 8
  %56 = getelementptr inbounds i8, i8* %52, i64 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* nonnull align 8 %24, i64 128, i1 false) #6
  %57 = bitcast i8* %52 to %"class.blink::TransformOperation"*
  br label %58

58:                                               ; preds = %42, %36, %51
  %59 = phi %"class.blink::TransformOperation"* [ %57, %51 ], [ null, %36 ], [ null, %42 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %24) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %13) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #6
  ret %"class.blink::TransformOperation"* %59
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5blink26Matrix3DTransformOperation5ApplyERNS_20TransformationMatrixERKNS_9FloatSizeE(%"class.blink::Matrix3DTransformOperation"*, %"class.blink::TransformationMatrix"* dereferenceable(128), %"class.blink::FloatSize"* dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.blink::TransformationMatrix", align 8
  %5 = bitcast %"class.blink::TransformationMatrix"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %5) #6
  %6 = getelementptr inbounds %"class.blink::Matrix3DTransformOperation", %"class.blink::Matrix3DTransformOperation"* %0, i64 0, i32 1
  %7 = bitcast %"class.blink::TransformationMatrix"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %5, i8* align 8 %7, i64 128, i1 false) #6
  %8 = call dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix8MultiplyERKS0_(%"class.blink::TransformationMatrix"* %1, %"class.blink::TransformationMatrix"* nonnull dereferenceable(128) %4) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %5) #6
  ret void
}

declare void @_ZN5blink20TransformationMatrix5BlendERKS0_d(%"class.blink::TransformationMatrix"*, %"class.blink::TransformationMatrix"* dereferenceable(128), double) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::TransformOperation"* @_ZN5blink26Matrix3DTransformOperation4ZoomEd(%"class.blink::Matrix3DTransformOperation"* nocapture readonly, double) unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::TransformationMatrix", align 8
  %4 = bitcast %"class.blink::TransformationMatrix"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #6
  %5 = getelementptr inbounds %"class.blink::Matrix3DTransformOperation", %"class.blink::Matrix3DTransformOperation"* %0, i64 0, i32 1
  %6 = bitcast %"class.blink::TransformationMatrix"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %6, i64 128, i1 false) #6
  %7 = call dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix4ZoomEd(%"class.blink::TransformationMatrix"* nonnull %3, double %1) #6
  %8 = call noalias i8* @malloc(i64 144) #6
  %9 = getelementptr inbounds i8, i8* %8, i64 8
  %10 = bitcast i8* %9 to i32*
  store i32 1, i32* %10, align 4
  %11 = bitcast i8* %8 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN5blink26Matrix3DTransformOperationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %12 = getelementptr inbounds i8, i8* %8, i64 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* nonnull align 8 %4, i64 128, i1 false) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #6
  %13 = bitcast i8* %8 to %"class.blink::TransformOperation"*
  ret %"class.blink::TransformOperation"* %13
}

declare dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix4ZoomEd(%"class.blink::TransformationMatrix"*, double) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink18TransformOperationD2Ev(%"class.blink::TransformOperation"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink26Matrix3DTransformOperationD0Ev(%"class.blink::Matrix3DTransformOperation"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"class.blink::Matrix3DTransformOperation"* %0 to i8*
  tail call void @free(i8* %2) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink26Matrix3DTransformOperationeqERKNS_18TransformOperationE(%"class.blink::Matrix3DTransformOperation"*, %"class.blink::TransformOperation"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.blink::Matrix3DTransformOperation"* %0 to %"class.blink::TransformOperation"*
  %4 = bitcast %"class.blink::TransformOperation"* %1 to i32 (%"class.blink::TransformOperation"*)***
  %5 = load i32 (%"class.blink::TransformOperation"*)**, i32 (%"class.blink::TransformOperation"*)*** %4, align 8
  %6 = getelementptr inbounds i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %5, i64 7
  %7 = load i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %6, align 8
  %8 = tail call i32 %7(%"class.blink::TransformOperation"* %1) #6
  %9 = bitcast %"class.blink::Matrix3DTransformOperation"* %0 to i32 (%"class.blink::TransformOperation"*)***
  %10 = load i32 (%"class.blink::TransformOperation"*)**, i32 (%"class.blink::TransformOperation"*)*** %9, align 8
  %11 = getelementptr inbounds i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %10, i64 7
  %12 = load i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %11, align 8
  %13 = tail call i32 %12(%"class.blink::TransformOperation"* %3) #6
  %14 = icmp eq i32 %8, %13
  br i1 %14, label %15, label %20

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.blink::Matrix3DTransformOperation", %"class.blink::Matrix3DTransformOperation"* %0, i64 0, i32 1
  %17 = getelementptr inbounds %"class.blink::TransformOperation", %"class.blink::TransformOperation"* %1, i64 1
  %18 = bitcast %"class.blink::TransformOperation"* %17 to %"class.blink::TransformationMatrix"*
  %19 = tail call zeroext i1 @_ZNK5blink20TransformationMatrixeqERKS0_(%"class.blink::TransformationMatrix"* %16, %"class.blink::TransformationMatrix"* dereferenceable(128) %18)
  br label %20

20:                                               ; preds = %2, %15
  %21 = phi i1 [ %19, %15 ], [ false, %2 ]
  ret i1 %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink26Matrix3DTransformOperation7GetTypeEv(%"class.blink::Matrix3DTransformOperation"*) unnamed_addr #0 comdat align 2 {
  ret i32 18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink18TransformOperation13PrimitiveTypeEv(%"class.blink::TransformOperation"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.blink::TransformOperation"* %0 to i32 (%"class.blink::TransformOperation"*)***
  %3 = load i32 (%"class.blink::TransformOperation"*)**, i32 (%"class.blink::TransformOperation"*)*** %2, align 8
  %4 = getelementptr inbounds i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %3, i64 7
  %5 = load i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %4, align 8
  %6 = tail call i32 %5(%"class.blink::TransformOperation"* %0) #6
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink26Matrix3DTransformOperation22PreservesAxisAlignmentEv(%"class.blink::Matrix3DTransformOperation"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::Matrix3DTransformOperation", %"class.blink::Matrix3DTransformOperation"* %0, i64 0, i32 1
  %3 = tail call zeroext i1 @_ZNK5blink20TransformationMatrix24Preserves2dAxisAlignmentEv(%"class.blink::TransformationMatrix"* %2) #6
  ret i1 %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink26Matrix3DTransformOperation23IsIdentityOrTranslationEv(%"class.blink::Matrix3DTransformOperation"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::Matrix3DTransformOperation", %"class.blink::Matrix3DTransformOperation"* %0, i64 0, i32 1, i32 0, i32 0, i64 0, i64 0
  %3 = load double, double* %2, align 8
  %4 = fcmp oeq double %3, 1.000000e+00
  br i1 %4, label %5, label %53

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::Matrix3DTransformOperation", %"class.blink::Matrix3DTransformOperation"* %0, i64 0, i32 1, i32 0, i32 0, i64 0, i64 1
  %7 = load double, double* %6, align 8
  %8 = fcmp oeq double %7, 0.000000e+00
  br i1 %8, label %9, label %53

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.blink::Matrix3DTransformOperation", %"class.blink::Matrix3DTransformOperation"* %0, i64 0, i32 1, i32 0, i32 0, i64 0, i64 2
  %11 = load double, double* %10, align 8
  %12 = fcmp oeq double %11, 0.000000e+00
  br i1 %12, label %13, label %53

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.blink::Matrix3DTransformOperation", %"class.blink::Matrix3DTransformOperation"* %0, i64 0, i32 1, i32 0, i32 0, i64 0, i64 3
  %15 = load double, double* %14, align 8
  %16 = fcmp oeq double %15, 0.000000e+00
  br i1 %16, label %17, label %53

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.blink::Matrix3DTransformOperation", %"class.blink::Matrix3DTransformOperation"* %0, i64 0, i32 1, i32 0, i32 0, i64 1, i64 0
  %19 = load double, double* %18, align 8
  %20 = fcmp oeq double %19, 0.000000e+00
  br i1 %20, label %21, label %53

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.blink::Matrix3DTransformOperation", %"class.blink::Matrix3DTransformOperation"* %0, i64 0, i32 1, i32 0, i32 0, i64 1, i64 1
  %23 = load double, double* %22, align 8
  %24 = fcmp oeq double %23, 1.000000e+00
  br i1 %24, label %25, label %53

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.blink::Matrix3DTransformOperation", %"class.blink::Matrix3DTransformOperation"* %0, i64 0, i32 1, i32 0, i32 0, i64 1, i64 2
  %27 = load double, double* %26, align 8
  %28 = fcmp oeq double %27, 0.000000e+00
  br i1 %28, label %29, label %53

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.blink::Matrix3DTransformOperation", %"class.blink::Matrix3DTransformOperation"* %0, i64 0, i32 1, i32 0, i32 0, i64 1, i64 3
  %31 = load double, double* %30, align 8
  %32 = fcmp oeq double %31, 0.000000e+00
  br i1 %32, label %33, label %53

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"class.blink::Matrix3DTransformOperation", %"class.blink::Matrix3DTransformOperation"* %0, i64 0, i32 1, i32 0, i32 0, i64 2, i64 0
  %35 = load double, double* %34, align 8
  %36 = fcmp oeq double %35, 0.000000e+00
  br i1 %36, label %37, label %53

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.blink::Matrix3DTransformOperation", %"class.blink::Matrix3DTransformOperation"* %0, i64 0, i32 1, i32 0, i32 0, i64 2, i64 1
  %39 = load double, double* %38, align 8
  %40 = fcmp oeq double %39, 0.000000e+00
  br i1 %40, label %41, label %53

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"class.blink::Matrix3DTransformOperation", %"class.blink::Matrix3DTransformOperation"* %0, i64 0, i32 1, i32 0, i32 0, i64 2, i64 2
  %43 = load double, double* %42, align 8
  %44 = fcmp oeq double %43, 1.000000e+00
  br i1 %44, label %45, label %53

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.blink::Matrix3DTransformOperation", %"class.blink::Matrix3DTransformOperation"* %0, i64 0, i32 1, i32 0, i32 0, i64 2, i64 3
  %47 = load double, double* %46, align 8
  %48 = fcmp oeq double %47, 0.000000e+00
  br i1 %48, label %49, label %53

49:                                               ; preds = %45
  %50 = getelementptr inbounds %"class.blink::Matrix3DTransformOperation", %"class.blink::Matrix3DTransformOperation"* %0, i64 0, i32 1, i32 0, i32 0, i64 3, i64 3
  %51 = load double, double* %50, align 8
  %52 = fcmp oeq double %51, 1.000000e+00
  br label %53

53:                                               ; preds = %1, %5, %9, %13, %17, %21, %25, %29, %33, %37, %41, %45, %49
  %54 = phi i1 [ false, %45 ], [ false, %41 ], [ false, %37 ], [ false, %33 ], [ false, %29 ], [ false, %25 ], [ false, %21 ], [ false, %17 ], [ false, %13 ], [ false, %9 ], [ false, %5 ], [ false, %1 ], [ %52, %49 ]
  ret i1 %54
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink18TransformOperation24HasNonTrivial3DComponentEv(%"class.blink::TransformOperation"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.blink::TransformOperation"* %0 to i32 (%"class.blink::TransformOperation"*)***
  %3 = load i32 (%"class.blink::TransformOperation"*)**, i32 (%"class.blink::TransformOperation"*)*** %2, align 8
  %4 = getelementptr inbounds i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %3, i64 7
  %5 = load i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %4, align 8
  %6 = tail call i32 %5(%"class.blink::TransformOperation"* %0) #6
  %7 = add i32 %6, -11
  %8 = icmp ult i32 %7, 10
  ret i1 %8
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink18TransformOperation19BoxSizeDependenciesEv(%"class.blink::TransformOperation"*) unnamed_addr #0 comdat align 2 {
  ret i32 0
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix8MultiplyERKS0_(%"class.blink::TransformationMatrix"*, %"class.blink::TransformationMatrix"* dereferenceable(128)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink20TransformationMatrixeqERKS0_(%"class.blink::TransformationMatrix"*, %"class.blink::TransformationMatrix"* dereferenceable(128)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 0
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 0
  %6 = load double, double* %5, align 8
  %7 = fcmp oeq double %4, %6
  br i1 %7, label %8, label %98

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 1
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 1
  %12 = load double, double* %11, align 8
  %13 = fcmp oeq double %10, %12
  br i1 %13, label %14, label %98

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %16 = load double, double* %15, align 8
  %17 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 2
  %18 = load double, double* %17, align 8
  %19 = fcmp oeq double %16, %18
  br i1 %19, label %20, label %98

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 3
  %22 = load double, double* %21, align 8
  %23 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 0, i64 3
  %24 = load double, double* %23, align 8
  %25 = fcmp oeq double %22, %24
  br i1 %25, label %26, label %98

26:                                               ; preds = %20
  %27 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %28 = load double, double* %27, align 8
  %29 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 0
  %30 = load double, double* %29, align 8
  %31 = fcmp oeq double %28, %30
  br i1 %31, label %32, label %98

32:                                               ; preds = %26
  %33 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  %34 = load double, double* %33, align 8
  %35 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 1
  %36 = load double, double* %35, align 8
  %37 = fcmp oeq double %34, %36
  br i1 %37, label %38, label %98

38:                                               ; preds = %32
  %39 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %40 = load double, double* %39, align 8
  %41 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 2
  %42 = load double, double* %41, align 8
  %43 = fcmp oeq double %40, %42
  br i1 %43, label %44, label %98

44:                                               ; preds = %38
  %45 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 3
  %46 = load double, double* %45, align 8
  %47 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 1, i64 3
  %48 = load double, double* %47, align 8
  %49 = fcmp oeq double %46, %48
  br i1 %49, label %50, label %98

50:                                               ; preds = %44
  %51 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 0
  %52 = load double, double* %51, align 8
  %53 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 0
  %54 = load double, double* %53, align 8
  %55 = fcmp oeq double %52, %54
  br i1 %55, label %56, label %98

56:                                               ; preds = %50
  %57 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 1
  %58 = load double, double* %57, align 8
  %59 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 1
  %60 = load double, double* %59, align 8
  %61 = fcmp oeq double %58, %60
  br i1 %61, label %62, label %98

62:                                               ; preds = %56
  %63 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %64 = load double, double* %63, align 8
  %65 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 2
  %66 = load double, double* %65, align 8
  %67 = fcmp oeq double %64, %66
  br i1 %67, label %68, label %98

68:                                               ; preds = %62
  %69 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 3
  %70 = load double, double* %69, align 8
  %71 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 2, i64 3
  %72 = load double, double* %71, align 8
  %73 = fcmp oeq double %70, %72
  br i1 %73, label %74, label %98

74:                                               ; preds = %68
  %75 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %76 = load double, double* %75, align 8
  %77 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 0
  %78 = load double, double* %77, align 8
  %79 = fcmp oeq double %76, %78
  br i1 %79, label %80, label %98

80:                                               ; preds = %74
  %81 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 1
  %82 = load double, double* %81, align 8
  %83 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 1
  %84 = load double, double* %83, align 8
  %85 = fcmp oeq double %82, %84
  br i1 %85, label %86, label %98

86:                                               ; preds = %80
  %87 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %88 = load double, double* %87, align 8
  %89 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 2
  %90 = load double, double* %89, align 8
  %91 = fcmp oeq double %88, %90
  br i1 %91, label %92, label %98

92:                                               ; preds = %86
  %93 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 3
  %94 = load double, double* %93, align 8
  %95 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %1, i64 0, i32 0, i32 0, i64 3, i64 3
  %96 = load double, double* %95, align 8
  %97 = fcmp oeq double %94, %96
  br label %98

98:                                               ; preds = %92, %86, %80, %74, %68, %62, %56, %50, %44, %38, %32, %26, %20, %14, %8, %2
  %99 = phi i1 [ false, %86 ], [ false, %80 ], [ false, %74 ], [ false, %68 ], [ false, %62 ], [ false, %56 ], [ false, %50 ], [ false, %44 ], [ false, %38 ], [ false, %32 ], [ false, %26 ], [ false, %20 ], [ false, %14 ], [ false, %8 ], [ false, %2 ], [ %97, %92 ]
  ret i1 %99
}

declare zeroext i1 @_ZNK5blink20TransformationMatrix24Preserves2dAxisAlignmentEv(%"class.blink::TransformationMatrix"*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
