; ModuleID = '../../base/task/single_thread_task_executor.cc'
source_filename = "../../base/task/single_thread_task_executor.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::SingleThreadTaskExecutor" = type { %"class.std::__1::unique_ptr", %class.scoped_refptr, i32, %"class.base::SimpleTaskExecutor" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::sequence_manager::SequenceManager"* }
%"class.base::sequence_manager::SequenceManager" = type { i32 (...)** }
%class.scoped_refptr = type { %"class.base::sequence_manager::TaskQueue"* }
%"class.base::sequence_manager::TaskQueue" = type { i32 (...)**, %"class.base::RefCountedThreadSafe", %"class.base::internal::CheckedLock", %"class.std::__1::unique_ptr.2", %"class.base::WeakPtr", %class.scoped_refptr.5, %class.scoped_refptr.151, i32, i32, i8*, %"class.base::WeakPtrFactory.152" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::internal::CheckedLock" = type { %"class.base::Lock" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.base::sequence_manager::internal::TaskQueueImpl"* }
%"class.base::sequence_manager::internal::TaskQueueImpl" = type <{ i8*, %"class.base::sequence_manager::internal::SequenceManagerImpl"*, %class.scoped_refptr.5, %class.scoped_refptr.112, %"class.base::internal::CheckedLock", %"struct.base::sequence_manager::internal::TaskQueueImpl::AnyThread", %"struct.base::sequence_manager::internal::TaskQueueImpl::MainThreadOnly", %"class.base::sequence_manager::internal::AtomicFlagSet::AtomicFlag", i8, i8, i8, [5 x i8] }>
%"class.base::sequence_manager::internal::SequenceManagerImpl" = type { %"class.base::sequence_manager::SequenceManager", %"class.base::sequence_manager::internal::SequencedTaskSource", %"class.base::sequence_manager::internal::TaskQueueSelector::Observer", %"class.base::RunLoop::NestingObserver", %class.scoped_refptr.5, %"class.base::sequence_manager::internal::EnqueueOrderGenerator", %"class.std::__1::unique_ptr.12", %"struct.base::sequence_manager::SequenceManager::Settings", %"struct.base::sequence_manager::SequenceManager::MetricRecordingSettings", i32, %"class.base::sequence_manager::internal::AtomicFlagSet", i32, %"struct.base::sequence_manager::internal::SequenceManagerImpl::MainThreadOnly", %"class.base::WeakPtrFactory" }
%"class.base::sequence_manager::internal::SequencedTaskSource" = type { i32 (...)** }
%"class.base::sequence_manager::internal::TaskQueueSelector::Observer" = type { i32 (...)** }
%"class.base::RunLoop::NestingObserver" = type { i32 (...)** }
%"class.base::sequence_manager::internal::EnqueueOrderGenerator" = type { %"struct.std::__1::atomic.7" }
%"struct.std::__1::atomic.7" = type { %"struct.std::__1::__atomic_base.8" }
%"struct.std::__1::__atomic_base.8" = type { %"struct.std::__1::__atomic_base.9" }
%"struct.std::__1::__atomic_base.9" = type { %"struct.std::__1::__cxx_atomic_impl.10" }
%"struct.std::__1::__cxx_atomic_impl.10" = type { %"struct.std::__1::__cxx_atomic_base_impl.11" }
%"struct.std::__1::__cxx_atomic_base_impl.11" = type { i64 }
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.base::sequence_manager::internal::ThreadController"* }
%"class.base::sequence_manager::internal::ThreadController" = type { i32 (...)** }
%"struct.base::sequence_manager::SequenceManager::Settings" = type <{ i32, i8, [3 x i8], %"class.base::TickClock"*, i8, [7 x i8] }>
%"class.base::TickClock" = type { i32 (...)** }
%"struct.base::sequence_manager::SequenceManager::MetricRecordingSettings" = type { double }
%"class.base::sequence_manager::internal::AtomicFlagSet" = type { %class.scoped_refptr.5, %"class.std::__1::unique_ptr.18", %"struct.base::sequence_manager::internal::AtomicFlagSet::Group"* }
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"struct.base::sequence_manager::internal::AtomicFlagSet::Group"* }
%"struct.base::sequence_manager::internal::AtomicFlagSet::Group" = type { %"struct.std::__1::atomic.7", i64, [64 x %"class.base::RepeatingCallback.153"], %"struct.base::sequence_manager::internal::AtomicFlagSet::Group"*, %"class.std::__1::unique_ptr.18", %"struct.base::sequence_manager::internal::AtomicFlagSet::Group"*, %"struct.base::sequence_manager::internal::AtomicFlagSet::Group"* }
%"class.base::RepeatingCallback.153" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.24 }
%class.scoped_refptr.24 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.25", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.25" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.base::sequence_manager::internal::SequenceManagerImpl::MainThreadOnly" = type { i32, %"class.base::circular_deque", %"struct.base::debug::CrashKeyString"*, %"struct.base::debug::CrashKeyString"*, %"struct.base::debug::CrashKeyString"*, %"struct.std::__1::array.28", %"class.std::__1::mersenne_twister_engine", %"class.std::__1::uniform_real_distribution", %"class.base::sequence_manager::internal::TaskQueueSelector", %"class.base::ObserverList", %"class.base::ObserverList.47", %"class.std::__1::set", %"class.std::__1::unique_ptr.59", i8, %"class.base::TimeTicks", %"class.std::__1::set.65", %"class.std::__1::map", %"class.std::__1::map", i8, i8, %"class.std::__1::deque", %"class.base::sequence_manager::SequenceManager::Observer"*, %"class.base::ObserverList.92", %"class.std::__1::multiset" }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"struct.base::sequence_manager::internal::TaskQueueImpl::DeferredNonNestableTask"*, i64 }
%"struct.base::sequence_manager::internal::TaskQueueImpl::DeferredNonNestableTask" = type <{ %"struct.base::sequence_manager::Task", %"class.base::sequence_manager::internal::TaskQueueImpl"*, i32, [4 x i8] }>
%"struct.base::sequence_manager::Task" = type { %"struct.base::PendingTask.base", i8, i8, i8, %class.scoped_refptr.26, %"class.base::sequence_manager::EnqueueOrder" }
%"struct.base::PendingTask.base" = type <{ %"class.base::OnceCallback", %"class.base::Location", %"class.base::TimeTicks", %"class.base::TimeTicks", %"struct.std::__1::array", i32, [4 x i8], i8*, i32, i8 }>
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"struct.std::__1::array" = type { [4 x i8*] }
%class.scoped_refptr.26 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.27" }>
%"class.base::RefCountedThreadSafe.27" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::sequence_manager::EnqueueOrder" = type { i64 }
%"struct.base::debug::CrashKeyString" = type <{ i8*, i32, [4 x i8] }>
%"struct.std::__1::array.28" = type { [64 x i8] }
%"class.std::__1::mersenne_twister_engine" = type { [312 x i64], i64 }
%"class.std::__1::uniform_real_distribution" = type { %"class.std::__1::uniform_real_distribution<double>::param_type" }
%"class.std::__1::uniform_real_distribution<double>::param_type" = type { double, double }
%"class.base::sequence_manager::internal::TaskQueueSelector" = type { %"class.base::sequence_manager::internal::WorkQueueSets::Observer", %class.scoped_refptr.5, %"struct.std::__1::array.29", %"class.base::sequence_manager::internal::TaskQueueSelector::ActivePriorityTracker", %"class.base::sequence_manager::internal::WorkQueueSets", %"class.base::sequence_manager::internal::WorkQueueSets", i64, %"class.base::sequence_manager::internal::TaskQueueSelector::Observer"* }
%"class.base::sequence_manager::internal::WorkQueueSets::Observer" = type { i32 (...)** }
%"struct.std::__1::array.29" = type { [7 x i32] }
%"class.base::sequence_manager::internal::TaskQueueSelector::ActivePriorityTracker" = type { i64 }
%"class.base::sequence_manager::internal::WorkQueueSets" = type { i8*, %"struct.std::__1::array.30", %"class.base::sequence_manager::internal::WorkQueueSets::Observer"* }
%"struct.std::__1::array.30" = type { [7 x %"class.base::internal::IntrusiveHeap"] }
%"class.base::internal::IntrusiveHeap" = type { %"class.base::IntrusiveHeap" }
%"class.base::IntrusiveHeap" = type { %"struct.base::IntrusiveHeap<base::sequence_manager::internal::WorkQueueSets::OldestTaskEnqueueOrder, base::internal::IntrusiveHeapImpl<base::sequence_manager::internal::WorkQueueSets::OldestTaskEnqueueOrder>::GreaterUsingLessEqual, base::DefaultHeapHandleAccessor<base::sequence_manager::internal::WorkQueueSets::OldestTaskEnqueueOrder> >::Impl" }
%"struct.base::IntrusiveHeap<base::sequence_manager::internal::WorkQueueSets::OldestTaskEnqueueOrder, base::internal::IntrusiveHeapImpl<base::sequence_manager::internal::WorkQueueSets::OldestTaskEnqueueOrder>::GreaterUsingLessEqual, base::DefaultHeapHandleAccessor<base::sequence_manager::internal::WorkQueueSets::OldestTaskEnqueueOrder> >::Impl" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.base::sequence_manager::internal::WorkQueueSets::OldestTaskEnqueueOrder"*, %"struct.base::sequence_manager::internal::WorkQueueSets::OldestTaskEnqueueOrder"*, %"class.std::__1::__compressed_pair.37" }
%"struct.base::sequence_manager::internal::WorkQueueSets::OldestTaskEnqueueOrder" = type { %"class.base::sequence_manager::EnqueueOrder", %"class.base::sequence_manager::internal::WorkQueue"* }
%"class.base::sequence_manager::internal::WorkQueue" = type <{ %"class.base::sequence_manager::internal::LazilyDeallocatedDeque", %"class.base::sequence_manager::internal::WorkQueueSets"*, %"class.base::sequence_manager::internal::TaskQueueImpl"*, i64, %"class.base::HeapHandle", i8*, %"class.base::sequence_manager::EnqueueOrder", i32, [4 x i8] }>
%"class.base::sequence_manager::internal::LazilyDeallocatedDeque" = type { %"class.std::__1::unique_ptr.31", %"struct.base::sequence_manager::internal::LazilyDeallocatedDeque<base::sequence_manager::Task, &base::subtle::TimeTicksNowIgnoringOverride>::Ring"*, i64, i64, %"class.base::TimeTicks" }
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"struct.base::sequence_manager::internal::LazilyDeallocatedDeque<base::sequence_manager::Task, &base::subtle::TimeTicksNowIgnoringOverride>::Ring"* }
%"struct.base::sequence_manager::internal::LazilyDeallocatedDeque<base::sequence_manager::Task, &base::subtle::TimeTicksNowIgnoringOverride>::Ring" = type { i64, i64, i64, %"struct.base::sequence_manager::Task"*, %"class.std::__1::unique_ptr.31" }
%"class.base::HeapHandle" = type { i64 }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"struct.base::sequence_manager::internal::WorkQueueSets::OldestTaskEnqueueOrder"* }
%"class.base::ObserverList" = type <{ %"class.std::__1::vector.40", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector.40" = type { %"class.std::__1::__vector_base.41" }
%"class.std::__1::__vector_base.41" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.42" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.base::ObserverList.47" = type <{ %"class.std::__1::vector.40", %"class.base::LinkedList.48", i64, i32, [4 x i8] }>
%"class.base::LinkedList.48" = type { %"class.base::LinkNode.49" }
%"class.base::LinkNode.49" = type { %"class.base::internal::LinkNodeBase" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.51", %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { i64 }
%"class.std::__1::unique_ptr.59" = type { %"class.std::__1::__compressed_pair.60" }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"class.base::sequence_manager::internal::RealTimeDomain"* }
%"class.base::sequence_manager::internal::RealTimeDomain" = type opaque
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::set.65" = type { %"class.std::__1::__tree.66" }
%"class.std::__1::__tree.66" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.67", %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.std::__1::map" = type { %"class.std::__1::__tree.75" }
%"class.std::__1::__tree.75" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.76", %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.88" }
%"struct.std::__1::__split_buffer" = type { %"struct.base::sequence_manager::internal::SequenceManagerImpl::ExecutingTask"**, %"struct.base::sequence_manager::internal::SequenceManagerImpl::ExecutingTask"**, %"struct.base::sequence_manager::internal::SequenceManagerImpl::ExecutingTask"**, %"class.std::__1::__compressed_pair.83" }
%"struct.base::sequence_manager::internal::SequenceManagerImpl::ExecutingTask" = type { %"struct.base::sequence_manager::Task", %"class.base::sequence_manager::internal::TaskQueueImpl"*, i8*, %"class.base::sequence_manager::TaskQueue::TaskTiming", i8, i32 }
%"class.base::sequence_manager::TaskQueue::TaskTiming" = type { i32, i8, i8, %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::ThreadTicks", %"class.base::ThreadTicks" }
%"class.base::ThreadTicks" = type { %"class.base::time_internal::TimeBase.82" }
%"class.base::time_internal::TimeBase.82" = type { i64 }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"struct.base::sequence_manager::internal::SequenceManagerImpl::ExecutingTask"** }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.base::sequence_manager::SequenceManager::Observer" = type { i32 (...)** }
%"class.base::ObserverList.92" = type <{ %"class.std::__1::vector.40", %"class.base::LinkedList.93", i64, i32, [4 x i8] }>
%"class.base::LinkedList.93" = type { %"class.base::LinkNode.94" }
%"class.base::LinkNode.94" = type { %"class.base::internal::LinkNodeBase" }
%"class.std::__1::multiset" = type { %"class.std::__1::__tree.96" }
%"class.std::__1::__tree.96" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.97", %"class.std::__1::__compressed_pair.101" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.105 }
%class.scoped_refptr.105 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.106", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.106" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.107" }
%"struct.std::__1::atomic.107" = type { %"struct.std::__1::__atomic_base.108" }
%"struct.std::__1::__atomic_base.108" = type { %"struct.std::__1::__atomic_base.109" }
%"struct.std::__1::__atomic_base.109" = type { %"struct.std::__1::__cxx_atomic_impl.110" }
%"struct.std::__1::__cxx_atomic_impl.110" = type { %"struct.std::__1::__cxx_atomic_base_impl.111" }
%"struct.std::__1::__cxx_atomic_base_impl.111" = type { i8 }
%class.scoped_refptr.112 = type { %"class.base::sequence_manager::internal::TaskQueueImpl::GuardedTaskPoster"* }
%"class.base::sequence_manager::internal::TaskQueueImpl::GuardedTaskPoster" = type { %"class.base::RefCountedThreadSafe.113", [4 x i8], %"class.base::internal::OperationsController", %"class.base::sequence_manager::internal::TaskQueueImpl"* }
%"class.base::RefCountedThreadSafe.113" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::internal::OperationsController" = type { %"struct.std::__1::atomic.114", [4 x i8], %"class.base::WaitableEvent" }
%"struct.std::__1::atomic.114" = type { %"struct.std::__1::__atomic_base.115" }
%"struct.std::__1::__atomic_base.115" = type { %"struct.std::__1::__atomic_base.116" }
%"struct.std::__1::__atomic_base.116" = type { %"struct.std::__1::__cxx_atomic_impl.117" }
%"struct.std::__1::__cxx_atomic_impl.117" = type { %"struct.std::__1::__cxx_atomic_base_impl.118" }
%"struct.std::__1::__cxx_atomic_base_impl.118" = type { i32 }
%"class.base::WaitableEvent" = type <{ %class.scoped_refptr.119, i8, [7 x i8] }>
%class.scoped_refptr.119 = type { %"struct.base::WaitableEvent::WaitableEventKernel"* }
%"struct.base::WaitableEvent::WaitableEventKernel" = type { %"class.base::RefCountedThreadSafe.120", %"class.base::Lock", i8, i8, %"class.std::__1::list" }
%"class.base::RefCountedThreadSafe.120" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.121" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.base::sequence_manager::internal::TaskQueueImpl::AnyThread" = type { %"class.base::sequence_manager::TimeDomain"*, %"class.base::sequence_manager::TaskQueue::Observer"*, %"class.base::sequence_manager::internal::LazilyDeallocatedDeque", i8, i8, i8, %"class.base::RepeatingCallback", %"struct.base::sequence_manager::internal::TaskQueueImpl::AnyThread::TracingOnly" }
%"class.base::sequence_manager::TimeDomain" = type opaque
%"class.base::sequence_manager::TaskQueue::Observer" = type { i32 (...)** }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"struct.base::sequence_manager::internal::TaskQueueImpl::AnyThread::TracingOnly" = type <{ i8, [7 x i8], %"class.absl::optional", i8, [7 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.base::TimeTicks" }
%"struct.base::sequence_manager::internal::TaskQueueImpl::MainThreadOnly" = type <{ %"class.base::sequence_manager::TimeDomain"*, %"class.base::sequence_manager::TaskQueue::Observer"*, %"class.std::__1::unique_ptr.125", %"class.std::__1::unique_ptr.125", %"struct.base::sequence_manager::internal::TaskQueueImpl::DelayedIncomingQueue", %"class.base::ObserverList", %"class.base::HeapHandle", i8, [7 x i8], %"class.base::trace_event::BlameContext"*, %"class.base::sequence_manager::EnqueueOrder", %"class.absl::optional", %"class.base::sequence_manager::EnqueueOrder", %"class.base::sequence_manager::EnqueueOrder", %"class.base::RepeatingCallback.140", %"class.base::RepeatingCallback.141", %"class.absl::optional.142", i8, [7 x i8], %"class.absl::optional", i8, [7 x i8] }>
%"class.std::__1::unique_ptr.125" = type { %"class.std::__1::__compressed_pair.126" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127" }
%"struct.std::__1::__compressed_pair_elem.127" = type { %"class.base::sequence_manager::internal::WorkQueue"* }
%"struct.base::sequence_manager::internal::TaskQueueImpl::DelayedIncomingQueue" = type { %"struct.base::sequence_manager::internal::TaskQueueImpl::DelayedIncomingQueue::PQueue", i32, [4 x i8] }
%"struct.base::sequence_manager::internal::TaskQueueImpl::DelayedIncomingQueue::PQueue" = type { %"class.std::__1::priority_queue.base", [7 x i8] }
%"class.std::__1::priority_queue.base" = type <{ %"class.std::__1::vector.131", %"struct.std::__1::less.138" }>
%"class.std::__1::vector.131" = type { %"class.std::__1::__vector_base.132" }
%"class.std::__1::__vector_base.132" = type { %"struct.base::sequence_manager::Task"*, %"struct.base::sequence_manager::Task"*, %"class.std::__1::__compressed_pair.133" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.134" }
%"struct.std::__1::__compressed_pair_elem.134" = type { %"struct.base::sequence_manager::Task"* }
%"struct.std::__1::less.138" = type { i8 }
%"class.base::trace_event::BlameContext" = type opaque
%"class.base::RepeatingCallback.140" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::RepeatingCallback.141" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.absl::optional.142" = type { %"class.absl::optional_internal::optional_data.143" }
%"class.absl::optional_internal::optional_data.143" = type { %"class.absl::optional_internal::optional_data_base.144" }
%"class.absl::optional_internal::optional_data_base.144" = type { %"class.absl::optional_internal::optional_data_dtor_base.145" }
%"class.absl::optional_internal::optional_data_dtor_base.145" = type { i8, %union.anon.146 }
%union.anon.146 = type { %"struct.base::sequence_manager::internal::DelayedWakeUp" }
%"struct.base::sequence_manager::internal::DelayedWakeUp" = type { %"class.base::TimeTicks", i32, i32 }
%"class.base::sequence_manager::internal::AtomicFlagSet::AtomicFlag" = type { %"class.base::sequence_manager::internal::AtomicFlagSet"*, %"struct.base::sequence_manager::internal::AtomicFlagSet::Group"*, i64 }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.150 }
%class.scoped_refptr.150 = type { %"class.base::internal::WeakReference::Flag"* }
%class.scoped_refptr.5 = type { %"class.base::sequence_manager::internal::AssociatedThreadId"* }
%"class.base::sequence_manager::internal::AssociatedThreadId" = type { %"class.base::RefCountedThreadSafe.6", %"struct.std::__1::atomic" }
%"class.base::RefCountedThreadSafe.6" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%class.scoped_refptr.151 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::WeakPtrFactory.152" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::SimpleTaskExecutor" = type { %"class.base::TaskExecutor", %class.scoped_refptr.151, %"class.base::TaskExecutor"* }
%"class.base::TaskExecutor" = type { i32 (...)** }
%"class.base::MessagePump" = type { i32 (...)** }
%"class.base::sequence_manager::SequenceManager::Settings::Builder" = type { %"struct.base::sequence_manager::SequenceManager::Settings" }
%"struct.base::sequence_manager::TaskQueue::Spec" = type <{ i8*, i8, [7 x i8], %"class.base::sequence_manager::TimeDomain"*, i8, i8, [6 x i8] }>

@.str = private unnamed_addr constant [11 x i8] c"default_tq\00", align 1

@_ZN4base24SingleThreadTaskExecutorC1ENS_15MessagePumpTypeE = hidden unnamed_addr alias void (%"class.base::SingleThreadTaskExecutor"*, i32), void (%"class.base::SingleThreadTaskExecutor"*, i32)* @_ZN4base24SingleThreadTaskExecutorC2ENS_15MessagePumpTypeE
@_ZN4base24SingleThreadTaskExecutorC1ENSt3__110unique_ptrINS_11MessagePumpENS1_14default_deleteIS3_EEEE = hidden unnamed_addr alias void (%"class.base::SingleThreadTaskExecutor"*, %"class.base::MessagePump"*), void (%"class.base::SingleThreadTaskExecutor"*, %"class.base::MessagePump"*)* @_ZN4base24SingleThreadTaskExecutorC2ENSt3__110unique_ptrINS_11MessagePumpENS1_14default_deleteIS3_EEEE
@_ZN4base24SingleThreadTaskExecutorC1ENS_15MessagePumpTypeENSt3__110unique_ptrINS_11MessagePumpENS2_14default_deleteIS4_EEEE = hidden unnamed_addr alias void (%"class.base::SingleThreadTaskExecutor"*, i32, %"class.base::MessagePump"*), void (%"class.base::SingleThreadTaskExecutor"*, i32, %"class.base::MessagePump"*)* @_ZN4base24SingleThreadTaskExecutorC2ENS_15MessagePumpTypeENSt3__110unique_ptrINS_11MessagePumpENS2_14default_deleteIS4_EEEE
@_ZN4base24SingleThreadTaskExecutorD1Ev = hidden unnamed_addr alias void (%"class.base::SingleThreadTaskExecutor"*), void (%"class.base::SingleThreadTaskExecutor"*)* @_ZN4base24SingleThreadTaskExecutorD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base24SingleThreadTaskExecutorC2ENS_15MessagePumpTypeE(%"class.base::SingleThreadTaskExecutor"*, i32) unnamed_addr #0 align 2 {
  %3 = tail call %"class.base::MessagePump"* @_ZN4base11MessagePump6CreateENS_15MessagePumpTypeE(i32 %1) #5
  tail call void @_ZN4base24SingleThreadTaskExecutorC2ENS_15MessagePumpTypeENSt3__110unique_ptrINS_11MessagePumpENS2_14default_deleteIS4_EEEE(%"class.base::SingleThreadTaskExecutor"* %0, i32 %1, %"class.base::MessagePump"* %3)
  ret void
}

declare %"class.base::MessagePump"* @_ZN4base11MessagePump6CreateENS_15MessagePumpTypeE(i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base24SingleThreadTaskExecutorC2ENS_15MessagePumpTypeENSt3__110unique_ptrINS_11MessagePumpENS2_14default_deleteIS4_EEEE(%"class.base::SingleThreadTaskExecutor"*, i32, %"class.base::MessagePump"*) unnamed_addr #0 align 2 {
  %4 = alloca %"struct.base::sequence_manager::SequenceManager::Settings", align 8
  %5 = alloca %"class.base::sequence_manager::SequenceManager::Settings::Builder", align 8
  %6 = alloca %"struct.base::sequence_manager::TaskQueue::Spec", align 8
  %7 = bitcast %"class.base::sequence_manager::SequenceManager::Settings::Builder"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #5
  call void @_ZN4base16sequence_manager15SequenceManager8Settings7BuilderC1Ev(%"class.base::sequence_manager::SequenceManager::Settings::Builder"* nonnull %5) #5
  %8 = call dereferenceable(24) %"class.base::sequence_manager::SequenceManager::Settings::Builder"* @_ZN4base16sequence_manager15SequenceManager8Settings7Builder18SetMessagePumpTypeENS_15MessagePumpTypeE(%"class.base::sequence_manager::SequenceManager::Settings::Builder"* nonnull %5, i32 %1) #5
  call void @_ZN4base16sequence_manager15SequenceManager8Settings7Builder5BuildEv(%"struct.base::sequence_manager::SequenceManager::Settings"* nonnull sret %4, %"class.base::sequence_manager::SequenceManager::Settings::Builder"* %8) #5
  %9 = call %"class.base::sequence_manager::SequenceManager"* @_ZN4base16sequence_manager28CreateUnboundSequenceManagerENS0_15SequenceManager8SettingsE(%"struct.base::sequence_manager::SequenceManager::Settings"* nonnull %4) #5
  %10 = getelementptr inbounds %"class.base::SingleThreadTaskExecutor", %"class.base::SingleThreadTaskExecutor"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.base::sequence_manager::SequenceManager"* %9, %"class.base::sequence_manager::SequenceManager"** %10, align 8
  call void @_ZN4base16sequence_manager15SequenceManager8Settings7BuilderD1Ev(%"class.base::sequence_manager::SequenceManager::Settings::Builder"* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #5
  %11 = load %"class.base::sequence_manager::SequenceManager"*, %"class.base::sequence_manager::SequenceManager"** %10, align 8
  %12 = bitcast %"struct.base::sequence_manager::TaskQueue::Spec"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #5
  %13 = getelementptr inbounds %"struct.base::sequence_manager::TaskQueue::Spec", %"struct.base::sequence_manager::TaskQueue::Spec"* %6, i64 0, i32 0
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8** %13, align 8
  %14 = getelementptr inbounds %"struct.base::sequence_manager::TaskQueue::Spec", %"struct.base::sequence_manager::TaskQueue::Spec"* %6, i64 0, i32 1
  store i8 0, i8* %14, align 8
  %15 = getelementptr inbounds %"struct.base::sequence_manager::TaskQueue::Spec", %"struct.base::sequence_manager::TaskQueue::Spec"* %6, i64 0, i32 3
  store %"class.base::sequence_manager::TimeDomain"* null, %"class.base::sequence_manager::TimeDomain"** %15, align 8
  %16 = getelementptr inbounds %"struct.base::sequence_manager::TaskQueue::Spec", %"struct.base::sequence_manager::TaskQueue::Spec"* %6, i64 0, i32 4
  store i8 1, i8* %16, align 8
  %17 = getelementptr inbounds %"struct.base::sequence_manager::TaskQueue::Spec", %"struct.base::sequence_manager::TaskQueue::Spec"* %6, i64 0, i32 5
  store i8 0, i8* %17, align 1
  %18 = bitcast %"class.base::sequence_manager::SequenceManager"* %11 to %"class.base::sequence_manager::TaskQueue"* (%"class.base::sequence_manager::SequenceManager"*, %"struct.base::sequence_manager::TaskQueue::Spec"*)***
  %19 = load %"class.base::sequence_manager::TaskQueue"* (%"class.base::sequence_manager::SequenceManager"*, %"struct.base::sequence_manager::TaskQueue::Spec"*)**, %"class.base::sequence_manager::TaskQueue"* (%"class.base::sequence_manager::SequenceManager"*, %"struct.base::sequence_manager::TaskQueue::Spec"*)*** %18, align 8
  %20 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue"* (%"class.base::sequence_manager::SequenceManager"*, %"struct.base::sequence_manager::TaskQueue::Spec"*)*, %"class.base::sequence_manager::TaskQueue"* (%"class.base::sequence_manager::SequenceManager"*, %"struct.base::sequence_manager::TaskQueue::Spec"*)** %19, i64 20
  %21 = load %"class.base::sequence_manager::TaskQueue"* (%"class.base::sequence_manager::SequenceManager"*, %"struct.base::sequence_manager::TaskQueue::Spec"*)*, %"class.base::sequence_manager::TaskQueue"* (%"class.base::sequence_manager::SequenceManager"*, %"struct.base::sequence_manager::TaskQueue::Spec"*)** %20, align 8
  %22 = call %"class.base::sequence_manager::TaskQueue"* %21(%"class.base::sequence_manager::SequenceManager"* %11, %"struct.base::sequence_manager::TaskQueue::Spec"* nonnull dereferenceable(32) %6) #5
  %23 = getelementptr inbounds %"class.base::SingleThreadTaskExecutor", %"class.base::SingleThreadTaskExecutor"* %0, i64 0, i32 1, i32 0
  store %"class.base::sequence_manager::TaskQueue"* %22, %"class.base::sequence_manager::TaskQueue"** %23, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #5
  %24 = getelementptr inbounds %"class.base::SingleThreadTaskExecutor", %"class.base::SingleThreadTaskExecutor"* %0, i64 0, i32 2
  store i32 %1, i32* %24, align 8
  %25 = getelementptr inbounds %"class.base::SingleThreadTaskExecutor", %"class.base::SingleThreadTaskExecutor"* %0, i64 0, i32 3
  %26 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue", %"class.base::sequence_manager::TaskQueue"* %22, i64 0, i32 6, i32 0
  %27 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %26, align 8
  %28 = icmp eq %"class.base::SingleThreadTaskRunner"* %27, null
  br i1 %28, label %32, label %29

29:                                               ; preds = %3
  %30 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %27, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = atomicrmw add i32* %30, i32 1 monotonic
  br label %32

32:                                               ; preds = %3, %29
  call void @_ZN4base18SimpleTaskExecutorC1E13scoped_refptrINS_22SingleThreadTaskRunnerEE(%"class.base::SimpleTaskExecutor"* %25, %"class.base::SingleThreadTaskRunner"* %27) #5
  %33 = load %"class.base::sequence_manager::SequenceManager"*, %"class.base::sequence_manager::SequenceManager"** %10, align 8
  %34 = load %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %23, align 8
  %35 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue", %"class.base::sequence_manager::TaskQueue"* %34, i64 0, i32 6, i32 0
  %36 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %35, align 8
  %37 = icmp eq %"class.base::SingleThreadTaskRunner"* %36, null
  br i1 %37, label %41, label %38

38:                                               ; preds = %32
  %39 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %36, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = atomicrmw add i32* %39, i32 1 monotonic
  br label %41

41:                                               ; preds = %38, %32
  %42 = bitcast %"class.base::sequence_manager::SequenceManager"* %33 to void (%"class.base::sequence_manager::SequenceManager"*, %"class.base::SingleThreadTaskRunner"*)***
  %43 = load void (%"class.base::sequence_manager::SequenceManager"*, %"class.base::SingleThreadTaskRunner"*)**, void (%"class.base::sequence_manager::SequenceManager"*, %"class.base::SingleThreadTaskRunner"*)*** %42, align 8
  %44 = getelementptr inbounds void (%"class.base::sequence_manager::SequenceManager"*, %"class.base::SingleThreadTaskRunner"*)*, void (%"class.base::sequence_manager::SequenceManager"*, %"class.base::SingleThreadTaskRunner"*)** %43, i64 13
  %45 = load void (%"class.base::sequence_manager::SequenceManager"*, %"class.base::SingleThreadTaskRunner"*)*, void (%"class.base::sequence_manager::SequenceManager"*, %"class.base::SingleThreadTaskRunner"*)** %44, align 8
  call void %45(%"class.base::sequence_manager::SequenceManager"* %33, %"class.base::SingleThreadTaskRunner"* %36) #5
  %46 = load %"class.base::sequence_manager::SequenceManager"*, %"class.base::sequence_manager::SequenceManager"** %10, align 8
  %47 = bitcast %"class.base::sequence_manager::SequenceManager"* %46 to void (%"class.base::sequence_manager::SequenceManager"*, %"class.base::MessagePump"*)***
  %48 = load void (%"class.base::sequence_manager::SequenceManager"*, %"class.base::MessagePump"*)**, void (%"class.base::sequence_manager::SequenceManager"*, %"class.base::MessagePump"*)*** %47, align 8
  %49 = getelementptr inbounds void (%"class.base::sequence_manager::SequenceManager"*, %"class.base::MessagePump"*)*, void (%"class.base::sequence_manager::SequenceManager"*, %"class.base::MessagePump"*)** %48, i64 4
  %50 = load void (%"class.base::sequence_manager::SequenceManager"*, %"class.base::MessagePump"*)*, void (%"class.base::sequence_manager::SequenceManager"*, %"class.base::MessagePump"*)** %49, align 8
  call void %50(%"class.base::sequence_manager::SequenceManager"* %46, %"class.base::MessagePump"* %2) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base24SingleThreadTaskExecutorC2ENSt3__110unique_ptrINS_11MessagePumpENS1_14default_deleteIS3_EEEE(%"class.base::SingleThreadTaskExecutor"*, %"class.base::MessagePump"*) unnamed_addr #0 align 2 {
  tail call void @_ZN4base24SingleThreadTaskExecutorC2ENS_15MessagePumpTypeENSt3__110unique_ptrINS_11MessagePumpENS2_14default_deleteIS4_EEEE(%"class.base::SingleThreadTaskExecutor"* %0, i32 2, %"class.base::MessagePump"* %1)
  ret void
}

declare %"class.base::sequence_manager::SequenceManager"* @_ZN4base16sequence_manager28CreateUnboundSequenceManagerENS0_15SequenceManager8SettingsE(%"struct.base::sequence_manager::SequenceManager::Settings"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN4base16sequence_manager15SequenceManager8Settings7BuilderC1Ev(%"class.base::sequence_manager::SequenceManager::Settings::Builder"*) unnamed_addr #1

declare dereferenceable(24) %"class.base::sequence_manager::SequenceManager::Settings::Builder"* @_ZN4base16sequence_manager15SequenceManager8Settings7Builder18SetMessagePumpTypeENS_15MessagePumpTypeE(%"class.base::sequence_manager::SequenceManager::Settings::Builder"*, i32) local_unnamed_addr #1

declare void @_ZN4base16sequence_manager15SequenceManager8Settings7Builder5BuildEv(%"struct.base::sequence_manager::SequenceManager::Settings"* sret, %"class.base::sequence_manager::SequenceManager::Settings::Builder"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base16sequence_manager15SequenceManager8Settings7BuilderD1Ev(%"class.base::sequence_manager::SequenceManager::Settings::Builder"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(8) %class.scoped_refptr.151* @_ZNK4base24SingleThreadTaskExecutor11task_runnerEv(%"class.base::SingleThreadTaskExecutor"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.base::SingleThreadTaskExecutor", %"class.base::SingleThreadTaskExecutor"* %0, i64 0, i32 1, i32 0
  %3 = load %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %2, align 8
  %4 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue", %"class.base::sequence_manager::TaskQueue"* %3, i64 0, i32 6
  ret %class.scoped_refptr.151* %4
}

declare void @_ZN4base18SimpleTaskExecutorC1E13scoped_refptrINS_22SingleThreadTaskRunnerEE(%"class.base::SimpleTaskExecutor"*, %"class.base::SingleThreadTaskRunner"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base24SingleThreadTaskExecutorD2Ev(%"class.base::SingleThreadTaskExecutor"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::SingleThreadTaskExecutor", %"class.base::SingleThreadTaskExecutor"* %0, i64 0, i32 3
  tail call void @_ZN4base18SimpleTaskExecutorD1Ev(%"class.base::SimpleTaskExecutor"* %2) #5
  %3 = getelementptr inbounds %"class.base::SingleThreadTaskExecutor", %"class.base::SingleThreadTaskExecutor"* %0, i64 0, i32 1, i32 0
  %4 = load %"class.base::sequence_manager::TaskQueue"*, %"class.base::sequence_manager::TaskQueue"** %3, align 8
  %5 = icmp eq %"class.base::sequence_manager::TaskQueue"* %4, null
  br i1 %5, label %18, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::sequence_manager::TaskQueue", %"class.base::sequence_manager::TaskQueue"* %4, i64 0, i32 1
  %8 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw sub i32* %8, i32 1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %18

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %7, i64 -2
  %13 = bitcast %"class.base::RefCountedThreadSafe"* %12 to %"class.base::sequence_manager::TaskQueue"*
  %14 = bitcast %"class.base::RefCountedThreadSafe"* %12 to void (%"class.base::sequence_manager::TaskQueue"*)***
  %15 = load void (%"class.base::sequence_manager::TaskQueue"*)**, void (%"class.base::sequence_manager::TaskQueue"*)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.base::sequence_manager::TaskQueue"*)*, void (%"class.base::sequence_manager::TaskQueue"*)** %15, i64 3
  %17 = load void (%"class.base::sequence_manager::TaskQueue"*)*, void (%"class.base::sequence_manager::TaskQueue"*)** %16, align 8
  tail call void %17(%"class.base::sequence_manager::TaskQueue"* nonnull %13) #5
  br label %18

18:                                               ; preds = %1, %6, %11
  %19 = getelementptr inbounds %"class.base::SingleThreadTaskExecutor", %"class.base::SingleThreadTaskExecutor"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = load %"class.base::sequence_manager::SequenceManager"*, %"class.base::sequence_manager::SequenceManager"** %19, align 8
  store %"class.base::sequence_manager::SequenceManager"* null, %"class.base::sequence_manager::SequenceManager"** %19, align 8
  %21 = icmp eq %"class.base::sequence_manager::SequenceManager"* %20, null
  br i1 %21, label %27, label %22

22:                                               ; preds = %18
  %23 = bitcast %"class.base::sequence_manager::SequenceManager"* %20 to void (%"class.base::sequence_manager::SequenceManager"*)***
  %24 = load void (%"class.base::sequence_manager::SequenceManager"*)**, void (%"class.base::sequence_manager::SequenceManager"*)*** %23, align 8
  %25 = getelementptr inbounds void (%"class.base::sequence_manager::SequenceManager"*)*, void (%"class.base::sequence_manager::SequenceManager"*)** %24, i64 1
  %26 = load void (%"class.base::sequence_manager::SequenceManager"*)*, void (%"class.base::sequence_manager::SequenceManager"*)** %25, align 8
  tail call void %26(%"class.base::sequence_manager::SequenceManager"* nonnull %20) #5
  br label %27

27:                                               ; preds = %18, %22
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base18SimpleTaskExecutorD1Ev(%"class.base::SimpleTaskExecutor"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base24SingleThreadTaskExecutor16SetWorkBatchSizeEm(%"class.base::SingleThreadTaskExecutor"* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::SingleThreadTaskExecutor", %"class.base::SingleThreadTaskExecutor"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load %"class.base::sequence_manager::SequenceManager"*, %"class.base::sequence_manager::SequenceManager"** %3, align 8
  %5 = trunc i64 %1 to i32
  %6 = bitcast %"class.base::sequence_manager::SequenceManager"* %4 to void (%"class.base::sequence_manager::SequenceManager"*, i32)***
  %7 = load void (%"class.base::sequence_manager::SequenceManager"*, i32)**, void (%"class.base::sequence_manager::SequenceManager"*, i32)*** %6, align 8
  %8 = getelementptr inbounds void (%"class.base::sequence_manager::SequenceManager"*, i32)*, void (%"class.base::sequence_manager::SequenceManager"*, i32)** %7, i64 16
  %9 = load void (%"class.base::sequence_manager::SequenceManager"*, i32)*, void (%"class.base::sequence_manager::SequenceManager"*, i32)** %8, align 8
  tail call void %9(%"class.base::sequence_manager::SequenceManager"* %4, i32 %5) #5
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
